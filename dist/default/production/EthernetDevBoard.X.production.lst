

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat May 04 15:35:11 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F25K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK3,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    17                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    18                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    19                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1,lowdata,noexec
    20                           	psect	cstackBANK6,global,class=BANK6,space=1,delta=1,noexec
    21                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    22                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    23                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    24                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    25                           	psect	text0,global,reloc=2,class=CODE,delta=1
    26                           	psect	text1,global,reloc=2,class=CODE,delta=1
    27                           	psect	text2,global,reloc=2,class=CODE,delta=1
    28                           	psect	text3,global,reloc=2,class=CODE,delta=1
    29                           	psect	text4,global,reloc=2,class=CODE,delta=1
    30                           	psect	text5,global,reloc=2,class=CODE,delta=1
    31                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text7,global,reloc=2,class=CODE,delta=1
    33                           	psect	text8,global,reloc=2,class=CODE,delta=1
    34                           	psect	text9,global,reloc=2,class=CODE,delta=1
    35                           	psect	text10,global,reloc=2,class=CODE,delta=1
    36                           	psect	text11,global,reloc=2,class=CODE,delta=1
    37                           	psect	text12,global,reloc=2,class=CODE,delta=1
    38                           	psect	text13,global,reloc=2,class=CODE,delta=1
    39                           	psect	text14,global,reloc=2,class=CODE,delta=1
    40                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text16,global,reloc=2,class=CODE,delta=1
    42                           	psect	text17,global,reloc=2,class=CODE,delta=1
    43                           	psect	text18,global,reloc=2,class=CODE,delta=1
    44                           	psect	text19,global,reloc=2,class=CODE,delta=1
    45                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text23,global,reloc=2,class=CODE,delta=1
    49                           	psect	text24,global,reloc=2,class=CODE,delta=1
    50                           	psect	text25,global,reloc=2,class=CODE,delta=1
    51                           	psect	text26,global,reloc=2,class=CODE,delta=1
    52                           	psect	text27,global,reloc=2,class=CODE,delta=1
    53                           	psect	text28,global,reloc=2,class=CODE,delta=1
    54                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    55                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	text33,global,reloc=2,class=CODE,delta=1
    59                           	psect	text34,global,reloc=2,class=CODE,delta=1
    60                           	psect	text35,global,reloc=2,class=CODE,delta=1
    61                           	psect	text36,global,reloc=2,class=CODE,delta=1
    62                           	psect	text37,global,reloc=2,class=CODE,delta=1
    63                           	psect	text38,global,reloc=2,class=CODE,delta=1
    64                           	psect	text39,global,reloc=2,class=CODE,delta=1
    65                           	psect	text40,global,reloc=2,class=CODE,delta=1
    66                           	psect	text41,global,reloc=2,class=CODE,delta=1
    67                           	psect	text42,global,reloc=2,class=CODE,delta=1
    68                           	psect	text43,global,reloc=2,class=CODE,delta=1
    69                           	psect	text44,global,reloc=2,class=CODE,delta=1
    70                           	psect	text45,global,reloc=2,class=CODE,delta=1
    71                           	psect	text46,global,reloc=2,class=CODE,delta=1
    72                           	psect	text47,global,reloc=2,class=CODE,delta=1
    73                           	psect	text48,global,reloc=2,class=CODE,delta=1
    74                           	psect	text49,global,reloc=2,class=CODE,delta=1
    75                           	psect	text50,global,reloc=2,class=CODE,delta=1
    76                           	psect	text51,global,reloc=2,class=CODE,delta=1
    77                           	psect	text52,global,reloc=2,class=CODE,delta=1
    78                           	psect	text53,global,reloc=2,class=CODE,delta=1
    79                           	psect	text54,global,reloc=2,class=CODE,delta=1
    80                           	psect	text55,global,reloc=2,class=CODE,delta=1
    81                           	psect	text56,global,reloc=2,class=CODE,delta=1
    82                           	psect	text57,global,reloc=2,class=CODE,delta=1
    83                           	psect	text58,global,reloc=2,class=CODE,delta=1
    84                           	psect	text59,global,reloc=2,class=CODE,delta=1
    85                           	psect	text60,global,reloc=2,class=CODE,delta=1
    86                           	psect	text61,global,reloc=2,class=CODE,delta=1
    87                           	psect	text62,global,reloc=2,class=CODE,delta=1
    88                           	psect	text63,global,reloc=2,class=CODE,delta=1
    89                           	psect	text64,global,reloc=2,class=CODE,delta=1
    90                           	psect	text65,global,reloc=2,class=CODE,delta=1
    91                           	psect	text66,global,reloc=2,class=CODE,delta=1
    92                           	psect	text67,global,reloc=2,class=CODE,delta=1
    93                           	psect	text68,global,reloc=2,class=CODE,delta=1
    94                           	psect	text69,global,reloc=2,class=CODE,delta=1
    95                           	psect	text70,global,reloc=2,class=CODE,delta=1
    96                           	psect	text71,global,reloc=2,class=CODE,delta=1
    97                           	psect	text72,global,reloc=2,class=CODE,delta=1
    98                           	psect	text73,global,reloc=2,class=CODE,delta=1
    99                           	psect	text74,global,reloc=2,class=CODE,delta=1
   100                           	psect	text75,global,reloc=2,class=CODE,delta=1
   101                           	psect	text76,global,reloc=2,class=CODE,delta=1
   102                           	psect	text77,global,reloc=2,class=CODE,delta=1
   103                           	psect	text78,global,reloc=2,class=CODE,delta=1
   104                           	psect	text79,global,reloc=2,class=CODE,delta=1
   105                           	psect	text80,global,reloc=2,class=CODE,delta=1
   106                           	psect	text81,global,reloc=2,class=CODE,delta=1
   107                           	psect	text82,global,reloc=2,class=CODE,delta=1
   108                           	psect	text83,global,reloc=2,class=CODE,delta=1
   109                           	psect	text84,global,reloc=2,class=CODE,delta=1
   110                           	psect	text85,global,reloc=2,class=CODE,delta=1
   111                           	psect	text86,global,reloc=2,class=CODE,delta=1
   112                           	psect	text87,global,reloc=2,class=CODE,delta=1
   113                           	psect	text88,global,reloc=2,class=CODE,delta=1
   114                           	psect	text89,global,reloc=2,class=CODE,delta=1,group=1
   115                           	psect	text90,global,reloc=2,class=CODE,delta=1,group=1
   116                           	psect	text91,global,reloc=2,class=CODE,delta=1
   117                           	psect	text92,global,reloc=2,class=CODE,delta=1,group=1
   118                           	psect	text93,global,reloc=2,class=CODE,delta=1
   119                           	psect	text94,global,reloc=2,class=CODE,delta=1
   120                           	psect	text95,global,reloc=2,class=CODE,delta=1
   121                           	psect	text96,global,reloc=2,class=CODE,delta=1
   122                           	psect	text97,global,reloc=2,class=CODE,delta=1
   123                           	psect	text98,global,reloc=2,class=CODE,delta=1
   124                           	psect	text99,global,reloc=2,class=CODE,delta=1
   125                           	psect	text100,global,reloc=2,class=CODE,delta=1
   126                           	psect	text101,global,reloc=2,class=CODE,delta=1
   127                           	psect	text102,global,reloc=2,class=CODE,delta=1
   128                           	psect	text103,global,reloc=2,class=CODE,delta=1
   129                           	psect	text104,global,reloc=2,class=CODE,delta=1
   130                           	psect	text105,global,reloc=2,class=CODE,delta=1
   131                           	psect	text106,global,reloc=2,class=CODE,delta=1,group=1
   132                           	psect	text107,global,reloc=2,class=CODE,delta=1
   133                           	psect	text108,global,reloc=2,class=CODE,delta=1
   134                           	psect	text109,global,reloc=2,class=CODE,delta=1
   135                           	psect	text110,global,reloc=2,class=CODE,delta=1
   136                           	psect	text111,global,reloc=2,class=CODE,delta=1
   137                           	psect	text112,global,reloc=2,class=CODE,delta=1
   138                           	psect	text113,global,reloc=2,class=CODE,delta=1
   139                           	psect	text114,global,reloc=2,class=CODE,delta=1
   140                           	psect	text115,global,reloc=2,class=CODE,delta=1
   141                           	psect	text116,global,reloc=2,class=CODE,delta=1
   142                           	psect	text117,global,reloc=2,class=CODE,delta=1
   143                           	psect	text118,global,reloc=2,class=CODE,delta=1
   144                           	psect	text119,global,reloc=2,class=CODE,delta=1
   145                           	psect	text120,global,reloc=2,class=CODE,delta=1
   146                           	psect	text121,global,reloc=2,class=CODE,delta=1
   147                           	psect	text122,global,reloc=2,class=CODE,delta=1
   148                           	psect	text123,global,reloc=2,class=CODE,delta=1
   149                           	psect	text124,global,reloc=2,class=CODE,delta=1
   150                           	psect	text125,global,reloc=2,class=CODE,delta=1
   151                           	psect	text126,global,reloc=2,class=CODE,delta=1
   152                           	psect	text127,global,reloc=2,class=CODE,delta=1
   153                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   154                           	psect	text129,global,reloc=2,class=CODE,delta=1
   155                           	psect	text130,global,reloc=2,class=CODE,delta=1
   156                           	psect	text131,global,reloc=2,class=CODE,delta=1
   157                           	psect	text132,global,reloc=2,class=CODE,delta=1
   158                           	psect	text133,global,reloc=2,class=CODE,delta=1
   159                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   160                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   161                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   162  0000                     
   163                           ; Version 1.45
   164                           ; Generated 16/11/2017 GMT
   165                           ; 
   166                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   167                           ; All rights reserved.
   168                           ; 
   169                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   170                           ; 
   171                           ; Redistribution and use in source and binary forms, with or without modification, are
   172                           ; permitted provided that the following conditions are met:
   173                           ; 
   174                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   175                           ;        conditions and the following disclaimer.
   176                           ; 
   177                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   178                           ;        of conditions and the following disclaimer in the documentation and/or other
   179                           ;        materials provided with the distribution.
   180                           ; 
   181                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   182                           ;        software without specific prior written permission.
   183                           ; 
   184                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   185                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   186                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   187                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   188                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   189                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   190                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   191                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   192                           ; 
   193                           ; 
   194                           ; Code-generator required, PIC18F25K50 Definitions
   195                           ; 
   196                           ; SFR Addresses
   197  0000                     
   198                           	psect	idataCOMRAM
   199  006EA4                     __pidataCOMRAM:
   200                           	opt stack 0
   201                           
   202                           ;initializer for _id
   203  006EA4  0001               	dw	1
   204                           
   205                           ;initializer for ethernetController_softReset@F6068
   206  006EA6  12                 	db	18
   207  006EA7  34                 	db	52
   208                           
   209                           	psect	idataBANK2
   210  006EA8                     __pidataBANK2:
   211                           	opt stack 0
   212                           
   213                           ;initializer for _randx
   214  006EA8  0001               	dw	1
   215  006EAA  0000               	dw	0
   216                           
   217                           	psect	idataBANK3
   218  006AD8                     __pidataBANK3:
   219                           	opt stack 0
   220                           
   221                           ;initializer for _icmpTxtMessages
   222  006AD8  4D                 	db	low STR_30
   223  006AD9  7F                 	db	high STR_30
   224  006ADA  ED                 	db	low (STR_17+3)
   225  006ADB  7F                 	db	high (STR_17+3)
   226  006ADC  ED                 	db	low (STR_17+3)
   227  006ADD  7F                 	db	high (STR_17+3)
   228  006ADE  D3                 	db	low STR_33
   229  006ADF  7D                 	db	high STR_33
   230  006AE0  AD                 	db	low STR_34
   231  006AE1  7E                 	db	high STR_34
   232  006AE2  5F                 	db	low STR_35
   233  006AE3  7E                 	db	high STR_35
   234  006AE4  ED                 	db	low (STR_17+3)
   235  006AE5  7F                 	db	high (STR_17+3)
   236  006AE6  ED                 	db	low (STR_17+3)
   237  006AE7  7F                 	db	high (STR_17+3)
   238  006AE8  D5                 	db	low STR_38
   239  006AE9  7E                 	db	high STR_38
   240  006AEA  EB                 	db	low STR_39
   241  006AEB  7D                 	db	high STR_39
   242  006AEC  15                 	db	low STR_40
   243  006AED  7E                 	db	high STR_40
   244  006AEE  9F                 	db	low STR_41
   245  006AEF  7E                 	db	high STR_41
   246  006AF0  B9                 	db	low STR_42
   247  006AF1  7D                 	db	high STR_42
   248  006AF2  58                 	db	low STR_43
   249  006AF3  7F                 	db	high STR_43
   250  006AF4  70                 	db	low STR_44
   251  006AF5  7E                 	db	high STR_44
   252                           
   253                           ;initializer for _sevenSegCharacters
   254  006AF6  3F                 	db	63
   255  006AF7  06                 	db	6
   256  006AF8  5B                 	db	91
   257  006AF9  4F                 	db	79
   258  006AFA  66                 	db	102
   259  006AFB  6D                 	db	109
   260  006AFC  7D                 	db	125
   261  006AFD  07                 	db	7
   262  006AFE  7F                 	db	127
   263  006AFF  6F                 	db	111
   264  006B00  00                 	db	0
   265  006B01  40                 	db	64
   266                           
   267                           	psect	mediumconst
   268  007C58                     __pmediumconst:
   269                           	opt stack 0
   270  007C58  00                 	db	0
   271  007C59                     ethernetController_getDeviceName@F6080:
   272                           	opt stack 0
   273  007C59  45                 	db	69
   274  007C5A  4E                 	db	78
   275  007C5B  43                 	db	67
   276  007C5C  34                 	db	52
   277  007C5D  32                 	db	50
   278  007C5E  34                 	db	52
   279  007C5F  4A                 	db	74
   280  007C60  36                 	db	54
   281  007C61  30                 	db	48
   282  007C62  30                 	db	48
   283  007C63  00                 	db	0
   284  007C64                     __end_ofethernetController_getDeviceName@F6080:
   285                           	opt stack 0
   286  0000                     _ANSELC	set	3933
   287  0000                     _ANSELA	set	3931
   288  0000                     _ANSELB	set	3932
   289  0000                     _ANSELBbits	set	3932
   290  0000                     _CCPR1	set	4030
   291  0000                     _TXREG1	set	4013
   292  0000                     _SPBRG	set	4015
   293  0000                     _RCSTA1bits	set	4011
   294  0000                     _TXSTA1bits	set	4012
   295  0000                     _PORTA	set	3968
   296  0000                     _TRISA	set	3986
   297  0000                     _TRISC	set	3988
   298  0000                     _PORTC	set	3970
   299  0000                     _PIR1bits	set	3998
   300  0000                     _PORTB	set	3969
   301  0000                     _TRISB	set	3987
   302  0000                     _RCONbits	set	4048
   303  0000                     _PIE1bits	set	3997
   304  0000                     _CCP1CONbits	set	4029
   305  0000                     _T1CONbits	set	4045
   306  0000                     _T0CONbits	set	4053
   307  0000                     _INTCON3bits	set	4080
   308  0000                     _INTCONbits	set	4082
   309  0000                     _OSCCON2bits	set	4050
   310  0000                     _OSCCONbits	set	4051
   311  0000                     _SSP1BUF	set	4041
   312  0000                     _TRISBbits	set	3987
   313  0000                     _SSP1STATbits	set	4039
   314  0000                     _SSP1CON1bits	set	4038
   315  0000                     _PORTBbits	set	3969
   316  0000                     _TRMT	set	32097
   317  0000                     _RCIF	set	31989
   318  0000                     _RCIE	set	31981
   319  0000                     _RCIP	set	31997
   320  0000                     _TXIF	set	31988
   321  007C64                     STR_18:
   322  007C64  0A                 	db	10
   323  007C65  0D                 	db	13
   324  007C66  2A                 	db	42
   325  007C67  2A                 	db	42
   326  007C68  2A                 	db	42
   327  007C69  20                 	db	32
   328  007C6A  43                 	db	67	;'C'
   329  007C6B  52                 	db	82	;'R'
   330  007C6C  49                 	db	73	;'I'
   331  007C6D  54                 	db	84	;'T'
   332  007C6E  49                 	db	73	;'I'
   333  007C6F  43                 	db	67	;'C'
   334  007C70  41                 	db	65	;'A'
   335  007C71  4C                 	db	76	;'L'
   336  007C72  20                 	db	32
   337  007C73  45                 	db	69	;'E'
   338  007C74  52                 	db	82	;'R'
   339  007C75  52                 	db	82	;'R'
   340  007C76  4F                 	db	79	;'O'
   341  007C77  52                 	db	82	;'R'
   342  007C78  3A                 	db	58	;':'
   343  007C79  20                 	db	32
   344  007C7A  52                 	db	82	;'R'
   345  007C7B  58                 	db	88	;'X'
   346  007C7C  20                 	db	32
   347  007C7D  42                 	db	66	;'B'
   348  007C7E  55                 	db	85	;'U'
   349  007C7F  46                 	db	70	;'F'
   350  007C80  20                 	db	32
   351  007C81  4F                 	db	79	;'O'
   352  007C82  56                 	db	86	;'V'
   353  007C83  46                 	db	70	;'F'
   354  007C84  4C                 	db	76	;'L'
   355  007C85  20                 	db	32
   356  007C86  43                 	db	67	;'C'
   357  007C87  41                 	db	65	;'A'
   358  007C88  55                 	db	85	;'U'
   359  007C89  53                 	db	83	;'S'
   360  007C8A  45                 	db	69	;'E'
   361  007C8B  44                 	db	68	;'D'
   362  007C8C  20                 	db	32
   363  007C8D  53                 	db	83	;'S'
   364  007C8E  59                 	db	89	;'Y'
   365  007C8F  53                 	db	83	;'S'
   366  007C90  54                 	db	84	;'T'
   367  007C91  45                 	db	69	;'E'
   368  007C92  4D                 	db	77	;'M'
   369  007C93  20                 	db	32
   370  007C94  52                 	db	82	;'R'
   371  007C95  45                 	db	69	;'E'
   372  007C96  53                 	db	83	;'S'
   373  007C97  45                 	db	69	;'E'
   374  007C98  54                 	db	84	;'T'
   375  007C99  20                 	db	32
   376  007C9A  2A                 	db	42
   377  007C9B  2A                 	db	42
   378  007C9C  2A                 	db	42
   379  007C9D  0A                 	db	10
   380  007C9E  0D                 	db	13
   381  007C9F  00                 	db	0
   382  007CA0                     STR_66:
   383  007CA0  2D                 	db	45
   384  007CA1  2D                 	db	45
   385  007CA2  2D                 	db	45
   386  007CA3  2D                 	db	45
   387  007CA4  2D                 	db	45
   388  007CA5  2D                 	db	45
   389  007CA6  2D                 	db	45
   390  007CA7  2D                 	db	45
   391  007CA8  2D                 	db	45
   392  007CA9  2D                 	db	45
   393  007CAA  2D                 	db	45
   394  007CAB  2D                 	db	45
   395  007CAC  2D                 	db	45
   396  007CAD  2D                 	db	45
   397  007CAE  2D                 	db	45
   398  007CAF  2D                 	db	45
   399  007CB0  2D                 	db	45
   400  007CB1  2D                 	db	45
   401  007CB2  2D                 	db	45
   402  007CB3  2D                 	db	45
   403  007CB4  2D                 	db	45
   404  007CB5  2D                 	db	45
   405  007CB6  2D                 	db	45
   406  007CB7  2D                 	db	45
   407  007CB8  2D                 	db	45
   408  007CB9  2D                 	db	45
   409  007CBA  2D                 	db	45
   410  007CBB  2D                 	db	45
   411  007CBC  2D                 	db	45
   412  007CBD  2D                 	db	45
   413  007CBE  2D                 	db	45
   414  007CBF  2D                 	db	45
   415  007CC0  2D                 	db	45
   416  007CC1  2D                 	db	45
   417  007CC2  2D                 	db	45
   418  007CC3  2D                 	db	45
   419  007CC4  2D                 	db	45
   420  007CC5  2D                 	db	45
   421  007CC6  2D                 	db	45
   422  007CC7  2D                 	db	45
   423  007CC8  2D                 	db	45
   424  007CC9  2D                 	db	45
   425  007CCA  2D                 	db	45
   426  007CCB  2D                 	db	45
   427  007CCC  2D                 	db	45
   428  007CCD  2D                 	db	45
   429  007CCE  2D                 	db	45
   430  007CCF  2D                 	db	45
   431  007CD0  2D                 	db	45
   432  007CD1  00                 	db	0
   433  007CD2                     STR_47:
   434  007CD2  0A                 	db	10
   435  007CD3  0D                 	db	13
   436  007CD4  2A                 	db	42
   437  007CD5  2A                 	db	42
   438  007CD6  2A                 	db	42
   439  007CD7  20                 	db	32
   440  007CD8  43                 	db	67	;'C'
   441  007CD9  52                 	db	82	;'R'
   442  007CDA  49                 	db	73	;'I'
   443  007CDB  54                 	db	84	;'T'
   444  007CDC  49                 	db	73	;'I'
   445  007CDD  43                 	db	67	;'C'
   446  007CDE  41                 	db	65	;'A'
   447  007CDF  4C                 	db	76	;'L'
   448  007CE0  20                 	db	32
   449  007CE1  45                 	db	69	;'E'
   450  007CE2  52                 	db	82	;'R'
   451  007CE3  52                 	db	82	;'R'
   452  007CE4  4F                 	db	79	;'O'
   453  007CE5  52                 	db	82	;'R'
   454  007CE6  3A                 	db	58	;':'
   455  007CE7  20                 	db	32
   456  007CE8  57                 	db	87	;'W'
   457  007CE9  41                 	db	65	;'A'
   458  007CEA  54                 	db	84	;'T'
   459  007CEB  43                 	db	67	;'C'
   460  007CEC  48                 	db	72	;'H'
   461  007CED  44                 	db	68	;'D'
   462  007CEE  4F                 	db	79	;'O'
   463  007CEF  47                 	db	71	;'G'
   464  007CF0  20                 	db	32
   465  007CF1  43                 	db	67	;'C'
   466  007CF2  41                 	db	65	;'A'
   467  007CF3  55                 	db	85	;'U'
   468  007CF4  53                 	db	83	;'S'
   469  007CF5  45                 	db	69	;'E'
   470  007CF6  44                 	db	68	;'D'
   471  007CF7  20                 	db	32
   472  007CF8  52                 	db	82	;'R'
   473  007CF9  45                 	db	69	;'E'
   474  007CFA  53                 	db	83	;'S'
   475  007CFB  45                 	db	69	;'E'
   476  007CFC  54                 	db	84	;'T'
   477  007CFD  20                 	db	32
   478  007CFE  2A                 	db	42
   479  007CFF  2A                 	db	42
   480  007D00  2A                 	db	42
   481  007D01  0A                 	db	10
   482  007D02  0D                 	db	13
   483  007D03  00                 	db	0
   484  007D04                     STR_27:
   485  007D04  5B                 	db	91	;'['
   486  007D05  49                 	db	73	;'I'
   487  007D06  50                 	db	80	;'P'
   488  007D07  76                 	db	118	;'v'
   489  007D08  34                 	db	52	;'4'
   490  007D09  5D                 	db	93	;']'
   491  007D0A  3A                 	db	58	;':'
   492  007D0B  20                 	db	32
   493  007D0C  41                 	db	65	;'A'
   494  007D0D  64                 	db	100	;'d'
   495  007D0E  64                 	db	100	;'d'
   496  007D0F  72                 	db	114	;'r'
   497  007D10  65                 	db	101	;'e'
   498  007D11  73                 	db	115	;'s'
   499  007D12  73                 	db	115	;'s'
   500  007D13  20                 	db	32
   501  007D14  63                 	db	99	;'c'
   502  007D15  6F                 	db	111	;'o'
   503  007D16  6E                 	db	110	;'n'
   504  007D17  66                 	db	102	;'f'
   505  007D18  6C                 	db	108	;'l'
   506  007D19  69                 	db	105	;'i'
   507  007D1A  63                 	db	99	;'c'
   508  007D1B  74                 	db	116	;'t'
   509  007D1C  20                 	db	32
   510  007D1D  64                 	db	100	;'d'
   511  007D1E  65                 	db	101	;'e'
   512  007D1F  74                 	db	116	;'t'
   513  007D20  65                 	db	101	;'e'
   514  007D21  63                 	db	99	;'c'
   515  007D22  74                 	db	116	;'t'
   516  007D23  65                 	db	101	;'e'
   517  007D24  64                 	db	100	;'d'
   518  007D25  2E                 	db	46
   519  007D26  0A                 	db	10
   520  007D27  0D                 	db	13
   521  007D28  00                 	db	0
   522  007D29                     STR_28:
   523  007D29  5B                 	db	91	;'['
   524  007D2A  49                 	db	73	;'I'
   525  007D2B  50                 	db	80	;'P'
   526  007D2C  76                 	db	118	;'v'
   527  007D2D  34                 	db	52	;'4'
   528  007D2E  5D                 	db	93	;']'
   529  007D2F  3A                 	db	58	;':'
   530  007D30  20                 	db	32
   531  007D31  53                 	db	83	;'S'
   532  007D32  65                 	db	101	;'e'
   533  007D33  74                 	db	116	;'t'
   534  007D34  74                 	db	116	;'t'
   535  007D35  69                 	db	105	;'i'
   536  007D36  6E                 	db	110	;'n'
   537  007D37  67                 	db	103	;'g'
   538  007D38  20                 	db	32
   539  007D39  49                 	db	73	;'I'
   540  007D3A  50                 	db	80	;'P'
   541  007D3B  76                 	db	118	;'v'
   542  007D3C  34                 	db	52	;'4'
   543  007D3D  20                 	db	32
   544  007D3E  53                 	db	83	;'S'
   545  007D3F  72                 	db	114	;'r'
   546  007D40  63                 	db	99	;'c'
   547  007D41  20                 	db	32
   548  007D42  41                 	db	65	;'A'
   549  007D43  64                 	db	100	;'d'
   550  007D44  64                 	db	100	;'d'
   551  007D45  72                 	db	114	;'r'
   552  007D46  65                 	db	101	;'e'
   553  007D47  73                 	db	115	;'s'
   554  007D48  73                 	db	115	;'s'
   555  007D49  20                 	db	32
   556  007D4A  74                 	db	116	;'t'
   557  007D4B  6F                 	db	111	;'o'
   558  007D4C  20                 	db	32
   559  007D4D  00                 	db	0
   560  007D4E                     STR_118:
   561  007D4E  5B                 	db	91	;'['
   562  007D4F  41                 	db	65	;'A'
   563  007D50  6D                 	db	109	;'m'
   564  007D51  20                 	db	32
   565  007D52  6C                 	db	108	;'l'
   566  007D53  69                 	db	105	;'i'
   567  007D54  73                 	db	115	;'s'
   568  007D55  74                 	db	116	;'t'
   569  007D56  65                 	db	101	;'e'
   570  007D57  6E                 	db	110	;'n'
   571  007D58  69                 	db	105	;'i'
   572  007D59  6E                 	db	110	;'n'
   573  007D5A  67                 	db	103	;'g'
   574  007D5B  20                 	db	32
   575  007D5C  6F                 	db	111	;'o'
   576  007D5D  6E                 	db	110	;'n'
   577  007D5E  20                 	db	32
   578  007D5F  74                 	db	116	;'t'
   579  007D60  68                 	db	104	;'h'
   580  007D61  69                 	db	105	;'i'
   581  007D62  73                 	db	115	;'s'
   582  007D63  20                 	db	32
   583  007D64  70                 	db	112	;'p'
   584  007D65  6F                 	db	111	;'o'
   585  007D66  72                 	db	114	;'r'
   586  007D67  74                 	db	116	;'t'
   587  007D68  5D                 	db	93	;']'
   588  007D69  00                 	db	0
   589  007D6A                     STR_25:
   590  007D6A  5B                 	db	91	;'['
   591  007D6B  49                 	db	73	;'I'
   592  007D6C  50                 	db	80	;'P'
   593  007D6D  76                 	db	118	;'v'
   594  007D6E  34                 	db	52	;'4'
   595  007D6F  5D                 	db	93	;']'
   596  007D70  3A                 	db	58	;':'
   597  007D71  20                 	db	32
   598  007D72  46                 	db	70	;'F'
   599  007D73  61                 	db	97	;'a'
   600  007D74  69                 	db	105	;'i'
   601  007D75  6C                 	db	108	;'l'
   602  007D76  65                 	db	101	;'e'
   603  007D77  64                 	db	100	;'d'
   604  007D78  20                 	db	32
   605  007D79  74                 	db	116	;'t'
   606  007D7A  6F                 	db	111	;'o'
   607  007D7B  20                 	db	32
   608  007D7C  72                 	db	114	;'r'
   609  007D7D  65                 	db	101	;'e'
   610  007D7E  73                 	db	115	;'s'
   611  007D7F  6F                 	db	111	;'o'
   612  007D80  6C                 	db	108	;'l'
   613  007D81  76                 	db	118	;'v'
   614  007D82  65                 	db	101	;'e'
   615  007D83  20                 	db	32
   616  007D84  00                 	db	0
   617  007D85                     STR_120:
   618  007D85  5B                 	db	91	;'['
   619  007D86  54                 	db	84	;'T'
   620  007D87  43                 	db	67	;'C'
   621  007D88  50                 	db	80	;'P'
   622  007D89  5D                 	db	93	;']'
   623  007D8A  3A                 	db	58	;':'
   624  007D8B  20                 	db	32
   625  007D8C  4C                 	db	76	;'L'
   626  007D8D  69                 	db	105	;'i'
   627  007D8E  73                 	db	115	;'s'
   628  007D8F  74                 	db	116	;'t'
   629  007D90  65                 	db	101	;'e'
   630  007D91  6E                 	db	110	;'n'
   631  007D92  69                 	db	105	;'i'
   632  007D93  6E                 	db	110	;'n'
   633  007D94  67                 	db	103	;'g'
   634  007D95  20                 	db	32
   635  007D96  6F                 	db	111	;'o'
   636  007D97  6E                 	db	110	;'n'
   637  007D98  20                 	db	32
   638  007D99  50                 	db	80	;'P'
   639  007D9A  6F                 	db	111	;'o'
   640  007D9B  72                 	db	114	;'r'
   641  007D9C  74                 	db	116	;'t'
   642  007D9D  20                 	db	32
   643  007D9E  00                 	db	0
   644  007D9F                     STR_48:
   645  007D9F  0A                 	db	10
   646  007DA0  0D                 	db	13
   647  007DA1  46                 	db	70	;'F'
   648  007DA2  49                 	db	73	;'I'
   649  007DA3  52                 	db	82	;'R'
   650  007DA4  4D                 	db	77	;'M'
   651  007DA5  57                 	db	87	;'W'
   652  007DA6  41                 	db	65	;'A'
   653  007DA7  52                 	db	82	;'R'
   654  007DA8  45                 	db	69	;'E'
   655  007DA9  20                 	db	32
   656  007DAA  42                 	db	66	;'B'
   657  007DAB  55                 	db	85	;'U'
   658  007DAC  49                 	db	73	;'I'
   659  007DAD  4C                 	db	76	;'L'
   660  007DAE  44                 	db	68	;'D'
   661  007DAF  20                 	db	32
   662  007DB0  44                 	db	68	;'D'
   663  007DB1  41                 	db	65	;'A'
   664  007DB2  54                 	db	84	;'T'
   665  007DB3  45                 	db	69	;'E'
   666  007DB4  20                 	db	32
   667  007DB5  49                 	db	73	;'I'
   668  007DB6  53                 	db	83	;'S'
   669  007DB7  20                 	db	32
   670  007DB8  00                 	db	0
   671  007DB9                     STR_42:
   672  007DB9  50                 	db	80	;'P'
   673  007DBA  61                 	db	97	;'a'
   674  007DBB  72                 	db	114	;'r'
   675  007DBC  61                 	db	97	;'a'
   676  007DBD  6D                 	db	109	;'m'
   677  007DBE  20                 	db	32
   678  007DBF  50                 	db	80	;'P'
   679  007DC0  72                 	db	114	;'r'
   680  007DC1  6F                 	db	111	;'o'
   681  007DC2  62                 	db	98	;'b'
   682  007DC3  6C                 	db	108	;'l'
   683  007DC4  65                 	db	101	;'e'
   684  007DC5  6D                 	db	109	;'m'
   685  007DC6  3A                 	db	58	;':'
   686  007DC7  20                 	db	32
   687  007DC8  42                 	db	66	;'B'
   688  007DC9  61                 	db	97	;'a'
   689  007DCA  64                 	db	100	;'d'
   690  007DCB  20                 	db	32
   691  007DCC  48                 	db	72	;'H'
   692  007DCD  65                 	db	101	;'e'
   693  007DCE  61                 	db	97	;'a'
   694  007DCF  64                 	db	100	;'d'
   695  007DD0  65                 	db	101	;'e'
   696  007DD1  72                 	db	114	;'r'
   697  007DD2  00                 	db	0
   698  007DD3                     STR_33:
   699  007DD3  44                 	db	68	;'D'
   700  007DD4  65                 	db	101	;'e'
   701  007DD5  73                 	db	115	;'s'
   702  007DD6  74                 	db	116	;'t'
   703  007DD7  69                 	db	105	;'i'
   704  007DD8  6E                 	db	110	;'n'
   705  007DD9  61                 	db	97	;'a'
   706  007DDA  74                 	db	116	;'t'
   707  007DDB  69                 	db	105	;'i'
   708  007DDC  6F                 	db	111	;'o'
   709  007DDD  6E                 	db	110	;'n'
   710  007DDE  20                 	db	32
   711  007DDF  75                 	db	117	;'u'
   712  007DE0  6E                 	db	110	;'n'
   713  007DE1  72                 	db	114	;'r'
   714  007DE2  65                 	db	101	;'e'
   715  007DE3  61                 	db	97	;'a'
   716  007DE4  63                 	db	99	;'c'
   717  007DE5  68                 	db	104	;'h'
   718  007DE6  61                 	db	97	;'a'
   719  007DE7  62                 	db	98	;'b'
   720  007DE8  6C                 	db	108	;'l'
   721  007DE9  65                 	db	101	;'e'
   722  007DEA  00                 	db	0
   723  007DEB                     STR_39:
   724  007DEB  52                 	db	82	;'R'
   725  007DEC  6F                 	db	111	;'o'
   726  007DED  75                 	db	117	;'u'
   727  007DEE  74                 	db	116	;'t'
   728  007DEF  65                 	db	101	;'e'
   729  007DF0  72                 	db	114	;'r'
   730  007DF1  20                 	db	32
   731  007DF2  41                 	db	65	;'A'
   732  007DF3  64                 	db	100	;'d'
   733  007DF4  76                 	db	118	;'v'
   734  007DF5  65                 	db	101	;'e'
   735  007DF6  72                 	db	114	;'r'
   736  007DF7  74                 	db	116	;'t'
   737  007DF8  69                 	db	105	;'i'
   738  007DF9  73                 	db	115	;'s'
   739  007DFA  65                 	db	101	;'e'
   740  007DFB  6D                 	db	109	;'m'
   741  007DFC  65                 	db	101	;'e'
   742  007DFD  6E                 	db	110	;'n'
   743  007DFE  74                 	db	116	;'t'
   744  007DFF  00                 	db	0
   745  007E00                     STR_23:
   746  007E00  52                 	db	82	;'R'
   747  007E01  65                 	db	101	;'e'
   748  007E02  6D                 	db	109	;'m'
   749  007E03  61                 	db	97	;'a'
   750  007E04  69                 	db	105	;'i'
   751  007E05  6E                 	db	110	;'n'
   752  007E06  69                 	db	105	;'i'
   753  007E07  6E                 	db	110	;'n'
   754  007E08  67                 	db	103	;'g'
   755  007E09  20                 	db	32
   756  007E0A  4C                 	db	76	;'L'
   757  007E0B  65                 	db	101	;'e'
   758  007E0C  6E                 	db	110	;'n'
   759  007E0D  67                 	db	103	;'g'
   760  007E0E  74                 	db	116	;'t'
   761  007E0F  68                 	db	104	;'h'
   762  007E10  20                 	db	32
   763  007E11  69                 	db	105	;'i'
   764  007E12  73                 	db	115	;'s'
   765  007E13  20                 	db	32
   766  007E14  00                 	db	0
   767  007E15                     STR_40:
   768  007E15  52                 	db	82	;'R'
   769  007E16  6F                 	db	111	;'o'
   770  007E17  75                 	db	117	;'u'
   771  007E18  74                 	db	116	;'t'
   772  007E19  65                 	db	101	;'e'
   773  007E1A  72                 	db	114	;'r'
   774  007E1B  20                 	db	32
   775  007E1C  53                 	db	83	;'S'
   776  007E1D  6F                 	db	111	;'o'
   777  007E1E  6C                 	db	108	;'l'
   778  007E1F  69                 	db	105	;'i'
   779  007E20  63                 	db	99	;'c'
   780  007E21  69                 	db	105	;'i'
   781  007E22  74                 	db	116	;'t'
   782  007E23  61                 	db	97	;'a'
   783  007E24  74                 	db	116	;'t'
   784  007E25  69                 	db	105	;'i'
   785  007E26  6F                 	db	111	;'o'
   786  007E27  6E                 	db	110	;'n'
   787  007E28  00                 	db	0
   788  007E29                     STR_57:
   789  007E29  4C                 	db	76	;'L'
   790  007E2A  69                 	db	105	;'i'
   791  007E2B  6E                 	db	110	;'n'
   792  007E2C  6B                 	db	107	;'k'
   793  007E2D  20                 	db	32
   794  007E2E  65                 	db	101	;'e'
   795  007E2F  73                 	db	115	;'s'
   796  007E30  74                 	db	116	;'t'
   797  007E31  61                 	db	97	;'a'
   798  007E32  62                 	db	98	;'b'
   799  007E33  6C                 	db	108	;'l'
   800  007E34  69                 	db	105	;'i'
   801  007E35  73                 	db	115	;'s'
   802  007E36  68                 	db	104	;'h'
   803  007E37  65                 	db	101	;'e'
   804  007E38  64                 	db	100	;'d'
   805  007E39  2E                 	db	46
   806  007E3A  20                 	db	32
   807  007E3B  00                 	db	0
   808  007E3C                     STR_69:
   809  007E3C  55                 	db	85	;'U'
   810  007E3D  6E                 	db	110	;'n'
   811  007E3E  6B                 	db	107	;'k'
   812  007E3F  6E                 	db	110	;'n'
   813  007E40  6F                 	db	111	;'o'
   814  007E41  77                 	db	119	;'w'
   815  007E42  6E                 	db	110	;'n'
   816  007E43  20                 	db	32
   817  007E44  45                 	db	69	;'E'
   818  007E45  74                 	db	116	;'t'
   819  007E46  68                 	db	104	;'h'
   820  007E47  65                 	db	101	;'e'
   821  007E48  72                 	db	114	;'r'
   822  007E49  54                 	db	84	;'T'
   823  007E4A  79                 	db	121	;'y'
   824  007E4B  70                 	db	112	;'p'
   825  007E4C  65                 	db	101	;'e'
   826  007E4D  00                 	db	0
   827  007E4E  55                 	db	85	;'U'
   828  007E4F  6E                 	db	110	;'n'
   829  007E50  6B                 	db	107	;'k'
   830  007E51  6E                 	db	110	;'n'
   831  007E52  6F                 	db	111	;'o'
   832  007E53  77                 	db	119	;'w'
   833  007E54  6E                 	db	110	;'n'
   834  007E55  20                 	db	32
   835  007E56  50                 	db	80	;'P'
   836  007E57  72                 	db	114	;'r'
   837  007E58  6F                 	db	111	;'o'
   838  007E59  74                 	db	116	;'t'
   839  007E5A  6F                 	db	111	;'o'
   840  007E5B  63                 	db	99	;'c'
   841  007E5C  6F                 	db	111	;'o'
   842  007E5D  6C                 	db	108	;'l'
   843  007E5E  00                 	db	0
   844  007E5F                     STR_35:
   845  007E5F  52                 	db	82	;'R'
   846  007E60  65                 	db	101	;'e'
   847  007E61  64                 	db	100	;'d'
   848  007E62  69                 	db	105	;'i'
   849  007E63  72                 	db	114	;'r'
   850  007E64  65                 	db	101	;'e'
   851  007E65  63                 	db	99	;'c'
   852  007E66  74                 	db	116	;'t'
   853  007E67  20                 	db	32
   854  007E68  4D                 	db	77	;'M'
   855  007E69  65                 	db	101	;'e'
   856  007E6A  73                 	db	115	;'s'
   857  007E6B  73                 	db	115	;'s'
   858  007E6C  61                 	db	97	;'a'
   859  007E6D  67                 	db	103	;'g'
   860  007E6E  65                 	db	101	;'e'
   861  007E6F  00                 	db	0
   862  007E70                     STR_44:
   863  007E70  54                 	db	84	;'T'
   864  007E71  69                 	db	105	;'i'
   865  007E72  6D                 	db	109	;'m'
   866  007E73  65                 	db	101	;'e'
   867  007E74  73                 	db	115	;'s'
   868  007E75  74                 	db	116	;'t'
   869  007E76  61                 	db	97	;'a'
   870  007E77  6D                 	db	109	;'m'
   871  007E78  70                 	db	112	;'p'
   872  007E79  20                 	db	32
   873  007E7A  52                 	db	82	;'R'
   874  007E7B  65                 	db	101	;'e'
   875  007E7C  70                 	db	112	;'p'
   876  007E7D  6C                 	db	108	;'l'
   877  007E7E  79                 	db	121	;'y'
   878  007E7F  00                 	db	0
   879  007E80                     STR_5:
   880  007E80  5B                 	db	91	;'['
   881  007E81  53                 	db	83	;'S'
   882  007E82  79                 	db	121	;'y'
   883  007E83  6D                 	db	109	;'m'
   884  007E84  62                 	db	98	;'b'
   885  007E85  6F                 	db	111	;'o'
   886  007E86  6C                 	db	108	;'l'
   887  007E87  20                 	db	32
   888  007E88  45                 	db	69	;'E'
   889  007E89  72                 	db	114	;'r'
   890  007E8A  72                 	db	114	;'r'
   891  007E8B  6F                 	db	111	;'o'
   892  007E8C  72                 	db	114	;'r'
   893  007E8D  73                 	db	115	;'s'
   894  007E8E  5D                 	db	93	;']'
   895  007E8F  00                 	db	0
   896  007E90                     STR_119:
   897  007E90  5B                 	db	91	;'['
   898  007E91  53                 	db	83	;'S'
   899  007E92  59                 	db	89	;'Y'
   900  007E93  4E                 	db	78	;'N'
   901  007E94  20                 	db	32
   902  007E95  52                 	db	82	;'R'
   903  007E96  65                 	db	101	;'e'
   904  007E97  63                 	db	99	;'c'
   905  007E98  65                 	db	101	;'e'
   906  007E99  69                 	db	105	;'i'
   907  007E9A  76                 	db	118	;'v'
   908  007E9B  65                 	db	101	;'e'
   909  007E9C  64                 	db	100	;'d'
   910  007E9D  5D                 	db	93	;']'
   911  007E9E  00                 	db	0
   912  007E9F                     STR_41:
   913  007E9F  54                 	db	84	;'T'
   914  007EA0  69                 	db	105	;'i'
   915  007EA1  6D                 	db	109	;'m'
   916  007EA2  65                 	db	101	;'e'
   917  007EA3  20                 	db	32
   918  007EA4  45                 	db	69	;'E'
   919  007EA5  78                 	db	120	;'x'
   920  007EA6  63                 	db	99	;'c'
   921  007EA7  65                 	db	101	;'e'
   922  007EA8  65                 	db	101	;'e'
   923  007EA9  64                 	db	100	;'d'
   924  007EAA  65                 	db	101	;'e'
   925  007EAB  64                 	db	100	;'d'
   926  007EAC  00                 	db	0
   927  007EAD                     STR_34:
   928  007EAD  53                 	db	83	;'S'
   929  007EAE  6F                 	db	111	;'o'
   930  007EAF  75                 	db	117	;'u'
   931  007EB0  72                 	db	114	;'r'
   932  007EB1  63                 	db	99	;'c'
   933  007EB2  65                 	db	101	;'e'
   934  007EB3  20                 	db	32
   935  007EB4  51                 	db	81	;'Q'
   936  007EB5  75                 	db	117	;'u'
   937  007EB6  65                 	db	101	;'e'
   938  007EB7  6E                 	db	110	;'n'
   939  007EB8  63                 	db	99	;'c'
   940  007EB9  68                 	db	104	;'h'
   941  007EBA  00                 	db	0
   942  007EBB                     STR_64:
   943  007EBB  1B                 	db	27
   944  007EBC  5B                 	db	91	;'['
   945  007EBD  31                 	db	49	;'1'
   946  007EBE  30                 	db	48	;'0'
   947  007EBF  33                 	db	51	;'3'
   948  007EC0  3B                 	db	59	;';'
   949  007EC1  33                 	db	51	;'3'
   950  007EC2  30                 	db	48	;'0'
   951  007EC3  3B                 	db	59	;';'
   952  007EC4  31                 	db	49	;'1'
   953  007EC5  30                 	db	48	;'0'
   954  007EC6  6D                 	db	109	;'m'
   955  007EC7  00                 	db	0
   956  007EC8                     STR_56:
   957  007EC8  4C                 	db	76	;'L'
   958  007EC9  69                 	db	105	;'i'
   959  007ECA  6E                 	db	110	;'n'
   960  007ECB  6B                 	db	107	;'k'
   961  007ECC  20                 	db	32
   962  007ECD  6C                 	db	108	;'l'
   963  007ECE  6F                 	db	111	;'o'
   964  007ECF  73                 	db	115	;'s'
   965  007ED0  74                 	db	116	;'t'
   966  007ED1  2E                 	db	46
   967  007ED2  0A                 	db	10
   968  007ED3  0D                 	db	13
   969  007ED4  00                 	db	0
   970  007ED5                     STR_38:
   971  007ED5  45                 	db	69	;'E'
   972  007ED6  63                 	db	99	;'c'
   973  007ED7  68                 	db	104	;'h'
   974  007ED8  6F                 	db	111	;'o'
   975  007ED9  20                 	db	32
   976  007EDA  52                 	db	82	;'R'
   977  007EDB  65                 	db	101	;'e'
   978  007EDC  71                 	db	113	;'q'
   979  007EDD  75                 	db	117	;'u'
   980  007EDE  65                 	db	101	;'e'
   981  007EDF  73                 	db	115	;'s'
   982  007EE0  74                 	db	116	;'t'
   983  007EE1  00                 	db	0
   984  007EE2                     STR_59:
   985  007EE2  1B                 	db	27
   986  007EE3  5B                 	db	91	;'['
   987  007EE4  34                 	db	52	;'4'
   988  007EE5  31                 	db	49	;'1'
   989  007EE6  3B                 	db	59	;';'
   990  007EE7  31                 	db	49	;'1'
   991  007EE8  30                 	db	48	;'0'
   992  007EE9  3B                 	db	59	;';'
   993  007EEA  31                 	db	49	;'1'
   994  007EEB  30                 	db	48	;'0'
   995  007EEC  6D                 	db	109	;'m'
   996  007EED  00                 	db	0
   997  007EEE                     STR_61:
   998  007EEE  1B                 	db	27
   999  007EEF  5B                 	db	91	;'['
  1000  007EF0  34                 	db	52	;'4'
  1001  007EF1  34                 	db	52	;'4'
  1002  007EF2  3B                 	db	59	;';'
  1003  007EF3  31                 	db	49	;'1'
  1004  007EF4  30                 	db	48	;'0'
  1005  007EF5  3B                 	db	59	;';'
  1006  007EF6  31                 	db	49	;'1'
  1007  007EF7  30                 	db	48	;'0'
  1008  007EF8  6D                 	db	109	;'m'
  1009  007EF9  00                 	db	0
  1010  007EFA                     STR_62:
  1011  007EFA  1B                 	db	27
  1012  007EFB  5B                 	db	91	;'['
  1013  007EFC  34                 	db	52	;'4'
  1014  007EFD  35                 	db	53	;'5'
  1015  007EFE  3B                 	db	59	;';'
  1016  007EFF  31                 	db	49	;'1'
  1017  007F00  30                 	db	48	;'0'
  1018  007F01  3B                 	db	59	;';'
  1019  007F02  31                 	db	49	;'1'
  1020  007F03  30                 	db	48	;'0'
  1021  007F04  6D                 	db	109	;'m'
  1022  007F05  00                 	db	0
  1023  007F06                     STR_60:
  1024  007F06  1B                 	db	27
  1025  007F07  5B                 	db	91	;'['
  1026  007F08  34                 	db	52	;'4'
  1027  007F09  32                 	db	50	;'2'
  1028  007F0A  3B                 	db	59	;';'
  1029  007F0B  33                 	db	51	;'3'
  1030  007F0C  30                 	db	48	;'0'
  1031  007F0D  3B                 	db	59	;';'
  1032  007F0E  31                 	db	49	;'1'
  1033  007F0F  30                 	db	48	;'0'
  1034  007F10  6D                 	db	109	;'m'
  1035  007F11  00                 	db	0
  1036  007F12                     STR_63:
  1037  007F12  1B                 	db	27
  1038  007F13  5B                 	db	91	;'['
  1039  007F14  34                 	db	52	;'4'
  1040  007F15  36                 	db	54	;'6'
  1041  007F16  3B                 	db	59	;';'
  1042  007F17  33                 	db	51	;'3'
  1043  007F18  30                 	db	48	;'0'
  1044  007F19  3B                 	db	59	;';'
  1045  007F1A  31                 	db	49	;'1'
  1046  007F1B  30                 	db	48	;'0'
  1047  007F1C  6D                 	db	109	;'m'
  1048  007F1D  00                 	db	0
  1049  007F1E                     STR_53:
  1050  007F1E  20                 	db	32
  1051  007F1F  64                 	db	100	;'d'
  1052  007F20  65                 	db	101	;'e'
  1053  007F21  74                 	db	116	;'t'
  1054  007F22  65                 	db	101	;'e'
  1055  007F23  63                 	db	99	;'c'
  1056  007F24  74                 	db	116	;'t'
  1057  007F25  65                 	db	101	;'e'
  1058  007F26  64                 	db	100	;'d'
  1059  007F27  2E                 	db	46
  1060  007F28  20                 	db	32
  1061  007F29  00                 	db	0
  1062  007F2A                     STR_49:
  1063  007F2A  4D                 	db	77	;'M'
  1064  007F2B  61                 	db	97	;'a'
  1065  007F2C  79                 	db	121	;'y'
  1066  007F2D  20                 	db	32
  1067  007F2E  30                 	db	48	;'0'
  1068  007F2F  34                 	db	52	;'4'
  1069  007F30  20                 	db	32
  1070  007F31  32                 	db	50	;'2'
  1071  007F32  30                 	db	48	;'0'
  1072  007F33  31                 	db	49	;'1'
  1073  007F34  39                 	db	57	;'9'
  1074  007F35  00                 	db	0
  1075  007F36                     STR_3:
  1076  007F36  5B                 	db	91	;'['
  1077  007F37  42                 	db	66	;'B'
  1078  007F38  72                 	db	114	;'r'
  1079  007F39  6F                 	db	111	;'o'
  1080  007F3A  61                 	db	97	;'a'
  1081  007F3B  64                 	db	100	;'d'
  1082  007F3C  63                 	db	99	;'c'
  1083  007F3D  61                 	db	97	;'a'
  1084  007F3E  73                 	db	115	;'s'
  1085  007F3F  74                 	db	116	;'t'
  1086  007F40  5D                 	db	93	;']'
  1087  007F41  00                 	db	0
  1088  007F42                     STR_65:
  1089  007F42  1B                 	db	27
  1090  007F43  5B                 	db	91	;'['
  1091  007F44  39                 	db	57	;'9'
  1092  007F45  34                 	db	52	;'4'
  1093  007F46  3B                 	db	59	;';'
  1094  007F47  34                 	db	52	;'4'
  1095  007F48  3B                 	db	59	;';'
  1096  007F49  31                 	db	49	;'1'
  1097  007F4A  30                 	db	48	;'0'
  1098  007F4B  6D                 	db	109	;'m'
  1099  007F4C  00                 	db	0
  1100  007F4D                     STR_30:
  1101  007F4D  45                 	db	69	;'E'
  1102  007F4E  63                 	db	99	;'c'
  1103  007F4F  68                 	db	104	;'h'
  1104  007F50  6F                 	db	111	;'o'
  1105  007F51  20                 	db	32
  1106  007F52  52                 	db	82	;'R'
  1107  007F53  65                 	db	101	;'e'
  1108  007F54  70                 	db	112	;'p'
  1109  007F55  6C                 	db	108	;'l'
  1110  007F56  79                 	db	121	;'y'
  1111  007F57  00                 	db	0
  1112  007F58                     STR_43:
  1113  007F58  54                 	db	84	;'T'
  1114  007F59  69                 	db	105	;'i'
  1115  007F5A  6D                 	db	109	;'m'
  1116  007F5B  65                 	db	101	;'e'
  1117  007F5C  73                 	db	115	;'s'
  1118  007F5D  74                 	db	116	;'t'
  1119  007F5E  61                 	db	97	;'a'
  1120  007F5F  6D                 	db	109	;'m'
  1121  007F60  70                 	db	112	;'p'
  1122  007F61  00                 	db	0
  1123  007F62                     STR_4:
  1124  007F62  5B                 	db	91	;'['
  1125  007F63  55                 	db	85	;'U'
  1126  007F64  6E                 	db	110	;'n'
  1127  007F65  69                 	db	105	;'i'
  1128  007F66  63                 	db	99	;'c'
  1129  007F67  61                 	db	97	;'a'
  1130  007F68  73                 	db	115	;'s'
  1131  007F69  74                 	db	116	;'t'
  1132  007F6A  5D                 	db	93	;']'
  1133  007F6B  00                 	db	0
  1134  007F6C                     STR_51:
  1135  007F6C  31                 	db	49	;'1'
  1136  007F6D  35                 	db	53	;'5'
  1137  007F6E  3A                 	db	58	;':'
  1138  007F6F  33                 	db	51	;'3'
  1139  007F70  35                 	db	53	;'5'
  1140  007F71  3A                 	db	58	;':'
  1141  007F72  30                 	db	48	;'0'
  1142  007F73  34                 	db	52	;'4'
  1143  007F74  00                 	db	0
  1144  007F75                     STR_121:
  1145  007F75  20                 	db	32
  1146  007F76  28                 	db	40
  1147  007F77  53                 	db	83	;'S'
  1148  007F78  65                 	db	101	;'e'
  1149  007F79  71                 	db	113	;'q'
  1150  007F7A  3D                 	db	61	;'='
  1151  007F7B  20                 	db	32
  1152  007F7C  00                 	db	0
  1153  007F7D                     STR_55:
  1154  007F7D  5B                 	db	91	;'['
  1155  007F7E  45                 	db	69	;'E'
  1156  007F7F  54                 	db	84	;'T'
  1157  007F80  48                 	db	72	;'H'
  1158  007F81  5D                 	db	93	;']'
  1159  007F82  3A                 	db	58	;':'
  1160  007F83  20                 	db	32
  1161  007F84  00                 	db	0
  1162  007F85                     STR_107:
  1163  007F85  5D                 	db	93	;']'
  1164  007F86  5B                 	db	91	;'['
  1165  007F87  53                 	db	83	;'S'
  1166  007F88  65                 	db	101	;'e'
  1167  007F89  71                 	db	113	;'q'
  1168  007F8A  3D                 	db	61	;'='
  1169  007F8B  00                 	db	0
  1170  007F8C                     STR_111:
  1171  007F8C  5B                 	db	91	;'['
  1172  007F8D  45                 	db	69	;'E'
  1173  007F8E  43                 	db	67	;'C'
  1174  007F8F  45                 	db	69	;'E'
  1175  007F90  5D                 	db	93	;']'
  1176  007F91  00                 	db	0
  1177  007F92                     STR_112:
  1178  007F92  5B                 	db	91	;'['
  1179  007F93  55                 	db	85	;'U'
  1180  007F94  52                 	db	82	;'R'
  1181  007F95  47                 	db	71	;'G'
  1182  007F96  5D                 	db	93	;']'
  1183  007F97  00                 	db	0
  1184  007F98                     STR_114:
  1185  007F98  5B                 	db	91	;'['
  1186  007F99  50                 	db	80	;'P'
  1187  007F9A  53                 	db	83	;'S'
  1188  007F9B  48                 	db	72	;'H'
  1189  007F9C  5D                 	db	93	;']'
  1190  007F9D  00                 	db	0
  1191  007F9E                     STR_113:
  1192  007F9E  5B                 	db	91	;'['
  1193  007F9F  41                 	db	65	;'A'
  1194  007FA0  43                 	db	67	;'C'
  1195  007FA1  4B                 	db	75	;'K'
  1196  007FA2  5D                 	db	93	;']'
  1197  007FA3  00                 	db	0
  1198  007FA4                     STR_117:
  1199  007FA4  5B                 	db	91	;'['
  1200  007FA5  46                 	db	70	;'F'
  1201  007FA6  49                 	db	73	;'I'
  1202  007FA7  4E                 	db	78	;'N'
  1203  007FA8  5D                 	db	93	;']'
  1204  007FA9  00                 	db	0
  1205  007FAA                     STR_116:
  1206  007FAA  5B                 	db	91	;'['
  1207  007FAB  53                 	db	83	;'S'
  1208  007FAC  59                 	db	89	;'Y'
  1209  007FAD  4E                 	db	78	;'N'
  1210  007FAE  5D                 	db	93	;']'
  1211  007FAF  00                 	db	0
  1212  007FB0                     STR_110:
  1213  007FB0  5B                 	db	91	;'['
  1214  007FB1  43                 	db	67	;'C'
  1215  007FB2  57                 	db	87	;'W'
  1216  007FB3  52                 	db	82	;'R'
  1217  007FB4  5D                 	db	93	;']'
  1218  007FB5  00                 	db	0
  1219  007FB6                     STR_115:
  1220  007FB6  5B                 	db	91	;'['
  1221  007FB7  52                 	db	82	;'R'
  1222  007FB8  53                 	db	83	;'S'
  1223  007FB9  54                 	db	84	;'T'
  1224  007FBA  5D                 	db	93	;']'
  1225  007FBB  00                 	db	0
  1226  007FBC                     STR_109:
  1227  007FBC  5B                 	db	91	;'['
  1228  007FBD  4E                 	db	78	;'N'
  1229  007FBE  53                 	db	83	;'S'
  1230  007FBF  5D                 	db	93	;']'
  1231  007FC0  00                 	db	0
  1232  007FC1                     STR_67:
  1233  007FC1  49                 	db	73	;'I'
  1234  007FC2  50                 	db	80	;'P'
  1235  007FC3  76                 	db	118	;'v'
  1236  007FC4  34                 	db	52	;'4'
  1237  007FC5  00                 	db	0
  1238  007FC6  49                 	db	73	;'I'
  1239  007FC7  43                 	db	67	;'C'
  1240  007FC8  4D                 	db	77	;'M'
  1241  007FC9  50                 	db	80	;'P'
  1242  007FCA  00                 	db	0
  1243  007FCB                     STR_58:
  1244  007FCB  1B                 	db	27
  1245  007FCC  5B                 	db	91	;'['
  1246  007FCD  30                 	db	48	;'0'
  1247  007FCE  6D                 	db	109	;'m'
  1248  007FCF  00                 	db	0
  1249  007FD0                     STR_20:
  1250  007FD0  20                 	db	32
  1251  007FD1  2D                 	db	45
  1252  007FD2  3E                 	db	62	;'>'
  1253  007FD3  20                 	db	32
  1254  007FD4  00                 	db	0
  1255  007FD5                     STR_14:
  1256  007FD5  5D                 	db	93	;']'
  1257  007FD6  5B                 	db	91	;'['
  1258  007FD7  4C                 	db	76	;'L'
  1259  007FD8  3D                 	db	61	;'='
  1260  007FD9  00                 	db	0
  1261  007FDA                     STR_122:
  1262  007FDA  29                 	db	41
  1263  007FDB  0A                 	db	10
  1264  007FDC  0D                 	db	13
  1265  007FDD  00                 	db	0
  1266  007FDE  54                 	db	84	;'T'
  1267  007FDF  43                 	db	67	;'C'
  1268  007FE0  50                 	db	80	;'P'
  1269  007FE1  00                 	db	0
  1270  007FE2  55                 	db	85	;'U'
  1271  007FE3  44                 	db	68	;'D'
  1272  007FE4  50                 	db	80	;'P'
  1273  007FE5  00                 	db	0
  1274  007FE6                     STR_68:
  1275  007FE6  41                 	db	65	;'A'
  1276  007FE7  52                 	db	82	;'R'
  1277  007FE8  50                 	db	80	;'P'
  1278  007FE9  00                 	db	0
  1279  007FEA                     STR_17:
  1280  007FEA  07                 	db	7
  1281  007FEB  0A                 	db	10
  1282  007FEC  0D                 	db	13
  1283  007FED  00                 	db	0
  1284  007FEE                     STR_22:
  1285  007FEE  29                 	db	41
  1286  007FEF  20                 	db	32
  1287  007FF0  00                 	db	0
  1288  007FF1                     STR_21:
  1289  007FF1  20                 	db	32
  1290  007FF2  28                 	db	40
  1291  007FF3  00                 	db	0
  1292  007FF4                     STR_15:
  1293  007FF4  5D                 	db	93	;']'
  1294  007FF5  20                 	db	32
  1295  007FF6  00                 	db	0
  1296  007FF7                     STR_12:
  1297  007FF7  2D                 	db	45
  1298  007FF8  3E                 	db	62	;'>'
  1299  007FF9  00                 	db	0
  1300  007FFA                     STR_11:
  1301  007FFA  5D                 	db	93	;']'
  1302  007FFB  5B                 	db	91	;'['
  1303  007FFC  00                 	db	0
  1304  007FFD                     STR_45:
  1305  007FFD  12                 	db	18
  1306  007FFE  00                 	db	0
  1307  0000                     
  1308                           ; #config settings
  1309  007FFF  00                 	db	0	; dummy byte at the end
  1310  0000                     
  1311                           	psect	cinit
  1312  005466                     __pcinit:
  1313                           	opt stack 0
  1314  005466                     start_initialization:
  1315                           	opt stack 0
  1316  005466                     __initialization:
  1317                           	opt stack 0
  1318                           
  1319                           ; Initialize objects allocated to BANK3 (42 bytes)
  1320                           ; load TBLPTR registers with __pidataBANK3
  1321  005466  0ED8               	movlw	low __pidataBANK3
  1322  005468  6EF6               	movwf	tblptrl,c
  1323  00546A  0E6A               	movlw	high __pidataBANK3
  1324  00546C  6EF7               	movwf	tblptrh,c
  1325  00546E  0E00               	movlw	low (__pidataBANK3 shr (0+16))
  1326  005470  6EF8               	movwf	tblptru,c
  1327  005472  EE03  F0CB         	lfsr	0,__pdataBANK3
  1328  005476  EE10 F02A          	lfsr	1,42
  1329  00547A                     copy_data0:
  1330  00547A  0009               	tblrd		*+
  1331  00547C  CFF5 FFEE          	movff	tablat,postinc0
  1332  005480  50E5               	movf	postdec1,w,c
  1333  005482  50E1               	movf	fsr1l,w,c
  1334  005484  E1FA               	bnz	copy_data0
  1335                           
  1336                           ; Initialize objects allocated to BANK2 (4 bytes)
  1337                           ; load TBLPTR registers with __pidataBANK2
  1338  005486  0EA8               	movlw	low __pidataBANK2
  1339  005488  6EF6               	movwf	tblptrl,c
  1340  00548A  0E6E               	movlw	high __pidataBANK2
  1341  00548C  6EF7               	movwf	tblptrh,c
  1342  00548E  0E00               	movlw	low (__pidataBANK2 shr (0+16))
  1343  005490  6EF8               	movwf	tblptru,c
  1344  005492  EE02  F0E8         	lfsr	0,__pdataBANK2
  1345  005496  EE10 F004          	lfsr	1,4
  1346  00549A                     copy_data1:
  1347  00549A  0009               	tblrd		*+
  1348  00549C  CFF5 FFEE          	movff	tablat,postinc0
  1349  0054A0  50E5               	movf	postdec1,w,c
  1350  0054A2  50E1               	movf	fsr1l,w,c
  1351  0054A4  E1FA               	bnz	copy_data1
  1352                           
  1353                           ; Initialize objects allocated to COMRAM (4 bytes)
  1354                           ; load TBLPTR registers with __pidataCOMRAM
  1355  0054A6  0EA4               	movlw	low __pidataCOMRAM
  1356  0054A8  6EF6               	movwf	tblptrl,c
  1357  0054AA  0E6E               	movlw	high __pidataCOMRAM
  1358  0054AC  6EF7               	movwf	tblptrh,c
  1359  0054AE  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1360  0054B0  6EF8               	movwf	tblptru,c
  1361  0054B2  EE00  F04A         	lfsr	0,__pdataCOMRAM
  1362  0054B6  EE10 F004          	lfsr	1,4
  1363  0054BA                     copy_data2:
  1364  0054BA  0009               	tblrd		*+
  1365  0054BC  CFF5 FFEE          	movff	tablat,postinc0
  1366  0054C0  50E5               	movf	postdec1,w,c
  1367  0054C2  50E1               	movf	fsr1l,w,c
  1368  0054C4  E1FA               	bnz	copy_data2
  1369                           
  1370                           ; Clear objects allocated to BANK5 (254 bytes)
  1371  0054C6  EE05  F000         	lfsr	0,__pbssBANK5
  1372  0054CA  0EFE               	movlw	254
  1373  0054CC                     clear_0:
  1374  0054CC  6AEE               	clrf	postinc0,c
  1375  0054CE  06E8               	decf	wreg,f,c
  1376  0054D0  E1FD               	bnz	clear_0
  1377                           
  1378                           ; Clear objects allocated to BANK4 (236 bytes)
  1379  0054D2  EE04  F000         	lfsr	0,__pbssBANK4
  1380  0054D6  0EEC               	movlw	236
  1381  0054D8                     clear_1:
  1382  0054D8  6AEE               	clrf	postinc0,c
  1383  0054DA  06E8               	decf	wreg,f,c
  1384  0054DC  E1FD               	bnz	clear_1
  1385                           
  1386                           ; Clear objects allocated to BANK3 (203 bytes)
  1387  0054DE  EE03  F000         	lfsr	0,__pbssBANK3
  1388  0054E2  0ECB               	movlw	203
  1389  0054E4                     clear_2:
  1390  0054E4  6AEE               	clrf	postinc0,c
  1391  0054E6  06E8               	decf	wreg,f,c
  1392  0054E8  E1FD               	bnz	clear_2
  1393                           
  1394                           ; Clear objects allocated to BANK2 (48 bytes)
  1395  0054EA  EE02  F0B8         	lfsr	0,__pbssBANK2
  1396  0054EE  0E30               	movlw	48
  1397  0054F0                     clear_3:
  1398  0054F0  6AEE               	clrf	postinc0,c
  1399  0054F2  06E8               	decf	wreg,f,c
  1400  0054F4  E1FD               	bnz	clear_3
  1401                           
  1402                           ; Clear objects allocated to BANK1 (1 bytes)
  1403  0054F6  0101               	movlb	1
  1404  0054F8  6BFA               	clrf	__pbssBANK1& (0+255),b
  1405                           
  1406                           ; Clear objects allocated to BITCOMRAM (1 bytes)
  1407  0054FA  6A4E               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
  1408                           
  1409                           ; Clear objects allocated to COMRAM (34 bytes)
  1410  0054FC  EE00  F028         	lfsr	0,__pbssCOMRAM
  1411  005500  0E22               	movlw	34
  1412  005502                     clear_4:
  1413  005502  6AEE               	clrf	postinc0,c
  1414  005504  06E8               	decf	wreg,f,c
  1415  005506  E1FD               	bnz	clear_4
  1416  005508                     end_of_initialization:
  1417                           	opt stack 0
  1418  005508                     __end_of__initialization:
  1419                           	opt stack 0
  1420  005508  904F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1421  00550A  924F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1422  00550C  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1423  00550E  6EF8               	movwf	tblptru,c
  1424  005510  0100               	movlb	0
  1425  005512  EF85  F013         	goto	_main	;jump to C main() function
  1426                           tblptru	equ	0xFF8
  1427                           tblptrh	equ	0xFF7
  1428                           tblptrl	equ	0xFF6
  1429                           tablat	equ	0xFF5
  1430                           postinc0	equ	0xFEE
  1431                           wreg	equ	0xFE8
  1432                           postdec1	equ	0xFE5
  1433                           fsr1l	equ	0xFE1
  1434                           
  1435                           	psect	bitbssCOMRAM
  1436  000270                     __pbitbssCOMRAM:
  1437                           	opt stack 0
  1438  000270                     _fSrcAddrChanged:
  1439                           	opt stack 0
  1440  000270                     	ds	1
  1441  000271                     	ds	1
  1442  000272                     _unlocked:
  1443                           	opt stack 0
  1444  000272                     	ds	1
  1445                           tblptru	equ	0xFF8
  1446                           tblptrh	equ	0xFF7
  1447                           tblptrl	equ	0xFF6
  1448                           tablat	equ	0xFF5
  1449                           postinc0	equ	0xFEE
  1450                           wreg	equ	0xFE8
  1451                           postdec1	equ	0xFE5
  1452                           fsr1l	equ	0xFE1
  1453                           
  1454                           	psect	bssCOMRAM
  1455  000028                     __pbssCOMRAM:
  1456                           	opt stack 0
  1457  000028                     arp_gratuitous@timeStart:
  1458                           	opt stack 0
  1459  000028                     	ds	4
  1460  00002C                     buttonHandler@debounceCounter:
  1461                           	opt stack 0
  1462  00002C                     	ds	4
  1463  000030                     _numberToDisplay:
  1464                           	opt stack 0
  1465  000030                     	ds	4
  1466  000034                     _sequence:
  1467                           	opt stack 0
  1468  000034                     	ds	2
  1469  000036                     _arpStatus:
  1470                           	opt stack 0
  1471  000036                     	ds	2
  1472  000038                     ethernetController_streamToTransmitBuffer@pointer:
  1473                           	opt stack 0
  1474  000038                     	ds	2
  1475  00003A                     _nextPacketPointer:
  1476                           	opt stack 0
  1477  00003A                     	ds	2
  1478  00003C                     udp_sendPacket@start:
  1479                           	opt stack 0
  1480  00003C                     	ds	1
  1481  00003D                     ipv4_sendFrame@failedResolveCounter:
  1482                           	opt stack 0
  1483  00003D                     	ds	1
  1484  00003E                     arp_background@state:
  1485                           	opt stack 0
  1486  00003E                     	ds	1
  1487  00003F                     arp_gratuitous@state:
  1488                           	opt stack 0
  1489  00003F                     	ds	1
  1490  000040                     arp_gratuitous@announceCounter:
  1491                           	opt stack 0
  1492  000040                     	ds	1
  1493  000041                     arp_probe@state:
  1494                           	opt stack 0
  1495  000041                     	ds	1
  1496  000042                     arp_probe@probeCounter:
  1497                           	opt stack 0
  1498  000042                     	ds	1
  1499  000043                     sevenSegmentUpdate@digitPointer:
  1500                           	opt stack 0
  1501  000043                     	ds	1
  1502  000044                     buttonHandler@newState:
  1503                           	opt stack 0
  1504  000044                     	ds	1
  1505  000045                     buttonHandler@oldState:
  1506                           	opt stack 0
  1507  000045                     	ds	1
  1508  000046                     	ds	1
  1509  000047                     arp_background@err:
  1510                           	opt stack 0
  1511  000047                     	ds	3
  1512                           tblptru	equ	0xFF8
  1513                           tblptrh	equ	0xFF7
  1514                           tblptrl	equ	0xFF6
  1515                           tablat	equ	0xFF5
  1516                           postinc0	equ	0xFEE
  1517                           wreg	equ	0xFE8
  1518                           postdec1	equ	0xFE5
  1519                           fsr1l	equ	0xFE1
  1520                           
  1521                           	psect	dataCOMRAM
  1522  00004A                     __pdataCOMRAM:
  1523                           	opt stack 0
  1524  00004A                     _id:
  1525                           	opt stack 0
  1526  00004A                     	ds	2
  1527  00004C                     ethernetController_softReset@F6068:
  1528                           	opt stack 0
  1529  00004C                     	ds	2
  1530                           tblptru	equ	0xFF8
  1531                           tblptrh	equ	0xFF7
  1532                           tblptrl	equ	0xFF6
  1533                           tablat	equ	0xFF5
  1534                           postinc0	equ	0xFEE
  1535                           wreg	equ	0xFE8
  1536                           postdec1	equ	0xFE5
  1537                           fsr1l	equ	0xFE1
  1538                           
  1539                           	psect	bssBANK1
  1540  0001FA                     __pbssBANK1:
  1541                           	opt stack 0
  1542  0001FA                     handleStackBackgroundTasks@remainingLength:
  1543                           	opt stack 0
  1544  0001FA                     	ds	1
  1545                           tblptru	equ	0xFF8
  1546                           tblptrh	equ	0xFF7
  1547                           tblptrl	equ	0xFF6
  1548                           tablat	equ	0xFF5
  1549                           postinc0	equ	0xFEE
  1550                           wreg	equ	0xFE8
  1551                           postdec1	equ	0xFE5
  1552                           fsr1l	equ	0xFE1
  1553                           
  1554                           	psect	bssBANK2
  1555  0002B8                     __pbssBANK2:
  1556                           	opt stack 0
  1557  0002B8                     _time:
  1558                           	opt stack 0
  1559  0002B8                     	ds	4
  1560  0002BC                     ipv4_sendFrame@oldTime:
  1561                           	opt stack 0
  1562  0002BC                     	ds	4
  1563  0002C0                     arp_background@ipPreliminary:
  1564                           	opt stack 0
  1565  0002C0                     	ds	4
  1566  0002C4                     ethernet_rxGetNewFrame@counter:
  1567                           	opt stack 0
  1568  0002C4                     	ds	4
  1569  0002C8                     sevenSegmentUpdate@digitsToDisplay:
  1570                           	opt stack 0
  1571  0002C8                     	ds	3
  1572  0002CB                     handleStackBackgroundTasks@lastEndAddress:
  1573                           	opt stack 0
  1574  0002CB                     	ds	2
  1575  0002CD                     ethernetController_softReset@F6070:
  1576                           	opt stack 0
  1577  0002CD                     	ds	2
  1578  0002CF                     _foo:
  1579                           	opt stack 0
  1580  0002CF                     	ds	1
  1581  0002D0                     handleStackBackgroundTasks@numberOfPacketsSent:
  1582                           	opt stack 0
  1583  0002D0                     	ds	1
  1584  0002D1                     handleStackBackgroundTasks@state:
  1585                           	opt stack 0
  1586  0002D1                     	ds	1
  1587  0002D2                     ethernetController_getRSV@temp:
  1588                           	opt stack 0
  1589  0002D2                     	ds	6
  1590  0002D8                     _ipPreliminarySource:
  1591                           	opt stack 0
  1592  0002D8                     	ds	4
  1593  0002DC                     ipAdressToString@number:
  1594                           	opt stack 0
  1595  0002DC                     	ds	4
  1596  0002E0                     _ipSource:
  1597                           	opt stack 0
  1598  0002E0                     	ds	4
  1599  0002E4                     macToString@number:
  1600                           	opt stack 0
  1601  0002E4                     	ds	3
  1602  0002E7                     _buttonState:
  1603                           	opt stack 0
  1604  0002E7                     	ds	1
  1605                           tblptru	equ	0xFF8
  1606                           tblptrh	equ	0xFF7
  1607                           tblptrl	equ	0xFF6
  1608                           tablat	equ	0xFF5
  1609                           postinc0	equ	0xFEE
  1610                           wreg	equ	0xFE8
  1611                           postdec1	equ	0xFE5
  1612                           fsr1l	equ	0xFE1
  1613                           
  1614                           	psect	dataBANK2
  1615  0002E8                     __pdataBANK2:
  1616                           	opt stack 0
  1617  0002E8                     _randx:
  1618                           	opt stack 0
  1619  0002E8                     	ds	4
  1620                           tblptru	equ	0xFF8
  1621                           tblptrh	equ	0xFF7
  1622                           tblptrl	equ	0xFF6
  1623                           tablat	equ	0xFF5
  1624                           postinc0	equ	0xFEE
  1625                           wreg	equ	0xFE8
  1626                           postdec1	equ	0xFE5
  1627                           fsr1l	equ	0xFE1
  1628                           
  1629                           	psect	bssBANK3
  1630  000300                     __pbssBANK3:
  1631                           	opt stack 0
  1632  000300                     _occupiedMemory:
  1633                           	opt stack 0
  1634  000300                     	ds	72
  1635  000348                     handleStackBackgroundTasks@currentPacket:
  1636                           	opt stack 0
  1637  000348                     	ds	66
  1638  00038A                     printEthernetState@oldState:
  1639                           	opt stack 0
  1640  00038A                     	ds	15
  1641  000399                     ipAdressToString@address:
  1642                           	opt stack 0
  1643  000399                     	ds	20
  1644  0003AD                     macToString@address:
  1645                           	opt stack 0
  1646  0003AD                     	ds	20
  1647  0003C1                     intToString@number:
  1648                           	opt stack 0
  1649  0003C1                     	ds	10
  1650                           tblptru	equ	0xFF8
  1651                           tblptrh	equ	0xFF7
  1652                           tblptrl	equ	0xFF6
  1653                           tablat	equ	0xFF5
  1654                           postinc0	equ	0xFEE
  1655                           wreg	equ	0xFE8
  1656                           postdec1	equ	0xFE5
  1657                           fsr1l	equ	0xFE1
  1658                           
  1659                           	psect	dataBANK3
  1660  0003CB                     __pdataBANK3:
  1661                           	opt stack 0
  1662  0003CB                     _icmpTxtMessages:
  1663                           	opt stack 0
  1664  0003CB                     	ds	30
  1665  0003E9                     _sevenSegCharacters:
  1666                           	opt stack 0
  1667  0003E9                     	ds	12
  1668                           tblptru	equ	0xFF8
  1669                           tblptrh	equ	0xFF7
  1670                           tblptrl	equ	0xFF6
  1671                           tablat	equ	0xFF5
  1672                           postinc0	equ	0xFEE
  1673                           wreg	equ	0xFE8
  1674                           postdec1	equ	0xFE5
  1675                           fsr1l	equ	0xFE1
  1676                           
  1677                           	psect	bssBANK4
  1678  000400                     __pbssBANK4:
  1679                           	opt stack 0
  1680  000400                     _stack:
  1681                           	opt stack 0
  1682  000400                     	ds	124
  1683  00047C                     _arp_table:
  1684                           	opt stack 0
  1685  00047C                     	ds	112
  1686                           tblptru	equ	0xFF8
  1687                           tblptrh	equ	0xFF7
  1688                           tblptrl	equ	0xFF6
  1689                           tablat	equ	0xFF5
  1690                           postinc0	equ	0xFEE
  1691                           wreg	equ	0xFE8
  1692                           postdec1	equ	0xFE5
  1693                           fsr1l	equ	0xFE1
  1694                           
  1695                           	psect	bssBANK5
  1696  000500                     __pbssBANK5:
  1697                           	opt stack 0
  1698  000500                     _tcpListeners:
  1699                           	opt stack 0
  1700  000500                     	ds	204
  1701  0005CC                     arpEntryToString@string:
  1702                           	opt stack 0
  1703  0005CC                     	ds	50
  1704                           tblptru	equ	0xFF8
  1705                           tblptrh	equ	0xFF7
  1706                           tblptrl	equ	0xFF6
  1707                           tablat	equ	0xFF5
  1708                           postinc0	equ	0xFEE
  1709                           wreg	equ	0xFE8
  1710                           postdec1	equ	0xFE5
  1711                           fsr1l	equ	0xFE1
  1712                           
  1713                           	psect	cstackBANK6
  1714  000600                     __pcstackBANK6:
  1715                           	opt stack 0
  1716  000600                     main@prescaler:
  1717                           	opt stack 0
  1718                           
  1719                           ; 4 bytes @ 0x0
  1720  000600                     	ds	4
  1721  000604                     _main$2607:
  1722                           	opt stack 0
  1723                           
  1724                           ; 2 bytes @ 0x4
  1725  000604                     	ds	2
  1726  000606                     main@err:
  1727                           	opt stack 0
  1728                           
  1729                           ; 3 bytes @ 0x6
  1730  000606                     	ds	3
  1731  000609                     main@udp:
  1732                           	opt stack 0
  1733                           
  1734                           ; 8 bytes @ 0x9
  1735  000609                     	ds	8
  1736  000611                     main@ipDst:
  1737                           	opt stack 0
  1738                           
  1739                           ; 4 bytes @ 0x11
  1740  000611                     	ds	4
  1741  000615                     main@connection:
  1742                           	opt stack 0
  1743                           
  1744                           ; 17 bytes @ 0x15
  1745  000615                     	ds	17
  1746                           tblptru	equ	0xFF8
  1747                           tblptrh	equ	0xFF7
  1748                           tblptrl	equ	0xFF6
  1749                           tablat	equ	0xFF5
  1750                           postinc0	equ	0xFEE
  1751                           wreg	equ	0xFE8
  1752                           postdec1	equ	0xFE5
  1753                           fsr1l	equ	0xFE1
  1754                           
  1755                           	psect	cstackBANK2
  1756  000200                     __pcstackBANK2:
  1757                           	opt stack 0
  1758  000200                     icmp_handleNewPacket@foo:
  1759                           	opt stack 0
  1760                           
  1761                           ; 128 bytes @ 0x0
  1762  000200                     	ds	128
  1763  000280                     icmp_handleNewPacket@err:
  1764                           	opt stack 0
  1765                           
  1766                           ; 3 bytes @ 0x80
  1767  000280                     	ds	3
  1768  000283                     icmp_handleNewPacket@i:
  1769                           	opt stack 0
  1770                           
  1771                           ; 2 bytes @ 0x83
  1772  000283                     	ds	2
  1773  000285                     icmp_handleNewPacket@icmpHeader:
  1774                           	opt stack 0
  1775                           
  1776                           ; 8 bytes @ 0x85
  1777  000285                     	ds	8
  1778  00028D                     _ipv4_handleNewPacket$3965:
  1779                           	opt stack 0
  1780                           
  1781                           ; 2 bytes @ 0x8D
  1782  00028D                     	ds	2
  1783  00028F                     ipv4_handleNewPacket@header:
  1784                           	opt stack 0
  1785                           
  1786                           ; 23 bytes @ 0x8F
  1787  00028F                     	ds	23
  1788  0002A6                     ipv4_handleNewPacket@payloadField:
  1789                           	opt stack 0
  1790                           
  1791                           ; 9 bytes @ 0xA6
  1792  0002A6                     	ds	9
  1793  0002AF                     ipv4_handleNewPacket@headerField:
  1794                           	opt stack 0
  1795                           
  1796                           ; 9 bytes @ 0xAF
  1797  0002AF                     	ds	9
  1798                           tblptru	equ	0xFF8
  1799                           tblptrh	equ	0xFF7
  1800                           tblptrl	equ	0xFF6
  1801                           tablat	equ	0xFF5
  1802                           postinc0	equ	0xFEE
  1803                           wreg	equ	0xFE8
  1804                           postdec1	equ	0xFE5
  1805                           fsr1l	equ	0xFE1
  1806                           
  1807                           	psect	cstackBANK1
  1808  000100                     __pcstackBANK1:
  1809                           	opt stack 0
  1810  000100                     arp_sendRequest@ipSender:
  1811                           	opt stack 0
  1812  000100                     arp_sendReply@request:
  1813                           	opt stack 0
  1814  000100                     tcp_sendSYNACK@ipHeaderBuf:
  1815                           	opt stack 0
  1816  000100                     icmp_sendEchoReply@icmpMessage:
  1817                           	opt stack 0
  1818  000100                     udp_sendPacket@headerBuf:
  1819                           	opt stack 0
  1820                           
  1821                           ; 64 bytes @ 0x0
  1822  000100                     	ds	4
  1823  000104                     arp_sendRequest@ipTarget:
  1824                           	opt stack 0
  1825                           
  1826                           ; 4 bytes @ 0x4
  1827  000104                     	ds	4
  1828  000108                     arp_sendRequest@senderMAC:
  1829                           	opt stack 0
  1830                           
  1831                           ; 6 bytes @ 0x8
  1832  000108                     	ds	6
  1833  00010E                     arp_sendRequest@targetMAC:
  1834                           	opt stack 0
  1835                           
  1836                           ; 6 bytes @ 0xE
  1837  00010E                     	ds	6
  1838  000114                     arp_sendRequest@request:
  1839                           	opt stack 0
  1840                           
  1841                           ; 32 bytes @ 0x14
  1842  000114                     	ds	12
  1843  000120                     arp_sendReply@senderMAC:
  1844                           	opt stack 0
  1845  000120                     tcp_sendSYNACK@headerBuf:
  1846                           	opt stack 0
  1847                           
  1848                           ; 64 bytes @ 0x20
  1849  000120                     	ds	6
  1850  000126                     arp_sendReply@targetMAC:
  1851                           	opt stack 0
  1852                           
  1853                           ; 6 bytes @ 0x26
  1854  000126                     	ds	6
  1855  00012C                     arp_sendReply@senderIP:
  1856                           	opt stack 0
  1857                           
  1858                           ; 4 bytes @ 0x2C
  1859  00012C                     	ds	4
  1860  000130                     arp_sendReply@targetIP:
  1861                           	opt stack 0
  1862                           
  1863                           ; 4 bytes @ 0x30
  1864  000130                     	ds	4
  1865  000134                     ?_ipv4_sendFrame:
  1866                           	opt stack 0
  1867  000134                     ?_arp_probe:
  1868                           	opt stack 0
  1869  000134                     ?_arp_gratuitous:
  1870                           	opt stack 0
  1871  000134                     arp_sendReply@myIP:
  1872                           	opt stack 0
  1873  000134                     arp_probe@ipTarget:
  1874                           	opt stack 0
  1875  000134                     arp_gratuitous@ip:
  1876                           	opt stack 0
  1877  000134                     ipv4_sendFrame@ipPacket:
  1878                           	opt stack 0
  1879                           
  1880                           ; 66 bytes @ 0x34
  1881  000134                     	ds	4
  1882  000138                     arp_probe@link:
  1883                           	opt stack 0
  1884  000138                     arp_gratuitous@link:
  1885                           	opt stack 0
  1886  000138                     arp_sendReply@reply:
  1887                           	opt stack 0
  1888                           
  1889                           ; 32 bytes @ 0x38
  1890  000138                     	ds	1
  1891  000139                     ??_arp_probe:
  1892  000139                     ??_arp_gratuitous:
  1893                           
  1894                           ; 1 bytes @ 0x39
  1895  000139                     	ds	7
  1896  000140                     icmp_sendEchoReply@headerBuf:
  1897                           	opt stack 0
  1898  000140                     udp_sendPacket@ipHeaderBuf:
  1899                           	opt stack 0
  1900                           
  1901                           ; 32 bytes @ 0x40
  1902  000140                     	ds	1
  1903  000141                     arp_probe@index:
  1904                           	opt stack 0
  1905                           
  1906                           ; 1 bytes @ 0x41
  1907  000141                     	ds	1
  1908  000142                     arp_probe@ipSender:
  1909                           	opt stack 0
  1910                           
  1911                           ; 4 bytes @ 0x42
  1912  000142                     	ds	4
  1913  000146                     arp_probe@timeStart:
  1914                           	opt stack 0
  1915                           
  1916                           ; 4 bytes @ 0x46
  1917  000146                     	ds	4
  1918  00014A                     arp_probe@waitingTime:
  1919                           	opt stack 0
  1920                           
  1921                           ; 4 bytes @ 0x4A
  1922  00014A                     	ds	4
  1923  00014E                     arp_probe@err:
  1924                           	opt stack 0
  1925                           
  1926                           ; 3 bytes @ 0x4E
  1927  00014E                     	ds	3
  1928  000151                     ?_arp_background:
  1929                           	opt stack 0
  1930                           
  1931                           ; 3 bytes @ 0x51
  1932  000151                     	ds	3
  1933  000154                     ??_arp_background:
  1934                           
  1935                           ; 1 bytes @ 0x54
  1936  000154                     	ds	2
  1937  000156                     arp_background@link:
  1938                           	opt stack 0
  1939                           
  1940                           ; 1 bytes @ 0x56
  1941  000156                     	ds	1
  1942  000157                     arp_background@errAnnounce:
  1943                           	opt stack 0
  1944                           
  1945                           ; 3 bytes @ 0x57
  1946  000157                     	ds	1
  1947  000158                     arp_handleNewPacket@arp:
  1948                           	opt stack 0
  1949                           
  1950                           ; 32 bytes @ 0x58
  1951  000158                     	ds	2
  1952  00015A                     arp_background@errProbe:
  1953                           	opt stack 0
  1954                           
  1955                           ; 3 bytes @ 0x5A
  1956  00015A                     	ds	6
  1957  000160                     icmp_sendEchoReply@checksum:
  1958                           	opt stack 0
  1959  000160                     _tcp_sendSYNACK$4902:
  1960                           	opt stack 0
  1961  000160                     udp_sendPacket@foo:
  1962                           	opt stack 0
  1963                           
  1964                           ; 2 bytes @ 0x60
  1965  000160                     	ds	2
  1966  000162                     icmp_sendEchoReply@i:
  1967                           	opt stack 0
  1968  000162                     _tcp_sendSYNACK$4903:
  1969                           	opt stack 0
  1970  000162                     udp_sendPacket@i:
  1971                           	opt stack 0
  1972                           
  1973                           ; 2 bytes @ 0x62
  1974  000162                     	ds	1
  1975  000163                     icmp_sendEchoReply@i_4330:
  1976                           	opt stack 0
  1977                           
  1978                           ; 2 bytes @ 0x63
  1979  000163                     	ds	1
  1980  000164                     _tcp_sendSYNACK$4904:
  1981                           	opt stack 0
  1982  000164                     udp_sendPacket@ipPacket:
  1983                           	opt stack 0
  1984                           
  1985                           ; 66 bytes @ 0x64
  1986  000164                     	ds	1
  1987  000165                     icmp_sendEchoReply@icmpHeader:
  1988                           	opt stack 0
  1989                           
  1990                           ; 8 bytes @ 0x65
  1991  000165                     	ds	1
  1992  000166                     _tcp_sendSYNACK$4905:
  1993                           	opt stack 0
  1994                           
  1995                           ; 2 bytes @ 0x66
  1996  000166                     	ds	2
  1997  000168                     _tcp_sendSYNACK$4906:
  1998                           	opt stack 0
  1999                           
  2000                           ; 2 bytes @ 0x68
  2001  000168                     	ds	2
  2002  00016A                     _tcp_sendSYNACK$4907:
  2003                           	opt stack 0
  2004                           
  2005                           ; 2 bytes @ 0x6A
  2006  00016A                     	ds	2
  2007  00016C                     _tcp_sendSYNACK$4908:
  2008                           	opt stack 0
  2009                           
  2010                           ; 2 bytes @ 0x6C
  2011  00016C                     	ds	1
  2012  00016D                     icmp_sendEchoReply@ipReply:
  2013                           	opt stack 0
  2014                           
  2015                           ; 66 bytes @ 0x6D
  2016  00016D                     	ds	1
  2017  00016E                     tcp_sendSYNACK@i:
  2018                           	opt stack 0
  2019                           
  2020                           ; 2 bytes @ 0x6E
  2021  00016E                     	ds	2
  2022  000170                     tcp_sendSYNACK@ipPacket:
  2023                           	opt stack 0
  2024                           
  2025                           ; 66 bytes @ 0x70
  2026  000170                     	ds	6
  2027  000176                     ??_ipv4_sendFrame:
  2028                           
  2029                           ; 1 bytes @ 0x76
  2030  000176                     	ds	57
  2031  0001AF                     icmp_handleNewPacket@ipHeader:
  2032                           	opt stack 0
  2033                           
  2034                           ; 23 bytes @ 0xAF
  2035  0001AF                     	ds	3
  2036  0001B2                     tcp_sendSYNACK@tcpHeader:
  2037                           	opt stack 0
  2038                           
  2039                           ; 21 bytes @ 0xB2
  2040  0001B2                     	ds	20
  2041  0001C6                     icmp_handleNewPacket@ipPayload:
  2042                           	opt stack 0
  2043                           
  2044                           ; 9 bytes @ 0xC6
  2045  0001C6                     	ds	1
  2046  0001C7                     tcp_handleNewPacket@i:
  2047                           	opt stack 0
  2048                           
  2049                           ; 1 bytes @ 0xC7
  2050  0001C7                     	ds	1
  2051  0001C8                     tcp_handleNewPacket@tcpHeader:
  2052                           	opt stack 0
  2053                           
  2054                           ; 21 bytes @ 0xC8
  2055  0001C8                     	ds	21
  2056  0001DD                     ipv4_handleNewPacket@frame:
  2057                           	opt stack 0
  2058                           
  2059                           ; 2 bytes @ 0xDD
  2060  0001DD                     	ds	2
  2061  0001DF                     ethernet_rxGetNewFrame@frame:
  2062                           	opt stack 0
  2063                           
  2064                           ; 2 bytes @ 0xDF
  2065  0001DF                     	ds	2
  2066  0001E1                     ??_ethernet_rxGetNewFrame:
  2067                           
  2068                           ; 1 bytes @ 0xE1
  2069  0001E1                     	ds	8
  2070  0001E9                     ethernet_rxGetNewFrame@err:
  2071                           	opt stack 0
  2072                           
  2073                           ; 3 bytes @ 0xE9
  2074  0001E9                     	ds	3
  2075  0001EC                     handleStackBackgroundTasks@stack:
  2076                           	opt stack 0
  2077                           
  2078                           ; 2 bytes @ 0xEC
  2079  0001EC                     	ds	2
  2080  0001EE                     ??_handleStackBackgroundTasks:
  2081                           
  2082                           ; 1 bytes @ 0xEE
  2083  0001EE                     	ds	2
  2084  0001F0                     handleStackBackgroundTasks@errArp:
  2085                           	opt stack 0
  2086                           
  2087                           ; 3 bytes @ 0xF0
  2088  0001F0                     	ds	3
  2089  0001F3                     handleStackBackgroundTasks@intf:
  2090                           	opt stack 0
  2091                           
  2092                           ; 2 bytes @ 0xF3
  2093  0001F3                     	ds	2
  2094  0001F5                     handleStackBackgroundTasks@errIPv4:
  2095                           	opt stack 0
  2096                           
  2097                           ; 3 bytes @ 0xF5
  2098  0001F5                     	ds	3
  2099  0001F8                     ??_main:
  2100                           
  2101                           ; 1 bytes @ 0xF8
  2102  0001F8                     	ds	2
  2103                           tblptru	equ	0xFF8
  2104                           tblptrh	equ	0xFF7
  2105                           tblptrl	equ	0xFF6
  2106                           tablat	equ	0xFF5
  2107                           postinc0	equ	0xFEE
  2108                           wreg	equ	0xFE8
  2109                           postdec1	equ	0xFE5
  2110                           fsr1l	equ	0xFE1
  2111                           
  2112                           	psect	cstackBANK0
  2113  000060                     __pcstackBANK0:
  2114                           	opt stack 0
  2115  000060                     ?_enc424j600_getNextPacketPointer:
  2116                           	opt stack 0
  2117  000060                     ?_ethernetController_getDeviceName:
  2118                           	opt stack 0
  2119  000060                     ?_etherTypeToString:
  2120                           	opt stack 0
  2121  000060                     ?_UART_special:
  2122                           	opt stack 0
  2123  000060                     ?_icmp_calculateChecksumBuf:
  2124                           	opt stack 0
  2125  000060                     ?_ethernetController_getMTU:
  2126                           	opt stack 0
  2127  000060                     ?___lwdiv:
  2128                           	opt stack 0
  2129  000060                     ?_ipv4_background:
  2130                           	opt stack 0
  2131  000060                     ?_getMillis:
  2132                           	opt stack 0
  2133  000060                     ?_ipv4_getIPSourceAddress:
  2134                           	opt stack 0
  2135  000060                     ?_ipv4_getPreliminaryIPSourceAddress:
  2136                           	opt stack 0
  2137  000060                     ?___lmul:
  2138                           	opt stack 0
  2139  000060                     ?___lldiv:
  2140                           	opt stack 0
  2141  000060                     ?___llmod:
  2142                           	opt stack 0
  2143  000060                     ?_enc424j600_updateReceiveStatusVector:
  2144                           	opt stack 0
  2145  000060                     ?_arp_getEntryFromTable:
  2146                           	opt stack 0
  2147  000060                     entireMemoryEmpty@i:
  2148                           	opt stack 0
  2149  000060                     entireMemoryFull@i:
  2150                           	opt stack 0
  2151  000060                     memory_txFrameClear@index:
  2152                           	opt stack 0
  2153  000060                     tcp_init@i:
  2154                           	opt stack 0
  2155  000060                     enc424j600_writeSPI@data:
  2156                           	opt stack 0
  2157  000060                     enc424j600_readSPI@data:
  2158                           	opt stack 0
  2159  000060                     enc424j600_setNextPacketPointer@ptr:
  2160                           	opt stack 0
  2161  000060                     enc424j600_updateReceiveStatusVector@rsv:
  2162                           	opt stack 0
  2163  000060                     mac_setToBroadcast@mac:
  2164                           	opt stack 0
  2165  000060                     mac_isAllZero@mac:
  2166                           	opt stack 0
  2167  000060                     mac_cmp@a:
  2168                           	opt stack 0
  2169  000060                     mac_setAllZero@mac:
  2170                           	opt stack 0
  2171  000060                     etherTypeToString@ethertype:
  2172                           	opt stack 0
  2173  000060                     ipv4_calculateHeaderChecksum@header:
  2174                           	opt stack 0
  2175  000060                     ipv4_SrcAddrChanged@err:
  2176                           	opt stack 0
  2177  000060                     ipv4_cmp@a:
  2178                           	opt stack 0
  2179  000060                     ipv4_isAllZero@ip:
  2180                           	opt stack 0
  2181  000060                     ipv4_setToAllZero@ip:
  2182                           	opt stack 0
  2183  000060                     icmp_calculateChecksumBuf@buf:
  2184                           	opt stack 0
  2185  000060                     icmp_writeHeaderIntoBuffer@buf:
  2186                           	opt stack 0
  2187  000060                     tcp_calculateHeaderChecksum@tcpHeader:
  2188                           	opt stack 0
  2189  000060                     ___lwdiv@dividend:
  2190                           	opt stack 0
  2191  000060                     printErrorMessage@err:
  2192                           	opt stack 0
  2193  000060                     ipv4_setIPSourceAddress@ip:
  2194                           	opt stack 0
  2195  000060                     ___lmul@multiplier:
  2196                           	opt stack 0
  2197  000060                     ___lldiv@dividend:
  2198                           	opt stack 0
  2199  000060                     ___llmod@dividend:
  2200                           	opt stack 0
  2201  000060                     checkForOverlapSwitched@a:
  2202                           	opt stack 0
  2203  000060                     ipv4_writeHeaderIntoBuffer@header:
  2204                           	opt stack 0
  2205                           
  2206                           ; 23 bytes @ 0x0
  2207  000060                     	ds	2
  2208  000062                     ??_enc424j600_writeSPI:
  2209  000062                     ??_enc424j600_readSPI:
  2210  000062                     ??_etherTypeToString:
  2211  000062                     ??_ipv4_calculateHeaderChecksum:
  2212  000062                     ?_ethernetController_getNextPacketPointer:
  2213                           	opt stack 0
  2214  000062                     mac_setToBroadcast@i:
  2215                           	opt stack 0
  2216  000062                     mac_isAllZero@i:
  2217                           	opt stack 0
  2218  000062                     mac_setAllZero@i:
  2219                           	opt stack 0
  2220  000062                     UART_special@code:
  2221                           	opt stack 0
  2222  000062                     ipv4_isAllZero@i:
  2223                           	opt stack 0
  2224  000062                     ipv4_setToAllZero@i:
  2225                           	opt stack 0
  2226  000062                     mac_cmp@b:
  2227                           	opt stack 0
  2228  000062                     ipv4_cmp@b:
  2229                           	opt stack 0
  2230  000062                     icmp_calculateChecksumBuf@ipPayloadLength:
  2231                           	opt stack 0
  2232  000062                     ___lwdiv@divisor:
  2233                           	opt stack 0
  2234  000062                     icmp_writeHeaderIntoBuffer@header:
  2235                           	opt stack 0
  2236  000062                     ethernetController_getDeviceName@string:
  2237                           	opt stack 0
  2238  000062                     tcp_calculateHeaderChecksum@ipv4Header:
  2239                           	opt stack 0
  2240                           
  2241                           ; 23 bytes @ 0x2
  2242  000062                     	ds	1
  2243  000063                     ??_ipv4_background:
  2244  000063                     arp_init@mac:
  2245                           	opt stack 0
  2246                           
  2247                           ; 6 bytes @ 0x3
  2248  000063                     	ds	1
  2249  000064                     ??_icmp_calculateChecksumBuf:
  2250  000064                     ___lwdiv@counter:
  2251                           	opt stack 0
  2252  000064                     ___lmul@multiplicand:
  2253                           	opt stack 0
  2254  000064                     ___lldiv@divisor:
  2255                           	opt stack 0
  2256  000064                     ___llmod@divisor:
  2257                           	opt stack 0
  2258                           
  2259                           ; 4 bytes @ 0x4
  2260  000064                     	ds	1
  2261  000065                     ??_enc424j600_updateReceiveStatusVector:
  2262  000065                     ___lwdiv@quotient:
  2263                           	opt stack 0
  2264  000065                     ipv4_background@err:
  2265                           	opt stack 0
  2266                           
  2267                           ; 3 bytes @ 0x5
  2268  000065                     	ds	1
  2269  000066                     mac_cmp@i:
  2270                           	opt stack 0
  2271  000066                     ipv4_cmp@i:
  2272                           	opt stack 0
  2273  000066                     enc424j600_writeSPI@timeoutCounter:
  2274                           	opt stack 0
  2275  000066                     enc424j600_readSPI@timeoutCounter:
  2276                           	opt stack 0
  2277                           
  2278                           ; 4 bytes @ 0x6
  2279  000066                     	ds	1
  2280  000067                     arp_getEntryFromTable@index:
  2281                           	opt stack 0
  2282  000067                     arp_checkForEntry@ip:
  2283                           	opt stack 0
  2284  000067                     arp_setNewEntry@mac:
  2285                           	opt stack 0
  2286                           
  2287                           ; 6 bytes @ 0x7
  2288  000067                     	ds	1
  2289  000068                     icmp_calculateChecksumBuf@carry:
  2290                           	opt stack 0
  2291  000068                     ___llmod@counter:
  2292                           	opt stack 0
  2293  000068                     ___lmul@product:
  2294                           	opt stack 0
  2295  000068                     ___lldiv@quotient:
  2296                           	opt stack 0
  2297                           
  2298                           ; 4 bytes @ 0x8
  2299  000068                     	ds	1
  2300  000069                     icmp_calculateChecksumBuf@foo:
  2301                           	opt stack 0
  2302  000069                     arp_init@ip:
  2303                           	opt stack 0
  2304  000069                     checkForOverlapSwitched@b:
  2305                           	opt stack 0
  2306                           
  2307                           ; 9 bytes @ 0x9
  2308  000069                     	ds	1
  2309  00006A                     ??_icmp_writeHeaderIntoBuffer:
  2310  00006A                     enc424j600_writeSingleByte@opcode:
  2311                           	opt stack 0
  2312  00006A                     ipv4_calculateHeaderChecksum@carry:
  2313                           	opt stack 0
  2314  00006A                     enc424j600_writeControlRegisterUnbanked@data:
  2315                           	opt stack 0
  2316  00006A                     enc424j600_readControlRegisterUnbanked@data:
  2317                           	opt stack 0
  2318  00006A                     enc424j600_setGPDATAWritePointer@addr:
  2319                           	opt stack 0
  2320  00006A                     enc424j600_setERXDATAReadPointer@addr:
  2321                           	opt stack 0
  2322                           
  2323                           ; 2 bytes @ 0xA
  2324  00006A                     	ds	1
  2325  00006B                     arp_checkForEntry@index:
  2326                           	opt stack 0
  2327  00006B                     icmp_calculateChecksumBuf@i:
  2328                           	opt stack 0
  2329  00006B                     ipv4_calculateHeaderChecksum@sum:
  2330                           	opt stack 0
  2331                           
  2332                           ; 4 bytes @ 0xB
  2333  00006B                     	ds	1
  2334  00006C                     ?_rand:
  2335                           	opt stack 0
  2336  00006C                     enc424j600_writeControlRegisterUnbanked@addr:
  2337                           	opt stack 0
  2338  00006C                     enc424j600_readControlRegisterUnbanked@addr:
  2339                           	opt stack 0
  2340  00006C                     enc424j600_setGPDATAWritePointer@opcode:
  2341                           	opt stack 0
  2342  00006C                     enc424j600_setERXDATAReadPointer@opcode:
  2343                           	opt stack 0
  2344  00006C                     ___lldiv@counter:
  2345                           	opt stack 0
  2346  00006C                     enc424j600_updateReceiveStatusVector@receiveStatusVector:
  2347                           	opt stack 0
  2348                           
  2349                           ; 5 bytes @ 0xC
  2350  00006C                     	ds	1
  2351  00006D                     ??_arp_checkForEntry:
  2352  00006D                     enc424j600_writeControlRegisterUnbanked@opcode:
  2353                           	opt stack 0
  2354  00006D                     enc424j600_readControlRegisterUnbanked@opcode:
  2355                           	opt stack 0
  2356  00006D                     enc424j600_setGPDATAWritePointer@lowByte:
  2357                           	opt stack 0
  2358  00006D                     enc424j600_setERXDATAReadPointer@lowByte:
  2359                           	opt stack 0
  2360  00006D                     arp_init@i:
  2361                           	opt stack 0
  2362  00006D                     ultoa@buf:
  2363                           	opt stack 0
  2364  00006D                     arp_setNewEntry@ip:
  2365                           	opt stack 0
  2366  00006D                     icmp_calculateChecksumBuf@sum:
  2367                           	opt stack 0
  2368                           
  2369                           ; 4 bytes @ 0xD
  2370  00006D                     	ds	1
  2371  00006E                     ??_enc424j600_clearInterruptFlag:
  2372  00006E                     ?_enc424j600_getInterruptFlags:
  2373                           	opt stack 0
  2374  00006E                     ?___wmul:
  2375                           	opt stack 0
  2376  00006E                     ?___awmod:
  2377                           	opt stack 0
  2378  00006E                     ?___lwmod:
  2379                           	opt stack 0
  2380  00006E                     ?_ethernetController_softReset:
  2381                           	opt stack 0
  2382  00006E                     ?_ethernetController_checkDeviceId:
  2383                           	opt stack 0
  2384  00006E                     ?_ethernetController_getMacAddress:
  2385                           	opt stack 0
  2386  00006E                     ethernetController_setLEDConfig@conf:
  2387                           	opt stack 0
  2388  00006E                     enc424j600_getPacketCount@lowByte:
  2389                           	opt stack 0
  2390  00006E                     enc424j600_setGPDATAWritePointer@highByte:
  2391                           	opt stack 0
  2392  00006E                     enc424j600_setERXDATAReadPointer@highByte:
  2393                           	opt stack 0
  2394  00006E                     enc424j600_enableAutoMACInsertion@temp:
  2395                           	opt stack 0
  2396  00006E                     enc424j600_readPHYRegister@data:
  2397                           	opt stack 0
  2398  00006E                     enc424j600_setTXLength@len:
  2399                           	opt stack 0
  2400  00006E                     enc424j600_setTXStartAddress@addr:
  2401                           	opt stack 0
  2402  00006E                     enc424j600_setRXBufferStartAddress@addr:
  2403                           	opt stack 0
  2404  00006E                     enc424j600_setRXTailPointer@addr:
  2405                           	opt stack 0
  2406  00006E                     ___wmul@multiplier:
  2407                           	opt stack 0
  2408  00006E                     ___awmod@dividend:
  2409                           	opt stack 0
  2410  00006E                     ___lwmod@dividend:
  2411                           	opt stack 0
  2412  00006E                     stack_init@err:
  2413                           	opt stack 0
  2414                           
  2415                           ; 3 bytes @ 0xE
  2416  00006E                     	ds	1
  2417  00006F                     ??_ethernetController_updateNextPacketPointer:
  2418  00006F                     ?_ethernetController_getEtherTypeField:
  2419                           	opt stack 0
  2420  00006F                     ?_ethernetController_getSourceMACAddress:
  2421                           	opt stack 0
  2422  00006F                     ethernetController_setLEDConfig@LED:
  2423                           	opt stack 0
  2424  00006F                     ethernetController_writeEtherTypeFieldToBuffer@ethtype:
  2425                           	opt stack 0
  2426  00006F                     ethernetController_streamFromRXBuffer@startAddress:
  2427                           	opt stack 0
  2428  00006F                     ipv4_checkHeaderChecksum@header:
  2429                           	opt stack 0
  2430  00006F                     ultoa@val:
  2431                           	opt stack 0
  2432  00006F                     ethernetController_writeDestinationMACAddress@addr:
  2433                           	opt stack 0
  2434  00006F                     ethernetController_streamToTransmitBuffer@field:
  2435                           	opt stack 0
  2436  00006F                     ethernetController_getSourceMACAddress@field:
  2437                           	opt stack 0
  2438  00006F                     ethernetController_getEtherTypeField@field:
  2439                           	opt stack 0
  2440                           
  2441                           ; 9 bytes @ 0xF
  2442  00006F                     	ds	1
  2443  000070                     ??_enc424j600_getInterruptFlags:
  2444  000070                     ??_enc424j600_readPHYRegister:
  2445  000070                     ethernetController_setLEDConfig@data:
  2446                           	opt stack 0
  2447  000070                     enc424j600_setTXLength@lowByte:
  2448                           	opt stack 0
  2449  000070                     enc424j600_setTXStartAddress@lowByte:
  2450                           	opt stack 0
  2451  000070                     enc424j600_setRXBufferStartAddress@lowByte:
  2452                           	opt stack 0
  2453  000070                     enc424j600_setRXTailPointer@lowByte:
  2454                           	opt stack 0
  2455  000070                     enc424j600_clearInterruptFlag@flag:
  2456                           	opt stack 0
  2457  000070                     ___wmul@multiplicand:
  2458                           	opt stack 0
  2459  000070                     ___awmod@divisor:
  2460                           	opt stack 0
  2461  000070                     ___lwmod@divisor:
  2462                           	opt stack 0
  2463                           
  2464                           ; 2 bytes @ 0x10
  2465  000070                     	ds	1
  2466  000071                     ??_ethernetController_softReset:
  2467  000071                     ?_ethernetController_getRSV:
  2468                           	opt stack 0
  2469  000071                     ethernetController_checkDeviceId@data:
  2470                           	opt stack 0
  2471  000071                     ethernetController_streamFromRXBuffer@startEnd:
  2472                           	opt stack 0
  2473  000071                     enc424j600_setTXLength@highByte:
  2474                           	opt stack 0
  2475  000071                     enc424j600_setTXStartAddress@highByte:
  2476                           	opt stack 0
  2477  000071                     enc424j600_setRXBufferStartAddress@highByte:
  2478                           	opt stack 0
  2479  000071                     enc424j600_setRXTailPointer@highByte:
  2480                           	opt stack 0
  2481  000071                     enc424j600_clearInterruptFlag@temp:
  2482                           	opt stack 0
  2483  000071                     ethernetController_getRSV@address:
  2484                           	opt stack 0
  2485  000071                     arp_setNewEntry@timestamp:
  2486                           	opt stack 0
  2487  000071                     ethernetController_writeEtherTypeFieldToBuffer@field:
  2488                           	opt stack 0
  2489                           
  2490                           ; 9 bytes @ 0x11
  2491  000071                     	ds	1
  2492  000072                     ?_ethernetController_dropPacket:
  2493                           	opt stack 0
  2494  000072                     ethernetController_softReset@comFailCount:
  2495                           	opt stack 0
  2496  000072                     ethernetController_clearInterruptFlag@flag:
  2497                           	opt stack 0
  2498  000072                     ethernetController_streamFromRXBuffer@opcode:
  2499                           	opt stack 0
  2500  000072                     ___awmod@counter:
  2501                           	opt stack 0
  2502  000072                     ___lwmod@counter:
  2503                           	opt stack 0
  2504  000072                     ___wmul@product:
  2505                           	opt stack 0
  2506  000072                     ethernetController_checkDeviceId@err:
  2507                           	opt stack 0
  2508  000072                     ethernetController_sendPacket@field:
  2509                           	opt stack 0
  2510  000072                     checkForOverlap@a:
  2511                           	opt stack 0
  2512                           
  2513                           ; 9 bytes @ 0x12
  2514  000072                     	ds	1
  2515  000073                     ethernetController_streamFromRXBuffer@temp:
  2516                           	opt stack 0
  2517  000073                     ___awmod@sign:
  2518                           	opt stack 0
  2519  000073                     ethernetController_softReset@dataToSend:
  2520                           	opt stack 0
  2521  000073                     utoa@buf:
  2522                           	opt stack 0
  2523  000073                     ultoa@base:
  2524                           	opt stack 0
  2525  000073                     ipv4_checkHeaderChecksum@testHeader:
  2526                           	opt stack 0
  2527                           
  2528                           ; 23 bytes @ 0x13
  2529  000073                     	ds	1
  2530  000074                     ?_ipv4_generateAutoIP:
  2531                           	opt stack 0
  2532  000074                     ?_ipv4_parseHeader:
  2533                           	opt stack 0
  2534  000074                     ?_arp_parseFromRXBuffer:
  2535                           	opt stack 0
  2536  000074                     arp_parseFromRXBuffer@frame:
  2537                           	opt stack 0
  2538  000074                     ipv4_parseHeader@field:
  2539                           	opt stack 0
  2540  000074                     ethernetController_getMacAddress@mac:
  2541                           	opt stack 0
  2542  000074                     icmp_parseHeader@ipPayload:
  2543                           	opt stack 0
  2544  000074                     tcp_parseHeader@ipPayload:
  2545                           	opt stack 0
  2546                           
  2547                           ; 9 bytes @ 0x14
  2548  000074                     	ds	1
  2549  000075                     arp_checkForEntry@i:
  2550                           	opt stack 0
  2551  000075                     ethernetController_softReset@receivedData:
  2552                           	opt stack 0
  2553  000075                     ethernetController_updateNextPacketPointer@nextPktPointer:
  2554                           	opt stack 0
  2555  000075                     utoa@val:
  2556                           	opt stack 0
  2557  000075                     ultoa@v:
  2558                           	opt stack 0
  2559  000075                     ethernetController_writeDestinationMACAddress@field:
  2560                           	opt stack 0
  2561                           
  2562                           ; 9 bytes @ 0x15
  2563  000075                     	ds	1
  2564  000076                     ethernetController_getRSV@opcode:
  2565                           	opt stack 0
  2566  000076                     enc424j600_readPHYRegister@addr:
  2567                           	opt stack 0
  2568  000076                     enc424j600_getInterruptFlags@low:
  2569                           	opt stack 0
  2570                           
  2571                           ; 1 bytes @ 0x16
  2572  000076                     	ds	1
  2573  000077                     ethernetController_getRSV@i:
  2574                           	opt stack 0
  2575  000077                     ethernetController_updateNextPacketPointer@opcode:
  2576                           	opt stack 0
  2577  000077                     enc424j600_readPHYRegister@PHYaddress:
  2578                           	opt stack 0
  2579  000077                     enc424j600_getInterruptFlags@high:
  2580                           	opt stack 0
  2581  000077                     ipv4_writeHeaderIntoBuffer@ptr:
  2582                           	opt stack 0
  2583  000077                     utoa@base:
  2584                           	opt stack 0
  2585  000077                     ethernetController_softReset@err:
  2586                           	opt stack 0
  2587                           
  2588                           ; 3 bytes @ 0x17
  2589  000077                     	ds	1
  2590  000078                     ??_ethernetController_streamToTransmitBuffer:
  2591  000078                     ??_ethernetController_getEtherTypeField:
  2592  000078                     ?_ethernetController_pollInterruptFlags:
  2593                           	opt stack 0
  2594  000078                     ethernetController_getSourceMACAddress@opcode:
  2595                           	opt stack 0
  2596  000078                     ethernetController_updateNextPacketPointer@newPointerL:
  2597                           	opt stack 0
  2598  000078                     enc424j600_readPHYRegister@unusedBits:
  2599                           	opt stack 0
  2600  000078                     ipv4_generateAutoIP@ip:
  2601                           	opt stack 0
  2602                           
  2603                           ; 4 bytes @ 0x18
  2604  000078                     	ds	1
  2605  000079                     ??_tcp_calculateHeaderChecksum:
  2606  000079                     ??_ipv4_writeHeaderIntoBuffer:
  2607  000079                     ethernetController_updateNextPacketPointer@newPointerH:
  2608                           	opt stack 0
  2609  000079                     ultoa@c:
  2610                           	opt stack 0
  2611  000079                     utoa@v:
  2612                           	opt stack 0
  2613  000079                     enc424j600_readPHYRegister@timeoutCounter:
  2614                           	opt stack 0
  2615  000079                     arp_setNewEntry@minSeconds:
  2616                           	opt stack 0
  2617  000079                     ethernetController_getSourceMACAddress@sourceAddress:
  2618                           	opt stack 0
  2619                           
  2620                           ; 6 bytes @ 0x19
  2621  000079                     	ds	1
  2622  00007A                     ??_ethernetController_pollInterruptFlags:
  2623  00007A                     ?_ethernetController_init:
  2624                           	opt stack 0
  2625  00007A                     ethernetController_writeEtherTypeFieldToBuffer@lowByte:
  2626                           	opt stack 0
  2627  00007A                     ltoa@buf:
  2628                           	opt stack 0
  2629  00007A                     srand@x:
  2630                           	opt stack 0
  2631                           
  2632                           ; 2 bytes @ 0x1A
  2633  00007A                     	ds	1
  2634  00007B                     ethernetController_writeEtherTypeFieldToBuffer@highByte:
  2635                           	opt stack 0
  2636  00007B                     utoa@c:
  2637                           	opt stack 0
  2638  00007B                     checkForOverlap@b:
  2639                           	opt stack 0
  2640                           
  2641                           ; 9 bytes @ 0x1B
  2642  00007B                     	ds	1
  2643  00007C                     ethernetController_streamToTransmitBuffer@data:
  2644                           	opt stack 0
  2645  00007C                     ethernetController_writeEtherTypeFieldToBuffer@opcode:
  2646                           	opt stack 0
  2647  00007C                     ethernetController_getEtherTypeField@ethertype:
  2648                           	opt stack 0
  2649  00007C                     itoa@buf:
  2650                           	opt stack 0
  2651  00007C                     ltoa@val:
  2652                           	opt stack 0
  2653                           
  2654                           ; 4 bytes @ 0x1C
  2655  00007C                     	ds	1
  2656  00007D                     ethernetController_streamToTransmitBuffer@opcode:
  2657                           	opt stack 0
  2658  00007D                     enc424j600_readPHYRegister@lowByte:
  2659                           	opt stack 0
  2660  00007D                     arp_setNewEntry@oldestIndex:
  2661                           	opt stack 0
  2662  00007D                     tcp_calculateHeaderChecksum@carry:
  2663                           	opt stack 0
  2664  00007D                     icmp_parseHeader@icmpHeader:
  2665                           	opt stack 0
  2666  00007D                     tcp_parseHeader@header:
  2667                           	opt stack 0
  2668  00007D                     ethernetController_init@err:
  2669                           	opt stack 0
  2670                           
  2671                           ; 3 bytes @ 0x1D
  2672  00007D                     	ds	1
  2673  00007E                     ethernetController_getEtherTypeField@opcode:
  2674                           	opt stack 0
  2675  00007E                     enc424j600_readPHYRegister@highByte:
  2676                           	opt stack 0
  2677  00007E                     arp_setNewEntry@i:
  2678                           	opt stack 0
  2679  00007E                     ethernetController_pollInterruptFlags@flags:
  2680                           	opt stack 0
  2681  00007E                     _tcp_calculateHeaderChecksum$4947:
  2682                           	opt stack 0
  2683  00007E                     itoa@val:
  2684                           	opt stack 0
  2685  00007E                     ethernetController_writeDestinationMACAddress@data:
  2686                           	opt stack 0
  2687  00007E                     ipv4_streamToTransmissionBuffer@packet:
  2688                           	opt stack 0
  2689                           
  2690                           ; 66 bytes @ 0x1E
  2691  00007E                     	ds	1
  2692  00007F                     ??_icmp_parseHeader:
  2693  00007F                     ??_tcp_parseHeader:
  2694  00007F                     ethernetController_getSourceMACAddress@temp:
  2695                           	opt stack 0
  2696  00007F                     ethernetController_getEtherTypeField@lowByte:
  2697                           	opt stack 0
  2698  00007F                     enc424j600_readPHYRegister@temp:
  2699                           	opt stack 0
  2700                           
  2701                           ; 1 bytes @ 0x1F
  2702  00007F                     	ds	1
  2703  000080                     ethernetController_getSourceMACAddress@i:
  2704                           	opt stack 0
  2705  000080                     ethernetController_getEtherTypeField@highByte:
  2706                           	opt stack 0
  2707  000080                     ethernetController_pollInterruptFlags@reg:
  2708                           	opt stack 0
  2709  000080                     ethernetController_updateLinkStatus@state:
  2710                           	opt stack 0
  2711  000080                     _tcp_calculateHeaderChecksum$4948:
  2712                           	opt stack 0
  2713  000080                     itoa@base:
  2714                           	opt stack 0
  2715  000080                     ltoa@base:
  2716                           	opt stack 0
  2717                           
  2718                           ; 2 bytes @ 0x20
  2719  000080                     	ds	2
  2720  000082                     ethernetController_updateLinkStatus@temp:
  2721                           	opt stack 0
  2722  000082                     _tcp_calculateHeaderChecksum$4949:
  2723                           	opt stack 0
  2724  000082                     itoa@cp:
  2725                           	opt stack 0
  2726  000082                     ltoa@cp:
  2727                           	opt stack 0
  2728                           
  2729                           ; 2 bytes @ 0x22
  2730  000082                     	ds	1
  2731  000083                     ethernetController_updateLinkStatus@temp16:
  2732                           	opt stack 0
  2733                           
  2734                           ; 2 bytes @ 0x23
  2735  000083                     	ds	1
  2736  000084                     ?_intToString:
  2737                           	opt stack 0
  2738  000084                     ?_macToString:
  2739                           	opt stack 0
  2740  000084                     ?_ipAdressToString:
  2741                           	opt stack 0
  2742  000084                     ?_memory_txFrameRequest:
  2743                           	opt stack 0
  2744  000084                     ethernetController_writeDestinationMACAddress@opcode:
  2745                           	opt stack 0
  2746  000084                     tcp_parseHeader@temp:
  2747                           	opt stack 0
  2748  000084                     memory_txFrameRequest@length:
  2749                           	opt stack 0
  2750  000084                     _tcp_calculateHeaderChecksum$4950:
  2751                           	opt stack 0
  2752  000084                     intToString@val:
  2753                           	opt stack 0
  2754  000084                     ipAdressToString@ip:
  2755                           	opt stack 0
  2756  000084                     macToString@addr:
  2757                           	opt stack 0
  2758                           
  2759                           ; 6 bytes @ 0x24
  2760  000084                     	ds	1
  2761  000085                     ethernetController_writeDestinationMACAddress@i_640:
  2762                           	opt stack 0
  2763                           
  2764                           ; 1 bytes @ 0x25
  2765  000085                     	ds	1
  2766  000086                     ethernetController_writeDestinationMACAddress@i:
  2767                           	opt stack 0
  2768  000086                     _tcp_calculateHeaderChecksum$4951:
  2769                           	opt stack 0
  2770                           
  2771                           ; 2 bytes @ 0x26
  2772  000086                     	ds	2
  2773  000088                     ??_ipAdressToString:
  2774  000088                     intToString@b:
  2775                           	opt stack 0
  2776  000088                     _tcp_calculateHeaderChecksum$4952:
  2777                           	opt stack 0
  2778                           
  2779                           ; 2 bytes @ 0x28
  2780  000088                     	ds	1
  2781  000089                     ipAdressToString@j:
  2782                           	opt stack 0
  2783                           
  2784                           ; 1 bytes @ 0x29
  2785  000089                     	ds	1
  2786  00008A                     ??_macToString:
  2787  00008A                     ipAdressToString@pointer:
  2788                           	opt stack 0
  2789  00008A                     _tcp_calculateHeaderChecksum$4953:
  2790                           	opt stack 0
  2791                           
  2792                           ; 2 bytes @ 0x2A
  2793  00008A                     	ds	1
  2794  00008B                     ??_ipv4_parseHeader:
  2795  00008B                     macToString@i:
  2796                           	opt stack 0
  2797  00008B                     ipAdressToString@i:
  2798                           	opt stack 0
  2799                           
  2800                           ; 1 bytes @ 0x2B
  2801  00008B                     	ds	1
  2802  00008C                     macToString@j:
  2803                           	opt stack 0
  2804  00008C                     ipv4_parseHeader@i:
  2805                           	opt stack 0
  2806  00008C                     _tcp_calculateHeaderChecksum$4954:
  2807                           	opt stack 0
  2808                           
  2809                           ; 2 bytes @ 0x2C
  2810  00008C                     	ds	1
  2811  00008D                     ??_memory_txFrameRequest:
  2812  00008D                     ipv4_parseHeader@i_3860:
  2813                           	opt stack 0
  2814  00008D                     UARTTransmitText@str:
  2815                           	opt stack 0
  2816                           
  2817                           ; 2 bytes @ 0x2D
  2818  00008D                     	ds	1
  2819  00008E                     ipv4_parseHeader@temp:
  2820                           	opt stack 0
  2821  00008E                     tcp_calculateHeaderChecksum@sum:
  2822                           	opt stack 0
  2823                           
  2824                           ; 4 bytes @ 0x2E
  2825  00008E                     	ds	1
  2826  00008F                     UART_setFormat@color:
  2827                           	opt stack 0
  2828  00008F                     tcp_listen@connection:
  2829                           	opt stack 0
  2830  00008F                     printEthernetState@state:
  2831                           	opt stack 0
  2832  00008F                     ipv4_parseHeader@ip:
  2833                           	opt stack 0
  2834                           
  2835                           ; 23 bytes @ 0x2F
  2836  00008F                     	ds	2
  2837  000091                     ??_tcp_listen:
  2838                           
  2839                           ; 1 bytes @ 0x31
  2840  000091                     	ds	2
  2841  000093                     _memory_txFrameRequest$1173:
  2842                           	opt stack 0
  2843                           
  2844                           ; 2 bytes @ 0x33
  2845  000093                     	ds	1
  2846  000094                     ??_arp_parseFromRXBuffer:
  2847                           
  2848                           ; 1 bytes @ 0x34
  2849  000094                     	ds	1
  2850  000095                     memory_txFrameRequest@fNoOverlapMarker:
  2851                           	opt stack 0
  2852                           
  2853                           ; 1 bytes @ 0x35
  2854  000095                     	ds	1
  2855  000096                     memory_txFrameRequest@i:
  2856                           	opt stack 0
  2857                           
  2858                           ; 1 bytes @ 0x36
  2859  000096                     	ds	1
  2860  000097                     memory_txFrameRequest@i_1177:
  2861                           	opt stack 0
  2862  000097                     arp_parseFromRXBuffer@i:
  2863                           	opt stack 0
  2864                           
  2865                           ; 1 bytes @ 0x37
  2866  000097                     	ds	1
  2867  000098                     arp_parseFromRXBuffer@i_3225:
  2868                           	opt stack 0
  2869  000098                     memory_txFrameRequest@field:
  2870                           	opt stack 0
  2871                           
  2872                           ; 9 bytes @ 0x38
  2873  000098                     	ds	1
  2874  000099                     arp_parseFromRXBuffer@i_3226:
  2875                           	opt stack 0
  2876                           
  2877                           ; 1 bytes @ 0x39
  2878  000099                     	ds	1
  2879  00009A                     arp_parseFromRXBuffer@i_3227:
  2880                           	opt stack 0
  2881                           
  2882                           ; 1 bytes @ 0x3A
  2883  00009A                     	ds	1
  2884  00009B                     arp_parseFromRXBuffer@offset:
  2885                           	opt stack 0
  2886                           
  2887                           ; 2 bytes @ 0x3B
  2888  00009B                     	ds	2
  2889  00009D                     arp_parseFromRXBuffer@arp:
  2890                           	opt stack 0
  2891                           
  2892                           ; 32 bytes @ 0x3D
  2893  00009D                     	ds	1
  2894  00009E                     
  2895                           ; 1 bytes @ 0x3E
  2896  00009E                     	ds	3
  2897  0000A1                     memory_txFrameRequest@freeIndex:
  2898                           	opt stack 0
  2899                           
  2900                           ; 1 bytes @ 0x41
  2901  0000A1                     	ds	1
  2902  0000A2                     ethernet_txFrameRequest@frame:
  2903                           	opt stack 0
  2904                           
  2905                           ; 2 bytes @ 0x42
  2906  0000A2                     	ds	2
  2907  0000A4                     ethernet_txFrameRequest@err:
  2908                           	opt stack 0
  2909                           
  2910                           ; 3 bytes @ 0x44
  2911  0000A4                     	ds	3
  2912  0000A7                     ipv4_txFrameRequest@packet:
  2913                           	opt stack 0
  2914  0000A7                     arp_send@arp:
  2915                           	opt stack 0
  2916                           
  2917                           ; 32 bytes @ 0x47
  2918  0000A7                     	ds	2
  2919  0000A9                     ??_ipv4_txFrameRequest:
  2920                           
  2921                           ; 1 bytes @ 0x49
  2922  0000A9                     	ds	23
  2923  0000C0                     ipv4_streamToTransmissionBuffer@data:
  2924                           	opt stack 0
  2925                           
  2926                           ; 1 bytes @ 0x60
  2927  0000C0                     	ds	1
  2928  0000C1                     tcp_sendSYNACK@connection:
  2929                           	opt stack 0
  2930  0000C1                     udp_sendPacket@header:
  2931                           	opt stack 0
  2932  0000C1                     icmp_sendEchoReply@ipHeader:
  2933                           	opt stack 0
  2934                           
  2935                           ; 23 bytes @ 0x61
  2936  0000C1                     	ds	2
  2937  0000C3                     tcp_sendSYNACK@seq:
  2938                           	opt stack 0
  2939                           
  2940                           ; 4 bytes @ 0x63
  2941  0000C3                     	ds	4
  2942  0000C7                     ??_tcp_sendSYNACK:
  2943  0000C7                     arp_send@destination:
  2944                           	opt stack 0
  2945                           
  2946                           ; 6 bytes @ 0x67
  2947  0000C7                     	ds	2
  2948  0000C9                     udp_sendPacket@dst:
  2949                           	opt stack 0
  2950                           
  2951                           ; 4 bytes @ 0x69
  2952  0000C9                     	ds	2
  2953  0000CB                     tcp_stateMachine@connection:
  2954                           	opt stack 0
  2955                           
  2956                           ; 2 bytes @ 0x6B
  2957  0000CB                     	ds	2
  2958  0000CD                     ??_udp_sendPacket:
  2959  0000CD                     arp_send@i:
  2960                           	opt stack 0
  2961  0000CD                     tcp_stateMachine@newHeader:
  2962                           	opt stack 0
  2963                           
  2964                           ; 2 bytes @ 0x6D
  2965  0000CD                     	ds	1
  2966  0000CE                     arp_send@i_3300:
  2967                           	opt stack 0
  2968                           
  2969                           ; 1 bytes @ 0x6E
  2970  0000CE                     	ds	1
  2971  0000CF                     arp_send@i_3301:
  2972                           	opt stack 0
  2973  0000CF                     tcp_handleNewPacket@ipHeader:
  2974                           	opt stack 0
  2975                           
  2976                           ; 23 bytes @ 0x6F
  2977  0000CF                     	ds	1
  2978  0000D0                     arp_send@i_3302:
  2979                           	opt stack 0
  2980                           
  2981                           ; 1 bytes @ 0x70
  2982  0000D0                     	ds	1
  2983  0000D1                     arp_send@ethFrame:
  2984                           	opt stack 0
  2985                           
  2986                           ; 34 bytes @ 0x71
  2987  0000D1                     	ds	7
  2988  0000D8                     icmp_sendEchoReply@icmpRequestHeader:
  2989                           	opt stack 0
  2990                           
  2991                           ; 8 bytes @ 0x78
  2992  0000D8                     	ds	8
  2993  0000E0                     icmp_sendEchoReply@ipPayload:
  2994                           	opt stack 0
  2995                           
  2996                           ; 9 bytes @ 0x80
  2997  0000E0                     	ds	6
  2998  0000E6                     tcp_handleNewPacket@ipPayload:
  2999                           	opt stack 0
  3000                           
  3001                           ; 9 bytes @ 0x86
  3002  0000E6                     	ds	3
  3003  0000E9                     ??_icmp_sendEchoReply:
  3004                           
  3005                           ; 1 bytes @ 0x89
  3006  0000E9                     	ds	4
  3007  0000ED                     ??_icmp_handleNewPacket:
  3008                           
  3009                           ; 1 bytes @ 0x8D
  3010  0000ED                     	ds	2
  3011  0000EF                     
  3012                           ; 1 bytes @ 0x8F
  3013  0000EF                     	ds	2
  3014  0000F1                     ??_ipv4_handleNewPacket:
  3015                           
  3016                           ; 1 bytes @ 0x91
  3017  0000F1                     	ds	2
  3018  0000F3                     arp_send@field:
  3019                           	opt stack 0
  3020                           
  3021                           ; 9 bytes @ 0x93
  3022  0000F3                     	ds	9
  3023  0000FC                     arp_gratuitous@index:
  3024                           	opt stack 0
  3025  0000FC                     ipv4_sendFrame@index:
  3026                           	opt stack 0
  3027  0000FC                     arp_handleNewPacket@frame:
  3028                           	opt stack 0
  3029                           
  3030                           ; 2 bytes @ 0x9C
  3031  0000FC                     	ds	1
  3032  0000FD                     arp_gratuitous@err:
  3033                           	opt stack 0
  3034  0000FD                     ipv4_sendFrame@err:
  3035                           	opt stack 0
  3036                           
  3037                           ; 3 bytes @ 0x9D
  3038  0000FD                     	ds	1
  3039  0000FE                     
  3040                           ; 1 bytes @ 0x9E
  3041  0000FE                     	ds	2
  3042                           tblptru	equ	0xFF8
  3043                           tblptrh	equ	0xFF7
  3044                           tblptrl	equ	0xFF6
  3045                           tablat	equ	0xFF5
  3046                           postinc0	equ	0xFEE
  3047                           wreg	equ	0xFE8
  3048                           postdec1	equ	0xFE5
  3049                           fsr1l	equ	0xFE1
  3050                           
  3051                           	psect	cstackCOMRAM
  3052  000001                     __pcstackCOMRAM:
  3053                           	opt stack 0
  3054  000001                     ?i2___lwdiv:
  3055                           	opt stack 0
  3056  000001                     buttonHandler@state:
  3057                           	opt stack 0
  3058  000001                     i2___lwdiv@dividend:
  3059                           	opt stack 0
  3060                           
  3061                           ; 2 bytes @ 0x0
  3062  000001                     	ds	2
  3063  000003                     i2___lwdiv@divisor:
  3064                           	opt stack 0
  3065  000003                     buttonHandler@resetValue:
  3066                           	opt stack 0
  3067                           
  3068                           ; 4 bytes @ 0x2
  3069  000003                     	ds	2
  3070  000005                     i2___lwdiv@quotient:
  3071                           	opt stack 0
  3072                           
  3073                           ; 2 bytes @ 0x4
  3074  000005                     	ds	2
  3075  000007                     i2___lwdiv@counter:
  3076                           	opt stack 0
  3077  000007                     buttonHandler@debounceValue:
  3078                           	opt stack 0
  3079                           
  3080                           ; 4 bytes @ 0x6
  3081  000007                     	ds	1
  3082  000008                     parseNumber@numberToDisplay:
  3083                           	opt stack 0
  3084                           
  3085                           ; 2 bytes @ 0x7
  3086  000008                     	ds	2
  3087  00000A                     parseNumber@digit:
  3088                           	opt stack 0
  3089                           
  3090                           ; 1 bytes @ 0x9
  3091  00000A                     	ds	1
  3092  00000B                     ??_parseNumber:
  3093                           
  3094                           ; 1 bytes @ 0xA
  3095  00000B                     	ds	1
  3096  00000C                     parseNumber@ones:
  3097                           	opt stack 0
  3098                           
  3099                           ; 1 bytes @ 0xB
  3100  00000C                     	ds	1
  3101  00000D                     parseNumber@tens:
  3102                           	opt stack 0
  3103                           
  3104                           ; 1 bytes @ 0xC
  3105  00000D                     	ds	1
  3106  00000E                     parseNumber@hundreds:
  3107                           	opt stack 0
  3108                           
  3109                           ; 1 bytes @ 0xD
  3110  00000E                     	ds	1
  3111  00000F                     sevenSegmentUpdate@numberToDisplay:
  3112                           	opt stack 0
  3113                           
  3114                           ; 2 bytes @ 0xE
  3115  00000F                     	ds	2
  3116  000011                     ??_sevenSegmentUpdate:
  3117                           
  3118                           ; 1 bytes @ 0x10
  3119  000011                     	ds	2
  3120  000013                     _sevenSegmentUpdate$2676:
  3121                           	opt stack 0
  3122                           
  3123                           ; 2 bytes @ 0x12
  3124  000013                     	ds	2
  3125  000015                     sevenSegmentUpdate@i:
  3126                           	opt stack 0
  3127                           
  3128                           ; 1 bytes @ 0x14
  3129  000015                     	ds	1
  3130  000016                     ??_ISR:
  3131                           
  3132                           ; 1 bytes @ 0x15
  3133  000016                     	ds	18
  3134                           tblptru	equ	0xFF8
  3135                           tblptrh	equ	0xFF7
  3136                           tblptrl	equ	0xFF6
  3137                           tablat	equ	0xFF5
  3138                           postinc0	equ	0xFEE
  3139                           wreg	equ	0xFE8
  3140                           postdec1	equ	0xFE5
  3141                           fsr1l	equ	0xFE1
  3142                           
  3143 ;;
  3144 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  3145 ;;
  3146 ;; *************** function _main *****************
  3147 ;; Defined at:
  3148 ;;		line 39 in file "src/system/main.c"
  3149 ;; Parameters:    Size  Location     Type
  3150 ;;		None
  3151 ;; Auto vars:     Size  Location     Type
  3152 ;;  connection     17   21[BANK6 ] struct tcp_connection
  3153 ;;  udp             8    9[BANK6 ] struct udpHeader
  3154 ;;  ipDst           4   17[BANK6 ] struct ipv4_address
  3155 ;;  prescaler       4    0[BANK6 ] unsigned long 
  3156 ;;  err             3    6[BANK6 ] struct error
  3157 ;;  oldState        1    0        unsigned char 
  3158 ;; Return value:  Size  Location     Type
  3159 ;;                  1    wreg      void 
  3160 ;; Registers used:
  3161 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3162 ;; Tracked objects:
  3163 ;;		On entry : 0/0
  3164 ;;		On exit  : 0/0
  3165 ;;		Unchanged: 0/0
  3166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3167 ;;      Params:         0       0       0       0       0       0       0       0       0
  3168 ;;      Locals:         0       0       0       0       0       0       0      38       0
  3169 ;;      Temps:          0       0       2       0       0       0       0       0       0
  3170 ;;      Totals:         0       0       2       0       0       0       0      38       0
  3171 ;;Total ram usage:       40 bytes
  3172 ;; Hardware stack levels required when called:   16
  3173 ;; This function calls:
  3174 ;;		_UARTInit
  3175 ;;		_UARTTransmitText
  3176 ;;		_UART_resetFormat
  3177 ;;		_UART_setFormat
  3178 ;;		_UART_special
  3179 ;;		_ethernetController_checkDeviceId
  3180 ;;		_ethernetController_getDeviceName
  3181 ;;		_ethernetController_getMacAddress
  3182 ;;		_ethernetController_init
  3183 ;;		_ethernetController_setLEDConfig
  3184 ;;		_handleStackBackgroundTasks
  3185 ;;		_ipv4_generateAutoIP
  3186 ;;		_printErrorMessage
  3187 ;;		_printEthernetState
  3188 ;;		_rand
  3189 ;;		_sevenSegmentInit
  3190 ;;		_srand
  3191 ;;		_stack_init
  3192 ;;		_tcp_listen
  3193 ;;		_udp_sendPacket
  3194 ;; This function is called by:
  3195 ;;		Startup code after reset
  3196 ;; This function uses a non-reentrant model
  3197 ;;
  3198                           
  3199                           	psect	text0
  3200  00270A                     __ptext0:
  3201                           	opt stack 0
  3202  00270A                     _main:
  3203                           	opt stack 15
  3204                           
  3205                           ;main.c: 42: OSCCONbits.SCS = 0b00;
  3206                           
  3207                           ;incstack = 0
  3208  00270A  0EFC               	movlw	-4
  3209  00270C  16D3               	andwf	4051,f,c	;volatile
  3210                           
  3211                           ;main.c: 43: OSCCONbits.IRCF = 0b1110;
  3212  00270E  50D3               	movf	4051,w,c	;volatile
  3213  002710  0B8F               	andlw	-113
  3214  002712  0960               	iorlw	96
  3215  002714  6ED3               	movwf	4051,c	;volatile
  3216                           
  3217                           ;main.c: 44: OSCCON2bits.PLLEN = 0b1;
  3218  002716  88D2               	bsf	4050,4,c	;volatile
  3219                           
  3220                           ;main.c: 47: INTCONbits.GIE = 0;
  3221  002718  9EF2               	bcf	intcon,7,c	;volatile
  3222                           
  3223                           ;main.c: 48: INTCONbits.TMR0IE = 1;
  3224  00271A  8AF2               	bsf	intcon,5,c	;volatile
  3225                           
  3226                           ;main.c: 49: INTCON3bits.INT2IE = 1;
  3227  00271C  88F0               	bsf	intcon3,4,c	;volatile
  3228                           
  3229                           ;main.c: 50: RCIP = 0;
  3230  00271E  9A9F               	bcf	3999,5,c	;volatile
  3231                           
  3232                           ;main.c: 51: RCIE = 1;
  3233  002720  8A9D               	bsf	3997,5,c	;volatile
  3234                           
  3235                           ;main.c: 52: INTCONbits.PEIE = 1;
  3236  002722  8CF2               	bsf	intcon,6,c	;volatile
  3237                           
  3238                           ;main.c: 56: T0CONbits.TMR0ON = 1;
  3239  002724  8ED5               	bsf	4053,7,c	;volatile
  3240                           
  3241                           ;main.c: 57: T0CONbits.T08BIT = 1;
  3242  002726  8CD5               	bsf	4053,6,c	;volatile
  3243                           
  3244                           ;main.c: 58: T0CONbits.T0CS = 0;
  3245  002728  9AD5               	bcf	4053,5,c	;volatile
  3246                           
  3247                           ;main.c: 59: T0CONbits.PSA = 0;
  3248  00272A  96D5               	bcf	4053,3,c	;volatile
  3249                           
  3250                           ;main.c: 60: T0CONbits.T0PS = 0b101;
  3251  00272C  50D5               	movf	4053,w,c	;volatile
  3252  00272E  0BF8               	andlw	-8
  3253  002730  0905               	iorlw	5
  3254  002732  6ED5               	movwf	4053,c	;volatile
  3255                           
  3256                           ;main.c: 64: T1CONbits.TMR1ON = 1;
  3257  002734  80CD               	bsf	4045,0,c	;volatile
  3258                           
  3259                           ;main.c: 65: CCP1CONbits.CCP1M = 0b1011;
  3260  002736  50BD               	movf	4029,w,c	;volatile
  3261  002738  0BF0               	andlw	-16
  3262  00273A  090B               	iorlw	11
  3263  00273C  6EBD               	movwf	4029,c	;volatile
  3264                           
  3265                           ;main.c: 66: CCPR1 = 8000;
  3266  00273E  0E1F               	movlw	31
  3267  002740  6EBF               	movwf	4031,c	;volatile
  3268  002742  0E40               	movlw	64
  3269  002744  6EBE               	movwf	4030,c	;volatile
  3270                           
  3271                           ;main.c: 67: PIE1bits.CCP1IE = 1;
  3272  002746  849D               	bsf	3997,2,c	;volatile
  3273                           
  3274                           ;main.c: 68: INTCONbits.PEIE = 1;
  3275  002748  8CF2               	bsf	intcon,6,c	;volatile
  3276                           
  3277                           ;main.c: 70: TRISBbits.RB6 = 0;
  3278  00274A  9C93               	bcf	3987,6,c	;volatile
  3279                           
  3280                           ;main.c: 73: UARTInit();
  3281  00274C  EC19  F037         	call	_UARTInit	;wreg free
  3282                           
  3283                           ;main.c: 74: sevenSegmentInit();
  3284  002750  ECAB  F036         	call	_sevenSegmentInit	;wreg free
  3285                           
  3286                           ;main.c: 75: _delay((unsigned long)((10)*(32000000UL/4000.0)));
  3287  002754  0E68               	movlw	104
  3288  002756  0101               	movlb	1	; () banked
  3289  002758  6FF8               	movwf	??_main& (0+255),b
  3290  00275A  0EE4               	movlw	228
  3291  00275C                     u15827:
  3292  00275C  2EE8               	decfsz	wreg,f,c
  3293  00275E  D7FE               	bra	u15827
  3294  002760  2FF8               	decfsz	??_main& (0+255),f,b
  3295  002762  D7FC               	bra	u15827
  3296  002764  F000               	nop	
  3297                           
  3298                           ;main.c: 76: UARTTransmitText("\x12");
  3299  002766  0EFD               	movlw	low STR_45
  3300  002768  0100               	movlb	0	; () banked
  3301  00276A  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  3302  00276C  0E7F               	movlw	high STR_45
  3303  00276E  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3304  002770  EC36  F032         	call	_UARTTransmitText	;wreg free
  3305                           
  3306                           ;main.c: 77: if (!RCONbits.TO) {
  3307  002774  B6D0               	btfsc	4048,3,c	;volatile
  3308  002776  D025               	goto	l680
  3309                           
  3310                           ;main.c: 78: UART_setFormat(UART_COLOR_BG_RED);
  3311  002778  0E00               	movlw	0
  3312  00277A  EC8E  F02B         	call	_UART_setFormat
  3313                           
  3314                           ;main.c: 79: UARTTransmitText("\a\n\r");
  3315  00277E  0EEA               	movlw	low STR_17
  3316  002780  0100               	movlb	0	; () banked
  3317  002782  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  3318  002784  0E7F               	movlw	high STR_17
  3319  002786  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3320  002788  EC36  F032         	call	_UARTTransmitText	;wreg free
  3321                           
  3322                           ;main.c: 80: UARTTransmitText(UART_special(UART_LINE_SEPARATOR));
  3323  00278C  0E00               	movlw	0
  3324  00278E  EC8E  F036         	call	_UART_special
  3325  002792  C060  F08D         	movff	?_UART_special,UARTTransmitText@str
  3326  002796  C061  F08E         	movff	?_UART_special+1,UARTTransmitText@str+1
  3327  00279A  EC36  F032         	call	_UARTTransmitText	;wreg free
  3328                           
  3329                           ;main.c: 81: UARTTransmitText("\n\r*** CRITICAL ERROR: WATCHDOG CAUSED RESET ***\n\r");
  3330  00279E  0ED2               	movlw	low STR_47
  3331  0027A0  0100               	movlb	0	; () banked
  3332  0027A2  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  3333  0027A4  0E7C               	movlw	high STR_47
  3334  0027A6  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3335  0027A8  EC36  F032         	call	_UARTTransmitText	;wreg free
  3336                           
  3337                           ;main.c: 82: UARTTransmitText(UART_special(UART_LINE_SEPARATOR));
  3338  0027AC  0E00               	movlw	0
  3339  0027AE  EC8E  F036         	call	_UART_special
  3340  0027B2  C060  F08D         	movff	?_UART_special,UARTTransmitText@str
  3341  0027B6  C061  F08E         	movff	?_UART_special+1,UARTTransmitText@str+1
  3342  0027BA  EC36  F032         	call	_UARTTransmitText	;wreg free
  3343                           
  3344                           ;main.c: 83: UART_resetFormat();
  3345  0027BE  EC11  F037         	call	_UART_resetFormat	;wreg free
  3346  0027C2                     l680:
  3347                           
  3348                           ;main.c: 84: }
  3349                           ;main.c: 85: UARTTransmitText("\n\rFIRMWARE BUILD DATE IS ");
  3350  0027C2  0E9F               	movlw	low STR_48
  3351  0027C4  0100               	movlb	0	; () banked
  3352  0027C6  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  3353  0027C8  0E7D               	movlw	high STR_48
  3354  0027CA  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3355  0027CC  EC36  F032         	call	_UARTTransmitText	;wreg free
  3356                           
  3357                           ;main.c: 86: UARTTransmitText("May 04 2019");
  3358  0027D0  0E2A               	movlw	low STR_49
  3359  0027D2  0100               	movlb	0	; () banked
  3360  0027D4  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  3361  0027D6  0E7F               	movlw	high STR_49
  3362  0027D8  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3363  0027DA  EC36  F032         	call	_UARTTransmitText	;wreg free
  3364                           
  3365                           ;main.c: 87: UARTTransmitText(" ");
  3366  0027DE  0EEF               	movlw	low (STR_22+1)
  3367  0027E0  0100               	movlb	0	; () banked
  3368  0027E2  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  3369  0027E4  0E7F               	movlw	high (STR_22+1)
  3370  0027E6  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3371  0027E8  EC36  F032         	call	_UARTTransmitText	;wreg free
  3372                           
  3373                           ;main.c: 88: UARTTransmitText("15:35:04");
  3374  0027EC  0E6C               	movlw	low STR_51
  3375  0027EE  0100               	movlb	0	; () banked
  3376  0027F0  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  3377  0027F2  0E7F               	movlw	high STR_51
  3378  0027F4  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3379  0027F6  EC36  F032         	call	_UARTTransmitText	;wreg free
  3380                           
  3381                           ;main.c: 89: UARTTransmitText(".\n\r");
  3382  0027FA  0E25               	movlw	low (STR_27+33)
  3383  0027FC  0100               	movlb	0	; () banked
  3384  0027FE  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  3385  002800  0E7D               	movlw	high (STR_27+33)
  3386  002802  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3387  002804  EC36  F032         	call	_UARTTransmitText	;wreg free
  3388                           
  3389                           ;main.c: 90: error_t err;
  3390                           ;main.c: 91: err = ethernetController_init();
  3391  002808  EC8F  F02C         	call	_ethernetController_init	;wreg free
  3392  00280C  C07A  F606         	movff	?_ethernetController_init,main@err
  3393  002810  C07B  F607         	movff	?_ethernetController_init+1,main@err+1
  3394  002814  C07C  F608         	movff	?_ethernetController_init+2,main@err+2
  3395                           
  3396                           ;main.c: 92: if (err.code != (uint16_t)0)
  3397  002818  0106               	movlb	6	; () banked
  3398  00281A  5107               	movf	(main@err+1)& (0+255),w,b
  3399  00281C  1108               	iorwf	(main@err+2)& (0+255),w,b
  3400  00281E  B4D8               	btfsc	status,2,c
  3401  002820  D008               	goto	l681
  3402                           
  3403                           ; BSR set to: 6
  3404                           ;main.c: 93: printErrorMessage(err);
  3405  002822  C606  F060         	movff	main@err,printErrorMessage@err
  3406  002826  C607  F061         	movff	main@err+1,printErrorMessage@err+1
  3407  00282A  C608  F062         	movff	main@err+2,printErrorMessage@err+2
  3408  00282E  EC56  F037         	call	_printErrorMessage	;wreg free
  3409  002832                     l681:
  3410                           
  3411                           ;main.c: 94: err = ethernetController_checkDeviceId();
  3412  002832  EC06  F033         	call	_ethernetController_checkDeviceId	;wreg free
  3413  002836  C06E  F606         	movff	?_ethernetController_checkDeviceId,main@err
  3414  00283A  C06F  F607         	movff	?_ethernetController_checkDeviceId+1,main@err+1
  3415  00283E  C070  F608         	movff	?_ethernetController_checkDeviceId+2,main@err+2
  3416                           
  3417                           ;main.c: 95: if (err.code == (uint16_t)0) {
  3418  002842  0106               	movlb	6	; () banked
  3419  002844  5107               	movf	(main@err+1)& (0+255),w,b
  3420  002846  1108               	iorwf	(main@err+2)& (0+255),w,b
  3421  002848  A4D8               	btfss	status,2,c
  3422  00284A  D00F               	goto	l682
  3423                           
  3424                           ; BSR set to: 6
  3425                           ;main.c: 96: UARTTransmitText(ethernetController_getDeviceName());
  3426  00284C  EC5C  F036         	call	_ethernetController_getDeviceName	;wreg free
  3427  002850  C060  F08D         	movff	?_ethernetController_getDeviceName,UARTTransmitText@str
  3428  002854  C061  F08E         	movff	?_ethernetController_getDeviceName+1,UARTTransmitText@str+1
  3429  002858  EC36  F032         	call	_UARTTransmitText	;wreg free
  3430                           
  3431                           ;main.c: 97: UARTTransmitText(" detected. ");
  3432  00285C  0E1E               	movlw	low STR_53
  3433  00285E  0100               	movlb	0	; () banked
  3434  002860  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  3435  002862  0E7F               	movlw	high STR_53
  3436  002864  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3437  002866  EC36  F032         	call	_UARTTransmitText	;wreg free
  3438  00286A                     l682:
  3439                           
  3440                           ;main.c: 98: }
  3441                           ;main.c: 104: UARTTransmitText(UART_special(UART_LINE_SEPARATOR));
  3442  00286A  0E00               	movlw	0
  3443  00286C  EC8E  F036         	call	_UART_special
  3444  002870  C060  F08D         	movff	?_UART_special,UARTTransmitText@str
  3445  002874  C061  F08E         	movff	?_UART_special+1,UARTTransmitText@str+1
  3446  002878  EC36  F032         	call	_UARTTransmitText	;wreg free
  3447                           
  3448                           ;main.c: 105: UARTTransmitText("\n\r");
  3449  00287C  0EEB               	movlw	low (STR_17+1)
  3450  00287E  0100               	movlb	0	; () banked
  3451  002880  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  3452  002882  0E7F               	movlw	high (STR_17+1)
  3453  002884  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3454  002886  EC36  F032         	call	_UARTTransmitText	;wreg free
  3455                           
  3456                           ;main.c: 107: stack_init();
  3457  00288A  EC29  F037         	call	_stack_init	;wreg free
  3458                           
  3459                           ;main.c: 109: ethernetController_setLEDConfig(LEDA, LED_ON);
  3460  00288E  0E00               	movlw	0
  3461  002890  0100               	movlb	0	; () banked
  3462  002892  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  3463  002894  0E00               	movlw	0
  3464  002896  ECBF  F02D         	call	_ethernetController_setLEDConfig
  3465                           
  3466                           ;main.c: 110: ethernetController_setLEDConfig(LEDA, LED_ON);
  3467  00289A  0E00               	movlw	0
  3468  00289C  0100               	movlb	0	; () banked
  3469  00289E  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  3470  0028A0  0E00               	movlw	0
  3471  0028A2  ECBF  F02D         	call	_ethernetController_setLEDConfig
  3472                           
  3473                           ;main.c: 111: _delay((unsigned long)((500)*(32000000UL/4000.0)));
  3474  0028A6  0E15               	movlw	21
  3475  0028A8  0101               	movlb	1	; () banked
  3476  0028AA  6FF9               	movwf	(??_main+1)& (0+255),b
  3477  0028AC  0E4B               	movlw	75
  3478  0028AE  6FF8               	movwf	??_main& (0+255),b
  3479  0028B0  0EBE               	movlw	190
  3480  0028B2                     u15837:
  3481  0028B2  2EE8               	decfsz	wreg,f,c
  3482  0028B4  D7FE               	bra	u15837
  3483  0028B6  2FF8               	decfsz	??_main& (0+255),f,b
  3484  0028B8  D7FC               	bra	u15837
  3485  0028BA  2FF9               	decfsz	(??_main+1)& (0+255),f,b
  3486  0028BC  D7FA               	bra	u15837
  3487  0028BE  F000               	nop	
  3488                           
  3489                           ;main.c: 113: ethernetController_setLEDConfig(LEDA, LED_OFF);
  3490  0028C0  0E01               	movlw	1
  3491  0028C2  0100               	movlb	0	; () banked
  3492  0028C4  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  3493  0028C6  0E00               	movlw	0
  3494  0028C8  ECBF  F02D         	call	_ethernetController_setLEDConfig
  3495                           
  3496                           ;main.c: 114: ethernetController_setLEDConfig(LEDA, LED_OFF);
  3497  0028CC  0E01               	movlw	1
  3498  0028CE  0100               	movlb	0	; () banked
  3499  0028D0  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  3500  0028D2  0E00               	movlw	0
  3501  0028D4  ECBF  F02D         	call	_ethernetController_setLEDConfig
  3502                           
  3503                           ;main.c: 117: uint32_t prescaler = 0;
  3504  0028D8  0E00               	movlw	0
  3505  0028DA  0106               	movlb	6	; () banked
  3506  0028DC  6F00               	movwf	main@prescaler& (0+255),b
  3507  0028DE  0E00               	movlw	0
  3508  0028E0  6F01               	movwf	(main@prescaler+1)& (0+255),b
  3509  0028E2  0E00               	movlw	0
  3510  0028E4  6F02               	movwf	(main@prescaler+2)& (0+255),b
  3511  0028E6  0E00               	movlw	0
  3512  0028E8  6F03               	movwf	(main@prescaler+3)& (0+255),b
  3513                           
  3514                           ; BSR set to: 6
  3515                           ;main.c: 119: ANSELB &= ~(1<<5);
  3516  0028EA  010F               	movlb	15	; () banked
  3517  0028EC  9B5C               	bcf	92,5,b	;volatile
  3518                           
  3519                           ; BSR set to: 15
  3520                           ;main.c: 120: TRISB |= (1<<5);
  3521  0028EE  8A93               	bsf	3987,5,c	;volatile
  3522                           
  3523                           ; BSR set to: 15
  3524                           ;main.c: 122: uint8_t oldState;
  3525                           ;main.c: 124: ipv4_address_t ipDst;
  3526                           ;main.c: 125: ipDst.address[0] = 169;
  3527  0028F0  0EA9               	movlw	169
  3528  0028F2  0106               	movlb	6	; () banked
  3529  0028F4  6F11               	movwf	main@ipDst& (0+255),b
  3530                           
  3531                           ; BSR set to: 6
  3532                           ;main.c: 126: ipDst.address[1] = 254;
  3533  0028F6  0EFE               	movlw	254
  3534  0028F8  6F12               	movwf	(main@ipDst+1)& (0+255),b
  3535                           
  3536                           ; BSR set to: 6
  3537                           ;main.c: 127: ipDst.address[2] = 108;
  3538  0028FA  0E6C               	movlw	108
  3539  0028FC  6F13               	movwf	(main@ipDst+2)& (0+255),b
  3540                           
  3541                           ; BSR set to: 6
  3542                           ;main.c: 128: ipDst.address[3] = 135;
  3543  0028FE  0E87               	movlw	135
  3544  002900  6F14               	movwf	(main@ipDst+3)& (0+255),b
  3545                           
  3546                           ; BSR set to: 6
  3547                           ;main.c: 131: INTCONbits.GIE = 1;
  3548  002902  8EF2               	bsf	intcon,7,c	;volatile
  3549                           
  3550                           ; BSR set to: 6
  3551                           ;main.c: 132: INTCONbits.PEIE = 1;
  3552  002904  8CF2               	bsf	intcon,6,c	;volatile
  3553                           
  3554                           ; BSR set to: 6
  3555                           ;main.c: 134: srand(ethernetController_getMacAddress().address[5]);
  3556  002906  EC04  F030         	call	_ethernetController_getMacAddress	;wreg free
  3557  00290A  0E05               	movlw	5
  3558  00290C  26E9               	addwf	fsr0l,f,c
  3559  00290E  0E00               	movlw	0
  3560  002910  22EA               	addwfc	fsr0h,f,c
  3561  002912  50EF               	movf	indf0,w,c
  3562  002914  0101               	movlb	1	; () banked
  3563  002916  6FF8               	movwf	??_main& (0+255),b
  3564  002918  51F8               	movf	??_main& (0+255),w,b
  3565  00291A  0100               	movlb	0	; () banked
  3566  00291C  6F7A               	movwf	srand@x& (0+255),b
  3567  00291E  6B7B               	clrf	(srand@x+1)& (0+255),b
  3568  002920  EC09  F037         	call	_srand	;wreg free
  3569                           
  3570                           ;main.c: 135: stack.source = ipv4_generateAutoIP();
  3571  002924  EC7A  F033         	call	_ipv4_generateAutoIP	;wreg free
  3572  002928  C074  F477         	movff	?_ipv4_generateAutoIP,_stack+119
  3573  00292C  C075  F478         	movff	?_ipv4_generateAutoIP+1,_stack+120
  3574  002930  C076  F479         	movff	?_ipv4_generateAutoIP+2,_stack+121
  3575  002934  C077  F47A         	movff	?_ipv4_generateAutoIP+3,_stack+122
  3576                           
  3577                           ;main.c: 137: tcp_connection_t connection;
  3578                           ;main.c: 138: connection.srcPort = 1;
  3579  002938  0E00               	movlw	0
  3580  00293A  0106               	movlb	6	; () banked
  3581  00293C  6F1E               	movwf	(main@connection+9)& (0+255),b
  3582  00293E  0E01               	movlw	1
  3583  002940  6F1D               	movwf	(main@connection+8)& (0+255),b
  3584                           
  3585                           ; BSR set to: 6
  3586                           ;main.c: 139: connection.seqNumber = (unsigned) rand();
  3587  002942  ECB1  F031         	call	_rand	;wreg free
  3588  002946  0100               	movlb	0	; () banked
  3589  002948  C06C  F621         	movff	?_rand,main@connection+12
  3590  00294C  C06D  F622         	movff	?_rand+1,main@connection+13
  3591  002950  0106               	movlb	6	; () banked
  3592  002952  6B23               	clrf	(main@connection+14)& (0+255),b
  3593  002954  6B24               	clrf	(main@connection+15)& (0+255),b
  3594                           
  3595                           ; BSR set to: 6
  3596                           ;main.c: 140: tcp_listen(&connection);
  3597  002956  0E15               	movlw	low main@connection
  3598  002958  0100               	movlb	0	; () banked
  3599  00295A  6F8F               	movwf	tcp_listen@connection& (0+255),b
  3600  00295C  0E06               	movlw	high main@connection
  3601  00295E  6F90               	movwf	(tcp_listen@connection+1)& (0+255),b
  3602  002960  ECC9  F026         	call	_tcp_listen	;wreg free
  3603                           
  3604                           ;main.c: 142: udpHeader_t udp;
  3605                           ;main.c: 143: udp.srcPort = 1;
  3606  002964  0E00               	movlw	0
  3607  002966  0106               	movlb	6	; () banked
  3608  002968  6F0A               	movwf	(main@udp+1)& (0+255),b
  3609  00296A  0E01               	movlw	1
  3610  00296C  6F09               	movwf	main@udp& (0+255),b
  3611                           
  3612                           ; BSR set to: 6
  3613                           ;main.c: 144: udp.dstPort = 49666;
  3614  00296E  0EC2               	movlw	194
  3615  002970  6F0C               	movwf	(main@udp+3)& (0+255),b
  3616  002972  0E02               	movlw	2
  3617  002974  6F0B               	movwf	(main@udp+2)& (0+255),b
  3618                           
  3619                           ; BSR set to: 6
  3620                           ;main.c: 145: udp.length = 100 + 8;
  3621  002976  0E00               	movlw	0
  3622  002978  6F0E               	movwf	(main@udp+5)& (0+255),b
  3623  00297A  0E6C               	movlw	108
  3624  00297C  6F0D               	movwf	(main@udp+4)& (0+255),b
  3625  00297E                     l683:
  3626  00297E  0004               	clrwdt		;# 
  3627                           
  3628                           ;main.c: 153: handleStackBackgroundTasks(&stack);
  3629  002980  0E00               	movlw	low _stack
  3630  002982  0101               	movlb	1	; () banked
  3631  002984  6FEC               	movwf	handleStackBackgroundTasks@stack& (0+255),b
  3632  002986  0E04               	movlw	high _stack
  3633  002988  6FED               	movwf	(handleStackBackgroundTasks@stack+1)& (0+255),b
  3634  00298A  EC10  F003         	call	_handleStackBackgroundTasks	;wreg free
  3635                           
  3636                           ;main.c: 155: printEthernetState(stack.ethernet);
  3637  00298E  EE24  F022         	lfsr	2,_stack+34
  3638  002992  EE00  F08F         	lfsr	0,printEthernetState@state
  3639  002996  0E0E               	movlw	14
  3640  002998                     u15611:
  3641  002998  CFDB FFEB          	movff	plusw2,plusw0
  3642  00299C  06E8               	decf	wreg,f,c
  3643  00299E  E2FC               	bc	u15611
  3644  0029A0  EC0B  F032         	call	_printEthernetState	;wreg free
  3645                           
  3646                           ;main.c: 156: numberToDisplay = (stack.ethernet.link == NO_LINK) ? 1000u : foo;
  3647  0029A4  0104               	movlb	4	; () banked
  3648  0029A6  5122               	movf	(_stack+34)& (0+255),w,b
  3649  0029A8  B4D8               	btfsc	status,2,c
  3650  0029AA  D005               	goto	l685
  3651                           
  3652                           ; BSR set to: 4
  3653  0029AC  C2CF  F604         	movff	_foo,_main$2607
  3654  0029B0  0106               	movlb	6	; () banked
  3655  0029B2  6B05               	clrf	(_main$2607+1)& (0+255),b
  3656  0029B4  D005               	goto	l687
  3657  0029B6                     l685:
  3658                           
  3659                           ; BSR set to: 6
  3660  0029B6  0E03               	movlw	3
  3661  0029B8  0106               	movlb	6	; () banked
  3662  0029BA  6F05               	movwf	(_main$2607+1)& (0+255),b
  3663  0029BC  0EE8               	movlw	232
  3664  0029BE  6F04               	movwf	_main$2607& (0+255),b
  3665  0029C0                     l687:
  3666                           
  3667                           ; BSR set to: 6
  3668                           
  3669                           ; BSR set to: 6
  3670  0029C0  C604  F030         	movff	_main$2607,_numberToDisplay	;volatile
  3671  0029C4  C605  F031         	movff	_main$2607+1,_numberToDisplay+1	;volatile
  3672  0029C8  6A32               	clrf	_numberToDisplay+2,c	;volatile
  3673  0029CA  6A33               	clrf	_numberToDisplay+3,c	;volatile
  3674                           
  3675                           ; BSR set to: 6
  3676                           ;main.c: 160: if (unlocked) {
  3677  0029CC  A44E               	btfss	_unlocked/(0+8),_unlocked& (0+7),c
  3678  0029CE  D01C               	goto	l689
  3679                           
  3680                           ; BSR set to: 6
  3681                           ;main.c: 161: if (stack.ethernet.link == LINK_ESTABLISHED && !stack.background.fPacketPe
      +                          nding) {
  3682  0029D0  0104               	movlb	4	; () banked
  3683  0029D2  0522               	decf	(_stack+34)& (0+255),w,b
  3684  0029D4  A4D8               	btfss	status,2,c
  3685  0029D6  D018               	goto	l689
  3686                           
  3687                           ; BSR set to: 4
  3688  0029D8  5134               	movf	(_stack+52)& (0+255),w,b
  3689  0029DA  A4D8               	btfss	status,2,c
  3690  0029DC  D015               	goto	l689
  3691                           
  3692                           ; BSR set to: 4
  3693                           ;main.c: 162: foo++;
  3694  0029DE  0102               	movlb	2	; () banked
  3695  0029E0  2BCF               	incf	_foo& (0+255),f,b
  3696                           
  3697                           ; BSR set to: 2
  3698                           ;main.c: 163: udp_sendPacket(udp, ipDst);
  3699  0029E2  EE26  F009         	lfsr	2,main@udp
  3700  0029E6  EE00  F0C1         	lfsr	0,udp_sendPacket@header
  3701  0029EA  0E07               	movlw	7
  3702  0029EC                     u15661:
  3703  0029EC  CFDB FFEB          	movff	plusw2,plusw0
  3704  0029F0  06E8               	decf	wreg,f,c
  3705  0029F2  E2FC               	bc	u15661
  3706  0029F4  C611  F0C9         	movff	main@ipDst,udp_sendPacket@dst
  3707  0029F8  C612  F0CA         	movff	main@ipDst+1,udp_sendPacket@dst+1
  3708  0029FC  C613  F0CB         	movff	main@ipDst+2,udp_sendPacket@dst+2
  3709  002A00  C614  F0CC         	movff	main@ipDst+3,udp_sendPacket@dst+3
  3710  002A04  EC1B  F01D         	call	_udp_sendPacket	;wreg free
  3711  002A08                     l689:
  3712                           
  3713                           ;main.c: 164: }
  3714                           ;main.c: 165: }
  3715                           ;main.c: 168: if (buttonState) {
  3716  002A08  0102               	movlb	2	; () banked
  3717  002A0A  51E7               	movf	_buttonState& (0+255),w,b	;volatile
  3718  002A0C  B4D8               	btfsc	status,2,c
  3719  002A0E  D7B7               	goto	l683
  3720                           
  3721                           ; BSR set to: 2
  3722                           ;main.c: 169: buttonState = 0;
  3723  002A10  0E00               	movlw	0
  3724  002A12  6FE7               	movwf	_buttonState& (0+255),b	;volatile
  3725                           
  3726                           ;main.c: 170: foo = 0;
  3727  002A14  0E00               	movlw	0
  3728  002A16  6FCF               	movwf	_foo& (0+255),b
  3729                           
  3730                           ; BSR set to: 2
  3731                           ;main.c: 171: unlocked = !unlocked;
  3732  002A18  B44E               	btfsc	_unlocked/(0+8),_unlocked& (0+7),c
  3733  002A1A  D002               	goto	u15680
  3734  002A1C  844E               	bsf	_unlocked/(0+8),_unlocked& (0+7),c
  3735  002A1E  D7AF               	goto	l683
  3736  002A20                     u15680:
  3737  002A20  944E               	bcf	_unlocked/(0+8),_unlocked& (0+7),c
  3738  002A22  D7AD               	goto	l683
  3739  002A24                     __end_of_main:
  3740                           	opt stack 0
  3741                           tblptru	equ	0xFF8
  3742                           tblptrh	equ	0xFF7
  3743                           tblptrl	equ	0xFF6
  3744                           tablat	equ	0xFF5
  3745                           intcon	equ	0xFF2
  3746                           intcon3	equ	0xFF0
  3747                           indf0	equ	0xFEF
  3748                           postinc0	equ	0xFEE
  3749                           plusw0	equ	0xFEB
  3750                           fsr0h	equ	0xFEA
  3751                           fsr0l	equ	0xFE9
  3752                           wreg	equ	0xFE8
  3753                           postdec1	equ	0xFE5
  3754                           fsr1l	equ	0xFE1
  3755                           plusw2	equ	0xFDB
  3756                           status	equ	0xFD8
  3757                           
  3758 ;; *************** function _udp_sendPacket *****************
  3759 ;; Defined at:
  3760 ;;		line 29 in file "src/stack/protocols/udp.c"
  3761 ;; Parameters:    Size  Location     Type
  3762 ;;  header          8   97[BANK0 ] struct udpHeader
  3763 ;;  dst             4  105[BANK0 ] struct ipv4_address
  3764 ;; Auto vars:     Size  Location     Type
  3765 ;;  i               2   98[BANK1 ] unsigned int 
  3766 ;;  ipPacket       66  100[BANK1 ] struct ipv4_packet
  3767 ;;  headerBuf      64    0[BANK1 ] unsigned char [64]
  3768 ;;  ipHeaderBuf    32   64[BANK1 ] unsigned char [32]
  3769 ;;  foo             2   96[BANK1 ] unsigned int 
  3770 ;; Return value:  Size  Location     Type
  3771 ;;                  3   97[BANK0 ] struct error
  3772 ;; Registers used:
  3773 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3774 ;; Tracked objects:
  3775 ;;		On entry : 0/0
  3776 ;;		On exit  : 0/0
  3777 ;;		Unchanged: 0/0
  3778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3779 ;;      Params:         0      12       0       0       0       0       0       0       0
  3780 ;;      Locals:         0       0     166       0       0       0       0       0       0
  3781 ;;      Temps:          0       2       0       0       0       0       0       0       0
  3782 ;;      Totals:         0      14     166       0       0       0       0       0       0
  3783 ;;Total ram usage:      180 bytes
  3784 ;; Hardware stack levels used:    1
  3785 ;; Hardware stack levels required when called:   10
  3786 ;; This function calls:
  3787 ;;		_ipv4_calculateHeaderChecksum
  3788 ;;		_ipv4_getIPSourceAddress
  3789 ;;		_ipv4_streamToTransmissionBuffer
  3790 ;;		_ipv4_txFrameRequest
  3791 ;;		_ipv4_writeHeaderIntoBuffer
  3792 ;; This function is called by:
  3793 ;;		_main
  3794 ;; This function uses a non-reentrant model
  3795 ;;
  3796                           
  3797                           	psect	text1
  3798  003A36                     __ptext1:
  3799                           	opt stack 0
  3800  003A36                     _udp_sendPacket:
  3801                           	opt stack 20
  3802                           
  3803                           ;udp.c: 30: uint8_t headerBuf[64];
  3804                           ;udp.c: 31: uint8_t ipHeaderBuf[32];
  3805                           ;udp.c: 33: uint8_t static start=0;
  3806                           ;udp.c: 35: ipv4_packet_t ipPacket;
  3807                           ;udp.c: 36: ipPacket.ipv4Header.headerLength = 5;
  3808                           
  3809                           ;incstack = 0
  3810  003A36  0E05               	movlw	5
  3811  003A38  0101               	movlb	1	; () banked
  3812  003A3A  6F65               	movwf	(udp_sendPacket@ipPacket+1)& (0+255),b
  3813                           
  3814                           ;udp.c: 37: ipPacket.ipv4Header.dscp = 0x00;
  3815  003A3C  0E00               	movlw	0
  3816  003A3E  6F66               	movwf	(udp_sendPacket@ipPacket+2)& (0+255),b
  3817                           
  3818                           ;udp.c: 38: ipPacket.ipv4Header.ecn = 0x00;
  3819  003A40  0E00               	movlw	0
  3820  003A42  6F67               	movwf	(udp_sendPacket@ipPacket+3)& (0+255),b
  3821                           
  3822                           ;udp.c: 39: ipPacket.ipv4Header.flags = 0x00;
  3823  003A44  0E00               	movlw	0
  3824  003A46  6F6C               	movwf	(udp_sendPacket@ipPacket+8)& (0+255),b
  3825                           
  3826                           ;udp.c: 40: ipPacket.ipv4Header.fragmentOffset = 0x0000;
  3827  003A48  0E00               	movlw	0
  3828  003A4A  6F6E               	movwf	(udp_sendPacket@ipPacket+10)& (0+255),b
  3829  003A4C  0E00               	movlw	0
  3830  003A4E  6F6D               	movwf	(udp_sendPacket@ipPacket+9)& (0+255),b
  3831                           
  3832                           ;udp.c: 41: ipPacket.ipv4Header.protocol = IPv4_PROTOCOL_UDP;
  3833  003A50  0E11               	movlw	17
  3834  003A52  6F70               	movwf	(udp_sendPacket@ipPacket+12)& (0+255),b
  3835                           
  3836                           ; BSR set to: 1
  3837                           ;udp.c: 42: ipPacket.ipv4Header.destination = dst;
  3838  003A54  C0C9  F177         	movff	udp_sendPacket@dst,udp_sendPacket@ipPacket+19
  3839  003A58  C0CA  F178         	movff	udp_sendPacket@dst+1,udp_sendPacket@ipPacket+20
  3840  003A5C  C0CB  F179         	movff	udp_sendPacket@dst+2,udp_sendPacket@ipPacket+21
  3841  003A60  C0CC  F17A         	movff	udp_sendPacket@dst+3,udp_sendPacket@ipPacket+22
  3842                           
  3843                           ; BSR set to: 1
  3844                           ;udp.c: 43: ipPacket.ipv4Header.source = ipv4_getIPSourceAddress();
  3845  003A64  ECE5  F036         	call	_ipv4_getIPSourceAddress	;wreg free
  3846  003A68  C060  F173         	movff	?_ipv4_getIPSourceAddress,udp_sendPacket@ipPacket+15
  3847  003A6C  C061  F174         	movff	?_ipv4_getIPSourceAddress+1,udp_sendPacket@ipPacket+16
  3848  003A70  C062  F175         	movff	?_ipv4_getIPSourceAddress+2,udp_sendPacket@ipPacket+17
  3849  003A74  C063  F176         	movff	?_ipv4_getIPSourceAddress+3,udp_sendPacket@ipPacket+18
  3850                           
  3851                           ;udp.c: 44: ipPacket.ipv4Header.totalLength = header.length + 20;
  3852  003A78  0E14               	movlw	20
  3853  003A7A  0100               	movlb	0	; () banked
  3854  003A7C  25C5               	addwf	(udp_sendPacket@header+4)& (0+255),w,b
  3855  003A7E  0101               	movlb	1	; () banked
  3856  003A80  6F68               	movwf	(udp_sendPacket@ipPacket+4)& (0+255),b
  3857  003A82  0E00               	movlw	0
  3858  003A84  0100               	movlb	0	; () banked
  3859  003A86  21C6               	addwfc	(udp_sendPacket@header+5)& (0+255),w,b
  3860  003A88  0101               	movlb	1	; () banked
  3861  003A8A  6F69               	movwf	(udp_sendPacket@ipPacket+5)& (0+255),b
  3862                           
  3863                           ; BSR set to: 1
  3864                           ;udp.c: 45: ipPacket.ipv4Header.timeToLive = 255;
  3865  003A8C  696F               	setf	(udp_sendPacket@ipPacket+11)& (0+255),b
  3866                           
  3867                           ; BSR set to: 1
  3868                           ;udp.c: 46: ipPacket.ipv4Header.version = 4;
  3869  003A8E  0E04               	movlw	4
  3870  003A90  6F64               	movwf	udp_sendPacket@ipPacket& (0+255),b
  3871                           
  3872                           ; BSR set to: 1
  3873                           ;udp.c: 48: ipv4_calculateHeaderChecksum(&ipPacket.ipv4Header);
  3874  003A92  0E64               	movlw	low udp_sendPacket@ipPacket
  3875  003A94  0100               	movlb	0	; () banked
  3876  003A96  6F60               	movwf	ipv4_calculateHeaderChecksum@header& (0+255),b
  3877  003A98  0E01               	movlw	high udp_sendPacket@ipPacket
  3878  003A9A  6F61               	movwf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),b
  3879  003A9C  EC65  F010         	call	_ipv4_calculateHeaderChecksum	;wreg free
  3880                           
  3881                           ;udp.c: 49: ipv4_writeHeaderIntoBuffer(ipPacket.ipv4Header, &ipHeaderBuf);
  3882  003AA0  EE21  F064         	lfsr	2,udp_sendPacket@ipPacket
  3883  003AA4  EE00  F060         	lfsr	0,ipv4_writeHeaderIntoBuffer@header
  3884  003AA8  0E16               	movlw	22
  3885  003AAA                     u15461:
  3886  003AAA  CFDB FFEB          	movff	plusw2,plusw0
  3887  003AAE  06E8               	decf	wreg,f,c
  3888  003AB0  E2FC               	bc	u15461
  3889  003AB2  0E40               	movlw	low udp_sendPacket@ipHeaderBuf
  3890  003AB4  0100               	movlb	0	; () banked
  3891  003AB6  6F77               	movwf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),b
  3892  003AB8  0E01               	movlw	high udp_sendPacket@ipHeaderBuf
  3893  003ABA  6F78               	movwf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),b
  3894  003ABC  EC9D  F01F         	call	_ipv4_writeHeaderIntoBuffer	;wreg free
  3895                           
  3896                           ;udp.c: 51: ipv4_txFrameRequest(&ipPacket);
  3897  003AC0  0E64               	movlw	low udp_sendPacket@ipPacket
  3898  003AC2  0100               	movlb	0	; () banked
  3899  003AC4  6FA7               	movwf	ipv4_txFrameRequest@packet& (0+255),b
  3900  003AC6  0E01               	movlw	high udp_sendPacket@ipPacket
  3901  003AC8  6FA8               	movwf	(ipv4_txFrameRequest@packet+1)& (0+255),b
  3902  003ACA  EC41  F022         	call	_ipv4_txFrameRequest	;wreg free
  3903                           
  3904                           ;udp.c: 54: header.checksum = 0x0000;
  3905  003ACE  0E00               	movlw	0
  3906  003AD0  0100               	movlb	0	; () banked
  3907  003AD2  6FC8               	movwf	(udp_sendPacket@header+7)& (0+255),b
  3908  003AD4  0E00               	movlw	0
  3909  003AD6  6FC7               	movwf	(udp_sendPacket@header+6)& (0+255),b
  3910                           
  3911                           ; BSR set to: 0
  3912                           ;udp.c: 56: headerBuf[0] = (header.srcPort & 0xff00) >> 8;
  3913  003AD8  51C2               	movf	(udp_sendPacket@header+1)& (0+255),w,b
  3914  003ADA  0101               	movlb	1	; () banked
  3915  003ADC  6F00               	movwf	udp_sendPacket@headerBuf& (0+255),b
  3916                           
  3917                           ; BSR set to: 1
  3918                           ;udp.c: 57: headerBuf[1] = (header.srcPort & 0x00ff);
  3919  003ADE  C0C1  F101         	movff	udp_sendPacket@header,udp_sendPacket@headerBuf+1
  3920                           
  3921                           ; BSR set to: 1
  3922                           ;udp.c: 58: headerBuf[2] = (header.dstPort & 0xff00) >> 8;
  3923  003AE2  0100               	movlb	0	; () banked
  3924  003AE4  51C4               	movf	(udp_sendPacket@header+3)& (0+255),w,b
  3925  003AE6  0101               	movlb	1	; () banked
  3926  003AE8  6F02               	movwf	(udp_sendPacket@headerBuf+2)& (0+255),b
  3927                           
  3928                           ; BSR set to: 1
  3929                           ;udp.c: 59: headerBuf[3] = (header.dstPort & 0x00ff);
  3930  003AEA  C0C3  F103         	movff	udp_sendPacket@header+2,udp_sendPacket@headerBuf+3
  3931                           
  3932                           ; BSR set to: 1
  3933                           ;udp.c: 60: headerBuf[4] = (header.length & 0xff00) >> 8;
  3934  003AEE  0100               	movlb	0	; () banked
  3935  003AF0  51C6               	movf	(udp_sendPacket@header+5)& (0+255),w,b
  3936  003AF2  0101               	movlb	1	; () banked
  3937  003AF4  6F04               	movwf	(udp_sendPacket@headerBuf+4)& (0+255),b
  3938                           
  3939                           ; BSR set to: 1
  3940                           ;udp.c: 61: headerBuf[5] = (header.length & 0x00ff);
  3941  003AF6  C0C5  F105         	movff	udp_sendPacket@header+4,udp_sendPacket@headerBuf+5
  3942                           
  3943                           ; BSR set to: 1
  3944                           ;udp.c: 62: headerBuf[6] = (header.checksum & 0xff00) >> 8;
  3945  003AFA  0100               	movlb	0	; () banked
  3946  003AFC  51C8               	movf	(udp_sendPacket@header+7)& (0+255),w,b
  3947  003AFE  0101               	movlb	1	; () banked
  3948  003B00  6F06               	movwf	(udp_sendPacket@headerBuf+6)& (0+255),b
  3949                           
  3950                           ; BSR set to: 1
  3951                           ;udp.c: 63: headerBuf[7] = (header.checksum & 0x00ff);
  3952  003B02  C0C7  F107         	movff	udp_sendPacket@header+6,udp_sendPacket@headerBuf+7
  3953                           
  3954                           ; BSR set to: 1
  3955                           ;udp.c: 66: uint16_t foo = start++;
  3956  003B06  C03C  F160         	movff	udp_sendPacket@start,udp_sendPacket@foo
  3957  003B0A  6B61               	clrf	(udp_sendPacket@foo+1)& (0+255),b
  3958                           
  3959                           ; BSR set to: 1
  3960  003B0C  2A3C               	incf	udp_sendPacket@start,f,c
  3961                           
  3962                           ; BSR set to: 1
  3963                           ;udp.c: 67: for (uint16_t i = 0; i < ipPacket.ipv4Header.totalLength; i++) {
  3964  003B0E  0E00               	movlw	0
  3965  003B10  6F63               	movwf	(udp_sendPacket@i+1)& (0+255),b
  3966  003B12  0E00               	movlw	0
  3967  003B14  6F62               	movwf	udp_sendPacket@i& (0+255),b
  3968  003B16  D063               	goto	l1477
  3969  003B18                     
  3970                           ; BSR set to: 1
  3971                           ;udp.c: 68: if (i < ipPacket.ipv4Header.headerLength * 4) {
  3972                           
  3973                           ; BSR set to: 1
  3974  003B18  5165               	movf	(udp_sendPacket@ipPacket+1)& (0+255),w,b
  3975  003B1A  0D04               	mullw	4
  3976  003B1C  50F3               	movf	prodl,w,c
  3977  003B1E  5D62               	subwf	udp_sendPacket@i& (0+255),w,b
  3978  003B20  50F4               	movf	prodh,w,c
  3979  003B22  5963               	subwfb	(udp_sendPacket@i+1)& (0+255),w,b
  3980  003B24  B0D8               	btfsc	status,0,c
  3981  003B26  D013               	goto	l1479
  3982                           
  3983                           ; BSR set to: 1
  3984                           ;udp.c: 69: ipv4_streamToTransmissionBuffer(ipHeaderBuf[i], ipPacket);
  3985  003B28  EE21  F064         	lfsr	2,udp_sendPacket@ipPacket
  3986  003B2C  EE00  F07E         	lfsr	0,ipv4_streamToTransmissionBuffer@packet
  3987  003B30  0E41               	movlw	65
  3988  003B32                     u15481:
  3989  003B32  CFDB FFEB          	movff	plusw2,plusw0
  3990  003B36  06E8               	decf	wreg,f,c
  3991  003B38  E2FC               	bc	u15481
  3992  003B3A  0E40               	movlw	low udp_sendPacket@ipHeaderBuf
  3993  003B3C  2562               	addwf	udp_sendPacket@i& (0+255),w,b
  3994  003B3E  6ED9               	movwf	fsr2l,c
  3995  003B40  0E01               	movlw	high udp_sendPacket@ipHeaderBuf
  3996  003B42  2163               	addwfc	(udp_sendPacket@i+1)& (0+255),w,b
  3997  003B44  6EDA               	movwf	fsr2h,c
  3998  003B46  50DF               	movf	indf2,w,c
  3999  003B48  EC7E  F036         	call	_ipv4_streamToTransmissionBuffer
  4000                           
  4001                           ;udp.c: 70: } else if (i < ipPacket.ipv4Header.headerLength * 4 + 8) {
  4002  003B4C  D045               	goto	l1482
  4003  003B4E                     l1479:
  4004  003B4E  0101               	movlb	1	; () banked
  4005  003B50  5165               	movf	(udp_sendPacket@ipPacket+1)& (0+255),w,b
  4006  003B52  0100               	movlb	0	; () banked
  4007  003B54  6FCD               	movwf	??_udp_sendPacket& (0+255),b
  4008  003B56  6BCE               	clrf	(??_udp_sendPacket+1)& (0+255),b
  4009  003B58  90D8               	bcf	status,0,c
  4010  003B5A  37CD               	rlcf	??_udp_sendPacket& (0+255),f,b
  4011  003B5C  37CE               	rlcf	(??_udp_sendPacket+1)& (0+255),f,b
  4012  003B5E  90D8               	bcf	status,0,c
  4013  003B60  37CD               	rlcf	??_udp_sendPacket& (0+255),f,b
  4014  003B62  37CE               	rlcf	(??_udp_sendPacket+1)& (0+255),f,b
  4015  003B64  0E08               	movlw	8
  4016  003B66  27CD               	addwf	??_udp_sendPacket& (0+255),f,b
  4017  003B68  0E00               	movlw	0
  4018  003B6A  23CE               	addwfc	(??_udp_sendPacket+1)& (0+255),f,b
  4019  003B6C  51CD               	movf	??_udp_sendPacket& (0+255),w,b
  4020  003B6E  0101               	movlb	1	; () banked
  4021  003B70  5D62               	subwf	udp_sendPacket@i& (0+255),w,b
  4022  003B72  0100               	movlb	0	; () banked
  4023  003B74  51CE               	movf	(??_udp_sendPacket+1)& (0+255),w,b
  4024  003B76  0101               	movlb	1	; () banked
  4025  003B78  5963               	subwfb	(udp_sendPacket@i+1)& (0+255),w,b
  4026  003B7A  B0D8               	btfsc	status,0,c
  4027  003B7C  D01D               	goto	l1481
  4028                           
  4029                           ; BSR set to: 1
  4030                           ;udp.c: 71: ipv4_streamToTransmissionBuffer(headerBuf[i - ipPacket.ipv4Header.headerLeng
      +                          th * 4], ipPacket);
  4031  003B7E  EE21  F064         	lfsr	2,udp_sendPacket@ipPacket
  4032  003B82  EE00  F07E         	lfsr	0,ipv4_streamToTransmissionBuffer@packet
  4033  003B86  0E41               	movlw	65
  4034  003B88                     u15501:
  4035  003B88  CFDB FFEB          	movff	plusw2,plusw0
  4036  003B8C  06E8               	decf	wreg,f,c
  4037  003B8E  E2FC               	bc	u15501
  4038  003B90  5165               	movf	(udp_sendPacket@ipPacket+1)& (0+255),w,b
  4039  003B92  0D04               	mullw	4
  4040  003B94  1EF3               	comf	prodl,f,c
  4041  003B96  1EF4               	comf	prodh,f,c
  4042  003B98  4AF3               	infsnz	prodl,f,c
  4043  003B9A  2AF4               	incf	prodh,f,c
  4044  003B9C  5162               	movf	udp_sendPacket@i& (0+255),w,b
  4045  003B9E  26F3               	addwf	prodl,f,c
  4046  003BA0  5163               	movf	(udp_sendPacket@i+1)& (0+255),w,b
  4047  003BA2  22F4               	addwfc	prodh,f,c
  4048  003BA4  0E00               	movlw	low udp_sendPacket@headerBuf
  4049  003BA6  24F3               	addwf	prodl,w,c
  4050  003BA8  6ED9               	movwf	fsr2l,c
  4051  003BAA  0E01               	movlw	high udp_sendPacket@headerBuf
  4052  003BAC  20F4               	addwfc	prodh,w,c
  4053  003BAE  6EDA               	movwf	fsr2h,c
  4054  003BB0  50DF               	movf	indf2,w,c
  4055  003BB2  EC7E  F036         	call	_ipv4_streamToTransmissionBuffer
  4056                           
  4057                           ;udp.c: 72: } else {
  4058  003BB6  D010               	goto	l1482
  4059  003BB8                     l1481:
  4060                           
  4061                           ;udp.c: 73: ipv4_streamToTransmissionBuffer(foo++, ipPacket);
  4062  003BB8  EE21  F064         	lfsr	2,udp_sendPacket@ipPacket
  4063  003BBC  EE00  F07E         	lfsr	0,ipv4_streamToTransmissionBuffer@packet
  4064  003BC0  0E41               	movlw	65
  4065  003BC2                     u15511:
  4066  003BC2  CFDB FFEB          	movff	plusw2,plusw0
  4067  003BC6  06E8               	decf	wreg,f,c
  4068  003BC8  E2FC               	bc	u15511
  4069  003BCA  0101               	movlb	1	; () banked
  4070  003BCC  5160               	movf	udp_sendPacket@foo& (0+255),w,b
  4071  003BCE  EC7E  F036         	call	_ipv4_streamToTransmissionBuffer
  4072  003BD2  0101               	movlb	1	; () banked
  4073  003BD4  4B60               	infsnz	udp_sendPacket@foo& (0+255),f,b
  4074  003BD6  2B61               	incf	(udp_sendPacket@foo+1)& (0+255),f,b
  4075  003BD8                     l1482:
  4076                           
  4077                           ; BSR set to: 1
  4078                           
  4079                           ; BSR set to: 1
  4080  003BD8  0101               	movlb	1	; () banked
  4081  003BDA  4B62               	infsnz	udp_sendPacket@i& (0+255),f,b
  4082  003BDC  2B63               	incf	(udp_sendPacket@i+1)& (0+255),f,b
  4083  003BDE                     l1477:
  4084                           
  4085                           ; BSR set to: 1
  4086                           
  4087                           ; BSR set to: 1
  4088  003BDE  5168               	movf	(udp_sendPacket@ipPacket+4)& (0+255),w,b
  4089  003BE0  5D62               	subwf	udp_sendPacket@i& (0+255),w,b
  4090  003BE2  5169               	movf	(udp_sendPacket@ipPacket+5)& (0+255),w,b
  4091  003BE4  5963               	subwfb	(udp_sendPacket@i+1)& (0+255),w,b
  4092  003BE6  A0D8               	btfss	status,0,c
  4093  003BE8  D797               	goto	l1478
  4094                           
  4095                           ; BSR set to: 1
  4096                           ;udp.c: 74: }
  4097                           ;udp.c: 75: }
  4098                           ;udp.c: 77: stack.pendingPacketToSend = ipPacket;
  4099                           
  4100                           ; BSR set to: 1
  4101  003BEA  EE21  F064         	lfsr	2,udp_sendPacket@ipPacket
  4102  003BEE  EE14  F035         	lfsr	1,_stack+53
  4103  003BF2  0E41               	movlw	65
  4104  003BF4                     u15531:
  4105  003BF4  CFDB FFE3          	movff	plusw2,plusw1
  4106  003BF8  06E8               	decf	wreg,f,c
  4107  003BFA  E2FC               	bc	u15531
  4108                           
  4109                           ; BSR set to: 1
  4110                           ;udp.c: 78: stack.background.fPacketPending = 1u;
  4111  003BFC  0E01               	movlw	1
  4112  003BFE  0104               	movlb	4	; () banked
  4113  003C00  6F34               	movwf	(_stack+52)& (0+255),b
  4114                           
  4115                           ; BSR set to: 4
  4116  003C02  0012               	return		;funcret
  4117  003C04                     __end_of_udp_sendPacket:
  4118                           	opt stack 0
  4119                           tblptru	equ	0xFF8
  4120                           tblptrh	equ	0xFF7
  4121                           tblptrl	equ	0xFF6
  4122                           tablat	equ	0xFF5
  4123                           prodh	equ	0xFF4
  4124                           prodl	equ	0xFF3
  4125                           intcon	equ	0xFF2
  4126                           intcon3	equ	0xFF0
  4127                           indf0	equ	0xFEF
  4128                           postinc0	equ	0xFEE
  4129                           plusw0	equ	0xFEB
  4130                           fsr0h	equ	0xFEA
  4131                           fsr0l	equ	0xFE9
  4132                           wreg	equ	0xFE8
  4133                           postdec1	equ	0xFE5
  4134                           plusw1	equ	0xFE3
  4135                           fsr1l	equ	0xFE1
  4136                           indf2	equ	0xFDF
  4137                           plusw2	equ	0xFDB
  4138                           fsr2h	equ	0xFDA
  4139                           fsr2l	equ	0xFD9
  4140                           status	equ	0xFD8
  4141                           
  4142 ;; *************** function _tcp_listen *****************
  4143 ;; Defined at:
  4144 ;;		line 143 in file "src/stack/protocols/tcp.c"
  4145 ;; Parameters:    Size  Location     Type
  4146 ;;  connection      2   47[BANK0 ] PTR struct tcp_connectio
  4147 ;;		 -> main@connection(17), 
  4148 ;; Auto vars:     Size  Location     Type
  4149 ;;		None
  4150 ;; Return value:  Size  Location     Type
  4151 ;;                  3   47[BANK0 ] struct error
  4152 ;; Registers used:
  4153 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4154 ;; Tracked objects:
  4155 ;;		On entry : 0/0
  4156 ;;		On exit  : 0/0
  4157 ;;		Unchanged: 0/0
  4158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4159 ;;      Params:         0       2       0       0       0       0       0       0       0
  4160 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4161 ;;      Temps:          0       4       0       0       0       0       0       0       0
  4162 ;;      Totals:         0       6       0       0       0       0       0       0       0
  4163 ;;Total ram usage:        6 bytes
  4164 ;; Hardware stack levels used:    1
  4165 ;; Hardware stack levels required when called:    8
  4166 ;; This function calls:
  4167 ;;		_UARTTransmitText
  4168 ;;		___wmul
  4169 ;;		_intToString
  4170 ;;		_rand
  4171 ;; This function is called by:
  4172 ;;		_main
  4173 ;; This function uses a non-reentrant model
  4174 ;;
  4175                           
  4176                           	psect	text2
  4177  004D92                     __ptext2:
  4178                           	opt stack 0
  4179  004D92                     _tcp_listen:
  4180                           	opt stack 22
  4181                           
  4182                           ;tcp.c: 144: connection->state = TCP_STATE_LISTEN;
  4183                           
  4184                           ; BSR set to: 4
  4185                           ;incstack = 0
  4186  004D92  0100               	movlb	0	; () banked
  4187  004D94  EE20 F010          	lfsr	2,16
  4188  004D98  518F               	movf	tcp_listen@connection& (0+255),w,b
  4189  004D9A  26D9               	addwf	fsr2l,f,c
  4190  004D9C  5190               	movf	(tcp_listen@connection+1)& (0+255),w,b
  4191  004D9E  22DA               	addwfc	fsr2h,f,c
  4192  004DA0  0E00               	movlw	0
  4193  004DA2  6EDF               	movwf	indf2,c
  4194                           
  4195                           ; BSR set to: 0
  4196                           ;tcp.c: 145: connection->seqNumber = rand() * rand();
  4197  004DA4  ECB1  F031         	call	_rand	;wreg free
  4198  004DA8  C06C  F06E         	movff	?_rand,___wmul@multiplier
  4199  004DAC  C06D  F06F         	movff	?_rand+1,___wmul@multiplier+1
  4200  004DB0  ECB1  F031         	call	_rand	;wreg free
  4201  004DB4  C06C  F070         	movff	?_rand,___wmul@multiplicand
  4202  004DB8  C06D  F071         	movff	?_rand+1,___wmul@multiplicand+1
  4203  004DBC  ECE9  F035         	call	___wmul	;wreg free
  4204  004DC0  0100               	movlb	0	; () banked
  4205  004DC2  C06E  F091         	movff	?___wmul,??_tcp_listen
  4206  004DC6  C06F  F092         	movff	?___wmul+1,??_tcp_listen+1
  4207  004DCA  0E00               	movlw	0
  4208  004DCC  BF92               	btfsc	(??_tcp_listen+1)& (0+255),7,b
  4209  004DCE  0EFF               	movlw	255
  4210  004DD0  6F93               	movwf	(??_tcp_listen+2)& (0+255),b
  4211  004DD2  6F94               	movwf	(??_tcp_listen+3)& (0+255),b
  4212  004DD4  EE20 F00C          	lfsr	2,12
  4213  004DD8  518F               	movf	tcp_listen@connection& (0+255),w,b
  4214  004DDA  26D9               	addwf	fsr2l,f,c
  4215  004DDC  5190               	movf	(tcp_listen@connection+1)& (0+255),w,b
  4216  004DDE  22DA               	addwfc	fsr2h,f,c
  4217  004DE0  C091  FFDE         	movff	??_tcp_listen,postinc2
  4218  004DE4  C092  FFDE         	movff	??_tcp_listen+1,postinc2
  4219  004DE8  C093  FFDE         	movff	??_tcp_listen+2,postinc2
  4220  004DEC  C094  FFDE         	movff	??_tcp_listen+3,postinc2
  4221                           
  4222                           ; BSR set to: 0
  4223                           ;tcp.c: 146: tcpListeners[0] = *connection;
  4224  004DF0  C08F  FFD9         	movff	tcp_listen@connection,fsr2l
  4225  004DF4  C090  FFDA         	movff	tcp_listen@connection+1,fsr2h
  4226  004DF8  EE15  F000         	lfsr	1,_tcpListeners
  4227  004DFC  0E10               	movlw	16
  4228  004DFE                     u15411:
  4229  004DFE  CFDB FFE3          	movff	plusw2,plusw1
  4230  004E02  06E8               	decf	wreg,f,c
  4231  004E04  E2FC               	bc	u15411
  4232                           
  4233                           ; BSR set to: 0
  4234                           ;tcp.c: 148: UARTTransmitText("[TCP]: Listening on Port ");
  4235  004E06  0E85               	movlw	low STR_120
  4236  004E08  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  4237  004E0A  0E7D               	movlw	high STR_120
  4238  004E0C  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4239  004E0E  EC36  F032         	call	_UARTTransmitText	;wreg free
  4240                           
  4241                           ;tcp.c: 149: UARTTransmitText(intToString(connection->srcPort, 10));
  4242  004E12  0100               	movlb	0	; () banked
  4243  004E14  EE20 F008          	lfsr	2,8
  4244  004E18  518F               	movf	tcp_listen@connection& (0+255),w,b
  4245  004E1A  26D9               	addwf	fsr2l,f,c
  4246  004E1C  5190               	movf	(tcp_listen@connection+1)& (0+255),w,b
  4247  004E1E  22DA               	addwfc	fsr2h,f,c
  4248  004E20  CFDE F091          	movff	postinc2,??_tcp_listen
  4249  004E24  CFDD F092          	movff	postdec2,??_tcp_listen+1
  4250  004E28  C091  F084         	movff	??_tcp_listen,intToString@val
  4251  004E2C  C092  F085         	movff	??_tcp_listen+1,intToString@val+1
  4252  004E30  6B86               	clrf	(intToString@val+2)& (0+255),b
  4253  004E32  6B87               	clrf	(intToString@val+3)& (0+255),b
  4254  004E34  0E0A               	movlw	10
  4255  004E36  6F88               	movwf	intToString@b& (0+255),b
  4256  004E38  EC0D  F035         	call	_intToString	;wreg free
  4257  004E3C  C084  F08D         	movff	?_intToString,UARTTransmitText@str
  4258  004E40  C085  F08E         	movff	?_intToString+1,UARTTransmitText@str+1
  4259  004E44  EC36  F032         	call	_UARTTransmitText	;wreg free
  4260                           
  4261                           ;tcp.c: 150: UARTTransmitText(" (Seq= ");
  4262  004E48  0E75               	movlw	low STR_121
  4263  004E4A  0100               	movlb	0	; () banked
  4264  004E4C  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  4265  004E4E  0E7F               	movlw	high STR_121
  4266  004E50  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4267  004E52  EC36  F032         	call	_UARTTransmitText	;wreg free
  4268                           
  4269                           ;tcp.c: 151: UARTTransmitText(intToString(connection->seqNumber, 10));
  4270  004E56  0100               	movlb	0	; () banked
  4271  004E58  EE20 F00C          	lfsr	2,12
  4272  004E5C  518F               	movf	tcp_listen@connection& (0+255),w,b
  4273  004E5E  26D9               	addwf	fsr2l,f,c
  4274  004E60  5190               	movf	(tcp_listen@connection+1)& (0+255),w,b
  4275  004E62  22DA               	addwfc	fsr2h,f,c
  4276  004E64  CFDE F084          	movff	postinc2,intToString@val
  4277  004E68  CFDE F085          	movff	postinc2,intToString@val+1
  4278  004E6C  CFDE F086          	movff	postinc2,intToString@val+2
  4279  004E70  CFDE F087          	movff	postinc2,intToString@val+3
  4280  004E74  0E0A               	movlw	10
  4281  004E76  6F88               	movwf	intToString@b& (0+255),b
  4282  004E78  EC0D  F035         	call	_intToString	;wreg free
  4283  004E7C  C084  F08D         	movff	?_intToString,UARTTransmitText@str
  4284  004E80  C085  F08E         	movff	?_intToString+1,UARTTransmitText@str+1
  4285  004E84  EC36  F032         	call	_UARTTransmitText	;wreg free
  4286                           
  4287                           ;tcp.c: 152: UARTTransmitText(")\n\r");
  4288  004E88  0EDA               	movlw	low STR_122
  4289  004E8A  0100               	movlb	0	; () banked
  4290  004E8C  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  4291  004E8E  0E7F               	movlw	high STR_122
  4292  004E90  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4293  004E92  EC36  F032         	call	_UARTTransmitText	;wreg free
  4294  004E96  0012               	return		;funcret
  4295  004E98                     __end_of_tcp_listen:
  4296                           	opt stack 0
  4297                           tblptru	equ	0xFF8
  4298                           tblptrh	equ	0xFF7
  4299                           tblptrl	equ	0xFF6
  4300                           tablat	equ	0xFF5
  4301                           prodh	equ	0xFF4
  4302                           prodl	equ	0xFF3
  4303                           intcon	equ	0xFF2
  4304                           intcon3	equ	0xFF0
  4305                           indf0	equ	0xFEF
  4306                           postinc0	equ	0xFEE
  4307                           plusw0	equ	0xFEB
  4308                           fsr0h	equ	0xFEA
  4309                           fsr0l	equ	0xFE9
  4310                           wreg	equ	0xFE8
  4311                           postdec1	equ	0xFE5
  4312                           plusw1	equ	0xFE3
  4313                           fsr1l	equ	0xFE1
  4314                           indf2	equ	0xFDF
  4315                           postinc2	equ	0xFDE
  4316                           postdec2	equ	0xFDD
  4317                           plusw2	equ	0xFDB
  4318                           fsr2h	equ	0xFDA
  4319                           fsr2l	equ	0xFD9
  4320                           status	equ	0xFD8
  4321                           
  4322 ;; *************** function _stack_init *****************
  4323 ;; Defined at:
  4324 ;;		line 27 in file "src/stack/stack.c"
  4325 ;; Parameters:    Size  Location     Type
  4326 ;;		None
  4327 ;; Auto vars:     Size  Location     Type
  4328 ;;  err             3   14[BANK0 ] struct error
  4329 ;; Return value:  Size  Location     Type
  4330 ;;                  3  573[None  ] struct error
  4331 ;; Registers used:
  4332 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4333 ;; Tracked objects:
  4334 ;;		On entry : 0/0
  4335 ;;		On exit  : 0/0
  4336 ;;		Unchanged: 0/0
  4337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4338 ;;      Params:         0       0       0       0       0       0       0       0       0
  4339 ;;      Locals:         0       3       0       0       0       0       0       0       0
  4340 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4341 ;;      Totals:         0       3       0       0       0       0       0       0       0
  4342 ;;Total ram usage:        3 bytes
  4343 ;; Hardware stack levels used:    1
  4344 ;; Hardware stack levels required when called:    6
  4345 ;; This function calls:
  4346 ;;		_arp_init
  4347 ;;		_ipv4_init
  4348 ;;		_tcp_init
  4349 ;; This function is called by:
  4350 ;;		_main
  4351 ;; This function uses a non-reentrant model
  4352 ;;
  4353                           
  4354                           	psect	text3
  4355  006E52                     __ptext3:
  4356                           	opt stack 0
  4357  006E52                     _stack_init:
  4358                           	opt stack 24
  4359                           
  4360                           ;stack.c: 28: error_t err;
  4361                           ;stack.c: 29: arp_init();
  4362                           
  4363                           ;incstack = 0
  4364  006E52  EC2E  F02D         	call	_arp_init	;wreg free
  4365                           
  4366                           ;stack.c: 30: ipv4_init();
  4367  006E56  EC6E  F036         	call	_ipv4_init	;wreg free
  4368                           
  4369                           ;stack.c: 31: tcp_init();
  4370  006E5A  EC78  F02D         	call	_tcp_init	;wreg free
  4371  006E5E  0012               	return	
  4372  006E60                     __end_of_stack_init:
  4373                           	opt stack 0
  4374                           tblptru	equ	0xFF8
  4375                           tblptrh	equ	0xFF7
  4376                           tblptrl	equ	0xFF6
  4377                           tablat	equ	0xFF5
  4378                           prodh	equ	0xFF4
  4379                           prodl	equ	0xFF3
  4380                           intcon	equ	0xFF2
  4381                           intcon3	equ	0xFF0
  4382                           indf0	equ	0xFEF
  4383                           postinc0	equ	0xFEE
  4384                           plusw0	equ	0xFEB
  4385                           fsr0h	equ	0xFEA
  4386                           fsr0l	equ	0xFE9
  4387                           wreg	equ	0xFE8
  4388                           postdec1	equ	0xFE5
  4389                           plusw1	equ	0xFE3
  4390                           fsr1l	equ	0xFE1
  4391                           indf2	equ	0xFDF
  4392                           postinc2	equ	0xFDE
  4393                           postdec2	equ	0xFDD
  4394                           plusw2	equ	0xFDB
  4395                           fsr2h	equ	0xFDA
  4396                           fsr2l	equ	0xFD9
  4397                           status	equ	0xFD8
  4398                           
  4399 ;; *************** function _tcp_init *****************
  4400 ;; Defined at:
  4401 ;;		line 287 in file "src/stack/protocols/tcp.c"
  4402 ;; Parameters:    Size  Location     Type
  4403 ;;		None
  4404 ;; Auto vars:     Size  Location     Type
  4405 ;;  i               1    0[BANK0 ] unsigned char 
  4406 ;; Return value:  Size  Location     Type
  4407 ;;                  1    wreg      void 
  4408 ;; Registers used:
  4409 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4410 ;; Tracked objects:
  4411 ;;		On entry : 0/0
  4412 ;;		On exit  : 0/0
  4413 ;;		Unchanged: 0/0
  4414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4415 ;;      Params:         0       0       0       0       0       0       0       0       0
  4416 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4417 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4418 ;;      Totals:         0       1       0       0       0       0       0       0       0
  4419 ;;Total ram usage:        1 bytes
  4420 ;; Hardware stack levels used:    1
  4421 ;; Hardware stack levels required when called:    4
  4422 ;; This function calls:
  4423 ;;		Nothing
  4424 ;; This function is called by:
  4425 ;;		_stack_init
  4426 ;; This function uses a non-reentrant model
  4427 ;;
  4428                           
  4429                           	psect	text4
  4430  005AF0                     __ptext4:
  4431                           	opt stack 0
  4432  005AF0                     _tcp_init:
  4433                           	opt stack 25
  4434                           
  4435                           ;tcp.c: 288: for (uint8_t i = 0; i < 12; i++) {
  4436                           
  4437                           ;incstack = 0
  4438  005AF0  0E00               	movlw	0
  4439  005AF2  0100               	movlb	0	; () banked
  4440  005AF4  6F60               	movwf	tcp_init@i& (0+255),b
  4441  005AF6                     l12344:
  4442                           
  4443                           ; BSR set to: 0
  4444  005AF6  0E0B               	movlw	11
  4445  005AF8  6560               	cpfsgt	tcp_init@i& (0+255),b
  4446  005AFA  D001               	goto	l1456
  4447  005AFC  0012               	return	
  4448  005AFE                     l1456:
  4449                           
  4450                           ; BSR set to: 0
  4451                           ;tcp.c: 289: tcpListeners[i].seqNumber = 0;
  4452                           
  4453                           ; BSR set to: 0
  4454  005AFE  5160               	movf	tcp_init@i& (0+255),w,b
  4455  005B00  0D11               	mullw	17
  4456  005B02  0E0C               	movlw	12
  4457  005B04  26F3               	addwf	prodl,f,c
  4458  005B06  0E00               	movlw	0
  4459  005B08  22F4               	addwfc	prodh,f,c
  4460  005B0A  0E00               	movlw	low _tcpListeners
  4461  005B0C  24F3               	addwf	prodl,w,c
  4462  005B0E  6ED9               	movwf	fsr2l,c
  4463  005B10  0E05               	movlw	high _tcpListeners
  4464  005B12  20F4               	addwfc	prodh,w,c
  4465  005B14  6EDA               	movwf	fsr2h,c
  4466  005B16  6ADE               	clrf	postinc2,c
  4467  005B18  6ADE               	clrf	postinc2,c
  4468  005B1A  6ADE               	clrf	postinc2,c
  4469  005B1C  6ADD               	clrf	postdec2,c
  4470                           
  4471                           ;tcp.c: 290: tcpListeners[i].srcPort = 0;
  4472  005B1E  5160               	movf	tcp_init@i& (0+255),w,b
  4473  005B20  0D11               	mullw	17
  4474  005B22  0E08               	movlw	8
  4475  005B24  26F3               	addwf	prodl,f,c
  4476  005B26  0E00               	movlw	0
  4477  005B28  22F4               	addwfc	prodh,f,c
  4478  005B2A  0E00               	movlw	low _tcpListeners
  4479  005B2C  24F3               	addwf	prodl,w,c
  4480  005B2E  6ED9               	movwf	fsr2l,c
  4481  005B30  0E05               	movlw	high _tcpListeners
  4482  005B32  20F4               	addwfc	prodh,w,c
  4483  005B34  6EDA               	movwf	fsr2h,c
  4484  005B36  0E00               	movlw	0
  4485  005B38  6EDE               	movwf	postinc2,c
  4486  005B3A  0E00               	movlw	0
  4487  005B3C  6EDD               	movwf	postdec2,c
  4488                           
  4489                           ;tcp.c: 291: tcpListeners[i].dstPort = 0;
  4490  005B3E  5160               	movf	tcp_init@i& (0+255),w,b
  4491  005B40  0D11               	mullw	17
  4492  005B42  0E0A               	movlw	10
  4493  005B44  26F3               	addwf	prodl,f,c
  4494  005B46  0E00               	movlw	0
  4495  005B48  22F4               	addwfc	prodh,f,c
  4496  005B4A  0E00               	movlw	low _tcpListeners
  4497  005B4C  24F3               	addwf	prodl,w,c
  4498  005B4E  6ED9               	movwf	fsr2l,c
  4499  005B50  0E05               	movlw	high _tcpListeners
  4500  005B52  20F4               	addwfc	prodh,w,c
  4501  005B54  6EDA               	movwf	fsr2h,c
  4502  005B56  0E00               	movlw	0
  4503  005B58  6EDE               	movwf	postinc2,c
  4504  005B5A  0E00               	movlw	0
  4505  005B5C  6EDD               	movwf	postdec2,c
  4506                           
  4507                           ;tcp.c: 292: tcpListeners[i].state = TCP_STATE_CLOSED;
  4508  005B5E  5160               	movf	tcp_init@i& (0+255),w,b
  4509  005B60  0D11               	mullw	17
  4510  005B62  0E10               	movlw	16
  4511  005B64  26F3               	addwf	prodl,f,c
  4512  005B66  0E00               	movlw	0
  4513  005B68  22F4               	addwfc	prodh,f,c
  4514  005B6A  0E00               	movlw	low _tcpListeners
  4515  005B6C  24F3               	addwf	prodl,w,c
  4516  005B6E  6ED9               	movwf	fsr2l,c
  4517  005B70  0E05               	movlw	high _tcpListeners
  4518  005B72  20F4               	addwfc	prodh,w,c
  4519  005B74  6EDA               	movwf	fsr2h,c
  4520  005B76  0E0A               	movlw	10
  4521  005B78  6EDF               	movwf	indf2,c
  4522                           
  4523                           ; BSR set to: 0
  4524  005B7A  2B60               	incf	tcp_init@i& (0+255),f,b
  4525  005B7C  D7BC               	goto	l12344
  4526  005B7E                     __end_of_tcp_init:
  4527                           	opt stack 0
  4528                           tblptru	equ	0xFF8
  4529                           tblptrh	equ	0xFF7
  4530                           tblptrl	equ	0xFF6
  4531                           tablat	equ	0xFF5
  4532                           prodh	equ	0xFF4
  4533                           prodl	equ	0xFF3
  4534                           intcon	equ	0xFF2
  4535                           intcon3	equ	0xFF0
  4536                           indf0	equ	0xFEF
  4537                           postinc0	equ	0xFEE
  4538                           plusw0	equ	0xFEB
  4539                           fsr0h	equ	0xFEA
  4540                           fsr0l	equ	0xFE9
  4541                           wreg	equ	0xFE8
  4542                           postdec1	equ	0xFE5
  4543                           plusw1	equ	0xFE3
  4544                           fsr1l	equ	0xFE1
  4545                           indf2	equ	0xFDF
  4546                           postinc2	equ	0xFDE
  4547                           postdec2	equ	0xFDD
  4548                           plusw2	equ	0xFDB
  4549                           fsr2h	equ	0xFDA
  4550                           fsr2l	equ	0xFD9
  4551                           status	equ	0xFD8
  4552                           
  4553 ;; *************** function _ipv4_init *****************
  4554 ;; Defined at:
  4555 ;;		line 447 in file "src/stack/protocols/ipv4.c"
  4556 ;; Parameters:    Size  Location     Type
  4557 ;;		None
  4558 ;; Auto vars:     Size  Location     Type
  4559 ;;		None
  4560 ;; Return value:  Size  Location     Type
  4561 ;;                  1    wreg      void 
  4562 ;; Registers used:
  4563 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4564 ;; Tracked objects:
  4565 ;;		On entry : 0/0
  4566 ;;		On exit  : 0/0
  4567 ;;		Unchanged: 0/0
  4568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4569 ;;      Params:         0       0       0       0       0       0       0       0       0
  4570 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4571 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4572 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4573 ;;Total ram usage:        0 bytes
  4574 ;; Hardware stack levels used:    1
  4575 ;; Hardware stack levels required when called:    5
  4576 ;; This function calls:
  4577 ;;		_ipv4_setToAllZero
  4578 ;; This function is called by:
  4579 ;;		_stack_init
  4580 ;; This function uses a non-reentrant model
  4581 ;;
  4582                           
  4583                           	psect	text5
  4584  006CDC                     __ptext5:
  4585                           	opt stack 0
  4586  006CDC                     _ipv4_init:
  4587                           	opt stack 24
  4588                           
  4589                           ;ipv4.c: 448: fSrcAddrChanged = 0u;
  4590                           
  4591                           ; BSR set to: 0
  4592                           ;incstack = 0
  4593  006CDC  904E               	bcf	_fSrcAddrChanged/(0+8),_fSrcAddrChanged& (0+7),c
  4594                           
  4595                           ;ipv4.c: 449: ipv4_setToAllZero(&ipSource);
  4596  006CDE  0EE0               	movlw	low _ipSource
  4597  006CE0  0100               	movlb	0	; () banked
  4598  006CE2  6F60               	movwf	ipv4_setToAllZero@ip& (0+255),b
  4599  006CE4  0E02               	movlw	high _ipSource
  4600  006CE6  6F61               	movwf	(ipv4_setToAllZero@ip+1)& (0+255),b
  4601  006CE8  EC11  F036         	call	_ipv4_setToAllZero	;wreg free
  4602                           
  4603                           ;ipv4.c: 450: ipv4_setToAllZero(&ipPreliminarySource);
  4604  006CEC  0ED8               	movlw	low _ipPreliminarySource
  4605  006CEE  0100               	movlb	0	; () banked
  4606  006CF0  6F60               	movwf	ipv4_setToAllZero@ip& (0+255),b
  4607  006CF2  0E02               	movlw	high _ipPreliminarySource
  4608  006CF4  6F61               	movwf	(ipv4_setToAllZero@ip+1)& (0+255),b
  4609  006CF6  EC11  F036         	call	_ipv4_setToAllZero	;wreg free
  4610  006CFA  0012               	return		;funcret
  4611  006CFC                     __end_of_ipv4_init:
  4612                           	opt stack 0
  4613                           tblptru	equ	0xFF8
  4614                           tblptrh	equ	0xFF7
  4615                           tblptrl	equ	0xFF6
  4616                           tablat	equ	0xFF5
  4617                           prodh	equ	0xFF4
  4618                           prodl	equ	0xFF3
  4619                           intcon	equ	0xFF2
  4620                           intcon3	equ	0xFF0
  4621                           indf0	equ	0xFEF
  4622                           postinc0	equ	0xFEE
  4623                           plusw0	equ	0xFEB
  4624                           fsr0h	equ	0xFEA
  4625                           fsr0l	equ	0xFE9
  4626                           wreg	equ	0xFE8
  4627                           postdec1	equ	0xFE5
  4628                           plusw1	equ	0xFE3
  4629                           fsr1l	equ	0xFE1
  4630                           indf2	equ	0xFDF
  4631                           postinc2	equ	0xFDE
  4632                           postdec2	equ	0xFDD
  4633                           plusw2	equ	0xFDB
  4634                           fsr2h	equ	0xFDA
  4635                           fsr2l	equ	0xFD9
  4636                           status	equ	0xFD8
  4637                           
  4638 ;; *************** function _srand *****************
  4639 ;; Defined at:
  4640 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\rand.c"
  4641 ;; Parameters:    Size  Location     Type
  4642 ;;  x               2   26[BANK0 ] unsigned int 
  4643 ;; Auto vars:     Size  Location     Type
  4644 ;;		None
  4645 ;; Return value:  Size  Location     Type
  4646 ;;                  1    wreg      void 
  4647 ;; Registers used:
  4648 ;;		status,2
  4649 ;; Tracked objects:
  4650 ;;		On entry : 0/0
  4651 ;;		On exit  : 0/0
  4652 ;;		Unchanged: 0/0
  4653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4654 ;;      Params:         0       2       0       0       0       0       0       0       0
  4655 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4656 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4657 ;;      Totals:         0       2       0       0       0       0       0       0       0
  4658 ;;Total ram usage:        2 bytes
  4659 ;; Hardware stack levels used:    1
  4660 ;; Hardware stack levels required when called:    4
  4661 ;; This function calls:
  4662 ;;		Nothing
  4663 ;; This function is called by:
  4664 ;;		_main
  4665 ;; This function uses a non-reentrant model
  4666 ;;
  4667                           
  4668                           	psect	text6
  4669  006E12                     __ptext6:
  4670                           	opt stack 0
  4671  006E12                     _srand:
  4672                           	opt stack 26
  4673                           
  4674                           ;incstack = 0
  4675  006E12  C07A  F2E8         	movff	srand@x,_randx
  4676  006E16  C07B  F2E9         	movff	srand@x+1,_randx+1
  4677  006E1A  0102               	movlb	2	; () banked
  4678  006E1C  6BEA               	clrf	(_randx+2)& (0+255),b
  4679  006E1E  6BEB               	clrf	(_randx+3)& (0+255),b
  4680                           
  4681                           ; BSR set to: 2
  4682  006E20  0012               	return		;funcret
  4683  006E22                     __end_of_srand:
  4684                           	opt stack 0
  4685                           tblptru	equ	0xFF8
  4686                           tblptrh	equ	0xFF7
  4687                           tblptrl	equ	0xFF6
  4688                           tablat	equ	0xFF5
  4689                           prodh	equ	0xFF4
  4690                           prodl	equ	0xFF3
  4691                           intcon	equ	0xFF2
  4692                           intcon3	equ	0xFF0
  4693                           indf0	equ	0xFEF
  4694                           postinc0	equ	0xFEE
  4695                           plusw0	equ	0xFEB
  4696                           fsr0h	equ	0xFEA
  4697                           fsr0l	equ	0xFE9
  4698                           wreg	equ	0xFE8
  4699                           postdec1	equ	0xFE5
  4700                           plusw1	equ	0xFE3
  4701                           fsr1l	equ	0xFE1
  4702                           indf2	equ	0xFDF
  4703                           postinc2	equ	0xFDE
  4704                           postdec2	equ	0xFDD
  4705                           plusw2	equ	0xFDB
  4706                           fsr2h	equ	0xFDA
  4707                           fsr2l	equ	0xFD9
  4708                           status	equ	0xFD8
  4709                           
  4710 ;; *************** function _sevenSegmentInit *****************
  4711 ;; Defined at:
  4712 ;;		line 28 in file "src/system/sevenseg.c"
  4713 ;; Parameters:    Size  Location     Type
  4714 ;;		None
  4715 ;; Auto vars:     Size  Location     Type
  4716 ;;		None
  4717 ;; Return value:  Size  Location     Type
  4718 ;;                  1    wreg      void 
  4719 ;; Registers used:
  4720 ;;		wreg, status,2, status,0
  4721 ;; Tracked objects:
  4722 ;;		On entry : 0/0
  4723 ;;		On exit  : 0/0
  4724 ;;		Unchanged: 0/0
  4725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4726 ;;      Params:         0       0       0       0       0       0       0       0       0
  4727 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4728 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4729 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4730 ;;Total ram usage:        0 bytes
  4731 ;; Hardware stack levels used:    1
  4732 ;; Hardware stack levels required when called:    4
  4733 ;; This function calls:
  4734 ;;		Nothing
  4735 ;; This function is called by:
  4736 ;;		_main
  4737 ;; This function uses a non-reentrant model
  4738 ;;
  4739                           
  4740                           	psect	text7
  4741  006D56                     __ptext7:
  4742                           	opt stack 0
  4743  006D56                     _sevenSegmentInit:
  4744                           	opt stack 26
  4745                           
  4746                           ;sevenseg.c: 30: PORTC &= ~(0x07);
  4747                           
  4748                           ; BSR set to: 2
  4749                           ;incstack = 0
  4750  006D56  0EF8               	movlw	248
  4751  006D58  1682               	andwf	3970,f,c	;volatile
  4752                           
  4753                           ;sevenseg.c: 32: TRISC&= ~0x07;;
  4754  006D5A  0EF8               	movlw	248
  4755  006D5C  1694               	andwf	3988,f,c	;volatile
  4756                           
  4757                           ;sevenseg.c: 33: TRISA &=~0xff;;
  4758  006D5E  0E00               	movlw	0
  4759  006D60  6E92               	movwf	3986,c	;volatile
  4760                           
  4761                           ;sevenseg.c: 35: ANSELA&=~0xff;;
  4762  006D62  0E00               	movlw	0
  4763  006D64  010F               	movlb	15	; () banked
  4764  006D66  6F5B               	movwf	91,b	;volatile
  4765                           
  4766                           ;sevenseg.c: 36: ANSELC&= ~0x07;;
  4767  006D68  0EF8               	movlw	248
  4768  006D6A  175D               	andwf	93,f,b	;volatile
  4769                           
  4770                           ; BSR set to: 15
  4771                           ;sevenseg.c: 38: PORTA = 0xff;
  4772  006D6C  6880               	setf	3968,c	;volatile
  4773                           
  4774                           ; BSR set to: 15
  4775  006D6E  0012               	return		;funcret
  4776  006D70                     __end_of_sevenSegmentInit:
  4777                           	opt stack 0
  4778                           tblptru	equ	0xFF8
  4779                           tblptrh	equ	0xFF7
  4780                           tblptrl	equ	0xFF6
  4781                           tablat	equ	0xFF5
  4782                           prodh	equ	0xFF4
  4783                           prodl	equ	0xFF3
  4784                           intcon	equ	0xFF2
  4785                           intcon3	equ	0xFF0
  4786                           indf0	equ	0xFEF
  4787                           postinc0	equ	0xFEE
  4788                           plusw0	equ	0xFEB
  4789                           fsr0h	equ	0xFEA
  4790                           fsr0l	equ	0xFE9
  4791                           wreg	equ	0xFE8
  4792                           postdec1	equ	0xFE5
  4793                           plusw1	equ	0xFE3
  4794                           fsr1l	equ	0xFE1
  4795                           indf2	equ	0xFDF
  4796                           postinc2	equ	0xFDE
  4797                           postdec2	equ	0xFDD
  4798                           plusw2	equ	0xFDB
  4799                           fsr2h	equ	0xFDA
  4800                           fsr2l	equ	0xFD9
  4801                           status	equ	0xFD8
  4802                           
  4803 ;; *************** function _printEthernetState *****************
  4804 ;; Defined at:
  4805 ;;		line 177 in file "src/system/main.c"
  4806 ;; Parameters:    Size  Location     Type
  4807 ;;  state          15   47[BANK0 ] struct ethernetConnectio
  4808 ;; Auto vars:     Size  Location     Type
  4809 ;;		None
  4810 ;; Return value:  Size  Location     Type
  4811 ;;                  1    wreg      void 
  4812 ;; Registers used:
  4813 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4814 ;; Tracked objects:
  4815 ;;		On entry : 0/0
  4816 ;;		On exit  : 0/0
  4817 ;;		Unchanged: 0/0
  4818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4819 ;;      Params:         0      15       0       0       0       0       0       0       0
  4820 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4821 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4822 ;;      Totals:         0      15       0       0       0       0       0       0       0
  4823 ;;Total ram usage:       15 bytes
  4824 ;; Hardware stack levels used:    1
  4825 ;; Hardware stack levels required when called:    5
  4826 ;; This function calls:
  4827 ;;		_UARTTransmitText
  4828 ;; This function is called by:
  4829 ;;		_main
  4830 ;; This function uses a non-reentrant model
  4831 ;;
  4832                           
  4833                           	psect	text8
  4834  006416                     __ptext8:
  4835                           	opt stack 0
  4836  006416                     _printEthernetState:
  4837                           	opt stack 25
  4838                           
  4839                           ;main.c: 178: static ethernetConnection_t oldState;
  4840                           ;main.c: 179: if (state.link != oldState.link) {
  4841                           
  4842                           ; BSR set to: 15
  4843                           ;incstack = 0
  4844  006416  0103               	movlb	3	; () banked
  4845  006418  518A               	movf	printEthernetState@oldState& (0+255),w,b
  4846  00641A  0100               	movlb	0	; () banked
  4847  00641C  198F               	xorwf	printEthernetState@state& (0+255),w,b
  4848  00641E  B4D8               	btfsc	status,2,c
  4849  006420  D01B               	goto	l701
  4850                           
  4851                           ; BSR set to: 0
  4852                           ;main.c: 180: UARTTransmitText("[ETH]: ");
  4853  006422  0E7D               	movlw	low STR_55
  4854  006424  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  4855  006426  0E7F               	movlw	high STR_55
  4856  006428  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4857  00642A  EC36  F032         	call	_UARTTransmitText	;wreg free
  4858                           
  4859                           ;main.c: 181: if (state.link == NO_LINK) {
  4860  00642E  0100               	movlb	0	; () banked
  4861  006430  518F               	movf	printEthernetState@state& (0+255),w,b
  4862  006432  A4D8               	btfss	status,2,c
  4863  006434  D007               	goto	l699
  4864                           
  4865                           ; BSR set to: 0
  4866                           ;main.c: 182: UARTTransmitText("Link lost.\n\r");
  4867  006436  0EC8               	movlw	low STR_56
  4868  006438  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  4869  00643A  0E7E               	movlw	high STR_56
  4870  00643C  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4871  00643E  EC36  F032         	call	_UARTTransmitText	;wreg free
  4872                           
  4873                           ;main.c: 183: } else if (state.link == LINK_ESTABLISHED) {
  4874  006442  D00A               	goto	l701
  4875  006444                     l699:
  4876  006444  0100               	movlb	0	; () banked
  4877  006446  058F               	decf	printEthernetState@state& (0+255),w,b
  4878  006448  A4D8               	btfss	status,2,c
  4879  00644A  D006               	goto	l701
  4880                           
  4881                           ; BSR set to: 0
  4882                           ;main.c: 184: UARTTransmitText("Link established. ");
  4883  00644C  0E29               	movlw	low STR_57
  4884  00644E  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  4885  006450  0E7E               	movlw	high STR_57
  4886  006452  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4887  006454  EC36  F032         	call	_UARTTransmitText	;wreg free
  4888  006458                     l701:
  4889                           
  4890                           ;main.c: 185: }
  4891                           ;main.c: 200: }
  4892                           ;main.c: 201: oldState = state;
  4893  006458  EE20  F08F         	lfsr	2,printEthernetState@state
  4894  00645C  EE13  F08A         	lfsr	1,printEthernetState@oldState
  4895  006460  0E0E               	movlw	14
  4896  006462                     u15451:
  4897  006462  CFDB FFE3          	movff	plusw2,plusw1
  4898  006466  06E8               	decf	wreg,f,c
  4899  006468  E2FC               	bc	u15451
  4900  00646A  0012               	return		;funcret
  4901  00646C                     __end_of_printEthernetState:
  4902                           	opt stack 0
  4903                           tblptru	equ	0xFF8
  4904                           tblptrh	equ	0xFF7
  4905                           tblptrl	equ	0xFF6
  4906                           tablat	equ	0xFF5
  4907                           prodh	equ	0xFF4
  4908                           prodl	equ	0xFF3
  4909                           intcon	equ	0xFF2
  4910                           intcon3	equ	0xFF0
  4911                           indf0	equ	0xFEF
  4912                           postinc0	equ	0xFEE
  4913                           plusw0	equ	0xFEB
  4914                           fsr0h	equ	0xFEA
  4915                           fsr0l	equ	0xFE9
  4916                           wreg	equ	0xFE8
  4917                           postdec1	equ	0xFE5
  4918                           plusw1	equ	0xFE3
  4919                           fsr1l	equ	0xFE1
  4920                           indf2	equ	0xFDF
  4921                           postinc2	equ	0xFDE
  4922                           postdec2	equ	0xFDD
  4923                           plusw2	equ	0xFDB
  4924                           fsr2h	equ	0xFDA
  4925                           fsr2l	equ	0xFD9
  4926                           status	equ	0xFD8
  4927                           
  4928 ;; *************** function _printErrorMessage *****************
  4929 ;; Defined at:
  4930 ;;		line 204 in file "src/system/main.c"
  4931 ;; Parameters:    Size  Location     Type
  4932 ;;  err             3    0[BANK0 ] struct error
  4933 ;; Auto vars:     Size  Location     Type
  4934 ;;		None
  4935 ;; Return value:  Size  Location     Type
  4936 ;;                  1    wreg      void 
  4937 ;; Registers used:
  4938 ;;		None
  4939 ;; Tracked objects:
  4940 ;;		On entry : 0/0
  4941 ;;		On exit  : 0/0
  4942 ;;		Unchanged: 0/0
  4943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4944 ;;      Params:         0       3       0       0       0       0       0       0       0
  4945 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4946 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4947 ;;      Totals:         0       3       0       0       0       0       0       0       0
  4948 ;;Total ram usage:        3 bytes
  4949 ;; Hardware stack levels used:    1
  4950 ;; Hardware stack levels required when called:    4
  4951 ;; This function calls:
  4952 ;;		Nothing
  4953 ;; This function is called by:
  4954 ;;		_main
  4955 ;; This function uses a non-reentrant model
  4956 ;;
  4957                           
  4958                           	psect	text9
  4959  006EAC                     __ptext9:
  4960                           	opt stack 0
  4961  006EAC                     _printErrorMessage:
  4962                           	opt stack 26
  4963                           
  4964                           ;incstack = 0
  4965  006EAC  0012               	return		;funcret
  4966  006EAE                     __end_of_printErrorMessage:
  4967                           	opt stack 0
  4968                           tblptru	equ	0xFF8
  4969                           tblptrh	equ	0xFF7
  4970                           tblptrl	equ	0xFF6
  4971                           tablat	equ	0xFF5
  4972                           prodh	equ	0xFF4
  4973                           prodl	equ	0xFF3
  4974                           intcon	equ	0xFF2
  4975                           intcon3	equ	0xFF0
  4976                           indf0	equ	0xFEF
  4977                           postinc0	equ	0xFEE
  4978                           plusw0	equ	0xFEB
  4979                           fsr0h	equ	0xFEA
  4980                           fsr0l	equ	0xFE9
  4981                           wreg	equ	0xFE8
  4982                           postdec1	equ	0xFE5
  4983                           plusw1	equ	0xFE3
  4984                           fsr1l	equ	0xFE1
  4985                           indf2	equ	0xFDF
  4986                           postinc2	equ	0xFDE
  4987                           postdec2	equ	0xFDD
  4988                           plusw2	equ	0xFDB
  4989                           fsr2h	equ	0xFDA
  4990                           fsr2l	equ	0xFD9
  4991                           status	equ	0xFD8
  4992                           
  4993 ;; *************** function _handleStackBackgroundTasks *****************
  4994 ;; Defined at:
  4995 ;;		line 40 in file "src/stack/backgroundTasks.c"
  4996 ;; Parameters:    Size  Location     Type
  4997 ;;  stack           2  236[BANK1 ] PTR struct stack
  4998 ;;		 -> stack(124), 
  4999 ;; Auto vars:     Size  Location     Type
  5000 ;;  foo            10    0        unsigned char [10]
  5001 ;;  errIPv4         3  245[BANK1 ] struct error
  5002 ;;  errArp          3  240[BANK1 ] struct error
  5003 ;;  intf            2  243[BANK1 ] struct interruptFlags
  5004 ;; Return value:  Size  Location     Type
  5005 ;;                  1    wreg      void 
  5006 ;; Registers used:
  5007 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5008 ;; Tracked objects:
  5009 ;;		On entry : 0/0
  5010 ;;		On exit  : 0/0
  5011 ;;		Unchanged: 0/0
  5012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5013 ;;      Params:         0       0       2       0       0       0       0       0       0
  5014 ;;      Locals:         0       0       8       0       0       0       0       0       0
  5015 ;;      Temps:          0       0       2       0       0       0       0       0       0
  5016 ;;      Totals:         0       0      12       0       0       0       0       0       0
  5017 ;;Total ram usage:       12 bytes
  5018 ;; Hardware stack levels used:    1
  5019 ;; Hardware stack levels required when called:   15
  5020 ;; This function calls:
  5021 ;;		_UARTTransmitText
  5022 ;;		_UART_resetFormat
  5023 ;;		_UART_setFormat
  5024 ;;		_UART_special
  5025 ;;		_arp_background
  5026 ;;		_arp_init
  5027 ;;		_ethernetController_clearInterruptFlag
  5028 ;;		_ethernetController_disableEthernet
  5029 ;;		_ethernetController_getMTU
  5030 ;;		_ethernetController_init
  5031 ;;		_ethernetController_newPacketAvailable
  5032 ;;		_ethernetController_pollInterruptFlags
  5033 ;;		_ethernetController_setLEDConfig
  5034 ;;		_ethernetController_updateLinkStatus
  5035 ;;		_ethernet_rxGetNewFrame
  5036 ;;		_intToString
  5037 ;;		_ipAdressToString
  5038 ;;		_ipv4_background
  5039 ;;		_ipv4_generateAutoIP
  5040 ;;		_ipv4_sendFrame
  5041 ;;		_ipv4_setIPSourceAddress
  5042 ;; This function is called by:
  5043 ;;		_main
  5044 ;; This function uses a non-reentrant model
  5045 ;;
  5046                           
  5047                           	psect	text10
  5048  000620                     __ptext10:
  5049                           	opt stack 0
  5050  000620                     _handleStackBackgroundTasks:
  5051                           	opt stack 15
  5052                           
  5053                           ;backgroundTasks.c: 41: unsigned char foo[10];
  5054                           ;backgroundTasks.c: 42: error_t errArp;
  5055                           ;backgroundTasks.c: 43: error_t errIPv4;
  5056                           ;backgroundTasks.c: 44: interruptFlags_t intf;
  5057                           ;backgroundTasks.c: 46: intf = ethernetController_pollInterruptFlags();
  5058                           
  5059                           ;incstack = 0
  5060  000620  EC54  F020         	call	_ethernetController_pollInterruptFlags	;wreg free
  5061  000624  C078  F1F3         	movff	?_ethernetController_pollInterruptFlags,handleStackBackgroundTasks@intf
  5062  000628  C079  F1F4         	movff	?_ethernetController_pollInterruptFlags+1,handleStackBackgroundTasks@intf+1
  5063                           
  5064                           ;backgroundTasks.c: 49: if (intf.LINKIF) {
  5065  00062C  0101               	movlb	1	; () banked
  5066  00062E  A7F3               	btfss	handleStackBackgroundTasks@intf& (0+255),3,b
  5067  000630  D044               	goto	l526
  5068                           
  5069                           ; BSR set to: 1
  5070                           ;backgroundTasks.c: 51: ethernetController_updateLinkStatus(&(stack->ethernet));
  5071  000632  0E22               	movlw	34
  5072  000634  25EC               	addwf	handleStackBackgroundTasks@stack& (0+255),w,b
  5073  000636  0100               	movlb	0	; () banked
  5074  000638  6F80               	movwf	ethernetController_updateLinkStatus@state& (0+255),b
  5075  00063A  0E00               	movlw	0
  5076  00063C  0101               	movlb	1	; () banked
  5077  00063E  21ED               	addwfc	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5078  000640  0100               	movlb	0	; () banked
  5079  000642  6F81               	movwf	(ethernetController_updateLinkStatus@state+1)& (0+255),b
  5080  000644  EC06  F02E         	call	_ethernetController_updateLinkStatus	;wreg free
  5081                           
  5082                           ;backgroundTasks.c: 53: if (stack->ethernet.link == LINK_ESTABLISHED) {
  5083  000648  0101               	movlb	1	; () banked
  5084  00064A  EE20 F022          	lfsr	2,34
  5085  00064E  51EC               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5086  000650  26D9               	addwf	fsr2l,f,c
  5087  000652  51ED               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5088  000654  22DA               	addwfc	fsr2h,f,c
  5089  000656  04DE               	decf	postinc2,w,c
  5090  000658  A4D8               	btfss	status,2,c
  5091  00065A  D01E               	goto	l527
  5092                           
  5093                           ; BSR set to: 1
  5094                           ;backgroundTasks.c: 54: ethernetController_setLEDConfig(LEDA, LED_ON);
  5095  00065C  0E00               	movlw	0
  5096  00065E  0100               	movlb	0	; () banked
  5097  000660  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  5098  000662  0E00               	movlw	0
  5099  000664  ECBF  F02D         	call	_ethernetController_setLEDConfig
  5100                           
  5101                           ;backgroundTasks.c: 55: ethernetController_setLEDConfig(LEDB, LED_TRANSMIT_RECEIVE_EVENT
      +                          S);
  5102  000668  0E02               	movlw	2
  5103  00066A  0100               	movlb	0	; () banked
  5104  00066C  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  5105  00066E  0E01               	movlw	1
  5106  000670  ECBF  F02D         	call	_ethernetController_setLEDConfig
  5107                           
  5108                           ;backgroundTasks.c: 56: ipv4_setIPSourceAddress(stack->source);
  5109  000674  0101               	movlb	1	; () banked
  5110  000676  EE20 F077          	lfsr	2,119
  5111  00067A  51EC               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5112  00067C  26D9               	addwf	fsr2l,f,c
  5113  00067E  51ED               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5114  000680  22DA               	addwfc	fsr2h,f,c
  5115  000682  CFDE F060          	movff	postinc2,ipv4_setIPSourceAddress@ip
  5116  000686  CFDE F061          	movff	postinc2,ipv4_setIPSourceAddress@ip+1
  5117  00068A  CFDE F062          	movff	postinc2,ipv4_setIPSourceAddress@ip+2
  5118  00068E  CFDE F063          	movff	postinc2,ipv4_setIPSourceAddress@ip+3
  5119  000692  ECD1  F036         	call	_ipv4_setIPSourceAddress	;wreg free
  5120                           
  5121                           ;backgroundTasks.c: 57: } else {
  5122  000696  D00E               	goto	l528
  5123  000698                     l527:
  5124                           
  5125                           ;backgroundTasks.c: 58: ethernetController_setLEDConfig(LEDA, LED_OFF);
  5126  000698  0E01               	movlw	1
  5127  00069A  0100               	movlb	0	; () banked
  5128  00069C  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  5129  00069E  0E00               	movlw	0
  5130  0006A0  ECBF  F02D         	call	_ethernetController_setLEDConfig
  5131                           
  5132                           ;backgroundTasks.c: 59: ethernetController_setLEDConfig(LEDB, LED_OFF);
  5133  0006A4  0E01               	movlw	1
  5134  0006A6  0100               	movlb	0	; () banked
  5135  0006A8  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  5136  0006AA  0E01               	movlw	1
  5137  0006AC  ECBF  F02D         	call	_ethernetController_setLEDConfig
  5138                           
  5139                           ;backgroundTasks.c: 60: arp_init();
  5140  0006B0  EC2E  F02D         	call	_arp_init	;wreg free
  5141  0006B4                     l528:
  5142                           
  5143                           ;backgroundTasks.c: 61: }
  5144                           ;backgroundTasks.c: 62: ethernetController_clearInterruptFlag(LINKIF);
  5145  0006B4  0E0B               	movlw	11
  5146  0006B6  EC37  F037         	call	_ethernetController_clearInterruptFlag
  5147  0006BA                     l526:
  5148                           
  5149                           ;backgroundTasks.c: 63: }
  5150                           ;backgroundTasks.c: 66: if (intf.PKTIF) {
  5151  0006BA  0101               	movlb	1	; () banked
  5152  0006BC  A9F3               	btfss	handleStackBackgroundTasks@intf& (0+255),4,b
  5153  0006BE  D00B               	goto	l530
  5154                           
  5155                           ; BSR set to: 1
  5156                           ;backgroundTasks.c: 68: if (ethernetController_newPacketAvailable()) {
  5157  0006C0  ECEE  F036         	call	_ethernetController_newPacketAvailable	;wreg free
  5158  0006C4  0900               	iorlw	0
  5159  0006C6  B4D8               	btfsc	status,2,c
  5160  0006C8  D006               	goto	l530
  5161                           
  5162                           ;backgroundTasks.c: 70: ethernet_rxGetNewFrame(&stack->newReceivedFrame);
  5163  0006CA  C1EC  F1DF         	movff	handleStackBackgroundTasks@stack,ethernet_rxGetNewFrame@frame
  5164  0006CE  C1ED  F1E0         	movff	handleStackBackgroundTasks@stack+1,ethernet_rxGetNewFrame@frame+1
  5165  0006D2  ECF3  F007         	call	_ethernet_rxGetNewFrame	;wreg free
  5166  0006D6                     l530:
  5167                           
  5168                           ;backgroundTasks.c: 71: }
  5169                           ;backgroundTasks.c: 72: }
  5170                           ;backgroundTasks.c: 75: if (intf.PCFULIF) {
  5171  0006D6  0101               	movlb	1	; () banked
  5172  0006D8  A3F4               	btfss	(handleStackBackgroundTasks@intf+1)& (0+255),1,b
  5173  0006DA  D031               	goto	l531
  5174                           
  5175                           ; BSR set to: 1
  5176                           ;backgroundTasks.c: 76: UART_setFormat(UART_COLOR_BG_RED);
  5177  0006DC  0E00               	movlw	0
  5178  0006DE  EC8E  F02B         	call	_UART_setFormat
  5179                           
  5180                           ;backgroundTasks.c: 77: UARTTransmitText("\a\n\r");
  5181  0006E2  0EEA               	movlw	low STR_17
  5182  0006E4  0100               	movlb	0	; () banked
  5183  0006E6  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  5184  0006E8  0E7F               	movlw	high STR_17
  5185  0006EA  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5186  0006EC  EC36  F032         	call	_UARTTransmitText	;wreg free
  5187                           
  5188                           ;backgroundTasks.c: 78: UARTTransmitText(UART_special(UART_LINE_SEPARATOR));
  5189  0006F0  0E00               	movlw	0
  5190  0006F2  EC8E  F036         	call	_UART_special
  5191  0006F6  C060  F08D         	movff	?_UART_special,UARTTransmitText@str
  5192  0006FA  C061  F08E         	movff	?_UART_special+1,UARTTransmitText@str+1
  5193  0006FE  EC36  F032         	call	_UARTTransmitText	;wreg free
  5194                           
  5195                           ;backgroundTasks.c: 79: UARTTransmitText("\n\r*** CRITICAL ERROR: RX BUF OVFL CAUSED SYS
      +                          TEM RESET ***\n\r");
  5196  000702  0E64               	movlw	low STR_18
  5197  000704  0100               	movlb	0	; () banked
  5198  000706  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  5199  000708  0E7C               	movlw	high STR_18
  5200  00070A  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5201  00070C  EC36  F032         	call	_UARTTransmitText	;wreg free
  5202                           
  5203                           ;backgroundTasks.c: 80: UARTTransmitText(UART_special(UART_LINE_SEPARATOR));
  5204  000710  0E00               	movlw	0
  5205  000712  EC8E  F036         	call	_UART_special
  5206  000716  C060  F08D         	movff	?_UART_special,UARTTransmitText@str
  5207  00071A  C061  F08E         	movff	?_UART_special+1,UARTTransmitText@str+1
  5208  00071E  EC36  F032         	call	_UARTTransmitText	;wreg free
  5209                           
  5210                           ;backgroundTasks.c: 81: UART_resetFormat();
  5211  000722  EC11  F037         	call	_UART_resetFormat	;wreg free
  5212                           
  5213                           ;backgroundTasks.c: 82: UARTTransmitText("\n\r");
  5214  000726  0EEB               	movlw	low (STR_17+1)
  5215  000728  0100               	movlb	0	; () banked
  5216  00072A  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  5217  00072C  0E7F               	movlw	high (STR_17+1)
  5218  00072E  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5219  000730  EC36  F032         	call	_UARTTransmitText	;wreg free
  5220                           
  5221                           ;backgroundTasks.c: 83: ethernetController_disableEthernet();
  5222  000734  EC57  F037         	call	_ethernetController_disableEthernet	;wreg free
  5223                           
  5224                           ;backgroundTasks.c: 84: ethernetController_init();
  5225  000738  EC8F  F02C         	call	_ethernetController_init	;wreg free
  5226  00073C  00FF               	reset		;# 
  5227  00073E                     l531:
  5228                           
  5229                           ;backgroundTasks.c: 86: }
  5230                           ;backgroundTasks.c: 93: if (stack->background.fPacketPending == 1) {
  5231  00073E  0101               	movlb	1	; () banked
  5232  000740  EE20 F034          	lfsr	2,52
  5233  000744  51EC               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5234  000746  26D9               	addwf	fsr2l,f,c
  5235  000748  51ED               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5236  00074A  22DA               	addwfc	fsr2h,f,c
  5237  00074C  04DE               	decf	postinc2,w,c
  5238  00074E  B4D8               	btfsc	status,2,c
  5239  000750  D14B               	goto	l543
  5240  000752  D155               	goto	l547
  5241  000754                     
  5242                           ;backgroundTasks.c: 107: if (stack->pendingPacketToSend.ipv4Header.totalLength > etherne
      +                          tController_getMTU()) {
  5243                           
  5244                           ; BSR set to: 1
  5245  000754  0101               	movlb	1	; () banked
  5246  000756  EE20 F039          	lfsr	2,57
  5247  00075A  51EC               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5248  00075C  26D9               	addwf	fsr2l,f,c
  5249  00075E  51ED               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5250  000760  22DA               	addwfc	fsr2h,f,c
  5251  000762  EC3E  F037         	call	_ethernetController_getMTU	;wreg free
  5252  000766  50DE               	movf	postinc2,w,c
  5253  000768  0100               	movlb	0	; () banked
  5254  00076A  5D60               	subwf	?_ethernetController_getMTU& (0+255),w,b
  5255  00076C  50DE               	movf	postinc2,w,c
  5256  00076E  5961               	subwfb	(?_ethernetController_getMTU+1)& (0+255),w,b
  5257  000770  B0D8               	btfsc	status,0,c
  5258  000772  D002               	goto	l545
  5259                           
  5260                           ; BSR set to: 0
  5261                           ;backgroundTasks.c: 117: state = PREPARE_FRAGMENTING;
  5262  000774  0E01               	movlw	1
  5263  000776  D0E6               	goto	L2
  5264  000778                     l545:
  5265                           
  5266                           ;backgroundTasks.c: 119: state = SEND_FRAME;
  5267                           
  5268                           ; BSR set to: 2
  5269  000778  0E02               	movlw	2
  5270  00077A  0102               	movlb	2	; () banked
  5271  00077C  6FD1               	movwf	handleStackBackgroundTasks@state& (0+255),b
  5272                           
  5273                           ; BSR set to: 2
  5274                           ;backgroundTasks.c: 120: currentPacket = stack->pendingPacketToSend;
  5275  00077E  0101               	movlb	1	; () banked
  5276  000780  EE20 F035          	lfsr	2,53
  5277  000784  51EC               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5278  000786  26D9               	addwf	fsr2l,f,c
  5279  000788  51ED               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5280  00078A  22DA               	addwfc	fsr2h,f,c
  5281  00078C  EE13  F048         	lfsr	1,handleStackBackgroundTasks@currentPacket
  5282  000790  0E41               	movlw	65
  5283  000792                     u15331:
  5284  000792  CFDB FFE3          	movff	plusw2,plusw1
  5285  000796  06E8               	decf	wreg,f,c
  5286  000798  E2FC               	bc	u15331
  5287                           
  5288                           ; BSR set to: 1
  5289                           ;backgroundTasks.c: 121: }
  5290                           ;backgroundTasks.c: 122: break;
  5291  00079A  D131               	goto	l547
  5292  00079C                     
  5293                           ;backgroundTasks.c: 124: currentPacket = stack->pendingPacketToSend;
  5294                           
  5295                           ; BSR set to: 1
  5296  00079C  0101               	movlb	1	; () banked
  5297  00079E  EE20 F035          	lfsr	2,53
  5298  0007A2  51EC               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5299  0007A4  26D9               	addwf	fsr2l,f,c
  5300  0007A6  51ED               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5301  0007A8  22DA               	addwfc	fsr2h,f,c
  5302  0007AA  EE13  F048         	lfsr	1,handleStackBackgroundTasks@currentPacket
  5303  0007AE  0E41               	movlw	65
  5304  0007B0                     u15341:
  5305  0007B0  CFDB FFE3          	movff	plusw2,plusw1
  5306  0007B4  06E8               	decf	wreg,f,c
  5307  0007B6  E2FC               	bc	u15341
  5308                           
  5309                           ; BSR set to: 1
  5310                           ;backgroundTasks.c: 125: if (numberOfPacketsSent == 0) {
  5311  0007B8  0102               	movlb	2	; () banked
  5312  0007BA  51D0               	movf	handleStackBackgroundTasks@numberOfPacketsSent& (0+255),w,b
  5313  0007BC  A4D8               	btfss	status,2,c
  5314  0007BE  D007               	goto	l549
  5315                           
  5316                           ; BSR set to: 2
  5317                           ;backgroundTasks.c: 127: currentPacket.ethernet.memory.length = ethernetController_getMT
      +                          U();
  5318  0007C0  EC3E  F037         	call	_ethernetController_getMTU	;wreg free
  5319  0007C4  C060  F37C         	movff	?_ethernetController_getMTU,handleStackBackgroundTasks@currentPacket+52
  5320  0007C8  C061  F37D         	movff	?_ethernetController_getMTU+1,handleStackBackgroundTasks@currentPacket+53
  5321  0007CC  D01B               	goto	l552
  5322  0007CE                     l549:
  5323                           
  5324                           ;backgroundTasks.c: 132: if (remainingLength >= ethernetController_getMTU())
  5325                           
  5326                           ; BSR set to: 1
  5327  0007CE  EC3E  F037         	call	_ethernetController_getMTU	;wreg free
  5328  0007D2  0101               	movlb	1	; () banked
  5329  0007D4  51FA               	movf	handleStackBackgroundTasks@remainingLength& (0+255),w,b
  5330  0007D6  6FEE               	movwf	??_handleStackBackgroundTasks& (0+255),b
  5331  0007D8  6BEF               	clrf	(??_handleStackBackgroundTasks+1)& (0+255),b
  5332  0007DA  0100               	movlb	0	; () banked
  5333  0007DC  5160               	movf	?_ethernetController_getMTU& (0+255),w,b
  5334  0007DE  0101               	movlb	1	; () banked
  5335  0007E0  5DEE               	subwf	??_handleStackBackgroundTasks& (0+255),w,b
  5336  0007E2  0100               	movlb	0	; () banked
  5337  0007E4  5161               	movf	(?_ethernetController_getMTU+1)& (0+255),w,b
  5338  0007E6  0101               	movlb	1	; () banked
  5339  0007E8  59EF               	subwfb	(??_handleStackBackgroundTasks+1)& (0+255),w,b
  5340  0007EA  A0D8               	btfss	status,0,c
  5341  0007EC  D007               	goto	l551
  5342                           
  5343                           ; BSR set to: 1
  5344                           ;backgroundTasks.c: 133: currentPacket.ethernet.memory.length = ethernetController_getMT
      +                          U();
  5345  0007EE  EC3E  F037         	call	_ethernetController_getMTU	;wreg free
  5346  0007F2  C060  F37C         	movff	?_ethernetController_getMTU,handleStackBackgroundTasks@currentPacket+52
  5347  0007F6  C061  F37D         	movff	?_ethernetController_getMTU+1,handleStackBackgroundTasks@currentPacket+53
  5348  0007FA  D004               	goto	l552
  5349  0007FC                     l551:
  5350                           
  5351                           ; BSR set to: 1
  5352                           ;backgroundTasks.c: 134: else
  5353                           ;backgroundTasks.c: 135: currentPacket.ethernet.memory.length = remainingLength;
  5354  0007FC  C1FA  F37C         	movff	handleStackBackgroundTasks@remainingLength,handleStackBackgroundTasks@currentPack
      +                          et+52
  5355  000800  0103               	movlb	3	; () banked
  5356  000802  6B7D               	clrf	(handleStackBackgroundTasks@currentPacket+53)& (0+255),b
  5357  000804                     l552:
  5358                           
  5359                           ;backgroundTasks.c: 136: currentPacket.ethernet.memory.end = currentPacket.ethernet.memo
      +                          ry.start + currentPacket.ethernet.memory.length;
  5360                           
  5361                           ; BSR set to: 3
  5362  000804  0103               	movlb	3	; () banked
  5363  000806  517C               	movf	(handleStackBackgroundTasks@currentPacket+52)& (0+255),w,b
  5364  000808  2578               	addwf	(handleStackBackgroundTasks@currentPacket+48)& (0+255),w,b
  5365  00080A  6F7A               	movwf	(handleStackBackgroundTasks@currentPacket+50)& (0+255),b
  5366  00080C  517D               	movf	(handleStackBackgroundTasks@currentPacket+53)& (0+255),w,b
  5367  00080E  2179               	addwfc	(handleStackBackgroundTasks@currentPacket+49)& (0+255),w,b
  5368  000810  6F7B               	movwf	(handleStackBackgroundTasks@currentPacket+51)& (0+255),b
  5369                           
  5370                           ;backgroundTasks.c: 137: remainingLength = currentPacket.ipv4Header.totalLength - curren
      +                          tPacket.ethernet.memory.length;
  5371  000812  517C               	movf	(handleStackBackgroundTasks@currentPacket+52)& (0+255),w,b
  5372  000814  0800               	sublw	0
  5373  000816  254C               	addwf	(handleStackBackgroundTasks@currentPacket+4)& (0+255),w,b
  5374  000818  0101               	movlb	1	; () banked
  5375  00081A  6FFA               	movwf	handleStackBackgroundTasks@remainingLength& (0+255),b
  5376                           
  5377                           ; BSR set to: 1
  5378                           ;backgroundTasks.c: 138: lastEndAddress = currentPacket.ethernet.memory.end;
  5379  00081C  C37A  F2CB         	movff	handleStackBackgroundTasks@currentPacket+50,handleStackBackgroundTasks@lastEndAdd
      +                          ress
  5380  000820  C37B  F2CC         	movff	handleStackBackgroundTasks@currentPacket+51,handleStackBackgroundTasks@lastEndAdd
      +                          ress+1
  5381                           
  5382                           ; BSR set to: 1
  5383                           ;backgroundTasks.c: 139: }
  5384                           ;backgroundTasks.c: 140: UARTTransmitText(intToString(currentPacket.ethernet.memory.star
      +                          t,10));
  5385                           
  5386                           ; BSR set to: 1
  5387  000824  C378  F084         	movff	handleStackBackgroundTasks@currentPacket+48,intToString@val
  5388  000828  C379  F085         	movff	handleStackBackgroundTasks@currentPacket+49,intToString@val+1
  5389  00082C  0100               	movlb	0	; () banked
  5390  00082E  6B86               	clrf	(intToString@val+2)& (0+255),b
  5391  000830  6B87               	clrf	(intToString@val+3)& (0+255),b
  5392  000832  0E0A               	movlw	10
  5393  000834  6F88               	movwf	intToString@b& (0+255),b
  5394  000836  EC0D  F035         	call	_intToString	;wreg free
  5395  00083A  C084  F08D         	movff	?_intToString,UARTTransmitText@str
  5396  00083E  C085  F08E         	movff	?_intToString+1,UARTTransmitText@str+1
  5397  000842  EC36  F032         	call	_UARTTransmitText	;wreg free
  5398                           
  5399                           ;backgroundTasks.c: 141: UARTTransmitText(" -> ");
  5400  000846  0ED0               	movlw	low STR_20
  5401  000848  0100               	movlb	0	; () banked
  5402  00084A  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  5403  00084C  0E7F               	movlw	high STR_20
  5404  00084E  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5405  000850  EC36  F032         	call	_UARTTransmitText	;wreg free
  5406                           
  5407                           ;backgroundTasks.c: 142: UARTTransmitText(intToString(currentPacket.ethernet.memory.end,
      +                          10));
  5408  000854  C37A  F084         	movff	handleStackBackgroundTasks@currentPacket+50,intToString@val
  5409  000858  C37B  F085         	movff	handleStackBackgroundTasks@currentPacket+51,intToString@val+1
  5410  00085C  0100               	movlb	0	; () banked
  5411  00085E  6B86               	clrf	(intToString@val+2)& (0+255),b
  5412  000860  6B87               	clrf	(intToString@val+3)& (0+255),b
  5413  000862  0E0A               	movlw	10
  5414  000864  6F88               	movwf	intToString@b& (0+255),b
  5415  000866  EC0D  F035         	call	_intToString	;wreg free
  5416  00086A  C084  F08D         	movff	?_intToString,UARTTransmitText@str
  5417  00086E  C085  F08E         	movff	?_intToString+1,UARTTransmitText@str+1
  5418  000872  EC36  F032         	call	_UARTTransmitText	;wreg free
  5419                           
  5420                           ;backgroundTasks.c: 143: UARTTransmitText(" (");
  5421  000876  0EF1               	movlw	low STR_21
  5422  000878  0100               	movlb	0	; () banked
  5423  00087A  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  5424  00087C  0E7F               	movlw	high STR_21
  5425  00087E  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5426  000880  EC36  F032         	call	_UARTTransmitText	;wreg free
  5427                           
  5428                           ;backgroundTasks.c: 144: UARTTransmitText(intToString(currentPacket.ethernet.memory.leng
      +                          th,10));
  5429  000884  C37C  F084         	movff	handleStackBackgroundTasks@currentPacket+52,intToString@val
  5430  000888  C37D  F085         	movff	handleStackBackgroundTasks@currentPacket+53,intToString@val+1
  5431  00088C  0100               	movlb	0	; () banked
  5432  00088E  6B86               	clrf	(intToString@val+2)& (0+255),b
  5433  000890  6B87               	clrf	(intToString@val+3)& (0+255),b
  5434  000892  0E0A               	movlw	10
  5435  000894  6F88               	movwf	intToString@b& (0+255),b
  5436  000896  EC0D  F035         	call	_intToString	;wreg free
  5437  00089A  C084  F08D         	movff	?_intToString,UARTTransmitText@str
  5438  00089E  C085  F08E         	movff	?_intToString+1,UARTTransmitText@str+1
  5439  0008A2  EC36  F032         	call	_UARTTransmitText	;wreg free
  5440                           
  5441                           ;backgroundTasks.c: 145: UARTTransmitText(") ");
  5442  0008A6  0EEE               	movlw	low STR_22
  5443  0008A8  0100               	movlb	0	; () banked
  5444  0008AA  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  5445  0008AC  0E7F               	movlw	high STR_22
  5446  0008AE  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5447  0008B0  EC36  F032         	call	_UARTTransmitText	;wreg free
  5448                           
  5449                           ;backgroundTasks.c: 146: UARTTransmitText("Remaining Length is ");
  5450  0008B4  0E00               	movlw	low STR_23
  5451  0008B6  0100               	movlb	0	; () banked
  5452  0008B8  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  5453  0008BA  0E7E               	movlw	high STR_23
  5454  0008BC  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5455  0008BE  EC36  F032         	call	_UARTTransmitText	;wreg free
  5456                           
  5457                           ;backgroundTasks.c: 147: UARTTransmitText(intToString(remainingLength,10));
  5458  0008C2  0101               	movlb	1	; () banked
  5459  0008C4  51FA               	movf	handleStackBackgroundTasks@remainingLength& (0+255),w,b
  5460  0008C6  0100               	movlb	0	; () banked
  5461  0008C8  6F84               	movwf	intToString@val& (0+255),b
  5462  0008CA  6B85               	clrf	(intToString@val+1)& (0+255),b
  5463  0008CC  6B86               	clrf	(intToString@val+2)& (0+255),b
  5464  0008CE  6B87               	clrf	(intToString@val+3)& (0+255),b
  5465  0008D0  0E0A               	movlw	10
  5466  0008D2  6F88               	movwf	intToString@b& (0+255),b
  5467  0008D4  EC0D  F035         	call	_intToString	;wreg free
  5468  0008D8  C084  F08D         	movff	?_intToString,UARTTransmitText@str
  5469  0008DC  C085  F08E         	movff	?_intToString+1,UARTTransmitText@str+1
  5470  0008E0  EC36  F032         	call	_UARTTransmitText	;wreg free
  5471                           
  5472                           ;backgroundTasks.c: 148: UARTTransmitText("\n\r");
  5473  0008E4  0EEB               	movlw	low (STR_17+1)
  5474  0008E6  0100               	movlb	0	; () banked
  5475  0008E8  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  5476  0008EA  0E7F               	movlw	high (STR_17+1)
  5477  0008EC  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5478  0008EE  EC36  F032         	call	_UARTTransmitText	;wreg free
  5479                           
  5480                           ;backgroundTasks.c: 149: state = SEND_FRAME;
  5481  0008F2  0E02               	movlw	2
  5482  0008F4  D027               	goto	L2
  5483  0008F6                     
  5484                           ; BSR set to: 2
  5485                           ;backgroundTasks.c: 152: errIPv4 = ipv4_sendFrame(stack->pendingPacketToSend);
  5486                           
  5487                           ; BSR set to: 2
  5488  0008F6  0101               	movlb	1	; () banked
  5489  0008F8  EE20 F035          	lfsr	2,53
  5490  0008FC  51EC               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5491  0008FE  26D9               	addwf	fsr2l,f,c
  5492  000900  51ED               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5493  000902  22DA               	addwfc	fsr2h,f,c
  5494  000904  EE01  F034         	lfsr	0,ipv4_sendFrame@ipPacket
  5495  000908  0E41               	movlw	65
  5496  00090A                     u15371:
  5497  00090A  CFDB FFEB          	movff	plusw2,plusw0
  5498  00090E  06E8               	decf	wreg,f,c
  5499  000910  E2FC               	bc	u15371
  5500  000912  ECDA  F01E         	call	_ipv4_sendFrame	;wreg free
  5501  000916  C134  F1F5         	movff	?_ipv4_sendFrame,handleStackBackgroundTasks@errIPv4
  5502  00091A  C135  F1F6         	movff	?_ipv4_sendFrame+1,handleStackBackgroundTasks@errIPv4+1
  5503  00091E  C136  F1F7         	movff	?_ipv4_sendFrame+2,handleStackBackgroundTasks@errIPv4+2
  5504                           
  5505                           ;backgroundTasks.c: 153: numberOfPacketsSent++;
  5506  000922  0102               	movlb	2	; () banked
  5507  000924  2BD0               	incf	handleStackBackgroundTasks@numberOfPacketsSent& (0+255),f,b
  5508                           
  5509                           ; BSR set to: 2
  5510                           ;backgroundTasks.c: 154: if (errIPv4.module == ERROR_MODULE_ARP) {
  5511  000926  0E03               	movlw	3
  5512  000928  0101               	movlb	1	; () banked
  5513  00092A  19F5               	xorwf	handleStackBackgroundTasks@errIPv4& (0+255),w,b
  5514  00092C  B4D8               	btfsc	status,2,c
  5515  00092E  D041               	goto	l555
  5516  000930  D066               	goto	l547
  5517  000932                     
  5518                           ; BSR set to: 1
  5519                           ;backgroundTasks.c: 159: stack->background.fPacketPending = 0;
  5520                           
  5521                           ; BSR set to: 1
  5522  000932  EE20 F034          	lfsr	2,52
  5523  000936  51EC               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5524  000938  26D9               	addwf	fsr2l,f,c
  5525  00093A  51ED               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5526  00093C  22DA               	addwfc	fsr2h,f,c
  5527  00093E  0E00               	movlw	0
  5528  000940  6EDF               	movwf	indf2,c
  5529                           
  5530                           ; BSR set to: 1
  5531                           ;backgroundTasks.c: 160: state = INIT;
  5532  000942  0E00               	movlw	0
  5533  000944                     L2:
  5534  000944  0102               	movlb	2	; () banked
  5535  000946  6FD1               	movwf	handleStackBackgroundTasks@state& (0+255),b
  5536                           
  5537                           ;backgroundTasks.c: 161: break;
  5538  000948  D05A               	goto	l547
  5539  00094A                     
  5540                           ;backgroundTasks.c: 164: UART_setFormat(UART_COLOR_BG_RED);
  5541                           
  5542                           ; BSR set to: 2
  5543  00094A  0E00               	movlw	0
  5544  00094C  EC8E  F02B         	call	_UART_setFormat
  5545                           
  5546                           ;backgroundTasks.c: 165: UARTTransmitText("[IPv4]: Failed to resolve ");
  5547  000950  0E6A               	movlw	low STR_25
  5548  000952  0100               	movlb	0	; () banked
  5549  000954  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  5550  000956  0E7D               	movlw	high STR_25
  5551  000958  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5552  00095A  EC36  F032         	call	_UARTTransmitText	;wreg free
  5553                           
  5554                           ;backgroundTasks.c: 166: UARTTransmitText(ipAdressToString(stack->pendingPacketToSend.ip
      +                          v4Header.destination));
  5555  00095E  0101               	movlb	1	; () banked
  5556  000960  EE20 F048          	lfsr	2,72
  5557  000964  51EC               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5558  000966  26D9               	addwf	fsr2l,f,c
  5559  000968  51ED               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5560  00096A  22DA               	addwfc	fsr2h,f,c
  5561  00096C  CFDE F084          	movff	postinc2,ipAdressToString@ip
  5562  000970  CFDE F085          	movff	postinc2,ipAdressToString@ip+1
  5563  000974  CFDE F086          	movff	postinc2,ipAdressToString@ip+2
  5564  000978  CFDE F087          	movff	postinc2,ipAdressToString@ip+3
  5565  00097C  EC76  F023         	call	_ipAdressToString	;wreg free
  5566  000980  C084  F08D         	movff	?_ipAdressToString,UARTTransmitText@str
  5567  000984  C085  F08E         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  5568  000988  EC36  F032         	call	_UARTTransmitText	;wreg free
  5569                           
  5570                           ;backgroundTasks.c: 167: UART_resetFormat();
  5571  00098C  EC11  F037         	call	_UART_resetFormat	;wreg free
  5572                           
  5573                           ;backgroundTasks.c: 168: UARTTransmitText("\n\r");
  5574  000990  0EEB               	movlw	low (STR_17+1)
  5575  000992  0100               	movlb	0	; () banked
  5576  000994  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  5577  000996  0E7F               	movlw	high (STR_17+1)
  5578  000998  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5579  00099A  EC36  F032         	call	_UARTTransmitText	;wreg free
  5580                           
  5581                           ;backgroundTasks.c: 171: stack->background.fPacketPending = 0;
  5582  00099E  0101               	movlb	1	; () banked
  5583  0009A0  EE20 F034          	lfsr	2,52
  5584  0009A4  51EC               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5585  0009A6  26D9               	addwf	fsr2l,f,c
  5586  0009A8  51ED               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5587  0009AA  22DA               	addwfc	fsr2h,f,c
  5588  0009AC  0E00               	movlw	0
  5589  0009AE  6EDF               	movwf	indf2,c
  5590                           
  5591                           ; BSR set to: 1
  5592                           ;backgroundTasks.c: 175: }
  5593                           
  5594                           ; BSR set to: 1
  5595                           ;backgroundTasks.c: 174: break;
  5596                           
  5597                           ;backgroundTasks.c: 173: default:
  5598                           
  5599                           ;backgroundTasks.c: 172: break;
  5600  0009B0  D026               	goto	l547
  5601  0009B2                     l555:
  5602                           
  5603                           ; BSR set to: 1
  5604                           
  5605                           ; BSR set to: 1
  5606  0009B2  EE21  F0F6         	lfsr	2,handleStackBackgroundTasks@errIPv4+1
  5607  0009B6  CFDE F1EE          	movff	postinc2,??_handleStackBackgroundTasks
  5608  0009BA  CFDD F1EF          	movff	postdec2,??_handleStackBackgroundTasks+1
  5609                           
  5610                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  5611                           ; Switch size 1, requested type "space"
  5612                           ; Number of cases is 2, Range of values is 0 to 1
  5613                           ; switch strategies available:
  5614                           ; Name         Instructions Cycles
  5615                           ; simple_byte            7     4 (average)
  5616                           ;	Chosen strategy is simple_byte
  5617  0009BE  51EF               	movf	(??_handleStackBackgroundTasks+1)& (0+255),w,b
  5618  0009C0  0A00               	xorlw	0	; case 0
  5619  0009C2  B4D8               	btfsc	status,2,c
  5620  0009C4  D004               	goto	l13100
  5621  0009C6  0A01               	xorlw	1	; case 1
  5622  0009C8  B4D8               	btfsc	status,2,c
  5623  0009CA  D006               	goto	l13102
  5624  0009CC  D018               	goto	l547
  5625  0009CE                     l13100:
  5626                           
  5627                           ; BSR set to: 1
  5628                           ; Switch size 1, requested type "space"
  5629                           ; Number of cases is 1, Range of values is 0 to 0
  5630                           ; switch strategies available:
  5631                           ; Name         Instructions Cycles
  5632                           ; simple_byte            4     3 (average)
  5633                           ;	Chosen strategy is simple_byte
  5634  0009CE  51EE               	movf	??_handleStackBackgroundTasks& (0+255),w,b
  5635  0009D0  0A00               	xorlw	0	; case 0
  5636  0009D2  B4D8               	btfsc	status,2,c
  5637  0009D4  D7AE               	goto	l558
  5638  0009D6  D013               	goto	l547
  5639  0009D8                     l13102:
  5640                           
  5641                           ; BSR set to: 1
  5642                           ; Switch size 1, requested type "space"
  5643                           ; Number of cases is 2, Range of values is 145 to 148
  5644                           ; switch strategies available:
  5645                           ; Name         Instructions Cycles
  5646                           ; simple_byte            7     4 (average)
  5647                           ;	Chosen strategy is simple_byte
  5648  0009D8  51EE               	movf	??_handleStackBackgroundTasks& (0+255),w,b
  5649  0009DA  0A91               	xorlw	145	; case 145
  5650  0009DC  B4D8               	btfsc	status,2,c
  5651  0009DE  D00F               	goto	l547
  5652  0009E0  0A05               	xorlw	5	; case 148
  5653  0009E2  B4D8               	btfsc	status,2,c
  5654  0009E4  D7B2               	goto	l559
  5655                           
  5656                           ; BSR set to: 1
  5657                           ;backgroundTasks.c: 180: }
  5658                           
  5659                           ; BSR set to: 1
  5660                           ;backgroundTasks.c: 178: }
  5661                           ;backgroundTasks.c: 179: break;
  5662                           
  5663                           ; BSR set to: 1
  5664                           
  5665                           ; BSR set to: 1
  5666                           ;backgroundTasks.c: 176: } else {
  5667  0009E6  D00B               	goto	l547
  5668  0009E8                     l543:
  5669                           
  5670                           ; BSR set to: 1
  5671                           
  5672                           ; BSR set to: 1
  5673  0009E8  0102               	movlb	2	; () banked
  5674  0009EA  51D1               	movf	handleStackBackgroundTasks@state& (0+255),w,b
  5675                           
  5676                           ; Switch size 1, requested type "space"
  5677                           ; Number of cases is 3, Range of values is 0 to 2
  5678                           ; switch strategies available:
  5679                           ; Name         Instructions Cycles
  5680                           ; simple_byte           10     6 (average)
  5681                           ;	Chosen strategy is simple_byte
  5682  0009EC  0A00               	xorlw	0	; case 0
  5683  0009EE  B4D8               	btfsc	status,2,c
  5684  0009F0  D6B1               	goto	l544
  5685  0009F2  0A01               	xorlw	1	; case 1
  5686  0009F4  B4D8               	btfsc	status,2,c
  5687  0009F6  D6D2               	goto	l548
  5688  0009F8  0A03               	xorlw	3	; case 2
  5689  0009FA  B4D8               	btfsc	status,2,c
  5690  0009FC  D77C               	goto	l553
  5691  0009FE                     l547:
  5692                           
  5693                           ;backgroundTasks.c: 183: }
  5694                           ;backgroundTasks.c: 186: errArp = arp_background(stack->ethernet.link);
  5695                           
  5696                           ; BSR set to: 2
  5697                           
  5698                           ; BSR set to: 2
  5699  0009FE  0101               	movlb	1	; () banked
  5700  000A00  EE20 F022          	lfsr	2,34
  5701  000A04  51EC               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5702  000A06  26D9               	addwf	fsr2l,f,c
  5703  000A08  51ED               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5704  000A0A  22DA               	addwfc	fsr2h,f,c
  5705  000A0C  50DF               	movf	indf2,w,c
  5706  000A0E  ECB9  F025         	call	_arp_background
  5707  000A12  C151  F1F0         	movff	?_arp_background,handleStackBackgroundTasks@errArp
  5708  000A16  C152  F1F1         	movff	?_arp_background+1,handleStackBackgroundTasks@errArp+1
  5709  000A1A  C153  F1F2         	movff	?_arp_background+2,handleStackBackgroundTasks@errArp+2
  5710                           
  5711                           ;backgroundTasks.c: 187: errIPv4 = ipv4_background(stack->ethernet.link);
  5712  000A1E  0101               	movlb	1	; () banked
  5713  000A20  EE20 F022          	lfsr	2,34
  5714  000A24  51EC               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5715  000A26  26D9               	addwf	fsr2l,f,c
  5716  000A28  51ED               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5717  000A2A  22DA               	addwfc	fsr2h,f,c
  5718  000A2C  50DF               	movf	indf2,w,c
  5719  000A2E  EC00  F021         	call	_ipv4_background
  5720  000A32  C060  F1F5         	movff	?_ipv4_background,handleStackBackgroundTasks@errIPv4
  5721  000A36  C061  F1F6         	movff	?_ipv4_background+1,handleStackBackgroundTasks@errIPv4+1
  5722  000A3A  C062  F1F7         	movff	?_ipv4_background+2,handleStackBackgroundTasks@errIPv4+2
  5723                           
  5724                           ;backgroundTasks.c: 189: if (errIPv4.module == ERROR_MODULE_IPv4 &&
  5725                           ;backgroundTasks.c: 190: errIPv4.code == ERROR_IPv4_ADDRESS_ALREADY_IN_USE) {
  5726  000A3E  0E04               	movlw	4
  5727  000A40  0101               	movlb	1	; () banked
  5728  000A42  19F5               	xorwf	handleStackBackgroundTasks@errIPv4& (0+255),w,b
  5729  000A44  A4D8               	btfss	status,2,c
  5730  000A46  0012               	return	
  5731                           
  5732                           ; BSR set to: 1
  5733  000A48  0EF5               	movlw	245
  5734  000A4A  19F6               	xorwf	(handleStackBackgroundTasks@errIPv4+1)& (0+255),w,b
  5735  000A4C  E15D               	bnz	l563
  5736  000A4E  05F7               	decf	(handleStackBackgroundTasks@errIPv4+2)& (0+255),w,b
  5737  000A50  A4D8               	btfss	status,2,c
  5738  000A52  0012               	return	
  5739                           
  5740                           ; BSR set to: 1
  5741                           ;backgroundTasks.c: 192: UART_setFormat(UART_COLOR_BG_RED);
  5742  000A54  0E00               	movlw	0
  5743  000A56  EC8E  F02B         	call	_UART_setFormat
  5744                           
  5745                           ;backgroundTasks.c: 193: UARTTransmitText("[IPv4]: Address conflict detected.\n\r");
  5746  000A5A  0E04               	movlw	low STR_27
  5747  000A5C  0100               	movlb	0	; () banked
  5748  000A5E  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  5749  000A60  0E7D               	movlw	high STR_27
  5750  000A62  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5751  000A64  EC36  F032         	call	_UARTTransmitText	;wreg free
  5752                           
  5753                           ;backgroundTasks.c: 194: UART_resetFormat();
  5754  000A68  EC11  F037         	call	_UART_resetFormat	;wreg free
  5755                           
  5756                           ;backgroundTasks.c: 196: stack->source = ipv4_generateAutoIP();
  5757  000A6C  EC7A  F033         	call	_ipv4_generateAutoIP	;wreg free
  5758  000A70  0101               	movlb	1	; () banked
  5759  000A72  EE20 F077          	lfsr	2,119
  5760  000A76  51EC               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5761  000A78  26D9               	addwf	fsr2l,f,c
  5762  000A7A  51ED               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5763  000A7C  22DA               	addwfc	fsr2h,f,c
  5764  000A7E  0100               	movlb	0	; () banked
  5765  000A80  C074  FFDE         	movff	?_ipv4_generateAutoIP,postinc2
  5766  000A84  C075  FFDE         	movff	?_ipv4_generateAutoIP+1,postinc2
  5767  000A88  C076  FFDE         	movff	?_ipv4_generateAutoIP+2,postinc2
  5768  000A8C  C077  FFDE         	movff	?_ipv4_generateAutoIP+3,postinc2
  5769                           
  5770                           ; BSR set to: 0
  5771                           ;backgroundTasks.c: 198: UART_setFormat(UART_COLOR_BG_RED);
  5772  000A90  0E00               	movlw	0
  5773  000A92  EC8E  F02B         	call	_UART_setFormat
  5774                           
  5775                           ;backgroundTasks.c: 199: UARTTransmitText("[IPv4]: Setting IPv4 Src Address to ");
  5776  000A96  0E29               	movlw	low STR_28
  5777  000A98  0100               	movlb	0	; () banked
  5778  000A9A  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  5779  000A9C  0E7D               	movlw	high STR_28
  5780  000A9E  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5781  000AA0  EC36  F032         	call	_UARTTransmitText	;wreg free
  5782                           
  5783                           ;backgroundTasks.c: 200: UARTTransmitText(ipAdressToString(stack->source));
  5784  000AA4  0101               	movlb	1	; () banked
  5785  000AA6  EE20 F077          	lfsr	2,119
  5786  000AAA  51EC               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5787  000AAC  26D9               	addwf	fsr2l,f,c
  5788  000AAE  51ED               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5789  000AB0  22DA               	addwfc	fsr2h,f,c
  5790  000AB2  CFDE F084          	movff	postinc2,ipAdressToString@ip
  5791  000AB6  CFDE F085          	movff	postinc2,ipAdressToString@ip+1
  5792  000ABA  CFDE F086          	movff	postinc2,ipAdressToString@ip+2
  5793  000ABE  CFDE F087          	movff	postinc2,ipAdressToString@ip+3
  5794  000AC2  EC76  F023         	call	_ipAdressToString	;wreg free
  5795  000AC6  C084  F08D         	movff	?_ipAdressToString,UARTTransmitText@str
  5796  000ACA  C085  F08E         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  5797  000ACE  EC36  F032         	call	_UARTTransmitText	;wreg free
  5798                           
  5799                           ;backgroundTasks.c: 201: UARTTransmitText("\n\r");
  5800  000AD2  0EEB               	movlw	low (STR_17+1)
  5801  000AD4  0100               	movlb	0	; () banked
  5802  000AD6  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  5803  000AD8  0E7F               	movlw	high (STR_17+1)
  5804  000ADA  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5805  000ADC  EC36  F032         	call	_UARTTransmitText	;wreg free
  5806                           
  5807                           ;backgroundTasks.c: 202: UART_resetFormat();
  5808  000AE0  EC11  F037         	call	_UART_resetFormat	;wreg free
  5809                           
  5810                           ;backgroundTasks.c: 204: ipv4_setIPSourceAddress(stack->source);
  5811  000AE4  0101               	movlb	1	; () banked
  5812  000AE6  EE20 F077          	lfsr	2,119
  5813  000AEA  51EC               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5814  000AEC  26D9               	addwf	fsr2l,f,c
  5815  000AEE  51ED               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5816  000AF0  22DA               	addwfc	fsr2h,f,c
  5817  000AF2  CFDE F060          	movff	postinc2,ipv4_setIPSourceAddress@ip
  5818  000AF6  CFDE F061          	movff	postinc2,ipv4_setIPSourceAddress@ip+1
  5819  000AFA  CFDE F062          	movff	postinc2,ipv4_setIPSourceAddress@ip+2
  5820  000AFE  CFDE F063          	movff	postinc2,ipv4_setIPSourceAddress@ip+3
  5821  000B02  ECD1  F036         	call	_ipv4_setIPSourceAddress	;wreg free
  5822  000B06  0012               	return	
  5823  000B08                     l563:
  5824  000B08  0012               	return		;funcret
  5825  000B0A                     __end_of_handleStackBackgroundTasks:
  5826                           	opt stack 0
  5827                           tblptru	equ	0xFF8
  5828                           tblptrh	equ	0xFF7
  5829                           tblptrl	equ	0xFF6
  5830                           tablat	equ	0xFF5
  5831                           prodh	equ	0xFF4
  5832                           prodl	equ	0xFF3
  5833                           intcon	equ	0xFF2
  5834                           intcon3	equ	0xFF0
  5835                           indf0	equ	0xFEF
  5836                           postinc0	equ	0xFEE
  5837                           plusw0	equ	0xFEB
  5838                           fsr0h	equ	0xFEA
  5839                           fsr0l	equ	0xFE9
  5840                           wreg	equ	0xFE8
  5841                           postdec1	equ	0xFE5
  5842                           plusw1	equ	0xFE3
  5843                           fsr1l	equ	0xFE1
  5844                           indf2	equ	0xFDF
  5845                           postinc2	equ	0xFDE
  5846                           postdec2	equ	0xFDD
  5847                           plusw2	equ	0xFDB
  5848                           fsr2h	equ	0xFDA
  5849                           fsr2l	equ	0xFD9
  5850                           status	equ	0xFD8
  5851                           
  5852 ;; *************** function _ipv4_setIPSourceAddress *****************
  5853 ;; Defined at:
  5854 ;;		line 370 in file "src/stack/protocols/ipv4.c"
  5855 ;; Parameters:    Size  Location     Type
  5856 ;;  ip              4    0[BANK0 ] struct ipv4_address
  5857 ;; Auto vars:     Size  Location     Type
  5858 ;;		None
  5859 ;; Return value:  Size  Location     Type
  5860 ;;                  1    wreg      void 
  5861 ;; Registers used:
  5862 ;;		None
  5863 ;; Tracked objects:
  5864 ;;		On entry : 0/0
  5865 ;;		On exit  : 0/0
  5866 ;;		Unchanged: 0/0
  5867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5868 ;;      Params:         0       4       0       0       0       0       0       0       0
  5869 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5870 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5871 ;;      Totals:         0       4       0       0       0       0       0       0       0
  5872 ;;Total ram usage:        4 bytes
  5873 ;; Hardware stack levels used:    1
  5874 ;; Hardware stack levels required when called:    4
  5875 ;; This function calls:
  5876 ;;		Nothing
  5877 ;; This function is called by:
  5878 ;;		_handleStackBackgroundTasks
  5879 ;; This function uses a non-reentrant model
  5880 ;;
  5881                           
  5882                           	psect	text11
  5883  006DA2                     __ptext11:
  5884                           	opt stack 0
  5885  006DA2                     _ipv4_setIPSourceAddress:
  5886                           	opt stack 25
  5887                           
  5888                           ;ipv4.c: 371: ipPreliminarySource = ip;
  5889                           
  5890                           ;incstack = 0
  5891  006DA2  C060  F2D8         	movff	ipv4_setIPSourceAddress@ip,_ipPreliminarySource
  5892  006DA6  C061  F2D9         	movff	ipv4_setIPSourceAddress@ip+1,_ipPreliminarySource+1
  5893  006DAA  C062  F2DA         	movff	ipv4_setIPSourceAddress@ip+2,_ipPreliminarySource+2
  5894  006DAE  C063  F2DB         	movff	ipv4_setIPSourceAddress@ip+3,_ipPreliminarySource+3
  5895                           
  5896                           ;ipv4.c: 372: fSrcAddrChanged = 1u;
  5897  006DB2  804E               	bsf	_fSrcAddrChanged/(0+8),_fSrcAddrChanged& (0+7),c
  5898  006DB4  0012               	return		;funcret
  5899  006DB6                     __end_of_ipv4_setIPSourceAddress:
  5900                           	opt stack 0
  5901                           tblptru	equ	0xFF8
  5902                           tblptrh	equ	0xFF7
  5903                           tblptrl	equ	0xFF6
  5904                           tablat	equ	0xFF5
  5905                           prodh	equ	0xFF4
  5906                           prodl	equ	0xFF3
  5907                           intcon	equ	0xFF2
  5908                           intcon3	equ	0xFF0
  5909                           indf0	equ	0xFEF
  5910                           postinc0	equ	0xFEE
  5911                           plusw0	equ	0xFEB
  5912                           fsr0h	equ	0xFEA
  5913                           fsr0l	equ	0xFE9
  5914                           wreg	equ	0xFE8
  5915                           postdec1	equ	0xFE5
  5916                           plusw1	equ	0xFE3
  5917                           fsr1l	equ	0xFE1
  5918                           indf2	equ	0xFDF
  5919                           postinc2	equ	0xFDE
  5920                           postdec2	equ	0xFDD
  5921                           plusw2	equ	0xFDB
  5922                           fsr2h	equ	0xFDA
  5923                           fsr2l	equ	0xFD9
  5924                           status	equ	0xFD8
  5925                           
  5926 ;; *************** function _ipv4_sendFrame *****************
  5927 ;; Defined at:
  5928 ;;		line 54 in file "src/stack/protocols/ipv4.c"
  5929 ;; Parameters:    Size  Location     Type
  5930 ;;  ipPacket       66   52[BANK1 ] struct ipv4_packet
  5931 ;; Auto vars:     Size  Location     Type
  5932 ;;  err             3  157[BANK0 ] struct error
  5933 ;;  index           1  156[BANK0 ] unsigned char 
  5934 ;; Return value:  Size  Location     Type
  5935 ;;                  3   52[BANK1 ] struct error
  5936 ;; Registers used:
  5937 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5938 ;; Tracked objects:
  5939 ;;		On entry : 0/0
  5940 ;;		On exit  : 0/0
  5941 ;;		Unchanged: 0/0
  5942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5943 ;;      Params:         0       0      66       0       0       0       0       0       0
  5944 ;;      Locals:         0       4       0       0       0       0       0       0       0
  5945 ;;      Temps:          0       0       8       0       0       0       0       0       0
  5946 ;;      Totals:         0       4      74       0       0       0       0       0       0
  5947 ;;Total ram usage:       78 bytes
  5948 ;; Hardware stack levels used:    1
  5949 ;; Hardware stack levels required when called:   11
  5950 ;; This function calls:
  5951 ;;		_arp_checkForEntry
  5952 ;;		_arp_getEntryFromTable
  5953 ;;		_arp_sendRequest
  5954 ;;		_ethernetController_getMacAddress
  5955 ;;		_ethernetController_sendPacket
  5956 ;;		_ethernetController_writeDestinationMACAddress
  5957 ;;		_getMillis
  5958 ;; This function is called by:
  5959 ;;		_handleStackBackgroundTasks
  5960 ;; This function uses a non-reentrant model
  5961 ;;
  5962                           
  5963                           	psect	text12
  5964  003DB4                     __ptext12:
  5965                           	opt stack 0
  5966  003DB4                     _ipv4_sendFrame:
  5967                           	opt stack 18
  5968                           
  5969                           ;ipv4.c: 55: error_t err;
  5970                           ;ipv4.c: 56: err.module = ERROR_MODULE_ARP;
  5971                           
  5972                           ;incstack = 0
  5973  003DB4  0E03               	movlw	3
  5974  003DB6  0100               	movlb	0	; () banked
  5975  003DB8  6FFD               	movwf	ipv4_sendFrame@err& (0+255),b
  5976                           
  5977                           ;ipv4.c: 57: err.code = ERROR_ARP_WAITING;
  5978  003DBA  0E01               	movlw	1
  5979  003DBC  6FFF               	movwf	(ipv4_sendFrame@err+2)& (0+255),b
  5980  003DBE  0E91               	movlw	145
  5981  003DC0  6FFE               	movwf	(ipv4_sendFrame@err+1)& (0+255),b
  5982                           
  5983                           ; BSR set to: 0
  5984                           ;ipv4.c: 58: uint8_t index;
  5985                           ;ipv4.c: 59: uint8_t static failedResolveCounter = 0;
  5986                           ;ipv4.c: 60: time_t static oldTime = 0;
  5987                           ;ipv4.c: 64: if (arp_checkForEntry(ipPacket.ipv4Header.destination, &index)) {
  5988  003DC2  C147  F067         	movff	ipv4_sendFrame@ipPacket+19,arp_checkForEntry@ip
  5989  003DC6  C148  F068         	movff	ipv4_sendFrame@ipPacket+20,arp_checkForEntry@ip+1
  5990  003DCA  C149  F069         	movff	ipv4_sendFrame@ipPacket+21,arp_checkForEntry@ip+2
  5991  003DCE  C14A  F06A         	movff	ipv4_sendFrame@ipPacket+22,arp_checkForEntry@ip+3
  5992  003DD2  0EFC               	movlw	low ipv4_sendFrame@index
  5993  003DD4  6F6B               	movwf	arp_checkForEntry@index& (0+255),b
  5994  003DD6  0E00               	movlw	high ipv4_sendFrame@index
  5995  003DD8  6F6C               	movwf	(arp_checkForEntry@index+1)& (0+255),b
  5996  003DDA  ECDA  F029         	call	_arp_checkForEntry	;wreg free
  5997  003DDE  0900               	iorlw	0
  5998  003DE0  B4D8               	btfsc	status,2,c
  5999  003DE2  D044               	goto	l1133
  6000                           
  6001                           ;ipv4.c: 66: ipPacket.ethernet.destination = arp_getEntryFromTable(index);
  6002  003DE4  0100               	movlb	0	; () banked
  6003  003DE6  51FC               	movf	ipv4_sendFrame@index& (0+255),w,b
  6004  003DE8  EC55  F035         	call	_arp_getEntryFromTable
  6005  003DEC  EE21  F05C         	lfsr	2,ipv4_sendFrame@ipPacket+40
  6006  003DF0  0E05               	movlw	5
  6007  003DF2                     u15041:
  6008  003DF2  CFEB FFDB          	movff	plusw0,plusw2
  6009  003DF6  06E8               	decf	wreg,f,c
  6010  003DF8  E2FC               	bc	u15041
  6011                           
  6012                           ;ipv4.c: 75: ipPacket.ethernet.source = ethernetController_getMacAddress();
  6013  003DFA  EC04  F030         	call	_ethernetController_getMacAddress	;wreg free
  6014  003DFE  EE21  F056         	lfsr	2,ipv4_sendFrame@ipPacket+34
  6015  003E02  0E05               	movlw	5
  6016  003E04                     u15051:
  6017  003E04  CFEB FFDB          	movff	plusw0,plusw2
  6018  003E08  06E8               	decf	wreg,f,c
  6019  003E0A  E2FC               	bc	u15051
  6020                           
  6021                           ;ipv4.c: 77: ethernetController_writeDestinationMACAddress(ipPacket.ethernet.destination
      +                          , ipPacket.ethernet.memory);
  6022  003E0C  EE21  F05C         	lfsr	2,ipv4_sendFrame@ipPacket+40
  6023  003E10  EE00  F06F         	lfsr	0,ethernetController_writeDestinationMACAddress@addr
  6024  003E14  0E05               	movlw	5
  6025  003E16                     u15061:
  6026  003E16  CFDB FFEB          	movff	plusw2,plusw0
  6027  003E1A  06E8               	decf	wreg,f,c
  6028  003E1C  E2FC               	bc	u15061
  6029  003E1E  EE21  F064         	lfsr	2,ipv4_sendFrame@ipPacket+48
  6030  003E22  EE00  F075         	lfsr	0,ethernetController_writeDestinationMACAddress@field
  6031  003E26  0E08               	movlw	8
  6032  003E28                     u15071:
  6033  003E28  CFDB FFEB          	movff	plusw2,plusw0
  6034  003E2C  06E8               	decf	wreg,f,c
  6035  003E2E  E2FC               	bc	u15071
  6036  003E30  ECD2  F02E         	call	_ethernetController_writeDestinationMACAddress	;wreg free
  6037                           
  6038                           ;ipv4.c: 78: ethernetController_sendPacket(ipPacket.ethernet.memory);
  6039  003E34  EE21  F064         	lfsr	2,ipv4_sendFrame@ipPacket+48
  6040  003E38  EE00  F072         	lfsr	0,ethernetController_sendPacket@field
  6041  003E3C  0E08               	movlw	8
  6042  003E3E                     u15081:
  6043  003E3E  CFDB FFEB          	movff	plusw2,plusw0
  6044  003E42  06E8               	decf	wreg,f,c
  6045  003E44  E2FC               	bc	u15081
  6046  003E46  ECFD  F035         	call	_ethernetController_sendPacket	;wreg free
  6047                           
  6048                           ;ipv4.c: 79: err.code = (uint16_t)0;
  6049  003E4A  0E00               	movlw	0
  6050  003E4C  0100               	movlb	0	; () banked
  6051  003E4E  6FFF               	movwf	(ipv4_sendFrame@err+2)& (0+255),b
  6052  003E50  0E00               	movlw	0
  6053  003E52  6FFE               	movwf	(ipv4_sendFrame@err+1)& (0+255),b
  6054                           
  6055                           ; BSR set to: 0
  6056                           ;ipv4.c: 80: oldTime = 0;
  6057  003E54  0E00               	movlw	0
  6058  003E56  0102               	movlb	2	; () banked
  6059  003E58  6FBC               	movwf	ipv4_sendFrame@oldTime& (0+255),b
  6060  003E5A  0E00               	movlw	0
  6061  003E5C  6FBD               	movwf	(ipv4_sendFrame@oldTime+1)& (0+255),b
  6062  003E5E  0E00               	movlw	0
  6063  003E60  6FBE               	movwf	(ipv4_sendFrame@oldTime+2)& (0+255),b
  6064  003E62  0E00               	movlw	0
  6065  003E64  6FBF               	movwf	(ipv4_sendFrame@oldTime+3)& (0+255),b
  6066                           
  6067                           ; BSR set to: 2
  6068                           ;ipv4.c: 81: failedResolveCounter = 0;
  6069  003E66  0E00               	movlw	0
  6070  003E68  6E3D               	movwf	ipv4_sendFrame@failedResolveCounter,c
  6071                           
  6072                           ;ipv4.c: 82: } else if ((getMillis() - oldTime) > 2000u || oldTime == 0) {
  6073  003E6A  D060               	goto	l1138
  6074  003E6C                     l1133:
  6075                           
  6076                           ; BSR set to: 2
  6077  003E6C  C2BC  F176         	movff	ipv4_sendFrame@oldTime,??_ipv4_sendFrame
  6078  003E70  C2BD  F177         	movff	ipv4_sendFrame@oldTime+1,??_ipv4_sendFrame+1
  6079  003E74  C2BE  F178         	movff	ipv4_sendFrame@oldTime+2,??_ipv4_sendFrame+2
  6080  003E78  C2BF  F179         	movff	ipv4_sendFrame@oldTime+3,??_ipv4_sendFrame+3
  6081  003E7C  0101               	movlb	1	; () banked
  6082  003E7E  1F76               	comf	??_ipv4_sendFrame& (0+255),f,b
  6083  003E80  1F77               	comf	(??_ipv4_sendFrame+1)& (0+255),f,b
  6084  003E82  1F78               	comf	(??_ipv4_sendFrame+2)& (0+255),f,b
  6085  003E84  1F79               	comf	(??_ipv4_sendFrame+3)& (0+255),f,b
  6086  003E86  2B76               	incf	??_ipv4_sendFrame& (0+255),f,b
  6087  003E88  0E00               	movlw	0
  6088  003E8A  2377               	addwfc	(??_ipv4_sendFrame+1)& (0+255),f,b
  6089  003E8C  2378               	addwfc	(??_ipv4_sendFrame+2)& (0+255),f,b
  6090  003E8E  2379               	addwfc	(??_ipv4_sendFrame+3)& (0+255),f,b
  6091  003E90  EC00  F037         	call	_getMillis	;wreg free
  6092  003E94  0101               	movlb	1	; () banked
  6093  003E96  5176               	movf	??_ipv4_sendFrame& (0+255),w,b
  6094  003E98  0100               	movlb	0	; () banked
  6095  003E9A  2560               	addwf	?_getMillis& (0+255),w,b
  6096  003E9C  0101               	movlb	1	; () banked
  6097  003E9E  6F7A               	movwf	(??_ipv4_sendFrame+4)& (0+255),b
  6098  003EA0  5177               	movf	(??_ipv4_sendFrame+1)& (0+255),w,b
  6099  003EA2  0100               	movlb	0	; () banked
  6100  003EA4  2161               	addwfc	(?_getMillis+1)& (0+255),w,b
  6101  003EA6  0101               	movlb	1	; () banked
  6102  003EA8  6F7B               	movwf	(??_ipv4_sendFrame+5)& (0+255),b
  6103  003EAA  5178               	movf	(??_ipv4_sendFrame+2)& (0+255),w,b
  6104  003EAC  0100               	movlb	0	; () banked
  6105  003EAE  2162               	addwfc	(?_getMillis+2)& (0+255),w,b
  6106  003EB0  0101               	movlb	1	; () banked
  6107  003EB2  6F7C               	movwf	(??_ipv4_sendFrame+6)& (0+255),b
  6108  003EB4  5179               	movf	(??_ipv4_sendFrame+3)& (0+255),w,b
  6109  003EB6  0100               	movlb	0	; () banked
  6110  003EB8  2163               	addwfc	(?_getMillis+3)& (0+255),w,b
  6111  003EBA  0101               	movlb	1	; () banked
  6112  003EBC  6F7D               	movwf	(??_ipv4_sendFrame+7)& (0+255),b
  6113  003EBE  517D               	movf	(??_ipv4_sendFrame+7)& (0+255),w,b
  6114  003EC0  117C               	iorwf	(??_ipv4_sendFrame+6)& (0+255),w,b
  6115  003EC2  E10D               	bnz	l12162
  6116  003EC4  0ED1               	movlw	209
  6117  003EC6  5D7A               	subwf	(??_ipv4_sendFrame+4)& (0+255),w,b
  6118  003EC8  0E07               	movlw	7
  6119  003ECA  597B               	subwfb	(??_ipv4_sendFrame+5)& (0+255),w,b
  6120  003ECC  B0D8               	btfsc	status,0,c
  6121  003ECE  D007               	goto	u15100
  6122                           
  6123                           ; BSR set to: 1
  6124  003ED0  0102               	movlb	2	; () banked
  6125  003ED2  51BC               	movf	ipv4_sendFrame@oldTime& (0+255),w,b
  6126  003ED4  11BD               	iorwf	(ipv4_sendFrame@oldTime+1)& (0+255),w,b
  6127  003ED6  11BE               	iorwf	(ipv4_sendFrame@oldTime+2)& (0+255),w,b
  6128  003ED8  11BF               	iorwf	(ipv4_sendFrame@oldTime+3)& (0+255),w,b
  6129  003EDA  A4D8               	btfss	status,2,c
  6130  003EDC  D027               	goto	l1138
  6131  003EDE                     u15100:
  6132  003EDE                     l12162:
  6133                           
  6134                           ;ipv4.c: 83: failedResolveCounter++;
  6135  003EDE  2A3D               	incf	ipv4_sendFrame@failedResolveCounter,f,c
  6136                           
  6137                           ;ipv4.c: 89: oldTime = getMillis();
  6138  003EE0  EC00  F037         	call	_getMillis	;wreg free
  6139  003EE4  C060  F2BC         	movff	?_getMillis,ipv4_sendFrame@oldTime
  6140  003EE8  C061  F2BD         	movff	?_getMillis+1,ipv4_sendFrame@oldTime+1
  6141  003EEC  C062  F2BE         	movff	?_getMillis+2,ipv4_sendFrame@oldTime+2
  6142  003EF0  C063  F2BF         	movff	?_getMillis+3,ipv4_sendFrame@oldTime+3
  6143                           
  6144                           ;ipv4.c: 90: arp_sendRequest(ipPacket.ipv4Header.source, ipPacket.ipv4Header.destination
      +                          );
  6145  003EF4  C143  F100         	movff	ipv4_sendFrame@ipPacket+15,arp_sendRequest@ipSender
  6146  003EF8  C144  F101         	movff	ipv4_sendFrame@ipPacket+16,arp_sendRequest@ipSender+1
  6147  003EFC  C145  F102         	movff	ipv4_sendFrame@ipPacket+17,arp_sendRequest@ipSender+2
  6148  003F00  C146  F103         	movff	ipv4_sendFrame@ipPacket+18,arp_sendRequest@ipSender+3
  6149  003F04  C147  F104         	movff	ipv4_sendFrame@ipPacket+19,arp_sendRequest@ipTarget
  6150  003F08  C148  F105         	movff	ipv4_sendFrame@ipPacket+20,arp_sendRequest@ipTarget+1
  6151  003F0C  C149  F106         	movff	ipv4_sendFrame@ipPacket+21,arp_sendRequest@ipTarget+2
  6152  003F10  C14A  F107         	movff	ipv4_sendFrame@ipPacket+22,arp_sendRequest@ipTarget+3
  6153  003F14  ECDF  F02C         	call	_arp_sendRequest	;wreg free
  6154                           
  6155                           ;ipv4.c: 91: if (failedResolveCounter >= 3u) {
  6156  003F18  0E02               	movlw	2
  6157  003F1A  643D               	cpfsgt	ipv4_sendFrame@failedResolveCounter,c
  6158  003F1C  D007               	goto	l1138
  6159                           
  6160                           ;ipv4.c: 92: failedResolveCounter = 0;
  6161  003F1E  0E00               	movlw	0
  6162  003F20  6E3D               	movwf	ipv4_sendFrame@failedResolveCounter,c
  6163                           
  6164                           ;ipv4.c: 93: err.code = ERROR_ARP_MAXIMUM_NUMBER_OF_REQUESTS_REACHED;
  6165  003F22  0E01               	movlw	1
  6166  003F24  0100               	movlb	0	; () banked
  6167  003F26  6FFF               	movwf	(ipv4_sendFrame@err+2)& (0+255),b
  6168  003F28  0E94               	movlw	148
  6169  003F2A  6FFE               	movwf	(ipv4_sendFrame@err+1)& (0+255),b
  6170  003F2C                     l1138:
  6171                           
  6172                           ;ipv4.c: 94: }
  6173                           ;ipv4.c: 95: }
  6174                           ;ipv4.c: 96: return err;
  6175                           
  6176                           ; BSR set to: 0
  6177                           
  6178                           ; BSR set to: 0
  6179                           
  6180                           ; BSR set to: 0
  6181  003F2C  C0FD  F134         	movff	ipv4_sendFrame@err,?_ipv4_sendFrame
  6182  003F30  C0FE  F135         	movff	ipv4_sendFrame@err+1,?_ipv4_sendFrame+1
  6183  003F34  C0FF  F136         	movff	ipv4_sendFrame@err+2,?_ipv4_sendFrame+2
  6184  003F38  0012               	return	
  6185  003F3A                     __end_of_ipv4_sendFrame:
  6186                           	opt stack 0
  6187                           tblptru	equ	0xFF8
  6188                           tblptrh	equ	0xFF7
  6189                           tblptrl	equ	0xFF6
  6190                           tablat	equ	0xFF5
  6191                           prodh	equ	0xFF4
  6192                           prodl	equ	0xFF3
  6193                           intcon	equ	0xFF2
  6194                           intcon3	equ	0xFF0
  6195                           indf0	equ	0xFEF
  6196                           postinc0	equ	0xFEE
  6197                           plusw0	equ	0xFEB
  6198                           fsr0h	equ	0xFEA
  6199                           fsr0l	equ	0xFE9
  6200                           wreg	equ	0xFE8
  6201                           postdec1	equ	0xFE5
  6202                           plusw1	equ	0xFE3
  6203                           fsr1l	equ	0xFE1
  6204                           indf2	equ	0xFDF
  6205                           postinc2	equ	0xFDE
  6206                           postdec2	equ	0xFDD
  6207                           plusw2	equ	0xFDB
  6208                           fsr2h	equ	0xFDA
  6209                           fsr2l	equ	0xFD9
  6210                           status	equ	0xFD8
  6211                           
  6212 ;; *************** function _arp_getEntryFromTable *****************
  6213 ;; Defined at:
  6214 ;;		line 478 in file "src/stack/protocols/arp.c"
  6215 ;; Parameters:    Size  Location     Type
  6216 ;;  index           1    wreg     unsigned char 
  6217 ;; Auto vars:     Size  Location     Type
  6218 ;;  index           1    7[BANK0 ] unsigned char 
  6219 ;; Return value:  Size  Location     Type
  6220 ;;                  6    0[BANK0 ] struct macaddress
  6221 ;; Registers used:
  6222 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6223 ;; Tracked objects:
  6224 ;;		On entry : 0/0
  6225 ;;		On exit  : 0/0
  6226 ;;		Unchanged: 0/0
  6227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6228 ;;      Params:         0       7       0       0       0       0       0       0       0
  6229 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6230 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6231 ;;      Totals:         0       8       0       0       0       0       0       0       0
  6232 ;;Total ram usage:        8 bytes
  6233 ;; Hardware stack levels used:    1
  6234 ;; Hardware stack levels required when called:    4
  6235 ;; This function calls:
  6236 ;;		Nothing
  6237 ;; This function is called by:
  6238 ;;		_ipv4_sendFrame
  6239 ;; This function uses a non-reentrant model
  6240 ;;
  6241                           
  6242                           	psect	text13
  6243  006AAA                     __ptext13:
  6244                           	opt stack 0
  6245  006AAA                     _arp_getEntryFromTable:
  6246                           	opt stack 24
  6247                           
  6248                           ;incstack = 0
  6249                           ;arp_getEntryFromTable@index stored from wreg
  6250  006AAA  0100               	movlb	0	; () banked
  6251  006AAC  6F67               	movwf	arp_getEntryFromTable@index& (0+255),b
  6252                           
  6253                           ;arp.c: 479: return arp_table[index].mac;
  6254  006AAE  0100               	movlb	0	; () banked
  6255  006AB0  5167               	movf	arp_getEntryFromTable@index& (0+255),w,b
  6256  006AB2  0D0E               	mullw	14
  6257  006AB4  0E04               	movlw	4
  6258  006AB6  26F3               	addwf	prodl,f,c
  6259  006AB8  0E00               	movlw	0
  6260  006ABA  22F4               	addwfc	prodh,f,c
  6261  006ABC  0E7C               	movlw	low _arp_table
  6262  006ABE  24F3               	addwf	prodl,w,c
  6263  006AC0  6ED9               	movwf	fsr2l,c
  6264  006AC2  0E04               	movlw	high _arp_table
  6265  006AC4  20F4               	addwfc	prodh,w,c
  6266  006AC6  6EDA               	movwf	fsr2h,c
  6267  006AC8  EE00  F060         	lfsr	0,?_arp_getEntryFromTable
  6268  006ACC  0E05               	movlw	5
  6269  006ACE                     u14531:
  6270  006ACE  CFDB FFEB          	movff	plusw2,plusw0
  6271  006AD2  06E8               	decf	wreg,f,c
  6272  006AD4  E2FC               	bc	u14531
  6273  006AD6  0012               	return	
  6274  006AD8                     __end_of_arp_getEntryFromTable:
  6275                           	opt stack 0
  6276                           tblptru	equ	0xFF8
  6277                           tblptrh	equ	0xFF7
  6278                           tblptrl	equ	0xFF6
  6279                           tablat	equ	0xFF5
  6280                           prodh	equ	0xFF4
  6281                           prodl	equ	0xFF3
  6282                           intcon	equ	0xFF2
  6283                           intcon3	equ	0xFF0
  6284                           indf0	equ	0xFEF
  6285                           postinc0	equ	0xFEE
  6286                           plusw0	equ	0xFEB
  6287                           fsr0h	equ	0xFEA
  6288                           fsr0l	equ	0xFE9
  6289                           wreg	equ	0xFE8
  6290                           postdec1	equ	0xFE5
  6291                           plusw1	equ	0xFE3
  6292                           fsr1l	equ	0xFE1
  6293                           indf2	equ	0xFDF
  6294                           postinc2	equ	0xFDE
  6295                           postdec2	equ	0xFDD
  6296                           plusw2	equ	0xFDB
  6297                           fsr2h	equ	0xFDA
  6298                           fsr2l	equ	0xFD9
  6299                           status	equ	0xFD8
  6300                           
  6301 ;; *************** function _ipv4_generateAutoIP *****************
  6302 ;; Defined at:
  6303 ;;		line 453 in file "src/stack/protocols/ipv4.c"
  6304 ;; Parameters:    Size  Location     Type
  6305 ;;		None
  6306 ;; Auto vars:     Size  Location     Type
  6307 ;;  ip              4   24[BANK0 ] struct ipv4_address
  6308 ;; Return value:  Size  Location     Type
  6309 ;;                  4   20[BANK0 ] struct ipv4_address
  6310 ;; Registers used:
  6311 ;;		wreg, status,2, status,0, cstack
  6312 ;; Tracked objects:
  6313 ;;		On entry : 0/0
  6314 ;;		On exit  : 0/0
  6315 ;;		Unchanged: 0/0
  6316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6317 ;;      Params:         0       4       0       0       0       0       0       0       0
  6318 ;;      Locals:         0       4       0       0       0       0       0       0       0
  6319 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6320 ;;      Totals:         0       8       0       0       0       0       0       0       0
  6321 ;;Total ram usage:        8 bytes
  6322 ;; Hardware stack levels used:    1
  6323 ;; Hardware stack levels required when called:    6
  6324 ;; This function calls:
  6325 ;;		___awmod
  6326 ;;		_rand
  6327 ;; This function is called by:
  6328 ;;		_handleStackBackgroundTasks
  6329 ;;		_main
  6330 ;; This function uses a non-reentrant model
  6331 ;;
  6332                           
  6333                           	psect	text14
  6334  0066F4                     __ptext14:
  6335                           	opt stack 0
  6336  0066F4                     _ipv4_generateAutoIP:
  6337                           	opt stack 24
  6338                           
  6339                           ;ipv4.c: 454: ipv4_address_t ip;
  6340                           ;ipv4.c: 456: ip.address[0] = 169;
  6341                           
  6342                           ; BSR set to: 0
  6343                           ;incstack = 0
  6344  0066F4  0EA9               	movlw	169
  6345  0066F6  0100               	movlb	0	; () banked
  6346  0066F8  6F78               	movwf	ipv4_generateAutoIP@ip& (0+255),b
  6347                           
  6348                           ;ipv4.c: 457: ip.address[1] = 254;
  6349  0066FA  0EFE               	movlw	254
  6350  0066FC  6F79               	movwf	(ipv4_generateAutoIP@ip+1)& (0+255),b
  6351                           
  6352                           ; BSR set to: 0
  6353                           ;ipv4.c: 458: ip.address[2] = (rand() % 253) + 1;
  6354  0066FE  ECB1  F031         	call	_rand	;wreg free
  6355  006702  C06C  F06E         	movff	?_rand,___awmod@dividend
  6356  006706  C06D  F06F         	movff	?_rand+1,___awmod@dividend+1
  6357  00670A  0E00               	movlw	0
  6358  00670C  0100               	movlb	0	; () banked
  6359  00670E  6F71               	movwf	(___awmod@divisor+1)& (0+255),b
  6360  006710  0EFD               	movlw	253
  6361  006712  6F70               	movwf	___awmod@divisor& (0+255),b
  6362  006714  EC3E  F030         	call	___awmod	;wreg free
  6363  006718  0100               	movlb	0	; () banked
  6364  00671A  296E               	incf	?___awmod& (0+255),w,b
  6365  00671C  6F7A               	movwf	(ipv4_generateAutoIP@ip+2)& (0+255),b
  6366                           
  6367                           ; BSR set to: 0
  6368                           ;ipv4.c: 459: ip.address[3] = (rand() % 256);
  6369  00671E  ECB1  F031         	call	_rand	;wreg free
  6370  006722  0100               	movlb	0	; () banked
  6371  006724  516C               	movf	?_rand& (0+255),w,b
  6372  006726  6F7B               	movwf	(ipv4_generateAutoIP@ip+3)& (0+255),b
  6373                           
  6374                           ; BSR set to: 0
  6375                           ;ipv4.c: 460: return ip;
  6376  006728  C078  F074         	movff	ipv4_generateAutoIP@ip,?_ipv4_generateAutoIP
  6377  00672C  C079  F075         	movff	ipv4_generateAutoIP@ip+1,?_ipv4_generateAutoIP+1
  6378  006730  C07A  F076         	movff	ipv4_generateAutoIP@ip+2,?_ipv4_generateAutoIP+2
  6379  006734  C07B  F077         	movff	ipv4_generateAutoIP@ip+3,?_ipv4_generateAutoIP+3
  6380  006738  0012               	return	
  6381  00673A                     __end_of_ipv4_generateAutoIP:
  6382                           	opt stack 0
  6383                           tblptru	equ	0xFF8
  6384                           tblptrh	equ	0xFF7
  6385                           tblptrl	equ	0xFF6
  6386                           tablat	equ	0xFF5
  6387                           prodh	equ	0xFF4
  6388                           prodl	equ	0xFF3
  6389                           intcon	equ	0xFF2
  6390                           intcon3	equ	0xFF0
  6391                           indf0	equ	0xFEF
  6392                           postinc0	equ	0xFEE
  6393                           plusw0	equ	0xFEB
  6394                           fsr0h	equ	0xFEA
  6395                           fsr0l	equ	0xFE9
  6396                           wreg	equ	0xFE8
  6397                           postdec1	equ	0xFE5
  6398                           plusw1	equ	0xFE3
  6399                           fsr1l	equ	0xFE1
  6400                           indf2	equ	0xFDF
  6401                           postinc2	equ	0xFDE
  6402                           postdec2	equ	0xFDD
  6403                           plusw2	equ	0xFDB
  6404                           fsr2h	equ	0xFDA
  6405                           fsr2l	equ	0xFD9
  6406                           status	equ	0xFD8
  6407                           
  6408 ;; *************** function ___awmod *****************
  6409 ;; Defined at:
  6410 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  6411 ;; Parameters:    Size  Location     Type
  6412 ;;  dividend        2   14[BANK0 ] int 
  6413 ;;  divisor         2   16[BANK0 ] int 
  6414 ;; Auto vars:     Size  Location     Type
  6415 ;;  sign            1   19[BANK0 ] unsigned char 
  6416 ;;  counter         1   18[BANK0 ] unsigned char 
  6417 ;; Return value:  Size  Location     Type
  6418 ;;                  2   14[BANK0 ] int 
  6419 ;; Registers used:
  6420 ;;		wreg, status,2, status,0
  6421 ;; Tracked objects:
  6422 ;;		On entry : 0/0
  6423 ;;		On exit  : 0/0
  6424 ;;		Unchanged: 0/0
  6425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6426 ;;      Params:         0       4       0       0       0       0       0       0       0
  6427 ;;      Locals:         0       2       0       0       0       0       0       0       0
  6428 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6429 ;;      Totals:         0       6       0       0       0       0       0       0       0
  6430 ;;Total ram usage:        6 bytes
  6431 ;; Hardware stack levels used:    1
  6432 ;; Hardware stack levels required when called:    4
  6433 ;; This function calls:
  6434 ;;		Nothing
  6435 ;; This function is called by:
  6436 ;;		_ipv4_generateAutoIP
  6437 ;;		_icmp_sendEchoRequest
  6438 ;; This function uses a non-reentrant model
  6439 ;;
  6440                           
  6441                           	psect	text15
  6442  00607C                     __ptext15:
  6443                           	opt stack 0
  6444  00607C                     ___awmod:
  6445                           	opt stack 25
  6446                           
  6447                           ; BSR set to: 0
  6448                           ;incstack = 0
  6449  00607C  0E00               	movlw	0
  6450  00607E  0100               	movlb	0	; () banked
  6451  006080  6F73               	movwf	___awmod@sign& (0+255),b
  6452                           
  6453                           ; BSR set to: 0
  6454  006082  AF6F               	btfss	(___awmod@dividend+1)& (0+255),7,b
  6455  006084  D006               	goto	l1669
  6456                           
  6457                           ; BSR set to: 0
  6458  006086  6D6E               	negf	___awmod@dividend& (0+255),b
  6459  006088  1F6F               	comf	(___awmod@dividend+1)& (0+255),f,b
  6460  00608A  B0D8               	btfsc	status,0,c
  6461  00608C  2B6F               	incf	(___awmod@dividend+1)& (0+255),f,b
  6462                           
  6463                           ; BSR set to: 0
  6464  00608E  0E01               	movlw	1
  6465  006090  6F73               	movwf	___awmod@sign& (0+255),b
  6466  006092                     l1669:
  6467                           
  6468                           ; BSR set to: 0
  6469                           
  6470                           ; BSR set to: 0
  6471  006092  AF71               	btfss	(___awmod@divisor+1)& (0+255),7,b
  6472  006094  D004               	goto	l1670
  6473                           
  6474                           ; BSR set to: 0
  6475  006096  6D70               	negf	___awmod@divisor& (0+255),b
  6476  006098  1F71               	comf	(___awmod@divisor+1)& (0+255),f,b
  6477  00609A  B0D8               	btfsc	status,0,c
  6478  00609C  2B71               	incf	(___awmod@divisor+1)& (0+255),f,b
  6479  00609E                     l1670:
  6480                           
  6481                           ; BSR set to: 0
  6482                           
  6483                           ; BSR set to: 0
  6484  00609E  5170               	movf	___awmod@divisor& (0+255),w,b
  6485  0060A0  1171               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  6486  0060A2  B4D8               	btfsc	status,2,c
  6487  0060A4  D018               	goto	l1677
  6488                           
  6489                           ; BSR set to: 0
  6490  0060A6  0E01               	movlw	1
  6491  0060A8  6F72               	movwf	___awmod@counter& (0+255),b
  6492  0060AA  D004               	goto	l1672
  6493  0060AC                     
  6494                           ; BSR set to: 0
  6495                           
  6496                           ; BSR set to: 0
  6497  0060AC  90D8               	bcf	status,0,c
  6498  0060AE  3770               	rlcf	___awmod@divisor& (0+255),f,b
  6499  0060B0  3771               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  6500  0060B2  2B72               	incf	___awmod@counter& (0+255),f,b
  6501  0060B4                     l1672:
  6502                           
  6503                           ; BSR set to: 0
  6504                           
  6505                           ; BSR set to: 0
  6506  0060B4  AF71               	btfss	(___awmod@divisor+1)& (0+255),7,b
  6507  0060B6  D7FA               	goto	l1673
  6508  0060B8                     u14570:
  6509                           
  6510                           ; BSR set to: 0
  6511                           
  6512                           ; BSR set to: 0
  6513                           
  6514                           ; BSR set to: 0
  6515  0060B8  5170               	movf	___awmod@divisor& (0+255),w,b
  6516  0060BA  5D6E               	subwf	___awmod@dividend& (0+255),w,b
  6517  0060BC  5171               	movf	(___awmod@divisor+1)& (0+255),w,b
  6518  0060BE  596F               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  6519  0060C0  A0D8               	btfss	status,0,c
  6520  0060C2  D004               	goto	l1676
  6521                           
  6522                           ; BSR set to: 0
  6523  0060C4  5170               	movf	___awmod@divisor& (0+255),w,b
  6524  0060C6  5F6E               	subwf	___awmod@dividend& (0+255),f,b
  6525  0060C8  5171               	movf	(___awmod@divisor+1)& (0+255),w,b
  6526  0060CA  5B6F               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  6527  0060CC                     l1676:
  6528                           
  6529                           ; BSR set to: 0
  6530                           
  6531                           ; BSR set to: 0
  6532  0060CC  90D8               	bcf	status,0,c
  6533  0060CE  3371               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  6534  0060D0  3370               	rrcf	___awmod@divisor& (0+255),f,b
  6535                           
  6536                           ; BSR set to: 0
  6537  0060D2  2F72               	decfsz	___awmod@counter& (0+255),f,b
  6538  0060D4  D7F1               	goto	u14570
  6539  0060D6                     l1677:
  6540                           
  6541                           ; BSR set to: 0
  6542                           
  6543                           ; BSR set to: 0
  6544                           
  6545                           ; BSR set to: 0
  6546  0060D6  5173               	movf	___awmod@sign& (0+255),w,b
  6547  0060D8  B4D8               	btfsc	status,2,c
  6548  0060DA  D004               	goto	l1678
  6549                           
  6550                           ; BSR set to: 0
  6551  0060DC  6D6E               	negf	___awmod@dividend& (0+255),b
  6552  0060DE  1F6F               	comf	(___awmod@dividend+1)& (0+255),f,b
  6553  0060E0  B0D8               	btfsc	status,0,c
  6554  0060E2  2B6F               	incf	(___awmod@dividend+1)& (0+255),f,b
  6555  0060E4                     l1678:
  6556                           
  6557                           ; BSR set to: 0
  6558                           
  6559                           ; BSR set to: 0
  6560  0060E4  C06E  F06E         	movff	___awmod@dividend,?___awmod
  6561  0060E8  C06F  F06F         	movff	___awmod@dividend+1,?___awmod+1
  6562  0060EC  0012               	return	
  6563  0060EE                     __end_of___awmod:
  6564                           	opt stack 0
  6565                           tblptru	equ	0xFF8
  6566                           tblptrh	equ	0xFF7
  6567                           tblptrl	equ	0xFF6
  6568                           tablat	equ	0xFF5
  6569                           prodh	equ	0xFF4
  6570                           prodl	equ	0xFF3
  6571                           intcon	equ	0xFF2
  6572                           intcon3	equ	0xFF0
  6573                           indf0	equ	0xFEF
  6574                           postinc0	equ	0xFEE
  6575                           plusw0	equ	0xFEB
  6576                           fsr0h	equ	0xFEA
  6577                           fsr0l	equ	0xFE9
  6578                           wreg	equ	0xFE8
  6579                           postdec1	equ	0xFE5
  6580                           plusw1	equ	0xFE3
  6581                           fsr1l	equ	0xFE1
  6582                           indf2	equ	0xFDF
  6583                           postinc2	equ	0xFDE
  6584                           postdec2	equ	0xFDD
  6585                           plusw2	equ	0xFDB
  6586                           fsr2h	equ	0xFDA
  6587                           fsr2l	equ	0xFD9
  6588                           status	equ	0xFD8
  6589                           
  6590 ;; *************** function _ipv4_background *****************
  6591 ;; Defined at:
  6592 ;;		line 377 in file "src/stack/protocols/ipv4.c"
  6593 ;; Parameters:    Size  Location     Type
  6594 ;;  link            1    wreg     enum E73
  6595 ;; Auto vars:     Size  Location     Type
  6596 ;;  link            1    0[COMRAM] enum E73
  6597 ;;  err             3    5[BANK0 ] struct error
  6598 ;; Return value:  Size  Location     Type
  6599 ;;                  3    0[BANK0 ] struct error
  6600 ;; Registers used:
  6601 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6602 ;; Tracked objects:
  6603 ;;		On entry : 0/0
  6604 ;;		On exit  : 0/0
  6605 ;;		Unchanged: 0/0
  6606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6607 ;;      Params:         0       3       0       0       0       0       0       0       0
  6608 ;;      Locals:         0       3       0       0       0       0       0       0       0
  6609 ;;      Temps:          0       2       0       0       0       0       0       0       0
  6610 ;;      Totals:         0       8       0       0       0       0       0       0       0
  6611 ;;Total ram usage:        8 bytes
  6612 ;; Hardware stack levels used:    1
  6613 ;; Hardware stack levels required when called:    4
  6614 ;; This function calls:
  6615 ;;		Nothing
  6616 ;; This function is called by:
  6617 ;;		_handleStackBackgroundTasks
  6618 ;; This function uses a non-reentrant model
  6619 ;;
  6620                           
  6621                           	psect	text16
  6622  004200                     __ptext16:
  6623                           	opt stack 0
  6624  004200                     _ipv4_background:
  6625                           	opt stack 25
  6626                           
  6627                           ;ipv4.c: 378: error_t err;
  6628                           ;ipv4.c: 379: err.module = ERROR_MODULE_IPv4;
  6629                           
  6630                           ; BSR set to: 0
  6631                           ;incstack = 0
  6632  004200  0E04               	movlw	4
  6633  004202  0100               	movlb	0	; () banked
  6634  004204  6F65               	movwf	ipv4_background@err& (0+255),b
  6635                           
  6636                           ;ipv4.c: 380: err.code = (uint16_t)0;
  6637  004206  0E00               	movlw	0
  6638  004208  6F67               	movwf	(ipv4_background@err+2)& (0+255),b
  6639  00420A  0E00               	movlw	0
  6640  00420C  6F66               	movwf	(ipv4_background@err+1)& (0+255),b
  6641                           
  6642                           ; BSR set to: 0
  6643                           ;ipv4.c: 381: if ((*arpStatus).module == ERROR_MODULE_ARP && fSrcAddrChanged) {
  6644  00420E  C036  FFD9         	movff	_arpStatus,fsr2l
  6645  004212  C037  FFDA         	movff	_arpStatus+1,fsr2h
  6646  004216  0E03               	movlw	3
  6647  004218  18DE               	xorwf	postinc2,w,c
  6648  00421A  A4D8               	btfss	status,2,c
  6649  00421C  D08B               	goto	l1192
  6650                           
  6651                           ; BSR set to: 0
  6652  00421E  B04E               	btfsc	_fSrcAddrChanged/(0+8),_fSrcAddrChanged& (0+7),c
  6653  004220  D063               	goto	l1193
  6654  004222  D088               	goto	l1192
  6655  004224                     
  6656                           ; BSR set to: 0
  6657                           ;ipv4.c: 384: err = (*arpStatus);
  6658                           
  6659                           ; BSR set to: 0
  6660  004224  C036  FFD9         	movff	_arpStatus,fsr2l
  6661  004228  C037  FFDA         	movff	_arpStatus+1,fsr2h
  6662  00422C  CFDE F065          	movff	postinc2,ipv4_background@err
  6663  004230  CFDE F066          	movff	postinc2,ipv4_background@err+1
  6664  004234  CFDD F067          	movff	postdec2,ipv4_background@err+2
  6665                           
  6666                           ; BSR set to: 0
  6667                           ;ipv4.c: 388: ipSource = ipPreliminarySource;
  6668  004238  C2D8  F2E0         	movff	_ipPreliminarySource,_ipSource
  6669  00423C  C2D9  F2E1         	movff	_ipPreliminarySource+1,_ipSource+1
  6670  004240  C2DA  F2E2         	movff	_ipPreliminarySource+2,_ipSource+2
  6671  004244  C2DB  F2E3         	movff	_ipPreliminarySource+3,_ipSource+3
  6672                           
  6673                           ; BSR set to: 0
  6674                           ;ipv4.c: 389: fSrcAddrChanged = 0u;
  6675  004248  904E               	bcf	_fSrcAddrChanged/(0+8),_fSrcAddrChanged& (0+7),c
  6676                           
  6677                           ; BSR set to: 0
  6678                           ;ipv4.c: 390: return err;
  6679  00424A  C065  F060         	movff	ipv4_background@err,?_ipv4_background
  6680  00424E  C066  F061         	movff	ipv4_background@err+1,?_ipv4_background+1
  6681  004252  C067  F062         	movff	ipv4_background@err+2,?_ipv4_background+2
  6682                           
  6683                           ; BSR set to: 0
  6684  004256  0012               	return	
  6685  004258                     
  6686                           ; BSR set to: 0
  6687                           ;ipv4.c: 392: err = (*arpStatus);
  6688                           
  6689                           ; BSR set to: 0
  6690  004258  C036  FFD9         	movff	_arpStatus,fsr2l
  6691  00425C  C037  FFDA         	movff	_arpStatus+1,fsr2h
  6692  004260  CFDE F065          	movff	postinc2,ipv4_background@err
  6693  004264  CFDE F066          	movff	postinc2,ipv4_background@err+1
  6694  004268  CFDD F067          	movff	postdec2,ipv4_background@err+2
  6695                           
  6696                           ; BSR set to: 0
  6697                           ;ipv4.c: 393: return err;
  6698  00426C  C065  F060         	movff	ipv4_background@err,?_ipv4_background
  6699  004270  C066  F061         	movff	ipv4_background@err+1,?_ipv4_background+1
  6700  004274  C067  F062         	movff	ipv4_background@err+2,?_ipv4_background+2
  6701                           
  6702                           ; BSR set to: 0
  6703  004278  0012               	return	
  6704  00427A                     
  6705                           ; BSR set to: 0
  6706                           ;ipv4.c: 395: err.code = ERROR_IPv4_ADDRESS_ALREADY_IN_USE;
  6707                           
  6708                           ; BSR set to: 0
  6709  00427A  0E01               	movlw	1
  6710  00427C  6F67               	movwf	(ipv4_background@err+2)& (0+255),b
  6711  00427E  0EF5               	movlw	245
  6712  004280  6F66               	movwf	(ipv4_background@err+1)& (0+255),b
  6713                           
  6714                           ; BSR set to: 0
  6715                           ;ipv4.c: 396: fSrcAddrChanged = 0u;
  6716  004282  904E               	bcf	_fSrcAddrChanged/(0+8),_fSrcAddrChanged& (0+7),c
  6717                           
  6718                           ; BSR set to: 0
  6719                           ;ipv4.c: 397: return err;
  6720  004284  C065  F060         	movff	ipv4_background@err,?_ipv4_background
  6721  004288  C066  F061         	movff	ipv4_background@err+1,?_ipv4_background+1
  6722  00428C  C067  F062         	movff	ipv4_background@err+2,?_ipv4_background+2
  6723                           
  6724                           ; BSR set to: 0
  6725  004290  0012               	return	
  6726  004292                     l1198:
  6727                           
  6728                           ; BSR set to: 0
  6729                           ;ipv4.c: 401: return err;
  6730  004292  C065  F060         	movff	ipv4_background@err,?_ipv4_background
  6731  004296  C066  F061         	movff	ipv4_background@err+1,?_ipv4_background+1
  6732  00429A  C067  F062         	movff	ipv4_background@err+2,?_ipv4_background+2
  6733  00429E  0012               	return	
  6734  0042A0                     
  6735                           ; BSR set to: 0
  6736                           ;ipv4.c: 403: err = (*arpStatus);
  6737                           
  6738                           ; BSR set to: 0
  6739  0042A0  C036  FFD9         	movff	_arpStatus,fsr2l
  6740  0042A4  C037  FFDA         	movff	_arpStatus+1,fsr2h
  6741  0042A8  CFDE F065          	movff	postinc2,ipv4_background@err
  6742  0042AC  CFDE F066          	movff	postinc2,ipv4_background@err+1
  6743  0042B0  CFDD F067          	movff	postdec2,ipv4_background@err+2
  6744                           
  6745                           ; BSR set to: 0
  6746                           ;ipv4.c: 404: fSrcAddrChanged = 0u;
  6747  0042B4  904E               	bcf	_fSrcAddrChanged/(0+8),_fSrcAddrChanged& (0+7),c
  6748                           
  6749                           ; BSR set to: 0
  6750                           ;ipv4.c: 405: return err;
  6751  0042B6  C065  F060         	movff	ipv4_background@err,?_ipv4_background
  6752  0042BA  C066  F061         	movff	ipv4_background@err+1,?_ipv4_background+1
  6753  0042BE  C067  F062         	movff	ipv4_background@err+2,?_ipv4_background+2
  6754                           
  6755                           ; BSR set to: 0
  6756  0042C2  0012               	return	
  6757  0042C4                     
  6758                           ; BSR set to: 0
  6759                           ;ipv4.c: 408: fSrcAddrChanged = 0u;
  6760                           
  6761                           ; BSR set to: 0
  6762                           ;ipv4.c: 407: case ERROR_ARP_UNKNOWN:
  6763  0042C4  904E               	bcf	_fSrcAddrChanged/(0+8),_fSrcAddrChanged& (0+7),c
  6764                           
  6765                           ; BSR set to: 0
  6766                           ;ipv4.c: 409: err = (*arpStatus);
  6767  0042C6  C036  FFD9         	movff	_arpStatus,fsr2l
  6768  0042CA  C037  FFDA         	movff	_arpStatus+1,fsr2h
  6769  0042CE  CFDE F065          	movff	postinc2,ipv4_background@err
  6770  0042D2  CFDE F066          	movff	postinc2,ipv4_background@err+1
  6771  0042D6  CFDD F067          	movff	postdec2,ipv4_background@err+2
  6772                           
  6773                           ; BSR set to: 0
  6774                           ;ipv4.c: 410: return err;
  6775  0042DA  C065  F060         	movff	ipv4_background@err,?_ipv4_background
  6776  0042DE  C066  F061         	movff	ipv4_background@err+1,?_ipv4_background+1
  6777  0042E2  C067  F062         	movff	ipv4_background@err+2,?_ipv4_background+2
  6778                           
  6779                           ; BSR set to: 0
  6780  0042E6  0012               	return	
  6781  0042E8                     l1193:
  6782                           
  6783                           ; BSR set to: 0
  6784                           
  6785                           ; BSR set to: 0
  6786  0042E8  EE20 F001          	lfsr	2,1
  6787  0042EC  5036               	movf	_arpStatus,w,c
  6788  0042EE  26D9               	addwf	fsr2l,f,c
  6789  0042F0  5037               	movf	_arpStatus+1,w,c
  6790  0042F2  22DA               	addwfc	fsr2h,f,c
  6791  0042F4  CFDE F063          	movff	postinc2,??_ipv4_background
  6792  0042F8  CFDD F064          	movff	postdec2,??_ipv4_background+1
  6793                           
  6794                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  6795                           ; Switch size 1, requested type "space"
  6796                           ; Number of cases is 2, Range of values is 0 to 1
  6797                           ; switch strategies available:
  6798                           ; Name         Instructions Cycles
  6799                           ; simple_byte            7     4 (average)
  6800                           ;	Chosen strategy is simple_byte
  6801  0042FC  5164               	movf	(??_ipv4_background+1)& (0+255),w,b
  6802  0042FE  0A00               	xorlw	0	; case 0
  6803  004300  B4D8               	btfsc	status,2,c
  6804  004302  D004               	goto	l13104
  6805  004304  0A01               	xorlw	1	; case 1
  6806  004306  B4D8               	btfsc	status,2,c
  6807  004308  D006               	goto	l13106
  6808  00430A  D7DC               	goto	l1200
  6809  00430C                     l13104:
  6810                           
  6811                           ; BSR set to: 0
  6812                           ; Switch size 1, requested type "space"
  6813                           ; Number of cases is 1, Range of values is 0 to 0
  6814                           ; switch strategies available:
  6815                           ; Name         Instructions Cycles
  6816                           ; simple_byte            4     3 (average)
  6817                           ;	Chosen strategy is simple_byte
  6818  00430C  5163               	movf	??_ipv4_background& (0+255),w,b
  6819  00430E  0A00               	xorlw	0	; case 0
  6820  004310  B4D8               	btfsc	status,2,c
  6821  004312  D788               	goto	l1194
  6822  004314  D7D7               	goto	l1200
  6823  004316                     l13106:
  6824                           
  6825                           ; BSR set to: 0
  6826                           ; Switch size 1, requested type "space"
  6827                           ; Number of cases is 5, Range of values is 145 to 243
  6828                           ; switch strategies available:
  6829                           ; Name         Instructions Cycles
  6830                           ; simple_byte           16     9 (average)
  6831                           ;	Chosen strategy is simple_byte
  6832  004316  5163               	movf	??_ipv4_background& (0+255),w,b
  6833  004318  0A91               	xorlw	145	; case 145
  6834  00431A  B4D8               	btfsc	status,2,c
  6835  00431C  D79D               	goto	l1196
  6836  00431E  0A02               	xorlw	2	; case 147
  6837  004320  B4D8               	btfsc	status,2,c
  6838  004322  D7B7               	goto	l1198
  6839  004324  0A05               	xorlw	5	; case 150
  6840  004326  B4D8               	btfsc	status,2,c
  6841  004328  D7A8               	goto	l1197
  6842  00432A  0A01               	xorlw	1	; case 151
  6843  00432C  B4D8               	btfsc	status,2,c
  6844  00432E  D7B8               	goto	l1199
  6845  004330  0A64               	xorlw	100	; case 243
  6846  004332  D7C8               	goto	l1200
  6847  004334                     l1192:
  6848                           
  6849                           ; BSR set to: 0
  6850                           ;ipv4.c: 413: err.code = ERROR_IPv4_UNKNOWN;
  6851                           
  6852                           ; BSR set to: 0
  6853  004334  0E02               	movlw	2
  6854  004336  6F67               	movwf	(ipv4_background@err+2)& (0+255),b
  6855  004338  0E57               	movlw	87
  6856  00433A  6F66               	movwf	(ipv4_background@err+1)& (0+255),b
  6857                           
  6858                           ; BSR set to: 0
  6859                           ;ipv4.c: 414: return err;
  6860                           
  6861                           ; BSR set to: 0
  6862  00433C  C065  F060         	movff	ipv4_background@err,?_ipv4_background
  6863  004340  C066  F061         	movff	ipv4_background@err+1,?_ipv4_background+1
  6864  004344  C067  F062         	movff	ipv4_background@err+2,?_ipv4_background+2
  6865  004348  0012               	return	
  6866  00434A                     __end_of_ipv4_background:
  6867                           	opt stack 0
  6868                           tblptru	equ	0xFF8
  6869                           tblptrh	equ	0xFF7
  6870                           tblptrl	equ	0xFF6
  6871                           tablat	equ	0xFF5
  6872                           prodh	equ	0xFF4
  6873                           prodl	equ	0xFF3
  6874                           intcon	equ	0xFF2
  6875                           intcon3	equ	0xFF0
  6876                           indf0	equ	0xFEF
  6877                           postinc0	equ	0xFEE
  6878                           plusw0	equ	0xFEB
  6879                           fsr0h	equ	0xFEA
  6880                           fsr0l	equ	0xFE9
  6881                           wreg	equ	0xFE8
  6882                           postdec1	equ	0xFE5
  6883                           plusw1	equ	0xFE3
  6884                           fsr1l	equ	0xFE1
  6885                           indf2	equ	0xFDF
  6886                           postinc2	equ	0xFDE
  6887                           postdec2	equ	0xFDD
  6888                           plusw2	equ	0xFDB
  6889                           fsr2h	equ	0xFDA
  6890                           fsr2l	equ	0xFD9
  6891                           status	equ	0xFD8
  6892                           
  6893 ;; *************** function _ipAdressToString *****************
  6894 ;; Defined at:
  6895 ;;		line 132 in file "src/system/uart.c"
  6896 ;; Parameters:    Size  Location     Type
  6897 ;;  ip              4   36[BANK0 ] struct ipv4_address
  6898 ;; Auto vars:     Size  Location     Type
  6899 ;;  i               1   43[BANK0 ] unsigned char 
  6900 ;;  pointer         1   42[BANK0 ] unsigned char 
  6901 ;;  j               1   41[BANK0 ] unsigned char 
  6902 ;; Return value:  Size  Location     Type
  6903 ;;                  2   36[BANK0 ] PTR unsigned char 
  6904 ;; Registers used:
  6905 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6906 ;; Tracked objects:
  6907 ;;		On entry : 0/0
  6908 ;;		On exit  : 0/0
  6909 ;;		Unchanged: 0/0
  6910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6911 ;;      Params:         0       4       0       0       0       0       0       0       0
  6912 ;;      Locals:         0       3       0       0       0       0       0       0       0
  6913 ;;      Temps:          0       1       0       0       0       0       0       0       0
  6914 ;;      Totals:         0       8       0       0       0       0       0       0       0
  6915 ;;Total ram usage:        8 bytes
  6916 ;; Hardware stack levels used:    1
  6917 ;; Hardware stack levels required when called:    7
  6918 ;; This function calls:
  6919 ;;		_itoa
  6920 ;; This function is called by:
  6921 ;;		_handleStackBackgroundTasks
  6922 ;;		_arpEntryToString
  6923 ;; This function uses a non-reentrant model
  6924 ;;
  6925                           
  6926                           	psect	text17
  6927  0046EC                     __ptext17:
  6928                           	opt stack 0
  6929  0046EC                     _ipAdressToString:
  6930                           	opt stack 22
  6931                           
  6932                           ;uart.c: 133: char static address [20];
  6933                           ;uart.c: 134: char static number[4];
  6934                           ;uart.c: 135: uint8_t pointer = 0;
  6935                           
  6936                           ; BSR set to: 0
  6937                           ;incstack = 0
  6938  0046EC  0E00               	movlw	0
  6939  0046EE  0100               	movlb	0	; () banked
  6940  0046F0  6F8A               	movwf	ipAdressToString@pointer& (0+255),b
  6941                           
  6942                           ;uart.c: 136: uint8_t j = 0;
  6943  0046F2  0E00               	movlw	0
  6944  0046F4  6F89               	movwf	ipAdressToString@j& (0+255),b
  6945                           
  6946                           ;uart.c: 138: for (uint8_t i = 0; i < 4; i++) {
  6947  0046F6  0E00               	movlw	0
  6948  0046F8  6F8B               	movwf	ipAdressToString@i& (0+255),b
  6949  0046FA                     l12178:
  6950                           
  6951                           ; BSR set to: 0
  6952  0046FA  0E03               	movlw	3
  6953  0046FC  658B               	cpfsgt	ipAdressToString@i& (0+255),b
  6954  0046FE  D001               	goto	l861
  6955  004700  D07C               	goto	u15160
  6956  004702                     l861:
  6957                           
  6958                           ; BSR set to: 0
  6959                           ;uart.c: 139: itoa(&number[0], (int) ip.address[i], 10);
  6960                           
  6961                           ; BSR set to: 0
  6962  004702  0EDC               	movlw	low ipAdressToString@number
  6963  004704  6F7C               	movwf	itoa@buf& (0+255),b
  6964  004706  0E02               	movlw	high ipAdressToString@number
  6965  004708  6F7D               	movwf	(itoa@buf+1)& (0+255),b
  6966  00470A  518B               	movf	ipAdressToString@i& (0+255),w,b
  6967  00470C  0D01               	mullw	1
  6968  00470E  0E84               	movlw	low ipAdressToString@ip
  6969  004710  24F3               	addwf	prodl,w,c
  6970  004712  6ED9               	movwf	fsr2l,c
  6971  004714  0E00               	movlw	high ipAdressToString@ip
  6972  004716  20F4               	addwfc	prodh,w,c
  6973  004718  6EDA               	movwf	fsr2h,c
  6974  00471A  50DF               	movf	indf2,w,c
  6975  00471C  6F88               	movwf	??_ipAdressToString& (0+255),b
  6976  00471E  5188               	movf	??_ipAdressToString& (0+255),w,b
  6977  004720  6F7E               	movwf	itoa@val& (0+255),b
  6978  004722  6B7F               	clrf	(itoa@val+1)& (0+255),b
  6979  004724  0E00               	movlw	0
  6980  004726  6F81               	movwf	(itoa@base+1)& (0+255),b
  6981  004728  0E0A               	movlw	10
  6982  00472A  6F80               	movwf	itoa@base& (0+255),b
  6983  00472C  EC9D  F033         	call	_itoa	;wreg free
  6984                           
  6985                           ;uart.c: 140: if (ip.address[i] >= 100)
  6986  004730  0100               	movlb	0	; () banked
  6987  004732  518B               	movf	ipAdressToString@i& (0+255),w,b
  6988  004734  0D01               	mullw	1
  6989  004736  0E84               	movlw	low ipAdressToString@ip
  6990  004738  24F3               	addwf	prodl,w,c
  6991  00473A  6ED9               	movwf	fsr2l,c
  6992  00473C  0E00               	movlw	high ipAdressToString@ip
  6993  00473E  20F4               	addwfc	prodh,w,c
  6994  004740  6EDA               	movwf	fsr2h,c
  6995  004742  0E63               	movlw	99
  6996  004744  64DF               	cpfsgt	indf2,c
  6997  004746  D014               	goto	l863
  6998                           
  6999                           ; BSR set to: 0
  7000                           ;uart.c: 141: address[pointer++] = number[j++];
  7001  004748  5189               	movf	ipAdressToString@j& (0+255),w,b
  7002  00474A  0D01               	mullw	1
  7003  00474C  0EDC               	movlw	low ipAdressToString@number
  7004  00474E  24F3               	addwf	prodl,w,c
  7005  004750  6ED9               	movwf	fsr2l,c
  7006  004752  0E02               	movlw	high ipAdressToString@number
  7007  004754  20F4               	addwfc	prodh,w,c
  7008  004756  6EDA               	movwf	fsr2h,c
  7009  004758  518A               	movf	ipAdressToString@pointer& (0+255),w,b
  7010  00475A  0D01               	mullw	1
  7011  00475C  0E99               	movlw	low ipAdressToString@address
  7012  00475E  24F3               	addwf	prodl,w,c
  7013  004760  6EE1               	movwf	fsr1l,c
  7014  004762  0E03               	movlw	high ipAdressToString@address
  7015  004764  20F4               	addwfc	prodh,w,c
  7016  004766  6EE2               	movwf	fsr1h,c
  7017  004768  CFDF FFE7          	movff	indf2,indf1
  7018                           
  7019                           ; BSR set to: 0
  7020  00476C  2B89               	incf	ipAdressToString@j& (0+255),f,b
  7021                           
  7022                           ; BSR set to: 0
  7023  00476E  2B8A               	incf	ipAdressToString@pointer& (0+255),f,b
  7024  004770                     l863:
  7025                           
  7026                           ; BSR set to: 0
  7027                           ;uart.c: 142: if (ip.address[i] >= 10)
  7028                           
  7029                           ; BSR set to: 0
  7030  004770  518B               	movf	ipAdressToString@i& (0+255),w,b
  7031  004772  0D01               	mullw	1
  7032  004774  0E84               	movlw	low ipAdressToString@ip
  7033  004776  24F3               	addwf	prodl,w,c
  7034  004778  6ED9               	movwf	fsr2l,c
  7035  00477A  0E00               	movlw	high ipAdressToString@ip
  7036  00477C  20F4               	addwfc	prodh,w,c
  7037  00477E  6EDA               	movwf	fsr2h,c
  7038  004780  0E09               	movlw	9
  7039  004782  64DF               	cpfsgt	indf2,c
  7040  004784  D014               	goto	l864
  7041                           
  7042                           ; BSR set to: 0
  7043                           ;uart.c: 143: address[pointer++] = number[j++];
  7044  004786  5189               	movf	ipAdressToString@j& (0+255),w,b
  7045  004788  0D01               	mullw	1
  7046  00478A  0EDC               	movlw	low ipAdressToString@number
  7047  00478C  24F3               	addwf	prodl,w,c
  7048  00478E  6ED9               	movwf	fsr2l,c
  7049  004790  0E02               	movlw	high ipAdressToString@number
  7050  004792  20F4               	addwfc	prodh,w,c
  7051  004794  6EDA               	movwf	fsr2h,c
  7052  004796  518A               	movf	ipAdressToString@pointer& (0+255),w,b
  7053  004798  0D01               	mullw	1
  7054  00479A  0E99               	movlw	low ipAdressToString@address
  7055  00479C  24F3               	addwf	prodl,w,c
  7056  00479E  6EE1               	movwf	fsr1l,c
  7057  0047A0  0E03               	movlw	high ipAdressToString@address
  7058  0047A2  20F4               	addwfc	prodh,w,c
  7059  0047A4  6EE2               	movwf	fsr1h,c
  7060  0047A6  CFDF FFE7          	movff	indf2,indf1
  7061                           
  7062                           ; BSR set to: 0
  7063  0047AA  2B89               	incf	ipAdressToString@j& (0+255),f,b
  7064                           
  7065                           ; BSR set to: 0
  7066  0047AC  2B8A               	incf	ipAdressToString@pointer& (0+255),f,b
  7067  0047AE                     l864:
  7068                           
  7069                           ; BSR set to: 0
  7070                           ;uart.c: 144: address[pointer++] = number[j++];
  7071  0047AE  5189               	movf	ipAdressToString@j& (0+255),w,b
  7072  0047B0  0D01               	mullw	1
  7073  0047B2  0EDC               	movlw	low ipAdressToString@number
  7074  0047B4  24F3               	addwf	prodl,w,c
  7075  0047B6  6ED9               	movwf	fsr2l,c
  7076  0047B8  0E02               	movlw	high ipAdressToString@number
  7077  0047BA  20F4               	addwfc	prodh,w,c
  7078  0047BC  6EDA               	movwf	fsr2h,c
  7079  0047BE  518A               	movf	ipAdressToString@pointer& (0+255),w,b
  7080  0047C0  0D01               	mullw	1
  7081  0047C2  0E99               	movlw	low ipAdressToString@address
  7082  0047C4  24F3               	addwf	prodl,w,c
  7083  0047C6  6EE1               	movwf	fsr1l,c
  7084  0047C8  0E03               	movlw	high ipAdressToString@address
  7085  0047CA  20F4               	addwfc	prodh,w,c
  7086  0047CC  6EE2               	movwf	fsr1h,c
  7087  0047CE  CFDF FFE7          	movff	indf2,indf1
  7088                           
  7089                           ; BSR set to: 0
  7090  0047D2  2B89               	incf	ipAdressToString@j& (0+255),f,b
  7091                           
  7092                           ; BSR set to: 0
  7093  0047D4  2B8A               	incf	ipAdressToString@pointer& (0+255),f,b
  7094                           
  7095                           ; BSR set to: 0
  7096                           ;uart.c: 145: j = 0;
  7097  0047D6  0E00               	movlw	0
  7098  0047D8  6F89               	movwf	ipAdressToString@j& (0+255),b
  7099                           
  7100                           ; BSR set to: 0
  7101                           ;uart.c: 146: if (i < 3)
  7102  0047DA  0E03               	movlw	3
  7103  0047DC  618B               	cpfslt	ipAdressToString@i& (0+255),b
  7104  0047DE  D00B               	goto	l865
  7105                           
  7106                           ; BSR set to: 0
  7107                           ;uart.c: 147: address[pointer++] = '.';
  7108  0047E0  518A               	movf	ipAdressToString@pointer& (0+255),w,b
  7109  0047E2  0D01               	mullw	1
  7110  0047E4  0E99               	movlw	low ipAdressToString@address
  7111  0047E6  24F3               	addwf	prodl,w,c
  7112  0047E8  6ED9               	movwf	fsr2l,c
  7113  0047EA  0E03               	movlw	high ipAdressToString@address
  7114  0047EC  20F4               	addwfc	prodh,w,c
  7115  0047EE  6EDA               	movwf	fsr2h,c
  7116  0047F0  0E2E               	movlw	46
  7117  0047F2  6EDF               	movwf	indf2,c
  7118                           
  7119                           ; BSR set to: 0
  7120  0047F4  2B8A               	incf	ipAdressToString@pointer& (0+255),f,b
  7121  0047F6                     l865:
  7122                           
  7123                           ; BSR set to: 0
  7124                           
  7125                           ; BSR set to: 0
  7126  0047F6  2B8B               	incf	ipAdressToString@i& (0+255),f,b
  7127  0047F8  D780               	goto	l12178
  7128  0047FA                     u15160:
  7129                           
  7130                           ; BSR set to: 0
  7131                           ;uart.c: 148: }
  7132                           ;uart.c: 149: address[pointer] = '\0';
  7133                           
  7134                           ; BSR set to: 0
  7135  0047FA  518A               	movf	ipAdressToString@pointer& (0+255),w,b
  7136  0047FC  0D01               	mullw	1
  7137  0047FE  0E99               	movlw	low ipAdressToString@address
  7138  004800  24F3               	addwf	prodl,w,c
  7139  004802  6ED9               	movwf	fsr2l,c
  7140  004804  0E03               	movlw	high ipAdressToString@address
  7141  004806  20F4               	addwfc	prodh,w,c
  7142  004808  6EDA               	movwf	fsr2h,c
  7143  00480A  0E00               	movlw	0
  7144  00480C  6EDF               	movwf	indf2,c
  7145                           
  7146                           ; BSR set to: 0
  7147                           ;uart.c: 150: return address;
  7148  00480E  0E99               	movlw	low ipAdressToString@address
  7149  004810  6F84               	movwf	?_ipAdressToString& (0+255),b
  7150  004812  0E03               	movlw	high ipAdressToString@address
  7151  004814  6F85               	movwf	(?_ipAdressToString+1)& (0+255),b
  7152  004816  0012               	return	
  7153  004818                     __end_of_ipAdressToString:
  7154                           	opt stack 0
  7155                           tblptru	equ	0xFF8
  7156                           tblptrh	equ	0xFF7
  7157                           tblptrl	equ	0xFF6
  7158                           tablat	equ	0xFF5
  7159                           prodh	equ	0xFF4
  7160                           prodl	equ	0xFF3
  7161                           intcon	equ	0xFF2
  7162                           intcon3	equ	0xFF0
  7163                           indf0	equ	0xFEF
  7164                           postinc0	equ	0xFEE
  7165                           plusw0	equ	0xFEB
  7166                           fsr0h	equ	0xFEA
  7167                           fsr0l	equ	0xFE9
  7168                           wreg	equ	0xFE8
  7169                           indf1	equ	0xFE7
  7170                           postdec1	equ	0xFE5
  7171                           plusw1	equ	0xFE3
  7172                           fsr1h	equ	0xFE2
  7173                           fsr1l	equ	0xFE1
  7174                           indf2	equ	0xFDF
  7175                           postinc2	equ	0xFDE
  7176                           postdec2	equ	0xFDD
  7177                           plusw2	equ	0xFDB
  7178                           fsr2h	equ	0xFDA
  7179                           fsr2l	equ	0xFD9
  7180                           status	equ	0xFD8
  7181                           
  7182 ;; *************** function _ethernet_rxGetNewFrame *****************
  7183 ;; Defined at:
  7184 ;;		line 55 in file "src/eth/ethernet.c"
  7185 ;; Parameters:    Size  Location     Type
  7186 ;;  frame           2  223[BANK1 ] PTR struct ethernetFrame
  7187 ;;		 -> stack(124), 
  7188 ;; Auto vars:     Size  Location     Type
  7189 ;;  err             3  233[BANK1 ] struct error
  7190 ;; Return value:  Size  Location     Type
  7191 ;;                  3  223[BANK1 ] struct error
  7192 ;; Registers used:
  7193 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7194 ;; Tracked objects:
  7195 ;;		On entry : 0/0
  7196 ;;		On exit  : 0/0
  7197 ;;		Unchanged: 0/0
  7198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7199 ;;      Params:         0       0       2       0       0       0       0       0       0
  7200 ;;      Locals:         0       0       3       0       0       0       0       0       0
  7201 ;;      Temps:          0       0       8       0       0       0       0       0       0
  7202 ;;      Totals:         0       0      13       0       0       0       0       0       0
  7203 ;;Total ram usage:       13 bytes
  7204 ;; Hardware stack levels used:    1
  7205 ;; Hardware stack levels required when called:   14
  7206 ;; This function calls:
  7207 ;;		_UARTTransmitText
  7208 ;;		_UART_resetFormat
  7209 ;;		_UART_setFormat
  7210 ;;		_arp_handleNewPacket
  7211 ;;		_etherTypeToString
  7212 ;;		_ethernetController_dropPacket
  7213 ;;		_ethernetController_getEtherTypeField
  7214 ;;		_ethernetController_getNextPacketPointer
  7215 ;;		_ethernetController_getRSV
  7216 ;;		_ethernetController_updateNextPacketPointer
  7217 ;;		_getMillis
  7218 ;;		_intToString
  7219 ;;		_ipv4_handleNewPacket
  7220 ;;		_macToString
  7221 ;; This function is called by:
  7222 ;;		_handleStackBackgroundTasks
  7223 ;; This function uses a non-reentrant model
  7224 ;;
  7225                           
  7226                           	psect	text18
  7227  000FE6                     __ptext18:
  7228                           	opt stack 0
  7229  000FE6                     _ethernet_rxGetNewFrame:
  7230                           	opt stack 15
  7231                           
  7232                           ;ethernet.c: 56: uint32_t static counter = 0;
  7233                           ;ethernet.c: 57: error_t err;
  7234                           ;ethernet.c: 58: err.module = ERROR_MODULE_ETHERNET;
  7235                           
  7236                           ; BSR set to: 0
  7237                           ;incstack = 0
  7238  000FE6  0E02               	movlw	2
  7239  000FE8  0101               	movlb	1	; () banked
  7240  000FEA  6FE9               	movwf	ethernet_rxGetNewFrame@err& (0+255),b
  7241                           
  7242                           ;ethernet.c: 59: err.code = (uint16_t)0;
  7243  000FEC  0E00               	movlw	0
  7244  000FEE  6FEB               	movwf	(ethernet_rxGetNewFrame@err+2)& (0+255),b
  7245  000FF0  0E00               	movlw	0
  7246  000FF2  6FEA               	movwf	(ethernet_rxGetNewFrame@err+1)& (0+255),b
  7247                           
  7248                           ; BSR set to: 1
  7249                           ;ethernet.c: 62: frame->tReceived = getMillis();
  7250  000FF4  EC00  F037         	call	_getMillis	;wreg free
  7251  000FF8  0101               	movlb	1	; () banked
  7252  000FFA  EE20 F01E          	lfsr	2,30
  7253  000FFE  51DF               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7254  001000  26D9               	addwf	fsr2l,f,c
  7255  001002  51E0               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7256  001004  22DA               	addwfc	fsr2h,f,c
  7257  001006  0100               	movlb	0	; () banked
  7258  001008  C060  FFDE         	movff	?_getMillis,postinc2
  7259  00100C  C061  FFDE         	movff	?_getMillis+1,postinc2
  7260  001010  C062  FFDE         	movff	?_getMillis+2,postinc2
  7261  001014  C063  FFDE         	movff	?_getMillis+3,postinc2
  7262                           
  7263                           ; BSR set to: 0
  7264                           ;ethernet.c: 63: frame->memory.start = ethernetController_getNextPacketPointer();
  7265  001018  EC30  F037         	call	_ethernetController_getNextPacketPointer	;wreg free
  7266  00101C  0101               	movlb	1	; () banked
  7267  00101E  EE20 F010          	lfsr	2,16
  7268  001022  51DF               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7269  001024  26D9               	addwf	fsr2l,f,c
  7270  001026  51E0               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7271  001028  22DA               	addwfc	fsr2h,f,c
  7272  00102A  0100               	movlb	0	; () banked
  7273  00102C  C062  FFDE         	movff	?_ethernetController_getNextPacketPointer,postinc2
  7274  001030  C063  FFDD         	movff	?_ethernetController_getNextPacketPointer+1,postdec2
  7275                           
  7276                           ; BSR set to: 0
  7277                           ;ethernet.c: 64: ethernetController_updateNextPacketPointer();
  7278  001034  EC51  F02F         	call	_ethernetController_updateNextPacketPointer	;wreg free
  7279                           
  7280                           ;ethernet.c: 65: frame->memory.fIsAssigned = 1;
  7281  001038  0101               	movlb	1	; () banked
  7282  00103A  EE20 F016          	lfsr	2,22
  7283  00103E  51DF               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7284  001040  26D9               	addwf	fsr2l,f,c
  7285  001042  51E0               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7286  001044  22DA               	addwfc	fsr2h,f,c
  7287  001046  0E01               	movlw	1
  7288  001048  6EDF               	movwf	indf2,c
  7289                           
  7290                           ; BSR set to: 1
  7291                           ;ethernet.c: 66: frame->receiveStatusVector = ethernetController_getRSV(frame->memory.st
      +                          art);
  7292  00104A  EE20 F010          	lfsr	2,16
  7293  00104E  51DF               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7294  001050  26D9               	addwf	fsr2l,f,c
  7295  001052  51E0               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7296  001054  22DA               	addwfc	fsr2h,f,c
  7297  001056  CFDE F071          	movff	postinc2,ethernetController_getRSV@address
  7298  00105A  CFDD F072          	movff	postdec2,ethernetController_getRSV@address+1
  7299  00105E  ECCA  F02F         	call	_ethernetController_getRSV	;wreg free
  7300  001062  0101               	movlb	1	; () banked
  7301  001064  EE20 F019          	lfsr	2,25
  7302  001068  51DF               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7303  00106A  26D9               	addwf	fsr2l,f,c
  7304  00106C  51E0               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7305  00106E  22DA               	addwfc	fsr2h,f,c
  7306  001070  0E04               	movlw	4
  7307  001072                     u14921:
  7308  001072  CFEB FFDB          	movff	plusw0,plusw2
  7309  001076  06E8               	decf	wreg,f,c
  7310  001078  E2FC               	bc	u14921
  7311                           
  7312                           ; BSR set to: 1
  7313                           ;ethernet.c: 67: frame->memory.length = frame->receiveStatusVector.length;
  7314  00107A  EE20 F019          	lfsr	2,25
  7315  00107E  51DF               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7316  001080  26D9               	addwf	fsr2l,f,c
  7317  001082  51E0               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7318  001084  22DA               	addwfc	fsr2h,f,c
  7319  001086  EE10 F014          	lfsr	1,20
  7320  00108A  51DF               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7321  00108C  26E1               	addwf	fsr1l,f,c
  7322  00108E  51E0               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7323  001090  22E2               	addwfc	fsr1h,f,c
  7324  001092  CFDE FFE6          	movff	postinc2,postinc1
  7325  001096  CFDD FFE5          	movff	postdec2,postdec1
  7326                           
  7327                           ; BSR set to: 1
  7328                           ;ethernet.c: 71: if (frame->memory.start + frame->memory.length > 0x5FFF) {
  7329  00109A  EE20 F014          	lfsr	2,20
  7330  00109E  51DF               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7331  0010A0  26D9               	addwf	fsr2l,f,c
  7332  0010A2  51E0               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7333  0010A4  22DA               	addwfc	fsr2h,f,c
  7334  0010A6  CFDE F1E1          	movff	postinc2,??_ethernet_rxGetNewFrame
  7335  0010AA  CFDD F1E2          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  7336  0010AE  EE20 F010          	lfsr	2,16
  7337  0010B2  51DF               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7338  0010B4  26D9               	addwf	fsr2l,f,c
  7339  0010B6  51E0               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7340  0010B8  22DA               	addwfc	fsr2h,f,c
  7341  0010BA  CFDE F1E3          	movff	postinc2,??_ethernet_rxGetNewFrame+2
  7342  0010BE  CFDD F1E4          	movff	postdec2,??_ethernet_rxGetNewFrame+3
  7343  0010C2  51E1               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  7344  0010C4  27E3               	addwf	(??_ethernet_rxGetNewFrame+2)& (0+255),f,b
  7345  0010C6  51E2               	movf	(??_ethernet_rxGetNewFrame+1)& (0+255),w,b
  7346  0010C8  23E4               	addwfc	(??_ethernet_rxGetNewFrame+3)& (0+255),f,b
  7347  0010CA  0E60               	movlw	96
  7348  0010CC  5DE4               	subwf	(??_ethernet_rxGetNewFrame+3)& (0+255),w,b
  7349  0010CE  A0D8               	btfss	status,0,c
  7350  0010D0  D03B               	goto	l363
  7351                           
  7352                           ; BSR set to: 1
  7353                           ;ethernet.c: 73: frame->memory.end = frame->memory.length - ((0x5FFF - 0x3000) - frame->
      +                          memory.start) + 0x3000;
  7354  0010D2  0E00               	movlw	0
  7355  0010D4  6FE1               	movwf	??_ethernet_rxGetNewFrame& (0+255),b
  7356  0010D6  0E30               	movlw	48
  7357  0010D8  6FE2               	movwf	(??_ethernet_rxGetNewFrame+1)& (0+255),b
  7358  0010DA  EE20 F014          	lfsr	2,20
  7359  0010DE  51DF               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7360  0010E0  26D9               	addwf	fsr2l,f,c
  7361  0010E2  51E0               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7362  0010E4  22DA               	addwfc	fsr2h,f,c
  7363  0010E6  CFDE F1E3          	movff	postinc2,??_ethernet_rxGetNewFrame+2
  7364  0010EA  CFDD F1E4          	movff	postdec2,??_ethernet_rxGetNewFrame+3
  7365  0010EE  0EFF               	movlw	255
  7366  0010F0  6FE5               	movwf	(??_ethernet_rxGetNewFrame+4)& (0+255),b
  7367  0010F2  0E2F               	movlw	47
  7368  0010F4  6FE6               	movwf	(??_ethernet_rxGetNewFrame+5)& (0+255),b
  7369  0010F6  EE20 F010          	lfsr	2,16
  7370  0010FA  51DF               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7371  0010FC  26D9               	addwf	fsr2l,f,c
  7372  0010FE  51E0               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7373  001100  22DA               	addwfc	fsr2h,f,c
  7374  001102  CFDE F1E7          	movff	postinc2,??_ethernet_rxGetNewFrame+6
  7375  001106  CFDD F1E8          	movff	postdec2,??_ethernet_rxGetNewFrame+7
  7376  00110A  1FE7               	comf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  7377  00110C  1FE8               	comf	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  7378  00110E  4BE7               	infsnz	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  7379  001110  2BE8               	incf	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  7380  001112  51E5               	movf	(??_ethernet_rxGetNewFrame+4)& (0+255),w,b
  7381  001114  27E7               	addwf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  7382  001116  51E6               	movf	(??_ethernet_rxGetNewFrame+5)& (0+255),w,b
  7383  001118  23E8               	addwfc	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  7384  00111A  1FE7               	comf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  7385  00111C  1FE8               	comf	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  7386  00111E  4BE7               	infsnz	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  7387  001120  2BE8               	incf	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  7388  001122  51E3               	movf	(??_ethernet_rxGetNewFrame+2)& (0+255),w,b
  7389  001124  27E7               	addwf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  7390  001126  51E4               	movf	(??_ethernet_rxGetNewFrame+3)& (0+255),w,b
  7391  001128  23E8               	addwfc	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  7392  00112A  51E1               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  7393  00112C  27E7               	addwf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  7394  00112E  51E2               	movf	(??_ethernet_rxGetNewFrame+1)& (0+255),w,b
  7395  001130  23E8               	addwfc	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  7396  001132  EE20 F012          	lfsr	2,18
  7397  001136  51DF               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7398  001138  26D9               	addwf	fsr2l,f,c
  7399  00113A  51E0               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7400  00113C  22DA               	addwfc	fsr2h,f,c
  7401  00113E  C1E7  FFDE         	movff	??_ethernet_rxGetNewFrame+6,postinc2
  7402  001142  C1E8  FFDD         	movff	??_ethernet_rxGetNewFrame+7,postdec2
  7403                           
  7404                           ;ethernet.c: 74: } else {
  7405  001146  D022               	goto	l364
  7406  001148                     l363:
  7407                           
  7408                           ; BSR set to: 1
  7409                           ;ethernet.c: 75: frame->memory.end = frame->memory.start + frame->memory.length;
  7410                           
  7411                           ; BSR set to: 1
  7412  001148  EE20 F014          	lfsr	2,20
  7413  00114C  51DF               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7414  00114E  26D9               	addwf	fsr2l,f,c
  7415  001150  51E0               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7416  001152  22DA               	addwfc	fsr2h,f,c
  7417  001154  CFDE F1E1          	movff	postinc2,??_ethernet_rxGetNewFrame
  7418  001158  CFDD F1E2          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  7419  00115C  EE20 F010          	lfsr	2,16
  7420  001160  51DF               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7421  001162  26D9               	addwf	fsr2l,f,c
  7422  001164  51E0               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7423  001166  22DA               	addwfc	fsr2h,f,c
  7424  001168  CFDE F1E3          	movff	postinc2,??_ethernet_rxGetNewFrame+2
  7425  00116C  CFDD F1E4          	movff	postdec2,??_ethernet_rxGetNewFrame+3
  7426  001170  51E1               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  7427  001172  27E3               	addwf	(??_ethernet_rxGetNewFrame+2)& (0+255),f,b
  7428  001174  51E2               	movf	(??_ethernet_rxGetNewFrame+1)& (0+255),w,b
  7429  001176  23E4               	addwfc	(??_ethernet_rxGetNewFrame+3)& (0+255),f,b
  7430  001178  EE20 F012          	lfsr	2,18
  7431  00117C  51DF               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7432  00117E  26D9               	addwf	fsr2l,f,c
  7433  001180  51E0               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7434  001182  22DA               	addwfc	fsr2h,f,c
  7435  001184  C1E3  FFDE         	movff	??_ethernet_rxGetNewFrame+2,postinc2
  7436  001188  C1E4  FFDD         	movff	??_ethernet_rxGetNewFrame+3,postdec2
  7437  00118C                     l364:
  7438                           
  7439                           ; BSR set to: 1
  7440                           ;ethernet.c: 76: }
  7441                           ;ethernet.c: 77: frame->ethertype = ethernetController_getEtherTypeField(frame->memory);
  7442                           
  7443                           ; BSR set to: 1
  7444  00118C  EE20 F010          	lfsr	2,16
  7445  001190  51DF               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7446  001192  26D9               	addwf	fsr2l,f,c
  7447  001194  51E0               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7448  001196  22DA               	addwfc	fsr2h,f,c
  7449  001198  EE00  F06F         	lfsr	0,ethernetController_getEtherTypeField@field
  7450  00119C  0E08               	movlw	8
  7451  00119E                     u14941:
  7452  00119E  CFDB FFEB          	movff	plusw2,plusw0
  7453  0011A2  06E8               	decf	wreg,f,c
  7454  0011A4  E2FC               	bc	u14941
  7455  0011A6  EC77  F030         	call	_ethernetController_getEtherTypeField	;wreg free
  7456  0011AA  0101               	movlb	1	; () banked
  7457  0011AC  EE20 F00E          	lfsr	2,14
  7458  0011B0  51DF               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7459  0011B2  26D9               	addwf	fsr2l,f,c
  7460  0011B4  51E0               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7461  0011B6  22DA               	addwfc	fsr2h,f,c
  7462  0011B8  0100               	movlb	0	; () banked
  7463  0011BA  C06F  FFDE         	movff	?_ethernetController_getEtherTypeField,postinc2
  7464  0011BE  C070  FFDD         	movff	?_ethernetController_getEtherTypeField+1,postdec2
  7465                           
  7466                           ; BSR set to: 0
  7467                           ;ethernet.c: 80: UARTTransmitText("[");
  7468  0011C2  0EFB               	movlw	low (STR_11+1)
  7469  0011C4  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  7470  0011C6  0E7F               	movlw	high (STR_11+1)
  7471  0011C8  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7472  0011CA  EC36  F032         	call	_UARTTransmitText	;wreg free
  7473                           
  7474                           ;ethernet.c: 81: UARTTransmitText(intToString(counter++, 10));
  7475  0011CE  C2C4  F084         	movff	ethernet_rxGetNewFrame@counter,intToString@val
  7476  0011D2  C2C5  F085         	movff	ethernet_rxGetNewFrame@counter+1,intToString@val+1
  7477  0011D6  C2C6  F086         	movff	ethernet_rxGetNewFrame@counter+2,intToString@val+2
  7478  0011DA  C2C7  F087         	movff	ethernet_rxGetNewFrame@counter+3,intToString@val+3
  7479  0011DE  0E0A               	movlw	10
  7480  0011E0  0100               	movlb	0	; () banked
  7481  0011E2  6F88               	movwf	intToString@b& (0+255),b
  7482  0011E4  EC0D  F035         	call	_intToString	;wreg free
  7483  0011E8  C084  F08D         	movff	?_intToString,UARTTransmitText@str
  7484  0011EC  C085  F08E         	movff	?_intToString+1,UARTTransmitText@str+1
  7485  0011F0  EC36  F032         	call	_UARTTransmitText	;wreg free
  7486  0011F4  0E01               	movlw	1
  7487  0011F6  0102               	movlb	2	; () banked
  7488  0011F8  27C4               	addwf	ethernet_rxGetNewFrame@counter& (0+255),f,b
  7489  0011FA  0E00               	movlw	0
  7490  0011FC  23C5               	addwfc	(ethernet_rxGetNewFrame@counter+1)& (0+255),f,b
  7491  0011FE  23C6               	addwfc	(ethernet_rxGetNewFrame@counter+2)& (0+255),f,b
  7492  001200  23C7               	addwfc	(ethernet_rxGetNewFrame@counter+3)& (0+255),f,b
  7493                           
  7494                           ; BSR set to: 2
  7495                           ;ethernet.c: 82: UARTTransmitText("]");
  7496  001202  0E90               	movlw	low (STR_111+4)
  7497  001204  0100               	movlb	0	; () banked
  7498  001206  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  7499  001208  0E7F               	movlw	high (STR_111+4)
  7500  00120A  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7501  00120C  EC36  F032         	call	_UARTTransmitText	;wreg free
  7502                           
  7503                           ;ethernet.c: 87: if (frame->receiveStatusVector.broadcast)
  7504  001210  0101               	movlb	1	; () banked
  7505  001212  EE20 F01B          	lfsr	2,27
  7506  001216  51DF               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7507  001218  26D9               	addwf	fsr2l,f,c
  7508  00121A  51E0               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7509  00121C  22DA               	addwfc	fsr2h,f,c
  7510  00121E  AEDF               	btfss	indf2,7,c
  7511  001220  D007               	goto	l365
  7512                           
  7513                           ; BSR set to: 1
  7514                           ;ethernet.c: 89: UARTTransmitText("[Broadcast]");
  7515  001222  0E36               	movlw	low STR_3
  7516  001224  0100               	movlb	0	; () banked
  7517  001226  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  7518  001228  0E7F               	movlw	high STR_3
  7519  00122A  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7520  00122C  EC36  F032         	call	_UARTTransmitText	;wreg free
  7521  001230                     l365:
  7522                           
  7523                           ;ethernet.c: 91: if (frame->receiveStatusVector.unicast)
  7524  001230  0101               	movlb	1	; () banked
  7525  001232  EE20 F01D          	lfsr	2,29
  7526  001236  51DF               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7527  001238  26D9               	addwf	fsr2l,f,c
  7528  00123A  51E0               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7529  00123C  22DA               	addwfc	fsr2h,f,c
  7530  00123E  A4DF               	btfss	indf2,2,c
  7531  001240  D007               	goto	l366
  7532                           
  7533                           ; BSR set to: 1
  7534                           ;ethernet.c: 93: UARTTransmitText("[Unicast]");
  7535  001242  0E62               	movlw	low STR_4
  7536  001244  0100               	movlb	0	; () banked
  7537  001246  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  7538  001248  0E7F               	movlw	high STR_4
  7539  00124A  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7540  00124C  EC36  F032         	call	_UARTTransmitText	;wreg free
  7541  001250                     l366:
  7542                           
  7543                           ;ethernet.c: 95: if (!frame->receiveStatusVector.receivedOk) {
  7544  001250  0101               	movlb	1	; () banked
  7545  001252  EE20 F01B          	lfsr	2,27
  7546  001256  51DF               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7547  001258  26D9               	addwf	fsr2l,f,c
  7548  00125A  51E0               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7549  00125C  22DA               	addwfc	fsr2h,f,c
  7550  00125E  BADF               	btfsc	indf2,5,c
  7551  001260  D0F1               	goto	l368
  7552                           
  7553                           ; BSR set to: 1
  7554                           ;ethernet.c: 97: UART_setFormat(UART_COLOR_BG_RED);
  7555  001262  0E00               	movlw	0
  7556  001264  EC8E  F02B         	call	_UART_setFormat
  7557                           
  7558                           ;ethernet.c: 98: UARTTransmitText("[Symbol Errors]");
  7559  001268  0E80               	movlw	low STR_5
  7560  00126A  0100               	movlb	0	; () banked
  7561  00126C  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  7562  00126E  0E7E               	movlw	high STR_5
  7563  001270  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7564  001272  EC36  F032         	call	_UARTTransmitText	;wreg free
  7565                           
  7566                           ;ethernet.c: 99: UART_resetFormat();
  7567  001276  EC11  F037         	call	_UART_resetFormat	;wreg free
  7568                           
  7569                           ;ethernet.c: 101: }
  7570                           ;ethernet.c: 106: switch (frame->ethertype) {
  7571  00127A  D0E4               	goto	l368
  7572  00127C                     
  7573                           ;ethernet.c: 109: UART_setFormat(UART_COLOR_BG_BLUE);
  7574  00127C  0E02               	movlw	2
  7575  00127E  EC8E  F02B         	call	_UART_setFormat
  7576                           
  7577                           ;ethernet.c: 110: UARTTransmitText("[");
  7578  001282  0EFB               	movlw	low (STR_11+1)
  7579  001284  0100               	movlb	0	; () banked
  7580  001286  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  7581  001288  0E7F               	movlw	high (STR_11+1)
  7582  00128A  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7583  00128C  EC36  F032         	call	_UARTTransmitText	;wreg free
  7584                           
  7585                           ;ethernet.c: 111: UARTTransmitText(etherTypeToString(ETHERTYPE_ARP));
  7586  001290  0E08               	movlw	8
  7587  001292  0100               	movlb	0	; () banked
  7588  001294  6F61               	movwf	(etherTypeToString@ethertype+1)& (0+255),b
  7589  001296  0E06               	movlw	6
  7590  001298  6F60               	movwf	etherTypeToString@ethertype& (0+255),b
  7591  00129A  ECBF  F033         	call	_etherTypeToString	;wreg free
  7592  00129E  C060  F08D         	movff	?_etherTypeToString,UARTTransmitText@str
  7593  0012A2  C061  F08E         	movff	?_etherTypeToString+1,UARTTransmitText@str+1
  7594  0012A6  EC36  F032         	call	_UARTTransmitText	;wreg free
  7595                           
  7596                           ;ethernet.c: 112: UARTTransmitText("]");
  7597  0012AA  0E90               	movlw	low (STR_111+4)
  7598  0012AC  0100               	movlb	0	; () banked
  7599  0012AE  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  7600  0012B0  0E7F               	movlw	high (STR_111+4)
  7601  0012B2  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7602  0012B4  EC36  F032         	call	_UARTTransmitText	;wreg free
  7603                           
  7604                           ;ethernet.c: 113: UART_resetFormat();
  7605  0012B8  EC11  F037         	call	_UART_resetFormat	;wreg free
  7606                           
  7607                           ;ethernet.c: 115: arp_handleNewPacket(frame);
  7608  0012BC  C1DF  F0FC         	movff	ethernet_rxGetNewFrame@frame,arp_handleNewPacket@frame
  7609  0012C0  C1E0  F0FD         	movff	ethernet_rxGetNewFrame@frame+1,arp_handleNewPacket@frame+1
  7610  0012C4  ECBF  F028         	call	_arp_handleNewPacket	;wreg free
  7611                           
  7612                           ;ethernet.c: 117: break;
  7613  0012C8  D0D4               	goto	l370
  7614  0012CA                     
  7615                           ;ethernet.c: 120: UART_setFormat(UART_COLOR_BG_MAGENTA);
  7616  0012CA  0E04               	movlw	4
  7617  0012CC  EC8E  F02B         	call	_UART_setFormat
  7618                           
  7619                           ;ethernet.c: 121: UARTTransmitText("[");
  7620  0012D0  0EFB               	movlw	low (STR_11+1)
  7621  0012D2  0100               	movlb	0	; () banked
  7622  0012D4  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  7623  0012D6  0E7F               	movlw	high (STR_11+1)
  7624  0012D8  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7625  0012DA  EC36  F032         	call	_UARTTransmitText	;wreg free
  7626                           
  7627                           ;ethernet.c: 122: UARTTransmitText(etherTypeToString(ETHERTYPE_IPv4));
  7628  0012DE  0E08               	movlw	8
  7629  0012E0  0100               	movlb	0	; () banked
  7630  0012E2  6F61               	movwf	(etherTypeToString@ethertype+1)& (0+255),b
  7631  0012E4  0E00               	movlw	0
  7632  0012E6  6F60               	movwf	etherTypeToString@ethertype& (0+255),b
  7633  0012E8  ECBF  F033         	call	_etherTypeToString	;wreg free
  7634  0012EC  C060  F08D         	movff	?_etherTypeToString,UARTTransmitText@str
  7635  0012F0  C061  F08E         	movff	?_etherTypeToString+1,UARTTransmitText@str+1
  7636  0012F4  EC36  F032         	call	_UARTTransmitText	;wreg free
  7637                           
  7638                           ;ethernet.c: 123: UARTTransmitText("]");
  7639  0012F8  0E90               	movlw	low (STR_111+4)
  7640  0012FA  0100               	movlb	0	; () banked
  7641  0012FC  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  7642  0012FE  0E7F               	movlw	high (STR_111+4)
  7643  001300  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7644  001302  EC36  F032         	call	_UARTTransmitText	;wreg free
  7645                           
  7646                           ;ethernet.c: 124: UART_resetFormat();
  7647  001306  EC11  F037         	call	_UART_resetFormat	;wreg free
  7648                           
  7649                           ;ethernet.c: 126: ipv4_handleNewPacket(frame);
  7650  00130A  C1DF  F1DD         	movff	ethernet_rxGetNewFrame@frame,ipv4_handleNewPacket@frame
  7651  00130E  C1E0  F1DE         	movff	ethernet_rxGetNewFrame@frame+1,ipv4_handleNewPacket@frame+1
  7652  001312  EC12  F015         	call	_ipv4_handleNewPacket	;wreg free
  7653                           
  7654                           ;ethernet.c: 127: break;
  7655  001316  D0AD               	goto	l370
  7656  001318                     
  7657                           ;ethernet.c: 130: UART_setFormat(UART_COLOR_BG_RED);
  7658  001318  0E00               	movlw	0
  7659  00131A  EC8E  F02B         	call	_UART_setFormat
  7660                           
  7661                           ;ethernet.c: 131: UARTTransmitText("[");
  7662  00131E  0EFB               	movlw	low (STR_11+1)
  7663  001320  0100               	movlb	0	; () banked
  7664  001322  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  7665  001324  0E7F               	movlw	high (STR_11+1)
  7666  001326  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7667  001328  EC36  F032         	call	_UARTTransmitText	;wreg free
  7668                           
  7669                           ;ethernet.c: 132: UARTTransmitText(etherTypeToString(ETHERTYPE_UNKNOWN));
  7670  00132C  0EFF               	movlw	255
  7671  00132E  0100               	movlb	0	; () banked
  7672  001330  6F61               	movwf	(etherTypeToString@ethertype+1)& (0+255),b
  7673  001332  6960               	setf	etherTypeToString@ethertype& (0+255),b
  7674  001334  ECBF  F033         	call	_etherTypeToString	;wreg free
  7675  001338  C060  F08D         	movff	?_etherTypeToString,UARTTransmitText@str
  7676  00133C  C061  F08E         	movff	?_etherTypeToString+1,UARTTransmitText@str+1
  7677  001340  EC36  F032         	call	_UARTTransmitText	;wreg free
  7678                           
  7679                           ;ethernet.c: 133: UARTTransmitText("][");
  7680  001344  0EFA               	movlw	low STR_11
  7681  001346  0100               	movlb	0	; () banked
  7682  001348  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  7683  00134A  0E7F               	movlw	high STR_11
  7684  00134C  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7685  00134E  EC36  F032         	call	_UARTTransmitText	;wreg free
  7686                           
  7687                           ;ethernet.c: 134: UARTTransmitText(macToString(frame->source));
  7688  001352  0101               	movlb	1	; () banked
  7689  001354  EE20 F002          	lfsr	2,2
  7690  001358  51DF               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7691  00135A  26D9               	addwf	fsr2l,f,c
  7692  00135C  51E0               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7693  00135E  22DA               	addwfc	fsr2h,f,c
  7694  001360  EE00  F084         	lfsr	0,macToString@addr
  7695  001364  0E05               	movlw	5
  7696  001366                     u14981:
  7697  001366  CFDB FFEB          	movff	plusw2,plusw0
  7698  00136A  06E8               	decf	wreg,f,c
  7699  00136C  E2FC               	bc	u14981
  7700  00136E  ECE2  F02A         	call	_macToString	;wreg free
  7701  001372  C084  F08D         	movff	?_macToString,UARTTransmitText@str
  7702  001376  C085  F08E         	movff	?_macToString+1,UARTTransmitText@str+1
  7703  00137A  EC36  F032         	call	_UARTTransmitText	;wreg free
  7704                           
  7705                           ;ethernet.c: 135: UARTTransmitText("->");
  7706  00137E  0EF7               	movlw	low STR_12
  7707  001380  0100               	movlb	0	; () banked
  7708  001382  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  7709  001384  0E7F               	movlw	high STR_12
  7710  001386  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7711  001388  EC36  F032         	call	_UARTTransmitText	;wreg free
  7712                           
  7713                           ;ethernet.c: 136: UARTTransmitText(macToString(frame->destination));
  7714  00138C  0101               	movlb	1	; () banked
  7715  00138E  EE20 F008          	lfsr	2,8
  7716  001392  51DF               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7717  001394  26D9               	addwf	fsr2l,f,c
  7718  001396  51E0               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7719  001398  22DA               	addwfc	fsr2h,f,c
  7720  00139A  EE00  F084         	lfsr	0,macToString@addr
  7721  00139E  0E05               	movlw	5
  7722  0013A0                     u14991:
  7723  0013A0  CFDB FFEB          	movff	plusw2,plusw0
  7724  0013A4  06E8               	decf	wreg,f,c
  7725  0013A6  E2FC               	bc	u14991
  7726  0013A8  ECE2  F02A         	call	_macToString	;wreg free
  7727  0013AC  C084  F08D         	movff	?_macToString,UARTTransmitText@str
  7728  0013B0  C085  F08E         	movff	?_macToString+1,UARTTransmitText@str+1
  7729  0013B4  EC36  F032         	call	_UARTTransmitText	;wreg free
  7730                           
  7731                           ;ethernet.c: 137: UARTTransmitText("][");
  7732  0013B8  0EFA               	movlw	low STR_11
  7733  0013BA  0100               	movlb	0	; () banked
  7734  0013BC  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  7735  0013BE  0E7F               	movlw	high STR_11
  7736  0013C0  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7737  0013C2  EC36  F032         	call	_UARTTransmitText	;wreg free
  7738                           
  7739                           ;ethernet.c: 138: UARTTransmitText(etherTypeToString(frame->ethertype));
  7740  0013C6  0101               	movlb	1	; () banked
  7741  0013C8  EE20 F00E          	lfsr	2,14
  7742  0013CC  51DF               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7743  0013CE  26D9               	addwf	fsr2l,f,c
  7744  0013D0  51E0               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7745  0013D2  22DA               	addwfc	fsr2h,f,c
  7746  0013D4  CFDE F060          	movff	postinc2,etherTypeToString@ethertype
  7747  0013D8  CFDD F061          	movff	postdec2,etherTypeToString@ethertype+1
  7748  0013DC  ECBF  F033         	call	_etherTypeToString	;wreg free
  7749  0013E0  C060  F08D         	movff	?_etherTypeToString,UARTTransmitText@str
  7750  0013E4  C061  F08E         	movff	?_etherTypeToString+1,UARTTransmitText@str+1
  7751  0013E8  EC36  F032         	call	_UARTTransmitText	;wreg free
  7752                           
  7753                           ;ethernet.c: 139: UARTTransmitText("][L=");
  7754  0013EC  0ED5               	movlw	low STR_14
  7755  0013EE  0100               	movlb	0	; () banked
  7756  0013F0  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  7757  0013F2  0E7F               	movlw	high STR_14
  7758  0013F4  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7759  0013F6  EC36  F032         	call	_UARTTransmitText	;wreg free
  7760                           
  7761                           ;ethernet.c: 140: UARTTransmitText(intToString(frame->length, 10));
  7762  0013FA  C1DF  FFD9         	movff	ethernet_rxGetNewFrame@frame,fsr2l
  7763  0013FE  C1E0  FFDA         	movff	ethernet_rxGetNewFrame@frame+1,fsr2h
  7764  001402  CFDE F1E1          	movff	postinc2,??_ethernet_rxGetNewFrame
  7765  001406  CFDD F1E2          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  7766  00140A  C1E1  F084         	movff	??_ethernet_rxGetNewFrame,intToString@val
  7767  00140E  C1E2  F085         	movff	??_ethernet_rxGetNewFrame+1,intToString@val+1
  7768  001412  0100               	movlb	0	; () banked
  7769  001414  6B86               	clrf	(intToString@val+2)& (0+255),b
  7770  001416  6B87               	clrf	(intToString@val+3)& (0+255),b
  7771  001418  0E0A               	movlw	10
  7772  00141A  6F88               	movwf	intToString@b& (0+255),b
  7773  00141C  EC0D  F035         	call	_intToString	;wreg free
  7774  001420  C084  F08D         	movff	?_intToString,UARTTransmitText@str
  7775  001424  C085  F08E         	movff	?_intToString+1,UARTTransmitText@str+1
  7776  001428  EC36  F032         	call	_UARTTransmitText	;wreg free
  7777                           
  7778                           ;ethernet.c: 141: UARTTransmitText("] ");
  7779  00142C  0EF4               	movlw	low STR_15
  7780  00142E  0100               	movlb	0	; () banked
  7781  001430  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  7782  001432  0E7F               	movlw	high STR_15
  7783  001434  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7784  001436  EC36  F032         	call	_UARTTransmitText	;wreg free
  7785                           
  7786                           ;ethernet.c: 142: UART_resetFormat();
  7787  00143A  EC11  F037         	call	_UART_resetFormat	;wreg free
  7788                           
  7789                           ;ethernet.c: 144: ethernetController_dropPacket();
  7790  00143E  EC45  F034         	call	_ethernetController_dropPacket	;wreg free
  7791                           
  7792                           ;ethernet.c: 146: }
  7793                           
  7794                           ;ethernet.c: 145: break;
  7795  001442  D017               	goto	l370
  7796  001444                     l368:
  7797  001444  0101               	movlb	1	; () banked
  7798  001446  EE20 F00E          	lfsr	2,14
  7799  00144A  51DF               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7800  00144C  26D9               	addwf	fsr2l,f,c
  7801  00144E  51E0               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7802  001450  22DA               	addwfc	fsr2h,f,c
  7803  001452  CFDE F1E1          	movff	postinc2,??_ethernet_rxGetNewFrame
  7804  001456  CFDD F1E2          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  7805                           
  7806                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7807                           ; Switch size 1, requested type "space"
  7808                           ; Number of cases is 1, Range of values is 8 to 8
  7809                           ; switch strategies available:
  7810                           ; Name         Instructions Cycles
  7811                           ; simple_byte            4     3 (average)
  7812                           ;	Chosen strategy is simple_byte
  7813  00145A  51E2               	movf	(??_ethernet_rxGetNewFrame+1)& (0+255),w,b
  7814  00145C  0A08               	xorlw	8	; case 8
  7815  00145E  A4D8               	btfss	status,2,c
  7816  001460  D75B               	goto	l372
  7817                           
  7818                           ; BSR set to: 1
  7819                           ; Switch size 1, requested type "space"
  7820                           ; Number of cases is 2, Range of values is 0 to 6
  7821                           ; switch strategies available:
  7822                           ; Name         Instructions Cycles
  7823                           ; simple_byte            7     4 (average)
  7824                           ;	Chosen strategy is simple_byte
  7825  001462  51E1               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  7826  001464  0A00               	xorlw	0	; case 0
  7827  001466  B4D8               	btfsc	status,2,c
  7828  001468  D730               	goto	l371
  7829  00146A  0A06               	xorlw	6	; case 6
  7830  00146C  B4D8               	btfsc	status,2,c
  7831  00146E  D706               	goto	l369
  7832  001470  D753               	goto	l372
  7833  001472                     l370:
  7834                           
  7835                           ;ethernet.c: 159: UARTTransmitText("\n\r");
  7836                           
  7837                           ; BSR set to: 1
  7838  001472  0EEB               	movlw	low (STR_17+1)
  7839  001474  0100               	movlb	0	; () banked
  7840  001476  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  7841  001478  0E7F               	movlw	high (STR_17+1)
  7842  00147A  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7843  00147C  EC36  F032         	call	_UARTTransmitText	;wreg free
  7844  001480  0012               	return	
  7845  001482                     __end_of_ethernet_rxGetNewFrame:
  7846                           	opt stack 0
  7847                           tblptru	equ	0xFF8
  7848                           tblptrh	equ	0xFF7
  7849                           tblptrl	equ	0xFF6
  7850                           tablat	equ	0xFF5
  7851                           prodh	equ	0xFF4
  7852                           prodl	equ	0xFF3
  7853                           intcon	equ	0xFF2
  7854                           intcon3	equ	0xFF0
  7855                           indf0	equ	0xFEF
  7856                           postinc0	equ	0xFEE
  7857                           plusw0	equ	0xFEB
  7858                           fsr0h	equ	0xFEA
  7859                           fsr0l	equ	0xFE9
  7860                           wreg	equ	0xFE8
  7861                           indf1	equ	0xFE7
  7862                           postinc1	equ	0xFE6
  7863                           postdec1	equ	0xFE5
  7864                           plusw1	equ	0xFE3
  7865                           fsr1h	equ	0xFE2
  7866                           fsr1l	equ	0xFE1
  7867                           indf2	equ	0xFDF
  7868                           postinc2	equ	0xFDE
  7869                           postdec2	equ	0xFDD
  7870                           plusw2	equ	0xFDB
  7871                           fsr2h	equ	0xFDA
  7872                           fsr2l	equ	0xFD9
  7873                           status	equ	0xFD8
  7874                           
  7875 ;; *************** function _macToString *****************
  7876 ;; Defined at:
  7877 ;;		line 91 in file "src/system/uart.c"
  7878 ;; Parameters:    Size  Location     Type
  7879 ;;  addr            6   36[BANK0 ] struct macaddress
  7880 ;; Auto vars:     Size  Location     Type
  7881 ;;  i               1   43[BANK0 ] unsigned char 
  7882 ;;  j               1   44[BANK0 ] unsigned char 
  7883 ;; Return value:  Size  Location     Type
  7884 ;;                  2   36[BANK0 ] PTR unsigned char 
  7885 ;; Registers used:
  7886 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7887 ;; Tracked objects:
  7888 ;;		On entry : 0/0
  7889 ;;		On exit  : 0/0
  7890 ;;		Unchanged: 0/0
  7891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7892 ;;      Params:         0       6       0       0       0       0       0       0       0
  7893 ;;      Locals:         0       2       0       0       0       0       0       0       0
  7894 ;;      Temps:          0       1       0       0       0       0       0       0       0
  7895 ;;      Totals:         0       9       0       0       0       0       0       0       0
  7896 ;;Total ram usage:        9 bytes
  7897 ;; Hardware stack levels used:    1
  7898 ;; Hardware stack levels required when called:    7
  7899 ;; This function calls:
  7900 ;;		_itoa
  7901 ;; This function is called by:
  7902 ;;		_ethernet_rxGetNewFrame
  7903 ;;		_arpEntryToString
  7904 ;; This function uses a non-reentrant model
  7905 ;;
  7906                           
  7907                           	psect	text19
  7908  0055C4                     __ptext19:
  7909                           	opt stack 0
  7910  0055C4                     _macToString:
  7911                           	opt stack 21
  7912                           
  7913                           ;uart.c: 92: char static address[20];
  7914                           ;uart.c: 93: char static number[3];
  7915                           ;uart.c: 95: uint8_t j = 0;
  7916                           
  7917                           ;incstack = 0
  7918  0055C4  0E00               	movlw	0
  7919  0055C6  0100               	movlb	0	; () banked
  7920  0055C8  6F8C               	movwf	macToString@j& (0+255),b
  7921                           
  7922                           ;uart.c: 96: for (uint8_t i = 0; i < 6; i++) {
  7923  0055CA  0E00               	movlw	0
  7924  0055CC  6F8B               	movwf	macToString@i& (0+255),b
  7925  0055CE                     l11724:
  7926                           
  7927                           ; BSR set to: 0
  7928  0055CE  0E05               	movlw	5
  7929  0055D0  658B               	cpfsgt	macToString@i& (0+255),b
  7930  0055D2  D001               	goto	l834
  7931  0055D4  D03E               	goto	u14380
  7932  0055D6                     l834:
  7933                           
  7934                           ; BSR set to: 0
  7935                           ;uart.c: 97: itoa(&number[0], (int) addr.address[i], 16);
  7936                           
  7937                           ; BSR set to: 0
  7938  0055D6  0EE4               	movlw	low macToString@number
  7939  0055D8  6F7C               	movwf	itoa@buf& (0+255),b
  7940  0055DA  0E02               	movlw	high macToString@number
  7941  0055DC  6F7D               	movwf	(itoa@buf+1)& (0+255),b
  7942  0055DE  518B               	movf	macToString@i& (0+255),w,b
  7943  0055E0  0D01               	mullw	1
  7944  0055E2  0E84               	movlw	low macToString@addr
  7945  0055E4  24F3               	addwf	prodl,w,c
  7946  0055E6  6ED9               	movwf	fsr2l,c
  7947  0055E8  0E00               	movlw	high macToString@addr
  7948  0055EA  20F4               	addwfc	prodh,w,c
  7949  0055EC  6EDA               	movwf	fsr2h,c
  7950  0055EE  50DF               	movf	indf2,w,c
  7951  0055F0  6F8A               	movwf	??_macToString& (0+255),b
  7952  0055F2  518A               	movf	??_macToString& (0+255),w,b
  7953  0055F4  6F7E               	movwf	itoa@val& (0+255),b
  7954  0055F6  6B7F               	clrf	(itoa@val+1)& (0+255),b
  7955  0055F8  0E00               	movlw	0
  7956  0055FA  6F81               	movwf	(itoa@base+1)& (0+255),b
  7957  0055FC  0E10               	movlw	16
  7958  0055FE  6F80               	movwf	itoa@base& (0+255),b
  7959  005600  EC9D  F033         	call	_itoa	;wreg free
  7960                           
  7961                           ;uart.c: 98: address[j++] = number[0];
  7962  005604  0100               	movlb	0	; () banked
  7963  005606  518C               	movf	macToString@j& (0+255),w,b
  7964  005608  0D01               	mullw	1
  7965  00560A  0EAD               	movlw	low macToString@address
  7966  00560C  24F3               	addwf	prodl,w,c
  7967  00560E  6ED9               	movwf	fsr2l,c
  7968  005610  0E03               	movlw	high macToString@address
  7969  005612  20F4               	addwfc	prodh,w,c
  7970  005614  6EDA               	movwf	fsr2h,c
  7971  005616  C2E4  FFDF         	movff	macToString@number,indf2
  7972                           
  7973                           ; BSR set to: 0
  7974  00561A  2B8C               	incf	macToString@j& (0+255),f,b
  7975                           
  7976                           ; BSR set to: 0
  7977                           ;uart.c: 99: address[j++] = number[1];
  7978  00561C  518C               	movf	macToString@j& (0+255),w,b
  7979  00561E  0D01               	mullw	1
  7980  005620  0EAD               	movlw	low macToString@address
  7981  005622  24F3               	addwf	prodl,w,c
  7982  005624  6ED9               	movwf	fsr2l,c
  7983  005626  0E03               	movlw	high macToString@address
  7984  005628  20F4               	addwfc	prodh,w,c
  7985  00562A  6EDA               	movwf	fsr2h,c
  7986  00562C  C2E5  FFDF         	movff	macToString@number+1,indf2
  7987                           
  7988                           ; BSR set to: 0
  7989  005630  2B8C               	incf	macToString@j& (0+255),f,b
  7990                           
  7991                           ; BSR set to: 0
  7992                           ;uart.c: 100: if (i < 5)
  7993  005632  0E05               	movlw	5
  7994  005634  618B               	cpfslt	macToString@i& (0+255),b
  7995  005636  D00B               	goto	l836
  7996                           
  7997                           ; BSR set to: 0
  7998                           ;uart.c: 101: address[j++] = ':';
  7999  005638  518C               	movf	macToString@j& (0+255),w,b
  8000  00563A  0D01               	mullw	1
  8001  00563C  0EAD               	movlw	low macToString@address
  8002  00563E  24F3               	addwf	prodl,w,c
  8003  005640  6ED9               	movwf	fsr2l,c
  8004  005642  0E03               	movlw	high macToString@address
  8005  005644  20F4               	addwfc	prodh,w,c
  8006  005646  6EDA               	movwf	fsr2h,c
  8007  005648  0E3A               	movlw	58
  8008  00564A  6EDF               	movwf	indf2,c
  8009                           
  8010                           ; BSR set to: 0
  8011  00564C  2B8C               	incf	macToString@j& (0+255),f,b
  8012  00564E                     l836:
  8013                           
  8014                           ; BSR set to: 0
  8015                           
  8016                           ; BSR set to: 0
  8017  00564E  2B8B               	incf	macToString@i& (0+255),f,b
  8018  005650  D7BE               	goto	l11724
  8019  005652                     u14380:
  8020                           
  8021                           ; BSR set to: 0
  8022                           ;uart.c: 102: }
  8023                           ;uart.c: 103: address[j] = '\0';
  8024                           
  8025                           ; BSR set to: 0
  8026  005652  518C               	movf	macToString@j& (0+255),w,b
  8027  005654  0D01               	mullw	1
  8028  005656  0EAD               	movlw	low macToString@address
  8029  005658  24F3               	addwf	prodl,w,c
  8030  00565A  6ED9               	movwf	fsr2l,c
  8031  00565C  0E03               	movlw	high macToString@address
  8032  00565E  20F4               	addwfc	prodh,w,c
  8033  005660  6EDA               	movwf	fsr2h,c
  8034  005662  0E00               	movlw	0
  8035  005664  6EDF               	movwf	indf2,c
  8036                           
  8037                           ; BSR set to: 0
  8038                           ;uart.c: 105: return address;
  8039  005666  0EAD               	movlw	low macToString@address
  8040  005668  6F84               	movwf	?_macToString& (0+255),b
  8041  00566A  0E03               	movlw	high macToString@address
  8042  00566C  6F85               	movwf	(?_macToString+1)& (0+255),b
  8043  00566E  0012               	return	
  8044  005670                     __end_of_macToString:
  8045                           	opt stack 0
  8046                           tblptru	equ	0xFF8
  8047                           tblptrh	equ	0xFF7
  8048                           tblptrl	equ	0xFF6
  8049                           tablat	equ	0xFF5
  8050                           prodh	equ	0xFF4
  8051                           prodl	equ	0xFF3
  8052                           intcon	equ	0xFF2
  8053                           intcon3	equ	0xFF0
  8054                           indf0	equ	0xFEF
  8055                           postinc0	equ	0xFEE
  8056                           plusw0	equ	0xFEB
  8057                           fsr0h	equ	0xFEA
  8058                           fsr0l	equ	0xFE9
  8059                           wreg	equ	0xFE8
  8060                           indf1	equ	0xFE7
  8061                           postinc1	equ	0xFE6
  8062                           postdec1	equ	0xFE5
  8063                           plusw1	equ	0xFE3
  8064                           fsr1h	equ	0xFE2
  8065                           fsr1l	equ	0xFE1
  8066                           indf2	equ	0xFDF
  8067                           postinc2	equ	0xFDE
  8068                           postdec2	equ	0xFDD
  8069                           plusw2	equ	0xFDB
  8070                           fsr2h	equ	0xFDA
  8071                           fsr2l	equ	0xFD9
  8072                           status	equ	0xFD8
  8073                           
  8074 ;; *************** function _itoa *****************
  8075 ;; Defined at:
  8076 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
  8077 ;; Parameters:    Size  Location     Type
  8078 ;;  buf             2   28[BANK0 ] PTR unsigned char 
  8079 ;;		 -> ipAdressToString@number(4), macToString@number(3), 
  8080 ;;  val             2   30[BANK0 ] int 
  8081 ;;  base            2   32[BANK0 ] int 
  8082 ;; Auto vars:     Size  Location     Type
  8083 ;;  cp              2   34[BANK0 ] PTR unsigned char 
  8084 ;;		 -> ipAdressToString@number(4), macToString@number(3), 
  8085 ;; Return value:  Size  Location     Type
  8086 ;;                  2   28[BANK0 ] PTR unsigned char 
  8087 ;; Registers used:
  8088 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8089 ;; Tracked objects:
  8090 ;;		On entry : 0/0
  8091 ;;		On exit  : 0/0
  8092 ;;		Unchanged: 0/0
  8093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8094 ;;      Params:         0       6       0       0       0       0       0       0       0
  8095 ;;      Locals:         0       2       0       0       0       0       0       0       0
  8096 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8097 ;;      Totals:         0       8       0       0       0       0       0       0       0
  8098 ;;Total ram usage:        8 bytes
  8099 ;; Hardware stack levels used:    1
  8100 ;; Hardware stack levels required when called:    6
  8101 ;; This function calls:
  8102 ;;		_utoa
  8103 ;; This function is called by:
  8104 ;;		_macToString
  8105 ;;		_ipAdressToString
  8106 ;; This function uses a non-reentrant model
  8107 ;;
  8108                           
  8109                           	psect	text20
  8110  00673A                     __ptext20:
  8111                           	opt stack 0
  8112  00673A                     _itoa:
  8113                           	opt stack 22
  8114                           
  8115                           ; BSR set to: 0
  8116                           ;incstack = 0
  8117  00673A  C07C  F082         	movff	itoa@buf,itoa@cp
  8118  00673E  C07D  F083         	movff	itoa@buf+1,itoa@cp+1
  8119  006742  0100               	movlb	0	; () banked
  8120  006744  AF7F               	btfss	(itoa@val+1)& (0+255),7,b
  8121  006746  D00C               	goto	l1819
  8122                           
  8123                           ; BSR set to: 0
  8124  006748  C07C  FFD9         	movff	itoa@buf,fsr2l
  8125  00674C  C07D  FFDA         	movff	itoa@buf+1,fsr2h
  8126  006750  0E2D               	movlw	45
  8127  006752  6EDF               	movwf	indf2,c
  8128                           
  8129                           ; BSR set to: 0
  8130  006754  4B7C               	infsnz	itoa@buf& (0+255),f,b
  8131  006756  2B7D               	incf	(itoa@buf+1)& (0+255),f,b
  8132                           
  8133                           ; BSR set to: 0
  8134  006758  6D7E               	negf	itoa@val& (0+255),b
  8135  00675A  1F7F               	comf	(itoa@val+1)& (0+255),f,b
  8136  00675C  B0D8               	btfsc	status,0,c
  8137  00675E  2B7F               	incf	(itoa@val+1)& (0+255),f,b
  8138  006760                     l1819:
  8139                           
  8140                           ; BSR set to: 0
  8141                           
  8142                           ; BSR set to: 0
  8143  006760  C07C  F073         	movff	itoa@buf,utoa@buf
  8144  006764  C07D  F074         	movff	itoa@buf+1,utoa@buf+1
  8145  006768  C07E  F075         	movff	itoa@val,utoa@val
  8146  00676C  C07F  F076         	movff	itoa@val+1,utoa@val+1
  8147  006770  C080  F077         	movff	itoa@base,utoa@base
  8148  006774  C081  F078         	movff	itoa@base+1,utoa@base+1
  8149  006778  EC3A  F02C         	call	_utoa	;wreg free
  8150  00677C  0012               	return	
  8151  00677E                     __end_of_itoa:
  8152                           	opt stack 0
  8153                           tblptru	equ	0xFF8
  8154                           tblptrh	equ	0xFF7
  8155                           tblptrl	equ	0xFF6
  8156                           tablat	equ	0xFF5
  8157                           prodh	equ	0xFF4
  8158                           prodl	equ	0xFF3
  8159                           intcon	equ	0xFF2
  8160                           intcon3	equ	0xFF0
  8161                           indf0	equ	0xFEF
  8162                           postinc0	equ	0xFEE
  8163                           plusw0	equ	0xFEB
  8164                           fsr0h	equ	0xFEA
  8165                           fsr0l	equ	0xFE9
  8166                           wreg	equ	0xFE8
  8167                           indf1	equ	0xFE7
  8168                           postinc1	equ	0xFE6
  8169                           postdec1	equ	0xFE5
  8170                           plusw1	equ	0xFE3
  8171                           fsr1h	equ	0xFE2
  8172                           fsr1l	equ	0xFE1
  8173                           indf2	equ	0xFDF
  8174                           postinc2	equ	0xFDE
  8175                           postdec2	equ	0xFDD
  8176                           plusw2	equ	0xFDB
  8177                           fsr2h	equ	0xFDA
  8178                           fsr2l	equ	0xFD9
  8179                           status	equ	0xFD8
  8180                           
  8181 ;; *************** function _utoa *****************
  8182 ;; Defined at:
  8183 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
  8184 ;; Parameters:    Size  Location     Type
  8185 ;;  buf             2   19[BANK0 ] PTR unsigned char 
  8186 ;;		 -> ipAdressToString@number(4), macToString@number(3), 
  8187 ;;  val             2   21[BANK0 ] unsigned int 
  8188 ;;  base            2   23[BANK0 ] int 
  8189 ;; Auto vars:     Size  Location     Type
  8190 ;;  v               2   25[BANK0 ] unsigned int 
  8191 ;;  c               1   27[BANK0 ] unsigned char 
  8192 ;; Return value:  Size  Location     Type
  8193 ;;                  2   19[BANK0 ] PTR unsigned char 
  8194 ;; Registers used:
  8195 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8196 ;; Tracked objects:
  8197 ;;		On entry : 0/0
  8198 ;;		On exit  : 0/0
  8199 ;;		Unchanged: 0/0
  8200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8201 ;;      Params:         0       6       0       0       0       0       0       0       0
  8202 ;;      Locals:         0       3       0       0       0       0       0       0       0
  8203 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8204 ;;      Totals:         0       9       0       0       0       0       0       0       0
  8205 ;;Total ram usage:        9 bytes
  8206 ;; Hardware stack levels used:    1
  8207 ;; Hardware stack levels required when called:    5
  8208 ;; This function calls:
  8209 ;;		___lwdiv
  8210 ;;		___lwmod
  8211 ;; This function is called by:
  8212 ;;		_itoa
  8213 ;; This function uses a non-reentrant model
  8214 ;;
  8215                           
  8216                           	psect	text21
  8217  005874                     __ptext21:
  8218                           	opt stack 0
  8219  005874                     _utoa:
  8220                           	opt stack 22
  8221                           
  8222                           ;incstack = 0
  8223  005874  C075  F079         	movff	utoa@val,utoa@v
  8224  005878  C076  F07A         	movff	utoa@val+1,utoa@v+1
  8225  00587C  C079  F060         	movff	utoa@v,___lwdiv@dividend
  8226  005880  C07A  F061         	movff	utoa@v+1,___lwdiv@dividend+1
  8227  005884  C077  F062         	movff	utoa@base,___lwdiv@divisor
  8228  005888  C078  F063         	movff	utoa@base+1,___lwdiv@divisor+1
  8229  00588C  EC61  F032         	call	___lwdiv	;wreg free
  8230  005890  C060  F079         	movff	?___lwdiv,utoa@v
  8231  005894  C061  F07A         	movff	?___lwdiv+1,utoa@v+1
  8232  005898  0100               	movlb	0	; () banked
  8233  00589A  4B73               	infsnz	utoa@buf& (0+255),f,b
  8234  00589C  2B74               	incf	(utoa@buf+1)& (0+255),f,b
  8235                           
  8236                           ; BSR set to: 0
  8237  00589E  5179               	movf	utoa@v& (0+255),w,b
  8238  0058A0  117A               	iorwf	(utoa@v+1)& (0+255),w,b
  8239  0058A2  A4D8               	btfss	status,2,c
  8240  0058A4  D7EB               	goto	l1823
  8241                           
  8242                           ; BSR set to: 0
  8243                           
  8244                           ; BSR set to: 0
  8245  0058A6  C073  FFD9         	movff	utoa@buf,fsr2l
  8246  0058AA  C074  FFDA         	movff	utoa@buf+1,fsr2h
  8247  0058AE  0E00               	movlw	0
  8248  0058B0  6EDF               	movwf	indf2,c
  8249                           
  8250                           ; BSR set to: 0
  8251  0058B2  0773               	decf	utoa@buf& (0+255),f,b
  8252  0058B4  A0D8               	btfss	status,0,c
  8253  0058B6  0774               	decf	(utoa@buf+1)& (0+255),f,b
  8254  0058B8                     
  8255                           ; BSR set to: 0
  8256                           
  8257                           ; BSR set to: 0
  8258  0058B8  C075  F06E         	movff	utoa@val,___lwmod@dividend
  8259  0058BC  C076  F06F         	movff	utoa@val+1,___lwmod@dividend+1
  8260  0058C0  C077  F070         	movff	utoa@base,___lwmod@divisor
  8261  0058C4  C078  F071         	movff	utoa@base+1,___lwmod@divisor+1
  8262  0058C8  ECE1  F033         	call	___lwmod	;wreg free
  8263  0058CC  0100               	movlb	0	; () banked
  8264  0058CE  516E               	movf	?___lwmod& (0+255),w,b
  8265  0058D0  6F7B               	movwf	utoa@c& (0+255),b
  8266                           
  8267                           ; BSR set to: 0
  8268  0058D2  C075  F060         	movff	utoa@val,___lwdiv@dividend
  8269  0058D6  C076  F061         	movff	utoa@val+1,___lwdiv@dividend+1
  8270  0058DA  C077  F062         	movff	utoa@base,___lwdiv@divisor
  8271  0058DE  C078  F063         	movff	utoa@base+1,___lwdiv@divisor+1
  8272  0058E2  EC61  F032         	call	___lwdiv	;wreg free
  8273  0058E6  C060  F075         	movff	?___lwdiv,utoa@val
  8274  0058EA  C061  F076         	movff	?___lwdiv+1,utoa@val+1
  8275  0058EE  0E09               	movlw	9
  8276  0058F0  0100               	movlb	0	; () banked
  8277  0058F2  657B               	cpfsgt	utoa@c& (0+255),b
  8278  0058F4  D002               	goto	l1826
  8279                           
  8280                           ; BSR set to: 0
  8281  0058F6  0E07               	movlw	7
  8282  0058F8  277B               	addwf	utoa@c& (0+255),f,b
  8283  0058FA                     l1826:
  8284                           
  8285                           ; BSR set to: 0
  8286  0058FA  0E30               	movlw	48
  8287  0058FC  277B               	addwf	utoa@c& (0+255),f,b
  8288                           
  8289                           ; BSR set to: 0
  8290  0058FE  C073  FFD9         	movff	utoa@buf,fsr2l
  8291  005902  C074  FFDA         	movff	utoa@buf+1,fsr2h
  8292  005906  C07B  FFDF         	movff	utoa@c,indf2
  8293                           
  8294                           ; BSR set to: 0
  8295  00590A  0773               	decf	utoa@buf& (0+255),f,b
  8296  00590C  A0D8               	btfss	status,0,c
  8297  00590E  0774               	decf	(utoa@buf+1)& (0+255),f,b
  8298                           
  8299                           ; BSR set to: 0
  8300  005910  5175               	movf	utoa@val& (0+255),w,b
  8301  005912  1176               	iorwf	(utoa@val+1)& (0+255),w,b
  8302  005914  A4D8               	btfss	status,2,c
  8303  005916  D7D0               	goto	l1825
  8304                           
  8305                           ; BSR set to: 0
  8306                           ;	Return value of _utoa is never used
  8307                           
  8308                           ; BSR set to: 0
  8309  005918  4B73               	infsnz	utoa@buf& (0+255),f,b
  8310  00591A  2B74               	incf	(utoa@buf+1)& (0+255),f,b
  8311  00591C  0012               	return	
  8312  00591E                     __end_of_utoa:
  8313                           	opt stack 0
  8314                           tblptru	equ	0xFF8
  8315                           tblptrh	equ	0xFF7
  8316                           tblptrl	equ	0xFF6
  8317                           tablat	equ	0xFF5
  8318                           prodh	equ	0xFF4
  8319                           prodl	equ	0xFF3
  8320                           intcon	equ	0xFF2
  8321                           intcon3	equ	0xFF0
  8322                           indf0	equ	0xFEF
  8323                           postinc0	equ	0xFEE
  8324                           plusw0	equ	0xFEB
  8325                           fsr0h	equ	0xFEA
  8326                           fsr0l	equ	0xFE9
  8327                           wreg	equ	0xFE8
  8328                           indf1	equ	0xFE7
  8329                           postinc1	equ	0xFE6
  8330                           postdec1	equ	0xFE5
  8331                           plusw1	equ	0xFE3
  8332                           fsr1h	equ	0xFE2
  8333                           fsr1l	equ	0xFE1
  8334                           indf2	equ	0xFDF
  8335                           postinc2	equ	0xFDE
  8336                           postdec2	equ	0xFDD
  8337                           plusw2	equ	0xFDB
  8338                           fsr2h	equ	0xFDA
  8339                           fsr2l	equ	0xFD9
  8340                           status	equ	0xFD8
  8341                           
  8342 ;; *************** function ___lwdiv *****************
  8343 ;; Defined at:
  8344 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  8345 ;; Parameters:    Size  Location     Type
  8346 ;;  dividend        2    0[BANK0 ] unsigned int 
  8347 ;;  divisor         2    2[BANK0 ] unsigned int 
  8348 ;; Auto vars:     Size  Location     Type
  8349 ;;  quotient        2    5[BANK0 ] unsigned int 
  8350 ;;  counter         1    4[BANK0 ] unsigned char 
  8351 ;; Return value:  Size  Location     Type
  8352 ;;                  2    0[BANK0 ] unsigned int 
  8353 ;; Registers used:
  8354 ;;		wreg, status,2, status,0
  8355 ;; Tracked objects:
  8356 ;;		On entry : 0/0
  8357 ;;		On exit  : 0/0
  8358 ;;		Unchanged: 0/0
  8359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8360 ;;      Params:         0       4       0       0       0       0       0       0       0
  8361 ;;      Locals:         0       3       0       0       0       0       0       0       0
  8362 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8363 ;;      Totals:         0       7       0       0       0       0       0       0       0
  8364 ;;Total ram usage:        7 bytes
  8365 ;; Hardware stack levels used:    1
  8366 ;; Hardware stack levels required when called:    4
  8367 ;; This function calls:
  8368 ;;		Nothing
  8369 ;; This function is called by:
  8370 ;;		_utoa
  8371 ;; This function uses a non-reentrant model
  8372 ;;
  8373                           
  8374                           	psect	text22
  8375  0064C2                     __ptext22:
  8376                           	opt stack 0
  8377  0064C2                     ___lwdiv:
  8378                           	opt stack 22
  8379                           
  8380                           ; BSR set to: 0
  8381                           ;incstack = 0
  8382  0064C2  0E00               	movlw	0
  8383  0064C4  0100               	movlb	0	; () banked
  8384  0064C6  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
  8385  0064C8  0E00               	movlw	0
  8386  0064CA  6F65               	movwf	___lwdiv@quotient& (0+255),b
  8387                           
  8388                           ; BSR set to: 0
  8389  0064CC  5162               	movf	___lwdiv@divisor& (0+255),w,b
  8390  0064CE  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  8391  0064D0  B4D8               	btfsc	status,2,c
  8392  0064D2  D01C               	goto	l1925
  8393                           
  8394                           ; BSR set to: 0
  8395  0064D4  0E01               	movlw	1
  8396  0064D6  6F64               	movwf	___lwdiv@counter& (0+255),b
  8397  0064D8  D004               	goto	l1920
  8398  0064DA                     
  8399                           ; BSR set to: 0
  8400                           
  8401                           ; BSR set to: 0
  8402  0064DA  90D8               	bcf	status,0,c
  8403  0064DC  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
  8404  0064DE  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  8405  0064E0  2B64               	incf	___lwdiv@counter& (0+255),f,b
  8406  0064E2                     l1920:
  8407                           
  8408                           ; BSR set to: 0
  8409                           
  8410                           ; BSR set to: 0
  8411  0064E2  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  8412  0064E4  D7FA               	goto	l1921
  8413  0064E6                     u12240:
  8414                           
  8415                           ; BSR set to: 0
  8416                           
  8417                           ; BSR set to: 0
  8418                           
  8419                           ; BSR set to: 0
  8420  0064E6  90D8               	bcf	status,0,c
  8421  0064E8  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
  8422  0064EA  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  8423                           
  8424                           ; BSR set to: 0
  8425  0064EC  5162               	movf	___lwdiv@divisor& (0+255),w,b
  8426  0064EE  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
  8427  0064F0  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  8428  0064F2  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  8429  0064F4  A0D8               	btfss	status,0,c
  8430  0064F6  D005               	goto	l1924
  8431                           
  8432                           ; BSR set to: 0
  8433  0064F8  5162               	movf	___lwdiv@divisor& (0+255),w,b
  8434  0064FA  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
  8435  0064FC  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  8436  0064FE  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  8437                           
  8438                           ; BSR set to: 0
  8439  006500  8165               	bsf	___lwdiv@quotient& (0+255),0,b
  8440  006502                     l1924:
  8441                           
  8442                           ; BSR set to: 0
  8443                           
  8444                           ; BSR set to: 0
  8445  006502  90D8               	bcf	status,0,c
  8446  006504  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  8447  006506  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
  8448                           
  8449                           ; BSR set to: 0
  8450  006508  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
  8451  00650A  D7ED               	goto	u12240
  8452  00650C                     l1925:
  8453                           
  8454                           ; BSR set to: 0
  8455                           
  8456                           ; BSR set to: 0
  8457  00650C  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
  8458  006510  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8459                           
  8460                           ; BSR set to: 0
  8461  006514  0012               	return		;funcret
  8462  006516                     __end_of___lwdiv:
  8463                           	opt stack 0
  8464                           tblptru	equ	0xFF8
  8465                           tblptrh	equ	0xFF7
  8466                           tblptrl	equ	0xFF6
  8467                           tablat	equ	0xFF5
  8468                           prodh	equ	0xFF4
  8469                           prodl	equ	0xFF3
  8470                           intcon	equ	0xFF2
  8471                           intcon3	equ	0xFF0
  8472                           indf0	equ	0xFEF
  8473                           postinc0	equ	0xFEE
  8474                           plusw0	equ	0xFEB
  8475                           fsr0h	equ	0xFEA
  8476                           fsr0l	equ	0xFE9
  8477                           wreg	equ	0xFE8
  8478                           indf1	equ	0xFE7
  8479                           postinc1	equ	0xFE6
  8480                           postdec1	equ	0xFE5
  8481                           plusw1	equ	0xFE3
  8482                           fsr1h	equ	0xFE2
  8483                           fsr1l	equ	0xFE1
  8484                           indf2	equ	0xFDF
  8485                           postinc2	equ	0xFDE
  8486                           postdec2	equ	0xFDD
  8487                           plusw2	equ	0xFDB
  8488                           fsr2h	equ	0xFDA
  8489                           fsr2l	equ	0xFD9
  8490                           status	equ	0xFD8
  8491                           
  8492 ;; *************** function _ipv4_handleNewPacket *****************
  8493 ;; Defined at:
  8494 ;;		line 218 in file "src/stack/protocols/ipv4.c"
  8495 ;; Parameters:    Size  Location     Type
  8496 ;;  frame           2  221[BANK1 ] PTR struct ethernetFrame
  8497 ;;		 -> stack(124), 
  8498 ;; Auto vars:     Size  Location     Type
  8499 ;;  header         23  143[BANK2 ] struct ipv4_header
  8500 ;;  headerField     9  175[BANK2 ] struct memoryField
  8501 ;;  payloadField    9  166[BANK2 ] struct memoryField
  8502 ;; Return value:  Size  Location     Type
  8503 ;;                  1    wreg      void 
  8504 ;; Registers used:
  8505 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8506 ;; Tracked objects:
  8507 ;;		On entry : 0/0
  8508 ;;		On exit  : 0/0
  8509 ;;		Unchanged: 0/0
  8510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8511 ;;      Params:         0       0       2       0       0       0       0       0       0
  8512 ;;      Locals:         0       0       0      43       0       0       0       0       0
  8513 ;;      Temps:          0       4       0       0       0       0       0       0       0
  8514 ;;      Totals:         0       4       2      43       0       0       0       0       0
  8515 ;;Total ram usage:       49 bytes
  8516 ;; Hardware stack levels used:    1
  8517 ;; Hardware stack levels required when called:   13
  8518 ;; This function calls:
  8519 ;;		_ethernetController_dropPacket
  8520 ;;		_icmp_handleNewPacket
  8521 ;;		_ipv4_checkHeaderChecksum
  8522 ;;		_ipv4_parseHeader
  8523 ;;		_tcp_handleNewPacket
  8524 ;; This function is called by:
  8525 ;;		_ethernet_rxGetNewFrame
  8526 ;; This function uses a non-reentrant model
  8527 ;;
  8528                           
  8529                           	psect	text23
  8530  002A24                     __ptext23:
  8531                           	opt stack 0
  8532  002A24                     _ipv4_handleNewPacket:
  8533                           	opt stack 15
  8534                           
  8535                           ;ipv4.c: 219: ipv4_header_t header;
  8536                           ;ipv4.c: 220: memoryField_t headerField;
  8537                           ;ipv4.c: 221: memoryField_t payloadField;
  8538                           ;ipv4.c: 223: if (frame->ethertype != ETHERTYPE_IPv4) {
  8539                           
  8540                           ; BSR set to: 0
  8541                           ;incstack = 0
  8542  002A24  0101               	movlb	1	; () banked
  8543  002A26  EE20 F00E          	lfsr	2,14
  8544  002A2A  51DD               	movf	ipv4_handleNewPacket@frame& (0+255),w,b
  8545  002A2C  26D9               	addwf	fsr2l,f,c
  8546  002A2E  51DE               	movf	(ipv4_handleNewPacket@frame+1)& (0+255),w,b
  8547  002A30  22DA               	addwfc	fsr2h,f,c
  8548  002A32  50DE               	movf	postinc2,w,c
  8549  002A34  E104               	bnz	u14230
  8550  002A36  0E08               	movlw	8
  8551  002A38  18DE               	xorwf	postinc2,w,c
  8552  002A3A  B4D8               	btfsc	status,2,c
  8553  002A3C  D007               	goto	l1163
  8554  002A3E                     u14230:
  8555                           
  8556                           ; BSR set to: 1
  8557                           ;ipv4.c: 224: ethernetController_dropPacket(frame);
  8558  002A3E  C1DD  F072         	movff	ipv4_handleNewPacket@frame,?_ethernetController_dropPacket
  8559  002A42  C1DE  F073         	movff	ipv4_handleNewPacket@frame+1,?_ethernetController_dropPacket+1
  8560  002A46  EC45  F034         	call	_ethernetController_dropPacket	;wreg free
  8561                           
  8562                           ;ipv4.c: 225: return;
  8563  002A4A  0012               	return	
  8564  002A4C                     l1163:
  8565                           
  8566                           ;ipv4.c: 226: }
  8567                           ;ipv4.c: 228: headerField = frame->memory;
  8568  002A4C  0101               	movlb	1	; () banked
  8569  002A4E  EE20 F010          	lfsr	2,16
  8570  002A52  51DD               	movf	ipv4_handleNewPacket@frame& (0+255),w,b
  8571  002A54  26D9               	addwf	fsr2l,f,c
  8572  002A56  51DE               	movf	(ipv4_handleNewPacket@frame+1)& (0+255),w,b
  8573  002A58  22DA               	addwfc	fsr2h,f,c
  8574  002A5A  EE12  F0AF         	lfsr	1,ipv4_handleNewPacket@headerField
  8575  002A5E  0E08               	movlw	8
  8576  002A60                     u14241:
  8577  002A60  CFDB FFE3          	movff	plusw2,plusw1
  8578  002A64  06E8               	decf	wreg,f,c
  8579  002A66  E2FC               	bc	u14241
  8580                           
  8581                           ; BSR set to: 1
  8582                           ;ipv4.c: 229: headerField.start = frame->memory.start + 22;
  8583  002A68  EE20 F010          	lfsr	2,16
  8584  002A6C  51DD               	movf	ipv4_handleNewPacket@frame& (0+255),w,b
  8585  002A6E  26D9               	addwf	fsr2l,f,c
  8586  002A70  51DE               	movf	(ipv4_handleNewPacket@frame+1)& (0+255),w,b
  8587  002A72  22DA               	addwfc	fsr2h,f,c
  8588  002A74  CFDE F0F1          	movff	postinc2,??_ipv4_handleNewPacket
  8589  002A78  CFDD F0F2          	movff	postdec2,??_ipv4_handleNewPacket+1
  8590  002A7C  0E16               	movlw	22
  8591  002A7E  0100               	movlb	0	; () banked
  8592  002A80  25F1               	addwf	??_ipv4_handleNewPacket& (0+255),w,b
  8593  002A82  0102               	movlb	2	; () banked
  8594  002A84  6FAF               	movwf	ipv4_handleNewPacket@headerField& (0+255),b
  8595  002A86  0E00               	movlw	0
  8596  002A88  0100               	movlb	0	; () banked
  8597  002A8A  21F2               	addwfc	(??_ipv4_handleNewPacket+1)& (0+255),w,b
  8598  002A8C  0102               	movlb	2	; () banked
  8599  002A8E  6FB0               	movwf	(ipv4_handleNewPacket@headerField+1)& (0+255),b
  8600                           
  8601                           ; BSR set to: 2
  8602                           ;ipv4.c: 231: header = ipv4_parseHeader(&headerField);
  8603  002A90  0EAF               	movlw	low ipv4_handleNewPacket@headerField
  8604  002A92  0100               	movlb	0	; () banked
  8605  002A94  6F74               	movwf	ipv4_parseHeader@field& (0+255),b
  8606  002A96  0E02               	movlw	high ipv4_handleNewPacket@headerField
  8607  002A98  6F75               	movwf	(ipv4_parseHeader@field+1)& (0+255),b
  8608  002A9A  ECE6  F019         	call	_ipv4_parseHeader	;wreg free
  8609  002A9E  EE22  F08F         	lfsr	2,ipv4_handleNewPacket@header
  8610  002AA2  0E16               	movlw	22
  8611  002AA4                     u14251:
  8612  002AA4  CFEB FFDB          	movff	plusw0,plusw2
  8613  002AA8  06E8               	decf	wreg,f,c
  8614  002AAA  E2FC               	bc	u14251
  8615                           
  8616                           ;ipv4.c: 233: headerField.length = header.headerLength * 4;
  8617  002AAC  0102               	movlb	2	; () banked
  8618  002AAE  5190               	movf	(ipv4_handleNewPacket@header+1)& (0+255),w,b
  8619  002AB0  0D04               	mullw	4
  8620  002AB2  CFF3 F2B3          	movff	prodl,ipv4_handleNewPacket@headerField+4
  8621  002AB6  CFF4 F2B4          	movff	prodh,ipv4_handleNewPacket@headerField+5
  8622                           
  8623                           ; BSR set to: 2
  8624                           ;ipv4.c: 234: if (headerField.start + headerField.length > 0x5FFF) {
  8625  002ABA  51AF               	movf	ipv4_handleNewPacket@headerField& (0+255),w,b
  8626  002ABC  25B3               	addwf	(ipv4_handleNewPacket@headerField+4)& (0+255),w,b
  8627  002ABE  0100               	movlb	0	; () banked
  8628  002AC0  6FF1               	movwf	??_ipv4_handleNewPacket& (0+255),b
  8629  002AC2  0102               	movlb	2	; () banked
  8630  002AC4  51B0               	movf	(ipv4_handleNewPacket@headerField+1)& (0+255),w,b
  8631  002AC6  21B4               	addwfc	(ipv4_handleNewPacket@headerField+5)& (0+255),w,b
  8632  002AC8  0100               	movlb	0	; () banked
  8633  002ACA  6FF2               	movwf	(??_ipv4_handleNewPacket+1)& (0+255),b
  8634  002ACC  0E60               	movlw	96
  8635  002ACE  5DF2               	subwf	(??_ipv4_handleNewPacket+1)& (0+255),w,b
  8636  002AD0  A0D8               	btfss	status,0,c
  8637  002AD2  D024               	goto	l1165
  8638                           
  8639                           ; BSR set to: 0
  8640                           ;ipv4.c: 235: headerField.end = headerField.length - (0x5FFF - headerField.start) - 1;
  8641  002AD4  0EFF               	movlw	255
  8642  002AD6  6FF1               	movwf	??_ipv4_handleNewPacket& (0+255),b
  8643  002AD8  0E5F               	movlw	95
  8644  002ADA  6FF2               	movwf	(??_ipv4_handleNewPacket+1)& (0+255),b
  8645  002ADC  C2AF  F0F3         	movff	ipv4_handleNewPacket@headerField,??_ipv4_handleNewPacket+2
  8646  002AE0  C2B0  F0F4         	movff	ipv4_handleNewPacket@headerField+1,??_ipv4_handleNewPacket+3
  8647  002AE4  1FF3               	comf	(??_ipv4_handleNewPacket+2)& (0+255),f,b
  8648  002AE6  1FF4               	comf	(??_ipv4_handleNewPacket+3)& (0+255),f,b
  8649  002AE8  4BF3               	infsnz	(??_ipv4_handleNewPacket+2)& (0+255),f,b
  8650  002AEA  2BF4               	incf	(??_ipv4_handleNewPacket+3)& (0+255),f,b
  8651  002AEC  51F1               	movf	??_ipv4_handleNewPacket& (0+255),w,b
  8652  002AEE  27F3               	addwf	(??_ipv4_handleNewPacket+2)& (0+255),f,b
  8653  002AF0  51F2               	movf	(??_ipv4_handleNewPacket+1)& (0+255),w,b
  8654  002AF2  23F4               	addwfc	(??_ipv4_handleNewPacket+3)& (0+255),f,b
  8655  002AF4  1FF3               	comf	(??_ipv4_handleNewPacket+2)& (0+255),f,b
  8656  002AF6  1FF4               	comf	(??_ipv4_handleNewPacket+3)& (0+255),f,b
  8657  002AF8  4BF3               	infsnz	(??_ipv4_handleNewPacket+2)& (0+255),f,b
  8658  002AFA  2BF4               	incf	(??_ipv4_handleNewPacket+3)& (0+255),f,b
  8659  002AFC  0102               	movlb	2	; () banked
  8660  002AFE  51B3               	movf	(ipv4_handleNewPacket@headerField+4)& (0+255),w,b
  8661  002B00  0100               	movlb	0	; () banked
  8662  002B02  27F3               	addwf	(??_ipv4_handleNewPacket+2)& (0+255),f,b
  8663  002B04  0102               	movlb	2	; () banked
  8664  002B06  51B4               	movf	(ipv4_handleNewPacket@headerField+5)& (0+255),w,b
  8665  002B08  0100               	movlb	0	; () banked
  8666  002B0A  23F4               	addwfc	(??_ipv4_handleNewPacket+3)& (0+255),f,b
  8667  002B0C  0EFF               	movlw	255
  8668  002B0E  25F3               	addwf	(??_ipv4_handleNewPacket+2)& (0+255),w,b
  8669  002B10  0102               	movlb	2	; () banked
  8670  002B12  6FB1               	movwf	(ipv4_handleNewPacket@headerField+2)& (0+255),b
  8671  002B14  0EFF               	movlw	255
  8672  002B16  0100               	movlb	0	; () banked
  8673  002B18  21F4               	addwfc	(??_ipv4_handleNewPacket+3)& (0+255),w,b
  8674  002B1A  D011               	goto	L3
  8675  002B1C                     l1165:
  8676                           
  8677                           ;ipv4.c: 237: headerField.end = headerField.start + headerField.length - 1;
  8678                           
  8679                           ; BSR set to: 2
  8680  002B1C  0102               	movlb	2	; () banked
  8681  002B1E  51AF               	movf	ipv4_handleNewPacket@headerField& (0+255),w,b
  8682  002B20  25B3               	addwf	(ipv4_handleNewPacket@headerField+4)& (0+255),w,b
  8683  002B22  0100               	movlb	0	; () banked
  8684  002B24  6FF1               	movwf	??_ipv4_handleNewPacket& (0+255),b
  8685  002B26  0102               	movlb	2	; () banked
  8686  002B28  51B0               	movf	(ipv4_handleNewPacket@headerField+1)& (0+255),w,b
  8687  002B2A  21B4               	addwfc	(ipv4_handleNewPacket@headerField+5)& (0+255),w,b
  8688  002B2C  0100               	movlb	0	; () banked
  8689  002B2E  6FF2               	movwf	(??_ipv4_handleNewPacket+1)& (0+255),b
  8690  002B30  0EFF               	movlw	255
  8691  002B32  25F1               	addwf	??_ipv4_handleNewPacket& (0+255),w,b
  8692  002B34  0102               	movlb	2	; () banked
  8693  002B36  6FB1               	movwf	(ipv4_handleNewPacket@headerField+2)& (0+255),b
  8694  002B38  0EFF               	movlw	255
  8695  002B3A  0100               	movlb	0	; () banked
  8696  002B3C  21F2               	addwfc	(??_ipv4_handleNewPacket+1)& (0+255),w,b
  8697  002B3E                     L3:
  8698  002B3E  0102               	movlb	2	; () banked
  8699  002B40  6FB2               	movwf	(ipv4_handleNewPacket@headerField+3)& (0+255),b
  8700                           
  8701                           ; BSR set to: 2
  8702                           ;ipv4.c: 239: payloadField.start = headerField.end + 1;
  8703  002B42  0E01               	movlw	1
  8704  002B44  25B1               	addwf	(ipv4_handleNewPacket@headerField+2)& (0+255),w,b
  8705  002B46  6FA6               	movwf	ipv4_handleNewPacket@payloadField& (0+255),b
  8706  002B48  0E00               	movlw	0
  8707  002B4A  21B2               	addwfc	(ipv4_handleNewPacket@headerField+3)& (0+255),w,b
  8708  002B4C  6FA7               	movwf	(ipv4_handleNewPacket@payloadField+1)& (0+255),b
  8709                           
  8710                           ; BSR set to: 2
  8711                           ;ipv4.c: 240: payloadField.end = frame->memory.end;
  8712  002B4E  0101               	movlb	1	; () banked
  8713  002B50  EE20 F012          	lfsr	2,18
  8714  002B54  51DD               	movf	ipv4_handleNewPacket@frame& (0+255),w,b
  8715  002B56  26D9               	addwf	fsr2l,f,c
  8716  002B58  51DE               	movf	(ipv4_handleNewPacket@frame+1)& (0+255),w,b
  8717  002B5A  22DA               	addwfc	fsr2h,f,c
  8718  002B5C  CFDE F2A8          	movff	postinc2,ipv4_handleNewPacket@payloadField+2
  8719  002B60  CFDD F2A9          	movff	postdec2,ipv4_handleNewPacket@payloadField+3
  8720                           
  8721                           ; BSR set to: 1
  8722                           ;ipv4.c: 242: payloadField.length = (payloadField.start < payloadField.end) ? (payloadFi
      +                          eld.end - payloadField.start) : ((0x5FFF - payloadField.start) + payloadField.end);
  8723  002B64  0102               	movlb	2	; () banked
  8724  002B66  51A8               	movf	(ipv4_handleNewPacket@payloadField+2)& (0+255),w,b
  8725  002B68  5DA6               	subwf	ipv4_handleNewPacket@payloadField& (0+255),w,b
  8726  002B6A  51A9               	movf	(ipv4_handleNewPacket@payloadField+3)& (0+255),w,b
  8727  002B6C  59A7               	subwfb	(ipv4_handleNewPacket@payloadField+1)& (0+255),w,b
  8728  002B6E  A0D8               	btfss	status,0,c
  8729  002B70  D017               	goto	l1168
  8730                           
  8731                           ; BSR set to: 2
  8732  002B72  C2A6  F0F1         	movff	ipv4_handleNewPacket@payloadField,??_ipv4_handleNewPacket
  8733  002B76  C2A7  F0F2         	movff	ipv4_handleNewPacket@payloadField+1,??_ipv4_handleNewPacket+1
  8734  002B7A  0100               	movlb	0	; () banked
  8735  002B7C  1FF1               	comf	??_ipv4_handleNewPacket& (0+255),f,b
  8736  002B7E  1FF2               	comf	(??_ipv4_handleNewPacket+1)& (0+255),f,b
  8737  002B80  4BF1               	infsnz	??_ipv4_handleNewPacket& (0+255),f,b
  8738  002B82  2BF2               	incf	(??_ipv4_handleNewPacket+1)& (0+255),f,b
  8739  002B84  0102               	movlb	2	; () banked
  8740  002B86  51A8               	movf	(ipv4_handleNewPacket@payloadField+2)& (0+255),w,b
  8741  002B88  0100               	movlb	0	; () banked
  8742  002B8A  27F1               	addwf	??_ipv4_handleNewPacket& (0+255),f,b
  8743  002B8C  0102               	movlb	2	; () banked
  8744  002B8E  51A9               	movf	(ipv4_handleNewPacket@payloadField+3)& (0+255),w,b
  8745  002B90  0100               	movlb	0	; () banked
  8746  002B92  23F2               	addwfc	(??_ipv4_handleNewPacket+1)& (0+255),f,b
  8747  002B94  0EFF               	movlw	255
  8748  002B96  25F1               	addwf	??_ipv4_handleNewPacket& (0+255),w,b
  8749  002B98  0102               	movlb	2	; () banked
  8750  002B9A  6F8D               	movwf	_ipv4_handleNewPacket$3965& (0+255),b
  8751  002B9C  0E5F               	movlw	95
  8752  002B9E  D010               	goto	L4
  8753  002BA0                     l1168:
  8754                           
  8755                           ; BSR set to: 2
  8756                           
  8757                           ; BSR set to: 2
  8758  002BA0  C2A6  F0F1         	movff	ipv4_handleNewPacket@payloadField,??_ipv4_handleNewPacket
  8759  002BA4  C2A7  F0F2         	movff	ipv4_handleNewPacket@payloadField+1,??_ipv4_handleNewPacket+1
  8760  002BA8  0100               	movlb	0	; () banked
  8761  002BAA  1FF1               	comf	??_ipv4_handleNewPacket& (0+255),f,b
  8762  002BAC  1FF2               	comf	(??_ipv4_handleNewPacket+1)& (0+255),f,b
  8763  002BAE  4BF1               	infsnz	??_ipv4_handleNewPacket& (0+255),f,b
  8764  002BB0  2BF2               	incf	(??_ipv4_handleNewPacket+1)& (0+255),f,b
  8765  002BB2  0102               	movlb	2	; () banked
  8766  002BB4  51A8               	movf	(ipv4_handleNewPacket@payloadField+2)& (0+255),w,b
  8767  002BB6  0100               	movlb	0	; () banked
  8768  002BB8  25F1               	addwf	??_ipv4_handleNewPacket& (0+255),w,b
  8769  002BBA  0102               	movlb	2	; () banked
  8770  002BBC  6F8D               	movwf	_ipv4_handleNewPacket$3965& (0+255),b
  8771  002BBE  51A9               	movf	(ipv4_handleNewPacket@payloadField+3)& (0+255),w,b
  8772  002BC0                     L4:
  8773  002BC0  0100               	movlb	0	; () banked
  8774  002BC2  21F2               	addwfc	(??_ipv4_handleNewPacket+1)& (0+255),w,b
  8775  002BC4  0102               	movlb	2	; () banked
  8776  002BC6  6F8E               	movwf	(_ipv4_handleNewPacket$3965+1)& (0+255),b
  8777                           
  8778                           ; BSR set to: 2
  8779                           
  8780                           ; BSR set to: 2
  8781  002BC8  C28D  F2AA         	movff	_ipv4_handleNewPacket$3965,ipv4_handleNewPacket@payloadField+4
  8782  002BCC  C28E  F2AB         	movff	_ipv4_handleNewPacket$3965+1,ipv4_handleNewPacket@payloadField+5
  8783                           
  8784                           ; BSR set to: 2
  8785                           ;ipv4.c: 269: if (!ipv4_checkHeaderChecksum(&header)) {
  8786  002BD0  0E8F               	movlw	low ipv4_handleNewPacket@header
  8787  002BD2  0100               	movlb	0	; () banked
  8788  002BD4  6F6F               	movwf	ipv4_checkHeaderChecksum@header& (0+255),b
  8789  002BD6  0E02               	movlw	high ipv4_handleNewPacket@header
  8790  002BD8  6F70               	movwf	(ipv4_checkHeaderChecksum@header+1)& (0+255),b
  8791  002BDA  ECDE  F032         	call	_ipv4_checkHeaderChecksum	;wreg free
  8792  002BDE  0100               	movlb	0	; () banked
  8793  002BE0  B0D8               	btfsc	status,0,c
  8794  002BE2  D006               	goto	l1171
  8795                           
  8796                           ; BSR set to: 0
  8797                           ;ipv4.c: 275: ethernetController_dropPacket(frame);
  8798  002BE4  C1DD  F072         	movff	ipv4_handleNewPacket@frame,?_ethernetController_dropPacket
  8799  002BE8  C1DE  F073         	movff	ipv4_handleNewPacket@frame+1,?_ethernetController_dropPacket+1
  8800  002BEC  EC45  F034         	call	_ethernetController_dropPacket	;wreg free
  8801  002BF0                     l1171:
  8802                           
  8803                           ;ipv4.c: 276: }
  8804                           ;ipv4.c: 277: if (header.version != 4) {
  8805  002BF0  0E04               	movlw	4
  8806  002BF2  0102               	movlb	2	; () banked
  8807  002BF4  198F               	xorwf	ipv4_handleNewPacket@header& (0+255),w,b
  8808  002BF6  B4D8               	btfsc	status,2,c
  8809  002BF8  D006               	goto	l1172
  8810                           
  8811                           ; BSR set to: 2
  8812                           ;ipv4.c: 278: ethernetController_dropPacket(frame);
  8813  002BFA  C1DD  F072         	movff	ipv4_handleNewPacket@frame,?_ethernetController_dropPacket
  8814  002BFE  C1DE  F073         	movff	ipv4_handleNewPacket@frame+1,?_ethernetController_dropPacket+1
  8815  002C02  EC45  F034         	call	_ethernetController_dropPacket	;wreg free
  8816  002C06                     l1172:
  8817                           
  8818                           ;ipv4.c: 284: }
  8819                           ;ipv4.c: 285: if (header.timeToLive == 0) {
  8820  002C06  0102               	movlb	2	; () banked
  8821  002C08  519A               	movf	(ipv4_handleNewPacket@header+11)& (0+255),w,b
  8822  002C0A  A4D8               	btfss	status,2,c
  8823  002C0C  D006               	goto	l1173
  8824                           
  8825                           ; BSR set to: 2
  8826                           ;ipv4.c: 286: ethernetController_dropPacket(frame);
  8827  002C0E  C1DD  F072         	movff	ipv4_handleNewPacket@frame,?_ethernetController_dropPacket
  8828  002C12  C1DE  F073         	movff	ipv4_handleNewPacket@frame+1,?_ethernetController_dropPacket+1
  8829  002C16  EC45  F034         	call	_ethernetController_dropPacket	;wreg free
  8830  002C1A                     l1173:
  8831                           
  8832                           ;ipv4.c: 292: }
  8833                           ;ipv4.c: 293: if (header.totalLength == 0) {
  8834  002C1A  0102               	movlb	2	; () banked
  8835  002C1C  5193               	movf	(ipv4_handleNewPacket@header+4)& (0+255),w,b
  8836  002C1E  1194               	iorwf	(ipv4_handleNewPacket@header+5)& (0+255),w,b
  8837  002C20  A4D8               	btfss	status,2,c
  8838  002C22  D031               	goto	l1175
  8839                           
  8840                           ; BSR set to: 2
  8841                           ;ipv4.c: 294: ethernetController_dropPacket(frame);
  8842  002C24  C1DD  F072         	movff	ipv4_handleNewPacket@frame,?_ethernetController_dropPacket
  8843  002C28  C1DE  F073         	movff	ipv4_handleNewPacket@frame+1,?_ethernetController_dropPacket+1
  8844  002C2C  EC45  F034         	call	_ethernetController_dropPacket	;wreg free
  8845                           
  8846                           ;ipv4.c: 300: }
  8847                           ;ipv4.c: 311: switch (header.protocol) {
  8848  002C30  D02A               	goto	l1175
  8849  002C32                     
  8850                           ;ipv4.c: 320: icmp_handleNewPacket(header, payloadField);
  8851  002C32  EE22  F08F         	lfsr	2,ipv4_handleNewPacket@header
  8852  002C36  EE01  F0AF         	lfsr	0,icmp_handleNewPacket@ipHeader
  8853  002C3A  0E16               	movlw	22
  8854  002C3C                     u14321:
  8855  002C3C  CFDB FFEB          	movff	plusw2,plusw0
  8856  002C40  06E8               	decf	wreg,f,c
  8857  002C42  E2FC               	bc	u14321
  8858  002C44  EE22  F0A6         	lfsr	2,ipv4_handleNewPacket@payloadField
  8859  002C48  EE01  F0C6         	lfsr	0,icmp_handleNewPacket@ipPayload
  8860  002C4C  0E08               	movlw	8
  8861  002C4E                     u14331:
  8862  002C4E  CFDB FFEB          	movff	plusw2,plusw0
  8863  002C52  06E8               	decf	wreg,f,c
  8864  002C54  E2FC               	bc	u14331
  8865  002C56  EC2C  F025         	call	_icmp_handleNewPacket	;wreg free
  8866                           
  8867                           ;ipv4.c: 321: break;
  8868  002C5A  D01E               	goto	l1177
  8869  002C5C                     
  8870                           ;ipv4.c: 330: tcp_handleNewPacket(header, payloadField);
  8871  002C5C  EE22  F08F         	lfsr	2,ipv4_handleNewPacket@header
  8872  002C60  EE00  F0CF         	lfsr	0,tcp_handleNewPacket@ipHeader
  8873  002C64  0E16               	movlw	22
  8874  002C66                     u14341:
  8875  002C66  CFDB FFEB          	movff	plusw2,plusw0
  8876  002C6A  06E8               	decf	wreg,f,c
  8877  002C6C  E2FC               	bc	u14341
  8878  002C6E  EE22  F0A6         	lfsr	2,ipv4_handleNewPacket@payloadField
  8879  002C72  EE00  F0E6         	lfsr	0,tcp_handleNewPacket@ipPayload
  8880  002C76  0E08               	movlw	8
  8881  002C78                     u14351:
  8882  002C78  CFDB FFEB          	movff	plusw2,plusw0
  8883  002C7C  06E8               	decf	wreg,f,c
  8884  002C7E  E2FC               	bc	u14351
  8885  002C80  ECC1  F018         	call	_tcp_handleNewPacket	;wreg free
  8886                           
  8887                           ;ipv4.c: 349: }
  8888                           
  8889                           ;ipv4.c: 348: break;
  8890                           
  8891                           ;ipv4.c: 341: default:
  8892                           
  8893                           ;ipv4.c: 340: break;
  8894                           
  8895                           ;ipv4.c: 332: case IPv4_PROTOCOL_UDP:
  8896                           
  8897                           ;ipv4.c: 331: break;
  8898  002C84  D009               	goto	l1177
  8899  002C86                     l1175:
  8900  002C86  0102               	movlb	2	; () banked
  8901  002C88  519B               	movf	(ipv4_handleNewPacket@header+12)& (0+255),w,b
  8902                           
  8903                           ; Switch size 1, requested type "space"
  8904                           ; Number of cases is 3, Range of values is 1 to 17
  8905                           ; switch strategies available:
  8906                           ; Name         Instructions Cycles
  8907                           ; simple_byte           10     6 (average)
  8908                           ;	Chosen strategy is simple_byte
  8909  002C8A  0A01               	xorlw	1	; case 1
  8910  002C8C  B4D8               	btfsc	status,2,c
  8911  002C8E  D7D1               	goto	l1176
  8912  002C90  0A07               	xorlw	7	; case 6
  8913  002C92  B4D8               	btfsc	status,2,c
  8914  002C94  D7E3               	goto	l1178
  8915  002C96  0A17               	xorlw	23	; case 17
  8916  002C98                     l1177:
  8917                           
  8918                           ;ipv4.c: 350: ethernetController_dropPacket(frame);
  8919                           
  8920                           ; BSR set to: 2
  8921  002C98  C1DD  F072         	movff	ipv4_handleNewPacket@frame,?_ethernetController_dropPacket
  8922  002C9C  C1DE  F073         	movff	ipv4_handleNewPacket@frame+1,?_ethernetController_dropPacket+1
  8923  002CA0  EC45  F034         	call	_ethernetController_dropPacket	;wreg free
  8924  002CA4  0012               	return		;funcret
  8925  002CA6                     __end_of_ipv4_handleNewPacket:
  8926                           	opt stack 0
  8927                           tblptru	equ	0xFF8
  8928                           tblptrh	equ	0xFF7
  8929                           tblptrl	equ	0xFF6
  8930                           tablat	equ	0xFF5
  8931                           prodh	equ	0xFF4
  8932                           prodl	equ	0xFF3
  8933                           intcon	equ	0xFF2
  8934                           intcon3	equ	0xFF0
  8935                           indf0	equ	0xFEF
  8936                           postinc0	equ	0xFEE
  8937                           plusw0	equ	0xFEB
  8938                           fsr0h	equ	0xFEA
  8939                           fsr0l	equ	0xFE9
  8940                           wreg	equ	0xFE8
  8941                           indf1	equ	0xFE7
  8942                           postinc1	equ	0xFE6
  8943                           postdec1	equ	0xFE5
  8944                           plusw1	equ	0xFE3
  8945                           fsr1h	equ	0xFE2
  8946                           fsr1l	equ	0xFE1
  8947                           indf2	equ	0xFDF
  8948                           postinc2	equ	0xFDE
  8949                           postdec2	equ	0xFDD
  8950                           plusw2	equ	0xFDB
  8951                           fsr2h	equ	0xFDA
  8952                           fsr2l	equ	0xFD9
  8953                           status	equ	0xFD8
  8954                           
  8955 ;; *************** function _tcp_handleNewPacket *****************
  8956 ;; Defined at:
  8957 ;;		line 31 in file "src/stack/protocols/tcp.c"
  8958 ;; Parameters:    Size  Location     Type
  8959 ;;  ipHeader       23  111[BANK0 ] struct ipv4_header
  8960 ;;  ipPayload       9  134[BANK0 ] struct memoryField
  8961 ;; Auto vars:     Size  Location     Type
  8962 ;;  i               1  199[BANK1 ] unsigned char 
  8963 ;;  tcpHeader      21  200[BANK1 ] struct tcp_header
  8964 ;; Return value:  Size  Location     Type
  8965 ;;                  3  111[BANK0 ] struct error
  8966 ;; Registers used:
  8967 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8968 ;; Tracked objects:
  8969 ;;		On entry : 0/0
  8970 ;;		On exit  : 0/0
  8971 ;;		Unchanged: 0/0
  8972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8973 ;;      Params:         0      32       0       0       0       0       0       0       0
  8974 ;;      Locals:         0       0      22       0       0       0       0       0       0
  8975 ;;      Temps:          0       2       0       0       0       0       0       0       0
  8976 ;;      Totals:         0      34      22       0       0       0       0       0       0
  8977 ;;Total ram usage:       56 bytes
  8978 ;; Hardware stack levels used:    1
  8979 ;; Hardware stack levels required when called:   12
  8980 ;; This function calls:
  8981 ;;		_UARTTransmitText
  8982 ;;		_intToString
  8983 ;;		_tcp_parseHeader
  8984 ;;		_tcp_stateMachine
  8985 ;; This function is called by:
  8986 ;;		_ipv4_handleNewPacket
  8987 ;; This function uses a non-reentrant model
  8988 ;;
  8989                           
  8990                           	psect	text24
  8991  003182                     __ptext24:
  8992                           	opt stack 0
  8993  003182                     _tcp_handleNewPacket:
  8994                           	opt stack 15
  8995                           
  8996                           ;tcp.c: 32: tcp_header_t tcpHeader;
  8997                           ;tcp.c: 33: tcp_parseHeader(ipPayload, &tcpHeader);
  8998                           
  8999                           ;incstack = 0
  9000  003182  EE20  F0E6         	lfsr	2,tcp_handleNewPacket@ipPayload
  9001  003186  EE00  F074         	lfsr	0,tcp_parseHeader@ipPayload
  9002  00318A  0E08               	movlw	8
  9003  00318C                     u13881:
  9004  00318C  CFDB FFEB          	movff	plusw2,plusw0
  9005  003190  06E8               	decf	wreg,f,c
  9006  003192  E2FC               	bc	u13881
  9007  003194  0EC8               	movlw	low tcp_handleNewPacket@tcpHeader
  9008  003196  0100               	movlb	0	; () banked
  9009  003198  6F7D               	movwf	tcp_parseHeader@header& (0+255),b
  9010  00319A  0E01               	movlw	high tcp_handleNewPacket@tcpHeader
  9011  00319C  6F7E               	movwf	(tcp_parseHeader@header+1)& (0+255),b
  9012  00319E  EC67  F000         	call	_tcp_parseHeader	;wreg free
  9013                           
  9014                           ;tcp.c: 35: UARTTransmitText("[");
  9015  0031A2  0EFB               	movlw	low (STR_11+1)
  9016  0031A4  0100               	movlb	0	; () banked
  9017  0031A6  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  9018  0031A8  0E7F               	movlw	high (STR_11+1)
  9019  0031AA  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9020  0031AC  EC36  F032         	call	_UARTTransmitText	;wreg free
  9021                           
  9022                           ;tcp.c: 36: UARTTransmitText(intToString(tcpHeader.srcPort, 10));
  9023  0031B0  C1C8  F084         	movff	tcp_handleNewPacket@tcpHeader,intToString@val
  9024  0031B4  C1C9  F085         	movff	tcp_handleNewPacket@tcpHeader+1,intToString@val+1
  9025  0031B8  0100               	movlb	0	; () banked
  9026  0031BA  6B86               	clrf	(intToString@val+2)& (0+255),b
  9027  0031BC  6B87               	clrf	(intToString@val+3)& (0+255),b
  9028  0031BE  0E0A               	movlw	10
  9029  0031C0  6F88               	movwf	intToString@b& (0+255),b
  9030  0031C2  EC0D  F035         	call	_intToString	;wreg free
  9031  0031C6  C084  F08D         	movff	?_intToString,UARTTransmitText@str
  9032  0031CA  C085  F08E         	movff	?_intToString+1,UARTTransmitText@str+1
  9033  0031CE  EC36  F032         	call	_UARTTransmitText	;wreg free
  9034                           
  9035                           ;tcp.c: 37: UARTTransmitText(" -> ");
  9036  0031D2  0ED0               	movlw	low STR_20
  9037  0031D4  0100               	movlb	0	; () banked
  9038  0031D6  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  9039  0031D8  0E7F               	movlw	high STR_20
  9040  0031DA  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9041  0031DC  EC36  F032         	call	_UARTTransmitText	;wreg free
  9042                           
  9043                           ;tcp.c: 38: UARTTransmitText(intToString(tcpHeader.dstPort, 10));
  9044  0031E0  C1CA  F084         	movff	tcp_handleNewPacket@tcpHeader+2,intToString@val
  9045  0031E4  C1CB  F085         	movff	tcp_handleNewPacket@tcpHeader+3,intToString@val+1
  9046  0031E8  0100               	movlb	0	; () banked
  9047  0031EA  6B86               	clrf	(intToString@val+2)& (0+255),b
  9048  0031EC  6B87               	clrf	(intToString@val+3)& (0+255),b
  9049  0031EE  0E0A               	movlw	10
  9050  0031F0  6F88               	movwf	intToString@b& (0+255),b
  9051  0031F2  EC0D  F035         	call	_intToString	;wreg free
  9052  0031F6  C084  F08D         	movff	?_intToString,UARTTransmitText@str
  9053  0031FA  C085  F08E         	movff	?_intToString+1,UARTTransmitText@str+1
  9054  0031FE  EC36  F032         	call	_UARTTransmitText	;wreg free
  9055                           
  9056                           ;tcp.c: 39: UARTTransmitText("][Seq=");
  9057  003202  0E85               	movlw	low STR_107
  9058  003204  0100               	movlb	0	; () banked
  9059  003206  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  9060  003208  0E7F               	movlw	high STR_107
  9061  00320A  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9062  00320C  EC36  F032         	call	_UARTTransmitText	;wreg free
  9063                           
  9064                           ;tcp.c: 40: UARTTransmitText(intToString(tcpHeader.seqNumber, 10));
  9065  003210  C1CC  F084         	movff	tcp_handleNewPacket@tcpHeader+4,intToString@val
  9066  003214  C1CD  F085         	movff	tcp_handleNewPacket@tcpHeader+5,intToString@val+1
  9067  003218  C1CE  F086         	movff	tcp_handleNewPacket@tcpHeader+6,intToString@val+2
  9068  00321C  C1CF  F087         	movff	tcp_handleNewPacket@tcpHeader+7,intToString@val+3
  9069  003220  0E0A               	movlw	10
  9070  003222  0100               	movlb	0	; () banked
  9071  003224  6F88               	movwf	intToString@b& (0+255),b
  9072  003226  EC0D  F035         	call	_intToString	;wreg free
  9073  00322A  C084  F08D         	movff	?_intToString,UARTTransmitText@str
  9074  00322E  C085  F08E         	movff	?_intToString+1,UARTTransmitText@str+1
  9075  003232  EC36  F032         	call	_UARTTransmitText	;wreg free
  9076                           
  9077                           ;tcp.c: 41: UARTTransmitText("]");
  9078  003236  0E90               	movlw	low (STR_111+4)
  9079  003238  0100               	movlb	0	; () banked
  9080  00323A  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  9081  00323C  0E7F               	movlw	high (STR_111+4)
  9082  00323E  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9083  003240  EC36  F032         	call	_UARTTransmitText	;wreg free
  9084                           
  9085                           ;tcp.c: 42: if (tcpHeader.flags.NS)
  9086  003244  0101               	movlb	1	; () banked
  9087  003246  A1D5               	btfss	(tcp_handleNewPacket@tcpHeader+13)& (0+255),0,b
  9088  003248  D007               	goto	l1346
  9089                           
  9090                           ; BSR set to: 1
  9091                           ;tcp.c: 43: UARTTransmitText("[NS]");
  9092  00324A  0EBC               	movlw	low STR_109
  9093  00324C  0100               	movlb	0	; () banked
  9094  00324E  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  9095  003250  0E7F               	movlw	high STR_109
  9096  003252  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9097  003254  EC36  F032         	call	_UARTTransmitText	;wreg free
  9098  003258                     l1346:
  9099                           
  9100                           ;tcp.c: 44: if (tcpHeader.flags.CWR)
  9101  003258  0101               	movlb	1	; () banked
  9102  00325A  A3D5               	btfss	(tcp_handleNewPacket@tcpHeader+13)& (0+255),1,b
  9103  00325C  D007               	goto	l1347
  9104                           
  9105                           ; BSR set to: 1
  9106                           ;tcp.c: 45: UARTTransmitText("[CWR]");
  9107  00325E  0EB0               	movlw	low STR_110
  9108  003260  0100               	movlb	0	; () banked
  9109  003262  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  9110  003264  0E7F               	movlw	high STR_110
  9111  003266  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9112  003268  EC36  F032         	call	_UARTTransmitText	;wreg free
  9113  00326C                     l1347:
  9114                           
  9115                           ;tcp.c: 46: if (tcpHeader.flags.ECE)
  9116  00326C  0101               	movlb	1	; () banked
  9117  00326E  A5D5               	btfss	(tcp_handleNewPacket@tcpHeader+13)& (0+255),2,b
  9118  003270  D007               	goto	l1348
  9119                           
  9120                           ; BSR set to: 1
  9121                           ;tcp.c: 47: UARTTransmitText("[ECE]");
  9122  003272  0E8C               	movlw	low STR_111
  9123  003274  0100               	movlb	0	; () banked
  9124  003276  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  9125  003278  0E7F               	movlw	high STR_111
  9126  00327A  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9127  00327C  EC36  F032         	call	_UARTTransmitText	;wreg free
  9128  003280                     l1348:
  9129                           
  9130                           ;tcp.c: 48: if (tcpHeader.flags.URG)
  9131  003280  0101               	movlb	1	; () banked
  9132  003282  A7D5               	btfss	(tcp_handleNewPacket@tcpHeader+13)& (0+255),3,b
  9133  003284  D007               	goto	l1349
  9134                           
  9135                           ; BSR set to: 1
  9136                           ;tcp.c: 49: UARTTransmitText("[URG]");
  9137  003286  0E92               	movlw	low STR_112
  9138  003288  0100               	movlb	0	; () banked
  9139  00328A  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  9140  00328C  0E7F               	movlw	high STR_112
  9141  00328E  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9142  003290  EC36  F032         	call	_UARTTransmitText	;wreg free
  9143  003294                     l1349:
  9144                           
  9145                           ;tcp.c: 50: if (tcpHeader.flags.ACK)
  9146  003294  0101               	movlb	1	; () banked
  9147  003296  A9D5               	btfss	(tcp_handleNewPacket@tcpHeader+13)& (0+255),4,b
  9148  003298  D007               	goto	l1350
  9149                           
  9150                           ; BSR set to: 1
  9151                           ;tcp.c: 51: UARTTransmitText("[ACK]");
  9152  00329A  0E9E               	movlw	low STR_113
  9153  00329C  0100               	movlb	0	; () banked
  9154  00329E  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  9155  0032A0  0E7F               	movlw	high STR_113
  9156  0032A2  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9157  0032A4  EC36  F032         	call	_UARTTransmitText	;wreg free
  9158  0032A8                     l1350:
  9159                           
  9160                           ;tcp.c: 52: if (tcpHeader.flags.PSH)
  9161  0032A8  0101               	movlb	1	; () banked
  9162  0032AA  ABD5               	btfss	(tcp_handleNewPacket@tcpHeader+13)& (0+255),5,b
  9163  0032AC  D007               	goto	l1351
  9164                           
  9165                           ; BSR set to: 1
  9166                           ;tcp.c: 53: UARTTransmitText("[PSH]");
  9167  0032AE  0E98               	movlw	low STR_114
  9168  0032B0  0100               	movlb	0	; () banked
  9169  0032B2  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  9170  0032B4  0E7F               	movlw	high STR_114
  9171  0032B6  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9172  0032B8  EC36  F032         	call	_UARTTransmitText	;wreg free
  9173  0032BC                     l1351:
  9174                           
  9175                           ;tcp.c: 54: if (tcpHeader.flags.RST)
  9176  0032BC  0101               	movlb	1	; () banked
  9177  0032BE  ADD5               	btfss	(tcp_handleNewPacket@tcpHeader+13)& (0+255),6,b
  9178  0032C0  D007               	goto	l1352
  9179                           
  9180                           ; BSR set to: 1
  9181                           ;tcp.c: 55: UARTTransmitText("[RST]");
  9182  0032C2  0EB6               	movlw	low STR_115
  9183  0032C4  0100               	movlb	0	; () banked
  9184  0032C6  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  9185  0032C8  0E7F               	movlw	high STR_115
  9186  0032CA  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9187  0032CC  EC36  F032         	call	_UARTTransmitText	;wreg free
  9188  0032D0                     l1352:
  9189                           
  9190                           ;tcp.c: 56: if (tcpHeader.flags.SYN)
  9191  0032D0  0101               	movlb	1	; () banked
  9192  0032D2  AFD5               	btfss	(tcp_handleNewPacket@tcpHeader+13)& (0+255),7,b
  9193  0032D4  D007               	goto	l1353
  9194                           
  9195                           ; BSR set to: 1
  9196                           ;tcp.c: 57: UARTTransmitText("[SYN]");
  9197  0032D6  0EAA               	movlw	low STR_116
  9198  0032D8  0100               	movlb	0	; () banked
  9199  0032DA  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  9200  0032DC  0E7F               	movlw	high STR_116
  9201  0032DE  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9202  0032E0  EC36  F032         	call	_UARTTransmitText	;wreg free
  9203  0032E4                     l1353:
  9204                           
  9205                           ;tcp.c: 58: if (tcpHeader.flags.FIN)
  9206  0032E4  0101               	movlb	1	; () banked
  9207  0032E6  A1D6               	btfss	(tcp_handleNewPacket@tcpHeader+14)& (0+255),0,b
  9208  0032E8  D007               	goto	l1354
  9209                           
  9210                           ; BSR set to: 1
  9211                           ;tcp.c: 59: UARTTransmitText("[FIN]");
  9212  0032EA  0EA4               	movlw	low STR_117
  9213  0032EC  0100               	movlb	0	; () banked
  9214  0032EE  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  9215  0032F0  0E7F               	movlw	high STR_117
  9216  0032F2  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9217  0032F4  EC36  F032         	call	_UARTTransmitText	;wreg free
  9218  0032F8                     l1354:
  9219                           
  9220                           ;tcp.c: 61: for (uint8_t i = 0; i < 12; i++) {
  9221  0032F8  0E00               	movlw	0
  9222  0032FA  0101               	movlb	1	; () banked
  9223  0032FC  6FC7               	movwf	tcp_handleNewPacket@i& (0+255),b
  9224  0032FE                     l11376:
  9225                           
  9226                           ; BSR set to: 1
  9227  0032FE  0E0B               	movlw	11
  9228  003300  65C7               	cpfsgt	tcp_handleNewPacket@i& (0+255),b
  9229  003302  D001               	goto	l1355
  9230  003304  0012               	return	
  9231  003306                     l1355:
  9232                           
  9233                           ; BSR set to: 1
  9234                           ;tcp.c: 62: if (tcpHeader.dstPort == tcpListeners[i].srcPort &&
  9235                           ;tcp.c: 63: tcpListeners[i].state == TCP_STATE_LISTEN) {
  9236                           
  9237                           ; BSR set to: 1
  9238  003306  51C7               	movf	tcp_handleNewPacket@i& (0+255),w,b
  9239  003308  0D11               	mullw	17
  9240  00330A  0E08               	movlw	8
  9241  00330C  26F3               	addwf	prodl,f,c
  9242  00330E  0E00               	movlw	0
  9243  003310  22F4               	addwfc	prodh,f,c
  9244  003312  0E00               	movlw	low _tcpListeners
  9245  003314  24F3               	addwf	prodl,w,c
  9246  003316  6ED9               	movwf	fsr2l,c
  9247  003318  0E05               	movlw	high _tcpListeners
  9248  00331A  20F4               	addwfc	prodh,w,c
  9249  00331C  6EDA               	movwf	fsr2h,c
  9250  00331E  50DE               	movf	postinc2,w,c
  9251  003320  19CA               	xorwf	(tcp_handleNewPacket@tcpHeader+2)& (0+255),w,b
  9252  003322  E151               	bnz	l11392
  9253  003324  50DE               	movf	postinc2,w,c
  9254  003326  19CB               	xorwf	(tcp_handleNewPacket@tcpHeader+3)& (0+255),w,b
  9255  003328  A4D8               	btfss	status,2,c
  9256  00332A  D04D               	goto	l1357
  9257                           
  9258                           ; BSR set to: 1
  9259  00332C  51C7               	movf	tcp_handleNewPacket@i& (0+255),w,b
  9260  00332E  0D11               	mullw	17
  9261  003330  0E10               	movlw	16
  9262  003332  26F3               	addwf	prodl,f,c
  9263  003334  0E00               	movlw	0
  9264  003336  22F4               	addwfc	prodh,f,c
  9265  003338  0E00               	movlw	low _tcpListeners
  9266  00333A  24F3               	addwf	prodl,w,c
  9267  00333C  6ED9               	movwf	fsr2l,c
  9268  00333E  0E05               	movlw	high _tcpListeners
  9269  003340  20F4               	addwfc	prodh,w,c
  9270  003342  6EDA               	movwf	fsr2h,c
  9271  003344  50DF               	movf	indf2,w,c
  9272  003346  A4D8               	btfss	status,2,c
  9273  003348  D03E               	goto	l1357
  9274                           
  9275                           ; BSR set to: 1
  9276                           ;tcp.c: 64: UARTTransmitText("[Am listening on this port]");
  9277  00334A  0E4E               	movlw	low STR_118
  9278  00334C  0100               	movlb	0	; () banked
  9279  00334E  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  9280  003350  0E7D               	movlw	high STR_118
  9281  003352  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9282  003354  EC36  F032         	call	_UARTTransmitText	;wreg free
  9283                           
  9284                           ;tcp.c: 65: tcpListeners[i].ipClient = ipHeader.source;
  9285  003358  EE20  F0DE         	lfsr	2,tcp_handleNewPacket@ipHeader+15
  9286  00335C  0101               	movlb	1	; () banked
  9287  00335E  51C7               	movf	tcp_handleNewPacket@i& (0+255),w,b
  9288  003360  0D11               	mullw	17
  9289  003362  0E04               	movlw	4
  9290  003364  26F3               	addwf	prodl,f,c
  9291  003366  0E00               	movlw	0
  9292  003368  22F4               	addwfc	prodh,f,c
  9293  00336A  0E00               	movlw	low _tcpListeners
  9294  00336C  24F3               	addwf	prodl,w,c
  9295  00336E  6EE1               	movwf	fsr1l,c
  9296  003370  0E05               	movlw	high _tcpListeners
  9297  003372  20F4               	addwfc	prodh,w,c
  9298  003374  6EE2               	movwf	fsr1h,c
  9299  003376  CFDE FFE6          	movff	postinc2,postinc1
  9300  00337A  CFDE FFE6          	movff	postinc2,postinc1
  9301  00337E  CFDE FFE6          	movff	postinc2,postinc1
  9302  003382  CFDE FFE6          	movff	postinc2,postinc1
  9303                           
  9304                           ; BSR set to: 1
  9305                           ;tcp.c: 66: tcpListeners[i].dstPort = tcpHeader.srcPort;
  9306  003386  51C7               	movf	tcp_handleNewPacket@i& (0+255),w,b
  9307  003388  0D11               	mullw	17
  9308  00338A  0E0A               	movlw	10
  9309  00338C  26F3               	addwf	prodl,f,c
  9310  00338E  0E00               	movlw	0
  9311  003390  22F4               	addwfc	prodh,f,c
  9312  003392  0E00               	movlw	low _tcpListeners
  9313  003394  24F3               	addwf	prodl,w,c
  9314  003396  6ED9               	movwf	fsr2l,c
  9315  003398  0E05               	movlw	high _tcpListeners
  9316  00339A  20F4               	addwfc	prodh,w,c
  9317  00339C  6EDA               	movwf	fsr2h,c
  9318  00339E  C1C8  FFDE         	movff	tcp_handleNewPacket@tcpHeader,postinc2
  9319  0033A2  C1C9  FFDD         	movff	tcp_handleNewPacket@tcpHeader+1,postdec2
  9320                           
  9321                           ; BSR set to: 1
  9322                           ;tcp.c: 67: tcp_stateMachine(&tcpListeners[i], &tcpHeader);
  9323  0033A6  51C7               	movf	tcp_handleNewPacket@i& (0+255),w,b
  9324  0033A8  0D11               	mullw	17
  9325  0033AA  0E00               	movlw	low _tcpListeners
  9326  0033AC  24F3               	addwf	prodl,w,c
  9327  0033AE  0100               	movlb	0	; () banked
  9328  0033B0  6FCB               	movwf	tcp_stateMachine@connection& (0+255),b
  9329  0033B2  0E05               	movlw	high _tcpListeners
  9330  0033B4  20F4               	addwfc	prodh,w,c
  9331  0033B6  6FCC               	movwf	(tcp_stateMachine@connection+1)& (0+255),b
  9332  0033B8  0EC8               	movlw	low tcp_handleNewPacket@tcpHeader
  9333  0033BA  6FCD               	movwf	tcp_stateMachine@newHeader& (0+255),b
  9334  0033BC  0E01               	movlw	high tcp_handleNewPacket@tcpHeader
  9335  0033BE  6FCE               	movwf	(tcp_stateMachine@newHeader+1)& (0+255),b
  9336  0033C0  EC38  F02B         	call	_tcp_stateMachine	;wreg free
  9337                           
  9338                           ;tcp.c: 68: break;
  9339  0033C4  0012               	return	
  9340  0033C6                     l1357:
  9341  0033C6                     l11392:
  9342  0033C6  0101               	movlb	1	; () banked
  9343  0033C8  2BC7               	incf	tcp_handleNewPacket@i& (0+255),f,b
  9344  0033CA  D799               	goto	l11376
  9345  0033CC                     __end_of_tcp_handleNewPacket:
  9346                           	opt stack 0
  9347                           tblptru	equ	0xFF8
  9348                           tblptrh	equ	0xFF7
  9349                           tblptrl	equ	0xFF6
  9350                           tablat	equ	0xFF5
  9351                           prodh	equ	0xFF4
  9352                           prodl	equ	0xFF3
  9353                           intcon	equ	0xFF2
  9354                           intcon3	equ	0xFF0
  9355                           indf0	equ	0xFEF
  9356                           postinc0	equ	0xFEE
  9357                           plusw0	equ	0xFEB
  9358                           fsr0h	equ	0xFEA
  9359                           fsr0l	equ	0xFE9
  9360                           wreg	equ	0xFE8
  9361                           indf1	equ	0xFE7
  9362                           postinc1	equ	0xFE6
  9363                           postdec1	equ	0xFE5
  9364                           plusw1	equ	0xFE3
  9365                           fsr1h	equ	0xFE2
  9366                           fsr1l	equ	0xFE1
  9367                           indf2	equ	0xFDF
  9368                           postinc2	equ	0xFDE
  9369                           postdec2	equ	0xFDD
  9370                           plusw2	equ	0xFDB
  9371                           fsr2h	equ	0xFDA
  9372                           fsr2l	equ	0xFD9
  9373                           status	equ	0xFD8
  9374                           
  9375 ;; *************** function _tcp_stateMachine *****************
  9376 ;; Defined at:
  9377 ;;		line 110 in file "src/stack/protocols/tcp.c"
  9378 ;; Parameters:    Size  Location     Type
  9379 ;;  connection      2  107[BANK0 ] PTR struct tcp_connectio
  9380 ;;		 -> tcpListeners(204), 
  9381 ;;  newHeader       2  109[BANK0 ] PTR struct tcp_header
  9382 ;;		 -> tcp_handleNewPacket@tcpHeader(21), 
  9383 ;; Auto vars:     Size  Location     Type
  9384 ;;		None
  9385 ;; Return value:  Size  Location     Type
  9386 ;;                  3  107[BANK0 ] struct error
  9387 ;; Registers used:
  9388 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9389 ;; Tracked objects:
  9390 ;;		On entry : 0/0
  9391 ;;		On exit  : 0/0
  9392 ;;		Unchanged: 0/0
  9393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9394 ;;      Params:         0       4       0       0       0       0       0       0       0
  9395 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9396 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9397 ;;      Totals:         0       4       0       0       0       0       0       0       0
  9398 ;;Total ram usage:        4 bytes
  9399 ;; Hardware stack levels used:    1
  9400 ;; Hardware stack levels required when called:   11
  9401 ;; This function calls:
  9402 ;;		_UARTTransmitText
  9403 ;;		_tcp_sendSYNACK
  9404 ;; This function is called by:
  9405 ;;		_tcp_handleNewPacket
  9406 ;; This function uses a non-reentrant model
  9407 ;;
  9408                           
  9409                           	psect	text25
  9410  005670                     __ptext25:
  9411                           	opt stack 0
  9412  005670                     _tcp_stateMachine:
  9413                           	opt stack 15
  9414                           
  9415                           ;tcp.c: 111: switch (connection->state) {
  9416                           
  9417                           ;incstack = 0
  9418  005670  D02D               	goto	l1364
  9419  005672                     
  9420                           ;tcp.c: 127: if (newHeader->flags.SYN) {
  9421  005672  0100               	movlb	0	; () banked
  9422  005674  EE20 F00D          	lfsr	2,13
  9423  005678  51CD               	movf	tcp_stateMachine@newHeader& (0+255),w,b
  9424  00567A  26D9               	addwf	fsr2l,f,c
  9425  00567C  51CE               	movf	(tcp_stateMachine@newHeader+1)& (0+255),w,b
  9426  00567E  22DA               	addwfc	fsr2h,f,c
  9427  005680  AEDF               	btfss	indf2,7,c
  9428  005682  0012               	return	
  9429                           
  9430                           ; BSR set to: 0
  9431                           ;tcp.c: 128: connection->state = TCP_STATE_SYN_RECEIVED;
  9432  005684  EE20 F010          	lfsr	2,16
  9433  005688  51CB               	movf	tcp_stateMachine@connection& (0+255),w,b
  9434  00568A  26D9               	addwf	fsr2l,f,c
  9435  00568C  51CC               	movf	(tcp_stateMachine@connection+1)& (0+255),w,b
  9436  00568E  22DA               	addwfc	fsr2h,f,c
  9437  005690  0E02               	movlw	2
  9438  005692  6EDF               	movwf	indf2,c
  9439                           
  9440                           ; BSR set to: 0
  9441                           ;tcp.c: 129: UARTTransmitText("[SYN Received]");
  9442  005694  0E90               	movlw	low STR_119
  9443  005696  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  9444  005698  0E7E               	movlw	high STR_119
  9445  00569A  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9446  00569C  EC36  F032         	call	_UARTTransmitText	;wreg free
  9447                           
  9448                           ;tcp.c: 130: tcp_sendSYNACK(connection, newHeader->seqNumber);
  9449  0056A0  C0CB  F0C1         	movff	tcp_stateMachine@connection,tcp_sendSYNACK@connection
  9450  0056A4  C0CC  F0C2         	movff	tcp_stateMachine@connection+1,tcp_sendSYNACK@connection+1
  9451  0056A8  0100               	movlb	0	; () banked
  9452  0056AA  EE20 F004          	lfsr	2,4
  9453  0056AE  51CD               	movf	tcp_stateMachine@newHeader& (0+255),w,b
  9454  0056B0  26D9               	addwf	fsr2l,f,c
  9455  0056B2  51CE               	movf	(tcp_stateMachine@newHeader+1)& (0+255),w,b
  9456  0056B4  22DA               	addwfc	fsr2h,f,c
  9457  0056B6  CFDE F0C3          	movff	postinc2,tcp_sendSYNACK@seq
  9458  0056BA  CFDE F0C4          	movff	postinc2,tcp_sendSYNACK@seq+1
  9459  0056BE  CFDE F0C5          	movff	postinc2,tcp_sendSYNACK@seq+2
  9460  0056C2  CFDE F0C6          	movff	postinc2,tcp_sendSYNACK@seq+3
  9461  0056C6  EC80  F00E         	call	_tcp_sendSYNACK	;wreg free
  9462                           
  9463                           ;tcp.c: 139: }
  9464                           
  9465                           ;tcp.c: 138: break;
  9466                           
  9467                           ;tcp.c: 137: case TCP_STATE_TIME_WAIT:
  9468                           
  9469                           ;tcp.c: 136: break;
  9470                           
  9471                           ;tcp.c: 135: case TCP_STATE_SYN_SENT:
  9472                           
  9473                           ;tcp.c: 134: break;
  9474                           
  9475                           ;tcp.c: 133: case TCP_STATE_SYN_RECEIVED:
  9476                           
  9477                           ;tcp.c: 131: }
  9478                           ;tcp.c: 132: break;
  9479  0056CA  0012               	return	
  9480  0056CC                     l1364:
  9481  0056CC  0100               	movlb	0	; () banked
  9482  0056CE  EE20 F010          	lfsr	2,16
  9483  0056D2  51CB               	movf	tcp_stateMachine@connection& (0+255),w,b
  9484  0056D4  26D9               	addwf	fsr2l,f,c
  9485  0056D6  51CC               	movf	(tcp_stateMachine@connection+1)& (0+255),w,b
  9486  0056D8  22DA               	addwfc	fsr2h,f,c
  9487  0056DA  50DF               	movf	indf2,w,c
  9488                           
  9489                           ; Switch size 1, requested type "space"
  9490                           ; Number of cases is 11, Range of values is 0 to 10
  9491                           ; switch strategies available:
  9492                           ; Name         Instructions Cycles
  9493                           ; simple_byte           34    18 (average)
  9494                           ;	Chosen strategy is simple_byte
  9495  0056DC  0A00               	xorlw	0	; case 0
  9496  0056DE  B4D8               	btfsc	status,2,c
  9497  0056E0  D7C8               	goto	l1373
  9498  0056E2  0A01               	xorlw	1	; case 1
  9499  0056E4  B4D8               	btfsc	status,2,c
  9500  0056E6  0012               	return	
  9501  0056E8  0A03               	xorlw	3	; case 2
  9502  0056EA  B4D8               	btfsc	status,2,c
  9503  0056EC  0012               	return	
  9504  0056EE  0A01               	xorlw	1	; case 3
  9505  0056F0  B4D8               	btfsc	status,2,c
  9506  0056F2  0012               	return	
  9507  0056F4  0A07               	xorlw	7	; case 4
  9508  0056F6  B4D8               	btfsc	status,2,c
  9509  0056F8  0012               	return	
  9510  0056FA  0A01               	xorlw	1	; case 5
  9511  0056FC  B4D8               	btfsc	status,2,c
  9512  0056FE  0012               	return	
  9513  005700  0A03               	xorlw	3	; case 6
  9514  005702  B4D8               	btfsc	status,2,c
  9515  005704  0012               	return	
  9516  005706  0A01               	xorlw	1	; case 7
  9517  005708  B4D8               	btfsc	status,2,c
  9518  00570A  0012               	return	
  9519  00570C  0A0F               	xorlw	15	; case 8
  9520  00570E  B4D8               	btfsc	status,2,c
  9521  005710  0012               	return	
  9522  005712  0A01               	xorlw	1	; case 9
  9523  005714  B4D8               	btfsc	status,2,c
  9524  005716  0012               	return	
  9525  005718  0A03               	xorlw	3	; case 10
  9526  00571A  0012               	return	
  9527  00571C                     __end_of_tcp_stateMachine:
  9528                           	opt stack 0
  9529                           tblptru	equ	0xFF8
  9530                           tblptrh	equ	0xFF7
  9531                           tblptrl	equ	0xFF6
  9532                           tablat	equ	0xFF5
  9533                           prodh	equ	0xFF4
  9534                           prodl	equ	0xFF3
  9535                           intcon	equ	0xFF2
  9536                           intcon3	equ	0xFF0
  9537                           indf0	equ	0xFEF
  9538                           postinc0	equ	0xFEE
  9539                           plusw0	equ	0xFEB
  9540                           fsr0h	equ	0xFEA
  9541                           fsr0l	equ	0xFE9
  9542                           wreg	equ	0xFE8
  9543                           indf1	equ	0xFE7
  9544                           postinc1	equ	0xFE6
  9545                           postdec1	equ	0xFE5
  9546                           plusw1	equ	0xFE3
  9547                           fsr1h	equ	0xFE2
  9548                           fsr1l	equ	0xFE1
  9549                           indf2	equ	0xFDF
  9550                           postinc2	equ	0xFDE
  9551                           postdec2	equ	0xFDD
  9552                           plusw2	equ	0xFDB
  9553                           fsr2h	equ	0xFDA
  9554                           fsr2l	equ	0xFD9
  9555                           status	equ	0xFD8
  9556                           
  9557 ;; *************** function _tcp_sendSYNACK *****************
  9558 ;; Defined at:
  9559 ;;		line 156 in file "src/stack/protocols/tcp.c"
  9560 ;; Parameters:    Size  Location     Type
  9561 ;;  connection      2   97[BANK0 ] PTR struct tcp_connectio
  9562 ;;		 -> tcpListeners(204), 
  9563 ;;  seq             4   99[BANK0 ] unsigned long 
  9564 ;; Auto vars:     Size  Location     Type
  9565 ;;  i               2  110[BANK1 ] unsigned int 
  9566 ;;  ipPacket       66  112[BANK1 ] struct ipv4_packet
  9567 ;;  headerBuf      64   32[BANK1 ] unsigned char [64]
  9568 ;;  ipHeaderBuf    32    0[BANK1 ] unsigned char [32]
  9569 ;;  tcpHeader      21  178[BANK1 ] struct tcp_header
  9570 ;; Return value:  Size  Location     Type
  9571 ;;                  3   97[BANK0 ] struct error
  9572 ;; Registers used:
  9573 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9574 ;; Tracked objects:
  9575 ;;		On entry : 0/0
  9576 ;;		On exit  : 0/0
  9577 ;;		Unchanged: 0/0
  9578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9579 ;;      Params:         0       6       0       0       0       0       0       0       0
  9580 ;;      Locals:         0       0     199       0       0       0       0       0       0
  9581 ;;      Temps:          0       4       0       0       0       0       0       0       0
  9582 ;;      Totals:         0      10     199       0       0       0       0       0       0
  9583 ;;Total ram usage:      209 bytes
  9584 ;; Hardware stack levels used:    1
  9585 ;; Hardware stack levels required when called:   10
  9586 ;; This function calls:
  9587 ;;		_UARTTransmitText
  9588 ;;		_intToString
  9589 ;;		_ipv4_calculateHeaderChecksum
  9590 ;;		_ipv4_getIPSourceAddress
  9591 ;;		_ipv4_streamToTransmissionBuffer
  9592 ;;		_ipv4_txFrameRequest
  9593 ;;		_ipv4_writeHeaderIntoBuffer
  9594 ;;		_tcp_calculateHeaderChecksum
  9595 ;; This function is called by:
  9596 ;;		_tcp_stateMachine
  9597 ;; This function uses a non-reentrant model
  9598 ;;
  9599                           
  9600                           	psect	text26
  9601  001D00                     __ptext26:
  9602                           	opt stack 0
  9603  001D00                     _tcp_sendSYNACK:
  9604                           	opt stack 15
  9605                           
  9606                           ;tcp.c: 157: tcp_header_t tcpHeader;
  9607                           ;tcp.c: 158: uint8_t headerBuf[64];
  9608                           ;tcp.c: 159: uint8_t ipHeaderBuf[32];
  9609                           ;tcp.c: 161: ipv4_packet_t ipPacket;
  9610                           ;tcp.c: 162: ipPacket.ipv4Header.headerLength = 5;
  9611                           
  9612                           ;incstack = 0
  9613  001D00  0E05               	movlw	5
  9614  001D02  0101               	movlb	1	; () banked
  9615  001D04  6F71               	movwf	(tcp_sendSYNACK@ipPacket+1)& (0+255),b
  9616                           
  9617                           ;tcp.c: 163: ipPacket.ipv4Header.dscp = 0x00;
  9618  001D06  0E00               	movlw	0
  9619  001D08  6F72               	movwf	(tcp_sendSYNACK@ipPacket+2)& (0+255),b
  9620                           
  9621                           ;tcp.c: 164: ipPacket.ipv4Header.ecn = 0x00;
  9622  001D0A  0E00               	movlw	0
  9623  001D0C  6F73               	movwf	(tcp_sendSYNACK@ipPacket+3)& (0+255),b
  9624                           
  9625                           ;tcp.c: 165: ipPacket.ipv4Header.flags = 0x00;
  9626  001D0E  0E00               	movlw	0
  9627  001D10  6F78               	movwf	(tcp_sendSYNACK@ipPacket+8)& (0+255),b
  9628                           
  9629                           ;tcp.c: 166: ipPacket.ipv4Header.fragmentOffset = 0x0000;
  9630  001D12  0E00               	movlw	0
  9631  001D14  6F7A               	movwf	(tcp_sendSYNACK@ipPacket+10)& (0+255),b
  9632  001D16  0E00               	movlw	0
  9633  001D18  6F79               	movwf	(tcp_sendSYNACK@ipPacket+9)& (0+255),b
  9634                           
  9635                           ;tcp.c: 167: ipPacket.ipv4Header.protocol = IPv4_PROTOCOL_TCP;
  9636  001D1A  0E06               	movlw	6
  9637  001D1C  6F7C               	movwf	(tcp_sendSYNACK@ipPacket+12)& (0+255),b
  9638                           
  9639                           ; BSR set to: 1
  9640                           ;tcp.c: 168: ipPacket.ipv4Header.destination = connection->ipClient;
  9641  001D1E  0100               	movlb	0	; () banked
  9642  001D20  EE20 F004          	lfsr	2,4
  9643  001D24  51C1               	movf	tcp_sendSYNACK@connection& (0+255),w,b
  9644  001D26  26D9               	addwf	fsr2l,f,c
  9645  001D28  51C2               	movf	(tcp_sendSYNACK@connection+1)& (0+255),w,b
  9646  001D2A  22DA               	addwfc	fsr2h,f,c
  9647  001D2C  CFDE F183          	movff	postinc2,tcp_sendSYNACK@ipPacket+19
  9648  001D30  CFDE F184          	movff	postinc2,tcp_sendSYNACK@ipPacket+20
  9649  001D34  CFDE F185          	movff	postinc2,tcp_sendSYNACK@ipPacket+21
  9650  001D38  CFDE F186          	movff	postinc2,tcp_sendSYNACK@ipPacket+22
  9651                           
  9652                           ; BSR set to: 0
  9653                           ;tcp.c: 169: ipPacket.ipv4Header.source = ipv4_getIPSourceAddress();
  9654  001D3C  ECE5  F036         	call	_ipv4_getIPSourceAddress	;wreg free
  9655  001D40  C060  F17F         	movff	?_ipv4_getIPSourceAddress,tcp_sendSYNACK@ipPacket+15
  9656  001D44  C061  F180         	movff	?_ipv4_getIPSourceAddress+1,tcp_sendSYNACK@ipPacket+16
  9657  001D48  C062  F181         	movff	?_ipv4_getIPSourceAddress+2,tcp_sendSYNACK@ipPacket+17
  9658  001D4C  C063  F182         	movff	?_ipv4_getIPSourceAddress+3,tcp_sendSYNACK@ipPacket+18
  9659                           
  9660                           ;tcp.c: 170: ipPacket.ipv4Header.totalLength = 40;
  9661  001D50  0E00               	movlw	0
  9662  001D52  0101               	movlb	1	; () banked
  9663  001D54  6F75               	movwf	(tcp_sendSYNACK@ipPacket+5)& (0+255),b
  9664  001D56  0E28               	movlw	40
  9665  001D58  6F74               	movwf	(tcp_sendSYNACK@ipPacket+4)& (0+255),b
  9666                           
  9667                           ; BSR set to: 1
  9668                           ;tcp.c: 171: ipPacket.ipv4Header.timeToLive = 255;
  9669  001D5A  697B               	setf	(tcp_sendSYNACK@ipPacket+11)& (0+255),b
  9670                           
  9671                           ; BSR set to: 1
  9672                           ;tcp.c: 172: ipPacket.ipv4Header.version = 4;
  9673  001D5C  0E04               	movlw	4
  9674  001D5E  6F70               	movwf	tcp_sendSYNACK@ipPacket& (0+255),b
  9675                           
  9676                           ; BSR set to: 1
  9677                           ;tcp.c: 174: ipv4_calculateHeaderChecksum(&ipPacket.ipv4Header);
  9678  001D60  0E70               	movlw	low tcp_sendSYNACK@ipPacket
  9679  001D62  0100               	movlb	0	; () banked
  9680  001D64  6F60               	movwf	ipv4_calculateHeaderChecksum@header& (0+255),b
  9681  001D66  0E01               	movlw	high tcp_sendSYNACK@ipPacket
  9682  001D68  6F61               	movwf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),b
  9683  001D6A  EC65  F010         	call	_ipv4_calculateHeaderChecksum	;wreg free
  9684                           
  9685                           ;tcp.c: 175: ipv4_writeHeaderIntoBuffer(ipPacket.ipv4Header, &ipHeaderBuf);
  9686  001D6E  EE21  F070         	lfsr	2,tcp_sendSYNACK@ipPacket
  9687  001D72  EE00  F060         	lfsr	0,ipv4_writeHeaderIntoBuffer@header
  9688  001D76  0E16               	movlw	22
  9689  001D78                     u12051:
  9690  001D78  CFDB FFEB          	movff	plusw2,plusw0
  9691  001D7C  06E8               	decf	wreg,f,c
  9692  001D7E  E2FC               	bc	u12051
  9693  001D80  0E00               	movlw	low tcp_sendSYNACK@ipHeaderBuf
  9694  001D82  0100               	movlb	0	; () banked
  9695  001D84  6F77               	movwf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),b
  9696  001D86  0E01               	movlw	high tcp_sendSYNACK@ipHeaderBuf
  9697  001D88  6F78               	movwf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),b
  9698  001D8A  EC9D  F01F         	call	_ipv4_writeHeaderIntoBuffer	;wreg free
  9699                           
  9700                           ;tcp.c: 177: ipv4_txFrameRequest(&ipPacket);
  9701  001D8E  0E70               	movlw	low tcp_sendSYNACK@ipPacket
  9702  001D90  0100               	movlb	0	; () banked
  9703  001D92  6FA7               	movwf	ipv4_txFrameRequest@packet& (0+255),b
  9704  001D94  0E01               	movlw	high tcp_sendSYNACK@ipPacket
  9705  001D96  6FA8               	movwf	(ipv4_txFrameRequest@packet+1)& (0+255),b
  9706  001D98  EC41  F022         	call	_ipv4_txFrameRequest	;wreg free
  9707                           
  9708                           ;tcp.c: 179: tcpHeader.dataOffset = 5;
  9709  001D9C  0E05               	movlw	5
  9710  001D9E  0101               	movlb	1	; () banked
  9711  001DA0  6FBE               	movwf	(tcp_sendSYNACK@tcpHeader+12)& (0+255),b
  9712                           
  9713                           ; BSR set to: 1
  9714                           ;tcp.c: 180: tcpHeader.dstPort = connection->dstPort;
  9715  001DA2  0100               	movlb	0	; () banked
  9716  001DA4  EE20 F00A          	lfsr	2,10
  9717  001DA8  51C1               	movf	tcp_sendSYNACK@connection& (0+255),w,b
  9718  001DAA  26D9               	addwf	fsr2l,f,c
  9719  001DAC  51C2               	movf	(tcp_sendSYNACK@connection+1)& (0+255),w,b
  9720  001DAE  22DA               	addwfc	fsr2h,f,c
  9721  001DB0  CFDE F1B4          	movff	postinc2,tcp_sendSYNACK@tcpHeader+2
  9722  001DB4  CFDD F1B5          	movff	postdec2,tcp_sendSYNACK@tcpHeader+3
  9723                           
  9724                           ; BSR set to: 0
  9725                           ;tcp.c: 181: tcpHeader.srcPort = connection->srcPort;
  9726  001DB8  EE20 F008          	lfsr	2,8
  9727  001DBC  51C1               	movf	tcp_sendSYNACK@connection& (0+255),w,b
  9728  001DBE  26D9               	addwf	fsr2l,f,c
  9729  001DC0  51C2               	movf	(tcp_sendSYNACK@connection+1)& (0+255),w,b
  9730  001DC2  22DA               	addwfc	fsr2h,f,c
  9731  001DC4  CFDE F1B2          	movff	postinc2,tcp_sendSYNACK@tcpHeader
  9732  001DC8  CFDD F1B3          	movff	postdec2,tcp_sendSYNACK@tcpHeader+1
  9733                           
  9734                           ; BSR set to: 0
  9735                           ;tcp.c: 182: tcpHeader.ackNumber = seq + 1;
  9736  001DCC  0E01               	movlw	1
  9737  001DCE  25C3               	addwf	tcp_sendSYNACK@seq& (0+255),w,b
  9738  001DD0  0101               	movlb	1	; () banked
  9739  001DD2  6FBA               	movwf	(tcp_sendSYNACK@tcpHeader+8)& (0+255),b
  9740  001DD4  0E00               	movlw	0
  9741  001DD6  0100               	movlb	0	; () banked
  9742  001DD8  21C4               	addwfc	(tcp_sendSYNACK@seq+1)& (0+255),w,b
  9743  001DDA  0101               	movlb	1	; () banked
  9744  001DDC  6FBB               	movwf	(tcp_sendSYNACK@tcpHeader+9)& (0+255),b
  9745  001DDE  0E00               	movlw	0
  9746  001DE0  0100               	movlb	0	; () banked
  9747  001DE2  21C5               	addwfc	(tcp_sendSYNACK@seq+2)& (0+255),w,b
  9748  001DE4  0101               	movlb	1	; () banked
  9749  001DE6  6FBC               	movwf	(tcp_sendSYNACK@tcpHeader+10)& (0+255),b
  9750  001DE8  0E00               	movlw	0
  9751  001DEA  0100               	movlb	0	; () banked
  9752  001DEC  21C6               	addwfc	(tcp_sendSYNACK@seq+3)& (0+255),w,b
  9753  001DEE  0101               	movlb	1	; () banked
  9754  001DF0  6FBD               	movwf	(tcp_sendSYNACK@tcpHeader+11)& (0+255),b
  9755                           
  9756                           ; BSR set to: 1
  9757                           ;tcp.c: 183: tcpHeader.seqNumber = 123;
  9758  001DF2  0E7B               	movlw	123
  9759  001DF4  6FB6               	movwf	(tcp_sendSYNACK@tcpHeader+4)& (0+255),b
  9760  001DF6  0E00               	movlw	0
  9761  001DF8  6FB7               	movwf	(tcp_sendSYNACK@tcpHeader+5)& (0+255),b
  9762  001DFA  0E00               	movlw	0
  9763  001DFC  6FB8               	movwf	(tcp_sendSYNACK@tcpHeader+6)& (0+255),b
  9764  001DFE  0E00               	movlw	0
  9765  001E00  6FB9               	movwf	(tcp_sendSYNACK@tcpHeader+7)& (0+255),b
  9766                           
  9767                           ; BSR set to: 1
  9768                           ;tcp.c: 184: tcpHeader.urgentPointer = 0;
  9769  001E02  0E00               	movlw	0
  9770  001E04  6FC6               	movwf	(tcp_sendSYNACK@tcpHeader+20)& (0+255),b
  9771  001E06  0E00               	movlw	0
  9772  001E08  6FC5               	movwf	(tcp_sendSYNACK@tcpHeader+19)& (0+255),b
  9773                           
  9774                           ; BSR set to: 1
  9775                           ;tcp.c: 185: tcpHeader.windowSize = 20;
  9776  001E0A  0E00               	movlw	0
  9777  001E0C  6FC2               	movwf	(tcp_sendSYNACK@tcpHeader+16)& (0+255),b
  9778  001E0E  0E14               	movlw	20
  9779  001E10  6FC1               	movwf	(tcp_sendSYNACK@tcpHeader+15)& (0+255),b
  9780                           
  9781                           ; BSR set to: 1
  9782                           ;tcp.c: 186: tcpHeader.flags.ACK = 1;
  9783  001E12  89BF               	bsf	(tcp_sendSYNACK@tcpHeader+13)& (0+255),4,b
  9784                           
  9785                           ; BSR set to: 1
  9786                           ;tcp.c: 187: tcpHeader.flags.SYN = 1;
  9787  001E14  8FBF               	bsf	(tcp_sendSYNACK@tcpHeader+13)& (0+255),7,b
  9788                           
  9789                           ; BSR set to: 1
  9790                           ;tcp.c: 188: tcpHeader.flags.NS = 0;
  9791  001E16  91BF               	bcf	(tcp_sendSYNACK@tcpHeader+13)& (0+255),0,b
  9792                           
  9793                           ; BSR set to: 1
  9794                           ;tcp.c: 189: tcpHeader.flags.CWR = 0;
  9795  001E18  93BF               	bcf	(tcp_sendSYNACK@tcpHeader+13)& (0+255),1,b
  9796                           
  9797                           ; BSR set to: 1
  9798                           ;tcp.c: 190: tcpHeader.flags.ECE = 0;
  9799  001E1A  95BF               	bcf	(tcp_sendSYNACK@tcpHeader+13)& (0+255),2,b
  9800                           
  9801                           ; BSR set to: 1
  9802                           ;tcp.c: 191: tcpHeader.flags.URG = 0;
  9803  001E1C  97BF               	bcf	(tcp_sendSYNACK@tcpHeader+13)& (0+255),3,b
  9804                           
  9805                           ; BSR set to: 1
  9806                           ;tcp.c: 192: tcpHeader.flags.PSH = 0;
  9807  001E1E  9BBF               	bcf	(tcp_sendSYNACK@tcpHeader+13)& (0+255),5,b
  9808                           
  9809                           ; BSR set to: 1
  9810                           ;tcp.c: 193: tcpHeader.flags.RST = 0;
  9811  001E20  9DBF               	bcf	(tcp_sendSYNACK@tcpHeader+13)& (0+255),6,b
  9812                           
  9813                           ; BSR set to: 1
  9814                           ;tcp.c: 194: tcpHeader.flags.FIN = 0;
  9815  001E22  91C0               	bcf	(tcp_sendSYNACK@tcpHeader+14)& (0+255),0,b
  9816                           
  9817                           ; BSR set to: 1
  9818                           ;tcp.c: 196: tcp_calculateHeaderChecksum(&tcpHeader, ipPacket.ipv4Header);
  9819  001E24  0EB2               	movlw	low tcp_sendSYNACK@tcpHeader
  9820  001E26  0100               	movlb	0	; () banked
  9821  001E28  6F60               	movwf	tcp_calculateHeaderChecksum@tcpHeader& (0+255),b
  9822  001E2A  0E01               	movlw	high tcp_sendSYNACK@tcpHeader
  9823  001E2C  6F61               	movwf	(tcp_calculateHeaderChecksum@tcpHeader+1)& (0+255),b
  9824  001E2E  EE21  F070         	lfsr	2,tcp_sendSYNACK@ipPacket
  9825  001E32  EE00  F062         	lfsr	0,tcp_calculateHeaderChecksum@ipv4Header
  9826  001E36  0E16               	movlw	22
  9827  001E38                     u12061:
  9828  001E38  CFDB FFEB          	movff	plusw2,plusw0
  9829  001E3C  06E8               	decf	wreg,f,c
  9830  001E3E  E2FC               	bc	u12061
  9831  001E40  EC41  F00A         	call	_tcp_calculateHeaderChecksum	;wreg free
  9832                           
  9833                           ;tcp.c: 199: UARTTransmitText("[");
  9834  001E44  0EFB               	movlw	low (STR_11+1)
  9835  001E46  0100               	movlb	0	; () banked
  9836  001E48  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  9837  001E4A  0E7F               	movlw	high (STR_11+1)
  9838  001E4C  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9839  001E4E  EC36  F032         	call	_UARTTransmitText	;wreg free
  9840                           
  9841                           ;tcp.c: 200: UARTTransmitText(intToString(tcpHeader.srcPort, 10));
  9842  001E52  C1B2  F084         	movff	tcp_sendSYNACK@tcpHeader,intToString@val
  9843  001E56  C1B3  F085         	movff	tcp_sendSYNACK@tcpHeader+1,intToString@val+1
  9844  001E5A  0100               	movlb	0	; () banked
  9845  001E5C  6B86               	clrf	(intToString@val+2)& (0+255),b
  9846  001E5E  6B87               	clrf	(intToString@val+3)& (0+255),b
  9847  001E60  0E0A               	movlw	10
  9848  001E62  6F88               	movwf	intToString@b& (0+255),b
  9849  001E64  EC0D  F035         	call	_intToString	;wreg free
  9850  001E68  C084  F08D         	movff	?_intToString,UARTTransmitText@str
  9851  001E6C  C085  F08E         	movff	?_intToString+1,UARTTransmitText@str+1
  9852  001E70  EC36  F032         	call	_UARTTransmitText	;wreg free
  9853                           
  9854                           ;tcp.c: 201: UARTTransmitText(" -> ");
  9855  001E74  0ED0               	movlw	low STR_20
  9856  001E76  0100               	movlb	0	; () banked
  9857  001E78  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  9858  001E7A  0E7F               	movlw	high STR_20
  9859  001E7C  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9860  001E7E  EC36  F032         	call	_UARTTransmitText	;wreg free
  9861                           
  9862                           ;tcp.c: 202: UARTTransmitText(intToString(tcpHeader.dstPort, 10));
  9863  001E82  C1B4  F084         	movff	tcp_sendSYNACK@tcpHeader+2,intToString@val
  9864  001E86  C1B5  F085         	movff	tcp_sendSYNACK@tcpHeader+3,intToString@val+1
  9865  001E8A  0100               	movlb	0	; () banked
  9866  001E8C  6B86               	clrf	(intToString@val+2)& (0+255),b
  9867  001E8E  6B87               	clrf	(intToString@val+3)& (0+255),b
  9868  001E90  0E0A               	movlw	10
  9869  001E92  6F88               	movwf	intToString@b& (0+255),b
  9870  001E94  EC0D  F035         	call	_intToString	;wreg free
  9871  001E98  C084  F08D         	movff	?_intToString,UARTTransmitText@str
  9872  001E9C  C085  F08E         	movff	?_intToString+1,UARTTransmitText@str+1
  9873  001EA0  EC36  F032         	call	_UARTTransmitText	;wreg free
  9874                           
  9875                           ;tcp.c: 203: UARTTransmitText("]");
  9876  001EA4  0E90               	movlw	low (STR_111+4)
  9877  001EA6  0100               	movlb	0	; () banked
  9878  001EA8  6F8D               	movwf	UARTTransmitText@str& (0+255),b
  9879  001EAA  0E7F               	movlw	high (STR_111+4)
  9880  001EAC  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9881  001EAE  EC36  F032         	call	_UARTTransmitText	;wreg free
  9882                           
  9883                           ;tcp.c: 204: headerBuf[0] = (tcpHeader.srcPort & 0xff00) >> 8;
  9884  001EB2  0101               	movlb	1	; () banked
  9885  001EB4  51B3               	movf	(tcp_sendSYNACK@tcpHeader+1)& (0+255),w,b
  9886  001EB6  6F20               	movwf	tcp_sendSYNACK@headerBuf& (0+255),b
  9887                           
  9888                           ; BSR set to: 1
  9889                           ;tcp.c: 205: headerBuf[1] = tcpHeader.srcPort & 0x00ff;
  9890  001EB8  C1B2  F121         	movff	tcp_sendSYNACK@tcpHeader,tcp_sendSYNACK@headerBuf+1
  9891                           
  9892                           ; BSR set to: 1
  9893                           ;tcp.c: 206: headerBuf[2] = (tcpHeader.dstPort & 0xff00) >> 8;
  9894  001EBC  51B5               	movf	(tcp_sendSYNACK@tcpHeader+3)& (0+255),w,b
  9895  001EBE  6F22               	movwf	(tcp_sendSYNACK@headerBuf+2)& (0+255),b
  9896                           
  9897                           ; BSR set to: 1
  9898                           ;tcp.c: 207: headerBuf[3] = tcpHeader.dstPort & 0x00ff;
  9899  001EC0  C1B4  F123         	movff	tcp_sendSYNACK@tcpHeader+2,tcp_sendSYNACK@headerBuf+3
  9900                           
  9901                           ; BSR set to: 1
  9902                           ;tcp.c: 208: headerBuf[4] = (tcpHeader.seqNumber & 0xff000000) >> 24;
  9903  001EC4  EE21  F0B6         	lfsr	2,tcp_sendSYNACK@tcpHeader+4
  9904  001EC8  0E00               	movlw	0
  9905  001ECA  14DE               	andwf	postinc2,w,c
  9906  001ECC  0100               	movlb	0	; () banked
  9907  001ECE  6FC7               	movwf	??_tcp_sendSYNACK& (0+255),b
  9908  001ED0  0E00               	movlw	0
  9909  001ED2  14DE               	andwf	postinc2,w,c
  9910  001ED4  6FC8               	movwf	(??_tcp_sendSYNACK+1)& (0+255),b
  9911  001ED6  0E00               	movlw	0
  9912  001ED8  14DE               	andwf	postinc2,w,c
  9913  001EDA  6FC9               	movwf	(??_tcp_sendSYNACK+2)& (0+255),b
  9914  001EDC  0EFF               	movlw	255
  9915  001EDE  14DE               	andwf	postinc2,w,c
  9916  001EE0  6FCA               	movwf	(??_tcp_sendSYNACK+3)& (0+255),b
  9917  001EE2  0E19               	movlw	25
  9918  001EE4  D005               	goto	u12070
  9919  001EE6                     u12075:
  9920  001EE6  90D8               	bcf	status,0,c
  9921  001EE8  33CA               	rrcf	(??_tcp_sendSYNACK+3)& (0+255),f,b
  9922  001EEA  33C9               	rrcf	(??_tcp_sendSYNACK+2)& (0+255),f,b
  9923  001EEC  33C8               	rrcf	(??_tcp_sendSYNACK+1)& (0+255),f,b
  9924  001EEE  33C7               	rrcf	??_tcp_sendSYNACK& (0+255),f,b
  9925  001EF0                     u12070:
  9926  001EF0  2EE8               	decfsz	wreg,f,c
  9927  001EF2  D7F9               	goto	u12075
  9928  001EF4  51C7               	movf	??_tcp_sendSYNACK& (0+255),w,b
  9929  001EF6  0101               	movlb	1	; () banked
  9930  001EF8  6F24               	movwf	(tcp_sendSYNACK@headerBuf+4)& (0+255),b
  9931                           
  9932                           ; BSR set to: 1
  9933                           ;tcp.c: 209: headerBuf[5] = (tcpHeader.seqNumber & 0x00ff0000) >> 16;
  9934  001EFA  C1B8  F125         	movff	tcp_sendSYNACK@tcpHeader+6,tcp_sendSYNACK@headerBuf+5
  9935                           
  9936                           ; BSR set to: 1
  9937                           ;tcp.c: 210: headerBuf[6] = (tcpHeader.seqNumber & 0x0000ff00) >> 8;
  9938  001EFE  C1B7  F126         	movff	tcp_sendSYNACK@tcpHeader+5,tcp_sendSYNACK@headerBuf+6
  9939                           
  9940                           ; BSR set to: 1
  9941                           ;tcp.c: 211: headerBuf[7] = tcpHeader.seqNumber & 0x000000ff;
  9942  001F02  C1B6  F127         	movff	tcp_sendSYNACK@tcpHeader+4,tcp_sendSYNACK@headerBuf+7
  9943                           
  9944                           ; BSR set to: 1
  9945                           ;tcp.c: 212: headerBuf[8] = (tcpHeader.ackNumber & 0xff000000) >> 24;
  9946  001F06  EE21  F0BA         	lfsr	2,tcp_sendSYNACK@tcpHeader+8
  9947  001F0A  0E00               	movlw	0
  9948  001F0C  14DE               	andwf	postinc2,w,c
  9949  001F0E  0100               	movlb	0	; () banked
  9950  001F10  6FC7               	movwf	??_tcp_sendSYNACK& (0+255),b
  9951  001F12  0E00               	movlw	0
  9952  001F14  14DE               	andwf	postinc2,w,c
  9953  001F16  6FC8               	movwf	(??_tcp_sendSYNACK+1)& (0+255),b
  9954  001F18  0E00               	movlw	0
  9955  001F1A  14DE               	andwf	postinc2,w,c
  9956  001F1C  6FC9               	movwf	(??_tcp_sendSYNACK+2)& (0+255),b
  9957  001F1E  0EFF               	movlw	255
  9958  001F20  14DE               	andwf	postinc2,w,c
  9959  001F22  6FCA               	movwf	(??_tcp_sendSYNACK+3)& (0+255),b
  9960  001F24  0E19               	movlw	25
  9961  001F26  D005               	goto	u12080
  9962  001F28                     u12085:
  9963  001F28  90D8               	bcf	status,0,c
  9964  001F2A  33CA               	rrcf	(??_tcp_sendSYNACK+3)& (0+255),f,b
  9965  001F2C  33C9               	rrcf	(??_tcp_sendSYNACK+2)& (0+255),f,b
  9966  001F2E  33C8               	rrcf	(??_tcp_sendSYNACK+1)& (0+255),f,b
  9967  001F30  33C7               	rrcf	??_tcp_sendSYNACK& (0+255),f,b
  9968  001F32                     u12080:
  9969  001F32  2EE8               	decfsz	wreg,f,c
  9970  001F34  D7F9               	goto	u12085
  9971  001F36  51C7               	movf	??_tcp_sendSYNACK& (0+255),w,b
  9972  001F38  0101               	movlb	1	; () banked
  9973  001F3A  6F28               	movwf	(tcp_sendSYNACK@headerBuf+8)& (0+255),b
  9974                           
  9975                           ; BSR set to: 1
  9976                           ;tcp.c: 213: headerBuf[9] = (tcpHeader.ackNumber & 0x00ff0000) >> 16;
  9977  001F3C  C1BC  F129         	movff	tcp_sendSYNACK@tcpHeader+10,tcp_sendSYNACK@headerBuf+9
  9978                           
  9979                           ; BSR set to: 1
  9980                           ;tcp.c: 214: headerBuf[10] = (tcpHeader.ackNumber & 0x0000ff00) >> 8;
  9981  001F40  C1BB  F12A         	movff	tcp_sendSYNACK@tcpHeader+9,tcp_sendSYNACK@headerBuf+10
  9982                           
  9983                           ; BSR set to: 1
  9984                           ;tcp.c: 215: headerBuf[11] = tcpHeader.ackNumber & 0x000000ff;
  9985  001F44  C1BA  F12B         	movff	tcp_sendSYNACK@tcpHeader+8,tcp_sendSYNACK@headerBuf+11
  9986                           
  9987                           ; BSR set to: 1
  9988                           ;tcp.c: 216: headerBuf[12] = (tcpHeader.dataOffset << 4) | (tcpHeader.flags.NS ? 0x01 : 
      +                          0x00);
  9989  001F48  A1BF               	btfss	(tcp_sendSYNACK@tcpHeader+13)& (0+255),0,b
  9990  001F4A  D004               	goto	u12090
  9991  001F4C  0100               	movlb	0	; () banked
  9992  001F4E  6BC7               	clrf	??_tcp_sendSYNACK& (0+255),b
  9993  001F50  2BC7               	incf	??_tcp_sendSYNACK& (0+255),f,b
  9994  001F52  D002               	goto	u12098
  9995  001F54                     u12090:
  9996  001F54  0100               	movlb	0	; () banked
  9997  001F56  6BC7               	clrf	??_tcp_sendSYNACK& (0+255),b
  9998  001F58                     u12098:
  9999  001F58  0101               	movlb	1	; () banked
 10000  001F5A  39BE               	swapf	(tcp_sendSYNACK@tcpHeader+12)& (0+255),w,b
 10001  001F5C  0BF0               	andlw	240
 10002  001F5E  0100               	movlb	0	; () banked
 10003  001F60  11C7               	iorwf	??_tcp_sendSYNACK& (0+255),w,b
 10004  001F62  0101               	movlb	1	; () banked
 10005  001F64  6F2C               	movwf	(tcp_sendSYNACK@headerBuf+12)& (0+255),b
 10006                           
 10007                           ; BSR set to: 1
 10008                           ;tcp.c: 217: headerBuf[13] = (tcpHeader.flags.CWR ? 0x80 : 0x00) |
 10009                           ;tcp.c: 218: (tcpHeader.flags.CWR ? 0x40 : 0x00) |
 10010                           ;tcp.c: 219: (tcpHeader.flags.URG ? 0x20 : 0x00) |
 10011                           ;tcp.c: 220: (tcpHeader.flags.ACK ? 0x10 : 0x00) |
 10012                           ;tcp.c: 221: (tcpHeader.flags.PSH ? 0x08 : 0x00) |
 10013                           ;tcp.c: 222: (tcpHeader.flags.RST ? 0x04 : 0x00) |
 10014                           ;tcp.c: 223: (tcpHeader.flags.SYN ? 0x02 : 0x00) |
 10015                           ;tcp.c: 224: (tcpHeader.flags.FIN ? 0x01 : 0x00);
 10016  001F66  BFBF               	btfsc	(tcp_sendSYNACK@tcpHeader+13)& (0+255),7,b
 10017  001F68  D004               	goto	l1385
 10018                           
 10019                           ; BSR set to: 1
 10020  001F6A  0E00               	movlw	0
 10021  001F6C  6F61               	movwf	(_tcp_sendSYNACK$4902+1)& (0+255),b
 10022  001F6E  0E00               	movlw	0
 10023  001F70  D003               	goto	L5
 10024  001F72                     l1385:
 10025                           
 10026                           ; BSR set to: 1
 10027                           
 10028                           ; BSR set to: 1
 10029  001F72  0E00               	movlw	0
 10030  001F74  6F61               	movwf	(_tcp_sendSYNACK$4902+1)& (0+255),b
 10031  001F76  0E02               	movlw	2
 10032  001F78                     L5:
 10033  001F78  6F60               	movwf	_tcp_sendSYNACK$4902& (0+255),b
 10034                           
 10035                           ; BSR set to: 1
 10036                           
 10037                           ; BSR set to: 1
 10038  001F7A  BDBF               	btfsc	(tcp_sendSYNACK@tcpHeader+13)& (0+255),6,b
 10039  001F7C  D004               	goto	l1389
 10040                           
 10041                           ; BSR set to: 1
 10042  001F7E  0E00               	movlw	0
 10043  001F80  6F63               	movwf	(_tcp_sendSYNACK$4903+1)& (0+255),b
 10044  001F82  0E00               	movlw	0
 10045  001F84  D003               	goto	L6
 10046  001F86                     l1389:
 10047                           
 10048                           ; BSR set to: 1
 10049                           
 10050                           ; BSR set to: 1
 10051  001F86  0E00               	movlw	0
 10052  001F88  6F63               	movwf	(_tcp_sendSYNACK$4903+1)& (0+255),b
 10053  001F8A  0E04               	movlw	4
 10054  001F8C                     L6:
 10055  001F8C  6F62               	movwf	_tcp_sendSYNACK$4903& (0+255),b
 10056                           
 10057                           ; BSR set to: 1
 10058                           
 10059                           ; BSR set to: 1
 10060  001F8E  BBBF               	btfsc	(tcp_sendSYNACK@tcpHeader+13)& (0+255),5,b
 10061  001F90  D004               	goto	l1393
 10062                           
 10063                           ; BSR set to: 1
 10064  001F92  0E00               	movlw	0
 10065  001F94  6F65               	movwf	(_tcp_sendSYNACK$4904+1)& (0+255),b
 10066  001F96  0E00               	movlw	0
 10067  001F98  D003               	goto	L7
 10068  001F9A                     l1393:
 10069                           
 10070                           ; BSR set to: 1
 10071                           
 10072                           ; BSR set to: 1
 10073  001F9A  0E00               	movlw	0
 10074  001F9C  6F65               	movwf	(_tcp_sendSYNACK$4904+1)& (0+255),b
 10075  001F9E  0E08               	movlw	8
 10076  001FA0                     L7:
 10077  001FA0  6F64               	movwf	_tcp_sendSYNACK$4904& (0+255),b
 10078                           
 10079                           ; BSR set to: 1
 10080                           
 10081                           ; BSR set to: 1
 10082  001FA2  B9BF               	btfsc	(tcp_sendSYNACK@tcpHeader+13)& (0+255),4,b
 10083  001FA4  D004               	goto	l1397
 10084                           
 10085                           ; BSR set to: 1
 10086  001FA6  0E00               	movlw	0
 10087  001FA8  6F67               	movwf	(_tcp_sendSYNACK$4905+1)& (0+255),b
 10088  001FAA  0E00               	movlw	0
 10089  001FAC  D003               	goto	L8
 10090  001FAE                     l1397:
 10091                           
 10092                           ; BSR set to: 1
 10093                           
 10094                           ; BSR set to: 1
 10095  001FAE  0E00               	movlw	0
 10096  001FB0  6F67               	movwf	(_tcp_sendSYNACK$4905+1)& (0+255),b
 10097  001FB2  0E10               	movlw	16
 10098  001FB4                     L8:
 10099  001FB4  6F66               	movwf	_tcp_sendSYNACK$4905& (0+255),b
 10100                           
 10101                           ; BSR set to: 1
 10102                           
 10103                           ; BSR set to: 1
 10104  001FB6  B7BF               	btfsc	(tcp_sendSYNACK@tcpHeader+13)& (0+255),3,b
 10105  001FB8  D004               	goto	l1401
 10106                           
 10107                           ; BSR set to: 1
 10108  001FBA  0E00               	movlw	0
 10109  001FBC  6F69               	movwf	(_tcp_sendSYNACK$4906+1)& (0+255),b
 10110  001FBE  0E00               	movlw	0
 10111  001FC0  D003               	goto	L9
 10112  001FC2                     l1401:
 10113                           
 10114                           ; BSR set to: 1
 10115                           
 10116                           ; BSR set to: 1
 10117  001FC2  0E00               	movlw	0
 10118  001FC4  6F69               	movwf	(_tcp_sendSYNACK$4906+1)& (0+255),b
 10119  001FC6  0E20               	movlw	32
 10120  001FC8                     L9:
 10121  001FC8  6F68               	movwf	_tcp_sendSYNACK$4906& (0+255),b
 10122                           
 10123                           ; BSR set to: 1
 10124                           
 10125                           ; BSR set to: 1
 10126  001FCA  B3BF               	btfsc	(tcp_sendSYNACK@tcpHeader+13)& (0+255),1,b
 10127  001FCC  D004               	goto	l1405
 10128                           
 10129                           ; BSR set to: 1
 10130  001FCE  0E00               	movlw	0
 10131  001FD0  6F6B               	movwf	(_tcp_sendSYNACK$4907+1)& (0+255),b
 10132  001FD2  0E00               	movlw	0
 10133  001FD4  D003               	goto	L10
 10134  001FD6                     l1405:
 10135                           
 10136                           ; BSR set to: 1
 10137                           
 10138                           ; BSR set to: 1
 10139  001FD6  0E00               	movlw	0
 10140  001FD8  6F6B               	movwf	(_tcp_sendSYNACK$4907+1)& (0+255),b
 10141  001FDA  0E40               	movlw	64
 10142  001FDC                     L10:
 10143  001FDC  6F6A               	movwf	_tcp_sendSYNACK$4907& (0+255),b
 10144                           
 10145                           ; BSR set to: 1
 10146                           
 10147                           ; BSR set to: 1
 10148  001FDE  B3BF               	btfsc	(tcp_sendSYNACK@tcpHeader+13)& (0+255),1,b
 10149  001FE0  D004               	goto	l1409
 10150                           
 10151                           ; BSR set to: 1
 10152  001FE2  0E00               	movlw	0
 10153  001FE4  6F6D               	movwf	(_tcp_sendSYNACK$4908+1)& (0+255),b
 10154  001FE6  0E00               	movlw	0
 10155  001FE8  D003               	goto	L11
 10156  001FEA                     l1409:
 10157                           
 10158                           ; BSR set to: 1
 10159                           
 10160                           ; BSR set to: 1
 10161  001FEA  0E00               	movlw	0
 10162  001FEC  6F6D               	movwf	(_tcp_sendSYNACK$4908+1)& (0+255),b
 10163  001FEE  0E80               	movlw	128
 10164  001FF0                     L11:
 10165  001FF0  6F6C               	movwf	_tcp_sendSYNACK$4908& (0+255),b
 10166                           
 10167                           ; BSR set to: 1
 10168                           
 10169                           ; BSR set to: 1
 10170  001FF2  A1C0               	btfss	(tcp_sendSYNACK@tcpHeader+14)& (0+255),0,b
 10171  001FF4  D002               	goto	u12170
 10172  001FF6  0E01               	movlw	1
 10173  001FF8  D001               	goto	u12176
 10174  001FFA                     u12170:
 10175  001FFA  0E00               	movlw	0
 10176  001FFC                     u12176:
 10177  001FFC  116C               	iorwf	_tcp_sendSYNACK$4908& (0+255),w,b
 10178  001FFE  116A               	iorwf	_tcp_sendSYNACK$4907& (0+255),w,b
 10179  002000  1168               	iorwf	_tcp_sendSYNACK$4906& (0+255),w,b
 10180  002002  1166               	iorwf	_tcp_sendSYNACK$4905& (0+255),w,b
 10181  002004  1164               	iorwf	_tcp_sendSYNACK$4904& (0+255),w,b
 10182  002006  1162               	iorwf	_tcp_sendSYNACK$4903& (0+255),w,b
 10183  002008  1160               	iorwf	_tcp_sendSYNACK$4902& (0+255),w,b
 10184  00200A  6F2D               	movwf	(tcp_sendSYNACK@headerBuf+13)& (0+255),b
 10185                           
 10186                           ; BSR set to: 1
 10187                           ;tcp.c: 225: headerBuf[14] = (tcpHeader.windowSize & 0xff00) >> 8;
 10188  00200C  51C2               	movf	(tcp_sendSYNACK@tcpHeader+16)& (0+255),w,b
 10189  00200E  6F2E               	movwf	(tcp_sendSYNACK@headerBuf+14)& (0+255),b
 10190                           
 10191                           ; BSR set to: 1
 10192                           ;tcp.c: 226: headerBuf[15] = tcpHeader.windowSize & 0x00ff;
 10193  002010  C1C1  F12F         	movff	tcp_sendSYNACK@tcpHeader+15,tcp_sendSYNACK@headerBuf+15
 10194                           
 10195                           ; BSR set to: 1
 10196                           ;tcp.c: 227: headerBuf[16] = (tcpHeader.checksum & 0xff00) >> 8;
 10197  002014  51C4               	movf	(tcp_sendSYNACK@tcpHeader+18)& (0+255),w,b
 10198  002016  6F30               	movwf	(tcp_sendSYNACK@headerBuf+16)& (0+255),b
 10199                           
 10200                           ; BSR set to: 1
 10201                           ;tcp.c: 228: headerBuf[17] = tcpHeader.checksum & 0x00ff;
 10202  002018  C1C3  F131         	movff	tcp_sendSYNACK@tcpHeader+17,tcp_sendSYNACK@headerBuf+17
 10203                           
 10204                           ; BSR set to: 1
 10205                           ;tcp.c: 229: headerBuf[18] = (tcpHeader.urgentPointer & 0xff00) >> 8;
 10206  00201C  51C6               	movf	(tcp_sendSYNACK@tcpHeader+20)& (0+255),w,b
 10207  00201E  6F32               	movwf	(tcp_sendSYNACK@headerBuf+18)& (0+255),b
 10208                           
 10209                           ; BSR set to: 1
 10210                           ;tcp.c: 230: headerBuf[19] = tcpHeader.urgentPointer & 0x00ff;
 10211  002020  C1C5  F133         	movff	tcp_sendSYNACK@tcpHeader+19,tcp_sendSYNACK@headerBuf+19
 10212                           
 10213                           ; BSR set to: 1
 10214                           ;tcp.c: 232: for (uint16_t i = 0; i < ipPacket.ipv4Header.totalLength; i++) {
 10215  002024  0E00               	movlw	0
 10216  002026  6F6F               	movwf	(tcp_sendSYNACK@i+1)& (0+255),b
 10217  002028  0E00               	movlw	0
 10218  00202A  6F6E               	movwf	tcp_sendSYNACK@i& (0+255),b
 10219  00202C  D03B               	goto	l1412
 10220  00202E                     
 10221                           ; BSR set to: 1
 10222                           ;tcp.c: 233: if (i < ipPacket.ipv4Header.headerLength * 4) {
 10223                           
 10224                           ; BSR set to: 1
 10225  00202E  5171               	movf	(tcp_sendSYNACK@ipPacket+1)& (0+255),w,b
 10226  002030  0D04               	mullw	4
 10227  002032  50F3               	movf	prodl,w,c
 10228  002034  5D6E               	subwf	tcp_sendSYNACK@i& (0+255),w,b
 10229  002036  50F4               	movf	prodh,w,c
 10230  002038  596F               	subwfb	(tcp_sendSYNACK@i+1)& (0+255),w,b
 10231  00203A  B0D8               	btfsc	status,0,c
 10232  00203C  D013               	goto	l1414
 10233                           
 10234                           ; BSR set to: 1
 10235                           ;tcp.c: 234: ipv4_streamToTransmissionBuffer(ipHeaderBuf[i], ipPacket);
 10236  00203E  EE21  F070         	lfsr	2,tcp_sendSYNACK@ipPacket
 10237  002042  EE00  F07E         	lfsr	0,ipv4_streamToTransmissionBuffer@packet
 10238  002046  0E41               	movlw	65
 10239  002048                     u12191:
 10240  002048  CFDB FFEB          	movff	plusw2,plusw0
 10241  00204C  06E8               	decf	wreg,f,c
 10242  00204E  E2FC               	bc	u12191
 10243  002050  0E00               	movlw	low tcp_sendSYNACK@ipHeaderBuf
 10244  002052  256E               	addwf	tcp_sendSYNACK@i& (0+255),w,b
 10245  002054  6ED9               	movwf	fsr2l,c
 10246  002056  0E01               	movlw	high tcp_sendSYNACK@ipHeaderBuf
 10247  002058  216F               	addwfc	(tcp_sendSYNACK@i+1)& (0+255),w,b
 10248  00205A  6EDA               	movwf	fsr2h,c
 10249  00205C  50DF               	movf	indf2,w,c
 10250  00205E  EC7E  F036         	call	_ipv4_streamToTransmissionBuffer
 10251                           
 10252                           ;tcp.c: 235: } else {
 10253  002062  D01D               	goto	l1415
 10254  002064                     l1414:
 10255                           
 10256                           ;tcp.c: 236: ipv4_streamToTransmissionBuffer(headerBuf[i - ipPacket.ipv4Header.headerLen
      +                          gth * 4], ipPacket);
 10257  002064  EE21  F070         	lfsr	2,tcp_sendSYNACK@ipPacket
 10258  002068  EE00  F07E         	lfsr	0,ipv4_streamToTransmissionBuffer@packet
 10259  00206C  0E41               	movlw	65
 10260  00206E                     u12201:
 10261  00206E  CFDB FFEB          	movff	plusw2,plusw0
 10262  002072  06E8               	decf	wreg,f,c
 10263  002074  E2FC               	bc	u12201
 10264  002076  0101               	movlb	1	; () banked
 10265  002078  5171               	movf	(tcp_sendSYNACK@ipPacket+1)& (0+255),w,b
 10266  00207A  0D04               	mullw	4
 10267  00207C  1EF3               	comf	prodl,f,c
 10268  00207E  1EF4               	comf	prodh,f,c
 10269  002080  4AF3               	infsnz	prodl,f,c
 10270  002082  2AF4               	incf	prodh,f,c
 10271  002084  516E               	movf	tcp_sendSYNACK@i& (0+255),w,b
 10272  002086  26F3               	addwf	prodl,f,c
 10273  002088  516F               	movf	(tcp_sendSYNACK@i+1)& (0+255),w,b
 10274  00208A  22F4               	addwfc	prodh,f,c
 10275  00208C  0E20               	movlw	low tcp_sendSYNACK@headerBuf
 10276  00208E  24F3               	addwf	prodl,w,c
 10277  002090  6ED9               	movwf	fsr2l,c
 10278  002092  0E01               	movlw	high tcp_sendSYNACK@headerBuf
 10279  002094  20F4               	addwfc	prodh,w,c
 10280  002096  6EDA               	movwf	fsr2h,c
 10281  002098  50DF               	movf	indf2,w,c
 10282  00209A  EC7E  F036         	call	_ipv4_streamToTransmissionBuffer
 10283  00209E                     l1415:
 10284  00209E  0101               	movlb	1	; () banked
 10285  0020A0  4B6E               	infsnz	tcp_sendSYNACK@i& (0+255),f,b
 10286  0020A2  2B6F               	incf	(tcp_sendSYNACK@i+1)& (0+255),f,b
 10287  0020A4                     l1412:
 10288                           
 10289                           ; BSR set to: 1
 10290                           
 10291                           ; BSR set to: 1
 10292  0020A4  5174               	movf	(tcp_sendSYNACK@ipPacket+4)& (0+255),w,b
 10293  0020A6  5D6E               	subwf	tcp_sendSYNACK@i& (0+255),w,b
 10294  0020A8  5175               	movf	(tcp_sendSYNACK@ipPacket+5)& (0+255),w,b
 10295  0020AA  596F               	subwfb	(tcp_sendSYNACK@i+1)& (0+255),w,b
 10296  0020AC  A0D8               	btfss	status,0,c
 10297  0020AE  D7BF               	goto	l1413
 10298                           
 10299                           ; BSR set to: 1
 10300                           ;tcp.c: 237: }
 10301                           ;tcp.c: 238: }
 10302                           ;tcp.c: 240: stack.pendingPacketToSend = ipPacket;
 10303                           
 10304                           ; BSR set to: 1
 10305  0020B0  EE21  F070         	lfsr	2,tcp_sendSYNACK@ipPacket
 10306  0020B4  EE14  F035         	lfsr	1,_stack+53
 10307  0020B8  0E41               	movlw	65
 10308  0020BA                     u12221:
 10309  0020BA  CFDB FFE3          	movff	plusw2,plusw1
 10310  0020BE  06E8               	decf	wreg,f,c
 10311  0020C0  E2FC               	bc	u12221
 10312                           
 10313                           ; BSR set to: 1
 10314                           ;tcp.c: 241: stack.background.fPacketPending = 1u;
 10315  0020C2  0E01               	movlw	1
 10316  0020C4  0104               	movlb	4	; () banked
 10317  0020C6  6F34               	movwf	(_stack+52)& (0+255),b
 10318                           
 10319                           ; BSR set to: 4
 10320  0020C8  0012               	return		;funcret
 10321  0020CA                     __end_of_tcp_sendSYNACK:
 10322                           	opt stack 0
 10323                           tblptru	equ	0xFF8
 10324                           tblptrh	equ	0xFF7
 10325                           tblptrl	equ	0xFF6
 10326                           tablat	equ	0xFF5
 10327                           prodh	equ	0xFF4
 10328                           prodl	equ	0xFF3
 10329                           intcon	equ	0xFF2
 10330                           intcon3	equ	0xFF0
 10331                           indf0	equ	0xFEF
 10332                           postinc0	equ	0xFEE
 10333                           plusw0	equ	0xFEB
 10334                           fsr0h	equ	0xFEA
 10335                           fsr0l	equ	0xFE9
 10336                           wreg	equ	0xFE8
 10337                           indf1	equ	0xFE7
 10338                           postinc1	equ	0xFE6
 10339                           postdec1	equ	0xFE5
 10340                           plusw1	equ	0xFE3
 10341                           fsr1h	equ	0xFE2
 10342                           fsr1l	equ	0xFE1
 10343                           indf2	equ	0xFDF
 10344                           postinc2	equ	0xFDE
 10345                           postdec2	equ	0xFDD
 10346                           plusw2	equ	0xFDB
 10347                           fsr2h	equ	0xFDA
 10348                           fsr2l	equ	0xFD9
 10349                           status	equ	0xFD8
 10350                           
 10351 ;; *************** function _tcp_calculateHeaderChecksum *****************
 10352 ;; Defined at:
 10353 ;;		line 245 in file "src/stack/protocols/tcp.c"
 10354 ;; Parameters:    Size  Location     Type
 10355 ;;  tcpHeader       2    0[BANK0 ] PTR struct tcp_header
 10356 ;;		 -> tcp_sendSYNACK@tcpHeader(21), 
 10357 ;;  ipv4Header     23    2[BANK0 ] struct ipv4_header
 10358 ;; Auto vars:     Size  Location     Type
 10359 ;;  sum             4   46[BANK0 ] unsigned long 
 10360 ;;  carry           1   29[BANK0 ] unsigned char 
 10361 ;; Return value:  Size  Location     Type
 10362 ;;                  3    0[BANK0 ] struct error
 10363 ;; Registers used:
 10364 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10365 ;; Tracked objects:
 10366 ;;		On entry : 0/0
 10367 ;;		On exit  : 0/0
 10368 ;;		Unchanged: 0/0
 10369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10370 ;;      Params:         0      25       0       0       0       0       0       0       0
 10371 ;;      Locals:         0      21       0       0       0       0       0       0       0
 10372 ;;      Temps:          0       4       0       0       0       0       0       0       0
 10373 ;;      Totals:         0      50       0       0       0       0       0       0       0
 10374 ;;Total ram usage:       50 bytes
 10375 ;; Hardware stack levels used:    1
 10376 ;; Hardware stack levels required when called:    4
 10377 ;; This function calls:
 10378 ;;		Nothing
 10379 ;; This function is called by:
 10380 ;;		_tcp_sendSYNACK
 10381 ;; This function uses a non-reentrant model
 10382 ;;
 10383                           
 10384                           	psect	text27
 10385  001482                     __ptext27:
 10386                           	opt stack 0
 10387  001482                     _tcp_calculateHeaderChecksum:
 10388                           	opt stack 20
 10389                           
 10390                           ;tcp.c: 246: uint32_t sum = 0;
 10391                           
 10392                           ; BSR set to: 4
 10393                           ;incstack = 0
 10394  001482  0E00               	movlw	0
 10395  001484  0100               	movlb	0	; () banked
 10396  001486  6F8E               	movwf	tcp_calculateHeaderChecksum@sum& (0+255),b
 10397  001488  0E00               	movlw	0
 10398  00148A  6F8F               	movwf	(tcp_calculateHeaderChecksum@sum+1)& (0+255),b
 10399  00148C  0E00               	movlw	0
 10400  00148E  6F90               	movwf	(tcp_calculateHeaderChecksum@sum+2)& (0+255),b
 10401  001490  0E00               	movlw	0
 10402  001492  6F91               	movwf	(tcp_calculateHeaderChecksum@sum+3)& (0+255),b
 10403                           
 10404                           ; BSR set to: 0
 10405                           ;tcp.c: 248: sum += ((uint16_t) ipv4Header.source.address[0] << 8) | (ipv4Header.source.
      +                          address[1]);
 10406  001494  5172               	movf	(tcp_calculateHeaderChecksum@ipv4Header+16)& (0+255),w,b
 10407  001496  C071  F079         	movff	tcp_calculateHeaderChecksum@ipv4Header+15,??_tcp_calculateHeaderChecksum
 10408  00149A  6B7A               	clrf	(??_tcp_calculateHeaderChecksum+1)& (0+255),b
 10409  00149C  C079  F07A         	movff	??_tcp_calculateHeaderChecksum,??_tcp_calculateHeaderChecksum+1
 10410  0014A0  6B79               	clrf	??_tcp_calculateHeaderChecksum& (0+255),b
 10411  0014A2  1379               	iorwf	??_tcp_calculateHeaderChecksum& (0+255),f,b
 10412  0014A4  0E00               	movlw	0
 10413  0014A6  137A               	iorwf	(??_tcp_calculateHeaderChecksum+1)& (0+255),f,b
 10414  0014A8  5179               	movf	??_tcp_calculateHeaderChecksum& (0+255),w,b
 10415  0014AA  278E               	addwf	tcp_calculateHeaderChecksum@sum& (0+255),f,b
 10416  0014AC  517A               	movf	(??_tcp_calculateHeaderChecksum+1)& (0+255),w,b
 10417  0014AE  238F               	addwfc	(tcp_calculateHeaderChecksum@sum+1)& (0+255),f,b
 10418  0014B0  0E00               	movlw	0
 10419  0014B2  2390               	addwfc	(tcp_calculateHeaderChecksum@sum+2)& (0+255),f,b
 10420  0014B4  0E00               	movlw	0
 10421  0014B6  2391               	addwfc	(tcp_calculateHeaderChecksum@sum+3)& (0+255),f,b
 10422                           
 10423                           ; BSR set to: 0
 10424                           ;tcp.c: 249: sum += ((uint16_t) ipv4Header.source.address[2] << 8) | (ipv4Header.source.
      +                          address[3]);
 10425  0014B8  5174               	movf	(tcp_calculateHeaderChecksum@ipv4Header+18)& (0+255),w,b
 10426  0014BA  C073  F079         	movff	tcp_calculateHeaderChecksum@ipv4Header+17,??_tcp_calculateHeaderChecksum
 10427  0014BE  6B7A               	clrf	(??_tcp_calculateHeaderChecksum+1)& (0+255),b
 10428  0014C0  C079  F07A         	movff	??_tcp_calculateHeaderChecksum,??_tcp_calculateHeaderChecksum+1
 10429  0014C4  6B79               	clrf	??_tcp_calculateHeaderChecksum& (0+255),b
 10430  0014C6  1379               	iorwf	??_tcp_calculateHeaderChecksum& (0+255),f,b
 10431  0014C8  0E00               	movlw	0
 10432  0014CA  137A               	iorwf	(??_tcp_calculateHeaderChecksum+1)& (0+255),f,b
 10433  0014CC  5179               	movf	??_tcp_calculateHeaderChecksum& (0+255),w,b
 10434  0014CE  278E               	addwf	tcp_calculateHeaderChecksum@sum& (0+255),f,b
 10435  0014D0  517A               	movf	(??_tcp_calculateHeaderChecksum+1)& (0+255),w,b
 10436  0014D2  238F               	addwfc	(tcp_calculateHeaderChecksum@sum+1)& (0+255),f,b
 10437  0014D4  0E00               	movlw	0
 10438  0014D6  2390               	addwfc	(tcp_calculateHeaderChecksum@sum+2)& (0+255),f,b
 10439  0014D8  0E00               	movlw	0
 10440  0014DA  2391               	addwfc	(tcp_calculateHeaderChecksum@sum+3)& (0+255),f,b
 10441                           
 10442                           ; BSR set to: 0
 10443                           ;tcp.c: 250: sum += ((uint16_t) ipv4Header.destination.address[0] << 8) | (ipv4Header.de
      +                          stination.address[1]);
 10444  0014DC  5176               	movf	(tcp_calculateHeaderChecksum@ipv4Header+20)& (0+255),w,b
 10445  0014DE  C075  F079         	movff	tcp_calculateHeaderChecksum@ipv4Header+19,??_tcp_calculateHeaderChecksum
 10446  0014E2  6B7A               	clrf	(??_tcp_calculateHeaderChecksum+1)& (0+255),b
 10447  0014E4  C079  F07A         	movff	??_tcp_calculateHeaderChecksum,??_tcp_calculateHeaderChecksum+1
 10448  0014E8  6B79               	clrf	??_tcp_calculateHeaderChecksum& (0+255),b
 10449  0014EA  1379               	iorwf	??_tcp_calculateHeaderChecksum& (0+255),f,b
 10450  0014EC  0E00               	movlw	0
 10451  0014EE  137A               	iorwf	(??_tcp_calculateHeaderChecksum+1)& (0+255),f,b
 10452  0014F0  5179               	movf	??_tcp_calculateHeaderChecksum& (0+255),w,b
 10453  0014F2  278E               	addwf	tcp_calculateHeaderChecksum@sum& (0+255),f,b
 10454  0014F4  517A               	movf	(??_tcp_calculateHeaderChecksum+1)& (0+255),w,b
 10455  0014F6  238F               	addwfc	(tcp_calculateHeaderChecksum@sum+1)& (0+255),f,b
 10456  0014F8  0E00               	movlw	0
 10457  0014FA  2390               	addwfc	(tcp_calculateHeaderChecksum@sum+2)& (0+255),f,b
 10458  0014FC  0E00               	movlw	0
 10459  0014FE  2391               	addwfc	(tcp_calculateHeaderChecksum@sum+3)& (0+255),f,b
 10460                           
 10461                           ; BSR set to: 0
 10462                           ;tcp.c: 251: sum += ((uint16_t) ipv4Header.destination.address[2] << 8) | (ipv4Header.de
      +                          stination.address[3]);
 10463  001500  5178               	movf	(tcp_calculateHeaderChecksum@ipv4Header+22)& (0+255),w,b
 10464  001502  C077  F079         	movff	tcp_calculateHeaderChecksum@ipv4Header+21,??_tcp_calculateHeaderChecksum
 10465  001506  6B7A               	clrf	(??_tcp_calculateHeaderChecksum+1)& (0+255),b
 10466  001508  C079  F07A         	movff	??_tcp_calculateHeaderChecksum,??_tcp_calculateHeaderChecksum+1
 10467  00150C  6B79               	clrf	??_tcp_calculateHeaderChecksum& (0+255),b
 10468  00150E  1379               	iorwf	??_tcp_calculateHeaderChecksum& (0+255),f,b
 10469  001510  0E00               	movlw	0
 10470  001512  137A               	iorwf	(??_tcp_calculateHeaderChecksum+1)& (0+255),f,b
 10471  001514  5179               	movf	??_tcp_calculateHeaderChecksum& (0+255),w,b
 10472  001516  278E               	addwf	tcp_calculateHeaderChecksum@sum& (0+255),f,b
 10473  001518  517A               	movf	(??_tcp_calculateHeaderChecksum+1)& (0+255),w,b
 10474  00151A  238F               	addwfc	(tcp_calculateHeaderChecksum@sum+1)& (0+255),f,b
 10475  00151C  0E00               	movlw	0
 10476  00151E  2390               	addwfc	(tcp_calculateHeaderChecksum@sum+2)& (0+255),f,b
 10477  001520  0E00               	movlw	0
 10478  001522  2391               	addwfc	(tcp_calculateHeaderChecksum@sum+3)& (0+255),f,b
 10479                           
 10480                           ; BSR set to: 0
 10481                           ;tcp.c: 252: sum += ipv4Header.protocol;
 10482  001524  516E               	movf	(tcp_calculateHeaderChecksum@ipv4Header+12)& (0+255),w,b
 10483  001526  278E               	addwf	tcp_calculateHeaderChecksum@sum& (0+255),f,b
 10484  001528  0E00               	movlw	0
 10485  00152A  238F               	addwfc	(tcp_calculateHeaderChecksum@sum+1)& (0+255),f,b
 10486  00152C  2390               	addwfc	(tcp_calculateHeaderChecksum@sum+2)& (0+255),f,b
 10487  00152E  2391               	addwfc	(tcp_calculateHeaderChecksum@sum+3)& (0+255),f,b
 10488                           
 10489                           ; BSR set to: 0
 10490                           ;tcp.c: 253: sum += 20;
 10491  001530  0E14               	movlw	20
 10492  001532  278E               	addwf	tcp_calculateHeaderChecksum@sum& (0+255),f,b
 10493  001534  0E00               	movlw	0
 10494  001536  238F               	addwfc	(tcp_calculateHeaderChecksum@sum+1)& (0+255),f,b
 10495  001538  2390               	addwfc	(tcp_calculateHeaderChecksum@sum+2)& (0+255),f,b
 10496  00153A  2391               	addwfc	(tcp_calculateHeaderChecksum@sum+3)& (0+255),f,b
 10497                           
 10498                           ; BSR set to: 0
 10499                           ;tcp.c: 256: sum += (tcpHeader->srcPort);
 10500  00153C  C060  FFD9         	movff	tcp_calculateHeaderChecksum@tcpHeader,fsr2l
 10501  001540  C061  FFDA         	movff	tcp_calculateHeaderChecksum@tcpHeader+1,fsr2h
 10502  001544  CFDE F079          	movff	postinc2,??_tcp_calculateHeaderChecksum
 10503  001548  CFDD F07A          	movff	postdec2,??_tcp_calculateHeaderChecksum+1
 10504  00154C  5179               	movf	??_tcp_calculateHeaderChecksum& (0+255),w,b
 10505  00154E  278E               	addwf	tcp_calculateHeaderChecksum@sum& (0+255),f,b
 10506  001550  517A               	movf	(??_tcp_calculateHeaderChecksum+1)& (0+255),w,b
 10507  001552  238F               	addwfc	(tcp_calculateHeaderChecksum@sum+1)& (0+255),f,b
 10508  001554  0E00               	movlw	0
 10509  001556  2390               	addwfc	(tcp_calculateHeaderChecksum@sum+2)& (0+255),f,b
 10510  001558  0E00               	movlw	0
 10511  00155A  2391               	addwfc	(tcp_calculateHeaderChecksum@sum+3)& (0+255),f,b
 10512                           
 10513                           ; BSR set to: 0
 10514                           ;tcp.c: 257: sum += (tcpHeader->dstPort);
 10515  00155C  EE20 F002          	lfsr	2,2
 10516  001560  5160               	movf	tcp_calculateHeaderChecksum@tcpHeader& (0+255),w,b
 10517  001562  26D9               	addwf	fsr2l,f,c
 10518  001564  5161               	movf	(tcp_calculateHeaderChecksum@tcpHeader+1)& (0+255),w,b
 10519  001566  22DA               	addwfc	fsr2h,f,c
 10520  001568  CFDE F079          	movff	postinc2,??_tcp_calculateHeaderChecksum
 10521  00156C  CFDD F07A          	movff	postdec2,??_tcp_calculateHeaderChecksum+1
 10522  001570  5179               	movf	??_tcp_calculateHeaderChecksum& (0+255),w,b
 10523  001572  278E               	addwf	tcp_calculateHeaderChecksum@sum& (0+255),f,b
 10524  001574  517A               	movf	(??_tcp_calculateHeaderChecksum+1)& (0+255),w,b
 10525  001576  238F               	addwfc	(tcp_calculateHeaderChecksum@sum+1)& (0+255),f,b
 10526  001578  0E00               	movlw	0
 10527  00157A  2390               	addwfc	(tcp_calculateHeaderChecksum@sum+2)& (0+255),f,b
 10528  00157C  0E00               	movlw	0
 10529  00157E  2391               	addwfc	(tcp_calculateHeaderChecksum@sum+3)& (0+255),f,b
 10530                           
 10531                           ; BSR set to: 0
 10532                           ;tcp.c: 258: sum += (tcpHeader->seqNumber)&0x0000ffff;
 10533  001580  EE20 F004          	lfsr	2,4
 10534  001584  5160               	movf	tcp_calculateHeaderChecksum@tcpHeader& (0+255),w,b
 10535  001586  26D9               	addwf	fsr2l,f,c
 10536  001588  5161               	movf	(tcp_calculateHeaderChecksum@tcpHeader+1)& (0+255),w,b
 10537  00158A  22DA               	addwfc	fsr2h,f,c
 10538  00158C  0EFF               	movlw	255
 10539  00158E  14DE               	andwf	postinc2,w,c
 10540  001590  6F79               	movwf	??_tcp_calculateHeaderChecksum& (0+255),b
 10541  001592  0EFF               	movlw	255
 10542  001594  14DE               	andwf	postinc2,w,c
 10543  001596  6F7A               	movwf	(??_tcp_calculateHeaderChecksum+1)& (0+255),b
 10544  001598  0E00               	movlw	0
 10545  00159A  14DE               	andwf	postinc2,w,c
 10546  00159C  6F7B               	movwf	(??_tcp_calculateHeaderChecksum+2)& (0+255),b
 10547  00159E  0E00               	movlw	0
 10548  0015A0  14DE               	andwf	postinc2,w,c
 10549  0015A2  6F7C               	movwf	(??_tcp_calculateHeaderChecksum+3)& (0+255),b
 10550  0015A4  5179               	movf	??_tcp_calculateHeaderChecksum& (0+255),w,b
 10551  0015A6  278E               	addwf	tcp_calculateHeaderChecksum@sum& (0+255),f,b
 10552  0015A8  517A               	movf	(??_tcp_calculateHeaderChecksum+1)& (0+255),w,b
 10553  0015AA  238F               	addwfc	(tcp_calculateHeaderChecksum@sum+1)& (0+255),f,b
 10554  0015AC  517B               	movf	(??_tcp_calculateHeaderChecksum+2)& (0+255),w,b
 10555  0015AE  2390               	addwfc	(tcp_calculateHeaderChecksum@sum+2)& (0+255),f,b
 10556  0015B0  517C               	movf	(??_tcp_calculateHeaderChecksum+3)& (0+255),w,b
 10557  0015B2  2391               	addwfc	(tcp_calculateHeaderChecksum@sum+3)& (0+255),f,b
 10558                           
 10559                           ; BSR set to: 0
 10560                           ;tcp.c: 259: sum += (uint16_t) (((tcpHeader->seqNumber)&0xffff0000) >> 16);
 10561  0015B4  EE20 F004          	lfsr	2,4
 10562  0015B8  5160               	movf	tcp_calculateHeaderChecksum@tcpHeader& (0+255),w,b
 10563  0015BA  26D9               	addwf	fsr2l,f,c
 10564  0015BC  5161               	movf	(tcp_calculateHeaderChecksum@tcpHeader+1)& (0+255),w,b
 10565  0015BE  22DA               	addwfc	fsr2h,f,c
 10566  0015C0  0E00               	movlw	0
 10567  0015C2  14DE               	andwf	postinc2,w,c
 10568  0015C4  6F79               	movwf	??_tcp_calculateHeaderChecksum& (0+255),b
 10569  0015C6  0E00               	movlw	0
 10570  0015C8  14DE               	andwf	postinc2,w,c
 10571  0015CA  6F7A               	movwf	(??_tcp_calculateHeaderChecksum+1)& (0+255),b
 10572  0015CC  0EFF               	movlw	255
 10573  0015CE  14DE               	andwf	postinc2,w,c
 10574  0015D0  6F7B               	movwf	(??_tcp_calculateHeaderChecksum+2)& (0+255),b
 10575  0015D2  0EFF               	movlw	255
 10576  0015D4  14DE               	andwf	postinc2,w,c
 10577  0015D6  6F7C               	movwf	(??_tcp_calculateHeaderChecksum+3)& (0+255),b
 10578  0015D8  0E11               	movlw	17
 10579  0015DA  D005               	goto	u11790
 10580  0015DC                     u11795:
 10581  0015DC  90D8               	bcf	status,0,c
 10582  0015DE  337C               	rrcf	(??_tcp_calculateHeaderChecksum+3)& (0+255),f,b
 10583  0015E0  337B               	rrcf	(??_tcp_calculateHeaderChecksum+2)& (0+255),f,b
 10584  0015E2  337A               	rrcf	(??_tcp_calculateHeaderChecksum+1)& (0+255),f,b
 10585  0015E4  3379               	rrcf	??_tcp_calculateHeaderChecksum& (0+255),f,b
 10586  0015E6                     u11790:
 10587  0015E6  2EE8               	decfsz	wreg,f,c
 10588  0015E8  D7F9               	goto	u11795
 10589  0015EA  5179               	movf	??_tcp_calculateHeaderChecksum& (0+255),w,b
 10590  0015EC  278E               	addwf	tcp_calculateHeaderChecksum@sum& (0+255),f,b
 10591  0015EE  517A               	movf	(??_tcp_calculateHeaderChecksum+1)& (0+255),w,b
 10592  0015F0  238F               	addwfc	(tcp_calculateHeaderChecksum@sum+1)& (0+255),f,b
 10593  0015F2  0E00               	movlw	0
 10594  0015F4  2390               	addwfc	(tcp_calculateHeaderChecksum@sum+2)& (0+255),f,b
 10595  0015F6  0E00               	movlw	0
 10596  0015F8  2391               	addwfc	(tcp_calculateHeaderChecksum@sum+3)& (0+255),f,b
 10597                           
 10598                           ; BSR set to: 0
 10599                           ;tcp.c: 260: sum += (tcpHeader->ackNumber)&0x0000ffff;
 10600  0015FA  EE20 F008          	lfsr	2,8
 10601  0015FE  5160               	movf	tcp_calculateHeaderChecksum@tcpHeader& (0+255),w,b
 10602  001600  26D9               	addwf	fsr2l,f,c
 10603  001602  5161               	movf	(tcp_calculateHeaderChecksum@tcpHeader+1)& (0+255),w,b
 10604  001604  22DA               	addwfc	fsr2h,f,c
 10605  001606  0EFF               	movlw	255
 10606  001608  14DE               	andwf	postinc2,w,c
 10607  00160A  6F79               	movwf	??_tcp_calculateHeaderChecksum& (0+255),b
 10608  00160C  0EFF               	movlw	255
 10609  00160E  14DE               	andwf	postinc2,w,c
 10610  001610  6F7A               	movwf	(??_tcp_calculateHeaderChecksum+1)& (0+255),b
 10611  001612  0E00               	movlw	0
 10612  001614  14DE               	andwf	postinc2,w,c
 10613  001616  6F7B               	movwf	(??_tcp_calculateHeaderChecksum+2)& (0+255),b
 10614  001618  0E00               	movlw	0
 10615  00161A  14DE               	andwf	postinc2,w,c
 10616  00161C  6F7C               	movwf	(??_tcp_calculateHeaderChecksum+3)& (0+255),b
 10617  00161E  5179               	movf	??_tcp_calculateHeaderChecksum& (0+255),w,b
 10618  001620  278E               	addwf	tcp_calculateHeaderChecksum@sum& (0+255),f,b
 10619  001622  517A               	movf	(??_tcp_calculateHeaderChecksum+1)& (0+255),w,b
 10620  001624  238F               	addwfc	(tcp_calculateHeaderChecksum@sum+1)& (0+255),f,b
 10621  001626  517B               	movf	(??_tcp_calculateHeaderChecksum+2)& (0+255),w,b
 10622  001628  2390               	addwfc	(tcp_calculateHeaderChecksum@sum+2)& (0+255),f,b
 10623  00162A  517C               	movf	(??_tcp_calculateHeaderChecksum+3)& (0+255),w,b
 10624  00162C  2391               	addwfc	(tcp_calculateHeaderChecksum@sum+3)& (0+255),f,b
 10625                           
 10626                           ; BSR set to: 0
 10627                           ;tcp.c: 261: sum += (uint16_t) (((tcpHeader->ackNumber)&0xffff0000) >> 16);
 10628  00162E  EE20 F008          	lfsr	2,8
 10629  001632  5160               	movf	tcp_calculateHeaderChecksum@tcpHeader& (0+255),w,b
 10630  001634  26D9               	addwf	fsr2l,f,c
 10631  001636  5161               	movf	(tcp_calculateHeaderChecksum@tcpHeader+1)& (0+255),w,b
 10632  001638  22DA               	addwfc	fsr2h,f,c
 10633  00163A  0E00               	movlw	0
 10634  00163C  14DE               	andwf	postinc2,w,c
 10635  00163E  6F79               	movwf	??_tcp_calculateHeaderChecksum& (0+255),b
 10636  001640  0E00               	movlw	0
 10637  001642  14DE               	andwf	postinc2,w,c
 10638  001644  6F7A               	movwf	(??_tcp_calculateHeaderChecksum+1)& (0+255),b
 10639  001646  0EFF               	movlw	255
 10640  001648  14DE               	andwf	postinc2,w,c
 10641  00164A  6F7B               	movwf	(??_tcp_calculateHeaderChecksum+2)& (0+255),b
 10642  00164C  0EFF               	movlw	255
 10643  00164E  14DE               	andwf	postinc2,w,c
 10644  001650  6F7C               	movwf	(??_tcp_calculateHeaderChecksum+3)& (0+255),b
 10645  001652  0E11               	movlw	17
 10646  001654  D005               	goto	u11800
 10647  001656                     u11805:
 10648  001656  90D8               	bcf	status,0,c
 10649  001658  337C               	rrcf	(??_tcp_calculateHeaderChecksum+3)& (0+255),f,b
 10650  00165A  337B               	rrcf	(??_tcp_calculateHeaderChecksum+2)& (0+255),f,b
 10651  00165C  337A               	rrcf	(??_tcp_calculateHeaderChecksum+1)& (0+255),f,b
 10652  00165E  3379               	rrcf	??_tcp_calculateHeaderChecksum& (0+255),f,b
 10653  001660                     u11800:
 10654  001660  2EE8               	decfsz	wreg,f,c
 10655  001662  D7F9               	goto	u11805
 10656  001664  5179               	movf	??_tcp_calculateHeaderChecksum& (0+255),w,b
 10657  001666  278E               	addwf	tcp_calculateHeaderChecksum@sum& (0+255),f,b
 10658  001668  517A               	movf	(??_tcp_calculateHeaderChecksum+1)& (0+255),w,b
 10659  00166A  238F               	addwfc	(tcp_calculateHeaderChecksum@sum+1)& (0+255),f,b
 10660  00166C  0E00               	movlw	0
 10661  00166E  2390               	addwfc	(tcp_calculateHeaderChecksum@sum+2)& (0+255),f,b
 10662  001670  0E00               	movlw	0
 10663  001672  2391               	addwfc	(tcp_calculateHeaderChecksum@sum+3)& (0+255),f,b
 10664                           
 10665                           ; BSR set to: 0
 10666                           ;tcp.c: 262: sum += (((uint16_t) tcpHeader->dataOffset & 0x0f) << 12) |
 10667                           ;tcp.c: 263: (tcpHeader->flags.NS ? 0x100 : 0x00) |
 10668                           ;tcp.c: 264: (tcpHeader->flags.CWR ? 0x80 : 0x00) |
 10669                           ;tcp.c: 265: (tcpHeader->flags.ECE ? 0x40 : 0x00) |
 10670                           ;tcp.c: 266: (tcpHeader->flags.URG ? 0x20 : 0x00) |
 10671                           ;tcp.c: 267: (tcpHeader->flags.ACK ? 0x10 : 0x00) |
 10672                           ;tcp.c: 268: (tcpHeader->flags.PSH ? 0x08 : 0x00) |
 10673                           ;tcp.c: 269: (tcpHeader->flags.RST ? 0x04 : 0x00) |
 10674                           ;tcp.c: 270: (tcpHeader->flags.SYN ? 0x02 : 0x00) |
 10675                           ;tcp.c: 271: (tcpHeader->flags.FIN ? 0x01 : 0x00);
 10676  001674  EE20 F00D          	lfsr	2,13
 10677  001678  5160               	movf	tcp_calculateHeaderChecksum@tcpHeader& (0+255),w,b
 10678  00167A  26D9               	addwf	fsr2l,f,c
 10679  00167C  5161               	movf	(tcp_calculateHeaderChecksum@tcpHeader+1)& (0+255),w,b
 10680  00167E  22DA               	addwfc	fsr2h,f,c
 10681  001680  BEDF               	btfsc	indf2,7,c
 10682  001682  D004               	goto	l1421
 10683                           
 10684                           ; BSR set to: 0
 10685  001684  0E00               	movlw	0
 10686  001686  6F7F               	movwf	(_tcp_calculateHeaderChecksum$4947+1)& (0+255),b
 10687  001688  0E00               	movlw	0
 10688  00168A  D003               	goto	L12
 10689  00168C                     l1421:
 10690                           
 10691                           ; BSR set to: 0
 10692                           
 10693                           ; BSR set to: 0
 10694  00168C  0E00               	movlw	0
 10695  00168E  6F7F               	movwf	(_tcp_calculateHeaderChecksum$4947+1)& (0+255),b
 10696  001690  0E02               	movlw	2
 10697  001692                     L12:
 10698  001692  6F7E               	movwf	_tcp_calculateHeaderChecksum$4947& (0+255),b
 10699                           
 10700                           ; BSR set to: 0
 10701                           
 10702                           ; BSR set to: 0
 10703  001694  EE20 F00D          	lfsr	2,13
 10704  001698  5160               	movf	tcp_calculateHeaderChecksum@tcpHeader& (0+255),w,b
 10705  00169A  26D9               	addwf	fsr2l,f,c
 10706  00169C  5161               	movf	(tcp_calculateHeaderChecksum@tcpHeader+1)& (0+255),w,b
 10707  00169E  22DA               	addwfc	fsr2h,f,c
 10708  0016A0  BCDF               	btfsc	indf2,6,c
 10709  0016A2  D004               	goto	l1425
 10710                           
 10711                           ; BSR set to: 0
 10712  0016A4  0E00               	movlw	0
 10713  0016A6  6F81               	movwf	(_tcp_calculateHeaderChecksum$4948+1)& (0+255),b
 10714  0016A8  0E00               	movlw	0
 10715  0016AA  D003               	goto	L13
 10716  0016AC                     l1425:
 10717                           
 10718                           ; BSR set to: 0
 10719                           
 10720                           ; BSR set to: 0
 10721  0016AC  0E00               	movlw	0
 10722  0016AE  6F81               	movwf	(_tcp_calculateHeaderChecksum$4948+1)& (0+255),b
 10723  0016B0  0E04               	movlw	4
 10724  0016B2                     L13:
 10725  0016B2  6F80               	movwf	_tcp_calculateHeaderChecksum$4948& (0+255),b
 10726                           
 10727                           ; BSR set to: 0
 10728                           
 10729                           ; BSR set to: 0
 10730  0016B4  EE20 F00D          	lfsr	2,13
 10731  0016B8  5160               	movf	tcp_calculateHeaderChecksum@tcpHeader& (0+255),w,b
 10732  0016BA  26D9               	addwf	fsr2l,f,c
 10733  0016BC  5161               	movf	(tcp_calculateHeaderChecksum@tcpHeader+1)& (0+255),w,b
 10734  0016BE  22DA               	addwfc	fsr2h,f,c
 10735  0016C0  BADF               	btfsc	indf2,5,c
 10736  0016C2  D004               	goto	l1429
 10737                           
 10738                           ; BSR set to: 0
 10739  0016C4  0E00               	movlw	0
 10740  0016C6  6F83               	movwf	(_tcp_calculateHeaderChecksum$4949+1)& (0+255),b
 10741  0016C8  0E00               	movlw	0
 10742  0016CA  D003               	goto	L14
 10743  0016CC                     l1429:
 10744                           
 10745                           ; BSR set to: 0
 10746                           
 10747                           ; BSR set to: 0
 10748  0016CC  0E00               	movlw	0
 10749  0016CE  6F83               	movwf	(_tcp_calculateHeaderChecksum$4949+1)& (0+255),b
 10750  0016D0  0E08               	movlw	8
 10751  0016D2                     L14:
 10752  0016D2  6F82               	movwf	_tcp_calculateHeaderChecksum$4949& (0+255),b
 10753                           
 10754                           ; BSR set to: 0
 10755                           
 10756                           ; BSR set to: 0
 10757  0016D4  EE20 F00D          	lfsr	2,13
 10758  0016D8  5160               	movf	tcp_calculateHeaderChecksum@tcpHeader& (0+255),w,b
 10759  0016DA  26D9               	addwf	fsr2l,f,c
 10760  0016DC  5161               	movf	(tcp_calculateHeaderChecksum@tcpHeader+1)& (0+255),w,b
 10761  0016DE  22DA               	addwfc	fsr2h,f,c
 10762  0016E0  B8DF               	btfsc	indf2,4,c
 10763  0016E2  D004               	goto	l1433
 10764                           
 10765                           ; BSR set to: 0
 10766  0016E4  0E00               	movlw	0
 10767  0016E6  6F85               	movwf	(_tcp_calculateHeaderChecksum$4950+1)& (0+255),b
 10768  0016E8  0E00               	movlw	0
 10769  0016EA  D003               	goto	L15
 10770  0016EC                     l1433:
 10771                           
 10772                           ; BSR set to: 0
 10773                           
 10774                           ; BSR set to: 0
 10775  0016EC  0E00               	movlw	0
 10776  0016EE  6F85               	movwf	(_tcp_calculateHeaderChecksum$4950+1)& (0+255),b
 10777  0016F0  0E10               	movlw	16
 10778  0016F2                     L15:
 10779  0016F2  6F84               	movwf	_tcp_calculateHeaderChecksum$4950& (0+255),b
 10780                           
 10781                           ; BSR set to: 0
 10782                           
 10783                           ; BSR set to: 0
 10784  0016F4  EE20 F00D          	lfsr	2,13
 10785  0016F8  5160               	movf	tcp_calculateHeaderChecksum@tcpHeader& (0+255),w,b
 10786  0016FA  26D9               	addwf	fsr2l,f,c
 10787  0016FC  5161               	movf	(tcp_calculateHeaderChecksum@tcpHeader+1)& (0+255),w,b
 10788  0016FE  22DA               	addwfc	fsr2h,f,c
 10789  001700  B6DF               	btfsc	indf2,3,c
 10790  001702  D004               	goto	l1437
 10791                           
 10792                           ; BSR set to: 0
 10793  001704  0E00               	movlw	0
 10794  001706  6F87               	movwf	(_tcp_calculateHeaderChecksum$4951+1)& (0+255),b
 10795  001708  0E00               	movlw	0
 10796  00170A  D003               	goto	L16
 10797  00170C                     l1437:
 10798                           
 10799                           ; BSR set to: 0
 10800                           
 10801                           ; BSR set to: 0
 10802  00170C  0E00               	movlw	0
 10803  00170E  6F87               	movwf	(_tcp_calculateHeaderChecksum$4951+1)& (0+255),b
 10804  001710  0E20               	movlw	32
 10805  001712                     L16:
 10806  001712  6F86               	movwf	_tcp_calculateHeaderChecksum$4951& (0+255),b
 10807                           
 10808                           ; BSR set to: 0
 10809                           
 10810                           ; BSR set to: 0
 10811  001714  EE20 F00D          	lfsr	2,13
 10812  001718  5160               	movf	tcp_calculateHeaderChecksum@tcpHeader& (0+255),w,b
 10813  00171A  26D9               	addwf	fsr2l,f,c
 10814  00171C  5161               	movf	(tcp_calculateHeaderChecksum@tcpHeader+1)& (0+255),w,b
 10815  00171E  22DA               	addwfc	fsr2h,f,c
 10816  001720  B4DF               	btfsc	indf2,2,c
 10817  001722  D004               	goto	l1441
 10818                           
 10819                           ; BSR set to: 0
 10820  001724  0E00               	movlw	0
 10821  001726  6F89               	movwf	(_tcp_calculateHeaderChecksum$4952+1)& (0+255),b
 10822  001728  0E00               	movlw	0
 10823  00172A  D003               	goto	L17
 10824  00172C                     l1441:
 10825                           
 10826                           ; BSR set to: 0
 10827                           
 10828                           ; BSR set to: 0
 10829  00172C  0E00               	movlw	0
 10830  00172E  6F89               	movwf	(_tcp_calculateHeaderChecksum$4952+1)& (0+255),b
 10831  001730  0E40               	movlw	64
 10832  001732                     L17:
 10833  001732  6F88               	movwf	_tcp_calculateHeaderChecksum$4952& (0+255),b
 10834                           
 10835                           ; BSR set to: 0
 10836                           
 10837                           ; BSR set to: 0
 10838  001734  EE20 F00D          	lfsr	2,13
 10839  001738  5160               	movf	tcp_calculateHeaderChecksum@tcpHeader& (0+255),w,b
 10840  00173A  26D9               	addwf	fsr2l,f,c
 10841  00173C  5161               	movf	(tcp_calculateHeaderChecksum@tcpHeader+1)& (0+255),w,b
 10842  00173E  22DA               	addwfc	fsr2h,f,c
 10843  001740  B2DF               	btfsc	indf2,1,c
 10844  001742  D004               	goto	l1445
 10845                           
 10846                           ; BSR set to: 0
 10847  001744  0E00               	movlw	0
 10848  001746  6F8B               	movwf	(_tcp_calculateHeaderChecksum$4953+1)& (0+255),b
 10849  001748  0E00               	movlw	0
 10850  00174A  D003               	goto	L18
 10851  00174C                     l1445:
 10852                           
 10853                           ; BSR set to: 0
 10854                           
 10855                           ; BSR set to: 0
 10856  00174C  0E00               	movlw	0
 10857  00174E  6F8B               	movwf	(_tcp_calculateHeaderChecksum$4953+1)& (0+255),b
 10858  001750  0E80               	movlw	128
 10859  001752                     L18:
 10860  001752  6F8A               	movwf	_tcp_calculateHeaderChecksum$4953& (0+255),b
 10861                           
 10862                           ; BSR set to: 0
 10863                           
 10864                           ; BSR set to: 0
 10865  001754  EE20 F00D          	lfsr	2,13
 10866  001758  5160               	movf	tcp_calculateHeaderChecksum@tcpHeader& (0+255),w,b
 10867  00175A  26D9               	addwf	fsr2l,f,c
 10868  00175C  5161               	movf	(tcp_calculateHeaderChecksum@tcpHeader+1)& (0+255),w,b
 10869  00175E  22DA               	addwfc	fsr2h,f,c
 10870  001760  B0DF               	btfsc	indf2,0,c
 10871  001762  D002               	goto	l1449
 10872                           
 10873                           ; BSR set to: 0
 10874  001764  0E00               	movlw	0
 10875  001766  D001               	goto	L19
 10876  001768                     l1449:
 10877                           
 10878                           ; BSR set to: 0
 10879                           
 10880                           ; BSR set to: 0
 10881  001768  0E01               	movlw	1
 10882  00176A                     L19:
 10883  00176A  6F8D               	movwf	(_tcp_calculateHeaderChecksum$4954+1)& (0+255),b
 10884  00176C  0E00               	movlw	0
 10885  00176E  6F8C               	movwf	_tcp_calculateHeaderChecksum$4954& (0+255),b
 10886                           
 10887                           ; BSR set to: 0
 10888                           
 10889                           ; BSR set to: 0
 10890  001770  EE20 F00C          	lfsr	2,12
 10891  001774  5160               	movf	tcp_calculateHeaderChecksum@tcpHeader& (0+255),w,b
 10892  001776  26D9               	addwf	fsr2l,f,c
 10893  001778  5161               	movf	(tcp_calculateHeaderChecksum@tcpHeader+1)& (0+255),w,b
 10894  00177A  22DA               	addwfc	fsr2h,f,c
 10895  00177C  50DF               	movf	indf2,w,c
 10896  00177E  0B0F               	andlw	15
 10897  001780  6F79               	movwf	??_tcp_calculateHeaderChecksum& (0+255),b
 10898  001782  6B7A               	clrf	(??_tcp_calculateHeaderChecksum+1)& (0+255),b
 10899  001784  0E0C               	movlw	12
 10900  001786                     u11895:
 10901  001786  90D8               	bcf	status,0,c
 10902  001788  3779               	rlcf	??_tcp_calculateHeaderChecksum& (0+255),f,b
 10903  00178A  377A               	rlcf	(??_tcp_calculateHeaderChecksum+1)& (0+255),f,b
 10904  00178C  2EE8               	decfsz	wreg,f,c
 10905  00178E  D7FB               	goto	u11895
 10906  001790  EE20 F00E          	lfsr	2,14
 10907  001794  5160               	movf	tcp_calculateHeaderChecksum@tcpHeader& (0+255),w,b
 10908  001796  26D9               	addwf	fsr2l,f,c
 10909  001798  5161               	movf	(tcp_calculateHeaderChecksum@tcpHeader+1)& (0+255),w,b
 10910  00179A  22DA               	addwfc	fsr2h,f,c
 10911  00179C  A0DF               	btfss	indf2,0,c
 10912  00179E  D003               	goto	u11900
 10913  0017A0  6B7B               	clrf	(??_tcp_calculateHeaderChecksum+2)& (0+255),b
 10914  0017A2  2B7B               	incf	(??_tcp_calculateHeaderChecksum+2)& (0+255),f,b
 10915  0017A4  D002               	goto	u11908
 10916  0017A6                     u11900:
 10917  0017A6  0100               	movlb	0	; () banked
 10918  0017A8  6B7B               	clrf	(??_tcp_calculateHeaderChecksum+2)& (0+255),b
 10919  0017AA                     u11908:
 10920  0017AA  517B               	movf	(??_tcp_calculateHeaderChecksum+2)& (0+255),w,b
 10921  0017AC  1379               	iorwf	??_tcp_calculateHeaderChecksum& (0+255),f,b
 10922  0017AE  0E00               	movlw	0
 10923  0017B0  137A               	iorwf	(??_tcp_calculateHeaderChecksum+1)& (0+255),f,b
 10924  0017B2  518C               	movf	_tcp_calculateHeaderChecksum$4954& (0+255),w,b
 10925  0017B4  1379               	iorwf	??_tcp_calculateHeaderChecksum& (0+255),f,b
 10926  0017B6  518D               	movf	(_tcp_calculateHeaderChecksum$4954+1)& (0+255),w,b
 10927  0017B8  137A               	iorwf	(??_tcp_calculateHeaderChecksum+1)& (0+255),f,b
 10928  0017BA  518A               	movf	_tcp_calculateHeaderChecksum$4953& (0+255),w,b
 10929  0017BC  1379               	iorwf	??_tcp_calculateHeaderChecksum& (0+255),f,b
 10930  0017BE  518B               	movf	(_tcp_calculateHeaderChecksum$4953+1)& (0+255),w,b
 10931  0017C0  137A               	iorwf	(??_tcp_calculateHeaderChecksum+1)& (0+255),f,b
 10932  0017C2  5188               	movf	_tcp_calculateHeaderChecksum$4952& (0+255),w,b
 10933  0017C4  1379               	iorwf	??_tcp_calculateHeaderChecksum& (0+255),f,b
 10934  0017C6  5189               	movf	(_tcp_calculateHeaderChecksum$4952+1)& (0+255),w,b
 10935  0017C8  137A               	iorwf	(??_tcp_calculateHeaderChecksum+1)& (0+255),f,b
 10936  0017CA  5186               	movf	_tcp_calculateHeaderChecksum$4951& (0+255),w,b
 10937  0017CC  1379               	iorwf	??_tcp_calculateHeaderChecksum& (0+255),f,b
 10938  0017CE  5187               	movf	(_tcp_calculateHeaderChecksum$4951+1)& (0+255),w,b
 10939  0017D0  137A               	iorwf	(??_tcp_calculateHeaderChecksum+1)& (0+255),f,b
 10940  0017D2  5184               	movf	_tcp_calculateHeaderChecksum$4950& (0+255),w,b
 10941  0017D4  1379               	iorwf	??_tcp_calculateHeaderChecksum& (0+255),f,b
 10942  0017D6  5185               	movf	(_tcp_calculateHeaderChecksum$4950+1)& (0+255),w,b
 10943  0017D8  137A               	iorwf	(??_tcp_calculateHeaderChecksum+1)& (0+255),f,b
 10944  0017DA  5182               	movf	_tcp_calculateHeaderChecksum$4949& (0+255),w,b
 10945  0017DC  1379               	iorwf	??_tcp_calculateHeaderChecksum& (0+255),f,b
 10946  0017DE  5183               	movf	(_tcp_calculateHeaderChecksum$4949+1)& (0+255),w,b
 10947  0017E0  137A               	iorwf	(??_tcp_calculateHeaderChecksum+1)& (0+255),f,b
 10948  0017E2  5180               	movf	_tcp_calculateHeaderChecksum$4948& (0+255),w,b
 10949  0017E4  1379               	iorwf	??_tcp_calculateHeaderChecksum& (0+255),f,b
 10950  0017E6  5181               	movf	(_tcp_calculateHeaderChecksum$4948+1)& (0+255),w,b
 10951  0017E8  137A               	iorwf	(??_tcp_calculateHeaderChecksum+1)& (0+255),f,b
 10952  0017EA  517E               	movf	_tcp_calculateHeaderChecksum$4947& (0+255),w,b
 10953  0017EC  1379               	iorwf	??_tcp_calculateHeaderChecksum& (0+255),f,b
 10954  0017EE  517F               	movf	(_tcp_calculateHeaderChecksum$4947+1)& (0+255),w,b
 10955  0017F0  137A               	iorwf	(??_tcp_calculateHeaderChecksum+1)& (0+255),f,b
 10956  0017F2  5179               	movf	??_tcp_calculateHeaderChecksum& (0+255),w,b
 10957  0017F4  278E               	addwf	tcp_calculateHeaderChecksum@sum& (0+255),f,b
 10958  0017F6  517A               	movf	(??_tcp_calculateHeaderChecksum+1)& (0+255),w,b
 10959  0017F8  238F               	addwfc	(tcp_calculateHeaderChecksum@sum+1)& (0+255),f,b
 10960  0017FA  0E00               	movlw	0
 10961  0017FC  2390               	addwfc	(tcp_calculateHeaderChecksum@sum+2)& (0+255),f,b
 10962  0017FE  0E00               	movlw	0
 10963  001800  2391               	addwfc	(tcp_calculateHeaderChecksum@sum+3)& (0+255),f,b
 10964                           
 10965                           ; BSR set to: 0
 10966                           ;tcp.c: 272: sum += (tcpHeader->windowSize);
 10967  001802  EE20 F00F          	lfsr	2,15
 10968  001806  5160               	movf	tcp_calculateHeaderChecksum@tcpHeader& (0+255),w,b
 10969  001808  26D9               	addwf	fsr2l,f,c
 10970  00180A  5161               	movf	(tcp_calculateHeaderChecksum@tcpHeader+1)& (0+255),w,b
 10971  00180C  22DA               	addwfc	fsr2h,f,c
 10972  00180E  CFDE F079          	movff	postinc2,??_tcp_calculateHeaderChecksum
 10973  001812  CFDD F07A          	movff	postdec2,??_tcp_calculateHeaderChecksum+1
 10974  001816  5179               	movf	??_tcp_calculateHeaderChecksum& (0+255),w,b
 10975  001818  278E               	addwf	tcp_calculateHeaderChecksum@sum& (0+255),f,b
 10976  00181A  517A               	movf	(??_tcp_calculateHeaderChecksum+1)& (0+255),w,b
 10977  00181C  238F               	addwfc	(tcp_calculateHeaderChecksum@sum+1)& (0+255),f,b
 10978  00181E  0E00               	movlw	0
 10979  001820  2390               	addwfc	(tcp_calculateHeaderChecksum@sum+2)& (0+255),f,b
 10980  001822  0E00               	movlw	0
 10981  001824  2391               	addwfc	(tcp_calculateHeaderChecksum@sum+3)& (0+255),f,b
 10982                           
 10983                           ; BSR set to: 0
 10984                           ;tcp.c: 273: sum += (tcpHeader->urgentPointer);
 10985  001826  EE20 F013          	lfsr	2,19
 10986  00182A  5160               	movf	tcp_calculateHeaderChecksum@tcpHeader& (0+255),w,b
 10987  00182C  26D9               	addwf	fsr2l,f,c
 10988  00182E  5161               	movf	(tcp_calculateHeaderChecksum@tcpHeader+1)& (0+255),w,b
 10989  001830  22DA               	addwfc	fsr2h,f,c
 10990  001832  CFDE F079          	movff	postinc2,??_tcp_calculateHeaderChecksum
 10991  001836  CFDD F07A          	movff	postdec2,??_tcp_calculateHeaderChecksum+1
 10992  00183A  5179               	movf	??_tcp_calculateHeaderChecksum& (0+255),w,b
 10993  00183C  278E               	addwf	tcp_calculateHeaderChecksum@sum& (0+255),f,b
 10994  00183E  517A               	movf	(??_tcp_calculateHeaderChecksum+1)& (0+255),w,b
 10995  001840  238F               	addwfc	(tcp_calculateHeaderChecksum@sum+1)& (0+255),f,b
 10996  001842  0E00               	movlw	0
 10997  001844  2390               	addwfc	(tcp_calculateHeaderChecksum@sum+2)& (0+255),f,b
 10998  001846  0E00               	movlw	0
 10999  001848  2391               	addwfc	(tcp_calculateHeaderChecksum@sum+3)& (0+255),f,b
 11000                           
 11001                           ; BSR set to: 0
 11002                           ;tcp.c: 276: uint8_t carry = (sum & 0xffff0000) >> 16;
 11003  00184A  0E00               	movlw	0
 11004  00184C  158E               	andwf	tcp_calculateHeaderChecksum@sum& (0+255),w,b
 11005  00184E  6F79               	movwf	??_tcp_calculateHeaderChecksum& (0+255),b
 11006  001850  0E00               	movlw	0
 11007  001852  158F               	andwf	(tcp_calculateHeaderChecksum@sum+1)& (0+255),w,b
 11008  001854  6F7A               	movwf	(??_tcp_calculateHeaderChecksum+1)& (0+255),b
 11009  001856  0EFF               	movlw	255
 11010  001858  1590               	andwf	(tcp_calculateHeaderChecksum@sum+2)& (0+255),w,b
 11011  00185A  6F7B               	movwf	(??_tcp_calculateHeaderChecksum+2)& (0+255),b
 11012  00185C  0EFF               	movlw	255
 11013  00185E  1591               	andwf	(tcp_calculateHeaderChecksum@sum+3)& (0+255),w,b
 11014  001860  6F7C               	movwf	(??_tcp_calculateHeaderChecksum+3)& (0+255),b
 11015  001862  0E11               	movlw	17
 11016  001864  D005               	goto	u11910
 11017  001866                     u11915:
 11018  001866  90D8               	bcf	status,0,c
 11019  001868  337C               	rrcf	(??_tcp_calculateHeaderChecksum+3)& (0+255),f,b
 11020  00186A  337B               	rrcf	(??_tcp_calculateHeaderChecksum+2)& (0+255),f,b
 11021  00186C  337A               	rrcf	(??_tcp_calculateHeaderChecksum+1)& (0+255),f,b
 11022  00186E  3379               	rrcf	??_tcp_calculateHeaderChecksum& (0+255),f,b
 11023  001870                     u11910:
 11024  001870  2EE8               	decfsz	wreg,f,c
 11025  001872  D7F9               	goto	u11915
 11026  001874  5179               	movf	??_tcp_calculateHeaderChecksum& (0+255),w,b
 11027  001876  6F7D               	movwf	tcp_calculateHeaderChecksum@carry& (0+255),b
 11028                           
 11029                           ; BSR set to: 0
 11030                           ;tcp.c: 277: sum &= 0xffff;
 11031  001878  0EFF               	movlw	255
 11032  00187A  178E               	andwf	tcp_calculateHeaderChecksum@sum& (0+255),f,b
 11033  00187C  0EFF               	movlw	255
 11034  00187E  178F               	andwf	(tcp_calculateHeaderChecksum@sum+1)& (0+255),f,b
 11035  001880  0E00               	movlw	0
 11036  001882  1790               	andwf	(tcp_calculateHeaderChecksum@sum+2)& (0+255),f,b
 11037  001884  0E00               	movlw	0
 11038  001886  1791               	andwf	(tcp_calculateHeaderChecksum@sum+3)& (0+255),f,b
 11039                           
 11040                           ; BSR set to: 0
 11041                           ;tcp.c: 278: sum += carry;
 11042  001888  517D               	movf	tcp_calculateHeaderChecksum@carry& (0+255),w,b
 11043  00188A  278E               	addwf	tcp_calculateHeaderChecksum@sum& (0+255),f,b
 11044  00188C  0E00               	movlw	0
 11045  00188E  238F               	addwfc	(tcp_calculateHeaderChecksum@sum+1)& (0+255),f,b
 11046  001890  2390               	addwfc	(tcp_calculateHeaderChecksum@sum+2)& (0+255),f,b
 11047  001892  2391               	addwfc	(tcp_calculateHeaderChecksum@sum+3)& (0+255),f,b
 11048                           
 11049                           ; BSR set to: 0
 11050                           ;tcp.c: 279: if (sum > 0xffff) {
 11051  001894  5191               	movf	(tcp_calculateHeaderChecksum@sum+3)& (0+255),w,b
 11052  001896  E103               	bnz	u11920
 11053  001898  0590               	decf	(tcp_calculateHeaderChecksum@sum+2)& (0+255),w,b
 11054  00189A  A0D8               	btfss	status,0,c
 11055  00189C  D025               	goto	l1452
 11056  00189E                     u11920:
 11057                           
 11058                           ; BSR set to: 0
 11059                           ;tcp.c: 280: sum += ((sum & 0xffff0000) >> 16);
 11060  00189E  0E00               	movlw	0
 11061  0018A0  158E               	andwf	tcp_calculateHeaderChecksum@sum& (0+255),w,b
 11062  0018A2  6F79               	movwf	??_tcp_calculateHeaderChecksum& (0+255),b
 11063  0018A4  0E00               	movlw	0
 11064  0018A6  158F               	andwf	(tcp_calculateHeaderChecksum@sum+1)& (0+255),w,b
 11065  0018A8  6F7A               	movwf	(??_tcp_calculateHeaderChecksum+1)& (0+255),b
 11066  0018AA  0EFF               	movlw	255
 11067  0018AC  1590               	andwf	(tcp_calculateHeaderChecksum@sum+2)& (0+255),w,b
 11068  0018AE  6F7B               	movwf	(??_tcp_calculateHeaderChecksum+2)& (0+255),b
 11069  0018B0  0EFF               	movlw	255
 11070  0018B2  1591               	andwf	(tcp_calculateHeaderChecksum@sum+3)& (0+255),w,b
 11071  0018B4  6F7C               	movwf	(??_tcp_calculateHeaderChecksum+3)& (0+255),b
 11072  0018B6  0E11               	movlw	17
 11073  0018B8  D005               	goto	u11930
 11074  0018BA                     u11935:
 11075  0018BA  90D8               	bcf	status,0,c
 11076  0018BC  337C               	rrcf	(??_tcp_calculateHeaderChecksum+3)& (0+255),f,b
 11077  0018BE  337B               	rrcf	(??_tcp_calculateHeaderChecksum+2)& (0+255),f,b
 11078  0018C0  337A               	rrcf	(??_tcp_calculateHeaderChecksum+1)& (0+255),f,b
 11079  0018C2  3379               	rrcf	??_tcp_calculateHeaderChecksum& (0+255),f,b
 11080  0018C4                     u11930:
 11081  0018C4  2EE8               	decfsz	wreg,f,c
 11082  0018C6  D7F9               	goto	u11935
 11083  0018C8  5179               	movf	??_tcp_calculateHeaderChecksum& (0+255),w,b
 11084  0018CA  278E               	addwf	tcp_calculateHeaderChecksum@sum& (0+255),f,b
 11085  0018CC  517A               	movf	(??_tcp_calculateHeaderChecksum+1)& (0+255),w,b
 11086  0018CE  238F               	addwfc	(tcp_calculateHeaderChecksum@sum+1)& (0+255),f,b
 11087  0018D0  517B               	movf	(??_tcp_calculateHeaderChecksum+2)& (0+255),w,b
 11088  0018D2  2390               	addwfc	(tcp_calculateHeaderChecksum@sum+2)& (0+255),f,b
 11089  0018D4  517C               	movf	(??_tcp_calculateHeaderChecksum+3)& (0+255),w,b
 11090  0018D6  2391               	addwfc	(tcp_calculateHeaderChecksum@sum+3)& (0+255),f,b
 11091                           
 11092                           ;tcp.c: 281: sum &= 0xffff;
 11093  0018D8  0EFF               	movlw	255
 11094  0018DA  178E               	andwf	tcp_calculateHeaderChecksum@sum& (0+255),f,b
 11095  0018DC  0EFF               	movlw	255
 11096  0018DE  178F               	andwf	(tcp_calculateHeaderChecksum@sum+1)& (0+255),f,b
 11097  0018E0  0E00               	movlw	0
 11098  0018E2  1790               	andwf	(tcp_calculateHeaderChecksum@sum+2)& (0+255),f,b
 11099  0018E4  0E00               	movlw	0
 11100  0018E6  1791               	andwf	(tcp_calculateHeaderChecksum@sum+3)& (0+255),f,b
 11101  0018E8                     l1452:
 11102                           
 11103                           ; BSR set to: 0
 11104                           ;tcp.c: 282: }
 11105                           ;tcp.c: 284: tcpHeader->checksum = ~sum;
 11106                           
 11107                           ; BSR set to: 0
 11108  0018E8  1D8E               	comf	tcp_calculateHeaderChecksum@sum& (0+255),w,b
 11109  0018EA  6F79               	movwf	??_tcp_calculateHeaderChecksum& (0+255),b
 11110  0018EC  1D8F               	comf	(tcp_calculateHeaderChecksum@sum+1)& (0+255),w,b
 11111  0018EE  6F7A               	movwf	(??_tcp_calculateHeaderChecksum+1)& (0+255),b
 11112  0018F0  EE20 F011          	lfsr	2,17
 11113  0018F4  5160               	movf	tcp_calculateHeaderChecksum@tcpHeader& (0+255),w,b
 11114  0018F6  26D9               	addwf	fsr2l,f,c
 11115  0018F8  5161               	movf	(tcp_calculateHeaderChecksum@tcpHeader+1)& (0+255),w,b
 11116  0018FA  22DA               	addwfc	fsr2h,f,c
 11117  0018FC  C079  FFDE         	movff	??_tcp_calculateHeaderChecksum,postinc2
 11118  001900  C07A  FFDD         	movff	??_tcp_calculateHeaderChecksum+1,postdec2
 11119                           
 11120                           ; BSR set to: 0
 11121  001904  0012               	return		;funcret
 11122  001906                     __end_of_tcp_calculateHeaderChecksum:
 11123                           	opt stack 0
 11124                           tblptru	equ	0xFF8
 11125                           tblptrh	equ	0xFF7
 11126                           tblptrl	equ	0xFF6
 11127                           tablat	equ	0xFF5
 11128                           prodh	equ	0xFF4
 11129                           prodl	equ	0xFF3
 11130                           intcon	equ	0xFF2
 11131                           intcon3	equ	0xFF0
 11132                           indf0	equ	0xFEF
 11133                           postinc0	equ	0xFEE
 11134                           plusw0	equ	0xFEB
 11135                           fsr0h	equ	0xFEA
 11136                           fsr0l	equ	0xFE9
 11137                           wreg	equ	0xFE8
 11138                           indf1	equ	0xFE7
 11139                           postinc1	equ	0xFE6
 11140                           postdec1	equ	0xFE5
 11141                           plusw1	equ	0xFE3
 11142                           fsr1h	equ	0xFE2
 11143                           fsr1l	equ	0xFE1
 11144                           indf2	equ	0xFDF
 11145                           postinc2	equ	0xFDE
 11146                           postdec2	equ	0xFDD
 11147                           plusw2	equ	0xFDB
 11148                           fsr2h	equ	0xFDA
 11149                           fsr2l	equ	0xFD9
 11150                           status	equ	0xFD8
 11151                           
 11152 ;; *************** function _intToString *****************
 11153 ;; Defined at:
 11154 ;;		line 82 in file "src/system/uart.c"
 11155 ;; Parameters:    Size  Location     Type
 11156 ;;  val             4   36[BANK0 ] unsigned long 
 11157 ;;  b               1   40[BANK0 ] unsigned char 
 11158 ;; Auto vars:     Size  Location     Type
 11159 ;;		None
 11160 ;; Return value:  Size  Location     Type
 11161 ;;                  2   36[BANK0 ] PTR unsigned char 
 11162 ;; Registers used:
 11163 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11164 ;; Tracked objects:
 11165 ;;		On entry : 0/0
 11166 ;;		On exit  : 0/0
 11167 ;;		Unchanged: 0/0
 11168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11169 ;;      Params:         0       5       0       0       0       0       0       0       0
 11170 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11171 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11172 ;;      Totals:         0       5       0       0       0       0       0       0       0
 11173 ;;Total ram usage:        5 bytes
 11174 ;; Hardware stack levels used:    1
 11175 ;; Hardware stack levels required when called:    7
 11176 ;; This function calls:
 11177 ;;		_ltoa
 11178 ;; This function is called by:
 11179 ;;		_ethernet_rxGetNewFrame
 11180 ;;		_handleStackBackgroundTasks
 11181 ;;		_tcp_handleNewPacket
 11182 ;;		_tcp_listen
 11183 ;;		_tcp_sendSYNACK
 11184 ;;		_arpEntryToString
 11185 ;; This function uses a non-reentrant model
 11186 ;;
 11187                           
 11188                           	psect	text28
 11189  006A1A                     __ptext28:
 11190                           	opt stack 0
 11191  006A1A                     _intToString:
 11192                           	opt stack 22
 11193                           
 11194                           ;uart.c: 83: char static number [10];
 11195                           ;uart.c: 84: ltoa(&number[0], (long) val, b);
 11196                           
 11197                           ; BSR set to: 0
 11198                           ;incstack = 0
 11199  006A1A  0EC1               	movlw	low intToString@number
 11200  006A1C  0100               	movlb	0	; () banked
 11201  006A1E  6F7A               	movwf	ltoa@buf& (0+255),b
 11202  006A20  0E03               	movlw	high intToString@number
 11203  006A22  6F7B               	movwf	(ltoa@buf+1)& (0+255),b
 11204  006A24  C084  F07C         	movff	intToString@val,ltoa@val
 11205  006A28  C085  F07D         	movff	intToString@val+1,ltoa@val+1
 11206  006A2C  C086  F07E         	movff	intToString@val+2,ltoa@val+2
 11207  006A30  C087  F07F         	movff	intToString@val+3,ltoa@val+3
 11208  006A34  C088  F080         	movff	intToString@b,ltoa@base
 11209  006A38  6B81               	clrf	(ltoa@base+1)& (0+255),b
 11210  006A3A  EC8B  F032         	call	_ltoa	;wreg free
 11211                           
 11212                           ;uart.c: 88: return number;
 11213  006A3E  0EC1               	movlw	low intToString@number
 11214  006A40  0100               	movlb	0	; () banked
 11215  006A42  6F84               	movwf	?_intToString& (0+255),b
 11216  006A44  0E03               	movlw	high intToString@number
 11217  006A46  6F85               	movwf	(?_intToString+1)& (0+255),b
 11218  006A48  0012               	return	
 11219  006A4A                     __end_of_intToString:
 11220                           	opt stack 0
 11221                           tblptru	equ	0xFF8
 11222                           tblptrh	equ	0xFF7
 11223                           tblptrl	equ	0xFF6
 11224                           tablat	equ	0xFF5
 11225                           prodh	equ	0xFF4
 11226                           prodl	equ	0xFF3
 11227                           intcon	equ	0xFF2
 11228                           intcon3	equ	0xFF0
 11229                           indf0	equ	0xFEF
 11230                           postinc0	equ	0xFEE
 11231                           plusw0	equ	0xFEB
 11232                           fsr0h	equ	0xFEA
 11233                           fsr0l	equ	0xFE9
 11234                           wreg	equ	0xFE8
 11235                           indf1	equ	0xFE7
 11236                           postinc1	equ	0xFE6
 11237                           postdec1	equ	0xFE5
 11238                           plusw1	equ	0xFE3
 11239                           fsr1h	equ	0xFE2
 11240                           fsr1l	equ	0xFE1
 11241                           indf2	equ	0xFDF
 11242                           postinc2	equ	0xFDE
 11243                           postdec2	equ	0xFDD
 11244                           plusw2	equ	0xFDB
 11245                           fsr2h	equ	0xFDA
 11246                           fsr2l	equ	0xFD9
 11247                           status	equ	0xFD8
 11248                           
 11249 ;; *************** function _ltoa *****************
 11250 ;; Defined at:
 11251 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ltoa.c"
 11252 ;; Parameters:    Size  Location     Type
 11253 ;;  buf             2   26[BANK0 ] PTR unsigned char 
 11254 ;;		 -> intToString@number(10), 
 11255 ;;  val             4   28[BANK0 ] long 
 11256 ;;  base            2   32[BANK0 ] int 
 11257 ;; Auto vars:     Size  Location     Type
 11258 ;;  cp              2   34[BANK0 ] PTR unsigned char 
 11259 ;;		 -> intToString@number(10), 
 11260 ;; Return value:  Size  Location     Type
 11261 ;;                  2   26[BANK0 ] PTR unsigned char 
 11262 ;; Registers used:
 11263 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11264 ;; Tracked objects:
 11265 ;;		On entry : 0/0
 11266 ;;		On exit  : 0/0
 11267 ;;		Unchanged: 0/0
 11268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11269 ;;      Params:         0       8       0       0       0       0       0       0       0
 11270 ;;      Locals:         0       2       0       0       0       0       0       0       0
 11271 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11272 ;;      Totals:         0      10       0       0       0       0       0       0       0
 11273 ;;Total ram usage:       10 bytes
 11274 ;; Hardware stack levels used:    1
 11275 ;; Hardware stack levels required when called:    6
 11276 ;; This function calls:
 11277 ;;		_ultoa
 11278 ;; This function is called by:
 11279 ;;		_intToString
 11280 ;; This function uses a non-reentrant model
 11281 ;;
 11282                           
 11283                           	psect	text29
 11284  006516                     __ptext29:
 11285                           	opt stack 0
 11286  006516                     _ltoa:
 11287                           	opt stack 22
 11288                           
 11289                           ; BSR set to: 0
 11290                           ;incstack = 0
 11291  006516  C07A  F082         	movff	ltoa@buf,ltoa@cp
 11292  00651A  C07B  F083         	movff	ltoa@buf+1,ltoa@cp+1
 11293  00651E  0100               	movlb	0	; () banked
 11294  006520  AF7F               	btfss	(ltoa@val+3)& (0+255),7,b
 11295  006522  D010               	goto	l1902
 11296                           
 11297                           ; BSR set to: 0
 11298  006524  C07A  FFD9         	movff	ltoa@buf,fsr2l
 11299  006528  C07B  FFDA         	movff	ltoa@buf+1,fsr2h
 11300  00652C  0E2D               	movlw	45
 11301  00652E  6EDF               	movwf	indf2,c
 11302                           
 11303                           ; BSR set to: 0
 11304  006530  4B7A               	infsnz	ltoa@buf& (0+255),f,b
 11305  006532  2B7B               	incf	(ltoa@buf+1)& (0+255),f,b
 11306                           
 11307                           ; BSR set to: 0
 11308  006534  1F7F               	comf	(ltoa@val+3)& (0+255),f,b
 11309  006536  1F7E               	comf	(ltoa@val+2)& (0+255),f,b
 11310  006538  1F7D               	comf	(ltoa@val+1)& (0+255),f,b
 11311  00653A  6D7C               	negf	ltoa@val& (0+255),b
 11312  00653C  0E00               	movlw	0
 11313  00653E  237D               	addwfc	(ltoa@val+1)& (0+255),f,b
 11314  006540  237E               	addwfc	(ltoa@val+2)& (0+255),f,b
 11315  006542  237F               	addwfc	(ltoa@val+3)& (0+255),f,b
 11316  006544                     l1902:
 11317                           
 11318                           ; BSR set to: 0
 11319                           
 11320                           ; BSR set to: 0
 11321  006544  C07A  F06D         	movff	ltoa@buf,ultoa@buf
 11322  006548  C07B  F06E         	movff	ltoa@buf+1,ultoa@buf+1
 11323  00654C  C07C  F06F         	movff	ltoa@val,ultoa@val
 11324  006550  C07D  F070         	movff	ltoa@val+1,ultoa@val+1
 11325  006554  C07E  F071         	movff	ltoa@val+2,ultoa@val+2
 11326  006558  C07F  F072         	movff	ltoa@val+3,ultoa@val+3
 11327  00655C  C080  F073         	movff	ltoa@base,ultoa@base
 11328  006560  C081  F074         	movff	ltoa@base+1,ultoa@base+1
 11329  006564  ECCC  F027         	call	_ultoa	;wreg free
 11330  006568  0012               	return	
 11331  00656A                     __end_of_ltoa:
 11332                           	opt stack 0
 11333                           tblptru	equ	0xFF8
 11334                           tblptrh	equ	0xFF7
 11335                           tblptrl	equ	0xFF6
 11336                           tablat	equ	0xFF5
 11337                           prodh	equ	0xFF4
 11338                           prodl	equ	0xFF3
 11339                           intcon	equ	0xFF2
 11340                           intcon3	equ	0xFF0
 11341                           indf0	equ	0xFEF
 11342                           postinc0	equ	0xFEE
 11343                           plusw0	equ	0xFEB
 11344                           fsr0h	equ	0xFEA
 11345                           fsr0l	equ	0xFE9
 11346                           wreg	equ	0xFE8
 11347                           indf1	equ	0xFE7
 11348                           postinc1	equ	0xFE6
 11349                           postdec1	equ	0xFE5
 11350                           plusw1	equ	0xFE3
 11351                           fsr1h	equ	0xFE2
 11352                           fsr1l	equ	0xFE1
 11353                           indf2	equ	0xFDF
 11354                           postinc2	equ	0xFDE
 11355                           postdec2	equ	0xFDD
 11356                           plusw2	equ	0xFDB
 11357                           fsr2h	equ	0xFDA
 11358                           fsr2l	equ	0xFD9
 11359                           status	equ	0xFD8
 11360                           
 11361 ;; *************** function _ultoa *****************
 11362 ;; Defined at:
 11363 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ltoa.c"
 11364 ;; Parameters:    Size  Location     Type
 11365 ;;  buf             2   13[BANK0 ] PTR unsigned char 
 11366 ;;		 -> intToString@number(10), 
 11367 ;;  val             4   15[BANK0 ] unsigned long 
 11368 ;;  base            2   19[BANK0 ] int 
 11369 ;; Auto vars:     Size  Location     Type
 11370 ;;  v               4   21[BANK0 ] unsigned long 
 11371 ;;  c               1   25[BANK0 ] unsigned char 
 11372 ;; Return value:  Size  Location     Type
 11373 ;;                  2   13[BANK0 ] PTR unsigned char 
 11374 ;; Registers used:
 11375 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11376 ;; Tracked objects:
 11377 ;;		On entry : 0/0
 11378 ;;		On exit  : 0/0
 11379 ;;		Unchanged: 0/0
 11380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11381 ;;      Params:         0       8       0       0       0       0       0       0       0
 11382 ;;      Locals:         0       5       0       0       0       0       0       0       0
 11383 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11384 ;;      Totals:         0      13       0       0       0       0       0       0       0
 11385 ;;Total ram usage:       13 bytes
 11386 ;; Hardware stack levels used:    1
 11387 ;; Hardware stack levels required when called:    5
 11388 ;; This function calls:
 11389 ;;		___lldiv
 11390 ;;		___llmod
 11391 ;; This function is called by:
 11392 ;;		_ltoa
 11393 ;; This function uses a non-reentrant model
 11394 ;;
 11395                           
 11396                           	psect	text30
 11397  004F98                     __ptext30:
 11398                           	opt stack 0
 11399  004F98                     _ultoa:
 11400                           	opt stack 22
 11401                           
 11402                           ;incstack = 0
 11403  004F98  C06F  F075         	movff	ultoa@val,ultoa@v
 11404  004F9C  C070  F076         	movff	ultoa@val+1,ultoa@v+1
 11405  004FA0  C071  F077         	movff	ultoa@val+2,ultoa@v+2
 11406  004FA4  C072  F078         	movff	ultoa@val+3,ultoa@v+3
 11407  004FA8  C075  F060         	movff	ultoa@v,___lldiv@dividend
 11408  004FAC  C076  F061         	movff	ultoa@v+1,___lldiv@dividend+1
 11409  004FB0  C077  F062         	movff	ultoa@v+2,___lldiv@dividend+2
 11410  004FB4  C078  F063         	movff	ultoa@v+3,___lldiv@dividend+3
 11411  004FB8  C073  F064         	movff	ultoa@base,___lldiv@divisor
 11412  004FBC  C074  F065         	movff	ultoa@base+1,___lldiv@divisor+1
 11413  004FC0  0100               	movlb	0	; () banked
 11414  004FC2  0E00               	movlw	0
 11415  004FC4  BF65               	btfsc	(___lldiv@divisor+1)& (0+255),7,b
 11416  004FC6  0EFF               	movlw	-1
 11417  004FC8  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
 11418  004FCA  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
 11419  004FCC  EC90  F02E         	call	___lldiv	;wreg free
 11420  004FD0  C060  F075         	movff	?___lldiv,ultoa@v
 11421  004FD4  C061  F076         	movff	?___lldiv+1,ultoa@v+1
 11422  004FD8  C062  F077         	movff	?___lldiv+2,ultoa@v+2
 11423  004FDC  C063  F078         	movff	?___lldiv+3,ultoa@v+3
 11424  004FE0  0100               	movlb	0	; () banked
 11425  004FE2  4B6D               	infsnz	ultoa@buf& (0+255),f,b
 11426  004FE4  2B6E               	incf	(ultoa@buf+1)& (0+255),f,b
 11427                           
 11428                           ; BSR set to: 0
 11429  004FE6  5175               	movf	ultoa@v& (0+255),w,b
 11430  004FE8  1176               	iorwf	(ultoa@v+1)& (0+255),w,b
 11431  004FEA  1177               	iorwf	(ultoa@v+2)& (0+255),w,b
 11432  004FEC  1178               	iorwf	(ultoa@v+3)& (0+255),w,b
 11433  004FEE  A4D8               	btfss	status,2,c
 11434  004FF0  D7DB               	goto	l1906
 11435                           
 11436                           ; BSR set to: 0
 11437                           
 11438                           ; BSR set to: 0
 11439  004FF2  C06D  FFD9         	movff	ultoa@buf,fsr2l
 11440  004FF6  C06E  FFDA         	movff	ultoa@buf+1,fsr2h
 11441  004FFA  0E00               	movlw	0
 11442  004FFC  6EDF               	movwf	indf2,c
 11443                           
 11444                           ; BSR set to: 0
 11445  004FFE  076D               	decf	ultoa@buf& (0+255),f,b
 11446  005000  A0D8               	btfss	status,0,c
 11447  005002  076E               	decf	(ultoa@buf+1)& (0+255),f,b
 11448  005004                     
 11449                           ; BSR set to: 0
 11450                           
 11451                           ; BSR set to: 0
 11452  005004  C06F  F060         	movff	ultoa@val,___llmod@dividend
 11453  005008  C070  F061         	movff	ultoa@val+1,___llmod@dividend+1
 11454  00500C  C071  F062         	movff	ultoa@val+2,___llmod@dividend+2
 11455  005010  C072  F063         	movff	ultoa@val+3,___llmod@dividend+3
 11456  005014  C073  F064         	movff	ultoa@base,___llmod@divisor
 11457  005018  C074  F065         	movff	ultoa@base+1,___llmod@divisor+1
 11458  00501C  0E00               	movlw	0
 11459  00501E  BF65               	btfsc	(___llmod@divisor+1)& (0+255),7,b
 11460  005020  0EFF               	movlw	-1
 11461  005022  6F66               	movwf	(___llmod@divisor+2)& (0+255),b
 11462  005024  6F67               	movwf	(___llmod@divisor+3)& (0+255),b
 11463  005026  EC1C  F031         	call	___llmod	;wreg free
 11464  00502A  0100               	movlb	0	; () banked
 11465  00502C  5160               	movf	?___llmod& (0+255),w,b
 11466  00502E  6F79               	movwf	ultoa@c& (0+255),b
 11467                           
 11468                           ; BSR set to: 0
 11469  005030  C06F  F060         	movff	ultoa@val,___lldiv@dividend
 11470  005034  C070  F061         	movff	ultoa@val+1,___lldiv@dividend+1
 11471  005038  C071  F062         	movff	ultoa@val+2,___lldiv@dividend+2
 11472  00503C  C072  F063         	movff	ultoa@val+3,___lldiv@dividend+3
 11473  005040  C073  F064         	movff	ultoa@base,___lldiv@divisor
 11474  005044  C074  F065         	movff	ultoa@base+1,___lldiv@divisor+1
 11475  005048  0E00               	movlw	0
 11476  00504A  BF65               	btfsc	(___lldiv@divisor+1)& (0+255),7,b
 11477  00504C  0EFF               	movlw	-1
 11478  00504E  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
 11479  005050  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
 11480  005052  EC90  F02E         	call	___lldiv	;wreg free
 11481  005056  C060  F06F         	movff	?___lldiv,ultoa@val
 11482  00505A  C061  F070         	movff	?___lldiv+1,ultoa@val+1
 11483  00505E  C062  F071         	movff	?___lldiv+2,ultoa@val+2
 11484  005062  C063  F072         	movff	?___lldiv+3,ultoa@val+3
 11485  005066  0E09               	movlw	9
 11486  005068  0100               	movlb	0	; () banked
 11487  00506A  6579               	cpfsgt	ultoa@c& (0+255),b
 11488  00506C  D002               	goto	l1909
 11489                           
 11490                           ; BSR set to: 0
 11491  00506E  0E07               	movlw	7
 11492  005070  2779               	addwf	ultoa@c& (0+255),f,b
 11493  005072                     l1909:
 11494                           
 11495                           ; BSR set to: 0
 11496  005072  0E30               	movlw	48
 11497  005074  2779               	addwf	ultoa@c& (0+255),f,b
 11498                           
 11499                           ; BSR set to: 0
 11500  005076  C06D  FFD9         	movff	ultoa@buf,fsr2l
 11501  00507A  C06E  FFDA         	movff	ultoa@buf+1,fsr2h
 11502  00507E  C079  FFDF         	movff	ultoa@c,indf2
 11503                           
 11504                           ; BSR set to: 0
 11505  005082  076D               	decf	ultoa@buf& (0+255),f,b
 11506  005084  A0D8               	btfss	status,0,c
 11507  005086  076E               	decf	(ultoa@buf+1)& (0+255),f,b
 11508                           
 11509                           ; BSR set to: 0
 11510  005088  516F               	movf	ultoa@val& (0+255),w,b
 11511  00508A  1170               	iorwf	(ultoa@val+1)& (0+255),w,b
 11512  00508C  1171               	iorwf	(ultoa@val+2)& (0+255),w,b
 11513  00508E  1172               	iorwf	(ultoa@val+3)& (0+255),w,b
 11514  005090  B4D8               	btfsc	status,2,c
 11515  005092  0012               	return	
 11516  005094  D7B7               	goto	l1908
 11517  005096                     __end_of_ultoa:
 11518                           	opt stack 0
 11519                           tblptru	equ	0xFF8
 11520                           tblptrh	equ	0xFF7
 11521                           tblptrl	equ	0xFF6
 11522                           tablat	equ	0xFF5
 11523                           prodh	equ	0xFF4
 11524                           prodl	equ	0xFF3
 11525                           intcon	equ	0xFF2
 11526                           intcon3	equ	0xFF0
 11527                           indf0	equ	0xFEF
 11528                           postinc0	equ	0xFEE
 11529                           plusw0	equ	0xFEB
 11530                           fsr0h	equ	0xFEA
 11531                           fsr0l	equ	0xFE9
 11532                           wreg	equ	0xFE8
 11533                           indf1	equ	0xFE7
 11534                           postinc1	equ	0xFE6
 11535                           postdec1	equ	0xFE5
 11536                           plusw1	equ	0xFE3
 11537                           fsr1h	equ	0xFE2
 11538                           fsr1l	equ	0xFE1
 11539                           indf2	equ	0xFDF
 11540                           postinc2	equ	0xFDE
 11541                           postdec2	equ	0xFDD
 11542                           plusw2	equ	0xFDB
 11543                           fsr2h	equ	0xFDA
 11544                           fsr2l	equ	0xFD9
 11545                           status	equ	0xFD8
 11546                           
 11547 ;; *************** function ___llmod *****************
 11548 ;; Defined at:
 11549 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
 11550 ;; Parameters:    Size  Location     Type
 11551 ;;  dividend        4    0[BANK0 ] unsigned long 
 11552 ;;  divisor         4    4[BANK0 ] unsigned long 
 11553 ;; Auto vars:     Size  Location     Type
 11554 ;;  counter         1    8[BANK0 ] unsigned char 
 11555 ;; Return value:  Size  Location     Type
 11556 ;;                  4    0[BANK0 ] unsigned long 
 11557 ;; Registers used:
 11558 ;;		wreg, status,2, status,0
 11559 ;; Tracked objects:
 11560 ;;		On entry : 0/0
 11561 ;;		On exit  : 0/0
 11562 ;;		Unchanged: 0/0
 11563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11564 ;;      Params:         0       8       0       0       0       0       0       0       0
 11565 ;;      Locals:         0       1       0       0       0       0       0       0       0
 11566 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11567 ;;      Totals:         0       9       0       0       0       0       0       0       0
 11568 ;;Total ram usage:        9 bytes
 11569 ;; Hardware stack levels used:    1
 11570 ;; Hardware stack levels required when called:    4
 11571 ;; This function calls:
 11572 ;;		Nothing
 11573 ;; This function is called by:
 11574 ;;		_ultoa
 11575 ;; This function uses a non-reentrant model
 11576 ;;
 11577                           
 11578                           	psect	text31
 11579  006238                     __ptext31:
 11580                           	opt stack 0
 11581  006238                     ___llmod:
 11582                           	opt stack 22
 11583                           
 11584                           ; BSR set to: 0
 11585                           ;incstack = 0
 11586  006238  0100               	movlb	0	; () banked
 11587  00623A  5164               	movf	___llmod@divisor& (0+255),w,b
 11588  00623C  1165               	iorwf	(___llmod@divisor+1)& (0+255),w,b
 11589  00623E  1166               	iorwf	(___llmod@divisor+2)& (0+255),w,b
 11590  006240  1167               	iorwf	(___llmod@divisor+3)& (0+255),w,b
 11591  006242  B4D8               	btfsc	status,2,c
 11592  006244  D024               	goto	l1868
 11593                           
 11594                           ; BSR set to: 0
 11595  006246  0E01               	movlw	1
 11596  006248  6F68               	movwf	___llmod@counter& (0+255),b
 11597  00624A  D006               	goto	l1863
 11598  00624C                     
 11599                           ; BSR set to: 0
 11600                           
 11601                           ; BSR set to: 0
 11602  00624C  90D8               	bcf	status,0,c
 11603  00624E  3764               	rlcf	___llmod@divisor& (0+255),f,b
 11604  006250  3765               	rlcf	(___llmod@divisor+1)& (0+255),f,b
 11605  006252  3766               	rlcf	(___llmod@divisor+2)& (0+255),f,b
 11606  006254  3767               	rlcf	(___llmod@divisor+3)& (0+255),f,b
 11607  006256  2B68               	incf	___llmod@counter& (0+255),f,b
 11608  006258                     l1863:
 11609                           
 11610                           ; BSR set to: 0
 11611                           
 11612                           ; BSR set to: 0
 11613  006258  AF67               	btfss	(___llmod@divisor+3)& (0+255),7,b
 11614  00625A  D7F8               	goto	l1864
 11615  00625C                     u11130:
 11616                           
 11617                           ; BSR set to: 0
 11618                           
 11619                           ; BSR set to: 0
 11620                           
 11621                           ; BSR set to: 0
 11622  00625C  5164               	movf	___llmod@divisor& (0+255),w,b
 11623  00625E  5D60               	subwf	___llmod@dividend& (0+255),w,b
 11624  006260  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
 11625  006262  5961               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 11626  006264  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
 11627  006266  5962               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 11628  006268  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
 11629  00626A  5963               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 11630  00626C  A0D8               	btfss	status,0,c
 11631  00626E  D008               	goto	l1867
 11632                           
 11633                           ; BSR set to: 0
 11634  006270  5164               	movf	___llmod@divisor& (0+255),w,b
 11635  006272  5F60               	subwf	___llmod@dividend& (0+255),f,b
 11636  006274  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
 11637  006276  5B61               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 11638  006278  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
 11639  00627A  5B62               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 11640  00627C  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
 11641  00627E  5B63               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 11642  006280                     l1867:
 11643                           
 11644                           ; BSR set to: 0
 11645                           
 11646                           ; BSR set to: 0
 11647  006280  90D8               	bcf	status,0,c
 11648  006282  3367               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 11649  006284  3366               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 11650  006286  3365               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 11651  006288  3364               	rrcf	___llmod@divisor& (0+255),f,b
 11652                           
 11653                           ; BSR set to: 0
 11654  00628A  2F68               	decfsz	___llmod@counter& (0+255),f,b
 11655  00628C  D7E7               	goto	u11130
 11656  00628E                     l1868:
 11657                           
 11658                           ; BSR set to: 0
 11659                           
 11660                           ; BSR set to: 0
 11661  00628E  C060  F060         	movff	___llmod@dividend,?___llmod
 11662  006292  C061  F061         	movff	___llmod@dividend+1,?___llmod+1
 11663  006296  C062  F062         	movff	___llmod@dividend+2,?___llmod+2
 11664  00629A  C063  F063         	movff	___llmod@dividend+3,?___llmod+3
 11665                           
 11666                           ; BSR set to: 0
 11667  00629E  0012               	return		;funcret
 11668  0062A0                     __end_of___llmod:
 11669                           	opt stack 0
 11670                           tblptru	equ	0xFF8
 11671                           tblptrh	equ	0xFF7
 11672                           tblptrl	equ	0xFF6
 11673                           tablat	equ	0xFF5
 11674                           prodh	equ	0xFF4
 11675                           prodl	equ	0xFF3
 11676                           intcon	equ	0xFF2
 11677                           intcon3	equ	0xFF0
 11678                           indf0	equ	0xFEF
 11679                           postinc0	equ	0xFEE
 11680                           plusw0	equ	0xFEB
 11681                           fsr0h	equ	0xFEA
 11682                           fsr0l	equ	0xFE9
 11683                           wreg	equ	0xFE8
 11684                           indf1	equ	0xFE7
 11685                           postinc1	equ	0xFE6
 11686                           postdec1	equ	0xFE5
 11687                           plusw1	equ	0xFE3
 11688                           fsr1h	equ	0xFE2
 11689                           fsr1l	equ	0xFE1
 11690                           indf2	equ	0xFDF
 11691                           postinc2	equ	0xFDE
 11692                           postdec2	equ	0xFDD
 11693                           plusw2	equ	0xFDB
 11694                           fsr2h	equ	0xFDA
 11695                           fsr2l	equ	0xFD9
 11696                           status	equ	0xFD8
 11697                           
 11698 ;; *************** function ___lldiv *****************
 11699 ;; Defined at:
 11700 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 11701 ;; Parameters:    Size  Location     Type
 11702 ;;  dividend        4    0[BANK0 ] unsigned long 
 11703 ;;  divisor         4    4[BANK0 ] unsigned long 
 11704 ;; Auto vars:     Size  Location     Type
 11705 ;;  quotient        4    8[BANK0 ] unsigned long 
 11706 ;;  counter         1   12[BANK0 ] unsigned char 
 11707 ;; Return value:  Size  Location     Type
 11708 ;;                  4    0[BANK0 ] unsigned long 
 11709 ;; Registers used:
 11710 ;;		wreg, status,2, status,0
 11711 ;; Tracked objects:
 11712 ;;		On entry : 0/0
 11713 ;;		On exit  : 0/0
 11714 ;;		Unchanged: 0/0
 11715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11716 ;;      Params:         0       8       0       0       0       0       0       0       0
 11717 ;;      Locals:         0       5       0       0       0       0       0       0       0
 11718 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11719 ;;      Totals:         0      13       0       0       0       0       0       0       0
 11720 ;;Total ram usage:       13 bytes
 11721 ;; Hardware stack levels used:    1
 11722 ;; Hardware stack levels required when called:    4
 11723 ;; This function calls:
 11724 ;;		Nothing
 11725 ;; This function is called by:
 11726 ;;		_ultoa
 11727 ;; This function uses a non-reentrant model
 11728 ;;
 11729                           
 11730                           	psect	text32
 11731  005D20                     __ptext32:
 11732                           	opt stack 0
 11733  005D20                     ___lldiv:
 11734                           	opt stack 22
 11735                           
 11736                           ; BSR set to: 0
 11737                           ;incstack = 0
 11738  005D20  0E00               	movlw	0
 11739  005D22  0100               	movlb	0	; () banked
 11740  005D24  6F68               	movwf	___lldiv@quotient& (0+255),b
 11741  005D26  0E00               	movlw	0
 11742  005D28  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
 11743  005D2A  0E00               	movlw	0
 11744  005D2C  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
 11745  005D2E  0E00               	movlw	0
 11746  005D30  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
 11747                           
 11748                           ; BSR set to: 0
 11749  005D32  5164               	movf	___lldiv@divisor& (0+255),w,b
 11750  005D34  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 11751  005D36  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 11752  005D38  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 11753  005D3A  B4D8               	btfsc	status,2,c
 11754  005D3C  D02A               	goto	l1858
 11755                           
 11756                           ; BSR set to: 0
 11757  005D3E  0E01               	movlw	1
 11758  005D40  6F6C               	movwf	___lldiv@counter& (0+255),b
 11759  005D42  D006               	goto	l1853
 11760  005D44                     
 11761                           ; BSR set to: 0
 11762                           
 11763                           ; BSR set to: 0
 11764  005D44  90D8               	bcf	status,0,c
 11765  005D46  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 11766  005D48  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 11767  005D4A  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 11768  005D4C  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 11769  005D4E  2B6C               	incf	___lldiv@counter& (0+255),f,b
 11770  005D50                     l1853:
 11771                           
 11772                           ; BSR set to: 0
 11773                           
 11774                           ; BSR set to: 0
 11775  005D50  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 11776  005D52  D7F8               	goto	l1854
 11777  005D54                     u11100:
 11778                           
 11779                           ; BSR set to: 0
 11780                           
 11781                           ; BSR set to: 0
 11782                           
 11783                           ; BSR set to: 0
 11784  005D54  90D8               	bcf	status,0,c
 11785  005D56  3768               	rlcf	___lldiv@quotient& (0+255),f,b
 11786  005D58  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 11787  005D5A  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 11788  005D5C  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 11789                           
 11790                           ; BSR set to: 0
 11791  005D5E  5164               	movf	___lldiv@divisor& (0+255),w,b
 11792  005D60  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 11793  005D62  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 11794  005D64  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 11795  005D66  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 11796  005D68  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 11797  005D6A  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 11798  005D6C  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 11799  005D6E  A0D8               	btfss	status,0,c
 11800  005D70  D009               	goto	l1857
 11801                           
 11802                           ; BSR set to: 0
 11803  005D72  5164               	movf	___lldiv@divisor& (0+255),w,b
 11804  005D74  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 11805  005D76  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 11806  005D78  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 11807  005D7A  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 11808  005D7C  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 11809  005D7E  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 11810  005D80  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 11811                           
 11812                           ; BSR set to: 0
 11813  005D82  8168               	bsf	___lldiv@quotient& (0+255),0,b
 11814  005D84                     l1857:
 11815                           
 11816                           ; BSR set to: 0
 11817                           
 11818                           ; BSR set to: 0
 11819  005D84  90D8               	bcf	status,0,c
 11820  005D86  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 11821  005D88  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 11822  005D8A  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 11823  005D8C  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 11824                           
 11825                           ; BSR set to: 0
 11826  005D8E  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
 11827  005D90  D7E1               	goto	u11100
 11828  005D92                     l1858:
 11829                           
 11830                           ; BSR set to: 0
 11831                           
 11832                           ; BSR set to: 0
 11833  005D92  C068  F060         	movff	___lldiv@quotient,?___lldiv
 11834  005D96  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 11835  005D9A  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 11836  005D9E  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 11837                           
 11838                           ; BSR set to: 0
 11839  005DA2  0012               	return		;funcret
 11840  005DA4                     __end_of___lldiv:
 11841                           	opt stack 0
 11842                           tblptru	equ	0xFF8
 11843                           tblptrh	equ	0xFF7
 11844                           tblptrl	equ	0xFF6
 11845                           tablat	equ	0xFF5
 11846                           prodh	equ	0xFF4
 11847                           prodl	equ	0xFF3
 11848                           intcon	equ	0xFF2
 11849                           intcon3	equ	0xFF0
 11850                           indf0	equ	0xFEF
 11851                           postinc0	equ	0xFEE
 11852                           plusw0	equ	0xFEB
 11853                           fsr0h	equ	0xFEA
 11854                           fsr0l	equ	0xFE9
 11855                           wreg	equ	0xFE8
 11856                           indf1	equ	0xFE7
 11857                           postinc1	equ	0xFE6
 11858                           postdec1	equ	0xFE5
 11859                           plusw1	equ	0xFE3
 11860                           fsr1h	equ	0xFE2
 11861                           fsr1l	equ	0xFE1
 11862                           indf2	equ	0xFDF
 11863                           postinc2	equ	0xFDE
 11864                           postdec2	equ	0xFDD
 11865                           plusw2	equ	0xFDB
 11866                           fsr2h	equ	0xFDA
 11867                           fsr2l	equ	0xFD9
 11868                           status	equ	0xFD8
 11869                           
 11870 ;; *************** function _tcp_parseHeader *****************
 11871 ;; Defined at:
 11872 ;;		line 74 in file "src/stack/protocols/tcp.c"
 11873 ;; Parameters:    Size  Location     Type
 11874 ;;  ipPayload       9   20[BANK0 ] struct memoryField
 11875 ;;  header          2   29[BANK0 ] PTR struct tcp_header
 11876 ;;		 -> tcp_handleNewPacket@tcpHeader(21), 
 11877 ;; Auto vars:     Size  Location     Type
 11878 ;;  temp            1   36[BANK0 ] unsigned char 
 11879 ;; Return value:  Size  Location     Type
 11880 ;;                  3   20[BANK0 ] struct error
 11881 ;; Registers used:
 11882 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11883 ;; Tracked objects:
 11884 ;;		On entry : 0/0
 11885 ;;		On exit  : 0/0
 11886 ;;		Unchanged: 0/0
 11887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11888 ;;      Params:         0      11       0       0       0       0       0       0       0
 11889 ;;      Locals:         0       1       0       0       0       0       0       0       0
 11890 ;;      Temps:          0       5       0       0       0       0       0       0       0
 11891 ;;      Totals:         0      17       0       0       0       0       0       0       0
 11892 ;;Total ram usage:       17 bytes
 11893 ;; Hardware stack levels used:    1
 11894 ;; Hardware stack levels required when called:    8
 11895 ;; This function calls:
 11896 ;;		_ethernetController_streamFromRXBuffer
 11897 ;; This function is called by:
 11898 ;;		_tcp_handleNewPacket
 11899 ;; This function uses a non-reentrant model
 11900 ;;
 11901                           
 11902                           	psect	text33
 11903  0000CE                     __ptext33:
 11904                           	opt stack 0
 11905  0000CE                     _tcp_parseHeader:
 11906                           	opt stack 18
 11907                           
 11908                           ;tcp.c: 75: uint8_t temp;
 11909                           ;tcp.c: 76: ethernetController_streamFromRXBuffer(0, ipPayload.start);
 11910                           
 11911                           ; BSR set to: 0
 11912                           ;incstack = 0
 11913  0000CE  C074  F06F         	movff	tcp_parseHeader@ipPayload,ethernetController_streamFromRXBuffer@startAddress
 11914  0000D2  C075  F070         	movff	tcp_parseHeader@ipPayload+1,ethernetController_streamFromRXBuffer@startAddress+1
 11915  0000D6  0E00               	movlw	0
 11916  0000D8  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 11917                           
 11918                           ;tcp.c: 77: header->srcPort = ((uint16_t) ethernetController_streamFromRXBuffer(1, ipPay
      +                          load.start) << 8);
 11919  0000DC  C074  F06F         	movff	tcp_parseHeader@ipPayload,ethernetController_streamFromRXBuffer@startAddress
 11920  0000E0  C075  F070         	movff	tcp_parseHeader@ipPayload+1,ethernetController_streamFromRXBuffer@startAddress+1
 11921  0000E4  0E01               	movlw	1
 11922  0000E6  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 11923  0000EA  0100               	movlb	0	; () banked
 11924  0000EC  6F7F               	movwf	??_tcp_parseHeader& (0+255),b
 11925  0000EE  517F               	movf	??_tcp_parseHeader& (0+255),w,b
 11926  0000F0  6F81               	movwf	(??_tcp_parseHeader+2)& (0+255),b
 11927  0000F2  6B80               	clrf	(??_tcp_parseHeader+1)& (0+255),b
 11928  0000F4  C07D  FFD9         	movff	tcp_parseHeader@header,fsr2l
 11929  0000F8  C07E  FFDA         	movff	tcp_parseHeader@header+1,fsr2h
 11930  0000FC  C080  FFDE         	movff	??_tcp_parseHeader+1,postinc2
 11931  000100  C081  FFDD         	movff	??_tcp_parseHeader+2,postdec2
 11932                           
 11933                           ;tcp.c: 78: header->srcPort |= (uint16_t) ethernetController_streamFromRXBuffer(1, ipPay
      +                          load.start);
 11934  000104  C074  F06F         	movff	tcp_parseHeader@ipPayload,ethernetController_streamFromRXBuffer@startAddress
 11935  000108  C075  F070         	movff	tcp_parseHeader@ipPayload+1,ethernetController_streamFromRXBuffer@startAddress+1
 11936  00010C  0E01               	movlw	1
 11937  00010E  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 11938  000112  0100               	movlb	0	; () banked
 11939  000114  6F7F               	movwf	??_tcp_parseHeader& (0+255),b
 11940  000116  517F               	movf	??_tcp_parseHeader& (0+255),w,b
 11941  000118  C07D  FFD9         	movff	tcp_parseHeader@header,fsr2l
 11942  00011C  C07E  FFDA         	movff	tcp_parseHeader@header+1,fsr2h
 11943  000120  12DE               	iorwf	postinc2,f,c
 11944  000122  0E00               	movlw	0
 11945  000124  12DD               	iorwf	postdec2,f,c
 11946                           
 11947                           ;tcp.c: 79: header->dstPort = ((uint16_t) ethernetController_streamFromRXBuffer(1, ipPay
      +                          load.start) << 8);
 11948  000126  C074  F06F         	movff	tcp_parseHeader@ipPayload,ethernetController_streamFromRXBuffer@startAddress
 11949  00012A  C075  F070         	movff	tcp_parseHeader@ipPayload+1,ethernetController_streamFromRXBuffer@startAddress+1
 11950  00012E  0E01               	movlw	1
 11951  000130  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 11952  000134  0100               	movlb	0	; () banked
 11953  000136  6F7F               	movwf	??_tcp_parseHeader& (0+255),b
 11954  000138  517F               	movf	??_tcp_parseHeader& (0+255),w,b
 11955  00013A  6F81               	movwf	(??_tcp_parseHeader+2)& (0+255),b
 11956  00013C  6B80               	clrf	(??_tcp_parseHeader+1)& (0+255),b
 11957  00013E  EE20 F002          	lfsr	2,2
 11958  000142  517D               	movf	tcp_parseHeader@header& (0+255),w,b
 11959  000144  26D9               	addwf	fsr2l,f,c
 11960  000146  517E               	movf	(tcp_parseHeader@header+1)& (0+255),w,b
 11961  000148  22DA               	addwfc	fsr2h,f,c
 11962  00014A  C080  FFDE         	movff	??_tcp_parseHeader+1,postinc2
 11963  00014E  C081  FFDD         	movff	??_tcp_parseHeader+2,postdec2
 11964                           
 11965                           ;tcp.c: 80: header->dstPort |= (uint16_t) ethernetController_streamFromRXBuffer(1, ipPay
      +                          load.start);
 11966  000152  C074  F06F         	movff	tcp_parseHeader@ipPayload,ethernetController_streamFromRXBuffer@startAddress
 11967  000156  C075  F070         	movff	tcp_parseHeader@ipPayload+1,ethernetController_streamFromRXBuffer@startAddress+1
 11968  00015A  0E01               	movlw	1
 11969  00015C  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 11970  000160  0100               	movlb	0	; () banked
 11971  000162  6F7F               	movwf	??_tcp_parseHeader& (0+255),b
 11972  000164  6B80               	clrf	(??_tcp_parseHeader+1)& (0+255),b
 11973  000166  EE20 F002          	lfsr	2,2
 11974  00016A  517D               	movf	tcp_parseHeader@header& (0+255),w,b
 11975  00016C  26D9               	addwf	fsr2l,f,c
 11976  00016E  517E               	movf	(tcp_parseHeader@header+1)& (0+255),w,b
 11977  000170  22DA               	addwfc	fsr2h,f,c
 11978  000172  517F               	movf	??_tcp_parseHeader& (0+255),w,b
 11979  000174  12DE               	iorwf	postinc2,f,c
 11980  000176  5180               	movf	(??_tcp_parseHeader+1)& (0+255),w,b
 11981  000178  12DD               	iorwf	postdec2,f,c
 11982                           
 11983                           ;tcp.c: 81: header->seqNumber = ((uint32_t) ethernetController_streamFromRXBuffer(1, ipP
      +                          ayload.start) << 24);
 11984  00017A  C074  F06F         	movff	tcp_parseHeader@ipPayload,ethernetController_streamFromRXBuffer@startAddress
 11985  00017E  C075  F070         	movff	tcp_parseHeader@ipPayload+1,ethernetController_streamFromRXBuffer@startAddress+1
 11986  000182  0E01               	movlw	1
 11987  000184  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 11988  000188  0100               	movlb	0	; () banked
 11989  00018A  6F7F               	movwf	??_tcp_parseHeader& (0+255),b
 11990  00018C  C07F  F080         	movff	??_tcp_parseHeader,??_tcp_parseHeader+1
 11991  000190  6B81               	clrf	(??_tcp_parseHeader+2)& (0+255),b
 11992  000192  6B82               	clrf	(??_tcp_parseHeader+3)& (0+255),b
 11993  000194  6B83               	clrf	(??_tcp_parseHeader+4)& (0+255),b
 11994  000196  C080  F083         	movff	??_tcp_parseHeader+1,??_tcp_parseHeader+4
 11995  00019A  6B82               	clrf	(??_tcp_parseHeader+3)& (0+255),b
 11996  00019C  6B81               	clrf	(??_tcp_parseHeader+2)& (0+255),b
 11997  00019E  6B80               	clrf	(??_tcp_parseHeader+1)& (0+255),b
 11998  0001A0  EE20 F004          	lfsr	2,4
 11999  0001A4  517D               	movf	tcp_parseHeader@header& (0+255),w,b
 12000  0001A6  26D9               	addwf	fsr2l,f,c
 12001  0001A8  517E               	movf	(tcp_parseHeader@header+1)& (0+255),w,b
 12002  0001AA  22DA               	addwfc	fsr2h,f,c
 12003  0001AC  C080  FFDE         	movff	??_tcp_parseHeader+1,postinc2
 12004  0001B0  C081  FFDE         	movff	??_tcp_parseHeader+2,postinc2
 12005  0001B4  C082  FFDE         	movff	??_tcp_parseHeader+3,postinc2
 12006  0001B8  C083  FFDE         	movff	??_tcp_parseHeader+4,postinc2
 12007                           
 12008                           ;tcp.c: 82: header->seqNumber |= ((uint32_t) ethernetController_streamFromRXBuffer(1, ip
      +                          Payload.start) << 16);
 12009  0001BC  C074  F06F         	movff	tcp_parseHeader@ipPayload,ethernetController_streamFromRXBuffer@startAddress
 12010  0001C0  C075  F070         	movff	tcp_parseHeader@ipPayload+1,ethernetController_streamFromRXBuffer@startAddress+1
 12011  0001C4  0E01               	movlw	1
 12012  0001C6  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 12013  0001CA  0100               	movlb	0	; () banked
 12014  0001CC  6F7F               	movwf	??_tcp_parseHeader& (0+255),b
 12015  0001CE  C07F  F080         	movff	??_tcp_parseHeader,??_tcp_parseHeader+1
 12016  0001D2  6B81               	clrf	(??_tcp_parseHeader+2)& (0+255),b
 12017  0001D4  6B82               	clrf	(??_tcp_parseHeader+3)& (0+255),b
 12018  0001D6  6B83               	clrf	(??_tcp_parseHeader+4)& (0+255),b
 12019  0001D8  C081  F083         	movff	??_tcp_parseHeader+2,??_tcp_parseHeader+4
 12020  0001DC  C080  F082         	movff	??_tcp_parseHeader+1,??_tcp_parseHeader+3
 12021  0001E0  6B81               	clrf	(??_tcp_parseHeader+2)& (0+255),b
 12022  0001E2  6B80               	clrf	(??_tcp_parseHeader+1)& (0+255),b
 12023  0001E4  EE20 F004          	lfsr	2,4
 12024  0001E8  517D               	movf	tcp_parseHeader@header& (0+255),w,b
 12025  0001EA  26D9               	addwf	fsr2l,f,c
 12026  0001EC  517E               	movf	(tcp_parseHeader@header+1)& (0+255),w,b
 12027  0001EE  22DA               	addwfc	fsr2h,f,c
 12028  0001F0  5180               	movf	(??_tcp_parseHeader+1)& (0+255),w,b
 12029  0001F2  12DE               	iorwf	postinc2,f,c
 12030  0001F4  5181               	movf	(??_tcp_parseHeader+2)& (0+255),w,b
 12031  0001F6  12DE               	iorwf	postinc2,f,c
 12032  0001F8  5182               	movf	(??_tcp_parseHeader+3)& (0+255),w,b
 12033  0001FA  12DE               	iorwf	postinc2,f,c
 12034  0001FC  5183               	movf	(??_tcp_parseHeader+4)& (0+255),w,b
 12035  0001FE  12DE               	iorwf	postinc2,f,c
 12036                           
 12037                           ;tcp.c: 83: header->seqNumber |= ((uint32_t) ethernetController_streamFromRXBuffer(1, ip
      +                          Payload.start) << 8);
 12038  000200  C074  F06F         	movff	tcp_parseHeader@ipPayload,ethernetController_streamFromRXBuffer@startAddress
 12039  000204  C075  F070         	movff	tcp_parseHeader@ipPayload+1,ethernetController_streamFromRXBuffer@startAddress+1
 12040  000208  0E01               	movlw	1
 12041  00020A  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 12042  00020E  0100               	movlb	0	; () banked
 12043  000210  6F7F               	movwf	??_tcp_parseHeader& (0+255),b
 12044  000212  C07F  F080         	movff	??_tcp_parseHeader,??_tcp_parseHeader+1
 12045  000216  6B81               	clrf	(??_tcp_parseHeader+2)& (0+255),b
 12046  000218  6B82               	clrf	(??_tcp_parseHeader+3)& (0+255),b
 12047  00021A  6B83               	clrf	(??_tcp_parseHeader+4)& (0+255),b
 12048  00021C  C082  F083         	movff	??_tcp_parseHeader+3,??_tcp_parseHeader+4
 12049  000220  C081  F082         	movff	??_tcp_parseHeader+2,??_tcp_parseHeader+3
 12050  000224  C080  F081         	movff	??_tcp_parseHeader+1,??_tcp_parseHeader+2
 12051  000228  6B80               	clrf	(??_tcp_parseHeader+1)& (0+255),b
 12052  00022A  EE20 F004          	lfsr	2,4
 12053  00022E  517D               	movf	tcp_parseHeader@header& (0+255),w,b
 12054  000230  26D9               	addwf	fsr2l,f,c
 12055  000232  517E               	movf	(tcp_parseHeader@header+1)& (0+255),w,b
 12056  000234  22DA               	addwfc	fsr2h,f,c
 12057  000236  5180               	movf	(??_tcp_parseHeader+1)& (0+255),w,b
 12058  000238  12DE               	iorwf	postinc2,f,c
 12059  00023A  5181               	movf	(??_tcp_parseHeader+2)& (0+255),w,b
 12060  00023C  12DE               	iorwf	postinc2,f,c
 12061  00023E  5182               	movf	(??_tcp_parseHeader+3)& (0+255),w,b
 12062  000240  12DE               	iorwf	postinc2,f,c
 12063  000242  5183               	movf	(??_tcp_parseHeader+4)& (0+255),w,b
 12064  000244  12DE               	iorwf	postinc2,f,c
 12065                           
 12066                           ;tcp.c: 84: header->seqNumber |= (uint32_t) ethernetController_streamFromRXBuffer(1, ipP
      +                          ayload.start);
 12067  000246  C074  F06F         	movff	tcp_parseHeader@ipPayload,ethernetController_streamFromRXBuffer@startAddress
 12068  00024A  C075  F070         	movff	tcp_parseHeader@ipPayload+1,ethernetController_streamFromRXBuffer@startAddress+1
 12069  00024E  0E01               	movlw	1
 12070  000250  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 12071  000254  0100               	movlb	0	; () banked
 12072  000256  6F7F               	movwf	??_tcp_parseHeader& (0+255),b
 12073  000258  C07F  F080         	movff	??_tcp_parseHeader,??_tcp_parseHeader+1
 12074  00025C  6B81               	clrf	(??_tcp_parseHeader+2)& (0+255),b
 12075  00025E  6B82               	clrf	(??_tcp_parseHeader+3)& (0+255),b
 12076  000260  6B83               	clrf	(??_tcp_parseHeader+4)& (0+255),b
 12077  000262  EE20 F004          	lfsr	2,4
 12078  000266  517D               	movf	tcp_parseHeader@header& (0+255),w,b
 12079  000268  26D9               	addwf	fsr2l,f,c
 12080  00026A  517E               	movf	(tcp_parseHeader@header+1)& (0+255),w,b
 12081  00026C  22DA               	addwfc	fsr2h,f,c
 12082  00026E  5180               	movf	(??_tcp_parseHeader+1)& (0+255),w,b
 12083  000270  12DE               	iorwf	postinc2,f,c
 12084  000272  5181               	movf	(??_tcp_parseHeader+2)& (0+255),w,b
 12085  000274  12DE               	iorwf	postinc2,f,c
 12086  000276  5182               	movf	(??_tcp_parseHeader+3)& (0+255),w,b
 12087  000278  12DE               	iorwf	postinc2,f,c
 12088  00027A  5183               	movf	(??_tcp_parseHeader+4)& (0+255),w,b
 12089  00027C  12DE               	iorwf	postinc2,f,c
 12090                           
 12091                           ;tcp.c: 85: header->ackNumber = ((uint32_t) ethernetController_streamFromRXBuffer(1, ipP
      +                          ayload.start) << 24);
 12092  00027E  C074  F06F         	movff	tcp_parseHeader@ipPayload,ethernetController_streamFromRXBuffer@startAddress
 12093  000282  C075  F070         	movff	tcp_parseHeader@ipPayload+1,ethernetController_streamFromRXBuffer@startAddress+1
 12094  000286  0E01               	movlw	1
 12095  000288  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 12096  00028C  0100               	movlb	0	; () banked
 12097  00028E  6F7F               	movwf	??_tcp_parseHeader& (0+255),b
 12098  000290  C07F  F080         	movff	??_tcp_parseHeader,??_tcp_parseHeader+1
 12099  000294  6B81               	clrf	(??_tcp_parseHeader+2)& (0+255),b
 12100  000296  6B82               	clrf	(??_tcp_parseHeader+3)& (0+255),b
 12101  000298  6B83               	clrf	(??_tcp_parseHeader+4)& (0+255),b
 12102  00029A  C080  F083         	movff	??_tcp_parseHeader+1,??_tcp_parseHeader+4
 12103  00029E  6B82               	clrf	(??_tcp_parseHeader+3)& (0+255),b
 12104  0002A0  6B81               	clrf	(??_tcp_parseHeader+2)& (0+255),b
 12105  0002A2  6B80               	clrf	(??_tcp_parseHeader+1)& (0+255),b
 12106  0002A4  EE20 F008          	lfsr	2,8
 12107  0002A8  517D               	movf	tcp_parseHeader@header& (0+255),w,b
 12108  0002AA  26D9               	addwf	fsr2l,f,c
 12109  0002AC  517E               	movf	(tcp_parseHeader@header+1)& (0+255),w,b
 12110  0002AE  22DA               	addwfc	fsr2h,f,c
 12111  0002B0  C080  FFDE         	movff	??_tcp_parseHeader+1,postinc2
 12112  0002B4  C081  FFDE         	movff	??_tcp_parseHeader+2,postinc2
 12113  0002B8  C082  FFDE         	movff	??_tcp_parseHeader+3,postinc2
 12114  0002BC  C083  FFDE         	movff	??_tcp_parseHeader+4,postinc2
 12115                           
 12116                           ;tcp.c: 86: header->ackNumber |= ((uint32_t) ethernetController_streamFromRXBuffer(1, ip
      +                          Payload.start) << 16);
 12117  0002C0  C074  F06F         	movff	tcp_parseHeader@ipPayload,ethernetController_streamFromRXBuffer@startAddress
 12118  0002C4  C075  F070         	movff	tcp_parseHeader@ipPayload+1,ethernetController_streamFromRXBuffer@startAddress+1
 12119  0002C8  0E01               	movlw	1
 12120  0002CA  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 12121  0002CE  0100               	movlb	0	; () banked
 12122  0002D0  6F7F               	movwf	??_tcp_parseHeader& (0+255),b
 12123  0002D2  C07F  F080         	movff	??_tcp_parseHeader,??_tcp_parseHeader+1
 12124  0002D6  6B81               	clrf	(??_tcp_parseHeader+2)& (0+255),b
 12125  0002D8  6B82               	clrf	(??_tcp_parseHeader+3)& (0+255),b
 12126  0002DA  6B83               	clrf	(??_tcp_parseHeader+4)& (0+255),b
 12127  0002DC  C081  F083         	movff	??_tcp_parseHeader+2,??_tcp_parseHeader+4
 12128  0002E0  C080  F082         	movff	??_tcp_parseHeader+1,??_tcp_parseHeader+3
 12129  0002E4  6B81               	clrf	(??_tcp_parseHeader+2)& (0+255),b
 12130  0002E6  6B80               	clrf	(??_tcp_parseHeader+1)& (0+255),b
 12131  0002E8  EE20 F008          	lfsr	2,8
 12132  0002EC  517D               	movf	tcp_parseHeader@header& (0+255),w,b
 12133  0002EE  26D9               	addwf	fsr2l,f,c
 12134  0002F0  517E               	movf	(tcp_parseHeader@header+1)& (0+255),w,b
 12135  0002F2  22DA               	addwfc	fsr2h,f,c
 12136  0002F4  5180               	movf	(??_tcp_parseHeader+1)& (0+255),w,b
 12137  0002F6  12DE               	iorwf	postinc2,f,c
 12138  0002F8  5181               	movf	(??_tcp_parseHeader+2)& (0+255),w,b
 12139  0002FA  12DE               	iorwf	postinc2,f,c
 12140  0002FC  5182               	movf	(??_tcp_parseHeader+3)& (0+255),w,b
 12141  0002FE  12DE               	iorwf	postinc2,f,c
 12142  000300  5183               	movf	(??_tcp_parseHeader+4)& (0+255),w,b
 12143  000302  12DE               	iorwf	postinc2,f,c
 12144                           
 12145                           ;tcp.c: 87: header->ackNumber |= ((uint32_t) ethernetController_streamFromRXBuffer(1, ip
      +                          Payload.start) << 8);
 12146  000304  C074  F06F         	movff	tcp_parseHeader@ipPayload,ethernetController_streamFromRXBuffer@startAddress
 12147  000308  C075  F070         	movff	tcp_parseHeader@ipPayload+1,ethernetController_streamFromRXBuffer@startAddress+1
 12148  00030C  0E01               	movlw	1
 12149  00030E  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 12150  000312  0100               	movlb	0	; () banked
 12151  000314  6F7F               	movwf	??_tcp_parseHeader& (0+255),b
 12152  000316  C07F  F080         	movff	??_tcp_parseHeader,??_tcp_parseHeader+1
 12153  00031A  6B81               	clrf	(??_tcp_parseHeader+2)& (0+255),b
 12154  00031C  6B82               	clrf	(??_tcp_parseHeader+3)& (0+255),b
 12155  00031E  6B83               	clrf	(??_tcp_parseHeader+4)& (0+255),b
 12156  000320  C082  F083         	movff	??_tcp_parseHeader+3,??_tcp_parseHeader+4
 12157  000324  C081  F082         	movff	??_tcp_parseHeader+2,??_tcp_parseHeader+3
 12158  000328  C080  F081         	movff	??_tcp_parseHeader+1,??_tcp_parseHeader+2
 12159  00032C  6B80               	clrf	(??_tcp_parseHeader+1)& (0+255),b
 12160  00032E  EE20 F008          	lfsr	2,8
 12161  000332  517D               	movf	tcp_parseHeader@header& (0+255),w,b
 12162  000334  26D9               	addwf	fsr2l,f,c
 12163  000336  517E               	movf	(tcp_parseHeader@header+1)& (0+255),w,b
 12164  000338  22DA               	addwfc	fsr2h,f,c
 12165  00033A  5180               	movf	(??_tcp_parseHeader+1)& (0+255),w,b
 12166  00033C  12DE               	iorwf	postinc2,f,c
 12167  00033E  5181               	movf	(??_tcp_parseHeader+2)& (0+255),w,b
 12168  000340  12DE               	iorwf	postinc2,f,c
 12169  000342  5182               	movf	(??_tcp_parseHeader+3)& (0+255),w,b
 12170  000344  12DE               	iorwf	postinc2,f,c
 12171  000346  5183               	movf	(??_tcp_parseHeader+4)& (0+255),w,b
 12172  000348  12DE               	iorwf	postinc2,f,c
 12173                           
 12174                           ;tcp.c: 88: header->ackNumber |= ethernetController_streamFromRXBuffer(1, ipPayload.star
      +                          t);
 12175  00034A  C074  F06F         	movff	tcp_parseHeader@ipPayload,ethernetController_streamFromRXBuffer@startAddress
 12176  00034E  C075  F070         	movff	tcp_parseHeader@ipPayload+1,ethernetController_streamFromRXBuffer@startAddress+1
 12177  000352  0E01               	movlw	1
 12178  000354  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 12179  000358  0100               	movlb	0	; () banked
 12180  00035A  6F7F               	movwf	??_tcp_parseHeader& (0+255),b
 12181  00035C  C07F  F080         	movff	??_tcp_parseHeader,??_tcp_parseHeader+1
 12182  000360  6B81               	clrf	(??_tcp_parseHeader+2)& (0+255),b
 12183  000362  6B82               	clrf	(??_tcp_parseHeader+3)& (0+255),b
 12184  000364  6B83               	clrf	(??_tcp_parseHeader+4)& (0+255),b
 12185  000366  EE20 F008          	lfsr	2,8
 12186  00036A  517D               	movf	tcp_parseHeader@header& (0+255),w,b
 12187  00036C  26D9               	addwf	fsr2l,f,c
 12188  00036E  517E               	movf	(tcp_parseHeader@header+1)& (0+255),w,b
 12189  000370  22DA               	addwfc	fsr2h,f,c
 12190  000372  5180               	movf	(??_tcp_parseHeader+1)& (0+255),w,b
 12191  000374  12DE               	iorwf	postinc2,f,c
 12192  000376  5181               	movf	(??_tcp_parseHeader+2)& (0+255),w,b
 12193  000378  12DE               	iorwf	postinc2,f,c
 12194  00037A  5182               	movf	(??_tcp_parseHeader+3)& (0+255),w,b
 12195  00037C  12DE               	iorwf	postinc2,f,c
 12196  00037E  5183               	movf	(??_tcp_parseHeader+4)& (0+255),w,b
 12197  000380  12DE               	iorwf	postinc2,f,c
 12198                           
 12199                           ;tcp.c: 89: temp = ethernetController_streamFromRXBuffer(1, ipPayload.start);
 12200  000382  C074  F06F         	movff	tcp_parseHeader@ipPayload,ethernetController_streamFromRXBuffer@startAddress
 12201  000386  C075  F070         	movff	tcp_parseHeader@ipPayload+1,ethernetController_streamFromRXBuffer@startAddress+1
 12202  00038A  0E01               	movlw	1
 12203  00038C  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 12204  000390  0100               	movlb	0	; () banked
 12205  000392  6F84               	movwf	tcp_parseHeader@temp& (0+255),b
 12206                           
 12207                           ; BSR set to: 0
 12208                           ;tcp.c: 90: header->dataOffset = (temp & 0xf0) >> 4;
 12209  000394  EE20 F00C          	lfsr	2,12
 12210  000398  517D               	movf	tcp_parseHeader@header& (0+255),w,b
 12211  00039A  26D9               	addwf	fsr2l,f,c
 12212  00039C  517E               	movf	(tcp_parseHeader@header+1)& (0+255),w,b
 12213  00039E  22DA               	addwfc	fsr2h,f,c
 12214  0003A0  3984               	swapf	tcp_parseHeader@temp& (0+255),w,b
 12215  0003A2  0B0F               	andlw	15
 12216  0003A4  0B0F               	andlw	15
 12217  0003A6  6EDF               	movwf	indf2,c
 12218                           
 12219                           ; BSR set to: 0
 12220                           ;tcp.c: 91: header->flags.NS = temp & 0x01;
 12221  0003A8  C084  F07F         	movff	tcp_parseHeader@temp,??_tcp_parseHeader
 12222  0003AC  0E01               	movlw	1
 12223  0003AE  177F               	andwf	??_tcp_parseHeader& (0+255),f,b
 12224  0003B0  EE20 F00D          	lfsr	2,13
 12225  0003B4  517D               	movf	tcp_parseHeader@header& (0+255),w,b
 12226  0003B6  26D9               	addwf	fsr2l,f,c
 12227  0003B8  517E               	movf	(tcp_parseHeader@header+1)& (0+255),w,b
 12228  0003BA  22DA               	addwfc	fsr2h,f,c
 12229  0003BC  50DF               	movf	223,w,c
 12230  0003BE  197F               	xorwf	??_tcp_parseHeader& (0+255),w,b
 12231  0003C0  0BFE               	andlw	-2
 12232  0003C2  197F               	xorwf	??_tcp_parseHeader& (0+255),w,b
 12233  0003C4  6EDF               	movwf	223,c
 12234                           
 12235                           ;tcp.c: 92: temp = ethernetController_streamFromRXBuffer(1, ipPayload.start);
 12236  0003C6  C074  F06F         	movff	tcp_parseHeader@ipPayload,ethernetController_streamFromRXBuffer@startAddress
 12237  0003CA  C075  F070         	movff	tcp_parseHeader@ipPayload+1,ethernetController_streamFromRXBuffer@startAddress+1
 12238  0003CE  0E01               	movlw	1
 12239  0003D0  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 12240  0003D4  0100               	movlb	0	; () banked
 12241  0003D6  6F84               	movwf	tcp_parseHeader@temp& (0+255),b
 12242                           
 12243                           ; BSR set to: 0
 12244                           ;tcp.c: 93: header->flags.CWR = temp & (0x01 << 7) ? 1 : 0;
 12245  0003D8  AF84               	btfss	tcp_parseHeader@temp& (0+255),7,b
 12246  0003DA  D003               	goto	u12730
 12247  0003DC  6B7F               	clrf	??_tcp_parseHeader& (0+255),b
 12248  0003DE  2B7F               	incf	??_tcp_parseHeader& (0+255),f,b
 12249  0003E0  D002               	goto	u12748
 12250  0003E2                     u12730:
 12251  0003E2  0100               	movlb	0	; () banked
 12252  0003E4  6B7F               	clrf	??_tcp_parseHeader& (0+255),b
 12253  0003E6                     u12748:
 12254  0003E6  EE20 F00D          	lfsr	2,13
 12255  0003EA  517D               	movf	tcp_parseHeader@header& (0+255),w,b
 12256  0003EC  26D9               	addwf	fsr2l,f,c
 12257  0003EE  517E               	movf	(tcp_parseHeader@header+1)& (0+255),w,b
 12258  0003F0  22DA               	addwfc	fsr2h,f,c
 12259  0003F2  477F               	rlncf	??_tcp_parseHeader& (0+255),f,b
 12260  0003F4  50DF               	movf	223,w,c
 12261  0003F6  197F               	xorwf	??_tcp_parseHeader& (0+255),w,b
 12262  0003F8  0BFD               	andlw	-3
 12263  0003FA  197F               	xorwf	??_tcp_parseHeader& (0+255),w,b
 12264  0003FC  6EDF               	movwf	223,c
 12265                           
 12266                           ; BSR set to: 0
 12267                           ;tcp.c: 94: header->flags.ECE = temp & (0x01 << 6) ? 1 : 0;
 12268  0003FE  AD84               	btfss	tcp_parseHeader@temp& (0+255),6,b
 12269  000400  D003               	goto	u12750
 12270  000402  6B7F               	clrf	??_tcp_parseHeader& (0+255),b
 12271  000404  2B7F               	incf	??_tcp_parseHeader& (0+255),f,b
 12272  000406  D002               	goto	u12768
 12273  000408                     u12750:
 12274  000408  0100               	movlb	0	; () banked
 12275  00040A  6B7F               	clrf	??_tcp_parseHeader& (0+255),b
 12276  00040C                     u12768:
 12277  00040C  EE20 F00D          	lfsr	2,13
 12278  000410  517D               	movf	tcp_parseHeader@header& (0+255),w,b
 12279  000412  26D9               	addwf	fsr2l,f,c
 12280  000414  517E               	movf	(tcp_parseHeader@header+1)& (0+255),w,b
 12281  000416  22DA               	addwfc	fsr2h,f,c
 12282  000418  477F               	rlncf	??_tcp_parseHeader& (0+255),f,b
 12283  00041A  477F               	rlncf	??_tcp_parseHeader& (0+255),f,b
 12284  00041C  50DF               	movf	223,w,c
 12285  00041E  197F               	xorwf	??_tcp_parseHeader& (0+255),w,b
 12286  000420  0BFB               	andlw	-5
 12287  000422  197F               	xorwf	??_tcp_parseHeader& (0+255),w,b
 12288  000424  6EDF               	movwf	223,c
 12289                           
 12290                           ; BSR set to: 0
 12291                           ;tcp.c: 95: header->flags.URG = temp & (0x01 << 5) ? 1 : 0;
 12292  000426  AB84               	btfss	tcp_parseHeader@temp& (0+255),5,b
 12293  000428  D003               	goto	u12770
 12294  00042A  6B7F               	clrf	??_tcp_parseHeader& (0+255),b
 12295  00042C  2B7F               	incf	??_tcp_parseHeader& (0+255),f,b
 12296  00042E  D002               	goto	u12788
 12297  000430                     u12770:
 12298  000430  0100               	movlb	0	; () banked
 12299  000432  6B7F               	clrf	??_tcp_parseHeader& (0+255),b
 12300  000434                     u12788:
 12301  000434  EE20 F00D          	lfsr	2,13
 12302  000438  517D               	movf	tcp_parseHeader@header& (0+255),w,b
 12303  00043A  26D9               	addwf	fsr2l,f,c
 12304  00043C  517E               	movf	(tcp_parseHeader@header+1)& (0+255),w,b
 12305  00043E  22DA               	addwfc	fsr2h,f,c
 12306  000440  477F               	rlncf	??_tcp_parseHeader& (0+255),f,b
 12307  000442  477F               	rlncf	??_tcp_parseHeader& (0+255),f,b
 12308  000444  477F               	rlncf	??_tcp_parseHeader& (0+255),f,b
 12309  000446  50DF               	movf	223,w,c
 12310  000448  197F               	xorwf	??_tcp_parseHeader& (0+255),w,b
 12311  00044A  0BF7               	andlw	-9
 12312  00044C  197F               	xorwf	??_tcp_parseHeader& (0+255),w,b
 12313  00044E  6EDF               	movwf	223,c
 12314                           
 12315                           ; BSR set to: 0
 12316                           ;tcp.c: 96: header->flags.ACK = temp & (0x01 << 4) ? 1 : 0;
 12317  000450  A984               	btfss	tcp_parseHeader@temp& (0+255),4,b
 12318  000452  D003               	goto	u12790
 12319  000454  6B7F               	clrf	??_tcp_parseHeader& (0+255),b
 12320  000456  2B7F               	incf	??_tcp_parseHeader& (0+255),f,b
 12321  000458  D002               	goto	u12808
 12322  00045A                     u12790:
 12323  00045A  0100               	movlb	0	; () banked
 12324  00045C  6B7F               	clrf	??_tcp_parseHeader& (0+255),b
 12325  00045E                     u12808:
 12326  00045E  EE20 F00D          	lfsr	2,13
 12327  000462  517D               	movf	tcp_parseHeader@header& (0+255),w,b
 12328  000464  26D9               	addwf	fsr2l,f,c
 12329  000466  517E               	movf	(tcp_parseHeader@header+1)& (0+255),w,b
 12330  000468  22DA               	addwfc	fsr2h,f,c
 12331  00046A  3B7F               	swapf	??_tcp_parseHeader& (0+255),f,b
 12332  00046C  50DF               	movf	223,w,c
 12333  00046E  197F               	xorwf	??_tcp_parseHeader& (0+255),w,b
 12334  000470  0BEF               	andlw	-17
 12335  000472  197F               	xorwf	??_tcp_parseHeader& (0+255),w,b
 12336  000474  6EDF               	movwf	223,c
 12337                           
 12338                           ; BSR set to: 0
 12339                           ;tcp.c: 97: header->flags.PSH = temp & (0x01 << 3) ? 1 : 0;
 12340  000476  A784               	btfss	tcp_parseHeader@temp& (0+255),3,b
 12341  000478  D003               	goto	u12810
 12342  00047A  6B7F               	clrf	??_tcp_parseHeader& (0+255),b
 12343  00047C  2B7F               	incf	??_tcp_parseHeader& (0+255),f,b
 12344  00047E  D002               	goto	u12828
 12345  000480                     u12810:
 12346  000480  0100               	movlb	0	; () banked
 12347  000482  6B7F               	clrf	??_tcp_parseHeader& (0+255),b
 12348  000484                     u12828:
 12349  000484  EE20 F00D          	lfsr	2,13
 12350  000488  517D               	movf	tcp_parseHeader@header& (0+255),w,b
 12351  00048A  26D9               	addwf	fsr2l,f,c
 12352  00048C  517E               	movf	(tcp_parseHeader@header+1)& (0+255),w,b
 12353  00048E  22DA               	addwfc	fsr2h,f,c
 12354  000490  3B7F               	swapf	??_tcp_parseHeader& (0+255),f,b
 12355  000492  477F               	rlncf	??_tcp_parseHeader& (0+255),f,b
 12356  000494  50DF               	movf	223,w,c
 12357  000496  197F               	xorwf	??_tcp_parseHeader& (0+255),w,b
 12358  000498  0BDF               	andlw	-33
 12359  00049A  197F               	xorwf	??_tcp_parseHeader& (0+255),w,b
 12360  00049C  6EDF               	movwf	223,c
 12361                           
 12362                           ; BSR set to: 0
 12363                           ;tcp.c: 98: header->flags.RST = temp & (0x01 << 2) ? 1 : 0;
 12364  00049E  A584               	btfss	tcp_parseHeader@temp& (0+255),2,b
 12365  0004A0  D003               	goto	u12830
 12366  0004A2  6B7F               	clrf	??_tcp_parseHeader& (0+255),b
 12367  0004A4  2B7F               	incf	??_tcp_parseHeader& (0+255),f,b
 12368  0004A6  D002               	goto	u12848
 12369  0004A8                     u12830:
 12370  0004A8  0100               	movlb	0	; () banked
 12371  0004AA  6B7F               	clrf	??_tcp_parseHeader& (0+255),b
 12372  0004AC                     u12848:
 12373  0004AC  EE20 F00D          	lfsr	2,13
 12374  0004B0  517D               	movf	tcp_parseHeader@header& (0+255),w,b
 12375  0004B2  26D9               	addwf	fsr2l,f,c
 12376  0004B4  517E               	movf	(tcp_parseHeader@header+1)& (0+255),w,b
 12377  0004B6  22DA               	addwfc	fsr2h,f,c
 12378  0004B8  3B7F               	swapf	??_tcp_parseHeader& (0+255),f,b
 12379  0004BA  477F               	rlncf	??_tcp_parseHeader& (0+255),f,b
 12380  0004BC  477F               	rlncf	??_tcp_parseHeader& (0+255),f,b
 12381  0004BE  50DF               	movf	223,w,c
 12382  0004C0  197F               	xorwf	??_tcp_parseHeader& (0+255),w,b
 12383  0004C2  0BBF               	andlw	-65
 12384  0004C4  197F               	xorwf	??_tcp_parseHeader& (0+255),w,b
 12385  0004C6  6EDF               	movwf	223,c
 12386                           
 12387                           ; BSR set to: 0
 12388                           ;tcp.c: 99: header->flags.SYN = temp & (0x01 << 1) ? 1 : 0;
 12389  0004C8  A384               	btfss	tcp_parseHeader@temp& (0+255),1,b
 12390  0004CA  D003               	goto	u12850
 12391  0004CC  6B7F               	clrf	??_tcp_parseHeader& (0+255),b
 12392  0004CE  2B7F               	incf	??_tcp_parseHeader& (0+255),f,b
 12393  0004D0  D002               	goto	u12868
 12394  0004D2                     u12850:
 12395  0004D2  0100               	movlb	0	; () banked
 12396  0004D4  6B7F               	clrf	??_tcp_parseHeader& (0+255),b
 12397  0004D6                     u12868:
 12398  0004D6  EE20 F00D          	lfsr	2,13
 12399  0004DA  517D               	movf	tcp_parseHeader@header& (0+255),w,b
 12400  0004DC  26D9               	addwf	fsr2l,f,c
 12401  0004DE  517E               	movf	(tcp_parseHeader@header+1)& (0+255),w,b
 12402  0004E0  22DA               	addwfc	fsr2h,f,c
 12403  0004E2  337F               	rrcf	??_tcp_parseHeader& (0+255),f,b
 12404  0004E4  337F               	rrcf	??_tcp_parseHeader& (0+255),f,b
 12405  0004E6  50DF               	movf	223,w,c
 12406  0004E8  197F               	xorwf	??_tcp_parseHeader& (0+255),w,b
 12407  0004EA  0B7F               	andlw	-129
 12408  0004EC  197F               	xorwf	??_tcp_parseHeader& (0+255),w,b
 12409  0004EE  6EDF               	movwf	223,c
 12410                           
 12411                           ; BSR set to: 0
 12412                           ;tcp.c: 100: header->flags.FIN = temp & (0x01 << 0) ? 1 : 0;
 12413  0004F0  A184               	btfss	tcp_parseHeader@temp& (0+255),0,b
 12414  0004F2  D003               	goto	u12870
 12415  0004F4  6B7F               	clrf	??_tcp_parseHeader& (0+255),b
 12416  0004F6  2B7F               	incf	??_tcp_parseHeader& (0+255),f,b
 12417  0004F8  D002               	goto	u12888
 12418  0004FA                     u12870:
 12419  0004FA  0100               	movlb	0	; () banked
 12420  0004FC  6B7F               	clrf	??_tcp_parseHeader& (0+255),b
 12421  0004FE                     u12888:
 12422  0004FE  EE20 F00E          	lfsr	2,14
 12423  000502  517D               	movf	tcp_parseHeader@header& (0+255),w,b
 12424  000504  26D9               	addwf	fsr2l,f,c
 12425  000506  517E               	movf	(tcp_parseHeader@header+1)& (0+255),w,b
 12426  000508  22DA               	addwfc	fsr2h,f,c
 12427  00050A  50DF               	movf	223,w,c
 12428  00050C  197F               	xorwf	??_tcp_parseHeader& (0+255),w,b
 12429  00050E  0BFE               	andlw	-2
 12430  000510  197F               	xorwf	??_tcp_parseHeader& (0+255),w,b
 12431  000512  6EDF               	movwf	223,c
 12432                           
 12433                           ;tcp.c: 101: header->windowSize = ((uint16_t) ethernetController_streamFromRXBuffer(1, i
      +                          pPayload.start) << 8);
 12434  000514  C074  F06F         	movff	tcp_parseHeader@ipPayload,ethernetController_streamFromRXBuffer@startAddress
 12435  000518  C075  F070         	movff	tcp_parseHeader@ipPayload+1,ethernetController_streamFromRXBuffer@startAddress+1
 12436  00051C  0E01               	movlw	1
 12437  00051E  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 12438  000522  0100               	movlb	0	; () banked
 12439  000524  6F7F               	movwf	??_tcp_parseHeader& (0+255),b
 12440  000526  517F               	movf	??_tcp_parseHeader& (0+255),w,b
 12441  000528  6F81               	movwf	(??_tcp_parseHeader+2)& (0+255),b
 12442  00052A  6B80               	clrf	(??_tcp_parseHeader+1)& (0+255),b
 12443  00052C  EE20 F00F          	lfsr	2,15
 12444  000530  517D               	movf	tcp_parseHeader@header& (0+255),w,b
 12445  000532  26D9               	addwf	fsr2l,f,c
 12446  000534  517E               	movf	(tcp_parseHeader@header+1)& (0+255),w,b
 12447  000536  22DA               	addwfc	fsr2h,f,c
 12448  000538  C080  FFDE         	movff	??_tcp_parseHeader+1,postinc2
 12449  00053C  C081  FFDD         	movff	??_tcp_parseHeader+2,postdec2
 12450                           
 12451                           ;tcp.c: 102: header->windowSize |= (uint16_t) ethernetController_streamFromRXBuffer(1, i
      +                          pPayload.start);
 12452  000540  C074  F06F         	movff	tcp_parseHeader@ipPayload,ethernetController_streamFromRXBuffer@startAddress
 12453  000544  C075  F070         	movff	tcp_parseHeader@ipPayload+1,ethernetController_streamFromRXBuffer@startAddress+1
 12454  000548  0E01               	movlw	1
 12455  00054A  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 12456  00054E  0100               	movlb	0	; () banked
 12457  000550  6F7F               	movwf	??_tcp_parseHeader& (0+255),b
 12458  000552  6B80               	clrf	(??_tcp_parseHeader+1)& (0+255),b
 12459  000554  EE20 F00F          	lfsr	2,15
 12460  000558  517D               	movf	tcp_parseHeader@header& (0+255),w,b
 12461  00055A  26D9               	addwf	fsr2l,f,c
 12462  00055C  517E               	movf	(tcp_parseHeader@header+1)& (0+255),w,b
 12463  00055E  22DA               	addwfc	fsr2h,f,c
 12464  000560  517F               	movf	??_tcp_parseHeader& (0+255),w,b
 12465  000562  12DE               	iorwf	postinc2,f,c
 12466  000564  5180               	movf	(??_tcp_parseHeader+1)& (0+255),w,b
 12467  000566  12DD               	iorwf	postdec2,f,c
 12468                           
 12469                           ;tcp.c: 103: header->checksum = ((uint16_t) ethernetController_streamFromRXBuffer(1, ipP
      +                          ayload.start) << 8);
 12470  000568  C074  F06F         	movff	tcp_parseHeader@ipPayload,ethernetController_streamFromRXBuffer@startAddress
 12471  00056C  C075  F070         	movff	tcp_parseHeader@ipPayload+1,ethernetController_streamFromRXBuffer@startAddress+1
 12472  000570  0E01               	movlw	1
 12473  000572  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 12474  000576  0100               	movlb	0	; () banked
 12475  000578  6F7F               	movwf	??_tcp_parseHeader& (0+255),b
 12476  00057A  517F               	movf	??_tcp_parseHeader& (0+255),w,b
 12477  00057C  6F81               	movwf	(??_tcp_parseHeader+2)& (0+255),b
 12478  00057E  6B80               	clrf	(??_tcp_parseHeader+1)& (0+255),b
 12479  000580  EE20 F011          	lfsr	2,17
 12480  000584  517D               	movf	tcp_parseHeader@header& (0+255),w,b
 12481  000586  26D9               	addwf	fsr2l,f,c
 12482  000588  517E               	movf	(tcp_parseHeader@header+1)& (0+255),w,b
 12483  00058A  22DA               	addwfc	fsr2h,f,c
 12484  00058C  C080  FFDE         	movff	??_tcp_parseHeader+1,postinc2
 12485  000590  C081  FFDD         	movff	??_tcp_parseHeader+2,postdec2
 12486                           
 12487                           ;tcp.c: 104: header->checksum |= (uint16_t) ethernetController_streamFromRXBuffer(1, ipP
      +                          ayload.start);
 12488  000594  C074  F06F         	movff	tcp_parseHeader@ipPayload,ethernetController_streamFromRXBuffer@startAddress
 12489  000598  C075  F070         	movff	tcp_parseHeader@ipPayload+1,ethernetController_streamFromRXBuffer@startAddress+1
 12490  00059C  0E01               	movlw	1
 12491  00059E  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 12492  0005A2  0100               	movlb	0	; () banked
 12493  0005A4  6F7F               	movwf	??_tcp_parseHeader& (0+255),b
 12494  0005A6  6B80               	clrf	(??_tcp_parseHeader+1)& (0+255),b
 12495  0005A8  EE20 F011          	lfsr	2,17
 12496  0005AC  517D               	movf	tcp_parseHeader@header& (0+255),w,b
 12497  0005AE  26D9               	addwf	fsr2l,f,c
 12498  0005B0  517E               	movf	(tcp_parseHeader@header+1)& (0+255),w,b
 12499  0005B2  22DA               	addwfc	fsr2h,f,c
 12500  0005B4  517F               	movf	??_tcp_parseHeader& (0+255),w,b
 12501  0005B6  12DE               	iorwf	postinc2,f,c
 12502  0005B8  5180               	movf	(??_tcp_parseHeader+1)& (0+255),w,b
 12503  0005BA  12DD               	iorwf	postdec2,f,c
 12504                           
 12505                           ;tcp.c: 105: header->urgentPointer = ((uint16_t) ethernetController_streamFromRXBuffer(1
      +                          , ipPayload.start) << 8);
 12506  0005BC  C074  F06F         	movff	tcp_parseHeader@ipPayload,ethernetController_streamFromRXBuffer@startAddress
 12507  0005C0  C075  F070         	movff	tcp_parseHeader@ipPayload+1,ethernetController_streamFromRXBuffer@startAddress+1
 12508  0005C4  0E01               	movlw	1
 12509  0005C6  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 12510  0005CA  0100               	movlb	0	; () banked
 12511  0005CC  6F7F               	movwf	??_tcp_parseHeader& (0+255),b
 12512  0005CE  517F               	movf	??_tcp_parseHeader& (0+255),w,b
 12513  0005D0  6F81               	movwf	(??_tcp_parseHeader+2)& (0+255),b
 12514  0005D2  6B80               	clrf	(??_tcp_parseHeader+1)& (0+255),b
 12515  0005D4  EE20 F013          	lfsr	2,19
 12516  0005D8  517D               	movf	tcp_parseHeader@header& (0+255),w,b
 12517  0005DA  26D9               	addwf	fsr2l,f,c
 12518  0005DC  517E               	movf	(tcp_parseHeader@header+1)& (0+255),w,b
 12519  0005DE  22DA               	addwfc	fsr2h,f,c
 12520  0005E0  C080  FFDE         	movff	??_tcp_parseHeader+1,postinc2
 12521  0005E4  C081  FFDD         	movff	??_tcp_parseHeader+2,postdec2
 12522                           
 12523                           ;tcp.c: 106: header->urgentPointer |= (uint16_t) ethernetController_streamFromRXBuffer(1
      +                          , ipPayload.start);
 12524  0005E8  C074  F06F         	movff	tcp_parseHeader@ipPayload,ethernetController_streamFromRXBuffer@startAddress
 12525  0005EC  C075  F070         	movff	tcp_parseHeader@ipPayload+1,ethernetController_streamFromRXBuffer@startAddress+1
 12526  0005F0  0E01               	movlw	1
 12527  0005F2  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 12528  0005F6  0100               	movlb	0	; () banked
 12529  0005F8  6F7F               	movwf	??_tcp_parseHeader& (0+255),b
 12530  0005FA  6B80               	clrf	(??_tcp_parseHeader+1)& (0+255),b
 12531  0005FC  EE20 F013          	lfsr	2,19
 12532  000600  517D               	movf	tcp_parseHeader@header& (0+255),w,b
 12533  000602  26D9               	addwf	fsr2l,f,c
 12534  000604  517E               	movf	(tcp_parseHeader@header+1)& (0+255),w,b
 12535  000606  22DA               	addwfc	fsr2h,f,c
 12536  000608  517F               	movf	??_tcp_parseHeader& (0+255),w,b
 12537  00060A  12DE               	iorwf	postinc2,f,c
 12538  00060C  5180               	movf	(??_tcp_parseHeader+1)& (0+255),w,b
 12539  00060E  12DD               	iorwf	postdec2,f,c
 12540                           
 12541                           ;tcp.c: 107: ethernetController_streamFromRXBuffer(2, ipPayload.start);
 12542  000610  C074  F06F         	movff	tcp_parseHeader@ipPayload,ethernetController_streamFromRXBuffer@startAddress
 12543  000614  C075  F070         	movff	tcp_parseHeader@ipPayload+1,ethernetController_streamFromRXBuffer@startAddress+1
 12544  000618  0E02               	movlw	2
 12545  00061A  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 12546  00061E  0012               	return		;funcret
 12547  000620                     __end_of_tcp_parseHeader:
 12548                           	opt stack 0
 12549                           tblptru	equ	0xFF8
 12550                           tblptrh	equ	0xFF7
 12551                           tblptrl	equ	0xFF6
 12552                           tablat	equ	0xFF5
 12553                           prodh	equ	0xFF4
 12554                           prodl	equ	0xFF3
 12555                           intcon	equ	0xFF2
 12556                           intcon3	equ	0xFF0
 12557                           indf0	equ	0xFEF
 12558                           postinc0	equ	0xFEE
 12559                           plusw0	equ	0xFEB
 12560                           fsr0h	equ	0xFEA
 12561                           fsr0l	equ	0xFE9
 12562                           wreg	equ	0xFE8
 12563                           indf1	equ	0xFE7
 12564                           postinc1	equ	0xFE6
 12565                           postdec1	equ	0xFE5
 12566                           plusw1	equ	0xFE3
 12567                           fsr1h	equ	0xFE2
 12568                           fsr1l	equ	0xFE1
 12569                           indf2	equ	0xFDF
 12570                           postinc2	equ	0xFDE
 12571                           postdec2	equ	0xFDD
 12572                           plusw2	equ	0xFDB
 12573                           fsr2h	equ	0xFDA
 12574                           fsr2l	equ	0xFD9
 12575                           status	equ	0xFD8
 12576                           
 12577 ;; *************** function _ipv4_parseHeader *****************
 12578 ;; Defined at:
 12579 ;;		line 154 in file "src/stack/protocols/ipv4.c"
 12580 ;; Parameters:    Size  Location     Type
 12581 ;;  field           2   20[BANK0 ] PTR struct memoryField
 12582 ;;		 -> ipv4_handleNewPacket@headerField(9), 
 12583 ;; Auto vars:     Size  Location     Type
 12584 ;;  i               1   45[BANK0 ] unsigned char 
 12585 ;;  i               1   44[BANK0 ] unsigned char 
 12586 ;;  ip             23   47[BANK0 ] struct ipv4_header
 12587 ;;  temp            1   46[BANK0 ] unsigned char 
 12588 ;; Return value:  Size  Location     Type
 12589 ;;                  23   20[BANK0 ] struct ipv4_header
 12590 ;; Registers used:
 12591 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12592 ;; Tracked objects:
 12593 ;;		On entry : 0/0
 12594 ;;		On exit  : 0/0
 12595 ;;		Unchanged: 0/0
 12596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12597 ;;      Params:         0      23       0       0       0       0       0       0       0
 12598 ;;      Locals:         0      26       0       0       0       0       0       0       0
 12599 ;;      Temps:          0       1       0       0       0       0       0       0       0
 12600 ;;      Totals:         0      50       0       0       0       0       0       0       0
 12601 ;;Total ram usage:       50 bytes
 12602 ;; Hardware stack levels used:    1
 12603 ;; Hardware stack levels required when called:    8
 12604 ;; This function calls:
 12605 ;;		_ethernetController_streamFromRXBuffer
 12606 ;; This function is called by:
 12607 ;;		_ipv4_handleNewPacket
 12608 ;; This function uses a non-reentrant model
 12609 ;;
 12610                           
 12611                           	psect	text34
 12612  0033CC                     __ptext34:
 12613                           	opt stack 0
 12614  0033CC                     _ipv4_parseHeader:
 12615                           	opt stack 19
 12616                           
 12617                           ;ipv4.c: 155: ipv4_header_t ip;
 12618                           ;ipv4.c: 156: uint8_t temp;
 12619                           ;ipv4.c: 158: ethernetController_streamFromRXBuffer(0, field->start);
 12620                           
 12621                           ;incstack = 0
 12622  0033CC  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
 12623  0033D0  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
 12624  0033D4  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
 12625  0033D8  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
 12626  0033DC  0E00               	movlw	0
 12627  0033DE  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 12628                           
 12629                           ;ipv4.c: 160: temp = ethernetController_streamFromRXBuffer(1, field->start);
 12630  0033E2  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
 12631  0033E6  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
 12632  0033EA  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
 12633  0033EE  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
 12634  0033F2  0E01               	movlw	1
 12635  0033F4  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 12636  0033F8  0100               	movlb	0	; () banked
 12637  0033FA  6F8E               	movwf	ipv4_parseHeader@temp& (0+255),b
 12638                           
 12639                           ; BSR set to: 0
 12640                           ;ipv4.c: 161: ip.version = (temp & 0xf0) >> 4;
 12641  0033FC  398E               	swapf	ipv4_parseHeader@temp& (0+255),w,b
 12642  0033FE  0B0F               	andlw	15
 12643  003400  0B0F               	andlw	15
 12644  003402  6F8F               	movwf	ipv4_parseHeader@ip& (0+255),b
 12645                           
 12646                           ; BSR set to: 0
 12647                           ;ipv4.c: 162: ip.headerLength = temp & 0x0f;
 12648  003404  518E               	movf	ipv4_parseHeader@temp& (0+255),w,b
 12649  003406  0B0F               	andlw	15
 12650  003408  6F90               	movwf	(ipv4_parseHeader@ip+1)& (0+255),b
 12651                           
 12652                           ;ipv4.c: 164: temp = ethernetController_streamFromRXBuffer(1, field->start);
 12653  00340A  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
 12654  00340E  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
 12655  003412  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
 12656  003416  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
 12657  00341A  0E01               	movlw	1
 12658  00341C  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 12659  003420  0100               	movlb	0	; () banked
 12660  003422  6F8E               	movwf	ipv4_parseHeader@temp& (0+255),b
 12661                           
 12662                           ; BSR set to: 0
 12663                           ;ipv4.c: 165: ip.dscp = (temp & 0x1f);
 12664  003424  518E               	movf	ipv4_parseHeader@temp& (0+255),w,b
 12665  003426  0B1F               	andlw	31
 12666  003428  6F91               	movwf	(ipv4_parseHeader@ip+2)& (0+255),b
 12667                           
 12668                           ; BSR set to: 0
 12669                           ;ipv4.c: 166: ip.ecn = (temp & 0xC0) >> 6;
 12670  00342A  458E               	rlncf	ipv4_parseHeader@temp& (0+255),w,b
 12671  00342C  46E8               	rlncf	wreg,f,c
 12672  00342E  0B03               	andlw	3
 12673  003430  0B03               	andlw	3
 12674  003432  6F92               	movwf	(ipv4_parseHeader@ip+3)& (0+255),b
 12675                           
 12676                           ;ipv4.c: 168: ip.totalLength = (ethernetController_streamFromRXBuffer(1, field->start) <
      +                          < 8);
 12677  003434  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
 12678  003438  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
 12679  00343C  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
 12680  003440  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
 12681  003444  0E01               	movlw	1
 12682  003446  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 12683  00344A  0100               	movlb	0	; () banked
 12684  00344C  6F94               	movwf	(ipv4_parseHeader@ip+5)& (0+255),b
 12685  00344E  6B93               	clrf	(ipv4_parseHeader@ip+4)& (0+255),b
 12686                           
 12687                           ;ipv4.c: 169: ip.totalLength |= ethernetController_streamFromRXBuffer(1, field->start);
 12688  003450  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
 12689  003454  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
 12690  003458  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
 12691  00345C  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
 12692  003460  0E01               	movlw	1
 12693  003462  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 12694  003466  0100               	movlb	0	; () banked
 12695  003468  6F8B               	movwf	??_ipv4_parseHeader& (0+255),b
 12696  00346A  518B               	movf	??_ipv4_parseHeader& (0+255),w,b
 12697  00346C  1393               	iorwf	(ipv4_parseHeader@ip+4)& (0+255),f,b
 12698                           
 12699                           ;ipv4.c: 171: ip.identification = (ethernetController_streamFromRXBuffer(1, field->start
      +                          ) << 8);
 12700  00346E  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
 12701  003472  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
 12702  003476  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
 12703  00347A  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
 12704  00347E  0E01               	movlw	1
 12705  003480  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 12706  003484  0100               	movlb	0	; () banked
 12707  003486  6F96               	movwf	(ipv4_parseHeader@ip+7)& (0+255),b
 12708  003488  6B95               	clrf	(ipv4_parseHeader@ip+6)& (0+255),b
 12709                           
 12710                           ;ipv4.c: 172: ip.identification |= ethernetController_streamFromRXBuffer(1, field->start
      +                          );
 12711  00348A  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
 12712  00348E  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
 12713  003492  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
 12714  003496  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
 12715  00349A  0E01               	movlw	1
 12716  00349C  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 12717  0034A0  0100               	movlb	0	; () banked
 12718  0034A2  6F8B               	movwf	??_ipv4_parseHeader& (0+255),b
 12719  0034A4  518B               	movf	??_ipv4_parseHeader& (0+255),w,b
 12720  0034A6  1395               	iorwf	(ipv4_parseHeader@ip+6)& (0+255),f,b
 12721                           
 12722                           ;ipv4.c: 174: temp = ethernetController_streamFromRXBuffer(1, field->start);
 12723  0034A8  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
 12724  0034AC  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
 12725  0034B0  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
 12726  0034B4  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
 12727  0034B8  0E01               	movlw	1
 12728  0034BA  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 12729  0034BE  0100               	movlb	0	; () banked
 12730  0034C0  6F8E               	movwf	ipv4_parseHeader@temp& (0+255),b
 12731                           
 12732                           ; BSR set to: 0
 12733                           ;ipv4.c: 175: ip.flags = ((temp & 0xE0) >> 5);
 12734  0034C2  398E               	swapf	ipv4_parseHeader@temp& (0+255),w,b
 12735  0034C4  42E8               	rrncf	wreg,f,c
 12736  0034C6  0B07               	andlw	7
 12737  0034C8  0B07               	andlw	7
 12738  0034CA  6F97               	movwf	(ipv4_parseHeader@ip+8)& (0+255),b
 12739                           
 12740                           ; BSR set to: 0
 12741                           ;ipv4.c: 176: ip.fragmentOffset = ((temp & 0x1f) << 8);
 12742  0034CC  518E               	movf	ipv4_parseHeader@temp& (0+255),w,b
 12743  0034CE  0B1F               	andlw	31
 12744  0034D0  6F99               	movwf	(ipv4_parseHeader@ip+10)& (0+255),b
 12745  0034D2  6B98               	clrf	(ipv4_parseHeader@ip+9)& (0+255),b
 12746                           
 12747                           ;ipv4.c: 178: ip.fragmentOffset |= ethernetController_streamFromRXBuffer(1, field->start
      +                          );
 12748  0034D4  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
 12749  0034D8  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
 12750  0034DC  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
 12751  0034E0  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
 12752  0034E4  0E01               	movlw	1
 12753  0034E6  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 12754  0034EA  0100               	movlb	0	; () banked
 12755  0034EC  6F8B               	movwf	??_ipv4_parseHeader& (0+255),b
 12756  0034EE  518B               	movf	??_ipv4_parseHeader& (0+255),w,b
 12757  0034F0  1398               	iorwf	(ipv4_parseHeader@ip+9)& (0+255),f,b
 12758                           
 12759                           ;ipv4.c: 180: ip.timeToLive = ethernetController_streamFromRXBuffer(1, field->start);
 12760  0034F2  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
 12761  0034F6  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
 12762  0034FA  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
 12763  0034FE  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
 12764  003502  0E01               	movlw	1
 12765  003504  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 12766  003508  0100               	movlb	0	; () banked
 12767  00350A  6F9A               	movwf	(ipv4_parseHeader@ip+11)& (0+255),b
 12768                           
 12769                           ;ipv4.c: 182: ip.protocol = ethernetController_streamFromRXBuffer(1, field->start);
 12770  00350C  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
 12771  003510  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
 12772  003514  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
 12773  003518  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
 12774  00351C  0E01               	movlw	1
 12775  00351E  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 12776  003522  0100               	movlb	0	; () banked
 12777  003524  6F9B               	movwf	(ipv4_parseHeader@ip+12)& (0+255),b
 12778                           
 12779                           ;ipv4.c: 184: ip.checksum = (ethernetController_streamFromRXBuffer(1, field->start) << 8
      +                          );
 12780  003526  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
 12781  00352A  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
 12782  00352E  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
 12783  003532  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
 12784  003536  0E01               	movlw	1
 12785  003538  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 12786  00353C  0100               	movlb	0	; () banked
 12787  00353E  6F9D               	movwf	(ipv4_parseHeader@ip+14)& (0+255),b
 12788  003540  6B9C               	clrf	(ipv4_parseHeader@ip+13)& (0+255),b
 12789                           
 12790                           ;ipv4.c: 185: ip.checksum |= ethernetController_streamFromRXBuffer(1, field->start);
 12791  003542  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
 12792  003546  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
 12793  00354A  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
 12794  00354E  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
 12795  003552  0E01               	movlw	1
 12796  003554  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 12797  003558  0100               	movlb	0	; () banked
 12798  00355A  6F8B               	movwf	??_ipv4_parseHeader& (0+255),b
 12799  00355C  518B               	movf	??_ipv4_parseHeader& (0+255),w,b
 12800  00355E  139C               	iorwf	(ipv4_parseHeader@ip+13)& (0+255),f,b
 12801                           
 12802                           ; BSR set to: 0
 12803                           ;ipv4.c: 187: for (uint8_t i = 0; i < 4; i++)
 12804  003560  0E00               	movlw	0
 12805  003562  6F8C               	movwf	ipv4_parseHeader@i& (0+255),b
 12806  003564                     l11248:
 12807                           
 12808                           ; BSR set to: 0
 12809  003564  0E03               	movlw	3
 12810  003566  658C               	cpfsgt	ipv4_parseHeader@i& (0+255),b
 12811  003568  D001               	goto	l1152
 12812  00356A  D01D               	goto	u13750
 12813  00356C                     l1152:
 12814                           
 12815                           ; BSR set to: 0
 12816                           ;ipv4.c: 188: ip.source.address[i] = ethernetController_streamFromRXBuffer(1, field->sta
      +                          rt);
 12817                           
 12818                           ; BSR set to: 0
 12819  00356C  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
 12820  003570  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
 12821  003574  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
 12822  003578  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
 12823  00357C  0E01               	movlw	1
 12824  00357E  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 12825  003582  0100               	movlb	0	; () banked
 12826  003584  6F8B               	movwf	??_ipv4_parseHeader& (0+255),b
 12827  003586  518C               	movf	ipv4_parseHeader@i& (0+255),w,b
 12828  003588  0D01               	mullw	1
 12829  00358A  0E0F               	movlw	15
 12830  00358C  26F3               	addwf	prodl,f,c
 12831  00358E  0E00               	movlw	0
 12832  003590  22F4               	addwfc	prodh,f,c
 12833  003592  0E8F               	movlw	low ipv4_parseHeader@ip
 12834  003594  24F3               	addwf	prodl,w,c
 12835  003596  6ED9               	movwf	fsr2l,c
 12836  003598  0E00               	movlw	high ipv4_parseHeader@ip
 12837  00359A  20F4               	addwfc	prodh,w,c
 12838  00359C  6EDA               	movwf	fsr2h,c
 12839  00359E  C08B  FFDF         	movff	??_ipv4_parseHeader,indf2
 12840                           
 12841                           ; BSR set to: 0
 12842  0035A2  2B8C               	incf	ipv4_parseHeader@i& (0+255),f,b
 12843  0035A4  D7DF               	goto	l11248
 12844  0035A6                     u13750:
 12845                           
 12846                           ; BSR set to: 0
 12847                           ;ipv4.c: 190: for (uint8_t i = 0; i < 4; i++)
 12848                           
 12849                           ; BSR set to: 0
 12850  0035A6  0E00               	movlw	0
 12851  0035A8  6F8D               	movwf	ipv4_parseHeader@i_3860& (0+255),b
 12852  0035AA                     l11260:
 12853                           
 12854                           ; BSR set to: 0
 12855  0035AA  0E03               	movlw	3
 12856  0035AC  658D               	cpfsgt	ipv4_parseHeader@i_3860& (0+255),b
 12857  0035AE  D001               	goto	l1154
 12858  0035B0  D01D               	goto	u13770
 12859  0035B2                     l1154:
 12860                           
 12861                           ; BSR set to: 0
 12862                           ;ipv4.c: 191: ip.destination.address[i] = ethernetController_streamFromRXBuffer(1, field
      +                          ->start);
 12863                           
 12864                           ; BSR set to: 0
 12865  0035B2  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
 12866  0035B6  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
 12867  0035BA  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
 12868  0035BE  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
 12869  0035C2  0E01               	movlw	1
 12870  0035C4  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 12871  0035C8  0100               	movlb	0	; () banked
 12872  0035CA  6F8B               	movwf	??_ipv4_parseHeader& (0+255),b
 12873  0035CC  518D               	movf	ipv4_parseHeader@i_3860& (0+255),w,b
 12874  0035CE  0D01               	mullw	1
 12875  0035D0  0E13               	movlw	19
 12876  0035D2  26F3               	addwf	prodl,f,c
 12877  0035D4  0E00               	movlw	0
 12878  0035D6  22F4               	addwfc	prodh,f,c
 12879  0035D8  0E8F               	movlw	low ipv4_parseHeader@ip
 12880  0035DA  24F3               	addwf	prodl,w,c
 12881  0035DC  6ED9               	movwf	fsr2l,c
 12882  0035DE  0E00               	movlw	high ipv4_parseHeader@ip
 12883  0035E0  20F4               	addwfc	prodh,w,c
 12884  0035E2  6EDA               	movwf	fsr2h,c
 12885  0035E4  C08B  FFDF         	movff	??_ipv4_parseHeader,indf2
 12886                           
 12887                           ; BSR set to: 0
 12888  0035E8  2B8D               	incf	ipv4_parseHeader@i_3860& (0+255),f,b
 12889  0035EA  D7DF               	goto	l11260
 12890  0035EC                     u13770:
 12891                           
 12892                           ; BSR set to: 0
 12893                           ;ipv4.c: 193: ethernetController_streamFromRXBuffer(2, field->start);
 12894                           
 12895                           ; BSR set to: 0
 12896  0035EC  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
 12897  0035F0  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
 12898  0035F4  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
 12899  0035F8  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
 12900  0035FC  0E02               	movlw	2
 12901  0035FE  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 12902                           
 12903                           ;ipv4.c: 195: return ip;
 12904  003602  EE20  F08F         	lfsr	2,ipv4_parseHeader@ip
 12905  003606  EE00  F074         	lfsr	0,?_ipv4_parseHeader
 12906  00360A  0E16               	movlw	22
 12907  00360C                     u13781:
 12908  00360C  CFDB FFEB          	movff	plusw2,plusw0
 12909  003610  06E8               	decf	wreg,f,c
 12910  003612  E2FC               	bc	u13781
 12911  003614  0012               	return	
 12912  003616                     __end_of_ipv4_parseHeader:
 12913                           	opt stack 0
 12914                           tblptru	equ	0xFF8
 12915                           tblptrh	equ	0xFF7
 12916                           tblptrl	equ	0xFF6
 12917                           tablat	equ	0xFF5
 12918                           prodh	equ	0xFF4
 12919                           prodl	equ	0xFF3
 12920                           intcon	equ	0xFF2
 12921                           intcon3	equ	0xFF0
 12922                           indf0	equ	0xFEF
 12923                           postinc0	equ	0xFEE
 12924                           plusw0	equ	0xFEB
 12925                           fsr0h	equ	0xFEA
 12926                           fsr0l	equ	0xFE9
 12927                           wreg	equ	0xFE8
 12928                           indf1	equ	0xFE7
 12929                           postinc1	equ	0xFE6
 12930                           postdec1	equ	0xFE5
 12931                           plusw1	equ	0xFE3
 12932                           fsr1h	equ	0xFE2
 12933                           fsr1l	equ	0xFE1
 12934                           indf2	equ	0xFDF
 12935                           postinc2	equ	0xFDE
 12936                           postdec2	equ	0xFDD
 12937                           plusw2	equ	0xFDB
 12938                           fsr2h	equ	0xFDA
 12939                           fsr2l	equ	0xFD9
 12940                           status	equ	0xFD8
 12941                           
 12942 ;; *************** function _ipv4_checkHeaderChecksum *****************
 12943 ;; Defined at:
 12944 ;;		line 198 in file "src/stack/protocols/ipv4.c"
 12945 ;; Parameters:    Size  Location     Type
 12946 ;;  header          2   15[BANK0 ] PTR struct ipv4_header
 12947 ;;		 -> ipv4_handleNewPacket@header(23), 
 12948 ;; Auto vars:     Size  Location     Type
 12949 ;;  testHeader     23   19[BANK0 ] struct ipv4_header
 12950 ;; Return value:  Size  Location     Type
 12951 ;;		None               void
 12952 ;; Registers used:
 12953 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 12954 ;; Tracked objects:
 12955 ;;		On entry : 0/0
 12956 ;;		On exit  : 0/0
 12957 ;;		Unchanged: 0/0
 12958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12959 ;;      Params:         0       2       0       0       0       0       0       0       0
 12960 ;;      Locals:         0      23       0       0       0       0       0       0       0
 12961 ;;      Temps:          0       2       0       0       0       0       0       0       0
 12962 ;;      Totals:         0      27       0       0       0       0       0       0       0
 12963 ;;Total ram usage:       27 bytes
 12964 ;; Hardware stack levels used:    1
 12965 ;; Hardware stack levels required when called:    5
 12966 ;; This function calls:
 12967 ;;		_ipv4_calculateHeaderChecksum
 12968 ;; This function is called by:
 12969 ;;		_ipv4_handleNewPacket
 12970 ;; This function uses a non-reentrant model
 12971 ;;
 12972                           
 12973                           	psect	text35
 12974  0065BC                     __ptext35:
 12975                           	opt stack 0
 12976  0065BC                     _ipv4_checkHeaderChecksum:
 12977                           	opt stack 22
 12978                           
 12979                           ;ipv4.c: 199: ipv4_header_t testHeader;
 12980                           ;ipv4.c: 200: testHeader = *header;
 12981                           
 12982                           ;incstack = 0
 12983  0065BC  C06F  FFD9         	movff	ipv4_checkHeaderChecksum@header,fsr2l
 12984  0065C0  C070  FFDA         	movff	ipv4_checkHeaderChecksum@header+1,fsr2h
 12985  0065C4  EE10  F073         	lfsr	1,ipv4_checkHeaderChecksum@testHeader
 12986  0065C8  0E16               	movlw	22
 12987  0065CA                     u13791:
 12988  0065CA  CFDB FFE3          	movff	plusw2,plusw1
 12989  0065CE  06E8               	decf	wreg,f,c
 12990  0065D0  E2FC               	bc	u13791
 12991                           
 12992                           ;ipv4.c: 201: testHeader.checksum = 0x0000;
 12993  0065D2  0E00               	movlw	0
 12994  0065D4  0100               	movlb	0	; () banked
 12995  0065D6  6F81               	movwf	(ipv4_checkHeaderChecksum@testHeader+14)& (0+255),b
 12996  0065D8  0E00               	movlw	0
 12997  0065DA  6F80               	movwf	(ipv4_checkHeaderChecksum@testHeader+13)& (0+255),b
 12998                           
 12999                           ; BSR set to: 0
 13000                           ;ipv4.c: 202: ipv4_calculateHeaderChecksum(&testHeader);
 13001  0065DC  0E73               	movlw	low ipv4_checkHeaderChecksum@testHeader
 13002  0065DE  6F60               	movwf	ipv4_calculateHeaderChecksum@header& (0+255),b
 13003  0065E0  0E00               	movlw	high ipv4_checkHeaderChecksum@testHeader
 13004  0065E2  6F61               	movwf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),b
 13005  0065E4  EC65  F010         	call	_ipv4_calculateHeaderChecksum	;wreg free
 13006                           
 13007                           ;ipv4.c: 203: if (testHeader.checksum == header->checksum) {
 13008  0065E8  0100               	movlb	0	; () banked
 13009  0065EA  EE20 F00D          	lfsr	2,13
 13010  0065EE  516F               	movf	ipv4_checkHeaderChecksum@header& (0+255),w,b
 13011  0065F0  26D9               	addwf	fsr2l,f,c
 13012  0065F2  5170               	movf	(ipv4_checkHeaderChecksum@header+1)& (0+255),w,b
 13013  0065F4  22DA               	addwfc	fsr2h,f,c
 13014  0065F6  50DE               	movf	postinc2,w,c
 13015  0065F8  1980               	xorwf	(ipv4_checkHeaderChecksum@testHeader+13)& (0+255),w,b
 13016  0065FA  E106               	bnz	l11288
 13017  0065FC  50DE               	movf	postinc2,w,c
 13018  0065FE  1981               	xorwf	(ipv4_checkHeaderChecksum@testHeader+14)& (0+255),w,b
 13019  006600  A4D8               	btfss	status,2,c
 13020  006602  D002               	goto	l1159
 13021                           
 13022                           ; BSR set to: 0
 13023                           ;ipv4.c: 204: return 1u;
 13024  006604  80D8               	bsf	status,0,c
 13025                           
 13026                           ; BSR set to: 0
 13027  006606  0012               	return	
 13028  006608                     l1159:
 13029  006608                     l11288:
 13030                           
 13031                           ; BSR set to: 0
 13032                           ;ipv4.c: 205: }
 13033                           ;ipv4.c: 213: return 0u;
 13034  006608  90D8               	bcf	status,0,c
 13035  00660A  0012               	return	
 13036  00660C                     __end_of_ipv4_checkHeaderChecksum:
 13037                           	opt stack 0
 13038                           tblptru	equ	0xFF8
 13039                           tblptrh	equ	0xFF7
 13040                           tblptrl	equ	0xFF6
 13041                           tablat	equ	0xFF5
 13042                           prodh	equ	0xFF4
 13043                           prodl	equ	0xFF3
 13044                           intcon	equ	0xFF2
 13045                           intcon3	equ	0xFF0
 13046                           indf0	equ	0xFEF
 13047                           postinc0	equ	0xFEE
 13048                           plusw0	equ	0xFEB
 13049                           fsr0h	equ	0xFEA
 13050                           fsr0l	equ	0xFE9
 13051                           wreg	equ	0xFE8
 13052                           indf1	equ	0xFE7
 13053                           postinc1	equ	0xFE6
 13054                           postdec1	equ	0xFE5
 13055                           plusw1	equ	0xFE3
 13056                           fsr1h	equ	0xFE2
 13057                           fsr1l	equ	0xFE1
 13058                           indf2	equ	0xFDF
 13059                           postinc2	equ	0xFDE
 13060                           postdec2	equ	0xFDD
 13061                           plusw2	equ	0xFDB
 13062                           fsr2h	equ	0xFDA
 13063                           fsr2l	equ	0xFD9
 13064                           status	equ	0xFD8
 13065                           
 13066 ;; *************** function _icmp_handleNewPacket *****************
 13067 ;; Defined at:
 13068 ;;		line 33 in file "src/stack/protocols/icmp.c"
 13069 ;; Parameters:    Size  Location     Type
 13070 ;;  ipHeader       23  175[BANK1 ] struct ipv4_header
 13071 ;;  ipPayload       9  198[BANK1 ] struct memoryField
 13072 ;; Auto vars:     Size  Location     Type
 13073 ;;  i               2  131[BANK2 ] unsigned int 
 13074 ;;  foo           128    0[BANK2 ] unsigned char [128]
 13075 ;;  icmpHeader      8  133[BANK2 ] struct icmpHeader
 13076 ;;  err             3  128[BANK2 ] struct error
 13077 ;; Return value:  Size  Location     Type
 13078 ;;                  3  175[BANK1 ] struct error
 13079 ;; Registers used:
 13080 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13081 ;; Tracked objects:
 13082 ;;		On entry : 0/0
 13083 ;;		On exit  : 0/0
 13084 ;;		Unchanged: 0/0
 13085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13086 ;;      Params:         0       0      32       0       0       0       0       0       0
 13087 ;;      Locals:         0       0       0     141       0       0       0       0       0
 13088 ;;      Temps:          0       2       0       0       0       0       0       0       0
 13089 ;;      Totals:         0       2      32     141       0       0       0       0       0
 13090 ;;Total ram usage:      175 bytes
 13091 ;; Hardware stack levels used:    1
 13092 ;; Hardware stack levels required when called:   11
 13093 ;; This function calls:
 13094 ;;		_ethernetController_streamFromRXBuffer
 13095 ;;		_icmp_calculateChecksumBuf
 13096 ;;		_icmp_parseHeader
 13097 ;;		_icmp_sendEchoReply
 13098 ;; This function is called by:
 13099 ;;		_ipv4_handleNewPacket
 13100 ;; This function uses a non-reentrant model
 13101 ;;
 13102                           
 13103                           	psect	text36
 13104  004A58                     __ptext36:
 13105                           	opt stack 0
 13106  004A58                     _icmp_handleNewPacket:
 13107                           	opt stack 16
 13108                           
 13109                           ;icmp.c: 34: error_t err;
 13110                           ;icmp.c: 35: icmpHeader_t icmpHeader;
 13111                           ;icmp.c: 37: err.module = ERROR_MODULE_ICMP;
 13112                           
 13113                           ; BSR set to: 0
 13114                           ;incstack = 0
 13115  004A58  0E05               	movlw	5
 13116  004A5A  0102               	movlb	2	; () banked
 13117  004A5C  6F80               	movwf	icmp_handleNewPacket@err& (0+255),b
 13118                           
 13119                           ; BSR set to: 2
 13120                           ;icmp.c: 38: err.code = (uint16_t)0xffff;
 13121  004A5E  6981               	setf	(icmp_handleNewPacket@err+1)& (0+255),b
 13122  004A60  6982               	setf	(icmp_handleNewPacket@err+2)& (0+255),b
 13123                           
 13124                           ; BSR set to: 2
 13125                           ;icmp.c: 40: if (ipPayload.length > 128) {
 13126  004A62  0101               	movlb	1	; () banked
 13127  004A64  51CB               	movf	(icmp_handleNewPacket@ipPayload+5)& (0+255),w,b
 13128  004A66  E104               	bnz	u13810
 13129  004A68  0E81               	movlw	129
 13130  004A6A  5DCA               	subwf	(icmp_handleNewPacket@ipPayload+4)& (0+255),w,b
 13131  004A6C  A0D8               	btfss	status,0,c
 13132  004A6E  D008               	goto	l1270
 13133  004A70                     u13810:
 13134                           
 13135                           ; BSR set to: 1
 13136                           ;icmp.c: 41: err.module = ERROR_ICMP_MESSAGE_TOO_LONG;
 13137  004A70  0E59               	movlw	89
 13138  004A72  0100               	movlb	0	; () banked
 13139  004A74  6FED               	movwf	??_icmp_handleNewPacket& (0+255),b
 13140  004A76  0E02               	movlw	2
 13141  004A78  6FEE               	movwf	(??_icmp_handleNewPacket+1)& (0+255),b
 13142  004A7A  C0ED  F280         	movff	??_icmp_handleNewPacket,icmp_handleNewPacket@err
 13143                           
 13144                           ; BSR set to: 0
 13145                           ;icmp.c: 42: return err;
 13146                           ;	Return value of _icmp_handleNewPacket is never used
 13147  004A7E  0012               	return	
 13148  004A80                     l1270:
 13149                           
 13150                           ;icmp.c: 43: }
 13151                           ;icmp.c: 46: icmp_parseHeader(ipPayload, &icmpHeader);
 13152                           
 13153                           ; BSR set to: 0
 13154  004A80  EE21  F0C6         	lfsr	2,icmp_handleNewPacket@ipPayload
 13155  004A84  EE00  F074         	lfsr	0,icmp_parseHeader@ipPayload
 13156  004A88  0E08               	movlw	8
 13157  004A8A                     u13821:
 13158  004A8A  CFDB FFEB          	movff	plusw2,plusw0
 13159  004A8E  06E8               	decf	wreg,f,c
 13160  004A90  E2FC               	bc	u13821
 13161  004A92  0E85               	movlw	low icmp_handleNewPacket@icmpHeader
 13162  004A94  0100               	movlb	0	; () banked
 13163  004A96  6F7D               	movwf	icmp_parseHeader@icmpHeader& (0+255),b
 13164  004A98  0E02               	movlw	high icmp_handleNewPacket@icmpHeader
 13165  004A9A  6F7E               	movwf	(icmp_parseHeader@icmpHeader+1)& (0+255),b
 13166  004A9C  EC02  F01E         	call	_icmp_parseHeader	;wreg free
 13167                           
 13168                           ;icmp.c: 56: uint8_t foo[128];
 13169                           ;icmp.c: 57: ethernetController_streamFromRXBuffer(0, ipPayload.start);
 13170  004AA0  C1C6  F06F         	movff	icmp_handleNewPacket@ipPayload,ethernetController_streamFromRXBuffer@startAddress
 13171  004AA4  C1C7  F070         	movff	icmp_handleNewPacket@ipPayload+1,ethernetController_streamFromRXBuffer@startAddre
      +                          ss+1
 13172  004AA8  0E00               	movlw	0
 13173  004AAA  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 13174                           
 13175                           ;icmp.c: 58: for (uint16_t i = 0; i < ipPayload.length + 4; i++) {
 13176  004AAE  0E00               	movlw	0
 13177  004AB0  0102               	movlb	2	; () banked
 13178  004AB2  6F84               	movwf	(icmp_handleNewPacket@i+1)& (0+255),b
 13179  004AB4  0E00               	movlw	0
 13180  004AB6  6F83               	movwf	icmp_handleNewPacket@i& (0+255),b
 13181  004AB8  D014               	goto	l1272
 13182  004ABA                     
 13183                           ; BSR set to: 2
 13184                           ;icmp.c: 59: foo[i] = ethernetController_streamFromRXBuffer(1, ipPayload.start);
 13185                           
 13186                           ; BSR set to: 2
 13187  004ABA  C1C6  F06F         	movff	icmp_handleNewPacket@ipPayload,ethernetController_streamFromRXBuffer@startAddress
 13188  004ABE  C1C7  F070         	movff	icmp_handleNewPacket@ipPayload+1,ethernetController_streamFromRXBuffer@startAddre
      +                          ss+1
 13189  004AC2  0E01               	movlw	1
 13190  004AC4  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 13191  004AC8  0100               	movlb	0	; () banked
 13192  004ACA  6FED               	movwf	??_icmp_handleNewPacket& (0+255),b
 13193  004ACC  0E00               	movlw	low icmp_handleNewPacket@foo
 13194  004ACE  0102               	movlb	2	; () banked
 13195  004AD0  2583               	addwf	icmp_handleNewPacket@i& (0+255),w,b
 13196  004AD2  6ED9               	movwf	fsr2l,c
 13197  004AD4  0E02               	movlw	high icmp_handleNewPacket@foo
 13198  004AD6  2184               	addwfc	(icmp_handleNewPacket@i+1)& (0+255),w,b
 13199  004AD8  6EDA               	movwf	fsr2h,c
 13200  004ADA  C0ED  FFDF         	movff	??_icmp_handleNewPacket,indf2
 13201                           
 13202                           ; BSR set to: 2
 13203  004ADE  4B83               	infsnz	icmp_handleNewPacket@i& (0+255),f,b
 13204  004AE0  2B84               	incf	(icmp_handleNewPacket@i+1)& (0+255),f,b
 13205  004AE2                     l1272:
 13206                           
 13207                           ; BSR set to: 2
 13208                           
 13209                           ; BSR set to: 2
 13210  004AE2  0E04               	movlw	4
 13211  004AE4  0101               	movlb	1	; () banked
 13212  004AE6  25CA               	addwf	(icmp_handleNewPacket@ipPayload+4)& (0+255),w,b
 13213  004AE8  0100               	movlb	0	; () banked
 13214  004AEA  6FED               	movwf	??_icmp_handleNewPacket& (0+255),b
 13215  004AEC  0E00               	movlw	0
 13216  004AEE  0101               	movlb	1	; () banked
 13217  004AF0  21CB               	addwfc	(icmp_handleNewPacket@ipPayload+5)& (0+255),w,b
 13218  004AF2  0100               	movlb	0	; () banked
 13219  004AF4  6FEE               	movwf	(??_icmp_handleNewPacket+1)& (0+255),b
 13220  004AF6  51ED               	movf	??_icmp_handleNewPacket& (0+255),w,b
 13221  004AF8  0102               	movlb	2	; () banked
 13222  004AFA  5D83               	subwf	icmp_handleNewPacket@i& (0+255),w,b
 13223  004AFC  0100               	movlb	0	; () banked
 13224  004AFE  51EE               	movf	(??_icmp_handleNewPacket+1)& (0+255),w,b
 13225  004B00  0102               	movlb	2	; () banked
 13226  004B02  5984               	subwfb	(icmp_handleNewPacket@i+1)& (0+255),w,b
 13227  004B04  A0D8               	btfss	status,0,c
 13228  004B06  D7D9               	goto	l1273
 13229                           
 13230                           ; BSR set to: 2
 13231                           ;icmp.c: 60: }
 13232                           ;icmp.c: 61: ethernetController_streamFromRXBuffer(2, ipPayload.start);
 13233                           
 13234                           ; BSR set to: 2
 13235  004B08  C1C6  F06F         	movff	icmp_handleNewPacket@ipPayload,ethernetController_streamFromRXBuffer@startAddress
 13236  004B0C  C1C7  F070         	movff	icmp_handleNewPacket@ipPayload+1,ethernetController_streamFromRXBuffer@startAddre
      +                          ss+1
 13237  004B10  0E02               	movlw	2
 13238  004B12  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 13239                           
 13240                           ;icmp.c: 63: if (icmp_calculateChecksumBuf(&foo[0], ipPayload.length) != icmpHeader.chec
      +                          ksum) {
 13241  004B16  0E00               	movlw	low icmp_handleNewPacket@foo
 13242  004B18  0100               	movlb	0	; () banked
 13243  004B1A  6F60               	movwf	icmp_calculateChecksumBuf@buf& (0+255),b
 13244  004B1C  0E02               	movlw	high icmp_handleNewPacket@foo
 13245  004B1E  6F61               	movwf	(icmp_calculateChecksumBuf@buf+1)& (0+255),b
 13246  004B20  C1CA  F062         	movff	icmp_handleNewPacket@ipPayload+4,icmp_calculateChecksumBuf@ipPayloadLength
 13247  004B24  C1CB  F063         	movff	icmp_handleNewPacket@ipPayload+5,icmp_calculateChecksumBuf@ipPayloadLength+1
 13248  004B28  ECDC  F022         	call	_icmp_calculateChecksumBuf	;wreg free
 13249                           
 13250                           ;icmp.c: 69: }
 13251                           ;icmp.c: 71: if (icmpHeader.typeOfMessage == ICMP_ECHO_REQUEST) {
 13252  004B2C  0E08               	movlw	8
 13253  004B2E  0102               	movlb	2	; () banked
 13254  004B30  1985               	xorwf	icmp_handleNewPacket@icmpHeader& (0+255),w,b
 13255  004B32  A4D8               	btfss	status,2,c
 13256  004B34  0012               	return	
 13257                           
 13258                           ; BSR set to: 2
 13259                           ;icmp.c: 80: icmp_sendEchoReply(ipHeader, icmpHeader, ipPayload);
 13260  004B36  EE21  F0AF         	lfsr	2,icmp_handleNewPacket@ipHeader
 13261  004B3A  EE00  F0C1         	lfsr	0,icmp_sendEchoReply@ipHeader
 13262  004B3E  0E16               	movlw	22
 13263  004B40                     u13851:
 13264  004B40  CFDB FFEB          	movff	plusw2,plusw0
 13265  004B44  06E8               	decf	wreg,f,c
 13266  004B46  E2FC               	bc	u13851
 13267  004B48  EE22  F085         	lfsr	2,icmp_handleNewPacket@icmpHeader
 13268  004B4C  EE00  F0D8         	lfsr	0,icmp_sendEchoReply@icmpRequestHeader
 13269  004B50  0E07               	movlw	7
 13270  004B52                     u13861:
 13271  004B52  CFDB FFEB          	movff	plusw2,plusw0
 13272  004B56  06E8               	decf	wreg,f,c
 13273  004B58  E2FC               	bc	u13861
 13274  004B5A  EE21  F0C6         	lfsr	2,icmp_handleNewPacket@ipPayload
 13275  004B5E  EE00  F0E0         	lfsr	0,icmp_sendEchoReply@ipPayload
 13276  004B62  0E08               	movlw	8
 13277  004B64                     u13871:
 13278  004B64  CFDB FFEB          	movff	plusw2,plusw0
 13279  004B68  06E8               	decf	wreg,f,c
 13280  004B6A  E2FC               	bc	u13871
 13281  004B6C  EC0B  F01B         	call	_icmp_sendEchoReply	;wreg free
 13282  004B70  0012               	return	
 13283  004B72                     __end_of_icmp_handleNewPacket:
 13284                           	opt stack 0
 13285                           tblptru	equ	0xFF8
 13286                           tblptrh	equ	0xFF7
 13287                           tblptrl	equ	0xFF6
 13288                           tablat	equ	0xFF5
 13289                           prodh	equ	0xFF4
 13290                           prodl	equ	0xFF3
 13291                           intcon	equ	0xFF2
 13292                           intcon3	equ	0xFF0
 13293                           indf0	equ	0xFEF
 13294                           postinc0	equ	0xFEE
 13295                           plusw0	equ	0xFEB
 13296                           fsr0h	equ	0xFEA
 13297                           fsr0l	equ	0xFE9
 13298                           wreg	equ	0xFE8
 13299                           indf1	equ	0xFE7
 13300                           postinc1	equ	0xFE6
 13301                           postdec1	equ	0xFE5
 13302                           plusw1	equ	0xFE3
 13303                           fsr1h	equ	0xFE2
 13304                           fsr1l	equ	0xFE1
 13305                           indf2	equ	0xFDF
 13306                           postinc2	equ	0xFDE
 13307                           postdec2	equ	0xFDD
 13308                           plusw2	equ	0xFDB
 13309                           fsr2h	equ	0xFDA
 13310                           fsr2l	equ	0xFD9
 13311                           status	equ	0xFD8
 13312                           
 13313 ;; *************** function _icmp_sendEchoReply *****************
 13314 ;; Defined at:
 13315 ;;		line 127 in file "src/stack/protocols/icmp.c"
 13316 ;; Parameters:    Size  Location     Type
 13317 ;;  ipHeader       23   97[BANK0 ] struct ipv4_header
 13318 ;;  icmpRequestH    8  120[BANK0 ] struct icmpHeader
 13319 ;;  ipPayload       9  128[BANK0 ] struct memoryField
 13320 ;; Auto vars:     Size  Location     Type
 13321 ;;  i               2   99[BANK1 ] unsigned int 
 13322 ;;  i               1   98[BANK1 ] unsigned char 
 13323 ;;  ipReply        66  109[BANK1 ] struct ipv4_packet
 13324 ;;  icmpMessage    64    0[BANK1 ] unsigned char [64]
 13325 ;;  headerBuf      32   64[BANK1 ] unsigned char [32]
 13326 ;;  icmpHeader      8  101[BANK1 ] struct icmpHeader
 13327 ;;  checksum        2   96[BANK1 ] unsigned int 
 13328 ;; Return value:  Size  Location     Type
 13329 ;;                  1    wreg      void 
 13330 ;; Registers used:
 13331 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13332 ;; Tracked objects:
 13333 ;;		On entry : 0/0
 13334 ;;		On exit  : 0/0
 13335 ;;		Unchanged: 0/0
 13336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13337 ;;      Params:         0      40       0       0       0       0       0       0       0
 13338 ;;      Locals:         0       0     175       0       0       0       0       0       0
 13339 ;;      Temps:          0       4       0       0       0       0       0       0       0
 13340 ;;      Totals:         0      44     175       0       0       0       0       0       0
 13341 ;;Total ram usage:      219 bytes
 13342 ;; Hardware stack levels used:    1
 13343 ;; Hardware stack levels required when called:   10
 13344 ;; This function calls:
 13345 ;;		_ethernetController_streamFromRXBuffer
 13346 ;;		_icmp_calculateChecksumBuf
 13347 ;;		_icmp_writeHeaderIntoBuffer
 13348 ;;		_ipv4_calculateHeaderChecksum
 13349 ;;		_ipv4_getIPSourceAddress
 13350 ;;		_ipv4_streamToTransmissionBuffer
 13351 ;;		_ipv4_txFrameRequest
 13352 ;;		_ipv4_writeHeaderIntoBuffer
 13353 ;; This function is called by:
 13354 ;;		_icmp_handleNewPacket
 13355 ;; This function uses a non-reentrant model
 13356 ;;
 13357                           
 13358                           	psect	text37
 13359  003616                     __ptext37:
 13360                           	opt stack 0
 13361  003616                     _icmp_sendEchoReply:
 13362                           	opt stack 16
 13363                           
 13364                           ;icmp.c: 128: ipv4_packet_t ipReply;
 13365                           ;icmp.c: 129: icmpHeader_t icmpHeader;
 13366                           ;icmp.c: 131: uint8_t headerBuf[32];
 13367                           ;icmp.c: 132: ipReply.ipv4Header.headerLength = 5;
 13368                           
 13369                           ;incstack = 0
 13370  003616  0E05               	movlw	5
 13371  003618  0101               	movlb	1	; () banked
 13372  00361A  6F6E               	movwf	(icmp_sendEchoReply@ipReply+1)& (0+255),b
 13373                           
 13374                           ;icmp.c: 133: ipReply.ipv4Header.dscp = 0x00;
 13375  00361C  0E00               	movlw	0
 13376  00361E  6F6F               	movwf	(icmp_sendEchoReply@ipReply+2)& (0+255),b
 13377                           
 13378                           ;icmp.c: 134: ipReply.ipv4Header.ecn = 0x00;
 13379  003620  0E00               	movlw	0
 13380  003622  6F70               	movwf	(icmp_sendEchoReply@ipReply+3)& (0+255),b
 13381                           
 13382                           ;icmp.c: 135: ipReply.ipv4Header.flags = 0x00;
 13383  003624  0E00               	movlw	0
 13384  003626  6F75               	movwf	(icmp_sendEchoReply@ipReply+8)& (0+255),b
 13385                           
 13386                           ;icmp.c: 136: ipReply.ipv4Header.fragmentOffset = 0x0000;
 13387  003628  0E00               	movlw	0
 13388  00362A  6F77               	movwf	(icmp_sendEchoReply@ipReply+10)& (0+255),b
 13389  00362C  0E00               	movlw	0
 13390  00362E  6F76               	movwf	(icmp_sendEchoReply@ipReply+9)& (0+255),b
 13391                           
 13392                           ;icmp.c: 137: ipReply.ipv4Header.protocol = IPv4_PROTOCOL_ICMP;
 13393  003630  0E01               	movlw	1
 13394  003632  6F79               	movwf	(icmp_sendEchoReply@ipReply+12)& (0+255),b
 13395                           
 13396                           ; BSR set to: 1
 13397                           ;icmp.c: 138: ipReply.ipv4Header.destination = ipHeader.source;
 13398  003634  C0D0  F180         	movff	icmp_sendEchoReply@ipHeader+15,icmp_sendEchoReply@ipReply+19
 13399  003638  C0D1  F181         	movff	icmp_sendEchoReply@ipHeader+16,icmp_sendEchoReply@ipReply+20
 13400  00363C  C0D2  F182         	movff	icmp_sendEchoReply@ipHeader+17,icmp_sendEchoReply@ipReply+21
 13401  003640  C0D3  F183         	movff	icmp_sendEchoReply@ipHeader+18,icmp_sendEchoReply@ipReply+22
 13402                           
 13403                           ; BSR set to: 1
 13404                           ;icmp.c: 139: ipReply.ipv4Header.source = ipv4_getIPSourceAddress();
 13405  003644  ECE5  F036         	call	_ipv4_getIPSourceAddress	;wreg free
 13406  003648  C060  F17C         	movff	?_ipv4_getIPSourceAddress,icmp_sendEchoReply@ipReply+15
 13407  00364C  C061  F17D         	movff	?_ipv4_getIPSourceAddress+1,icmp_sendEchoReply@ipReply+16
 13408  003650  C062  F17E         	movff	?_ipv4_getIPSourceAddress+2,icmp_sendEchoReply@ipReply+17
 13409  003654  C063  F17F         	movff	?_ipv4_getIPSourceAddress+3,icmp_sendEchoReply@ipReply+18
 13410                           
 13411                           ;icmp.c: 140: ipReply.ipv4Header.totalLength = ipHeader.totalLength;
 13412  003658  C0C5  F171         	movff	icmp_sendEchoReply@ipHeader+4,icmp_sendEchoReply@ipReply+4
 13413  00365C  C0C6  F172         	movff	icmp_sendEchoReply@ipHeader+5,icmp_sendEchoReply@ipReply+5
 13414                           
 13415                           ;icmp.c: 141: ipReply.ipv4Header.timeToLive = 255;
 13416  003660  0101               	movlb	1	; () banked
 13417  003662  6978               	setf	(icmp_sendEchoReply@ipReply+11)& (0+255),b
 13418                           
 13419                           ; BSR set to: 1
 13420                           ;icmp.c: 142: ipReply.ipv4Header.version = 4;
 13421  003664  0E04               	movlw	4
 13422  003666  6F6D               	movwf	icmp_sendEchoReply@ipReply& (0+255),b
 13423                           
 13424                           ; BSR set to: 1
 13425                           ;icmp.c: 144: ipv4_calculateHeaderChecksum(&ipReply.ipv4Header);
 13426  003668  0E6D               	movlw	low icmp_sendEchoReply@ipReply
 13427  00366A  0100               	movlb	0	; () banked
 13428  00366C  6F60               	movwf	ipv4_calculateHeaderChecksum@header& (0+255),b
 13429  00366E  0E01               	movlw	high icmp_sendEchoReply@ipReply
 13430  003670  6F61               	movwf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),b
 13431  003672  EC65  F010         	call	_ipv4_calculateHeaderChecksum	;wreg free
 13432                           
 13433                           ;icmp.c: 145: ipv4_writeHeaderIntoBuffer(ipReply.ipv4Header, &headerBuf);
 13434  003676  EE21  F06D         	lfsr	2,icmp_sendEchoReply@ipReply
 13435  00367A  EE00  F060         	lfsr	0,ipv4_writeHeaderIntoBuffer@header
 13436  00367E  0E16               	movlw	22
 13437  003680                     u12651:
 13438  003680  CFDB FFEB          	movff	plusw2,plusw0
 13439  003684  06E8               	decf	wreg,f,c
 13440  003686  E2FC               	bc	u12651
 13441  003688  0E40               	movlw	low icmp_sendEchoReply@headerBuf
 13442  00368A  0100               	movlb	0	; () banked
 13443  00368C  6F77               	movwf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),b
 13444  00368E  0E01               	movlw	high icmp_sendEchoReply@headerBuf
 13445  003690  6F78               	movwf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),b
 13446  003692  EC9D  F01F         	call	_ipv4_writeHeaderIntoBuffer	;wreg free
 13447                           
 13448                           ;icmp.c: 147: icmpHeader.typeOfMessage = ICMP_ECHO_REPLY;
 13449  003696  0E00               	movlw	0
 13450  003698  0101               	movlb	1	; () banked
 13451  00369A  6F65               	movwf	icmp_sendEchoReply@icmpHeader& (0+255),b
 13452                           
 13453                           ; BSR set to: 1
 13454                           ;icmp.c: 148: icmpHeader.code = 0x00;
 13455  00369C  0E00               	movlw	0
 13456  00369E  6F66               	movwf	(icmp_sendEchoReply@icmpHeader+1)& (0+255),b
 13457                           
 13458                           ; BSR set to: 1
 13459                           ;icmp.c: 149: icmpHeader.headerData = icmpRequestHeader.headerData;
 13460  0036A0  C0DC  F169         	movff	icmp_sendEchoReply@icmpRequestHeader+4,icmp_sendEchoReply@icmpHeader+4
 13461  0036A4  C0DD  F16A         	movff	icmp_sendEchoReply@icmpRequestHeader+5,icmp_sendEchoReply@icmpHeader+5
 13462  0036A8  C0DE  F16B         	movff	icmp_sendEchoReply@icmpRequestHeader+6,icmp_sendEchoReply@icmpHeader+6
 13463  0036AC  C0DF  F16C         	movff	icmp_sendEchoReply@icmpRequestHeader+7,icmp_sendEchoReply@icmpHeader+7
 13464                           
 13465                           ; BSR set to: 1
 13466                           ;icmp.c: 150: icmpHeader.checksum = icmpRequestHeader.checksum;
 13467  0036B0  C0DA  F167         	movff	icmp_sendEchoReply@icmpRequestHeader+2,icmp_sendEchoReply@icmpHeader+2
 13468  0036B4  C0DB  F168         	movff	icmp_sendEchoReply@icmpRequestHeader+3,icmp_sendEchoReply@icmpHeader+3
 13469                           
 13470                           ; BSR set to: 1
 13471                           ;icmp.c: 152: uint8_t icmpMessage[64];
 13472                           ;icmp.c: 153: icmp_writeHeaderIntoBuffer(&icmpMessage[0], icmpHeader);
 13473  0036B8  0E00               	movlw	low icmp_sendEchoReply@icmpMessage
 13474  0036BA  0100               	movlb	0	; () banked
 13475  0036BC  6F60               	movwf	icmp_writeHeaderIntoBuffer@buf& (0+255),b
 13476  0036BE  0E01               	movlw	high icmp_sendEchoReply@icmpMessage
 13477  0036C0  6F61               	movwf	(icmp_writeHeaderIntoBuffer@buf+1)& (0+255),b
 13478  0036C2  EE21  F065         	lfsr	2,icmp_sendEchoReply@icmpHeader
 13479  0036C6  EE00  F062         	lfsr	0,icmp_writeHeaderIntoBuffer@header
 13480  0036CA  0E07               	movlw	7
 13481  0036CC                     u12661:
 13482  0036CC  CFDB FFEB          	movff	plusw2,plusw0
 13483  0036D0  06E8               	decf	wreg,f,c
 13484  0036D2  E2FC               	bc	u12661
 13485  0036D4  EC8B  F02A         	call	_icmp_writeHeaderIntoBuffer	;wreg free
 13486                           
 13487                           ;icmp.c: 155: ethernetController_streamFromRXBuffer(0, ipPayload.start + 8);
 13488  0036D8  0E08               	movlw	8
 13489  0036DA  0100               	movlb	0	; () banked
 13490  0036DC  25E0               	addwf	icmp_sendEchoReply@ipPayload& (0+255),w,b
 13491  0036DE  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 13492  0036E0  0E00               	movlw	0
 13493  0036E2  21E1               	addwfc	(icmp_sendEchoReply@ipPayload+1)& (0+255),w,b
 13494  0036E4  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 13495  0036E6  0E00               	movlw	0
 13496  0036E8  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 13497                           
 13498                           ;icmp.c: 156: for (uint8_t i = 8; i < ipPayload.length + 4; i++) {
 13499  0036EC  0E08               	movlw	8
 13500  0036EE  0101               	movlb	1	; () banked
 13501  0036F0  6F62               	movwf	icmp_sendEchoReply@i& (0+255),b
 13502  0036F2  D018               	goto	l1290
 13503  0036F4                     
 13504                           ;icmp.c: 157: icmpMessage[i] = ethernetController_streamFromRXBuffer(1, ipPayload.start 
      +                          + 8);
 13505                           
 13506                           ; BSR set to: 1
 13507  0036F4  0E08               	movlw	8
 13508  0036F6  0100               	movlb	0	; () banked
 13509  0036F8  25E0               	addwf	icmp_sendEchoReply@ipPayload& (0+255),w,b
 13510  0036FA  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 13511  0036FC  0E00               	movlw	0
 13512  0036FE  21E1               	addwfc	(icmp_sendEchoReply@ipPayload+1)& (0+255),w,b
 13513  003700  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 13514  003702  0E01               	movlw	1
 13515  003704  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 13516  003708  0100               	movlb	0	; () banked
 13517  00370A  6FE9               	movwf	??_icmp_sendEchoReply& (0+255),b
 13518  00370C  0101               	movlb	1	; () banked
 13519  00370E  5162               	movf	icmp_sendEchoReply@i& (0+255),w,b
 13520  003710  0D01               	mullw	1
 13521  003712  0E00               	movlw	low icmp_sendEchoReply@icmpMessage
 13522  003714  24F3               	addwf	prodl,w,c
 13523  003716  6ED9               	movwf	fsr2l,c
 13524  003718  0E01               	movlw	high icmp_sendEchoReply@icmpMessage
 13525  00371A  20F4               	addwfc	prodh,w,c
 13526  00371C  6EDA               	movwf	fsr2h,c
 13527  00371E  C0E9  FFDF         	movff	??_icmp_sendEchoReply,indf2
 13528                           
 13529                           ; BSR set to: 1
 13530  003722  2B62               	incf	icmp_sendEchoReply@i& (0+255),f,b
 13531  003724                     l1290:
 13532                           
 13533                           ; BSR set to: 1
 13534                           
 13535                           ; BSR set to: 1
 13536  003724  0E04               	movlw	4
 13537  003726  0100               	movlb	0	; () banked
 13538  003728  25E4               	addwf	(icmp_sendEchoReply@ipPayload+4)& (0+255),w,b
 13539  00372A  6FE9               	movwf	??_icmp_sendEchoReply& (0+255),b
 13540  00372C  0E00               	movlw	0
 13541  00372E  21E5               	addwfc	(icmp_sendEchoReply@ipPayload+5)& (0+255),w,b
 13542  003730  6FEA               	movwf	(??_icmp_sendEchoReply+1)& (0+255),b
 13543  003732  0101               	movlb	1	; () banked
 13544  003734  5162               	movf	icmp_sendEchoReply@i& (0+255),w,b
 13545  003736  0100               	movlb	0	; () banked
 13546  003738  6FEB               	movwf	(??_icmp_sendEchoReply+2)& (0+255),b
 13547  00373A  6BEC               	clrf	(??_icmp_sendEchoReply+3)& (0+255),b
 13548  00373C  51E9               	movf	??_icmp_sendEchoReply& (0+255),w,b
 13549  00373E  5DEB               	subwf	(??_icmp_sendEchoReply+2)& (0+255),w,b
 13550  003740  51EA               	movf	(??_icmp_sendEchoReply+1)& (0+255),w,b
 13551  003742  59EC               	subwfb	(??_icmp_sendEchoReply+3)& (0+255),w,b
 13552  003744  A0D8               	btfss	status,0,c
 13553  003746  D7D6               	goto	l1291
 13554                           
 13555                           ; BSR set to: 0
 13556                           ;icmp.c: 158: }
 13557                           ;icmp.c: 159: ethernetController_streamFromRXBuffer(2, ipPayload.start + 8);
 13558                           
 13559                           ; BSR set to: 0
 13560  003748  0E08               	movlw	8
 13561  00374A  25E0               	addwf	icmp_sendEchoReply@ipPayload& (0+255),w,b
 13562  00374C  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 13563  00374E  0E00               	movlw	0
 13564  003750  21E1               	addwfc	(icmp_sendEchoReply@ipPayload+1)& (0+255),w,b
 13565  003752  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 13566  003754  0E02               	movlw	2
 13567  003756  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 13568                           
 13569                           ;icmp.c: 161: uint16_t checksum = icmp_calculateChecksumBuf(&icmpMessage[0], ipPayload.l
      +                          ength);
 13570  00375A  0E00               	movlw	low icmp_sendEchoReply@icmpMessage
 13571  00375C  0100               	movlb	0	; () banked
 13572  00375E  6F60               	movwf	icmp_calculateChecksumBuf@buf& (0+255),b
 13573  003760  0E01               	movlw	high icmp_sendEchoReply@icmpMessage
 13574  003762  6F61               	movwf	(icmp_calculateChecksumBuf@buf+1)& (0+255),b
 13575  003764  C0E4  F062         	movff	icmp_sendEchoReply@ipPayload+4,icmp_calculateChecksumBuf@ipPayloadLength
 13576  003768  C0E5  F063         	movff	icmp_sendEchoReply@ipPayload+5,icmp_calculateChecksumBuf@ipPayloadLength+1
 13577  00376C  ECDC  F022         	call	_icmp_calculateChecksumBuf	;wreg free
 13578  003770  C060  F160         	movff	?_icmp_calculateChecksumBuf,icmp_sendEchoReply@checksum
 13579  003774  C061  F161         	movff	?_icmp_calculateChecksumBuf+1,icmp_sendEchoReply@checksum+1
 13580                           
 13581                           ;icmp.c: 163: icmpMessage [2] = (checksum & 0xff00) >> 8;
 13582  003778  0101               	movlb	1	; () banked
 13583  00377A  5161               	movf	(icmp_sendEchoReply@checksum+1)& (0+255),w,b
 13584  00377C  6F02               	movwf	(icmp_sendEchoReply@icmpMessage+2)& (0+255),b
 13585                           
 13586                           ; BSR set to: 1
 13587                           ;icmp.c: 164: icmpMessage [3] = checksum & 0x00ff;
 13588  00377E  C160  F103         	movff	icmp_sendEchoReply@checksum,icmp_sendEchoReply@icmpMessage+3
 13589                           
 13590                           ; BSR set to: 1
 13591                           ;icmp.c: 166: ipv4_txFrameRequest(&ipReply);
 13592  003782  0E6D               	movlw	low icmp_sendEchoReply@ipReply
 13593  003784  0100               	movlb	0	; () banked
 13594  003786  6FA7               	movwf	ipv4_txFrameRequest@packet& (0+255),b
 13595  003788  0E01               	movlw	high icmp_sendEchoReply@ipReply
 13596  00378A  6FA8               	movwf	(ipv4_txFrameRequest@packet+1)& (0+255),b
 13597  00378C  EC41  F022         	call	_ipv4_txFrameRequest	;wreg free
 13598                           
 13599                           ;icmp.c: 168: for (uint16_t i = 0; i < ipReply.ipv4Header.totalLength; i++) {
 13600  003790  0E00               	movlw	0
 13601  003792  0101               	movlb	1	; () banked
 13602  003794  6F64               	movwf	(icmp_sendEchoReply@i_4330+1)& (0+255),b
 13603  003796  0E00               	movlw	0
 13604  003798  6F63               	movwf	icmp_sendEchoReply@i_4330& (0+255),b
 13605  00379A  D03B               	goto	l1293
 13606  00379C                     
 13607                           ; BSR set to: 1
 13608                           ;icmp.c: 169: if (i < ipReply.ipv4Header.headerLength * 4) {
 13609                           
 13610                           ; BSR set to: 1
 13611  00379C  516E               	movf	(icmp_sendEchoReply@ipReply+1)& (0+255),w,b
 13612  00379E  0D04               	mullw	4
 13613  0037A0  50F3               	movf	prodl,w,c
 13614  0037A2  5D63               	subwf	icmp_sendEchoReply@i_4330& (0+255),w,b
 13615  0037A4  50F4               	movf	prodh,w,c
 13616  0037A6  5964               	subwfb	(icmp_sendEchoReply@i_4330+1)& (0+255),w,b
 13617  0037A8  B0D8               	btfsc	status,0,c
 13618  0037AA  D013               	goto	l1295
 13619                           
 13620                           ; BSR set to: 1
 13621                           ;icmp.c: 170: ipv4_streamToTransmissionBuffer(headerBuf[i], ipReply);
 13622  0037AC  EE21  F06D         	lfsr	2,icmp_sendEchoReply@ipReply
 13623  0037B0  EE00  F07E         	lfsr	0,ipv4_streamToTransmissionBuffer@packet
 13624  0037B4  0E41               	movlw	65
 13625  0037B6                     u12691:
 13626  0037B6  CFDB FFEB          	movff	plusw2,plusw0
 13627  0037BA  06E8               	decf	wreg,f,c
 13628  0037BC  E2FC               	bc	u12691
 13629  0037BE  0E40               	movlw	low icmp_sendEchoReply@headerBuf
 13630  0037C0  2563               	addwf	icmp_sendEchoReply@i_4330& (0+255),w,b
 13631  0037C2  6ED9               	movwf	fsr2l,c
 13632  0037C4  0E01               	movlw	high icmp_sendEchoReply@headerBuf
 13633  0037C6  2164               	addwfc	(icmp_sendEchoReply@i_4330+1)& (0+255),w,b
 13634  0037C8  6EDA               	movwf	fsr2h,c
 13635  0037CA  50DF               	movf	indf2,w,c
 13636  0037CC  EC7E  F036         	call	_ipv4_streamToTransmissionBuffer
 13637                           
 13638                           ;icmp.c: 171: } else {
 13639  0037D0  D01D               	goto	l1296
 13640  0037D2                     l1295:
 13641                           
 13642                           ;icmp.c: 172: ipv4_streamToTransmissionBuffer(icmpMessage[i - (ipReply.ipv4Header.header
      +                          Length * 4)], ipReply);
 13643  0037D2  EE21  F06D         	lfsr	2,icmp_sendEchoReply@ipReply
 13644  0037D6  EE00  F07E         	lfsr	0,ipv4_streamToTransmissionBuffer@packet
 13645  0037DA  0E41               	movlw	65
 13646  0037DC                     u12701:
 13647  0037DC  CFDB FFEB          	movff	plusw2,plusw0
 13648  0037E0  06E8               	decf	wreg,f,c
 13649  0037E2  E2FC               	bc	u12701
 13650  0037E4  0101               	movlb	1	; () banked
 13651  0037E6  516E               	movf	(icmp_sendEchoReply@ipReply+1)& (0+255),w,b
 13652  0037E8  0D04               	mullw	4
 13653  0037EA  1EF3               	comf	prodl,f,c
 13654  0037EC  1EF4               	comf	prodh,f,c
 13655  0037EE  4AF3               	infsnz	prodl,f,c
 13656  0037F0  2AF4               	incf	prodh,f,c
 13657  0037F2  5163               	movf	icmp_sendEchoReply@i_4330& (0+255),w,b
 13658  0037F4  26F3               	addwf	prodl,f,c
 13659  0037F6  5164               	movf	(icmp_sendEchoReply@i_4330+1)& (0+255),w,b
 13660  0037F8  22F4               	addwfc	prodh,f,c
 13661  0037FA  0E00               	movlw	low icmp_sendEchoReply@icmpMessage
 13662  0037FC  24F3               	addwf	prodl,w,c
 13663  0037FE  6ED9               	movwf	fsr2l,c
 13664  003800  0E01               	movlw	high icmp_sendEchoReply@icmpMessage
 13665  003802  20F4               	addwfc	prodh,w,c
 13666  003804  6EDA               	movwf	fsr2h,c
 13667  003806  50DF               	movf	indf2,w,c
 13668  003808  EC7E  F036         	call	_ipv4_streamToTransmissionBuffer
 13669  00380C                     l1296:
 13670  00380C  0101               	movlb	1	; () banked
 13671  00380E  4B63               	infsnz	icmp_sendEchoReply@i_4330& (0+255),f,b
 13672  003810  2B64               	incf	(icmp_sendEchoReply@i_4330+1)& (0+255),f,b
 13673  003812                     l1293:
 13674                           
 13675                           ; BSR set to: 1
 13676                           
 13677                           ; BSR set to: 1
 13678  003812  5171               	movf	(icmp_sendEchoReply@ipReply+4)& (0+255),w,b
 13679  003814  5D63               	subwf	icmp_sendEchoReply@i_4330& (0+255),w,b
 13680  003816  5172               	movf	(icmp_sendEchoReply@ipReply+5)& (0+255),w,b
 13681  003818  5964               	subwfb	(icmp_sendEchoReply@i_4330+1)& (0+255),w,b
 13682  00381A  A0D8               	btfss	status,0,c
 13683  00381C  D7BF               	goto	l1294
 13684                           
 13685                           ; BSR set to: 1
 13686                           ;icmp.c: 173: }
 13687                           ;icmp.c: 174: }
 13688                           ;icmp.c: 183: stack.pendingPacketToSend = ipReply;
 13689                           
 13690                           ; BSR set to: 1
 13691  00381E  EE21  F06D         	lfsr	2,icmp_sendEchoReply@ipReply
 13692  003822  EE14  F035         	lfsr	1,_stack+53
 13693  003826  0E41               	movlw	65
 13694  003828                     u12721:
 13695  003828  CFDB FFE3          	movff	plusw2,plusw1
 13696  00382C  06E8               	decf	wreg,f,c
 13697  00382E  E2FC               	bc	u12721
 13698                           
 13699                           ; BSR set to: 1
 13700                           ;icmp.c: 184: stack.background.fPacketPending = 1u;
 13701  003830  0E01               	movlw	1
 13702  003832  0104               	movlb	4	; () banked
 13703  003834  6F34               	movwf	(_stack+52)& (0+255),b
 13704                           
 13705                           ; BSR set to: 4
 13706  003836  0012               	return		;funcret
 13707  003838                     __end_of_icmp_sendEchoReply:
 13708                           	opt stack 0
 13709                           tblptru	equ	0xFF8
 13710                           tblptrh	equ	0xFF7
 13711                           tblptrl	equ	0xFF6
 13712                           tablat	equ	0xFF5
 13713                           prodh	equ	0xFF4
 13714                           prodl	equ	0xFF3
 13715                           intcon	equ	0xFF2
 13716                           intcon3	equ	0xFF0
 13717                           indf0	equ	0xFEF
 13718                           postinc0	equ	0xFEE
 13719                           plusw0	equ	0xFEB
 13720                           fsr0h	equ	0xFEA
 13721                           fsr0l	equ	0xFE9
 13722                           wreg	equ	0xFE8
 13723                           indf1	equ	0xFE7
 13724                           postinc1	equ	0xFE6
 13725                           postdec1	equ	0xFE5
 13726                           plusw1	equ	0xFE3
 13727                           fsr1h	equ	0xFE2
 13728                           fsr1l	equ	0xFE1
 13729                           indf2	equ	0xFDF
 13730                           postinc2	equ	0xFDE
 13731                           postdec2	equ	0xFDD
 13732                           plusw2	equ	0xFDB
 13733                           fsr2h	equ	0xFDA
 13734                           fsr2l	equ	0xFD9
 13735                           status	equ	0xFD8
 13736                           
 13737 ;; *************** function _ipv4_writeHeaderIntoBuffer *****************
 13738 ;; Defined at:
 13739 ;;		line 105 in file "src/stack/protocols/ipv4.c"
 13740 ;; Parameters:    Size  Location     Type
 13741 ;;  header         23    0[BANK0 ] struct ipv4_header
 13742 ;;  ptr             2   23[BANK0 ] PTR unsigned char 
 13743 ;;		 -> udp_sendPacket@ipHeaderBuf(32), tcp_sendSYNACK@ipHeaderBuf(32), icmp_sendEchoRequest@headerBuf(32), icmp_sendEch
      +oReply@headerBuf(32), 
 13744 ;; Auto vars:     Size  Location     Type
 13745 ;;		None
 13746 ;; Return value:  Size  Location     Type
 13747 ;;                  1    wreg      void 
 13748 ;; Registers used:
 13749 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 13750 ;; Tracked objects:
 13751 ;;		On entry : 0/0
 13752 ;;		On exit  : 0/0
 13753 ;;		Unchanged: 0/0
 13754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13755 ;;      Params:         0      25       0       0       0       0       0       0       0
 13756 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13757 ;;      Temps:          0       2       0       0       0       0       0       0       0
 13758 ;;      Totals:         0      27       0       0       0       0       0       0       0
 13759 ;;Total ram usage:       27 bytes
 13760 ;; Hardware stack levels used:    1
 13761 ;; Hardware stack levels required when called:    4
 13762 ;; This function calls:
 13763 ;;		Nothing
 13764 ;; This function is called by:
 13765 ;;		_icmp_sendEchoReply
 13766 ;;		_tcp_sendSYNACK
 13767 ;;		_udp_sendPacket
 13768 ;;		_icmp_sendEchoRequest
 13769 ;; This function uses a non-reentrant model
 13770 ;;
 13771                           
 13772                           	psect	text38
 13773  003F3A                     __ptext38:
 13774                           	opt stack 0
 13775  003F3A                     _ipv4_writeHeaderIntoBuffer:
 13776                           	opt stack 25
 13777                           
 13778                           ;ipv4.c: 106: *ptr = (header.version << 4) | (header.headerLength);
 13779                           
 13780                           ; BSR set to: 4
 13781                           ;incstack = 0
 13782  003F3A  0100               	movlb	0	; () banked
 13783  003F3C  3960               	swapf	ipv4_writeHeaderIntoBuffer@header& (0+255),w,b
 13784  003F3E  0BF0               	andlw	240
 13785  003F40  1161               	iorwf	(ipv4_writeHeaderIntoBuffer@header+1)& (0+255),w,b
 13786  003F42  C077  FFD9         	movff	ipv4_writeHeaderIntoBuffer@ptr,fsr2l
 13787  003F46  C078  FFDA         	movff	ipv4_writeHeaderIntoBuffer@ptr+1,fsr2h
 13788  003F4A  6EDF               	movwf	indf2,c
 13789                           
 13790                           ;ipv4.c: 107: *(ptr + 1) = (header.dscp << 2) | (header.ecn & 0x03);
 13791  003F4C  EE20 F001          	lfsr	2,1
 13792  003F50  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
 13793  003F52  26D9               	addwf	fsr2l,f,c
 13794  003F54  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
 13795  003F56  22DA               	addwfc	fsr2h,f,c
 13796  003F58  C063  F079         	movff	ipv4_writeHeaderIntoBuffer@header+3,??_ipv4_writeHeaderIntoBuffer
 13797  003F5C  0E03               	movlw	3
 13798  003F5E  1779               	andwf	??_ipv4_writeHeaderIntoBuffer& (0+255),f,b
 13799  003F60  4562               	rlncf	(ipv4_writeHeaderIntoBuffer@header+2)& (0+255),w,b
 13800  003F62  46E8               	rlncf	wreg,f,c
 13801  003F64  0BFC               	andlw	252
 13802  003F66  1179               	iorwf	??_ipv4_writeHeaderIntoBuffer& (0+255),w,b
 13803  003F68  6EDF               	movwf	indf2,c
 13804                           
 13805                           ;ipv4.c: 108: *(ptr + 2) = (header.totalLength & 0xff00) >> 8;
 13806  003F6A  EE20 F002          	lfsr	2,2
 13807  003F6E  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
 13808  003F70  26D9               	addwf	fsr2l,f,c
 13809  003F72  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
 13810  003F74  22DA               	addwfc	fsr2h,f,c
 13811  003F76  5165               	movf	(ipv4_writeHeaderIntoBuffer@header+5)& (0+255),w,b
 13812  003F78  6EDF               	movwf	indf2,c
 13813                           
 13814                           ;ipv4.c: 109: *(ptr + 3) = header.totalLength & 0x00ff;
 13815  003F7A  EE20 F003          	lfsr	2,3
 13816  003F7E  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
 13817  003F80  26D9               	addwf	fsr2l,f,c
 13818  003F82  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
 13819  003F84  22DA               	addwfc	fsr2h,f,c
 13820  003F86  C064  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+4,indf2
 13821                           
 13822                           ;ipv4.c: 110: *(ptr + 4) = (header.identification & 0xff00) >> 8;
 13823  003F8A  EE20 F004          	lfsr	2,4
 13824  003F8E  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
 13825  003F90  26D9               	addwf	fsr2l,f,c
 13826  003F92  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
 13827  003F94  22DA               	addwfc	fsr2h,f,c
 13828  003F96  5167               	movf	(ipv4_writeHeaderIntoBuffer@header+7)& (0+255),w,b
 13829  003F98  6EDF               	movwf	indf2,c
 13830                           
 13831                           ;ipv4.c: 111: *(ptr + 5) = header.identification & 0x00ff;
 13832  003F9A  EE20 F005          	lfsr	2,5
 13833  003F9E  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
 13834  003FA0  26D9               	addwf	fsr2l,f,c
 13835  003FA2  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
 13836  003FA4  22DA               	addwfc	fsr2h,f,c
 13837  003FA6  C066  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+6,indf2
 13838                           
 13839                           ; BSR set to: 0
 13840                           ;ipv4.c: 112: *(ptr + 6) = (header.flags << 5) | ((header.fragmentOffset & 0x1f00) >> 8)
      +                          ;
 13841  003FAA  EE20 F006          	lfsr	2,6
 13842  003FAE  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
 13843  003FB0  26D9               	addwf	fsr2l,f,c
 13844  003FB2  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
 13845  003FB4  22DA               	addwfc	fsr2h,f,c
 13846  003FB6  EE10  F069         	lfsr	1,ipv4_writeHeaderIntoBuffer@header+9
 13847  003FBA  CFE6 F079          	movff	postinc1,??_ipv4_writeHeaderIntoBuffer
 13848  003FBE  CFE5 F07A          	movff	postdec1,??_ipv4_writeHeaderIntoBuffer+1
 13849  003FC2  C07A  F079         	movff	??_ipv4_writeHeaderIntoBuffer+1,??_ipv4_writeHeaderIntoBuffer
 13850  003FC6  6B7A               	clrf	(??_ipv4_writeHeaderIntoBuffer+1)& (0+255),b
 13851  003FC8  0E1F               	movlw	31
 13852  003FCA  1779               	andwf	??_ipv4_writeHeaderIntoBuffer& (0+255),f,b
 13853  003FCC  3968               	swapf	(ipv4_writeHeaderIntoBuffer@header+8)& (0+255),w,b
 13854  003FCE  46E8               	rlncf	wreg,f,c
 13855  003FD0  0BE0               	andlw	224
 13856  003FD2  1179               	iorwf	??_ipv4_writeHeaderIntoBuffer& (0+255),w,b
 13857  003FD4  6EDF               	movwf	indf2,c
 13858                           
 13859                           ; BSR set to: 0
 13860                           ;ipv4.c: 113: *(ptr + 7) = (header.fragmentOffset & 0x00ff);
 13861  003FD6  EE20 F007          	lfsr	2,7
 13862  003FDA  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
 13863  003FDC  26D9               	addwf	fsr2l,f,c
 13864  003FDE  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
 13865  003FE0  22DA               	addwfc	fsr2h,f,c
 13866  003FE2  C069  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+9,indf2
 13867                           
 13868                           ; BSR set to: 0
 13869                           ;ipv4.c: 114: *(ptr + 8) = (header.timeToLive);
 13870  003FE6  EE20 F008          	lfsr	2,8
 13871  003FEA  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
 13872  003FEC  26D9               	addwf	fsr2l,f,c
 13873  003FEE  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
 13874  003FF0  22DA               	addwfc	fsr2h,f,c
 13875  003FF2  C06B  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+11,indf2
 13876                           
 13877                           ; BSR set to: 0
 13878                           ;ipv4.c: 115: *(ptr + 9) = (header.protocol);
 13879  003FF6  EE20 F009          	lfsr	2,9
 13880  003FFA  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
 13881  003FFC  26D9               	addwf	fsr2l,f,c
 13882  003FFE  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
 13883  004000  22DA               	addwfc	fsr2h,f,c
 13884  004002  C06C  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+12,indf2
 13885                           
 13886                           ; BSR set to: 0
 13887                           ;ipv4.c: 116: *(ptr + 10) = (header.checksum & 0xff00) >> 8;
 13888  004006  EE20 F00A          	lfsr	2,10
 13889  00400A  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
 13890  00400C  26D9               	addwf	fsr2l,f,c
 13891  00400E  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
 13892  004010  22DA               	addwfc	fsr2h,f,c
 13893  004012  516E               	movf	(ipv4_writeHeaderIntoBuffer@header+14)& (0+255),w,b
 13894  004014  6EDF               	movwf	indf2,c
 13895                           
 13896                           ; BSR set to: 0
 13897                           ;ipv4.c: 117: *(ptr + 11) = (header.checksum & 0x00ff);
 13898  004016  EE20 F00B          	lfsr	2,11
 13899  00401A  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
 13900  00401C  26D9               	addwf	fsr2l,f,c
 13901  00401E  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
 13902  004020  22DA               	addwfc	fsr2h,f,c
 13903  004022  C06D  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+13,indf2
 13904                           
 13905                           ; BSR set to: 0
 13906                           ;ipv4.c: 118: *(ptr + 12) = (header.source.address[0]);
 13907  004026  EE20 F00C          	lfsr	2,12
 13908  00402A  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
 13909  00402C  26D9               	addwf	fsr2l,f,c
 13910  00402E  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
 13911  004030  22DA               	addwfc	fsr2h,f,c
 13912  004032  C06F  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+15,indf2
 13913                           
 13914                           ; BSR set to: 0
 13915                           ;ipv4.c: 119: *(ptr + 13) = (header.source.address[1]);
 13916  004036  EE20 F00D          	lfsr	2,13
 13917  00403A  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
 13918  00403C  26D9               	addwf	fsr2l,f,c
 13919  00403E  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
 13920  004040  22DA               	addwfc	fsr2h,f,c
 13921  004042  C070  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+16,indf2
 13922                           
 13923                           ; BSR set to: 0
 13924                           ;ipv4.c: 120: *(ptr + 14) = (header.source.address[2]);
 13925  004046  EE20 F00E          	lfsr	2,14
 13926  00404A  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
 13927  00404C  26D9               	addwf	fsr2l,f,c
 13928  00404E  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
 13929  004050  22DA               	addwfc	fsr2h,f,c
 13930  004052  C071  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+17,indf2
 13931                           
 13932                           ; BSR set to: 0
 13933                           ;ipv4.c: 121: *(ptr + 15) = (header.source.address[3]);
 13934  004056  EE20 F00F          	lfsr	2,15
 13935  00405A  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
 13936  00405C  26D9               	addwf	fsr2l,f,c
 13937  00405E  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
 13938  004060  22DA               	addwfc	fsr2h,f,c
 13939  004062  C072  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+18,indf2
 13940                           
 13941                           ; BSR set to: 0
 13942                           ;ipv4.c: 122: *(ptr + 16) = (header.destination.address[0]);
 13943  004066  EE20 F010          	lfsr	2,16
 13944  00406A  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
 13945  00406C  26D9               	addwf	fsr2l,f,c
 13946  00406E  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
 13947  004070  22DA               	addwfc	fsr2h,f,c
 13948  004072  C073  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+19,indf2
 13949                           
 13950                           ; BSR set to: 0
 13951                           ;ipv4.c: 123: *(ptr + 17) = (header.destination.address[1]);
 13952  004076  EE20 F011          	lfsr	2,17
 13953  00407A  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
 13954  00407C  26D9               	addwf	fsr2l,f,c
 13955  00407E  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
 13956  004080  22DA               	addwfc	fsr2h,f,c
 13957  004082  C074  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+20,indf2
 13958                           
 13959                           ; BSR set to: 0
 13960                           ;ipv4.c: 124: *(ptr + 18) = (header.destination.address[2]);
 13961  004086  EE20 F012          	lfsr	2,18
 13962  00408A  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
 13963  00408C  26D9               	addwf	fsr2l,f,c
 13964  00408E  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
 13965  004090  22DA               	addwfc	fsr2h,f,c
 13966  004092  C075  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+21,indf2
 13967                           
 13968                           ; BSR set to: 0
 13969                           ;ipv4.c: 125: *(ptr + 19) = (header.destination.address[3]);
 13970  004096  EE20 F013          	lfsr	2,19
 13971  00409A  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
 13972  00409C  26D9               	addwf	fsr2l,f,c
 13973  00409E  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
 13974  0040A0  22DA               	addwfc	fsr2h,f,c
 13975  0040A2  C076  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+22,indf2
 13976                           
 13977                           ; BSR set to: 0
 13978  0040A6  0012               	return		;funcret
 13979  0040A8                     __end_of_ipv4_writeHeaderIntoBuffer:
 13980                           	opt stack 0
 13981                           tblptru	equ	0xFF8
 13982                           tblptrh	equ	0xFF7
 13983                           tblptrl	equ	0xFF6
 13984                           tablat	equ	0xFF5
 13985                           prodh	equ	0xFF4
 13986                           prodl	equ	0xFF3
 13987                           intcon	equ	0xFF2
 13988                           intcon3	equ	0xFF0
 13989                           indf0	equ	0xFEF
 13990                           postinc0	equ	0xFEE
 13991                           plusw0	equ	0xFEB
 13992                           fsr0h	equ	0xFEA
 13993                           fsr0l	equ	0xFE9
 13994                           wreg	equ	0xFE8
 13995                           indf1	equ	0xFE7
 13996                           postinc1	equ	0xFE6
 13997                           postdec1	equ	0xFE5
 13998                           plusw1	equ	0xFE3
 13999                           fsr1h	equ	0xFE2
 14000                           fsr1l	equ	0xFE1
 14001                           indf2	equ	0xFDF
 14002                           postinc2	equ	0xFDE
 14003                           postdec2	equ	0xFDD
 14004                           plusw2	equ	0xFDB
 14005                           fsr2h	equ	0xFDA
 14006                           fsr2l	equ	0xFD9
 14007                           status	equ	0xFD8
 14008                           
 14009 ;; *************** function _ipv4_txFrameRequest *****************
 14010 ;; Defined at:
 14011 ;;		line 41 in file "src/stack/protocols/ipv4.c"
 14012 ;; Parameters:    Size  Location     Type
 14013 ;;  packet          2   71[BANK0 ] PTR struct ipv4_packet
 14014 ;;		 -> udp_sendPacket@ipPacket(66), tcp_sendSYNACK@ipPacket(66), icmp_sendEchoRequest@ipRequest(66), icmp_sendEchoReply
      +@ipReply(66), 
 14015 ;; Auto vars:     Size  Location     Type
 14016 ;;		None
 14017 ;; Return value:  Size  Location     Type
 14018 ;;                  1    wreg      void 
 14019 ;; Registers used:
 14020 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14021 ;; Tracked objects:
 14022 ;;		On entry : 0/0
 14023 ;;		On exit  : 0/0
 14024 ;;		Unchanged: 0/0
 14025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14026 ;;      Params:         0       2       0       0       0       0       0       0       0
 14027 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14028 ;;      Temps:          0       4       0       0       0       0       0       0       0
 14029 ;;      Totals:         0       6       0       0       0       0       0       0       0
 14030 ;;Total ram usage:        6 bytes
 14031 ;; Hardware stack levels used:    1
 14032 ;; Hardware stack levels required when called:    9
 14033 ;; This function calls:
 14034 ;;		_ethernet_txFrameRequest
 14035 ;; This function is called by:
 14036 ;;		_icmp_sendEchoReply
 14037 ;;		_tcp_sendSYNACK
 14038 ;;		_udp_sendPacket
 14039 ;;		_icmp_sendEchoRequest
 14040 ;; This function uses a non-reentrant model
 14041 ;;
 14042                           
 14043                           	psect	text39
 14044  004482                     __ptext39:
 14045                           	opt stack 0
 14046  004482                     _ipv4_txFrameRequest:
 14047                           	opt stack 20
 14048                           
 14049                           ;ipv4.c: 42: packet->ethernet.length = packet->ipv4Header.totalLength + 8;
 14050                           
 14051                           ; BSR set to: 0
 14052                           ;incstack = 0
 14053  004482  0100               	movlb	0	; () banked
 14054  004484  EE20 F004          	lfsr	2,4
 14055  004488  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
 14056  00448A  26D9               	addwf	fsr2l,f,c
 14057  00448C  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
 14058  00448E  22DA               	addwfc	fsr2h,f,c
 14059  004490  CFDE F0A9          	movff	postinc2,??_ipv4_txFrameRequest
 14060  004494  CFDD F0AA          	movff	postdec2,??_ipv4_txFrameRequest+1
 14061  004498  0E08               	movlw	8
 14062  00449A  27A9               	addwf	??_ipv4_txFrameRequest& (0+255),f,b
 14063  00449C  0E00               	movlw	0
 14064  00449E  23AA               	addwfc	(??_ipv4_txFrameRequest+1)& (0+255),f,b
 14065  0044A0  EE20 F020          	lfsr	2,32
 14066  0044A4  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
 14067  0044A6  26D9               	addwf	fsr2l,f,c
 14068  0044A8  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
 14069  0044AA  22DA               	addwfc	fsr2h,f,c
 14070  0044AC  C0A9  FFDE         	movff	??_ipv4_txFrameRequest,postinc2
 14071  0044B0  C0AA  FFDD         	movff	??_ipv4_txFrameRequest+1,postdec2
 14072                           
 14073                           ;ipv4.c: 43: packet->ethernet.ethertype = ETHERTYPE_IPv4;
 14074  0044B4  EE20 F02E          	lfsr	2,46
 14075  0044B8  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
 14076  0044BA  26D9               	addwf	fsr2l,f,c
 14077  0044BC  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
 14078  0044BE  22DA               	addwfc	fsr2h,f,c
 14079  0044C0  0E00               	movlw	0
 14080  0044C2  6EDE               	movwf	postinc2,c
 14081  0044C4  0E08               	movlw	8
 14082  0044C6  6EDD               	movwf	postdec2,c
 14083                           
 14084                           ; BSR set to: 0
 14085                           ;ipv4.c: 44: ethernet_txFrameRequest(&packet->ethernet);
 14086  0044C8  0E20               	movlw	32
 14087  0044CA  25A7               	addwf	ipv4_txFrameRequest@packet& (0+255),w,b
 14088  0044CC  6FA2               	movwf	ethernet_txFrameRequest@frame& (0+255),b
 14089  0044CE  0E00               	movlw	0
 14090  0044D0  21A8               	addwfc	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
 14091  0044D2  6FA3               	movwf	(ethernet_txFrameRequest@frame+1)& (0+255),b
 14092  0044D4  EC4B  F028         	call	_ethernet_txFrameRequest	;wreg free
 14093                           
 14094                           ;ipv4.c: 46: packet->memory.fIsAssigned = packet->ethernet.memory.fIsAssigned;
 14095  0044D8  0100               	movlb	0	; () banked
 14096  0044DA  EE20 F036          	lfsr	2,54
 14097  0044DE  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
 14098  0044E0  26D9               	addwf	fsr2l,f,c
 14099  0044E2  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
 14100  0044E4  22DA               	addwfc	fsr2h,f,c
 14101  0044E6  EE10 F01D          	lfsr	1,29
 14102  0044EA  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
 14103  0044EC  26E1               	addwf	fsr1l,f,c
 14104  0044EE  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
 14105  0044F0  22E2               	addwfc	fsr1h,f,c
 14106  0044F2  CFDF FFE7          	movff	indf2,indf1
 14107                           
 14108                           ; BSR set to: 0
 14109                           ;ipv4.c: 47: packet->memory.fOutOfMemory = packet->ethernet.memory.fOutOfMemory;
 14110  0044F6  EE20 F037          	lfsr	2,55
 14111  0044FA  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
 14112  0044FC  26D9               	addwf	fsr2l,f,c
 14113  0044FE  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
 14114  004500  22DA               	addwfc	fsr2h,f,c
 14115  004502  EE10 F01E          	lfsr	1,30
 14116  004506  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
 14117  004508  26E1               	addwf	fsr1l,f,c
 14118  00450A  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
 14119  00450C  22E2               	addwfc	fsr1h,f,c
 14120  00450E  CFDF FFE7          	movff	indf2,indf1
 14121                           
 14122                           ; BSR set to: 0
 14123                           ;ipv4.c: 48: packet->memory.index = packet->ethernet.memory.index;
 14124  004512  EE20 F038          	lfsr	2,56
 14125  004516  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
 14126  004518  26D9               	addwf	fsr2l,f,c
 14127  00451A  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
 14128  00451C  22DA               	addwfc	fsr2h,f,c
 14129  00451E  EE10 F01F          	lfsr	1,31
 14130  004522  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
 14131  004524  26E1               	addwf	fsr1l,f,c
 14132  004526  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
 14133  004528  22E2               	addwfc	fsr1h,f,c
 14134  00452A  CFDF FFE7          	movff	indf2,indf1
 14135                           
 14136                           ; BSR set to: 0
 14137                           ;ipv4.c: 49: packet->memory.start = packet->ethernet.memory.start + 8;
 14138  00452E  EE20 F030          	lfsr	2,48
 14139  004532  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
 14140  004534  26D9               	addwf	fsr2l,f,c
 14141  004536  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
 14142  004538  22DA               	addwfc	fsr2h,f,c
 14143  00453A  CFDE F0A9          	movff	postinc2,??_ipv4_txFrameRequest
 14144  00453E  CFDD F0AA          	movff	postdec2,??_ipv4_txFrameRequest+1
 14145  004542  0E08               	movlw	8
 14146  004544  27A9               	addwf	??_ipv4_txFrameRequest& (0+255),f,b
 14147  004546  0E00               	movlw	0
 14148  004548  23AA               	addwfc	(??_ipv4_txFrameRequest+1)& (0+255),f,b
 14149  00454A  EE20 F017          	lfsr	2,23
 14150  00454E  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
 14151  004550  26D9               	addwf	fsr2l,f,c
 14152  004552  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
 14153  004554  22DA               	addwfc	fsr2h,f,c
 14154  004556  C0A9  FFDE         	movff	??_ipv4_txFrameRequest,postinc2
 14155  00455A  C0AA  FFDD         	movff	??_ipv4_txFrameRequest+1,postdec2
 14156                           
 14157                           ; BSR set to: 0
 14158                           ;ipv4.c: 50: packet->memory.end = packet->ethernet.memory.end;
 14159  00455E  EE20 F032          	lfsr	2,50
 14160  004562  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
 14161  004564  26D9               	addwf	fsr2l,f,c
 14162  004566  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
 14163  004568  22DA               	addwfc	fsr2h,f,c
 14164  00456A  EE10 F019          	lfsr	1,25
 14165  00456E  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
 14166  004570  26E1               	addwf	fsr1l,f,c
 14167  004572  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
 14168  004574  22E2               	addwfc	fsr1h,f,c
 14169  004576  CFDE FFE6          	movff	postinc2,postinc1
 14170  00457A  CFDD FFE5          	movff	postdec2,postdec1
 14171                           
 14172                           ; BSR set to: 0
 14173                           ;ipv4.c: 51: packet->memory.length = packet->ethernet.memory.length - 8;
 14174  00457E  0EF8               	movlw	248
 14175  004580  6FA9               	movwf	??_ipv4_txFrameRequest& (0+255),b
 14176  004582  0EFF               	movlw	255
 14177  004584  6FAA               	movwf	(??_ipv4_txFrameRequest+1)& (0+255),b
 14178  004586  EE20 F034          	lfsr	2,52
 14179  00458A  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
 14180  00458C  26D9               	addwf	fsr2l,f,c
 14181  00458E  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
 14182  004590  22DA               	addwfc	fsr2h,f,c
 14183  004592  CFDE F0AB          	movff	postinc2,??_ipv4_txFrameRequest+2
 14184  004596  CFDD F0AC          	movff	postdec2,??_ipv4_txFrameRequest+3
 14185  00459A  51A9               	movf	??_ipv4_txFrameRequest& (0+255),w,b
 14186  00459C  27AB               	addwf	(??_ipv4_txFrameRequest+2)& (0+255),f,b
 14187  00459E  51AA               	movf	(??_ipv4_txFrameRequest+1)& (0+255),w,b
 14188  0045A0  23AC               	addwfc	(??_ipv4_txFrameRequest+3)& (0+255),f,b
 14189  0045A2  EE20 F01B          	lfsr	2,27
 14190  0045A6  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
 14191  0045A8  26D9               	addwf	fsr2l,f,c
 14192  0045AA  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
 14193  0045AC  22DA               	addwfc	fsr2h,f,c
 14194  0045AE  C0AB  FFDE         	movff	??_ipv4_txFrameRequest+2,postinc2
 14195  0045B2  C0AC  FFDD         	movff	??_ipv4_txFrameRequest+3,postdec2
 14196                           
 14197                           ; BSR set to: 0
 14198  0045B6  0012               	return		;funcret
 14199  0045B8                     __end_of_ipv4_txFrameRequest:
 14200                           	opt stack 0
 14201                           tblptru	equ	0xFF8
 14202                           tblptrh	equ	0xFF7
 14203                           tblptrl	equ	0xFF6
 14204                           tablat	equ	0xFF5
 14205                           prodh	equ	0xFF4
 14206                           prodl	equ	0xFF3
 14207                           intcon	equ	0xFF2
 14208                           intcon3	equ	0xFF0
 14209                           indf0	equ	0xFEF
 14210                           postinc0	equ	0xFEE
 14211                           plusw0	equ	0xFEB
 14212                           fsr0h	equ	0xFEA
 14213                           fsr0l	equ	0xFE9
 14214                           wreg	equ	0xFE8
 14215                           indf1	equ	0xFE7
 14216                           postinc1	equ	0xFE6
 14217                           postdec1	equ	0xFE5
 14218                           plusw1	equ	0xFE3
 14219                           fsr1h	equ	0xFE2
 14220                           fsr1l	equ	0xFE1
 14221                           indf2	equ	0xFDF
 14222                           postinc2	equ	0xFDE
 14223                           postdec2	equ	0xFDD
 14224                           plusw2	equ	0xFDB
 14225                           fsr2h	equ	0xFDA
 14226                           fsr2l	equ	0xFD9
 14227                           status	equ	0xFD8
 14228                           
 14229 ;; *************** function _ipv4_streamToTransmissionBuffer *****************
 14230 ;; Defined at:
 14231 ;;		line 99 in file "src/stack/protocols/ipv4.c"
 14232 ;; Parameters:    Size  Location     Type
 14233 ;;  data            1    wreg     unsigned char 
 14234 ;;  packet         66   30[BANK0 ] struct ipv4_packet
 14235 ;; Auto vars:     Size  Location     Type
 14236 ;;  data            1   96[BANK0 ] unsigned char 
 14237 ;; Return value:  Size  Location     Type
 14238 ;;                  1    wreg      void 
 14239 ;; Registers used:
 14240 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 14241 ;; Tracked objects:
 14242 ;;		On entry : 0/0
 14243 ;;		On exit  : 0/0
 14244 ;;		Unchanged: 0/0
 14245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14246 ;;      Params:         0      66       0       0       0       0       0       0       0
 14247 ;;      Locals:         0       1       0       0       0       0       0       0       0
 14248 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14249 ;;      Totals:         0      67       0       0       0       0       0       0       0
 14250 ;;Total ram usage:       67 bytes
 14251 ;; Hardware stack levels used:    1
 14252 ;; Hardware stack levels required when called:    8
 14253 ;; This function calls:
 14254 ;;		_ethernetController_streamToTransmitBuffer
 14255 ;; This function is called by:
 14256 ;;		_icmp_sendEchoReply
 14257 ;;		_tcp_sendSYNACK
 14258 ;;		_udp_sendPacket
 14259 ;;		_icmp_sendEchoRequest
 14260 ;; This function uses a non-reentrant model
 14261 ;;
 14262                           
 14263                           	psect	text40
 14264  006CFC                     __ptext40:
 14265                           	opt stack 0
 14266  006CFC                     _ipv4_streamToTransmissionBuffer:
 14267                           	opt stack 21
 14268                           
 14269                           ; BSR set to: 0
 14270                           ;incstack = 0
 14271                           ;ipv4_streamToTransmissionBuffer@data stored from wreg
 14272  006CFC  0100               	movlb	0	; () banked
 14273  006CFE  6FC0               	movwf	ipv4_streamToTransmissionBuffer@data& (0+255),b
 14274                           
 14275                           ;ipv4.c: 100: ethernetController_streamToTransmitBuffer(data, packet.memory);
 14276  006D00  EE20  F095         	lfsr	2,ipv4_streamToTransmissionBuffer@packet+23
 14277  006D04  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 14278  006D08  0E08               	movlw	8
 14279  006D0A                     u11731:
 14280  006D0A  CFDB FFEB          	movff	plusw2,plusw0
 14281  006D0E  06E8               	decf	wreg,f,c
 14282  006D10  E2FC               	bc	u11731
 14283  006D12  0100               	movlb	0	; () banked
 14284  006D14  51C0               	movf	ipv4_streamToTransmissionBuffer@data& (0+255),w,b
 14285  006D16  EC8E  F02F         	call	_ethernetController_streamToTransmitBuffer
 14286  006D1A  0012               	return		;funcret
 14287  006D1C                     __end_of_ipv4_streamToTransmissionBuffer:
 14288                           	opt stack 0
 14289                           tblptru	equ	0xFF8
 14290                           tblptrh	equ	0xFF7
 14291                           tblptrl	equ	0xFF6
 14292                           tablat	equ	0xFF5
 14293                           prodh	equ	0xFF4
 14294                           prodl	equ	0xFF3
 14295                           intcon	equ	0xFF2
 14296                           intcon3	equ	0xFF0
 14297                           indf0	equ	0xFEF
 14298                           postinc0	equ	0xFEE
 14299                           plusw0	equ	0xFEB
 14300                           fsr0h	equ	0xFEA
 14301                           fsr0l	equ	0xFE9
 14302                           wreg	equ	0xFE8
 14303                           indf1	equ	0xFE7
 14304                           postinc1	equ	0xFE6
 14305                           postdec1	equ	0xFE5
 14306                           plusw1	equ	0xFE3
 14307                           fsr1h	equ	0xFE2
 14308                           fsr1l	equ	0xFE1
 14309                           indf2	equ	0xFDF
 14310                           postinc2	equ	0xFDE
 14311                           postdec2	equ	0xFDD
 14312                           plusw2	equ	0xFDB
 14313                           fsr2h	equ	0xFDA
 14314                           fsr2l	equ	0xFD9
 14315                           status	equ	0xFD8
 14316                           
 14317 ;; *************** function _ipv4_calculateHeaderChecksum *****************
 14318 ;; Defined at:
 14319 ;;		line 128 in file "src/stack/protocols/ipv4.c"
 14320 ;; Parameters:    Size  Location     Type
 14321 ;;  header          2    0[BANK0 ] PTR struct ipv4_header
 14322 ;;		 -> udp_sendPacket@ipPacket(66), tcp_sendSYNACK@ipPacket(66), icmp_sendEchoRequest@ipRequest(66), icmp_sendEchoReply
      +@ipReply(66), 
 14323 ;;		 -> ipv4_checkHeaderChecksum@testHeader(23), 
 14324 ;; Auto vars:     Size  Location     Type
 14325 ;;  sum             4   11[BANK0 ] unsigned long 
 14326 ;;  carry           1   10[BANK0 ] unsigned char 
 14327 ;; Return value:  Size  Location     Type
 14328 ;;                  1    wreg      void 
 14329 ;; Registers used:
 14330 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14331 ;; Tracked objects:
 14332 ;;		On entry : 0/0
 14333 ;;		On exit  : 0/0
 14334 ;;		Unchanged: 0/0
 14335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14336 ;;      Params:         0       2       0       0       0       0       0       0       0
 14337 ;;      Locals:         0       5       0       0       0       0       0       0       0
 14338 ;;      Temps:          0       8       0       0       0       0       0       0       0
 14339 ;;      Totals:         0      15       0       0       0       0       0       0       0
 14340 ;;Total ram usage:       15 bytes
 14341 ;; Hardware stack levels used:    1
 14342 ;; Hardware stack levels required when called:    4
 14343 ;; This function calls:
 14344 ;;		Nothing
 14345 ;; This function is called by:
 14346 ;;		_ipv4_checkHeaderChecksum
 14347 ;;		_icmp_sendEchoReply
 14348 ;;		_tcp_sendSYNACK
 14349 ;;		_udp_sendPacket
 14350 ;;		_icmp_sendEchoRequest
 14351 ;; This function uses a non-reentrant model
 14352 ;;
 14353                           
 14354                           	psect	text41
 14355  0020CA                     __ptext41:
 14356                           	opt stack 0
 14357  0020CA                     _ipv4_calculateHeaderChecksum:
 14358                           	opt stack 25
 14359                           
 14360                           ;ipv4.c: 130: uint32_t sum = 0;
 14361                           
 14362                           ;incstack = 0
 14363  0020CA  0E00               	movlw	0
 14364  0020CC  0100               	movlb	0	; () banked
 14365  0020CE  6F6B               	movwf	ipv4_calculateHeaderChecksum@sum& (0+255),b
 14366  0020D0  0E00               	movlw	0
 14367  0020D2  6F6C               	movwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),b
 14368  0020D4  0E00               	movlw	0
 14369  0020D6  6F6D               	movwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),b
 14370  0020D8  0E00               	movlw	0
 14371  0020DA  6F6E               	movwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),b
 14372                           
 14373                           ;ipv4.c: 131: uint8_t carry = 0;
 14374  0020DC  0E00               	movlw	0
 14375  0020DE  6F6A               	movwf	ipv4_calculateHeaderChecksum@carry& (0+255),b
 14376                           
 14377                           ; BSR set to: 0
 14378                           ;ipv4.c: 132: sum = ((header->version << 12) | (header->headerLength << 8) | (header->ds
      +                          cp << 2) | (header->ecn))&0xffff;
 14379  0020E0  EE20 F002          	lfsr	2,2
 14380  0020E4  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
 14381  0020E6  26D9               	addwf	fsr2l,f,c
 14382  0020E8  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
 14383  0020EA  22DA               	addwfc	fsr2h,f,c
 14384  0020EC  50DF               	movf	indf2,w,c
 14385  0020EE  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
 14386  0020F0  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
 14387  0020F2  90D8               	bcf	status,0,c
 14388  0020F4  3762               	rlcf	??_ipv4_calculateHeaderChecksum& (0+255),f,b
 14389  0020F6  3763               	rlcf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
 14390  0020F8  90D8               	bcf	status,0,c
 14391  0020FA  3762               	rlcf	??_ipv4_calculateHeaderChecksum& (0+255),f,b
 14392  0020FC  3763               	rlcf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
 14393  0020FE  EE20 F001          	lfsr	2,1
 14394  002102  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
 14395  002104  26D9               	addwf	fsr2l,f,c
 14396  002106  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
 14397  002108  22DA               	addwfc	fsr2h,f,c
 14398  00210A  50DF               	movf	indf2,w,c
 14399  00210C  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
 14400  00210E  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
 14401  002110  6F66               	movwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
 14402  002112  6B65               	clrf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
 14403  002114  C060  FFD9         	movff	ipv4_calculateHeaderChecksum@header,fsr2l
 14404  002118  C061  FFDA         	movff	ipv4_calculateHeaderChecksum@header+1,fsr2h
 14405  00211C  50DF               	movf	indf2,w,c
 14406  00211E  6F67               	movwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),b
 14407  002120  6B68               	clrf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),b
 14408  002122  0E0C               	movlw	12
 14409  002124                     u11745:
 14410  002124  90D8               	bcf	status,0,c
 14411  002126  3767               	rlcf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),f,b
 14412  002128  3768               	rlcf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),f,b
 14413  00212A  2EE8               	decfsz	wreg,f,c
 14414  00212C  D7FB               	goto	u11745
 14415  00212E  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
 14416  002130  1367               	iorwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),f,b
 14417  002132  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
 14418  002134  1368               	iorwf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),f,b
 14419  002136  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
 14420  002138  1367               	iorwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),f,b
 14421  00213A  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
 14422  00213C  1368               	iorwf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),f,b
 14423  00213E  EE20 F003          	lfsr	2,3
 14424  002142  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
 14425  002144  26D9               	addwf	fsr2l,f,c
 14426  002146  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
 14427  002148  22DA               	addwfc	fsr2h,f,c
 14428  00214A  50DF               	movf	indf2,w,c
 14429  00214C  6F69               	movwf	(??_ipv4_calculateHeaderChecksum+7)& (0+255),b
 14430  00214E  5169               	movf	(??_ipv4_calculateHeaderChecksum+7)& (0+255),w,b
 14431  002150  1367               	iorwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),f,b
 14432  002152  0E00               	movlw	0
 14433  002154  1368               	iorwf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),f,b
 14434  002156  C067  F06B         	movff	??_ipv4_calculateHeaderChecksum+5,ipv4_calculateHeaderChecksum@sum
 14435  00215A  C068  F06C         	movff	??_ipv4_calculateHeaderChecksum+6,ipv4_calculateHeaderChecksum@sum+1
 14436  00215E  6B6D               	clrf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),b
 14437  002160  6B6E               	clrf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),b
 14438                           
 14439                           ; BSR set to: 0
 14440                           ;ipv4.c: 133: sum += header->totalLength;
 14441  002162  EE20 F004          	lfsr	2,4
 14442  002166  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
 14443  002168  26D9               	addwf	fsr2l,f,c
 14444  00216A  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
 14445  00216C  22DA               	addwfc	fsr2h,f,c
 14446  00216E  CFDE F062          	movff	postinc2,??_ipv4_calculateHeaderChecksum
 14447  002172  CFDD F063          	movff	postdec2,??_ipv4_calculateHeaderChecksum+1
 14448  002176  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
 14449  002178  276B               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
 14450  00217A  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
 14451  00217C  236C               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
 14452  00217E  0E00               	movlw	0
 14453  002180  236D               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
 14454  002182  0E00               	movlw	0
 14455  002184  236E               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
 14456                           
 14457                           ; BSR set to: 0
 14458                           ;ipv4.c: 134: sum += header->identification;
 14459  002186  EE20 F006          	lfsr	2,6
 14460  00218A  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
 14461  00218C  26D9               	addwf	fsr2l,f,c
 14462  00218E  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
 14463  002190  22DA               	addwfc	fsr2h,f,c
 14464  002192  CFDE F062          	movff	postinc2,??_ipv4_calculateHeaderChecksum
 14465  002196  CFDD F063          	movff	postdec2,??_ipv4_calculateHeaderChecksum+1
 14466  00219A  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
 14467  00219C  276B               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
 14468  00219E  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
 14469  0021A0  236C               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
 14470  0021A2  0E00               	movlw	0
 14471  0021A4  236D               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
 14472  0021A6  0E00               	movlw	0
 14473  0021A8  236E               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
 14474                           
 14475                           ; BSR set to: 0
 14476                           ;ipv4.c: 135: sum += ((header->flags << 13) | (header->fragmentOffset))&0xffff;
 14477  0021AA  EE20 F009          	lfsr	2,9
 14478  0021AE  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
 14479  0021B0  26D9               	addwf	fsr2l,f,c
 14480  0021B2  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
 14481  0021B4  22DA               	addwfc	fsr2h,f,c
 14482  0021B6  CFDE F062          	movff	postinc2,??_ipv4_calculateHeaderChecksum
 14483  0021BA  CFDD F063          	movff	postdec2,??_ipv4_calculateHeaderChecksum+1
 14484  0021BE  EE20 F008          	lfsr	2,8
 14485  0021C2  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
 14486  0021C4  26D9               	addwf	fsr2l,f,c
 14487  0021C6  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
 14488  0021C8  22DA               	addwfc	fsr2h,f,c
 14489  0021CA  50DF               	movf	indf2,w,c
 14490  0021CC  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
 14491  0021CE  6B65               	clrf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
 14492  0021D0  0E0D               	movlw	13
 14493  0021D2                     u11755:
 14494  0021D2  90D8               	bcf	status,0,c
 14495  0021D4  3764               	rlcf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
 14496  0021D6  3765               	rlcf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
 14497  0021D8  2EE8               	decfsz	wreg,f,c
 14498  0021DA  D7FB               	goto	u11755
 14499  0021DC  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
 14500  0021DE  1364               	iorwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
 14501  0021E0  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
 14502  0021E2  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
 14503  0021E4  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
 14504  0021E6  276B               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
 14505  0021E8  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
 14506  0021EA  236C               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
 14507  0021EC  0E00               	movlw	0
 14508  0021EE  236D               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
 14509  0021F0  0E00               	movlw	0
 14510  0021F2  236E               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
 14511                           
 14512                           ; BSR set to: 0
 14513                           ;ipv4.c: 136: sum += ((header->timeToLive << 8) | (header->protocol))&0xffff;
 14514  0021F4  EE20 F00B          	lfsr	2,11
 14515  0021F8  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
 14516  0021FA  26D9               	addwf	fsr2l,f,c
 14517  0021FC  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
 14518  0021FE  22DA               	addwfc	fsr2h,f,c
 14519  002200  50DF               	movf	indf2,w,c
 14520  002202  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
 14521  002204  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
 14522  002206  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
 14523  002208  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
 14524  00220A  EE20 F00C          	lfsr	2,12
 14525  00220E  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
 14526  002210  26D9               	addwf	fsr2l,f,c
 14527  002212  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
 14528  002214  22DA               	addwfc	fsr2h,f,c
 14529  002216  50DF               	movf	indf2,w,c
 14530  002218  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
 14531  00221A  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
 14532  00221C  1363               	iorwf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
 14533  00221E  0E00               	movlw	0
 14534  002220  1364               	iorwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
 14535  002222  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
 14536  002224  276B               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
 14537  002226  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
 14538  002228  236C               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
 14539  00222A  0E00               	movlw	0
 14540  00222C  236D               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
 14541  00222E  0E00               	movlw	0
 14542  002230  236E               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
 14543                           
 14544                           ; BSR set to: 0
 14545                           ;ipv4.c: 138: sum += ((header->source.address[1] | (header->source.address[0] << 8)))&0x
      +                          ffff;
 14546  002232  EE20 F00F          	lfsr	2,15
 14547  002236  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
 14548  002238  26D9               	addwf	fsr2l,f,c
 14549  00223A  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
 14550  00223C  22DA               	addwfc	fsr2h,f,c
 14551  00223E  50DF               	movf	indf2,w,c
 14552  002240  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
 14553  002242  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
 14554  002244  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
 14555  002246  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
 14556  002248  EE20 F010          	lfsr	2,16
 14557  00224C  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
 14558  00224E  26D9               	addwf	fsr2l,f,c
 14559  002250  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
 14560  002252  22DA               	addwfc	fsr2h,f,c
 14561  002254  50DF               	movf	indf2,w,c
 14562  002256  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
 14563  002258  6B66               	clrf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
 14564  00225A  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
 14565  00225C  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
 14566  00225E  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
 14567  002260  1366               	iorwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),f,b
 14568  002262  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
 14569  002264  276B               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
 14570  002266  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
 14571  002268  236C               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
 14572  00226A  0E00               	movlw	0
 14573  00226C  236D               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
 14574  00226E  0E00               	movlw	0
 14575  002270  236E               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
 14576                           
 14577                           ; BSR set to: 0
 14578                           ;ipv4.c: 139: sum += ((header->source.address[3] | (header->source.address[2] << 8)))&0x
      +                          ffff;
 14579  002272  EE20 F011          	lfsr	2,17
 14580  002276  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
 14581  002278  26D9               	addwf	fsr2l,f,c
 14582  00227A  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
 14583  00227C  22DA               	addwfc	fsr2h,f,c
 14584  00227E  50DF               	movf	indf2,w,c
 14585  002280  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
 14586  002282  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
 14587  002284  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
 14588  002286  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
 14589  002288  EE20 F012          	lfsr	2,18
 14590  00228C  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
 14591  00228E  26D9               	addwf	fsr2l,f,c
 14592  002290  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
 14593  002292  22DA               	addwfc	fsr2h,f,c
 14594  002294  50DF               	movf	indf2,w,c
 14595  002296  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
 14596  002298  6B66               	clrf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
 14597  00229A  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
 14598  00229C  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
 14599  00229E  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
 14600  0022A0  1366               	iorwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),f,b
 14601  0022A2  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
 14602  0022A4  276B               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
 14603  0022A6  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
 14604  0022A8  236C               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
 14605  0022AA  0E00               	movlw	0
 14606  0022AC  236D               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
 14607  0022AE  0E00               	movlw	0
 14608  0022B0  236E               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
 14609                           
 14610                           ; BSR set to: 0
 14611                           ;ipv4.c: 140: sum += ((header->destination.address[1] | (header->destination.address[0] 
      +                          << 8)))&0xffff;
 14612  0022B2  EE20 F013          	lfsr	2,19
 14613  0022B6  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
 14614  0022B8  26D9               	addwf	fsr2l,f,c
 14615  0022BA  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
 14616  0022BC  22DA               	addwfc	fsr2h,f,c
 14617  0022BE  50DF               	movf	indf2,w,c
 14618  0022C0  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
 14619  0022C2  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
 14620  0022C4  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
 14621  0022C6  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
 14622  0022C8  EE20 F014          	lfsr	2,20
 14623  0022CC  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
 14624  0022CE  26D9               	addwf	fsr2l,f,c
 14625  0022D0  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
 14626  0022D2  22DA               	addwfc	fsr2h,f,c
 14627  0022D4  50DF               	movf	indf2,w,c
 14628  0022D6  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
 14629  0022D8  6B66               	clrf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
 14630  0022DA  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
 14631  0022DC  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
 14632  0022DE  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
 14633  0022E0  1366               	iorwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),f,b
 14634  0022E2  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
 14635  0022E4  276B               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
 14636  0022E6  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
 14637  0022E8  236C               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
 14638  0022EA  0E00               	movlw	0
 14639  0022EC  236D               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
 14640  0022EE  0E00               	movlw	0
 14641  0022F0  236E               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
 14642                           
 14643                           ; BSR set to: 0
 14644                           ;ipv4.c: 141: sum += ((header->destination.address[3] | (header->destination.address[2] 
      +                          << 8)))&0xffff;
 14645  0022F2  EE20 F015          	lfsr	2,21
 14646  0022F6  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
 14647  0022F8  26D9               	addwf	fsr2l,f,c
 14648  0022FA  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
 14649  0022FC  22DA               	addwfc	fsr2h,f,c
 14650  0022FE  50DF               	movf	indf2,w,c
 14651  002300  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
 14652  002302  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
 14653  002304  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
 14654  002306  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
 14655  002308  EE20 F016          	lfsr	2,22
 14656  00230C  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
 14657  00230E  26D9               	addwf	fsr2l,f,c
 14658  002310  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
 14659  002312  22DA               	addwfc	fsr2h,f,c
 14660  002314  50DF               	movf	indf2,w,c
 14661  002316  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
 14662  002318  6B66               	clrf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
 14663  00231A  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
 14664  00231C  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
 14665  00231E  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
 14666  002320  1366               	iorwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),f,b
 14667  002322  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
 14668  002324  276B               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
 14669  002326  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
 14670  002328  236C               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
 14671  00232A  0E00               	movlw	0
 14672  00232C  236D               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
 14673  00232E  0E00               	movlw	0
 14674  002330  236E               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
 14675                           
 14676                           ; BSR set to: 0
 14677                           ;ipv4.c: 143: uint8_t carry = (sum & 0xffff0000) >> 16;
 14678  002332  0E00               	movlw	0
 14679  002334  156B               	andwf	ipv4_calculateHeaderChecksum@sum& (0+255),w,b
 14680  002336  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
 14681  002338  0E00               	movlw	0
 14682  00233A  156C               	andwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),w,b
 14683  00233C  6F63               	movwf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
 14684  00233E  0EFF               	movlw	255
 14685  002340  156D               	andwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),w,b
 14686  002342  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
 14687  002344  0EFF               	movlw	255
 14688  002346  156E               	andwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),w,b
 14689  002348  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
 14690  00234A  0E11               	movlw	17
 14691  00234C  D005               	goto	u11760
 14692  00234E                     u11765:
 14693  00234E  90D8               	bcf	status,0,c
 14694  002350  3365               	rrcf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
 14695  002352  3364               	rrcf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
 14696  002354  3363               	rrcf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
 14697  002356  3362               	rrcf	??_ipv4_calculateHeaderChecksum& (0+255),f,b
 14698  002358                     u11760:
 14699  002358  2EE8               	decfsz	wreg,f,c
 14700  00235A  D7F9               	goto	u11765
 14701  00235C  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
 14702  00235E  6F6A               	movwf	ipv4_calculateHeaderChecksum@carry& (0+255),b
 14703                           
 14704                           ; BSR set to: 0
 14705                           ;ipv4.c: 144: sum &= 0xffff;
 14706  002360  0EFF               	movlw	255
 14707  002362  176B               	andwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
 14708  002364  0EFF               	movlw	255
 14709  002366  176C               	andwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
 14710  002368  0E00               	movlw	0
 14711  00236A  176D               	andwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
 14712  00236C  0E00               	movlw	0
 14713  00236E  176E               	andwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
 14714                           
 14715                           ; BSR set to: 0
 14716                           ;ipv4.c: 145: sum += carry;
 14717  002370  516A               	movf	ipv4_calculateHeaderChecksum@carry& (0+255),w,b
 14718  002372  276B               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
 14719  002374  0E00               	movlw	0
 14720  002376  236C               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
 14721  002378  236D               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
 14722  00237A  236E               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
 14723                           
 14724                           ; BSR set to: 0
 14725                           ;ipv4.c: 146: if (sum > 0xffff) {
 14726  00237C  516E               	movf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),w,b
 14727  00237E  E103               	bnz	u11770
 14728  002380  056D               	decf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),w,b
 14729  002382  A0D8               	btfss	status,0,c
 14730  002384  D025               	goto	l1148
 14731  002386                     u11770:
 14732                           
 14733                           ; BSR set to: 0
 14734                           ;ipv4.c: 147: sum += ((sum & 0xffff0000) >> 16);
 14735  002386  0E00               	movlw	0
 14736  002388  156B               	andwf	ipv4_calculateHeaderChecksum@sum& (0+255),w,b
 14737  00238A  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
 14738  00238C  0E00               	movlw	0
 14739  00238E  156C               	andwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),w,b
 14740  002390  6F63               	movwf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
 14741  002392  0EFF               	movlw	255
 14742  002394  156D               	andwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),w,b
 14743  002396  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
 14744  002398  0EFF               	movlw	255
 14745  00239A  156E               	andwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),w,b
 14746  00239C  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
 14747  00239E  0E11               	movlw	17
 14748  0023A0  D005               	goto	u11780
 14749  0023A2                     u11785:
 14750  0023A2  90D8               	bcf	status,0,c
 14751  0023A4  3365               	rrcf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
 14752  0023A6  3364               	rrcf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
 14753  0023A8  3363               	rrcf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
 14754  0023AA  3362               	rrcf	??_ipv4_calculateHeaderChecksum& (0+255),f,b
 14755  0023AC                     u11780:
 14756  0023AC  2EE8               	decfsz	wreg,f,c
 14757  0023AE  D7F9               	goto	u11785
 14758  0023B0  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
 14759  0023B2  276B               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
 14760  0023B4  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
 14761  0023B6  236C               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
 14762  0023B8  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
 14763  0023BA  236D               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
 14764  0023BC  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
 14765  0023BE  236E               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
 14766                           
 14767                           ;ipv4.c: 148: sum &= 0xffff;
 14768  0023C0  0EFF               	movlw	255
 14769  0023C2  176B               	andwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
 14770  0023C4  0EFF               	movlw	255
 14771  0023C6  176C               	andwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
 14772  0023C8  0E00               	movlw	0
 14773  0023CA  176D               	andwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
 14774  0023CC  0E00               	movlw	0
 14775  0023CE  176E               	andwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
 14776  0023D0                     l1148:
 14777                           
 14778                           ; BSR set to: 0
 14779                           ;ipv4.c: 149: }
 14780                           ;ipv4.c: 151: header->checksum = ~sum;
 14781                           
 14782                           ; BSR set to: 0
 14783  0023D0  1D6B               	comf	ipv4_calculateHeaderChecksum@sum& (0+255),w,b
 14784  0023D2  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
 14785  0023D4  1D6C               	comf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),w,b
 14786  0023D6  6F63               	movwf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
 14787  0023D8  EE20 F00D          	lfsr	2,13
 14788  0023DC  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
 14789  0023DE  26D9               	addwf	fsr2l,f,c
 14790  0023E0  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
 14791  0023E2  22DA               	addwfc	fsr2h,f,c
 14792  0023E4  C062  FFDE         	movff	??_ipv4_calculateHeaderChecksum,postinc2
 14793  0023E8  C063  FFDD         	movff	??_ipv4_calculateHeaderChecksum+1,postdec2
 14794                           
 14795                           ; BSR set to: 0
 14796  0023EC  0012               	return		;funcret
 14797  0023EE                     __end_of_ipv4_calculateHeaderChecksum:
 14798                           	opt stack 0
 14799                           tblptru	equ	0xFF8
 14800                           tblptrh	equ	0xFF7
 14801                           tblptrl	equ	0xFF6
 14802                           tablat	equ	0xFF5
 14803                           prodh	equ	0xFF4
 14804                           prodl	equ	0xFF3
 14805                           intcon	equ	0xFF2
 14806                           intcon3	equ	0xFF0
 14807                           indf0	equ	0xFEF
 14808                           postinc0	equ	0xFEE
 14809                           plusw0	equ	0xFEB
 14810                           fsr0h	equ	0xFEA
 14811                           fsr0l	equ	0xFE9
 14812                           wreg	equ	0xFE8
 14813                           indf1	equ	0xFE7
 14814                           postinc1	equ	0xFE6
 14815                           postdec1	equ	0xFE5
 14816                           plusw1	equ	0xFE3
 14817                           fsr1h	equ	0xFE2
 14818                           fsr1l	equ	0xFE1
 14819                           indf2	equ	0xFDF
 14820                           postinc2	equ	0xFDE
 14821                           postdec2	equ	0xFDD
 14822                           plusw2	equ	0xFDB
 14823                           fsr2h	equ	0xFDA
 14824                           fsr2l	equ	0xFD9
 14825                           status	equ	0xFD8
 14826                           
 14827 ;; *************** function _icmp_writeHeaderIntoBuffer *****************
 14828 ;; Defined at:
 14829 ;;		line 245 in file "src/stack/protocols/icmp.c"
 14830 ;; Parameters:    Size  Location     Type
 14831 ;;  buf             2    0[BANK0 ] PTR unsigned char 
 14832 ;;		 -> icmp_sendEchoRequest@icmpMessage(64), icmp_sendEchoReply@icmpMessage(64), 
 14833 ;;  header          8    2[BANK0 ] struct icmpHeader
 14834 ;; Auto vars:     Size  Location     Type
 14835 ;;		None
 14836 ;; Return value:  Size  Location     Type
 14837 ;;                  1    wreg      void 
 14838 ;; Registers used:
 14839 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 14840 ;; Tracked objects:
 14841 ;;		On entry : 0/0
 14842 ;;		On exit  : 0/0
 14843 ;;		Unchanged: 0/0
 14844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14845 ;;      Params:         0      10       0       0       0       0       0       0       0
 14846 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14847 ;;      Temps:          0       4       0       0       0       0       0       0       0
 14848 ;;      Totals:         0      14       0       0       0       0       0       0       0
 14849 ;;Total ram usage:       14 bytes
 14850 ;; Hardware stack levels used:    1
 14851 ;; Hardware stack levels required when called:    4
 14852 ;; This function calls:
 14853 ;;		Nothing
 14854 ;; This function is called by:
 14855 ;;		_icmp_sendEchoReply
 14856 ;;		_icmp_sendEchoRequest
 14857 ;; This function uses a non-reentrant model
 14858 ;;
 14859                           
 14860                           	psect	text42
 14861  005516                     __ptext42:
 14862                           	opt stack 0
 14863  005516                     _icmp_writeHeaderIntoBuffer:
 14864                           	opt stack 21
 14865                           
 14866                           ;icmp.c: 246: *buf = header.typeOfMessage;
 14867                           
 14868                           ; BSR set to: 0
 14869                           ;incstack = 0
 14870  005516  C060  FFD9         	movff	icmp_writeHeaderIntoBuffer@buf,fsr2l
 14871  00551A  C061  FFDA         	movff	icmp_writeHeaderIntoBuffer@buf+1,fsr2h
 14872  00551E  C062  FFDF         	movff	icmp_writeHeaderIntoBuffer@header,indf2
 14873                           
 14874                           ;icmp.c: 247: *(buf + 1) = header.code;
 14875  005522  0100               	movlb	0	; () banked
 14876  005524  EE20 F001          	lfsr	2,1
 14877  005528  5160               	movf	icmp_writeHeaderIntoBuffer@buf& (0+255),w,b
 14878  00552A  26D9               	addwf	fsr2l,f,c
 14879  00552C  5161               	movf	(icmp_writeHeaderIntoBuffer@buf+1)& (0+255),w,b
 14880  00552E  22DA               	addwfc	fsr2h,f,c
 14881  005530  C063  FFDF         	movff	icmp_writeHeaderIntoBuffer@header+1,indf2
 14882                           
 14883                           ; BSR set to: 0
 14884                           ;icmp.c: 248: *(buf + 2) = (header.checksum & 0xff00) >> 8;
 14885  005534  EE20 F002          	lfsr	2,2
 14886  005538  5160               	movf	icmp_writeHeaderIntoBuffer@buf& (0+255),w,b
 14887  00553A  26D9               	addwf	fsr2l,f,c
 14888  00553C  5161               	movf	(icmp_writeHeaderIntoBuffer@buf+1)& (0+255),w,b
 14889  00553E  22DA               	addwfc	fsr2h,f,c
 14890  005540  5165               	movf	(icmp_writeHeaderIntoBuffer@header+3)& (0+255),w,b
 14891  005542  6EDF               	movwf	indf2,c
 14892                           
 14893                           ; BSR set to: 0
 14894                           ;icmp.c: 249: *(buf + 3) = header.checksum & 0xff;
 14895  005544  EE20 F003          	lfsr	2,3
 14896  005548  5160               	movf	icmp_writeHeaderIntoBuffer@buf& (0+255),w,b
 14897  00554A  26D9               	addwf	fsr2l,f,c
 14898  00554C  5161               	movf	(icmp_writeHeaderIntoBuffer@buf+1)& (0+255),w,b
 14899  00554E  22DA               	addwfc	fsr2h,f,c
 14900  005550  C064  FFDF         	movff	icmp_writeHeaderIntoBuffer@header+2,indf2
 14901                           
 14902                           ; BSR set to: 0
 14903                           ;icmp.c: 250: *(buf + 4) = (header.headerData & 0xff000000) >> 24;
 14904  005554  EE20 F004          	lfsr	2,4
 14905  005558  5160               	movf	icmp_writeHeaderIntoBuffer@buf& (0+255),w,b
 14906  00555A  26D9               	addwf	fsr2l,f,c
 14907  00555C  5161               	movf	(icmp_writeHeaderIntoBuffer@buf+1)& (0+255),w,b
 14908  00555E  22DA               	addwfc	fsr2h,f,c
 14909  005560  EE10  F066         	lfsr	1,icmp_writeHeaderIntoBuffer@header+4
 14910  005564  0E00               	movlw	0
 14911  005566  14E6               	andwf	postinc1,w,c
 14912  005568  6F6A               	movwf	??_icmp_writeHeaderIntoBuffer& (0+255),b
 14913  00556A  0E00               	movlw	0
 14914  00556C  14E6               	andwf	postinc1,w,c
 14915  00556E  6F6B               	movwf	(??_icmp_writeHeaderIntoBuffer+1)& (0+255),b
 14916  005570  0E00               	movlw	0
 14917  005572  14E6               	andwf	postinc1,w,c
 14918  005574  6F6C               	movwf	(??_icmp_writeHeaderIntoBuffer+2)& (0+255),b
 14919  005576  0EFF               	movlw	255
 14920  005578  14E6               	andwf	postinc1,w,c
 14921  00557A  6F6D               	movwf	(??_icmp_writeHeaderIntoBuffer+3)& (0+255),b
 14922  00557C  0E19               	movlw	25
 14923  00557E  D005               	goto	u12040
 14924  005580                     u12045:
 14925  005580  90D8               	bcf	status,0,c
 14926  005582  336D               	rrcf	(??_icmp_writeHeaderIntoBuffer+3)& (0+255),f,b
 14927  005584  336C               	rrcf	(??_icmp_writeHeaderIntoBuffer+2)& (0+255),f,b
 14928  005586  336B               	rrcf	(??_icmp_writeHeaderIntoBuffer+1)& (0+255),f,b
 14929  005588  336A               	rrcf	??_icmp_writeHeaderIntoBuffer& (0+255),f,b
 14930  00558A                     u12040:
 14931  00558A  2EE8               	decfsz	wreg,f,c
 14932  00558C  D7F9               	goto	u12045
 14933  00558E  516A               	movf	??_icmp_writeHeaderIntoBuffer& (0+255),w,b
 14934  005590  6EDF               	movwf	indf2,c
 14935                           
 14936                           ; BSR set to: 0
 14937                           ;icmp.c: 251: *(buf + 5) = (header.headerData & 0x00ff0000) >> 16;
 14938  005592  EE20 F005          	lfsr	2,5
 14939  005596  5160               	movf	icmp_writeHeaderIntoBuffer@buf& (0+255),w,b
 14940  005598  26D9               	addwf	fsr2l,f,c
 14941  00559A  5161               	movf	(icmp_writeHeaderIntoBuffer@buf+1)& (0+255),w,b
 14942  00559C  22DA               	addwfc	fsr2h,f,c
 14943  00559E  C068  FFDF         	movff	icmp_writeHeaderIntoBuffer@header+6,indf2
 14944                           
 14945                           ; BSR set to: 0
 14946                           ;icmp.c: 252: *(buf + 6) = (header.headerData & 0x0000ff00) >> 8;
 14947  0055A2  EE20 F006          	lfsr	2,6
 14948  0055A6  5160               	movf	icmp_writeHeaderIntoBuffer@buf& (0+255),w,b
 14949  0055A8  26D9               	addwf	fsr2l,f,c
 14950  0055AA  5161               	movf	(icmp_writeHeaderIntoBuffer@buf+1)& (0+255),w,b
 14951  0055AC  22DA               	addwfc	fsr2h,f,c
 14952  0055AE  C067  FFDF         	movff	icmp_writeHeaderIntoBuffer@header+5,indf2
 14953                           
 14954                           ; BSR set to: 0
 14955                           ;icmp.c: 253: *(buf + 7) = (header.headerData & 0x000000ff);
 14956  0055B2  EE20 F007          	lfsr	2,7
 14957  0055B6  5160               	movf	icmp_writeHeaderIntoBuffer@buf& (0+255),w,b
 14958  0055B8  26D9               	addwf	fsr2l,f,c
 14959  0055BA  5161               	movf	(icmp_writeHeaderIntoBuffer@buf+1)& (0+255),w,b
 14960  0055BC  22DA               	addwfc	fsr2h,f,c
 14961  0055BE  C066  FFDF         	movff	icmp_writeHeaderIntoBuffer@header+4,indf2
 14962                           
 14963                           ; BSR set to: 0
 14964  0055C2  0012               	return		;funcret
 14965  0055C4                     __end_of_icmp_writeHeaderIntoBuffer:
 14966                           	opt stack 0
 14967                           tblptru	equ	0xFF8
 14968                           tblptrh	equ	0xFF7
 14969                           tblptrl	equ	0xFF6
 14970                           tablat	equ	0xFF5
 14971                           prodh	equ	0xFF4
 14972                           prodl	equ	0xFF3
 14973                           intcon	equ	0xFF2
 14974                           intcon3	equ	0xFF0
 14975                           indf0	equ	0xFEF
 14976                           postinc0	equ	0xFEE
 14977                           plusw0	equ	0xFEB
 14978                           fsr0h	equ	0xFEA
 14979                           fsr0l	equ	0xFE9
 14980                           wreg	equ	0xFE8
 14981                           indf1	equ	0xFE7
 14982                           postinc1	equ	0xFE6
 14983                           postdec1	equ	0xFE5
 14984                           plusw1	equ	0xFE3
 14985                           fsr1h	equ	0xFE2
 14986                           fsr1l	equ	0xFE1
 14987                           indf2	equ	0xFDF
 14988                           postinc2	equ	0xFDE
 14989                           postdec2	equ	0xFDD
 14990                           plusw2	equ	0xFDB
 14991                           fsr2h	equ	0xFDA
 14992                           fsr2l	equ	0xFD9
 14993                           status	equ	0xFD8
 14994                           
 14995 ;; *************** function _icmp_calculateChecksumBuf *****************
 14996 ;; Defined at:
 14997 ;;		line 102 in file "src/stack/protocols/icmp.c"
 14998 ;; Parameters:    Size  Location     Type
 14999 ;;  buf             2    0[BANK0 ] PTR unsigned char 
 15000 ;;		 -> icmp_sendEchoRequest@icmpMessage(64), icmp_sendEchoReply@icmpMessage(64), icmp_handleNewPacket@foo(128), 
 15001 ;;  ipPayloadLen    2    2[BANK0 ] unsigned int 
 15002 ;; Auto vars:     Size  Location     Type
 15003 ;;  foo             2    9[BANK0 ] unsigned int 
 15004 ;;  i               2   11[BANK0 ] unsigned int 
 15005 ;;  sum             4   13[BANK0 ] unsigned long 
 15006 ;;  carry           1    8[BANK0 ] unsigned char 
 15007 ;; Return value:  Size  Location     Type
 15008 ;;                  2    0[BANK0 ] unsigned int 
 15009 ;; Registers used:
 15010 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15011 ;; Tracked objects:
 15012 ;;		On entry : 0/0
 15013 ;;		On exit  : 0/0
 15014 ;;		Unchanged: 0/0
 15015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15016 ;;      Params:         0       4       0       0       0       0       0       0       0
 15017 ;;      Locals:         0       9       0       0       0       0       0       0       0
 15018 ;;      Temps:          0       4       0       0       0       0       0       0       0
 15019 ;;      Totals:         0      17       0       0       0       0       0       0       0
 15020 ;;Total ram usage:       17 bytes
 15021 ;; Hardware stack levels used:    1
 15022 ;; Hardware stack levels required when called:    4
 15023 ;; This function calls:
 15024 ;;		Nothing
 15025 ;; This function is called by:
 15026 ;;		_icmp_handleNewPacket
 15027 ;;		_icmp_sendEchoReply
 15028 ;;		_icmp_sendEchoRequest
 15029 ;; This function uses a non-reentrant model
 15030 ;;
 15031                           
 15032                           	psect	text43
 15033  0045B8                     __ptext43:
 15034                           	opt stack 0
 15035  0045B8                     _icmp_calculateChecksumBuf:
 15036                           	opt stack 21
 15037                           
 15038                           ;icmp.c: 103: ipPayloadLength += 4;
 15039                           
 15040                           ; BSR set to: 0
 15041                           ;incstack = 0
 15042  0045B8  0E04               	movlw	4
 15043  0045BA  0100               	movlb	0	; () banked
 15044  0045BC  2762               	addwf	icmp_calculateChecksumBuf@ipPayloadLength& (0+255),f,b
 15045  0045BE  0E00               	movlw	0
 15046  0045C0  2363               	addwfc	(icmp_calculateChecksumBuf@ipPayloadLength+1)& (0+255),f,b
 15047                           
 15048                           ; BSR set to: 0
 15049                           ;icmp.c: 104: uint32_t sum = 0;
 15050  0045C2  0E00               	movlw	0
 15051  0045C4  6F6D               	movwf	icmp_calculateChecksumBuf@sum& (0+255),b
 15052  0045C6  0E00               	movlw	0
 15053  0045C8  6F6E               	movwf	(icmp_calculateChecksumBuf@sum+1)& (0+255),b
 15054  0045CA  0E00               	movlw	0
 15055  0045CC  6F6F               	movwf	(icmp_calculateChecksumBuf@sum+2)& (0+255),b
 15056  0045CE  0E00               	movlw	0
 15057  0045D0  6F70               	movwf	(icmp_calculateChecksumBuf@sum+3)& (0+255),b
 15058                           
 15059                           ; BSR set to: 0
 15060                           ;icmp.c: 106: for (uint16_t i = 0; i < ipPayloadLength / 2; i++) {
 15061  0045D2  0E00               	movlw	0
 15062  0045D4  6F6C               	movwf	(icmp_calculateChecksumBuf@i+1)& (0+255),b
 15063  0045D6  0E00               	movlw	0
 15064  0045D8  6F6B               	movwf	icmp_calculateChecksumBuf@i& (0+255),b
 15065  0045DA  D029               	goto	l1282
 15066  0045DC                     
 15067                           ; BSR set to: 0
 15068                           ;icmp.c: 107: uint16_t foo = 0;
 15069                           
 15070                           ; BSR set to: 0
 15071  0045DC  0E00               	movlw	0
 15072  0045DE  6F6A               	movwf	(icmp_calculateChecksumBuf@foo+1)& (0+255),b
 15073  0045E0  0E00               	movlw	0
 15074  0045E2  6F69               	movwf	icmp_calculateChecksumBuf@foo& (0+255),b
 15075                           
 15076                           ; BSR set to: 0
 15077                           ;icmp.c: 108: foo = (uint16_t) (*(buf++) << 8);
 15078  0045E4  C060  FFD9         	movff	icmp_calculateChecksumBuf@buf,fsr2l
 15079  0045E8  C061  FFDA         	movff	icmp_calculateChecksumBuf@buf+1,fsr2h
 15080  0045EC  50DF               	movf	indf2,w,c
 15081  0045EE  6F6A               	movwf	(icmp_calculateChecksumBuf@foo+1)& (0+255),b
 15082  0045F0  6B69               	clrf	icmp_calculateChecksumBuf@foo& (0+255),b
 15083                           
 15084                           ; BSR set to: 0
 15085  0045F2  4B60               	infsnz	icmp_calculateChecksumBuf@buf& (0+255),f,b
 15086  0045F4  2B61               	incf	(icmp_calculateChecksumBuf@buf+1)& (0+255),f,b
 15087                           
 15088                           ; BSR set to: 0
 15089                           ;icmp.c: 109: foo |= *(buf++);
 15090  0045F6  C060  FFD9         	movff	icmp_calculateChecksumBuf@buf,fsr2l
 15091  0045FA  C061  FFDA         	movff	icmp_calculateChecksumBuf@buf+1,fsr2h
 15092  0045FE  50DF               	movf	indf2,w,c
 15093  004600  6F64               	movwf	??_icmp_calculateChecksumBuf& (0+255),b
 15094  004602  5164               	movf	??_icmp_calculateChecksumBuf& (0+255),w,b
 15095  004604  1369               	iorwf	icmp_calculateChecksumBuf@foo& (0+255),f,b
 15096                           
 15097                           ; BSR set to: 0
 15098  004606  4B60               	infsnz	icmp_calculateChecksumBuf@buf& (0+255),f,b
 15099  004608  2B61               	incf	(icmp_calculateChecksumBuf@buf+1)& (0+255),f,b
 15100                           
 15101                           ;icmp.c: 110: if (i == 1) {
 15102  00460A  056B               	decf	icmp_calculateChecksumBuf@i& (0+255),w,b
 15103  00460C  116C               	iorwf	(icmp_calculateChecksumBuf@i+1)& (0+255),w,b
 15104  00460E  A4D8               	btfss	status,2,c
 15105  004610  D004               	goto	l1284
 15106                           
 15107                           ; BSR set to: 0
 15108                           ;icmp.c: 111: foo = 0x0000;
 15109  004612  0E00               	movlw	0
 15110  004614  6F6A               	movwf	(icmp_calculateChecksumBuf@foo+1)& (0+255),b
 15111  004616  0E00               	movlw	0
 15112  004618  6F69               	movwf	icmp_calculateChecksumBuf@foo& (0+255),b
 15113  00461A                     l1284:
 15114                           
 15115                           ; BSR set to: 0
 15116                           ;icmp.c: 112: }
 15117                           ;icmp.c: 113: sum += foo;
 15118                           
 15119                           ; BSR set to: 0
 15120  00461A  5169               	movf	icmp_calculateChecksumBuf@foo& (0+255),w,b
 15121  00461C  276D               	addwf	icmp_calculateChecksumBuf@sum& (0+255),f,b
 15122  00461E  516A               	movf	(icmp_calculateChecksumBuf@foo+1)& (0+255),w,b
 15123  004620  236E               	addwfc	(icmp_calculateChecksumBuf@sum+1)& (0+255),f,b
 15124  004622  0E00               	movlw	0
 15125  004624  236F               	addwfc	(icmp_calculateChecksumBuf@sum+2)& (0+255),f,b
 15126  004626  0E00               	movlw	0
 15127  004628  2370               	addwfc	(icmp_calculateChecksumBuf@sum+3)& (0+255),f,b
 15128                           
 15129                           ; BSR set to: 0
 15130  00462A  4B6B               	infsnz	icmp_calculateChecksumBuf@i& (0+255),f,b
 15131  00462C  2B6C               	incf	(icmp_calculateChecksumBuf@i+1)& (0+255),f,b
 15132  00462E                     l1282:
 15133                           
 15134                           ; BSR set to: 0
 15135                           
 15136                           ; BSR set to: 0
 15137  00462E  90D8               	bcf	status,0,c
 15138  004630  3163               	rrcf	(icmp_calculateChecksumBuf@ipPayloadLength+1)& (0+255),w,b
 15139  004632  6F65               	movwf	(??_icmp_calculateChecksumBuf+1)& (0+255),b
 15140  004634  3162               	rrcf	icmp_calculateChecksumBuf@ipPayloadLength& (0+255),w,b
 15141  004636  6F64               	movwf	??_icmp_calculateChecksumBuf& (0+255),b
 15142  004638  5164               	movf	??_icmp_calculateChecksumBuf& (0+255),w,b
 15143  00463A  5D6B               	subwf	icmp_calculateChecksumBuf@i& (0+255),w,b
 15144  00463C  5165               	movf	(??_icmp_calculateChecksumBuf+1)& (0+255),w,b
 15145  00463E  596C               	subwfb	(icmp_calculateChecksumBuf@i+1)& (0+255),w,b
 15146  004640  A0D8               	btfss	status,0,c
 15147  004642  D7CC               	goto	l1283
 15148                           
 15149                           ; BSR set to: 0
 15150                           ;icmp.c: 114: }
 15151                           ;icmp.c: 116: uint8_t carry = (sum & 0xffff0000) >> 16;
 15152                           
 15153                           ; BSR set to: 0
 15154  004644  0E00               	movlw	0
 15155  004646  156D               	andwf	icmp_calculateChecksumBuf@sum& (0+255),w,b
 15156  004648  6F64               	movwf	??_icmp_calculateChecksumBuf& (0+255),b
 15157  00464A  0E00               	movlw	0
 15158  00464C  156E               	andwf	(icmp_calculateChecksumBuf@sum+1)& (0+255),w,b
 15159  00464E  6F65               	movwf	(??_icmp_calculateChecksumBuf+1)& (0+255),b
 15160  004650  0EFF               	movlw	255
 15161  004652  156F               	andwf	(icmp_calculateChecksumBuf@sum+2)& (0+255),w,b
 15162  004654  6F66               	movwf	(??_icmp_calculateChecksumBuf+2)& (0+255),b
 15163  004656  0EFF               	movlw	255
 15164  004658  1570               	andwf	(icmp_calculateChecksumBuf@sum+3)& (0+255),w,b
 15165  00465A  6F67               	movwf	(??_icmp_calculateChecksumBuf+3)& (0+255),b
 15166  00465C  0E11               	movlw	17
 15167  00465E  D005               	goto	u12010
 15168  004660                     u12015:
 15169  004660  90D8               	bcf	status,0,c
 15170  004662  3367               	rrcf	(??_icmp_calculateChecksumBuf+3)& (0+255),f,b
 15171  004664  3366               	rrcf	(??_icmp_calculateChecksumBuf+2)& (0+255),f,b
 15172  004666  3365               	rrcf	(??_icmp_calculateChecksumBuf+1)& (0+255),f,b
 15173  004668  3364               	rrcf	??_icmp_calculateChecksumBuf& (0+255),f,b
 15174  00466A                     u12010:
 15175  00466A  2EE8               	decfsz	wreg,f,c
 15176  00466C  D7F9               	goto	u12015
 15177  00466E  5164               	movf	??_icmp_calculateChecksumBuf& (0+255),w,b
 15178  004670  6F68               	movwf	icmp_calculateChecksumBuf@carry& (0+255),b
 15179                           
 15180                           ;icmp.c: 117: sum &= 0xffff;
 15181  004672  0EFF               	movlw	255
 15182  004674  176D               	andwf	icmp_calculateChecksumBuf@sum& (0+255),f,b
 15183  004676  0EFF               	movlw	255
 15184  004678  176E               	andwf	(icmp_calculateChecksumBuf@sum+1)& (0+255),f,b
 15185  00467A  0E00               	movlw	0
 15186  00467C  176F               	andwf	(icmp_calculateChecksumBuf@sum+2)& (0+255),f,b
 15187  00467E  0E00               	movlw	0
 15188  004680  1770               	andwf	(icmp_calculateChecksumBuf@sum+3)& (0+255),f,b
 15189                           
 15190                           ;icmp.c: 118: sum += carry;
 15191  004682  5168               	movf	icmp_calculateChecksumBuf@carry& (0+255),w,b
 15192  004684  276D               	addwf	icmp_calculateChecksumBuf@sum& (0+255),f,b
 15193  004686  0E00               	movlw	0
 15194  004688  236E               	addwfc	(icmp_calculateChecksumBuf@sum+1)& (0+255),f,b
 15195  00468A  236F               	addwfc	(icmp_calculateChecksumBuf@sum+2)& (0+255),f,b
 15196  00468C  2370               	addwfc	(icmp_calculateChecksumBuf@sum+3)& (0+255),f,b
 15197                           
 15198                           ;icmp.c: 119: if (sum > 0xffff) {
 15199  00468E  5170               	movf	(icmp_calculateChecksumBuf@sum+3)& (0+255),w,b
 15200  004690  E103               	bnz	u12020
 15201  004692  056F               	decf	(icmp_calculateChecksumBuf@sum+2)& (0+255),w,b
 15202  004694  A0D8               	btfss	status,0,c
 15203  004696  D025               	goto	l1286
 15204  004698                     u12020:
 15205                           
 15206                           ; BSR set to: 0
 15207                           ;icmp.c: 120: sum += ((sum & 0xffff0000) >> 16);
 15208  004698  0E00               	movlw	0
 15209  00469A  156D               	andwf	icmp_calculateChecksumBuf@sum& (0+255),w,b
 15210  00469C  6F64               	movwf	??_icmp_calculateChecksumBuf& (0+255),b
 15211  00469E  0E00               	movlw	0
 15212  0046A0  156E               	andwf	(icmp_calculateChecksumBuf@sum+1)& (0+255),w,b
 15213  0046A2  6F65               	movwf	(??_icmp_calculateChecksumBuf+1)& (0+255),b
 15214  0046A4  0EFF               	movlw	255
 15215  0046A6  156F               	andwf	(icmp_calculateChecksumBuf@sum+2)& (0+255),w,b
 15216  0046A8  6F66               	movwf	(??_icmp_calculateChecksumBuf+2)& (0+255),b
 15217  0046AA  0EFF               	movlw	255
 15218  0046AC  1570               	andwf	(icmp_calculateChecksumBuf@sum+3)& (0+255),w,b
 15219  0046AE  6F67               	movwf	(??_icmp_calculateChecksumBuf+3)& (0+255),b
 15220  0046B0  0E11               	movlw	17
 15221  0046B2  D005               	goto	u12030
 15222  0046B4                     u12035:
 15223  0046B4  90D8               	bcf	status,0,c
 15224  0046B6  3367               	rrcf	(??_icmp_calculateChecksumBuf+3)& (0+255),f,b
 15225  0046B8  3366               	rrcf	(??_icmp_calculateChecksumBuf+2)& (0+255),f,b
 15226  0046BA  3365               	rrcf	(??_icmp_calculateChecksumBuf+1)& (0+255),f,b
 15227  0046BC  3364               	rrcf	??_icmp_calculateChecksumBuf& (0+255),f,b
 15228  0046BE                     u12030:
 15229  0046BE  2EE8               	decfsz	wreg,f,c
 15230  0046C0  D7F9               	goto	u12035
 15231  0046C2  5164               	movf	??_icmp_calculateChecksumBuf& (0+255),w,b
 15232  0046C4  276D               	addwf	icmp_calculateChecksumBuf@sum& (0+255),f,b
 15233  0046C6  5165               	movf	(??_icmp_calculateChecksumBuf+1)& (0+255),w,b
 15234  0046C8  236E               	addwfc	(icmp_calculateChecksumBuf@sum+1)& (0+255),f,b
 15235  0046CA  5166               	movf	(??_icmp_calculateChecksumBuf+2)& (0+255),w,b
 15236  0046CC  236F               	addwfc	(icmp_calculateChecksumBuf@sum+2)& (0+255),f,b
 15237  0046CE  5167               	movf	(??_icmp_calculateChecksumBuf+3)& (0+255),w,b
 15238  0046D0  2370               	addwfc	(icmp_calculateChecksumBuf@sum+3)& (0+255),f,b
 15239                           
 15240                           ;icmp.c: 121: sum &= 0xffff;
 15241  0046D2  0EFF               	movlw	255
 15242  0046D4  176D               	andwf	icmp_calculateChecksumBuf@sum& (0+255),f,b
 15243  0046D6  0EFF               	movlw	255
 15244  0046D8  176E               	andwf	(icmp_calculateChecksumBuf@sum+1)& (0+255),f,b
 15245  0046DA  0E00               	movlw	0
 15246  0046DC  176F               	andwf	(icmp_calculateChecksumBuf@sum+2)& (0+255),f,b
 15247  0046DE  0E00               	movlw	0
 15248  0046E0  1770               	andwf	(icmp_calculateChecksumBuf@sum+3)& (0+255),f,b
 15249  0046E2                     l1286:
 15250                           
 15251                           ; BSR set to: 0
 15252                           ;icmp.c: 122: }
 15253                           ;icmp.c: 124: return ~sum;
 15254  0046E2  1D6D               	comf	icmp_calculateChecksumBuf@sum& (0+255),w,b
 15255  0046E4  6F60               	movwf	?_icmp_calculateChecksumBuf& (0+255),b
 15256  0046E6  1D6E               	comf	(icmp_calculateChecksumBuf@sum+1)& (0+255),w,b
 15257  0046E8  6F61               	movwf	(?_icmp_calculateChecksumBuf+1)& (0+255),b
 15258  0046EA  0012               	return	
 15259  0046EC                     __end_of_icmp_calculateChecksumBuf:
 15260                           	opt stack 0
 15261                           tblptru	equ	0xFF8
 15262                           tblptrh	equ	0xFF7
 15263                           tblptrl	equ	0xFF6
 15264                           tablat	equ	0xFF5
 15265                           prodh	equ	0xFF4
 15266                           prodl	equ	0xFF3
 15267                           intcon	equ	0xFF2
 15268                           intcon3	equ	0xFF0
 15269                           indf0	equ	0xFEF
 15270                           postinc0	equ	0xFEE
 15271                           plusw0	equ	0xFEB
 15272                           fsr0h	equ	0xFEA
 15273                           fsr0l	equ	0xFE9
 15274                           wreg	equ	0xFE8
 15275                           indf1	equ	0xFE7
 15276                           postinc1	equ	0xFE6
 15277                           postdec1	equ	0xFE5
 15278                           plusw1	equ	0xFE3
 15279                           fsr1h	equ	0xFE2
 15280                           fsr1l	equ	0xFE1
 15281                           indf2	equ	0xFDF
 15282                           postinc2	equ	0xFDE
 15283                           postdec2	equ	0xFDD
 15284                           plusw2	equ	0xFDB
 15285                           fsr2h	equ	0xFDA
 15286                           fsr2l	equ	0xFD9
 15287                           status	equ	0xFD8
 15288                           
 15289 ;; *************** function _icmp_parseHeader *****************
 15290 ;; Defined at:
 15291 ;;		line 87 in file "src/stack/protocols/icmp.c"
 15292 ;; Parameters:    Size  Location     Type
 15293 ;;  ipPayload       9   20[BANK0 ] struct memoryField
 15294 ;;  icmpHeader      2   29[BANK0 ] PTR struct icmpHeader
 15295 ;;		 -> icmp_handleNewPacket@icmpHeader(8), 
 15296 ;; Auto vars:     Size  Location     Type
 15297 ;;		None
 15298 ;; Return value:  Size  Location     Type
 15299 ;;                  3   20[BANK0 ] struct error
 15300 ;; Registers used:
 15301 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15302 ;; Tracked objects:
 15303 ;;		On entry : 0/0
 15304 ;;		On exit  : 0/0
 15305 ;;		Unchanged: 0/0
 15306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15307 ;;      Params:         0      11       0       0       0       0       0       0       0
 15308 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15309 ;;      Temps:          0       5       0       0       0       0       0       0       0
 15310 ;;      Totals:         0      16       0       0       0       0       0       0       0
 15311 ;;Total ram usage:       16 bytes
 15312 ;; Hardware stack levels used:    1
 15313 ;; Hardware stack levels required when called:    8
 15314 ;; This function calls:
 15315 ;;		_ethernetController_streamFromRXBuffer
 15316 ;; This function is called by:
 15317 ;;		_icmp_handleNewPacket
 15318 ;; This function uses a non-reentrant model
 15319 ;;
 15320                           
 15321                           	psect	text44
 15322  003C04                     __ptext44:
 15323                           	opt stack 0
 15324  003C04                     _icmp_parseHeader:
 15325                           	opt stack 18
 15326                           
 15327                           ;icmp.c: 88: ethernetController_streamFromRXBuffer(0, ipPayload.start);
 15328                           
 15329                           ; BSR set to: 0
 15330                           ;incstack = 0
 15331  003C04  C074  F06F         	movff	icmp_parseHeader@ipPayload,ethernetController_streamFromRXBuffer@startAddress
 15332  003C08  C075  F070         	movff	icmp_parseHeader@ipPayload+1,ethernetController_streamFromRXBuffer@startAddress+1
 15333  003C0C  0E00               	movlw	0
 15334  003C0E  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 15335                           
 15336                           ;icmp.c: 89: icmpHeader->typeOfMessage = ethernetController_streamFromRXBuffer(1, ipPayl
      +                          oad.start);
 15337  003C12  C074  F06F         	movff	icmp_parseHeader@ipPayload,ethernetController_streamFromRXBuffer@startAddress
 15338  003C16  C075  F070         	movff	icmp_parseHeader@ipPayload+1,ethernetController_streamFromRXBuffer@startAddress+1
 15339  003C1A  0E01               	movlw	1
 15340  003C1C  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 15341  003C20  C07D  FFD9         	movff	icmp_parseHeader@icmpHeader,fsr2l
 15342  003C24  C07E  FFDA         	movff	icmp_parseHeader@icmpHeader+1,fsr2h
 15343  003C28  6EDF               	movwf	indf2,c
 15344                           
 15345                           ;icmp.c: 90: icmpHeader->code = ethernetController_streamFromRXBuffer(1, ipPayload.start
      +                          );
 15346  003C2A  C074  F06F         	movff	icmp_parseHeader@ipPayload,ethernetController_streamFromRXBuffer@startAddress
 15347  003C2E  C075  F070         	movff	icmp_parseHeader@ipPayload+1,ethernetController_streamFromRXBuffer@startAddress+1
 15348  003C32  0E01               	movlw	1
 15349  003C34  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 15350  003C38  0100               	movlb	0	; () banked
 15351  003C3A  6F7F               	movwf	??_icmp_parseHeader& (0+255),b
 15352  003C3C  EE20 F001          	lfsr	2,1
 15353  003C40  517D               	movf	icmp_parseHeader@icmpHeader& (0+255),w,b
 15354  003C42  26D9               	addwf	fsr2l,f,c
 15355  003C44  517E               	movf	(icmp_parseHeader@icmpHeader+1)& (0+255),w,b
 15356  003C46  22DA               	addwfc	fsr2h,f,c
 15357  003C48  C07F  FFDF         	movff	??_icmp_parseHeader,indf2
 15358                           
 15359                           ;icmp.c: 91: icmpHeader->checksum = ((uint32_t) ethernetController_streamFromRXBuffer(1,
      +                           ipPayload.start) << 8);
 15360  003C4C  C074  F06F         	movff	icmp_parseHeader@ipPayload,ethernetController_streamFromRXBuffer@startAddress
 15361  003C50  C075  F070         	movff	icmp_parseHeader@ipPayload+1,ethernetController_streamFromRXBuffer@startAddress+1
 15362  003C54  0E01               	movlw	1
 15363  003C56  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 15364  003C5A  0100               	movlb	0	; () banked
 15365  003C5C  6F7F               	movwf	??_icmp_parseHeader& (0+255),b
 15366  003C5E  517F               	movf	??_icmp_parseHeader& (0+255),w,b
 15367  003C60  6F81               	movwf	(??_icmp_parseHeader+2)& (0+255),b
 15368  003C62  6B80               	clrf	(??_icmp_parseHeader+1)& (0+255),b
 15369  003C64  EE20 F002          	lfsr	2,2
 15370  003C68  517D               	movf	icmp_parseHeader@icmpHeader& (0+255),w,b
 15371  003C6A  26D9               	addwf	fsr2l,f,c
 15372  003C6C  517E               	movf	(icmp_parseHeader@icmpHeader+1)& (0+255),w,b
 15373  003C6E  22DA               	addwfc	fsr2h,f,c
 15374  003C70  C080  FFDE         	movff	??_icmp_parseHeader+1,postinc2
 15375  003C74  C081  FFDD         	movff	??_icmp_parseHeader+2,postdec2
 15376                           
 15377                           ;icmp.c: 92: icmpHeader->checksum |= ethernetController_streamFromRXBuffer(1, ipPayload.
      +                          start);
 15378  003C78  C074  F06F         	movff	icmp_parseHeader@ipPayload,ethernetController_streamFromRXBuffer@startAddress
 15379  003C7C  C075  F070         	movff	icmp_parseHeader@ipPayload+1,ethernetController_streamFromRXBuffer@startAddress+1
 15380  003C80  0E01               	movlw	1
 15381  003C82  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 15382  003C86  0100               	movlb	0	; () banked
 15383  003C88  6F7F               	movwf	??_icmp_parseHeader& (0+255),b
 15384  003C8A  6B80               	clrf	(??_icmp_parseHeader+1)& (0+255),b
 15385  003C8C  EE20 F002          	lfsr	2,2
 15386  003C90  517D               	movf	icmp_parseHeader@icmpHeader& (0+255),w,b
 15387  003C92  26D9               	addwf	fsr2l,f,c
 15388  003C94  517E               	movf	(icmp_parseHeader@icmpHeader+1)& (0+255),w,b
 15389  003C96  22DA               	addwfc	fsr2h,f,c
 15390  003C98  517F               	movf	??_icmp_parseHeader& (0+255),w,b
 15391  003C9A  12DE               	iorwf	postinc2,f,c
 15392  003C9C  5180               	movf	(??_icmp_parseHeader+1)& (0+255),w,b
 15393  003C9E  12DD               	iorwf	postdec2,f,c
 15394                           
 15395                           ;icmp.c: 94: icmpHeader->headerData = ((uint32_t) ethernetController_streamFromRXBuffer(
      +                          1, ipPayload.start) << 24);
 15396  003CA0  C074  F06F         	movff	icmp_parseHeader@ipPayload,ethernetController_streamFromRXBuffer@startAddress
 15397  003CA4  C075  F070         	movff	icmp_parseHeader@ipPayload+1,ethernetController_streamFromRXBuffer@startAddress+1
 15398  003CA8  0E01               	movlw	1
 15399  003CAA  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 15400  003CAE  0100               	movlb	0	; () banked
 15401  003CB0  6F7F               	movwf	??_icmp_parseHeader& (0+255),b
 15402  003CB2  C07F  F080         	movff	??_icmp_parseHeader,??_icmp_parseHeader+1
 15403  003CB6  6B81               	clrf	(??_icmp_parseHeader+2)& (0+255),b
 15404  003CB8  6B82               	clrf	(??_icmp_parseHeader+3)& (0+255),b
 15405  003CBA  6B83               	clrf	(??_icmp_parseHeader+4)& (0+255),b
 15406  003CBC  C080  F083         	movff	??_icmp_parseHeader+1,??_icmp_parseHeader+4
 15407  003CC0  6B82               	clrf	(??_icmp_parseHeader+3)& (0+255),b
 15408  003CC2  6B81               	clrf	(??_icmp_parseHeader+2)& (0+255),b
 15409  003CC4  6B80               	clrf	(??_icmp_parseHeader+1)& (0+255),b
 15410  003CC6  EE20 F004          	lfsr	2,4
 15411  003CCA  517D               	movf	icmp_parseHeader@icmpHeader& (0+255),w,b
 15412  003CCC  26D9               	addwf	fsr2l,f,c
 15413  003CCE  517E               	movf	(icmp_parseHeader@icmpHeader+1)& (0+255),w,b
 15414  003CD0  22DA               	addwfc	fsr2h,f,c
 15415  003CD2  C080  FFDE         	movff	??_icmp_parseHeader+1,postinc2
 15416  003CD6  C081  FFDE         	movff	??_icmp_parseHeader+2,postinc2
 15417  003CDA  C082  FFDE         	movff	??_icmp_parseHeader+3,postinc2
 15418  003CDE  C083  FFDE         	movff	??_icmp_parseHeader+4,postinc2
 15419                           
 15420                           ;icmp.c: 95: icmpHeader->headerData |= ((uint32_t) ethernetController_streamFromRXBuffer
      +                          (1, ipPayload.start) << 16);
 15421  003CE2  C074  F06F         	movff	icmp_parseHeader@ipPayload,ethernetController_streamFromRXBuffer@startAddress
 15422  003CE6  C075  F070         	movff	icmp_parseHeader@ipPayload+1,ethernetController_streamFromRXBuffer@startAddress+1
 15423  003CEA  0E01               	movlw	1
 15424  003CEC  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 15425  003CF0  0100               	movlb	0	; () banked
 15426  003CF2  6F7F               	movwf	??_icmp_parseHeader& (0+255),b
 15427  003CF4  C07F  F080         	movff	??_icmp_parseHeader,??_icmp_parseHeader+1
 15428  003CF8  6B81               	clrf	(??_icmp_parseHeader+2)& (0+255),b
 15429  003CFA  6B82               	clrf	(??_icmp_parseHeader+3)& (0+255),b
 15430  003CFC  6B83               	clrf	(??_icmp_parseHeader+4)& (0+255),b
 15431  003CFE  C081  F083         	movff	??_icmp_parseHeader+2,??_icmp_parseHeader+4
 15432  003D02  C080  F082         	movff	??_icmp_parseHeader+1,??_icmp_parseHeader+3
 15433  003D06  6B81               	clrf	(??_icmp_parseHeader+2)& (0+255),b
 15434  003D08  6B80               	clrf	(??_icmp_parseHeader+1)& (0+255),b
 15435  003D0A  EE20 F004          	lfsr	2,4
 15436  003D0E  517D               	movf	icmp_parseHeader@icmpHeader& (0+255),w,b
 15437  003D10  26D9               	addwf	fsr2l,f,c
 15438  003D12  517E               	movf	(icmp_parseHeader@icmpHeader+1)& (0+255),w,b
 15439  003D14  22DA               	addwfc	fsr2h,f,c
 15440  003D16  5180               	movf	(??_icmp_parseHeader+1)& (0+255),w,b
 15441  003D18  12DE               	iorwf	postinc2,f,c
 15442  003D1A  5181               	movf	(??_icmp_parseHeader+2)& (0+255),w,b
 15443  003D1C  12DE               	iorwf	postinc2,f,c
 15444  003D1E  5182               	movf	(??_icmp_parseHeader+3)& (0+255),w,b
 15445  003D20  12DE               	iorwf	postinc2,f,c
 15446  003D22  5183               	movf	(??_icmp_parseHeader+4)& (0+255),w,b
 15447  003D24  12DE               	iorwf	postinc2,f,c
 15448                           
 15449                           ;icmp.c: 96: icmpHeader->headerData |= ((uint32_t) ethernetController_streamFromRXBuffer
      +                          (1, ipPayload.start) << 8);
 15450  003D26  C074  F06F         	movff	icmp_parseHeader@ipPayload,ethernetController_streamFromRXBuffer@startAddress
 15451  003D2A  C075  F070         	movff	icmp_parseHeader@ipPayload+1,ethernetController_streamFromRXBuffer@startAddress+1
 15452  003D2E  0E01               	movlw	1
 15453  003D30  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 15454  003D34  0100               	movlb	0	; () banked
 15455  003D36  6F7F               	movwf	??_icmp_parseHeader& (0+255),b
 15456  003D38  C07F  F080         	movff	??_icmp_parseHeader,??_icmp_parseHeader+1
 15457  003D3C  6B81               	clrf	(??_icmp_parseHeader+2)& (0+255),b
 15458  003D3E  6B82               	clrf	(??_icmp_parseHeader+3)& (0+255),b
 15459  003D40  6B83               	clrf	(??_icmp_parseHeader+4)& (0+255),b
 15460  003D42  C082  F083         	movff	??_icmp_parseHeader+3,??_icmp_parseHeader+4
 15461  003D46  C081  F082         	movff	??_icmp_parseHeader+2,??_icmp_parseHeader+3
 15462  003D4A  C080  F081         	movff	??_icmp_parseHeader+1,??_icmp_parseHeader+2
 15463  003D4E  6B80               	clrf	(??_icmp_parseHeader+1)& (0+255),b
 15464  003D50  EE20 F004          	lfsr	2,4
 15465  003D54  517D               	movf	icmp_parseHeader@icmpHeader& (0+255),w,b
 15466  003D56  26D9               	addwf	fsr2l,f,c
 15467  003D58  517E               	movf	(icmp_parseHeader@icmpHeader+1)& (0+255),w,b
 15468  003D5A  22DA               	addwfc	fsr2h,f,c
 15469  003D5C  5180               	movf	(??_icmp_parseHeader+1)& (0+255),w,b
 15470  003D5E  12DE               	iorwf	postinc2,f,c
 15471  003D60  5181               	movf	(??_icmp_parseHeader+2)& (0+255),w,b
 15472  003D62  12DE               	iorwf	postinc2,f,c
 15473  003D64  5182               	movf	(??_icmp_parseHeader+3)& (0+255),w,b
 15474  003D66  12DE               	iorwf	postinc2,f,c
 15475  003D68  5183               	movf	(??_icmp_parseHeader+4)& (0+255),w,b
 15476  003D6A  12DE               	iorwf	postinc2,f,c
 15477                           
 15478                           ;icmp.c: 97: icmpHeader->headerData |= ethernetController_streamFromRXBuffer(1, ipPayloa
      +                          d.start);
 15479  003D6C  C074  F06F         	movff	icmp_parseHeader@ipPayload,ethernetController_streamFromRXBuffer@startAddress
 15480  003D70  C075  F070         	movff	icmp_parseHeader@ipPayload+1,ethernetController_streamFromRXBuffer@startAddress+1
 15481  003D74  0E01               	movlw	1
 15482  003D76  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 15483  003D7A  0100               	movlb	0	; () banked
 15484  003D7C  6F7F               	movwf	??_icmp_parseHeader& (0+255),b
 15485  003D7E  C07F  F080         	movff	??_icmp_parseHeader,??_icmp_parseHeader+1
 15486  003D82  6B81               	clrf	(??_icmp_parseHeader+2)& (0+255),b
 15487  003D84  6B82               	clrf	(??_icmp_parseHeader+3)& (0+255),b
 15488  003D86  6B83               	clrf	(??_icmp_parseHeader+4)& (0+255),b
 15489  003D88  EE20 F004          	lfsr	2,4
 15490  003D8C  517D               	movf	icmp_parseHeader@icmpHeader& (0+255),w,b
 15491  003D8E  26D9               	addwf	fsr2l,f,c
 15492  003D90  517E               	movf	(icmp_parseHeader@icmpHeader+1)& (0+255),w,b
 15493  003D92  22DA               	addwfc	fsr2h,f,c
 15494  003D94  5180               	movf	(??_icmp_parseHeader+1)& (0+255),w,b
 15495  003D96  12DE               	iorwf	postinc2,f,c
 15496  003D98  5181               	movf	(??_icmp_parseHeader+2)& (0+255),w,b
 15497  003D9A  12DE               	iorwf	postinc2,f,c
 15498  003D9C  5182               	movf	(??_icmp_parseHeader+3)& (0+255),w,b
 15499  003D9E  12DE               	iorwf	postinc2,f,c
 15500  003DA0  5183               	movf	(??_icmp_parseHeader+4)& (0+255),w,b
 15501  003DA2  12DE               	iorwf	postinc2,f,c
 15502                           
 15503                           ;icmp.c: 99: ethernetController_streamFromRXBuffer(2, ipPayload.start);
 15504  003DA4  C074  F06F         	movff	icmp_parseHeader@ipPayload,ethernetController_streamFromRXBuffer@startAddress
 15505  003DA8  C075  F070         	movff	icmp_parseHeader@ipPayload+1,ethernetController_streamFromRXBuffer@startAddress+1
 15506  003DAC  0E02               	movlw	2
 15507  003DAE  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 15508  003DB2  0012               	return		;funcret
 15509  003DB4                     __end_of_icmp_parseHeader:
 15510                           	opt stack 0
 15511                           tblptru	equ	0xFF8
 15512                           tblptrh	equ	0xFF7
 15513                           tblptrl	equ	0xFF6
 15514                           tablat	equ	0xFF5
 15515                           prodh	equ	0xFF4
 15516                           prodl	equ	0xFF3
 15517                           intcon	equ	0xFF2
 15518                           intcon3	equ	0xFF0
 15519                           indf0	equ	0xFEF
 15520                           postinc0	equ	0xFEE
 15521                           plusw0	equ	0xFEB
 15522                           fsr0h	equ	0xFEA
 15523                           fsr0l	equ	0xFE9
 15524                           wreg	equ	0xFE8
 15525                           indf1	equ	0xFE7
 15526                           postinc1	equ	0xFE6
 15527                           postdec1	equ	0xFE5
 15528                           plusw1	equ	0xFE3
 15529                           fsr1h	equ	0xFE2
 15530                           fsr1l	equ	0xFE1
 15531                           indf2	equ	0xFDF
 15532                           postinc2	equ	0xFDE
 15533                           postdec2	equ	0xFDD
 15534                           plusw2	equ	0xFDB
 15535                           fsr2h	equ	0xFDA
 15536                           fsr2l	equ	0xFD9
 15537                           status	equ	0xFD8
 15538                           
 15539 ;; *************** function _ethernetController_updateNextPacketPointer *****************
 15540 ;; Defined at:
 15541 ;;		line 334 in file "src/enc424j600/ENC424J600.c"
 15542 ;; Parameters:    Size  Location     Type
 15543 ;;		None
 15544 ;; Auto vars:     Size  Location     Type
 15545 ;;  nextPktPoint    2   21[BANK0 ] unsigned int 
 15546 ;;  newPointerH     1   25[BANK0 ] unsigned char 
 15547 ;;  newPointerL     1   24[BANK0 ] unsigned char 
 15548 ;;  opcode          1   23[BANK0 ] unsigned char 
 15549 ;; Return value:  Size  Location     Type
 15550 ;;                  1    wreg      void 
 15551 ;; Registers used:
 15552 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15553 ;; Tracked objects:
 15554 ;;		On entry : 0/0
 15555 ;;		On exit  : 0/0
 15556 ;;		Unchanged: 0/0
 15557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15558 ;;      Params:         0       0       0       0       0       0       0       0       0
 15559 ;;      Locals:         0       5       0       0       0       0       0       0       0
 15560 ;;      Temps:          0       6       0       0       0       0       0       0       0
 15561 ;;      Totals:         0      11       0       0       0       0       0       0       0
 15562 ;;Total ram usage:       11 bytes
 15563 ;; Hardware stack levels used:    1
 15564 ;; Hardware stack levels required when called:    7
 15565 ;; This function calls:
 15566 ;;		_enc424j600_getNextPacketPointer
 15567 ;;		_enc424j600_readSPI
 15568 ;;		_enc424j600_setERXDATAReadPointer
 15569 ;;		_enc424j600_setNextPacketPointer
 15570 ;;		_enc424j600_writeSPI
 15571 ;; This function is called by:
 15572 ;;		_ethernet_rxGetNewFrame
 15573 ;; This function uses a non-reentrant model
 15574 ;;
 15575                           
 15576                           	psect	text45
 15577  005EA2                     __ptext45:
 15578                           	opt stack 0
 15579  005EA2                     _ethernetController_updateNextPacketPointer:
 15580                           	opt stack 21
 15581                           
 15582                           ;ENC424J600.c: 335: uint16_t nextPktPointer;
 15583                           ;ENC424J600.c: 336: uint8_t opcode;
 15584                           ;ENC424J600.c: 337: uint8_t newPointerL, newPointerH;
 15585                           ;ENC424J600.c: 338: nextPktPointer = enc424j600_getNextPacketPointer();
 15586                           
 15587                           ;incstack = 0
 15588  005EA2  EC44  F037         	call	_enc424j600_getNextPacketPointer	;wreg free
 15589  005EA6  C060  F075         	movff	?_enc424j600_getNextPacketPointer,ethernetController_updateNextPacketPointer@next
      +                          PktPointer
 15590  005EAA  C061  F076         	movff	?_enc424j600_getNextPacketPointer+1,ethernetController_updateNextPacketPointer@ne
      +                          xtPktPointer+1
 15591                           
 15592                           ;ENC424J600.c: 339: enc424j600_setERXDATAReadPointer(nextPktPointer);
 15593  005EAE  C075  F06A         	movff	ethernetController_updateNextPacketPointer@nextPktPointer,enc424j600_setERXDATARe
      +                          adPointer@addr
 15594  005EB2  C076  F06B         	movff	ethernetController_updateNextPacketPointer@nextPktPointer+1,enc424j600_setERXDATA
      +                          ReadPointer@addr+1
 15595  005EB6  EC81  F034         	call	_enc424j600_setERXDATAReadPointer	;wreg free
 15596                           
 15597                           ;ENC424J600.c: 340: opcode = 0x2C;
 15598  005EBA  0E2C               	movlw	44
 15599  005EBC  0100               	movlb	0	; () banked
 15600  005EBE  6F77               	movwf	ethernetController_updateNextPacketPointer@opcode& (0+255),b
 15601                           
 15602                           ; BSR set to: 0
 15603                           ;ENC424J600.c: 341: PORTBbits.RB4=0;
 15604  005EC0  9881               	bcf	3969,4,c	;volatile
 15605                           
 15606                           ; BSR set to: 0
 15607                           ;ENC424J600.c: 342: enc424j600_writeSPI(&opcode);
 15608  005EC2  0E77               	movlw	low ethernetController_updateNextPacketPointer@opcode
 15609  005EC4  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 15610  005EC6  0E00               	movlw	high ethernetController_updateNextPacketPointer@opcode
 15611  005EC8  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 15612  005ECA  EC50  F031         	call	_enc424j600_writeSPI	;wreg free
 15613                           
 15614                           ;ENC424J600.c: 343: enc424j600_readSPI(&newPointerL);
 15615  005ECE  0E78               	movlw	low ethernetController_updateNextPacketPointer@newPointerL
 15616  005ED0  0100               	movlb	0	; () banked
 15617  005ED2  6F60               	movwf	enc424j600_readSPI@data& (0+255),b
 15618  005ED4  0E00               	movlw	high ethernetController_updateNextPacketPointer@newPointerL
 15619  005ED6  6F61               	movwf	(enc424j600_readSPI@data+1)& (0+255),b
 15620  005ED8  ECE7  F030         	call	_enc424j600_readSPI	;wreg free
 15621                           
 15622                           ;ENC424J600.c: 344: enc424j600_readSPI(&newPointerH);
 15623  005EDC  0E79               	movlw	low ethernetController_updateNextPacketPointer@newPointerH
 15624  005EDE  0100               	movlb	0	; () banked
 15625  005EE0  6F60               	movwf	enc424j600_readSPI@data& (0+255),b
 15626  005EE2  0E00               	movlw	high ethernetController_updateNextPacketPointer@newPointerH
 15627  005EE4  6F61               	movwf	(enc424j600_readSPI@data+1)& (0+255),b
 15628  005EE6  ECE7  F030         	call	_enc424j600_readSPI	;wreg free
 15629                           
 15630                           ;ENC424J600.c: 345: PORTBbits.RB4=1;
 15631  005EEA  8881               	bsf	3969,4,c	;volatile
 15632                           
 15633                           ;ENC424J600.c: 347: enc424j600_setNextPacketPointer((uint16_t) ((newPointerL & (unsigned
      +                          ) 0x00ff) | ((unsigned) (newPointerH << 8)&(unsigned) 0xff00)));
 15634  005EEC  0E00               	movlw	0
 15635  005EEE  0100               	movlb	0	; () banked
 15636  005EF0  6F6F               	movwf	??_ethernetController_updateNextPacketPointer& (0+255),b
 15637  005EF2  0EFF               	movlw	255
 15638  005EF4  6F70               	movwf	(??_ethernetController_updateNextPacketPointer+1)& (0+255),b
 15639  005EF6  5179               	movf	ethernetController_updateNextPacketPointer@newPointerH& (0+255),w,b
 15640  005EF8  6F72               	movwf	(??_ethernetController_updateNextPacketPointer+3)& (0+255),b
 15641  005EFA  6B71               	clrf	(??_ethernetController_updateNextPacketPointer+2)& (0+255),b
 15642  005EFC  516F               	movf	??_ethernetController_updateNextPacketPointer& (0+255),w,b
 15643  005EFE  1771               	andwf	(??_ethernetController_updateNextPacketPointer+2)& (0+255),f,b
 15644  005F00  5170               	movf	(??_ethernetController_updateNextPacketPointer+1)& (0+255),w,b
 15645  005F02  1772               	andwf	(??_ethernetController_updateNextPacketPointer+3)& (0+255),f,b
 15646  005F04  5178               	movf	ethernetController_updateNextPacketPointer@newPointerL& (0+255),w,b
 15647  005F06  6F73               	movwf	(??_ethernetController_updateNextPacketPointer+4)& (0+255),b
 15648  005F08  6B74               	clrf	(??_ethernetController_updateNextPacketPointer+5)& (0+255),b
 15649  005F0A  5171               	movf	(??_ethernetController_updateNextPacketPointer+2)& (0+255),w,b
 15650  005F0C  1173               	iorwf	(??_ethernetController_updateNextPacketPointer+4)& (0+255),w,b
 15651  005F0E  6F60               	movwf	enc424j600_setNextPacketPointer@ptr& (0+255),b
 15652  005F10  5172               	movf	(??_ethernetController_updateNextPacketPointer+3)& (0+255),w,b
 15653  005F12  1174               	iorwf	(??_ethernetController_updateNextPacketPointer+5)& (0+255),w,b
 15654  005F14  6F61               	movwf	(enc424j600_setNextPacketPointer@ptr+1)& (0+255),b
 15655  005F16  EC49  F037         	call	_enc424j600_setNextPacketPointer	;wreg free
 15656  005F1A  0012               	return		;funcret
 15657  005F1C                     __end_of_ethernetController_updateNextPacketPointer:
 15658                           	opt stack 0
 15659                           tblptru	equ	0xFF8
 15660                           tblptrh	equ	0xFF7
 15661                           tblptrl	equ	0xFF6
 15662                           tablat	equ	0xFF5
 15663                           prodh	equ	0xFF4
 15664                           prodl	equ	0xFF3
 15665                           intcon	equ	0xFF2
 15666                           intcon3	equ	0xFF0
 15667                           indf0	equ	0xFEF
 15668                           postinc0	equ	0xFEE
 15669                           plusw0	equ	0xFEB
 15670                           fsr0h	equ	0xFEA
 15671                           fsr0l	equ	0xFE9
 15672                           wreg	equ	0xFE8
 15673                           indf1	equ	0xFE7
 15674                           postinc1	equ	0xFE6
 15675                           postdec1	equ	0xFE5
 15676                           plusw1	equ	0xFE3
 15677                           fsr1h	equ	0xFE2
 15678                           fsr1l	equ	0xFE1
 15679                           indf2	equ	0xFDF
 15680                           postinc2	equ	0xFDE
 15681                           postdec2	equ	0xFDD
 15682                           plusw2	equ	0xFDB
 15683                           fsr2h	equ	0xFDA
 15684                           fsr2l	equ	0xFD9
 15685                           status	equ	0xFD8
 15686                           
 15687 ;; *************** function _ethernetController_getRSV *****************
 15688 ;; Defined at:
 15689 ;;		line 299 in file "src/enc424j600/ENC424J600.c"
 15690 ;; Parameters:    Size  Location     Type
 15691 ;;  address         2   17[BANK0 ] unsigned int 
 15692 ;; Auto vars:     Size  Location     Type
 15693 ;;  i               1   23[BANK0 ] unsigned char 
 15694 ;;  opcode          1   22[BANK0 ] unsigned char 
 15695 ;; Return value:  Size  Location     Type
 15696 ;;                  5   17[BANK0 ] struct RSV
 15697 ;; Registers used:
 15698 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15699 ;; Tracked objects:
 15700 ;;		On entry : 0/0
 15701 ;;		On exit  : 0/0
 15702 ;;		Unchanged: 0/0
 15703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15704 ;;      Params:         0       5       0       0       0       0       0       0       0
 15705 ;;      Locals:         0       2       0       0       0       0       0       0       0
 15706 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15707 ;;      Totals:         0       7       0       0       0       0       0       0       0
 15708 ;;Total ram usage:        7 bytes
 15709 ;; Hardware stack levels used:    1
 15710 ;; Hardware stack levels required when called:    7
 15711 ;; This function calls:
 15712 ;;		_enc424j600_readSPI
 15713 ;;		_enc424j600_setERXDATAReadPointer
 15714 ;;		_enc424j600_updateReceiveStatusVector
 15715 ;;		_enc424j600_writeSPI
 15716 ;; This function is called by:
 15717 ;;		_ethernet_rxGetNewFrame
 15718 ;; This function uses a non-reentrant model
 15719 ;;
 15720                           
 15721                           	psect	text46
 15722  005F94                     __ptext46:
 15723                           	opt stack 0
 15724  005F94                     _ethernetController_getRSV:
 15725                           	opt stack 21
 15726                           
 15727                           ;ENC424J600.c: 300: uint8_t static temp[6];
 15728                           ;ENC424J600.c: 301: enc424j600_setERXDATAReadPointer(address + 2);
 15729                           
 15730                           ;incstack = 0
 15731  005F94  0E02               	movlw	2
 15732  005F96  0100               	movlb	0	; () banked
 15733  005F98  2571               	addwf	ethernetController_getRSV@address& (0+255),w,b
 15734  005F9A  6F6A               	movwf	enc424j600_setERXDATAReadPointer@addr& (0+255),b
 15735  005F9C  0E00               	movlw	0
 15736  005F9E  2172               	addwfc	(ethernetController_getRSV@address+1)& (0+255),w,b
 15737  005FA0  6F6B               	movwf	(enc424j600_setERXDATAReadPointer@addr+1)& (0+255),b
 15738  005FA2  EC81  F034         	call	_enc424j600_setERXDATAReadPointer	;wreg free
 15739                           
 15740                           ;ENC424J600.c: 302: uint8_t opcode = 0x2C;
 15741  005FA6  0E2C               	movlw	44
 15742  005FA8  0100               	movlb	0	; () banked
 15743  005FAA  6F76               	movwf	ethernetController_getRSV@opcode& (0+255),b
 15744                           
 15745                           ; BSR set to: 0
 15746                           ;ENC424J600.c: 303: PORTBbits.RB4=0;
 15747  005FAC  9881               	bcf	3969,4,c	;volatile
 15748                           
 15749                           ; BSR set to: 0
 15750                           ;ENC424J600.c: 304: enc424j600_writeSPI(&opcode);
 15751  005FAE  0E76               	movlw	low ethernetController_getRSV@opcode
 15752  005FB0  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 15753  005FB2  0E00               	movlw	high ethernetController_getRSV@opcode
 15754  005FB4  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 15755  005FB6  EC50  F031         	call	_enc424j600_writeSPI	;wreg free
 15756                           
 15757                           ;ENC424J600.c: 305: for (uint8_t i = 0; i < 6; i++) {
 15758  005FBA  0E00               	movlw	0
 15759  005FBC  0100               	movlb	0	; () banked
 15760  005FBE  6F77               	movwf	ethernetController_getRSV@i& (0+255),b
 15761  005FC0                     l11500:
 15762                           
 15763                           ; BSR set to: 0
 15764  005FC0  0E05               	movlw	5
 15765  005FC2  6577               	cpfsgt	ethernetController_getRSV@i& (0+255),b
 15766  005FC4  D001               	goto	l160
 15767  005FC6  D00D               	goto	u14090
 15768  005FC8                     l160:
 15769                           
 15770                           ; BSR set to: 0
 15771                           ;ENC424J600.c: 306: enc424j600_readSPI(&temp[i]);
 15772                           
 15773                           ; BSR set to: 0
 15774  005FC8  5177               	movf	ethernetController_getRSV@i& (0+255),w,b
 15775  005FCA  0D01               	mullw	1
 15776  005FCC  0ED2               	movlw	low ethernetController_getRSV@temp
 15777  005FCE  24F3               	addwf	prodl,w,c
 15778  005FD0  6F60               	movwf	enc424j600_readSPI@data& (0+255),b
 15779  005FD2  0E02               	movlw	high ethernetController_getRSV@temp
 15780  005FD4  20F4               	addwfc	prodh,w,c
 15781  005FD6  6F61               	movwf	(enc424j600_readSPI@data+1)& (0+255),b
 15782  005FD8  ECE7  F030         	call	_enc424j600_readSPI	;wreg free
 15783  005FDC  0100               	movlb	0	; () banked
 15784  005FDE  2B77               	incf	ethernetController_getRSV@i& (0+255),f,b
 15785  005FE0  D7EF               	goto	l11500
 15786  005FE2                     u14090:
 15787                           
 15788                           ; BSR set to: 0
 15789                           ;ENC424J600.c: 307: }
 15790                           ;ENC424J600.c: 308: PORTBbits.RB4=1;
 15791  005FE2  8881               	bsf	3969,4,c	;volatile
 15792                           
 15793                           ; BSR set to: 0
 15794                           ;ENC424J600.c: 309: return enc424j600_updateReceiveStatusVector(&temp[0]);
 15795  005FE4  0ED2               	movlw	low ethernetController_getRSV@temp
 15796  005FE6  6F60               	movwf	enc424j600_updateReceiveStatusVector@rsv& (0+255),b
 15797  005FE8  0E02               	movlw	high ethernetController_getRSV@temp
 15798  005FEA  6F61               	movwf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),b
 15799  005FEC  ECF7  F011         	call	_enc424j600_updateReceiveStatusVector	;wreg free
 15800  005FF0  CFE9 FFD9          	movff	fsr0l,fsr2l
 15801  005FF4  CFEA FFDA          	movff	fsr0h,fsr2h
 15802  005FF8  EE00  F071         	lfsr	0,?_ethernetController_getRSV
 15803  005FFC  0E04               	movlw	4
 15804  005FFE                     u14101:
 15805  005FFE  CFDB FFEB          	movff	plusw2,plusw0
 15806  006002  06E8               	decf	wreg,f,c
 15807  006004  E2FC               	bc	u14101
 15808  006006  0012               	return	
 15809  006008                     __end_of_ethernetController_getRSV:
 15810                           	opt stack 0
 15811                           tblptru	equ	0xFF8
 15812                           tblptrh	equ	0xFF7
 15813                           tblptrl	equ	0xFF6
 15814                           tablat	equ	0xFF5
 15815                           prodh	equ	0xFF4
 15816                           prodl	equ	0xFF3
 15817                           intcon	equ	0xFF2
 15818                           intcon3	equ	0xFF0
 15819                           indf0	equ	0xFEF
 15820                           postinc0	equ	0xFEE
 15821                           plusw0	equ	0xFEB
 15822                           fsr0h	equ	0xFEA
 15823                           fsr0l	equ	0xFE9
 15824                           wreg	equ	0xFE8
 15825                           indf1	equ	0xFE7
 15826                           postinc1	equ	0xFE6
 15827                           postdec1	equ	0xFE5
 15828                           plusw1	equ	0xFE3
 15829                           fsr1h	equ	0xFE2
 15830                           fsr1l	equ	0xFE1
 15831                           indf2	equ	0xFDF
 15832                           postinc2	equ	0xFDE
 15833                           postdec2	equ	0xFDD
 15834                           plusw2	equ	0xFDB
 15835                           fsr2h	equ	0xFDA
 15836                           fsr2l	equ	0xFD9
 15837                           status	equ	0xFD8
 15838                           
 15839 ;; *************** function _enc424j600_updateReceiveStatusVector *****************
 15840 ;; Defined at:
 15841 ;;		line 719 in file "src/enc424j600/ENC424J600.c"
 15842 ;; Parameters:    Size  Location     Type
 15843 ;;  rsv             2    0[BANK0 ] PTR unsigned char 
 15844 ;;		 -> ethernetController_getRSV@temp(6), 
 15845 ;; Auto vars:     Size  Location     Type
 15846 ;;  receiveStatu    5   12[BANK0 ] struct RSV
 15847 ;; Return value:  Size  Location     Type
 15848 ;;                  5    0[BANK0 ] struct RSV
 15849 ;; Registers used:
 15850 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
 15851 ;; Tracked objects:
 15852 ;;		On entry : 0/0
 15853 ;;		On exit  : 0/0
 15854 ;;		Unchanged: 0/0
 15855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15856 ;;      Params:         0       5       0       0       0       0       0       0       0
 15857 ;;      Locals:         0       5       0       0       0       0       0       0       0
 15858 ;;      Temps:          0       7       0       0       0       0       0       0       0
 15859 ;;      Totals:         0      17       0       0       0       0       0       0       0
 15860 ;;Total ram usage:       17 bytes
 15861 ;; Hardware stack levels used:    1
 15862 ;; Hardware stack levels required when called:    4
 15863 ;; This function calls:
 15864 ;;		Nothing
 15865 ;; This function is called by:
 15866 ;;		_ethernetController_getRSV
 15867 ;; This function uses a non-reentrant model
 15868 ;;
 15869                           
 15870                           	psect	text47
 15871  0023EE                     __ptext47:
 15872                           	opt stack 0
 15873  0023EE                     _enc424j600_updateReceiveStatusVector:
 15874                           	opt stack 23
 15875                           
 15876                           ;ENC424J600.c: 720: RSV_t receiveStatusVector;
 15877                           ;ENC424J600.c: 723: receiveStatusVector.length = (uint16_t) ((*(rsv + 0)) | (uint16_t) (
      +                          ((*(rsv + 1)) << 8)&0xff00));
 15878                           
 15879                           ;incstack = 0
 15880  0023EE  0E00               	movlw	0
 15881  0023F0  0100               	movlb	0	; () banked
 15882  0023F2  6F65               	movwf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 15883  0023F4  0EFF               	movlw	255
 15884  0023F6  6F66               	movwf	(??_enc424j600_updateReceiveStatusVector+1)& (0+255),b
 15885  0023F8  EE20 F001          	lfsr	2,1
 15886  0023FC  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
 15887  0023FE  26D9               	addwf	fsr2l,f,c
 15888  002400  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
 15889  002402  22DA               	addwfc	fsr2h,f,c
 15890  002404  50DF               	movf	indf2,w,c
 15891  002406  6F67               	movwf	(??_enc424j600_updateReceiveStatusVector+2)& (0+255),b
 15892  002408  5167               	movf	(??_enc424j600_updateReceiveStatusVector+2)& (0+255),w,b
 15893  00240A  6F69               	movwf	(??_enc424j600_updateReceiveStatusVector+4)& (0+255),b
 15894  00240C  6B68               	clrf	(??_enc424j600_updateReceiveStatusVector+3)& (0+255),b
 15895  00240E  5165               	movf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 15896  002410  1768               	andwf	(??_enc424j600_updateReceiveStatusVector+3)& (0+255),f,b
 15897  002412  5166               	movf	(??_enc424j600_updateReceiveStatusVector+1)& (0+255),w,b
 15898  002414  1769               	andwf	(??_enc424j600_updateReceiveStatusVector+4)& (0+255),f,b
 15899  002416  C060  FFD9         	movff	enc424j600_updateReceiveStatusVector@rsv,fsr2l
 15900  00241A  C061  FFDA         	movff	enc424j600_updateReceiveStatusVector@rsv+1,fsr2h
 15901  00241E  50DF               	movf	indf2,w,c
 15902  002420  6F6A               	movwf	(??_enc424j600_updateReceiveStatusVector+5)& (0+255),b
 15903  002422  6B6B               	clrf	(??_enc424j600_updateReceiveStatusVector+6)& (0+255),b
 15904  002424  5168               	movf	(??_enc424j600_updateReceiveStatusVector+3)& (0+255),w,b
 15905  002426  116A               	iorwf	(??_enc424j600_updateReceiveStatusVector+5)& (0+255),w,b
 15906  002428  6F6C               	movwf	enc424j600_updateReceiveStatusVector@receiveStatusVector& (0+255),b
 15907  00242A  5169               	movf	(??_enc424j600_updateReceiveStatusVector+4)& (0+255),w,b
 15908  00242C  116B               	iorwf	(??_enc424j600_updateReceiveStatusVector+6)& (0+255),w,b
 15909  00242E  6F6D               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+1)& (0+255),b
 15910                           
 15911                           ;ENC424J600.c: 725: receiveStatusVector.packetPreviouslyIgnored = (uint8_t) (*(rsv + 2) 
      +                          & 0b00000001) != 0 ? 1u : 0u;
 15912  002430  EE20 F002          	lfsr	2,2
 15913  002434  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
 15914  002436  26D9               	addwf	fsr2l,f,c
 15915  002438  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
 15916  00243A  22DA               	addwfc	fsr2h,f,c
 15917  00243C  A0DF               	btfss	indf2,0,c
 15918  00243E  D003               	goto	u12950
 15919  002440  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 15920  002442  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 15921  002444  D002               	goto	u12968
 15922  002446                     u12950:
 15923  002446  0100               	movlb	0	; () banked
 15924  002448  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 15925  00244A                     u12968:
 15926  00244A  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
 15927  00244C  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 15928  00244E  0BFE               	andlw	-2
 15929  002450  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 15930  002452  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
 15931                           
 15932                           ;ENC424J600.c: 726: receiveStatusVector.carrierEventPreviouslySeen = (uint8_t) (*(rsv + 
      +                          2) & 0b00000100) != 0 ? 1u : 0u;
 15933  002454  EE20 F002          	lfsr	2,2
 15934  002458  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
 15935  00245A  26D9               	addwf	fsr2l,f,c
 15936  00245C  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
 15937  00245E  22DA               	addwfc	fsr2h,f,c
 15938  002460  A4DF               	btfss	indf2,2,c
 15939  002462  D003               	goto	u12970
 15940  002464  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 15941  002466  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 15942  002468  D002               	goto	u12988
 15943  00246A                     u12970:
 15944  00246A  0100               	movlb	0	; () banked
 15945  00246C  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 15946  00246E                     u12988:
 15947  00246E  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 15948  002470  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
 15949  002472  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 15950  002474  0BFD               	andlw	-3
 15951  002476  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 15952  002478  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
 15953                           
 15954                           ;ENC424J600.c: 727: receiveStatusVector.CRCError = (uint8_t) (*(rsv + 2) & 0b00010000) !
      +                          = 0 ? 1u : 0u;
 15955  00247A  EE20 F002          	lfsr	2,2
 15956  00247E  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
 15957  002480  26D9               	addwf	fsr2l,f,c
 15958  002482  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
 15959  002484  22DA               	addwfc	fsr2h,f,c
 15960  002486  A8DF               	btfss	indf2,4,c
 15961  002488  D003               	goto	u12990
 15962  00248A  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 15963  00248C  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 15964  00248E  D002               	goto	u13008
 15965  002490                     u12990:
 15966  002490  0100               	movlb	0	; () banked
 15967  002492  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 15968  002494                     u13008:
 15969  002494  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 15970  002496  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 15971  002498  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
 15972  00249A  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 15973  00249C  0BFB               	andlw	-5
 15974  00249E  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 15975  0024A0  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
 15976                           
 15977                           ;ENC424J600.c: 728: receiveStatusVector.lengthCheckError = (uint8_t) (*(rsv + 2) & 0b001
      +                          00000) != 0 ? 1u : 0u;
 15978  0024A2  EE20 F002          	lfsr	2,2
 15979  0024A6  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
 15980  0024A8  26D9               	addwf	fsr2l,f,c
 15981  0024AA  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
 15982  0024AC  22DA               	addwfc	fsr2h,f,c
 15983  0024AE  AADF               	btfss	indf2,5,c
 15984  0024B0  D003               	goto	u13010
 15985  0024B2  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 15986  0024B4  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 15987  0024B6  D002               	goto	u13028
 15988  0024B8                     u13010:
 15989  0024B8  0100               	movlb	0	; () banked
 15990  0024BA  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 15991  0024BC                     u13028:
 15992  0024BC  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 15993  0024BE  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 15994  0024C0  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 15995  0024C2  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
 15996  0024C4  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 15997  0024C6  0BF7               	andlw	-9
 15998  0024C8  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 15999  0024CA  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
 16000                           
 16001                           ;ENC424J600.c: 729: receiveStatusVector.lengthOutOfRange = (uint8_t) (*(rsv + 2) & 0b010
      +                          00000) != 0 ? 1u : 0u;
 16002  0024CC  EE20 F002          	lfsr	2,2
 16003  0024D0  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
 16004  0024D2  26D9               	addwf	fsr2l,f,c
 16005  0024D4  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
 16006  0024D6  22DA               	addwfc	fsr2h,f,c
 16007  0024D8  ACDF               	btfss	indf2,6,c
 16008  0024DA  D003               	goto	u13030
 16009  0024DC  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 16010  0024DE  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 16011  0024E0  D002               	goto	u13048
 16012  0024E2                     u13030:
 16013  0024E2  0100               	movlb	0	; () banked
 16014  0024E4  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 16015  0024E6                     u13048:
 16016  0024E6  3B65               	swapf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 16017  0024E8  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
 16018  0024EA  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 16019  0024EC  0BEF               	andlw	-17
 16020  0024EE  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 16021  0024F0  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
 16022                           
 16023                           ;ENC424J600.c: 730: receiveStatusVector.receivedOk = (uint8_t) (*(rsv + 2) & 0b10000000)
      +                           != 0 ? 1u : 0u;
 16024  0024F2  EE20 F002          	lfsr	2,2
 16025  0024F6  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
 16026  0024F8  26D9               	addwf	fsr2l,f,c
 16027  0024FA  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
 16028  0024FC  22DA               	addwfc	fsr2h,f,c
 16029  0024FE  AEDF               	btfss	indf2,7,c
 16030  002500  D003               	goto	u13050
 16031  002502  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 16032  002504  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 16033  002506  D002               	goto	u13068
 16034  002508                     u13050:
 16035  002508  0100               	movlb	0	; () banked
 16036  00250A  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 16037  00250C                     u13068:
 16038  00250C  3B65               	swapf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 16039  00250E  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 16040  002510  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
 16041  002512  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 16042  002514  0BDF               	andlw	-33
 16043  002516  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 16044  002518  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
 16045                           
 16046                           ;ENC424J600.c: 732: receiveStatusVector.multicast = (uint8_t) (*(rsv + 3) & 0b00000001) 
      +                          != 0 ? 1u : 0u;
 16047  00251A  EE20 F003          	lfsr	2,3
 16048  00251E  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
 16049  002520  26D9               	addwf	fsr2l,f,c
 16050  002522  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
 16051  002524  22DA               	addwfc	fsr2h,f,c
 16052  002526  A0DF               	btfss	indf2,0,c
 16053  002528  D003               	goto	u13070
 16054  00252A  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 16055  00252C  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 16056  00252E  D002               	goto	u13088
 16057  002530                     u13070:
 16058  002530  0100               	movlb	0	; () banked
 16059  002532  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 16060  002534                     u13088:
 16061  002534  3B65               	swapf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 16062  002536  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 16063  002538  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 16064  00253A  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
 16065  00253C  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 16066  00253E  0BBF               	andlw	-65
 16067  002540  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 16068  002542  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
 16069                           
 16070                           ;ENC424J600.c: 733: receiveStatusVector.broadcast = (uint8_t) (*(rsv + 3) & 0b00000010) 
      +                          != 0 ? 1u : 0u;
 16071  002544  EE20 F003          	lfsr	2,3
 16072  002548  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
 16073  00254A  26D9               	addwf	fsr2l,f,c
 16074  00254C  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
 16075  00254E  22DA               	addwfc	fsr2h,f,c
 16076  002550  A2DF               	btfss	indf2,1,c
 16077  002552  D003               	goto	u13090
 16078  002554  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 16079  002556  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 16080  002558  D002               	goto	u13108
 16081  00255A                     u13090:
 16082  00255A  0100               	movlb	0	; () banked
 16083  00255C  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 16084  00255E                     u13108:
 16085  00255E  3365               	rrcf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 16086  002560  3365               	rrcf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 16087  002562  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
 16088  002564  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 16089  002566  0B7F               	andlw	-129
 16090  002568  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 16091  00256A  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
 16092                           
 16093                           ;ENC424J600.c: 734: receiveStatusVector.controlFrame = (uint8_t) (*(rsv + 3) & 0b0000100
      +                          0) != 0 ? 1u : 0u;
 16094  00256C  EE20 F003          	lfsr	2,3
 16095  002570  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
 16096  002572  26D9               	addwf	fsr2l,f,c
 16097  002574  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
 16098  002576  22DA               	addwfc	fsr2h,f,c
 16099  002578  A6DF               	btfss	indf2,3,c
 16100  00257A  D003               	goto	u13110
 16101  00257C  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 16102  00257E  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 16103  002580  D002               	goto	u13128
 16104  002582                     u13110:
 16105  002582  0100               	movlb	0	; () banked
 16106  002584  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 16107  002586                     u13128:
 16108  002586  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 16109  002588  516F               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
 16110  00258A  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 16111  00258C  0BFD               	andlw	-3
 16112  00258E  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 16113  002590  6F6F               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
 16114                           
 16115                           ;ENC424J600.c: 735: receiveStatusVector.pauseFrame = (uint8_t) (*(rsv + 3) & 0b00010000)
      +                           != 0 ? 1u : 0u;
 16116  002592  EE20 F003          	lfsr	2,3
 16117  002596  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
 16118  002598  26D9               	addwf	fsr2l,f,c
 16119  00259A  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
 16120  00259C  22DA               	addwfc	fsr2h,f,c
 16121  00259E  A8DF               	btfss	indf2,4,c
 16122  0025A0  D003               	goto	u13130
 16123  0025A2  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 16124  0025A4  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 16125  0025A6  D002               	goto	u13148
 16126  0025A8                     u13130:
 16127  0025A8  0100               	movlb	0	; () banked
 16128  0025AA  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 16129  0025AC                     u13148:
 16130  0025AC  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 16131  0025AE  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 16132  0025B0  516F               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
 16133  0025B2  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 16134  0025B4  0BFB               	andlw	-5
 16135  0025B6  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 16136  0025B8  6F6F               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
 16137                           
 16138                           ;ENC424J600.c: 736: receiveStatusVector.unknownOpcode = (uint8_t) (*(rsv + 3) & 0b001000
      +                          00) != 0 ? 1u : 0u;
 16139  0025BA  EE20 F003          	lfsr	2,3
 16140  0025BE  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
 16141  0025C0  26D9               	addwf	fsr2l,f,c
 16142  0025C2  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
 16143  0025C4  22DA               	addwfc	fsr2h,f,c
 16144  0025C6  AADF               	btfss	indf2,5,c
 16145  0025C8  D003               	goto	u13150
 16146  0025CA  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 16147  0025CC  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 16148  0025CE  D002               	goto	u13168
 16149  0025D0                     u13150:
 16150  0025D0  0100               	movlb	0	; () banked
 16151  0025D2  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 16152  0025D4                     u13168:
 16153  0025D4  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 16154  0025D6  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 16155  0025D8  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 16156  0025DA  516F               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
 16157  0025DC  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 16158  0025DE  0BF7               	andlw	-9
 16159  0025E0  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 16160  0025E2  6F6F               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
 16161                           
 16162                           ;ENC424J600.c: 737: receiveStatusVector.vlan = (uint8_t) (*(rsv + 3) & 0b01000000) != 0 
      +                          ? 1u : 0u;
 16163  0025E4  EE20 F003          	lfsr	2,3
 16164  0025E8  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
 16165  0025EA  26D9               	addwf	fsr2l,f,c
 16166  0025EC  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
 16167  0025EE  22DA               	addwfc	fsr2h,f,c
 16168  0025F0  ACDF               	btfss	indf2,6,c
 16169  0025F2  D003               	goto	u13170
 16170  0025F4  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 16171  0025F6  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 16172  0025F8  D002               	goto	u13188
 16173  0025FA                     u13170:
 16174  0025FA  0100               	movlb	0	; () banked
 16175  0025FC  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 16176  0025FE                     u13188:
 16177  0025FE  3B65               	swapf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 16178  002600  516F               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
 16179  002602  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 16180  002604  0BEF               	andlw	-17
 16181  002606  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 16182  002608  6F6F               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
 16183                           
 16184                           ;ENC424J600.c: 738: receiveStatusVector.runtFilter = (uint8_t) (*(rsv + 3) & 0b10000000)
      +                           != 0 ? 1u : 0u;
 16185  00260A  EE20 F003          	lfsr	2,3
 16186  00260E  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
 16187  002610  26D9               	addwf	fsr2l,f,c
 16188  002612  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
 16189  002614  22DA               	addwfc	fsr2h,f,c
 16190  002616  AEDF               	btfss	indf2,7,c
 16191  002618  D003               	goto	u13190
 16192  00261A  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 16193  00261C  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 16194  00261E  D002               	goto	u13208
 16195  002620                     u13190:
 16196  002620  0100               	movlb	0	; () banked
 16197  002622  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 16198  002624                     u13208:
 16199  002624  3B65               	swapf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 16200  002626  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 16201  002628  516F               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
 16202  00262A  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 16203  00262C  0BDF               	andlw	-33
 16204  00262E  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 16205  002630  6F6F               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
 16206                           
 16207                           ;ENC424J600.c: 740: receiveStatusVector.notMeFilter = (uint8_t) (*(rsv + 4) & 0b00000001
      +                          ) != 0 ? 1u : 0u;
 16208  002632  EE20 F004          	lfsr	2,4
 16209  002636  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
 16210  002638  26D9               	addwf	fsr2l,f,c
 16211  00263A  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
 16212  00263C  22DA               	addwfc	fsr2h,f,c
 16213  00263E  A0DF               	btfss	indf2,0,c
 16214  002640  D003               	goto	u13210
 16215  002642  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 16216  002644  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 16217  002646  D002               	goto	u13228
 16218  002648                     u13210:
 16219  002648  0100               	movlb	0	; () banked
 16220  00264A  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 16221  00264C                     u13228:
 16222  00264C  3B65               	swapf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 16223  00264E  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 16224  002650  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 16225  002652  516F               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
 16226  002654  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 16227  002656  0BBF               	andlw	-65
 16228  002658  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 16229  00265A  6F6F               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
 16230                           
 16231                           ;ENC424J600.c: 741: receiveStatusVector.hashFilter = (uint8_t) (*(rsv + 4) & 0b00000010)
      +                           != 0 ? 1u : 0u;
 16232  00265C  EE20 F004          	lfsr	2,4
 16233  002660  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
 16234  002662  26D9               	addwf	fsr2l,f,c
 16235  002664  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
 16236  002666  22DA               	addwfc	fsr2h,f,c
 16237  002668  A2DF               	btfss	indf2,1,c
 16238  00266A  D003               	goto	u13230
 16239  00266C  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 16240  00266E  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 16241  002670  D002               	goto	u13248
 16242  002672                     u13230:
 16243  002672  0100               	movlb	0	; () banked
 16244  002674  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 16245  002676                     u13248:
 16246  002676  3365               	rrcf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 16247  002678  3365               	rrcf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 16248  00267A  516F               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
 16249  00267C  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 16250  00267E  0B7F               	andlw	-129
 16251  002680  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 16252  002682  6F6F               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
 16253                           
 16254                           ;ENC424J600.c: 742: receiveStatusVector.magicFilter = (uint8_t) (*(rsv + 4) & 0b00000100
      +                          ) != 0 ? 1u : 0u;
 16255  002684  EE20 F004          	lfsr	2,4
 16256  002688  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
 16257  00268A  26D9               	addwf	fsr2l,f,c
 16258  00268C  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
 16259  00268E  22DA               	addwfc	fsr2h,f,c
 16260  002690  A4DF               	btfss	indf2,2,c
 16261  002692  D003               	goto	u13250
 16262  002694  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 16263  002696  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 16264  002698  D002               	goto	u13268
 16265  00269A                     u13250:
 16266  00269A  0100               	movlb	0	; () banked
 16267  00269C  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 16268  00269E                     u13268:
 16269  00269E  5170               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),w,b
 16270  0026A0  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 16271  0026A2  0BFE               	andlw	-2
 16272  0026A4  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 16273  0026A6  6F70               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),b
 16274                           
 16275                           ;ENC424J600.c: 743: receiveStatusVector.patternMatch = (uint8_t) (*(rsv + 4) & 0b0000100
      +                          0) != 0 ? 1u : 0u;
 16276  0026A8  EE20 F004          	lfsr	2,4
 16277  0026AC  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
 16278  0026AE  26D9               	addwf	fsr2l,f,c
 16279  0026B0  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
 16280  0026B2  22DA               	addwfc	fsr2h,f,c
 16281  0026B4  A6DF               	btfss	indf2,3,c
 16282  0026B6  D003               	goto	u13270
 16283  0026B8  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 16284  0026BA  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 16285  0026BC  D002               	goto	u13288
 16286  0026BE                     u13270:
 16287  0026BE  0100               	movlb	0	; () banked
 16288  0026C0  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 16289  0026C2                     u13288:
 16290  0026C2  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 16291  0026C4  5170               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),w,b
 16292  0026C6  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 16293  0026C8  0BFD               	andlw	-3
 16294  0026CA  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 16295  0026CC  6F70               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),b
 16296                           
 16297                           ;ENC424J600.c: 744: receiveStatusVector.unicast = (uint8_t) (*(rsv + 4) & 0b00010000) !=
      +                           0 ? 1u : 0u;
 16298  0026CE  EE20 F004          	lfsr	2,4
 16299  0026D2  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
 16300  0026D4  26D9               	addwf	fsr2l,f,c
 16301  0026D6  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
 16302  0026D8  22DA               	addwfc	fsr2h,f,c
 16303  0026DA  A8DF               	btfss	indf2,4,c
 16304  0026DC  D003               	goto	u13290
 16305  0026DE  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 16306  0026E0  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 16307  0026E2  D002               	goto	u13308
 16308  0026E4                     u13290:
 16309  0026E4  0100               	movlb	0	; () banked
 16310  0026E6  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 16311  0026E8                     u13308:
 16312  0026E8  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 16313  0026EA  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 16314  0026EC  5170               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),w,b
 16315  0026EE  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 16316  0026F0  0BFB               	andlw	-5
 16317  0026F2  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 16318  0026F4  6F70               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),b
 16319                           
 16320                           ; BSR set to: 0
 16321                           ;ENC424J600.c: 746: return receiveStatusVector;
 16322  0026F6  EE20  F06C         	lfsr	2,enc424j600_updateReceiveStatusVector@receiveStatusVector
 16323  0026FA  EE00  F060         	lfsr	0,?_enc424j600_updateReceiveStatusVector
 16324  0026FE  0E04               	movlw	4
 16325  002700                     u13311:
 16326  002700  CFDB FFEB          	movff	plusw2,plusw0
 16327  002704  06E8               	decf	wreg,f,c
 16328  002706  E2FC               	bc	u13311
 16329  002708  0012               	return	
 16330  00270A                     __end_of_enc424j600_updateReceiveStatusVector:
 16331                           	opt stack 0
 16332                           tblptru	equ	0xFF8
 16333                           tblptrh	equ	0xFF7
 16334                           tblptrl	equ	0xFF6
 16335                           tablat	equ	0xFF5
 16336                           prodh	equ	0xFF4
 16337                           prodl	equ	0xFF3
 16338                           intcon	equ	0xFF2
 16339                           intcon3	equ	0xFF0
 16340                           indf0	equ	0xFEF
 16341                           postinc0	equ	0xFEE
 16342                           plusw0	equ	0xFEB
 16343                           fsr0h	equ	0xFEA
 16344                           fsr0l	equ	0xFE9
 16345                           wreg	equ	0xFE8
 16346                           indf1	equ	0xFE7
 16347                           postinc1	equ	0xFE6
 16348                           postdec1	equ	0xFE5
 16349                           plusw1	equ	0xFE3
 16350                           fsr1h	equ	0xFE2
 16351                           fsr1l	equ	0xFE1
 16352                           indf2	equ	0xFDF
 16353                           postinc2	equ	0xFDE
 16354                           postdec2	equ	0xFDD
 16355                           plusw2	equ	0xFDB
 16356                           fsr2h	equ	0xFDA
 16357                           fsr2l	equ	0xFD9
 16358                           status	equ	0xFD8
 16359                           
 16360 ;; *************** function _ethernetController_getEtherTypeField *****************
 16361 ;; Defined at:
 16362 ;;		line 283 in file "src/enc424j600/ENC424J600.c"
 16363 ;; Parameters:    Size  Location     Type
 16364 ;;  field           9   15[BANK0 ] struct memoryField
 16365 ;; Auto vars:     Size  Location     Type
 16366 ;;  ethertype       2   28[BANK0 ] enum E5513
 16367 ;;  highByte        1   32[BANK0 ] unsigned char 
 16368 ;;  lowByte         1   31[BANK0 ] unsigned char 
 16369 ;;  opcode          1   30[BANK0 ] unsigned char 
 16370 ;; Return value:  Size  Location     Type
 16371 ;;                  2   15[BANK0 ] enum E5513
 16372 ;; Registers used:
 16373 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16374 ;; Tracked objects:
 16375 ;;		On entry : 0/0
 16376 ;;		On exit  : 0/0
 16377 ;;		Unchanged: 0/0
 16378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16379 ;;      Params:         0       9       0       0       0       0       0       0       0
 16380 ;;      Locals:         0       5       0       0       0       0       0       0       0
 16381 ;;      Temps:          0       4       0       0       0       0       0       0       0
 16382 ;;      Totals:         0      18       0       0       0       0       0       0       0
 16383 ;;Total ram usage:       18 bytes
 16384 ;; Hardware stack levels used:    1
 16385 ;; Hardware stack levels required when called:    7
 16386 ;; This function calls:
 16387 ;;		_enc424j600_readSPI
 16388 ;;		_enc424j600_setERXDATAReadPointer
 16389 ;;		_enc424j600_writeSPI
 16390 ;; This function is called by:
 16391 ;;		_ethernet_rxGetNewFrame
 16392 ;; This function uses a non-reentrant model
 16393 ;;
 16394                           
 16395                           	psect	text48
 16396  0060EE                     __ptext48:
 16397                           	opt stack 0
 16398  0060EE                     _ethernetController_getEtherTypeField:
 16399                           	opt stack 21
 16400                           
 16401                           ;ENC424J600.c: 284: etherType_t ethertype = 0x0000;
 16402                           
 16403                           ; BSR set to: 0
 16404                           ;incstack = 0
 16405  0060EE  0E00               	movlw	0
 16406  0060F0  0100               	movlb	0	; () banked
 16407  0060F2  6F7D               	movwf	(ethernetController_getEtherTypeField@ethertype+1)& (0+255),b
 16408  0060F4  0E00               	movlw	0
 16409  0060F6  6F7C               	movwf	ethernetController_getEtherTypeField@ethertype& (0+255),b
 16410                           
 16411                           ; BSR set to: 0
 16412                           ;ENC424J600.c: 285: enc424j600_setERXDATAReadPointer(field.start + 20);
 16413  0060F8  0E14               	movlw	20
 16414  0060FA  256F               	addwf	ethernetController_getEtherTypeField@field& (0+255),w,b
 16415  0060FC  6F6A               	movwf	enc424j600_setERXDATAReadPointer@addr& (0+255),b
 16416  0060FE  0E00               	movlw	0
 16417  006100  2170               	addwfc	(ethernetController_getEtherTypeField@field+1)& (0+255),w,b
 16418  006102  6F6B               	movwf	(enc424j600_setERXDATAReadPointer@addr+1)& (0+255),b
 16419  006104  EC81  F034         	call	_enc424j600_setERXDATAReadPointer	;wreg free
 16420                           
 16421                           ;ENC424J600.c: 286: uint8_t opcode = 0x2C;
 16422  006108  0E2C               	movlw	44
 16423  00610A  0100               	movlb	0	; () banked
 16424  00610C  6F7E               	movwf	ethernetController_getEtherTypeField@opcode& (0+255),b
 16425                           
 16426                           ; BSR set to: 0
 16427                           ;ENC424J600.c: 287: PORTBbits.RB4=0;
 16428  00610E  9881               	bcf	3969,4,c	;volatile
 16429                           
 16430                           ;ENC424J600.c: 288: enc424j600_writeSPI(&opcode);
 16431  006110  0E7E               	movlw	low ethernetController_getEtherTypeField@opcode
 16432  006112  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 16433  006114  0E00               	movlw	high ethernetController_getEtherTypeField@opcode
 16434  006116  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 16435  006118  EC50  F031         	call	_enc424j600_writeSPI	;wreg free
 16436                           
 16437                           ;ENC424J600.c: 290: uint8_t lowByte;
 16438                           ;ENC424J600.c: 291: uint8_t highByte;
 16439                           ;ENC424J600.c: 292: enc424j600_readSPI(&highByte);
 16440  00611C  0E80               	movlw	low ethernetController_getEtherTypeField@highByte
 16441  00611E  0100               	movlb	0	; () banked
 16442  006120  6F60               	movwf	enc424j600_readSPI@data& (0+255),b
 16443  006122  0E00               	movlw	high ethernetController_getEtherTypeField@highByte
 16444  006124  6F61               	movwf	(enc424j600_readSPI@data+1)& (0+255),b
 16445  006126  ECE7  F030         	call	_enc424j600_readSPI	;wreg free
 16446                           
 16447                           ;ENC424J600.c: 293: enc424j600_readSPI(&lowByte);
 16448  00612A  0E7F               	movlw	low ethernetController_getEtherTypeField@lowByte
 16449  00612C  0100               	movlb	0	; () banked
 16450  00612E  6F60               	movwf	enc424j600_readSPI@data& (0+255),b
 16451  006130  0E00               	movlw	high ethernetController_getEtherTypeField@lowByte
 16452  006132  6F61               	movwf	(enc424j600_readSPI@data+1)& (0+255),b
 16453  006134  ECE7  F030         	call	_enc424j600_readSPI	;wreg free
 16454                           
 16455                           ;ENC424J600.c: 294: ethertype = (uint16_t) (lowByte | (highByte << 8));
 16456  006138  0100               	movlb	0	; () banked
 16457  00613A  5180               	movf	ethernetController_getEtherTypeField@highByte& (0+255),w,b
 16458  00613C  6F79               	movwf	(??_ethernetController_getEtherTypeField+1)& (0+255),b
 16459  00613E  6B78               	clrf	??_ethernetController_getEtherTypeField& (0+255),b
 16460  006140  517F               	movf	ethernetController_getEtherTypeField@lowByte& (0+255),w,b
 16461  006142  6F7A               	movwf	(??_ethernetController_getEtherTypeField+2)& (0+255),b
 16462  006144  6B7B               	clrf	(??_ethernetController_getEtherTypeField+3)& (0+255),b
 16463  006146  5178               	movf	??_ethernetController_getEtherTypeField& (0+255),w,b
 16464  006148  117A               	iorwf	(??_ethernetController_getEtherTypeField+2)& (0+255),w,b
 16465  00614A  6F7C               	movwf	ethernetController_getEtherTypeField@ethertype& (0+255),b
 16466  00614C  5179               	movf	(??_ethernetController_getEtherTypeField+1)& (0+255),w,b
 16467  00614E  117B               	iorwf	(??_ethernetController_getEtherTypeField+3)& (0+255),w,b
 16468  006150  6F7D               	movwf	(ethernetController_getEtherTypeField@ethertype+1)& (0+255),b
 16469                           
 16470                           ; BSR set to: 0
 16471                           ;ENC424J600.c: 295: PORTBbits.RB4=1;
 16472  006152  8881               	bsf	3969,4,c	;volatile
 16473                           
 16474                           ; BSR set to: 0
 16475                           ;ENC424J600.c: 296: return ethertype;
 16476  006154  C07C  F06F         	movff	ethernetController_getEtherTypeField@ethertype,?_ethernetController_getEtherTypeF
      +                          ield
 16477  006158  C07D  F070         	movff	ethernetController_getEtherTypeField@ethertype+1,?_ethernetController_getEtherTyp
      +                          eField+1
 16478  00615C  0012               	return	
 16479  00615E                     __end_of_ethernetController_getEtherTypeField:
 16480                           	opt stack 0
 16481                           tblptru	equ	0xFF8
 16482                           tblptrh	equ	0xFF7
 16483                           tblptrl	equ	0xFF6
 16484                           tablat	equ	0xFF5
 16485                           prodh	equ	0xFF4
 16486                           prodl	equ	0xFF3
 16487                           intcon	equ	0xFF2
 16488                           intcon3	equ	0xFF0
 16489                           indf0	equ	0xFEF
 16490                           postinc0	equ	0xFEE
 16491                           plusw0	equ	0xFEB
 16492                           fsr0h	equ	0xFEA
 16493                           fsr0l	equ	0xFE9
 16494                           wreg	equ	0xFE8
 16495                           indf1	equ	0xFE7
 16496                           postinc1	equ	0xFE6
 16497                           postdec1	equ	0xFE5
 16498                           plusw1	equ	0xFE3
 16499                           fsr1h	equ	0xFE2
 16500                           fsr1l	equ	0xFE1
 16501                           indf2	equ	0xFDF
 16502                           postinc2	equ	0xFDE
 16503                           postdec2	equ	0xFDD
 16504                           plusw2	equ	0xFDB
 16505                           fsr2h	equ	0xFDA
 16506                           fsr2l	equ	0xFD9
 16507                           status	equ	0xFD8
 16508                           
 16509 ;; *************** function _etherTypeToString *****************
 16510 ;; Defined at:
 16511 ;;		line 108 in file "src/system/uart.c"
 16512 ;; Parameters:    Size  Location     Type
 16513 ;;  ethertype       2    0[BANK0 ] enum E5590
 16514 ;; Auto vars:     Size  Location     Type
 16515 ;;		None
 16516 ;; Return value:  Size  Location     Type
 16517 ;;                  2    0[BANK0 ] PTR unsigned char 
 16518 ;; Registers used:
 16519 ;;		wreg, status,2, status,0
 16520 ;; Tracked objects:
 16521 ;;		On entry : 0/0
 16522 ;;		On exit  : 0/0
 16523 ;;		Unchanged: 0/0
 16524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16525 ;;      Params:         0       2       0       0       0       0       0       0       0
 16526 ;;      Locals:         0       0       0       0       0       0       0       0       0
 16527 ;;      Temps:          0       2       0       0       0       0       0       0       0
 16528 ;;      Totals:         0       4       0       0       0       0       0       0       0
 16529 ;;Total ram usage:        4 bytes
 16530 ;; Hardware stack levels used:    1
 16531 ;; Hardware stack levels required when called:    4
 16532 ;; This function calls:
 16533 ;;		Nothing
 16534 ;; This function is called by:
 16535 ;;		_ethernet_rxGetNewFrame
 16536 ;; This function uses a non-reentrant model
 16537 ;;
 16538                           
 16539                           	psect	text49
 16540  00677E                     __ptext49:
 16541                           	opt stack 0
 16542  00677E                     _etherTypeToString:
 16543                           	opt stack 24
 16544                           
 16545                           ;uart.c: 109: switch (ethertype) {
 16546                           
 16547                           ; BSR set to: 0
 16548                           ;incstack = 0
 16549  00677E  D010               	goto	l840
 16550  006780                     
 16551                           ;uart.c: 111: return "IPv4";
 16552  006780  0EC1               	movlw	low STR_67
 16553  006782  0100               	movlb	0	; () banked
 16554  006784  6F60               	movwf	?_etherTypeToString& (0+255),b
 16555  006786  0E7F               	movlw	high STR_67
 16556  006788  6F61               	movwf	(?_etherTypeToString+1)& (0+255),b
 16557                           
 16558                           ; BSR set to: 0
 16559  00678A  0012               	return	
 16560  00678C                     
 16561                           ; BSR set to: 0
 16562                           ;uart.c: 113: return "ARP";
 16563                           
 16564                           ; BSR set to: 0
 16565  00678C  0EE6               	movlw	low STR_68
 16566  00678E  6F60               	movwf	?_etherTypeToString& (0+255),b
 16567  006790  0E7F               	movlw	high STR_68
 16568  006792  6F61               	movwf	(?_etherTypeToString+1)& (0+255),b
 16569                           
 16570                           ; BSR set to: 0
 16571  006794  0012               	return	
 16572  006796                     
 16573                           ; BSR set to: 0
 16574                           ;uart.c: 115: return "Unknown EtherType";
 16575                           
 16576                           ; BSR set to: 0
 16577  006796  0E3C               	movlw	low STR_69
 16578  006798  6F60               	movwf	?_etherTypeToString& (0+255),b
 16579  00679A  0E7E               	movlw	high STR_69
 16580  00679C  6F61               	movwf	(?_etherTypeToString+1)& (0+255),b
 16581                           
 16582                           ; BSR set to: 0
 16583                           ;uart.c: 116: }
 16584                           
 16585                           ; BSR set to: 0
 16586  00679E  0012               	return	
 16587  0067A0                     l840:
 16588                           
 16589                           ; BSR set to: 0
 16590  0067A0  C060  F062         	movff	etherTypeToString@ethertype,??_etherTypeToString
 16591  0067A4  C061  F063         	movff	etherTypeToString@ethertype+1,??_etherTypeToString+1
 16592                           
 16593                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16594                           ; Switch size 1, requested type "space"
 16595                           ; Number of cases is 1, Range of values is 8 to 8
 16596                           ; switch strategies available:
 16597                           ; Name         Instructions Cycles
 16598                           ; simple_byte            4     3 (average)
 16599                           ;	Chosen strategy is simple_byte
 16600  0067A8  0100               	movlb	0	; () banked
 16601  0067AA  5163               	movf	(??_etherTypeToString+1)& (0+255),w,b
 16602  0067AC  0A08               	xorlw	8	; case 8
 16603  0067AE  A4D8               	btfss	status,2,c
 16604  0067B0  D7F2               	goto	l844
 16605                           
 16606                           ; BSR set to: 0
 16607                           ; Switch size 1, requested type "space"
 16608                           ; Number of cases is 2, Range of values is 0 to 6
 16609                           ; switch strategies available:
 16610                           ; Name         Instructions Cycles
 16611                           ; simple_byte            7     4 (average)
 16612                           ;	Chosen strategy is simple_byte
 16613  0067B2  5162               	movf	??_etherTypeToString& (0+255),w,b
 16614  0067B4  0A00               	xorlw	0	; case 0
 16615  0067B6  B4D8               	btfsc	status,2,c
 16616  0067B8  D7E3               	goto	l841
 16617  0067BA  0A06               	xorlw	6	; case 6
 16618  0067BC  B4D8               	btfsc	status,2,c
 16619  0067BE  D7E6               	goto	l843
 16620  0067C0  D7EA               	goto	l844
 16621  0067C2                     __end_of_etherTypeToString:
 16622                           	opt stack 0
 16623                           tblptru	equ	0xFF8
 16624                           tblptrh	equ	0xFF7
 16625                           tblptrl	equ	0xFF6
 16626                           tablat	equ	0xFF5
 16627                           prodh	equ	0xFF4
 16628                           prodl	equ	0xFF3
 16629                           intcon	equ	0xFF2
 16630                           intcon3	equ	0xFF0
 16631                           indf0	equ	0xFEF
 16632                           postinc0	equ	0xFEE
 16633                           plusw0	equ	0xFEB
 16634                           fsr0h	equ	0xFEA
 16635                           fsr0l	equ	0xFE9
 16636                           wreg	equ	0xFE8
 16637                           indf1	equ	0xFE7
 16638                           postinc1	equ	0xFE6
 16639                           postdec1	equ	0xFE5
 16640                           plusw1	equ	0xFE3
 16641                           fsr1h	equ	0xFE2
 16642                           fsr1l	equ	0xFE1
 16643                           indf2	equ	0xFDF
 16644                           postinc2	equ	0xFDE
 16645                           postdec2	equ	0xFDD
 16646                           plusw2	equ	0xFDB
 16647                           fsr2h	equ	0xFDA
 16648                           fsr2l	equ	0xFD9
 16649                           status	equ	0xFD8
 16650                           
 16651 ;; *************** function _arp_handleNewPacket *****************
 16652 ;; Defined at:
 16653 ;;		line 33 in file "src/stack/protocols/arp.c"
 16654 ;; Parameters:    Size  Location     Type
 16655 ;;  frame           2  156[BANK0 ] PTR struct ethernetFrame
 16656 ;;		 -> stack(124), 
 16657 ;; Auto vars:     Size  Location     Type
 16658 ;;  arp            32   88[BANK1 ] struct arp_message
 16659 ;; Return value:  Size  Location     Type
 16660 ;;                  1    wreg      void 
 16661 ;; Registers used:
 16662 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16663 ;; Tracked objects:
 16664 ;;		On entry : 0/0
 16665 ;;		On exit  : 0/0
 16666 ;;		Unchanged: 0/0
 16667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16668 ;;      Params:         0       2       0       0       0       0       0       0       0
 16669 ;;      Locals:         0       0      32       0       0       0       0       0       0
 16670 ;;      Temps:          0       2       0       0       0       0       0       0       0
 16671 ;;      Totals:         0       4      32       0       0       0       0       0       0
 16672 ;;Total ram usage:       36 bytes
 16673 ;; Hardware stack levels used:    1
 16674 ;; Hardware stack levels required when called:   11
 16675 ;; This function calls:
 16676 ;;		_arp_parseFromRXBuffer
 16677 ;;		_arp_sendReply
 16678 ;;		_arp_setNewEntry
 16679 ;;		_ethernetController_dropPacket
 16680 ;;		_getMillis
 16681 ;;		_ipv4_isAllZero
 16682 ;; This function is called by:
 16683 ;;		_ethernet_rxGetNewFrame
 16684 ;; This function uses a non-reentrant model
 16685 ;;
 16686                           
 16687                           	psect	text50
 16688  00517E                     __ptext50:
 16689                           	opt stack 0
 16690  00517E                     _arp_handleNewPacket:
 16691                           	opt stack 17
 16692                           
 16693                           ;arp.c: 34: arp_message_t arp;
 16694                           ;arp.c: 35: if (frame->ethertype != ETHERTYPE_ARP) {
 16695                           
 16696                           ; BSR set to: 0
 16697                           ;incstack = 0
 16698  00517E  0100               	movlb	0	; () banked
 16699  005180  EE20 F00E          	lfsr	2,14
 16700  005184  51FC               	movf	arp_handleNewPacket@frame& (0+255),w,b
 16701  005186  26D9               	addwf	fsr2l,f,c
 16702  005188  51FD               	movf	(arp_handleNewPacket@frame+1)& (0+255),w,b
 16703  00518A  22DA               	addwfc	fsr2h,f,c
 16704  00518C  0E06               	movlw	6
 16705  00518E  18DE               	xorwf	postinc2,w,c
 16706  005190  E104               	bnz	u14170
 16707  005192  0E08               	movlw	8
 16708  005194  18DE               	xorwf	postinc2,w,c
 16709  005196  B4D8               	btfsc	status,2,c
 16710  005198  D007               	goto	l937
 16711  00519A                     u14170:
 16712                           
 16713                           ; BSR set to: 0
 16714                           ;arp.c: 36: ethernetController_dropPacket(frame);
 16715  00519A  C0FC  F072         	movff	arp_handleNewPacket@frame,?_ethernetController_dropPacket
 16716  00519E  C0FD  F073         	movff	arp_handleNewPacket@frame+1,?_ethernetController_dropPacket+1
 16717  0051A2  EC45  F034         	call	_ethernetController_dropPacket	;wreg free
 16718                           
 16719                           ;arp.c: 37: return;
 16720  0051A6  0012               	return	
 16721  0051A8                     l937:
 16722                           
 16723                           ;arp.c: 38: }
 16724                           ;arp.c: 40: arp = arp_parseFromRXBuffer(frame);
 16725  0051A8  C0FC  F074         	movff	arp_handleNewPacket@frame,arp_parseFromRXBuffer@frame
 16726  0051AC  C0FD  F075         	movff	arp_handleNewPacket@frame+1,arp_parseFromRXBuffer@frame+1
 16727  0051B0  EC83  F00C         	call	_arp_parseFromRXBuffer	;wreg free
 16728  0051B4  EE21  F058         	lfsr	2,arp_handleNewPacket@arp
 16729  0051B8  0E1F               	movlw	31
 16730  0051BA                     u14181:
 16731  0051BA  CFEB FFDB          	movff	plusw0,plusw2
 16732  0051BE  06E8               	decf	wreg,f,c
 16733  0051C0  E2FC               	bc	u14181
 16734                           
 16735                           ;arp.c: 41: if (arp.err.code != (uint16_t)0) {
 16736  0051C2  0101               	movlb	1	; () banked
 16737  0051C4  5176               	movf	(arp_handleNewPacket@arp+30)& (0+255),w,b
 16738  0051C6  1177               	iorwf	(arp_handleNewPacket@arp+31)& (0+255),w,b
 16739  0051C8  B4D8               	btfsc	status,2,c
 16740  0051CA  D007               	goto	l939
 16741                           
 16742                           ; BSR set to: 1
 16743                           ;arp.c: 42: ethernetController_dropPacket(frame);
 16744  0051CC  C0FC  F072         	movff	arp_handleNewPacket@frame,?_ethernetController_dropPacket
 16745  0051D0  C0FD  F073         	movff	arp_handleNewPacket@frame+1,?_ethernetController_dropPacket+1
 16746  0051D4  EC45  F034         	call	_ethernetController_dropPacket	;wreg free
 16747                           
 16748                           ;arp.c: 46: return;
 16749  0051D8  0012               	return	
 16750  0051DA                     l939:
 16751                           
 16752                           ;arp.c: 47: }
 16753                           ;arp.c: 65: arp_sendReply(arp);
 16754  0051DA  EE21  F058         	lfsr	2,arp_handleNewPacket@arp
 16755  0051DE  EE01  F000         	lfsr	0,arp_sendReply@request
 16756  0051E2  0E1F               	movlw	31
 16757  0051E4                     u14201:
 16758  0051E4  CFDB FFEB          	movff	plusw2,plusw0
 16759  0051E8  06E8               	decf	wreg,f,c
 16760  0051EA  E2FC               	bc	u14201
 16761  0051EC  EC4C  F027         	call	_arp_sendReply	;wreg free
 16762                           
 16763                           ;arp.c: 66: if (!ipv4_isAllZero(&arp.senderIPAddress)) {
 16764  0051F0  0E66               	movlw	low (arp_handleNewPacket@arp+14)
 16765  0051F2  0100               	movlb	0	; () banked
 16766  0051F4  6F60               	movwf	ipv4_isAllZero@ip& (0+255),b
 16767  0051F6  0E01               	movlw	high (arp_handleNewPacket@arp+14)
 16768  0051F8  6F61               	movwf	(ipv4_isAllZero@ip+1)& (0+255),b
 16769  0051FA  EC3D  F035         	call	_ipv4_isAllZero	;wreg free
 16770  0051FE  0100               	movlb	0	; () banked
 16771  005200  B0D8               	btfsc	status,0,c
 16772  005202  D01D               	goto	l940
 16773                           
 16774                           ; BSR set to: 0
 16775                           ;arp.c: 67: arp_setNewEntry(arp.senderMACAddress, arp.senderIPAddress, getMillis());
 16776  005204  EE21  F060         	lfsr	2,arp_handleNewPacket@arp+8
 16777  005208  EE00  F067         	lfsr	0,arp_setNewEntry@mac
 16778  00520C  0E05               	movlw	5
 16779  00520E                     u14221:
 16780  00520E  CFDB FFEB          	movff	plusw2,plusw0
 16781  005212  06E8               	decf	wreg,f,c
 16782  005214  E2FC               	bc	u14221
 16783  005216  C166  F06D         	movff	arp_handleNewPacket@arp+14,arp_setNewEntry@ip
 16784  00521A  C167  F06E         	movff	arp_handleNewPacket@arp+15,arp_setNewEntry@ip+1
 16785  00521E  C168  F06F         	movff	arp_handleNewPacket@arp+16,arp_setNewEntry@ip+2
 16786  005222  C169  F070         	movff	arp_handleNewPacket@arp+17,arp_setNewEntry@ip+3
 16787  005226  EC00  F037         	call	_getMillis	;wreg free
 16788  00522A  C060  F071         	movff	?_getMillis,arp_setNewEntry@timestamp
 16789  00522E  C061  F072         	movff	?_getMillis+1,arp_setNewEntry@timestamp+1
 16790  005232  C062  F073         	movff	?_getMillis+2,arp_setNewEntry@timestamp+2
 16791  005236  C063  F074         	movff	?_getMillis+3,arp_setNewEntry@timestamp+3
 16792  00523A  ECA5  F021         	call	_arp_setNewEntry	;wreg free
 16793  00523E                     l940:
 16794                           
 16795                           ;arp.c: 68: }
 16796                           ;arp.c: 69: ethernetController_dropPacket();
 16797  00523E  EC45  F034         	call	_ethernetController_dropPacket	;wreg free
 16798  005242  0012               	return		;funcret
 16799  005244                     __end_of_arp_handleNewPacket:
 16800                           	opt stack 0
 16801                           tblptru	equ	0xFF8
 16802                           tblptrh	equ	0xFF7
 16803                           tblptrl	equ	0xFF6
 16804                           tablat	equ	0xFF5
 16805                           prodh	equ	0xFF4
 16806                           prodl	equ	0xFF3
 16807                           intcon	equ	0xFF2
 16808                           intcon3	equ	0xFF0
 16809                           indf0	equ	0xFEF
 16810                           postinc0	equ	0xFEE
 16811                           plusw0	equ	0xFEB
 16812                           fsr0h	equ	0xFEA
 16813                           fsr0l	equ	0xFE9
 16814                           wreg	equ	0xFE8
 16815                           indf1	equ	0xFE7
 16816                           postinc1	equ	0xFE6
 16817                           postdec1	equ	0xFE5
 16818                           plusw1	equ	0xFE3
 16819                           fsr1h	equ	0xFE2
 16820                           fsr1l	equ	0xFE1
 16821                           indf2	equ	0xFDF
 16822                           postinc2	equ	0xFDE
 16823                           postdec2	equ	0xFDD
 16824                           plusw2	equ	0xFDB
 16825                           fsr2h	equ	0xFDA
 16826                           fsr2l	equ	0xFD9
 16827                           status	equ	0xFD8
 16828                           
 16829 ;; *************** function _ethernetController_dropPacket *****************
 16830 ;; Defined at:
 16831 ;;		line 379 in file "src/enc424j600/ENC424J600.c"
 16832 ;; Parameters:    Size  Location     Type
 16833 ;;		None
 16834 ;; Auto vars:     Size  Location     Type
 16835 ;;		None
 16836 ;; Return value:  Size  Location     Type
 16837 ;;                  1    wreg      void 
 16838 ;; Registers used:
 16839 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16840 ;; Tracked objects:
 16841 ;;		On entry : 0/0
 16842 ;;		On exit  : 0/0
 16843 ;;		Unchanged: 0/0
 16844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16845 ;;      Params:         0       2       0       0       0       0       0       0       0
 16846 ;;      Locals:         0       0       0       0       0       0       0       0       0
 16847 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16848 ;;      Totals:         0       2       0       0       0       0       0       0       0
 16849 ;;Total ram usage:        2 bytes
 16850 ;; Hardware stack levels used:    1
 16851 ;; Hardware stack levels required when called:    8
 16852 ;; This function calls:
 16853 ;;		_enc424j600_setRXTailPointer
 16854 ;;		_enc424j600_writeSingleByte
 16855 ;;		_ethernetController_getNextPacketPointer
 16856 ;; This function is called by:
 16857 ;;		_ethernet_rxGetNewFrame
 16858 ;;		_arp_handleNewPacket
 16859 ;;		_ipv4_handleNewPacket
 16860 ;; This function uses a non-reentrant model
 16861 ;;
 16862                           
 16863                           	psect	text51
 16864  00688A                     __ptext51:
 16865                           	opt stack 0
 16866  00688A                     _ethernetController_dropPacket:
 16867                           	opt stack 19
 16868                           
 16869                           ;ENC424J600.c: 381: if (ethernetController_getNextPacketPointer() == 0x3000) {
 16870                           
 16871                           ;incstack = 0
 16872  00688A  EC30  F037         	call	_ethernetController_getNextPacketPointer	;wreg free
 16873  00688E  0E30               	movlw	48
 16874  006890  0100               	movlb	0	; () banked
 16875  006892  1963               	xorwf	(?_ethernetController_getNextPacketPointer+1)& (0+255),w,b
 16876  006894  1162               	iorwf	?_ethernetController_getNextPacketPointer& (0+255),w,b
 16877  006896  A4D8               	btfss	status,2,c
 16878  006898  D007               	goto	l182
 16879                           
 16880                           ; BSR set to: 0
 16881                           ;ENC424J600.c: 382: enc424j600_setRXTailPointer(0x5FFF - 1);
 16882  00689A  0E5F               	movlw	95
 16883  00689C  6F6F               	movwf	(enc424j600_setRXTailPointer@addr+1)& (0+255),b
 16884  00689E  0EFE               	movlw	254
 16885  0068A0  6F6E               	movwf	enc424j600_setRXTailPointer@addr& (0+255),b
 16886  0068A2  EC81  F035         	call	_enc424j600_setRXTailPointer	;wreg free
 16887                           
 16888                           ;ENC424J600.c: 383: } else {
 16889  0068A6  D00B               	goto	l183
 16890  0068A8                     l182:
 16891                           
 16892                           ;ENC424J600.c: 384: enc424j600_setRXTailPointer(ethernetController_getNextPacketPointer(
      +                          ) - 2);
 16893  0068A8  EC30  F037         	call	_ethernetController_getNextPacketPointer	;wreg free
 16894  0068AC  0EFE               	movlw	254
 16895  0068AE  0100               	movlb	0	; () banked
 16896  0068B0  2562               	addwf	?_ethernetController_getNextPacketPointer& (0+255),w,b
 16897  0068B2  6F6E               	movwf	enc424j600_setRXTailPointer@addr& (0+255),b
 16898  0068B4  0EFF               	movlw	255
 16899  0068B6  2163               	addwfc	(?_ethernetController_getNextPacketPointer+1)& (0+255),w,b
 16900  0068B8  6F6F               	movwf	(enc424j600_setRXTailPointer@addr+1)& (0+255),b
 16901  0068BA  EC81  F035         	call	_enc424j600_setRXTailPointer	;wreg free
 16902  0068BE                     l183:
 16903                           
 16904                           ;ENC424J600.c: 385: }
 16905                           ;ENC424J600.c: 387: enc424j600_writeSingleByte(0b11001100);
 16906  0068BE  0ECC               	movlw	204
 16907  0068C0  ECC5  F036         	call	_enc424j600_writeSingleByte
 16908  0068C4  0012               	return		;funcret
 16909  0068C6                     __end_of_ethernetController_dropPacket:
 16910                           	opt stack 0
 16911                           tblptru	equ	0xFF8
 16912                           tblptrh	equ	0xFF7
 16913                           tblptrl	equ	0xFF6
 16914                           tablat	equ	0xFF5
 16915                           prodh	equ	0xFF4
 16916                           prodl	equ	0xFF3
 16917                           intcon	equ	0xFF2
 16918                           intcon3	equ	0xFF0
 16919                           indf0	equ	0xFEF
 16920                           postinc0	equ	0xFEE
 16921                           plusw0	equ	0xFEB
 16922                           fsr0h	equ	0xFEA
 16923                           fsr0l	equ	0xFE9
 16924                           wreg	equ	0xFE8
 16925                           indf1	equ	0xFE7
 16926                           postinc1	equ	0xFE6
 16927                           postdec1	equ	0xFE5
 16928                           plusw1	equ	0xFE3
 16929                           fsr1h	equ	0xFE2
 16930                           fsr1l	equ	0xFE1
 16931                           indf2	equ	0xFDF
 16932                           postinc2	equ	0xFDE
 16933                           postdec2	equ	0xFDD
 16934                           plusw2	equ	0xFDB
 16935                           fsr2h	equ	0xFDA
 16936                           fsr2l	equ	0xFD9
 16937                           status	equ	0xFD8
 16938                           
 16939 ;; *************** function _ethernetController_getNextPacketPointer *****************
 16940 ;; Defined at:
 16941 ;;		line 461 in file "src/enc424j600/ENC424J600.c"
 16942 ;; Parameters:    Size  Location     Type
 16943 ;;		None
 16944 ;; Auto vars:     Size  Location     Type
 16945 ;;		None
 16946 ;; Return value:  Size  Location     Type
 16947 ;;                  2    2[BANK0 ] unsigned int 
 16948 ;; Registers used:
 16949 ;;		cstack
 16950 ;; Tracked objects:
 16951 ;;		On entry : 0/0
 16952 ;;		On exit  : 0/0
 16953 ;;		Unchanged: 0/0
 16954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16955 ;;      Params:         0       2       0       0       0       0       0       0       0
 16956 ;;      Locals:         0       0       0       0       0       0       0       0       0
 16957 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16958 ;;      Totals:         0       2       0       0       0       0       0       0       0
 16959 ;;Total ram usage:        2 bytes
 16960 ;; Hardware stack levels used:    1
 16961 ;; Hardware stack levels required when called:    5
 16962 ;; This function calls:
 16963 ;;		_enc424j600_getNextPacketPointer
 16964 ;; This function is called by:
 16965 ;;		_ethernetController_dropPacket
 16966 ;;		_ethernet_rxGetNewFrame
 16967 ;; This function uses a non-reentrant model
 16968 ;;
 16969                           
 16970                           	psect	text52
 16971  006E60                     __ptext52:
 16972                           	opt stack 0
 16973  006E60                     _ethernetController_getNextPacketPointer:
 16974                           	opt stack 21
 16975                           
 16976                           ;ENC424J600.c: 462: return enc424j600_getNextPacketPointer();
 16977                           
 16978                           ;incstack = 0
 16979  006E60  EC44  F037         	call	_enc424j600_getNextPacketPointer	;wreg free
 16980  006E64  C060  F062         	movff	?_enc424j600_getNextPacketPointer,?_ethernetController_getNextPacketPointer
 16981  006E68  C061  F063         	movff	?_enc424j600_getNextPacketPointer+1,?_ethernetController_getNextPacketPointer+1
 16982  006E6C  0012               	return	
 16983  006E6E                     __end_of_ethernetController_getNextPacketPointer:
 16984                           	opt stack 0
 16985                           tblptru	equ	0xFF8
 16986                           tblptrh	equ	0xFF7
 16987                           tblptrl	equ	0xFF6
 16988                           tablat	equ	0xFF5
 16989                           prodh	equ	0xFF4
 16990                           prodl	equ	0xFF3
 16991                           intcon	equ	0xFF2
 16992                           intcon3	equ	0xFF0
 16993                           indf0	equ	0xFEF
 16994                           postinc0	equ	0xFEE
 16995                           plusw0	equ	0xFEB
 16996                           fsr0h	equ	0xFEA
 16997                           fsr0l	equ	0xFE9
 16998                           wreg	equ	0xFE8
 16999                           indf1	equ	0xFE7
 17000                           postinc1	equ	0xFE6
 17001                           postdec1	equ	0xFE5
 17002                           plusw1	equ	0xFE3
 17003                           fsr1h	equ	0xFE2
 17004                           fsr1l	equ	0xFE1
 17005                           indf2	equ	0xFDF
 17006                           postinc2	equ	0xFDE
 17007                           postdec2	equ	0xFDD
 17008                           plusw2	equ	0xFDB
 17009                           fsr2h	equ	0xFDA
 17010                           fsr2l	equ	0xFD9
 17011                           status	equ	0xFD8
 17012                           
 17013 ;; *************** function _enc424j600_getNextPacketPointer *****************
 17014 ;; Defined at:
 17015 ;;		line 590 in file "src/enc424j600/ENC424J600.c"
 17016 ;; Parameters:    Size  Location     Type
 17017 ;;		None
 17018 ;; Auto vars:     Size  Location     Type
 17019 ;;		None
 17020 ;; Return value:  Size  Location     Type
 17021 ;;                  2    0[BANK0 ] unsigned int 
 17022 ;; Registers used:
 17023 ;;		None
 17024 ;; Tracked objects:
 17025 ;;		On entry : 0/0
 17026 ;;		On exit  : 0/0
 17027 ;;		Unchanged: 0/0
 17028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17029 ;;      Params:         0       2       0       0       0       0       0       0       0
 17030 ;;      Locals:         0       0       0       0       0       0       0       0       0
 17031 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17032 ;;      Totals:         0       2       0       0       0       0       0       0       0
 17033 ;;Total ram usage:        2 bytes
 17034 ;; Hardware stack levels used:    1
 17035 ;; Hardware stack levels required when called:    4
 17036 ;; This function calls:
 17037 ;;		Nothing
 17038 ;; This function is called by:
 17039 ;;		_ethernetController_updateNextPacketPointer
 17040 ;;		_ethernetController_getNextPacketPointer
 17041 ;; This function uses a non-reentrant model
 17042 ;;
 17043                           
 17044                           	psect	text53
 17045  006E88                     __ptext53:
 17046                           	opt stack 0
 17047  006E88                     _enc424j600_getNextPacketPointer:
 17048                           	opt stack 21
 17049                           
 17050                           ;ENC424J600.c: 591: return nextPacketPointer;
 17051                           
 17052                           ;incstack = 0
 17053  006E88  C03A  F060         	movff	_nextPacketPointer,?_enc424j600_getNextPacketPointer
 17054  006E8C  C03B  F061         	movff	_nextPacketPointer+1,?_enc424j600_getNextPacketPointer+1
 17055  006E90  0012               	return		;funcret
 17056  006E92                     __end_of_enc424j600_getNextPacketPointer:
 17057                           	opt stack 0
 17058                           tblptru	equ	0xFF8
 17059                           tblptrh	equ	0xFF7
 17060                           tblptrl	equ	0xFF6
 17061                           tablat	equ	0xFF5
 17062                           prodh	equ	0xFF4
 17063                           prodl	equ	0xFF3
 17064                           intcon	equ	0xFF2
 17065                           intcon3	equ	0xFF0
 17066                           indf0	equ	0xFEF
 17067                           postinc0	equ	0xFEE
 17068                           plusw0	equ	0xFEB
 17069                           fsr0h	equ	0xFEA
 17070                           fsr0l	equ	0xFE9
 17071                           wreg	equ	0xFE8
 17072                           indf1	equ	0xFE7
 17073                           postinc1	equ	0xFE6
 17074                           postdec1	equ	0xFE5
 17075                           plusw1	equ	0xFE3
 17076                           fsr1h	equ	0xFE2
 17077                           fsr1l	equ	0xFE1
 17078                           indf2	equ	0xFDF
 17079                           postinc2	equ	0xFDE
 17080                           postdec2	equ	0xFDD
 17081                           plusw2	equ	0xFDB
 17082                           fsr2h	equ	0xFDA
 17083                           fsr2l	equ	0xFD9
 17084                           status	equ	0xFD8
 17085                           
 17086 ;; *************** function _arp_setNewEntry *****************
 17087 ;; Defined at:
 17088 ;;		line 482 in file "src/stack/protocols/arp.c"
 17089 ;; Parameters:    Size  Location     Type
 17090 ;;  mac             6    7[BANK0 ] struct macaddress
 17091 ;;  ip              4   13[BANK0 ] struct ipv4_address
 17092 ;;  timestamp       4   17[BANK0 ] unsigned long 
 17093 ;; Auto vars:     Size  Location     Type
 17094 ;;  i               1   30[BANK0 ] unsigned char 
 17095 ;;  minSeconds      4   25[BANK0 ] unsigned long 
 17096 ;;  oldestIndex     1   29[BANK0 ] unsigned char 
 17097 ;; Return value:  Size  Location     Type
 17098 ;;                  1    wreg      void 
 17099 ;; Registers used:
 17100 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17101 ;; Tracked objects:
 17102 ;;		On entry : 0/0
 17103 ;;		On exit  : 0/0
 17104 ;;		Unchanged: 0/0
 17105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17106 ;;      Params:         0      14       0       0       0       0       0       0       0
 17107 ;;      Locals:         0       6       0       0       0       0       0       0       0
 17108 ;;      Temps:          0       4       0       0       0       0       0       0       0
 17109 ;;      Totals:         0      24       0       0       0       0       0       0       0
 17110 ;;Total ram usage:       24 bytes
 17111 ;; Hardware stack levels used:    1
 17112 ;; Hardware stack levels required when called:    5
 17113 ;; This function calls:
 17114 ;;		_ipv4_cmp
 17115 ;;		_mac_cmp
 17116 ;; This function is called by:
 17117 ;;		_arp_handleNewPacket
 17118 ;; This function uses a non-reentrant model
 17119 ;;
 17120                           
 17121                           	psect	text54
 17122  00434A                     __ptext54:
 17123                           	opt stack 0
 17124  00434A                     _arp_setNewEntry:
 17125                           	opt stack 22
 17126                           
 17127                           ;arp.c: 483: time_t minSeconds = 0xffffffff;
 17128                           
 17129                           ;incstack = 0
 17130  00434A  0100               	movlb	0	; () banked
 17131  00434C  6979               	setf	arp_setNewEntry@minSeconds& (0+255),b
 17132  00434E  697A               	setf	(arp_setNewEntry@minSeconds+1)& (0+255),b
 17133  004350  697B               	setf	(arp_setNewEntry@minSeconds+2)& (0+255),b
 17134  004352  697C               	setf	(arp_setNewEntry@minSeconds+3)& (0+255),b
 17135                           
 17136                           ; BSR set to: 0
 17137                           ;arp.c: 484: uint8_t oldestIndex = 0;
 17138  004354  0E00               	movlw	0
 17139  004356  6F7D               	movwf	arp_setNewEntry@oldestIndex& (0+255),b
 17140                           
 17141                           ;arp.c: 486: for (uint8_t i = 0; i < 8u; i++) {
 17142  004358  0E00               	movlw	0
 17143  00435A  6F7E               	movwf	arp_setNewEntry@i& (0+255),b
 17144  00435C                     l11146:
 17145                           
 17146                           ; BSR set to: 0
 17147  00435C  0E07               	movlw	7
 17148  00435E  657E               	cpfsgt	arp_setNewEntry@i& (0+255),b
 17149  004360  D001               	goto	l1071
 17150  004362  D057               	goto	u13620
 17151  004364                     l1071:
 17152                           
 17153                           ; BSR set to: 0
 17154                           ;arp.c: 487: if (arp_table[i].timeCreated <= minSeconds) {
 17155                           
 17156                           ; BSR set to: 0
 17157  004364  517E               	movf	arp_setNewEntry@i& (0+255),w,b
 17158  004366  0D0E               	mullw	14
 17159  004368  0E0A               	movlw	10
 17160  00436A  26F3               	addwf	prodl,f,c
 17161  00436C  0E00               	movlw	0
 17162  00436E  22F4               	addwfc	prodh,f,c
 17163  004370  0E7C               	movlw	low _arp_table
 17164  004372  24F3               	addwf	prodl,w,c
 17165  004374  6ED9               	movwf	fsr2l,c
 17166  004376  0E04               	movlw	high _arp_table
 17167  004378  20F4               	addwfc	prodh,w,c
 17168  00437A  6EDA               	movwf	fsr2h,c
 17169  00437C  50DE               	movf	postinc2,w,c
 17170  00437E  5D79               	subwf	arp_setNewEntry@minSeconds& (0+255),w,b
 17171  004380  50DE               	movf	postinc2,w,c
 17172  004382  597A               	subwfb	(arp_setNewEntry@minSeconds+1)& (0+255),w,b
 17173  004384  50DE               	movf	postinc2,w,c
 17174  004386  597B               	subwfb	(arp_setNewEntry@minSeconds+2)& (0+255),w,b
 17175  004388  50DE               	movf	postinc2,w,c
 17176  00438A  597C               	subwfb	(arp_setNewEntry@minSeconds+3)& (0+255),w,b
 17177  00438C  A0D8               	btfss	status,0,c
 17178  00438E  D016               	goto	l1073
 17179                           
 17180                           ; BSR set to: 0
 17181                           ;arp.c: 488: minSeconds = arp_table[i].timeCreated;
 17182  004390  517E               	movf	arp_setNewEntry@i& (0+255),w,b
 17183  004392  0D0E               	mullw	14
 17184  004394  0E0A               	movlw	10
 17185  004396  26F3               	addwf	prodl,f,c
 17186  004398  0E00               	movlw	0
 17187  00439A  22F4               	addwfc	prodh,f,c
 17188  00439C  0E7C               	movlw	low _arp_table
 17189  00439E  24F3               	addwf	prodl,w,c
 17190  0043A0  6ED9               	movwf	fsr2l,c
 17191  0043A2  0E04               	movlw	high _arp_table
 17192  0043A4  20F4               	addwfc	prodh,w,c
 17193  0043A6  6EDA               	movwf	fsr2h,c
 17194  0043A8  CFDE F079          	movff	postinc2,arp_setNewEntry@minSeconds
 17195  0043AC  CFDE F07A          	movff	postinc2,arp_setNewEntry@minSeconds+1
 17196  0043B0  CFDE F07B          	movff	postinc2,arp_setNewEntry@minSeconds+2
 17197  0043B4  CFDE F07C          	movff	postinc2,arp_setNewEntry@minSeconds+3
 17198                           
 17199                           ; BSR set to: 0
 17200                           ;arp.c: 489: oldestIndex = i;
 17201  0043B8  C07E  F07D         	movff	arp_setNewEntry@i,arp_setNewEntry@oldestIndex
 17202  0043BC                     l1073:
 17203                           
 17204                           ; BSR set to: 0
 17205                           ;arp.c: 490: }
 17206                           ;arp.c: 491: if (mac_cmp(&arp_table[i].mac, &mac) && ipv4_cmp(&arp_table[i].ip, &ip)) {
 17207                           
 17208                           ; BSR set to: 0
 17209  0043BC  517E               	movf	arp_setNewEntry@i& (0+255),w,b
 17210  0043BE  0D0E               	mullw	14
 17211  0043C0  0E04               	movlw	4
 17212  0043C2  26F3               	addwf	prodl,f,c
 17213  0043C4  0E00               	movlw	0
 17214  0043C6  22F4               	addwfc	prodh,f,c
 17215  0043C8  0E7C               	movlw	low _arp_table
 17216  0043CA  24F3               	addwf	prodl,w,c
 17217  0043CC  6F60               	movwf	mac_cmp@a& (0+255),b
 17218  0043CE  0E04               	movlw	high _arp_table
 17219  0043D0  20F4               	addwfc	prodh,w,c
 17220  0043D2  6F61               	movwf	(mac_cmp@a+1)& (0+255),b
 17221  0043D4  0E67               	movlw	low arp_setNewEntry@mac
 17222  0043D6  6F62               	movwf	mac_cmp@b& (0+255),b
 17223  0043D8  0E00               	movlw	high arp_setNewEntry@mac
 17224  0043DA  6F63               	movwf	(mac_cmp@b+1)& (0+255),b
 17225  0043DC  EC03  F034         	call	_mac_cmp	;wreg free
 17226  0043E0  0100               	movlb	0	; () banked
 17227  0043E2  A0D8               	btfss	status,0,c
 17228  0043E4  D014               	goto	l1074
 17229                           
 17230                           ; BSR set to: 0
 17231  0043E6  517E               	movf	arp_setNewEntry@i& (0+255),w,b
 17232  0043E8  0D0E               	mullw	14
 17233  0043EA  0E7C               	movlw	low _arp_table
 17234  0043EC  24F3               	addwf	prodl,w,c
 17235  0043EE  6F60               	movwf	ipv4_cmp@a& (0+255),b
 17236  0043F0  0E04               	movlw	high _arp_table
 17237  0043F2  20F4               	addwfc	prodh,w,c
 17238  0043F4  6F61               	movwf	(ipv4_cmp@a+1)& (0+255),b
 17239  0043F6  0E6D               	movlw	low arp_setNewEntry@ip
 17240  0043F8  6F62               	movwf	ipv4_cmp@b& (0+255),b
 17241  0043FA  0E00               	movlw	high arp_setNewEntry@ip
 17242  0043FC  6F63               	movwf	(ipv4_cmp@b+1)& (0+255),b
 17243  0043FE  EC24  F034         	call	_ipv4_cmp	;wreg free
 17244  004402  0100               	movlb	0	; () banked
 17245  004404  A0D8               	btfss	status,0,c
 17246  004406  D003               	goto	l1074
 17247                           
 17248                           ; BSR set to: 0
 17249                           ;arp.c: 493: oldestIndex = i;
 17250  004408  C07E  F07D         	movff	arp_setNewEntry@i,arp_setNewEntry@oldestIndex
 17251                           
 17252                           ;arp.c: 494: break;
 17253  00440C  D002               	goto	u13620
 17254  00440E                     l1074:
 17255                           
 17256                           ; BSR set to: 0
 17257                           
 17258                           ; BSR set to: 0
 17259  00440E  2B7E               	incf	arp_setNewEntry@i& (0+255),f,b
 17260  004410  D7A5               	goto	l11146
 17261  004412                     u13620:
 17262                           
 17263                           ; BSR set to: 0
 17264                           ;arp.c: 495: }
 17265                           ;arp.c: 496: }
 17266                           ;arp.c: 498: arp_table[oldestIndex].ip = ip;
 17267                           
 17268                           ; BSR set to: 0
 17269  004412  517D               	movf	arp_setNewEntry@oldestIndex& (0+255),w,b
 17270  004414  0D0E               	mullw	14
 17271  004416  0E7C               	movlw	low _arp_table
 17272  004418  24F3               	addwf	prodl,w,c
 17273  00441A  6ED9               	movwf	fsr2l,c
 17274  00441C  0E04               	movlw	high _arp_table
 17275  00441E  20F4               	addwfc	prodh,w,c
 17276  004420  6EDA               	movwf	fsr2h,c
 17277  004422  C06D  FFDE         	movff	arp_setNewEntry@ip,postinc2
 17278  004426  C06E  FFDE         	movff	arp_setNewEntry@ip+1,postinc2
 17279  00442A  C06F  FFDE         	movff	arp_setNewEntry@ip+2,postinc2
 17280  00442E  C070  FFDE         	movff	arp_setNewEntry@ip+3,postinc2
 17281                           
 17282                           ; BSR set to: 0
 17283                           ;arp.c: 499: arp_table[oldestIndex].mac = mac;
 17284  004432  EE20  F067         	lfsr	2,arp_setNewEntry@mac
 17285  004436  517D               	movf	arp_setNewEntry@oldestIndex& (0+255),w,b
 17286  004438  0D0E               	mullw	14
 17287  00443A  0E04               	movlw	4
 17288  00443C  26F3               	addwf	prodl,f,c
 17289  00443E  0E00               	movlw	0
 17290  004440  22F4               	addwfc	prodh,f,c
 17291  004442  0E7C               	movlw	low _arp_table
 17292  004444  24F3               	addwf	prodl,w,c
 17293  004446  6EE1               	movwf	fsr1l,c
 17294  004448  0E04               	movlw	high _arp_table
 17295  00444A  20F4               	addwfc	prodh,w,c
 17296  00444C  6EE2               	movwf	fsr1h,c
 17297  00444E  0E05               	movlw	5
 17298  004450                     u13631:
 17299  004450  CFDB FFE3          	movff	plusw2,plusw1
 17300  004454  06E8               	decf	wreg,f,c
 17301  004456  E2FC               	bc	u13631
 17302                           
 17303                           ; BSR set to: 0
 17304                           ;arp.c: 500: arp_table[oldestIndex].timeCreated = timestamp;
 17305  004458  517D               	movf	arp_setNewEntry@oldestIndex& (0+255),w,b
 17306  00445A  0D0E               	mullw	14
 17307  00445C  0E0A               	movlw	10
 17308  00445E  26F3               	addwf	prodl,f,c
 17309  004460  0E00               	movlw	0
 17310  004462  22F4               	addwfc	prodh,f,c
 17311  004464  0E7C               	movlw	low _arp_table
 17312  004466  24F3               	addwf	prodl,w,c
 17313  004468  6ED9               	movwf	fsr2l,c
 17314  00446A  0E04               	movlw	high _arp_table
 17315  00446C  20F4               	addwfc	prodh,w,c
 17316  00446E  6EDA               	movwf	fsr2h,c
 17317  004470  C071  FFDE         	movff	arp_setNewEntry@timestamp,postinc2
 17318  004474  C072  FFDE         	movff	arp_setNewEntry@timestamp+1,postinc2
 17319  004478  C073  FFDE         	movff	arp_setNewEntry@timestamp+2,postinc2
 17320  00447C  C074  FFDE         	movff	arp_setNewEntry@timestamp+3,postinc2
 17321                           
 17322                           ; BSR set to: 0
 17323  004480  0012               	return		;funcret
 17324  004482                     __end_of_arp_setNewEntry:
 17325                           	opt stack 0
 17326                           tblptru	equ	0xFF8
 17327                           tblptrh	equ	0xFF7
 17328                           tblptrl	equ	0xFF6
 17329                           tablat	equ	0xFF5
 17330                           prodh	equ	0xFF4
 17331                           prodl	equ	0xFF3
 17332                           intcon	equ	0xFF2
 17333                           intcon3	equ	0xFF0
 17334                           indf0	equ	0xFEF
 17335                           postinc0	equ	0xFEE
 17336                           plusw0	equ	0xFEB
 17337                           fsr0h	equ	0xFEA
 17338                           fsr0l	equ	0xFE9
 17339                           wreg	equ	0xFE8
 17340                           indf1	equ	0xFE7
 17341                           postinc1	equ	0xFE6
 17342                           postdec1	equ	0xFE5
 17343                           plusw1	equ	0xFE3
 17344                           fsr1h	equ	0xFE2
 17345                           fsr1l	equ	0xFE1
 17346                           indf2	equ	0xFDF
 17347                           postinc2	equ	0xFDE
 17348                           postdec2	equ	0xFDD
 17349                           plusw2	equ	0xFDB
 17350                           fsr2h	equ	0xFDA
 17351                           fsr2l	equ	0xFD9
 17352                           status	equ	0xFD8
 17353                           
 17354 ;; *************** function _arp_sendReply *****************
 17355 ;; Defined at:
 17356 ;;		line 211 in file "src/stack/protocols/arp.c"
 17357 ;; Parameters:    Size  Location     Type
 17358 ;;  request        32    0[BANK1 ] struct arp_message
 17359 ;; Auto vars:     Size  Location     Type
 17360 ;;  reply          32   56[BANK1 ] struct arp_message
 17361 ;;  targetMAC       6   38[BANK1 ] struct macaddress
 17362 ;;  senderMAC       6   32[BANK1 ] struct macaddress
 17363 ;;  myIP            4   52[BANK1 ] struct ipv4_address
 17364 ;;  targetIP        4   48[BANK1 ] struct ipv4_address
 17365 ;;  senderIP        4   44[BANK1 ] struct ipv4_address
 17366 ;; Return value:  Size  Location     Type
 17367 ;;                  1    wreg      void 
 17368 ;; Registers used:
 17369 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17370 ;; Tracked objects:
 17371 ;;		On entry : 0/0
 17372 ;;		On exit  : 0/0
 17373 ;;		Unchanged: 0/0
 17374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17375 ;;      Params:         0       0      32       0       0       0       0       0       0
 17376 ;;      Locals:         0       0      56       0       0       0       0       0       0
 17377 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17378 ;;      Totals:         0       0      88       0       0       0       0       0       0
 17379 ;;Total ram usage:       88 bytes
 17380 ;; Hardware stack levels used:    1
 17381 ;; Hardware stack levels required when called:   10
 17382 ;; This function calls:
 17383 ;;		_arp_send
 17384 ;;		_ethernetController_getMacAddress
 17385 ;;		_ipv4_cmp
 17386 ;;		_ipv4_getIPSourceAddress
 17387 ;; This function is called by:
 17388 ;;		_arp_handleNewPacket
 17389 ;; This function uses a non-reentrant model
 17390 ;;
 17391                           
 17392                           	psect	text55
 17393  004E98                     __ptext55:
 17394                           	opt stack 0
 17395  004E98                     _arp_sendReply:
 17396                           	opt stack 17
 17397                           
 17398                           ;arp.c: 212: if (request.operation != ARP_REQUEST)
 17399                           
 17400                           ; BSR set to: 0
 17401                           ;incstack = 0
 17402  004E98  0101               	movlb	1	; () banked
 17403  004E9A  0506               	decf	(arp_sendReply@request+6)& (0+255),w,b
 17404  004E9C  1107               	iorwf	(arp_sendReply@request+7)& (0+255),w,b
 17405  004E9E  A4D8               	btfss	status,2,c
 17406  004EA0  0012               	return	
 17407                           
 17408                           ; BSR set to: 1
 17409                           ;arp.c: 215: ipv4_address_t myIP = ipv4_getIPSourceAddress();
 17410                           
 17411                           ; BSR set to: 1
 17412                           
 17413                           ; BSR set to: 1
 17414                           ;arp.c: 213: return;
 17415  004EA2  ECE5  F036         	call	_ipv4_getIPSourceAddress	;wreg free
 17416  004EA6  C060  F134         	movff	?_ipv4_getIPSourceAddress,arp_sendReply@myIP
 17417  004EAA  C061  F135         	movff	?_ipv4_getIPSourceAddress+1,arp_sendReply@myIP+1
 17418  004EAE  C062  F136         	movff	?_ipv4_getIPSourceAddress+2,arp_sendReply@myIP+2
 17419  004EB2  C063  F137         	movff	?_ipv4_getIPSourceAddress+3,arp_sendReply@myIP+3
 17420                           
 17421                           ;arp.c: 216: if (!(ipv4_cmp(&request.targetIPAddress, &myIP)))
 17422  004EB6  0E18               	movlw	low (arp_sendReply@request+24)
 17423  004EB8  0100               	movlb	0	; () banked
 17424  004EBA  6F60               	movwf	ipv4_cmp@a& (0+255),b
 17425  004EBC  0E01               	movlw	high (arp_sendReply@request+24)
 17426  004EBE  6F61               	movwf	(ipv4_cmp@a+1)& (0+255),b
 17427  004EC0  0E34               	movlw	low arp_sendReply@myIP
 17428  004EC2  6F62               	movwf	ipv4_cmp@b& (0+255),b
 17429  004EC4  0E01               	movlw	high arp_sendReply@myIP
 17430  004EC6  6F63               	movwf	(ipv4_cmp@b+1)& (0+255),b
 17431  004EC8  EC24  F034         	call	_ipv4_cmp	;wreg free
 17432  004ECC  0100               	movlb	0	; () banked
 17433  004ECE  A0D8               	btfss	status,0,c
 17434  004ED0  0012               	return	
 17435                           
 17436                           ; BSR set to: 0
 17437                           ;arp.c: 219: arp_message_t reply;
 17438                           ;arp.c: 220: ipv4_address_t senderIP;
 17439                           ;arp.c: 221: ipv4_address_t targetIP;
 17440                           ;arp.c: 222: macaddress_t senderMAC;
 17441                           ;arp.c: 223: macaddress_t targetMAC;
 17442                           ;arp.c: 225: senderMAC = ethernetController_getMacAddress();
 17443                           
 17444                           ; BSR set to: 0
 17445                           
 17446                           ; BSR set to: 0
 17447                           ;arp.c: 217: return;
 17448  004ED2  EC04  F030         	call	_ethernetController_getMacAddress	;wreg free
 17449  004ED6  EE21  F020         	lfsr	2,arp_sendReply@senderMAC
 17450  004EDA  0E05               	movlw	5
 17451  004EDC                     u13531:
 17452  004EDC  CFEB FFDB          	movff	plusw0,plusw2
 17453  004EE0  06E8               	decf	wreg,f,c
 17454  004EE2  E2FC               	bc	u13531
 17455                           
 17456                           ;arp.c: 226: targetMAC = request.senderMACAddress;
 17457  004EE4  EE21  F008         	lfsr	2,arp_sendReply@request+8
 17458  004EE8  EE11  F026         	lfsr	1,arp_sendReply@targetMAC
 17459  004EEC  0E05               	movlw	5
 17460  004EEE                     u13541:
 17461  004EEE  CFDB FFE3          	movff	plusw2,plusw1
 17462  004EF2  06E8               	decf	wreg,f,c
 17463  004EF4  E2FC               	bc	u13541
 17464                           
 17465                           ;arp.c: 227: senderIP = ipv4_getIPSourceAddress();
 17466  004EF6  ECE5  F036         	call	_ipv4_getIPSourceAddress	;wreg free
 17467  004EFA  C060  F12C         	movff	?_ipv4_getIPSourceAddress,arp_sendReply@senderIP
 17468  004EFE  C061  F12D         	movff	?_ipv4_getIPSourceAddress+1,arp_sendReply@senderIP+1
 17469  004F02  C062  F12E         	movff	?_ipv4_getIPSourceAddress+2,arp_sendReply@senderIP+2
 17470  004F06  C063  F12F         	movff	?_ipv4_getIPSourceAddress+3,arp_sendReply@senderIP+3
 17471                           
 17472                           ;arp.c: 228: targetIP = request.senderIPAddress;
 17473  004F0A  C10E  F130         	movff	arp_sendReply@request+14,arp_sendReply@targetIP
 17474  004F0E  C10F  F131         	movff	arp_sendReply@request+15,arp_sendReply@targetIP+1
 17475  004F12  C110  F132         	movff	arp_sendReply@request+16,arp_sendReply@targetIP+2
 17476  004F16  C111  F133         	movff	arp_sendReply@request+17,arp_sendReply@targetIP+3
 17477                           
 17478                           ;arp.c: 230: reply.hlen = 6u;
 17479  004F1A  0E06               	movlw	6
 17480  004F1C  0101               	movlb	1	; () banked
 17481  004F1E  6F3C               	movwf	(arp_sendReply@reply+4)& (0+255),b
 17482                           
 17483                           ; BSR set to: 1
 17484                           ;arp.c: 231: reply.plen = 4u;
 17485  004F20  0E04               	movlw	4
 17486  004F22  6F3D               	movwf	(arp_sendReply@reply+5)& (0+255),b
 17487                           
 17488                           ; BSR set to: 1
 17489                           ;arp.c: 232: reply.htype = ARP_HTYPE_ETHERNET;
 17490  004F24  0E00               	movlw	0
 17491  004F26  6F39               	movwf	(arp_sendReply@reply+1)& (0+255),b
 17492  004F28  0E01               	movlw	1
 17493  004F2A  6F38               	movwf	arp_sendReply@reply& (0+255),b
 17494                           
 17495                           ; BSR set to: 1
 17496                           ;arp.c: 233: reply.ptype = ARP_PTYPE_IPv4;
 17497  004F2C  0E08               	movlw	8
 17498  004F2E  6F3B               	movwf	(arp_sendReply@reply+3)& (0+255),b
 17499  004F30  0E00               	movlw	0
 17500  004F32  6F3A               	movwf	(arp_sendReply@reply+2)& (0+255),b
 17501                           
 17502                           ; BSR set to: 1
 17503                           ;arp.c: 234: reply.operation = ARP_REPLY;
 17504  004F34  0E00               	movlw	0
 17505  004F36  6F3F               	movwf	(arp_sendReply@reply+7)& (0+255),b
 17506  004F38  0E02               	movlw	2
 17507  004F3A  6F3E               	movwf	(arp_sendReply@reply+6)& (0+255),b
 17508                           
 17509                           ; BSR set to: 1
 17510                           ;arp.c: 235: reply.senderIPAddress = senderIP;
 17511  004F3C  C12C  F146         	movff	arp_sendReply@senderIP,arp_sendReply@reply+14
 17512  004F40  C12D  F147         	movff	arp_sendReply@senderIP+1,arp_sendReply@reply+15
 17513  004F44  C12E  F148         	movff	arp_sendReply@senderIP+2,arp_sendReply@reply+16
 17514  004F48  C12F  F149         	movff	arp_sendReply@senderIP+3,arp_sendReply@reply+17
 17515                           
 17516                           ; BSR set to: 1
 17517                           ;arp.c: 236: reply.senderMACAddress = senderMAC;
 17518  004F4C  EE21  F020         	lfsr	2,arp_sendReply@senderMAC
 17519  004F50  EE11  F040         	lfsr	1,arp_sendReply@reply+8
 17520  004F54  0E05               	movlw	5
 17521  004F56                     u13551:
 17522  004F56  CFDB FFE3          	movff	plusw2,plusw1
 17523  004F5A  06E8               	decf	wreg,f,c
 17524  004F5C  E2FC               	bc	u13551
 17525                           
 17526                           ; BSR set to: 1
 17527                           ;arp.c: 237: reply.targetIPAddress = targetIP;
 17528  004F5E  C130  F150         	movff	arp_sendReply@targetIP,arp_sendReply@reply+24
 17529  004F62  C131  F151         	movff	arp_sendReply@targetIP+1,arp_sendReply@reply+25
 17530  004F66  C132  F152         	movff	arp_sendReply@targetIP+2,arp_sendReply@reply+26
 17531  004F6A  C133  F153         	movff	arp_sendReply@targetIP+3,arp_sendReply@reply+27
 17532                           
 17533                           ; BSR set to: 1
 17534                           ;arp.c: 238: reply.targetMACAddress = targetMAC;
 17535  004F6E  EE21  F026         	lfsr	2,arp_sendReply@targetMAC
 17536  004F72  EE11  F04A         	lfsr	1,arp_sendReply@reply+18
 17537  004F76  0E05               	movlw	5
 17538  004F78                     u13561:
 17539  004F78  CFDB FFE3          	movff	plusw2,plusw1
 17540  004F7C  06E8               	decf	wreg,f,c
 17541  004F7E  E2FC               	bc	u13561
 17542                           
 17543                           ; BSR set to: 1
 17544                           ;arp.c: 240: arp_send(reply);
 17545  004F80  EE21  F038         	lfsr	2,arp_sendReply@reply
 17546  004F84  EE00  F0A7         	lfsr	0,arp_send@arp
 17547  004F88  0E1F               	movlw	31
 17548  004F8A                     u13571:
 17549  004F8A  CFDB FFEB          	movff	plusw2,plusw0
 17550  004F8E  06E8               	decf	wreg,f,c
 17551  004F90  E2FC               	bc	u13571
 17552  004F92  EC53  F016         	call	_arp_send	;wreg free
 17553  004F96  0012               	return		;funcret
 17554  004F98                     __end_of_arp_sendReply:
 17555                           	opt stack 0
 17556                           tblptru	equ	0xFF8
 17557                           tblptrh	equ	0xFF7
 17558                           tblptrl	equ	0xFF6
 17559                           tablat	equ	0xFF5
 17560                           prodh	equ	0xFF4
 17561                           prodl	equ	0xFF3
 17562                           intcon	equ	0xFF2
 17563                           intcon3	equ	0xFF0
 17564                           indf0	equ	0xFEF
 17565                           postinc0	equ	0xFEE
 17566                           plusw0	equ	0xFEB
 17567                           fsr0h	equ	0xFEA
 17568                           fsr0l	equ	0xFE9
 17569                           wreg	equ	0xFE8
 17570                           indf1	equ	0xFE7
 17571                           postinc1	equ	0xFE6
 17572                           postdec1	equ	0xFE5
 17573                           plusw1	equ	0xFE3
 17574                           fsr1h	equ	0xFE2
 17575                           fsr1l	equ	0xFE1
 17576                           indf2	equ	0xFDF
 17577                           postinc2	equ	0xFDE
 17578                           postdec2	equ	0xFDD
 17579                           plusw2	equ	0xFDB
 17580                           fsr2h	equ	0xFDA
 17581                           fsr2l	equ	0xFD9
 17582                           status	equ	0xFD8
 17583                           
 17584 ;; *************** function _ipv4_getIPSourceAddress *****************
 17585 ;; Defined at:
 17586 ;;		line 362 in file "src/stack/protocols/ipv4.c"
 17587 ;; Parameters:    Size  Location     Type
 17588 ;;		None
 17589 ;; Auto vars:     Size  Location     Type
 17590 ;;		None
 17591 ;; Return value:  Size  Location     Type
 17592 ;;                  4    0[BANK0 ] struct ipv4_address
 17593 ;; Registers used:
 17594 ;;		None
 17595 ;; Tracked objects:
 17596 ;;		On entry : 0/0
 17597 ;;		On exit  : 0/0
 17598 ;;		Unchanged: 0/0
 17599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17600 ;;      Params:         0       4       0       0       0       0       0       0       0
 17601 ;;      Locals:         0       0       0       0       0       0       0       0       0
 17602 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17603 ;;      Totals:         0       4       0       0       0       0       0       0       0
 17604 ;;Total ram usage:        4 bytes
 17605 ;; Hardware stack levels used:    1
 17606 ;; Hardware stack levels required when called:    4
 17607 ;; This function calls:
 17608 ;;		Nothing
 17609 ;; This function is called by:
 17610 ;;		_arp_sendReply
 17611 ;;		_icmp_sendEchoReply
 17612 ;;		_tcp_sendSYNACK
 17613 ;;		_udp_sendPacket
 17614 ;;		_icmp_sendEchoRequest
 17615 ;; This function uses a non-reentrant model
 17616 ;;
 17617                           
 17618                           	psect	text56
 17619  006DCA                     __ptext56:
 17620                           	opt stack 0
 17621  006DCA                     _ipv4_getIPSourceAddress:
 17622                           	opt stack 25
 17623                           
 17624                           ;ipv4.c: 363: return ipSource;
 17625                           
 17626                           ;incstack = 0
 17627  006DCA  C2E0  F060         	movff	_ipSource,?_ipv4_getIPSourceAddress
 17628  006DCE  C2E1  F061         	movff	_ipSource+1,?_ipv4_getIPSourceAddress+1
 17629  006DD2  C2E2  F062         	movff	_ipSource+2,?_ipv4_getIPSourceAddress+2
 17630  006DD6  C2E3  F063         	movff	_ipSource+3,?_ipv4_getIPSourceAddress+3
 17631  006DDA  0012               	return		;funcret
 17632  006DDC                     __end_of_ipv4_getIPSourceAddress:
 17633                           	opt stack 0
 17634                           tblptru	equ	0xFF8
 17635                           tblptrh	equ	0xFF7
 17636                           tblptrl	equ	0xFF6
 17637                           tablat	equ	0xFF5
 17638                           prodh	equ	0xFF4
 17639                           prodl	equ	0xFF3
 17640                           intcon	equ	0xFF2
 17641                           intcon3	equ	0xFF0
 17642                           indf0	equ	0xFEF
 17643                           postinc0	equ	0xFEE
 17644                           plusw0	equ	0xFEB
 17645                           fsr0h	equ	0xFEA
 17646                           fsr0l	equ	0xFE9
 17647                           wreg	equ	0xFE8
 17648                           indf1	equ	0xFE7
 17649                           postinc1	equ	0xFE6
 17650                           postdec1	equ	0xFE5
 17651                           plusw1	equ	0xFE3
 17652                           fsr1h	equ	0xFE2
 17653                           fsr1l	equ	0xFE1
 17654                           indf2	equ	0xFDF
 17655                           postinc2	equ	0xFDE
 17656                           postdec2	equ	0xFDD
 17657                           plusw2	equ	0xFDB
 17658                           fsr2h	equ	0xFDA
 17659                           fsr2l	equ	0xFD9
 17660                           status	equ	0xFD8
 17661                           
 17662 ;; *************** function _arp_parseFromRXBuffer *****************
 17663 ;; Defined at:
 17664 ;;		line 72 in file "src/stack/protocols/arp.c"
 17665 ;; Parameters:    Size  Location     Type
 17666 ;;  frame           2   20[BANK0 ] PTR struct ethernetFrame
 17667 ;;		 -> stack(124), 
 17668 ;; Auto vars:     Size  Location     Type
 17669 ;;  i               1   58[BANK0 ] unsigned char 
 17670 ;;  i               1   57[BANK0 ] unsigned char 
 17671 ;;  i               1   56[BANK0 ] unsigned char 
 17672 ;;  i               1   55[BANK0 ] unsigned char 
 17673 ;;  arp            32   61[BANK0 ] struct arp_message
 17674 ;;  offset          2   59[BANK0 ] const unsigned int 
 17675 ;; Return value:  Size  Location     Type
 17676 ;;                  32   20[BANK0 ] struct arp_message
 17677 ;; Registers used:
 17678 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17679 ;; Tracked objects:
 17680 ;;		On entry : 0/0
 17681 ;;		On exit  : 0/0
 17682 ;;		Unchanged: 0/0
 17683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17684 ;;      Params:         0      32       0       0       0       0       0       0       0
 17685 ;;      Locals:         0      38       0       0       0       0       0       0       0
 17686 ;;      Temps:          0       3       0       0       0       0       0       0       0
 17687 ;;      Totals:         0      73       0       0       0       0       0       0       0
 17688 ;;Total ram usage:       73 bytes
 17689 ;; Hardware stack levels used:    1
 17690 ;; Hardware stack levels required when called:    8
 17691 ;; This function calls:
 17692 ;;		_ethernetController_streamFromRXBuffer
 17693 ;;		_ipv4_cmp
 17694 ;;		_ipv4_isAllZero
 17695 ;;		_mac_cmp
 17696 ;;		_mac_isAllZero
 17697 ;; This function is called by:
 17698 ;;		_arp_handleNewPacket
 17699 ;; This function uses a non-reentrant model
 17700 ;;
 17701                           
 17702                           	psect	text57
 17703  001906                     __ptext57:
 17704                           	opt stack 0
 17705  001906                     _arp_parseFromRXBuffer:
 17706                           	opt stack 19
 17707                           
 17708                           ;arp.c: 73: arp_message_t arp;
 17709                           ;arp.c: 74: uint16_t const offset = 22;
 17710                           
 17711                           ;incstack = 0
 17712  001906  0E00               	movlw	0
 17713  001908  0100               	movlb	0	; () banked
 17714  00190A  6F9C               	movwf	(arp_parseFromRXBuffer@offset+1)& (0+255),b
 17715  00190C  0E16               	movlw	22
 17716  00190E  6F9B               	movwf	arp_parseFromRXBuffer@offset& (0+255),b
 17717                           
 17718                           ; BSR set to: 0
 17719                           ;arp.c: 76: ethernetController_streamFromRXBuffer(0, frame->memory.start + offset);
 17720  001910  EE20 F010          	lfsr	2,16
 17721  001914  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 17722  001916  26D9               	addwf	fsr2l,f,c
 17723  001918  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 17724  00191A  22DA               	addwfc	fsr2h,f,c
 17725  00191C  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 17726  001920  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 17727  001924  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 17728  001926  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 17729  001928  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 17730  00192A  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 17731  00192C  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 17732  00192E  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 17733  001930  0E00               	movlw	0
 17734  001932  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 17735                           
 17736                           ;arp.c: 79: arp.htype = (ethernetController_streamFromRXBuffer(1, frame->memory.start + 
      +                          offset) << 8);
 17737  001936  0100               	movlb	0	; () banked
 17738  001938  EE20 F010          	lfsr	2,16
 17739  00193C  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 17740  00193E  26D9               	addwf	fsr2l,f,c
 17741  001940  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 17742  001942  22DA               	addwfc	fsr2h,f,c
 17743  001944  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 17744  001948  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 17745  00194C  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 17746  00194E  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 17747  001950  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 17748  001952  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 17749  001954  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 17750  001956  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 17751  001958  0E01               	movlw	1
 17752  00195A  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 17753  00195E  0100               	movlb	0	; () banked
 17754  001960  6F9E               	movwf	(arp_parseFromRXBuffer@arp+1)& (0+255),b
 17755  001962  6B9D               	clrf	arp_parseFromRXBuffer@arp& (0+255),b
 17756                           
 17757                           ; BSR set to: 0
 17758                           ;arp.c: 80: arp.htype |= ethernetController_streamFromRXBuffer(1, frame->memory.start + 
      +                          offset);
 17759  001964  EE20 F010          	lfsr	2,16
 17760  001968  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 17761  00196A  26D9               	addwf	fsr2l,f,c
 17762  00196C  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 17763  00196E  22DA               	addwfc	fsr2h,f,c
 17764  001970  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 17765  001974  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 17766  001978  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 17767  00197A  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 17768  00197C  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 17769  00197E  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 17770  001980  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 17771  001982  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 17772  001984  0E01               	movlw	1
 17773  001986  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 17774  00198A  0100               	movlb	0	; () banked
 17775  00198C  6F96               	movwf	(??_arp_parseFromRXBuffer+2)& (0+255),b
 17776  00198E  5196               	movf	(??_arp_parseFromRXBuffer+2)& (0+255),w,b
 17777  001990  139D               	iorwf	arp_parseFromRXBuffer@arp& (0+255),f,b
 17778                           
 17779                           ; BSR set to: 0
 17780                           ;arp.c: 82: arp.ptype = (ethernetController_streamFromRXBuffer(1, frame->memory.start + 
      +                          offset) << 8);
 17781  001992  EE20 F010          	lfsr	2,16
 17782  001996  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 17783  001998  26D9               	addwf	fsr2l,f,c
 17784  00199A  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 17785  00199C  22DA               	addwfc	fsr2h,f,c
 17786  00199E  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 17787  0019A2  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 17788  0019A6  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 17789  0019A8  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 17790  0019AA  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 17791  0019AC  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 17792  0019AE  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 17793  0019B0  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 17794  0019B2  0E01               	movlw	1
 17795  0019B4  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 17796  0019B8  0100               	movlb	0	; () banked
 17797  0019BA  6FA0               	movwf	(arp_parseFromRXBuffer@arp+3)& (0+255),b
 17798  0019BC  6B9F               	clrf	(arp_parseFromRXBuffer@arp+2)& (0+255),b
 17799                           
 17800                           ; BSR set to: 0
 17801                           ;arp.c: 83: arp.ptype |= ethernetController_streamFromRXBuffer(1, frame->memory.start + 
      +                          offset);
 17802  0019BE  EE20 F010          	lfsr	2,16
 17803  0019C2  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 17804  0019C4  26D9               	addwf	fsr2l,f,c
 17805  0019C6  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 17806  0019C8  22DA               	addwfc	fsr2h,f,c
 17807  0019CA  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 17808  0019CE  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 17809  0019D2  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 17810  0019D4  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 17811  0019D6  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 17812  0019D8  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 17813  0019DA  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 17814  0019DC  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 17815  0019DE  0E01               	movlw	1
 17816  0019E0  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 17817  0019E4  0100               	movlb	0	; () banked
 17818  0019E6  6F96               	movwf	(??_arp_parseFromRXBuffer+2)& (0+255),b
 17819  0019E8  5196               	movf	(??_arp_parseFromRXBuffer+2)& (0+255),w,b
 17820  0019EA  139F               	iorwf	(arp_parseFromRXBuffer@arp+2)& (0+255),f,b
 17821                           
 17822                           ; BSR set to: 0
 17823                           ;arp.c: 85: arp.hlen = ethernetController_streamFromRXBuffer(1, frame->memory.start + of
      +                          fset);
 17824  0019EC  EE20 F010          	lfsr	2,16
 17825  0019F0  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 17826  0019F2  26D9               	addwf	fsr2l,f,c
 17827  0019F4  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 17828  0019F6  22DA               	addwfc	fsr2h,f,c
 17829  0019F8  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 17830  0019FC  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 17831  001A00  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 17832  001A02  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 17833  001A04  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 17834  001A06  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 17835  001A08  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 17836  001A0A  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 17837  001A0C  0E01               	movlw	1
 17838  001A0E  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 17839  001A12  0100               	movlb	0	; () banked
 17840  001A14  6FA1               	movwf	(arp_parseFromRXBuffer@arp+4)& (0+255),b
 17841                           
 17842                           ; BSR set to: 0
 17843                           ;arp.c: 86: arp.plen = ethernetController_streamFromRXBuffer(1, frame->memory.start + of
      +                          fset);
 17844  001A16  EE20 F010          	lfsr	2,16
 17845  001A1A  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 17846  001A1C  26D9               	addwf	fsr2l,f,c
 17847  001A1E  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 17848  001A20  22DA               	addwfc	fsr2h,f,c
 17849  001A22  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 17850  001A26  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 17851  001A2A  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 17852  001A2C  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 17853  001A2E  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 17854  001A30  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 17855  001A32  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 17856  001A34  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 17857  001A36  0E01               	movlw	1
 17858  001A38  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 17859  001A3C  0100               	movlb	0	; () banked
 17860  001A3E  6FA2               	movwf	(arp_parseFromRXBuffer@arp+5)& (0+255),b
 17861                           
 17862                           ; BSR set to: 0
 17863                           ;arp.c: 88: arp.operation = (ethernetController_streamFromRXBuffer(1, frame->memory.star
      +                          t + offset) << 8);
 17864  001A40  EE20 F010          	lfsr	2,16
 17865  001A44  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 17866  001A46  26D9               	addwf	fsr2l,f,c
 17867  001A48  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 17868  001A4A  22DA               	addwfc	fsr2h,f,c
 17869  001A4C  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 17870  001A50  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 17871  001A54  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 17872  001A56  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 17873  001A58  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 17874  001A5A  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 17875  001A5C  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 17876  001A5E  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 17877  001A60  0E01               	movlw	1
 17878  001A62  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 17879  001A66  0100               	movlb	0	; () banked
 17880  001A68  6FA4               	movwf	(arp_parseFromRXBuffer@arp+7)& (0+255),b
 17881  001A6A  6BA3               	clrf	(arp_parseFromRXBuffer@arp+6)& (0+255),b
 17882                           
 17883                           ; BSR set to: 0
 17884                           ;arp.c: 89: arp.operation |= ethernetController_streamFromRXBuffer(1, frame->memory.star
      +                          t + offset);
 17885  001A6C  EE20 F010          	lfsr	2,16
 17886  001A70  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 17887  001A72  26D9               	addwf	fsr2l,f,c
 17888  001A74  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 17889  001A76  22DA               	addwfc	fsr2h,f,c
 17890  001A78  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 17891  001A7C  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 17892  001A80  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 17893  001A82  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 17894  001A84  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 17895  001A86  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 17896  001A88  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 17897  001A8A  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 17898  001A8C  0E01               	movlw	1
 17899  001A8E  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 17900  001A92  0100               	movlb	0	; () banked
 17901  001A94  6F96               	movwf	(??_arp_parseFromRXBuffer+2)& (0+255),b
 17902  001A96  5196               	movf	(??_arp_parseFromRXBuffer+2)& (0+255),w,b
 17903  001A98  13A3               	iorwf	(arp_parseFromRXBuffer@arp+6)& (0+255),f,b
 17904                           
 17905                           ; BSR set to: 0
 17906                           ;arp.c: 92: for (uint8_t i = 0; i < arp.hlen; i++)
 17907  001A9A  0E00               	movlw	0
 17908  001A9C  6F97               	movwf	arp_parseFromRXBuffer@i& (0+255),b
 17909  001A9E  D024               	goto	l943
 17910  001AA0                     
 17911                           ; BSR set to: 0
 17912                           ;arp.c: 93: arp.senderMACAddress.address[i] = ethernetController_streamFromRXBuffer(1, f
      +                          rame->memory.start + offset);
 17913                           
 17914                           ; BSR set to: 0
 17915  001AA0  EE20 F010          	lfsr	2,16
 17916  001AA4  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 17917  001AA6  26D9               	addwf	fsr2l,f,c
 17918  001AA8  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 17919  001AAA  22DA               	addwfc	fsr2h,f,c
 17920  001AAC  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 17921  001AB0  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 17922  001AB4  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 17923  001AB6  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 17924  001AB8  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 17925  001ABA  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 17926  001ABC  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 17927  001ABE  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 17928  001AC0  0E01               	movlw	1
 17929  001AC2  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 17930  001AC6  0100               	movlb	0	; () banked
 17931  001AC8  6F96               	movwf	(??_arp_parseFromRXBuffer+2)& (0+255),b
 17932  001ACA  5197               	movf	arp_parseFromRXBuffer@i& (0+255),w,b
 17933  001ACC  0D01               	mullw	1
 17934  001ACE  0E08               	movlw	8
 17935  001AD0  26F3               	addwf	prodl,f,c
 17936  001AD2  0E00               	movlw	0
 17937  001AD4  22F4               	addwfc	prodh,f,c
 17938  001AD6  0E9D               	movlw	low arp_parseFromRXBuffer@arp
 17939  001AD8  24F3               	addwf	prodl,w,c
 17940  001ADA  6ED9               	movwf	fsr2l,c
 17941  001ADC  0E00               	movlw	high arp_parseFromRXBuffer@arp
 17942  001ADE  20F4               	addwfc	prodh,w,c
 17943  001AE0  6EDA               	movwf	fsr2h,c
 17944  001AE2  C096  FFDF         	movff	??_arp_parseFromRXBuffer+2,indf2
 17945                           
 17946                           ; BSR set to: 0
 17947  001AE6  2B97               	incf	arp_parseFromRXBuffer@i& (0+255),f,b
 17948  001AE8                     l943:
 17949                           
 17950                           ; BSR set to: 0
 17951                           
 17952                           ; BSR set to: 0
 17953  001AE8  51A1               	movf	(arp_parseFromRXBuffer@arp+4)& (0+255),w,b
 17954  001AEA  5D97               	subwf	arp_parseFromRXBuffer@i& (0+255),w,b
 17955  001AEC  A0D8               	btfss	status,0,c
 17956  001AEE  D7D8               	goto	l944
 17957                           
 17958                           ; BSR set to: 0
 17959                           ;arp.c: 94: for (uint8_t i = 0; i < arp.plen; i++)
 17960                           
 17961                           ; BSR set to: 0
 17962  001AF0  0E00               	movlw	0
 17963  001AF2  6F98               	movwf	arp_parseFromRXBuffer@i_3225& (0+255),b
 17964  001AF4  D024               	goto	l946
 17965  001AF6                     
 17966                           ; BSR set to: 0
 17967                           ;arp.c: 95: arp.senderIPAddress.address[i] = ethernetController_streamFromRXBuffer(1, fr
      +                          ame->memory.start + offset);
 17968                           
 17969                           ; BSR set to: 0
 17970  001AF6  EE20 F010          	lfsr	2,16
 17971  001AFA  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 17972  001AFC  26D9               	addwf	fsr2l,f,c
 17973  001AFE  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 17974  001B00  22DA               	addwfc	fsr2h,f,c
 17975  001B02  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 17976  001B06  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 17977  001B0A  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 17978  001B0C  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 17979  001B0E  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 17980  001B10  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 17981  001B12  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 17982  001B14  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 17983  001B16  0E01               	movlw	1
 17984  001B18  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 17985  001B1C  0100               	movlb	0	; () banked
 17986  001B1E  6F96               	movwf	(??_arp_parseFromRXBuffer+2)& (0+255),b
 17987  001B20  5198               	movf	arp_parseFromRXBuffer@i_3225& (0+255),w,b
 17988  001B22  0D01               	mullw	1
 17989  001B24  0E0E               	movlw	14
 17990  001B26  26F3               	addwf	prodl,f,c
 17991  001B28  0E00               	movlw	0
 17992  001B2A  22F4               	addwfc	prodh,f,c
 17993  001B2C  0E9D               	movlw	low arp_parseFromRXBuffer@arp
 17994  001B2E  24F3               	addwf	prodl,w,c
 17995  001B30  6ED9               	movwf	fsr2l,c
 17996  001B32  0E00               	movlw	high arp_parseFromRXBuffer@arp
 17997  001B34  20F4               	addwfc	prodh,w,c
 17998  001B36  6EDA               	movwf	fsr2h,c
 17999  001B38  C096  FFDF         	movff	??_arp_parseFromRXBuffer+2,indf2
 18000                           
 18001                           ; BSR set to: 0
 18002  001B3C  2B98               	incf	arp_parseFromRXBuffer@i_3225& (0+255),f,b
 18003  001B3E                     l946:
 18004                           
 18005                           ; BSR set to: 0
 18006                           
 18007                           ; BSR set to: 0
 18008  001B3E  51A2               	movf	(arp_parseFromRXBuffer@arp+5)& (0+255),w,b
 18009  001B40  5D98               	subwf	arp_parseFromRXBuffer@i_3225& (0+255),w,b
 18010  001B42  A0D8               	btfss	status,0,c
 18011  001B44  D7D8               	goto	l947
 18012                           
 18013                           ; BSR set to: 0
 18014                           ;arp.c: 97: for (uint8_t i = 0; i < arp.hlen; i++)
 18015                           
 18016                           ; BSR set to: 0
 18017  001B46  0E00               	movlw	0
 18018  001B48  6F99               	movwf	arp_parseFromRXBuffer@i_3226& (0+255),b
 18019  001B4A  D024               	goto	l949
 18020  001B4C                     
 18021                           ; BSR set to: 0
 18022                           ;arp.c: 98: arp.targetMACAddress.address[i] = ethernetController_streamFromRXBuffer(1, f
      +                          rame->memory.start + offset);
 18023                           
 18024                           ; BSR set to: 0
 18025  001B4C  EE20 F010          	lfsr	2,16
 18026  001B50  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 18027  001B52  26D9               	addwf	fsr2l,f,c
 18028  001B54  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 18029  001B56  22DA               	addwfc	fsr2h,f,c
 18030  001B58  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 18031  001B5C  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 18032  001B60  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 18033  001B62  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 18034  001B64  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 18035  001B66  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 18036  001B68  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 18037  001B6A  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 18038  001B6C  0E01               	movlw	1
 18039  001B6E  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 18040  001B72  0100               	movlb	0	; () banked
 18041  001B74  6F96               	movwf	(??_arp_parseFromRXBuffer+2)& (0+255),b
 18042  001B76  5199               	movf	arp_parseFromRXBuffer@i_3226& (0+255),w,b
 18043  001B78  0D01               	mullw	1
 18044  001B7A  0E12               	movlw	18
 18045  001B7C  26F3               	addwf	prodl,f,c
 18046  001B7E  0E00               	movlw	0
 18047  001B80  22F4               	addwfc	prodh,f,c
 18048  001B82  0E9D               	movlw	low arp_parseFromRXBuffer@arp
 18049  001B84  24F3               	addwf	prodl,w,c
 18050  001B86  6ED9               	movwf	fsr2l,c
 18051  001B88  0E00               	movlw	high arp_parseFromRXBuffer@arp
 18052  001B8A  20F4               	addwfc	prodh,w,c
 18053  001B8C  6EDA               	movwf	fsr2h,c
 18054  001B8E  C096  FFDF         	movff	??_arp_parseFromRXBuffer+2,indf2
 18055                           
 18056                           ; BSR set to: 0
 18057  001B92  2B99               	incf	arp_parseFromRXBuffer@i_3226& (0+255),f,b
 18058  001B94                     l949:
 18059                           
 18060                           ; BSR set to: 0
 18061                           
 18062                           ; BSR set to: 0
 18063  001B94  51A1               	movf	(arp_parseFromRXBuffer@arp+4)& (0+255),w,b
 18064  001B96  5D99               	subwf	arp_parseFromRXBuffer@i_3226& (0+255),w,b
 18065  001B98  A0D8               	btfss	status,0,c
 18066  001B9A  D7D8               	goto	l950
 18067                           
 18068                           ; BSR set to: 0
 18069                           ;arp.c: 99: for (uint8_t i = 0; i < arp.plen; i++)
 18070                           
 18071                           ; BSR set to: 0
 18072  001B9C  0E00               	movlw	0
 18073  001B9E  6F9A               	movwf	arp_parseFromRXBuffer@i_3227& (0+255),b
 18074  001BA0  D024               	goto	l952
 18075  001BA2                     
 18076                           ; BSR set to: 0
 18077                           ;arp.c: 100: arp.targetIPAddress.address[i] = ethernetController_streamFromRXBuffer(1, f
      +                          rame->memory.start + offset);
 18078                           
 18079                           ; BSR set to: 0
 18080  001BA2  EE20 F010          	lfsr	2,16
 18081  001BA6  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 18082  001BA8  26D9               	addwf	fsr2l,f,c
 18083  001BAA  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 18084  001BAC  22DA               	addwfc	fsr2h,f,c
 18085  001BAE  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 18086  001BB2  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 18087  001BB6  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 18088  001BB8  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 18089  001BBA  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 18090  001BBC  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 18091  001BBE  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 18092  001BC0  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 18093  001BC2  0E01               	movlw	1
 18094  001BC4  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 18095  001BC8  0100               	movlb	0	; () banked
 18096  001BCA  6F96               	movwf	(??_arp_parseFromRXBuffer+2)& (0+255),b
 18097  001BCC  519A               	movf	arp_parseFromRXBuffer@i_3227& (0+255),w,b
 18098  001BCE  0D01               	mullw	1
 18099  001BD0  0E18               	movlw	24
 18100  001BD2  26F3               	addwf	prodl,f,c
 18101  001BD4  0E00               	movlw	0
 18102  001BD6  22F4               	addwfc	prodh,f,c
 18103  001BD8  0E9D               	movlw	low arp_parseFromRXBuffer@arp
 18104  001BDA  24F3               	addwf	prodl,w,c
 18105  001BDC  6ED9               	movwf	fsr2l,c
 18106  001BDE  0E00               	movlw	high arp_parseFromRXBuffer@arp
 18107  001BE0  20F4               	addwfc	prodh,w,c
 18108  001BE2  6EDA               	movwf	fsr2h,c
 18109  001BE4  C096  FFDF         	movff	??_arp_parseFromRXBuffer+2,indf2
 18110                           
 18111                           ; BSR set to: 0
 18112  001BE8  2B9A               	incf	arp_parseFromRXBuffer@i_3227& (0+255),f,b
 18113  001BEA                     l952:
 18114                           
 18115                           ; BSR set to: 0
 18116                           
 18117                           ; BSR set to: 0
 18118  001BEA  51A2               	movf	(arp_parseFromRXBuffer@arp+5)& (0+255),w,b
 18119  001BEC  5D9A               	subwf	arp_parseFromRXBuffer@i_3227& (0+255),w,b
 18120  001BEE  A0D8               	btfss	status,0,c
 18121  001BF0  D7D8               	goto	l953
 18122                           
 18123                           ; BSR set to: 0
 18124                           ;arp.c: 102: ethernetController_streamFromRXBuffer(2, frame->memory.start + offset);
 18125                           
 18126                           ; BSR set to: 0
 18127  001BF2  EE20 F010          	lfsr	2,16
 18128  001BF6  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 18129  001BF8  26D9               	addwf	fsr2l,f,c
 18130  001BFA  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 18131  001BFC  22DA               	addwfc	fsr2h,f,c
 18132  001BFE  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 18133  001C02  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 18134  001C06  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 18135  001C08  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 18136  001C0A  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 18137  001C0C  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 18138  001C0E  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 18139  001C10  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 18140  001C12  0E02               	movlw	2
 18141  001C14  EC82  F031         	call	_ethernetController_streamFromRXBuffer
 18142                           
 18143                           ;arp.c: 104: if (ipv4_isAllZero(&arp.senderIPAddress)) {
 18144  001C18  0EAB               	movlw	low (arp_parseFromRXBuffer@arp+14)
 18145  001C1A  0100               	movlb	0	; () banked
 18146  001C1C  6F60               	movwf	ipv4_isAllZero@ip& (0+255),b
 18147  001C1E  0E00               	movlw	high (arp_parseFromRXBuffer@arp+14)
 18148  001C20  6F61               	movwf	(ipv4_isAllZero@ip+1)& (0+255),b
 18149  001C22  EC3D  F035         	call	_ipv4_isAllZero	;wreg free
 18150  001C26  0100               	movlb	0	; () banked
 18151  001C28  A0D8               	btfss	status,0,c
 18152  001C2A  D002               	goto	l955
 18153                           
 18154                           ; BSR set to: 0
 18155                           ;arp.c: 105: arp.fIsProbe = 1;
 18156  001C2C  83B9               	bsf	(arp_parseFromRXBuffer@arp+28)& (0+255),1,b
 18157  001C2E  D03C               	goto	l959
 18158  001C30                     l955:
 18159                           
 18160                           ; BSR set to: 0
 18161                           ;arp.c: 108: arp.fIsProbe = 0;
 18162  001C30  93B9               	bcf	(arp_parseFromRXBuffer@arp+28)& (0+255),1,b
 18163                           
 18164                           ; BSR set to: 0
 18165                           ;arp.c: 110: if (ipv4_cmp(&arp.senderIPAddress, &arp.targetIPAddress) &&
 18166                           ;arp.c: 111: mac_isAllZero(&arp.targetMACAddress) &&
 18167                           ;arp.c: 112: arp.operation == ARP_REQUEST) {
 18168  001C32  0EAB               	movlw	low (arp_parseFromRXBuffer@arp+14)
 18169  001C34  6F60               	movwf	ipv4_cmp@a& (0+255),b
 18170  001C36  0E00               	movlw	high (arp_parseFromRXBuffer@arp+14)
 18171  001C38  6F61               	movwf	(ipv4_cmp@a+1)& (0+255),b
 18172  001C3A  0EB5               	movlw	low (arp_parseFromRXBuffer@arp+24)
 18173  001C3C  6F62               	movwf	ipv4_cmp@b& (0+255),b
 18174  001C3E  0E00               	movlw	high (arp_parseFromRXBuffer@arp+24)
 18175  001C40  6F63               	movwf	(ipv4_cmp@b+1)& (0+255),b
 18176  001C42  EC24  F034         	call	_ipv4_cmp	;wreg free
 18177  001C46  0100               	movlb	0	; () banked
 18178  001C48  A0D8               	btfss	status,0,c
 18179  001C4A  D00D               	goto	l957
 18180                           
 18181                           ; BSR set to: 0
 18182  001C4C  0EAF               	movlw	low (arp_parseFromRXBuffer@arp+18)
 18183  001C4E  6F60               	movwf	mac_isAllZero@mac& (0+255),b
 18184  001C50  0E00               	movlw	high (arp_parseFromRXBuffer@arp+18)
 18185  001C52  6F61               	movwf	(mac_isAllZero@mac+1)& (0+255),b
 18186  001C54  EC25  F035         	call	_mac_isAllZero	;wreg free
 18187  001C58  0100               	movlb	0	; () banked
 18188  001C5A  A0D8               	btfss	status,0,c
 18189  001C5C  D004               	goto	l957
 18190                           
 18191                           ; BSR set to: 0
 18192  001C5E  05A3               	decf	(arp_parseFromRXBuffer@arp+6)& (0+255),w,b
 18193  001C60  11A4               	iorwf	(arp_parseFromRXBuffer@arp+7)& (0+255),w,b
 18194  001C62  B4D8               	btfsc	status,2,c
 18195  001C64  D01F               	goto	u13440
 18196  001C66                     l957:
 18197                           
 18198                           ; BSR set to: 0
 18199                           ;arp.c: 116: if (ipv4_cmp(&arp.senderIPAddress, &arp.targetIPAddress) &&
 18200                           ;arp.c: 117: mac_cmp(&arp.senderMACAddress, &arp.targetMACAddress) &&
 18201                           ;arp.c: 118: arp.operation == ARP_REPLY) {
 18202                           
 18203                           ; BSR set to: 0
 18204  001C66  0EAB               	movlw	low (arp_parseFromRXBuffer@arp+14)
 18205  001C68  6F60               	movwf	ipv4_cmp@a& (0+255),b
 18206  001C6A  0E00               	movlw	high (arp_parseFromRXBuffer@arp+14)
 18207  001C6C  6F61               	movwf	(ipv4_cmp@a+1)& (0+255),b
 18208  001C6E  0EB5               	movlw	low (arp_parseFromRXBuffer@arp+24)
 18209  001C70  6F62               	movwf	ipv4_cmp@b& (0+255),b
 18210  001C72  0E00               	movlw	high (arp_parseFromRXBuffer@arp+24)
 18211  001C74  6F63               	movwf	(ipv4_cmp@b+1)& (0+255),b
 18212  001C76  EC24  F034         	call	_ipv4_cmp	;wreg free
 18213  001C7A  0100               	movlb	0	; () banked
 18214  001C7C  A0D8               	btfss	status,0,c
 18215  001C7E  D014               	goto	l959
 18216                           
 18217                           ; BSR set to: 0
 18218  001C80  0EA5               	movlw	low (arp_parseFromRXBuffer@arp+8)
 18219  001C82  6F60               	movwf	mac_cmp@a& (0+255),b
 18220  001C84  0E00               	movlw	high (arp_parseFromRXBuffer@arp+8)
 18221  001C86  6F61               	movwf	(mac_cmp@a+1)& (0+255),b
 18222  001C88  0EAF               	movlw	low (arp_parseFromRXBuffer@arp+18)
 18223  001C8A  6F62               	movwf	mac_cmp@b& (0+255),b
 18224  001C8C  0E00               	movlw	high (arp_parseFromRXBuffer@arp+18)
 18225  001C8E  6F63               	movwf	(mac_cmp@b+1)& (0+255),b
 18226  001C90  EC03  F034         	call	_mac_cmp	;wreg free
 18227  001C94  0100               	movlb	0	; () banked
 18228  001C96  A0D8               	btfss	status,0,c
 18229  001C98  D007               	goto	l959
 18230                           
 18231                           ; BSR set to: 0
 18232  001C9A  0E02               	movlw	2
 18233  001C9C  19A3               	xorwf	(arp_parseFromRXBuffer@arp+6)& (0+255),w,b
 18234  001C9E  11A4               	iorwf	(arp_parseFromRXBuffer@arp+7)& (0+255),w,b
 18235  001CA0  A4D8               	btfss	status,2,c
 18236  001CA2  D002               	goto	l959
 18237  001CA4                     u13440:
 18238                           
 18239                           ; BSR set to: 0
 18240                           ;arp.c: 119: arp.fIsGratuitous = 1;
 18241  001CA4  81B9               	bsf	(arp_parseFromRXBuffer@arp+28)& (0+255),0,b
 18242                           
 18243                           ;arp.c: 120: } else {
 18244  001CA6  D001               	goto	l960
 18245  001CA8                     l959:
 18246                           
 18247                           ; BSR set to: 0
 18248                           ;arp.c: 121: arp.fIsGratuitous = 0;
 18249  001CA8  91B9               	bcf	(arp_parseFromRXBuffer@arp+28)& (0+255),0,b
 18250  001CAA                     l960:
 18251                           
 18252                           ; BSR set to: 0
 18253                           ;arp.c: 122: }
 18254                           ;arp.c: 123: }
 18255                           ;arp.c: 124: }
 18256                           ;arp.c: 127: if ((arp.htype != ARP_HTYPE_ETHERNET) ||
 18257                           ;arp.c: 128: (arp.ptype != ARP_PTYPE_IPv4) ||
 18258                           ;arp.c: 129: (arp.operation > 2) ||
 18259                           ;arp.c: 130: (arp.hlen != 6u) ||
 18260                           ;arp.c: 131: (arp.plen != 4u)) {
 18261                           
 18262                           ; BSR set to: 0
 18263                           
 18264                           ; BSR set to: 0
 18265                           
 18266                           ; BSR set to: 0
 18267  001CAA  059D               	decf	arp_parseFromRXBuffer@arp& (0+255),w,b
 18268  001CAC  119E               	iorwf	(arp_parseFromRXBuffer@arp+1)& (0+255),w,b
 18269  001CAE  A4D8               	btfss	status,2,c
 18270  001CB0  D013               	goto	u13490
 18271                           
 18272                           ; BSR set to: 0
 18273  001CB2  0E08               	movlw	8
 18274  001CB4  19A0               	xorwf	(arp_parseFromRXBuffer@arp+3)& (0+255),w,b
 18275  001CB6  119F               	iorwf	(arp_parseFromRXBuffer@arp+2)& (0+255),w,b
 18276  001CB8  A4D8               	btfss	status,2,c
 18277  001CBA  D00E               	goto	u13490
 18278                           
 18279                           ; BSR set to: 0
 18280  001CBC  51A4               	movf	(arp_parseFromRXBuffer@arp+7)& (0+255),w,b
 18281  001CBE  E10C               	bnz	l11096
 18282  001CC0  0E03               	movlw	3
 18283  001CC2  5DA3               	subwf	(arp_parseFromRXBuffer@arp+6)& (0+255),w,b
 18284  001CC4  B0D8               	btfsc	status,0,c
 18285  001CC6  D008               	goto	u13490
 18286                           
 18287                           ; BSR set to: 0
 18288  001CC8  0E06               	movlw	6
 18289  001CCA  19A1               	xorwf	(arp_parseFromRXBuffer@arp+4)& (0+255),w,b
 18290  001CCC  A4D8               	btfss	status,2,c
 18291  001CCE  D004               	goto	u13490
 18292                           
 18293                           ; BSR set to: 0
 18294  001CD0  0E04               	movlw	4
 18295  001CD2  19A2               	xorwf	(arp_parseFromRXBuffer@arp+5)& (0+255),w,b
 18296  001CD4  B4D8               	btfsc	status,2,c
 18297  001CD6  D004               	goto	l961
 18298  001CD8                     u13490:
 18299  001CD8                     l11096:
 18300                           
 18301                           ; BSR set to: 0
 18302                           ;arp.c: 132: arp.err.code = ERROR_ARP_INVALID_VALUES;
 18303  001CD8  0E01               	movlw	1
 18304  001CDA  6FBC               	movwf	(arp_parseFromRXBuffer@arp+31)& (0+255),b
 18305  001CDC  0E95               	movlw	149
 18306  001CDE  D003               	goto	L20
 18307  001CE0                     l961:
 18308                           
 18309                           ; BSR set to: 0
 18310                           ;arp.c: 135: arp.err.code = (uint16_t)0;
 18311                           
 18312                           ; BSR set to: 0
 18313  001CE0  0E00               	movlw	0
 18314  001CE2  6FBC               	movwf	(arp_parseFromRXBuffer@arp+31)& (0+255),b
 18315  001CE4  0E00               	movlw	0
 18316  001CE6                     L20:
 18317  001CE6  6FBB               	movwf	(arp_parseFromRXBuffer@arp+30)& (0+255),b
 18318                           
 18319                           ;arp.c: 136: arp.err.module = ERROR_MODULE_ARP;
 18320  001CE8  0E03               	movlw	3
 18321  001CEA  6FBA               	movwf	(arp_parseFromRXBuffer@arp+29)& (0+255),b
 18322                           
 18323                           ; BSR set to: 0
 18324                           ;arp.c: 137: }
 18325                           ;arp.c: 139: return arp;
 18326                           
 18327                           ; BSR set to: 0
 18328  001CEC  EE20  F09D         	lfsr	2,arp_parseFromRXBuffer@arp
 18329  001CF0  EE00  F074         	lfsr	0,?_arp_parseFromRXBuffer
 18330  001CF4  0E1F               	movlw	31
 18331  001CF6                     u13501:
 18332  001CF6  CFDB FFEB          	movff	plusw2,plusw0
 18333  001CFA  06E8               	decf	wreg,f,c
 18334  001CFC  E2FC               	bc	u13501
 18335  001CFE  0012               	return	
 18336  001D00                     __end_of_arp_parseFromRXBuffer:
 18337                           	opt stack 0
 18338                           tblptru	equ	0xFF8
 18339                           tblptrh	equ	0xFF7
 18340                           tblptrl	equ	0xFF6
 18341                           tablat	equ	0xFF5
 18342                           prodh	equ	0xFF4
 18343                           prodl	equ	0xFF3
 18344                           intcon	equ	0xFF2
 18345                           intcon3	equ	0xFF0
 18346                           indf0	equ	0xFEF
 18347                           postinc0	equ	0xFEE
 18348                           plusw0	equ	0xFEB
 18349                           fsr0h	equ	0xFEA
 18350                           fsr0l	equ	0xFE9
 18351                           wreg	equ	0xFE8
 18352                           indf1	equ	0xFE7
 18353                           postinc1	equ	0xFE6
 18354                           postdec1	equ	0xFE5
 18355                           plusw1	equ	0xFE3
 18356                           fsr1h	equ	0xFE2
 18357                           fsr1l	equ	0xFE1
 18358                           indf2	equ	0xFDF
 18359                           postinc2	equ	0xFDE
 18360                           postdec2	equ	0xFDD
 18361                           plusw2	equ	0xFDB
 18362                           fsr2h	equ	0xFDA
 18363                           fsr2l	equ	0xFD9
 18364                           status	equ	0xFD8
 18365                           
 18366 ;; *************** function _mac_isAllZero *****************
 18367 ;; Defined at:
 18368 ;;		line 31 in file "src/eth/mac.c"
 18369 ;; Parameters:    Size  Location     Type
 18370 ;;  mac             2    0[BANK0 ] PTR struct macaddress
 18371 ;;		 -> arp_parseFromRXBuffer@arp(32), 
 18372 ;; Auto vars:     Size  Location     Type
 18373 ;;  i               1    2[BANK0 ] unsigned char 
 18374 ;; Return value:  Size  Location     Type
 18375 ;;		None               void
 18376 ;; Registers used:
 18377 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 18378 ;; Tracked objects:
 18379 ;;		On entry : 0/0
 18380 ;;		On exit  : 0/0
 18381 ;;		Unchanged: 0/0
 18382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18383 ;;      Params:         0       2       0       0       0       0       0       0       0
 18384 ;;      Locals:         0       1       0       0       0       0       0       0       0
 18385 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18386 ;;      Totals:         0       3       0       0       0       0       0       0       0
 18387 ;;Total ram usage:        3 bytes
 18388 ;; Hardware stack levels used:    1
 18389 ;; Hardware stack levels required when called:    4
 18390 ;; This function calls:
 18391 ;;		Nothing
 18392 ;; This function is called by:
 18393 ;;		_arp_parseFromRXBuffer
 18394 ;; This function uses a non-reentrant model
 18395 ;;
 18396                           
 18397                           	psect	text58
 18398  006A4A                     __ptext58:
 18399                           	opt stack 0
 18400  006A4A                     _mac_isAllZero:
 18401                           	opt stack 22
 18402                           
 18403                           ;mac.c: 32: for (uint8_t i = 0; i < 6; i++) {
 18404                           
 18405                           ; BSR set to: 0
 18406                           ;incstack = 0
 18407  006A4A  0E00               	movlw	0
 18408  006A4C  0100               	movlb	0	; () banked
 18409  006A4E  6F62               	movwf	mac_isAllZero@i& (0+255),b
 18410  006A50                     l10678:
 18411                           
 18412                           ; BSR set to: 0
 18413  006A50  0E05               	movlw	5
 18414  006A52  6562               	cpfsgt	mac_isAllZero@i& (0+255),b
 18415  006A54  D001               	goto	l381
 18416  006A56  D00F               	goto	u12320
 18417  006A58                     l381:
 18418                           
 18419                           ; BSR set to: 0
 18420                           ;mac.c: 33: if (mac->address[i] != 0x00)
 18421                           
 18422                           ; BSR set to: 0
 18423  006A58  5162               	movf	mac_isAllZero@i& (0+255),w,b
 18424  006A5A  0D01               	mullw	1
 18425  006A5C  50F3               	movf	prodl,w,c
 18426  006A5E  2560               	addwf	mac_isAllZero@mac& (0+255),w,b
 18427  006A60  6ED9               	movwf	fsr2l,c
 18428  006A62  50F4               	movf	prodh,w,c
 18429  006A64  2161               	addwfc	(mac_isAllZero@mac+1)& (0+255),w,b
 18430  006A66  6EDA               	movwf	fsr2h,c
 18431  006A68  50DF               	movf	indf2,w,c
 18432  006A6A  B4D8               	btfsc	status,2,c
 18433  006A6C  D002               	goto	l383
 18434                           
 18435                           ; BSR set to: 0
 18436                           ;mac.c: 34: return 0;
 18437  006A6E  90D8               	bcf	status,0,c
 18438                           
 18439                           ; BSR set to: 0
 18440  006A70  0012               	return	
 18441  006A72                     l383:
 18442                           
 18443                           ; BSR set to: 0
 18444                           
 18445                           ; BSR set to: 0
 18446  006A72  2B62               	incf	mac_isAllZero@i& (0+255),f,b
 18447  006A74  D7ED               	goto	l10678
 18448  006A76                     u12320:
 18449                           
 18450                           ; BSR set to: 0
 18451                           ;mac.c: 35: }
 18452                           ;mac.c: 36: return 1;
 18453                           
 18454                           ; BSR set to: 0
 18455  006A76  80D8               	bsf	status,0,c
 18456  006A78  0012               	return	
 18457  006A7A                     __end_of_mac_isAllZero:
 18458                           	opt stack 0
 18459                           tblptru	equ	0xFF8
 18460                           tblptrh	equ	0xFF7
 18461                           tblptrl	equ	0xFF6
 18462                           tablat	equ	0xFF5
 18463                           prodh	equ	0xFF4
 18464                           prodl	equ	0xFF3
 18465                           intcon	equ	0xFF2
 18466                           intcon3	equ	0xFF0
 18467                           indf0	equ	0xFEF
 18468                           postinc0	equ	0xFEE
 18469                           plusw0	equ	0xFEB
 18470                           fsr0h	equ	0xFEA
 18471                           fsr0l	equ	0xFE9
 18472                           wreg	equ	0xFE8
 18473                           indf1	equ	0xFE7
 18474                           postinc1	equ	0xFE6
 18475                           postdec1	equ	0xFE5
 18476                           plusw1	equ	0xFE3
 18477                           fsr1h	equ	0xFE2
 18478                           fsr1l	equ	0xFE1
 18479                           indf2	equ	0xFDF
 18480                           postinc2	equ	0xFDE
 18481                           postdec2	equ	0xFDD
 18482                           plusw2	equ	0xFDB
 18483                           fsr2h	equ	0xFDA
 18484                           fsr2l	equ	0xFD9
 18485                           status	equ	0xFD8
 18486                           
 18487 ;; *************** function _mac_cmp *****************
 18488 ;; Defined at:
 18489 ;;		line 39 in file "src/eth/mac.c"
 18490 ;; Parameters:    Size  Location     Type
 18491 ;;  a               2    0[BANK0 ] PTR struct macaddress
 18492 ;;		 -> arp_table(112), arp_parseFromRXBuffer@arp(32), 
 18493 ;;  b               2    2[BANK0 ] PTR struct macaddress
 18494 ;;		 -> arp_setNewEntry@mac(6), arp_parseFromRXBuffer@arp(32), 
 18495 ;; Auto vars:     Size  Location     Type
 18496 ;;  i               1    6[BANK0 ] unsigned char 
 18497 ;; Return value:  Size  Location     Type
 18498 ;;		None               void
 18499 ;; Registers used:
 18500 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 18501 ;; Tracked objects:
 18502 ;;		On entry : 0/0
 18503 ;;		On exit  : 0/0
 18504 ;;		Unchanged: 0/0
 18505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18506 ;;      Params:         0       4       0       0       0       0       0       0       0
 18507 ;;      Locals:         0       1       0       0       0       0       0       0       0
 18508 ;;      Temps:          0       2       0       0       0       0       0       0       0
 18509 ;;      Totals:         0       7       0       0       0       0       0       0       0
 18510 ;;Total ram usage:        7 bytes
 18511 ;; Hardware stack levels used:    1
 18512 ;; Hardware stack levels required when called:    4
 18513 ;; This function calls:
 18514 ;;		Nothing
 18515 ;; This function is called by:
 18516 ;;		_arp_parseFromRXBuffer
 18517 ;;		_arp_setNewEntry
 18518 ;; This function uses a non-reentrant model
 18519 ;;
 18520                           
 18521                           	psect	text59
 18522  006806                     __ptext59:
 18523                           	opt stack 0
 18524  006806                     _mac_cmp:
 18525                           	opt stack 22
 18526                           
 18527                           ;mac.c: 40: for (uint8_t i = 0; i < 6; i++) {
 18528                           
 18529                           ; BSR set to: 0
 18530                           ;incstack = 0
 18531  006806  0E00               	movlw	0
 18532  006808  0100               	movlb	0	; () banked
 18533  00680A  6F66               	movwf	mac_cmp@i& (0+255),b
 18534  00680C                     l10698:
 18535                           
 18536                           ; BSR set to: 0
 18537  00680C  0E05               	movlw	5
 18538  00680E  6566               	cpfsgt	mac_cmp@i& (0+255),b
 18539  006810  D001               	goto	l387
 18540  006812  D018               	goto	u12350
 18541  006814                     l387:
 18542                           
 18543                           ; BSR set to: 0
 18544                           ;mac.c: 41: if (a->address[i] != b->address[i])
 18545                           
 18546                           ; BSR set to: 0
 18547  006814  5166               	movf	mac_cmp@i& (0+255),w,b
 18548  006816  0D01               	mullw	1
 18549  006818  50F3               	movf	prodl,w,c
 18550  00681A  2562               	addwf	mac_cmp@b& (0+255),w,b
 18551  00681C  6ED9               	movwf	fsr2l,c
 18552  00681E  50F4               	movf	prodh,w,c
 18553  006820  2163               	addwfc	(mac_cmp@b+1)& (0+255),w,b
 18554  006822  6EDA               	movwf	fsr2h,c
 18555  006824  5166               	movf	mac_cmp@i& (0+255),w,b
 18556  006826  0D01               	mullw	1
 18557  006828  50F3               	movf	prodl,w,c
 18558  00682A  2560               	addwf	mac_cmp@a& (0+255),w,b
 18559  00682C  6EE1               	movwf	fsr1l,c
 18560  00682E  50F4               	movf	prodh,w,c
 18561  006830  2161               	addwfc	(mac_cmp@a+1)& (0+255),w,b
 18562  006832  6EE2               	movwf	fsr1h,c
 18563  006834  50DE               	movf	postinc2,w,c
 18564  006836  18E6               	xorwf	postinc1,w,c
 18565  006838  B4D8               	btfsc	status,2,c
 18566  00683A  D002               	goto	l389
 18567                           
 18568                           ; BSR set to: 0
 18569                           ;mac.c: 42: return 0;
 18570  00683C  90D8               	bcf	status,0,c
 18571                           
 18572                           ; BSR set to: 0
 18573  00683E  0012               	return	
 18574  006840                     l389:
 18575                           
 18576                           ; BSR set to: 0
 18577                           
 18578                           ; BSR set to: 0
 18579  006840  2B66               	incf	mac_cmp@i& (0+255),f,b
 18580  006842  D7E4               	goto	l10698
 18581  006844                     u12350:
 18582                           
 18583                           ; BSR set to: 0
 18584                           ;mac.c: 43: }
 18585                           ;mac.c: 44: return 1;
 18586                           
 18587                           ; BSR set to: 0
 18588  006844  80D8               	bsf	status,0,c
 18589  006846  0012               	return	
 18590  006848                     __end_of_mac_cmp:
 18591                           	opt stack 0
 18592                           tblptru	equ	0xFF8
 18593                           tblptrh	equ	0xFF7
 18594                           tblptrl	equ	0xFF6
 18595                           tablat	equ	0xFF5
 18596                           prodh	equ	0xFF4
 18597                           prodl	equ	0xFF3
 18598                           intcon	equ	0xFF2
 18599                           intcon3	equ	0xFF0
 18600                           indf0	equ	0xFEF
 18601                           postinc0	equ	0xFEE
 18602                           plusw0	equ	0xFEB
 18603                           fsr0h	equ	0xFEA
 18604                           fsr0l	equ	0xFE9
 18605                           wreg	equ	0xFE8
 18606                           indf1	equ	0xFE7
 18607                           postinc1	equ	0xFE6
 18608                           postdec1	equ	0xFE5
 18609                           plusw1	equ	0xFE3
 18610                           fsr1h	equ	0xFE2
 18611                           fsr1l	equ	0xFE1
 18612                           indf2	equ	0xFDF
 18613                           postinc2	equ	0xFDE
 18614                           postdec2	equ	0xFDD
 18615                           plusw2	equ	0xFDB
 18616                           fsr2h	equ	0xFDA
 18617                           fsr2l	equ	0xFD9
 18618                           status	equ	0xFD8
 18619                           
 18620 ;; *************** function _ipv4_isAllZero *****************
 18621 ;; Defined at:
 18622 ;;		line 432 in file "src/stack/protocols/ipv4.c"
 18623 ;; Parameters:    Size  Location     Type
 18624 ;;  ip              2    0[BANK0 ] PTR struct ipv4_address
 18625 ;;		 -> arp_parseFromRXBuffer@arp(32), arp_handleNewPacket@arp(32), 
 18626 ;; Auto vars:     Size  Location     Type
 18627 ;;  i               1    2[BANK0 ] unsigned char 
 18628 ;; Return value:  Size  Location     Type
 18629 ;;		None               void
 18630 ;; Registers used:
 18631 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 18632 ;; Tracked objects:
 18633 ;;		On entry : 0/0
 18634 ;;		On exit  : 0/0
 18635 ;;		Unchanged: 0/0
 18636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18637 ;;      Params:         0       2       0       0       0       0       0       0       0
 18638 ;;      Locals:         0       1       0       0       0       0       0       0       0
 18639 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18640 ;;      Totals:         0       3       0       0       0       0       0       0       0
 18641 ;;Total ram usage:        3 bytes
 18642 ;; Hardware stack levels used:    1
 18643 ;; Hardware stack levels required when called:    4
 18644 ;; This function calls:
 18645 ;;		Nothing
 18646 ;; This function is called by:
 18647 ;;		_arp_handleNewPacket
 18648 ;;		_arp_parseFromRXBuffer
 18649 ;; This function uses a non-reentrant model
 18650 ;;
 18651                           
 18652                           	psect	text60
 18653  006A7A                     __ptext60:
 18654                           	opt stack 0
 18655  006A7A                     _ipv4_isAllZero:
 18656                           	opt stack 23
 18657                           
 18658                           ;ipv4.c: 433: for (uint8_t i = 0; i < 4; i++) {
 18659                           
 18660                           ; BSR set to: 0
 18661                           ;incstack = 0
 18662  006A7A  0E00               	movlw	0
 18663  006A7C  0100               	movlb	0	; () banked
 18664  006A7E  6F62               	movwf	ipv4_isAllZero@i& (0+255),b
 18665  006A80                     l10730:
 18666                           
 18667                           ; BSR set to: 0
 18668  006A80  0E03               	movlw	3
 18669  006A82  6562               	cpfsgt	ipv4_isAllZero@i& (0+255),b
 18670  006A84  D001               	goto	l1215
 18671  006A86  D00F               	goto	u12400
 18672  006A88                     l1215:
 18673                           
 18674                           ; BSR set to: 0
 18675                           ;ipv4.c: 434: if (ip->address[i] != 0x00)
 18676                           
 18677                           ; BSR set to: 0
 18678  006A88  5162               	movf	ipv4_isAllZero@i& (0+255),w,b
 18679  006A8A  0D01               	mullw	1
 18680  006A8C  50F3               	movf	prodl,w,c
 18681  006A8E  2560               	addwf	ipv4_isAllZero@ip& (0+255),w,b
 18682  006A90  6ED9               	movwf	fsr2l,c
 18683  006A92  50F4               	movf	prodh,w,c
 18684  006A94  2161               	addwfc	(ipv4_isAllZero@ip+1)& (0+255),w,b
 18685  006A96  6EDA               	movwf	fsr2h,c
 18686  006A98  50DF               	movf	indf2,w,c
 18687  006A9A  B4D8               	btfsc	status,2,c
 18688  006A9C  D002               	goto	l1217
 18689                           
 18690                           ; BSR set to: 0
 18691                           ;ipv4.c: 435: return 0;
 18692  006A9E  90D8               	bcf	status,0,c
 18693                           
 18694                           ; BSR set to: 0
 18695  006AA0  0012               	return	
 18696  006AA2                     l1217:
 18697                           
 18698                           ; BSR set to: 0
 18699                           
 18700                           ; BSR set to: 0
 18701  006AA2  2B62               	incf	ipv4_isAllZero@i& (0+255),f,b
 18702  006AA4  D7ED               	goto	l10730
 18703  006AA6                     u12400:
 18704                           
 18705                           ; BSR set to: 0
 18706                           ;ipv4.c: 436: }
 18707                           ;ipv4.c: 437: return 1;
 18708                           
 18709                           ; BSR set to: 0
 18710  006AA6  80D8               	bsf	status,0,c
 18711  006AA8  0012               	return	
 18712  006AAA                     __end_of_ipv4_isAllZero:
 18713                           	opt stack 0
 18714                           tblptru	equ	0xFF8
 18715                           tblptrh	equ	0xFF7
 18716                           tblptrl	equ	0xFF6
 18717                           tablat	equ	0xFF5
 18718                           prodh	equ	0xFF4
 18719                           prodl	equ	0xFF3
 18720                           intcon	equ	0xFF2
 18721                           intcon3	equ	0xFF0
 18722                           indf0	equ	0xFEF
 18723                           postinc0	equ	0xFEE
 18724                           plusw0	equ	0xFEB
 18725                           fsr0h	equ	0xFEA
 18726                           fsr0l	equ	0xFE9
 18727                           wreg	equ	0xFE8
 18728                           indf1	equ	0xFE7
 18729                           postinc1	equ	0xFE6
 18730                           postdec1	equ	0xFE5
 18731                           plusw1	equ	0xFE3
 18732                           fsr1h	equ	0xFE2
 18733                           fsr1l	equ	0xFE1
 18734                           indf2	equ	0xFDF
 18735                           postinc2	equ	0xFDE
 18736                           postdec2	equ	0xFDD
 18737                           plusw2	equ	0xFDB
 18738                           fsr2h	equ	0xFDA
 18739                           fsr2l	equ	0xFD9
 18740                           status	equ	0xFD8
 18741                           
 18742 ;; *************** function _ethernetController_streamFromRXBuffer *****************
 18743 ;; Defined at:
 18744 ;;		line 350 in file "src/enc424j600/ENC424J600.c"
 18745 ;; Parameters:    Size  Location     Type
 18746 ;;  startEnd        1    wreg     unsigned char 
 18747 ;;  startAddress    2   15[BANK0 ] unsigned int 
 18748 ;; Auto vars:     Size  Location     Type
 18749 ;;  startEnd        1   17[BANK0 ] unsigned char 
 18750 ;;  temp            1   19[BANK0 ] unsigned char 
 18751 ;;  opcode          1   18[BANK0 ] unsigned char 
 18752 ;; Return value:  Size  Location     Type
 18753 ;;                  1    wreg      unsigned char 
 18754 ;; Registers used:
 18755 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18756 ;; Tracked objects:
 18757 ;;		On entry : 0/0
 18758 ;;		On exit  : 0/0
 18759 ;;		Unchanged: 0/0
 18760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18761 ;;      Params:         0       2       0       0       0       0       0       0       0
 18762 ;;      Locals:         0       3       0       0       0       0       0       0       0
 18763 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18764 ;;      Totals:         0       5       0       0       0       0       0       0       0
 18765 ;;Total ram usage:        5 bytes
 18766 ;; Hardware stack levels used:    1
 18767 ;; Hardware stack levels required when called:    7
 18768 ;; This function calls:
 18769 ;;		_enc424j600_readSPI
 18770 ;;		_enc424j600_setERXDATAReadPointer
 18771 ;;		_enc424j600_writeSPI
 18772 ;; This function is called by:
 18773 ;;		_arp_parseFromRXBuffer
 18774 ;;		_ipv4_parseHeader
 18775 ;;		_icmp_handleNewPacket
 18776 ;;		_icmp_parseHeader
 18777 ;;		_icmp_sendEchoReply
 18778 ;;		_tcp_parseHeader
 18779 ;; This function uses a non-reentrant model
 18780 ;;
 18781                           
 18782                           	psect	text61
 18783  006304                     __ptext61:
 18784                           	opt stack 0
 18785  006304                     _ethernetController_streamFromRXBuffer:
 18786                           	opt stack 18
 18787                           
 18788                           ; BSR set to: 0
 18789                           ;incstack = 0
 18790                           ;ethernetController_streamFromRXBuffer@startEnd stored from wreg
 18791  006304  0100               	movlb	0	; () banked
 18792  006306  6F71               	movwf	ethernetController_streamFromRXBuffer@startEnd& (0+255),b
 18793                           
 18794                           ;ENC424J600.c: 351: uint8_t temp;
 18795                           ;ENC424J600.c: 352: uint8_t opcode;
 18796                           ;ENC424J600.c: 353: switch (startEnd) {
 18797  006308  D01F               	goto	l174
 18798  00630A                     
 18799                           ;ENC424J600.c: 355: enc424j600_setERXDATAReadPointer(startAddress);
 18800  00630A  C06F  F06A         	movff	ethernetController_streamFromRXBuffer@startAddress,enc424j600_setERXDATAReadPoint
      +                          er@addr
 18801  00630E  C070  F06B         	movff	ethernetController_streamFromRXBuffer@startAddress+1,enc424j600_setERXDATAReadPoi
      +                          nter@addr+1
 18802  006312  EC81  F034         	call	_enc424j600_setERXDATAReadPointer	;wreg free
 18803                           
 18804                           ;ENC424J600.c: 356: opcode = 0x2C;
 18805  006316  0E2C               	movlw	44
 18806  006318  0100               	movlb	0	; () banked
 18807  00631A  6F72               	movwf	ethernetController_streamFromRXBuffer@opcode& (0+255),b
 18808                           
 18809                           ; BSR set to: 0
 18810                           ;ENC424J600.c: 357: PORTBbits.RB4=0;
 18811  00631C  9881               	bcf	3969,4,c	;volatile
 18812                           
 18813                           ; BSR set to: 0
 18814                           ;ENC424J600.c: 358: enc424j600_writeSPI(&opcode);
 18815  00631E  0E72               	movlw	low ethernetController_streamFromRXBuffer@opcode
 18816  006320  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 18817  006322  0E00               	movlw	high ethernetController_streamFromRXBuffer@opcode
 18818  006324  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 18819  006326  EC50  F031         	call	_enc424j600_writeSPI	;wreg free
 18820                           
 18821                           ;ENC424J600.c: 359: return 0;
 18822  00632A  0E00               	movlw	0
 18823  00632C  0012               	return	
 18824  00632E                     
 18825                           ;ENC424J600.c: 361: enc424j600_readSPI(&temp);
 18826  00632E  0E73               	movlw	low ethernetController_streamFromRXBuffer@temp
 18827  006330  0100               	movlb	0	; () banked
 18828  006332  6F60               	movwf	enc424j600_readSPI@data& (0+255),b
 18829  006334  0E00               	movlw	high ethernetController_streamFromRXBuffer@temp
 18830  006336  6F61               	movwf	(enc424j600_readSPI@data+1)& (0+255),b
 18831  006338  ECE7  F030         	call	_enc424j600_readSPI	;wreg free
 18832                           
 18833                           ;ENC424J600.c: 362: return temp;
 18834  00633C  0100               	movlb	0	; () banked
 18835  00633E  5173               	movf	ethernetController_streamFromRXBuffer@temp& (0+255),w,b
 18836                           
 18837                           ; BSR set to: 0
 18838  006340  0012               	return	
 18839  006342                     l178:
 18840                           
 18841                           ; BSR set to: 0
 18842                           ;ENC424J600.c: 364: PORTBbits.RB4=1;
 18843  006342  8881               	bsf	3969,4,c	;volatile
 18844                           
 18845                           ; BSR set to: 0
 18846                           ;ENC424J600.c: 374: return 0;
 18847  006344  0E00               	movlw	0
 18848                           
 18849                           ; BSR set to: 0
 18850  006346  0012               	return	
 18851  006348                     l174:
 18852                           
 18853                           ; BSR set to: 0
 18854  006348  0100               	movlb	0	; () banked
 18855  00634A  5171               	movf	ethernetController_streamFromRXBuffer@startEnd& (0+255),w,b
 18856                           
 18857                           ; Switch size 1, requested type "space"
 18858                           ; Number of cases is 3, Range of values is 0 to 2
 18859                           ; switch strategies available:
 18860                           ; Name         Instructions Cycles
 18861                           ; simple_byte           10     6 (average)
 18862                           ;	Chosen strategy is simple_byte
 18863  00634C  0A00               	xorlw	0	; case 0
 18864  00634E  B4D8               	btfsc	status,2,c
 18865  006350  D7DC               	goto	l175
 18866  006352  0A01               	xorlw	1	; case 1
 18867  006354  B4D8               	btfsc	status,2,c
 18868  006356  D7EB               	goto	l177
 18869  006358  0A03               	xorlw	3	; case 2
 18870  00635A  B4D8               	btfsc	status,2,c
 18871  00635C  D7F2               	goto	l178
 18872                           
 18873                           ; BSR set to: 0
 18874                           ;ENC424J600.c: 376: return 0;
 18875                           
 18876                           ; BSR set to: 0
 18877  00635E  0E00               	movlw	0
 18878  006360  0012               	return	
 18879  006362                     __end_of_ethernetController_streamFromRXBuffer:
 18880                           	opt stack 0
 18881                           tblptru	equ	0xFF8
 18882                           tblptrh	equ	0xFF7
 18883                           tblptrl	equ	0xFF6
 18884                           tablat	equ	0xFF5
 18885                           prodh	equ	0xFF4
 18886                           prodl	equ	0xFF3
 18887                           intcon	equ	0xFF2
 18888                           intcon3	equ	0xFF0
 18889                           indf0	equ	0xFEF
 18890                           postinc0	equ	0xFEE
 18891                           plusw0	equ	0xFEB
 18892                           fsr0h	equ	0xFEA
 18893                           fsr0l	equ	0xFE9
 18894                           wreg	equ	0xFE8
 18895                           indf1	equ	0xFE7
 18896                           postinc1	equ	0xFE6
 18897                           postdec1	equ	0xFE5
 18898                           plusw1	equ	0xFE3
 18899                           fsr1h	equ	0xFE2
 18900                           fsr1l	equ	0xFE1
 18901                           indf2	equ	0xFDF
 18902                           postinc2	equ	0xFDE
 18903                           postdec2	equ	0xFDD
 18904                           plusw2	equ	0xFDB
 18905                           fsr2h	equ	0xFDA
 18906                           fsr2l	equ	0xFD9
 18907                           status	equ	0xFD8
 18908                           
 18909 ;; *************** function _UART_setFormat *****************
 18910 ;; Defined at:
 18911 ;;		line 47 in file "src/system/uart.c"
 18912 ;; Parameters:    Size  Location     Type
 18913 ;;  color           1    wreg     unsigned char 
 18914 ;; Auto vars:     Size  Location     Type
 18915 ;;  color           1   47[BANK0 ] unsigned char 
 18916 ;; Return value:  Size  Location     Type
 18917 ;;                  1    wreg      void 
 18918 ;; Registers used:
 18919 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18920 ;; Tracked objects:
 18921 ;;		On entry : 0/0
 18922 ;;		On exit  : 0/0
 18923 ;;		Unchanged: 0/0
 18924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18925 ;;      Params:         0       0       0       0       0       0       0       0       0
 18926 ;;      Locals:         0       1       0       0       0       0       0       0       0
 18927 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18928 ;;      Totals:         0       1       0       0       0       0       0       0       0
 18929 ;;Total ram usage:        1 bytes
 18930 ;; Hardware stack levels used:    1
 18931 ;; Hardware stack levels required when called:    5
 18932 ;; This function calls:
 18933 ;;		_UARTTransmitText
 18934 ;; This function is called by:
 18935 ;;		_ethernet_rxGetNewFrame
 18936 ;;		_handleStackBackgroundTasks
 18937 ;;		_main
 18938 ;; This function uses a non-reentrant model
 18939 ;;
 18940                           
 18941                           	psect	text62
 18942  00571C                     __ptext62:
 18943                           	opt stack 0
 18944  00571C                     _UART_setFormat:
 18945                           	opt stack 23
 18946                           
 18947                           ;incstack = 0
 18948                           ;UART_setFormat@color stored from wreg
 18949  00571C  0100               	movlb	0	; () banked
 18950  00571E  6F8F               	movwf	UART_setFormat@color& (0+255),b
 18951                           
 18952                           ;uart.c: 48: switch (color) {
 18953  005720  D038               	goto	l806
 18954  005722                     
 18955                           ;uart.c: 50: UARTTransmitText("\033[41;10;10m");
 18956  005722  0EE2               	movlw	low STR_59
 18957  005724  0100               	movlb	0	; () banked
 18958  005726  6F8D               	movwf	UARTTransmitText@str& (0+255),b
 18959  005728  0E7E               	movlw	high STR_59
 18960  00572A  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
 18961  00572C  EC36  F032         	call	_UARTTransmitText	;wreg free
 18962                           
 18963                           ;uart.c: 51: break;
 18964  005730  0012               	return	
 18965  005732                     
 18966                           ;uart.c: 53: UARTTransmitText("\033[42;30;10m");
 18967  005732  0E06               	movlw	low STR_60
 18968  005734  0100               	movlb	0	; () banked
 18969  005736  6F8D               	movwf	UARTTransmitText@str& (0+255),b
 18970  005738  0E7F               	movlw	high STR_60
 18971  00573A  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
 18972  00573C  EC36  F032         	call	_UARTTransmitText	;wreg free
 18973                           
 18974                           ;uart.c: 54: break;
 18975  005740  0012               	return	
 18976  005742                     
 18977                           ;uart.c: 56: UARTTransmitText("\033[44;10;10m");
 18978  005742  0EEE               	movlw	low STR_61
 18979  005744  0100               	movlb	0	; () banked
 18980  005746  6F8D               	movwf	UARTTransmitText@str& (0+255),b
 18981  005748  0E7E               	movlw	high STR_61
 18982  00574A  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
 18983  00574C  EC36  F032         	call	_UARTTransmitText	;wreg free
 18984                           
 18985                           ;uart.c: 57: break;
 18986  005750  0012               	return	
 18987  005752                     
 18988                           ;uart.c: 59: UARTTransmitText("\033[45;10;10m");
 18989  005752  0EFA               	movlw	low STR_62
 18990  005754  0100               	movlb	0	; () banked
 18991  005756  6F8D               	movwf	UARTTransmitText@str& (0+255),b
 18992  005758  0E7E               	movlw	high STR_62
 18993  00575A  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
 18994  00575C  EC36  F032         	call	_UARTTransmitText	;wreg free
 18995                           
 18996                           ;uart.c: 60: break;
 18997  005760  0012               	return	
 18998  005762                     
 18999                           ;uart.c: 62: UARTTransmitText("\033[46;30;10m");
 19000  005762  0E12               	movlw	low STR_63
 19001  005764  0100               	movlb	0	; () banked
 19002  005766  6F8D               	movwf	UARTTransmitText@str& (0+255),b
 19003  005768  0E7F               	movlw	high STR_63
 19004  00576A  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
 19005  00576C  EC36  F032         	call	_UARTTransmitText	;wreg free
 19006                           
 19007                           ;uart.c: 63: break;
 19008  005770  0012               	return	
 19009  005772                     
 19010                           ;uart.c: 65: UARTTransmitText("\033[103;30;10m");
 19011  005772  0EBB               	movlw	low STR_64
 19012  005774  0100               	movlb	0	; () banked
 19013  005776  6F8D               	movwf	UARTTransmitText@str& (0+255),b
 19014  005778  0E7E               	movlw	high STR_64
 19015  00577A  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
 19016  00577C  EC36  F032         	call	_UARTTransmitText	;wreg free
 19017                           
 19018                           ;uart.c: 68: break;
 19019                           
 19020                           ;uart.c: 67: case UART_COLOR_FG_YELLOW:
 19021                           
 19022                           ;uart.c: 66: break;
 19023  005780  0012               	return	
 19024  005782                     
 19025                           ;uart.c: 70: UARTTransmitText("\033[94;4;10m");
 19026  005782  0E42               	movlw	low STR_65
 19027  005784  0100               	movlb	0	; () banked
 19028  005786  6F8D               	movwf	UARTTransmitText@str& (0+255),b
 19029  005788  0E7F               	movlw	high STR_65
 19030  00578A  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
 19031  00578C  EC36  F032         	call	_UARTTransmitText	;wreg free
 19032                           
 19033                           ;uart.c: 72: }
 19034                           
 19035                           ;uart.c: 71: break;
 19036  005790  0012               	return	
 19037  005792                     l806:
 19038  005792  0100               	movlb	0	; () banked
 19039  005794  518F               	movf	UART_setFormat@color& (0+255),w,b
 19040                           
 19041                           ; Switch size 1, requested type "space"
 19042                           ; Number of cases is 8, Range of values is 0 to 7
 19043                           ; switch strategies available:
 19044                           ; Name         Instructions Cycles
 19045                           ; simple_byte           25    13 (average)
 19046                           ;	Chosen strategy is simple_byte
 19047  005796  0A00               	xorlw	0	; case 0
 19048  005798  B4D8               	btfsc	status,2,c
 19049  00579A  D7C3               	goto	l807
 19050  00579C  0A01               	xorlw	1	; case 1
 19051  00579E  B4D8               	btfsc	status,2,c
 19052  0057A0  D7C8               	goto	l809
 19053  0057A2  0A03               	xorlw	3	; case 2
 19054  0057A4  B4D8               	btfsc	status,2,c
 19055  0057A6  D7CD               	goto	l810
 19056  0057A8  0A01               	xorlw	1	; case 3
 19057  0057AA  B4D8               	btfsc	status,2,c
 19058  0057AC  D7E2               	goto	l813
 19059  0057AE  0A07               	xorlw	7	; case 4
 19060  0057B0  B4D8               	btfsc	status,2,c
 19061  0057B2  D7CF               	goto	l811
 19062  0057B4  0A01               	xorlw	1	; case 5
 19063  0057B6  B4D8               	btfsc	status,2,c
 19064  0057B8  D7D4               	goto	l812
 19065  0057BA  0A03               	xorlw	3	; case 6
 19066  0057BC  B4D8               	btfsc	status,2,c
 19067  0057BE  0012               	return	
 19068  0057C0  0A01               	xorlw	1	; case 7
 19069  0057C2  A4D8               	btfss	status,2,c
 19070  0057C4  0012               	return	
 19071  0057C6  D7DD               	goto	l815
 19072  0057C8                     __end_of_UART_setFormat:
 19073                           	opt stack 0
 19074                           tblptru	equ	0xFF8
 19075                           tblptrh	equ	0xFF7
 19076                           tblptrl	equ	0xFF6
 19077                           tablat	equ	0xFF5
 19078                           prodh	equ	0xFF4
 19079                           prodl	equ	0xFF3
 19080                           intcon	equ	0xFF2
 19081                           intcon3	equ	0xFF0
 19082                           indf0	equ	0xFEF
 19083                           postinc0	equ	0xFEE
 19084                           plusw0	equ	0xFEB
 19085                           fsr0h	equ	0xFEA
 19086                           fsr0l	equ	0xFE9
 19087                           wreg	equ	0xFE8
 19088                           indf1	equ	0xFE7
 19089                           postinc1	equ	0xFE6
 19090                           postdec1	equ	0xFE5
 19091                           plusw1	equ	0xFE3
 19092                           fsr1h	equ	0xFE2
 19093                           fsr1l	equ	0xFE1
 19094                           indf2	equ	0xFDF
 19095                           postinc2	equ	0xFDE
 19096                           postdec2	equ	0xFDD
 19097                           plusw2	equ	0xFDB
 19098                           fsr2h	equ	0xFDA
 19099                           fsr2l	equ	0xFD9
 19100                           status	equ	0xFD8
 19101                           
 19102 ;; *************** function _UART_resetFormat *****************
 19103 ;; Defined at:
 19104 ;;		line 43 in file "src/system/uart.c"
 19105 ;; Parameters:    Size  Location     Type
 19106 ;;		None
 19107 ;; Auto vars:     Size  Location     Type
 19108 ;;		None
 19109 ;; Return value:  Size  Location     Type
 19110 ;;                  1    wreg      void 
 19111 ;; Registers used:
 19112 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19113 ;; Tracked objects:
 19114 ;;		On entry : 0/0
 19115 ;;		On exit  : 0/0
 19116 ;;		Unchanged: 0/0
 19117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19118 ;;      Params:         0       0       0       0       0       0       0       0       0
 19119 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19120 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19121 ;;      Totals:         0       0       0       0       0       0       0       0       0
 19122 ;;Total ram usage:        0 bytes
 19123 ;; Hardware stack levels used:    1
 19124 ;; Hardware stack levels required when called:    5
 19125 ;; This function calls:
 19126 ;;		_UARTTransmitText
 19127 ;; This function is called by:
 19128 ;;		_ethernet_rxGetNewFrame
 19129 ;;		_handleStackBackgroundTasks
 19130 ;;		_main
 19131 ;; This function uses a non-reentrant model
 19132 ;;
 19133                           
 19134                           	psect	text63
 19135  006E22                     __ptext63:
 19136                           	opt stack 0
 19137  006E22                     _UART_resetFormat:
 19138                           	opt stack 23
 19139                           
 19140                           ;uart.c: 44: UARTTransmitText("\033[0m");
 19141                           
 19142                           ;incstack = 0
 19143  006E22  0ECB               	movlw	low STR_58
 19144  006E24  0100               	movlb	0	; () banked
 19145  006E26  6F8D               	movwf	UARTTransmitText@str& (0+255),b
 19146  006E28  0E7F               	movlw	high STR_58
 19147  006E2A  6F8E               	movwf	(UARTTransmitText@str+1)& (0+255),b
 19148  006E2C  EC36  F032         	call	_UARTTransmitText	;wreg free
 19149  006E30  0012               	return		;funcret
 19150  006E32                     __end_of_UART_resetFormat:
 19151                           	opt stack 0
 19152                           tblptru	equ	0xFF8
 19153                           tblptrh	equ	0xFF7
 19154                           tblptrl	equ	0xFF6
 19155                           tablat	equ	0xFF5
 19156                           prodh	equ	0xFF4
 19157                           prodl	equ	0xFF3
 19158                           intcon	equ	0xFF2
 19159                           intcon3	equ	0xFF0
 19160                           indf0	equ	0xFEF
 19161                           postinc0	equ	0xFEE
 19162                           plusw0	equ	0xFEB
 19163                           fsr0h	equ	0xFEA
 19164                           fsr0l	equ	0xFE9
 19165                           wreg	equ	0xFE8
 19166                           indf1	equ	0xFE7
 19167                           postinc1	equ	0xFE6
 19168                           postdec1	equ	0xFE5
 19169                           plusw1	equ	0xFE3
 19170                           fsr1h	equ	0xFE2
 19171                           fsr1l	equ	0xFE1
 19172                           indf2	equ	0xFDF
 19173                           postinc2	equ	0xFDE
 19174                           postdec2	equ	0xFDD
 19175                           plusw2	equ	0xFDB
 19176                           fsr2h	equ	0xFDA
 19177                           fsr2l	equ	0xFD9
 19178                           status	equ	0xFD8
 19179                           
 19180 ;; *************** function _UARTTransmitText *****************
 19181 ;; Defined at:
 19182 ;;		line 36 in file "src/system/uart.c"
 19183 ;; Parameters:    Size  Location     Type
 19184 ;;  str             2   45[BANK0 ] PTR const unsigned char 
 19185 ;;		 -> STR_125(2), STR_124(5), STR_123(2), STR_122(4), 
 19186 ;;		 -> STR_121(8), STR_120(26), STR_119(15), STR_118(28), 
 19187 ;;		 -> STR_117(6), STR_116(6), STR_115(6), STR_114(6), 
 19188 ;;		 -> STR_113(6), STR_112(6), STR_111(6), STR_110(6), 
 19189 ;;		 -> STR_109(5), STR_108(2), STR_107(7), STR_106(5), 
 19190 ;;		 -> STR_105(2), STR_74(3), arpEntryToString@string(50), ipAdressToString@address(20), 
 19191 ;;		 -> STR_69(18), STR_68(4), STR_67(5), macToString@address(20), 
 19192 ;;		 -> intToString@number(10), STR_66(50), STR_65(11), STR_64(13), 
 19193 ;;		 -> STR_63(12), STR_62(12), STR_61(12), STR_60(12), 
 19194 ;;		 -> STR_59(12), STR_58(5), STR_57(19), STR_56(13), 
 19195 ;;		 -> STR_55(8), STR_54(3), STR_53(12), STR_52(4), 
 19196 ;;		 -> STR_51(9), STR_50(2), STR_49(12), STR_48(26), 
 19197 ;;		 -> STR_47(50), STR_46(4), STR_45(2), STR_29(3), 
 19198 ;;		 -> STR_28(37), STR_27(37), STR_26(3), STR_25(27), 
 19199 ;;		 -> STR_24(3), STR_23(21), STR_22(3), STR_21(3), 
 19200 ;;		 -> STR_20(5), STR_19(3), STR_18(60), STR_17(4), 
 19201 ;;		 -> STR_16(3), STR_15(3), STR_14(5), STR_13(3), 
 19202 ;;		 -> STR_12(3), STR_11(3), STR_10(2), STR_9(2), 
 19203 ;;		 -> STR_8(2), STR_7(2), STR_6(2), STR_5(16), 
 19204 ;;		 -> STR_4(10), STR_3(12), STR_2(2), STR_1(2), 
 19205 ;;		 -> ethernetController_getDeviceName@string(11), 
 19206 ;; Auto vars:     Size  Location     Type
 19207 ;;		None
 19208 ;; Return value:  Size  Location     Type
 19209 ;;                  1    wreg      void 
 19210 ;; Registers used:
 19211 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 19212 ;; Tracked objects:
 19213 ;;		On entry : 0/0
 19214 ;;		On exit  : 0/0
 19215 ;;		Unchanged: 0/0
 19216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19217 ;;      Params:         0       2       0       0       0       0       0       0       0
 19218 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19219 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19220 ;;      Totals:         0       2       0       0       0       0       0       0       0
 19221 ;;Total ram usage:        2 bytes
 19222 ;; Hardware stack levels used:    1
 19223 ;; Hardware stack levels required when called:    4
 19224 ;; This function calls:
 19225 ;;		Nothing
 19226 ;; This function is called by:
 19227 ;;		_ethernet_rxGetNewFrame
 19228 ;;		_handleStackBackgroundTasks
 19229 ;;		_main
 19230 ;;		_printEthernetState
 19231 ;;		_UART_resetFormat
 19232 ;;		_UART_setFormat
 19233 ;;		_tcp_handleNewPacket
 19234 ;;		_tcp_stateMachine
 19235 ;;		_tcp_listen
 19236 ;;		_tcp_sendSYNACK
 19237 ;;		_printArpTable
 19238 ;; This function uses a non-reentrant model
 19239 ;;
 19240                           
 19241                           	psect	text64
 19242  00646C                     __ptext64:
 19243                           	opt stack 0
 19244  00646C                     _UARTTransmitText:
 19245                           	opt stack 25
 19246                           
 19247                           ;uart.c: 37: while (*str) {
 19248                           
 19249                           ;incstack = 0
 19250  00646C  D016               	goto	u11700
 19251  00646E                     
 19252                           ;uart.c: 38: TXREG1 = *str++;
 19253  00646E  C08D  FFF6         	movff	UARTTransmitText@str,tblptrl
 19254  006472  C08E  FFF7         	movff	UARTTransmitText@str+1,tblptrh
 19255  006476  6AF8               	clrf	tblptru,c
 19256  006478  0E07               	movlw	(high __ramtop+-1)
 19257  00647A  64F7               	cpfsgt	tblptrh,c
 19258  00647C  D003               	bra	u11697
 19259  00647E  0008               	tblrd		*
 19260  006480  50F5               	movf	tablat,w,c
 19261  006482  D005               	bra	u11690
 19262  006484                     u11697:
 19263  006484  CFF6 FFE9          	movff	tblptrl,fsr0l
 19264  006488  CFF7 FFEA          	movff	tblptrh,fsr0h
 19265  00648C  50EF               	movf	indf0,w,c
 19266  00648E                     u11690:
 19267  00648E  6EAD               	movwf	4013,c	;volatile
 19268  006490  0100               	movlb	0	; () banked
 19269  006492  4B8D               	infsnz	UARTTransmitText@str& (0+255),f,b
 19270  006494  2B8E               	incf	(UARTTransmitText@str+1)& (0+255),f,b
 19271  006496                     
 19272                           ; BSR set to: 0
 19273  006496  A2AC               	btfss	4012,1,c	;volatile
 19274  006498  D7FE               	goto	l797
 19275  00649A                     u11700:
 19276  00649A  C08D  FFF6         	movff	UARTTransmitText@str,tblptrl
 19277  00649E  C08E  FFF7         	movff	UARTTransmitText@str+1,tblptrh
 19278  0064A2  6AF8               	clrf	tblptru,c
 19279  0064A4  0E07               	movlw	(high __ramtop+-1)
 19280  0064A6  64F7               	cpfsgt	tblptrh,c
 19281  0064A8  D003               	bra	u11717
 19282  0064AA  0008               	tblrd		*
 19283  0064AC  50F5               	movf	tablat,w,c
 19284  0064AE  D005               	bra	u11710
 19285  0064B0                     u11717:
 19286  0064B0  CFF6 FFE9          	movff	tblptrl,fsr0l
 19287  0064B4  CFF7 FFEA          	movff	tblptrh,fsr0h
 19288  0064B8  50EF               	movf	indf0,w,c
 19289  0064BA                     u11710:
 19290  0064BA  0900               	iorlw	0
 19291  0064BC  B4D8               	btfsc	status,2,c
 19292  0064BE  0012               	return	
 19293  0064C0  D7D6               	goto	l795
 19294  0064C2                     __end_of_UARTTransmitText:
 19295                           	opt stack 0
 19296                           tblptru	equ	0xFF8
 19297                           tblptrh	equ	0xFF7
 19298                           tblptrl	equ	0xFF6
 19299                           tablat	equ	0xFF5
 19300                           prodh	equ	0xFF4
 19301                           prodl	equ	0xFF3
 19302                           intcon	equ	0xFF2
 19303                           intcon3	equ	0xFF0
 19304                           indf0	equ	0xFEF
 19305                           postinc0	equ	0xFEE
 19306                           plusw0	equ	0xFEB
 19307                           fsr0h	equ	0xFEA
 19308                           fsr0l	equ	0xFE9
 19309                           wreg	equ	0xFE8
 19310                           indf1	equ	0xFE7
 19311                           postinc1	equ	0xFE6
 19312                           postdec1	equ	0xFE5
 19313                           plusw1	equ	0xFE3
 19314                           fsr1h	equ	0xFE2
 19315                           fsr1l	equ	0xFE1
 19316                           indf2	equ	0xFDF
 19317                           postinc2	equ	0xFDE
 19318                           postdec2	equ	0xFDD
 19319                           plusw2	equ	0xFDB
 19320                           fsr2h	equ	0xFDA
 19321                           fsr2l	equ	0xFD9
 19322                           status	equ	0xFD8
 19323                           
 19324 ;; *************** function _ethernetController_updateLinkStatus *****************
 19325 ;; Defined at:
 19326 ;;		line 394 in file "src/enc424j600/ENC424J600.c"
 19327 ;; Parameters:    Size  Location     Type
 19328 ;;  state           2   32[BANK0 ] PTR struct ethernetConne
 19329 ;;		 -> stack(124), 
 19330 ;; Auto vars:     Size  Location     Type
 19331 ;;  temp16          2   35[BANK0 ] unsigned int 
 19332 ;;  temp            1   34[BANK0 ] unsigned char 
 19333 ;; Return value:  Size  Location     Type
 19334 ;;                  1    wreg      void 
 19335 ;; Registers used:
 19336 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19337 ;; Tracked objects:
 19338 ;;		On entry : 0/0
 19339 ;;		On exit  : 0/0
 19340 ;;		Unchanged: 0/0
 19341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19342 ;;      Params:         0       2       0       0       0       0       0       0       0
 19343 ;;      Locals:         0       3       0       0       0       0       0       0       0
 19344 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19345 ;;      Totals:         0       5       0       0       0       0       0       0       0
 19346 ;;Total ram usage:        5 bytes
 19347 ;; Hardware stack levels used:    1
 19348 ;; Hardware stack levels required when called:    8
 19349 ;; This function calls:
 19350 ;;		_enc424j600_readControlRegisterUnbanked
 19351 ;;		_enc424j600_readPHYRegister
 19352 ;; This function is called by:
 19353 ;;		_handleStackBackgroundTasks
 19354 ;; This function uses a non-reentrant model
 19355 ;;
 19356                           
 19357                           	psect	text65
 19358  005C0C                     __ptext65:
 19359                           	opt stack 0
 19360  005C0C                     _ethernetController_updateLinkStatus:
 19361                           	opt stack 21
 19362                           
 19363                           ;ENC424J600.c: 395: uint8_t temp;
 19364                           ;ENC424J600.c: 396: uint16_t temp16;
 19365                           ;ENC424J600.c: 397: enc424j600_readControlRegisterUnbanked(0x1B, &temp);
 19366                           
 19367                           ;incstack = 0
 19368  005C0C  0E82               	movlw	low ethernetController_updateLinkStatus@temp
 19369  005C0E  0100               	movlb	0	; () banked
 19370  005C10  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 19371  005C12  0E00               	movlw	high ethernetController_updateLinkStatus@temp
 19372  005C14  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 19373  005C16  0E1B               	movlw	27
 19374  005C18  ECD7  F034         	call	_enc424j600_readControlRegisterUnbanked
 19375                           
 19376                           ;ENC424J600.c: 398: if (temp & 0x01) {
 19377  005C1C  0100               	movlb	0	; () banked
 19378  005C1E  A182               	btfss	ethernetController_updateLinkStatus@temp& (0+255),0,b
 19379  005C20  D006               	goto	l190
 19380                           
 19381                           ; BSR set to: 0
 19382                           ;ENC424J600.c: 399: state->link = LINK_ESTABLISHED;
 19383  005C22  C080  FFD9         	movff	ethernetController_updateLinkStatus@state,fsr2l
 19384  005C26  C081  FFDA         	movff	ethernetController_updateLinkStatus@state+1,fsr2h
 19385  005C2A  0E01               	movlw	1
 19386  005C2C  D005               	goto	L21
 19387  005C2E                     l190:
 19388                           
 19389                           ; BSR set to: 0
 19390                           ;ENC424J600.c: 401: state->link = NO_LINK;
 19391                           
 19392                           ; BSR set to: 0
 19393  005C2E  C080  FFD9         	movff	ethernetController_updateLinkStatus@state,fsr2l
 19394  005C32  C081  FFDA         	movff	ethernetController_updateLinkStatus@state+1,fsr2h
 19395  005C36  0E00               	movlw	0
 19396  005C38                     L21:
 19397  005C38  6EDF               	movwf	indf2,c
 19398                           
 19399                           ; BSR set to: 0
 19400                           ;ENC424J600.c: 402: }
 19401                           ;ENC424J600.c: 404: enc424j600_readPHYRegister(0x1F, &temp16);
 19402                           
 19403                           ; BSR set to: 0
 19404  005C3A  0E83               	movlw	low ethernetController_updateLinkStatus@temp16
 19405  005C3C  6F6E               	movwf	enc424j600_readPHYRegister@data& (0+255),b
 19406  005C3E  0E00               	movlw	high ethernetController_updateLinkStatus@temp16
 19407  005C40  6F6F               	movwf	(enc424j600_readPHYRegister@data+1)& (0+255),b
 19408  005C42  0E1F               	movlw	31
 19409  005C44  EC0C  F024         	call	_enc424j600_readPHYRegister
 19410                           
 19411                           ;ENC424J600.c: 406: if (temp16 & (1 << 3)) {
 19412  005C48  0100               	movlb	0	; () banked
 19413  005C4A  A783               	btfss	ethernetController_updateLinkStatus@temp16& (0+255),3,b
 19414  005C4C  D008               	goto	l192
 19415                           
 19416                           ; BSR set to: 0
 19417                           ;ENC424J600.c: 407: state->speed = HUNDRED_MBIT;
 19418  005C4E  EE20 F001          	lfsr	2,1
 19419  005C52  5180               	movf	ethernetController_updateLinkStatus@state& (0+255),w,b
 19420  005C54  26D9               	addwf	fsr2l,f,c
 19421  005C56  5181               	movf	(ethernetController_updateLinkStatus@state+1)& (0+255),w,b
 19422  005C58  22DA               	addwfc	fsr2h,f,c
 19423  005C5A  0E01               	movlw	1
 19424  005C5C  D007               	goto	L22
 19425  005C5E                     l192:
 19426                           
 19427                           ; BSR set to: 0
 19428                           ;ENC424J600.c: 409: state->speed = TEN_MBIT;
 19429                           
 19430                           ; BSR set to: 0
 19431  005C5E  EE20 F001          	lfsr	2,1
 19432  005C62  5180               	movf	ethernetController_updateLinkStatus@state& (0+255),w,b
 19433  005C64  26D9               	addwf	fsr2l,f,c
 19434  005C66  5181               	movf	(ethernetController_updateLinkStatus@state+1)& (0+255),w,b
 19435  005C68  22DA               	addwfc	fsr2h,f,c
 19436  005C6A  0E00               	movlw	0
 19437  005C6C                     L22:
 19438  005C6C  6EDF               	movwf	indf2,c
 19439                           
 19440                           ; BSR set to: 0
 19441                           ;ENC424J600.c: 410: }
 19442                           ;ENC424J600.c: 412: if (temp16 & (1 << 4)) {
 19443                           
 19444                           ; BSR set to: 0
 19445  005C6E  A983               	btfss	ethernetController_updateLinkStatus@temp16& (0+255),4,b
 19446  005C70  D009               	goto	l194
 19447                           
 19448                           ; BSR set to: 0
 19449                           ;ENC424J600.c: 413: state->duplex = FULL_DUPLEX;
 19450  005C72  EE20 F002          	lfsr	2,2
 19451  005C76  5180               	movf	ethernetController_updateLinkStatus@state& (0+255),w,b
 19452  005C78  26D9               	addwf	fsr2l,f,c
 19453  005C7A  5181               	movf	(ethernetController_updateLinkStatus@state+1)& (0+255),w,b
 19454  005C7C  22DA               	addwfc	fsr2h,f,c
 19455  005C7E  0E01               	movlw	1
 19456  005C80  6EDF               	movwf	indf2,c
 19457                           
 19458                           ;ENC424J600.c: 414: } else {
 19459  005C82  0012               	return	
 19460  005C84                     l194:
 19461                           
 19462                           ; BSR set to: 0
 19463                           ;ENC424J600.c: 415: state->duplex = HALF_DUPLEX;
 19464                           
 19465                           ; BSR set to: 0
 19466  005C84  EE20 F002          	lfsr	2,2
 19467  005C88  5180               	movf	ethernetController_updateLinkStatus@state& (0+255),w,b
 19468  005C8A  26D9               	addwf	fsr2l,f,c
 19469  005C8C  5181               	movf	(ethernetController_updateLinkStatus@state+1)& (0+255),w,b
 19470  005C8E  22DA               	addwfc	fsr2h,f,c
 19471  005C90  0E00               	movlw	0
 19472  005C92  6EDF               	movwf	indf2,c
 19473  005C94  0012               	return	
 19474  005C96                     __end_of_ethernetController_updateLinkStatus:
 19475                           	opt stack 0
 19476                           tblptru	equ	0xFF8
 19477                           tblptrh	equ	0xFF7
 19478                           tblptrl	equ	0xFF6
 19479                           tablat	equ	0xFF5
 19480                           prodh	equ	0xFF4
 19481                           prodl	equ	0xFF3
 19482                           intcon	equ	0xFF2
 19483                           intcon3	equ	0xFF0
 19484                           indf0	equ	0xFEF
 19485                           postinc0	equ	0xFEE
 19486                           plusw0	equ	0xFEB
 19487                           fsr0h	equ	0xFEA
 19488                           fsr0l	equ	0xFE9
 19489                           wreg	equ	0xFE8
 19490                           indf1	equ	0xFE7
 19491                           postinc1	equ	0xFE6
 19492                           postdec1	equ	0xFE5
 19493                           plusw1	equ	0xFE3
 19494                           fsr1h	equ	0xFE2
 19495                           fsr1l	equ	0xFE1
 19496                           indf2	equ	0xFDF
 19497                           postinc2	equ	0xFDE
 19498                           postdec2	equ	0xFDD
 19499                           plusw2	equ	0xFDB
 19500                           fsr2h	equ	0xFDA
 19501                           fsr2l	equ	0xFD9
 19502                           status	equ	0xFD8
 19503                           
 19504 ;; *************** function _enc424j600_readPHYRegister *****************
 19505 ;; Defined at:
 19506 ;;		line 538 in file "src/enc424j600/ENC424J600.c"
 19507 ;; Parameters:    Size  Location     Type
 19508 ;;  addr            1    wreg     unsigned char 
 19509 ;;  data            2   14[BANK0 ] PTR unsigned int 
 19510 ;;		 -> ethernetController_updateLinkStatus@temp16(2), 
 19511 ;; Auto vars:     Size  Location     Type
 19512 ;;  addr            1   22[BANK0 ] unsigned char 
 19513 ;;  timeoutCount    4   25[BANK0 ] unsigned long 
 19514 ;;  temp            1   31[BANK0 ] unsigned char 
 19515 ;;  highByte        1   30[BANK0 ] unsigned char 
 19516 ;;  lowByte         1   29[BANK0 ] unsigned char 
 19517 ;;  unusedBits      1   24[BANK0 ] unsigned char 
 19518 ;;  PHYaddress      1   23[BANK0 ] unsigned char 
 19519 ;; Return value:  Size  Location     Type
 19520 ;;                  1    wreg      void 
 19521 ;; Registers used:
 19522 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19523 ;; Tracked objects:
 19524 ;;		On entry : 0/0
 19525 ;;		On exit  : 0/0
 19526 ;;		Unchanged: 0/0
 19527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19528 ;;      Params:         0       2       0       0       0       0       0       0       0
 19529 ;;      Locals:         0      10       0       0       0       0       0       0       0
 19530 ;;      Temps:          0       6       0       0       0       0       0       0       0
 19531 ;;      Totals:         0      18       0       0       0       0       0       0       0
 19532 ;;Total ram usage:       18 bytes
 19533 ;; Hardware stack levels used:    1
 19534 ;; Hardware stack levels required when called:    7
 19535 ;; This function calls:
 19536 ;;		_enc424j600_readControlRegisterUnbanked
 19537 ;;		_enc424j600_writeControlRegisterUnbanked
 19538 ;; This function is called by:
 19539 ;;		_ethernetController_updateLinkStatus
 19540 ;; This function uses a non-reentrant model
 19541 ;;
 19542                           
 19543                           	psect	text66
 19544  004818                     __ptext66:
 19545                           	opt stack 0
 19546  004818                     _enc424j600_readPHYRegister:
 19547                           	opt stack 21
 19548                           
 19549                           ; BSR set to: 0
 19550                           ;incstack = 0
 19551                           ;enc424j600_readPHYRegister@addr stored from wreg
 19552  004818  0100               	movlb	0	; () banked
 19553  00481A  6F76               	movwf	enc424j600_readPHYRegister@addr& (0+255),b
 19554                           
 19555                           ;ENC424J600.c: 540: uint8_t PHYaddress = addr & 0x1F;
 19556  00481C  0100               	movlb	0	; () banked
 19557  00481E  5176               	movf	enc424j600_readPHYRegister@addr& (0+255),w,b
 19558  004820  0B1F               	andlw	31
 19559  004822  6F77               	movwf	enc424j600_readPHYRegister@PHYaddress& (0+255),b
 19560                           
 19561                           ; BSR set to: 0
 19562                           ;ENC424J600.c: 541: uint8_t unusedBits = 0x01;
 19563  004824  0E01               	movlw	1
 19564  004826  6F78               	movwf	enc424j600_readPHYRegister@unusedBits& (0+255),b
 19565                           
 19566                           ; BSR set to: 0
 19567                           ;ENC424J600.c: 542: uint8_t temp;
 19568                           ;ENC424J600.c: 543: uint8_t lowByte;
 19569                           ;ENC424J600.c: 544: uint8_t highByte;
 19570                           ;ENC424J600.c: 545: uint32_t timeoutCounter = 0;
 19571  004828  0E00               	movlw	0
 19572  00482A  6F79               	movwf	enc424j600_readPHYRegister@timeoutCounter& (0+255),b
 19573  00482C  0E00               	movlw	0
 19574  00482E  6F7A               	movwf	(enc424j600_readPHYRegister@timeoutCounter+1)& (0+255),b
 19575  004830  0E00               	movlw	0
 19576  004832  6F7B               	movwf	(enc424j600_readPHYRegister@timeoutCounter+2)& (0+255),b
 19577  004834  0E00               	movlw	0
 19578  004836  6F7C               	movwf	(enc424j600_readPHYRegister@timeoutCounter+3)& (0+255),b
 19579                           
 19580                           ; BSR set to: 0
 19581                           ;ENC424J600.c: 547: enc424j600_writeControlRegisterUnbanked(0x14 + 0x40, &PHYaddress);
 19582  004838  0E77               	movlw	low enc424j600_readPHYRegister@PHYaddress
 19583  00483A  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 19584  00483C  0E00               	movlw	high enc424j600_readPHYRegister@PHYaddress
 19585  00483E  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 19586  004840  0E54               	movlw	84
 19587  004842  ECF2  F034         	call	_enc424j600_writeControlRegisterUnbanked
 19588                           
 19589                           ;ENC424J600.c: 548: enc424j600_writeControlRegisterUnbanked(0x15 + 0x40, &unusedBits);
 19590  004846  0E78               	movlw	low enc424j600_readPHYRegister@unusedBits
 19591  004848  0100               	movlb	0	; () banked
 19592  00484A  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 19593  00484C  0E00               	movlw	high enc424j600_readPHYRegister@unusedBits
 19594  00484E  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 19595  004850  0E55               	movlw	85
 19596  004852  ECF2  F034         	call	_enc424j600_writeControlRegisterUnbanked
 19597                           
 19598                           ;ENC424J600.c: 551: enc424j600_readControlRegisterUnbanked(0x12 + 0x40, &temp);
 19599  004856  0E7F               	movlw	low enc424j600_readPHYRegister@temp
 19600  004858  0100               	movlb	0	; () banked
 19601  00485A  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 19602  00485C  0E00               	movlw	high enc424j600_readPHYRegister@temp
 19603  00485E  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 19604  004860  0E52               	movlw	82
 19605  004862  ECD7  F034         	call	_enc424j600_readControlRegisterUnbanked
 19606                           
 19607                           ;ENC424J600.c: 552: temp |= 0x01;
 19608  004866  0100               	movlb	0	; () banked
 19609  004868  817F               	bsf	enc424j600_readPHYRegister@temp& (0+255),0,b
 19610                           
 19611                           ; BSR set to: 0
 19612                           ;ENC424J600.c: 553: enc424j600_writeControlRegisterUnbanked(0x12 + 0x40, &temp);
 19613  00486A  0E7F               	movlw	low enc424j600_readPHYRegister@temp
 19614  00486C  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 19615  00486E  0E00               	movlw	high enc424j600_readPHYRegister@temp
 19616  004870  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 19617  004872  0E52               	movlw	82
 19618  004874  ECF2  F034         	call	_enc424j600_writeControlRegisterUnbanked
 19619                           
 19620                           ;ENC424J600.c: 555: _delay((unsigned long)((26)*(32000000UL/4000000.0)));
 19621  004878  0E45               	movlw	69
 19622  00487A                     u15847:
 19623  00487A  2EE8               	decfsz	wreg,f,c
 19624  00487C  D7FE               	bra	u15847
 19625  00487E  F000               	nop	
 19626  004880                     
 19627                           ;ENC424J600.c: 558: enc424j600_readControlRegisterUnbanked(0x0A + 0x60, &temp);
 19628  004880  0E7F               	movlw	low enc424j600_readPHYRegister@temp
 19629  004882  0100               	movlb	0	; () banked
 19630  004884  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 19631  004886  0E00               	movlw	high enc424j600_readPHYRegister@temp
 19632  004888  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 19633  00488A  0E6A               	movlw	106
 19634  00488C  ECD7  F034         	call	_enc424j600_readControlRegisterUnbanked
 19635                           
 19636                           ;ENC424J600.c: 559: timeoutCounter++;
 19637  004890  0E01               	movlw	1
 19638  004892  0100               	movlb	0	; () banked
 19639  004894  2779               	addwf	enc424j600_readPHYRegister@timeoutCounter& (0+255),f,b
 19640  004896  0E00               	movlw	0
 19641  004898  237A               	addwfc	(enc424j600_readPHYRegister@timeoutCounter+1)& (0+255),f,b
 19642  00489A  237B               	addwfc	(enc424j600_readPHYRegister@timeoutCounter+2)& (0+255),f,b
 19643  00489C  237C               	addwfc	(enc424j600_readPHYRegister@timeoutCounter+3)& (0+255),f,b
 19644                           
 19645                           ; BSR set to: 0
 19646                           ;ENC424J600.c: 560: } while ((temp & 0x01) && (timeoutCounter < 0xfff));
 19647  00489E  A17F               	btfss	enc424j600_readPHYRegister@temp& (0+255),0,b
 19648  0048A0  D008               	goto	u14150
 19649                           
 19650                           ; BSR set to: 0
 19651  0048A2  517C               	movf	(enc424j600_readPHYRegister@timeoutCounter+3)& (0+255),w,b
 19652  0048A4  117B               	iorwf	(enc424j600_readPHYRegister@timeoutCounter+2)& (0+255),w,b
 19653  0048A6  E105               	bnz	l11584
 19654  0048A8  2979               	incf	enc424j600_readPHYRegister@timeoutCounter& (0+255),w,b
 19655  0048AA  0E0F               	movlw	15
 19656  0048AC  597A               	subwfb	(enc424j600_readPHYRegister@timeoutCounter+1)& (0+255),w,b
 19657  0048AE  A0D8               	btfss	status,0,c
 19658  0048B0  D7E7               	goto	l253
 19659  0048B2                     u14150:
 19660  0048B2                     l11584:
 19661                           
 19662                           ; BSR set to: 0
 19663                           ;ENC424J600.c: 561: if (timeoutCounter >= 0xfff)
 19664  0048B2  517C               	movf	(enc424j600_readPHYRegister@timeoutCounter+3)& (0+255),w,b
 19665  0048B4  117B               	iorwf	(enc424j600_readPHYRegister@timeoutCounter+2)& (0+255),w,b
 19666  0048B6  E140               	bnz	l258
 19667  0048B8  2979               	incf	enc424j600_readPHYRegister@timeoutCounter& (0+255),w,b
 19668  0048BA  0E0F               	movlw	15
 19669  0048BC  597A               	subwfb	(enc424j600_readPHYRegister@timeoutCounter+1)& (0+255),w,b
 19670  0048BE  B0D8               	btfsc	status,0,c
 19671  0048C0  0012               	return	
 19672                           
 19673                           ; BSR set to: 0
 19674                           ;ENC424J600.c: 565: enc424j600_readControlRegisterUnbanked(0x12 + 0x40, &temp);
 19675                           
 19676                           ; BSR set to: 0
 19677                           
 19678                           ; BSR set to: 0
 19679                           ;ENC424J600.c: 562: return;
 19680  0048C2  0E7F               	movlw	low enc424j600_readPHYRegister@temp
 19681  0048C4  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 19682  0048C6  0E00               	movlw	high enc424j600_readPHYRegister@temp
 19683  0048C8  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 19684  0048CA  0E52               	movlw	82
 19685  0048CC  ECD7  F034         	call	_enc424j600_readControlRegisterUnbanked
 19686                           
 19687                           ;ENC424J600.c: 566: temp &= ~0x01;
 19688  0048D0  0100               	movlb	0	; () banked
 19689  0048D2  917F               	bcf	enc424j600_readPHYRegister@temp& (0+255),0,b
 19690                           
 19691                           ; BSR set to: 0
 19692                           ;ENC424J600.c: 567: enc424j600_writeControlRegisterUnbanked(0x12 + 0x40, &temp);
 19693  0048D4  0E7F               	movlw	low enc424j600_readPHYRegister@temp
 19694  0048D6  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 19695  0048D8  0E00               	movlw	high enc424j600_readPHYRegister@temp
 19696  0048DA  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 19697  0048DC  0E52               	movlw	82
 19698  0048DE  ECF2  F034         	call	_enc424j600_writeControlRegisterUnbanked
 19699                           
 19700                           ;ENC424J600.c: 570: enc424j600_readControlRegisterUnbanked(0x08 + 0x60, &lowByte);
 19701  0048E2  0E7D               	movlw	low enc424j600_readPHYRegister@lowByte
 19702  0048E4  0100               	movlb	0	; () banked
 19703  0048E6  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 19704  0048E8  0E00               	movlw	high enc424j600_readPHYRegister@lowByte
 19705  0048EA  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 19706  0048EC  0E68               	movlw	104
 19707  0048EE  ECD7  F034         	call	_enc424j600_readControlRegisterUnbanked
 19708                           
 19709                           ;ENC424J600.c: 571: enc424j600_readControlRegisterUnbanked(0x09 + 0x60, &highByte);
 19710  0048F2  0E7E               	movlw	low enc424j600_readPHYRegister@highByte
 19711  0048F4  0100               	movlb	0	; () banked
 19712  0048F6  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 19713  0048F8  0E00               	movlw	high enc424j600_readPHYRegister@highByte
 19714  0048FA  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 19715  0048FC  0E69               	movlw	105
 19716  0048FE  ECD7  F034         	call	_enc424j600_readControlRegisterUnbanked
 19717                           
 19718                           ;ENC424J600.c: 572: *data = (lowByte | ((highByte << 8)&0xff00));
 19719  004902  0E00               	movlw	0
 19720  004904  0100               	movlb	0	; () banked
 19721  004906  6F70               	movwf	??_enc424j600_readPHYRegister& (0+255),b
 19722  004908  0EFF               	movlw	255
 19723  00490A  6F71               	movwf	(??_enc424j600_readPHYRegister+1)& (0+255),b
 19724  00490C  517E               	movf	enc424j600_readPHYRegister@highByte& (0+255),w,b
 19725  00490E  6F73               	movwf	(??_enc424j600_readPHYRegister+3)& (0+255),b
 19726  004910  6B72               	clrf	(??_enc424j600_readPHYRegister+2)& (0+255),b
 19727  004912  5170               	movf	??_enc424j600_readPHYRegister& (0+255),w,b
 19728  004914  1772               	andwf	(??_enc424j600_readPHYRegister+2)& (0+255),f,b
 19729  004916  5171               	movf	(??_enc424j600_readPHYRegister+1)& (0+255),w,b
 19730  004918  1773               	andwf	(??_enc424j600_readPHYRegister+3)& (0+255),f,b
 19731  00491A  517D               	movf	enc424j600_readPHYRegister@lowByte& (0+255),w,b
 19732  00491C  6F74               	movwf	(??_enc424j600_readPHYRegister+4)& (0+255),b
 19733  00491E  6B75               	clrf	(??_enc424j600_readPHYRegister+5)& (0+255),b
 19734  004920  5172               	movf	(??_enc424j600_readPHYRegister+2)& (0+255),w,b
 19735  004922  1374               	iorwf	(??_enc424j600_readPHYRegister+4)& (0+255),f,b
 19736  004924  5173               	movf	(??_enc424j600_readPHYRegister+3)& (0+255),w,b
 19737  004926  1375               	iorwf	(??_enc424j600_readPHYRegister+5)& (0+255),f,b
 19738  004928  C06E  FFD9         	movff	enc424j600_readPHYRegister@data,fsr2l
 19739  00492C  C06F  FFDA         	movff	enc424j600_readPHYRegister@data+1,fsr2h
 19740  004930  C074  FFDE         	movff	??_enc424j600_readPHYRegister+4,postinc2
 19741  004934  C075  FFDD         	movff	??_enc424j600_readPHYRegister+5,postdec2
 19742  004938                     l258:
 19743                           
 19744                           ; BSR set to: 0
 19745  004938  0012               	return		;funcret
 19746  00493A                     __end_of_enc424j600_readPHYRegister:
 19747                           	opt stack 0
 19748                           tblptru	equ	0xFF8
 19749                           tblptrh	equ	0xFF7
 19750                           tblptrl	equ	0xFF6
 19751                           tablat	equ	0xFF5
 19752                           prodh	equ	0xFF4
 19753                           prodl	equ	0xFF3
 19754                           intcon	equ	0xFF2
 19755                           intcon3	equ	0xFF0
 19756                           indf0	equ	0xFEF
 19757                           postinc0	equ	0xFEE
 19758                           plusw0	equ	0xFEB
 19759                           fsr0h	equ	0xFEA
 19760                           fsr0l	equ	0xFE9
 19761                           wreg	equ	0xFE8
 19762                           indf1	equ	0xFE7
 19763                           postinc1	equ	0xFE6
 19764                           postdec1	equ	0xFE5
 19765                           plusw1	equ	0xFE3
 19766                           fsr1h	equ	0xFE2
 19767                           fsr1l	equ	0xFE1
 19768                           indf2	equ	0xFDF
 19769                           postinc2	equ	0xFDE
 19770                           postdec2	equ	0xFDD
 19771                           plusw2	equ	0xFDB
 19772                           fsr2h	equ	0xFDA
 19773                           fsr2l	equ	0xFD9
 19774                           status	equ	0xFD8
 19775                           
 19776 ;; *************** function _ethernetController_setLEDConfig *****************
 19777 ;; Defined at:
 19778 ;;		line 419 in file "src/enc424j600/ENC424J600.c"
 19779 ;; Parameters:    Size  Location     Type
 19780 ;;  LED             1    wreg     enum E5575
 19781 ;;  conf            1   14[BANK0 ] enum E5579
 19782 ;; Auto vars:     Size  Location     Type
 19783 ;;  LED             1   15[BANK0 ] enum E5575
 19784 ;;  data            1   16[BANK0 ] unsigned char 
 19785 ;; Return value:  Size  Location     Type
 19786 ;;                  1    wreg      void 
 19787 ;; Registers used:
 19788 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19789 ;; Tracked objects:
 19790 ;;		On entry : 0/0
 19791 ;;		On exit  : 0/0
 19792 ;;		Unchanged: 0/0
 19793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19794 ;;      Params:         0       1       0       0       0       0       0       0       0
 19795 ;;      Locals:         0       2       0       0       0       0       0       0       0
 19796 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19797 ;;      Totals:         0       3       0       0       0       0       0       0       0
 19798 ;;Total ram usage:        3 bytes
 19799 ;; Hardware stack levels used:    1
 19800 ;; Hardware stack levels required when called:    7
 19801 ;; This function calls:
 19802 ;;		_enc424j600_readControlRegisterUnbanked
 19803 ;;		_enc424j600_writeControlRegisterUnbanked
 19804 ;; This function is called by:
 19805 ;;		_handleStackBackgroundTasks
 19806 ;;		_main
 19807 ;; This function uses a non-reentrant model
 19808 ;;
 19809                           
 19810                           	psect	text67
 19811  005B7E                     __ptext67:
 19812                           	opt stack 0
 19813  005B7E                     _ethernetController_setLEDConfig:
 19814                           	opt stack 22
 19815                           
 19816                           ; BSR set to: 0
 19817                           ;incstack = 0
 19818                           ;ethernetController_setLEDConfig@LED stored from wreg
 19819  005B7E  0100               	movlb	0	; () banked
 19820  005B80  6F6F               	movwf	ethernetController_setLEDConfig@LED& (0+255),b
 19821                           
 19822                           ;ENC424J600.c: 420: uint8_t data;
 19823                           ;ENC424J600.c: 421: enc424j600_readControlRegisterUnbanked(0x15 + 0x60, &data);
 19824  005B82  0E70               	movlw	low ethernetController_setLEDConfig@data
 19825  005B84  0100               	movlb	0	; () banked
 19826  005B86  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 19827  005B88  0E00               	movlw	high ethernetController_setLEDConfig@data
 19828  005B8A  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 19829  005B8C  0E75               	movlw	117
 19830  005B8E  ECD7  F034         	call	_enc424j600_readControlRegisterUnbanked
 19831                           
 19832                           ;ENC424J600.c: 422: if (LED == LEDB) {
 19833  005B92  0100               	movlb	0	; () banked
 19834  005B94  056F               	decf	ethernetController_setLEDConfig@LED& (0+255),w,b
 19835  005B96  B4D8               	btfsc	status,2,c
 19836  005B98  D00B               	goto	l200
 19837  005B9A  D015               	goto	l199
 19838  005B9C                     
 19839                           ; BSR set to: 0
 19840                           ;ENC424J600.c: 427: data &= ~0x0f;
 19841                           
 19842                           ; BSR set to: 0
 19843                           
 19844                           ;ENC424J600.c: 426: case LED_OFF:
 19845                           
 19846                           ; BSR set to: 0
 19847  005B9C  0EF0               	movlw	240
 19848  005B9E  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 19849                           
 19850                           ; BSR set to: 0
 19851                           ;ENC424J600.c: 428: data |= 0x01;
 19852  005BA0  8170               	bsf	ethernetController_setLEDConfig@data& (0+255),0,b
 19853                           
 19854                           ;ENC424J600.c: 429: break;
 19855  005BA2  D02C               	goto	l211
 19856  005BA4                     
 19857                           ; BSR set to: 0
 19858                           ;ENC424J600.c: 431: data &= ~0x0f;
 19859                           
 19860                           ; BSR set to: 0
 19861  005BA4  0EF0               	movlw	240
 19862  005BA6  D018               	goto	L23
 19863  005BA8                     
 19864                           ; BSR set to: 0
 19865                           ;ENC424J600.c: 434: data &= ~0x0f;
 19866                           
 19867                           ; BSR set to: 0
 19868  005BA8  0EF0               	movlw	240
 19869  005BAA  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 19870                           
 19871                           ;ENC424J600.c: 435: data |= 0x06;
 19872  005BAC  0E06               	movlw	6
 19873  005BAE  D019               	goto	L24
 19874  005BB0                     l200:
 19875                           
 19876                           ; BSR set to: 0
 19877                           
 19878                           ; BSR set to: 0
 19879  005BB0  516E               	movf	ethernetController_setLEDConfig@conf& (0+255),w,b
 19880                           
 19881                           ; Switch size 1, requested type "space"
 19882                           ; Number of cases is 3, Range of values is 0 to 2
 19883                           ; switch strategies available:
 19884                           ; Name         Instructions Cycles
 19885                           ; simple_byte           10     6 (average)
 19886                           ;	Chosen strategy is simple_byte
 19887  005BB2  0A00               	xorlw	0	; case 0
 19888  005BB4  B4D8               	btfsc	status,2,c
 19889  005BB6  D7F6               	goto	l204
 19890  005BB8  0A01               	xorlw	1	; case 1
 19891  005BBA  B4D8               	btfsc	status,2,c
 19892  005BBC  D7EF               	goto	l201
 19893  005BBE  0A03               	xorlw	3	; case 2
 19894  005BC0  B4D8               	btfsc	status,2,c
 19895  005BC2  D7F2               	goto	l205
 19896  005BC4  D7EB               	goto	l201
 19897  005BC6                     l199:
 19898                           
 19899                           ; BSR set to: 0
 19900                           
 19901                           ; BSR set to: 0
 19902  005BC6  516F               	movf	ethernetController_setLEDConfig@LED& (0+255),w,b
 19903  005BC8  B4D8               	btfsc	status,2,c
 19904  005BCA  D00D               	goto	l208
 19905  005BCC  D017               	goto	l211
 19906  005BCE                     
 19907                           ; BSR set to: 0
 19908                           ;ENC424J600.c: 442: data &= ~(0x0f << 4);
 19909                           
 19910                           ; BSR set to: 0
 19911                           
 19912                           ;ENC424J600.c: 441: case LED_OFF:
 19913                           
 19914                           ; BSR set to: 0
 19915  005BCE  0E0F               	movlw	15
 19916  005BD0  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 19917                           
 19918                           ; BSR set to: 0
 19919                           ;ENC424J600.c: 443: data |= (0x01 << 4);
 19920  005BD2  8970               	bsf	ethernetController_setLEDConfig@data& (0+255),4,b
 19921                           
 19922                           ;ENC424J600.c: 444: break;
 19923  005BD4  D013               	goto	l211
 19924  005BD6                     
 19925                           ; BSR set to: 0
 19926                           ;ENC424J600.c: 446: data &= ~(0x0f << 4);
 19927                           
 19928                           ; BSR set to: 0
 19929  005BD6  0E0F               	movlw	15
 19930  005BD8                     L23:
 19931  005BD8  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 19932                           
 19933                           ;ENC424J600.c: 447: break;
 19934  005BDA  D010               	goto	l211
 19935  005BDC                     
 19936                           ; BSR set to: 0
 19937                           ;ENC424J600.c: 449: data &= ~(0x0f << 4);
 19938                           
 19939                           ; BSR set to: 0
 19940  005BDC  0E0F               	movlw	15
 19941  005BDE  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 19942                           
 19943                           ;ENC424J600.c: 450: data |= (0x06 << 4);
 19944  005BE0  0E60               	movlw	96
 19945  005BE2                     L24:
 19946  005BE2  1370               	iorwf	ethernetController_setLEDConfig@data& (0+255),f,b
 19947                           
 19948                           ; BSR set to: 0
 19949                           ;ENC424J600.c: 452: }
 19950                           
 19951                           ;ENC424J600.c: 451: break;
 19952  005BE4  D00B               	goto	l211
 19953  005BE6                     l208:
 19954                           
 19955                           ; BSR set to: 0
 19956                           
 19957                           ; BSR set to: 0
 19958  005BE6  516E               	movf	ethernetController_setLEDConfig@conf& (0+255),w,b
 19959                           
 19960                           ; Switch size 1, requested type "space"
 19961                           ; Number of cases is 3, Range of values is 0 to 2
 19962                           ; switch strategies available:
 19963                           ; Name         Instructions Cycles
 19964                           ; simple_byte           10     6 (average)
 19965                           ;	Chosen strategy is simple_byte
 19966  005BE8  0A00               	xorlw	0	; case 0
 19967  005BEA  B4D8               	btfsc	status,2,c
 19968  005BEC  D7F4               	goto	l212
 19969  005BEE  0A01               	xorlw	1	; case 1
 19970  005BF0  B4D8               	btfsc	status,2,c
 19971  005BF2  D7ED               	goto	l209
 19972  005BF4  0A03               	xorlw	3	; case 2
 19973  005BF6  B4D8               	btfsc	status,2,c
 19974  005BF8  D7F1               	goto	l213
 19975  005BFA  D7E9               	goto	l209
 19976  005BFC                     l211:
 19977                           
 19978                           ; BSR set to: 0
 19979                           ;ENC424J600.c: 453: }
 19980                           ;ENC424J600.c: 454: enc424j600_writeControlRegisterUnbanked(0x15 + 0x60, &data);
 19981                           
 19982                           ; BSR set to: 0
 19983                           
 19984                           ; BSR set to: 0
 19985                           
 19986                           ; BSR set to: 0
 19987  005BFC  0E70               	movlw	low ethernetController_setLEDConfig@data
 19988  005BFE  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 19989  005C00  0E00               	movlw	high ethernetController_setLEDConfig@data
 19990  005C02  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 19991  005C04  0E75               	movlw	117
 19992  005C06  ECF2  F034         	call	_enc424j600_writeControlRegisterUnbanked
 19993  005C0A  0012               	return		;funcret
 19994  005C0C                     __end_of_ethernetController_setLEDConfig:
 19995                           	opt stack 0
 19996                           tblptru	equ	0xFF8
 19997                           tblptrh	equ	0xFF7
 19998                           tblptrl	equ	0xFF6
 19999                           tablat	equ	0xFF5
 20000                           prodh	equ	0xFF4
 20001                           prodl	equ	0xFF3
 20002                           intcon	equ	0xFF2
 20003                           intcon3	equ	0xFF0
 20004                           indf0	equ	0xFEF
 20005                           postinc0	equ	0xFEE
 20006                           plusw0	equ	0xFEB
 20007                           fsr0h	equ	0xFEA
 20008                           fsr0l	equ	0xFE9
 20009                           wreg	equ	0xFE8
 20010                           indf1	equ	0xFE7
 20011                           postinc1	equ	0xFE6
 20012                           postdec1	equ	0xFE5
 20013                           plusw1	equ	0xFE3
 20014                           fsr1h	equ	0xFE2
 20015                           fsr1l	equ	0xFE1
 20016                           indf2	equ	0xFDF
 20017                           postinc2	equ	0xFDE
 20018                           postdec2	equ	0xFDD
 20019                           plusw2	equ	0xFDB
 20020                           fsr2h	equ	0xFDA
 20021                           fsr2l	equ	0xFD9
 20022                           status	equ	0xFD8
 20023                           
 20024 ;; *************** function _ethernetController_pollInterruptFlags *****************
 20025 ;; Defined at:
 20026 ;;		line 312 in file "src/enc424j600/ENC424J600.c"
 20027 ;; Parameters:    Size  Location     Type
 20028 ;;		None
 20029 ;; Auto vars:     Size  Location     Type
 20030 ;;  reg             2   32[BANK0 ] unsigned int 
 20031 ;;  flags           2   30[BANK0 ] struct interruptFlags
 20032 ;; Return value:  Size  Location     Type
 20033 ;;                  2   24[BANK0 ] struct interruptFlags
 20034 ;; Registers used:
 20035 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20036 ;; Tracked objects:
 20037 ;;		On entry : 0/0
 20038 ;;		On exit  : 0/0
 20039 ;;		Unchanged: 0/0
 20040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20041 ;;      Params:         0       2       0       0       0       0       0       0       0
 20042 ;;      Locals:         0       4       0       0       0       0       0       0       0
 20043 ;;      Temps:          0       4       0       0       0       0       0       0       0
 20044 ;;      Totals:         0      10       0       0       0       0       0       0       0
 20045 ;;Total ram usage:       10 bytes
 20046 ;; Hardware stack levels used:    1
 20047 ;; Hardware stack levels required when called:    8
 20048 ;; This function calls:
 20049 ;;		_enc424j600_getInterruptFlags
 20050 ;; This function is called by:
 20051 ;;		_handleStackBackgroundTasks
 20052 ;; This function uses a non-reentrant model
 20053 ;;
 20054                           
 20055                           	psect	text68
 20056  0040A8                     __ptext68:
 20057                           	opt stack 0
 20058  0040A8                     _ethernetController_pollInterruptFlags:
 20059                           	opt stack 21
 20060                           
 20061                           ;ENC424J600.c: 313: interruptFlags_t flags;
 20062                           ;ENC424J600.c: 314: uint16_t reg = enc424j600_getInterruptFlags();
 20063                           
 20064                           ;incstack = 0
 20065  0040A8  EC54  F033         	call	_enc424j600_getInterruptFlags	;wreg free
 20066  0040AC  C06E  F080         	movff	?_enc424j600_getInterruptFlags,ethernetController_pollInterruptFlags@reg
 20067  0040B0  C06F  F081         	movff	?_enc424j600_getInterruptFlags+1,ethernetController_pollInterruptFlags@reg+1
 20068                           
 20069                           ;ENC424J600.c: 315: flags.MODEXIF = (reg & (1 << MODEXIF)) != 0 ? 1u : 0u;
 20070  0040B4  0100               	movlb	0	; () banked
 20071  0040B6  AD81               	btfss	(ethernetController_pollInterruptFlags@reg+1)& (0+255),6,b
 20072  0040B8  D003               	goto	u14620
 20073  0040BA  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 20074  0040BC  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 20075  0040BE  D002               	goto	u14638
 20076  0040C0                     u14620:
 20077  0040C0  0100               	movlb	0	; () banked
 20078  0040C2  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 20079  0040C4                     u14638:
 20080  0040C4  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 20081  0040C6  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 20082  0040C8  0BFE               	andlw	-2
 20083  0040CA  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 20084  0040CC  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 20085                           
 20086                           ; BSR set to: 0
 20087                           ;ENC424J600.c: 316: flags.HASHIF = (reg & (1 << HASHIF)) != 0 ? 1u : 0u;
 20088  0040CE  AB81               	btfss	(ethernetController_pollInterruptFlags@reg+1)& (0+255),5,b
 20089  0040D0  D003               	goto	u14640
 20090  0040D2  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 20091  0040D4  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 20092  0040D6  D002               	goto	u14658
 20093  0040D8                     u14640:
 20094  0040D8  0100               	movlb	0	; () banked
 20095  0040DA  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 20096  0040DC                     u14658:
 20097  0040DC  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 20098  0040DE  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 20099  0040E0  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 20100  0040E2  0BFD               	andlw	-3
 20101  0040E4  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 20102  0040E6  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 20103                           
 20104                           ; BSR set to: 0
 20105                           ;ENC424J600.c: 317: flags.AESIF = (reg & (1 << AESIF)) != 0 ? 1u : 0u;
 20106  0040E8  A981               	btfss	(ethernetController_pollInterruptFlags@reg+1)& (0+255),4,b
 20107  0040EA  D003               	goto	u14660
 20108  0040EC  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 20109  0040EE  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 20110  0040F0  D002               	goto	u14678
 20111  0040F2                     u14660:
 20112  0040F2  0100               	movlb	0	; () banked
 20113  0040F4  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 20114  0040F6                     u14678:
 20115  0040F6  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 20116  0040F8  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 20117  0040FA  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 20118  0040FC  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 20119  0040FE  0BFB               	andlw	-5
 20120  004100  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 20121  004102  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 20122                           
 20123                           ; BSR set to: 0
 20124                           ;ENC424J600.c: 318: flags.LINKIF = (reg & (1 << LINKIF)) != 0 ? 1u : 0u;
 20125  004104  A781               	btfss	(ethernetController_pollInterruptFlags@reg+1)& (0+255),3,b
 20126  004106  D003               	goto	u14680
 20127  004108  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 20128  00410A  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 20129  00410C  D002               	goto	u14698
 20130  00410E                     u14680:
 20131  00410E  0100               	movlb	0	; () banked
 20132  004110  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 20133  004112                     u14698:
 20134  004112  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 20135  004114  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 20136  004116  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 20137  004118  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 20138  00411A  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 20139  00411C  0BF7               	andlw	-9
 20140  00411E  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 20141  004120  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 20142                           
 20143                           ; BSR set to: 0
 20144                           ;ENC424J600.c: 320: flags.PKTIF = (reg & (1 << PKTIF)) != 0 ? 1u : 0u;
 20145  004122  AD80               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),6,b
 20146  004124  D003               	goto	u14700
 20147  004126  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 20148  004128  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 20149  00412A  D002               	goto	u14718
 20150  00412C                     u14700:
 20151  00412C  0100               	movlb	0	; () banked
 20152  00412E  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 20153  004130                     u14718:
 20154  004130  3B7A               	swapf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 20155  004132  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 20156  004134  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 20157  004136  0BEF               	andlw	-17
 20158  004138  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 20159  00413A  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 20160                           
 20161                           ; BSR set to: 0
 20162                           ;ENC424J600.c: 321: flags.DMAIF = (reg & (1 << DMAIF)) != 0 ? 1u : 0u;
 20163  00413C  AB80               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),5,b
 20164  00413E  D003               	goto	u14720
 20165  004140  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 20166  004142  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 20167  004144  D002               	goto	u14738
 20168  004146                     u14720:
 20169  004146  0100               	movlb	0	; () banked
 20170  004148  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 20171  00414A                     u14738:
 20172  00414A  3B7A               	swapf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 20173  00414C  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 20174  00414E  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 20175  004150  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 20176  004152  0BDF               	andlw	-33
 20177  004154  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 20178  004156  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 20179                           
 20180                           ; BSR set to: 0
 20181                           ;ENC424J600.c: 323: flags.TXIF = (reg & (1 << TXIF)) != 0 ? 1u : 0u;
 20182  004158  A89E               	btfss	3998,4,c	;volatile
 20183  00415A  D003               	goto	u14740
 20184  00415C  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 20185  00415E  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 20186  004160  D002               	goto	u14758
 20187  004162                     u14740:
 20188  004162  0100               	movlb	0	; () banked
 20189  004164  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 20190  004166                     u14758:
 20191  004166  0E01               	movlw	1
 20192  004168  6F7B               	movwf	(??_ethernetController_pollInterruptFlags+1)& (0+255),b
 20193  00416A  0E00               	movlw	0
 20194  00416C  6F7C               	movwf	(??_ethernetController_pollInterruptFlags+2)& (0+255),b
 20195  00416E  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 20196  004170  D003               	goto	u14764
 20197  004172                     u14765:
 20198  004172  90D8               	bcf	status,0,c
 20199  004174  377B               	rlcf	(??_ethernetController_pollInterruptFlags+1)& (0+255),f,b
 20200  004176  377C               	rlcf	(??_ethernetController_pollInterruptFlags+2)& (0+255),f,b
 20201  004178                     u14764:
 20202  004178  2F7A               	decfsz	??_ethernetController_pollInterruptFlags& (0+255),f,b
 20203  00417A  D7FB               	goto	u14765
 20204  00417C  0100               	movlb	0	; () banked
 20205  00417E  5180               	movf	ethernetController_pollInterruptFlags@reg& (0+255),w,b
 20206  004180  177B               	andwf	(??_ethernetController_pollInterruptFlags+1)& (0+255),f,b
 20207  004182  5181               	movf	(ethernetController_pollInterruptFlags@reg+1)& (0+255),w,b
 20208  004184  177C               	andwf	(??_ethernetController_pollInterruptFlags+2)& (0+255),f,b
 20209  004186  517B               	movf	(??_ethernetController_pollInterruptFlags+1)& (0+255),w,b
 20210  004188  117C               	iorwf	(??_ethernetController_pollInterruptFlags+2)& (0+255),w,b
 20211  00418A  B4D8               	btfsc	status,2,c
 20212  00418C  D003               	goto	u14770
 20213  00418E  6B7D               	clrf	(??_ethernetController_pollInterruptFlags+3)& (0+255),b
 20214  004190  2B7D               	incf	(??_ethernetController_pollInterruptFlags+3)& (0+255),f,b
 20215  004192  D002               	goto	u14788
 20216  004194                     u14770:
 20217  004194  0100               	movlb	0	; () banked
 20218  004196  6B7D               	clrf	(??_ethernetController_pollInterruptFlags+3)& (0+255),b
 20219  004198                     u14788:
 20220  004198  3B7D               	swapf	(??_ethernetController_pollInterruptFlags+3)& (0+255),f,b
 20221  00419A  477D               	rlncf	(??_ethernetController_pollInterruptFlags+3)& (0+255),f,b
 20222  00419C  477D               	rlncf	(??_ethernetController_pollInterruptFlags+3)& (0+255),f,b
 20223  00419E  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 20224  0041A0  197D               	xorwf	(??_ethernetController_pollInterruptFlags+3)& (0+255),w,b
 20225  0041A2  0BBF               	andlw	-65
 20226  0041A4  197D               	xorwf	(??_ethernetController_pollInterruptFlags+3)& (0+255),w,b
 20227  0041A6  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 20228                           
 20229                           ; BSR set to: 0
 20230                           ;ENC424J600.c: 324: flags.TXABTIF = (reg & (1 << TXABTIF)) != 0 ? 1u : 0u;
 20231  0041A8  A580               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),2,b
 20232  0041AA  D003               	goto	u14790
 20233  0041AC  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 20234  0041AE  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 20235  0041B0  D002               	goto	u14808
 20236  0041B2                     u14790:
 20237  0041B2  0100               	movlb	0	; () banked
 20238  0041B4  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 20239  0041B6                     u14808:
 20240  0041B6  337A               	rrcf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 20241  0041B8  337A               	rrcf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 20242  0041BA  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 20243  0041BC  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 20244  0041BE  0B7F               	andlw	-129
 20245  0041C0  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 20246  0041C2  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 20247                           
 20248                           ; BSR set to: 0
 20249                           ;ENC424J600.c: 325: flags.RXABTIF = (reg & (1 << RXABTIF)) != 0 ? 1u : 0u;
 20250  0041C4  A380               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),1,b
 20251  0041C6  D003               	goto	u14810
 20252  0041C8  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 20253  0041CA  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 20254  0041CC  D002               	goto	u14828
 20255  0041CE                     u14810:
 20256  0041CE  0100               	movlb	0	; () banked
 20257  0041D0  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 20258  0041D2                     u14828:
 20259  0041D2  517F               	movf	(ethernetController_pollInterruptFlags@flags+1)& (0+255),w,b
 20260  0041D4  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 20261  0041D6  0BFE               	andlw	-2
 20262  0041D8  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 20263  0041DA  6F7F               	movwf	(ethernetController_pollInterruptFlags@flags+1)& (0+255),b
 20264                           
 20265                           ; BSR set to: 0
 20266                           ;ENC424J600.c: 326: flags.PCFULIF = (reg & (1 << PCFULIF)) != 0 ? 1u : 0u;
 20267  0041DC  A180               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),0,b
 20268  0041DE  D003               	goto	u14830
 20269  0041E0  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 20270  0041E2  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 20271  0041E4  D002               	goto	u14848
 20272  0041E6                     u14830:
 20273  0041E6  0100               	movlb	0	; () banked
 20274  0041E8  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 20275  0041EA                     u14848:
 20276  0041EA  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 20277  0041EC  517F               	movf	(ethernetController_pollInterruptFlags@flags+1)& (0+255),w,b
 20278  0041EE  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 20279  0041F0  0BFD               	andlw	-3
 20280  0041F2  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 20281  0041F4  6F7F               	movwf	(ethernetController_pollInterruptFlags@flags+1)& (0+255),b
 20282                           
 20283                           ; BSR set to: 0
 20284                           ;ENC424J600.c: 327: return flags;
 20285  0041F6  C07E  F078         	movff	ethernetController_pollInterruptFlags@flags,?_ethernetController_pollInterruptFla
      +                          gs
 20286  0041FA  C07F  F079         	movff	ethernetController_pollInterruptFlags@flags+1,?_ethernetController_pollInterruptF
      +                          lags+1
 20287  0041FE  0012               	return	
 20288  004200                     __end_of_ethernetController_pollInterruptFlags:
 20289                           	opt stack 0
 20290                           tblptru	equ	0xFF8
 20291                           tblptrh	equ	0xFF7
 20292                           tblptrl	equ	0xFF6
 20293                           tablat	equ	0xFF5
 20294                           prodh	equ	0xFF4
 20295                           prodl	equ	0xFF3
 20296                           intcon	equ	0xFF2
 20297                           intcon3	equ	0xFF0
 20298                           indf0	equ	0xFEF
 20299                           postinc0	equ	0xFEE
 20300                           plusw0	equ	0xFEB
 20301                           fsr0h	equ	0xFEA
 20302                           fsr0l	equ	0xFE9
 20303                           wreg	equ	0xFE8
 20304                           indf1	equ	0xFE7
 20305                           postinc1	equ	0xFE6
 20306                           postdec1	equ	0xFE5
 20307                           plusw1	equ	0xFE3
 20308                           fsr1h	equ	0xFE2
 20309                           fsr1l	equ	0xFE1
 20310                           indf2	equ	0xFDF
 20311                           postinc2	equ	0xFDE
 20312                           postdec2	equ	0xFDD
 20313                           plusw2	equ	0xFDB
 20314                           fsr2h	equ	0xFDA
 20315                           fsr2l	equ	0xFD9
 20316                           status	equ	0xFD8
 20317                           
 20318 ;; *************** function _enc424j600_getInterruptFlags *****************
 20319 ;; Defined at:
 20320 ;;		line 696 in file "src/enc424j600/ENC424J600.c"
 20321 ;; Parameters:    Size  Location     Type
 20322 ;;		None
 20323 ;; Auto vars:     Size  Location     Type
 20324 ;;  high            1   23[BANK0 ] unsigned char 
 20325 ;;  low             1   22[BANK0 ] unsigned char 
 20326 ;; Return value:  Size  Location     Type
 20327 ;;                  2   14[BANK0 ] unsigned int 
 20328 ;; Registers used:
 20329 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20330 ;; Tracked objects:
 20331 ;;		On entry : 0/0
 20332 ;;		On exit  : 0/0
 20333 ;;		Unchanged: 0/0
 20334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20335 ;;      Params:         0       2       0       0       0       0       0       0       0
 20336 ;;      Locals:         0       2       0       0       0       0       0       0       0
 20337 ;;      Temps:          0       6       0       0       0       0       0       0       0
 20338 ;;      Totals:         0      10       0       0       0       0       0       0       0
 20339 ;;Total ram usage:       10 bytes
 20340 ;; Hardware stack levels used:    1
 20341 ;; Hardware stack levels required when called:    7
 20342 ;; This function calls:
 20343 ;;		_enc424j600_readControlRegisterUnbanked
 20344 ;; This function is called by:
 20345 ;;		_ethernetController_pollInterruptFlags
 20346 ;; This function uses a non-reentrant model
 20347 ;;
 20348                           
 20349                           	psect	text69
 20350  0066A8                     __ptext69:
 20351                           	opt stack 0
 20352  0066A8                     _enc424j600_getInterruptFlags:
 20353                           	opt stack 21
 20354                           
 20355                           ;ENC424J600.c: 697: uint8_t low, high;
 20356                           ;ENC424J600.c: 698: enc424j600_readControlRegisterUnbanked(0x1C + 0x00, &low);
 20357                           
 20358                           ; BSR set to: 0
 20359                           ;incstack = 0
 20360  0066A8  0E76               	movlw	low enc424j600_getInterruptFlags@low
 20361  0066AA  0100               	movlb	0	; () banked
 20362  0066AC  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 20363  0066AE  0E00               	movlw	high enc424j600_getInterruptFlags@low
 20364  0066B0  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 20365  0066B2  0E1C               	movlw	28
 20366  0066B4  ECD7  F034         	call	_enc424j600_readControlRegisterUnbanked
 20367                           
 20368                           ;ENC424J600.c: 699: enc424j600_readControlRegisterUnbanked(0x1D + 0x00, &high);
 20369  0066B8  0E77               	movlw	low enc424j600_getInterruptFlags@high
 20370  0066BA  0100               	movlb	0	; () banked
 20371  0066BC  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 20372  0066BE  0E00               	movlw	high enc424j600_getInterruptFlags@high
 20373  0066C0  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 20374  0066C2  0E1D               	movlw	29
 20375  0066C4  ECD7  F034         	call	_enc424j600_readControlRegisterUnbanked
 20376                           
 20377                           ;ENC424J600.c: 700: return ( (((uint16_t) low)&0x00ff) | (((uint16_t) high << 8)&0xff00)
      +                          );
 20378  0066C8  0E00               	movlw	0
 20379  0066CA  0100               	movlb	0	; () banked
 20380  0066CC  6F70               	movwf	??_enc424j600_getInterruptFlags& (0+255),b
 20381  0066CE  0EFF               	movlw	255
 20382  0066D0  6F71               	movwf	(??_enc424j600_getInterruptFlags+1)& (0+255),b
 20383  0066D2  5177               	movf	enc424j600_getInterruptFlags@high& (0+255),w,b
 20384  0066D4  6F73               	movwf	(??_enc424j600_getInterruptFlags+3)& (0+255),b
 20385  0066D6  6B72               	clrf	(??_enc424j600_getInterruptFlags+2)& (0+255),b
 20386  0066D8  5170               	movf	??_enc424j600_getInterruptFlags& (0+255),w,b
 20387  0066DA  1772               	andwf	(??_enc424j600_getInterruptFlags+2)& (0+255),f,b
 20388  0066DC  5171               	movf	(??_enc424j600_getInterruptFlags+1)& (0+255),w,b
 20389  0066DE  1773               	andwf	(??_enc424j600_getInterruptFlags+3)& (0+255),f,b
 20390  0066E0  5176               	movf	enc424j600_getInterruptFlags@low& (0+255),w,b
 20391  0066E2  6F74               	movwf	(??_enc424j600_getInterruptFlags+4)& (0+255),b
 20392  0066E4  6B75               	clrf	(??_enc424j600_getInterruptFlags+5)& (0+255),b
 20393  0066E6  5172               	movf	(??_enc424j600_getInterruptFlags+2)& (0+255),w,b
 20394  0066E8  1174               	iorwf	(??_enc424j600_getInterruptFlags+4)& (0+255),w,b
 20395  0066EA  6F6E               	movwf	?_enc424j600_getInterruptFlags& (0+255),b
 20396  0066EC  5173               	movf	(??_enc424j600_getInterruptFlags+3)& (0+255),w,b
 20397  0066EE  1175               	iorwf	(??_enc424j600_getInterruptFlags+5)& (0+255),w,b
 20398  0066F0  6F6F               	movwf	(?_enc424j600_getInterruptFlags+1)& (0+255),b
 20399  0066F2  0012               	return	
 20400  0066F4                     __end_of_enc424j600_getInterruptFlags:
 20401                           	opt stack 0
 20402                           tblptru	equ	0xFF8
 20403                           tblptrh	equ	0xFF7
 20404                           tblptrl	equ	0xFF6
 20405                           tablat	equ	0xFF5
 20406                           prodh	equ	0xFF4
 20407                           prodl	equ	0xFF3
 20408                           intcon	equ	0xFF2
 20409                           intcon3	equ	0xFF0
 20410                           indf0	equ	0xFEF
 20411                           postinc0	equ	0xFEE
 20412                           plusw0	equ	0xFEB
 20413                           fsr0h	equ	0xFEA
 20414                           fsr0l	equ	0xFE9
 20415                           wreg	equ	0xFE8
 20416                           indf1	equ	0xFE7
 20417                           postinc1	equ	0xFE6
 20418                           postdec1	equ	0xFE5
 20419                           plusw1	equ	0xFE3
 20420                           fsr1h	equ	0xFE2
 20421                           fsr1l	equ	0xFE1
 20422                           indf2	equ	0xFDF
 20423                           postinc2	equ	0xFDE
 20424                           postdec2	equ	0xFDD
 20425                           plusw2	equ	0xFDB
 20426                           fsr2h	equ	0xFDA
 20427                           fsr2l	equ	0xFD9
 20428                           status	equ	0xFD8
 20429                           
 20430 ;; *************** function _ethernetController_newPacketAvailable *****************
 20431 ;; Defined at:
 20432 ;;		line 390 in file "src/enc424j600/ENC424J600.c"
 20433 ;; Parameters:    Size  Location     Type
 20434 ;;		None
 20435 ;; Auto vars:     Size  Location     Type
 20436 ;;		None
 20437 ;; Return value:  Size  Location     Type
 20438 ;;                  1    wreg      unsigned char 
 20439 ;; Registers used:
 20440 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20441 ;; Tracked objects:
 20442 ;;		On entry : 0/0
 20443 ;;		On exit  : 0/0
 20444 ;;		Unchanged: 0/0
 20445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20446 ;;      Params:         0       0       0       0       0       0       0       0       0
 20447 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20448 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20449 ;;      Totals:         0       0       0       0       0       0       0       0       0
 20450 ;;Total ram usage:        0 bytes
 20451 ;; Hardware stack levels used:    1
 20452 ;; Hardware stack levels required when called:    8
 20453 ;; This function calls:
 20454 ;;		_enc424j600_getPacketCount
 20455 ;; This function is called by:
 20456 ;;		_handleStackBackgroundTasks
 20457 ;; This function uses a non-reentrant model
 20458 ;;
 20459                           
 20460                           	psect	text70
 20461  006DDC                     __ptext70:
 20462                           	opt stack 0
 20463  006DDC                     _ethernetController_newPacketAvailable:
 20464                           	opt stack 21
 20465                           
 20466                           ;ENC424J600.c: 391: return (unsigned) (enc424j600_getPacketCount() != 0);
 20467                           
 20468                           ; BSR set to: 0
 20469                           ;incstack = 0
 20470  006DDC  ECB8  F036         	call	_enc424j600_getPacketCount	;wreg free
 20471  006DE0  0900               	iorlw	0
 20472  006DE2  B4D8               	btfsc	status,2,c
 20473  006DE4  D002               	goto	u14850
 20474  006DE6  0E01               	movlw	1
 20475  006DE8  0012               	return	
 20476  006DEA                     u14850:
 20477  006DEA  0E00               	movlw	0
 20478  006DEC  0012               	return	
 20479  006DEE                     __end_of_ethernetController_newPacketAvailable:
 20480                           	opt stack 0
 20481                           tblptru	equ	0xFF8
 20482                           tblptrh	equ	0xFF7
 20483                           tblptrl	equ	0xFF6
 20484                           tablat	equ	0xFF5
 20485                           prodh	equ	0xFF4
 20486                           prodl	equ	0xFF3
 20487                           intcon	equ	0xFF2
 20488                           intcon3	equ	0xFF0
 20489                           indf0	equ	0xFEF
 20490                           postinc0	equ	0xFEE
 20491                           plusw0	equ	0xFEB
 20492                           fsr0h	equ	0xFEA
 20493                           fsr0l	equ	0xFE9
 20494                           wreg	equ	0xFE8
 20495                           indf1	equ	0xFE7
 20496                           postinc1	equ	0xFE6
 20497                           postdec1	equ	0xFE5
 20498                           plusw1	equ	0xFE3
 20499                           fsr1h	equ	0xFE2
 20500                           fsr1l	equ	0xFE1
 20501                           indf2	equ	0xFDF
 20502                           postinc2	equ	0xFDE
 20503                           postdec2	equ	0xFDD
 20504                           plusw2	equ	0xFDB
 20505                           fsr2h	equ	0xFDA
 20506                           fsr2l	equ	0xFD9
 20507                           status	equ	0xFD8
 20508                           
 20509 ;; *************** function _enc424j600_getPacketCount *****************
 20510 ;; Defined at:
 20511 ;;		line 594 in file "src/enc424j600/ENC424J600.c"
 20512 ;; Parameters:    Size  Location     Type
 20513 ;;		None
 20514 ;; Auto vars:     Size  Location     Type
 20515 ;;  lowByte         1   14[BANK0 ] unsigned char 
 20516 ;; Return value:  Size  Location     Type
 20517 ;;                  1    wreg      unsigned char 
 20518 ;; Registers used:
 20519 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20520 ;; Tracked objects:
 20521 ;;		On entry : 0/0
 20522 ;;		On exit  : 0/0
 20523 ;;		Unchanged: 0/0
 20524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20525 ;;      Params:         0       0       0       0       0       0       0       0       0
 20526 ;;      Locals:         0       1       0       0       0       0       0       0       0
 20527 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20528 ;;      Totals:         0       1       0       0       0       0       0       0       0
 20529 ;;Total ram usage:        1 bytes
 20530 ;; Hardware stack levels used:    1
 20531 ;; Hardware stack levels required when called:    7
 20532 ;; This function calls:
 20533 ;;		_enc424j600_readControlRegisterUnbanked
 20534 ;; This function is called by:
 20535 ;;		_ethernetController_newPacketAvailable
 20536 ;;		_ethernetController_getCurrentPacketCount
 20537 ;; This function uses a non-reentrant model
 20538 ;;
 20539                           
 20540                           	psect	text71
 20541  006D70                     __ptext71:
 20542                           	opt stack 0
 20543  006D70                     _enc424j600_getPacketCount:
 20544                           	opt stack 21
 20545                           
 20546                           ;ENC424J600.c: 595: uint8_t lowByte = 0;
 20547                           
 20548                           ;incstack = 0
 20549  006D70  0E00               	movlw	0
 20550  006D72  0100               	movlb	0	; () banked
 20551  006D74  6F6E               	movwf	enc424j600_getPacketCount@lowByte& (0+255),b
 20552                           
 20553                           ; BSR set to: 0
 20554                           ;ENC424J600.c: 596: enc424j600_readControlRegisterUnbanked(0x1A + 0x00, &lowByte);
 20555  006D76  0E6E               	movlw	low enc424j600_getPacketCount@lowByte
 20556  006D78  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 20557  006D7A  0E00               	movlw	high enc424j600_getPacketCount@lowByte
 20558  006D7C  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 20559  006D7E  0E1A               	movlw	26
 20560  006D80  ECD7  F034         	call	_enc424j600_readControlRegisterUnbanked
 20561                           
 20562                           ;ENC424J600.c: 597: return (uint32_t) lowByte;
 20563  006D84  0100               	movlb	0	; () banked
 20564  006D86  516E               	movf	enc424j600_getPacketCount@lowByte& (0+255),w,b
 20565  006D88  0012               	return	
 20566  006D8A                     __end_of_enc424j600_getPacketCount:
 20567                           	opt stack 0
 20568                           tblptru	equ	0xFF8
 20569                           tblptrh	equ	0xFF7
 20570                           tblptrl	equ	0xFF6
 20571                           tablat	equ	0xFF5
 20572                           prodh	equ	0xFF4
 20573                           prodl	equ	0xFF3
 20574                           intcon	equ	0xFF2
 20575                           intcon3	equ	0xFF0
 20576                           indf0	equ	0xFEF
 20577                           postinc0	equ	0xFEE
 20578                           plusw0	equ	0xFEB
 20579                           fsr0h	equ	0xFEA
 20580                           fsr0l	equ	0xFE9
 20581                           wreg	equ	0xFE8
 20582                           indf1	equ	0xFE7
 20583                           postinc1	equ	0xFE6
 20584                           postdec1	equ	0xFE5
 20585                           plusw1	equ	0xFE3
 20586                           fsr1h	equ	0xFE2
 20587                           fsr1l	equ	0xFE1
 20588                           indf2	equ	0xFDF
 20589                           postinc2	equ	0xFDE
 20590                           postdec2	equ	0xFDD
 20591                           plusw2	equ	0xFDB
 20592                           fsr2h	equ	0xFDA
 20593                           fsr2l	equ	0xFD9
 20594                           status	equ	0xFD8
 20595                           
 20596 ;; *************** function _ethernetController_init *****************
 20597 ;; Defined at:
 20598 ;;		line 34 in file "src/enc424j600/ENC424J600.c"
 20599 ;; Parameters:    Size  Location     Type
 20600 ;;		None
 20601 ;; Auto vars:     Size  Location     Type
 20602 ;;  err             3   29[BANK0 ] struct error
 20603 ;; Return value:  Size  Location     Type
 20604 ;;                  3   26[BANK0 ] struct error
 20605 ;; Registers used:
 20606 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20607 ;; Tracked objects:
 20608 ;;		On entry : 0/0
 20609 ;;		On exit  : 0/0
 20610 ;;		Unchanged: 0/0
 20611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20612 ;;      Params:         0       3       0       0       0       0       0       0       0
 20613 ;;      Locals:         0       3       0       0       0       0       0       0       0
 20614 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20615 ;;      Totals:         0       6       0       0       0       0       0       0       0
 20616 ;;Total ram usage:        6 bytes
 20617 ;; Hardware stack levels used:    1
 20618 ;; Hardware stack levels required when called:    8
 20619 ;; This function calls:
 20620 ;;		_enc424j600_enableAutoMACInsertion
 20621 ;;		_enc424j600_enableReception
 20622 ;;		_enc424j600_initSPI
 20623 ;;		_enc424j600_setNextPacketPointer
 20624 ;;		_enc424j600_setRXBufferStartAddress
 20625 ;;		_enc424j600_setRXTailPointer
 20626 ;;		_ethernetController_checkDeviceId
 20627 ;;		_ethernetController_softReset
 20628 ;; This function is called by:
 20629 ;;		_handleStackBackgroundTasks
 20630 ;;		_main
 20631 ;; This function uses a non-reentrant model
 20632 ;;
 20633                           
 20634                           	psect	text72
 20635  00591E                     __ptext72:
 20636                           	opt stack 0
 20637  00591E                     _ethernetController_init:
 20638                           	opt stack 21
 20639                           
 20640                           ;ENC424J600.c: 35: error_t err;
 20641                           ;ENC424J600.c: 36: enc424j600_initSPI();
 20642                           
 20643                           ; BSR set to: 0
 20644                           ;incstack = 0
 20645  00591E  EC9D  F036         	call	_enc424j600_initSPI	;wreg free
 20646                           
 20647                           ;ENC424J600.c: 37: err = ethernetController_softReset();
 20648  005922  EC44  F026         	call	_ethernetController_softReset	;wreg free
 20649  005926  C06E  F07D         	movff	?_ethernetController_softReset,ethernetController_init@err
 20650  00592A  C06F  F07E         	movff	?_ethernetController_softReset+1,ethernetController_init@err+1
 20651  00592E  C070  F07F         	movff	?_ethernetController_softReset+2,ethernetController_init@err+2
 20652                           
 20653                           ;ENC424J600.c: 38: if (err.code != (uint16_t)0) {
 20654  005932  0100               	movlb	0	; () banked
 20655  005934  517E               	movf	(ethernetController_init@err+1)& (0+255),w,b
 20656  005936  117F               	iorwf	(ethernetController_init@err+2)& (0+255),w,b
 20657  005938  B4D8               	btfsc	status,2,c
 20658  00593A  D007               	goto	l75
 20659                           
 20660                           ; BSR set to: 0
 20661                           ;ENC424J600.c: 39: return err;
 20662  00593C  C07D  F07A         	movff	ethernetController_init@err,?_ethernetController_init
 20663  005940  C07E  F07B         	movff	ethernetController_init@err+1,?_ethernetController_init+1
 20664  005944  C07F  F07C         	movff	ethernetController_init@err+2,?_ethernetController_init+2
 20665  005948  0012               	return	
 20666  00594A                     l75:
 20667                           
 20668                           ; BSR set to: 0
 20669                           ;ENC424J600.c: 40: }
 20670                           ;ENC424J600.c: 41: err = ethernetController_checkDeviceId();
 20671                           
 20672                           ; BSR set to: 0
 20673  00594A  EC06  F033         	call	_ethernetController_checkDeviceId	;wreg free
 20674  00594E  C06E  F07D         	movff	?_ethernetController_checkDeviceId,ethernetController_init@err
 20675  005952  C06F  F07E         	movff	?_ethernetController_checkDeviceId+1,ethernetController_init@err+1
 20676  005956  C070  F07F         	movff	?_ethernetController_checkDeviceId+2,ethernetController_init@err+2
 20677                           
 20678                           ;ENC424J600.c: 42: if (err.code != (uint16_t)0) {
 20679  00595A  0100               	movlb	0	; () banked
 20680  00595C  517E               	movf	(ethernetController_init@err+1)& (0+255),w,b
 20681  00595E  117F               	iorwf	(ethernetController_init@err+2)& (0+255),w,b
 20682  005960  B4D8               	btfsc	status,2,c
 20683  005962  D007               	goto	l77
 20684                           
 20685                           ; BSR set to: 0
 20686                           ;ENC424J600.c: 43: return err;
 20687  005964  C07D  F07A         	movff	ethernetController_init@err,?_ethernetController_init
 20688  005968  C07E  F07B         	movff	ethernetController_init@err+1,?_ethernetController_init+1
 20689  00596C  C07F  F07C         	movff	ethernetController_init@err+2,?_ethernetController_init+2
 20690  005970  0012               	return	
 20691  005972                     l77:
 20692                           
 20693                           ; BSR set to: 0
 20694                           ;ENC424J600.c: 44: }
 20695                           ;ENC424J600.c: 63: enc424j600_setRXBufferStartAddress(0x3000);
 20696                           
 20697                           ; BSR set to: 0
 20698  005972  0E30               	movlw	48
 20699  005974  6F6F               	movwf	(enc424j600_setRXBufferStartAddress@addr+1)& (0+255),b
 20700  005976  0E00               	movlw	0
 20701  005978  6F6E               	movwf	enc424j600_setRXBufferStartAddress@addr& (0+255),b
 20702  00597A  EC96  F035         	call	_enc424j600_setRXBufferStartAddress	;wreg free
 20703                           
 20704                           ;ENC424J600.c: 64: enc424j600_setNextPacketPointer(0x3000);
 20705  00597E  0E30               	movlw	48
 20706  005980  0100               	movlb	0	; () banked
 20707  005982  6F61               	movwf	(enc424j600_setNextPacketPointer@ptr+1)& (0+255),b
 20708  005984  0E00               	movlw	0
 20709  005986  6F60               	movwf	enc424j600_setNextPacketPointer@ptr& (0+255),b
 20710  005988  EC49  F037         	call	_enc424j600_setNextPacketPointer	;wreg free
 20711                           
 20712                           ;ENC424J600.c: 65: enc424j600_setRXTailPointer(0x5FFE);
 20713  00598C  0E5F               	movlw	95
 20714  00598E  0100               	movlb	0	; () banked
 20715  005990  6F6F               	movwf	(enc424j600_setRXTailPointer@addr+1)& (0+255),b
 20716  005992  0EFE               	movlw	254
 20717  005994  6F6E               	movwf	enc424j600_setRXTailPointer@addr& (0+255),b
 20718  005996  EC81  F035         	call	_enc424j600_setRXTailPointer	;wreg free
 20719                           
 20720                           ;ENC424J600.c: 67: enc424j600_enableReception();
 20721  00599A  EC4E  F037         	call	_enc424j600_enableReception	;wreg free
 20722                           
 20723                           ;ENC424J600.c: 68: enc424j600_enableAutoMACInsertion();
 20724  00599E  ECD5  F035         	call	_enc424j600_enableAutoMACInsertion	;wreg free
 20725                           
 20726                           ;ENC424J600.c: 70: err.module = ERROR_MODULE_ETHERNET_CONTROLLER;
 20727  0059A2  0E01               	movlw	1
 20728  0059A4  0100               	movlb	0	; () banked
 20729  0059A6  6F7D               	movwf	ethernetController_init@err& (0+255),b
 20730                           
 20731                           ; BSR set to: 0
 20732                           ;ENC424J600.c: 71: err.code = (uint16_t)0;
 20733  0059A8  0E00               	movlw	0
 20734  0059AA  6F7F               	movwf	(ethernetController_init@err+2)& (0+255),b
 20735  0059AC  0E00               	movlw	0
 20736  0059AE  6F7E               	movwf	(ethernetController_init@err+1)& (0+255),b
 20737                           
 20738                           ; BSR set to: 0
 20739                           ;ENC424J600.c: 72: return err;
 20740  0059B0  C07D  F07A         	movff	ethernetController_init@err,?_ethernetController_init
 20741  0059B4  C07E  F07B         	movff	ethernetController_init@err+1,?_ethernetController_init+1
 20742  0059B8  C07F  F07C         	movff	ethernetController_init@err+2,?_ethernetController_init+2
 20743  0059BC  0012               	return	
 20744  0059BE                     __end_of_ethernetController_init:
 20745                           	opt stack 0
 20746                           tblptru	equ	0xFF8
 20747                           tblptrh	equ	0xFF7
 20748                           tblptrl	equ	0xFF6
 20749                           tablat	equ	0xFF5
 20750                           prodh	equ	0xFF4
 20751                           prodl	equ	0xFF3
 20752                           intcon	equ	0xFF2
 20753                           intcon3	equ	0xFF0
 20754                           indf0	equ	0xFEF
 20755                           postinc0	equ	0xFEE
 20756                           plusw0	equ	0xFEB
 20757                           fsr0h	equ	0xFEA
 20758                           fsr0l	equ	0xFE9
 20759                           wreg	equ	0xFE8
 20760                           indf1	equ	0xFE7
 20761                           postinc1	equ	0xFE6
 20762                           postdec1	equ	0xFE5
 20763                           plusw1	equ	0xFE3
 20764                           fsr1h	equ	0xFE2
 20765                           fsr1l	equ	0xFE1
 20766                           indf2	equ	0xFDF
 20767                           postinc2	equ	0xFDE
 20768                           postdec2	equ	0xFDD
 20769                           plusw2	equ	0xFDB
 20770                           fsr2h	equ	0xFDA
 20771                           fsr2l	equ	0xFD9
 20772                           status	equ	0xFD8
 20773                           
 20774 ;; *************** function _ethernetController_softReset *****************
 20775 ;; Defined at:
 20776 ;;		line 75 in file "src/enc424j600/ENC424J600.c"
 20777 ;; Parameters:    Size  Location     Type
 20778 ;;		None
 20779 ;; Auto vars:     Size  Location     Type
 20780 ;;  err             3   23[BANK0 ] struct error
 20781 ;;  receivedData    2   21[BANK0 ] unsigned char [2]
 20782 ;;  dataToSend      2   19[BANK0 ] unsigned char [2]
 20783 ;;  comFailCount    1   18[BANK0 ] unsigned char 
 20784 ;; Return value:  Size  Location     Type
 20785 ;;                  3   14[BANK0 ] struct error
 20786 ;; Registers used:
 20787 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20788 ;; Tracked objects:
 20789 ;;		On entry : 0/0
 20790 ;;		On exit  : 0/0
 20791 ;;		Unchanged: 0/0
 20792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20793 ;;      Params:         0       3       0       0       0       0       0       0       0
 20794 ;;      Locals:         0       8       0       0       0       0       0       0       0
 20795 ;;      Temps:          0       1       0       0       0       0       0       0       0
 20796 ;;      Totals:         0      12       0       0       0       0       0       0       0
 20797 ;;Total ram usage:       12 bytes
 20798 ;; Hardware stack levels used:    1
 20799 ;; Hardware stack levels required when called:    7
 20800 ;; This function calls:
 20801 ;;		_enc424j600_readControlRegisterUnbanked
 20802 ;;		_enc424j600_writeControlRegisterUnbanked
 20803 ;;		_enc424j600_writeSingleByte
 20804 ;; This function is called by:
 20805 ;;		_ethernetController_init
 20806 ;; This function uses a non-reentrant model
 20807 ;;
 20808                           
 20809                           	psect	text73
 20810  004C88                     __ptext73:
 20811                           	opt stack 0
 20812  004C88                     _ethernetController_softReset:
 20813                           	opt stack 21
 20814                           
 20815                           ;ENC424J600.c: 93: uint8_t comFailCount = 0;
 20816                           
 20817                           ; BSR set to: 0
 20818                           ;incstack = 0
 20819  004C88  0E00               	movlw	0
 20820  004C8A  0100               	movlb	0	; () banked
 20821  004C8C  6F72               	movwf	ethernetController_softReset@comFailCount& (0+255),b
 20822                           
 20823                           ; BSR set to: 0
 20824                           ;ENC424J600.c: 94: uint8_t dataToSend[2] = {0x12, 0x34};
 20825  004C8E  C04C  F073         	movff	ethernetController_softReset@F6068,ethernetController_softReset@dataToSend
 20826  004C92  C04D  F074         	movff	ethernetController_softReset@F6068+1,ethernetController_softReset@dataToSend+1
 20827                           
 20828                           ; BSR set to: 0
 20829                           ;ENC424J600.c: 95: uint8_t receivedData[2] = {0, 0};
 20830  004C96  C2CD  F075         	movff	ethernetController_softReset@F6070,ethernetController_softReset@receivedData
 20831  004C9A  C2CE  F076         	movff	ethernetController_softReset@F6070+1,ethernetController_softReset@receivedData+1
 20832                           
 20833                           ;ENC424J600.c: 96: error_t err;
 20834                           ;ENC424J600.c: 97: err.module = ERROR_MODULE_ETHERNET_CONTROLLER;
 20835  004C9E  0E01               	movlw	1
 20836  004CA0  6F77               	movwf	ethernetController_softReset@err& (0+255),b
 20837                           
 20838                           ;ENC424J600.c: 98: err.code = (uint16_t)0;
 20839  004CA2  0E00               	movlw	0
 20840  004CA4  6F79               	movwf	(ethernetController_softReset@err+2)& (0+255),b
 20841  004CA6  0E00               	movlw	0
 20842  004CA8  6F78               	movwf	(ethernetController_softReset@err+1)& (0+255),b
 20843                           
 20844                           ; BSR set to: 0
 20845                           ;ENC424J600.c: 99: if (comFailCount < 5) {
 20846  004CAA  0E05               	movlw	5
 20847  004CAC  6172               	cpfslt	ethernetController_softReset@comFailCount& (0+255),b
 20848  004CAE  D05F               	goto	l84
 20849                           
 20850                           ; BSR set to: 0
 20851                           ;ENC424J600.c: 101: enc424j600_writeControlRegisterUnbanked(0x16 + 0x00, &dataToSend[0])
      +                          ;
 20852  004CB0  0E73               	movlw	low ethernetController_softReset@dataToSend
 20853  004CB2  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 20854  004CB4  0E00               	movlw	high ethernetController_softReset@dataToSend
 20855  004CB6  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 20856  004CB8  0E16               	movlw	22
 20857  004CBA  ECF2  F034         	call	_enc424j600_writeControlRegisterUnbanked
 20858                           
 20859                           ;ENC424J600.c: 102: enc424j600_writeControlRegisterUnbanked(0x17 + 0x00, &dataToSend[1])
      +                          ;
 20860  004CBE  0E74               	movlw	low (ethernetController_softReset@dataToSend+1)
 20861  004CC0  0100               	movlb	0	; () banked
 20862  004CC2  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 20863  004CC4  0E00               	movlw	high (ethernetController_softReset@dataToSend+1)
 20864  004CC6  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 20865  004CC8  0E17               	movlw	23
 20866  004CCA  ECF2  F034         	call	_enc424j600_writeControlRegisterUnbanked
 20867                           
 20868                           ;ENC424J600.c: 104: enc424j600_readControlRegisterUnbanked(0x16 + 0x00, &receivedData[0]
      +                          );
 20869  004CCE  0E75               	movlw	low ethernetController_softReset@receivedData
 20870  004CD0  0100               	movlb	0	; () banked
 20871  004CD2  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 20872  004CD4  0E00               	movlw	high ethernetController_softReset@receivedData
 20873  004CD6  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 20874  004CD8  0E16               	movlw	22
 20875  004CDA  ECD7  F034         	call	_enc424j600_readControlRegisterUnbanked
 20876                           
 20877                           ;ENC424J600.c: 105: enc424j600_readControlRegisterUnbanked(0x17 + 0x00, &receivedData[1]
      +                          );
 20878  004CDE  0E76               	movlw	low (ethernetController_softReset@receivedData+1)
 20879  004CE0  0100               	movlb	0	; () banked
 20880  004CE2  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 20881  004CE4  0E00               	movlw	high (ethernetController_softReset@receivedData+1)
 20882  004CE6  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 20883  004CE8  0E17               	movlw	23
 20884  004CEA  ECD7  F034         	call	_enc424j600_readControlRegisterUnbanked
 20885                           
 20886                           ;ENC424J600.c: 107: if ((receivedData[0] == dataToSend[0]) && (receivedData[1] == dataTo
      +                          Send[1])) {
 20887  004CEE  0100               	movlb	0	; () banked
 20888  004CF0  5173               	movf	ethernetController_softReset@dataToSend& (0+255),w,b
 20889  004CF2  1975               	xorwf	ethernetController_softReset@receivedData& (0+255),w,b
 20890  004CF4  A4D8               	btfss	status,2,c
 20891  004CF6  D038               	goto	l88
 20892                           
 20893                           ; BSR set to: 0
 20894  004CF8  5174               	movf	(ethernetController_softReset@dataToSend+1)& (0+255),w,b
 20895  004CFA  1976               	xorwf	(ethernetController_softReset@receivedData+1)& (0+255),w,b
 20896  004CFC  A4D8               	btfss	status,2,c
 20897  004CFE  D034               	goto	l88
 20898                           
 20899                           ; BSR set to: 0
 20900                           ;ENC424J600.c: 109: enc424j600_writeSingleByte(0b11001010);
 20901  004D00  0ECA               	movlw	202
 20902  004D02  ECC5  F036         	call	_enc424j600_writeSingleByte
 20903                           
 20904                           ;ENC424J600.c: 110: _delay((unsigned long)((25)*(32000000UL/4000000.0)));
 20905  004D06  0E42               	movlw	66
 20906  004D08                     u15857:
 20907  004D08  2EE8               	decfsz	wreg,f,c
 20908  004D0A  D7FE               	bra	u15857
 20909  004D0C  D000               	nop2	
 20910                           
 20911                           ;ENC424J600.c: 112: enc424j600_readControlRegisterUnbanked(0x16 + 0x00, &receivedData[0]
      +                          );
 20912  004D0E  0E75               	movlw	low ethernetController_softReset@receivedData
 20913  004D10  0100               	movlb	0	; () banked
 20914  004D12  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 20915  004D14  0E00               	movlw	high ethernetController_softReset@receivedData
 20916  004D16  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 20917  004D18  0E16               	movlw	22
 20918  004D1A  ECD7  F034         	call	_enc424j600_readControlRegisterUnbanked
 20919                           
 20920                           ;ENC424J600.c: 113: enc424j600_readControlRegisterUnbanked(0x17 + 0x00, &receivedData[1]
      +                          );
 20921  004D1E  0E76               	movlw	low (ethernetController_softReset@receivedData+1)
 20922  004D20  0100               	movlb	0	; () banked
 20923  004D22  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 20924  004D24  0E00               	movlw	high (ethernetController_softReset@receivedData+1)
 20925  004D26  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 20926  004D28  0E17               	movlw	23
 20927  004D2A  ECD7  F034         	call	_enc424j600_readControlRegisterUnbanked
 20928                           
 20929                           ;ENC424J600.c: 115: if (!receivedData[0] && !receivedData[1]) {
 20930  004D2E  0100               	movlb	0	; () banked
 20931  004D30  5175               	movf	ethernetController_softReset@receivedData& (0+255),w,b
 20932  004D32  A4D8               	btfss	status,2,c
 20933  004D34  D00D               	goto	l86
 20934                           
 20935                           ; BSR set to: 0
 20936  004D36  5176               	movf	(ethernetController_softReset@receivedData+1)& (0+255),w,b
 20937  004D38  A4D8               	btfss	status,2,c
 20938  004D3A  D00A               	goto	l86
 20939                           
 20940                           ; BSR set to: 0
 20941                           ;ENC424J600.c: 117: _delay((unsigned long)((256)*(32000000UL/4000000.0)));
 20942  004D3C  0E03               	movlw	3
 20943  004D3E  0100               	movlb	0	; () banked
 20944  004D40  6F71               	movwf	??_ethernetController_softReset& (0+255),b
 20945  004D42  0EA7               	movlw	167
 20946  004D44                     u15867:
 20947  004D44  2EE8               	decfsz	wreg,f,c
 20948  004D46  D7FE               	bra	u15867
 20949  004D48  2F71               	decfsz	??_ethernetController_softReset& (0+255),f,b
 20950  004D4A  D7FC               	bra	u15867
 20951  004D4C  D000               	nop2	
 20952  004D4E  D005               	goto	l11432
 20953  004D50                     l86:
 20954                           
 20955                           ;ENC424J600.c: 120: err.code = ERROR_ETHERNET_CONTROLLER_UNRESPONSIVE;
 20956  004D50  0E01               	movlw	1
 20957  004D52  0100               	movlb	0	; () banked
 20958  004D54  6F79               	movwf	(ethernetController_softReset@err+2)& (0+255),b
 20959  004D56  0E2E               	movlw	46
 20960  004D58  6F78               	movwf	(ethernetController_softReset@err+1)& (0+255),b
 20961  004D5A                     l11432:
 20962                           
 20963                           ; BSR set to: 0
 20964                           ;ENC424J600.c: 121: return err;
 20965  004D5A  C077  F06E         	movff	ethernetController_softReset@err,?_ethernetController_softReset
 20966  004D5E  C078  F06F         	movff	ethernetController_softReset@err+1,?_ethernetController_softReset+1
 20967  004D62  C079  F070         	movff	ethernetController_softReset@err+2,?_ethernetController_softReset+2
 20968                           
 20969                           ; BSR set to: 0
 20970  004D66  0012               	return	
 20971  004D68                     l88:
 20972                           
 20973                           ;ENC424J600.c: 122: }
 20974                           ;ENC424J600.c: 123: }
 20975                           ;ENC424J600.c: 124: comFailCount++;
 20976                           
 20977                           ; BSR set to: 0
 20978                           
 20979                           ; BSR set to: 0
 20980  004D68  0100               	movlb	0	; () banked
 20981  004D6A  2B72               	incf	ethernetController_softReset@comFailCount& (0+255),f,b
 20982                           
 20983                           ;ENC424J600.c: 125: } else {
 20984  004D6C  D00B               	goto	l89
 20985  004D6E                     l84:
 20986                           
 20987                           ; BSR set to: 0
 20988                           ;ENC424J600.c: 126: err.code = ERROR_ETHERNET_CONTROLLER_UNRESPONSIVE;
 20989                           
 20990                           ; BSR set to: 0
 20991  004D6E  0E01               	movlw	1
 20992  004D70  6F79               	movwf	(ethernetController_softReset@err+2)& (0+255),b
 20993  004D72  0E2E               	movlw	46
 20994  004D74  6F78               	movwf	(ethernetController_softReset@err+1)& (0+255),b
 20995                           
 20996                           ; BSR set to: 0
 20997                           ;ENC424J600.c: 127: return err;
 20998  004D76  C077  F06E         	movff	ethernetController_softReset@err,?_ethernetController_softReset
 20999  004D7A  C078  F06F         	movff	ethernetController_softReset@err+1,?_ethernetController_softReset+1
 21000  004D7E  C079  F070         	movff	ethernetController_softReset@err+2,?_ethernetController_softReset+2
 21001                           
 21002                           ; BSR set to: 0
 21003  004D82  0012               	return	
 21004  004D84                     l89:
 21005                           
 21006                           ; BSR set to: 0
 21007                           ;ENC424J600.c: 128: }
 21008                           ;ENC424J600.c: 129: return err;
 21009  004D84  C077  F06E         	movff	ethernetController_softReset@err,?_ethernetController_softReset
 21010  004D88  C078  F06F         	movff	ethernetController_softReset@err+1,?_ethernetController_softReset+1
 21011  004D8C  C079  F070         	movff	ethernetController_softReset@err+2,?_ethernetController_softReset+2
 21012  004D90  0012               	return		;funcret
 21013  004D92                     __end_of_ethernetController_softReset:
 21014                           	opt stack 0
 21015                           tblptru	equ	0xFF8
 21016                           tblptrh	equ	0xFF7
 21017                           tblptrl	equ	0xFF6
 21018                           tablat	equ	0xFF5
 21019                           prodh	equ	0xFF4
 21020                           prodl	equ	0xFF3
 21021                           intcon	equ	0xFF2
 21022                           intcon3	equ	0xFF0
 21023                           indf0	equ	0xFEF
 21024                           postinc0	equ	0xFEE
 21025                           plusw0	equ	0xFEB
 21026                           fsr0h	equ	0xFEA
 21027                           fsr0l	equ	0xFE9
 21028                           wreg	equ	0xFE8
 21029                           indf1	equ	0xFE7
 21030                           postinc1	equ	0xFE6
 21031                           postdec1	equ	0xFE5
 21032                           plusw1	equ	0xFE3
 21033                           fsr1h	equ	0xFE2
 21034                           fsr1l	equ	0xFE1
 21035                           indf2	equ	0xFDF
 21036                           postinc2	equ	0xFDE
 21037                           postdec2	equ	0xFDD
 21038                           plusw2	equ	0xFDB
 21039                           fsr2h	equ	0xFDA
 21040                           fsr2l	equ	0xFD9
 21041                           status	equ	0xFD8
 21042                           
 21043 ;; *************** function _ethernetController_checkDeviceId *****************
 21044 ;; Defined at:
 21045 ;;		line 132 in file "src/enc424j600/ENC424J600.c"
 21046 ;; Parameters:    Size  Location     Type
 21047 ;;		None
 21048 ;; Auto vars:     Size  Location     Type
 21049 ;;  err             3   18[BANK0 ] struct error
 21050 ;;  data            1   17[BANK0 ] unsigned char 
 21051 ;; Return value:  Size  Location     Type
 21052 ;;                  3   14[BANK0 ] struct error
 21053 ;; Registers used:
 21054 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21055 ;; Tracked objects:
 21056 ;;		On entry : 0/0
 21057 ;;		On exit  : 0/0
 21058 ;;		Unchanged: 0/0
 21059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21060 ;;      Params:         0       3       0       0       0       0       0       0       0
 21061 ;;      Locals:         0       4       0       0       0       0       0       0       0
 21062 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21063 ;;      Totals:         0       7       0       0       0       0       0       0       0
 21064 ;;Total ram usage:        7 bytes
 21065 ;; Hardware stack levels used:    1
 21066 ;; Hardware stack levels required when called:    7
 21067 ;; This function calls:
 21068 ;;		_enc424j600_readControlRegisterUnbanked
 21069 ;; This function is called by:
 21070 ;;		_ethernetController_init
 21071 ;;		_main
 21072 ;; This function uses a non-reentrant model
 21073 ;;
 21074                           
 21075                           	psect	text74
 21076  00660C                     __ptext74:
 21077                           	opt stack 0
 21078  00660C                     _ethernetController_checkDeviceId:
 21079                           	opt stack 21
 21080                           
 21081                           ;ENC424J600.c: 133: error_t err;
 21082                           ;ENC424J600.c: 134: err.module = ERROR_MODULE_ETHERNET_CONTROLLER;
 21083                           
 21084                           ;incstack = 0
 21085  00660C  0E01               	movlw	1
 21086  00660E  0100               	movlb	0	; () banked
 21087  006610  6F72               	movwf	ethernetController_checkDeviceId@err& (0+255),b
 21088                           
 21089                           ;ENC424J600.c: 135: err.code = (uint16_t)0;
 21090  006612  0E00               	movlw	0
 21091  006614  6F74               	movwf	(ethernetController_checkDeviceId@err+2)& (0+255),b
 21092  006616  0E00               	movlw	0
 21093  006618  6F73               	movwf	(ethernetController_checkDeviceId@err+1)& (0+255),b
 21094                           
 21095                           ;ENC424J600.c: 136: uint8_t data = 0;
 21096  00661A  0E00               	movlw	0
 21097  00661C  6F71               	movwf	ethernetController_checkDeviceId@data& (0+255),b
 21098                           
 21099                           ; BSR set to: 0
 21100                           ;ENC424J600.c: 137: enc424j600_readControlRegisterUnbanked(0x14 + 0x60, &data);
 21101  00661E  0E71               	movlw	low ethernetController_checkDeviceId@data
 21102  006620  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 21103  006622  0E00               	movlw	high ethernetController_checkDeviceId@data
 21104  006624  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 21105  006626  0E74               	movlw	116
 21106  006628  ECD7  F034         	call	_enc424j600_readControlRegisterUnbanked
 21107                           
 21108                           ;ENC424J600.c: 138: if (((data >> 5)&0x07) == 0b001)
 21109  00662C  0100               	movlb	0	; () banked
 21110  00662E  3971               	swapf	ethernetController_checkDeviceId@data& (0+255),w,b
 21111  006630  42E8               	rrncf	wreg,f,c
 21112  006632  0B07               	andlw	7
 21113  006634  0B07               	andlw	7
 21114  006636  06E8               	decf	wreg,f,c
 21115  006638  A4D8               	btfss	status,2,c
 21116  00663A  D004               	goto	l92
 21117                           
 21118                           ; BSR set to: 0
 21119                           ;ENC424J600.c: 139: err.code = (uint16_t)0;
 21120  00663C  0E00               	movlw	0
 21121  00663E  6F74               	movwf	(ethernetController_checkDeviceId@err+2)& (0+255),b
 21122  006640  0E00               	movlw	0
 21123  006642  D003               	goto	L25
 21124  006644                     l92:
 21125                           
 21126                           ; BSR set to: 0
 21127                           ;ENC424J600.c: 140: else
 21128                           ;ENC424J600.c: 141: err.code = ERROR_ETHERNET_CONTROLLER_UNKNOWN_DEVICE_ID;
 21129                           
 21130                           ; BSR set to: 0
 21131  006644  0E01               	movlw	1
 21132  006646  6F74               	movwf	(ethernetController_checkDeviceId@err+2)& (0+255),b
 21133  006648  0E2D               	movlw	45
 21134  00664A                     L25:
 21135  00664A  6F73               	movwf	(ethernetController_checkDeviceId@err+1)& (0+255),b
 21136                           
 21137                           ; BSR set to: 0
 21138                           ;ENC424J600.c: 142: return err;
 21139                           
 21140                           ; BSR set to: 0
 21141  00664C  C072  F06E         	movff	ethernetController_checkDeviceId@err,?_ethernetController_checkDeviceId
 21142  006650  C073  F06F         	movff	ethernetController_checkDeviceId@err+1,?_ethernetController_checkDeviceId+1
 21143  006654  C074  F070         	movff	ethernetController_checkDeviceId@err+2,?_ethernetController_checkDeviceId+2
 21144  006658  0012               	return	
 21145  00665A                     __end_of_ethernetController_checkDeviceId:
 21146                           	opt stack 0
 21147                           tblptru	equ	0xFF8
 21148                           tblptrh	equ	0xFF7
 21149                           tblptrl	equ	0xFF6
 21150                           tablat	equ	0xFF5
 21151                           prodh	equ	0xFF4
 21152                           prodl	equ	0xFF3
 21153                           intcon	equ	0xFF2
 21154                           intcon3	equ	0xFF0
 21155                           indf0	equ	0xFEF
 21156                           postinc0	equ	0xFEE
 21157                           plusw0	equ	0xFEB
 21158                           fsr0h	equ	0xFEA
 21159                           fsr0l	equ	0xFE9
 21160                           wreg	equ	0xFE8
 21161                           indf1	equ	0xFE7
 21162                           postinc1	equ	0xFE6
 21163                           postdec1	equ	0xFE5
 21164                           plusw1	equ	0xFE3
 21165                           fsr1h	equ	0xFE2
 21166                           fsr1l	equ	0xFE1
 21167                           indf2	equ	0xFDF
 21168                           postinc2	equ	0xFDE
 21169                           postdec2	equ	0xFDD
 21170                           plusw2	equ	0xFDB
 21171                           fsr2h	equ	0xFDA
 21172                           fsr2l	equ	0xFD9
 21173                           status	equ	0xFD8
 21174                           
 21175 ;; *************** function _enc424j600_setRXTailPointer *****************
 21176 ;; Defined at:
 21177 ;;		line 649 in file "src/enc424j600/ENC424J600.c"
 21178 ;; Parameters:    Size  Location     Type
 21179 ;;  addr            2   14[BANK0 ] unsigned int 
 21180 ;; Auto vars:     Size  Location     Type
 21181 ;;  highByte        1   17[BANK0 ] unsigned char 
 21182 ;;  lowByte         1   16[BANK0 ] unsigned char 
 21183 ;; Return value:  Size  Location     Type
 21184 ;;                  1    wreg      void 
 21185 ;; Registers used:
 21186 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21187 ;; Tracked objects:
 21188 ;;		On entry : 0/0
 21189 ;;		On exit  : 0/0
 21190 ;;		Unchanged: 0/0
 21191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21192 ;;      Params:         0       2       0       0       0       0       0       0       0
 21193 ;;      Locals:         0       2       0       0       0       0       0       0       0
 21194 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21195 ;;      Totals:         0       4       0       0       0       0       0       0       0
 21196 ;;Total ram usage:        4 bytes
 21197 ;; Hardware stack levels used:    1
 21198 ;; Hardware stack levels required when called:    7
 21199 ;; This function calls:
 21200 ;;		_enc424j600_writeControlRegisterUnbanked
 21201 ;; This function is called by:
 21202 ;;		_ethernetController_init
 21203 ;;		_ethernetController_dropPacket
 21204 ;; This function uses a non-reentrant model
 21205 ;;
 21206                           
 21207                           	psect	text75
 21208  006B02                     __ptext75:
 21209                           	opt stack 0
 21210  006B02                     _enc424j600_setRXTailPointer:
 21211                           	opt stack 19
 21212                           
 21213                           ;ENC424J600.c: 650: uint8_t lowByte = addr & 0x00ff;
 21214                           
 21215                           ; BSR set to: 0
 21216                           ;incstack = 0
 21217  006B02  C06E  F070         	movff	enc424j600_setRXTailPointer@addr,enc424j600_setRXTailPointer@lowByte
 21218                           
 21219                           ;ENC424J600.c: 651: uint8_t highByte = (addr >> 8) & 0xff;
 21220  006B06  0100               	movlb	0	; () banked
 21221  006B08  516F               	movf	(enc424j600_setRXTailPointer@addr+1)& (0+255),w,b
 21222  006B0A  6F71               	movwf	enc424j600_setRXTailPointer@highByte& (0+255),b
 21223                           
 21224                           ; BSR set to: 0
 21225                           ;ENC424J600.c: 652: enc424j600_writeControlRegisterUnbanked(0x06 + 0x00, &lowByte);
 21226  006B0C  0E70               	movlw	low enc424j600_setRXTailPointer@lowByte
 21227  006B0E  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 21228  006B10  0E00               	movlw	high enc424j600_setRXTailPointer@lowByte
 21229  006B12  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 21230  006B14  0E06               	movlw	6
 21231  006B16  ECF2  F034         	call	_enc424j600_writeControlRegisterUnbanked
 21232                           
 21233                           ;ENC424J600.c: 653: enc424j600_writeControlRegisterUnbanked(0x07 + 0x00, &highByte);
 21234  006B1A  0E71               	movlw	low enc424j600_setRXTailPointer@highByte
 21235  006B1C  0100               	movlb	0	; () banked
 21236  006B1E  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 21237  006B20  0E00               	movlw	high enc424j600_setRXTailPointer@highByte
 21238  006B22  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 21239  006B24  0E07               	movlw	7
 21240  006B26  ECF2  F034         	call	_enc424j600_writeControlRegisterUnbanked
 21241  006B2A  0012               	return		;funcret
 21242  006B2C                     __end_of_enc424j600_setRXTailPointer:
 21243                           	opt stack 0
 21244                           tblptru	equ	0xFF8
 21245                           tblptrh	equ	0xFF7
 21246                           tblptrl	equ	0xFF6
 21247                           tablat	equ	0xFF5
 21248                           prodh	equ	0xFF4
 21249                           prodl	equ	0xFF3
 21250                           intcon	equ	0xFF2
 21251                           intcon3	equ	0xFF0
 21252                           indf0	equ	0xFEF
 21253                           postinc0	equ	0xFEE
 21254                           plusw0	equ	0xFEB
 21255                           fsr0h	equ	0xFEA
 21256                           fsr0l	equ	0xFE9
 21257                           wreg	equ	0xFE8
 21258                           indf1	equ	0xFE7
 21259                           postinc1	equ	0xFE6
 21260                           postdec1	equ	0xFE5
 21261                           plusw1	equ	0xFE3
 21262                           fsr1h	equ	0xFE2
 21263                           fsr1l	equ	0xFE1
 21264                           indf2	equ	0xFDF
 21265                           postinc2	equ	0xFDE
 21266                           postdec2	equ	0xFDD
 21267                           plusw2	equ	0xFDB
 21268                           fsr2h	equ	0xFDA
 21269                           fsr2l	equ	0xFD9
 21270                           status	equ	0xFD8
 21271                           
 21272 ;; *************** function _enc424j600_setRXBufferStartAddress *****************
 21273 ;; Defined at:
 21274 ;;		line 642 in file "src/enc424j600/ENC424J600.c"
 21275 ;; Parameters:    Size  Location     Type
 21276 ;;  addr            2   14[BANK0 ] unsigned int 
 21277 ;; Auto vars:     Size  Location     Type
 21278 ;;  highByte        1   17[BANK0 ] unsigned char 
 21279 ;;  lowByte         1   16[BANK0 ] unsigned char 
 21280 ;; Return value:  Size  Location     Type
 21281 ;;                  1    wreg      void 
 21282 ;; Registers used:
 21283 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21284 ;; Tracked objects:
 21285 ;;		On entry : 0/0
 21286 ;;		On exit  : 0/0
 21287 ;;		Unchanged: 0/0
 21288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21289 ;;      Params:         0       2       0       0       0       0       0       0       0
 21290 ;;      Locals:         0       2       0       0       0       0       0       0       0
 21291 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21292 ;;      Totals:         0       4       0       0       0       0       0       0       0
 21293 ;;Total ram usage:        4 bytes
 21294 ;; Hardware stack levels used:    1
 21295 ;; Hardware stack levels required when called:    7
 21296 ;; This function calls:
 21297 ;;		_enc424j600_writeControlRegisterUnbanked
 21298 ;; This function is called by:
 21299 ;;		_ethernetController_init
 21300 ;; This function uses a non-reentrant model
 21301 ;;
 21302                           
 21303                           	psect	text76
 21304  006B2C                     __ptext76:
 21305                           	opt stack 0
 21306  006B2C                     _enc424j600_setRXBufferStartAddress:
 21307                           	opt stack 21
 21308                           
 21309                           ;ENC424J600.c: 643: uint8_t lowByte = addr & 0x00ff;
 21310                           
 21311                           ;incstack = 0
 21312  006B2C  C06E  F070         	movff	enc424j600_setRXBufferStartAddress@addr,enc424j600_setRXBufferStartAddress@lowByt
      +                          e
 21313                           
 21314                           ;ENC424J600.c: 644: uint8_t highByte = (addr >> 8) & 0xff;
 21315  006B30  0100               	movlb	0	; () banked
 21316  006B32  516F               	movf	(enc424j600_setRXBufferStartAddress@addr+1)& (0+255),w,b
 21317  006B34  6F71               	movwf	enc424j600_setRXBufferStartAddress@highByte& (0+255),b
 21318                           
 21319                           ; BSR set to: 0
 21320                           ;ENC424J600.c: 645: enc424j600_writeControlRegisterUnbanked(0x04 + 0x00, &lowByte);
 21321  006B36  0E70               	movlw	low enc424j600_setRXBufferStartAddress@lowByte
 21322  006B38  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 21323  006B3A  0E00               	movlw	high enc424j600_setRXBufferStartAddress@lowByte
 21324  006B3C  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 21325  006B3E  0E04               	movlw	4
 21326  006B40  ECF2  F034         	call	_enc424j600_writeControlRegisterUnbanked
 21327                           
 21328                           ;ENC424J600.c: 646: enc424j600_writeControlRegisterUnbanked(0x05 + 0x00, &highByte);
 21329  006B44  0E71               	movlw	low enc424j600_setRXBufferStartAddress@highByte
 21330  006B46  0100               	movlb	0	; () banked
 21331  006B48  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 21332  006B4A  0E00               	movlw	high enc424j600_setRXBufferStartAddress@highByte
 21333  006B4C  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 21334  006B4E  0E05               	movlw	5
 21335  006B50  ECF2  F034         	call	_enc424j600_writeControlRegisterUnbanked
 21336  006B54  0012               	return		;funcret
 21337  006B56                     __end_of_enc424j600_setRXBufferStartAddress:
 21338                           	opt stack 0
 21339                           tblptru	equ	0xFF8
 21340                           tblptrh	equ	0xFF7
 21341                           tblptrl	equ	0xFF6
 21342                           tablat	equ	0xFF5
 21343                           prodh	equ	0xFF4
 21344                           prodl	equ	0xFF3
 21345                           intcon	equ	0xFF2
 21346                           intcon3	equ	0xFF0
 21347                           indf0	equ	0xFEF
 21348                           postinc0	equ	0xFEE
 21349                           plusw0	equ	0xFEB
 21350                           fsr0h	equ	0xFEA
 21351                           fsr0l	equ	0xFE9
 21352                           wreg	equ	0xFE8
 21353                           indf1	equ	0xFE7
 21354                           postinc1	equ	0xFE6
 21355                           postdec1	equ	0xFE5
 21356                           plusw1	equ	0xFE3
 21357                           fsr1h	equ	0xFE2
 21358                           fsr1l	equ	0xFE1
 21359                           indf2	equ	0xFDF
 21360                           postinc2	equ	0xFDE
 21361                           postdec2	equ	0xFDD
 21362                           plusw2	equ	0xFDB
 21363                           fsr2h	equ	0xFDA
 21364                           fsr2l	equ	0xFD9
 21365                           status	equ	0xFD8
 21366                           
 21367 ;; *************** function _enc424j600_setNextPacketPointer *****************
 21368 ;; Defined at:
 21369 ;;		line 586 in file "src/enc424j600/ENC424J600.c"
 21370 ;; Parameters:    Size  Location     Type
 21371 ;;  ptr             2    0[BANK0 ] unsigned int 
 21372 ;; Auto vars:     Size  Location     Type
 21373 ;;		None
 21374 ;; Return value:  Size  Location     Type
 21375 ;;                  1    wreg      void 
 21376 ;; Registers used:
 21377 ;;		None
 21378 ;; Tracked objects:
 21379 ;;		On entry : 0/0
 21380 ;;		On exit  : 0/0
 21381 ;;		Unchanged: 0/0
 21382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21383 ;;      Params:         0       2       0       0       0       0       0       0       0
 21384 ;;      Locals:         0       0       0       0       0       0       0       0       0
 21385 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21386 ;;      Totals:         0       2       0       0       0       0       0       0       0
 21387 ;;Total ram usage:        2 bytes
 21388 ;; Hardware stack levels used:    1
 21389 ;; Hardware stack levels required when called:    4
 21390 ;; This function calls:
 21391 ;;		Nothing
 21392 ;; This function is called by:
 21393 ;;		_ethernetController_init
 21394 ;;		_ethernetController_updateNextPacketPointer
 21395 ;; This function uses a non-reentrant model
 21396 ;;
 21397                           
 21398                           	psect	text77
 21399  006E92                     __ptext77:
 21400                           	opt stack 0
 21401  006E92                     _enc424j600_setNextPacketPointer:
 21402                           	opt stack 23
 21403                           
 21404                           ;ENC424J600.c: 587: nextPacketPointer = ptr;
 21405                           
 21406                           ;incstack = 0
 21407  006E92  C060  F03A         	movff	enc424j600_setNextPacketPointer@ptr,_nextPacketPointer
 21408  006E96  C061  F03B         	movff	enc424j600_setNextPacketPointer@ptr+1,_nextPacketPointer+1
 21409  006E9A  0012               	return		;funcret
 21410  006E9C                     __end_of_enc424j600_setNextPacketPointer:
 21411                           	opt stack 0
 21412                           tblptru	equ	0xFF8
 21413                           tblptrh	equ	0xFF7
 21414                           tblptrl	equ	0xFF6
 21415                           tablat	equ	0xFF5
 21416                           prodh	equ	0xFF4
 21417                           prodl	equ	0xFF3
 21418                           intcon	equ	0xFF2
 21419                           intcon3	equ	0xFF0
 21420                           indf0	equ	0xFEF
 21421                           postinc0	equ	0xFEE
 21422                           plusw0	equ	0xFEB
 21423                           fsr0h	equ	0xFEA
 21424                           fsr0l	equ	0xFE9
 21425                           wreg	equ	0xFE8
 21426                           indf1	equ	0xFE7
 21427                           postinc1	equ	0xFE6
 21428                           postdec1	equ	0xFE5
 21429                           plusw1	equ	0xFE3
 21430                           fsr1h	equ	0xFE2
 21431                           fsr1l	equ	0xFE1
 21432                           indf2	equ	0xFDF
 21433                           postinc2	equ	0xFDE
 21434                           postdec2	equ	0xFDD
 21435                           plusw2	equ	0xFDB
 21436                           fsr2h	equ	0xFDA
 21437                           fsr2l	equ	0xFD9
 21438                           status	equ	0xFD8
 21439                           
 21440 ;; *************** function _enc424j600_enableReception *****************
 21441 ;; Defined at:
 21442 ;;		line 672 in file "src/enc424j600/ENC424J600.c"
 21443 ;; Parameters:    Size  Location     Type
 21444 ;;		None
 21445 ;; Auto vars:     Size  Location     Type
 21446 ;;		None
 21447 ;; Return value:  Size  Location     Type
 21448 ;;                  1    wreg      void 
 21449 ;; Registers used:
 21450 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21451 ;; Tracked objects:
 21452 ;;		On entry : 0/0
 21453 ;;		On exit  : 0/0
 21454 ;;		Unchanged: 0/0
 21455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21456 ;;      Params:         0       0       0       0       0       0       0       0       0
 21457 ;;      Locals:         0       0       0       0       0       0       0       0       0
 21458 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21459 ;;      Totals:         0       0       0       0       0       0       0       0       0
 21460 ;;Total ram usage:        0 bytes
 21461 ;; Hardware stack levels used:    1
 21462 ;; Hardware stack levels required when called:    7
 21463 ;; This function calls:
 21464 ;;		_enc424j600_writeSingleByte
 21465 ;; This function is called by:
 21466 ;;		_ethernetController_init
 21467 ;;		_ethernetController_enableReception
 21468 ;; This function uses a non-reentrant model
 21469 ;;
 21470                           
 21471                           	psect	text78
 21472  006E9C                     __ptext78:
 21473                           	opt stack 0
 21474  006E9C                     _enc424j600_enableReception:
 21475                           	opt stack 21
 21476                           
 21477                           ;ENC424J600.c: 673: enc424j600_writeSingleByte(0b11101000);
 21478                           
 21479                           ;incstack = 0
 21480  006E9C  0EE8               	movlw	232
 21481  006E9E  ECC5  F036         	call	_enc424j600_writeSingleByte
 21482  006EA2  0012               	return		;funcret
 21483  006EA4                     __end_of_enc424j600_enableReception:
 21484                           	opt stack 0
 21485                           tblptru	equ	0xFF8
 21486                           tblptrh	equ	0xFF7
 21487                           tblptrl	equ	0xFF6
 21488                           tablat	equ	0xFF5
 21489                           prodh	equ	0xFF4
 21490                           prodl	equ	0xFF3
 21491                           intcon	equ	0xFF2
 21492                           intcon3	equ	0xFF0
 21493                           indf0	equ	0xFEF
 21494                           postinc0	equ	0xFEE
 21495                           plusw0	equ	0xFEB
 21496                           fsr0h	equ	0xFEA
 21497                           fsr0l	equ	0xFE9
 21498                           wreg	equ	0xFE8
 21499                           indf1	equ	0xFE7
 21500                           postinc1	equ	0xFE6
 21501                           postdec1	equ	0xFE5
 21502                           plusw1	equ	0xFE3
 21503                           fsr1h	equ	0xFE2
 21504                           fsr1l	equ	0xFE1
 21505                           indf2	equ	0xFDF
 21506                           postinc2	equ	0xFDE
 21507                           postdec2	equ	0xFDD
 21508                           plusw2	equ	0xFDB
 21509                           fsr2h	equ	0xFDA
 21510                           fsr2l	equ	0xFD9
 21511                           status	equ	0xFD8
 21512                           
 21513 ;; *************** function _enc424j600_enableAutoMACInsertion *****************
 21514 ;; Defined at:
 21515 ;;		line 658 in file "src/enc424j600/ENC424J600.c"
 21516 ;; Parameters:    Size  Location     Type
 21517 ;;		None
 21518 ;; Auto vars:     Size  Location     Type
 21519 ;;  temp            1   14[BANK0 ] unsigned char 
 21520 ;; Return value:  Size  Location     Type
 21521 ;;                  1    wreg      void 
 21522 ;; Registers used:
 21523 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21524 ;; Tracked objects:
 21525 ;;		On entry : 0/0
 21526 ;;		On exit  : 0/0
 21527 ;;		Unchanged: 0/0
 21528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21529 ;;      Params:         0       0       0       0       0       0       0       0       0
 21530 ;;      Locals:         0       1       0       0       0       0       0       0       0
 21531 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21532 ;;      Totals:         0       1       0       0       0       0       0       0       0
 21533 ;;Total ram usage:        1 bytes
 21534 ;; Hardware stack levels used:    1
 21535 ;; Hardware stack levels required when called:    7
 21536 ;; This function calls:
 21537 ;;		_enc424j600_readControlRegisterUnbanked
 21538 ;;		_enc424j600_writeControlRegisterUnbanked
 21539 ;; This function is called by:
 21540 ;;		_ethernetController_init
 21541 ;; This function uses a non-reentrant model
 21542 ;;
 21543                           
 21544                           	psect	text79
 21545  006BAA                     __ptext79:
 21546                           	opt stack 0
 21547  006BAA                     _enc424j600_enableAutoMACInsertion:
 21548                           	opt stack 21
 21549                           
 21550                           ;ENC424J600.c: 659: uint8_t temp = 0;
 21551                           
 21552                           ;incstack = 0
 21553  006BAA  0E00               	movlw	0
 21554  006BAC  0100               	movlb	0	; () banked
 21555  006BAE  6F6E               	movwf	enc424j600_enableAutoMACInsertion@temp& (0+255),b
 21556                           
 21557                           ; BSR set to: 0
 21558                           ;ENC424J600.c: 660: enc424j600_readControlRegisterUnbanked(0x0F + 0x60, &temp);
 21559  006BB0  0E6E               	movlw	low enc424j600_enableAutoMACInsertion@temp
 21560  006BB2  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 21561  006BB4  0E00               	movlw	high enc424j600_enableAutoMACInsertion@temp
 21562  006BB6  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 21563  006BB8  0E6F               	movlw	111
 21564  006BBA  ECD7  F034         	call	_enc424j600_readControlRegisterUnbanked
 21565                           
 21566                           ;ENC424J600.c: 661: temp |= (1 << 5);
 21567  006BBE  0100               	movlb	0	; () banked
 21568  006BC0  8B6E               	bsf	enc424j600_enableAutoMACInsertion@temp& (0+255),5,b
 21569                           
 21570                           ; BSR set to: 0
 21571                           ;ENC424J600.c: 662: enc424j600_writeControlRegisterUnbanked(0x0F + 0x60, &temp);
 21572  006BC2  0E6E               	movlw	low enc424j600_enableAutoMACInsertion@temp
 21573  006BC4  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 21574  006BC6  0E00               	movlw	high enc424j600_enableAutoMACInsertion@temp
 21575  006BC8  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 21576  006BCA  0E6F               	movlw	111
 21577  006BCC  ECF2  F034         	call	_enc424j600_writeControlRegisterUnbanked
 21578  006BD0  0012               	return		;funcret
 21579  006BD2                     __end_of_enc424j600_enableAutoMACInsertion:
 21580                           	opt stack 0
 21581                           tblptru	equ	0xFF8
 21582                           tblptrh	equ	0xFF7
 21583                           tblptrl	equ	0xFF6
 21584                           tablat	equ	0xFF5
 21585                           prodh	equ	0xFF4
 21586                           prodl	equ	0xFF3
 21587                           intcon	equ	0xFF2
 21588                           intcon3	equ	0xFF0
 21589                           indf0	equ	0xFEF
 21590                           postinc0	equ	0xFEE
 21591                           plusw0	equ	0xFEB
 21592                           fsr0h	equ	0xFEA
 21593                           fsr0l	equ	0xFE9
 21594                           wreg	equ	0xFE8
 21595                           indf1	equ	0xFE7
 21596                           postinc1	equ	0xFE6
 21597                           postdec1	equ	0xFE5
 21598                           plusw1	equ	0xFE3
 21599                           fsr1h	equ	0xFE2
 21600                           fsr1l	equ	0xFE1
 21601                           indf2	equ	0xFDF
 21602                           postinc2	equ	0xFDE
 21603                           postdec2	equ	0xFDD
 21604                           plusw2	equ	0xFDB
 21605                           fsr2h	equ	0xFDA
 21606                           fsr2l	equ	0xFD9
 21607                           status	equ	0xFD8
 21608                           
 21609 ;; *************** function _ethernetController_getMTU *****************
 21610 ;; Defined at:
 21611 ;;		line 168 in file "src/enc424j600/ENC424J600.c"
 21612 ;; Parameters:    Size  Location     Type
 21613 ;;		None
 21614 ;; Auto vars:     Size  Location     Type
 21615 ;;		None
 21616 ;; Return value:  Size  Location     Type
 21617 ;;                  2    0[BANK0 ] unsigned int 
 21618 ;; Registers used:
 21619 ;;		wreg, status,2
 21620 ;; Tracked objects:
 21621 ;;		On entry : 0/0
 21622 ;;		On exit  : 0/0
 21623 ;;		Unchanged: 0/0
 21624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21625 ;;      Params:         0       2       0       0       0       0       0       0       0
 21626 ;;      Locals:         0       0       0       0       0       0       0       0       0
 21627 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21628 ;;      Totals:         0       2       0       0       0       0       0       0       0
 21629 ;;Total ram usage:        2 bytes
 21630 ;; Hardware stack levels used:    1
 21631 ;; Hardware stack levels required when called:    4
 21632 ;; This function calls:
 21633 ;;		Nothing
 21634 ;; This function is called by:
 21635 ;;		_handleStackBackgroundTasks
 21636 ;; This function uses a non-reentrant model
 21637 ;;
 21638                           
 21639                           	psect	text80
 21640  006E7C                     __ptext80:
 21641                           	opt stack 0
 21642  006E7C                     _ethernetController_getMTU:
 21643                           	opt stack 25
 21644                           
 21645                           ;ENC424J600.c: 169: return 1500;
 21646                           
 21647                           ;incstack = 0
 21648  006E7C  0E05               	movlw	5
 21649  006E7E  0100               	movlb	0	; () banked
 21650  006E80  6F61               	movwf	(?_ethernetController_getMTU+1)& (0+255),b
 21651  006E82  0EDC               	movlw	220
 21652  006E84  6F60               	movwf	?_ethernetController_getMTU& (0+255),b
 21653  006E86  0012               	return	
 21654  006E88                     __end_of_ethernetController_getMTU:
 21655                           	opt stack 0
 21656                           tblptru	equ	0xFF8
 21657                           tblptrh	equ	0xFF7
 21658                           tblptrl	equ	0xFF6
 21659                           tablat	equ	0xFF5
 21660                           prodh	equ	0xFF4
 21661                           prodl	equ	0xFF3
 21662                           intcon	equ	0xFF2
 21663                           intcon3	equ	0xFF0
 21664                           indf0	equ	0xFEF
 21665                           postinc0	equ	0xFEE
 21666                           plusw0	equ	0xFEB
 21667                           fsr0h	equ	0xFEA
 21668                           fsr0l	equ	0xFE9
 21669                           wreg	equ	0xFE8
 21670                           indf1	equ	0xFE7
 21671                           postinc1	equ	0xFE6
 21672                           postdec1	equ	0xFE5
 21673                           plusw1	equ	0xFE3
 21674                           fsr1h	equ	0xFE2
 21675                           fsr1l	equ	0xFE1
 21676                           indf2	equ	0xFDF
 21677                           postinc2	equ	0xFDE
 21678                           postdec2	equ	0xFDD
 21679                           plusw2	equ	0xFDB
 21680                           fsr2h	equ	0xFDA
 21681                           fsr2l	equ	0xFD9
 21682                           status	equ	0xFD8
 21683                           
 21684 ;; *************** function _ethernetController_disableEthernet *****************
 21685 ;; Defined at:
 21686 ;;		line 197 in file "src/enc424j600/ENC424J600.c"
 21687 ;; Parameters:    Size  Location     Type
 21688 ;;		None
 21689 ;; Auto vars:     Size  Location     Type
 21690 ;;		None
 21691 ;; Return value:  Size  Location     Type
 21692 ;;                  1    wreg      void 
 21693 ;; Registers used:
 21694 ;;		None
 21695 ;; Tracked objects:
 21696 ;;		On entry : 0/0
 21697 ;;		On exit  : 0/0
 21698 ;;		Unchanged: 0/0
 21699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21700 ;;      Params:         0       0       0       0       0       0       0       0       0
 21701 ;;      Locals:         0       0       0       0       0       0       0       0       0
 21702 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21703 ;;      Totals:         0       0       0       0       0       0       0       0       0
 21704 ;;Total ram usage:        0 bytes
 21705 ;; Hardware stack levels used:    1
 21706 ;; Hardware stack levels required when called:    4
 21707 ;; This function calls:
 21708 ;;		Nothing
 21709 ;; This function is called by:
 21710 ;;		_handleStackBackgroundTasks
 21711 ;; This function uses a non-reentrant model
 21712 ;;
 21713                           
 21714                           	psect	text81
 21715  006EAE                     __ptext81:
 21716                           	opt stack 0
 21717  006EAE                     _ethernetController_disableEthernet:
 21718                           	opt stack 25
 21719                           
 21720                           ; BSR set to: 0
 21721                           ;incstack = 0
 21722  006EAE  0012               	return		;funcret
 21723  006EB0                     __end_of_ethernetController_disableEthernet:
 21724                           	opt stack 0
 21725                           tblptru	equ	0xFF8
 21726                           tblptrh	equ	0xFF7
 21727                           tblptrl	equ	0xFF6
 21728                           tablat	equ	0xFF5
 21729                           prodh	equ	0xFF4
 21730                           prodl	equ	0xFF3
 21731                           intcon	equ	0xFF2
 21732                           intcon3	equ	0xFF0
 21733                           indf0	equ	0xFEF
 21734                           postinc0	equ	0xFEE
 21735                           plusw0	equ	0xFEB
 21736                           fsr0h	equ	0xFEA
 21737                           fsr0l	equ	0xFE9
 21738                           wreg	equ	0xFE8
 21739                           indf1	equ	0xFE7
 21740                           postinc1	equ	0xFE6
 21741                           postdec1	equ	0xFE5
 21742                           plusw1	equ	0xFE3
 21743                           fsr1h	equ	0xFE2
 21744                           fsr1l	equ	0xFE1
 21745                           indf2	equ	0xFDF
 21746                           postinc2	equ	0xFDE
 21747                           postdec2	equ	0xFDD
 21748                           plusw2	equ	0xFDB
 21749                           fsr2h	equ	0xFDA
 21750                           fsr2l	equ	0xFD9
 21751                           status	equ	0xFD8
 21752                           
 21753 ;; *************** function _ethernetController_clearInterruptFlag *****************
 21754 ;; Defined at:
 21755 ;;		line 330 in file "src/enc424j600/ENC424J600.c"
 21756 ;; Parameters:    Size  Location     Type
 21757 ;;  flag            1    wreg     unsigned char 
 21758 ;; Auto vars:     Size  Location     Type
 21759 ;;  flag            1   18[BANK0 ] unsigned char 
 21760 ;; Return value:  Size  Location     Type
 21761 ;;                  1    wreg      void 
 21762 ;; Registers used:
 21763 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21764 ;; Tracked objects:
 21765 ;;		On entry : 0/0
 21766 ;;		On exit  : 0/0
 21767 ;;		Unchanged: 0/0
 21768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21769 ;;      Params:         0       0       0       0       0       0       0       0       0
 21770 ;;      Locals:         0       1       0       0       0       0       0       0       0
 21771 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21772 ;;      Totals:         0       1       0       0       0       0       0       0       0
 21773 ;;Total ram usage:        1 bytes
 21774 ;; Hardware stack levels used:    1
 21775 ;; Hardware stack levels required when called:    8
 21776 ;; This function calls:
 21777 ;;		_enc424j600_clearInterruptFlag
 21778 ;; This function is called by:
 21779 ;;		_handleStackBackgroundTasks
 21780 ;; This function uses a non-reentrant model
 21781 ;;
 21782                           
 21783                           	psect	text82
 21784  006E6E                     __ptext82:
 21785                           	opt stack 0
 21786  006E6E                     _ethernetController_clearInterruptFlag:
 21787                           	opt stack 21
 21788                           
 21789                           ;incstack = 0
 21790                           ;ethernetController_clearInterruptFlag@flag stored from wreg
 21791  006E6E  0100               	movlb	0	; () banked
 21792  006E70  6F72               	movwf	ethernetController_clearInterruptFlag@flag& (0+255),b
 21793                           
 21794                           ;ENC424J600.c: 331: enc424j600_clearInterruptFlag(flag);
 21795  006E72  0100               	movlb	0	; () banked
 21796  006E74  5172               	movf	ethernetController_clearInterruptFlag@flag& (0+255),w,b
 21797  006E76  EC4B  F02E         	call	_enc424j600_clearInterruptFlag
 21798  006E7A  0012               	return		;funcret
 21799  006E7C                     __end_of_ethernetController_clearInterruptFlag:
 21800                           	opt stack 0
 21801                           tblptru	equ	0xFF8
 21802                           tblptrh	equ	0xFF7
 21803                           tblptrl	equ	0xFF6
 21804                           tablat	equ	0xFF5
 21805                           prodh	equ	0xFF4
 21806                           prodl	equ	0xFF3
 21807                           intcon	equ	0xFF2
 21808                           intcon3	equ	0xFF0
 21809                           indf0	equ	0xFEF
 21810                           postinc0	equ	0xFEE
 21811                           plusw0	equ	0xFEB
 21812                           fsr0h	equ	0xFEA
 21813                           fsr0l	equ	0xFE9
 21814                           wreg	equ	0xFE8
 21815                           indf1	equ	0xFE7
 21816                           postinc1	equ	0xFE6
 21817                           postdec1	equ	0xFE5
 21818                           plusw1	equ	0xFE3
 21819                           fsr1h	equ	0xFE2
 21820                           fsr1l	equ	0xFE1
 21821                           indf2	equ	0xFDF
 21822                           postinc2	equ	0xFDE
 21823                           postdec2	equ	0xFDD
 21824                           plusw2	equ	0xFDB
 21825                           fsr2h	equ	0xFDA
 21826                           fsr2l	equ	0xFD9
 21827                           status	equ	0xFD8
 21828                           
 21829 ;; *************** function _enc424j600_clearInterruptFlag *****************
 21830 ;; Defined at:
 21831 ;;		line 703 in file "src/enc424j600/ENC424J600.c"
 21832 ;; Parameters:    Size  Location     Type
 21833 ;;  flag            1    wreg     unsigned char 
 21834 ;; Auto vars:     Size  Location     Type
 21835 ;;  flag            1   16[BANK0 ] unsigned char 
 21836 ;;  temp            1   17[BANK0 ] unsigned char 
 21837 ;; Return value:  Size  Location     Type
 21838 ;;                  1    wreg      void 
 21839 ;; Registers used:
 21840 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21841 ;; Tracked objects:
 21842 ;;		On entry : 0/0
 21843 ;;		On exit  : 0/0
 21844 ;;		Unchanged: 0/0
 21845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21846 ;;      Params:         0       0       0       0       0       0       0       0       0
 21847 ;;      Locals:         0       2       0       0       0       0       0       0       0
 21848 ;;      Temps:          0       2       0       0       0       0       0       0       0
 21849 ;;      Totals:         0       4       0       0       0       0       0       0       0
 21850 ;;Total ram usage:        4 bytes
 21851 ;; Hardware stack levels used:    1
 21852 ;; Hardware stack levels required when called:    7
 21853 ;; This function calls:
 21854 ;;		_enc424j600_readControlRegisterUnbanked
 21855 ;;		_enc424j600_writeControlRegisterUnbanked
 21856 ;; This function is called by:
 21857 ;;		_ethernetController_clearInterruptFlag
 21858 ;; This function uses a non-reentrant model
 21859 ;;
 21860                           
 21861                           	psect	text83
 21862  005C96                     __ptext83:
 21863                           	opt stack 0
 21864  005C96                     _enc424j600_clearInterruptFlag:
 21865                           	opt stack 21
 21866                           
 21867                           ;incstack = 0
 21868                           ;enc424j600_clearInterruptFlag@flag stored from wreg
 21869  005C96  0100               	movlb	0	; () banked
 21870  005C98  6F70               	movwf	enc424j600_clearInterruptFlag@flag& (0+255),b
 21871                           
 21872                           ;ENC424J600.c: 704: uint8_t temp;
 21873                           ;ENC424J600.c: 705: if (flag < 8) {
 21874  005C9A  0E08               	movlw	8
 21875  005C9C  0100               	movlb	0	; () banked
 21876  005C9E  6170               	cpfslt	enc424j600_clearInterruptFlag@flag& (0+255),b
 21877  005CA0  D01E               	goto	l312
 21878                           
 21879                           ; BSR set to: 0
 21880                           ;ENC424J600.c: 706: enc424j600_readControlRegisterUnbanked(0x1C + 0x00, &temp);
 21881  005CA2  0E71               	movlw	low enc424j600_clearInterruptFlag@temp
 21882  005CA4  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 21883  005CA6  0E00               	movlw	high enc424j600_clearInterruptFlag@temp
 21884  005CA8  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 21885  005CAA  0E1C               	movlw	28
 21886  005CAC  ECD7  F034         	call	_enc424j600_readControlRegisterUnbanked
 21887                           
 21888                           ;ENC424J600.c: 707: temp &= ~(1 << flag);
 21889  005CB0  C070  F06E         	movff	enc424j600_clearInterruptFlag@flag,??_enc424j600_clearInterruptFlag
 21890  005CB4  0E01               	movlw	1
 21891  005CB6  0100               	movlb	0	; () banked
 21892  005CB8  6F6F               	movwf	(??_enc424j600_clearInterruptFlag+1)& (0+255),b
 21893  005CBA  2B6E               	incf	??_enc424j600_clearInterruptFlag& (0+255),f,b
 21894  005CBC  D002               	goto	u14124
 21895  005CBE                     u14125:
 21896  005CBE  90D8               	bcf	status,0,c
 21897  005CC0  376F               	rlcf	(??_enc424j600_clearInterruptFlag+1)& (0+255),f,b
 21898  005CC2                     u14124:
 21899  005CC2  2F6E               	decfsz	??_enc424j600_clearInterruptFlag& (0+255),f,b
 21900  005CC4  D7FC               	goto	u14125
 21901  005CC6  0100               	movlb	0	; () banked
 21902  005CC8  516F               	movf	(??_enc424j600_clearInterruptFlag+1)& (0+255),w,b
 21903  005CCA  0AFF               	xorlw	255
 21904  005CCC  1771               	andwf	enc424j600_clearInterruptFlag@temp& (0+255),f,b
 21905                           
 21906                           ; BSR set to: 0
 21907                           ;ENC424J600.c: 708: enc424j600_writeControlRegisterUnbanked(0x1C + 0x00, &temp);
 21908  005CCE  0E71               	movlw	low enc424j600_clearInterruptFlag@temp
 21909  005CD0  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 21910  005CD2  0E00               	movlw	high enc424j600_clearInterruptFlag@temp
 21911  005CD4  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 21912  005CD6  0E1C               	movlw	28
 21913  005CD8  ECF2  F034         	call	_enc424j600_writeControlRegisterUnbanked
 21914                           
 21915                           ;ENC424J600.c: 709: } else {
 21916  005CDC  0012               	return	
 21917  005CDE                     l312:
 21918                           
 21919                           ;ENC424J600.c: 710: flag -= 8;
 21920  005CDE  0E08               	movlw	8
 21921  005CE0  0100               	movlb	0	; () banked
 21922  005CE2  5F70               	subwf	enc424j600_clearInterruptFlag@flag& (0+255),f,b
 21923                           
 21924                           ; BSR set to: 0
 21925                           ;ENC424J600.c: 711: enc424j600_readControlRegisterUnbanked(0x1D + 0x00, &temp);
 21926  005CE4  0E71               	movlw	low enc424j600_clearInterruptFlag@temp
 21927  005CE6  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 21928  005CE8  0E00               	movlw	high enc424j600_clearInterruptFlag@temp
 21929  005CEA  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 21930  005CEC  0E1D               	movlw	29
 21931  005CEE  ECD7  F034         	call	_enc424j600_readControlRegisterUnbanked
 21932                           
 21933                           ;ENC424J600.c: 712: temp &= ~(1 << flag);
 21934  005CF2  C070  F06E         	movff	enc424j600_clearInterruptFlag@flag,??_enc424j600_clearInterruptFlag
 21935  005CF6  0E01               	movlw	1
 21936  005CF8  0100               	movlb	0	; () banked
 21937  005CFA  6F6F               	movwf	(??_enc424j600_clearInterruptFlag+1)& (0+255),b
 21938  005CFC  2B6E               	incf	??_enc424j600_clearInterruptFlag& (0+255),f,b
 21939  005CFE  D002               	goto	u14134
 21940  005D00                     u14135:
 21941  005D00  90D8               	bcf	status,0,c
 21942  005D02  376F               	rlcf	(??_enc424j600_clearInterruptFlag+1)& (0+255),f,b
 21943  005D04                     u14134:
 21944  005D04  2F6E               	decfsz	??_enc424j600_clearInterruptFlag& (0+255),f,b
 21945  005D06  D7FC               	goto	u14135
 21946  005D08  0100               	movlb	0	; () banked
 21947  005D0A  516F               	movf	(??_enc424j600_clearInterruptFlag+1)& (0+255),w,b
 21948  005D0C  0AFF               	xorlw	255
 21949  005D0E  1771               	andwf	enc424j600_clearInterruptFlag@temp& (0+255),f,b
 21950                           
 21951                           ;ENC424J600.c: 713: enc424j600_writeControlRegisterUnbanked(0x1D + 0x00, &temp);
 21952  005D10  0E71               	movlw	low enc424j600_clearInterruptFlag@temp
 21953  005D12  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 21954  005D14  0E00               	movlw	high enc424j600_clearInterruptFlag@temp
 21955  005D16  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 21956  005D18  0E1D               	movlw	29
 21957  005D1A  ECF2  F034         	call	_enc424j600_writeControlRegisterUnbanked
 21958  005D1E  0012               	return	
 21959  005D20                     __end_of_enc424j600_clearInterruptFlag:
 21960                           	opt stack 0
 21961                           tblptru	equ	0xFF8
 21962                           tblptrh	equ	0xFF7
 21963                           tblptrl	equ	0xFF6
 21964                           tablat	equ	0xFF5
 21965                           prodh	equ	0xFF4
 21966                           prodl	equ	0xFF3
 21967                           intcon	equ	0xFF2
 21968                           intcon3	equ	0xFF0
 21969                           indf0	equ	0xFEF
 21970                           postinc0	equ	0xFEE
 21971                           plusw0	equ	0xFEB
 21972                           fsr0h	equ	0xFEA
 21973                           fsr0l	equ	0xFE9
 21974                           wreg	equ	0xFE8
 21975                           indf1	equ	0xFE7
 21976                           postinc1	equ	0xFE6
 21977                           postdec1	equ	0xFE5
 21978                           plusw1	equ	0xFE3
 21979                           fsr1h	equ	0xFE2
 21980                           fsr1l	equ	0xFE1
 21981                           indf2	equ	0xFDF
 21982                           postinc2	equ	0xFDE
 21983                           postdec2	equ	0xFDD
 21984                           plusw2	equ	0xFDB
 21985                           fsr2h	equ	0xFDA
 21986                           fsr2l	equ	0xFD9
 21987                           status	equ	0xFD8
 21988                           
 21989 ;; *************** function _arp_init *****************
 21990 ;; Defined at:
 21991 ;;		line 516 in file "src/stack/protocols/arp.c"
 21992 ;; Parameters:    Size  Location     Type
 21993 ;;		None
 21994 ;; Auto vars:     Size  Location     Type
 21995 ;;  i               1   13[BANK0 ] unsigned char 
 21996 ;;  mac             6    3[BANK0 ] struct macaddress
 21997 ;;  ip              4    9[BANK0 ] struct ipv4_address
 21998 ;; Return value:  Size  Location     Type
 21999 ;;                  1    wreg      void 
 22000 ;; Registers used:
 22001 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22002 ;; Tracked objects:
 22003 ;;		On entry : 0/0
 22004 ;;		On exit  : 0/0
 22005 ;;		Unchanged: 0/0
 22006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22007 ;;      Params:         0       0       0       0       0       0       0       0       0
 22008 ;;      Locals:         0      11       0       0       0       0       0       0       0
 22009 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22010 ;;      Totals:         0      11       0       0       0       0       0       0       0
 22011 ;;Total ram usage:       11 bytes
 22012 ;; Hardware stack levels used:    1
 22013 ;; Hardware stack levels required when called:    5
 22014 ;; This function calls:
 22015 ;;		_ipv4_setToAllZero
 22016 ;;		_mac_setAllZero
 22017 ;; This function is called by:
 22018 ;;		_handleStackBackgroundTasks
 22019 ;;		_stack_init
 22020 ;; This function uses a non-reentrant model
 22021 ;;
 22022                           
 22023                           	psect	text84
 22024  005A5C                     __ptext84:
 22025                           	opt stack 0
 22026  005A5C                     _arp_init:
 22027                           	opt stack 24
 22028                           
 22029                           ;arp.c: 517: ipv4_address_t ip;
 22030                           ;arp.c: 518: macaddress_t mac;
 22031                           ;arp.c: 519: ipv4_setToAllZero(&ip);
 22032                           
 22033                           ;incstack = 0
 22034  005A5C  0E69               	movlw	low arp_init@ip
 22035  005A5E  0100               	movlb	0	; () banked
 22036  005A60  6F60               	movwf	ipv4_setToAllZero@ip& (0+255),b
 22037  005A62  0E00               	movlw	high arp_init@ip
 22038  005A64  6F61               	movwf	(ipv4_setToAllZero@ip+1)& (0+255),b
 22039  005A66  EC11  F036         	call	_ipv4_setToAllZero	;wreg free
 22040                           
 22041                           ;arp.c: 520: mac_setAllZero(&mac);
 22042  005A6A  0E63               	movlw	low arp_init@mac
 22043  005A6C  0100               	movlb	0	; () banked
 22044  005A6E  6F60               	movwf	mac_setAllZero@mac& (0+255),b
 22045  005A70  0E00               	movlw	high arp_init@mac
 22046  005A72  6F61               	movwf	(mac_setAllZero@mac+1)& (0+255),b
 22047  005A74  EC24  F036         	call	_mac_setAllZero	;wreg free
 22048                           
 22049                           ;arp.c: 521: for (uint8_t i = 0; i < 8u; i++) {
 22050  005A78  0E00               	movlw	0
 22051  005A7A  0100               	movlb	0	; () banked
 22052  005A7C  6F6D               	movwf	arp_init@i& (0+255),b
 22053  005A7E                     l12116:
 22054                           
 22055                           ; BSR set to: 0
 22056  005A7E  0E07               	movlw	7
 22057  005A80  656D               	cpfsgt	arp_init@i& (0+255),b
 22058  005A82  D001               	goto	l1078
 22059  005A84  0012               	return	
 22060  005A86                     l1078:
 22061                           
 22062                           ; BSR set to: 0
 22063                           ;arp.c: 522: arp_table[i].ip = ip;
 22064                           
 22065                           ; BSR set to: 0
 22066  005A86  516D               	movf	arp_init@i& (0+255),w,b
 22067  005A88  0D0E               	mullw	14
 22068  005A8A  0E7C               	movlw	low _arp_table
 22069  005A8C  24F3               	addwf	prodl,w,c
 22070  005A8E  6ED9               	movwf	fsr2l,c
 22071  005A90  0E04               	movlw	high _arp_table
 22072  005A92  20F4               	addwfc	prodh,w,c
 22073  005A94  6EDA               	movwf	fsr2h,c
 22074  005A96  C069  FFDE         	movff	arp_init@ip,postinc2
 22075  005A9A  C06A  FFDE         	movff	arp_init@ip+1,postinc2
 22076  005A9E  C06B  FFDE         	movff	arp_init@ip+2,postinc2
 22077  005AA2  C06C  FFDE         	movff	arp_init@ip+3,postinc2
 22078                           
 22079                           ; BSR set to: 0
 22080                           ;arp.c: 523: arp_table[i].mac = mac;
 22081  005AA6  EE20  F063         	lfsr	2,arp_init@mac
 22082  005AAA  516D               	movf	arp_init@i& (0+255),w,b
 22083  005AAC  0D0E               	mullw	14
 22084  005AAE  0E04               	movlw	4
 22085  005AB0  26F3               	addwf	prodl,f,c
 22086  005AB2  0E00               	movlw	0
 22087  005AB4  22F4               	addwfc	prodh,f,c
 22088  005AB6  0E7C               	movlw	low _arp_table
 22089  005AB8  24F3               	addwf	prodl,w,c
 22090  005ABA  6EE1               	movwf	fsr1l,c
 22091  005ABC  0E04               	movlw	high _arp_table
 22092  005ABE  20F4               	addwfc	prodh,w,c
 22093  005AC0  6EE2               	movwf	fsr1h,c
 22094  005AC2  0E05               	movlw	5
 22095  005AC4                     u15011:
 22096  005AC4  CFDB FFE3          	movff	plusw2,plusw1
 22097  005AC8  06E8               	decf	wreg,f,c
 22098  005ACA  E2FC               	bc	u15011
 22099                           
 22100                           ; BSR set to: 0
 22101                           ;arp.c: 524: arp_table[i].timeCreated = 0;
 22102  005ACC  516D               	movf	arp_init@i& (0+255),w,b
 22103  005ACE  0D0E               	mullw	14
 22104  005AD0  0E0A               	movlw	10
 22105  005AD2  26F3               	addwf	prodl,f,c
 22106  005AD4  0E00               	movlw	0
 22107  005AD6  22F4               	addwfc	prodh,f,c
 22108  005AD8  0E7C               	movlw	low _arp_table
 22109  005ADA  24F3               	addwf	prodl,w,c
 22110  005ADC  6ED9               	movwf	fsr2l,c
 22111  005ADE  0E04               	movlw	high _arp_table
 22112  005AE0  20F4               	addwfc	prodh,w,c
 22113  005AE2  6EDA               	movwf	fsr2h,c
 22114  005AE4  6ADE               	clrf	postinc2,c
 22115  005AE6  6ADE               	clrf	postinc2,c
 22116  005AE8  6ADE               	clrf	postinc2,c
 22117  005AEA  6ADD               	clrf	postdec2,c
 22118                           
 22119                           ; BSR set to: 0
 22120  005AEC  2B6D               	incf	arp_init@i& (0+255),f,b
 22121  005AEE  D7C7               	goto	l12116
 22122  005AF0                     __end_of_arp_init:
 22123                           	opt stack 0
 22124                           tblptru	equ	0xFF8
 22125                           tblptrh	equ	0xFF7
 22126                           tblptrl	equ	0xFF6
 22127                           tablat	equ	0xFF5
 22128                           prodh	equ	0xFF4
 22129                           prodl	equ	0xFF3
 22130                           intcon	equ	0xFF2
 22131                           intcon3	equ	0xFF0
 22132                           indf0	equ	0xFEF
 22133                           postinc0	equ	0xFEE
 22134                           plusw0	equ	0xFEB
 22135                           fsr0h	equ	0xFEA
 22136                           fsr0l	equ	0xFE9
 22137                           wreg	equ	0xFE8
 22138                           indf1	equ	0xFE7
 22139                           postinc1	equ	0xFE6
 22140                           postdec1	equ	0xFE5
 22141                           plusw1	equ	0xFE3
 22142                           fsr1h	equ	0xFE2
 22143                           fsr1l	equ	0xFE1
 22144                           indf2	equ	0xFDF
 22145                           postinc2	equ	0xFDE
 22146                           postdec2	equ	0xFDD
 22147                           plusw2	equ	0xFDB
 22148                           fsr2h	equ	0xFDA
 22149                           fsr2l	equ	0xFD9
 22150                           status	equ	0xFD8
 22151                           
 22152 ;; *************** function _arp_background *****************
 22153 ;; Defined at:
 22154 ;;		line 394 in file "src/stack/protocols/arp.c"
 22155 ;; Parameters:    Size  Location     Type
 22156 ;;  link            1    wreg     enum E238
 22157 ;; Auto vars:     Size  Location     Type
 22158 ;;  link            1   86[BANK1 ] enum E238
 22159 ;;  errProbe        3   90[BANK1 ] struct error
 22160 ;;  errAnnounce     3   87[BANK1 ] struct error
 22161 ;; Return value:  Size  Location     Type
 22162 ;;                  3   81[BANK1 ] struct error
 22163 ;; Registers used:
 22164 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22165 ;; Tracked objects:
 22166 ;;		On entry : 0/0
 22167 ;;		On exit  : 0/0
 22168 ;;		Unchanged: 0/0
 22169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22170 ;;      Params:         0       0       3       0       0       0       0       0       0
 22171 ;;      Locals:         0       0       7       0       0       0       0       0       0
 22172 ;;      Temps:          0       0       2       0       0       0       0       0       0
 22173 ;;      Totals:         0       0      12       0       0       0       0       0       0
 22174 ;;Total ram usage:       12 bytes
 22175 ;; Hardware stack levels used:    1
 22176 ;; Hardware stack levels required when called:   12
 22177 ;; This function calls:
 22178 ;;		_arp_gratuitous
 22179 ;;		_arp_probe
 22180 ;;		_ipv4_SrcAddrChanged
 22181 ;;		_ipv4_getPreliminaryIPSourceAddress
 22182 ;; This function is called by:
 22183 ;;		_handleStackBackgroundTasks
 22184 ;; This function uses a non-reentrant model
 22185 ;;
 22186                           
 22187                           	psect	text85
 22188  004B72                     __ptext85:
 22189                           	opt stack 0
 22190  004B72                     _arp_background:
 22191                           	opt stack 17
 22192                           
 22193                           ; BSR set to: 0
 22194                           ;incstack = 0
 22195                           ;arp_background@link stored from wreg
 22196  004B72  0101               	movlb	1	; () banked
 22197  004B74  6F56               	movwf	arp_background@link& (0+255),b
 22198                           
 22199                           ;arp.c: 395: error_t static err;
 22200                           ;arp.c: 396: error_t errProbe;
 22201                           ;arp.c: 397: error_t errAnnounce;
 22202                           ;arp.c: 398: bool_t static fAnnounce = 0u;
 22203                           ;arp.c: 399: int8_t static state = 0;
 22204                           ;arp.c: 400: ipv4_address_t static ipPreliminary;
 22205                           ;arp.c: 401: err.code = ERROR_ARP_WAITING;
 22206  004B76  0E01               	movlw	1
 22207  004B78  6E49               	movwf	arp_background@err+2,c
 22208  004B7A  0E91               	movlw	145
 22209  004B7C  6E48               	movwf	arp_background@err+1,c
 22210                           
 22211                           ;arp.c: 402: err.module = ERROR_MODULE_ARP;
 22212  004B7E  0E03               	movlw	3
 22213  004B80  6E47               	movwf	arp_background@err,c
 22214                           
 22215                           ;arp.c: 404: switch (state) {
 22216  004B82  D074               	goto	l1044
 22217  004B84                     
 22218                           ;arp.c: 408: ipPreliminary = ipv4_getPreliminaryIPSourceAddress();
 22219  004B84  ECF7  F036         	call	_ipv4_getPreliminaryIPSourceAddress	;wreg free
 22220  004B88  C060  F2C0         	movff	?_ipv4_getPreliminaryIPSourceAddress,arp_background@ipPreliminary
 22221  004B8C  C061  F2C1         	movff	?_ipv4_getPreliminaryIPSourceAddress+1,arp_background@ipPreliminary+1
 22222  004B90  C062  F2C2         	movff	?_ipv4_getPreliminaryIPSourceAddress+2,arp_background@ipPreliminary+2
 22223  004B94  C063  F2C3         	movff	?_ipv4_getPreliminaryIPSourceAddress+3,arp_background@ipPreliminary+3
 22224                           
 22225                           ;arp.c: 409: if (ipv4_SrcAddrChanged(&err)) {
 22226  004B98  0E47               	movlw	low arp_background@err
 22227  004B9A  0100               	movlb	0	; () banked
 22228  004B9C  6F60               	movwf	ipv4_SrcAddrChanged@err& (0+255),b
 22229  004B9E  0E00               	movlw	high arp_background@err
 22230  004BA0  6F61               	movwf	(ipv4_SrcAddrChanged@err+1)& (0+255),b
 22231  004BA2  ECDB  F036         	call	_ipv4_SrcAddrChanged	;wreg free
 22232  004BA6  0100               	movlb	0	; () banked
 22233  004BA8  A0D8               	btfss	status,0,c
 22234  004BAA  D031               	goto	l1049
 22235                           
 22236                           ; BSR set to: 0
 22237                           ;arp.c: 410: errProbe.code = arp_probe(ipPreliminary, link).code;
 22238  004BAC  C2C0  F134         	movff	arp_background@ipPreliminary,arp_probe@ipTarget
 22239  004BB0  C2C1  F135         	movff	arp_background@ipPreliminary+1,arp_probe@ipTarget+1
 22240  004BB4  C2C2  F136         	movff	arp_background@ipPreliminary+2,arp_probe@ipTarget+2
 22241  004BB8  C2C3  F137         	movff	arp_background@ipPreliminary+3,arp_probe@ipTarget+3
 22242  004BBC  C156  F138         	movff	arp_background@link,arp_probe@link
 22243  004BC0  EC8F  F017         	call	_arp_probe	;wreg free
 22244  004BC4  0E34               	movlw	low ?_arp_probe
 22245  004BC6  6ED9               	movwf	fsr2l,c
 22246  004BC8  0E01               	movlw	high ?_arp_probe
 22247  004BCA  6EDA               	movwf	fsr2h,c
 22248  004BCC  0E01               	movlw	1
 22249  004BCE  26D9               	addwf	fsr2l,f,c
 22250  004BD0  0E00               	movlw	0
 22251  004BD2  22DA               	addwfc	fsr2h,f,c
 22252  004BD4  CFDE F15B          	movff	postinc2,arp_background@errProbe+1
 22253  004BD8  CFDD F15C          	movff	postdec2,arp_background@errProbe+2
 22254                           
 22255                           ;arp.c: 411: switch (errProbe.code) {
 22256  004BDC  D003               	goto	l1047
 22257  004BDE                     
 22258                           ;arp.c: 421: state = 1;
 22259  004BDE  0E01               	movlw	1
 22260  004BE0  6E3E               	movwf	arp_background@state,c
 22261                           
 22262                           ;arp.c: 435: }
 22263                           
 22264                           ;arp.c: 434: break;
 22265                           
 22266                           ;arp.c: 430: default:
 22267                           
 22268                           ;arp.c: 429: break;
 22269                           
 22270                           ;arp.c: 425: case ERROR_ARP_CONNECTION_FAILED:
 22271                           
 22272                           ;arp.c: 424: break;
 22273                           
 22274                           ;arp.c: 423: case ERROR_ARP_WAITING:
 22275                           
 22276                           ;arp.c: 422: break;
 22277  004BE2  D015               	goto	l1049
 22278  004BE4                     l1047:
 22279  004BE4  EE21  F05B         	lfsr	2,arp_background@errProbe+1
 22280  004BE8  CFDE F154          	movff	postinc2,??_arp_background
 22281  004BEC  CFDD F155          	movff	postdec2,??_arp_background+1
 22282                           
 22283                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 22284                           ; Switch size 1, requested type "space"
 22285                           ; Number of cases is 1, Range of values is 1 to 1
 22286                           ; switch strategies available:
 22287                           ; Name         Instructions Cycles
 22288                           ; simple_byte            4     3 (average)
 22289                           ;	Chosen strategy is simple_byte
 22290  004BF0  0101               	movlb	1	; () banked
 22291  004BF2  5155               	movf	(??_arp_background+1)& (0+255),w,b
 22292  004BF4  0A01               	xorlw	1	; case 1
 22293  004BF6  A4D8               	btfss	status,2,c
 22294  004BF8  D00A               	goto	l1049
 22295                           
 22296                           ; BSR set to: 1
 22297                           ; Switch size 1, requested type "space"
 22298                           ; Number of cases is 4, Range of values is 145 to 151
 22299                           ; switch strategies available:
 22300                           ; Name         Instructions Cycles
 22301                           ; simple_byte           13     7 (average)
 22302                           ;	Chosen strategy is simple_byte
 22303  004BFA  5154               	movf	??_arp_background& (0+255),w,b
 22304  004BFC  0A91               	xorlw	145	; case 145
 22305  004BFE  B4D8               	btfsc	status,2,c
 22306  004C00  D006               	goto	l1049
 22307  004C02  0A02               	xorlw	2	; case 147
 22308  004C04  B4D8               	btfsc	status,2,c
 22309  004C06  D7EB               	goto	l1050
 22310  004C08  0A05               	xorlw	5	; case 150
 22311  004C0A  A4D8               	btfss	status,2,c
 22312  004C0C  0A01               	xorlw	1	; case 151
 22313  004C0E                     l1049:
 22314                           
 22315                           ;arp.c: 436: }
 22316                           ;arp.c: 437: err.code = errProbe.code;
 22317                           
 22318                           ; BSR set to: 1
 22319  004C0E  C15B  F048         	movff	arp_background@errProbe+1,arp_background@err+1
 22320  004C12  C15C  F049         	movff	arp_background@errProbe+2,arp_background@err+2
 22321                           
 22322                           ;arp.c: 439: break;
 22323  004C16  D031               	goto	l1054
 22324  004C18                     
 22325                           ;arp.c: 442: errAnnounce = arp_gratuitous(ipPreliminary, link);
 22326  004C18  C2C0  F134         	movff	arp_background@ipPreliminary,arp_gratuitous@ip
 22327  004C1C  C2C1  F135         	movff	arp_background@ipPreliminary+1,arp_gratuitous@ip+1
 22328  004C20  C2C2  F136         	movff	arp_background@ipPreliminary+2,arp_gratuitous@ip+2
 22329  004C24  C2C3  F137         	movff	arp_background@ipPreliminary+3,arp_gratuitous@ip+3
 22330  004C28  C156  F138         	movff	arp_background@link,arp_gratuitous@link
 22331  004C2C  EC1C  F01C         	call	_arp_gratuitous	;wreg free
 22332  004C30  C134  F157         	movff	?_arp_gratuitous,arp_background@errAnnounce
 22333  004C34  C135  F158         	movff	?_arp_gratuitous+1,arp_background@errAnnounce+1
 22334  004C38  C136  F159         	movff	?_arp_gratuitous+2,arp_background@errAnnounce+2
 22335                           
 22336                           ;arp.c: 443: err.code = errAnnounce.code;
 22337  004C3C  C158  F048         	movff	arp_background@errAnnounce+1,arp_background@err+1
 22338  004C40  C159  F049         	movff	arp_background@errAnnounce+2,arp_background@err+2
 22339                           
 22340                           ;arp.c: 444: if (err.code == ERROR_ARP_IPv4_ADDRESS_CONFLICT) {
 22341  004C44  0E96               	movlw	150
 22342  004C46  1848               	xorwf	arp_background@err+1,w,c
 22343  004C48  E105               	bnz	l12244
 22344  004C4A  0449               	decf	arp_background@err+2,w,c
 22345  004C4C  A4D8               	btfss	status,2,c
 22346  004C4E  D002               	goto	l1056
 22347                           
 22348                           ;arp.c: 448: state = 0;
 22349  004C50  0E00               	movlw	0
 22350  004C52  6E3E               	movwf	arp_background@state,c
 22351  004C54                     l1056:
 22352  004C54                     l12244:
 22353                           
 22354                           ;arp.c: 449: }
 22355                           ;arp.c: 450: if (errAnnounce.module == ERROR_MODULE_ARP &&
 22356                           ;arp.c: 451: errAnnounce.code == (uint16_t)0) {
 22357  004C54  0E03               	movlw	3
 22358  004C56  0101               	movlb	1	; () banked
 22359  004C58  1957               	xorwf	arp_background@errAnnounce& (0+255),w,b
 22360  004C5A  A4D8               	btfss	status,2,c
 22361  004C5C  D00E               	goto	l1054
 22362                           
 22363                           ; BSR set to: 1
 22364  004C5E  5158               	movf	(arp_background@errAnnounce+1)& (0+255),w,b
 22365  004C60  1159               	iorwf	(arp_background@errAnnounce+2)& (0+255),w,b
 22366  004C62  A4D8               	btfss	status,2,c
 22367  004C64  D00A               	goto	l1054
 22368                           
 22369                           ; BSR set to: 1
 22370                           ;arp.c: 455: state = 0;
 22371  004C66  0E00               	movlw	0
 22372  004C68  6E3E               	movwf	arp_background@state,c
 22373                           
 22374                           ; BSR set to: 1
 22375                           ;arp.c: 458: }
 22376                           
 22377                           ; BSR set to: 1
 22378                           ;arp.c: 456: }
 22379                           ;arp.c: 457: break;
 22380  004C6A  D007               	goto	l1054
 22381  004C6C                     l1044:
 22382                           
 22383                           ; BSR set to: 1
 22384  004C6C  503E               	movf	arp_background@state,w,c
 22385                           
 22386                           ; Switch size 1, requested type "space"
 22387                           ; Number of cases is 2, Range of values is 0 to 1
 22388                           ; switch strategies available:
 22389                           ; Name         Instructions Cycles
 22390                           ; simple_byte            7     4 (average)
 22391                           ;	Chosen strategy is simple_byte
 22392  004C6E  0A00               	xorlw	0	; case 0
 22393  004C70  B4D8               	btfsc	status,2,c
 22394  004C72  D788               	goto	l1045
 22395  004C74  0A01               	xorlw	1	; case 1
 22396  004C76  B4D8               	btfsc	status,2,c
 22397  004C78  D7CF               	goto	l1055
 22398  004C7A                     l1054:
 22399                           
 22400                           ;arp.c: 460: return err;
 22401  004C7A  C047  F151         	movff	arp_background@err,?_arp_background
 22402  004C7E  C048  F152         	movff	arp_background@err+1,?_arp_background+1
 22403  004C82  C049  F153         	movff	arp_background@err+2,?_arp_background+2
 22404  004C86  0012               	return		;funcret
 22405  004C88                     __end_of_arp_background:
 22406                           	opt stack 0
 22407                           tblptru	equ	0xFF8
 22408                           tblptrh	equ	0xFF7
 22409                           tblptrl	equ	0xFF6
 22410                           tablat	equ	0xFF5
 22411                           prodh	equ	0xFF4
 22412                           prodl	equ	0xFF3
 22413                           intcon	equ	0xFF2
 22414                           intcon3	equ	0xFF0
 22415                           indf0	equ	0xFEF
 22416                           postinc0	equ	0xFEE
 22417                           plusw0	equ	0xFEB
 22418                           fsr0h	equ	0xFEA
 22419                           fsr0l	equ	0xFE9
 22420                           wreg	equ	0xFE8
 22421                           indf1	equ	0xFE7
 22422                           postinc1	equ	0xFE6
 22423                           postdec1	equ	0xFE5
 22424                           plusw1	equ	0xFE3
 22425                           fsr1h	equ	0xFE2
 22426                           fsr1l	equ	0xFE1
 22427                           indf2	equ	0xFDF
 22428                           postinc2	equ	0xFDE
 22429                           postdec2	equ	0xFDD
 22430                           plusw2	equ	0xFDB
 22431                           fsr2h	equ	0xFDA
 22432                           fsr2l	equ	0xFD9
 22433                           status	equ	0xFD8
 22434                           
 22435 ;; *************** function _ipv4_getPreliminaryIPSourceAddress *****************
 22436 ;; Defined at:
 22437 ;;		line 366 in file "src/stack/protocols/ipv4.c"
 22438 ;; Parameters:    Size  Location     Type
 22439 ;;		None
 22440 ;; Auto vars:     Size  Location     Type
 22441 ;;		None
 22442 ;; Return value:  Size  Location     Type
 22443 ;;                  4    0[BANK0 ] struct ipv4_address
 22444 ;; Registers used:
 22445 ;;		None
 22446 ;; Tracked objects:
 22447 ;;		On entry : 0/0
 22448 ;;		On exit  : 0/0
 22449 ;;		Unchanged: 0/0
 22450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22451 ;;      Params:         0       4       0       0       0       0       0       0       0
 22452 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22453 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22454 ;;      Totals:         0       4       0       0       0       0       0       0       0
 22455 ;;Total ram usage:        4 bytes
 22456 ;; Hardware stack levels used:    1
 22457 ;; Hardware stack levels required when called:    4
 22458 ;; This function calls:
 22459 ;;		Nothing
 22460 ;; This function is called by:
 22461 ;;		_arp_background
 22462 ;; This function uses a non-reentrant model
 22463 ;;
 22464                           
 22465                           	psect	text86
 22466  006DEE                     __ptext86:
 22467                           	opt stack 0
 22468  006DEE                     _ipv4_getPreliminaryIPSourceAddress:
 22469                           	opt stack 24
 22470                           
 22471                           ;ipv4.c: 367: return ipPreliminarySource;
 22472                           
 22473                           ;incstack = 0
 22474  006DEE  C2D8  F060         	movff	_ipPreliminarySource,?_ipv4_getPreliminaryIPSourceAddress
 22475  006DF2  C2D9  F061         	movff	_ipPreliminarySource+1,?_ipv4_getPreliminaryIPSourceAddress+1
 22476  006DF6  C2DA  F062         	movff	_ipPreliminarySource+2,?_ipv4_getPreliminaryIPSourceAddress+2
 22477  006DFA  C2DB  F063         	movff	_ipPreliminarySource+3,?_ipv4_getPreliminaryIPSourceAddress+3
 22478  006DFE  0012               	return		;funcret
 22479  006E00                     __end_of_ipv4_getPreliminaryIPSourceAddress:
 22480                           	opt stack 0
 22481                           tblptru	equ	0xFF8
 22482                           tblptrh	equ	0xFF7
 22483                           tblptrl	equ	0xFF6
 22484                           tablat	equ	0xFF5
 22485                           prodh	equ	0xFF4
 22486                           prodl	equ	0xFF3
 22487                           intcon	equ	0xFF2
 22488                           intcon3	equ	0xFF0
 22489                           indf0	equ	0xFEF
 22490                           postinc0	equ	0xFEE
 22491                           plusw0	equ	0xFEB
 22492                           fsr0h	equ	0xFEA
 22493                           fsr0l	equ	0xFE9
 22494                           wreg	equ	0xFE8
 22495                           indf1	equ	0xFE7
 22496                           postinc1	equ	0xFE6
 22497                           postdec1	equ	0xFE5
 22498                           plusw1	equ	0xFE3
 22499                           fsr1h	equ	0xFE2
 22500                           fsr1l	equ	0xFE1
 22501                           indf2	equ	0xFDF
 22502                           postinc2	equ	0xFDE
 22503                           postdec2	equ	0xFDD
 22504                           plusw2	equ	0xFDB
 22505                           fsr2h	equ	0xFDA
 22506                           fsr2l	equ	0xFD9
 22507                           status	equ	0xFD8
 22508                           
 22509 ;; *************** function _ipv4_SrcAddrChanged *****************
 22510 ;; Defined at:
 22511 ;;		line 417 in file "src/stack/protocols/ipv4.c"
 22512 ;; Parameters:    Size  Location     Type
 22513 ;;  err             2    0[BANK0 ] PTR struct error
 22514 ;;		 -> arp_background@err(3), 
 22515 ;; Auto vars:     Size  Location     Type
 22516 ;;		None
 22517 ;; Return value:  Size  Location     Type
 22518 ;;		None               void
 22519 ;; Registers used:
 22520 ;;		wreg, status,2, status,0
 22521 ;; Tracked objects:
 22522 ;;		On entry : 0/0
 22523 ;;		On exit  : 0/0
 22524 ;;		Unchanged: 0/0
 22525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22526 ;;      Params:         0       2       0       0       0       0       0       0       0
 22527 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22528 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22529 ;;      Totals:         0       2       0       0       0       0       0       0       0
 22530 ;;Total ram usage:        2 bytes
 22531 ;; Hardware stack levels used:    1
 22532 ;; Hardware stack levels required when called:    4
 22533 ;; This function calls:
 22534 ;;		Nothing
 22535 ;; This function is called by:
 22536 ;;		_arp_background
 22537 ;; This function uses a non-reentrant model
 22538 ;;
 22539                           
 22540                           	psect	text87
 22541  006DB6                     __ptext87:
 22542                           	opt stack 0
 22543  006DB6                     _ipv4_SrcAddrChanged:
 22544                           	opt stack 24
 22545                           
 22546                           ;ipv4.c: 418: arpStatus = err;
 22547                           
 22548                           ;incstack = 0
 22549  006DB6  C060  F036         	movff	ipv4_SrcAddrChanged@err,_arpStatus
 22550  006DBA  C061  F037         	movff	ipv4_SrcAddrChanged@err+1,_arpStatus+1
 22551                           
 22552                           ;ipv4.c: 419: return fSrcAddrChanged;
 22553  006DBE  B04E               	btfsc	_fSrcAddrChanged/(0+8),_fSrcAddrChanged& (0+7),c
 22554  006DC0  D002               	goto	l9574
 22555  006DC2  90D8               	bcf	status,0,c
 22556  006DC4  0012               	return	
 22557  006DC6                     l9574:
 22558  006DC6  80D8               	bsf	status,0,c
 22559  006DC8  0012               	return	
 22560  006DCA                     __end_of_ipv4_SrcAddrChanged:
 22561                           	opt stack 0
 22562                           tblptru	equ	0xFF8
 22563                           tblptrh	equ	0xFF7
 22564                           tblptrl	equ	0xFF6
 22565                           tablat	equ	0xFF5
 22566                           prodh	equ	0xFF4
 22567                           prodl	equ	0xFF3
 22568                           intcon	equ	0xFF2
 22569                           intcon3	equ	0xFF0
 22570                           indf0	equ	0xFEF
 22571                           postinc0	equ	0xFEE
 22572                           plusw0	equ	0xFEB
 22573                           fsr0h	equ	0xFEA
 22574                           fsr0l	equ	0xFE9
 22575                           wreg	equ	0xFE8
 22576                           indf1	equ	0xFE7
 22577                           postinc1	equ	0xFE6
 22578                           postdec1	equ	0xFE5
 22579                           plusw1	equ	0xFE3
 22580                           fsr1h	equ	0xFE2
 22581                           fsr1l	equ	0xFE1
 22582                           indf2	equ	0xFDF
 22583                           postinc2	equ	0xFDE
 22584                           postdec2	equ	0xFDD
 22585                           plusw2	equ	0xFDB
 22586                           fsr2h	equ	0xFDA
 22587                           fsr2l	equ	0xFD9
 22588                           status	equ	0xFD8
 22589                           
 22590 ;; *************** function _arp_probe *****************
 22591 ;; Defined at:
 22592 ;;		line 253 in file "src/stack/protocols/arp.c"
 22593 ;; Parameters:    Size  Location     Type
 22594 ;;  ipTarget        4   52[BANK1 ] struct ipv4_address
 22595 ;;  link            1   56[BANK1 ] enum E238
 22596 ;; Auto vars:     Size  Location     Type
 22597 ;;  waitingTime     4   74[BANK1 ] unsigned long 
 22598 ;;  timeStart       4   70[BANK1 ] unsigned long 
 22599 ;;  ipSender        4   66[BANK1 ] struct ipv4_address
 22600 ;;  err             3   78[BANK1 ] struct error
 22601 ;;  index           1   65[BANK1 ] unsigned char 
 22602 ;; Return value:  Size  Location     Type
 22603 ;;                  3   52[BANK1 ] struct error
 22604 ;; Registers used:
 22605 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22606 ;; Tracked objects:
 22607 ;;		On entry : 0/0
 22608 ;;		On exit  : 0/0
 22609 ;;		Unchanged: 0/0
 22610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22611 ;;      Params:         0       0       5       0       0       0       0       0       0
 22612 ;;      Locals:         0       0      16       0       0       0       0       0       0
 22613 ;;      Temps:          0       0       8       0       0       0       0       0       0
 22614 ;;      Totals:         0       0      29       0       0       0       0       0       0
 22615 ;;Total ram usage:       29 bytes
 22616 ;; Hardware stack levels used:    1
 22617 ;; Hardware stack levels required when called:   11
 22618 ;; This function calls:
 22619 ;;		___lwmod
 22620 ;;		_arp_checkForEntry
 22621 ;;		_arp_sendRequest
 22622 ;;		_getMillis
 22623 ;;		_ipv4_setToAllZero
 22624 ;;		_rand
 22625 ;; This function is called by:
 22626 ;;		_arp_background
 22627 ;; This function uses a non-reentrant model
 22628 ;;
 22629                           
 22630                           	psect	text88
 22631  002F1E                     __ptext88:
 22632                           	opt stack 0
 22633  002F1E                     _arp_probe:
 22634                           	opt stack 17
 22635                           
 22636                           ;arp.c: 254: time_t timeStart;
 22637                           ;arp.c: 255: time_t waitingTime;
 22638                           ;arp.c: 256: ipv4_address_t ipSender;
 22639                           ;arp.c: 257: uint8_t static probeCounter = 0;
 22640                           ;arp.c: 258: error_t err;
 22641                           ;arp.c: 260: enum states {
 22642                           ;arp.c: 261: PREPARING_PROBE, WAITING_TO_SEND, SENDING_PROBE, ARP_ENTRY_FOUND
 22643                           ;arp.c: 262: };
 22644                           ;arp.c: 263: uint8_t static state = PREPARING_PROBE;
 22645                           ;arp.c: 264: uint8_t index;
 22646                           ;arp.c: 265: err.module = ERROR_MODULE_ARP;
 22647                           
 22648                           ;incstack = 0
 22649  002F1E  0E03               	movlw	3
 22650  002F20  0101               	movlb	1	; () banked
 22651  002F22  6F4E               	movwf	arp_probe@err& (0+255),b
 22652                           
 22653                           ;arp.c: 267: if (link == NO_LINK) {
 22654  002F24  5138               	movf	arp_probe@link& (0+255),w,b
 22655  002F26  A4D8               	btfss	status,2,c
 22656  002F28  D00F               	goto	l996
 22657                           
 22658                           ; BSR set to: 1
 22659                           ;arp.c: 268: state = PREPARING_PROBE;
 22660  002F2A  0E00               	movlw	0
 22661  002F2C  6E41               	movwf	arp_probe@state,c
 22662                           
 22663                           ;arp.c: 269: probeCounter = 0;
 22664  002F2E  0E00               	movlw	0
 22665  002F30  6E42               	movwf	arp_probe@probeCounter,c
 22666                           
 22667                           ;arp.c: 270: err.code = ERROR_ARP_CONNECTION_FAILED;
 22668  002F32  0E01               	movlw	1
 22669  002F34  6F50               	movwf	(arp_probe@err+2)& (0+255),b
 22670  002F36  0E97               	movlw	151
 22671  002F38  6F4F               	movwf	(arp_probe@err+1)& (0+255),b
 22672                           
 22673                           ; BSR set to: 1
 22674                           ;arp.c: 271: return err;
 22675  002F3A  C14E  F134         	movff	arp_probe@err,?_arp_probe
 22676  002F3E  C14F  F135         	movff	arp_probe@err+1,?_arp_probe+1
 22677  002F42  C150  F136         	movff	arp_probe@err+2,?_arp_probe+2
 22678                           
 22679                           ; BSR set to: 1
 22680  002F46  0012               	return	
 22681  002F48                     l996:
 22682                           
 22683                           ; BSR set to: 1
 22684                           ;arp.c: 272: }
 22685                           ;arp.c: 274: if (arp_checkForEntry(ipTarget, &index)) {
 22686                           
 22687                           ; BSR set to: 1
 22688  002F48  C134  F067         	movff	arp_probe@ipTarget,arp_checkForEntry@ip
 22689  002F4C  C135  F068         	movff	arp_probe@ipTarget+1,arp_checkForEntry@ip+1
 22690  002F50  C136  F069         	movff	arp_probe@ipTarget+2,arp_checkForEntry@ip+2
 22691  002F54  C137  F06A         	movff	arp_probe@ipTarget+3,arp_checkForEntry@ip+3
 22692  002F58  0E41               	movlw	low arp_probe@index
 22693  002F5A  0100               	movlb	0	; () banked
 22694  002F5C  6F6B               	movwf	arp_checkForEntry@index& (0+255),b
 22695  002F5E  0E01               	movlw	high arp_probe@index
 22696  002F60  6F6C               	movwf	(arp_checkForEntry@index+1)& (0+255),b
 22697  002F62  ECDA  F029         	call	_arp_checkForEntry	;wreg free
 22698  002F66  0900               	iorlw	0
 22699  002F68  B4D8               	btfsc	status,2,c
 22700  002F6A  D0F7               	goto	l999
 22701                           
 22702                           ;arp.c: 275: state = ARP_ENTRY_FOUND;
 22703  002F6C  0E03               	movlw	3
 22704  002F6E  6E41               	movwf	arp_probe@state,c
 22705                           
 22706                           ;arp.c: 276: }
 22707                           ;arp.c: 278: switch (state) {
 22708  002F70  D0F4               	goto	l999
 22709  002F72                     
 22710                           ;arp.c: 280: ipv4_setToAllZero(&ipSender);
 22711  002F72  0E42               	movlw	low arp_probe@ipSender
 22712  002F74  0100               	movlb	0	; () banked
 22713  002F76  6F60               	movwf	ipv4_setToAllZero@ip& (0+255),b
 22714  002F78  0E01               	movlw	high arp_probe@ipSender
 22715  002F7A  6F61               	movwf	(ipv4_setToAllZero@ip+1)& (0+255),b
 22716  002F7C  EC11  F036         	call	_ipv4_setToAllZero	;wreg free
 22717                           
 22718                           ;arp.c: 281: timeStart = getMillis();
 22719  002F80  EC00  F037         	call	_getMillis	;wreg free
 22720  002F84  C060  F146         	movff	?_getMillis,arp_probe@timeStart
 22721  002F88  C061  F147         	movff	?_getMillis+1,arp_probe@timeStart+1
 22722  002F8C  C062  F148         	movff	?_getMillis+2,arp_probe@timeStart+2
 22723  002F90  C063  F149         	movff	?_getMillis+3,arp_probe@timeStart+3
 22724                           
 22725                           ;arp.c: 282: waitingTime = rand() % 1000u;
 22726  002F94  ECB1  F031         	call	_rand	;wreg free
 22727  002F98  C06C  F06E         	movff	?_rand,___lwmod@dividend
 22728  002F9C  C06D  F06F         	movff	?_rand+1,___lwmod@dividend+1
 22729  002FA0  0E03               	movlw	3
 22730  002FA2  0100               	movlb	0	; () banked
 22731  002FA4  6F71               	movwf	(___lwmod@divisor+1)& (0+255),b
 22732  002FA6  0EE8               	movlw	232
 22733  002FA8  6F70               	movwf	___lwmod@divisor& (0+255),b
 22734  002FAA  ECE1  F033         	call	___lwmod	;wreg free
 22735  002FAE  0100               	movlb	0	; () banked
 22736  002FB0  C06E  F14A         	movff	?___lwmod,arp_probe@waitingTime
 22737  002FB4  C06F  F14B         	movff	?___lwmod+1,arp_probe@waitingTime+1
 22738  002FB8  0101               	movlb	1	; () banked
 22739  002FBA  6B4C               	clrf	(arp_probe@waitingTime+2)& (0+255),b
 22740  002FBC  6B4D               	clrf	(arp_probe@waitingTime+3)& (0+255),b
 22741                           
 22742                           ; BSR set to: 1
 22743                           ;arp.c: 283: state = WAITING_TO_SEND;
 22744  002FBE  0E01               	movlw	1
 22745  002FC0  6E41               	movwf	arp_probe@state,c
 22746  002FC2  D055               	goto	l1003
 22747  002FC4                     
 22748                           ;arp.c: 287: if (getMillis() - timeStart >= waitingTime) {
 22749                           
 22750                           ; BSR set to: 1
 22751  002FC4  C146  F139         	movff	arp_probe@timeStart,??_arp_probe
 22752  002FC8  C147  F13A         	movff	arp_probe@timeStart+1,??_arp_probe+1
 22753  002FCC  C148  F13B         	movff	arp_probe@timeStart+2,??_arp_probe+2
 22754  002FD0  C149  F13C         	movff	arp_probe@timeStart+3,??_arp_probe+3
 22755  002FD4  0101               	movlb	1	; () banked
 22756  002FD6  1F39               	comf	??_arp_probe& (0+255),f,b
 22757  002FD8  1F3A               	comf	(??_arp_probe+1)& (0+255),f,b
 22758  002FDA  1F3B               	comf	(??_arp_probe+2)& (0+255),f,b
 22759  002FDC  1F3C               	comf	(??_arp_probe+3)& (0+255),f,b
 22760  002FDE  2B39               	incf	??_arp_probe& (0+255),f,b
 22761  002FE0  0E00               	movlw	0
 22762  002FE2  233A               	addwfc	(??_arp_probe+1)& (0+255),f,b
 22763  002FE4  233B               	addwfc	(??_arp_probe+2)& (0+255),f,b
 22764  002FE6  233C               	addwfc	(??_arp_probe+3)& (0+255),f,b
 22765  002FE8  EC00  F037         	call	_getMillis	;wreg free
 22766  002FEC  0101               	movlb	1	; () banked
 22767  002FEE  5139               	movf	??_arp_probe& (0+255),w,b
 22768  002FF0  0100               	movlb	0	; () banked
 22769  002FF2  2560               	addwf	?_getMillis& (0+255),w,b
 22770  002FF4  0101               	movlb	1	; () banked
 22771  002FF6  6F3D               	movwf	(??_arp_probe+4)& (0+255),b
 22772  002FF8  513A               	movf	(??_arp_probe+1)& (0+255),w,b
 22773  002FFA  0100               	movlb	0	; () banked
 22774  002FFC  2161               	addwfc	(?_getMillis+1)& (0+255),w,b
 22775  002FFE  0101               	movlb	1	; () banked
 22776  003000  6F3E               	movwf	(??_arp_probe+5)& (0+255),b
 22777  003002  513B               	movf	(??_arp_probe+2)& (0+255),w,b
 22778  003004  0100               	movlb	0	; () banked
 22779  003006  2162               	addwfc	(?_getMillis+2)& (0+255),w,b
 22780  003008  0101               	movlb	1	; () banked
 22781  00300A  6F3F               	movwf	(??_arp_probe+6)& (0+255),b
 22782  00300C  513C               	movf	(??_arp_probe+3)& (0+255),w,b
 22783  00300E  0100               	movlb	0	; () banked
 22784  003010  2163               	addwfc	(?_getMillis+3)& (0+255),w,b
 22785  003012  0101               	movlb	1	; () banked
 22786  003014  6F40               	movwf	(??_arp_probe+7)& (0+255),b
 22787  003016  514A               	movf	arp_probe@waitingTime& (0+255),w,b
 22788  003018  5D3D               	subwf	(??_arp_probe+4)& (0+255),w,b
 22789  00301A  514B               	movf	(arp_probe@waitingTime+1)& (0+255),w,b
 22790  00301C  593E               	subwfb	(??_arp_probe+5)& (0+255),w,b
 22791  00301E  514C               	movf	(arp_probe@waitingTime+2)& (0+255),w,b
 22792  003020  593F               	subwfb	(??_arp_probe+6)& (0+255),w,b
 22793  003022  514D               	movf	(arp_probe@waitingTime+3)& (0+255),w,b
 22794  003024  5940               	subwfb	(??_arp_probe+7)& (0+255),w,b
 22795  003026  A0D8               	btfss	status,0,c
 22796  003028  D022               	goto	l1003
 22797                           
 22798                           ; BSR set to: 1
 22799                           ;arp.c: 288: state = SENDING_PROBE;
 22800  00302A  0E02               	movlw	2
 22801  00302C  6E41               	movwf	arp_probe@state,c
 22802                           
 22803                           ; BSR set to: 1
 22804                           ;arp.c: 290: waitingTime = (rand() % (2000u - 1000u)) + 1000u;
 22805  00302E  0EE8               	movlw	232
 22806  003030  6F39               	movwf	??_arp_probe& (0+255),b
 22807  003032  0E03               	movlw	3
 22808  003034  6F3A               	movwf	(??_arp_probe+1)& (0+255),b
 22809  003036  ECB1  F031         	call	_rand	;wreg free
 22810  00303A  C06C  F06E         	movff	?_rand,___lwmod@dividend
 22811  00303E  C06D  F06F         	movff	?_rand+1,___lwmod@dividend+1
 22812  003042  0E03               	movlw	3
 22813  003044  0100               	movlb	0	; () banked
 22814  003046  6F71               	movwf	(___lwmod@divisor+1)& (0+255),b
 22815  003048  0EE8               	movlw	232
 22816  00304A  6F70               	movwf	___lwmod@divisor& (0+255),b
 22817  00304C  ECE1  F033         	call	___lwmod	;wreg free
 22818  003050  0101               	movlb	1	; () banked
 22819  003052  5139               	movf	??_arp_probe& (0+255),w,b
 22820  003054  0100               	movlb	0	; () banked
 22821  003056  276E               	addwf	?___lwmod& (0+255),f,b
 22822  003058  0101               	movlb	1	; () banked
 22823  00305A  513A               	movf	(??_arp_probe+1)& (0+255),w,b
 22824  00305C  0100               	movlb	0	; () banked
 22825  00305E  236F               	addwfc	(?___lwmod+1)& (0+255),f,b
 22826  003060  C06E  F14A         	movff	?___lwmod,arp_probe@waitingTime
 22827  003064  C06F  F14B         	movff	?___lwmod+1,arp_probe@waitingTime+1
 22828  003068  0101               	movlb	1	; () banked
 22829  00306A  6B4C               	clrf	(arp_probe@waitingTime+2)& (0+255),b
 22830  00306C  6B4D               	clrf	(arp_probe@waitingTime+3)& (0+255),b
 22831  00306E                     l1003:
 22832                           
 22833                           ; BSR set to: 1
 22834                           ;arp.c: 291: }
 22835                           ;arp.c: 292: err.code = ERROR_ARP_WAITING;
 22836                           
 22837                           ; BSR set to: 1
 22838  00306E  0E01               	movlw	1
 22839  003070  6F50               	movwf	(arp_probe@err+2)& (0+255),b
 22840  003072  0E91               	movlw	145
 22841  003074  D070               	goto	L27
 22842  003076                     
 22843                           ;arp.c: 295: if (probeCounter == 0 || (getMillis() - timeStart) > waitingTime) {
 22844                           
 22845                           ; BSR set to: 1
 22846  003076  5042               	movf	arp_probe@probeCounter,w,c
 22847  003078  B4D8               	btfsc	status,2,c
 22848  00307A  D033               	goto	u14430
 22849  00307C  C146  F139         	movff	arp_probe@timeStart,??_arp_probe
 22850  003080  C147  F13A         	movff	arp_probe@timeStart+1,??_arp_probe+1
 22851  003084  C148  F13B         	movff	arp_probe@timeStart+2,??_arp_probe+2
 22852  003088  C149  F13C         	movff	arp_probe@timeStart+3,??_arp_probe+3
 22853  00308C  0101               	movlb	1	; () banked
 22854  00308E  1F39               	comf	??_arp_probe& (0+255),f,b
 22855  003090  1F3A               	comf	(??_arp_probe+1)& (0+255),f,b
 22856  003092  1F3B               	comf	(??_arp_probe+2)& (0+255),f,b
 22857  003094  1F3C               	comf	(??_arp_probe+3)& (0+255),f,b
 22858  003096  2B39               	incf	??_arp_probe& (0+255),f,b
 22859  003098  0E00               	movlw	0
 22860  00309A  233A               	addwfc	(??_arp_probe+1)& (0+255),f,b
 22861  00309C  233B               	addwfc	(??_arp_probe+2)& (0+255),f,b
 22862  00309E  233C               	addwfc	(??_arp_probe+3)& (0+255),f,b
 22863  0030A0  EC00  F037         	call	_getMillis	;wreg free
 22864  0030A4  0101               	movlb	1	; () banked
 22865  0030A6  5139               	movf	??_arp_probe& (0+255),w,b
 22866  0030A8  0100               	movlb	0	; () banked
 22867  0030AA  2560               	addwf	?_getMillis& (0+255),w,b
 22868  0030AC  0101               	movlb	1	; () banked
 22869  0030AE  6F3D               	movwf	(??_arp_probe+4)& (0+255),b
 22870  0030B0  513A               	movf	(??_arp_probe+1)& (0+255),w,b
 22871  0030B2  0100               	movlb	0	; () banked
 22872  0030B4  2161               	addwfc	(?_getMillis+1)& (0+255),w,b
 22873  0030B6  0101               	movlb	1	; () banked
 22874  0030B8  6F3E               	movwf	(??_arp_probe+5)& (0+255),b
 22875  0030BA  513B               	movf	(??_arp_probe+2)& (0+255),w,b
 22876  0030BC  0100               	movlb	0	; () banked
 22877  0030BE  2162               	addwfc	(?_getMillis+2)& (0+255),w,b
 22878  0030C0  0101               	movlb	1	; () banked
 22879  0030C2  6F3F               	movwf	(??_arp_probe+6)& (0+255),b
 22880  0030C4  513C               	movf	(??_arp_probe+3)& (0+255),w,b
 22881  0030C6  0100               	movlb	0	; () banked
 22882  0030C8  2163               	addwfc	(?_getMillis+3)& (0+255),w,b
 22883  0030CA  0101               	movlb	1	; () banked
 22884  0030CC  6F40               	movwf	(??_arp_probe+7)& (0+255),b
 22885  0030CE  513D               	movf	(??_arp_probe+4)& (0+255),w,b
 22886  0030D0  5D4A               	subwf	arp_probe@waitingTime& (0+255),w,b
 22887  0030D2  513E               	movf	(??_arp_probe+5)& (0+255),w,b
 22888  0030D4  594B               	subwfb	(arp_probe@waitingTime+1)& (0+255),w,b
 22889  0030D6  513F               	movf	(??_arp_probe+6)& (0+255),w,b
 22890  0030D8  594C               	subwfb	(arp_probe@waitingTime+2)& (0+255),w,b
 22891  0030DA  5140               	movf	(??_arp_probe+7)& (0+255),w,b
 22892  0030DC  594D               	subwfb	(arp_probe@waitingTime+3)& (0+255),w,b
 22893  0030DE  B0D8               	btfsc	status,0,c
 22894  0030E0  D049               	goto	l1001
 22895  0030E2                     u14430:
 22896                           
 22897                           ;arp.c: 296: timeStart = getMillis();
 22898                           
 22899                           ; BSR set to: 1
 22900  0030E2  EC00  F037         	call	_getMillis	;wreg free
 22901  0030E6  C060  F146         	movff	?_getMillis,arp_probe@timeStart
 22902  0030EA  C061  F147         	movff	?_getMillis+1,arp_probe@timeStart+1
 22903  0030EE  C062  F148         	movff	?_getMillis+2,arp_probe@timeStart+2
 22904  0030F2  C063  F149         	movff	?_getMillis+3,arp_probe@timeStart+3
 22905                           
 22906                           ;arp.c: 298: if (probeCounter < 3u) {
 22907  0030F6  0E03               	movlw	3
 22908  0030F8  6042               	cpfslt	arp_probe@probeCounter,c
 22909  0030FA  D012               	goto	l1008
 22910                           
 22911                           ;arp.c: 306: arp_sendRequest(ipSender, ipTarget);
 22912  0030FC  C142  F100         	movff	arp_probe@ipSender,arp_sendRequest@ipSender
 22913  003100  C143  F101         	movff	arp_probe@ipSender+1,arp_sendRequest@ipSender+1
 22914  003104  C144  F102         	movff	arp_probe@ipSender+2,arp_sendRequest@ipSender+2
 22915  003108  C145  F103         	movff	arp_probe@ipSender+3,arp_sendRequest@ipSender+3
 22916  00310C  C134  F104         	movff	arp_probe@ipTarget,arp_sendRequest@ipTarget
 22917  003110  C135  F105         	movff	arp_probe@ipTarget+1,arp_sendRequest@ipTarget+1
 22918  003114  C136  F106         	movff	arp_probe@ipTarget+2,arp_sendRequest@ipTarget+2
 22919  003118  C137  F107         	movff	arp_probe@ipTarget+3,arp_sendRequest@ipTarget+3
 22920  00311C  ECDF  F02C         	call	_arp_sendRequest	;wreg free
 22921  003120                     l1008:
 22922                           
 22923                           ;arp.c: 307: }
 22924                           ;arp.c: 308: if (probeCounter >= 3u) {
 22925  003120  0E02               	movlw	2
 22926  003122  6442               	cpfsgt	arp_probe@probeCounter,c
 22927  003124  D009               	goto	l1009
 22928                           
 22929                           ;arp.c: 309: probeCounter = 0;
 22930  003126  0E00               	movlw	0
 22931  003128  6E42               	movwf	arp_probe@probeCounter,c
 22932                           
 22933                           ;arp.c: 310: state = PREPARING_PROBE;
 22934  00312A  0E00               	movlw	0
 22935  00312C  6E41               	movwf	arp_probe@state,c
 22936                           
 22937                           ;arp.c: 311: err.code = ERROR_ARP_MAXIMUM_NUMBER_OF_PROBES_REACHED;
 22938  00312E  0E01               	movlw	1
 22939  003130  0101               	movlb	1	; () banked
 22940  003132  6F50               	movwf	(arp_probe@err+2)& (0+255),b
 22941  003134  0E93               	movlw	147
 22942  003136  D00F               	goto	L27
 22943  003138                     l1009:
 22944                           
 22945                           ;arp.c: 313: err.code = ERROR_ARP_WAITING;
 22946                           
 22947                           ; BSR set to: 1
 22948  003138  0E01               	movlw	1
 22949  00313A  0101               	movlb	1	; () banked
 22950  00313C  6F50               	movwf	(arp_probe@err+2)& (0+255),b
 22951  00313E  0E91               	movlw	145
 22952  003140  6F4F               	movwf	(arp_probe@err+1)& (0+255),b
 22953                           
 22954                           ; BSR set to: 1
 22955                           ;arp.c: 314: probeCounter++;
 22956  003142  2A42               	incf	arp_probe@probeCounter,f,c
 22957                           
 22958                           ; BSR set to: 1
 22959                           ;arp.c: 315: }
 22960                           ;arp.c: 316: }
 22961                           ;arp.c: 317: break;
 22962                           
 22963                           ; BSR set to: 1
 22964  003144  D017               	goto	l1001
 22965  003146                     
 22966                           ;arp.c: 319: probeCounter = 0;
 22967                           
 22968                           ; BSR set to: 1
 22969  003146  0E00               	movlw	0
 22970  003148  6E42               	movwf	arp_probe@probeCounter,c
 22971                           
 22972                           ;arp.c: 320: state = PREPARING_PROBE;
 22973  00314A  0E00               	movlw	0
 22974  00314C  6E41               	movwf	arp_probe@state,c
 22975                           
 22976                           ;arp.c: 321: err.code = ERROR_ARP_IPv4_ADDRESS_CONFLICT;
 22977  00314E  0E01               	movlw	1
 22978  003150  0101               	movlb	1	; () banked
 22979  003152  6F50               	movwf	(arp_probe@err+2)& (0+255),b
 22980  003154  0E96               	movlw	150
 22981  003156                     L27:
 22982  003156  6F4F               	movwf	(arp_probe@err+1)& (0+255),b
 22983                           
 22984                           ;arp.c: 322: }
 22985  003158  D00D               	goto	l1001
 22986  00315A                     l999:
 22987                           
 22988                           ; BSR set to: 1
 22989  00315A  5041               	movf	arp_probe@state,w,c
 22990                           
 22991                           ; Switch size 1, requested type "space"
 22992                           ; Number of cases is 4, Range of values is 0 to 3
 22993                           ; switch strategies available:
 22994                           ; Name         Instructions Cycles
 22995                           ; simple_byte           13     7 (average)
 22996                           ;	Chosen strategy is simple_byte
 22997  00315C  0A00               	xorlw	0	; case 0
 22998  00315E  B4D8               	btfsc	status,2,c
 22999  003160  D708               	goto	l1000
 23000  003162  0A01               	xorlw	1	; case 1
 23001  003164  B4D8               	btfsc	status,2,c
 23002  003166  D72E               	goto	l1002
 23003  003168  0A03               	xorlw	3	; case 2
 23004  00316A  B4D8               	btfsc	status,2,c
 23005  00316C  D784               	goto	l1004
 23006  00316E  0A01               	xorlw	1	; case 3
 23007  003170  B4D8               	btfsc	status,2,c
 23008  003172  D7E9               	goto	l1011
 23009  003174                     l1001:
 23010                           
 23011                           ;arp.c: 323: return err;
 23012  003174  C14E  F134         	movff	arp_probe@err,?_arp_probe
 23013  003178  C14F  F135         	movff	arp_probe@err+1,?_arp_probe+1
 23014  00317C  C150  F136         	movff	arp_probe@err+2,?_arp_probe+2
 23015  003180  0012               	return		;funcret
 23016  003182                     __end_of_arp_probe:
 23017                           	opt stack 0
 23018                           tblptru	equ	0xFF8
 23019                           tblptrh	equ	0xFF7
 23020                           tblptrl	equ	0xFF6
 23021                           tablat	equ	0xFF5
 23022                           prodh	equ	0xFF4
 23023                           prodl	equ	0xFF3
 23024                           intcon	equ	0xFF2
 23025                           intcon3	equ	0xFF0
 23026                           indf0	equ	0xFEF
 23027                           postinc0	equ	0xFEE
 23028                           plusw0	equ	0xFEB
 23029                           fsr0h	equ	0xFEA
 23030                           fsr0l	equ	0xFE9
 23031                           wreg	equ	0xFE8
 23032                           indf1	equ	0xFE7
 23033                           postinc1	equ	0xFE6
 23034                           postdec1	equ	0xFE5
 23035                           plusw1	equ	0xFE3
 23036                           fsr1h	equ	0xFE2
 23037                           fsr1l	equ	0xFE1
 23038                           indf2	equ	0xFDF
 23039                           postinc2	equ	0xFDE
 23040                           postdec2	equ	0xFDD
 23041                           plusw2	equ	0xFDB
 23042                           fsr2h	equ	0xFDA
 23043                           fsr2l	equ	0xFD9
 23044                           status	equ	0xFD8
 23045                           
 23046 ;; *************** function _rand *****************
 23047 ;; Defined at:
 23048 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\rand.c"
 23049 ;; Parameters:    Size  Location     Type
 23050 ;;		None
 23051 ;; Auto vars:     Size  Location     Type
 23052 ;;		None
 23053 ;; Return value:  Size  Location     Type
 23054 ;;                  2   12[BANK0 ] int 
 23055 ;; Registers used:
 23056 ;;		wreg, status,2, status,0, cstack
 23057 ;; Tracked objects:
 23058 ;;		On entry : 0/0
 23059 ;;		On exit  : 0/0
 23060 ;;		Unchanged: 0/0
 23061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23062 ;;      Params:         0       2       0       0       0       0       0       0       0
 23063 ;;      Locals:         0       0       0       0       0       0       0       0       0
 23064 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23065 ;;      Totals:         0       2       0       0       0       0       0       0       0
 23066 ;;Total ram usage:        2 bytes
 23067 ;; Hardware stack levels used:    1
 23068 ;; Hardware stack levels required when called:    5
 23069 ;; This function calls:
 23070 ;;		___lmul
 23071 ;; This function is called by:
 23072 ;;		_main
 23073 ;;		_arp_probe
 23074 ;;		_ipv4_generateAutoIP
 23075 ;;		_tcp_listen
 23076 ;; This function uses a non-reentrant model
 23077 ;;
 23078                           
 23079                           	psect	text89
 23080  006362                     __ptext89:
 23081                           	opt stack 0
 23082  006362                     _rand:
 23083                           	opt stack 24
 23084                           
 23085                           ;incstack = 0
 23086  006362  C2E8  F060         	movff	_randx,___lmul@multiplier
 23087  006366  C2E9  F061         	movff	_randx+1,___lmul@multiplier+1
 23088  00636A  C2EA  F062         	movff	_randx+2,___lmul@multiplier+2
 23089  00636E  C2EB  F063         	movff	_randx+3,___lmul@multiplier+3
 23090  006372  0E6D               	movlw	109
 23091  006374  0100               	movlb	0	; () banked
 23092  006376  6F64               	movwf	___lmul@multiplicand& (0+255),b
 23093  006378  0E4E               	movlw	78
 23094  00637A  6F65               	movwf	(___lmul@multiplicand+1)& (0+255),b
 23095  00637C  0EC6               	movlw	198
 23096  00637E  6F66               	movwf	(___lmul@multiplicand+2)& (0+255),b
 23097  006380  0E41               	movlw	65
 23098  006382  6F67               	movwf	(___lmul@multiplicand+3)& (0+255),b
 23099  006384  ECDF  F031         	call	___lmul	;wreg free
 23100  006388  C060  F2E8         	movff	?___lmul,_randx
 23101  00638C  C061  F2E9         	movff	?___lmul+1,_randx+1
 23102  006390  C062  F2EA         	movff	?___lmul+2,_randx+2
 23103  006394  C063  F2EB         	movff	?___lmul+3,_randx+3
 23104  006398  0E39               	movlw	57
 23105  00639A  0102               	movlb	2	; () banked
 23106  00639C  27E8               	addwf	_randx& (0+255),f,b
 23107  00639E  0E30               	movlw	48
 23108  0063A0  23E9               	addwfc	(_randx+1)& (0+255),f,b
 23109  0063A2  0E00               	movlw	0
 23110  0063A4  23EA               	addwfc	(_randx+2)& (0+255),f,b
 23111  0063A6  0E00               	movlw	0
 23112  0063A8  23EB               	addwfc	(_randx+3)& (0+255),f,b
 23113                           
 23114                           ; BSR set to: 2
 23115  0063AA  0EFF               	movlw	255
 23116  0063AC  15EA               	andwf	(_randx+2)& (0+255),w,b
 23117  0063AE  0100               	movlb	0	; () banked
 23118  0063B0  6F6C               	movwf	?_rand& (0+255),b
 23119  0063B2  0E7F               	movlw	127
 23120  0063B4  0102               	movlb	2	; () banked
 23121  0063B6  15EB               	andwf	(_randx+3)& (0+255),w,b
 23122  0063B8  0100               	movlb	0	; () banked
 23123  0063BA  6F6D               	movwf	(?_rand+1)& (0+255),b
 23124  0063BC  0012               	return	
 23125  0063BE                     __end_of_rand:
 23126                           	opt stack 0
 23127                           tblptru	equ	0xFF8
 23128                           tblptrh	equ	0xFF7
 23129                           tblptrl	equ	0xFF6
 23130                           tablat	equ	0xFF5
 23131                           prodh	equ	0xFF4
 23132                           prodl	equ	0xFF3
 23133                           intcon	equ	0xFF2
 23134                           intcon3	equ	0xFF0
 23135                           indf0	equ	0xFEF
 23136                           postinc0	equ	0xFEE
 23137                           plusw0	equ	0xFEB
 23138                           fsr0h	equ	0xFEA
 23139                           fsr0l	equ	0xFE9
 23140                           wreg	equ	0xFE8
 23141                           indf1	equ	0xFE7
 23142                           postinc1	equ	0xFE6
 23143                           postdec1	equ	0xFE5
 23144                           plusw1	equ	0xFE3
 23145                           fsr1h	equ	0xFE2
 23146                           fsr1l	equ	0xFE1
 23147                           indf2	equ	0xFDF
 23148                           postinc2	equ	0xFDE
 23149                           postdec2	equ	0xFDD
 23150                           plusw2	equ	0xFDB
 23151                           fsr2h	equ	0xFDA
 23152                           fsr2l	equ	0xFD9
 23153                           status	equ	0xFD8
 23154                           
 23155 ;; *************** function ___lmul *****************
 23156 ;; Defined at:
 23157 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 23158 ;; Parameters:    Size  Location     Type
 23159 ;;  multiplier      4    0[BANK0 ] unsigned long 
 23160 ;;  multiplicand    4    4[BANK0 ] unsigned long 
 23161 ;; Auto vars:     Size  Location     Type
 23162 ;;  product         4    8[BANK0 ] unsigned long 
 23163 ;; Return value:  Size  Location     Type
 23164 ;;                  4    0[BANK0 ] unsigned long 
 23165 ;; Registers used:
 23166 ;;		wreg, status,2, status,0
 23167 ;; Tracked objects:
 23168 ;;		On entry : 0/0
 23169 ;;		On exit  : 0/0
 23170 ;;		Unchanged: 0/0
 23171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23172 ;;      Params:         0       8       0       0       0       0       0       0       0
 23173 ;;      Locals:         0       4       0       0       0       0       0       0       0
 23174 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23175 ;;      Totals:         0      12       0       0       0       0       0       0       0
 23176 ;;Total ram usage:       12 bytes
 23177 ;; Hardware stack levels used:    1
 23178 ;; Hardware stack levels required when called:    4
 23179 ;; This function calls:
 23180 ;;		Nothing
 23181 ;; This function is called by:
 23182 ;;		_rand
 23183 ;; This function uses a non-reentrant model
 23184 ;;
 23185                           
 23186                           	psect	text90
 23187  0063BE                     __ptext90:
 23188                           	opt stack 0
 23189  0063BE                     ___lmul:
 23190                           	opt stack 24
 23191                           
 23192                           ; BSR set to: 0
 23193                           ;incstack = 0
 23194  0063BE  0E00               	movlw	0
 23195  0063C0  0100               	movlb	0	; () banked
 23196  0063C2  6F68               	movwf	___lmul@product& (0+255),b
 23197  0063C4  0E00               	movlw	0
 23198  0063C6  6F69               	movwf	(___lmul@product+1)& (0+255),b
 23199  0063C8  0E00               	movlw	0
 23200  0063CA  6F6A               	movwf	(___lmul@product+2)& (0+255),b
 23201  0063CC  0E00               	movlw	0
 23202  0063CE  6F6B               	movwf	(___lmul@product+3)& (0+255),b
 23203  0063D0                     
 23204                           ; BSR set to: 0
 23205                           
 23206                           ; BSR set to: 0
 23207  0063D0  A160               	btfss	___lmul@multiplier& (0+255),0,b
 23208  0063D2  D008               	goto	l1501
 23209                           
 23210                           ; BSR set to: 0
 23211  0063D4  5164               	movf	___lmul@multiplicand& (0+255),w,b
 23212  0063D6  2768               	addwf	___lmul@product& (0+255),f,b
 23213  0063D8  5165               	movf	(___lmul@multiplicand+1)& (0+255),w,b
 23214  0063DA  2369               	addwfc	(___lmul@product+1)& (0+255),f,b
 23215  0063DC  5166               	movf	(___lmul@multiplicand+2)& (0+255),w,b
 23216  0063DE  236A               	addwfc	(___lmul@product+2)& (0+255),f,b
 23217  0063E0  5167               	movf	(___lmul@multiplicand+3)& (0+255),w,b
 23218  0063E2  236B               	addwfc	(___lmul@product+3)& (0+255),f,b
 23219  0063E4                     l1501:
 23220                           
 23221                           ; BSR set to: 0
 23222                           
 23223                           ; BSR set to: 0
 23224  0063E4  90D8               	bcf	status,0,c
 23225  0063E6  3764               	rlcf	___lmul@multiplicand& (0+255),f,b
 23226  0063E8  3765               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
 23227  0063EA  3766               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
 23228  0063EC  3767               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
 23229                           
 23230                           ; BSR set to: 0
 23231  0063EE  90D8               	bcf	status,0,c
 23232  0063F0  3363               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
 23233  0063F2  3362               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
 23234  0063F4  3361               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
 23235  0063F6  3360               	rrcf	___lmul@multiplier& (0+255),f,b
 23236  0063F8  5160               	movf	___lmul@multiplier& (0+255),w,b
 23237  0063FA  1161               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
 23238  0063FC  1162               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
 23239  0063FE  1163               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
 23240  006400  A4D8               	btfss	status,2,c
 23241  006402  D7E6               	goto	l1500
 23242                           
 23243                           ; BSR set to: 0
 23244  006404  C068  F060         	movff	___lmul@product,?___lmul
 23245  006408  C069  F061         	movff	___lmul@product+1,?___lmul+1
 23246  00640C  C06A  F062         	movff	___lmul@product+2,?___lmul+2
 23247  006410  C06B  F063         	movff	___lmul@product+3,?___lmul+3
 23248                           
 23249                           ; BSR set to: 0
 23250  006414  0012               	return		;funcret
 23251  006416                     __end_of___lmul:
 23252                           	opt stack 0
 23253                           tblptru	equ	0xFF8
 23254                           tblptrh	equ	0xFF7
 23255                           tblptrl	equ	0xFF6
 23256                           tablat	equ	0xFF5
 23257                           prodh	equ	0xFF4
 23258                           prodl	equ	0xFF3
 23259                           intcon	equ	0xFF2
 23260                           intcon3	equ	0xFF0
 23261                           indf0	equ	0xFEF
 23262                           postinc0	equ	0xFEE
 23263                           plusw0	equ	0xFEB
 23264                           fsr0h	equ	0xFEA
 23265                           fsr0l	equ	0xFE9
 23266                           wreg	equ	0xFE8
 23267                           indf1	equ	0xFE7
 23268                           postinc1	equ	0xFE6
 23269                           postdec1	equ	0xFE5
 23270                           plusw1	equ	0xFE3
 23271                           fsr1h	equ	0xFE2
 23272                           fsr1l	equ	0xFE1
 23273                           indf2	equ	0xFDF
 23274                           postinc2	equ	0xFDE
 23275                           postdec2	equ	0xFDD
 23276                           plusw2	equ	0xFDB
 23277                           fsr2h	equ	0xFDA
 23278                           fsr2l	equ	0xFD9
 23279                           status	equ	0xFD8
 23280                           
 23281 ;; *************** function _ipv4_setToAllZero *****************
 23282 ;; Defined at:
 23283 ;;		line 440 in file "src/stack/protocols/ipv4.c"
 23284 ;; Parameters:    Size  Location     Type
 23285 ;;  ip              2    0[BANK0 ] PTR struct ipv4_address
 23286 ;;		 -> ipPreliminarySource(4), ipSource(4), arp_init@ip(4), arp_probe@ipSender(4), 
 23287 ;; Auto vars:     Size  Location     Type
 23288 ;;  i               1    2[BANK0 ] unsigned char 
 23289 ;; Return value:  Size  Location     Type
 23290 ;;                  1    wreg      void 
 23291 ;; Registers used:
 23292 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 23293 ;; Tracked objects:
 23294 ;;		On entry : 0/0
 23295 ;;		On exit  : 0/0
 23296 ;;		Unchanged: 0/0
 23297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23298 ;;      Params:         0       2       0       0       0       0       0       0       0
 23299 ;;      Locals:         0       1       0       0       0       0       0       0       0
 23300 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23301 ;;      Totals:         0       3       0       0       0       0       0       0       0
 23302 ;;Total ram usage:        3 bytes
 23303 ;; Hardware stack levels used:    1
 23304 ;; Hardware stack levels required when called:    4
 23305 ;; This function calls:
 23306 ;;		Nothing
 23307 ;; This function is called by:
 23308 ;;		_arp_probe
 23309 ;;		_arp_init
 23310 ;;		_ipv4_init
 23311 ;; This function uses a non-reentrant model
 23312 ;;
 23313                           
 23314                           	psect	text91
 23315  006C22                     __ptext91:
 23316                           	opt stack 0
 23317  006C22                     _ipv4_setToAllZero:
 23318                           	opt stack 24
 23319                           
 23320                           ;ipv4.c: 441: for (uint8_t i = 0; i < 4; i++) {
 23321                           
 23322                           ; BSR set to: 0
 23323                           ;incstack = 0
 23324  006C22  0E00               	movlw	0
 23325  006C24  0100               	movlb	0	; () banked
 23326  006C26  6F62               	movwf	ipv4_setToAllZero@i& (0+255),b
 23327  006C28                     l11222:
 23328                           
 23329                           ; BSR set to: 0
 23330  006C28  0E03               	movlw	3
 23331  006C2A  6562               	cpfsgt	ipv4_setToAllZero@i& (0+255),b
 23332  006C2C  D001               	goto	l1221
 23333  006C2E  0012               	return	
 23334  006C30                     l1221:
 23335                           
 23336                           ; BSR set to: 0
 23337                           ;ipv4.c: 442: ip->address[i] = 0x00;
 23338                           
 23339                           ; BSR set to: 0
 23340  006C30  5162               	movf	ipv4_setToAllZero@i& (0+255),w,b
 23341  006C32  0D01               	mullw	1
 23342  006C34  50F3               	movf	prodl,w,c
 23343  006C36  2560               	addwf	ipv4_setToAllZero@ip& (0+255),w,b
 23344  006C38  6ED9               	movwf	fsr2l,c
 23345  006C3A  50F4               	movf	prodh,w,c
 23346  006C3C  2161               	addwfc	(ipv4_setToAllZero@ip+1)& (0+255),w,b
 23347  006C3E  6EDA               	movwf	fsr2h,c
 23348  006C40  0E00               	movlw	0
 23349  006C42  6EDF               	movwf	indf2,c
 23350                           
 23351                           ; BSR set to: 0
 23352  006C44  2B62               	incf	ipv4_setToAllZero@i& (0+255),f,b
 23353  006C46  D7F0               	goto	l11222
 23354  006C48                     __end_of_ipv4_setToAllZero:
 23355                           	opt stack 0
 23356                           tblptru	equ	0xFF8
 23357                           tblptrh	equ	0xFF7
 23358                           tblptrl	equ	0xFF6
 23359                           tablat	equ	0xFF5
 23360                           prodh	equ	0xFF4
 23361                           prodl	equ	0xFF3
 23362                           intcon	equ	0xFF2
 23363                           intcon3	equ	0xFF0
 23364                           indf0	equ	0xFEF
 23365                           postinc0	equ	0xFEE
 23366                           plusw0	equ	0xFEB
 23367                           fsr0h	equ	0xFEA
 23368                           fsr0l	equ	0xFE9
 23369                           wreg	equ	0xFE8
 23370                           indf1	equ	0xFE7
 23371                           postinc1	equ	0xFE6
 23372                           postdec1	equ	0xFE5
 23373                           plusw1	equ	0xFE3
 23374                           fsr1h	equ	0xFE2
 23375                           fsr1l	equ	0xFE1
 23376                           indf2	equ	0xFDF
 23377                           postinc2	equ	0xFDE
 23378                           postdec2	equ	0xFDD
 23379                           plusw2	equ	0xFDB
 23380                           fsr2h	equ	0xFDA
 23381                           fsr2l	equ	0xFD9
 23382                           status	equ	0xFD8
 23383                           
 23384 ;; *************** function ___lwmod *****************
 23385 ;; Defined at:
 23386 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 23387 ;; Parameters:    Size  Location     Type
 23388 ;;  dividend        2   14[BANK0 ] unsigned int 
 23389 ;;  divisor         2   16[BANK0 ] unsigned int 
 23390 ;; Auto vars:     Size  Location     Type
 23391 ;;  counter         1   18[BANK0 ] unsigned char 
 23392 ;; Return value:  Size  Location     Type
 23393 ;;                  2   14[BANK0 ] unsigned int 
 23394 ;; Registers used:
 23395 ;;		wreg, status,2, status,0
 23396 ;; Tracked objects:
 23397 ;;		On entry : 0/0
 23398 ;;		On exit  : 0/0
 23399 ;;		Unchanged: 0/0
 23400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23401 ;;      Params:         0       4       0       0       0       0       0       0       0
 23402 ;;      Locals:         0       1       0       0       0       0       0       0       0
 23403 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23404 ;;      Totals:         0       5       0       0       0       0       0       0       0
 23405 ;;Total ram usage:        5 bytes
 23406 ;; Hardware stack levels used:    1
 23407 ;; Hardware stack levels required when called:    4
 23408 ;; This function calls:
 23409 ;;		Nothing
 23410 ;; This function is called by:
 23411 ;;		_arp_probe
 23412 ;;		_utoa
 23413 ;; This function uses a non-reentrant model
 23414 ;;
 23415                           
 23416                           	psect	text92
 23417  0067C2                     __ptext92:
 23418                           	opt stack 0
 23419  0067C2                     ___lwmod:
 23420                           	opt stack 22
 23421                           
 23422                           ; BSR set to: 0
 23423                           ;incstack = 0
 23424  0067C2  0100               	movlb	0	; () banked
 23425  0067C4  5170               	movf	___lwmod@divisor& (0+255),w,b
 23426  0067C6  1171               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 23427  0067C8  B4D8               	btfsc	status,2,c
 23428  0067CA  D018               	goto	l1935
 23429                           
 23430                           ; BSR set to: 0
 23431  0067CC  0E01               	movlw	1
 23432  0067CE  6F72               	movwf	___lwmod@counter& (0+255),b
 23433  0067D0  D004               	goto	l1930
 23434  0067D2                     
 23435                           ; BSR set to: 0
 23436                           
 23437                           ; BSR set to: 0
 23438  0067D2  90D8               	bcf	status,0,c
 23439  0067D4  3770               	rlcf	___lwmod@divisor& (0+255),f,b
 23440  0067D6  3771               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 23441  0067D8  2B72               	incf	___lwmod@counter& (0+255),f,b
 23442  0067DA                     l1930:
 23443                           
 23444                           ; BSR set to: 0
 23445                           
 23446                           ; BSR set to: 0
 23447  0067DA  AF71               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 23448  0067DC  D7FA               	goto	l1931
 23449  0067DE                     u12270:
 23450                           
 23451                           ; BSR set to: 0
 23452                           
 23453                           ; BSR set to: 0
 23454                           
 23455                           ; BSR set to: 0
 23456  0067DE  5170               	movf	___lwmod@divisor& (0+255),w,b
 23457  0067E0  5D6E               	subwf	___lwmod@dividend& (0+255),w,b
 23458  0067E2  5171               	movf	(___lwmod@divisor+1)& (0+255),w,b
 23459  0067E4  596F               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 23460  0067E6  A0D8               	btfss	status,0,c
 23461  0067E8  D004               	goto	l1934
 23462                           
 23463                           ; BSR set to: 0
 23464  0067EA  5170               	movf	___lwmod@divisor& (0+255),w,b
 23465  0067EC  5F6E               	subwf	___lwmod@dividend& (0+255),f,b
 23466  0067EE  5171               	movf	(___lwmod@divisor+1)& (0+255),w,b
 23467  0067F0  5B6F               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 23468  0067F2                     l1934:
 23469                           
 23470                           ; BSR set to: 0
 23471                           
 23472                           ; BSR set to: 0
 23473  0067F2  90D8               	bcf	status,0,c
 23474  0067F4  3371               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 23475  0067F6  3370               	rrcf	___lwmod@divisor& (0+255),f,b
 23476                           
 23477                           ; BSR set to: 0
 23478  0067F8  2F72               	decfsz	___lwmod@counter& (0+255),f,b
 23479  0067FA  D7F1               	goto	u12270
 23480  0067FC                     l1935:
 23481                           
 23482                           ; BSR set to: 0
 23483                           
 23484                           ; BSR set to: 0
 23485  0067FC  C06E  F06E         	movff	___lwmod@dividend,?___lwmod
 23486  006800  C06F  F06F         	movff	___lwmod@dividend+1,?___lwmod+1
 23487                           
 23488                           ; BSR set to: 0
 23489  006804  0012               	return		;funcret
 23490  006806                     __end_of___lwmod:
 23491                           	opt stack 0
 23492                           tblptru	equ	0xFF8
 23493                           tblptrh	equ	0xFF7
 23494                           tblptrl	equ	0xFF6
 23495                           tablat	equ	0xFF5
 23496                           prodh	equ	0xFF4
 23497                           prodl	equ	0xFF3
 23498                           intcon	equ	0xFF2
 23499                           intcon3	equ	0xFF0
 23500                           indf0	equ	0xFEF
 23501                           postinc0	equ	0xFEE
 23502                           plusw0	equ	0xFEB
 23503                           fsr0h	equ	0xFEA
 23504                           fsr0l	equ	0xFE9
 23505                           wreg	equ	0xFE8
 23506                           indf1	equ	0xFE7
 23507                           postinc1	equ	0xFE6
 23508                           postdec1	equ	0xFE5
 23509                           plusw1	equ	0xFE3
 23510                           fsr1h	equ	0xFE2
 23511                           fsr1l	equ	0xFE1
 23512                           indf2	equ	0xFDF
 23513                           postinc2	equ	0xFDE
 23514                           postdec2	equ	0xFDD
 23515                           plusw2	equ	0xFDB
 23516                           fsr2h	equ	0xFDA
 23517                           fsr2l	equ	0xFD9
 23518                           status	equ	0xFD8
 23519                           
 23520 ;; *************** function _arp_gratuitous *****************
 23521 ;; Defined at:
 23522 ;;		line 326 in file "src/stack/protocols/arp.c"
 23523 ;; Parameters:    Size  Location     Type
 23524 ;;  ip              4   52[BANK1 ] struct ipv4_address
 23525 ;;  link            1   56[BANK1 ] enum E238
 23526 ;; Auto vars:     Size  Location     Type
 23527 ;;  err             3  157[BANK0 ] struct error
 23528 ;;  index           1  156[BANK0 ] unsigned char 
 23529 ;; Return value:  Size  Location     Type
 23530 ;;                  3   52[BANK1 ] struct error
 23531 ;; Registers used:
 23532 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 23533 ;; Tracked objects:
 23534 ;;		On entry : 0/0
 23535 ;;		On exit  : 0/0
 23536 ;;		Unchanged: 0/0
 23537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23538 ;;      Params:         0       0       5       0       0       0       0       0       0
 23539 ;;      Locals:         0       4       0       0       0       0       0       0       0
 23540 ;;      Temps:          0       0       8       0       0       0       0       0       0
 23541 ;;      Totals:         0       4      13       0       0       0       0       0       0
 23542 ;;Total ram usage:       17 bytes
 23543 ;; Hardware stack levels used:    1
 23544 ;; Hardware stack levels required when called:   11
 23545 ;; This function calls:
 23546 ;;		_arp_checkForEntry
 23547 ;;		_arp_sendRequest
 23548 ;;		_getMillis
 23549 ;; This function is called by:
 23550 ;;		_arp_background
 23551 ;; This function uses a non-reentrant model
 23552 ;;
 23553                           
 23554                           	psect	text93
 23555  003838                     __ptext93:
 23556                           	opt stack 0
 23557  003838                     _arp_gratuitous:
 23558                           	opt stack 17
 23559                           
 23560                           ;arp.c: 327: uint8_t static announceCounter = 0;
 23561                           ;arp.c: 328: uint8_t static state = 0;
 23562                           ;arp.c: 329: time_t static timeStart = 0;
 23563                           ;arp.c: 330: uint8_t index;
 23564                           ;arp.c: 331: error_t err;
 23565                           ;arp.c: 333: enum states {
 23566                           ;arp.c: 334: INIT, WAIT_FOR_ANNOUNCE, ANNOUNCING, ENTRY_FOUND
 23567                           ;arp.c: 335: };
 23568                           ;arp.c: 336: err.module = ERROR_MODULE_ARP;
 23569                           
 23570                           ; BSR set to: 0
 23571                           ;incstack = 0
 23572  003838  0E03               	movlw	3
 23573  00383A  0100               	movlb	0	; () banked
 23574  00383C  6FFD               	movwf	arp_gratuitous@err& (0+255),b
 23575                           
 23576                           ;arp.c: 337: err.code = ERROR_ARP_WAITING;
 23577  00383E  0E01               	movlw	1
 23578  003840  6FFF               	movwf	(arp_gratuitous@err+2)& (0+255),b
 23579  003842  0E91               	movlw	145
 23580  003844  6FFE               	movwf	(arp_gratuitous@err+1)& (0+255),b
 23581                           
 23582                           ;arp.c: 339: if (link == NO_LINK) {
 23583  003846  0101               	movlb	1	; () banked
 23584  003848  5138               	movf	arp_gratuitous@link& (0+255),w,b
 23585  00384A  A4D8               	btfss	status,2,c
 23586  00384C  D010               	goto	l1020
 23587                           
 23588                           ; BSR set to: 1
 23589                           ;arp.c: 340: announceCounter = 0;
 23590  00384E  0E00               	movlw	0
 23591  003850  6E40               	movwf	arp_gratuitous@announceCounter,c
 23592                           
 23593                           ;arp.c: 341: state = INIT;
 23594  003852  0E00               	movlw	0
 23595  003854  6E3F               	movwf	arp_gratuitous@state,c
 23596                           
 23597                           ;arp.c: 342: err.code = ERROR_ARP_CONNECTION_FAILED;
 23598  003856  0E01               	movlw	1
 23599  003858  0100               	movlb	0	; () banked
 23600  00385A  6FFF               	movwf	(arp_gratuitous@err+2)& (0+255),b
 23601  00385C  0E97               	movlw	151
 23602  00385E  6FFE               	movwf	(arp_gratuitous@err+1)& (0+255),b
 23603                           
 23604                           ; BSR set to: 0
 23605                           ;arp.c: 343: return err;
 23606  003860  C0FD  F134         	movff	arp_gratuitous@err,?_arp_gratuitous
 23607  003864  C0FE  F135         	movff	arp_gratuitous@err+1,?_arp_gratuitous+1
 23608  003868  C0FF  F136         	movff	arp_gratuitous@err+2,?_arp_gratuitous+2
 23609                           
 23610                           ; BSR set to: 0
 23611  00386C  0012               	return	
 23612  00386E                     l1020:
 23613                           
 23614                           ;arp.c: 344: }
 23615                           ;arp.c: 346: if (arp_checkForEntry(ip, &index)) {
 23616                           
 23617                           ; BSR set to: 0
 23618  00386E  C134  F067         	movff	arp_gratuitous@ip,arp_checkForEntry@ip
 23619  003872  C135  F068         	movff	arp_gratuitous@ip+1,arp_checkForEntry@ip+1
 23620  003876  C136  F069         	movff	arp_gratuitous@ip+2,arp_checkForEntry@ip+2
 23621  00387A  C137  F06A         	movff	arp_gratuitous@ip+3,arp_checkForEntry@ip+3
 23622  00387E  0EFC               	movlw	low arp_gratuitous@index
 23623  003880  0100               	movlb	0	; () banked
 23624  003882  6F6B               	movwf	arp_checkForEntry@index& (0+255),b
 23625  003884  0E00               	movlw	high arp_gratuitous@index
 23626  003886  6F6C               	movwf	(arp_checkForEntry@index+1)& (0+255),b
 23627  003888  ECDA  F029         	call	_arp_checkForEntry	;wreg free
 23628  00388C  0900               	iorlw	0
 23629  00388E  B4D8               	btfsc	status,2,c
 23630  003890  D0BE               	goto	l1023
 23631                           
 23632                           ;arp.c: 347: state = ENTRY_FOUND;
 23633  003892  0E03               	movlw	3
 23634  003894  6E3F               	movwf	arp_gratuitous@state,c
 23635                           
 23636                           ;arp.c: 348: }
 23637                           ;arp.c: 350: switch (state) {
 23638  003896  D0BB               	goto	l1023
 23639  003898                     
 23640                           ;arp.c: 352: err.code = ERROR_ARP_WAITING;
 23641  003898  0E01               	movlw	1
 23642  00389A  0100               	movlb	0	; () banked
 23643  00389C  6FFF               	movwf	(arp_gratuitous@err+2)& (0+255),b
 23644  00389E  0E91               	movlw	145
 23645  0038A0  6FFE               	movwf	(arp_gratuitous@err+1)& (0+255),b
 23646                           
 23647                           ; BSR set to: 0
 23648                           ;arp.c: 353: timeStart = getMillis();
 23649  0038A2  EC00  F037         	call	_getMillis	;wreg free
 23650  0038A6  C060  F028         	movff	?_getMillis,arp_gratuitous@timeStart
 23651  0038AA  C061  F029         	movff	?_getMillis+1,arp_gratuitous@timeStart+1
 23652  0038AE  C062  F02A         	movff	?_getMillis+2,arp_gratuitous@timeStart+2
 23653  0038B2  C063  F02B         	movff	?_getMillis+3,arp_gratuitous@timeStart+3
 23654                           
 23655                           ;arp.c: 354: state = WAIT_FOR_ANNOUNCE;
 23656  0038B6  0E01               	movlw	1
 23657  0038B8  6E3F               	movwf	arp_gratuitous@state,c
 23658                           
 23659                           ;arp.c: 355: break;
 23660  0038BA  D0B6               	goto	l1025
 23661  0038BC                     
 23662                           ;arp.c: 357: err.code = ERROR_ARP_WAITING;
 23663  0038BC  0E01               	movlw	1
 23664  0038BE  0100               	movlb	0	; () banked
 23665  0038C0  6FFF               	movwf	(arp_gratuitous@err+2)& (0+255),b
 23666  0038C2  0E91               	movlw	145
 23667  0038C4  6FFE               	movwf	(arp_gratuitous@err+1)& (0+255),b
 23668                           
 23669                           ; BSR set to: 0
 23670                           ;arp.c: 358: if ((getMillis() - timeStart) > 2000u) {
 23671  0038C6  C028  F139         	movff	arp_gratuitous@timeStart,??_arp_gratuitous
 23672  0038CA  C029  F13A         	movff	arp_gratuitous@timeStart+1,??_arp_gratuitous+1
 23673  0038CE  C02A  F13B         	movff	arp_gratuitous@timeStart+2,??_arp_gratuitous+2
 23674  0038D2  C02B  F13C         	movff	arp_gratuitous@timeStart+3,??_arp_gratuitous+3
 23675  0038D6  0101               	movlb	1	; () banked
 23676  0038D8  1F39               	comf	??_arp_gratuitous& (0+255),f,b
 23677  0038DA  1F3A               	comf	(??_arp_gratuitous+1)& (0+255),f,b
 23678  0038DC  1F3B               	comf	(??_arp_gratuitous+2)& (0+255),f,b
 23679  0038DE  1F3C               	comf	(??_arp_gratuitous+3)& (0+255),f,b
 23680  0038E0  2B39               	incf	??_arp_gratuitous& (0+255),f,b
 23681  0038E2  0E00               	movlw	0
 23682  0038E4  233A               	addwfc	(??_arp_gratuitous+1)& (0+255),f,b
 23683  0038E6  233B               	addwfc	(??_arp_gratuitous+2)& (0+255),f,b
 23684  0038E8  233C               	addwfc	(??_arp_gratuitous+3)& (0+255),f,b
 23685  0038EA  EC00  F037         	call	_getMillis	;wreg free
 23686  0038EE  0101               	movlb	1	; () banked
 23687  0038F0  5139               	movf	??_arp_gratuitous& (0+255),w,b
 23688  0038F2  0100               	movlb	0	; () banked
 23689  0038F4  2560               	addwf	?_getMillis& (0+255),w,b
 23690  0038F6  0101               	movlb	1	; () banked
 23691  0038F8  6F3D               	movwf	(??_arp_gratuitous+4)& (0+255),b
 23692  0038FA  513A               	movf	(??_arp_gratuitous+1)& (0+255),w,b
 23693  0038FC  0100               	movlb	0	; () banked
 23694  0038FE  2161               	addwfc	(?_getMillis+1)& (0+255),w,b
 23695  003900  0101               	movlb	1	; () banked
 23696  003902  6F3E               	movwf	(??_arp_gratuitous+5)& (0+255),b
 23697  003904  513B               	movf	(??_arp_gratuitous+2)& (0+255),w,b
 23698  003906  0100               	movlb	0	; () banked
 23699  003908  2162               	addwfc	(?_getMillis+2)& (0+255),w,b
 23700  00390A  0101               	movlb	1	; () banked
 23701  00390C  6F3F               	movwf	(??_arp_gratuitous+6)& (0+255),b
 23702  00390E  513C               	movf	(??_arp_gratuitous+3)& (0+255),w,b
 23703  003910  0100               	movlb	0	; () banked
 23704  003912  2163               	addwfc	(?_getMillis+3)& (0+255),w,b
 23705  003914  0101               	movlb	1	; () banked
 23706  003916  6F40               	movwf	(??_arp_gratuitous+7)& (0+255),b
 23707  003918  5140               	movf	(??_arp_gratuitous+7)& (0+255),w,b
 23708  00391A  113F               	iorwf	(??_arp_gratuitous+6)& (0+255),w,b
 23709  00391C  E106               	bnz	u14480
 23710  00391E  0ED1               	movlw	209
 23711  003920  5D3D               	subwf	(??_arp_gratuitous+4)& (0+255),w,b
 23712  003922  0E07               	movlw	7
 23713  003924  593E               	subwfb	(??_arp_gratuitous+5)& (0+255),w,b
 23714  003926  A0D8               	btfss	status,0,c
 23715  003928  D07F               	goto	l1025
 23716  00392A                     u14480:
 23717                           
 23718                           ; BSR set to: 1
 23719                           ;arp.c: 359: state = ANNOUNCING;
 23720  00392A  0E02               	movlw	2
 23721  00392C  6E3F               	movwf	arp_gratuitous@state,c
 23722                           
 23723                           ;arp.c: 360: announceCounter = 0;
 23724  00392E  0E00               	movlw	0
 23725  003930  6E40               	movwf	arp_gratuitous@announceCounter,c
 23726                           
 23727                           ; BSR set to: 1
 23728                           ;arp.c: 361: }
 23729                           ;arp.c: 362: break;
 23730  003932  D07A               	goto	l1025
 23731  003934                     
 23732                           ;arp.c: 364: err.code = ERROR_ARP_WAITING;
 23733                           
 23734                           ; BSR set to: 1
 23735  003934  0E01               	movlw	1
 23736  003936  0100               	movlb	0	; () banked
 23737  003938  6FFF               	movwf	(arp_gratuitous@err+2)& (0+255),b
 23738  00393A  0E91               	movlw	145
 23739  00393C  6FFE               	movwf	(arp_gratuitous@err+1)& (0+255),b
 23740                           
 23741                           ;arp.c: 365: if ((announceCounter == 0) || (getMillis() - timeStart) > 2000u) {
 23742  00393E  5040               	movf	arp_gratuitous@announceCounter,w,c
 23743  003940  B4D8               	btfsc	status,2,c
 23744  003942  D032               	goto	u14500
 23745                           
 23746                           ; BSR set to: 0
 23747  003944  C028  F139         	movff	arp_gratuitous@timeStart,??_arp_gratuitous
 23748  003948  C029  F13A         	movff	arp_gratuitous@timeStart+1,??_arp_gratuitous+1
 23749  00394C  C02A  F13B         	movff	arp_gratuitous@timeStart+2,??_arp_gratuitous+2
 23750  003950  C02B  F13C         	movff	arp_gratuitous@timeStart+3,??_arp_gratuitous+3
 23751  003954  0101               	movlb	1	; () banked
 23752  003956  1F39               	comf	??_arp_gratuitous& (0+255),f,b
 23753  003958  1F3A               	comf	(??_arp_gratuitous+1)& (0+255),f,b
 23754  00395A  1F3B               	comf	(??_arp_gratuitous+2)& (0+255),f,b
 23755  00395C  1F3C               	comf	(??_arp_gratuitous+3)& (0+255),f,b
 23756  00395E  2B39               	incf	??_arp_gratuitous& (0+255),f,b
 23757  003960  0E00               	movlw	0
 23758  003962  233A               	addwfc	(??_arp_gratuitous+1)& (0+255),f,b
 23759  003964  233B               	addwfc	(??_arp_gratuitous+2)& (0+255),f,b
 23760  003966  233C               	addwfc	(??_arp_gratuitous+3)& (0+255),f,b
 23761  003968  EC00  F037         	call	_getMillis	;wreg free
 23762  00396C  0101               	movlb	1	; () banked
 23763  00396E  5139               	movf	??_arp_gratuitous& (0+255),w,b
 23764  003970  0100               	movlb	0	; () banked
 23765  003972  2560               	addwf	?_getMillis& (0+255),w,b
 23766  003974  0101               	movlb	1	; () banked
 23767  003976  6F3D               	movwf	(??_arp_gratuitous+4)& (0+255),b
 23768  003978  513A               	movf	(??_arp_gratuitous+1)& (0+255),w,b
 23769  00397A  0100               	movlb	0	; () banked
 23770  00397C  2161               	addwfc	(?_getMillis+1)& (0+255),w,b
 23771  00397E  0101               	movlb	1	; () banked
 23772  003980  6F3E               	movwf	(??_arp_gratuitous+5)& (0+255),b
 23773  003982  513B               	movf	(??_arp_gratuitous+2)& (0+255),w,b
 23774  003984  0100               	movlb	0	; () banked
 23775  003986  2162               	addwfc	(?_getMillis+2)& (0+255),w,b
 23776  003988  0101               	movlb	1	; () banked
 23777  00398A  6F3F               	movwf	(??_arp_gratuitous+6)& (0+255),b
 23778  00398C  513C               	movf	(??_arp_gratuitous+3)& (0+255),w,b
 23779  00398E  0100               	movlb	0	; () banked
 23780  003990  2163               	addwfc	(?_getMillis+3)& (0+255),w,b
 23781  003992  0101               	movlb	1	; () banked
 23782  003994  6F40               	movwf	(??_arp_gratuitous+7)& (0+255),b
 23783  003996  5140               	movf	(??_arp_gratuitous+7)& (0+255),w,b
 23784  003998  113F               	iorwf	(??_arp_gratuitous+6)& (0+255),w,b
 23785  00399A  E106               	bnz	l11834
 23786  00399C  0ED1               	movlw	209
 23787  00399E  5D3D               	subwf	(??_arp_gratuitous+4)& (0+255),w,b
 23788  0039A0  0E07               	movlw	7
 23789  0039A2  593E               	subwfb	(??_arp_gratuitous+5)& (0+255),w,b
 23790  0039A4  A0D8               	btfss	status,0,c
 23791  0039A6  D01D               	goto	l1029
 23792  0039A8                     u14500:
 23793  0039A8                     l11834:
 23794                           
 23795                           ;arp.c: 371: timeStart = getMillis();
 23796  0039A8  EC00  F037         	call	_getMillis	;wreg free
 23797  0039AC  C060  F028         	movff	?_getMillis,arp_gratuitous@timeStart
 23798  0039B0  C061  F029         	movff	?_getMillis+1,arp_gratuitous@timeStart+1
 23799  0039B4  C062  F02A         	movff	?_getMillis+2,arp_gratuitous@timeStart+2
 23800  0039B8  C063  F02B         	movff	?_getMillis+3,arp_gratuitous@timeStart+3
 23801                           
 23802                           ;arp.c: 372: arp_sendRequest(ip, ip);
 23803  0039BC  C134  F100         	movff	arp_gratuitous@ip,arp_sendRequest@ipSender
 23804  0039C0  C135  F101         	movff	arp_gratuitous@ip+1,arp_sendRequest@ipSender+1
 23805  0039C4  C136  F102         	movff	arp_gratuitous@ip+2,arp_sendRequest@ipSender+2
 23806  0039C8  C137  F103         	movff	arp_gratuitous@ip+3,arp_sendRequest@ipSender+3
 23807  0039CC  C134  F104         	movff	arp_gratuitous@ip,arp_sendRequest@ipTarget
 23808  0039D0  C135  F105         	movff	arp_gratuitous@ip+1,arp_sendRequest@ipTarget+1
 23809  0039D4  C136  F106         	movff	arp_gratuitous@ip+2,arp_sendRequest@ipTarget+2
 23810  0039D8  C137  F107         	movff	arp_gratuitous@ip+3,arp_sendRequest@ipTarget+3
 23811  0039DC  ECDF  F02C         	call	_arp_sendRequest	;wreg free
 23812                           
 23813                           ;arp.c: 373: announceCounter++;
 23814  0039E0  2A40               	incf	arp_gratuitous@announceCounter,f,c
 23815  0039E2                     l1029:
 23816                           
 23817                           ;arp.c: 374: }
 23818                           ;arp.c: 375: if (announceCounter >= 2u) {
 23819  0039E2  0E01               	movlw	1
 23820  0039E4  6440               	cpfsgt	arp_gratuitous@announceCounter,c
 23821  0039E6  D020               	goto	l1025
 23822                           
 23823                           ;arp.c: 377: announceCounter = 0;
 23824  0039E8  0E00               	movlw	0
 23825  0039EA  6E40               	movwf	arp_gratuitous@announceCounter,c
 23826                           
 23827                           ;arp.c: 378: state = INIT;
 23828  0039EC  0E00               	movlw	0
 23829  0039EE  6E3F               	movwf	arp_gratuitous@state,c
 23830                           
 23831                           ;arp.c: 379: err.code = (uint16_t)0;
 23832  0039F0  0E00               	movlw	0
 23833  0039F2  0100               	movlb	0	; () banked
 23834  0039F4  6FFF               	movwf	(arp_gratuitous@err+2)& (0+255),b
 23835  0039F6  0E00               	movlw	0
 23836  0039F8  D008               	goto	L28
 23837  0039FA                     
 23838                           ;arp.c: 383: announceCounter = 0;
 23839                           
 23840                           ; BSR set to: 0
 23841  0039FA  0E00               	movlw	0
 23842  0039FC  6E40               	movwf	arp_gratuitous@announceCounter,c
 23843                           
 23844                           ;arp.c: 384: state = INIT;
 23845  0039FE  0E00               	movlw	0
 23846  003A00  6E3F               	movwf	arp_gratuitous@state,c
 23847                           
 23848                           ;arp.c: 385: err.code = ERROR_ARP_IPv4_ADDRESS_CONFLICT;
 23849  003A02  0E01               	movlw	1
 23850  003A04  0100               	movlb	0	; () banked
 23851  003A06  6FFF               	movwf	(arp_gratuitous@err+2)& (0+255),b
 23852  003A08  0E96               	movlw	150
 23853  003A0A                     L28:
 23854  003A0A  6FFE               	movwf	(arp_gratuitous@err+1)& (0+255),b
 23855                           
 23856                           ; BSR set to: 0
 23857                           ;arp.c: 388: }
 23858                           
 23859                           ;arp.c: 386: break;
 23860  003A0C  D00D               	goto	l1025
 23861  003A0E                     l1023:
 23862                           
 23863                           ; BSR set to: 0
 23864  003A0E  503F               	movf	arp_gratuitous@state,w,c
 23865                           
 23866                           ; Switch size 1, requested type "space"
 23867                           ; Number of cases is 4, Range of values is 0 to 3
 23868                           ; switch strategies available:
 23869                           ; Name         Instructions Cycles
 23870                           ; simple_byte           13     7 (average)
 23871                           ;	Chosen strategy is simple_byte
 23872  003A10  0A00               	xorlw	0	; case 0
 23873  003A12  B4D8               	btfsc	status,2,c
 23874  003A14  D741               	goto	l1024
 23875  003A16  0A01               	xorlw	1	; case 1
 23876  003A18  B4D8               	btfsc	status,2,c
 23877  003A1A  D750               	goto	l1026
 23878  003A1C  0A03               	xorlw	3	; case 2
 23879  003A1E  B4D8               	btfsc	status,2,c
 23880  003A20  D789               	goto	l1028
 23881  003A22  0A01               	xorlw	1	; case 3
 23882  003A24  B4D8               	btfsc	status,2,c
 23883  003A26  D7E9               	goto	l1033
 23884  003A28                     l1025:
 23885                           
 23886                           ;arp.c: 389: return err;
 23887  003A28  C0FD  F134         	movff	arp_gratuitous@err,?_arp_gratuitous
 23888  003A2C  C0FE  F135         	movff	arp_gratuitous@err+1,?_arp_gratuitous+1
 23889  003A30  C0FF  F136         	movff	arp_gratuitous@err+2,?_arp_gratuitous+2
 23890  003A34  0012               	return		;funcret
 23891  003A36                     __end_of_arp_gratuitous:
 23892                           	opt stack 0
 23893                           tblptru	equ	0xFF8
 23894                           tblptrh	equ	0xFF7
 23895                           tblptrl	equ	0xFF6
 23896                           tablat	equ	0xFF5
 23897                           prodh	equ	0xFF4
 23898                           prodl	equ	0xFF3
 23899                           intcon	equ	0xFF2
 23900                           intcon3	equ	0xFF0
 23901                           indf0	equ	0xFEF
 23902                           postinc0	equ	0xFEE
 23903                           plusw0	equ	0xFEB
 23904                           fsr0h	equ	0xFEA
 23905                           fsr0l	equ	0xFE9
 23906                           wreg	equ	0xFE8
 23907                           indf1	equ	0xFE7
 23908                           postinc1	equ	0xFE6
 23909                           postdec1	equ	0xFE5
 23910                           plusw1	equ	0xFE3
 23911                           fsr1h	equ	0xFE2
 23912                           fsr1l	equ	0xFE1
 23913                           indf2	equ	0xFDF
 23914                           postinc2	equ	0xFDE
 23915                           postdec2	equ	0xFDD
 23916                           plusw2	equ	0xFDB
 23917                           fsr2h	equ	0xFDA
 23918                           fsr2l	equ	0xFD9
 23919                           status	equ	0xFD8
 23920                           
 23921 ;; *************** function _arp_sendRequest *****************
 23922 ;; Defined at:
 23923 ;;		line 190 in file "src/stack/protocols/arp.c"
 23924 ;; Parameters:    Size  Location     Type
 23925 ;;  ipSender        4    0[BANK1 ] struct ipv4_address
 23926 ;;  ipTarget        4    4[BANK1 ] struct ipv4_address
 23927 ;; Auto vars:     Size  Location     Type
 23928 ;;  request        32   20[BANK1 ] struct arp_message
 23929 ;;  targetMAC       6   14[BANK1 ] struct macaddress
 23930 ;;  senderMAC       6    8[BANK1 ] struct macaddress
 23931 ;; Return value:  Size  Location     Type
 23932 ;;                  1    wreg      void 
 23933 ;; Registers used:
 23934 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 23935 ;; Tracked objects:
 23936 ;;		On entry : 0/0
 23937 ;;		On exit  : 0/0
 23938 ;;		Unchanged: 0/0
 23939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23940 ;;      Params:         0       0       8       0       0       0       0       0       0
 23941 ;;      Locals:         0       0      44       0       0       0       0       0       0
 23942 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23943 ;;      Totals:         0       0      52       0       0       0       0       0       0
 23944 ;;Total ram usage:       52 bytes
 23945 ;; Hardware stack levels used:    1
 23946 ;; Hardware stack levels required when called:   10
 23947 ;; This function calls:
 23948 ;;		_arp_send
 23949 ;;		_ethernetController_getMacAddress
 23950 ;;		_mac_setAllZero
 23951 ;; This function is called by:
 23952 ;;		_arp_probe
 23953 ;;		_arp_gratuitous
 23954 ;;		_ipv4_sendFrame
 23955 ;; This function uses a non-reentrant model
 23956 ;;
 23957                           
 23958                           	psect	text94
 23959  0059BE                     __ptext94:
 23960                           	opt stack 0
 23961  0059BE                     _arp_sendRequest:
 23962                           	opt stack 18
 23963                           
 23964                           ;arp.c: 191: arp_message_t request;
 23965                           ;arp.c: 192: macaddress_t senderMAC;
 23966                           ;arp.c: 193: macaddress_t targetMAC;
 23967                           ;arp.c: 195: senderMAC = ethernetController_getMacAddress();
 23968                           
 23969                           ;incstack = 0
 23970  0059BE  EC04  F030         	call	_ethernetController_getMacAddress	;wreg free
 23971  0059C2  EE21  F008         	lfsr	2,arp_sendRequest@senderMAC
 23972  0059C6  0E05               	movlw	5
 23973  0059C8                     u13641:
 23974  0059C8  CFEB FFDB          	movff	plusw0,plusw2
 23975  0059CC  06E8               	decf	wreg,f,c
 23976  0059CE  E2FC               	bc	u13641
 23977                           
 23978                           ;arp.c: 196: mac_setAllZero(&targetMAC);
 23979  0059D0  0E0E               	movlw	low arp_sendRequest@targetMAC
 23980  0059D2  0100               	movlb	0	; () banked
 23981  0059D4  6F60               	movwf	mac_setAllZero@mac& (0+255),b
 23982  0059D6  0E01               	movlw	high arp_sendRequest@targetMAC
 23983  0059D8  6F61               	movwf	(mac_setAllZero@mac+1)& (0+255),b
 23984  0059DA  EC24  F036         	call	_mac_setAllZero	;wreg free
 23985                           
 23986                           ;arp.c: 198: request.hlen = 6u;
 23987  0059DE  0E06               	movlw	6
 23988  0059E0  0101               	movlb	1	; () banked
 23989  0059E2  6F18               	movwf	(arp_sendRequest@request+4)& (0+255),b
 23990                           
 23991                           ; BSR set to: 1
 23992                           ;arp.c: 199: request.plen = 4u;
 23993  0059E4  0E04               	movlw	4
 23994  0059E6  6F19               	movwf	(arp_sendRequest@request+5)& (0+255),b
 23995                           
 23996                           ; BSR set to: 1
 23997                           ;arp.c: 200: request.htype = ARP_HTYPE_ETHERNET;
 23998  0059E8  0E00               	movlw	0
 23999  0059EA  6F15               	movwf	(arp_sendRequest@request+1)& (0+255),b
 24000  0059EC  0E01               	movlw	1
 24001  0059EE  6F14               	movwf	arp_sendRequest@request& (0+255),b
 24002                           
 24003                           ; BSR set to: 1
 24004                           ;arp.c: 201: request.ptype = ARP_PTYPE_IPv4;
 24005  0059F0  0E08               	movlw	8
 24006  0059F2  6F17               	movwf	(arp_sendRequest@request+3)& (0+255),b
 24007  0059F4  0E00               	movlw	0
 24008  0059F6  6F16               	movwf	(arp_sendRequest@request+2)& (0+255),b
 24009                           
 24010                           ; BSR set to: 1
 24011                           ;arp.c: 202: request.operation = ARP_REQUEST;
 24012  0059F8  0E00               	movlw	0
 24013  0059FA  6F1B               	movwf	(arp_sendRequest@request+7)& (0+255),b
 24014  0059FC  0E01               	movlw	1
 24015  0059FE  6F1A               	movwf	(arp_sendRequest@request+6)& (0+255),b
 24016                           
 24017                           ; BSR set to: 1
 24018                           ;arp.c: 203: request.senderIPAddress = ipSender;
 24019  005A00  C100  F122         	movff	arp_sendRequest@ipSender,arp_sendRequest@request+14
 24020  005A04  C101  F123         	movff	arp_sendRequest@ipSender+1,arp_sendRequest@request+15
 24021  005A08  C102  F124         	movff	arp_sendRequest@ipSender+2,arp_sendRequest@request+16
 24022  005A0C  C103  F125         	movff	arp_sendRequest@ipSender+3,arp_sendRequest@request+17
 24023                           
 24024                           ; BSR set to: 1
 24025                           ;arp.c: 204: request.senderMACAddress = senderMAC;
 24026  005A10  EE21  F008         	lfsr	2,arp_sendRequest@senderMAC
 24027  005A14  EE11  F01C         	lfsr	1,arp_sendRequest@request+8
 24028  005A18  0E05               	movlw	5
 24029  005A1A                     u13651:
 24030  005A1A  CFDB FFE3          	movff	plusw2,plusw1
 24031  005A1E  06E8               	decf	wreg,f,c
 24032  005A20  E2FC               	bc	u13651
 24033                           
 24034                           ; BSR set to: 1
 24035                           ;arp.c: 205: request.targetIPAddress = ipTarget;
 24036  005A22  C104  F12C         	movff	arp_sendRequest@ipTarget,arp_sendRequest@request+24
 24037  005A26  C105  F12D         	movff	arp_sendRequest@ipTarget+1,arp_sendRequest@request+25
 24038  005A2A  C106  F12E         	movff	arp_sendRequest@ipTarget+2,arp_sendRequest@request+26
 24039  005A2E  C107  F12F         	movff	arp_sendRequest@ipTarget+3,arp_sendRequest@request+27
 24040                           
 24041                           ; BSR set to: 1
 24042                           ;arp.c: 206: request.targetMACAddress = targetMAC;
 24043  005A32  EE21  F00E         	lfsr	2,arp_sendRequest@targetMAC
 24044  005A36  EE11  F026         	lfsr	1,arp_sendRequest@request+18
 24045  005A3A  0E05               	movlw	5
 24046  005A3C                     u13661:
 24047  005A3C  CFDB FFE3          	movff	plusw2,plusw1
 24048  005A40  06E8               	decf	wreg,f,c
 24049  005A42  E2FC               	bc	u13661
 24050                           
 24051                           ; BSR set to: 1
 24052                           ;arp.c: 208: arp_send(request);
 24053  005A44  EE21  F014         	lfsr	2,arp_sendRequest@request
 24054  005A48  EE00  F0A7         	lfsr	0,arp_send@arp
 24055  005A4C  0E1F               	movlw	31
 24056  005A4E                     u13671:
 24057  005A4E  CFDB FFEB          	movff	plusw2,plusw0
 24058  005A52  06E8               	decf	wreg,f,c
 24059  005A54  E2FC               	bc	u13671
 24060  005A56  EC53  F016         	call	_arp_send	;wreg free
 24061  005A5A  0012               	return		;funcret
 24062  005A5C                     __end_of_arp_sendRequest:
 24063                           	opt stack 0
 24064                           tblptru	equ	0xFF8
 24065                           tblptrh	equ	0xFF7
 24066                           tblptrl	equ	0xFF6
 24067                           tablat	equ	0xFF5
 24068                           prodh	equ	0xFF4
 24069                           prodl	equ	0xFF3
 24070                           intcon	equ	0xFF2
 24071                           intcon3	equ	0xFF0
 24072                           indf0	equ	0xFEF
 24073                           postinc0	equ	0xFEE
 24074                           plusw0	equ	0xFEB
 24075                           fsr0h	equ	0xFEA
 24076                           fsr0l	equ	0xFE9
 24077                           wreg	equ	0xFE8
 24078                           indf1	equ	0xFE7
 24079                           postinc1	equ	0xFE6
 24080                           postdec1	equ	0xFE5
 24081                           plusw1	equ	0xFE3
 24082                           fsr1h	equ	0xFE2
 24083                           fsr1l	equ	0xFE1
 24084                           indf2	equ	0xFDF
 24085                           postinc2	equ	0xFDE
 24086                           postdec2	equ	0xFDD
 24087                           plusw2	equ	0xFDB
 24088                           fsr2h	equ	0xFDA
 24089                           fsr2l	equ	0xFD9
 24090                           status	equ	0xFD8
 24091                           
 24092 ;; *************** function _mac_setAllZero *****************
 24093 ;; Defined at:
 24094 ;;		line 47 in file "src/eth/mac.c"
 24095 ;; Parameters:    Size  Location     Type
 24096 ;;  mac             2    0[BANK0 ] PTR struct macaddress
 24097 ;;		 -> arp_init@mac(6), arp_sendRequest@targetMAC(6), 
 24098 ;; Auto vars:     Size  Location     Type
 24099 ;;  i               1    2[BANK0 ] unsigned char 
 24100 ;; Return value:  Size  Location     Type
 24101 ;;                  1    wreg      void 
 24102 ;; Registers used:
 24103 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 24104 ;; Tracked objects:
 24105 ;;		On entry : 0/0
 24106 ;;		On exit  : 0/0
 24107 ;;		Unchanged: 0/0
 24108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24109 ;;      Params:         0       2       0       0       0       0       0       0       0
 24110 ;;      Locals:         0       1       0       0       0       0       0       0       0
 24111 ;;      Temps:          0       0       0       0       0       0       0       0       0
 24112 ;;      Totals:         0       3       0       0       0       0       0       0       0
 24113 ;;Total ram usage:        3 bytes
 24114 ;; Hardware stack levels used:    1
 24115 ;; Hardware stack levels required when called:    4
 24116 ;; This function calls:
 24117 ;;		Nothing
 24118 ;; This function is called by:
 24119 ;;		_arp_sendRequest
 24120 ;;		_arp_init
 24121 ;; This function uses a non-reentrant model
 24122 ;;
 24123                           
 24124                           	psect	text95
 24125  006C48                     __ptext95:
 24126                           	opt stack 0
 24127  006C48                     _mac_setAllZero:
 24128                           	opt stack 24
 24129                           
 24130                           ;mac.c: 48: for (uint8_t i = 0; i < 6; i++)
 24131                           
 24132                           ;incstack = 0
 24133  006C48  0E00               	movlw	0
 24134  006C4A  0100               	movlb	0	; () banked
 24135  006C4C  6F62               	movwf	mac_setAllZero@i& (0+255),b
 24136  006C4E                     l10718:
 24137                           
 24138                           ; BSR set to: 0
 24139  006C4E  0E05               	movlw	5
 24140  006C50  6562               	cpfsgt	mac_setAllZero@i& (0+255),b
 24141  006C52  D001               	goto	l393
 24142  006C54  0012               	return	
 24143  006C56                     l393:
 24144                           
 24145                           ; BSR set to: 0
 24146                           ;mac.c: 49: mac->address[i] = 0x00;
 24147                           
 24148                           ; BSR set to: 0
 24149  006C56  5162               	movf	mac_setAllZero@i& (0+255),w,b
 24150  006C58  0D01               	mullw	1
 24151  006C5A  50F3               	movf	prodl,w,c
 24152  006C5C  2560               	addwf	mac_setAllZero@mac& (0+255),w,b
 24153  006C5E  6ED9               	movwf	fsr2l,c
 24154  006C60  50F4               	movf	prodh,w,c
 24155  006C62  2161               	addwfc	(mac_setAllZero@mac+1)& (0+255),w,b
 24156  006C64  6EDA               	movwf	fsr2h,c
 24157  006C66  0E00               	movlw	0
 24158  006C68  6EDF               	movwf	indf2,c
 24159                           
 24160                           ; BSR set to: 0
 24161  006C6A  2B62               	incf	mac_setAllZero@i& (0+255),f,b
 24162  006C6C  D7F0               	goto	l10718
 24163  006C6E                     __end_of_mac_setAllZero:
 24164                           	opt stack 0
 24165                           tblptru	equ	0xFF8
 24166                           tblptrh	equ	0xFF7
 24167                           tblptrl	equ	0xFF6
 24168                           tablat	equ	0xFF5
 24169                           prodh	equ	0xFF4
 24170                           prodl	equ	0xFF3
 24171                           intcon	equ	0xFF2
 24172                           intcon3	equ	0xFF0
 24173                           indf0	equ	0xFEF
 24174                           postinc0	equ	0xFEE
 24175                           plusw0	equ	0xFEB
 24176                           fsr0h	equ	0xFEA
 24177                           fsr0l	equ	0xFE9
 24178                           wreg	equ	0xFE8
 24179                           indf1	equ	0xFE7
 24180                           postinc1	equ	0xFE6
 24181                           postdec1	equ	0xFE5
 24182                           plusw1	equ	0xFE3
 24183                           fsr1h	equ	0xFE2
 24184                           fsr1l	equ	0xFE1
 24185                           indf2	equ	0xFDF
 24186                           postinc2	equ	0xFDE
 24187                           postdec2	equ	0xFDD
 24188                           plusw2	equ	0xFDB
 24189                           fsr2h	equ	0xFDA
 24190                           fsr2l	equ	0xFD9
 24191                           status	equ	0xFD8
 24192                           
 24193 ;; *************** function _ethernetController_getMacAddress *****************
 24194 ;; Defined at:
 24195 ;;		line 157 in file "src/enc424j600/ENC424J600.c"
 24196 ;; Parameters:    Size  Location     Type
 24197 ;;		None
 24198 ;; Auto vars:     Size  Location     Type
 24199 ;;  mac             6   20[BANK0 ] struct macaddress
 24200 ;; Return value:  Size  Location     Type
 24201 ;;                  6   14[BANK0 ] struct macaddress
 24202 ;; Registers used:
 24203 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 24204 ;; Tracked objects:
 24205 ;;		On entry : 0/0
 24206 ;;		On exit  : 0/0
 24207 ;;		Unchanged: 0/0
 24208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24209 ;;      Params:         0       6       0       0       0       0       0       0       0
 24210 ;;      Locals:         0       6       0       0       0       0       0       0       0
 24211 ;;      Temps:          0       0       0       0       0       0       0       0       0
 24212 ;;      Totals:         0      12       0       0       0       0       0       0       0
 24213 ;;Total ram usage:       12 bytes
 24214 ;; Hardware stack levels used:    1
 24215 ;; Hardware stack levels required when called:    7
 24216 ;; This function calls:
 24217 ;;		_enc424j600_readControlRegisterUnbanked
 24218 ;; This function is called by:
 24219 ;;		_main
 24220 ;;		_arp_sendRequest
 24221 ;;		_arp_sendReply
 24222 ;;		_ipv4_sendFrame
 24223 ;; This function uses a non-reentrant model
 24224 ;;
 24225                           
 24226                           	psect	text96
 24227  006008                     __ptext96:
 24228                           	opt stack 0
 24229  006008                     _ethernetController_getMacAddress:
 24230                           	opt stack 21
 24231                           
 24232                           ;ENC424J600.c: 158: macaddress_t mac;
 24233                           ;ENC424J600.c: 159: enc424j600_readControlRegisterUnbanked(0x04 + 0x60, &mac.address[0])
      +                          ;
 24234                           
 24235                           ; BSR set to: 0
 24236                           ;incstack = 0
 24237  006008  0E74               	movlw	low ethernetController_getMacAddress@mac
 24238  00600A  0100               	movlb	0	; () banked
 24239  00600C  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 24240  00600E  0E00               	movlw	high ethernetController_getMacAddress@mac
 24241  006010  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 24242  006012  0E64               	movlw	100
 24243  006014  ECD7  F034         	call	_enc424j600_readControlRegisterUnbanked
 24244                           
 24245                           ;ENC424J600.c: 160: enc424j600_readControlRegisterUnbanked(0x05 + 0x60, &mac.address[1])
      +                          ;
 24246  006018  0E75               	movlw	low (ethernetController_getMacAddress@mac+1)
 24247  00601A  0100               	movlb	0	; () banked
 24248  00601C  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 24249  00601E  0E00               	movlw	high (ethernetController_getMacAddress@mac+1)
 24250  006020  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 24251  006022  0E65               	movlw	101
 24252  006024  ECD7  F034         	call	_enc424j600_readControlRegisterUnbanked
 24253                           
 24254                           ;ENC424J600.c: 161: enc424j600_readControlRegisterUnbanked(0x02 + 0x60, &mac.address[2])
      +                          ;
 24255  006028  0E76               	movlw	low (ethernetController_getMacAddress@mac+2)
 24256  00602A  0100               	movlb	0	; () banked
 24257  00602C  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 24258  00602E  0E00               	movlw	high (ethernetController_getMacAddress@mac+2)
 24259  006030  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 24260  006032  0E62               	movlw	98
 24261  006034  ECD7  F034         	call	_enc424j600_readControlRegisterUnbanked
 24262                           
 24263                           ;ENC424J600.c: 162: enc424j600_readControlRegisterUnbanked(0x03 + 0x60, &mac.address[3])
      +                          ;
 24264  006038  0E77               	movlw	low (ethernetController_getMacAddress@mac+3)
 24265  00603A  0100               	movlb	0	; () banked
 24266  00603C  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 24267  00603E  0E00               	movlw	high (ethernetController_getMacAddress@mac+3)
 24268  006040  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 24269  006042  0E63               	movlw	99
 24270  006044  ECD7  F034         	call	_enc424j600_readControlRegisterUnbanked
 24271                           
 24272                           ;ENC424J600.c: 163: enc424j600_readControlRegisterUnbanked(0x00 + 0x60, &mac.address[4])
      +                          ;
 24273  006048  0E78               	movlw	low (ethernetController_getMacAddress@mac+4)
 24274  00604A  0100               	movlb	0	; () banked
 24275  00604C  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 24276  00604E  0E00               	movlw	high (ethernetController_getMacAddress@mac+4)
 24277  006050  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 24278  006052  0E60               	movlw	96
 24279  006054  ECD7  F034         	call	_enc424j600_readControlRegisterUnbanked
 24280                           
 24281                           ;ENC424J600.c: 164: enc424j600_readControlRegisterUnbanked(0x01 + 0x60, &mac.address[5])
      +                          ;
 24282  006058  0E79               	movlw	low (ethernetController_getMacAddress@mac+5)
 24283  00605A  0100               	movlb	0	; () banked
 24284  00605C  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 24285  00605E  0E00               	movlw	high (ethernetController_getMacAddress@mac+5)
 24286  006060  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 24287  006062  0E61               	movlw	97
 24288  006064  ECD7  F034         	call	_enc424j600_readControlRegisterUnbanked
 24289                           
 24290                           ;ENC424J600.c: 165: return mac;
 24291  006068  EE20  F074         	lfsr	2,ethernetController_getMacAddress@mac
 24292  00606C  EE00  F06E         	lfsr	0,?_ethernetController_getMacAddress
 24293  006070  0E05               	movlw	5
 24294  006072                     u12291:
 24295  006072  CFDB FFEB          	movff	plusw2,plusw0
 24296  006076  06E8               	decf	wreg,f,c
 24297  006078  E2FC               	bc	u12291
 24298  00607A  0012               	return	
 24299  00607C                     __end_of_ethernetController_getMacAddress:
 24300                           	opt stack 0
 24301                           tblptru	equ	0xFF8
 24302                           tblptrh	equ	0xFF7
 24303                           tblptrl	equ	0xFF6
 24304                           tablat	equ	0xFF5
 24305                           prodh	equ	0xFF4
 24306                           prodl	equ	0xFF3
 24307                           intcon	equ	0xFF2
 24308                           intcon3	equ	0xFF0
 24309                           indf0	equ	0xFEF
 24310                           postinc0	equ	0xFEE
 24311                           plusw0	equ	0xFEB
 24312                           fsr0h	equ	0xFEA
 24313                           fsr0l	equ	0xFE9
 24314                           wreg	equ	0xFE8
 24315                           indf1	equ	0xFE7
 24316                           postinc1	equ	0xFE6
 24317                           postdec1	equ	0xFE5
 24318                           plusw1	equ	0xFE3
 24319                           fsr1h	equ	0xFE2
 24320                           fsr1l	equ	0xFE1
 24321                           indf2	equ	0xFDF
 24322                           postinc2	equ	0xFDE
 24323                           postdec2	equ	0xFDD
 24324                           plusw2	equ	0xFDB
 24325                           fsr2h	equ	0xFDA
 24326                           fsr2l	equ	0xFD9
 24327                           status	equ	0xFD8
 24328                           
 24329 ;; *************** function _enc424j600_readControlRegisterUnbanked *****************
 24330 ;; Defined at:
 24331 ;;		line 527 in file "src/enc424j600/ENC424J600.c"
 24332 ;; Parameters:    Size  Location     Type
 24333 ;;  addr            1    wreg     unsigned char 
 24334 ;;  data            2   10[BANK0 ] PTR unsigned char 
 24335 ;;		 -> enc424j600_clearInterruptFlag@temp(1), enc424j600_getInterruptFlags@high(1), enc424j600_getInterruptFlags@low(1)
      +, enc424j600_disable@temp(1), 
 24336 ;;		 -> enc424j600_enable@temp(1), enc424j600_disableAutoMACInsertion@temp(1), enc424j600_enableAutoMACInsertion@temp(1)
      +, enc424j600_getPacketCount@lowByte(1), 
 24337 ;;		 -> enc424j600_readPHYRegister@highByte(1), enc424j600_readPHYRegister@lowByte(1), enc424j600_readPHYRegister@temp(1
      +), ethernetController_setLEDConfig@data(1), 
 24338 ;;		 -> ethernetController_updateLinkStatus@temp(1), mac.address(6), ethernetController_getMacAddress@mac(6), ethernetCo
      +ntroller_getSiliconRevision@data(1), 
 24339 ;;		 -> ethernetController_checkDeviceId@data(1), ethernetController_softReset@receivedData(2), 
 24340 ;; Auto vars:     Size  Location     Type
 24341 ;;  addr            1   12[BANK0 ] unsigned char 
 24342 ;;  opcode          1   13[BANK0 ] unsigned char 
 24343 ;; Return value:  Size  Location     Type
 24344 ;;                  1    wreg      void 
 24345 ;; Registers used:
 24346 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24347 ;; Tracked objects:
 24348 ;;		On entry : 0/0
 24349 ;;		On exit  : 0/0
 24350 ;;		Unchanged: 0/0
 24351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24352 ;;      Params:         0       2       0       0       0       0       0       0       0
 24353 ;;      Locals:         0       2       0       0       0       0       0       0       0
 24354 ;;      Temps:          0       0       0       0       0       0       0       0       0
 24355 ;;      Totals:         0       4       0       0       0       0       0       0       0
 24356 ;;Total ram usage:        4 bytes
 24357 ;; Hardware stack levels used:    1
 24358 ;; Hardware stack levels required when called:    6
 24359 ;; This function calls:
 24360 ;;		_enc424j600_readSPI
 24361 ;;		_enc424j600_writeSPI
 24362 ;; This function is called by:
 24363 ;;		_ethernetController_softReset
 24364 ;;		_ethernetController_checkDeviceId
 24365 ;;		_ethernetController_getMacAddress
 24366 ;;		_ethernetController_updateLinkStatus
 24367 ;;		_ethernetController_setLEDConfig
 24368 ;;		_enc424j600_readPHYRegister
 24369 ;;		_enc424j600_getPacketCount
 24370 ;;		_enc424j600_enableAutoMACInsertion
 24371 ;;		_enc424j600_getInterruptFlags
 24372 ;;		_enc424j600_clearInterruptFlag
 24373 ;;		_ethernetController_getSiliconRevision
 24374 ;;		_enc424j600_disableAutoMACInsertion
 24375 ;;		_enc424j600_enable
 24376 ;;		_enc424j600_disable
 24377 ;; This function uses a non-reentrant model
 24378 ;;
 24379                           
 24380                           	psect	text97
 24381  0069AE                     __ptext97:
 24382                           	opt stack 0
 24383  0069AE                     _enc424j600_readControlRegisterUnbanked:
 24384                           	opt stack 21
 24385                           
 24386                           ;incstack = 0
 24387                           ;enc424j600_readControlRegisterUnbanked@addr stored from wreg
 24388  0069AE  0100               	movlb	0	; () banked
 24389  0069B0  6F6C               	movwf	enc424j600_readControlRegisterUnbanked@addr& (0+255),b
 24390                           
 24391                           ;ENC424J600.c: 528: uint8_t opcode = 0x20;
 24392  0069B2  0E20               	movlw	32
 24393  0069B4  0100               	movlb	0	; () banked
 24394  0069B6  6F6D               	movwf	enc424j600_readControlRegisterUnbanked@opcode& (0+255),b
 24395                           
 24396                           ; BSR set to: 0
 24397                           ;ENC424J600.c: 529: PORTBbits.RB4=0;
 24398  0069B8  9881               	bcf	3969,4,c	;volatile
 24399                           
 24400                           ; BSR set to: 0
 24401                           ;ENC424J600.c: 530: enc424j600_writeSPI(&opcode);
 24402  0069BA  0E6D               	movlw	low enc424j600_readControlRegisterUnbanked@opcode
 24403  0069BC  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 24404  0069BE  0E00               	movlw	high enc424j600_readControlRegisterUnbanked@opcode
 24405  0069C0  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 24406  0069C2  EC50  F031         	call	_enc424j600_writeSPI	;wreg free
 24407                           
 24408                           ;ENC424J600.c: 531: enc424j600_writeSPI(&addr);
 24409  0069C6  0E6C               	movlw	low enc424j600_readControlRegisterUnbanked@addr
 24410  0069C8  0100               	movlb	0	; () banked
 24411  0069CA  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 24412  0069CC  0E00               	movlw	high enc424j600_readControlRegisterUnbanked@addr
 24413  0069CE  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 24414  0069D0  EC50  F031         	call	_enc424j600_writeSPI	;wreg free
 24415                           
 24416                           ;ENC424J600.c: 532: enc424j600_readSPI(data);
 24417  0069D4  C06A  F060         	movff	enc424j600_readControlRegisterUnbanked@data,enc424j600_readSPI@data
 24418  0069D8  C06B  F061         	movff	enc424j600_readControlRegisterUnbanked@data+1,enc424j600_readSPI@data+1
 24419  0069DC  ECE7  F030         	call	_enc424j600_readSPI	;wreg free
 24420                           
 24421                           ;ENC424J600.c: 533: PORTBbits.RB4=1;
 24422  0069E0  8881               	bsf	3969,4,c	;volatile
 24423  0069E2  0012               	return		;funcret
 24424  0069E4                     __end_of_enc424j600_readControlRegisterUnbanked:
 24425                           	opt stack 0
 24426                           tblptru	equ	0xFF8
 24427                           tblptrh	equ	0xFF7
 24428                           tblptrl	equ	0xFF6
 24429                           tablat	equ	0xFF5
 24430                           prodh	equ	0xFF4
 24431                           prodl	equ	0xFF3
 24432                           intcon	equ	0xFF2
 24433                           intcon3	equ	0xFF0
 24434                           indf0	equ	0xFEF
 24435                           postinc0	equ	0xFEE
 24436                           plusw0	equ	0xFEB
 24437                           fsr0h	equ	0xFEA
 24438                           fsr0l	equ	0xFE9
 24439                           wreg	equ	0xFE8
 24440                           indf1	equ	0xFE7
 24441                           postinc1	equ	0xFE6
 24442                           postdec1	equ	0xFE5
 24443                           plusw1	equ	0xFE3
 24444                           fsr1h	equ	0xFE2
 24445                           fsr1l	equ	0xFE1
 24446                           indf2	equ	0xFDF
 24447                           postinc2	equ	0xFDE
 24448                           postdec2	equ	0xFDD
 24449                           plusw2	equ	0xFDB
 24450                           fsr2h	equ	0xFDA
 24451                           fsr2l	equ	0xFD9
 24452                           status	equ	0xFD8
 24453                           
 24454 ;; *************** function _arp_send *****************
 24455 ;; Defined at:
 24456 ;;		line 144 in file "src/stack/protocols/arp.c"
 24457 ;; Parameters:    Size  Location     Type
 24458 ;;  arp            32   71[BANK0 ] struct arp_message
 24459 ;; Auto vars:     Size  Location     Type
 24460 ;;  i               1  112[BANK0 ] unsigned char 
 24461 ;;  i               1  111[BANK0 ] unsigned char 
 24462 ;;  i               1  110[BANK0 ] unsigned char 
 24463 ;;  i               1  109[BANK0 ] unsigned char 
 24464 ;;  ethFrame       34  113[BANK0 ] struct ethernetFrame
 24465 ;;  field           9  147[BANK0 ] struct memoryField
 24466 ;;  destination     6  103[BANK0 ] struct macaddress
 24467 ;; Return value:  Size  Location     Type
 24468 ;;                  1    wreg      void 
 24469 ;; Registers used:
 24470 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 24471 ;; Tracked objects:
 24472 ;;		On entry : 0/0
 24473 ;;		On exit  : 0/0
 24474 ;;		Unchanged: 0/0
 24475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24476 ;;      Params:         0      32       0       0       0       0       0       0       0
 24477 ;;      Locals:         0      53       0       0       0       0       0       0       0
 24478 ;;      Temps:          0       0       0       0       0       0       0       0       0
 24479 ;;      Totals:         0      85       0       0       0       0       0       0       0
 24480 ;;Total ram usage:       85 bytes
 24481 ;; Hardware stack levels used:    1
 24482 ;; Hardware stack levels required when called:    9
 24483 ;; This function calls:
 24484 ;;		_ethernetController_getSourceMACAddress
 24485 ;;		_ethernetController_sendPacket
 24486 ;;		_ethernetController_streamToTransmitBuffer
 24487 ;;		_ethernet_txFrameRequest
 24488 ;;		_mac_setToBroadcast
 24489 ;; This function is called by:
 24490 ;;		_arp_sendRequest
 24491 ;;		_arp_sendReply
 24492 ;; This function uses a non-reentrant model
 24493 ;;
 24494                           
 24495                           	psect	text98
 24496  002CA6                     __ptext98:
 24497                           	opt stack 0
 24498  002CA6                     _arp_send:
 24499                           	opt stack 18
 24500                           
 24501                           ;arp.c: 145: memoryField_t field;
 24502                           ;arp.c: 146: ethernetFrame_t ethFrame;
 24503                           ;arp.c: 149: macaddress_t destination;
 24504                           ;arp.c: 150: mac_setToBroadcast(&destination);
 24505                           
 24506                           ;incstack = 0
 24507  002CA6  0EC7               	movlw	low arp_send@destination
 24508  002CA8  0100               	movlb	0	; () banked
 24509  002CAA  6F60               	movwf	mac_setToBroadcast@mac& (0+255),b
 24510  002CAC  0E00               	movlw	high arp_send@destination
 24511  002CAE  6F61               	movwf	(mac_setToBroadcast@mac+1)& (0+255),b
 24512  002CB0  EC37  F036         	call	_mac_setToBroadcast	;wreg free
 24513                           
 24514                           ;arp.c: 151: ethFrame.destination = destination;
 24515  002CB4  EE20  F0C7         	lfsr	2,arp_send@destination
 24516  002CB8  EE10  F0D9         	lfsr	1,arp_send@ethFrame+8
 24517  002CBC  0E05               	movlw	5
 24518  002CBE                     u12441:
 24519  002CBE  CFDB FFE3          	movff	plusw2,plusw1
 24520  002CC2  06E8               	decf	wreg,f,c
 24521  002CC4  E2FC               	bc	u12441
 24522                           
 24523                           ;arp.c: 155: ethFrame.length = 36;
 24524  002CC6  0E00               	movlw	0
 24525  002CC8  0100               	movlb	0	; () banked
 24526  002CCA  6FD2               	movwf	(arp_send@ethFrame+1)& (0+255),b
 24527  002CCC  0E24               	movlw	36
 24528  002CCE  6FD1               	movwf	arp_send@ethFrame& (0+255),b
 24529                           
 24530                           ; BSR set to: 0
 24531                           ;arp.c: 156: ethFrame.source = ethernetController_getSourceMACAddress(field);
 24532  002CD0  EE20  F0F3         	lfsr	2,arp_send@field
 24533  002CD4  EE00  F06F         	lfsr	0,ethernetController_getSourceMACAddress@field
 24534  002CD8  0E08               	movlw	8
 24535  002CDA                     u12451:
 24536  002CDA  CFDB FFEB          	movff	plusw2,plusw0
 24537  002CDE  06E8               	decf	wreg,f,c
 24538  002CE0  E2FC               	bc	u12451
 24539  002CE2  ECAF  F030         	call	_ethernetController_getSourceMACAddress	;wreg free
 24540  002CE6  EE20  F0D3         	lfsr	2,arp_send@ethFrame+2
 24541  002CEA  0E05               	movlw	5
 24542  002CEC                     u12461:
 24543  002CEC  CFEB FFDB          	movff	plusw0,plusw2
 24544  002CF0  06E8               	decf	wreg,f,c
 24545  002CF2  E2FC               	bc	u12461
 24546                           
 24547                           ;arp.c: 157: ethFrame.ethertype = ETHERTYPE_ARP;
 24548  002CF4  0E08               	movlw	8
 24549  002CF6  0100               	movlb	0	; () banked
 24550  002CF8  6FE0               	movwf	(arp_send@ethFrame+15)& (0+255),b
 24551  002CFA  0E06               	movlw	6
 24552  002CFC  6FDF               	movwf	(arp_send@ethFrame+14)& (0+255),b
 24553                           
 24554                           ; BSR set to: 0
 24555                           ;arp.c: 159: ethernet_txFrameRequest(&ethFrame);
 24556  002CFE  0ED1               	movlw	low arp_send@ethFrame
 24557  002D00  6FA2               	movwf	ethernet_txFrameRequest@frame& (0+255),b
 24558  002D02  0E00               	movlw	high arp_send@ethFrame
 24559  002D04  6FA3               	movwf	(ethernet_txFrameRequest@frame+1)& (0+255),b
 24560  002D06  EC4B  F028         	call	_ethernet_txFrameRequest	;wreg free
 24561                           
 24562                           ;arp.c: 161: if (ethFrame.memory.fOutOfMemory) {
 24563  002D0A  0100               	movlb	0	; () banked
 24564  002D0C  51E8               	movf	(arp_send@ethFrame+23)& (0+255),w,b
 24565  002D0E  A4D8               	btfss	status,2,c
 24566  002D10  0012               	return	
 24567                           
 24568                           ; BSR set to: 0
 24569                           ;arp.c: 163: }
 24570                           ;arp.c: 165: field.start = ethFrame.memory.start + 8;
 24571                           
 24572                           ; BSR set to: 0
 24573                           
 24574                           ; BSR set to: 0
 24575                           ;arp.c: 162: return;
 24576  002D12  0E08               	movlw	8
 24577  002D14  25E1               	addwf	(arp_send@ethFrame+16)& (0+255),w,b
 24578  002D16  6FF3               	movwf	arp_send@field& (0+255),b
 24579  002D18  0E00               	movlw	0
 24580  002D1A  21E2               	addwfc	(arp_send@ethFrame+17)& (0+255),w,b
 24581  002D1C  6FF4               	movwf	(arp_send@field+1)& (0+255),b
 24582                           
 24583                           ; BSR set to: 0
 24584                           ;arp.c: 166: field.end = ethFrame.memory.end;
 24585  002D1E  C0E3  F0F5         	movff	arp_send@ethFrame+18,arp_send@field+2
 24586  002D22  C0E4  F0F6         	movff	arp_send@ethFrame+19,arp_send@field+3
 24587                           
 24588                           ; BSR set to: 0
 24589                           ;arp.c: 167: field.length = 28;
 24590  002D26  0E00               	movlw	0
 24591  002D28  6FF8               	movwf	(arp_send@field+5)& (0+255),b
 24592  002D2A  0E1C               	movlw	28
 24593  002D2C  6FF7               	movwf	(arp_send@field+4)& (0+255),b
 24594                           
 24595                           ; BSR set to: 0
 24596                           ;arp.c: 169: ethernetController_streamToTransmitBuffer((arp.htype & 0xff00) >> 8, field)
      +                          ;
 24597  002D2E  EE20  F0F3         	lfsr	2,arp_send@field
 24598  002D32  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 24599  002D36  0E08               	movlw	8
 24600  002D38                     u12481:
 24601  002D38  CFDB FFEB          	movff	plusw2,plusw0
 24602  002D3C  06E8               	decf	wreg,f,c
 24603  002D3E  E2FC               	bc	u12481
 24604  002D40  51A8               	movf	(arp_send@arp+1)& (0+255),w,b
 24605  002D42  EC8E  F02F         	call	_ethernetController_streamToTransmitBuffer
 24606                           
 24607                           ;arp.c: 170: ethernetController_streamToTransmitBuffer(arp.htype & 0x00ff, field);
 24608  002D46  EE20  F0F3         	lfsr	2,arp_send@field
 24609  002D4A  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 24610  002D4E  0E08               	movlw	8
 24611  002D50                     u12491:
 24612  002D50  CFDB FFEB          	movff	plusw2,plusw0
 24613  002D54  06E8               	decf	wreg,f,c
 24614  002D56  E2FC               	bc	u12491
 24615  002D58  0100               	movlb	0	; () banked
 24616  002D5A  51A7               	movf	arp_send@arp& (0+255),w,b
 24617  002D5C  EC8E  F02F         	call	_ethernetController_streamToTransmitBuffer
 24618                           
 24619                           ;arp.c: 171: ethernetController_streamToTransmitBuffer((arp.ptype & 0xff00) >> 8, field)
      +                          ;
 24620  002D60  EE20  F0F3         	lfsr	2,arp_send@field
 24621  002D64  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 24622  002D68  0E08               	movlw	8
 24623  002D6A                     u12501:
 24624  002D6A  CFDB FFEB          	movff	plusw2,plusw0
 24625  002D6E  06E8               	decf	wreg,f,c
 24626  002D70  E2FC               	bc	u12501
 24627  002D72  0100               	movlb	0	; () banked
 24628  002D74  51AA               	movf	(arp_send@arp+3)& (0+255),w,b
 24629  002D76  EC8E  F02F         	call	_ethernetController_streamToTransmitBuffer
 24630                           
 24631                           ;arp.c: 172: ethernetController_streamToTransmitBuffer(arp.ptype & 0x00ff, field);
 24632  002D7A  EE20  F0F3         	lfsr	2,arp_send@field
 24633  002D7E  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 24634  002D82  0E08               	movlw	8
 24635  002D84                     u12511:
 24636  002D84  CFDB FFEB          	movff	plusw2,plusw0
 24637  002D88  06E8               	decf	wreg,f,c
 24638  002D8A  E2FC               	bc	u12511
 24639  002D8C  0100               	movlb	0	; () banked
 24640  002D8E  51A9               	movf	(arp_send@arp+2)& (0+255),w,b
 24641  002D90  EC8E  F02F         	call	_ethernetController_streamToTransmitBuffer
 24642                           
 24643                           ;arp.c: 173: ethernetController_streamToTransmitBuffer(arp.hlen, field);
 24644  002D94  EE20  F0F3         	lfsr	2,arp_send@field
 24645  002D98  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 24646  002D9C  0E08               	movlw	8
 24647  002D9E                     u12521:
 24648  002D9E  CFDB FFEB          	movff	plusw2,plusw0
 24649  002DA2  06E8               	decf	wreg,f,c
 24650  002DA4  E2FC               	bc	u12521
 24651  002DA6  0100               	movlb	0	; () banked
 24652  002DA8  51AB               	movf	(arp_send@arp+4)& (0+255),w,b
 24653  002DAA  EC8E  F02F         	call	_ethernetController_streamToTransmitBuffer
 24654                           
 24655                           ;arp.c: 174: ethernetController_streamToTransmitBuffer(arp.plen, field);
 24656  002DAE  EE20  F0F3         	lfsr	2,arp_send@field
 24657  002DB2  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 24658  002DB6  0E08               	movlw	8
 24659  002DB8                     u12531:
 24660  002DB8  CFDB FFEB          	movff	plusw2,plusw0
 24661  002DBC  06E8               	decf	wreg,f,c
 24662  002DBE  E2FC               	bc	u12531
 24663  002DC0  0100               	movlb	0	; () banked
 24664  002DC2  51AC               	movf	(arp_send@arp+5)& (0+255),w,b
 24665  002DC4  EC8E  F02F         	call	_ethernetController_streamToTransmitBuffer
 24666                           
 24667                           ;arp.c: 175: ethernetController_streamToTransmitBuffer((arp.operation & 0xff00) >> 8, fi
      +                          eld);
 24668  002DC8  EE20  F0F3         	lfsr	2,arp_send@field
 24669  002DCC  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 24670  002DD0  0E08               	movlw	8
 24671  002DD2                     u12541:
 24672  002DD2  CFDB FFEB          	movff	plusw2,plusw0
 24673  002DD6  06E8               	decf	wreg,f,c
 24674  002DD8  E2FC               	bc	u12541
 24675  002DDA  0100               	movlb	0	; () banked
 24676  002DDC  51AE               	movf	(arp_send@arp+7)& (0+255),w,b
 24677  002DDE  EC8E  F02F         	call	_ethernetController_streamToTransmitBuffer
 24678                           
 24679                           ;arp.c: 176: ethernetController_streamToTransmitBuffer(arp.operation & 0x00ff, field);
 24680  002DE2  EE20  F0F3         	lfsr	2,arp_send@field
 24681  002DE6  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 24682  002DEA  0E08               	movlw	8
 24683  002DEC                     u12551:
 24684  002DEC  CFDB FFEB          	movff	plusw2,plusw0
 24685  002DF0  06E8               	decf	wreg,f,c
 24686  002DF2  E2FC               	bc	u12551
 24687  002DF4  0100               	movlb	0	; () banked
 24688  002DF6  51AD               	movf	(arp_send@arp+6)& (0+255),w,b
 24689  002DF8  EC8E  F02F         	call	_ethernetController_streamToTransmitBuffer
 24690                           
 24691                           ;arp.c: 177: for (uint8_t i = 0; i < arp.hlen; i++)
 24692  002DFC  0E00               	movlw	0
 24693  002DFE  0100               	movlb	0	; () banked
 24694  002E00  6FCD               	movwf	arp_send@i& (0+255),b
 24695  002E02  D01A               	goto	l970
 24696  002E04                     
 24697                           ; BSR set to: 0
 24698                           ;arp.c: 178: ethernetController_streamToTransmitBuffer(arp.senderMACAddress.address[i], 
      +                          field);
 24699                           
 24700                           ; BSR set to: 0
 24701  002E04  EE20  F0F3         	lfsr	2,arp_send@field
 24702  002E08  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 24703  002E0C  0E08               	movlw	8
 24704  002E0E                     u12561:
 24705  002E0E  CFDB FFEB          	movff	plusw2,plusw0
 24706  002E12  06E8               	decf	wreg,f,c
 24707  002E14  E2FC               	bc	u12561
 24708  002E16  51CD               	movf	arp_send@i& (0+255),w,b
 24709  002E18  0D01               	mullw	1
 24710  002E1A  0E08               	movlw	8
 24711  002E1C  26F3               	addwf	prodl,f,c
 24712  002E1E  0E00               	movlw	0
 24713  002E20  22F4               	addwfc	prodh,f,c
 24714  002E22  0EA7               	movlw	low arp_send@arp
 24715  002E24  24F3               	addwf	prodl,w,c
 24716  002E26  6ED9               	movwf	fsr2l,c
 24717  002E28  0E00               	movlw	high arp_send@arp
 24718  002E2A  20F4               	addwfc	prodh,w,c
 24719  002E2C  6EDA               	movwf	fsr2h,c
 24720  002E2E  50DF               	movf	indf2,w,c
 24721  002E30  EC8E  F02F         	call	_ethernetController_streamToTransmitBuffer
 24722  002E34  0100               	movlb	0	; () banked
 24723  002E36  2BCD               	incf	arp_send@i& (0+255),f,b
 24724  002E38                     l970:
 24725                           
 24726                           ; BSR set to: 0
 24727                           
 24728                           ; BSR set to: 0
 24729  002E38  51AB               	movf	(arp_send@arp+4)& (0+255),w,b
 24730  002E3A  5DCD               	subwf	arp_send@i& (0+255),w,b
 24731  002E3C  A0D8               	btfss	status,0,c
 24732  002E3E  D7E2               	goto	l971
 24733                           
 24734                           ; BSR set to: 0
 24735                           ;arp.c: 179: for (uint8_t i = 0; i < arp.plen; i++)
 24736                           
 24737                           ; BSR set to: 0
 24738  002E40  0E00               	movlw	0
 24739  002E42  6FCE               	movwf	arp_send@i_3300& (0+255),b
 24740  002E44  D01A               	goto	l973
 24741  002E46                     
 24742                           ; BSR set to: 0
 24743                           ;arp.c: 180: ethernetController_streamToTransmitBuffer(arp.senderIPAddress.address[i], f
      +                          ield);
 24744                           
 24745                           ; BSR set to: 0
 24746  002E46  EE20  F0F3         	lfsr	2,arp_send@field
 24747  002E4A  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 24748  002E4E  0E08               	movlw	8
 24749  002E50                     u12581:
 24750  002E50  CFDB FFEB          	movff	plusw2,plusw0
 24751  002E54  06E8               	decf	wreg,f,c
 24752  002E56  E2FC               	bc	u12581
 24753  002E58  51CE               	movf	arp_send@i_3300& (0+255),w,b
 24754  002E5A  0D01               	mullw	1
 24755  002E5C  0E0E               	movlw	14
 24756  002E5E  26F3               	addwf	prodl,f,c
 24757  002E60  0E00               	movlw	0
 24758  002E62  22F4               	addwfc	prodh,f,c
 24759  002E64  0EA7               	movlw	low arp_send@arp
 24760  002E66  24F3               	addwf	prodl,w,c
 24761  002E68  6ED9               	movwf	fsr2l,c
 24762  002E6A  0E00               	movlw	high arp_send@arp
 24763  002E6C  20F4               	addwfc	prodh,w,c
 24764  002E6E  6EDA               	movwf	fsr2h,c
 24765  002E70  50DF               	movf	indf2,w,c
 24766  002E72  EC8E  F02F         	call	_ethernetController_streamToTransmitBuffer
 24767  002E76  0100               	movlb	0	; () banked
 24768  002E78  2BCE               	incf	arp_send@i_3300& (0+255),f,b
 24769  002E7A                     l973:
 24770                           
 24771                           ; BSR set to: 0
 24772                           
 24773                           ; BSR set to: 0
 24774  002E7A  51AC               	movf	(arp_send@arp+5)& (0+255),w,b
 24775  002E7C  5DCE               	subwf	arp_send@i_3300& (0+255),w,b
 24776  002E7E  A0D8               	btfss	status,0,c
 24777  002E80  D7E2               	goto	l974
 24778                           
 24779                           ; BSR set to: 0
 24780                           ;arp.c: 181: for (uint8_t i = 0; i < arp.hlen; i++)
 24781                           
 24782                           ; BSR set to: 0
 24783  002E82  0E00               	movlw	0
 24784  002E84  6FCF               	movwf	arp_send@i_3301& (0+255),b
 24785  002E86  D01A               	goto	l976
 24786  002E88                     
 24787                           ; BSR set to: 0
 24788                           ;arp.c: 182: ethernetController_streamToTransmitBuffer(arp.targetMACAddress.address[i], 
      +                          field);
 24789                           
 24790                           ; BSR set to: 0
 24791  002E88  EE20  F0F3         	lfsr	2,arp_send@field
 24792  002E8C  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 24793  002E90  0E08               	movlw	8
 24794  002E92                     u12601:
 24795  002E92  CFDB FFEB          	movff	plusw2,plusw0
 24796  002E96  06E8               	decf	wreg,f,c
 24797  002E98  E2FC               	bc	u12601
 24798  002E9A  51CF               	movf	arp_send@i_3301& (0+255),w,b
 24799  002E9C  0D01               	mullw	1
 24800  002E9E  0E12               	movlw	18
 24801  002EA0  26F3               	addwf	prodl,f,c
 24802  002EA2  0E00               	movlw	0
 24803  002EA4  22F4               	addwfc	prodh,f,c
 24804  002EA6  0EA7               	movlw	low arp_send@arp
 24805  002EA8  24F3               	addwf	prodl,w,c
 24806  002EAA  6ED9               	movwf	fsr2l,c
 24807  002EAC  0E00               	movlw	high arp_send@arp
 24808  002EAE  20F4               	addwfc	prodh,w,c
 24809  002EB0  6EDA               	movwf	fsr2h,c
 24810  002EB2  50DF               	movf	indf2,w,c
 24811  002EB4  EC8E  F02F         	call	_ethernetController_streamToTransmitBuffer
 24812  002EB8  0100               	movlb	0	; () banked
 24813  002EBA  2BCF               	incf	arp_send@i_3301& (0+255),f,b
 24814  002EBC                     l976:
 24815                           
 24816                           ; BSR set to: 0
 24817                           
 24818                           ; BSR set to: 0
 24819  002EBC  51AB               	movf	(arp_send@arp+4)& (0+255),w,b
 24820  002EBE  5DCF               	subwf	arp_send@i_3301& (0+255),w,b
 24821  002EC0  A0D8               	btfss	status,0,c
 24822  002EC2  D7E2               	goto	l977
 24823                           
 24824                           ; BSR set to: 0
 24825                           ;arp.c: 183: for (uint8_t i = 0; i < arp.plen; i++)
 24826                           
 24827                           ; BSR set to: 0
 24828  002EC4  0E00               	movlw	0
 24829  002EC6  6FD0               	movwf	arp_send@i_3302& (0+255),b
 24830  002EC8  D01A               	goto	l979
 24831  002ECA                     
 24832                           ; BSR set to: 0
 24833                           ;arp.c: 184: ethernetController_streamToTransmitBuffer(arp.targetIPAddress.address[i], f
      +                          ield);
 24834                           
 24835                           ; BSR set to: 0
 24836  002ECA  EE20  F0F3         	lfsr	2,arp_send@field
 24837  002ECE  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 24838  002ED2  0E08               	movlw	8
 24839  002ED4                     u12621:
 24840  002ED4  CFDB FFEB          	movff	plusw2,plusw0
 24841  002ED8  06E8               	decf	wreg,f,c
 24842  002EDA  E2FC               	bc	u12621
 24843  002EDC  51D0               	movf	arp_send@i_3302& (0+255),w,b
 24844  002EDE  0D01               	mullw	1
 24845  002EE0  0E18               	movlw	24
 24846  002EE2  26F3               	addwf	prodl,f,c
 24847  002EE4  0E00               	movlw	0
 24848  002EE6  22F4               	addwfc	prodh,f,c
 24849  002EE8  0EA7               	movlw	low arp_send@arp
 24850  002EEA  24F3               	addwf	prodl,w,c
 24851  002EEC  6ED9               	movwf	fsr2l,c
 24852  002EEE  0E00               	movlw	high arp_send@arp
 24853  002EF0  20F4               	addwfc	prodh,w,c
 24854  002EF2  6EDA               	movwf	fsr2h,c
 24855  002EF4  50DF               	movf	indf2,w,c
 24856  002EF6  EC8E  F02F         	call	_ethernetController_streamToTransmitBuffer
 24857  002EFA  0100               	movlb	0	; () banked
 24858  002EFC  2BD0               	incf	arp_send@i_3302& (0+255),f,b
 24859  002EFE                     l979:
 24860                           
 24861                           ; BSR set to: 0
 24862                           
 24863                           ; BSR set to: 0
 24864  002EFE  51AC               	movf	(arp_send@arp+5)& (0+255),w,b
 24865  002F00  5DD0               	subwf	arp_send@i_3302& (0+255),w,b
 24866  002F02  A0D8               	btfss	status,0,c
 24867  002F04  D7E2               	goto	l980
 24868                           
 24869                           ; BSR set to: 0
 24870                           ;arp.c: 186: ethernetController_sendPacket(ethFrame.memory);
 24871                           
 24872                           ; BSR set to: 0
 24873  002F06  EE20  F0E1         	lfsr	2,arp_send@ethFrame+16
 24874  002F0A  EE00  F072         	lfsr	0,ethernetController_sendPacket@field
 24875  002F0E  0E08               	movlw	8
 24876  002F10                     u12641:
 24877  002F10  CFDB FFEB          	movff	plusw2,plusw0
 24878  002F14  06E8               	decf	wreg,f,c
 24879  002F16  E2FC               	bc	u12641
 24880  002F18  ECFD  F035         	call	_ethernetController_sendPacket	;wreg free
 24881  002F1C  0012               	return		;funcret
 24882  002F1E                     __end_of_arp_send:
 24883                           	opt stack 0
 24884                           tblptru	equ	0xFF8
 24885                           tblptrh	equ	0xFF7
 24886                           tblptrl	equ	0xFF6
 24887                           tablat	equ	0xFF5
 24888                           prodh	equ	0xFF4
 24889                           prodl	equ	0xFF3
 24890                           intcon	equ	0xFF2
 24891                           intcon3	equ	0xFF0
 24892                           indf0	equ	0xFEF
 24893                           postinc0	equ	0xFEE
 24894                           plusw0	equ	0xFEB
 24895                           fsr0h	equ	0xFEA
 24896                           fsr0l	equ	0xFE9
 24897                           wreg	equ	0xFE8
 24898                           indf1	equ	0xFE7
 24899                           postinc1	equ	0xFE6
 24900                           postdec1	equ	0xFE5
 24901                           plusw1	equ	0xFE3
 24902                           fsr1h	equ	0xFE2
 24903                           fsr1l	equ	0xFE1
 24904                           indf2	equ	0xFDF
 24905                           postinc2	equ	0xFDE
 24906                           postdec2	equ	0xFDD
 24907                           plusw2	equ	0xFDB
 24908                           fsr2h	equ	0xFDA
 24909                           fsr2l	equ	0xFD9
 24910                           status	equ	0xFD8
 24911                           
 24912 ;; *************** function _mac_setToBroadcast *****************
 24913 ;; Defined at:
 24914 ;;		line 26 in file "src/eth/mac.c"
 24915 ;; Parameters:    Size  Location     Type
 24916 ;;  mac             2    0[BANK0 ] PTR struct macaddress
 24917 ;;		 -> arp_send@destination(6), 
 24918 ;; Auto vars:     Size  Location     Type
 24919 ;;  i               1    2[BANK0 ] unsigned char 
 24920 ;; Return value:  Size  Location     Type
 24921 ;;                  1    wreg      void 
 24922 ;; Registers used:
 24923 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 24924 ;; Tracked objects:
 24925 ;;		On entry : 0/0
 24926 ;;		On exit  : 0/0
 24927 ;;		Unchanged: 0/0
 24928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24929 ;;      Params:         0       2       0       0       0       0       0       0       0
 24930 ;;      Locals:         0       1       0       0       0       0       0       0       0
 24931 ;;      Temps:          0       0       0       0       0       0       0       0       0
 24932 ;;      Totals:         0       3       0       0       0       0       0       0       0
 24933 ;;Total ram usage:        3 bytes
 24934 ;; Hardware stack levels used:    1
 24935 ;; Hardware stack levels required when called:    4
 24936 ;; This function calls:
 24937 ;;		Nothing
 24938 ;; This function is called by:
 24939 ;;		_arp_send
 24940 ;; This function uses a non-reentrant model
 24941 ;;
 24942                           
 24943                           	psect	text99
 24944  006C6E                     __ptext99:
 24945                           	opt stack 0
 24946  006C6E                     _mac_setToBroadcast:
 24947                           	opt stack 22
 24948                           
 24949                           ;mac.c: 27: for (uint8_t i = 0; i < 6; i++)
 24950                           
 24951                           ;incstack = 0
 24952  006C6E  0E00               	movlw	0
 24953  006C70  0100               	movlb	0	; () banked
 24954  006C72  6F62               	movwf	mac_setToBroadcast@i& (0+255),b
 24955  006C74                     l10402:
 24956                           
 24957                           ; BSR set to: 0
 24958  006C74  0E05               	movlw	5
 24959  006C76  6562               	cpfsgt	mac_setToBroadcast@i& (0+255),b
 24960  006C78  D001               	goto	l376
 24961  006C7A  0012               	return	
 24962  006C7C                     l376:
 24963                           
 24964                           ; BSR set to: 0
 24965                           ;mac.c: 28: mac->address[i] = 0xff;
 24966                           
 24967                           ; BSR set to: 0
 24968  006C7C  5162               	movf	mac_setToBroadcast@i& (0+255),w,b
 24969  006C7E  0D01               	mullw	1
 24970  006C80  50F3               	movf	prodl,w,c
 24971  006C82  2560               	addwf	mac_setToBroadcast@mac& (0+255),w,b
 24972  006C84  6ED9               	movwf	fsr2l,c
 24973  006C86  50F4               	movf	prodh,w,c
 24974  006C88  2161               	addwfc	(mac_setToBroadcast@mac+1)& (0+255),w,b
 24975  006C8A  6EDA               	movwf	fsr2h,c
 24976  006C8C  0EFF               	movlw	255
 24977  006C8E  6EDF               	movwf	indf2,c
 24978                           
 24979                           ; BSR set to: 0
 24980  006C90  2B62               	incf	mac_setToBroadcast@i& (0+255),f,b
 24981  006C92  D7F0               	goto	l10402
 24982  006C94                     __end_of_mac_setToBroadcast:
 24983                           	opt stack 0
 24984                           tblptru	equ	0xFF8
 24985                           tblptrh	equ	0xFF7
 24986                           tblptrl	equ	0xFF6
 24987                           tablat	equ	0xFF5
 24988                           prodh	equ	0xFF4
 24989                           prodl	equ	0xFF3
 24990                           intcon	equ	0xFF2
 24991                           intcon3	equ	0xFF0
 24992                           indf0	equ	0xFEF
 24993                           postinc0	equ	0xFEE
 24994                           plusw0	equ	0xFEB
 24995                           fsr0h	equ	0xFEA
 24996                           fsr0l	equ	0xFE9
 24997                           wreg	equ	0xFE8
 24998                           indf1	equ	0xFE7
 24999                           postinc1	equ	0xFE6
 25000                           postdec1	equ	0xFE5
 25001                           plusw1	equ	0xFE3
 25002                           fsr1h	equ	0xFE2
 25003                           fsr1l	equ	0xFE1
 25004                           indf2	equ	0xFDF
 25005                           postinc2	equ	0xFDE
 25006                           postdec2	equ	0xFDD
 25007                           plusw2	equ	0xFDB
 25008                           fsr2h	equ	0xFDA
 25009                           fsr2l	equ	0xFD9
 25010                           status	equ	0xFD8
 25011                           
 25012 ;; *************** function _ethernet_txFrameRequest *****************
 25013 ;; Defined at:
 25014 ;;		line 30 in file "src/eth/ethernet.c"
 25015 ;; Parameters:    Size  Location     Type
 25016 ;;  frame           2   66[BANK0 ] PTR struct ethernetFrame
 25017 ;;		 -> udp_sendPacket@ipPacket(66), tcp_sendSYNACK@ipPacket(66), icmp_sendEchoRequest@ipRequest(66), icmp_sendEchoReply
      +@ipReply(66), 
 25018 ;;		 -> arp_send@ethFrame(34), 
 25019 ;; Auto vars:     Size  Location     Type
 25020 ;;  err             3   68[BANK0 ] struct error
 25021 ;; Return value:  Size  Location     Type
 25022 ;;                  3   66[BANK0 ] struct error
 25023 ;; Registers used:
 25024 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 25025 ;; Tracked objects:
 25026 ;;		On entry : 0/0
 25027 ;;		On exit  : 0/0
 25028 ;;		Unchanged: 0/0
 25029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 25030 ;;      Params:         0       2       0       0       0       0       0       0       0
 25031 ;;      Locals:         0       3       0       0       0       0       0       0       0
 25032 ;;      Temps:          0       0       0       0       0       0       0       0       0
 25033 ;;      Totals:         0       5       0       0       0       0       0       0       0
 25034 ;;Total ram usage:        5 bytes
 25035 ;; Hardware stack levels used:    1
 25036 ;; Hardware stack levels required when called:    8
 25037 ;; This function calls:
 25038 ;;		_ethernetController_writeDestinationMACAddress
 25039 ;;		_ethernetController_writeEtherTypeFieldToBuffer
 25040 ;;		_memory_txFrameRequest
 25041 ;; This function is called by:
 25042 ;;		_arp_send
 25043 ;;		_ipv4_txFrameRequest
 25044 ;; This function uses a non-reentrant model
 25045 ;;
 25046                           
 25047                           	psect	text100
 25048  005096                     __ptext100:
 25049                           	opt stack 0
 25050  005096                     _ethernet_txFrameRequest:
 25051                           	opt stack 20
 25052                           
 25053                           ;ethernet.c: 32: error_t err;
 25054                           ;ethernet.c: 33: err.module = ERROR_MODULE_ETHERNET;
 25055                           
 25056                           ; BSR set to: 0
 25057                           ;incstack = 0
 25058  005096  0E02               	movlw	2
 25059  005098  0100               	movlb	0	; () banked
 25060  00509A  6FA4               	movwf	ethernet_txFrameRequest@err& (0+255),b
 25061                           
 25062                           ;ethernet.c: 34: err.code = (uint16_t)0;
 25063  00509C  0E00               	movlw	0
 25064  00509E  6FA6               	movwf	(ethernet_txFrameRequest@err+2)& (0+255),b
 25065  0050A0  0E00               	movlw	0
 25066  0050A2  6FA5               	movwf	(ethernet_txFrameRequest@err+1)& (0+255),b
 25067                           
 25068                           ; BSR set to: 0
 25069                           ;ethernet.c: 35: frame->memory = memory_txFrameRequest(frame->length);
 25070  0050A4  C0A2  FFD9         	movff	ethernet_txFrameRequest@frame,fsr2l
 25071  0050A8  C0A3  FFDA         	movff	ethernet_txFrameRequest@frame+1,fsr2h
 25072  0050AC  CFDE F084          	movff	postinc2,memory_txFrameRequest@length
 25073  0050B0  CFDD F085          	movff	postdec2,memory_txFrameRequest@length+1
 25074  0050B4  EC85  F005         	call	_memory_txFrameRequest	;wreg free
 25075  0050B8  0100               	movlb	0	; () banked
 25076  0050BA  EE20 F010          	lfsr	2,16
 25077  0050BE  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 25078  0050C0  26D9               	addwf	fsr2l,f,c
 25079  0050C2  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 25080  0050C4  22DA               	addwfc	fsr2h,f,c
 25081  0050C6  0E08               	movlw	8
 25082  0050C8                     u11591:
 25083  0050C8  CFEB FFDB          	movff	plusw0,plusw2
 25084  0050CC  06E8               	decf	wreg,f,c
 25085  0050CE  E2FC               	bc	u11591
 25086                           
 25087                           ; BSR set to: 0
 25088                           ;ethernet.c: 37: if (frame->memory.fOutOfMemory) {
 25089  0050D0  EE20 F017          	lfsr	2,23
 25090  0050D4  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 25091  0050D6  26D9               	addwf	fsr2l,f,c
 25092  0050D8  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 25093  0050DA  22DA               	addwfc	fsr2h,f,c
 25094  0050DC  50DF               	movf	indf2,w,c
 25095  0050DE  B4D8               	btfsc	status,2,c
 25096  0050E0  D007               	goto	l356
 25097                           
 25098                           ; BSR set to: 0
 25099                           ;ethernet.c: 39: err.module = ERROR_MODULE_MEMORY;
 25100  0050E2  0E00               	movlw	0
 25101  0050E4  6FA4               	movwf	ethernet_txFrameRequest@err& (0+255),b
 25102                           
 25103                           ;ethernet.c: 40: err.code = ERROR_MEMORY_OUT_OF_MEMORY;
 25104  0050E6  0E00               	movlw	0
 25105  0050E8  6FA6               	movwf	(ethernet_txFrameRequest@err+2)& (0+255),b
 25106  0050EA  0E65               	movlw	101
 25107  0050EC  6FA5               	movwf	(ethernet_txFrameRequest@err+1)& (0+255),b
 25108                           
 25109                           ; BSR set to: 0
 25110                           ;ethernet.c: 41: return err;
 25111                           ;	Return value of _ethernet_txFrameRequest is never used
 25112  0050EE  0012               	return	
 25113  0050F0                     l356:
 25114                           
 25115                           ; BSR set to: 0
 25116                           ;ethernet.c: 42: }
 25117                           ;ethernet.c: 43: if (!frame->memory.fIsAssigned) {
 25118                           
 25119                           ; BSR set to: 0
 25120  0050F0  EE20 F016          	lfsr	2,22
 25121  0050F4  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 25122  0050F6  26D9               	addwf	fsr2l,f,c
 25123  0050F8  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 25124  0050FA  22DA               	addwfc	fsr2h,f,c
 25125  0050FC  50DF               	movf	indf2,w,c
 25126  0050FE  A4D8               	btfss	status,2,c
 25127  005100  D007               	goto	l358
 25128                           
 25129                           ; BSR set to: 0
 25130                           ;ethernet.c: 45: err.module = ERROR_MODULE_MEMORY;
 25131  005102  0E00               	movlw	0
 25132  005104  6FA4               	movwf	ethernet_txFrameRequest@err& (0+255),b
 25133                           
 25134                           ;ethernet.c: 46: err.code = ERROR_MEMORY_UNKNOWN;
 25135  005106  0E00               	movlw	0
 25136  005108  6FA6               	movwf	(ethernet_txFrameRequest@err+2)& (0+255),b
 25137  00510A  0EC7               	movlw	199
 25138  00510C  6FA5               	movwf	(ethernet_txFrameRequest@err+1)& (0+255),b
 25139                           
 25140                           ; BSR set to: 0
 25141                           ;ethernet.c: 47: return err;
 25142                           ;	Return value of _ethernet_txFrameRequest is never used
 25143  00510E  0012               	return	
 25144  005110                     l358:
 25145                           
 25146                           ; BSR set to: 0
 25147                           ;ethernet.c: 48: }
 25148                           ;ethernet.c: 50: ethernetController_writeDestinationMACAddress(frame->destination, frame
      +                          ->memory);
 25149                           
 25150                           ; BSR set to: 0
 25151  005110  EE20 F008          	lfsr	2,8
 25152  005114  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 25153  005116  26D9               	addwf	fsr2l,f,c
 25154  005118  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 25155  00511A  22DA               	addwfc	fsr2h,f,c
 25156  00511C  EE00  F06F         	lfsr	0,ethernetController_writeDestinationMACAddress@addr
 25157  005120  0E05               	movlw	5
 25158  005122                     u11621:
 25159  005122  CFDB FFEB          	movff	plusw2,plusw0
 25160  005126  06E8               	decf	wreg,f,c
 25161  005128  E2FC               	bc	u11621
 25162  00512A  EE20 F010          	lfsr	2,16
 25163  00512E  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 25164  005130  26D9               	addwf	fsr2l,f,c
 25165  005132  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 25166  005134  22DA               	addwfc	fsr2h,f,c
 25167  005136  EE00  F075         	lfsr	0,ethernetController_writeDestinationMACAddress@field
 25168  00513A  0E08               	movlw	8
 25169  00513C                     u11631:
 25170  00513C  CFDB FFEB          	movff	plusw2,plusw0
 25171  005140  06E8               	decf	wreg,f,c
 25172  005142  E2FC               	bc	u11631
 25173  005144  ECD2  F02E         	call	_ethernetController_writeDestinationMACAddress	;wreg free
 25174                           
 25175                           ;ethernet.c: 51: ethernetController_writeEtherTypeFieldToBuffer(frame->ethertype, frame-
      +                          >memory);
 25176  005148  0100               	movlb	0	; () banked
 25177  00514A  EE20 F00E          	lfsr	2,14
 25178  00514E  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 25179  005150  26D9               	addwf	fsr2l,f,c
 25180  005152  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 25181  005154  22DA               	addwfc	fsr2h,f,c
 25182  005156  CFDE F06F          	movff	postinc2,ethernetController_writeEtherTypeFieldToBuffer@ethtype
 25183  00515A  CFDD F070          	movff	postdec2,ethernetController_writeEtherTypeFieldToBuffer@ethtype+1
 25184  00515E  EE20 F010          	lfsr	2,16
 25185  005162  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 25186  005164  26D9               	addwf	fsr2l,f,c
 25187  005166  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 25188  005168  22DA               	addwfc	fsr2h,f,c
 25189  00516A  EE00  F071         	lfsr	0,ethernetController_writeEtherTypeFieldToBuffer@field
 25190  00516E  0E08               	movlw	8
 25191  005170                     u11641:
 25192  005170  CFDB FFEB          	movff	plusw2,plusw0
 25193  005174  06E8               	decf	wreg,f,c
 25194  005176  E2FC               	bc	u11641
 25195  005178  EC2D  F033         	call	_ethernetController_writeEtherTypeFieldToBuffer	;wreg free
 25196  00517C  0012               	return	
 25197  00517E                     __end_of_ethernet_txFrameRequest:
 25198                           	opt stack 0
 25199                           tblptru	equ	0xFF8
 25200                           tblptrh	equ	0xFF7
 25201                           tblptrl	equ	0xFF6
 25202                           tablat	equ	0xFF5
 25203                           prodh	equ	0xFF4
 25204                           prodl	equ	0xFF3
 25205                           intcon	equ	0xFF2
 25206                           intcon3	equ	0xFF0
 25207                           indf0	equ	0xFEF
 25208                           postinc0	equ	0xFEE
 25209                           plusw0	equ	0xFEB
 25210                           fsr0h	equ	0xFEA
 25211                           fsr0l	equ	0xFE9
 25212                           wreg	equ	0xFE8
 25213                           indf1	equ	0xFE7
 25214                           postinc1	equ	0xFE6
 25215                           postdec1	equ	0xFE5
 25216                           plusw1	equ	0xFE3
 25217                           fsr1h	equ	0xFE2
 25218                           fsr1l	equ	0xFE1
 25219                           indf2	equ	0xFDF
 25220                           postinc2	equ	0xFDE
 25221                           postdec2	equ	0xFDD
 25222                           plusw2	equ	0xFDB
 25223                           fsr2h	equ	0xFDA
 25224                           fsr2l	equ	0xFD9
 25225                           status	equ	0xFD8
 25226                           
 25227 ;; *************** function _memory_txFrameRequest *****************
 25228 ;; Defined at:
 25229 ;;		line 134 in file "src/mem/memoryController.c"
 25230 ;; Parameters:    Size  Location     Type
 25231 ;;  length          2   36[BANK0 ] unsigned int 
 25232 ;; Auto vars:     Size  Location     Type
 25233 ;;  i               1   54[BANK0 ] unsigned char 
 25234 ;;  i               1   55[BANK0 ] unsigned char 
 25235 ;;  fNoOverlapMa    1   53[BANK0 ] unsigned char 
 25236 ;;  field           9   56[BANK0 ] struct memoryField
 25237 ;;  freeIndex       1   65[BANK0 ] unsigned char 
 25238 ;; Return value:  Size  Location     Type
 25239 ;;                  9   36[BANK0 ] struct memoryField
 25240 ;; Registers used:
 25241 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 25242 ;; Tracked objects:
 25243 ;;		On entry : 0/0
 25244 ;;		On exit  : 0/0
 25245 ;;		Unchanged: 0/0
 25246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 25247 ;;      Params:         0       9       0       0       0       0       0       0       0
 25248 ;;      Locals:         0      15       0       0       0       0       0       0       0
 25249 ;;      Temps:          0       6       0       0       0       0       0       0       0
 25250 ;;      Totals:         0      30       0       0       0       0       0       0       0
 25251 ;;Total ram usage:       30 bytes
 25252 ;; Hardware stack levels used:    1
 25253 ;; Hardware stack levels required when called:    6
 25254 ;; This function calls:
 25255 ;;		___wmul
 25256 ;;		_checkForOverlap
 25257 ;;		_entireMemoryEmpty
 25258 ;;		_entireMemoryFull
 25259 ;; This function is called by:
 25260 ;;		_ethernet_txFrameRequest
 25261 ;; This function uses a non-reentrant model
 25262 ;;
 25263                           
 25264                           	psect	text101
 25265  000B0A                     __ptext101:
 25266                           	opt stack 0
 25267  000B0A                     _memory_txFrameRequest:
 25268                           	opt stack 21
 25269                           
 25270                           ;memoryController.c: 135: memoryField_t field;
 25271                           ;memoryController.c: 136: uint8_t freeIndex = 0;
 25272                           
 25273                           ;incstack = 0
 25274  000B0A  0E00               	movlw	0
 25275  000B0C  0100               	movlb	0	; () banked
 25276  000B0E  6FA1               	movwf	memory_txFrameRequest@freeIndex& (0+255),b
 25277                           
 25278                           ; BSR set to: 0
 25279                           ;memoryController.c: 138: if (length == 0) {
 25280  000B10  5184               	movf	memory_txFrameRequest@length& (0+255),w,b
 25281  000B12  1185               	iorwf	(memory_txFrameRequest@length+1)& (0+255),w,b
 25282  000B14  A4D8               	btfss	status,2,c
 25283  000B16  D00C               	goto	l448
 25284                           
 25285                           ; BSR set to: 0
 25286                           ;memoryController.c: 139: field.fOutOfMemory = 1;
 25287  000B18  0E01               	movlw	1
 25288  000B1A  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 25289                           
 25290                           ; BSR set to: 0
 25291                           ;memoryController.c: 140: return field;
 25292  000B1C  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 25293  000B20  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 25294  000B24  0E08               	movlw	8
 25295  000B26                     u11201:
 25296  000B26  CFDB FFEB          	movff	plusw2,plusw0
 25297  000B2A  06E8               	decf	wreg,f,c
 25298  000B2C  E2FC               	bc	u11201
 25299                           
 25300                           ; BSR set to: 0
 25301  000B2E  0012               	return	
 25302  000B30                     l448:
 25303                           
 25304                           ; BSR set to: 0
 25305                           ;memoryController.c: 141: }
 25306                           ;memoryController.c: 143: if (entireMemoryFull()) {
 25307                           
 25308                           ; BSR set to: 0
 25309  000B30  EC9F  F034         	call	_entireMemoryFull	;wreg free
 25310  000B34  A0D8               	btfss	status,0,c
 25311  000B36  D00D               	goto	l450
 25312                           
 25313                           ;memoryController.c: 144: field.fOutOfMemory = 1;
 25314  000B38  0E01               	movlw	1
 25315  000B3A  0100               	movlb	0	; () banked
 25316  000B3C  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 25317                           
 25318                           ; BSR set to: 0
 25319                           ;memoryController.c: 145: return field;
 25320  000B3E  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 25321  000B42  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 25322  000B46  0E08               	movlw	8
 25323  000B48                     u11221:
 25324  000B48  CFDB FFEB          	movff	plusw2,plusw0
 25325  000B4C  06E8               	decf	wreg,f,c
 25326  000B4E  E2FC               	bc	u11221
 25327                           
 25328                           ; BSR set to: 0
 25329  000B50  0012               	return	
 25330  000B52                     l450:
 25331                           
 25332                           ;memoryController.c: 146: }
 25333                           ;memoryController.c: 147: if (entireMemoryEmpty()) {
 25334                           
 25335                           ; BSR set to: 0
 25336  000B52  ECBB  F034         	call	_entireMemoryEmpty	;wreg free
 25337  000B56  A0D8               	btfss	status,0,c
 25338  000B58  D238               	goto	l475
 25339                           
 25340                           ;memoryController.c: 149: if ((0x0000 + length) > 0x3000 - 1) {
 25341  000B5A  0E30               	movlw	48
 25342  000B5C  0100               	movlb	0	; () banked
 25343  000B5E  5D85               	subwf	(memory_txFrameRequest@length+1)& (0+255),w,b
 25344  000B60  A0D8               	btfss	status,0,c
 25345  000B62  D00C               	goto	l452
 25346                           
 25347                           ; BSR set to: 0
 25348                           ;memoryController.c: 150: field.fOutOfMemory = 1;
 25349  000B64  0E01               	movlw	1
 25350  000B66  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 25351                           
 25352                           ; BSR set to: 0
 25353                           ;memoryController.c: 151: return field;
 25354  000B68  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 25355  000B6C  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 25356  000B70  0E08               	movlw	8
 25357  000B72                     u11251:
 25358  000B72  CFDB FFEB          	movff	plusw2,plusw0
 25359  000B76  06E8               	decf	wreg,f,c
 25360  000B78  E2FC               	bc	u11251
 25361                           
 25362                           ; BSR set to: 0
 25363  000B7A  0012               	return	
 25364  000B7C                     l452:
 25365                           
 25366                           ; BSR set to: 0
 25367                           ;memoryController.c: 153: occupiedMemory[0].start = 0x0000;
 25368                           
 25369                           ; BSR set to: 0
 25370  000B7C  0E00               	movlw	0
 25371  000B7E  0103               	movlb	3	; () banked
 25372  000B80  6F01               	movwf	(_occupiedMemory+1)& (0+255),b
 25373  000B82  0E00               	movlw	0
 25374  000B84  6F00               	movwf	_occupiedMemory& (0+255),b
 25375                           
 25376                           ; BSR set to: 3
 25377                           ;memoryController.c: 154: occupiedMemory[0].end = 0x0000 + length;
 25378  000B86  C084  F302         	movff	memory_txFrameRequest@length,_occupiedMemory+2
 25379  000B8A  C085  F303         	movff	memory_txFrameRequest@length+1,_occupiedMemory+3
 25380                           
 25381                           ; BSR set to: 3
 25382                           ;memoryController.c: 155: occupiedMemory[0].length = length;
 25383  000B8E  C084  F304         	movff	memory_txFrameRequest@length,_occupiedMemory+4
 25384  000B92  C085  F305         	movff	memory_txFrameRequest@length+1,_occupiedMemory+5
 25385                           
 25386                           ;memoryController.c: 156: occupiedMemory[0].fIsAssigned = 1;
 25387  000B96  0E01               	movlw	1
 25388  000B98  6F06               	movwf	(_occupiedMemory+6)& (0+255),b
 25389                           
 25390                           ;memoryController.c: 157: occupiedMemory[0].index = 0;
 25391  000B9A  0E00               	movlw	0
 25392  000B9C  6F08               	movwf	(_occupiedMemory+8)& (0+255),b
 25393                           
 25394                           ; BSR set to: 3
 25395                           ;memoryController.c: 158: return occupiedMemory[0];
 25396  000B9E  EE23  F000         	lfsr	2,_occupiedMemory
 25397  000BA2  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 25398  000BA6  0E08               	movlw	8
 25399  000BA8                     u11261:
 25400  000BA8  CFDB FFEB          	movff	plusw2,plusw0
 25401  000BAC  06E8               	decf	wreg,f,c
 25402  000BAE  E2FC               	bc	u11261
 25403                           
 25404                           ; BSR set to: 3
 25405  000BB0  0012               	return	
 25406  000BB2                     
 25407                           ;memoryController.c: 164: if (!occupiedMemory[freeIndex].fIsAssigned) {
 25408                           
 25409                           ; BSR set to: 3
 25410  000BB2  0100               	movlb	0	; () banked
 25411  000BB4  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 25412  000BB6  0D09               	mullw	9
 25413  000BB8  0E06               	movlw	6
 25414  000BBA  26F3               	addwf	prodl,f,c
 25415  000BBC  0E00               	movlw	0
 25416  000BBE  22F4               	addwfc	prodh,f,c
 25417  000BC0  0E00               	movlw	low _occupiedMemory
 25418  000BC2  24F3               	addwf	prodl,w,c
 25419  000BC4  6ED9               	movwf	fsr2l,c
 25420  000BC6  0E03               	movlw	high _occupiedMemory
 25421  000BC8  20F4               	addwfc	prodh,w,c
 25422  000BCA  6EDA               	movwf	fsr2h,c
 25423  000BCC  50DF               	movf	indf2,w,c
 25424  000BCE  A4D8               	btfss	status,2,c
 25425  000BD0  D1EB               	goto	l474
 25426                           
 25427                           ; BSR set to: 0
 25428                           ;memoryController.c: 168: occupiedMemory[freeIndex].start = (unsigned)occupiedMemory[(fr
      +                          eeIndex == 0) ? 8 - 1 : freeIndex - 1].end + 1;
 25429  000BD2  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 25430  000BD4  B4D8               	btfsc	status,2,c
 25431  000BD6  D007               	goto	l458
 25432                           
 25433                           ; BSR set to: 0
 25434  000BD8  0EFF               	movlw	255
 25435  000BDA  25A1               	addwf	memory_txFrameRequest@freeIndex& (0+255),w,b
 25436  000BDC  6F93               	movwf	_memory_txFrameRequest$1173& (0+255),b
 25437  000BDE  6B94               	clrf	(_memory_txFrameRequest$1173+1)& (0+255),b
 25438  000BE0  0EFF               	movlw	255
 25439  000BE2  2394               	addwfc	(_memory_txFrameRequest$1173+1)& (0+255),f,b
 25440  000BE4  D004               	goto	l460
 25441  000BE6                     l458:
 25442                           
 25443                           ; BSR set to: 0
 25444                           
 25445                           ; BSR set to: 0
 25446  000BE6  0E00               	movlw	0
 25447  000BE8  6F94               	movwf	(_memory_txFrameRequest$1173+1)& (0+255),b
 25448  000BEA  0E07               	movlw	7
 25449  000BEC  6F93               	movwf	_memory_txFrameRequest$1173& (0+255),b
 25450  000BEE                     l460:
 25451                           
 25452                           ; BSR set to: 0
 25453                           
 25454                           ; BSR set to: 0
 25455  000BEE  C093  F06E         	movff	_memory_txFrameRequest$1173,___wmul@multiplier
 25456  000BF2  C094  F06F         	movff	_memory_txFrameRequest$1173+1,___wmul@multiplier+1
 25457  000BF6  0E00               	movlw	0
 25458  000BF8  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
 25459  000BFA  0E09               	movlw	9
 25460  000BFC  6F70               	movwf	___wmul@multiplicand& (0+255),b
 25461  000BFE  ECE9  F035         	call	___wmul	;wreg free
 25462  000C02  0E02               	movlw	2
 25463  000C04  0100               	movlb	0	; () banked
 25464  000C06  276E               	addwf	?___wmul& (0+255),f,b
 25465  000C08  0E00               	movlw	0
 25466  000C0A  236F               	addwfc	(?___wmul+1)& (0+255),f,b
 25467  000C0C  0E00               	movlw	low _occupiedMemory
 25468  000C0E  256E               	addwf	?___wmul& (0+255),w,b
 25469  000C10  6ED9               	movwf	fsr2l,c
 25470  000C12  0E03               	movlw	high _occupiedMemory
 25471  000C14  216F               	addwfc	(?___wmul+1)& (0+255),w,b
 25472  000C16  6EDA               	movwf	fsr2h,c
 25473  000C18  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 25474  000C1C  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 25475  000C20  0E01               	movlw	1
 25476  000C22  278D               	addwf	??_memory_txFrameRequest& (0+255),f,b
 25477  000C24  0E00               	movlw	0
 25478  000C26  238E               	addwfc	(??_memory_txFrameRequest+1)& (0+255),f,b
 25479  000C28  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 25480  000C2A  0D09               	mullw	9
 25481  000C2C  0E00               	movlw	low _occupiedMemory
 25482  000C2E  24F3               	addwf	prodl,w,c
 25483  000C30  6ED9               	movwf	fsr2l,c
 25484  000C32  0E03               	movlw	high _occupiedMemory
 25485  000C34  20F4               	addwfc	prodh,w,c
 25486  000C36  6EDA               	movwf	fsr2h,c
 25487  000C38  C08D  FFDE         	movff	??_memory_txFrameRequest,postinc2
 25488  000C3C  C08E  FFDD         	movff	??_memory_txFrameRequest+1,postdec2
 25489                           
 25490                           ; BSR set to: 0
 25491                           ;memoryController.c: 169: if (occupiedMemory[freeIndex].start + length > 0x3000) {
 25492  000C40  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 25493  000C42  0D09               	mullw	9
 25494  000C44  0E00               	movlw	low _occupiedMemory
 25495  000C46  24F3               	addwf	prodl,w,c
 25496  000C48  6ED9               	movwf	fsr2l,c
 25497  000C4A  0E03               	movlw	high _occupiedMemory
 25498  000C4C  20F4               	addwfc	prodh,w,c
 25499  000C4E  6EDA               	movwf	fsr2h,c
 25500  000C50  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 25501  000C54  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 25502  000C58  5184               	movf	memory_txFrameRequest@length& (0+255),w,b
 25503  000C5A  278D               	addwf	??_memory_txFrameRequest& (0+255),f,b
 25504  000C5C  5185               	movf	(memory_txFrameRequest@length+1)& (0+255),w,b
 25505  000C5E  238E               	addwfc	(??_memory_txFrameRequest+1)& (0+255),f,b
 25506  000C60  058D               	decf	??_memory_txFrameRequest& (0+255),w,b
 25507  000C62  0E30               	movlw	48
 25508  000C64  598E               	subwfb	(??_memory_txFrameRequest+1)& (0+255),w,b
 25509  000C66  A0D8               	btfss	status,0,c
 25510  000C68  D0CF               	goto	l462
 25511                           
 25512                           ; BSR set to: 0
 25513                           ;memoryController.c: 170: if (freeIndex == 8 - 1 && !occupiedMemory[0].fIsAssigned) {
 25514  000C6A  0E07               	movlw	7
 25515  000C6C  19A1               	xorwf	memory_txFrameRequest@freeIndex& (0+255),w,b
 25516  000C6E  A4D8               	btfss	status,2,c
 25517  000C70  D0CB               	goto	l462
 25518                           
 25519                           ; BSR set to: 0
 25520  000C72  0103               	movlb	3	; () banked
 25521  000C74  5106               	movf	(_occupiedMemory+6)& (0+255),w,b
 25522  000C76  A4D8               	btfss	status,2,c
 25523  000C78  D0C7               	goto	l462
 25524                           
 25525                           ; BSR set to: 3
 25526                           ;memoryController.c: 171: occupiedMemory[freeIndex].length = length;
 25527  000C7A  0100               	movlb	0	; () banked
 25528  000C7C  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 25529  000C7E  0D09               	mullw	9
 25530  000C80  0E04               	movlw	4
 25531  000C82  26F3               	addwf	prodl,f,c
 25532  000C84  0E00               	movlw	0
 25533  000C86  22F4               	addwfc	prodh,f,c
 25534  000C88  0E00               	movlw	low _occupiedMemory
 25535  000C8A  24F3               	addwf	prodl,w,c
 25536  000C8C  6ED9               	movwf	fsr2l,c
 25537  000C8E  0E03               	movlw	high _occupiedMemory
 25538  000C90  20F4               	addwfc	prodh,w,c
 25539  000C92  6EDA               	movwf	fsr2h,c
 25540  000C94  C084  FFDE         	movff	memory_txFrameRequest@length,postinc2
 25541  000C98  C085  FFDD         	movff	memory_txFrameRequest@length+1,postdec2
 25542                           
 25543                           ;memoryController.c: 172: occupiedMemory[freeIndex].end = occupiedMemory[freeIndex].leng
      +                          th - ((0x3000 - 1) - occupiedMemory[freeIndex].start);
 25544  000C9C  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 25545  000C9E  0D09               	mullw	9
 25546  000CA0  0E04               	movlw	4
 25547  000CA2  26F3               	addwf	prodl,f,c
 25548  000CA4  0E00               	movlw	0
 25549  000CA6  22F4               	addwfc	prodh,f,c
 25550  000CA8  0E00               	movlw	low _occupiedMemory
 25551  000CAA  24F3               	addwf	prodl,w,c
 25552  000CAC  6ED9               	movwf	fsr2l,c
 25553  000CAE  0E03               	movlw	high _occupiedMemory
 25554  000CB0  20F4               	addwfc	prodh,w,c
 25555  000CB2  6EDA               	movwf	fsr2h,c
 25556  000CB4  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 25557  000CB8  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 25558  000CBC  0EFF               	movlw	255
 25559  000CBE  6F8F               	movwf	(??_memory_txFrameRequest+2)& (0+255),b
 25560  000CC0  0E2F               	movlw	47
 25561  000CC2  6F90               	movwf	(??_memory_txFrameRequest+3)& (0+255),b
 25562  000CC4  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 25563  000CC6  0D09               	mullw	9
 25564  000CC8  0E00               	movlw	low _occupiedMemory
 25565  000CCA  24F3               	addwf	prodl,w,c
 25566  000CCC  6ED9               	movwf	fsr2l,c
 25567  000CCE  0E03               	movlw	high _occupiedMemory
 25568  000CD0  20F4               	addwfc	prodh,w,c
 25569  000CD2  6EDA               	movwf	fsr2h,c
 25570  000CD4  CFDE F091          	movff	postinc2,??_memory_txFrameRequest+4
 25571  000CD8  CFDD F092          	movff	postdec2,??_memory_txFrameRequest+5
 25572  000CDC  1F91               	comf	(??_memory_txFrameRequest+4)& (0+255),f,b
 25573  000CDE  1F92               	comf	(??_memory_txFrameRequest+5)& (0+255),f,b
 25574  000CE0  4B91               	infsnz	(??_memory_txFrameRequest+4)& (0+255),f,b
 25575  000CE2  2B92               	incf	(??_memory_txFrameRequest+5)& (0+255),f,b
 25576  000CE4  518F               	movf	(??_memory_txFrameRequest+2)& (0+255),w,b
 25577  000CE6  2791               	addwf	(??_memory_txFrameRequest+4)& (0+255),f,b
 25578  000CE8  5190               	movf	(??_memory_txFrameRequest+3)& (0+255),w,b
 25579  000CEA  2392               	addwfc	(??_memory_txFrameRequest+5)& (0+255),f,b
 25580  000CEC  1F91               	comf	(??_memory_txFrameRequest+4)& (0+255),f,b
 25581  000CEE  1F92               	comf	(??_memory_txFrameRequest+5)& (0+255),f,b
 25582  000CF0  4B91               	infsnz	(??_memory_txFrameRequest+4)& (0+255),f,b
 25583  000CF2  2B92               	incf	(??_memory_txFrameRequest+5)& (0+255),f,b
 25584  000CF4  518D               	movf	??_memory_txFrameRequest& (0+255),w,b
 25585  000CF6  2791               	addwf	(??_memory_txFrameRequest+4)& (0+255),f,b
 25586  000CF8  518E               	movf	(??_memory_txFrameRequest+1)& (0+255),w,b
 25587  000CFA  2392               	addwfc	(??_memory_txFrameRequest+5)& (0+255),f,b
 25588  000CFC  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 25589  000CFE  0D09               	mullw	9
 25590  000D00  0E02               	movlw	2
 25591  000D02  26F3               	addwf	prodl,f,c
 25592  000D04  0E00               	movlw	0
 25593  000D06  22F4               	addwfc	prodh,f,c
 25594  000D08  0E00               	movlw	low _occupiedMemory
 25595  000D0A  24F3               	addwf	prodl,w,c
 25596  000D0C  6ED9               	movwf	fsr2l,c
 25597  000D0E  0E03               	movlw	high _occupiedMemory
 25598  000D10  20F4               	addwfc	prodh,w,c
 25599  000D12  6EDA               	movwf	fsr2h,c
 25600  000D14  C091  FFDE         	movff	??_memory_txFrameRequest+4,postinc2
 25601  000D18  C092  FFDD         	movff	??_memory_txFrameRequest+5,postdec2
 25602                           
 25603                           ; BSR set to: 0
 25604                           ;memoryController.c: 173: for (uint8_t i = 0; i < 8; i++) {
 25605  000D1C  0E00               	movlw	0
 25606  000D1E  6F96               	movwf	memory_txFrameRequest@i& (0+255),b
 25607  000D20                     l9916:
 25608                           
 25609                           ; BSR set to: 0
 25610  000D20  0E07               	movlw	7
 25611  000D22  6596               	cpfsgt	memory_txFrameRequest@i& (0+255),b
 25612  000D24  D001               	goto	l463
 25613  000D26  D044               	goto	u11390
 25614  000D28                     l463:
 25615                           
 25616                           ; BSR set to: 0
 25617                           ;memoryController.c: 174: if (i == freeIndex)
 25618                           
 25619                           ; BSR set to: 0
 25620  000D28  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 25621  000D2A  1996               	xorwf	memory_txFrameRequest@i& (0+255),w,b
 25622  000D2C  B4D8               	btfsc	status,2,c
 25623  000D2E  D03E               	goto	l467
 25624                           
 25625                           ; BSR set to: 0
 25626                           ;memoryController.c: 176: if (checkForOverlap(occupiedMemory[freeIndex], occupiedMemory[
      +                          i]) && occupiedMemory[i].fIsAssigned) {
 25627                           
 25628                           ; BSR set to: 0
 25629                           
 25630                           ; BSR set to: 0
 25631                           ;memoryController.c: 175: continue;
 25632  000D30  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 25633  000D32  0D09               	mullw	9
 25634  000D34  0E00               	movlw	low _occupiedMemory
 25635  000D36  24F3               	addwf	prodl,w,c
 25636  000D38  6ED9               	movwf	fsr2l,c
 25637  000D3A  0E03               	movlw	high _occupiedMemory
 25638  000D3C  20F4               	addwfc	prodh,w,c
 25639  000D3E  6EDA               	movwf	fsr2h,c
 25640  000D40  EE00  F072         	lfsr	0,checkForOverlap@a
 25641  000D44  0E08               	movlw	8
 25642  000D46                     u11341:
 25643  000D46  CFDB FFEB          	movff	plusw2,plusw0
 25644  000D4A  06E8               	decf	wreg,f,c
 25645  000D4C  E2FC               	bc	u11341
 25646  000D4E  5196               	movf	memory_txFrameRequest@i& (0+255),w,b
 25647  000D50  0D09               	mullw	9
 25648  000D52  0E00               	movlw	low _occupiedMemory
 25649  000D54  24F3               	addwf	prodl,w,c
 25650  000D56  6ED9               	movwf	fsr2l,c
 25651  000D58  0E03               	movlw	high _occupiedMemory
 25652  000D5A  20F4               	addwfc	prodh,w,c
 25653  000D5C  6EDA               	movwf	fsr2h,c
 25654  000D5E  EE00  F07B         	lfsr	0,checkForOverlap@b
 25655  000D62  0E08               	movlw	8
 25656  000D64                     u11351:
 25657  000D64  CFDB FFEB          	movff	plusw2,plusw0
 25658  000D68  06E8               	decf	wreg,f,c
 25659  000D6A  E2FC               	bc	u11351
 25660  000D6C  EC9D  F024         	call	_checkForOverlap	;wreg free
 25661  000D70  0100               	movlb	0	; () banked
 25662  000D72  A0D8               	btfss	status,0,c
 25663  000D74  D01B               	goto	l467
 25664                           
 25665                           ; BSR set to: 0
 25666  000D76  5196               	movf	memory_txFrameRequest@i& (0+255),w,b
 25667  000D78  0D09               	mullw	9
 25668  000D7A  0E06               	movlw	6
 25669  000D7C  26F3               	addwf	prodl,f,c
 25670  000D7E  0E00               	movlw	0
 25671  000D80  22F4               	addwfc	prodh,f,c
 25672  000D82  0E00               	movlw	low _occupiedMemory
 25673  000D84  24F3               	addwf	prodl,w,c
 25674  000D86  6ED9               	movwf	fsr2l,c
 25675  000D88  0E03               	movlw	high _occupiedMemory
 25676  000D8A  20F4               	addwfc	prodh,w,c
 25677  000D8C  6EDA               	movwf	fsr2h,c
 25678  000D8E  50DF               	movf	indf2,w,c
 25679  000D90  B4D8               	btfsc	status,2,c
 25680  000D92  D00C               	goto	l467
 25681                           
 25682                           ; BSR set to: 0
 25683                           ;memoryController.c: 178: field.fOutOfMemory = 1;
 25684  000D94  0E01               	movlw	1
 25685  000D96  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 25686                           
 25687                           ; BSR set to: 0
 25688                           ;memoryController.c: 179: return field;
 25689  000D98  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 25690  000D9C  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 25691  000DA0  0E08               	movlw	8
 25692  000DA2                     u11381:
 25693  000DA2  CFDB FFEB          	movff	plusw2,plusw0
 25694  000DA6  06E8               	decf	wreg,f,c
 25695  000DA8  E2FC               	bc	u11381
 25696                           
 25697                           ; BSR set to: 0
 25698  000DAA  0012               	return	
 25699  000DAC                     l467:
 25700                           
 25701                           ; BSR set to: 0
 25702                           
 25703                           ; BSR set to: 0
 25704                           
 25705                           ; BSR set to: 0
 25706  000DAC  2B96               	incf	memory_txFrameRequest@i& (0+255),f,b
 25707  000DAE  D7B8               	goto	l9916
 25708  000DB0                     u11390:
 25709                           
 25710                           ; BSR set to: 0
 25711                           ;memoryController.c: 180: }
 25712                           ;memoryController.c: 181: }
 25713                           ;memoryController.c: 182: occupiedMemory[freeIndex].fIsAssigned = 1;
 25714                           
 25715                           ; BSR set to: 0
 25716  000DB0  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 25717  000DB2  0D09               	mullw	9
 25718  000DB4  0E06               	movlw	6
 25719  000DB6  26F3               	addwf	prodl,f,c
 25720  000DB8  0E00               	movlw	0
 25721  000DBA  22F4               	addwfc	prodh,f,c
 25722  000DBC  0E00               	movlw	low _occupiedMemory
 25723  000DBE  24F3               	addwf	prodl,w,c
 25724  000DC0  6ED9               	movwf	fsr2l,c
 25725  000DC2  0E03               	movlw	high _occupiedMemory
 25726  000DC4  20F4               	addwfc	prodh,w,c
 25727  000DC6  6EDA               	movwf	fsr2h,c
 25728  000DC8  0E01               	movlw	1
 25729  000DCA  6EDF               	movwf	indf2,c
 25730                           
 25731                           ;memoryController.c: 183: occupiedMemory[freeIndex].index = freeIndex;
 25732  000DCC  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 25733  000DCE  0D09               	mullw	9
 25734  000DD0  0E08               	movlw	8
 25735  000DD2  26F3               	addwf	prodl,f,c
 25736  000DD4  0E00               	movlw	0
 25737  000DD6  22F4               	addwfc	prodh,f,c
 25738  000DD8  0E00               	movlw	low _occupiedMemory
 25739  000DDA  24F3               	addwf	prodl,w,c
 25740  000DDC  6ED9               	movwf	fsr2l,c
 25741  000DDE  0E03               	movlw	high _occupiedMemory
 25742  000DE0  20F4               	addwfc	prodh,w,c
 25743  000DE2  6EDA               	movwf	fsr2h,c
 25744  000DE4  C0A1  FFDF         	movff	memory_txFrameRequest@freeIndex,indf2
 25745                           
 25746                           ; BSR set to: 0
 25747                           ;memoryController.c: 184: return occupiedMemory[freeIndex];
 25748  000DE8  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 25749  000DEA  0D09               	mullw	9
 25750  000DEC  0E00               	movlw	low _occupiedMemory
 25751  000DEE  24F3               	addwf	prodl,w,c
 25752  000DF0  6ED9               	movwf	fsr2l,c
 25753  000DF2  0E03               	movlw	high _occupiedMemory
 25754  000DF4  20F4               	addwfc	prodh,w,c
 25755  000DF6  6EDA               	movwf	fsr2h,c
 25756  000DF8  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 25757  000DFC  0E08               	movlw	8
 25758  000DFE                     u11401:
 25759  000DFE  CFDB FFEB          	movff	plusw2,plusw0
 25760  000E02  06E8               	decf	wreg,f,c
 25761  000E04  E2FC               	bc	u11401
 25762                           
 25763                           ; BSR set to: 0
 25764  000E06  0012               	return	
 25765  000E08                     l462:
 25766                           
 25767                           ;memoryController.c: 185: }
 25768                           ;memoryController.c: 186: }
 25769                           ;memoryController.c: 188: uint8_t fNoOverlapMarker = 1;
 25770                           
 25771                           ; BSR set to: 0
 25772                           
 25773                           ; BSR set to: 0
 25774  000E08  0E01               	movlw	1
 25775  000E0A  0100               	movlb	0	; () banked
 25776  000E0C  6F95               	movwf	memory_txFrameRequest@fNoOverlapMarker& (0+255),b
 25777                           
 25778                           ; BSR set to: 0
 25779                           ;memoryController.c: 189: uint8_t i;
 25780                           ;memoryController.c: 190: occupiedMemory[freeIndex].end = occupiedMemory[freeIndex].star
      +                          t + length;
 25781  000E0E  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 25782  000E10  0D09               	mullw	9
 25783  000E12  0E00               	movlw	low _occupiedMemory
 25784  000E14  24F3               	addwf	prodl,w,c
 25785  000E16  6ED9               	movwf	fsr2l,c
 25786  000E18  0E03               	movlw	high _occupiedMemory
 25787  000E1A  20F4               	addwfc	prodh,w,c
 25788  000E1C  6EDA               	movwf	fsr2h,c
 25789  000E1E  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 25790  000E22  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 25791  000E26  5184               	movf	memory_txFrameRequest@length& (0+255),w,b
 25792  000E28  278D               	addwf	??_memory_txFrameRequest& (0+255),f,b
 25793  000E2A  5185               	movf	(memory_txFrameRequest@length+1)& (0+255),w,b
 25794  000E2C  238E               	addwfc	(??_memory_txFrameRequest+1)& (0+255),f,b
 25795  000E2E  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 25796  000E30  0D09               	mullw	9
 25797  000E32  0E02               	movlw	2
 25798  000E34  26F3               	addwf	prodl,f,c
 25799  000E36  0E00               	movlw	0
 25800  000E38  22F4               	addwfc	prodh,f,c
 25801  000E3A  0E00               	movlw	low _occupiedMemory
 25802  000E3C  24F3               	addwf	prodl,w,c
 25803  000E3E  6ED9               	movwf	fsr2l,c
 25804  000E40  0E03               	movlw	high _occupiedMemory
 25805  000E42  20F4               	addwfc	prodh,w,c
 25806  000E44  6EDA               	movwf	fsr2h,c
 25807  000E46  C08D  FFDE         	movff	??_memory_txFrameRequest,postinc2
 25808  000E4A  C08E  FFDD         	movff	??_memory_txFrameRequest+1,postdec2
 25809                           
 25810                           ; BSR set to: 0
 25811                           ;memoryController.c: 191: for (i = 0; i < 8; i++) {
 25812  000E4E  0E00               	movlw	0
 25813  000E50  6F97               	movwf	memory_txFrameRequest@i_1177& (0+255),b
 25814  000E52                     l9950:
 25815                           
 25816                           ; BSR set to: 0
 25817  000E52  0E07               	movlw	7
 25818  000E54  6597               	cpfsgt	memory_txFrameRequest@i_1177& (0+255),b
 25819  000E56  D001               	goto	l468
 25820  000E58  D03A               	goto	u11470
 25821  000E5A                     l468:
 25822                           
 25823                           ; BSR set to: 0
 25824                           ;memoryController.c: 192: if (i == freeIndex)
 25825                           
 25826                           ; BSR set to: 0
 25827  000E5A  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 25828  000E5C  1997               	xorwf	memory_txFrameRequest@i_1177& (0+255),w,b
 25829  000E5E  B4D8               	btfsc	status,2,c
 25830  000E60  D034               	goto	l473
 25831                           
 25832                           ; BSR set to: 0
 25833                           ;memoryController.c: 194: if (!occupiedMemory[i].fIsAssigned) {
 25834                           
 25835                           ; BSR set to: 0
 25836                           
 25837                           ; BSR set to: 0
 25838                           ;memoryController.c: 193: continue;
 25839  000E62  5197               	movf	memory_txFrameRequest@i_1177& (0+255),w,b
 25840  000E64  0D09               	mullw	9
 25841  000E66  0E06               	movlw	6
 25842  000E68  26F3               	addwf	prodl,f,c
 25843  000E6A  0E00               	movlw	0
 25844  000E6C  22F4               	addwfc	prodh,f,c
 25845  000E6E  0E00               	movlw	low _occupiedMemory
 25846  000E70  24F3               	addwf	prodl,w,c
 25847  000E72  6ED9               	movwf	fsr2l,c
 25848  000E74  0E03               	movlw	high _occupiedMemory
 25849  000E76  20F4               	addwfc	prodh,w,c
 25850  000E78  6EDA               	movwf	fsr2h,c
 25851  000E7A  50DF               	movf	indf2,w,c
 25852  000E7C  B4D8               	btfsc	status,2,c
 25853  000E7E  D025               	goto	l473
 25854                           
 25855                           ; BSR set to: 0
 25856                           ;memoryController.c: 197: }
 25857                           ;memoryController.c: 199: if (checkForOverlap(occupiedMemory[freeIndex], occupiedMemory[
      +                          i]))
 25858                           
 25859                           ; BSR set to: 0
 25860                           
 25861                           ; BSR set to: 0
 25862                           ;memoryController.c: 195: continue;
 25863  000E80  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 25864  000E82  0D09               	mullw	9
 25865  000E84  0E00               	movlw	low _occupiedMemory
 25866  000E86  24F3               	addwf	prodl,w,c
 25867  000E88  6ED9               	movwf	fsr2l,c
 25868  000E8A  0E03               	movlw	high _occupiedMemory
 25869  000E8C  20F4               	addwfc	prodh,w,c
 25870  000E8E  6EDA               	movwf	fsr2h,c
 25871  000E90  EE00  F072         	lfsr	0,checkForOverlap@a
 25872  000E94  0E08               	movlw	8
 25873  000E96                     u11441:
 25874  000E96  CFDB FFEB          	movff	plusw2,plusw0
 25875  000E9A  06E8               	decf	wreg,f,c
 25876  000E9C  E2FC               	bc	u11441
 25877  000E9E  5197               	movf	memory_txFrameRequest@i_1177& (0+255),w,b
 25878  000EA0  0D09               	mullw	9
 25879  000EA2  0E00               	movlw	low _occupiedMemory
 25880  000EA4  24F3               	addwf	prodl,w,c
 25881  000EA6  6ED9               	movwf	fsr2l,c
 25882  000EA8  0E03               	movlw	high _occupiedMemory
 25883  000EAA  20F4               	addwfc	prodh,w,c
 25884  000EAC  6EDA               	movwf	fsr2h,c
 25885  000EAE  EE00  F07B         	lfsr	0,checkForOverlap@b
 25886  000EB2  0E08               	movlw	8
 25887  000EB4                     u11451:
 25888  000EB4  CFDB FFEB          	movff	plusw2,plusw0
 25889  000EB8  06E8               	decf	wreg,f,c
 25890  000EBA  E2FC               	bc	u11451
 25891  000EBC  EC9D  F024         	call	_checkForOverlap	;wreg free
 25892  000EC0  0100               	movlb	0	; () banked
 25893  000EC2  A0D8               	btfss	status,0,c
 25894  000EC4  D002               	goto	l473
 25895                           
 25896                           ; BSR set to: 0
 25897                           ;memoryController.c: 200: fNoOverlapMarker = 0;
 25898  000EC6  0E00               	movlw	0
 25899  000EC8  6F95               	movwf	memory_txFrameRequest@fNoOverlapMarker& (0+255),b
 25900  000ECA                     l473:
 25901                           
 25902                           ; BSR set to: 0
 25903                           
 25904                           ; BSR set to: 0
 25905                           
 25906                           ; BSR set to: 0
 25907  000ECA  2B97               	incf	memory_txFrameRequest@i_1177& (0+255),f,b
 25908  000ECC  D7C2               	goto	l9950
 25909  000ECE                     u11470:
 25910                           
 25911                           ; BSR set to: 0
 25912                           ;memoryController.c: 202: }
 25913                           ;memoryController.c: 203: if (fNoOverlapMarker) {
 25914                           
 25915                           ; BSR set to: 0
 25916  000ECE  5195               	movf	memory_txFrameRequest@fNoOverlapMarker& (0+255),w,b
 25917  000ED0  B4D8               	btfsc	status,2,c
 25918  000ED2  D06A               	goto	l474
 25919                           
 25920                           ; BSR set to: 0
 25921                           ;memoryController.c: 204: occupiedMemory[freeIndex].fIsAssigned = 1;
 25922  000ED4  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 25923  000ED6  0D09               	mullw	9
 25924  000ED8  0E06               	movlw	6
 25925  000EDA  26F3               	addwf	prodl,f,c
 25926  000EDC  0E00               	movlw	0
 25927  000EDE  22F4               	addwfc	prodh,f,c
 25928  000EE0  0E00               	movlw	low _occupiedMemory
 25929  000EE2  24F3               	addwf	prodl,w,c
 25930  000EE4  6ED9               	movwf	fsr2l,c
 25931  000EE6  0E03               	movlw	high _occupiedMemory
 25932  000EE8  20F4               	addwfc	prodh,w,c
 25933  000EEA  6EDA               	movwf	fsr2h,c
 25934  000EEC  0E01               	movlw	1
 25935  000EEE  6EDF               	movwf	indf2,c
 25936                           
 25937                           ;memoryController.c: 205: occupiedMemory[freeIndex].end = occupiedMemory[freeIndex].star
      +                          t + length;
 25938  000EF0  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 25939  000EF2  0D09               	mullw	9
 25940  000EF4  0E00               	movlw	low _occupiedMemory
 25941  000EF6  24F3               	addwf	prodl,w,c
 25942  000EF8  6ED9               	movwf	fsr2l,c
 25943  000EFA  0E03               	movlw	high _occupiedMemory
 25944  000EFC  20F4               	addwfc	prodh,w,c
 25945  000EFE  6EDA               	movwf	fsr2h,c
 25946  000F00  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 25947  000F04  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 25948  000F08  5184               	movf	memory_txFrameRequest@length& (0+255),w,b
 25949  000F0A  278D               	addwf	??_memory_txFrameRequest& (0+255),f,b
 25950  000F0C  5185               	movf	(memory_txFrameRequest@length+1)& (0+255),w,b
 25951  000F0E  238E               	addwfc	(??_memory_txFrameRequest+1)& (0+255),f,b
 25952  000F10  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 25953  000F12  0D09               	mullw	9
 25954  000F14  0E02               	movlw	2
 25955  000F16  26F3               	addwf	prodl,f,c
 25956  000F18  0E00               	movlw	0
 25957  000F1A  22F4               	addwfc	prodh,f,c
 25958  000F1C  0E00               	movlw	low _occupiedMemory
 25959  000F1E  24F3               	addwf	prodl,w,c
 25960  000F20  6ED9               	movwf	fsr2l,c
 25961  000F22  0E03               	movlw	high _occupiedMemory
 25962  000F24  20F4               	addwfc	prodh,w,c
 25963  000F26  6EDA               	movwf	fsr2h,c
 25964  000F28  C08D  FFDE         	movff	??_memory_txFrameRequest,postinc2
 25965  000F2C  C08E  FFDD         	movff	??_memory_txFrameRequest+1,postdec2
 25966                           
 25967                           ;memoryController.c: 206: occupiedMemory[freeIndex].fOutOfMemory = 0;
 25968  000F30  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 25969  000F32  0D09               	mullw	9
 25970  000F34  0E07               	movlw	7
 25971  000F36  26F3               	addwf	prodl,f,c
 25972  000F38  0E00               	movlw	0
 25973  000F3A  22F4               	addwfc	prodh,f,c
 25974  000F3C  0E00               	movlw	low _occupiedMemory
 25975  000F3E  24F3               	addwf	prodl,w,c
 25976  000F40  6ED9               	movwf	fsr2l,c
 25977  000F42  0E03               	movlw	high _occupiedMemory
 25978  000F44  20F4               	addwfc	prodh,w,c
 25979  000F46  6EDA               	movwf	fsr2h,c
 25980  000F48  0E00               	movlw	0
 25981  000F4A  6EDF               	movwf	indf2,c
 25982                           
 25983                           ;memoryController.c: 207: occupiedMemory[freeIndex].length = length;
 25984  000F4C  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 25985  000F4E  0D09               	mullw	9
 25986  000F50  0E04               	movlw	4
 25987  000F52  26F3               	addwf	prodl,f,c
 25988  000F54  0E00               	movlw	0
 25989  000F56  22F4               	addwfc	prodh,f,c
 25990  000F58  0E00               	movlw	low _occupiedMemory
 25991  000F5A  24F3               	addwf	prodl,w,c
 25992  000F5C  6ED9               	movwf	fsr2l,c
 25993  000F5E  0E03               	movlw	high _occupiedMemory
 25994  000F60  20F4               	addwfc	prodh,w,c
 25995  000F62  6EDA               	movwf	fsr2h,c
 25996  000F64  C084  FFDE         	movff	memory_txFrameRequest@length,postinc2
 25997  000F68  C085  FFDD         	movff	memory_txFrameRequest@length+1,postdec2
 25998                           
 25999                           ;memoryController.c: 208: occupiedMemory[freeIndex].index = freeIndex;
 26000  000F6C  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 26001  000F6E  0D09               	mullw	9
 26002  000F70  0E08               	movlw	8
 26003  000F72  26F3               	addwf	prodl,f,c
 26004  000F74  0E00               	movlw	0
 26005  000F76  22F4               	addwfc	prodh,f,c
 26006  000F78  0E00               	movlw	low _occupiedMemory
 26007  000F7A  24F3               	addwf	prodl,w,c
 26008  000F7C  6ED9               	movwf	fsr2l,c
 26009  000F7E  0E03               	movlw	high _occupiedMemory
 26010  000F80  20F4               	addwfc	prodh,w,c
 26011  000F82  6EDA               	movwf	fsr2h,c
 26012  000F84  C0A1  FFDF         	movff	memory_txFrameRequest@freeIndex,indf2
 26013                           
 26014                           ; BSR set to: 0
 26015                           ;memoryController.c: 209: return occupiedMemory[freeIndex];
 26016  000F88  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 26017  000F8A  0D09               	mullw	9
 26018  000F8C  0E00               	movlw	low _occupiedMemory
 26019  000F8E  24F3               	addwf	prodl,w,c
 26020  000F90  6ED9               	movwf	fsr2l,c
 26021  000F92  0E03               	movlw	high _occupiedMemory
 26022  000F94  20F4               	addwfc	prodh,w,c
 26023  000F96  6EDA               	movwf	fsr2h,c
 26024  000F98  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 26025  000F9C  0E08               	movlw	8
 26026  000F9E                     u11491:
 26027  000F9E  CFDB FFEB          	movff	plusw2,plusw0
 26028  000FA2  06E8               	decf	wreg,f,c
 26029  000FA4  E2FC               	bc	u11491
 26030                           
 26031                           ; BSR set to: 0
 26032  000FA6  0012               	return	
 26033  000FA8                     l474:
 26034                           
 26035                           ; BSR set to: 0
 26036                           ;memoryController.c: 210: }
 26037                           ;memoryController.c: 211: }
 26038                           ;memoryController.c: 212: freeIndex++;
 26039                           
 26040                           ; BSR set to: 0
 26041                           
 26042                           ; BSR set to: 0
 26043  000FA8  2BA1               	incf	memory_txFrameRequest@freeIndex& (0+255),f,b
 26044                           
 26045                           ; BSR set to: 0
 26046                           ;memoryController.c: 213: if (freeIndex == 8) {
 26047  000FAA  0E08               	movlw	8
 26048  000FAC  19A1               	xorwf	memory_txFrameRequest@freeIndex& (0+255),w,b
 26049  000FAE  A4D8               	btfss	status,2,c
 26050  000FB0  D00C               	goto	l475
 26051                           
 26052                           ; BSR set to: 0
 26053                           ;memoryController.c: 215: field.fOutOfMemory = 1;
 26054  000FB2  0E01               	movlw	1
 26055  000FB4  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 26056                           
 26057                           ; BSR set to: 0
 26058                           ;memoryController.c: 216: return field;
 26059  000FB6  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 26060  000FBA  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 26061  000FBE  0E08               	movlw	8
 26062  000FC0                     u11511:
 26063  000FC0  CFDB FFEB          	movff	plusw2,plusw0
 26064  000FC4  06E8               	decf	wreg,f,c
 26065  000FC6  E2FC               	bc	u11511
 26066                           
 26067                           ; BSR set to: 0
 26068  000FC8  0012               	return	
 26069  000FCA                     l475:
 26070                           
 26071                           ; BSR set to: 0
 26072                           
 26073                           ; BSR set to: 0
 26074  000FCA  0E08               	movlw	8
 26075  000FCC  0100               	movlb	0	; () banked
 26076  000FCE  65A1               	cpfsgt	memory_txFrameRequest@freeIndex& (0+255),b
 26077  000FD0  D5F0               	goto	l455
 26078                           
 26079                           ; BSR set to: 0
 26080                           ;memoryController.c: 217: }
 26081                           ;memoryController.c: 218: }
 26082                           ;memoryController.c: 219: return field;
 26083                           
 26084                           ; BSR set to: 0
 26085  000FD2  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 26086  000FD6  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 26087  000FDA  0E08               	movlw	8
 26088  000FDC                     u11531:
 26089  000FDC  CFDB FFEB          	movff	plusw2,plusw0
 26090  000FE0  06E8               	decf	wreg,f,c
 26091  000FE2  E2FC               	bc	u11531
 26092  000FE4  0012               	return	
 26093  000FE6                     __end_of_memory_txFrameRequest:
 26094                           	opt stack 0
 26095                           tblptru	equ	0xFF8
 26096                           tblptrh	equ	0xFF7
 26097                           tblptrl	equ	0xFF6
 26098                           tablat	equ	0xFF5
 26099                           prodh	equ	0xFF4
 26100                           prodl	equ	0xFF3
 26101                           intcon	equ	0xFF2
 26102                           intcon3	equ	0xFF0
 26103                           indf0	equ	0xFEF
 26104                           postinc0	equ	0xFEE
 26105                           plusw0	equ	0xFEB
 26106                           fsr0h	equ	0xFEA
 26107                           fsr0l	equ	0xFE9
 26108                           wreg	equ	0xFE8
 26109                           indf1	equ	0xFE7
 26110                           postinc1	equ	0xFE6
 26111                           postdec1	equ	0xFE5
 26112                           plusw1	equ	0xFE3
 26113                           fsr1h	equ	0xFE2
 26114                           fsr1l	equ	0xFE1
 26115                           indf2	equ	0xFDF
 26116                           postinc2	equ	0xFDE
 26117                           postdec2	equ	0xFDD
 26118                           plusw2	equ	0xFDB
 26119                           fsr2h	equ	0xFDA
 26120                           fsr2l	equ	0xFD9
 26121                           status	equ	0xFD8
 26122                           
 26123 ;; *************** function _entireMemoryFull *****************
 26124 ;; Defined at:
 26125 ;;		line 46 in file "src/mem/memoryController.c"
 26126 ;; Parameters:    Size  Location     Type
 26127 ;;		None
 26128 ;; Auto vars:     Size  Location     Type
 26129 ;;  i               1    0[BANK0 ] unsigned char 
 26130 ;; Return value:  Size  Location     Type
 26131 ;;		None               void
 26132 ;; Registers used:
 26133 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 26134 ;; Tracked objects:
 26135 ;;		On entry : 0/0
 26136 ;;		On exit  : 0/0
 26137 ;;		Unchanged: 0/0
 26138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 26139 ;;      Params:         0       0       0       0       0       0       0       0       0
 26140 ;;      Locals:         0       1       0       0       0       0       0       0       0
 26141 ;;      Temps:          0       0       0       0       0       0       0       0       0
 26142 ;;      Totals:         0       1       0       0       0       0       0       0       0
 26143 ;;Total ram usage:        1 bytes
 26144 ;; Hardware stack levels used:    1
 26145 ;; Hardware stack levels required when called:    4
 26146 ;; This function calls:
 26147 ;;		Nothing
 26148 ;; This function is called by:
 26149 ;;		_memory_txFrameRequest
 26150 ;; This function uses a non-reentrant model
 26151 ;;
 26152                           
 26153                           	psect	text102
 26154  00693E                     __ptext102:
 26155                           	opt stack 0
 26156  00693E                     _entireMemoryFull:
 26157                           	opt stack 22
 26158                           
 26159                           ;memoryController.c: 47: for (uint8_t i = 0; i < 8; i++) {
 26160                           
 26161                           ;incstack = 0
 26162  00693E  0E00               	movlw	0
 26163  006940  0100               	movlb	0	; () banked
 26164  006942  6F60               	movwf	entireMemoryFull@i& (0+255),b
 26165  006944                     l9684:
 26166                           
 26167                           ; BSR set to: 0
 26168  006944  0E07               	movlw	7
 26169  006946  6560               	cpfsgt	entireMemoryFull@i& (0+255),b
 26170  006948  D001               	goto	l412
 26171  00694A  D013               	goto	u10890
 26172  00694C                     l412:
 26173                           
 26174                           ; BSR set to: 0
 26175                           ;memoryController.c: 48: if (!occupiedMemory[i].fIsAssigned)
 26176                           
 26177                           ; BSR set to: 0
 26178  00694C  5160               	movf	entireMemoryFull@i& (0+255),w,b
 26179  00694E  0D09               	mullw	9
 26180  006950  0E06               	movlw	6
 26181  006952  26F3               	addwf	prodl,f,c
 26182  006954  0E00               	movlw	0
 26183  006956  22F4               	addwfc	prodh,f,c
 26184  006958  0E00               	movlw	low _occupiedMemory
 26185  00695A  24F3               	addwf	prodl,w,c
 26186  00695C  6ED9               	movwf	fsr2l,c
 26187  00695E  0E03               	movlw	high _occupiedMemory
 26188  006960  20F4               	addwfc	prodh,w,c
 26189  006962  6EDA               	movwf	fsr2h,c
 26190  006964  50DF               	movf	indf2,w,c
 26191  006966  A4D8               	btfss	status,2,c
 26192  006968  D002               	goto	l414
 26193                           
 26194                           ; BSR set to: 0
 26195                           ;memoryController.c: 49: return 0u;
 26196  00696A  90D8               	bcf	status,0,c
 26197                           
 26198                           ; BSR set to: 0
 26199  00696C  0012               	return	
 26200  00696E                     l414:
 26201                           
 26202                           ; BSR set to: 0
 26203                           
 26204                           ; BSR set to: 0
 26205  00696E  2B60               	incf	entireMemoryFull@i& (0+255),f,b
 26206  006970  D7E9               	goto	l9684
 26207  006972                     u10890:
 26208                           
 26209                           ; BSR set to: 0
 26210                           ;memoryController.c: 50: }
 26211                           ;memoryController.c: 51: return 1u;
 26212                           
 26213                           ; BSR set to: 0
 26214  006972  80D8               	bsf	status,0,c
 26215  006974  0012               	return	
 26216  006976                     __end_of_entireMemoryFull:
 26217                           	opt stack 0
 26218                           tblptru	equ	0xFF8
 26219                           tblptrh	equ	0xFF7
 26220                           tblptrl	equ	0xFF6
 26221                           tablat	equ	0xFF5
 26222                           prodh	equ	0xFF4
 26223                           prodl	equ	0xFF3
 26224                           intcon	equ	0xFF2
 26225                           intcon3	equ	0xFF0
 26226                           indf0	equ	0xFEF
 26227                           postinc0	equ	0xFEE
 26228                           plusw0	equ	0xFEB
 26229                           fsr0h	equ	0xFEA
 26230                           fsr0l	equ	0xFE9
 26231                           wreg	equ	0xFE8
 26232                           indf1	equ	0xFE7
 26233                           postinc1	equ	0xFE6
 26234                           postdec1	equ	0xFE5
 26235                           plusw1	equ	0xFE3
 26236                           fsr1h	equ	0xFE2
 26237                           fsr1l	equ	0xFE1
 26238                           indf2	equ	0xFDF
 26239                           postinc2	equ	0xFDE
 26240                           postdec2	equ	0xFDD
 26241                           plusw2	equ	0xFDB
 26242                           fsr2h	equ	0xFDA
 26243                           fsr2l	equ	0xFD9
 26244                           status	equ	0xFD8
 26245                           
 26246 ;; *************** function _entireMemoryEmpty *****************
 26247 ;; Defined at:
 26248 ;;		line 38 in file "src/mem/memoryController.c"
 26249 ;; Parameters:    Size  Location     Type
 26250 ;;		None
 26251 ;; Auto vars:     Size  Location     Type
 26252 ;;  i               1    0[BANK0 ] unsigned char 
 26253 ;; Return value:  Size  Location     Type
 26254 ;;		None               void
 26255 ;; Registers used:
 26256 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 26257 ;; Tracked objects:
 26258 ;;		On entry : 0/0
 26259 ;;		On exit  : 0/0
 26260 ;;		Unchanged: 0/0
 26261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 26262 ;;      Params:         0       0       0       0       0       0       0       0       0
 26263 ;;      Locals:         0       1       0       0       0       0       0       0       0
 26264 ;;      Temps:          0       0       0       0       0       0       0       0       0
 26265 ;;      Totals:         0       1       0       0       0       0       0       0       0
 26266 ;;Total ram usage:        1 bytes
 26267 ;; Hardware stack levels used:    1
 26268 ;; Hardware stack levels required when called:    4
 26269 ;; This function calls:
 26270 ;;		Nothing
 26271 ;; This function is called by:
 26272 ;;		_memory_txFrameRequest
 26273 ;; This function uses a non-reentrant model
 26274 ;;
 26275                           
 26276                           	psect	text103
 26277  006976                     __ptext103:
 26278                           	opt stack 0
 26279  006976                     _entireMemoryEmpty:
 26280                           	opt stack 22
 26281                           
 26282                           ;memoryController.c: 39: for (uint8_t i = 0; i < 8; i++) {
 26283                           
 26284                           ; BSR set to: 0
 26285                           ;incstack = 0
 26286  006976  0E00               	movlw	0
 26287  006978  0100               	movlb	0	; () banked
 26288  00697A  6F60               	movwf	entireMemoryEmpty@i& (0+255),b
 26289  00697C                     l9664:
 26290                           
 26291                           ; BSR set to: 0
 26292  00697C  0E07               	movlw	7
 26293  00697E  6560               	cpfsgt	entireMemoryEmpty@i& (0+255),b
 26294  006980  D001               	goto	l406
 26295  006982  D013               	goto	u10860
 26296  006984                     l406:
 26297                           
 26298                           ; BSR set to: 0
 26299                           ;memoryController.c: 40: if (occupiedMemory[i].fIsAssigned)
 26300                           
 26301                           ; BSR set to: 0
 26302  006984  5160               	movf	entireMemoryEmpty@i& (0+255),w,b
 26303  006986  0D09               	mullw	9
 26304  006988  0E06               	movlw	6
 26305  00698A  26F3               	addwf	prodl,f,c
 26306  00698C  0E00               	movlw	0
 26307  00698E  22F4               	addwfc	prodh,f,c
 26308  006990  0E00               	movlw	low _occupiedMemory
 26309  006992  24F3               	addwf	prodl,w,c
 26310  006994  6ED9               	movwf	fsr2l,c
 26311  006996  0E03               	movlw	high _occupiedMemory
 26312  006998  20F4               	addwfc	prodh,w,c
 26313  00699A  6EDA               	movwf	fsr2h,c
 26314  00699C  50DF               	movf	indf2,w,c
 26315  00699E  B4D8               	btfsc	status,2,c
 26316  0069A0  D002               	goto	l408
 26317                           
 26318                           ; BSR set to: 0
 26319                           ;memoryController.c: 41: return 0u;
 26320  0069A2  90D8               	bcf	status,0,c
 26321                           
 26322                           ; BSR set to: 0
 26323  0069A4  0012               	return	
 26324  0069A6                     l408:
 26325                           
 26326                           ; BSR set to: 0
 26327                           
 26328                           ; BSR set to: 0
 26329  0069A6  2B60               	incf	entireMemoryEmpty@i& (0+255),f,b
 26330  0069A8  D7E9               	goto	l9664
 26331  0069AA                     u10860:
 26332                           
 26333                           ; BSR set to: 0
 26334                           ;memoryController.c: 42: }
 26335                           ;memoryController.c: 43: return 1u;
 26336                           
 26337                           ; BSR set to: 0
 26338  0069AA  80D8               	bsf	status,0,c
 26339  0069AC  0012               	return	
 26340  0069AE                     __end_of_entireMemoryEmpty:
 26341                           	opt stack 0
 26342                           tblptru	equ	0xFF8
 26343                           tblptrh	equ	0xFF7
 26344                           tblptrl	equ	0xFF6
 26345                           tablat	equ	0xFF5
 26346                           prodh	equ	0xFF4
 26347                           prodl	equ	0xFF3
 26348                           intcon	equ	0xFF2
 26349                           intcon3	equ	0xFF0
 26350                           indf0	equ	0xFEF
 26351                           postinc0	equ	0xFEE
 26352                           plusw0	equ	0xFEB
 26353                           fsr0h	equ	0xFEA
 26354                           fsr0l	equ	0xFE9
 26355                           wreg	equ	0xFE8
 26356                           indf1	equ	0xFE7
 26357                           postinc1	equ	0xFE6
 26358                           postdec1	equ	0xFE5
 26359                           plusw1	equ	0xFE3
 26360                           fsr1h	equ	0xFE2
 26361                           fsr1l	equ	0xFE1
 26362                           indf2	equ	0xFDF
 26363                           postinc2	equ	0xFDE
 26364                           postdec2	equ	0xFDD
 26365                           plusw2	equ	0xFDB
 26366                           fsr2h	equ	0xFDA
 26367                           fsr2l	equ	0xFD9
 26368                           status	equ	0xFD8
 26369                           
 26370 ;; *************** function _checkForOverlap *****************
 26371 ;; Defined at:
 26372 ;;		line 64 in file "src/mem/memoryController.c"
 26373 ;; Parameters:    Size  Location     Type
 26374 ;;  a               9   18[BANK0 ] struct memoryField
 26375 ;;  b               9   27[BANK0 ] struct memoryField
 26376 ;; Auto vars:     Size  Location     Type
 26377 ;;		None
 26378 ;; Return value:  Size  Location     Type
 26379 ;;		None               void
 26380 ;; Registers used:
 26381 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 26382 ;; Tracked objects:
 26383 ;;		On entry : 0/0
 26384 ;;		On exit  : 0/0
 26385 ;;		Unchanged: 0/0
 26386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 26387 ;;      Params:         0      18       0       0       0       0       0       0       0
 26388 ;;      Locals:         0       0       0       0       0       0       0       0       0
 26389 ;;      Temps:          0       0       0       0       0       0       0       0       0
 26390 ;;      Totals:         0      18       0       0       0       0       0       0       0
 26391 ;;Total ram usage:       18 bytes
 26392 ;; Hardware stack levels used:    1
 26393 ;; Hardware stack levels required when called:    5
 26394 ;; This function calls:
 26395 ;;		_checkForOverlapSwitched
 26396 ;; This function is called by:
 26397 ;;		_memory_txFrameRequest
 26398 ;; This function uses a non-reentrant model
 26399 ;;
 26400                           
 26401                           	psect	text104
 26402  00493A                     __ptext104:
 26403                           	opt stack 0
 26404  00493A                     _checkForOverlap:
 26405                           	opt stack 21
 26406                           
 26407                           ;memoryController.c: 65: if ((a.start == b.start) ||
 26408                           ;memoryController.c: 66: (a.end == b.end) ||
 26409                           ;memoryController.c: 67: (a.start == b.end) ||
 26410                           ;memoryController.c: 68: (a.end == b.start) ||
 26411                           ;memoryController.c: 69: (a.end > 0x3000) ||
 26412                           ;memoryController.c: 70: (a.start > 0x3000) ||
 26413                           ;memoryController.c: 71: (b.end > 0x3000) ||
 26414                           ;memoryController.c: 72: (b.start > 0x3000))
 26415                           
 26416                           ; BSR set to: 0
 26417                           ;incstack = 0
 26418  00493A  0100               	movlb	0	; () banked
 26419  00493C  517B               	movf	checkForOverlap@b& (0+255),w,b
 26420  00493E  1972               	xorwf	checkForOverlap@a& (0+255),w,b
 26421  004940  E104               	bnz	u10900
 26422  004942  517C               	movf	(checkForOverlap@b+1)& (0+255),w,b
 26423  004944  1973               	xorwf	(checkForOverlap@a+1)& (0+255),w,b
 26424  004946  B4D8               	btfsc	status,2,c
 26425  004948  D029               	goto	u10970
 26426  00494A                     u10900:
 26427                           
 26428                           ; BSR set to: 0
 26429  00494A  517D               	movf	(checkForOverlap@b+2)& (0+255),w,b
 26430  00494C  1974               	xorwf	(checkForOverlap@a+2)& (0+255),w,b
 26431  00494E  E104               	bnz	u10910
 26432  004950  517E               	movf	(checkForOverlap@b+3)& (0+255),w,b
 26433  004952  1975               	xorwf	(checkForOverlap@a+3)& (0+255),w,b
 26434  004954  B4D8               	btfsc	status,2,c
 26435  004956  D022               	goto	u10970
 26436  004958                     u10910:
 26437                           
 26438                           ; BSR set to: 0
 26439  004958  5172               	movf	checkForOverlap@a& (0+255),w,b
 26440  00495A  197D               	xorwf	(checkForOverlap@b+2)& (0+255),w,b
 26441  00495C  E104               	bnz	u10920
 26442  00495E  5173               	movf	(checkForOverlap@a+1)& (0+255),w,b
 26443  004960  197E               	xorwf	(checkForOverlap@b+3)& (0+255),w,b
 26444  004962  B4D8               	btfsc	status,2,c
 26445  004964  D01B               	goto	u10970
 26446  004966                     u10920:
 26447                           
 26448                           ; BSR set to: 0
 26449  004966  517B               	movf	checkForOverlap@b& (0+255),w,b
 26450  004968  1974               	xorwf	(checkForOverlap@a+2)& (0+255),w,b
 26451  00496A  E104               	bnz	u10930
 26452  00496C  517C               	movf	(checkForOverlap@b+1)& (0+255),w,b
 26453  00496E  1975               	xorwf	(checkForOverlap@a+3)& (0+255),w,b
 26454  004970  B4D8               	btfsc	status,2,c
 26455  004972  D014               	goto	u10970
 26456  004974                     u10930:
 26457                           
 26458                           ; BSR set to: 0
 26459  004974  0574               	decf	(checkForOverlap@a+2)& (0+255),w,b
 26460  004976  0E30               	movlw	48
 26461  004978  5975               	subwfb	(checkForOverlap@a+3)& (0+255),w,b
 26462  00497A  B0D8               	btfsc	status,0,c
 26463  00497C  D00F               	goto	u10970
 26464                           
 26465                           ; BSR set to: 0
 26466  00497E  0572               	decf	checkForOverlap@a& (0+255),w,b
 26467  004980  0E30               	movlw	48
 26468  004982  5973               	subwfb	(checkForOverlap@a+1)& (0+255),w,b
 26469  004984  B0D8               	btfsc	status,0,c
 26470  004986  D00A               	goto	u10970
 26471                           
 26472                           ; BSR set to: 0
 26473  004988  057D               	decf	(checkForOverlap@b+2)& (0+255),w,b
 26474  00498A  0E30               	movlw	48
 26475  00498C  597E               	subwfb	(checkForOverlap@b+3)& (0+255),w,b
 26476  00498E  B0D8               	btfsc	status,0,c
 26477  004990  D005               	goto	u10970
 26478                           
 26479                           ; BSR set to: 0
 26480  004992  057B               	decf	checkForOverlap@b& (0+255),w,b
 26481  004994  0E30               	movlw	48
 26482  004996  597C               	subwfb	(checkForOverlap@b+1)& (0+255),w,b
 26483  004998  A0D8               	btfss	status,0,c
 26484  00499A  D002               	goto	l418
 26485  00499C                     u10970:
 26486                           
 26487                           ; BSR set to: 0
 26488                           ;memoryController.c: 73: return 1u;
 26489                           
 26490                           ; BSR set to: 0
 26491  00499C  80D8               	bsf	status,0,c
 26492                           
 26493                           ; BSR set to: 0
 26494  00499E  0012               	return	
 26495  0049A0                     l418:
 26496                           
 26497                           ; BSR set to: 0
 26498                           ;memoryController.c: 76: if (a.start < a.end) {
 26499                           
 26500                           ; BSR set to: 0
 26501  0049A0  5174               	movf	(checkForOverlap@a+2)& (0+255),w,b
 26502  0049A2  5D72               	subwf	checkForOverlap@a& (0+255),w,b
 26503  0049A4  5175               	movf	(checkForOverlap@a+3)& (0+255),w,b
 26504  0049A6  5973               	subwfb	(checkForOverlap@a+1)& (0+255),w,b
 26505  0049A8  B0D8               	btfsc	status,0,c
 26506  0049AA  D03B               	goto	l422
 26507                           
 26508                           ; BSR set to: 0
 26509                           ;memoryController.c: 77: if (b.start < b.end) {
 26510  0049AC  517D               	movf	(checkForOverlap@b+2)& (0+255),w,b
 26511  0049AE  5D7B               	subwf	checkForOverlap@b& (0+255),w,b
 26512  0049B0  517E               	movf	(checkForOverlap@b+3)& (0+255),w,b
 26513  0049B2  597C               	subwfb	(checkForOverlap@b+1)& (0+255),w,b
 26514  0049B4  B0D8               	btfsc	status,0,c
 26515  0049B6  D02B               	goto	l423
 26516                           
 26517                           ; BSR set to: 0
 26518                           ;memoryController.c: 79: if (a.start < b.start) {
 26519  0049B8  517B               	movf	checkForOverlap@b& (0+255),w,b
 26520  0049BA  5D72               	subwf	checkForOverlap@a& (0+255),w,b
 26521  0049BC  517C               	movf	(checkForOverlap@b+1)& (0+255),w,b
 26522  0049BE  5973               	subwfb	(checkForOverlap@a+1)& (0+255),w,b
 26523  0049C0  B0D8               	btfsc	status,0,c
 26524  0049C2  D00A               	goto	l424
 26525                           
 26526                           ; BSR set to: 0
 26527                           ;memoryController.c: 80: if (a.end > b.start) {
 26528  0049C4  5174               	movf	(checkForOverlap@a+2)& (0+255),w,b
 26529  0049C6  5D7B               	subwf	checkForOverlap@b& (0+255),w,b
 26530  0049C8  5175               	movf	(checkForOverlap@a+3)& (0+255),w,b
 26531  0049CA  597C               	subwfb	(checkForOverlap@b+1)& (0+255),w,b
 26532  0049CC  B0D8               	btfsc	status,0,c
 26533  0049CE  D002               	goto	l425
 26534                           
 26535                           ; BSR set to: 0
 26536                           ;memoryController.c: 81: return 1u;
 26537  0049D0  80D8               	bsf	status,0,c
 26538                           
 26539                           ; BSR set to: 0
 26540                           ;memoryController.c: 82: } else {
 26541                           
 26542                           ; BSR set to: 0
 26543  0049D2  0012               	return	
 26544  0049D4                     l425:
 26545                           
 26546                           ; BSR set to: 0
 26547                           ;memoryController.c: 83: return 0u;
 26548                           
 26549                           ; BSR set to: 0
 26550  0049D4  90D8               	bcf	status,0,c
 26551                           
 26552                           ; BSR set to: 0
 26553                           ;memoryController.c: 84: }
 26554                           ;memoryController.c: 85: } else {
 26555                           
 26556                           ; BSR set to: 0
 26557  0049D6  0012               	return	
 26558  0049D8                     l424:
 26559                           
 26560                           ; BSR set to: 0
 26561                           ;memoryController.c: 86: return checkForOverlapSwitched(b, a);
 26562                           
 26563                           ; BSR set to: 0
 26564  0049D8  EE20  F07B         	lfsr	2,checkForOverlap@b
 26565  0049DC  EE00  F060         	lfsr	0,checkForOverlapSwitched@a
 26566  0049E0  0E08               	movlw	8
 26567  0049E2                     u11021:
 26568  0049E2  CFDB FFEB          	movff	plusw2,plusw0
 26569  0049E6  06E8               	decf	wreg,f,c
 26570  0049E8  E2FC               	bc	u11021
 26571  0049EA  EE20  F072         	lfsr	2,checkForOverlap@a
 26572  0049EE  EE00  F069         	lfsr	0,checkForOverlapSwitched@b
 26573  0049F2  0E08               	movlw	8
 26574  0049F4                     u11031:
 26575  0049F4  CFDB FFEB          	movff	plusw2,plusw0
 26576  0049F8  06E8               	decf	wreg,f,c
 26577  0049FA  E2FC               	bc	u11031
 26578  0049FC  EC81  F029         	call	_checkForOverlapSwitched	;wreg free
 26579  004A00  0100               	movlb	0	; () banked
 26580  004A02  B0D8               	btfsc	status,0,c
 26581  004A04  D002               	goto	l9566
 26582                           
 26583                           ; BSR set to: 0
 26584  004A06  90D8               	bcf	status,0,c
 26585  004A08  0012               	return	
 26586  004A0A                     l9566:
 26587                           
 26588                           ; BSR set to: 0
 26589                           
 26590                           ; BSR set to: 0
 26591  004A0A  80D8               	bsf	status,0,c
 26592                           
 26593                           ; BSR set to: 0
 26594                           ;memoryController.c: 87: }
 26595                           ;memoryController.c: 88: } else {
 26596                           
 26597                           ; BSR set to: 0
 26598                           
 26599                           ; BSR set to: 0
 26600  004A0C  0012               	return	
 26601  004A0E                     l423:
 26602                           
 26603                           ; BSR set to: 0
 26604                           ;memoryController.c: 89: if (b.end < a.start)
 26605                           
 26606                           ; BSR set to: 0
 26607  004A0E  5172               	movf	checkForOverlap@a& (0+255),w,b
 26608  004A10  5D7D               	subwf	(checkForOverlap@b+2)& (0+255),w,b
 26609  004A12  5173               	movf	(checkForOverlap@a+1)& (0+255),w,b
 26610  004A14  597E               	subwfb	(checkForOverlap@b+3)& (0+255),w,b
 26611  004A16  B0D8               	btfsc	status,0,c
 26612  004A18  D002               	goto	l429
 26613                           
 26614                           ; BSR set to: 0
 26615                           ;memoryController.c: 90: return 0u;
 26616  004A1A  90D8               	bcf	status,0,c
 26617                           
 26618                           ; BSR set to: 0
 26619                           
 26620                           ; BSR set to: 0
 26621  004A1C  0012               	return	
 26622  004A1E                     l429:
 26623                           
 26624                           ; BSR set to: 0
 26625                           ;memoryController.c: 91: else
 26626                           ;memoryController.c: 92: return 1u;
 26627                           
 26628                           ; BSR set to: 0
 26629  004A1E  80D8               	bsf	status,0,c
 26630                           
 26631                           ; BSR set to: 0
 26632                           ;memoryController.c: 93: }
 26633                           ;memoryController.c: 94: } else {
 26634                           
 26635                           ; BSR set to: 0
 26636                           
 26637                           ; BSR set to: 0
 26638  004A20  0012               	return	
 26639  004A22                     l422:
 26640                           
 26641                           ; BSR set to: 0
 26642                           ;memoryController.c: 95: return checkForOverlapSwitched(b, a);
 26643                           
 26644                           ; BSR set to: 0
 26645  004A22  EE20  F07B         	lfsr	2,checkForOverlap@b
 26646  004A26  EE00  F060         	lfsr	0,checkForOverlapSwitched@a
 26647  004A2A  0E08               	movlw	8
 26648  004A2C                     u11061:
 26649  004A2C  CFDB FFEB          	movff	plusw2,plusw0
 26650  004A30  06E8               	decf	wreg,f,c
 26651  004A32  E2FC               	bc	u11061
 26652  004A34  EE20  F072         	lfsr	2,checkForOverlap@a
 26653  004A38  EE00  F069         	lfsr	0,checkForOverlapSwitched@b
 26654  004A3C  0E08               	movlw	8
 26655  004A3E                     u11071:
 26656  004A3E  CFDB FFEB          	movff	plusw2,plusw0
 26657  004A42  06E8               	decf	wreg,f,c
 26658  004A44  E2FC               	bc	u11071
 26659  004A46  EC81  F029         	call	_checkForOverlapSwitched	;wreg free
 26660  004A4A  0100               	movlb	0	; () banked
 26661  004A4C  B0D8               	btfsc	status,0,c
 26662  004A4E  D002               	goto	l9570
 26663                           
 26664                           ; BSR set to: 0
 26665  004A50  90D8               	bcf	status,0,c
 26666  004A52  0012               	return	
 26667  004A54                     l9570:
 26668                           
 26669                           ; BSR set to: 0
 26670                           
 26671                           ; BSR set to: 0
 26672  004A54  80D8               	bsf	status,0,c
 26673                           
 26674                           ; BSR set to: 0
 26675                           
 26676                           ; BSR set to: 0
 26677  004A56  0012               	return	
 26678  004A58                     __end_of_checkForOverlap:
 26679                           	opt stack 0
 26680                           tblptru	equ	0xFF8
 26681                           tblptrh	equ	0xFF7
 26682                           tblptrl	equ	0xFF6
 26683                           tablat	equ	0xFF5
 26684                           prodh	equ	0xFF4
 26685                           prodl	equ	0xFF3
 26686                           intcon	equ	0xFF2
 26687                           intcon3	equ	0xFF0
 26688                           indf0	equ	0xFEF
 26689                           postinc0	equ	0xFEE
 26690                           plusw0	equ	0xFEB
 26691                           fsr0h	equ	0xFEA
 26692                           fsr0l	equ	0xFE9
 26693                           wreg	equ	0xFE8
 26694                           indf1	equ	0xFE7
 26695                           postinc1	equ	0xFE6
 26696                           postdec1	equ	0xFE5
 26697                           plusw1	equ	0xFE3
 26698                           fsr1h	equ	0xFE2
 26699                           fsr1l	equ	0xFE1
 26700                           indf2	equ	0xFDF
 26701                           postinc2	equ	0xFDE
 26702                           postdec2	equ	0xFDD
 26703                           plusw2	equ	0xFDB
 26704                           fsr2h	equ	0xFDA
 26705                           fsr2l	equ	0xFD9
 26706                           status	equ	0xFD8
 26707                           
 26708 ;; *************** function _checkForOverlapSwitched *****************
 26709 ;; Defined at:
 26710 ;;		line 99 in file "src/mem/memoryController.c"
 26711 ;; Parameters:    Size  Location     Type
 26712 ;;  a               9    0[BANK0 ] struct memoryField
 26713 ;;  b               9    9[BANK0 ] struct memoryField
 26714 ;; Auto vars:     Size  Location     Type
 26715 ;;		None
 26716 ;; Return value:  Size  Location     Type
 26717 ;;		None               void
 26718 ;; Registers used:
 26719 ;;		wreg, status,2, status,0
 26720 ;; Tracked objects:
 26721 ;;		On entry : 0/0
 26722 ;;		On exit  : 0/0
 26723 ;;		Unchanged: 0/0
 26724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 26725 ;;      Params:         0      18       0       0       0       0       0       0       0
 26726 ;;      Locals:         0       0       0       0       0       0       0       0       0
 26727 ;;      Temps:          0       0       0       0       0       0       0       0       0
 26728 ;;      Totals:         0      18       0       0       0       0       0       0       0
 26729 ;;Total ram usage:       18 bytes
 26730 ;; Hardware stack levels used:    1
 26731 ;; Hardware stack levels required when called:    4
 26732 ;; This function calls:
 26733 ;;		Nothing
 26734 ;; This function is called by:
 26735 ;;		_checkForOverlap
 26736 ;; This function uses a non-reentrant model
 26737 ;;
 26738                           
 26739                           	psect	text105
 26740  005302                     __ptext105:
 26741                           	opt stack 0
 26742  005302                     _checkForOverlapSwitched:
 26743                           	opt stack 21
 26744                           
 26745                           ;memoryController.c: 102: if ((a.start == b.start) ||
 26746                           ;memoryController.c: 103: (a.end == b.end) ||
 26747                           ;memoryController.c: 104: (a.start == b.end) ||
 26748                           ;memoryController.c: 105: (a.end == b.start) ||
 26749                           ;memoryController.c: 106: (a.end > 0x3000) ||
 26750                           ;memoryController.c: 107: (a.start > 0x3000) ||
 26751                           ;memoryController.c: 108: (b.end > 0x3000) ||
 26752                           ;memoryController.c: 109: (b.start > 0x3000))
 26753                           
 26754                           ; BSR set to: 0
 26755                           ;incstack = 0
 26756  005302  0100               	movlb	0	; () banked
 26757  005304  5169               	movf	checkForOverlapSwitched@b& (0+255),w,b
 26758  005306  1960               	xorwf	checkForOverlapSwitched@a& (0+255),w,b
 26759  005308  E104               	bnz	u10710
 26760  00530A  516A               	movf	(checkForOverlapSwitched@b+1)& (0+255),w,b
 26761  00530C  1961               	xorwf	(checkForOverlapSwitched@a+1)& (0+255),w,b
 26762  00530E  B4D8               	btfsc	status,2,c
 26763  005310  D029               	goto	u10780
 26764  005312                     u10710:
 26765                           
 26766                           ; BSR set to: 0
 26767  005312  516B               	movf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 26768  005314  1962               	xorwf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 26769  005316  E104               	bnz	u10720
 26770  005318  516C               	movf	(checkForOverlapSwitched@b+3)& (0+255),w,b
 26771  00531A  1963               	xorwf	(checkForOverlapSwitched@a+3)& (0+255),w,b
 26772  00531C  B4D8               	btfsc	status,2,c
 26773  00531E  D022               	goto	u10780
 26774  005320                     u10720:
 26775                           
 26776                           ; BSR set to: 0
 26777  005320  5160               	movf	checkForOverlapSwitched@a& (0+255),w,b
 26778  005322  196B               	xorwf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 26779  005324  E104               	bnz	u10730
 26780  005326  5161               	movf	(checkForOverlapSwitched@a+1)& (0+255),w,b
 26781  005328  196C               	xorwf	(checkForOverlapSwitched@b+3)& (0+255),w,b
 26782  00532A  B4D8               	btfsc	status,2,c
 26783  00532C  D01B               	goto	u10780
 26784  00532E                     u10730:
 26785                           
 26786                           ; BSR set to: 0
 26787  00532E  5169               	movf	checkForOverlapSwitched@b& (0+255),w,b
 26788  005330  1962               	xorwf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 26789  005332  E104               	bnz	u10740
 26790  005334  516A               	movf	(checkForOverlapSwitched@b+1)& (0+255),w,b
 26791  005336  1963               	xorwf	(checkForOverlapSwitched@a+3)& (0+255),w,b
 26792  005338  B4D8               	btfsc	status,2,c
 26793  00533A  D014               	goto	u10780
 26794  00533C                     u10740:
 26795                           
 26796                           ; BSR set to: 0
 26797  00533C  0562               	decf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 26798  00533E  0E30               	movlw	48
 26799  005340  5963               	subwfb	(checkForOverlapSwitched@a+3)& (0+255),w,b
 26800  005342  B0D8               	btfsc	status,0,c
 26801  005344  D00F               	goto	u10780
 26802                           
 26803                           ; BSR set to: 0
 26804  005346  0560               	decf	checkForOverlapSwitched@a& (0+255),w,b
 26805  005348  0E30               	movlw	48
 26806  00534A  5961               	subwfb	(checkForOverlapSwitched@a+1)& (0+255),w,b
 26807  00534C  B0D8               	btfsc	status,0,c
 26808  00534E  D00A               	goto	u10780
 26809                           
 26810                           ; BSR set to: 0
 26811  005350  056B               	decf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 26812  005352  0E30               	movlw	48
 26813  005354  596C               	subwfb	(checkForOverlapSwitched@b+3)& (0+255),w,b
 26814  005356  B0D8               	btfsc	status,0,c
 26815  005358  D005               	goto	u10780
 26816                           
 26817                           ; BSR set to: 0
 26818  00535A  0569               	decf	checkForOverlapSwitched@b& (0+255),w,b
 26819  00535C  0E30               	movlw	48
 26820  00535E  596A               	subwfb	(checkForOverlapSwitched@b+1)& (0+255),w,b
 26821  005360  A0D8               	btfss	status,0,c
 26822  005362  D002               	goto	l434
 26823  005364                     u10780:
 26824                           
 26825                           ; BSR set to: 0
 26826                           ;memoryController.c: 110: return 1u;
 26827                           
 26828                           ; BSR set to: 0
 26829  005364  80D8               	bsf	status,0,c
 26830                           
 26831                           ; BSR set to: 0
 26832  005366  0012               	return	
 26833  005368                     l434:
 26834                           
 26835                           ; BSR set to: 0
 26836                           ;memoryController.c: 113: if (a.start < a.end) {
 26837                           
 26838                           ; BSR set to: 0
 26839  005368  5162               	movf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 26840  00536A  5D60               	subwf	checkForOverlapSwitched@a& (0+255),w,b
 26841  00536C  5163               	movf	(checkForOverlapSwitched@a+3)& (0+255),w,b
 26842  00536E  5961               	subwfb	(checkForOverlapSwitched@a+1)& (0+255),w,b
 26843  005370  B0D8               	btfsc	status,0,c
 26844  005372  D01E               	goto	l445
 26845                           
 26846                           ; BSR set to: 0
 26847                           ;memoryController.c: 114: if (b.start < b.end) {
 26848  005374  516B               	movf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 26849  005376  5D69               	subwf	checkForOverlapSwitched@b& (0+255),w,b
 26850  005378  516C               	movf	(checkForOverlapSwitched@b+3)& (0+255),w,b
 26851  00537A  596A               	subwfb	(checkForOverlapSwitched@b+1)& (0+255),w,b
 26852  00537C  B0D8               	btfsc	status,0,c
 26853  00537E  D010               	goto	l439
 26854                           
 26855                           ; BSR set to: 0
 26856                           ;memoryController.c: 116: if (a.start < b.start) {
 26857  005380  5169               	movf	checkForOverlapSwitched@b& (0+255),w,b
 26858  005382  5D60               	subwf	checkForOverlapSwitched@a& (0+255),w,b
 26859  005384  516A               	movf	(checkForOverlapSwitched@b+1)& (0+255),w,b
 26860  005386  5961               	subwfb	(checkForOverlapSwitched@a+1)& (0+255),w,b
 26861  005388  B0D8               	btfsc	status,0,c
 26862  00538A  D012               	goto	l445
 26863                           
 26864                           ; BSR set to: 0
 26865                           ;memoryController.c: 117: if (a.end > b.start) {
 26866  00538C  5162               	movf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 26867  00538E  5D69               	subwf	checkForOverlapSwitched@b& (0+255),w,b
 26868  005390  5163               	movf	(checkForOverlapSwitched@a+3)& (0+255),w,b
 26869  005392  596A               	subwfb	(checkForOverlapSwitched@b+1)& (0+255),w,b
 26870  005394  B0D8               	btfsc	status,0,c
 26871  005396  D002               	goto	l441
 26872                           
 26873                           ; BSR set to: 0
 26874                           ;memoryController.c: 118: return 1u;
 26875  005398  80D8               	bsf	status,0,c
 26876                           
 26877                           ; BSR set to: 0
 26878  00539A  0012               	return	
 26879  00539C                     l441:
 26880                           
 26881                           ; BSR set to: 0
 26882                           ;memoryController.c: 120: return 0u;
 26883                           
 26884                           ; BSR set to: 0
 26885  00539C  90D8               	bcf	status,0,c
 26886                           
 26887                           ; BSR set to: 0
 26888  00539E  0012               	return	
 26889  0053A0                     l439:
 26890                           
 26891                           ; BSR set to: 0
 26892                           ;memoryController.c: 124: if (b.end < a.start)
 26893                           
 26894                           ; BSR set to: 0
 26895  0053A0  5160               	movf	checkForOverlapSwitched@a& (0+255),w,b
 26896  0053A2  5D6B               	subwf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 26897  0053A4  5161               	movf	(checkForOverlapSwitched@a+1)& (0+255),w,b
 26898  0053A6  596C               	subwfb	(checkForOverlapSwitched@b+3)& (0+255),w,b
 26899  0053A8  A0D8               	btfss	status,0,c
 26900  0053AA  D7F8               	goto	l441
 26901                           
 26902                           ; BSR set to: 0
 26903                           ;memoryController.c: 126: else
 26904                           ;memoryController.c: 127: return 1u;
 26905                           
 26906                           ; BSR set to: 0
 26907                           
 26908                           ; BSR set to: 0
 26909                           
 26910                           ; BSR set to: 0
 26911                           
 26912                           ; BSR set to: 0
 26913                           ;memoryController.c: 125: return 0u;
 26914  0053AC  80D8               	bsf	status,0,c
 26915                           
 26916                           ; BSR set to: 0
 26917  0053AE  0012               	return	
 26918  0053B0                     l445:
 26919                           
 26920                           ; BSR set to: 0
 26921                           ;memoryController.c: 128: }
 26922                           ;memoryController.c: 129: }
 26923                           ;memoryController.c: 131: return 1u;
 26924                           
 26925                           ; BSR set to: 0
 26926                           
 26927                           ; BSR set to: 0
 26928                           
 26929                           ; BSR set to: 0
 26930  0053B0  80D8               	bsf	status,0,c
 26931  0053B2  0012               	return	
 26932  0053B4                     __end_of_checkForOverlapSwitched:
 26933                           	opt stack 0
 26934                           tblptru	equ	0xFF8
 26935                           tblptrh	equ	0xFF7
 26936                           tblptrl	equ	0xFF6
 26937                           tablat	equ	0xFF5
 26938                           prodh	equ	0xFF4
 26939                           prodl	equ	0xFF3
 26940                           intcon	equ	0xFF2
 26941                           intcon3	equ	0xFF0
 26942                           indf0	equ	0xFEF
 26943                           postinc0	equ	0xFEE
 26944                           plusw0	equ	0xFEB
 26945                           fsr0h	equ	0xFEA
 26946                           fsr0l	equ	0xFE9
 26947                           wreg	equ	0xFE8
 26948                           indf1	equ	0xFE7
 26949                           postinc1	equ	0xFE6
 26950                           postdec1	equ	0xFE5
 26951                           plusw1	equ	0xFE3
 26952                           fsr1h	equ	0xFE2
 26953                           fsr1l	equ	0xFE1
 26954                           indf2	equ	0xFDF
 26955                           postinc2	equ	0xFDE
 26956                           postdec2	equ	0xFDD
 26957                           plusw2	equ	0xFDB
 26958                           fsr2h	equ	0xFDA
 26959                           fsr2l	equ	0xFD9
 26960                           status	equ	0xFD8
 26961                           
 26962 ;; *************** function ___wmul *****************
 26963 ;; Defined at:
 26964 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 26965 ;; Parameters:    Size  Location     Type
 26966 ;;  multiplier      2   14[BANK0 ] unsigned int 
 26967 ;;  multiplicand    2   16[BANK0 ] unsigned int 
 26968 ;; Auto vars:     Size  Location     Type
 26969 ;;  product         2   18[BANK0 ] unsigned int 
 26970 ;; Return value:  Size  Location     Type
 26971 ;;                  2   14[BANK0 ] unsigned int 
 26972 ;; Registers used:
 26973 ;;		wreg, status,2, status,0, prodl, prodh
 26974 ;; Tracked objects:
 26975 ;;		On entry : 0/0
 26976 ;;		On exit  : 0/0
 26977 ;;		Unchanged: 0/0
 26978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 26979 ;;      Params:         0       4       0       0       0       0       0       0       0
 26980 ;;      Locals:         0       2       0       0       0       0       0       0       0
 26981 ;;      Temps:          0       0       0       0       0       0       0       0       0
 26982 ;;      Totals:         0       6       0       0       0       0       0       0       0
 26983 ;;Total ram usage:        6 bytes
 26984 ;; Hardware stack levels used:    1
 26985 ;; Hardware stack levels required when called:    4
 26986 ;; This function calls:
 26987 ;;		Nothing
 26988 ;; This function is called by:
 26989 ;;		_memory_txFrameRequest
 26990 ;;		_tcp_listen
 26991 ;; This function uses a non-reentrant model
 26992 ;;
 26993                           
 26994                           	psect	text106
 26995  006BD2                     __ptext106:
 26996                           	opt stack 0
 26997  006BD2                     ___wmul:
 26998                           	opt stack 22
 26999                           
 27000                           ; BSR set to: 0
 27001                           ;incstack = 0
 27002  006BD2  0100               	movlb	0	; () banked
 27003  006BD4  516E               	movf	___wmul@multiplier& (0+255),w,b
 27004  006BD6  0370               	mulwf	___wmul@multiplicand& (0+255),b
 27005  006BD8  CFF3 F072          	movff	prodl,___wmul@product
 27006  006BDC  CFF4 F073          	movff	prodh,___wmul@product+1
 27007  006BE0  516E               	movf	___wmul@multiplier& (0+255),w,b
 27008  006BE2  0371               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 27009  006BE4  50F3               	movf	prodl,w,c
 27010  006BE6  2773               	addwf	(___wmul@product+1)& (0+255),f,b
 27011  006BE8  516F               	movf	(___wmul@multiplier+1)& (0+255),w,b
 27012  006BEA  0370               	mulwf	___wmul@multiplicand& (0+255),b
 27013  006BEC  50F3               	movf	prodl,w,c
 27014  006BEE  2773               	addwf	(___wmul@product+1)& (0+255),f,b
 27015                           
 27016                           ; BSR set to: 0
 27017  006BF0  C072  F06E         	movff	___wmul@product,?___wmul
 27018  006BF4  C073  F06F         	movff	___wmul@product+1,?___wmul+1
 27019  006BF8  0012               	return	
 27020  006BFA                     __end_of___wmul:
 27021                           	opt stack 0
 27022                           tblptru	equ	0xFF8
 27023                           tblptrh	equ	0xFF7
 27024                           tblptrl	equ	0xFF6
 27025                           tablat	equ	0xFF5
 27026                           prodh	equ	0xFF4
 27027                           prodl	equ	0xFF3
 27028                           intcon	equ	0xFF2
 27029                           intcon3	equ	0xFF0
 27030                           indf0	equ	0xFEF
 27031                           postinc0	equ	0xFEE
 27032                           plusw0	equ	0xFEB
 27033                           fsr0h	equ	0xFEA
 27034                           fsr0l	equ	0xFE9
 27035                           wreg	equ	0xFE8
 27036                           indf1	equ	0xFE7
 27037                           postinc1	equ	0xFE6
 27038                           postdec1	equ	0xFE5
 27039                           plusw1	equ	0xFE3
 27040                           fsr1h	equ	0xFE2
 27041                           fsr1l	equ	0xFE1
 27042                           indf2	equ	0xFDF
 27043                           postinc2	equ	0xFDE
 27044                           postdec2	equ	0xFDD
 27045                           plusw2	equ	0xFDB
 27046                           fsr2h	equ	0xFDA
 27047                           fsr2l	equ	0xFD9
 27048                           status	equ	0xFD8
 27049                           
 27050 ;; *************** function _ethernetController_writeEtherTypeFieldToBuffer *****************
 27051 ;; Defined at:
 27052 ;;		line 241 in file "src/enc424j600/ENC424J600.c"
 27053 ;; Parameters:    Size  Location     Type
 27054 ;;  ethtype         2   15[BANK0 ] enum E5513
 27055 ;;  field           9   17[BANK0 ] struct memoryField
 27056 ;; Auto vars:     Size  Location     Type
 27057 ;;  opcode          1   28[BANK0 ] unsigned char 
 27058 ;;  highByte        1   27[BANK0 ] unsigned char 
 27059 ;;  lowByte         1   26[BANK0 ] unsigned char 
 27060 ;; Return value:  Size  Location     Type
 27061 ;;                  1    wreg      void 
 27062 ;; Registers used:
 27063 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 27064 ;; Tracked objects:
 27065 ;;		On entry : 0/0
 27066 ;;		On exit  : 0/0
 27067 ;;		Unchanged: 0/0
 27068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 27069 ;;      Params:         0      11       0       0       0       0       0       0       0
 27070 ;;      Locals:         0       3       0       0       0       0       0       0       0
 27071 ;;      Temps:          0       0       0       0       0       0       0       0       0
 27072 ;;      Totals:         0      14       0       0       0       0       0       0       0
 27073 ;;Total ram usage:       14 bytes
 27074 ;; Hardware stack levels used:    1
 27075 ;; Hardware stack levels required when called:    7
 27076 ;; This function calls:
 27077 ;;		_enc424j600_setGPDATAWritePointer
 27078 ;;		_enc424j600_writeSPI
 27079 ;; This function is called by:
 27080 ;;		_ethernet_txFrameRequest
 27081 ;; This function uses a non-reentrant model
 27082 ;;
 27083                           
 27084                           	psect	text107
 27085  00665A                     __ptext107:
 27086                           	opt stack 0
 27087  00665A                     _ethernetController_writeEtherTypeFieldToBuffer:
 27088                           	opt stack 20
 27089                           
 27090                           ;ENC424J600.c: 242: enc424j600_setGPDATAWritePointer(field.start + 0x0006);
 27091                           
 27092                           ; BSR set to: 0
 27093                           ;incstack = 0
 27094  00665A  0E06               	movlw	6
 27095  00665C  0100               	movlb	0	; () banked
 27096  00665E  2571               	addwf	ethernetController_writeEtherTypeFieldToBuffer@field& (0+255),w,b
 27097  006660  6F6A               	movwf	enc424j600_setGPDATAWritePointer@addr& (0+255),b
 27098  006662  0E00               	movlw	0
 27099  006664  2172               	addwfc	(ethernetController_writeEtherTypeFieldToBuffer@field+1)& (0+255),w,b
 27100  006666  6F6B               	movwf	(enc424j600_setGPDATAWritePointer@addr+1)& (0+255),b
 27101  006668  EC63  F034         	call	_enc424j600_setGPDATAWritePointer	;wreg free
 27102                           
 27103                           ;ENC424J600.c: 243: uint8_t lowByte = ethtype & 0x00ff;
 27104  00666C  C06F  F07A         	movff	ethernetController_writeEtherTypeFieldToBuffer@ethtype,ethernetController_writeEt
      +                          herTypeFieldToBuffer@lowByte
 27105                           
 27106                           ;ENC424J600.c: 244: uint8_t highByte = (ethtype & 0xff00) >> 8;
 27107  006670  0100               	movlb	0	; () banked
 27108  006672  5170               	movf	(ethernetController_writeEtherTypeFieldToBuffer@ethtype+1)& (0+255),w,b
 27109  006674  6F7B               	movwf	ethernetController_writeEtherTypeFieldToBuffer@highByte& (0+255),b
 27110                           
 27111                           ; BSR set to: 0
 27112                           ;ENC424J600.c: 245: uint8_t opcode = 0x2A;
 27113  006676  0E2A               	movlw	42
 27114  006678  6F7C               	movwf	ethernetController_writeEtherTypeFieldToBuffer@opcode& (0+255),b
 27115                           
 27116                           ; BSR set to: 0
 27117                           ;ENC424J600.c: 246: PORTBbits.RB4=0;
 27118  00667A  9881               	bcf	3969,4,c	;volatile
 27119                           
 27120                           ;ENC424J600.c: 247: enc424j600_writeSPI(&opcode);
 27121  00667C  0E7C               	movlw	low ethernetController_writeEtherTypeFieldToBuffer@opcode
 27122  00667E  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 27123  006680  0E00               	movlw	high ethernetController_writeEtherTypeFieldToBuffer@opcode
 27124  006682  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 27125  006684  EC50  F031         	call	_enc424j600_writeSPI	;wreg free
 27126                           
 27127                           ;ENC424J600.c: 248: enc424j600_writeSPI(&highByte);
 27128  006688  0E7B               	movlw	low ethernetController_writeEtherTypeFieldToBuffer@highByte
 27129  00668A  0100               	movlb	0	; () banked
 27130  00668C  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 27131  00668E  0E00               	movlw	high ethernetController_writeEtherTypeFieldToBuffer@highByte
 27132  006690  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 27133  006692  EC50  F031         	call	_enc424j600_writeSPI	;wreg free
 27134                           
 27135                           ;ENC424J600.c: 249: enc424j600_writeSPI(&lowByte);
 27136  006696  0E7A               	movlw	low ethernetController_writeEtherTypeFieldToBuffer@lowByte
 27137  006698  0100               	movlb	0	; () banked
 27138  00669A  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 27139  00669C  0E00               	movlw	high ethernetController_writeEtherTypeFieldToBuffer@lowByte
 27140  00669E  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 27141  0066A0  EC50  F031         	call	_enc424j600_writeSPI	;wreg free
 27142                           
 27143                           ;ENC424J600.c: 250: PORTBbits.RB4=1;
 27144  0066A4  8881               	bsf	3969,4,c	;volatile
 27145  0066A6  0012               	return		;funcret
 27146  0066A8                     __end_of_ethernetController_writeEtherTypeFieldToBuffer:
 27147                           	opt stack 0
 27148                           tblptru	equ	0xFF8
 27149                           tblptrh	equ	0xFF7
 27150                           tblptrl	equ	0xFF6
 27151                           tablat	equ	0xFF5
 27152                           prodh	equ	0xFF4
 27153                           prodl	equ	0xFF3
 27154                           intcon	equ	0xFF2
 27155                           intcon3	equ	0xFF0
 27156                           indf0	equ	0xFEF
 27157                           postinc0	equ	0xFEE
 27158                           plusw0	equ	0xFEB
 27159                           fsr0h	equ	0xFEA
 27160                           fsr0l	equ	0xFE9
 27161                           wreg	equ	0xFE8
 27162                           indf1	equ	0xFE7
 27163                           postinc1	equ	0xFE6
 27164                           postdec1	equ	0xFE5
 27165                           plusw1	equ	0xFE3
 27166                           fsr1h	equ	0xFE2
 27167                           fsr1l	equ	0xFE1
 27168                           indf2	equ	0xFDF
 27169                           postinc2	equ	0xFDE
 27170                           postdec2	equ	0xFDD
 27171                           plusw2	equ	0xFDB
 27172                           fsr2h	equ	0xFDA
 27173                           fsr2l	equ	0xFD9
 27174                           status	equ	0xFD8
 27175                           
 27176 ;; *************** function _ethernetController_writeDestinationMACAddress *****************
 27177 ;; Defined at:
 27178 ;;		line 228 in file "src/enc424j600/ENC424J600.c"
 27179 ;; Parameters:    Size  Location     Type
 27180 ;;  addr            6   15[BANK0 ] struct macaddress
 27181 ;;  field           9   21[BANK0 ] struct memoryField
 27182 ;; Auto vars:     Size  Location     Type
 27183 ;;  i               1   37[BANK0 ] unsigned char 
 27184 ;;  i               1   38[BANK0 ] unsigned char 
 27185 ;;  data            6   30[BANK0 ] unsigned char [6]
 27186 ;;  opcode          1   36[BANK0 ] unsigned char 
 27187 ;; Return value:  Size  Location     Type
 27188 ;;                  1    wreg      void 
 27189 ;; Registers used:
 27190 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 27191 ;; Tracked objects:
 27192 ;;		On entry : 0/0
 27193 ;;		On exit  : 0/0
 27194 ;;		Unchanged: 0/0
 27195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 27196 ;;      Params:         0      15       0       0       0       0       0       0       0
 27197 ;;      Locals:         0       9       0       0       0       0       0       0       0
 27198 ;;      Temps:          0       0       0       0       0       0       0       0       0
 27199 ;;      Totals:         0      24       0       0       0       0       0       0       0
 27200 ;;Total ram usage:       24 bytes
 27201 ;; Hardware stack levels used:    1
 27202 ;; Hardware stack levels required when called:    7
 27203 ;; This function calls:
 27204 ;;		_enc424j600_setGPDATAWritePointer
 27205 ;;		_enc424j600_writeSPI
 27206 ;; This function is called by:
 27207 ;;		_ethernet_txFrameRequest
 27208 ;;		_ipv4_sendFrame
 27209 ;; This function uses a non-reentrant model
 27210 ;;
 27211                           
 27212                           	psect	text108
 27213  005DA4                     __ptext108:
 27214                           	opt stack 0
 27215  005DA4                     _ethernetController_writeDestinationMACAddress:
 27216                           	opt stack 20
 27217                           
 27218                           ;ENC424J600.c: 229: enc424j600_setGPDATAWritePointer(field.start);
 27219                           
 27220                           ;incstack = 0
 27221  005DA4  C075  F06A         	movff	ethernetController_writeDestinationMACAddress@field,enc424j600_setGPDATAWritePoin
      +                          ter@addr
 27222  005DA8  C076  F06B         	movff	ethernetController_writeDestinationMACAddress@field+1,enc424j600_setGPDATAWritePo
      +                          inter@addr+1
 27223  005DAC  EC63  F034         	call	_enc424j600_setGPDATAWritePointer	;wreg free
 27224                           
 27225                           ;ENC424J600.c: 230: uint8_t data[6];
 27226                           ;ENC424J600.c: 231: for (uint8_t i = 0; i < 6; i++)
 27227  005DB0  0E00               	movlw	0
 27228  005DB2  0100               	movlb	0	; () banked
 27229  005DB4  6F86               	movwf	ethernetController_writeDestinationMACAddress@i& (0+255),b
 27230  005DB6                     l9816:
 27231                           
 27232                           ; BSR set to: 0
 27233  005DB6  0E05               	movlw	5
 27234  005DB8  6586               	cpfsgt	ethernetController_writeDestinationMACAddress@i& (0+255),b
 27235  005DBA  D001               	goto	l140
 27236  005DBC  D014               	goto	u11160
 27237  005DBE                     l140:
 27238                           
 27239                           ; BSR set to: 0
 27240                           ;ENC424J600.c: 232: data[i] = addr.address[i];
 27241                           
 27242                           ; BSR set to: 0
 27243  005DBE  5186               	movf	ethernetController_writeDestinationMACAddress@i& (0+255),w,b
 27244  005DC0  0D01               	mullw	1
 27245  005DC2  0E6F               	movlw	low ethernetController_writeDestinationMACAddress@addr
 27246  005DC4  24F3               	addwf	prodl,w,c
 27247  005DC6  6ED9               	movwf	fsr2l,c
 27248  005DC8  0E00               	movlw	high ethernetController_writeDestinationMACAddress@addr
 27249  005DCA  20F4               	addwfc	prodh,w,c
 27250  005DCC  6EDA               	movwf	fsr2h,c
 27251  005DCE  5186               	movf	ethernetController_writeDestinationMACAddress@i& (0+255),w,b
 27252  005DD0  0D01               	mullw	1
 27253  005DD2  0E7E               	movlw	low ethernetController_writeDestinationMACAddress@data
 27254  005DD4  24F3               	addwf	prodl,w,c
 27255  005DD6  6EE1               	movwf	fsr1l,c
 27256  005DD8  0E00               	movlw	high ethernetController_writeDestinationMACAddress@data
 27257  005DDA  20F4               	addwfc	prodh,w,c
 27258  005DDC  6EE2               	movwf	fsr1h,c
 27259  005DDE  CFDF FFE7          	movff	indf2,indf1
 27260                           
 27261                           ; BSR set to: 0
 27262  005DE2  2B86               	incf	ethernetController_writeDestinationMACAddress@i& (0+255),f,b
 27263  005DE4  D7E8               	goto	l9816
 27264  005DE6                     u11160:
 27265                           
 27266                           ; BSR set to: 0
 27267                           ;ENC424J600.c: 233: uint8_t opcode = 0x2A;
 27268                           
 27269                           ; BSR set to: 0
 27270  005DE6  0E2A               	movlw	42
 27271  005DE8  6F84               	movwf	ethernetController_writeDestinationMACAddress@opcode& (0+255),b
 27272                           
 27273                           ; BSR set to: 0
 27274                           ;ENC424J600.c: 234: PORTBbits.RB4=0;
 27275  005DEA  9881               	bcf	3969,4,c	;volatile
 27276                           
 27277                           ; BSR set to: 0
 27278                           ;ENC424J600.c: 235: enc424j600_writeSPI(&opcode);
 27279  005DEC  0E84               	movlw	low ethernetController_writeDestinationMACAddress@opcode
 27280  005DEE  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 27281  005DF0  0E00               	movlw	high ethernetController_writeDestinationMACAddress@opcode
 27282  005DF2  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 27283  005DF4  EC50  F031         	call	_enc424j600_writeSPI	;wreg free
 27284                           
 27285                           ;ENC424J600.c: 236: for (uint8_t i = 0; i < 6; i++)
 27286  005DF8  0E00               	movlw	0
 27287  005DFA  0100               	movlb	0	; () banked
 27288  005DFC  6F85               	movwf	ethernetController_writeDestinationMACAddress@i_640& (0+255),b
 27289  005DFE                     l9834:
 27290                           
 27291                           ; BSR set to: 0
 27292  005DFE  0E05               	movlw	5
 27293  005E00  6585               	cpfsgt	ethernetController_writeDestinationMACAddress@i_640& (0+255),b
 27294  005E02  D001               	goto	l142
 27295  005E04  D00D               	goto	u11180
 27296  005E06                     l142:
 27297                           
 27298                           ; BSR set to: 0
 27299                           ;ENC424J600.c: 237: enc424j600_writeSPI(&data[i]);
 27300                           
 27301                           ; BSR set to: 0
 27302  005E06  5185               	movf	ethernetController_writeDestinationMACAddress@i_640& (0+255),w,b
 27303  005E08  0D01               	mullw	1
 27304  005E0A  0E7E               	movlw	low ethernetController_writeDestinationMACAddress@data
 27305  005E0C  24F3               	addwf	prodl,w,c
 27306  005E0E  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 27307  005E10  0E00               	movlw	high ethernetController_writeDestinationMACAddress@data
 27308  005E12  20F4               	addwfc	prodh,w,c
 27309  005E14  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 27310  005E16  EC50  F031         	call	_enc424j600_writeSPI	;wreg free
 27311  005E1A  0100               	movlb	0	; () banked
 27312  005E1C  2B85               	incf	ethernetController_writeDestinationMACAddress@i_640& (0+255),f,b
 27313  005E1E  D7EF               	goto	l9834
 27314  005E20                     u11180:
 27315                           
 27316                           ; BSR set to: 0
 27317                           ;ENC424J600.c: 238: PORTBbits.RB4=1;
 27318  005E20  8881               	bsf	3969,4,c	;volatile
 27319                           
 27320                           ; BSR set to: 0
 27321  005E22  0012               	return		;funcret
 27322  005E24                     __end_of_ethernetController_writeDestinationMACAddress:
 27323                           	opt stack 0
 27324                           tblptru	equ	0xFF8
 27325                           tblptrh	equ	0xFF7
 27326                           tblptrl	equ	0xFF6
 27327                           tablat	equ	0xFF5
 27328                           prodh	equ	0xFF4
 27329                           prodl	equ	0xFF3
 27330                           intcon	equ	0xFF2
 27331                           intcon3	equ	0xFF0
 27332                           indf0	equ	0xFEF
 27333                           postinc0	equ	0xFEE
 27334                           plusw0	equ	0xFEB
 27335                           fsr0h	equ	0xFEA
 27336                           fsr0l	equ	0xFE9
 27337                           wreg	equ	0xFE8
 27338                           indf1	equ	0xFE7
 27339                           postinc1	equ	0xFE6
 27340                           postdec1	equ	0xFE5
 27341                           plusw1	equ	0xFE3
 27342                           fsr1h	equ	0xFE2
 27343                           fsr1l	equ	0xFE1
 27344                           indf2	equ	0xFDF
 27345                           postinc2	equ	0xFDE
 27346                           postdec2	equ	0xFDD
 27347                           plusw2	equ	0xFDB
 27348                           fsr2h	equ	0xFDA
 27349                           fsr2l	equ	0xFD9
 27350                           status	equ	0xFD8
 27351                           
 27352 ;; *************** function _ethernetController_streamToTransmitBuffer *****************
 27353 ;; Defined at:
 27354 ;;		line 208 in file "src/enc424j600/ENC424J600.c"
 27355 ;; Parameters:    Size  Location     Type
 27356 ;;  data            1    wreg     unsigned char 
 27357 ;;  field           9   15[BANK0 ] struct memoryField
 27358 ;; Auto vars:     Size  Location     Type
 27359 ;;  data            1   28[BANK0 ] unsigned char 
 27360 ;;  opcode          1   29[BANK0 ] unsigned char 
 27361 ;; Return value:  Size  Location     Type
 27362 ;;                  1    wreg      void 
 27363 ;; Registers used:
 27364 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 27365 ;; Tracked objects:
 27366 ;;		On entry : 0/0
 27367 ;;		On exit  : 0/0
 27368 ;;		Unchanged: 0/0
 27369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 27370 ;;      Params:         0       9       0       0       0       0       0       0       0
 27371 ;;      Locals:         0       2       0       0       0       0       0       0       0
 27372 ;;      Temps:          0       4       0       0       0       0       0       0       0
 27373 ;;      Totals:         0      15       0       0       0       0       0       0       0
 27374 ;;Total ram usage:       15 bytes
 27375 ;; Hardware stack levels used:    1
 27376 ;; Hardware stack levels required when called:    7
 27377 ;; This function calls:
 27378 ;;		_enc424j600_setGPDATAWritePointer
 27379 ;;		_enc424j600_writeSPI
 27380 ;; This function is called by:
 27381 ;;		_arp_send
 27382 ;;		_ipv4_streamToTransmissionBuffer
 27383 ;; This function uses a non-reentrant model
 27384 ;;
 27385                           
 27386                           	psect	text109
 27387  005F1C                     __ptext109:
 27388                           	opt stack 0
 27389  005F1C                     _ethernetController_streamToTransmitBuffer:
 27390                           	opt stack 21
 27391                           
 27392                           ; BSR set to: 0
 27393                           ;incstack = 0
 27394                           ;ethernetController_streamToTransmitBuffer@data stored from wreg
 27395  005F1C  0100               	movlb	0	; () banked
 27396  005F1E  6F7C               	movwf	ethernetController_streamToTransmitBuffer@data& (0+255),b
 27397                           
 27398                           ;ENC424J600.c: 209: uint8_t opcode;
 27399                           ;ENC424J600.c: 210: uint16_t static pointer = 0;
 27400                           ;ENC424J600.c: 211: if (pointer == 0) {
 27401  005F20  5038               	movf	ethernetController_streamToTransmitBuffer@pointer,w,c
 27402  005F22  1039               	iorwf	ethernetController_streamToTransmitBuffer@pointer+1,w,c
 27403  005F24  A4D8               	btfss	status,2,c
 27404  005F26  D010               	goto	l134
 27405                           
 27406                           ;ENC424J600.c: 212: enc424j600_setGPDATAWritePointer(field.start);
 27407  005F28  C06F  F06A         	movff	ethernetController_streamToTransmitBuffer@field,enc424j600_setGPDATAWritePointer@
      +                          addr
 27408  005F2C  C070  F06B         	movff	ethernetController_streamToTransmitBuffer@field+1,enc424j600_setGPDATAWritePointe
      +                          r@addr+1
 27409  005F30  EC63  F034         	call	_enc424j600_setGPDATAWritePointer	;wreg free
 27410                           
 27411                           ;ENC424J600.c: 213: opcode = 0x2A;
 27412  005F34  0E2A               	movlw	42
 27413  005F36  0100               	movlb	0	; () banked
 27414  005F38  6F7D               	movwf	ethernetController_streamToTransmitBuffer@opcode& (0+255),b
 27415                           
 27416                           ; BSR set to: 0
 27417                           ;ENC424J600.c: 214: PORTBbits.RB4=0;
 27418  005F3A  9881               	bcf	3969,4,c	;volatile
 27419                           
 27420                           ; BSR set to: 0
 27421                           ;ENC424J600.c: 215: enc424j600_writeSPI(&opcode);
 27422  005F3C  0E7D               	movlw	low ethernetController_streamToTransmitBuffer@opcode
 27423  005F3E  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 27424  005F40  0E00               	movlw	high ethernetController_streamToTransmitBuffer@opcode
 27425  005F42  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 27426  005F44  EC50  F031         	call	_enc424j600_writeSPI	;wreg free
 27427  005F48                     l134:
 27428                           
 27429                           ;ENC424J600.c: 216: }
 27430                           ;ENC424J600.c: 218: enc424j600_writeSPI(&data);
 27431  005F48  0E7C               	movlw	low ethernetController_streamToTransmitBuffer@data
 27432  005F4A  0100               	movlb	0	; () banked
 27433  005F4C  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 27434  005F4E  0E00               	movlw	high ethernetController_streamToTransmitBuffer@data
 27435  005F50  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 27436  005F52  EC50  F031         	call	_enc424j600_writeSPI	;wreg free
 27437                           
 27438                           ;ENC424J600.c: 220: if (pointer == field.length - 1) {
 27439  005F56  0EFF               	movlw	255
 27440  005F58  0100               	movlb	0	; () banked
 27441  005F5A  6F78               	movwf	??_ethernetController_streamToTransmitBuffer& (0+255),b
 27442  005F5C  0EFF               	movlw	255
 27443  005F5E  6F79               	movwf	(??_ethernetController_streamToTransmitBuffer+1)& (0+255),b
 27444  005F60  EE20  F073         	lfsr	2,ethernetController_streamToTransmitBuffer@field+4
 27445  005F64  CFDE F07A          	movff	postinc2,??_ethernetController_streamToTransmitBuffer+2
 27446  005F68  CFDD F07B          	movff	postdec2,??_ethernetController_streamToTransmitBuffer+3
 27447  005F6C  5178               	movf	??_ethernetController_streamToTransmitBuffer& (0+255),w,b
 27448  005F6E  277A               	addwf	(??_ethernetController_streamToTransmitBuffer+2)& (0+255),f,b
 27449  005F70  5179               	movf	(??_ethernetController_streamToTransmitBuffer+1)& (0+255),w,b
 27450  005F72  237B               	addwfc	(??_ethernetController_streamToTransmitBuffer+3)& (0+255),f,b
 27451  005F74  5038               	movf	ethernetController_streamToTransmitBuffer@pointer,w,c
 27452  005F76  197A               	xorwf	(??_ethernetController_streamToTransmitBuffer+2)& (0+255),w,b
 27453  005F78  E10A               	bnz	l10050
 27454  005F7A  5039               	movf	ethernetController_streamToTransmitBuffer@pointer+1,w,c
 27455  005F7C  197B               	xorwf	(??_ethernetController_streamToTransmitBuffer+3)& (0+255),w,b
 27456  005F7E  A4D8               	btfss	status,2,c
 27457  005F80  D006               	goto	l135
 27458                           
 27459                           ; BSR set to: 0
 27460                           ;ENC424J600.c: 221: PORTBbits.RB4=1;
 27461  005F82  8881               	bsf	3969,4,c	;volatile
 27462                           
 27463                           ; BSR set to: 0
 27464                           ;ENC424J600.c: 222: pointer = 0;
 27465  005F84  0E00               	movlw	0
 27466  005F86  6E39               	movwf	ethernetController_streamToTransmitBuffer@pointer+1,c
 27467  005F88  0E00               	movlw	0
 27468  005F8A  6E38               	movwf	ethernetController_streamToTransmitBuffer@pointer,c
 27469                           
 27470                           ;ENC424J600.c: 223: } else {
 27471  005F8C  0012               	return	
 27472  005F8E                     l135:
 27473  005F8E                     l10050:
 27474                           
 27475                           ; BSR set to: 0
 27476                           ;ENC424J600.c: 224: pointer++;
 27477  005F8E  4A38               	infsnz	ethernetController_streamToTransmitBuffer@pointer,f,c
 27478  005F90  2A39               	incf	ethernetController_streamToTransmitBuffer@pointer+1,f,c
 27479  005F92  0012               	return	
 27480  005F94                     __end_of_ethernetController_streamToTransmitBuffer:
 27481                           	opt stack 0
 27482                           tblptru	equ	0xFF8
 27483                           tblptrh	equ	0xFF7
 27484                           tblptrl	equ	0xFF6
 27485                           tablat	equ	0xFF5
 27486                           prodh	equ	0xFF4
 27487                           prodl	equ	0xFF3
 27488                           intcon	equ	0xFF2
 27489                           intcon3	equ	0xFF0
 27490                           indf0	equ	0xFEF
 27491                           postinc0	equ	0xFEE
 27492                           plusw0	equ	0xFEB
 27493                           fsr0h	equ	0xFEA
 27494                           fsr0l	equ	0xFE9
 27495                           wreg	equ	0xFE8
 27496                           indf1	equ	0xFE7
 27497                           postinc1	equ	0xFE6
 27498                           postdec1	equ	0xFE5
 27499                           plusw1	equ	0xFE3
 27500                           fsr1h	equ	0xFE2
 27501                           fsr1l	equ	0xFE1
 27502                           indf2	equ	0xFDF
 27503                           postinc2	equ	0xFDE
 27504                           postdec2	equ	0xFDD
 27505                           plusw2	equ	0xFDB
 27506                           fsr2h	equ	0xFDA
 27507                           fsr2l	equ	0xFD9
 27508                           status	equ	0xFD8
 27509                           
 27510 ;; *************** function _enc424j600_setGPDATAWritePointer *****************
 27511 ;; Defined at:
 27512 ;;		line 609 in file "src/enc424j600/ENC424J600.c"
 27513 ;; Parameters:    Size  Location     Type
 27514 ;;  addr            2   10[BANK0 ] unsigned int 
 27515 ;; Auto vars:     Size  Location     Type
 27516 ;;  highByte        1   14[BANK0 ] unsigned char 
 27517 ;;  lowByte         1   13[BANK0 ] unsigned char 
 27518 ;;  opcode          1   12[BANK0 ] unsigned char 
 27519 ;; Return value:  Size  Location     Type
 27520 ;;                  1    wreg      void 
 27521 ;; Registers used:
 27522 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 27523 ;; Tracked objects:
 27524 ;;		On entry : 0/0
 27525 ;;		On exit  : 0/0
 27526 ;;		Unchanged: 0/0
 27527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 27528 ;;      Params:         0       2       0       0       0       0       0       0       0
 27529 ;;      Locals:         0       3       0       0       0       0       0       0       0
 27530 ;;      Temps:          0       0       0       0       0       0       0       0       0
 27531 ;;      Totals:         0       5       0       0       0       0       0       0       0
 27532 ;;Total ram usage:        5 bytes
 27533 ;; Hardware stack levels used:    1
 27534 ;; Hardware stack levels required when called:    6
 27535 ;; This function calls:
 27536 ;;		_enc424j600_writeSPI
 27537 ;; This function is called by:
 27538 ;;		_ethernetController_streamToTransmitBuffer
 27539 ;;		_ethernetController_writeDestinationMACAddress
 27540 ;;		_ethernetController_writeEtherTypeFieldToBuffer
 27541 ;; This function uses a non-reentrant model
 27542 ;;
 27543                           
 27544                           	psect	text110
 27545  0068C6                     __ptext110:
 27546                           	opt stack 0
 27547  0068C6                     _enc424j600_setGPDATAWritePointer:
 27548                           	opt stack 20
 27549                           
 27550                           ;ENC424J600.c: 610: uint8_t opcode = 0x6C;
 27551                           
 27552                           ; BSR set to: 0
 27553                           ;incstack = 0
 27554  0068C6  0E6C               	movlw	108
 27555  0068C8  0100               	movlb	0	; () banked
 27556  0068CA  6F6C               	movwf	enc424j600_setGPDATAWritePointer@opcode& (0+255),b
 27557                           
 27558                           ; BSR set to: 0
 27559                           ;ENC424J600.c: 611: uint8_t lowByte = addr & 0x00ff;
 27560  0068CC  C06A  F06D         	movff	enc424j600_setGPDATAWritePointer@addr,enc424j600_setGPDATAWritePointer@lowByte
 27561                           
 27562                           ;ENC424J600.c: 612: uint8_t highByte = (addr & 0xff00) >> 8;
 27563  0068D0  516B               	movf	(enc424j600_setGPDATAWritePointer@addr+1)& (0+255),w,b
 27564  0068D2  6F6E               	movwf	enc424j600_setGPDATAWritePointer@highByte& (0+255),b
 27565                           
 27566                           ; BSR set to: 0
 27567                           ;ENC424J600.c: 613: PORTBbits.RB4=0;
 27568  0068D4  9881               	bcf	3969,4,c	;volatile
 27569                           
 27570                           ; BSR set to: 0
 27571                           ;ENC424J600.c: 614: enc424j600_writeSPI(&opcode);
 27572  0068D6  0E6C               	movlw	low enc424j600_setGPDATAWritePointer@opcode
 27573  0068D8  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 27574  0068DA  0E00               	movlw	high enc424j600_setGPDATAWritePointer@opcode
 27575  0068DC  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 27576  0068DE  EC50  F031         	call	_enc424j600_writeSPI	;wreg free
 27577                           
 27578                           ;ENC424J600.c: 615: enc424j600_writeSPI(&lowByte);
 27579  0068E2  0E6D               	movlw	low enc424j600_setGPDATAWritePointer@lowByte
 27580  0068E4  0100               	movlb	0	; () banked
 27581  0068E6  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 27582  0068E8  0E00               	movlw	high enc424j600_setGPDATAWritePointer@lowByte
 27583  0068EA  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 27584  0068EC  EC50  F031         	call	_enc424j600_writeSPI	;wreg free
 27585                           
 27586                           ;ENC424J600.c: 616: enc424j600_writeSPI(&highByte);
 27587  0068F0  0E6E               	movlw	low enc424j600_setGPDATAWritePointer@highByte
 27588  0068F2  0100               	movlb	0	; () banked
 27589  0068F4  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 27590  0068F6  0E00               	movlw	high enc424j600_setGPDATAWritePointer@highByte
 27591  0068F8  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 27592  0068FA  EC50  F031         	call	_enc424j600_writeSPI	;wreg free
 27593                           
 27594                           ;ENC424J600.c: 617: PORTBbits.RB4=1;
 27595  0068FE  8881               	bsf	3969,4,c	;volatile
 27596  006900  0012               	return		;funcret
 27597  006902                     __end_of_enc424j600_setGPDATAWritePointer:
 27598                           	opt stack 0
 27599                           tblptru	equ	0xFF8
 27600                           tblptrh	equ	0xFF7
 27601                           tblptrl	equ	0xFF6
 27602                           tablat	equ	0xFF5
 27603                           prodh	equ	0xFF4
 27604                           prodl	equ	0xFF3
 27605                           intcon	equ	0xFF2
 27606                           intcon3	equ	0xFF0
 27607                           indf0	equ	0xFEF
 27608                           postinc0	equ	0xFEE
 27609                           plusw0	equ	0xFEB
 27610                           fsr0h	equ	0xFEA
 27611                           fsr0l	equ	0xFE9
 27612                           wreg	equ	0xFE8
 27613                           indf1	equ	0xFE7
 27614                           postinc1	equ	0xFE6
 27615                           postdec1	equ	0xFE5
 27616                           plusw1	equ	0xFE3
 27617                           fsr1h	equ	0xFE2
 27618                           fsr1l	equ	0xFE1
 27619                           indf2	equ	0xFDF
 27620                           postinc2	equ	0xFDE
 27621                           postdec2	equ	0xFDD
 27622                           plusw2	equ	0xFDB
 27623                           fsr2h	equ	0xFDA
 27624                           fsr2l	equ	0xFD9
 27625                           status	equ	0xFD8
 27626                           
 27627 ;; *************** function _ethernetController_sendPacket *****************
 27628 ;; Defined at:
 27629 ;;		line 201 in file "src/enc424j600/ENC424J600.c"
 27630 ;; Parameters:    Size  Location     Type
 27631 ;;  field           9   18[BANK0 ] struct memoryField
 27632 ;; Auto vars:     Size  Location     Type
 27633 ;;		None
 27634 ;; Return value:  Size  Location     Type
 27635 ;;                  1    wreg      void 
 27636 ;; Registers used:
 27637 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 27638 ;; Tracked objects:
 27639 ;;		On entry : 0/0
 27640 ;;		On exit  : 0/0
 27641 ;;		Unchanged: 0/0
 27642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 27643 ;;      Params:         0       9       0       0       0       0       0       0       0
 27644 ;;      Locals:         0       0       0       0       0       0       0       0       0
 27645 ;;      Temps:          0       0       0       0       0       0       0       0       0
 27646 ;;      Totals:         0       9       0       0       0       0       0       0       0
 27647 ;;Total ram usage:        9 bytes
 27648 ;; Hardware stack levels used:    1
 27649 ;; Hardware stack levels required when called:    8
 27650 ;; This function calls:
 27651 ;;		_enc424j600_setTXLength
 27652 ;;		_enc424j600_setTXStartAddress
 27653 ;;		_enc424j600_writeSingleByte
 27654 ;;		_memory_txFrameClear
 27655 ;; This function is called by:
 27656 ;;		_arp_send
 27657 ;;		_ipv4_sendFrame
 27658 ;; This function uses a non-reentrant model
 27659 ;;
 27660                           
 27661                           	psect	text111
 27662  006BFA                     __ptext111:
 27663                           	opt stack 0
 27664  006BFA                     _ethernetController_sendPacket:
 27665                           	opt stack 20
 27666                           
 27667                           ;ENC424J600.c: 202: enc424j600_setTXStartAddress(field.start);
 27668                           
 27669                           ;incstack = 0
 27670  006BFA  C072  F06E         	movff	ethernetController_sendPacket@field,enc424j600_setTXStartAddress@addr
 27671  006BFE  C073  F06F         	movff	ethernetController_sendPacket@field+1,enc424j600_setTXStartAddress@addr+1
 27672  006C02  ECAB  F035         	call	_enc424j600_setTXStartAddress	;wreg free
 27673                           
 27674                           ;ENC424J600.c: 203: enc424j600_setTXLength(field.length);
 27675  006C06  C076  F06E         	movff	ethernetController_sendPacket@field+4,enc424j600_setTXLength@len
 27676  006C0A  C077  F06F         	movff	ethernetController_sendPacket@field+5,enc424j600_setTXLength@len+1
 27677  006C0E  ECC0  F035         	call	_enc424j600_setTXLength	;wreg free
 27678                           
 27679                           ;ENC424J600.c: 204: enc424j600_writeSingleByte(0b11010100);
 27680  006C12  0ED4               	movlw	212
 27681  006C14  ECC5  F036         	call	_enc424j600_writeSingleByte
 27682                           
 27683                           ;ENC424J600.c: 205: memory_txFrameClear(field.index);
 27684  006C18  0100               	movlb	0	; () banked
 27685  006C1A  517A               	movf	(ethernetController_sendPacket@field+8)& (0+255),w,b
 27686  006C1C  EC4A  F036         	call	_memory_txFrameClear
 27687  006C20  0012               	return		;funcret
 27688  006C22                     __end_of_ethernetController_sendPacket:
 27689                           	opt stack 0
 27690                           tblptru	equ	0xFF8
 27691                           tblptrh	equ	0xFF7
 27692                           tblptrl	equ	0xFF6
 27693                           tablat	equ	0xFF5
 27694                           prodh	equ	0xFF4
 27695                           prodl	equ	0xFF3
 27696                           intcon	equ	0xFF2
 27697                           intcon3	equ	0xFF0
 27698                           indf0	equ	0xFEF
 27699                           postinc0	equ	0xFEE
 27700                           plusw0	equ	0xFEB
 27701                           fsr0h	equ	0xFEA
 27702                           fsr0l	equ	0xFE9
 27703                           wreg	equ	0xFE8
 27704                           indf1	equ	0xFE7
 27705                           postinc1	equ	0xFE6
 27706                           postdec1	equ	0xFE5
 27707                           plusw1	equ	0xFE3
 27708                           fsr1h	equ	0xFE2
 27709                           fsr1l	equ	0xFE1
 27710                           indf2	equ	0xFDF
 27711                           postinc2	equ	0xFDE
 27712                           postdec2	equ	0xFDD
 27713                           plusw2	equ	0xFDB
 27714                           fsr2h	equ	0xFDA
 27715                           fsr2l	equ	0xFD9
 27716                           status	equ	0xFD8
 27717                           
 27718 ;; *************** function _memory_txFrameClear *****************
 27719 ;; Defined at:
 27720 ;;		line 222 in file "src/mem/memoryController.c"
 27721 ;; Parameters:    Size  Location     Type
 27722 ;;  index           1    wreg     unsigned char 
 27723 ;; Auto vars:     Size  Location     Type
 27724 ;;  index           1    0[BANK0 ] unsigned char 
 27725 ;; Return value:  Size  Location     Type
 27726 ;;                  1    wreg      void 
 27727 ;; Registers used:
 27728 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 27729 ;; Tracked objects:
 27730 ;;		On entry : 0/0
 27731 ;;		On exit  : 0/0
 27732 ;;		Unchanged: 0/0
 27733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 27734 ;;      Params:         0       0       0       0       0       0       0       0       0
 27735 ;;      Locals:         0       1       0       0       0       0       0       0       0
 27736 ;;      Temps:          0       0       0       0       0       0       0       0       0
 27737 ;;      Totals:         0       1       0       0       0       0       0       0       0
 27738 ;;Total ram usage:        1 bytes
 27739 ;; Hardware stack levels used:    1
 27740 ;; Hardware stack levels required when called:    4
 27741 ;; This function calls:
 27742 ;;		Nothing
 27743 ;; This function is called by:
 27744 ;;		_ethernetController_sendPacket
 27745 ;; This function uses a non-reentrant model
 27746 ;;
 27747                           
 27748                           	psect	text112
 27749  006C94                     __ptext112:
 27750                           	opt stack 0
 27751  006C94                     _memory_txFrameClear:
 27752                           	opt stack 23
 27753                           
 27754                           ;incstack = 0
 27755                           ;memory_txFrameClear@index stored from wreg
 27756  006C94  0100               	movlb	0	; () banked
 27757  006C96  6F60               	movwf	memory_txFrameClear@index& (0+255),b
 27758                           
 27759                           ;memoryController.c: 223: occupiedMemory[index].fIsAssigned = 0;
 27760  006C98  0100               	movlb	0	; () banked
 27761  006C9A  5160               	movf	memory_txFrameClear@index& (0+255),w,b
 27762  006C9C  0D09               	mullw	9
 27763  006C9E  0E06               	movlw	6
 27764  006CA0  26F3               	addwf	prodl,f,c
 27765  006CA2  0E00               	movlw	0
 27766  006CA4  22F4               	addwfc	prodh,f,c
 27767  006CA6  0E00               	movlw	low _occupiedMemory
 27768  006CA8  24F3               	addwf	prodl,w,c
 27769  006CAA  6ED9               	movwf	fsr2l,c
 27770  006CAC  0E03               	movlw	high _occupiedMemory
 27771  006CAE  20F4               	addwfc	prodh,w,c
 27772  006CB0  6EDA               	movwf	fsr2h,c
 27773  006CB2  0E00               	movlw	0
 27774  006CB4  6EDF               	movwf	indf2,c
 27775                           
 27776                           ; BSR set to: 0
 27777  006CB6  0012               	return		;funcret
 27778  006CB8                     __end_of_memory_txFrameClear:
 27779                           	opt stack 0
 27780                           tblptru	equ	0xFF8
 27781                           tblptrh	equ	0xFF7
 27782                           tblptrl	equ	0xFF6
 27783                           tablat	equ	0xFF5
 27784                           prodh	equ	0xFF4
 27785                           prodl	equ	0xFF3
 27786                           intcon	equ	0xFF2
 27787                           intcon3	equ	0xFF0
 27788                           indf0	equ	0xFEF
 27789                           postinc0	equ	0xFEE
 27790                           plusw0	equ	0xFEB
 27791                           fsr0h	equ	0xFEA
 27792                           fsr0l	equ	0xFE9
 27793                           wreg	equ	0xFE8
 27794                           indf1	equ	0xFE7
 27795                           postinc1	equ	0xFE6
 27796                           postdec1	equ	0xFE5
 27797                           plusw1	equ	0xFE3
 27798                           fsr1h	equ	0xFE2
 27799                           fsr1l	equ	0xFE1
 27800                           indf2	equ	0xFDF
 27801                           postinc2	equ	0xFDE
 27802                           postdec2	equ	0xFDD
 27803                           plusw2	equ	0xFDB
 27804                           fsr2h	equ	0xFDA
 27805                           fsr2l	equ	0xFD9
 27806                           status	equ	0xFD8
 27807                           
 27808 ;; *************** function _enc424j600_writeSingleByte *****************
 27809 ;; Defined at:
 27810 ;;		line 512 in file "src/enc424j600/ENC424J600.c"
 27811 ;; Parameters:    Size  Location     Type
 27812 ;;  opcode          1    wreg     unsigned char 
 27813 ;; Auto vars:     Size  Location     Type
 27814 ;;  opcode          1   10[BANK0 ] unsigned char 
 27815 ;; Return value:  Size  Location     Type
 27816 ;;                  1    wreg      void 
 27817 ;; Registers used:
 27818 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 27819 ;; Tracked objects:
 27820 ;;		On entry : 0/0
 27821 ;;		On exit  : 0/0
 27822 ;;		Unchanged: 0/0
 27823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 27824 ;;      Params:         0       0       0       0       0       0       0       0       0
 27825 ;;      Locals:         0       1       0       0       0       0       0       0       0
 27826 ;;      Temps:          0       0       0       0       0       0       0       0       0
 27827 ;;      Totals:         0       1       0       0       0       0       0       0       0
 27828 ;;Total ram usage:        1 bytes
 27829 ;; Hardware stack levels used:    1
 27830 ;; Hardware stack levels required when called:    6
 27831 ;; This function calls:
 27832 ;;		_enc424j600_writeSPI
 27833 ;; This function is called by:
 27834 ;;		_ethernetController_softReset
 27835 ;;		_ethernetController_sendPacket
 27836 ;;		_ethernetController_dropPacket
 27837 ;;		_enc424j600_enableReception
 27838 ;;		_enc424j600_disableReception
 27839 ;; This function uses a non-reentrant model
 27840 ;;
 27841                           
 27842                           	psect	text113
 27843  006D8A                     __ptext113:
 27844                           	opt stack 0
 27845  006D8A                     _enc424j600_writeSingleByte:
 27846                           	opt stack 21
 27847                           
 27848                           ; BSR set to: 0
 27849                           ;incstack = 0
 27850                           ;enc424j600_writeSingleByte@opcode stored from wreg
 27851  006D8A  0100               	movlb	0	; () banked
 27852  006D8C  6F6A               	movwf	enc424j600_writeSingleByte@opcode& (0+255),b
 27853                           
 27854                           ;ENC424J600.c: 513: PORTBbits.RB4=0;
 27855  006D8E  9881               	bcf	3969,4,c	;volatile
 27856                           
 27857                           ;ENC424J600.c: 514: enc424j600_writeSPI(&opcode);
 27858  006D90  0E6A               	movlw	low enc424j600_writeSingleByte@opcode
 27859  006D92  0100               	movlb	0	; () banked
 27860  006D94  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 27861  006D96  0E00               	movlw	high enc424j600_writeSingleByte@opcode
 27862  006D98  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 27863  006D9A  EC50  F031         	call	_enc424j600_writeSPI	;wreg free
 27864                           
 27865                           ;ENC424J600.c: 515: PORTBbits.RB4=1;
 27866  006D9E  8881               	bsf	3969,4,c	;volatile
 27867  006DA0  0012               	return		;funcret
 27868  006DA2                     __end_of_enc424j600_writeSingleByte:
 27869                           	opt stack 0
 27870                           tblptru	equ	0xFF8
 27871                           tblptrh	equ	0xFF7
 27872                           tblptrl	equ	0xFF6
 27873                           tablat	equ	0xFF5
 27874                           prodh	equ	0xFF4
 27875                           prodl	equ	0xFF3
 27876                           intcon	equ	0xFF2
 27877                           intcon3	equ	0xFF0
 27878                           indf0	equ	0xFEF
 27879                           postinc0	equ	0xFEE
 27880                           plusw0	equ	0xFEB
 27881                           fsr0h	equ	0xFEA
 27882                           fsr0l	equ	0xFE9
 27883                           wreg	equ	0xFE8
 27884                           indf1	equ	0xFE7
 27885                           postinc1	equ	0xFE6
 27886                           postdec1	equ	0xFE5
 27887                           plusw1	equ	0xFE3
 27888                           fsr1h	equ	0xFE2
 27889                           fsr1l	equ	0xFE1
 27890                           indf2	equ	0xFDF
 27891                           postinc2	equ	0xFDE
 27892                           postdec2	equ	0xFDD
 27893                           plusw2	equ	0xFDB
 27894                           fsr2h	equ	0xFDA
 27895                           fsr2l	equ	0xFD9
 27896                           status	equ	0xFD8
 27897                           
 27898 ;; *************** function _enc424j600_setTXStartAddress *****************
 27899 ;; Defined at:
 27900 ;;		line 602 in file "src/enc424j600/ENC424J600.c"
 27901 ;; Parameters:    Size  Location     Type
 27902 ;;  addr            2   14[BANK0 ] unsigned int 
 27903 ;; Auto vars:     Size  Location     Type
 27904 ;;  highByte        1   17[BANK0 ] unsigned char 
 27905 ;;  lowByte         1   16[BANK0 ] unsigned char 
 27906 ;; Return value:  Size  Location     Type
 27907 ;;                  1    wreg      void 
 27908 ;; Registers used:
 27909 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 27910 ;; Tracked objects:
 27911 ;;		On entry : 0/0
 27912 ;;		On exit  : 0/0
 27913 ;;		Unchanged: 0/0
 27914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 27915 ;;      Params:         0       2       0       0       0       0       0       0       0
 27916 ;;      Locals:         0       2       0       0       0       0       0       0       0
 27917 ;;      Temps:          0       0       0       0       0       0       0       0       0
 27918 ;;      Totals:         0       4       0       0       0       0       0       0       0
 27919 ;;Total ram usage:        4 bytes
 27920 ;; Hardware stack levels used:    1
 27921 ;; Hardware stack levels required when called:    7
 27922 ;; This function calls:
 27923 ;;		_enc424j600_writeControlRegisterUnbanked
 27924 ;; This function is called by:
 27925 ;;		_ethernetController_sendPacket
 27926 ;; This function uses a non-reentrant model
 27927 ;;
 27928                           
 27929                           	psect	text114
 27930  006B56                     __ptext114:
 27931                           	opt stack 0
 27932  006B56                     _enc424j600_setTXStartAddress:
 27933                           	opt stack 20
 27934                           
 27935                           ;ENC424J600.c: 603: uint8_t lowByte = addr & 0xff;
 27936                           
 27937                           ;incstack = 0
 27938  006B56  C06E  F070         	movff	enc424j600_setTXStartAddress@addr,enc424j600_setTXStartAddress@lowByte
 27939                           
 27940                           ;ENC424J600.c: 604: uint8_t highByte = (addr & 0xff00) >> 8;
 27941  006B5A  0100               	movlb	0	; () banked
 27942  006B5C  516F               	movf	(enc424j600_setTXStartAddress@addr+1)& (0+255),w,b
 27943  006B5E  6F71               	movwf	enc424j600_setTXStartAddress@highByte& (0+255),b
 27944                           
 27945                           ; BSR set to: 0
 27946                           ;ENC424J600.c: 605: enc424j600_writeControlRegisterUnbanked(0x00 + 0x00, &lowByte);
 27947  006B60  0E70               	movlw	low enc424j600_setTXStartAddress@lowByte
 27948  006B62  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 27949  006B64  0E00               	movlw	high enc424j600_setTXStartAddress@lowByte
 27950  006B66  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 27951  006B68  0E00               	movlw	0
 27952  006B6A  ECF2  F034         	call	_enc424j600_writeControlRegisterUnbanked
 27953                           
 27954                           ;ENC424J600.c: 606: enc424j600_writeControlRegisterUnbanked(0x01 + 0x00, &highByte);
 27955  006B6E  0E71               	movlw	low enc424j600_setTXStartAddress@highByte
 27956  006B70  0100               	movlb	0	; () banked
 27957  006B72  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 27958  006B74  0E00               	movlw	high enc424j600_setTXStartAddress@highByte
 27959  006B76  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 27960  006B78  0E01               	movlw	1
 27961  006B7A  ECF2  F034         	call	_enc424j600_writeControlRegisterUnbanked
 27962  006B7E  0012               	return		;funcret
 27963  006B80                     __end_of_enc424j600_setTXStartAddress:
 27964                           	opt stack 0
 27965                           tblptru	equ	0xFF8
 27966                           tblptrh	equ	0xFF7
 27967                           tblptrl	equ	0xFF6
 27968                           tablat	equ	0xFF5
 27969                           prodh	equ	0xFF4
 27970                           prodl	equ	0xFF3
 27971                           intcon	equ	0xFF2
 27972                           intcon3	equ	0xFF0
 27973                           indf0	equ	0xFEF
 27974                           postinc0	equ	0xFEE
 27975                           plusw0	equ	0xFEB
 27976                           fsr0h	equ	0xFEA
 27977                           fsr0l	equ	0xFE9
 27978                           wreg	equ	0xFE8
 27979                           indf1	equ	0xFE7
 27980                           postinc1	equ	0xFE6
 27981                           postdec1	equ	0xFE5
 27982                           plusw1	equ	0xFE3
 27983                           fsr1h	equ	0xFE2
 27984                           fsr1l	equ	0xFE1
 27985                           indf2	equ	0xFDF
 27986                           postinc2	equ	0xFDE
 27987                           postdec2	equ	0xFDD
 27988                           plusw2	equ	0xFDB
 27989                           fsr2h	equ	0xFDA
 27990                           fsr2l	equ	0xFD9
 27991                           status	equ	0xFD8
 27992                           
 27993 ;; *************** function _enc424j600_setTXLength *****************
 27994 ;; Defined at:
 27995 ;;		line 577 in file "src/enc424j600/ENC424J600.c"
 27996 ;; Parameters:    Size  Location     Type
 27997 ;;  len             2   14[BANK0 ] unsigned int 
 27998 ;; Auto vars:     Size  Location     Type
 27999 ;;  highByte        1   17[BANK0 ] unsigned char 
 28000 ;;  lowByte         1   16[BANK0 ] unsigned char 
 28001 ;; Return value:  Size  Location     Type
 28002 ;;                  1    wreg      void 
 28003 ;; Registers used:
 28004 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 28005 ;; Tracked objects:
 28006 ;;		On entry : 0/0
 28007 ;;		On exit  : 0/0
 28008 ;;		Unchanged: 0/0
 28009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 28010 ;;      Params:         0       2       0       0       0       0       0       0       0
 28011 ;;      Locals:         0       2       0       0       0       0       0       0       0
 28012 ;;      Temps:          0       0       0       0       0       0       0       0       0
 28013 ;;      Totals:         0       4       0       0       0       0       0       0       0
 28014 ;;Total ram usage:        4 bytes
 28015 ;; Hardware stack levels used:    1
 28016 ;; Hardware stack levels required when called:    7
 28017 ;; This function calls:
 28018 ;;		_enc424j600_writeControlRegisterUnbanked
 28019 ;; This function is called by:
 28020 ;;		_ethernetController_sendPacket
 28021 ;; This function uses a non-reentrant model
 28022 ;;
 28023                           
 28024                           	psect	text115
 28025  006B80                     __ptext115:
 28026                           	opt stack 0
 28027  006B80                     _enc424j600_setTXLength:
 28028                           	opt stack 20
 28029                           
 28030                           ;ENC424J600.c: 578: uint8_t lowByte = len & 0x00ff;
 28031                           
 28032                           ;incstack = 0
 28033  006B80  C06E  F070         	movff	enc424j600_setTXLength@len,enc424j600_setTXLength@lowByte
 28034                           
 28035                           ;ENC424J600.c: 579: uint8_t highByte = len >> 8;
 28036  006B84  0100               	movlb	0	; () banked
 28037  006B86  516F               	movf	(enc424j600_setTXLength@len+1)& (0+255),w,b
 28038  006B88  6F71               	movwf	enc424j600_setTXLength@highByte& (0+255),b
 28039                           
 28040                           ; BSR set to: 0
 28041                           ;ENC424J600.c: 580: enc424j600_writeControlRegisterUnbanked(0x02 + 0x00, &lowByte);
 28042  006B8A  0E70               	movlw	low enc424j600_setTXLength@lowByte
 28043  006B8C  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 28044  006B8E  0E00               	movlw	high enc424j600_setTXLength@lowByte
 28045  006B90  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 28046  006B92  0E02               	movlw	2
 28047  006B94  ECF2  F034         	call	_enc424j600_writeControlRegisterUnbanked
 28048                           
 28049                           ;ENC424J600.c: 581: enc424j600_writeControlRegisterUnbanked(0x03 + 0x00, &highByte);
 28050  006B98  0E71               	movlw	low enc424j600_setTXLength@highByte
 28051  006B9A  0100               	movlb	0	; () banked
 28052  006B9C  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 28053  006B9E  0E00               	movlw	high enc424j600_setTXLength@highByte
 28054  006BA0  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 28055  006BA2  0E03               	movlw	3
 28056  006BA4  ECF2  F034         	call	_enc424j600_writeControlRegisterUnbanked
 28057  006BA8  0012               	return		;funcret
 28058  006BAA                     __end_of_enc424j600_setTXLength:
 28059                           	opt stack 0
 28060                           tblptru	equ	0xFF8
 28061                           tblptrh	equ	0xFF7
 28062                           tblptrl	equ	0xFF6
 28063                           tablat	equ	0xFF5
 28064                           prodh	equ	0xFF4
 28065                           prodl	equ	0xFF3
 28066                           intcon	equ	0xFF2
 28067                           intcon3	equ	0xFF0
 28068                           indf0	equ	0xFEF
 28069                           postinc0	equ	0xFEE
 28070                           plusw0	equ	0xFEB
 28071                           fsr0h	equ	0xFEA
 28072                           fsr0l	equ	0xFE9
 28073                           wreg	equ	0xFE8
 28074                           indf1	equ	0xFE7
 28075                           postinc1	equ	0xFE6
 28076                           postdec1	equ	0xFE5
 28077                           plusw1	equ	0xFE3
 28078                           fsr1h	equ	0xFE2
 28079                           fsr1l	equ	0xFE1
 28080                           indf2	equ	0xFDF
 28081                           postinc2	equ	0xFDE
 28082                           postdec2	equ	0xFDD
 28083                           plusw2	equ	0xFDB
 28084                           fsr2h	equ	0xFDA
 28085                           fsr2l	equ	0xFD9
 28086                           status	equ	0xFD8
 28087                           
 28088 ;; *************** function _enc424j600_writeControlRegisterUnbanked *****************
 28089 ;; Defined at:
 28090 ;;		line 518 in file "src/enc424j600/ENC424J600.c"
 28091 ;; Parameters:    Size  Location     Type
 28092 ;;  addr            1    wreg     unsigned char 
 28093 ;;  data            2   10[BANK0 ] PTR unsigned char 
 28094 ;;		 -> enc424j600_clearInterruptFlag@temp(1), enc424j600_disable@temp(1), enc424j600_enable@temp(1), enc424j600_disable
      +AutoMACInsertion@temp(1), 
 28095 ;;		 -> enc424j600_enableAutoMACInsertion@temp(1), enc424j600_setRXTailPointer@highByte(1), enc424j600_setRXTailPointer@
      +lowByte(1), enc424j600_setRXBufferStartAddress@highByte(1), 
 28096 ;;		 -> enc424j600_setRXBufferStartAddress@lowByte(1), enc424j600_setTXStartAddress@highByte(1), enc424j600_setTXStartAd
      +dress@lowByte(1), enc424j600_setTXLength@highByte(1), 
 28097 ;;		 -> enc424j600_setTXLength@lowByte(1), enc424j600_readPHYRegister@temp(1), enc424j600_readPHYRegister@unusedBits(1),
      + enc424j600_readPHYRegister@PHYaddress(1), 
 28098 ;;		 -> ethernetController_setLEDConfig@data(1), mac.address(6), ethernetController_setMacAddress@mac(6), ethernetContro
      +ller_softReset@dataToSend(2), 
 28099 ;; Auto vars:     Size  Location     Type
 28100 ;;  addr            1   12[BANK0 ] unsigned char 
 28101 ;;  opcode          1   13[BANK0 ] unsigned char 
 28102 ;; Return value:  Size  Location     Type
 28103 ;;                  1    wreg      void 
 28104 ;; Registers used:
 28105 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 28106 ;; Tracked objects:
 28107 ;;		On entry : 0/0
 28108 ;;		On exit  : 0/0
 28109 ;;		Unchanged: 0/0
 28110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 28111 ;;      Params:         0       2       0       0       0       0       0       0       0
 28112 ;;      Locals:         0       2       0       0       0       0       0       0       0
 28113 ;;      Temps:          0       0       0       0       0       0       0       0       0
 28114 ;;      Totals:         0       4       0       0       0       0       0       0       0
 28115 ;;Total ram usage:        4 bytes
 28116 ;; Hardware stack levels used:    1
 28117 ;; Hardware stack levels required when called:    6
 28118 ;; This function calls:
 28119 ;;		_enc424j600_writeSPI
 28120 ;; This function is called by:
 28121 ;;		_ethernetController_softReset
 28122 ;;		_ethernetController_setLEDConfig
 28123 ;;		_enc424j600_readPHYRegister
 28124 ;;		_enc424j600_setTXLength
 28125 ;;		_enc424j600_setTXStartAddress
 28126 ;;		_enc424j600_setRXBufferStartAddress
 28127 ;;		_enc424j600_setRXTailPointer
 28128 ;;		_enc424j600_enableAutoMACInsertion
 28129 ;;		_enc424j600_clearInterruptFlag
 28130 ;;		_ethernetController_setMacAddress
 28131 ;;		_enc424j600_disableAutoMACInsertion
 28132 ;;		_enc424j600_enable
 28133 ;;		_enc424j600_disable
 28134 ;; This function uses a non-reentrant model
 28135 ;;
 28136                           
 28137                           	psect	text116
 28138  0069E4                     __ptext116:
 28139                           	opt stack 0
 28140  0069E4                     _enc424j600_writeControlRegisterUnbanked:
 28141                           	opt stack 20
 28142                           
 28143                           ;incstack = 0
 28144                           ;enc424j600_writeControlRegisterUnbanked@addr stored from wreg
 28145  0069E4  0100               	movlb	0	; () banked
 28146  0069E6  6F6C               	movwf	enc424j600_writeControlRegisterUnbanked@addr& (0+255),b
 28147                           
 28148                           ;ENC424J600.c: 519: uint8_t opcode = 0x22;
 28149  0069E8  0E22               	movlw	34
 28150  0069EA  0100               	movlb	0	; () banked
 28151  0069EC  6F6D               	movwf	enc424j600_writeControlRegisterUnbanked@opcode& (0+255),b
 28152                           
 28153                           ; BSR set to: 0
 28154                           ;ENC424J600.c: 520: PORTBbits.RB4=0;
 28155  0069EE  9881               	bcf	3969,4,c	;volatile
 28156                           
 28157                           ; BSR set to: 0
 28158                           ;ENC424J600.c: 521: enc424j600_writeSPI(&opcode);
 28159  0069F0  0E6D               	movlw	low enc424j600_writeControlRegisterUnbanked@opcode
 28160  0069F2  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 28161  0069F4  0E00               	movlw	high enc424j600_writeControlRegisterUnbanked@opcode
 28162  0069F6  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 28163  0069F8  EC50  F031         	call	_enc424j600_writeSPI	;wreg free
 28164                           
 28165                           ;ENC424J600.c: 522: enc424j600_writeSPI(&addr);
 28166  0069FC  0E6C               	movlw	low enc424j600_writeControlRegisterUnbanked@addr
 28167  0069FE  0100               	movlb	0	; () banked
 28168  006A00  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 28169  006A02  0E00               	movlw	high enc424j600_writeControlRegisterUnbanked@addr
 28170  006A04  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 28171  006A06  EC50  F031         	call	_enc424j600_writeSPI	;wreg free
 28172                           
 28173                           ;ENC424J600.c: 523: enc424j600_writeSPI(data);
 28174  006A0A  C06A  F060         	movff	enc424j600_writeControlRegisterUnbanked@data,enc424j600_writeSPI@data
 28175  006A0E  C06B  F061         	movff	enc424j600_writeControlRegisterUnbanked@data+1,enc424j600_writeSPI@data+1
 28176  006A12  EC50  F031         	call	_enc424j600_writeSPI	;wreg free
 28177                           
 28178                           ;ENC424J600.c: 524: PORTBbits.RB4=1;
 28179  006A16  8881               	bsf	3969,4,c	;volatile
 28180  006A18  0012               	return		;funcret
 28181  006A1A                     __end_of_enc424j600_writeControlRegisterUnbanked:
 28182                           	opt stack 0
 28183                           tblptru	equ	0xFF8
 28184                           tblptrh	equ	0xFF7
 28185                           tblptrl	equ	0xFF6
 28186                           tablat	equ	0xFF5
 28187                           prodh	equ	0xFF4
 28188                           prodl	equ	0xFF3
 28189                           intcon	equ	0xFF2
 28190                           intcon3	equ	0xFF0
 28191                           indf0	equ	0xFEF
 28192                           postinc0	equ	0xFEE
 28193                           plusw0	equ	0xFEB
 28194                           fsr0h	equ	0xFEA
 28195                           fsr0l	equ	0xFE9
 28196                           wreg	equ	0xFE8
 28197                           indf1	equ	0xFE7
 28198                           postinc1	equ	0xFE6
 28199                           postdec1	equ	0xFE5
 28200                           plusw1	equ	0xFE3
 28201                           fsr1h	equ	0xFE2
 28202                           fsr1l	equ	0xFE1
 28203                           indf2	equ	0xFDF
 28204                           postinc2	equ	0xFDE
 28205                           postdec2	equ	0xFDD
 28206                           plusw2	equ	0xFDB
 28207                           fsr2h	equ	0xFDA
 28208                           fsr2l	equ	0xFD9
 28209                           status	equ	0xFD8
 28210                           
 28211 ;; *************** function _ethernetController_getSourceMACAddress *****************
 28212 ;; Defined at:
 28213 ;;		line 268 in file "src/enc424j600/ENC424J600.c"
 28214 ;; Parameters:    Size  Location     Type
 28215 ;;  field           9   15[BANK0 ] struct memoryField
 28216 ;; Auto vars:     Size  Location     Type
 28217 ;;  temp            1   31[BANK0 ] unsigned char 
 28218 ;;  i               1   32[BANK0 ] unsigned char 
 28219 ;;  sourceAddres    6   25[BANK0 ] struct macaddress
 28220 ;;  opcode          1   24[BANK0 ] unsigned char 
 28221 ;; Return value:  Size  Location     Type
 28222 ;;                  6   15[BANK0 ] struct macaddress
 28223 ;; Registers used:
 28224 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 28225 ;; Tracked objects:
 28226 ;;		On entry : 0/0
 28227 ;;		On exit  : 0/0
 28228 ;;		Unchanged: 0/0
 28229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 28230 ;;      Params:         0       9       0       0       0       0       0       0       0
 28231 ;;      Locals:         0       9       0       0       0       0       0       0       0
 28232 ;;      Temps:          0       0       0       0       0       0       0       0       0
 28233 ;;      Totals:         0      18       0       0       0       0       0       0       0
 28234 ;;Total ram usage:       18 bytes
 28235 ;; Hardware stack levels used:    1
 28236 ;; Hardware stack levels required when called:    7
 28237 ;; This function calls:
 28238 ;;		_enc424j600_readSPI
 28239 ;;		_enc424j600_setERXDATAReadPointer
 28240 ;;		_enc424j600_writeSPI
 28241 ;; This function is called by:
 28242 ;;		_arp_send
 28243 ;; This function uses a non-reentrant model
 28244 ;;
 28245                           
 28246                           	psect	text117
 28247  00615E                     __ptext117:
 28248                           	opt stack 0
 28249  00615E                     _ethernetController_getSourceMACAddress:
 28250                           	opt stack 19
 28251                           
 28252                           ;ENC424J600.c: 269: macaddress_t sourceAddress;
 28253                           ;ENC424J600.c: 270: enc424j600_setERXDATAReadPointer(field.start + 14);
 28254                           
 28255                           ;incstack = 0
 28256  00615E  0E0E               	movlw	14
 28257  006160  0100               	movlb	0	; () banked
 28258  006162  256F               	addwf	ethernetController_getSourceMACAddress@field& (0+255),w,b
 28259  006164  6F6A               	movwf	enc424j600_setERXDATAReadPointer@addr& (0+255),b
 28260  006166  0E00               	movlw	0
 28261  006168  2170               	addwfc	(ethernetController_getSourceMACAddress@field+1)& (0+255),w,b
 28262  00616A  6F6B               	movwf	(enc424j600_setERXDATAReadPointer@addr+1)& (0+255),b
 28263  00616C  EC81  F034         	call	_enc424j600_setERXDATAReadPointer	;wreg free
 28264                           
 28265                           ;ENC424J600.c: 271: uint8_t opcode = 0x2C;
 28266  006170  0E2C               	movlw	44
 28267  006172  0100               	movlb	0	; () banked
 28268  006174  6F78               	movwf	ethernetController_getSourceMACAddress@opcode& (0+255),b
 28269                           
 28270                           ; BSR set to: 0
 28271                           ;ENC424J600.c: 272: PORTBbits.RB4=0;
 28272  006176  9881               	bcf	3969,4,c	;volatile
 28273                           
 28274                           ; BSR set to: 0
 28275                           ;ENC424J600.c: 273: enc424j600_writeSPI(&opcode);
 28276  006178  0E78               	movlw	low ethernetController_getSourceMACAddress@opcode
 28277  00617A  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 28278  00617C  0E00               	movlw	high ethernetController_getSourceMACAddress@opcode
 28279  00617E  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 28280  006180  EC50  F031         	call	_enc424j600_writeSPI	;wreg free
 28281                           
 28282                           ;ENC424J600.c: 274: for (uint8_t i = 0; i < 6; i++) {
 28283  006184  0E00               	movlw	0
 28284  006186  0100               	movlb	0	; () banked
 28285  006188  6F80               	movwf	ethernetController_getSourceMACAddress@i& (0+255),b
 28286  00618A                     l10350:
 28287                           
 28288                           ; BSR set to: 0
 28289  00618A  0E05               	movlw	5
 28290  00618C  6580               	cpfsgt	ethernetController_getSourceMACAddress@i& (0+255),b
 28291  00618E  D001               	goto	l150
 28292  006190  D013               	goto	u11950
 28293  006192                     l150:
 28294                           
 28295                           ; BSR set to: 0
 28296                           ;ENC424J600.c: 275: uint8_t temp;
 28297                           ;ENC424J600.c: 276: enc424j600_readSPI(&temp);
 28298                           
 28299                           ; BSR set to: 0
 28300  006192  0E7F               	movlw	low ethernetController_getSourceMACAddress@temp
 28301  006194  6F60               	movwf	enc424j600_readSPI@data& (0+255),b
 28302  006196  0E00               	movlw	high ethernetController_getSourceMACAddress@temp
 28303  006198  6F61               	movwf	(enc424j600_readSPI@data+1)& (0+255),b
 28304  00619A  ECE7  F030         	call	_enc424j600_readSPI	;wreg free
 28305                           
 28306                           ;ENC424J600.c: 277: sourceAddress.address[i] = temp;
 28307  00619E  0100               	movlb	0	; () banked
 28308  0061A0  5180               	movf	ethernetController_getSourceMACAddress@i& (0+255),w,b
 28309  0061A2  0D01               	mullw	1
 28310  0061A4  0E79               	movlw	low ethernetController_getSourceMACAddress@sourceAddress
 28311  0061A6  24F3               	addwf	prodl,w,c
 28312  0061A8  6ED9               	movwf	fsr2l,c
 28313  0061AA  0E00               	movlw	high ethernetController_getSourceMACAddress@sourceAddress
 28314  0061AC  20F4               	addwfc	prodh,w,c
 28315  0061AE  6EDA               	movwf	fsr2h,c
 28316  0061B0  C07F  FFDF         	movff	ethernetController_getSourceMACAddress@temp,indf2
 28317                           
 28318                           ; BSR set to: 0
 28319  0061B4  2B80               	incf	ethernetController_getSourceMACAddress@i& (0+255),f,b
 28320  0061B6  D7E9               	goto	l10350
 28321  0061B8                     u11950:
 28322                           
 28323                           ; BSR set to: 0
 28324                           ;ENC424J600.c: 278: }
 28325                           ;ENC424J600.c: 279: PORTBbits.RB4=1;
 28326  0061B8  8881               	bsf	3969,4,c	;volatile
 28327                           
 28328                           ; BSR set to: 0
 28329                           ;ENC424J600.c: 280: return sourceAddress;
 28330  0061BA  EE20  F079         	lfsr	2,ethernetController_getSourceMACAddress@sourceAddress
 28331  0061BE  EE00  F06F         	lfsr	0,?_ethernetController_getSourceMACAddress
 28332  0061C2  0E05               	movlw	5
 28333  0061C4                     u11961:
 28334  0061C4  CFDB FFEB          	movff	plusw2,plusw0
 28335  0061C8  06E8               	decf	wreg,f,c
 28336  0061CA  E2FC               	bc	u11961
 28337  0061CC  0012               	return	
 28338  0061CE                     __end_of_ethernetController_getSourceMACAddress:
 28339                           	opt stack 0
 28340                           tblptru	equ	0xFF8
 28341                           tblptrh	equ	0xFF7
 28342                           tblptrl	equ	0xFF6
 28343                           tablat	equ	0xFF5
 28344                           prodh	equ	0xFF4
 28345                           prodl	equ	0xFF3
 28346                           intcon	equ	0xFF2
 28347                           intcon3	equ	0xFF0
 28348                           indf0	equ	0xFEF
 28349                           postinc0	equ	0xFEE
 28350                           plusw0	equ	0xFEB
 28351                           fsr0h	equ	0xFEA
 28352                           fsr0l	equ	0xFE9
 28353                           wreg	equ	0xFE8
 28354                           indf1	equ	0xFE7
 28355                           postinc1	equ	0xFE6
 28356                           postdec1	equ	0xFE5
 28357                           plusw1	equ	0xFE3
 28358                           fsr1h	equ	0xFE2
 28359                           fsr1l	equ	0xFE1
 28360                           indf2	equ	0xFDF
 28361                           postinc2	equ	0xFDE
 28362                           postdec2	equ	0xFDD
 28363                           plusw2	equ	0xFDB
 28364                           fsr2h	equ	0xFDA
 28365                           fsr2l	equ	0xFD9
 28366                           status	equ	0xFD8
 28367                           
 28368 ;; *************** function _enc424j600_setERXDATAReadPointer *****************
 28369 ;; Defined at:
 28370 ;;		line 631 in file "src/enc424j600/ENC424J600.c"
 28371 ;; Parameters:    Size  Location     Type
 28372 ;;  addr            2   10[BANK0 ] unsigned int 
 28373 ;; Auto vars:     Size  Location     Type
 28374 ;;  highByte        1   14[BANK0 ] unsigned char 
 28375 ;;  lowByte         1   13[BANK0 ] unsigned char 
 28376 ;;  opcode          1   12[BANK0 ] unsigned char 
 28377 ;; Return value:  Size  Location     Type
 28378 ;;                  1    wreg      void 
 28379 ;; Registers used:
 28380 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 28381 ;; Tracked objects:
 28382 ;;		On entry : 0/0
 28383 ;;		On exit  : 0/0
 28384 ;;		Unchanged: 0/0
 28385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 28386 ;;      Params:         0       2       0       0       0       0       0       0       0
 28387 ;;      Locals:         0       3       0       0       0       0       0       0       0
 28388 ;;      Temps:          0       0       0       0       0       0       0       0       0
 28389 ;;      Totals:         0       5       0       0       0       0       0       0       0
 28390 ;;Total ram usage:        5 bytes
 28391 ;; Hardware stack levels used:    1
 28392 ;; Hardware stack levels required when called:    6
 28393 ;; This function calls:
 28394 ;;		_enc424j600_writeSPI
 28395 ;; This function is called by:
 28396 ;;		_ethernetController_getSourceMACAddress
 28397 ;;		_ethernetController_getEtherTypeField
 28398 ;;		_ethernetController_getRSV
 28399 ;;		_ethernetController_updateNextPacketPointer
 28400 ;;		_ethernetController_streamFromRXBuffer
 28401 ;; This function uses a non-reentrant model
 28402 ;;
 28403                           
 28404                           	psect	text118
 28405  006902                     __ptext118:
 28406                           	opt stack 0
 28407  006902                     _enc424j600_setERXDATAReadPointer:
 28408                           	opt stack 19
 28409                           
 28410                           ;ENC424J600.c: 632: uint8_t opcode = 0x64;
 28411                           
 28412                           ; BSR set to: 0
 28413                           ;incstack = 0
 28414  006902  0E64               	movlw	100
 28415  006904  0100               	movlb	0	; () banked
 28416  006906  6F6C               	movwf	enc424j600_setERXDATAReadPointer@opcode& (0+255),b
 28417                           
 28418                           ; BSR set to: 0
 28419                           ;ENC424J600.c: 633: uint8_t lowByte = addr & 0x00ff;
 28420  006908  C06A  F06D         	movff	enc424j600_setERXDATAReadPointer@addr,enc424j600_setERXDATAReadPointer@lowByte
 28421                           
 28422                           ;ENC424J600.c: 634: uint8_t highByte = (addr >> 8) & 0xff;
 28423  00690C  516B               	movf	(enc424j600_setERXDATAReadPointer@addr+1)& (0+255),w,b
 28424  00690E  6F6E               	movwf	enc424j600_setERXDATAReadPointer@highByte& (0+255),b
 28425                           
 28426                           ; BSR set to: 0
 28427                           ;ENC424J600.c: 635: PORTBbits.RB4=0;
 28428  006910  9881               	bcf	3969,4,c	;volatile
 28429                           
 28430                           ; BSR set to: 0
 28431                           ;ENC424J600.c: 636: enc424j600_writeSPI(&opcode);
 28432  006912  0E6C               	movlw	low enc424j600_setERXDATAReadPointer@opcode
 28433  006914  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 28434  006916  0E00               	movlw	high enc424j600_setERXDATAReadPointer@opcode
 28435  006918  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 28436  00691A  EC50  F031         	call	_enc424j600_writeSPI	;wreg free
 28437                           
 28438                           ;ENC424J600.c: 637: enc424j600_writeSPI(&lowByte);
 28439  00691E  0E6D               	movlw	low enc424j600_setERXDATAReadPointer@lowByte
 28440  006920  0100               	movlb	0	; () banked
 28441  006922  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 28442  006924  0E00               	movlw	high enc424j600_setERXDATAReadPointer@lowByte
 28443  006926  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 28444  006928  EC50  F031         	call	_enc424j600_writeSPI	;wreg free
 28445                           
 28446                           ;ENC424J600.c: 638: enc424j600_writeSPI(&highByte);
 28447  00692C  0E6E               	movlw	low enc424j600_setERXDATAReadPointer@highByte
 28448  00692E  0100               	movlb	0	; () banked
 28449  006930  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 28450  006932  0E00               	movlw	high enc424j600_setERXDATAReadPointer@highByte
 28451  006934  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 28452  006936  EC50  F031         	call	_enc424j600_writeSPI	;wreg free
 28453                           
 28454                           ;ENC424J600.c: 639: PORTBbits.RB4=1;
 28455  00693A  8881               	bsf	3969,4,c	;volatile
 28456  00693C  0012               	return		;funcret
 28457  00693E                     __end_of_enc424j600_setERXDATAReadPointer:
 28458                           	opt stack 0
 28459                           tblptru	equ	0xFF8
 28460                           tblptrh	equ	0xFF7
 28461                           tblptrl	equ	0xFF6
 28462                           tablat	equ	0xFF5
 28463                           prodh	equ	0xFF4
 28464                           prodl	equ	0xFF3
 28465                           intcon	equ	0xFF2
 28466                           intcon3	equ	0xFF0
 28467                           indf0	equ	0xFEF
 28468                           postinc0	equ	0xFEE
 28469                           plusw0	equ	0xFEB
 28470                           fsr0h	equ	0xFEA
 28471                           fsr0l	equ	0xFE9
 28472                           wreg	equ	0xFE8
 28473                           indf1	equ	0xFE7
 28474                           postinc1	equ	0xFE6
 28475                           postdec1	equ	0xFE5
 28476                           plusw1	equ	0xFE3
 28477                           fsr1h	equ	0xFE2
 28478                           fsr1l	equ	0xFE1
 28479                           indf2	equ	0xFDF
 28480                           postinc2	equ	0xFDE
 28481                           postdec2	equ	0xFDD
 28482                           plusw2	equ	0xFDB
 28483                           fsr2h	equ	0xFDA
 28484                           fsr2l	equ	0xFD9
 28485                           status	equ	0xFD8
 28486                           
 28487 ;; *************** function _enc424j600_writeSPI *****************
 28488 ;; Defined at:
 28489 ;;		line 487 in file "src/enc424j600/ENC424J600.c"
 28490 ;; Parameters:    Size  Location     Type
 28491 ;;  data            2    0[BANK0 ] PTR unsigned char 
 28492 ;;		 -> enc424j600_clearInterruptFlag@temp(1), enc424j600_disable@temp(1), enc424j600_enable@temp(1), enc424j600_disable
      +AutoMACInsertion@temp(1), 
 28493 ;;		 -> enc424j600_enableAutoMACInsertion@temp(1), enc424j600_setRXTailPointer@highByte(1), enc424j600_setRXTailPointer@
      +lowByte(1), enc424j600_setRXBufferStartAddress@highByte(1), 
 28494 ;;		 -> enc424j600_setRXBufferStartAddress@lowByte(1), enc424j600_setERXDATAReadPointer@highByte(1), enc424j600_setERXDA
      +TAReadPointer@lowByte(1), enc424j600_setERXDATAReadPointer@opcode(1), 
 28495 ;;		 -> enc424j600_setGPDATAReadPointer@highByte(1), enc424j600_setGPDATAReadPointer@lowByte(1), enc424j600_setGPDATARea
      +dPointer@opcode(1), enc424j600_setGPDATAWritePointer@highByte(1), 
 28496 ;;		 -> enc424j600_setGPDATAWritePointer@lowByte(1), enc424j600_setGPDATAWritePointer@opcode(1), enc424j600_setTXStartAd
      +dress@highByte(1), enc424j600_setTXStartAddress@lowByte(1), 
 28497 ;;		 -> enc424j600_setTXLength@highByte(1), enc424j600_setTXLength@lowByte(1), enc424j600_readPHYRegister@temp(1), enc42
      +4j600_readPHYRegister@unusedBits(1), 
 28498 ;;		 -> enc424j600_readPHYRegister@PHYaddress(1), enc424j600_readControlRegisterUnbanked@addr(1), enc424j600_readControl
      +RegisterUnbanked@opcode(1), enc424j600_writeControlRegisterUnbanked@addr(1), 
 28499 ;;		 -> enc424j600_writeControlRegisterUnbanked@opcode(1), enc424j600_writeSingleByte@opcode(1), ethernetController_setL
      +EDConfig@data(1), ethernetController_streamFromRXBuffer@opcode(1), 
 28500 ;;		 -> ethernetController_updateNextPacketPointer@opcode(1), ethernetController_getRSV@opcode(1), ethernetController_ge
      +tEtherTypeField@opcode(1), ethernetController_getSourceMACAddress@opcode(1), 
 28501 ;;		 -> ethernetController_writeEtherTypeFieldToBuffer@opcode(1), ethernetController_writeEtherTypeFieldToBuffer@highByt
      +e(1), ethernetController_writeEtherTypeFieldToBuffer@lowByte(1), ethernetController_writeDestinationMACAddress@opcode(1)
      +, 
 28502 ;;		 -> ethernetController_writeDestinationMACAddress@data(6), ethernetController_streamToTransmitBuffer@data(1), ethern
      +etController_streamToTransmitBuffer@opcode(1), mac.address(6), 
 28503 ;;		 -> ethernetController_setMacAddress@mac(6), ethernetController_softReset@dataToSend(2), 
 28504 ;; Auto vars:     Size  Location     Type
 28505 ;;  timeoutCount    4    6[BANK0 ] unsigned long 
 28506 ;; Return value:  Size  Location     Type
 28507 ;;                  1    wreg      void 
 28508 ;; Registers used:
 28509 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 28510 ;; Tracked objects:
 28511 ;;		On entry : 0/0
 28512 ;;		On exit  : 0/0
 28513 ;;		Unchanged: 0/0
 28514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 28515 ;;      Params:         0       2       0       0       0       0       0       0       0
 28516 ;;      Locals:         0       4       0       0       0       0       0       0       0
 28517 ;;      Temps:          0       4       0       0       0       0       0       0       0
 28518 ;;      Totals:         0      10       0       0       0       0       0       0       0
 28519 ;;Total ram usage:       10 bytes
 28520 ;; Hardware stack levels used:    1
 28521 ;; Hardware stack levels required when called:    5
 28522 ;; This function calls:
 28523 ;;		_enc424j600_initSPI
 28524 ;; This function is called by:
 28525 ;;		_ethernetController_streamToTransmitBuffer
 28526 ;;		_ethernetController_writeDestinationMACAddress
 28527 ;;		_ethernetController_writeEtherTypeFieldToBuffer
 28528 ;;		_ethernetController_getSourceMACAddress
 28529 ;;		_ethernetController_getEtherTypeField
 28530 ;;		_ethernetController_getRSV
 28531 ;;		_ethernetController_updateNextPacketPointer
 28532 ;;		_ethernetController_streamFromRXBuffer
 28533 ;;		_enc424j600_writeSingleByte
 28534 ;;		_enc424j600_writeControlRegisterUnbanked
 28535 ;;		_enc424j600_readControlRegisterUnbanked
 28536 ;;		_enc424j600_setGPDATAWritePointer
 28537 ;;		_enc424j600_setERXDATAReadPointer
 28538 ;;		_enc424j600_setGPDATAReadPointer
 28539 ;; This function uses a non-reentrant model
 28540 ;;
 28541                           
 28542                           	psect	text119
 28543  0062A0                     __ptext119:
 28544                           	opt stack 0
 28545  0062A0                     _enc424j600_writeSPI:
 28546                           	opt stack 21
 28547                           
 28548                           ;ENC424J600.c: 489: uint32_t timeoutCounter = 0;
 28549                           
 28550                           ;incstack = 0
 28551  0062A0  0E00               	movlw	0
 28552  0062A2  0100               	movlb	0	; () banked
 28553  0062A4  6F66               	movwf	enc424j600_writeSPI@timeoutCounter& (0+255),b
 28554  0062A6  0E00               	movlw	0
 28555  0062A8  6F67               	movwf	(enc424j600_writeSPI@timeoutCounter+1)& (0+255),b
 28556  0062AA  0E00               	movlw	0
 28557  0062AC  6F68               	movwf	(enc424j600_writeSPI@timeoutCounter+2)& (0+255),b
 28558  0062AE  0E00               	movlw	0
 28559  0062B0  6F69               	movwf	(enc424j600_writeSPI@timeoutCounter+3)& (0+255),b
 28560                           
 28561                           ; BSR set to: 0
 28562                           ;ENC424J600.c: 490: SSP1BUF = *data;
 28563  0062B2  C060  FFD9         	movff	enc424j600_writeSPI@data,fsr2l
 28564  0062B6  C061  FFDA         	movff	enc424j600_writeSPI@data+1,fsr2h
 28565  0062BA  50DF               	movf	indf2,w,c
 28566  0062BC  6EC9               	movwf	4041,c	;volatile
 28567  0062BE                     
 28568                           ; BSR set to: 0
 28569                           
 28570                           ; BSR set to: 0
 28571  0062BE  B0C7               	btfsc	4039,0,c	;volatile
 28572  0062C0  D015               	goto	u10690
 28573                           
 28574                           ; BSR set to: 0
 28575  0062C2  C066  F062         	movff	enc424j600_writeSPI@timeoutCounter,??_enc424j600_writeSPI
 28576  0062C6  C067  F063         	movff	enc424j600_writeSPI@timeoutCounter+1,??_enc424j600_writeSPI+1
 28577  0062CA  C068  F064         	movff	enc424j600_writeSPI@timeoutCounter+2,??_enc424j600_writeSPI+2
 28578  0062CE  C069  F065         	movff	enc424j600_writeSPI@timeoutCounter+3,??_enc424j600_writeSPI+3
 28579  0062D2  2B66               	incf	enc424j600_writeSPI@timeoutCounter& (0+255),f,b
 28580  0062D4  0E00               	movlw	0
 28581  0062D6  2367               	addwfc	(enc424j600_writeSPI@timeoutCounter+1)& (0+255),f,b
 28582  0062D8  2368               	addwfc	(enc424j600_writeSPI@timeoutCounter+2)& (0+255),f,b
 28583  0062DA  2369               	addwfc	(enc424j600_writeSPI@timeoutCounter+3)& (0+255),f,b
 28584  0062DC  5165               	movf	(??_enc424j600_writeSPI+3)& (0+255),w,b
 28585  0062DE  1164               	iorwf	(??_enc424j600_writeSPI+2)& (0+255),w,b
 28586  0062E0  E105               	bnz	l9586
 28587  0062E2  2962               	incf	??_enc424j600_writeSPI& (0+255),w,b
 28588  0062E4  0E0F               	movlw	15
 28589  0062E6  5963               	subwfb	(??_enc424j600_writeSPI+1)& (0+255),w,b
 28590  0062E8  A0D8               	btfss	status,0,c
 28591  0062EA  D7E9               	goto	l227
 28592  0062EC                     u10690:
 28593  0062EC                     l9586:
 28594                           
 28595                           ; BSR set to: 0
 28596                           ;ENC424J600.c: 492: if (timeoutCounter >= 0xfff) {
 28597  0062EC  5169               	movf	(enc424j600_writeSPI@timeoutCounter+3)& (0+255),w,b
 28598  0062EE  1168               	iorwf	(enc424j600_writeSPI@timeoutCounter+2)& (0+255),w,b
 28599  0062F0  E105               	bnz	u10700
 28600  0062F2  2966               	incf	enc424j600_writeSPI@timeoutCounter& (0+255),w,b
 28601  0062F4  0E0F               	movlw	15
 28602  0062F6  5967               	subwfb	(enc424j600_writeSPI@timeoutCounter+1)& (0+255),w,b
 28603  0062F8  A0D8               	btfss	status,0,c
 28604  0062FA  0012               	return	
 28605  0062FC                     u10700:
 28606                           
 28607                           ; BSR set to: 0
 28608                           ;ENC424J600.c: 493: PORTBbits.RB4=1;
 28609  0062FC  8881               	bsf	3969,4,c	;volatile
 28610                           
 28611                           ; BSR set to: 0
 28612                           ;ENC424J600.c: 494: enc424j600_initSPI();
 28613  0062FE  EC9D  F036         	call	_enc424j600_initSPI	;wreg free
 28614                           
 28615                           ;ENC424J600.c: 495: return;
 28616  006302  0012               	return	
 28617  006304                     __end_of_enc424j600_writeSPI:
 28618                           	opt stack 0
 28619                           tblptru	equ	0xFF8
 28620                           tblptrh	equ	0xFF7
 28621                           tblptrl	equ	0xFF6
 28622                           tablat	equ	0xFF5
 28623                           prodh	equ	0xFF4
 28624                           prodl	equ	0xFF3
 28625                           intcon	equ	0xFF2
 28626                           intcon3	equ	0xFF0
 28627                           indf0	equ	0xFEF
 28628                           postinc0	equ	0xFEE
 28629                           plusw0	equ	0xFEB
 28630                           fsr0h	equ	0xFEA
 28631                           fsr0l	equ	0xFE9
 28632                           wreg	equ	0xFE8
 28633                           indf1	equ	0xFE7
 28634                           postinc1	equ	0xFE6
 28635                           postdec1	equ	0xFE5
 28636                           plusw1	equ	0xFE3
 28637                           fsr1h	equ	0xFE2
 28638                           fsr1l	equ	0xFE1
 28639                           indf2	equ	0xFDF
 28640                           postinc2	equ	0xFDE
 28641                           postdec2	equ	0xFDD
 28642                           plusw2	equ	0xFDB
 28643                           fsr2h	equ	0xFDA
 28644                           fsr2l	equ	0xFD9
 28645                           status	equ	0xFD8
 28646                           
 28647 ;; *************** function _enc424j600_readSPI *****************
 28648 ;; Defined at:
 28649 ;;		line 499 in file "src/enc424j600/ENC424J600.c"
 28650 ;; Parameters:    Size  Location     Type
 28651 ;;  data            2    0[BANK0 ] PTR unsigned char 
 28652 ;;		 -> enc424j600_clearInterruptFlag@temp(1), enc424j600_getInterruptFlags@high(1), enc424j600_getInterruptFlags@low(1)
      +, enc424j600_disable@temp(1), 
 28653 ;;		 -> enc424j600_enable@temp(1), enc424j600_disableAutoMACInsertion@temp(1), enc424j600_enableAutoMACInsertion@temp(1)
      +, enc424j600_getPacketCount@lowByte(1), 
 28654 ;;		 -> enc424j600_readPHYRegister@highByte(1), enc424j600_readPHYRegister@lowByte(1), enc424j600_readPHYRegister@temp(1
      +), ethernetController_setLEDConfig@data(1), 
 28655 ;;		 -> ethernetController_updateLinkStatus@temp(1), ethernetController_streamFromRXBuffer@temp(1), ethernetController_u
      +pdateNextPacketPointer@newPointerH(1), ethernetController_updateNextPacketPointer@newPointerL(1), 
 28656 ;;		 -> ethernetController_getRSV@temp(6), ethernetController_getEtherTypeField@lowByte(1), ethernetController_getEtherT
      +ypeField@highByte(1), ethernetController_getSourceMACAddress@temp(1), 
 28657 ;;		 -> mac.address(6), ethernetController_getMacAddress@mac(6), ethernetController_getSiliconRevision@data(1), ethernet
      +Controller_checkDeviceId@data(1), 
 28658 ;;		 -> ethernetController_softReset@receivedData(2), 
 28659 ;; Auto vars:     Size  Location     Type
 28660 ;;  timeoutCount    4    6[BANK0 ] unsigned long 
 28661 ;; Return value:  Size  Location     Type
 28662 ;;                  1    wreg      void 
 28663 ;; Registers used:
 28664 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 28665 ;; Tracked objects:
 28666 ;;		On entry : 0/0
 28667 ;;		On exit  : 0/0
 28668 ;;		Unchanged: 0/0
 28669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 28670 ;;      Params:         0       2       0       0       0       0       0       0       0
 28671 ;;      Locals:         0       4       0       0       0       0       0       0       0
 28672 ;;      Temps:          0       4       0       0       0       0       0       0       0
 28673 ;;      Totals:         0      10       0       0       0       0       0       0       0
 28674 ;;Total ram usage:       10 bytes
 28675 ;; Hardware stack levels used:    1
 28676 ;; Hardware stack levels required when called:    5
 28677 ;; This function calls:
 28678 ;;		_enc424j600_initSPI
 28679 ;; This function is called by:
 28680 ;;		_ethernetController_getSourceMACAddress
 28681 ;;		_ethernetController_getEtherTypeField
 28682 ;;		_ethernetController_getRSV
 28683 ;;		_ethernetController_updateNextPacketPointer
 28684 ;;		_ethernetController_streamFromRXBuffer
 28685 ;;		_enc424j600_readControlRegisterUnbanked
 28686 ;; This function uses a non-reentrant model
 28687 ;;
 28688                           
 28689                           	psect	text120
 28690  0061CE                     __ptext120:
 28691                           	opt stack 0
 28692  0061CE                     _enc424j600_readSPI:
 28693                           	opt stack 21
 28694                           
 28695                           ;ENC424J600.c: 501: uint32_t timeoutCounter = 0;
 28696                           
 28697                           ;incstack = 0
 28698  0061CE  0E00               	movlw	0
 28699  0061D0  0100               	movlb	0	; () banked
 28700  0061D2  6F66               	movwf	enc424j600_readSPI@timeoutCounter& (0+255),b
 28701  0061D4  0E00               	movlw	0
 28702  0061D6  6F67               	movwf	(enc424j600_readSPI@timeoutCounter+1)& (0+255),b
 28703  0061D8  0E00               	movlw	0
 28704  0061DA  6F68               	movwf	(enc424j600_readSPI@timeoutCounter+2)& (0+255),b
 28705  0061DC  0E00               	movlw	0
 28706  0061DE  6F69               	movwf	(enc424j600_readSPI@timeoutCounter+3)& (0+255),b
 28707                           
 28708                           ;ENC424J600.c: 502: SSP1BUF = 0x00;
 28709  0061E0  0E00               	movlw	0
 28710  0061E2  6EC9               	movwf	4041,c	;volatile
 28711  0061E4                     
 28712                           ; BSR set to: 0
 28713                           
 28714                           ; BSR set to: 0
 28715  0061E4  B0C7               	btfsc	4039,0,c	;volatile
 28716  0061E6  D015               	goto	u11670
 28717                           
 28718                           ; BSR set to: 0
 28719  0061E8  C066  F062         	movff	enc424j600_readSPI@timeoutCounter,??_enc424j600_readSPI
 28720  0061EC  C067  F063         	movff	enc424j600_readSPI@timeoutCounter+1,??_enc424j600_readSPI+1
 28721  0061F0  C068  F064         	movff	enc424j600_readSPI@timeoutCounter+2,??_enc424j600_readSPI+2
 28722  0061F4  C069  F065         	movff	enc424j600_readSPI@timeoutCounter+3,??_enc424j600_readSPI+3
 28723  0061F8  2B66               	incf	enc424j600_readSPI@timeoutCounter& (0+255),f,b
 28724  0061FA  0E00               	movlw	0
 28725  0061FC  2367               	addwfc	(enc424j600_readSPI@timeoutCounter+1)& (0+255),f,b
 28726  0061FE  2368               	addwfc	(enc424j600_readSPI@timeoutCounter+2)& (0+255),f,b
 28727  006200  2369               	addwfc	(enc424j600_readSPI@timeoutCounter+3)& (0+255),f,b
 28728  006202  5165               	movf	(??_enc424j600_readSPI+3)& (0+255),w,b
 28729  006204  1164               	iorwf	(??_enc424j600_readSPI+2)& (0+255),w,b
 28730  006206  E105               	bnz	l10128
 28731  006208  2962               	incf	??_enc424j600_readSPI& (0+255),w,b
 28732  00620A  0E0F               	movlw	15
 28733  00620C  5963               	subwfb	(??_enc424j600_readSPI+1)& (0+255),w,b
 28734  00620E  A0D8               	btfss	status,0,c
 28735  006210  D7E9               	goto	l236
 28736  006212                     u11670:
 28737  006212                     l10128:
 28738                           
 28739                           ; BSR set to: 0
 28740                           ;ENC424J600.c: 504: if (timeoutCounter >= 0xfff) {
 28741  006212  5169               	movf	(enc424j600_readSPI@timeoutCounter+3)& (0+255),w,b
 28742  006214  1168               	iorwf	(enc424j600_readSPI@timeoutCounter+2)& (0+255),w,b
 28743  006216  E105               	bnz	u11680
 28744  006218  2966               	incf	enc424j600_readSPI@timeoutCounter& (0+255),w,b
 28745  00621A  0E0F               	movlw	15
 28746  00621C  5967               	subwfb	(enc424j600_readSPI@timeoutCounter+1)& (0+255),w,b
 28747  00621E  A0D8               	btfss	status,0,c
 28748  006220  D004               	goto	l240
 28749  006222                     u11680:
 28750                           
 28751                           ; BSR set to: 0
 28752                           ;ENC424J600.c: 505: PORTBbits.RB4=1;
 28753  006222  8881               	bsf	3969,4,c	;volatile
 28754                           
 28755                           ; BSR set to: 0
 28756                           ;ENC424J600.c: 506: enc424j600_initSPI();
 28757  006224  EC9D  F036         	call	_enc424j600_initSPI	;wreg free
 28758                           
 28759                           ;ENC424J600.c: 507: return;
 28760  006228  0012               	return	
 28761  00622A                     l240:
 28762                           
 28763                           ;ENC424J600.c: 508: }
 28764                           ;ENC424J600.c: 509: *data = SSP1BUF;
 28765  00622A  C060  FFD9         	movff	enc424j600_readSPI@data,fsr2l
 28766  00622E  C061  FFDA         	movff	enc424j600_readSPI@data+1,fsr2h
 28767  006232  CFC9 FFDF          	movff	4041,indf2	;volatile
 28768  006236  0012               	return		;funcret
 28769  006238                     __end_of_enc424j600_readSPI:
 28770                           	opt stack 0
 28771                           tblptru	equ	0xFF8
 28772                           tblptrh	equ	0xFF7
 28773                           tblptrl	equ	0xFF6
 28774                           tablat	equ	0xFF5
 28775                           prodh	equ	0xFF4
 28776                           prodl	equ	0xFF3
 28777                           intcon	equ	0xFF2
 28778                           intcon3	equ	0xFF0
 28779                           indf0	equ	0xFEF
 28780                           postinc0	equ	0xFEE
 28781                           plusw0	equ	0xFEB
 28782                           fsr0h	equ	0xFEA
 28783                           fsr0l	equ	0xFE9
 28784                           wreg	equ	0xFE8
 28785                           indf1	equ	0xFE7
 28786                           postinc1	equ	0xFE6
 28787                           postdec1	equ	0xFE5
 28788                           plusw1	equ	0xFE3
 28789                           fsr1h	equ	0xFE2
 28790                           fsr1l	equ	0xFE1
 28791                           indf2	equ	0xFDF
 28792                           postinc2	equ	0xFDE
 28793                           postdec2	equ	0xFDD
 28794                           plusw2	equ	0xFDB
 28795                           fsr2h	equ	0xFDA
 28796                           fsr2l	equ	0xFD9
 28797                           status	equ	0xFD8
 28798                           
 28799 ;; *************** function _enc424j600_initSPI *****************
 28800 ;; Defined at:
 28801 ;;		line 469 in file "src/enc424j600/ENC424J600.c"
 28802 ;; Parameters:    Size  Location     Type
 28803 ;;		None
 28804 ;; Auto vars:     Size  Location     Type
 28805 ;;		None
 28806 ;; Return value:  Size  Location     Type
 28807 ;;                  1    wreg      void 
 28808 ;; Registers used:
 28809 ;;		None
 28810 ;; Tracked objects:
 28811 ;;		On entry : 0/0
 28812 ;;		On exit  : 0/0
 28813 ;;		Unchanged: 0/0
 28814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 28815 ;;      Params:         0       0       0       0       0       0       0       0       0
 28816 ;;      Locals:         0       0       0       0       0       0       0       0       0
 28817 ;;      Temps:          0       0       0       0       0       0       0       0       0
 28818 ;;      Totals:         0       0       0       0       0       0       0       0       0
 28819 ;;Total ram usage:        0 bytes
 28820 ;; Hardware stack levels used:    1
 28821 ;; Hardware stack levels required when called:    4
 28822 ;; This function calls:
 28823 ;;		Nothing
 28824 ;; This function is called by:
 28825 ;;		_ethernetController_init
 28826 ;;		_enc424j600_writeSPI
 28827 ;;		_enc424j600_readSPI
 28828 ;; This function uses a non-reentrant model
 28829 ;;
 28830                           
 28831                           	psect	text121
 28832  006D3A                     __ptext121:
 28833                           	opt stack 0
 28834  006D3A                     _enc424j600_initSPI:
 28835                           	opt stack 21
 28836                           
 28837                           ;ENC424J600.c: 470: SSP1CON1bits.SSPEN = 0;
 28838                           
 28839                           ;incstack = 0
 28840  006D3A  9AC6               	bcf	4038,5,c	;volatile
 28841                           
 28842                           ;ENC424J600.c: 471: SSP1STATbits.CKE = 1;
 28843  006D3C  8CC7               	bsf	4039,6,c	;volatile
 28844                           
 28845                           ;ENC424J600.c: 473: TRISBbits.TRISB0 = 1;
 28846  006D3E  8093               	bsf	3987,0,c	;volatile
 28847                           
 28848                           ;ENC424J600.c: 474: ANSELBbits.ANSB0 = 0;
 28849  006D40  010F               	movlb	15	; () banked
 28850  006D42  915C               	bcf	92,0,b	;volatile
 28851                           
 28852                           ;ENC424J600.c: 475: TRISBbits.TRISB1 = 0;
 28853  006D44  9293               	bcf	3987,1,c	;volatile
 28854                           
 28855                           ;ENC424J600.c: 476: ANSELBbits.ANSB1 = 0;
 28856  006D46  935C               	bcf	92,1,b	;volatile
 28857                           
 28858                           ;ENC424J600.c: 477: TRISBbits.TRISB3 = 0;
 28859  006D48  9693               	bcf	3987,3,c	;volatile
 28860                           
 28861                           ;ENC424J600.c: 478: ANSELBbits.ANSB3 = 0;
 28862  006D4A  975C               	bcf	92,3,b	;volatile
 28863                           
 28864                           ;ENC424J600.c: 479: TRISBbits.TRISB4 = 0;
 28865  006D4C  9893               	bcf	3987,4,c	;volatile
 28866                           
 28867                           ;ENC424J600.c: 480: ANSELBbits.ANSB4 = 0;
 28868  006D4E  995C               	bcf	92,4,b	;volatile
 28869                           
 28870                           ;ENC424J600.c: 481: PORTBbits.RB4=1;
 28871  006D50  8881               	bsf	3969,4,c	;volatile
 28872                           
 28873                           ;ENC424J600.c: 482: SSP1CON1bits.SSPEN = 1;
 28874  006D52  8AC6               	bsf	4038,5,c	;volatile
 28875                           
 28876                           ; BSR set to: 15
 28877  006D54  0012               	return		;funcret
 28878  006D56                     __end_of_enc424j600_initSPI:
 28879                           	opt stack 0
 28880                           tblptru	equ	0xFF8
 28881                           tblptrh	equ	0xFF7
 28882                           tblptrl	equ	0xFF6
 28883                           tablat	equ	0xFF5
 28884                           prodh	equ	0xFF4
 28885                           prodl	equ	0xFF3
 28886                           intcon	equ	0xFF2
 28887                           intcon3	equ	0xFF0
 28888                           indf0	equ	0xFEF
 28889                           postinc0	equ	0xFEE
 28890                           plusw0	equ	0xFEB
 28891                           fsr0h	equ	0xFEA
 28892                           fsr0l	equ	0xFE9
 28893                           wreg	equ	0xFE8
 28894                           indf1	equ	0xFE7
 28895                           postinc1	equ	0xFE6
 28896                           postdec1	equ	0xFE5
 28897                           plusw1	equ	0xFE3
 28898                           fsr1h	equ	0xFE2
 28899                           fsr1l	equ	0xFE1
 28900                           indf2	equ	0xFDF
 28901                           postinc2	equ	0xFDE
 28902                           postdec2	equ	0xFDD
 28903                           plusw2	equ	0xFDB
 28904                           fsr2h	equ	0xFDA
 28905                           fsr2l	equ	0xFD9
 28906                           status	equ	0xFD8
 28907                           
 28908 ;; *************** function _arp_checkForEntry *****************
 28909 ;; Defined at:
 28910 ;;		line 465 in file "src/stack/protocols/arp.c"
 28911 ;; Parameters:    Size  Location     Type
 28912 ;;  ip              4    7[BANK0 ] struct ipv4_address
 28913 ;;  index           2   11[BANK0 ] PTR unsigned char 
 28914 ;;		 -> ipv4_sendFrame@index(1), arp_gratuitous@index(1), arp_probe@index(1), 
 28915 ;; Auto vars:     Size  Location     Type
 28916 ;;  i               1   21[BANK0 ] unsigned char 
 28917 ;; Return value:  Size  Location     Type
 28918 ;;                  1    wreg      unsigned char 
 28919 ;; Registers used:
 28920 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 28921 ;; Tracked objects:
 28922 ;;		On entry : 0/0
 28923 ;;		On exit  : 0/0
 28924 ;;		Unchanged: 0/0
 28925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 28926 ;;      Params:         0       6       0       0       0       0       0       0       0
 28927 ;;      Locals:         0       1       0       0       0       0       0       0       0
 28928 ;;      Temps:          0       8       0       0       0       0       0       0       0
 28929 ;;      Totals:         0      15       0       0       0       0       0       0       0
 28930 ;;Total ram usage:       15 bytes
 28931 ;; Hardware stack levels used:    1
 28932 ;; Hardware stack levels required when called:    5
 28933 ;; This function calls:
 28934 ;;		_getMillis
 28935 ;;		_ipv4_cmp
 28936 ;; This function is called by:
 28937 ;;		_arp_probe
 28938 ;;		_arp_gratuitous
 28939 ;;		_ipv4_sendFrame
 28940 ;; This function uses a non-reentrant model
 28941 ;;
 28942                           
 28943                           	psect	text122
 28944  0053B4                     __ptext122:
 28945                           	opt stack 0
 28946  0053B4                     _arp_checkForEntry:
 28947                           	opt stack 23
 28948                           
 28949                           ;arp.c: 466: for (uint8_t i = 0; i < 8u; i++) {
 28950                           
 28951                           ; BSR set to: 15
 28952                           ;incstack = 0
 28953  0053B4  0E00               	movlw	0
 28954  0053B6  0100               	movlb	0	; () banked
 28955  0053B8  6F75               	movwf	arp_checkForEntry@i& (0+255),b
 28956  0053BA                     l11198:
 28957                           
 28958                           ; BSR set to: 0
 28959  0053BA  0E07               	movlw	7
 28960  0053BC  6575               	cpfsgt	arp_checkForEntry@i& (0+255),b
 28961  0053BE  D001               	goto	l1061
 28962  0053C0  D050               	goto	u13710
 28963  0053C2                     l1061:
 28964                           
 28965                           ; BSR set to: 0
 28966                           ;arp.c: 467: if (ipv4_cmp(&arp_table[i].ip, &ip)) {
 28967                           
 28968                           ; BSR set to: 0
 28969  0053C2  5175               	movf	arp_checkForEntry@i& (0+255),w,b
 28970  0053C4  0D0E               	mullw	14
 28971  0053C6  0E7C               	movlw	low _arp_table
 28972  0053C8  24F3               	addwf	prodl,w,c
 28973  0053CA  6F60               	movwf	ipv4_cmp@a& (0+255),b
 28974  0053CC  0E04               	movlw	high _arp_table
 28975  0053CE  20F4               	addwfc	prodh,w,c
 28976  0053D0  6F61               	movwf	(ipv4_cmp@a+1)& (0+255),b
 28977  0053D2  0E67               	movlw	low arp_checkForEntry@ip
 28978  0053D4  6F62               	movwf	ipv4_cmp@b& (0+255),b
 28979  0053D6  0E00               	movlw	high arp_checkForEntry@ip
 28980  0053D8  6F63               	movwf	(ipv4_cmp@b+1)& (0+255),b
 28981  0053DA  EC24  F034         	call	_ipv4_cmp	;wreg free
 28982  0053DE  0100               	movlb	0	; () banked
 28983  0053E0  A0D8               	btfss	status,0,c
 28984  0053E2  D03D               	goto	l1064
 28985                           
 28986                           ; BSR set to: 0
 28987                           ;arp.c: 468: if ((getMillis() - arp_table[i].timeCreated) < 30000u) {
 28988  0053E4  5175               	movf	arp_checkForEntry@i& (0+255),w,b
 28989  0053E6  0D0E               	mullw	14
 28990  0053E8  0E0A               	movlw	10
 28991  0053EA  26F3               	addwf	prodl,f,c
 28992  0053EC  0E00               	movlw	0
 28993  0053EE  22F4               	addwfc	prodh,f,c
 28994  0053F0  0E7C               	movlw	low _arp_table
 28995  0053F2  24F3               	addwf	prodl,w,c
 28996  0053F4  6ED9               	movwf	fsr2l,c
 28997  0053F6  0E04               	movlw	high _arp_table
 28998  0053F8  20F4               	addwfc	prodh,w,c
 28999  0053FA  6EDA               	movwf	fsr2h,c
 29000  0053FC  CFDE F06D          	movff	postinc2,??_arp_checkForEntry
 29001  005400  CFDE F06E          	movff	postinc2,??_arp_checkForEntry+1
 29002  005404  CFDE F06F          	movff	postinc2,??_arp_checkForEntry+2
 29003  005408  CFDE F070          	movff	postinc2,??_arp_checkForEntry+3
 29004  00540C  1F6D               	comf	??_arp_checkForEntry& (0+255),f,b
 29005  00540E  1F6E               	comf	(??_arp_checkForEntry+1)& (0+255),f,b
 29006  005410  1F6F               	comf	(??_arp_checkForEntry+2)& (0+255),f,b
 29007  005412  1F70               	comf	(??_arp_checkForEntry+3)& (0+255),f,b
 29008  005414  2B6D               	incf	??_arp_checkForEntry& (0+255),f,b
 29009  005416  0E00               	movlw	0
 29010  005418  236E               	addwfc	(??_arp_checkForEntry+1)& (0+255),f,b
 29011  00541A  236F               	addwfc	(??_arp_checkForEntry+2)& (0+255),f,b
 29012  00541C  2370               	addwfc	(??_arp_checkForEntry+3)& (0+255),f,b
 29013  00541E  EC00  F037         	call	_getMillis	;wreg free
 29014  005422  0100               	movlb	0	; () banked
 29015  005424  516D               	movf	??_arp_checkForEntry& (0+255),w,b
 29016  005426  2560               	addwf	?_getMillis& (0+255),w,b
 29017  005428  6F71               	movwf	(??_arp_checkForEntry+4)& (0+255),b
 29018  00542A  516E               	movf	(??_arp_checkForEntry+1)& (0+255),w,b
 29019  00542C  2161               	addwfc	(?_getMillis+1)& (0+255),w,b
 29020  00542E  6F72               	movwf	(??_arp_checkForEntry+5)& (0+255),b
 29021  005430  516F               	movf	(??_arp_checkForEntry+2)& (0+255),w,b
 29022  005432  2162               	addwfc	(?_getMillis+2)& (0+255),w,b
 29023  005434  6F73               	movwf	(??_arp_checkForEntry+6)& (0+255),b
 29024  005436  5170               	movf	(??_arp_checkForEntry+3)& (0+255),w,b
 29025  005438  2163               	addwfc	(?_getMillis+3)& (0+255),w,b
 29026  00543A  6F74               	movwf	(??_arp_checkForEntry+7)& (0+255),b
 29027  00543C  5174               	movf	(??_arp_checkForEntry+7)& (0+255),w,b
 29028  00543E  1173               	iorwf	(??_arp_checkForEntry+6)& (0+255),w,b
 29029  005440  E10E               	bnz	l11212
 29030  005442  0E30               	movlw	48
 29031  005444  5D71               	subwf	(??_arp_checkForEntry+4)& (0+255),w,b
 29032  005446  0E75               	movlw	117
 29033  005448  5972               	subwfb	(??_arp_checkForEntry+5)& (0+255),w,b
 29034  00544A  B0D8               	btfsc	status,0,c
 29035  00544C  D008               	goto	l1064
 29036                           
 29037                           ; BSR set to: 0
 29038                           ;arp.c: 470: *index = i;
 29039  00544E  C06B  FFD9         	movff	arp_checkForEntry@index,fsr2l
 29040  005452  C06C  FFDA         	movff	arp_checkForEntry@index+1,fsr2h
 29041  005456  C075  FFDF         	movff	arp_checkForEntry@i,indf2
 29042                           
 29043                           ; BSR set to: 0
 29044                           ;arp.c: 471: return 1;
 29045  00545A  0E01               	movlw	1
 29046                           
 29047                           ; BSR set to: 0
 29048  00545C  0012               	return	
 29049  00545E                     l1064:
 29050  00545E                     l11212:
 29051                           
 29052                           ; BSR set to: 0
 29053  00545E  2B75               	incf	arp_checkForEntry@i& (0+255),f,b
 29054  005460  D7AC               	goto	l11198
 29055  005462                     u13710:
 29056                           
 29057                           ; BSR set to: 0
 29058                           ;arp.c: 472: }
 29059                           ;arp.c: 473: }
 29060                           ;arp.c: 474: }
 29061                           ;arp.c: 475: return 0;
 29062                           
 29063                           ; BSR set to: 0
 29064  005462  0E00               	movlw	0
 29065  005464  0012               	return	
 29066  005466                     __end_of_arp_checkForEntry:
 29067                           	opt stack 0
 29068                           tblptru	equ	0xFF8
 29069                           tblptrh	equ	0xFF7
 29070                           tblptrl	equ	0xFF6
 29071                           tablat	equ	0xFF5
 29072                           prodh	equ	0xFF4
 29073                           prodl	equ	0xFF3
 29074                           intcon	equ	0xFF2
 29075                           intcon3	equ	0xFF0
 29076                           indf0	equ	0xFEF
 29077                           postinc0	equ	0xFEE
 29078                           plusw0	equ	0xFEB
 29079                           fsr0h	equ	0xFEA
 29080                           fsr0l	equ	0xFE9
 29081                           wreg	equ	0xFE8
 29082                           indf1	equ	0xFE7
 29083                           postinc1	equ	0xFE6
 29084                           postdec1	equ	0xFE5
 29085                           plusw1	equ	0xFE3
 29086                           fsr1h	equ	0xFE2
 29087                           fsr1l	equ	0xFE1
 29088                           indf2	equ	0xFDF
 29089                           postinc2	equ	0xFDE
 29090                           postdec2	equ	0xFDD
 29091                           plusw2	equ	0xFDB
 29092                           fsr2h	equ	0xFDA
 29093                           fsr2l	equ	0xFD9
 29094                           status	equ	0xFD8
 29095                           
 29096 ;; *************** function _ipv4_cmp *****************
 29097 ;; Defined at:
 29098 ;;		line 424 in file "src/stack/protocols/ipv4.c"
 29099 ;; Parameters:    Size  Location     Type
 29100 ;;  a               2    0[BANK0 ] PTR struct ipv4_address
 29101 ;;		 -> arp_table(112), arp_sendReply@request(32), arp_parseFromRXBuffer@arp(32), 
 29102 ;;  b               2    2[BANK0 ] PTR struct ipv4_address
 29103 ;;		 -> arp_setNewEntry@ip(4), arp_checkForEntry@ip(4), arp_sendReply@myIP(4), arp_parseFromRXBuffer@arp(32), 
 29104 ;; Auto vars:     Size  Location     Type
 29105 ;;  i               1    6[BANK0 ] unsigned char 
 29106 ;; Return value:  Size  Location     Type
 29107 ;;		None               void
 29108 ;; Registers used:
 29109 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 29110 ;; Tracked objects:
 29111 ;;		On entry : 0/0
 29112 ;;		On exit  : 0/0
 29113 ;;		Unchanged: 0/0
 29114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 29115 ;;      Params:         0       4       0       0       0       0       0       0       0
 29116 ;;      Locals:         0       1       0       0       0       0       0       0       0
 29117 ;;      Temps:          0       2       0       0       0       0       0       0       0
 29118 ;;      Totals:         0       7       0       0       0       0       0       0       0
 29119 ;;Total ram usage:        7 bytes
 29120 ;; Hardware stack levels used:    1
 29121 ;; Hardware stack levels required when called:    4
 29122 ;; This function calls:
 29123 ;;		Nothing
 29124 ;; This function is called by:
 29125 ;;		_arp_parseFromRXBuffer
 29126 ;;		_arp_sendReply
 29127 ;;		_arp_checkForEntry
 29128 ;;		_arp_setNewEntry
 29129 ;; This function uses a non-reentrant model
 29130 ;;
 29131                           
 29132                           	psect	text123
 29133  006848                     __ptext123:
 29134                           	opt stack 0
 29135  006848                     _ipv4_cmp:
 29136                           	opt stack 23
 29137                           
 29138                           ;ipv4.c: 425: for (uint8_t i = 0; i < 4; i++) {
 29139                           
 29140                           ; BSR set to: 0
 29141                           ;incstack = 0
 29142  006848  0E00               	movlw	0
 29143  00684A  0100               	movlb	0	; () banked
 29144  00684C  6F66               	movwf	ipv4_cmp@i& (0+255),b
 29145  00684E                     l10750:
 29146                           
 29147                           ; BSR set to: 0
 29148  00684E  0E03               	movlw	3
 29149  006850  6566               	cpfsgt	ipv4_cmp@i& (0+255),b
 29150  006852  D001               	goto	l1209
 29151  006854  D018               	goto	u12430
 29152  006856                     l1209:
 29153                           
 29154                           ; BSR set to: 0
 29155                           ;ipv4.c: 426: if (a->address[i] != b->address[i])
 29156                           
 29157                           ; BSR set to: 0
 29158  006856  5166               	movf	ipv4_cmp@i& (0+255),w,b
 29159  006858  0D01               	mullw	1
 29160  00685A  50F3               	movf	prodl,w,c
 29161  00685C  2562               	addwf	ipv4_cmp@b& (0+255),w,b
 29162  00685E  6ED9               	movwf	fsr2l,c
 29163  006860  50F4               	movf	prodh,w,c
 29164  006862  2163               	addwfc	(ipv4_cmp@b+1)& (0+255),w,b
 29165  006864  6EDA               	movwf	fsr2h,c
 29166  006866  5166               	movf	ipv4_cmp@i& (0+255),w,b
 29167  006868  0D01               	mullw	1
 29168  00686A  50F3               	movf	prodl,w,c
 29169  00686C  2560               	addwf	ipv4_cmp@a& (0+255),w,b
 29170  00686E  6EE1               	movwf	fsr1l,c
 29171  006870  50F4               	movf	prodh,w,c
 29172  006872  2161               	addwfc	(ipv4_cmp@a+1)& (0+255),w,b
 29173  006874  6EE2               	movwf	fsr1h,c
 29174  006876  50DE               	movf	postinc2,w,c
 29175  006878  18E6               	xorwf	postinc1,w,c
 29176  00687A  B4D8               	btfsc	status,2,c
 29177  00687C  D002               	goto	l1211
 29178                           
 29179                           ; BSR set to: 0
 29180                           ;ipv4.c: 427: return 0;
 29181  00687E  90D8               	bcf	status,0,c
 29182                           
 29183                           ; BSR set to: 0
 29184  006880  0012               	return	
 29185  006882                     l1211:
 29186                           
 29187                           ; BSR set to: 0
 29188                           
 29189                           ; BSR set to: 0
 29190  006882  2B66               	incf	ipv4_cmp@i& (0+255),f,b
 29191  006884  D7E4               	goto	l10750
 29192  006886                     u12430:
 29193                           
 29194                           ; BSR set to: 0
 29195                           ;ipv4.c: 428: }
 29196                           ;ipv4.c: 429: return 1;
 29197                           
 29198                           ; BSR set to: 0
 29199  006886  80D8               	bsf	status,0,c
 29200  006888  0012               	return	
 29201  00688A                     __end_of_ipv4_cmp:
 29202                           	opt stack 0
 29203                           tblptru	equ	0xFF8
 29204                           tblptrh	equ	0xFF7
 29205                           tblptrl	equ	0xFF6
 29206                           tablat	equ	0xFF5
 29207                           prodh	equ	0xFF4
 29208                           prodl	equ	0xFF3
 29209                           intcon	equ	0xFF2
 29210                           intcon3	equ	0xFF0
 29211                           indf0	equ	0xFEF
 29212                           postinc0	equ	0xFEE
 29213                           plusw0	equ	0xFEB
 29214                           fsr0h	equ	0xFEA
 29215                           fsr0l	equ	0xFE9
 29216                           wreg	equ	0xFE8
 29217                           indf1	equ	0xFE7
 29218                           postinc1	equ	0xFE6
 29219                           postdec1	equ	0xFE5
 29220                           plusw1	equ	0xFE3
 29221                           fsr1h	equ	0xFE2
 29222                           fsr1l	equ	0xFE1
 29223                           indf2	equ	0xFDF
 29224                           postinc2	equ	0xFDE
 29225                           postdec2	equ	0xFDD
 29226                           plusw2	equ	0xFDB
 29227                           fsr2h	equ	0xFDA
 29228                           fsr2l	equ	0xFD9
 29229                           status	equ	0xFD8
 29230                           
 29231 ;; *************** function _getMillis *****************
 29232 ;; Defined at:
 29233 ;;		line 34 in file "src/stack/time.c"
 29234 ;; Parameters:    Size  Location     Type
 29235 ;;		None
 29236 ;; Auto vars:     Size  Location     Type
 29237 ;;		None
 29238 ;; Return value:  Size  Location     Type
 29239 ;;                  4    0[BANK0 ] unsigned long 
 29240 ;; Registers used:
 29241 ;;		None
 29242 ;; Tracked objects:
 29243 ;;		On entry : 0/0
 29244 ;;		On exit  : 0/0
 29245 ;;		Unchanged: 0/0
 29246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 29247 ;;      Params:         0       4       0       0       0       0       0       0       0
 29248 ;;      Locals:         0       0       0       0       0       0       0       0       0
 29249 ;;      Temps:          0       0       0       0       0       0       0       0       0
 29250 ;;      Totals:         0       4       0       0       0       0       0       0       0
 29251 ;;Total ram usage:        4 bytes
 29252 ;; Hardware stack levels used:    1
 29253 ;; Hardware stack levels required when called:    4
 29254 ;; This function calls:
 29255 ;;		Nothing
 29256 ;; This function is called by:
 29257 ;;		_ethernet_rxGetNewFrame
 29258 ;;		_arp_handleNewPacket
 29259 ;;		_arp_probe
 29260 ;;		_arp_gratuitous
 29261 ;;		_arp_checkForEntry
 29262 ;;		_ipv4_sendFrame
 29263 ;; This function uses a non-reentrant model
 29264 ;;
 29265                           
 29266                           	psect	text124
 29267  006E00                     __ptext124:
 29268                           	opt stack 0
 29269  006E00                     _getMillis:
 29270                           	opt stack 24
 29271                           
 29272                           ;time.c: 35: return time;
 29273                           
 29274                           ; BSR set to: 0
 29275                           ;incstack = 0
 29276  006E00  C2B8  F060         	movff	_time,?_getMillis	;volatile
 29277  006E04  C2B9  F061         	movff	_time+1,?_getMillis+1	;volatile
 29278  006E08  C2BA  F062         	movff	_time+2,?_getMillis+2	;volatile
 29279  006E0C  C2BB  F063         	movff	_time+3,?_getMillis+3	;volatile
 29280  006E10  0012               	return		;funcret
 29281  006E12                     __end_of_getMillis:
 29282                           	opt stack 0
 29283                           tblptru	equ	0xFF8
 29284                           tblptrh	equ	0xFF7
 29285                           tblptrl	equ	0xFF6
 29286                           tablat	equ	0xFF5
 29287                           prodh	equ	0xFF4
 29288                           prodl	equ	0xFF3
 29289                           intcon	equ	0xFF2
 29290                           intcon3	equ	0xFF0
 29291                           indf0	equ	0xFEF
 29292                           postinc0	equ	0xFEE
 29293                           plusw0	equ	0xFEB
 29294                           fsr0h	equ	0xFEA
 29295                           fsr0l	equ	0xFE9
 29296                           wreg	equ	0xFE8
 29297                           indf1	equ	0xFE7
 29298                           postinc1	equ	0xFE6
 29299                           postdec1	equ	0xFE5
 29300                           plusw1	equ	0xFE3
 29301                           fsr1h	equ	0xFE2
 29302                           fsr1l	equ	0xFE1
 29303                           indf2	equ	0xFDF
 29304                           postinc2	equ	0xFDE
 29305                           postdec2	equ	0xFDD
 29306                           plusw2	equ	0xFDB
 29307                           fsr2h	equ	0xFDA
 29308                           fsr2l	equ	0xFD9
 29309                           status	equ	0xFD8
 29310                           
 29311 ;; *************** function _UART_special *****************
 29312 ;; Defined at:
 29313 ;;		line 75 in file "src/system/uart.c"
 29314 ;; Parameters:    Size  Location     Type
 29315 ;;  code            1    wreg     unsigned char 
 29316 ;; Auto vars:     Size  Location     Type
 29317 ;;  code            1    2[BANK0 ] unsigned char 
 29318 ;; Return value:  Size  Location     Type
 29319 ;;                  2    0[BANK0 ] PTR unsigned char 
 29320 ;; Registers used:
 29321 ;;		wreg, status,2, status,0
 29322 ;; Tracked objects:
 29323 ;;		On entry : 0/0
 29324 ;;		On exit  : 0/0
 29325 ;;		Unchanged: 0/0
 29326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 29327 ;;      Params:         0       2       0       0       0       0       0       0       0
 29328 ;;      Locals:         0       1       0       0       0       0       0       0       0
 29329 ;;      Temps:          0       0       0       0       0       0       0       0       0
 29330 ;;      Totals:         0       3       0       0       0       0       0       0       0
 29331 ;;Total ram usage:        3 bytes
 29332 ;; Hardware stack levels used:    1
 29333 ;; Hardware stack levels required when called:    4
 29334 ;; This function calls:
 29335 ;;		Nothing
 29336 ;; This function is called by:
 29337 ;;		_handleStackBackgroundTasks
 29338 ;;		_main
 29339 ;; This function uses a non-reentrant model
 29340 ;;
 29341                           
 29342                           	psect	text125
 29343  006D1C                     __ptext125:
 29344                           	opt stack 0
 29345  006D1C                     _UART_special:
 29346                           	opt stack 25
 29347                           
 29348                           ;incstack = 0
 29349                           ;UART_special@code stored from wreg
 29350  006D1C  0100               	movlb	0	; () banked
 29351  006D1E  6F62               	movwf	UART_special@code& (0+255),b
 29352                           
 29353                           ;uart.c: 76: switch (code) {
 29354  006D20  D006               	goto	l819
 29355  006D22                     
 29356                           ;uart.c: 78: return (const char*)"-------------------------------------------------";
 29357  006D22  0EA0               	movlw	low STR_66
 29358  006D24  0100               	movlb	0	; () banked
 29359  006D26  6F60               	movwf	?_UART_special& (0+255),b
 29360  006D28  0E7C               	movlw	high STR_66
 29361  006D2A  6F61               	movwf	(?_UART_special+1)& (0+255),b
 29362                           
 29363                           ; BSR set to: 0
 29364                           ;uart.c: 79: }
 29365                           
 29366                           ; BSR set to: 0
 29367  006D2C  0012               	return	
 29368  006D2E                     l819:
 29369                           
 29370                           ; BSR set to: 0
 29371  006D2E  0100               	movlb	0	; () banked
 29372  006D30  5162               	movf	UART_special@code& (0+255),w,b
 29373                           
 29374                           ; Switch size 1, requested type "space"
 29375                           ; Number of cases is 1, Range of values is 0 to 0
 29376                           ; switch strategies available:
 29377                           ; Name         Instructions Cycles
 29378                           ; simple_byte            4     3 (average)
 29379                           ;	Chosen strategy is simple_byte
 29380  006D32  0A00               	xorlw	0	; case 0
 29381  006D34  A4D8               	btfss	status,2,c
 29382  006D36  0012               	return	
 29383  006D38  D7F4               	goto	l820
 29384  006D3A                     __end_of_UART_special:
 29385                           	opt stack 0
 29386                           tblptru	equ	0xFF8
 29387                           tblptrh	equ	0xFF7
 29388                           tblptrl	equ	0xFF6
 29389                           tablat	equ	0xFF5
 29390                           prodh	equ	0xFF4
 29391                           prodl	equ	0xFF3
 29392                           intcon	equ	0xFF2
 29393                           intcon3	equ	0xFF0
 29394                           indf0	equ	0xFEF
 29395                           postinc0	equ	0xFEE
 29396                           plusw0	equ	0xFEB
 29397                           fsr0h	equ	0xFEA
 29398                           fsr0l	equ	0xFE9
 29399                           wreg	equ	0xFE8
 29400                           indf1	equ	0xFE7
 29401                           postinc1	equ	0xFE6
 29402                           postdec1	equ	0xFE5
 29403                           plusw1	equ	0xFE3
 29404                           fsr1h	equ	0xFE2
 29405                           fsr1l	equ	0xFE1
 29406                           indf2	equ	0xFDF
 29407                           postinc2	equ	0xFDE
 29408                           postdec2	equ	0xFDD
 29409                           plusw2	equ	0xFDB
 29410                           fsr2h	equ	0xFDA
 29411                           fsr2l	equ	0xFD9
 29412                           status	equ	0xFD8
 29413                           
 29414 ;; *************** function _ethernetController_getDeviceName *****************
 29415 ;; Defined at:
 29416 ;;		line 145 in file "src/enc424j600/ENC424J600.c"
 29417 ;; Parameters:    Size  Location     Type
 29418 ;;		None
 29419 ;; Auto vars:     Size  Location     Type
 29420 ;;  string         11    2[BANK0 ] const unsigned char [11]
 29421 ;; Return value:  Size  Location     Type
 29422 ;;                  2    0[BANK0 ] PTR unsigned char 
 29423 ;; Registers used:
 29424 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 29425 ;; Tracked objects:
 29426 ;;		On entry : 0/0
 29427 ;;		On exit  : 0/0
 29428 ;;		Unchanged: 0/0
 29429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 29430 ;;      Params:         0       2       0       0       0       0       0       0       0
 29431 ;;      Locals:         0      11       0       0       0       0       0       0       0
 29432 ;;      Temps:          0       0       0       0       0       0       0       0       0
 29433 ;;      Totals:         0      13       0       0       0       0       0       0       0
 29434 ;;Total ram usage:       13 bytes
 29435 ;; Hardware stack levels used:    1
 29436 ;; Hardware stack levels required when called:    4
 29437 ;; This function calls:
 29438 ;;		Nothing
 29439 ;; This function is called by:
 29440 ;;		_main
 29441 ;; This function uses a non-reentrant model
 29442 ;;
 29443                           
 29444                           	psect	text126
 29445  006CB8                     __ptext126:
 29446                           	opt stack 0
 29447  006CB8                     _ethernetController_getDeviceName:
 29448                           	opt stack 26
 29449                           
 29450                           ;ENC424J600.c: 146: const char string [] = "ENC424J600";
 29451                           
 29452                           ; BSR set to: 0
 29453                           ;incstack = 0
 29454  006CB8  0E59               	movlw	low ethernetController_getDeviceName@F6080
 29455  006CBA  6EF6               	movwf	tblptrl,c
 29456  006CBC                     	if	1	;There is more than 1 active tblptr byte
 29457  006CBC  0E7C               	movlw	high ethernetController_getDeviceName@F6080
 29458  006CBE  6EF7               	movwf	tblptrh,c
 29459  006CC0                     	endif
 29460  006CC0                     	if	0	;There are less than 3 active tblptr bytes
 29461  006CC0                     	endif
 29462  006CC0  EE20  F062         	lfsr	2,ethernetController_getDeviceName@string
 29463  006CC4  0E0A               	movlw	10
 29464  006CC6                     u15250:
 29465  006CC6  0009               	tblrd		*+
 29466  006CC8  CFF5 FFDE          	movff	tablat,postinc2
 29467  006CCC  06E8               	decf	wreg,f,c
 29468  006CCE  E2FB               	bc	u15250
 29469                           
 29470                           ;ENC424J600.c: 147: return (char*) string;
 29471  006CD0  0E62               	movlw	low ethernetController_getDeviceName@string
 29472  006CD2  0100               	movlb	0	; () banked
 29473  006CD4  6F60               	movwf	?_ethernetController_getDeviceName& (0+255),b
 29474  006CD6  0E00               	movlw	high ethernetController_getDeviceName@string
 29475  006CD8  6F61               	movwf	(?_ethernetController_getDeviceName+1)& (0+255),b
 29476  006CDA  0012               	return	
 29477  006CDC                     __end_of_ethernetController_getDeviceName:
 29478                           	opt stack 0
 29479                           tblptru	equ	0xFF8
 29480                           tblptrh	equ	0xFF7
 29481                           tblptrl	equ	0xFF6
 29482                           tablat	equ	0xFF5
 29483                           prodh	equ	0xFF4
 29484                           prodl	equ	0xFF3
 29485                           intcon	equ	0xFF2
 29486                           intcon3	equ	0xFF0
 29487                           indf0	equ	0xFEF
 29488                           postinc0	equ	0xFEE
 29489                           plusw0	equ	0xFEB
 29490                           fsr0h	equ	0xFEA
 29491                           fsr0l	equ	0xFE9
 29492                           wreg	equ	0xFE8
 29493                           indf1	equ	0xFE7
 29494                           postinc1	equ	0xFE6
 29495                           postdec1	equ	0xFE5
 29496                           plusw1	equ	0xFE3
 29497                           fsr1h	equ	0xFE2
 29498                           fsr1l	equ	0xFE1
 29499                           indf2	equ	0xFDF
 29500                           postinc2	equ	0xFDE
 29501                           postdec2	equ	0xFDD
 29502                           plusw2	equ	0xFDB
 29503                           fsr2h	equ	0xFDA
 29504                           fsr2l	equ	0xFD9
 29505                           status	equ	0xFD8
 29506                           
 29507 ;; *************** function _UARTInit *****************
 29508 ;; Defined at:
 29509 ;;		line 26 in file "src/system/uart.c"
 29510 ;; Parameters:    Size  Location     Type
 29511 ;;		None
 29512 ;; Auto vars:     Size  Location     Type
 29513 ;;		None
 29514 ;; Return value:  Size  Location     Type
 29515 ;;                  1    wreg      void 
 29516 ;; Registers used:
 29517 ;;		wreg, status,2
 29518 ;; Tracked objects:
 29519 ;;		On entry : 0/0
 29520 ;;		On exit  : 0/0
 29521 ;;		Unchanged: 0/0
 29522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 29523 ;;      Params:         0       0       0       0       0       0       0       0       0
 29524 ;;      Locals:         0       0       0       0       0       0       0       0       0
 29525 ;;      Temps:          0       0       0       0       0       0       0       0       0
 29526 ;;      Totals:         0       0       0       0       0       0       0       0       0
 29527 ;;Total ram usage:        0 bytes
 29528 ;; Hardware stack levels used:    1
 29529 ;; Hardware stack levels required when called:    4
 29530 ;; This function calls:
 29531 ;;		Nothing
 29532 ;; This function is called by:
 29533 ;;		_main
 29534 ;; This function uses a non-reentrant model
 29535 ;;
 29536                           
 29537                           	psect	text127
 29538  006E32                     __ptext127:
 29539                           	opt stack 0
 29540  006E32                     _UARTInit:
 29541                           	opt stack 26
 29542                           
 29543                           ;uart.c: 27: TXSTA1bits.TXEN = 1;
 29544                           
 29545                           ; BSR set to: 0
 29546                           ;incstack = 0
 29547  006E32  8AAC               	bsf	4012,5,c	;volatile
 29548                           
 29549                           ;uart.c: 28: TXSTA1bits.SYNC = 0;
 29550  006E34  98AC               	bcf	4012,4,c	;volatile
 29551                           
 29552                           ;uart.c: 29: RCSTA1bits.SPEN = 1;
 29553  006E36  8EAB               	bsf	4011,7,c	;volatile
 29554                           
 29555                           ;uart.c: 30: TXSTA1bits.TX9 = 1;
 29556  006E38  8CAC               	bsf	4012,6,c	;volatile
 29557                           
 29558                           ;uart.c: 31: TXSTA1bits.TX9D = 1;
 29559  006E3A  80AC               	bsf	4012,0,c	;volatile
 29560                           
 29561                           ;uart.c: 32: SPBRG = 3;
 29562  006E3C  0E03               	movlw	3
 29563  006E3E  6EAF               	movwf	4015,c	;volatile
 29564  006E40  0012               	return		;funcret
 29565  006E42                     __end_of_UARTInit:
 29566                           	opt stack 0
 29567                           tblptru	equ	0xFF8
 29568                           tblptrh	equ	0xFF7
 29569                           tblptrl	equ	0xFF6
 29570                           tablat	equ	0xFF5
 29571                           prodh	equ	0xFF4
 29572                           prodl	equ	0xFF3
 29573                           intcon	equ	0xFF2
 29574                           intcon3	equ	0xFF0
 29575                           indf0	equ	0xFEF
 29576                           postinc0	equ	0xFEE
 29577                           plusw0	equ	0xFEB
 29578                           fsr0h	equ	0xFEA
 29579                           fsr0l	equ	0xFE9
 29580                           wreg	equ	0xFE8
 29581                           indf1	equ	0xFE7
 29582                           postinc1	equ	0xFE6
 29583                           postdec1	equ	0xFE5
 29584                           plusw1	equ	0xFE3
 29585                           fsr1h	equ	0xFE2
 29586                           fsr1l	equ	0xFE1
 29587                           indf2	equ	0xFDF
 29588                           postinc2	equ	0xFDE
 29589                           postdec2	equ	0xFDD
 29590                           plusw2	equ	0xFDB
 29591                           fsr2h	equ	0xFDA
 29592                           fsr2l	equ	0xFD9
 29593                           status	equ	0xFD8
 29594                           
 29595 ;; *************** function _ISR *****************
 29596 ;; Defined at:
 29597 ;;		line 268 in file "src/system/main.c"
 29598 ;; Parameters:    Size  Location     Type
 29599 ;;		None
 29600 ;; Auto vars:     Size  Location     Type
 29601 ;;		None
 29602 ;; Return value:  Size  Location     Type
 29603 ;;                  1    wreg      void 
 29604 ;; Registers used:
 29605 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 29606 ;; Tracked objects:
 29607 ;;		On entry : 0/0
 29608 ;;		On exit  : 0/0
 29609 ;;		Unchanged: 0/0
 29610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 29611 ;;      Params:         0       0       0       0       0       0       0       0       0
 29612 ;;      Locals:         0       0       0       0       0       0       0       0       0
 29613 ;;      Temps:         18       0       0       0       0       0       0       0       0
 29614 ;;      Totals:        18       0       0       0       0       0       0       0       0
 29615 ;;Total ram usage:       18 bytes
 29616 ;; Hardware stack levels used:    1
 29617 ;; Hardware stack levels required when called:    3
 29618 ;; This function calls:
 29619 ;;		_buttonHandler
 29620 ;;		_sevenSegmentUpdate
 29621 ;;		_updateTime
 29622 ;; This function is called by:
 29623 ;;		Interrupt level 2
 29624 ;; This function uses a non-reentrant model
 29625 ;;
 29626                           
 29627                           	psect	intcode
 29628  000008                     __pintcode:
 29629                           	opt stack 0
 29630  000008                     _ISR:
 29631                           	opt stack 15
 29632                           
 29633                           ;incstack = 0
 29634  000008  824F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 29635  00000A  CFFA F016          	movff	pclath,??_ISR
 29636  00000E  CFFB F017          	movff	pclatu,??_ISR+1
 29637  000012  CFE9 F018          	movff	fsr0l,??_ISR+2
 29638  000016  CFEA F019          	movff	fsr0h,??_ISR+3
 29639  00001A  CFE1 F01A          	movff	fsr1l,??_ISR+4
 29640  00001E  CFE2 F01B          	movff	fsr1h,??_ISR+5
 29641  000022  CFD9 F01C          	movff	fsr2l,??_ISR+6
 29642  000026  CFDA F01D          	movff	fsr2h,??_ISR+7
 29643  00002A  CFF3 F01E          	movff	prodl,??_ISR+8
 29644  00002E  CFF4 F01F          	movff	prodh,??_ISR+9
 29645  000032  CFF6 F020          	movff	tblptrl,??_ISR+10
 29646  000036  CFF7 F021          	movff	tblptrh,??_ISR+11
 29647  00003A  CFF8 F022          	movff	tblptru,??_ISR+12
 29648  00003E  CFF5 F023          	movff	tablat,??_ISR+13
 29649  000042  C04F  F024         	movff	btemp,??_ISR+14
 29650  000046  C050  F025         	movff	btemp+1,??_ISR+15
 29651  00004A  C051  F026         	movff	btemp+2,??_ISR+16
 29652  00004E  C052  F027         	movff	btemp+3,??_ISR+17
 29653                           
 29654                           ;main.c: 270: if (PIR1bits.CCP1IF) {
 29655  000052  A49E               	btfss	3998,2,c	;volatile
 29656  000054  D003               	goto	i2l724
 29657                           
 29658                           ;main.c: 271: PIR1bits.CCP1IF = 0;
 29659  000056  949E               	bcf	3998,2,c	;volatile
 29660                           
 29661                           ;main.c: 273: updateTime();
 29662  000058  EC21  F037         	call	_updateTime	;wreg free
 29663  00005C                     i2l724:
 29664                           
 29665                           ;main.c: 274: }
 29666                           ;main.c: 276: if (INTCONbits.TMR0IF) {
 29667  00005C  A4F2               	btfss	intcon,2,c	;volatile
 29668  00005E  D00D               	goto	i2l725
 29669                           
 29670                           ;main.c: 277: INTCONbits.TMR0IF = 0;
 29671  000060  94F2               	bcf	intcon,2,c	;volatile
 29672                           
 29673                           ;main.c: 278: sevenSegmentUpdate(numberToDisplay);
 29674  000062  C030  F00F         	movff	_numberToDisplay,sevenSegmentUpdate@numberToDisplay	;volatile
 29675  000066  C031  F010         	movff	_numberToDisplay+1,sevenSegmentUpdate@numberToDisplay+1	;volatile
 29676  00006A  EC22  F029         	call	_sevenSegmentUpdate	;wreg free
 29677                           
 29678                           ;main.c: 279: buttonHandler(&buttonState);
 29679  00006E  0EE7               	movlw	low _buttonState
 29680  000070  6E01               	movwf	buttonHandler@state,c
 29681  000072  0E02               	movlw	high _buttonState
 29682  000074  6E02               	movwf	buttonHandler@state+1,c
 29683  000076  ECE4  F02B         	call	_buttonHandler	;wreg free
 29684  00007A                     i2l725:
 29685                           
 29686                           ;main.c: 282: }
 29687                           ;main.c: 284: if (INTCON3bits.INT2IF) {
 29688  00007A  B2F0               	btfsc	intcon3,1,c	;volatile
 29689                           
 29690                           ;main.c: 285: INTCON3bits.INT2IF = 0;
 29691  00007C  92F0               	bcf	intcon3,1,c	;volatile
 29692                           
 29693                           ;main.c: 292: }
 29694                           ;main.c: 293: if (RCIF) {
 29695  00007E  C027  F052         	movff	??_ISR+17,btemp+3
 29696  000082  C026  F051         	movff	??_ISR+16,btemp+2
 29697  000086  C025  F050         	movff	??_ISR+15,btemp+1
 29698  00008A  C024  F04F         	movff	??_ISR+14,btemp
 29699  00008E  C023  FFF5         	movff	??_ISR+13,tablat
 29700  000092  C022  FFF8         	movff	??_ISR+12,tblptru
 29701  000096  C021  FFF7         	movff	??_ISR+11,tblptrh
 29702  00009A  C020  FFF6         	movff	??_ISR+10,tblptrl
 29703  00009E  C01F  FFF4         	movff	??_ISR+9,prodh
 29704  0000A2  C01E  FFF3         	movff	??_ISR+8,prodl
 29705  0000A6  C01D  FFDA         	movff	??_ISR+7,fsr2h
 29706  0000AA  C01C  FFD9         	movff	??_ISR+6,fsr2l
 29707  0000AE  C01B  FFE2         	movff	??_ISR+5,fsr1h
 29708  0000B2  C01A  FFE1         	movff	??_ISR+4,fsr1l
 29709  0000B6  C019  FFEA         	movff	??_ISR+3,fsr0h
 29710  0000BA  C018  FFE9         	movff	??_ISR+2,fsr0l
 29711  0000BE  C017  FFFB         	movff	??_ISR+1,pclatu
 29712  0000C2  C016  FFFA         	movff	??_ISR,pclath
 29713  0000C6  924F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 29714  0000C8  0011               	retfie		f
 29715  0000CA                     __end_of_ISR:
 29716                           	opt stack 0
 29717                           pclatu	equ	0xFFB
 29718                           pclath	equ	0xFFA
 29719                           tblptru	equ	0xFF8
 29720                           tblptrh	equ	0xFF7
 29721                           tblptrl	equ	0xFF6
 29722                           tablat	equ	0xFF5
 29723                           prodh	equ	0xFF4
 29724                           prodl	equ	0xFF3
 29725                           intcon	equ	0xFF2
 29726                           intcon3	equ	0xFF0
 29727                           indf0	equ	0xFEF
 29728                           postinc0	equ	0xFEE
 29729                           plusw0	equ	0xFEB
 29730                           fsr0h	equ	0xFEA
 29731                           fsr0l	equ	0xFE9
 29732                           wreg	equ	0xFE8
 29733                           indf1	equ	0xFE7
 29734                           postinc1	equ	0xFE6
 29735                           postdec1	equ	0xFE5
 29736                           plusw1	equ	0xFE3
 29737                           fsr1h	equ	0xFE2
 29738                           fsr1l	equ	0xFE1
 29739                           indf2	equ	0xFDF
 29740                           postinc2	equ	0xFDE
 29741                           postdec2	equ	0xFDD
 29742                           plusw2	equ	0xFDB
 29743                           fsr2h	equ	0xFDA
 29744                           fsr2l	equ	0xFD9
 29745                           status	equ	0xFD8
 29746                           
 29747 ;; *************** function _updateTime *****************
 29748 ;; Defined at:
 29749 ;;		line 30 in file "src/stack/time.c"
 29750 ;; Parameters:    Size  Location     Type
 29751 ;;		None
 29752 ;; Auto vars:     Size  Location     Type
 29753 ;;		None
 29754 ;; Return value:  Size  Location     Type
 29755 ;;                  1    wreg      void 
 29756 ;; Registers used:
 29757 ;;		wreg, status,2, status,0
 29758 ;; Tracked objects:
 29759 ;;		On entry : 0/0
 29760 ;;		On exit  : 0/0
 29761 ;;		Unchanged: 0/0
 29762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 29763 ;;      Params:         0       0       0       0       0       0       0       0       0
 29764 ;;      Locals:         0       0       0       0       0       0       0       0       0
 29765 ;;      Temps:          0       0       0       0       0       0       0       0       0
 29766 ;;      Totals:         0       0       0       0       0       0       0       0       0
 29767 ;;Total ram usage:        0 bytes
 29768 ;; Hardware stack levels used:    1
 29769 ;; This function calls:
 29770 ;;		Nothing
 29771 ;; This function is called by:
 29772 ;;		_ISR
 29773 ;; This function uses a non-reentrant model
 29774 ;;
 29775                           
 29776                           	psect	text129
 29777  006E42                     __ptext129:
 29778                           	opt stack 0
 29779  006E42                     _updateTime:
 29780                           	opt stack 17
 29781                           
 29782                           ;time.c: 31: time++;
 29783                           
 29784                           ;incstack = 0
 29785  006E42  0E01               	movlw	1
 29786  006E44  0102               	movlb	2	; () banked
 29787  006E46  27B8               	addwf	_time& (0+255),f,b	;volatile
 29788  006E48  0E00               	movlw	0
 29789  006E4A  23B9               	addwfc	(_time+1)& (0+255),f,b	;volatile
 29790  006E4C  23BA               	addwfc	(_time+2)& (0+255),f,b	;volatile
 29791  006E4E  23BB               	addwfc	(_time+3)& (0+255),f,b	;volatile
 29792                           
 29793                           ; BSR set to: 2
 29794  006E50  0012               	return		;funcret
 29795  006E52                     __end_of_updateTime:
 29796                           	opt stack 0
 29797                           pclatu	equ	0xFFB
 29798                           pclath	equ	0xFFA
 29799                           tblptru	equ	0xFF8
 29800                           tblptrh	equ	0xFF7
 29801                           tblptrl	equ	0xFF6
 29802                           tablat	equ	0xFF5
 29803                           prodh	equ	0xFF4
 29804                           prodl	equ	0xFF3
 29805                           intcon	equ	0xFF2
 29806                           intcon3	equ	0xFF0
 29807                           indf0	equ	0xFEF
 29808                           postinc0	equ	0xFEE
 29809                           plusw0	equ	0xFEB
 29810                           fsr0h	equ	0xFEA
 29811                           fsr0l	equ	0xFE9
 29812                           wreg	equ	0xFE8
 29813                           indf1	equ	0xFE7
 29814                           postinc1	equ	0xFE6
 29815                           postdec1	equ	0xFE5
 29816                           plusw1	equ	0xFE3
 29817                           fsr1h	equ	0xFE2
 29818                           fsr1l	equ	0xFE1
 29819                           indf2	equ	0xFDF
 29820                           postinc2	equ	0xFDE
 29821                           postdec2	equ	0xFDD
 29822                           plusw2	equ	0xFDB
 29823                           fsr2h	equ	0xFDA
 29824                           fsr2l	equ	0xFD9
 29825                           status	equ	0xFD8
 29826                           
 29827 ;; *************** function _sevenSegmentUpdate *****************
 29828 ;; Defined at:
 29829 ;;		line 41 in file "src/system/sevenseg.c"
 29830 ;; Parameters:    Size  Location     Type
 29831 ;;  numberToDisp    2   14[COMRAM] unsigned int 
 29832 ;; Auto vars:     Size  Location     Type
 29833 ;;  i               1   20[COMRAM] unsigned char 
 29834 ;; Return value:  Size  Location     Type
 29835 ;;                  1    wreg      void 
 29836 ;; Registers used:
 29837 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 29838 ;; Tracked objects:
 29839 ;;		On entry : 0/0
 29840 ;;		On exit  : 0/0
 29841 ;;		Unchanged: 0/0
 29842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 29843 ;;      Params:         2       0       0       0       0       0       0       0       0
 29844 ;;      Locals:         3       0       0       0       0       0       0       0       0
 29845 ;;      Temps:          2       0       0       0       0       0       0       0       0
 29846 ;;      Totals:         7       0       0       0       0       0       0       0       0
 29847 ;;Total ram usage:        7 bytes
 29848 ;; Hardware stack levels used:    1
 29849 ;; Hardware stack levels required when called:    2
 29850 ;; This function calls:
 29851 ;;		_parseNumber
 29852 ;; This function is called by:
 29853 ;;		_ISR
 29854 ;; This function uses a non-reentrant model
 29855 ;;
 29856                           
 29857                           	psect	text130
 29858  005244                     __ptext130:
 29859                           	opt stack 0
 29860  005244                     _sevenSegmentUpdate:
 29861                           	opt stack 15
 29862                           
 29863                           ;sevenseg.c: 43: uint8_t static digitPointer = 0;
 29864                           ;sevenseg.c: 44: uint8_t static digitsToDisplay[3] = {0, 0, 0};
 29865                           ;sevenseg.c: 45: PORTC &= ~(unsigned)(1 << digitPointer);
 29866                           
 29867                           ; BSR set to: 2
 29868                           ;incstack = 0
 29869  005244  C043  F011         	movff	sevenSegmentUpdate@digitPointer,??_sevenSegmentUpdate
 29870  005248  0E01               	movlw	1
 29871  00524A  6E12               	movwf	(??_sevenSegmentUpdate+1)& (0+255),c
 29872  00524C  2A11               	incf	??_sevenSegmentUpdate,f,c
 29873  00524E  D002               	goto	i2u1031_44
 29874  005250                     i2u1031_45:
 29875  005250  90D8               	bcf	status,0,c
 29876  005252  3612               	rlcf	??_sevenSegmentUpdate+1,f,c
 29877  005254                     i2u1031_44:
 29878  005254  2E11               	decfsz	??_sevenSegmentUpdate,f,c
 29879  005256  D7FC               	goto	i2u1031_45
 29880  005258  5012               	movf	??_sevenSegmentUpdate+1,w,c
 29881  00525A  0AFF               	xorlw	255
 29882  00525C  1682               	andwf	3970,f,c	;volatile
 29883                           
 29884                           ;sevenseg.c: 46: PORTA = 0x00;
 29885  00525E  0E00               	movlw	0
 29886  005260  6E80               	movwf	3968,c	;volatile
 29887                           
 29888                           ;sevenseg.c: 47: digitPointer = (unsigned)((digitPointer >= 2) ? 0 : digitPointer + 1);
 29889  005262  0E02               	movlw	2
 29890  005264  6043               	cpfslt	sevenSegmentUpdate@digitPointer,c
 29891  005266  D007               	goto	i2l757
 29892  005268  0E01               	movlw	1
 29893  00526A  2443               	addwf	sevenSegmentUpdate@digitPointer,w,c
 29894  00526C  6E13               	movwf	_sevenSegmentUpdate$2676,c
 29895  00526E  6A14               	clrf	_sevenSegmentUpdate$2676+1,c
 29896  005270  0E00               	movlw	0
 29897  005272  2214               	addwfc	_sevenSegmentUpdate$2676+1,f,c
 29898  005274  D004               	goto	i2l759
 29899  005276                     i2l757:
 29900  005276  0E00               	movlw	0
 29901  005278  6E14               	movwf	_sevenSegmentUpdate$2676+1,c
 29902  00527A  0E00               	movlw	0
 29903  00527C  6E13               	movwf	_sevenSegmentUpdate$2676,c
 29904  00527E                     i2l759:
 29905  00527E  C013  F043         	movff	_sevenSegmentUpdate$2676,sevenSegmentUpdate@digitPointer
 29906                           
 29907                           ;sevenseg.c: 49: if (numberToDisplay > 999) {
 29908  005282  0EE8               	movlw	232
 29909  005284  5C0F               	subwf	sevenSegmentUpdate@numberToDisplay,w,c
 29910  005286  0E03               	movlw	3
 29911  005288  5810               	subwfb	sevenSegmentUpdate@numberToDisplay+1,w,c
 29912  00528A  B0D8               	btfsc	status,0,c
 29913  00528C  0012               	return	
 29914                           
 29915                           ;sevenseg.c: 51: }
 29916                           ;sevenseg.c: 52: for (uint8_t i = 0; i < 3; i++) {
 29917                           
 29918                           ;sevenseg.c: 50: return;
 29919  00528E  0E00               	movlw	0
 29920  005290  6E15               	movwf	sevenSegmentUpdate@i,c
 29921  005292                     i2l9072:
 29922  005292  0E02               	movlw	2
 29923  005294  6415               	cpfsgt	sevenSegmentUpdate@i,c
 29924  005296  D001               	goto	i2l762
 29925  005298  D013               	goto	i2u1035_40
 29926  00529A                     i2l762:
 29927                           
 29928                           ;sevenseg.c: 53: digitsToDisplay[i] = parseNumber(numberToDisplay, i);
 29929  00529A  5015               	movf	sevenSegmentUpdate@i,w,c
 29930  00529C  0D01               	mullw	1
 29931  00529E  0EC8               	movlw	low sevenSegmentUpdate@digitsToDisplay
 29932  0052A0  24F3               	addwf	prodl,w,c
 29933  0052A2  6ED9               	movwf	fsr2l,c
 29934  0052A4  0E02               	movlw	high sevenSegmentUpdate@digitsToDisplay
 29935  0052A6  20F4               	addwfc	prodh,w,c
 29936  0052A8  6EDA               	movwf	fsr2h,c
 29937  0052AA  C00F  F008         	movff	sevenSegmentUpdate@numberToDisplay,parseNumber@numberToDisplay
 29938  0052AE  C010  F009         	movff	sevenSegmentUpdate@numberToDisplay+1,parseNumber@numberToDisplay+1
 29939  0052B2  C015  F00A         	movff	sevenSegmentUpdate@i,parseNumber@digit
 29940  0052B6  EC12  F02F         	call	_parseNumber	;wreg free
 29941  0052BA  6EDF               	movwf	indf2,c
 29942  0052BC  2A15               	incf	sevenSegmentUpdate@i,f,c
 29943  0052BE  D7E9               	goto	i2l9072
 29944  0052C0                     i2u1035_40:
 29945                           
 29946                           ;sevenseg.c: 54: }
 29947                           ;sevenseg.c: 55: PORTC |= (unsigned)(1 << digitPointer);
 29948  0052C0  C043  F011         	movff	sevenSegmentUpdate@digitPointer,??_sevenSegmentUpdate
 29949  0052C4  0E01               	movlw	1
 29950  0052C6  6E12               	movwf	(??_sevenSegmentUpdate+1)& (0+255),c
 29951  0052C8  2A11               	incf	??_sevenSegmentUpdate,f,c
 29952  0052CA  D002               	goto	i2u1036_44
 29953  0052CC                     i2u1036_45:
 29954  0052CC  90D8               	bcf	status,0,c
 29955  0052CE  3612               	rlcf	??_sevenSegmentUpdate+1,f,c
 29956  0052D0                     i2u1036_44:
 29957  0052D0  2E11               	decfsz	??_sevenSegmentUpdate,f,c
 29958  0052D2  D7FC               	goto	i2u1036_45
 29959  0052D4  5012               	movf	??_sevenSegmentUpdate+1,w,c
 29960  0052D6  1282               	iorwf	3970,f,c	;volatile
 29961                           
 29962                           ;sevenseg.c: 56: PORTA = (sevenSegCharacters[digitsToDisplay[digitPointer]]);
 29963  0052D8  5043               	movf	sevenSegmentUpdate@digitPointer,w,c
 29964  0052DA  0D01               	mullw	1
 29965  0052DC  0EC8               	movlw	low sevenSegmentUpdate@digitsToDisplay
 29966  0052DE  24F3               	addwf	prodl,w,c
 29967  0052E0  6ED9               	movwf	fsr2l,c
 29968  0052E2  0E02               	movlw	high sevenSegmentUpdate@digitsToDisplay
 29969  0052E4  20F4               	addwfc	prodh,w,c
 29970  0052E6  6EDA               	movwf	fsr2h,c
 29971  0052E8  50DF               	movf	indf2,w,c
 29972  0052EA  6E11               	movwf	??_sevenSegmentUpdate& (0+255),c
 29973  0052EC  5011               	movf	??_sevenSegmentUpdate,w,c
 29974  0052EE  0D01               	mullw	1
 29975  0052F0  0EE9               	movlw	low _sevenSegCharacters
 29976  0052F2  24F3               	addwf	prodl,w,c
 29977  0052F4  6ED9               	movwf	fsr2l,c
 29978  0052F6  0E03               	movlw	high _sevenSegCharacters
 29979  0052F8  20F4               	addwfc	prodh,w,c
 29980  0052FA  6EDA               	movwf	fsr2h,c
 29981  0052FC  50DF               	movf	indf2,w,c
 29982  0052FE  6E80               	movwf	3968,c	;volatile
 29983  005300  0012               	return		;funcret
 29984  005302                     __end_of_sevenSegmentUpdate:
 29985                           	opt stack 0
 29986                           pclatu	equ	0xFFB
 29987                           pclath	equ	0xFFA
 29988                           tblptru	equ	0xFF8
 29989                           tblptrh	equ	0xFF7
 29990                           tblptrl	equ	0xFF6
 29991                           tablat	equ	0xFF5
 29992                           prodh	equ	0xFF4
 29993                           prodl	equ	0xFF3
 29994                           intcon	equ	0xFF2
 29995                           intcon3	equ	0xFF0
 29996                           indf0	equ	0xFEF
 29997                           postinc0	equ	0xFEE
 29998                           plusw0	equ	0xFEB
 29999                           fsr0h	equ	0xFEA
 30000                           fsr0l	equ	0xFE9
 30001                           wreg	equ	0xFE8
 30002                           indf1	equ	0xFE7
 30003                           postinc1	equ	0xFE6
 30004                           postdec1	equ	0xFE5
 30005                           plusw1	equ	0xFE3
 30006                           fsr1h	equ	0xFE2
 30007                           fsr1l	equ	0xFE1
 30008                           indf2	equ	0xFDF
 30009                           postinc2	equ	0xFDE
 30010                           postdec2	equ	0xFDD
 30011                           plusw2	equ	0xFDB
 30012                           fsr2h	equ	0xFDA
 30013                           fsr2l	equ	0xFD9
 30014                           status	equ	0xFD8
 30015                           
 30016 ;; *************** function _parseNumber *****************
 30017 ;; Defined at:
 30018 ;;		line 59 in file "src/system/sevenseg.c"
 30019 ;; Parameters:    Size  Location     Type
 30020 ;;  numberToDisp    2    7[COMRAM] unsigned int 
 30021 ;;  digit           1    9[COMRAM] unsigned char 
 30022 ;; Auto vars:     Size  Location     Type
 30023 ;;  hundreds        1   13[COMRAM] unsigned char 
 30024 ;;  tens            1   12[COMRAM] unsigned char 
 30025 ;;  ones            1   11[COMRAM] unsigned char 
 30026 ;; Return value:  Size  Location     Type
 30027 ;;                  1    wreg      unsigned char 
 30028 ;; Registers used:
 30029 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 30030 ;; Tracked objects:
 30031 ;;		On entry : 0/0
 30032 ;;		On exit  : 0/0
 30033 ;;		Unchanged: 0/0
 30034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 30035 ;;      Params:         3       0       0       0       0       0       0       0       0
 30036 ;;      Locals:         3       0       0       0       0       0       0       0       0
 30037 ;;      Temps:          1       0       0       0       0       0       0       0       0
 30038 ;;      Totals:         7       0       0       0       0       0       0       0       0
 30039 ;;Total ram usage:        7 bytes
 30040 ;; Hardware stack levels used:    1
 30041 ;; Hardware stack levels required when called:    1
 30042 ;; This function calls:
 30043 ;;		i2___lwdiv
 30044 ;; This function is called by:
 30045 ;;		_sevenSegmentUpdate
 30046 ;; This function uses a non-reentrant model
 30047 ;;
 30048                           
 30049                           	psect	text131
 30050  005E24                     __ptext131:
 30051                           	opt stack 0
 30052  005E24                     _parseNumber:
 30053                           	opt stack 15
 30054                           
 30055                           ;sevenseg.c: 61: uint8_t hundreds = numberToDisplay / 100u;
 30056                           
 30057                           ;incstack = 0
 30058  005E24  C008  F001         	movff	parseNumber@numberToDisplay,i2___lwdiv@dividend
 30059  005E28  C009  F002         	movff	parseNumber@numberToDisplay+1,i2___lwdiv@dividend+1
 30060  005E2C  0E00               	movlw	0
 30061  005E2E  6E04               	movwf	i2___lwdiv@divisor+1,c
 30062  005E30  0E64               	movlw	100
 30063  005E32  6E03               	movwf	i2___lwdiv@divisor,c
 30064  005E34  ECB5  F032         	call	i2___lwdiv	;wreg free
 30065  005E38  5001               	movf	?i2___lwdiv,w,c
 30066  005E3A  6E0E               	movwf	parseNumber@hundreds,c
 30067                           
 30068                           ;sevenseg.c: 62: uint8_t tens = (numberToDisplay - hundreds * 100u) / 10u;
 30069  005E3C  500E               	movf	parseNumber@hundreds,w,c
 30070  005E3E  0D64               	mullw	100
 30071  005E40  1EF3               	comf	prodl,f,c
 30072  005E42  1EF4               	comf	prodh,f,c
 30073  005E44  4AF3               	infsnz	prodl,f,c
 30074  005E46  2AF4               	incf	prodh,f,c
 30075  005E48  5008               	movf	parseNumber@numberToDisplay,w,c
 30076  005E4A  24F3               	addwf	prodl,w,c
 30077  005E4C  6E01               	movwf	i2___lwdiv@dividend,c
 30078  005E4E  5009               	movf	parseNumber@numberToDisplay+1,w,c
 30079  005E50  20F4               	addwfc	prodh,w,c
 30080  005E52  6E02               	movwf	i2___lwdiv@dividend+1,c
 30081  005E54  0E00               	movlw	0
 30082  005E56  6E04               	movwf	i2___lwdiv@divisor+1,c
 30083  005E58  0E0A               	movlw	10
 30084  005E5A  6E03               	movwf	i2___lwdiv@divisor,c
 30085  005E5C  ECB5  F032         	call	i2___lwdiv	;wreg free
 30086  005E60  5001               	movf	?i2___lwdiv,w,c
 30087  005E62  6E0D               	movwf	parseNumber@tens,c
 30088                           
 30089                           ;sevenseg.c: 63: uint8_t ones = (numberToDisplay - hundreds * 100u - tens * 10u);
 30090  005E64  500D               	movf	parseNumber@tens,w,c
 30091  005E66  0D0A               	mullw	10
 30092  005E68  CFF3 F00B          	movff	prodl,??_parseNumber
 30093  005E6C  500E               	movf	parseNumber@hundreds,w,c
 30094  005E6E  0D64               	mullw	100
 30095  005E70  50F3               	movf	prodl,w,c
 30096  005E72  240B               	addwf	??_parseNumber,w,c
 30097  005E74  0800               	sublw	0
 30098  005E76  2408               	addwf	parseNumber@numberToDisplay,w,c
 30099  005E78  6E0C               	movwf	parseNumber@ones,c
 30100                           
 30101                           ;sevenseg.c: 64: switch (digit) {
 30102  005E7A  D008               	goto	i2l766
 30103  005E7C                     
 30104                           ;sevenseg.c: 66: return ones;
 30105  005E7C  500C               	movf	parseNumber@ones,w,c
 30106  005E7E  0012               	return	
 30107  005E80                     
 30108                           ;sevenseg.c: 68: return tens;
 30109  005E80  500D               	movf	parseNumber@tens,w,c
 30110  005E82  0012               	return	
 30111  005E84                     
 30112                           ;sevenseg.c: 70: return hundreds;
 30113  005E84  500E               	movf	parseNumber@hundreds,w,c
 30114  005E86  0012               	return	
 30115  005E88  0E00               	movlw	0
 30116                           
 30117                           ;sevenseg.c: 72: }
 30118  005E8A  0012               	return	
 30119  005E8C                     i2l766:
 30120  005E8C  500A               	movf	parseNumber@digit,w,c
 30121                           
 30122                           ; Switch size 1, requested type "space"
 30123                           ; Number of cases is 3, Range of values is 0 to 2
 30124                           ; switch strategies available:
 30125                           ; Name         Instructions Cycles
 30126                           ; simple_byte           10     6 (average)
 30127                           ;	Chosen strategy is simple_byte
 30128  005E8E  0A00               	xorlw	0	; case 0
 30129  005E90  B4D8               	btfsc	status,2,c
 30130  005E92  D7F8               	goto	i2l770
 30131  005E94  0A01               	xorlw	1	; case 1
 30132  005E96  B4D8               	btfsc	status,2,c
 30133  005E98  D7F3               	goto	i2l769
 30134  005E9A  0A03               	xorlw	3	; case 2
 30135  005E9C  B4D8               	btfsc	status,2,c
 30136  005E9E  D7EE               	goto	i2l767
 30137  005EA0  D7F3               	goto	i2l771
 30138  005EA2                     __end_of_parseNumber:
 30139                           	opt stack 0
 30140                           pclatu	equ	0xFFB
 30141                           pclath	equ	0xFFA
 30142                           tblptru	equ	0xFF8
 30143                           tblptrh	equ	0xFF7
 30144                           tblptrl	equ	0xFF6
 30145                           tablat	equ	0xFF5
 30146                           prodh	equ	0xFF4
 30147                           prodl	equ	0xFF3
 30148                           intcon	equ	0xFF2
 30149                           intcon3	equ	0xFF0
 30150                           indf0	equ	0xFEF
 30151                           postinc0	equ	0xFEE
 30152                           plusw0	equ	0xFEB
 30153                           fsr0h	equ	0xFEA
 30154                           fsr0l	equ	0xFE9
 30155                           wreg	equ	0xFE8
 30156                           indf1	equ	0xFE7
 30157                           postinc1	equ	0xFE6
 30158                           postdec1	equ	0xFE5
 30159                           plusw1	equ	0xFE3
 30160                           fsr1h	equ	0xFE2
 30161                           fsr1l	equ	0xFE1
 30162                           indf2	equ	0xFDF
 30163                           postinc2	equ	0xFDE
 30164                           postdec2	equ	0xFDD
 30165                           plusw2	equ	0xFDB
 30166                           fsr2h	equ	0xFDA
 30167                           fsr2l	equ	0xFD9
 30168                           status	equ	0xFD8
 30169                           
 30170 ;; *************** function i2___lwdiv *****************
 30171 ;; Defined at:
 30172 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 30173 ;; Parameters:    Size  Location     Type
 30174 ;;  dividend        2    0[COMRAM] unsigned int 
 30175 ;;  divisor         2    2[COMRAM] unsigned int 
 30176 ;; Auto vars:     Size  Location     Type
 30177 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 30178 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 30179 ;; Return value:  Size  Location     Type
 30180 ;;                  2    0[COMRAM] unsigned int 
 30181 ;; Registers used:
 30182 ;;		wreg, status,2, status,0
 30183 ;; Tracked objects:
 30184 ;;		On entry : 0/0
 30185 ;;		On exit  : 0/0
 30186 ;;		Unchanged: 0/0
 30187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 30188 ;;      Params:         4       0       0       0       0       0       0       0       0
 30189 ;;      Locals:         3       0       0       0       0       0       0       0       0
 30190 ;;      Temps:          0       0       0       0       0       0       0       0       0
 30191 ;;      Totals:         7       0       0       0       0       0       0       0       0
 30192 ;;Total ram usage:        7 bytes
 30193 ;; Hardware stack levels used:    1
 30194 ;; This function calls:
 30195 ;;		Nothing
 30196 ;; This function is called by:
 30197 ;;		_parseNumber
 30198 ;; This function uses a non-reentrant model
 30199 ;;
 30200                           
 30201                           	psect	text132
 30202  00656A                     __ptext132:
 30203                           	opt stack 0
 30204  00656A                     i2___lwdiv:
 30205                           	opt stack 15
 30206                           
 30207                           ;incstack = 0
 30208  00656A  0E00               	movlw	0
 30209  00656C  6E06               	movwf	i2___lwdiv@quotient+1,c
 30210  00656E  0E00               	movlw	0
 30211  006570  6E05               	movwf	i2___lwdiv@quotient,c
 30212  006572  5003               	movf	i2___lwdiv@divisor,w,c
 30213  006574  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 30214  006576  B4D8               	btfsc	status,2,c
 30215  006578  D01C               	goto	i2l1925
 30216  00657A  0E01               	movlw	1
 30217  00657C  6E07               	movwf	i2___lwdiv@counter,c
 30218  00657E  D004               	goto	i2l1920
 30219  006580  90D8               	bcf	status,0,c
 30220  006582  3603               	rlcf	i2___lwdiv@divisor,f,c
 30221  006584  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 30222  006586  2A07               	incf	i2___lwdiv@counter,f,c
 30223  006588                     i2l1920:
 30224  006588  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 30225  00658A  D7FA               	goto	i2l1921
 30226  00658C                     i2u929_40:
 30227  00658C  90D8               	bcf	status,0,c
 30228  00658E  3605               	rlcf	i2___lwdiv@quotient,f,c
 30229  006590  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 30230  006592  5003               	movf	i2___lwdiv@divisor,w,c
 30231  006594  5C01               	subwf	i2___lwdiv@dividend,w,c
 30232  006596  5004               	movf	i2___lwdiv@divisor+1,w,c
 30233  006598  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 30234  00659A  A0D8               	btfss	status,0,c
 30235  00659C  D005               	goto	i2l1924
 30236  00659E  5003               	movf	i2___lwdiv@divisor,w,c
 30237  0065A0  5E01               	subwf	i2___lwdiv@dividend,f,c
 30238  0065A2  5004               	movf	i2___lwdiv@divisor+1,w,c
 30239  0065A4  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 30240  0065A6  8005               	bsf	i2___lwdiv@quotient,0,c
 30241  0065A8                     i2l1924:
 30242  0065A8  90D8               	bcf	status,0,c
 30243  0065AA  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 30244  0065AC  3203               	rrcf	i2___lwdiv@divisor,f,c
 30245  0065AE  2E07               	decfsz	i2___lwdiv@counter,f,c
 30246  0065B0  D7ED               	goto	i2u929_40
 30247  0065B2                     i2l1925:
 30248  0065B2  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 30249  0065B6  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 30250  0065BA  0012               	return		;funcret
 30251  0065BC                     __end_ofi2___lwdiv:
 30252                           	opt stack 0
 30253                           pclatu	equ	0xFFB
 30254                           pclath	equ	0xFFA
 30255                           tblptru	equ	0xFF8
 30256                           tblptrh	equ	0xFF7
 30257                           tblptrl	equ	0xFF6
 30258                           tablat	equ	0xFF5
 30259                           prodh	equ	0xFF4
 30260                           prodl	equ	0xFF3
 30261                           intcon	equ	0xFF2
 30262                           intcon3	equ	0xFF0
 30263                           indf0	equ	0xFEF
 30264                           postinc0	equ	0xFEE
 30265                           plusw0	equ	0xFEB
 30266                           fsr0h	equ	0xFEA
 30267                           fsr0l	equ	0xFE9
 30268                           wreg	equ	0xFE8
 30269                           indf1	equ	0xFE7
 30270                           postinc1	equ	0xFE6
 30271                           postdec1	equ	0xFE5
 30272                           plusw1	equ	0xFE3
 30273                           fsr1h	equ	0xFE2
 30274                           fsr1l	equ	0xFE1
 30275                           indf2	equ	0xFDF
 30276                           postinc2	equ	0xFDE
 30277                           postdec2	equ	0xFDD
 30278                           plusw2	equ	0xFDB
 30279                           fsr2h	equ	0xFDA
 30280                           fsr2l	equ	0xFD9
 30281                           status	equ	0xFD8
 30282                           
 30283 ;; *************** function _buttonHandler *****************
 30284 ;; Defined at:
 30285 ;;		line 244 in file "src/system/main.c"
 30286 ;; Parameters:    Size  Location     Type
 30287 ;;  state           2    0[COMRAM] PTR volatile unsigned ch
 30288 ;;		 -> buttonState(1), 
 30289 ;; Auto vars:     Size  Location     Type
 30290 ;;  debounceValu    4    6[COMRAM] const unsigned long 
 30291 ;;  resetValue      4    2[COMRAM] const unsigned long 
 30292 ;; Return value:  Size  Location     Type
 30293 ;;                  1    wreg      void 
 30294 ;; Registers used:
 30295 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 30296 ;; Tracked objects:
 30297 ;;		On entry : 0/0
 30298 ;;		On exit  : 0/0
 30299 ;;		Unchanged: 0/0
 30300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 30301 ;;      Params:         2       0       0       0       0       0       0       0       0
 30302 ;;      Locals:         8       0       0       0       0       0       0       0       0
 30303 ;;      Temps:          0       0       0       0       0       0       0       0       0
 30304 ;;      Totals:        10       0       0       0       0       0       0       0       0
 30305 ;;Total ram usage:       10 bytes
 30306 ;; Hardware stack levels used:    1
 30307 ;; This function calls:
 30308 ;;		Nothing
 30309 ;; This function is called by:
 30310 ;;		_ISR
 30311 ;; This function uses a non-reentrant model
 30312 ;;
 30313                           
 30314                           	psect	text133
 30315  0057C8                     __ptext133:
 30316                           	opt stack 0
 30317  0057C8                     _buttonHandler:
 30318                           	opt stack 17
 30319                           
 30320                           ;main.c: 245: uint8_t static oldState = 0;
 30321                           ;main.c: 246: uint8_t static newState = 0;
 30322                           ;main.c: 247: uint32_t static debounceCounter = 0;
 30323                           ;main.c: 248: const uint32_t debounceValue = 0x1f;
 30324                           
 30325                           ;incstack = 0
 30326  0057C8  0E1F               	movlw	31
 30327  0057CA  6E07               	movwf	buttonHandler@debounceValue,c
 30328  0057CC  0E00               	movlw	0
 30329  0057CE  6E08               	movwf	buttonHandler@debounceValue+1,c
 30330  0057D0  0E00               	movlw	0
 30331  0057D2  6E09               	movwf	buttonHandler@debounceValue+2,c
 30332  0057D4  0E00               	movlw	0
 30333  0057D6  6E0A               	movwf	buttonHandler@debounceValue+3,c
 30334                           
 30335                           ;main.c: 249: const uint32_t resetValue = 0x3ff;
 30336  0057D8  0EFF               	movlw	255
 30337  0057DA  6E03               	movwf	buttonHandler@resetValue,c
 30338  0057DC  0E03               	movlw	3
 30339  0057DE  6E04               	movwf	buttonHandler@resetValue+1,c
 30340  0057E0  0E00               	movlw	0
 30341  0057E2  6E05               	movwf	buttonHandler@resetValue+2,c
 30342  0057E4  0E00               	movlw	0
 30343  0057E6  6E06               	movwf	buttonHandler@resetValue+3,c
 30344                           
 30345                           ;main.c: 250: if ((unsigned)(!(PORTB & (1<<5)))) {
 30346  0057E8  BA81               	btfsc	3969,5,c	;volatile
 30347  0057EA  D007               	goto	i2l714
 30348                           
 30349                           ;main.c: 251: debounceCounter++;
 30350  0057EC  0E01               	movlw	1
 30351  0057EE  262C               	addwf	buttonHandler@debounceCounter,f,c
 30352  0057F0  0E00               	movlw	0
 30353  0057F2  222D               	addwfc	buttonHandler@debounceCounter+1,f,c
 30354  0057F4  222E               	addwfc	buttonHandler@debounceCounter+2,f,c
 30355  0057F6  222F               	addwfc	buttonHandler@debounceCounter+3,f,c
 30356                           
 30357                           ;main.c: 252: } else {
 30358  0057F8  D008               	goto	i2l715
 30359  0057FA                     i2l714:
 30360                           
 30361                           ;main.c: 253: debounceCounter = 0;
 30362  0057FA  0E00               	movlw	0
 30363  0057FC  6E2C               	movwf	buttonHandler@debounceCounter,c
 30364  0057FE  0E00               	movlw	0
 30365  005800  6E2D               	movwf	buttonHandler@debounceCounter+1,c
 30366  005802  0E00               	movlw	0
 30367  005804  6E2E               	movwf	buttonHandler@debounceCounter+2,c
 30368  005806  0E00               	movlw	0
 30369  005808  6E2F               	movwf	buttonHandler@debounceCounter+3,c
 30370  00580A                     i2l715:
 30371                           
 30372                           ;main.c: 254: }
 30373                           ;main.c: 255: newState = (unsigned) ((debounceCounter >= debounceValue) ? 1 : 0);
 30374  00580A  5007               	movf	buttonHandler@debounceValue,w,c
 30375  00580C  5C2C               	subwf	buttonHandler@debounceCounter,w,c
 30376  00580E  5008               	movf	buttonHandler@debounceValue+1,w,c
 30377  005810  582D               	subwfb	buttonHandler@debounceCounter+1,w,c
 30378  005812  5009               	movf	buttonHandler@debounceValue+2,w,c
 30379  005814  582E               	subwfb	buttonHandler@debounceCounter+2,w,c
 30380  005816  500A               	movf	buttonHandler@debounceValue+3,w,c
 30381  005818  582F               	subwfb	buttonHandler@debounceCounter+3,w,c
 30382  00581A  A0D8               	btfss	status,0,c
 30383  00581C  D002               	goto	i2u1026_40
 30384  00581E  0E01               	movlw	1
 30385  005820  D001               	goto	i2u1027_40
 30386  005822                     i2u1026_40:
 30387  005822  0E00               	movlw	0
 30388  005824                     i2u1027_40:
 30389  005824  6E44               	movwf	buttonHandler@newState,c
 30390                           
 30391                           ;main.c: 256: if (newState && !oldState) {
 30392  005826  5044               	movf	buttonHandler@newState,w,c
 30393  005828  B4D8               	btfsc	status,2,c
 30394  00582A  D011               	goto	i2l716
 30395  00582C  5045               	movf	buttonHandler@oldState,w,c
 30396  00582E  A4D8               	btfss	status,2,c
 30397  005830  D00E               	goto	i2l716
 30398                           
 30399                           ;main.c: 257: debounceCounter = debounceValue;
 30400  005832  C007  F02C         	movff	buttonHandler@debounceValue,buttonHandler@debounceCounter
 30401  005836  C008  F02D         	movff	buttonHandler@debounceValue+1,buttonHandler@debounceCounter+1
 30402  00583A  C009  F02E         	movff	buttonHandler@debounceValue+2,buttonHandler@debounceCounter+2
 30403  00583E  C00A  F02F         	movff	buttonHandler@debounceValue+3,buttonHandler@debounceCounter+3
 30404                           
 30405                           ;main.c: 258: *state = 1;
 30406  005842  C001  FFD9         	movff	buttonHandler@state,fsr2l
 30407  005846  C002  FFDA         	movff	buttonHandler@state+1,fsr2h
 30408  00584A  0E01               	movlw	1
 30409  00584C  D005               	goto	L29
 30410  00584E                     i2l716:
 30411                           
 30412                           ;main.c: 260: *state = 0;
 30413  00584E  C001  FFD9         	movff	buttonHandler@state,fsr2l
 30414  005852  C002  FFDA         	movff	buttonHandler@state+1,fsr2h
 30415  005856  0E00               	movlw	0
 30416  005858                     L29:
 30417  005858  6EDF               	movwf	indf2,c
 30418                           
 30419                           ;main.c: 261: }
 30420                           ;main.c: 262: if (debounceCounter > resetValue)
 30421  00585A  502C               	movf	buttonHandler@debounceCounter,w,c
 30422  00585C  5C03               	subwf	buttonHandler@resetValue,w,c
 30423  00585E  502D               	movf	buttonHandler@debounceCounter+1,w,c
 30424  005860  5804               	subwfb	buttonHandler@resetValue+1,w,c
 30425  005862  502E               	movf	buttonHandler@debounceCounter+2,w,c
 30426  005864  5805               	subwfb	buttonHandler@resetValue+2,w,c
 30427  005866  502F               	movf	buttonHandler@debounceCounter+3,w,c
 30428  005868  5806               	subwfb	buttonHandler@resetValue+3,w,c
 30429  00586A  A0D8               	btfss	status,0,c
 30430  00586C  00FF               	reset		;# 
 30431                           
 30432                           ;main.c: 265: oldState = newState;
 30433  00586E  C044  F045         	movff	buttonHandler@newState,buttonHandler@oldState
 30434  005872  0012               	return		;funcret
 30435  005874                     __end_of_buttonHandler:
 30436                           	opt stack 0
 30437                           pclatu	equ	0xFFB
 30438                           pclath	equ	0xFFA
 30439                           tblptru	equ	0xFF8
 30440                           tblptrh	equ	0xFF7
 30441                           tblptrl	equ	0xFF6
 30442                           tablat	equ	0xFF5
 30443                           prodh	equ	0xFF4
 30444                           prodl	equ	0xFF3
 30445                           intcon	equ	0xFF2
 30446                           intcon3	equ	0xFF0
 30447                           indf0	equ	0xFEF
 30448                           postinc0	equ	0xFEE
 30449                           plusw0	equ	0xFEB
 30450                           fsr0h	equ	0xFEA
 30451                           fsr0l	equ	0xFE9
 30452                           wreg	equ	0xFE8
 30453                           indf1	equ	0xFE7
 30454                           postinc1	equ	0xFE6
 30455                           postdec1	equ	0xFE5
 30456                           plusw1	equ	0xFE3
 30457                           fsr1h	equ	0xFE2
 30458                           fsr1l	equ	0xFE1
 30459                           indf2	equ	0xFDF
 30460                           postinc2	equ	0xFDE
 30461                           postdec2	equ	0xFDD
 30462                           plusw2	equ	0xFDB
 30463                           fsr2h	equ	0xFDA
 30464                           fsr2l	equ	0xFD9
 30465                           status	equ	0xFD8
 30466                           pclatu	equ	0xFFB
 30467                           pclath	equ	0xFFA
 30468                           tblptru	equ	0xFF8
 30469                           tblptrh	equ	0xFF7
 30470                           tblptrl	equ	0xFF6
 30471                           tablat	equ	0xFF5
 30472                           prodh	equ	0xFF4
 30473                           prodl	equ	0xFF3
 30474                           intcon	equ	0xFF2
 30475                           intcon3	equ	0xFF0
 30476                           indf0	equ	0xFEF
 30477                           postinc0	equ	0xFEE
 30478                           plusw0	equ	0xFEB
 30479                           fsr0h	equ	0xFEA
 30480                           fsr0l	equ	0xFE9
 30481                           wreg	equ	0xFE8
 30482                           indf1	equ	0xFE7
 30483                           postinc1	equ	0xFE6
 30484                           postdec1	equ	0xFE5
 30485                           plusw1	equ	0xFE3
 30486                           fsr1h	equ	0xFE2
 30487                           fsr1l	equ	0xFE1
 30488                           indf2	equ	0xFDF
 30489                           postinc2	equ	0xFDE
 30490                           postdec2	equ	0xFDD
 30491                           plusw2	equ	0xFDB
 30492                           fsr2h	equ	0xFDA
 30493                           fsr2l	equ	0xFD9
 30494                           status	equ	0xFD8
 30495                           
 30496                           	psect	rparam
 30497  0000                     pclatu	equ	0xFFB
 30498                           pclath	equ	0xFFA
 30499                           tblptru	equ	0xFF8
 30500                           tblptrh	equ	0xFF7
 30501                           tblptrl	equ	0xFF6
 30502                           tablat	equ	0xFF5
 30503                           prodh	equ	0xFF4
 30504                           prodl	equ	0xFF3
 30505                           intcon	equ	0xFF2
 30506                           intcon3	equ	0xFF0
 30507                           indf0	equ	0xFEF
 30508                           postinc0	equ	0xFEE
 30509                           plusw0	equ	0xFEB
 30510                           fsr0h	equ	0xFEA
 30511                           fsr0l	equ	0xFE9
 30512                           wreg	equ	0xFE8
 30513                           indf1	equ	0xFE7
 30514                           postinc1	equ	0xFE6
 30515                           postdec1	equ	0xFE5
 30516                           plusw1	equ	0xFE3
 30517                           fsr1h	equ	0xFE2
 30518                           fsr1l	equ	0xFE1
 30519                           indf2	equ	0xFDF
 30520                           postinc2	equ	0xFDE
 30521                           postdec2	equ	0xFDD
 30522                           plusw2	equ	0xFDB
 30523                           fsr2h	equ	0xFDA
 30524                           fsr2l	equ	0xFD9
 30525                           status	equ	0xFD8
 30526                           
 30527                           	psect	temp
 30528  00004F                     btemp:
 30529                           	opt stack 0
 30530  00004F                     	ds	1
 30531  0000                     int$flags	set	btemp
 30532  0000                     wtemp6	set	btemp+1
 30533                           pclatu	equ	0xFFB
 30534                           pclath	equ	0xFFA
 30535                           tblptru	equ	0xFF8
 30536                           tblptrh	equ	0xFF7
 30537                           tblptrl	equ	0xFF6
 30538                           tablat	equ	0xFF5
 30539                           prodh	equ	0xFF4
 30540                           prodl	equ	0xFF3
 30541                           intcon	equ	0xFF2
 30542                           intcon3	equ	0xFF0
 30543                           indf0	equ	0xFEF
 30544                           postinc0	equ	0xFEE
 30545                           plusw0	equ	0xFEB
 30546                           fsr0h	equ	0xFEA
 30547                           fsr0l	equ	0xFE9
 30548                           wreg	equ	0xFE8
 30549                           indf1	equ	0xFE7
 30550                           postinc1	equ	0xFE6
 30551                           postdec1	equ	0xFE5
 30552                           plusw1	equ	0xFE3
 30553                           fsr1h	equ	0xFE2
 30554                           fsr1l	equ	0xFE1
 30555                           indf2	equ	0xFDF
 30556                           postinc2	equ	0xFDE
 30557                           postdec2	equ	0xFDD
 30558                           plusw2	equ	0xFDB
 30559                           fsr2h	equ	0xFDA
 30560                           fsr2l	equ	0xFD9
 30561                           status	equ	0xFD8


Data Sizes:
    Strings     923
    Constant    11
    Data        50
    BSS         776
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     39      78
    BANK0           160    160     160
    BANK1           256    250     251
    BANK2           256    184     236
    BANK3           256      0     245
    BANK4           256      0     236
    BANK5           256      0     254
    BANK6           256     38      38
    BANK7           256      0       0

Pointer List with Targets:

    ultoa@buf	PTR unsigned char  size(2) Largest target is 10
		 -> intToString@number(BANK3[10]), 

    sp__ultoa	PTR unsigned char  size(2) Largest target is 10
		 -> intToString@number(BANK3[10]), 

    ltoa@buf	PTR unsigned char  size(2) Largest target is 10
		 -> intToString@number(BANK3[10]), 

    ltoa@cp	PTR unsigned char  size(2) Largest target is 10
		 -> intToString@number(BANK3[10]), 

    utoa@buf	PTR unsigned char  size(2) Largest target is 4
		 -> ipAdressToString@number(BANK2[4]), macToString@number(BANK2[3]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 4
		 -> ipAdressToString@number(BANK2[4]), macToString@number(BANK2[3]), 

    itoa@buf	PTR unsigned char  size(2) Largest target is 4
		 -> ipAdressToString@number(BANK2[4]), macToString@number(BANK2[3]), 

    itoa@cp	PTR unsigned char  size(2) Largest target is 4
		 -> ipAdressToString@number(BANK2[4]), macToString@number(BANK2[3]), 

    tcp_calculateHeaderChecksum@tcpHeader	PTR struct tcp_header size(2) Largest target is 21
		 -> tcp_sendSYNACK@tcpHeader(BANK1[21]), 

    tcp_sendSYNACK@connection	PTR struct tcp_connection size(2) Largest target is 204
		 -> tcpListeners(BANK5[204]), 

    tcp_listen@connection	PTR struct tcp_connection size(2) Largest target is 17
		 -> main@connection(BANK6[17]), 

    tcp_stateMachine@connection	PTR struct tcp_connection size(2) Largest target is 204
		 -> tcpListeners(BANK5[204]), 

    tcp_stateMachine@newHeader	PTR struct tcp_header size(2) Largest target is 21
		 -> tcp_handleNewPacket@tcpHeader(BANK1[21]), 

    tcp_parseHeader@header	PTR struct tcp_header size(2) Largest target is 21
		 -> tcp_handleNewPacket@tcpHeader(BANK1[21]), 

    icmp_writeHeaderIntoBuffer@buf	PTR unsigned char  size(2) Largest target is 64
		 -> icmp_sendEchoRequest@icmpMessage(COMRAM[64]), icmp_sendEchoReply@icmpMessage(BANK1[64]), 

    icmp_calculateChecksumBuf@buf	PTR unsigned char  size(2) Largest target is 128
		 -> icmp_sendEchoRequest@icmpMessage(COMRAM[64]), icmp_sendEchoReply@icmpMessage(BANK1[64]), icmp_handleNewPacket@foo(BANK2[128]), 

    icmp_parseHeader@icmpHeader	PTR struct icmpHeader size(2) Largest target is 8
		 -> icmp_handleNewPacket@icmpHeader(BANK2[8]), 

    ipv4_setToAllZero@ip	PTR struct ipv4_address size(2) Largest target is 4
		 -> ipPreliminarySource(BANK2[4]), ipSource(BANK2[4]), arp_init@ip(BANK0[4]), arp_probe@ipSender(BANK1[4]), 

    ipv4_isAllZero@ip	PTR struct ipv4_address size(2) Largest target is 32
		 -> arp_parseFromRXBuffer@arp(BANK0[32]), arp_handleNewPacket@arp(BANK1[32]), 

    ipv4_cmp@b	PTR struct ipv4_address size(2) Largest target is 32
		 -> arp_setNewEntry@ip(BANK0[4]), arp_checkForEntry@ip(BANK0[4]), arp_sendReply@myIP(BANK1[4]), arp_parseFromRXBuffer@arp(BANK0[32]), 

    ipv4_cmp@a	PTR struct ipv4_address size(2) Largest target is 112
		 -> arp_table(BANK4[112]), arp_sendReply@request(BANK1[32]), arp_parseFromRXBuffer@arp(BANK0[32]), 

    ipv4_SrcAddrChanged@err	PTR struct error size(2) Largest target is 3
		 -> arp_background@err(COMRAM[3]), 

    arpStatus	PTR struct error size(2) Largest target is 3
		 -> NULL(NULL[0]), arp_background@err(COMRAM[3]), 

    ipv4_handleNewPacket@frame	PTR struct ethernetFrame size(2) Largest target is 124
		 -> stack(BANK4[124]), 

    ipv4_checkHeaderChecksum@header	PTR struct ipv4_header size(2) Largest target is 23
		 -> ipv4_handleNewPacket@header(BANK2[23]), 

    ipv4_parseHeader@field	PTR struct memoryField size(2) Largest target is 9
		 -> ipv4_handleNewPacket@headerField(BANK2[9]), 

    ipv4_calculateHeaderChecksum@header	PTR struct ipv4_header size(2) Largest target is 66
		 -> udp_sendPacket@ipPacket(BANK1[66]), tcp_sendSYNACK@ipPacket(BANK1[66]), icmp_sendEchoRequest@ipRequest(COMRAM[66]), icmp_sendEchoReply@ipReply(BANK1[66]), 
		 -> ipv4_checkHeaderChecksum@testHeader(BANK0[23]), 

    ipv4_writeHeaderIntoBuffer@ptr	PTR unsigned char  size(2) Largest target is 32
		 -> udp_sendPacket@ipHeaderBuf(BANK1[32]), tcp_sendSYNACK@ipHeaderBuf(BANK1[32]), icmp_sendEchoRequest@headerBuf(COMRAM[32]), icmp_sendEchoReply@headerBuf(BANK1[32]), 

    ipv4_txFrameRequest@packet	PTR struct ipv4_packet size(2) Largest target is 66
		 -> udp_sendPacket@ipPacket(BANK1[66]), tcp_sendSYNACK@ipPacket(BANK1[66]), icmp_sendEchoRequest@ipRequest(COMRAM[66]), icmp_sendEchoReply@ipReply(BANK1[66]), 

    arp_checkForEntry@index	PTR unsigned char  size(2) Largest target is 1
		 -> ipv4_sendFrame@index(BANK0[1]), arp_gratuitous@index(BANK0[1]), arp_probe@index(BANK1[1]), 

    arp_parseFromRXBuffer@frame	PTR struct ethernetFrame size(2) Largest target is 124
		 -> stack(BANK4[124]), 

    arp_handleNewPacket@frame	PTR struct ethernetFrame size(2) Largest target is 124
		 -> stack(BANK4[124]), 

    sp__arpEntryToString	PTR unsigned char  size(2) Largest target is 50
		 -> arpEntryToString@string(BANK5[50]), 

    sp__ipProtocolToString	PTR unsigned char  size(2) Largest target is 17
		 -> STR_73(CODE[17]), STR_72(CODE[4]), STR_71(CODE[4]), STR_70(CODE[5]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 4
		 -> ipAdressToString@number(BANK2[4]), macToString@number(BANK2[3]), 

    sp__ltoa	PTR unsigned char  size(2) Largest target is 10
		 -> intToString@number(BANK3[10]), 

    UARTTransmitText@str	PTR const unsigned char  size(2) Largest target is 60
		 -> STR_125(CODE[2]), STR_124(CODE[5]), STR_123(CODE[2]), STR_122(CODE[4]), 
		 -> STR_121(CODE[8]), STR_120(CODE[26]), STR_119(CODE[15]), STR_118(CODE[28]), 
		 -> STR_117(CODE[6]), STR_116(CODE[6]), STR_115(CODE[6]), STR_114(CODE[6]), 
		 -> STR_113(CODE[6]), STR_112(CODE[6]), STR_111(CODE[6]), STR_110(CODE[6]), 
		 -> STR_109(CODE[5]), STR_108(CODE[2]), STR_107(CODE[7]), STR_106(CODE[5]), 
		 -> STR_105(CODE[2]), STR_74(CODE[3]), arpEntryToString@string(BANK5[50]), ipAdressToString@address(BANK3[20]), 
		 -> STR_69(CODE[18]), STR_68(CODE[4]), STR_67(CODE[5]), macToString@address(BANK3[20]), 
		 -> intToString@number(BANK3[10]), STR_66(CODE[50]), STR_65(CODE[11]), STR_64(CODE[13]), 
		 -> STR_63(CODE[12]), STR_62(CODE[12]), STR_61(CODE[12]), STR_60(CODE[12]), 
		 -> STR_59(CODE[12]), STR_58(CODE[5]), STR_57(CODE[19]), STR_56(CODE[13]), 
		 -> STR_55(CODE[8]), STR_54(CODE[3]), STR_53(CODE[12]), STR_52(CODE[4]), 
		 -> STR_51(CODE[9]), STR_50(CODE[2]), STR_49(CODE[12]), STR_48(CODE[26]), 
		 -> STR_47(CODE[50]), STR_46(CODE[4]), STR_45(CODE[2]), STR_29(CODE[3]), 
		 -> STR_28(CODE[37]), STR_27(CODE[37]), STR_26(CODE[3]), STR_25(CODE[27]), 
		 -> STR_24(CODE[3]), STR_23(CODE[21]), STR_22(CODE[3]), STR_21(CODE[3]), 
		 -> STR_20(CODE[5]), STR_19(CODE[3]), STR_18(CODE[60]), STR_17(CODE[4]), 
		 -> STR_16(CODE[3]), STR_15(CODE[3]), STR_14(CODE[5]), STR_13(CODE[3]), 
		 -> STR_12(CODE[3]), STR_11(CODE[3]), STR_10(CODE[2]), STR_9(CODE[2]), 
		 -> STR_8(CODE[2]), STR_7(CODE[2]), STR_6(CODE[2]), STR_5(CODE[16]), 
		 -> STR_4(CODE[10]), STR_3(CODE[12]), STR_2(CODE[2]), STR_1(CODE[2]), 
		 -> ethernetController_getDeviceName@string(BANK0[11]), 

    buttonHandler@state	PTR volatile unsigned char  size(2) Largest target is 1
		 -> buttonState(BANK2[1]), 

    icmpTxtMessages	PTR const unsigned char [15] size(2) Largest target is 26
		 -> STR_104(CODE[16]), STR_103(CODE[10]), STR_102(CODE[26]), STR_101(CODE[14]), 
		 -> STR_100(CODE[20]), STR_99(CODE[21]), STR_98(CODE[13]), STR_97(CODE[1]), 
		 -> STR_96(CODE[1]), STR_95(CODE[17]), STR_94(CODE[14]), STR_93(CODE[24]), 
		 -> STR_92(CODE[1]), STR_91(CODE[1]), STR_90(CODE[11]), STR_89(CODE[16]), 
		 -> STR_88(CODE[10]), STR_87(CODE[26]), STR_86(CODE[14]), STR_85(CODE[20]), 
		 -> STR_84(CODE[21]), STR_83(CODE[13]), STR_82(CODE[1]), STR_81(CODE[1]), 
		 -> STR_80(CODE[17]), STR_79(CODE[14]), STR_78(CODE[24]), STR_77(CODE[1]), 
		 -> STR_76(CODE[1]), STR_75(CODE[11]), STR_44(CODE[16]), STR_43(CODE[10]), 
		 -> STR_42(CODE[26]), STR_41(CODE[14]), STR_40(CODE[20]), STR_39(CODE[21]), 
		 -> STR_38(CODE[13]), STR_37(CODE[1]), STR_36(CODE[1]), STR_35(CODE[17]), 
		 -> STR_34(CODE[14]), STR_33(CODE[24]), STR_32(CODE[1]), STR_31(CODE[1]), 
		 -> STR_30(CODE[11]), 

    sp__ipAdressToString	PTR unsigned char  size(2) Largest target is 20
		 -> ipAdressToString@address(BANK3[20]), 

    sp__UART_special	PTR unsigned char  size(2) Largest target is 50
		 -> STR_66(CODE[50]), 

    handleStackBackgroundTasks@stack	PTR struct stack size(2) Largest target is 124
		 -> stack(BANK4[124]), 

    mac_setAllZero@mac	PTR struct macaddress size(2) Largest target is 6
		 -> arp_init@mac(BANK0[6]), arp_sendRequest@targetMAC(BANK1[6]), 

    mac_cmp@b	PTR struct macaddress size(2) Largest target is 32
		 -> arp_setNewEntry@mac(BANK0[6]), arp_parseFromRXBuffer@arp(BANK0[32]), 

    mac_cmp@a	PTR struct macaddress size(2) Largest target is 112
		 -> arp_table(BANK4[112]), arp_parseFromRXBuffer@arp(BANK0[32]), 

    mac_isAllZero@mac	PTR struct macaddress size(2) Largest target is 32
		 -> arp_parseFromRXBuffer@arp(BANK0[32]), 

    mac_setToBroadcast@mac	PTR struct macaddress size(2) Largest target is 6
		 -> arp_send@destination(BANK0[6]), 

    sp__macToString	PTR unsigned char  size(2) Largest target is 20
		 -> macToString@address(BANK3[20]), 

    sp__etherTypeToString	PTR unsigned char  size(2) Largest target is 18
		 -> STR_69(CODE[18]), STR_68(CODE[4]), STR_67(CODE[5]), 

    sp__intToString	PTR unsigned char  size(2) Largest target is 10
		 -> intToString@number(BANK3[10]), 

    ethernet_rxGetNewFrame@frame	PTR struct ethernetFrame size(2) Largest target is 124
		 -> stack(BANK4[124]), 

    ethernet_txFrameRequest@frame	PTR struct ethernetFrame size(2) Largest target is 66
		 -> udp_sendPacket@ipPacket(BANK1[66]), tcp_sendSYNACK@ipPacket(BANK1[66]), icmp_sendEchoRequest@ipRequest(COMRAM[66]), icmp_sendEchoReply@ipReply(BANK1[66]), 
		 -> arp_send@ethFrame(BANK0[34]), 

    enc424j600_updateReceiveStatusVector@rsv	PTR unsigned char  size(2) Largest target is 6
		 -> ethernetController_getRSV@temp(BANK2[6]), 

    enc424j600_readPHYRegister@data	PTR unsigned int  size(2) Largest target is 2
		 -> ethernetController_updateLinkStatus@temp16(BANK0[2]), 

    enc424j600_readControlRegisterUnbanked@data	PTR unsigned char  size(2) Largest target is 6
		 -> enc424j600_clearInterruptFlag@temp(BANK0[1]), enc424j600_getInterruptFlags@high(BANK0[1]), enc424j600_getInterruptFlags@low(BANK0[1]), enc424j600_disable@temp(COMRAM[1]), 
		 -> enc424j600_enable@temp(COMRAM[1]), enc424j600_disableAutoMACInsertion@temp(COMRAM[1]), enc424j600_enableAutoMACInsertion@temp(BANK0[1]), enc424j600_getPacketCount@lowByte(BANK0[1]), 
		 -> enc424j600_readPHYRegister@highByte(BANK0[1]), enc424j600_readPHYRegister@lowByte(BANK0[1]), enc424j600_readPHYRegister@temp(BANK0[1]), ethernetController_setLEDConfig@data(BANK0[1]), 
		 -> ethernetController_updateLinkStatus@temp(BANK0[1]), mac.address(COMRAM[6]), ethernetController_getMacAddress@mac(BANK0[6]), ethernetController_getSiliconRevision@data(COMRAM[1]), 
		 -> ethernetController_checkDeviceId@data(BANK0[1]), ethernetController_softReset@receivedData(BANK0[2]), 

    enc424j600_writeControlRegisterUnbanked@data	PTR unsigned char  size(2) Largest target is 6
		 -> enc424j600_clearInterruptFlag@temp(BANK0[1]), enc424j600_disable@temp(COMRAM[1]), enc424j600_enable@temp(COMRAM[1]), enc424j600_disableAutoMACInsertion@temp(COMRAM[1]), 
		 -> enc424j600_enableAutoMACInsertion@temp(BANK0[1]), enc424j600_setRXTailPointer@highByte(BANK0[1]), enc424j600_setRXTailPointer@lowByte(BANK0[1]), enc424j600_setRXBufferStartAddress@highByte(BANK0[1]), 
		 -> enc424j600_setRXBufferStartAddress@lowByte(BANK0[1]), enc424j600_setTXStartAddress@highByte(BANK0[1]), enc424j600_setTXStartAddress@lowByte(BANK0[1]), enc424j600_setTXLength@highByte(BANK0[1]), 
		 -> enc424j600_setTXLength@lowByte(BANK0[1]), enc424j600_readPHYRegister@temp(BANK0[1]), enc424j600_readPHYRegister@unusedBits(BANK0[1]), enc424j600_readPHYRegister@PHYaddress(BANK0[1]), 
		 -> ethernetController_setLEDConfig@data(BANK0[1]), mac.address(COMRAM[6]), ethernetController_setMacAddress@mac(COMRAM[6]), ethernetController_softReset@dataToSend(BANK0[2]), 

    enc424j600_readSPI@data	PTR unsigned char  size(2) Largest target is 6
		 -> enc424j600_clearInterruptFlag@temp(BANK0[1]), enc424j600_getInterruptFlags@high(BANK0[1]), enc424j600_getInterruptFlags@low(BANK0[1]), enc424j600_disable@temp(COMRAM[1]), 
		 -> enc424j600_enable@temp(COMRAM[1]), enc424j600_disableAutoMACInsertion@temp(COMRAM[1]), enc424j600_enableAutoMACInsertion@temp(BANK0[1]), enc424j600_getPacketCount@lowByte(BANK0[1]), 
		 -> enc424j600_readPHYRegister@highByte(BANK0[1]), enc424j600_readPHYRegister@lowByte(BANK0[1]), enc424j600_readPHYRegister@temp(BANK0[1]), ethernetController_setLEDConfig@data(BANK0[1]), 
		 -> ethernetController_updateLinkStatus@temp(BANK0[1]), ethernetController_streamFromRXBuffer@temp(BANK0[1]), ethernetController_updateNextPacketPointer@newPointerH(BANK0[1]), ethernetController_updateNextPacketPointer@newPointerL(BANK0[1]), 
		 -> ethernetController_getRSV@temp(BANK2[6]), ethernetController_getEtherTypeField@lowByte(BANK0[1]), ethernetController_getEtherTypeField@highByte(BANK0[1]), ethernetController_getSourceMACAddress@temp(BANK0[1]), 
		 -> mac.address(COMRAM[6]), ethernetController_getMacAddress@mac(BANK0[6]), ethernetController_getSiliconRevision@data(COMRAM[1]), ethernetController_checkDeviceId@data(BANK0[1]), 
		 -> ethernetController_softReset@receivedData(BANK0[2]), 

    enc424j600_writeSPI@data	PTR unsigned char  size(2) Largest target is 6
		 -> enc424j600_clearInterruptFlag@temp(BANK0[1]), enc424j600_disable@temp(COMRAM[1]), enc424j600_enable@temp(COMRAM[1]), enc424j600_disableAutoMACInsertion@temp(COMRAM[1]), 
		 -> enc424j600_enableAutoMACInsertion@temp(BANK0[1]), enc424j600_setRXTailPointer@highByte(BANK0[1]), enc424j600_setRXTailPointer@lowByte(BANK0[1]), enc424j600_setRXBufferStartAddress@highByte(BANK0[1]), 
		 -> enc424j600_setRXBufferStartAddress@lowByte(BANK0[1]), enc424j600_setERXDATAReadPointer@highByte(BANK0[1]), enc424j600_setERXDATAReadPointer@lowByte(BANK0[1]), enc424j600_setERXDATAReadPointer@opcode(BANK0[1]), 
		 -> enc424j600_setGPDATAReadPointer@highByte(COMRAM[1]), enc424j600_setGPDATAReadPointer@lowByte(COMRAM[1]), enc424j600_setGPDATAReadPointer@opcode(COMRAM[1]), enc424j600_setGPDATAWritePointer@highByte(BANK0[1]), 
		 -> enc424j600_setGPDATAWritePointer@lowByte(BANK0[1]), enc424j600_setGPDATAWritePointer@opcode(BANK0[1]), enc424j600_setTXStartAddress@highByte(BANK0[1]), enc424j600_setTXStartAddress@lowByte(BANK0[1]), 
		 -> enc424j600_setTXLength@highByte(BANK0[1]), enc424j600_setTXLength@lowByte(BANK0[1]), enc424j600_readPHYRegister@temp(BANK0[1]), enc424j600_readPHYRegister@unusedBits(BANK0[1]), 
		 -> enc424j600_readPHYRegister@PHYaddress(BANK0[1]), enc424j600_readControlRegisterUnbanked@addr(BANK0[1]), enc424j600_readControlRegisterUnbanked@opcode(BANK0[1]), enc424j600_writeControlRegisterUnbanked@addr(BANK0[1]), 
		 -> enc424j600_writeControlRegisterUnbanked@opcode(BANK0[1]), enc424j600_writeSingleByte@opcode(BANK0[1]), ethernetController_setLEDConfig@data(BANK0[1]), ethernetController_streamFromRXBuffer@opcode(BANK0[1]), 
		 -> ethernetController_updateNextPacketPointer@opcode(BANK0[1]), ethernetController_getRSV@opcode(BANK0[1]), ethernetController_getEtherTypeField@opcode(BANK0[1]), ethernetController_getSourceMACAddress@opcode(BANK0[1]), 
		 -> ethernetController_writeEtherTypeFieldToBuffer@opcode(BANK0[1]), ethernetController_writeEtherTypeFieldToBuffer@highByte(BANK0[1]), ethernetController_writeEtherTypeFieldToBuffer@lowByte(BANK0[1]), ethernetController_writeDestinationMACAddress@opcode(BANK0[1]), 
		 -> ethernetController_writeDestinationMACAddress@data(BANK0[6]), ethernetController_streamToTransmitBuffer@data(BANK0[1]), ethernetController_streamToTransmitBuffer@opcode(BANK0[1]), mac.address(COMRAM[6]), 
		 -> ethernetController_setMacAddress@mac(COMRAM[6]), ethernetController_softReset@dataToSend(BANK0[2]), 

    ethernetController_updateLinkStatus@state	PTR struct ethernetConnection size(2) Largest target is 124
		 -> stack(BANK4[124]), 

    sp__ethernetController_getDeviceName	PTR unsigned char  size(2) Largest target is 11
		 -> ethernetController_getDeviceName@string(BANK0[11]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->_sevenSegmentUpdate
    _sevenSegmentUpdate->_parseNumber
    _parseNumber->i2___lwdiv

Critical Paths under _main in BANK0

    _udp_sendPacket->_ipv4_streamToTransmissionBuffer
    _tcp_listen->_UARTTransmitText
    _stack_init->_arp_init
    _ipv4_init->_ipv4_setToAllZero
    _srand->_ethernetController_getMacAddress
    _printEthernetState->_UARTTransmitText
    _handleStackBackgroundTasks->_ipv4_sendFrame
    _ipv4_generateAutoIP->___awmod
    ___awmod->_rand
    _ipAdressToString->_itoa
    _ethernet_rxGetNewFrame->_arp_handleNewPacket
    _macToString->_itoa
    _itoa->_utoa
    _utoa->___lwmod
    _ipv4_handleNewPacket->_tcp_handleNewPacket
    _tcp_handleNewPacket->_tcp_stateMachine
    _tcp_stateMachine->_tcp_sendSYNACK
    _tcp_sendSYNACK->_ipv4_streamToTransmissionBuffer
    _intToString->_ltoa
    _ltoa->_ultoa
    _ultoa->___lldiv
    _tcp_parseHeader->_ethernetController_streamFromRXBuffer
    _ipv4_parseHeader->_ethernetController_streamFromRXBuffer
    _ipv4_checkHeaderChecksum->_ipv4_calculateHeaderChecksum
    _icmp_handleNewPacket->_icmp_sendEchoReply
    _icmp_sendEchoReply->_ipv4_streamToTransmissionBuffer
    _ipv4_txFrameRequest->_ethernet_txFrameRequest
    _ipv4_streamToTransmissionBuffer->_ethernetController_streamToTransmitBuffer
    _icmp_parseHeader->_ethernetController_streamFromRXBuffer
    _ethernetController_updateNextPacketPointer->_enc424j600_setERXDATAReadPointer
    _ethernetController_getRSV->_enc424j600_updateReceiveStatusVector
    _ethernetController_getEtherTypeField->_enc424j600_setERXDATAReadPointer
    _ethernetController_dropPacket->_enc424j600_setRXTailPointer
    _ethernetController_getNextPacketPointer->_enc424j600_getNextPacketPointer
    _arp_setNewEntry->_ipv4_cmp
    _arp_setNewEntry->_mac_cmp
    _arp_sendReply->_arp_send
    _arp_parseFromRXBuffer->_ethernetController_streamFromRXBuffer
    _ethernetController_streamFromRXBuffer->_enc424j600_setERXDATAReadPointer
    _UART_setFormat->_UARTTransmitText
    _UART_resetFormat->_UARTTransmitText
    _UARTTransmitText->_macToString
    _ethernetController_updateLinkStatus->_enc424j600_readPHYRegister
    _enc424j600_readPHYRegister->_enc424j600_readControlRegisterUnbanked
    _enc424j600_readPHYRegister->_enc424j600_writeControlRegisterUnbanked
    _ethernetController_setLEDConfig->_enc424j600_readControlRegisterUnbanked
    _ethernetController_setLEDConfig->_enc424j600_writeControlRegisterUnbanked
    _ethernetController_pollInterruptFlags->_enc424j600_getInterruptFlags
    _enc424j600_getInterruptFlags->_enc424j600_readControlRegisterUnbanked
    _ethernetController_newPacketAvailable->_enc424j600_getPacketCount
    _enc424j600_getPacketCount->_enc424j600_readControlRegisterUnbanked
    _ethernetController_init->_ethernetController_softReset
    _ethernetController_softReset->_enc424j600_readControlRegisterUnbanked
    _ethernetController_softReset->_enc424j600_writeControlRegisterUnbanked
    _ethernetController_checkDeviceId->_enc424j600_readControlRegisterUnbanked
    _enc424j600_setRXTailPointer->_enc424j600_writeControlRegisterUnbanked
    _enc424j600_setRXBufferStartAddress->_enc424j600_writeControlRegisterUnbanked
    _enc424j600_enableReception->_enc424j600_writeSingleByte
    _enc424j600_enableAutoMACInsertion->_enc424j600_readControlRegisterUnbanked
    _enc424j600_enableAutoMACInsertion->_enc424j600_writeControlRegisterUnbanked
    _ethernetController_clearInterruptFlag->_enc424j600_clearInterruptFlag
    _enc424j600_clearInterruptFlag->_enc424j600_readControlRegisterUnbanked
    _enc424j600_clearInterruptFlag->_enc424j600_writeControlRegisterUnbanked
    _arp_init->_ipv4_setToAllZero
    _arp_init->_mac_setAllZero
    _arp_background->_arp_gratuitous
    _rand->___lmul
    ___lwmod->_rand
    _arp_sendRequest->_arp_send
    _ethernetController_getMacAddress->_enc424j600_readControlRegisterUnbanked
    _enc424j600_readControlRegisterUnbanked->_enc424j600_readSPI
    _enc424j600_readControlRegisterUnbanked->_enc424j600_writeSPI
    _arp_send->_ethernet_txFrameRequest
    _ethernet_txFrameRequest->_memory_txFrameRequest
    _memory_txFrameRequest->_checkForOverlap
    _checkForOverlap->_checkForOverlapSwitched
    ___wmul->_rand
    _ethernetController_writeEtherTypeFieldToBuffer->_enc424j600_setGPDATAWritePointer
    _ethernetController_writeDestinationMACAddress->_enc424j600_setGPDATAWritePointer
    _ethernetController_streamToTransmitBuffer->_enc424j600_setGPDATAWritePointer
    _enc424j600_setGPDATAWritePointer->_enc424j600_writeSPI
    _ethernetController_sendPacket->_enc424j600_setTXLength
    _ethernetController_sendPacket->_enc424j600_setTXStartAddress
    _enc424j600_writeSingleByte->_enc424j600_writeSPI
    _enc424j600_setTXStartAddress->_enc424j600_writeControlRegisterUnbanked
    _enc424j600_setTXLength->_enc424j600_writeControlRegisterUnbanked
    _enc424j600_writeControlRegisterUnbanked->_enc424j600_writeSPI
    _ethernetController_getSourceMACAddress->_enc424j600_setERXDATAReadPointer
    _enc424j600_setERXDATAReadPointer->_enc424j600_writeSPI
    _arp_checkForEntry->_ipv4_cmp

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_handleStackBackgroundTasks
    _handleStackBackgroundTasks->_ethernet_rxGetNewFrame
    _ipv4_sendFrame->_arp_sendRequest
    _ethernet_rxGetNewFrame->_ipv4_handleNewPacket
    _ipv4_handleNewPacket->_tcp_handleNewPacket
    _tcp_stateMachine->_tcp_sendSYNACK
    _icmp_handleNewPacket->_icmp_sendEchoReply
    _arp_handleNewPacket->_arp_sendReply
    _arp_background->_arp_probe
    _arp_probe->_arp_sendRequest
    _arp_gratuitous->_arp_sendRequest

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    _ethernet_rxGetNewFrame->_ipv4_handleNewPacket
    _ipv4_handleNewPacket->_icmp_handleNewPacket

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                41    41      0  943742
                                            248 BANK1      2     2      0
                                              0 BANK6     38    38      0
                           _UARTInit
                   _UARTTransmitText
                   _UART_resetFormat
                     _UART_setFormat
                       _UART_special
   _ethernetController_checkDeviceId
   _ethernetController_getDeviceName
   _ethernetController_getMacAddress
            _ethernetController_init
    _ethernetController_setLEDConfig
         _handleStackBackgroundTasks
                _ipv4_generateAutoIP
                  _printErrorMessage
                 _printEthernetState
                               _rand
                   _sevenSegmentInit
                              _srand
                         _stack_init
                         _tcp_listen
                     _udp_sendPacket
 ---------------------------------------------------------------------------------
 (1) _udp_sendPacket                                     180   168     12   35099
                                             97 BANK0     14     2     12
                                              0 BANK1    166   166      0
       _ipv4_calculateHeaderChecksum
            _ipv4_getIPSourceAddress
    _ipv4_streamToTransmissionBuffer
                _ipv4_txFrameRequest
         _ipv4_writeHeaderIntoBuffer
 ---------------------------------------------------------------------------------
 (1) _tcp_listen                                           6     4      2   17249
                                             47 BANK0      6     4      2
                   _UARTTransmitText
                             ___wmul
                        _intToString
                               _rand
 ---------------------------------------------------------------------------------
 (1) _stack_init                                           3     3      0    1920
                                             14 BANK0      3     3      0
                           _arp_init
                          _ipv4_init
                           _tcp_init
 ---------------------------------------------------------------------------------
 (2) _tcp_init                                             1     1      0     192
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _ipv4_init                                            0     0      0     546
                  _ipv4_setToAllZero
 ---------------------------------------------------------------------------------
 (1) _srand                                                2     0      2     135
                                             26 BANK0      2     0      2
   _ethernetController_getMacAddress (ARG)
 ---------------------------------------------------------------------------------
 (1) _sevenSegmentInit                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _printEthernetState                                  15     0     15   10693
                                             47 BANK0     15     0     15
                   _UARTTransmitText
 ---------------------------------------------------------------------------------
 (1) _printErrorMessage                                    3     0      3     104
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (1) _handleStackBackgroundTasks                          22    20      2  764887
                                            236 BANK1     12    10      2
                   _UARTTransmitText
                   _UART_resetFormat
                     _UART_setFormat
                       _UART_special
                     _arp_background
                           _arp_init
_ethernetController_clearInterruptFl
 _ethernetController_disableEthernet
          _ethernetController_getMTU
            _ethernetController_init
_ethernetController_newPacketAvailab
_ethernetController_pollInterruptFla
    _ethernetController_setLEDConfig
_ethernetController_updateLinkStatus
             _ethernet_rxGetNewFrame
                        _intToString
                   _ipAdressToString
                    _ipv4_background
                _ipv4_generateAutoIP
                     _ipv4_sendFrame
            _ipv4_setIPSourceAddress
 ---------------------------------------------------------------------------------
 (2) _ipv4_setIPSourceAddress                              4     0      4     239
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _ipv4_sendFrame                                      78    12     66   93625
                                            156 BANK0      4     4      0
                                             52 BANK1     74     8     66
                  _arp_checkForEntry
              _arp_getEntryFromTable
                    _arp_sendRequest
   _ethernetController_getMacAddress
      _ethernetController_sendPacket
_ethernetController_writeDestination
                          _getMillis
 ---------------------------------------------------------------------------------
 (3) _arp_getEntryFromTable                                8     1      7      31
                                              0 BANK0      8     1      7
 ---------------------------------------------------------------------------------
 (1) _ipv4_generateAutoIP                                  8     4      4    1506
                                             20 BANK0      8     4      4
                            ___awmod
                               _rand
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     849
                                             14 BANK0      6     2      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (2) _ipv4_background                                      9     6      3     343
                                              0 BANK0      8     5      3
 ---------------------------------------------------------------------------------
 (2) _ipAdressToString                                     8     4      4    4282
                                             36 BANK0      8     4      4
                               _itoa
 ---------------------------------------------------------------------------------
 (2) _ethernet_rxGetNewFrame                              13    11      2  381959
                                            223 BANK1     13    11      2
                   _UARTTransmitText
                   _UART_resetFormat
                     _UART_setFormat
                _arp_handleNewPacket
                  _etherTypeToString
      _ethernetController_dropPacket
_ethernetController_getEtherTypeFiel
_ethernetController_getNextPacketPoi
          _ethernetController_getRSV
_ethernetController_updateNextPacket
                          _getMillis
                        _intToString
               _ipv4_handleNewPacket
                        _macToString
 ---------------------------------------------------------------------------------
 (3) _macToString                                          9     3      6    4010
                                             36 BANK0      9     3      6
                               _itoa
 ---------------------------------------------------------------------------------
 (3) _itoa                                                 8     2      6    3398
                                             28 BANK0      8     2      6
                               _utoa
 ---------------------------------------------------------------------------------
 (4) _utoa                                                 9     3      6    2541
                                             19 BANK0      9     3      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     933
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _ipv4_handleNewPacket                                49    47      2  211564
                                            145 BANK0      4     4      0
                                            221 BANK1      2     0      2
                                            141 BANK2     43    43      0
      _ethernetController_dropPacket
               _icmp_handleNewPacket
           _ipv4_checkHeaderChecksum
                   _ipv4_parseHeader
                _tcp_handleNewPacket
 ---------------------------------------------------------------------------------
 (4) _tcp_handleNewPacket                                 56    24     32   99111
                                            111 BANK0     34     2     32
                                            199 BANK1     22    22      0
                   _UARTTransmitText
                        _intToString
                    _tcp_parseHeader
                   _tcp_stateMachine
 ---------------------------------------------------------------------------------
 (5) _tcp_stateMachine                                     4     0      4   65364
                                            107 BANK0      4     0      4
                   _UARTTransmitText
                     _tcp_sendSYNACK
 ---------------------------------------------------------------------------------
 (6) _tcp_sendSYNACK                                     209   203      6   54536
                                             97 BANK0     10     4      6
                                              0 BANK1    199   199      0
                   _UARTTransmitText
                        _intToString
       _ipv4_calculateHeaderChecksum
            _ipv4_getIPSourceAddress
    _ipv4_streamToTransmissionBuffer
                _ipv4_txFrameRequest
         _ipv4_writeHeaderIntoBuffer
        _tcp_calculateHeaderChecksum
 ---------------------------------------------------------------------------------
 (7) _tcp_calculateHeaderChecksum                         50    25     25    1617
                                              0 BANK0     50    25     25
 ---------------------------------------------------------------------------------
 (2) _intToString                                          5     0      5    5365
                                             36 BANK0      5     0      5
                               _ltoa
 ---------------------------------------------------------------------------------
 (3) _ltoa                                                10     2      8    2391
                                             26 BANK0     10     2      8
                              _ultoa
 ---------------------------------------------------------------------------------
 (4) _ultoa                                               13     5      8    1846
                                             13 BANK0     13     5      8
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (5) ___llmod                                              9     1      8     440
                                              0 BANK0      9     1      8
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8     657
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (5) _tcp_parseHeader                                     17     6     11   16742
                                             20 BANK0     17     6     11
_ethernetController_streamFromRXBuff
 ---------------------------------------------------------------------------------
 (4) _ipv4_parseHeader                                    50    27     23   16287
                                             20 BANK0     50    27     23
_ethernetController_streamFromRXBuff
 ---------------------------------------------------------------------------------
 (4) _ipv4_checkHeaderChecksum                            27    25      2    1643
                                             15 BANK0     27    25      2
       _ipv4_calculateHeaderChecksum
 ---------------------------------------------------------------------------------
 (4) _icmp_handleNewPacket                               175   143     32   83841
                                            141 BANK0      2     2      0
                                            175 BANK1     32     0     32
                                              0 BANK2    141   141      0
_ethernetController_streamFromRXBuff
          _icmp_calculateChecksumBuf
                   _icmp_parseHeader
                 _icmp_sendEchoReply
 ---------------------------------------------------------------------------------
 (5) _icmp_sendEchoReply                                 219   179     40   51856
                                             97 BANK0     44     4     40
                                              0 BANK1    175   175      0
_ethernetController_streamFromRXBuff
          _icmp_calculateChecksumBuf
         _icmp_writeHeaderIntoBuffer
       _ipv4_calculateHeaderChecksum
            _ipv4_getIPSourceAddress
    _ipv4_streamToTransmissionBuffer
                _ipv4_txFrameRequest
         _ipv4_writeHeaderIntoBuffer
 ---------------------------------------------------------------------------------
 (2) _ipv4_writeHeaderIntoBuffer                          27     2     25    2231
                                              0 BANK0     27     2     25
 ---------------------------------------------------------------------------------
 (2) _ipv4_txFrameRequest                                  6     4      2   20637
                                             71 BANK0      6     4      2
            _ethernet_txFrameRequest
 ---------------------------------------------------------------------------------
 (2) _ipv4_streamToTransmissionBuffer                     67     1     66    8782
                                             30 BANK0     67     1     66
_ethernetController_streamToTransmit
 ---------------------------------------------------------------------------------
 (2) _ipv4_calculateHeaderChecksum                        15    13      2    1312
                                              0 BANK0     15    13      2
 ---------------------------------------------------------------------------------
 (6) _icmp_writeHeaderIntoBuffer                          14     4     10     933
                                              0 BANK0     14     4     10
 ---------------------------------------------------------------------------------
 (6) _icmp_calculateChecksumBuf                           17    13      4    1013
                                              0 BANK0     17    13      4
 ---------------------------------------------------------------------------------
 (5) _icmp_parseHeader                                    16     5     11   15434
                                             20 BANK0     16     5     11
_ethernetController_streamFromRXBuff
 ---------------------------------------------------------------------------------
 (3) _ethernetController_updateNextPacketPointer          11    11      0    7875
                                             15 BANK0     11    11      0
    _enc424j600_getNextPacketPointer
                 _enc424j600_readSPI
   _enc424j600_setERXDATAReadPointer
    _enc424j600_setNextPacketPointer
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (3) _ethernetController_getRSV                            7     2      5    9070
                                             17 BANK0      7     2      5
                 _enc424j600_readSPI
   _enc424j600_setERXDATAReadPointer
_enc424j600_updateReceiveStatusVecto
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (4) _enc424j600_updateReceiveStatusVector                17    12      5    1370
                                              0 BANK0     17    12      5
 ---------------------------------------------------------------------------------
 (3) _ethernetController_getEtherTypeField                18     9      9    7774
                                             15 BANK0     18     9      9
                 _enc424j600_readSPI
   _enc424j600_setERXDATAReadPointer
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (3) _etherTypeToString                                    4     2      2     447
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _arp_handleNewPacket                                 36    34      2   94240
                                            156 BANK0      4     2      2
                                             88 BANK1     32    32      0
              _arp_parseFromRXBuffer
                      _arp_sendReply
                    _arp_setNewEntry
      _ethernetController_dropPacket
                          _getMillis
                     _ipv4_isAllZero
 ---------------------------------------------------------------------------------
 (4) _ethernetController_dropPacket                        2     0      2    9200
                                             18 BANK0      2     0      2
        _enc424j600_setRXTailPointer
         _enc424j600_writeSingleByte
_ethernetController_getNextPacketPoi
 ---------------------------------------------------------------------------------
 (5) _ethernetController_getNextPacketPointer              2     0      2       0
                                              2 BANK0      2     0      2
    _enc424j600_getNextPacketPointer
 ---------------------------------------------------------------------------------
 (6) _enc424j600_getNextPacketPointer                      2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _arp_setNewEntry                                     24    10     14    2706
                                              7 BANK0     24    10     14
                          _getMillis (ARG)
                           _ipv4_cmp
                            _mac_cmp
 ---------------------------------------------------------------------------------
 (4) _arp_sendReply                                       88    56     32   61875
                                              0 BANK1     88    56     32
                           _arp_send
   _ethernetController_getMacAddress
                           _ipv4_cmp
            _ipv4_getIPSourceAddress
 ---------------------------------------------------------------------------------
 (2) _ipv4_getIPSourceAddress                              4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (4) _arp_parseFromRXBuffer                               73    41     32   19723
                                             20 BANK0     73    41     32
_ethernetController_streamFromRXBuff
                           _ipv4_cmp
                     _ipv4_isAllZero
                            _mac_cmp
                      _mac_isAllZero
 ---------------------------------------------------------------------------------
 (5) _mac_isAllZero                                        3     1      2     234
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (5) _mac_cmp                                              7     3      4     608
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) _ipv4_isAllZero                                       3     1      2     338
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (6) _ethernetController_streamFromRXBuffer                5     3      2   14668
                                             15 BANK0      5     3      2
                 _enc424j600_readSPI
   _enc424j600_setERXDATAReadPointer
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (3) _UART_setFormat                                       1     1      0   10496
                                             47 BANK0      1     1      0
                   _UARTTransmitText
 ---------------------------------------------------------------------------------
 (3) _UART_resetFormat                                     0     0      0   10465
                   _UARTTransmitText
 ---------------------------------------------------------------------------------
 (2) _UARTTransmitText                                     2     0      2   10465
                                             45 BANK0      2     0      2
                       _UART_special (ARG)
                  _etherTypeToString (ARG)
   _ethernetController_getDeviceName (ARG)
                        _intToString (ARG)
                   _ipAdressToString (ARG)
                        _macToString (ARG)
 ---------------------------------------------------------------------------------
 (2) _ethernetController_updateLinkStatus                  5     3      2   20608
                                             32 BANK0      5     3      2
_enc424j600_readControlRegisterUnban
         _enc424j600_readPHYRegister
 ---------------------------------------------------------------------------------
 (3) _enc424j600_readPHYRegister                          18    16      2   13305
                                             14 BANK0     18    16      2
_enc424j600_readControlRegisterUnban
_enc424j600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (2) _ethernetController_setLEDConfig                      3     2      1   13717
                                             14 BANK0      3     2      1
_enc424j600_readControlRegisterUnban
_enc424j600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (2) _ethernetController_pollInterruptFlags               10     8      2    7418
                                             24 BANK0     10     8      2
       _enc424j600_getInterruptFlags
 ---------------------------------------------------------------------------------
 (3) _enc424j600_getInterruptFlags                        10     8      2    6982
                                             14 BANK0     10     8      2
_enc424j600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (2) _ethernetController_newPacketAvailable                0     0      0    6917
          _enc424j600_getPacketCount
 ---------------------------------------------------------------------------------
 (3) _enc424j600_getPacketCount                            1     1      0    6917
                                             14 BANK0      1     1      0
_enc424j600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (2) _ethernetController_init                              6     3      3   51768
                                             26 BANK0      6     3      3
  _enc424j600_enableAutoMACInsertion
         _enc424j600_enableReception
                 _enc424j600_initSPI
    _enc424j600_setNextPacketPointer
 _enc424j600_setRXBufferStartAddress
        _enc424j600_setRXTailPointer
   _ethernetController_checkDeviceId
       _ethernetController_softReset
 ---------------------------------------------------------------------------------
 (3) _ethernetController_softReset                        12     9      3   16269
                                             14 BANK0     12     9      3
_enc424j600_readControlRegisterUnban
_enc424j600_writeControlRegisterUnba
         _enc424j600_writeSingleByte
 ---------------------------------------------------------------------------------
 (3) _ethernetController_checkDeviceId                     7     4      3    7062
                                             14 BANK0      7     4      3
_enc424j600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (5) _enc424j600_setRXTailPointer                          4     2      2    6262
                                             14 BANK0      4     2      2
_enc424j600_writeControlRegisterUnba
_ethernetController_getNextPacketPoi (ARG)
 ---------------------------------------------------------------------------------
 (3) _enc424j600_setRXBufferStartAddress                   4     2      2    6054
                                             14 BANK0      4     2      2
_enc424j600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (4) _enc424j600_setNextPacketPointer                      2     0      2     239
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _enc424j600_enableReception                           0     0      0    2938
         _enc424j600_writeSingleByte
 ---------------------------------------------------------------------------------
 (3) _enc424j600_enableAutoMACInsertion                    1     1      0   12737
                                             14 BANK0      1     1      0
_enc424j600_readControlRegisterUnban
_enc424j600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (2) _ethernetController_getMTU                            2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ethernetController_disableEthernet                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ethernetController_clearInterruptFlag                1     1      0   12926
                                             18 BANK0      1     1      0
      _enc424j600_clearInterruptFlag
 ---------------------------------------------------------------------------------
 (3) _enc424j600_clearInterruptFlag                        4     4      0   12895
                                             14 BANK0      4     4      0
_enc424j600_readControlRegisterUnban
_enc424j600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (2) _arp_init                                            11    11      0    1175
                                              3 BANK0     11    11      0
                  _ipv4_setToAllZero
                     _mac_setAllZero
 ---------------------------------------------------------------------------------
 (2) _arp_background                                      12     9      3  130710
                                             81 BANK1     12     9      3
                     _arp_gratuitous
                          _arp_probe
                _ipv4_SrcAddrChanged
 _ipv4_getPreliminaryIPSourceAddress
 ---------------------------------------------------------------------------------
 (3) _ipv4_getPreliminaryIPSourceAddress                   4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (3) _ipv4_SrcAddrChanged                                  2     0      2     135
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _arp_probe                                           29    24      5   66175
                                             52 BANK1     29    24      5
                            ___lwmod
                  _arp_checkForEntry
                    _arp_sendRequest
                          _getMillis
                  _ipv4_setToAllZero
                               _rand
 ---------------------------------------------------------------------------------
 (2) _rand                                                 2     0      2     512
                                             12 BANK0      2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     512
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) _ipv4_setToAllZero                                    3     1      2     546
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     856
                                             14 BANK0      5     1      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (3) _arp_gratuitous                                      17    12      5   64128
                                            156 BANK0      4     4      0
                                             52 BANK1     13     8      5
                  _arp_checkForEntry
                    _arp_sendRequest
                          _getMillis
 ---------------------------------------------------------------------------------
 (3) _arp_sendRequest                                     52    44      8   61353
                                              0 BANK1     52    44      8
                           _arp_send
   _ethernetController_getMacAddress
                     _mac_setAllZero
 ---------------------------------------------------------------------------------
 (3) _mac_setAllZero                                       3     1      2     338
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _ethernetController_getMacAddress                    12     6      6    7069
                                             14 BANK0     12     6      6
_enc424j600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (4) _enc424j600_readControlRegisterUnbanked               4     2      2    6846
                                             10 BANK0      4     2      2
                 _enc424j600_readSPI
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (4) _arp_send                                            85    53     32   52831
                                             71 BANK0     85    53     32
_ethernetController_getSourceMACAddr
      _ethernetController_sendPacket
_ethernetController_streamToTransmit
            _ethernet_txFrameRequest
                 _mac_setToBroadcast
 ---------------------------------------------------------------------------------
 (5) _mac_setToBroadcast                                   3     1      2     234
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _ethernet_txFrameRequest                              5     3      2   19725
                                             66 BANK0      5     3      2
_ethernetController_writeDestination
_ethernetController_writeEtherTypeFi
              _memory_txFrameRequest
 ---------------------------------------------------------------------------------
 (4) _memory_txFrameRequest                               30    21      9    5312
                                             36 BANK0     30    21      9
                             ___wmul
                    _checkForOverlap
                  _entireMemoryEmpty
                   _entireMemoryFull
 ---------------------------------------------------------------------------------
 (5) _entireMemoryFull                                     1     1      0      99
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _entireMemoryEmpty                                    1     1      0      99
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _checkForOverlap                                     18     0     18    2380
                                             18 BANK0     18     0     18
            _checkForOverlapSwitched
 ---------------------------------------------------------------------------------
 (6) _checkForOverlapSwitched                             18     0     18    1128
                                              0 BANK0     18     0     18
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     648
                                             14 BANK0      6     2      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (4) _ethernetController_writeEtherTypeFieldToBuffer      14     3     11    6705
                                             15 BANK0     14     3     11
   _enc424j600_setGPDATAWritePointer
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (4) _ethernetController_writeDestinationMACAddress       24     9     15    7111
                                             15 BANK0     24     9     15
   _enc424j600_setGPDATAWritePointer
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (3) _ethernetController_streamToTransmitBuffer           15     6      9    7781
                                             15 BANK0     15     6      9
   _enc424j600_setGPDATAWritePointer
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (5) _enc424j600_setGPDATAWritePointer                     5     3      2    3389
                                             10 BANK0      5     3      2
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (3) _ethernetController_sendPacket                        9     0      9   15384
                                             18 BANK0      9     0      9
             _enc424j600_setTXLength
       _enc424j600_setTXStartAddress
         _enc424j600_writeSingleByte
                _memory_txFrameClear
 ---------------------------------------------------------------------------------
 (4) _memory_txFrameClear                                  1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _enc424j600_writeSingleByte                           1     1      0    2938
                                             10 BANK0      1     1      0
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (4) _enc424j600_setTXStartAddress                         4     2      2    6054
                                             14 BANK0      4     2      2
_enc424j600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (4) _enc424j600_setTXLength                               4     2      2    6054
                                             14 BANK0      4     2      2
_enc424j600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (5) _enc424j600_writeControlRegisterUnbanked              4     2      2    5814
                                             10 BANK0      4     2      2
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (5) _ethernetController_getSourceMACAddress              18     9      9    7836
                                             15 BANK0     18     9      9
                 _enc424j600_readSPI
   _enc424j600_setERXDATAReadPointer
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (6) _enc424j600_setERXDATAReadPointer                     5     3      2    3597
                                             10 BANK0      5     3      2
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (5) _enc424j600_writeSPI                                 10     8      2    2904
                                              0 BANK0     10     8      2
                 _enc424j600_initSPI
 ---------------------------------------------------------------------------------
 (5) _enc424j600_readSPI                                  10     8      2     928
                                              0 BANK0     10     8      2
                 _enc424j600_initSPI
 ---------------------------------------------------------------------------------
 (6) _enc424j600_initSPI                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _arp_checkForEntry                                   15     9      6    2082
                                              7 BANK0     15     9      6
                          _getMillis
                           _ipv4_cmp
 ---------------------------------------------------------------------------------
 (4) _ipv4_cmp                                             7     3      4    1232
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _getMillis                                            4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _UART_special                                         3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _ethernetController_getDeviceName                    13    11      2      40
                                              0 BANK0     13    11      2
 ---------------------------------------------------------------------------------
 (1) _UARTInit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (13) _ISR                                                18    18      0    1115
                                             21 COMRAM    18    18      0
                      _buttonHandler
                 _sevenSegmentUpdate
                         _updateTime
 ---------------------------------------------------------------------------------
 (14) _updateTime                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _sevenSegmentUpdate                                  7     5      2     914
                                             14 COMRAM     7     5      2
                        _parseNumber
 ---------------------------------------------------------------------------------
 (15) _parseNumber                                         7     4      3     667
                                              7 COMRAM     7     4      3
                          i2___lwdiv
 ---------------------------------------------------------------------------------
 (16) i2___lwdiv                                           7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (14) _buttonHandler                                      10     8      2     201
                                              0 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 16
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UARTInit
   _UARTTransmitText
     _UART_special (ARG)
     _etherTypeToString (ARG)
     _ethernetController_getDeviceName (ARG)
     _intToString (ARG)
       _ltoa
         _ultoa
           ___lldiv
           ___llmod
     _ipAdressToString (ARG)
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
     _macToString (ARG)
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
   _UART_resetFormat
     _UARTTransmitText
       _UART_special (ARG)
       _etherTypeToString (ARG)
       _ethernetController_getDeviceName (ARG)
       _intToString (ARG)
         _ltoa
           _ultoa
             ___lldiv
             ___llmod
       _ipAdressToString (ARG)
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
               _rand (ARG)
                 ___lmul
       _macToString (ARG)
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
               _rand (ARG)
                 ___lmul
   _UART_setFormat
     _UARTTransmitText
       _UART_special (ARG)
       _etherTypeToString (ARG)
       _ethernetController_getDeviceName (ARG)
       _intToString (ARG)
         _ltoa
           _ultoa
             ___lldiv
             ___llmod
       _ipAdressToString (ARG)
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
               _rand (ARG)
                 ___lmul
       _macToString (ARG)
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
               _rand (ARG)
                 ___lmul
   _UART_special
   _ethernetController_checkDeviceId
     _enc424j600_readControlRegisterUnbanked
       _enc424j600_readSPI
         _enc424j600_initSPI
       _enc424j600_writeSPI
         _enc424j600_initSPI
   _ethernetController_getDeviceName
   _ethernetController_getMacAddress
     _enc424j600_readControlRegisterUnbanked
       _enc424j600_readSPI
         _enc424j600_initSPI
       _enc424j600_writeSPI
         _enc424j600_initSPI
   _ethernetController_init
     _enc424j600_enableAutoMACInsertion
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _enc424j600_writeControlRegisterUnbanked
         _enc424j600_writeSPI
           _enc424j600_initSPI
     _enc424j600_enableReception
       _enc424j600_writeSingleByte
         _enc424j600_writeSPI
           _enc424j600_initSPI
     _enc424j600_initSPI
     _enc424j600_setNextPacketPointer
     _enc424j600_setRXBufferStartAddress
       _enc424j600_writeControlRegisterUnbanked
         _enc424j600_writeSPI
           _enc424j600_initSPI
     _enc424j600_setRXTailPointer
       _enc424j600_writeControlRegisterUnbanked
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _ethernetController_getNextPacketPointer (ARG)
         _enc424j600_getNextPacketPointer
     _ethernetController_checkDeviceId
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
     _ethernetController_softReset
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _enc424j600_writeControlRegisterUnbanked
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _enc424j600_writeSingleByte
         _enc424j600_writeSPI
           _enc424j600_initSPI
   _ethernetController_setLEDConfig
     _enc424j600_readControlRegisterUnbanked
       _enc424j600_readSPI
         _enc424j600_initSPI
       _enc424j600_writeSPI
         _enc424j600_initSPI
     _enc424j600_writeControlRegisterUnbanked
       _enc424j600_writeSPI
         _enc424j600_initSPI
   _handleStackBackgroundTasks
     _UARTTransmitText
       _UART_special (ARG)
       _etherTypeToString (ARG)
       _ethernetController_getDeviceName (ARG)
       _intToString (ARG)
         _ltoa
           _ultoa
             ___lldiv
             ___llmod
       _ipAdressToString (ARG)
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
               _rand (ARG)
                 ___lmul
       _macToString (ARG)
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
               _rand (ARG)
                 ___lmul
     _UART_resetFormat
       _UARTTransmitText
         _UART_special (ARG)
         _etherTypeToString (ARG)
         _ethernetController_getDeviceName (ARG)
         _intToString (ARG)
           _ltoa
             _ultoa
               ___lldiv
               ___llmod
         _ipAdressToString (ARG)
           _itoa
             _utoa
               ___lwdiv
               ___lwmod
                 _rand (ARG)
                   ___lmul
         _macToString (ARG)
           _itoa
             _utoa
               ___lwdiv
               ___lwmod
                 _rand (ARG)
                   ___lmul
     _UART_setFormat
       _UARTTransmitText
         _UART_special (ARG)
         _etherTypeToString (ARG)
         _ethernetController_getDeviceName (ARG)
         _intToString (ARG)
           _ltoa
             _ultoa
               ___lldiv
               ___llmod
         _ipAdressToString (ARG)
           _itoa
             _utoa
               ___lwdiv
               ___lwmod
                 _rand (ARG)
                   ___lmul
         _macToString (ARG)
           _itoa
             _utoa
               ___lwdiv
               ___lwmod
                 _rand (ARG)
                   ___lmul
     _UART_special
     _arp_background
       _arp_gratuitous
         _arp_checkForEntry
           _getMillis
           _ipv4_cmp
         _arp_sendRequest
           _arp_send
             _ethernetController_getSourceMACAddress
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_setERXDATAReadPointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernetController_sendPacket
               _enc424j600_setTXLength
                 _enc424j600_writeControlRegisterUnbanked
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
               _enc424j600_setTXStartAddress
                 _enc424j600_writeControlRegisterUnbanked
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
               _enc424j600_writeSingleByte
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _memory_txFrameClear
             _ethernetController_streamToTransmitBuffer
               _enc424j600_setGPDATAWritePointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernet_txFrameRequest
               _ethernetController_writeDestinationMACAddress
                 _enc424j600_setGPDATAWritePointer
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _ethernetController_writeEtherTypeFieldToBuffer
                 _enc424j600_setGPDATAWritePointer
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _memory_txFrameRequest
                 ___wmul
                   _rand (ARG)
                     ___lmul
                 _checkForOverlap
                   _checkForOverlapSwitched
                 _entireMemoryEmpty
                 _entireMemoryFull
             _mac_setToBroadcast
           _ethernetController_getMacAddress
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _mac_setAllZero
         _getMillis
       _arp_probe
         ___lwmod
           _rand (ARG)
             ___lmul
         _arp_checkForEntry
           _getMillis
           _ipv4_cmp
         _arp_sendRequest
           _arp_send
             _ethernetController_getSourceMACAddress
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_setERXDATAReadPointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernetController_sendPacket
               _enc424j600_setTXLength
                 _enc424j600_writeControlRegisterUnbanked
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
               _enc424j600_setTXStartAddress
                 _enc424j600_writeControlRegisterUnbanked
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
               _enc424j600_writeSingleByte
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _memory_txFrameClear
             _ethernetController_streamToTransmitBuffer
               _enc424j600_setGPDATAWritePointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernet_txFrameRequest
               _ethernetController_writeDestinationMACAddress
                 _enc424j600_setGPDATAWritePointer
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _ethernetController_writeEtherTypeFieldToBuffer
                 _enc424j600_setGPDATAWritePointer
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _memory_txFrameRequest
                 ___wmul
                   _rand (ARG)
                     ___lmul
                 _checkForOverlap
                   _checkForOverlapSwitched
                 _entireMemoryEmpty
                 _entireMemoryFull
             _mac_setToBroadcast
           _ethernetController_getMacAddress
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _mac_setAllZero
         _getMillis
         _ipv4_setToAllZero
         _rand
           ___lmul
       _ipv4_SrcAddrChanged
       _ipv4_getPreliminaryIPSourceAddress
     _arp_init
       _ipv4_setToAllZero
       _mac_setAllZero
     _ethernetController_clearInterruptFlag
       _enc424j600_clearInterruptFlag
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_writeControlRegisterUnbanked
           _enc424j600_writeSPI
             _enc424j600_initSPI
     _ethernetController_disableEthernet
     _ethernetController_getMTU
     _ethernetController_init
       _enc424j600_enableAutoMACInsertion
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_writeControlRegisterUnbanked
           _enc424j600_writeSPI
             _enc424j600_initSPI
       _enc424j600_enableReception
         _enc424j600_writeSingleByte
           _enc424j600_writeSPI
             _enc424j600_initSPI
       _enc424j600_initSPI
       _enc424j600_setNextPacketPointer
       _enc424j600_setRXBufferStartAddress
         _enc424j600_writeControlRegisterUnbanked
           _enc424j600_writeSPI
             _enc424j600_initSPI
       _enc424j600_setRXTailPointer
         _enc424j600_writeControlRegisterUnbanked
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _ethernetController_getNextPacketPointer (ARG)
           _enc424j600_getNextPacketPointer
       _ethernetController_checkDeviceId
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
       _ethernetController_softReset
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_writeControlRegisterUnbanked
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_writeSingleByte
           _enc424j600_writeSPI
             _enc424j600_initSPI
     _ethernetController_newPacketAvailable
       _enc424j600_getPacketCount
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
     _ethernetController_pollInterruptFlags
       _enc424j600_getInterruptFlags
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
     _ethernetController_setLEDConfig
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _enc424j600_writeControlRegisterUnbanked
         _enc424j600_writeSPI
           _enc424j600_initSPI
     _ethernetController_updateLinkStatus
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _enc424j600_readPHYRegister
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_writeControlRegisterUnbanked
           _enc424j600_writeSPI
             _enc424j600_initSPI
     _ethernet_rxGetNewFrame
       _UARTTransmitText
         _UART_special (ARG)
         _etherTypeToString (ARG)
         _ethernetController_getDeviceName (ARG)
         _intToString (ARG)
           _ltoa
             _ultoa
               ___lldiv
               ___llmod
         _ipAdressToString (ARG)
           _itoa
             _utoa
               ___lwdiv
               ___lwmod
                 _rand (ARG)
                   ___lmul
         _macToString (ARG)
           _itoa
             _utoa
               ___lwdiv
               ___lwmod
                 _rand (ARG)
                   ___lmul
       _UART_resetFormat
         _UARTTransmitText
           _UART_special (ARG)
           _etherTypeToString (ARG)
           _ethernetController_getDeviceName (ARG)
           _intToString (ARG)
             _ltoa
               _ultoa
                 ___lldiv
                 ___llmod
           _ipAdressToString (ARG)
             _itoa
               _utoa
                 ___lwdiv
                 ___lwmod
                   _rand (ARG)
                     ___lmul
           _macToString (ARG)
             _itoa
               _utoa
                 ___lwdiv
                 ___lwmod
                   _rand (ARG)
                     ___lmul
       _UART_setFormat
         _UARTTransmitText
           _UART_special (ARG)
           _etherTypeToString (ARG)
           _ethernetController_getDeviceName (ARG)
           _intToString (ARG)
             _ltoa
               _ultoa
                 ___lldiv
                 ___llmod
           _ipAdressToString (ARG)
             _itoa
               _utoa
                 ___lwdiv
                 ___lwmod
                   _rand (ARG)
                     ___lmul
           _macToString (ARG)
             _itoa
               _utoa
                 ___lwdiv
                 ___lwmod
                   _rand (ARG)
                     ___lmul
       _arp_handleNewPacket
         _arp_parseFromRXBuffer
           _ethernetController_streamFromRXBuffer
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_setERXDATAReadPointer
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
           _ipv4_cmp
           _ipv4_isAllZero
           _mac_cmp
           _mac_isAllZero
         _arp_sendReply
           _arp_send
             _ethernetController_getSourceMACAddress
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_setERXDATAReadPointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernetController_sendPacket
               _enc424j600_setTXLength
                 _enc424j600_writeControlRegisterUnbanked
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
               _enc424j600_setTXStartAddress
                 _enc424j600_writeControlRegisterUnbanked
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
               _enc424j600_writeSingleByte
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _memory_txFrameClear
             _ethernetController_streamToTransmitBuffer
               _enc424j600_setGPDATAWritePointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernet_txFrameRequest
               _ethernetController_writeDestinationMACAddress
                 _enc424j600_setGPDATAWritePointer
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _ethernetController_writeEtherTypeFieldToBuffer
                 _enc424j600_setGPDATAWritePointer
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _memory_txFrameRequest
                 ___wmul
                   _rand (ARG)
                     ___lmul
                 _checkForOverlap
                   _checkForOverlapSwitched
                 _entireMemoryEmpty
                 _entireMemoryFull
             _mac_setToBroadcast
           _ethernetController_getMacAddress
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _ipv4_cmp
           _ipv4_getIPSourceAddress
         _arp_setNewEntry
           _getMillis (ARG)
           _ipv4_cmp (ARG)
           _mac_cmp (ARG)
         _ethernetController_dropPacket
           _enc424j600_setRXTailPointer
             _enc424j600_writeControlRegisterUnbanked
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernetController_getNextPacketPointer (ARG)
               _enc424j600_getNextPacketPointer
           _enc424j600_writeSingleByte
             _enc424j600_writeSPI
               _enc424j600_initSPI
           _ethernetController_getNextPacketPointer
             _enc424j600_getNextPacketPointer
         _getMillis
         _ipv4_isAllZero
       _etherTypeToString
       _ethernetController_dropPacket
         _enc424j600_setRXTailPointer
           _enc424j600_writeControlRegisterUnbanked
             _enc424j600_writeSPI
               _enc424j600_initSPI
           _ethernetController_getNextPacketPointer (ARG)
             _enc424j600_getNextPacketPointer
         _enc424j600_writeSingleByte
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _ethernetController_getNextPacketPointer
           _enc424j600_getNextPacketPointer
       _ethernetController_getEtherTypeField
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_setERXDATAReadPointer
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _ethernetController_getNextPacketPointer
         _enc424j600_getNextPacketPointer
       _ethernetController_getRSV
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_setERXDATAReadPointer
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_updateReceiveStatusVector
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _ethernetController_updateNextPacketPointer
         _enc424j600_getNextPacketPointer
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_setERXDATAReadPointer
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_setNextPacketPointer
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _getMillis
       _intToString
         _ltoa
           _ultoa
             ___lldiv
             ___llmod
       _ipv4_handleNewPacket
         _ethernetController_dropPacket
           _enc424j600_setRXTailPointer
             _enc424j600_writeControlRegisterUnbanked
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernetController_getNextPacketPointer (ARG)
               _enc424j600_getNextPacketPointer
           _enc424j600_writeSingleByte
             _enc424j600_writeSPI
               _enc424j600_initSPI
           _ethernetController_getNextPacketPointer
             _enc424j600_getNextPacketPointer
         _icmp_handleNewPacket
           _ethernetController_streamFromRXBuffer
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_setERXDATAReadPointer
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
           _icmp_calculateChecksumBuf
           _icmp_parseHeader
             _ethernetController_streamFromRXBuffer
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_setERXDATAReadPointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _icmp_sendEchoReply
             _ethernetController_streamFromRXBuffer
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_setERXDATAReadPointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _icmp_calculateChecksumBuf
             _icmp_writeHeaderIntoBuffer
             _ipv4_calculateHeaderChecksum
             _ipv4_getIPSourceAddress
             _ipv4_streamToTransmissionBuffer
               _ethernetController_streamToTransmitBuffer
                 _enc424j600_setGPDATAWritePointer
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
             _ipv4_txFrameRequest
               _ethernet_txFrameRequest
                 _ethernetController_writeDestinationMACAddress
                   _enc424j600_setGPDATAWritePointer
                     _enc424j600_writeSPI
                       _enc424j600_initSPI
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
                 _ethernetController_writeEtherTypeFieldToBuffer
                   _enc424j600_setGPDATAWritePointer
                     _enc424j600_writeSPI
                       _enc424j600_initSPI
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
                 _memory_txFrameRequest
                   ___wmul
                     _rand (ARG)
                       ___lmul
                   _checkForOverlap
                     _checkForOverlapSwitched
                   _entireMemoryEmpty
                   _entireMemoryFull
             _ipv4_writeHeaderIntoBuffer
         _ipv4_checkHeaderChecksum
           _ipv4_calculateHeaderChecksum
         _ipv4_parseHeader
           _ethernetController_streamFromRXBuffer
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_setERXDATAReadPointer
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
         _tcp_handleNewPacket
           _UARTTransmitText
             _UART_special (ARG)
             _etherTypeToString (ARG)
             _ethernetController_getDeviceName (ARG)
             _intToString (ARG)
               _ltoa
                 _ultoa
                   ___lldiv
                   ___llmod
             _ipAdressToString (ARG)
               _itoa
                 _utoa
                   ___lwdiv
                   ___lwmod
                     _rand (ARG)
                       ___lmul
             _macToString (ARG)
               _itoa
                 _utoa
                   ___lwdiv
                   ___lwmod
                     _rand (ARG)
                       ___lmul
           _intToString
             _ltoa
               _ultoa
                 ___lldiv
                 ___llmod
           _tcp_parseHeader
             _ethernetController_streamFromRXBuffer
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_setERXDATAReadPointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _tcp_stateMachine
             _UARTTransmitText
               _UART_special (ARG)
               _etherTypeToString (ARG)
               _ethernetController_getDeviceName (ARG)
               _intToString (ARG)
                 _ltoa
                   _ultoa
                     ___lldiv
                     ___llmod
               _ipAdressToString (ARG)
                 _itoa
                   _utoa
                     ___lwdiv
                     ___lwmod
                       _rand (ARG)
                         ___lmul
               _macToString (ARG)
                 _itoa
                   _utoa
                     ___lwdiv
                     ___lwmod
                       _rand (ARG)
                         ___lmul
             _tcp_sendSYNACK
               _UARTTransmitText
                 _UART_special (ARG)
                 _etherTypeToString (ARG)
                 _ethernetController_getDeviceName (ARG)
                 _intToString (ARG)
                   _ltoa
                     _ultoa
                       ___lldiv
                       ___llmod
                 _ipAdressToString (ARG)
                   _itoa
                     _utoa
                       ___lwdiv
                       ___lwmod
                         _rand (ARG)
                           ___lmul
                 _macToString (ARG)
                   _itoa
                     _utoa
                       ___lwdiv
                       ___lwmod
                         _rand (ARG)
                           ___lmul
               _intToString
                 _ltoa
                   _ultoa
                     ___lldiv
                     ___llmod
               _ipv4_calculateHeaderChecksum
               _ipv4_getIPSourceAddress
               _ipv4_streamToTransmissionBuffer
                 _ethernetController_streamToTransmitBuffer
                   _enc424j600_setGPDATAWritePointer
                     _enc424j600_writeSPI
                       _enc424j600_initSPI
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
               _ipv4_txFrameRequest
                 _ethernet_txFrameRequest
                   _ethernetController_writeDestinationMACAddress
                     _enc424j600_setGPDATAWritePointer
                       _enc424j600_writeSPI
                         _enc424j600_initSPI
                     _enc424j600_writeSPI
                       _enc424j600_initSPI
                   _ethernetController_writeEtherTypeFieldToBuffer
                     _enc424j600_setGPDATAWritePointer
                       _enc424j600_writeSPI
                         _enc424j600_initSPI
                     _enc424j600_writeSPI
                       _enc424j600_initSPI
                   _memory_txFrameRequest
                     ___wmul
                       _rand (ARG)
                         ___lmul
                     _checkForOverlap
                       _checkForOverlapSwitched
                     _entireMemoryEmpty
                     _entireMemoryFull
               _ipv4_writeHeaderIntoBuffer
               _tcp_calculateHeaderChecksum
       _macToString
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
               _rand (ARG)
                 ___lmul
     _intToString
       _ltoa
         _ultoa
           ___lldiv
           ___llmod
     _ipAdressToString
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
     _ipv4_background
     _ipv4_generateAutoIP
       ___awmod
         _rand (ARG)
           ___lmul
       _rand
         ___lmul
     _ipv4_sendFrame
       _arp_checkForEntry
         _getMillis
         _ipv4_cmp
       _arp_getEntryFromTable
       _arp_sendRequest
         _arp_send
           _ethernetController_getSourceMACAddress
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_setERXDATAReadPointer
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
           _ethernetController_sendPacket
             _enc424j600_setTXLength
               _enc424j600_writeControlRegisterUnbanked
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
             _enc424j600_setTXStartAddress
               _enc424j600_writeControlRegisterUnbanked
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
             _enc424j600_writeSingleByte
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _memory_txFrameClear
           _ethernetController_streamToTransmitBuffer
             _enc424j600_setGPDATAWritePointer
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
           _ethernet_txFrameRequest
             _ethernetController_writeDestinationMACAddress
               _enc424j600_setGPDATAWritePointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernetController_writeEtherTypeFieldToBuffer
               _enc424j600_setGPDATAWritePointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _memory_txFrameRequest
               ___wmul
                 _rand (ARG)
                   ___lmul
               _checkForOverlap
                 _checkForOverlapSwitched
               _entireMemoryEmpty
               _entireMemoryFull
           _mac_setToBroadcast
         _ethernetController_getMacAddress
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
         _mac_setAllZero
       _ethernetController_getMacAddress
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
       _ethernetController_sendPacket
         _enc424j600_setTXLength
           _enc424j600_writeControlRegisterUnbanked
             _enc424j600_writeSPI
               _enc424j600_initSPI
         _enc424j600_setTXStartAddress
           _enc424j600_writeControlRegisterUnbanked
             _enc424j600_writeSPI
               _enc424j600_initSPI
         _enc424j600_writeSingleByte
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _memory_txFrameClear
       _ethernetController_writeDestinationMACAddress
         _enc424j600_setGPDATAWritePointer
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _getMillis
     _ipv4_setIPSourceAddress
   _ipv4_generateAutoIP
     ___awmod
       _rand (ARG)
         ___lmul
     _rand
       ___lmul
   _printErrorMessage
   _printEthernetState
     _UARTTransmitText
       _UART_special (ARG)
       _etherTypeToString (ARG)
       _ethernetController_getDeviceName (ARG)
       _intToString (ARG)
         _ltoa
           _ultoa
             ___lldiv
             ___llmod
       _ipAdressToString (ARG)
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
               _rand (ARG)
                 ___lmul
       _macToString (ARG)
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
               _rand (ARG)
                 ___lmul
   _rand
     ___lmul
   _sevenSegmentInit
   _srand
     _ethernetController_getMacAddress (ARG)
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
   _stack_init
     _arp_init
       _ipv4_setToAllZero
       _mac_setAllZero
     _ipv4_init
       _ipv4_setToAllZero
     _tcp_init
   _tcp_listen
     _UARTTransmitText
       _UART_special (ARG)
       _etherTypeToString (ARG)
       _ethernetController_getDeviceName (ARG)
       _intToString (ARG)
         _ltoa
           _ultoa
             ___lldiv
             ___llmod
       _ipAdressToString (ARG)
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
               _rand (ARG)
                 ___lmul
       _macToString (ARG)
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
               _rand (ARG)
                 ___lmul
     ___wmul
       _rand (ARG)
         ___lmul
     _intToString
       _ltoa
         _ultoa
           ___lldiv
           ___llmod
     _rand
       ___lmul
   _udp_sendPacket
     _ipv4_calculateHeaderChecksum
     _ipv4_getIPSourceAddress
     _ipv4_streamToTransmissionBuffer
       _ethernetController_streamToTransmitBuffer
         _enc424j600_setGPDATAWritePointer
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
     _ipv4_txFrameRequest
       _ethernet_txFrameRequest
         _ethernetController_writeDestinationMACAddress
           _enc424j600_setGPDATAWritePointer
             _enc424j600_writeSPI
               _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _ethernetController_writeEtherTypeFieldToBuffer
           _enc424j600_setGPDATAWritePointer
             _enc424j600_writeSPI
               _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _memory_txFrameRequest
           ___wmul
             _rand (ARG)
               ___lmul
           _checkForOverlap
             _checkForOverlapSwitched
           _entireMemoryEmpty
           _entireMemoryFull
     _ipv4_writeHeaderIntoBuffer

 _ISR (ROOT)
   _buttonHandler
   _sevenSegmentUpdate
     _parseNumber
       i2___lwdiv
   _updateTime

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100     26      26      18       14.8%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0      FE      16       99.2%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0      EC      14       92.2%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0      F5      12       95.7%
BITBANK2           100      0       0       9        0.0%
BANK2              100     B8      EC      10       92.2%
BITBANK1           100      0       0       7        0.0%
BANK1              100     FA      FB       8       98.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     A0      A0       5      100.0%
BITCOMRAM           5E      0       1       0        1.1%
COMRAM              5E     27      4E       1       83.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     5DA       6        0.0%
DATA                 0      0     5DA       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat May 04 15:35:11 2019

                               udp_sendPacket@ipHeaderBuf 0140  
                       ipv4_calculateHeaderChecksum@carry 006A  
                __end_of_ethernetController_getMacAddress 607C  
               __size_of_ethernetController_getMacAddress 0074  
                      ??_ethernetController_getMacAddress 0074  
                       ?_ethernetController_getMacAddress 006E  
                        _ethernetController_getMacAddress 6008  
                                             arp_init@mac 0063  
                                                      l75 594A  
                                                      l92 6644  
                                                      l84 4D6E  
                                                      l77 5972  
                                                      l86 4D50  
                                                      l88 4D68  
                                                      l89 4D84  
                     __size_of_ipv4_writeHeaderIntoBuffer 016E  
                        __end_of_ipv4_checkHeaderChecksum 660C  
                 ethernetController_getSourceMACAddress@i 0080  
                                                      _id 004A  
                                     ___wmul@multiplicand 0070  
                                      i2___lwdiv@dividend 0001  
                      ipv4_calculateHeaderChecksum@header 0060  
                                            __CFG_CP0$OFF 000000  
                                            __CFG_CP1$OFF 000000  
                                            __CFG_CP2$OFF 000000  
                                            __CFG_CP3$OFF 000000  
                                             __CFG_LVP$ON 000000  
                                             arp_send@arp 00A7  
                                 ??_memory_txFrameRequest 008D  
                                                     l200 5BB0  
                                                     l201 5B9C  
                                                     l211 5BFC  
                                                     l140 5DBE  
                                                     l212 5BD6  
                                                     l204 5BA4  
                                                     l213 5BDC  
                                                     l205 5BA8  
                                                     l150 6192  
                                                     l134 5F48  
                                                     l142 5E06  
                                                     l135 5F8E  
                                                     l240 622A  
                                                     l312 5CDE  
                                                     l208 5BE6  
                                                     l160 5FC8  
                                                     l209 5BCE  
                                                     l227 62BE  
                                                     l236 61E4  
                                                     l412 694C  
                                                     l253 4880  
                                                     l422 4A22  
                                                     l406 6984  
                                                     l414 696E  
                                                     l190 5C2E  
                                                     l174 6348  
                                                     l182 68A8  
                                                     l423 4A0E  
                                                     l175 630A  
                                                     l183 68BE  
                                                     l424 49D8  
                                                     l408 69A6  
                                                     l192 5C5E  
                                                     l441 539C  
                                                     l425 49D4  
                                                     l177 632E  
                                                     l434 5368  
                                                     l418 49A0  
                                                     l450 0B52  
                                                     l258 4938  
                                                     l194 5C84  
                                                     l178 6342  
                                                     l370 1472  
                                                     l530 06D6  
                                                     l371 12CA  
                                                     l363 1148  
                                                     l531 073E  
                                                     l460 0BEE  
                                                     l452 0B7C  
                                                     l356 50F0  
                                                     l372 1318  
                                                     l364 118C  
                                                     l445 53B0  
                                                     l429 4A1E  
                                                     l381 6A58  
                                                     l365 1230  
                                                     l701 6458  
                                                     l462 0E08  
                                                     l358 5110  
                                                     l366 1250  
                                                     l526 06BA  
                                                     l439 53A0  
                                                     l463 0D28  
                                                     l455 0BB2  
                                                     l199 5BC6  
                                                     l383 6A72  
                                                     l543 09E8  
                                                     l551 07FC  
                                                     l527 0698  
                                                     l448 0B30  
                                                     l376 6C7C  
                                                     l368 1444  
                                                     l552 0804  
                                                     l544 0754  
                                                     l528 06B4  
                                                     l473 0ECA  
                                                     l393 6C56  
                                                     l369 127C  
                                                     l553 08F6  
                                                     l545 0778  
                                                     l474 0FA8  
                                                     l458 0BE6  
                                                     l810 5742  
                                                     l475 0FCA  
                                                     l467 0DAC  
                                                     l811 5752  
                                                     l387 6814  
                                                     l563 0B08  
                                                     l547 09FE  
                                                     l555 09B2  
                                                     l820 6D22  
                                                     l468 0E5A  
                                                     l812 5762  
                                                     l548 079C  
                                                     l813 5772  
                                                     l389 6840  
                                                     l549 07CE  
                                                     l806 5792  
                                                     l558 0932  
                                                     l815 5782  
                                                     l807 5722  
                                                     l559 094A  
                                                     l840 67A0  
                                                     l680 27C2  
                                                     l809 5732  
                                                     l841 6780  
                                                     l681 2832  
                                                     l834 55D6  
                                                     l682 286A  
                                                     l819 6D2E  
                                                     l843 678C  
                                                     l683 297E  
                                                     l940 523E  
                                                     l844 6796  
                                                     l836 564E  
                                                     l861 4702  
                                                     l685 29B6  
                                                     l950 1B4C  
                                                     l943 1AE8  
                                                     l863 4770  
                                                     l687 29C0  
                                                     l960 1CAA  
                                                     l952 1BEA  
                                                     l944 1AA0  
                                                     l864 47AE  
                                                     l961 1CE0  
                                                     l953 1BA2  
                                                     l937 51A8  
                                                     l865 47F6  
                                                     l689 2A08  
                                   ??_tcp_handleNewPacket 00EF  
                                                     l970 2E38  
                                                     l946 1B3E  
                                                     l971 2E04  
                                                     l795 646E  
                                                     l955 1C30  
                                                     l947 1AF6  
                                                     l939 51DA  
                                                     l699 6444  
                                                     l980 2ECA  
                                                     l973 2E7A  
                                                     l797 6496  
                                                     l957 1C66  
                                                     l949 1B94  
                                                     l974 2E46  
                                                     l959 1CA8  
                                                     l976 2EBC  
                                                     l977 2E88  
                                                     l979 2EFE  
                                                     l996 2F48  
                                                     l999 315A  
                                            __CFG_CPB$OFF 000000  
                             __end_of_ipv4_txFrameRequest 45B8  
                              __end_of_icmp_sendEchoReply 3838  
                                            __CFG_CPD$OFF 000000  
                                                     _ISR 0008  
           enc424j600_writeControlRegisterUnbanked@opcode 006D  
                            ??_enc424j600_writeSingleByte 006A  
                __end_of_ethernetController_getDeviceName 6CDC  
               __size_of_ethernetController_getDeviceName 0024  
                      ??_ethernetController_getDeviceName 0062  
                       ?_ethernetController_getDeviceName 0060  
                        _ethernetController_getDeviceName 6CB8  
                                memory_txFrameClear@index 0060  
                                                     _foo 02CF  
                    enc424j600_readPHYRegister@unusedBits 0078  
                     ethernetController_getMacAddress@mac 0074  
                          memory_txFrameRequest@freeIndex 00A1  
                                            ___awmod@sign 0073  
                                                     prod 000FF3  
           ethernetController_streamFromRXBuffer@startEnd 0071  
                                                     wreg 000FE8  
                                              _TXSTA1bits 000FAC  
                                      _sevenSegmentUpdate 5244  
               ethernetController_getEtherTypeField@field 006F  
                                  _numberOfOccupiedFields 0046  
                      ethernetController_setLEDConfig@LED 006F  
                      __size_of_ethernetController_getMTU 000C  
                      __size_of_ethernetController_getRSV 0074  
                      __end_of_enc424j600_readPHYRegister 493A  
                              _enc424j600_readPHYRegister 4818  
                          __end_of_enc424j600_setTXLength 6BAA  
                                        ??_arp_background 0154  
                                                    ?_ISR 0001  
                        _tcp_calculateHeaderChecksum$4950 0084  
                        _tcp_calculateHeaderChecksum$4951 0086  
                        _tcp_calculateHeaderChecksum$4952 0088  
                        _tcp_calculateHeaderChecksum$4953 008A  
                        _tcp_calculateHeaderChecksum$4954 008C  
                        _tcp_calculateHeaderChecksum$4947 007E  
                        _tcp_calculateHeaderChecksum$4948 0080  
                        _tcp_calculateHeaderChecksum$4949 0082  
                          ?_ethernetController_sendPacket 0072  
                                                    l1000 2F72  
                                                    l1001 3174  
                                                    l1002 2FC4  
                                                    l1011 3146  
                                                    l1003 306E  
                                                    l1020 386E  
                                                    l1004 3076  
                                                    l1023 3A0E  
                                                    l1024 3898  
                                                    l1008 3120  
                                                    l1200 42C4  
                                                    l1033 39FA  
                                                    l1025 3A28  
                                                    l1009 3138  
                                                    l1026 38BC  
                                                    l1050 4BDE  
                                                    l1211 6882  
                                                    l1028 3934  
                                                    l1044 4C6C  
                                                    l1061 53C2  
                                                    l1029 39E2  
                                                    l1221 6C30  
                                                    l1045 4B84  
                                                    l1133 3E6C  
                                                    l1054 4C7A  
                                                    l1055 4C18  
                                                    l1047 4BE4  
                                                    l1215 6A88  
                                                    l1071 4364  
                                                    l1064 545E  
                                                    l1056 4C54  
                                                    l1152 356C  
                                                    l1209 6856  
                                                    l1049 4C0E  
                                                    l1217 6AA2  
                                                    l1073 43BC  
                                                    l1401 1FC2  
                                                    l1074 440E  
                                                    l1154 35B2  
                                                    l1138 3F2C  
                                                    l1171 2BF0  
                                                    l1163 2A4C  
                                                    l1500 63D0  
                                                    l1148 23D0  
                                                    l1412 20A4  
                                                    l1172 2C06  
                                                    l1501 63E4  
                                                    l1421 168C  
                                                    l1413 202E  
                                                    l1405 1FD6  
                                                    l1173 2C1A  
                                                    l1165 2B1C  
                                                    l1078 5A86  
                                                    l1270 4A80  
                                                    l1414 2064  
                                                    l1350 32A8  
                                                    l1159 6608  
                                                    l1415 209E  
                                                    l1351 32BC  
                                                    l1175 2C86  
                                                    l1272 4AE2  
                                                    l1352 32D0  
                                                    l1176 2C32  
                                                    l1168 2BA0  
                                                    l1192 4334  
                                                    l1273 4ABA  
                                                    l1441 172C  
                                                    l1433 16EC  
                                                    l1425 16AC  
                                                    l1409 1FEA  
                                                    l1353 32E4  
                                                    l1177 2C98  
                                                    l1193 42E8  
                                                    l1282 462E  
                                                    l1290 3724  
                                                    l1354 32F8  
                                                    l1346 3258  
                                                    l1178 2C5C  
                                                    l1194 4224  
                                                    l1283 45DC  
                                                    l1291 36F4  
                                                    l1355 3306  
                                                    l1347 326C  
                                                    l1284 461A  
                                                    l1452 18E8  
                                                    l1364 56CC  
                                                    l1348 3280  
                                                    l1196 4258  
                                                    l1293 3812  
                                                    l1445 174C  
                                                    l1437 170C  
                                                    l1429 16CC  
                                                    l1373 5672  
                                                    l1357 33C6  
                                                    l1349 3294  
                                                    l1197 427A  
                                                    l1286 46E2  
                                                    l1294 379C  
                                                    l1198 4292  
                                                    l1295 37D2  
                                                    l1199 42A0  
                                                    l1296 380C  
                                                    l1456 5AFE  
                                                    l1449 1768  
                                                    l1393 1F9A  
                                                    l1385 1F72  
                                                    l1481 3BB8  
                                                    l1482 3BD8  
                                                    l1397 1FAE  
                                                    l1389 1F86  
                                                    l1477 3BDE  
                                                    l1902 6544  
                                                    l1670 609E  
                                                    l1478 3B18  
                                                    l1823 587C  
                                                    l1479 3B4E  
                                                    l1920 64E2  
                                                    l1672 60B4  
                                                    l1921 64DA  
                                                    l1825 58B8  
                                                    l1673 60AC  
                                                    l1930 67DA  
                                                    l1906 4FA8  
                                                    l1826 58FA  
                                                    l1931 67D2  
                                                    l1819 6760  
                                                    l1908 5004  
                                                    l1924 6502  
                                                    l1676 60CC  
                                                    l1853 5D50  
                                                    l1909 5072  
                                                    l1925 650C  
                                                    l1677 60D6  
                                                    l1669 6092  
                                                    l1934 67F2  
                                                    l1854 5D44  
                                                    l1678 60E4  
                                                    l1935 67FC  
                                                    l1863 6258  
                                                    l1864 624C  
                                                    l1857 5D84  
                                                    l1858 5D92  
                                                    l1867 6280  
                                                    l1868 628E  
         ethernetController_streamToTransmitBuffer@opcode 007D  
                                                    l9570 4A54  
                                                    l9566 4A0A  
                                                    l9574 6DC6  
                                                    l9816 5DB6  
                                                    l9664 697C  
                                                    l9586 62EC  
                                                    l9834 5DFE  
                                                    l9684 6944  
                                                    l9916 0D20  
                                                    l9950 0E52  
                                                    STR_1 7FFB  
                                                    STR_2 7F90  
                                                    STR_3 7F36  
                                                    STR_4 7F62  
                                                    STR_5 7E80  
                           ?_ethernetController_softReset 006E  
                                                    STR_6 7FFB  
                                                    STR_7 7F90  
                                                    STR_8 7FFB  
                                                    STR_9 7F90  
               ethernetController_clearInterruptFlag@flag 0072  
                                __end_of_icmp_parseHeader 3DB4  
               enc424j600_setRXBufferStartAddress@lowByte 0070  
                                                    _RCIE 007CED  
                                                    _RCIF 007CF5  
                                                    _RCIP 007CFD  
                                                    _TRMT 007D61  
                                                    _TXIF 007CF4  
                                          mac_isAllZero@i 0062  
                                     ?_sevenSegmentUpdate 000F  
                                       _ipv4_setToAllZero 6C22  
                                                    _main 270A  
                                                    _rand 6362  
                                                    _itoa 673A  
                                 printEthernetState@state 008F  
                                                    _ltoa 6516  
                                                    _time 02B8  
                                                    fsr0h 000FEA  
                                                    fsr1h 000FE2  
                                      i2___lwdiv@quotient 0005  
                                                    indf0 000FEF  
                                                    fsr2h 000FDA  
                                                    fsr0l 000FE9  
                                                    indf1 000FE7  
                                                    indf2 000FDF  
                                                    fsr1l 000FE1  
                                                    fsr2l 000FD9  
                                                    btemp 004F  
                                                    _utoa 5874  
                                           __CFG_BORV$190 000000  
                               __size_of_sevenSegmentInit 001A  
                                 _ethernetController_init 591E  
                                      ?_ipv4_setToAllZero 0060  
                                                    prodh 000FF4  
                                                    prodl 000FF3  
                     __size_of_handleStackBackgroundTasks 04EA  
                                                    start 00CA  
          __end_of_ethernetController_getSourceMACAddress 61CE  
         __size_of_ethernetController_getSourceMACAddress 0070  
                ??_ethernetController_getSourceMACAddress 0078  
                 ?_ethernetController_getSourceMACAddress 006F  
                  _ethernetController_getSourceMACAddress 615E  
                                            arp_probe@err 014E  
                                           __CFG_IESO$OFF 000000  
                                         ??_mac_isAllZero 0062  
                                           __CFG_MCLRE$ON 000000  
                              memory_txFrameRequest@field 0098  
                                            ___param_bank 000000  
                           ethernet_rxGetNewFrame@counter 02C4  
                                 _checkForOverlapSwitched 5302  
              enc424j600_setRXBufferStartAddress@highByte 0071  
            __end_of_ethernetController_getEtherTypeField 615E  
           __size_of_ethernetController_getEtherTypeField 0070  
                  ??_ethernetController_getEtherTypeField 0078  
                   ?_ethernetController_getEtherTypeField 006F  
                    _ethernetController_getEtherTypeField 60EE  
                                                   ??_ISR 0016  
                                     ??_ipv4_setToAllZero 0062  
                             ?_icmp_writeHeaderIntoBuffer 0060  
                             ?_enc424j600_enableReception 0001  
                      __size_of_enc424j600_getPacketCount 001A  
                               __size_of_UART_resetFormat 0010  
                                          _ipv4_isAllZero 6A7A  
                     ethernetController_setLEDConfig@data 0070  
                                    ??_sevenSegmentUpdate 0011  
                                            ?_intToString 0084  
                          handleStackBackgroundTasks@intf 01F3  
                     ethernetController_setLEDConfig@conf 006E  
                                           arp_send@field 00F3  
                                                   l10050 5F8E  
                                                   l10128 6212  
                                                   l10402 6C74  
                                                   l11212 545E  
                                                   l10350 618A  
                                                   l11222 6C28  
                                                   l11146 435C  
                                                   l12116 5A7E  
                                                   l11500 5FC0  
                                                   l11260 35AA  
                                                   l13100 09CE  
                                                   l13102 09D8  
                                                   l11432 4D5A  
                                                   l11096 1CD8  
                                                   l11248 3564  
                                                   l13104 430C  
                                                   l10730 6A80  
                                                   l13106 4316  
                                                   l12162 3EDE  
                                                   l12244 4C54  
                                                   l10750 684E  
                                                   l11198 53BA  
                                                   l10718 6C4E  
                                                   l11288 6608  
                                                   l11392 33C6  
                                                   l11376 32FE  
                                                   l12344 5AF6  
                                                   l12178 46FA  
                                                   l11724 55CE  
                                                   l10678 6A50  
                                                   l11584 48B2  
                                     arp_checkForEntry@ip 0067  
                                                   l11834 39A8  
                                                   l10698 680C  
                                       _nextPacketPointer 003A  
                                    tcp_listen@connection 008F  
                                tcp_sendSYNACK@connection 00C1  
                                                   ?_main 0001  
                                                   ?_rand 006C  
                                                   ?_itoa 007C  
                                                   _CCPR1 000FBE  
                                                   STR_10 7FFB  
                                                   ?_ltoa 007A  
                                                   STR_11 7FFA  
                                                   STR_12 7FF7  
                                                   STR_20 7FD0  
                                                   STR_13 7FFA  
                                                   STR_21 7FF1  
                                                   STR_22 7FEE  
                                                   STR_14 7FD5  
                                                   STR_30 7F4D  
                                                   STR_15 7FF4  
                                                   STR_23 7E00  
                                                   STR_24 7FEB  
                                                   STR_16 7FEB  
                                                   STR_40 7E15  
                                                   STR_17 7FEA  
                                                   STR_41 7E9F  
                                                   STR_33 7DD3  
                                                   STR_25 7D6A  
                                                   STR_26 7FEB  
                                                   STR_50 7FEF  
                                                   STR_34 7EAD  
                                                   STR_42 7DB9  
                                                   STR_18 7C64  
                                                   STR_19 7FEB  
                                                   STR_51 7F6C  
                                                   STR_43 7F58  
                                                   STR_35 7E5F  
                                                   STR_27 7D04  
                                                   STR_52 7D25  
                                                   STR_60 7F06  
                                                   STR_44 7E70  
                                                   STR_28 7D29  
                                         __end_of___awmod 60EE  
                                                   STR_29 7FEB  
                                                   STR_45 7FFD  
                                                   STR_53 7F1E  
                                                   STR_61 7EEE  
                                                   STR_54 7FEB  
                                                   STR_46 7FEA  
                                                   STR_70 7FC6  
                                                   STR_62 7EFA  
                                                   STR_38 7ED5  
                                                   STR_71 7FDE  
                                                   STR_55 7F7D  
                                                   STR_63 7F12  
                                                   STR_39 7DEB  
                                                   STR_47 7CD2  
                                                   STR_72 7FE2  
                                                   STR_56 7EC8  
                                                   STR_64 7EBB  
                                                   STR_48 7D9F  
                                                   STR_65 7F42  
                                                   STR_49 7F2A  
                                                   STR_73 7E4E  
                                                   STR_57 7E29  
                                                   STR_58 7FCB  
                                                   STR_66 7CA0  
                                                   STR_90 7F4D  
                                                   STR_67 7FC1  
                                                   STR_59 7EE2  
                                                   STR_91 7FED  
                                                   STR_68 7FE6  
                                                   STR_92 7FED  
                                                   STR_69 7E3C  
                                                   STR_93 7DD3  
                                                   STR_94 7EAD  
                                                   STR_95 7E5F  
                                                   STR_96 7FED  
                                                   STR_97 7FED  
                                                   STR_98 7ED5  
                                                   STR_99 7DEB  
                                         __end_of___lldiv 5DA4  
                                                   ?_utoa 0073  
                                                   u11100 5D54  
                                                   u11021 49E2  
                                                   u11031 49F4  
                                                   u11201 0B26  
                                                   u12010 466A  
                                                   u11130 625C  
                                                   u12020 4698  
                                                   u11061 4A2C  
                                                   u11221 0B48  
                                                   u12030 46BE  
                                                   u11071 4A3E  
                                                   u12015 4660  
                                                   u11160 5DE6  
                                                   u12040 558A  
                                                   u11401 0DFE  
                                                   u12201 206E  
                                                   u13010 24B8  
                                                   u11251 0B72  
                                                   u12035 46B4  
                                                   u12051 1D78  
                                                   u10700 62FC  
                                                   u11180 5E20  
                                                   u11341 0D46  
                                                   u11261 0BA8  
                                                   u12045 5580  
                                                   u12221 20BA  
                                                   u12061 1E38  
                                                   u10710 5312  
                                                   u13110 2582  
                                                   u13030 24E2  
                                                   u12070 1EF0  
                                                   u11511 0FC0  
                                                   u11351 0D64  
                                                   u10720 5320  
                                                   u12400 6AA6  
                                                   u12320 6A76  
                                                   u13008 2494  
                                                   u12080 1F32  
                                                   u12240 64E6  
                                                   u11441 0E96  
                                         __end_of___llmod 62A0  
                                                   u10730 532E  
                                                   u13210 2648  
                                                   u13130 25A8  
                                                   u13050 2508  
                                                   u12170 1FFA  
                                                   u12090 1F54  
                                                   u11531 0FDC  
                                                   u11451 0EB4  
                                                   u12075 1EE6  
                                                   u10740 533C  
                                                   u10900 494A  
                                                   u11700 649A  
                                                   u13108 255E  
                                                   u13028 24BC  
                                                   u11381 0DA2  
                                                   u11621 5122  
                                                   u12501 2D6A  
                                                   u14101 5FFE  
                                                   u12085 1F28  
                                                   u12430 6886  
                                                   u10910 4958  
                                                   u11470 0ECE  
                                                   u11390 0DB0  
                                                   u12270 67DE  
                                                   u11710 64BA  
                                                   u12350 6844  
                                                   u13230 2672  
                                                   u13150 25D0  
                                                   u13070 2530  
                                                   u11631 513C  
                                                   u12511 2D84  
                                                   u13311 2700  
                                                   u12191 2048  
                                                   u10920 4966  
                                                   u13208 2624  
                                                   u13128 2586  
                                                   u13048 24E6  
                                                   u11800 1660  
                                                   u12176 1FFC  
                                                   u11641 5170  
                                                   u12601 2E92  
                                                   u12521 2D9E  
                                                   u12441 2CBE  
                                                   u14201 51E4  
                                                   u10690 62EC  
                                                   u10930 4974  
                                                   u13250 269A  
                                                   u13170 25FA  
                                                   u13090 255A  
                                                   u12098 1F58  
                                                   u11491 0F9E  
                                                   u12531 2DB8  
                                                   u12451 2CDA  
                                                   u12291 6072  
                                                   u15011 5AC4  
                                                   u11731 6D0A  
                                                   u10780 5364  
                                                   u10860 69AA  
                                                   u14124 5CC2  
                                                   u13308 26E8  
                                                   u13228 264C  
                                                   u13148 25AC  
                                                   u13068 250C  
                                                   u11900 17A6  
                                                   u15100 3EDE  
                                                   u12621 2ED4  
                                                   u12541 2DD2  
                                                   u12461 2CEC  
                                                   u14125 5CBE  
                                                   u11717 64B0  
                                                   u13501 1CF6  
                                                   u14221 520E  
                                                   u12701 37DC  
                                                   u11805 1656  
                                                   u11670 6212  
                                                   u14134 5D04  
                                                   u14150 48B2  
                                                   u13270 26BE  
                                                   u13190 2620  
                                                   u11910 1870  
                                                   u14230 2A3E  
                                                   u11591 50C8  
                                                   u12551 2DEC  
                                                   u14135 5D00  
                                                   u11680 6222  
                                                   u13440 1CA4  
                                                   u13248 2676  
                                                   u13168 25D4  
                                                   u13088 2534  
                                                   u11760 2358  
                                                   u11920 189E  
                                                   u12641 2F10  
                                                   u12561 2E0E  
                                                   u12481 2D38  
                                                   u11745 2124  
                                                   u12721 3828  
                                                   u14321 2C3C  
                                                   u14241 2A60  
                                                   u15041 3DF2  
                                                   u10970 499C  
                                                   u10890 6972  
                                                   u11690 648E  
                                                   u14170 519A  
                                                   u13290 26E4  
                                                   u14090 5FE2  
                                                   u11770 2386  
                                                   u12810 0480  
                                                   u12730 03E2  
                                                   u11930 18C4  
                                                   u12491 2D50  
                                                   u13531 4EDC  
                                                   u11755 21D2  
                                                   u12651 3680  
                                                   u11915 1866  
                                                   u14331 2C4E  
                                                   u14251 2AA4  
                                                   u15051 3E04  
                                                   u14500 39A8  
                                                   u13620 4412  
                                                   u13268 269E  
                                                   u13188 25FE  
                                                   u11780 23AC  
                                                   u11908 17AA  
                                                   u12581 2E50  
                                                   u13541 4EEE  
                                                   u14181 51BA  
                                                   u11765 234E  
                                                   u12661 36CC  
                                                   u14341 2C66  
                                                   u15061 3E16  
                                                   u13710 5462  
                                                   u11950 61B8  
                                                   u14430 30E2  
                                                   u12830 04A8  
                                                   u12750 0408  
                                                   u11790 15E6  
                                                   u13551 4F56  
                                                   u13631 4450  
                                                   u11935 18BA  
                                                   u14351 2C78  
                                                   u15071 3E28  
                                                   u13288 26C2  
                                                   u12808 045E  
                                                   u15160 47FA  
                                                   u11961 61C4  
                                                   u13641 59C8  
                                                   u11697 6484  
                                                   u13561 4F78  
                                                   u11785 23A2  
                                                   u15081 3E3E  
                                                   u15250 6CC6  
                                                   u13490 1CD8  
                                                   u13810 4A70  
                                                   u12850 04D2  
                                                   u12770 0430  
                                                   u13651 5A1A  
                                                   u13571 4F8A  
                                                   u12691 37B6  
                                                   u11795 15DC  
                                                   u14531 6ACE  
                                                   u15331 0792  
                                                   u15411 4DFE  
                                                   u14700 412C  
                                                   u14620 40C0  
                                                   u12828 0484  
                                                   u12748 03E6  
                                                   u14380 5652  
                                                   u13661 5A3C  
                                                   u13821 4A8A  
                                                   u15341 07B0  
                                                   u15501 3B88  
                                                   u12950 2446  
                                                   u13750 35A6  
                                                   u12870 04FA  
                                                   u12790 045A  
                                                   u13671 5A4E  
                                                   u11895 1786  
                                                   u15511 3BC2  
                                                   u14480 392A  
                                                   u14720 4146  
                                                   u14640 40D8  
                                                   u12848 04AC  
                                                   u12768 040C  
                                                   u14810 41CE  
                                                   u12970 246A  
                                                   u13770 35EC  
                                                   u14570 60B8  
                                                   u13851 4B40  
                                                   u15371 090A  
                                                   u15451 6462  
                                                   u15531 3BF4  
                                                   u15611 2998  
                                                   u14740 4162  
                                                   u14660 40F2  
                                                   u12868 04D6  
                                                   u12788 0434  
                                                   u13861 4B52  
                                                   u13781 360C  
                                                   u15461 3AAA  
                                                   u14830 41E6  
                                                   u14718 4130  
                                                   u14638 40C4  
                                                   u12990 2490  
                                                   u13871 4B64  
                                                   u13791 65CA  
                                                   u14808 41B6  
                                                   u14680 410E  
                                                   u12968 244A  
                                                   u12888 04FE  
                                                   u13881 318C  
                                                   u14921 1072  
                                                   u15481 3B32  
                                                   u14850 6DEA  
                                                   u14770 4194  
                                                   u14738 414A  
                                                   u14658 40DC  
                                                   u14828 41D2  
                                                   u14764 4178  
                                                   u12988 246E  
                                                   u14765 4172  
                                                   u14941 119E  
                                                   u15661 29EC  
                                                   u14790 41B2  
                                                   u14758 4166  
                                                   u14678 40F6  
                                                   u14848 41EA  
                                                   u15680 2A20  
                                                   u14698 4112  
                                                   u15827 275C  
                                                   u14788 4198  
                                                   u14981 1366  
                                                   u15837 28B2  
                                                   u15847 487A  
                                                   u14991 13A0  
                                                   u15857 4D08  
                                                   u15867 4D44  
                                         __end_of___lwdiv 6516  
                              __end_of_printEthernetState 646C  
                                         __end_of___lwmod 6806  
                                           __CFG_WDTEN$ON 000000  
                                                   i2l714 57FA  
        ethernetController_streamToTransmitBuffer@pointer 0038  
                                                   i2l715 580A  
                                                   i2l716 584E  
                                                   i2l724 005C  
                                                   i2l725 007A  
                                                   i2l770 5E84  
                                                   i2l762 529A  
                                                   i2l771 5E88  
                                                   i2l757 5276  
                                                   i2l766 5E8C  
                                                   i2l767 5E7C  
                                                   i2l759 527E  
                                                   i2l769 5E80  
                                     _arp_handleNewPacket 517E  
                                                   _SPBRG 000FAF  
                                                   _PORTA 000F80  
                                                   _PORTB 000F81  
                                                   _PORTC 000F82  
                        __size_of_ethernet_txFrameRequest 00E8  
                                                   _TRISA 000F92  
                                                   _TRISB 000F93  
                                                   _TRISC 000F94  
         __end_of_enc424j600_writeControlRegisterUnbanked 6A1A  
        __size_of_enc424j600_writeControlRegisterUnbanked 0036  
               ??_enc424j600_writeControlRegisterUnbanked 006C  
                ?_enc424j600_writeControlRegisterUnbanked 006A  
                 _enc424j600_writeControlRegisterUnbanked 69E4  
                                           __CFG_WRT0$OFF 000000  
                                           __CFG_WRT1$OFF 000000  
                                           __CFG_WRT2$OFF 000000  
                                     ___lmul@multiplicand 0064  
                                           __CFG_WRT3$OFF 000000  
                                          __CFG_EBTR0$OFF 000000  
                                          __CFG_FCMEN$OFF 000000  
                                          __CFG_EBTR1$OFF 000000  
                                          __CFG_EBTR2$OFF 000000  
                                          __CFG_EBTR3$OFF 000000  
                                         __end_of_mac_cmp 6848  
                                         _ipv4_background 4200  
                                        __end_of_UARTInit 6E42  
                                         ??_arp_sendReply 00FC  
                                           __CFG_WRTB$OFF 000000  
                                           __CFG_WRTC$OFF 000000  
                                           __CFG_WRTD$OFF 000000  
                                          __CFG_EBTRB$OFF 000000  
                                                   _randx 02E8  
                               __end_of_ipv4_setToAllZero 6C48  
                                                   _srand 6E12  
                                                   _stack 0400  
                               arp_background@errAnnounce 0157  
                                                   _ultoa 4F98  
                       __end_of_ethernetController_getMTU 6E88  
           ethernetController_streamToTransmitBuffer@data 007C  
                       __end_of_ethernetController_getRSV 6008  
                                          __pbitbssCOMRAM 0270  
                                                   pclath 000FFA  
                                                   tablat 000FF5  
                            ethernet_txFrameRequest@frame 00A2  
                                        ?_checkForOverlap 0072  
                                                   plusw0 000FEB  
                                                   plusw1 000FE3  
                                                   plusw2 000FDB  
                                                   utoa@c 007B  
                             memory_txFrameRequest@i_1177 0097  
                                                   utoa@v 0079  
                                                   status 000FD8  
                                          __CFG_T3CMX$RC0 000000  
                                                   wtemp6 0050  
                       enc424j600_clearInterruptFlag@flag 0070  
                             __size_of_mac_setToBroadcast 0026  
                                           arp_probe@link 0138  
                                          __CFG_ICPRT$OFF 000000  
                       enc424j600_clearInterruptFlag@temp 0071  
                                    ?_arp_handleNewPacket 00FC  
                                __end_of_UARTTransmitText 64C2  
                               _ipv4_handleNewPacket$3965 028D  
                                          __CFG_PBADEN$ON 000000  
                                          _ipv4_sendFrame 3DB4  
                                      __size_ofi2___lwdiv 0052  
                            tcp_handleNewPacket@ipPayload 00E6  
                                            ?_parseNumber 0008  
                                        _ipAdressToString 46EC  
                       ethernetController_softReset@F6070 02CD  
                       ethernetController_softReset@F6068 004C  
                                         __initialization 5466  
                                  ipAdressToString@number 02DC  
                             memory_txFrameRequest@length 0084  
                            __end_of_icmp_handleNewPacket 4B72  
                                            __end_of_main 2A24  
                                  __end_of_ipv4_isAllZero 6AAA  
                                            __end_of_rand 63BE  
                                            __end_of_itoa 677E  
                                            __end_of_ltoa 656A  
                                            __end_of_utoa 591E  
                                ?_ipv4_getIPSourceAddress 0060  
                                  arpEntryToString@string 05CC  
                                ?_ipv4_setIPSourceAddress 0060  
                                           stack_init@err 006E  
                                    _ipv4_handleNewPacket 2A24  
                                          __CFG_PCLKEN$ON 000000  
                              _memory_txFrameRequest$1173 0093  
                       __end_of_enc424j600_getPacketCount 6D8A  
                               tcp_stateMachine@newHeader 00CD  
                                          arp_send@i_3300 00CE  
                                          arp_send@i_3301 00CF  
                                          arp_send@i_3302 00D0  
                            icmp_sendEchoReply@icmpHeader 0165  
                                                  ??_main 01F8  
                                                  ??_rand 006E  
                                                  ??_itoa 0082  
                               __size_of_entireMemoryFull 0038  
                                                  ??_ltoa 0082  
                                                  ??_utoa 0079  
                                           __activetblptr 000002  
                      __end_of_ipv4_writeHeaderIntoBuffer 40A8  
                              _ipv4_writeHeaderIntoBuffer 3F3A  
                         handleStackBackgroundTasks@stack 01EC  
                         handleStackBackgroundTasks@state 02D1  
                            tcp_handleNewPacket@tcpHeader 01C8  
                                        ??_arp_gratuitous 0139  
                                          __CFG_SDOMX$RB3 000000  
                                         __CFG_CCP2MX$RC1 000000  
       ethernetController_writeDestinationMACAddress@addr 006F  
       ethernetController_writeDestinationMACAddress@data 007E  
                ethernetController_pollInterruptFlags@reg 0080  
                                 __size_of_tcp_sendSYNACK 03CA  
                                        ___llmod@dividend 0060  
                                                  STR_100 7E15  
                                                  STR_101 7E9F  
                                                  STR_110 7FB0  
                                                  STR_102 7DB9  
                                                  STR_111 7F8C  
                                                  STR_103 7F58  
                                                  STR_112 7F92  
                                                  STR_120 7D85  
                                                  STR_104 7E70  
                                                  STR_105 7FFB  
                                                  STR_113 7F9E  
                                                  STR_121 7F75  
                                                  STR_106 7FD0  
                                                  STR_122 7FDA  
                                                  STR_114 7F98  
                                                  STR_123 7FFB  
                                                  STR_115 7FB6  
                                                  STR_107 7F85  
                                                  STR_124 7FD0  
                                                  STR_108 7F90  
                                                  STR_116 7FAA  
                                                  STR_125 7F90  
                                                  STR_109 7FBC  
                                                  STR_117 7FA4  
                                                  STR_118 7D4E  
                                                  STR_119 7E90  
                                    __size_of_macToString 00AC  
                                                  ?_srand 007A  
                                   _arp_getEntryFromTable 6AAA  
                                                  _ANSELA 000F5B  
                                                  _ANSELB 000F5C  
                                                  _ANSELC 000F5D  
                              ethernetController_getRSV@i 0077  
                                                  ?_ultoa 006D  
                                    ipv4_parseHeader@temp 008E  
                            ?_tcp_calculateHeaderChecksum 0060  
                       __size_of_ipv4_checkHeaderChecksum 0050  
                              printEthernetState@oldState 038A  
                                                  i2l1920 6588  
                                                  i2l1921 6580  
                                                  i2l1924 65A8  
                                                  i2l1925 65B2  
                              icmp_calculateChecksumBuf@i 006B  
                               ??_ethernetController_init 007D  
                                                  i2l9072 5292  
                               ?_ipv4_checkHeaderChecksum 006F  
                      ipv4_sendFrame@failedResolveCounter 003D  
       __end_of_ethernetController_streamToTransmitBuffer 5F94  
      __size_of_ethernetController_streamToTransmitBuffer 0078  
             ??_ethernetController_streamToTransmitBuffer 0078  
              ?_ethernetController_streamToTransmitBuffer 006F  
               _ethernetController_streamToTransmitBuffer 5F1C  
                        ipv4_handleNewPacket@payloadField 02A6  
                                         _fSrcAddrChanged 0270  
                                  __end_of_ipv4_sendFrame 3F3A  
                                   ??_arp_handleNewPacket 00FE  
                                                  _TXREG1 000FAD  
                                        mac_isAllZero@mac 0060  
                          ??_ethernetController_softReset 0071  
                               ??_checkForOverlapSwitched 0072  
                              ethernetController_init@err 007D  
                                  __size_of_buttonHandler 00AC  
                                 ?_ethernet_rxGetNewFrame 01DF  
                                          __CFG_XINST$OFF 000000  
                                        __end_of_arp_init 5AF0  
                                        __end_of_arp_send 2F1E  
                                                  ___lmul 63BE  
                                        __end_of_ipv4_cmp 688A  
                                         ?_ipv4_isAllZero 0060  
                                                  ___wmul 6BD2  
                                   ?_ipv4_handleNewPacket 01DD  
                      __end_of_handleStackBackgroundTasks 0B0A  
                              _handleStackBackgroundTasks 0620  
                                          __CFG_STVREN$ON 000000  
                                               ??___awmod 0072  
                                   buttonHandler@oldState 0045  
                                               ??___lldiv 0068  
             enc424j600_writeControlRegisterUnbanked@addr 006C  
                                   buttonHandler@newState 0044  
             enc424j600_writeControlRegisterUnbanked@data 006A  
                                               ??___llmod 0068  
                                               ??___lwdiv 0064  
                                               ??___lwmod 0072  
                                       tcp_sendSYNACK@seq 00C3  
                           enc424j600_setTXLength@lowByte 0070  
                            buttonHandler@debounceCounter 002C  
                                                  clear_0 54CC  
                                                  clear_1 54D8  
                                                  clear_2 54E4  
                                                  clear_3 54F0  
                                                  clear_4 5502  
                                         ___awmod@divisor 0070  
                              parseNumber@numberToDisplay 0008  
                                arp_parseFromRXBuffer@arp 009D  
                handleStackBackgroundTasks@lastEndAddress 02CB  
                                 __end_of_ipv4_background 434A  
                                         ___awmod@counter 0072  
  __end_of_ethernetController_writeEtherTypeFieldToBuffer 66A8  
 __size_of_ethernetController_writeEtherTypeFieldToBuffer 004E  
        ??_ethernetController_writeEtherTypeFieldToBuffer 007A  
         ?_ethernetController_writeEtherTypeFieldToBuffer 006F  
          _ethernetController_writeEtherTypeFieldToBuffer 665A  
                                               ??_mac_cmp 0064  
                             ??_icmp_calculateChecksumBuf 0064  
                                        ??_mac_setAllZero 0062  
                                           main@prescaler 0600  
          ethernetController_streamToTransmitBuffer@field 006F  
                                        __end_of_tcp_init 5B7E  
          __end_of_enc424j600_readControlRegisterUnbanked 69E4  
         __size_of_enc424j600_readControlRegisterUnbanked 0036  
                                                  itoa@cp 0082  
                ??_enc424j600_readControlRegisterUnbanked 006C  
                 ?_enc424j600_readControlRegisterUnbanked 006A  
                  _enc424j600_readControlRegisterUnbanked 69AE  
                                            __pdataCOMRAM 004A  
                                      _enc424j600_initSPI 6D3A  
                           ?_enc424j600_setTXStartAddress 006E  
                                      _enc424j600_readSPI 61CE  
                ethernetController_softReset@comFailCount 0072  
                                                  ltoa@cp 0082  
                                       __end_ofi2___lwdiv 65BC  
                                            __mediumconst 7C58  
                                                  tblptrh 000FF7  
                                                  tblptrl 000FF6  
                                                  tblptru 000FF8  
                                                  srand@x 007A  
           __end_of_ethernetController_clearInterruptFlag 6E7C  
          __size_of_ethernetController_clearInterruptFlag 000E  
                  ?_ethernetController_clearInterruptFlag 0001  
                 ??_ethernetController_clearInterruptFlag 0072  
                   _ethernetController_clearInterruptFlag 6E6E  
                             __end_of_ipv4_generateAutoIP 673A  
                                     mac_setToBroadcast@i 0062  
                                                  ultoa@c 0079  
                                                  ultoa@v 0075  
                                       ?_tcp_stateMachine 00CB  
                              __size_of_ipv4_setToAllZero 0026  
                                     ?_enc424j600_initSPI 0001  
                                      ipv4_background@err 0065  
                                          arp_probe@index 0141  
                                     ?_enc424j600_readSPI 0060  
                         ethernetController_softReset@err 0077  
                                         _numberToDisplay 0030  
                                    __CFG_LS48MHZ$SYS24X4 000000  
                                          arp_probe@state 0041  
                                 ipAdressToString@address 0399  
                                      ??_tcp_stateMachine 00CF  
      __end_of_ethernetController_updateNextPacketPointer 5F1C  
     __size_of_ethernetController_updateNextPacketPointer 007A  
             ?_ethernetController_updateNextPacketPointer 0001  
            ??_ethernetController_updateNextPacketPointer 006F  
              _ethernetController_updateNextPacketPointer 5EA2  
                     __size_of_enc424j600_enableReception 0008  
                                __size_of_arp_setNewEntry 0138  
                       sevenSegmentUpdate@digitsToDisplay 02C8  
                                              __accesstop 0060  
                                 __end_of__initialization 5508  
                                       _printErrorMessage 6EAC  
                                __size_of_arp_sendRequest 009E  
                            ??_enc424j600_readPHYRegister 0070  
                           ??_tcp_calculateHeaderChecksum 0079  
           ethernetController_getEtherTypeField@ethertype 007C  
                                         ?_ipv4_sendFrame 0134  
                                   _arp_parseFromRXBuffer 1906  
                          __end_of_ethernet_rxGetNewFrame 1482  
                                        _sevenSegmentInit 6D56  
                            __size_of_enc424j600_writeSPI 0064  
               ethernetController_updateLinkStatus@temp16 0083  
                                           ___rparam_used 000001  
                     icmp_sendEchoReply@icmpRequestHeader 00D8  
                                      ?_printErrorMessage 0060  
                             arp_parseFromRXBuffer@i_3225 0098  
                             arp_parseFromRXBuffer@i_3226 0099  
                             arp_parseFromRXBuffer@i_3227 009A  
              ethernetController_pollInterruptFlags@flags 007E  
               handleStackBackgroundTasks@remainingLength 01FA  
                                 enc424j600_writeSPI@data 0060  
                                     UART_setFormat@color 008F  
                                          __pcstackCOMRAM 0001  
                             icmp_sendEchoReply@headerBuf 0140  
                                        __CFG_nPWRTEN$OFF 000000  
                                 ipAdressToString@pointer 008A  
 enc424j600_updateReceiveStatusVector@receiveStatusVector 006C  
                                            __pidataBANK2 6EA8  
                                            __pidataBANK3 6AD8  
                                       ipv4_parseHeader@i 008C  
                                               ?_UARTInit 0001  
                                    tcp_handleNewPacket@i 01C7  
                                    ??_enc424j600_initSPI 0060  
                                    ??_enc424j600_readSPI 0062  
                                     ??_printErrorMessage 0063  
                         enc424j600_setRXTailPointer@addr 006E  
                                        _UART_resetFormat 6E22  
                         __end_of_ethernetController_init 59BE  
                                           __end_of_srand 6E22  
                         ??_ethernetController_dropPacket 0074  
                                           __end_of_ultoa 5096  
                             arp_parseFromRXBuffer@offset 009B  
                             icmp_sendEchoReply@ipPayload 00E0  
     ethernetController_getSourceMACAddress@sourceAddress 0079  
                           ?_enc424j600_getInterruptFlags 006E  
                                     arp_send@destination 00C7  
                                 _ethernet_txFrameRequest 5096  
                               __size_of_ipv4_parseHeader 024A  
                                    __size_of_intToString 0030  
                         __end_of_checkForOverlapSwitched 53B4  
                                      __size_of_getMillis 0012  
                                           _buttonHandler 57C8  
                          __size_of_memory_txFrameRequest 04DC  
                             __end_of_ipv4_SrcAddrChanged 6DCA  
                           __end_of_memory_txFrameRequest 0FE6  
                                 arp_background@fAnnounce 0271  
                 handleStackBackgroundTasks@currentPacket 0348  
                                      __size_of_arp_probe 0264  
                                  ?_arp_getEntryFromTable 0060  
                                  arp_parseFromRXBuffer@i 0097  
                    __size_of_enc424j600_setRXTailPointer 002A  
                                    _icmp_handleNewPacket 4A58  
                                                 ??_srand 007C  
                                      __size_of_ipv4_init 0020  
                                                 ??_ultoa 0075  
                               __end_of_printErrorMessage 6EAE  
                        enc424j600_getPacketCount@lowByte 006E  
                                              __pbssBANK1 01FA  
                                              __pbssBANK2 02B8  
                                              __pbssBANK3 0300  
                                              __pbssBANK4 0400  
                                              __pbssBANK5 0500  
           handleStackBackgroundTasks@numberOfPacketsSent 02D0  
                           icmp_sendEchoReply@icmpMessage 0100  
                                       ?_icmp_parseHeader 0074  
                                      _icmp_sendEchoReply 3616  
                               _icmp_calculateChecksumBuf 45B8  
                             __end_of_memory_txFrameClear 6CB8  
                                      ??_icmp_parseHeader 007F  
                          ?_enc424j600_clearInterruptFlag 0001  
                                       _etherTypeToString 677E  
                                __size_of_tcp_parseHeader 0552  
                                     ?_icmp_sendEchoReply 00C1  
                                      ?_etherTypeToString 0060  
                                       __CFG_PLLSEL$PLL4X 000000  
                                  ??_ipv4_handleNewPacket 00F1  
                         ??_ethernetController_sendPacket 007B  
                                                 ?___lmul 0060  
                                                 ?___wmul 006E  
                                              ??_UARTInit 0060  
                                          main@connection 0615  
                             __end_of_tcp_handleNewPacket 33CC  
                                    __size_of_parseNumber 007E  
                                          ___lmul@product 0068  
                    __size_of_tcp_calculateHeaderChecksum 0484  
                                     ??_etherTypeToString 0062  
          ethernetController_writeDestinationMACAddress@i 0086  
                                        ?_ipv4_background 0060  
                                        _entireMemoryFull 693E  
                                   ipv4_parseHeader@field 0074  
                                     udp_sendPacket@start 003C  
                                          ?_buttonHandler 0001  
                              etherTypeToString@ethertype 0060  
                                  ipv4_SrcAddrChanged@err 0060  
                 enc424j600_updateReceiveStatusVector@rsv 0060  
                        icmp_writeHeaderIntoBuffer@header 0062  
                                    ??_icmp_sendEchoReply 00E9  
                                 __size_of_UART_setFormat 00AC  
                       enc424j600_readPHYRegister@lowByte 007D  
                                __end_of_ipAdressToString 4818  
                                         __CFG_WDTPS$1024 000000  
                                          _tcp_sendSYNACK 1D00  
                enc424j600_setERXDATAReadPointer@highByte 006E  
                                                 _SSP1BUF 000FC9  
                                       ipv4_sendFrame@err 00FD  
  ethernetController_writeEtherTypeFieldToBuffer@highByte 007B  
                                   ?_icmp_handleNewPacket 01AF  
                                               ?_arp_init 0001  
                                               ?_arp_send 00A7  
                            __size_of_ipv4_txFrameRequest 0136  
                          ??_enc424j600_setTXStartAddress 0070  
                                   icmp_handleNewPacket@i 0283  
                                               ?_ipv4_cmp 0060  
                                 __size_of_udp_sendPacket 01CE  
                                        __CFG_CFGPLLEN$ON 000000  
                                      _printEthernetState 6416  
                               __end_of_etherTypeToString 67C2  
                                  ?_arp_parseFromRXBuffer 0074  
                  enc424j600_setRXBufferStartAddress@addr 006E  
           __end_of_ethernetController_streamFromRXBuffer 6362  
          __size_of_ethernetController_streamFromRXBuffer 005E  
                 ??_ethernetController_streamFromRXBuffer 0071  
                  ?_ethernetController_streamFromRXBuffer 006F  
                   _ethernetController_streamFromRXBuffer 6304  
                          sevenSegmentUpdate@digitPointer 0043  
                                            intToString@b 0088  
                                       ?_UARTTransmitText 008D  
                                       __end_of_getMillis 6E12  
                                                 __Hparam 0000  
                      __end_of_enc424j600_enableReception 6EA4  
                                         udp_sendPacket@i 0162  
                              _enc424j600_enableReception 6E9C  
ethernetController_updateNextPacketPointer@nextPktPointer 0075  
                                               ?_tcp_init 0001  
                                                 __Lparam 0000  
                                         ipv4_isAllZero@i 0062  
                                     ?_printEthernetState 008F  
                                       ??_arp_setNewEntry 0075  
               __end_of_enc424j600_enableAutoMACInsertion 6BD2  
              __size_of_enc424j600_enableAutoMACInsertion 0028  
                      ?_enc424j600_enableAutoMACInsertion 0001  
                     ??_enc424j600_enableAutoMACInsertion 006E  
                       _enc424j600_enableAutoMACInsertion 6BAA  
                                      ??_UARTTransmitText 008F  
                                checkForOverlapSwitched@a 0060  
                                checkForOverlapSwitched@b 0069  
                                       ??_arp_sendRequest 00FC  
                                       __end_of_arp_probe 3182  
                                      buttonHandler@state 0001  
                               enc424j600_setTXLength@len 006E  
                                   __end_of_mac_isAllZero 6A7A  
                                         __size_of___lmul 0058  
                                                 ___awmod 607C  
                          enc424j600_setTXLength@highByte 0071  
                                                 ___lldiv 5D20  
                                         __size_of___wmul 0028  
                                                 ___llmod 6238  
                                                 ___lwdiv 64C2  
                                                 ___lwmod 67C2  
                    enc424j600_setGPDATAWritePointer@addr 006A  
                               ??_ethernet_txFrameRequest 00A4  
                                       __end_of_ipv4_init 6CFC  
                                     sevenSegmentUpdate@i 0015  
                                                 __pcinit 5466  
                             __size_of_sevenSegmentUpdate 00BE  
                                     parseNumber@hundreds 000E  
                              icmp_parseHeader@icmpHeader 007D  
                                                 __ramtop 0800  
                                                 __ptext0 270A  
                                                 __ptext1 3A36  
                                                 __ptext2 4D92  
                                                 __ptext3 6E52  
                                                 __ptext4 5AF0  
                                                 __ptext5 6CDC  
                                                 __ptext6 6E12  
                                                 __ptext7 6D56  
                                                 __ptext8 6416  
                                                 __ptext9 6EAC  
                                                 _mac_cmp 6806  
                                               _T0CONbits 000FD5  
                            ??_handleStackBackgroundTasks 01EE  
                                            __size_of_ISR 00C2  
                                               _T1CONbits 000FCD  
                  enc424j600_setGPDATAWritePointer@opcode 006C  
                      enc424j600_setRXTailPointer@lowByte 0070  
              __end_of_enc424j600_setRXBufferStartAddress 6B56  
             __size_of_enc424j600_setRXBufferStartAddress 002A  
                    ??_enc424j600_setRXBufferStartAddress 0070  
                     ?_enc424j600_setRXBufferStartAddress 006E  
                      _enc424j600_setRXBufferStartAddress 6B2C  
                                           ?_UART_special 0060  
                                  __end_of_tcp_sendSYNACK 20CA  
                   __end_of_ethernetController_dropPacket 68C6  
                  __size_of_ethernetController_dropPacket 003C  
                           _ethernetController_dropPacket 688A  
                             ?_ipv4_writeHeaderIntoBuffer 0060  
                                        ___awmod@dividend 006E  
                                    ??_printEthernetState 009E  
           __end_of_ethernetController_pollInterruptFlags 4200  
          __size_of_ethernetController_pollInterruptFlags 0158  
                 ??_ethernetController_pollInterruptFlags 007A  
                  ?_ethernetController_pollInterruptFlags 0078  
                   _ethernetController_pollInterruptFlags 40A8  
                          ??_enc424j600_getInterruptFlags 0070  
                        __size_of_ipv4_getIPSourceAddress 0012  
                 enc424j600_setGPDATAWritePointer@lowByte 006D  
                        __size_of_ipv4_setIPSourceAddress 0014  
                                              ??_arp_init 0063  
                                                 main@err 0606  
                                              ??_arp_send 00C7  
                                   __end_of_arp_sendReply 4F98  
                                                 main@udp 0609  
                                    end_of_initialization 5508  
                              __size_of_printErrorMessage 0002  
                                              ??_ipv4_cmp 0064  
                              __end_of_mac_setToBroadcast 6C94  
                              ?_ethernetController_getMTU 0060  
                              ?_ethernetController_getRSV 0071  
                                        arp_gratuitous@ip 0134  
                                                 itoa@buf 007C  
                                                 itoa@val 007E  
                                           __Lmediumconst 7C58  
                                icmp_sendEchoReply@i_4330 0163  
                                               i2u1031_44 5254  
                                               i2u1031_45 5250  
                                               i2u1026_40 5822  
                                               i2u1027_40 5824  
                                               i2u1035_40 52C0  
                                               i2u1036_44 52D0  
                                               i2u1036_45 52CC  
                                                 ltoa@buf 007A  
                                        ??_ipv4_isAllZero 0062  
                         ipv4_calculateHeaderChecksum@sum 006B  
                                                 ltoa@val 007C  
                                         mac_setAllZero@i 0062  
             ethernetController_streamFromRXBuffer@opcode 0072  
                                              _tcp_listen 4D92  
                                         ___lldiv@divisor 0064  
                                     tcp_parseHeader@temp 0084  
                                         ___lldiv@counter 006C  
                                 __size_of_arp_background 0116  
                                              ??_tcp_init 0060  
                                      entireMemoryEmpty@i 0060  
                                __size_of_checkForOverlap 011E  
                                                 postdec1 000FE5  
                                                 postdec2 000FDD  
                                         macToString@addr 0084  
                                                 postinc0 000FEE  
                                                 postinc1 000FE6  
                                                 postinc2 000FDE  
                                       arp_setNewEntry@ip 006D  
                             ?_handleStackBackgroundTasks 01EC  
                                       _arp_checkForEntry 53B4  
                                                 utoa@buf 0073  
                                                 utoa@val 0075  
                   memory_txFrameRequest@fNoOverlapMarker 0095  
                    enc424j600_readPHYRegister@PHYaddress 0077  
                                       ??_tcp_parseHeader 007F  
                                         ??_buttonHandler 0003  
                                      ?_arp_checkForEntry 0067  
                   __end_of_ethernetController_sendPacket 6C22  
                  __size_of_ethernetController_sendPacket 0028  
                           _ethernetController_sendPacket 6BFA  
                                       arp_sendReply@myIP 0134  
                                               _PORTBbits 000F81  
                                     ipv4_background@link 0001  
                                        _ipv4_parseHeader 33CC  
                             ?_enc424j600_writeSingleByte 0001  
                                     ipv4_sendFrame@index 00FC  
                              ?_enc424j600_getPacketCount 0001  
                                ??_enc424j600_setTXLength 0070  
                                          ??_UART_special 0062  
                       sevenSegmentUpdate@numberToDisplay 000F  
                                __end_of_sevenSegmentInit 6D70  
                                     _enc424j600_writeSPI 62A0  
                 __end_of_ipv4_streamToTransmissionBuffer 6D1C  
                __size_of_ipv4_streamToTransmissionBuffer 0020  
                       ??_ipv4_streamToTransmissionBuffer 00C0  
                        ?_ipv4_streamToTransmissionBuffer 007E  
                         _ipv4_streamToTransmissionBuffer 6CFC  
                                              _stack_init 6E52  
                                         ?_tcp_sendSYNACK 00C1  
                              ipv4_handleNewPacket@header 028F  
                                           ??_macToString 008A  
                  ethernetController_softReset@dataToSend 0073  
                                               _TRISBbits 000F93  
                                     ??_arp_checkForEntry 006D  
                                              _updateTime 6E42  
                           icmp_handleNewPacket@ipPayload 01C6  
                                  ??_icmp_handleNewPacket 00ED  
         __end_of_ethernetController_getNextPacketPointer 6E6E  
        __size_of_ethernetController_getNextPacketPointer 000E  
               ??_ethernetController_getNextPacketPointer 0064  
                ?_ethernetController_getNextPacketPointer 0062  
                 _ethernetController_getNextPacketPointer 6E60  
                                 icmp_handleNewPacket@foo 0200  
                                 icmp_handleNewPacket@err 0280  
                                              arp_init@ip 0069  
                             __end_of_arp_handleNewPacket 5244  
                                        ??_ipv4_sendFrame 0176  
                                       i2___lwdiv@divisor 0003  
                         __end_of_ethernet_txFrameRequest 517E  
                        ethernetController_getRSV@address 0071  
                                               i2___lwdiv 656A  
                                       i2___lwdiv@counter 0007  
                                __end_of_UART_resetFormat 6E32  
                              __size_of_etherTypeToString 0044  
                                     UARTTransmitText@str 008D  
                                             _CCP1CONbits 000FBD  
                    __end_of_ipv4_calculateHeaderChecksum 23EE  
                   __size_of_ipv4_calculateHeaderChecksum 0324  
                            _ipv4_calculateHeaderChecksum 20CA  
                    enc424j600_setTXStartAddress@highByte 0071  
                                 tcp_sendSYNACK@headerBuf 0120  
                                    ?_enc424j600_writeSPI 0060  
                               icmp_sendEchoReply@ipReply 016D  
                                       intToString@number 03C1  
                          tcp_calculateHeaderChecksum@sum 008E  
                                   arp_probe@probeCounter 0042  
                               __end_of_arp_checkForEntry 5466  
                              arp_getEntryFromTable@index 0067  
                               __size_of_tcp_stateMachine 00AC  
                      __size_of_icmp_calculateChecksumBuf 0134  
                              arp_setNewEntry@oldestIndex 007D  
                                      arp_checkForEntry@i 0075  
                                      ipv4_parseHeader@ip 008F  
                                          __end_of___lmul 6416  
        ethernetController_updateNextPacketPointer@opcode 0077  
                                     icmp_sendEchoReply@i 0162  
                                          __end_of___wmul 6BFA  
                                           __pidataCOMRAM 6EA4  
                                        parseNumber@digit 000A  
                            ?_enc424j600_setRXTailPointer 006E  
                                       __size_of_UARTInit 0010  
                                         tcp_sendSYNACK@i 016E  
                  enc424j600_setERXDATAReadPointer@opcode 006C  
                      ipv4_checkHeaderChecksum@testHeader 0073  
                                  arp_sendReply@senderMAC 0120  
                                  arp_sendReply@targetMAC 0126  
                                 ??_arp_getEntryFromTable 0067  
             __end_of_ethernetController_updateLinkStatus 5C96  
            __size_of_ethernetController_updateLinkStatus 008A  
                   ??_ethernetController_updateLinkStatus 0082  
                    ?_ethernetController_updateLinkStatus 0080  
                     _ethernetController_updateLinkStatus 5C0C  
                                          _UART_setFormat 571C  
                                     start_initialization 5466  
                                             __end_of_ISR 00CA  
                                  enc424j600_readSPI@data 0060  
                                          intToString@val 0084  
                          ipv4_checkHeaderChecksum@header 006F  
                                ?_ethernetController_init 007A  
                                _ipv4_checkHeaderChecksum 65BC  
                                 tcp_sendSYNACK@tcpHeader 01B2  
                         ipv4_handleNewPacket@headerField 02AF  
                                              ?i2___lwdiv 0001  
                icmp_calculateChecksumBuf@ipPayloadLength 0062  
                           ipv4_writeHeaderIntoBuffer@ptr 0077  
                                          _udp_sendPacket 3A36  
                                ?_checkForOverlapSwitched 0060  
                                     __end_of_macToString 5670  
                                         __CFG_nLPBOR$OFF 000000  
                                   ??_enc424j600_writeSPI 0062  
                                __end_of_entireMemoryFull 6976  
                            __size_of_ipv4_generateAutoIP 0046  
                                       udp_sendPacket@foo 0160  
   __end_of_ethernetController_writeDestinationMACAddress 5E24  
  __size_of_ethernetController_writeDestinationMACAddress 0080  
         ??_ethernetController_writeDestinationMACAddress 007E  
          ?_ethernetController_writeDestinationMACAddress 006F  
           _ethernetController_writeDestinationMACAddress 5DA4  
                                       udp_sendPacket@dst 00C9  
                                         ___llmod@divisor 0064  
                     ethernetController_checkDeviceId@err 0072  
                                 __size_of_arp_gratuitous 01FE  
                                     arp_background@state 003E  
                                         ___llmod@counter 0068  
                                             ?_tcp_listen 008F  
                           ?_ipv4_calculateHeaderChecksum 0060  
                           ethernetController_getRSV@temp 02D2  
                     __end_of_enc424j600_setRXTailPointer 6B2C  
                             _enc424j600_setRXTailPointer 6B02  
                                    printErrorMessage@err 0060  
                                 udp_sendPacket@headerBuf 0100  
                                                ??___lmul 0068  
                                          _occupiedMemory 0300  
                                                ??___wmul 0072  
                                     arp_gratuitous@index 00FC  
                                     _ipv4_txFrameRequest 4482  
                             arp_background@ipPreliminary 02C0  
                  ethernetController_getDeviceName@string 0062  
                             __size_of_enc424j600_initSPI 001C  
                                             __pdataBANK2 02E8  
                                     arp_gratuitous@state 003F  
                                             __pdataBANK3 03CB  
                            ??_icmp_writeHeaderIntoBuffer 006A  
                             __size_of_enc424j600_readSPI 006A  
                                           ??_intToString 0089  
                               __size_of_icmp_parseHeader 01B0  
                            ??_enc424j600_enableReception 006B  
                       __end_of_icmp_calculateChecksumBuf 46EC  
                                        checkForOverlap@a 0072  
                                        checkForOverlap@b 007B  
                        enc424j600_readSPI@timeoutCounter 0066  
                         ??_enc424j600_clearInterruptFlag 006E  
                                       ??_checkForOverlap 0084  
                                  __end_of_UART_setFormat 57C8  
                           ??_enc424j600_setRXTailPointer 0070  
                                             ?_stack_init 0001  
                         __size_of_enc424j600_setTXLength 002A  
                                             __pbssCOMRAM 0028  
                        enc424j600_writeSingleByte@opcode 006A  
                                 _ipv4_getIPSourceAddress 6DCA  
                                 _ipv4_setIPSourceAddress 6DA2  
                ethernetController_updateLinkStatus@state 0080  
                              icmp_sendEchoReply@checksum 0160  
                                           __pcstackBANK0 0060  
                                           __pcstackBANK1 0100  
                                           __pcstackBANK2 0200  
                                           __pcstackBANK6 0600  
                                             ?_updateTime 0001  
                              icmp_sendEchoReply@ipHeader 00C1  
                                       ?_ipAdressToString 0084  
                                   _memory_txFrameRequest 0B0A  
                                  __end_of_udp_sendPacket 3C04  
           __end_of_ethernetController_newPacketAvailable 6DEE  
          __size_of_ethernetController_newPacketAvailable 0012  
                  ?_ethernetController_newPacketAvailable 0001  
                 ??_ethernetController_newPacketAvailable 006F  
                   _ethernetController_newPacketAvailable 6DDC  
                              arp_parseFromRXBuffer@frame 0074  
                                 ??_arp_parseFromRXBuffer 0094  
                                    ?_ipv4_txFrameRequest 00A7  
                ethernetController_softReset@receivedData 0075  
                     __end_of_tcp_calculateHeaderChecksum 1906  
                             _tcp_calculateHeaderChecksum 1482  
                                      ??_ipAdressToString 0088  
                                         _arp_setNewEntry 434A  
                            __size_of_ipv4_SrcAddrChanged 0014  
                        enc424j600_getInterruptFlags@high 0077  
                                         _arp_sendRequest 59BE  
                                 __size_of_mac_setAllZero 0026  
                                       __size_of_arp_init 0094  
                                       __size_of_arp_send 0278  
                                       __size_of_ipv4_cmp 0042  
                               ipv4_txFrameRequest@packet 00A7  
                     __size_of_icmp_writeHeaderIntoBuffer 00AE  
                              buttonHandler@debounceValue 0007  
                                    __end_of_UART_special 6D3A  
                                        arp_send@ethFrame 00D1  
                                          _arp_background 4B72  
                     __size_of_enc424j600_writeSingleByte 0018  
                          icmp_calculateChecksumBuf@carry 0068  
                                           ??_parseNumber 000B  
                                               _main$2607 0604  
                                        ___lwdiv@dividend 0060  
                                      _sevenSegCharacters 03E9  
              ethernetController_getEtherTypeField@opcode 007E  
                              __size_of_arp_checkForEntry 00B2  
                                               __pintcode 0008  
                            __size_of_memory_txFrameClear 0024  
                                           __pmediumconst 7C58  
                                               _getMillis 6E00  
                                               __ptext100 5096  
                                               __ptext101 0B0A  
                                               __ptext110 68C6  
                                               __ptext102 693E  
                                               __ptext111 6BFA  
                                               __ptext103 6976  
                                               __ptext120 61CE  
                                               __ptext112 6C94  
                                               __ptext104 493A  
                                               __ptext121 6D3A  
                                               __ptext113 6D8A  
                                               __ptext105 5302  
                                               __ptext130 5244  
                                               __ptext122 53B4  
                                               __ptext114 6B56  
                                               __ptext106 6BD2  
                                               __ptext131 5E24  
                                               __ptext123 6848  
                                               __ptext115 6B80  
                                               __ptext107 665A  
                                               __ptext132 656A  
                                               __ptext124 6E00  
                                               __ptext116 69E4  
                                               __ptext108 5DA4  
                                               __ptext133 57C8  
                                               __ptext125 6D1C  
                                               __ptext117 615E  
                                               __ptext109 5F1C  
                                               __ptext126 6CB8  
                                               __ptext118 6902  
                                               __ptext127 6E32  
                                               __ptext119 62A0  
                                               __ptext129 6E42  
                                                ?___awmod 006E  
                                       __size_of_tcp_init 008E  
                                                ?___lldiv 0060  
                                                ?___llmod 0060  
                           __size_of_ipv4_handleNewPacket 0282  
                                  arp_checkForEntry@index 006B  
                                                ?___lwdiv 0060  
                                               _arpStatus 0036  
                                                ?___lwmod 006E  
     ethernetController_writeEtherTypeFieldToBuffer@field 0071  
                                               _arp_table 047C  
                               tcp_sendSYNACK@ipHeaderBuf 0100  
                                               _arp_probe 2F1E  
                                     ipv4_setToAllZero@ip 0060  
                                                ?_mac_cmp 0060  
                                         ?_UART_setFormat 0001  
                               __size_of_UARTTransmitText 0056  
                                               _ipv4_init 6CDC  
              ethernetController_getSourceMACAddress@temp 007F  
                            __size_of_tcp_handleNewPacket 024A  
                    enc424j600_setERXDATAReadPointer@addr 006A  
                                  arp_background@errProbe 015A  
                 enc424j600_setERXDATAReadPointer@lowByte 006D  
                                  ipv4_parseHeader@i_3860 008D  
                                      ipAdressToString@ip 0084  
                                     __end_of_intToString 6A4A  
                                     __size_of_tcp_listen 0106  
                             __size_of_icmp_sendEchoReply 0222  
                                             _macToString 55C4  
                                    udp_sendPacket@header 00C1  
                                   ??_ipv4_txFrameRequest 00A9  
                    tcp_calculateHeaderChecksum@tcpHeader 0060  
                                        ___lwdiv@quotient 0065  
                                         ?_udp_sendPacket 00C1  
                                   ipv4_generateAutoIP@ip 0078  
                                __size_of_ipv4_background 014A  
                                       _entireMemoryEmpty 6976  
                                ??_ethernet_rxGetNewFrame 01E1  
                                             ??i2___lwdiv 0005  
                                          __size_of_srand 0010  
                                          __size_of_ultoa 00FE  
                      enc424j600_readPHYRegister@highByte 007E  
                        tcp_calculateHeaderChecksum@carry 007D  
                                      ?_entireMemoryEmpty 0001  
                             ?_enc424j600_readPHYRegister 006E  
                     ipv4_streamToTransmissionBuffer@data 00C0  
                                arp_setNewEntry@timestamp 0071  
                             ??_ethernetController_getMTU 0062  
                             ??_ethernetController_getRSV 0076  
                           arp_gratuitous@announceCounter 0040  
                                  __end_of_arp_background 4C88  
                                          ___wmul@product 0072  
                                tcp_parseHeader@ipPayload 0074  
                             ethernet_rxGetNewFrame@frame 01DF  
                                __end_of_ipv4_parseHeader 3616  
                                  _enc424j600_setTXLength 6B80  
                            icmp_calculateChecksumBuf@buf 0060  
                            icmp_calculateChecksumBuf@foo 0069  
                                         _tcp_parseHeader 00CE  
                            icmp_calculateChecksumBuf@sum 006D  
                                                _PIE1bits 000F9D  
                       enc424j600_writeSPI@timeoutCounter 0066  
                                     __size_of_stack_init 000E  
                                     ??_entireMemoryEmpty 0060  
                                                _PIR1bits 000F9E  
                                       entireMemoryFull@i 0060  
                                                i2u929_40 658C  
                                                _RCONbits 000FD0  
                                        _tcp_stateMachine 5670  
                                        arp_setNewEntry@i 007E  
                                     __size_of_updateTime 0010  
                                      _mac_setToBroadcast 6C6E  
                              __end_of_sevenSegmentUpdate 5302  
                                              ?_getMillis 0060  
                                                _UARTInit 6E32  
                          ??_ipv4_calculateHeaderChecksum 0062  
              __end_of_ethernetController_disableEthernet 6EB0  
             __size_of_ethernetController_disableEthernet 0002  
                     ?_ethernetController_disableEthernet 0001  
                    ??_ethernetController_disableEthernet 0060  
                      _ethernetController_disableEthernet 6EAE  
                            icmp_handleNewPacket@ipHeader 01AF  
                    __end_of_enc424j600_setTXStartAddress 6B80  
                   __size_of_enc424j600_setTXStartAddress 002A  
                            _enc424j600_setTXStartAddress 6B56  
                                  arp_handleNewPacket@arp 0158  
                                        ??_tcp_sendSYNACK 00C7  
                                     __end_of_parseNumber 5EA2  
                __end_of_enc424j600_setERXDATAReadPointer 693E  
               __size_of_enc424j600_setERXDATAReadPointer 003C  
                      ??_enc424j600_setERXDATAReadPointer 006C  
                       ?_enc424j600_setERXDATAReadPointer 006A  
                        _enc424j600_setERXDATAReadPointer 6902  
                                              ?_arp_probe 0134  
                                               arp_init@i 006D  
                               ??_ipv4_getIPSourceAddress 0064  
                                       ___wmul@multiplier 006E  
                               ??_ipv4_setIPSourceAddress 0064  
                                     ?_mac_setToBroadcast 0060  
                                               arp_send@i 00CD  
                             ??_enc424j600_getPacketCount 006E  
                                              ?_ipv4_init 0001  
                                 arp_gratuitous@timeStart 0028  
   ethernetController_updateNextPacketPointer@newPointerH 0079  
   ethernetController_updateNextPacketPointer@newPointerL 0078  
                                               main@ipDst 0611  
                                     _tcp_sendSYNACK$4902 0160  
                                     _tcp_sendSYNACK$4903 0162  
                                     _tcp_sendSYNACK$4904 0164  
                                     _tcp_sendSYNACK$4905 0166  
                                     _tcp_sendSYNACK$4906 0168  
                                     _tcp_sendSYNACK$4907 016A  
                                     _tcp_sendSYNACK$4908 016C  
                                       ?_sevenSegmentInit 0001  
                                 __end_of_arp_setNewEntry 4482  
                             tcp_handleNewPacket@ipHeader 00CF  
                                 __end_of_arp_sendRequest 5A5C  
                               __end_of_entireMemoryEmpty 69AE  
                                  ?_memory_txFrameRequest 0084  
                                            _tcpListeners 0500  
                                  tcp_sendSYNACK@ipPacket 0170  
                    ethernetController_checkDeviceId@data 0071  
                             __size_of_printEthernetState 0056  
                   __end_of_enc424j600_clearInterruptFlag 5D20  
                  __size_of_enc424j600_clearInterruptFlag 008A  
                           _enc424j600_clearInterruptFlag 5C96  
                                      ??_sevenSegmentInit 0060  
                     enc424j600_setTXStartAddress@lowByte 0070  
                                               ipv4_cmp@a 0060  
                                               ipv4_cmp@b 0062  
                                               ipv4_cmp@i 0066  
                                    arp_probe@waitingTime 014A  
                                       ___lmul@multiplier 0060  
                                             _INTCON3bits 000FF0  
                                               copy_data0 547A  
                                               copy_data1 549A  
                                               copy_data2 54BA  
                                         parseNumber@ones 000C  
                                         parseNumber@tens 000D  
                                  __size_of_mac_isAllZero 0030  
                                   arp_sendReply@senderIP 012C  
                                   arp_sendReply@targetIP 0130  
                                      macToString@address 03AD  
                                       ?_UART_resetFormat 0001  
                                    ??_mac_setToBroadcast 0062  
                                          _arp_gratuitous 3838  
                                         ?_arp_background 0151  
                                      ??_UART_resetFormat 008F  
                                         _icmpTxtMessages 03CB  
                __end_of_ethernetController_checkDeviceId 665A  
               __size_of_ethernetController_checkDeviceId 004E  
                      ??_ethernetController_checkDeviceId 0071  
                       ?_ethernetController_checkDeviceId 006E  
                        _ethernetController_checkDeviceId 660C  
                                      arp_background@link 0156  
                                                __Hrparam 0000  
                                        ipv4_isAllZero@ip 0060  
                        enc424j600_setTXStartAddress@addr 006E  
                                ?_ethernet_txFrameRequest 00A2  
                                                __Lrparam 0000  
                                        UART_special@code 0062  
                    __end_of_enc424j600_getInterruptFlags 66F4  
                   __size_of_enc424j600_getInterruptFlags 004C  
                            _enc424j600_getInterruptFlags 66A8  
                                      __CFG_BOREN$SBORDIS 000000  
                        ipv4_writeHeaderIntoBuffer@header 0060  
                                      arp_gratuitous@link 0138  
                      __end_of_icmp_writeHeaderIntoBuffer 55C4  
                              _icmp_writeHeaderIntoBuffer 5516  
                                  udp_sendPacket@ipPacket 0164  
                      __end_of_enc424j600_writeSingleByte 6DA2  
                              _enc424j600_writeSingleByte 6D8A  
                                        _icmp_parseHeader 3C04  
                                        __size_of___awmod 0072  
                                  __size_of_arp_sendReply 0100  
                                        __size_of___lldiv 0084  
                                        __size_of___llmod 0068  
                                             _intToString 6A1A  
                       handleStackBackgroundTasks@errIPv4 01F5  
                                        __size_of___lwdiv 0054  
                                        __size_of___lwmod 0044  
                 ethernetController_updateLinkStatus@temp 0082  
                              ??_ipv4_checkHeaderChecksum 0071  
                               _ethernetController_getMTU 6E7C  
                               _ethernetController_getRSV 5F94  
                 __end_of_ethernetController_setLEDConfig 5C0C  
                __size_of_ethernetController_setLEDConfig 008E  
                       ??_ethernetController_setLEDConfig 006F  
                        ?_ethernetController_setLEDConfig 006E  
                         _ethernetController_setLEDConfig 5B7E  
            ethernetController_getEtherTypeField@highByte 0080  
                                     _ipv4_generateAutoIP 66F4  
                                              _ANSELBbits 000F5C  
                                   __end_of_buttonHandler 5874  
                         enc424j600_getInterruptFlags@low 0076  
                                        __size_of_mac_cmp 0042  
       ethernetController_streamFromRXBuffer@startAddress 006F  
                                             _buttonState 02E7  
                     enc424j600_setRXTailPointer@highByte 0071  
                                arp_sendRequest@senderMAC 0108  
                                  memory_txFrameRequest@i 0096  
                          __size_of_arp_getEntryFromTable 002E  
                                arp_sendRequest@targetMAC 010E  
                                         ___lwdiv@divisor 0062  
                           __end_of_arp_getEntryFromTable 6AD8  
                                         ___lwdiv@counter 0064  
                                       mac_setAllZero@mac 0060  
                                     _ipPreliminarySource 02D8  
                                                __ptext10 0620  
                                                __ptext11 6DA2  
                                                __ptext20 673A  
                                                __ptext12 3DB4  
                                                __ptext21 5874  
                                                __ptext13 6AAA  
                                                __ptext30 4F98  
                                                __ptext22 64C2  
                                                __ptext14 66F4  
                                                __ptext31 6238  
                                                __ptext23 2A24  
                                                __ptext15 607C  
                                                __ptext40 6CFC  
                                                __ptext32 5D20  
                                                __ptext24 3182  
                                                __ptext16 4200  
                                                __ptext41 20CA  
                                                __ptext33 00CE  
                                                __ptext25 5670  
                                                __ptext17 46EC  
                                                __ptext50 517E  
                                                __ptext42 5516  
                                                __ptext34 33CC  
                                                __ptext26 1D00  
                                                __ptext18 0FE6  
                                                __ptext51 688A  
                                                __ptext43 45B8  
                                                __ptext35 65BC  
                                                __ptext27 1482  
                                                __ptext19 55C4  
                                                __ptext60 6A7A  
                                                __ptext52 6E60  
                                                __ptext44 3C04  
                                                __ptext36 4A58  
                                                __ptext28 6A1A  
                                                __ptext61 6304  
                                                __ptext53 6E88  
                                                __ptext45 5EA2  
                                                __ptext37 3616  
                                                __ptext29 6516  
                                                __ptext70 6DDC  
                                                __ptext62 571C  
                                                __ptext54 434A  
                                                __ptext46 5F94  
                                                __ptext38 3F3A  
                                                __ptext71 6D70  
                                                __ptext63 6E22  
                                                __ptext55 4E98  
                                                __ptext47 23EE  
                                                __ptext39 4482  
                                                __ptext80 6E7C  
                                                __ptext72 591E  
                                                __ptext64 646C  
                                                __ptext56 6DCA  
                                                __ptext48 60EE  
                                                __ptext81 6EAE  
                                                __ptext73 4C88  
                                                __ptext65 5C0C  
                                                __ptext57 1906  
                                                __ptext49 677E  
                                                __ptext90 63BE  
                                                __ptext82 6E6E  
                                                __ptext74 660C  
                                                __ptext66 4818  
                                                __ptext58 6A4A  
                                                __ptext91 6C22  
                                                __ptext83 5C96  
                                                __ptext75 6B02  
                                                __ptext67 5B7E  
                                                __ptext59 6806  
                                                __ptext92 67C2  
                                                __ptext84 5A5C  
                                                __ptext76 6B2C  
                                                __ptext68 40A8  
                                                __ptext93 3838  
                                                __ptext85 4B72  
                                                __ptext77 6E92  
                                                __ptext69 66A8  
                                                __ptext94 59BE  
                                                __ptext86 6DEE  
                                                __ptext78 6E9C  
                                                __ptext95 6C48  
                                                __ptext87 6DB6  
                                                __ptext79 6BAA  
                                                __ptext96 6008  
                                                __ptext88 2F1E  
                                                __ptext97 69AE  
                                                __ptext89 6362  
                                                __ptext98 2CA6  
                                                __ptext99 6C6E  
                                   tcp_parseHeader@header 007D  
                                            _SSP1CON1bits 000FC6  
                   enc424j600_enableAutoMACInsertion@temp 006E  
                                                _arp_init 5A5C  
                                                _arp_send 2CA6  
                                 __end_of_tcp_parseHeader 0620  
                           __size_of_icmp_handleNewPacket 011A  
                                      ipv4_setToAllZero@i 0062  
                         __size_of_ethernet_rxGetNewFrame 049C  
                                          _mac_setAllZero 6C48  
                                  __end_of_arp_gratuitous 3A36  
                                                _ipv4_cmp 6848  
                                                _ipSource 02E0  
                                   __size_of_UART_special 001E  
                                             _OSCCON2bits 000FD2  
                                       ipAdressToString@i 008B  
                                       ipAdressToString@j 0089  
                                               tcp_init@i 0060  
                         __end_of_ipv4_getIPSourceAddress 6DDC  
                enc424j600_setGPDATAWritePointer@highByte 006E  
                         __end_of_ipv4_setIPSourceAddress 6DB6  
              __end_of_ipv4_getPreliminaryIPSourceAddress 6E00  
             __size_of_ipv4_getPreliminaryIPSourceAddress 0012  
                    ??_ipv4_getPreliminaryIPSourceAddress 0064  
                     ?_ipv4_getPreliminaryIPSourceAddress 0060  
                      _ipv4_getPreliminaryIPSourceAddress 6DEE  
                                    ?_ipv4_generateAutoIP 0074  
                                           __size_of_main 031A  
                                           __size_of_rand 005C  
                                           __size_of_itoa 0044  
                                           __size_of_ltoa 0054  
                               _enc424j600_getPacketCount 6D70  
                                           __size_of_utoa 00AA  
                                       ??_ipv4_background 0063  
                                       ?_entireMemoryFull 0001  
                            __size_of_arp_handleNewPacket 00C6  
                 __end_of_enc424j600_getNextPacketPointer 6E92  
                __size_of_enc424j600_getNextPacketPointer 000A  
                       ??_enc424j600_getNextPacketPointer 0062  
                        ?_enc424j600_getNextPacketPointer 0060  
                         _enc424j600_getNextPacketPointer 6E88  
                                            ??_tcp_listen 0091  
                 __end_of_enc424j600_setNextPacketPointer 6E9C  
                __size_of_enc424j600_setNextPacketPointer 000A  
                       ??_enc424j600_setNextPacketPointer 0062  
                        ?_enc424j600_setNextPacketPointer 0060  
                         _enc424j600_setNextPacketPointer 6E92  
     ethernetController_writeDestinationMACAddress@opcode 0084  
                        __size_of_ethernetController_init 00A0  
                                         _checkForOverlap 493A  
                              tcp_stateMachine@connection 00CB  
                                                _tcp_init 5AF0  
                                      ??_entireMemoryFull 0060  
                                             _parseNumber 5E24  
                                                _sequence 0034  
                                             ??_getMillis 0064  
                                                int$flags 004F  
                                 buttonHandler@resetValue 0003  
                                                mac_cmp@a 0060  
                        __size_of_checkForOverlapSwitched 00B2  
                                                mac_cmp@b 0062  
                                                mac_cmp@i 0066  
            enc424j600_readControlRegisterUnbanked@opcode 006D  
                                           _mac_isAllZero 6A4A  
                                                _unlocked 0272  
                   ipv4_streamToTransmissionBuffer@packet 007E  
                                     _ipv4_SrcAddrChanged 6DB6  
                                            _SSP1STATbits 000FC7  
                              ethernet_txFrameRequest@err 00A4  
                                             ??_arp_probe 0139  
                                 __size_of_ipv4_isAllZero 0030  
                               ipv4_setIPSourceAddress@ip 0060  
                               ethernet_rxGetNewFrame@err 01E9  
                                        _UARTTransmitText 646C  
                                             ??_ipv4_init 0063  
                     __size_of_enc424j600_readPHYRegister 0122  
                                            ??_stack_init 006E  
                                    arp_sendReply@request 0100  
                                 arp_sendRequest@ipSender 0100  
                                 arp_sendRequest@ipTarget 0104  
                                              _INTCONbits 000FF2  
                                            _UART_special 6D1C  
                                        ?_arp_setNewEntry 0067  
                                  ipv4_sendFrame@ipPacket 0134  
                                       arp_background@err 0047  
                              __size_of_entireMemoryEmpty 0038  
                                            ??_updateTime 0001  
   ethernetController_writeEtherTypeFieldToBuffer@ethtype 006F  
                                        ?_arp_sendRequest 0100  
   ethernetController_writeEtherTypeFieldToBuffer@lowByte 007A  
                                       arp_gratuitous@err 00FD  
                                                itoa@base 0080  
                                      __end_of_tcp_listen 4E98  
                                       macToString@number 02E4  
                                  __end_of_mac_setAllZero 6C6E  
                                               ultoa@base 0073  
                                     _memory_txFrameClear 6C94  
                             __end_of_enc424j600_writeSPI 6304  
                        handleStackBackgroundTasks@errArp 01F0  
                                           _arp_sendReply 4E98  
                                                intlevel2 0000  
                                    ?_ipv4_SrcAddrChanged 0060  
                          __size_of_arp_parseFromRXBuffer 03FA  
                                         ?_arp_gratuitous 0134  
                           __end_of_arp_parseFromRXBuffer 1D00  
                                                ltoa@base 0080  
                               icmp_parseHeader@ipPayload 0074  
                                   ??_ipv4_generateAutoIP 0078  
                                        ___lwmod@dividend 006E  
                                        ___lldiv@dividend 0060  
             ethernetController_getEtherTypeField@lowByte 007F  
                           icmp_writeHeaderIntoBuffer@buf 0060  
      ethernetController_writeDestinationMACAddress@i_640 0085  
               ethernetController_streamFromRXBuffer@temp 0073  
                          enc424j600_readPHYRegister@addr 0076  
                                              _RCSTA1bits 000FAB  
                          enc424j600_readPHYRegister@data 006E  
                                     _tcp_handleNewPacket 3182  
                          enc424j600_readPHYRegister@temp 007F  
      ethernetController_writeDestinationMACAddress@field 0075  
                                              _OSCCONbits 000FD3  
                                 __size_of_ipv4_sendFrame 0186  
                               __size_of_ipAdressToString 012C  
                                      __end_of_stack_init 6E60  
                                            macToString@i 008B  
                                            macToString@j 008C  
                enc424j600_readPHYRegister@timeoutCounter 0079  
                              __end_of_enc424j600_initSPI 6D56  
                              __end_of_enc424j600_readSPI 6238  
                                    ?_memory_txFrameClear 0001  
                   tcp_calculateHeaderChecksum@ipv4Header 0062  
                                      arp_probe@timeStart 0146  
                                          ?_mac_isAllZero 0060  
                                        ??_UART_setFormat 008F  
                                  _ethernet_rxGetNewFrame 0FE6  
                                      __end_of_updateTime 6E52  
                               arp_setNewEntry@minSeconds 0079  
                                    __CFG_CPUDIV$NOCLKDIV 000000  
                                       arp_probe@ipSender 0142  
                                       arp_probe@ipTarget 0134  
                                      arp_setNewEntry@mac 0067  
                      ethernetController_sendPacket@field 0072  
            ethernetController_getSourceMACAddress@opcode 0078  
    ethernetController_writeEtherTypeFieldToBuffer@opcode 007C  
                              ?_icmp_calculateChecksumBuf 0060  
            __end_of_enc424j600_updateReceiveStatusVector 270A  
           __size_of_enc424j600_updateReceiveStatusVector 031C  
                  ??_enc424j600_updateReceiveStatusVector 0065  
                   ?_enc424j600_updateReceiveStatusVector 0060  
                    _enc424j600_updateReceiveStatusVector 23EE  
                                   mac_setToBroadcast@mac 0060  
                                                utoa@base 0077  
                                                ultoa@buf 006D  
                                                ultoa@val 006F  
                               ipv4_handleNewPacket@frame 01DD  
                                   ipv4_sendFrame@oldTime 02BC  
                                        ??_udp_sendPacket 00CD  
                                    ?_tcp_handleNewPacket 00CF  
                __end_of_enc424j600_setGPDATAWritePointer 6902  
               __size_of_enc424j600_setGPDATAWritePointer 003C  
                      ??_enc424j600_setGPDATAWritePointer 006C  
                       ?_enc424j600_setGPDATAWritePointer 006A  
                        _enc424j600_setGPDATAWritePointer 68C6  
                                        ___lldiv@quotient 0068  
                                         ___lwmod@divisor 0070  
                                  arp_sendRequest@request 0114  
                      enc424j600_setNextPacketPointer@ptr 0060  
                                         ___lwmod@counter 0072  
                            ??_ipv4_writeHeaderIntoBuffer 0079  
                                            ?_macToString 0084  
              enc424j600_readControlRegisterUnbanked@addr 006C  
              enc424j600_readControlRegisterUnbanked@data 006A  
                         ethernetController_getRSV@opcode 0076  
                    __end_of_ethernetController_softReset 4D92  
                   __size_of_ethernetController_softReset 010A  
                            _ethernetController_softReset 4C88  
                                         ?_mac_setAllZero 0060  
                                __end_of_tcp_stateMachine 571C  
                            __end_of_ipv4_handleNewPacket 2CA6  
             ethernetController_getSourceMACAddress@field 006F  
                                      arp_sendReply@reply 0138  
                                          ?_arp_sendReply 0100  
                                   ??_ipv4_SrcAddrChanged 0062  
                                        ?_tcp_parseHeader 0074  
                                arp_handleNewPacket@frame 00FC  
                                      __CFG_FOSC$INTOSCIO 000000  
                                 ?_enc424j600_setTXLength 006E  
                                 __end_of_checkForOverlap 4A58  
           __end_ofethernetController_getDeviceName@F6080 7C64  
                   ethernetController_getDeviceName@F6080 7C59  
                          ?_ethernetController_dropPacket 0072  
                                       ?_ipv4_parseHeader 0074  
                          icmp_handleNewPacket@icmpHeader 0285  
                                 _sevenSegmentUpdate$2676 0013  
                                      ??_ipv4_parseHeader 008B  
                                   ??_memory_txFrameClear 0060  
