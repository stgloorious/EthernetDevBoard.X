

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Mar 17 19:46:30 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F25K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1
    39                           	psect	text19,global,reloc=2,class=CODE,delta=1
    40                           	psect	text20,global,reloc=2,class=CODE,delta=1
    41                           	psect	text21,global,reloc=2,class=CODE,delta=1
    42                           	psect	text22,global,reloc=2,class=CODE,delta=1
    43                           	psect	text23,global,reloc=2,class=CODE,delta=1
    44                           	psect	text24,global,reloc=2,class=CODE,delta=1
    45                           	psect	text25,global,reloc=2,class=CODE,delta=1
    46                           	psect	text26,global,reloc=2,class=CODE,delta=1
    47                           	psect	text27,global,reloc=2,class=CODE,delta=1
    48                           	psect	text28,global,reloc=2,class=CODE,delta=1
    49                           	psect	text29,global,reloc=2,class=CODE,delta=1
    50                           	psect	text30,global,reloc=2,class=CODE,delta=1
    51                           	psect	text31,global,reloc=2,class=CODE,delta=1
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    53                           	psect	text33,global,reloc=2,class=CODE,delta=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1
    57                           	psect	text37,global,reloc=2,class=CODE,delta=1
    58                           	psect	text38,global,reloc=2,class=CODE,delta=1
    59                           	psect	text39,global,reloc=2,class=CODE,delta=1
    60                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=1
    62                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1
    66                           	psect	text46,global,reloc=2,class=CODE,delta=1
    67                           	psect	text47,global,reloc=2,class=CODE,delta=1
    68                           	psect	text48,global,reloc=2,class=CODE,delta=1
    69                           	psect	text49,global,reloc=2,class=CODE,delta=1
    70                           	psect	text50,global,reloc=2,class=CODE,delta=1
    71                           	psect	text51,global,reloc=2,class=CODE,delta=1
    72                           	psect	text52,global,reloc=2,class=CODE,delta=1
    73                           	psect	text53,global,reloc=2,class=CODE,delta=1
    74                           	psect	text54,global,reloc=2,class=CODE,delta=1
    75                           	psect	text55,global,reloc=2,class=CODE,delta=1
    76                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=1
    77                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=1
    78                           	psect	text58,global,reloc=2,class=CODE,delta=1
    79                           	psect	text59,global,reloc=2,class=CODE,delta=1
    80                           	psect	text60,global,reloc=2,class=CODE,delta=1
    81                           	psect	text61,global,reloc=2,class=CODE,delta=1,group=1
    82                           	psect	text62,global,reloc=2,class=CODE,delta=1
    83                           	psect	text63,global,reloc=2,class=CODE,delta=1
    84                           	psect	text64,global,reloc=2,class=CODE,delta=1
    85                           	psect	text65,global,reloc=2,class=CODE,delta=1
    86                           	psect	text66,global,reloc=2,class=CODE,delta=1
    87                           	psect	text67,global,reloc=2,class=CODE,delta=1
    88                           	psect	text68,global,reloc=2,class=CODE,delta=1
    89                           	psect	text69,global,reloc=2,class=CODE,delta=1
    90                           	psect	text70,global,reloc=2,class=CODE,delta=1
    91                           	psect	text71,global,reloc=2,class=CODE,delta=1
    92                           	psect	text72,global,reloc=2,class=CODE,delta=1
    93                           	psect	text73,global,reloc=2,class=CODE,delta=1
    94                           	psect	text74,global,reloc=2,class=CODE,delta=1
    95                           	psect	text75,global,reloc=2,class=CODE,delta=1
    96                           	psect	text76,global,reloc=2,class=CODE,delta=1,group=1
    97                           	psect	text77,global,reloc=2,class=CODE,delta=1
    98                           	psect	text78,global,reloc=2,class=CODE,delta=1
    99                           	psect	text79,global,reloc=2,class=CODE,delta=1
   100                           	psect	text80,global,reloc=2,class=CODE,delta=1
   101                           	psect	text81,global,reloc=2,class=CODE,delta=1
   102                           	psect	text82,global,reloc=2,class=CODE,delta=1
   103                           	psect	text83,global,reloc=2,class=CODE,delta=1
   104                           	psect	text84,global,reloc=2,class=CODE,delta=1
   105                           	psect	text85,global,reloc=2,class=CODE,delta=1
   106                           	psect	text86,global,reloc=2,class=CODE,delta=1
   107                           	psect	text87,global,reloc=2,class=CODE,delta=1
   108                           	psect	text88,global,reloc=2,class=CODE,delta=1
   109                           	psect	text89,global,reloc=2,class=CODE,delta=1
   110                           	psect	text90,global,reloc=2,class=CODE,delta=1
   111                           	psect	text91,global,reloc=2,class=CODE,delta=1
   112                           	psect	text92,global,reloc=2,class=CODE,delta=1
   113                           	psect	text93,global,reloc=2,class=CODE,delta=1
   114                           	psect	text94,global,reloc=2,class=CODE,delta=1
   115                           	psect	text95,global,reloc=2,class=CODE,delta=1
   116                           	psect	text96,global,reloc=2,class=CODE,delta=1
   117                           	psect	text97,global,reloc=2,class=CODE,delta=1
   118                           	psect	text98,global,reloc=2,class=CODE,delta=1
   119                           	psect	text99,global,reloc=2,class=CODE,delta=1
   120                           	psect	text100,global,reloc=2,class=CODE,delta=1
   121                           	psect	text101,global,reloc=2,class=CODE,delta=1
   122                           	psect	text102,global,reloc=2,class=CODE,delta=1
   123                           	psect	text103,global,reloc=2,class=CODE,delta=1
   124                           	psect	text104,global,reloc=2,class=CODE,delta=1
   125                           	psect	text105,global,reloc=2,class=CODE,delta=1
   126                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   127                           	psect	text107,global,reloc=2,class=CODE,delta=1
   128                           	psect	text108,global,reloc=2,class=CODE,delta=1
   129                           	psect	text109,global,reloc=2,class=CODE,delta=1
   130                           	psect	text110,global,reloc=2,class=CODE,delta=1
   131                           	psect	text111,global,reloc=2,class=CODE,delta=1
   132                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   133                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   134                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   135  0000                     
   136                           ; Version 1.45
   137                           ; Generated 16/11/2017 GMT
   138                           ; 
   139                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   140                           ; All rights reserved.
   141                           ; 
   142                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   143                           ; 
   144                           ; Redistribution and use in source and binary forms, with or without modification, are
   145                           ; permitted provided that the following conditions are met:
   146                           ; 
   147                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   148                           ;        conditions and the following disclaimer.
   149                           ; 
   150                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   151                           ;        of conditions and the following disclaimer in the documentation and/or other
   152                           ;        materials provided with the distribution.
   153                           ; 
   154                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   155                           ;        software without specific prior written permission.
   156                           ; 
   157                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   158                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   159                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   160                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   161                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   162                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   163                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   164                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   165                           ; 
   166                           ; 
   167                           ; Code-generator required, PIC18F25K50 Definitions
   168                           ; 
   169                           ; SFR Addresses
   170  0000                     
   171                           	psect	idataCOMRAM
   172  004D04                     __pidataCOMRAM:
   173                           	opt stack 0
   174                           
   175                           ;initializer for _randx
   176  004D04  0001               	dw	1
   177  004D06  0000               	dw	0
   178                           
   179                           ;initializer for ethernetController_softReset@F5983
   180  004D08  12                 	db	18
   181  004D09  34                 	db	52
   182                           
   183                           	psect	idataBANK2
   184  00498E                     __pidataBANK2:
   185                           	opt stack 0
   186                           
   187                           ;initializer for macToString@F5943
   188  00498E  3F                 	db	63
   189  00498F  3F                 	db	63
   190  004990  3A                 	db	58
   191  004991  3F                 	db	63
   192  004992  3F                 	db	63
   193  004993  3A                 	db	58
   194  004994  3F                 	db	63
   195  004995  3F                 	db	63
   196  004996  3A                 	db	58
   197  004997  3F                 	db	63
   198  004998  3F                 	db	63
   199  004999  3A                 	db	58
   200  00499A  3F                 	db	63
   201  00499B  3F                 	db	63
   202  00499C  3A                 	db	58
   203  00499D  3F                 	db	63
   204  00499E  3F                 	db	63
   205  00499F  00                 	db	0
   206                           
   207                           ;initializer for _sevenSegCharacters
   208  0049A0  3F                 	db	63
   209  0049A1  06                 	db	6
   210  0049A2  5B                 	db	91
   211  0049A3  4F                 	db	79
   212  0049A4  66                 	db	102
   213  0049A5  6D                 	db	109
   214  0049A6  7D                 	db	125
   215  0049A7  07                 	db	7
   216  0049A8  7F                 	db	127
   217  0049A9  6F                 	db	111
   218  0049AA  00                 	db	0
   219  0049AB  40                 	db	64
   220                           
   221                           ;initializer for ipAdressToString@address
   222  0049AC  3F                 	db	63
   223  0049AD  3F                 	db	63
   224  0049AE  3F                 	db	63
   225  0049AF  2E                 	db	46
   226  0049B0  3F                 	db	63
   227  0049B1  3F                 	db	63
   228  0049B2  3F                 	db	63
   229  0049B3  2E                 	db	46
   230  0049B4  3F                 	db	63
   231  0049B5  3F                 	db	63
   232  0049B6  3F                 	db	63
   233  0049B7  2E                 	db	46
   234  0049B8  3F                 	db	63
   235  0049B9  3F                 	db	63
   236  0049BA  3F                 	db	63
   237  0049BB  00                 	db	0
   238                           
   239                           	psect	mediumconst
   240  007AA8                     __pmediumconst:
   241                           	opt stack 0
   242  007AA8  00                 	db	0
   243  007AA9                     ethernetController_getDeviceName@F5995:
   244                           	opt stack 0
   245  007AA9  45                 	db	69
   246  007AAA  4E                 	db	78
   247  007AAB  43                 	db	67
   248  007AAC  34                 	db	52
   249  007AAD  32                 	db	50
   250  007AAE  34                 	db	52
   251  007AAF  4A                 	db	74
   252  007AB0  36                 	db	54
   253  007AB1  30                 	db	48
   254  007AB2  30                 	db	48
   255  007AB3  00                 	db	0
   256  007AB4                     __end_ofethernetController_getDeviceName@F5995:
   257                           	opt stack 0
   258  0000                     _ANSELC	set	3933
   259  0000                     _ANSELA	set	3931
   260  0000                     _ANSELB	set	3932
   261  0000                     _ANSELBbits	set	3932
   262  0000                     _CCPR1	set	4030
   263  0000                     _TXREG1	set	4013
   264  0000                     _SPBRG	set	4015
   265  0000                     _RCSTA1bits	set	4011
   266  0000                     _TXSTA1bits	set	4012
   267  0000                     _PORTA	set	3968
   268  0000                     _TRISA	set	3986
   269  0000                     _TRISC	set	3988
   270  0000                     _PORTC	set	3970
   271  0000                     _PIR1bits	set	3998
   272  0000                     _PORTB	set	3969
   273  0000                     _TRISB	set	3987
   274  0000                     _RCONbits	set	4048
   275  0000                     _PIE1bits	set	3997
   276  0000                     _CCP1CONbits	set	4029
   277  0000                     _T1CONbits	set	4045
   278  0000                     _T0CONbits	set	4053
   279  0000                     _INTCON3bits	set	4080
   280  0000                     _INTCONbits	set	4082
   281  0000                     _OSCCON2bits	set	4050
   282  0000                     _OSCCONbits	set	4051
   283  0000                     _SSP1BUF	set	4041
   284  0000                     _TRISBbits	set	3987
   285  0000                     _SSP1STATbits	set	4039
   286  0000                     _SSP1CON1bits	set	4038
   287  0000                     _PORTBbits	set	3969
   288  0000                     _TRMT	set	32097
   289  0000                     _RCIF	set	31989
   290  0000                     _RCIE	set	31981
   291  0000                     _RCIP	set	31997
   292  0000                     _TXIF	set	31988
   293  007AB4                     STR_89:
   294  007AB4  49                 	db	73	;'I'
   295  007AB5  50                 	db	80	;'P'
   296  007AB6  76                 	db	118	;'v'
   297  007AB7  34                 	db	52	;'4'
   298  007AB8  3A                 	db	58	;':'
   299  007AB9  20                 	db	32
   300  007ABA  46                 	db	70	;'F'
   301  007ABB  6C                 	db	108	;'l'
   302  007ABC  61                 	db	97	;'a'
   303  007ABD  67                 	db	103	;'g'
   304  007ABE  20                 	db	32
   305  007ABF  77                 	db	119	;'w'
   306  007AC0  61                 	db	97	;'a'
   307  007AC1  73                 	db	115	;'s'
   308  007AC2  20                 	db	32
   309  007AC3  72                 	db	114	;'r'
   310  007AC4  65                 	db	101	;'e'
   311  007AC5  73                 	db	115	;'s'
   312  007AC6  65                 	db	101	;'e'
   313  007AC7  74                 	db	116	;'t'
   314  007AC8  20                 	db	32
   315  007AC9  62                 	db	98	;'b'
   316  007ACA  65                 	db	101	;'e'
   317  007ACB  63                 	db	99	;'c'
   318  007ACC  61                 	db	97	;'a'
   319  007ACD  75                 	db	117	;'u'
   320  007ACE  73                 	db	115	;'s'
   321  007ACF  65                 	db	101	;'e'
   322  007AD0  20                 	db	32
   323  007AD1  61                 	db	97	;'a'
   324  007AD2  64                 	db	100	;'d'
   325  007AD3  64                 	db	100	;'d'
   326  007AD4  72                 	db	114	;'r'
   327  007AD5  65                 	db	101	;'e'
   328  007AD6  73                 	db	115	;'s'
   329  007AD7  73                 	db	115	;'s'
   330  007AD8  20                 	db	32
   331  007AD9  63                 	db	99	;'c'
   332  007ADA  68                 	db	104	;'h'
   333  007ADB  61                 	db	97	;'a'
   334  007ADC  6E                 	db	110	;'n'
   335  007ADD  67                 	db	103	;'g'
   336  007ADE  65                 	db	101	;'e'
   337  007ADF  20                 	db	32
   338  007AE0  77                 	db	119	;'w'
   339  007AE1  61                 	db	97	;'a'
   340  007AE2  73                 	db	115	;'s'
   341  007AE3  20                 	db	32
   342  007AE4  75                 	db	117	;'u'
   343  007AE5  6E                 	db	110	;'n'
   344  007AE6  73                 	db	115	;'s'
   345  007AE7  75                 	db	117	;'u'
   346  007AE8  63                 	db	99	;'c'
   347  007AE9  63                 	db	99	;'c'
   348  007AEA  65                 	db	101	;'e'
   349  007AEB  73                 	db	115	;'s'
   350  007AEC  73                 	db	115	;'s'
   351  007AED  66                 	db	102	;'f'
   352  007AEE  75                 	db	117	;'u'
   353  007AEF  6C                 	db	108	;'l'
   354  007AF0  2E                 	db	46
   355  007AF1  0A                 	db	10
   356  007AF2  0D                 	db	13
   357  007AF3  00                 	db	0
   358  007AF4                     STR_95:
   359  007AF4  49                 	db	73	;'I'
   360  007AF5  50                 	db	80	;'P'
   361  007AF6  76                 	db	118	;'v'
   362  007AF7  34                 	db	52	;'4'
   363  007AF8  3A                 	db	58	;':'
   364  007AF9  20                 	db	32
   365  007AFA  46                 	db	70	;'F'
   366  007AFB  6C                 	db	108	;'l'
   367  007AFC  61                 	db	97	;'a'
   368  007AFD  67                 	db	103	;'g'
   369  007AFE  20                 	db	32
   370  007AFF  77                 	db	119	;'w'
   371  007B00  61                 	db	97	;'a'
   372  007B01  73                 	db	115	;'s'
   373  007B02  20                 	db	32
   374  007B03  72                 	db	114	;'r'
   375  007B04  65                 	db	101	;'e'
   376  007B05  73                 	db	115	;'s'
   377  007B06  65                 	db	101	;'e'
   378  007B07  74                 	db	116	;'t'
   379  007B08  20                 	db	32
   380  007B09  62                 	db	98	;'b'
   381  007B0A  65                 	db	101	;'e'
   382  007B0B  63                 	db	99	;'c'
   383  007B0C  61                 	db	97	;'a'
   384  007B0D  75                 	db	117	;'u'
   385  007B0E  73                 	db	115	;'s'
   386  007B0F  65                 	db	101	;'e'
   387  007B10  20                 	db	32
   388  007B11  61                 	db	97	;'a'
   389  007B12  64                 	db	100	;'d'
   390  007B13  64                 	db	100	;'d'
   391  007B14  72                 	db	114	;'r'
   392  007B15  65                 	db	101	;'e'
   393  007B16  73                 	db	115	;'s'
   394  007B17  73                 	db	115	;'s'
   395  007B18  20                 	db	32
   396  007B19  63                 	db	99	;'c'
   397  007B1A  68                 	db	104	;'h'
   398  007B1B  61                 	db	97	;'a'
   399  007B1C  6E                 	db	110	;'n'
   400  007B1D  67                 	db	103	;'g'
   401  007B1E  65                 	db	101	;'e'
   402  007B1F  20                 	db	32
   403  007B20  69                 	db	105	;'i'
   404  007B21  73                 	db	115	;'s'
   405  007B22  20                 	db	32
   406  007B23  63                 	db	99	;'c'
   407  007B24  6F                 	db	111	;'o'
   408  007B25  6D                 	db	109	;'m'
   409  007B26  70                 	db	112	;'p'
   410  007B27  6C                 	db	108	;'l'
   411  007B28  65                 	db	101	;'e'
   412  007B29  74                 	db	116	;'t'
   413  007B2A  65                 	db	101	;'e'
   414  007B2B  2E                 	db	46
   415  007B2C  0A                 	db	10
   416  007B2D  0D                 	db	13
   417  007B2E  00                 	db	0
   418  007B2F                     STR_47:
   419  007B2F  45                 	db	69	;'E'
   420  007B30  74                 	db	116	;'t'
   421  007B31  68                 	db	104	;'h'
   422  007B32  65                 	db	101	;'e'
   423  007B33  72                 	db	114	;'r'
   424  007B34  6E                 	db	110	;'n'
   425  007B35  65                 	db	101	;'e'
   426  007B36  74                 	db	116	;'t'
   427  007B37  20                 	db	32
   428  007B38  63                 	db	99	;'c'
   429  007B39  6F                 	db	111	;'o'
   430  007B3A  6E                 	db	110	;'n'
   431  007B3B  74                 	db	116	;'t'
   432  007B3C  72                 	db	114	;'r'
   433  007B3D  6F                 	db	111	;'o'
   434  007B3E  6C                 	db	108	;'l'
   435  007B3F  6C                 	db	108	;'l'
   436  007B40  65                 	db	101	;'e'
   437  007B41  72                 	db	114	;'r'
   438  007B42  20                 	db	32
   439  007B43  68                 	db	104	;'h'
   440  007B44  61                 	db	97	;'a'
   441  007B45  73                 	db	115	;'s'
   442  007B46  20                 	db	32
   443  007B47  72                 	db	114	;'r'
   444  007B48  65                 	db	101	;'e'
   445  007B49  74                 	db	116	;'t'
   446  007B4A  75                 	db	117	;'u'
   447  007B4B  72                 	db	114	;'r'
   448  007B4C  6E                 	db	110	;'n'
   449  007B4D  65                 	db	101	;'e'
   450  007B4E  64                 	db	100	;'d'
   451  007B4F  20                 	db	32
   452  007B50  61                 	db	97	;'a'
   453  007B51  6E                 	db	110	;'n'
   454  007B52  20                 	db	32
   455  007B53  75                 	db	117	;'u'
   456  007B54  6E                 	db	110	;'n'
   457  007B55  6B                 	db	107	;'k'
   458  007B56  6E                 	db	110	;'n'
   459  007B57  6F                 	db	111	;'o'
   460  007B58  77                 	db	119	;'w'
   461  007B59  6E                 	db	110	;'n'
   462  007B5A  20                 	db	32
   463  007B5B  64                 	db	100	;'d'
   464  007B5C  65                 	db	101	;'e'
   465  007B5D  76                 	db	118	;'v'
   466  007B5E  69                 	db	105	;'i'
   467  007B5F  63                 	db	99	;'c'
   468  007B60  65                 	db	101	;'e'
   469  007B61  20                 	db	32
   470  007B62  49                 	db	73	;'I'
   471  007B63  44                 	db	68	;'D'
   472  007B64  2E                 	db	46
   473  007B65  00                 	db	0
   474  007B66                     STR_22:
   475  007B66  2D                 	db	45
   476  007B67  2D                 	db	45
   477  007B68  2D                 	db	45
   478  007B69  2D                 	db	45
   479  007B6A  2D                 	db	45
   480  007B6B  2D                 	db	45
   481  007B6C  2D                 	db	45
   482  007B6D  2D                 	db	45
   483  007B6E  2D                 	db	45
   484  007B6F  2D                 	db	45
   485  007B70  2D                 	db	45
   486  007B71  2D                 	db	45
   487  007B72  2D                 	db	45
   488  007B73  2D                 	db	45
   489  007B74  2D                 	db	45
   490  007B75  2D                 	db	45
   491  007B76  2D                 	db	45
   492  007B77  2D                 	db	45
   493  007B78  2D                 	db	45
   494  007B79  2D                 	db	45
   495  007B7A  2D                 	db	45
   496  007B7B  2D                 	db	45
   497  007B7C  2D                 	db	45
   498  007B7D  2D                 	db	45
   499  007B7E  2D                 	db	45
   500  007B7F  2D                 	db	45
   501  007B80  2D                 	db	45
   502  007B81  2D                 	db	45
   503  007B82  2D                 	db	45
   504  007B83  2D                 	db	45
   505  007B84  2D                 	db	45
   506  007B85  2D                 	db	45
   507  007B86  2D                 	db	45
   508  007B87  2D                 	db	45
   509  007B88  2D                 	db	45
   510  007B89  2D                 	db	45
   511  007B8A  2D                 	db	45
   512  007B8B  2D                 	db	45
   513  007B8C  2D                 	db	45
   514  007B8D  2D                 	db	45
   515  007B8E  2D                 	db	45
   516  007B8F  2D                 	db	45
   517  007B90  2D                 	db	45
   518  007B91  2D                 	db	45
   519  007B92  2D                 	db	45
   520  007B93  2D                 	db	45
   521  007B94  2D                 	db	45
   522  007B95  2D                 	db	45
   523  007B96  0A                 	db	10
   524  007B97  0D                 	db	13
   525  007B98  00                 	db	0
   526  007B99                     STR_23:
   527  007B99  07                 	db	7
   528  007B9A  2A                 	db	42
   529  007B9B  2A                 	db	42
   530  007B9C  2A                 	db	42
   531  007B9D  20                 	db	32
   532  007B9E  43                 	db	67	;'C'
   533  007B9F  52                 	db	82	;'R'
   534  007BA0  49                 	db	73	;'I'
   535  007BA1  54                 	db	84	;'T'
   536  007BA2  49                 	db	73	;'I'
   537  007BA3  43                 	db	67	;'C'
   538  007BA4  41                 	db	65	;'A'
   539  007BA5  4C                 	db	76	;'L'
   540  007BA6  20                 	db	32
   541  007BA7  45                 	db	69	;'E'
   542  007BA8  52                 	db	82	;'R'
   543  007BA9  52                 	db	82	;'R'
   544  007BAA  4F                 	db	79	;'O'
   545  007BAB  52                 	db	82	;'R'
   546  007BAC  3A                 	db	58	;':'
   547  007BAD  20                 	db	32
   548  007BAE  57                 	db	87	;'W'
   549  007BAF  41                 	db	65	;'A'
   550  007BB0  54                 	db	84	;'T'
   551  007BB1  43                 	db	67	;'C'
   552  007BB2  48                 	db	72	;'H'
   553  007BB3  44                 	db	68	;'D'
   554  007BB4  4F                 	db	79	;'O'
   555  007BB5  47                 	db	71	;'G'
   556  007BB6  20                 	db	32
   557  007BB7  43                 	db	67	;'C'
   558  007BB8  41                 	db	65	;'A'
   559  007BB9  55                 	db	85	;'U'
   560  007BBA  53                 	db	83	;'S'
   561  007BBB  45                 	db	69	;'E'
   562  007BBC  44                 	db	68	;'D'
   563  007BBD  20                 	db	32
   564  007BBE  52                 	db	82	;'R'
   565  007BBF  45                 	db	69	;'E'
   566  007BC0  53                 	db	83	;'S'
   567  007BC1  45                 	db	69	;'E'
   568  007BC2  54                 	db	84	;'T'
   569  007BC3  20                 	db	32
   570  007BC4  2A                 	db	42
   571  007BC5  2A                 	db	42
   572  007BC6  2A                 	db	42
   573  007BC7  0A                 	db	10
   574  007BC8  0D                 	db	13
   575  007BC9  00                 	db	0
   576  007BCA                     STR_90:
   577  007BCA  49                 	db	73	;'I'
   578  007BCB  50                 	db	80	;'P'
   579  007BCC  76                 	db	118	;'v'
   580  007BCD  34                 	db	52	;'4'
   581  007BCE  3A                 	db	58	;':'
   582  007BCF  20                 	db	32
   583  007BD0  41                 	db	65	;'A'
   584  007BD1  52                 	db	82	;'R'
   585  007BD2  50                 	db	80	;'P'
   586  007BD3  20                 	db	32
   587  007BD4  73                 	db	115	;'s'
   588  007BD5  65                 	db	101	;'e'
   589  007BD6  6E                 	db	110	;'n'
   590  007BD7  74                 	db	116	;'t'
   591  007BD8  20                 	db	32
   592  007BD9  6D                 	db	109	;'m'
   593  007BDA  61                 	db	97	;'a'
   594  007BDB  78                 	db	120	;'x'
   595  007BDC  69                 	db	105	;'i'
   596  007BDD  6D                 	db	109	;'m'
   597  007BDE  75                 	db	117	;'u'
   598  007BDF  6D                 	db	109	;'m'
   599  007BE0  20                 	db	32
   600  007BE1  6E                 	db	110	;'n'
   601  007BE2  75                 	db	117	;'u'
   602  007BE3  6D                 	db	109	;'m'
   603  007BE4  62                 	db	98	;'b'
   604  007BE5  65                 	db	101	;'e'
   605  007BE6  72                 	db	114	;'r'
   606  007BE7  20                 	db	32
   607  007BE8  6F                 	db	111	;'o'
   608  007BE9  66                 	db	102	;'f'
   609  007BEA  20                 	db	32
   610  007BEB  72                 	db	114	;'r'
   611  007BEC  65                 	db	101	;'e'
   612  007BED  71                 	db	113	;'q'
   613  007BEE  75                 	db	117	;'u'
   614  007BEF  65                 	db	101	;'e'
   615  007BF0  73                 	db	115	;'s'
   616  007BF1  74                 	db	116	;'t'
   617  007BF2  73                 	db	115	;'s'
   618  007BF3  2E                 	db	46
   619  007BF4  0A                 	db	10
   620  007BF5  0D                 	db	13
   621  007BF6  00                 	db	0
   622  007BF7                     STR_86:
   623  007BF7  49                 	db	73	;'I'
   624  007BF8  50                 	db	80	;'P'
   625  007BF9  76                 	db	118	;'v'
   626  007BFA  34                 	db	52	;'4'
   627  007BFB  3A                 	db	58	;':'
   628  007BFC  20                 	db	32
   629  007BFD  52                 	db	82	;'R'
   630  007BFE  65                 	db	101	;'e'
   631  007BFF  71                 	db	113	;'q'
   632  007C00  75                 	db	117	;'u'
   633  007C01  65                 	db	101	;'e'
   634  007C02  73                 	db	115	;'s'
   635  007C03  74                 	db	116	;'t'
   636  007C04  20                 	db	32
   637  007C05  66                 	db	102	;'f'
   638  007C06  6F                 	db	111	;'o'
   639  007C07  72                 	db	114	;'r'
   640  007C08  20                 	db	32
   641  007C09  6E                 	db	110	;'n'
   642  007C0A  65                 	db	101	;'e'
   643  007C0B  77                 	db	119	;'w'
   644  007C0C  20                 	db	32
   645  007C0D  49                 	db	73	;'I'
   646  007C0E  50                 	db	80	;'P'
   647  007C0F  20                 	db	32
   648  007C10  73                 	db	115	;'s'
   649  007C11  6F                 	db	111	;'o'
   650  007C12  75                 	db	117	;'u'
   651  007C13  72                 	db	114	;'r'
   652  007C14  63                 	db	99	;'c'
   653  007C15  65                 	db	101	;'e'
   654  007C16  20                 	db	32
   655  007C17  61                 	db	97	;'a'
   656  007C18  64                 	db	100	;'d'
   657  007C19  64                 	db	100	;'d'
   658  007C1A  72                 	db	114	;'r'
   659  007C1B  65                 	db	101	;'e'
   660  007C1C  73                 	db	115	;'s'
   661  007C1D  73                 	db	115	;'s'
   662  007C1E  20                 	db	32
   663  007C1F  28                 	db	40
   664  007C20  00                 	db	0
   665  007C21                     STR_96:
   666  007C21  49                 	db	73	;'I'
   667  007C22  50                 	db	80	;'P'
   668  007C23  76                 	db	118	;'v'
   669  007C24  34                 	db	52	;'4'
   670  007C25  3A                 	db	58	;':'
   671  007C26  20                 	db	32
   672  007C27  41                 	db	65	;'A'
   673  007C28  52                 	db	82	;'R'
   674  007C29  50                 	db	80	;'P'
   675  007C2A  20                 	db	32
   676  007C2B  72                 	db	114	;'r'
   677  007C2C  65                 	db	101	;'e'
   678  007C2D  74                 	db	116	;'t'
   679  007C2E  75                 	db	117	;'u'
   680  007C2F  72                 	db	114	;'r'
   681  007C30  6E                 	db	110	;'n'
   682  007C31  65                 	db	101	;'e'
   683  007C32  64                 	db	100	;'d'
   684  007C33  20                 	db	32
   685  007C34  61                 	db	97	;'a'
   686  007C35  6E                 	db	110	;'n'
   687  007C36  20                 	db	32
   688  007C37  75                 	db	117	;'u'
   689  007C38  6E                 	db	110	;'n'
   690  007C39  6B                 	db	107	;'k'
   691  007C3A  6E                 	db	110	;'n'
   692  007C3B  6F                 	db	111	;'o'
   693  007C3C  77                 	db	119	;'w'
   694  007C3D  6E                 	db	110	;'n'
   695  007C3E  20                 	db	32
   696  007C3F  65                 	db	101	;'e'
   697  007C40  72                 	db	114	;'r'
   698  007C41  72                 	db	114	;'r'
   699  007C42  6F                 	db	111	;'o'
   700  007C43  72                 	db	114	;'r'
   701  007C44  2E                 	db	46
   702  007C45  0A                 	db	10
   703  007C46  0D                 	db	13
   704  007C47  00                 	db	0
   705  007C48                     STR_59:
   706  007C48  5B                 	db	91	;'['
   707  007C49  49                 	db	73	;'I'
   708  007C4A  6E                 	db	110	;'n'
   709  007C4B  76                 	db	118	;'v'
   710  007C4C  61                 	db	97	;'a'
   711  007C4D  6C                 	db	108	;'l'
   712  007C4E  69                 	db	105	;'i'
   713  007C4F  64                 	db	100	;'d'
   714  007C50  20                 	db	32
   715  007C51  41                 	db	65	;'A'
   716  007C52  52                 	db	82	;'R'
   717  007C53  50                 	db	80	;'P'
   718  007C54  20                 	db	32
   719  007C55  4D                 	db	77	;'M'
   720  007C56  65                 	db	101	;'e'
   721  007C57  73                 	db	115	;'s'
   722  007C58  73                 	db	115	;'s'
   723  007C59  61                 	db	97	;'a'
   724  007C5A  67                 	db	103	;'g'
   725  007C5B  65                 	db	101	;'e'
   726  007C5C  20                 	db	32
   727  007C5D  77                 	db	119	;'w'
   728  007C5E  61                 	db	97	;'a'
   729  007C5F  73                 	db	115	;'s'
   730  007C60  20                 	db	32
   731  007C61  64                 	db	100	;'d'
   732  007C62  69                 	db	105	;'i'
   733  007C63  73                 	db	115	;'s'
   734  007C64  63                 	db	99	;'c'
   735  007C65  61                 	db	97	;'a'
   736  007C66  72                 	db	114	;'r'
   737  007C67  64                 	db	100	;'d'
   738  007C68  65                 	db	101	;'e'
   739  007C69  64                 	db	100	;'d'
   740  007C6A  2E                 	db	46
   741  007C6B  5D                 	db	93	;']'
   742  007C6C  0D                 	db	13
   743  007C6D  0A                 	db	10
   744  007C6E  00                 	db	0
   745  007C6F                     STR_93:
   746  007C6F  20                 	db	32
   747  007C70  77                 	db	119	;'w'
   748  007C71  61                 	db	97	;'a'
   749  007C72  73                 	db	115	;'s'
   750  007C73  20                 	db	32
   751  007C74  73                 	db	115	;'s'
   752  007C75  65                 	db	101	;'e'
   753  007C76  74                 	db	116	;'t'
   754  007C77  20                 	db	32
   755  007C78  74                 	db	116	;'t'
   756  007C79  6F                 	db	111	;'o'
   757  007C7A  20                 	db	32
   758  007C7B  74                 	db	116	;'t'
   759  007C7C  68                 	db	104	;'h'
   760  007C7D  65                 	db	101	;'e'
   761  007C7E  20                 	db	32
   762  007C7F  70                 	db	112	;'p'
   763  007C80  72                 	db	114	;'r'
   764  007C81  65                 	db	101	;'e'
   765  007C82  6C                 	db	108	;'l'
   766  007C83  69                 	db	105	;'i'
   767  007C84  6D                 	db	109	;'m'
   768  007C85  69                 	db	105	;'i'
   769  007C86  6E                 	db	110	;'n'
   770  007C87  61                 	db	97	;'a'
   771  007C88  72                 	db	114	;'r'
   772  007C89  79                 	db	121	;'y'
   773  007C8A  20                 	db	32
   774  007C8B  61                 	db	97	;'a'
   775  007C8C  64                 	db	100	;'d'
   776  007C8D  64                 	db	100	;'d'
   777  007C8E  72                 	db	114	;'r'
   778  007C8F  65                 	db	101	;'e'
   779  007C90  73                 	db	115	;'s'
   780  007C91  73                 	db	115	;'s'
   781  007C92  20                 	db	32
   782  007C93  28                 	db	40
   783  007C94  00                 	db	0
   784  007C95                     STR_46:
   785  007C95  45                 	db	69	;'E'
   786  007C96  74                 	db	116	;'t'
   787  007C97  68                 	db	104	;'h'
   788  007C98  65                 	db	101	;'e'
   789  007C99  72                 	db	114	;'r'
   790  007C9A  6E                 	db	110	;'n'
   791  007C9B  65                 	db	101	;'e'
   792  007C9C  74                 	db	116	;'t'
   793  007C9D  20                 	db	32
   794  007C9E  63                 	db	99	;'c'
   795  007C9F  6F                 	db	111	;'o'
   796  007CA0  6E                 	db	110	;'n'
   797  007CA1  74                 	db	116	;'t'
   798  007CA2  72                 	db	114	;'r'
   799  007CA3  6F                 	db	111	;'o'
   800  007CA4  6C                 	db	108	;'l'
   801  007CA5  6C                 	db	108	;'l'
   802  007CA6  65                 	db	101	;'e'
   803  007CA7  72                 	db	114	;'r'
   804  007CA8  20                 	db	32
   805  007CA9  69                 	db	105	;'i'
   806  007CAA  73                 	db	115	;'s'
   807  007CAB  20                 	db	32
   808  007CAC  75                 	db	117	;'u'
   809  007CAD  6E                 	db	110	;'n'
   810  007CAE  72                 	db	114	;'r'
   811  007CAF  65                 	db	101	;'e'
   812  007CB0  73                 	db	115	;'s'
   813  007CB1  70                 	db	112	;'p'
   814  007CB2  6F                 	db	111	;'o'
   815  007CB3  6E                 	db	110	;'n'
   816  007CB4  73                 	db	115	;'s'
   817  007CB5  69                 	db	105	;'i'
   818  007CB6  76                 	db	118	;'v'
   819  007CB7  65                 	db	101	;'e'
   820  007CB8  2E                 	db	46
   821  007CB9  00                 	db	0
   822  007CBA                     STR_70:
   823  007CBA  41                 	db	65	;'A'
   824  007CBB  52                 	db	82	;'R'
   825  007CBC  50                 	db	80	;'P'
   826  007CBD  3A                 	db	58	;':'
   827  007CBE  20                 	db	32
   828  007CBF  49                 	db	73	;'I'
   829  007CC0  50                 	db	80	;'P'
   830  007CC1  76                 	db	118	;'v'
   831  007CC2  34                 	db	52	;'4'
   832  007CC3  20                 	db	32
   833  007CC4  61                 	db	97	;'a'
   834  007CC5  64                 	db	100	;'d'
   835  007CC6  64                 	db	100	;'d'
   836  007CC7  72                 	db	114	;'r'
   837  007CC8  65                 	db	101	;'e'
   838  007CC9  73                 	db	115	;'s'
   839  007CCA  73                 	db	115	;'s'
   840  007CCB  20                 	db	32
   841  007CCC  61                 	db	97	;'a'
   842  007CCD  6C                 	db	108	;'l'
   843  007CCE  72                 	db	114	;'r'
   844  007CCF  65                 	db	101	;'e'
   845  007CD0  61                 	db	97	;'a'
   846  007CD1  64                 	db	100	;'d'
   847  007CD2  79                 	db	121	;'y'
   848  007CD3  20                 	db	32
   849  007CD4  69                 	db	105	;'i'
   850  007CD5  6E                 	db	110	;'n'
   851  007CD6  20                 	db	32
   852  007CD7  75                 	db	117	;'u'
   853  007CD8  73                 	db	115	;'s'
   854  007CD9  65                 	db	101	;'e'
   855  007CDA  21                 	db	33
   856  007CDB  0A                 	db	10
   857  007CDC  0D                 	db	13
   858  007CDD  00                 	db	0
   859  007CDE                     STR_88:
   860  007CDE  49                 	db	73	;'I'
   861  007CDF  50                 	db	80	;'P'
   862  007CE0  76                 	db	118	;'v'
   863  007CE1  34                 	db	52	;'4'
   864  007CE2  3A                 	db	58	;':'
   865  007CE3  20                 	db	32
   866  007CE4  41                 	db	65	;'A'
   867  007CE5  64                 	db	100	;'d'
   868  007CE6  64                 	db	100	;'d'
   869  007CE7  72                 	db	114	;'r'
   870  007CE8  65                 	db	101	;'e'
   871  007CE9  73                 	db	115	;'s'
   872  007CEA  73                 	db	115	;'s'
   873  007CEB  20                 	db	32
   874  007CEC  69                 	db	105	;'i'
   875  007CED  73                 	db	115	;'s'
   876  007CEE  20                 	db	32
   877  007CEF  61                 	db	97	;'a'
   878  007CF0  6C                 	db	108	;'l'
   879  007CF1  72                 	db	114	;'r'
   880  007CF2  65                 	db	101	;'e'
   881  007CF3  61                 	db	97	;'a'
   882  007CF4  64                 	db	100	;'d'
   883  007CF5  79                 	db	121	;'y'
   884  007CF6  20                 	db	32
   885  007CF7  69                 	db	105	;'i'
   886  007CF8  6E                 	db	110	;'n'
   887  007CF9  20                 	db	32
   888  007CFA  75                 	db	117	;'u'
   889  007CFB  73                 	db	115	;'s'
   890  007CFC  65                 	db	101	;'e'
   891  007CFD  2E                 	db	46
   892  007CFE  0A                 	db	10
   893  007CFF  0D                 	db	13
   894  007D00  00                 	db	0
   895  007D01                     STR_48:
   896  007D01  49                 	db	73	;'I'
   897  007D02  50                 	db	80	;'P'
   898  007D03  20                 	db	32
   899  007D04  61                 	db	97	;'a'
   900  007D05  64                 	db	100	;'d'
   901  007D06  64                 	db	100	;'d'
   902  007D07  72                 	db	114	;'r'
   903  007D08  65                 	db	101	;'e'
   904  007D09  73                 	db	115	;'s'
   905  007D0A  73                 	db	115	;'s'
   906  007D0B  20                 	db	32
   907  007D0C  63                 	db	99	;'c'
   908  007D0D  6F                 	db	111	;'o'
   909  007D0E  75                 	db	117	;'u'
   910  007D0F  6C                 	db	108	;'l'
   911  007D10  64                 	db	100	;'d'
   912  007D11  20                 	db	32
   913  007D12  6E                 	db	110	;'n'
   914  007D13  6F                 	db	111	;'o'
   915  007D14  74                 	db	116	;'t'
   916  007D15  20                 	db	32
   917  007D16  62                 	db	98	;'b'
   918  007D17  65                 	db	101	;'e'
   919  007D18  20                 	db	32
   920  007D19  72                 	db	114	;'r'
   921  007D1A  65                 	db	101	;'e'
   922  007D1B  73                 	db	115	;'s'
   923  007D1C  6F                 	db	111	;'o'
   924  007D1D  6C                 	db	108	;'l'
   925  007D1E  76                 	db	118	;'v'
   926  007D1F  65                 	db	101	;'e'
   927  007D20  64                 	db	100	;'d'
   928  007D21  2E                 	db	46
   929  007D22  00                 	db	0
   930  007D23                     STR_72:
   931  007D23  41                 	db	65	;'A'
   932  007D24  52                 	db	82	;'R'
   933  007D25  50                 	db	80	;'P'
   934  007D26  3A                 	db	58	;':'
   935  007D27  20                 	db	32
   936  007D28  41                 	db	65	;'A'
   937  007D29  6E                 	db	110	;'n'
   938  007D2A  20                 	db	32
   939  007D2B  75                 	db	117	;'u'
   940  007D2C  6E                 	db	110	;'n'
   941  007D2D  6B                 	db	107	;'k'
   942  007D2E  6E                 	db	110	;'n'
   943  007D2F  6F                 	db	111	;'o'
   944  007D30  77                 	db	119	;'w'
   945  007D31  6E                 	db	110	;'n'
   946  007D32  20                 	db	32
   947  007D33  65                 	db	101	;'e'
   948  007D34  72                 	db	114	;'r'
   949  007D35  72                 	db	114	;'r'
   950  007D36  6F                 	db	111	;'o'
   951  007D37  72                 	db	114	;'r'
   952  007D38  20                 	db	32
   953  007D39  6F                 	db	111	;'o'
   954  007D3A  63                 	db	99	;'c'
   955  007D3B  63                 	db	99	;'c'
   956  007D3C  75                 	db	117	;'u'
   957  007D3D  72                 	db	114	;'r'
   958  007D3E  65                 	db	101	;'e'
   959  007D3F  64                 	db	100	;'d'
   960  007D40  2E                 	db	46
   961  007D41  0A                 	db	10
   962  007D42  0D                 	db	13
   963  007D43  00                 	db	0
   964  007D44                     STR_73:
   965  007D44  41                 	db	65	;'A'
   966  007D45  52                 	db	82	;'R'
   967  007D46  50                 	db	80	;'P'
   968  007D47  3A                 	db	58	;':'
   969  007D48  20                 	db	32
   970  007D49  41                 	db	65	;'A'
   971  007D4A  6C                 	db	108	;'l'
   972  007D4B  6C                 	db	108	;'l'
   973  007D4C  20                 	db	32
   974  007D4D  41                 	db	65	;'A'
   975  007D4E  6E                 	db	110	;'n'
   976  007D4F  6E                 	db	110	;'n'
   977  007D50  6F                 	db	111	;'o'
   978  007D51  75                 	db	117	;'u'
   979  007D52  6E                 	db	110	;'n'
   980  007D53  63                 	db	99	;'c'
   981  007D54  65                 	db	101	;'e'
   982  007D55  6D                 	db	109	;'m'
   983  007D56  65                 	db	101	;'e'
   984  007D57  6E                 	db	110	;'n'
   985  007D58  74                 	db	116	;'t'
   986  007D59  73                 	db	115	;'s'
   987  007D5A  20                 	db	32
   988  007D5B  73                 	db	115	;'s'
   989  007D5C  65                 	db	101	;'e'
   990  007D5D  6E                 	db	110	;'n'
   991  007D5E  74                 	db	116	;'t'
   992  007D5F  2E                 	db	46
   993  007D60  0A                 	db	10
   994  007D61  0D                 	db	13
   995  007D62  00                 	db	0
   996  007D63                     STR_91:
   997  007D63  49                 	db	73	;'I'
   998  007D64  50                 	db	80	;'P'
   999  007D65  76                 	db	118	;'v'
  1000  007D66  34                 	db	52	;'4'
  1001  007D67  3A                 	db	58	;':'
  1002  007D68  20                 	db	32
  1003  007D69  41                 	db	65	;'A'
  1004  007D6A  52                 	db	82	;'R'
  1005  007D6B  50                 	db	80	;'P'
  1006  007D6C  20                 	db	32
  1007  007D6D  72                 	db	114	;'r'
  1008  007D6E  65                 	db	101	;'e'
  1009  007D6F  74                 	db	116	;'t'
  1010  007D70  75                 	db	117	;'u'
  1011  007D71  72                 	db	114	;'r'
  1012  007D72  6E                 	db	110	;'n'
  1013  007D73  65                 	db	101	;'e'
  1014  007D74  64                 	db	100	;'d'
  1015  007D75  20                 	db	32
  1016  007D76  73                 	db	115	;'s'
  1017  007D77  75                 	db	117	;'u'
  1018  007D78  63                 	db	99	;'c'
  1019  007D79  63                 	db	99	;'c'
  1020  007D7A  65                 	db	101	;'e'
  1021  007D7B  73                 	db	115	;'s'
  1022  007D7C  73                 	db	115	;'s'
  1023  007D7D  2E                 	db	46
  1024  007D7E  0A                 	db	10
  1025  007D7F  0D                 	db	13
  1026  007D80  00                 	db	0
  1027  007D81                     STR_42:
  1028  007D81  20                 	db	32
  1029  007D82  45                 	db	69	;'E'
  1030  007D83  54                 	db	84	;'T'
  1031  007D84  48                 	db	72	;'H'
  1032  007D85  45                 	db	69	;'E'
  1033  007D86  52                 	db	82	;'R'
  1034  007D87  4E                 	db	78	;'N'
  1035  007D88  45                 	db	69	;'E'
  1036  007D89  54                 	db	84	;'T'
  1037  007D8A  20                 	db	32
  1038  007D8B  43                 	db	67	;'C'
  1039  007D8C  4F                 	db	79	;'O'
  1040  007D8D  4E                 	db	78	;'N'
  1041  007D8E  54                 	db	84	;'T'
  1042  007D8F  52                 	db	82	;'R'
  1043  007D90  4F                 	db	79	;'O'
  1044  007D91  4C                 	db	76	;'L'
  1045  007D92  4C                 	db	76	;'L'
  1046  007D93  45                 	db	69	;'E'
  1047  007D94  52                 	db	82	;'R'
  1048  007D95  20                 	db	32
  1049  007D96  4D                 	db	77	;'M'
  1050  007D97  4F                 	db	79	;'O'
  1051  007D98  44                 	db	68	;'D'
  1052  007D99  55                 	db	85	;'U'
  1053  007D9A  4C                 	db	76	;'L'
  1054  007D9B  45                 	db	69	;'E'
  1055  007D9C  3A                 	db	58	;':'
  1056  007D9D  20                 	db	32
  1057  007D9E  00                 	db	0
  1058  007D9F                     STR_49:
  1059  007D9F  41                 	db	65	;'A'
  1060  007DA0  6E                 	db	110	;'n'
  1061  007DA1  20                 	db	32
  1062  007DA2  75                 	db	117	;'u'
  1063  007DA3  6E                 	db	110	;'n'
  1064  007DA4  6B                 	db	107	;'k'
  1065  007DA5  6E                 	db	110	;'n'
  1066  007DA6  6F                 	db	111	;'o'
  1067  007DA7  77                 	db	119	;'w'
  1068  007DA8  6E                 	db	110	;'n'
  1069  007DA9  20                 	db	32
  1070  007DAA  65                 	db	101	;'e'
  1071  007DAB  72                 	db	114	;'r'
  1072  007DAC  72                 	db	114	;'r'
  1073  007DAD  6F                 	db	111	;'o'
  1074  007DAE  72                 	db	114	;'r'
  1075  007DAF  20                 	db	32
  1076  007DB0  68                 	db	104	;'h'
  1077  007DB1  61                 	db	97	;'a'
  1078  007DB2  73                 	db	115	;'s'
  1079  007DB3  20                 	db	32
  1080  007DB4  6F                 	db	111	;'o'
  1081  007DB5  63                 	db	99	;'c'
  1082  007DB6  63                 	db	99	;'c'
  1083  007DB7  75                 	db	117	;'u'
  1084  007DB8  72                 	db	114	;'r'
  1085  007DB9  65                 	db	101	;'e'
  1086  007DBA  64                 	db	100	;'d'
  1087  007DBB  2E                 	db	46
  1088  007DBC  00                 	db	0
  1089  007DBD                     STR_38:
  1090  007DBD  63                 	db	99	;'c'
  1091  007DBE  6F                 	db	111	;'o'
  1092  007DBF  6E                 	db	110	;'n'
  1093  007DC0  6E                 	db	110	;'n'
  1094  007DC1  65                 	db	101	;'e'
  1095  007DC2  63                 	db	99	;'c'
  1096  007DC3  74                 	db	116	;'t'
  1097  007DC4  69                 	db	105	;'i'
  1098  007DC5  6F                 	db	111	;'o'
  1099  007DC6  6E                 	db	110	;'n'
  1100  007DC7  20                 	db	32
  1101  007DC8  69                 	db	105	;'i'
  1102  007DC9  73                 	db	115	;'s'
  1103  007DCA  20                 	db	32
  1104  007DCB  48                 	db	72	;'H'
  1105  007DCC  61                 	db	97	;'a'
  1106  007DCD  6C                 	db	108	;'l'
  1107  007DCE  66                 	db	102	;'f'
  1108  007DCF  20                 	db	32
  1109  007DD0  44                 	db	68	;'D'
  1110  007DD1  75                 	db	117	;'u'
  1111  007DD2  70                 	db	112	;'p'
  1112  007DD3  6C                 	db	108	;'l'
  1113  007DD4  65                 	db	101	;'e'
  1114  007DD5  78                 	db	120	;'x'
  1115  007DD6  2E                 	db	46
  1116  007DD7  0A                 	db	10
  1117  007DD8  0D                 	db	13
  1118  007DD9  00                 	db	0
  1119  007DDA                     STR_39:
  1120  007DDA  63                 	db	99	;'c'
  1121  007DDB  6F                 	db	111	;'o'
  1122  007DDC  6E                 	db	110	;'n'
  1123  007DDD  6E                 	db	110	;'n'
  1124  007DDE  65                 	db	101	;'e'
  1125  007DDF  63                 	db	99	;'c'
  1126  007DE0  74                 	db	116	;'t'
  1127  007DE1  69                 	db	105	;'i'
  1128  007DE2  6F                 	db	111	;'o'
  1129  007DE3  6E                 	db	110	;'n'
  1130  007DE4  20                 	db	32
  1131  007DE5  69                 	db	105	;'i'
  1132  007DE6  73                 	db	115	;'s'
  1133  007DE7  20                 	db	32
  1134  007DE8  46                 	db	70	;'F'
  1135  007DE9  75                 	db	117	;'u'
  1136  007DEA  6C                 	db	108	;'l'
  1137  007DEB  6C                 	db	108	;'l'
  1138  007DEC  20                 	db	32
  1139  007DED  44                 	db	68	;'D'
  1140  007DEE  75                 	db	117	;'u'
  1141  007DEF  70                 	db	112	;'p'
  1142  007DF0  6C                 	db	108	;'l'
  1143  007DF1  65                 	db	101	;'e'
  1144  007DF2  78                 	db	120	;'x'
  1145  007DF3  2E                 	db	46
  1146  007DF4  0A                 	db	10
  1147  007DF5  0D                 	db	13
  1148  007DF6  00                 	db	0
  1149  007DF7                     STR_71:
  1150  007DF7  41                 	db	65	;'A'
  1151  007DF8  52                 	db	82	;'R'
  1152  007DF9  50                 	db	80	;'P'
  1153  007DFA  3A                 	db	58	;':'
  1154  007DFB  20                 	db	32
  1155  007DFC  4E                 	db	78	;'N'
  1156  007DFD  6F                 	db	111	;'o'
  1157  007DFE  62                 	db	98	;'b'
  1158  007DFF  6F                 	db	111	;'o'
  1159  007E00  64                 	db	100	;'d'
  1160  007E01  79                 	db	121	;'y'
  1161  007E02  20                 	db	32
  1162  007E03  61                 	db	97	;'a'
  1163  007E04  6E                 	db	110	;'n'
  1164  007E05  73                 	db	115	;'s'
  1165  007E06  77                 	db	119	;'w'
  1166  007E07  65                 	db	101	;'e'
  1167  007E08  72                 	db	114	;'r'
  1168  007E09  65                 	db	101	;'e'
  1169  007E0A  64                 	db	100	;'d'
  1170  007E0B  2E                 	db	46
  1171  007E0C  0A                 	db	10
  1172  007E0D  0D                 	db	13
  1173  007E0E  00                 	db	0
  1174  007E0F                     STR_25:
  1175  007E0F  46                 	db	70	;'F'
  1176  007E10  49                 	db	73	;'I'
  1177  007E11  52                 	db	82	;'R'
  1178  007E12  4D                 	db	77	;'M'
  1179  007E13  57                 	db	87	;'W'
  1180  007E14  41                 	db	65	;'A'
  1181  007E15  52                 	db	82	;'R'
  1182  007E16  45                 	db	69	;'E'
  1183  007E17  20                 	db	32
  1184  007E18  42                 	db	66	;'B'
  1185  007E19  55                 	db	85	;'U'
  1186  007E1A  49                 	db	73	;'I'
  1187  007E1B  4C                 	db	76	;'L'
  1188  007E1C  44                 	db	68	;'D'
  1189  007E1D  20                 	db	32
  1190  007E1E  44                 	db	68	;'D'
  1191  007E1F  41                 	db	65	;'A'
  1192  007E20  54                 	db	84	;'T'
  1193  007E21  45                 	db	69	;'E'
  1194  007E22  20                 	db	32
  1195  007E23  49                 	db	73	;'I'
  1196  007E24  53                 	db	83	;'S'
  1197  007E25  20                 	db	32
  1198  007E26  00                 	db	0
  1199  007E27                     STR_92:
  1200  007E27  49                 	db	73	;'I'
  1201  007E28  50                 	db	80	;'P'
  1202  007E29  76                 	db	118	;'v'
  1203  007E2A  34                 	db	52	;'4'
  1204  007E2B  3A                 	db	58	;':'
  1205  007E2C  20                 	db	32
  1206  007E2D  4F                 	db	79	;'O'
  1207  007E2E  6C                 	db	108	;'l'
  1208  007E2F  64                 	db	100	;'d'
  1209  007E30  20                 	db	32
  1210  007E31  49                 	db	73	;'I'
  1211  007E32  50                 	db	80	;'P'
  1212  007E33  20                 	db	32
  1213  007E34  53                 	db	83	;'S'
  1214  007E35  72                 	db	114	;'r'
  1215  007E36  63                 	db	99	;'c'
  1216  007E37  20                 	db	32
  1217  007E38  41                 	db	65	;'A'
  1218  007E39  64                 	db	100	;'d'
  1219  007E3A  64                 	db	100	;'d'
  1220  007E3B  72                 	db	114	;'r'
  1221  007E3C  20                 	db	32
  1222  007E3D  00                 	db	0
  1223  007E3E                     STR_31:
  1224  007E3E  53                 	db	83	;'S'
  1225  007E3F  6F                 	db	111	;'o'
  1226  007E40  75                 	db	117	;'u'
  1227  007E41  72                 	db	114	;'r'
  1228  007E42  63                 	db	99	;'c'
  1229  007E43  65                 	db	101	;'e'
  1230  007E44  20                 	db	32
  1231  007E45  4D                 	db	77	;'M'
  1232  007E46  41                 	db	65	;'A'
  1233  007E47  43                 	db	67	;'C'
  1234  007E48  20                 	db	32
  1235  007E49  61                 	db	97	;'a'
  1236  007E4A  64                 	db	100	;'d'
  1237  007E4B  64                 	db	100	;'d'
  1238  007E4C  72                 	db	114	;'r'
  1239  007E4D  65                 	db	101	;'e'
  1240  007E4E  73                 	db	115	;'s'
  1241  007E4F  73                 	db	115	;'s'
  1242  007E50  20                 	db	32
  1243  007E51  69                 	db	105	;'i'
  1244  007E52  73                 	db	115	;'s'
  1245  007E53  20                 	db	32
  1246  007E54  00                 	db	0
  1247  007E55                     STR_37:
  1248  007E55  53                 	db	83	;'S'
  1249  007E56  70                 	db	112	;'p'
  1250  007E57  65                 	db	101	;'e'
  1251  007E58  65                 	db	101	;'e'
  1252  007E59  64                 	db	100	;'d'
  1253  007E5A  20                 	db	32
  1254  007E5B  69                 	db	105	;'i'
  1255  007E5C  73                 	db	115	;'s'
  1256  007E5D  20                 	db	32
  1257  007E5E  31                 	db	49	;'1'
  1258  007E5F  30                 	db	48	;'0'
  1259  007E60  30                 	db	48	;'0'
  1260  007E61  20                 	db	32
  1261  007E62  4D                 	db	77	;'M'
  1262  007E63  62                 	db	98	;'b'
  1263  007E64  70                 	db	112	;'p'
  1264  007E65  73                 	db	115	;'s'
  1265  007E66  2C                 	db	44
  1266  007E67  20                 	db	32
  1267  007E68  00                 	db	0
  1268  007E69                     STR_10:
  1269  007E69  5B                 	db	91	;'['
  1270  007E6A  55                 	db	85	;'U'
  1271  007E6B  6E                 	db	110	;'n'
  1272  007E6C  6B                 	db	107	;'k'
  1273  007E6D  6E                 	db	110	;'n'
  1274  007E6E  6F                 	db	111	;'o'
  1275  007E6F  77                 	db	119	;'w'
  1276  007E70  6E                 	db	110	;'n'
  1277  007E71  20                 	db	32
  1278  007E72  45                 	db	69	;'E'
  1279  007E73  74                 	db	116	;'t'
  1280  007E74  68                 	db	104	;'h'
  1281  007E75  65                 	db	101	;'e'
  1282  007E76  72                 	db	114	;'r'
  1283  007E77  54                 	db	84	;'T'
  1284  007E78  79                 	db	121	;'y'
  1285  007E79  70                 	db	112	;'p'
  1286  007E7A  65                 	db	101	;'e'
  1287  007E7B  5D                 	db	93	;']'
  1288  007E7C  00                 	db	0
  1289  007E7D                     STR_85:
  1290  007E7D  5B                 	db	91	;'['
  1291  007E7E  49                 	db	73	;'I'
  1292  007E7F  4E                 	db	78	;'N'
  1293  007E80  56                 	db	86	;'V'
  1294  007E81  41                 	db	65	;'A'
  1295  007E82  4C                 	db	76	;'L'
  1296  007E83  49                 	db	73	;'I'
  1297  007E84  44                 	db	68	;'D'
  1298  007E85  20                 	db	32
  1299  007E86  43                 	db	67	;'C'
  1300  007E87  48                 	db	72	;'H'
  1301  007E88  45                 	db	69	;'E'
  1302  007E89  43                 	db	67	;'C'
  1303  007E8A  4B                 	db	75	;'K'
  1304  007E8B  53                 	db	83	;'S'
  1305  007E8C  55                 	db	85	;'U'
  1306  007E8D  4D                 	db	77	;'M'
  1307  007E8E  5D                 	db	93	;']'
  1308  007E8F  00                 	db	0
  1309  007E90                     STR_36:
  1310  007E90  53                 	db	83	;'S'
  1311  007E91  70                 	db	112	;'p'
  1312  007E92  65                 	db	101	;'e'
  1313  007E93  65                 	db	101	;'e'
  1314  007E94  64                 	db	100	;'d'
  1315  007E95  20                 	db	32
  1316  007E96  69                 	db	105	;'i'
  1317  007E97  73                 	db	115	;'s'
  1318  007E98  20                 	db	32
  1319  007E99  31                 	db	49	;'1'
  1320  007E9A  30                 	db	48	;'0'
  1321  007E9B  20                 	db	32
  1322  007E9C  4D                 	db	77	;'M'
  1323  007E9D  62                 	db	98	;'b'
  1324  007E9E  70                 	db	112	;'p'
  1325  007E9F  73                 	db	115	;'s'
  1326  007EA0  2C                 	db	44
  1327  007EA1  20                 	db	32
  1328  007EA2  00                 	db	0
  1329  007EA3                     STR_35:
  1330  007EA3  4C                 	db	76	;'L'
  1331  007EA4  69                 	db	105	;'i'
  1332  007EA5  6E                 	db	110	;'n'
  1333  007EA6  6B                 	db	107	;'k'
  1334  007EA7  20                 	db	32
  1335  007EA8  65                 	db	101	;'e'
  1336  007EA9  73                 	db	115	;'s'
  1337  007EAA  74                 	db	116	;'t'
  1338  007EAB  61                 	db	97	;'a'
  1339  007EAC  62                 	db	98	;'b'
  1340  007EAD  6C                 	db	108	;'l'
  1341  007EAE  69                 	db	105	;'i'
  1342  007EAF  73                 	db	115	;'s'
  1343  007EB0  68                 	db	104	;'h'
  1344  007EB1  65                 	db	101	;'e'
  1345  007EB2  64                 	db	100	;'d'
  1346  007EB3  2E                 	db	46
  1347  007EB4  20                 	db	32
  1348  007EB5  00                 	db	0
  1349  007EB6                     STR_43:
  1350  007EB6  20                 	db	32
  1351  007EB7  45                 	db	69	;'E'
  1352  007EB8  54                 	db	84	;'T'
  1353  007EB9  48                 	db	72	;'H'
  1354  007EBA  45                 	db	69	;'E'
  1355  007EBB  52                 	db	82	;'R'
  1356  007EBC  4E                 	db	78	;'N'
  1357  007EBD  45                 	db	69	;'E'
  1358  007EBE  54                 	db	84	;'T'
  1359  007EBF  20                 	db	32
  1360  007EC0  4D                 	db	77	;'M'
  1361  007EC1  4F                 	db	79	;'O'
  1362  007EC2  44                 	db	68	;'D'
  1363  007EC3  55                 	db	85	;'U'
  1364  007EC4  4C                 	db	76	;'L'
  1365  007EC5  45                 	db	69	;'E'
  1366  007EC6  3A                 	db	58	;':'
  1367  007EC7  20                 	db	32
  1368  007EC8  00                 	db	0
  1369  007EC9                     STR_54:
  1370  007EC9  55                 	db	85	;'U'
  1371  007ECA  6E                 	db	110	;'n'
  1372  007ECB  6B                 	db	107	;'k'
  1373  007ECC  6E                 	db	110	;'n'
  1374  007ECD  6F                 	db	111	;'o'
  1375  007ECE  77                 	db	119	;'w'
  1376  007ECF  6E                 	db	110	;'n'
  1377  007ED0  20                 	db	32
  1378  007ED1  45                 	db	69	;'E'
  1379  007ED2  74                 	db	116	;'t'
  1380  007ED3  68                 	db	104	;'h'
  1381  007ED4  65                 	db	101	;'e'
  1382  007ED5  72                 	db	114	;'r'
  1383  007ED6  54                 	db	84	;'T'
  1384  007ED7  79                 	db	121	;'y'
  1385  007ED8  70                 	db	112	;'p'
  1386  007ED9  65                 	db	101	;'e'
  1387  007EDA  00                 	db	0
  1388  007EDB                     STR_58:
  1389  007EDB  55                 	db	85	;'U'
  1390  007EDC  6E                 	db	110	;'n'
  1391  007EDD  6B                 	db	107	;'k'
  1392  007EDE  6E                 	db	110	;'n'
  1393  007EDF  6F                 	db	111	;'o'
  1394  007EE0  77                 	db	119	;'w'
  1395  007EE1  6E                 	db	110	;'n'
  1396  007EE2  20                 	db	32
  1397  007EE3  50                 	db	80	;'P'
  1398  007EE4  72                 	db	114	;'r'
  1399  007EE5  6F                 	db	111	;'o'
  1400  007EE6  74                 	db	116	;'t'
  1401  007EE7  6F                 	db	111	;'o'
  1402  007EE8  63                 	db	99	;'c'
  1403  007EE9  6F                 	db	111	;'o'
  1404  007EEA  6C                 	db	108	;'l'
  1405  007EEB  00                 	db	0
  1406  007EEC                     STR_41:
  1407  007EEC  20                 	db	32
  1408  007EED  4D                 	db	77	;'M'
  1409  007EEE  45                 	db	69	;'E'
  1410  007EEF  4D                 	db	77	;'M'
  1411  007EF0  4F                 	db	79	;'O'
  1412  007EF1  52                 	db	82	;'R'
  1413  007EF2  59                 	db	89	;'Y'
  1414  007EF3  20                 	db	32
  1415  007EF4  4D                 	db	77	;'M'
  1416  007EF5  4F                 	db	79	;'O'
  1417  007EF6  44                 	db	68	;'D'
  1418  007EF7  55                 	db	85	;'U'
  1419  007EF8  4C                 	db	76	;'L'
  1420  007EF9  45                 	db	69	;'E'
  1421  007EFA  3A                 	db	58	;':'
  1422  007EFB  20                 	db	32
  1423  007EFC  00                 	db	0
  1424  007EFD                     STR_67:
  1425  007EFD  5B                 	db	91	;'['
  1426  007EFE  52                 	db	82	;'R'
  1427  007EFF  65                 	db	101	;'e'
  1428  007F00  70                 	db	112	;'p'
  1429  007F01  6C                 	db	108	;'l'
  1430  007F02  79                 	db	121	;'y'
  1431  007F03  20                 	db	32
  1432  007F04  73                 	db	115	;'s'
  1433  007F05  65                 	db	101	;'e'
  1434  007F06  6E                 	db	110	;'n'
  1435  007F07  74                 	db	116	;'t'
  1436  007F08  20                 	db	32
  1437  007F09  74                 	db	116	;'t'
  1438  007F0A  6F                 	db	111	;'o'
  1439  007F0B  20                 	db	32
  1440  007F0C  00                 	db	0
  1441  007F0D                     STR_5:
  1442  007F0D  5B                 	db	91	;'['
  1443  007F0E  53                 	db	83	;'S'
  1444  007F0F  79                 	db	121	;'y'
  1445  007F10  6D                 	db	109	;'m'
  1446  007F11  62                 	db	98	;'b'
  1447  007F12  6F                 	db	111	;'o'
  1448  007F13  6C                 	db	108	;'l'
  1449  007F14  20                 	db	32
  1450  007F15  45                 	db	69	;'E'
  1451  007F16  72                 	db	114	;'r'
  1452  007F17  72                 	db	114	;'r'
  1453  007F18  6F                 	db	111	;'o'
  1454  007F19  72                 	db	114	;'r'
  1455  007F1A  73                 	db	115	;'s'
  1456  007F1B  5D                 	db	93	;']'
  1457  007F1C  00                 	db	0
  1458  007F1D                     STR_66:
  1459  007F1D  5B                 	db	91	;'['
  1460  007F1E  49                 	db	73	;'I'
  1461  007F1F  73                 	db	115	;'s'
  1462  007F20  47                 	db	71	;'G'
  1463  007F21  72                 	db	114	;'r'
  1464  007F22  61                 	db	97	;'a'
  1465  007F23  74                 	db	116	;'t'
  1466  007F24  75                 	db	117	;'u'
  1467  007F25  69                 	db	105	;'i'
  1468  007F26  74                 	db	116	;'t'
  1469  007F27  6F                 	db	111	;'o'
  1470  007F28  75                 	db	117	;'u'
  1471  007F29  73                 	db	115	;'s'
  1472  007F2A  5D                 	db	93	;']'
  1473  007F2B  00                 	db	0
  1474  007F2C                     STR_45:
  1475  007F2C  20                 	db	32
  1476  007F2D  49                 	db	73	;'I'
  1477  007F2E  50                 	db	80	;'P'
  1478  007F2F  76                 	db	118	;'v'
  1479  007F30  34                 	db	52	;'4'
  1480  007F31  20                 	db	32
  1481  007F32  4D                 	db	77	;'M'
  1482  007F33  4F                 	db	79	;'O'
  1483  007F34  44                 	db	68	;'D'
  1484  007F35  55                 	db	85	;'U'
  1485  007F36  4C                 	db	76	;'L'
  1486  007F37  45                 	db	69	;'E'
  1487  007F38  3A                 	db	58	;':'
  1488  007F39  20                 	db	32
  1489  007F3A  00                 	db	0
  1490  007F3B                     STR_44:
  1491  007F3B  20                 	db	32
  1492  007F3C  41                 	db	65	;'A'
  1493  007F3D  52                 	db	82	;'R'
  1494  007F3E  50                 	db	80	;'P'
  1495  007F3F  20                 	db	32
  1496  007F40  4D                 	db	77	;'M'
  1497  007F41  4F                 	db	79	;'O'
  1498  007F42  44                 	db	68	;'D'
  1499  007F43  55                 	db	85	;'U'
  1500  007F44  4C                 	db	76	;'L'
  1501  007F45  45                 	db	69	;'E'
  1502  007F46  3A                 	db	58	;':'
  1503  007F47  20                 	db	32
  1504  007F48  00                 	db	0
  1505  007F49                     STR_34:
  1506  007F49  4C                 	db	76	;'L'
  1507  007F4A  69                 	db	105	;'i'
  1508  007F4B  6E                 	db	110	;'n'
  1509  007F4C  6B                 	db	107	;'k'
  1510  007F4D  20                 	db	32
  1511  007F4E  6C                 	db	108	;'l'
  1512  007F4F  6F                 	db	111	;'o'
  1513  007F50  73                 	db	115	;'s'
  1514  007F51  74                 	db	116	;'t'
  1515  007F52  2E                 	db	46
  1516  007F53  0A                 	db	10
  1517  007F54  0D                 	db	13
  1518  007F55  00                 	db	0
  1519  007F56                     STR_30:
  1520  007F56  20                 	db	32
  1521  007F57  64                 	db	100	;'d'
  1522  007F58  65                 	db	101	;'e'
  1523  007F59  74                 	db	116	;'t'
  1524  007F5A  65                 	db	101	;'e'
  1525  007F5B  63                 	db	99	;'c'
  1526  007F5C  74                 	db	116	;'t'
  1527  007F5D  65                 	db	101	;'e'
  1528  007F5E  64                 	db	100	;'d'
  1529  007F5F  2E                 	db	46
  1530  007F60  20                 	db	32
  1531  007F61  00                 	db	0
  1532  007F62                     STR_26:
  1533  007F62  4D                 	db	77	;'M'
  1534  007F63  61                 	db	97	;'a'
  1535  007F64  72                 	db	114	;'r'
  1536  007F65  20                 	db	32
  1537  007F66  31                 	db	49	;'1'
  1538  007F67  37                 	db	55	;'7'
  1539  007F68  20                 	db	32
  1540  007F69  32                 	db	50	;'2'
  1541  007F6A  30                 	db	48	;'0'
  1542  007F6B  31                 	db	49	;'1'
  1543  007F6C  39                 	db	57	;'9'
  1544  007F6D  00                 	db	0
  1545  007F6E                     STR_3:
  1546  007F6E  5B                 	db	91	;'['
  1547  007F6F  42                 	db	66	;'B'
  1548  007F70  72                 	db	114	;'r'
  1549  007F71  6F                 	db	111	;'o'
  1550  007F72  61                 	db	97	;'a'
  1551  007F73  64                 	db	100	;'d'
  1552  007F74  63                 	db	99	;'c'
  1553  007F75  61                 	db	97	;'a'
  1554  007F76  73                 	db	115	;'s'
  1555  007F77  74                 	db	116	;'t'
  1556  007F78  5D                 	db	93	;']'
  1557  007F79  00                 	db	0
  1558  007F7A                     STR_75:
  1559  007F7A  5B                 	db	91	;'['
  1560  007F7B  45                 	db	69	;'E'
  1561  007F7C  78                 	db	120	;'x'
  1562  007F7D  70                 	db	112	;'p'
  1563  007F7E  65                 	db	101	;'e'
  1564  007F7F  63                 	db	99	;'c'
  1565  007F80  74                 	db	116	;'t'
  1566  007F81  65                 	db	101	;'e'
  1567  007F82  64                 	db	100	;'d'
  1568  007F83  20                 	db	32
  1569  007F84  00                 	db	0
  1570  007F85                     STR_65:
  1571  007F85  5B                 	db	91	;'['
  1572  007F86  49                 	db	73	;'I'
  1573  007F87  73                 	db	115	;'s'
  1574  007F88  50                 	db	80	;'P'
  1575  007F89  72                 	db	114	;'r'
  1576  007F8A  6F                 	db	111	;'o'
  1577  007F8B  62                 	db	98	;'b'
  1578  007F8C  65                 	db	101	;'e'
  1579  007F8D  5D                 	db	93	;']'
  1580  007F8E  00                 	db	0
  1581  007F8F                     STR_4:
  1582  007F8F  5B                 	db	91	;'['
  1583  007F90  55                 	db	85	;'U'
  1584  007F91  6E                 	db	110	;'n'
  1585  007F92  69                 	db	105	;'i'
  1586  007F93  63                 	db	99	;'c'
  1587  007F94  61                 	db	97	;'a'
  1588  007F95  73                 	db	115	;'s'
  1589  007F96  74                 	db	116	;'t'
  1590  007F97  5D                 	db	93	;']'
  1591  007F98  00                 	db	0
  1592  007F99                     STR_50:
  1593  007F99  20                 	db	32
  1594  007F9A  28                 	db	40
  1595  007F9B  43                 	db	67	;'C'
  1596  007F9C  6F                 	db	111	;'o'
  1597  007F9D  64                 	db	100	;'d'
  1598  007F9E  65                 	db	101	;'e'
  1599  007F9F  3A                 	db	58	;':'
  1600  007FA0  20                 	db	32
  1601  007FA1  00                 	db	0
  1602  007FA2                     STR_28:
  1603  007FA2  31                 	db	49	;'1'
  1604  007FA3  39                 	db	57	;'9'
  1605  007FA4  3A                 	db	58	;':'
  1606  007FA5  34                 	db	52	;'4'
  1607  007FA6  36                 	db	54	;'6'
  1608  007FA7  3A                 	db	58	;':'
  1609  007FA8  32                 	db	50	;'2'
  1610  007FA9  35                 	db	53	;'5'
  1611  007FAA  00                 	db	0
  1612  007FAB                     STR_40:
  1613  007FAB  5B                 	db	91	;'['
  1614  007FAC  45                 	db	69	;'E'
  1615  007FAD  52                 	db	82	;'R'
  1616  007FAE  52                 	db	82	;'R'
  1617  007FAF  4F                 	db	79	;'O'
  1618  007FB0  52                 	db	82	;'R'
  1619  007FB1  5D                 	db	93	;']'
  1620  007FB2  00                 	db	0
  1621  007FB3                     STR_76:
  1622  007FB3  2C                 	db	44
  1623  007FB4  20                 	db	32
  1624  007FB5  67                 	db	103	;'g'
  1625  007FB6  6F                 	db	111	;'o'
  1626  007FB7  74                 	db	116	;'t'
  1627  007FB8  20                 	db	32
  1628  007FB9  00                 	db	0
  1629  007FBA                     STR_9:
  1630  007FBA  5B                 	db	91	;'['
  1631  007FBB  49                 	db	73	;'I'
  1632  007FBC  50                 	db	80	;'P'
  1633  007FBD  76                 	db	118	;'v'
  1634  007FBE  34                 	db	52	;'4'
  1635  007FBF  5D                 	db	93	;']'
  1636  007FC0  00                 	db	0
  1637  007FC1                     STR_8:
  1638  007FC1  5B                 	db	91	;'['
  1639  007FC2  41                 	db	65	;'A'
  1640  007FC3  52                 	db	82	;'R'
  1641  007FC4  50                 	db	80	;'P'
  1642  007FC5  5D                 	db	93	;']'
  1643  007FC6  00                 	db	0
  1644  007FC7                     STR_79:
  1645  007FC7  20                 	db	32
  1646  007FC8  2D                 	db	45
  1647  007FC9  3E                 	db	62	;'>'
  1648  007FCA  20                 	db	32
  1649  007FCB  00                 	db	0
  1650  007FCC                     STR_62:
  1651  007FCC  5D                 	db	93	;']'
  1652  007FCD  2D                 	db	45
  1653  007FCE  3E                 	db	62	;'>'
  1654  007FCF  5B                 	db	91	;'['
  1655  007FD0  00                 	db	0
  1656  007FD1                     STR_52:
  1657  007FD1  49                 	db	73	;'I'
  1658  007FD2  50                 	db	80	;'P'
  1659  007FD3  76                 	db	118	;'v'
  1660  007FD4  34                 	db	52	;'4'
  1661  007FD5  00                 	db	0
  1662  007FD6                     STR_55:
  1663  007FD6  49                 	db	73	;'I'
  1664  007FD7  43                 	db	67	;'C'
  1665  007FD8  4D                 	db	77	;'M'
  1666  007FD9  50                 	db	80	;'P'
  1667  007FDA  00                 	db	0
  1668  007FDB                     STR_51:
  1669  007FDB  29                 	db	41
  1670  007FDC  2E                 	db	46
  1671  007FDD  0A                 	db	10
  1672  007FDE  0D                 	db	13
  1673  007FDF  00                 	db	0
  1674  007FE0                     STR_14:
  1675  007FE0  5D                 	db	93	;']'
  1676  007FE1  5B                 	db	91	;'['
  1677  007FE2  4C                 	db	76	;'L'
  1678  007FE3  3D                 	db	61	;'='
  1679  007FE4  00                 	db	0
  1680  007FE5                     STR_56:
  1681  007FE5  54                 	db	84	;'T'
  1682  007FE6  43                 	db	67	;'C'
  1683  007FE7  50                 	db	80	;'P'
  1684  007FE8  00                 	db	0
  1685  007FE9                     STR_57:
  1686  007FE9  55                 	db	85	;'U'
  1687  007FEA  44                 	db	68	;'D'
  1688  007FEB  50                 	db	80	;'P'
  1689  007FEC  00                 	db	0
  1690  007FED                     STR_53:
  1691  007FED  41                 	db	65	;'A'
  1692  007FEE  52                 	db	82	;'R'
  1693  007FEF  50                 	db	80	;'P'
  1694  007FF0  00                 	db	0
  1695  007FF1                     STR_15:
  1696  007FF1  5D                 	db	93	;']'
  1697  007FF2  20                 	db	32
  1698  007FF3  00                 	db	0
  1699  007FF4                     STR_12:
  1700  007FF4  2D                 	db	45
  1701  007FF5  3E                 	db	62	;'>'
  1702  007FF6  00                 	db	0
  1703  007FF7                     STR_13:
  1704  007FF7  5D                 	db	93	;']'
  1705  007FF8  5B                 	db	91	;'['
  1706  007FF9  00                 	db	0
  1707  007FFA                     STR_19:
  1708  007FFA  29                 	db	41
  1709  007FFB  5D                 	db	93	;']'
  1710  007FFC  00                 	db	0
  1711  007FFD                     STR_21:
  1712  007FFD  12                 	db	18
  1713  007FFE  00                 	db	0
  1714  0000                     
  1715                           ; #config settings
  1716  007FFF  00                 	db	0	; dummy byte at the end
  1717  0000                     
  1718                           	psect	cinit
  1719  003C3E                     __pcinit:
  1720                           	opt stack 0
  1721  003C3E                     start_initialization:
  1722                           	opt stack 0
  1723  003C3E                     __initialization:
  1724                           	opt stack 0
  1725                           
  1726                           ; Initialize objects allocated to BANK2 (46 bytes)
  1727                           ; load TBLPTR registers with __pidataBANK2
  1728  003C3E  0E8E               	movlw	low __pidataBANK2
  1729  003C40  6EF6               	movwf	tblptrl,c
  1730  003C42  0E49               	movlw	high __pidataBANK2
  1731  003C44  6EF7               	movwf	tblptrh,c
  1732  003C46  0E00               	movlw	low (__pidataBANK2 shr (0+16))
  1733  003C48  6EF8               	movwf	tblptru,c
  1734  003C4A  EE02  F0C5         	lfsr	0,__pdataBANK2
  1735  003C4E  EE10 F02E          	lfsr	1,46
  1736  003C52                     copy_data0:
  1737  003C52  0009               	tblrd		*+
  1738  003C54  CFF5 FFEE          	movff	tablat,postinc0
  1739  003C58  50E5               	movf	postdec1,w,c
  1740  003C5A  50E1               	movf	fsr1l,w,c
  1741  003C5C  E1FA               	bnz	copy_data0
  1742                           
  1743                           ; Initialize objects allocated to COMRAM (6 bytes)
  1744                           ; load TBLPTR registers with __pidataCOMRAM
  1745  003C5E  0E04               	movlw	low __pidataCOMRAM
  1746  003C60  6EF6               	movwf	tblptrl,c
  1747  003C62  0E4D               	movlw	high __pidataCOMRAM
  1748  003C64  6EF7               	movwf	tblptrh,c
  1749  003C66  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1750  003C68  6EF8               	movwf	tblptru,c
  1751  003C6A  EE00  F049         	lfsr	0,__pdataCOMRAM
  1752  003C6E  EE10 F006          	lfsr	1,6
  1753  003C72                     copy_data1:
  1754  003C72  0009               	tblrd		*+
  1755  003C74  CFF5 FFEE          	movff	tablat,postinc0
  1756  003C78  50E5               	movf	postdec1,w,c
  1757  003C7A  50E1               	movf	fsr1l,w,c
  1758  003C7C  E1FA               	bnz	copy_data1
  1759                           
  1760                           ; Clear objects allocated to BANK3 (121 bytes)
  1761  003C7E  EE03  F000         	lfsr	0,__pbssBANK3
  1762  003C82  0E79               	movlw	121
  1763  003C84                     clear_0:
  1764  003C84  6AEE               	clrf	postinc0,c
  1765  003C86  06E8               	decf	wreg,f,c
  1766  003C88  E1FD               	bnz	clear_0
  1767                           
  1768                           ; Clear objects allocated to BANK2 (197 bytes)
  1769  003C8A  EE02  F000         	lfsr	0,__pbssBANK2
  1770  003C8E  0EC5               	movlw	197
  1771  003C90                     clear_1:
  1772  003C90  6AEE               	clrf	postinc0,c
  1773  003C92  06E8               	decf	wreg,f,c
  1774  003C94  E1FD               	bnz	clear_1
  1775                           
  1776                           ; Clear objects allocated to BANK1 (102 bytes)
  1777  003C96  EE01  F08B         	lfsr	0,__pbssBANK1
  1778  003C9A  0E66               	movlw	102
  1779  003C9C                     clear_2:
  1780  003C9C  6AEE               	clrf	postinc0,c
  1781  003C9E  06E8               	decf	wreg,f,c
  1782  003CA0  E1FD               	bnz	clear_2
  1783                           
  1784                           ; Clear objects allocated to BITCOMRAM (1 bytes)
  1785  003CA2  6A4F               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
  1786                           
  1787                           ; Clear objects allocated to COMRAM (32 bytes)
  1788  003CA4  EE00  F029         	lfsr	0,__pbssCOMRAM
  1789  003CA8  0E20               	movlw	32
  1790  003CAA                     clear_3:
  1791  003CAA  6AEE               	clrf	postinc0,c
  1792  003CAC  06E8               	decf	wreg,f,c
  1793  003CAE  E1FD               	bnz	clear_3
  1794  003CB0                     end_of_initialization:
  1795                           	opt stack 0
  1796  003CB0                     __end_of__initialization:
  1797                           	opt stack 0
  1798  003CB0  9050               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1799  003CB2  9250               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1800  003CB4  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1801  003CB6  6EF8               	movwf	tblptru,c
  1802  003CB8  0100               	movlb	0
  1803  003CBA  EF88  F00A         	goto	_main	;jump to C main() function
  1804                           tblptru	equ	0xFF8
  1805                           tblptrh	equ	0xFF7
  1806                           tblptrl	equ	0xFF6
  1807                           tablat	equ	0xFF5
  1808                           postinc0	equ	0xFEE
  1809                           wreg	equ	0xFE8
  1810                           postdec1	equ	0xFE5
  1811                           fsr1l	equ	0xFE1
  1812                           
  1813                           	psect	bitbssCOMRAM
  1814  000278                     __pbitbssCOMRAM:
  1815                           	opt stack 0
  1816  000278                     _fSrcAddrChanged:
  1817                           	opt stack 0
  1818  000278                     	ds	1
  1819  000279                     arp_background@fAnnounce:
  1820                           	opt stack 0
  1821  000279                     	ds	1
  1822                           tblptru	equ	0xFF8
  1823                           tblptrh	equ	0xFF7
  1824                           tblptrl	equ	0xFF6
  1825                           tablat	equ	0xFF5
  1826                           postinc0	equ	0xFEE
  1827                           wreg	equ	0xFE8
  1828                           postdec1	equ	0xFE5
  1829                           fsr1l	equ	0xFE1
  1830                           
  1831                           	psect	bssCOMRAM
  1832  000029                     __pbssCOMRAM:
  1833                           	opt stack 0
  1834  000029                     _time:
  1835                           	opt stack 0
  1836  000029                     	ds	4
  1837  00002D                     buttonHandler@debounceCounter:
  1838                           	opt stack 0
  1839  00002D                     	ds	4
  1840  000031                     _numberToDisplay:
  1841                           	opt stack 0
  1842  000031                     	ds	4
  1843  000035                     ethernet_rxGetNewFrame@counter:
  1844                           	opt stack 0
  1845  000035                     	ds	4
  1846  000039                     sevenSegmentUpdate@digitsToDisplay:
  1847                           	opt stack 0
  1848  000039                     	ds	3
  1849  00003C                     _arpStatus:
  1850                           	opt stack 0
  1851  00003C                     	ds	2
  1852  00003E                     ethernetController_streamToTransmitBuffer@pointer:
  1853                           	opt stack 0
  1854  00003E                     	ds	2
  1855  000040                     ethernetController_softReset@F5985:
  1856                           	opt stack 0
  1857  000040                     	ds	2
  1858  000042                     _nextPacketPointer:
  1859                           	opt stack 0
  1860  000042                     	ds	2
  1861  000044                     	ds	1
  1862  000045                     sevenSegmentUpdate@digitPointer:
  1863                           	opt stack 0
  1864  000045                     	ds	1
  1865  000046                     buttonHandler@newState:
  1866                           	opt stack 0
  1867  000046                     	ds	1
  1868  000047                     buttonHandler@oldState:
  1869                           	opt stack 0
  1870  000047                     	ds	1
  1871  000048                     	ds	1
  1872                           tblptru	equ	0xFF8
  1873                           tblptrh	equ	0xFF7
  1874                           tblptrl	equ	0xFF6
  1875                           tablat	equ	0xFF5
  1876                           postinc0	equ	0xFEE
  1877                           wreg	equ	0xFE8
  1878                           postdec1	equ	0xFE5
  1879                           fsr1l	equ	0xFE1
  1880                           
  1881                           	psect	dataCOMRAM
  1882  000049                     __pdataCOMRAM:
  1883                           	opt stack 0
  1884  000049                     _randx:
  1885                           	opt stack 0
  1886  000049                     	ds	4
  1887  00004D                     ethernetController_softReset@F5983:
  1888                           	opt stack 0
  1889  00004D                     	ds	2
  1890                           tblptru	equ	0xFF8
  1891                           tblptrh	equ	0xFF7
  1892                           tblptrl	equ	0xFF6
  1893                           tablat	equ	0xFF5
  1894                           postinc0	equ	0xFEE
  1895                           wreg	equ	0xFE8
  1896                           postdec1	equ	0xFE5
  1897                           fsr1l	equ	0xFE1
  1898                           
  1899                           	psect	bssBANK1
  1900  00018B                     __pbssBANK1:
  1901                           	opt stack 0
  1902  00018B                     _occupiedMemory:
  1903                           	opt stack 0
  1904  00018B                     	ds	72
  1905  0001D3                     	ds	4
  1906  0001D7                     _ipPreliminarySource:
  1907                           	opt stack 0
  1908  0001D7                     	ds	4
  1909  0001DB                     arp_gratuitous@timeStart:
  1910                           	opt stack 0
  1911  0001DB                     	ds	4
  1912  0001DF                     _ipSource:
  1913                           	opt stack 0
  1914  0001DF                     	ds	4
  1915  0001E3                     arp_gratuitous@state:
  1916                           	opt stack 0
  1917  0001E3                     	ds	1
  1918  0001E4                     arp_gratuitous@announceCounter:
  1919                           	opt stack 0
  1920  0001E4                     	ds	1
  1921  0001E5                     arp_probe@state:
  1922                           	opt stack 0
  1923  0001E5                     	ds	1
  1924  0001E6                     arp_probe@probeCounter:
  1925                           	opt stack 0
  1926  0001E6                     	ds	1
  1927  0001E7                     ethernetController_getRSV@temp:
  1928                           	opt stack 0
  1929  0001E7                     	ds	6
  1930  0001ED                     arp_background@err:
  1931                           	opt stack 0
  1932  0001ED                     	ds	3
  1933  0001F0                     _buttonState:
  1934                           	opt stack 0
  1935  0001F0                     	ds	1
  1936                           tblptru	equ	0xFF8
  1937                           tblptrh	equ	0xFF7
  1938                           tblptrl	equ	0xFF6
  1939                           tablat	equ	0xFF5
  1940                           postinc0	equ	0xFEE
  1941                           wreg	equ	0xFE8
  1942                           postdec1	equ	0xFE5
  1943                           fsr1l	equ	0xFE1
  1944                           
  1945                           	psect	bssBANK2
  1946  000200                     __pbssBANK2:
  1947                           	opt stack 0
  1948  000200                     printEthernetState@oldState:
  1949                           	opt stack 0
  1950  000200                     	ds	15
  1951  00020F                     _arp_table:
  1952                           	opt stack 0
  1953  00020F                     	ds	112
  1954  00027F                     arpEntryToString@string:
  1955                           	opt stack 0
  1956  00027F                     	ds	50
  1957  0002B1                     hexToString@number:
  1958                           	opt stack 0
  1959  0002B1                     	ds	10
  1960  0002BB                     intToString@number:
  1961                           	opt stack 0
  1962  0002BB                     	ds	10
  1963                           tblptru	equ	0xFF8
  1964                           tblptrh	equ	0xFF7
  1965                           tblptrl	equ	0xFF6
  1966                           tablat	equ	0xFF5
  1967                           postinc0	equ	0xFEE
  1968                           wreg	equ	0xFE8
  1969                           postdec1	equ	0xFE5
  1970                           fsr1l	equ	0xFE1
  1971                           
  1972                           	psect	dataBANK2
  1973  0002C5                     __pdataBANK2:
  1974                           	opt stack 0
  1975  0002C5                     macToString@F5943:
  1976                           	opt stack 0
  1977  0002C5                     	ds	18
  1978  0002D7                     _sevenSegCharacters:
  1979                           	opt stack 0
  1980  0002D7                     	ds	12
  1981  0002E3                     ipAdressToString@address:
  1982                           	opt stack 0
  1983  0002E3                     	ds	16
  1984                           tblptru	equ	0xFF8
  1985                           tblptrh	equ	0xFF7
  1986                           tblptrl	equ	0xFF6
  1987                           tablat	equ	0xFF5
  1988                           postinc0	equ	0xFEE
  1989                           wreg	equ	0xFE8
  1990                           postdec1	equ	0xFE5
  1991                           fsr1l	equ	0xFE1
  1992                           
  1993                           	psect	bssBANK3
  1994  000300                     __pbssBANK3:
  1995                           	opt stack 0
  1996  000300                     _stack:
  1997                           	opt stack 0
  1998  000300                     	ds	121
  1999                           tblptru	equ	0xFF8
  2000                           tblptrh	equ	0xFF7
  2001                           tblptrl	equ	0xFF6
  2002                           tablat	equ	0xFF5
  2003                           postinc0	equ	0xFEE
  2004                           wreg	equ	0xFE8
  2005                           postdec1	equ	0xFE5
  2006                           fsr1l	equ	0xFE1
  2007                           
  2008                           	psect	cstackBANK3
  2009  000379                     __pcstackBANK3:
  2010                           	opt stack 0
  2011  000379                     main@prescaler:
  2012                           	opt stack 0
  2013                           
  2014                           ; 4 bytes @ 0x0
  2015  000379                     	ds	4
  2016  00037D                     _main$2374:
  2017                           	opt stack 0
  2018                           
  2019                           ; 2 bytes @ 0x4
  2020  00037D                     	ds	2
  2021  00037F                     main@err:
  2022                           	opt stack 0
  2023                           
  2024                           ; 3 bytes @ 0x6
  2025  00037F                     	ds	3
  2026  000382                     main@ipDst:
  2027                           	opt stack 0
  2028                           
  2029                           ; 4 bytes @ 0x9
  2030  000382                     	ds	4
  2031  000386                     main@ipSrc:
  2032                           	opt stack 0
  2033                           
  2034                           ; 4 bytes @ 0xD
  2035  000386                     	ds	4
  2036                           tblptru	equ	0xFF8
  2037                           tblptrh	equ	0xFF7
  2038                           tblptrl	equ	0xFF6
  2039                           tablat	equ	0xFF5
  2040                           postinc0	equ	0xFEE
  2041                           wreg	equ	0xFE8
  2042                           postdec1	equ	0xFE5
  2043                           fsr1l	equ	0xFE1
  2044                           
  2045                           	psect	cstackBANK1
  2046  000100                     __pcstackBANK1:
  2047                           	opt stack 0
  2048  000100                     arp_sendRequest@ipSender:
  2049                           	opt stack 0
  2050  000100                     arp_sendReply@request:
  2051                           	opt stack 0
  2052                           
  2053                           ; 32 bytes @ 0x0
  2054  000100                     	ds	4
  2055  000104                     arp_sendRequest@ipTarget:
  2056                           	opt stack 0
  2057                           
  2058                           ; 4 bytes @ 0x4
  2059  000104                     	ds	4
  2060  000108                     arp_sendRequest@senderMAC:
  2061                           	opt stack 0
  2062                           
  2063                           ; 6 bytes @ 0x8
  2064  000108                     	ds	6
  2065  00010E                     arp_sendRequest@targetMAC:
  2066                           	opt stack 0
  2067                           
  2068                           ; 6 bytes @ 0xE
  2069  00010E                     	ds	6
  2070  000114                     arp_sendRequest@request:
  2071                           	opt stack 0
  2072                           
  2073                           ; 32 bytes @ 0x14
  2074  000114                     	ds	12
  2075  000120                     arp_sendReply@senderMAC:
  2076                           	opt stack 0
  2077                           
  2078                           ; 6 bytes @ 0x20
  2079  000120                     	ds	6
  2080  000126                     arp_sendReply@targetMAC:
  2081                           	opt stack 0
  2082                           
  2083                           ; 6 bytes @ 0x26
  2084  000126                     	ds	6
  2085  00012C                     arp_sendReply@senderIP:
  2086                           	opt stack 0
  2087                           
  2088                           ; 4 bytes @ 0x2C
  2089  00012C                     	ds	4
  2090  000130                     arp_sendReply@targetIP:
  2091                           	opt stack 0
  2092                           
  2093                           ; 4 bytes @ 0x30
  2094  000130                     	ds	4
  2095  000134                     ??_arp_probe:
  2096  000134                     ??_arp_gratuitous:
  2097  000134                     arp_sendReply@myIP:
  2098                           	opt stack 0
  2099                           
  2100                           ; 4 bytes @ 0x34
  2101  000134                     	ds	4
  2102  000138                     arp_sendReply@reply:
  2103                           	opt stack 0
  2104                           
  2105                           ; 32 bytes @ 0x38
  2106  000138                     	ds	4
  2107  00013C                     arp_probe@index:
  2108                           	opt stack 0
  2109  00013C                     arp_gratuitous@err:
  2110                           	opt stack 0
  2111                           
  2112                           ; 3 bytes @ 0x3C
  2113  00013C                     	ds	1
  2114  00013D                     arp_probe@timeStart:
  2115                           	opt stack 0
  2116                           
  2117                           ; 4 bytes @ 0x3D
  2118  00013D                     	ds	4
  2119  000141                     arp_probe@waitingTime:
  2120                           	opt stack 0
  2121                           
  2122                           ; 4 bytes @ 0x41
  2123  000141                     	ds	4
  2124  000145                     arp_probe@ipSender:
  2125                           	opt stack 0
  2126                           
  2127                           ; 4 bytes @ 0x45
  2128  000145                     	ds	4
  2129  000149                     arp_probe@err:
  2130                           	opt stack 0
  2131                           
  2132                           ; 3 bytes @ 0x49
  2133  000149                     	ds	3
  2134  00014C                     ??_arp_background:
  2135                           
  2136                           ; 1 bytes @ 0x4C
  2137  00014C                     	ds	2
  2138  00014E                     arp_background@ipPreliminary:
  2139                           	opt stack 0
  2140                           
  2141                           ; 4 bytes @ 0x4E
  2142  00014E                     	ds	4
  2143  000152                     arp_background@errAnnounce:
  2144                           	opt stack 0
  2145                           
  2146                           ; 3 bytes @ 0x52
  2147  000152                     	ds	6
  2148  000158                     arp_handleNewPacket@arp:
  2149                           	opt stack 0
  2150                           
  2151                           ; 32 bytes @ 0x58
  2152  000158                     	ds	32
  2153  000178                     ?_ethernet_rxGetNewFrame:
  2154                           	opt stack 0
  2155  000178                     ethernet_rxGetNewFrame@frame:
  2156                           	opt stack 0
  2157                           
  2158                           ; 2 bytes @ 0x78
  2159  000178                     	ds	3
  2160  00017B                     ??_ethernet_rxGetNewFrame:
  2161                           
  2162                           ; 1 bytes @ 0x7B
  2163  00017B                     	ds	8
  2164  000183                     ethernet_rxGetNewFrame@err:
  2165                           	opt stack 0
  2166                           
  2167                           ; 3 bytes @ 0x83
  2168  000183                     	ds	3
  2169  000186                     handleStackBackgroundTasks@stack:
  2170                           	opt stack 0
  2171                           
  2172                           ; 2 bytes @ 0x86
  2173  000186                     	ds	2
  2174  000188                     
  2175                           ; 1 bytes @ 0x88
  2176  000188                     	ds	1
  2177  000189                     ??_main:
  2178                           
  2179                           ; 1 bytes @ 0x89
  2180  000189                     	ds	2
  2181                           tblptru	equ	0xFF8
  2182                           tblptrh	equ	0xFF7
  2183                           tblptrl	equ	0xFF6
  2184                           tablat	equ	0xFF5
  2185                           postinc0	equ	0xFEE
  2186                           wreg	equ	0xFE8
  2187                           postdec1	equ	0xFE5
  2188                           fsr1l	equ	0xFE1
  2189                           
  2190                           	psect	cstackBANK0
  2191  000060                     __pcstackBANK0:
  2192                           	opt stack 0
  2193  000060                     ?_enc424j600_getNextPacketPointer:
  2194                           	opt stack 0
  2195  000060                     ?_ethernetController_getDeviceName:
  2196                           	opt stack 0
  2197  000060                     ?_etherTypeToString:
  2198                           	opt stack 0
  2199  000060                     ?_ipProtocolToString:
  2200                           	opt stack 0
  2201  000060                     ?___wmul:
  2202                           	opt stack 0
  2203  000060                     ?___lwdiv:
  2204                           	opt stack 0
  2205  000060                     ?_getMillis:
  2206                           	opt stack 0
  2207  000060                     ?_ipv4_getIPSourceAddress:
  2208                           	opt stack 0
  2209  000060                     ?_ipv4_getPreliminaryIPSourceAddress:
  2210                           	opt stack 0
  2211  000060                     ?___lmul:
  2212                           	opt stack 0
  2213  000060                     ?___lldiv:
  2214                           	opt stack 0
  2215  000060                     ?___llmod:
  2216                           	opt stack 0
  2217  000060                     ?_enc424j600_updateReceiveStatusVector:
  2218                           	opt stack 0
  2219  000060                     entireMemoryEmpty@i:
  2220                           	opt stack 0
  2221  000060                     entireMemoryFull@i:
  2222                           	opt stack 0
  2223  000060                     memory_txFrameClear@index:
  2224                           	opt stack 0
  2225  000060                     hexToChar@val:
  2226                           	opt stack 0
  2227  000060                     enc424j600_writeSPI@data:
  2228                           	opt stack 0
  2229  000060                     enc424j600_readSPI@data:
  2230                           	opt stack 0
  2231  000060                     enc424j600_setNextPacketPointer@ptr:
  2232                           	opt stack 0
  2233  000060                     enc424j600_updateReceiveStatusVector@rsv:
  2234                           	opt stack 0
  2235  000060                     mac_setToBroadcast@mac:
  2236                           	opt stack 0
  2237  000060                     mac_isAllZero@mac:
  2238                           	opt stack 0
  2239  000060                     mac_cmp@a:
  2240                           	opt stack 0
  2241  000060                     mac_setAllZero@mac:
  2242                           	opt stack 0
  2243  000060                     etherTypeToString@ethertype:
  2244                           	opt stack 0
  2245  000060                     ipv4_calculateHeaderChecksum@header:
  2246                           	opt stack 0
  2247  000060                     ipv4_SrcAddrChanged@err:
  2248                           	opt stack 0
  2249  000060                     ipv4_cmp@a:
  2250                           	opt stack 0
  2251  000060                     ipv4_isAllZero@ip:
  2252                           	opt stack 0
  2253  000060                     ipv4_setToAllZero@ip:
  2254                           	opt stack 0
  2255  000060                     ___wmul@multiplier:
  2256                           	opt stack 0
  2257  000060                     ___lwdiv@dividend:
  2258                           	opt stack 0
  2259  000060                     ___lmul@multiplier:
  2260                           	opt stack 0
  2261  000060                     ___lldiv@dividend:
  2262                           	opt stack 0
  2263  000060                     ___llmod@dividend:
  2264                           	opt stack 0
  2265  000060                     checkForOverlapSwitched@a:
  2266                           	opt stack 0
  2267                           
  2268                           ; 9 bytes @ 0x0
  2269  000060                     	ds	1
  2270  000061                     ?_hexToString:
  2271                           	opt stack 0
  2272  000061                     hexToString@val:
  2273                           	opt stack 0
  2274                           
  2275                           ; 4 bytes @ 0x1
  2276  000061                     	ds	1
  2277  000062                     ??_enc424j600_writeSPI:
  2278  000062                     ??_enc424j600_readSPI:
  2279  000062                     ??_etherTypeToString:
  2280  000062                     ??_ipv4_calculateHeaderChecksum:
  2281  000062                     ?_ethernetController_getNextPacketPointer:
  2282                           	opt stack 0
  2283  000062                     mac_setToBroadcast@i:
  2284                           	opt stack 0
  2285  000062                     mac_isAllZero@i:
  2286                           	opt stack 0
  2287  000062                     mac_setAllZero@i:
  2288                           	opt stack 0
  2289  000062                     ipProtocolToString@protocol:
  2290                           	opt stack 0
  2291  000062                     ipv4_isAllZero@i:
  2292                           	opt stack 0
  2293  000062                     ipv4_setToAllZero@i:
  2294                           	opt stack 0
  2295  000062                     mac_cmp@b:
  2296                           	opt stack 0
  2297  000062                     ipv4_cmp@b:
  2298                           	opt stack 0
  2299  000062                     ___wmul@multiplicand:
  2300                           	opt stack 0
  2301  000062                     ___lwdiv@divisor:
  2302                           	opt stack 0
  2303  000062                     ethernetController_getDeviceName@string:
  2304                           	opt stack 0
  2305                           
  2306                           ; 11 bytes @ 0x2
  2307  000062                     	ds	2
  2308  000064                     ___lwdiv@counter:
  2309                           	opt stack 0
  2310  000064                     ___wmul@product:
  2311                           	opt stack 0
  2312  000064                     ___lmul@multiplicand:
  2313                           	opt stack 0
  2314  000064                     ___lldiv@divisor:
  2315                           	opt stack 0
  2316  000064                     ___llmod@divisor:
  2317                           	opt stack 0
  2318  000064                     arp_setNewEntry@mac:
  2319                           	opt stack 0
  2320                           
  2321                           ; 6 bytes @ 0x4
  2322  000064                     	ds	1
  2323  000065                     ??_enc424j600_updateReceiveStatusVector:
  2324  000065                     ??_hexToString:
  2325  000065                     ___lwdiv@quotient:
  2326                           	opt stack 0
  2327                           
  2328                           ; 2 bytes @ 0x5
  2329  000065                     	ds	1
  2330  000066                     mac_cmp@i:
  2331                           	opt stack 0
  2332  000066                     ipv4_cmp@i:
  2333                           	opt stack 0
  2334  000066                     enc424j600_writeSPI@timeoutCounter:
  2335                           	opt stack 0
  2336  000066                     enc424j600_readSPI@timeoutCounter:
  2337                           	opt stack 0
  2338                           
  2339                           ; 4 bytes @ 0x6
  2340  000066                     	ds	1
  2341  000067                     arp_checkForEntry@ip:
  2342                           	opt stack 0
  2343                           
  2344                           ; 4 bytes @ 0x7
  2345  000067                     	ds	1
  2346  000068                     ___llmod@counter:
  2347                           	opt stack 0
  2348  000068                     ___lmul@product:
  2349                           	opt stack 0
  2350  000068                     ___lldiv@quotient:
  2351                           	opt stack 0
  2352                           
  2353                           ; 4 bytes @ 0x8
  2354  000068                     	ds	1
  2355  000069                     hexToString@pointer:
  2356                           	opt stack 0
  2357  000069                     checkForOverlapSwitched@b:
  2358                           	opt stack 0
  2359                           
  2360                           ; 9 bytes @ 0x9
  2361  000069                     	ds	1
  2362  00006A                     enc424j600_writeSingleByte@opcode:
  2363                           	opt stack 0
  2364  00006A                     enc424j600_writeControlRegisterUnbanked@data:
  2365                           	opt stack 0
  2366  00006A                     enc424j600_readControlRegisterUnbanked@data:
  2367                           	opt stack 0
  2368  00006A                     enc424j600_setGPDATAWritePointer@addr:
  2369                           	opt stack 0
  2370  00006A                     enc424j600_setERXDATAReadPointer@addr:
  2371                           	opt stack 0
  2372  00006A                     arp_setNewEntry@ip:
  2373                           	opt stack 0
  2374                           
  2375                           ; 4 bytes @ 0xA
  2376  00006A                     	ds	1
  2377  00006B                     arp_checkForEntry@index:
  2378                           	opt stack 0
  2379                           
  2380                           ; 2 bytes @ 0xB
  2381  00006B                     	ds	1
  2382  00006C                     ?_rand:
  2383                           	opt stack 0
  2384  00006C                     enc424j600_writeControlRegisterUnbanked@addr:
  2385                           	opt stack 0
  2386  00006C                     enc424j600_readControlRegisterUnbanked@addr:
  2387                           	opt stack 0
  2388  00006C                     enc424j600_setGPDATAWritePointer@opcode:
  2389                           	opt stack 0
  2390  00006C                     enc424j600_setERXDATAReadPointer@opcode:
  2391                           	opt stack 0
  2392  00006C                     ___lldiv@counter:
  2393                           	opt stack 0
  2394  00006C                     enc424j600_updateReceiveStatusVector@receiveStatusVector:
  2395                           	opt stack 0
  2396                           
  2397                           ; 5 bytes @ 0xC
  2398  00006C                     	ds	1
  2399  00006D                     ??_arp_checkForEntry:
  2400  00006D                     enc424j600_writeControlRegisterUnbanked@opcode:
  2401                           	opt stack 0
  2402  00006D                     enc424j600_readControlRegisterUnbanked@opcode:
  2403                           	opt stack 0
  2404  00006D                     enc424j600_setGPDATAWritePointer@lowByte:
  2405                           	opt stack 0
  2406  00006D                     enc424j600_setERXDATAReadPointer@lowByte:
  2407                           	opt stack 0
  2408  00006D                     ultoa@buf:
  2409                           	opt stack 0
  2410                           
  2411                           ; 2 bytes @ 0xD
  2412  00006D                     	ds	1
  2413  00006E                     ??_enc424j600_clearInterruptFlag:
  2414  00006E                     ?_enc424j600_getInterruptFlags:
  2415                           	opt stack 0
  2416  00006E                     ?___lwmod:
  2417                           	opt stack 0
  2418  00006E                     ?_ethernetController_softReset:
  2419                           	opt stack 0
  2420  00006E                     ?_ethernetController_checkDeviceId:
  2421                           	opt stack 0
  2422  00006E                     ?_ethernetController_getMacAddress:
  2423                           	opt stack 0
  2424  00006E                     ethernetController_setLEDConfig@conf:
  2425                           	opt stack 0
  2426  00006E                     enc424j600_getPacketCount@lowByte:
  2427                           	opt stack 0
  2428  00006E                     enc424j600_setGPDATAWritePointer@highByte:
  2429                           	opt stack 0
  2430  00006E                     enc424j600_setERXDATAReadPointer@highByte:
  2431                           	opt stack 0
  2432  00006E                     enc424j600_enableAutoMACInsertion@temp:
  2433                           	opt stack 0
  2434  00006E                     enc424j600_readPHYRegister@data:
  2435                           	opt stack 0
  2436  00006E                     enc424j600_setTXLength@len:
  2437                           	opt stack 0
  2438  00006E                     enc424j600_setTXStartAddress@addr:
  2439                           	opt stack 0
  2440  00006E                     enc424j600_setRXBufferStartAddress@addr:
  2441                           	opt stack 0
  2442  00006E                     enc424j600_setRXTailPointer@addr:
  2443                           	opt stack 0
  2444  00006E                     ___lwmod@dividend:
  2445                           	opt stack 0
  2446  00006E                     arp_setNewEntry@timestamp:
  2447                           	opt stack 0
  2448  00006E                     ipv4_calculateHeaderChecksum@sum:
  2449                           	opt stack 0
  2450                           
  2451                           ; 4 bytes @ 0xE
  2452  00006E                     	ds	1
  2453  00006F                     ??_ethernetController_updateNextPacketPointer:
  2454  00006F                     ?_ethernetController_getEtherTypeField:
  2455                           	opt stack 0
  2456  00006F                     ?_ethernetController_getSourceMACAddress:
  2457                           	opt stack 0
  2458  00006F                     ethernetController_setLEDConfig@LED:
  2459                           	opt stack 0
  2460  00006F                     ethernetController_writeEtherTypeFieldToBuffer@ethtype:
  2461                           	opt stack 0
  2462  00006F                     ethernetController_streamFromRXBuffer@startAddress:
  2463                           	opt stack 0
  2464  00006F                     ultoa@val:
  2465                           	opt stack 0
  2466  00006F                     ethernetController_writeDestinationMACAddress@addr:
  2467                           	opt stack 0
  2468  00006F                     ethernetController_streamToTransmitBuffer@field:
  2469                           	opt stack 0
  2470  00006F                     ethernetController_getSourceMACAddress@field:
  2471                           	opt stack 0
  2472  00006F                     ethernetController_getEtherTypeField@field:
  2473                           	opt stack 0
  2474                           
  2475                           ; 9 bytes @ 0xF
  2476  00006F                     	ds	1
  2477  000070                     ??_enc424j600_getInterruptFlags:
  2478  000070                     ??_enc424j600_readPHYRegister:
  2479  000070                     ethernetController_setLEDConfig@data:
  2480                           	opt stack 0
  2481  000070                     enc424j600_setTXLength@lowByte:
  2482                           	opt stack 0
  2483  000070                     enc424j600_setTXStartAddress@lowByte:
  2484                           	opt stack 0
  2485  000070                     enc424j600_setRXBufferStartAddress@lowByte:
  2486                           	opt stack 0
  2487  000070                     enc424j600_setRXTailPointer@lowByte:
  2488                           	opt stack 0
  2489  000070                     enc424j600_clearInterruptFlag@flag:
  2490                           	opt stack 0
  2491  000070                     ___lwmod@divisor:
  2492                           	opt stack 0
  2493                           
  2494                           ; 2 bytes @ 0x10
  2495  000070                     	ds	1
  2496  000071                     ??_ethernetController_softReset:
  2497  000071                     ?_ethernetController_getRSV:
  2498                           	opt stack 0
  2499  000071                     ethernetController_checkDeviceId@data:
  2500                           	opt stack 0
  2501  000071                     ethernetController_streamFromRXBuffer@startEnd:
  2502                           	opt stack 0
  2503  000071                     enc424j600_setTXLength@highByte:
  2504                           	opt stack 0
  2505  000071                     enc424j600_setTXStartAddress@highByte:
  2506                           	opt stack 0
  2507  000071                     enc424j600_setRXBufferStartAddress@highByte:
  2508                           	opt stack 0
  2509  000071                     enc424j600_setRXTailPointer@highByte:
  2510                           	opt stack 0
  2511  000071                     enc424j600_clearInterruptFlag@temp:
  2512                           	opt stack 0
  2513  000071                     ethernetController_getRSV@address:
  2514                           	opt stack 0
  2515  000071                     ethernetController_writeEtherTypeFieldToBuffer@field:
  2516                           	opt stack 0
  2517                           
  2518                           ; 9 bytes @ 0x11
  2519  000071                     	ds	1
  2520  000072                     ethernetController_softReset@comFailCount:
  2521                           	opt stack 0
  2522  000072                     ethernetController_clearInterruptFlag@flag:
  2523                           	opt stack 0
  2524  000072                     ethernetController_streamFromRXBuffer@opcode:
  2525                           	opt stack 0
  2526  000072                     ___lwmod@counter:
  2527                           	opt stack 0
  2528  000072                     ethernetController_dropPacket@frame:
  2529                           	opt stack 0
  2530  000072                     ethernetController_checkDeviceId@err:
  2531                           	opt stack 0
  2532  000072                     ethernetController_sendPacket@field:
  2533                           	opt stack 0
  2534  000072                     checkForOverlap@a:
  2535                           	opt stack 0
  2536                           
  2537                           ; 9 bytes @ 0x12
  2538  000072                     	ds	1
  2539  000073                     ?_ipAdressToString:
  2540                           	opt stack 0
  2541  000073                     ethernetController_streamFromRXBuffer@temp:
  2542                           	opt stack 0
  2543  000073                     ethernetController_softReset@dataToSend:
  2544                           	opt stack 0
  2545  000073                     ultoa@base:
  2546                           	opt stack 0
  2547  000073                     ipAdressToString@ip:
  2548                           	opt stack 0
  2549                           
  2550                           ; 4 bytes @ 0x13
  2551  000073                     	ds	1
  2552  000074                     ?_ipv4_parseHeader:
  2553                           	opt stack 0
  2554  000074                     ?_arp_parseFromRXBuffer:
  2555                           	opt stack 0
  2556  000074                     arp_parseFromRXBuffer@frame:
  2557                           	opt stack 0
  2558  000074                     ipv4_parseHeader@field:
  2559                           	opt stack 0
  2560  000074                     ethernetController_getMacAddress@mac:
  2561                           	opt stack 0
  2562                           
  2563                           ; 6 bytes @ 0x14
  2564  000074                     	ds	1
  2565  000075                     arp_checkForEntry@i:
  2566                           	opt stack 0
  2567  000075                     ethernetController_softReset@receivedData:
  2568                           	opt stack 0
  2569  000075                     ethernetController_updateNextPacketPointer@nextPktPointer:
  2570                           	opt stack 0
  2571  000075                     ultoa@v:
  2572                           	opt stack 0
  2573  000075                     ethernetController_writeDestinationMACAddress@field:
  2574                           	opt stack 0
  2575                           
  2576                           ; 9 bytes @ 0x15
  2577  000075                     	ds	1
  2578  000076                     ethernetController_getRSV@opcode:
  2579                           	opt stack 0
  2580  000076                     enc424j600_readPHYRegister@addr:
  2581                           	opt stack 0
  2582  000076                     enc424j600_getInterruptFlags@low:
  2583                           	opt stack 0
  2584  000076                     arp_setNewEntry@maxSeconds:
  2585                           	opt stack 0
  2586                           
  2587                           ; 4 bytes @ 0x16
  2588  000076                     	ds	1
  2589  000077                     ??_ipAdressToString:
  2590  000077                     ethernetController_getRSV@i:
  2591                           	opt stack 0
  2592  000077                     ethernetController_updateNextPacketPointer@opcode:
  2593                           	opt stack 0
  2594  000077                     enc424j600_readPHYRegister@PHYaddress:
  2595                           	opt stack 0
  2596  000077                     enc424j600_getInterruptFlags@high:
  2597                           	opt stack 0
  2598  000077                     ethernetController_softReset@err:
  2599                           	opt stack 0
  2600                           
  2601                           ; 3 bytes @ 0x17
  2602  000077                     	ds	1
  2603  000078                     ??_ethernetController_streamToTransmitBuffer:
  2604  000078                     ??_ethernetController_getEtherTypeField:
  2605  000078                     ?_ethernetController_pollInterruptFlags:
  2606                           	opt stack 0
  2607  000078                     ethernetController_getSourceMACAddress@opcode:
  2608                           	opt stack 0
  2609  000078                     ethernetController_updateNextPacketPointer@newPointerL:
  2610                           	opt stack 0
  2611  000078                     enc424j600_readPHYRegister@unusedBits:
  2612                           	opt stack 0
  2613                           
  2614                           ; 1 bytes @ 0x18
  2615  000078                     	ds	1
  2616  000079                     ethernetController_updateNextPacketPointer@newPointerH:
  2617                           	opt stack 0
  2618  000079                     ultoa@c:
  2619                           	opt stack 0
  2620  000079                     enc424j600_readPHYRegister@timeoutCounter:
  2621                           	opt stack 0
  2622  000079                     ethernetController_getSourceMACAddress@sourceAddress:
  2623                           	opt stack 0
  2624                           
  2625                           ; 6 bytes @ 0x19
  2626  000079                     	ds	1
  2627  00007A                     ??_ethernetController_pollInterruptFlags:
  2628  00007A                     ?_macToString:
  2629                           	opt stack 0
  2630  00007A                     ?_ethernetController_init:
  2631                           	opt stack 0
  2632  00007A                     ethernetController_writeEtherTypeFieldToBuffer@lowByte:
  2633                           	opt stack 0
  2634  00007A                     arp_setNewEntry@oldestIndex:
  2635                           	opt stack 0
  2636  00007A                     ltoa@buf:
  2637                           	opt stack 0
  2638  00007A                     srand@x:
  2639                           	opt stack 0
  2640  00007A                     macToString@addr:
  2641                           	opt stack 0
  2642                           
  2643                           ; 6 bytes @ 0x1A
  2644  00007A                     	ds	1
  2645  00007B                     ethernetController_writeEtherTypeFieldToBuffer@highByte:
  2646                           	opt stack 0
  2647  00007B                     arp_setNewEntry@i:
  2648                           	opt stack 0
  2649  00007B                     ipAdressToString@ones:
  2650                           	opt stack 0
  2651  00007B                     checkForOverlap@b:
  2652                           	opt stack 0
  2653                           
  2654                           ; 9 bytes @ 0x1B
  2655  00007B                     	ds	1
  2656  00007C                     ethernetController_streamToTransmitBuffer@data:
  2657                           	opt stack 0
  2658  00007C                     ethernetController_writeEtherTypeFieldToBuffer@opcode:
  2659                           	opt stack 0
  2660  00007C                     ethernetController_getEtherTypeField@ethertype:
  2661                           	opt stack 0
  2662  00007C                     ltoa@val:
  2663                           	opt stack 0
  2664  00007C                     arp_init@mac:
  2665                           	opt stack 0
  2666                           
  2667                           ; 6 bytes @ 0x1C
  2668  00007C                     	ds	1
  2669  00007D                     ethernetController_streamToTransmitBuffer@opcode:
  2670                           	opt stack 0
  2671  00007D                     enc424j600_readPHYRegister@lowByte:
  2672                           	opt stack 0
  2673  00007D                     ethernetController_init@err:
  2674                           	opt stack 0
  2675                           
  2676                           ; 3 bytes @ 0x1D
  2677  00007D                     	ds	1
  2678  00007E                     ethernetController_getEtherTypeField@opcode:
  2679                           	opt stack 0
  2680  00007E                     enc424j600_readPHYRegister@highByte:
  2681                           	opt stack 0
  2682  00007E                     ethernetController_pollInterruptFlags@flags:
  2683                           	opt stack 0
  2684  00007E                     ethernetController_writeDestinationMACAddress@data:
  2685                           	opt stack 0
  2686                           
  2687                           ; 6 bytes @ 0x1E
  2688  00007E                     	ds	1
  2689  00007F                     ethernetController_getSourceMACAddress@temp:
  2690                           	opt stack 0
  2691  00007F                     ethernetController_getEtherTypeField@lowByte:
  2692                           	opt stack 0
  2693  00007F                     enc424j600_readPHYRegister@temp:
  2694                           	opt stack 0
  2695  00007F                     ipAdressToString@tens:
  2696                           	opt stack 0
  2697                           
  2698                           ; 4 bytes @ 0x1F
  2699  00007F                     	ds	1
  2700  000080                     ??_macToString:
  2701  000080                     ethernetController_getSourceMACAddress@i:
  2702                           	opt stack 0
  2703  000080                     ethernetController_getEtherTypeField@highByte:
  2704                           	opt stack 0
  2705  000080                     ethernetController_pollInterruptFlags@reg:
  2706                           	opt stack 0
  2707  000080                     ethernetController_updateLinkStatus@state:
  2708                           	opt stack 0
  2709  000080                     ltoa@base:
  2710                           	opt stack 0
  2711                           
  2712                           ; 2 bytes @ 0x20
  2713  000080                     	ds	1
  2714  000081                     macToString@address:
  2715                           	opt stack 0
  2716                           
  2717                           ; 18 bytes @ 0x21
  2718  000081                     	ds	1
  2719  000082                     ethernetController_updateLinkStatus@temp:
  2720                           	opt stack 0
  2721  000082                     ltoa@cp:
  2722                           	opt stack 0
  2723  000082                     arp_init@ip:
  2724                           	opt stack 0
  2725                           
  2726                           ; 4 bytes @ 0x22
  2727  000082                     	ds	1
  2728  000083                     ethernetController_updateLinkStatus@temp16:
  2729                           	opt stack 0
  2730  000083                     ipAdressToString@hundreds:
  2731                           	opt stack 0
  2732                           
  2733                           ; 4 bytes @ 0x23
  2734  000083                     	ds	1
  2735  000084                     ?_intToString:
  2736                           	opt stack 0
  2737  000084                     ?_memory_txFrameRequest:
  2738                           	opt stack 0
  2739  000084                     ethernetController_writeDestinationMACAddress@opcode:
  2740                           	opt stack 0
  2741  000084                     memory_txFrameRequest@length:
  2742                           	opt stack 0
  2743  000084                     intToString@val:
  2744                           	opt stack 0
  2745                           
  2746                           ; 4 bytes @ 0x24
  2747  000084                     	ds	1
  2748  000085                     ethernetController_writeDestinationMACAddress@i_646:
  2749                           	opt stack 0
  2750                           
  2751                           ; 1 bytes @ 0x25
  2752  000085                     	ds	1
  2753  000086                     ethernetController_writeDestinationMACAddress@i:
  2754                           	opt stack 0
  2755  000086                     arp_init@i:
  2756                           	opt stack 0
  2757                           
  2758                           ; 1 bytes @ 0x26
  2759  000086                     	ds	1
  2760  000087                     ipAdressToString@pointer:
  2761                           	opt stack 0
  2762                           
  2763                           ; 1 bytes @ 0x27
  2764  000087                     	ds	1
  2765  000088                     ipAdressToString@i:
  2766                           	opt stack 0
  2767                           
  2768                           ; 1 bytes @ 0x28
  2769  000088                     	ds	3
  2770  00008B                     ??_ipv4_parseHeader:
  2771                           
  2772                           ; 1 bytes @ 0x2B
  2773  00008B                     	ds	1
  2774  00008C                     ipv4_parseHeader@i:
  2775                           	opt stack 0
  2776                           
  2777                           ; 1 bytes @ 0x2C
  2778  00008C                     	ds	1
  2779  00008D                     ??_memory_txFrameRequest:
  2780  00008D                     ipv4_parseHeader@i_3585:
  2781                           	opt stack 0
  2782                           
  2783                           ; 1 bytes @ 0x2D
  2784  00008D                     	ds	1
  2785  00008E                     ipv4_parseHeader@temp:
  2786                           	opt stack 0
  2787                           
  2788                           ; 1 bytes @ 0x2E
  2789  00008E                     	ds	1
  2790  00008F                     ipv4_parseHeader@ip:
  2791                           	opt stack 0
  2792                           
  2793                           ; 23 bytes @ 0x2F
  2794  00008F                     	ds	4
  2795  000093                     macToString@firstDigit:
  2796                           	opt stack 0
  2797  000093                     _memory_txFrameRequest$1183:
  2798                           	opt stack 0
  2799                           
  2800                           ; 2 bytes @ 0x33
  2801  000093                     	ds	1
  2802  000094                     ??_arp_parseFromRXBuffer:
  2803  000094                     macToString@secondDigit:
  2804                           	opt stack 0
  2805                           
  2806                           ; 1 bytes @ 0x34
  2807  000094                     	ds	1
  2808  000095                     memory_txFrameRequest@fNoOverlapMarker:
  2809                           	opt stack 0
  2810  000095                     macToString@i:
  2811                           	opt stack 0
  2812                           
  2813                           ; 2 bytes @ 0x35
  2814  000095                     	ds	1
  2815  000096                     memory_txFrameRequest@i:
  2816                           	opt stack 0
  2817                           
  2818                           ; 1 bytes @ 0x36
  2819  000096                     	ds	1
  2820  000097                     memory_txFrameRequest@i_1187:
  2821                           	opt stack 0
  2822  000097                     macToString@j:
  2823                           	opt stack 0
  2824  000097                     arp_parseFromRXBuffer@i:
  2825                           	opt stack 0
  2826                           
  2827                           ; 1 bytes @ 0x37
  2828  000097                     	ds	1
  2829  000098                     arp_parseFromRXBuffer@i_2994:
  2830                           	opt stack 0
  2831  000098                     UARTTransmitText@str:
  2832                           	opt stack 0
  2833  000098                     memory_txFrameRequest@field:
  2834                           	opt stack 0
  2835                           
  2836                           ; 9 bytes @ 0x38
  2837  000098                     	ds	1
  2838  000099                     arp_parseFromRXBuffer@i_2995:
  2839                           	opt stack 0
  2840                           
  2841                           ; 1 bytes @ 0x39
  2842  000099                     	ds	1
  2843  00009A                     ??_ipv4_background:
  2844  00009A                     arp_parseFromRXBuffer@i_2996:
  2845                           	opt stack 0
  2846  00009A                     ipv4_checkHeaderChecksum@header:
  2847                           	opt stack 0
  2848  00009A                     printErrorMessage@err:
  2849                           	opt stack 0
  2850  00009A                     UARTTransmitInt@val:
  2851                           	opt stack 0
  2852  00009A                     ipv4_setIPSourceAddress@ip:
  2853                           	opt stack 0
  2854  00009A                     printEthernetState@state:
  2855                           	opt stack 0
  2856                           
  2857                           ; 15 bytes @ 0x3A
  2858  00009A                     	ds	1
  2859  00009B                     arp_parseFromRXBuffer@offset:
  2860                           	opt stack 0
  2861                           
  2862                           ; 2 bytes @ 0x3B
  2863  00009B                     	ds	1
  2864  00009C                     ??_ipv4_checkHeaderChecksum:
  2865  00009C                     ipv4_background@err:
  2866                           	opt stack 0
  2867                           
  2868                           ; 3 bytes @ 0x3C
  2869  00009C                     	ds	1
  2870  00009D                     ??_printErrorMessage:
  2871  00009D                     arp_parseFromRXBuffer@arp:
  2872                           	opt stack 0
  2873                           
  2874                           ; 32 bytes @ 0x3D
  2875  00009D                     	ds	1
  2876  00009E                     ipv4_checkHeaderChecksum@testHeader:
  2877                           	opt stack 0
  2878                           
  2879                           ; 23 bytes @ 0x3E
  2880  00009E                     	ds	3
  2881  0000A1                     memory_txFrameRequest@freeIndex:
  2882                           	opt stack 0
  2883                           
  2884                           ; 1 bytes @ 0x41
  2885  0000A1                     	ds	1
  2886  0000A2                     ethernet_txFrameRequest@frame:
  2887                           	opt stack 0
  2888                           
  2889                           ; 2 bytes @ 0x42
  2890  0000A2                     	ds	2
  2891  0000A4                     ethernet_txFrameRequest@err:
  2892                           	opt stack 0
  2893                           
  2894                           ; 3 bytes @ 0x44
  2895  0000A4                     	ds	3
  2896  0000A7                     arp_send@arp:
  2897                           	opt stack 0
  2898                           
  2899                           ; 32 bytes @ 0x47
  2900  0000A7                     	ds	2
  2901  0000A9                     
  2902                           ; 1 bytes @ 0x49
  2903  0000A9                     	ds	12
  2904  0000B5                     ipv4_handleNewPacket@frame:
  2905                           	opt stack 0
  2906                           
  2907                           ; 2 bytes @ 0x55
  2908  0000B5                     	ds	2
  2909  0000B7                     ??_ipv4_handleNewPacket:
  2910                           
  2911                           ; 1 bytes @ 0x57
  2912  0000B7                     	ds	2
  2913  0000B9                     ipv4_handleNewPacket@headerField:
  2914                           	opt stack 0
  2915                           
  2916                           ; 9 bytes @ 0x59
  2917  0000B9                     	ds	9
  2918  0000C2                     ipv4_handleNewPacket@ip:
  2919                           	opt stack 0
  2920                           
  2921                           ; 23 bytes @ 0x62
  2922  0000C2                     	ds	5
  2923  0000C7                     arp_send@destination:
  2924                           	opt stack 0
  2925                           
  2926                           ; 6 bytes @ 0x67
  2927  0000C7                     	ds	6
  2928  0000CD                     arp_send@i:
  2929                           	opt stack 0
  2930                           
  2931                           ; 1 bytes @ 0x6D
  2932  0000CD                     	ds	1
  2933  0000CE                     arp_send@i_3069:
  2934                           	opt stack 0
  2935                           
  2936                           ; 1 bytes @ 0x6E
  2937  0000CE                     	ds	1
  2938  0000CF                     arp_send@i_3070:
  2939                           	opt stack 0
  2940                           
  2941                           ; 1 bytes @ 0x6F
  2942  0000CF                     	ds	1
  2943  0000D0                     arp_send@i_3071:
  2944                           	opt stack 0
  2945                           
  2946                           ; 1 bytes @ 0x70
  2947  0000D0                     	ds	1
  2948  0000D1                     arp_send@ethFrame:
  2949                           	opt stack 0
  2950                           
  2951                           ; 34 bytes @ 0x71
  2952  0000D1                     	ds	34
  2953  0000F3                     arp_send@field:
  2954                           	opt stack 0
  2955                           
  2956                           ; 9 bytes @ 0x93
  2957  0000F3                     	ds	9
  2958  0000FC                     ?_arp_probe:
  2959                           	opt stack 0
  2960  0000FC                     ?_arp_gratuitous:
  2961                           	opt stack 0
  2962  0000FC                     arp_handleNewPacket@frame:
  2963                           	opt stack 0
  2964  0000FC                     arp_probe@ipTarget:
  2965                           	opt stack 0
  2966  0000FC                     arp_gratuitous@ip:
  2967                           	opt stack 0
  2968                           
  2969                           ; 4 bytes @ 0x9C
  2970  0000FC                     	ds	2
  2971  0000FE                     
  2972                           ; 1 bytes @ 0x9E
  2973  0000FE                     	ds	2
  2974                           tblptru	equ	0xFF8
  2975                           tblptrh	equ	0xFF7
  2976                           tblptrl	equ	0xFF6
  2977                           tablat	equ	0xFF5
  2978                           postinc0	equ	0xFEE
  2979                           wreg	equ	0xFE8
  2980                           postdec1	equ	0xFE5
  2981                           fsr1l	equ	0xFE1
  2982                           
  2983                           	psect	cstackCOMRAM
  2984  000001                     __pcstackCOMRAM:
  2985                           	opt stack 0
  2986  000001                     ?i2___lwdiv:
  2987                           	opt stack 0
  2988  000001                     buttonHandler@state:
  2989                           	opt stack 0
  2990  000001                     i2___lwdiv@dividend:
  2991                           	opt stack 0
  2992                           
  2993                           ; 2 bytes @ 0x0
  2994  000001                     	ds	2
  2995  000003                     i2___lwdiv@divisor:
  2996                           	opt stack 0
  2997  000003                     buttonHandler@resetValue:
  2998                           	opt stack 0
  2999                           
  3000                           ; 4 bytes @ 0x2
  3001  000003                     	ds	2
  3002  000005                     i2___lwdiv@quotient:
  3003                           	opt stack 0
  3004                           
  3005                           ; 2 bytes @ 0x4
  3006  000005                     	ds	2
  3007  000007                     i2___lwdiv@counter:
  3008                           	opt stack 0
  3009  000007                     buttonHandler@debounceValue:
  3010                           	opt stack 0
  3011                           
  3012                           ; 4 bytes @ 0x6
  3013  000007                     	ds	1
  3014  000008                     parseNumber@numberToDisplay:
  3015                           	opt stack 0
  3016                           
  3017                           ; 2 bytes @ 0x7
  3018  000008                     	ds	2
  3019  00000A                     parseNumber@digit:
  3020                           	opt stack 0
  3021                           
  3022                           ; 1 bytes @ 0x9
  3023  00000A                     	ds	1
  3024  00000B                     ??_parseNumber:
  3025                           
  3026                           ; 1 bytes @ 0xA
  3027  00000B                     	ds	1
  3028  00000C                     parseNumber@ones:
  3029                           	opt stack 0
  3030                           
  3031                           ; 1 bytes @ 0xB
  3032  00000C                     	ds	1
  3033  00000D                     parseNumber@tens:
  3034                           	opt stack 0
  3035                           
  3036                           ; 1 bytes @ 0xC
  3037  00000D                     	ds	1
  3038  00000E                     parseNumber@hundreds:
  3039                           	opt stack 0
  3040                           
  3041                           ; 1 bytes @ 0xD
  3042  00000E                     	ds	1
  3043  00000F                     sevenSegmentUpdate@numberToDisplay:
  3044                           	opt stack 0
  3045                           
  3046                           ; 2 bytes @ 0xE
  3047  00000F                     	ds	2
  3048  000011                     ??_sevenSegmentUpdate:
  3049                           
  3050                           ; 1 bytes @ 0x10
  3051  000011                     	ds	2
  3052  000013                     _sevenSegmentUpdate$2458:
  3053                           	opt stack 0
  3054                           
  3055                           ; 2 bytes @ 0x12
  3056  000013                     	ds	2
  3057  000015                     sevenSegmentUpdate@i:
  3058                           	opt stack 0
  3059                           
  3060                           ; 1 bytes @ 0x14
  3061  000015                     	ds	1
  3062  000016                     ??_ISR:
  3063                           
  3064                           ; 1 bytes @ 0x15
  3065  000016                     	ds	19
  3066                           tblptru	equ	0xFF8
  3067                           tblptrh	equ	0xFF7
  3068                           tblptrl	equ	0xFF6
  3069                           tablat	equ	0xFF5
  3070                           postinc0	equ	0xFEE
  3071                           wreg	equ	0xFE8
  3072                           postdec1	equ	0xFE5
  3073                           fsr1l	equ	0xFE1
  3074                           
  3075 ;;
  3076 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  3077 ;;
  3078 ;; *************** function _main *****************
  3079 ;; Defined at:
  3080 ;;		line 33 in file "src/system/main.c"
  3081 ;; Parameters:    Size  Location     Type
  3082 ;;		None
  3083 ;; Auto vars:     Size  Location     Type
  3084 ;;  ipSrc           4   13[BANK3 ] struct ipv4_address
  3085 ;;  ipDst           4    9[BANK3 ] struct ipv4_address
  3086 ;;  prescaler       4    0[BANK3 ] unsigned long 
  3087 ;;  err             3    6[BANK3 ] struct error
  3088 ;;  oldState        1    0        unsigned char 
  3089 ;; Return value:  Size  Location     Type
  3090 ;;                  1    wreg      void 
  3091 ;; Registers used:
  3092 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3093 ;; Tracked objects:
  3094 ;;		On entry : 0/0
  3095 ;;		On exit  : 0/0
  3096 ;;		Unchanged: 0/0
  3097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3098 ;;      Params:         0       0       0       0       0       0       0       0       0
  3099 ;;      Locals:         0       0       0       0      17       0       0       0       0
  3100 ;;      Temps:          0       0       2       0       0       0       0       0       0
  3101 ;;      Totals:         0       0       2       0      17       0       0       0       0
  3102 ;;Total ram usage:       19 bytes
  3103 ;; Hardware stack levels required when called:   14
  3104 ;; This function calls:
  3105 ;;		_UARTInit
  3106 ;;		_UARTTransmitText
  3107 ;;		_ethernetController_checkDeviceId
  3108 ;;		_ethernetController_getCurrentPacketCount
  3109 ;;		_ethernetController_getDeviceName
  3110 ;;		_ethernetController_getMacAddress
  3111 ;;		_ethernetController_init
  3112 ;;		_ethernetController_setLEDConfig
  3113 ;;		_handleStackBackgroundTasks
  3114 ;;		_ipv4_setIPSourceAddress
  3115 ;;		_macToString
  3116 ;;		_printErrorMessage
  3117 ;;		_printEthernetState
  3118 ;;		_sevenSegmentInit
  3119 ;;		_srand
  3120 ;;		_stack_init
  3121 ;; This function is called by:
  3122 ;;		Startup code after reset
  3123 ;; This function uses a non-reentrant model
  3124 ;;
  3125                           
  3126                           	psect	text0
  3127  001510                     __ptext0:
  3128                           	opt stack 0
  3129  001510                     _main:
  3130                           	opt stack 17
  3131                           
  3132                           ;main.c: 36: OSCCONbits.SCS = 0b00;
  3133                           
  3134                           ;incstack = 0
  3135  001510  0EFC               	movlw	-4
  3136  001512  16D3               	andwf	4051,f,c	;volatile
  3137                           
  3138                           ;main.c: 37: OSCCONbits.IRCF = 0b1110;
  3139  001514  50D3               	movf	4051,w,c	;volatile
  3140  001516  0B8F               	andlw	-113
  3141  001518  0960               	iorlw	96
  3142  00151A  6ED3               	movwf	4051,c	;volatile
  3143                           
  3144                           ;main.c: 38: OSCCON2bits.PLLEN = 0b1;
  3145  00151C  88D2               	bsf	4050,4,c	;volatile
  3146                           
  3147                           ;main.c: 41: INTCONbits.GIE = 0;
  3148  00151E  9EF2               	bcf	intcon,7,c	;volatile
  3149                           
  3150                           ;main.c: 42: INTCONbits.TMR0IE = 1;
  3151  001520  8AF2               	bsf	intcon,5,c	;volatile
  3152                           
  3153                           ;main.c: 43: INTCON3bits.INT2IE = 1;
  3154  001522  88F0               	bsf	intcon3,4,c	;volatile
  3155                           
  3156                           ;main.c: 44: RCIP = 0;
  3157  001524  9A9F               	bcf	3999,5,c	;volatile
  3158                           
  3159                           ;main.c: 45: RCIE = 1;
  3160  001526  8A9D               	bsf	3997,5,c	;volatile
  3161                           
  3162                           ;main.c: 46: INTCONbits.PEIE = 1;
  3163  001528  8CF2               	bsf	intcon,6,c	;volatile
  3164                           
  3165                           ;main.c: 50: T0CONbits.TMR0ON = 1;
  3166  00152A  8ED5               	bsf	4053,7,c	;volatile
  3167                           
  3168                           ;main.c: 51: T0CONbits.T08BIT = 1;
  3169  00152C  8CD5               	bsf	4053,6,c	;volatile
  3170                           
  3171                           ;main.c: 52: T0CONbits.T0CS = 0;
  3172  00152E  9AD5               	bcf	4053,5,c	;volatile
  3173                           
  3174                           ;main.c: 53: T0CONbits.PSA = 0;
  3175  001530  96D5               	bcf	4053,3,c	;volatile
  3176                           
  3177                           ;main.c: 54: T0CONbits.T0PS = 0b101;
  3178  001532  50D5               	movf	4053,w,c	;volatile
  3179  001534  0BF8               	andlw	-8
  3180  001536  0905               	iorlw	5
  3181  001538  6ED5               	movwf	4053,c	;volatile
  3182                           
  3183                           ;main.c: 58: T1CONbits.TMR1ON = 1;
  3184  00153A  80CD               	bsf	4045,0,c	;volatile
  3185                           
  3186                           ;main.c: 59: CCP1CONbits.CCP1M = 0b1011;
  3187  00153C  50BD               	movf	4029,w,c	;volatile
  3188  00153E  0BF0               	andlw	-16
  3189  001540  090B               	iorlw	11
  3190  001542  6EBD               	movwf	4029,c	;volatile
  3191                           
  3192                           ;main.c: 60: CCPR1 = 8000;
  3193  001544  0E1F               	movlw	31
  3194  001546  6EBF               	movwf	4031,c	;volatile
  3195  001548  0E40               	movlw	64
  3196  00154A  6EBE               	movwf	4030,c	;volatile
  3197                           
  3198                           ;main.c: 61: PIE1bits.CCP1IE = 1;
  3199  00154C  849D               	bsf	3997,2,c	;volatile
  3200                           
  3201                           ;main.c: 62: INTCONbits.PEIE = 1;
  3202  00154E  8CF2               	bsf	intcon,6,c	;volatile
  3203                           
  3204                           ;main.c: 64: TRISBbits.RB6 = 0;
  3205  001550  9C93               	bcf	3987,6,c	;volatile
  3206                           
  3207                           ;main.c: 67: UARTInit();
  3208  001552  EC4B  F026         	call	_UARTInit	;wreg free
  3209                           
  3210                           ;main.c: 68: sevenSegmentInit();
  3211  001556  ECF7  F025         	call	_sevenSegmentInit	;wreg free
  3212                           
  3213                           ;main.c: 69: _delay((unsigned long)((10)*(32000000UL/4000.0)));
  3214  00155A  0E68               	movlw	104
  3215  00155C  0101               	movlb	1	; () banked
  3216  00155E  6F89               	movwf	??_main& (0+255),b
  3217  001560  0EE4               	movlw	228
  3218  001562                     u11767:
  3219  001562  2EE8               	decfsz	wreg,f,c
  3220  001564  D7FE               	bra	u11767
  3221  001566  2F89               	decfsz	??_main& (0+255),f,b
  3222  001568  D7FC               	bra	u11767
  3223  00156A  F000               	nop	
  3224                           
  3225                           ;main.c: 70: UARTTransmitText("\x12");
  3226  00156C  0EFD               	movlw	low STR_21
  3227  00156E  0100               	movlb	0	; () banked
  3228  001570  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3229  001572  0E7F               	movlw	high STR_21
  3230  001574  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3231  001576  ECC8  F021         	call	_UARTTransmitText	;wreg free
  3232                           
  3233                           ;main.c: 71: if (!RCONbits.TO) {
  3234  00157A  B6D0               	btfsc	4048,3,c	;volatile
  3235  00157C  D015               	goto	l626
  3236                           
  3237                           ;main.c: 72: UARTTransmitText("------------------------------------------------\n\r");
  3238  00157E  0E66               	movlw	low STR_22
  3239  001580  0100               	movlb	0	; () banked
  3240  001582  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3241  001584  0E7B               	movlw	high STR_22
  3242  001586  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3243  001588  ECC8  F021         	call	_UARTTransmitText	;wreg free
  3244                           
  3245                           ;main.c: 73: UARTTransmitText("\a*** CRITICAL ERROR: WATCHDOG CAUSED RESET ***\n\r");
  3246  00158C  0E99               	movlw	low STR_23
  3247  00158E  0100               	movlb	0	; () banked
  3248  001590  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3249  001592  0E7B               	movlw	high STR_23
  3250  001594  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3251  001596  ECC8  F021         	call	_UARTTransmitText	;wreg free
  3252                           
  3253                           ;main.c: 74: UARTTransmitText("------------------------------------------------\n\r");
  3254  00159A  0E66               	movlw	low STR_22
  3255  00159C  0100               	movlb	0	; () banked
  3256  00159E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3257  0015A0  0E7B               	movlw	high STR_22
  3258  0015A2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3259  0015A4  ECC8  F021         	call	_UARTTransmitText	;wreg free
  3260  0015A8                     l626:
  3261                           
  3262                           ;main.c: 75: }
  3263                           ;main.c: 76: UARTTransmitText("FIRMWARE BUILD DATE IS ");
  3264  0015A8  0E0F               	movlw	low STR_25
  3265  0015AA  0100               	movlb	0	; () banked
  3266  0015AC  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3267  0015AE  0E7E               	movlw	high STR_25
  3268  0015B0  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3269  0015B2  ECC8  F021         	call	_UARTTransmitText	;wreg free
  3270                           
  3271                           ;main.c: 77: UARTTransmitText("Mar 17 2019");
  3272  0015B6  0E62               	movlw	low STR_26
  3273  0015B8  0100               	movlb	0	; () banked
  3274  0015BA  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3275  0015BC  0E7F               	movlw	high STR_26
  3276  0015BE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3277  0015C0  ECC8  F021         	call	_UARTTransmitText	;wreg free
  3278                           
  3279                           ;main.c: 78: UARTTransmitText(" ");
  3280  0015C4  0E67               	movlw	low (STR_37+18)
  3281  0015C6  0100               	movlb	0	; () banked
  3282  0015C8  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3283  0015CA  0E7E               	movlw	high (STR_37+18)
  3284  0015CC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3285  0015CE  ECC8  F021         	call	_UARTTransmitText	;wreg free
  3286                           
  3287                           ;main.c: 79: UARTTransmitText("19:46:25");
  3288  0015D2  0EA2               	movlw	low STR_28
  3289  0015D4  0100               	movlb	0	; () banked
  3290  0015D6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3291  0015D8  0E7F               	movlw	high STR_28
  3292  0015DA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3293  0015DC  ECC8  F021         	call	_UARTTransmitText	;wreg free
  3294                           
  3295                           ;main.c: 80: UARTTransmitText(".\n\r");
  3296  0015E0  0EDC               	movlw	low (STR_51+1)
  3297  0015E2  0100               	movlb	0	; () banked
  3298  0015E4  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3299  0015E6  0E7F               	movlw	high (STR_51+1)
  3300  0015E8  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3301  0015EA  ECC8  F021         	call	_UARTTransmitText	;wreg free
  3302                           
  3303                           ;main.c: 81: error_t err;
  3304                           ;main.c: 82: err = ethernetController_init();
  3305  0015EE  ECCB  F01F         	call	_ethernetController_init	;wreg free
  3306  0015F2  C07A  F37F         	movff	?_ethernetController_init,main@err
  3307  0015F6  C07B  F380         	movff	?_ethernetController_init+1,main@err+1
  3308  0015FA  C07C  F381         	movff	?_ethernetController_init+2,main@err+2
  3309                           
  3310                           ;main.c: 83: if (err.code != (uint16_t)0)
  3311  0015FE  0103               	movlb	3	; () banked
  3312  001600  5180               	movf	(main@err+1)& (0+255),w,b
  3313  001602  1181               	iorwf	(main@err+2)& (0+255),w,b
  3314  001604  B4D8               	btfsc	status,2,c
  3315  001606  D008               	goto	l627
  3316                           
  3317                           ; BSR set to: 3
  3318                           ;main.c: 84: printErrorMessage(err);
  3319  001608  C37F  F09A         	movff	main@err,printErrorMessage@err
  3320  00160C  C380  F09B         	movff	main@err+1,printErrorMessage@err+1
  3321  001610  C381  F09C         	movff	main@err+2,printErrorMessage@err+2
  3322  001614  ECFA  F014         	call	_printErrorMessage	;wreg free
  3323  001618                     l627:
  3324                           
  3325                           ;main.c: 85: err = ethernetController_checkDeviceId();
  3326  001618  ECBF  F022         	call	_ethernetController_checkDeviceId	;wreg free
  3327  00161C  C06E  F37F         	movff	?_ethernetController_checkDeviceId,main@err
  3328  001620  C06F  F380         	movff	?_ethernetController_checkDeviceId+1,main@err+1
  3329  001624  C070  F381         	movff	?_ethernetController_checkDeviceId+2,main@err+2
  3330                           
  3331                           ;main.c: 86: if (err.code == (uint16_t)0) {
  3332  001628  0103               	movlb	3	; () banked
  3333  00162A  5180               	movf	(main@err+1)& (0+255),w,b
  3334  00162C  1181               	iorwf	(main@err+2)& (0+255),w,b
  3335  00162E  A4D8               	btfss	status,2,c
  3336  001630  D00F               	goto	l628
  3337                           
  3338                           ; BSR set to: 3
  3339                           ;main.c: 87: UARTTransmitText(ethernetController_getDeviceName());
  3340  001632  ECA6  F025         	call	_ethernetController_getDeviceName	;wreg free
  3341  001636  C060  F098         	movff	?_ethernetController_getDeviceName,UARTTransmitText@str
  3342  00163A  C061  F099         	movff	?_ethernetController_getDeviceName+1,UARTTransmitText@str+1
  3343  00163E  ECC8  F021         	call	_UARTTransmitText	;wreg free
  3344                           
  3345                           ;main.c: 88: UARTTransmitText(" detected. ");
  3346  001642  0E56               	movlw	low STR_30
  3347  001644  0100               	movlb	0	; () banked
  3348  001646  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3349  001648  0E7F               	movlw	high STR_30
  3350  00164A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3351  00164C  ECC8  F021         	call	_UARTTransmitText	;wreg free
  3352  001650                     l628:
  3353                           
  3354                           ;main.c: 89: }
  3355                           ;main.c: 90: UARTTransmitText("Source MAC address is ");
  3356  001650  0E3E               	movlw	low STR_31
  3357  001652  0100               	movlb	0	; () banked
  3358  001654  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3359  001656  0E7E               	movlw	high STR_31
  3360  001658  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3361  00165A  ECC8  F021         	call	_UARTTransmitText	;wreg free
  3362                           
  3363                           ;main.c: 91: UARTTransmitText(macToString(ethernetController_getMacAddress()));
  3364  00165E  EC91  F01F         	call	_ethernetController_getMacAddress	;wreg free
  3365  001662  CFE9 FFD9          	movff	fsr0l,fsr2l
  3366  001666  CFEA FFDA          	movff	fsr0h,fsr2h
  3367  00166A  EE00  F07A         	lfsr	0,macToString@addr
  3368  00166E  0E05               	movlw	5
  3369  001670                     u11681:
  3370  001670  CFDB FFEB          	movff	plusw2,plusw0
  3371  001674  06E8               	decf	wreg,f,c
  3372  001676  E2FC               	bc	u11681
  3373  001678  EC36  F017         	call	_macToString	;wreg free
  3374  00167C  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  3375  001680  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  3376  001684  ECC8  F021         	call	_UARTTransmitText	;wreg free
  3377                           
  3378                           ;main.c: 92: UARTTransmitText(".\n\r");
  3379  001688  0EDC               	movlw	low (STR_51+1)
  3380  00168A  0100               	movlb	0	; () banked
  3381  00168C  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3382  00168E  0E7F               	movlw	high (STR_51+1)
  3383  001690  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3384  001692  ECC8  F021         	call	_UARTTransmitText	;wreg free
  3385                           
  3386                           ;main.c: 93: UARTTransmitText("------------------------------------------------\n\r");
  3387  001696  0E66               	movlw	low STR_22
  3388  001698  0100               	movlb	0	; () banked
  3389  00169A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3390  00169C  0E7B               	movlw	high STR_22
  3391  00169E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3392  0016A0  ECC8  F021         	call	_UARTTransmitText	;wreg free
  3393                           
  3394                           ;main.c: 95: stack_init();
  3395  0016A4  EC6F  F026         	call	_stack_init	;wreg free
  3396                           
  3397                           ;main.c: 97: ethernetController_setLEDConfig(LEDA, LED_ON);
  3398  0016A8  0E00               	movlw	0
  3399  0016AA  0100               	movlb	0	; () banked
  3400  0016AC  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  3401  0016AE  0E00               	movlw	0
  3402  0016B0  EC0C  F01D         	call	_ethernetController_setLEDConfig
  3403                           
  3404                           ;main.c: 98: ethernetController_setLEDConfig(LEDA, LED_ON);
  3405  0016B4  0E00               	movlw	0
  3406  0016B6  0100               	movlb	0	; () banked
  3407  0016B8  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  3408  0016BA  0E00               	movlw	0
  3409  0016BC  EC0C  F01D         	call	_ethernetController_setLEDConfig
  3410                           
  3411                           ;main.c: 99: _delay((unsigned long)((500)*(32000000UL/4000.0)));
  3412  0016C0  0E15               	movlw	21
  3413  0016C2  0101               	movlb	1	; () banked
  3414  0016C4  6F8A               	movwf	(??_main+1)& (0+255),b
  3415  0016C6  0E4B               	movlw	75
  3416  0016C8  6F89               	movwf	??_main& (0+255),b
  3417  0016CA  0EBE               	movlw	190
  3418  0016CC                     u11777:
  3419  0016CC  2EE8               	decfsz	wreg,f,c
  3420  0016CE  D7FE               	bra	u11777
  3421  0016D0  2F89               	decfsz	??_main& (0+255),f,b
  3422  0016D2  D7FC               	bra	u11777
  3423  0016D4  2F8A               	decfsz	(??_main+1)& (0+255),f,b
  3424  0016D6  D7FA               	bra	u11777
  3425  0016D8  F000               	nop	
  3426                           
  3427                           ;main.c: 101: ethernetController_setLEDConfig(LEDA, LED_OFF);
  3428  0016DA  0E01               	movlw	1
  3429  0016DC  0100               	movlb	0	; () banked
  3430  0016DE  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  3431  0016E0  0E00               	movlw	0
  3432  0016E2  EC0C  F01D         	call	_ethernetController_setLEDConfig
  3433                           
  3434                           ;main.c: 102: ethernetController_setLEDConfig(LEDA, LED_OFF);
  3435  0016E6  0E01               	movlw	1
  3436  0016E8  0100               	movlb	0	; () banked
  3437  0016EA  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  3438  0016EC  0E00               	movlw	0
  3439  0016EE  EC0C  F01D         	call	_ethernetController_setLEDConfig
  3440                           
  3441                           ;main.c: 105: uint32_t prescaler = 0;
  3442  0016F2  0E00               	movlw	0
  3443  0016F4  0103               	movlb	3	; () banked
  3444  0016F6  6F79               	movwf	main@prescaler& (0+255),b
  3445  0016F8  0E00               	movlw	0
  3446  0016FA  6F7A               	movwf	(main@prescaler+1)& (0+255),b
  3447  0016FC  0E00               	movlw	0
  3448  0016FE  6F7B               	movwf	(main@prescaler+2)& (0+255),b
  3449  001700  0E00               	movlw	0
  3450  001702  6F7C               	movwf	(main@prescaler+3)& (0+255),b
  3451                           
  3452                           ; BSR set to: 3
  3453                           ;main.c: 107: ANSELB &= ~(1<<5);
  3454  001704  010F               	movlb	15	; () banked
  3455  001706  9B5C               	bcf	92,5,b	;volatile
  3456                           
  3457                           ; BSR set to: 15
  3458                           ;main.c: 108: TRISB |= (1<<5);
  3459  001708  8A93               	bsf	3987,5,c	;volatile
  3460                           
  3461                           ; BSR set to: 15
  3462                           ;main.c: 110: uint8_t oldState;
  3463                           ;main.c: 112: ipv4_address_t ipSrc;
  3464                           ;main.c: 113: ipSrc.address[0] = 192;
  3465  00170A  0EC0               	movlw	192
  3466  00170C  0103               	movlb	3	; () banked
  3467  00170E  6F86               	movwf	main@ipSrc& (0+255),b
  3468                           
  3469                           ; BSR set to: 3
  3470                           ;main.c: 114: ipSrc.address[1] = 168;
  3471  001710  0EA8               	movlw	168
  3472  001712  6F87               	movwf	(main@ipSrc+1)& (0+255),b
  3473                           
  3474                           ; BSR set to: 3
  3475                           ;main.c: 115: ipSrc.address[2] = 0;
  3476  001714  0E00               	movlw	0
  3477  001716  6F88               	movwf	(main@ipSrc+2)& (0+255),b
  3478                           
  3479                           ; BSR set to: 3
  3480                           ;main.c: 116: ipSrc.address[3] = 1;
  3481  001718  0E01               	movlw	1
  3482  00171A  6F89               	movwf	(main@ipSrc+3)& (0+255),b
  3483                           
  3484                           ; BSR set to: 3
  3485                           ;main.c: 118: ipv4_address_t ipDst;
  3486                           ;main.c: 119: ipDst.address[0] = 192;
  3487  00171C  0EC0               	movlw	192
  3488  00171E  6F82               	movwf	main@ipDst& (0+255),b
  3489                           
  3490                           ; BSR set to: 3
  3491                           ;main.c: 120: ipDst.address[1] = 168;
  3492  001720  0EA8               	movlw	168
  3493  001722  6F83               	movwf	(main@ipDst+1)& (0+255),b
  3494                           
  3495                           ; BSR set to: 3
  3496                           ;main.c: 121: ipDst.address[2] = 0;
  3497  001724  0E00               	movlw	0
  3498  001726  6F84               	movwf	(main@ipDst+2)& (0+255),b
  3499                           
  3500                           ; BSR set to: 3
  3501                           ;main.c: 122: ipDst.address[3] = 4;
  3502  001728  0E04               	movlw	4
  3503  00172A  6F85               	movwf	(main@ipDst+3)& (0+255),b
  3504                           
  3505                           ; BSR set to: 3
  3506                           ;main.c: 125: INTCONbits.GIE = 1;
  3507  00172C  8EF2               	bsf	intcon,7,c	;volatile
  3508                           
  3509                           ; BSR set to: 3
  3510                           ;main.c: 126: INTCONbits.PEIE = 1;
  3511  00172E  8CF2               	bsf	intcon,6,c	;volatile
  3512                           
  3513                           ; BSR set to: 3
  3514                           ;main.c: 130: srand(ethernetController_getMacAddress().address[5]);
  3515  001730  EC91  F01F         	call	_ethernetController_getMacAddress	;wreg free
  3516  001734  0E05               	movlw	5
  3517  001736  26E9               	addwf	fsr0l,f,c
  3518  001738  0E00               	movlw	0
  3519  00173A  22EA               	addwfc	fsr0h,f,c
  3520  00173C  50EF               	movf	indf0,w,c
  3521  00173E  0101               	movlb	1	; () banked
  3522  001740  6F89               	movwf	??_main& (0+255),b
  3523  001742  5189               	movf	??_main& (0+255),w,b
  3524  001744  0100               	movlb	0	; () banked
  3525  001746  6F7A               	movwf	srand@x& (0+255),b
  3526  001748  6B7B               	clrf	(srand@x+1)& (0+255),b
  3527  00174A  EC53  F026         	call	_srand	;wreg free
  3528                           
  3529                           ;main.c: 131: ipv4_setIPSourceAddress(ipSrc);
  3530  00174E  C386  F09A         	movff	main@ipSrc,ipv4_setIPSourceAddress@ip
  3531  001752  C387  F09B         	movff	main@ipSrc+1,ipv4_setIPSourceAddress@ip+1
  3532  001756  C388  F09C         	movff	main@ipSrc+2,ipv4_setIPSourceAddress@ip+2
  3533  00175A  C389  F09D         	movff	main@ipSrc+3,ipv4_setIPSourceAddress@ip+3
  3534  00175E  EC70  F022         	call	_ipv4_setIPSourceAddress	;wreg free
  3535  001762                     l629:
  3536  001762  0004               	clrwdt		;# 
  3537                           
  3538                           ;main.c: 136: handleStackBackgroundTasks(&stack);
  3539  001764  0E00               	movlw	low _stack
  3540  001766  0101               	movlb	1	; () banked
  3541  001768  6F86               	movwf	handleStackBackgroundTasks@stack& (0+255),b
  3542  00176A  0E03               	movlw	high _stack
  3543  00176C  6F87               	movwf	(handleStackBackgroundTasks@stack+1)& (0+255),b
  3544  00176E  ECBC  F018         	call	_handleStackBackgroundTasks	;wreg free
  3545                           
  3546                           ;main.c: 138: printEthernetState(stack.ethernet);
  3547  001772  EE23  F000         	lfsr	2,_stack	;volatile
  3548  001776  EE00  F09A         	lfsr	0,printEthernetState@state
  3549  00177A  0E0E               	movlw	14
  3550  00177C                     u11691:
  3551  00177C  CFDB FFEB          	movff	plusw2,plusw0
  3552  001780  06E8               	decf	wreg,f,c
  3553  001782  E2FC               	bc	u11691
  3554  001784  ECBB  F01C         	call	_printEthernetState	;wreg free
  3555                           
  3556                           ;main.c: 139: numberToDisplay = (stack.ethernet.link == NO_LINK) ? 1000 : ethernetContro
      +                          ller_getCurrentPacketCount();
  3557  001788  0103               	movlb	3	; () banked
  3558  00178A  5100               	movf	_stack& (0+255),w,b	;volatile
  3559  00178C  B4D8               	btfsc	status,2,c
  3560  00178E  D009               	goto	l631
  3561                           
  3562                           ; BSR set to: 3
  3563  001790  EC85  F026         	call	_ethernetController_getCurrentPacketCount	;wreg free
  3564  001794  0101               	movlb	1	; () banked
  3565  001796  6F89               	movwf	??_main& (0+255),b
  3566  001798  5189               	movf	??_main& (0+255),w,b
  3567  00179A  0103               	movlb	3	; () banked
  3568  00179C  6F7D               	movwf	_main$2374& (0+255),b
  3569  00179E  6B7E               	clrf	(_main$2374+1)& (0+255),b
  3570  0017A0  D004               	goto	l633
  3571  0017A2                     l631:
  3572                           
  3573                           ; BSR set to: 3
  3574                           
  3575                           ; BSR set to: 3
  3576  0017A2  0E03               	movlw	3
  3577  0017A4  6F7E               	movwf	(_main$2374+1)& (0+255),b
  3578  0017A6  0EE8               	movlw	232
  3579  0017A8  6F7D               	movwf	_main$2374& (0+255),b
  3580  0017AA                     l633:
  3581                           
  3582                           ; BSR set to: 3
  3583                           
  3584                           ; BSR set to: 3
  3585  0017AA  C37D  F031         	movff	_main$2374,_numberToDisplay	;volatile
  3586  0017AE  C37E  F032         	movff	_main$2374+1,_numberToDisplay+1	;volatile
  3587  0017B2  0E00               	movlw	0
  3588  0017B4  BE32               	btfsc	_numberToDisplay+1,7,c	;volatile
  3589  0017B6  0EFF               	movlw	-1
  3590  0017B8  6E33               	movwf	_numberToDisplay+2,c	;volatile
  3591  0017BA  6E34               	movwf	_numberToDisplay+3,c	;volatile
  3592                           
  3593                           ; BSR set to: 3
  3594                           ;main.c: 141: if (buttonState) {
  3595  0017BC  0101               	movlb	1	; () banked
  3596  0017BE  51F0               	movf	_buttonState& (0+255),w,b	;volatile
  3597  0017C0  B4D8               	btfsc	status,2,c
  3598  0017C2  D7CF               	goto	l629
  3599                           
  3600                           ; BSR set to: 1
  3601                           ;main.c: 142: buttonState = 0;
  3602  0017C4  0E00               	movlw	0
  3603  0017C6  6FF0               	movwf	_buttonState& (0+255),b	;volatile
  3604                           
  3605                           ; BSR set to: 1
  3606                           ;main.c: 144: ipv4_setIPSourceAddress(ipSrc);
  3607  0017C8  C386  F09A         	movff	main@ipSrc,ipv4_setIPSourceAddress@ip
  3608  0017CC  C387  F09B         	movff	main@ipSrc+1,ipv4_setIPSourceAddress@ip+1
  3609  0017D0  C388  F09C         	movff	main@ipSrc+2,ipv4_setIPSourceAddress@ip+2
  3610  0017D4  C389  F09D         	movff	main@ipSrc+3,ipv4_setIPSourceAddress@ip+3
  3611  0017D8  EC70  F022         	call	_ipv4_setIPSourceAddress	;wreg free
  3612  0017DC  D7C2               	goto	l629
  3613  0017DE                     __end_of_main:
  3614                           	opt stack 0
  3615                           tblptru	equ	0xFF8
  3616                           tblptrh	equ	0xFF7
  3617                           tblptrl	equ	0xFF6
  3618                           tablat	equ	0xFF5
  3619                           intcon	equ	0xFF2
  3620                           intcon3	equ	0xFF0
  3621                           indf0	equ	0xFEF
  3622                           postinc0	equ	0xFEE
  3623                           plusw0	equ	0xFEB
  3624                           fsr0h	equ	0xFEA
  3625                           fsr0l	equ	0xFE9
  3626                           wreg	equ	0xFE8
  3627                           postdec1	equ	0xFE5
  3628                           fsr1l	equ	0xFE1
  3629                           plusw2	equ	0xFDB
  3630                           fsr2h	equ	0xFDA
  3631                           fsr2l	equ	0xFD9
  3632                           status	equ	0xFD8
  3633                           
  3634 ;; *************** function _stack_init *****************
  3635 ;; Defined at:
  3636 ;;		line 27 in file "src/stack/stack.c"
  3637 ;; Parameters:    Size  Location     Type
  3638 ;;		None
  3639 ;; Auto vars:     Size  Location     Type
  3640 ;;		None
  3641 ;; Return value:  Size  Location     Type
  3642 ;;                  3  532[None  ] struct error
  3643 ;; Registers used:
  3644 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3645 ;; Tracked objects:
  3646 ;;		On entry : 0/0
  3647 ;;		On exit  : 0/0
  3648 ;;		Unchanged: 0/0
  3649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3650 ;;      Params:         0       0       0       0       0       0       0       0       0
  3651 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3652 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3653 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3654 ;;Total ram usage:        0 bytes
  3655 ;; Hardware stack levels used:    1
  3656 ;; Hardware stack levels required when called:    6
  3657 ;; This function calls:
  3658 ;;		_arp_init
  3659 ;;		_ipv4_init
  3660 ;; This function is called by:
  3661 ;;		_main
  3662 ;; This function uses a non-reentrant model
  3663 ;;
  3664                           
  3665                           	psect	text1
  3666  004CDE                     __ptext1:
  3667                           	opt stack 0
  3668  004CDE                     _stack_init:
  3669                           	opt stack 24
  3670                           
  3671                           ;stack.c: 28: arp_init();
  3672                           
  3673                           ;incstack = 0
  3674  004CDE  ECDD  F020         	call	_arp_init	;wreg free
  3675                           
  3676                           ;stack.c: 29: ipv4_init();
  3677  004CE2  EC88  F026         	call	_ipv4_init	;wreg free
  3678  004CE6  0012               	return		;funcret
  3679  004CE8                     __end_of_stack_init:
  3680                           	opt stack 0
  3681                           tblptru	equ	0xFF8
  3682                           tblptrh	equ	0xFF7
  3683                           tblptrl	equ	0xFF6
  3684                           tablat	equ	0xFF5
  3685                           intcon	equ	0xFF2
  3686                           intcon3	equ	0xFF0
  3687                           indf0	equ	0xFEF
  3688                           postinc0	equ	0xFEE
  3689                           plusw0	equ	0xFEB
  3690                           fsr0h	equ	0xFEA
  3691                           fsr0l	equ	0xFE9
  3692                           wreg	equ	0xFE8
  3693                           postdec1	equ	0xFE5
  3694                           fsr1l	equ	0xFE1
  3695                           plusw2	equ	0xFDB
  3696                           fsr2h	equ	0xFDA
  3697                           fsr2l	equ	0xFD9
  3698                           status	equ	0xFD8
  3699                           
  3700 ;; *************** function _ipv4_init *****************
  3701 ;; Defined at:
  3702 ;;		line 321 in file "src/stack/protocols/ipv4.c"
  3703 ;; Parameters:    Size  Location     Type
  3704 ;;		None
  3705 ;; Auto vars:     Size  Location     Type
  3706 ;;		None
  3707 ;; Return value:  Size  Location     Type
  3708 ;;                  1    wreg      void 
  3709 ;; Registers used:
  3710 ;;		None
  3711 ;; Tracked objects:
  3712 ;;		On entry : 0/0
  3713 ;;		On exit  : 0/0
  3714 ;;		Unchanged: 0/0
  3715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3716 ;;      Params:         0       0       0       0       0       0       0       0       0
  3717 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3718 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3719 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3720 ;;Total ram usage:        0 bytes
  3721 ;; Hardware stack levels used:    1
  3722 ;; Hardware stack levels required when called:    4
  3723 ;; This function calls:
  3724 ;;		Nothing
  3725 ;; This function is called by:
  3726 ;;		_stack_init
  3727 ;; This function uses a non-reentrant model
  3728 ;;
  3729                           
  3730                           	psect	text2
  3731  004D10                     __ptext2:
  3732                           	opt stack 0
  3733  004D10                     _ipv4_init:
  3734                           	opt stack 25
  3735                           
  3736                           ;ipv4.c: 322: fSrcAddrChanged = 0;
  3737                           
  3738                           ;incstack = 0
  3739  004D10  904F               	bcf	_fSrcAddrChanged/(0+8),_fSrcAddrChanged& (0+7),c
  3740  004D12  0012               	return		;funcret
  3741  004D14                     __end_of_ipv4_init:
  3742                           	opt stack 0
  3743                           tblptru	equ	0xFF8
  3744                           tblptrh	equ	0xFF7
  3745                           tblptrl	equ	0xFF6
  3746                           tablat	equ	0xFF5
  3747                           intcon	equ	0xFF2
  3748                           intcon3	equ	0xFF0
  3749                           indf0	equ	0xFEF
  3750                           postinc0	equ	0xFEE
  3751                           plusw0	equ	0xFEB
  3752                           fsr0h	equ	0xFEA
  3753                           fsr0l	equ	0xFE9
  3754                           wreg	equ	0xFE8
  3755                           postdec1	equ	0xFE5
  3756                           fsr1l	equ	0xFE1
  3757                           plusw2	equ	0xFDB
  3758                           fsr2h	equ	0xFDA
  3759                           fsr2l	equ	0xFD9
  3760                           status	equ	0xFD8
  3761                           
  3762 ;; *************** function _arp_init *****************
  3763 ;; Defined at:
  3764 ;;		line 418 in file "src/stack/protocols/arp.c"
  3765 ;; Parameters:    Size  Location     Type
  3766 ;;		None
  3767 ;; Auto vars:     Size  Location     Type
  3768 ;;  i               1   38[BANK0 ] unsigned char 
  3769 ;;  mac             6   28[BANK0 ] struct macaddress
  3770 ;;  ip              4   34[BANK0 ] struct ipv4_address
  3771 ;; Return value:  Size  Location     Type
  3772 ;;                  1    wreg      void 
  3773 ;; Registers used:
  3774 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3775 ;; Tracked objects:
  3776 ;;		On entry : 0/0
  3777 ;;		On exit  : 0/0
  3778 ;;		Unchanged: 0/0
  3779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3780 ;;      Params:         0       0       0       0       0       0       0       0       0
  3781 ;;      Locals:         0      11       0       0       0       0       0       0       0
  3782 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3783 ;;      Totals:         0      11       0       0       0       0       0       0       0
  3784 ;;Total ram usage:       11 bytes
  3785 ;; Hardware stack levels used:    1
  3786 ;; Hardware stack levels required when called:    5
  3787 ;; This function calls:
  3788 ;;		_arp_setNewEntry
  3789 ;;		_ipv4_setToAllZero
  3790 ;;		_mac_setAllZero
  3791 ;; This function is called by:
  3792 ;;		_stack_init
  3793 ;; This function uses a non-reentrant model
  3794 ;;
  3795                           
  3796                           	psect	text3
  3797  0041BA                     __ptext3:
  3798                           	opt stack 0
  3799  0041BA                     _arp_init:
  3800                           	opt stack 24
  3801                           
  3802                           ;arp.c: 419: macaddress_t mac;
  3803                           ;arp.c: 420: ipv4_address_t ip;
  3804                           ;arp.c: 421: mac_setAllZero(&mac);
  3805                           
  3806                           ;incstack = 0
  3807  0041BA  0E7C               	movlw	low arp_init@mac
  3808  0041BC  0100               	movlb	0	; () banked
  3809  0041BE  6F60               	movwf	mac_setAllZero@mac& (0+255),b
  3810  0041C0  0E00               	movlw	high arp_init@mac
  3811  0041C2  6F61               	movwf	(mac_setAllZero@mac+1)& (0+255),b
  3812  0041C4  EC6E  F025         	call	_mac_setAllZero	;wreg free
  3813                           
  3814                           ;arp.c: 422: ipv4_setToAllZero(&ip);
  3815  0041C8  0E82               	movlw	low arp_init@ip
  3816  0041CA  0100               	movlb	0	; () banked
  3817  0041CC  6F60               	movwf	ipv4_setToAllZero@ip& (0+255),b
  3818  0041CE  0E00               	movlw	high arp_init@ip
  3819  0041D0  6F61               	movwf	(ipv4_setToAllZero@ip+1)& (0+255),b
  3820  0041D2  ECDA  F025         	call	_ipv4_setToAllZero	;wreg free
  3821                           
  3822                           ;arp.c: 424: for (uint8_t i = 0; i < 8u; i++)
  3823  0041D6  0E00               	movlw	0
  3824  0041D8  0100               	movlb	0	; () banked
  3825  0041DA  6F86               	movwf	arp_init@i& (0+255),b
  3826  0041DC                     l9651:
  3827                           
  3828                           ; BSR set to: 0
  3829  0041DC  0E07               	movlw	7
  3830  0041DE  6586               	cpfsgt	arp_init@i& (0+255),b
  3831  0041E0  D001               	goto	l1030
  3832  0041E2  0012               	return	
  3833  0041E4                     l1030:
  3834                           
  3835                           ; BSR set to: 0
  3836                           ;arp.c: 425: arp_setNewEntry(mac, ip, 0xffffffff);
  3837                           
  3838                           ; BSR set to: 0
  3839  0041E4  EE20  F07C         	lfsr	2,arp_init@mac
  3840  0041E8  EE00  F064         	lfsr	0,arp_setNewEntry@mac
  3841  0041EC  0E05               	movlw	5
  3842  0041EE                     u11431:
  3843  0041EE  CFDB FFEB          	movff	plusw2,plusw0
  3844  0041F2  06E8               	decf	wreg,f,c
  3845  0041F4  E2FC               	bc	u11431
  3846  0041F6  C082  F06A         	movff	arp_init@ip,arp_setNewEntry@ip
  3847  0041FA  C083  F06B         	movff	arp_init@ip+1,arp_setNewEntry@ip+1
  3848  0041FE  C084  F06C         	movff	arp_init@ip+2,arp_setNewEntry@ip+2
  3849  004202  C085  F06D         	movff	arp_init@ip+3,arp_setNewEntry@ip+3
  3850  004206  0EFF               	movlw	255
  3851  004208  6F6E               	movwf	arp_setNewEntry@timestamp& (0+255),b
  3852  00420A  0EFF               	movlw	255
  3853  00420C  6F6F               	movwf	(arp_setNewEntry@timestamp+1)& (0+255),b
  3854  00420E  0EFF               	movlw	255
  3855  004210  6F70               	movwf	(arp_setNewEntry@timestamp+2)& (0+255),b
  3856  004212  0EFF               	movlw	255
  3857  004214  6F71               	movwf	(arp_setNewEntry@timestamp+3)& (0+255),b
  3858  004216  ECAC  F019         	call	_arp_setNewEntry	;wreg free
  3859  00421A  0100               	movlb	0	; () banked
  3860  00421C  2B86               	incf	arp_init@i& (0+255),f,b
  3861  00421E  D7DE               	goto	l9651
  3862  004220                     __end_of_arp_init:
  3863                           	opt stack 0
  3864                           tblptru	equ	0xFF8
  3865                           tblptrh	equ	0xFF7
  3866                           tblptrl	equ	0xFF6
  3867                           tablat	equ	0xFF5
  3868                           intcon	equ	0xFF2
  3869                           intcon3	equ	0xFF0
  3870                           indf0	equ	0xFEF
  3871                           postinc0	equ	0xFEE
  3872                           plusw0	equ	0xFEB
  3873                           fsr0h	equ	0xFEA
  3874                           fsr0l	equ	0xFE9
  3875                           wreg	equ	0xFE8
  3876                           postdec1	equ	0xFE5
  3877                           fsr1l	equ	0xFE1
  3878                           plusw2	equ	0xFDB
  3879                           fsr2h	equ	0xFDA
  3880                           fsr2l	equ	0xFD9
  3881                           status	equ	0xFD8
  3882                           
  3883 ;; *************** function _srand *****************
  3884 ;; Defined at:
  3885 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\rand.c"
  3886 ;; Parameters:    Size  Location     Type
  3887 ;;  x               2   26[BANK0 ] unsigned int 
  3888 ;; Auto vars:     Size  Location     Type
  3889 ;;		None
  3890 ;; Return value:  Size  Location     Type
  3891 ;;                  1    wreg      void 
  3892 ;; Registers used:
  3893 ;;		status,2
  3894 ;; Tracked objects:
  3895 ;;		On entry : 0/0
  3896 ;;		On exit  : 0/0
  3897 ;;		Unchanged: 0/0
  3898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3899 ;;      Params:         0       2       0       0       0       0       0       0       0
  3900 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3901 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3902 ;;      Totals:         0       2       0       0       0       0       0       0       0
  3903 ;;Total ram usage:        2 bytes
  3904 ;; Hardware stack levels used:    1
  3905 ;; Hardware stack levels required when called:    4
  3906 ;; This function calls:
  3907 ;;		Nothing
  3908 ;; This function is called by:
  3909 ;;		_main
  3910 ;; This function uses a non-reentrant model
  3911 ;;
  3912                           
  3913                           	psect	text4
  3914  004CA6                     __ptext4:
  3915                           	opt stack 0
  3916  004CA6                     _srand:
  3917                           	opt stack 26
  3918                           
  3919                           ; BSR set to: 0
  3920                           ;incstack = 0
  3921  004CA6  C07A  F049         	movff	srand@x,_randx
  3922  004CAA  C07B  F04A         	movff	srand@x+1,_randx+1
  3923  004CAE  6A4B               	clrf	_randx+2,c
  3924  004CB0  6A4C               	clrf	_randx+3,c
  3925  004CB2  0012               	return		;funcret
  3926  004CB4                     __end_of_srand:
  3927                           	opt stack 0
  3928                           tblptru	equ	0xFF8
  3929                           tblptrh	equ	0xFF7
  3930                           tblptrl	equ	0xFF6
  3931                           tablat	equ	0xFF5
  3932                           intcon	equ	0xFF2
  3933                           intcon3	equ	0xFF0
  3934                           indf0	equ	0xFEF
  3935                           postinc0	equ	0xFEE
  3936                           plusw0	equ	0xFEB
  3937                           fsr0h	equ	0xFEA
  3938                           fsr0l	equ	0xFE9
  3939                           wreg	equ	0xFE8
  3940                           postdec1	equ	0xFE5
  3941                           fsr1l	equ	0xFE1
  3942                           plusw2	equ	0xFDB
  3943                           fsr2h	equ	0xFDA
  3944                           fsr2l	equ	0xFD9
  3945                           status	equ	0xFD8
  3946                           
  3947 ;; *************** function _sevenSegmentInit *****************
  3948 ;; Defined at:
  3949 ;;		line 28 in file "src/system/sevenseg.c"
  3950 ;; Parameters:    Size  Location     Type
  3951 ;;		None
  3952 ;; Auto vars:     Size  Location     Type
  3953 ;;		None
  3954 ;; Return value:  Size  Location     Type
  3955 ;;                  1    wreg      void 
  3956 ;; Registers used:
  3957 ;;		wreg, status,2, status,0
  3958 ;; Tracked objects:
  3959 ;;		On entry : 0/0
  3960 ;;		On exit  : 0/0
  3961 ;;		Unchanged: 0/0
  3962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3963 ;;      Params:         0       0       0       0       0       0       0       0       0
  3964 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3965 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3966 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3967 ;;Total ram usage:        0 bytes
  3968 ;; Hardware stack levels used:    1
  3969 ;; Hardware stack levels required when called:    4
  3970 ;; This function calls:
  3971 ;;		Nothing
  3972 ;; This function is called by:
  3973 ;;		_main
  3974 ;; This function uses a non-reentrant model
  3975 ;;
  3976                           
  3977                           	psect	text5
  3978  004BEE                     __ptext5:
  3979                           	opt stack 0
  3980  004BEE                     _sevenSegmentInit:
  3981                           	opt stack 26
  3982                           
  3983                           ;sevenseg.c: 30: PORTC &= ~(0x07);
  3984                           
  3985                           ;incstack = 0
  3986  004BEE  0EF8               	movlw	248
  3987  004BF0  1682               	andwf	3970,f,c	;volatile
  3988                           
  3989                           ;sevenseg.c: 32: TRISC&= ~0x07;;
  3990  004BF2  0EF8               	movlw	248
  3991  004BF4  1694               	andwf	3988,f,c	;volatile
  3992                           
  3993                           ;sevenseg.c: 33: TRISA &=~0xff;;
  3994  004BF6  0E00               	movlw	0
  3995  004BF8  6E92               	movwf	3986,c	;volatile
  3996                           
  3997                           ;sevenseg.c: 35: ANSELA&=~0xff;;
  3998  004BFA  0E00               	movlw	0
  3999  004BFC  010F               	movlb	15	; () banked
  4000  004BFE  6F5B               	movwf	91,b	;volatile
  4001                           
  4002                           ;sevenseg.c: 36: ANSELC&= ~0x07;;
  4003  004C00  0EF8               	movlw	248
  4004  004C02  175D               	andwf	93,f,b	;volatile
  4005                           
  4006                           ; BSR set to: 15
  4007                           ;sevenseg.c: 38: PORTA = 0xff;
  4008  004C04  6880               	setf	3968,c	;volatile
  4009                           
  4010                           ; BSR set to: 15
  4011  004C06  0012               	return		;funcret
  4012  004C08                     __end_of_sevenSegmentInit:
  4013                           	opt stack 0
  4014                           tblptru	equ	0xFF8
  4015                           tblptrh	equ	0xFF7
  4016                           tblptrl	equ	0xFF6
  4017                           tablat	equ	0xFF5
  4018                           intcon	equ	0xFF2
  4019                           intcon3	equ	0xFF0
  4020                           indf0	equ	0xFEF
  4021                           postinc0	equ	0xFEE
  4022                           plusw0	equ	0xFEB
  4023                           fsr0h	equ	0xFEA
  4024                           fsr0l	equ	0xFE9
  4025                           wreg	equ	0xFE8
  4026                           postdec1	equ	0xFE5
  4027                           fsr1l	equ	0xFE1
  4028                           plusw2	equ	0xFDB
  4029                           fsr2h	equ	0xFDA
  4030                           fsr2l	equ	0xFD9
  4031                           status	equ	0xFD8
  4032                           
  4033 ;; *************** function _printEthernetState *****************
  4034 ;; Defined at:
  4035 ;;		line 179 in file "src/system/main.c"
  4036 ;; Parameters:    Size  Location     Type
  4037 ;;  state          15   58[BANK0 ] struct ethernetConnectio
  4038 ;; Auto vars:     Size  Location     Type
  4039 ;;		None
  4040 ;; Return value:  Size  Location     Type
  4041 ;;                  1    wreg      void 
  4042 ;; Registers used:
  4043 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4044 ;; Tracked objects:
  4045 ;;		On entry : 0/0
  4046 ;;		On exit  : 0/0
  4047 ;;		Unchanged: 0/0
  4048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4049 ;;      Params:         0      15       0       0       0       0       0       0       0
  4050 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4051 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4052 ;;      Totals:         0      15       0       0       0       0       0       0       0
  4053 ;;Total ram usage:       15 bytes
  4054 ;; Hardware stack levels used:    1
  4055 ;; Hardware stack levels required when called:    5
  4056 ;; This function calls:
  4057 ;;		_UARTTransmitText
  4058 ;; This function is called by:
  4059 ;;		_main
  4060 ;; This function uses a non-reentrant model
  4061 ;;
  4062                           
  4063                           	psect	text6
  4064  003976                     __ptext6:
  4065                           	opt stack 0
  4066  003976                     _printEthernetState:
  4067                           	opt stack 25
  4068                           
  4069                           ;main.c: 180: static ethernetConnection_t oldState;
  4070                           ;main.c: 181: if (state.link != oldState.link) {
  4071                           
  4072                           ; BSR set to: 15
  4073                           ;incstack = 0
  4074  003976  0102               	movlb	2	; () banked
  4075  003978  5100               	movf	printEthernetState@oldState& (0+255),w,b
  4076  00397A  0100               	movlb	0	; () banked
  4077  00397C  199A               	xorwf	printEthernetState@state& (0+255),w,b
  4078  00397E  B4D8               	btfsc	status,2,c
  4079  003980  D041               	goto	l652
  4080                           
  4081                           ; BSR set to: 0
  4082                           ;main.c: 182: if (state.link == NO_LINK) {
  4083  003982  519A               	movf	printEthernetState@state& (0+255),w,b
  4084  003984  A4D8               	btfss	status,2,c
  4085  003986  D007               	goto	l643
  4086                           
  4087                           ; BSR set to: 0
  4088                           ;main.c: 183: UARTTransmitText("Link lost.\n\r");
  4089  003988  0E49               	movlw	low STR_34
  4090  00398A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4091  00398C  0E7F               	movlw	high STR_34
  4092  00398E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4093  003990  ECC8  F021         	call	_UARTTransmitText	;wreg free
  4094                           
  4095                           ;main.c: 184: } else if (state.link == LINK_ESTABLISHED) {
  4096  003994  D00A               	goto	l645
  4097  003996                     l643:
  4098  003996  0100               	movlb	0	; () banked
  4099  003998  059A               	decf	printEthernetState@state& (0+255),w,b
  4100  00399A  A4D8               	btfss	status,2,c
  4101  00399C  D006               	goto	l645
  4102                           
  4103                           ; BSR set to: 0
  4104                           ;main.c: 185: UARTTransmitText("Link established. ");
  4105  00399E  0EA3               	movlw	low STR_35
  4106  0039A0  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4107  0039A2  0E7E               	movlw	high STR_35
  4108  0039A4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4109  0039A6  ECC8  F021         	call	_UARTTransmitText	;wreg free
  4110  0039AA                     l645:
  4111                           
  4112                           ;main.c: 186: }
  4113                           ;main.c: 188: if (state.link == LINK_ESTABLISHED) {
  4114  0039AA  0100               	movlb	0	; () banked
  4115  0039AC  059A               	decf	printEthernetState@state& (0+255),w,b
  4116  0039AE  A4D8               	btfss	status,2,c
  4117  0039B0  D029               	goto	l652
  4118                           
  4119                           ; BSR set to: 0
  4120                           ;main.c: 189: if (state.speed == TEN_MBIT) {
  4121  0039B2  519B               	movf	(printEthernetState@state+1)& (0+255),w,b
  4122  0039B4  A4D8               	btfss	status,2,c
  4123  0039B6  D007               	goto	l647
  4124                           
  4125                           ; BSR set to: 0
  4126                           ;main.c: 190: UARTTransmitText("Speed is 10 Mbps, ");
  4127  0039B8  0E90               	movlw	low STR_36
  4128  0039BA  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4129  0039BC  0E7E               	movlw	high STR_36
  4130  0039BE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4131  0039C0  ECC8  F021         	call	_UARTTransmitText	;wreg free
  4132                           
  4133                           ;main.c: 191: } else if (state.speed == HUNDRED_MBIT) {
  4134  0039C4  D00A               	goto	l649
  4135  0039C6                     l647:
  4136  0039C6  0100               	movlb	0	; () banked
  4137  0039C8  059B               	decf	(printEthernetState@state+1)& (0+255),w,b
  4138  0039CA  A4D8               	btfss	status,2,c
  4139  0039CC  D006               	goto	l649
  4140                           
  4141                           ; BSR set to: 0
  4142                           ;main.c: 192: UARTTransmitText("Speed is 100 Mbps, ");
  4143  0039CE  0E55               	movlw	low STR_37
  4144  0039D0  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4145  0039D2  0E7E               	movlw	high STR_37
  4146  0039D4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4147  0039D6  ECC8  F021         	call	_UARTTransmitText	;wreg free
  4148  0039DA                     l649:
  4149                           
  4150                           ;main.c: 193: }
  4151                           ;main.c: 194: if (state.duplex == HALF_DUPLEX) {
  4152  0039DA  0100               	movlb	0	; () banked
  4153  0039DC  519C               	movf	(printEthernetState@state+2)& (0+255),w,b
  4154  0039DE  A4D8               	btfss	status,2,c
  4155  0039E0  D007               	goto	l650
  4156                           
  4157                           ; BSR set to: 0
  4158                           ;main.c: 195: UARTTransmitText("connection is Half Duplex.\n\r");
  4159  0039E2  0EBD               	movlw	low STR_38
  4160  0039E4  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4161  0039E6  0E7D               	movlw	high STR_38
  4162  0039E8  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4163  0039EA  ECC8  F021         	call	_UARTTransmitText	;wreg free
  4164                           
  4165                           ;main.c: 196: } else if (state.duplex == FULL_DUPLEX) {
  4166  0039EE  D00A               	goto	l652
  4167  0039F0                     l650:
  4168  0039F0  0100               	movlb	0	; () banked
  4169  0039F2  059C               	decf	(printEthernetState@state+2)& (0+255),w,b
  4170  0039F4  A4D8               	btfss	status,2,c
  4171  0039F6  D006               	goto	l652
  4172                           
  4173                           ; BSR set to: 0
  4174                           ;main.c: 198: UARTTransmitText("connection is Full Duplex.\n\r");
  4175  0039F8  0EDA               	movlw	low STR_39
  4176  0039FA  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4177  0039FC  0E7D               	movlw	high STR_39
  4178  0039FE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4179  003A00  ECC8  F021         	call	_UARTTransmitText	;wreg free
  4180  003A04                     l652:
  4181                           
  4182                           ;main.c: 199: }
  4183                           ;main.c: 200: }
  4184                           ;main.c: 201: }
  4185                           ;main.c: 202: oldState = state;
  4186  003A04  EE20  F09A         	lfsr	2,printEthernetState@state
  4187  003A08  EE12  F000         	lfsr	1,printEthernetState@oldState
  4188  003A0C  0E0E               	movlw	14
  4189  003A0E                     u11581:
  4190  003A0E  CFDB FFE3          	movff	plusw2,plusw1
  4191  003A12  06E8               	decf	wreg,f,c
  4192  003A14  E2FC               	bc	u11581
  4193  003A16  0012               	return		;funcret
  4194  003A18                     __end_of_printEthernetState:
  4195                           	opt stack 0
  4196                           tblptru	equ	0xFF8
  4197                           tblptrh	equ	0xFF7
  4198                           tblptrl	equ	0xFF6
  4199                           tablat	equ	0xFF5
  4200                           intcon	equ	0xFF2
  4201                           intcon3	equ	0xFF0
  4202                           indf0	equ	0xFEF
  4203                           postinc0	equ	0xFEE
  4204                           plusw0	equ	0xFEB
  4205                           fsr0h	equ	0xFEA
  4206                           fsr0l	equ	0xFE9
  4207                           wreg	equ	0xFE8
  4208                           postdec1	equ	0xFE5
  4209                           plusw1	equ	0xFE3
  4210                           fsr1l	equ	0xFE1
  4211                           plusw2	equ	0xFDB
  4212                           fsr2h	equ	0xFDA
  4213                           fsr2l	equ	0xFD9
  4214                           status	equ	0xFD8
  4215                           
  4216 ;; *************** function _printErrorMessage *****************
  4217 ;; Defined at:
  4218 ;;		line 205 in file "src/system/main.c"
  4219 ;; Parameters:    Size  Location     Type
  4220 ;;  err             3   58[BANK0 ] struct error
  4221 ;; Auto vars:     Size  Location     Type
  4222 ;;		None
  4223 ;; Return value:  Size  Location     Type
  4224 ;;                  1    wreg      void 
  4225 ;; Registers used:
  4226 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4227 ;; Tracked objects:
  4228 ;;		On entry : 0/0
  4229 ;;		On exit  : 0/0
  4230 ;;		Unchanged: 0/0
  4231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4232 ;;      Params:         0       3       0       0       0       0       0       0       0
  4233 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4234 ;;      Temps:          0       2       0       0       0       0       0       0       0
  4235 ;;      Totals:         0       5       0       0       0       0       0       0       0
  4236 ;;Total ram usage:        5 bytes
  4237 ;; Hardware stack levels used:    1
  4238 ;; Hardware stack levels required when called:    8
  4239 ;; This function calls:
  4240 ;;		_UARTTransmitText
  4241 ;;		_intToString
  4242 ;; This function is called by:
  4243 ;;		_main
  4244 ;; This function uses a non-reentrant model
  4245 ;;
  4246                           
  4247                           	psect	text7
  4248  0029F4                     __ptext7:
  4249                           	opt stack 0
  4250  0029F4                     _printErrorMessage:
  4251                           	opt stack 22
  4252                           
  4253                           ;main.c: 206: UARTTransmitText("[ERROR]");
  4254                           
  4255                           ;incstack = 0
  4256  0029F4  0EAB               	movlw	low STR_40
  4257  0029F6  0100               	movlb	0	; () banked
  4258  0029F8  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4259  0029FA  0E7F               	movlw	high STR_40
  4260  0029FC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4261  0029FE  ECC8  F021         	call	_UARTTransmitText	;wreg free
  4262                           
  4263                           ;main.c: 207: switch (err.module) {
  4264  002A02  D028               	goto	l656
  4265  002A04                     
  4266                           ;main.c: 209: UARTTransmitText(" MEMORY MODULE: ");
  4267  002A04  0EEC               	movlw	low STR_41
  4268  002A06  0100               	movlb	0	; () banked
  4269  002A08  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4270  002A0A  0E7E               	movlw	high STR_41
  4271  002A0C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4272  002A0E  ECC8  F021         	call	_UARTTransmitText	;wreg free
  4273                           
  4274                           ;main.c: 210: break;
  4275  002A12  D050               	goto	l664
  4276  002A14                     
  4277                           ;main.c: 212: UARTTransmitText(" ETHERNET CONTROLLER MODULE: ");
  4278  002A14  0E81               	movlw	low STR_42
  4279  002A16  0100               	movlb	0	; () banked
  4280  002A18  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4281  002A1A  0E7D               	movlw	high STR_42
  4282  002A1C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4283  002A1E  ECC8  F021         	call	_UARTTransmitText	;wreg free
  4284                           
  4285                           ;main.c: 213: break;
  4286  002A22  D048               	goto	l664
  4287  002A24                     
  4288                           ;main.c: 215: UARTTransmitText(" ETHERNET MODULE: ");
  4289  002A24  0EB6               	movlw	low STR_43
  4290  002A26  0100               	movlb	0	; () banked
  4291  002A28  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4292  002A2A  0E7E               	movlw	high STR_43
  4293  002A2C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4294  002A2E  ECC8  F021         	call	_UARTTransmitText	;wreg free
  4295                           
  4296                           ;main.c: 216: break;
  4297  002A32  D040               	goto	l664
  4298  002A34                     
  4299                           ;main.c: 218: UARTTransmitText(" ARP MODULE: ");
  4300  002A34  0E3B               	movlw	low STR_44
  4301  002A36  0100               	movlb	0	; () banked
  4302  002A38  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4303  002A3A  0E7F               	movlw	high STR_44
  4304  002A3C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4305  002A3E  ECC8  F021         	call	_UARTTransmitText	;wreg free
  4306                           
  4307                           ;main.c: 219: break;
  4308  002A42  D038               	goto	l664
  4309  002A44                     
  4310                           ;main.c: 221: UARTTransmitText(" IPv4 MODULE: ");
  4311  002A44  0E2C               	movlw	low STR_45
  4312  002A46  0100               	movlb	0	; () banked
  4313  002A48  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4314  002A4A  0E7F               	movlw	high STR_45
  4315  002A4C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4316  002A4E  ECC8  F021         	call	_UARTTransmitText	;wreg free
  4317                           
  4318                           ;main.c: 224: }
  4319                           
  4320                           ;main.c: 223: break;
  4321                           
  4322                           ;main.c: 222: default:
  4323  002A52  D030               	goto	l664
  4324  002A54                     l656:
  4325  002A54  0100               	movlb	0	; () banked
  4326  002A56  519A               	movf	printErrorMessage@err& (0+255),w,b
  4327                           
  4328                           ; Switch size 1, requested type "space"
  4329                           ; Number of cases is 5, Range of values is 0 to 4
  4330                           ; switch strategies available:
  4331                           ; Name         Instructions Cycles
  4332                           ; simple_byte           16     9 (average)
  4333                           ;	Chosen strategy is simple_byte
  4334  002A58  0A00               	xorlw	0	; case 0
  4335  002A5A  B4D8               	btfsc	status,2,c
  4336  002A5C  D7D3               	goto	l657
  4337  002A5E  0A01               	xorlw	1	; case 1
  4338  002A60  B4D8               	btfsc	status,2,c
  4339  002A62  D7D8               	goto	l659
  4340  002A64  0A03               	xorlw	3	; case 2
  4341  002A66  B4D8               	btfsc	status,2,c
  4342  002A68  D7DD               	goto	l660
  4343  002A6A  0A01               	xorlw	1	; case 3
  4344  002A6C  B4D8               	btfsc	status,2,c
  4345  002A6E  D7E2               	goto	l661
  4346  002A70  0A07               	xorlw	7	; case 4
  4347  002A72  B4D8               	btfsc	status,2,c
  4348  002A74  D7E7               	goto	l662
  4349                           
  4350                           ; BSR set to: 0
  4351                           ;main.c: 225: switch (err.code) {
  4352  002A76  D01E               	goto	l664
  4353  002A78                     
  4354                           ; BSR set to: 0
  4355                           ;main.c: 227: UARTTransmitText("Ethernet controller is unresponsive.");
  4356                           
  4357                           ; BSR set to: 0
  4358  002A78  0E95               	movlw	low STR_46
  4359  002A7A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4360  002A7C  0E7C               	movlw	high STR_46
  4361  002A7E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4362  002A80  ECC8  F021         	call	_UARTTransmitText	;wreg free
  4363                           
  4364                           ;main.c: 228: break;
  4365  002A84  D030               	goto	l666
  4366  002A86                     
  4367                           ;main.c: 230: UARTTransmitText("Ethernet controller has returned an unknown device ID.")
      +                          ;
  4368  002A86  0E2F               	movlw	low STR_47
  4369  002A88  0100               	movlb	0	; () banked
  4370  002A8A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4371  002A8C  0E7B               	movlw	high STR_47
  4372  002A8E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4373  002A90  ECC8  F021         	call	_UARTTransmitText	;wreg free
  4374                           
  4375                           ;main.c: 231: break;
  4376  002A94  D028               	goto	l666
  4377  002A96                     
  4378                           ;main.c: 233: UARTTransmitText("IP address could not be resolved.");
  4379  002A96  0E01               	movlw	low STR_48
  4380  002A98  0100               	movlb	0	; () banked
  4381  002A9A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4382  002A9C  0E7D               	movlw	high STR_48
  4383  002A9E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4384  002AA0  ECC8  F021         	call	_UARTTransmitText	;wreg free
  4385  002AA4                     
  4386                           ;main.c: 236: UARTTransmitText("An unknown error has occured.");
  4387                           
  4388                           ;main.c: 235: case ERROR_ETHERNET_CONTROLLER_UNKNOWN:
  4389  002AA4  0E9F               	movlw	low STR_49
  4390  002AA6  0100               	movlb	0	; () banked
  4391  002AA8  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4392  002AAA  0E7D               	movlw	high STR_49
  4393  002AAC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4394  002AAE  ECC8  F021         	call	_UARTTransmitText	;wreg free
  4395                           
  4396                           ;main.c: 238: }
  4397                           
  4398                           ;main.c: 237: break;
  4399  002AB2  D019               	goto	l666
  4400  002AB4                     l664:
  4401  002AB4  EE20  F09B         	lfsr	2,printErrorMessage@err+1
  4402  002AB8  CFDE F09D          	movff	postinc2,??_printErrorMessage
  4403  002ABC  CFDD F09E          	movff	postdec2,??_printErrorMessage+1
  4404                           
  4405                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4406                           ; Switch size 1, requested type "space"
  4407                           ; Number of cases is 1, Range of values is 1 to 1
  4408                           ; switch strategies available:
  4409                           ; Name         Instructions Cycles
  4410                           ; simple_byte            4     3 (average)
  4411                           ;	Chosen strategy is simple_byte
  4412  002AC0  0100               	movlb	0	; () banked
  4413  002AC2  519E               	movf	(??_printErrorMessage+1)& (0+255),w,b
  4414  002AC4  0A01               	xorlw	1	; case 1
  4415  002AC6  A4D8               	btfss	status,2,c
  4416  002AC8  D7ED               	goto	l669
  4417                           
  4418                           ; BSR set to: 0
  4419                           ; Switch size 1, requested type "space"
  4420                           ; Number of cases is 4, Range of values is 45 to 146
  4421                           ; switch strategies available:
  4422                           ; Name         Instructions Cycles
  4423                           ; simple_byte           13     7 (average)
  4424                           ;	Chosen strategy is simple_byte
  4425  002ACA  519D               	movf	??_printErrorMessage& (0+255),w,b
  4426  002ACC  0A2D               	xorlw	45	; case 45
  4427  002ACE  B4D8               	btfsc	status,2,c
  4428  002AD0  D7DA               	goto	l667
  4429  002AD2  0A03               	xorlw	3	; case 46
  4430  002AD4  B4D8               	btfsc	status,2,c
  4431  002AD6  D7D0               	goto	l665
  4432  002AD8  0AA1               	xorlw	161	; case 143
  4433  002ADA  B4D8               	btfsc	status,2,c
  4434  002ADC  D7E3               	goto	l669
  4435  002ADE  0A1D               	xorlw	29	; case 146
  4436  002AE0  B4D8               	btfsc	status,2,c
  4437  002AE2  D7D9               	goto	l668
  4438  002AE4  D7DF               	goto	l669
  4439  002AE6                     l666:
  4440                           
  4441                           ;main.c: 240: UARTTransmitText(" (Code: ");
  4442                           
  4443                           ; BSR set to: 0
  4444  002AE6  0E99               	movlw	low STR_50
  4445  002AE8  0100               	movlb	0	; () banked
  4446  002AEA  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4447  002AEC  0E7F               	movlw	high STR_50
  4448  002AEE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4449  002AF0  ECC8  F021         	call	_UARTTransmitText	;wreg free
  4450                           
  4451                           ;main.c: 241: UARTTransmitText(intToString(err.code));
  4452  002AF4  C09B  F084         	movff	printErrorMessage@err+1,intToString@val
  4453  002AF8  C09C  F085         	movff	printErrorMessage@err+2,intToString@val+1
  4454  002AFC  0100               	movlb	0	; () banked
  4455  002AFE  6B86               	clrf	(intToString@val+2)& (0+255),b
  4456  002B00  6B87               	clrf	(intToString@val+3)& (0+255),b
  4457  002B02  EC7E  F024         	call	_intToString	;wreg free
  4458  002B06  C084  F098         	movff	?_intToString,UARTTransmitText@str
  4459  002B0A  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  4460  002B0E  ECC8  F021         	call	_UARTTransmitText	;wreg free
  4461                           
  4462                           ;main.c: 242: UARTTransmitText(").\n\r");
  4463  002B12  0EDB               	movlw	low STR_51
  4464  002B14  0100               	movlb	0	; () banked
  4465  002B16  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4466  002B18  0E7F               	movlw	high STR_51
  4467  002B1A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4468  002B1C  ECC8  F021         	call	_UARTTransmitText	;wreg free
  4469  002B20  0012               	return		;funcret
  4470  002B22                     __end_of_printErrorMessage:
  4471                           	opt stack 0
  4472                           tblptru	equ	0xFF8
  4473                           tblptrh	equ	0xFF7
  4474                           tblptrl	equ	0xFF6
  4475                           tablat	equ	0xFF5
  4476                           intcon	equ	0xFF2
  4477                           intcon3	equ	0xFF0
  4478                           indf0	equ	0xFEF
  4479                           postinc0	equ	0xFEE
  4480                           plusw0	equ	0xFEB
  4481                           fsr0h	equ	0xFEA
  4482                           fsr0l	equ	0xFE9
  4483                           wreg	equ	0xFE8
  4484                           postdec1	equ	0xFE5
  4485                           plusw1	equ	0xFE3
  4486                           fsr1l	equ	0xFE1
  4487                           postinc2	equ	0xFDE
  4488                           postdec2	equ	0xFDD
  4489                           plusw2	equ	0xFDB
  4490                           fsr2h	equ	0xFDA
  4491                           fsr2l	equ	0xFD9
  4492                           status	equ	0xFD8
  4493                           
  4494 ;; *************** function _handleStackBackgroundTasks *****************
  4495 ;; Defined at:
  4496 ;;		line 36 in file "src/stack/backgroundTasks.c"
  4497 ;; Parameters:    Size  Location     Type
  4498 ;;  stack           2  134[BANK1 ] PTR volatile struct stac
  4499 ;;		 -> stack(121), 
  4500 ;; Auto vars:     Size  Location     Type
  4501 ;;  foo            10    0        unsigned char [10]
  4502 ;; Return value:  Size  Location     Type
  4503 ;;                  1    wreg      void 
  4504 ;; Registers used:
  4505 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4506 ;; Tracked objects:
  4507 ;;		On entry : 0/0
  4508 ;;		On exit  : 0/0
  4509 ;;		Unchanged: 0/0
  4510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4511 ;;      Params:         0       0       2       0       0       0       0       0       0
  4512 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4513 ;;      Temps:          0       0       1       0       0       0       0       0       0
  4514 ;;      Totals:         0       0       3       0       0       0       0       0       0
  4515 ;;Total ram usage:        3 bytes
  4516 ;; Hardware stack levels used:    1
  4517 ;; Hardware stack levels required when called:   13
  4518 ;; This function calls:
  4519 ;;		_arp_background
  4520 ;;		_ethernetController_clearInterruptFlag
  4521 ;;		_ethernetController_newPacketAvailable
  4522 ;;		_ethernetController_pollInterruptFlags
  4523 ;;		_ethernetController_setLEDConfig
  4524 ;;		_ethernetController_updateLinkStatus
  4525 ;;		_ethernet_rxGetNewFrame
  4526 ;;		_ipv4_background
  4527 ;;		_ipv4_getIPSourceAddress
  4528 ;;		_ipv4_setIPSourceAddress
  4529 ;; This function is called by:
  4530 ;;		_main
  4531 ;; This function uses a non-reentrant model
  4532 ;;
  4533                           
  4534                           	psect	text8
  4535  003178                     __ptext8:
  4536                           	opt stack 0
  4537  003178                     _handleStackBackgroundTasks:
  4538                           	opt stack 17
  4539                           
  4540                           ;backgroundTasks.c: 37: unsigned char foo[10];
  4541                           ;backgroundTasks.c: 39: stack->background.interruptFlags = ethernetController_pollInterr
      +                          uptFlags();
  4542                           
  4543                           ;incstack = 0
  4544  003178  EC4E  F014         	call	_ethernetController_pollInterruptFlags	;wreg free
  4545  00317C  0101               	movlb	1	; () banked
  4546  00317E  EE20 F012          	lfsr	2,18
  4547  003182  5186               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  4548  003184  26D9               	addwf	fsr2l,f,c
  4549  003186  5187               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  4550  003188  22DA               	addwfc	fsr2h,f,c
  4551  00318A  0100               	movlb	0	; () banked
  4552  00318C  C078  FFDE         	movff	?_ethernetController_pollInterruptFlags,postinc2
  4553  003190  C079  FFDD         	movff	?_ethernetController_pollInterruptFlags+1,postdec2
  4554                           
  4555                           ; BSR set to: 0
  4556                           ;backgroundTasks.c: 42: if (stack->background.interruptFlags.LINKIF) {
  4557  003194  0101               	movlb	1	; () banked
  4558  003196  EE20 F012          	lfsr	2,18
  4559  00319A  5186               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  4560  00319C  26D9               	addwf	fsr2l,f,c
  4561  00319E  5187               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  4562  0031A0  22DA               	addwfc	fsr2h,f,c
  4563  0031A2  A6DF               	btfss	indf2,3,c
  4564  0031A4  D035               	goto	l518
  4565                           
  4566                           ; BSR set to: 1
  4567                           ;backgroundTasks.c: 44: ethernetController_updateLinkStatus(&(stack->ethernet));
  4568  0031A6  C186  F080         	movff	handleStackBackgroundTasks@stack,ethernetController_updateLinkStatus@state
  4569  0031AA  C187  F081         	movff	handleStackBackgroundTasks@stack+1,ethernetController_updateLinkStatus@state+1
  4570  0031AE  EC53  F01D         	call	_ethernetController_updateLinkStatus	;wreg free
  4571                           
  4572                           ;backgroundTasks.c: 46: if (stack->ethernet.link == LINK_ESTABLISHED) {
  4573  0031B2  C186  FFD9         	movff	handleStackBackgroundTasks@stack,fsr2l
  4574  0031B6  C187  FFDA         	movff	handleStackBackgroundTasks@stack+1,fsr2h
  4575  0031BA  04DE               	decf	postinc2,w,c
  4576  0031BC  A4D8               	btfss	status,2,c
  4577  0031BE  D00D               	goto	l519
  4578                           
  4579                           ;backgroundTasks.c: 47: ethernetController_setLEDConfig(LEDA, LED_ON);
  4580  0031C0  0E00               	movlw	0
  4581  0031C2  0100               	movlb	0	; () banked
  4582  0031C4  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  4583  0031C6  0E00               	movlw	0
  4584  0031C8  EC0C  F01D         	call	_ethernetController_setLEDConfig
  4585                           
  4586                           ;backgroundTasks.c: 48: ethernetController_setLEDConfig(LEDB, LED_TRANSMIT_RECEIVE_EVENT
      +                          S);
  4587  0031CC  0E02               	movlw	2
  4588  0031CE  0100               	movlb	0	; () banked
  4589  0031D0  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  4590  0031D2  0E01               	movlw	1
  4591  0031D4  EC0C  F01D         	call	_ethernetController_setLEDConfig
  4592                           
  4593                           ;backgroundTasks.c: 49: } else {
  4594  0031D8  D00C               	goto	l520
  4595  0031DA                     l519:
  4596                           
  4597                           ;backgroundTasks.c: 50: ethernetController_setLEDConfig(LEDA, LED_OFF);
  4598  0031DA  0E01               	movlw	1
  4599  0031DC  0100               	movlb	0	; () banked
  4600  0031DE  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  4601  0031E0  0E00               	movlw	0
  4602  0031E2  EC0C  F01D         	call	_ethernetController_setLEDConfig
  4603                           
  4604                           ;backgroundTasks.c: 51: ethernetController_setLEDConfig(LEDB, LED_OFF);
  4605  0031E6  0E01               	movlw	1
  4606  0031E8  0100               	movlb	0	; () banked
  4607  0031EA  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  4608  0031EC  0E01               	movlw	1
  4609  0031EE  EC0C  F01D         	call	_ethernetController_setLEDConfig
  4610  0031F2                     l520:
  4611                           
  4612                           ;backgroundTasks.c: 52: }
  4613                           ;backgroundTasks.c: 54: ipv4_setIPSourceAddress(ipv4_getIPSourceAddress());
  4614  0031F2  EC42  F026         	call	_ipv4_getIPSourceAddress	;wreg free
  4615  0031F6  C060  F09A         	movff	?_ipv4_getIPSourceAddress,ipv4_setIPSourceAddress@ip
  4616  0031FA  C061  F09B         	movff	?_ipv4_getIPSourceAddress+1,ipv4_setIPSourceAddress@ip+1
  4617  0031FE  C062  F09C         	movff	?_ipv4_getIPSourceAddress+2,ipv4_setIPSourceAddress@ip+2
  4618  003202  C063  F09D         	movff	?_ipv4_getIPSourceAddress+3,ipv4_setIPSourceAddress@ip+3
  4619  003206  EC70  F022         	call	_ipv4_setIPSourceAddress	;wreg free
  4620                           
  4621                           ;backgroundTasks.c: 56: ethernetController_clearInterruptFlag(LINKIF);
  4622  00320A  0E0B               	movlw	11
  4623  00320C  EC61  F026         	call	_ethernetController_clearInterruptFlag
  4624  003210                     l518:
  4625                           
  4626                           ;backgroundTasks.c: 57: }
  4627                           ;backgroundTasks.c: 59: if (stack->background.interruptFlags.PKTIF) {
  4628  003210  0101               	movlb	1	; () banked
  4629  003212  EE20 F012          	lfsr	2,18
  4630  003216  5186               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  4631  003218  26D9               	addwf	fsr2l,f,c
  4632  00321A  5187               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  4633  00321C  22DA               	addwfc	fsr2h,f,c
  4634  00321E  A8DF               	btfss	indf2,4,c
  4635  003220  D018               	goto	l522
  4636                           
  4637                           ; BSR set to: 1
  4638                           ;backgroundTasks.c: 61: if (ethernetController_newPacketAvailable()) {
  4639  003222  EC27  F026         	call	_ethernetController_newPacketAvailable	;wreg free
  4640  003226  0900               	iorlw	0
  4641  003228  B4D8               	btfsc	status,2,c
  4642  00322A  D013               	goto	l522
  4643                           
  4644                           ;backgroundTasks.c: 62: stack->background.err = ethernet_rxGetNewFrame(&stack->ethernet)
      +                          ;
  4645  00322C  C186  F178         	movff	handleStackBackgroundTasks@stack,ethernet_rxGetNewFrame@frame
  4646  003230  C187  F179         	movff	handleStackBackgroundTasks@stack+1,ethernet_rxGetNewFrame@frame+1
  4647  003234  EC76  F000         	call	_ethernet_rxGetNewFrame	;wreg free
  4648  003238  0101               	movlb	1	; () banked
  4649  00323A  EE20 F00F          	lfsr	2,15
  4650  00323E  5186               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  4651  003240  26D9               	addwf	fsr2l,f,c
  4652  003242  5187               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  4653  003244  22DA               	addwfc	fsr2h,f,c
  4654  003246  C178  FFDE         	movff	?_ethernet_rxGetNewFrame,postinc2
  4655  00324A  C179  FFDE         	movff	?_ethernet_rxGetNewFrame+1,postinc2
  4656  00324E  C17A  FFDE         	movff	?_ethernet_rxGetNewFrame+2,postinc2
  4657  003252                     l522:
  4658                           
  4659                           ;backgroundTasks.c: 63: }
  4660                           ;backgroundTasks.c: 64: }
  4661                           ;backgroundTasks.c: 69: if (stack->background.fPacketPending) {
  4662                           
  4663                           ; BSR set to: 1
  4664                           
  4665                           ; BSR set to: 1
  4666  003252  0101               	movlb	1	; () banked
  4667  003254  EE20 F014          	lfsr	2,20
  4668  003258  5186               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  4669  00325A  26D9               	addwf	fsr2l,f,c
  4670  00325C  5187               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  4671  00325E  22DA               	addwfc	fsr2h,f,c
  4672                           
  4673                           ; BSR set to: 1
  4674                           ;backgroundTasks.c: 89: }
  4675                           ;backgroundTasks.c: 91: arp_background();
  4676                           
  4677                           ; BSR set to: 1
  4678  003260  ECBA  F017         	call	_arp_background	;wreg free
  4679                           
  4680                           ;backgroundTasks.c: 92: ipv4_background();
  4681  003264  EC13  F012         	call	_ipv4_background	;wreg free
  4682  003268  0012               	return		;funcret
  4683  00326A                     __end_of_handleStackBackgroundTasks:
  4684                           	opt stack 0
  4685                           tblptru	equ	0xFF8
  4686                           tblptrh	equ	0xFF7
  4687                           tblptrl	equ	0xFF6
  4688                           tablat	equ	0xFF5
  4689                           intcon	equ	0xFF2
  4690                           intcon3	equ	0xFF0
  4691                           indf0	equ	0xFEF
  4692                           postinc0	equ	0xFEE
  4693                           plusw0	equ	0xFEB
  4694                           fsr0h	equ	0xFEA
  4695                           fsr0l	equ	0xFE9
  4696                           wreg	equ	0xFE8
  4697                           postdec1	equ	0xFE5
  4698                           plusw1	equ	0xFE3
  4699                           fsr1l	equ	0xFE1
  4700                           indf2	equ	0xFDF
  4701                           postinc2	equ	0xFDE
  4702                           postdec2	equ	0xFDD
  4703                           plusw2	equ	0xFDB
  4704                           fsr2h	equ	0xFDA
  4705                           fsr2l	equ	0xFD9
  4706                           status	equ	0xFD8
  4707                           
  4708 ;; *************** function _ipv4_setIPSourceAddress *****************
  4709 ;; Defined at:
  4710 ;;		line 239 in file "src/stack/protocols/ipv4.c"
  4711 ;; Parameters:    Size  Location     Type
  4712 ;;  ip              4   58[BANK0 ] struct ipv4_address
  4713 ;; Auto vars:     Size  Location     Type
  4714 ;;		None
  4715 ;; Return value:  Size  Location     Type
  4716 ;;                  1    wreg      void 
  4717 ;; Registers used:
  4718 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4719 ;; Tracked objects:
  4720 ;;		On entry : 0/0
  4721 ;;		On exit  : 0/0
  4722 ;;		Unchanged: 0/0
  4723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4724 ;;      Params:         0       4       0       0       0       0       0       0       0
  4725 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4726 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4727 ;;      Totals:         0       4       0       0       0       0       0       0       0
  4728 ;;Total ram usage:        4 bytes
  4729 ;; Hardware stack levels used:    1
  4730 ;; Hardware stack levels required when called:    6
  4731 ;; This function calls:
  4732 ;;		_UARTTransmitText
  4733 ;;		_ipAdressToString
  4734 ;; This function is called by:
  4735 ;;		_handleStackBackgroundTasks
  4736 ;;		_main
  4737 ;; This function uses a non-reentrant model
  4738 ;;
  4739                           
  4740                           	psect	text9
  4741  0044E0                     __ptext9:
  4742                           	opt stack 0
  4743  0044E0                     _ipv4_setIPSourceAddress:
  4744                           	opt stack 24
  4745                           
  4746                           ;ipv4.c: 240: UARTTransmitText("IPv4: Request for new IP source address (");
  4747                           
  4748                           ;incstack = 0
  4749  0044E0  0EF7               	movlw	low STR_86
  4750  0044E2  0100               	movlb	0	; () banked
  4751  0044E4  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4752  0044E6  0E7B               	movlw	high STR_86
  4753  0044E8  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4754  0044EA  ECC8  F021         	call	_UARTTransmitText	;wreg free
  4755                           
  4756                           ;ipv4.c: 241: UARTTransmitText(ipAdressToString(ip));
  4757  0044EE  C09A  F073         	movff	ipv4_setIPSourceAddress@ip,ipAdressToString@ip
  4758  0044F2  C09B  F074         	movff	ipv4_setIPSourceAddress@ip+1,ipAdressToString@ip+1
  4759  0044F6  C09C  F075         	movff	ipv4_setIPSourceAddress@ip+2,ipAdressToString@ip+2
  4760  0044FA  C09D  F076         	movff	ipv4_setIPSourceAddress@ip+3,ipAdressToString@ip+3
  4761  0044FE  EC6F  F00F         	call	_ipAdressToString	;wreg free
  4762  004502  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  4763  004506  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  4764  00450A  ECC8  F021         	call	_UARTTransmitText	;wreg free
  4765                           
  4766                           ;ipv4.c: 242: UARTTransmitText(").\n\r");
  4767  00450E  0EDB               	movlw	low STR_51
  4768  004510  0100               	movlb	0	; () banked
  4769  004512  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4770  004514  0E7F               	movlw	high STR_51
  4771  004516  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4772  004518  ECC8  F021         	call	_UARTTransmitText	;wreg free
  4773                           
  4774                           ;ipv4.c: 243: ipPreliminarySource = ip;
  4775  00451C  C09A  F1D7         	movff	ipv4_setIPSourceAddress@ip,_ipPreliminarySource
  4776  004520  C09B  F1D8         	movff	ipv4_setIPSourceAddress@ip+1,_ipPreliminarySource+1
  4777  004524  C09C  F1D9         	movff	ipv4_setIPSourceAddress@ip+2,_ipPreliminarySource+2
  4778  004528  C09D  F1DA         	movff	ipv4_setIPSourceAddress@ip+3,_ipPreliminarySource+3
  4779                           
  4780                           ;ipv4.c: 244: fSrcAddrChanged = 1;
  4781  00452C  804F               	bsf	_fSrcAddrChanged/(0+8),_fSrcAddrChanged& (0+7),c
  4782  00452E  0012               	return		;funcret
  4783  004530                     __end_of_ipv4_setIPSourceAddress:
  4784                           	opt stack 0
  4785                           tblptru	equ	0xFF8
  4786                           tblptrh	equ	0xFF7
  4787                           tblptrl	equ	0xFF6
  4788                           tablat	equ	0xFF5
  4789                           intcon	equ	0xFF2
  4790                           intcon3	equ	0xFF0
  4791                           indf0	equ	0xFEF
  4792                           postinc0	equ	0xFEE
  4793                           plusw0	equ	0xFEB
  4794                           fsr0h	equ	0xFEA
  4795                           fsr0l	equ	0xFE9
  4796                           wreg	equ	0xFE8
  4797                           postdec1	equ	0xFE5
  4798                           plusw1	equ	0xFE3
  4799                           fsr1l	equ	0xFE1
  4800                           indf2	equ	0xFDF
  4801                           postinc2	equ	0xFDE
  4802                           postdec2	equ	0xFDD
  4803                           plusw2	equ	0xFDB
  4804                           fsr2h	equ	0xFDA
  4805                           fsr2l	equ	0xFD9
  4806                           status	equ	0xFD8
  4807                           
  4808 ;; *************** function _ipv4_background *****************
  4809 ;; Defined at:
  4810 ;;		line 249 in file "src/stack/protocols/ipv4.c"
  4811 ;; Parameters:    Size  Location     Type
  4812 ;;		None
  4813 ;; Auto vars:     Size  Location     Type
  4814 ;;  err             3   60[BANK0 ] struct error
  4815 ;; Return value:  Size  Location     Type
  4816 ;;                  3  513[None  ] struct error
  4817 ;; Registers used:
  4818 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4819 ;; Tracked objects:
  4820 ;;		On entry : 0/0
  4821 ;;		On exit  : 0/0
  4822 ;;		Unchanged: 0/0
  4823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4824 ;;      Params:         0       0       0       0       0       0       0       0       0
  4825 ;;      Locals:         0       3       0       0       0       0       0       0       0
  4826 ;;      Temps:          0       2       0       0       0       0       0       0       0
  4827 ;;      Totals:         0       5       0       0       0       0       0       0       0
  4828 ;;Total ram usage:        5 bytes
  4829 ;; Hardware stack levels used:    1
  4830 ;; Hardware stack levels required when called:    6
  4831 ;; This function calls:
  4832 ;;		_UARTTransmitText
  4833 ;;		_ipAdressToString
  4834 ;; This function is called by:
  4835 ;;		_handleStackBackgroundTasks
  4836 ;; This function uses a non-reentrant model
  4837 ;;
  4838                           
  4839                           	psect	text10
  4840  002426                     __ptext10:
  4841                           	opt stack 0
  4842  002426                     _ipv4_background:
  4843                           	opt stack 23
  4844                           
  4845                           ;ipv4.c: 250: error_t err;
  4846                           ;ipv4.c: 251: err.module = ERROR_MODULE_IPv4;
  4847                           
  4848                           ;incstack = 0
  4849  002426  0E04               	movlw	4
  4850  002428  0100               	movlb	0	; () banked
  4851  00242A  6F9C               	movwf	ipv4_background@err& (0+255),b
  4852                           
  4853                           ;ipv4.c: 252: err.code = (uint16_t)0;
  4854  00242C  0E00               	movlw	0
  4855  00242E  6F9E               	movwf	(ipv4_background@err+2)& (0+255),b
  4856  002430  0E00               	movlw	0
  4857  002432  6F9D               	movwf	(ipv4_background@err+1)& (0+255),b
  4858                           
  4859                           ; BSR set to: 0
  4860                           ;ipv4.c: 253: if ((*arpStatus).module == ERROR_MODULE_ARP && fSrcAddrChanged) {
  4861  002434  C03C  FFD9         	movff	_arpStatus,fsr2l
  4862  002438  C03D  FFDA         	movff	_arpStatus+1,fsr2h
  4863  00243C  0E03               	movlw	3
  4864  00243E  18DE               	xorwf	postinc2,w,c
  4865  002440  A4D8               	btfss	status,2,c
  4866  002442  D0B6               	goto	l1110
  4867                           
  4868                           ; BSR set to: 0
  4869  002444  B04F               	btfsc	_fSrcAddrChanged/(0+8),_fSrcAddrChanged& (0+7),c
  4870  002446  D090               	goto	l1111
  4871  002448  D0B3               	goto	l1110
  4872  00244A                     
  4873                           ; BSR set to: 0
  4874                           ;ipv4.c: 256: err = (*arpStatus);
  4875                           
  4876                           ; BSR set to: 0
  4877  00244A  C03C  FFD9         	movff	_arpStatus,fsr2l
  4878  00244E  C03D  FFDA         	movff	_arpStatus+1,fsr2h
  4879  002452  CFDE F09C          	movff	postinc2,ipv4_background@err
  4880  002456  CFDE F09D          	movff	postinc2,ipv4_background@err+1
  4881  00245A  CFDD F09E          	movff	postdec2,ipv4_background@err+2
  4882                           
  4883                           ; BSR set to: 0
  4884                           ;ipv4.c: 257: return err;
  4885                           ;	Return value of _ipv4_background is never used
  4886  00245E  0012               	return	
  4887  002460                     
  4888                           ; BSR set to: 0
  4889                           ;ipv4.c: 259: err = (*arpStatus);
  4890                           
  4891                           ; BSR set to: 0
  4892  002460  C03C  FFD9         	movff	_arpStatus,fsr2l
  4893  002464  C03D  FFDA         	movff	_arpStatus+1,fsr2h
  4894  002468  CFDE F09C          	movff	postinc2,ipv4_background@err
  4895  00246C  CFDE F09D          	movff	postinc2,ipv4_background@err+1
  4896  002470  CFDD F09E          	movff	postdec2,ipv4_background@err+2
  4897                           
  4898                           ; BSR set to: 0
  4899                           ;ipv4.c: 261: return err;
  4900                           ;	Return value of _ipv4_background is never used
  4901  002474  0012               	return	
  4902  002476                     
  4903                           ; BSR set to: 0
  4904                           ;ipv4.c: 263: UARTTransmitText("IPv4: Address is already in use.\n\r");
  4905                           
  4906                           ; BSR set to: 0
  4907  002476  0EDE               	movlw	low STR_88
  4908  002478  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4909  00247A  0E7C               	movlw	high STR_88
  4910  00247C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4911  00247E  ECC8  F021         	call	_UARTTransmitText	;wreg free
  4912                           
  4913                           ;ipv4.c: 264: fSrcAddrChanged = 0;
  4914  002482  904F               	bcf	_fSrcAddrChanged/(0+8),_fSrcAddrChanged& (0+7),c
  4915                           
  4916                           ;ipv4.c: 265: UARTTransmitText("IPv4: Flag was reset because address change was unsucces
      +                          sful.\n\r");
  4917  002484  0EB4               	movlw	low STR_89
  4918  002486  0100               	movlb	0	; () banked
  4919  002488  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4920  00248A  0E7A               	movlw	high STR_89
  4921  00248C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4922  00248E  ECC8  F021         	call	_UARTTransmitText	;wreg free
  4923                           
  4924                           ;ipv4.c: 266: return err;
  4925                           ;	Return value of _ipv4_background is never used
  4926  002492  0012               	return	
  4927  002494                     
  4928                           ;ipv4.c: 268: err.code = (uint16_t)0;
  4929  002494  0E00               	movlw	0
  4930  002496  0100               	movlb	0	; () banked
  4931  002498  6F9E               	movwf	(ipv4_background@err+2)& (0+255),b
  4932  00249A  0E00               	movlw	0
  4933  00249C  6F9D               	movwf	(ipv4_background@err+1)& (0+255),b
  4934                           
  4935                           ; BSR set to: 0
  4936                           ;ipv4.c: 269: UARTTransmitText("IPv4: ARP sent maximum number of requests.\n\r");
  4937  00249E  0ECA               	movlw	low STR_90
  4938  0024A0  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4939  0024A2  0E7B               	movlw	high STR_90
  4940  0024A4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4941  0024A6  ECC8  F021         	call	_UARTTransmitText	;wreg free
  4942                           
  4943                           ;ipv4.c: 270: UARTTransmitText("IPv4: ARP returned success.\n\r");
  4944  0024AA  0E63               	movlw	low STR_91
  4945  0024AC  0100               	movlb	0	; () banked
  4946  0024AE  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4947  0024B0  0E7D               	movlw	high STR_91
  4948  0024B2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4949  0024B4  ECC8  F021         	call	_UARTTransmitText	;wreg free
  4950                           
  4951                           ;ipv4.c: 271: UARTTransmitText("IPv4: Old IP Src Addr ");
  4952  0024B8  0E27               	movlw	low STR_92
  4953  0024BA  0100               	movlb	0	; () banked
  4954  0024BC  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4955  0024BE  0E7E               	movlw	high STR_92
  4956  0024C0  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4957  0024C2  ECC8  F021         	call	_UARTTransmitText	;wreg free
  4958                           
  4959                           ;ipv4.c: 272: UARTTransmitText(ipAdressToString(ipSource));
  4960  0024C6  C1DF  F073         	movff	_ipSource,ipAdressToString@ip
  4961  0024CA  C1E0  F074         	movff	_ipSource+1,ipAdressToString@ip+1
  4962  0024CE  C1E1  F075         	movff	_ipSource+2,ipAdressToString@ip+2
  4963  0024D2  C1E2  F076         	movff	_ipSource+3,ipAdressToString@ip+3
  4964  0024D6  EC6F  F00F         	call	_ipAdressToString	;wreg free
  4965  0024DA  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  4966  0024DE  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  4967  0024E2  ECC8  F021         	call	_UARTTransmitText	;wreg free
  4968                           
  4969                           ;ipv4.c: 273: ipSource = ipPreliminarySource;
  4970  0024E6  C1D7  F1DF         	movff	_ipPreliminarySource,_ipSource
  4971  0024EA  C1D8  F1E0         	movff	_ipPreliminarySource+1,_ipSource+1
  4972  0024EE  C1D9  F1E1         	movff	_ipPreliminarySource+2,_ipSource+2
  4973  0024F2  C1DA  F1E2         	movff	_ipPreliminarySource+3,_ipSource+3
  4974                           
  4975                           ;ipv4.c: 274: UARTTransmitText(" was set to the preliminary address (");
  4976  0024F6  0E6F               	movlw	low STR_93
  4977  0024F8  0100               	movlb	0	; () banked
  4978  0024FA  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4979  0024FC  0E7C               	movlw	high STR_93
  4980  0024FE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4981  002500  ECC8  F021         	call	_UARTTransmitText	;wreg free
  4982                           
  4983                           ;ipv4.c: 275: UARTTransmitText(ipAdressToString(ipSource));
  4984  002504  C1DF  F073         	movff	_ipSource,ipAdressToString@ip
  4985  002508  C1E0  F074         	movff	_ipSource+1,ipAdressToString@ip+1
  4986  00250C  C1E1  F075         	movff	_ipSource+2,ipAdressToString@ip+2
  4987  002510  C1E2  F076         	movff	_ipSource+3,ipAdressToString@ip+3
  4988  002514  EC6F  F00F         	call	_ipAdressToString	;wreg free
  4989  002518  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  4990  00251C  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  4991  002520  ECC8  F021         	call	_UARTTransmitText	;wreg free
  4992                           
  4993                           ;ipv4.c: 276: UARTTransmitText(").\n\r");
  4994  002524  0EDB               	movlw	low STR_51
  4995  002526  0100               	movlb	0	; () banked
  4996  002528  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4997  00252A  0E7F               	movlw	high STR_51
  4998  00252C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4999  00252E  ECC8  F021         	call	_UARTTransmitText	;wreg free
  5000                           
  5001                           ;ipv4.c: 277: fSrcAddrChanged = 0;
  5002  002532  904F               	bcf	_fSrcAddrChanged/(0+8),_fSrcAddrChanged& (0+7),c
  5003                           
  5004                           ;ipv4.c: 278: UARTTransmitText("IPv4: Flag was reset because address change is complete.
      +                          \n\r");
  5005  002534  0EF4               	movlw	low STR_95
  5006  002536  0100               	movlb	0	; () banked
  5007  002538  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5008  00253A  0E7A               	movlw	high STR_95
  5009  00253C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5010  00253E  ECC8  F021         	call	_UARTTransmitText	;wreg free
  5011                           
  5012                           ;ipv4.c: 279: return err;
  5013                           ;	Return value of _ipv4_background is never used
  5014  002542  0012               	return	
  5015  002544                     
  5016                           ;ipv4.c: 282: err = (*arpStatus);
  5017                           
  5018                           ;ipv4.c: 281: case ERROR_ARP_UNKNOWN:
  5019  002544  C03C  FFD9         	movff	_arpStatus,fsr2l
  5020  002548  C03D  FFDA         	movff	_arpStatus+1,fsr2h
  5021  00254C  CFDE F09C          	movff	postinc2,ipv4_background@err
  5022  002550  CFDE F09D          	movff	postinc2,ipv4_background@err+1
  5023  002554  CFDD F09E          	movff	postdec2,ipv4_background@err+2
  5024                           
  5025                           ;ipv4.c: 283: UARTTransmitText("IPv4: ARP returned an unknown error.\n\r");
  5026  002558  0E21               	movlw	low STR_96
  5027  00255A  0100               	movlb	0	; () banked
  5028  00255C  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5029  00255E  0E7C               	movlw	high STR_96
  5030  002560  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5031  002562  ECC8  F021         	call	_UARTTransmitText	;wreg free
  5032                           
  5033                           ;ipv4.c: 285: }
  5034                           
  5035                           ;ipv4.c: 284: return err;
  5036                           ;	Return value of _ipv4_background is never used
  5037  002566  0012               	return	
  5038  002568                     l1111:
  5039  002568  EE20 F001          	lfsr	2,1
  5040  00256C  503C               	movf	_arpStatus,w,c
  5041  00256E  26D9               	addwf	fsr2l,f,c
  5042  002570  503D               	movf	_arpStatus+1,w,c
  5043  002572  22DA               	addwfc	fsr2h,f,c
  5044  002574  CFDE F09A          	movff	postinc2,??_ipv4_background
  5045  002578  CFDD F09B          	movff	postdec2,??_ipv4_background+1
  5046                           
  5047                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  5048                           ; Switch size 1, requested type "space"
  5049                           ; Number of cases is 2, Range of values is 0 to 1
  5050                           ; switch strategies available:
  5051                           ; Name         Instructions Cycles
  5052                           ; simple_byte            7     4 (average)
  5053                           ;	Chosen strategy is simple_byte
  5054  00257C  0100               	movlb	0	; () banked
  5055  00257E  519B               	movf	(??_ipv4_background+1)& (0+255),w,b
  5056  002580  0A00               	xorlw	0	; case 0
  5057  002582  B4D8               	btfsc	status,2,c
  5058  002584  D004               	goto	l10217
  5059  002586  0A01               	xorlw	1	; case 1
  5060  002588  B4D8               	btfsc	status,2,c
  5061  00258A  D006               	goto	l10219
  5062  00258C  D7DB               	goto	l1117
  5063  00258E                     l10217:
  5064                           
  5065                           ; BSR set to: 0
  5066                           ; Switch size 1, requested type "space"
  5067                           ; Number of cases is 1, Range of values is 0 to 0
  5068                           ; switch strategies available:
  5069                           ; Name         Instructions Cycles
  5070                           ; simple_byte            4     3 (average)
  5071                           ;	Chosen strategy is simple_byte
  5072  00258E  519A               	movf	??_ipv4_background& (0+255),w,b
  5073  002590  0A00               	xorlw	0	; case 0
  5074  002592  B4D8               	btfsc	status,2,c
  5075  002594  D75A               	goto	l1112
  5076  002596  D7D6               	goto	l1117
  5077  002598                     l10219:
  5078                           
  5079                           ; BSR set to: 0
  5080                           ; Switch size 1, requested type "space"
  5081                           ; Number of cases is 4, Range of values is 145 to 243
  5082                           ; switch strategies available:
  5083                           ; Name         Instructions Cycles
  5084                           ; simple_byte           13     7 (average)
  5085                           ;	Chosen strategy is simple_byte
  5086  002598  519A               	movf	??_ipv4_background& (0+255),w,b
  5087  00259A  0A91               	xorlw	145	; case 145
  5088  00259C  B4D8               	btfsc	status,2,c
  5089  00259E  D760               	goto	l1114
  5090  0025A0  0A03               	xorlw	3	; case 146
  5091  0025A2  B4D8               	btfsc	status,2,c
  5092  0025A4  D777               	goto	l1116
  5093  0025A6  0A06               	xorlw	6	; case 148
  5094  0025A8  B4D8               	btfsc	status,2,c
  5095  0025AA  D765               	goto	l1115
  5096  0025AC  0A67               	xorlw	103	; case 243
  5097  0025AE  D7CA               	goto	l1117
  5098  0025B0                     l1110:
  5099                           
  5100                           ; BSR set to: 0
  5101                           ;ipv4.c: 287: err.code = ERROR_IPv4_UNKNOWN;
  5102                           
  5103                           ; BSR set to: 0
  5104  0025B0  0E02               	movlw	2
  5105  0025B2  6F9E               	movwf	(ipv4_background@err+2)& (0+255),b
  5106  0025B4  0E57               	movlw	87
  5107  0025B6  6F9D               	movwf	(ipv4_background@err+1)& (0+255),b
  5108                           
  5109                           ; BSR set to: 0
  5110  0025B8  0012               	return	
  5111  0025BA                     __end_of_ipv4_background:
  5112                           	opt stack 0
  5113                           tblptru	equ	0xFF8
  5114                           tblptrh	equ	0xFF7
  5115                           tblptrl	equ	0xFF6
  5116                           tablat	equ	0xFF5
  5117                           intcon	equ	0xFF2
  5118                           intcon3	equ	0xFF0
  5119                           indf0	equ	0xFEF
  5120                           postinc0	equ	0xFEE
  5121                           plusw0	equ	0xFEB
  5122                           fsr0h	equ	0xFEA
  5123                           fsr0l	equ	0xFE9
  5124                           wreg	equ	0xFE8
  5125                           postdec1	equ	0xFE5
  5126                           plusw1	equ	0xFE3
  5127                           fsr1l	equ	0xFE1
  5128                           indf2	equ	0xFDF
  5129                           postinc2	equ	0xFDE
  5130                           postdec2	equ	0xFDD
  5131                           plusw2	equ	0xFDB
  5132                           fsr2h	equ	0xFDA
  5133                           fsr2l	equ	0xFD9
  5134                           status	equ	0xFD8
  5135                           
  5136 ;; *************** function _ethernet_rxGetNewFrame *****************
  5137 ;; Defined at:
  5138 ;;		line 55 in file "src/eth/ethernet.c"
  5139 ;; Parameters:    Size  Location     Type
  5140 ;;  frame           2  120[BANK1 ] PTR struct ethernetFrame
  5141 ;;		 -> stack.ethernet(15), stack(121), 
  5142 ;; Auto vars:     Size  Location     Type
  5143 ;;  err             3  131[BANK1 ] struct error
  5144 ;; Return value:  Size  Location     Type
  5145 ;;                  3  120[BANK1 ] struct error
  5146 ;; Registers used:
  5147 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5148 ;; Tracked objects:
  5149 ;;		On entry : 0/0
  5150 ;;		On exit  : 0/0
  5151 ;;		Unchanged: 0/0
  5152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5153 ;;      Params:         0       0       3       0       0       0       0       0       0
  5154 ;;      Locals:         0       0       3       0       0       0       0       0       0
  5155 ;;      Temps:          0       0       8       0       0       0       0       0       0
  5156 ;;      Totals:         0       0      14       0       0       0       0       0       0
  5157 ;;Total ram usage:       14 bytes
  5158 ;; Hardware stack levels used:    1
  5159 ;; Hardware stack levels required when called:   12
  5160 ;; This function calls:
  5161 ;;		_UARTTransmitInt
  5162 ;;		_UARTTransmitText
  5163 ;;		_arp_handleNewPacket
  5164 ;;		_etherTypeToString
  5165 ;;		_ethernetController_dropPacket
  5166 ;;		_ethernetController_getEtherTypeField
  5167 ;;		_ethernetController_getNextPacketPointer
  5168 ;;		_ethernetController_getRSV
  5169 ;;		_ethernetController_updateNextPacketPointer
  5170 ;;		_getMillis
  5171 ;;		_intToString
  5172 ;;		_ipv4_handleNewPacket
  5173 ;;		_macToString
  5174 ;; This function is called by:
  5175 ;;		_handleStackBackgroundTasks
  5176 ;; This function uses a non-reentrant model
  5177 ;;
  5178                           
  5179                           	psect	text11
  5180  0000EC                     __ptext11:
  5181                           	opt stack 0
  5182  0000EC                     _ethernet_rxGetNewFrame:
  5183                           	opt stack 17
  5184                           
  5185                           ;ethernet.c: 56: uint32_t static counter = 0;
  5186                           ;ethernet.c: 57: error_t err;
  5187                           ;ethernet.c: 58: err.module = ERROR_MODULE_ETHERNET;
  5188                           
  5189                           ;incstack = 0
  5190  0000EC  0E02               	movlw	2
  5191  0000EE  0101               	movlb	1	; () banked
  5192  0000F0  6F83               	movwf	ethernet_rxGetNewFrame@err& (0+255),b
  5193                           
  5194                           ;ethernet.c: 59: err.code = (uint16_t)0;
  5195  0000F2  0E00               	movlw	0
  5196  0000F4  6F85               	movwf	(ethernet_rxGetNewFrame@err+2)& (0+255),b
  5197  0000F6  0E00               	movlw	0
  5198  0000F8  6F84               	movwf	(ethernet_rxGetNewFrame@err+1)& (0+255),b
  5199                           
  5200                           ; BSR set to: 1
  5201                           ;ethernet.c: 62: frame->tReceived = getMillis();
  5202  0000FA  EC39  F026         	call	_getMillis	;wreg free
  5203  0000FE  0101               	movlb	1	; () banked
  5204  000100  EE20 F01E          	lfsr	2,30
  5205  000104  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5206  000106  26D9               	addwf	fsr2l,f,c
  5207  000108  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5208  00010A  22DA               	addwfc	fsr2h,f,c
  5209  00010C  0100               	movlb	0	; () banked
  5210  00010E  C060  FFDE         	movff	?_getMillis,postinc2
  5211  000112  C061  FFDE         	movff	?_getMillis+1,postinc2
  5212  000116  C062  FFDE         	movff	?_getMillis+2,postinc2
  5213  00011A  C063  FFDE         	movff	?_getMillis+3,postinc2
  5214                           
  5215                           ; BSR set to: 0
  5216                           ;ethernet.c: 63: frame->memory.start = ethernetController_getNextPacketPointer();
  5217  00011E  EC5A  F026         	call	_ethernetController_getNextPacketPointer	;wreg free
  5218  000122  0101               	movlb	1	; () banked
  5219  000124  EE20 F010          	lfsr	2,16
  5220  000128  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5221  00012A  26D9               	addwf	fsr2l,f,c
  5222  00012C  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5223  00012E  22DA               	addwfc	fsr2h,f,c
  5224  000130  0100               	movlb	0	; () banked
  5225  000132  C062  FFDE         	movff	?_ethernetController_getNextPacketPointer,postinc2
  5226  000136  C063  FFDD         	movff	?_ethernetController_getNextPacketPointer+1,postdec2
  5227                           
  5228                           ; BSR set to: 0
  5229                           ;ethernet.c: 64: ethernetController_updateNextPacketPointer();
  5230  00013A  ECDE  F01E         	call	_ethernetController_updateNextPacketPointer	;wreg free
  5231                           
  5232                           ;ethernet.c: 65: frame->memory.fIsAssigned = 1;
  5233  00013E  0101               	movlb	1	; () banked
  5234  000140  EE20 F016          	lfsr	2,22
  5235  000144  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5236  000146  26D9               	addwf	fsr2l,f,c
  5237  000148  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5238  00014A  22DA               	addwfc	fsr2h,f,c
  5239  00014C  0E01               	movlw	1
  5240  00014E  6EDF               	movwf	indf2,c
  5241                           
  5242                           ; BSR set to: 1
  5243                           ;ethernet.c: 66: frame->receiveStatusVector = ethernetController_getRSV(frame->memory.st
      +                          art);
  5244  000150  EE20 F010          	lfsr	2,16
  5245  000154  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5246  000156  26D9               	addwf	fsr2l,f,c
  5247  000158  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5248  00015A  22DA               	addwfc	fsr2h,f,c
  5249  00015C  CFDE F071          	movff	postinc2,ethernetController_getRSV@address
  5250  000160  CFDD F072          	movff	postdec2,ethernetController_getRSV@address+1
  5251  000164  EC57  F01F         	call	_ethernetController_getRSV	;wreg free
  5252  000168  0101               	movlb	1	; () banked
  5253  00016A  EE20 F019          	lfsr	2,25
  5254  00016E  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5255  000170  26D9               	addwf	fsr2l,f,c
  5256  000172  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5257  000174  22DA               	addwfc	fsr2h,f,c
  5258  000176  0E04               	movlw	4
  5259  000178                     u11281:
  5260  000178  CFEB FFDB          	movff	plusw0,plusw2
  5261  00017C  06E8               	decf	wreg,f,c
  5262  00017E  E2FC               	bc	u11281
  5263                           
  5264                           ; BSR set to: 1
  5265                           ;ethernet.c: 67: frame->memory.length = frame->receiveStatusVector.length;
  5266  000180  EE20 F019          	lfsr	2,25
  5267  000184  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5268  000186  26D9               	addwf	fsr2l,f,c
  5269  000188  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5270  00018A  22DA               	addwfc	fsr2h,f,c
  5271  00018C  EE10 F014          	lfsr	1,20
  5272  000190  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5273  000192  26E1               	addwf	fsr1l,f,c
  5274  000194  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5275  000196  22E2               	addwfc	fsr1h,f,c
  5276  000198  CFDE FFE6          	movff	postinc2,postinc1
  5277  00019C  CFDD FFE5          	movff	postdec2,postdec1
  5278                           
  5279                           ; BSR set to: 1
  5280                           ;ethernet.c: 71: if (frame->memory.start + frame->memory.length > 0x5FFF) {
  5281  0001A0  EE20 F014          	lfsr	2,20
  5282  0001A4  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5283  0001A6  26D9               	addwf	fsr2l,f,c
  5284  0001A8  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5285  0001AA  22DA               	addwfc	fsr2h,f,c
  5286  0001AC  CFDE F17B          	movff	postinc2,??_ethernet_rxGetNewFrame
  5287  0001B0  CFDD F17C          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  5288  0001B4  EE20 F010          	lfsr	2,16
  5289  0001B8  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5290  0001BA  26D9               	addwf	fsr2l,f,c
  5291  0001BC  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5292  0001BE  22DA               	addwfc	fsr2h,f,c
  5293  0001C0  CFDE F17D          	movff	postinc2,??_ethernet_rxGetNewFrame+2
  5294  0001C4  CFDD F17E          	movff	postdec2,??_ethernet_rxGetNewFrame+3
  5295  0001C8  517B               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  5296  0001CA  277D               	addwf	(??_ethernet_rxGetNewFrame+2)& (0+255),f,b
  5297  0001CC  517C               	movf	(??_ethernet_rxGetNewFrame+1)& (0+255),w,b
  5298  0001CE  237E               	addwfc	(??_ethernet_rxGetNewFrame+3)& (0+255),f,b
  5299  0001D0  0E60               	movlw	96
  5300  0001D2  5D7E               	subwf	(??_ethernet_rxGetNewFrame+3)& (0+255),w,b
  5301  0001D4  A0D8               	btfss	status,0,c
  5302  0001D6  D03B               	goto	l366
  5303                           
  5304                           ; BSR set to: 1
  5305                           ;ethernet.c: 73: frame->memory.end = frame->memory.length - ((0x5FFF - 0x3000) - frame->
      +                          memory.start) + 0x3000;
  5306  0001D8  0E00               	movlw	0
  5307  0001DA  6F7B               	movwf	??_ethernet_rxGetNewFrame& (0+255),b
  5308  0001DC  0E30               	movlw	48
  5309  0001DE  6F7C               	movwf	(??_ethernet_rxGetNewFrame+1)& (0+255),b
  5310  0001E0  EE20 F014          	lfsr	2,20
  5311  0001E4  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5312  0001E6  26D9               	addwf	fsr2l,f,c
  5313  0001E8  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5314  0001EA  22DA               	addwfc	fsr2h,f,c
  5315  0001EC  CFDE F17D          	movff	postinc2,??_ethernet_rxGetNewFrame+2
  5316  0001F0  CFDD F17E          	movff	postdec2,??_ethernet_rxGetNewFrame+3
  5317  0001F4  0EFF               	movlw	255
  5318  0001F6  6F7F               	movwf	(??_ethernet_rxGetNewFrame+4)& (0+255),b
  5319  0001F8  0E2F               	movlw	47
  5320  0001FA  6F80               	movwf	(??_ethernet_rxGetNewFrame+5)& (0+255),b
  5321  0001FC  EE20 F010          	lfsr	2,16
  5322  000200  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5323  000202  26D9               	addwf	fsr2l,f,c
  5324  000204  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5325  000206  22DA               	addwfc	fsr2h,f,c
  5326  000208  CFDE F181          	movff	postinc2,??_ethernet_rxGetNewFrame+6
  5327  00020C  CFDD F182          	movff	postdec2,??_ethernet_rxGetNewFrame+7
  5328  000210  1F81               	comf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  5329  000212  1F82               	comf	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  5330  000214  4B81               	infsnz	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  5331  000216  2B82               	incf	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  5332  000218  517F               	movf	(??_ethernet_rxGetNewFrame+4)& (0+255),w,b
  5333  00021A  2781               	addwf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  5334  00021C  5180               	movf	(??_ethernet_rxGetNewFrame+5)& (0+255),w,b
  5335  00021E  2382               	addwfc	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  5336  000220  1F81               	comf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  5337  000222  1F82               	comf	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  5338  000224  4B81               	infsnz	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  5339  000226  2B82               	incf	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  5340  000228  517D               	movf	(??_ethernet_rxGetNewFrame+2)& (0+255),w,b
  5341  00022A  2781               	addwf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  5342  00022C  517E               	movf	(??_ethernet_rxGetNewFrame+3)& (0+255),w,b
  5343  00022E  2382               	addwfc	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  5344  000230  517B               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  5345  000232  2781               	addwf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  5346  000234  517C               	movf	(??_ethernet_rxGetNewFrame+1)& (0+255),w,b
  5347  000236  2382               	addwfc	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  5348  000238  EE20 F012          	lfsr	2,18
  5349  00023C  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5350  00023E  26D9               	addwf	fsr2l,f,c
  5351  000240  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5352  000242  22DA               	addwfc	fsr2h,f,c
  5353  000244  C181  FFDE         	movff	??_ethernet_rxGetNewFrame+6,postinc2
  5354  000248  C182  FFDD         	movff	??_ethernet_rxGetNewFrame+7,postdec2
  5355                           
  5356                           ;ethernet.c: 74: } else {
  5357  00024C  D022               	goto	l367
  5358  00024E                     l366:
  5359                           
  5360                           ; BSR set to: 1
  5361                           ;ethernet.c: 75: frame->memory.end = frame->memory.start + frame->memory.length;
  5362                           
  5363                           ; BSR set to: 1
  5364  00024E  EE20 F014          	lfsr	2,20
  5365  000252  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5366  000254  26D9               	addwf	fsr2l,f,c
  5367  000256  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5368  000258  22DA               	addwfc	fsr2h,f,c
  5369  00025A  CFDE F17B          	movff	postinc2,??_ethernet_rxGetNewFrame
  5370  00025E  CFDD F17C          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  5371  000262  EE20 F010          	lfsr	2,16
  5372  000266  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5373  000268  26D9               	addwf	fsr2l,f,c
  5374  00026A  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5375  00026C  22DA               	addwfc	fsr2h,f,c
  5376  00026E  CFDE F17D          	movff	postinc2,??_ethernet_rxGetNewFrame+2
  5377  000272  CFDD F17E          	movff	postdec2,??_ethernet_rxGetNewFrame+3
  5378  000276  517B               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  5379  000278  277D               	addwf	(??_ethernet_rxGetNewFrame+2)& (0+255),f,b
  5380  00027A  517C               	movf	(??_ethernet_rxGetNewFrame+1)& (0+255),w,b
  5381  00027C  237E               	addwfc	(??_ethernet_rxGetNewFrame+3)& (0+255),f,b
  5382  00027E  EE20 F012          	lfsr	2,18
  5383  000282  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5384  000284  26D9               	addwf	fsr2l,f,c
  5385  000286  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5386  000288  22DA               	addwfc	fsr2h,f,c
  5387  00028A  C17D  FFDE         	movff	??_ethernet_rxGetNewFrame+2,postinc2
  5388  00028E  C17E  FFDD         	movff	??_ethernet_rxGetNewFrame+3,postdec2
  5389  000292                     l367:
  5390                           
  5391                           ; BSR set to: 1
  5392                           ;ethernet.c: 76: }
  5393                           ;ethernet.c: 77: frame->ethertype = ethernetController_getEtherTypeField(frame->memory);
  5394                           
  5395                           ; BSR set to: 1
  5396  000292  EE20 F010          	lfsr	2,16
  5397  000296  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5398  000298  26D9               	addwf	fsr2l,f,c
  5399  00029A  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5400  00029C  22DA               	addwfc	fsr2h,f,c
  5401  00029E  EE00  F06F         	lfsr	0,ethernetController_getEtherTypeField@field
  5402  0002A2  0E08               	movlw	8
  5403  0002A4                     u11301:
  5404  0002A4  CFDB FFEB          	movff	plusw2,plusw0
  5405  0002A8  06E8               	decf	wreg,f,c
  5406  0002AA  E2FC               	bc	u11301
  5407  0002AC  EC04  F020         	call	_ethernetController_getEtherTypeField	;wreg free
  5408  0002B0  0101               	movlb	1	; () banked
  5409  0002B2  EE20 F00E          	lfsr	2,14
  5410  0002B6  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5411  0002B8  26D9               	addwf	fsr2l,f,c
  5412  0002BA  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5413  0002BC  22DA               	addwfc	fsr2h,f,c
  5414  0002BE  0100               	movlb	0	; () banked
  5415  0002C0  C06F  FFDE         	movff	?_ethernetController_getEtherTypeField,postinc2
  5416  0002C4  C070  FFDD         	movff	?_ethernetController_getEtherTypeField+1,postdec2
  5417                           
  5418                           ; BSR set to: 0
  5419                           ;ethernet.c: 79: UARTTransmitText("[");
  5420  0002C8  0ECF               	movlw	low (STR_62+3)
  5421  0002CA  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5422  0002CC  0E7F               	movlw	high (STR_62+3)
  5423  0002CE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5424  0002D0  ECC8  F021         	call	_UARTTransmitText	;wreg free
  5425                           
  5426                           ;ethernet.c: 80: UARTTransmitText(intToString(counter++));
  5427  0002D4  C035  F084         	movff	ethernet_rxGetNewFrame@counter,intToString@val
  5428  0002D8  C036  F085         	movff	ethernet_rxGetNewFrame@counter+1,intToString@val+1
  5429  0002DC  C037  F086         	movff	ethernet_rxGetNewFrame@counter+2,intToString@val+2
  5430  0002E0  C038  F087         	movff	ethernet_rxGetNewFrame@counter+3,intToString@val+3
  5431  0002E4  EC7E  F024         	call	_intToString	;wreg free
  5432  0002E8  C084  F098         	movff	?_intToString,UARTTransmitText@str
  5433  0002EC  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  5434  0002F0  ECC8  F021         	call	_UARTTransmitText	;wreg free
  5435  0002F4  0E01               	movlw	1
  5436  0002F6  2635               	addwf	ethernet_rxGetNewFrame@counter,f,c
  5437  0002F8  0E00               	movlw	0
  5438  0002FA  2236               	addwfc	ethernet_rxGetNewFrame@counter+1,f,c
  5439  0002FC  2237               	addwfc	ethernet_rxGetNewFrame@counter+2,f,c
  5440  0002FE  2238               	addwfc	ethernet_rxGetNewFrame@counter+3,f,c
  5441                           
  5442                           ;ethernet.c: 81: UARTTransmitText("]");
  5443  000300  0EFB               	movlw	low (STR_19+1)
  5444  000302  0100               	movlb	0	; () banked
  5445  000304  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5446  000306  0E7F               	movlw	high (STR_19+1)
  5447  000308  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5448  00030A  ECC8  F021         	call	_UARTTransmitText	;wreg free
  5449                           
  5450                           ;ethernet.c: 84: if (frame->receiveStatusVector.broadcast)
  5451  00030E  0101               	movlb	1	; () banked
  5452  000310  EE20 F01B          	lfsr	2,27
  5453  000314  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5454  000316  26D9               	addwf	fsr2l,f,c
  5455  000318  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5456  00031A  22DA               	addwfc	fsr2h,f,c
  5457  00031C  AEDF               	btfss	indf2,7,c
  5458  00031E  D007               	goto	l368
  5459                           
  5460                           ; BSR set to: 1
  5461                           ;ethernet.c: 85: UARTTransmitText("[Broadcast]");
  5462  000320  0E6E               	movlw	low STR_3
  5463  000322  0100               	movlb	0	; () banked
  5464  000324  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5465  000326  0E7F               	movlw	high STR_3
  5466  000328  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5467  00032A  ECC8  F021         	call	_UARTTransmitText	;wreg free
  5468  00032E                     l368:
  5469                           
  5470                           ;ethernet.c: 86: if (frame->receiveStatusVector.unicast)
  5471  00032E  0101               	movlb	1	; () banked
  5472  000330  EE20 F01D          	lfsr	2,29
  5473  000334  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5474  000336  26D9               	addwf	fsr2l,f,c
  5475  000338  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5476  00033A  22DA               	addwfc	fsr2h,f,c
  5477  00033C  A4DF               	btfss	indf2,2,c
  5478  00033E  D007               	goto	l369
  5479                           
  5480                           ; BSR set to: 1
  5481                           ;ethernet.c: 87: UARTTransmitText("[Unicast]");
  5482  000340  0E8F               	movlw	low STR_4
  5483  000342  0100               	movlb	0	; () banked
  5484  000344  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5485  000346  0E7F               	movlw	high STR_4
  5486  000348  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5487  00034A  ECC8  F021         	call	_UARTTransmitText	;wreg free
  5488  00034E                     l369:
  5489                           
  5490                           ;ethernet.c: 88: if (!frame->receiveStatusVector.receivedOk)
  5491  00034E  0101               	movlb	1	; () banked
  5492  000350  EE20 F01B          	lfsr	2,27
  5493  000354  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5494  000356  26D9               	addwf	fsr2l,f,c
  5495  000358  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5496  00035A  22DA               	addwfc	fsr2h,f,c
  5497  00035C  BADF               	btfsc	indf2,5,c
  5498  00035E  D007               	goto	l370
  5499                           
  5500                           ; BSR set to: 1
  5501                           ;ethernet.c: 89: UARTTransmitText("[Symbol Errors]");
  5502  000360  0E0D               	movlw	low STR_5
  5503  000362  0100               	movlb	0	; () banked
  5504  000364  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5505  000366  0E7F               	movlw	high STR_5
  5506  000368  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5507  00036A  ECC8  F021         	call	_UARTTransmitText	;wreg free
  5508  00036E                     l370:
  5509                           
  5510                           ;ethernet.c: 91: UARTTransmitText("[");
  5511  00036E  0ECF               	movlw	low (STR_62+3)
  5512  000370  0100               	movlb	0	; () banked
  5513  000372  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5514  000374  0E7F               	movlw	high (STR_62+3)
  5515  000376  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5516  000378  ECC8  F021         	call	_UARTTransmitText	;wreg free
  5517                           
  5518                           ;ethernet.c: 92: UARTTransmitText(intToString(frame->tReceived));
  5519  00037C  0101               	movlb	1	; () banked
  5520  00037E  EE20 F01E          	lfsr	2,30
  5521  000382  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5522  000384  26D9               	addwf	fsr2l,f,c
  5523  000386  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5524  000388  22DA               	addwfc	fsr2h,f,c
  5525  00038A  CFDE F084          	movff	postinc2,intToString@val
  5526  00038E  CFDE F085          	movff	postinc2,intToString@val+1
  5527  000392  CFDE F086          	movff	postinc2,intToString@val+2
  5528  000396  CFDE F087          	movff	postinc2,intToString@val+3
  5529  00039A  EC7E  F024         	call	_intToString	;wreg free
  5530  00039E  C084  F098         	movff	?_intToString,UARTTransmitText@str
  5531  0003A2  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  5532  0003A6  ECC8  F021         	call	_UARTTransmitText	;wreg free
  5533                           
  5534                           ;ethernet.c: 93: UARTTransmitText("]");
  5535  0003AA  0EFB               	movlw	low (STR_19+1)
  5536  0003AC  0100               	movlb	0	; () banked
  5537  0003AE  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5538  0003B0  0E7F               	movlw	high (STR_19+1)
  5539  0003B2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5540  0003B4  ECC8  F021         	call	_UARTTransmitText	;wreg free
  5541                           
  5542                           ;ethernet.c: 99: switch (frame->ethertype) {
  5543  0003B8  D097               	goto	l371
  5544  0003BA                     
  5545                           ;ethernet.c: 101: UARTTransmitText("[ARP]");
  5546  0003BA  0EC1               	movlw	low STR_8
  5547  0003BC  0100               	movlb	0	; () banked
  5548  0003BE  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5549  0003C0  0E7F               	movlw	high STR_8
  5550  0003C2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5551  0003C4  ECC8  F021         	call	_UARTTransmitText	;wreg free
  5552                           
  5553                           ;ethernet.c: 102: arp_handleNewPacket(frame);
  5554  0003C8  C178  F0FC         	movff	ethernet_rxGetNewFrame@frame,arp_handleNewPacket@frame
  5555  0003CC  C179  F0FD         	movff	ethernet_rxGetNewFrame@frame+1,arp_handleNewPacket@frame+1
  5556  0003D0  EC66  F010         	call	_arp_handleNewPacket	;wreg free
  5557                           
  5558                           ;ethernet.c: 103: break;
  5559  0003D4  D0A0               	goto	l373
  5560  0003D6                     
  5561                           ;ethernet.c: 105: UARTTransmitText("[IPv4]");
  5562  0003D6  0EBA               	movlw	low STR_9
  5563  0003D8  0100               	movlb	0	; () banked
  5564  0003DA  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5565  0003DC  0E7F               	movlw	high STR_9
  5566  0003DE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5567  0003E0  ECC8  F021         	call	_UARTTransmitText	;wreg free
  5568                           
  5569                           ;ethernet.c: 106: ipv4_handleNewPacket(frame);
  5570  0003E4  C178  F0B5         	movff	ethernet_rxGetNewFrame@frame,ipv4_handleNewPacket@frame
  5571  0003E8  C179  F0B6         	movff	ethernet_rxGetNewFrame@frame+1,ipv4_handleNewPacket@frame+1
  5572  0003EC  EC3D  F011         	call	_ipv4_handleNewPacket	;wreg free
  5573                           
  5574                           ;ethernet.c: 107: break;
  5575  0003F0  D092               	goto	l373
  5576  0003F2                     
  5577                           ;ethernet.c: 109: UARTTransmitText("[Unknown EtherType]");
  5578  0003F2  0E69               	movlw	low STR_10
  5579  0003F4  0100               	movlb	0	; () banked
  5580  0003F6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5581  0003F8  0E7E               	movlw	high STR_10
  5582  0003FA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5583  0003FC  ECC8  F021         	call	_UARTTransmitText	;wreg free
  5584                           
  5585                           ;ethernet.c: 110: UARTTransmitText("[");
  5586  000400  0ECF               	movlw	low (STR_62+3)
  5587  000402  0100               	movlb	0	; () banked
  5588  000404  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5589  000406  0E7F               	movlw	high (STR_62+3)
  5590  000408  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5591  00040A  ECC8  F021         	call	_UARTTransmitText	;wreg free
  5592                           
  5593                           ;ethernet.c: 111: UARTTransmitText(macToString(frame->source));
  5594  00040E  0101               	movlb	1	; () banked
  5595  000410  EE20 F002          	lfsr	2,2
  5596  000414  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5597  000416  26D9               	addwf	fsr2l,f,c
  5598  000418  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5599  00041A  22DA               	addwfc	fsr2h,f,c
  5600  00041C  EE00  F07A         	lfsr	0,macToString@addr
  5601  000420  0E05               	movlw	5
  5602  000422                     u11341:
  5603  000422  CFDB FFEB          	movff	plusw2,plusw0
  5604  000426  06E8               	decf	wreg,f,c
  5605  000428  E2FC               	bc	u11341
  5606  00042A  EC36  F017         	call	_macToString	;wreg free
  5607  00042E  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  5608  000432  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  5609  000436  ECC8  F021         	call	_UARTTransmitText	;wreg free
  5610                           
  5611                           ;ethernet.c: 112: UARTTransmitText("->");
  5612  00043A  0EF4               	movlw	low STR_12
  5613  00043C  0100               	movlb	0	; () banked
  5614  00043E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5615  000440  0E7F               	movlw	high STR_12
  5616  000442  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5617  000444  ECC8  F021         	call	_UARTTransmitText	;wreg free
  5618                           
  5619                           ;ethernet.c: 113: UARTTransmitText(macToString(frame->destination));
  5620  000448  0101               	movlb	1	; () banked
  5621  00044A  EE20 F008          	lfsr	2,8
  5622  00044E  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5623  000450  26D9               	addwf	fsr2l,f,c
  5624  000452  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5625  000454  22DA               	addwfc	fsr2h,f,c
  5626  000456  EE00  F07A         	lfsr	0,macToString@addr
  5627  00045A  0E05               	movlw	5
  5628  00045C                     u11351:
  5629  00045C  CFDB FFEB          	movff	plusw2,plusw0
  5630  000460  06E8               	decf	wreg,f,c
  5631  000462  E2FC               	bc	u11351
  5632  000464  EC36  F017         	call	_macToString	;wreg free
  5633  000468  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  5634  00046C  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  5635  000470  ECC8  F021         	call	_UARTTransmitText	;wreg free
  5636                           
  5637                           ;ethernet.c: 114: UARTTransmitText("][");
  5638  000474  0EF7               	movlw	low STR_13
  5639  000476  0100               	movlb	0	; () banked
  5640  000478  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5641  00047A  0E7F               	movlw	high STR_13
  5642  00047C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5643  00047E  ECC8  F021         	call	_UARTTransmitText	;wreg free
  5644                           
  5645                           ;ethernet.c: 115: UARTTransmitText(etherTypeToString(frame->ethertype));
  5646  000482  0101               	movlb	1	; () banked
  5647  000484  EE20 F00E          	lfsr	2,14
  5648  000488  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5649  00048A  26D9               	addwf	fsr2l,f,c
  5650  00048C  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5651  00048E  22DA               	addwfc	fsr2h,f,c
  5652  000490  CFDE F060          	movff	postinc2,etherTypeToString@ethertype
  5653  000494  CFDD F061          	movff	postdec2,etherTypeToString@ethertype+1
  5654  000498  EC30  F023         	call	_etherTypeToString	;wreg free
  5655  00049C  C060  F098         	movff	?_etherTypeToString,UARTTransmitText@str
  5656  0004A0  C061  F099         	movff	?_etherTypeToString+1,UARTTransmitText@str+1
  5657  0004A4  ECC8  F021         	call	_UARTTransmitText	;wreg free
  5658                           
  5659                           ;ethernet.c: 116: UARTTransmitText("][L=");
  5660  0004A8  0EE0               	movlw	low STR_14
  5661  0004AA  0100               	movlb	0	; () banked
  5662  0004AC  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5663  0004AE  0E7F               	movlw	high STR_14
  5664  0004B0  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5665  0004B2  ECC8  F021         	call	_UARTTransmitText	;wreg free
  5666                           
  5667                           ;ethernet.c: 117: UARTTransmitInt(frame->length);
  5668  0004B6  C178  FFD9         	movff	ethernet_rxGetNewFrame@frame,fsr2l
  5669  0004BA  C179  FFDA         	movff	ethernet_rxGetNewFrame@frame+1,fsr2h
  5670  0004BE  CFDE F17B          	movff	postinc2,??_ethernet_rxGetNewFrame
  5671  0004C2  CFDD F17C          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  5672  0004C6  C17B  F09A         	movff	??_ethernet_rxGetNewFrame,UARTTransmitInt@val
  5673  0004CA  C17C  F09B         	movff	??_ethernet_rxGetNewFrame+1,UARTTransmitInt@val+1
  5674  0004CE  0100               	movlb	0	; () banked
  5675  0004D0  6B9C               	clrf	(UARTTransmitInt@val+2)& (0+255),b
  5676  0004D2  6B9D               	clrf	(UARTTransmitInt@val+3)& (0+255),b
  5677  0004D4  ECC9  F025         	call	_UARTTransmitInt	;wreg free
  5678                           
  5679                           ;ethernet.c: 118: UARTTransmitText("] ");
  5680  0004D8  0EF1               	movlw	low STR_15
  5681  0004DA  0100               	movlb	0	; () banked
  5682  0004DC  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5683  0004DE  0E7F               	movlw	high STR_15
  5684  0004E0  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5685  0004E2  ECC8  F021         	call	_UARTTransmitText	;wreg free
  5686                           
  5687                           ;ethernet.c: 120: }
  5688                           
  5689                           ;ethernet.c: 119: break;
  5690  0004E6  D017               	goto	l373
  5691  0004E8                     l371:
  5692  0004E8  0101               	movlb	1	; () banked
  5693  0004EA  EE20 F00E          	lfsr	2,14
  5694  0004EE  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5695  0004F0  26D9               	addwf	fsr2l,f,c
  5696  0004F2  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5697  0004F4  22DA               	addwfc	fsr2h,f,c
  5698  0004F6  CFDE F17B          	movff	postinc2,??_ethernet_rxGetNewFrame
  5699  0004FA  CFDD F17C          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  5700                           
  5701                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5702                           ; Switch size 1, requested type "space"
  5703                           ; Number of cases is 1, Range of values is 8 to 8
  5704                           ; switch strategies available:
  5705                           ; Name         Instructions Cycles
  5706                           ; simple_byte            4     3 (average)
  5707                           ;	Chosen strategy is simple_byte
  5708  0004FE  517C               	movf	(??_ethernet_rxGetNewFrame+1)& (0+255),w,b
  5709  000500  0A08               	xorlw	8	; case 8
  5710  000502  A4D8               	btfss	status,2,c
  5711  000504  D776               	goto	l375
  5712                           
  5713                           ; BSR set to: 1
  5714                           ; Switch size 1, requested type "space"
  5715                           ; Number of cases is 2, Range of values is 0 to 6
  5716                           ; switch strategies available:
  5717                           ; Name         Instructions Cycles
  5718                           ; simple_byte            7     4 (average)
  5719                           ;	Chosen strategy is simple_byte
  5720  000506  517B               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  5721  000508  0A00               	xorlw	0	; case 0
  5722  00050A  B4D8               	btfsc	status,2,c
  5723  00050C  D764               	goto	l374
  5724  00050E  0A06               	xorlw	6	; case 6
  5725  000510  B4D8               	btfsc	status,2,c
  5726  000512  D753               	goto	l372
  5727  000514  D76E               	goto	l375
  5728  000516                     l373:
  5729                           
  5730                           ;ethernet.c: 123: UARTTransmitText("[");
  5731                           
  5732                           ; BSR set to: 1
  5733  000516  0ECF               	movlw	low (STR_62+3)
  5734  000518  0100               	movlb	0	; () banked
  5735  00051A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5736  00051C  0E7F               	movlw	high (STR_62+3)
  5737  00051E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5738  000520  ECC8  F021         	call	_UARTTransmitText	;wreg free
  5739                           
  5740                           ;ethernet.c: 124: UARTTransmitText(intToString(frame->memory.start));
  5741  000524  0101               	movlb	1	; () banked
  5742  000526  EE20 F010          	lfsr	2,16
  5743  00052A  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5744  00052C  26D9               	addwf	fsr2l,f,c
  5745  00052E  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5746  000530  22DA               	addwfc	fsr2h,f,c
  5747  000532  CFDE F17B          	movff	postinc2,??_ethernet_rxGetNewFrame
  5748  000536  CFDD F17C          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  5749  00053A  C17B  F084         	movff	??_ethernet_rxGetNewFrame,intToString@val
  5750  00053E  C17C  F085         	movff	??_ethernet_rxGetNewFrame+1,intToString@val+1
  5751  000542  0100               	movlb	0	; () banked
  5752  000544  6B86               	clrf	(intToString@val+2)& (0+255),b
  5753  000546  6B87               	clrf	(intToString@val+3)& (0+255),b
  5754  000548  EC7E  F024         	call	_intToString	;wreg free
  5755  00054C  C084  F098         	movff	?_intToString,UARTTransmitText@str
  5756  000550  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  5757  000554  ECC8  F021         	call	_UARTTransmitText	;wreg free
  5758                           
  5759                           ;ethernet.c: 125: UARTTransmitText(" to ");
  5760  000558  0E08               	movlw	low (STR_67+11)
  5761  00055A  0100               	movlb	0	; () banked
  5762  00055C  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5763  00055E  0E7F               	movlw	high (STR_67+11)
  5764  000560  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5765  000562  ECC8  F021         	call	_UARTTransmitText	;wreg free
  5766                           
  5767                           ;ethernet.c: 126: UARTTransmitText(intToString(frame->memory.end));
  5768  000566  0101               	movlb	1	; () banked
  5769  000568  EE20 F012          	lfsr	2,18
  5770  00056C  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5771  00056E  26D9               	addwf	fsr2l,f,c
  5772  000570  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5773  000572  22DA               	addwfc	fsr2h,f,c
  5774  000574  CFDE F17B          	movff	postinc2,??_ethernet_rxGetNewFrame
  5775  000578  CFDD F17C          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  5776  00057C  C17B  F084         	movff	??_ethernet_rxGetNewFrame,intToString@val
  5777  000580  C17C  F085         	movff	??_ethernet_rxGetNewFrame+1,intToString@val+1
  5778  000584  0100               	movlb	0	; () banked
  5779  000586  6B86               	clrf	(intToString@val+2)& (0+255),b
  5780  000588  6B87               	clrf	(intToString@val+3)& (0+255),b
  5781  00058A  EC7E  F024         	call	_intToString	;wreg free
  5782  00058E  C084  F098         	movff	?_intToString,UARTTransmitText@str
  5783  000592  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  5784  000596  ECC8  F021         	call	_UARTTransmitText	;wreg free
  5785                           
  5786                           ;ethernet.c: 127: UARTTransmitText(" (");
  5787  00059A  0E1E               	movlw	low (STR_86+39)
  5788  00059C  0100               	movlb	0	; () banked
  5789  00059E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5790  0005A0  0E7C               	movlw	high (STR_86+39)
  5791  0005A2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5792  0005A4  ECC8  F021         	call	_UARTTransmitText	;wreg free
  5793                           
  5794                           ;ethernet.c: 128: UARTTransmitText(intToString(frame->memory.length));
  5795  0005A8  0101               	movlb	1	; () banked
  5796  0005AA  EE20 F014          	lfsr	2,20
  5797  0005AE  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5798  0005B0  26D9               	addwf	fsr2l,f,c
  5799  0005B2  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5800  0005B4  22DA               	addwfc	fsr2h,f,c
  5801  0005B6  CFDE F17B          	movff	postinc2,??_ethernet_rxGetNewFrame
  5802  0005BA  CFDD F17C          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  5803  0005BE  C17B  F084         	movff	??_ethernet_rxGetNewFrame,intToString@val
  5804  0005C2  C17C  F085         	movff	??_ethernet_rxGetNewFrame+1,intToString@val+1
  5805  0005C6  0100               	movlb	0	; () banked
  5806  0005C8  6B86               	clrf	(intToString@val+2)& (0+255),b
  5807  0005CA  6B87               	clrf	(intToString@val+3)& (0+255),b
  5808  0005CC  EC7E  F024         	call	_intToString	;wreg free
  5809  0005D0  C084  F098         	movff	?_intToString,UARTTransmitText@str
  5810  0005D4  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  5811  0005D8  ECC8  F021         	call	_UARTTransmitText	;wreg free
  5812                           
  5813                           ;ethernet.c: 129: UARTTransmitText(")]");
  5814  0005DC  0EFA               	movlw	low STR_19
  5815  0005DE  0100               	movlb	0	; () banked
  5816  0005E0  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5817  0005E2  0E7F               	movlw	high STR_19
  5818  0005E4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5819  0005E6  ECC8  F021         	call	_UARTTransmitText	;wreg free
  5820                           
  5821                           ;ethernet.c: 131: ethernetController_dropPacket(frame);
  5822  0005EA  C178  F072         	movff	ethernet_rxGetNewFrame@frame,ethernetController_dropPacket@frame
  5823  0005EE  C179  F073         	movff	ethernet_rxGetNewFrame@frame+1,ethernetController_dropPacket@frame+1
  5824  0005F2  ECB6  F023         	call	_ethernetController_dropPacket	;wreg free
  5825                           
  5826                           ;ethernet.c: 133: UARTTransmitText("\n\r");
  5827  0005F6  0EDB               	movlw	low (STR_70+33)
  5828  0005F8  0100               	movlb	0	; () banked
  5829  0005FA  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5830  0005FC  0E7C               	movlw	high (STR_70+33)
  5831  0005FE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5832  000600  ECC8  F021         	call	_UARTTransmitText	;wreg free
  5833                           
  5834                           ;ethernet.c: 135: return err;
  5835  000604  C183  F178         	movff	ethernet_rxGetNewFrame@err,?_ethernet_rxGetNewFrame
  5836  000608  C184  F179         	movff	ethernet_rxGetNewFrame@err+1,?_ethernet_rxGetNewFrame+1
  5837  00060C  C185  F17A         	movff	ethernet_rxGetNewFrame@err+2,?_ethernet_rxGetNewFrame+2
  5838  000610  0012               	return	
  5839  000612                     __end_of_ethernet_rxGetNewFrame:
  5840                           	opt stack 0
  5841                           tblptru	equ	0xFF8
  5842                           tblptrh	equ	0xFF7
  5843                           tblptrl	equ	0xFF6
  5844                           tablat	equ	0xFF5
  5845                           intcon	equ	0xFF2
  5846                           intcon3	equ	0xFF0
  5847                           indf0	equ	0xFEF
  5848                           postinc0	equ	0xFEE
  5849                           plusw0	equ	0xFEB
  5850                           fsr0h	equ	0xFEA
  5851                           fsr0l	equ	0xFE9
  5852                           wreg	equ	0xFE8
  5853                           postinc1	equ	0xFE6
  5854                           postdec1	equ	0xFE5
  5855                           plusw1	equ	0xFE3
  5856                           fsr1h	equ	0xFE2
  5857                           fsr1l	equ	0xFE1
  5858                           indf2	equ	0xFDF
  5859                           postinc2	equ	0xFDE
  5860                           postdec2	equ	0xFDD
  5861                           plusw2	equ	0xFDB
  5862                           fsr2h	equ	0xFDA
  5863                           fsr2l	equ	0xFD9
  5864                           status	equ	0xFD8
  5865                           
  5866 ;; *************** function _ipv4_handleNewPacket *****************
  5867 ;; Defined at:
  5868 ;;		line 203 in file "src/stack/protocols/ipv4.c"
  5869 ;; Parameters:    Size  Location     Type
  5870 ;;  frame           2   85[BANK0 ] PTR struct ethernetFrame
  5871 ;;		 -> stack.ethernet(15), stack(121), 
  5872 ;; Auto vars:     Size  Location     Type
  5873 ;;  ip             23   98[BANK0 ] struct ipv4_header
  5874 ;;  headerField     9   89[BANK0 ] struct memoryField
  5875 ;; Return value:  Size  Location     Type
  5876 ;;                  1    wreg      void 
  5877 ;; Registers used:
  5878 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5879 ;; Tracked objects:
  5880 ;;		On entry : 0/0
  5881 ;;		On exit  : 0/0
  5882 ;;		Unchanged: 0/0
  5883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5884 ;;      Params:         0       2       0       0       0       0       0       0       0
  5885 ;;      Locals:         0      32       0       0       0       0       0       0       0
  5886 ;;      Temps:          0       2       0       0       0       0       0       0       0
  5887 ;;      Totals:         0      36       0       0       0       0       0       0       0
  5888 ;;Total ram usage:       36 bytes
  5889 ;; Hardware stack levels used:    1
  5890 ;; Hardware stack levels required when called:    9
  5891 ;; This function calls:
  5892 ;;		_UARTTransmitText
  5893 ;;		_ethernetController_dropPacket
  5894 ;;		_intToString
  5895 ;;		_ipAdressToString
  5896 ;;		_ipProtocolToString
  5897 ;;		_ipv4_checkHeaderChecksum
  5898 ;;		_ipv4_parseHeader
  5899 ;; This function is called by:
  5900 ;;		_ethernet_rxGetNewFrame
  5901 ;; This function uses a non-reentrant model
  5902 ;;
  5903                           
  5904                           	psect	text12
  5905  00227A                     __ptext12:
  5906                           	opt stack 0
  5907  00227A                     _ipv4_handleNewPacket:
  5908                           	opt stack 19
  5909                           
  5910                           ;ipv4.c: 204: ipv4_header_t ip;
  5911                           ;ipv4.c: 205: memoryField_t headerField;
  5912                           ;ipv4.c: 206: if (frame->ethertype != ETHERTYPE_IPv4) {
  5913                           
  5914                           ;incstack = 0
  5915  00227A  0100               	movlb	0	; () banked
  5916  00227C  EE20 F00E          	lfsr	2,14
  5917  002280  51B5               	movf	ipv4_handleNewPacket@frame& (0+255),w,b
  5918  002282  26D9               	addwf	fsr2l,f,c
  5919  002284  51B6               	movf	(ipv4_handleNewPacket@frame+1)& (0+255),w,b
  5920  002286  22DA               	addwfc	fsr2h,f,c
  5921  002288  50DE               	movf	postinc2,w,c
  5922  00228A  E104               	bnz	u10770
  5923  00228C  0E08               	movlw	8
  5924  00228E  18DE               	xorwf	postinc2,w,c
  5925  002290  B4D8               	btfsc	status,2,c
  5926  002292  D007               	goto	l1096
  5927  002294                     u10770:
  5928                           
  5929                           ; BSR set to: 0
  5930                           ;ipv4.c: 207: ethernetController_dropPacket(frame);
  5931  002294  C0B5  F072         	movff	ipv4_handleNewPacket@frame,ethernetController_dropPacket@frame
  5932  002298  C0B6  F073         	movff	ipv4_handleNewPacket@frame+1,ethernetController_dropPacket@frame+1
  5933  00229C  ECB6  F023         	call	_ethernetController_dropPacket	;wreg free
  5934                           
  5935                           ;ipv4.c: 208: return;
  5936  0022A0  0012               	return	
  5937  0022A2                     l1096:
  5938                           
  5939                           ;ipv4.c: 209: }
  5940                           ;ipv4.c: 210: headerField = frame->memory;
  5941  0022A2  0100               	movlb	0	; () banked
  5942  0022A4  EE20 F010          	lfsr	2,16
  5943  0022A8  51B5               	movf	ipv4_handleNewPacket@frame& (0+255),w,b
  5944  0022AA  26D9               	addwf	fsr2l,f,c
  5945  0022AC  51B6               	movf	(ipv4_handleNewPacket@frame+1)& (0+255),w,b
  5946  0022AE  22DA               	addwfc	fsr2h,f,c
  5947  0022B0  EE10  F0B9         	lfsr	1,ipv4_handleNewPacket@headerField
  5948  0022B4  0E08               	movlw	8
  5949  0022B6                     u10781:
  5950  0022B6  CFDB FFE3          	movff	plusw2,plusw1
  5951  0022BA  06E8               	decf	wreg,f,c
  5952  0022BC  E2FC               	bc	u10781
  5953                           
  5954                           ; BSR set to: 0
  5955                           ;ipv4.c: 211: headerField.start = frame->memory.start + 22;
  5956  0022BE  EE20 F010          	lfsr	2,16
  5957  0022C2  51B5               	movf	ipv4_handleNewPacket@frame& (0+255),w,b
  5958  0022C4  26D9               	addwf	fsr2l,f,c
  5959  0022C6  51B6               	movf	(ipv4_handleNewPacket@frame+1)& (0+255),w,b
  5960  0022C8  22DA               	addwfc	fsr2h,f,c
  5961  0022CA  CFDE F0B7          	movff	postinc2,??_ipv4_handleNewPacket
  5962  0022CE  CFDD F0B8          	movff	postdec2,??_ipv4_handleNewPacket+1
  5963  0022D2  0E16               	movlw	22
  5964  0022D4  25B7               	addwf	??_ipv4_handleNewPacket& (0+255),w,b
  5965  0022D6  6FB9               	movwf	ipv4_handleNewPacket@headerField& (0+255),b
  5966  0022D8  0E00               	movlw	0
  5967  0022DA  21B8               	addwfc	(??_ipv4_handleNewPacket+1)& (0+255),w,b
  5968  0022DC  6FBA               	movwf	(ipv4_handleNewPacket@headerField+1)& (0+255),b
  5969                           
  5970                           ; BSR set to: 0
  5971                           ;ipv4.c: 213: ip = ipv4_parseHeader(&headerField);
  5972  0022DE  0EB9               	movlw	low ipv4_handleNewPacket@headerField
  5973  0022E0  6F74               	movwf	ipv4_parseHeader@field& (0+255),b
  5974  0022E2  0E00               	movlw	high ipv4_handleNewPacket@headerField
  5975  0022E4  6F75               	movwf	(ipv4_parseHeader@field+1)& (0+255),b
  5976  0022E6  EC2B  F00D         	call	_ipv4_parseHeader	;wreg free
  5977  0022EA  EE20  F0C2         	lfsr	2,ipv4_handleNewPacket@ip
  5978  0022EE  0E16               	movlw	22
  5979  0022F0                     u10791:
  5980  0022F0  CFEB FFDB          	movff	plusw0,plusw2
  5981  0022F4  06E8               	decf	wreg,f,c
  5982  0022F6  E2FC               	bc	u10791
  5983                           
  5984                           ;ipv4.c: 214: UARTTransmitText("[");
  5985  0022F8  0ECF               	movlw	low (STR_62+3)
  5986  0022FA  0100               	movlb	0	; () banked
  5987  0022FC  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5988  0022FE  0E7F               	movlw	high (STR_62+3)
  5989  002300  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5990  002302  ECC8  F021         	call	_UARTTransmitText	;wreg free
  5991                           
  5992                           ;ipv4.c: 215: UARTTransmitText(ipAdressToString(ip.source));
  5993  002306  C0D1  F073         	movff	ipv4_handleNewPacket@ip+15,ipAdressToString@ip
  5994  00230A  C0D2  F074         	movff	ipv4_handleNewPacket@ip+16,ipAdressToString@ip+1
  5995  00230E  C0D3  F075         	movff	ipv4_handleNewPacket@ip+17,ipAdressToString@ip+2
  5996  002312  C0D4  F076         	movff	ipv4_handleNewPacket@ip+18,ipAdressToString@ip+3
  5997  002316  EC6F  F00F         	call	_ipAdressToString	;wreg free
  5998  00231A  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  5999  00231E  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  6000  002322  ECC8  F021         	call	_UARTTransmitText	;wreg free
  6001                           
  6002                           ;ipv4.c: 216: UARTTransmitText(" -> ");
  6003  002326  0EC7               	movlw	low STR_79
  6004  002328  0100               	movlb	0	; () banked
  6005  00232A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6006  00232C  0E7F               	movlw	high STR_79
  6007  00232E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6008  002330  ECC8  F021         	call	_UARTTransmitText	;wreg free
  6009                           
  6010                           ;ipv4.c: 217: UARTTransmitText(ipAdressToString(ip.destination));
  6011  002334  C0D5  F073         	movff	ipv4_handleNewPacket@ip+19,ipAdressToString@ip
  6012  002338  C0D6  F074         	movff	ipv4_handleNewPacket@ip+20,ipAdressToString@ip+1
  6013  00233C  C0D7  F075         	movff	ipv4_handleNewPacket@ip+21,ipAdressToString@ip+2
  6014  002340  C0D8  F076         	movff	ipv4_handleNewPacket@ip+22,ipAdressToString@ip+3
  6015  002344  EC6F  F00F         	call	_ipAdressToString	;wreg free
  6016  002348  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  6017  00234C  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  6018  002350  ECC8  F021         	call	_UARTTransmitText	;wreg free
  6019                           
  6020                           ;ipv4.c: 218: UARTTransmitText("][");
  6021  002354  0EF7               	movlw	low STR_13
  6022  002356  0100               	movlb	0	; () banked
  6023  002358  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6024  00235A  0E7F               	movlw	high STR_13
  6025  00235C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6026  00235E  ECC8  F021         	call	_UARTTransmitText	;wreg free
  6027                           
  6028                           ;ipv4.c: 219: UARTTransmitText((ipProtocolToString(ip.protocol)));
  6029  002362  0100               	movlb	0	; () banked
  6030  002364  51CE               	movf	(ipv4_handleNewPacket@ip+12)& (0+255),w,b
  6031  002366  EC0C  F023         	call	_ipProtocolToString
  6032  00236A  C060  F098         	movff	?_ipProtocolToString,UARTTransmitText@str
  6033  00236E  C061  F099         	movff	?_ipProtocolToString+1,UARTTransmitText@str+1
  6034  002372  ECC8  F021         	call	_UARTTransmitText	;wreg free
  6035                           
  6036                           ;ipv4.c: 220: UARTTransmitText("][");
  6037  002376  0EF7               	movlw	low STR_13
  6038  002378  0100               	movlb	0	; () banked
  6039  00237A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6040  00237C  0E7F               	movlw	high STR_13
  6041  00237E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6042  002380  ECC8  F021         	call	_UARTTransmitText	;wreg free
  6043                           
  6044                           ;ipv4.c: 221: UARTTransmitText(intToString(ip.totalLength));
  6045  002384  C0C6  F084         	movff	ipv4_handleNewPacket@ip+4,intToString@val
  6046  002388  C0C7  F085         	movff	ipv4_handleNewPacket@ip+5,intToString@val+1
  6047  00238C  0100               	movlb	0	; () banked
  6048  00238E  6B86               	clrf	(intToString@val+2)& (0+255),b
  6049  002390  6B87               	clrf	(intToString@val+3)& (0+255),b
  6050  002392  EC7E  F024         	call	_intToString	;wreg free
  6051  002396  C084  F098         	movff	?_intToString,UARTTransmitText@str
  6052  00239A  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  6053  00239E  ECC8  F021         	call	_UARTTransmitText	;wreg free
  6054                           
  6055                           ;ipv4.c: 222: UARTTransmitText("][");
  6056  0023A2  0EF7               	movlw	low STR_13
  6057  0023A4  0100               	movlb	0	; () banked
  6058  0023A6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6059  0023A8  0E7F               	movlw	high STR_13
  6060  0023AA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6061  0023AC  ECC8  F021         	call	_UARTTransmitText	;wreg free
  6062                           
  6063                           ;ipv4.c: 223: UARTTransmitText(intToString(ip.version));
  6064  0023B0  0100               	movlb	0	; () banked
  6065  0023B2  51C2               	movf	ipv4_handleNewPacket@ip& (0+255),w,b
  6066  0023B4  6F84               	movwf	intToString@val& (0+255),b
  6067  0023B6  6B85               	clrf	(intToString@val+1)& (0+255),b
  6068  0023B8  6B86               	clrf	(intToString@val+2)& (0+255),b
  6069  0023BA  6B87               	clrf	(intToString@val+3)& (0+255),b
  6070  0023BC  EC7E  F024         	call	_intToString	;wreg free
  6071  0023C0  C084  F098         	movff	?_intToString,UARTTransmitText@str
  6072  0023C4  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  6073  0023C8  ECC8  F021         	call	_UARTTransmitText	;wreg free
  6074                           
  6075                           ;ipv4.c: 224: UARTTransmitText(", ");
  6076  0023CC  0E66               	movlw	low (STR_37+17)
  6077  0023CE  0100               	movlb	0	; () banked
  6078  0023D0  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6079  0023D2  0E7E               	movlw	high (STR_37+17)
  6080  0023D4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6081  0023D6  ECC8  F021         	call	_UARTTransmitText	;wreg free
  6082                           
  6083                           ;ipv4.c: 225: UARTTransmitText(intToString(ip.headerLength));
  6084  0023DA  0100               	movlb	0	; () banked
  6085  0023DC  51C3               	movf	(ipv4_handleNewPacket@ip+1)& (0+255),w,b
  6086  0023DE  6F84               	movwf	intToString@val& (0+255),b
  6087  0023E0  6B85               	clrf	(intToString@val+1)& (0+255),b
  6088  0023E2  6B86               	clrf	(intToString@val+2)& (0+255),b
  6089  0023E4  6B87               	clrf	(intToString@val+3)& (0+255),b
  6090  0023E6  EC7E  F024         	call	_intToString	;wreg free
  6091  0023EA  C084  F098         	movff	?_intToString,UARTTransmitText@str
  6092  0023EE  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  6093  0023F2  ECC8  F021         	call	_UARTTransmitText	;wreg free
  6094                           
  6095                           ;ipv4.c: 226: UARTTransmitText("]");
  6096  0023F6  0EFB               	movlw	low (STR_19+1)
  6097  0023F8  0100               	movlb	0	; () banked
  6098  0023FA  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6099  0023FC  0E7F               	movlw	high (STR_19+1)
  6100  0023FE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6101  002400  ECC8  F021         	call	_UARTTransmitText	;wreg free
  6102                           
  6103                           ;ipv4.c: 227: if (!ipv4_checkHeaderChecksum(&ip))
  6104  002404  0EC2               	movlw	low ipv4_handleNewPacket@ip
  6105  002406  0100               	movlb	0	; () banked
  6106  002408  6F9A               	movwf	ipv4_checkHeaderChecksum@header& (0+255),b
  6107  00240A  0E00               	movlw	high ipv4_handleNewPacket@ip
  6108  00240C  6F9B               	movwf	(ipv4_checkHeaderChecksum@header+1)& (0+255),b
  6109  00240E  EC97  F01A         	call	_ipv4_checkHeaderChecksum	;wreg free
  6110  002412  0100               	movlb	0	; () banked
  6111  002414  B0D8               	btfsc	status,0,c
  6112  002416  0012               	return	
  6113                           
  6114                           ; BSR set to: 0
  6115                           ;ipv4.c: 228: UARTTransmitText("[INVALID CHECKSUM]");
  6116  002418  0E7D               	movlw	low STR_85
  6117  00241A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6118  00241C  0E7E               	movlw	high STR_85
  6119  00241E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6120  002420  ECC8  F021         	call	_UARTTransmitText	;wreg free
  6121  002424  0012               	return	
  6122  002426                     __end_of_ipv4_handleNewPacket:
  6123                           	opt stack 0
  6124                           tblptru	equ	0xFF8
  6125                           tblptrh	equ	0xFF7
  6126                           tblptrl	equ	0xFF6
  6127                           tablat	equ	0xFF5
  6128                           intcon	equ	0xFF2
  6129                           intcon3	equ	0xFF0
  6130                           indf0	equ	0xFEF
  6131                           postinc0	equ	0xFEE
  6132                           plusw0	equ	0xFEB
  6133                           fsr0h	equ	0xFEA
  6134                           fsr0l	equ	0xFE9
  6135                           wreg	equ	0xFE8
  6136                           postinc1	equ	0xFE6
  6137                           postdec1	equ	0xFE5
  6138                           plusw1	equ	0xFE3
  6139                           fsr1h	equ	0xFE2
  6140                           fsr1l	equ	0xFE1
  6141                           indf2	equ	0xFDF
  6142                           postinc2	equ	0xFDE
  6143                           postdec2	equ	0xFDD
  6144                           plusw2	equ	0xFDB
  6145                           fsr2h	equ	0xFDA
  6146                           fsr2l	equ	0xFD9
  6147                           status	equ	0xFD8
  6148                           
  6149 ;; *************** function _ipv4_parseHeader *****************
  6150 ;; Defined at:
  6151 ;;		line 141 in file "src/stack/protocols/ipv4.c"
  6152 ;; Parameters:    Size  Location     Type
  6153 ;;  field           2   20[BANK0 ] PTR struct memoryField
  6154 ;;		 -> ipv4_handleNewPacket@headerField(9), 
  6155 ;; Auto vars:     Size  Location     Type
  6156 ;;  i               1   45[BANK0 ] unsigned char 
  6157 ;;  i               1   44[BANK0 ] unsigned char 
  6158 ;;  ip             23   47[BANK0 ] struct ipv4_header
  6159 ;;  temp            1   46[BANK0 ] unsigned char 
  6160 ;; Return value:  Size  Location     Type
  6161 ;;                  23   20[BANK0 ] struct ipv4_header
  6162 ;; Registers used:
  6163 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6164 ;; Tracked objects:
  6165 ;;		On entry : 0/0
  6166 ;;		On exit  : 0/0
  6167 ;;		Unchanged: 0/0
  6168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6169 ;;      Params:         0      23       0       0       0       0       0       0       0
  6170 ;;      Locals:         0      26       0       0       0       0       0       0       0
  6171 ;;      Temps:          0       1       0       0       0       0       0       0       0
  6172 ;;      Totals:         0      50       0       0       0       0       0       0       0
  6173 ;;Total ram usage:       50 bytes
  6174 ;; Hardware stack levels used:    1
  6175 ;; Hardware stack levels required when called:    8
  6176 ;; This function calls:
  6177 ;;		_ethernetController_streamFromRXBuffer
  6178 ;; This function is called by:
  6179 ;;		_ipv4_handleNewPacket
  6180 ;; This function uses a non-reentrant model
  6181 ;;
  6182                           
  6183                           	psect	text13
  6184  001A56                     __ptext13:
  6185                           	opt stack 0
  6186  001A56                     _ipv4_parseHeader:
  6187                           	opt stack 19
  6188                           
  6189                           ;ipv4.c: 142: ipv4_header_t ip;
  6190                           ;ipv4.c: 143: uint8_t temp;
  6191                           ;ipv4.c: 145: ethernetController_streamFromRXBuffer(0, field->start);
  6192                           
  6193                           ;incstack = 0
  6194  001A56  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6195  001A5A  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6196  001A5E  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6197  001A62  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6198  001A66  0E00               	movlw	0
  6199  001A68  EC42  F021         	call	_ethernetController_streamFromRXBuffer
  6200                           
  6201                           ;ipv4.c: 147: temp = ethernetController_streamFromRXBuffer(1, field->start);
  6202  001A6C  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6203  001A70  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6204  001A74  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6205  001A78  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6206  001A7C  0E01               	movlw	1
  6207  001A7E  EC42  F021         	call	_ethernetController_streamFromRXBuffer
  6208  001A82  0100               	movlb	0	; () banked
  6209  001A84  6F8E               	movwf	ipv4_parseHeader@temp& (0+255),b
  6210                           
  6211                           ; BSR set to: 0
  6212                           ;ipv4.c: 148: ip.version = (temp & 0xf0) >> 4;
  6213  001A86  398E               	swapf	ipv4_parseHeader@temp& (0+255),w,b
  6214  001A88  0B0F               	andlw	15
  6215  001A8A  0B0F               	andlw	15
  6216  001A8C  6F8F               	movwf	ipv4_parseHeader@ip& (0+255),b
  6217                           
  6218                           ; BSR set to: 0
  6219                           ;ipv4.c: 149: ip.headerLength = temp & 0x0f;
  6220  001A8E  518E               	movf	ipv4_parseHeader@temp& (0+255),w,b
  6221  001A90  0B0F               	andlw	15
  6222  001A92  6F90               	movwf	(ipv4_parseHeader@ip+1)& (0+255),b
  6223                           
  6224                           ;ipv4.c: 151: temp = ethernetController_streamFromRXBuffer(1, field->start);
  6225  001A94  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6226  001A98  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6227  001A9C  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6228  001AA0  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6229  001AA4  0E01               	movlw	1
  6230  001AA6  EC42  F021         	call	_ethernetController_streamFromRXBuffer
  6231  001AAA  0100               	movlb	0	; () banked
  6232  001AAC  6F8E               	movwf	ipv4_parseHeader@temp& (0+255),b
  6233                           
  6234                           ; BSR set to: 0
  6235                           ;ipv4.c: 152: ip.dscp = (temp & 0x1f);
  6236  001AAE  518E               	movf	ipv4_parseHeader@temp& (0+255),w,b
  6237  001AB0  0B1F               	andlw	31
  6238  001AB2  6F91               	movwf	(ipv4_parseHeader@ip+2)& (0+255),b
  6239                           
  6240                           ; BSR set to: 0
  6241                           ;ipv4.c: 153: ip.ecn = (temp & 0xC0) >> 6;
  6242  001AB4  458E               	rlncf	ipv4_parseHeader@temp& (0+255),w,b
  6243  001AB6  46E8               	rlncf	wreg,f,c
  6244  001AB8  0B03               	andlw	3
  6245  001ABA  0B03               	andlw	3
  6246  001ABC  6F92               	movwf	(ipv4_parseHeader@ip+3)& (0+255),b
  6247                           
  6248                           ;ipv4.c: 155: ip.totalLength = (ethernetController_streamFromRXBuffer(1, field->start) <
      +                          < 8);
  6249  001ABE  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6250  001AC2  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6251  001AC6  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6252  001ACA  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6253  001ACE  0E01               	movlw	1
  6254  001AD0  EC42  F021         	call	_ethernetController_streamFromRXBuffer
  6255  001AD4  0100               	movlb	0	; () banked
  6256  001AD6  6F94               	movwf	(ipv4_parseHeader@ip+5)& (0+255),b
  6257  001AD8  6B93               	clrf	(ipv4_parseHeader@ip+4)& (0+255),b
  6258                           
  6259                           ;ipv4.c: 156: ip.totalLength |= ethernetController_streamFromRXBuffer(1, field->start);
  6260  001ADA  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6261  001ADE  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6262  001AE2  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6263  001AE6  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6264  001AEA  0E01               	movlw	1
  6265  001AEC  EC42  F021         	call	_ethernetController_streamFromRXBuffer
  6266  001AF0  0100               	movlb	0	; () banked
  6267  001AF2  6F8B               	movwf	??_ipv4_parseHeader& (0+255),b
  6268  001AF4  518B               	movf	??_ipv4_parseHeader& (0+255),w,b
  6269  001AF6  1393               	iorwf	(ipv4_parseHeader@ip+4)& (0+255),f,b
  6270                           
  6271                           ;ipv4.c: 158: ip.identification = (ethernetController_streamFromRXBuffer(1, field->start
      +                          ) << 8);
  6272  001AF8  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6273  001AFC  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6274  001B00  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6275  001B04  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6276  001B08  0E01               	movlw	1
  6277  001B0A  EC42  F021         	call	_ethernetController_streamFromRXBuffer
  6278  001B0E  0100               	movlb	0	; () banked
  6279  001B10  6F96               	movwf	(ipv4_parseHeader@ip+7)& (0+255),b
  6280  001B12  6B95               	clrf	(ipv4_parseHeader@ip+6)& (0+255),b
  6281                           
  6282                           ;ipv4.c: 159: ip.identification |= ethernetController_streamFromRXBuffer(1, field->start
      +                          );
  6283  001B14  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6284  001B18  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6285  001B1C  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6286  001B20  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6287  001B24  0E01               	movlw	1
  6288  001B26  EC42  F021         	call	_ethernetController_streamFromRXBuffer
  6289  001B2A  0100               	movlb	0	; () banked
  6290  001B2C  6F8B               	movwf	??_ipv4_parseHeader& (0+255),b
  6291  001B2E  518B               	movf	??_ipv4_parseHeader& (0+255),w,b
  6292  001B30  1395               	iorwf	(ipv4_parseHeader@ip+6)& (0+255),f,b
  6293                           
  6294                           ;ipv4.c: 161: temp = ethernetController_streamFromRXBuffer(1, field->start);
  6295  001B32  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6296  001B36  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6297  001B3A  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6298  001B3E  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6299  001B42  0E01               	movlw	1
  6300  001B44  EC42  F021         	call	_ethernetController_streamFromRXBuffer
  6301  001B48  0100               	movlb	0	; () banked
  6302  001B4A  6F8E               	movwf	ipv4_parseHeader@temp& (0+255),b
  6303                           
  6304                           ; BSR set to: 0
  6305                           ;ipv4.c: 162: ip.flags = ((temp & 0xC0) >> 6);
  6306  001B4C  458E               	rlncf	ipv4_parseHeader@temp& (0+255),w,b
  6307  001B4E  46E8               	rlncf	wreg,f,c
  6308  001B50  0B03               	andlw	3
  6309  001B52  0B03               	andlw	3
  6310  001B54  6F97               	movwf	(ipv4_parseHeader@ip+8)& (0+255),b
  6311                           
  6312                           ; BSR set to: 0
  6313                           ;ipv4.c: 163: ip.fragmentOffset = ((temp & 0x1f) << 8);
  6314  001B56  518E               	movf	ipv4_parseHeader@temp& (0+255),w,b
  6315  001B58  0B1F               	andlw	31
  6316  001B5A  6F99               	movwf	(ipv4_parseHeader@ip+10)& (0+255),b
  6317  001B5C  6B98               	clrf	(ipv4_parseHeader@ip+9)& (0+255),b
  6318                           
  6319                           ;ipv4.c: 165: ip.fragmentOffset |= ethernetController_streamFromRXBuffer(1, field->start
      +                          );
  6320  001B5E  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6321  001B62  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6322  001B66  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6323  001B6A  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6324  001B6E  0E01               	movlw	1
  6325  001B70  EC42  F021         	call	_ethernetController_streamFromRXBuffer
  6326  001B74  0100               	movlb	0	; () banked
  6327  001B76  6F8B               	movwf	??_ipv4_parseHeader& (0+255),b
  6328  001B78  518B               	movf	??_ipv4_parseHeader& (0+255),w,b
  6329  001B7A  1398               	iorwf	(ipv4_parseHeader@ip+9)& (0+255),f,b
  6330                           
  6331                           ;ipv4.c: 167: ip.timeToLive = ethernetController_streamFromRXBuffer(1, field->start);
  6332  001B7C  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6333  001B80  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6334  001B84  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6335  001B88  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6336  001B8C  0E01               	movlw	1
  6337  001B8E  EC42  F021         	call	_ethernetController_streamFromRXBuffer
  6338  001B92  0100               	movlb	0	; () banked
  6339  001B94  6F9A               	movwf	(ipv4_parseHeader@ip+11)& (0+255),b
  6340                           
  6341                           ;ipv4.c: 169: ip.protocol = ethernetController_streamFromRXBuffer(1, field->start);
  6342  001B96  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6343  001B9A  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6344  001B9E  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6345  001BA2  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6346  001BA6  0E01               	movlw	1
  6347  001BA8  EC42  F021         	call	_ethernetController_streamFromRXBuffer
  6348  001BAC  0100               	movlb	0	; () banked
  6349  001BAE  6F9B               	movwf	(ipv4_parseHeader@ip+12)& (0+255),b
  6350                           
  6351                           ;ipv4.c: 171: ip.checksum = (ethernetController_streamFromRXBuffer(1, field->start) << 8
      +                          );
  6352  001BB0  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6353  001BB4  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6354  001BB8  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6355  001BBC  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6356  001BC0  0E01               	movlw	1
  6357  001BC2  EC42  F021         	call	_ethernetController_streamFromRXBuffer
  6358  001BC6  0100               	movlb	0	; () banked
  6359  001BC8  6F9D               	movwf	(ipv4_parseHeader@ip+14)& (0+255),b
  6360  001BCA  6B9C               	clrf	(ipv4_parseHeader@ip+13)& (0+255),b
  6361                           
  6362                           ;ipv4.c: 172: ip.checksum |= ethernetController_streamFromRXBuffer(1, field->start);
  6363  001BCC  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6364  001BD0  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6365  001BD4  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6366  001BD8  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6367  001BDC  0E01               	movlw	1
  6368  001BDE  EC42  F021         	call	_ethernetController_streamFromRXBuffer
  6369  001BE2  0100               	movlb	0	; () banked
  6370  001BE4  6F8B               	movwf	??_ipv4_parseHeader& (0+255),b
  6371  001BE6  518B               	movf	??_ipv4_parseHeader& (0+255),w,b
  6372  001BE8  139C               	iorwf	(ipv4_parseHeader@ip+13)& (0+255),f,b
  6373                           
  6374                           ; BSR set to: 0
  6375                           ;ipv4.c: 174: for (uint8_t i = 0; i < 4; i++)
  6376  001BEA  0E00               	movlw	0
  6377  001BEC  6F8C               	movwf	ipv4_parseHeader@i& (0+255),b
  6378  001BEE                     l8891:
  6379                           
  6380                           ; BSR set to: 0
  6381  001BEE  0E03               	movlw	3
  6382  001BF0  658C               	cpfsgt	ipv4_parseHeader@i& (0+255),b
  6383  001BF2  D001               	goto	l1085
  6384  001BF4  D01D               	goto	u10530
  6385  001BF6                     l1085:
  6386                           
  6387                           ; BSR set to: 0
  6388                           ;ipv4.c: 175: ip.source.address[i] = ethernetController_streamFromRXBuffer(1, field->sta
      +                          rt);
  6389                           
  6390                           ; BSR set to: 0
  6391  001BF6  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6392  001BFA  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6393  001BFE  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6394  001C02  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6395  001C06  0E01               	movlw	1
  6396  001C08  EC42  F021         	call	_ethernetController_streamFromRXBuffer
  6397  001C0C  0100               	movlb	0	; () banked
  6398  001C0E  6F8B               	movwf	??_ipv4_parseHeader& (0+255),b
  6399  001C10  518C               	movf	ipv4_parseHeader@i& (0+255),w,b
  6400  001C12  0D01               	mullw	1
  6401  001C14  0E0F               	movlw	15
  6402  001C16  26F3               	addwf	prodl,f,c
  6403  001C18  0E00               	movlw	0
  6404  001C1A  22F4               	addwfc	prodh,f,c
  6405  001C1C  0E8F               	movlw	low ipv4_parseHeader@ip
  6406  001C1E  24F3               	addwf	prodl,w,c
  6407  001C20  6ED9               	movwf	fsr2l,c
  6408  001C22  0E00               	movlw	high ipv4_parseHeader@ip
  6409  001C24  20F4               	addwfc	prodh,w,c
  6410  001C26  6EDA               	movwf	fsr2h,c
  6411  001C28  C08B  FFDF         	movff	??_ipv4_parseHeader,indf2
  6412                           
  6413                           ; BSR set to: 0
  6414  001C2C  2B8C               	incf	ipv4_parseHeader@i& (0+255),f,b
  6415  001C2E  D7DF               	goto	l8891
  6416  001C30                     u10530:
  6417                           
  6418                           ; BSR set to: 0
  6419                           ;ipv4.c: 177: for (uint8_t i = 0; i < 4; i++)
  6420                           
  6421                           ; BSR set to: 0
  6422  001C30  0E00               	movlw	0
  6423  001C32  6F8D               	movwf	ipv4_parseHeader@i_3585& (0+255),b
  6424  001C34                     l8903:
  6425                           
  6426                           ; BSR set to: 0
  6427  001C34  0E03               	movlw	3
  6428  001C36  658D               	cpfsgt	ipv4_parseHeader@i_3585& (0+255),b
  6429  001C38  D001               	goto	l1087
  6430  001C3A  D01D               	goto	u10550
  6431  001C3C                     l1087:
  6432                           
  6433                           ; BSR set to: 0
  6434                           ;ipv4.c: 178: ip.destination.address[i] = ethernetController_streamFromRXBuffer(1, field
      +                          ->start);
  6435                           
  6436                           ; BSR set to: 0
  6437  001C3C  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6438  001C40  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6439  001C44  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6440  001C48  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6441  001C4C  0E01               	movlw	1
  6442  001C4E  EC42  F021         	call	_ethernetController_streamFromRXBuffer
  6443  001C52  0100               	movlb	0	; () banked
  6444  001C54  6F8B               	movwf	??_ipv4_parseHeader& (0+255),b
  6445  001C56  518D               	movf	ipv4_parseHeader@i_3585& (0+255),w,b
  6446  001C58  0D01               	mullw	1
  6447  001C5A  0E13               	movlw	19
  6448  001C5C  26F3               	addwf	prodl,f,c
  6449  001C5E  0E00               	movlw	0
  6450  001C60  22F4               	addwfc	prodh,f,c
  6451  001C62  0E8F               	movlw	low ipv4_parseHeader@ip
  6452  001C64  24F3               	addwf	prodl,w,c
  6453  001C66  6ED9               	movwf	fsr2l,c
  6454  001C68  0E00               	movlw	high ipv4_parseHeader@ip
  6455  001C6A  20F4               	addwfc	prodh,w,c
  6456  001C6C  6EDA               	movwf	fsr2h,c
  6457  001C6E  C08B  FFDF         	movff	??_ipv4_parseHeader,indf2
  6458                           
  6459                           ; BSR set to: 0
  6460  001C72  2B8D               	incf	ipv4_parseHeader@i_3585& (0+255),f,b
  6461  001C74  D7DF               	goto	l8903
  6462  001C76                     u10550:
  6463                           
  6464                           ; BSR set to: 0
  6465                           ;ipv4.c: 180: ethernetController_streamFromRXBuffer(2, field->start);
  6466                           
  6467                           ; BSR set to: 0
  6468  001C76  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6469  001C7A  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6470  001C7E  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6471  001C82  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6472  001C86  0E02               	movlw	2
  6473  001C88  EC42  F021         	call	_ethernetController_streamFromRXBuffer
  6474                           
  6475                           ;ipv4.c: 182: return ip;
  6476  001C8C  EE20  F08F         	lfsr	2,ipv4_parseHeader@ip
  6477  001C90  EE00  F074         	lfsr	0,?_ipv4_parseHeader
  6478  001C94  0E16               	movlw	22
  6479  001C96                     u10561:
  6480  001C96  CFDB FFEB          	movff	plusw2,plusw0
  6481  001C9A  06E8               	decf	wreg,f,c
  6482  001C9C  E2FC               	bc	u10561
  6483  001C9E  0012               	return	
  6484  001CA0                     __end_of_ipv4_parseHeader:
  6485                           	opt stack 0
  6486                           tblptru	equ	0xFF8
  6487                           tblptrh	equ	0xFF7
  6488                           tblptrl	equ	0xFF6
  6489                           tablat	equ	0xFF5
  6490                           prodh	equ	0xFF4
  6491                           prodl	equ	0xFF3
  6492                           intcon	equ	0xFF2
  6493                           intcon3	equ	0xFF0
  6494                           indf0	equ	0xFEF
  6495                           postinc0	equ	0xFEE
  6496                           plusw0	equ	0xFEB
  6497                           fsr0h	equ	0xFEA
  6498                           fsr0l	equ	0xFE9
  6499                           wreg	equ	0xFE8
  6500                           postinc1	equ	0xFE6
  6501                           postdec1	equ	0xFE5
  6502                           plusw1	equ	0xFE3
  6503                           fsr1h	equ	0xFE2
  6504                           fsr1l	equ	0xFE1
  6505                           indf2	equ	0xFDF
  6506                           postinc2	equ	0xFDE
  6507                           postdec2	equ	0xFDD
  6508                           plusw2	equ	0xFDB
  6509                           fsr2h	equ	0xFDA
  6510                           fsr2l	equ	0xFD9
  6511                           status	equ	0xFD8
  6512                           
  6513 ;; *************** function _ipv4_checkHeaderChecksum *****************
  6514 ;; Defined at:
  6515 ;;		line 185 in file "src/stack/protocols/ipv4.c"
  6516 ;; Parameters:    Size  Location     Type
  6517 ;;  header          2   58[BANK0 ] PTR struct ipv4_header
  6518 ;;		 -> ipv4_handleNewPacket@ip(23), 
  6519 ;; Auto vars:     Size  Location     Type
  6520 ;;  testHeader     23   62[BANK0 ] struct ipv4_header
  6521 ;; Return value:  Size  Location     Type
  6522 ;;		None               void
  6523 ;; Registers used:
  6524 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6525 ;; Tracked objects:
  6526 ;;		On entry : 0/0
  6527 ;;		On exit  : 0/0
  6528 ;;		Unchanged: 0/0
  6529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6530 ;;      Params:         0       2       0       0       0       0       0       0       0
  6531 ;;      Locals:         0      23       0       0       0       0       0       0       0
  6532 ;;      Temps:          0       2       0       0       0       0       0       0       0
  6533 ;;      Totals:         0      27       0       0       0       0       0       0       0
  6534 ;;Total ram usage:       27 bytes
  6535 ;; Hardware stack levels used:    1
  6536 ;; Hardware stack levels required when called:    6
  6537 ;; This function calls:
  6538 ;;		_UARTTransmitText
  6539 ;;		_hexToString
  6540 ;;		_ipv4_calculateHeaderChecksum
  6541 ;; This function is called by:
  6542 ;;		_ipv4_handleNewPacket
  6543 ;; This function uses a non-reentrant model
  6544 ;;
  6545                           
  6546                           	psect	text14
  6547  00352E                     __ptext14:
  6548                           	opt stack 0
  6549  00352E                     _ipv4_checkHeaderChecksum:
  6550                           	opt stack 21
  6551                           
  6552                           ;ipv4.c: 186: ipv4_header_t testHeader;
  6553                           ;ipv4.c: 187: testHeader = *header;
  6554                           
  6555                           ;incstack = 0
  6556  00352E  C09A  FFD9         	movff	ipv4_checkHeaderChecksum@header,fsr2l
  6557  003532  C09B  FFDA         	movff	ipv4_checkHeaderChecksum@header+1,fsr2h
  6558  003536  EE10  F09E         	lfsr	1,ipv4_checkHeaderChecksum@testHeader
  6559  00353A  0E16               	movlw	22
  6560  00353C                     u10571:
  6561  00353C  CFDB FFE3          	movff	plusw2,plusw1
  6562  003540  06E8               	decf	wreg,f,c
  6563  003542  E2FC               	bc	u10571
  6564                           
  6565                           ;ipv4.c: 188: testHeader.checksum = 0x0000;
  6566  003544  0E00               	movlw	0
  6567  003546  0100               	movlb	0	; () banked
  6568  003548  6FAC               	movwf	(ipv4_checkHeaderChecksum@testHeader+14)& (0+255),b
  6569  00354A  0E00               	movlw	0
  6570  00354C  6FAB               	movwf	(ipv4_checkHeaderChecksum@testHeader+13)& (0+255),b
  6571                           
  6572                           ; BSR set to: 0
  6573                           ;ipv4.c: 189: ipv4_calculateHeaderChecksum(&testHeader);
  6574  00354E  0E9E               	movlw	low ipv4_checkHeaderChecksum@testHeader
  6575  003550  6F60               	movwf	ipv4_calculateHeaderChecksum@header& (0+255),b
  6576  003552  0E00               	movlw	high ipv4_checkHeaderChecksum@testHeader
  6577  003554  6F61               	movwf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),b
  6578  003556  EC02  F009         	call	_ipv4_calculateHeaderChecksum	;wreg free
  6579                           
  6580                           ;ipv4.c: 190: if (testHeader.checksum == header->checksum) {
  6581  00355A  0100               	movlb	0	; () banked
  6582  00355C  EE20 F00D          	lfsr	2,13
  6583  003560  519A               	movf	ipv4_checkHeaderChecksum@header& (0+255),w,b
  6584  003562  26D9               	addwf	fsr2l,f,c
  6585  003564  519B               	movf	(ipv4_checkHeaderChecksum@header+1)& (0+255),w,b
  6586  003566  22DA               	addwfc	fsr2h,f,c
  6587  003568  50DE               	movf	postinc2,w,c
  6588  00356A  19AB               	xorwf	(ipv4_checkHeaderChecksum@testHeader+13)& (0+255),w,b
  6589  00356C  E106               	bnz	l8931
  6590  00356E  50DE               	movf	postinc2,w,c
  6591  003570  19AC               	xorwf	(ipv4_checkHeaderChecksum@testHeader+14)& (0+255),w,b
  6592  003572  A4D8               	btfss	status,2,c
  6593  003574  D002               	goto	l1092
  6594                           
  6595                           ; BSR set to: 0
  6596                           ;ipv4.c: 191: return 1;
  6597  003576  80D8               	bsf	status,0,c
  6598                           
  6599                           ; BSR set to: 0
  6600  003578  0012               	return	
  6601  00357A                     l1092:
  6602  00357A                     l8931:
  6603                           
  6604                           ; BSR set to: 0
  6605                           ;ipv4.c: 192: }
  6606                           ;ipv4.c: 193: UARTTransmitText("[Expected ");
  6607  00357A  0E7A               	movlw	low STR_75
  6608  00357C  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6609  00357E  0E7F               	movlw	high STR_75
  6610  003580  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6611  003582  ECC8  F021         	call	_UARTTransmitText	;wreg free
  6612                           
  6613                           ;ipv4.c: 194: UARTTransmitText(hexToString(testHeader.checksum));
  6614  003586  C0AB  F061         	movff	ipv4_checkHeaderChecksum@testHeader+13,hexToString@val
  6615  00358A  C0AC  F062         	movff	ipv4_checkHeaderChecksum@testHeader+14,hexToString@val+1
  6616  00358E  0100               	movlb	0	; () banked
  6617  003590  6B63               	clrf	(hexToString@val+2)& (0+255),b
  6618  003592  6B64               	clrf	(hexToString@val+3)& (0+255),b
  6619  003594  EC35  F019         	call	_hexToString	;wreg free
  6620  003598  C061  F098         	movff	?_hexToString,UARTTransmitText@str
  6621  00359C  C062  F099         	movff	?_hexToString+1,UARTTransmitText@str+1
  6622  0035A0  ECC8  F021         	call	_UARTTransmitText	;wreg free
  6623                           
  6624                           ;ipv4.c: 195: UARTTransmitText(", got ");
  6625  0035A4  0EB3               	movlw	low STR_76
  6626  0035A6  0100               	movlb	0	; () banked
  6627  0035A8  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6628  0035AA  0E7F               	movlw	high STR_76
  6629  0035AC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6630  0035AE  ECC8  F021         	call	_UARTTransmitText	;wreg free
  6631                           
  6632                           ;ipv4.c: 196: UARTTransmitText(hexToString(header->checksum));
  6633  0035B2  0100               	movlb	0	; () banked
  6634  0035B4  EE20 F00D          	lfsr	2,13
  6635  0035B8  519A               	movf	ipv4_checkHeaderChecksum@header& (0+255),w,b
  6636  0035BA  26D9               	addwf	fsr2l,f,c
  6637  0035BC  519B               	movf	(ipv4_checkHeaderChecksum@header+1)& (0+255),w,b
  6638  0035BE  22DA               	addwfc	fsr2h,f,c
  6639  0035C0  CFDE F09C          	movff	postinc2,??_ipv4_checkHeaderChecksum
  6640  0035C4  CFDD F09D          	movff	postdec2,??_ipv4_checkHeaderChecksum+1
  6641  0035C8  C09C  F061         	movff	??_ipv4_checkHeaderChecksum,hexToString@val
  6642  0035CC  C09D  F062         	movff	??_ipv4_checkHeaderChecksum+1,hexToString@val+1
  6643  0035D0  6B63               	clrf	(hexToString@val+2)& (0+255),b
  6644  0035D2  6B64               	clrf	(hexToString@val+3)& (0+255),b
  6645  0035D4  EC35  F019         	call	_hexToString	;wreg free
  6646  0035D8  C061  F098         	movff	?_hexToString,UARTTransmitText@str
  6647  0035DC  C062  F099         	movff	?_hexToString+1,UARTTransmitText@str+1
  6648  0035E0  ECC8  F021         	call	_UARTTransmitText	;wreg free
  6649                           
  6650                           ;ipv4.c: 197: UARTTransmitText("]");
  6651  0035E4  0EFB               	movlw	low (STR_19+1)
  6652  0035E6  0100               	movlb	0	; () banked
  6653  0035E8  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6654  0035EA  0E7F               	movlw	high (STR_19+1)
  6655  0035EC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6656  0035EE  ECC8  F021         	call	_UARTTransmitText	;wreg free
  6657                           
  6658                           ;ipv4.c: 198: return 0;
  6659  0035F2  90D8               	bcf	status,0,c
  6660  0035F4  0012               	return	
  6661  0035F6                     __end_of_ipv4_checkHeaderChecksum:
  6662                           	opt stack 0
  6663                           tblptru	equ	0xFF8
  6664                           tblptrh	equ	0xFF7
  6665                           tblptrl	equ	0xFF6
  6666                           tablat	equ	0xFF5
  6667                           prodh	equ	0xFF4
  6668                           prodl	equ	0xFF3
  6669                           intcon	equ	0xFF2
  6670                           intcon3	equ	0xFF0
  6671                           indf0	equ	0xFEF
  6672                           postinc0	equ	0xFEE
  6673                           plusw0	equ	0xFEB
  6674                           fsr0h	equ	0xFEA
  6675                           fsr0l	equ	0xFE9
  6676                           wreg	equ	0xFE8
  6677                           postinc1	equ	0xFE6
  6678                           postdec1	equ	0xFE5
  6679                           plusw1	equ	0xFE3
  6680                           fsr1h	equ	0xFE2
  6681                           fsr1l	equ	0xFE1
  6682                           indf2	equ	0xFDF
  6683                           postinc2	equ	0xFDE
  6684                           postdec2	equ	0xFDD
  6685                           plusw2	equ	0xFDB
  6686                           fsr2h	equ	0xFDA
  6687                           fsr2l	equ	0xFD9
  6688                           status	equ	0xFD8
  6689                           
  6690 ;; *************** function _ipv4_calculateHeaderChecksum *****************
  6691 ;; Defined at:
  6692 ;;		line 121 in file "src/stack/protocols/ipv4.c"
  6693 ;; Parameters:    Size  Location     Type
  6694 ;;  header          2    0[BANK0 ] PTR struct ipv4_header
  6695 ;;		 -> ipv4_checkHeaderChecksum@testHeader(23), 
  6696 ;; Auto vars:     Size  Location     Type
  6697 ;;  sum             4   14[BANK0 ] unsigned long 
  6698 ;; Return value:  Size  Location     Type
  6699 ;;                  1    wreg      void 
  6700 ;; Registers used:
  6701 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6702 ;; Tracked objects:
  6703 ;;		On entry : 0/0
  6704 ;;		On exit  : 0/0
  6705 ;;		Unchanged: 0/0
  6706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6707 ;;      Params:         0       2       0       0       0       0       0       0       0
  6708 ;;      Locals:         0       4       0       0       0       0       0       0       0
  6709 ;;      Temps:          0      12       0       0       0       0       0       0       0
  6710 ;;      Totals:         0      18       0       0       0       0       0       0       0
  6711 ;;Total ram usage:       18 bytes
  6712 ;; Hardware stack levels used:    1
  6713 ;; Hardware stack levels required when called:    4
  6714 ;; This function calls:
  6715 ;;		Nothing
  6716 ;; This function is called by:
  6717 ;;		_ipv4_checkHeaderChecksum
  6718 ;; This function uses a non-reentrant model
  6719 ;;
  6720                           
  6721                           	psect	text15
  6722  001204                     __ptext15:
  6723                           	opt stack 0
  6724  001204                     _ipv4_calculateHeaderChecksum:
  6725                           	opt stack 22
  6726                           
  6727                           ;ipv4.c: 123: uint32_t sum = 0;
  6728                           
  6729                           ;incstack = 0
  6730  001204  0E00               	movlw	0
  6731  001206  0100               	movlb	0	; () banked
  6732  001208  6F6E               	movwf	ipv4_calculateHeaderChecksum@sum& (0+255),b
  6733  00120A  0E00               	movlw	0
  6734  00120C  6F6F               	movwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),b
  6735  00120E  0E00               	movlw	0
  6736  001210  6F70               	movwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),b
  6737  001212  0E00               	movlw	0
  6738  001214  6F71               	movwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),b
  6739                           
  6740                           ; BSR set to: 0
  6741                           ;ipv4.c: 124: sum = ((header->version << 12) | (header->headerLength << 8) | (header->ds
      +                          cp << 2) | (header->ecn))&0xffff;
  6742  001216  EE20 F002          	lfsr	2,2
  6743  00121A  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  6744  00121C  26D9               	addwf	fsr2l,f,c
  6745  00121E  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  6746  001220  22DA               	addwfc	fsr2h,f,c
  6747  001222  50DF               	movf	indf2,w,c
  6748  001224  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  6749  001226  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  6750  001228  90D8               	bcf	status,0,c
  6751  00122A  3762               	rlcf	??_ipv4_calculateHeaderChecksum& (0+255),f,b
  6752  00122C  3763               	rlcf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  6753  00122E  90D8               	bcf	status,0,c
  6754  001230  3762               	rlcf	??_ipv4_calculateHeaderChecksum& (0+255),f,b
  6755  001232  3763               	rlcf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  6756  001234  EE20 F001          	lfsr	2,1
  6757  001238  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  6758  00123A  26D9               	addwf	fsr2l,f,c
  6759  00123C  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  6760  00123E  22DA               	addwfc	fsr2h,f,c
  6761  001240  50DF               	movf	indf2,w,c
  6762  001242  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  6763  001244  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  6764  001246  6F66               	movwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  6765  001248  6B65               	clrf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  6766  00124A  C060  FFD9         	movff	ipv4_calculateHeaderChecksum@header,fsr2l
  6767  00124E  C061  FFDA         	movff	ipv4_calculateHeaderChecksum@header+1,fsr2h
  6768  001252  50DF               	movf	indf2,w,c
  6769  001254  6F67               	movwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),b
  6770  001256  6B68               	clrf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),b
  6771  001258  0E0C               	movlw	12
  6772  00125A                     u9705:
  6773  00125A  90D8               	bcf	status,0,c
  6774  00125C  3767               	rlcf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),f,b
  6775  00125E  3768               	rlcf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),f,b
  6776  001260  2EE8               	decfsz	wreg,f,c
  6777  001262  D7FB               	goto	u9705
  6778  001264  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  6779  001266  1367               	iorwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),f,b
  6780  001268  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  6781  00126A  1368               	iorwf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),f,b
  6782  00126C  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  6783  00126E  1367               	iorwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),f,b
  6784  001270  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  6785  001272  1368               	iorwf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),f,b
  6786  001274  EE20 F003          	lfsr	2,3
  6787  001278  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  6788  00127A  26D9               	addwf	fsr2l,f,c
  6789  00127C  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  6790  00127E  22DA               	addwfc	fsr2h,f,c
  6791  001280  50DF               	movf	indf2,w,c
  6792  001282  6F69               	movwf	(??_ipv4_calculateHeaderChecksum+7)& (0+255),b
  6793  001284  5169               	movf	(??_ipv4_calculateHeaderChecksum+7)& (0+255),w,b
  6794  001286  1367               	iorwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),f,b
  6795  001288  0E00               	movlw	0
  6796  00128A  1368               	iorwf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),f,b
  6797  00128C  C067  F06E         	movff	??_ipv4_calculateHeaderChecksum+5,ipv4_calculateHeaderChecksum@sum
  6798  001290  C068  F06F         	movff	??_ipv4_calculateHeaderChecksum+6,ipv4_calculateHeaderChecksum@sum+1
  6799  001294  6B70               	clrf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),b
  6800  001296  6B71               	clrf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),b
  6801                           
  6802                           ; BSR set to: 0
  6803                           ;ipv4.c: 125: sum += header->totalLength;
  6804  001298  EE20 F004          	lfsr	2,4
  6805  00129C  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  6806  00129E  26D9               	addwf	fsr2l,f,c
  6807  0012A0  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  6808  0012A2  22DA               	addwfc	fsr2h,f,c
  6809  0012A4  CFDE F062          	movff	postinc2,??_ipv4_calculateHeaderChecksum
  6810  0012A8  CFDD F063          	movff	postdec2,??_ipv4_calculateHeaderChecksum+1
  6811  0012AC  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  6812  0012AE  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  6813  0012B0  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  6814  0012B2  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  6815  0012B4  0E00               	movlw	0
  6816  0012B6  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  6817  0012B8  0E00               	movlw	0
  6818  0012BA  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  6819                           
  6820                           ; BSR set to: 0
  6821                           ;ipv4.c: 126: sum += header->identification;
  6822  0012BC  EE20 F006          	lfsr	2,6
  6823  0012C0  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  6824  0012C2  26D9               	addwf	fsr2l,f,c
  6825  0012C4  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  6826  0012C6  22DA               	addwfc	fsr2h,f,c
  6827  0012C8  CFDE F062          	movff	postinc2,??_ipv4_calculateHeaderChecksum
  6828  0012CC  CFDD F063          	movff	postdec2,??_ipv4_calculateHeaderChecksum+1
  6829  0012D0  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  6830  0012D2  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  6831  0012D4  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  6832  0012D6  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  6833  0012D8  0E00               	movlw	0
  6834  0012DA  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  6835  0012DC  0E00               	movlw	0
  6836  0012DE  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  6837                           
  6838                           ; BSR set to: 0
  6839                           ;ipv4.c: 127: sum += ((header->flags << 13) | (header->fragmentOffset))&0xffff;
  6840  0012E0  EE20 F009          	lfsr	2,9
  6841  0012E4  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  6842  0012E6  26D9               	addwf	fsr2l,f,c
  6843  0012E8  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  6844  0012EA  22DA               	addwfc	fsr2h,f,c
  6845  0012EC  CFDE F062          	movff	postinc2,??_ipv4_calculateHeaderChecksum
  6846  0012F0  CFDD F063          	movff	postdec2,??_ipv4_calculateHeaderChecksum+1
  6847  0012F4  EE20 F008          	lfsr	2,8
  6848  0012F8  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  6849  0012FA  26D9               	addwf	fsr2l,f,c
  6850  0012FC  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  6851  0012FE  22DA               	addwfc	fsr2h,f,c
  6852  001300  50DF               	movf	indf2,w,c
  6853  001302  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  6854  001304  6B65               	clrf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  6855  001306  0E0D               	movlw	13
  6856  001308                     u9715:
  6857  001308  90D8               	bcf	status,0,c
  6858  00130A  3764               	rlcf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  6859  00130C  3765               	rlcf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  6860  00130E  2EE8               	decfsz	wreg,f,c
  6861  001310  D7FB               	goto	u9715
  6862  001312  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  6863  001314  1364               	iorwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  6864  001316  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  6865  001318  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  6866  00131A  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  6867  00131C  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  6868  00131E  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  6869  001320  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  6870  001322  0E00               	movlw	0
  6871  001324  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  6872  001326  0E00               	movlw	0
  6873  001328  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  6874                           
  6875                           ; BSR set to: 0
  6876                           ;ipv4.c: 128: sum += ((header->timeToLive << 8) | (header->protocol))&0xffff;
  6877  00132A  EE20 F00B          	lfsr	2,11
  6878  00132E  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  6879  001330  26D9               	addwf	fsr2l,f,c
  6880  001332  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  6881  001334  22DA               	addwfc	fsr2h,f,c
  6882  001336  50DF               	movf	indf2,w,c
  6883  001338  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  6884  00133A  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  6885  00133C  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  6886  00133E  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  6887  001340  EE20 F00C          	lfsr	2,12
  6888  001344  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  6889  001346  26D9               	addwf	fsr2l,f,c
  6890  001348  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  6891  00134A  22DA               	addwfc	fsr2h,f,c
  6892  00134C  50DF               	movf	indf2,w,c
  6893  00134E  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  6894  001350  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  6895  001352  1363               	iorwf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  6896  001354  0E00               	movlw	0
  6897  001356  1364               	iorwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  6898  001358  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  6899  00135A  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  6900  00135C  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  6901  00135E  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  6902  001360  0E00               	movlw	0
  6903  001362  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  6904  001364  0E00               	movlw	0
  6905  001366  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  6906                           
  6907                           ; BSR set to: 0
  6908                           ;ipv4.c: 130: sum += ((header->source.address[1] | (header->source.address[0] << 8)))&0x
      +                          ffff;
  6909  001368  EE20 F00F          	lfsr	2,15
  6910  00136C  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  6911  00136E  26D9               	addwf	fsr2l,f,c
  6912  001370  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  6913  001372  22DA               	addwfc	fsr2h,f,c
  6914  001374  50DF               	movf	indf2,w,c
  6915  001376  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  6916  001378  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  6917  00137A  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  6918  00137C  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  6919  00137E  EE20 F010          	lfsr	2,16
  6920  001382  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  6921  001384  26D9               	addwf	fsr2l,f,c
  6922  001386  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  6923  001388  22DA               	addwfc	fsr2h,f,c
  6924  00138A  50DF               	movf	indf2,w,c
  6925  00138C  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  6926  00138E  6B66               	clrf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  6927  001390  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  6928  001392  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  6929  001394  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  6930  001396  1366               	iorwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),f,b
  6931  001398  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  6932  00139A  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  6933  00139C  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  6934  00139E  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  6935  0013A0  0E00               	movlw	0
  6936  0013A2  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  6937  0013A4  0E00               	movlw	0
  6938  0013A6  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  6939                           
  6940                           ; BSR set to: 0
  6941                           ;ipv4.c: 131: sum += ((header->source.address[3] | (header->source.address[2] << 8)))&0x
      +                          ffff;
  6942  0013A8  EE20 F011          	lfsr	2,17
  6943  0013AC  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  6944  0013AE  26D9               	addwf	fsr2l,f,c
  6945  0013B0  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  6946  0013B2  22DA               	addwfc	fsr2h,f,c
  6947  0013B4  50DF               	movf	indf2,w,c
  6948  0013B6  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  6949  0013B8  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  6950  0013BA  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  6951  0013BC  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  6952  0013BE  EE20 F012          	lfsr	2,18
  6953  0013C2  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  6954  0013C4  26D9               	addwf	fsr2l,f,c
  6955  0013C6  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  6956  0013C8  22DA               	addwfc	fsr2h,f,c
  6957  0013CA  50DF               	movf	indf2,w,c
  6958  0013CC  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  6959  0013CE  6B66               	clrf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  6960  0013D0  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  6961  0013D2  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  6962  0013D4  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  6963  0013D6  1366               	iorwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),f,b
  6964  0013D8  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  6965  0013DA  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  6966  0013DC  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  6967  0013DE  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  6968  0013E0  0E00               	movlw	0
  6969  0013E2  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  6970  0013E4  0E00               	movlw	0
  6971  0013E6  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  6972                           
  6973                           ; BSR set to: 0
  6974                           ;ipv4.c: 132: sum += ((header->destination.address[1] | (header->destination.address[0] 
      +                          << 8)))&0xffff;
  6975  0013E8  EE20 F013          	lfsr	2,19
  6976  0013EC  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  6977  0013EE  26D9               	addwf	fsr2l,f,c
  6978  0013F0  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  6979  0013F2  22DA               	addwfc	fsr2h,f,c
  6980  0013F4  50DF               	movf	indf2,w,c
  6981  0013F6  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  6982  0013F8  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  6983  0013FA  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  6984  0013FC  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  6985  0013FE  EE20 F014          	lfsr	2,20
  6986  001402  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  6987  001404  26D9               	addwf	fsr2l,f,c
  6988  001406  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  6989  001408  22DA               	addwfc	fsr2h,f,c
  6990  00140A  50DF               	movf	indf2,w,c
  6991  00140C  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  6992  00140E  6B66               	clrf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  6993  001410  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  6994  001412  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  6995  001414  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  6996  001416  1366               	iorwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),f,b
  6997  001418  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  6998  00141A  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  6999  00141C  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  7000  00141E  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  7001  001420  0E00               	movlw	0
  7002  001422  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  7003  001424  0E00               	movlw	0
  7004  001426  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  7005                           
  7006                           ; BSR set to: 0
  7007                           ;ipv4.c: 133: sum += ((header->destination.address[3] | (header->destination.address[2] 
      +                          << 8)))&0xffff;
  7008  001428  EE20 F015          	lfsr	2,21
  7009  00142C  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  7010  00142E  26D9               	addwf	fsr2l,f,c
  7011  001430  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  7012  001432  22DA               	addwfc	fsr2h,f,c
  7013  001434  50DF               	movf	indf2,w,c
  7014  001436  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  7015  001438  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  7016  00143A  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  7017  00143C  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  7018  00143E  EE20 F016          	lfsr	2,22
  7019  001442  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  7020  001444  26D9               	addwf	fsr2l,f,c
  7021  001446  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  7022  001448  22DA               	addwfc	fsr2h,f,c
  7023  00144A  50DF               	movf	indf2,w,c
  7024  00144C  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  7025  00144E  6B66               	clrf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  7026  001450  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  7027  001452  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  7028  001454  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  7029  001456  1366               	iorwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),f,b
  7030  001458  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  7031  00145A  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  7032  00145C  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  7033  00145E  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  7034  001460  0E00               	movlw	0
  7035  001462  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  7036  001464  0E00               	movlw	0
  7037  001466  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  7038                           
  7039                           ; BSR set to: 0
  7040                           ;ipv4.c: 135: sum = (sum & 0x0ffff)+((sum & 0xf0000) >> 16);
  7041  001468  C06E  F062         	movff	ipv4_calculateHeaderChecksum@sum,??_ipv4_calculateHeaderChecksum
  7042  00146C  C06F  F063         	movff	ipv4_calculateHeaderChecksum@sum+1,??_ipv4_calculateHeaderChecksum+1
  7043  001470  C070  F064         	movff	ipv4_calculateHeaderChecksum@sum+2,??_ipv4_calculateHeaderChecksum+2
  7044  001474  C071  F065         	movff	ipv4_calculateHeaderChecksum@sum+3,??_ipv4_calculateHeaderChecksum+3
  7045  001478  0E11               	movlw	17
  7046  00147A  D005               	goto	u9720
  7047  00147C                     u9725:
  7048  00147C  90D8               	bcf	status,0,c
  7049  00147E  3365               	rrcf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  7050  001480  3364               	rrcf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  7051  001482  3363               	rrcf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  7052  001484  3362               	rrcf	??_ipv4_calculateHeaderChecksum& (0+255),f,b
  7053  001486                     u9720:
  7054  001486  2EE8               	decfsz	wreg,f,c
  7055  001488  D7F9               	goto	u9725
  7056  00148A  0E0F               	movlw	15
  7057  00148C  1562               	andwf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  7058  00148E  6F66               	movwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  7059  001490  0E00               	movlw	0
  7060  001492  1563               	andwf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  7061  001494  6F67               	movwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),b
  7062  001496  0E00               	movlw	0
  7063  001498  1564               	andwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  7064  00149A  6F68               	movwf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),b
  7065  00149C  0E00               	movlw	0
  7066  00149E  1565               	andwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  7067  0014A0  6F69               	movwf	(??_ipv4_calculateHeaderChecksum+7)& (0+255),b
  7068  0014A2  0EFF               	movlw	255
  7069  0014A4  156E               	andwf	ipv4_calculateHeaderChecksum@sum& (0+255),w,b
  7070  0014A6  6F6A               	movwf	(??_ipv4_calculateHeaderChecksum+8)& (0+255),b
  7071  0014A8  0EFF               	movlw	255
  7072  0014AA  156F               	andwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),w,b
  7073  0014AC  6F6B               	movwf	(??_ipv4_calculateHeaderChecksum+9)& (0+255),b
  7074  0014AE  0E00               	movlw	0
  7075  0014B0  1570               	andwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),w,b
  7076  0014B2  6F6C               	movwf	(??_ipv4_calculateHeaderChecksum+10)& (0+255),b
  7077  0014B4  0E00               	movlw	0
  7078  0014B6  1571               	andwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),w,b
  7079  0014B8  6F6D               	movwf	(??_ipv4_calculateHeaderChecksum+11)& (0+255),b
  7080  0014BA  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  7081  0014BC  256A               	addwf	(??_ipv4_calculateHeaderChecksum+8)& (0+255),w,b
  7082  0014BE  6F6E               	movwf	ipv4_calculateHeaderChecksum@sum& (0+255),b
  7083  0014C0  5167               	movf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),w,b
  7084  0014C2  216B               	addwfc	(??_ipv4_calculateHeaderChecksum+9)& (0+255),w,b
  7085  0014C4  6F6F               	movwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),b
  7086  0014C6  5168               	movf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),w,b
  7087  0014C8  216C               	addwfc	(??_ipv4_calculateHeaderChecksum+10)& (0+255),w,b
  7088  0014CA  6F70               	movwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),b
  7089  0014CC  5169               	movf	(??_ipv4_calculateHeaderChecksum+7)& (0+255),w,b
  7090  0014CE  216D               	addwfc	(??_ipv4_calculateHeaderChecksum+11)& (0+255),w,b
  7091  0014D0  6F71               	movwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),b
  7092                           
  7093                           ; BSR set to: 0
  7094                           ;ipv4.c: 136: sum = ~sum;
  7095  0014D2  C06E  F062         	movff	ipv4_calculateHeaderChecksum@sum,??_ipv4_calculateHeaderChecksum
  7096  0014D6  C06F  F063         	movff	ipv4_calculateHeaderChecksum@sum+1,??_ipv4_calculateHeaderChecksum+1
  7097  0014DA  C070  F064         	movff	ipv4_calculateHeaderChecksum@sum+2,??_ipv4_calculateHeaderChecksum+2
  7098  0014DE  C071  F065         	movff	ipv4_calculateHeaderChecksum@sum+3,??_ipv4_calculateHeaderChecksum+3
  7099  0014E2  1F62               	comf	??_ipv4_calculateHeaderChecksum& (0+255),f,b
  7100  0014E4  1F63               	comf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  7101  0014E6  1F64               	comf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  7102  0014E8  1F65               	comf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  7103  0014EA  C062  F06E         	movff	??_ipv4_calculateHeaderChecksum,ipv4_calculateHeaderChecksum@sum
  7104  0014EE  C063  F06F         	movff	??_ipv4_calculateHeaderChecksum+1,ipv4_calculateHeaderChecksum@sum+1
  7105  0014F2  C064  F070         	movff	??_ipv4_calculateHeaderChecksum+2,ipv4_calculateHeaderChecksum@sum+2
  7106  0014F6  C065  F071         	movff	??_ipv4_calculateHeaderChecksum+3,ipv4_calculateHeaderChecksum@sum+3
  7107                           
  7108                           ; BSR set to: 0
  7109                           ;ipv4.c: 138: header->checksum = sum;
  7110  0014FA  EE20 F00D          	lfsr	2,13
  7111  0014FE  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  7112  001500  26D9               	addwf	fsr2l,f,c
  7113  001502  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  7114  001504  22DA               	addwfc	fsr2h,f,c
  7115  001506  C06E  FFDE         	movff	ipv4_calculateHeaderChecksum@sum,postinc2
  7116  00150A  C06F  FFDD         	movff	ipv4_calculateHeaderChecksum@sum+1,postdec2
  7117                           
  7118                           ; BSR set to: 0
  7119  00150E  0012               	return		;funcret
  7120  001510                     __end_of_ipv4_calculateHeaderChecksum:
  7121                           	opt stack 0
  7122                           tblptru	equ	0xFF8
  7123                           tblptrh	equ	0xFF7
  7124                           tblptrl	equ	0xFF6
  7125                           tablat	equ	0xFF5
  7126                           prodh	equ	0xFF4
  7127                           prodl	equ	0xFF3
  7128                           intcon	equ	0xFF2
  7129                           intcon3	equ	0xFF0
  7130                           indf0	equ	0xFEF
  7131                           postinc0	equ	0xFEE
  7132                           plusw0	equ	0xFEB
  7133                           fsr0h	equ	0xFEA
  7134                           fsr0l	equ	0xFE9
  7135                           wreg	equ	0xFE8
  7136                           postinc1	equ	0xFE6
  7137                           postdec1	equ	0xFE5
  7138                           plusw1	equ	0xFE3
  7139                           fsr1h	equ	0xFE2
  7140                           fsr1l	equ	0xFE1
  7141                           indf2	equ	0xFDF
  7142                           postinc2	equ	0xFDE
  7143                           postdec2	equ	0xFDD
  7144                           plusw2	equ	0xFDB
  7145                           fsr2h	equ	0xFDA
  7146                           fsr2l	equ	0xFD9
  7147                           status	equ	0xFD8
  7148                           
  7149 ;; *************** function _hexToString *****************
  7150 ;; Defined at:
  7151 ;;		line 93 in file "src/system/uart.c"
  7152 ;; Parameters:    Size  Location     Type
  7153 ;;  val             4    1[BANK0 ] unsigned long 
  7154 ;; Auto vars:     Size  Location     Type
  7155 ;;  pointer         1    9[BANK0 ] unsigned char 
  7156 ;; Return value:  Size  Location     Type
  7157 ;;                  2    1[BANK0 ] PTR unsigned char 
  7158 ;; Registers used:
  7159 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7160 ;; Tracked objects:
  7161 ;;		On entry : 0/0
  7162 ;;		On exit  : 0/0
  7163 ;;		Unchanged: 0/0
  7164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7165 ;;      Params:         0       4       0       0       0       0       0       0       0
  7166 ;;      Locals:         0       1       0       0       0       0       0       0       0
  7167 ;;      Temps:          0       4       0       0       0       0       0       0       0
  7168 ;;      Totals:         0       9       0       0       0       0       0       0       0
  7169 ;;Total ram usage:        9 bytes
  7170 ;; Hardware stack levels used:    1
  7171 ;; Hardware stack levels required when called:    5
  7172 ;; This function calls:
  7173 ;;		_hexToChar
  7174 ;; This function is called by:
  7175 ;;		_ipv4_checkHeaderChecksum
  7176 ;; This function uses a non-reentrant model
  7177 ;;
  7178                           
  7179                           	psect	text16
  7180  00326A                     __ptext16:
  7181                           	opt stack 0
  7182  00326A                     _hexToString:
  7183                           	opt stack 21
  7184                           
  7185                           ;uart.c: 94: char static number [10];
  7186                           ;uart.c: 95: uint8_t pointer = 0;
  7187                           
  7188                           ; BSR set to: 0
  7189                           ;incstack = 0
  7190  00326A  0E00               	movlw	0
  7191  00326C  0100               	movlb	0	; () banked
  7192  00326E  6F69               	movwf	hexToString@pointer& (0+255),b
  7193                           
  7194                           ; BSR set to: 0
  7195                           ;uart.c: 96: if (val > 0xff) {
  7196  003270  5164               	movf	(hexToString@val+3)& (0+255),w,b
  7197  003272  1163               	iorwf	(hexToString@val+2)& (0+255),w,b
  7198  003274  E103               	bnz	u9340
  7199  003276  0562               	decf	(hexToString@val+1)& (0+255),w,b
  7200  003278  A0D8               	btfss	status,0,c
  7201  00327A  D02F               	goto	l785
  7202  00327C                     u9340:
  7203                           
  7204                           ; BSR set to: 0
  7205                           ;uart.c: 97: number[pointer++] = hexToChar((val >> 12) & 0xf);
  7206  00327C  5169               	movf	hexToString@pointer& (0+255),w,b
  7207  00327E  0D01               	mullw	1
  7208  003280  0EB1               	movlw	low hexToString@number
  7209  003282  24F3               	addwf	prodl,w,c
  7210  003284  6ED9               	movwf	fsr2l,c
  7211  003286  0E02               	movlw	high hexToString@number
  7212  003288  20F4               	addwfc	prodh,w,c
  7213  00328A  6EDA               	movwf	fsr2h,c
  7214  00328C  C061  F065         	movff	hexToString@val,??_hexToString
  7215  003290  C062  F066         	movff	hexToString@val+1,??_hexToString+1
  7216  003294  C063  F067         	movff	hexToString@val+2,??_hexToString+2
  7217  003298  C064  F068         	movff	hexToString@val+3,??_hexToString+3
  7218  00329C  0E0D               	movlw	13
  7219  00329E  D005               	goto	u9350
  7220  0032A0                     u9355:
  7221  0032A0  90D8               	bcf	status,0,c
  7222  0032A2  3368               	rrcf	(??_hexToString+3)& (0+255),f,b
  7223  0032A4  3367               	rrcf	(??_hexToString+2)& (0+255),f,b
  7224  0032A6  3366               	rrcf	(??_hexToString+1)& (0+255),f,b
  7225  0032A8  3365               	rrcf	??_hexToString& (0+255),f,b
  7226  0032AA                     u9350:
  7227  0032AA  2EE8               	decfsz	wreg,f,c
  7228  0032AC  D7F9               	goto	u9355
  7229  0032AE  5165               	movf	??_hexToString& (0+255),w,b
  7230  0032B0  0B0F               	andlw	15
  7231  0032B2  ECB8  F025         	call	_hexToChar
  7232  0032B6  6EDF               	movwf	indf2,c
  7233  0032B8  0100               	movlb	0	; () banked
  7234  0032BA  2B69               	incf	hexToString@pointer& (0+255),f,b
  7235                           
  7236                           ; BSR set to: 0
  7237                           ;uart.c: 98: number[pointer++] = hexToChar((val >> 8) & 0xf);
  7238  0032BC  5169               	movf	hexToString@pointer& (0+255),w,b
  7239  0032BE  0D01               	mullw	1
  7240  0032C0  0EB1               	movlw	low hexToString@number
  7241  0032C2  24F3               	addwf	prodl,w,c
  7242  0032C4  6ED9               	movwf	fsr2l,c
  7243  0032C6  0E02               	movlw	high hexToString@number
  7244  0032C8  20F4               	addwfc	prodh,w,c
  7245  0032CA  6EDA               	movwf	fsr2h,c
  7246  0032CC  5162               	movf	(hexToString@val+1)& (0+255),w,b
  7247  0032CE  0B0F               	andlw	15
  7248  0032D0  ECB8  F025         	call	_hexToChar
  7249  0032D4  6EDF               	movwf	indf2,c
  7250  0032D6  0100               	movlb	0	; () banked
  7251  0032D8  2B69               	incf	hexToString@pointer& (0+255),f,b
  7252  0032DA                     l785:
  7253                           
  7254                           ; BSR set to: 0
  7255                           ;uart.c: 99: }
  7256                           ;uart.c: 100: number[pointer++] = hexToChar((val >> 4) & 0xf);
  7257                           
  7258                           ; BSR set to: 0
  7259  0032DA  5169               	movf	hexToString@pointer& (0+255),w,b
  7260  0032DC  0D01               	mullw	1
  7261  0032DE  0EB1               	movlw	low hexToString@number
  7262  0032E0  24F3               	addwf	prodl,w,c
  7263  0032E2  6ED9               	movwf	fsr2l,c
  7264  0032E4  0E02               	movlw	high hexToString@number
  7265  0032E6  20F4               	addwfc	prodh,w,c
  7266  0032E8  6EDA               	movwf	fsr2h,c
  7267  0032EA  C061  F065         	movff	hexToString@val,??_hexToString
  7268  0032EE  C062  F066         	movff	hexToString@val+1,??_hexToString+1
  7269  0032F2  C063  F067         	movff	hexToString@val+2,??_hexToString+2
  7270  0032F6  C064  F068         	movff	hexToString@val+3,??_hexToString+3
  7271  0032FA  0E05               	movlw	5
  7272  0032FC  D005               	goto	u9360
  7273  0032FE                     u9365:
  7274  0032FE  90D8               	bcf	status,0,c
  7275  003300  3368               	rrcf	(??_hexToString+3)& (0+255),f,b
  7276  003302  3367               	rrcf	(??_hexToString+2)& (0+255),f,b
  7277  003304  3366               	rrcf	(??_hexToString+1)& (0+255),f,b
  7278  003306  3365               	rrcf	??_hexToString& (0+255),f,b
  7279  003308                     u9360:
  7280  003308  2EE8               	decfsz	wreg,f,c
  7281  00330A  D7F9               	goto	u9365
  7282  00330C  5165               	movf	??_hexToString& (0+255),w,b
  7283  00330E  0B0F               	andlw	15
  7284  003310  ECB8  F025         	call	_hexToChar
  7285  003314  6EDF               	movwf	indf2,c
  7286  003316  0100               	movlb	0	; () banked
  7287  003318  2B69               	incf	hexToString@pointer& (0+255),f,b
  7288                           
  7289                           ;uart.c: 101: number[pointer++] = hexToChar(val & 0xf);
  7290  00331A  5169               	movf	hexToString@pointer& (0+255),w,b
  7291  00331C  0D01               	mullw	1
  7292  00331E  0EB1               	movlw	low hexToString@number
  7293  003320  24F3               	addwf	prodl,w,c
  7294  003322  6ED9               	movwf	fsr2l,c
  7295  003324  0E02               	movlw	high hexToString@number
  7296  003326  20F4               	addwfc	prodh,w,c
  7297  003328  6EDA               	movwf	fsr2h,c
  7298  00332A  5161               	movf	hexToString@val& (0+255),w,b
  7299  00332C  0B0F               	andlw	15
  7300  00332E  ECB8  F025         	call	_hexToChar
  7301  003332  6EDF               	movwf	indf2,c
  7302  003334  0100               	movlb	0	; () banked
  7303  003336  2B69               	incf	hexToString@pointer& (0+255),f,b
  7304                           
  7305                           ; BSR set to: 0
  7306                           ;uart.c: 103: number[pointer++] = '\0';
  7307  003338  5169               	movf	hexToString@pointer& (0+255),w,b
  7308  00333A  0D01               	mullw	1
  7309  00333C  0EB1               	movlw	low hexToString@number
  7310  00333E  24F3               	addwf	prodl,w,c
  7311  003340  6ED9               	movwf	fsr2l,c
  7312  003342  0E02               	movlw	high hexToString@number
  7313  003344  20F4               	addwfc	prodh,w,c
  7314  003346  6EDA               	movwf	fsr2h,c
  7315  003348  0E00               	movlw	0
  7316  00334A  6EDF               	movwf	indf2,c
  7317                           
  7318                           ; BSR set to: 0
  7319  00334C  2B69               	incf	hexToString@pointer& (0+255),f,b
  7320                           
  7321                           ; BSR set to: 0
  7322                           ;uart.c: 104: return number;
  7323  00334E  0EB1               	movlw	low hexToString@number
  7324  003350  6F61               	movwf	?_hexToString& (0+255),b
  7325  003352  0E02               	movlw	high hexToString@number
  7326  003354  6F62               	movwf	(?_hexToString+1)& (0+255),b
  7327  003356  0012               	return	
  7328  003358                     __end_of_hexToString:
  7329                           	opt stack 0
  7330                           tblptru	equ	0xFF8
  7331                           tblptrh	equ	0xFF7
  7332                           tblptrl	equ	0xFF6
  7333                           tablat	equ	0xFF5
  7334                           prodh	equ	0xFF4
  7335                           prodl	equ	0xFF3
  7336                           intcon	equ	0xFF2
  7337                           intcon3	equ	0xFF0
  7338                           indf0	equ	0xFEF
  7339                           postinc0	equ	0xFEE
  7340                           plusw0	equ	0xFEB
  7341                           fsr0h	equ	0xFEA
  7342                           fsr0l	equ	0xFE9
  7343                           wreg	equ	0xFE8
  7344                           postinc1	equ	0xFE6
  7345                           postdec1	equ	0xFE5
  7346                           plusw1	equ	0xFE3
  7347                           fsr1h	equ	0xFE2
  7348                           fsr1l	equ	0xFE1
  7349                           indf2	equ	0xFDF
  7350                           postinc2	equ	0xFDE
  7351                           postdec2	equ	0xFDD
  7352                           plusw2	equ	0xFDB
  7353                           fsr2h	equ	0xFDA
  7354                           fsr2l	equ	0xFD9
  7355                           status	equ	0xFD8
  7356                           
  7357 ;; *************** function _hexToChar *****************
  7358 ;; Defined at:
  7359 ;;		line 84 in file "src/system/uart.c"
  7360 ;; Parameters:    Size  Location     Type
  7361 ;;  val             1    wreg     unsigned char 
  7362 ;; Auto vars:     Size  Location     Type
  7363 ;;  val             1    0[BANK0 ] unsigned char 
  7364 ;; Return value:  Size  Location     Type
  7365 ;;                  1    wreg      unsigned char 
  7366 ;; Registers used:
  7367 ;;		wreg, status,2, status,0
  7368 ;; Tracked objects:
  7369 ;;		On entry : 0/0
  7370 ;;		On exit  : 0/0
  7371 ;;		Unchanged: 0/0
  7372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7373 ;;      Params:         0       0       0       0       0       0       0       0       0
  7374 ;;      Locals:         0       1       0       0       0       0       0       0       0
  7375 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7376 ;;      Totals:         0       1       0       0       0       0       0       0       0
  7377 ;;Total ram usage:        1 bytes
  7378 ;; Hardware stack levels used:    1
  7379 ;; Hardware stack levels required when called:    4
  7380 ;; This function calls:
  7381 ;;		Nothing
  7382 ;; This function is called by:
  7383 ;;		_hexToString
  7384 ;; This function uses a non-reentrant model
  7385 ;;
  7386                           
  7387                           	psect	text17
  7388  004B70                     __ptext17:
  7389                           	opt stack 0
  7390  004B70                     _hexToChar:
  7391                           	opt stack 21
  7392                           
  7393                           ; BSR set to: 0
  7394                           ;incstack = 0
  7395                           ;hexToChar@val stored from wreg
  7396  004B70  0100               	movlb	0	; () banked
  7397  004B72  6F60               	movwf	hexToChar@val& (0+255),b
  7398                           
  7399                           ;uart.c: 85: if (val < 10) {
  7400  004B74  0E0A               	movlw	10
  7401  004B76  0100               	movlb	0	; () banked
  7402  004B78  6160               	cpfslt	hexToChar@val& (0+255),b
  7403  004B7A  D003               	goto	l777
  7404                           
  7405                           ; BSR set to: 0
  7406                           ;uart.c: 86: return val + 0x30u;
  7407  004B7C  5160               	movf	hexToChar@val& (0+255),w,b
  7408  004B7E  0F30               	addlw	48
  7409                           
  7410                           ; BSR set to: 0
  7411  004B80  0012               	return	
  7412  004B82                     l777:
  7413                           
  7414                           ; BSR set to: 0
  7415                           
  7416                           ; BSR set to: 0
  7417  004B82  0E10               	movlw	16
  7418  004B84  6160               	cpfslt	hexToChar@val& (0+255),b
  7419  004B86  D003               	goto	l780
  7420                           
  7421                           ; BSR set to: 0
  7422                           ;uart.c: 88: return val + 0x41u - 10;
  7423  004B88  5160               	movf	hexToChar@val& (0+255),w,b
  7424  004B8A  0F37               	addlw	55
  7425                           
  7426                           ; BSR set to: 0
  7427  004B8C  0012               	return	
  7428  004B8E                     l780:
  7429                           
  7430                           ; BSR set to: 0
  7431                           ;uart.c: 89: }
  7432                           ;uart.c: 90: return 0;
  7433                           
  7434                           ; BSR set to: 0
  7435                           
  7436                           ; BSR set to: 0
  7437  004B8E  0E00               	movlw	0
  7438  004B90  0012               	return	
  7439  004B92                     __end_of_hexToChar:
  7440                           	opt stack 0
  7441                           tblptru	equ	0xFF8
  7442                           tblptrh	equ	0xFF7
  7443                           tblptrl	equ	0xFF6
  7444                           tablat	equ	0xFF5
  7445                           prodh	equ	0xFF4
  7446                           prodl	equ	0xFF3
  7447                           intcon	equ	0xFF2
  7448                           intcon3	equ	0xFF0
  7449                           indf0	equ	0xFEF
  7450                           postinc0	equ	0xFEE
  7451                           plusw0	equ	0xFEB
  7452                           fsr0h	equ	0xFEA
  7453                           fsr0l	equ	0xFE9
  7454                           wreg	equ	0xFE8
  7455                           postinc1	equ	0xFE6
  7456                           postdec1	equ	0xFE5
  7457                           plusw1	equ	0xFE3
  7458                           fsr1h	equ	0xFE2
  7459                           fsr1l	equ	0xFE1
  7460                           indf2	equ	0xFDF
  7461                           postinc2	equ	0xFDE
  7462                           postdec2	equ	0xFDD
  7463                           plusw2	equ	0xFDB
  7464                           fsr2h	equ	0xFDA
  7465                           fsr2l	equ	0xFD9
  7466                           status	equ	0xFD8
  7467                           
  7468 ;; *************** function _ipProtocolToString *****************
  7469 ;; Defined at:
  7470 ;;		line 149 in file "src/system/uart.c"
  7471 ;; Parameters:    Size  Location     Type
  7472 ;;  protocol        1    wreg     enum E5627
  7473 ;; Auto vars:     Size  Location     Type
  7474 ;;  protocol        1    2[BANK0 ] enum E5627
  7475 ;; Return value:  Size  Location     Type
  7476 ;;                  2    0[BANK0 ] PTR unsigned char 
  7477 ;; Registers used:
  7478 ;;		wreg, status,2, status,0
  7479 ;; Tracked objects:
  7480 ;;		On entry : 0/0
  7481 ;;		On exit  : 0/0
  7482 ;;		Unchanged: 0/0
  7483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7484 ;;      Params:         0       2       0       0       0       0       0       0       0
  7485 ;;      Locals:         0       1       0       0       0       0       0       0       0
  7486 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7487 ;;      Totals:         0       3       0       0       0       0       0       0       0
  7488 ;;Total ram usage:        3 bytes
  7489 ;; Hardware stack levels used:    1
  7490 ;; Hardware stack levels required when called:    4
  7491 ;; This function calls:
  7492 ;;		Nothing
  7493 ;; This function is called by:
  7494 ;;		_ipv4_handleNewPacket
  7495 ;; This function uses a non-reentrant model
  7496 ;;
  7497                           
  7498                           	psect	text18
  7499  004618                     __ptext18:
  7500                           	opt stack 0
  7501  004618                     _ipProtocolToString:
  7502                           	opt stack 23
  7503                           
  7504                           ; BSR set to: 0
  7505                           ;incstack = 0
  7506                           ;ipProtocolToString@protocol stored from wreg
  7507  004618  0100               	movlb	0	; () banked
  7508  00461A  6F62               	movwf	ipProtocolToString@protocol& (0+255),b
  7509                           
  7510                           ;uart.c: 150: switch (protocol) {
  7511  00461C  D015               	goto	l809
  7512  00461E                     
  7513                           ;uart.c: 152: return "ICMP";
  7514  00461E  0ED6               	movlw	low STR_55
  7515  004620  0100               	movlb	0	; () banked
  7516  004622  6F60               	movwf	?_ipProtocolToString& (0+255),b
  7517  004624  0E7F               	movlw	high STR_55
  7518  004626  6F61               	movwf	(?_ipProtocolToString+1)& (0+255),b
  7519                           
  7520                           ; BSR set to: 0
  7521  004628  0012               	return	
  7522  00462A                     
  7523                           ; BSR set to: 0
  7524                           ;uart.c: 154: return "TCP";
  7525                           
  7526                           ; BSR set to: 0
  7527  00462A  0EE5               	movlw	low STR_56
  7528  00462C  6F60               	movwf	?_ipProtocolToString& (0+255),b
  7529  00462E  0E7F               	movlw	high STR_56
  7530  004630  6F61               	movwf	(?_ipProtocolToString+1)& (0+255),b
  7531                           
  7532                           ; BSR set to: 0
  7533  004632  0012               	return	
  7534  004634                     
  7535                           ; BSR set to: 0
  7536                           ;uart.c: 156: return "UDP";
  7537                           
  7538                           ; BSR set to: 0
  7539  004634  0EE9               	movlw	low STR_57
  7540  004636  6F60               	movwf	?_ipProtocolToString& (0+255),b
  7541  004638  0E7F               	movlw	high STR_57
  7542  00463A  6F61               	movwf	(?_ipProtocolToString+1)& (0+255),b
  7543                           
  7544                           ; BSR set to: 0
  7545  00463C  0012               	return	
  7546  00463E                     
  7547                           ; BSR set to: 0
  7548                           ;uart.c: 158: return "Unknown Protocol";
  7549                           
  7550                           ; BSR set to: 0
  7551  00463E  0EDB               	movlw	low STR_58
  7552  004640  6F60               	movwf	?_ipProtocolToString& (0+255),b
  7553  004642  0E7E               	movlw	high STR_58
  7554  004644  6F61               	movwf	(?_ipProtocolToString+1)& (0+255),b
  7555                           
  7556                           ; BSR set to: 0
  7557                           ;uart.c: 159: }
  7558                           
  7559                           ; BSR set to: 0
  7560  004646  0012               	return	
  7561  004648                     l809:
  7562                           
  7563                           ; BSR set to: 0
  7564  004648  0100               	movlb	0	; () banked
  7565  00464A  5162               	movf	ipProtocolToString@protocol& (0+255),w,b
  7566                           
  7567                           ; Switch size 1, requested type "space"
  7568                           ; Number of cases is 3, Range of values is 1 to 17
  7569                           ; switch strategies available:
  7570                           ; Name         Instructions Cycles
  7571                           ; simple_byte           10     6 (average)
  7572                           ;	Chosen strategy is simple_byte
  7573  00464C  0A01               	xorlw	1	; case 1
  7574  00464E  B4D8               	btfsc	status,2,c
  7575  004650  D7E6               	goto	l810
  7576  004652  0A07               	xorlw	7	; case 6
  7577  004654  B4D8               	btfsc	status,2,c
  7578  004656  D7E9               	goto	l812
  7579  004658  0A17               	xorlw	23	; case 17
  7580  00465A  B4D8               	btfsc	status,2,c
  7581  00465C  D7EB               	goto	l813
  7582  00465E  D7EF               	goto	l814
  7583  004660                     __end_of_ipProtocolToString:
  7584                           	opt stack 0
  7585                           tblptru	equ	0xFF8
  7586                           tblptrh	equ	0xFF7
  7587                           tblptrl	equ	0xFF6
  7588                           tablat	equ	0xFF5
  7589                           prodh	equ	0xFF4
  7590                           prodl	equ	0xFF3
  7591                           intcon	equ	0xFF2
  7592                           intcon3	equ	0xFF0
  7593                           indf0	equ	0xFEF
  7594                           postinc0	equ	0xFEE
  7595                           plusw0	equ	0xFEB
  7596                           fsr0h	equ	0xFEA
  7597                           fsr0l	equ	0xFE9
  7598                           wreg	equ	0xFE8
  7599                           postinc1	equ	0xFE6
  7600                           postdec1	equ	0xFE5
  7601                           plusw1	equ	0xFE3
  7602                           fsr1h	equ	0xFE2
  7603                           fsr1l	equ	0xFE1
  7604                           indf2	equ	0xFDF
  7605                           postinc2	equ	0xFDE
  7606                           postdec2	equ	0xFDD
  7607                           plusw2	equ	0xFDB
  7608                           fsr2h	equ	0xFDA
  7609                           fsr2l	equ	0xFD9
  7610                           status	equ	0xFD8
  7611                           
  7612 ;; *************** function _ethernetController_updateNextPacketPointer *****************
  7613 ;; Defined at:
  7614 ;;		line 334 in file "src/enc424j600/ENC424J600.c"
  7615 ;; Parameters:    Size  Location     Type
  7616 ;;		None
  7617 ;; Auto vars:     Size  Location     Type
  7618 ;;  nextPktPoint    2   21[BANK0 ] unsigned int 
  7619 ;;  newPointerH     1   25[BANK0 ] unsigned char 
  7620 ;;  newPointerL     1   24[BANK0 ] unsigned char 
  7621 ;;  opcode          1   23[BANK0 ] unsigned char 
  7622 ;; Return value:  Size  Location     Type
  7623 ;;                  1    wreg      void 
  7624 ;; Registers used:
  7625 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7626 ;; Tracked objects:
  7627 ;;		On entry : 0/0
  7628 ;;		On exit  : 0/0
  7629 ;;		Unchanged: 0/0
  7630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7631 ;;      Params:         0       0       0       0       0       0       0       0       0
  7632 ;;      Locals:         0       5       0       0       0       0       0       0       0
  7633 ;;      Temps:          0       6       0       0       0       0       0       0       0
  7634 ;;      Totals:         0      11       0       0       0       0       0       0       0
  7635 ;;Total ram usage:       11 bytes
  7636 ;; Hardware stack levels used:    1
  7637 ;; Hardware stack levels required when called:    7
  7638 ;; This function calls:
  7639 ;;		_enc424j600_getNextPacketPointer
  7640 ;;		_enc424j600_readSPI
  7641 ;;		_enc424j600_setERXDATAReadPointer
  7642 ;;		_enc424j600_setNextPacketPointer
  7643 ;;		_enc424j600_writeSPI
  7644 ;; This function is called by:
  7645 ;;		_ethernet_rxGetNewFrame
  7646 ;; This function uses a non-reentrant model
  7647 ;;
  7648                           
  7649                           	psect	text19
  7650  003DBC                     __ptext19:
  7651                           	opt stack 0
  7652  003DBC                     _ethernetController_updateNextPacketPointer:
  7653                           	opt stack 21
  7654                           
  7655                           ;ENC424J600.c: 335: uint16_t nextPktPointer;
  7656                           ;ENC424J600.c: 336: uint8_t opcode;
  7657                           ;ENC424J600.c: 337: uint8_t newPointerL, newPointerH;
  7658                           ;ENC424J600.c: 338: nextPktPointer = enc424j600_getNextPacketPointer();
  7659                           
  7660                           ; BSR set to: 0
  7661                           ;incstack = 0
  7662  003DBC  EC74  F026         	call	_enc424j600_getNextPacketPointer	;wreg free
  7663  003DC0  C060  F075         	movff	?_enc424j600_getNextPacketPointer,ethernetController_updateNextPacketPointer@next
      +                          PktPointer
  7664  003DC4  C061  F076         	movff	?_enc424j600_getNextPacketPointer+1,ethernetController_updateNextPacketPointer@ne
      +                          xtPktPointer+1
  7665                           
  7666                           ;ENC424J600.c: 339: enc424j600_setERXDATAReadPointer(nextPktPointer);
  7667  003DC8  C075  F06A         	movff	ethernetController_updateNextPacketPointer@nextPktPointer,enc424j600_setERXDATARe
      +                          adPointer@addr
  7668  003DCC  C076  F06B         	movff	ethernetController_updateNextPacketPointer@nextPktPointer+1,enc424j600_setERXDATA
      +                          ReadPointer@addr+1
  7669  003DD0  ECF2  F023         	call	_enc424j600_setERXDATAReadPointer	;wreg free
  7670                           
  7671                           ;ENC424J600.c: 340: opcode = 0x2C;
  7672  003DD4  0E2C               	movlw	44
  7673  003DD6  0100               	movlb	0	; () banked
  7674  003DD8  6F77               	movwf	ethernetController_updateNextPacketPointer@opcode& (0+255),b
  7675                           
  7676                           ; BSR set to: 0
  7677                           ;ENC424J600.c: 341: PORTBbits.RB4=0;
  7678  003DDA  9881               	bcf	3969,4,c	;volatile
  7679                           
  7680                           ; BSR set to: 0
  7681                           ;ENC424J600.c: 342: enc424j600_writeSPI(&opcode);
  7682  003DDC  0E77               	movlw	low ethernetController_updateNextPacketPointer@opcode
  7683  003DDE  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
  7684  003DE0  0E00               	movlw	high ethernetController_updateNextPacketPointer@opcode
  7685  003DE2  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
  7686  003DE4  EC10  F021         	call	_enc424j600_writeSPI	;wreg free
  7687                           
  7688                           ;ENC424J600.c: 343: enc424j600_readSPI(&newPointerL);
  7689  003DE8  0E78               	movlw	low ethernetController_updateNextPacketPointer@newPointerL
  7690  003DEA  0100               	movlb	0	; () banked
  7691  003DEC  6F60               	movwf	enc424j600_readSPI@data& (0+255),b
  7692  003DEE  0E00               	movlw	high ethernetController_updateNextPacketPointer@newPointerL
  7693  003DF0  6F61               	movwf	(enc424j600_readSPI@data+1)& (0+255),b
  7694  003DF2  EC74  F020         	call	_enc424j600_readSPI	;wreg free
  7695                           
  7696                           ;ENC424J600.c: 344: enc424j600_readSPI(&newPointerH);
  7697  003DF6  0E79               	movlw	low ethernetController_updateNextPacketPointer@newPointerH
  7698  003DF8  0100               	movlb	0	; () banked
  7699  003DFA  6F60               	movwf	enc424j600_readSPI@data& (0+255),b
  7700  003DFC  0E00               	movlw	high ethernetController_updateNextPacketPointer@newPointerH
  7701  003DFE  6F61               	movwf	(enc424j600_readSPI@data+1)& (0+255),b
  7702  003E00  EC74  F020         	call	_enc424j600_readSPI	;wreg free
  7703                           
  7704                           ;ENC424J600.c: 345: PORTBbits.RB4=1;
  7705  003E04  8881               	bsf	3969,4,c	;volatile
  7706                           
  7707                           ;ENC424J600.c: 347: enc424j600_setNextPacketPointer((uint16_t) ((newPointerL & (unsigned
      +                          ) 0x00ff) | ((unsigned) (newPointerH << 8)&(unsigned) 0xff00)));
  7708  003E06  0E00               	movlw	0
  7709  003E08  0100               	movlb	0	; () banked
  7710  003E0A  6F6F               	movwf	??_ethernetController_updateNextPacketPointer& (0+255),b
  7711  003E0C  0EFF               	movlw	255
  7712  003E0E  6F70               	movwf	(??_ethernetController_updateNextPacketPointer+1)& (0+255),b
  7713  003E10  5179               	movf	ethernetController_updateNextPacketPointer@newPointerH& (0+255),w,b
  7714  003E12  6F72               	movwf	(??_ethernetController_updateNextPacketPointer+3)& (0+255),b
  7715  003E14  6B71               	clrf	(??_ethernetController_updateNextPacketPointer+2)& (0+255),b
  7716  003E16  516F               	movf	??_ethernetController_updateNextPacketPointer& (0+255),w,b
  7717  003E18  1771               	andwf	(??_ethernetController_updateNextPacketPointer+2)& (0+255),f,b
  7718  003E1A  5170               	movf	(??_ethernetController_updateNextPacketPointer+1)& (0+255),w,b
  7719  003E1C  1772               	andwf	(??_ethernetController_updateNextPacketPointer+3)& (0+255),f,b
  7720  003E1E  5178               	movf	ethernetController_updateNextPacketPointer@newPointerL& (0+255),w,b
  7721  003E20  6F73               	movwf	(??_ethernetController_updateNextPacketPointer+4)& (0+255),b
  7722  003E22  6B74               	clrf	(??_ethernetController_updateNextPacketPointer+5)& (0+255),b
  7723  003E24  5171               	movf	(??_ethernetController_updateNextPacketPointer+2)& (0+255),w,b
  7724  003E26  1173               	iorwf	(??_ethernetController_updateNextPacketPointer+4)& (0+255),w,b
  7725  003E28  6F60               	movwf	enc424j600_setNextPacketPointer@ptr& (0+255),b
  7726  003E2A  5172               	movf	(??_ethernetController_updateNextPacketPointer+3)& (0+255),w,b
  7727  003E2C  1174               	iorwf	(??_ethernetController_updateNextPacketPointer+5)& (0+255),w,b
  7728  003E2E  6F61               	movwf	(enc424j600_setNextPacketPointer@ptr+1)& (0+255),b
  7729  003E30  EC79  F026         	call	_enc424j600_setNextPacketPointer	;wreg free
  7730  003E34  0012               	return		;funcret
  7731  003E36                     __end_of_ethernetController_updateNextPacketPointer:
  7732                           	opt stack 0
  7733                           tblptru	equ	0xFF8
  7734                           tblptrh	equ	0xFF7
  7735                           tblptrl	equ	0xFF6
  7736                           tablat	equ	0xFF5
  7737                           prodh	equ	0xFF4
  7738                           prodl	equ	0xFF3
  7739                           intcon	equ	0xFF2
  7740                           intcon3	equ	0xFF0
  7741                           indf0	equ	0xFEF
  7742                           postinc0	equ	0xFEE
  7743                           plusw0	equ	0xFEB
  7744                           fsr0h	equ	0xFEA
  7745                           fsr0l	equ	0xFE9
  7746                           wreg	equ	0xFE8
  7747                           postinc1	equ	0xFE6
  7748                           postdec1	equ	0xFE5
  7749                           plusw1	equ	0xFE3
  7750                           fsr1h	equ	0xFE2
  7751                           fsr1l	equ	0xFE1
  7752                           indf2	equ	0xFDF
  7753                           postinc2	equ	0xFDE
  7754                           postdec2	equ	0xFDD
  7755                           plusw2	equ	0xFDB
  7756                           fsr2h	equ	0xFDA
  7757                           fsr2l	equ	0xFD9
  7758                           status	equ	0xFD8
  7759                           
  7760 ;; *************** function _ethernetController_getRSV *****************
  7761 ;; Defined at:
  7762 ;;		line 299 in file "src/enc424j600/ENC424J600.c"
  7763 ;; Parameters:    Size  Location     Type
  7764 ;;  address         2   17[BANK0 ] unsigned int 
  7765 ;; Auto vars:     Size  Location     Type
  7766 ;;  i               1   23[BANK0 ] unsigned char 
  7767 ;;  opcode          1   22[BANK0 ] unsigned char 
  7768 ;; Return value:  Size  Location     Type
  7769 ;;                  5   17[BANK0 ] struct RSV
  7770 ;; Registers used:
  7771 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7772 ;; Tracked objects:
  7773 ;;		On entry : 0/0
  7774 ;;		On exit  : 0/0
  7775 ;;		Unchanged: 0/0
  7776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7777 ;;      Params:         0       5       0       0       0       0       0       0       0
  7778 ;;      Locals:         0       2       0       0       0       0       0       0       0
  7779 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7780 ;;      Totals:         0       7       0       0       0       0       0       0       0
  7781 ;;Total ram usage:        7 bytes
  7782 ;; Hardware stack levels used:    1
  7783 ;; Hardware stack levels required when called:    7
  7784 ;; This function calls:
  7785 ;;		_enc424j600_readSPI
  7786 ;;		_enc424j600_setERXDATAReadPointer
  7787 ;;		_enc424j600_updateReceiveStatusVector
  7788 ;;		_enc424j600_writeSPI
  7789 ;; This function is called by:
  7790 ;;		_ethernet_rxGetNewFrame
  7791 ;; This function uses a non-reentrant model
  7792 ;;
  7793                           
  7794                           	psect	text20
  7795  003EAE                     __ptext20:
  7796                           	opt stack 0
  7797  003EAE                     _ethernetController_getRSV:
  7798                           	opt stack 21
  7799                           
  7800                           ;ENC424J600.c: 300: uint8_t static temp[6];
  7801                           ;ENC424J600.c: 301: enc424j600_setERXDATAReadPointer(address + 2);
  7802                           
  7803                           ;incstack = 0
  7804  003EAE  0E02               	movlw	2
  7805  003EB0  0100               	movlb	0	; () banked
  7806  003EB2  2571               	addwf	ethernetController_getRSV@address& (0+255),w,b
  7807  003EB4  6F6A               	movwf	enc424j600_setERXDATAReadPointer@addr& (0+255),b
  7808  003EB6  0E00               	movlw	0
  7809  003EB8  2172               	addwfc	(ethernetController_getRSV@address+1)& (0+255),w,b
  7810  003EBA  6F6B               	movwf	(enc424j600_setERXDATAReadPointer@addr+1)& (0+255),b
  7811  003EBC  ECF2  F023         	call	_enc424j600_setERXDATAReadPointer	;wreg free
  7812                           
  7813                           ;ENC424J600.c: 302: uint8_t opcode = 0x2C;
  7814  003EC0  0E2C               	movlw	44
  7815  003EC2  0100               	movlb	0	; () banked
  7816  003EC4  6F76               	movwf	ethernetController_getRSV@opcode& (0+255),b
  7817                           
  7818                           ; BSR set to: 0
  7819                           ;ENC424J600.c: 303: PORTBbits.RB4=0;
  7820  003EC6  9881               	bcf	3969,4,c	;volatile
  7821                           
  7822                           ; BSR set to: 0
  7823                           ;ENC424J600.c: 304: enc424j600_writeSPI(&opcode);
  7824  003EC8  0E76               	movlw	low ethernetController_getRSV@opcode
  7825  003ECA  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
  7826  003ECC  0E00               	movlw	high ethernetController_getRSV@opcode
  7827  003ECE  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
  7828  003ED0  EC10  F021         	call	_enc424j600_writeSPI	;wreg free
  7829                           
  7830                           ;ENC424J600.c: 305: for (uint8_t i = 0; i < 6; i++) {
  7831  003ED4  0E00               	movlw	0
  7832  003ED6  0100               	movlb	0	; () banked
  7833  003ED8  6F77               	movwf	ethernetController_getRSV@i& (0+255),b
  7834  003EDA                     l8967:
  7835                           
  7836                           ; BSR set to: 0
  7837  003EDA  0E05               	movlw	5
  7838  003EDC  6577               	cpfsgt	ethernetController_getRSV@i& (0+255),b
  7839  003EDE  D001               	goto	l165
  7840  003EE0  D00D               	goto	u10600
  7841  003EE2                     l165:
  7842                           
  7843                           ; BSR set to: 0
  7844                           ;ENC424J600.c: 306: enc424j600_readSPI(&temp[i]);
  7845                           
  7846                           ; BSR set to: 0
  7847  003EE2  5177               	movf	ethernetController_getRSV@i& (0+255),w,b
  7848  003EE4  0D01               	mullw	1
  7849  003EE6  0EE7               	movlw	low ethernetController_getRSV@temp
  7850  003EE8  24F3               	addwf	prodl,w,c
  7851  003EEA  6F60               	movwf	enc424j600_readSPI@data& (0+255),b
  7852  003EEC  0E01               	movlw	high ethernetController_getRSV@temp
  7853  003EEE  20F4               	addwfc	prodh,w,c
  7854  003EF0  6F61               	movwf	(enc424j600_readSPI@data+1)& (0+255),b
  7855  003EF2  EC74  F020         	call	_enc424j600_readSPI	;wreg free
  7856  003EF6  0100               	movlb	0	; () banked
  7857  003EF8  2B77               	incf	ethernetController_getRSV@i& (0+255),f,b
  7858  003EFA  D7EF               	goto	l8967
  7859  003EFC                     u10600:
  7860                           
  7861                           ; BSR set to: 0
  7862                           ;ENC424J600.c: 307: }
  7863                           ;ENC424J600.c: 308: PORTBbits.RB4=1;
  7864  003EFC  8881               	bsf	3969,4,c	;volatile
  7865                           
  7866                           ; BSR set to: 0
  7867                           ;ENC424J600.c: 309: return enc424j600_updateReceiveStatusVector(&temp[0]);
  7868  003EFE  0EE7               	movlw	low ethernetController_getRSV@temp
  7869  003F00  6F60               	movwf	enc424j600_updateReceiveStatusVector@rsv& (0+255),b
  7870  003F02  0E01               	movlw	high ethernetController_getRSV@temp
  7871  003F04  6F61               	movwf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),b
  7872  003F06  EC74  F007         	call	_enc424j600_updateReceiveStatusVector	;wreg free
  7873  003F0A  CFE9 FFD9          	movff	fsr0l,fsr2l
  7874  003F0E  CFEA FFDA          	movff	fsr0h,fsr2h
  7875  003F12  EE00  F071         	lfsr	0,?_ethernetController_getRSV
  7876  003F16  0E04               	movlw	4
  7877  003F18                     u10611:
  7878  003F18  CFDB FFEB          	movff	plusw2,plusw0
  7879  003F1C  06E8               	decf	wreg,f,c
  7880  003F1E  E2FC               	bc	u10611
  7881  003F20  0012               	return	
  7882  003F22                     __end_of_ethernetController_getRSV:
  7883                           	opt stack 0
  7884                           tblptru	equ	0xFF8
  7885                           tblptrh	equ	0xFF7
  7886                           tblptrl	equ	0xFF6
  7887                           tablat	equ	0xFF5
  7888                           prodh	equ	0xFF4
  7889                           prodl	equ	0xFF3
  7890                           intcon	equ	0xFF2
  7891                           intcon3	equ	0xFF0
  7892                           indf0	equ	0xFEF
  7893                           postinc0	equ	0xFEE
  7894                           plusw0	equ	0xFEB
  7895                           fsr0h	equ	0xFEA
  7896                           fsr0l	equ	0xFE9
  7897                           wreg	equ	0xFE8
  7898                           postinc1	equ	0xFE6
  7899                           postdec1	equ	0xFE5
  7900                           plusw1	equ	0xFE3
  7901                           fsr1h	equ	0xFE2
  7902                           fsr1l	equ	0xFE1
  7903                           indf2	equ	0xFDF
  7904                           postinc2	equ	0xFDE
  7905                           postdec2	equ	0xFDD
  7906                           plusw2	equ	0xFDB
  7907                           fsr2h	equ	0xFDA
  7908                           fsr2l	equ	0xFD9
  7909                           status	equ	0xFD8
  7910                           
  7911 ;; *************** function _enc424j600_updateReceiveStatusVector *****************
  7912 ;; Defined at:
  7913 ;;		line 719 in file "src/enc424j600/ENC424J600.c"
  7914 ;; Parameters:    Size  Location     Type
  7915 ;;  rsv             2    0[BANK0 ] PTR unsigned char 
  7916 ;;		 -> ethernetController_getRSV@temp(6), 
  7917 ;; Auto vars:     Size  Location     Type
  7918 ;;  receiveStatu    5   12[BANK0 ] struct RSV
  7919 ;; Return value:  Size  Location     Type
  7920 ;;                  5    0[BANK0 ] struct RSV
  7921 ;; Registers used:
  7922 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
  7923 ;; Tracked objects:
  7924 ;;		On entry : 0/0
  7925 ;;		On exit  : 0/0
  7926 ;;		Unchanged: 0/0
  7927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7928 ;;      Params:         0       5       0       0       0       0       0       0       0
  7929 ;;      Locals:         0       5       0       0       0       0       0       0       0
  7930 ;;      Temps:          0       7       0       0       0       0       0       0       0
  7931 ;;      Totals:         0      17       0       0       0       0       0       0       0
  7932 ;;Total ram usage:       17 bytes
  7933 ;; Hardware stack levels used:    1
  7934 ;; Hardware stack levels required when called:    4
  7935 ;; This function calls:
  7936 ;;		Nothing
  7937 ;; This function is called by:
  7938 ;;		_ethernetController_getRSV
  7939 ;; This function uses a non-reentrant model
  7940 ;;
  7941                           
  7942                           	psect	text21
  7943  000EE8                     __ptext21:
  7944                           	opt stack 0
  7945  000EE8                     _enc424j600_updateReceiveStatusVector:
  7946                           	opt stack 23
  7947                           
  7948                           ;ENC424J600.c: 720: RSV_t receiveStatusVector;
  7949                           ;ENC424J600.c: 723: receiveStatusVector.length = (uint16_t) ((*(rsv + 0)) | (uint16_t) (
      +                          ((*(rsv + 1)) << 8)&0xff00));
  7950                           
  7951                           ;incstack = 0
  7952  000EE8  0E00               	movlw	0
  7953  000EEA  0100               	movlb	0	; () banked
  7954  000EEC  6F65               	movwf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  7955  000EEE  0EFF               	movlw	255
  7956  000EF0  6F66               	movwf	(??_enc424j600_updateReceiveStatusVector+1)& (0+255),b
  7957  000EF2  EE20 F001          	lfsr	2,1
  7958  000EF6  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  7959  000EF8  26D9               	addwf	fsr2l,f,c
  7960  000EFA  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7961  000EFC  22DA               	addwfc	fsr2h,f,c
  7962  000EFE  50DF               	movf	indf2,w,c
  7963  000F00  6F67               	movwf	(??_enc424j600_updateReceiveStatusVector+2)& (0+255),b
  7964  000F02  5167               	movf	(??_enc424j600_updateReceiveStatusVector+2)& (0+255),w,b
  7965  000F04  6F69               	movwf	(??_enc424j600_updateReceiveStatusVector+4)& (0+255),b
  7966  000F06  6B68               	clrf	(??_enc424j600_updateReceiveStatusVector+3)& (0+255),b
  7967  000F08  5165               	movf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  7968  000F0A  1768               	andwf	(??_enc424j600_updateReceiveStatusVector+3)& (0+255),f,b
  7969  000F0C  5166               	movf	(??_enc424j600_updateReceiveStatusVector+1)& (0+255),w,b
  7970  000F0E  1769               	andwf	(??_enc424j600_updateReceiveStatusVector+4)& (0+255),f,b
  7971  000F10  C060  FFD9         	movff	enc424j600_updateReceiveStatusVector@rsv,fsr2l
  7972  000F14  C061  FFDA         	movff	enc424j600_updateReceiveStatusVector@rsv+1,fsr2h
  7973  000F18  50DF               	movf	indf2,w,c
  7974  000F1A  6F6A               	movwf	(??_enc424j600_updateReceiveStatusVector+5)& (0+255),b
  7975  000F1C  6B6B               	clrf	(??_enc424j600_updateReceiveStatusVector+6)& (0+255),b
  7976  000F1E  5168               	movf	(??_enc424j600_updateReceiveStatusVector+3)& (0+255),w,b
  7977  000F20  116A               	iorwf	(??_enc424j600_updateReceiveStatusVector+5)& (0+255),w,b
  7978  000F22  6F6C               	movwf	enc424j600_updateReceiveStatusVector@receiveStatusVector& (0+255),b
  7979  000F24  5169               	movf	(??_enc424j600_updateReceiveStatusVector+4)& (0+255),w,b
  7980  000F26  116B               	iorwf	(??_enc424j600_updateReceiveStatusVector+6)& (0+255),w,b
  7981  000F28  6F6D               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+1)& (0+255),b
  7982                           
  7983                           ;ENC424J600.c: 725: receiveStatusVector.packetPreviouslyIgnored = (uint8_t) (*(rsv + 2) 
      +                          & 0b00000001) != 0 ? 1 : 0;
  7984  000F2A  EE20 F002          	lfsr	2,2
  7985  000F2E  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  7986  000F30  26D9               	addwf	fsr2l,f,c
  7987  000F32  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7988  000F34  22DA               	addwfc	fsr2h,f,c
  7989  000F36  A0DF               	btfss	indf2,0,c
  7990  000F38  D003               	goto	u9750
  7991  000F3A  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  7992  000F3C  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  7993  000F3E  D002               	goto	u9768
  7994  000F40                     u9750:
  7995  000F40  0100               	movlb	0	; () banked
  7996  000F42  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  7997  000F44                     u9768:
  7998  000F44  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  7999  000F46  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8000  000F48  0BFE               	andlw	-2
  8001  000F4A  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8002  000F4C  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  8003                           
  8004                           ;ENC424J600.c: 726: receiveStatusVector.carrierEventPreviouslySeen = (uint8_t) (*(rsv + 
      +                          2) & 0b00000100) != 0 ? 1 : 0;
  8005  000F4E  EE20 F002          	lfsr	2,2
  8006  000F52  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  8007  000F54  26D9               	addwf	fsr2l,f,c
  8008  000F56  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8009  000F58  22DA               	addwfc	fsr2h,f,c
  8010  000F5A  A4DF               	btfss	indf2,2,c
  8011  000F5C  D003               	goto	u9770
  8012  000F5E  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8013  000F60  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8014  000F62  D002               	goto	u9788
  8015  000F64                     u9770:
  8016  000F64  0100               	movlb	0	; () banked
  8017  000F66  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8018  000F68                     u9788:
  8019  000F68  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8020  000F6A  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  8021  000F6C  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8022  000F6E  0BFD               	andlw	-3
  8023  000F70  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8024  000F72  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  8025                           
  8026                           ;ENC424J600.c: 727: receiveStatusVector.CRCError = (uint8_t) (*(rsv + 2) & 0b00010000) !
      +                          = 0 ? 1 : 0;
  8027  000F74  EE20 F002          	lfsr	2,2
  8028  000F78  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  8029  000F7A  26D9               	addwf	fsr2l,f,c
  8030  000F7C  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8031  000F7E  22DA               	addwfc	fsr2h,f,c
  8032  000F80  A8DF               	btfss	indf2,4,c
  8033  000F82  D003               	goto	u9790
  8034  000F84  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8035  000F86  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8036  000F88  D002               	goto	u9808
  8037  000F8A                     u9790:
  8038  000F8A  0100               	movlb	0	; () banked
  8039  000F8C  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8040  000F8E                     u9808:
  8041  000F8E  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8042  000F90  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8043  000F92  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  8044  000F94  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8045  000F96  0BFB               	andlw	-5
  8046  000F98  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8047  000F9A  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  8048                           
  8049                           ;ENC424J600.c: 728: receiveStatusVector.lengthCheckError = (uint8_t) (*(rsv + 2) & 0b001
      +                          00000) != 0 ? 1 : 0;
  8050  000F9C  EE20 F002          	lfsr	2,2
  8051  000FA0  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  8052  000FA2  26D9               	addwf	fsr2l,f,c
  8053  000FA4  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8054  000FA6  22DA               	addwfc	fsr2h,f,c
  8055  000FA8  AADF               	btfss	indf2,5,c
  8056  000FAA  D003               	goto	u9810
  8057  000FAC  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8058  000FAE  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8059  000FB0  D002               	goto	u9828
  8060  000FB2                     u9810:
  8061  000FB2  0100               	movlb	0	; () banked
  8062  000FB4  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8063  000FB6                     u9828:
  8064  000FB6  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8065  000FB8  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8066  000FBA  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8067  000FBC  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  8068  000FBE  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8069  000FC0  0BF7               	andlw	-9
  8070  000FC2  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8071  000FC4  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  8072                           
  8073                           ;ENC424J600.c: 729: receiveStatusVector.lengthOutOfRange = (uint8_t) (*(rsv + 2) & 0b010
      +                          00000) != 0 ? 1 : 0;
  8074  000FC6  EE20 F002          	lfsr	2,2
  8075  000FCA  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  8076  000FCC  26D9               	addwf	fsr2l,f,c
  8077  000FCE  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8078  000FD0  22DA               	addwfc	fsr2h,f,c
  8079  000FD2  ACDF               	btfss	indf2,6,c
  8080  000FD4  D003               	goto	u9830
  8081  000FD6  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8082  000FD8  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8083  000FDA  D002               	goto	u9848
  8084  000FDC                     u9830:
  8085  000FDC  0100               	movlb	0	; () banked
  8086  000FDE  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8087  000FE0                     u9848:
  8088  000FE0  3B65               	swapf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8089  000FE2  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  8090  000FE4  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8091  000FE6  0BEF               	andlw	-17
  8092  000FE8  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8093  000FEA  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  8094                           
  8095                           ;ENC424J600.c: 730: receiveStatusVector.receivedOk = (uint8_t) (*(rsv + 2) & 0b10000000)
      +                           != 0 ? 1 : 0;
  8096  000FEC  EE20 F002          	lfsr	2,2
  8097  000FF0  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  8098  000FF2  26D9               	addwf	fsr2l,f,c
  8099  000FF4  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8100  000FF6  22DA               	addwfc	fsr2h,f,c
  8101  000FF8  AEDF               	btfss	indf2,7,c
  8102  000FFA  D003               	goto	u9850
  8103  000FFC  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8104  000FFE  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8105  001000  D002               	goto	u9868
  8106  001002                     u9850:
  8107  001002  0100               	movlb	0	; () banked
  8108  001004  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8109  001006                     u9868:
  8110  001006  3B65               	swapf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8111  001008  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8112  00100A  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  8113  00100C  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8114  00100E  0BDF               	andlw	-33
  8115  001010  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8116  001012  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  8117                           
  8118                           ;ENC424J600.c: 732: receiveStatusVector.multicast = (uint8_t) (*(rsv + 3) & 0b00000001) 
      +                          != 0 ? 1 : 0;
  8119  001014  EE20 F003          	lfsr	2,3
  8120  001018  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  8121  00101A  26D9               	addwf	fsr2l,f,c
  8122  00101C  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8123  00101E  22DA               	addwfc	fsr2h,f,c
  8124  001020  A0DF               	btfss	indf2,0,c
  8125  001022  D003               	goto	u9870
  8126  001024  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8127  001026  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8128  001028  D002               	goto	u9888
  8129  00102A                     u9870:
  8130  00102A  0100               	movlb	0	; () banked
  8131  00102C  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8132  00102E                     u9888:
  8133  00102E  3B65               	swapf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8134  001030  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8135  001032  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8136  001034  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  8137  001036  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8138  001038  0BBF               	andlw	-65
  8139  00103A  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8140  00103C  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  8141                           
  8142                           ;ENC424J600.c: 733: receiveStatusVector.broadcast = (uint8_t) (*(rsv + 3) & 0b00000010) 
      +                          != 0 ? 1 : 0;
  8143  00103E  EE20 F003          	lfsr	2,3
  8144  001042  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  8145  001044  26D9               	addwf	fsr2l,f,c
  8146  001046  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8147  001048  22DA               	addwfc	fsr2h,f,c
  8148  00104A  A2DF               	btfss	indf2,1,c
  8149  00104C  D003               	goto	u9890
  8150  00104E  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8151  001050  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8152  001052  D002               	goto	u9908
  8153  001054                     u9890:
  8154  001054  0100               	movlb	0	; () banked
  8155  001056  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8156  001058                     u9908:
  8157  001058  3365               	rrcf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8158  00105A  3365               	rrcf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8159  00105C  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  8160  00105E  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8161  001060  0B7F               	andlw	-129
  8162  001062  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8163  001064  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  8164                           
  8165                           ;ENC424J600.c: 734: receiveStatusVector.controlFrame = (uint8_t) (*(rsv + 3) & 0b0000100
      +                          0) != 0 ? 1 : 0;
  8166  001066  EE20 F003          	lfsr	2,3
  8167  00106A  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  8168  00106C  26D9               	addwf	fsr2l,f,c
  8169  00106E  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8170  001070  22DA               	addwfc	fsr2h,f,c
  8171  001072  A6DF               	btfss	indf2,3,c
  8172  001074  D003               	goto	u9910
  8173  001076  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8174  001078  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8175  00107A  D002               	goto	u9928
  8176  00107C                     u9910:
  8177  00107C  0100               	movlb	0	; () banked
  8178  00107E  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8179  001080                     u9928:
  8180  001080  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8181  001082  516F               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  8182  001084  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8183  001086  0BFD               	andlw	-3
  8184  001088  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8185  00108A  6F6F               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  8186                           
  8187                           ;ENC424J600.c: 735: receiveStatusVector.pauseFrame = (uint8_t) (*(rsv + 3) & 0b00010000)
      +                           != 0 ? 1 : 0;
  8188  00108C  EE20 F003          	lfsr	2,3
  8189  001090  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  8190  001092  26D9               	addwf	fsr2l,f,c
  8191  001094  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8192  001096  22DA               	addwfc	fsr2h,f,c
  8193  001098  A8DF               	btfss	indf2,4,c
  8194  00109A  D003               	goto	u9930
  8195  00109C  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8196  00109E  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8197  0010A0  D002               	goto	u9948
  8198  0010A2                     u9930:
  8199  0010A2  0100               	movlb	0	; () banked
  8200  0010A4  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8201  0010A6                     u9948:
  8202  0010A6  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8203  0010A8  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8204  0010AA  516F               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  8205  0010AC  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8206  0010AE  0BFB               	andlw	-5
  8207  0010B0  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8208  0010B2  6F6F               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  8209                           
  8210                           ;ENC424J600.c: 736: receiveStatusVector.unknownOpcode = (uint8_t) (*(rsv + 3) & 0b001000
      +                          00) != 0 ? 1 : 0;
  8211  0010B4  EE20 F003          	lfsr	2,3
  8212  0010B8  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  8213  0010BA  26D9               	addwf	fsr2l,f,c
  8214  0010BC  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8215  0010BE  22DA               	addwfc	fsr2h,f,c
  8216  0010C0  AADF               	btfss	indf2,5,c
  8217  0010C2  D003               	goto	u9950
  8218  0010C4  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8219  0010C6  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8220  0010C8  D002               	goto	u9968
  8221  0010CA                     u9950:
  8222  0010CA  0100               	movlb	0	; () banked
  8223  0010CC  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8224  0010CE                     u9968:
  8225  0010CE  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8226  0010D0  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8227  0010D2  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8228  0010D4  516F               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  8229  0010D6  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8230  0010D8  0BF7               	andlw	-9
  8231  0010DA  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8232  0010DC  6F6F               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  8233                           
  8234                           ;ENC424J600.c: 737: receiveStatusVector.vlan = (uint8_t) (*(rsv + 3) & 0b01000000) != 0 
      +                          ? 1 : 0;
  8235  0010DE  EE20 F003          	lfsr	2,3
  8236  0010E2  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  8237  0010E4  26D9               	addwf	fsr2l,f,c
  8238  0010E6  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8239  0010E8  22DA               	addwfc	fsr2h,f,c
  8240  0010EA  ACDF               	btfss	indf2,6,c
  8241  0010EC  D003               	goto	u9970
  8242  0010EE  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8243  0010F0  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8244  0010F2  D002               	goto	u9988
  8245  0010F4                     u9970:
  8246  0010F4  0100               	movlb	0	; () banked
  8247  0010F6  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8248  0010F8                     u9988:
  8249  0010F8  3B65               	swapf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8250  0010FA  516F               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  8251  0010FC  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8252  0010FE  0BEF               	andlw	-17
  8253  001100  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8254  001102  6F6F               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  8255                           
  8256                           ;ENC424J600.c: 738: receiveStatusVector.runtFilter = (uint8_t) (*(rsv + 3) & 0b10000000)
      +                           != 0 ? 1 : 0;
  8257  001104  EE20 F003          	lfsr	2,3
  8258  001108  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  8259  00110A  26D9               	addwf	fsr2l,f,c
  8260  00110C  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8261  00110E  22DA               	addwfc	fsr2h,f,c
  8262  001110  AEDF               	btfss	indf2,7,c
  8263  001112  D003               	goto	u9990
  8264  001114  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8265  001116  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8266  001118  D002               	goto	u10008
  8267  00111A                     u9990:
  8268  00111A  0100               	movlb	0	; () banked
  8269  00111C  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8270  00111E                     u10008:
  8271  00111E  3B65               	swapf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8272  001120  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8273  001122  516F               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  8274  001124  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8275  001126  0BDF               	andlw	-33
  8276  001128  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8277  00112A  6F6F               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  8278                           
  8279                           ;ENC424J600.c: 740: receiveStatusVector.notMeFilter = (uint8_t) (*(rsv + 4) & 0b00000001
      +                          ) != 0 ? 1 : 0;
  8280  00112C  EE20 F004          	lfsr	2,4
  8281  001130  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  8282  001132  26D9               	addwf	fsr2l,f,c
  8283  001134  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8284  001136  22DA               	addwfc	fsr2h,f,c
  8285  001138  A0DF               	btfss	indf2,0,c
  8286  00113A  D003               	goto	u10010
  8287  00113C  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8288  00113E  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8289  001140  D002               	goto	u10028
  8290  001142                     u10010:
  8291  001142  0100               	movlb	0	; () banked
  8292  001144  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8293  001146                     u10028:
  8294  001146  3B65               	swapf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8295  001148  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8296  00114A  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8297  00114C  516F               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  8298  00114E  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8299  001150  0BBF               	andlw	-65
  8300  001152  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8301  001154  6F6F               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  8302                           
  8303                           ;ENC424J600.c: 741: receiveStatusVector.hashFilter = (uint8_t) (*(rsv + 4) & 0b00000010)
      +                           != 0 ? 1 : 0;
  8304  001156  EE20 F004          	lfsr	2,4
  8305  00115A  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  8306  00115C  26D9               	addwf	fsr2l,f,c
  8307  00115E  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8308  001160  22DA               	addwfc	fsr2h,f,c
  8309  001162  A2DF               	btfss	indf2,1,c
  8310  001164  D003               	goto	u10030
  8311  001166  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8312  001168  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8313  00116A  D002               	goto	u10048
  8314  00116C                     u10030:
  8315  00116C  0100               	movlb	0	; () banked
  8316  00116E  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8317  001170                     u10048:
  8318  001170  3365               	rrcf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8319  001172  3365               	rrcf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8320  001174  516F               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  8321  001176  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8322  001178  0B7F               	andlw	-129
  8323  00117A  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8324  00117C  6F6F               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  8325                           
  8326                           ;ENC424J600.c: 742: receiveStatusVector.magicFilter = (uint8_t) (*(rsv + 4) & 0b00000100
      +                          ) != 0 ? 1 : 0;
  8327  00117E  EE20 F004          	lfsr	2,4
  8328  001182  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  8329  001184  26D9               	addwf	fsr2l,f,c
  8330  001186  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8331  001188  22DA               	addwfc	fsr2h,f,c
  8332  00118A  A4DF               	btfss	indf2,2,c
  8333  00118C  D003               	goto	u10050
  8334  00118E  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8335  001190  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8336  001192  D002               	goto	u10068
  8337  001194                     u10050:
  8338  001194  0100               	movlb	0	; () banked
  8339  001196  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8340  001198                     u10068:
  8341  001198  5170               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),w,b
  8342  00119A  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8343  00119C  0BFE               	andlw	-2
  8344  00119E  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8345  0011A0  6F70               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),b
  8346                           
  8347                           ;ENC424J600.c: 743: receiveStatusVector.patternMatch = (uint8_t) (*(rsv + 4) & 0b0000100
      +                          0) != 0 ? 1 : 0;
  8348  0011A2  EE20 F004          	lfsr	2,4
  8349  0011A6  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  8350  0011A8  26D9               	addwf	fsr2l,f,c
  8351  0011AA  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8352  0011AC  22DA               	addwfc	fsr2h,f,c
  8353  0011AE  A6DF               	btfss	indf2,3,c
  8354  0011B0  D003               	goto	u10070
  8355  0011B2  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8356  0011B4  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8357  0011B6  D002               	goto	u10088
  8358  0011B8                     u10070:
  8359  0011B8  0100               	movlb	0	; () banked
  8360  0011BA  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8361  0011BC                     u10088:
  8362  0011BC  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8363  0011BE  5170               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),w,b
  8364  0011C0  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8365  0011C2  0BFD               	andlw	-3
  8366  0011C4  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8367  0011C6  6F70               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),b
  8368                           
  8369                           ;ENC424J600.c: 744: receiveStatusVector.unicast = (uint8_t) (*(rsv + 4) & 0b00010000) !=
      +                           0 ? 1 : 0;
  8370  0011C8  EE20 F004          	lfsr	2,4
  8371  0011CC  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  8372  0011CE  26D9               	addwf	fsr2l,f,c
  8373  0011D0  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8374  0011D2  22DA               	addwfc	fsr2h,f,c
  8375  0011D4  A8DF               	btfss	indf2,4,c
  8376  0011D6  D003               	goto	u10090
  8377  0011D8  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8378  0011DA  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8379  0011DC  D002               	goto	u10108
  8380  0011DE                     u10090:
  8381  0011DE  0100               	movlb	0	; () banked
  8382  0011E0  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8383  0011E2                     u10108:
  8384  0011E2  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8385  0011E4  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8386  0011E6  5170               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),w,b
  8387  0011E8  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8388  0011EA  0BFB               	andlw	-5
  8389  0011EC  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8390  0011EE  6F70               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),b
  8391                           
  8392                           ; BSR set to: 0
  8393                           ;ENC424J600.c: 746: return receiveStatusVector;
  8394  0011F0  EE20  F06C         	lfsr	2,enc424j600_updateReceiveStatusVector@receiveStatusVector
  8395  0011F4  EE00  F060         	lfsr	0,?_enc424j600_updateReceiveStatusVector
  8396  0011F8  0E04               	movlw	4
  8397  0011FA                     u10111:
  8398  0011FA  CFDB FFEB          	movff	plusw2,plusw0
  8399  0011FE  06E8               	decf	wreg,f,c
  8400  001200  E2FC               	bc	u10111
  8401  001202  0012               	return	
  8402  001204                     __end_of_enc424j600_updateReceiveStatusVector:
  8403                           	opt stack 0
  8404                           tblptru	equ	0xFF8
  8405                           tblptrh	equ	0xFF7
  8406                           tblptrl	equ	0xFF6
  8407                           tablat	equ	0xFF5
  8408                           prodh	equ	0xFF4
  8409                           prodl	equ	0xFF3
  8410                           intcon	equ	0xFF2
  8411                           intcon3	equ	0xFF0
  8412                           indf0	equ	0xFEF
  8413                           postinc0	equ	0xFEE
  8414                           plusw0	equ	0xFEB
  8415                           fsr0h	equ	0xFEA
  8416                           fsr0l	equ	0xFE9
  8417                           wreg	equ	0xFE8
  8418                           postinc1	equ	0xFE6
  8419                           postdec1	equ	0xFE5
  8420                           plusw1	equ	0xFE3
  8421                           fsr1h	equ	0xFE2
  8422                           fsr1l	equ	0xFE1
  8423                           indf2	equ	0xFDF
  8424                           postinc2	equ	0xFDE
  8425                           postdec2	equ	0xFDD
  8426                           plusw2	equ	0xFDB
  8427                           fsr2h	equ	0xFDA
  8428                           fsr2l	equ	0xFD9
  8429                           status	equ	0xFD8
  8430                           
  8431 ;; *************** function _ethernetController_getEtherTypeField *****************
  8432 ;; Defined at:
  8433 ;;		line 283 in file "src/enc424j600/ENC424J600.c"
  8434 ;; Parameters:    Size  Location     Type
  8435 ;;  field           9   15[BANK0 ] struct memoryField
  8436 ;; Auto vars:     Size  Location     Type
  8437 ;;  ethertype       2   28[BANK0 ] enum E5508
  8438 ;;  highByte        1   32[BANK0 ] unsigned char 
  8439 ;;  lowByte         1   31[BANK0 ] unsigned char 
  8440 ;;  opcode          1   30[BANK0 ] unsigned char 
  8441 ;; Return value:  Size  Location     Type
  8442 ;;                  2   15[BANK0 ] enum E5508
  8443 ;; Registers used:
  8444 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8445 ;; Tracked objects:
  8446 ;;		On entry : 0/0
  8447 ;;		On exit  : 0/0
  8448 ;;		Unchanged: 0/0
  8449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8450 ;;      Params:         0       9       0       0       0       0       0       0       0
  8451 ;;      Locals:         0       5       0       0       0       0       0       0       0
  8452 ;;      Temps:          0       4       0       0       0       0       0       0       0
  8453 ;;      Totals:         0      18       0       0       0       0       0       0       0
  8454 ;;Total ram usage:       18 bytes
  8455 ;; Hardware stack levels used:    1
  8456 ;; Hardware stack levels required when called:    7
  8457 ;; This function calls:
  8458 ;;		_enc424j600_readSPI
  8459 ;;		_enc424j600_setERXDATAReadPointer
  8460 ;;		_enc424j600_writeSPI
  8461 ;; This function is called by:
  8462 ;;		_ethernet_rxGetNewFrame
  8463 ;; This function uses a non-reentrant model
  8464 ;;
  8465                           
  8466                           	psect	text22
  8467  004008                     __ptext22:
  8468                           	opt stack 0
  8469  004008                     _ethernetController_getEtherTypeField:
  8470                           	opt stack 21
  8471                           
  8472                           ;ENC424J600.c: 284: etherType_t ethertype = 0x0000;
  8473                           
  8474                           ; BSR set to: 0
  8475                           ;incstack = 0
  8476  004008  0E00               	movlw	0
  8477  00400A  0100               	movlb	0	; () banked
  8478  00400C  6F7D               	movwf	(ethernetController_getEtherTypeField@ethertype+1)& (0+255),b
  8479  00400E  0E00               	movlw	0
  8480  004010  6F7C               	movwf	ethernetController_getEtherTypeField@ethertype& (0+255),b
  8481                           
  8482                           ; BSR set to: 0
  8483                           ;ENC424J600.c: 285: enc424j600_setERXDATAReadPointer(field.start + 20);
  8484  004012  0E14               	movlw	20
  8485  004014  256F               	addwf	ethernetController_getEtherTypeField@field& (0+255),w,b
  8486  004016  6F6A               	movwf	enc424j600_setERXDATAReadPointer@addr& (0+255),b
  8487  004018  0E00               	movlw	0
  8488  00401A  2170               	addwfc	(ethernetController_getEtherTypeField@field+1)& (0+255),w,b
  8489  00401C  6F6B               	movwf	(enc424j600_setERXDATAReadPointer@addr+1)& (0+255),b
  8490  00401E  ECF2  F023         	call	_enc424j600_setERXDATAReadPointer	;wreg free
  8491                           
  8492                           ;ENC424J600.c: 286: uint8_t opcode = 0x2C;
  8493  004022  0E2C               	movlw	44
  8494  004024  0100               	movlb	0	; () banked
  8495  004026  6F7E               	movwf	ethernetController_getEtherTypeField@opcode& (0+255),b
  8496                           
  8497                           ; BSR set to: 0
  8498                           ;ENC424J600.c: 287: PORTBbits.RB4=0;
  8499  004028  9881               	bcf	3969,4,c	;volatile
  8500                           
  8501                           ;ENC424J600.c: 288: enc424j600_writeSPI(&opcode);
  8502  00402A  0E7E               	movlw	low ethernetController_getEtherTypeField@opcode
  8503  00402C  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
  8504  00402E  0E00               	movlw	high ethernetController_getEtherTypeField@opcode
  8505  004030  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
  8506  004032  EC10  F021         	call	_enc424j600_writeSPI	;wreg free
  8507                           
  8508                           ;ENC424J600.c: 290: uint8_t lowByte;
  8509                           ;ENC424J600.c: 291: uint8_t highByte;
  8510                           ;ENC424J600.c: 292: enc424j600_readSPI(&highByte);
  8511  004036  0E80               	movlw	low ethernetController_getEtherTypeField@highByte
  8512  004038  0100               	movlb	0	; () banked
  8513  00403A  6F60               	movwf	enc424j600_readSPI@data& (0+255),b
  8514  00403C  0E00               	movlw	high ethernetController_getEtherTypeField@highByte
  8515  00403E  6F61               	movwf	(enc424j600_readSPI@data+1)& (0+255),b
  8516  004040  EC74  F020         	call	_enc424j600_readSPI	;wreg free
  8517                           
  8518                           ;ENC424J600.c: 293: enc424j600_readSPI(&lowByte);
  8519  004044  0E7F               	movlw	low ethernetController_getEtherTypeField@lowByte
  8520  004046  0100               	movlb	0	; () banked
  8521  004048  6F60               	movwf	enc424j600_readSPI@data& (0+255),b
  8522  00404A  0E00               	movlw	high ethernetController_getEtherTypeField@lowByte
  8523  00404C  6F61               	movwf	(enc424j600_readSPI@data+1)& (0+255),b
  8524  00404E  EC74  F020         	call	_enc424j600_readSPI	;wreg free
  8525                           
  8526                           ;ENC424J600.c: 294: ethertype = (uint16_t) (lowByte | (highByte << 8));
  8527  004052  0100               	movlb	0	; () banked
  8528  004054  5180               	movf	ethernetController_getEtherTypeField@highByte& (0+255),w,b
  8529  004056  6F79               	movwf	(??_ethernetController_getEtherTypeField+1)& (0+255),b
  8530  004058  6B78               	clrf	??_ethernetController_getEtherTypeField& (0+255),b
  8531  00405A  517F               	movf	ethernetController_getEtherTypeField@lowByte& (0+255),w,b
  8532  00405C  6F7A               	movwf	(??_ethernetController_getEtherTypeField+2)& (0+255),b
  8533  00405E  6B7B               	clrf	(??_ethernetController_getEtherTypeField+3)& (0+255),b
  8534  004060  5178               	movf	??_ethernetController_getEtherTypeField& (0+255),w,b
  8535  004062  117A               	iorwf	(??_ethernetController_getEtherTypeField+2)& (0+255),w,b
  8536  004064  6F7C               	movwf	ethernetController_getEtherTypeField@ethertype& (0+255),b
  8537  004066  5179               	movf	(??_ethernetController_getEtherTypeField+1)& (0+255),w,b
  8538  004068  117B               	iorwf	(??_ethernetController_getEtherTypeField+3)& (0+255),w,b
  8539  00406A  6F7D               	movwf	(ethernetController_getEtherTypeField@ethertype+1)& (0+255),b
  8540                           
  8541                           ; BSR set to: 0
  8542                           ;ENC424J600.c: 295: PORTBbits.RB4=1;
  8543  00406C  8881               	bsf	3969,4,c	;volatile
  8544                           
  8545                           ; BSR set to: 0
  8546                           ;ENC424J600.c: 296: return ethertype;
  8547  00406E  C07C  F06F         	movff	ethernetController_getEtherTypeField@ethertype,?_ethernetController_getEtherTypeF
      +                          ield
  8548  004072  C07D  F070         	movff	ethernetController_getEtherTypeField@ethertype+1,?_ethernetController_getEtherTyp
      +                          eField+1
  8549  004076  0012               	return	
  8550  004078                     __end_of_ethernetController_getEtherTypeField:
  8551                           	opt stack 0
  8552                           tblptru	equ	0xFF8
  8553                           tblptrh	equ	0xFF7
  8554                           tblptrl	equ	0xFF6
  8555                           tablat	equ	0xFF5
  8556                           prodh	equ	0xFF4
  8557                           prodl	equ	0xFF3
  8558                           intcon	equ	0xFF2
  8559                           intcon3	equ	0xFF0
  8560                           indf0	equ	0xFEF
  8561                           postinc0	equ	0xFEE
  8562                           plusw0	equ	0xFEB
  8563                           fsr0h	equ	0xFEA
  8564                           fsr0l	equ	0xFE9
  8565                           wreg	equ	0xFE8
  8566                           postinc1	equ	0xFE6
  8567                           postdec1	equ	0xFE5
  8568                           plusw1	equ	0xFE3
  8569                           fsr1h	equ	0xFE2
  8570                           fsr1l	equ	0xFE1
  8571                           indf2	equ	0xFDF
  8572                           postinc2	equ	0xFDE
  8573                           postdec2	equ	0xFDD
  8574                           plusw2	equ	0xFDB
  8575                           fsr2h	equ	0xFDA
  8576                           fsr2l	equ	0xFD9
  8577                           status	equ	0xFD8
  8578                           
  8579 ;; *************** function _etherTypeToString *****************
  8580 ;; Defined at:
  8581 ;;		line 138 in file "src/system/uart.c"
  8582 ;; Parameters:    Size  Location     Type
  8583 ;;  ethertype       2    0[BANK0 ] enum E5590
  8584 ;; Auto vars:     Size  Location     Type
  8585 ;;		None
  8586 ;; Return value:  Size  Location     Type
  8587 ;;                  2    0[BANK0 ] PTR unsigned char 
  8588 ;; Registers used:
  8589 ;;		wreg, status,2, status,0
  8590 ;; Tracked objects:
  8591 ;;		On entry : 0/0
  8592 ;;		On exit  : 0/0
  8593 ;;		Unchanged: 0/0
  8594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8595 ;;      Params:         0       2       0       0       0       0       0       0       0
  8596 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8597 ;;      Temps:          0       2       0       0       0       0       0       0       0
  8598 ;;      Totals:         0       4       0       0       0       0       0       0       0
  8599 ;;Total ram usage:        4 bytes
  8600 ;; Hardware stack levels used:    1
  8601 ;; Hardware stack levels required when called:    4
  8602 ;; This function calls:
  8603 ;;		Nothing
  8604 ;; This function is called by:
  8605 ;;		_ethernet_rxGetNewFrame
  8606 ;; This function uses a non-reentrant model
  8607 ;;
  8608                           
  8609                           	psect	text23
  8610  004660                     __ptext23:
  8611                           	opt stack 0
  8612  004660                     _etherTypeToString:
  8613                           	opt stack 24
  8614                           
  8615                           ;uart.c: 139: switch (ethertype) {
  8616                           
  8617                           ; BSR set to: 0
  8618                           ;incstack = 0
  8619  004660  D010               	goto	l801
  8620  004662                     
  8621                           ;uart.c: 141: return "IPv4";
  8622  004662  0ED1               	movlw	low STR_52
  8623  004664  0100               	movlb	0	; () banked
  8624  004666  6F60               	movwf	?_etherTypeToString& (0+255),b
  8625  004668  0E7F               	movlw	high STR_52
  8626  00466A  6F61               	movwf	(?_etherTypeToString+1)& (0+255),b
  8627                           
  8628                           ; BSR set to: 0
  8629  00466C  0012               	return	
  8630  00466E                     
  8631                           ; BSR set to: 0
  8632                           ;uart.c: 143: return "ARP";
  8633                           
  8634                           ; BSR set to: 0
  8635  00466E  0EED               	movlw	low STR_53
  8636  004670  6F60               	movwf	?_etherTypeToString& (0+255),b
  8637  004672  0E7F               	movlw	high STR_53
  8638  004674  6F61               	movwf	(?_etherTypeToString+1)& (0+255),b
  8639                           
  8640                           ; BSR set to: 0
  8641  004676  0012               	return	
  8642  004678                     
  8643                           ; BSR set to: 0
  8644                           ;uart.c: 145: return "Unknown EtherType";
  8645                           
  8646                           ; BSR set to: 0
  8647  004678  0EC9               	movlw	low STR_54
  8648  00467A  6F60               	movwf	?_etherTypeToString& (0+255),b
  8649  00467C  0E7E               	movlw	high STR_54
  8650  00467E  6F61               	movwf	(?_etherTypeToString+1)& (0+255),b
  8651                           
  8652                           ; BSR set to: 0
  8653                           ;uart.c: 146: }
  8654                           
  8655                           ; BSR set to: 0
  8656  004680  0012               	return	
  8657  004682                     l801:
  8658                           
  8659                           ; BSR set to: 0
  8660  004682  C060  F062         	movff	etherTypeToString@ethertype,??_etherTypeToString
  8661  004686  C061  F063         	movff	etherTypeToString@ethertype+1,??_etherTypeToString+1
  8662                           
  8663                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8664                           ; Switch size 1, requested type "space"
  8665                           ; Number of cases is 1, Range of values is 8 to 8
  8666                           ; switch strategies available:
  8667                           ; Name         Instructions Cycles
  8668                           ; simple_byte            4     3 (average)
  8669                           ;	Chosen strategy is simple_byte
  8670  00468A  0100               	movlb	0	; () banked
  8671  00468C  5163               	movf	(??_etherTypeToString+1)& (0+255),w,b
  8672  00468E  0A08               	xorlw	8	; case 8
  8673  004690  A4D8               	btfss	status,2,c
  8674  004692  D7F2               	goto	l805
  8675                           
  8676                           ; BSR set to: 0
  8677                           ; Switch size 1, requested type "space"
  8678                           ; Number of cases is 2, Range of values is 0 to 6
  8679                           ; switch strategies available:
  8680                           ; Name         Instructions Cycles
  8681                           ; simple_byte            7     4 (average)
  8682                           ;	Chosen strategy is simple_byte
  8683  004694  5162               	movf	??_etherTypeToString& (0+255),w,b
  8684  004696  0A00               	xorlw	0	; case 0
  8685  004698  B4D8               	btfsc	status,2,c
  8686  00469A  D7E3               	goto	l802
  8687  00469C  0A06               	xorlw	6	; case 6
  8688  00469E  B4D8               	btfsc	status,2,c
  8689  0046A0  D7E6               	goto	l804
  8690  0046A2  D7EA               	goto	l805
  8691  0046A4                     __end_of_etherTypeToString:
  8692                           	opt stack 0
  8693                           tblptru	equ	0xFF8
  8694                           tblptrh	equ	0xFF7
  8695                           tblptrl	equ	0xFF6
  8696                           tablat	equ	0xFF5
  8697                           prodh	equ	0xFF4
  8698                           prodl	equ	0xFF3
  8699                           intcon	equ	0xFF2
  8700                           intcon3	equ	0xFF0
  8701                           indf0	equ	0xFEF
  8702                           postinc0	equ	0xFEE
  8703                           plusw0	equ	0xFEB
  8704                           fsr0h	equ	0xFEA
  8705                           fsr0l	equ	0xFE9
  8706                           wreg	equ	0xFE8
  8707                           postinc1	equ	0xFE6
  8708                           postdec1	equ	0xFE5
  8709                           plusw1	equ	0xFE3
  8710                           fsr1h	equ	0xFE2
  8711                           fsr1l	equ	0xFE1
  8712                           indf2	equ	0xFDF
  8713                           postinc2	equ	0xFDE
  8714                           postdec2	equ	0xFDD
  8715                           plusw2	equ	0xFDB
  8716                           fsr2h	equ	0xFDA
  8717                           fsr2l	equ	0xFD9
  8718                           status	equ	0xFD8
  8719                           
  8720 ;; *************** function _arp_handleNewPacket *****************
  8721 ;; Defined at:
  8722 ;;		line 33 in file "src/stack/protocols/arp.c"
  8723 ;; Parameters:    Size  Location     Type
  8724 ;;  frame           2  156[BANK0 ] PTR struct ethernetFrame
  8725 ;;		 -> stack.ethernet(15), stack(121), 
  8726 ;; Auto vars:     Size  Location     Type
  8727 ;;  arp            32   88[BANK1 ] struct arp_message
  8728 ;; Return value:  Size  Location     Type
  8729 ;;                  1    wreg      void 
  8730 ;; Registers used:
  8731 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8732 ;; Tracked objects:
  8733 ;;		On entry : 0/0
  8734 ;;		On exit  : 0/0
  8735 ;;		Unchanged: 0/0
  8736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8737 ;;      Params:         0       2       0       0       0       0       0       0       0
  8738 ;;      Locals:         0       0      32       0       0       0       0       0       0
  8739 ;;      Temps:          0       2       0       0       0       0       0       0       0
  8740 ;;      Totals:         0       4      32       0       0       0       0       0       0
  8741 ;;Total ram usage:       36 bytes
  8742 ;; Hardware stack levels used:    1
  8743 ;; Hardware stack levels required when called:   11
  8744 ;; This function calls:
  8745 ;;		_UARTTransmitText
  8746 ;;		_arp_parseFromRXBuffer
  8747 ;;		_arp_sendReply
  8748 ;;		_arp_setNewEntry
  8749 ;;		_ethernetController_dropPacket
  8750 ;;		_getMillis
  8751 ;;		_ipAdressToString
  8752 ;;		_macToString
  8753 ;; This function is called by:
  8754 ;;		_ethernet_rxGetNewFrame
  8755 ;; This function uses a non-reentrant model
  8756 ;;
  8757                           
  8758                           	psect	text24
  8759  0020CC                     __ptext24:
  8760                           	opt stack 0
  8761  0020CC                     _arp_handleNewPacket:
  8762                           	opt stack 17
  8763                           
  8764                           ;arp.c: 34: arp_message_t arp;
  8765                           ;arp.c: 35: if (frame->ethertype != ETHERTYPE_ARP) {
  8766                           
  8767                           ; BSR set to: 0
  8768                           ;incstack = 0
  8769  0020CC  0100               	movlb	0	; () banked
  8770  0020CE  EE20 F00E          	lfsr	2,14
  8771  0020D2  51FC               	movf	arp_handleNewPacket@frame& (0+255),w,b
  8772  0020D4  26D9               	addwf	fsr2l,f,c
  8773  0020D6  51FD               	movf	(arp_handleNewPacket@frame+1)& (0+255),w,b
  8774  0020D8  22DA               	addwfc	fsr2h,f,c
  8775  0020DA  0E06               	movlw	6
  8776  0020DC  18DE               	xorwf	postinc2,w,c
  8777  0020DE  E104               	bnz	u10680
  8778  0020E0  0E08               	movlw	8
  8779  0020E2  18DE               	xorwf	postinc2,w,c
  8780  0020E4  B4D8               	btfsc	status,2,c
  8781  0020E6  D007               	goto	l902
  8782  0020E8                     u10680:
  8783                           
  8784                           ; BSR set to: 0
  8785                           ;arp.c: 36: ethernetController_dropPacket(frame);
  8786  0020E8  C0FC  F072         	movff	arp_handleNewPacket@frame,ethernetController_dropPacket@frame
  8787  0020EC  C0FD  F073         	movff	arp_handleNewPacket@frame+1,ethernetController_dropPacket@frame+1
  8788  0020F0  ECB6  F023         	call	_ethernetController_dropPacket	;wreg free
  8789                           
  8790                           ;arp.c: 37: return;
  8791  0020F4  0012               	return	
  8792  0020F6                     l902:
  8793                           
  8794                           ;arp.c: 38: }
  8795                           ;arp.c: 40: arp = arp_parseFromRXBuffer(frame);
  8796  0020F6  C0FC  F074         	movff	arp_handleNewPacket@frame,arp_parseFromRXBuffer@frame
  8797  0020FA  C0FD  F075         	movff	arp_handleNewPacket@frame+1,arp_parseFromRXBuffer@frame+1
  8798  0020FE  EC77  F005         	call	_arp_parseFromRXBuffer	;wreg free
  8799  002102  EE21  F058         	lfsr	2,arp_handleNewPacket@arp
  8800  002106  0E1F               	movlw	31
  8801  002108                     u10691:
  8802  002108  CFEB FFDB          	movff	plusw0,plusw2
  8803  00210C  06E8               	decf	wreg,f,c
  8804  00210E  E2FC               	bc	u10691
  8805                           
  8806                           ;arp.c: 41: if (arp.err.code != (uint16_t)0) {
  8807  002110  0101               	movlb	1	; () banked
  8808  002112  5176               	movf	(arp_handleNewPacket@arp+30)& (0+255),w,b
  8809  002114  1177               	iorwf	(arp_handleNewPacket@arp+31)& (0+255),w,b
  8810  002116  B4D8               	btfsc	status,2,c
  8811  002118  D00E               	goto	l904
  8812                           
  8813                           ; BSR set to: 1
  8814                           ;arp.c: 42: ethernetController_dropPacket(frame);
  8815  00211A  C0FC  F072         	movff	arp_handleNewPacket@frame,ethernetController_dropPacket@frame
  8816  00211E  C0FD  F073         	movff	arp_handleNewPacket@frame+1,ethernetController_dropPacket@frame+1
  8817  002122  ECB6  F023         	call	_ethernetController_dropPacket	;wreg free
  8818                           
  8819                           ;arp.c: 43: UARTTransmitText("[Invalid ARP Message was discarded.]\r\n");
  8820  002126  0E48               	movlw	low STR_59
  8821  002128  0100               	movlb	0	; () banked
  8822  00212A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  8823  00212C  0E7C               	movlw	high STR_59
  8824  00212E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  8825  002130  ECC8  F021         	call	_UARTTransmitText	;wreg free
  8826                           
  8827                           ;arp.c: 44: return;
  8828  002134  0012               	return	
  8829  002136                     l904:
  8830                           
  8831                           ;arp.c: 45: }
  8832                           ;arp.c: 46: UARTTransmitText("[");
  8833  002136  0ECF               	movlw	low (STR_62+3)
  8834  002138  0100               	movlb	0	; () banked
  8835  00213A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  8836  00213C  0E7F               	movlw	high (STR_62+3)
  8837  00213E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  8838  002140  ECC8  F021         	call	_UARTTransmitText	;wreg free
  8839                           
  8840                           ;arp.c: 47: UARTTransmitText(macToString(arp.senderMACAddress));
  8841  002144  EE21  F060         	lfsr	2,arp_handleNewPacket@arp+8
  8842  002148  EE00  F07A         	lfsr	0,macToString@addr
  8843  00214C  0E05               	movlw	5
  8844  00214E                     u10711:
  8845  00214E  CFDB FFEB          	movff	plusw2,plusw0
  8846  002152  06E8               	decf	wreg,f,c
  8847  002154  E2FC               	bc	u10711
  8848  002156  EC36  F017         	call	_macToString	;wreg free
  8849  00215A  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  8850  00215E  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  8851  002162  ECC8  F021         	call	_UARTTransmitText	;wreg free
  8852                           
  8853                           ;arp.c: 48: UARTTransmitText(", ");
  8854  002166  0E66               	movlw	low (STR_37+17)
  8855  002168  0100               	movlb	0	; () banked
  8856  00216A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  8857  00216C  0E7E               	movlw	high (STR_37+17)
  8858  00216E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  8859  002170  ECC8  F021         	call	_UARTTransmitText	;wreg free
  8860                           
  8861                           ;arp.c: 49: UARTTransmitText(ipAdressToString(arp.senderIPAddress));
  8862  002174  C166  F073         	movff	arp_handleNewPacket@arp+14,ipAdressToString@ip
  8863  002178  C167  F074         	movff	arp_handleNewPacket@arp+15,ipAdressToString@ip+1
  8864  00217C  C168  F075         	movff	arp_handleNewPacket@arp+16,ipAdressToString@ip+2
  8865  002180  C169  F076         	movff	arp_handleNewPacket@arp+17,ipAdressToString@ip+3
  8866  002184  EC6F  F00F         	call	_ipAdressToString	;wreg free
  8867  002188  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  8868  00218C  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  8869  002190  ECC8  F021         	call	_UARTTransmitText	;wreg free
  8870                           
  8871                           ;arp.c: 50: UARTTransmitText("]->[");
  8872  002194  0ECC               	movlw	low STR_62
  8873  002196  0100               	movlb	0	; () banked
  8874  002198  6F98               	movwf	UARTTransmitText@str& (0+255),b
  8875  00219A  0E7F               	movlw	high STR_62
  8876  00219C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  8877  00219E  ECC8  F021         	call	_UARTTransmitText	;wreg free
  8878                           
  8879                           ;arp.c: 51: UARTTransmitText(macToString(arp.targetMACAddress));
  8880  0021A2  EE21  F06A         	lfsr	2,arp_handleNewPacket@arp+18
  8881  0021A6  EE00  F07A         	lfsr	0,macToString@addr
  8882  0021AA  0E05               	movlw	5
  8883  0021AC                     u10721:
  8884  0021AC  CFDB FFEB          	movff	plusw2,plusw0
  8885  0021B0  06E8               	decf	wreg,f,c
  8886  0021B2  E2FC               	bc	u10721
  8887  0021B4  EC36  F017         	call	_macToString	;wreg free
  8888  0021B8  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  8889  0021BC  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  8890  0021C0  ECC8  F021         	call	_UARTTransmitText	;wreg free
  8891                           
  8892                           ;arp.c: 52: UARTTransmitText(", ");
  8893  0021C4  0E66               	movlw	low (STR_37+17)
  8894  0021C6  0100               	movlb	0	; () banked
  8895  0021C8  6F98               	movwf	UARTTransmitText@str& (0+255),b
  8896  0021CA  0E7E               	movlw	high (STR_37+17)
  8897  0021CC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  8898  0021CE  ECC8  F021         	call	_UARTTransmitText	;wreg free
  8899                           
  8900                           ;arp.c: 53: UARTTransmitText(ipAdressToString(arp.targetIPAddress));
  8901  0021D2  C170  F073         	movff	arp_handleNewPacket@arp+24,ipAdressToString@ip
  8902  0021D6  C171  F074         	movff	arp_handleNewPacket@arp+25,ipAdressToString@ip+1
  8903  0021DA  C172  F075         	movff	arp_handleNewPacket@arp+26,ipAdressToString@ip+2
  8904  0021DE  C173  F076         	movff	arp_handleNewPacket@arp+27,ipAdressToString@ip+3
  8905  0021E2  EC6F  F00F         	call	_ipAdressToString	;wreg free
  8906  0021E6  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  8907  0021EA  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  8908  0021EE  ECC8  F021         	call	_UARTTransmitText	;wreg free
  8909                           
  8910                           ;arp.c: 54: UARTTransmitText("]");
  8911  0021F2  0EFB               	movlw	low (STR_19+1)
  8912  0021F4  0100               	movlb	0	; () banked
  8913  0021F6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  8914  0021F8  0E7F               	movlw	high (STR_19+1)
  8915  0021FA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  8916  0021FC  ECC8  F021         	call	_UARTTransmitText	;wreg free
  8917                           
  8918                           ;arp.c: 55: if (arp.fIsProbe)
  8919  002200  0101               	movlb	1	; () banked
  8920  002202  A374               	btfss	(arp_handleNewPacket@arp+28)& (0+255),1,b
  8921  002204  D007               	goto	l905
  8922                           
  8923                           ; BSR set to: 1
  8924                           ;arp.c: 56: UARTTransmitText("[IsProbe]");
  8925  002206  0E85               	movlw	low STR_65
  8926  002208  0100               	movlb	0	; () banked
  8927  00220A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  8928  00220C  0E7F               	movlw	high STR_65
  8929  00220E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  8930  002210  ECC8  F021         	call	_UARTTransmitText	;wreg free
  8931  002214                     l905:
  8932                           
  8933                           ;arp.c: 57: if (arp.fIsGratuitous)
  8934  002214  0101               	movlb	1	; () banked
  8935  002216  A174               	btfss	(arp_handleNewPacket@arp+28)& (0+255),0,b
  8936  002218  D007               	goto	l906
  8937                           
  8938                           ; BSR set to: 1
  8939                           ;arp.c: 58: UARTTransmitText("[IsGratuitous]");
  8940  00221A  0E1D               	movlw	low STR_66
  8941  00221C  0100               	movlb	0	; () banked
  8942  00221E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  8943  002220  0E7F               	movlw	high STR_66
  8944  002222  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  8945  002224  ECC8  F021         	call	_UARTTransmitText	;wreg free
  8946  002228                     l906:
  8947                           
  8948                           ;arp.c: 60: arp_sendReply(arp);
  8949  002228  EE21  F058         	lfsr	2,arp_handleNewPacket@arp
  8950  00222C  EE01  F000         	lfsr	0,arp_sendReply@request
  8951  002230  0E1F               	movlw	31
  8952  002232                     u10751:
  8953  002232  CFDB FFEB          	movff	plusw2,plusw0
  8954  002236  06E8               	decf	wreg,f,c
  8955  002238  E2FC               	bc	u10751
  8956  00223A  EC98  F013         	call	_arp_sendReply	;wreg free
  8957                           
  8958                           ;arp.c: 61: arp_setNewEntry(arp.senderMACAddress, arp.senderIPAddress, getMillis());
  8959  00223E  EE21  F060         	lfsr	2,arp_handleNewPacket@arp+8
  8960  002242  EE00  F064         	lfsr	0,arp_setNewEntry@mac
  8961  002246  0E05               	movlw	5
  8962  002248                     u10761:
  8963  002248  CFDB FFEB          	movff	plusw2,plusw0
  8964  00224C  06E8               	decf	wreg,f,c
  8965  00224E  E2FC               	bc	u10761
  8966  002250  C166  F06A         	movff	arp_handleNewPacket@arp+14,arp_setNewEntry@ip
  8967  002254  C167  F06B         	movff	arp_handleNewPacket@arp+15,arp_setNewEntry@ip+1
  8968  002258  C168  F06C         	movff	arp_handleNewPacket@arp+16,arp_setNewEntry@ip+2
  8969  00225C  C169  F06D         	movff	arp_handleNewPacket@arp+17,arp_setNewEntry@ip+3
  8970  002260  EC39  F026         	call	_getMillis	;wreg free
  8971  002264  C060  F06E         	movff	?_getMillis,arp_setNewEntry@timestamp
  8972  002268  C061  F06F         	movff	?_getMillis+1,arp_setNewEntry@timestamp+1
  8973  00226C  C062  F070         	movff	?_getMillis+2,arp_setNewEntry@timestamp+2
  8974  002270  C063  F071         	movff	?_getMillis+3,arp_setNewEntry@timestamp+3
  8975  002274  ECAC  F019         	call	_arp_setNewEntry	;wreg free
  8976  002278  0012               	return		;funcret
  8977  00227A                     __end_of_arp_handleNewPacket:
  8978                           	opt stack 0
  8979                           tblptru	equ	0xFF8
  8980                           tblptrh	equ	0xFF7
  8981                           tblptrl	equ	0xFF6
  8982                           tablat	equ	0xFF5
  8983                           prodh	equ	0xFF4
  8984                           prodl	equ	0xFF3
  8985                           intcon	equ	0xFF2
  8986                           intcon3	equ	0xFF0
  8987                           indf0	equ	0xFEF
  8988                           postinc0	equ	0xFEE
  8989                           plusw0	equ	0xFEB
  8990                           fsr0h	equ	0xFEA
  8991                           fsr0l	equ	0xFE9
  8992                           wreg	equ	0xFE8
  8993                           postinc1	equ	0xFE6
  8994                           postdec1	equ	0xFE5
  8995                           plusw1	equ	0xFE3
  8996                           fsr1h	equ	0xFE2
  8997                           fsr1l	equ	0xFE1
  8998                           indf2	equ	0xFDF
  8999                           postinc2	equ	0xFDE
  9000                           postdec2	equ	0xFDD
  9001                           plusw2	equ	0xFDB
  9002                           fsr2h	equ	0xFDA
  9003                           fsr2l	equ	0xFD9
  9004                           status	equ	0xFD8
  9005                           
  9006 ;; *************** function _ethernetController_dropPacket *****************
  9007 ;; Defined at:
  9008 ;;		line 379 in file "src/enc424j600/ENC424J600.c"
  9009 ;; Parameters:    Size  Location     Type
  9010 ;;  frame           2   18[BANK0 ] PTR struct ethernetFrame
  9011 ;;		 -> stack.ethernet(15), stack(121), 
  9012 ;; Auto vars:     Size  Location     Type
  9013 ;;		None
  9014 ;; Return value:  Size  Location     Type
  9015 ;;                  1    wreg      void 
  9016 ;; Registers used:
  9017 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9018 ;; Tracked objects:
  9019 ;;		On entry : 0/0
  9020 ;;		On exit  : 0/0
  9021 ;;		Unchanged: 0/0
  9022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9023 ;;      Params:         0       2       0       0       0       0       0       0       0
  9024 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9025 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9026 ;;      Totals:         0       2       0       0       0       0       0       0       0
  9027 ;;Total ram usage:        2 bytes
  9028 ;; Hardware stack levels used:    1
  9029 ;; Hardware stack levels required when called:    8
  9030 ;; This function calls:
  9031 ;;		_enc424j600_setRXTailPointer
  9032 ;;		_enc424j600_writeSingleByte
  9033 ;;		_ethernetController_getNextPacketPointer
  9034 ;; This function is called by:
  9035 ;;		_ethernet_rxGetNewFrame
  9036 ;;		_arp_handleNewPacket
  9037 ;;		_ipv4_handleNewPacket
  9038 ;; This function uses a non-reentrant model
  9039 ;;
  9040                           
  9041                           	psect	text25
  9042  00476C                     __ptext25:
  9043                           	opt stack 0
  9044  00476C                     _ethernetController_dropPacket:
  9045                           	opt stack 19
  9046                           
  9047                           ;ENC424J600.c: 381: if (ethernetController_getNextPacketPointer() == 0x3000) {
  9048                           
  9049                           ;incstack = 0
  9050  00476C  EC5A  F026         	call	_ethernetController_getNextPacketPointer	;wreg free
  9051  004770  0E30               	movlw	48
  9052  004772  0100               	movlb	0	; () banked
  9053  004774  1963               	xorwf	(?_ethernetController_getNextPacketPointer+1)& (0+255),w,b
  9054  004776  1162               	iorwf	?_ethernetController_getNextPacketPointer& (0+255),w,b
  9055  004778  A4D8               	btfss	status,2,c
  9056  00477A  D007               	goto	l187
  9057                           
  9058                           ; BSR set to: 0
  9059                           ;ENC424J600.c: 382: enc424j600_setRXTailPointer(0x5FFF - 1);
  9060  00477C  0E5F               	movlw	95
  9061  00477E  6F6F               	movwf	(enc424j600_setRXTailPointer@addr+1)& (0+255),b
  9062  004780  0EFE               	movlw	254
  9063  004782  6F6E               	movwf	enc424j600_setRXTailPointer@addr& (0+255),b
  9064  004784  EC08  F025         	call	_enc424j600_setRXTailPointer	;wreg free
  9065                           
  9066                           ;ENC424J600.c: 383: } else {
  9067  004788  D00B               	goto	l188
  9068  00478A                     l187:
  9069                           
  9070                           ;ENC424J600.c: 384: enc424j600_setRXTailPointer(ethernetController_getNextPacketPointer(
      +                          ) - 2);
  9071  00478A  EC5A  F026         	call	_ethernetController_getNextPacketPointer	;wreg free
  9072  00478E  0EFE               	movlw	254
  9073  004790  0100               	movlb	0	; () banked
  9074  004792  2562               	addwf	?_ethernetController_getNextPacketPointer& (0+255),w,b
  9075  004794  6F6E               	movwf	enc424j600_setRXTailPointer@addr& (0+255),b
  9076  004796  0EFF               	movlw	255
  9077  004798  2163               	addwfc	(?_ethernetController_getNextPacketPointer+1)& (0+255),w,b
  9078  00479A  6F6F               	movwf	(enc424j600_setRXTailPointer@addr+1)& (0+255),b
  9079  00479C  EC08  F025         	call	_enc424j600_setRXTailPointer	;wreg free
  9080  0047A0                     l188:
  9081                           
  9082                           ;ENC424J600.c: 385: }
  9083                           ;ENC424J600.c: 387: enc424j600_writeSingleByte(0b11001100);
  9084  0047A0  0ECC               	movlw	204
  9085  0047A2  EC11  F026         	call	_enc424j600_writeSingleByte
  9086  0047A6  0012               	return		;funcret
  9087  0047A8                     __end_of_ethernetController_dropPacket:
  9088                           	opt stack 0
  9089                           tblptru	equ	0xFF8
  9090                           tblptrh	equ	0xFF7
  9091                           tblptrl	equ	0xFF6
  9092                           tablat	equ	0xFF5
  9093                           prodh	equ	0xFF4
  9094                           prodl	equ	0xFF3
  9095                           intcon	equ	0xFF2
  9096                           intcon3	equ	0xFF0
  9097                           indf0	equ	0xFEF
  9098                           postinc0	equ	0xFEE
  9099                           plusw0	equ	0xFEB
  9100                           fsr0h	equ	0xFEA
  9101                           fsr0l	equ	0xFE9
  9102                           wreg	equ	0xFE8
  9103                           postinc1	equ	0xFE6
  9104                           postdec1	equ	0xFE5
  9105                           plusw1	equ	0xFE3
  9106                           fsr1h	equ	0xFE2
  9107                           fsr1l	equ	0xFE1
  9108                           indf2	equ	0xFDF
  9109                           postinc2	equ	0xFDE
  9110                           postdec2	equ	0xFDD
  9111                           plusw2	equ	0xFDB
  9112                           fsr2h	equ	0xFDA
  9113                           fsr2l	equ	0xFD9
  9114                           status	equ	0xFD8
  9115                           
  9116 ;; *************** function _ethernetController_getNextPacketPointer *****************
  9117 ;; Defined at:
  9118 ;;		line 461 in file "src/enc424j600/ENC424J600.c"
  9119 ;; Parameters:    Size  Location     Type
  9120 ;;		None
  9121 ;; Auto vars:     Size  Location     Type
  9122 ;;		None
  9123 ;; Return value:  Size  Location     Type
  9124 ;;                  2    2[BANK0 ] unsigned int 
  9125 ;; Registers used:
  9126 ;;		cstack
  9127 ;; Tracked objects:
  9128 ;;		On entry : 0/0
  9129 ;;		On exit  : 0/0
  9130 ;;		Unchanged: 0/0
  9131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9132 ;;      Params:         0       2       0       0       0       0       0       0       0
  9133 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9134 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9135 ;;      Totals:         0       2       0       0       0       0       0       0       0
  9136 ;;Total ram usage:        2 bytes
  9137 ;; Hardware stack levels used:    1
  9138 ;; Hardware stack levels required when called:    5
  9139 ;; This function calls:
  9140 ;;		_enc424j600_getNextPacketPointer
  9141 ;; This function is called by:
  9142 ;;		_ethernetController_dropPacket
  9143 ;;		_ethernet_rxGetNewFrame
  9144 ;; This function uses a non-reentrant model
  9145 ;;
  9146                           
  9147                           	psect	text26
  9148  004CB4                     __ptext26:
  9149                           	opt stack 0
  9150  004CB4                     _ethernetController_getNextPacketPointer:
  9151                           	opt stack 21
  9152                           
  9153                           ;ENC424J600.c: 462: return enc424j600_getNextPacketPointer();
  9154                           
  9155                           ;incstack = 0
  9156  004CB4  EC74  F026         	call	_enc424j600_getNextPacketPointer	;wreg free
  9157  004CB8  C060  F062         	movff	?_enc424j600_getNextPacketPointer,?_ethernetController_getNextPacketPointer
  9158  004CBC  C061  F063         	movff	?_enc424j600_getNextPacketPointer+1,?_ethernetController_getNextPacketPointer+1
  9159  004CC0  0012               	return	
  9160  004CC2                     __end_of_ethernetController_getNextPacketPointer:
  9161                           	opt stack 0
  9162                           tblptru	equ	0xFF8
  9163                           tblptrh	equ	0xFF7
  9164                           tblptrl	equ	0xFF6
  9165                           tablat	equ	0xFF5
  9166                           prodh	equ	0xFF4
  9167                           prodl	equ	0xFF3
  9168                           intcon	equ	0xFF2
  9169                           intcon3	equ	0xFF0
  9170                           indf0	equ	0xFEF
  9171                           postinc0	equ	0xFEE
  9172                           plusw0	equ	0xFEB
  9173                           fsr0h	equ	0xFEA
  9174                           fsr0l	equ	0xFE9
  9175                           wreg	equ	0xFE8
  9176                           postinc1	equ	0xFE6
  9177                           postdec1	equ	0xFE5
  9178                           plusw1	equ	0xFE3
  9179                           fsr1h	equ	0xFE2
  9180                           fsr1l	equ	0xFE1
  9181                           indf2	equ	0xFDF
  9182                           postinc2	equ	0xFDE
  9183                           postdec2	equ	0xFDD
  9184                           plusw2	equ	0xFDB
  9185                           fsr2h	equ	0xFDA
  9186                           fsr2l	equ	0xFD9
  9187                           status	equ	0xFD8
  9188                           
  9189 ;; *************** function _enc424j600_getNextPacketPointer *****************
  9190 ;; Defined at:
  9191 ;;		line 590 in file "src/enc424j600/ENC424J600.c"
  9192 ;; Parameters:    Size  Location     Type
  9193 ;;		None
  9194 ;; Auto vars:     Size  Location     Type
  9195 ;;		None
  9196 ;; Return value:  Size  Location     Type
  9197 ;;                  2    0[BANK0 ] unsigned int 
  9198 ;; Registers used:
  9199 ;;		None
  9200 ;; Tracked objects:
  9201 ;;		On entry : 0/0
  9202 ;;		On exit  : 0/0
  9203 ;;		Unchanged: 0/0
  9204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9205 ;;      Params:         0       2       0       0       0       0       0       0       0
  9206 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9207 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9208 ;;      Totals:         0       2       0       0       0       0       0       0       0
  9209 ;;Total ram usage:        2 bytes
  9210 ;; Hardware stack levels used:    1
  9211 ;; Hardware stack levels required when called:    4
  9212 ;; This function calls:
  9213 ;;		Nothing
  9214 ;; This function is called by:
  9215 ;;		_ethernetController_updateNextPacketPointer
  9216 ;;		_ethernetController_getNextPacketPointer
  9217 ;; This function uses a non-reentrant model
  9218 ;;
  9219                           
  9220                           	psect	text27
  9221  004CE8                     __ptext27:
  9222                           	opt stack 0
  9223  004CE8                     _enc424j600_getNextPacketPointer:
  9224                           	opt stack 21
  9225                           
  9226                           ;ENC424J600.c: 591: return nextPacketPointer;
  9227                           
  9228                           ;incstack = 0
  9229  004CE8  C042  F060         	movff	_nextPacketPointer,?_enc424j600_getNextPacketPointer
  9230  004CEC  C043  F061         	movff	_nextPacketPointer+1,?_enc424j600_getNextPacketPointer+1
  9231  004CF0  0012               	return		;funcret
  9232  004CF2                     __end_of_enc424j600_getNextPacketPointer:
  9233                           	opt stack 0
  9234                           tblptru	equ	0xFF8
  9235                           tblptrh	equ	0xFF7
  9236                           tblptrl	equ	0xFF6
  9237                           tablat	equ	0xFF5
  9238                           prodh	equ	0xFF4
  9239                           prodl	equ	0xFF3
  9240                           intcon	equ	0xFF2
  9241                           intcon3	equ	0xFF0
  9242                           indf0	equ	0xFEF
  9243                           postinc0	equ	0xFEE
  9244                           plusw0	equ	0xFEB
  9245                           fsr0h	equ	0xFEA
  9246                           fsr0l	equ	0xFE9
  9247                           wreg	equ	0xFE8
  9248                           postinc1	equ	0xFE6
  9249                           postdec1	equ	0xFE5
  9250                           plusw1	equ	0xFE3
  9251                           fsr1h	equ	0xFE2
  9252                           fsr1l	equ	0xFE1
  9253                           indf2	equ	0xFDF
  9254                           postinc2	equ	0xFDE
  9255                           postdec2	equ	0xFDD
  9256                           plusw2	equ	0xFDB
  9257                           fsr2h	equ	0xFDA
  9258                           fsr2l	equ	0xFD9
  9259                           status	equ	0xFD8
  9260                           
  9261 ;; *************** function _arp_setNewEntry *****************
  9262 ;; Defined at:
  9263 ;;		line 401 in file "src/stack/protocols/arp.c"
  9264 ;; Parameters:    Size  Location     Type
  9265 ;;  mac             6    4[BANK0 ] struct macaddress
  9266 ;;  ip              4   10[BANK0 ] struct ipv4_address
  9267 ;;  timestamp       4   14[BANK0 ] unsigned long 
  9268 ;; Auto vars:     Size  Location     Type
  9269 ;;  i               1   27[BANK0 ] unsigned char 
  9270 ;;  maxSeconds      4   22[BANK0 ] unsigned long 
  9271 ;;  oldestIndex     1   26[BANK0 ] unsigned char 
  9272 ;; Return value:  Size  Location     Type
  9273 ;;                  1    wreg      void 
  9274 ;; Registers used:
  9275 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9276 ;; Tracked objects:
  9277 ;;		On entry : 0/0
  9278 ;;		On exit  : 0/0
  9279 ;;		Unchanged: 0/0
  9280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9281 ;;      Params:         0      14       0       0       0       0       0       0       0
  9282 ;;      Locals:         0       6       0       0       0       0       0       0       0
  9283 ;;      Temps:          0       4       0       0       0       0       0       0       0
  9284 ;;      Totals:         0      24       0       0       0       0       0       0       0
  9285 ;;Total ram usage:       24 bytes
  9286 ;; Hardware stack levels used:    1
  9287 ;; Hardware stack levels required when called:    4
  9288 ;; This function calls:
  9289 ;;		Nothing
  9290 ;; This function is called by:
  9291 ;;		_arp_handleNewPacket
  9292 ;;		_arp_init
  9293 ;; This function uses a non-reentrant model
  9294 ;;
  9295                           
  9296                           	psect	text28
  9297  003358                     __ptext28:
  9298                           	opt stack 0
  9299  003358                     _arp_setNewEntry:
  9300                           	opt stack 24
  9301                           
  9302                           ;arp.c: 402: uint32_t maxSeconds = 0;
  9303                           
  9304                           ;incstack = 0
  9305  003358  0E00               	movlw	0
  9306  00335A  0100               	movlb	0	; () banked
  9307  00335C  6F76               	movwf	arp_setNewEntry@maxSeconds& (0+255),b
  9308  00335E  0E00               	movlw	0
  9309  003360  6F77               	movwf	(arp_setNewEntry@maxSeconds+1)& (0+255),b
  9310  003362  0E00               	movlw	0
  9311  003364  6F78               	movwf	(arp_setNewEntry@maxSeconds+2)& (0+255),b
  9312  003366  0E00               	movlw	0
  9313  003368  6F79               	movwf	(arp_setNewEntry@maxSeconds+3)& (0+255),b
  9314                           
  9315                           ;arp.c: 403: uint8_t oldestIndex = 0;
  9316  00336A  0E00               	movlw	0
  9317  00336C  6F7A               	movwf	arp_setNewEntry@oldestIndex& (0+255),b
  9318                           
  9319                           ;arp.c: 405: for (uint8_t i = 0; i < 8u; i++) {
  9320  00336E  0E00               	movlw	0
  9321  003370  6F7B               	movwf	arp_setNewEntry@i& (0+255),b
  9322  003372                     l8785:
  9323                           
  9324                           ; BSR set to: 0
  9325  003372  0E07               	movlw	7
  9326  003374  657B               	cpfsgt	arp_setNewEntry@i& (0+255),b
  9327  003376  D001               	goto	l1024
  9328  003378  D02E               	goto	u10400
  9329  00337A                     l1024:
  9330                           
  9331                           ; BSR set to: 0
  9332                           ;arp.c: 406: if (arp_table[i].timeCreated > maxSeconds) {
  9333                           
  9334                           ; BSR set to: 0
  9335  00337A  517B               	movf	arp_setNewEntry@i& (0+255),w,b
  9336  00337C  0D0E               	mullw	14
  9337  00337E  0E0A               	movlw	10
  9338  003380  26F3               	addwf	prodl,f,c
  9339  003382  0E00               	movlw	0
  9340  003384  22F4               	addwfc	prodh,f,c
  9341  003386  0E0F               	movlw	low _arp_table
  9342  003388  24F3               	addwf	prodl,w,c
  9343  00338A  6ED9               	movwf	fsr2l,c
  9344  00338C  0E02               	movlw	high _arp_table
  9345  00338E  20F4               	addwfc	prodh,w,c
  9346  003390  6EDA               	movwf	fsr2h,c
  9347  003392  50DE               	movf	postinc2,w,c
  9348  003394  5D76               	subwf	arp_setNewEntry@maxSeconds& (0+255),w,b
  9349  003396  50DE               	movf	postinc2,w,c
  9350  003398  5977               	subwfb	(arp_setNewEntry@maxSeconds+1)& (0+255),w,b
  9351  00339A  50DE               	movf	postinc2,w,c
  9352  00339C  5978               	subwfb	(arp_setNewEntry@maxSeconds+2)& (0+255),w,b
  9353  00339E  50DE               	movf	postinc2,w,c
  9354  0033A0  5979               	subwfb	(arp_setNewEntry@maxSeconds+3)& (0+255),w,b
  9355  0033A2  B0D8               	btfsc	status,0,c
  9356  0033A4  D016               	goto	l1026
  9357                           
  9358                           ; BSR set to: 0
  9359                           ;arp.c: 408: maxSeconds = arp_table[i].timeCreated;
  9360  0033A6  517B               	movf	arp_setNewEntry@i& (0+255),w,b
  9361  0033A8  0D0E               	mullw	14
  9362  0033AA  0E0A               	movlw	10
  9363  0033AC  26F3               	addwf	prodl,f,c
  9364  0033AE  0E00               	movlw	0
  9365  0033B0  22F4               	addwfc	prodh,f,c
  9366  0033B2  0E0F               	movlw	low _arp_table
  9367  0033B4  24F3               	addwf	prodl,w,c
  9368  0033B6  6ED9               	movwf	fsr2l,c
  9369  0033B8  0E02               	movlw	high _arp_table
  9370  0033BA  20F4               	addwfc	prodh,w,c
  9371  0033BC  6EDA               	movwf	fsr2h,c
  9372  0033BE  CFDE F076          	movff	postinc2,arp_setNewEntry@maxSeconds
  9373  0033C2  CFDE F077          	movff	postinc2,arp_setNewEntry@maxSeconds+1
  9374  0033C6  CFDE F078          	movff	postinc2,arp_setNewEntry@maxSeconds+2
  9375  0033CA  CFDE F079          	movff	postinc2,arp_setNewEntry@maxSeconds+3
  9376                           
  9377                           ; BSR set to: 0
  9378                           ;arp.c: 409: oldestIndex = i;
  9379  0033CE  C07B  F07A         	movff	arp_setNewEntry@i,arp_setNewEntry@oldestIndex
  9380  0033D2                     l1026:
  9381                           
  9382                           ; BSR set to: 0
  9383                           
  9384                           ; BSR set to: 0
  9385  0033D2  2B7B               	incf	arp_setNewEntry@i& (0+255),f,b
  9386  0033D4  D7CE               	goto	l8785
  9387  0033D6                     u10400:
  9388                           
  9389                           ; BSR set to: 0
  9390                           ;arp.c: 410: }
  9391                           ;arp.c: 411: }
  9392                           ;arp.c: 413: arp_table[oldestIndex].ip = ip;
  9393                           
  9394                           ; BSR set to: 0
  9395  0033D6  517A               	movf	arp_setNewEntry@oldestIndex& (0+255),w,b
  9396  0033D8  0D0E               	mullw	14
  9397  0033DA  0E0F               	movlw	low _arp_table
  9398  0033DC  24F3               	addwf	prodl,w,c
  9399  0033DE  6ED9               	movwf	fsr2l,c
  9400  0033E0  0E02               	movlw	high _arp_table
  9401  0033E2  20F4               	addwfc	prodh,w,c
  9402  0033E4  6EDA               	movwf	fsr2h,c
  9403  0033E6  C06A  FFDE         	movff	arp_setNewEntry@ip,postinc2
  9404  0033EA  C06B  FFDE         	movff	arp_setNewEntry@ip+1,postinc2
  9405  0033EE  C06C  FFDE         	movff	arp_setNewEntry@ip+2,postinc2
  9406  0033F2  C06D  FFDE         	movff	arp_setNewEntry@ip+3,postinc2
  9407                           
  9408                           ; BSR set to: 0
  9409                           ;arp.c: 414: arp_table[oldestIndex].mac = mac;
  9410  0033F6  EE20  F064         	lfsr	2,arp_setNewEntry@mac
  9411  0033FA  517A               	movf	arp_setNewEntry@oldestIndex& (0+255),w,b
  9412  0033FC  0D0E               	mullw	14
  9413  0033FE  0E04               	movlw	4
  9414  003400  26F3               	addwf	prodl,f,c
  9415  003402  0E00               	movlw	0
  9416  003404  22F4               	addwfc	prodh,f,c
  9417  003406  0E0F               	movlw	low _arp_table
  9418  003408  24F3               	addwf	prodl,w,c
  9419  00340A  6EE1               	movwf	fsr1l,c
  9420  00340C  0E02               	movlw	high _arp_table
  9421  00340E  20F4               	addwfc	prodh,w,c
  9422  003410  6EE2               	movwf	fsr1h,c
  9423  003412  0E05               	movlw	5
  9424  003414                     u10411:
  9425  003414  CFDB FFE3          	movff	plusw2,plusw1
  9426  003418  06E8               	decf	wreg,f,c
  9427  00341A  E2FC               	bc	u10411
  9428                           
  9429                           ; BSR set to: 0
  9430                           ;arp.c: 415: arp_table[oldestIndex].timeCreated = timestamp;
  9431  00341C  517A               	movf	arp_setNewEntry@oldestIndex& (0+255),w,b
  9432  00341E  0D0E               	mullw	14
  9433  003420  0E0A               	movlw	10
  9434  003422  26F3               	addwf	prodl,f,c
  9435  003424  0E00               	movlw	0
  9436  003426  22F4               	addwfc	prodh,f,c
  9437  003428  0E0F               	movlw	low _arp_table
  9438  00342A  24F3               	addwf	prodl,w,c
  9439  00342C  6ED9               	movwf	fsr2l,c
  9440  00342E  0E02               	movlw	high _arp_table
  9441  003430  20F4               	addwfc	prodh,w,c
  9442  003432  6EDA               	movwf	fsr2h,c
  9443  003434  C06E  FFDE         	movff	arp_setNewEntry@timestamp,postinc2
  9444  003438  C06F  FFDE         	movff	arp_setNewEntry@timestamp+1,postinc2
  9445  00343C  C070  FFDE         	movff	arp_setNewEntry@timestamp+2,postinc2
  9446  003440  C071  FFDE         	movff	arp_setNewEntry@timestamp+3,postinc2
  9447                           
  9448                           ; BSR set to: 0
  9449  003444  0012               	return		;funcret
  9450  003446                     __end_of_arp_setNewEntry:
  9451                           	opt stack 0
  9452                           tblptru	equ	0xFF8
  9453                           tblptrh	equ	0xFF7
  9454                           tblptrl	equ	0xFF6
  9455                           tablat	equ	0xFF5
  9456                           prodh	equ	0xFF4
  9457                           prodl	equ	0xFF3
  9458                           intcon	equ	0xFF2
  9459                           intcon3	equ	0xFF0
  9460                           indf0	equ	0xFEF
  9461                           postinc0	equ	0xFEE
  9462                           plusw0	equ	0xFEB
  9463                           fsr0h	equ	0xFEA
  9464                           fsr0l	equ	0xFE9
  9465                           wreg	equ	0xFE8
  9466                           postinc1	equ	0xFE6
  9467                           postdec1	equ	0xFE5
  9468                           plusw1	equ	0xFE3
  9469                           fsr1h	equ	0xFE2
  9470                           fsr1l	equ	0xFE1
  9471                           indf2	equ	0xFDF
  9472                           postinc2	equ	0xFDE
  9473                           postdec2	equ	0xFDD
  9474                           plusw2	equ	0xFDB
  9475                           fsr2h	equ	0xFDA
  9476                           fsr2l	equ	0xFD9
  9477                           status	equ	0xFD8
  9478                           
  9479 ;; *************** function _arp_sendReply *****************
  9480 ;; Defined at:
  9481 ;;		line 206 in file "src/stack/protocols/arp.c"
  9482 ;; Parameters:    Size  Location     Type
  9483 ;;  request        32    0[BANK1 ] struct arp_message
  9484 ;; Auto vars:     Size  Location     Type
  9485 ;;  reply          32   56[BANK1 ] struct arp_message
  9486 ;;  targetMAC       6   38[BANK1 ] struct macaddress
  9487 ;;  senderMAC       6   32[BANK1 ] struct macaddress
  9488 ;;  myIP            4   52[BANK1 ] struct ipv4_address
  9489 ;;  targetIP        4   48[BANK1 ] struct ipv4_address
  9490 ;;  senderIP        4   44[BANK1 ] struct ipv4_address
  9491 ;; Return value:  Size  Location     Type
  9492 ;;                  1    wreg      void 
  9493 ;; Registers used:
  9494 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9495 ;; Tracked objects:
  9496 ;;		On entry : 0/0
  9497 ;;		On exit  : 0/0
  9498 ;;		Unchanged: 0/0
  9499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9500 ;;      Params:         0       0      32       0       0       0       0       0       0
  9501 ;;      Locals:         0       0      56       0       0       0       0       0       0
  9502 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9503 ;;      Totals:         0       0      88       0       0       0       0       0       0
  9504 ;;Total ram usage:       88 bytes
  9505 ;; Hardware stack levels used:    1
  9506 ;; Hardware stack levels required when called:   10
  9507 ;; This function calls:
  9508 ;;		_UARTTransmitText
  9509 ;;		_arp_send
  9510 ;;		_ethernetController_getMacAddress
  9511 ;;		_ipAdressToString
  9512 ;;		_ipv4_cmp
  9513 ;;		_ipv4_getIPSourceAddress
  9514 ;;		_macToString
  9515 ;; This function is called by:
  9516 ;;		_arp_handleNewPacket
  9517 ;; This function uses a non-reentrant model
  9518 ;;
  9519                           
  9520                           	psect	text29
  9521  002730                     __ptext29:
  9522                           	opt stack 0
  9523  002730                     _arp_sendReply:
  9524                           	opt stack 17
  9525                           
  9526                           ;arp.c: 207: if (request.operation != ARP_REQUEST)
  9527                           
  9528                           ; BSR set to: 0
  9529                           ;incstack = 0
  9530  002730  0101               	movlb	1	; () banked
  9531  002732  0506               	decf	(arp_sendReply@request+6)& (0+255),w,b
  9532  002734  1107               	iorwf	(arp_sendReply@request+7)& (0+255),w,b
  9533  002736  A4D8               	btfss	status,2,c
  9534  002738  0012               	return	
  9535                           
  9536                           ; BSR set to: 1
  9537                           ;arp.c: 210: ipv4_address_t myIP = ipv4_getIPSourceAddress();
  9538                           
  9539                           ; BSR set to: 1
  9540                           
  9541                           ; BSR set to: 1
  9542                           ;arp.c: 208: return;
  9543  00273A  EC42  F026         	call	_ipv4_getIPSourceAddress	;wreg free
  9544  00273E  C060  F134         	movff	?_ipv4_getIPSourceAddress,arp_sendReply@myIP
  9545  002742  C061  F135         	movff	?_ipv4_getIPSourceAddress+1,arp_sendReply@myIP+1
  9546  002746  C062  F136         	movff	?_ipv4_getIPSourceAddress+2,arp_sendReply@myIP+2
  9547  00274A  C063  F137         	movff	?_ipv4_getIPSourceAddress+3,arp_sendReply@myIP+3
  9548                           
  9549                           ;arp.c: 211: if (!(ipv4_cmp(&request.targetIPAddress, &myIP)))
  9550  00274E  0E18               	movlw	low (arp_sendReply@request+24)
  9551  002750  0100               	movlb	0	; () banked
  9552  002752  6F60               	movwf	ipv4_cmp@a& (0+255),b
  9553  002754  0E01               	movlw	high (arp_sendReply@request+24)
  9554  002756  6F61               	movwf	(ipv4_cmp@a+1)& (0+255),b
  9555  002758  0E34               	movlw	low arp_sendReply@myIP
  9556  00275A  6F62               	movwf	ipv4_cmp@b& (0+255),b
  9557  00275C  0E01               	movlw	high arp_sendReply@myIP
  9558  00275E  6F63               	movwf	(ipv4_cmp@b+1)& (0+255),b
  9559  002760  EC95  F023         	call	_ipv4_cmp	;wreg free
  9560  002764  0100               	movlb	0	; () banked
  9561  002766  A0D8               	btfss	status,0,c
  9562  002768  0012               	return	
  9563                           
  9564                           ; BSR set to: 0
  9565                           ;arp.c: 214: arp_message_t reply;
  9566                           ;arp.c: 215: ipv4_address_t senderIP;
  9567                           ;arp.c: 216: ipv4_address_t targetIP;
  9568                           ;arp.c: 217: macaddress_t senderMAC;
  9569                           ;arp.c: 218: macaddress_t targetMAC;
  9570                           ;arp.c: 220: senderMAC = ethernetController_getMacAddress();
  9571                           
  9572                           ; BSR set to: 0
  9573                           
  9574                           ; BSR set to: 0
  9575                           ;arp.c: 212: return;
  9576  00276A  EC91  F01F         	call	_ethernetController_getMacAddress	;wreg free
  9577  00276E  EE21  F020         	lfsr	2,arp_sendReply@senderMAC
  9578  002772  0E05               	movlw	5
  9579  002774                     u10321:
  9580  002774  CFEB FFDB          	movff	plusw0,plusw2
  9581  002778  06E8               	decf	wreg,f,c
  9582  00277A  E2FC               	bc	u10321
  9583                           
  9584                           ;arp.c: 221: targetMAC = request.senderMACAddress;
  9585  00277C  EE21  F008         	lfsr	2,arp_sendReply@request+8
  9586  002780  EE11  F026         	lfsr	1,arp_sendReply@targetMAC
  9587  002784  0E05               	movlw	5
  9588  002786                     u10331:
  9589  002786  CFDB FFE3          	movff	plusw2,plusw1
  9590  00278A  06E8               	decf	wreg,f,c
  9591  00278C  E2FC               	bc	u10331
  9592                           
  9593                           ;arp.c: 222: senderIP = ipv4_getIPSourceAddress();
  9594  00278E  EC42  F026         	call	_ipv4_getIPSourceAddress	;wreg free
  9595  002792  C060  F12C         	movff	?_ipv4_getIPSourceAddress,arp_sendReply@senderIP
  9596  002796  C061  F12D         	movff	?_ipv4_getIPSourceAddress+1,arp_sendReply@senderIP+1
  9597  00279A  C062  F12E         	movff	?_ipv4_getIPSourceAddress+2,arp_sendReply@senderIP+2
  9598  00279E  C063  F12F         	movff	?_ipv4_getIPSourceAddress+3,arp_sendReply@senderIP+3
  9599                           
  9600                           ;arp.c: 223: targetIP = request.senderIPAddress;
  9601  0027A2  C10E  F130         	movff	arp_sendReply@request+14,arp_sendReply@targetIP
  9602  0027A6  C10F  F131         	movff	arp_sendReply@request+15,arp_sendReply@targetIP+1
  9603  0027AA  C110  F132         	movff	arp_sendReply@request+16,arp_sendReply@targetIP+2
  9604  0027AE  C111  F133         	movff	arp_sendReply@request+17,arp_sendReply@targetIP+3
  9605                           
  9606                           ;arp.c: 225: reply.hlen = 6u;
  9607  0027B2  0E06               	movlw	6
  9608  0027B4  0101               	movlb	1	; () banked
  9609  0027B6  6F3C               	movwf	(arp_sendReply@reply+4)& (0+255),b
  9610                           
  9611                           ; BSR set to: 1
  9612                           ;arp.c: 226: reply.plen = 4u;
  9613  0027B8  0E04               	movlw	4
  9614  0027BA  6F3D               	movwf	(arp_sendReply@reply+5)& (0+255),b
  9615                           
  9616                           ; BSR set to: 1
  9617                           ;arp.c: 227: reply.htype = ARP_HTYPE_ETHERNET;
  9618  0027BC  0E00               	movlw	0
  9619  0027BE  6F39               	movwf	(arp_sendReply@reply+1)& (0+255),b
  9620  0027C0  0E01               	movlw	1
  9621  0027C2  6F38               	movwf	arp_sendReply@reply& (0+255),b
  9622                           
  9623                           ; BSR set to: 1
  9624                           ;arp.c: 228: reply.ptype = ARP_PTYPE_IPv4;
  9625  0027C4  0E08               	movlw	8
  9626  0027C6  6F3B               	movwf	(arp_sendReply@reply+3)& (0+255),b
  9627  0027C8  0E00               	movlw	0
  9628  0027CA  6F3A               	movwf	(arp_sendReply@reply+2)& (0+255),b
  9629                           
  9630                           ; BSR set to: 1
  9631                           ;arp.c: 229: reply.operation = ARP_REPLY;
  9632  0027CC  0E00               	movlw	0
  9633  0027CE  6F3F               	movwf	(arp_sendReply@reply+7)& (0+255),b
  9634  0027D0  0E02               	movlw	2
  9635  0027D2  6F3E               	movwf	(arp_sendReply@reply+6)& (0+255),b
  9636                           
  9637                           ; BSR set to: 1
  9638                           ;arp.c: 230: reply.senderIPAddress = senderIP;
  9639  0027D4  C12C  F146         	movff	arp_sendReply@senderIP,arp_sendReply@reply+14
  9640  0027D8  C12D  F147         	movff	arp_sendReply@senderIP+1,arp_sendReply@reply+15
  9641  0027DC  C12E  F148         	movff	arp_sendReply@senderIP+2,arp_sendReply@reply+16
  9642  0027E0  C12F  F149         	movff	arp_sendReply@senderIP+3,arp_sendReply@reply+17
  9643                           
  9644                           ; BSR set to: 1
  9645                           ;arp.c: 231: reply.senderMACAddress = senderMAC;
  9646  0027E4  EE21  F020         	lfsr	2,arp_sendReply@senderMAC
  9647  0027E8  EE11  F040         	lfsr	1,arp_sendReply@reply+8
  9648  0027EC  0E05               	movlw	5
  9649  0027EE                     u10341:
  9650  0027EE  CFDB FFE3          	movff	plusw2,plusw1
  9651  0027F2  06E8               	decf	wreg,f,c
  9652  0027F4  E2FC               	bc	u10341
  9653                           
  9654                           ; BSR set to: 1
  9655                           ;arp.c: 232: reply.targetIPAddress = targetIP;
  9656  0027F6  C130  F150         	movff	arp_sendReply@targetIP,arp_sendReply@reply+24
  9657  0027FA  C131  F151         	movff	arp_sendReply@targetIP+1,arp_sendReply@reply+25
  9658  0027FE  C132  F152         	movff	arp_sendReply@targetIP+2,arp_sendReply@reply+26
  9659  002802  C133  F153         	movff	arp_sendReply@targetIP+3,arp_sendReply@reply+27
  9660                           
  9661                           ; BSR set to: 1
  9662                           ;arp.c: 233: reply.targetMACAddress = targetMAC;
  9663  002806  EE21  F026         	lfsr	2,arp_sendReply@targetMAC
  9664  00280A  EE11  F04A         	lfsr	1,arp_sendReply@reply+18
  9665  00280E  0E05               	movlw	5
  9666  002810                     u10351:
  9667  002810  CFDB FFE3          	movff	plusw2,plusw1
  9668  002814  06E8               	decf	wreg,f,c
  9669  002816  E2FC               	bc	u10351
  9670                           
  9671                           ; BSR set to: 1
  9672                           ;arp.c: 235: arp_send(reply);
  9673  002818  EE21  F038         	lfsr	2,arp_sendReply@reply
  9674  00281C  EE00  F0A7         	lfsr	0,arp_send@arp
  9675  002820  0E1F               	movlw	31
  9676  002822                     u10361:
  9677  002822  CFDB FFEB          	movff	plusw2,plusw0
  9678  002826  06E8               	decf	wreg,f,c
  9679  002828  E2FC               	bc	u10361
  9680  00282A  ECEF  F00B         	call	_arp_send	;wreg free
  9681                           
  9682                           ;arp.c: 237: UARTTransmitText("[Reply sent to ");
  9683  00282E  0EFD               	movlw	low STR_67
  9684  002830  0100               	movlb	0	; () banked
  9685  002832  6F98               	movwf	UARTTransmitText@str& (0+255),b
  9686  002834  0E7E               	movlw	high STR_67
  9687  002836  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9688  002838  ECC8  F021         	call	_UARTTransmitText	;wreg free
  9689                           
  9690                           ;arp.c: 238: UARTTransmitText(macToString(reply.targetMACAddress));
  9691  00283C  EE21  F04A         	lfsr	2,arp_sendReply@reply+18
  9692  002840  EE00  F07A         	lfsr	0,macToString@addr
  9693  002844  0E05               	movlw	5
  9694  002846                     u10371:
  9695  002846  CFDB FFEB          	movff	plusw2,plusw0
  9696  00284A  06E8               	decf	wreg,f,c
  9697  00284C  E2FC               	bc	u10371
  9698  00284E  EC36  F017         	call	_macToString	;wreg free
  9699  002852  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  9700  002856  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  9701  00285A  ECC8  F021         	call	_UARTTransmitText	;wreg free
  9702                           
  9703                           ;arp.c: 239: UARTTransmitText(", ");
  9704  00285E  0E66               	movlw	low (STR_37+17)
  9705  002860  0100               	movlb	0	; () banked
  9706  002862  6F98               	movwf	UARTTransmitText@str& (0+255),b
  9707  002864  0E7E               	movlw	high (STR_37+17)
  9708  002866  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9709  002868  ECC8  F021         	call	_UARTTransmitText	;wreg free
  9710                           
  9711                           ;arp.c: 240: UARTTransmitText(ipAdressToString(reply.targetIPAddress));
  9712  00286C  C150  F073         	movff	arp_sendReply@reply+24,ipAdressToString@ip
  9713  002870  C151  F074         	movff	arp_sendReply@reply+25,ipAdressToString@ip+1
  9714  002874  C152  F075         	movff	arp_sendReply@reply+26,ipAdressToString@ip+2
  9715  002878  C153  F076         	movff	arp_sendReply@reply+27,ipAdressToString@ip+3
  9716  00287C  EC6F  F00F         	call	_ipAdressToString	;wreg free
  9717  002880  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  9718  002884  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  9719  002888  ECC8  F021         	call	_UARTTransmitText	;wreg free
  9720                           
  9721                           ;arp.c: 241: UARTTransmitText("]");
  9722  00288C  0EFB               	movlw	low (STR_19+1)
  9723  00288E  0100               	movlb	0	; () banked
  9724  002890  6F98               	movwf	UARTTransmitText@str& (0+255),b
  9725  002892  0E7F               	movlw	high (STR_19+1)
  9726  002894  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9727  002896  ECC8  F021         	call	_UARTTransmitText	;wreg free
  9728  00289A  0012               	return		;funcret
  9729  00289C                     __end_of_arp_sendReply:
  9730                           	opt stack 0
  9731                           tblptru	equ	0xFF8
  9732                           tblptrh	equ	0xFF7
  9733                           tblptrl	equ	0xFF6
  9734                           tablat	equ	0xFF5
  9735                           prodh	equ	0xFF4
  9736                           prodl	equ	0xFF3
  9737                           intcon	equ	0xFF2
  9738                           intcon3	equ	0xFF0
  9739                           indf0	equ	0xFEF
  9740                           postinc0	equ	0xFEE
  9741                           plusw0	equ	0xFEB
  9742                           fsr0h	equ	0xFEA
  9743                           fsr0l	equ	0xFE9
  9744                           wreg	equ	0xFE8
  9745                           postinc1	equ	0xFE6
  9746                           postdec1	equ	0xFE5
  9747                           plusw1	equ	0xFE3
  9748                           fsr1h	equ	0xFE2
  9749                           fsr1l	equ	0xFE1
  9750                           indf2	equ	0xFDF
  9751                           postinc2	equ	0xFDE
  9752                           postdec2	equ	0xFDD
  9753                           plusw2	equ	0xFDB
  9754                           fsr2h	equ	0xFDA
  9755                           fsr2l	equ	0xFD9
  9756                           status	equ	0xFD8
  9757                           
  9758 ;; *************** function _macToString *****************
  9759 ;; Defined at:
  9760 ;;		line 107 in file "src/system/uart.c"
  9761 ;; Parameters:    Size  Location     Type
  9762 ;;  addr            6   26[BANK0 ] struct macaddress
  9763 ;; Auto vars:     Size  Location     Type
  9764 ;;  i               2   53[BANK0 ] int 
  9765 ;;  address        18   33[BANK0 ] unsigned char [18]
  9766 ;;  j               1   55[BANK0 ] unsigned char 
  9767 ;;  secondDigit     1   52[BANK0 ] unsigned char 
  9768 ;;  firstDigit      1   51[BANK0 ] unsigned char 
  9769 ;; Return value:  Size  Location     Type
  9770 ;;                  2   26[BANK0 ] PTR unsigned char 
  9771 ;; Registers used:
  9772 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9773 ;; Tracked objects:
  9774 ;;		On entry : 0/0
  9775 ;;		On exit  : 0/0
  9776 ;;		Unchanged: 0/0
  9777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9778 ;;      Params:         0       6       0       0       0       0       0       0       0
  9779 ;;      Locals:         0      23       0       0       0       0       0       0       0
  9780 ;;      Temps:          0       1       0       0       0       0       0       0       0
  9781 ;;      Totals:         0      30       0       0       0       0       0       0       0
  9782 ;;Total ram usage:       30 bytes
  9783 ;; Hardware stack levels used:    1
  9784 ;; Hardware stack levels required when called:    4
  9785 ;; This function calls:
  9786 ;;		Nothing
  9787 ;; This function is called by:
  9788 ;;		_ethernet_rxGetNewFrame
  9789 ;;		_main
  9790 ;;		_arp_handleNewPacket
  9791 ;;		_arp_sendReply
  9792 ;;		_arpEntryToString
  9793 ;; This function uses a non-reentrant model
  9794 ;;
  9795                           
  9796                           	psect	text30
  9797  002E6C                     __ptext30:
  9798                           	opt stack 0
  9799  002E6C                     _macToString:
  9800                           	opt stack 26
  9801                           
  9802                           ;uart.c: 108: char address[] = "??:??:??:??:??:??";
  9803                           
  9804                           ;incstack = 0
  9805  002E6C  EE22  F0C5         	lfsr	2,macToString@F5943
  9806  002E70  EE10  F081         	lfsr	1,macToString@address
  9807  002E74  0E11               	movlw	17
  9808  002E76                     u9191:
  9809  002E76  CFDB FFE3          	movff	plusw2,plusw1
  9810  002E7A  06E8               	decf	wreg,f,c
  9811  002E7C  E2FC               	bc	u9191
  9812                           
  9813                           ;uart.c: 109: uint8_t j = 0;
  9814  002E7E  0E00               	movlw	0
  9815  002E80  0100               	movlb	0	; () banked
  9816  002E82  6F97               	movwf	macToString@j& (0+255),b
  9817                           
  9818                           ; BSR set to: 0
  9819                           ;uart.c: 110: uint8_t firstDigit;
  9820                           ;uart.c: 111: uint8_t secondDigit;
  9821                           ;uart.c: 113: for (int i = 0; i < 6; i++) {
  9822  002E84  0E00               	movlw	0
  9823  002E86  6F96               	movwf	(macToString@i+1)& (0+255),b
  9824  002E88  0E00               	movlw	0
  9825  002E8A  6F95               	movwf	macToString@i& (0+255),b
  9826                           
  9827                           ; BSR set to: 0
  9828  002E8C  BF96               	btfsc	(macToString@i+1)& (0+255),7,b
  9829  002E8E  D006               	goto	l791
  9830  002E90  5196               	movf	(macToString@i+1)& (0+255),w,b
  9831  002E92  E16B               	bnz	l792
  9832  002E94  0E06               	movlw	6
  9833  002E96  5D95               	subwf	macToString@i& (0+255),w,b
  9834  002E98  B0D8               	btfsc	status,0,c
  9835  002E9A  D067               	goto	u9240
  9836  002E9C                     l791:
  9837                           
  9838                           ; BSR set to: 0
  9839                           ;uart.c: 114: firstDigit = ((addr.address[i] & 0xF0) >> 4)&0x0F;
  9840                           
  9841                           ; BSR set to: 0
  9842  002E9C  0E7A               	movlw	low macToString@addr
  9843  002E9E  2595               	addwf	macToString@i& (0+255),w,b
  9844  002EA0  6ED9               	movwf	fsr2l,c
  9845  002EA2  0E00               	movlw	high macToString@addr
  9846  002EA4  2196               	addwfc	(macToString@i+1)& (0+255),w,b
  9847  002EA6  6EDA               	movwf	fsr2h,c
  9848  002EA8  50DF               	movf	indf2,w,c
  9849  002EAA  6F80               	movwf	??_macToString& (0+255),b
  9850  002EAC  3980               	swapf	??_macToString& (0+255),w,b
  9851  002EAE  0B0F               	andlw	15
  9852  002EB0  0B0F               	andlw	15
  9853  002EB2  6F93               	movwf	macToString@firstDigit& (0+255),b
  9854                           
  9855                           ;uart.c: 115: secondDigit = addr.address[i] & 0x0F;
  9856  002EB4  0E7A               	movlw	low macToString@addr
  9857  002EB6  2595               	addwf	macToString@i& (0+255),w,b
  9858  002EB8  6ED9               	movwf	fsr2l,c
  9859  002EBA  0E00               	movlw	high macToString@addr
  9860  002EBC  2196               	addwfc	(macToString@i+1)& (0+255),w,b
  9861  002EBE  6EDA               	movwf	fsr2h,c
  9862  002EC0  50DF               	movf	indf2,w,c
  9863  002EC2  0B0F               	andlw	15
  9864  002EC4  6F94               	movwf	macToString@secondDigit& (0+255),b
  9865                           
  9866                           ; BSR set to: 0
  9867                           ;uart.c: 117: firstDigit += 0x30;
  9868  002EC6  0E30               	movlw	48
  9869  002EC8  2793               	addwf	macToString@firstDigit& (0+255),f,b
  9870                           
  9871                           ; BSR set to: 0
  9872                           ;uart.c: 118: secondDigit += 0x30;
  9873  002ECA  0E30               	movlw	48
  9874  002ECC  2794               	addwf	macToString@secondDigit& (0+255),f,b
  9875                           
  9876                           ; BSR set to: 0
  9877                           ;uart.c: 120: if (firstDigit > '9') {
  9878  002ECE  0E39               	movlw	57
  9879  002ED0  6593               	cpfsgt	macToString@firstDigit& (0+255),b
  9880  002ED2  D00C               	goto	l793
  9881                           
  9882                           ; BSR set to: 0
  9883                           ;uart.c: 121: address[j++] = firstDigit + 7;
  9884  002ED4  5197               	movf	macToString@j& (0+255),w,b
  9885  002ED6  0D01               	mullw	1
  9886  002ED8  0E81               	movlw	low macToString@address
  9887  002EDA  24F3               	addwf	prodl,w,c
  9888  002EDC  6ED9               	movwf	fsr2l,c
  9889  002EDE  0E00               	movlw	high macToString@address
  9890  002EE0  20F4               	addwfc	prodh,w,c
  9891  002EE2  6EDA               	movwf	fsr2h,c
  9892  002EE4  5193               	movf	macToString@firstDigit& (0+255),w,b
  9893  002EE6  0F07               	addlw	7
  9894  002EE8  6EDF               	movwf	indf2,c
  9895  002EEA  D00A               	goto	l8297
  9896  002EEC                     l793:
  9897                           
  9898                           ; BSR set to: 0
  9899                           ;uart.c: 123: address[j++] = firstDigit;
  9900                           
  9901                           ; BSR set to: 0
  9902  002EEC  5197               	movf	macToString@j& (0+255),w,b
  9903  002EEE  0D01               	mullw	1
  9904  002EF0  0E81               	movlw	low macToString@address
  9905  002EF2  24F3               	addwf	prodl,w,c
  9906  002EF4  6ED9               	movwf	fsr2l,c
  9907  002EF6  0E00               	movlw	high macToString@address
  9908  002EF8  20F4               	addwfc	prodh,w,c
  9909  002EFA  6EDA               	movwf	fsr2h,c
  9910  002EFC  C093  FFDF         	movff	macToString@firstDigit,indf2
  9911  002F00                     l8297:
  9912                           
  9913                           ; BSR set to: 0
  9914  002F00  2B97               	incf	macToString@j& (0+255),f,b
  9915                           
  9916                           ; BSR set to: 0
  9917                           ;uart.c: 124: }
  9918                           ;uart.c: 125: if (secondDigit > '9') {
  9919                           
  9920                           ; BSR set to: 0
  9921  002F02  0E39               	movlw	57
  9922  002F04  6594               	cpfsgt	macToString@secondDigit& (0+255),b
  9923  002F06  D00C               	goto	l795
  9924                           
  9925                           ; BSR set to: 0
  9926                           ;uart.c: 126: address[j++] = secondDigit + 7;
  9927  002F08  5197               	movf	macToString@j& (0+255),w,b
  9928  002F0A  0D01               	mullw	1
  9929  002F0C  0E81               	movlw	low macToString@address
  9930  002F0E  24F3               	addwf	prodl,w,c
  9931  002F10  6ED9               	movwf	fsr2l,c
  9932  002F12  0E00               	movlw	high macToString@address
  9933  002F14  20F4               	addwfc	prodh,w,c
  9934  002F16  6EDA               	movwf	fsr2h,c
  9935  002F18  5194               	movf	macToString@secondDigit& (0+255),w,b
  9936  002F1A  0F07               	addlw	7
  9937  002F1C  6EDF               	movwf	indf2,c
  9938  002F1E  D00A               	goto	l8307
  9939  002F20                     l795:
  9940                           
  9941                           ; BSR set to: 0
  9942                           ;uart.c: 128: address[j++] = secondDigit;
  9943                           
  9944                           ; BSR set to: 0
  9945  002F20  5197               	movf	macToString@j& (0+255),w,b
  9946  002F22  0D01               	mullw	1
  9947  002F24  0E81               	movlw	low macToString@address
  9948  002F26  24F3               	addwf	prodl,w,c
  9949  002F28  6ED9               	movwf	fsr2l,c
  9950  002F2A  0E00               	movlw	high macToString@address
  9951  002F2C  20F4               	addwfc	prodh,w,c
  9952  002F2E  6EDA               	movwf	fsr2h,c
  9953  002F30  C094  FFDF         	movff	macToString@secondDigit,indf2
  9954  002F34                     l8307:
  9955                           
  9956                           ; BSR set to: 0
  9957  002F34  2B97               	incf	macToString@j& (0+255),f,b
  9958                           
  9959                           ; BSR set to: 0
  9960                           ;uart.c: 129: }
  9961                           ;uart.c: 131: if (i < 5) {
  9962                           
  9963                           ; BSR set to: 0
  9964  002F36  BF96               	btfsc	(macToString@i+1)& (0+255),7,b
  9965  002F38  D006               	goto	u9230
  9966  002F3A  5196               	movf	(macToString@i+1)& (0+255),w,b
  9967  002F3C  E10F               	bnz	l8315
  9968  002F3E  0E05               	movlw	5
  9969  002F40  5D95               	subwf	macToString@i& (0+255),w,b
  9970  002F42  B0D8               	btfsc	status,0,c
  9971  002F44  D00B               	goto	l797
  9972  002F46                     u9230:
  9973                           
  9974                           ; BSR set to: 0
  9975                           ;uart.c: 132: address[j++] = ':';
  9976  002F46  5197               	movf	macToString@j& (0+255),w,b
  9977  002F48  0D01               	mullw	1
  9978  002F4A  0E81               	movlw	low macToString@address
  9979  002F4C  24F3               	addwf	prodl,w,c
  9980  002F4E  6ED9               	movwf	fsr2l,c
  9981  002F50  0E00               	movlw	high macToString@address
  9982  002F52  20F4               	addwfc	prodh,w,c
  9983  002F54  6EDA               	movwf	fsr2h,c
  9984  002F56  0E3A               	movlw	58
  9985  002F58  6EDF               	movwf	indf2,c
  9986                           
  9987                           ; BSR set to: 0
  9988  002F5A  2B97               	incf	macToString@j& (0+255),f,b
  9989  002F5C                     l797:
  9990  002F5C                     l8315:
  9991                           
  9992                           ; BSR set to: 0
  9993  002F5C  4B95               	infsnz	macToString@i& (0+255),f,b
  9994  002F5E  2B96               	incf	(macToString@i+1)& (0+255),f,b
  9995                           
  9996                           ; BSR set to: 0
  9997  002F60  BF96               	btfsc	(macToString@i+1)& (0+255),7,b
  9998  002F62  D79C               	goto	l791
  9999  002F64  5196               	movf	(macToString@i+1)& (0+255),w,b
 10000  002F66  E101               	bnz	l8319
 10001  002F68  D795               	goto	L1
 10002  002F6A                     u9240:
 10003  002F6A                     l792:
 10004  002F6A                     l8319:
 10005                           
 10006                           ; BSR set to: 0
 10007                           ;uart.c: 133: }
 10008                           ;uart.c: 134: }
 10009                           ;uart.c: 135: return address;
 10010  002F6A  0E81               	movlw	low macToString@address
 10011  002F6C  6F7A               	movwf	?_macToString& (0+255),b
 10012  002F6E  0E00               	movlw	high macToString@address
 10013  002F70  6F7B               	movwf	(?_macToString+1)& (0+255),b
 10014  002F72  0012               	return	
 10015  002F74                     __end_of_macToString:
 10016                           	opt stack 0
 10017                           tblptru	equ	0xFF8
 10018                           tblptrh	equ	0xFF7
 10019                           tblptrl	equ	0xFF6
 10020                           tablat	equ	0xFF5
 10021                           prodh	equ	0xFF4
 10022                           prodl	equ	0xFF3
 10023                           intcon	equ	0xFF2
 10024                           intcon3	equ	0xFF0
 10025                           indf0	equ	0xFEF
 10026                           postinc0	equ	0xFEE
 10027                           plusw0	equ	0xFEB
 10028                           fsr0h	equ	0xFEA
 10029                           fsr0l	equ	0xFE9
 10030                           wreg	equ	0xFE8
 10031                           postinc1	equ	0xFE6
 10032                           postdec1	equ	0xFE5
 10033                           plusw1	equ	0xFE3
 10034                           fsr1h	equ	0xFE2
 10035                           fsr1l	equ	0xFE1
 10036                           indf2	equ	0xFDF
 10037                           postinc2	equ	0xFDE
 10038                           postdec2	equ	0xFDD
 10039                           plusw2	equ	0xFDB
 10040                           fsr2h	equ	0xFDA
 10041                           fsr2l	equ	0xFD9
 10042                           status	equ	0xFD8
 10043                           
 10044 ;; *************** function _ipAdressToString *****************
 10045 ;; Defined at:
 10046 ;;		line 162 in file "src/system/uart.c"
 10047 ;; Parameters:    Size  Location     Type
 10048 ;;  ip              4   19[BANK0 ] struct ipv4_address
 10049 ;; Auto vars:     Size  Location     Type
 10050 ;;  i               1   40[BANK0 ] unsigned char 
 10051 ;;  hundreds        4   35[BANK0 ] unsigned char [4]
 10052 ;;  tens            4   31[BANK0 ] unsigned char [4]
 10053 ;;  ones            4   27[BANK0 ] unsigned char [4]
 10054 ;;  pointer         1   39[BANK0 ] unsigned char 
 10055 ;; Return value:  Size  Location     Type
 10056 ;;                  2   19[BANK0 ] PTR unsigned char 
 10057 ;; Registers used:
 10058 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10059 ;; Tracked objects:
 10060 ;;		On entry : 0/0
 10061 ;;		On exit  : 0/0
 10062 ;;		Unchanged: 0/0
 10063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10064 ;;      Params:         0       4       0       0       0       0       0       0       0
 10065 ;;      Locals:         0      14       0       0       0       0       0       0       0
 10066 ;;      Temps:          0       4       0       0       0       0       0       0       0
 10067 ;;      Totals:         0      22       0       0       0       0       0       0       0
 10068 ;;Total ram usage:       22 bytes
 10069 ;; Hardware stack levels used:    1
 10070 ;; Hardware stack levels required when called:    5
 10071 ;; This function calls:
 10072 ;;		___lwdiv
 10073 ;;		___lwmod
 10074 ;; This function is called by:
 10075 ;;		_arp_handleNewPacket
 10076 ;;		_arp_sendReply
 10077 ;;		_ipv4_handleNewPacket
 10078 ;;		_ipv4_setIPSourceAddress
 10079 ;;		_ipv4_background
 10080 ;;		_arpEntryToString
 10081 ;; This function uses a non-reentrant model
 10082 ;;
 10083                           
 10084                           	psect	text31
 10085  001EDE                     __ptext31:
 10086                           	opt stack 0
 10087  001EDE                     _ipAdressToString:
 10088                           	opt stack 24
 10089                           
 10090                           ;uart.c: 163: char static address [] = "???.???.???.???";
 10091                           ;uart.c: 164: uint8_t hundreds[4];
 10092                           ;uart.c: 165: uint8_t tens[4];
 10093                           ;uart.c: 166: uint8_t ones[4];
 10094                           ;uart.c: 167: uint8_t pointer = 0;
 10095                           
 10096                           ; BSR set to: 0
 10097                           ;incstack = 0
 10098  001EDE  0E00               	movlw	0
 10099  001EE0  0100               	movlb	0	; () banked
 10100  001EE2  6F87               	movwf	ipAdressToString@pointer& (0+255),b
 10101                           
 10102                           ;uart.c: 169: for (uint8_t i = 0; i < 4; i++) {
 10103  001EE4  0E00               	movlw	0
 10104  001EE6  6F88               	movwf	ipAdressToString@i& (0+255),b
 10105  001EE8                     l8415:
 10106                           
 10107                           ; BSR set to: 0
 10108  001EE8  0E03               	movlw	3
 10109  001EEA  6588               	cpfsgt	ipAdressToString@i& (0+255),b
 10110  001EEC  D001               	goto	l820
 10111  001EEE  D0DF               	goto	u9420
 10112  001EF0                     l820:
 10113                           
 10114                           ; BSR set to: 0
 10115                           ;uart.c: 171: hundreds[i] = ip.address[i] / 100u;
 10116                           
 10117                           ; BSR set to: 0
 10118  001EF0  5188               	movf	ipAdressToString@i& (0+255),w,b
 10119  001EF2  0D01               	mullw	1
 10120  001EF4  0E83               	movlw	low ipAdressToString@hundreds
 10121  001EF6  24F3               	addwf	prodl,w,c
 10122  001EF8  6ED9               	movwf	fsr2l,c
 10123  001EFA  0E00               	movlw	high ipAdressToString@hundreds
 10124  001EFC  20F4               	addwfc	prodh,w,c
 10125  001EFE  6EDA               	movwf	fsr2h,c
 10126  001F00  5188               	movf	ipAdressToString@i& (0+255),w,b
 10127  001F02  0D01               	mullw	1
 10128  001F04  0E73               	movlw	low ipAdressToString@ip
 10129  001F06  24F3               	addwf	prodl,w,c
 10130  001F08  6EE1               	movwf	fsr1l,c
 10131  001F0A  0E00               	movlw	high ipAdressToString@ip
 10132  001F0C  20F4               	addwfc	prodh,w,c
 10133  001F0E  6EE2               	movwf	fsr1h,c
 10134  001F10  50E7               	movf	indf1,w,c
 10135  001F12  6F77               	movwf	??_ipAdressToString& (0+255),b
 10136  001F14  5177               	movf	??_ipAdressToString& (0+255),w,b
 10137  001F16  6F60               	movwf	___lwdiv@dividend& (0+255),b
 10138  001F18  6B61               	clrf	(___lwdiv@dividend+1)& (0+255),b
 10139  001F1A  0E00               	movlw	0
 10140  001F1C  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
 10141  001F1E  0E64               	movlw	100
 10142  001F20  6F62               	movwf	___lwdiv@divisor& (0+255),b
 10143  001F22  ECF3  F021         	call	___lwdiv	;wreg free
 10144  001F26  0100               	movlb	0	; () banked
 10145  001F28  5160               	movf	?___lwdiv& (0+255),w,b
 10146  001F2A  6EDF               	movwf	indf2,c
 10147                           
 10148                           ;uart.c: 172: tens[i] = (ip.address[i] - hundreds[i]*100u) / 10u;
 10149  001F2C  5188               	movf	ipAdressToString@i& (0+255),w,b
 10150  001F2E  0D01               	mullw	1
 10151  001F30  0E7F               	movlw	low ipAdressToString@tens
 10152  001F32  24F3               	addwf	prodl,w,c
 10153  001F34  6ED9               	movwf	fsr2l,c
 10154  001F36  0E00               	movlw	high ipAdressToString@tens
 10155  001F38  20F4               	addwfc	prodh,w,c
 10156  001F3A  6EDA               	movwf	fsr2h,c
 10157  001F3C  5188               	movf	ipAdressToString@i& (0+255),w,b
 10158  001F3E  0D01               	mullw	1
 10159  001F40  0E83               	movlw	low ipAdressToString@hundreds
 10160  001F42  24F3               	addwf	prodl,w,c
 10161  001F44  6EE1               	movwf	fsr1l,c
 10162  001F46  0E00               	movlw	high ipAdressToString@hundreds
 10163  001F48  20F4               	addwfc	prodh,w,c
 10164  001F4A  6EE2               	movwf	fsr1h,c
 10165  001F4C  50E7               	movf	indf1,w,c
 10166  001F4E  6F77               	movwf	??_ipAdressToString& (0+255),b
 10167  001F50  5177               	movf	??_ipAdressToString& (0+255),w,b
 10168  001F52  0D64               	mullw	100
 10169  001F54  CFF3 F078          	movff	prodl,??_ipAdressToString+1
 10170  001F58  CFF4 F079          	movff	prodh,??_ipAdressToString+2
 10171  001F5C  1F78               	comf	(??_ipAdressToString+1)& (0+255),f,b
 10172  001F5E  1F79               	comf	(??_ipAdressToString+2)& (0+255),f,b
 10173  001F60  4B78               	infsnz	(??_ipAdressToString+1)& (0+255),f,b
 10174  001F62  2B79               	incf	(??_ipAdressToString+2)& (0+255),f,b
 10175  001F64  5188               	movf	ipAdressToString@i& (0+255),w,b
 10176  001F66  0D01               	mullw	1
 10177  001F68  0E73               	movlw	low ipAdressToString@ip
 10178  001F6A  24F3               	addwf	prodl,w,c
 10179  001F6C  6EE1               	movwf	fsr1l,c
 10180  001F6E  0E00               	movlw	high ipAdressToString@ip
 10181  001F70  20F4               	addwfc	prodh,w,c
 10182  001F72  6EE2               	movwf	fsr1h,c
 10183  001F74  50E7               	movf	indf1,w,c
 10184  001F76  6F7A               	movwf	(??_ipAdressToString+3)& (0+255),b
 10185  001F78  517A               	movf	(??_ipAdressToString+3)& (0+255),w,b
 10186  001F7A  2578               	addwf	(??_ipAdressToString+1)& (0+255),w,b
 10187  001F7C  6F60               	movwf	___lwdiv@dividend& (0+255),b
 10188  001F7E  0E00               	movlw	0
 10189  001F80  2179               	addwfc	(??_ipAdressToString+2)& (0+255),w,b
 10190  001F82  6F61               	movwf	(___lwdiv@dividend+1)& (0+255),b
 10191  001F84  0E00               	movlw	0
 10192  001F86  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
 10193  001F88  0E0A               	movlw	10
 10194  001F8A  6F62               	movwf	___lwdiv@divisor& (0+255),b
 10195  001F8C  ECF3  F021         	call	___lwdiv	;wreg free
 10196  001F90  0100               	movlb	0	; () banked
 10197  001F92  5160               	movf	?___lwdiv& (0+255),w,b
 10198  001F94  6EDF               	movwf	indf2,c
 10199                           
 10200                           ;uart.c: 173: ones[i] = ip.address[i] % 10u;
 10201  001F96  5188               	movf	ipAdressToString@i& (0+255),w,b
 10202  001F98  0D01               	mullw	1
 10203  001F9A  0E7B               	movlw	low ipAdressToString@ones
 10204  001F9C  24F3               	addwf	prodl,w,c
 10205  001F9E  6ED9               	movwf	fsr2l,c
 10206  001FA0  0E00               	movlw	high ipAdressToString@ones
 10207  001FA2  20F4               	addwfc	prodh,w,c
 10208  001FA4  6EDA               	movwf	fsr2h,c
 10209  001FA6  5188               	movf	ipAdressToString@i& (0+255),w,b
 10210  001FA8  0D01               	mullw	1
 10211  001FAA  0E73               	movlw	low ipAdressToString@ip
 10212  001FAC  24F3               	addwf	prodl,w,c
 10213  001FAE  6EE1               	movwf	fsr1l,c
 10214  001FB0  0E00               	movlw	high ipAdressToString@ip
 10215  001FB2  20F4               	addwfc	prodh,w,c
 10216  001FB4  6EE2               	movwf	fsr1h,c
 10217  001FB6  50E7               	movf	indf1,w,c
 10218  001FB8  6F77               	movwf	??_ipAdressToString& (0+255),b
 10219  001FBA  5177               	movf	??_ipAdressToString& (0+255),w,b
 10220  001FBC  6F6E               	movwf	___lwmod@dividend& (0+255),b
 10221  001FBE  6B6F               	clrf	(___lwmod@dividend+1)& (0+255),b
 10222  001FC0  0E00               	movlw	0
 10223  001FC2  6F71               	movwf	(___lwmod@divisor+1)& (0+255),b
 10224  001FC4  0E0A               	movlw	10
 10225  001FC6  6F70               	movwf	___lwmod@divisor& (0+255),b
 10226  001FC8  EC52  F023         	call	___lwmod	;wreg free
 10227  001FCC  0100               	movlb	0	; () banked
 10228  001FCE  516E               	movf	?___lwmod& (0+255),w,b
 10229  001FD0  6EDF               	movwf	indf2,c
 10230                           
 10231                           ; BSR set to: 0
 10232                           ;uart.c: 175: if (hundreds[i] > 0)
 10233  001FD2  5188               	movf	ipAdressToString@i& (0+255),w,b
 10234  001FD4  0D01               	mullw	1
 10235  001FD6  0E83               	movlw	low ipAdressToString@hundreds
 10236  001FD8  24F3               	addwf	prodl,w,c
 10237  001FDA  6ED9               	movwf	fsr2l,c
 10238  001FDC  0E00               	movlw	high ipAdressToString@hundreds
 10239  001FDE  20F4               	addwfc	prodh,w,c
 10240  001FE0  6EDA               	movwf	fsr2h,c
 10241  001FE2  50DF               	movf	indf2,w,c
 10242  001FE4  B4D8               	btfsc	status,2,c
 10243  001FE6  D014               	goto	l822
 10244                           
 10245                           ; BSR set to: 0
 10246                           ;uart.c: 176: address[pointer++] = hundreds[i] + 0x30;
 10247  001FE8  5187               	movf	ipAdressToString@pointer& (0+255),w,b
 10248  001FEA  0D01               	mullw	1
 10249  001FEC  0EE3               	movlw	low ipAdressToString@address
 10250  001FEE  24F3               	addwf	prodl,w,c
 10251  001FF0  6ED9               	movwf	fsr2l,c
 10252  001FF2  0E02               	movlw	high ipAdressToString@address
 10253  001FF4  20F4               	addwfc	prodh,w,c
 10254  001FF6  6EDA               	movwf	fsr2h,c
 10255  001FF8  5188               	movf	ipAdressToString@i& (0+255),w,b
 10256  001FFA  0D01               	mullw	1
 10257  001FFC  0E83               	movlw	low ipAdressToString@hundreds
 10258  001FFE  24F3               	addwf	prodl,w,c
 10259  002000  6EE1               	movwf	fsr1l,c
 10260  002002  0E00               	movlw	high ipAdressToString@hundreds
 10261  002004  20F4               	addwfc	prodh,w,c
 10262  002006  6EE2               	movwf	fsr1h,c
 10263  002008  50E7               	movf	indf1,w,c
 10264  00200A  0F30               	addlw	48
 10265  00200C  6EDF               	movwf	indf2,c
 10266                           
 10267                           ; BSR set to: 0
 10268  00200E  2B87               	incf	ipAdressToString@pointer& (0+255),f,b
 10269  002010                     l822:
 10270                           
 10271                           ; BSR set to: 0
 10272                           ;uart.c: 177: if ((tens[i] > 0) || hundreds[i] > 0)
 10273                           
 10274                           ; BSR set to: 0
 10275  002010  5188               	movf	ipAdressToString@i& (0+255),w,b
 10276  002012  0D01               	mullw	1
 10277  002014  0E7F               	movlw	low ipAdressToString@tens
 10278  002016  24F3               	addwf	prodl,w,c
 10279  002018  6ED9               	movwf	fsr2l,c
 10280  00201A  0E00               	movlw	high ipAdressToString@tens
 10281  00201C  20F4               	addwfc	prodh,w,c
 10282  00201E  6EDA               	movwf	fsr2h,c
 10283  002020  50DF               	movf	indf2,w,c
 10284  002022  A4D8               	btfss	status,2,c
 10285  002024  D00B               	goto	u9400
 10286                           
 10287                           ; BSR set to: 0
 10288  002026  5188               	movf	ipAdressToString@i& (0+255),w,b
 10289  002028  0D01               	mullw	1
 10290  00202A  0E83               	movlw	low ipAdressToString@hundreds
 10291  00202C  24F3               	addwf	prodl,w,c
 10292  00202E  6ED9               	movwf	fsr2l,c
 10293  002030  0E00               	movlw	high ipAdressToString@hundreds
 10294  002032  20F4               	addwfc	prodh,w,c
 10295  002034  6EDA               	movwf	fsr2h,c
 10296  002036  50DF               	movf	indf2,w,c
 10297  002038  B4D8               	btfsc	status,2,c
 10298  00203A  D014               	goto	l823
 10299  00203C                     u9400:
 10300                           
 10301                           ; BSR set to: 0
 10302                           ;uart.c: 178: address[pointer++] = tens[i] + 0x30;
 10303                           
 10304                           ; BSR set to: 0
 10305  00203C  5187               	movf	ipAdressToString@pointer& (0+255),w,b
 10306  00203E  0D01               	mullw	1
 10307  002040  0EE3               	movlw	low ipAdressToString@address
 10308  002042  24F3               	addwf	prodl,w,c
 10309  002044  6ED9               	movwf	fsr2l,c
 10310  002046  0E02               	movlw	high ipAdressToString@address
 10311  002048  20F4               	addwfc	prodh,w,c
 10312  00204A  6EDA               	movwf	fsr2h,c
 10313  00204C  5188               	movf	ipAdressToString@i& (0+255),w,b
 10314  00204E  0D01               	mullw	1
 10315  002050  0E7F               	movlw	low ipAdressToString@tens
 10316  002052  24F3               	addwf	prodl,w,c
 10317  002054  6EE1               	movwf	fsr1l,c
 10318  002056  0E00               	movlw	high ipAdressToString@tens
 10319  002058  20F4               	addwfc	prodh,w,c
 10320  00205A  6EE2               	movwf	fsr1h,c
 10321  00205C  50E7               	movf	indf1,w,c
 10322  00205E  0F30               	addlw	48
 10323  002060  6EDF               	movwf	indf2,c
 10324                           
 10325                           ; BSR set to: 0
 10326  002062  2B87               	incf	ipAdressToString@pointer& (0+255),f,b
 10327  002064                     l823:
 10328                           
 10329                           ; BSR set to: 0
 10330                           ;uart.c: 179: address[pointer++] = ones[i] + 0x30;
 10331                           
 10332                           ; BSR set to: 0
 10333  002064  5187               	movf	ipAdressToString@pointer& (0+255),w,b
 10334  002066  0D01               	mullw	1
 10335  002068  0EE3               	movlw	low ipAdressToString@address
 10336  00206A  24F3               	addwf	prodl,w,c
 10337  00206C  6ED9               	movwf	fsr2l,c
 10338  00206E  0E02               	movlw	high ipAdressToString@address
 10339  002070  20F4               	addwfc	prodh,w,c
 10340  002072  6EDA               	movwf	fsr2h,c
 10341  002074  5188               	movf	ipAdressToString@i& (0+255),w,b
 10342  002076  0D01               	mullw	1
 10343  002078  0E7B               	movlw	low ipAdressToString@ones
 10344  00207A  24F3               	addwf	prodl,w,c
 10345  00207C  6EE1               	movwf	fsr1l,c
 10346  00207E  0E00               	movlw	high ipAdressToString@ones
 10347  002080  20F4               	addwfc	prodh,w,c
 10348  002082  6EE2               	movwf	fsr1h,c
 10349  002084  50E7               	movf	indf1,w,c
 10350  002086  0F30               	addlw	48
 10351  002088  6EDF               	movwf	indf2,c
 10352  00208A  2B87               	incf	ipAdressToString@pointer& (0+255),f,b
 10353                           
 10354                           ; BSR set to: 0
 10355                           ;uart.c: 180: if (i != 3)
 10356  00208C  0E03               	movlw	3
 10357  00208E  1988               	xorwf	ipAdressToString@i& (0+255),w,b
 10358  002090  B4D8               	btfsc	status,2,c
 10359  002092  D00B               	goto	l826
 10360                           
 10361                           ; BSR set to: 0
 10362                           ;uart.c: 181: address[pointer++] = '.';
 10363  002094  5187               	movf	ipAdressToString@pointer& (0+255),w,b
 10364  002096  0D01               	mullw	1
 10365  002098  0EE3               	movlw	low ipAdressToString@address
 10366  00209A  24F3               	addwf	prodl,w,c
 10367  00209C  6ED9               	movwf	fsr2l,c
 10368  00209E  0E02               	movlw	high ipAdressToString@address
 10369  0020A0  20F4               	addwfc	prodh,w,c
 10370  0020A2  6EDA               	movwf	fsr2h,c
 10371  0020A4  0E2E               	movlw	46
 10372  0020A6  6EDF               	movwf	indf2,c
 10373                           
 10374                           ; BSR set to: 0
 10375  0020A8  2B87               	incf	ipAdressToString@pointer& (0+255),f,b
 10376  0020AA                     l826:
 10377                           
 10378                           ; BSR set to: 0
 10379                           
 10380                           ; BSR set to: 0
 10381  0020AA  2B88               	incf	ipAdressToString@i& (0+255),f,b
 10382  0020AC  D71D               	goto	l8415
 10383  0020AE                     u9420:
 10384                           
 10385                           ; BSR set to: 0
 10386                           ;uart.c: 182: }
 10387                           ;uart.c: 183: address[pointer] = '\0';
 10388                           
 10389                           ; BSR set to: 0
 10390  0020AE  5187               	movf	ipAdressToString@pointer& (0+255),w,b
 10391  0020B0  0D01               	mullw	1
 10392  0020B2  0EE3               	movlw	low ipAdressToString@address
 10393  0020B4  24F3               	addwf	prodl,w,c
 10394  0020B6  6ED9               	movwf	fsr2l,c
 10395  0020B8  0E02               	movlw	high ipAdressToString@address
 10396  0020BA  20F4               	addwfc	prodh,w,c
 10397  0020BC  6EDA               	movwf	fsr2h,c
 10398  0020BE  0E00               	movlw	0
 10399  0020C0  6EDF               	movwf	indf2,c
 10400                           
 10401                           ; BSR set to: 0
 10402                           ;uart.c: 184: return address;
 10403  0020C2  0EE3               	movlw	low ipAdressToString@address
 10404  0020C4  6F73               	movwf	?_ipAdressToString& (0+255),b
 10405  0020C6  0E02               	movlw	high ipAdressToString@address
 10406  0020C8  6F74               	movwf	(?_ipAdressToString+1)& (0+255),b
 10407  0020CA  0012               	return	
 10408  0020CC                     __end_of_ipAdressToString:
 10409                           	opt stack 0
 10410                           tblptru	equ	0xFF8
 10411                           tblptrh	equ	0xFF7
 10412                           tblptrl	equ	0xFF6
 10413                           tablat	equ	0xFF5
 10414                           prodh	equ	0xFF4
 10415                           prodl	equ	0xFF3
 10416                           intcon	equ	0xFF2
 10417                           intcon3	equ	0xFF0
 10418                           indf0	equ	0xFEF
 10419                           postinc0	equ	0xFEE
 10420                           plusw0	equ	0xFEB
 10421                           fsr0h	equ	0xFEA
 10422                           fsr0l	equ	0xFE9
 10423                           wreg	equ	0xFE8
 10424                           indf1	equ	0xFE7
 10425                           postinc1	equ	0xFE6
 10426                           postdec1	equ	0xFE5
 10427                           plusw1	equ	0xFE3
 10428                           fsr1h	equ	0xFE2
 10429                           fsr1l	equ	0xFE1
 10430                           indf2	equ	0xFDF
 10431                           postinc2	equ	0xFDE
 10432                           postdec2	equ	0xFDD
 10433                           plusw2	equ	0xFDB
 10434                           fsr2h	equ	0xFDA
 10435                           fsr2l	equ	0xFD9
 10436                           status	equ	0xFD8
 10437                           
 10438 ;; *************** function ___lwdiv *****************
 10439 ;; Defined at:
 10440 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 10441 ;; Parameters:    Size  Location     Type
 10442 ;;  dividend        2    0[BANK0 ] unsigned int 
 10443 ;;  divisor         2    2[BANK0 ] unsigned int 
 10444 ;; Auto vars:     Size  Location     Type
 10445 ;;  quotient        2    5[BANK0 ] unsigned int 
 10446 ;;  counter         1    4[BANK0 ] unsigned char 
 10447 ;; Return value:  Size  Location     Type
 10448 ;;                  2    0[BANK0 ] unsigned int 
 10449 ;; Registers used:
 10450 ;;		wreg, status,2, status,0
 10451 ;; Tracked objects:
 10452 ;;		On entry : 0/0
 10453 ;;		On exit  : 0/0
 10454 ;;		Unchanged: 0/0
 10455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10456 ;;      Params:         0       4       0       0       0       0       0       0       0
 10457 ;;      Locals:         0       3       0       0       0       0       0       0       0
 10458 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10459 ;;      Totals:         0       7       0       0       0       0       0       0       0
 10460 ;;Total ram usage:        7 bytes
 10461 ;; Hardware stack levels used:    1
 10462 ;; Hardware stack levels required when called:    4
 10463 ;; This function calls:
 10464 ;;		Nothing
 10465 ;; This function is called by:
 10466 ;;		_ipAdressToString
 10467 ;; This function uses a non-reentrant model
 10468 ;;
 10469                           
 10470                           	psect	text32
 10471  0043E6                     __ptext32:
 10472                           	opt stack 0
 10473  0043E6                     ___lwdiv:
 10474                           	opt stack 24
 10475                           
 10476                           ; BSR set to: 0
 10477                           ;incstack = 0
 10478  0043E6  0E00               	movlw	0
 10479  0043E8  0100               	movlb	0	; () banked
 10480  0043EA  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
 10481  0043EC  0E00               	movlw	0
 10482  0043EE  6F65               	movwf	___lwdiv@quotient& (0+255),b
 10483                           
 10484                           ; BSR set to: 0
 10485  0043F0  5162               	movf	___lwdiv@divisor& (0+255),w,b
 10486  0043F2  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 10487  0043F4  B4D8               	btfsc	status,2,c
 10488  0043F6  D01C               	goto	l1574
 10489                           
 10490                           ; BSR set to: 0
 10491  0043F8  0E01               	movlw	1
 10492  0043FA  6F64               	movwf	___lwdiv@counter& (0+255),b
 10493  0043FC  D004               	goto	l1569
 10494  0043FE                     
 10495                           ; BSR set to: 0
 10496                           
 10497                           ; BSR set to: 0
 10498  0043FE  90D8               	bcf	status,0,c
 10499  004400  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 10500  004402  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 10501  004404  2B64               	incf	___lwdiv@counter& (0+255),f,b
 10502  004406                     l1569:
 10503                           
 10504                           ; BSR set to: 0
 10505                           
 10506                           ; BSR set to: 0
 10507  004406  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 10508  004408  D7FA               	goto	l1570
 10509  00440A                     u9090:
 10510                           
 10511                           ; BSR set to: 0
 10512                           
 10513                           ; BSR set to: 0
 10514                           
 10515                           ; BSR set to: 0
 10516  00440A  90D8               	bcf	status,0,c
 10517  00440C  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 10518  00440E  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 10519                           
 10520                           ; BSR set to: 0
 10521  004410  5162               	movf	___lwdiv@divisor& (0+255),w,b
 10522  004412  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 10523  004414  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 10524  004416  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 10525  004418  A0D8               	btfss	status,0,c
 10526  00441A  D005               	goto	l1573
 10527                           
 10528                           ; BSR set to: 0
 10529  00441C  5162               	movf	___lwdiv@divisor& (0+255),w,b
 10530  00441E  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 10531  004420  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 10532  004422  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 10533                           
 10534                           ; BSR set to: 0
 10535  004424  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 10536  004426                     l1573:
 10537                           
 10538                           ; BSR set to: 0
 10539                           
 10540                           ; BSR set to: 0
 10541  004426  90D8               	bcf	status,0,c
 10542  004428  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 10543  00442A  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 10544                           
 10545                           ; BSR set to: 0
 10546  00442C  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 10547  00442E  D7ED               	goto	u9090
 10548  004430                     l1574:
 10549                           
 10550                           ; BSR set to: 0
 10551                           
 10552                           ; BSR set to: 0
 10553  004430  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 10554  004434  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 10555                           
 10556                           ; BSR set to: 0
 10557  004438  0012               	return		;funcret
 10558  00443A                     __end_of___lwdiv:
 10559                           	opt stack 0
 10560                           tblptru	equ	0xFF8
 10561                           tblptrh	equ	0xFF7
 10562                           tblptrl	equ	0xFF6
 10563                           tablat	equ	0xFF5
 10564                           prodh	equ	0xFF4
 10565                           prodl	equ	0xFF3
 10566                           intcon	equ	0xFF2
 10567                           intcon3	equ	0xFF0
 10568                           indf0	equ	0xFEF
 10569                           postinc0	equ	0xFEE
 10570                           plusw0	equ	0xFEB
 10571                           fsr0h	equ	0xFEA
 10572                           fsr0l	equ	0xFE9
 10573                           wreg	equ	0xFE8
 10574                           indf1	equ	0xFE7
 10575                           postinc1	equ	0xFE6
 10576                           postdec1	equ	0xFE5
 10577                           plusw1	equ	0xFE3
 10578                           fsr1h	equ	0xFE2
 10579                           fsr1l	equ	0xFE1
 10580                           indf2	equ	0xFDF
 10581                           postinc2	equ	0xFDE
 10582                           postdec2	equ	0xFDD
 10583                           plusw2	equ	0xFDB
 10584                           fsr2h	equ	0xFDA
 10585                           fsr2l	equ	0xFD9
 10586                           status	equ	0xFD8
 10587                           
 10588 ;; *************** function _arp_parseFromRXBuffer *****************
 10589 ;; Defined at:
 10590 ;;		line 64 in file "src/stack/protocols/arp.c"
 10591 ;; Parameters:    Size  Location     Type
 10592 ;;  frame           2   20[BANK0 ] PTR struct ethernetFrame
 10593 ;;		 -> stack.ethernet(15), stack(121), 
 10594 ;; Auto vars:     Size  Location     Type
 10595 ;;  i               1   58[BANK0 ] unsigned char 
 10596 ;;  i               1   57[BANK0 ] unsigned char 
 10597 ;;  i               1   56[BANK0 ] unsigned char 
 10598 ;;  i               1   55[BANK0 ] unsigned char 
 10599 ;;  arp            32   61[BANK0 ] struct arp_message
 10600 ;;  offset          2   59[BANK0 ] const unsigned int 
 10601 ;; Return value:  Size  Location     Type
 10602 ;;                  32   20[BANK0 ] struct arp_message
 10603 ;; Registers used:
 10604 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10605 ;; Tracked objects:
 10606 ;;		On entry : 0/0
 10607 ;;		On exit  : 0/0
 10608 ;;		Unchanged: 0/0
 10609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10610 ;;      Params:         0      32       0       0       0       0       0       0       0
 10611 ;;      Locals:         0      38       0       0       0       0       0       0       0
 10612 ;;      Temps:          0       3       0       0       0       0       0       0       0
 10613 ;;      Totals:         0      73       0       0       0       0       0       0       0
 10614 ;;Total ram usage:       73 bytes
 10615 ;; Hardware stack levels used:    1
 10616 ;; Hardware stack levels required when called:    8
 10617 ;; This function calls:
 10618 ;;		_ethernetController_streamFromRXBuffer
 10619 ;;		_ipv4_cmp
 10620 ;;		_ipv4_isAllZero
 10621 ;;		_mac_cmp
 10622 ;;		_mac_isAllZero
 10623 ;; This function is called by:
 10624 ;;		_arp_handleNewPacket
 10625 ;; This function uses a non-reentrant model
 10626 ;;
 10627                           
 10628                           	psect	text33
 10629  000AEE                     __ptext33:
 10630                           	opt stack 0
 10631  000AEE                     _arp_parseFromRXBuffer:
 10632                           	opt stack 19
 10633                           
 10634                           ;arp.c: 65: arp_message_t arp;
 10635                           ;arp.c: 66: uint16_t const offset = 22;
 10636                           
 10637                           ; BSR set to: 0
 10638                           ;incstack = 0
 10639  000AEE  0E00               	movlw	0
 10640  000AF0  0100               	movlb	0	; () banked
 10641  000AF2  6F9C               	movwf	(arp_parseFromRXBuffer@offset+1)& (0+255),b
 10642  000AF4  0E16               	movlw	22
 10643  000AF6  6F9B               	movwf	arp_parseFromRXBuffer@offset& (0+255),b
 10644                           
 10645                           ; BSR set to: 0
 10646                           ;arp.c: 68: ethernetController_streamFromRXBuffer(0, frame->memory.start + offset);
 10647  000AF8  EE20 F010          	lfsr	2,16
 10648  000AFC  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 10649  000AFE  26D9               	addwf	fsr2l,f,c
 10650  000B00  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 10651  000B02  22DA               	addwfc	fsr2h,f,c
 10652  000B04  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 10653  000B08  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 10654  000B0C  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 10655  000B0E  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 10656  000B10  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 10657  000B12  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 10658  000B14  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 10659  000B16  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 10660  000B18  0E00               	movlw	0
 10661  000B1A  EC42  F021         	call	_ethernetController_streamFromRXBuffer
 10662                           
 10663                           ;arp.c: 71: arp.htype = (ethernetController_streamFromRXBuffer(1, frame->memory.start + 
      +                          offset) << 8);
 10664  000B1E  0100               	movlb	0	; () banked
 10665  000B20  EE20 F010          	lfsr	2,16
 10666  000B24  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 10667  000B26  26D9               	addwf	fsr2l,f,c
 10668  000B28  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 10669  000B2A  22DA               	addwfc	fsr2h,f,c
 10670  000B2C  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 10671  000B30  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 10672  000B34  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 10673  000B36  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 10674  000B38  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 10675  000B3A  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 10676  000B3C  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 10677  000B3E  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 10678  000B40  0E01               	movlw	1
 10679  000B42  EC42  F021         	call	_ethernetController_streamFromRXBuffer
 10680  000B46  0100               	movlb	0	; () banked
 10681  000B48  6F9E               	movwf	(arp_parseFromRXBuffer@arp+1)& (0+255),b
 10682  000B4A  6B9D               	clrf	arp_parseFromRXBuffer@arp& (0+255),b
 10683                           
 10684                           ; BSR set to: 0
 10685                           ;arp.c: 72: arp.htype |= ethernetController_streamFromRXBuffer(1, frame->memory.start + 
      +                          offset);
 10686  000B4C  EE20 F010          	lfsr	2,16
 10687  000B50  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 10688  000B52  26D9               	addwf	fsr2l,f,c
 10689  000B54  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 10690  000B56  22DA               	addwfc	fsr2h,f,c
 10691  000B58  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 10692  000B5C  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 10693  000B60  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 10694  000B62  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 10695  000B64  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 10696  000B66  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 10697  000B68  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 10698  000B6A  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 10699  000B6C  0E01               	movlw	1
 10700  000B6E  EC42  F021         	call	_ethernetController_streamFromRXBuffer
 10701  000B72  0100               	movlb	0	; () banked
 10702  000B74  6F96               	movwf	(??_arp_parseFromRXBuffer+2)& (0+255),b
 10703  000B76  5196               	movf	(??_arp_parseFromRXBuffer+2)& (0+255),w,b
 10704  000B78  139D               	iorwf	arp_parseFromRXBuffer@arp& (0+255),f,b
 10705                           
 10706                           ; BSR set to: 0
 10707                           ;arp.c: 74: arp.ptype = (ethernetController_streamFromRXBuffer(1, frame->memory.start + 
      +                          offset) << 8);
 10708  000B7A  EE20 F010          	lfsr	2,16
 10709  000B7E  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 10710  000B80  26D9               	addwf	fsr2l,f,c
 10711  000B82  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 10712  000B84  22DA               	addwfc	fsr2h,f,c
 10713  000B86  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 10714  000B8A  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 10715  000B8E  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 10716  000B90  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 10717  000B92  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 10718  000B94  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 10719  000B96  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 10720  000B98  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 10721  000B9A  0E01               	movlw	1
 10722  000B9C  EC42  F021         	call	_ethernetController_streamFromRXBuffer
 10723  000BA0  0100               	movlb	0	; () banked
 10724  000BA2  6FA0               	movwf	(arp_parseFromRXBuffer@arp+3)& (0+255),b
 10725  000BA4  6B9F               	clrf	(arp_parseFromRXBuffer@arp+2)& (0+255),b
 10726                           
 10727                           ; BSR set to: 0
 10728                           ;arp.c: 75: arp.ptype |= ethernetController_streamFromRXBuffer(1, frame->memory.start + 
      +                          offset);
 10729  000BA6  EE20 F010          	lfsr	2,16
 10730  000BAA  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 10731  000BAC  26D9               	addwf	fsr2l,f,c
 10732  000BAE  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 10733  000BB0  22DA               	addwfc	fsr2h,f,c
 10734  000BB2  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 10735  000BB6  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 10736  000BBA  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 10737  000BBC  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 10738  000BBE  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 10739  000BC0  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 10740  000BC2  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 10741  000BC4  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 10742  000BC6  0E01               	movlw	1
 10743  000BC8  EC42  F021         	call	_ethernetController_streamFromRXBuffer
 10744  000BCC  0100               	movlb	0	; () banked
 10745  000BCE  6F96               	movwf	(??_arp_parseFromRXBuffer+2)& (0+255),b
 10746  000BD0  5196               	movf	(??_arp_parseFromRXBuffer+2)& (0+255),w,b
 10747  000BD2  139F               	iorwf	(arp_parseFromRXBuffer@arp+2)& (0+255),f,b
 10748                           
 10749                           ; BSR set to: 0
 10750                           ;arp.c: 77: arp.hlen = ethernetController_streamFromRXBuffer(1, frame->memory.start + of
      +                          fset);
 10751  000BD4  EE20 F010          	lfsr	2,16
 10752  000BD8  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 10753  000BDA  26D9               	addwf	fsr2l,f,c
 10754  000BDC  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 10755  000BDE  22DA               	addwfc	fsr2h,f,c
 10756  000BE0  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 10757  000BE4  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 10758  000BE8  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 10759  000BEA  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 10760  000BEC  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 10761  000BEE  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 10762  000BF0  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 10763  000BF2  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 10764  000BF4  0E01               	movlw	1
 10765  000BF6  EC42  F021         	call	_ethernetController_streamFromRXBuffer
 10766  000BFA  0100               	movlb	0	; () banked
 10767  000BFC  6FA1               	movwf	(arp_parseFromRXBuffer@arp+4)& (0+255),b
 10768                           
 10769                           ; BSR set to: 0
 10770                           ;arp.c: 78: arp.plen = ethernetController_streamFromRXBuffer(1, frame->memory.start + of
      +                          fset);
 10771  000BFE  EE20 F010          	lfsr	2,16
 10772  000C02  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 10773  000C04  26D9               	addwf	fsr2l,f,c
 10774  000C06  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 10775  000C08  22DA               	addwfc	fsr2h,f,c
 10776  000C0A  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 10777  000C0E  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 10778  000C12  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 10779  000C14  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 10780  000C16  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 10781  000C18  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 10782  000C1A  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 10783  000C1C  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 10784  000C1E  0E01               	movlw	1
 10785  000C20  EC42  F021         	call	_ethernetController_streamFromRXBuffer
 10786  000C24  0100               	movlb	0	; () banked
 10787  000C26  6FA2               	movwf	(arp_parseFromRXBuffer@arp+5)& (0+255),b
 10788                           
 10789                           ; BSR set to: 0
 10790                           ;arp.c: 80: arp.operation = (ethernetController_streamFromRXBuffer(1, frame->memory.star
      +                          t + offset) << 8);
 10791  000C28  EE20 F010          	lfsr	2,16
 10792  000C2C  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 10793  000C2E  26D9               	addwf	fsr2l,f,c
 10794  000C30  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 10795  000C32  22DA               	addwfc	fsr2h,f,c
 10796  000C34  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 10797  000C38  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 10798  000C3C  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 10799  000C3E  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 10800  000C40  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 10801  000C42  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 10802  000C44  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 10803  000C46  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 10804  000C48  0E01               	movlw	1
 10805  000C4A  EC42  F021         	call	_ethernetController_streamFromRXBuffer
 10806  000C4E  0100               	movlb	0	; () banked
 10807  000C50  6FA4               	movwf	(arp_parseFromRXBuffer@arp+7)& (0+255),b
 10808  000C52  6BA3               	clrf	(arp_parseFromRXBuffer@arp+6)& (0+255),b
 10809                           
 10810                           ; BSR set to: 0
 10811                           ;arp.c: 81: arp.operation |= ethernetController_streamFromRXBuffer(1, frame->memory.star
      +                          t + offset);
 10812  000C54  EE20 F010          	lfsr	2,16
 10813  000C58  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 10814  000C5A  26D9               	addwf	fsr2l,f,c
 10815  000C5C  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 10816  000C5E  22DA               	addwfc	fsr2h,f,c
 10817  000C60  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 10818  000C64  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 10819  000C68  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 10820  000C6A  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 10821  000C6C  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 10822  000C6E  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 10823  000C70  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 10824  000C72  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 10825  000C74  0E01               	movlw	1
 10826  000C76  EC42  F021         	call	_ethernetController_streamFromRXBuffer
 10827  000C7A  0100               	movlb	0	; () banked
 10828  000C7C  6F96               	movwf	(??_arp_parseFromRXBuffer+2)& (0+255),b
 10829  000C7E  5196               	movf	(??_arp_parseFromRXBuffer+2)& (0+255),w,b
 10830  000C80  13A3               	iorwf	(arp_parseFromRXBuffer@arp+6)& (0+255),f,b
 10831                           
 10832                           ; BSR set to: 0
 10833                           ;arp.c: 84: for (uint8_t i = 0; i < arp.hlen; i++)
 10834  000C82  0E00               	movlw	0
 10835  000C84  6F97               	movwf	arp_parseFromRXBuffer@i& (0+255),b
 10836  000C86  D024               	goto	l909
 10837  000C88                     
 10838                           ; BSR set to: 0
 10839                           ;arp.c: 85: arp.senderMACAddress.address[i] = ethernetController_streamFromRXBuffer(1, f
      +                          rame->memory.start + offset);
 10840                           
 10841                           ; BSR set to: 0
 10842  000C88  EE20 F010          	lfsr	2,16
 10843  000C8C  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 10844  000C8E  26D9               	addwf	fsr2l,f,c
 10845  000C90  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 10846  000C92  22DA               	addwfc	fsr2h,f,c
 10847  000C94  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 10848  000C98  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 10849  000C9C  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 10850  000C9E  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 10851  000CA0  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 10852  000CA2  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 10853  000CA4  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 10854  000CA6  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 10855  000CA8  0E01               	movlw	1
 10856  000CAA  EC42  F021         	call	_ethernetController_streamFromRXBuffer
 10857  000CAE  0100               	movlb	0	; () banked
 10858  000CB0  6F96               	movwf	(??_arp_parseFromRXBuffer+2)& (0+255),b
 10859  000CB2  5197               	movf	arp_parseFromRXBuffer@i& (0+255),w,b
 10860  000CB4  0D01               	mullw	1
 10861  000CB6  0E08               	movlw	8
 10862  000CB8  26F3               	addwf	prodl,f,c
 10863  000CBA  0E00               	movlw	0
 10864  000CBC  22F4               	addwfc	prodh,f,c
 10865  000CBE  0E9D               	movlw	low arp_parseFromRXBuffer@arp
 10866  000CC0  24F3               	addwf	prodl,w,c
 10867  000CC2  6ED9               	movwf	fsr2l,c
 10868  000CC4  0E00               	movlw	high arp_parseFromRXBuffer@arp
 10869  000CC6  20F4               	addwfc	prodh,w,c
 10870  000CC8  6EDA               	movwf	fsr2h,c
 10871  000CCA  C096  FFDF         	movff	??_arp_parseFromRXBuffer+2,indf2
 10872                           
 10873                           ; BSR set to: 0
 10874  000CCE  2B97               	incf	arp_parseFromRXBuffer@i& (0+255),f,b
 10875  000CD0                     l909:
 10876                           
 10877                           ; BSR set to: 0
 10878                           
 10879                           ; BSR set to: 0
 10880  000CD0  51A1               	movf	(arp_parseFromRXBuffer@arp+4)& (0+255),w,b
 10881  000CD2  5D97               	subwf	arp_parseFromRXBuffer@i& (0+255),w,b
 10882  000CD4  A0D8               	btfss	status,0,c
 10883  000CD6  D7D8               	goto	l910
 10884                           
 10885                           ; BSR set to: 0
 10886                           ;arp.c: 86: for (uint8_t i = 0; i < arp.plen; i++)
 10887                           
 10888                           ; BSR set to: 0
 10889  000CD8  0E00               	movlw	0
 10890  000CDA  6F98               	movwf	arp_parseFromRXBuffer@i_2994& (0+255),b
 10891  000CDC  D024               	goto	l912
 10892  000CDE                     
 10893                           ; BSR set to: 0
 10894                           ;arp.c: 87: arp.senderIPAddress.address[i] = ethernetController_streamFromRXBuffer(1, fr
      +                          ame->memory.start + offset);
 10895                           
 10896                           ; BSR set to: 0
 10897  000CDE  EE20 F010          	lfsr	2,16
 10898  000CE2  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 10899  000CE4  26D9               	addwf	fsr2l,f,c
 10900  000CE6  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 10901  000CE8  22DA               	addwfc	fsr2h,f,c
 10902  000CEA  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 10903  000CEE  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 10904  000CF2  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 10905  000CF4  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 10906  000CF6  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 10907  000CF8  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 10908  000CFA  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 10909  000CFC  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 10910  000CFE  0E01               	movlw	1
 10911  000D00  EC42  F021         	call	_ethernetController_streamFromRXBuffer
 10912  000D04  0100               	movlb	0	; () banked
 10913  000D06  6F96               	movwf	(??_arp_parseFromRXBuffer+2)& (0+255),b
 10914  000D08  5198               	movf	arp_parseFromRXBuffer@i_2994& (0+255),w,b
 10915  000D0A  0D01               	mullw	1
 10916  000D0C  0E0E               	movlw	14
 10917  000D0E  26F3               	addwf	prodl,f,c
 10918  000D10  0E00               	movlw	0
 10919  000D12  22F4               	addwfc	prodh,f,c
 10920  000D14  0E9D               	movlw	low arp_parseFromRXBuffer@arp
 10921  000D16  24F3               	addwf	prodl,w,c
 10922  000D18  6ED9               	movwf	fsr2l,c
 10923  000D1A  0E00               	movlw	high arp_parseFromRXBuffer@arp
 10924  000D1C  20F4               	addwfc	prodh,w,c
 10925  000D1E  6EDA               	movwf	fsr2h,c
 10926  000D20  C096  FFDF         	movff	??_arp_parseFromRXBuffer+2,indf2
 10927                           
 10928                           ; BSR set to: 0
 10929  000D24  2B98               	incf	arp_parseFromRXBuffer@i_2994& (0+255),f,b
 10930  000D26                     l912:
 10931                           
 10932                           ; BSR set to: 0
 10933                           
 10934                           ; BSR set to: 0
 10935  000D26  51A2               	movf	(arp_parseFromRXBuffer@arp+5)& (0+255),w,b
 10936  000D28  5D98               	subwf	arp_parseFromRXBuffer@i_2994& (0+255),w,b
 10937  000D2A  A0D8               	btfss	status,0,c
 10938  000D2C  D7D8               	goto	l913
 10939                           
 10940                           ; BSR set to: 0
 10941                           ;arp.c: 89: for (uint8_t i = 0; i < arp.hlen; i++)
 10942                           
 10943                           ; BSR set to: 0
 10944  000D2E  0E00               	movlw	0
 10945  000D30  6F99               	movwf	arp_parseFromRXBuffer@i_2995& (0+255),b
 10946  000D32  D024               	goto	l915
 10947  000D34                     
 10948                           ; BSR set to: 0
 10949                           ;arp.c: 90: arp.targetMACAddress.address[i] = ethernetController_streamFromRXBuffer(1, f
      +                          rame->memory.start + offset);
 10950                           
 10951                           ; BSR set to: 0
 10952  000D34  EE20 F010          	lfsr	2,16
 10953  000D38  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 10954  000D3A  26D9               	addwf	fsr2l,f,c
 10955  000D3C  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 10956  000D3E  22DA               	addwfc	fsr2h,f,c
 10957  000D40  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 10958  000D44  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 10959  000D48  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 10960  000D4A  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 10961  000D4C  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 10962  000D4E  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 10963  000D50  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 10964  000D52  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 10965  000D54  0E01               	movlw	1
 10966  000D56  EC42  F021         	call	_ethernetController_streamFromRXBuffer
 10967  000D5A  0100               	movlb	0	; () banked
 10968  000D5C  6F96               	movwf	(??_arp_parseFromRXBuffer+2)& (0+255),b
 10969  000D5E  5199               	movf	arp_parseFromRXBuffer@i_2995& (0+255),w,b
 10970  000D60  0D01               	mullw	1
 10971  000D62  0E12               	movlw	18
 10972  000D64  26F3               	addwf	prodl,f,c
 10973  000D66  0E00               	movlw	0
 10974  000D68  22F4               	addwfc	prodh,f,c
 10975  000D6A  0E9D               	movlw	low arp_parseFromRXBuffer@arp
 10976  000D6C  24F3               	addwf	prodl,w,c
 10977  000D6E  6ED9               	movwf	fsr2l,c
 10978  000D70  0E00               	movlw	high arp_parseFromRXBuffer@arp
 10979  000D72  20F4               	addwfc	prodh,w,c
 10980  000D74  6EDA               	movwf	fsr2h,c
 10981  000D76  C096  FFDF         	movff	??_arp_parseFromRXBuffer+2,indf2
 10982                           
 10983                           ; BSR set to: 0
 10984  000D7A  2B99               	incf	arp_parseFromRXBuffer@i_2995& (0+255),f,b
 10985  000D7C                     l915:
 10986                           
 10987                           ; BSR set to: 0
 10988                           
 10989                           ; BSR set to: 0
 10990  000D7C  51A1               	movf	(arp_parseFromRXBuffer@arp+4)& (0+255),w,b
 10991  000D7E  5D99               	subwf	arp_parseFromRXBuffer@i_2995& (0+255),w,b
 10992  000D80  A0D8               	btfss	status,0,c
 10993  000D82  D7D8               	goto	l916
 10994                           
 10995                           ; BSR set to: 0
 10996                           ;arp.c: 91: for (uint8_t i = 0; i < arp.plen; i++)
 10997                           
 10998                           ; BSR set to: 0
 10999  000D84  0E00               	movlw	0
 11000  000D86  6F9A               	movwf	arp_parseFromRXBuffer@i_2996& (0+255),b
 11001  000D88  D024               	goto	l918
 11002  000D8A                     
 11003                           ; BSR set to: 0
 11004                           ;arp.c: 92: arp.targetIPAddress.address[i] = ethernetController_streamFromRXBuffer(1, fr
      +                          ame->memory.start + offset);
 11005                           
 11006                           ; BSR set to: 0
 11007  000D8A  EE20 F010          	lfsr	2,16
 11008  000D8E  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 11009  000D90  26D9               	addwf	fsr2l,f,c
 11010  000D92  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 11011  000D94  22DA               	addwfc	fsr2h,f,c
 11012  000D96  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 11013  000D9A  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 11014  000D9E  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 11015  000DA0  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 11016  000DA2  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 11017  000DA4  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 11018  000DA6  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 11019  000DA8  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 11020  000DAA  0E01               	movlw	1
 11021  000DAC  EC42  F021         	call	_ethernetController_streamFromRXBuffer
 11022  000DB0  0100               	movlb	0	; () banked
 11023  000DB2  6F96               	movwf	(??_arp_parseFromRXBuffer+2)& (0+255),b
 11024  000DB4  519A               	movf	arp_parseFromRXBuffer@i_2996& (0+255),w,b
 11025  000DB6  0D01               	mullw	1
 11026  000DB8  0E18               	movlw	24
 11027  000DBA  26F3               	addwf	prodl,f,c
 11028  000DBC  0E00               	movlw	0
 11029  000DBE  22F4               	addwfc	prodh,f,c
 11030  000DC0  0E9D               	movlw	low arp_parseFromRXBuffer@arp
 11031  000DC2  24F3               	addwf	prodl,w,c
 11032  000DC4  6ED9               	movwf	fsr2l,c
 11033  000DC6  0E00               	movlw	high arp_parseFromRXBuffer@arp
 11034  000DC8  20F4               	addwfc	prodh,w,c
 11035  000DCA  6EDA               	movwf	fsr2h,c
 11036  000DCC  C096  FFDF         	movff	??_arp_parseFromRXBuffer+2,indf2
 11037                           
 11038                           ; BSR set to: 0
 11039  000DD0  2B9A               	incf	arp_parseFromRXBuffer@i_2996& (0+255),f,b
 11040  000DD2                     l918:
 11041                           
 11042                           ; BSR set to: 0
 11043                           
 11044                           ; BSR set to: 0
 11045  000DD2  51A2               	movf	(arp_parseFromRXBuffer@arp+5)& (0+255),w,b
 11046  000DD4  5D9A               	subwf	arp_parseFromRXBuffer@i_2996& (0+255),w,b
 11047  000DD6  A0D8               	btfss	status,0,c
 11048  000DD8  D7D8               	goto	l919
 11049                           
 11050                           ; BSR set to: 0
 11051                           ;arp.c: 94: ethernetController_streamFromRXBuffer(2, frame->memory.start + offset);
 11052                           
 11053                           ; BSR set to: 0
 11054  000DDA  EE20 F010          	lfsr	2,16
 11055  000DDE  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 11056  000DE0  26D9               	addwf	fsr2l,f,c
 11057  000DE2  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 11058  000DE4  22DA               	addwfc	fsr2h,f,c
 11059  000DE6  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 11060  000DEA  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 11061  000DEE  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 11062  000DF0  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 11063  000DF2  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 11064  000DF4  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 11065  000DF6  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 11066  000DF8  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 11067  000DFA  0E02               	movlw	2
 11068  000DFC  EC42  F021         	call	_ethernetController_streamFromRXBuffer
 11069                           
 11070                           ;arp.c: 96: if (ipv4_isAllZero(&arp.senderIPAddress)) {
 11071  000E00  0EAB               	movlw	low (arp_parseFromRXBuffer@arp+14)
 11072  000E02  0100               	movlb	0	; () banked
 11073  000E04  6F60               	movwf	ipv4_isAllZero@ip& (0+255),b
 11074  000E06  0E00               	movlw	high (arp_parseFromRXBuffer@arp+14)
 11075  000E08  6F61               	movwf	(ipv4_isAllZero@ip+1)& (0+255),b
 11076  000E0A  ECAF  F024         	call	_ipv4_isAllZero	;wreg free
 11077  000E0E  0100               	movlb	0	; () banked
 11078  000E10  A0D8               	btfss	status,0,c
 11079  000E12  D002               	goto	l921
 11080                           
 11081                           ; BSR set to: 0
 11082                           ;arp.c: 97: arp.fIsProbe = 1;
 11083  000E14  83B9               	bsf	(arp_parseFromRXBuffer@arp+28)& (0+255),1,b
 11084  000E16  D03C               	goto	l925
 11085  000E18                     l921:
 11086                           
 11087                           ; BSR set to: 0
 11088                           ;arp.c: 100: arp.fIsProbe = 0;
 11089  000E18  93B9               	bcf	(arp_parseFromRXBuffer@arp+28)& (0+255),1,b
 11090                           
 11091                           ; BSR set to: 0
 11092                           ;arp.c: 102: if (ipv4_cmp(&arp.senderIPAddress, &arp.targetIPAddress) &&
 11093                           ;arp.c: 103: mac_isAllZero(&arp.targetMACAddress) &&
 11094                           ;arp.c: 104: arp.operation == ARP_REQUEST) {
 11095  000E1A  0EAB               	movlw	low (arp_parseFromRXBuffer@arp+14)
 11096  000E1C  6F60               	movwf	ipv4_cmp@a& (0+255),b
 11097  000E1E  0E00               	movlw	high (arp_parseFromRXBuffer@arp+14)
 11098  000E20  6F61               	movwf	(ipv4_cmp@a+1)& (0+255),b
 11099  000E22  0EB5               	movlw	low (arp_parseFromRXBuffer@arp+24)
 11100  000E24  6F62               	movwf	ipv4_cmp@b& (0+255),b
 11101  000E26  0E00               	movlw	high (arp_parseFromRXBuffer@arp+24)
 11102  000E28  6F63               	movwf	(ipv4_cmp@b+1)& (0+255),b
 11103  000E2A  EC95  F023         	call	_ipv4_cmp	;wreg free
 11104  000E2E  0100               	movlb	0	; () banked
 11105  000E30  A0D8               	btfss	status,0,c
 11106  000E32  D00D               	goto	l923
 11107                           
 11108                           ; BSR set to: 0
 11109  000E34  0EAF               	movlw	low (arp_parseFromRXBuffer@arp+18)
 11110  000E36  6F60               	movwf	mac_isAllZero@mac& (0+255),b
 11111  000E38  0E00               	movlw	high (arp_parseFromRXBuffer@arp+18)
 11112  000E3A  6F61               	movwf	(mac_isAllZero@mac+1)& (0+255),b
 11113  000E3C  EC97  F024         	call	_mac_isAllZero	;wreg free
 11114  000E40  0100               	movlb	0	; () banked
 11115  000E42  A0D8               	btfss	status,0,c
 11116  000E44  D004               	goto	l923
 11117                           
 11118                           ; BSR set to: 0
 11119  000E46  05A3               	decf	(arp_parseFromRXBuffer@arp+6)& (0+255),w,b
 11120  000E48  11A4               	iorwf	(arp_parseFromRXBuffer@arp+7)& (0+255),w,b
 11121  000E4A  B4D8               	btfsc	status,2,c
 11122  000E4C  D01F               	goto	u10230
 11123  000E4E                     l923:
 11124                           
 11125                           ; BSR set to: 0
 11126                           ;arp.c: 108: if (ipv4_cmp(&arp.senderIPAddress, &arp.targetIPAddress) &&
 11127                           ;arp.c: 109: mac_cmp(&arp.senderMACAddress, &arp.targetMACAddress) &&
 11128                           ;arp.c: 110: arp.operation == ARP_REPLY) {
 11129                           
 11130                           ; BSR set to: 0
 11131  000E4E  0EAB               	movlw	low (arp_parseFromRXBuffer@arp+14)
 11132  000E50  6F60               	movwf	ipv4_cmp@a& (0+255),b
 11133  000E52  0E00               	movlw	high (arp_parseFromRXBuffer@arp+14)
 11134  000E54  6F61               	movwf	(ipv4_cmp@a+1)& (0+255),b
 11135  000E56  0EB5               	movlw	low (arp_parseFromRXBuffer@arp+24)
 11136  000E58  6F62               	movwf	ipv4_cmp@b& (0+255),b
 11137  000E5A  0E00               	movlw	high (arp_parseFromRXBuffer@arp+24)
 11138  000E5C  6F63               	movwf	(ipv4_cmp@b+1)& (0+255),b
 11139  000E5E  EC95  F023         	call	_ipv4_cmp	;wreg free
 11140  000E62  0100               	movlb	0	; () banked
 11141  000E64  A0D8               	btfss	status,0,c
 11142  000E66  D014               	goto	l925
 11143                           
 11144                           ; BSR set to: 0
 11145  000E68  0EA5               	movlw	low (arp_parseFromRXBuffer@arp+8)
 11146  000E6A  6F60               	movwf	mac_cmp@a& (0+255),b
 11147  000E6C  0E00               	movlw	high (arp_parseFromRXBuffer@arp+8)
 11148  000E6E  6F61               	movwf	(mac_cmp@a+1)& (0+255),b
 11149  000E70  0EAF               	movlw	low (arp_parseFromRXBuffer@arp+18)
 11150  000E72  6F62               	movwf	mac_cmp@b& (0+255),b
 11151  000E74  0E00               	movlw	high (arp_parseFromRXBuffer@arp+18)
 11152  000E76  6F63               	movwf	(mac_cmp@b+1)& (0+255),b
 11153  000E78  EC74  F023         	call	_mac_cmp	;wreg free
 11154  000E7C  0100               	movlb	0	; () banked
 11155  000E7E  A0D8               	btfss	status,0,c
 11156  000E80  D007               	goto	l925
 11157                           
 11158                           ; BSR set to: 0
 11159  000E82  0E02               	movlw	2
 11160  000E84  19A3               	xorwf	(arp_parseFromRXBuffer@arp+6)& (0+255),w,b
 11161  000E86  11A4               	iorwf	(arp_parseFromRXBuffer@arp+7)& (0+255),w,b
 11162  000E88  A4D8               	btfss	status,2,c
 11163  000E8A  D002               	goto	l925
 11164  000E8C                     u10230:
 11165                           
 11166                           ; BSR set to: 0
 11167                           ;arp.c: 111: arp.fIsGratuitous = 1;
 11168  000E8C  81B9               	bsf	(arp_parseFromRXBuffer@arp+28)& (0+255),0,b
 11169                           
 11170                           ;arp.c: 112: } else {
 11171  000E8E  D001               	goto	l926
 11172  000E90                     l925:
 11173                           
 11174                           ; BSR set to: 0
 11175                           ;arp.c: 113: arp.fIsGratuitous = 0;
 11176  000E90  91B9               	bcf	(arp_parseFromRXBuffer@arp+28)& (0+255),0,b
 11177  000E92                     l926:
 11178                           
 11179                           ; BSR set to: 0
 11180                           ;arp.c: 114: }
 11181                           ;arp.c: 115: }
 11182                           ;arp.c: 116: }
 11183                           ;arp.c: 119: if ((arp.htype != ARP_HTYPE_ETHERNET) ||
 11184                           ;arp.c: 120: (arp.ptype != ARP_PTYPE_IPv4) ||
 11185                           ;arp.c: 121: (arp.operation > 2) ||
 11186                           ;arp.c: 122: (arp.hlen != 6u) ||
 11187                           ;arp.c: 123: (arp.plen != 4u)) {
 11188                           
 11189                           ; BSR set to: 0
 11190                           
 11191                           ; BSR set to: 0
 11192                           
 11193                           ; BSR set to: 0
 11194  000E92  059D               	decf	arp_parseFromRXBuffer@arp& (0+255),w,b
 11195  000E94  119E               	iorwf	(arp_parseFromRXBuffer@arp+1)& (0+255),w,b
 11196  000E96  A4D8               	btfss	status,2,c
 11197  000E98  D013               	goto	u10280
 11198                           
 11199                           ; BSR set to: 0
 11200  000E9A  0E08               	movlw	8
 11201  000E9C  19A0               	xorwf	(arp_parseFromRXBuffer@arp+3)& (0+255),w,b
 11202  000E9E  119F               	iorwf	(arp_parseFromRXBuffer@arp+2)& (0+255),w,b
 11203  000EA0  A4D8               	btfss	status,2,c
 11204  000EA2  D00E               	goto	u10280
 11205                           
 11206                           ; BSR set to: 0
 11207  000EA4  51A4               	movf	(arp_parseFromRXBuffer@arp+7)& (0+255),w,b
 11208  000EA6  E10C               	bnz	l8727
 11209  000EA8  0E03               	movlw	3
 11210  000EAA  5DA3               	subwf	(arp_parseFromRXBuffer@arp+6)& (0+255),w,b
 11211  000EAC  B0D8               	btfsc	status,0,c
 11212  000EAE  D008               	goto	u10280
 11213                           
 11214                           ; BSR set to: 0
 11215  000EB0  0E06               	movlw	6
 11216  000EB2  19A1               	xorwf	(arp_parseFromRXBuffer@arp+4)& (0+255),w,b
 11217  000EB4  A4D8               	btfss	status,2,c
 11218  000EB6  D004               	goto	u10280
 11219                           
 11220                           ; BSR set to: 0
 11221  000EB8  0E04               	movlw	4
 11222  000EBA  19A2               	xorwf	(arp_parseFromRXBuffer@arp+5)& (0+255),w,b
 11223  000EBC  B4D8               	btfsc	status,2,c
 11224  000EBE  D004               	goto	l927
 11225  000EC0                     u10280:
 11226  000EC0                     l8727:
 11227                           
 11228                           ; BSR set to: 0
 11229                           ;arp.c: 124: arp.err.code = ERROR_ARP_INVALID_VALUES;
 11230  000EC0  0E01               	movlw	1
 11231  000EC2  6FBC               	movwf	(arp_parseFromRXBuffer@arp+31)& (0+255),b
 11232  000EC4  0E93               	movlw	147
 11233  000EC6  D003               	goto	L2
 11234  000EC8                     l927:
 11235                           
 11236                           ; BSR set to: 0
 11237                           ;arp.c: 127: arp.err.code = (uint16_t)0;
 11238                           
 11239                           ; BSR set to: 0
 11240  000EC8  0E00               	movlw	0
 11241  000ECA  6FBC               	movwf	(arp_parseFromRXBuffer@arp+31)& (0+255),b
 11242  000ECC  0E00               	movlw	0
 11243  000ECE                     L2:
 11244  000ECE  6FBB               	movwf	(arp_parseFromRXBuffer@arp+30)& (0+255),b
 11245                           
 11246                           ;arp.c: 128: arp.err.module = ERROR_MODULE_ARP;
 11247  000ED0  0E03               	movlw	3
 11248  000ED2  6FBA               	movwf	(arp_parseFromRXBuffer@arp+29)& (0+255),b
 11249                           
 11250                           ; BSR set to: 0
 11251                           ;arp.c: 129: }
 11252                           ;arp.c: 131: return arp;
 11253                           
 11254                           ; BSR set to: 0
 11255  000ED4  EE20  F09D         	lfsr	2,arp_parseFromRXBuffer@arp
 11256  000ED8  EE00  F074         	lfsr	0,?_arp_parseFromRXBuffer
 11257  000EDC  0E1F               	movlw	31
 11258  000EDE                     u10291:
 11259  000EDE  CFDB FFEB          	movff	plusw2,plusw0
 11260  000EE2  06E8               	decf	wreg,f,c
 11261  000EE4  E2FC               	bc	u10291
 11262  000EE6  0012               	return	
 11263  000EE8                     __end_of_arp_parseFromRXBuffer:
 11264                           	opt stack 0
 11265                           tblptru	equ	0xFF8
 11266                           tblptrh	equ	0xFF7
 11267                           tblptrl	equ	0xFF6
 11268                           tablat	equ	0xFF5
 11269                           prodh	equ	0xFF4
 11270                           prodl	equ	0xFF3
 11271                           intcon	equ	0xFF2
 11272                           intcon3	equ	0xFF0
 11273                           indf0	equ	0xFEF
 11274                           postinc0	equ	0xFEE
 11275                           plusw0	equ	0xFEB
 11276                           fsr0h	equ	0xFEA
 11277                           fsr0l	equ	0xFE9
 11278                           wreg	equ	0xFE8
 11279                           indf1	equ	0xFE7
 11280                           postinc1	equ	0xFE6
 11281                           postdec1	equ	0xFE5
 11282                           plusw1	equ	0xFE3
 11283                           fsr1h	equ	0xFE2
 11284                           fsr1l	equ	0xFE1
 11285                           indf2	equ	0xFDF
 11286                           postinc2	equ	0xFDE
 11287                           postdec2	equ	0xFDD
 11288                           plusw2	equ	0xFDB
 11289                           fsr2h	equ	0xFDA
 11290                           fsr2l	equ	0xFD9
 11291                           status	equ	0xFD8
 11292                           
 11293 ;; *************** function _mac_isAllZero *****************
 11294 ;; Defined at:
 11295 ;;		line 31 in file "src/eth/mac.c"
 11296 ;; Parameters:    Size  Location     Type
 11297 ;;  mac             2    0[BANK0 ] PTR struct macaddress
 11298 ;;		 -> arp_parseFromRXBuffer@arp(32), 
 11299 ;; Auto vars:     Size  Location     Type
 11300 ;;  i               1    2[BANK0 ] unsigned char 
 11301 ;; Return value:  Size  Location     Type
 11302 ;;		None               void
 11303 ;; Registers used:
 11304 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11305 ;; Tracked objects:
 11306 ;;		On entry : 0/0
 11307 ;;		On exit  : 0/0
 11308 ;;		Unchanged: 0/0
 11309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11310 ;;      Params:         0       2       0       0       0       0       0       0       0
 11311 ;;      Locals:         0       1       0       0       0       0       0       0       0
 11312 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11313 ;;      Totals:         0       3       0       0       0       0       0       0       0
 11314 ;;Total ram usage:        3 bytes
 11315 ;; Hardware stack levels used:    1
 11316 ;; Hardware stack levels required when called:    4
 11317 ;; This function calls:
 11318 ;;		Nothing
 11319 ;; This function is called by:
 11320 ;;		_arp_parseFromRXBuffer
 11321 ;; This function uses a non-reentrant model
 11322 ;;
 11323                           
 11324                           	psect	text34
 11325  00492E                     __ptext34:
 11326                           	opt stack 0
 11327  00492E                     _mac_isAllZero:
 11328                           	opt stack 22
 11329                           
 11330                           ;mac.c: 32: for (uint8_t i = 0; i < 6; i++) {
 11331                           
 11332                           ; BSR set to: 0
 11333                           ;incstack = 0
 11334  00492E  0E00               	movlw	0
 11335  004930  0100               	movlb	0	; () banked
 11336  004932  6F62               	movwf	mac_isAllZero@i& (0+255),b
 11337  004934                     l8325:
 11338                           
 11339                           ; BSR set to: 0
 11340  004934  0E05               	movlw	5
 11341  004936  6562               	cpfsgt	mac_isAllZero@i& (0+255),b
 11342  004938  D001               	goto	l384
 11343  00493A  D00F               	goto	u9270
 11344  00493C                     l384:
 11345                           
 11346                           ; BSR set to: 0
 11347                           ;mac.c: 33: if (mac->address[i] != 0x00)
 11348                           
 11349                           ; BSR set to: 0
 11350  00493C  5162               	movf	mac_isAllZero@i& (0+255),w,b
 11351  00493E  0D01               	mullw	1
 11352  004940  50F3               	movf	prodl,w,c
 11353  004942  2560               	addwf	mac_isAllZero@mac& (0+255),w,b
 11354  004944  6ED9               	movwf	fsr2l,c
 11355  004946  50F4               	movf	prodh,w,c
 11356  004948  2161               	addwfc	(mac_isAllZero@mac+1)& (0+255),w,b
 11357  00494A  6EDA               	movwf	fsr2h,c
 11358  00494C  50DF               	movf	indf2,w,c
 11359  00494E  B4D8               	btfsc	status,2,c
 11360  004950  D002               	goto	l386
 11361                           
 11362                           ; BSR set to: 0
 11363                           ;mac.c: 34: return 0;
 11364  004952  90D8               	bcf	status,0,c
 11365                           
 11366                           ; BSR set to: 0
 11367  004954  0012               	return	
 11368  004956                     l386:
 11369                           
 11370                           ; BSR set to: 0
 11371                           
 11372                           ; BSR set to: 0
 11373  004956  2B62               	incf	mac_isAllZero@i& (0+255),f,b
 11374  004958  D7ED               	goto	l8325
 11375  00495A                     u9270:
 11376                           
 11377                           ; BSR set to: 0
 11378                           ;mac.c: 35: }
 11379                           ;mac.c: 36: return 1;
 11380                           
 11381                           ; BSR set to: 0
 11382  00495A  80D8               	bsf	status,0,c
 11383  00495C  0012               	return	
 11384  00495E                     __end_of_mac_isAllZero:
 11385                           	opt stack 0
 11386                           tblptru	equ	0xFF8
 11387                           tblptrh	equ	0xFF7
 11388                           tblptrl	equ	0xFF6
 11389                           tablat	equ	0xFF5
 11390                           prodh	equ	0xFF4
 11391                           prodl	equ	0xFF3
 11392                           intcon	equ	0xFF2
 11393                           intcon3	equ	0xFF0
 11394                           indf0	equ	0xFEF
 11395                           postinc0	equ	0xFEE
 11396                           plusw0	equ	0xFEB
 11397                           fsr0h	equ	0xFEA
 11398                           fsr0l	equ	0xFE9
 11399                           wreg	equ	0xFE8
 11400                           indf1	equ	0xFE7
 11401                           postinc1	equ	0xFE6
 11402                           postdec1	equ	0xFE5
 11403                           plusw1	equ	0xFE3
 11404                           fsr1h	equ	0xFE2
 11405                           fsr1l	equ	0xFE1
 11406                           indf2	equ	0xFDF
 11407                           postinc2	equ	0xFDE
 11408                           postdec2	equ	0xFDD
 11409                           plusw2	equ	0xFDB
 11410                           fsr2h	equ	0xFDA
 11411                           fsr2l	equ	0xFD9
 11412                           status	equ	0xFD8
 11413                           
 11414 ;; *************** function _mac_cmp *****************
 11415 ;; Defined at:
 11416 ;;		line 39 in file "src/eth/mac.c"
 11417 ;; Parameters:    Size  Location     Type
 11418 ;;  a               2    0[BANK0 ] PTR struct macaddress
 11419 ;;		 -> arp_parseFromRXBuffer@arp(32), 
 11420 ;;  b               2    2[BANK0 ] PTR struct macaddress
 11421 ;;		 -> arp_parseFromRXBuffer@arp(32), 
 11422 ;; Auto vars:     Size  Location     Type
 11423 ;;  i               1    6[BANK0 ] unsigned char 
 11424 ;; Return value:  Size  Location     Type
 11425 ;;		None               void
 11426 ;; Registers used:
 11427 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11428 ;; Tracked objects:
 11429 ;;		On entry : 0/0
 11430 ;;		On exit  : 0/0
 11431 ;;		Unchanged: 0/0
 11432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11433 ;;      Params:         0       4       0       0       0       0       0       0       0
 11434 ;;      Locals:         0       1       0       0       0       0       0       0       0
 11435 ;;      Temps:          0       2       0       0       0       0       0       0       0
 11436 ;;      Totals:         0       7       0       0       0       0       0       0       0
 11437 ;;Total ram usage:        7 bytes
 11438 ;; Hardware stack levels used:    1
 11439 ;; Hardware stack levels required when called:    4
 11440 ;; This function calls:
 11441 ;;		Nothing
 11442 ;; This function is called by:
 11443 ;;		_arp_parseFromRXBuffer
 11444 ;; This function uses a non-reentrant model
 11445 ;;
 11446                           
 11447                           	psect	text35
 11448  0046E8                     __ptext35:
 11449                           	opt stack 0
 11450  0046E8                     _mac_cmp:
 11451                           	opt stack 22
 11452                           
 11453                           ;mac.c: 40: for (uint8_t i = 0; i < 6; i++) {
 11454                           
 11455                           ; BSR set to: 0
 11456                           ;incstack = 0
 11457  0046E8  0E00               	movlw	0
 11458  0046EA  0100               	movlb	0	; () banked
 11459  0046EC  6F66               	movwf	mac_cmp@i& (0+255),b
 11460  0046EE                     l8345:
 11461                           
 11462                           ; BSR set to: 0
 11463  0046EE  0E05               	movlw	5
 11464  0046F0  6566               	cpfsgt	mac_cmp@i& (0+255),b
 11465  0046F2  D001               	goto	l390
 11466  0046F4  D018               	goto	u9300
 11467  0046F6                     l390:
 11468                           
 11469                           ; BSR set to: 0
 11470                           ;mac.c: 41: if (a->address[i] != b->address[i])
 11471                           
 11472                           ; BSR set to: 0
 11473  0046F6  5166               	movf	mac_cmp@i& (0+255),w,b
 11474  0046F8  0D01               	mullw	1
 11475  0046FA  50F3               	movf	prodl,w,c
 11476  0046FC  2562               	addwf	mac_cmp@b& (0+255),w,b
 11477  0046FE  6ED9               	movwf	fsr2l,c
 11478  004700  50F4               	movf	prodh,w,c
 11479  004702  2163               	addwfc	(mac_cmp@b+1)& (0+255),w,b
 11480  004704  6EDA               	movwf	fsr2h,c
 11481  004706  5166               	movf	mac_cmp@i& (0+255),w,b
 11482  004708  0D01               	mullw	1
 11483  00470A  50F3               	movf	prodl,w,c
 11484  00470C  2560               	addwf	mac_cmp@a& (0+255),w,b
 11485  00470E  6EE1               	movwf	fsr1l,c
 11486  004710  50F4               	movf	prodh,w,c
 11487  004712  2161               	addwfc	(mac_cmp@a+1)& (0+255),w,b
 11488  004714  6EE2               	movwf	fsr1h,c
 11489  004716  50DE               	movf	postinc2,w,c
 11490  004718  18E6               	xorwf	postinc1,w,c
 11491  00471A  B4D8               	btfsc	status,2,c
 11492  00471C  D002               	goto	l392
 11493                           
 11494                           ; BSR set to: 0
 11495                           ;mac.c: 42: return 0;
 11496  00471E  90D8               	bcf	status,0,c
 11497                           
 11498                           ; BSR set to: 0
 11499  004720  0012               	return	
 11500  004722                     l392:
 11501                           
 11502                           ; BSR set to: 0
 11503                           
 11504                           ; BSR set to: 0
 11505  004722  2B66               	incf	mac_cmp@i& (0+255),f,b
 11506  004724  D7E4               	goto	l8345
 11507  004726                     u9300:
 11508                           
 11509                           ; BSR set to: 0
 11510                           ;mac.c: 43: }
 11511                           ;mac.c: 44: return 1;
 11512                           
 11513                           ; BSR set to: 0
 11514  004726  80D8               	bsf	status,0,c
 11515  004728  0012               	return	
 11516  00472A                     __end_of_mac_cmp:
 11517                           	opt stack 0
 11518                           tblptru	equ	0xFF8
 11519                           tblptrh	equ	0xFF7
 11520                           tblptrl	equ	0xFF6
 11521                           tablat	equ	0xFF5
 11522                           prodh	equ	0xFF4
 11523                           prodl	equ	0xFF3
 11524                           intcon	equ	0xFF2
 11525                           intcon3	equ	0xFF0
 11526                           indf0	equ	0xFEF
 11527                           postinc0	equ	0xFEE
 11528                           plusw0	equ	0xFEB
 11529                           fsr0h	equ	0xFEA
 11530                           fsr0l	equ	0xFE9
 11531                           wreg	equ	0xFE8
 11532                           indf1	equ	0xFE7
 11533                           postinc1	equ	0xFE6
 11534                           postdec1	equ	0xFE5
 11535                           plusw1	equ	0xFE3
 11536                           fsr1h	equ	0xFE2
 11537                           fsr1l	equ	0xFE1
 11538                           indf2	equ	0xFDF
 11539                           postinc2	equ	0xFDE
 11540                           postdec2	equ	0xFDD
 11541                           plusw2	equ	0xFDB
 11542                           fsr2h	equ	0xFDA
 11543                           fsr2l	equ	0xFD9
 11544                           status	equ	0xFD8
 11545                           
 11546 ;; *************** function _ipv4_isAllZero *****************
 11547 ;; Defined at:
 11548 ;;		line 306 in file "src/stack/protocols/ipv4.c"
 11549 ;; Parameters:    Size  Location     Type
 11550 ;;  ip              2    0[BANK0 ] PTR struct ipv4_address
 11551 ;;		 -> arp_parseFromRXBuffer@arp(32), 
 11552 ;; Auto vars:     Size  Location     Type
 11553 ;;  i               1    2[BANK0 ] unsigned char 
 11554 ;; Return value:  Size  Location     Type
 11555 ;;		None               void
 11556 ;; Registers used:
 11557 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11558 ;; Tracked objects:
 11559 ;;		On entry : 0/0
 11560 ;;		On exit  : 0/0
 11561 ;;		Unchanged: 0/0
 11562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11563 ;;      Params:         0       2       0       0       0       0       0       0       0
 11564 ;;      Locals:         0       1       0       0       0       0       0       0       0
 11565 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11566 ;;      Totals:         0       3       0       0       0       0       0       0       0
 11567 ;;Total ram usage:        3 bytes
 11568 ;; Hardware stack levels used:    1
 11569 ;; Hardware stack levels required when called:    4
 11570 ;; This function calls:
 11571 ;;		Nothing
 11572 ;; This function is called by:
 11573 ;;		_arp_parseFromRXBuffer
 11574 ;; This function uses a non-reentrant model
 11575 ;;
 11576                           
 11577                           	psect	text36
 11578  00495E                     __ptext36:
 11579                           	opt stack 0
 11580  00495E                     _ipv4_isAllZero:
 11581                           	opt stack 22
 11582                           
 11583                           ;ipv4.c: 307: for (uint8_t i = 0; i < 4; i++) {
 11584                           
 11585                           ; BSR set to: 0
 11586                           ;incstack = 0
 11587  00495E  0E00               	movlw	0
 11588  004960  0100               	movlb	0	; () banked
 11589  004962  6F62               	movwf	ipv4_isAllZero@i& (0+255),b
 11590  004964                     l8455:
 11591                           
 11592                           ; BSR set to: 0
 11593  004964  0E03               	movlw	3
 11594  004966  6562               	cpfsgt	ipv4_isAllZero@i& (0+255),b
 11595  004968  D001               	goto	l1132
 11596  00496A  D00F               	goto	u9450
 11597  00496C                     l1132:
 11598                           
 11599                           ; BSR set to: 0
 11600                           ;ipv4.c: 308: if (ip->address[i] != 0x00)
 11601                           
 11602                           ; BSR set to: 0
 11603  00496C  5162               	movf	ipv4_isAllZero@i& (0+255),w,b
 11604  00496E  0D01               	mullw	1
 11605  004970  50F3               	movf	prodl,w,c
 11606  004972  2560               	addwf	ipv4_isAllZero@ip& (0+255),w,b
 11607  004974  6ED9               	movwf	fsr2l,c
 11608  004976  50F4               	movf	prodh,w,c
 11609  004978  2161               	addwfc	(ipv4_isAllZero@ip+1)& (0+255),w,b
 11610  00497A  6EDA               	movwf	fsr2h,c
 11611  00497C  50DF               	movf	indf2,w,c
 11612  00497E  B4D8               	btfsc	status,2,c
 11613  004980  D002               	goto	l1134
 11614                           
 11615                           ; BSR set to: 0
 11616                           ;ipv4.c: 309: return 0;
 11617  004982  90D8               	bcf	status,0,c
 11618                           
 11619                           ; BSR set to: 0
 11620  004984  0012               	return	
 11621  004986                     l1134:
 11622                           
 11623                           ; BSR set to: 0
 11624                           
 11625                           ; BSR set to: 0
 11626  004986  2B62               	incf	ipv4_isAllZero@i& (0+255),f,b
 11627  004988  D7ED               	goto	l8455
 11628  00498A                     u9450:
 11629                           
 11630                           ; BSR set to: 0
 11631                           ;ipv4.c: 310: }
 11632                           ;ipv4.c: 311: return 1;
 11633                           
 11634                           ; BSR set to: 0
 11635  00498A  80D8               	bsf	status,0,c
 11636  00498C  0012               	return	
 11637  00498E                     __end_of_ipv4_isAllZero:
 11638                           	opt stack 0
 11639                           tblptru	equ	0xFF8
 11640                           tblptrh	equ	0xFF7
 11641                           tblptrl	equ	0xFF6
 11642                           tablat	equ	0xFF5
 11643                           prodh	equ	0xFF4
 11644                           prodl	equ	0xFF3
 11645                           intcon	equ	0xFF2
 11646                           intcon3	equ	0xFF0
 11647                           indf0	equ	0xFEF
 11648                           postinc0	equ	0xFEE
 11649                           plusw0	equ	0xFEB
 11650                           fsr0h	equ	0xFEA
 11651                           fsr0l	equ	0xFE9
 11652                           wreg	equ	0xFE8
 11653                           indf1	equ	0xFE7
 11654                           postinc1	equ	0xFE6
 11655                           postdec1	equ	0xFE5
 11656                           plusw1	equ	0xFE3
 11657                           fsr1h	equ	0xFE2
 11658                           fsr1l	equ	0xFE1
 11659                           indf2	equ	0xFDF
 11660                           postinc2	equ	0xFDE
 11661                           postdec2	equ	0xFDD
 11662                           plusw2	equ	0xFDB
 11663                           fsr2h	equ	0xFDA
 11664                           fsr2l	equ	0xFD9
 11665                           status	equ	0xFD8
 11666                           
 11667 ;; *************** function _ethernetController_streamFromRXBuffer *****************
 11668 ;; Defined at:
 11669 ;;		line 350 in file "src/enc424j600/ENC424J600.c"
 11670 ;; Parameters:    Size  Location     Type
 11671 ;;  startEnd        1    wreg     unsigned char 
 11672 ;;  startAddress    2   15[BANK0 ] unsigned int 
 11673 ;; Auto vars:     Size  Location     Type
 11674 ;;  startEnd        1   17[BANK0 ] unsigned char 
 11675 ;;  temp            1   19[BANK0 ] unsigned char 
 11676 ;;  opcode          1   18[BANK0 ] unsigned char 
 11677 ;; Return value:  Size  Location     Type
 11678 ;;                  1    wreg      unsigned char 
 11679 ;; Registers used:
 11680 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11681 ;; Tracked objects:
 11682 ;;		On entry : 0/0
 11683 ;;		On exit  : 0/0
 11684 ;;		Unchanged: 0/0
 11685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11686 ;;      Params:         0       2       0       0       0       0       0       0       0
 11687 ;;      Locals:         0       3       0       0       0       0       0       0       0
 11688 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11689 ;;      Totals:         0       5       0       0       0       0       0       0       0
 11690 ;;Total ram usage:        5 bytes
 11691 ;; Hardware stack levels used:    1
 11692 ;; Hardware stack levels required when called:    7
 11693 ;; This function calls:
 11694 ;;		_enc424j600_readSPI
 11695 ;;		_enc424j600_setERXDATAReadPointer
 11696 ;;		_enc424j600_writeSPI
 11697 ;; This function is called by:
 11698 ;;		_arp_parseFromRXBuffer
 11699 ;;		_ipv4_parseHeader
 11700 ;; This function uses a non-reentrant model
 11701 ;;
 11702                           
 11703                           	psect	text37
 11704  004284                     __ptext37:
 11705                           	opt stack 0
 11706  004284                     _ethernetController_streamFromRXBuffer:
 11707                           	opt stack 19
 11708                           
 11709                           ; BSR set to: 0
 11710                           ;incstack = 0
 11711                           ;ethernetController_streamFromRXBuffer@startEnd stored from wreg
 11712  004284  0100               	movlb	0	; () banked
 11713  004286  6F71               	movwf	ethernetController_streamFromRXBuffer@startEnd& (0+255),b
 11714                           
 11715                           ;ENC424J600.c: 351: uint8_t temp;
 11716                           ;ENC424J600.c: 352: uint8_t opcode;
 11717                           ;ENC424J600.c: 353: switch (startEnd) {
 11718  004288  D01F               	goto	l179
 11719  00428A                     
 11720                           ;ENC424J600.c: 355: enc424j600_setERXDATAReadPointer(startAddress);
 11721  00428A  C06F  F06A         	movff	ethernetController_streamFromRXBuffer@startAddress,enc424j600_setERXDATAReadPoint
      +                          er@addr
 11722  00428E  C070  F06B         	movff	ethernetController_streamFromRXBuffer@startAddress+1,enc424j600_setERXDATAReadPoi
      +                          nter@addr+1
 11723  004292  ECF2  F023         	call	_enc424j600_setERXDATAReadPointer	;wreg free
 11724                           
 11725                           ;ENC424J600.c: 356: opcode = 0x2C;
 11726  004296  0E2C               	movlw	44
 11727  004298  0100               	movlb	0	; () banked
 11728  00429A  6F72               	movwf	ethernetController_streamFromRXBuffer@opcode& (0+255),b
 11729                           
 11730                           ; BSR set to: 0
 11731                           ;ENC424J600.c: 357: PORTBbits.RB4=0;
 11732  00429C  9881               	bcf	3969,4,c	;volatile
 11733                           
 11734                           ; BSR set to: 0
 11735                           ;ENC424J600.c: 358: enc424j600_writeSPI(&opcode);
 11736  00429E  0E72               	movlw	low ethernetController_streamFromRXBuffer@opcode
 11737  0042A0  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 11738  0042A2  0E00               	movlw	high ethernetController_streamFromRXBuffer@opcode
 11739  0042A4  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 11740  0042A6  EC10  F021         	call	_enc424j600_writeSPI	;wreg free
 11741                           
 11742                           ;ENC424J600.c: 359: return 0;
 11743  0042AA  0E00               	movlw	0
 11744  0042AC  0012               	return	
 11745  0042AE                     
 11746                           ;ENC424J600.c: 361: enc424j600_readSPI(&temp);
 11747  0042AE  0E73               	movlw	low ethernetController_streamFromRXBuffer@temp
 11748  0042B0  0100               	movlb	0	; () banked
 11749  0042B2  6F60               	movwf	enc424j600_readSPI@data& (0+255),b
 11750  0042B4  0E00               	movlw	high ethernetController_streamFromRXBuffer@temp
 11751  0042B6  6F61               	movwf	(enc424j600_readSPI@data+1)& (0+255),b
 11752  0042B8  EC74  F020         	call	_enc424j600_readSPI	;wreg free
 11753                           
 11754                           ;ENC424J600.c: 362: return temp;
 11755  0042BC  0100               	movlb	0	; () banked
 11756  0042BE  5173               	movf	ethernetController_streamFromRXBuffer@temp& (0+255),w,b
 11757                           
 11758                           ; BSR set to: 0
 11759  0042C0  0012               	return	
 11760  0042C2                     l183:
 11761                           
 11762                           ; BSR set to: 0
 11763                           ;ENC424J600.c: 364: PORTBbits.RB4=1;
 11764  0042C2  8881               	bsf	3969,4,c	;volatile
 11765                           
 11766                           ; BSR set to: 0
 11767                           ;ENC424J600.c: 374: return 0;
 11768  0042C4  0E00               	movlw	0
 11769                           
 11770                           ; BSR set to: 0
 11771  0042C6  0012               	return	
 11772  0042C8                     l179:
 11773                           
 11774                           ; BSR set to: 0
 11775  0042C8  0100               	movlb	0	; () banked
 11776  0042CA  5171               	movf	ethernetController_streamFromRXBuffer@startEnd& (0+255),w,b
 11777                           
 11778                           ; Switch size 1, requested type "space"
 11779                           ; Number of cases is 3, Range of values is 0 to 2
 11780                           ; switch strategies available:
 11781                           ; Name         Instructions Cycles
 11782                           ; simple_byte           10     6 (average)
 11783                           ;	Chosen strategy is simple_byte
 11784  0042CC  0A00               	xorlw	0	; case 0
 11785  0042CE  B4D8               	btfsc	status,2,c
 11786  0042D0  D7DC               	goto	l180
 11787  0042D2  0A01               	xorlw	1	; case 1
 11788  0042D4  B4D8               	btfsc	status,2,c
 11789  0042D6  D7EB               	goto	l182
 11790  0042D8  0A03               	xorlw	3	; case 2
 11791  0042DA  B4D8               	btfsc	status,2,c
 11792  0042DC  D7F2               	goto	l183
 11793                           
 11794                           ; BSR set to: 0
 11795                           ;ENC424J600.c: 376: return 0;
 11796                           
 11797                           ; BSR set to: 0
 11798  0042DE  0E00               	movlw	0
 11799  0042E0  0012               	return	
 11800  0042E2                     __end_of_ethernetController_streamFromRXBuffer:
 11801                           	opt stack 0
 11802                           tblptru	equ	0xFF8
 11803                           tblptrh	equ	0xFF7
 11804                           tblptrl	equ	0xFF6
 11805                           tablat	equ	0xFF5
 11806                           prodh	equ	0xFF4
 11807                           prodl	equ	0xFF3
 11808                           intcon	equ	0xFF2
 11809                           intcon3	equ	0xFF0
 11810                           indf0	equ	0xFEF
 11811                           postinc0	equ	0xFEE
 11812                           plusw0	equ	0xFEB
 11813                           fsr0h	equ	0xFEA
 11814                           fsr0l	equ	0xFE9
 11815                           wreg	equ	0xFE8
 11816                           indf1	equ	0xFE7
 11817                           postinc1	equ	0xFE6
 11818                           postdec1	equ	0xFE5
 11819                           plusw1	equ	0xFE3
 11820                           fsr1h	equ	0xFE2
 11821                           fsr1l	equ	0xFE1
 11822                           indf2	equ	0xFDF
 11823                           postinc2	equ	0xFDE
 11824                           postdec2	equ	0xFDD
 11825                           plusw2	equ	0xFDB
 11826                           fsr2h	equ	0xFDA
 11827                           fsr2l	equ	0xFD9
 11828                           status	equ	0xFD8
 11829                           
 11830 ;; *************** function _UARTTransmitInt *****************
 11831 ;; Defined at:
 11832 ;;		line 43 in file "src/system/uart.c"
 11833 ;; Parameters:    Size  Location     Type
 11834 ;;  val             4   58[BANK0 ] unsigned long 
 11835 ;; Auto vars:     Size  Location     Type
 11836 ;;		None
 11837 ;; Return value:  Size  Location     Type
 11838 ;;                  1    wreg      void 
 11839 ;; Registers used:
 11840 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11841 ;; Tracked objects:
 11842 ;;		On entry : 0/0
 11843 ;;		On exit  : 0/0
 11844 ;;		Unchanged: 0/0
 11845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11846 ;;      Params:         0       4       0       0       0       0       0       0       0
 11847 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11848 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11849 ;;      Totals:         0       4       0       0       0       0       0       0       0
 11850 ;;Total ram usage:        4 bytes
 11851 ;; Hardware stack levels used:    1
 11852 ;; Hardware stack levels required when called:    8
 11853 ;; This function calls:
 11854 ;;		_UARTTransmitText
 11855 ;;		_intToString
 11856 ;; This function is called by:
 11857 ;;		_ethernet_rxGetNewFrame
 11858 ;; This function uses a non-reentrant model
 11859 ;;
 11860                           
 11861                           	psect	text38
 11862  004B92                     __ptext38:
 11863                           	opt stack 0
 11864  004B92                     _UARTTransmitInt:
 11865                           	opt stack 20
 11866                           
 11867                           ;uart.c: 44: UARTTransmitText(intToString(val));
 11868                           
 11869                           ;incstack = 0
 11870  004B92  C09A  F084         	movff	UARTTransmitInt@val,intToString@val
 11871  004B96  C09B  F085         	movff	UARTTransmitInt@val+1,intToString@val+1
 11872  004B9A  C09C  F086         	movff	UARTTransmitInt@val+2,intToString@val+2
 11873  004B9E  C09D  F087         	movff	UARTTransmitInt@val+3,intToString@val+3
 11874  004BA2  EC7E  F024         	call	_intToString	;wreg free
 11875  004BA6  C084  F098         	movff	?_intToString,UARTTransmitText@str
 11876  004BAA  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
 11877  004BAE  ECC8  F021         	call	_UARTTransmitText	;wreg free
 11878  004BB2  0012               	return		;funcret
 11879  004BB4                     __end_of_UARTTransmitInt:
 11880                           	opt stack 0
 11881                           tblptru	equ	0xFF8
 11882                           tblptrh	equ	0xFF7
 11883                           tblptrl	equ	0xFF6
 11884                           tablat	equ	0xFF5
 11885                           prodh	equ	0xFF4
 11886                           prodl	equ	0xFF3
 11887                           intcon	equ	0xFF2
 11888                           intcon3	equ	0xFF0
 11889                           indf0	equ	0xFEF
 11890                           postinc0	equ	0xFEE
 11891                           plusw0	equ	0xFEB
 11892                           fsr0h	equ	0xFEA
 11893                           fsr0l	equ	0xFE9
 11894                           wreg	equ	0xFE8
 11895                           indf1	equ	0xFE7
 11896                           postinc1	equ	0xFE6
 11897                           postdec1	equ	0xFE5
 11898                           plusw1	equ	0xFE3
 11899                           fsr1h	equ	0xFE2
 11900                           fsr1l	equ	0xFE1
 11901                           indf2	equ	0xFDF
 11902                           postinc2	equ	0xFDE
 11903                           postdec2	equ	0xFDD
 11904                           plusw2	equ	0xFDB
 11905                           fsr2h	equ	0xFDA
 11906                           fsr2l	equ	0xFD9
 11907                           status	equ	0xFD8
 11908                           
 11909 ;; *************** function _intToString *****************
 11910 ;; Defined at:
 11911 ;;		line 75 in file "src/system/uart.c"
 11912 ;; Parameters:    Size  Location     Type
 11913 ;;  val             4   36[BANK0 ] unsigned long 
 11914 ;; Auto vars:     Size  Location     Type
 11915 ;;		None
 11916 ;; Return value:  Size  Location     Type
 11917 ;;                  2   36[BANK0 ] PTR unsigned char 
 11918 ;; Registers used:
 11919 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11920 ;; Tracked objects:
 11921 ;;		On entry : 0/0
 11922 ;;		On exit  : 0/0
 11923 ;;		Unchanged: 0/0
 11924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11925 ;;      Params:         0       4       0       0       0       0       0       0       0
 11926 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11927 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11928 ;;      Totals:         0       4       0       0       0       0       0       0       0
 11929 ;;Total ram usage:        4 bytes
 11930 ;; Hardware stack levels used:    1
 11931 ;; Hardware stack levels required when called:    7
 11932 ;; This function calls:
 11933 ;;		_ltoa
 11934 ;; This function is called by:
 11935 ;;		_ethernet_rxGetNewFrame
 11936 ;;		_printErrorMessage
 11937 ;;		_UARTTransmitInt
 11938 ;;		_ipv4_handleNewPacket
 11939 ;;		_arpEntryToString
 11940 ;; This function uses a non-reentrant model
 11941 ;;
 11942                           
 11943                           	psect	text39
 11944  0048FC                     __ptext39:
 11945                           	opt stack 0
 11946  0048FC                     _intToString:
 11947                           	opt stack 22
 11948                           
 11949                           ;uart.c: 76: char static number [10];
 11950                           ;uart.c: 77: ltoa(&number[0], (long) val, 10);
 11951                           
 11952                           ;incstack = 0
 11953  0048FC  0EBB               	movlw	low intToString@number
 11954  0048FE  0100               	movlb	0	; () banked
 11955  004900  6F7A               	movwf	ltoa@buf& (0+255),b
 11956  004902  0E02               	movlw	high intToString@number
 11957  004904  6F7B               	movwf	(ltoa@buf+1)& (0+255),b
 11958  004906  C084  F07C         	movff	intToString@val,ltoa@val
 11959  00490A  C085  F07D         	movff	intToString@val+1,ltoa@val+1
 11960  00490E  C086  F07E         	movff	intToString@val+2,ltoa@val+2
 11961  004912  C087  F07F         	movff	intToString@val+3,ltoa@val+3
 11962  004916  0E00               	movlw	0
 11963  004918  6F81               	movwf	(ltoa@base+1)& (0+255),b
 11964  00491A  0E0A               	movlw	10
 11965  00491C  6F80               	movwf	ltoa@base& (0+255),b
 11966  00491E  EC1D  F022         	call	_ltoa	;wreg free
 11967                           
 11968                           ;uart.c: 81: return number;
 11969  004922  0EBB               	movlw	low intToString@number
 11970  004924  0100               	movlb	0	; () banked
 11971  004926  6F84               	movwf	?_intToString& (0+255),b
 11972  004928  0E02               	movlw	high intToString@number
 11973  00492A  6F85               	movwf	(?_intToString+1)& (0+255),b
 11974  00492C  0012               	return	
 11975  00492E                     __end_of_intToString:
 11976                           	opt stack 0
 11977                           tblptru	equ	0xFF8
 11978                           tblptrh	equ	0xFF7
 11979                           tblptrl	equ	0xFF6
 11980                           tablat	equ	0xFF5
 11981                           prodh	equ	0xFF4
 11982                           prodl	equ	0xFF3
 11983                           intcon	equ	0xFF2
 11984                           intcon3	equ	0xFF0
 11985                           indf0	equ	0xFEF
 11986                           postinc0	equ	0xFEE
 11987                           plusw0	equ	0xFEB
 11988                           fsr0h	equ	0xFEA
 11989                           fsr0l	equ	0xFE9
 11990                           wreg	equ	0xFE8
 11991                           indf1	equ	0xFE7
 11992                           postinc1	equ	0xFE6
 11993                           postdec1	equ	0xFE5
 11994                           plusw1	equ	0xFE3
 11995                           fsr1h	equ	0xFE2
 11996                           fsr1l	equ	0xFE1
 11997                           indf2	equ	0xFDF
 11998                           postinc2	equ	0xFDE
 11999                           postdec2	equ	0xFDD
 12000                           plusw2	equ	0xFDB
 12001                           fsr2h	equ	0xFDA
 12002                           fsr2l	equ	0xFD9
 12003                           status	equ	0xFD8
 12004                           
 12005 ;; *************** function _ltoa *****************
 12006 ;; Defined at:
 12007 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ltoa.c"
 12008 ;; Parameters:    Size  Location     Type
 12009 ;;  buf             2   26[BANK0 ] PTR unsigned char 
 12010 ;;		 -> intToString@number(10), 
 12011 ;;  val             4   28[BANK0 ] long 
 12012 ;;  base            2   32[BANK0 ] int 
 12013 ;; Auto vars:     Size  Location     Type
 12014 ;;  cp              2   34[BANK0 ] PTR unsigned char 
 12015 ;;		 -> intToString@number(10), 
 12016 ;; Return value:  Size  Location     Type
 12017 ;;                  2   26[BANK0 ] PTR unsigned char 
 12018 ;; Registers used:
 12019 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12020 ;; Tracked objects:
 12021 ;;		On entry : 0/0
 12022 ;;		On exit  : 0/0
 12023 ;;		Unchanged: 0/0
 12024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12025 ;;      Params:         0       8       0       0       0       0       0       0       0
 12026 ;;      Locals:         0       2       0       0       0       0       0       0       0
 12027 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12028 ;;      Totals:         0      10       0       0       0       0       0       0       0
 12029 ;;Total ram usage:       10 bytes
 12030 ;; Hardware stack levels used:    1
 12031 ;; Hardware stack levels required when called:    6
 12032 ;; This function calls:
 12033 ;;		_ultoa
 12034 ;; This function is called by:
 12035 ;;		_intToString
 12036 ;; This function uses a non-reentrant model
 12037 ;;
 12038                           
 12039                           	psect	text40
 12040  00443A                     __ptext40:
 12041                           	opt stack 0
 12042  00443A                     _ltoa:
 12043                           	opt stack 22
 12044                           
 12045                           ; BSR set to: 0
 12046                           ;incstack = 0
 12047  00443A  C07A  F082         	movff	ltoa@buf,ltoa@cp
 12048  00443E  C07B  F083         	movff	ltoa@buf+1,ltoa@cp+1
 12049  004442  0100               	movlb	0	; () banked
 12050  004444  AF7F               	btfss	(ltoa@val+3)& (0+255),7,b
 12051  004446  D010               	goto	l1551
 12052                           
 12053                           ; BSR set to: 0
 12054  004448  C07A  FFD9         	movff	ltoa@buf,fsr2l
 12055  00444C  C07B  FFDA         	movff	ltoa@buf+1,fsr2h
 12056  004450  0E2D               	movlw	45
 12057  004452  6EDF               	movwf	indf2,c
 12058                           
 12059                           ; BSR set to: 0
 12060  004454  4B7A               	infsnz	ltoa@buf& (0+255),f,b
 12061  004456  2B7B               	incf	(ltoa@buf+1)& (0+255),f,b
 12062                           
 12063                           ; BSR set to: 0
 12064  004458  1F7F               	comf	(ltoa@val+3)& (0+255),f,b
 12065  00445A  1F7E               	comf	(ltoa@val+2)& (0+255),f,b
 12066  00445C  1F7D               	comf	(ltoa@val+1)& (0+255),f,b
 12067  00445E  6D7C               	negf	ltoa@val& (0+255),b
 12068  004460  0E00               	movlw	0
 12069  004462  237D               	addwfc	(ltoa@val+1)& (0+255),f,b
 12070  004464  237E               	addwfc	(ltoa@val+2)& (0+255),f,b
 12071  004466  237F               	addwfc	(ltoa@val+3)& (0+255),f,b
 12072  004468                     l1551:
 12073                           
 12074                           ; BSR set to: 0
 12075                           
 12076                           ; BSR set to: 0
 12077  004468  C07A  F06D         	movff	ltoa@buf,ultoa@buf
 12078  00446C  C07B  F06E         	movff	ltoa@buf+1,ultoa@buf+1
 12079  004470  C07C  F06F         	movff	ltoa@val,ultoa@val
 12080  004474  C07D  F070         	movff	ltoa@val+1,ultoa@val+1
 12081  004478  C07E  F071         	movff	ltoa@val+2,ultoa@val+2
 12082  00447C  C07F  F072         	movff	ltoa@val+3,ultoa@val+3
 12083  004480  C080  F073         	movff	ltoa@base,ultoa@base
 12084  004484  C081  F074         	movff	ltoa@base+1,ultoa@base+1
 12085  004488  EC3D  F018         	call	_ultoa	;wreg free
 12086  00448C  0012               	return	
 12087  00448E                     __end_of_ltoa:
 12088                           	opt stack 0
 12089                           tblptru	equ	0xFF8
 12090                           tblptrh	equ	0xFF7
 12091                           tblptrl	equ	0xFF6
 12092                           tablat	equ	0xFF5
 12093                           prodh	equ	0xFF4
 12094                           prodl	equ	0xFF3
 12095                           intcon	equ	0xFF2
 12096                           intcon3	equ	0xFF0
 12097                           indf0	equ	0xFEF
 12098                           postinc0	equ	0xFEE
 12099                           plusw0	equ	0xFEB
 12100                           fsr0h	equ	0xFEA
 12101                           fsr0l	equ	0xFE9
 12102                           wreg	equ	0xFE8
 12103                           indf1	equ	0xFE7
 12104                           postinc1	equ	0xFE6
 12105                           postdec1	equ	0xFE5
 12106                           plusw1	equ	0xFE3
 12107                           fsr1h	equ	0xFE2
 12108                           fsr1l	equ	0xFE1
 12109                           indf2	equ	0xFDF
 12110                           postinc2	equ	0xFDE
 12111                           postdec2	equ	0xFDD
 12112                           plusw2	equ	0xFDB
 12113                           fsr2h	equ	0xFDA
 12114                           fsr2l	equ	0xFD9
 12115                           status	equ	0xFD8
 12116                           
 12117 ;; *************** function _ultoa *****************
 12118 ;; Defined at:
 12119 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ltoa.c"
 12120 ;; Parameters:    Size  Location     Type
 12121 ;;  buf             2   13[BANK0 ] PTR unsigned char 
 12122 ;;		 -> intToString@number(10), 
 12123 ;;  val             4   15[BANK0 ] unsigned long 
 12124 ;;  base            2   19[BANK0 ] int 
 12125 ;; Auto vars:     Size  Location     Type
 12126 ;;  v               4   21[BANK0 ] unsigned long 
 12127 ;;  c               1   25[BANK0 ] unsigned char 
 12128 ;; Return value:  Size  Location     Type
 12129 ;;                  2   13[BANK0 ] PTR unsigned char 
 12130 ;; Registers used:
 12131 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12132 ;; Tracked objects:
 12133 ;;		On entry : 0/0
 12134 ;;		On exit  : 0/0
 12135 ;;		Unchanged: 0/0
 12136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12137 ;;      Params:         0       8       0       0       0       0       0       0       0
 12138 ;;      Locals:         0       5       0       0       0       0       0       0       0
 12139 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12140 ;;      Totals:         0      13       0       0       0       0       0       0       0
 12141 ;;Total ram usage:       13 bytes
 12142 ;; Hardware stack levels used:    1
 12143 ;; Hardware stack levels required when called:    5
 12144 ;; This function calls:
 12145 ;;		___lldiv
 12146 ;;		___llmod
 12147 ;; This function is called by:
 12148 ;;		_ltoa
 12149 ;; This function uses a non-reentrant model
 12150 ;;
 12151                           
 12152                           	psect	text41
 12153  00307A                     __ptext41:
 12154                           	opt stack 0
 12155  00307A                     _ultoa:
 12156                           	opt stack 22
 12157                           
 12158                           ;incstack = 0
 12159  00307A  C06F  F075         	movff	ultoa@val,ultoa@v
 12160  00307E  C070  F076         	movff	ultoa@val+1,ultoa@v+1
 12161  003082  C071  F077         	movff	ultoa@val+2,ultoa@v+2
 12162  003086  C072  F078         	movff	ultoa@val+3,ultoa@v+3
 12163  00308A  C075  F060         	movff	ultoa@v,___lldiv@dividend
 12164  00308E  C076  F061         	movff	ultoa@v+1,___lldiv@dividend+1
 12165  003092  C077  F062         	movff	ultoa@v+2,___lldiv@dividend+2
 12166  003096  C078  F063         	movff	ultoa@v+3,___lldiv@dividend+3
 12167  00309A  C073  F064         	movff	ultoa@base,___lldiv@divisor
 12168  00309E  C074  F065         	movff	ultoa@base+1,___lldiv@divisor+1
 12169  0030A2  0100               	movlb	0	; () banked
 12170  0030A4  0E00               	movlw	0
 12171  0030A6  BF65               	btfsc	(___lldiv@divisor+1)& (0+255),7,b
 12172  0030A8  0EFF               	movlw	-1
 12173  0030AA  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
 12174  0030AC  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
 12175  0030AE  ECDD  F01D         	call	___lldiv	;wreg free
 12176  0030B2  C060  F075         	movff	?___lldiv,ultoa@v
 12177  0030B6  C061  F076         	movff	?___lldiv+1,ultoa@v+1
 12178  0030BA  C062  F077         	movff	?___lldiv+2,ultoa@v+2
 12179  0030BE  C063  F078         	movff	?___lldiv+3,ultoa@v+3
 12180  0030C2  0100               	movlb	0	; () banked
 12181  0030C4  4B6D               	infsnz	ultoa@buf& (0+255),f,b
 12182  0030C6  2B6E               	incf	(ultoa@buf+1)& (0+255),f,b
 12183                           
 12184                           ; BSR set to: 0
 12185  0030C8  5175               	movf	ultoa@v& (0+255),w,b
 12186  0030CA  1176               	iorwf	(ultoa@v+1)& (0+255),w,b
 12187  0030CC  1177               	iorwf	(ultoa@v+2)& (0+255),w,b
 12188  0030CE  1178               	iorwf	(ultoa@v+3)& (0+255),w,b
 12189  0030D0  A4D8               	btfss	status,2,c
 12190  0030D2  D7DB               	goto	l1555
 12191                           
 12192                           ; BSR set to: 0
 12193                           
 12194                           ; BSR set to: 0
 12195  0030D4  C06D  FFD9         	movff	ultoa@buf,fsr2l
 12196  0030D8  C06E  FFDA         	movff	ultoa@buf+1,fsr2h
 12197  0030DC  0E00               	movlw	0
 12198  0030DE  6EDF               	movwf	indf2,c
 12199                           
 12200                           ; BSR set to: 0
 12201  0030E0  076D               	decf	ultoa@buf& (0+255),f,b
 12202  0030E2  A0D8               	btfss	status,0,c
 12203  0030E4  076E               	decf	(ultoa@buf+1)& (0+255),f,b
 12204  0030E6                     
 12205                           ; BSR set to: 0
 12206                           
 12207                           ; BSR set to: 0
 12208  0030E6  C06F  F060         	movff	ultoa@val,___llmod@dividend
 12209  0030EA  C070  F061         	movff	ultoa@val+1,___llmod@dividend+1
 12210  0030EE  C071  F062         	movff	ultoa@val+2,___llmod@dividend+2
 12211  0030F2  C072  F063         	movff	ultoa@val+3,___llmod@dividend+3
 12212  0030F6  C073  F064         	movff	ultoa@base,___llmod@divisor
 12213  0030FA  C074  F065         	movff	ultoa@base+1,___llmod@divisor+1
 12214  0030FE  0E00               	movlw	0
 12215  003100  BF65               	btfsc	(___llmod@divisor+1)& (0+255),7,b
 12216  003102  0EFF               	movlw	-1
 12217  003104  6F66               	movwf	(___llmod@divisor+2)& (0+255),b
 12218  003106  6F67               	movwf	(___llmod@divisor+3)& (0+255),b
 12219  003108  ECA9  F020         	call	___llmod	;wreg free
 12220  00310C  0100               	movlb	0	; () banked
 12221  00310E  5160               	movf	?___llmod& (0+255),w,b
 12222  003110  6F79               	movwf	ultoa@c& (0+255),b
 12223                           
 12224                           ; BSR set to: 0
 12225  003112  C06F  F060         	movff	ultoa@val,___lldiv@dividend
 12226  003116  C070  F061         	movff	ultoa@val+1,___lldiv@dividend+1
 12227  00311A  C071  F062         	movff	ultoa@val+2,___lldiv@dividend+2
 12228  00311E  C072  F063         	movff	ultoa@val+3,___lldiv@dividend+3
 12229  003122  C073  F064         	movff	ultoa@base,___lldiv@divisor
 12230  003126  C074  F065         	movff	ultoa@base+1,___lldiv@divisor+1
 12231  00312A  0E00               	movlw	0
 12232  00312C  BF65               	btfsc	(___lldiv@divisor+1)& (0+255),7,b
 12233  00312E  0EFF               	movlw	-1
 12234  003130  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
 12235  003132  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
 12236  003134  ECDD  F01D         	call	___lldiv	;wreg free
 12237  003138  C060  F06F         	movff	?___lldiv,ultoa@val
 12238  00313C  C061  F070         	movff	?___lldiv+1,ultoa@val+1
 12239  003140  C062  F071         	movff	?___lldiv+2,ultoa@val+2
 12240  003144  C063  F072         	movff	?___lldiv+3,ultoa@val+3
 12241  003148  0E09               	movlw	9
 12242  00314A  0100               	movlb	0	; () banked
 12243  00314C  6579               	cpfsgt	ultoa@c& (0+255),b
 12244  00314E  D002               	goto	l1558
 12245                           
 12246                           ; BSR set to: 0
 12247  003150  0E07               	movlw	7
 12248  003152  2779               	addwf	ultoa@c& (0+255),f,b
 12249  003154                     l1558:
 12250                           
 12251                           ; BSR set to: 0
 12252  003154  0E30               	movlw	48
 12253  003156  2779               	addwf	ultoa@c& (0+255),f,b
 12254                           
 12255                           ; BSR set to: 0
 12256  003158  C06D  FFD9         	movff	ultoa@buf,fsr2l
 12257  00315C  C06E  FFDA         	movff	ultoa@buf+1,fsr2h
 12258  003160  C079  FFDF         	movff	ultoa@c,indf2
 12259                           
 12260                           ; BSR set to: 0
 12261  003164  076D               	decf	ultoa@buf& (0+255),f,b
 12262  003166  A0D8               	btfss	status,0,c
 12263  003168  076E               	decf	(ultoa@buf+1)& (0+255),f,b
 12264                           
 12265                           ; BSR set to: 0
 12266  00316A  516F               	movf	ultoa@val& (0+255),w,b
 12267  00316C  1170               	iorwf	(ultoa@val+1)& (0+255),w,b
 12268  00316E  1171               	iorwf	(ultoa@val+2)& (0+255),w,b
 12269  003170  1172               	iorwf	(ultoa@val+3)& (0+255),w,b
 12270  003172  B4D8               	btfsc	status,2,c
 12271  003174  0012               	return	
 12272  003176  D7B7               	goto	l1557
 12273  003178                     __end_of_ultoa:
 12274                           	opt stack 0
 12275                           tblptru	equ	0xFF8
 12276                           tblptrh	equ	0xFF7
 12277                           tblptrl	equ	0xFF6
 12278                           tablat	equ	0xFF5
 12279                           prodh	equ	0xFF4
 12280                           prodl	equ	0xFF3
 12281                           intcon	equ	0xFF2
 12282                           intcon3	equ	0xFF0
 12283                           indf0	equ	0xFEF
 12284                           postinc0	equ	0xFEE
 12285                           plusw0	equ	0xFEB
 12286                           fsr0h	equ	0xFEA
 12287                           fsr0l	equ	0xFE9
 12288                           wreg	equ	0xFE8
 12289                           indf1	equ	0xFE7
 12290                           postinc1	equ	0xFE6
 12291                           postdec1	equ	0xFE5
 12292                           plusw1	equ	0xFE3
 12293                           fsr1h	equ	0xFE2
 12294                           fsr1l	equ	0xFE1
 12295                           indf2	equ	0xFDF
 12296                           postinc2	equ	0xFDE
 12297                           postdec2	equ	0xFDD
 12298                           plusw2	equ	0xFDB
 12299                           fsr2h	equ	0xFDA
 12300                           fsr2l	equ	0xFD9
 12301                           status	equ	0xFD8
 12302                           
 12303 ;; *************** function ___llmod *****************
 12304 ;; Defined at:
 12305 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
 12306 ;; Parameters:    Size  Location     Type
 12307 ;;  dividend        4    0[BANK0 ] unsigned long 
 12308 ;;  divisor         4    4[BANK0 ] unsigned long 
 12309 ;; Auto vars:     Size  Location     Type
 12310 ;;  counter         1    8[BANK0 ] unsigned char 
 12311 ;; Return value:  Size  Location     Type
 12312 ;;                  4    0[BANK0 ] unsigned long 
 12313 ;; Registers used:
 12314 ;;		wreg, status,2, status,0
 12315 ;; Tracked objects:
 12316 ;;		On entry : 0/0
 12317 ;;		On exit  : 0/0
 12318 ;;		Unchanged: 0/0
 12319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12320 ;;      Params:         0       8       0       0       0       0       0       0       0
 12321 ;;      Locals:         0       1       0       0       0       0       0       0       0
 12322 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12323 ;;      Totals:         0       9       0       0       0       0       0       0       0
 12324 ;;Total ram usage:        9 bytes
 12325 ;; Hardware stack levels used:    1
 12326 ;; Hardware stack levels required when called:    4
 12327 ;; This function calls:
 12328 ;;		Nothing
 12329 ;; This function is called by:
 12330 ;;		_ultoa
 12331 ;;		_arpEntryToString
 12332 ;; This function uses a non-reentrant model
 12333 ;;
 12334                           
 12335                           	psect	text42
 12336  004152                     __ptext42:
 12337                           	opt stack 0
 12338  004152                     ___llmod:
 12339                           	opt stack 22
 12340                           
 12341                           ; BSR set to: 0
 12342                           ;incstack = 0
 12343  004152  0100               	movlb	0	; () banked
 12344  004154  5164               	movf	___llmod@divisor& (0+255),w,b
 12345  004156  1165               	iorwf	(___llmod@divisor+1)& (0+255),w,b
 12346  004158  1166               	iorwf	(___llmod@divisor+2)& (0+255),w,b
 12347  00415A  1167               	iorwf	(___llmod@divisor+3)& (0+255),w,b
 12348  00415C  B4D8               	btfsc	status,2,c
 12349  00415E  D024               	goto	l1517
 12350                           
 12351                           ; BSR set to: 0
 12352  004160  0E01               	movlw	1
 12353  004162  6F68               	movwf	___llmod@counter& (0+255),b
 12354  004164  D006               	goto	l1512
 12355  004166                     
 12356                           ; BSR set to: 0
 12357                           
 12358                           ; BSR set to: 0
 12359  004166  90D8               	bcf	status,0,c
 12360  004168  3764               	rlcf	___llmod@divisor& (0+255),f,b
 12361  00416A  3765               	rlcf	(___llmod@divisor+1)& (0+255),f,b
 12362  00416C  3766               	rlcf	(___llmod@divisor+2)& (0+255),f,b
 12363  00416E  3767               	rlcf	(___llmod@divisor+3)& (0+255),f,b
 12364  004170  2B68               	incf	___llmod@counter& (0+255),f,b
 12365  004172                     l1512:
 12366                           
 12367                           ; BSR set to: 0
 12368                           
 12369                           ; BSR set to: 0
 12370  004172  AF67               	btfss	(___llmod@divisor+3)& (0+255),7,b
 12371  004174  D7F8               	goto	l1513
 12372  004176                     u8880:
 12373                           
 12374                           ; BSR set to: 0
 12375                           
 12376                           ; BSR set to: 0
 12377                           
 12378                           ; BSR set to: 0
 12379  004176  5164               	movf	___llmod@divisor& (0+255),w,b
 12380  004178  5D60               	subwf	___llmod@dividend& (0+255),w,b
 12381  00417A  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
 12382  00417C  5961               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 12383  00417E  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
 12384  004180  5962               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 12385  004182  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
 12386  004184  5963               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 12387  004186  A0D8               	btfss	status,0,c
 12388  004188  D008               	goto	l1516
 12389                           
 12390                           ; BSR set to: 0
 12391  00418A  5164               	movf	___llmod@divisor& (0+255),w,b
 12392  00418C  5F60               	subwf	___llmod@dividend& (0+255),f,b
 12393  00418E  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
 12394  004190  5B61               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 12395  004192  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
 12396  004194  5B62               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 12397  004196  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
 12398  004198  5B63               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 12399  00419A                     l1516:
 12400                           
 12401                           ; BSR set to: 0
 12402                           
 12403                           ; BSR set to: 0
 12404  00419A  90D8               	bcf	status,0,c
 12405  00419C  3367               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 12406  00419E  3366               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 12407  0041A0  3365               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 12408  0041A2  3364               	rrcf	___llmod@divisor& (0+255),f,b
 12409                           
 12410                           ; BSR set to: 0
 12411  0041A4  2F68               	decfsz	___llmod@counter& (0+255),f,b
 12412  0041A6  D7E7               	goto	u8880
 12413  0041A8                     l1517:
 12414                           
 12415                           ; BSR set to: 0
 12416                           
 12417                           ; BSR set to: 0
 12418  0041A8  C060  F060         	movff	___llmod@dividend,?___llmod
 12419  0041AC  C061  F061         	movff	___llmod@dividend+1,?___llmod+1
 12420  0041B0  C062  F062         	movff	___llmod@dividend+2,?___llmod+2
 12421  0041B4  C063  F063         	movff	___llmod@dividend+3,?___llmod+3
 12422                           
 12423                           ; BSR set to: 0
 12424  0041B8  0012               	return		;funcret
 12425  0041BA                     __end_of___llmod:
 12426                           	opt stack 0
 12427                           tblptru	equ	0xFF8
 12428                           tblptrh	equ	0xFF7
 12429                           tblptrl	equ	0xFF6
 12430                           tablat	equ	0xFF5
 12431                           prodh	equ	0xFF4
 12432                           prodl	equ	0xFF3
 12433                           intcon	equ	0xFF2
 12434                           intcon3	equ	0xFF0
 12435                           indf0	equ	0xFEF
 12436                           postinc0	equ	0xFEE
 12437                           plusw0	equ	0xFEB
 12438                           fsr0h	equ	0xFEA
 12439                           fsr0l	equ	0xFE9
 12440                           wreg	equ	0xFE8
 12441                           indf1	equ	0xFE7
 12442                           postinc1	equ	0xFE6
 12443                           postdec1	equ	0xFE5
 12444                           plusw1	equ	0xFE3
 12445                           fsr1h	equ	0xFE2
 12446                           fsr1l	equ	0xFE1
 12447                           indf2	equ	0xFDF
 12448                           postinc2	equ	0xFDE
 12449                           postdec2	equ	0xFDD
 12450                           plusw2	equ	0xFDB
 12451                           fsr2h	equ	0xFDA
 12452                           fsr2l	equ	0xFD9
 12453                           status	equ	0xFD8
 12454                           
 12455 ;; *************** function ___lldiv *****************
 12456 ;; Defined at:
 12457 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 12458 ;; Parameters:    Size  Location     Type
 12459 ;;  dividend        4    0[BANK0 ] unsigned long 
 12460 ;;  divisor         4    4[BANK0 ] unsigned long 
 12461 ;; Auto vars:     Size  Location     Type
 12462 ;;  quotient        4    8[BANK0 ] unsigned long 
 12463 ;;  counter         1   12[BANK0 ] unsigned char 
 12464 ;; Return value:  Size  Location     Type
 12465 ;;                  4    0[BANK0 ] unsigned long 
 12466 ;; Registers used:
 12467 ;;		wreg, status,2, status,0
 12468 ;; Tracked objects:
 12469 ;;		On entry : 0/0
 12470 ;;		On exit  : 0/0
 12471 ;;		Unchanged: 0/0
 12472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12473 ;;      Params:         0       8       0       0       0       0       0       0       0
 12474 ;;      Locals:         0       5       0       0       0       0       0       0       0
 12475 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12476 ;;      Totals:         0      13       0       0       0       0       0       0       0
 12477 ;;Total ram usage:       13 bytes
 12478 ;; Hardware stack levels used:    1
 12479 ;; Hardware stack levels required when called:    4
 12480 ;; This function calls:
 12481 ;;		Nothing
 12482 ;; This function is called by:
 12483 ;;		_ultoa
 12484 ;; This function uses a non-reentrant model
 12485 ;;
 12486                           
 12487                           	psect	text43
 12488  003BBA                     __ptext43:
 12489                           	opt stack 0
 12490  003BBA                     ___lldiv:
 12491                           	opt stack 22
 12492                           
 12493                           ; BSR set to: 0
 12494                           ;incstack = 0
 12495  003BBA  0E00               	movlw	0
 12496  003BBC  0100               	movlb	0	; () banked
 12497  003BBE  6F68               	movwf	___lldiv@quotient& (0+255),b
 12498  003BC0  0E00               	movlw	0
 12499  003BC2  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
 12500  003BC4  0E00               	movlw	0
 12501  003BC6  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
 12502  003BC8  0E00               	movlw	0
 12503  003BCA  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
 12504                           
 12505                           ; BSR set to: 0
 12506  003BCC  5164               	movf	___lldiv@divisor& (0+255),w,b
 12507  003BCE  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 12508  003BD0  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 12509  003BD2  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 12510  003BD4  B4D8               	btfsc	status,2,c
 12511  003BD6  D02A               	goto	l1507
 12512                           
 12513                           ; BSR set to: 0
 12514  003BD8  0E01               	movlw	1
 12515  003BDA  6F6C               	movwf	___lldiv@counter& (0+255),b
 12516  003BDC  D006               	goto	l1502
 12517  003BDE                     
 12518                           ; BSR set to: 0
 12519                           
 12520                           ; BSR set to: 0
 12521  003BDE  90D8               	bcf	status,0,c
 12522  003BE0  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 12523  003BE2  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 12524  003BE4  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 12525  003BE6  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 12526  003BE8  2B6C               	incf	___lldiv@counter& (0+255),f,b
 12527  003BEA                     l1502:
 12528                           
 12529                           ; BSR set to: 0
 12530                           
 12531                           ; BSR set to: 0
 12532  003BEA  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 12533  003BEC  D7F8               	goto	l1503
 12534  003BEE                     u8850:
 12535                           
 12536                           ; BSR set to: 0
 12537                           
 12538                           ; BSR set to: 0
 12539                           
 12540                           ; BSR set to: 0
 12541  003BEE  90D8               	bcf	status,0,c
 12542  003BF0  3768               	rlcf	___lldiv@quotient& (0+255),f,b
 12543  003BF2  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 12544  003BF4  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 12545  003BF6  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 12546                           
 12547                           ; BSR set to: 0
 12548  003BF8  5164               	movf	___lldiv@divisor& (0+255),w,b
 12549  003BFA  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 12550  003BFC  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 12551  003BFE  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 12552  003C00  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 12553  003C02  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 12554  003C04  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 12555  003C06  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 12556  003C08  A0D8               	btfss	status,0,c
 12557  003C0A  D009               	goto	l1506
 12558                           
 12559                           ; BSR set to: 0
 12560  003C0C  5164               	movf	___lldiv@divisor& (0+255),w,b
 12561  003C0E  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 12562  003C10  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 12563  003C12  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 12564  003C14  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 12565  003C16  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 12566  003C18  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 12567  003C1A  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 12568                           
 12569                           ; BSR set to: 0
 12570  003C1C  8168               	bsf	___lldiv@quotient& (0+255),0,b
 12571  003C1E                     l1506:
 12572                           
 12573                           ; BSR set to: 0
 12574                           
 12575                           ; BSR set to: 0
 12576  003C1E  90D8               	bcf	status,0,c
 12577  003C20  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 12578  003C22  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 12579  003C24  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 12580  003C26  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 12581                           
 12582                           ; BSR set to: 0
 12583  003C28  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
 12584  003C2A  D7E1               	goto	u8850
 12585  003C2C                     l1507:
 12586                           
 12587                           ; BSR set to: 0
 12588                           
 12589                           ; BSR set to: 0
 12590  003C2C  C068  F060         	movff	___lldiv@quotient,?___lldiv
 12591  003C30  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 12592  003C34  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 12593  003C38  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 12594                           
 12595                           ; BSR set to: 0
 12596  003C3C  0012               	return		;funcret
 12597  003C3E                     __end_of___lldiv:
 12598                           	opt stack 0
 12599                           tblptru	equ	0xFF8
 12600                           tblptrh	equ	0xFF7
 12601                           tblptrl	equ	0xFF6
 12602                           tablat	equ	0xFF5
 12603                           prodh	equ	0xFF4
 12604                           prodl	equ	0xFF3
 12605                           intcon	equ	0xFF2
 12606                           intcon3	equ	0xFF0
 12607                           indf0	equ	0xFEF
 12608                           postinc0	equ	0xFEE
 12609                           plusw0	equ	0xFEB
 12610                           fsr0h	equ	0xFEA
 12611                           fsr0l	equ	0xFE9
 12612                           wreg	equ	0xFE8
 12613                           indf1	equ	0xFE7
 12614                           postinc1	equ	0xFE6
 12615                           postdec1	equ	0xFE5
 12616                           plusw1	equ	0xFE3
 12617                           fsr1h	equ	0xFE2
 12618                           fsr1l	equ	0xFE1
 12619                           indf2	equ	0xFDF
 12620                           postinc2	equ	0xFDE
 12621                           postdec2	equ	0xFDD
 12622                           plusw2	equ	0xFDB
 12623                           fsr2h	equ	0xFDA
 12624                           fsr2l	equ	0xFD9
 12625                           status	equ	0xFD8
 12626                           
 12627 ;; *************** function _ethernetController_updateLinkStatus *****************
 12628 ;; Defined at:
 12629 ;;		line 394 in file "src/enc424j600/ENC424J600.c"
 12630 ;; Parameters:    Size  Location     Type
 12631 ;;  state           2   32[BANK0 ] PTR struct ethernetConne
 12632 ;;		 -> stack(121), 
 12633 ;; Auto vars:     Size  Location     Type
 12634 ;;  temp16          2   35[BANK0 ] unsigned int 
 12635 ;;  temp            1   34[BANK0 ] unsigned char 
 12636 ;; Return value:  Size  Location     Type
 12637 ;;                  1    wreg      void 
 12638 ;; Registers used:
 12639 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12640 ;; Tracked objects:
 12641 ;;		On entry : 0/0
 12642 ;;		On exit  : 0/0
 12643 ;;		Unchanged: 0/0
 12644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12645 ;;      Params:         0       2       0       0       0       0       0       0       0
 12646 ;;      Locals:         0       3       0       0       0       0       0       0       0
 12647 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12648 ;;      Totals:         0       5       0       0       0       0       0       0       0
 12649 ;;Total ram usage:        5 bytes
 12650 ;; Hardware stack levels used:    1
 12651 ;; Hardware stack levels required when called:    8
 12652 ;; This function calls:
 12653 ;;		_enc424j600_readControlRegisterUnbanked
 12654 ;;		_enc424j600_readPHYRegister
 12655 ;; This function is called by:
 12656 ;;		_handleStackBackgroundTasks
 12657 ;; This function uses a non-reentrant model
 12658 ;;
 12659                           
 12660                           	psect	text44
 12661  003AA6                     __ptext44:
 12662                           	opt stack 0
 12663  003AA6                     _ethernetController_updateLinkStatus:
 12664                           	opt stack 21
 12665                           
 12666                           ;ENC424J600.c: 395: uint8_t temp;
 12667                           ;ENC424J600.c: 396: uint16_t temp16;
 12668                           ;ENC424J600.c: 397: enc424j600_readControlRegisterUnbanked(0x1B, &temp);
 12669                           
 12670                           ; BSR set to: 0
 12671                           ;incstack = 0
 12672  003AA6  0E82               	movlw	low ethernetController_updateLinkStatus@temp
 12673  003AA8  0100               	movlb	0	; () banked
 12674  003AAA  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 12675  003AAC  0E00               	movlw	high ethernetController_updateLinkStatus@temp
 12676  003AAE  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 12677  003AB0  0E1B               	movlw	27
 12678  003AB2  EC63  F024         	call	_enc424j600_readControlRegisterUnbanked
 12679                           
 12680                           ;ENC424J600.c: 398: if (temp & 0x01) {
 12681  003AB6  0100               	movlb	0	; () banked
 12682  003AB8  A182               	btfss	ethernetController_updateLinkStatus@temp& (0+255),0,b
 12683  003ABA  D006               	goto	l195
 12684                           
 12685                           ; BSR set to: 0
 12686                           ;ENC424J600.c: 399: state->link = LINK_ESTABLISHED;
 12687  003ABC  C080  FFD9         	movff	ethernetController_updateLinkStatus@state,fsr2l
 12688  003AC0  C081  FFDA         	movff	ethernetController_updateLinkStatus@state+1,fsr2h
 12689  003AC4  0E01               	movlw	1
 12690  003AC6  D005               	goto	L3
 12691  003AC8                     l195:
 12692                           
 12693                           ; BSR set to: 0
 12694                           ;ENC424J600.c: 401: state->link = NO_LINK;
 12695                           
 12696                           ; BSR set to: 0
 12697  003AC8  C080  FFD9         	movff	ethernetController_updateLinkStatus@state,fsr2l
 12698  003ACC  C081  FFDA         	movff	ethernetController_updateLinkStatus@state+1,fsr2h
 12699  003AD0  0E00               	movlw	0
 12700  003AD2                     L3:
 12701  003AD2  6EDF               	movwf	indf2,c
 12702                           
 12703                           ; BSR set to: 0
 12704                           ;ENC424J600.c: 402: }
 12705                           ;ENC424J600.c: 404: enc424j600_readPHYRegister(0x1F, &temp16);
 12706                           
 12707                           ; BSR set to: 0
 12708  003AD4  0E83               	movlw	low ethernetController_updateLinkStatus@temp16
 12709  003AD6  6F6E               	movwf	enc424j600_readPHYRegister@data& (0+255),b
 12710  003AD8  0E00               	movlw	high ethernetController_updateLinkStatus@temp16
 12711  003ADA  6F6F               	movwf	(enc424j600_readPHYRegister@data+1)& (0+255),b
 12712  003ADC  0E1F               	movlw	31
 12713  003ADE  EC91  F015         	call	_enc424j600_readPHYRegister
 12714                           
 12715                           ;ENC424J600.c: 406: if (temp16 & (1 << 3)) {
 12716  003AE2  0100               	movlb	0	; () banked
 12717  003AE4  A783               	btfss	ethernetController_updateLinkStatus@temp16& (0+255),3,b
 12718  003AE6  D008               	goto	l197
 12719                           
 12720                           ; BSR set to: 0
 12721                           ;ENC424J600.c: 407: state->speed = HUNDRED_MBIT;
 12722  003AE8  EE20 F001          	lfsr	2,1
 12723  003AEC  5180               	movf	ethernetController_updateLinkStatus@state& (0+255),w,b
 12724  003AEE  26D9               	addwf	fsr2l,f,c
 12725  003AF0  5181               	movf	(ethernetController_updateLinkStatus@state+1)& (0+255),w,b
 12726  003AF2  22DA               	addwfc	fsr2h,f,c
 12727  003AF4  0E01               	movlw	1
 12728  003AF6  D007               	goto	L4
 12729  003AF8                     l197:
 12730                           
 12731                           ; BSR set to: 0
 12732                           ;ENC424J600.c: 409: state->speed = TEN_MBIT;
 12733                           
 12734                           ; BSR set to: 0
 12735  003AF8  EE20 F001          	lfsr	2,1
 12736  003AFC  5180               	movf	ethernetController_updateLinkStatus@state& (0+255),w,b
 12737  003AFE  26D9               	addwf	fsr2l,f,c
 12738  003B00  5181               	movf	(ethernetController_updateLinkStatus@state+1)& (0+255),w,b
 12739  003B02  22DA               	addwfc	fsr2h,f,c
 12740  003B04  0E00               	movlw	0
 12741  003B06                     L4:
 12742  003B06  6EDF               	movwf	indf2,c
 12743                           
 12744                           ; BSR set to: 0
 12745                           ;ENC424J600.c: 410: }
 12746                           ;ENC424J600.c: 412: if (temp16 & (1 << 4)) {
 12747                           
 12748                           ; BSR set to: 0
 12749  003B08  A983               	btfss	ethernetController_updateLinkStatus@temp16& (0+255),4,b
 12750  003B0A  D009               	goto	l199
 12751                           
 12752                           ; BSR set to: 0
 12753                           ;ENC424J600.c: 413: state->duplex = FULL_DUPLEX;
 12754  003B0C  EE20 F002          	lfsr	2,2
 12755  003B10  5180               	movf	ethernetController_updateLinkStatus@state& (0+255),w,b
 12756  003B12  26D9               	addwf	fsr2l,f,c
 12757  003B14  5181               	movf	(ethernetController_updateLinkStatus@state+1)& (0+255),w,b
 12758  003B16  22DA               	addwfc	fsr2h,f,c
 12759  003B18  0E01               	movlw	1
 12760  003B1A  6EDF               	movwf	indf2,c
 12761                           
 12762                           ;ENC424J600.c: 414: } else {
 12763  003B1C  0012               	return	
 12764  003B1E                     l199:
 12765                           
 12766                           ; BSR set to: 0
 12767                           ;ENC424J600.c: 415: state->duplex = HALF_DUPLEX;
 12768                           
 12769                           ; BSR set to: 0
 12770  003B1E  EE20 F002          	lfsr	2,2
 12771  003B22  5180               	movf	ethernetController_updateLinkStatus@state& (0+255),w,b
 12772  003B24  26D9               	addwf	fsr2l,f,c
 12773  003B26  5181               	movf	(ethernetController_updateLinkStatus@state+1)& (0+255),w,b
 12774  003B28  22DA               	addwfc	fsr2h,f,c
 12775  003B2A  0E00               	movlw	0
 12776  003B2C  6EDF               	movwf	indf2,c
 12777  003B2E  0012               	return	
 12778  003B30                     __end_of_ethernetController_updateLinkStatus:
 12779                           	opt stack 0
 12780                           tblptru	equ	0xFF8
 12781                           tblptrh	equ	0xFF7
 12782                           tblptrl	equ	0xFF6
 12783                           tablat	equ	0xFF5
 12784                           prodh	equ	0xFF4
 12785                           prodl	equ	0xFF3
 12786                           intcon	equ	0xFF2
 12787                           intcon3	equ	0xFF0
 12788                           indf0	equ	0xFEF
 12789                           postinc0	equ	0xFEE
 12790                           plusw0	equ	0xFEB
 12791                           fsr0h	equ	0xFEA
 12792                           fsr0l	equ	0xFE9
 12793                           wreg	equ	0xFE8
 12794                           indf1	equ	0xFE7
 12795                           postinc1	equ	0xFE6
 12796                           postdec1	equ	0xFE5
 12797                           plusw1	equ	0xFE3
 12798                           fsr1h	equ	0xFE2
 12799                           fsr1l	equ	0xFE1
 12800                           indf2	equ	0xFDF
 12801                           postinc2	equ	0xFDE
 12802                           postdec2	equ	0xFDD
 12803                           plusw2	equ	0xFDB
 12804                           fsr2h	equ	0xFDA
 12805                           fsr2l	equ	0xFD9
 12806                           status	equ	0xFD8
 12807                           
 12808 ;; *************** function _enc424j600_readPHYRegister *****************
 12809 ;; Defined at:
 12810 ;;		line 538 in file "src/enc424j600/ENC424J600.c"
 12811 ;; Parameters:    Size  Location     Type
 12812 ;;  addr            1    wreg     unsigned char 
 12813 ;;  data            2   14[BANK0 ] PTR unsigned int 
 12814 ;;		 -> ethernetController_updateLinkStatus@temp16(2), 
 12815 ;; Auto vars:     Size  Location     Type
 12816 ;;  addr            1   22[BANK0 ] unsigned char 
 12817 ;;  timeoutCount    4   25[BANK0 ] unsigned long 
 12818 ;;  temp            1   31[BANK0 ] unsigned char 
 12819 ;;  highByte        1   30[BANK0 ] unsigned char 
 12820 ;;  lowByte         1   29[BANK0 ] unsigned char 
 12821 ;;  unusedBits      1   24[BANK0 ] unsigned char 
 12822 ;;  PHYaddress      1   23[BANK0 ] unsigned char 
 12823 ;; Return value:  Size  Location     Type
 12824 ;;                  1    wreg      void 
 12825 ;; Registers used:
 12826 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12827 ;; Tracked objects:
 12828 ;;		On entry : 0/0
 12829 ;;		On exit  : 0/0
 12830 ;;		Unchanged: 0/0
 12831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12832 ;;      Params:         0       2       0       0       0       0       0       0       0
 12833 ;;      Locals:         0      10       0       0       0       0       0       0       0
 12834 ;;      Temps:          0       6       0       0       0       0       0       0       0
 12835 ;;      Totals:         0      18       0       0       0       0       0       0       0
 12836 ;;Total ram usage:       18 bytes
 12837 ;; Hardware stack levels used:    1
 12838 ;; Hardware stack levels required when called:    7
 12839 ;; This function calls:
 12840 ;;		_enc424j600_readControlRegisterUnbanked
 12841 ;;		_enc424j600_writeControlRegisterUnbanked
 12842 ;; This function is called by:
 12843 ;;		_ethernetController_updateLinkStatus
 12844 ;; This function uses a non-reentrant model
 12845 ;;
 12846                           
 12847                           	psect	text45
 12848  002B22                     __ptext45:
 12849                           	opt stack 0
 12850  002B22                     _enc424j600_readPHYRegister:
 12851                           	opt stack 21
 12852                           
 12853                           ; BSR set to: 0
 12854                           ;incstack = 0
 12855                           ;enc424j600_readPHYRegister@addr stored from wreg
 12856  002B22  0100               	movlb	0	; () banked
 12857  002B24  6F76               	movwf	enc424j600_readPHYRegister@addr& (0+255),b
 12858                           
 12859                           ;ENC424J600.c: 540: uint8_t PHYaddress = addr & 0x1F;
 12860  002B26  0100               	movlb	0	; () banked
 12861  002B28  5176               	movf	enc424j600_readPHYRegister@addr& (0+255),w,b
 12862  002B2A  0B1F               	andlw	31
 12863  002B2C  6F77               	movwf	enc424j600_readPHYRegister@PHYaddress& (0+255),b
 12864                           
 12865                           ; BSR set to: 0
 12866                           ;ENC424J600.c: 541: uint8_t unusedBits = 0x01;
 12867  002B2E  0E01               	movlw	1
 12868  002B30  6F78               	movwf	enc424j600_readPHYRegister@unusedBits& (0+255),b
 12869                           
 12870                           ; BSR set to: 0
 12871                           ;ENC424J600.c: 542: uint8_t temp;
 12872                           ;ENC424J600.c: 543: uint8_t lowByte;
 12873                           ;ENC424J600.c: 544: uint8_t highByte;
 12874                           ;ENC424J600.c: 545: uint32_t timeoutCounter = 0;
 12875  002B32  0E00               	movlw	0
 12876  002B34  6F79               	movwf	enc424j600_readPHYRegister@timeoutCounter& (0+255),b
 12877  002B36  0E00               	movlw	0
 12878  002B38  6F7A               	movwf	(enc424j600_readPHYRegister@timeoutCounter+1)& (0+255),b
 12879  002B3A  0E00               	movlw	0
 12880  002B3C  6F7B               	movwf	(enc424j600_readPHYRegister@timeoutCounter+2)& (0+255),b
 12881  002B3E  0E00               	movlw	0
 12882  002B40  6F7C               	movwf	(enc424j600_readPHYRegister@timeoutCounter+3)& (0+255),b
 12883                           
 12884                           ; BSR set to: 0
 12885                           ;ENC424J600.c: 547: enc424j600_writeControlRegisterUnbanked(0x14 + 0x40, &PHYaddress);
 12886  002B42  0E77               	movlw	low enc424j600_readPHYRegister@PHYaddress
 12887  002B44  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 12888  002B46  0E00               	movlw	high enc424j600_readPHYRegister@PHYaddress
 12889  002B48  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 12890  002B4A  0E54               	movlw	84
 12891  002B4C  EC48  F024         	call	_enc424j600_writeControlRegisterUnbanked
 12892                           
 12893                           ;ENC424J600.c: 548: enc424j600_writeControlRegisterUnbanked(0x15 + 0x40, &unusedBits);
 12894  002B50  0E78               	movlw	low enc424j600_readPHYRegister@unusedBits
 12895  002B52  0100               	movlb	0	; () banked
 12896  002B54  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 12897  002B56  0E00               	movlw	high enc424j600_readPHYRegister@unusedBits
 12898  002B58  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 12899  002B5A  0E55               	movlw	85
 12900  002B5C  EC48  F024         	call	_enc424j600_writeControlRegisterUnbanked
 12901                           
 12902                           ;ENC424J600.c: 551: enc424j600_readControlRegisterUnbanked(0x12 + 0x40, &temp);
 12903  002B60  0E7F               	movlw	low enc424j600_readPHYRegister@temp
 12904  002B62  0100               	movlb	0	; () banked
 12905  002B64  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 12906  002B66  0E00               	movlw	high enc424j600_readPHYRegister@temp
 12907  002B68  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 12908  002B6A  0E52               	movlw	82
 12909  002B6C  EC63  F024         	call	_enc424j600_readControlRegisterUnbanked
 12910                           
 12911                           ;ENC424J600.c: 552: temp |= 0x01;
 12912  002B70  0100               	movlb	0	; () banked
 12913  002B72  817F               	bsf	enc424j600_readPHYRegister@temp& (0+255),0,b
 12914                           
 12915                           ; BSR set to: 0
 12916                           ;ENC424J600.c: 553: enc424j600_writeControlRegisterUnbanked(0x12 + 0x40, &temp);
 12917  002B74  0E7F               	movlw	low enc424j600_readPHYRegister@temp
 12918  002B76  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 12919  002B78  0E00               	movlw	high enc424j600_readPHYRegister@temp
 12920  002B7A  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 12921  002B7C  0E52               	movlw	82
 12922  002B7E  EC48  F024         	call	_enc424j600_writeControlRegisterUnbanked
 12923                           
 12924                           ;ENC424J600.c: 555: _delay((unsigned long)((26)*(32000000UL/4000000.0)));
 12925  002B82  0E45               	movlw	69
 12926  002B84                     u11787:
 12927  002B84  2EE8               	decfsz	wreg,f,c
 12928  002B86  D7FE               	bra	u11787
 12929  002B88  F000               	nop	
 12930  002B8A                     
 12931                           ;ENC424J600.c: 558: enc424j600_readControlRegisterUnbanked(0x0A + 0x60, &temp);
 12932  002B8A  0E7F               	movlw	low enc424j600_readPHYRegister@temp
 12933  002B8C  0100               	movlb	0	; () banked
 12934  002B8E  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 12935  002B90  0E00               	movlw	high enc424j600_readPHYRegister@temp
 12936  002B92  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 12937  002B94  0E6A               	movlw	106
 12938  002B96  EC63  F024         	call	_enc424j600_readControlRegisterUnbanked
 12939                           
 12940                           ;ENC424J600.c: 559: timeoutCounter++;
 12941  002B9A  0E01               	movlw	1
 12942  002B9C  0100               	movlb	0	; () banked
 12943  002B9E  2779               	addwf	enc424j600_readPHYRegister@timeoutCounter& (0+255),f,b
 12944  002BA0  0E00               	movlw	0
 12945  002BA2  237A               	addwfc	(enc424j600_readPHYRegister@timeoutCounter+1)& (0+255),f,b
 12946  002BA4  237B               	addwfc	(enc424j600_readPHYRegister@timeoutCounter+2)& (0+255),f,b
 12947  002BA6  237C               	addwfc	(enc424j600_readPHYRegister@timeoutCounter+3)& (0+255),f,b
 12948                           
 12949                           ; BSR set to: 0
 12950                           ;ENC424J600.c: 560: } while ((temp & 0x01) && (timeoutCounter < 0xfff));
 12951  002BA8  A17F               	btfss	enc424j600_readPHYRegister@temp& (0+255),0,b
 12952  002BAA  D008               	goto	u10660
 12953                           
 12954                           ; BSR set to: 0
 12955  002BAC  517C               	movf	(enc424j600_readPHYRegister@timeoutCounter+3)& (0+255),w,b
 12956  002BAE  117B               	iorwf	(enc424j600_readPHYRegister@timeoutCounter+2)& (0+255),w,b
 12957  002BB0  E105               	bnz	l9051
 12958  002BB2  2979               	incf	enc424j600_readPHYRegister@timeoutCounter& (0+255),w,b
 12959  002BB4  0E0F               	movlw	15
 12960  002BB6  597A               	subwfb	(enc424j600_readPHYRegister@timeoutCounter+1)& (0+255),w,b
 12961  002BB8  A0D8               	btfss	status,0,c
 12962  002BBA  D7E7               	goto	l258
 12963  002BBC                     u10660:
 12964  002BBC                     l9051:
 12965                           
 12966                           ; BSR set to: 0
 12967                           ;ENC424J600.c: 561: if (timeoutCounter >= 0xfff)
 12968  002BBC  517C               	movf	(enc424j600_readPHYRegister@timeoutCounter+3)& (0+255),w,b
 12969  002BBE  117B               	iorwf	(enc424j600_readPHYRegister@timeoutCounter+2)& (0+255),w,b
 12970  002BC0  E140               	bnz	l263
 12971  002BC2  2979               	incf	enc424j600_readPHYRegister@timeoutCounter& (0+255),w,b
 12972  002BC4  0E0F               	movlw	15
 12973  002BC6  597A               	subwfb	(enc424j600_readPHYRegister@timeoutCounter+1)& (0+255),w,b
 12974  002BC8  B0D8               	btfsc	status,0,c
 12975  002BCA  0012               	return	
 12976                           
 12977                           ; BSR set to: 0
 12978                           ;ENC424J600.c: 565: enc424j600_readControlRegisterUnbanked(0x12 + 0x40, &temp);
 12979                           
 12980                           ; BSR set to: 0
 12981                           
 12982                           ; BSR set to: 0
 12983                           ;ENC424J600.c: 562: return;
 12984  002BCC  0E7F               	movlw	low enc424j600_readPHYRegister@temp
 12985  002BCE  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 12986  002BD0  0E00               	movlw	high enc424j600_readPHYRegister@temp
 12987  002BD2  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 12988  002BD4  0E52               	movlw	82
 12989  002BD6  EC63  F024         	call	_enc424j600_readControlRegisterUnbanked
 12990                           
 12991                           ;ENC424J600.c: 566: temp &= ~0x01;
 12992  002BDA  0100               	movlb	0	; () banked
 12993  002BDC  917F               	bcf	enc424j600_readPHYRegister@temp& (0+255),0,b
 12994                           
 12995                           ; BSR set to: 0
 12996                           ;ENC424J600.c: 567: enc424j600_writeControlRegisterUnbanked(0x12 + 0x40, &temp);
 12997  002BDE  0E7F               	movlw	low enc424j600_readPHYRegister@temp
 12998  002BE0  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 12999  002BE2  0E00               	movlw	high enc424j600_readPHYRegister@temp
 13000  002BE4  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 13001  002BE6  0E52               	movlw	82
 13002  002BE8  EC48  F024         	call	_enc424j600_writeControlRegisterUnbanked
 13003                           
 13004                           ;ENC424J600.c: 570: enc424j600_readControlRegisterUnbanked(0x08 + 0x60, &lowByte);
 13005  002BEC  0E7D               	movlw	low enc424j600_readPHYRegister@lowByte
 13006  002BEE  0100               	movlb	0	; () banked
 13007  002BF0  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 13008  002BF2  0E00               	movlw	high enc424j600_readPHYRegister@lowByte
 13009  002BF4  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 13010  002BF6  0E68               	movlw	104
 13011  002BF8  EC63  F024         	call	_enc424j600_readControlRegisterUnbanked
 13012                           
 13013                           ;ENC424J600.c: 571: enc424j600_readControlRegisterUnbanked(0x09 + 0x60, &highByte);
 13014  002BFC  0E7E               	movlw	low enc424j600_readPHYRegister@highByte
 13015  002BFE  0100               	movlb	0	; () banked
 13016  002C00  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 13017  002C02  0E00               	movlw	high enc424j600_readPHYRegister@highByte
 13018  002C04  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 13019  002C06  0E69               	movlw	105
 13020  002C08  EC63  F024         	call	_enc424j600_readControlRegisterUnbanked
 13021                           
 13022                           ;ENC424J600.c: 572: *data = (lowByte | ((highByte << 8)&0xff00));
 13023  002C0C  0E00               	movlw	0
 13024  002C0E  0100               	movlb	0	; () banked
 13025  002C10  6F70               	movwf	??_enc424j600_readPHYRegister& (0+255),b
 13026  002C12  0EFF               	movlw	255
 13027  002C14  6F71               	movwf	(??_enc424j600_readPHYRegister+1)& (0+255),b
 13028  002C16  517E               	movf	enc424j600_readPHYRegister@highByte& (0+255),w,b
 13029  002C18  6F73               	movwf	(??_enc424j600_readPHYRegister+3)& (0+255),b
 13030  002C1A  6B72               	clrf	(??_enc424j600_readPHYRegister+2)& (0+255),b
 13031  002C1C  5170               	movf	??_enc424j600_readPHYRegister& (0+255),w,b
 13032  002C1E  1772               	andwf	(??_enc424j600_readPHYRegister+2)& (0+255),f,b
 13033  002C20  5171               	movf	(??_enc424j600_readPHYRegister+1)& (0+255),w,b
 13034  002C22  1773               	andwf	(??_enc424j600_readPHYRegister+3)& (0+255),f,b
 13035  002C24  517D               	movf	enc424j600_readPHYRegister@lowByte& (0+255),w,b
 13036  002C26  6F74               	movwf	(??_enc424j600_readPHYRegister+4)& (0+255),b
 13037  002C28  6B75               	clrf	(??_enc424j600_readPHYRegister+5)& (0+255),b
 13038  002C2A  5172               	movf	(??_enc424j600_readPHYRegister+2)& (0+255),w,b
 13039  002C2C  1374               	iorwf	(??_enc424j600_readPHYRegister+4)& (0+255),f,b
 13040  002C2E  5173               	movf	(??_enc424j600_readPHYRegister+3)& (0+255),w,b
 13041  002C30  1375               	iorwf	(??_enc424j600_readPHYRegister+5)& (0+255),f,b
 13042  002C32  C06E  FFD9         	movff	enc424j600_readPHYRegister@data,fsr2l
 13043  002C36  C06F  FFDA         	movff	enc424j600_readPHYRegister@data+1,fsr2h
 13044  002C3A  C074  FFDE         	movff	??_enc424j600_readPHYRegister+4,postinc2
 13045  002C3E  C075  FFDD         	movff	??_enc424j600_readPHYRegister+5,postdec2
 13046  002C42                     l263:
 13047                           
 13048                           ; BSR set to: 0
 13049  002C42  0012               	return		;funcret
 13050  002C44                     __end_of_enc424j600_readPHYRegister:
 13051                           	opt stack 0
 13052                           tblptru	equ	0xFF8
 13053                           tblptrh	equ	0xFF7
 13054                           tblptrl	equ	0xFF6
 13055                           tablat	equ	0xFF5
 13056                           prodh	equ	0xFF4
 13057                           prodl	equ	0xFF3
 13058                           intcon	equ	0xFF2
 13059                           intcon3	equ	0xFF0
 13060                           indf0	equ	0xFEF
 13061                           postinc0	equ	0xFEE
 13062                           plusw0	equ	0xFEB
 13063                           fsr0h	equ	0xFEA
 13064                           fsr0l	equ	0xFE9
 13065                           wreg	equ	0xFE8
 13066                           indf1	equ	0xFE7
 13067                           postinc1	equ	0xFE6
 13068                           postdec1	equ	0xFE5
 13069                           plusw1	equ	0xFE3
 13070                           fsr1h	equ	0xFE2
 13071                           fsr1l	equ	0xFE1
 13072                           indf2	equ	0xFDF
 13073                           postinc2	equ	0xFDE
 13074                           postdec2	equ	0xFDD
 13075                           plusw2	equ	0xFDB
 13076                           fsr2h	equ	0xFDA
 13077                           fsr2l	equ	0xFD9
 13078                           status	equ	0xFD8
 13079                           
 13080 ;; *************** function _ethernetController_setLEDConfig *****************
 13081 ;; Defined at:
 13082 ;;		line 419 in file "src/enc424j600/ENC424J600.c"
 13083 ;; Parameters:    Size  Location     Type
 13084 ;;  LED             1    wreg     enum E5569
 13085 ;;  conf            1   14[BANK0 ] enum E5573
 13086 ;; Auto vars:     Size  Location     Type
 13087 ;;  LED             1   15[BANK0 ] enum E5569
 13088 ;;  data            1   16[BANK0 ] unsigned char 
 13089 ;; Return value:  Size  Location     Type
 13090 ;;                  1    wreg      void 
 13091 ;; Registers used:
 13092 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13093 ;; Tracked objects:
 13094 ;;		On entry : 0/0
 13095 ;;		On exit  : 0/0
 13096 ;;		Unchanged: 0/0
 13097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13098 ;;      Params:         0       1       0       0       0       0       0       0       0
 13099 ;;      Locals:         0       2       0       0       0       0       0       0       0
 13100 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13101 ;;      Totals:         0       3       0       0       0       0       0       0       0
 13102 ;;Total ram usage:        3 bytes
 13103 ;; Hardware stack levels used:    1
 13104 ;; Hardware stack levels required when called:    7
 13105 ;; This function calls:
 13106 ;;		_enc424j600_readControlRegisterUnbanked
 13107 ;;		_enc424j600_writeControlRegisterUnbanked
 13108 ;; This function is called by:
 13109 ;;		_handleStackBackgroundTasks
 13110 ;;		_main
 13111 ;; This function uses a non-reentrant model
 13112 ;;
 13113                           
 13114                           	psect	text46
 13115  003A18                     __ptext46:
 13116                           	opt stack 0
 13117  003A18                     _ethernetController_setLEDConfig:
 13118                           	opt stack 22
 13119                           
 13120                           ; BSR set to: 0
 13121                           ;incstack = 0
 13122                           ;ethernetController_setLEDConfig@LED stored from wreg
 13123  003A18  0100               	movlb	0	; () banked
 13124  003A1A  6F6F               	movwf	ethernetController_setLEDConfig@LED& (0+255),b
 13125                           
 13126                           ;ENC424J600.c: 420: uint8_t data;
 13127                           ;ENC424J600.c: 421: enc424j600_readControlRegisterUnbanked(0x15 + 0x60, &data);
 13128  003A1C  0E70               	movlw	low ethernetController_setLEDConfig@data
 13129  003A1E  0100               	movlb	0	; () banked
 13130  003A20  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 13131  003A22  0E00               	movlw	high ethernetController_setLEDConfig@data
 13132  003A24  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 13133  003A26  0E75               	movlw	117
 13134  003A28  EC63  F024         	call	_enc424j600_readControlRegisterUnbanked
 13135                           
 13136                           ;ENC424J600.c: 422: if (LED == LEDB) {
 13137  003A2C  0100               	movlb	0	; () banked
 13138  003A2E  056F               	decf	ethernetController_setLEDConfig@LED& (0+255),w,b
 13139  003A30  B4D8               	btfsc	status,2,c
 13140  003A32  D00B               	goto	l205
 13141  003A34  D015               	goto	l204
 13142  003A36                     
 13143                           ; BSR set to: 0
 13144                           ;ENC424J600.c: 427: data &= ~0x0f;
 13145                           
 13146                           ; BSR set to: 0
 13147                           
 13148                           ;ENC424J600.c: 426: case LED_OFF:
 13149                           
 13150                           ; BSR set to: 0
 13151  003A36  0EF0               	movlw	240
 13152  003A38  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 13153                           
 13154                           ; BSR set to: 0
 13155                           ;ENC424J600.c: 428: data |= 0x01;
 13156  003A3A  8170               	bsf	ethernetController_setLEDConfig@data& (0+255),0,b
 13157                           
 13158                           ;ENC424J600.c: 429: break;
 13159  003A3C  D02C               	goto	l216
 13160  003A3E                     
 13161                           ; BSR set to: 0
 13162                           ;ENC424J600.c: 431: data &= ~0x0f;
 13163                           
 13164                           ; BSR set to: 0
 13165  003A3E  0EF0               	movlw	240
 13166  003A40  D018               	goto	L5
 13167  003A42                     
 13168                           ; BSR set to: 0
 13169                           ;ENC424J600.c: 434: data &= ~0x0f;
 13170                           
 13171                           ; BSR set to: 0
 13172  003A42  0EF0               	movlw	240
 13173  003A44  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 13174                           
 13175                           ;ENC424J600.c: 435: data |= 0x06;
 13176  003A46  0E06               	movlw	6
 13177  003A48  D019               	goto	L6
 13178  003A4A                     l205:
 13179                           
 13180                           ; BSR set to: 0
 13181                           
 13182                           ; BSR set to: 0
 13183  003A4A  516E               	movf	ethernetController_setLEDConfig@conf& (0+255),w,b
 13184                           
 13185                           ; Switch size 1, requested type "space"
 13186                           ; Number of cases is 3, Range of values is 0 to 2
 13187                           ; switch strategies available:
 13188                           ; Name         Instructions Cycles
 13189                           ; simple_byte           10     6 (average)
 13190                           ;	Chosen strategy is simple_byte
 13191  003A4C  0A00               	xorlw	0	; case 0
 13192  003A4E  B4D8               	btfsc	status,2,c
 13193  003A50  D7F6               	goto	l209
 13194  003A52  0A01               	xorlw	1	; case 1
 13195  003A54  B4D8               	btfsc	status,2,c
 13196  003A56  D7EF               	goto	l206
 13197  003A58  0A03               	xorlw	3	; case 2
 13198  003A5A  B4D8               	btfsc	status,2,c
 13199  003A5C  D7F2               	goto	l210
 13200  003A5E  D7EB               	goto	l206
 13201  003A60                     l204:
 13202                           
 13203                           ; BSR set to: 0
 13204                           
 13205                           ; BSR set to: 0
 13206  003A60  516F               	movf	ethernetController_setLEDConfig@LED& (0+255),w,b
 13207  003A62  B4D8               	btfsc	status,2,c
 13208  003A64  D00D               	goto	l213
 13209  003A66  D017               	goto	l216
 13210  003A68                     
 13211                           ; BSR set to: 0
 13212                           ;ENC424J600.c: 442: data &= ~(0x0f << 4);
 13213                           
 13214                           ; BSR set to: 0
 13215                           
 13216                           ;ENC424J600.c: 441: case LED_OFF:
 13217                           
 13218                           ; BSR set to: 0
 13219  003A68  0E0F               	movlw	15
 13220  003A6A  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 13221                           
 13222                           ; BSR set to: 0
 13223                           ;ENC424J600.c: 443: data |= (0x01 << 4);
 13224  003A6C  8970               	bsf	ethernetController_setLEDConfig@data& (0+255),4,b
 13225                           
 13226                           ;ENC424J600.c: 444: break;
 13227  003A6E  D013               	goto	l216
 13228  003A70                     
 13229                           ; BSR set to: 0
 13230                           ;ENC424J600.c: 446: data &= ~(0x0f << 4);
 13231                           
 13232                           ; BSR set to: 0
 13233  003A70  0E0F               	movlw	15
 13234  003A72                     L5:
 13235  003A72  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 13236                           
 13237                           ;ENC424J600.c: 447: break;
 13238  003A74  D010               	goto	l216
 13239  003A76                     
 13240                           ; BSR set to: 0
 13241                           ;ENC424J600.c: 449: data &= ~(0x0f << 4);
 13242                           
 13243                           ; BSR set to: 0
 13244  003A76  0E0F               	movlw	15
 13245  003A78  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 13246                           
 13247                           ;ENC424J600.c: 450: data |= (0x06 << 4);
 13248  003A7A  0E60               	movlw	96
 13249  003A7C                     L6:
 13250  003A7C  1370               	iorwf	ethernetController_setLEDConfig@data& (0+255),f,b
 13251                           
 13252                           ; BSR set to: 0
 13253                           ;ENC424J600.c: 452: }
 13254                           
 13255                           ;ENC424J600.c: 451: break;
 13256  003A7E  D00B               	goto	l216
 13257  003A80                     l213:
 13258                           
 13259                           ; BSR set to: 0
 13260                           
 13261                           ; BSR set to: 0
 13262  003A80  516E               	movf	ethernetController_setLEDConfig@conf& (0+255),w,b
 13263                           
 13264                           ; Switch size 1, requested type "space"
 13265                           ; Number of cases is 3, Range of values is 0 to 2
 13266                           ; switch strategies available:
 13267                           ; Name         Instructions Cycles
 13268                           ; simple_byte           10     6 (average)
 13269                           ;	Chosen strategy is simple_byte
 13270  003A82  0A00               	xorlw	0	; case 0
 13271  003A84  B4D8               	btfsc	status,2,c
 13272  003A86  D7F4               	goto	l217
 13273  003A88  0A01               	xorlw	1	; case 1
 13274  003A8A  B4D8               	btfsc	status,2,c
 13275  003A8C  D7ED               	goto	l214
 13276  003A8E  0A03               	xorlw	3	; case 2
 13277  003A90  B4D8               	btfsc	status,2,c
 13278  003A92  D7F1               	goto	l218
 13279  003A94  D7E9               	goto	l214
 13280  003A96                     l216:
 13281                           
 13282                           ; BSR set to: 0
 13283                           ;ENC424J600.c: 453: }
 13284                           ;ENC424J600.c: 454: enc424j600_writeControlRegisterUnbanked(0x15 + 0x60, &data);
 13285                           
 13286                           ; BSR set to: 0
 13287                           
 13288                           ; BSR set to: 0
 13289                           
 13290                           ; BSR set to: 0
 13291  003A96  0E70               	movlw	low ethernetController_setLEDConfig@data
 13292  003A98  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 13293  003A9A  0E00               	movlw	high ethernetController_setLEDConfig@data
 13294  003A9C  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 13295  003A9E  0E75               	movlw	117
 13296  003AA0  EC48  F024         	call	_enc424j600_writeControlRegisterUnbanked
 13297  003AA4  0012               	return		;funcret
 13298  003AA6                     __end_of_ethernetController_setLEDConfig:
 13299                           	opt stack 0
 13300                           tblptru	equ	0xFF8
 13301                           tblptrh	equ	0xFF7
 13302                           tblptrl	equ	0xFF6
 13303                           tablat	equ	0xFF5
 13304                           prodh	equ	0xFF4
 13305                           prodl	equ	0xFF3
 13306                           intcon	equ	0xFF2
 13307                           intcon3	equ	0xFF0
 13308                           indf0	equ	0xFEF
 13309                           postinc0	equ	0xFEE
 13310                           plusw0	equ	0xFEB
 13311                           fsr0h	equ	0xFEA
 13312                           fsr0l	equ	0xFE9
 13313                           wreg	equ	0xFE8
 13314                           indf1	equ	0xFE7
 13315                           postinc1	equ	0xFE6
 13316                           postdec1	equ	0xFE5
 13317                           plusw1	equ	0xFE3
 13318                           fsr1h	equ	0xFE2
 13319                           fsr1l	equ	0xFE1
 13320                           indf2	equ	0xFDF
 13321                           postinc2	equ	0xFDE
 13322                           postdec2	equ	0xFDD
 13323                           plusw2	equ	0xFDB
 13324                           fsr2h	equ	0xFDA
 13325                           fsr2l	equ	0xFD9
 13326                           status	equ	0xFD8
 13327                           
 13328 ;; *************** function _ethernetController_pollInterruptFlags *****************
 13329 ;; Defined at:
 13330 ;;		line 312 in file "src/enc424j600/ENC424J600.c"
 13331 ;; Parameters:    Size  Location     Type
 13332 ;;		None
 13333 ;; Auto vars:     Size  Location     Type
 13334 ;;  reg             2   32[BANK0 ] unsigned int 
 13335 ;;  flags           2   30[BANK0 ] struct interruptFlags
 13336 ;; Return value:  Size  Location     Type
 13337 ;;                  2   24[BANK0 ] struct interruptFlags
 13338 ;; Registers used:
 13339 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13340 ;; Tracked objects:
 13341 ;;		On entry : 0/0
 13342 ;;		On exit  : 0/0
 13343 ;;		Unchanged: 0/0
 13344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13345 ;;      Params:         0       2       0       0       0       0       0       0       0
 13346 ;;      Locals:         0       4       0       0       0       0       0       0       0
 13347 ;;      Temps:          0       4       0       0       0       0       0       0       0
 13348 ;;      Totals:         0      10       0       0       0       0       0       0       0
 13349 ;;Total ram usage:       10 bytes
 13350 ;; Hardware stack levels used:    1
 13351 ;; Hardware stack levels required when called:    8
 13352 ;; This function calls:
 13353 ;;		_enc424j600_getInterruptFlags
 13354 ;; This function is called by:
 13355 ;;		_handleStackBackgroundTasks
 13356 ;; This function uses a non-reentrant model
 13357 ;;
 13358                           
 13359                           	psect	text47
 13360  00289C                     __ptext47:
 13361                           	opt stack 0
 13362  00289C                     _ethernetController_pollInterruptFlags:
 13363                           	opt stack 21
 13364                           
 13365                           ;ENC424J600.c: 313: interruptFlags_t flags;
 13366                           ;ENC424J600.c: 314: uint16_t reg = enc424j600_getInterruptFlags();
 13367                           
 13368                           ;incstack = 0
 13369  00289C  ECE6  F022         	call	_enc424j600_getInterruptFlags	;wreg free
 13370  0028A0  C06E  F080         	movff	?_enc424j600_getInterruptFlags,ethernetController_pollInterruptFlags@reg
 13371  0028A4  C06F  F081         	movff	?_enc424j600_getInterruptFlags+1,ethernetController_pollInterruptFlags@reg+1
 13372                           
 13373                           ;ENC424J600.c: 315: flags.MODEXIF = (reg & (1 << MODEXIF)) != 0 ? 1 : 0;
 13374  0028A8  0100               	movlb	0	; () banked
 13375  0028AA  AD81               	btfss	(ethernetController_pollInterruptFlags@reg+1)& (0+255),6,b
 13376  0028AC  D003               	goto	u10980
 13377  0028AE  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13378  0028B0  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13379  0028B2  D002               	goto	u10998
 13380  0028B4                     u10980:
 13381  0028B4  0100               	movlb	0	; () banked
 13382  0028B6  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13383  0028B8                     u10998:
 13384  0028B8  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 13385  0028BA  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13386  0028BC  0BFE               	andlw	-2
 13387  0028BE  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13388  0028C0  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 13389                           
 13390                           ; BSR set to: 0
 13391                           ;ENC424J600.c: 316: flags.HASHIF = (reg & (1 << HASHIF)) != 0 ? 1 : 0;
 13392  0028C2  AB81               	btfss	(ethernetController_pollInterruptFlags@reg+1)& (0+255),5,b
 13393  0028C4  D003               	goto	u11000
 13394  0028C6  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13395  0028C8  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13396  0028CA  D002               	goto	u11018
 13397  0028CC                     u11000:
 13398  0028CC  0100               	movlb	0	; () banked
 13399  0028CE  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13400  0028D0                     u11018:
 13401  0028D0  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13402  0028D2  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 13403  0028D4  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13404  0028D6  0BFD               	andlw	-3
 13405  0028D8  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13406  0028DA  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 13407                           
 13408                           ; BSR set to: 0
 13409                           ;ENC424J600.c: 317: flags.AESIF = (reg & (1 << AESIF)) != 0 ? 1 : 0;
 13410  0028DC  A981               	btfss	(ethernetController_pollInterruptFlags@reg+1)& (0+255),4,b
 13411  0028DE  D003               	goto	u11020
 13412  0028E0  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13413  0028E2  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13414  0028E4  D002               	goto	u11038
 13415  0028E6                     u11020:
 13416  0028E6  0100               	movlb	0	; () banked
 13417  0028E8  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13418  0028EA                     u11038:
 13419  0028EA  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13420  0028EC  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13421  0028EE  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 13422  0028F0  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13423  0028F2  0BFB               	andlw	-5
 13424  0028F4  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13425  0028F6  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 13426                           
 13427                           ; BSR set to: 0
 13428                           ;ENC424J600.c: 318: flags.LINKIF = (reg & (1 << LINKIF)) != 0 ? 1 : 0;
 13429  0028F8  A781               	btfss	(ethernetController_pollInterruptFlags@reg+1)& (0+255),3,b
 13430  0028FA  D003               	goto	u11040
 13431  0028FC  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13432  0028FE  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13433  002900  D002               	goto	u11058
 13434  002902                     u11040:
 13435  002902  0100               	movlb	0	; () banked
 13436  002904  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13437  002906                     u11058:
 13438  002906  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13439  002908  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13440  00290A  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13441  00290C  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 13442  00290E  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13443  002910  0BF7               	andlw	-9
 13444  002912  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13445  002914  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 13446                           
 13447                           ; BSR set to: 0
 13448                           ;ENC424J600.c: 320: flags.PKTIF = (reg & (1 << PKTIF)) != 0 ? 1 : 0;
 13449  002916  AD80               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),6,b
 13450  002918  D003               	goto	u11060
 13451  00291A  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13452  00291C  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13453  00291E  D002               	goto	u11078
 13454  002920                     u11060:
 13455  002920  0100               	movlb	0	; () banked
 13456  002922  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13457  002924                     u11078:
 13458  002924  3B7A               	swapf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13459  002926  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 13460  002928  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13461  00292A  0BEF               	andlw	-17
 13462  00292C  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13463  00292E  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 13464                           
 13465                           ; BSR set to: 0
 13466                           ;ENC424J600.c: 321: flags.DMAIF = (reg & (1 << DMAIF)) != 0 ? 1 : 0;
 13467  002930  AB80               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),5,b
 13468  002932  D003               	goto	u11080
 13469  002934  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13470  002936  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13471  002938  D002               	goto	u11098
 13472  00293A                     u11080:
 13473  00293A  0100               	movlb	0	; () banked
 13474  00293C  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13475  00293E                     u11098:
 13476  00293E  3B7A               	swapf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13477  002940  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13478  002942  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 13479  002944  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13480  002946  0BDF               	andlw	-33
 13481  002948  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13482  00294A  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 13483                           
 13484                           ; BSR set to: 0
 13485                           ;ENC424J600.c: 323: flags.TXIF = (reg & (1 << TXIF)) != 0 ? 1 : 0;
 13486  00294C  A89E               	btfss	3998,4,c	;volatile
 13487  00294E  D003               	goto	u11100
 13488  002950  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13489  002952  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13490  002954  D002               	goto	u11118
 13491  002956                     u11100:
 13492  002956  0100               	movlb	0	; () banked
 13493  002958  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13494  00295A                     u11118:
 13495  00295A  0E01               	movlw	1
 13496  00295C  6F7B               	movwf	(??_ethernetController_pollInterruptFlags+1)& (0+255),b
 13497  00295E  0E00               	movlw	0
 13498  002960  6F7C               	movwf	(??_ethernetController_pollInterruptFlags+2)& (0+255),b
 13499  002962  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13500  002964  D003               	goto	u11124
 13501  002966                     u11125:
 13502  002966  90D8               	bcf	status,0,c
 13503  002968  377B               	rlcf	(??_ethernetController_pollInterruptFlags+1)& (0+255),f,b
 13504  00296A  377C               	rlcf	(??_ethernetController_pollInterruptFlags+2)& (0+255),f,b
 13505  00296C                     u11124:
 13506  00296C  2F7A               	decfsz	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13507  00296E  D7FB               	goto	u11125
 13508  002970  0100               	movlb	0	; () banked
 13509  002972  5180               	movf	ethernetController_pollInterruptFlags@reg& (0+255),w,b
 13510  002974  177B               	andwf	(??_ethernetController_pollInterruptFlags+1)& (0+255),f,b
 13511  002976  5181               	movf	(ethernetController_pollInterruptFlags@reg+1)& (0+255),w,b
 13512  002978  177C               	andwf	(??_ethernetController_pollInterruptFlags+2)& (0+255),f,b
 13513  00297A  517B               	movf	(??_ethernetController_pollInterruptFlags+1)& (0+255),w,b
 13514  00297C  117C               	iorwf	(??_ethernetController_pollInterruptFlags+2)& (0+255),w,b
 13515  00297E  B4D8               	btfsc	status,2,c
 13516  002980  D003               	goto	u11130
 13517  002982  6B7D               	clrf	(??_ethernetController_pollInterruptFlags+3)& (0+255),b
 13518  002984  2B7D               	incf	(??_ethernetController_pollInterruptFlags+3)& (0+255),f,b
 13519  002986  D002               	goto	u11148
 13520  002988                     u11130:
 13521  002988  0100               	movlb	0	; () banked
 13522  00298A  6B7D               	clrf	(??_ethernetController_pollInterruptFlags+3)& (0+255),b
 13523  00298C                     u11148:
 13524  00298C  3B7D               	swapf	(??_ethernetController_pollInterruptFlags+3)& (0+255),f,b
 13525  00298E  477D               	rlncf	(??_ethernetController_pollInterruptFlags+3)& (0+255),f,b
 13526  002990  477D               	rlncf	(??_ethernetController_pollInterruptFlags+3)& (0+255),f,b
 13527  002992  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 13528  002994  197D               	xorwf	(??_ethernetController_pollInterruptFlags+3)& (0+255),w,b
 13529  002996  0BBF               	andlw	-65
 13530  002998  197D               	xorwf	(??_ethernetController_pollInterruptFlags+3)& (0+255),w,b
 13531  00299A  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 13532                           
 13533                           ; BSR set to: 0
 13534                           ;ENC424J600.c: 324: flags.TXABTIF = (reg & (1 << TXABTIF)) != 0 ? 1 : 0;
 13535  00299C  A580               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),2,b
 13536  00299E  D003               	goto	u11150
 13537  0029A0  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13538  0029A2  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13539  0029A4  D002               	goto	u11168
 13540  0029A6                     u11150:
 13541  0029A6  0100               	movlb	0	; () banked
 13542  0029A8  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13543  0029AA                     u11168:
 13544  0029AA  337A               	rrcf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13545  0029AC  337A               	rrcf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13546  0029AE  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 13547  0029B0  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13548  0029B2  0B7F               	andlw	-129
 13549  0029B4  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13550  0029B6  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 13551                           
 13552                           ; BSR set to: 0
 13553                           ;ENC424J600.c: 325: flags.RXABTIF = (reg & (1 << RXABTIF)) != 0 ? 1 : 0;
 13554  0029B8  A380               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),1,b
 13555  0029BA  D003               	goto	u11170
 13556  0029BC  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13557  0029BE  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13558  0029C0  D002               	goto	u11188
 13559  0029C2                     u11170:
 13560  0029C2  0100               	movlb	0	; () banked
 13561  0029C4  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13562  0029C6                     u11188:
 13563  0029C6  517F               	movf	(ethernetController_pollInterruptFlags@flags+1)& (0+255),w,b
 13564  0029C8  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13565  0029CA  0BFE               	andlw	-2
 13566  0029CC  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13567  0029CE  6F7F               	movwf	(ethernetController_pollInterruptFlags@flags+1)& (0+255),b
 13568                           
 13569                           ; BSR set to: 0
 13570                           ;ENC424J600.c: 326: flags.PCFULIF = (reg & (1 << PCFULIF)) != 0 ? 1 : 0;
 13571  0029D0  A180               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),0,b
 13572  0029D2  D003               	goto	u11190
 13573  0029D4  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13574  0029D6  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13575  0029D8  D002               	goto	u11208
 13576  0029DA                     u11190:
 13577  0029DA  0100               	movlb	0	; () banked
 13578  0029DC  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13579  0029DE                     u11208:
 13580  0029DE  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13581  0029E0  517F               	movf	(ethernetController_pollInterruptFlags@flags+1)& (0+255),w,b
 13582  0029E2  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13583  0029E4  0BFD               	andlw	-3
 13584  0029E6  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13585  0029E8  6F7F               	movwf	(ethernetController_pollInterruptFlags@flags+1)& (0+255),b
 13586                           
 13587                           ; BSR set to: 0
 13588                           ;ENC424J600.c: 327: return flags;
 13589  0029EA  C07E  F078         	movff	ethernetController_pollInterruptFlags@flags,?_ethernetController_pollInterruptFla
      +                          gs
 13590  0029EE  C07F  F079         	movff	ethernetController_pollInterruptFlags@flags+1,?_ethernetController_pollInterruptF
      +                          lags+1
 13591  0029F2  0012               	return	
 13592  0029F4                     __end_of_ethernetController_pollInterruptFlags:
 13593                           	opt stack 0
 13594                           tblptru	equ	0xFF8
 13595                           tblptrh	equ	0xFF7
 13596                           tblptrl	equ	0xFF6
 13597                           tablat	equ	0xFF5
 13598                           prodh	equ	0xFF4
 13599                           prodl	equ	0xFF3
 13600                           intcon	equ	0xFF2
 13601                           intcon3	equ	0xFF0
 13602                           indf0	equ	0xFEF
 13603                           postinc0	equ	0xFEE
 13604                           plusw0	equ	0xFEB
 13605                           fsr0h	equ	0xFEA
 13606                           fsr0l	equ	0xFE9
 13607                           wreg	equ	0xFE8
 13608                           indf1	equ	0xFE7
 13609                           postinc1	equ	0xFE6
 13610                           postdec1	equ	0xFE5
 13611                           plusw1	equ	0xFE3
 13612                           fsr1h	equ	0xFE2
 13613                           fsr1l	equ	0xFE1
 13614                           indf2	equ	0xFDF
 13615                           postinc2	equ	0xFDE
 13616                           postdec2	equ	0xFDD
 13617                           plusw2	equ	0xFDB
 13618                           fsr2h	equ	0xFDA
 13619                           fsr2l	equ	0xFD9
 13620                           status	equ	0xFD8
 13621                           
 13622 ;; *************** function _enc424j600_getInterruptFlags *****************
 13623 ;; Defined at:
 13624 ;;		line 696 in file "src/enc424j600/ENC424J600.c"
 13625 ;; Parameters:    Size  Location     Type
 13626 ;;		None
 13627 ;; Auto vars:     Size  Location     Type
 13628 ;;  high            1   23[BANK0 ] unsigned char 
 13629 ;;  low             1   22[BANK0 ] unsigned char 
 13630 ;; Return value:  Size  Location     Type
 13631 ;;                  2   14[BANK0 ] unsigned int 
 13632 ;; Registers used:
 13633 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13634 ;; Tracked objects:
 13635 ;;		On entry : 0/0
 13636 ;;		On exit  : 0/0
 13637 ;;		Unchanged: 0/0
 13638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13639 ;;      Params:         0       2       0       0       0       0       0       0       0
 13640 ;;      Locals:         0       2       0       0       0       0       0       0       0
 13641 ;;      Temps:          0       6       0       0       0       0       0       0       0
 13642 ;;      Totals:         0      10       0       0       0       0       0       0       0
 13643 ;;Total ram usage:       10 bytes
 13644 ;; Hardware stack levels used:    1
 13645 ;; Hardware stack levels required when called:    7
 13646 ;; This function calls:
 13647 ;;		_enc424j600_readControlRegisterUnbanked
 13648 ;; This function is called by:
 13649 ;;		_ethernetController_pollInterruptFlags
 13650 ;; This function uses a non-reentrant model
 13651 ;;
 13652                           
 13653                           	psect	text48
 13654  0045CC                     __ptext48:
 13655                           	opt stack 0
 13656  0045CC                     _enc424j600_getInterruptFlags:
 13657                           	opt stack 21
 13658                           
 13659                           ;ENC424J600.c: 697: uint8_t low, high;
 13660                           ;ENC424J600.c: 698: enc424j600_readControlRegisterUnbanked(0x1C + 0x00, &low);
 13661                           
 13662                           ; BSR set to: 0
 13663                           ;incstack = 0
 13664  0045CC  0E76               	movlw	low enc424j600_getInterruptFlags@low
 13665  0045CE  0100               	movlb	0	; () banked
 13666  0045D0  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 13667  0045D2  0E00               	movlw	high enc424j600_getInterruptFlags@low
 13668  0045D4  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 13669  0045D6  0E1C               	movlw	28
 13670  0045D8  EC63  F024         	call	_enc424j600_readControlRegisterUnbanked
 13671                           
 13672                           ;ENC424J600.c: 699: enc424j600_readControlRegisterUnbanked(0x1D + 0x00, &high);
 13673  0045DC  0E77               	movlw	low enc424j600_getInterruptFlags@high
 13674  0045DE  0100               	movlb	0	; () banked
 13675  0045E0  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 13676  0045E2  0E00               	movlw	high enc424j600_getInterruptFlags@high
 13677  0045E4  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 13678  0045E6  0E1D               	movlw	29
 13679  0045E8  EC63  F024         	call	_enc424j600_readControlRegisterUnbanked
 13680                           
 13681                           ;ENC424J600.c: 700: return ( (((uint16_t) low)&0x00ff) | (((uint16_t) high << 8)&0xff00)
      +                          );
 13682  0045EC  0E00               	movlw	0
 13683  0045EE  0100               	movlb	0	; () banked
 13684  0045F0  6F70               	movwf	??_enc424j600_getInterruptFlags& (0+255),b
 13685  0045F2  0EFF               	movlw	255
 13686  0045F4  6F71               	movwf	(??_enc424j600_getInterruptFlags+1)& (0+255),b
 13687  0045F6  5177               	movf	enc424j600_getInterruptFlags@high& (0+255),w,b
 13688  0045F8  6F73               	movwf	(??_enc424j600_getInterruptFlags+3)& (0+255),b
 13689  0045FA  6B72               	clrf	(??_enc424j600_getInterruptFlags+2)& (0+255),b
 13690  0045FC  5170               	movf	??_enc424j600_getInterruptFlags& (0+255),w,b
 13691  0045FE  1772               	andwf	(??_enc424j600_getInterruptFlags+2)& (0+255),f,b
 13692  004600  5171               	movf	(??_enc424j600_getInterruptFlags+1)& (0+255),w,b
 13693  004602  1773               	andwf	(??_enc424j600_getInterruptFlags+3)& (0+255),f,b
 13694  004604  5176               	movf	enc424j600_getInterruptFlags@low& (0+255),w,b
 13695  004606  6F74               	movwf	(??_enc424j600_getInterruptFlags+4)& (0+255),b
 13696  004608  6B75               	clrf	(??_enc424j600_getInterruptFlags+5)& (0+255),b
 13697  00460A  5172               	movf	(??_enc424j600_getInterruptFlags+2)& (0+255),w,b
 13698  00460C  1174               	iorwf	(??_enc424j600_getInterruptFlags+4)& (0+255),w,b
 13699  00460E  6F6E               	movwf	?_enc424j600_getInterruptFlags& (0+255),b
 13700  004610  5173               	movf	(??_enc424j600_getInterruptFlags+3)& (0+255),w,b
 13701  004612  1175               	iorwf	(??_enc424j600_getInterruptFlags+5)& (0+255),w,b
 13702  004614  6F6F               	movwf	(?_enc424j600_getInterruptFlags+1)& (0+255),b
 13703  004616  0012               	return	
 13704  004618                     __end_of_enc424j600_getInterruptFlags:
 13705                           	opt stack 0
 13706                           tblptru	equ	0xFF8
 13707                           tblptrh	equ	0xFF7
 13708                           tblptrl	equ	0xFF6
 13709                           tablat	equ	0xFF5
 13710                           prodh	equ	0xFF4
 13711                           prodl	equ	0xFF3
 13712                           intcon	equ	0xFF2
 13713                           intcon3	equ	0xFF0
 13714                           indf0	equ	0xFEF
 13715                           postinc0	equ	0xFEE
 13716                           plusw0	equ	0xFEB
 13717                           fsr0h	equ	0xFEA
 13718                           fsr0l	equ	0xFE9
 13719                           wreg	equ	0xFE8
 13720                           indf1	equ	0xFE7
 13721                           postinc1	equ	0xFE6
 13722                           postdec1	equ	0xFE5
 13723                           plusw1	equ	0xFE3
 13724                           fsr1h	equ	0xFE2
 13725                           fsr1l	equ	0xFE1
 13726                           indf2	equ	0xFDF
 13727                           postinc2	equ	0xFDE
 13728                           postdec2	equ	0xFDD
 13729                           plusw2	equ	0xFDB
 13730                           fsr2h	equ	0xFDA
 13731                           fsr2l	equ	0xFD9
 13732                           status	equ	0xFD8
 13733                           
 13734 ;; *************** function _ethernetController_newPacketAvailable *****************
 13735 ;; Defined at:
 13736 ;;		line 390 in file "src/enc424j600/ENC424J600.c"
 13737 ;; Parameters:    Size  Location     Type
 13738 ;;		None
 13739 ;; Auto vars:     Size  Location     Type
 13740 ;;		None
 13741 ;; Return value:  Size  Location     Type
 13742 ;;                  1    wreg      unsigned char 
 13743 ;; Registers used:
 13744 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13745 ;; Tracked objects:
 13746 ;;		On entry : 0/0
 13747 ;;		On exit  : 0/0
 13748 ;;		Unchanged: 0/0
 13749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13750 ;;      Params:         0       0       0       0       0       0       0       0       0
 13751 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13752 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13753 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13754 ;;Total ram usage:        0 bytes
 13755 ;; Hardware stack levels used:    1
 13756 ;; Hardware stack levels required when called:    8
 13757 ;; This function calls:
 13758 ;;		_enc424j600_getPacketCount
 13759 ;; This function is called by:
 13760 ;;		_handleStackBackgroundTasks
 13761 ;; This function uses a non-reentrant model
 13762 ;;
 13763                           
 13764                           	psect	text49
 13765  004C4E                     __ptext49:
 13766                           	opt stack 0
 13767  004C4E                     _ethernetController_newPacketAvailable:
 13768                           	opt stack 21
 13769                           
 13770                           ;ENC424J600.c: 391: return (unsigned) (enc424j600_getPacketCount() != 0);
 13771                           
 13772                           ; BSR set to: 0
 13773                           ;incstack = 0
 13774  004C4E  EC04  F026         	call	_enc424j600_getPacketCount	;wreg free
 13775  004C52  0900               	iorlw	0
 13776  004C54  B4D8               	btfsc	status,2,c
 13777  004C56  D002               	goto	u11210
 13778  004C58  0E01               	movlw	1
 13779  004C5A  0012               	return	
 13780  004C5C                     u11210:
 13781  004C5C  0E00               	movlw	0
 13782  004C5E  0012               	return	
 13783  004C60                     __end_of_ethernetController_newPacketAvailable:
 13784                           	opt stack 0
 13785                           tblptru	equ	0xFF8
 13786                           tblptrh	equ	0xFF7
 13787                           tblptrl	equ	0xFF6
 13788                           tablat	equ	0xFF5
 13789                           prodh	equ	0xFF4
 13790                           prodl	equ	0xFF3
 13791                           intcon	equ	0xFF2
 13792                           intcon3	equ	0xFF0
 13793                           indf0	equ	0xFEF
 13794                           postinc0	equ	0xFEE
 13795                           plusw0	equ	0xFEB
 13796                           fsr0h	equ	0xFEA
 13797                           fsr0l	equ	0xFE9
 13798                           wreg	equ	0xFE8
 13799                           indf1	equ	0xFE7
 13800                           postinc1	equ	0xFE6
 13801                           postdec1	equ	0xFE5
 13802                           plusw1	equ	0xFE3
 13803                           fsr1h	equ	0xFE2
 13804                           fsr1l	equ	0xFE1
 13805                           indf2	equ	0xFDF
 13806                           postinc2	equ	0xFDE
 13807                           postdec2	equ	0xFDD
 13808                           plusw2	equ	0xFDB
 13809                           fsr2h	equ	0xFDA
 13810                           fsr2l	equ	0xFD9
 13811                           status	equ	0xFD8
 13812                           
 13813 ;; *************** function _ethernetController_clearInterruptFlag *****************
 13814 ;; Defined at:
 13815 ;;		line 330 in file "src/enc424j600/ENC424J600.c"
 13816 ;; Parameters:    Size  Location     Type
 13817 ;;  flag            1    wreg     unsigned char 
 13818 ;; Auto vars:     Size  Location     Type
 13819 ;;  flag            1   18[BANK0 ] unsigned char 
 13820 ;; Return value:  Size  Location     Type
 13821 ;;                  1    wreg      void 
 13822 ;; Registers used:
 13823 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13824 ;; Tracked objects:
 13825 ;;		On entry : 0/0
 13826 ;;		On exit  : 0/0
 13827 ;;		Unchanged: 0/0
 13828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13829 ;;      Params:         0       0       0       0       0       0       0       0       0
 13830 ;;      Locals:         0       1       0       0       0       0       0       0       0
 13831 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13832 ;;      Totals:         0       1       0       0       0       0       0       0       0
 13833 ;;Total ram usage:        1 bytes
 13834 ;; Hardware stack levels used:    1
 13835 ;; Hardware stack levels required when called:    8
 13836 ;; This function calls:
 13837 ;;		_enc424j600_clearInterruptFlag
 13838 ;; This function is called by:
 13839 ;;		_handleStackBackgroundTasks
 13840 ;; This function uses a non-reentrant model
 13841 ;;
 13842                           
 13843                           	psect	text50
 13844  004CC2                     __ptext50:
 13845                           	opt stack 0
 13846  004CC2                     _ethernetController_clearInterruptFlag:
 13847                           	opt stack 21
 13848                           
 13849                           ;incstack = 0
 13850                           ;ethernetController_clearInterruptFlag@flag stored from wreg
 13851  004CC2  0100               	movlb	0	; () banked
 13852  004CC4  6F72               	movwf	ethernetController_clearInterruptFlag@flag& (0+255),b
 13853                           
 13854                           ;ENC424J600.c: 331: enc424j600_clearInterruptFlag(flag);
 13855  004CC6  0100               	movlb	0	; () banked
 13856  004CC8  5172               	movf	ethernetController_clearInterruptFlag@flag& (0+255),w,b
 13857  004CCA  EC98  F01D         	call	_enc424j600_clearInterruptFlag
 13858  004CCE  0012               	return		;funcret
 13859  004CD0                     __end_of_ethernetController_clearInterruptFlag:
 13860                           	opt stack 0
 13861                           tblptru	equ	0xFF8
 13862                           tblptrh	equ	0xFF7
 13863                           tblptrl	equ	0xFF6
 13864                           tablat	equ	0xFF5
 13865                           prodh	equ	0xFF4
 13866                           prodl	equ	0xFF3
 13867                           intcon	equ	0xFF2
 13868                           intcon3	equ	0xFF0
 13869                           indf0	equ	0xFEF
 13870                           postinc0	equ	0xFEE
 13871                           plusw0	equ	0xFEB
 13872                           fsr0h	equ	0xFEA
 13873                           fsr0l	equ	0xFE9
 13874                           wreg	equ	0xFE8
 13875                           indf1	equ	0xFE7
 13876                           postinc1	equ	0xFE6
 13877                           postdec1	equ	0xFE5
 13878                           plusw1	equ	0xFE3
 13879                           fsr1h	equ	0xFE2
 13880                           fsr1l	equ	0xFE1
 13881                           indf2	equ	0xFDF
 13882                           postinc2	equ	0xFDE
 13883                           postdec2	equ	0xFDD
 13884                           plusw2	equ	0xFDB
 13885                           fsr2h	equ	0xFDA
 13886                           fsr2l	equ	0xFD9
 13887                           status	equ	0xFD8
 13888                           
 13889 ;; *************** function _enc424j600_clearInterruptFlag *****************
 13890 ;; Defined at:
 13891 ;;		line 703 in file "src/enc424j600/ENC424J600.c"
 13892 ;; Parameters:    Size  Location     Type
 13893 ;;  flag            1    wreg     unsigned char 
 13894 ;; Auto vars:     Size  Location     Type
 13895 ;;  flag            1   16[BANK0 ] unsigned char 
 13896 ;;  temp            1   17[BANK0 ] unsigned char 
 13897 ;; Return value:  Size  Location     Type
 13898 ;;                  1    wreg      void 
 13899 ;; Registers used:
 13900 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13901 ;; Tracked objects:
 13902 ;;		On entry : 0/0
 13903 ;;		On exit  : 0/0
 13904 ;;		Unchanged: 0/0
 13905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13906 ;;      Params:         0       0       0       0       0       0       0       0       0
 13907 ;;      Locals:         0       2       0       0       0       0       0       0       0
 13908 ;;      Temps:          0       2       0       0       0       0       0       0       0
 13909 ;;      Totals:         0       4       0       0       0       0       0       0       0
 13910 ;;Total ram usage:        4 bytes
 13911 ;; Hardware stack levels used:    1
 13912 ;; Hardware stack levels required when called:    7
 13913 ;; This function calls:
 13914 ;;		_enc424j600_readControlRegisterUnbanked
 13915 ;;		_enc424j600_writeControlRegisterUnbanked
 13916 ;; This function is called by:
 13917 ;;		_ethernetController_clearInterruptFlag
 13918 ;; This function uses a non-reentrant model
 13919 ;;
 13920                           
 13921                           	psect	text51
 13922  003B30                     __ptext51:
 13923                           	opt stack 0
 13924  003B30                     _enc424j600_clearInterruptFlag:
 13925                           	opt stack 21
 13926                           
 13927                           ;incstack = 0
 13928                           ;enc424j600_clearInterruptFlag@flag stored from wreg
 13929  003B30  0100               	movlb	0	; () banked
 13930  003B32  6F70               	movwf	enc424j600_clearInterruptFlag@flag& (0+255),b
 13931                           
 13932                           ;ENC424J600.c: 704: uint8_t temp;
 13933                           ;ENC424J600.c: 705: if (flag < 8) {
 13934  003B34  0E08               	movlw	8
 13935  003B36  0100               	movlb	0	; () banked
 13936  003B38  6170               	cpfslt	enc424j600_clearInterruptFlag@flag& (0+255),b
 13937  003B3A  D01E               	goto	l317
 13938                           
 13939                           ; BSR set to: 0
 13940                           ;ENC424J600.c: 706: enc424j600_readControlRegisterUnbanked(0x1C + 0x00, &temp);
 13941  003B3C  0E71               	movlw	low enc424j600_clearInterruptFlag@temp
 13942  003B3E  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 13943  003B40  0E00               	movlw	high enc424j600_clearInterruptFlag@temp
 13944  003B42  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 13945  003B44  0E1C               	movlw	28
 13946  003B46  EC63  F024         	call	_enc424j600_readControlRegisterUnbanked
 13947                           
 13948                           ;ENC424J600.c: 707: temp &= ~(1 << flag);
 13949  003B4A  C070  F06E         	movff	enc424j600_clearInterruptFlag@flag,??_enc424j600_clearInterruptFlag
 13950  003B4E  0E01               	movlw	1
 13951  003B50  0100               	movlb	0	; () banked
 13952  003B52  6F6F               	movwf	(??_enc424j600_clearInterruptFlag+1)& (0+255),b
 13953  003B54  2B6E               	incf	??_enc424j600_clearInterruptFlag& (0+255),f,b
 13954  003B56  D002               	goto	u10634
 13955  003B58                     u10635:
 13956  003B58  90D8               	bcf	status,0,c
 13957  003B5A  376F               	rlcf	(??_enc424j600_clearInterruptFlag+1)& (0+255),f,b
 13958  003B5C                     u10634:
 13959  003B5C  2F6E               	decfsz	??_enc424j600_clearInterruptFlag& (0+255),f,b
 13960  003B5E  D7FC               	goto	u10635
 13961  003B60  0100               	movlb	0	; () banked
 13962  003B62  516F               	movf	(??_enc424j600_clearInterruptFlag+1)& (0+255),w,b
 13963  003B64  0AFF               	xorlw	255
 13964  003B66  1771               	andwf	enc424j600_clearInterruptFlag@temp& (0+255),f,b
 13965                           
 13966                           ; BSR set to: 0
 13967                           ;ENC424J600.c: 708: enc424j600_writeControlRegisterUnbanked(0x1C + 0x00, &temp);
 13968  003B68  0E71               	movlw	low enc424j600_clearInterruptFlag@temp
 13969  003B6A  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 13970  003B6C  0E00               	movlw	high enc424j600_clearInterruptFlag@temp
 13971  003B6E  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 13972  003B70  0E1C               	movlw	28
 13973  003B72  EC48  F024         	call	_enc424j600_writeControlRegisterUnbanked
 13974                           
 13975                           ;ENC424J600.c: 709: } else {
 13976  003B76  0012               	return	
 13977  003B78                     l317:
 13978                           
 13979                           ;ENC424J600.c: 710: flag -= 8;
 13980  003B78  0E08               	movlw	8
 13981  003B7A  0100               	movlb	0	; () banked
 13982  003B7C  5F70               	subwf	enc424j600_clearInterruptFlag@flag& (0+255),f,b
 13983                           
 13984                           ; BSR set to: 0
 13985                           ;ENC424J600.c: 711: enc424j600_readControlRegisterUnbanked(0x1D + 0x00, &temp);
 13986  003B7E  0E71               	movlw	low enc424j600_clearInterruptFlag@temp
 13987  003B80  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 13988  003B82  0E00               	movlw	high enc424j600_clearInterruptFlag@temp
 13989  003B84  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 13990  003B86  0E1D               	movlw	29
 13991  003B88  EC63  F024         	call	_enc424j600_readControlRegisterUnbanked
 13992                           
 13993                           ;ENC424J600.c: 712: temp &= ~(1 << flag);
 13994  003B8C  C070  F06E         	movff	enc424j600_clearInterruptFlag@flag,??_enc424j600_clearInterruptFlag
 13995  003B90  0E01               	movlw	1
 13996  003B92  0100               	movlb	0	; () banked
 13997  003B94  6F6F               	movwf	(??_enc424j600_clearInterruptFlag+1)& (0+255),b
 13998  003B96  2B6E               	incf	??_enc424j600_clearInterruptFlag& (0+255),f,b
 13999  003B98  D002               	goto	u10644
 14000  003B9A                     u10645:
 14001  003B9A  90D8               	bcf	status,0,c
 14002  003B9C  376F               	rlcf	(??_enc424j600_clearInterruptFlag+1)& (0+255),f,b
 14003  003B9E                     u10644:
 14004  003B9E  2F6E               	decfsz	??_enc424j600_clearInterruptFlag& (0+255),f,b
 14005  003BA0  D7FC               	goto	u10645
 14006  003BA2  0100               	movlb	0	; () banked
 14007  003BA4  516F               	movf	(??_enc424j600_clearInterruptFlag+1)& (0+255),w,b
 14008  003BA6  0AFF               	xorlw	255
 14009  003BA8  1771               	andwf	enc424j600_clearInterruptFlag@temp& (0+255),f,b
 14010                           
 14011                           ;ENC424J600.c: 713: enc424j600_writeControlRegisterUnbanked(0x1D + 0x00, &temp);
 14012  003BAA  0E71               	movlw	low enc424j600_clearInterruptFlag@temp
 14013  003BAC  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 14014  003BAE  0E00               	movlw	high enc424j600_clearInterruptFlag@temp
 14015  003BB0  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 14016  003BB2  0E1D               	movlw	29
 14017  003BB4  EC48  F024         	call	_enc424j600_writeControlRegisterUnbanked
 14018  003BB8  0012               	return	
 14019  003BBA                     __end_of_enc424j600_clearInterruptFlag:
 14020                           	opt stack 0
 14021                           tblptru	equ	0xFF8
 14022                           tblptrh	equ	0xFF7
 14023                           tblptrl	equ	0xFF6
 14024                           tablat	equ	0xFF5
 14025                           prodh	equ	0xFF4
 14026                           prodl	equ	0xFF3
 14027                           intcon	equ	0xFF2
 14028                           intcon3	equ	0xFF0
 14029                           indf0	equ	0xFEF
 14030                           postinc0	equ	0xFEE
 14031                           plusw0	equ	0xFEB
 14032                           fsr0h	equ	0xFEA
 14033                           fsr0l	equ	0xFE9
 14034                           wreg	equ	0xFE8
 14035                           indf1	equ	0xFE7
 14036                           postinc1	equ	0xFE6
 14037                           postdec1	equ	0xFE5
 14038                           plusw1	equ	0xFE3
 14039                           fsr1h	equ	0xFE2
 14040                           fsr1l	equ	0xFE1
 14041                           indf2	equ	0xFDF
 14042                           postinc2	equ	0xFDE
 14043                           postdec2	equ	0xFDD
 14044                           plusw2	equ	0xFDB
 14045                           fsr2h	equ	0xFDA
 14046                           fsr2l	equ	0xFD9
 14047                           status	equ	0xFD8
 14048                           
 14049 ;; *************** function _arp_background *****************
 14050 ;; Defined at:
 14051 ;;		line 342 in file "src/stack/protocols/arp.c"
 14052 ;; Parameters:    Size  Location     Type
 14053 ;;		None
 14054 ;; Auto vars:     Size  Location     Type
 14055 ;;  ipPreliminar    4   78[BANK1 ] struct ipv4_address
 14056 ;;  errAnnounce     3   82[BANK1 ] struct error
 14057 ;; Return value:  Size  Location     Type
 14058 ;;                  3  511[None  ] struct error
 14059 ;; Registers used:
 14060 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14061 ;; Tracked objects:
 14062 ;;		On entry : 0/0
 14063 ;;		On exit  : 0/0
 14064 ;;		Unchanged: 0/0
 14065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14066 ;;      Params:         0       0       0       0       0       0       0       0       0
 14067 ;;      Locals:         0       0       7       0       0       0       0       0       0
 14068 ;;      Temps:          0       0       2       0       0       0       0       0       0
 14069 ;;      Totals:         0       0       9       0       0       0       0       0       0
 14070 ;;Total ram usage:        9 bytes
 14071 ;; Hardware stack levels used:    1
 14072 ;; Hardware stack levels required when called:   12
 14073 ;; This function calls:
 14074 ;;		_UARTTransmitText
 14075 ;;		_arp_gratuitous
 14076 ;;		_arp_probe
 14077 ;;		_ipv4_SrcAddrChanged
 14078 ;;		_ipv4_getPreliminaryIPSourceAddress
 14079 ;; This function is called by:
 14080 ;;		_handleStackBackgroundTasks
 14081 ;; This function uses a non-reentrant model
 14082 ;;
 14083                           
 14084                           	psect	text52
 14085  002F74                     __ptext52:
 14086                           	opt stack 0
 14087  002F74                     _arp_background:
 14088                           	opt stack 17
 14089                           
 14090                           ;arp.c: 343: error_t static err;
 14091                           ;arp.c: 344: error_t errAnnounce;
 14092                           ;arp.c: 345: bool_t static fAnnounce = 0;
 14093                           ;arp.c: 346: err.code = (uint16_t)0xffff;
 14094                           
 14095                           ;incstack = 0
 14096  002F74  0101               	movlb	1	; () banked
 14097  002F76  69EE               	setf	(arp_background@err+1)& (0+255),b
 14098  002F78  69EF               	setf	(arp_background@err+2)& (0+255),b
 14099                           
 14100                           ; BSR set to: 1
 14101                           ;arp.c: 347: err.module = ERROR_MODULE_ARP;
 14102  002F7A  0E03               	movlw	3
 14103  002F7C  6FED               	movwf	arp_background@err& (0+255),b
 14104                           
 14105                           ; BSR set to: 1
 14106                           ;arp.c: 350: ipv4_address_t ipPreliminary = ipv4_getPreliminaryIPSourceAddress();
 14107  002F7E  EC30  F026         	call	_ipv4_getPreliminaryIPSourceAddress	;wreg free
 14108  002F82  C060  F14E         	movff	?_ipv4_getPreliminaryIPSourceAddress,arp_background@ipPreliminary
 14109  002F86  C061  F14F         	movff	?_ipv4_getPreliminaryIPSourceAddress+1,arp_background@ipPreliminary+1
 14110  002F8A  C062  F150         	movff	?_ipv4_getPreliminaryIPSourceAddress+2,arp_background@ipPreliminary+2
 14111  002F8E  C063  F151         	movff	?_ipv4_getPreliminaryIPSourceAddress+3,arp_background@ipPreliminary+3
 14112                           
 14113                           ;arp.c: 352: if (ipv4_SrcAddrChanged(&err)) {
 14114  002F92  0EED               	movlw	low arp_background@err
 14115  002F94  0100               	movlb	0	; () banked
 14116  002F96  6F60               	movwf	ipv4_SrcAddrChanged@err& (0+255),b
 14117  002F98  0E01               	movlw	high arp_background@err
 14118  002F9A  6F61               	movwf	(ipv4_SrcAddrChanged@err+1)& (0+255),b
 14119  002F9C  EC1D  F026         	call	_ipv4_SrcAddrChanged	;wreg free
 14120  002FA0  0100               	movlb	0	; () banked
 14121  002FA2  A0D8               	btfss	status,0,c
 14122  002FA4  D046               	goto	l1005
 14123                           
 14124                           ; BSR set to: 0
 14125                           ;arp.c: 354: err.code = arp_probe(ipPreliminary).code;
 14126  002FA6  C14E  F0FC         	movff	arp_background@ipPreliminary,arp_probe@ipTarget
 14127  002FAA  C14F  F0FD         	movff	arp_background@ipPreliminary+1,arp_probe@ipTarget+1
 14128  002FAE  C150  F0FE         	movff	arp_background@ipPreliminary+2,arp_probe@ipTarget+2
 14129  002FB2  C151  F0FF         	movff	arp_background@ipPreliminary+3,arp_probe@ipTarget+3
 14130  002FB6  EC50  F00E         	call	_arp_probe	;wreg free
 14131  002FBA  0EFC               	movlw	low ?_arp_probe
 14132  002FBC  6ED9               	movwf	fsr2l,c
 14133  002FBE  0E00               	movlw	high ?_arp_probe
 14134  002FC0  6EDA               	movwf	fsr2h,c
 14135  002FC2  0E01               	movlw	1
 14136  002FC4  26D9               	addwf	fsr2l,f,c
 14137  002FC6  0E00               	movlw	0
 14138  002FC8  22DA               	addwfc	fsr2h,f,c
 14139  002FCA  CFDE F1EE          	movff	postinc2,arp_background@err+1
 14140  002FCE  CFDD F1EF          	movff	postdec2,arp_background@err+2
 14141                           
 14142                           ;arp.c: 356: switch (err.code) {
 14143  002FD2  D019               	goto	l1003
 14144  002FD4                     
 14145                           ;arp.c: 358: UARTTransmitText("ARP: IPv4 address already in use!\n\r");
 14146  002FD4  0EBA               	movlw	low STR_70
 14147  002FD6  0100               	movlb	0	; () banked
 14148  002FD8  6F98               	movwf	UARTTransmitText@str& (0+255),b
 14149  002FDA  0E7C               	movlw	high STR_70
 14150  002FDC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 14151  002FDE  ECC8  F021         	call	_UARTTransmitText	;wreg free
 14152                           
 14153                           ;arp.c: 359: break;
 14154  002FE2  D027               	goto	l1005
 14155  002FE4                     
 14156                           ;arp.c: 361: UARTTransmitText("ARP: Nobody answered.\n\r");
 14157  002FE4  0EF7               	movlw	low STR_71
 14158  002FE6  0100               	movlb	0	; () banked
 14159  002FE8  6F98               	movwf	UARTTransmitText@str& (0+255),b
 14160  002FEA  0E7D               	movlw	high STR_71
 14161  002FEC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 14162  002FEE  ECC8  F021         	call	_UARTTransmitText	;wreg free
 14163                           
 14164                           ;arp.c: 362: fAnnounce = 1;
 14165  002FF2  824F               	bsf	arp_background@fAnnounce/(0+8),arp_background@fAnnounce& (0+7),c
 14166                           
 14167                           ;arp.c: 365: break;
 14168                           
 14169                           ;arp.c: 364: case ERROR_ARP_WAITING:
 14170                           
 14171                           ;arp.c: 363: break;
 14172  002FF4  D01E               	goto	l1005
 14173  002FF6                     
 14174                           ;arp.c: 367: UARTTransmitText("ARP: An unknown error occured.\n\r");
 14175  002FF6  0E23               	movlw	low STR_72
 14176  002FF8  0100               	movlb	0	; () banked
 14177  002FFA  6F98               	movwf	UARTTransmitText@str& (0+255),b
 14178  002FFC  0E7D               	movlw	high STR_72
 14179  002FFE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 14180  003000  ECC8  F021         	call	_UARTTransmitText	;wreg free
 14181                           
 14182                           ;arp.c: 368: }
 14183  003004  D016               	goto	l1005
 14184  003006                     l1003:
 14185  003006  EE21  F0EE         	lfsr	2,arp_background@err+1
 14186  00300A  CFDE F14C          	movff	postinc2,??_arp_background
 14187  00300E  CFDD F14D          	movff	postdec2,??_arp_background+1
 14188                           
 14189                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14190                           ; Switch size 1, requested type "space"
 14191                           ; Number of cases is 1, Range of values is 1 to 1
 14192                           ; switch strategies available:
 14193                           ; Name         Instructions Cycles
 14194                           ; simple_byte            4     3 (average)
 14195                           ;	Chosen strategy is simple_byte
 14196  003012  0101               	movlb	1	; () banked
 14197  003014  514D               	movf	(??_arp_background+1)& (0+255),w,b
 14198  003016  0A01               	xorlw	1	; case 1
 14199  003018  A4D8               	btfss	status,2,c
 14200  00301A  D7ED               	goto	l1008
 14201                           
 14202                           ; BSR set to: 1
 14203                           ; Switch size 1, requested type "space"
 14204                           ; Number of cases is 3, Range of values is 145 to 148
 14205                           ; switch strategies available:
 14206                           ; Name         Instructions Cycles
 14207                           ; simple_byte           10     6 (average)
 14208                           ;	Chosen strategy is simple_byte
 14209  00301C  514C               	movf	??_arp_background& (0+255),w,b
 14210  00301E  0A91               	xorlw	145	; case 145
 14211  003020  B4D8               	btfsc	status,2,c
 14212  003022  D007               	goto	l1005
 14213  003024  0A03               	xorlw	3	; case 146
 14214  003026  B4D8               	btfsc	status,2,c
 14215  003028  D7DD               	goto	l1006
 14216  00302A  0A06               	xorlw	6	; case 148
 14217  00302C  B4D8               	btfsc	status,2,c
 14218  00302E  D7D2               	goto	l1004
 14219  003030  D7E2               	goto	l1008
 14220  003032                     l1005:
 14221                           
 14222                           ;arp.c: 369: }
 14223                           ;arp.c: 370: if (fAnnounce) {
 14224                           
 14225                           ; BSR set to: 1
 14226  003032  A24F               	btfss	arp_background@fAnnounce/(0+8),arp_background@fAnnounce& (0+7),c
 14227  003034  0012               	return	
 14228                           
 14229                           ;arp.c: 371: errAnnounce = arp_gratuitous(ipPreliminary);
 14230  003036  C14E  F0FC         	movff	arp_background@ipPreliminary,arp_gratuitous@ip
 14231  00303A  C14F  F0FD         	movff	arp_background@ipPreliminary+1,arp_gratuitous@ip+1
 14232  00303E  C150  F0FE         	movff	arp_background@ipPreliminary+2,arp_gratuitous@ip+2
 14233  003042  C151  F0FF         	movff	arp_background@ipPreliminary+3,arp_gratuitous@ip+3
 14234  003046  ECDD  F012         	call	_arp_gratuitous	;wreg free
 14235  00304A  C0FC  F152         	movff	?_arp_gratuitous,arp_background@errAnnounce
 14236  00304E  C0FD  F153         	movff	?_arp_gratuitous+1,arp_background@errAnnounce+1
 14237  003052  C0FE  F154         	movff	?_arp_gratuitous+2,arp_background@errAnnounce+2
 14238                           
 14239                           ;arp.c: 372: if (errAnnounce.module == ERROR_MODULE_ARP &&
 14240                           ;arp.c: 373: errAnnounce.code == (uint16_t)0) {
 14241  003056  0E03               	movlw	3
 14242  003058  0101               	movlb	1	; () banked
 14243  00305A  1952               	xorwf	arp_background@errAnnounce& (0+255),w,b
 14244  00305C  A4D8               	btfss	status,2,c
 14245  00305E  0012               	return	
 14246                           
 14247                           ; BSR set to: 1
 14248  003060  5153               	movf	(arp_background@errAnnounce+1)& (0+255),w,b
 14249  003062  1154               	iorwf	(arp_background@errAnnounce+2)& (0+255),w,b
 14250  003064  A4D8               	btfss	status,2,c
 14251  003066  0012               	return	
 14252                           
 14253                           ; BSR set to: 1
 14254                           ;arp.c: 374: UARTTransmitText("ARP: All Announcements sent.\n\r");
 14255  003068  0E44               	movlw	low STR_73
 14256  00306A  0100               	movlb	0	; () banked
 14257  00306C  6F98               	movwf	UARTTransmitText@str& (0+255),b
 14258  00306E  0E7D               	movlw	high STR_73
 14259  003070  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 14260  003072  ECC8  F021         	call	_UARTTransmitText	;wreg free
 14261                           
 14262                           ;arp.c: 375: fAnnounce = 0;
 14263  003076  924F               	bcf	arp_background@fAnnounce/(0+8),arp_background@fAnnounce& (0+7),c
 14264  003078  0012               	return	
 14265  00307A                     __end_of_arp_background:
 14266                           	opt stack 0
 14267                           tblptru	equ	0xFF8
 14268                           tblptrh	equ	0xFF7
 14269                           tblptrl	equ	0xFF6
 14270                           tablat	equ	0xFF5
 14271                           prodh	equ	0xFF4
 14272                           prodl	equ	0xFF3
 14273                           intcon	equ	0xFF2
 14274                           intcon3	equ	0xFF0
 14275                           indf0	equ	0xFEF
 14276                           postinc0	equ	0xFEE
 14277                           plusw0	equ	0xFEB
 14278                           fsr0h	equ	0xFEA
 14279                           fsr0l	equ	0xFE9
 14280                           wreg	equ	0xFE8
 14281                           indf1	equ	0xFE7
 14282                           postinc1	equ	0xFE6
 14283                           postdec1	equ	0xFE5
 14284                           plusw1	equ	0xFE3
 14285                           fsr1h	equ	0xFE2
 14286                           fsr1l	equ	0xFE1
 14287                           indf2	equ	0xFDF
 14288                           postinc2	equ	0xFDE
 14289                           postdec2	equ	0xFDD
 14290                           plusw2	equ	0xFDB
 14291                           fsr2h	equ	0xFDA
 14292                           fsr2l	equ	0xFD9
 14293                           status	equ	0xFD8
 14294                           
 14295 ;; *************** function _ipv4_getPreliminaryIPSourceAddress *****************
 14296 ;; Defined at:
 14297 ;;		line 235 in file "src/stack/protocols/ipv4.c"
 14298 ;; Parameters:    Size  Location     Type
 14299 ;;		None
 14300 ;; Auto vars:     Size  Location     Type
 14301 ;;		None
 14302 ;; Return value:  Size  Location     Type
 14303 ;;                  4    0[BANK0 ] struct ipv4_address
 14304 ;; Registers used:
 14305 ;;		None
 14306 ;; Tracked objects:
 14307 ;;		On entry : 0/0
 14308 ;;		On exit  : 0/0
 14309 ;;		Unchanged: 0/0
 14310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14311 ;;      Params:         0       4       0       0       0       0       0       0       0
 14312 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14313 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14314 ;;      Totals:         0       4       0       0       0       0       0       0       0
 14315 ;;Total ram usage:        4 bytes
 14316 ;; Hardware stack levels used:    1
 14317 ;; Hardware stack levels required when called:    4
 14318 ;; This function calls:
 14319 ;;		Nothing
 14320 ;; This function is called by:
 14321 ;;		_arp_background
 14322 ;; This function uses a non-reentrant model
 14323 ;;
 14324                           
 14325                           	psect	text53
 14326  004C60                     __ptext53:
 14327                           	opt stack 0
 14328  004C60                     _ipv4_getPreliminaryIPSourceAddress:
 14329                           	opt stack 24
 14330                           
 14331                           ;ipv4.c: 236: return ipPreliminarySource;
 14332                           
 14333                           ;incstack = 0
 14334  004C60  C1D7  F060         	movff	_ipPreliminarySource,?_ipv4_getPreliminaryIPSourceAddress
 14335  004C64  C1D8  F061         	movff	_ipPreliminarySource+1,?_ipv4_getPreliminaryIPSourceAddress+1
 14336  004C68  C1D9  F062         	movff	_ipPreliminarySource+2,?_ipv4_getPreliminaryIPSourceAddress+2
 14337  004C6C  C1DA  F063         	movff	_ipPreliminarySource+3,?_ipv4_getPreliminaryIPSourceAddress+3
 14338  004C70  0012               	return		;funcret
 14339  004C72                     __end_of_ipv4_getPreliminaryIPSourceAddress:
 14340                           	opt stack 0
 14341                           tblptru	equ	0xFF8
 14342                           tblptrh	equ	0xFF7
 14343                           tblptrl	equ	0xFF6
 14344                           tablat	equ	0xFF5
 14345                           prodh	equ	0xFF4
 14346                           prodl	equ	0xFF3
 14347                           intcon	equ	0xFF2
 14348                           intcon3	equ	0xFF0
 14349                           indf0	equ	0xFEF
 14350                           postinc0	equ	0xFEE
 14351                           plusw0	equ	0xFEB
 14352                           fsr0h	equ	0xFEA
 14353                           fsr0l	equ	0xFE9
 14354                           wreg	equ	0xFE8
 14355                           indf1	equ	0xFE7
 14356                           postinc1	equ	0xFE6
 14357                           postdec1	equ	0xFE5
 14358                           plusw1	equ	0xFE3
 14359                           fsr1h	equ	0xFE2
 14360                           fsr1l	equ	0xFE1
 14361                           indf2	equ	0xFDF
 14362                           postinc2	equ	0xFDE
 14363                           postdec2	equ	0xFDD
 14364                           plusw2	equ	0xFDB
 14365                           fsr2h	equ	0xFDA
 14366                           fsr2l	equ	0xFD9
 14367                           status	equ	0xFD8
 14368                           
 14369 ;; *************** function _ipv4_SrcAddrChanged *****************
 14370 ;; Defined at:
 14371 ;;		line 291 in file "src/stack/protocols/ipv4.c"
 14372 ;; Parameters:    Size  Location     Type
 14373 ;;  err             2    0[BANK0 ] PTR struct error
 14374 ;;		 -> arp_background@err(3), 
 14375 ;; Auto vars:     Size  Location     Type
 14376 ;;		None
 14377 ;; Return value:  Size  Location     Type
 14378 ;;		None               void
 14379 ;; Registers used:
 14380 ;;		wreg, status,2, status,0
 14381 ;; Tracked objects:
 14382 ;;		On entry : 0/0
 14383 ;;		On exit  : 0/0
 14384 ;;		Unchanged: 0/0
 14385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14386 ;;      Params:         0       2       0       0       0       0       0       0       0
 14387 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14388 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14389 ;;      Totals:         0       2       0       0       0       0       0       0       0
 14390 ;;Total ram usage:        2 bytes
 14391 ;; Hardware stack levels used:    1
 14392 ;; Hardware stack levels required when called:    4
 14393 ;; This function calls:
 14394 ;;		Nothing
 14395 ;; This function is called by:
 14396 ;;		_arp_background
 14397 ;; This function uses a non-reentrant model
 14398 ;;
 14399                           
 14400                           	psect	text54
 14401  004C3A                     __ptext54:
 14402                           	opt stack 0
 14403  004C3A                     _ipv4_SrcAddrChanged:
 14404                           	opt stack 24
 14405                           
 14406                           ;ipv4.c: 292: arpStatus = err;
 14407                           
 14408                           ;incstack = 0
 14409  004C3A  C060  F03C         	movff	ipv4_SrcAddrChanged@err,_arpStatus
 14410  004C3E  C061  F03D         	movff	ipv4_SrcAddrChanged@err+1,_arpStatus+1
 14411                           
 14412                           ;ipv4.c: 293: return fSrcAddrChanged;
 14413  004C42  B04F               	btfsc	_fSrcAddrChanged/(0+8),_fSrcAddrChanged& (0+7),c
 14414  004C44  D002               	goto	l7551
 14415  004C46  90D8               	bcf	status,0,c
 14416  004C48  0012               	return	
 14417  004C4A                     l7551:
 14418  004C4A  80D8               	bsf	status,0,c
 14419  004C4C  0012               	return	
 14420  004C4E                     __end_of_ipv4_SrcAddrChanged:
 14421                           	opt stack 0
 14422                           tblptru	equ	0xFF8
 14423                           tblptrh	equ	0xFF7
 14424                           tblptrl	equ	0xFF6
 14425                           tablat	equ	0xFF5
 14426                           prodh	equ	0xFF4
 14427                           prodl	equ	0xFF3
 14428                           intcon	equ	0xFF2
 14429                           intcon3	equ	0xFF0
 14430                           indf0	equ	0xFEF
 14431                           postinc0	equ	0xFEE
 14432                           plusw0	equ	0xFEB
 14433                           fsr0h	equ	0xFEA
 14434                           fsr0l	equ	0xFE9
 14435                           wreg	equ	0xFE8
 14436                           indf1	equ	0xFE7
 14437                           postinc1	equ	0xFE6
 14438                           postdec1	equ	0xFE5
 14439                           plusw1	equ	0xFE3
 14440                           fsr1h	equ	0xFE2
 14441                           fsr1l	equ	0xFE1
 14442                           indf2	equ	0xFDF
 14443                           postinc2	equ	0xFDE
 14444                           postdec2	equ	0xFDD
 14445                           plusw2	equ	0xFDB
 14446                           fsr2h	equ	0xFDA
 14447                           fsr2l	equ	0xFD9
 14448                           status	equ	0xFD8
 14449                           
 14450 ;; *************** function _arp_probe *****************
 14451 ;; Defined at:
 14452 ;;		line 245 in file "src/stack/protocols/arp.c"
 14453 ;; Parameters:    Size  Location     Type
 14454 ;;  ipTarget        4  156[BANK0 ] struct ipv4_address
 14455 ;; Auto vars:     Size  Location     Type
 14456 ;;  ipSender        4   69[BANK1 ] struct ipv4_address
 14457 ;;  waitingTime     4   65[BANK1 ] unsigned long 
 14458 ;;  timeStart       4   61[BANK1 ] unsigned long 
 14459 ;;  err             3   73[BANK1 ] struct error
 14460 ;;  index           1   60[BANK1 ] unsigned char 
 14461 ;; Return value:  Size  Location     Type
 14462 ;;                  3  156[BANK0 ] struct error
 14463 ;; Registers used:
 14464 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14465 ;; Tracked objects:
 14466 ;;		On entry : 0/0
 14467 ;;		On exit  : 0/0
 14468 ;;		Unchanged: 0/0
 14469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14470 ;;      Params:         0       4       0       0       0       0       0       0       0
 14471 ;;      Locals:         0       0      16       0       0       0       0       0       0
 14472 ;;      Temps:          0       0       8       0       0       0       0       0       0
 14473 ;;      Totals:         0       4      24       0       0       0       0       0       0
 14474 ;;Total ram usage:       28 bytes
 14475 ;; Hardware stack levels used:    1
 14476 ;; Hardware stack levels required when called:   11
 14477 ;; This function calls:
 14478 ;;		___lwmod
 14479 ;;		_arp_checkForEntry
 14480 ;;		_arp_sendRequest
 14481 ;;		_getMillis
 14482 ;;		_ipv4_setToAllZero
 14483 ;;		_rand
 14484 ;; This function is called by:
 14485 ;;		_arp_background
 14486 ;; This function uses a non-reentrant model
 14487 ;;
 14488                           
 14489                           	psect	text55
 14490  001CA0                     __ptext55:
 14491                           	opt stack 0
 14492  001CA0                     _arp_probe:
 14493                           	opt stack 17
 14494                           
 14495                           ;arp.c: 246: time_t timeStart;
 14496                           ;arp.c: 247: time_t waitingTime;
 14497                           ;arp.c: 248: ipv4_address_t ipSender;
 14498                           ;arp.c: 249: uint8_t static probeCounter = 0;
 14499                           ;arp.c: 250: error_t err;
 14500                           ;arp.c: 252: enum states {
 14501                           ;arp.c: 253: PREPARING_PROBE, WAITING_TO_SEND, SENDING_PROBE, ARP_ENTRY_FOUND
 14502                           ;arp.c: 254: };
 14503                           ;arp.c: 255: uint8_t static state = PREPARING_PROBE;
 14504                           ;arp.c: 256: uint8_t index;
 14505                           ;arp.c: 257: err.module = ERROR_MODULE_ARP;
 14506                           
 14507                           ;incstack = 0
 14508  001CA0  0E03               	movlw	3
 14509  001CA2  0101               	movlb	1	; () banked
 14510  001CA4  6F49               	movwf	arp_probe@err& (0+255),b
 14511                           
 14512                           ; BSR set to: 1
 14513                           ;arp.c: 259: if (arp_checkForEntry(ipTarget, &index)) {
 14514  001CA6  C0FC  F067         	movff	arp_probe@ipTarget,arp_checkForEntry@ip
 14515  001CAA  C0FD  F068         	movff	arp_probe@ipTarget+1,arp_checkForEntry@ip+1
 14516  001CAE  C0FE  F069         	movff	arp_probe@ipTarget+2,arp_checkForEntry@ip+2
 14517  001CB2  C0FF  F06A         	movff	arp_probe@ipTarget+3,arp_checkForEntry@ip+3
 14518  001CB6  0E3C               	movlw	low arp_probe@index
 14519  001CB8  0100               	movlb	0	; () banked
 14520  001CBA  6F6B               	movwf	arp_checkForEntry@index& (0+255),b
 14521  001CBC  0E01               	movlw	high arp_probe@index
 14522  001CBE  6F6C               	movwf	(arp_checkForEntry@index+1)& (0+255),b
 14523  001CC0  EC5A  F01B         	call	_arp_checkForEntry	;wreg free
 14524  001CC4  0900               	iorlw	0
 14525  001CC6  B4D8               	btfsc	status,2,c
 14526  001CC8  D0F5               	goto	l963
 14527                           
 14528                           ;arp.c: 260: state = ARP_ENTRY_FOUND;
 14529  001CCA  0E03               	movlw	3
 14530  001CCC  0101               	movlb	1	; () banked
 14531  001CCE  6FE5               	movwf	arp_probe@state& (0+255),b
 14532                           
 14533                           ; BSR set to: 1
 14534                           ;arp.c: 261: }
 14535                           ;arp.c: 263: switch (state) {
 14536  001CD0  D0F1               	goto	l963
 14537  001CD2                     
 14538                           ; BSR set to: 1
 14539                           ;arp.c: 265: ipv4_setToAllZero(&ipSender);
 14540                           
 14541                           ; BSR set to: 1
 14542  001CD2  0E45               	movlw	low arp_probe@ipSender
 14543  001CD4  0100               	movlb	0	; () banked
 14544  001CD6  6F60               	movwf	ipv4_setToAllZero@ip& (0+255),b
 14545  001CD8  0E01               	movlw	high arp_probe@ipSender
 14546  001CDA  6F61               	movwf	(ipv4_setToAllZero@ip+1)& (0+255),b
 14547  001CDC  ECDA  F025         	call	_ipv4_setToAllZero	;wreg free
 14548                           
 14549                           ;arp.c: 266: timeStart = getMillis();
 14550  001CE0  EC39  F026         	call	_getMillis	;wreg free
 14551  001CE4  C060  F13D         	movff	?_getMillis,arp_probe@timeStart
 14552  001CE8  C061  F13E         	movff	?_getMillis+1,arp_probe@timeStart+1
 14553  001CEC  C062  F13F         	movff	?_getMillis+2,arp_probe@timeStart+2
 14554  001CF0  C063  F140         	movff	?_getMillis+3,arp_probe@timeStart+3
 14555                           
 14556                           ;arp.c: 267: waitingTime = rand() % 1000u;
 14557  001CF4  EC9D  F021         	call	_rand	;wreg free
 14558  001CF8  C06C  F06E         	movff	?_rand,___lwmod@dividend
 14559  001CFC  C06D  F06F         	movff	?_rand+1,___lwmod@dividend+1
 14560  001D00  0E03               	movlw	3
 14561  001D02  0100               	movlb	0	; () banked
 14562  001D04  6F71               	movwf	(___lwmod@divisor+1)& (0+255),b
 14563  001D06  0EE8               	movlw	232
 14564  001D08  6F70               	movwf	___lwmod@divisor& (0+255),b
 14565  001D0A  EC52  F023         	call	___lwmod	;wreg free
 14566  001D0E  0100               	movlb	0	; () banked
 14567  001D10  C06E  F141         	movff	?___lwmod,arp_probe@waitingTime
 14568  001D14  C06F  F142         	movff	?___lwmod+1,arp_probe@waitingTime+1
 14569  001D18  0101               	movlb	1	; () banked
 14570  001D1A  6B43               	clrf	(arp_probe@waitingTime+2)& (0+255),b
 14571  001D1C  6B44               	clrf	(arp_probe@waitingTime+3)& (0+255),b
 14572                           
 14573                           ; BSR set to: 1
 14574                           ;arp.c: 268: state = WAITING_TO_SEND;
 14575  001D1E  0E01               	movlw	1
 14576  001D20  6FE5               	movwf	arp_probe@state& (0+255),b
 14577  001D22  D054               	goto	l967
 14578  001D24                     
 14579                           ; BSR set to: 1
 14580                           ;arp.c: 272: if (getMillis() - timeStart >= waitingTime) {
 14581                           
 14582                           ; BSR set to: 1
 14583  001D24  C13D  F134         	movff	arp_probe@timeStart,??_arp_probe
 14584  001D28  C13E  F135         	movff	arp_probe@timeStart+1,??_arp_probe+1
 14585  001D2C  C13F  F136         	movff	arp_probe@timeStart+2,??_arp_probe+2
 14586  001D30  C140  F137         	movff	arp_probe@timeStart+3,??_arp_probe+3
 14587  001D34  1F34               	comf	??_arp_probe& (0+255),f,b
 14588  001D36  1F35               	comf	(??_arp_probe+1)& (0+255),f,b
 14589  001D38  1F36               	comf	(??_arp_probe+2)& (0+255),f,b
 14590  001D3A  1F37               	comf	(??_arp_probe+3)& (0+255),f,b
 14591  001D3C  2B34               	incf	??_arp_probe& (0+255),f,b
 14592  001D3E  0E00               	movlw	0
 14593  001D40  2335               	addwfc	(??_arp_probe+1)& (0+255),f,b
 14594  001D42  2336               	addwfc	(??_arp_probe+2)& (0+255),f,b
 14595  001D44  2337               	addwfc	(??_arp_probe+3)& (0+255),f,b
 14596  001D46  EC39  F026         	call	_getMillis	;wreg free
 14597  001D4A  0101               	movlb	1	; () banked
 14598  001D4C  5134               	movf	??_arp_probe& (0+255),w,b
 14599  001D4E  0100               	movlb	0	; () banked
 14600  001D50  2560               	addwf	?_getMillis& (0+255),w,b
 14601  001D52  0101               	movlb	1	; () banked
 14602  001D54  6F38               	movwf	(??_arp_probe+4)& (0+255),b
 14603  001D56  5135               	movf	(??_arp_probe+1)& (0+255),w,b
 14604  001D58  0100               	movlb	0	; () banked
 14605  001D5A  2161               	addwfc	(?_getMillis+1)& (0+255),w,b
 14606  001D5C  0101               	movlb	1	; () banked
 14607  001D5E  6F39               	movwf	(??_arp_probe+5)& (0+255),b
 14608  001D60  5136               	movf	(??_arp_probe+2)& (0+255),w,b
 14609  001D62  0100               	movlb	0	; () banked
 14610  001D64  2162               	addwfc	(?_getMillis+2)& (0+255),w,b
 14611  001D66  0101               	movlb	1	; () banked
 14612  001D68  6F3A               	movwf	(??_arp_probe+6)& (0+255),b
 14613  001D6A  5137               	movf	(??_arp_probe+3)& (0+255),w,b
 14614  001D6C  0100               	movlb	0	; () banked
 14615  001D6E  2163               	addwfc	(?_getMillis+3)& (0+255),w,b
 14616  001D70  0101               	movlb	1	; () banked
 14617  001D72  6F3B               	movwf	(??_arp_probe+7)& (0+255),b
 14618  001D74  5141               	movf	arp_probe@waitingTime& (0+255),w,b
 14619  001D76  5D38               	subwf	(??_arp_probe+4)& (0+255),w,b
 14620  001D78  5142               	movf	(arp_probe@waitingTime+1)& (0+255),w,b
 14621  001D7A  5939               	subwfb	(??_arp_probe+5)& (0+255),w,b
 14622  001D7C  5143               	movf	(arp_probe@waitingTime+2)& (0+255),w,b
 14623  001D7E  593A               	subwfb	(??_arp_probe+6)& (0+255),w,b
 14624  001D80  5144               	movf	(arp_probe@waitingTime+3)& (0+255),w,b
 14625  001D82  593B               	subwfb	(??_arp_probe+7)& (0+255),w,b
 14626  001D84  A0D8               	btfss	status,0,c
 14627  001D86  D022               	goto	l967
 14628                           
 14629                           ; BSR set to: 1
 14630                           ;arp.c: 273: state = SENDING_PROBE;
 14631  001D88  0E02               	movlw	2
 14632  001D8A  6FE5               	movwf	arp_probe@state& (0+255),b
 14633                           
 14634                           ; BSR set to: 1
 14635                           ;arp.c: 275: waitingTime = (rand() % (2000u - 1000u)) + 1000u;
 14636  001D8C  0EE8               	movlw	232
 14637  001D8E  6F34               	movwf	??_arp_probe& (0+255),b
 14638  001D90  0E03               	movlw	3
 14639  001D92  6F35               	movwf	(??_arp_probe+1)& (0+255),b
 14640  001D94  EC9D  F021         	call	_rand	;wreg free
 14641  001D98  C06C  F06E         	movff	?_rand,___lwmod@dividend
 14642  001D9C  C06D  F06F         	movff	?_rand+1,___lwmod@dividend+1
 14643  001DA0  0E03               	movlw	3
 14644  001DA2  0100               	movlb	0	; () banked
 14645  001DA4  6F71               	movwf	(___lwmod@divisor+1)& (0+255),b
 14646  001DA6  0EE8               	movlw	232
 14647  001DA8  6F70               	movwf	___lwmod@divisor& (0+255),b
 14648  001DAA  EC52  F023         	call	___lwmod	;wreg free
 14649  001DAE  0101               	movlb	1	; () banked
 14650  001DB0  5134               	movf	??_arp_probe& (0+255),w,b
 14651  001DB2  0100               	movlb	0	; () banked
 14652  001DB4  276E               	addwf	?___lwmod& (0+255),f,b
 14653  001DB6  0101               	movlb	1	; () banked
 14654  001DB8  5135               	movf	(??_arp_probe+1)& (0+255),w,b
 14655  001DBA  0100               	movlb	0	; () banked
 14656  001DBC  236F               	addwfc	(?___lwmod+1)& (0+255),f,b
 14657  001DBE  C06E  F141         	movff	?___lwmod,arp_probe@waitingTime
 14658  001DC2  C06F  F142         	movff	?___lwmod+1,arp_probe@waitingTime+1
 14659  001DC6  0101               	movlb	1	; () banked
 14660  001DC8  6B43               	clrf	(arp_probe@waitingTime+2)& (0+255),b
 14661  001DCA  6B44               	clrf	(arp_probe@waitingTime+3)& (0+255),b
 14662  001DCC                     l967:
 14663                           
 14664                           ; BSR set to: 1
 14665                           ;arp.c: 276: }
 14666                           ;arp.c: 277: err.code = ERROR_ARP_WAITING;
 14667                           
 14668                           ; BSR set to: 1
 14669  001DCC  0E01               	movlw	1
 14670  001DCE  6F4B               	movwf	(arp_probe@err+2)& (0+255),b
 14671  001DD0  0E91               	movlw	145
 14672  001DD2  D06E               	goto	L8
 14673  001DD4                     
 14674                           ; BSR set to: 1
 14675                           ;arp.c: 280: if (probeCounter == 0 || (getMillis() - timeStart) > waitingTime) {
 14676                           
 14677                           ; BSR set to: 1
 14678  001DD4  51E6               	movf	arp_probe@probeCounter& (0+255),w,b
 14679  001DD6  B4D8               	btfsc	status,2,c
 14680  001DD8  D032               	goto	u10840
 14681                           
 14682                           ; BSR set to: 1
 14683  001DDA  C13D  F134         	movff	arp_probe@timeStart,??_arp_probe
 14684  001DDE  C13E  F135         	movff	arp_probe@timeStart+1,??_arp_probe+1
 14685  001DE2  C13F  F136         	movff	arp_probe@timeStart+2,??_arp_probe+2
 14686  001DE6  C140  F137         	movff	arp_probe@timeStart+3,??_arp_probe+3
 14687  001DEA  1F34               	comf	??_arp_probe& (0+255),f,b
 14688  001DEC  1F35               	comf	(??_arp_probe+1)& (0+255),f,b
 14689  001DEE  1F36               	comf	(??_arp_probe+2)& (0+255),f,b
 14690  001DF0  1F37               	comf	(??_arp_probe+3)& (0+255),f,b
 14691  001DF2  2B34               	incf	??_arp_probe& (0+255),f,b
 14692  001DF4  0E00               	movlw	0
 14693  001DF6  2335               	addwfc	(??_arp_probe+1)& (0+255),f,b
 14694  001DF8  2336               	addwfc	(??_arp_probe+2)& (0+255),f,b
 14695  001DFA  2337               	addwfc	(??_arp_probe+3)& (0+255),f,b
 14696  001DFC  EC39  F026         	call	_getMillis	;wreg free
 14697  001E00  0101               	movlb	1	; () banked
 14698  001E02  5134               	movf	??_arp_probe& (0+255),w,b
 14699  001E04  0100               	movlb	0	; () banked
 14700  001E06  2560               	addwf	?_getMillis& (0+255),w,b
 14701  001E08  0101               	movlb	1	; () banked
 14702  001E0A  6F38               	movwf	(??_arp_probe+4)& (0+255),b
 14703  001E0C  5135               	movf	(??_arp_probe+1)& (0+255),w,b
 14704  001E0E  0100               	movlb	0	; () banked
 14705  001E10  2161               	addwfc	(?_getMillis+1)& (0+255),w,b
 14706  001E12  0101               	movlb	1	; () banked
 14707  001E14  6F39               	movwf	(??_arp_probe+5)& (0+255),b
 14708  001E16  5136               	movf	(??_arp_probe+2)& (0+255),w,b
 14709  001E18  0100               	movlb	0	; () banked
 14710  001E1A  2162               	addwfc	(?_getMillis+2)& (0+255),w,b
 14711  001E1C  0101               	movlb	1	; () banked
 14712  001E1E  6F3A               	movwf	(??_arp_probe+6)& (0+255),b
 14713  001E20  5137               	movf	(??_arp_probe+3)& (0+255),w,b
 14714  001E22  0100               	movlb	0	; () banked
 14715  001E24  2163               	addwfc	(?_getMillis+3)& (0+255),w,b
 14716  001E26  0101               	movlb	1	; () banked
 14717  001E28  6F3B               	movwf	(??_arp_probe+7)& (0+255),b
 14718  001E2A  5138               	movf	(??_arp_probe+4)& (0+255),w,b
 14719  001E2C  5D41               	subwf	arp_probe@waitingTime& (0+255),w,b
 14720  001E2E  5139               	movf	(??_arp_probe+5)& (0+255),w,b
 14721  001E30  5942               	subwfb	(arp_probe@waitingTime+1)& (0+255),w,b
 14722  001E32  513A               	movf	(??_arp_probe+6)& (0+255),w,b
 14723  001E34  5943               	subwfb	(arp_probe@waitingTime+2)& (0+255),w,b
 14724  001E36  513B               	movf	(??_arp_probe+7)& (0+255),w,b
 14725  001E38  5944               	subwfb	(arp_probe@waitingTime+3)& (0+255),w,b
 14726  001E3A  B0D8               	btfsc	status,0,c
 14727  001E3C  D049               	goto	l965
 14728  001E3E                     u10840:
 14729                           
 14730                           ; BSR set to: 1
 14731                           ;arp.c: 281: timeStart = getMillis();
 14732                           
 14733                           ; BSR set to: 1
 14734  001E3E  EC39  F026         	call	_getMillis	;wreg free
 14735  001E42  C060  F13D         	movff	?_getMillis,arp_probe@timeStart
 14736  001E46  C061  F13E         	movff	?_getMillis+1,arp_probe@timeStart+1
 14737  001E4A  C062  F13F         	movff	?_getMillis+2,arp_probe@timeStart+2
 14738  001E4E  C063  F140         	movff	?_getMillis+3,arp_probe@timeStart+3
 14739                           
 14740                           ;arp.c: 283: if (probeCounter < 3u) {
 14741  001E52  0E03               	movlw	3
 14742  001E54  0101               	movlb	1	; () banked
 14743  001E56  61E6               	cpfslt	arp_probe@probeCounter& (0+255),b
 14744  001E58  D012               	goto	l972
 14745                           
 14746                           ; BSR set to: 1
 14747                           ;arp.c: 284: arp_sendRequest(ipSender, ipTarget);
 14748  001E5A  C145  F100         	movff	arp_probe@ipSender,arp_sendRequest@ipSender
 14749  001E5E  C146  F101         	movff	arp_probe@ipSender+1,arp_sendRequest@ipSender+1
 14750  001E62  C147  F102         	movff	arp_probe@ipSender+2,arp_sendRequest@ipSender+2
 14751  001E66  C148  F103         	movff	arp_probe@ipSender+3,arp_sendRequest@ipSender+3
 14752  001E6A  C0FC  F104         	movff	arp_probe@ipTarget,arp_sendRequest@ipTarget
 14753  001E6E  C0FD  F105         	movff	arp_probe@ipTarget+1,arp_sendRequest@ipTarget+1
 14754  001E72  C0FE  F106         	movff	arp_probe@ipTarget+2,arp_sendRequest@ipTarget+2
 14755  001E76  C0FF  F107         	movff	arp_probe@ipTarget+3,arp_sendRequest@ipTarget+3
 14756  001E7A  ECB3  F01B         	call	_arp_sendRequest	;wreg free
 14757  001E7E                     l972:
 14758                           
 14759                           ;arp.c: 285: }
 14760                           ;arp.c: 286: if (probeCounter >= 3u) {
 14761  001E7E  0E02               	movlw	2
 14762  001E80  0101               	movlb	1	; () banked
 14763  001E82  65E6               	cpfsgt	arp_probe@probeCounter& (0+255),b
 14764  001E84  D008               	goto	l973
 14765                           
 14766                           ; BSR set to: 1
 14767                           ;arp.c: 287: probeCounter = 0;
 14768  001E86  0E00               	movlw	0
 14769  001E88  6FE6               	movwf	arp_probe@probeCounter& (0+255),b
 14770                           
 14771                           ;arp.c: 288: state = PREPARING_PROBE;
 14772  001E8A  0E00               	movlw	0
 14773  001E8C  6FE5               	movwf	arp_probe@state& (0+255),b
 14774                           
 14775                           ;arp.c: 289: err.code = ERROR_ARP_MAXIMUM_NUMBER_OF_PROBES_REACHED;
 14776  001E8E  0E01               	movlw	1
 14777  001E90  6F4B               	movwf	(arp_probe@err+2)& (0+255),b
 14778  001E92  0E92               	movlw	146
 14779  001E94  D00D               	goto	L8
 14780  001E96                     l973:
 14781                           
 14782                           ; BSR set to: 1
 14783                           ;arp.c: 291: err.code = ERROR_ARP_WAITING;
 14784                           
 14785                           ; BSR set to: 1
 14786  001E96  0E01               	movlw	1
 14787  001E98  6F4B               	movwf	(arp_probe@err+2)& (0+255),b
 14788  001E9A  0E91               	movlw	145
 14789  001E9C  6F4A               	movwf	(arp_probe@err+1)& (0+255),b
 14790                           
 14791                           ; BSR set to: 1
 14792                           ;arp.c: 292: probeCounter++;
 14793  001E9E  2BE6               	incf	arp_probe@probeCounter& (0+255),f,b
 14794                           
 14795                           ; BSR set to: 1
 14796                           ;arp.c: 293: }
 14797                           ;arp.c: 294: }
 14798                           ;arp.c: 295: break;
 14799                           
 14800                           ; BSR set to: 1
 14801  001EA0  D017               	goto	l965
 14802  001EA2                     
 14803                           ; BSR set to: 1
 14804                           ;arp.c: 297: probeCounter = 0;
 14805                           
 14806                           ; BSR set to: 1
 14807  001EA2  0E00               	movlw	0
 14808  001EA4  6FE6               	movwf	arp_probe@probeCounter& (0+255),b
 14809                           
 14810                           ;arp.c: 298: state = PREPARING_PROBE;
 14811  001EA6  0E00               	movlw	0
 14812  001EA8  6FE5               	movwf	arp_probe@state& (0+255),b
 14813                           
 14814                           ;arp.c: 299: err.code = ERROR_ARP_IPv4_ADDRESS_CONFLICT;
 14815  001EAA  0E01               	movlw	1
 14816  001EAC  6F4B               	movwf	(arp_probe@err+2)& (0+255),b
 14817  001EAE  0E94               	movlw	148
 14818  001EB0                     L8:
 14819  001EB0  6F4A               	movwf	(arp_probe@err+1)& (0+255),b
 14820                           
 14821                           ;arp.c: 300: }
 14822  001EB2  D00E               	goto	l965
 14823  001EB4                     l963:
 14824                           
 14825                           ; BSR set to: 1
 14826  001EB4  0101               	movlb	1	; () banked
 14827  001EB6  51E5               	movf	arp_probe@state& (0+255),w,b
 14828                           
 14829                           ; Switch size 1, requested type "space"
 14830                           ; Number of cases is 4, Range of values is 0 to 3
 14831                           ; switch strategies available:
 14832                           ; Name         Instructions Cycles
 14833                           ; simple_byte           13     7 (average)
 14834                           ;	Chosen strategy is simple_byte
 14835  001EB8  0A00               	xorlw	0	; case 0
 14836  001EBA  B4D8               	btfsc	status,2,c
 14837  001EBC  D70A               	goto	l964
 14838  001EBE  0A01               	xorlw	1	; case 1
 14839  001EC0  B4D8               	btfsc	status,2,c
 14840  001EC2  D730               	goto	l966
 14841  001EC4  0A03               	xorlw	3	; case 2
 14842  001EC6  B4D8               	btfsc	status,2,c
 14843  001EC8  D785               	goto	l968
 14844  001ECA  0A01               	xorlw	1	; case 3
 14845  001ECC  B4D8               	btfsc	status,2,c
 14846  001ECE  D7E9               	goto	l975
 14847  001ED0                     l965:
 14848                           
 14849                           ; BSR set to: 1
 14850                           ;arp.c: 301: return err;
 14851  001ED0  C149  F0FC         	movff	arp_probe@err,?_arp_probe
 14852  001ED4  C14A  F0FD         	movff	arp_probe@err+1,?_arp_probe+1
 14853  001ED8  C14B  F0FE         	movff	arp_probe@err+2,?_arp_probe+2
 14854                           
 14855                           ; BSR set to: 1
 14856  001EDC  0012               	return		;funcret
 14857  001EDE                     __end_of_arp_probe:
 14858                           	opt stack 0
 14859                           tblptru	equ	0xFF8
 14860                           tblptrh	equ	0xFF7
 14861                           tblptrl	equ	0xFF6
 14862                           tablat	equ	0xFF5
 14863                           prodh	equ	0xFF4
 14864                           prodl	equ	0xFF3
 14865                           intcon	equ	0xFF2
 14866                           intcon3	equ	0xFF0
 14867                           indf0	equ	0xFEF
 14868                           postinc0	equ	0xFEE
 14869                           plusw0	equ	0xFEB
 14870                           fsr0h	equ	0xFEA
 14871                           fsr0l	equ	0xFE9
 14872                           wreg	equ	0xFE8
 14873                           indf1	equ	0xFE7
 14874                           postinc1	equ	0xFE6
 14875                           postdec1	equ	0xFE5
 14876                           plusw1	equ	0xFE3
 14877                           fsr1h	equ	0xFE2
 14878                           fsr1l	equ	0xFE1
 14879                           indf2	equ	0xFDF
 14880                           postinc2	equ	0xFDE
 14881                           postdec2	equ	0xFDD
 14882                           plusw2	equ	0xFDB
 14883                           fsr2h	equ	0xFDA
 14884                           fsr2l	equ	0xFD9
 14885                           status	equ	0xFD8
 14886                           
 14887 ;; *************** function _rand *****************
 14888 ;; Defined at:
 14889 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\rand.c"
 14890 ;; Parameters:    Size  Location     Type
 14891 ;;		None
 14892 ;; Auto vars:     Size  Location     Type
 14893 ;;		None
 14894 ;; Return value:  Size  Location     Type
 14895 ;;                  2   12[BANK0 ] int 
 14896 ;; Registers used:
 14897 ;;		wreg, status,2, status,0, cstack
 14898 ;; Tracked objects:
 14899 ;;		On entry : 0/0
 14900 ;;		On exit  : 0/0
 14901 ;;		Unchanged: 0/0
 14902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14903 ;;      Params:         0       2       0       0       0       0       0       0       0
 14904 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14905 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14906 ;;      Totals:         0       2       0       0       0       0       0       0       0
 14907 ;;Total ram usage:        2 bytes
 14908 ;; Hardware stack levels used:    1
 14909 ;; Hardware stack levels required when called:    5
 14910 ;; This function calls:
 14911 ;;		___lmul
 14912 ;; This function is called by:
 14913 ;;		_arp_probe
 14914 ;; This function uses a non-reentrant model
 14915 ;;
 14916                           
 14917                           	psect	text56
 14918  00433A                     __ptext56:
 14919                           	opt stack 0
 14920  00433A                     _rand:
 14921                           	opt stack 22
 14922                           
 14923                           ; BSR set to: 1
 14924                           ;incstack = 0
 14925  00433A  C049  F060         	movff	_randx,___lmul@multiplier
 14926  00433E  C04A  F061         	movff	_randx+1,___lmul@multiplier+1
 14927  004342  C04B  F062         	movff	_randx+2,___lmul@multiplier+2
 14928  004346  C04C  F063         	movff	_randx+3,___lmul@multiplier+3
 14929  00434A  0E6D               	movlw	109
 14930  00434C  0100               	movlb	0	; () banked
 14931  00434E  6F64               	movwf	___lmul@multiplicand& (0+255),b
 14932  004350  0E4E               	movlw	78
 14933  004352  6F65               	movwf	(___lmul@multiplicand+1)& (0+255),b
 14934  004354  0EC6               	movlw	198
 14935  004356  6F66               	movwf	(___lmul@multiplicand+2)& (0+255),b
 14936  004358  0E41               	movlw	65
 14937  00435A  6F67               	movwf	(___lmul@multiplicand+3)& (0+255),b
 14938  00435C  EC71  F021         	call	___lmul	;wreg free
 14939  004360  C060  F049         	movff	?___lmul,_randx
 14940  004364  C061  F04A         	movff	?___lmul+1,_randx+1
 14941  004368  C062  F04B         	movff	?___lmul+2,_randx+2
 14942  00436C  C063  F04C         	movff	?___lmul+3,_randx+3
 14943  004370  0E39               	movlw	57
 14944  004372  2649               	addwf	_randx,f,c
 14945  004374  0E30               	movlw	48
 14946  004376  224A               	addwfc	_randx+1,f,c
 14947  004378  0E00               	movlw	0
 14948  00437A  224B               	addwfc	_randx+2,f,c
 14949  00437C  0E00               	movlw	0
 14950  00437E  224C               	addwfc	_randx+3,f,c
 14951  004380  0EFF               	movlw	255
 14952  004382  144B               	andwf	_randx+2,w,c
 14953  004384  0100               	movlb	0	; () banked
 14954  004386  6F6C               	movwf	?_rand& (0+255),b
 14955  004388  0E7F               	movlw	127
 14956  00438A  144C               	andwf	_randx+3,w,c
 14957  00438C  6F6D               	movwf	(?_rand+1)& (0+255),b
 14958  00438E  0012               	return	
 14959  004390                     __end_of_rand:
 14960                           	opt stack 0
 14961                           tblptru	equ	0xFF8
 14962                           tblptrh	equ	0xFF7
 14963                           tblptrl	equ	0xFF6
 14964                           tablat	equ	0xFF5
 14965                           prodh	equ	0xFF4
 14966                           prodl	equ	0xFF3
 14967                           intcon	equ	0xFF2
 14968                           intcon3	equ	0xFF0
 14969                           indf0	equ	0xFEF
 14970                           postinc0	equ	0xFEE
 14971                           plusw0	equ	0xFEB
 14972                           fsr0h	equ	0xFEA
 14973                           fsr0l	equ	0xFE9
 14974                           wreg	equ	0xFE8
 14975                           indf1	equ	0xFE7
 14976                           postinc1	equ	0xFE6
 14977                           postdec1	equ	0xFE5
 14978                           plusw1	equ	0xFE3
 14979                           fsr1h	equ	0xFE2
 14980                           fsr1l	equ	0xFE1
 14981                           indf2	equ	0xFDF
 14982                           postinc2	equ	0xFDE
 14983                           postdec2	equ	0xFDD
 14984                           plusw2	equ	0xFDB
 14985                           fsr2h	equ	0xFDA
 14986                           fsr2l	equ	0xFD9
 14987                           status	equ	0xFD8
 14988                           
 14989 ;; *************** function ___lmul *****************
 14990 ;; Defined at:
 14991 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 14992 ;; Parameters:    Size  Location     Type
 14993 ;;  multiplier      4    0[BANK0 ] unsigned long 
 14994 ;;  multiplicand    4    4[BANK0 ] unsigned long 
 14995 ;; Auto vars:     Size  Location     Type
 14996 ;;  product         4    8[BANK0 ] unsigned long 
 14997 ;; Return value:  Size  Location     Type
 14998 ;;                  4    0[BANK0 ] unsigned long 
 14999 ;; Registers used:
 15000 ;;		wreg, status,2, status,0
 15001 ;; Tracked objects:
 15002 ;;		On entry : 0/0
 15003 ;;		On exit  : 0/0
 15004 ;;		Unchanged: 0/0
 15005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15006 ;;      Params:         0       8       0       0       0       0       0       0       0
 15007 ;;      Locals:         0       4       0       0       0       0       0       0       0
 15008 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15009 ;;      Totals:         0      12       0       0       0       0       0       0       0
 15010 ;;Total ram usage:       12 bytes
 15011 ;; Hardware stack levels used:    1
 15012 ;; Hardware stack levels required when called:    4
 15013 ;; This function calls:
 15014 ;;		Nothing
 15015 ;; This function is called by:
 15016 ;;		_rand
 15017 ;; This function uses a non-reentrant model
 15018 ;;
 15019                           
 15020                           	psect	text57
 15021  0042E2                     __ptext57:
 15022                           	opt stack 0
 15023  0042E2                     ___lmul:
 15024                           	opt stack 22
 15025                           
 15026                           ; BSR set to: 0
 15027                           ;incstack = 0
 15028  0042E2  0E00               	movlw	0
 15029  0042E4  0100               	movlb	0	; () banked
 15030  0042E6  6F68               	movwf	___lmul@product& (0+255),b
 15031  0042E8  0E00               	movlw	0
 15032  0042EA  6F69               	movwf	(___lmul@product+1)& (0+255),b
 15033  0042EC  0E00               	movlw	0
 15034  0042EE  6F6A               	movwf	(___lmul@product+2)& (0+255),b
 15035  0042F0  0E00               	movlw	0
 15036  0042F2  6F6B               	movwf	(___lmul@product+3)& (0+255),b
 15037  0042F4                     
 15038                           ; BSR set to: 0
 15039                           
 15040                           ; BSR set to: 0
 15041  0042F4  A160               	btfss	___lmul@multiplier& (0+255),0,b
 15042  0042F6  D008               	goto	l1164
 15043                           
 15044                           ; BSR set to: 0
 15045  0042F8  5164               	movf	___lmul@multiplicand& (0+255),w,b
 15046  0042FA  2768               	addwf	___lmul@product& (0+255),f,b
 15047  0042FC  5165               	movf	(___lmul@multiplicand+1)& (0+255),w,b
 15048  0042FE  2369               	addwfc	(___lmul@product+1)& (0+255),f,b
 15049  004300  5166               	movf	(___lmul@multiplicand+2)& (0+255),w,b
 15050  004302  236A               	addwfc	(___lmul@product+2)& (0+255),f,b
 15051  004304  5167               	movf	(___lmul@multiplicand+3)& (0+255),w,b
 15052  004306  236B               	addwfc	(___lmul@product+3)& (0+255),f,b
 15053  004308                     l1164:
 15054                           
 15055                           ; BSR set to: 0
 15056                           
 15057                           ; BSR set to: 0
 15058  004308  90D8               	bcf	status,0,c
 15059  00430A  3764               	rlcf	___lmul@multiplicand& (0+255),f,b
 15060  00430C  3765               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
 15061  00430E  3766               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
 15062  004310  3767               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
 15063                           
 15064                           ; BSR set to: 0
 15065  004312  90D8               	bcf	status,0,c
 15066  004314  3363               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
 15067  004316  3362               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
 15068  004318  3361               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
 15069  00431A  3360               	rrcf	___lmul@multiplier& (0+255),f,b
 15070  00431C  5160               	movf	___lmul@multiplier& (0+255),w,b
 15071  00431E  1161               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
 15072  004320  1162               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
 15073  004322  1163               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
 15074  004324  A4D8               	btfss	status,2,c
 15075  004326  D7E6               	goto	l1163
 15076                           
 15077                           ; BSR set to: 0
 15078  004328  C068  F060         	movff	___lmul@product,?___lmul
 15079  00432C  C069  F061         	movff	___lmul@product+1,?___lmul+1
 15080  004330  C06A  F062         	movff	___lmul@product+2,?___lmul+2
 15081  004334  C06B  F063         	movff	___lmul@product+3,?___lmul+3
 15082                           
 15083                           ; BSR set to: 0
 15084  004338  0012               	return		;funcret
 15085  00433A                     __end_of___lmul:
 15086                           	opt stack 0
 15087                           tblptru	equ	0xFF8
 15088                           tblptrh	equ	0xFF7
 15089                           tblptrl	equ	0xFF6
 15090                           tablat	equ	0xFF5
 15091                           prodh	equ	0xFF4
 15092                           prodl	equ	0xFF3
 15093                           intcon	equ	0xFF2
 15094                           intcon3	equ	0xFF0
 15095                           indf0	equ	0xFEF
 15096                           postinc0	equ	0xFEE
 15097                           plusw0	equ	0xFEB
 15098                           fsr0h	equ	0xFEA
 15099                           fsr0l	equ	0xFE9
 15100                           wreg	equ	0xFE8
 15101                           indf1	equ	0xFE7
 15102                           postinc1	equ	0xFE6
 15103                           postdec1	equ	0xFE5
 15104                           plusw1	equ	0xFE3
 15105                           fsr1h	equ	0xFE2
 15106                           fsr1l	equ	0xFE1
 15107                           indf2	equ	0xFDF
 15108                           postinc2	equ	0xFDE
 15109                           postdec2	equ	0xFDD
 15110                           plusw2	equ	0xFDB
 15111                           fsr2h	equ	0xFDA
 15112                           fsr2l	equ	0xFD9
 15113                           status	equ	0xFD8
 15114                           
 15115 ;; *************** function _ipv4_setToAllZero *****************
 15116 ;; Defined at:
 15117 ;;		line 314 in file "src/stack/protocols/ipv4.c"
 15118 ;; Parameters:    Size  Location     Type
 15119 ;;  ip              2    0[BANK0 ] PTR struct ipv4_address
 15120 ;;		 -> arp_init@ip(4), arp_probe@ipSender(4), 
 15121 ;; Auto vars:     Size  Location     Type
 15122 ;;  i               1    2[BANK0 ] unsigned char 
 15123 ;; Return value:  Size  Location     Type
 15124 ;;                  1    wreg      void 
 15125 ;; Registers used:
 15126 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15127 ;; Tracked objects:
 15128 ;;		On entry : 0/0
 15129 ;;		On exit  : 0/0
 15130 ;;		Unchanged: 0/0
 15131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15132 ;;      Params:         0       2       0       0       0       0       0       0       0
 15133 ;;      Locals:         0       1       0       0       0       0       0       0       0
 15134 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15135 ;;      Totals:         0       3       0       0       0       0       0       0       0
 15136 ;;Total ram usage:        3 bytes
 15137 ;; Hardware stack levels used:    1
 15138 ;; Hardware stack levels required when called:    4
 15139 ;; This function calls:
 15140 ;;		Nothing
 15141 ;; This function is called by:
 15142 ;;		_arp_probe
 15143 ;;		_arp_init
 15144 ;; This function uses a non-reentrant model
 15145 ;;
 15146                           
 15147                           	psect	text58
 15148  004BB4                     __ptext58:
 15149                           	opt stack 0
 15150  004BB4                     _ipv4_setToAllZero:
 15151                           	opt stack 24
 15152                           
 15153                           ;ipv4.c: 315: for (uint8_t i = 0; i < 4; i++) {
 15154                           
 15155                           ; BSR set to: 0
 15156                           ;incstack = 0
 15157  004BB4  0E00               	movlw	0
 15158  004BB6  0100               	movlb	0	; () banked
 15159  004BB8  6F62               	movwf	ipv4_setToAllZero@i& (0+255),b
 15160  004BBA                     l8857:
 15161                           
 15162                           ; BSR set to: 0
 15163  004BBA  0E03               	movlw	3
 15164  004BBC  6562               	cpfsgt	ipv4_setToAllZero@i& (0+255),b
 15165  004BBE  D001               	goto	l1138
 15166  004BC0  0012               	return	
 15167  004BC2                     l1138:
 15168                           
 15169                           ; BSR set to: 0
 15170                           ;ipv4.c: 316: ip->address[0] = 0x00;
 15171                           
 15172                           ; BSR set to: 0
 15173  004BC2  C060  FFD9         	movff	ipv4_setToAllZero@ip,fsr2l
 15174  004BC6  C061  FFDA         	movff	ipv4_setToAllZero@ip+1,fsr2h
 15175  004BCA  0E00               	movlw	0
 15176  004BCC  6EDF               	movwf	indf2,c
 15177                           
 15178                           ; BSR set to: 0
 15179  004BCE  2B62               	incf	ipv4_setToAllZero@i& (0+255),f,b
 15180  004BD0  D7F4               	goto	l8857
 15181  004BD2                     __end_of_ipv4_setToAllZero:
 15182                           	opt stack 0
 15183                           tblptru	equ	0xFF8
 15184                           tblptrh	equ	0xFF7
 15185                           tblptrl	equ	0xFF6
 15186                           tablat	equ	0xFF5
 15187                           prodh	equ	0xFF4
 15188                           prodl	equ	0xFF3
 15189                           intcon	equ	0xFF2
 15190                           intcon3	equ	0xFF0
 15191                           indf0	equ	0xFEF
 15192                           postinc0	equ	0xFEE
 15193                           plusw0	equ	0xFEB
 15194                           fsr0h	equ	0xFEA
 15195                           fsr0l	equ	0xFE9
 15196                           wreg	equ	0xFE8
 15197                           indf1	equ	0xFE7
 15198                           postinc1	equ	0xFE6
 15199                           postdec1	equ	0xFE5
 15200                           plusw1	equ	0xFE3
 15201                           fsr1h	equ	0xFE2
 15202                           fsr1l	equ	0xFE1
 15203                           indf2	equ	0xFDF
 15204                           postinc2	equ	0xFDE
 15205                           postdec2	equ	0xFDD
 15206                           plusw2	equ	0xFDB
 15207                           fsr2h	equ	0xFDA
 15208                           fsr2l	equ	0xFD9
 15209                           status	equ	0xFD8
 15210                           
 15211 ;; *************** function _arp_checkForEntry *****************
 15212 ;; Defined at:
 15213 ;;		line 383 in file "src/stack/protocols/arp.c"
 15214 ;; Parameters:    Size  Location     Type
 15215 ;;  ip              4    7[BANK0 ] struct ipv4_address
 15216 ;;  index           2   11[BANK0 ] PTR unsigned char 
 15217 ;;		 -> arp_probe@index(1), 
 15218 ;; Auto vars:     Size  Location     Type
 15219 ;;  i               1   21[BANK0 ] unsigned char 
 15220 ;; Return value:  Size  Location     Type
 15221 ;;                  1    wreg      unsigned char 
 15222 ;; Registers used:
 15223 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15224 ;; Tracked objects:
 15225 ;;		On entry : 0/0
 15226 ;;		On exit  : 0/0
 15227 ;;		Unchanged: 0/0
 15228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15229 ;;      Params:         0       6       0       0       0       0       0       0       0
 15230 ;;      Locals:         0       1       0       0       0       0       0       0       0
 15231 ;;      Temps:          0       8       0       0       0       0       0       0       0
 15232 ;;      Totals:         0      15       0       0       0       0       0       0       0
 15233 ;;Total ram usage:       15 bytes
 15234 ;; Hardware stack levels used:    1
 15235 ;; Hardware stack levels required when called:    5
 15236 ;; This function calls:
 15237 ;;		_getMillis
 15238 ;;		_ipv4_cmp
 15239 ;; This function is called by:
 15240 ;;		_arp_probe
 15241 ;; This function uses a non-reentrant model
 15242 ;;
 15243                           
 15244                           	psect	text59
 15245  0036B4                     __ptext59:
 15246                           	opt stack 0
 15247  0036B4                     _arp_checkForEntry:
 15248                           	opt stack 22
 15249                           
 15250                           ;arp.c: 384: for (uint8_t i = 0; i < 8u; i++) {
 15251                           
 15252                           ; BSR set to: 0
 15253                           ;incstack = 0
 15254  0036B4  0E00               	movlw	0
 15255  0036B6  0100               	movlb	0	; () banked
 15256  0036B8  6F75               	movwf	arp_checkForEntry@i& (0+255),b
 15257  0036BA                     l8833:
 15258                           
 15259                           ; BSR set to: 0
 15260  0036BA  0E07               	movlw	7
 15261  0036BC  6575               	cpfsgt	arp_checkForEntry@i& (0+255),b
 15262  0036BE  D001               	goto	l1014
 15263  0036C0  D050               	goto	u10490
 15264  0036C2                     l1014:
 15265                           
 15266                           ; BSR set to: 0
 15267                           ;arp.c: 385: if (ipv4_cmp(&arp_table[i].ip, &ip)) {
 15268                           
 15269                           ; BSR set to: 0
 15270  0036C2  5175               	movf	arp_checkForEntry@i& (0+255),w,b
 15271  0036C4  0D0E               	mullw	14
 15272  0036C6  0E0F               	movlw	low _arp_table
 15273  0036C8  24F3               	addwf	prodl,w,c
 15274  0036CA  6F60               	movwf	ipv4_cmp@a& (0+255),b
 15275  0036CC  0E02               	movlw	high _arp_table
 15276  0036CE  20F4               	addwfc	prodh,w,c
 15277  0036D0  6F61               	movwf	(ipv4_cmp@a+1)& (0+255),b
 15278  0036D2  0E67               	movlw	low arp_checkForEntry@ip
 15279  0036D4  6F62               	movwf	ipv4_cmp@b& (0+255),b
 15280  0036D6  0E00               	movlw	high arp_checkForEntry@ip
 15281  0036D8  6F63               	movwf	(ipv4_cmp@b+1)& (0+255),b
 15282  0036DA  EC95  F023         	call	_ipv4_cmp	;wreg free
 15283  0036DE  0100               	movlb	0	; () banked
 15284  0036E0  A0D8               	btfss	status,0,c
 15285  0036E2  D03D               	goto	l1017
 15286                           
 15287                           ; BSR set to: 0
 15288                           ;arp.c: 386: if (getMillis() - arp_table[i].timeCreated < 30000u) {
 15289  0036E4  5175               	movf	arp_checkForEntry@i& (0+255),w,b
 15290  0036E6  0D0E               	mullw	14
 15291  0036E8  0E0A               	movlw	10
 15292  0036EA  26F3               	addwf	prodl,f,c
 15293  0036EC  0E00               	movlw	0
 15294  0036EE  22F4               	addwfc	prodh,f,c
 15295  0036F0  0E0F               	movlw	low _arp_table
 15296  0036F2  24F3               	addwf	prodl,w,c
 15297  0036F4  6ED9               	movwf	fsr2l,c
 15298  0036F6  0E02               	movlw	high _arp_table
 15299  0036F8  20F4               	addwfc	prodh,w,c
 15300  0036FA  6EDA               	movwf	fsr2h,c
 15301  0036FC  CFDE F06D          	movff	postinc2,??_arp_checkForEntry
 15302  003700  CFDE F06E          	movff	postinc2,??_arp_checkForEntry+1
 15303  003704  CFDE F06F          	movff	postinc2,??_arp_checkForEntry+2
 15304  003708  CFDE F070          	movff	postinc2,??_arp_checkForEntry+3
 15305  00370C  1F6D               	comf	??_arp_checkForEntry& (0+255),f,b
 15306  00370E  1F6E               	comf	(??_arp_checkForEntry+1)& (0+255),f,b
 15307  003710  1F6F               	comf	(??_arp_checkForEntry+2)& (0+255),f,b
 15308  003712  1F70               	comf	(??_arp_checkForEntry+3)& (0+255),f,b
 15309  003714  2B6D               	incf	??_arp_checkForEntry& (0+255),f,b
 15310  003716  0E00               	movlw	0
 15311  003718  236E               	addwfc	(??_arp_checkForEntry+1)& (0+255),f,b
 15312  00371A  236F               	addwfc	(??_arp_checkForEntry+2)& (0+255),f,b
 15313  00371C  2370               	addwfc	(??_arp_checkForEntry+3)& (0+255),f,b
 15314  00371E  EC39  F026         	call	_getMillis	;wreg free
 15315  003722  0100               	movlb	0	; () banked
 15316  003724  516D               	movf	??_arp_checkForEntry& (0+255),w,b
 15317  003726  2560               	addwf	?_getMillis& (0+255),w,b
 15318  003728  6F71               	movwf	(??_arp_checkForEntry+4)& (0+255),b
 15319  00372A  516E               	movf	(??_arp_checkForEntry+1)& (0+255),w,b
 15320  00372C  2161               	addwfc	(?_getMillis+1)& (0+255),w,b
 15321  00372E  6F72               	movwf	(??_arp_checkForEntry+5)& (0+255),b
 15322  003730  516F               	movf	(??_arp_checkForEntry+2)& (0+255),w,b
 15323  003732  2162               	addwfc	(?_getMillis+2)& (0+255),w,b
 15324  003734  6F73               	movwf	(??_arp_checkForEntry+6)& (0+255),b
 15325  003736  5170               	movf	(??_arp_checkForEntry+3)& (0+255),w,b
 15326  003738  2163               	addwfc	(?_getMillis+3)& (0+255),w,b
 15327  00373A  6F74               	movwf	(??_arp_checkForEntry+7)& (0+255),b
 15328  00373C  5174               	movf	(??_arp_checkForEntry+7)& (0+255),w,b
 15329  00373E  1173               	iorwf	(??_arp_checkForEntry+6)& (0+255),w,b
 15330  003740  E10E               	bnz	l8847
 15331  003742  0E30               	movlw	48
 15332  003744  5D71               	subwf	(??_arp_checkForEntry+4)& (0+255),w,b
 15333  003746  0E75               	movlw	117
 15334  003748  5972               	subwfb	(??_arp_checkForEntry+5)& (0+255),w,b
 15335  00374A  B0D8               	btfsc	status,0,c
 15336  00374C  D008               	goto	l1017
 15337                           
 15338                           ; BSR set to: 0
 15339                           ;arp.c: 388: *index = i;
 15340  00374E  C06B  FFD9         	movff	arp_checkForEntry@index,fsr2l
 15341  003752  C06C  FFDA         	movff	arp_checkForEntry@index+1,fsr2h
 15342  003756  C075  FFDF         	movff	arp_checkForEntry@i,indf2
 15343                           
 15344                           ; BSR set to: 0
 15345                           ;arp.c: 390: return 1;
 15346  00375A  0E01               	movlw	1
 15347                           
 15348                           ; BSR set to: 0
 15349  00375C  0012               	return	
 15350  00375E                     l1017:
 15351  00375E                     l8847:
 15352                           
 15353                           ; BSR set to: 0
 15354  00375E  2B75               	incf	arp_checkForEntry@i& (0+255),f,b
 15355  003760  D7AC               	goto	l8833
 15356  003762                     u10490:
 15357                           
 15358                           ; BSR set to: 0
 15359                           ;arp.c: 391: }
 15360                           ;arp.c: 392: }
 15361                           ;arp.c: 393: }
 15362                           ;arp.c: 394: return 0;
 15363                           
 15364                           ; BSR set to: 0
 15365  003762  0E00               	movlw	0
 15366  003764  0012               	return	
 15367  003766                     __end_of_arp_checkForEntry:
 15368                           	opt stack 0
 15369                           tblptru	equ	0xFF8
 15370                           tblptrh	equ	0xFF7
 15371                           tblptrl	equ	0xFF6
 15372                           tablat	equ	0xFF5
 15373                           prodh	equ	0xFF4
 15374                           prodl	equ	0xFF3
 15375                           intcon	equ	0xFF2
 15376                           intcon3	equ	0xFF0
 15377                           indf0	equ	0xFEF
 15378                           postinc0	equ	0xFEE
 15379                           plusw0	equ	0xFEB
 15380                           fsr0h	equ	0xFEA
 15381                           fsr0l	equ	0xFE9
 15382                           wreg	equ	0xFE8
 15383                           indf1	equ	0xFE7
 15384                           postinc1	equ	0xFE6
 15385                           postdec1	equ	0xFE5
 15386                           plusw1	equ	0xFE3
 15387                           fsr1h	equ	0xFE2
 15388                           fsr1l	equ	0xFE1
 15389                           indf2	equ	0xFDF
 15390                           postinc2	equ	0xFDE
 15391                           postdec2	equ	0xFDD
 15392                           plusw2	equ	0xFDB
 15393                           fsr2h	equ	0xFDA
 15394                           fsr2l	equ	0xFD9
 15395                           status	equ	0xFD8
 15396                           
 15397 ;; *************** function _ipv4_cmp *****************
 15398 ;; Defined at:
 15399 ;;		line 298 in file "src/stack/protocols/ipv4.c"
 15400 ;; Parameters:    Size  Location     Type
 15401 ;;  a               2    0[BANK0 ] PTR struct ipv4_address
 15402 ;;		 -> arp_table(112), arp_sendReply@request(32), arp_parseFromRXBuffer@arp(32), 
 15403 ;;  b               2    2[BANK0 ] PTR struct ipv4_address
 15404 ;;		 -> arp_checkForEntry@ip(4), arp_sendReply@myIP(4), arp_parseFromRXBuffer@arp(32), 
 15405 ;; Auto vars:     Size  Location     Type
 15406 ;;  i               1    6[BANK0 ] unsigned char 
 15407 ;; Return value:  Size  Location     Type
 15408 ;;		None               void
 15409 ;; Registers used:
 15410 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15411 ;; Tracked objects:
 15412 ;;		On entry : 0/0
 15413 ;;		On exit  : 0/0
 15414 ;;		Unchanged: 0/0
 15415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15416 ;;      Params:         0       4       0       0       0       0       0       0       0
 15417 ;;      Locals:         0       1       0       0       0       0       0       0       0
 15418 ;;      Temps:          0       2       0       0       0       0       0       0       0
 15419 ;;      Totals:         0       7       0       0       0       0       0       0       0
 15420 ;;Total ram usage:        7 bytes
 15421 ;; Hardware stack levels used:    1
 15422 ;; Hardware stack levels required when called:    4
 15423 ;; This function calls:
 15424 ;;		Nothing
 15425 ;; This function is called by:
 15426 ;;		_arp_parseFromRXBuffer
 15427 ;;		_arp_sendReply
 15428 ;;		_arp_checkForEntry
 15429 ;; This function uses a non-reentrant model
 15430 ;;
 15431                           
 15432                           	psect	text60
 15433  00472A                     __ptext60:
 15434                           	opt stack 0
 15435  00472A                     _ipv4_cmp:
 15436                           	opt stack 22
 15437                           
 15438                           ;ipv4.c: 299: for (uint8_t i = 0; i < 4; i++) {
 15439                           
 15440                           ; BSR set to: 0
 15441                           ;incstack = 0
 15442  00472A  0E00               	movlw	0
 15443  00472C  0100               	movlb	0	; () banked
 15444  00472E  6F66               	movwf	ipv4_cmp@i& (0+255),b
 15445  004730                     l8475:
 15446                           
 15447                           ; BSR set to: 0
 15448  004730  0E03               	movlw	3
 15449  004732  6566               	cpfsgt	ipv4_cmp@i& (0+255),b
 15450  004734  D001               	goto	l1126
 15451  004736  D018               	goto	u9480
 15452  004738                     l1126:
 15453                           
 15454                           ; BSR set to: 0
 15455                           ;ipv4.c: 300: if (a->address[i] != b->address[i])
 15456                           
 15457                           ; BSR set to: 0
 15458  004738  5166               	movf	ipv4_cmp@i& (0+255),w,b
 15459  00473A  0D01               	mullw	1
 15460  00473C  50F3               	movf	prodl,w,c
 15461  00473E  2562               	addwf	ipv4_cmp@b& (0+255),w,b
 15462  004740  6ED9               	movwf	fsr2l,c
 15463  004742  50F4               	movf	prodh,w,c
 15464  004744  2163               	addwfc	(ipv4_cmp@b+1)& (0+255),w,b
 15465  004746  6EDA               	movwf	fsr2h,c
 15466  004748  5166               	movf	ipv4_cmp@i& (0+255),w,b
 15467  00474A  0D01               	mullw	1
 15468  00474C  50F3               	movf	prodl,w,c
 15469  00474E  2560               	addwf	ipv4_cmp@a& (0+255),w,b
 15470  004750  6EE1               	movwf	fsr1l,c
 15471  004752  50F4               	movf	prodh,w,c
 15472  004754  2161               	addwfc	(ipv4_cmp@a+1)& (0+255),w,b
 15473  004756  6EE2               	movwf	fsr1h,c
 15474  004758  50DE               	movf	postinc2,w,c
 15475  00475A  18E6               	xorwf	postinc1,w,c
 15476  00475C  B4D8               	btfsc	status,2,c
 15477  00475E  D002               	goto	l1128
 15478                           
 15479                           ; BSR set to: 0
 15480                           ;ipv4.c: 301: return 0;
 15481  004760  90D8               	bcf	status,0,c
 15482                           
 15483                           ; BSR set to: 0
 15484  004762  0012               	return	
 15485  004764                     l1128:
 15486                           
 15487                           ; BSR set to: 0
 15488                           
 15489                           ; BSR set to: 0
 15490  004764  2B66               	incf	ipv4_cmp@i& (0+255),f,b
 15491  004766  D7E4               	goto	l8475
 15492  004768                     u9480:
 15493                           
 15494                           ; BSR set to: 0
 15495                           ;ipv4.c: 302: }
 15496                           ;ipv4.c: 303: return 1;
 15497                           
 15498                           ; BSR set to: 0
 15499  004768  80D8               	bsf	status,0,c
 15500  00476A  0012               	return	
 15501  00476C                     __end_of_ipv4_cmp:
 15502                           	opt stack 0
 15503                           tblptru	equ	0xFF8
 15504                           tblptrh	equ	0xFF7
 15505                           tblptrl	equ	0xFF6
 15506                           tablat	equ	0xFF5
 15507                           prodh	equ	0xFF4
 15508                           prodl	equ	0xFF3
 15509                           intcon	equ	0xFF2
 15510                           intcon3	equ	0xFF0
 15511                           indf0	equ	0xFEF
 15512                           postinc0	equ	0xFEE
 15513                           plusw0	equ	0xFEB
 15514                           fsr0h	equ	0xFEA
 15515                           fsr0l	equ	0xFE9
 15516                           wreg	equ	0xFE8
 15517                           indf1	equ	0xFE7
 15518                           postinc1	equ	0xFE6
 15519                           postdec1	equ	0xFE5
 15520                           plusw1	equ	0xFE3
 15521                           fsr1h	equ	0xFE2
 15522                           fsr1l	equ	0xFE1
 15523                           indf2	equ	0xFDF
 15524                           postinc2	equ	0xFDE
 15525                           postdec2	equ	0xFDD
 15526                           plusw2	equ	0xFDB
 15527                           fsr2h	equ	0xFDA
 15528                           fsr2l	equ	0xFD9
 15529                           status	equ	0xFD8
 15530                           
 15531 ;; *************** function ___lwmod *****************
 15532 ;; Defined at:
 15533 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 15534 ;; Parameters:    Size  Location     Type
 15535 ;;  dividend        2   14[BANK0 ] unsigned int 
 15536 ;;  divisor         2   16[BANK0 ] unsigned int 
 15537 ;; Auto vars:     Size  Location     Type
 15538 ;;  counter         1   18[BANK0 ] unsigned char 
 15539 ;; Return value:  Size  Location     Type
 15540 ;;                  2   14[BANK0 ] unsigned int 
 15541 ;; Registers used:
 15542 ;;		wreg, status,2, status,0
 15543 ;; Tracked objects:
 15544 ;;		On entry : 0/0
 15545 ;;		On exit  : 0/0
 15546 ;;		Unchanged: 0/0
 15547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15548 ;;      Params:         0       4       0       0       0       0       0       0       0
 15549 ;;      Locals:         0       1       0       0       0       0       0       0       0
 15550 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15551 ;;      Totals:         0       5       0       0       0       0       0       0       0
 15552 ;;Total ram usage:        5 bytes
 15553 ;; Hardware stack levels used:    1
 15554 ;; Hardware stack levels required when called:    4
 15555 ;; This function calls:
 15556 ;;		Nothing
 15557 ;; This function is called by:
 15558 ;;		_ipAdressToString
 15559 ;;		_arp_probe
 15560 ;; This function uses a non-reentrant model
 15561 ;;
 15562                           
 15563                           	psect	text61
 15564  0046A4                     __ptext61:
 15565                           	opt stack 0
 15566  0046A4                     ___lwmod:
 15567                           	opt stack 24
 15568                           
 15569                           ; BSR set to: 0
 15570                           ;incstack = 0
 15571  0046A4  0100               	movlb	0	; () banked
 15572  0046A6  5170               	movf	___lwmod@divisor& (0+255),w,b
 15573  0046A8  1171               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 15574  0046AA  B4D8               	btfsc	status,2,c
 15575  0046AC  D018               	goto	l1584
 15576                           
 15577                           ; BSR set to: 0
 15578  0046AE  0E01               	movlw	1
 15579  0046B0  6F72               	movwf	___lwmod@counter& (0+255),b
 15580  0046B2  D004               	goto	l1579
 15581  0046B4                     
 15582                           ; BSR set to: 0
 15583                           
 15584                           ; BSR set to: 0
 15585  0046B4  90D8               	bcf	status,0,c
 15586  0046B6  3770               	rlcf	___lwmod@divisor& (0+255),f,b
 15587  0046B8  3771               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 15588  0046BA  2B72               	incf	___lwmod@counter& (0+255),f,b
 15589  0046BC                     l1579:
 15590                           
 15591                           ; BSR set to: 0
 15592                           
 15593                           ; BSR set to: 0
 15594  0046BC  AF71               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 15595  0046BE  D7FA               	goto	l1580
 15596  0046C0                     u9120:
 15597                           
 15598                           ; BSR set to: 0
 15599                           
 15600                           ; BSR set to: 0
 15601                           
 15602                           ; BSR set to: 0
 15603  0046C0  5170               	movf	___lwmod@divisor& (0+255),w,b
 15604  0046C2  5D6E               	subwf	___lwmod@dividend& (0+255),w,b
 15605  0046C4  5171               	movf	(___lwmod@divisor+1)& (0+255),w,b
 15606  0046C6  596F               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 15607  0046C8  A0D8               	btfss	status,0,c
 15608  0046CA  D004               	goto	l1583
 15609                           
 15610                           ; BSR set to: 0
 15611  0046CC  5170               	movf	___lwmod@divisor& (0+255),w,b
 15612  0046CE  5F6E               	subwf	___lwmod@dividend& (0+255),f,b
 15613  0046D0  5171               	movf	(___lwmod@divisor+1)& (0+255),w,b
 15614  0046D2  5B6F               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 15615  0046D4                     l1583:
 15616                           
 15617                           ; BSR set to: 0
 15618                           
 15619                           ; BSR set to: 0
 15620  0046D4  90D8               	bcf	status,0,c
 15621  0046D6  3371               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 15622  0046D8  3370               	rrcf	___lwmod@divisor& (0+255),f,b
 15623                           
 15624                           ; BSR set to: 0
 15625  0046DA  2F72               	decfsz	___lwmod@counter& (0+255),f,b
 15626  0046DC  D7F1               	goto	u9120
 15627  0046DE                     l1584:
 15628                           
 15629                           ; BSR set to: 0
 15630                           
 15631                           ; BSR set to: 0
 15632  0046DE  C06E  F06E         	movff	___lwmod@dividend,?___lwmod
 15633  0046E2  C06F  F06F         	movff	___lwmod@dividend+1,?___lwmod+1
 15634                           
 15635                           ; BSR set to: 0
 15636  0046E6  0012               	return		;funcret
 15637  0046E8                     __end_of___lwmod:
 15638                           	opt stack 0
 15639                           tblptru	equ	0xFF8
 15640                           tblptrh	equ	0xFF7
 15641                           tblptrl	equ	0xFF6
 15642                           tablat	equ	0xFF5
 15643                           prodh	equ	0xFF4
 15644                           prodl	equ	0xFF3
 15645                           intcon	equ	0xFF2
 15646                           intcon3	equ	0xFF0
 15647                           indf0	equ	0xFEF
 15648                           postinc0	equ	0xFEE
 15649                           plusw0	equ	0xFEB
 15650                           fsr0h	equ	0xFEA
 15651                           fsr0l	equ	0xFE9
 15652                           wreg	equ	0xFE8
 15653                           indf1	equ	0xFE7
 15654                           postinc1	equ	0xFE6
 15655                           postdec1	equ	0xFE5
 15656                           plusw1	equ	0xFE3
 15657                           fsr1h	equ	0xFE2
 15658                           fsr1l	equ	0xFE1
 15659                           indf2	equ	0xFDF
 15660                           postinc2	equ	0xFDE
 15661                           postdec2	equ	0xFDD
 15662                           plusw2	equ	0xFDB
 15663                           fsr2h	equ	0xFDA
 15664                           fsr2l	equ	0xFD9
 15665                           status	equ	0xFD8
 15666                           
 15667 ;; *************** function _arp_gratuitous *****************
 15668 ;; Defined at:
 15669 ;;		line 304 in file "src/stack/protocols/arp.c"
 15670 ;; Parameters:    Size  Location     Type
 15671 ;;  ip              4  156[BANK0 ] struct ipv4_address
 15672 ;; Auto vars:     Size  Location     Type
 15673 ;;  err             3   60[BANK1 ] struct error
 15674 ;; Return value:  Size  Location     Type
 15675 ;;                  3  156[BANK0 ] struct error
 15676 ;; Registers used:
 15677 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15678 ;; Tracked objects:
 15679 ;;		On entry : 0/0
 15680 ;;		On exit  : 0/0
 15681 ;;		Unchanged: 0/0
 15682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15683 ;;      Params:         0       4       0       0       0       0       0       0       0
 15684 ;;      Locals:         0       0       3       0       0       0       0       0       0
 15685 ;;      Temps:          0       0       8       0       0       0       0       0       0
 15686 ;;      Totals:         0       4      11       0       0       0       0       0       0
 15687 ;;Total ram usage:       15 bytes
 15688 ;; Hardware stack levels used:    1
 15689 ;; Hardware stack levels required when called:   11
 15690 ;; This function calls:
 15691 ;;		_arp_sendRequest
 15692 ;;		_getMillis
 15693 ;; This function is called by:
 15694 ;;		_arp_background
 15695 ;; This function uses a non-reentrant model
 15696 ;;
 15697                           
 15698                           	psect	text62
 15699  0025BA                     __ptext62:
 15700                           	opt stack 0
 15701  0025BA                     _arp_gratuitous:
 15702                           	opt stack 17
 15703                           
 15704                           ;arp.c: 305: uint8_t static announceCounter = 0;
 15705                           ;arp.c: 306: uint8_t static state = 0;
 15706                           ;arp.c: 307: time_t static timeStart = 0;
 15707                           ;arp.c: 308: error_t err;
 15708                           ;arp.c: 309: err.module = ERROR_MODULE_ARP;
 15709                           
 15710                           ; BSR set to: 0
 15711                           ;incstack = 0
 15712  0025BA  0E03               	movlw	3
 15713  0025BC  0101               	movlb	1	; () banked
 15714  0025BE  6F3C               	movwf	arp_gratuitous@err& (0+255),b
 15715                           
 15716                           ;arp.c: 310: err.code = ERROR_ARP_WAITING;
 15717  0025C0  0E01               	movlw	1
 15718  0025C2  6F3E               	movwf	(arp_gratuitous@err+2)& (0+255),b
 15719  0025C4  0E91               	movlw	145
 15720  0025C6  6F3D               	movwf	(arp_gratuitous@err+1)& (0+255),b
 15721                           
 15722                           ;arp.c: 312: switch (state) {
 15723  0025C8  D0A2               	goto	l985
 15724  0025CA                     
 15725                           ; BSR set to: 1
 15726                           ;arp.c: 314: timeStart = getMillis();
 15727                           
 15728                           ; BSR set to: 1
 15729  0025CA  EC39  F026         	call	_getMillis	;wreg free
 15730  0025CE  C060  F1DB         	movff	?_getMillis,arp_gratuitous@timeStart
 15731  0025D2  C061  F1DC         	movff	?_getMillis+1,arp_gratuitous@timeStart+1
 15732  0025D6  C062  F1DD         	movff	?_getMillis+2,arp_gratuitous@timeStart+2
 15733  0025DA  C063  F1DE         	movff	?_getMillis+3,arp_gratuitous@timeStart+3
 15734                           
 15735                           ;arp.c: 315: state = 1;
 15736  0025DE  0E01               	movlw	1
 15737  0025E0  0101               	movlb	1	; () banked
 15738  0025E2  6FE3               	movwf	arp_gratuitous@state& (0+255),b
 15739                           
 15740                           ;arp.c: 316: break;
 15741  0025E4  D09E               	goto	l987
 15742  0025E6                     
 15743                           ; BSR set to: 1
 15744                           ;arp.c: 318: if ((getMillis() - timeStart) > 2000u) {
 15745                           
 15746                           ; BSR set to: 1
 15747  0025E6  C1DB  F134         	movff	arp_gratuitous@timeStart,??_arp_gratuitous
 15748  0025EA  C1DC  F135         	movff	arp_gratuitous@timeStart+1,??_arp_gratuitous+1
 15749  0025EE  C1DD  F136         	movff	arp_gratuitous@timeStart+2,??_arp_gratuitous+2
 15750  0025F2  C1DE  F137         	movff	arp_gratuitous@timeStart+3,??_arp_gratuitous+3
 15751  0025F6  1F34               	comf	??_arp_gratuitous& (0+255),f,b
 15752  0025F8  1F35               	comf	(??_arp_gratuitous+1)& (0+255),f,b
 15753  0025FA  1F36               	comf	(??_arp_gratuitous+2)& (0+255),f,b
 15754  0025FC  1F37               	comf	(??_arp_gratuitous+3)& (0+255),f,b
 15755  0025FE  2B34               	incf	??_arp_gratuitous& (0+255),f,b
 15756  002600  0E00               	movlw	0
 15757  002602  2335               	addwfc	(??_arp_gratuitous+1)& (0+255),f,b
 15758  002604  2336               	addwfc	(??_arp_gratuitous+2)& (0+255),f,b
 15759  002606  2337               	addwfc	(??_arp_gratuitous+3)& (0+255),f,b
 15760  002608  EC39  F026         	call	_getMillis	;wreg free
 15761  00260C  0101               	movlb	1	; () banked
 15762  00260E  5134               	movf	??_arp_gratuitous& (0+255),w,b
 15763  002610  0100               	movlb	0	; () banked
 15764  002612  2560               	addwf	?_getMillis& (0+255),w,b
 15765  002614  0101               	movlb	1	; () banked
 15766  002616  6F38               	movwf	(??_arp_gratuitous+4)& (0+255),b
 15767  002618  5135               	movf	(??_arp_gratuitous+1)& (0+255),w,b
 15768  00261A  0100               	movlb	0	; () banked
 15769  00261C  2161               	addwfc	(?_getMillis+1)& (0+255),w,b
 15770  00261E  0101               	movlb	1	; () banked
 15771  002620  6F39               	movwf	(??_arp_gratuitous+5)& (0+255),b
 15772  002622  5136               	movf	(??_arp_gratuitous+2)& (0+255),w,b
 15773  002624  0100               	movlb	0	; () banked
 15774  002626  2162               	addwfc	(?_getMillis+2)& (0+255),w,b
 15775  002628  0101               	movlb	1	; () banked
 15776  00262A  6F3A               	movwf	(??_arp_gratuitous+6)& (0+255),b
 15777  00262C  5137               	movf	(??_arp_gratuitous+3)& (0+255),w,b
 15778  00262E  0100               	movlb	0	; () banked
 15779  002630  2163               	addwfc	(?_getMillis+3)& (0+255),w,b
 15780  002632  0101               	movlb	1	; () banked
 15781  002634  6F3B               	movwf	(??_arp_gratuitous+7)& (0+255),b
 15782  002636  513B               	movf	(??_arp_gratuitous+7)& (0+255),w,b
 15783  002638  113A               	iorwf	(??_arp_gratuitous+6)& (0+255),w,b
 15784  00263A  E106               	bnz	u10870
 15785  00263C  0ED1               	movlw	209
 15786  00263E  5D38               	subwf	(??_arp_gratuitous+4)& (0+255),w,b
 15787  002640  0E07               	movlw	7
 15788  002642  5939               	subwfb	(??_arp_gratuitous+5)& (0+255),w,b
 15789  002644  A0D8               	btfss	status,0,c
 15790  002646  D06D               	goto	l987
 15791  002648                     u10870:
 15792                           
 15793                           ; BSR set to: 1
 15794                           ;arp.c: 319: state = 2;
 15795  002648  0E02               	movlw	2
 15796  00264A  6FE3               	movwf	arp_gratuitous@state& (0+255),b
 15797                           
 15798                           ;arp.c: 320: announceCounter = 0;
 15799  00264C  0E00               	movlw	0
 15800  00264E  6FE4               	movwf	arp_gratuitous@announceCounter& (0+255),b
 15801                           
 15802                           ; BSR set to: 1
 15803                           ;arp.c: 321: }
 15804                           ;arp.c: 322: break;
 15805  002650  D068               	goto	l987
 15806  002652                     
 15807                           ; BSR set to: 1
 15808                           ;arp.c: 324: if ((announceCounter == 0) || (getMillis() - timeStart) > 2000u) {
 15809                           
 15810                           ; BSR set to: 1
 15811  002652  51E4               	movf	arp_gratuitous@announceCounter& (0+255),w,b
 15812  002654  B4D8               	btfsc	status,2,c
 15813  002656  D031               	goto	u10890
 15814                           
 15815                           ; BSR set to: 1
 15816  002658  C1DB  F134         	movff	arp_gratuitous@timeStart,??_arp_gratuitous
 15817  00265C  C1DC  F135         	movff	arp_gratuitous@timeStart+1,??_arp_gratuitous+1
 15818  002660  C1DD  F136         	movff	arp_gratuitous@timeStart+2,??_arp_gratuitous+2
 15819  002664  C1DE  F137         	movff	arp_gratuitous@timeStart+3,??_arp_gratuitous+3
 15820  002668  1F34               	comf	??_arp_gratuitous& (0+255),f,b
 15821  00266A  1F35               	comf	(??_arp_gratuitous+1)& (0+255),f,b
 15822  00266C  1F36               	comf	(??_arp_gratuitous+2)& (0+255),f,b
 15823  00266E  1F37               	comf	(??_arp_gratuitous+3)& (0+255),f,b
 15824  002670  2B34               	incf	??_arp_gratuitous& (0+255),f,b
 15825  002672  0E00               	movlw	0
 15826  002674  2335               	addwfc	(??_arp_gratuitous+1)& (0+255),f,b
 15827  002676  2336               	addwfc	(??_arp_gratuitous+2)& (0+255),f,b
 15828  002678  2337               	addwfc	(??_arp_gratuitous+3)& (0+255),f,b
 15829  00267A  EC39  F026         	call	_getMillis	;wreg free
 15830  00267E  0101               	movlb	1	; () banked
 15831  002680  5134               	movf	??_arp_gratuitous& (0+255),w,b
 15832  002682  0100               	movlb	0	; () banked
 15833  002684  2560               	addwf	?_getMillis& (0+255),w,b
 15834  002686  0101               	movlb	1	; () banked
 15835  002688  6F38               	movwf	(??_arp_gratuitous+4)& (0+255),b
 15836  00268A  5135               	movf	(??_arp_gratuitous+1)& (0+255),w,b
 15837  00268C  0100               	movlb	0	; () banked
 15838  00268E  2161               	addwfc	(?_getMillis+1)& (0+255),w,b
 15839  002690  0101               	movlb	1	; () banked
 15840  002692  6F39               	movwf	(??_arp_gratuitous+5)& (0+255),b
 15841  002694  5136               	movf	(??_arp_gratuitous+2)& (0+255),w,b
 15842  002696  0100               	movlb	0	; () banked
 15843  002698  2162               	addwfc	(?_getMillis+2)& (0+255),w,b
 15844  00269A  0101               	movlb	1	; () banked
 15845  00269C  6F3A               	movwf	(??_arp_gratuitous+6)& (0+255),b
 15846  00269E  5137               	movf	(??_arp_gratuitous+3)& (0+255),w,b
 15847  0026A0  0100               	movlb	0	; () banked
 15848  0026A2  2163               	addwfc	(?_getMillis+3)& (0+255),w,b
 15849  0026A4  0101               	movlb	1	; () banked
 15850  0026A6  6F3B               	movwf	(??_arp_gratuitous+7)& (0+255),b
 15851  0026A8  513B               	movf	(??_arp_gratuitous+7)& (0+255),w,b
 15852  0026AA  113A               	iorwf	(??_arp_gratuitous+6)& (0+255),w,b
 15853  0026AC  E106               	bnz	l9235
 15854  0026AE  0ED1               	movlw	209
 15855  0026B0  5D38               	subwf	(??_arp_gratuitous+4)& (0+255),w,b
 15856  0026B2  0E07               	movlw	7
 15857  0026B4  5939               	subwfb	(??_arp_gratuitous+5)& (0+255),w,b
 15858  0026B6  A0D8               	btfss	status,0,c
 15859  0026B8  D01E               	goto	l991
 15860  0026BA                     u10890:
 15861  0026BA                     l9235:
 15862                           
 15863                           ; BSR set to: 1
 15864                           ;arp.c: 325: timeStart = getMillis();
 15865  0026BA  EC39  F026         	call	_getMillis	;wreg free
 15866  0026BE  C060  F1DB         	movff	?_getMillis,arp_gratuitous@timeStart
 15867  0026C2  C061  F1DC         	movff	?_getMillis+1,arp_gratuitous@timeStart+1
 15868  0026C6  C062  F1DD         	movff	?_getMillis+2,arp_gratuitous@timeStart+2
 15869  0026CA  C063  F1DE         	movff	?_getMillis+3,arp_gratuitous@timeStart+3
 15870                           
 15871                           ;arp.c: 326: arp_sendRequest(ip, ip);
 15872  0026CE  C0FC  F100         	movff	arp_gratuitous@ip,arp_sendRequest@ipSender
 15873  0026D2  C0FD  F101         	movff	arp_gratuitous@ip+1,arp_sendRequest@ipSender+1
 15874  0026D6  C0FE  F102         	movff	arp_gratuitous@ip+2,arp_sendRequest@ipSender+2
 15875  0026DA  C0FF  F103         	movff	arp_gratuitous@ip+3,arp_sendRequest@ipSender+3
 15876  0026DE  C0FC  F104         	movff	arp_gratuitous@ip,arp_sendRequest@ipTarget
 15877  0026E2  C0FD  F105         	movff	arp_gratuitous@ip+1,arp_sendRequest@ipTarget+1
 15878  0026E6  C0FE  F106         	movff	arp_gratuitous@ip+2,arp_sendRequest@ipTarget+2
 15879  0026EA  C0FF  F107         	movff	arp_gratuitous@ip+3,arp_sendRequest@ipTarget+3
 15880  0026EE  ECB3  F01B         	call	_arp_sendRequest	;wreg free
 15881                           
 15882                           ;arp.c: 327: announceCounter++;
 15883  0026F2  0101               	movlb	1	; () banked
 15884  0026F4  2BE4               	incf	arp_gratuitous@announceCounter& (0+255),f,b
 15885  0026F6                     l991:
 15886                           
 15887                           ; BSR set to: 1
 15888                           ;arp.c: 328: }
 15889                           ;arp.c: 329: if (announceCounter >= 2u) {
 15890                           
 15891                           ; BSR set to: 1
 15892  0026F6  0E01               	movlw	1
 15893  0026F8  65E4               	cpfsgt	arp_gratuitous@announceCounter& (0+255),b
 15894  0026FA  D013               	goto	l987
 15895                           
 15896                           ; BSR set to: 1
 15897                           ;arp.c: 331: announceCounter = 0;
 15898  0026FC  0E00               	movlw	0
 15899  0026FE  6FE4               	movwf	arp_gratuitous@announceCounter& (0+255),b
 15900                           
 15901                           ;arp.c: 332: state = 0;
 15902  002700  0E00               	movlw	0
 15903  002702  6FE3               	movwf	arp_gratuitous@state& (0+255),b
 15904                           
 15905                           ;arp.c: 333: err.code = (uint16_t)0;
 15906  002704  0E00               	movlw	0
 15907  002706  6F3E               	movwf	(arp_gratuitous@err+2)& (0+255),b
 15908  002708  0E00               	movlw	0
 15909  00270A  6F3D               	movwf	(arp_gratuitous@err+1)& (0+255),b
 15910                           
 15911                           ; BSR set to: 1
 15912                           ;arp.c: 336: }
 15913                           
 15914                           ; BSR set to: 1
 15915                           ;arp.c: 334: }
 15916                           ;arp.c: 335: break;
 15917  00270C  D00A               	goto	l987
 15918  00270E                     l985:
 15919                           
 15920                           ; BSR set to: 1
 15921                           
 15922                           ; BSR set to: 1
 15923  00270E  51E3               	movf	arp_gratuitous@state& (0+255),w,b
 15924                           
 15925                           ; Switch size 1, requested type "space"
 15926                           ; Number of cases is 3, Range of values is 0 to 2
 15927                           ; switch strategies available:
 15928                           ; Name         Instructions Cycles
 15929                           ; simple_byte           10     6 (average)
 15930                           ;	Chosen strategy is simple_byte
 15931  002710  0A00               	xorlw	0	; case 0
 15932  002712  B4D8               	btfsc	status,2,c
 15933  002714  D75A               	goto	l986
 15934  002716  0A01               	xorlw	1	; case 1
 15935  002718  B4D8               	btfsc	status,2,c
 15936  00271A  D765               	goto	l988
 15937  00271C  0A03               	xorlw	3	; case 2
 15938  00271E  B4D8               	btfsc	status,2,c
 15939  002720  D798               	goto	l990
 15940  002722                     l987:
 15941                           
 15942                           ; BSR set to: 1
 15943                           ;arp.c: 337: return err;
 15944  002722  C13C  F0FC         	movff	arp_gratuitous@err,?_arp_gratuitous
 15945  002726  C13D  F0FD         	movff	arp_gratuitous@err+1,?_arp_gratuitous+1
 15946  00272A  C13E  F0FE         	movff	arp_gratuitous@err+2,?_arp_gratuitous+2
 15947                           
 15948                           ; BSR set to: 1
 15949  00272E  0012               	return		;funcret
 15950  002730                     __end_of_arp_gratuitous:
 15951                           	opt stack 0
 15952                           tblptru	equ	0xFF8
 15953                           tblptrh	equ	0xFF7
 15954                           tblptrl	equ	0xFF6
 15955                           tablat	equ	0xFF5
 15956                           prodh	equ	0xFF4
 15957                           prodl	equ	0xFF3
 15958                           intcon	equ	0xFF2
 15959                           intcon3	equ	0xFF0
 15960                           indf0	equ	0xFEF
 15961                           postinc0	equ	0xFEE
 15962                           plusw0	equ	0xFEB
 15963                           fsr0h	equ	0xFEA
 15964                           fsr0l	equ	0xFE9
 15965                           wreg	equ	0xFE8
 15966                           indf1	equ	0xFE7
 15967                           postinc1	equ	0xFE6
 15968                           postdec1	equ	0xFE5
 15969                           plusw1	equ	0xFE3
 15970                           fsr1h	equ	0xFE2
 15971                           fsr1l	equ	0xFE1
 15972                           indf2	equ	0xFDF
 15973                           postinc2	equ	0xFDE
 15974                           postdec2	equ	0xFDD
 15975                           plusw2	equ	0xFDB
 15976                           fsr2h	equ	0xFDA
 15977                           fsr2l	equ	0xFD9
 15978                           status	equ	0xFD8
 15979                           
 15980 ;; *************** function _getMillis *****************
 15981 ;; Defined at:
 15982 ;;		line 34 in file "src/stack/time.c"
 15983 ;; Parameters:    Size  Location     Type
 15984 ;;		None
 15985 ;; Auto vars:     Size  Location     Type
 15986 ;;		None
 15987 ;; Return value:  Size  Location     Type
 15988 ;;                  4    0[BANK0 ] unsigned long 
 15989 ;; Registers used:
 15990 ;;		None
 15991 ;; Tracked objects:
 15992 ;;		On entry : 0/0
 15993 ;;		On exit  : 0/0
 15994 ;;		Unchanged: 0/0
 15995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15996 ;;      Params:         0       4       0       0       0       0       0       0       0
 15997 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15998 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15999 ;;      Totals:         0       4       0       0       0       0       0       0       0
 16000 ;;Total ram usage:        4 bytes
 16001 ;; Hardware stack levels used:    1
 16002 ;; Hardware stack levels required when called:    4
 16003 ;; This function calls:
 16004 ;;		Nothing
 16005 ;; This function is called by:
 16006 ;;		_ethernet_rxGetNewFrame
 16007 ;;		_arp_handleNewPacket
 16008 ;;		_arp_probe
 16009 ;;		_arp_gratuitous
 16010 ;;		_arp_checkForEntry
 16011 ;; This function uses a non-reentrant model
 16012 ;;
 16013                           
 16014                           	psect	text63
 16015  004C72                     __ptext63:
 16016                           	opt stack 0
 16017  004C72                     _getMillis:
 16018                           	opt stack 24
 16019                           
 16020                           ;time.c: 35: return time;
 16021                           
 16022                           ; BSR set to: 1
 16023                           ;incstack = 0
 16024  004C72  C029  F060         	movff	_time,?_getMillis	;volatile
 16025  004C76  C02A  F061         	movff	_time+1,?_getMillis+1	;volatile
 16026  004C7A  C02B  F062         	movff	_time+2,?_getMillis+2	;volatile
 16027  004C7E  C02C  F063         	movff	_time+3,?_getMillis+3	;volatile
 16028  004C82  0012               	return		;funcret
 16029  004C84                     __end_of_getMillis:
 16030                           	opt stack 0
 16031                           tblptru	equ	0xFF8
 16032                           tblptrh	equ	0xFF7
 16033                           tblptrl	equ	0xFF6
 16034                           tablat	equ	0xFF5
 16035                           prodh	equ	0xFF4
 16036                           prodl	equ	0xFF3
 16037                           intcon	equ	0xFF2
 16038                           intcon3	equ	0xFF0
 16039                           indf0	equ	0xFEF
 16040                           postinc0	equ	0xFEE
 16041                           plusw0	equ	0xFEB
 16042                           fsr0h	equ	0xFEA
 16043                           fsr0l	equ	0xFE9
 16044                           wreg	equ	0xFE8
 16045                           indf1	equ	0xFE7
 16046                           postinc1	equ	0xFE6
 16047                           postdec1	equ	0xFE5
 16048                           plusw1	equ	0xFE3
 16049                           fsr1h	equ	0xFE2
 16050                           fsr1l	equ	0xFE1
 16051                           indf2	equ	0xFDF
 16052                           postinc2	equ	0xFDE
 16053                           postdec2	equ	0xFDD
 16054                           plusw2	equ	0xFDB
 16055                           fsr2h	equ	0xFDA
 16056                           fsr2l	equ	0xFD9
 16057                           status	equ	0xFD8
 16058                           
 16059 ;; *************** function _arp_sendRequest *****************
 16060 ;; Defined at:
 16061 ;;		line 183 in file "src/stack/protocols/arp.c"
 16062 ;; Parameters:    Size  Location     Type
 16063 ;;  ipSender        4    0[BANK1 ] struct ipv4_address
 16064 ;;  ipTarget        4    4[BANK1 ] struct ipv4_address
 16065 ;; Auto vars:     Size  Location     Type
 16066 ;;  request        32   20[BANK1 ] struct arp_message
 16067 ;;  targetMAC       6   14[BANK1 ] struct macaddress
 16068 ;;  senderMAC       6    8[BANK1 ] struct macaddress
 16069 ;; Return value:  Size  Location     Type
 16070 ;;                  1    wreg      void 
 16071 ;; Registers used:
 16072 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16073 ;; Tracked objects:
 16074 ;;		On entry : 0/0
 16075 ;;		On exit  : 0/0
 16076 ;;		Unchanged: 0/0
 16077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16078 ;;      Params:         0       0       8       0       0       0       0       0       0
 16079 ;;      Locals:         0       0      44       0       0       0       0       0       0
 16080 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16081 ;;      Totals:         0       0      52       0       0       0       0       0       0
 16082 ;;Total ram usage:       52 bytes
 16083 ;; Hardware stack levels used:    1
 16084 ;; Hardware stack levels required when called:   10
 16085 ;; This function calls:
 16086 ;;		_arp_send
 16087 ;;		_ethernetController_getMacAddress
 16088 ;;		_ipv4_getIPSourceAddress
 16089 ;;		_mac_setAllZero
 16090 ;; This function is called by:
 16091 ;;		_arp_probe
 16092 ;;		_arp_gratuitous
 16093 ;; This function uses a non-reentrant model
 16094 ;;
 16095                           
 16096                           	psect	text64
 16097  003766                     __ptext64:
 16098                           	opt stack 0
 16099  003766                     _arp_sendRequest:
 16100                           	opt stack 17
 16101                           
 16102                           ;arp.c: 184: arp_message_t request;
 16103                           ;arp.c: 185: macaddress_t senderMAC;
 16104                           ;arp.c: 186: macaddress_t targetMAC;
 16105                           ;arp.c: 188: senderMAC = ethernetController_getMacAddress();
 16106                           
 16107                           ;incstack = 0
 16108  003766  EC91  F01F         	call	_ethernetController_getMacAddress	;wreg free
 16109  00376A  EE21  F008         	lfsr	2,arp_sendRequest@senderMAC
 16110  00376E  0E05               	movlw	5
 16111  003770                     u10421:
 16112  003770  CFEB FFDB          	movff	plusw0,plusw2
 16113  003774  06E8               	decf	wreg,f,c
 16114  003776  E2FC               	bc	u10421
 16115                           
 16116                           ;arp.c: 190: ipSender = ipv4_getIPSourceAddress();
 16117  003778  EC42  F026         	call	_ipv4_getIPSourceAddress	;wreg free
 16118  00377C  C060  F100         	movff	?_ipv4_getIPSourceAddress,arp_sendRequest@ipSender
 16119  003780  C061  F101         	movff	?_ipv4_getIPSourceAddress+1,arp_sendRequest@ipSender+1
 16120  003784  C062  F102         	movff	?_ipv4_getIPSourceAddress+2,arp_sendRequest@ipSender+2
 16121  003788  C063  F103         	movff	?_ipv4_getIPSourceAddress+3,arp_sendRequest@ipSender+3
 16122                           
 16123                           ;arp.c: 191: mac_setAllZero(&targetMAC);
 16124  00378C  0E0E               	movlw	low arp_sendRequest@targetMAC
 16125  00378E  0100               	movlb	0	; () banked
 16126  003790  6F60               	movwf	mac_setAllZero@mac& (0+255),b
 16127  003792  0E01               	movlw	high arp_sendRequest@targetMAC
 16128  003794  6F61               	movwf	(mac_setAllZero@mac+1)& (0+255),b
 16129  003796  EC6E  F025         	call	_mac_setAllZero	;wreg free
 16130                           
 16131                           ;arp.c: 193: request.hlen = 6u;
 16132  00379A  0E06               	movlw	6
 16133  00379C  0101               	movlb	1	; () banked
 16134  00379E  6F18               	movwf	(arp_sendRequest@request+4)& (0+255),b
 16135                           
 16136                           ; BSR set to: 1
 16137                           ;arp.c: 194: request.plen = 4u;
 16138  0037A0  0E04               	movlw	4
 16139  0037A2  6F19               	movwf	(arp_sendRequest@request+5)& (0+255),b
 16140                           
 16141                           ; BSR set to: 1
 16142                           ;arp.c: 195: request.htype = ARP_HTYPE_ETHERNET;
 16143  0037A4  0E00               	movlw	0
 16144  0037A6  6F15               	movwf	(arp_sendRequest@request+1)& (0+255),b
 16145  0037A8  0E01               	movlw	1
 16146  0037AA  6F14               	movwf	arp_sendRequest@request& (0+255),b
 16147                           
 16148                           ; BSR set to: 1
 16149                           ;arp.c: 196: request.ptype = ARP_PTYPE_IPv4;
 16150  0037AC  0E08               	movlw	8
 16151  0037AE  6F17               	movwf	(arp_sendRequest@request+3)& (0+255),b
 16152  0037B0  0E00               	movlw	0
 16153  0037B2  6F16               	movwf	(arp_sendRequest@request+2)& (0+255),b
 16154                           
 16155                           ; BSR set to: 1
 16156                           ;arp.c: 197: request.operation = ARP_REQUEST;
 16157  0037B4  0E00               	movlw	0
 16158  0037B6  6F1B               	movwf	(arp_sendRequest@request+7)& (0+255),b
 16159  0037B8  0E01               	movlw	1
 16160  0037BA  6F1A               	movwf	(arp_sendRequest@request+6)& (0+255),b
 16161                           
 16162                           ; BSR set to: 1
 16163                           ;arp.c: 198: request.senderIPAddress = ipSender;
 16164  0037BC  C100  F122         	movff	arp_sendRequest@ipSender,arp_sendRequest@request+14
 16165  0037C0  C101  F123         	movff	arp_sendRequest@ipSender+1,arp_sendRequest@request+15
 16166  0037C4  C102  F124         	movff	arp_sendRequest@ipSender+2,arp_sendRequest@request+16
 16167  0037C8  C103  F125         	movff	arp_sendRequest@ipSender+3,arp_sendRequest@request+17
 16168                           
 16169                           ; BSR set to: 1
 16170                           ;arp.c: 199: request.senderMACAddress = senderMAC;
 16171  0037CC  EE21  F008         	lfsr	2,arp_sendRequest@senderMAC
 16172  0037D0  EE11  F01C         	lfsr	1,arp_sendRequest@request+8
 16173  0037D4  0E05               	movlw	5
 16174  0037D6                     u10431:
 16175  0037D6  CFDB FFE3          	movff	plusw2,plusw1
 16176  0037DA  06E8               	decf	wreg,f,c
 16177  0037DC  E2FC               	bc	u10431
 16178                           
 16179                           ; BSR set to: 1
 16180                           ;arp.c: 200: request.targetIPAddress = ipTarget;
 16181  0037DE  C104  F12C         	movff	arp_sendRequest@ipTarget,arp_sendRequest@request+24
 16182  0037E2  C105  F12D         	movff	arp_sendRequest@ipTarget+1,arp_sendRequest@request+25
 16183  0037E6  C106  F12E         	movff	arp_sendRequest@ipTarget+2,arp_sendRequest@request+26
 16184  0037EA  C107  F12F         	movff	arp_sendRequest@ipTarget+3,arp_sendRequest@request+27
 16185                           
 16186                           ; BSR set to: 1
 16187                           ;arp.c: 201: request.targetMACAddress = targetMAC;
 16188  0037EE  EE21  F00E         	lfsr	2,arp_sendRequest@targetMAC
 16189  0037F2  EE11  F026         	lfsr	1,arp_sendRequest@request+18
 16190  0037F6  0E05               	movlw	5
 16191  0037F8                     u10441:
 16192  0037F8  CFDB FFE3          	movff	plusw2,plusw1
 16193  0037FC  06E8               	decf	wreg,f,c
 16194  0037FE  E2FC               	bc	u10441
 16195                           
 16196                           ; BSR set to: 1
 16197                           ;arp.c: 203: arp_send(request);
 16198  003800  EE21  F014         	lfsr	2,arp_sendRequest@request
 16199  003804  EE00  F0A7         	lfsr	0,arp_send@arp
 16200  003808  0E1F               	movlw	31
 16201  00380A                     u10451:
 16202  00380A  CFDB FFEB          	movff	plusw2,plusw0
 16203  00380E  06E8               	decf	wreg,f,c
 16204  003810  E2FC               	bc	u10451
 16205  003812  ECEF  F00B         	call	_arp_send	;wreg free
 16206  003816  0012               	return		;funcret
 16207  003818                     __end_of_arp_sendRequest:
 16208                           	opt stack 0
 16209                           tblptru	equ	0xFF8
 16210                           tblptrh	equ	0xFF7
 16211                           tblptrl	equ	0xFF6
 16212                           tablat	equ	0xFF5
 16213                           prodh	equ	0xFF4
 16214                           prodl	equ	0xFF3
 16215                           intcon	equ	0xFF2
 16216                           intcon3	equ	0xFF0
 16217                           indf0	equ	0xFEF
 16218                           postinc0	equ	0xFEE
 16219                           plusw0	equ	0xFEB
 16220                           fsr0h	equ	0xFEA
 16221                           fsr0l	equ	0xFE9
 16222                           wreg	equ	0xFE8
 16223                           indf1	equ	0xFE7
 16224                           postinc1	equ	0xFE6
 16225                           postdec1	equ	0xFE5
 16226                           plusw1	equ	0xFE3
 16227                           fsr1h	equ	0xFE2
 16228                           fsr1l	equ	0xFE1
 16229                           indf2	equ	0xFDF
 16230                           postinc2	equ	0xFDE
 16231                           postdec2	equ	0xFDD
 16232                           plusw2	equ	0xFDB
 16233                           fsr2h	equ	0xFDA
 16234                           fsr2l	equ	0xFD9
 16235                           status	equ	0xFD8
 16236                           
 16237 ;; *************** function _mac_setAllZero *****************
 16238 ;; Defined at:
 16239 ;;		line 47 in file "src/eth/mac.c"
 16240 ;; Parameters:    Size  Location     Type
 16241 ;;  mac             2    0[BANK0 ] PTR struct macaddress
 16242 ;;		 -> arp_init@mac(6), arp_sendRequest@targetMAC(6), 
 16243 ;; Auto vars:     Size  Location     Type
 16244 ;;  i               1    2[BANK0 ] unsigned char 
 16245 ;; Return value:  Size  Location     Type
 16246 ;;                  1    wreg      void 
 16247 ;; Registers used:
 16248 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 16249 ;; Tracked objects:
 16250 ;;		On entry : 0/0
 16251 ;;		On exit  : 0/0
 16252 ;;		Unchanged: 0/0
 16253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16254 ;;      Params:         0       2       0       0       0       0       0       0       0
 16255 ;;      Locals:         0       1       0       0       0       0       0       0       0
 16256 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16257 ;;      Totals:         0       3       0       0       0       0       0       0       0
 16258 ;;Total ram usage:        3 bytes
 16259 ;; Hardware stack levels used:    1
 16260 ;; Hardware stack levels required when called:    4
 16261 ;; This function calls:
 16262 ;;		Nothing
 16263 ;; This function is called by:
 16264 ;;		_arp_sendRequest
 16265 ;;		_arp_init
 16266 ;; This function uses a non-reentrant model
 16267 ;;
 16268                           
 16269                           	psect	text65
 16270  004ADC                     __ptext65:
 16271                           	opt stack 0
 16272  004ADC                     _mac_setAllZero:
 16273                           	opt stack 24
 16274                           
 16275                           ;mac.c: 48: for (uint8_t i = 0; i < 6; i++)
 16276                           
 16277                           ;incstack = 0
 16278  004ADC  0E00               	movlw	0
 16279  004ADE  0100               	movlb	0	; () banked
 16280  004AE0  6F62               	movwf	mac_setAllZero@i& (0+255),b
 16281  004AE2                     l8365:
 16282                           
 16283                           ; BSR set to: 0
 16284  004AE2  0E05               	movlw	5
 16285  004AE4  6562               	cpfsgt	mac_setAllZero@i& (0+255),b
 16286  004AE6  D001               	goto	l396
 16287  004AE8  0012               	return	
 16288  004AEA                     l396:
 16289                           
 16290                           ; BSR set to: 0
 16291                           ;mac.c: 49: mac->address[i] = 0x00;
 16292                           
 16293                           ; BSR set to: 0
 16294  004AEA  5162               	movf	mac_setAllZero@i& (0+255),w,b
 16295  004AEC  0D01               	mullw	1
 16296  004AEE  50F3               	movf	prodl,w,c
 16297  004AF0  2560               	addwf	mac_setAllZero@mac& (0+255),w,b
 16298  004AF2  6ED9               	movwf	fsr2l,c
 16299  004AF4  50F4               	movf	prodh,w,c
 16300  004AF6  2161               	addwfc	(mac_setAllZero@mac+1)& (0+255),w,b
 16301  004AF8  6EDA               	movwf	fsr2h,c
 16302  004AFA  0E00               	movlw	0
 16303  004AFC  6EDF               	movwf	indf2,c
 16304                           
 16305                           ; BSR set to: 0
 16306  004AFE  2B62               	incf	mac_setAllZero@i& (0+255),f,b
 16307  004B00  D7F0               	goto	l8365
 16308  004B02                     __end_of_mac_setAllZero:
 16309                           	opt stack 0
 16310                           tblptru	equ	0xFF8
 16311                           tblptrh	equ	0xFF7
 16312                           tblptrl	equ	0xFF6
 16313                           tablat	equ	0xFF5
 16314                           prodh	equ	0xFF4
 16315                           prodl	equ	0xFF3
 16316                           intcon	equ	0xFF2
 16317                           intcon3	equ	0xFF0
 16318                           indf0	equ	0xFEF
 16319                           postinc0	equ	0xFEE
 16320                           plusw0	equ	0xFEB
 16321                           fsr0h	equ	0xFEA
 16322                           fsr0l	equ	0xFE9
 16323                           wreg	equ	0xFE8
 16324                           indf1	equ	0xFE7
 16325                           postinc1	equ	0xFE6
 16326                           postdec1	equ	0xFE5
 16327                           plusw1	equ	0xFE3
 16328                           fsr1h	equ	0xFE2
 16329                           fsr1l	equ	0xFE1
 16330                           indf2	equ	0xFDF
 16331                           postinc2	equ	0xFDE
 16332                           postdec2	equ	0xFDD
 16333                           plusw2	equ	0xFDB
 16334                           fsr2h	equ	0xFDA
 16335                           fsr2l	equ	0xFD9
 16336                           status	equ	0xFD8
 16337                           
 16338 ;; *************** function _ipv4_getIPSourceAddress *****************
 16339 ;; Defined at:
 16340 ;;		line 231 in file "src/stack/protocols/ipv4.c"
 16341 ;; Parameters:    Size  Location     Type
 16342 ;;		None
 16343 ;; Auto vars:     Size  Location     Type
 16344 ;;		None
 16345 ;; Return value:  Size  Location     Type
 16346 ;;                  4    0[BANK0 ] struct ipv4_address
 16347 ;; Registers used:
 16348 ;;		None
 16349 ;; Tracked objects:
 16350 ;;		On entry : 0/0
 16351 ;;		On exit  : 0/0
 16352 ;;		Unchanged: 0/0
 16353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16354 ;;      Params:         0       4       0       0       0       0       0       0       0
 16355 ;;      Locals:         0       0       0       0       0       0       0       0       0
 16356 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16357 ;;      Totals:         0       4       0       0       0       0       0       0       0
 16358 ;;Total ram usage:        4 bytes
 16359 ;; Hardware stack levels used:    1
 16360 ;; Hardware stack levels required when called:    4
 16361 ;; This function calls:
 16362 ;;		Nothing
 16363 ;; This function is called by:
 16364 ;;		_handleStackBackgroundTasks
 16365 ;;		_arp_sendRequest
 16366 ;;		_arp_sendReply
 16367 ;; This function uses a non-reentrant model
 16368 ;;
 16369                           
 16370                           	psect	text66
 16371  004C84                     __ptext66:
 16372                           	opt stack 0
 16373  004C84                     _ipv4_getIPSourceAddress:
 16374                           	opt stack 25
 16375                           
 16376                           ;ipv4.c: 232: return ipSource;
 16377                           
 16378                           ; BSR set to: 0
 16379                           ;incstack = 0
 16380  004C84  C1DF  F060         	movff	_ipSource,?_ipv4_getIPSourceAddress
 16381  004C88  C1E0  F061         	movff	_ipSource+1,?_ipv4_getIPSourceAddress+1
 16382  004C8C  C1E1  F062         	movff	_ipSource+2,?_ipv4_getIPSourceAddress+2
 16383  004C90  C1E2  F063         	movff	_ipSource+3,?_ipv4_getIPSourceAddress+3
 16384  004C94  0012               	return		;funcret
 16385  004C96                     __end_of_ipv4_getIPSourceAddress:
 16386                           	opt stack 0
 16387                           tblptru	equ	0xFF8
 16388                           tblptrh	equ	0xFF7
 16389                           tblptrl	equ	0xFF6
 16390                           tablat	equ	0xFF5
 16391                           prodh	equ	0xFF4
 16392                           prodl	equ	0xFF3
 16393                           intcon	equ	0xFF2
 16394                           intcon3	equ	0xFF0
 16395                           indf0	equ	0xFEF
 16396                           postinc0	equ	0xFEE
 16397                           plusw0	equ	0xFEB
 16398                           fsr0h	equ	0xFEA
 16399                           fsr0l	equ	0xFE9
 16400                           wreg	equ	0xFE8
 16401                           indf1	equ	0xFE7
 16402                           postinc1	equ	0xFE6
 16403                           postdec1	equ	0xFE5
 16404                           plusw1	equ	0xFE3
 16405                           fsr1h	equ	0xFE2
 16406                           fsr1l	equ	0xFE1
 16407                           indf2	equ	0xFDF
 16408                           postinc2	equ	0xFDE
 16409                           postdec2	equ	0xFDD
 16410                           plusw2	equ	0xFDB
 16411                           fsr2h	equ	0xFDA
 16412                           fsr2l	equ	0xFD9
 16413                           status	equ	0xFD8
 16414                           
 16415 ;; *************** function _ethernetController_getMacAddress *****************
 16416 ;; Defined at:
 16417 ;;		line 157 in file "src/enc424j600/ENC424J600.c"
 16418 ;; Parameters:    Size  Location     Type
 16419 ;;		None
 16420 ;; Auto vars:     Size  Location     Type
 16421 ;;  mac             6   20[BANK0 ] struct macaddress
 16422 ;; Return value:  Size  Location     Type
 16423 ;;                  6   14[BANK0 ] struct macaddress
 16424 ;; Registers used:
 16425 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 16426 ;; Tracked objects:
 16427 ;;		On entry : 0/0
 16428 ;;		On exit  : 0/0
 16429 ;;		Unchanged: 0/0
 16430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16431 ;;      Params:         0       6       0       0       0       0       0       0       0
 16432 ;;      Locals:         0       6       0       0       0       0       0       0       0
 16433 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16434 ;;      Totals:         0      12       0       0       0       0       0       0       0
 16435 ;;Total ram usage:       12 bytes
 16436 ;; Hardware stack levels used:    1
 16437 ;; Hardware stack levels required when called:    7
 16438 ;; This function calls:
 16439 ;;		_enc424j600_readControlRegisterUnbanked
 16440 ;; This function is called by:
 16441 ;;		_main
 16442 ;;		_arp_sendRequest
 16443 ;;		_arp_sendReply
 16444 ;; This function uses a non-reentrant model
 16445 ;;
 16446                           
 16447                           	psect	text67
 16448  003F22                     __ptext67:
 16449                           	opt stack 0
 16450  003F22                     _ethernetController_getMacAddress:
 16451                           	opt stack 19
 16452                           
 16453                           ;ENC424J600.c: 158: macaddress_t mac;
 16454                           ;ENC424J600.c: 159: enc424j600_readControlRegisterUnbanked(0x04 + 0x60, &mac.address[0])
      +                          ;
 16455                           
 16456                           ;incstack = 0
 16457  003F22  0E74               	movlw	low ethernetController_getMacAddress@mac
 16458  003F24  0100               	movlb	0	; () banked
 16459  003F26  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 16460  003F28  0E00               	movlw	high ethernetController_getMacAddress@mac
 16461  003F2A  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 16462  003F2C  0E64               	movlw	100
 16463  003F2E  EC63  F024         	call	_enc424j600_readControlRegisterUnbanked
 16464                           
 16465                           ;ENC424J600.c: 160: enc424j600_readControlRegisterUnbanked(0x05 + 0x60, &mac.address[1])
      +                          ;
 16466  003F32  0E75               	movlw	low (ethernetController_getMacAddress@mac+1)
 16467  003F34  0100               	movlb	0	; () banked
 16468  003F36  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 16469  003F38  0E00               	movlw	high (ethernetController_getMacAddress@mac+1)
 16470  003F3A  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 16471  003F3C  0E65               	movlw	101
 16472  003F3E  EC63  F024         	call	_enc424j600_readControlRegisterUnbanked
 16473                           
 16474                           ;ENC424J600.c: 161: enc424j600_readControlRegisterUnbanked(0x02 + 0x60, &mac.address[2])
      +                          ;
 16475  003F42  0E76               	movlw	low (ethernetController_getMacAddress@mac+2)
 16476  003F44  0100               	movlb	0	; () banked
 16477  003F46  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 16478  003F48  0E00               	movlw	high (ethernetController_getMacAddress@mac+2)
 16479  003F4A  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 16480  003F4C  0E62               	movlw	98
 16481  003F4E  EC63  F024         	call	_enc424j600_readControlRegisterUnbanked
 16482                           
 16483                           ;ENC424J600.c: 162: enc424j600_readControlRegisterUnbanked(0x03 + 0x60, &mac.address[3])
      +                          ;
 16484  003F52  0E77               	movlw	low (ethernetController_getMacAddress@mac+3)
 16485  003F54  0100               	movlb	0	; () banked
 16486  003F56  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 16487  003F58  0E00               	movlw	high (ethernetController_getMacAddress@mac+3)
 16488  003F5A  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 16489  003F5C  0E63               	movlw	99
 16490  003F5E  EC63  F024         	call	_enc424j600_readControlRegisterUnbanked
 16491                           
 16492                           ;ENC424J600.c: 163: enc424j600_readControlRegisterUnbanked(0x00 + 0x60, &mac.address[4])
      +                          ;
 16493  003F62  0E78               	movlw	low (ethernetController_getMacAddress@mac+4)
 16494  003F64  0100               	movlb	0	; () banked
 16495  003F66  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 16496  003F68  0E00               	movlw	high (ethernetController_getMacAddress@mac+4)
 16497  003F6A  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 16498  003F6C  0E60               	movlw	96
 16499  003F6E  EC63  F024         	call	_enc424j600_readControlRegisterUnbanked
 16500                           
 16501                           ;ENC424J600.c: 164: enc424j600_readControlRegisterUnbanked(0x01 + 0x60, &mac.address[5])
      +                          ;
 16502  003F72  0E79               	movlw	low (ethernetController_getMacAddress@mac+5)
 16503  003F74  0100               	movlb	0	; () banked
 16504  003F76  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 16505  003F78  0E00               	movlw	high (ethernetController_getMacAddress@mac+5)
 16506  003F7A  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 16507  003F7C  0E61               	movlw	97
 16508  003F7E  EC63  F024         	call	_enc424j600_readControlRegisterUnbanked
 16509                           
 16510                           ;ENC424J600.c: 165: return mac;
 16511  003F82  EE20  F074         	lfsr	2,ethernetController_getMacAddress@mac
 16512  003F86  EE00  F06E         	lfsr	0,?_ethernetController_getMacAddress
 16513  003F8A  0E05               	movlw	5
 16514  003F8C                     u9141:
 16515  003F8C  CFDB FFEB          	movff	plusw2,plusw0
 16516  003F90  06E8               	decf	wreg,f,c
 16517  003F92  E2FC               	bc	u9141
 16518  003F94  0012               	return	
 16519  003F96                     __end_of_ethernetController_getMacAddress:
 16520                           	opt stack 0
 16521                           tblptru	equ	0xFF8
 16522                           tblptrh	equ	0xFF7
 16523                           tblptrl	equ	0xFF6
 16524                           tablat	equ	0xFF5
 16525                           prodh	equ	0xFF4
 16526                           prodl	equ	0xFF3
 16527                           intcon	equ	0xFF2
 16528                           intcon3	equ	0xFF0
 16529                           indf0	equ	0xFEF
 16530                           postinc0	equ	0xFEE
 16531                           plusw0	equ	0xFEB
 16532                           fsr0h	equ	0xFEA
 16533                           fsr0l	equ	0xFE9
 16534                           wreg	equ	0xFE8
 16535                           indf1	equ	0xFE7
 16536                           postinc1	equ	0xFE6
 16537                           postdec1	equ	0xFE5
 16538                           plusw1	equ	0xFE3
 16539                           fsr1h	equ	0xFE2
 16540                           fsr1l	equ	0xFE1
 16541                           indf2	equ	0xFDF
 16542                           postinc2	equ	0xFDE
 16543                           postdec2	equ	0xFDD
 16544                           plusw2	equ	0xFDB
 16545                           fsr2h	equ	0xFDA
 16546                           fsr2l	equ	0xFD9
 16547                           status	equ	0xFD8
 16548                           
 16549 ;; *************** function _arp_send *****************
 16550 ;; Defined at:
 16551 ;;		line 136 in file "src/stack/protocols/arp.c"
 16552 ;; Parameters:    Size  Location     Type
 16553 ;;  arp            32   71[BANK0 ] struct arp_message
 16554 ;; Auto vars:     Size  Location     Type
 16555 ;;  i               1  112[BANK0 ] unsigned char 
 16556 ;;  i               1  111[BANK0 ] unsigned char 
 16557 ;;  i               1  110[BANK0 ] unsigned char 
 16558 ;;  i               1  109[BANK0 ] unsigned char 
 16559 ;;  ethFrame       34  113[BANK0 ] struct ethernetFrame
 16560 ;;  field           9  147[BANK0 ] struct memoryField
 16561 ;;  destination     6  103[BANK0 ] struct macaddress
 16562 ;; Return value:  Size  Location     Type
 16563 ;;                  1    wreg      void 
 16564 ;; Registers used:
 16565 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16566 ;; Tracked objects:
 16567 ;;		On entry : 0/0
 16568 ;;		On exit  : 0/0
 16569 ;;		Unchanged: 0/0
 16570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16571 ;;      Params:         0      32       0       0       0       0       0       0       0
 16572 ;;      Locals:         0      53       0       0       0       0       0       0       0
 16573 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16574 ;;      Totals:         0      85       0       0       0       0       0       0       0
 16575 ;;Total ram usage:       85 bytes
 16576 ;; Hardware stack levels used:    1
 16577 ;; Hardware stack levels required when called:    9
 16578 ;; This function calls:
 16579 ;;		_ethernetController_getSourceMACAddress
 16580 ;;		_ethernetController_sendPacket
 16581 ;;		_ethernetController_streamToTransmitBuffer
 16582 ;;		_ethernet_txFrameRequest
 16583 ;;		_mac_setToBroadcast
 16584 ;; This function is called by:
 16585 ;;		_arp_sendRequest
 16586 ;;		_arp_sendReply
 16587 ;; This function uses a non-reentrant model
 16588 ;;
 16589                           
 16590                           	psect	text68
 16591  0017DE                     __ptext68:
 16592                           	opt stack 0
 16593  0017DE                     _arp_send:
 16594                           	opt stack 17
 16595                           
 16596                           ;arp.c: 137: memoryField_t field;
 16597                           ;arp.c: 138: ethernetFrame_t ethFrame;
 16598                           ;arp.c: 141: macaddress_t destination;
 16599                           ;arp.c: 142: mac_setToBroadcast(&destination);
 16600                           
 16601                           ;incstack = 0
 16602  0017DE  0EC7               	movlw	low arp_send@destination
 16603  0017E0  0100               	movlb	0	; () banked
 16604  0017E2  6F60               	movwf	mac_setToBroadcast@mac& (0+255),b
 16605  0017E4  0E00               	movlw	high arp_send@destination
 16606  0017E6  6F61               	movwf	(mac_setToBroadcast@mac+1)& (0+255),b
 16607  0017E8  EC81  F025         	call	_mac_setToBroadcast	;wreg free
 16608                           
 16609                           ;arp.c: 143: ethFrame.destination = destination;
 16610  0017EC  EE20  F0C7         	lfsr	2,arp_send@destination
 16611  0017F0  EE10  F0D9         	lfsr	1,arp_send@ethFrame+8
 16612  0017F4  0E05               	movlw	5
 16613  0017F6                     u9491:
 16614  0017F6  CFDB FFE3          	movff	plusw2,plusw1
 16615  0017FA  06E8               	decf	wreg,f,c
 16616  0017FC  E2FC               	bc	u9491
 16617                           
 16618                           ;arp.c: 147: ethFrame.length = 36;
 16619  0017FE  0E00               	movlw	0
 16620  001800  0100               	movlb	0	; () banked
 16621  001802  6FD2               	movwf	(arp_send@ethFrame+1)& (0+255),b
 16622  001804  0E24               	movlw	36
 16623  001806  6FD1               	movwf	arp_send@ethFrame& (0+255),b
 16624                           
 16625                           ; BSR set to: 0
 16626                           ;arp.c: 148: ethFrame.source = ethernetController_getSourceMACAddress(field);
 16627  001808  EE20  F0F3         	lfsr	2,arp_send@field
 16628  00180C  EE00  F06F         	lfsr	0,ethernetController_getSourceMACAddress@field
 16629  001810  0E08               	movlw	8
 16630  001812                     u9501:
 16631  001812  CFDB FFEB          	movff	plusw2,plusw0
 16632  001816  06E8               	decf	wreg,f,c
 16633  001818  E2FC               	bc	u9501
 16634  00181A  EC3C  F020         	call	_ethernetController_getSourceMACAddress	;wreg free
 16635  00181E  EE20  F0D3         	lfsr	2,arp_send@ethFrame+2
 16636  001822  0E05               	movlw	5
 16637  001824                     u9511:
 16638  001824  CFEB FFDB          	movff	plusw0,plusw2
 16639  001828  06E8               	decf	wreg,f,c
 16640  00182A  E2FC               	bc	u9511
 16641                           
 16642                           ;arp.c: 149: ethFrame.ethertype = ETHERTYPE_ARP;
 16643  00182C  0E08               	movlw	8
 16644  00182E  0100               	movlb	0	; () banked
 16645  001830  6FE0               	movwf	(arp_send@ethFrame+15)& (0+255),b
 16646  001832  0E06               	movlw	6
 16647  001834  6FDF               	movwf	(arp_send@ethFrame+14)& (0+255),b
 16648                           
 16649                           ; BSR set to: 0
 16650                           ;arp.c: 151: ethernet_txFrameRequest(&ethFrame);
 16651  001836  0ED1               	movlw	low arp_send@ethFrame
 16652  001838  6FA2               	movwf	ethernet_txFrameRequest@frame& (0+255),b
 16653  00183A  0E00               	movlw	high arp_send@ethFrame
 16654  00183C  6FA3               	movwf	(ethernet_txFrameRequest@frame+1)& (0+255),b
 16655  00183E  EC23  F01A         	call	_ethernet_txFrameRequest	;wreg free
 16656                           
 16657                           ;arp.c: 153: if (ethFrame.memory.fOutOfMemory) {
 16658  001842  0100               	movlb	0	; () banked
 16659  001844  51E8               	movf	(arp_send@ethFrame+23)& (0+255),w,b
 16660  001846  A4D8               	btfss	status,2,c
 16661  001848  0012               	return	
 16662                           
 16663                           ; BSR set to: 0
 16664                           ;arp.c: 155: }
 16665                           ;arp.c: 157: field.start = ethFrame.memory.start + 8;
 16666                           
 16667                           ; BSR set to: 0
 16668                           
 16669                           ; BSR set to: 0
 16670                           ;arp.c: 154: return;
 16671  00184A  0E08               	movlw	8
 16672  00184C  25E1               	addwf	(arp_send@ethFrame+16)& (0+255),w,b
 16673  00184E  6FF3               	movwf	arp_send@field& (0+255),b
 16674  001850  0E00               	movlw	0
 16675  001852  21E2               	addwfc	(arp_send@ethFrame+17)& (0+255),w,b
 16676  001854  6FF4               	movwf	(arp_send@field+1)& (0+255),b
 16677                           
 16678                           ; BSR set to: 0
 16679                           ;arp.c: 158: field.end = ethFrame.memory.end;
 16680  001856  C0E3  F0F5         	movff	arp_send@ethFrame+18,arp_send@field+2
 16681  00185A  C0E4  F0F6         	movff	arp_send@ethFrame+19,arp_send@field+3
 16682                           
 16683                           ; BSR set to: 0
 16684                           ;arp.c: 159: field.length = 28;
 16685  00185E  0E00               	movlw	0
 16686  001860  6FF8               	movwf	(arp_send@field+5)& (0+255),b
 16687  001862  0E1C               	movlw	28
 16688  001864  6FF7               	movwf	(arp_send@field+4)& (0+255),b
 16689                           
 16690                           ; BSR set to: 0
 16691                           ;arp.c: 161: ethernetController_streamToTransmitBuffer((arp.htype & 0xff00) >> 8, field)
      +                          ;
 16692  001866  EE20  F0F3         	lfsr	2,arp_send@field
 16693  00186A  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 16694  00186E  0E08               	movlw	8
 16695  001870                     u9531:
 16696  001870  CFDB FFEB          	movff	plusw2,plusw0
 16697  001874  06E8               	decf	wreg,f,c
 16698  001876  E2FC               	bc	u9531
 16699  001878  51A8               	movf	(arp_send@arp+1)& (0+255),w,b
 16700  00187A  EC1B  F01F         	call	_ethernetController_streamToTransmitBuffer
 16701                           
 16702                           ;arp.c: 162: ethernetController_streamToTransmitBuffer(arp.htype & 0x00ff, field);
 16703  00187E  EE20  F0F3         	lfsr	2,arp_send@field
 16704  001882  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 16705  001886  0E08               	movlw	8
 16706  001888                     u9541:
 16707  001888  CFDB FFEB          	movff	plusw2,plusw0
 16708  00188C  06E8               	decf	wreg,f,c
 16709  00188E  E2FC               	bc	u9541
 16710  001890  0100               	movlb	0	; () banked
 16711  001892  51A7               	movf	arp_send@arp& (0+255),w,b
 16712  001894  EC1B  F01F         	call	_ethernetController_streamToTransmitBuffer
 16713                           
 16714                           ;arp.c: 163: ethernetController_streamToTransmitBuffer((arp.ptype & 0xff00) >> 8, field)
      +                          ;
 16715  001898  EE20  F0F3         	lfsr	2,arp_send@field
 16716  00189C  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 16717  0018A0  0E08               	movlw	8
 16718  0018A2                     u9551:
 16719  0018A2  CFDB FFEB          	movff	plusw2,plusw0
 16720  0018A6  06E8               	decf	wreg,f,c
 16721  0018A8  E2FC               	bc	u9551
 16722  0018AA  0100               	movlb	0	; () banked
 16723  0018AC  51AA               	movf	(arp_send@arp+3)& (0+255),w,b
 16724  0018AE  EC1B  F01F         	call	_ethernetController_streamToTransmitBuffer
 16725                           
 16726                           ;arp.c: 164: ethernetController_streamToTransmitBuffer(arp.ptype & 0x00ff, field);
 16727  0018B2  EE20  F0F3         	lfsr	2,arp_send@field
 16728  0018B6  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 16729  0018BA  0E08               	movlw	8
 16730  0018BC                     u9561:
 16731  0018BC  CFDB FFEB          	movff	plusw2,plusw0
 16732  0018C0  06E8               	decf	wreg,f,c
 16733  0018C2  E2FC               	bc	u9561
 16734  0018C4  0100               	movlb	0	; () banked
 16735  0018C6  51A9               	movf	(arp_send@arp+2)& (0+255),w,b
 16736  0018C8  EC1B  F01F         	call	_ethernetController_streamToTransmitBuffer
 16737                           
 16738                           ;arp.c: 165: ethernetController_streamToTransmitBuffer(arp.hlen, field);
 16739  0018CC  EE20  F0F3         	lfsr	2,arp_send@field
 16740  0018D0  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 16741  0018D4  0E08               	movlw	8
 16742  0018D6                     u9571:
 16743  0018D6  CFDB FFEB          	movff	plusw2,plusw0
 16744  0018DA  06E8               	decf	wreg,f,c
 16745  0018DC  E2FC               	bc	u9571
 16746  0018DE  0100               	movlb	0	; () banked
 16747  0018E0  51AB               	movf	(arp_send@arp+4)& (0+255),w,b
 16748  0018E2  EC1B  F01F         	call	_ethernetController_streamToTransmitBuffer
 16749                           
 16750                           ;arp.c: 166: ethernetController_streamToTransmitBuffer(arp.plen, field);
 16751  0018E6  EE20  F0F3         	lfsr	2,arp_send@field
 16752  0018EA  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 16753  0018EE  0E08               	movlw	8
 16754  0018F0                     u9581:
 16755  0018F0  CFDB FFEB          	movff	plusw2,plusw0
 16756  0018F4  06E8               	decf	wreg,f,c
 16757  0018F6  E2FC               	bc	u9581
 16758  0018F8  0100               	movlb	0	; () banked
 16759  0018FA  51AC               	movf	(arp_send@arp+5)& (0+255),w,b
 16760  0018FC  EC1B  F01F         	call	_ethernetController_streamToTransmitBuffer
 16761                           
 16762                           ;arp.c: 167: ethernetController_streamToTransmitBuffer((arp.operation & 0xff00) >> 8, fi
      +                          eld);
 16763  001900  EE20  F0F3         	lfsr	2,arp_send@field
 16764  001904  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 16765  001908  0E08               	movlw	8
 16766  00190A                     u9591:
 16767  00190A  CFDB FFEB          	movff	plusw2,plusw0
 16768  00190E  06E8               	decf	wreg,f,c
 16769  001910  E2FC               	bc	u9591
 16770  001912  0100               	movlb	0	; () banked
 16771  001914  51AE               	movf	(arp_send@arp+7)& (0+255),w,b
 16772  001916  EC1B  F01F         	call	_ethernetController_streamToTransmitBuffer
 16773                           
 16774                           ;arp.c: 168: ethernetController_streamToTransmitBuffer(arp.operation & 0x00ff, field);
 16775  00191A  EE20  F0F3         	lfsr	2,arp_send@field
 16776  00191E  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 16777  001922  0E08               	movlw	8
 16778  001924                     u9601:
 16779  001924  CFDB FFEB          	movff	plusw2,plusw0
 16780  001928  06E8               	decf	wreg,f,c
 16781  00192A  E2FC               	bc	u9601
 16782  00192C  0100               	movlb	0	; () banked
 16783  00192E  51AD               	movf	(arp_send@arp+6)& (0+255),w,b
 16784  001930  EC1B  F01F         	call	_ethernetController_streamToTransmitBuffer
 16785                           
 16786                           ;arp.c: 169: for (uint8_t i = 0; i < arp.hlen; i++)
 16787  001934  0E00               	movlw	0
 16788  001936  0100               	movlb	0	; () banked
 16789  001938  6FCD               	movwf	arp_send@i& (0+255),b
 16790  00193A  D01A               	goto	l936
 16791  00193C                     
 16792                           ; BSR set to: 0
 16793                           ;arp.c: 170: ethernetController_streamToTransmitBuffer(arp.senderMACAddress.address[i], 
      +                          field);
 16794                           
 16795                           ; BSR set to: 0
 16796  00193C  EE20  F0F3         	lfsr	2,arp_send@field
 16797  001940  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 16798  001944  0E08               	movlw	8
 16799  001946                     u9611:
 16800  001946  CFDB FFEB          	movff	plusw2,plusw0
 16801  00194A  06E8               	decf	wreg,f,c
 16802  00194C  E2FC               	bc	u9611
 16803  00194E  51CD               	movf	arp_send@i& (0+255),w,b
 16804  001950  0D01               	mullw	1
 16805  001952  0E08               	movlw	8
 16806  001954  26F3               	addwf	prodl,f,c
 16807  001956  0E00               	movlw	0
 16808  001958  22F4               	addwfc	prodh,f,c
 16809  00195A  0EA7               	movlw	low arp_send@arp
 16810  00195C  24F3               	addwf	prodl,w,c
 16811  00195E  6ED9               	movwf	fsr2l,c
 16812  001960  0E00               	movlw	high arp_send@arp
 16813  001962  20F4               	addwfc	prodh,w,c
 16814  001964  6EDA               	movwf	fsr2h,c
 16815  001966  50DF               	movf	indf2,w,c
 16816  001968  EC1B  F01F         	call	_ethernetController_streamToTransmitBuffer
 16817  00196C  0100               	movlb	0	; () banked
 16818  00196E  2BCD               	incf	arp_send@i& (0+255),f,b
 16819  001970                     l936:
 16820                           
 16821                           ; BSR set to: 0
 16822                           
 16823                           ; BSR set to: 0
 16824  001970  51AB               	movf	(arp_send@arp+4)& (0+255),w,b
 16825  001972  5DCD               	subwf	arp_send@i& (0+255),w,b
 16826  001974  A0D8               	btfss	status,0,c
 16827  001976  D7E2               	goto	l937
 16828                           
 16829                           ; BSR set to: 0
 16830                           ;arp.c: 171: for (uint8_t i = 0; i < arp.plen; i++)
 16831                           
 16832                           ; BSR set to: 0
 16833  001978  0E00               	movlw	0
 16834  00197A  6FCE               	movwf	arp_send@i_3069& (0+255),b
 16835  00197C  D01A               	goto	l939
 16836  00197E                     
 16837                           ; BSR set to: 0
 16838                           ;arp.c: 172: ethernetController_streamToTransmitBuffer(arp.senderIPAddress.address[i], f
      +                          ield);
 16839                           
 16840                           ; BSR set to: 0
 16841  00197E  EE20  F0F3         	lfsr	2,arp_send@field
 16842  001982  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 16843  001986  0E08               	movlw	8
 16844  001988                     u9631:
 16845  001988  CFDB FFEB          	movff	plusw2,plusw0
 16846  00198C  06E8               	decf	wreg,f,c
 16847  00198E  E2FC               	bc	u9631
 16848  001990  51CE               	movf	arp_send@i_3069& (0+255),w,b
 16849  001992  0D01               	mullw	1
 16850  001994  0E0E               	movlw	14
 16851  001996  26F3               	addwf	prodl,f,c
 16852  001998  0E00               	movlw	0
 16853  00199A  22F4               	addwfc	prodh,f,c
 16854  00199C  0EA7               	movlw	low arp_send@arp
 16855  00199E  24F3               	addwf	prodl,w,c
 16856  0019A0  6ED9               	movwf	fsr2l,c
 16857  0019A2  0E00               	movlw	high arp_send@arp
 16858  0019A4  20F4               	addwfc	prodh,w,c
 16859  0019A6  6EDA               	movwf	fsr2h,c
 16860  0019A8  50DF               	movf	indf2,w,c
 16861  0019AA  EC1B  F01F         	call	_ethernetController_streamToTransmitBuffer
 16862  0019AE  0100               	movlb	0	; () banked
 16863  0019B0  2BCE               	incf	arp_send@i_3069& (0+255),f,b
 16864  0019B2                     l939:
 16865                           
 16866                           ; BSR set to: 0
 16867                           
 16868                           ; BSR set to: 0
 16869  0019B2  51AC               	movf	(arp_send@arp+5)& (0+255),w,b
 16870  0019B4  5DCE               	subwf	arp_send@i_3069& (0+255),w,b
 16871  0019B6  A0D8               	btfss	status,0,c
 16872  0019B8  D7E2               	goto	l940
 16873                           
 16874                           ; BSR set to: 0
 16875                           ;arp.c: 173: for (uint8_t i = 0; i < arp.hlen; i++)
 16876                           
 16877                           ; BSR set to: 0
 16878  0019BA  0E00               	movlw	0
 16879  0019BC  6FCF               	movwf	arp_send@i_3070& (0+255),b
 16880  0019BE  D01A               	goto	l942
 16881  0019C0                     
 16882                           ; BSR set to: 0
 16883                           ;arp.c: 174: ethernetController_streamToTransmitBuffer(arp.targetMACAddress.address[i], 
      +                          field);
 16884                           
 16885                           ; BSR set to: 0
 16886  0019C0  EE20  F0F3         	lfsr	2,arp_send@field
 16887  0019C4  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 16888  0019C8  0E08               	movlw	8
 16889  0019CA                     u9651:
 16890  0019CA  CFDB FFEB          	movff	plusw2,plusw0
 16891  0019CE  06E8               	decf	wreg,f,c
 16892  0019D0  E2FC               	bc	u9651
 16893  0019D2  51CF               	movf	arp_send@i_3070& (0+255),w,b
 16894  0019D4  0D01               	mullw	1
 16895  0019D6  0E12               	movlw	18
 16896  0019D8  26F3               	addwf	prodl,f,c
 16897  0019DA  0E00               	movlw	0
 16898  0019DC  22F4               	addwfc	prodh,f,c
 16899  0019DE  0EA7               	movlw	low arp_send@arp
 16900  0019E0  24F3               	addwf	prodl,w,c
 16901  0019E2  6ED9               	movwf	fsr2l,c
 16902  0019E4  0E00               	movlw	high arp_send@arp
 16903  0019E6  20F4               	addwfc	prodh,w,c
 16904  0019E8  6EDA               	movwf	fsr2h,c
 16905  0019EA  50DF               	movf	indf2,w,c
 16906  0019EC  EC1B  F01F         	call	_ethernetController_streamToTransmitBuffer
 16907  0019F0  0100               	movlb	0	; () banked
 16908  0019F2  2BCF               	incf	arp_send@i_3070& (0+255),f,b
 16909  0019F4                     l942:
 16910                           
 16911                           ; BSR set to: 0
 16912                           
 16913                           ; BSR set to: 0
 16914  0019F4  51AB               	movf	(arp_send@arp+4)& (0+255),w,b
 16915  0019F6  5DCF               	subwf	arp_send@i_3070& (0+255),w,b
 16916  0019F8  A0D8               	btfss	status,0,c
 16917  0019FA  D7E2               	goto	l943
 16918                           
 16919                           ; BSR set to: 0
 16920                           ;arp.c: 176: for (uint8_t i = 0; i < arp.plen; i++)
 16921                           
 16922                           ; BSR set to: 0
 16923  0019FC  0E00               	movlw	0
 16924  0019FE  6FD0               	movwf	arp_send@i_3071& (0+255),b
 16925  001A00  D01A               	goto	l945
 16926  001A02                     
 16927                           ; BSR set to: 0
 16928                           ;arp.c: 177: ethernetController_streamToTransmitBuffer(arp.targetIPAddress.address[i], f
      +                          ield);
 16929                           
 16930                           ; BSR set to: 0
 16931  001A02  EE20  F0F3         	lfsr	2,arp_send@field
 16932  001A06  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 16933  001A0A  0E08               	movlw	8
 16934  001A0C                     u9671:
 16935  001A0C  CFDB FFEB          	movff	plusw2,plusw0
 16936  001A10  06E8               	decf	wreg,f,c
 16937  001A12  E2FC               	bc	u9671
 16938  001A14  51D0               	movf	arp_send@i_3071& (0+255),w,b
 16939  001A16  0D01               	mullw	1
 16940  001A18  0E18               	movlw	24
 16941  001A1A  26F3               	addwf	prodl,f,c
 16942  001A1C  0E00               	movlw	0
 16943  001A1E  22F4               	addwfc	prodh,f,c
 16944  001A20  0EA7               	movlw	low arp_send@arp
 16945  001A22  24F3               	addwf	prodl,w,c
 16946  001A24  6ED9               	movwf	fsr2l,c
 16947  001A26  0E00               	movlw	high arp_send@arp
 16948  001A28  20F4               	addwfc	prodh,w,c
 16949  001A2A  6EDA               	movwf	fsr2h,c
 16950  001A2C  50DF               	movf	indf2,w,c
 16951  001A2E  EC1B  F01F         	call	_ethernetController_streamToTransmitBuffer
 16952  001A32  0100               	movlb	0	; () banked
 16953  001A34  2BD0               	incf	arp_send@i_3071& (0+255),f,b
 16954  001A36                     l945:
 16955                           
 16956                           ; BSR set to: 0
 16957                           
 16958                           ; BSR set to: 0
 16959  001A36  51AC               	movf	(arp_send@arp+5)& (0+255),w,b
 16960  001A38  5DD0               	subwf	arp_send@i_3071& (0+255),w,b
 16961  001A3A  A0D8               	btfss	status,0,c
 16962  001A3C  D7E2               	goto	l946
 16963                           
 16964                           ; BSR set to: 0
 16965                           ;arp.c: 179: ethernetController_sendPacket(ethFrame.memory);
 16966                           
 16967                           ; BSR set to: 0
 16968  001A3E  EE20  F0E1         	lfsr	2,arp_send@ethFrame+16
 16969  001A42  EE00  F072         	lfsr	0,ethernetController_sendPacket@field
 16970  001A46  0E08               	movlw	8
 16971  001A48                     u9691:
 16972  001A48  CFDB FFEB          	movff	plusw2,plusw0
 16973  001A4C  06E8               	decf	wreg,f,c
 16974  001A4E  E2FC               	bc	u9691
 16975  001A50  EC46  F025         	call	_ethernetController_sendPacket	;wreg free
 16976  001A54  0012               	return		;funcret
 16977  001A56                     __end_of_arp_send:
 16978                           	opt stack 0
 16979                           tblptru	equ	0xFF8
 16980                           tblptrh	equ	0xFF7
 16981                           tblptrl	equ	0xFF6
 16982                           tablat	equ	0xFF5
 16983                           prodh	equ	0xFF4
 16984                           prodl	equ	0xFF3
 16985                           intcon	equ	0xFF2
 16986                           intcon3	equ	0xFF0
 16987                           indf0	equ	0xFEF
 16988                           postinc0	equ	0xFEE
 16989                           plusw0	equ	0xFEB
 16990                           fsr0h	equ	0xFEA
 16991                           fsr0l	equ	0xFE9
 16992                           wreg	equ	0xFE8
 16993                           indf1	equ	0xFE7
 16994                           postinc1	equ	0xFE6
 16995                           postdec1	equ	0xFE5
 16996                           plusw1	equ	0xFE3
 16997                           fsr1h	equ	0xFE2
 16998                           fsr1l	equ	0xFE1
 16999                           indf2	equ	0xFDF
 17000                           postinc2	equ	0xFDE
 17001                           postdec2	equ	0xFDD
 17002                           plusw2	equ	0xFDB
 17003                           fsr2h	equ	0xFDA
 17004                           fsr2l	equ	0xFD9
 17005                           status	equ	0xFD8
 17006                           
 17007 ;; *************** function _mac_setToBroadcast *****************
 17008 ;; Defined at:
 17009 ;;		line 26 in file "src/eth/mac.c"
 17010 ;; Parameters:    Size  Location     Type
 17011 ;;  mac             2    0[BANK0 ] PTR struct macaddress
 17012 ;;		 -> arp_send@destination(6), 
 17013 ;; Auto vars:     Size  Location     Type
 17014 ;;  i               1    2[BANK0 ] unsigned char 
 17015 ;; Return value:  Size  Location     Type
 17016 ;;                  1    wreg      void 
 17017 ;; Registers used:
 17018 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 17019 ;; Tracked objects:
 17020 ;;		On entry : 0/0
 17021 ;;		On exit  : 0/0
 17022 ;;		Unchanged: 0/0
 17023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17024 ;;      Params:         0       2       0       0       0       0       0       0       0
 17025 ;;      Locals:         0       1       0       0       0       0       0       0       0
 17026 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17027 ;;      Totals:         0       3       0       0       0       0       0       0       0
 17028 ;;Total ram usage:        3 bytes
 17029 ;; Hardware stack levels used:    1
 17030 ;; Hardware stack levels required when called:    4
 17031 ;; This function calls:
 17032 ;;		Nothing
 17033 ;; This function is called by:
 17034 ;;		_arp_send
 17035 ;; This function uses a non-reentrant model
 17036 ;;
 17037                           
 17038                           	psect	text69
 17039  004B02                     __ptext69:
 17040                           	opt stack 0
 17041  004B02                     _mac_setToBroadcast:
 17042                           	opt stack 21
 17043                           
 17044                           ;mac.c: 27: for (uint8_t i = 0; i < 6; i++)
 17045                           
 17046                           ;incstack = 0
 17047  004B02  0E00               	movlw	0
 17048  004B04  0100               	movlb	0	; () banked
 17049  004B06  6F62               	movwf	mac_setToBroadcast@i& (0+255),b
 17050  004B08                     l8121:
 17051                           
 17052                           ; BSR set to: 0
 17053  004B08  0E05               	movlw	5
 17054  004B0A  6562               	cpfsgt	mac_setToBroadcast@i& (0+255),b
 17055  004B0C  D001               	goto	l379
 17056  004B0E  0012               	return	
 17057  004B10                     l379:
 17058                           
 17059                           ; BSR set to: 0
 17060                           ;mac.c: 28: mac->address[i] = 0xff;
 17061                           
 17062                           ; BSR set to: 0
 17063  004B10  5162               	movf	mac_setToBroadcast@i& (0+255),w,b
 17064  004B12  0D01               	mullw	1
 17065  004B14  50F3               	movf	prodl,w,c
 17066  004B16  2560               	addwf	mac_setToBroadcast@mac& (0+255),w,b
 17067  004B18  6ED9               	movwf	fsr2l,c
 17068  004B1A  50F4               	movf	prodh,w,c
 17069  004B1C  2161               	addwfc	(mac_setToBroadcast@mac+1)& (0+255),w,b
 17070  004B1E  6EDA               	movwf	fsr2h,c
 17071  004B20  0EFF               	movlw	255
 17072  004B22  6EDF               	movwf	indf2,c
 17073                           
 17074                           ; BSR set to: 0
 17075  004B24  2B62               	incf	mac_setToBroadcast@i& (0+255),f,b
 17076  004B26  D7F0               	goto	l8121
 17077  004B28                     __end_of_mac_setToBroadcast:
 17078                           	opt stack 0
 17079                           tblptru	equ	0xFF8
 17080                           tblptrh	equ	0xFF7
 17081                           tblptrl	equ	0xFF6
 17082                           tablat	equ	0xFF5
 17083                           prodh	equ	0xFF4
 17084                           prodl	equ	0xFF3
 17085                           intcon	equ	0xFF2
 17086                           intcon3	equ	0xFF0
 17087                           indf0	equ	0xFEF
 17088                           postinc0	equ	0xFEE
 17089                           plusw0	equ	0xFEB
 17090                           fsr0h	equ	0xFEA
 17091                           fsr0l	equ	0xFE9
 17092                           wreg	equ	0xFE8
 17093                           indf1	equ	0xFE7
 17094                           postinc1	equ	0xFE6
 17095                           postdec1	equ	0xFE5
 17096                           plusw1	equ	0xFE3
 17097                           fsr1h	equ	0xFE2
 17098                           fsr1l	equ	0xFE1
 17099                           indf2	equ	0xFDF
 17100                           postinc2	equ	0xFDE
 17101                           postdec2	equ	0xFDD
 17102                           plusw2	equ	0xFDB
 17103                           fsr2h	equ	0xFDA
 17104                           fsr2l	equ	0xFD9
 17105                           status	equ	0xFD8
 17106                           
 17107 ;; *************** function _ethernet_txFrameRequest *****************
 17108 ;; Defined at:
 17109 ;;		line 30 in file "src/eth/ethernet.c"
 17110 ;; Parameters:    Size  Location     Type
 17111 ;;  frame           2   66[BANK0 ] PTR struct ethernetFrame
 17112 ;;		 -> arp_send@ethFrame(34), 
 17113 ;; Auto vars:     Size  Location     Type
 17114 ;;  err             3   68[BANK0 ] struct error
 17115 ;; Return value:  Size  Location     Type
 17116 ;;                  3   66[BANK0 ] struct error
 17117 ;; Registers used:
 17118 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17119 ;; Tracked objects:
 17120 ;;		On entry : 0/0
 17121 ;;		On exit  : 0/0
 17122 ;;		Unchanged: 0/0
 17123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17124 ;;      Params:         0       2       0       0       0       0       0       0       0
 17125 ;;      Locals:         0       3       0       0       0       0       0       0       0
 17126 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17127 ;;      Totals:         0       5       0       0       0       0       0       0       0
 17128 ;;Total ram usage:        5 bytes
 17129 ;; Hardware stack levels used:    1
 17130 ;; Hardware stack levels required when called:    8
 17131 ;; This function calls:
 17132 ;;		_ethernetController_writeDestinationMACAddress
 17133 ;;		_ethernetController_writeEtherTypeFieldToBuffer
 17134 ;;		_memory_txFrameRequest
 17135 ;; This function is called by:
 17136 ;;		_arp_send
 17137 ;;		_ipv4_txFrameRequest
 17138 ;; This function uses a non-reentrant model
 17139 ;;
 17140                           
 17141                           	psect	text70
 17142  003446                     __ptext70:
 17143                           	opt stack 0
 17144  003446                     _ethernet_txFrameRequest:
 17145                           	opt stack 17
 17146                           
 17147                           ;ethernet.c: 32: error_t err;
 17148                           ;ethernet.c: 33: err.module = ERROR_MODULE_ETHERNET;
 17149                           
 17150                           ; BSR set to: 0
 17151                           ;incstack = 0
 17152  003446  0E02               	movlw	2
 17153  003448  0100               	movlb	0	; () banked
 17154  00344A  6FA4               	movwf	ethernet_txFrameRequest@err& (0+255),b
 17155                           
 17156                           ;ethernet.c: 34: err.code = (uint16_t)0;
 17157  00344C  0E00               	movlw	0
 17158  00344E  6FA6               	movwf	(ethernet_txFrameRequest@err+2)& (0+255),b
 17159  003450  0E00               	movlw	0
 17160  003452  6FA5               	movwf	(ethernet_txFrameRequest@err+1)& (0+255),b
 17161                           
 17162                           ; BSR set to: 0
 17163                           ;ethernet.c: 35: frame->memory = memory_txFrameRequest(frame->length);
 17164  003454  C0A2  FFD9         	movff	ethernet_txFrameRequest@frame,fsr2l
 17165  003458  C0A3  FFDA         	movff	ethernet_txFrameRequest@frame+1,fsr2h
 17166  00345C  CFDE F084          	movff	postinc2,memory_txFrameRequest@length
 17167  003460  CFDD F085          	movff	postdec2,memory_txFrameRequest@length+1
 17168  003464  EC09  F003         	call	_memory_txFrameRequest	;wreg free
 17169  003468  0100               	movlb	0	; () banked
 17170  00346A  EE20 F010          	lfsr	2,16
 17171  00346E  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 17172  003470  26D9               	addwf	fsr2l,f,c
 17173  003472  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 17174  003474  22DA               	addwfc	fsr2h,f,c
 17175  003476  0E08               	movlw	8
 17176  003478                     u8951:
 17177  003478  CFEB FFDB          	movff	plusw0,plusw2
 17178  00347C  06E8               	decf	wreg,f,c
 17179  00347E  E2FC               	bc	u8951
 17180                           
 17181                           ; BSR set to: 0
 17182                           ;ethernet.c: 37: if (frame->memory.fOutOfMemory) {
 17183  003480  EE20 F017          	lfsr	2,23
 17184  003484  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 17185  003486  26D9               	addwf	fsr2l,f,c
 17186  003488  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 17187  00348A  22DA               	addwfc	fsr2h,f,c
 17188  00348C  50DF               	movf	indf2,w,c
 17189  00348E  B4D8               	btfsc	status,2,c
 17190  003490  D007               	goto	l359
 17191                           
 17192                           ; BSR set to: 0
 17193                           ;ethernet.c: 39: err.module = ERROR_MODULE_MEMORY;
 17194  003492  0E00               	movlw	0
 17195  003494  6FA4               	movwf	ethernet_txFrameRequest@err& (0+255),b
 17196                           
 17197                           ;ethernet.c: 40: err.code = ERROR_MEMORY_OUT_OF_MEMORY;
 17198  003496  0E00               	movlw	0
 17199  003498  6FA6               	movwf	(ethernet_txFrameRequest@err+2)& (0+255),b
 17200  00349A  0E65               	movlw	101
 17201  00349C  6FA5               	movwf	(ethernet_txFrameRequest@err+1)& (0+255),b
 17202                           
 17203                           ; BSR set to: 0
 17204                           ;ethernet.c: 41: return err;
 17205                           ;	Return value of _ethernet_txFrameRequest is never used
 17206  00349E  0012               	return	
 17207  0034A0                     l359:
 17208                           
 17209                           ; BSR set to: 0
 17210                           ;ethernet.c: 42: }
 17211                           ;ethernet.c: 43: if (!frame->memory.fIsAssigned) {
 17212                           
 17213                           ; BSR set to: 0
 17214  0034A0  EE20 F016          	lfsr	2,22
 17215  0034A4  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 17216  0034A6  26D9               	addwf	fsr2l,f,c
 17217  0034A8  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 17218  0034AA  22DA               	addwfc	fsr2h,f,c
 17219  0034AC  50DF               	movf	indf2,w,c
 17220  0034AE  A4D8               	btfss	status,2,c
 17221  0034B0  D007               	goto	l361
 17222                           
 17223                           ; BSR set to: 0
 17224                           ;ethernet.c: 45: err.module = ERROR_MODULE_MEMORY;
 17225  0034B2  0E00               	movlw	0
 17226  0034B4  6FA4               	movwf	ethernet_txFrameRequest@err& (0+255),b
 17227                           
 17228                           ;ethernet.c: 46: err.code = ERROR_MEMORY_UNKNOWN;
 17229  0034B6  0E00               	movlw	0
 17230  0034B8  6FA6               	movwf	(ethernet_txFrameRequest@err+2)& (0+255),b
 17231  0034BA  0EC7               	movlw	199
 17232  0034BC  6FA5               	movwf	(ethernet_txFrameRequest@err+1)& (0+255),b
 17233                           
 17234                           ; BSR set to: 0
 17235                           ;ethernet.c: 47: return err;
 17236                           ;	Return value of _ethernet_txFrameRequest is never used
 17237  0034BE  0012               	return	
 17238  0034C0                     l361:
 17239                           
 17240                           ; BSR set to: 0
 17241                           ;ethernet.c: 48: }
 17242                           ;ethernet.c: 50: ethernetController_writeDestinationMACAddress(frame->destination, frame
      +                          ->memory);
 17243                           
 17244                           ; BSR set to: 0
 17245  0034C0  EE20 F008          	lfsr	2,8
 17246  0034C4  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 17247  0034C6  26D9               	addwf	fsr2l,f,c
 17248  0034C8  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 17249  0034CA  22DA               	addwfc	fsr2h,f,c
 17250  0034CC  EE00  F06F         	lfsr	0,ethernetController_writeDestinationMACAddress@addr
 17251  0034D0  0E05               	movlw	5
 17252  0034D2                     u8981:
 17253  0034D2  CFDB FFEB          	movff	plusw2,plusw0
 17254  0034D6  06E8               	decf	wreg,f,c
 17255  0034D8  E2FC               	bc	u8981
 17256  0034DA  EE20 F010          	lfsr	2,16
 17257  0034DE  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 17258  0034E0  26D9               	addwf	fsr2l,f,c
 17259  0034E2  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 17260  0034E4  22DA               	addwfc	fsr2h,f,c
 17261  0034E6  EE00  F075         	lfsr	0,ethernetController_writeDestinationMACAddress@field
 17262  0034EA  0E08               	movlw	8
 17263  0034EC                     u8991:
 17264  0034EC  CFDB FFEB          	movff	plusw2,plusw0
 17265  0034F0  06E8               	decf	wreg,f,c
 17266  0034F2  E2FC               	bc	u8991
 17267  0034F4  EC5F  F01E         	call	_ethernetController_writeDestinationMACAddress	;wreg free
 17268                           
 17269                           ;ethernet.c: 51: ethernetController_writeEtherTypeFieldToBuffer(frame->ethertype, frame-
      +                          >memory);
 17270  0034F8  0100               	movlb	0	; () banked
 17271  0034FA  EE20 F00E          	lfsr	2,14
 17272  0034FE  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 17273  003500  26D9               	addwf	fsr2l,f,c
 17274  003502  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 17275  003504  22DA               	addwfc	fsr2h,f,c
 17276  003506  CFDE F06F          	movff	postinc2,ethernetController_writeEtherTypeFieldToBuffer@ethtype
 17277  00350A  CFDD F070          	movff	postdec2,ethernetController_writeEtherTypeFieldToBuffer@ethtype+1
 17278  00350E  EE20 F010          	lfsr	2,16
 17279  003512  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 17280  003514  26D9               	addwf	fsr2l,f,c
 17281  003516  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 17282  003518  22DA               	addwfc	fsr2h,f,c
 17283  00351A  EE00  F071         	lfsr	0,ethernetController_writeEtherTypeFieldToBuffer@field
 17284  00351E  0E08               	movlw	8
 17285  003520                     u9001:
 17286  003520  CFDB FFEB          	movff	plusw2,plusw0
 17287  003524  06E8               	decf	wreg,f,c
 17288  003526  E2FC               	bc	u9001
 17289  003528  EC98  F022         	call	_ethernetController_writeEtherTypeFieldToBuffer	;wreg free
 17290  00352C  0012               	return	
 17291  00352E                     __end_of_ethernet_txFrameRequest:
 17292                           	opt stack 0
 17293                           tblptru	equ	0xFF8
 17294                           tblptrh	equ	0xFF7
 17295                           tblptrl	equ	0xFF6
 17296                           tablat	equ	0xFF5
 17297                           prodh	equ	0xFF4
 17298                           prodl	equ	0xFF3
 17299                           intcon	equ	0xFF2
 17300                           intcon3	equ	0xFF0
 17301                           indf0	equ	0xFEF
 17302                           postinc0	equ	0xFEE
 17303                           plusw0	equ	0xFEB
 17304                           fsr0h	equ	0xFEA
 17305                           fsr0l	equ	0xFE9
 17306                           wreg	equ	0xFE8
 17307                           indf1	equ	0xFE7
 17308                           postinc1	equ	0xFE6
 17309                           postdec1	equ	0xFE5
 17310                           plusw1	equ	0xFE3
 17311                           fsr1h	equ	0xFE2
 17312                           fsr1l	equ	0xFE1
 17313                           indf2	equ	0xFDF
 17314                           postinc2	equ	0xFDE
 17315                           postdec2	equ	0xFDD
 17316                           plusw2	equ	0xFDB
 17317                           fsr2h	equ	0xFDA
 17318                           fsr2l	equ	0xFD9
 17319                           status	equ	0xFD8
 17320                           
 17321 ;; *************** function _memory_txFrameRequest *****************
 17322 ;; Defined at:
 17323 ;;		line 133 in file "src/mem/memoryController.c"
 17324 ;; Parameters:    Size  Location     Type
 17325 ;;  length          2   36[BANK0 ] unsigned int 
 17326 ;; Auto vars:     Size  Location     Type
 17327 ;;  i               1   54[BANK0 ] unsigned char 
 17328 ;;  i               1   55[BANK0 ] unsigned char 
 17329 ;;  fNoOverlapMa    1   53[BANK0 ] unsigned char 
 17330 ;;  field           9   56[BANK0 ] struct memoryField
 17331 ;;  freeIndex       1   65[BANK0 ] unsigned char 
 17332 ;; Return value:  Size  Location     Type
 17333 ;;                  9   36[BANK0 ] struct memoryField
 17334 ;; Registers used:
 17335 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17336 ;; Tracked objects:
 17337 ;;		On entry : 0/0
 17338 ;;		On exit  : 0/0
 17339 ;;		Unchanged: 0/0
 17340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17341 ;;      Params:         0       9       0       0       0       0       0       0       0
 17342 ;;      Locals:         0      15       0       0       0       0       0       0       0
 17343 ;;      Temps:          0       6       0       0       0       0       0       0       0
 17344 ;;      Totals:         0      30       0       0       0       0       0       0       0
 17345 ;;Total ram usage:       30 bytes
 17346 ;; Hardware stack levels used:    1
 17347 ;; Hardware stack levels required when called:    6
 17348 ;; This function calls:
 17349 ;;		___wmul
 17350 ;;		_checkForOverlap
 17351 ;;		_entireMemoryEmpty
 17352 ;;		_entireMemoryFull
 17353 ;; This function is called by:
 17354 ;;		_ethernet_txFrameRequest
 17355 ;; This function uses a non-reentrant model
 17356 ;;
 17357                           
 17358                           	psect	text71
 17359  000612                     __ptext71:
 17360                           	opt stack 0
 17361  000612                     _memory_txFrameRequest:
 17362                           	opt stack 18
 17363                           
 17364                           ;memoryController.c: 134: memoryField_t field;
 17365                           ;memoryController.c: 135: uint8_t freeIndex = 0;
 17366                           
 17367                           ;incstack = 0
 17368  000612  0E00               	movlw	0
 17369  000614  0100               	movlb	0	; () banked
 17370  000616  6FA1               	movwf	memory_txFrameRequest@freeIndex& (0+255),b
 17371                           
 17372                           ; BSR set to: 0
 17373                           ;memoryController.c: 137: if (length == 0) {
 17374  000618  5184               	movf	memory_txFrameRequest@length& (0+255),w,b
 17375  00061A  1185               	iorwf	(memory_txFrameRequest@length+1)& (0+255),w,b
 17376  00061C  A4D8               	btfss	status,2,c
 17377  00061E  D00C               	goto	l462
 17378                           
 17379                           ; BSR set to: 0
 17380                           ;memoryController.c: 138: field.fOutOfMemory = 1;
 17381  000620  0E01               	movlw	1
 17382  000622  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 17383                           
 17384                           ; BSR set to: 0
 17385                           ;memoryController.c: 139: return field;
 17386  000624  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 17387  000628  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 17388  00062C  0E08               	movlw	8
 17389  00062E                     u8501:
 17390  00062E  CFDB FFEB          	movff	plusw2,plusw0
 17391  000632  06E8               	decf	wreg,f,c
 17392  000634  E2FC               	bc	u8501
 17393                           
 17394                           ; BSR set to: 0
 17395  000636  0012               	return	
 17396  000638                     l462:
 17397                           
 17398                           ; BSR set to: 0
 17399                           ;memoryController.c: 140: }
 17400                           ;memoryController.c: 142: if (entireMemoryFull()) {
 17401                           
 17402                           ; BSR set to: 0
 17403  000638  EC10  F024         	call	_entireMemoryFull	;wreg free
 17404  00063C  A0D8               	btfss	status,0,c
 17405  00063E  D00D               	goto	l464
 17406                           
 17407                           ;memoryController.c: 143: field.fOutOfMemory = 1;
 17408  000640  0E01               	movlw	1
 17409  000642  0100               	movlb	0	; () banked
 17410  000644  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 17411                           
 17412                           ; BSR set to: 0
 17413                           ;memoryController.c: 144: return field;
 17414  000646  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 17415  00064A  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 17416  00064E  0E08               	movlw	8
 17417  000650                     u8521:
 17418  000650  CFDB FFEB          	movff	plusw2,plusw0
 17419  000654  06E8               	decf	wreg,f,c
 17420  000656  E2FC               	bc	u8521
 17421                           
 17422                           ; BSR set to: 0
 17423  000658  0012               	return	
 17424  00065A                     l464:
 17425                           
 17426                           ;memoryController.c: 145: }
 17427                           ;memoryController.c: 146: if (entireMemoryEmpty()) {
 17428                           
 17429                           ; BSR set to: 0
 17430  00065A  EC2C  F024         	call	_entireMemoryEmpty	;wreg free
 17431  00065E  A0D8               	btfss	status,0,c
 17432  000660  D238               	goto	l489
 17433                           
 17434                           ;memoryController.c: 148: if ((0x0000 + length) > 0x3000 - 1) {
 17435  000662  0E30               	movlw	48
 17436  000664  0100               	movlb	0	; () banked
 17437  000666  5D85               	subwf	(memory_txFrameRequest@length+1)& (0+255),w,b
 17438  000668  A0D8               	btfss	status,0,c
 17439  00066A  D00C               	goto	l466
 17440                           
 17441                           ; BSR set to: 0
 17442                           ;memoryController.c: 149: field.fOutOfMemory = 1;
 17443  00066C  0E01               	movlw	1
 17444  00066E  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 17445                           
 17446                           ; BSR set to: 0
 17447                           ;memoryController.c: 150: return field;
 17448  000670  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 17449  000674  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 17450  000678  0E08               	movlw	8
 17451  00067A                     u8551:
 17452  00067A  CFDB FFEB          	movff	plusw2,plusw0
 17453  00067E  06E8               	decf	wreg,f,c
 17454  000680  E2FC               	bc	u8551
 17455                           
 17456                           ; BSR set to: 0
 17457  000682  0012               	return	
 17458  000684                     l466:
 17459                           
 17460                           ; BSR set to: 0
 17461                           ;memoryController.c: 152: occupiedMemory[0].start = 0x0000;
 17462                           
 17463                           ; BSR set to: 0
 17464  000684  0E00               	movlw	0
 17465  000686  0101               	movlb	1	; () banked
 17466  000688  6F8C               	movwf	(_occupiedMemory+1)& (0+255),b
 17467  00068A  0E00               	movlw	0
 17468  00068C  6F8B               	movwf	_occupiedMemory& (0+255),b
 17469                           
 17470                           ; BSR set to: 1
 17471                           ;memoryController.c: 153: occupiedMemory[0].end = 0x0000 + length;
 17472  00068E  C084  F18D         	movff	memory_txFrameRequest@length,_occupiedMemory+2
 17473  000692  C085  F18E         	movff	memory_txFrameRequest@length+1,_occupiedMemory+3
 17474                           
 17475                           ; BSR set to: 1
 17476                           ;memoryController.c: 154: occupiedMemory[0].length = length;
 17477  000696  C084  F18F         	movff	memory_txFrameRequest@length,_occupiedMemory+4
 17478  00069A  C085  F190         	movff	memory_txFrameRequest@length+1,_occupiedMemory+5
 17479                           
 17480                           ;memoryController.c: 155: occupiedMemory[0].fIsAssigned = 1;
 17481  00069E  0E01               	movlw	1
 17482  0006A0  6F91               	movwf	(_occupiedMemory+6)& (0+255),b
 17483                           
 17484                           ;memoryController.c: 156: occupiedMemory[0].index = 0;
 17485  0006A2  0E00               	movlw	0
 17486  0006A4  6F93               	movwf	(_occupiedMemory+8)& (0+255),b
 17487                           
 17488                           ; BSR set to: 1
 17489                           ;memoryController.c: 157: return occupiedMemory[0];
 17490  0006A6  EE21  F08B         	lfsr	2,_occupiedMemory
 17491  0006AA  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 17492  0006AE  0E08               	movlw	8
 17493  0006B0                     u8561:
 17494  0006B0  CFDB FFEB          	movff	plusw2,plusw0
 17495  0006B4  06E8               	decf	wreg,f,c
 17496  0006B6  E2FC               	bc	u8561
 17497                           
 17498                           ; BSR set to: 1
 17499  0006B8  0012               	return	
 17500  0006BA                     
 17501                           ;memoryController.c: 163: if (!occupiedMemory[freeIndex].fIsAssigned) {
 17502                           
 17503                           ; BSR set to: 1
 17504  0006BA  0100               	movlb	0	; () banked
 17505  0006BC  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17506  0006BE  0D09               	mullw	9
 17507  0006C0  0E06               	movlw	6
 17508  0006C2  26F3               	addwf	prodl,f,c
 17509  0006C4  0E00               	movlw	0
 17510  0006C6  22F4               	addwfc	prodh,f,c
 17511  0006C8  0E8B               	movlw	low _occupiedMemory
 17512  0006CA  24F3               	addwf	prodl,w,c
 17513  0006CC  6ED9               	movwf	fsr2l,c
 17514  0006CE  0E01               	movlw	high _occupiedMemory
 17515  0006D0  20F4               	addwfc	prodh,w,c
 17516  0006D2  6EDA               	movwf	fsr2h,c
 17517  0006D4  50DF               	movf	indf2,w,c
 17518  0006D6  A4D8               	btfss	status,2,c
 17519  0006D8  D1EB               	goto	l488
 17520                           
 17521                           ; BSR set to: 0
 17522                           ;memoryController.c: 167: occupiedMemory[freeIndex].start = occupiedMemory[(freeIndex ==
      +                           0) ? 8 - 1 : freeIndex - 1].end + 1;
 17523  0006DA  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17524  0006DC  B4D8               	btfsc	status,2,c
 17525  0006DE  D007               	goto	l472
 17526                           
 17527                           ; BSR set to: 0
 17528  0006E0  0EFF               	movlw	255
 17529  0006E2  25A1               	addwf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17530  0006E4  6F93               	movwf	_memory_txFrameRequest$1183& (0+255),b
 17531  0006E6  6B94               	clrf	(_memory_txFrameRequest$1183+1)& (0+255),b
 17532  0006E8  0EFF               	movlw	255
 17533  0006EA  2394               	addwfc	(_memory_txFrameRequest$1183+1)& (0+255),f,b
 17534  0006EC  D004               	goto	l474
 17535  0006EE                     l472:
 17536                           
 17537                           ; BSR set to: 0
 17538                           
 17539                           ; BSR set to: 0
 17540  0006EE  0E00               	movlw	0
 17541  0006F0  6F94               	movwf	(_memory_txFrameRequest$1183+1)& (0+255),b
 17542  0006F2  0E07               	movlw	7
 17543  0006F4  6F93               	movwf	_memory_txFrameRequest$1183& (0+255),b
 17544  0006F6                     l474:
 17545                           
 17546                           ; BSR set to: 0
 17547                           
 17548                           ; BSR set to: 0
 17549  0006F6  C093  F060         	movff	_memory_txFrameRequest$1183,___wmul@multiplier
 17550  0006FA  C094  F061         	movff	_memory_txFrameRequest$1183+1,___wmul@multiplier+1
 17551  0006FE  0E00               	movlw	0
 17552  000700  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 17553  000702  0E09               	movlw	9
 17554  000704  6F62               	movwf	___wmul@multiplicand& (0+255),b
 17555  000706  EC32  F025         	call	___wmul	;wreg free
 17556  00070A  0E02               	movlw	2
 17557  00070C  0100               	movlb	0	; () banked
 17558  00070E  2760               	addwf	?___wmul& (0+255),f,b
 17559  000710  0E00               	movlw	0
 17560  000712  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 17561  000714  0E8B               	movlw	low _occupiedMemory
 17562  000716  2560               	addwf	?___wmul& (0+255),w,b
 17563  000718  6ED9               	movwf	fsr2l,c
 17564  00071A  0E01               	movlw	high _occupiedMemory
 17565  00071C  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 17566  00071E  6EDA               	movwf	fsr2h,c
 17567  000720  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 17568  000724  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 17569  000728  0E01               	movlw	1
 17570  00072A  278D               	addwf	??_memory_txFrameRequest& (0+255),f,b
 17571  00072C  0E00               	movlw	0
 17572  00072E  238E               	addwfc	(??_memory_txFrameRequest+1)& (0+255),f,b
 17573  000730  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17574  000732  0D09               	mullw	9
 17575  000734  0E8B               	movlw	low _occupiedMemory
 17576  000736  24F3               	addwf	prodl,w,c
 17577  000738  6ED9               	movwf	fsr2l,c
 17578  00073A  0E01               	movlw	high _occupiedMemory
 17579  00073C  20F4               	addwfc	prodh,w,c
 17580  00073E  6EDA               	movwf	fsr2h,c
 17581  000740  C08D  FFDE         	movff	??_memory_txFrameRequest,postinc2
 17582  000744  C08E  FFDD         	movff	??_memory_txFrameRequest+1,postdec2
 17583                           
 17584                           ; BSR set to: 0
 17585                           ;memoryController.c: 168: if (occupiedMemory[freeIndex].start + length > 0x3000) {
 17586  000748  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17587  00074A  0D09               	mullw	9
 17588  00074C  0E8B               	movlw	low _occupiedMemory
 17589  00074E  24F3               	addwf	prodl,w,c
 17590  000750  6ED9               	movwf	fsr2l,c
 17591  000752  0E01               	movlw	high _occupiedMemory
 17592  000754  20F4               	addwfc	prodh,w,c
 17593  000756  6EDA               	movwf	fsr2h,c
 17594  000758  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 17595  00075C  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 17596  000760  5184               	movf	memory_txFrameRequest@length& (0+255),w,b
 17597  000762  278D               	addwf	??_memory_txFrameRequest& (0+255),f,b
 17598  000764  5185               	movf	(memory_txFrameRequest@length+1)& (0+255),w,b
 17599  000766  238E               	addwfc	(??_memory_txFrameRequest+1)& (0+255),f,b
 17600  000768  058D               	decf	??_memory_txFrameRequest& (0+255),w,b
 17601  00076A  0E30               	movlw	48
 17602  00076C  598E               	subwfb	(??_memory_txFrameRequest+1)& (0+255),w,b
 17603  00076E  A0D8               	btfss	status,0,c
 17604  000770  D0CF               	goto	l476
 17605                           
 17606                           ; BSR set to: 0
 17607                           ;memoryController.c: 169: if (freeIndex == 8 - 1 && !occupiedMemory[0].fIsAssigned) {
 17608  000772  0E07               	movlw	7
 17609  000774  19A1               	xorwf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17610  000776  A4D8               	btfss	status,2,c
 17611  000778  D0CB               	goto	l476
 17612                           
 17613                           ; BSR set to: 0
 17614  00077A  0101               	movlb	1	; () banked
 17615  00077C  5191               	movf	(_occupiedMemory+6)& (0+255),w,b
 17616  00077E  A4D8               	btfss	status,2,c
 17617  000780  D0C7               	goto	l476
 17618                           
 17619                           ; BSR set to: 1
 17620                           ;memoryController.c: 170: occupiedMemory[freeIndex].length = length;
 17621  000782  0100               	movlb	0	; () banked
 17622  000784  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17623  000786  0D09               	mullw	9
 17624  000788  0E04               	movlw	4
 17625  00078A  26F3               	addwf	prodl,f,c
 17626  00078C  0E00               	movlw	0
 17627  00078E  22F4               	addwfc	prodh,f,c
 17628  000790  0E8B               	movlw	low _occupiedMemory
 17629  000792  24F3               	addwf	prodl,w,c
 17630  000794  6ED9               	movwf	fsr2l,c
 17631  000796  0E01               	movlw	high _occupiedMemory
 17632  000798  20F4               	addwfc	prodh,w,c
 17633  00079A  6EDA               	movwf	fsr2h,c
 17634  00079C  C084  FFDE         	movff	memory_txFrameRequest@length,postinc2
 17635  0007A0  C085  FFDD         	movff	memory_txFrameRequest@length+1,postdec2
 17636                           
 17637                           ;memoryController.c: 171: occupiedMemory[freeIndex].end = occupiedMemory[freeIndex].leng
      +                          th - ((0x3000 - 1) - occupiedMemory[freeIndex].start);
 17638  0007A4  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17639  0007A6  0D09               	mullw	9
 17640  0007A8  0E04               	movlw	4
 17641  0007AA  26F3               	addwf	prodl,f,c
 17642  0007AC  0E00               	movlw	0
 17643  0007AE  22F4               	addwfc	prodh,f,c
 17644  0007B0  0E8B               	movlw	low _occupiedMemory
 17645  0007B2  24F3               	addwf	prodl,w,c
 17646  0007B4  6ED9               	movwf	fsr2l,c
 17647  0007B6  0E01               	movlw	high _occupiedMemory
 17648  0007B8  20F4               	addwfc	prodh,w,c
 17649  0007BA  6EDA               	movwf	fsr2h,c
 17650  0007BC  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 17651  0007C0  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 17652  0007C4  0EFF               	movlw	255
 17653  0007C6  6F8F               	movwf	(??_memory_txFrameRequest+2)& (0+255),b
 17654  0007C8  0E2F               	movlw	47
 17655  0007CA  6F90               	movwf	(??_memory_txFrameRequest+3)& (0+255),b
 17656  0007CC  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17657  0007CE  0D09               	mullw	9
 17658  0007D0  0E8B               	movlw	low _occupiedMemory
 17659  0007D2  24F3               	addwf	prodl,w,c
 17660  0007D4  6ED9               	movwf	fsr2l,c
 17661  0007D6  0E01               	movlw	high _occupiedMemory
 17662  0007D8  20F4               	addwfc	prodh,w,c
 17663  0007DA  6EDA               	movwf	fsr2h,c
 17664  0007DC  CFDE F091          	movff	postinc2,??_memory_txFrameRequest+4
 17665  0007E0  CFDD F092          	movff	postdec2,??_memory_txFrameRequest+5
 17666  0007E4  1F91               	comf	(??_memory_txFrameRequest+4)& (0+255),f,b
 17667  0007E6  1F92               	comf	(??_memory_txFrameRequest+5)& (0+255),f,b
 17668  0007E8  4B91               	infsnz	(??_memory_txFrameRequest+4)& (0+255),f,b
 17669  0007EA  2B92               	incf	(??_memory_txFrameRequest+5)& (0+255),f,b
 17670  0007EC  518F               	movf	(??_memory_txFrameRequest+2)& (0+255),w,b
 17671  0007EE  2791               	addwf	(??_memory_txFrameRequest+4)& (0+255),f,b
 17672  0007F0  5190               	movf	(??_memory_txFrameRequest+3)& (0+255),w,b
 17673  0007F2  2392               	addwfc	(??_memory_txFrameRequest+5)& (0+255),f,b
 17674  0007F4  1F91               	comf	(??_memory_txFrameRequest+4)& (0+255),f,b
 17675  0007F6  1F92               	comf	(??_memory_txFrameRequest+5)& (0+255),f,b
 17676  0007F8  4B91               	infsnz	(??_memory_txFrameRequest+4)& (0+255),f,b
 17677  0007FA  2B92               	incf	(??_memory_txFrameRequest+5)& (0+255),f,b
 17678  0007FC  518D               	movf	??_memory_txFrameRequest& (0+255),w,b
 17679  0007FE  2791               	addwf	(??_memory_txFrameRequest+4)& (0+255),f,b
 17680  000800  518E               	movf	(??_memory_txFrameRequest+1)& (0+255),w,b
 17681  000802  2392               	addwfc	(??_memory_txFrameRequest+5)& (0+255),f,b
 17682  000804  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17683  000806  0D09               	mullw	9
 17684  000808  0E02               	movlw	2
 17685  00080A  26F3               	addwf	prodl,f,c
 17686  00080C  0E00               	movlw	0
 17687  00080E  22F4               	addwfc	prodh,f,c
 17688  000810  0E8B               	movlw	low _occupiedMemory
 17689  000812  24F3               	addwf	prodl,w,c
 17690  000814  6ED9               	movwf	fsr2l,c
 17691  000816  0E01               	movlw	high _occupiedMemory
 17692  000818  20F4               	addwfc	prodh,w,c
 17693  00081A  6EDA               	movwf	fsr2h,c
 17694  00081C  C091  FFDE         	movff	??_memory_txFrameRequest+4,postinc2
 17695  000820  C092  FFDD         	movff	??_memory_txFrameRequest+5,postdec2
 17696                           
 17697                           ; BSR set to: 0
 17698                           ;memoryController.c: 172: for (uint8_t i = 0; i < 8; i++) {
 17699  000824  0E00               	movlw	0
 17700  000826  6F96               	movwf	memory_txFrameRequest@i& (0+255),b
 17701  000828                     l7919:
 17702                           
 17703                           ; BSR set to: 0
 17704  000828  0E07               	movlw	7
 17705  00082A  6596               	cpfsgt	memory_txFrameRequest@i& (0+255),b
 17706  00082C  D001               	goto	l477
 17707  00082E  D044               	goto	u8690
 17708  000830                     l477:
 17709                           
 17710                           ; BSR set to: 0
 17711                           ;memoryController.c: 173: if (i == freeIndex)
 17712                           
 17713                           ; BSR set to: 0
 17714  000830  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17715  000832  1996               	xorwf	memory_txFrameRequest@i& (0+255),w,b
 17716  000834  B4D8               	btfsc	status,2,c
 17717  000836  D03E               	goto	l481
 17718                           
 17719                           ; BSR set to: 0
 17720                           ;memoryController.c: 175: if (checkForOverlap(occupiedMemory[freeIndex], occupiedMemory[
      +                          i]) && occupiedMemory[i].fIsAssigned) {
 17721                           
 17722                           ; BSR set to: 0
 17723                           
 17724                           ; BSR set to: 0
 17725                           ;memoryController.c: 174: continue;
 17726  000838  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17727  00083A  0D09               	mullw	9
 17728  00083C  0E8B               	movlw	low _occupiedMemory
 17729  00083E  24F3               	addwf	prodl,w,c
 17730  000840  6ED9               	movwf	fsr2l,c
 17731  000842  0E01               	movlw	high _occupiedMemory
 17732  000844  20F4               	addwfc	prodh,w,c
 17733  000846  6EDA               	movwf	fsr2h,c
 17734  000848  EE00  F072         	lfsr	0,checkForOverlap@a
 17735  00084C  0E08               	movlw	8
 17736  00084E                     u8641:
 17737  00084E  CFDB FFEB          	movff	plusw2,plusw0
 17738  000852  06E8               	decf	wreg,f,c
 17739  000854  E2FC               	bc	u8641
 17740  000856  5196               	movf	memory_txFrameRequest@i& (0+255),w,b
 17741  000858  0D09               	mullw	9
 17742  00085A  0E8B               	movlw	low _occupiedMemory
 17743  00085C  24F3               	addwf	prodl,w,c
 17744  00085E  6ED9               	movwf	fsr2l,c
 17745  000860  0E01               	movlw	high _occupiedMemory
 17746  000862  20F4               	addwfc	prodh,w,c
 17747  000864  6EDA               	movwf	fsr2h,c
 17748  000866  EE00  F07B         	lfsr	0,checkForOverlap@b
 17749  00086A  0E08               	movlw	8
 17750  00086C                     u8651:
 17751  00086C  CFDB FFEB          	movff	plusw2,plusw0
 17752  000870  06E8               	decf	wreg,f,c
 17753  000872  E2FC               	bc	u8651
 17754  000874  EC22  F016         	call	_checkForOverlap	;wreg free
 17755  000878  0100               	movlb	0	; () banked
 17756  00087A  A0D8               	btfss	status,0,c
 17757  00087C  D01B               	goto	l481
 17758                           
 17759                           ; BSR set to: 0
 17760  00087E  5196               	movf	memory_txFrameRequest@i& (0+255),w,b
 17761  000880  0D09               	mullw	9
 17762  000882  0E06               	movlw	6
 17763  000884  26F3               	addwf	prodl,f,c
 17764  000886  0E00               	movlw	0
 17765  000888  22F4               	addwfc	prodh,f,c
 17766  00088A  0E8B               	movlw	low _occupiedMemory
 17767  00088C  24F3               	addwf	prodl,w,c
 17768  00088E  6ED9               	movwf	fsr2l,c
 17769  000890  0E01               	movlw	high _occupiedMemory
 17770  000892  20F4               	addwfc	prodh,w,c
 17771  000894  6EDA               	movwf	fsr2h,c
 17772  000896  50DF               	movf	indf2,w,c
 17773  000898  B4D8               	btfsc	status,2,c
 17774  00089A  D00C               	goto	l481
 17775                           
 17776                           ; BSR set to: 0
 17777                           ;memoryController.c: 177: field.fOutOfMemory = 1;
 17778  00089C  0E01               	movlw	1
 17779  00089E  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 17780                           
 17781                           ; BSR set to: 0
 17782                           ;memoryController.c: 178: return field;
 17783  0008A0  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 17784  0008A4  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 17785  0008A8  0E08               	movlw	8
 17786  0008AA                     u8681:
 17787  0008AA  CFDB FFEB          	movff	plusw2,plusw0
 17788  0008AE  06E8               	decf	wreg,f,c
 17789  0008B0  E2FC               	bc	u8681
 17790                           
 17791                           ; BSR set to: 0
 17792  0008B2  0012               	return	
 17793  0008B4                     l481:
 17794                           
 17795                           ; BSR set to: 0
 17796                           
 17797                           ; BSR set to: 0
 17798                           
 17799                           ; BSR set to: 0
 17800  0008B4  2B96               	incf	memory_txFrameRequest@i& (0+255),f,b
 17801  0008B6  D7B8               	goto	l7919
 17802  0008B8                     u8690:
 17803                           
 17804                           ; BSR set to: 0
 17805                           ;memoryController.c: 179: }
 17806                           ;memoryController.c: 180: }
 17807                           ;memoryController.c: 181: occupiedMemory[freeIndex].fIsAssigned = 1;
 17808                           
 17809                           ; BSR set to: 0
 17810  0008B8  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17811  0008BA  0D09               	mullw	9
 17812  0008BC  0E06               	movlw	6
 17813  0008BE  26F3               	addwf	prodl,f,c
 17814  0008C0  0E00               	movlw	0
 17815  0008C2  22F4               	addwfc	prodh,f,c
 17816  0008C4  0E8B               	movlw	low _occupiedMemory
 17817  0008C6  24F3               	addwf	prodl,w,c
 17818  0008C8  6ED9               	movwf	fsr2l,c
 17819  0008CA  0E01               	movlw	high _occupiedMemory
 17820  0008CC  20F4               	addwfc	prodh,w,c
 17821  0008CE  6EDA               	movwf	fsr2h,c
 17822  0008D0  0E01               	movlw	1
 17823  0008D2  6EDF               	movwf	indf2,c
 17824                           
 17825                           ;memoryController.c: 182: occupiedMemory[freeIndex].index = freeIndex;
 17826  0008D4  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17827  0008D6  0D09               	mullw	9
 17828  0008D8  0E08               	movlw	8
 17829  0008DA  26F3               	addwf	prodl,f,c
 17830  0008DC  0E00               	movlw	0
 17831  0008DE  22F4               	addwfc	prodh,f,c
 17832  0008E0  0E8B               	movlw	low _occupiedMemory
 17833  0008E2  24F3               	addwf	prodl,w,c
 17834  0008E4  6ED9               	movwf	fsr2l,c
 17835  0008E6  0E01               	movlw	high _occupiedMemory
 17836  0008E8  20F4               	addwfc	prodh,w,c
 17837  0008EA  6EDA               	movwf	fsr2h,c
 17838  0008EC  C0A1  FFDF         	movff	memory_txFrameRequest@freeIndex,indf2
 17839                           
 17840                           ; BSR set to: 0
 17841                           ;memoryController.c: 183: return occupiedMemory[freeIndex];
 17842  0008F0  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17843  0008F2  0D09               	mullw	9
 17844  0008F4  0E8B               	movlw	low _occupiedMemory
 17845  0008F6  24F3               	addwf	prodl,w,c
 17846  0008F8  6ED9               	movwf	fsr2l,c
 17847  0008FA  0E01               	movlw	high _occupiedMemory
 17848  0008FC  20F4               	addwfc	prodh,w,c
 17849  0008FE  6EDA               	movwf	fsr2h,c
 17850  000900  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 17851  000904  0E08               	movlw	8
 17852  000906                     u8701:
 17853  000906  CFDB FFEB          	movff	plusw2,plusw0
 17854  00090A  06E8               	decf	wreg,f,c
 17855  00090C  E2FC               	bc	u8701
 17856                           
 17857                           ; BSR set to: 0
 17858  00090E  0012               	return	
 17859  000910                     l476:
 17860                           
 17861                           ;memoryController.c: 184: }
 17862                           ;memoryController.c: 185: }
 17863                           ;memoryController.c: 187: uint8_t fNoOverlapMarker = 1;
 17864                           
 17865                           ; BSR set to: 0
 17866                           
 17867                           ; BSR set to: 0
 17868  000910  0E01               	movlw	1
 17869  000912  0100               	movlb	0	; () banked
 17870  000914  6F95               	movwf	memory_txFrameRequest@fNoOverlapMarker& (0+255),b
 17871                           
 17872                           ; BSR set to: 0
 17873                           ;memoryController.c: 188: uint8_t i;
 17874                           ;memoryController.c: 189: occupiedMemory[freeIndex].end = occupiedMemory[freeIndex].star
      +                          t + length;
 17875  000916  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17876  000918  0D09               	mullw	9
 17877  00091A  0E8B               	movlw	low _occupiedMemory
 17878  00091C  24F3               	addwf	prodl,w,c
 17879  00091E  6ED9               	movwf	fsr2l,c
 17880  000920  0E01               	movlw	high _occupiedMemory
 17881  000922  20F4               	addwfc	prodh,w,c
 17882  000924  6EDA               	movwf	fsr2h,c
 17883  000926  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 17884  00092A  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 17885  00092E  5184               	movf	memory_txFrameRequest@length& (0+255),w,b
 17886  000930  278D               	addwf	??_memory_txFrameRequest& (0+255),f,b
 17887  000932  5185               	movf	(memory_txFrameRequest@length+1)& (0+255),w,b
 17888  000934  238E               	addwfc	(??_memory_txFrameRequest+1)& (0+255),f,b
 17889  000936  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17890  000938  0D09               	mullw	9
 17891  00093A  0E02               	movlw	2
 17892  00093C  26F3               	addwf	prodl,f,c
 17893  00093E  0E00               	movlw	0
 17894  000940  22F4               	addwfc	prodh,f,c
 17895  000942  0E8B               	movlw	low _occupiedMemory
 17896  000944  24F3               	addwf	prodl,w,c
 17897  000946  6ED9               	movwf	fsr2l,c
 17898  000948  0E01               	movlw	high _occupiedMemory
 17899  00094A  20F4               	addwfc	prodh,w,c
 17900  00094C  6EDA               	movwf	fsr2h,c
 17901  00094E  C08D  FFDE         	movff	??_memory_txFrameRequest,postinc2
 17902  000952  C08E  FFDD         	movff	??_memory_txFrameRequest+1,postdec2
 17903                           
 17904                           ; BSR set to: 0
 17905                           ;memoryController.c: 190: for (i = 0; i < 8; i++) {
 17906  000956  0E00               	movlw	0
 17907  000958  6F97               	movwf	memory_txFrameRequest@i_1187& (0+255),b
 17908  00095A                     l7953:
 17909                           
 17910                           ; BSR set to: 0
 17911  00095A  0E07               	movlw	7
 17912  00095C  6597               	cpfsgt	memory_txFrameRequest@i_1187& (0+255),b
 17913  00095E  D001               	goto	l482
 17914  000960  D03A               	goto	u8770
 17915  000962                     l482:
 17916                           
 17917                           ; BSR set to: 0
 17918                           ;memoryController.c: 191: if (i == freeIndex)
 17919                           
 17920                           ; BSR set to: 0
 17921  000962  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17922  000964  1997               	xorwf	memory_txFrameRequest@i_1187& (0+255),w,b
 17923  000966  B4D8               	btfsc	status,2,c
 17924  000968  D034               	goto	l487
 17925                           
 17926                           ; BSR set to: 0
 17927                           ;memoryController.c: 193: if (!occupiedMemory[i].fIsAssigned) {
 17928                           
 17929                           ; BSR set to: 0
 17930                           
 17931                           ; BSR set to: 0
 17932                           ;memoryController.c: 192: continue;
 17933  00096A  5197               	movf	memory_txFrameRequest@i_1187& (0+255),w,b
 17934  00096C  0D09               	mullw	9
 17935  00096E  0E06               	movlw	6
 17936  000970  26F3               	addwf	prodl,f,c
 17937  000972  0E00               	movlw	0
 17938  000974  22F4               	addwfc	prodh,f,c
 17939  000976  0E8B               	movlw	low _occupiedMemory
 17940  000978  24F3               	addwf	prodl,w,c
 17941  00097A  6ED9               	movwf	fsr2l,c
 17942  00097C  0E01               	movlw	high _occupiedMemory
 17943  00097E  20F4               	addwfc	prodh,w,c
 17944  000980  6EDA               	movwf	fsr2h,c
 17945  000982  50DF               	movf	indf2,w,c
 17946  000984  B4D8               	btfsc	status,2,c
 17947  000986  D025               	goto	l487
 17948                           
 17949                           ; BSR set to: 0
 17950                           ;memoryController.c: 196: }
 17951                           ;memoryController.c: 198: if (checkForOverlap(occupiedMemory[freeIndex], occupiedMemory[
      +                          i]))
 17952                           
 17953                           ; BSR set to: 0
 17954                           
 17955                           ; BSR set to: 0
 17956                           ;memoryController.c: 194: continue;
 17957  000988  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17958  00098A  0D09               	mullw	9
 17959  00098C  0E8B               	movlw	low _occupiedMemory
 17960  00098E  24F3               	addwf	prodl,w,c
 17961  000990  6ED9               	movwf	fsr2l,c
 17962  000992  0E01               	movlw	high _occupiedMemory
 17963  000994  20F4               	addwfc	prodh,w,c
 17964  000996  6EDA               	movwf	fsr2h,c
 17965  000998  EE00  F072         	lfsr	0,checkForOverlap@a
 17966  00099C  0E08               	movlw	8
 17967  00099E                     u8741:
 17968  00099E  CFDB FFEB          	movff	plusw2,plusw0
 17969  0009A2  06E8               	decf	wreg,f,c
 17970  0009A4  E2FC               	bc	u8741
 17971  0009A6  5197               	movf	memory_txFrameRequest@i_1187& (0+255),w,b
 17972  0009A8  0D09               	mullw	9
 17973  0009AA  0E8B               	movlw	low _occupiedMemory
 17974  0009AC  24F3               	addwf	prodl,w,c
 17975  0009AE  6ED9               	movwf	fsr2l,c
 17976  0009B0  0E01               	movlw	high _occupiedMemory
 17977  0009B2  20F4               	addwfc	prodh,w,c
 17978  0009B4  6EDA               	movwf	fsr2h,c
 17979  0009B6  EE00  F07B         	lfsr	0,checkForOverlap@b
 17980  0009BA  0E08               	movlw	8
 17981  0009BC                     u8751:
 17982  0009BC  CFDB FFEB          	movff	plusw2,plusw0
 17983  0009C0  06E8               	decf	wreg,f,c
 17984  0009C2  E2FC               	bc	u8751
 17985  0009C4  EC22  F016         	call	_checkForOverlap	;wreg free
 17986  0009C8  0100               	movlb	0	; () banked
 17987  0009CA  A0D8               	btfss	status,0,c
 17988  0009CC  D002               	goto	l487
 17989                           
 17990                           ; BSR set to: 0
 17991                           ;memoryController.c: 199: fNoOverlapMarker = 0;
 17992  0009CE  0E00               	movlw	0
 17993  0009D0  6F95               	movwf	memory_txFrameRequest@fNoOverlapMarker& (0+255),b
 17994  0009D2                     l487:
 17995                           
 17996                           ; BSR set to: 0
 17997                           
 17998                           ; BSR set to: 0
 17999                           
 18000                           ; BSR set to: 0
 18001  0009D2  2B97               	incf	memory_txFrameRequest@i_1187& (0+255),f,b
 18002  0009D4  D7C2               	goto	l7953
 18003  0009D6                     u8770:
 18004                           
 18005                           ; BSR set to: 0
 18006                           ;memoryController.c: 201: }
 18007                           ;memoryController.c: 202: if (fNoOverlapMarker) {
 18008                           
 18009                           ; BSR set to: 0
 18010  0009D6  5195               	movf	memory_txFrameRequest@fNoOverlapMarker& (0+255),w,b
 18011  0009D8  B4D8               	btfsc	status,2,c
 18012  0009DA  D06A               	goto	l488
 18013                           
 18014                           ; BSR set to: 0
 18015                           ;memoryController.c: 203: occupiedMemory[freeIndex].fIsAssigned = 1;
 18016  0009DC  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 18017  0009DE  0D09               	mullw	9
 18018  0009E0  0E06               	movlw	6
 18019  0009E2  26F3               	addwf	prodl,f,c
 18020  0009E4  0E00               	movlw	0
 18021  0009E6  22F4               	addwfc	prodh,f,c
 18022  0009E8  0E8B               	movlw	low _occupiedMemory
 18023  0009EA  24F3               	addwf	prodl,w,c
 18024  0009EC  6ED9               	movwf	fsr2l,c
 18025  0009EE  0E01               	movlw	high _occupiedMemory
 18026  0009F0  20F4               	addwfc	prodh,w,c
 18027  0009F2  6EDA               	movwf	fsr2h,c
 18028  0009F4  0E01               	movlw	1
 18029  0009F6  6EDF               	movwf	indf2,c
 18030                           
 18031                           ;memoryController.c: 204: occupiedMemory[freeIndex].end = occupiedMemory[freeIndex].star
      +                          t + length;
 18032  0009F8  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 18033  0009FA  0D09               	mullw	9
 18034  0009FC  0E8B               	movlw	low _occupiedMemory
 18035  0009FE  24F3               	addwf	prodl,w,c
 18036  000A00  6ED9               	movwf	fsr2l,c
 18037  000A02  0E01               	movlw	high _occupiedMemory
 18038  000A04  20F4               	addwfc	prodh,w,c
 18039  000A06  6EDA               	movwf	fsr2h,c
 18040  000A08  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 18041  000A0C  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 18042  000A10  5184               	movf	memory_txFrameRequest@length& (0+255),w,b
 18043  000A12  278D               	addwf	??_memory_txFrameRequest& (0+255),f,b
 18044  000A14  5185               	movf	(memory_txFrameRequest@length+1)& (0+255),w,b
 18045  000A16  238E               	addwfc	(??_memory_txFrameRequest+1)& (0+255),f,b
 18046  000A18  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 18047  000A1A  0D09               	mullw	9
 18048  000A1C  0E02               	movlw	2
 18049  000A1E  26F3               	addwf	prodl,f,c
 18050  000A20  0E00               	movlw	0
 18051  000A22  22F4               	addwfc	prodh,f,c
 18052  000A24  0E8B               	movlw	low _occupiedMemory
 18053  000A26  24F3               	addwf	prodl,w,c
 18054  000A28  6ED9               	movwf	fsr2l,c
 18055  000A2A  0E01               	movlw	high _occupiedMemory
 18056  000A2C  20F4               	addwfc	prodh,w,c
 18057  000A2E  6EDA               	movwf	fsr2h,c
 18058  000A30  C08D  FFDE         	movff	??_memory_txFrameRequest,postinc2
 18059  000A34  C08E  FFDD         	movff	??_memory_txFrameRequest+1,postdec2
 18060                           
 18061                           ;memoryController.c: 205: occupiedMemory[freeIndex].fOutOfMemory = 0;
 18062  000A38  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 18063  000A3A  0D09               	mullw	9
 18064  000A3C  0E07               	movlw	7
 18065  000A3E  26F3               	addwf	prodl,f,c
 18066  000A40  0E00               	movlw	0
 18067  000A42  22F4               	addwfc	prodh,f,c
 18068  000A44  0E8B               	movlw	low _occupiedMemory
 18069  000A46  24F3               	addwf	prodl,w,c
 18070  000A48  6ED9               	movwf	fsr2l,c
 18071  000A4A  0E01               	movlw	high _occupiedMemory
 18072  000A4C  20F4               	addwfc	prodh,w,c
 18073  000A4E  6EDA               	movwf	fsr2h,c
 18074  000A50  0E00               	movlw	0
 18075  000A52  6EDF               	movwf	indf2,c
 18076                           
 18077                           ;memoryController.c: 206: occupiedMemory[freeIndex].length = length;
 18078  000A54  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 18079  000A56  0D09               	mullw	9
 18080  000A58  0E04               	movlw	4
 18081  000A5A  26F3               	addwf	prodl,f,c
 18082  000A5C  0E00               	movlw	0
 18083  000A5E  22F4               	addwfc	prodh,f,c
 18084  000A60  0E8B               	movlw	low _occupiedMemory
 18085  000A62  24F3               	addwf	prodl,w,c
 18086  000A64  6ED9               	movwf	fsr2l,c
 18087  000A66  0E01               	movlw	high _occupiedMemory
 18088  000A68  20F4               	addwfc	prodh,w,c
 18089  000A6A  6EDA               	movwf	fsr2h,c
 18090  000A6C  C084  FFDE         	movff	memory_txFrameRequest@length,postinc2
 18091  000A70  C085  FFDD         	movff	memory_txFrameRequest@length+1,postdec2
 18092                           
 18093                           ;memoryController.c: 207: occupiedMemory[freeIndex].index = freeIndex;
 18094  000A74  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 18095  000A76  0D09               	mullw	9
 18096  000A78  0E08               	movlw	8
 18097  000A7A  26F3               	addwf	prodl,f,c
 18098  000A7C  0E00               	movlw	0
 18099  000A7E  22F4               	addwfc	prodh,f,c
 18100  000A80  0E8B               	movlw	low _occupiedMemory
 18101  000A82  24F3               	addwf	prodl,w,c
 18102  000A84  6ED9               	movwf	fsr2l,c
 18103  000A86  0E01               	movlw	high _occupiedMemory
 18104  000A88  20F4               	addwfc	prodh,w,c
 18105  000A8A  6EDA               	movwf	fsr2h,c
 18106  000A8C  C0A1  FFDF         	movff	memory_txFrameRequest@freeIndex,indf2
 18107                           
 18108                           ; BSR set to: 0
 18109                           ;memoryController.c: 208: return occupiedMemory[freeIndex];
 18110  000A90  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 18111  000A92  0D09               	mullw	9
 18112  000A94  0E8B               	movlw	low _occupiedMemory
 18113  000A96  24F3               	addwf	prodl,w,c
 18114  000A98  6ED9               	movwf	fsr2l,c
 18115  000A9A  0E01               	movlw	high _occupiedMemory
 18116  000A9C  20F4               	addwfc	prodh,w,c
 18117  000A9E  6EDA               	movwf	fsr2h,c
 18118  000AA0  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 18119  000AA4  0E08               	movlw	8
 18120  000AA6                     u8791:
 18121  000AA6  CFDB FFEB          	movff	plusw2,plusw0
 18122  000AAA  06E8               	decf	wreg,f,c
 18123  000AAC  E2FC               	bc	u8791
 18124                           
 18125                           ; BSR set to: 0
 18126  000AAE  0012               	return	
 18127  000AB0                     l488:
 18128                           
 18129                           ; BSR set to: 0
 18130                           ;memoryController.c: 209: }
 18131                           ;memoryController.c: 210: }
 18132                           ;memoryController.c: 211: freeIndex++;
 18133                           
 18134                           ; BSR set to: 0
 18135                           
 18136                           ; BSR set to: 0
 18137  000AB0  2BA1               	incf	memory_txFrameRequest@freeIndex& (0+255),f,b
 18138                           
 18139                           ; BSR set to: 0
 18140                           ;memoryController.c: 212: if (freeIndex == 8) {
 18141  000AB2  0E08               	movlw	8
 18142  000AB4  19A1               	xorwf	memory_txFrameRequest@freeIndex& (0+255),w,b
 18143  000AB6  A4D8               	btfss	status,2,c
 18144  000AB8  D00C               	goto	l489
 18145                           
 18146                           ; BSR set to: 0
 18147                           ;memoryController.c: 214: field.fOutOfMemory = 1;
 18148  000ABA  0E01               	movlw	1
 18149  000ABC  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 18150                           
 18151                           ; BSR set to: 0
 18152                           ;memoryController.c: 215: return field;
 18153  000ABE  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 18154  000AC2  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 18155  000AC6  0E08               	movlw	8
 18156  000AC8                     u8811:
 18157  000AC8  CFDB FFEB          	movff	plusw2,plusw0
 18158  000ACC  06E8               	decf	wreg,f,c
 18159  000ACE  E2FC               	bc	u8811
 18160                           
 18161                           ; BSR set to: 0
 18162  000AD0  0012               	return	
 18163  000AD2                     l489:
 18164                           
 18165                           ; BSR set to: 0
 18166                           
 18167                           ; BSR set to: 0
 18168  000AD2  0E08               	movlw	8
 18169  000AD4  0100               	movlb	0	; () banked
 18170  000AD6  65A1               	cpfsgt	memory_txFrameRequest@freeIndex& (0+255),b
 18171  000AD8  D5F0               	goto	l469
 18172                           
 18173                           ; BSR set to: 0
 18174                           ;memoryController.c: 216: }
 18175                           ;memoryController.c: 217: }
 18176                           ;memoryController.c: 218: return field;
 18177                           
 18178                           ; BSR set to: 0
 18179  000ADA  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 18180  000ADE  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 18181  000AE2  0E08               	movlw	8
 18182  000AE4                     u8831:
 18183  000AE4  CFDB FFEB          	movff	plusw2,plusw0
 18184  000AE8  06E8               	decf	wreg,f,c
 18185  000AEA  E2FC               	bc	u8831
 18186  000AEC  0012               	return	
 18187  000AEE                     __end_of_memory_txFrameRequest:
 18188                           	opt stack 0
 18189                           tblptru	equ	0xFF8
 18190                           tblptrh	equ	0xFF7
 18191                           tblptrl	equ	0xFF6
 18192                           tablat	equ	0xFF5
 18193                           prodh	equ	0xFF4
 18194                           prodl	equ	0xFF3
 18195                           intcon	equ	0xFF2
 18196                           intcon3	equ	0xFF0
 18197                           indf0	equ	0xFEF
 18198                           postinc0	equ	0xFEE
 18199                           plusw0	equ	0xFEB
 18200                           fsr0h	equ	0xFEA
 18201                           fsr0l	equ	0xFE9
 18202                           wreg	equ	0xFE8
 18203                           indf1	equ	0xFE7
 18204                           postinc1	equ	0xFE6
 18205                           postdec1	equ	0xFE5
 18206                           plusw1	equ	0xFE3
 18207                           fsr1h	equ	0xFE2
 18208                           fsr1l	equ	0xFE1
 18209                           indf2	equ	0xFDF
 18210                           postinc2	equ	0xFDE
 18211                           postdec2	equ	0xFDD
 18212                           plusw2	equ	0xFDB
 18213                           fsr2h	equ	0xFDA
 18214                           fsr2l	equ	0xFD9
 18215                           status	equ	0xFD8
 18216                           
 18217 ;; *************** function _entireMemoryFull *****************
 18218 ;; Defined at:
 18219 ;;		line 45 in file "src/mem/memoryController.c"
 18220 ;; Parameters:    Size  Location     Type
 18221 ;;		None
 18222 ;; Auto vars:     Size  Location     Type
 18223 ;;  i               1    0[BANK0 ] unsigned char 
 18224 ;; Return value:  Size  Location     Type
 18225 ;;		None               void
 18226 ;; Registers used:
 18227 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 18228 ;; Tracked objects:
 18229 ;;		On entry : 0/0
 18230 ;;		On exit  : 0/0
 18231 ;;		Unchanged: 0/0
 18232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18233 ;;      Params:         0       0       0       0       0       0       0       0       0
 18234 ;;      Locals:         0       1       0       0       0       0       0       0       0
 18235 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18236 ;;      Totals:         0       1       0       0       0       0       0       0       0
 18237 ;;Total ram usage:        1 bytes
 18238 ;; Hardware stack levels used:    1
 18239 ;; Hardware stack levels required when called:    4
 18240 ;; This function calls:
 18241 ;;		Nothing
 18242 ;; This function is called by:
 18243 ;;		_memory_txFrameRequest
 18244 ;; This function uses a non-reentrant model
 18245 ;;
 18246                           
 18247                           	psect	text72
 18248  004820                     __ptext72:
 18249                           	opt stack 0
 18250  004820                     _entireMemoryFull:
 18251                           	opt stack 19
 18252                           
 18253                           ;memoryController.c: 46: for (uint8_t i = 0; i < 8; i++) {
 18254                           
 18255                           ;incstack = 0
 18256  004820  0E00               	movlw	0
 18257  004822  0100               	movlb	0	; () banked
 18258  004824  6F60               	movwf	entireMemoryFull@i& (0+255),b
 18259  004826                     l7673:
 18260                           
 18261                           ; BSR set to: 0
 18262  004826  0E07               	movlw	7
 18263  004828  6560               	cpfsgt	entireMemoryFull@i& (0+255),b
 18264  00482A  D001               	goto	l418
 18265  00482C  D013               	goto	u8220
 18266  00482E                     l418:
 18267                           
 18268                           ; BSR set to: 0
 18269                           ;memoryController.c: 47: if (!occupiedMemory[i].fIsAssigned)
 18270                           
 18271                           ; BSR set to: 0
 18272  00482E  5160               	movf	entireMemoryFull@i& (0+255),w,b
 18273  004830  0D09               	mullw	9
 18274  004832  0E06               	movlw	6
 18275  004834  26F3               	addwf	prodl,f,c
 18276  004836  0E00               	movlw	0
 18277  004838  22F4               	addwfc	prodh,f,c
 18278  00483A  0E8B               	movlw	low _occupiedMemory
 18279  00483C  24F3               	addwf	prodl,w,c
 18280  00483E  6ED9               	movwf	fsr2l,c
 18281  004840  0E01               	movlw	high _occupiedMemory
 18282  004842  20F4               	addwfc	prodh,w,c
 18283  004844  6EDA               	movwf	fsr2h,c
 18284  004846  50DF               	movf	indf2,w,c
 18285  004848  A4D8               	btfss	status,2,c
 18286  00484A  D002               	goto	l420
 18287                           
 18288                           ; BSR set to: 0
 18289                           ;memoryController.c: 48: return 0;
 18290  00484C  90D8               	bcf	status,0,c
 18291                           
 18292                           ; BSR set to: 0
 18293  00484E  0012               	return	
 18294  004850                     l420:
 18295                           
 18296                           ; BSR set to: 0
 18297                           
 18298                           ; BSR set to: 0
 18299  004850  2B60               	incf	entireMemoryFull@i& (0+255),f,b
 18300  004852  D7E9               	goto	l7673
 18301  004854                     u8220:
 18302                           
 18303                           ; BSR set to: 0
 18304                           ;memoryController.c: 49: }
 18305                           ;memoryController.c: 50: return 1;
 18306                           
 18307                           ; BSR set to: 0
 18308  004854  80D8               	bsf	status,0,c
 18309  004856  0012               	return	
 18310  004858                     __end_of_entireMemoryFull:
 18311                           	opt stack 0
 18312                           tblptru	equ	0xFF8
 18313                           tblptrh	equ	0xFF7
 18314                           tblptrl	equ	0xFF6
 18315                           tablat	equ	0xFF5
 18316                           prodh	equ	0xFF4
 18317                           prodl	equ	0xFF3
 18318                           intcon	equ	0xFF2
 18319                           intcon3	equ	0xFF0
 18320                           indf0	equ	0xFEF
 18321                           postinc0	equ	0xFEE
 18322                           plusw0	equ	0xFEB
 18323                           fsr0h	equ	0xFEA
 18324                           fsr0l	equ	0xFE9
 18325                           wreg	equ	0xFE8
 18326                           indf1	equ	0xFE7
 18327                           postinc1	equ	0xFE6
 18328                           postdec1	equ	0xFE5
 18329                           plusw1	equ	0xFE3
 18330                           fsr1h	equ	0xFE2
 18331                           fsr1l	equ	0xFE1
 18332                           indf2	equ	0xFDF
 18333                           postinc2	equ	0xFDE
 18334                           postdec2	equ	0xFDD
 18335                           plusw2	equ	0xFDB
 18336                           fsr2h	equ	0xFDA
 18337                           fsr2l	equ	0xFD9
 18338                           status	equ	0xFD8
 18339                           
 18340 ;; *************** function _entireMemoryEmpty *****************
 18341 ;; Defined at:
 18342 ;;		line 37 in file "src/mem/memoryController.c"
 18343 ;; Parameters:    Size  Location     Type
 18344 ;;		None
 18345 ;; Auto vars:     Size  Location     Type
 18346 ;;  i               1    0[BANK0 ] unsigned char 
 18347 ;; Return value:  Size  Location     Type
 18348 ;;		None               void
 18349 ;; Registers used:
 18350 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 18351 ;; Tracked objects:
 18352 ;;		On entry : 0/0
 18353 ;;		On exit  : 0/0
 18354 ;;		Unchanged: 0/0
 18355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18356 ;;      Params:         0       0       0       0       0       0       0       0       0
 18357 ;;      Locals:         0       1       0       0       0       0       0       0       0
 18358 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18359 ;;      Totals:         0       1       0       0       0       0       0       0       0
 18360 ;;Total ram usage:        1 bytes
 18361 ;; Hardware stack levels used:    1
 18362 ;; Hardware stack levels required when called:    4
 18363 ;; This function calls:
 18364 ;;		Nothing
 18365 ;; This function is called by:
 18366 ;;		_memory_txFrameRequest
 18367 ;; This function uses a non-reentrant model
 18368 ;;
 18369                           
 18370                           	psect	text73
 18371  004858                     __ptext73:
 18372                           	opt stack 0
 18373  004858                     _entireMemoryEmpty:
 18374                           	opt stack 19
 18375                           
 18376                           ;memoryController.c: 38: for (uint8_t i = 0; i < 8; i++) {
 18377                           
 18378                           ; BSR set to: 0
 18379                           ;incstack = 0
 18380  004858  0E00               	movlw	0
 18381  00485A  0100               	movlb	0	; () banked
 18382  00485C  6F60               	movwf	entireMemoryEmpty@i& (0+255),b
 18383  00485E                     l7653:
 18384                           
 18385                           ; BSR set to: 0
 18386  00485E  0E07               	movlw	7
 18387  004860  6560               	cpfsgt	entireMemoryEmpty@i& (0+255),b
 18388  004862  D001               	goto	l412
 18389  004864  D013               	goto	u8190
 18390  004866                     l412:
 18391                           
 18392                           ; BSR set to: 0
 18393                           ;memoryController.c: 39: if (occupiedMemory[i].fIsAssigned)
 18394                           
 18395                           ; BSR set to: 0
 18396  004866  5160               	movf	entireMemoryEmpty@i& (0+255),w,b
 18397  004868  0D09               	mullw	9
 18398  00486A  0E06               	movlw	6
 18399  00486C  26F3               	addwf	prodl,f,c
 18400  00486E  0E00               	movlw	0
 18401  004870  22F4               	addwfc	prodh,f,c
 18402  004872  0E8B               	movlw	low _occupiedMemory
 18403  004874  24F3               	addwf	prodl,w,c
 18404  004876  6ED9               	movwf	fsr2l,c
 18405  004878  0E01               	movlw	high _occupiedMemory
 18406  00487A  20F4               	addwfc	prodh,w,c
 18407  00487C  6EDA               	movwf	fsr2h,c
 18408  00487E  50DF               	movf	indf2,w,c
 18409  004880  B4D8               	btfsc	status,2,c
 18410  004882  D002               	goto	l414
 18411                           
 18412                           ; BSR set to: 0
 18413                           ;memoryController.c: 40: return 0;
 18414  004884  90D8               	bcf	status,0,c
 18415                           
 18416                           ; BSR set to: 0
 18417  004886  0012               	return	
 18418  004888                     l414:
 18419                           
 18420                           ; BSR set to: 0
 18421                           
 18422                           ; BSR set to: 0
 18423  004888  2B60               	incf	entireMemoryEmpty@i& (0+255),f,b
 18424  00488A  D7E9               	goto	l7653
 18425  00488C                     u8190:
 18426                           
 18427                           ; BSR set to: 0
 18428                           ;memoryController.c: 41: }
 18429                           ;memoryController.c: 42: return 1;
 18430                           
 18431                           ; BSR set to: 0
 18432  00488C  80D8               	bsf	status,0,c
 18433  00488E  0012               	return	
 18434  004890                     __end_of_entireMemoryEmpty:
 18435                           	opt stack 0
 18436                           tblptru	equ	0xFF8
 18437                           tblptrh	equ	0xFF7
 18438                           tblptrl	equ	0xFF6
 18439                           tablat	equ	0xFF5
 18440                           prodh	equ	0xFF4
 18441                           prodl	equ	0xFF3
 18442                           intcon	equ	0xFF2
 18443                           intcon3	equ	0xFF0
 18444                           indf0	equ	0xFEF
 18445                           postinc0	equ	0xFEE
 18446                           plusw0	equ	0xFEB
 18447                           fsr0h	equ	0xFEA
 18448                           fsr0l	equ	0xFE9
 18449                           wreg	equ	0xFE8
 18450                           indf1	equ	0xFE7
 18451                           postinc1	equ	0xFE6
 18452                           postdec1	equ	0xFE5
 18453                           plusw1	equ	0xFE3
 18454                           fsr1h	equ	0xFE2
 18455                           fsr1l	equ	0xFE1
 18456                           indf2	equ	0xFDF
 18457                           postinc2	equ	0xFDE
 18458                           postdec2	equ	0xFDD
 18459                           plusw2	equ	0xFDB
 18460                           fsr2h	equ	0xFDA
 18461                           fsr2l	equ	0xFD9
 18462                           status	equ	0xFD8
 18463                           
 18464 ;; *************** function _checkForOverlap *****************
 18465 ;; Defined at:
 18466 ;;		line 63 in file "src/mem/memoryController.c"
 18467 ;; Parameters:    Size  Location     Type
 18468 ;;  a               9   18[BANK0 ] struct memoryField
 18469 ;;  b               9   27[BANK0 ] struct memoryField
 18470 ;; Auto vars:     Size  Location     Type
 18471 ;;		None
 18472 ;; Return value:  Size  Location     Type
 18473 ;;		None               void
 18474 ;; Registers used:
 18475 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 18476 ;; Tracked objects:
 18477 ;;		On entry : 0/0
 18478 ;;		On exit  : 0/0
 18479 ;;		Unchanged: 0/0
 18480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18481 ;;      Params:         0      18       0       0       0       0       0       0       0
 18482 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18483 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18484 ;;      Totals:         0      18       0       0       0       0       0       0       0
 18485 ;;Total ram usage:       18 bytes
 18486 ;; Hardware stack levels used:    1
 18487 ;; Hardware stack levels required when called:    5
 18488 ;; This function calls:
 18489 ;;		_checkForOverlapSwitched
 18490 ;; This function is called by:
 18491 ;;		_memory_txFrameRequest
 18492 ;; This function uses a non-reentrant model
 18493 ;;
 18494                           
 18495                           	psect	text74
 18496  002C44                     __ptext74:
 18497                           	opt stack 0
 18498  002C44                     _checkForOverlap:
 18499                           	opt stack 18
 18500                           
 18501                           ;memoryController.c: 64: if ((a.start == b.start) ||
 18502                           ;memoryController.c: 65: (a.end == b.end) ||
 18503                           ;memoryController.c: 66: (a.start == b.end) ||
 18504                           ;memoryController.c: 67: (a.end == b.start) ||
 18505                           ;memoryController.c: 68: (a.end > 0x3000) ||
 18506                           ;memoryController.c: 69: (a.start > 0x3000) ||
 18507                           ;memoryController.c: 70: (b.end > 0x3000) ||
 18508                           ;memoryController.c: 71: (b.start > 0x3000))
 18509                           
 18510                           ; BSR set to: 0
 18511                           ;incstack = 0
 18512  002C44  0100               	movlb	0	; () banked
 18513  002C46  517B               	movf	checkForOverlap@b& (0+255),w,b
 18514  002C48  1972               	xorwf	checkForOverlap@a& (0+255),w,b
 18515  002C4A  E104               	bnz	u8230
 18516  002C4C  517C               	movf	(checkForOverlap@b+1)& (0+255),w,b
 18517  002C4E  1973               	xorwf	(checkForOverlap@a+1)& (0+255),w,b
 18518  002C50  B4D8               	btfsc	status,2,c
 18519  002C52  D029               	goto	u8300
 18520  002C54                     u8230:
 18521                           
 18522                           ; BSR set to: 0
 18523  002C54  517D               	movf	(checkForOverlap@b+2)& (0+255),w,b
 18524  002C56  1974               	xorwf	(checkForOverlap@a+2)& (0+255),w,b
 18525  002C58  E104               	bnz	u8240
 18526  002C5A  517E               	movf	(checkForOverlap@b+3)& (0+255),w,b
 18527  002C5C  1975               	xorwf	(checkForOverlap@a+3)& (0+255),w,b
 18528  002C5E  B4D8               	btfsc	status,2,c
 18529  002C60  D022               	goto	u8300
 18530  002C62                     u8240:
 18531                           
 18532                           ; BSR set to: 0
 18533  002C62  5172               	movf	checkForOverlap@a& (0+255),w,b
 18534  002C64  197D               	xorwf	(checkForOverlap@b+2)& (0+255),w,b
 18535  002C66  E104               	bnz	u8250
 18536  002C68  5173               	movf	(checkForOverlap@a+1)& (0+255),w,b
 18537  002C6A  197E               	xorwf	(checkForOverlap@b+3)& (0+255),w,b
 18538  002C6C  B4D8               	btfsc	status,2,c
 18539  002C6E  D01B               	goto	u8300
 18540  002C70                     u8250:
 18541                           
 18542                           ; BSR set to: 0
 18543  002C70  517B               	movf	checkForOverlap@b& (0+255),w,b
 18544  002C72  1974               	xorwf	(checkForOverlap@a+2)& (0+255),w,b
 18545  002C74  E104               	bnz	u8260
 18546  002C76  517C               	movf	(checkForOverlap@b+1)& (0+255),w,b
 18547  002C78  1975               	xorwf	(checkForOverlap@a+3)& (0+255),w,b
 18548  002C7A  B4D8               	btfsc	status,2,c
 18549  002C7C  D014               	goto	u8300
 18550  002C7E                     u8260:
 18551                           
 18552                           ; BSR set to: 0
 18553  002C7E  0574               	decf	(checkForOverlap@a+2)& (0+255),w,b
 18554  002C80  0E30               	movlw	48
 18555  002C82  5975               	subwfb	(checkForOverlap@a+3)& (0+255),w,b
 18556  002C84  B0D8               	btfsc	status,0,c
 18557  002C86  D00F               	goto	u8300
 18558                           
 18559                           ; BSR set to: 0
 18560  002C88  0572               	decf	checkForOverlap@a& (0+255),w,b
 18561  002C8A  0E30               	movlw	48
 18562  002C8C  5973               	subwfb	(checkForOverlap@a+1)& (0+255),w,b
 18563  002C8E  B0D8               	btfsc	status,0,c
 18564  002C90  D00A               	goto	u8300
 18565                           
 18566                           ; BSR set to: 0
 18567  002C92  057D               	decf	(checkForOverlap@b+2)& (0+255),w,b
 18568  002C94  0E30               	movlw	48
 18569  002C96  597E               	subwfb	(checkForOverlap@b+3)& (0+255),w,b
 18570  002C98  B0D8               	btfsc	status,0,c
 18571  002C9A  D005               	goto	u8300
 18572                           
 18573                           ; BSR set to: 0
 18574  002C9C  057B               	decf	checkForOverlap@b& (0+255),w,b
 18575  002C9E  0E30               	movlw	48
 18576  002CA0  597C               	subwfb	(checkForOverlap@b+1)& (0+255),w,b
 18577  002CA2  A0D8               	btfss	status,0,c
 18578  002CA4  D002               	goto	l432
 18579  002CA6                     u8300:
 18580                           
 18581                           ; BSR set to: 0
 18582                           ;memoryController.c: 72: return 1;
 18583                           
 18584                           ; BSR set to: 0
 18585  002CA6  80D8               	bsf	status,0,c
 18586                           
 18587                           ; BSR set to: 0
 18588  002CA8  0012               	return	
 18589  002CAA                     l432:
 18590                           
 18591                           ; BSR set to: 0
 18592                           ;memoryController.c: 75: if (a.start < a.end) {
 18593                           
 18594                           ; BSR set to: 0
 18595  002CAA  5174               	movf	(checkForOverlap@a+2)& (0+255),w,b
 18596  002CAC  5D72               	subwf	checkForOverlap@a& (0+255),w,b
 18597  002CAE  5175               	movf	(checkForOverlap@a+3)& (0+255),w,b
 18598  002CB0  5973               	subwfb	(checkForOverlap@a+1)& (0+255),w,b
 18599  002CB2  B0D8               	btfsc	status,0,c
 18600  002CB4  D03B               	goto	l436
 18601                           
 18602                           ; BSR set to: 0
 18603                           ;memoryController.c: 76: if (b.start < b.end) {
 18604  002CB6  517D               	movf	(checkForOverlap@b+2)& (0+255),w,b
 18605  002CB8  5D7B               	subwf	checkForOverlap@b& (0+255),w,b
 18606  002CBA  517E               	movf	(checkForOverlap@b+3)& (0+255),w,b
 18607  002CBC  597C               	subwfb	(checkForOverlap@b+1)& (0+255),w,b
 18608  002CBE  B0D8               	btfsc	status,0,c
 18609  002CC0  D02B               	goto	l437
 18610                           
 18611                           ; BSR set to: 0
 18612                           ;memoryController.c: 78: if (a.start < b.start) {
 18613  002CC2  517B               	movf	checkForOverlap@b& (0+255),w,b
 18614  002CC4  5D72               	subwf	checkForOverlap@a& (0+255),w,b
 18615  002CC6  517C               	movf	(checkForOverlap@b+1)& (0+255),w,b
 18616  002CC8  5973               	subwfb	(checkForOverlap@a+1)& (0+255),w,b
 18617  002CCA  B0D8               	btfsc	status,0,c
 18618  002CCC  D00A               	goto	l438
 18619                           
 18620                           ; BSR set to: 0
 18621                           ;memoryController.c: 79: if (a.end > b.start) {
 18622  002CCE  5174               	movf	(checkForOverlap@a+2)& (0+255),w,b
 18623  002CD0  5D7B               	subwf	checkForOverlap@b& (0+255),w,b
 18624  002CD2  5175               	movf	(checkForOverlap@a+3)& (0+255),w,b
 18625  002CD4  597C               	subwfb	(checkForOverlap@b+1)& (0+255),w,b
 18626  002CD6  B0D8               	btfsc	status,0,c
 18627  002CD8  D002               	goto	l439
 18628                           
 18629                           ; BSR set to: 0
 18630                           ;memoryController.c: 80: return 1;
 18631  002CDA  80D8               	bsf	status,0,c
 18632                           
 18633                           ; BSR set to: 0
 18634                           ;memoryController.c: 81: } else {
 18635                           
 18636                           ; BSR set to: 0
 18637  002CDC  0012               	return	
 18638  002CDE                     l439:
 18639                           
 18640                           ; BSR set to: 0
 18641                           ;memoryController.c: 82: return 0;
 18642                           
 18643                           ; BSR set to: 0
 18644  002CDE  90D8               	bcf	status,0,c
 18645                           
 18646                           ; BSR set to: 0
 18647                           ;memoryController.c: 83: }
 18648                           ;memoryController.c: 84: } else {
 18649                           
 18650                           ; BSR set to: 0
 18651  002CE0  0012               	return	
 18652  002CE2                     l438:
 18653                           
 18654                           ; BSR set to: 0
 18655                           ;memoryController.c: 85: return checkForOverlapSwitched(b, a);
 18656                           
 18657                           ; BSR set to: 0
 18658  002CE2  EE20  F07B         	lfsr	2,checkForOverlap@b
 18659  002CE6  EE00  F060         	lfsr	0,checkForOverlapSwitched@a
 18660  002CEA  0E08               	movlw	8
 18661  002CEC                     u8351:
 18662  002CEC  CFDB FFEB          	movff	plusw2,plusw0
 18663  002CF0  06E8               	decf	wreg,f,c
 18664  002CF2  E2FC               	bc	u8351
 18665  002CF4  EE20  F072         	lfsr	2,checkForOverlap@a
 18666  002CF8  EE00  F069         	lfsr	0,checkForOverlapSwitched@b
 18667  002CFC  0E08               	movlw	8
 18668  002CFE                     u8361:
 18669  002CFE  CFDB FFEB          	movff	plusw2,plusw0
 18670  002D02  06E8               	decf	wreg,f,c
 18671  002D04  E2FC               	bc	u8361
 18672  002D06  EC0C  F01C         	call	_checkForOverlapSwitched	;wreg free
 18673  002D0A  0100               	movlb	0	; () banked
 18674  002D0C  B0D8               	btfsc	status,0,c
 18675  002D0E  D002               	goto	l7543
 18676                           
 18677                           ; BSR set to: 0
 18678  002D10  90D8               	bcf	status,0,c
 18679  002D12  0012               	return	
 18680  002D14                     l7543:
 18681                           
 18682                           ; BSR set to: 0
 18683                           
 18684                           ; BSR set to: 0
 18685  002D14  80D8               	bsf	status,0,c
 18686                           
 18687                           ; BSR set to: 0
 18688                           ;memoryController.c: 86: }
 18689                           ;memoryController.c: 87: } else {
 18690                           
 18691                           ; BSR set to: 0
 18692                           
 18693                           ; BSR set to: 0
 18694  002D16  0012               	return	
 18695  002D18                     l437:
 18696                           
 18697                           ; BSR set to: 0
 18698                           ;memoryController.c: 88: if (b.end < a.start)
 18699                           
 18700                           ; BSR set to: 0
 18701  002D18  5172               	movf	checkForOverlap@a& (0+255),w,b
 18702  002D1A  5D7D               	subwf	(checkForOverlap@b+2)& (0+255),w,b
 18703  002D1C  5173               	movf	(checkForOverlap@a+1)& (0+255),w,b
 18704  002D1E  597E               	subwfb	(checkForOverlap@b+3)& (0+255),w,b
 18705  002D20  B0D8               	btfsc	status,0,c
 18706  002D22  D002               	goto	l443
 18707                           
 18708                           ; BSR set to: 0
 18709                           ;memoryController.c: 89: return 0;
 18710  002D24  90D8               	bcf	status,0,c
 18711                           
 18712                           ; BSR set to: 0
 18713                           
 18714                           ; BSR set to: 0
 18715  002D26  0012               	return	
 18716  002D28                     l443:
 18717                           
 18718                           ; BSR set to: 0
 18719                           ;memoryController.c: 90: else
 18720                           ;memoryController.c: 91: return 1;
 18721                           
 18722                           ; BSR set to: 0
 18723  002D28  80D8               	bsf	status,0,c
 18724                           
 18725                           ; BSR set to: 0
 18726                           ;memoryController.c: 92: }
 18727                           ;memoryController.c: 93: } else {
 18728                           
 18729                           ; BSR set to: 0
 18730                           
 18731                           ; BSR set to: 0
 18732  002D2A  0012               	return	
 18733  002D2C                     l436:
 18734                           
 18735                           ; BSR set to: 0
 18736                           ;memoryController.c: 94: return checkForOverlapSwitched(b, a);
 18737                           
 18738                           ; BSR set to: 0
 18739  002D2C  EE20  F07B         	lfsr	2,checkForOverlap@b
 18740  002D30  EE00  F060         	lfsr	0,checkForOverlapSwitched@a
 18741  002D34  0E08               	movlw	8
 18742  002D36                     u8391:
 18743  002D36  CFDB FFEB          	movff	plusw2,plusw0
 18744  002D3A  06E8               	decf	wreg,f,c
 18745  002D3C  E2FC               	bc	u8391
 18746  002D3E  EE20  F072         	lfsr	2,checkForOverlap@a
 18747  002D42  EE00  F069         	lfsr	0,checkForOverlapSwitched@b
 18748  002D46  0E08               	movlw	8
 18749  002D48                     u8401:
 18750  002D48  CFDB FFEB          	movff	plusw2,plusw0
 18751  002D4C  06E8               	decf	wreg,f,c
 18752  002D4E  E2FC               	bc	u8401
 18753  002D50  EC0C  F01C         	call	_checkForOverlapSwitched	;wreg free
 18754  002D54  0100               	movlb	0	; () banked
 18755  002D56  B0D8               	btfsc	status,0,c
 18756  002D58  D002               	goto	l7547
 18757                           
 18758                           ; BSR set to: 0
 18759  002D5A  90D8               	bcf	status,0,c
 18760  002D5C  0012               	return	
 18761  002D5E                     l7547:
 18762                           
 18763                           ; BSR set to: 0
 18764                           
 18765                           ; BSR set to: 0
 18766  002D5E  80D8               	bsf	status,0,c
 18767                           
 18768                           ; BSR set to: 0
 18769                           
 18770                           ; BSR set to: 0
 18771  002D60  0012               	return	
 18772  002D62                     __end_of_checkForOverlap:
 18773                           	opt stack 0
 18774                           tblptru	equ	0xFF8
 18775                           tblptrh	equ	0xFF7
 18776                           tblptrl	equ	0xFF6
 18777                           tablat	equ	0xFF5
 18778                           prodh	equ	0xFF4
 18779                           prodl	equ	0xFF3
 18780                           intcon	equ	0xFF2
 18781                           intcon3	equ	0xFF0
 18782                           indf0	equ	0xFEF
 18783                           postinc0	equ	0xFEE
 18784                           plusw0	equ	0xFEB
 18785                           fsr0h	equ	0xFEA
 18786                           fsr0l	equ	0xFE9
 18787                           wreg	equ	0xFE8
 18788                           indf1	equ	0xFE7
 18789                           postinc1	equ	0xFE6
 18790                           postdec1	equ	0xFE5
 18791                           plusw1	equ	0xFE3
 18792                           fsr1h	equ	0xFE2
 18793                           fsr1l	equ	0xFE1
 18794                           indf2	equ	0xFDF
 18795                           postinc2	equ	0xFDE
 18796                           postdec2	equ	0xFDD
 18797                           plusw2	equ	0xFDB
 18798                           fsr2h	equ	0xFDA
 18799                           fsr2l	equ	0xFD9
 18800                           status	equ	0xFD8
 18801                           
 18802 ;; *************** function _checkForOverlapSwitched *****************
 18803 ;; Defined at:
 18804 ;;		line 98 in file "src/mem/memoryController.c"
 18805 ;; Parameters:    Size  Location     Type
 18806 ;;  a               9    0[BANK0 ] struct memoryField
 18807 ;;  b               9    9[BANK0 ] struct memoryField
 18808 ;; Auto vars:     Size  Location     Type
 18809 ;;		None
 18810 ;; Return value:  Size  Location     Type
 18811 ;;		None               void
 18812 ;; Registers used:
 18813 ;;		wreg, status,2, status,0
 18814 ;; Tracked objects:
 18815 ;;		On entry : 0/0
 18816 ;;		On exit  : 0/0
 18817 ;;		Unchanged: 0/0
 18818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18819 ;;      Params:         0      18       0       0       0       0       0       0       0
 18820 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18821 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18822 ;;      Totals:         0      18       0       0       0       0       0       0       0
 18823 ;;Total ram usage:       18 bytes
 18824 ;; Hardware stack levels used:    1
 18825 ;; Hardware stack levels required when called:    4
 18826 ;; This function calls:
 18827 ;;		Nothing
 18828 ;; This function is called by:
 18829 ;;		_checkForOverlap
 18830 ;; This function uses a non-reentrant model
 18831 ;;
 18832                           
 18833                           	psect	text75
 18834  003818                     __ptext75:
 18835                           	opt stack 0
 18836  003818                     _checkForOverlapSwitched:
 18837                           	opt stack 18
 18838                           
 18839                           ;memoryController.c: 101: if ((a.start == b.start) ||
 18840                           ;memoryController.c: 102: (a.end == b.end) ||
 18841                           ;memoryController.c: 103: (a.start == b.end) ||
 18842                           ;memoryController.c: 104: (a.end == b.start) ||
 18843                           ;memoryController.c: 105: (a.end > 0x3000) ||
 18844                           ;memoryController.c: 106: (a.start > 0x3000) ||
 18845                           ;memoryController.c: 107: (b.end > 0x3000) ||
 18846                           ;memoryController.c: 108: (b.start > 0x3000))
 18847                           
 18848                           ; BSR set to: 0
 18849                           ;incstack = 0
 18850  003818  0100               	movlb	0	; () banked
 18851  00381A  5169               	movf	checkForOverlapSwitched@b& (0+255),w,b
 18852  00381C  1960               	xorwf	checkForOverlapSwitched@a& (0+255),w,b
 18853  00381E  E104               	bnz	u8040
 18854  003820  516A               	movf	(checkForOverlapSwitched@b+1)& (0+255),w,b
 18855  003822  1961               	xorwf	(checkForOverlapSwitched@a+1)& (0+255),w,b
 18856  003824  B4D8               	btfsc	status,2,c
 18857  003826  D029               	goto	u8110
 18858  003828                     u8040:
 18859                           
 18860                           ; BSR set to: 0
 18861  003828  516B               	movf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 18862  00382A  1962               	xorwf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 18863  00382C  E104               	bnz	u8050
 18864  00382E  516C               	movf	(checkForOverlapSwitched@b+3)& (0+255),w,b
 18865  003830  1963               	xorwf	(checkForOverlapSwitched@a+3)& (0+255),w,b
 18866  003832  B4D8               	btfsc	status,2,c
 18867  003834  D022               	goto	u8110
 18868  003836                     u8050:
 18869                           
 18870                           ; BSR set to: 0
 18871  003836  5160               	movf	checkForOverlapSwitched@a& (0+255),w,b
 18872  003838  196B               	xorwf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 18873  00383A  E104               	bnz	u8060
 18874  00383C  5161               	movf	(checkForOverlapSwitched@a+1)& (0+255),w,b
 18875  00383E  196C               	xorwf	(checkForOverlapSwitched@b+3)& (0+255),w,b
 18876  003840  B4D8               	btfsc	status,2,c
 18877  003842  D01B               	goto	u8110
 18878  003844                     u8060:
 18879                           
 18880                           ; BSR set to: 0
 18881  003844  5169               	movf	checkForOverlapSwitched@b& (0+255),w,b
 18882  003846  1962               	xorwf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 18883  003848  E104               	bnz	u8070
 18884  00384A  516A               	movf	(checkForOverlapSwitched@b+1)& (0+255),w,b
 18885  00384C  1963               	xorwf	(checkForOverlapSwitched@a+3)& (0+255),w,b
 18886  00384E  B4D8               	btfsc	status,2,c
 18887  003850  D014               	goto	u8110
 18888  003852                     u8070:
 18889                           
 18890                           ; BSR set to: 0
 18891  003852  0562               	decf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 18892  003854  0E30               	movlw	48
 18893  003856  5963               	subwfb	(checkForOverlapSwitched@a+3)& (0+255),w,b
 18894  003858  B0D8               	btfsc	status,0,c
 18895  00385A  D00F               	goto	u8110
 18896                           
 18897                           ; BSR set to: 0
 18898  00385C  0560               	decf	checkForOverlapSwitched@a& (0+255),w,b
 18899  00385E  0E30               	movlw	48
 18900  003860  5961               	subwfb	(checkForOverlapSwitched@a+1)& (0+255),w,b
 18901  003862  B0D8               	btfsc	status,0,c
 18902  003864  D00A               	goto	u8110
 18903                           
 18904                           ; BSR set to: 0
 18905  003866  056B               	decf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 18906  003868  0E30               	movlw	48
 18907  00386A  596C               	subwfb	(checkForOverlapSwitched@b+3)& (0+255),w,b
 18908  00386C  B0D8               	btfsc	status,0,c
 18909  00386E  D005               	goto	u8110
 18910                           
 18911                           ; BSR set to: 0
 18912  003870  0569               	decf	checkForOverlapSwitched@b& (0+255),w,b
 18913  003872  0E30               	movlw	48
 18914  003874  596A               	subwfb	(checkForOverlapSwitched@b+1)& (0+255),w,b
 18915  003876  A0D8               	btfss	status,0,c
 18916  003878  D002               	goto	l448
 18917  00387A                     u8110:
 18918                           
 18919                           ; BSR set to: 0
 18920                           ;memoryController.c: 109: return 1;
 18921                           
 18922                           ; BSR set to: 0
 18923  00387A  80D8               	bsf	status,0,c
 18924                           
 18925                           ; BSR set to: 0
 18926  00387C  0012               	return	
 18927  00387E                     l448:
 18928                           
 18929                           ; BSR set to: 0
 18930                           ;memoryController.c: 112: if (a.start < a.end) {
 18931                           
 18932                           ; BSR set to: 0
 18933  00387E  5162               	movf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 18934  003880  5D60               	subwf	checkForOverlapSwitched@a& (0+255),w,b
 18935  003882  5163               	movf	(checkForOverlapSwitched@a+3)& (0+255),w,b
 18936  003884  5961               	subwfb	(checkForOverlapSwitched@a+1)& (0+255),w,b
 18937  003886  B0D8               	btfsc	status,0,c
 18938  003888  D01E               	goto	l459
 18939                           
 18940                           ; BSR set to: 0
 18941                           ;memoryController.c: 113: if (b.start < b.end) {
 18942  00388A  516B               	movf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 18943  00388C  5D69               	subwf	checkForOverlapSwitched@b& (0+255),w,b
 18944  00388E  516C               	movf	(checkForOverlapSwitched@b+3)& (0+255),w,b
 18945  003890  596A               	subwfb	(checkForOverlapSwitched@b+1)& (0+255),w,b
 18946  003892  B0D8               	btfsc	status,0,c
 18947  003894  D010               	goto	l453
 18948                           
 18949                           ; BSR set to: 0
 18950                           ;memoryController.c: 115: if (a.start < b.start) {
 18951  003896  5169               	movf	checkForOverlapSwitched@b& (0+255),w,b
 18952  003898  5D60               	subwf	checkForOverlapSwitched@a& (0+255),w,b
 18953  00389A  516A               	movf	(checkForOverlapSwitched@b+1)& (0+255),w,b
 18954  00389C  5961               	subwfb	(checkForOverlapSwitched@a+1)& (0+255),w,b
 18955  00389E  B0D8               	btfsc	status,0,c
 18956  0038A0  D012               	goto	l459
 18957                           
 18958                           ; BSR set to: 0
 18959                           ;memoryController.c: 116: if (a.end > b.start) {
 18960  0038A2  5162               	movf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 18961  0038A4  5D69               	subwf	checkForOverlapSwitched@b& (0+255),w,b
 18962  0038A6  5163               	movf	(checkForOverlapSwitched@a+3)& (0+255),w,b
 18963  0038A8  596A               	subwfb	(checkForOverlapSwitched@b+1)& (0+255),w,b
 18964  0038AA  B0D8               	btfsc	status,0,c
 18965  0038AC  D002               	goto	l455
 18966                           
 18967                           ; BSR set to: 0
 18968                           ;memoryController.c: 117: return 1;
 18969  0038AE  80D8               	bsf	status,0,c
 18970                           
 18971                           ; BSR set to: 0
 18972  0038B0  0012               	return	
 18973  0038B2                     l455:
 18974                           
 18975                           ; BSR set to: 0
 18976                           ;memoryController.c: 119: return 0;
 18977                           
 18978                           ; BSR set to: 0
 18979  0038B2  90D8               	bcf	status,0,c
 18980                           
 18981                           ; BSR set to: 0
 18982  0038B4  0012               	return	
 18983  0038B6                     l453:
 18984                           
 18985                           ; BSR set to: 0
 18986                           ;memoryController.c: 123: if (b.end < a.start)
 18987                           
 18988                           ; BSR set to: 0
 18989  0038B6  5160               	movf	checkForOverlapSwitched@a& (0+255),w,b
 18990  0038B8  5D6B               	subwf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 18991  0038BA  5161               	movf	(checkForOverlapSwitched@a+1)& (0+255),w,b
 18992  0038BC  596C               	subwfb	(checkForOverlapSwitched@b+3)& (0+255),w,b
 18993  0038BE  A0D8               	btfss	status,0,c
 18994  0038C0  D7F8               	goto	l455
 18995                           
 18996                           ; BSR set to: 0
 18997                           ;memoryController.c: 125: else
 18998                           ;memoryController.c: 126: return 1;
 18999                           
 19000                           ; BSR set to: 0
 19001                           
 19002                           ; BSR set to: 0
 19003                           
 19004                           ; BSR set to: 0
 19005                           
 19006                           ; BSR set to: 0
 19007                           ;memoryController.c: 124: return 0;
 19008  0038C2  80D8               	bsf	status,0,c
 19009                           
 19010                           ; BSR set to: 0
 19011  0038C4  0012               	return	
 19012  0038C6                     l459:
 19013                           
 19014                           ; BSR set to: 0
 19015                           ;memoryController.c: 127: }
 19016                           ;memoryController.c: 128: }
 19017                           ;memoryController.c: 130: return 1;
 19018                           
 19019                           ; BSR set to: 0
 19020                           
 19021                           ; BSR set to: 0
 19022                           
 19023                           ; BSR set to: 0
 19024  0038C6  80D8               	bsf	status,0,c
 19025  0038C8  0012               	return	
 19026  0038CA                     __end_of_checkForOverlapSwitched:
 19027                           	opt stack 0
 19028                           tblptru	equ	0xFF8
 19029                           tblptrh	equ	0xFF7
 19030                           tblptrl	equ	0xFF6
 19031                           tablat	equ	0xFF5
 19032                           prodh	equ	0xFF4
 19033                           prodl	equ	0xFF3
 19034                           intcon	equ	0xFF2
 19035                           intcon3	equ	0xFF0
 19036                           indf0	equ	0xFEF
 19037                           postinc0	equ	0xFEE
 19038                           plusw0	equ	0xFEB
 19039                           fsr0h	equ	0xFEA
 19040                           fsr0l	equ	0xFE9
 19041                           wreg	equ	0xFE8
 19042                           indf1	equ	0xFE7
 19043                           postinc1	equ	0xFE6
 19044                           postdec1	equ	0xFE5
 19045                           plusw1	equ	0xFE3
 19046                           fsr1h	equ	0xFE2
 19047                           fsr1l	equ	0xFE1
 19048                           indf2	equ	0xFDF
 19049                           postinc2	equ	0xFDE
 19050                           postdec2	equ	0xFDD
 19051                           plusw2	equ	0xFDB
 19052                           fsr2h	equ	0xFDA
 19053                           fsr2l	equ	0xFD9
 19054                           status	equ	0xFD8
 19055                           
 19056 ;; *************** function ___wmul *****************
 19057 ;; Defined at:
 19058 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 19059 ;; Parameters:    Size  Location     Type
 19060 ;;  multiplier      2    0[BANK0 ] unsigned int 
 19061 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 19062 ;; Auto vars:     Size  Location     Type
 19063 ;;  product         2    4[BANK0 ] unsigned int 
 19064 ;; Return value:  Size  Location     Type
 19065 ;;                  2    0[BANK0 ] unsigned int 
 19066 ;; Registers used:
 19067 ;;		wreg, status,2, status,0, prodl, prodh
 19068 ;; Tracked objects:
 19069 ;;		On entry : 0/0
 19070 ;;		On exit  : 0/0
 19071 ;;		Unchanged: 0/0
 19072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19073 ;;      Params:         0       4       0       0       0       0       0       0       0
 19074 ;;      Locals:         0       2       0       0       0       0       0       0       0
 19075 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19076 ;;      Totals:         0       6       0       0       0       0       0       0       0
 19077 ;;Total ram usage:        6 bytes
 19078 ;; Hardware stack levels used:    1
 19079 ;; Hardware stack levels required when called:    4
 19080 ;; This function calls:
 19081 ;;		Nothing
 19082 ;; This function is called by:
 19083 ;;		_memory_txFrameRequest
 19084 ;; This function uses a non-reentrant model
 19085 ;;
 19086                           
 19087                           	psect	text76
 19088  004A64                     __ptext76:
 19089                           	opt stack 0
 19090  004A64                     ___wmul:
 19091                           	opt stack 19
 19092                           
 19093                           ; BSR set to: 0
 19094                           ;incstack = 0
 19095  004A64  0100               	movlb	0	; () banked
 19096  004A66  5160               	movf	___wmul@multiplier& (0+255),w,b
 19097  004A68  0362               	mulwf	___wmul@multiplicand& (0+255),b
 19098  004A6A  CFF3 F064          	movff	prodl,___wmul@product
 19099  004A6E  CFF4 F065          	movff	prodh,___wmul@product+1
 19100  004A72  5160               	movf	___wmul@multiplier& (0+255),w,b
 19101  004A74  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 19102  004A76  50F3               	movf	prodl,w,c
 19103  004A78  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 19104  004A7A  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 19105  004A7C  0362               	mulwf	___wmul@multiplicand& (0+255),b
 19106  004A7E  50F3               	movf	prodl,w,c
 19107  004A80  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 19108                           
 19109                           ; BSR set to: 0
 19110  004A82  C064  F060         	movff	___wmul@product,?___wmul
 19111  004A86  C065  F061         	movff	___wmul@product+1,?___wmul+1
 19112  004A8A  0012               	return	
 19113  004A8C                     __end_of___wmul:
 19114                           	opt stack 0
 19115                           tblptru	equ	0xFF8
 19116                           tblptrh	equ	0xFF7
 19117                           tblptrl	equ	0xFF6
 19118                           tablat	equ	0xFF5
 19119                           prodh	equ	0xFF4
 19120                           prodl	equ	0xFF3
 19121                           intcon	equ	0xFF2
 19122                           intcon3	equ	0xFF0
 19123                           indf0	equ	0xFEF
 19124                           postinc0	equ	0xFEE
 19125                           plusw0	equ	0xFEB
 19126                           fsr0h	equ	0xFEA
 19127                           fsr0l	equ	0xFE9
 19128                           wreg	equ	0xFE8
 19129                           indf1	equ	0xFE7
 19130                           postinc1	equ	0xFE6
 19131                           postdec1	equ	0xFE5
 19132                           plusw1	equ	0xFE3
 19133                           fsr1h	equ	0xFE2
 19134                           fsr1l	equ	0xFE1
 19135                           indf2	equ	0xFDF
 19136                           postinc2	equ	0xFDE
 19137                           postdec2	equ	0xFDD
 19138                           plusw2	equ	0xFDB
 19139                           fsr2h	equ	0xFDA
 19140                           fsr2l	equ	0xFD9
 19141                           status	equ	0xFD8
 19142                           
 19143 ;; *************** function _ethernetController_writeEtherTypeFieldToBuffer *****************
 19144 ;; Defined at:
 19145 ;;		line 241 in file "src/enc424j600/ENC424J600.c"
 19146 ;; Parameters:    Size  Location     Type
 19147 ;;  ethtype         2   15[BANK0 ] enum E5508
 19148 ;;  field           9   17[BANK0 ] struct memoryField
 19149 ;; Auto vars:     Size  Location     Type
 19150 ;;  opcode          1   28[BANK0 ] unsigned char 
 19151 ;;  highByte        1   27[BANK0 ] unsigned char 
 19152 ;;  lowByte         1   26[BANK0 ] unsigned char 
 19153 ;; Return value:  Size  Location     Type
 19154 ;;                  1    wreg      void 
 19155 ;; Registers used:
 19156 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19157 ;; Tracked objects:
 19158 ;;		On entry : 0/0
 19159 ;;		On exit  : 0/0
 19160 ;;		Unchanged: 0/0
 19161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19162 ;;      Params:         0      11       0       0       0       0       0       0       0
 19163 ;;      Locals:         0       3       0       0       0       0       0       0       0
 19164 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19165 ;;      Totals:         0      14       0       0       0       0       0       0       0
 19166 ;;Total ram usage:       14 bytes
 19167 ;; Hardware stack levels used:    1
 19168 ;; Hardware stack levels required when called:    7
 19169 ;; This function calls:
 19170 ;;		_enc424j600_setGPDATAWritePointer
 19171 ;;		_enc424j600_writeSPI
 19172 ;; This function is called by:
 19173 ;;		_ethernet_txFrameRequest
 19174 ;; This function uses a non-reentrant model
 19175 ;;
 19176                           
 19177                           	psect	text77
 19178  004530                     __ptext77:
 19179                           	opt stack 0
 19180  004530                     _ethernetController_writeEtherTypeFieldToBuffer:
 19181                           	opt stack 17
 19182                           
 19183                           ;ENC424J600.c: 242: enc424j600_setGPDATAWritePointer(field.start + 0x0006);
 19184                           
 19185                           ; BSR set to: 0
 19186                           ;incstack = 0
 19187  004530  0E06               	movlw	6
 19188  004532  0100               	movlb	0	; () banked
 19189  004534  2571               	addwf	ethernetController_writeEtherTypeFieldToBuffer@field& (0+255),w,b
 19190  004536  6F6A               	movwf	enc424j600_setGPDATAWritePointer@addr& (0+255),b
 19191  004538  0E00               	movlw	0
 19192  00453A  2172               	addwfc	(ethernetController_writeEtherTypeFieldToBuffer@field+1)& (0+255),w,b
 19193  00453C  6F6B               	movwf	(enc424j600_setGPDATAWritePointer@addr+1)& (0+255),b
 19194  00453E  ECD4  F023         	call	_enc424j600_setGPDATAWritePointer	;wreg free
 19195                           
 19196                           ;ENC424J600.c: 243: uint8_t lowByte = ethtype & 0x00ff;
 19197  004542  C06F  F07A         	movff	ethernetController_writeEtherTypeFieldToBuffer@ethtype,ethernetController_writeEt
      +                          herTypeFieldToBuffer@lowByte
 19198                           
 19199                           ;ENC424J600.c: 244: uint8_t highByte = (ethtype & 0xff00) >> 8;
 19200  004546  0100               	movlb	0	; () banked
 19201  004548  5170               	movf	(ethernetController_writeEtherTypeFieldToBuffer@ethtype+1)& (0+255),w,b
 19202  00454A  6F7B               	movwf	ethernetController_writeEtherTypeFieldToBuffer@highByte& (0+255),b
 19203                           
 19204                           ; BSR set to: 0
 19205                           ;ENC424J600.c: 245: uint8_t opcode = 0x2A;
 19206  00454C  0E2A               	movlw	42
 19207  00454E  6F7C               	movwf	ethernetController_writeEtherTypeFieldToBuffer@opcode& (0+255),b
 19208                           
 19209                           ; BSR set to: 0
 19210                           ;ENC424J600.c: 246: PORTBbits.RB4=0;
 19211  004550  9881               	bcf	3969,4,c	;volatile
 19212                           
 19213                           ;ENC424J600.c: 247: enc424j600_writeSPI(&opcode);
 19214  004552  0E7C               	movlw	low ethernetController_writeEtherTypeFieldToBuffer@opcode
 19215  004554  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 19216  004556  0E00               	movlw	high ethernetController_writeEtherTypeFieldToBuffer@opcode
 19217  004558  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 19218  00455A  EC10  F021         	call	_enc424j600_writeSPI	;wreg free
 19219                           
 19220                           ;ENC424J600.c: 248: enc424j600_writeSPI(&highByte);
 19221  00455E  0E7B               	movlw	low ethernetController_writeEtherTypeFieldToBuffer@highByte
 19222  004560  0100               	movlb	0	; () banked
 19223  004562  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 19224  004564  0E00               	movlw	high ethernetController_writeEtherTypeFieldToBuffer@highByte
 19225  004566  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 19226  004568  EC10  F021         	call	_enc424j600_writeSPI	;wreg free
 19227                           
 19228                           ;ENC424J600.c: 249: enc424j600_writeSPI(&lowByte);
 19229  00456C  0E7A               	movlw	low ethernetController_writeEtherTypeFieldToBuffer@lowByte
 19230  00456E  0100               	movlb	0	; () banked
 19231  004570  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 19232  004572  0E00               	movlw	high ethernetController_writeEtherTypeFieldToBuffer@lowByte
 19233  004574  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 19234  004576  EC10  F021         	call	_enc424j600_writeSPI	;wreg free
 19235                           
 19236                           ;ENC424J600.c: 250: PORTBbits.RB4=1;
 19237  00457A  8881               	bsf	3969,4,c	;volatile
 19238  00457C  0012               	return		;funcret
 19239  00457E                     __end_of_ethernetController_writeEtherTypeFieldToBuffer:
 19240                           	opt stack 0
 19241                           tblptru	equ	0xFF8
 19242                           tblptrh	equ	0xFF7
 19243                           tblptrl	equ	0xFF6
 19244                           tablat	equ	0xFF5
 19245                           prodh	equ	0xFF4
 19246                           prodl	equ	0xFF3
 19247                           intcon	equ	0xFF2
 19248                           intcon3	equ	0xFF0
 19249                           indf0	equ	0xFEF
 19250                           postinc0	equ	0xFEE
 19251                           plusw0	equ	0xFEB
 19252                           fsr0h	equ	0xFEA
 19253                           fsr0l	equ	0xFE9
 19254                           wreg	equ	0xFE8
 19255                           indf1	equ	0xFE7
 19256                           postinc1	equ	0xFE6
 19257                           postdec1	equ	0xFE5
 19258                           plusw1	equ	0xFE3
 19259                           fsr1h	equ	0xFE2
 19260                           fsr1l	equ	0xFE1
 19261                           indf2	equ	0xFDF
 19262                           postinc2	equ	0xFDE
 19263                           postdec2	equ	0xFDD
 19264                           plusw2	equ	0xFDB
 19265                           fsr2h	equ	0xFDA
 19266                           fsr2l	equ	0xFD9
 19267                           status	equ	0xFD8
 19268                           
 19269 ;; *************** function _ethernetController_writeDestinationMACAddress *****************
 19270 ;; Defined at:
 19271 ;;		line 228 in file "src/enc424j600/ENC424J600.c"
 19272 ;; Parameters:    Size  Location     Type
 19273 ;;  addr            6   15[BANK0 ] struct macaddress
 19274 ;;  field           9   21[BANK0 ] struct memoryField
 19275 ;; Auto vars:     Size  Location     Type
 19276 ;;  i               1   37[BANK0 ] unsigned char 
 19277 ;;  i               1   38[BANK0 ] unsigned char 
 19278 ;;  data            6   30[BANK0 ] unsigned char [6]
 19279 ;;  opcode          1   36[BANK0 ] unsigned char 
 19280 ;; Return value:  Size  Location     Type
 19281 ;;                  1    wreg      void 
 19282 ;; Registers used:
 19283 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19284 ;; Tracked objects:
 19285 ;;		On entry : 0/0
 19286 ;;		On exit  : 0/0
 19287 ;;		Unchanged: 0/0
 19288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19289 ;;      Params:         0      15       0       0       0       0       0       0       0
 19290 ;;      Locals:         0       9       0       0       0       0       0       0       0
 19291 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19292 ;;      Totals:         0      24       0       0       0       0       0       0       0
 19293 ;;Total ram usage:       24 bytes
 19294 ;; Hardware stack levels used:    1
 19295 ;; Hardware stack levels required when called:    7
 19296 ;; This function calls:
 19297 ;;		_enc424j600_setGPDATAWritePointer
 19298 ;;		_enc424j600_writeSPI
 19299 ;; This function is called by:
 19300 ;;		_ethernet_txFrameRequest
 19301 ;; This function uses a non-reentrant model
 19302 ;;
 19303                           
 19304                           	psect	text78
 19305  003CBE                     __ptext78:
 19306                           	opt stack 0
 19307  003CBE                     _ethernetController_writeDestinationMACAddress:
 19308                           	opt stack 17
 19309                           
 19310                           ;ENC424J600.c: 229: enc424j600_setGPDATAWritePointer(field.start);
 19311                           
 19312                           ;incstack = 0
 19313  003CBE  C075  F06A         	movff	ethernetController_writeDestinationMACAddress@field,enc424j600_setGPDATAWritePoin
      +                          ter@addr
 19314  003CC2  C076  F06B         	movff	ethernetController_writeDestinationMACAddress@field+1,enc424j600_setGPDATAWritePo
      +                          inter@addr+1
 19315  003CC6  ECD4  F023         	call	_enc424j600_setGPDATAWritePointer	;wreg free
 19316                           
 19317                           ;ENC424J600.c: 230: uint8_t data[6];
 19318                           ;ENC424J600.c: 231: for (uint8_t i = 0; i < 6; i++)
 19319  003CCA  0E00               	movlw	0
 19320  003CCC  0100               	movlb	0	; () banked
 19321  003CCE  6F86               	movwf	ethernetController_writeDestinationMACAddress@i& (0+255),b
 19322  003CD0                     l7791:
 19323                           
 19324                           ; BSR set to: 0
 19325  003CD0  0E05               	movlw	5
 19326  003CD2  6586               	cpfsgt	ethernetController_writeDestinationMACAddress@i& (0+255),b
 19327  003CD4  D001               	goto	l140
 19328  003CD6  D014               	goto	u8430
 19329  003CD8                     l140:
 19330                           
 19331                           ; BSR set to: 0
 19332                           ;ENC424J600.c: 232: data[i] = addr.address[i];
 19333                           
 19334                           ; BSR set to: 0
 19335  003CD8  5186               	movf	ethernetController_writeDestinationMACAddress@i& (0+255),w,b
 19336  003CDA  0D01               	mullw	1
 19337  003CDC  0E6F               	movlw	low ethernetController_writeDestinationMACAddress@addr
 19338  003CDE  24F3               	addwf	prodl,w,c
 19339  003CE0  6ED9               	movwf	fsr2l,c
 19340  003CE2  0E00               	movlw	high ethernetController_writeDestinationMACAddress@addr
 19341  003CE4  20F4               	addwfc	prodh,w,c
 19342  003CE6  6EDA               	movwf	fsr2h,c
 19343  003CE8  5186               	movf	ethernetController_writeDestinationMACAddress@i& (0+255),w,b
 19344  003CEA  0D01               	mullw	1
 19345  003CEC  0E7E               	movlw	low ethernetController_writeDestinationMACAddress@data
 19346  003CEE  24F3               	addwf	prodl,w,c
 19347  003CF0  6EE1               	movwf	fsr1l,c
 19348  003CF2  0E00               	movlw	high ethernetController_writeDestinationMACAddress@data
 19349  003CF4  20F4               	addwfc	prodh,w,c
 19350  003CF6  6EE2               	movwf	fsr1h,c
 19351  003CF8  CFDF FFE7          	movff	indf2,indf1
 19352                           
 19353                           ; BSR set to: 0
 19354  003CFC  2B86               	incf	ethernetController_writeDestinationMACAddress@i& (0+255),f,b
 19355  003CFE  D7E8               	goto	l7791
 19356  003D00                     u8430:
 19357                           
 19358                           ; BSR set to: 0
 19359                           ;ENC424J600.c: 233: uint8_t opcode = 0x2A;
 19360                           
 19361                           ; BSR set to: 0
 19362  003D00  0E2A               	movlw	42
 19363  003D02  6F84               	movwf	ethernetController_writeDestinationMACAddress@opcode& (0+255),b
 19364                           
 19365                           ; BSR set to: 0
 19366                           ;ENC424J600.c: 234: PORTBbits.RB4=0;
 19367  003D04  9881               	bcf	3969,4,c	;volatile
 19368                           
 19369                           ; BSR set to: 0
 19370                           ;ENC424J600.c: 235: enc424j600_writeSPI(&opcode);
 19371  003D06  0E84               	movlw	low ethernetController_writeDestinationMACAddress@opcode
 19372  003D08  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 19373  003D0A  0E00               	movlw	high ethernetController_writeDestinationMACAddress@opcode
 19374  003D0C  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 19375  003D0E  EC10  F021         	call	_enc424j600_writeSPI	;wreg free
 19376                           
 19377                           ;ENC424J600.c: 236: for (uint8_t i = 0; i < 6; i++)
 19378  003D12  0E00               	movlw	0
 19379  003D14  0100               	movlb	0	; () banked
 19380  003D16  6F85               	movwf	ethernetController_writeDestinationMACAddress@i_646& (0+255),b
 19381  003D18                     l7809:
 19382                           
 19383                           ; BSR set to: 0
 19384  003D18  0E05               	movlw	5
 19385  003D1A  6585               	cpfsgt	ethernetController_writeDestinationMACAddress@i_646& (0+255),b
 19386  003D1C  D001               	goto	l142
 19387  003D1E  D00D               	goto	u8450
 19388  003D20                     l142:
 19389                           
 19390                           ; BSR set to: 0
 19391                           ;ENC424J600.c: 237: enc424j600_writeSPI(&data[i]);
 19392                           
 19393                           ; BSR set to: 0
 19394  003D20  5185               	movf	ethernetController_writeDestinationMACAddress@i_646& (0+255),w,b
 19395  003D22  0D01               	mullw	1
 19396  003D24  0E7E               	movlw	low ethernetController_writeDestinationMACAddress@data
 19397  003D26  24F3               	addwf	prodl,w,c
 19398  003D28  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 19399  003D2A  0E00               	movlw	high ethernetController_writeDestinationMACAddress@data
 19400  003D2C  20F4               	addwfc	prodh,w,c
 19401  003D2E  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 19402  003D30  EC10  F021         	call	_enc424j600_writeSPI	;wreg free
 19403  003D34  0100               	movlb	0	; () banked
 19404  003D36  2B85               	incf	ethernetController_writeDestinationMACAddress@i_646& (0+255),f,b
 19405  003D38  D7EF               	goto	l7809
 19406  003D3A                     u8450:
 19407                           
 19408                           ; BSR set to: 0
 19409                           ;ENC424J600.c: 238: PORTBbits.RB4=1;
 19410  003D3A  8881               	bsf	3969,4,c	;volatile
 19411                           
 19412                           ; BSR set to: 0
 19413  003D3C  0012               	return		;funcret
 19414  003D3E                     __end_of_ethernetController_writeDestinationMACAddress:
 19415                           	opt stack 0
 19416                           tblptru	equ	0xFF8
 19417                           tblptrh	equ	0xFF7
 19418                           tblptrl	equ	0xFF6
 19419                           tablat	equ	0xFF5
 19420                           prodh	equ	0xFF4
 19421                           prodl	equ	0xFF3
 19422                           intcon	equ	0xFF2
 19423                           intcon3	equ	0xFF0
 19424                           indf0	equ	0xFEF
 19425                           postinc0	equ	0xFEE
 19426                           plusw0	equ	0xFEB
 19427                           fsr0h	equ	0xFEA
 19428                           fsr0l	equ	0xFE9
 19429                           wreg	equ	0xFE8
 19430                           indf1	equ	0xFE7
 19431                           postinc1	equ	0xFE6
 19432                           postdec1	equ	0xFE5
 19433                           plusw1	equ	0xFE3
 19434                           fsr1h	equ	0xFE2
 19435                           fsr1l	equ	0xFE1
 19436                           indf2	equ	0xFDF
 19437                           postinc2	equ	0xFDE
 19438                           postdec2	equ	0xFDD
 19439                           plusw2	equ	0xFDB
 19440                           fsr2h	equ	0xFDA
 19441                           fsr2l	equ	0xFD9
 19442                           status	equ	0xFD8
 19443                           
 19444 ;; *************** function _ethernetController_streamToTransmitBuffer *****************
 19445 ;; Defined at:
 19446 ;;		line 208 in file "src/enc424j600/ENC424J600.c"
 19447 ;; Parameters:    Size  Location     Type
 19448 ;;  data            1    wreg     unsigned char 
 19449 ;;  field           9   15[BANK0 ] struct memoryField
 19450 ;; Auto vars:     Size  Location     Type
 19451 ;;  data            1   28[BANK0 ] unsigned char 
 19452 ;;  opcode          1   29[BANK0 ] unsigned char 
 19453 ;; Return value:  Size  Location     Type
 19454 ;;                  1    wreg      void 
 19455 ;; Registers used:
 19456 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19457 ;; Tracked objects:
 19458 ;;		On entry : 0/0
 19459 ;;		On exit  : 0/0
 19460 ;;		Unchanged: 0/0
 19461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19462 ;;      Params:         0       9       0       0       0       0       0       0       0
 19463 ;;      Locals:         0       2       0       0       0       0       0       0       0
 19464 ;;      Temps:          0       4       0       0       0       0       0       0       0
 19465 ;;      Totals:         0      15       0       0       0       0       0       0       0
 19466 ;;Total ram usage:       15 bytes
 19467 ;; Hardware stack levels used:    1
 19468 ;; Hardware stack levels required when called:    7
 19469 ;; This function calls:
 19470 ;;		_enc424j600_setGPDATAWritePointer
 19471 ;;		_enc424j600_writeSPI
 19472 ;; This function is called by:
 19473 ;;		_arp_send
 19474 ;;		_ipv4_streamToTransmissionBuffer
 19475 ;; This function uses a non-reentrant model
 19476 ;;
 19477                           
 19478                           	psect	text79
 19479  003E36                     __ptext79:
 19480                           	opt stack 0
 19481  003E36                     _ethernetController_streamToTransmitBuffer:
 19482                           	opt stack 18
 19483                           
 19484                           ; BSR set to: 0
 19485                           ;incstack = 0
 19486                           ;ethernetController_streamToTransmitBuffer@data stored from wreg
 19487  003E36  0100               	movlb	0	; () banked
 19488  003E38  6F7C               	movwf	ethernetController_streamToTransmitBuffer@data& (0+255),b
 19489                           
 19490                           ;ENC424J600.c: 209: uint8_t opcode;
 19491                           ;ENC424J600.c: 210: uint16_t static pointer = 0;
 19492                           ;ENC424J600.c: 211: if (pointer == 0) {
 19493  003E3A  503E               	movf	ethernetController_streamToTransmitBuffer@pointer,w,c
 19494  003E3C  103F               	iorwf	ethernetController_streamToTransmitBuffer@pointer+1,w,c
 19495  003E3E  A4D8               	btfss	status,2,c
 19496  003E40  D010               	goto	l134
 19497                           
 19498                           ;ENC424J600.c: 212: enc424j600_setGPDATAWritePointer(field.start);
 19499  003E42  C06F  F06A         	movff	ethernetController_streamToTransmitBuffer@field,enc424j600_setGPDATAWritePointer@
      +                          addr
 19500  003E46  C070  F06B         	movff	ethernetController_streamToTransmitBuffer@field+1,enc424j600_setGPDATAWritePointe
      +                          r@addr+1
 19501  003E4A  ECD4  F023         	call	_enc424j600_setGPDATAWritePointer	;wreg free
 19502                           
 19503                           ;ENC424J600.c: 213: opcode = 0x2A;
 19504  003E4E  0E2A               	movlw	42
 19505  003E50  0100               	movlb	0	; () banked
 19506  003E52  6F7D               	movwf	ethernetController_streamToTransmitBuffer@opcode& (0+255),b
 19507                           
 19508                           ; BSR set to: 0
 19509                           ;ENC424J600.c: 214: PORTBbits.RB4=0;
 19510  003E54  9881               	bcf	3969,4,c	;volatile
 19511                           
 19512                           ; BSR set to: 0
 19513                           ;ENC424J600.c: 215: enc424j600_writeSPI(&opcode);
 19514  003E56  0E7D               	movlw	low ethernetController_streamToTransmitBuffer@opcode
 19515  003E58  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 19516  003E5A  0E00               	movlw	high ethernetController_streamToTransmitBuffer@opcode
 19517  003E5C  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 19518  003E5E  EC10  F021         	call	_enc424j600_writeSPI	;wreg free
 19519  003E62                     l134:
 19520                           
 19521                           ;ENC424J600.c: 216: }
 19522                           ;ENC424J600.c: 218: enc424j600_writeSPI(&data);
 19523  003E62  0E7C               	movlw	low ethernetController_streamToTransmitBuffer@data
 19524  003E64  0100               	movlb	0	; () banked
 19525  003E66  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 19526  003E68  0E00               	movlw	high ethernetController_streamToTransmitBuffer@data
 19527  003E6A  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 19528  003E6C  EC10  F021         	call	_enc424j600_writeSPI	;wreg free
 19529                           
 19530                           ;ENC424J600.c: 220: if (pointer == field.length - 1) {
 19531  003E70  0EFF               	movlw	255
 19532  003E72  0100               	movlb	0	; () banked
 19533  003E74  6F78               	movwf	??_ethernetController_streamToTransmitBuffer& (0+255),b
 19534  003E76  0EFF               	movlw	255
 19535  003E78  6F79               	movwf	(??_ethernetController_streamToTransmitBuffer+1)& (0+255),b
 19536  003E7A  EE20  F073         	lfsr	2,ethernetController_streamToTransmitBuffer@field+4
 19537  003E7E  CFDE F07A          	movff	postinc2,??_ethernetController_streamToTransmitBuffer+2
 19538  003E82  CFDD F07B          	movff	postdec2,??_ethernetController_streamToTransmitBuffer+3
 19539  003E86  5178               	movf	??_ethernetController_streamToTransmitBuffer& (0+255),w,b
 19540  003E88  277A               	addwf	(??_ethernetController_streamToTransmitBuffer+2)& (0+255),f,b
 19541  003E8A  5179               	movf	(??_ethernetController_streamToTransmitBuffer+1)& (0+255),w,b
 19542  003E8C  237B               	addwfc	(??_ethernetController_streamToTransmitBuffer+3)& (0+255),f,b
 19543  003E8E  503E               	movf	ethernetController_streamToTransmitBuffer@pointer,w,c
 19544  003E90  197A               	xorwf	(??_ethernetController_streamToTransmitBuffer+2)& (0+255),w,b
 19545  003E92  E10A               	bnz	l8069
 19546  003E94  503F               	movf	ethernetController_streamToTransmitBuffer@pointer+1,w,c
 19547  003E96  197B               	xorwf	(??_ethernetController_streamToTransmitBuffer+3)& (0+255),w,b
 19548  003E98  A4D8               	btfss	status,2,c
 19549  003E9A  D006               	goto	l135
 19550                           
 19551                           ; BSR set to: 0
 19552                           ;ENC424J600.c: 221: PORTBbits.RB4=1;
 19553  003E9C  8881               	bsf	3969,4,c	;volatile
 19554                           
 19555                           ; BSR set to: 0
 19556                           ;ENC424J600.c: 222: pointer = 0;
 19557  003E9E  0E00               	movlw	0
 19558  003EA0  6E3F               	movwf	ethernetController_streamToTransmitBuffer@pointer+1,c
 19559  003EA2  0E00               	movlw	0
 19560  003EA4  6E3E               	movwf	ethernetController_streamToTransmitBuffer@pointer,c
 19561                           
 19562                           ;ENC424J600.c: 223: } else {
 19563  003EA6  0012               	return	
 19564  003EA8                     l135:
 19565  003EA8                     l8069:
 19566                           
 19567                           ; BSR set to: 0
 19568                           ;ENC424J600.c: 224: pointer++;
 19569  003EA8  4A3E               	infsnz	ethernetController_streamToTransmitBuffer@pointer,f,c
 19570  003EAA  2A3F               	incf	ethernetController_streamToTransmitBuffer@pointer+1,f,c
 19571  003EAC  0012               	return	
 19572  003EAE                     __end_of_ethernetController_streamToTransmitBuffer:
 19573                           	opt stack 0
 19574                           tblptru	equ	0xFF8
 19575                           tblptrh	equ	0xFF7
 19576                           tblptrl	equ	0xFF6
 19577                           tablat	equ	0xFF5
 19578                           prodh	equ	0xFF4
 19579                           prodl	equ	0xFF3
 19580                           intcon	equ	0xFF2
 19581                           intcon3	equ	0xFF0
 19582                           indf0	equ	0xFEF
 19583                           postinc0	equ	0xFEE
 19584                           plusw0	equ	0xFEB
 19585                           fsr0h	equ	0xFEA
 19586                           fsr0l	equ	0xFE9
 19587                           wreg	equ	0xFE8
 19588                           indf1	equ	0xFE7
 19589                           postinc1	equ	0xFE6
 19590                           postdec1	equ	0xFE5
 19591                           plusw1	equ	0xFE3
 19592                           fsr1h	equ	0xFE2
 19593                           fsr1l	equ	0xFE1
 19594                           indf2	equ	0xFDF
 19595                           postinc2	equ	0xFDE
 19596                           postdec2	equ	0xFDD
 19597                           plusw2	equ	0xFDB
 19598                           fsr2h	equ	0xFDA
 19599                           fsr2l	equ	0xFD9
 19600                           status	equ	0xFD8
 19601                           
 19602 ;; *************** function _enc424j600_setGPDATAWritePointer *****************
 19603 ;; Defined at:
 19604 ;;		line 609 in file "src/enc424j600/ENC424J600.c"
 19605 ;; Parameters:    Size  Location     Type
 19606 ;;  addr            2   10[BANK0 ] unsigned int 
 19607 ;; Auto vars:     Size  Location     Type
 19608 ;;  highByte        1   14[BANK0 ] unsigned char 
 19609 ;;  lowByte         1   13[BANK0 ] unsigned char 
 19610 ;;  opcode          1   12[BANK0 ] unsigned char 
 19611 ;; Return value:  Size  Location     Type
 19612 ;;                  1    wreg      void 
 19613 ;; Registers used:
 19614 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19615 ;; Tracked objects:
 19616 ;;		On entry : 0/0
 19617 ;;		On exit  : 0/0
 19618 ;;		Unchanged: 0/0
 19619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19620 ;;      Params:         0       2       0       0       0       0       0       0       0
 19621 ;;      Locals:         0       3       0       0       0       0       0       0       0
 19622 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19623 ;;      Totals:         0       5       0       0       0       0       0       0       0
 19624 ;;Total ram usage:        5 bytes
 19625 ;; Hardware stack levels used:    1
 19626 ;; Hardware stack levels required when called:    6
 19627 ;; This function calls:
 19628 ;;		_enc424j600_writeSPI
 19629 ;; This function is called by:
 19630 ;;		_ethernetController_streamToTransmitBuffer
 19631 ;;		_ethernetController_writeDestinationMACAddress
 19632 ;;		_ethernetController_writeEtherTypeFieldToBuffer
 19633 ;; This function uses a non-reentrant model
 19634 ;;
 19635                           
 19636                           	psect	text80
 19637  0047A8                     __ptext80:
 19638                           	opt stack 0
 19639  0047A8                     _enc424j600_setGPDATAWritePointer:
 19640                           	opt stack 17
 19641                           
 19642                           ;ENC424J600.c: 610: uint8_t opcode = 0x6C;
 19643                           
 19644                           ; BSR set to: 0
 19645                           ;incstack = 0
 19646  0047A8  0E6C               	movlw	108
 19647  0047AA  0100               	movlb	0	; () banked
 19648  0047AC  6F6C               	movwf	enc424j600_setGPDATAWritePointer@opcode& (0+255),b
 19649                           
 19650                           ; BSR set to: 0
 19651                           ;ENC424J600.c: 611: uint8_t lowByte = addr & 0x00ff;
 19652  0047AE  C06A  F06D         	movff	enc424j600_setGPDATAWritePointer@addr,enc424j600_setGPDATAWritePointer@lowByte
 19653                           
 19654                           ;ENC424J600.c: 612: uint8_t highByte = (addr & 0xff00) >> 8;
 19655  0047B2  516B               	movf	(enc424j600_setGPDATAWritePointer@addr+1)& (0+255),w,b
 19656  0047B4  6F6E               	movwf	enc424j600_setGPDATAWritePointer@highByte& (0+255),b
 19657                           
 19658                           ; BSR set to: 0
 19659                           ;ENC424J600.c: 613: PORTBbits.RB4=0;
 19660  0047B6  9881               	bcf	3969,4,c	;volatile
 19661                           
 19662                           ; BSR set to: 0
 19663                           ;ENC424J600.c: 614: enc424j600_writeSPI(&opcode);
 19664  0047B8  0E6C               	movlw	low enc424j600_setGPDATAWritePointer@opcode
 19665  0047BA  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 19666  0047BC  0E00               	movlw	high enc424j600_setGPDATAWritePointer@opcode
 19667  0047BE  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 19668  0047C0  EC10  F021         	call	_enc424j600_writeSPI	;wreg free
 19669                           
 19670                           ;ENC424J600.c: 615: enc424j600_writeSPI(&lowByte);
 19671  0047C4  0E6D               	movlw	low enc424j600_setGPDATAWritePointer@lowByte
 19672  0047C6  0100               	movlb	0	; () banked
 19673  0047C8  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 19674  0047CA  0E00               	movlw	high enc424j600_setGPDATAWritePointer@lowByte
 19675  0047CC  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 19676  0047CE  EC10  F021         	call	_enc424j600_writeSPI	;wreg free
 19677                           
 19678                           ;ENC424J600.c: 616: enc424j600_writeSPI(&highByte);
 19679  0047D2  0E6E               	movlw	low enc424j600_setGPDATAWritePointer@highByte
 19680  0047D4  0100               	movlb	0	; () banked
 19681  0047D6  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 19682  0047D8  0E00               	movlw	high enc424j600_setGPDATAWritePointer@highByte
 19683  0047DA  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 19684  0047DC  EC10  F021         	call	_enc424j600_writeSPI	;wreg free
 19685                           
 19686                           ;ENC424J600.c: 617: PORTBbits.RB4=1;
 19687  0047E0  8881               	bsf	3969,4,c	;volatile
 19688  0047E2  0012               	return		;funcret
 19689  0047E4                     __end_of_enc424j600_setGPDATAWritePointer:
 19690                           	opt stack 0
 19691                           tblptru	equ	0xFF8
 19692                           tblptrh	equ	0xFF7
 19693                           tblptrl	equ	0xFF6
 19694                           tablat	equ	0xFF5
 19695                           prodh	equ	0xFF4
 19696                           prodl	equ	0xFF3
 19697                           intcon	equ	0xFF2
 19698                           intcon3	equ	0xFF0
 19699                           indf0	equ	0xFEF
 19700                           postinc0	equ	0xFEE
 19701                           plusw0	equ	0xFEB
 19702                           fsr0h	equ	0xFEA
 19703                           fsr0l	equ	0xFE9
 19704                           wreg	equ	0xFE8
 19705                           indf1	equ	0xFE7
 19706                           postinc1	equ	0xFE6
 19707                           postdec1	equ	0xFE5
 19708                           plusw1	equ	0xFE3
 19709                           fsr1h	equ	0xFE2
 19710                           fsr1l	equ	0xFE1
 19711                           indf2	equ	0xFDF
 19712                           postinc2	equ	0xFDE
 19713                           postdec2	equ	0xFDD
 19714                           plusw2	equ	0xFDB
 19715                           fsr2h	equ	0xFDA
 19716                           fsr2l	equ	0xFD9
 19717                           status	equ	0xFD8
 19718                           
 19719 ;; *************** function _ethernetController_sendPacket *****************
 19720 ;; Defined at:
 19721 ;;		line 201 in file "src/enc424j600/ENC424J600.c"
 19722 ;; Parameters:    Size  Location     Type
 19723 ;;  field           9   18[BANK0 ] struct memoryField
 19724 ;; Auto vars:     Size  Location     Type
 19725 ;;		None
 19726 ;; Return value:  Size  Location     Type
 19727 ;;                  1    wreg      void 
 19728 ;; Registers used:
 19729 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19730 ;; Tracked objects:
 19731 ;;		On entry : 0/0
 19732 ;;		On exit  : 0/0
 19733 ;;		Unchanged: 0/0
 19734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19735 ;;      Params:         0       9       0       0       0       0       0       0       0
 19736 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19737 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19738 ;;      Totals:         0       9       0       0       0       0       0       0       0
 19739 ;;Total ram usage:        9 bytes
 19740 ;; Hardware stack levels used:    1
 19741 ;; Hardware stack levels required when called:    8
 19742 ;; This function calls:
 19743 ;;		_enc424j600_setTXLength
 19744 ;;		_enc424j600_setTXStartAddress
 19745 ;;		_enc424j600_writeSingleByte
 19746 ;;		_memory_txFrameClear
 19747 ;; This function is called by:
 19748 ;;		_arp_send
 19749 ;; This function uses a non-reentrant model
 19750 ;;
 19751                           
 19752                           	psect	text81
 19753  004A8C                     __ptext81:
 19754                           	opt stack 0
 19755  004A8C                     _ethernetController_sendPacket:
 19756                           	opt stack 17
 19757                           
 19758                           ;ENC424J600.c: 202: enc424j600_setTXStartAddress(field.start);
 19759                           
 19760                           ;incstack = 0
 19761  004A8C  C072  F06E         	movff	ethernetController_sendPacket@field,enc424j600_setTXStartAddress@addr
 19762  004A90  C073  F06F         	movff	ethernetController_sendPacket@field+1,enc424j600_setTXStartAddress@addr+1
 19763  004A94  ECDE  F024         	call	_enc424j600_setTXStartAddress	;wreg free
 19764                           
 19765                           ;ENC424J600.c: 203: enc424j600_setTXLength(field.length);
 19766  004A98  C076  F06E         	movff	ethernetController_sendPacket@field+4,enc424j600_setTXLength@len
 19767  004A9C  C077  F06F         	movff	ethernetController_sendPacket@field+5,enc424j600_setTXLength@len+1
 19768  004AA0  ECF3  F024         	call	_enc424j600_setTXLength	;wreg free
 19769                           
 19770                           ;ENC424J600.c: 204: enc424j600_writeSingleByte(0b11010100);
 19771  004AA4  0ED4               	movlw	212
 19772  004AA6  EC11  F026         	call	_enc424j600_writeSingleByte
 19773                           
 19774                           ;ENC424J600.c: 205: memory_txFrameClear(field.index);
 19775  004AAA  0100               	movlb	0	; () banked
 19776  004AAC  517A               	movf	(ethernetController_sendPacket@field+8)& (0+255),w,b
 19777  004AAE  EC94  F025         	call	_memory_txFrameClear
 19778  004AB2  0012               	return		;funcret
 19779  004AB4                     __end_of_ethernetController_sendPacket:
 19780                           	opt stack 0
 19781                           tblptru	equ	0xFF8
 19782                           tblptrh	equ	0xFF7
 19783                           tblptrl	equ	0xFF6
 19784                           tablat	equ	0xFF5
 19785                           prodh	equ	0xFF4
 19786                           prodl	equ	0xFF3
 19787                           intcon	equ	0xFF2
 19788                           intcon3	equ	0xFF0
 19789                           indf0	equ	0xFEF
 19790                           postinc0	equ	0xFEE
 19791                           plusw0	equ	0xFEB
 19792                           fsr0h	equ	0xFEA
 19793                           fsr0l	equ	0xFE9
 19794                           wreg	equ	0xFE8
 19795                           indf1	equ	0xFE7
 19796                           postinc1	equ	0xFE6
 19797                           postdec1	equ	0xFE5
 19798                           plusw1	equ	0xFE3
 19799                           fsr1h	equ	0xFE2
 19800                           fsr1l	equ	0xFE1
 19801                           indf2	equ	0xFDF
 19802                           postinc2	equ	0xFDE
 19803                           postdec2	equ	0xFDD
 19804                           plusw2	equ	0xFDB
 19805                           fsr2h	equ	0xFDA
 19806                           fsr2l	equ	0xFD9
 19807                           status	equ	0xFD8
 19808                           
 19809 ;; *************** function _memory_txFrameClear *****************
 19810 ;; Defined at:
 19811 ;;		line 221 in file "src/mem/memoryController.c"
 19812 ;; Parameters:    Size  Location     Type
 19813 ;;  index           1    wreg     unsigned char 
 19814 ;; Auto vars:     Size  Location     Type
 19815 ;;  index           1    0[BANK0 ] unsigned char 
 19816 ;; Return value:  Size  Location     Type
 19817 ;;                  1    wreg      void 
 19818 ;; Registers used:
 19819 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 19820 ;; Tracked objects:
 19821 ;;		On entry : 0/0
 19822 ;;		On exit  : 0/0
 19823 ;;		Unchanged: 0/0
 19824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19825 ;;      Params:         0       0       0       0       0       0       0       0       0
 19826 ;;      Locals:         0       1       0       0       0       0       0       0       0
 19827 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19828 ;;      Totals:         0       1       0       0       0       0       0       0       0
 19829 ;;Total ram usage:        1 bytes
 19830 ;; Hardware stack levels used:    1
 19831 ;; Hardware stack levels required when called:    4
 19832 ;; This function calls:
 19833 ;;		Nothing
 19834 ;; This function is called by:
 19835 ;;		_ethernetController_sendPacket
 19836 ;; This function uses a non-reentrant model
 19837 ;;
 19838                           
 19839                           	psect	text82
 19840  004B28                     __ptext82:
 19841                           	opt stack 0
 19842  004B28                     _memory_txFrameClear:
 19843                           	opt stack 20
 19844                           
 19845                           ;incstack = 0
 19846                           ;memory_txFrameClear@index stored from wreg
 19847  004B28  0100               	movlb	0	; () banked
 19848  004B2A  6F60               	movwf	memory_txFrameClear@index& (0+255),b
 19849                           
 19850                           ;memoryController.c: 222: occupiedMemory[index].fIsAssigned = 0;
 19851  004B2C  0100               	movlb	0	; () banked
 19852  004B2E  5160               	movf	memory_txFrameClear@index& (0+255),w,b
 19853  004B30  0D09               	mullw	9
 19854  004B32  0E06               	movlw	6
 19855  004B34  26F3               	addwf	prodl,f,c
 19856  004B36  0E00               	movlw	0
 19857  004B38  22F4               	addwfc	prodh,f,c
 19858  004B3A  0E8B               	movlw	low _occupiedMemory
 19859  004B3C  24F3               	addwf	prodl,w,c
 19860  004B3E  6ED9               	movwf	fsr2l,c
 19861  004B40  0E01               	movlw	high _occupiedMemory
 19862  004B42  20F4               	addwfc	prodh,w,c
 19863  004B44  6EDA               	movwf	fsr2h,c
 19864  004B46  0E00               	movlw	0
 19865  004B48  6EDF               	movwf	indf2,c
 19866                           
 19867                           ; BSR set to: 0
 19868  004B4A  0012               	return		;funcret
 19869  004B4C                     __end_of_memory_txFrameClear:
 19870                           	opt stack 0
 19871                           tblptru	equ	0xFF8
 19872                           tblptrh	equ	0xFF7
 19873                           tblptrl	equ	0xFF6
 19874                           tablat	equ	0xFF5
 19875                           prodh	equ	0xFF4
 19876                           prodl	equ	0xFF3
 19877                           intcon	equ	0xFF2
 19878                           intcon3	equ	0xFF0
 19879                           indf0	equ	0xFEF
 19880                           postinc0	equ	0xFEE
 19881                           plusw0	equ	0xFEB
 19882                           fsr0h	equ	0xFEA
 19883                           fsr0l	equ	0xFE9
 19884                           wreg	equ	0xFE8
 19885                           indf1	equ	0xFE7
 19886                           postinc1	equ	0xFE6
 19887                           postdec1	equ	0xFE5
 19888                           plusw1	equ	0xFE3
 19889                           fsr1h	equ	0xFE2
 19890                           fsr1l	equ	0xFE1
 19891                           indf2	equ	0xFDF
 19892                           postinc2	equ	0xFDE
 19893                           postdec2	equ	0xFDD
 19894                           plusw2	equ	0xFDB
 19895                           fsr2h	equ	0xFDA
 19896                           fsr2l	equ	0xFD9
 19897                           status	equ	0xFD8
 19898                           
 19899 ;; *************** function _enc424j600_setTXStartAddress *****************
 19900 ;; Defined at:
 19901 ;;		line 602 in file "src/enc424j600/ENC424J600.c"
 19902 ;; Parameters:    Size  Location     Type
 19903 ;;  addr            2   14[BANK0 ] unsigned int 
 19904 ;; Auto vars:     Size  Location     Type
 19905 ;;  highByte        1   17[BANK0 ] unsigned char 
 19906 ;;  lowByte         1   16[BANK0 ] unsigned char 
 19907 ;; Return value:  Size  Location     Type
 19908 ;;                  1    wreg      void 
 19909 ;; Registers used:
 19910 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19911 ;; Tracked objects:
 19912 ;;		On entry : 0/0
 19913 ;;		On exit  : 0/0
 19914 ;;		Unchanged: 0/0
 19915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19916 ;;      Params:         0       2       0       0       0       0       0       0       0
 19917 ;;      Locals:         0       2       0       0       0       0       0       0       0
 19918 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19919 ;;      Totals:         0       4       0       0       0       0       0       0       0
 19920 ;;Total ram usage:        4 bytes
 19921 ;; Hardware stack levels used:    1
 19922 ;; Hardware stack levels required when called:    7
 19923 ;; This function calls:
 19924 ;;		_enc424j600_writeControlRegisterUnbanked
 19925 ;; This function is called by:
 19926 ;;		_ethernetController_sendPacket
 19927 ;; This function uses a non-reentrant model
 19928 ;;
 19929                           
 19930                           	psect	text83
 19931  0049BC                     __ptext83:
 19932                           	opt stack 0
 19933  0049BC                     _enc424j600_setTXStartAddress:
 19934                           	opt stack 17
 19935                           
 19936                           ;ENC424J600.c: 603: uint8_t lowByte = addr & 0xff;
 19937                           
 19938                           ; BSR set to: 0
 19939                           ;incstack = 0
 19940  0049BC  C06E  F070         	movff	enc424j600_setTXStartAddress@addr,enc424j600_setTXStartAddress@lowByte
 19941                           
 19942                           ;ENC424J600.c: 604: uint8_t highByte = (addr & 0xff00) >> 8;
 19943  0049C0  0100               	movlb	0	; () banked
 19944  0049C2  516F               	movf	(enc424j600_setTXStartAddress@addr+1)& (0+255),w,b
 19945  0049C4  6F71               	movwf	enc424j600_setTXStartAddress@highByte& (0+255),b
 19946                           
 19947                           ; BSR set to: 0
 19948                           ;ENC424J600.c: 605: enc424j600_writeControlRegisterUnbanked(0x00 + 0x00, &lowByte);
 19949  0049C6  0E70               	movlw	low enc424j600_setTXStartAddress@lowByte
 19950  0049C8  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 19951  0049CA  0E00               	movlw	high enc424j600_setTXStartAddress@lowByte
 19952  0049CC  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 19953  0049CE  0E00               	movlw	0
 19954  0049D0  EC48  F024         	call	_enc424j600_writeControlRegisterUnbanked
 19955                           
 19956                           ;ENC424J600.c: 606: enc424j600_writeControlRegisterUnbanked(0x01 + 0x00, &highByte);
 19957  0049D4  0E71               	movlw	low enc424j600_setTXStartAddress@highByte
 19958  0049D6  0100               	movlb	0	; () banked
 19959  0049D8  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 19960  0049DA  0E00               	movlw	high enc424j600_setTXStartAddress@highByte
 19961  0049DC  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 19962  0049DE  0E01               	movlw	1
 19963  0049E0  EC48  F024         	call	_enc424j600_writeControlRegisterUnbanked
 19964  0049E4  0012               	return		;funcret
 19965  0049E6                     __end_of_enc424j600_setTXStartAddress:
 19966                           	opt stack 0
 19967                           tblptru	equ	0xFF8
 19968                           tblptrh	equ	0xFF7
 19969                           tblptrl	equ	0xFF6
 19970                           tablat	equ	0xFF5
 19971                           prodh	equ	0xFF4
 19972                           prodl	equ	0xFF3
 19973                           intcon	equ	0xFF2
 19974                           intcon3	equ	0xFF0
 19975                           indf0	equ	0xFEF
 19976                           postinc0	equ	0xFEE
 19977                           plusw0	equ	0xFEB
 19978                           fsr0h	equ	0xFEA
 19979                           fsr0l	equ	0xFE9
 19980                           wreg	equ	0xFE8
 19981                           indf1	equ	0xFE7
 19982                           postinc1	equ	0xFE6
 19983                           postdec1	equ	0xFE5
 19984                           plusw1	equ	0xFE3
 19985                           fsr1h	equ	0xFE2
 19986                           fsr1l	equ	0xFE1
 19987                           indf2	equ	0xFDF
 19988                           postinc2	equ	0xFDE
 19989                           postdec2	equ	0xFDD
 19990                           plusw2	equ	0xFDB
 19991                           fsr2h	equ	0xFDA
 19992                           fsr2l	equ	0xFD9
 19993                           status	equ	0xFD8
 19994                           
 19995 ;; *************** function _enc424j600_setTXLength *****************
 19996 ;; Defined at:
 19997 ;;		line 577 in file "src/enc424j600/ENC424J600.c"
 19998 ;; Parameters:    Size  Location     Type
 19999 ;;  len             2   14[BANK0 ] unsigned int 
 20000 ;; Auto vars:     Size  Location     Type
 20001 ;;  highByte        1   17[BANK0 ] unsigned char 
 20002 ;;  lowByte         1   16[BANK0 ] unsigned char 
 20003 ;; Return value:  Size  Location     Type
 20004 ;;                  1    wreg      void 
 20005 ;; Registers used:
 20006 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20007 ;; Tracked objects:
 20008 ;;		On entry : 0/0
 20009 ;;		On exit  : 0/0
 20010 ;;		Unchanged: 0/0
 20011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20012 ;;      Params:         0       2       0       0       0       0       0       0       0
 20013 ;;      Locals:         0       2       0       0       0       0       0       0       0
 20014 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20015 ;;      Totals:         0       4       0       0       0       0       0       0       0
 20016 ;;Total ram usage:        4 bytes
 20017 ;; Hardware stack levels used:    1
 20018 ;; Hardware stack levels required when called:    7
 20019 ;; This function calls:
 20020 ;;		_enc424j600_writeControlRegisterUnbanked
 20021 ;; This function is called by:
 20022 ;;		_ethernetController_sendPacket
 20023 ;; This function uses a non-reentrant model
 20024 ;;
 20025                           
 20026                           	psect	text84
 20027  0049E6                     __ptext84:
 20028                           	opt stack 0
 20029  0049E6                     _enc424j600_setTXLength:
 20030                           	opt stack 17
 20031                           
 20032                           ;ENC424J600.c: 578: uint8_t lowByte = len & 0x00ff;
 20033                           
 20034                           ;incstack = 0
 20035  0049E6  C06E  F070         	movff	enc424j600_setTXLength@len,enc424j600_setTXLength@lowByte
 20036                           
 20037                           ;ENC424J600.c: 579: uint8_t highByte = len >> 8;
 20038  0049EA  0100               	movlb	0	; () banked
 20039  0049EC  516F               	movf	(enc424j600_setTXLength@len+1)& (0+255),w,b
 20040  0049EE  6F71               	movwf	enc424j600_setTXLength@highByte& (0+255),b
 20041                           
 20042                           ; BSR set to: 0
 20043                           ;ENC424J600.c: 580: enc424j600_writeControlRegisterUnbanked(0x02 + 0x00, &lowByte);
 20044  0049F0  0E70               	movlw	low enc424j600_setTXLength@lowByte
 20045  0049F2  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 20046  0049F4  0E00               	movlw	high enc424j600_setTXLength@lowByte
 20047  0049F6  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 20048  0049F8  0E02               	movlw	2
 20049  0049FA  EC48  F024         	call	_enc424j600_writeControlRegisterUnbanked
 20050                           
 20051                           ;ENC424J600.c: 581: enc424j600_writeControlRegisterUnbanked(0x03 + 0x00, &highByte);
 20052  0049FE  0E71               	movlw	low enc424j600_setTXLength@highByte
 20053  004A00  0100               	movlb	0	; () banked
 20054  004A02  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 20055  004A04  0E00               	movlw	high enc424j600_setTXLength@highByte
 20056  004A06  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 20057  004A08  0E03               	movlw	3
 20058  004A0A  EC48  F024         	call	_enc424j600_writeControlRegisterUnbanked
 20059  004A0E  0012               	return		;funcret
 20060  004A10                     __end_of_enc424j600_setTXLength:
 20061                           	opt stack 0
 20062                           tblptru	equ	0xFF8
 20063                           tblptrh	equ	0xFF7
 20064                           tblptrl	equ	0xFF6
 20065                           tablat	equ	0xFF5
 20066                           prodh	equ	0xFF4
 20067                           prodl	equ	0xFF3
 20068                           intcon	equ	0xFF2
 20069                           intcon3	equ	0xFF0
 20070                           indf0	equ	0xFEF
 20071                           postinc0	equ	0xFEE
 20072                           plusw0	equ	0xFEB
 20073                           fsr0h	equ	0xFEA
 20074                           fsr0l	equ	0xFE9
 20075                           wreg	equ	0xFE8
 20076                           indf1	equ	0xFE7
 20077                           postinc1	equ	0xFE6
 20078                           postdec1	equ	0xFE5
 20079                           plusw1	equ	0xFE3
 20080                           fsr1h	equ	0xFE2
 20081                           fsr1l	equ	0xFE1
 20082                           indf2	equ	0xFDF
 20083                           postinc2	equ	0xFDE
 20084                           postdec2	equ	0xFDD
 20085                           plusw2	equ	0xFDB
 20086                           fsr2h	equ	0xFDA
 20087                           fsr2l	equ	0xFD9
 20088                           status	equ	0xFD8
 20089                           
 20090 ;; *************** function _ethernetController_getSourceMACAddress *****************
 20091 ;; Defined at:
 20092 ;;		line 268 in file "src/enc424j600/ENC424J600.c"
 20093 ;; Parameters:    Size  Location     Type
 20094 ;;  field           9   15[BANK0 ] struct memoryField
 20095 ;; Auto vars:     Size  Location     Type
 20096 ;;  temp            1   31[BANK0 ] unsigned char 
 20097 ;;  i               1   32[BANK0 ] unsigned char 
 20098 ;;  sourceAddres    6   25[BANK0 ] struct macaddress
 20099 ;;  opcode          1   24[BANK0 ] unsigned char 
 20100 ;; Return value:  Size  Location     Type
 20101 ;;                  6   15[BANK0 ] struct macaddress
 20102 ;; Registers used:
 20103 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20104 ;; Tracked objects:
 20105 ;;		On entry : 0/0
 20106 ;;		On exit  : 0/0
 20107 ;;		Unchanged: 0/0
 20108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20109 ;;      Params:         0       9       0       0       0       0       0       0       0
 20110 ;;      Locals:         0       9       0       0       0       0       0       0       0
 20111 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20112 ;;      Totals:         0      18       0       0       0       0       0       0       0
 20113 ;;Total ram usage:       18 bytes
 20114 ;; Hardware stack levels used:    1
 20115 ;; Hardware stack levels required when called:    7
 20116 ;; This function calls:
 20117 ;;		_enc424j600_readSPI
 20118 ;;		_enc424j600_setERXDATAReadPointer
 20119 ;;		_enc424j600_writeSPI
 20120 ;; This function is called by:
 20121 ;;		_arp_send
 20122 ;; This function uses a non-reentrant model
 20123 ;;
 20124                           
 20125                           	psect	text85
 20126  004078                     __ptext85:
 20127                           	opt stack 0
 20128  004078                     _ethernetController_getSourceMACAddress:
 20129                           	opt stack 18
 20130                           
 20131                           ;ENC424J600.c: 269: macaddress_t sourceAddress;
 20132                           ;ENC424J600.c: 270: enc424j600_setERXDATAReadPointer(field.start + 14);
 20133                           
 20134                           ;incstack = 0
 20135  004078  0E0E               	movlw	14
 20136  00407A  0100               	movlb	0	; () banked
 20137  00407C  256F               	addwf	ethernetController_getSourceMACAddress@field& (0+255),w,b
 20138  00407E  6F6A               	movwf	enc424j600_setERXDATAReadPointer@addr& (0+255),b
 20139  004080  0E00               	movlw	0
 20140  004082  2170               	addwfc	(ethernetController_getSourceMACAddress@field+1)& (0+255),w,b
 20141  004084  6F6B               	movwf	(enc424j600_setERXDATAReadPointer@addr+1)& (0+255),b
 20142  004086  ECF2  F023         	call	_enc424j600_setERXDATAReadPointer	;wreg free
 20143                           
 20144                           ;ENC424J600.c: 271: uint8_t opcode = 0x2C;
 20145  00408A  0E2C               	movlw	44
 20146  00408C  0100               	movlb	0	; () banked
 20147  00408E  6F78               	movwf	ethernetController_getSourceMACAddress@opcode& (0+255),b
 20148                           
 20149                           ; BSR set to: 0
 20150                           ;ENC424J600.c: 272: PORTBbits.RB4=0;
 20151  004090  9881               	bcf	3969,4,c	;volatile
 20152                           
 20153                           ; BSR set to: 0
 20154                           ;ENC424J600.c: 273: enc424j600_writeSPI(&opcode);
 20155  004092  0E78               	movlw	low ethernetController_getSourceMACAddress@opcode
 20156  004094  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 20157  004096  0E00               	movlw	high ethernetController_getSourceMACAddress@opcode
 20158  004098  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 20159  00409A  EC10  F021         	call	_enc424j600_writeSPI	;wreg free
 20160                           
 20161                           ;ENC424J600.c: 274: for (uint8_t i = 0; i < 6; i++) {
 20162  00409E  0E00               	movlw	0
 20163  0040A0  0100               	movlb	0	; () banked
 20164  0040A2  6F80               	movwf	ethernetController_getSourceMACAddress@i& (0+255),b
 20165  0040A4                     l8079:
 20166                           
 20167                           ; BSR set to: 0
 20168  0040A4  0E05               	movlw	5
 20169  0040A6  6580               	cpfsgt	ethernetController_getSourceMACAddress@i& (0+255),b
 20170  0040A8  D001               	goto	l155
 20171  0040AA  D013               	goto	u8930
 20172  0040AC                     l155:
 20173                           
 20174                           ; BSR set to: 0
 20175                           ;ENC424J600.c: 275: uint8_t temp;
 20176                           ;ENC424J600.c: 276: enc424j600_readSPI(&temp);
 20177                           
 20178                           ; BSR set to: 0
 20179  0040AC  0E7F               	movlw	low ethernetController_getSourceMACAddress@temp
 20180  0040AE  6F60               	movwf	enc424j600_readSPI@data& (0+255),b
 20181  0040B0  0E00               	movlw	high ethernetController_getSourceMACAddress@temp
 20182  0040B2  6F61               	movwf	(enc424j600_readSPI@data+1)& (0+255),b
 20183  0040B4  EC74  F020         	call	_enc424j600_readSPI	;wreg free
 20184                           
 20185                           ;ENC424J600.c: 277: sourceAddress.address[i] = temp;
 20186  0040B8  0100               	movlb	0	; () banked
 20187  0040BA  5180               	movf	ethernetController_getSourceMACAddress@i& (0+255),w,b
 20188  0040BC  0D01               	mullw	1
 20189  0040BE  0E79               	movlw	low ethernetController_getSourceMACAddress@sourceAddress
 20190  0040C0  24F3               	addwf	prodl,w,c
 20191  0040C2  6ED9               	movwf	fsr2l,c
 20192  0040C4  0E00               	movlw	high ethernetController_getSourceMACAddress@sourceAddress
 20193  0040C6  20F4               	addwfc	prodh,w,c
 20194  0040C8  6EDA               	movwf	fsr2h,c
 20195  0040CA  C07F  FFDF         	movff	ethernetController_getSourceMACAddress@temp,indf2
 20196                           
 20197                           ; BSR set to: 0
 20198  0040CE  2B80               	incf	ethernetController_getSourceMACAddress@i& (0+255),f,b
 20199  0040D0  D7E9               	goto	l8079
 20200  0040D2                     u8930:
 20201                           
 20202                           ; BSR set to: 0
 20203                           ;ENC424J600.c: 278: }
 20204                           ;ENC424J600.c: 279: PORTBbits.RB4=1;
 20205  0040D2  8881               	bsf	3969,4,c	;volatile
 20206                           
 20207                           ; BSR set to: 0
 20208                           ;ENC424J600.c: 280: return sourceAddress;
 20209  0040D4  EE20  F079         	lfsr	2,ethernetController_getSourceMACAddress@sourceAddress
 20210  0040D8  EE00  F06F         	lfsr	0,?_ethernetController_getSourceMACAddress
 20211  0040DC  0E05               	movlw	5
 20212  0040DE                     u8941:
 20213  0040DE  CFDB FFEB          	movff	plusw2,plusw0
 20214  0040E2  06E8               	decf	wreg,f,c
 20215  0040E4  E2FC               	bc	u8941
 20216  0040E6  0012               	return	
 20217  0040E8                     __end_of_ethernetController_getSourceMACAddress:
 20218                           	opt stack 0
 20219                           tblptru	equ	0xFF8
 20220                           tblptrh	equ	0xFF7
 20221                           tblptrl	equ	0xFF6
 20222                           tablat	equ	0xFF5
 20223                           prodh	equ	0xFF4
 20224                           prodl	equ	0xFF3
 20225                           intcon	equ	0xFF2
 20226                           intcon3	equ	0xFF0
 20227                           indf0	equ	0xFEF
 20228                           postinc0	equ	0xFEE
 20229                           plusw0	equ	0xFEB
 20230                           fsr0h	equ	0xFEA
 20231                           fsr0l	equ	0xFE9
 20232                           wreg	equ	0xFE8
 20233                           indf1	equ	0xFE7
 20234                           postinc1	equ	0xFE6
 20235                           postdec1	equ	0xFE5
 20236                           plusw1	equ	0xFE3
 20237                           fsr1h	equ	0xFE2
 20238                           fsr1l	equ	0xFE1
 20239                           indf2	equ	0xFDF
 20240                           postinc2	equ	0xFDE
 20241                           postdec2	equ	0xFDD
 20242                           plusw2	equ	0xFDB
 20243                           fsr2h	equ	0xFDA
 20244                           fsr2l	equ	0xFD9
 20245                           status	equ	0xFD8
 20246                           
 20247 ;; *************** function _enc424j600_setERXDATAReadPointer *****************
 20248 ;; Defined at:
 20249 ;;		line 631 in file "src/enc424j600/ENC424J600.c"
 20250 ;; Parameters:    Size  Location     Type
 20251 ;;  addr            2   10[BANK0 ] unsigned int 
 20252 ;; Auto vars:     Size  Location     Type
 20253 ;;  highByte        1   14[BANK0 ] unsigned char 
 20254 ;;  lowByte         1   13[BANK0 ] unsigned char 
 20255 ;;  opcode          1   12[BANK0 ] unsigned char 
 20256 ;; Return value:  Size  Location     Type
 20257 ;;                  1    wreg      void 
 20258 ;; Registers used:
 20259 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20260 ;; Tracked objects:
 20261 ;;		On entry : 0/0
 20262 ;;		On exit  : 0/0
 20263 ;;		Unchanged: 0/0
 20264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20265 ;;      Params:         0       2       0       0       0       0       0       0       0
 20266 ;;      Locals:         0       3       0       0       0       0       0       0       0
 20267 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20268 ;;      Totals:         0       5       0       0       0       0       0       0       0
 20269 ;;Total ram usage:        5 bytes
 20270 ;; Hardware stack levels used:    1
 20271 ;; Hardware stack levels required when called:    6
 20272 ;; This function calls:
 20273 ;;		_enc424j600_writeSPI
 20274 ;; This function is called by:
 20275 ;;		_ethernetController_getSourceMACAddress
 20276 ;;		_ethernetController_getEtherTypeField
 20277 ;;		_ethernetController_getRSV
 20278 ;;		_ethernetController_updateNextPacketPointer
 20279 ;;		_ethernetController_streamFromRXBuffer
 20280 ;;		_ethernetController_getDestinationMACAddress
 20281 ;; This function uses a non-reentrant model
 20282 ;;
 20283                           
 20284                           	psect	text86
 20285  0047E4                     __ptext86:
 20286                           	opt stack 0
 20287  0047E4                     _enc424j600_setERXDATAReadPointer:
 20288                           	opt stack 19
 20289                           
 20290                           ;ENC424J600.c: 632: uint8_t opcode = 0x64;
 20291                           
 20292                           ; BSR set to: 0
 20293                           ;incstack = 0
 20294  0047E4  0E64               	movlw	100
 20295  0047E6  0100               	movlb	0	; () banked
 20296  0047E8  6F6C               	movwf	enc424j600_setERXDATAReadPointer@opcode& (0+255),b
 20297                           
 20298                           ; BSR set to: 0
 20299                           ;ENC424J600.c: 633: uint8_t lowByte = addr & 0x00ff;
 20300  0047EA  C06A  F06D         	movff	enc424j600_setERXDATAReadPointer@addr,enc424j600_setERXDATAReadPointer@lowByte
 20301                           
 20302                           ;ENC424J600.c: 634: uint8_t highByte = (addr >> 8) & 0xff;
 20303  0047EE  516B               	movf	(enc424j600_setERXDATAReadPointer@addr+1)& (0+255),w,b
 20304  0047F0  6F6E               	movwf	enc424j600_setERXDATAReadPointer@highByte& (0+255),b
 20305                           
 20306                           ; BSR set to: 0
 20307                           ;ENC424J600.c: 635: PORTBbits.RB4=0;
 20308  0047F2  9881               	bcf	3969,4,c	;volatile
 20309                           
 20310                           ; BSR set to: 0
 20311                           ;ENC424J600.c: 636: enc424j600_writeSPI(&opcode);
 20312  0047F4  0E6C               	movlw	low enc424j600_setERXDATAReadPointer@opcode
 20313  0047F6  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 20314  0047F8  0E00               	movlw	high enc424j600_setERXDATAReadPointer@opcode
 20315  0047FA  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 20316  0047FC  EC10  F021         	call	_enc424j600_writeSPI	;wreg free
 20317                           
 20318                           ;ENC424J600.c: 637: enc424j600_writeSPI(&lowByte);
 20319  004800  0E6D               	movlw	low enc424j600_setERXDATAReadPointer@lowByte
 20320  004802  0100               	movlb	0	; () banked
 20321  004804  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 20322  004806  0E00               	movlw	high enc424j600_setERXDATAReadPointer@lowByte
 20323  004808  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 20324  00480A  EC10  F021         	call	_enc424j600_writeSPI	;wreg free
 20325                           
 20326                           ;ENC424J600.c: 638: enc424j600_writeSPI(&highByte);
 20327  00480E  0E6E               	movlw	low enc424j600_setERXDATAReadPointer@highByte
 20328  004810  0100               	movlb	0	; () banked
 20329  004812  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 20330  004814  0E00               	movlw	high enc424j600_setERXDATAReadPointer@highByte
 20331  004816  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 20332  004818  EC10  F021         	call	_enc424j600_writeSPI	;wreg free
 20333                           
 20334                           ;ENC424J600.c: 639: PORTBbits.RB4=1;
 20335  00481C  8881               	bsf	3969,4,c	;volatile
 20336  00481E  0012               	return		;funcret
 20337  004820                     __end_of_enc424j600_setERXDATAReadPointer:
 20338                           	opt stack 0
 20339                           tblptru	equ	0xFF8
 20340                           tblptrh	equ	0xFF7
 20341                           tblptrl	equ	0xFF6
 20342                           tablat	equ	0xFF5
 20343                           prodh	equ	0xFF4
 20344                           prodl	equ	0xFF3
 20345                           intcon	equ	0xFF2
 20346                           intcon3	equ	0xFF0
 20347                           indf0	equ	0xFEF
 20348                           postinc0	equ	0xFEE
 20349                           plusw0	equ	0xFEB
 20350                           fsr0h	equ	0xFEA
 20351                           fsr0l	equ	0xFE9
 20352                           wreg	equ	0xFE8
 20353                           indf1	equ	0xFE7
 20354                           postinc1	equ	0xFE6
 20355                           postdec1	equ	0xFE5
 20356                           plusw1	equ	0xFE3
 20357                           fsr1h	equ	0xFE2
 20358                           fsr1l	equ	0xFE1
 20359                           indf2	equ	0xFDF
 20360                           postinc2	equ	0xFDE
 20361                           postdec2	equ	0xFDD
 20362                           plusw2	equ	0xFDB
 20363                           fsr2h	equ	0xFDA
 20364                           fsr2l	equ	0xFD9
 20365                           status	equ	0xFD8
 20366                           
 20367 ;; *************** function _UARTTransmitText *****************
 20368 ;; Defined at:
 20369 ;;		line 36 in file "src/system/uart.c"
 20370 ;; Parameters:    Size  Location     Type
 20371 ;;  str             2   56[BANK0 ] PTR const unsigned char 
 20372 ;;		 -> STR_96(39), STR_95(59), STR_94(5), STR_93(38), 
 20373 ;;		 -> STR_92(23), STR_91(30), STR_90(45), STR_89(64), 
 20374 ;;		 -> STR_88(35), STR_87(5), STR_86(42), STR_85(19), 
 20375 ;;		 -> STR_84(2), STR_83(3), STR_82(3), STR_81(3), 
 20376 ;;		 -> STR_80(3), STR_79(5), STR_78(2), STR_77(2), 
 20377 ;;		 -> STR_76(7), STR_75(11), STR_74(3), STR_73(31), 
 20378 ;;		 -> STR_72(33), STR_71(24), STR_70(36), STR_69(2), 
 20379 ;;		 -> STR_68(3), STR_67(16), STR_66(15), STR_65(10), 
 20380 ;;		 -> STR_64(2), STR_63(3), STR_62(5), STR_61(3), 
 20381 ;;		 -> STR_60(2), STR_59(39), arpEntryToString@string(50), ipAdressToString@address(16), 
 20382 ;;		 -> STR_58(17), STR_57(4), STR_56(4), STR_55(5), 
 20383 ;;		 -> STR_54(18), STR_53(4), STR_52(5), macToString@address(18), 
 20384 ;;		 -> hexToString@number(10), intToString@number(10), STR_51(5), STR_50(9), 
 20385 ;;		 -> STR_49(30), STR_48(34), STR_47(55), STR_46(37), 
 20386 ;;		 -> STR_45(15), STR_44(14), STR_43(19), STR_42(30), 
 20387 ;;		 -> STR_41(17), STR_40(8), STR_39(29), STR_38(29), 
 20388 ;;		 -> STR_37(20), STR_36(19), STR_35(19), STR_34(13), 
 20389 ;;		 -> STR_33(51), STR_32(4), STR_31(23), STR_30(12), 
 20390 ;;		 -> STR_29(4), STR_28(9), STR_27(2), STR_26(12), 
 20391 ;;		 -> STR_25(24), STR_24(51), STR_23(49), STR_22(51), 
 20392 ;;		 -> STR_21(2), STR_20(3), STR_19(3), STR_18(3), 
 20393 ;;		 -> STR_17(5), STR_16(2), STR_15(3), STR_14(5), 
 20394 ;;		 -> STR_13(3), STR_12(3), STR_11(2), STR_10(20), 
 20395 ;;		 -> STR_9(7), STR_8(6), STR_7(2), STR_6(2), 
 20396 ;;		 -> STR_5(16), STR_4(10), STR_3(12), STR_2(2), 
 20397 ;;		 -> STR_1(2), ethernetController_getDeviceName@string(11), 
 20398 ;; Auto vars:     Size  Location     Type
 20399 ;;		None
 20400 ;; Return value:  Size  Location     Type
 20401 ;;                  1    wreg      void 
 20402 ;; Registers used:
 20403 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 20404 ;; Tracked objects:
 20405 ;;		On entry : 0/0
 20406 ;;		On exit  : 0/0
 20407 ;;		Unchanged: 0/0
 20408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20409 ;;      Params:         0       2       0       0       0       0       0       0       0
 20410 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20411 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20412 ;;      Totals:         0       2       0       0       0       0       0       0       0
 20413 ;;Total ram usage:        2 bytes
 20414 ;; Hardware stack levels used:    1
 20415 ;; Hardware stack levels required when called:    4
 20416 ;; This function calls:
 20417 ;;		Nothing
 20418 ;; This function is called by:
 20419 ;;		_ethernet_rxGetNewFrame
 20420 ;;		_main
 20421 ;;		_printEthernetState
 20422 ;;		_printErrorMessage
 20423 ;;		_UARTTransmitInt
 20424 ;;		_arp_handleNewPacket
 20425 ;;		_arp_sendReply
 20426 ;;		_arp_background
 20427 ;;		_ipv4_checkHeaderChecksum
 20428 ;;		_ipv4_handleNewPacket
 20429 ;;		_ipv4_setIPSourceAddress
 20430 ;;		_ipv4_background
 20431 ;;		_printArpTable
 20432 ;; This function uses a non-reentrant model
 20433 ;;
 20434                           
 20435                           	psect	text87
 20436  004390                     __ptext87:
 20437                           	opt stack 0
 20438  004390                     _UARTTransmitText:
 20439                           	opt stack 25
 20440                           
 20441                           ;uart.c: 37: while (*str) {
 20442                           
 20443                           ;incstack = 0
 20444  004390  D016               	goto	u9160
 20445  004392                     
 20446                           ;uart.c: 38: TXREG1 = *str++;
 20447  004392  C098  FFF6         	movff	UARTTransmitText@str,tblptrl
 20448  004396  C099  FFF7         	movff	UARTTransmitText@str+1,tblptrh
 20449  00439A  6AF8               	clrf	tblptru,c
 20450  00439C  0E07               	movlw	(high __ramtop+-1)
 20451  00439E  64F7               	cpfsgt	tblptrh,c
 20452  0043A0  D003               	bra	u9157
 20453  0043A2  0008               	tblrd		*
 20454  0043A4  50F5               	movf	tablat,w,c
 20455  0043A6  D005               	bra	u9150
 20456  0043A8                     u9157:
 20457  0043A8  CFF6 FFE9          	movff	tblptrl,fsr0l
 20458  0043AC  CFF7 FFEA          	movff	tblptrh,fsr0h
 20459  0043B0  50EF               	movf	indf0,w,c
 20460  0043B2                     u9150:
 20461  0043B2  6EAD               	movwf	4013,c	;volatile
 20462  0043B4  0100               	movlb	0	; () banked
 20463  0043B6  4B98               	infsnz	UARTTransmitText@str& (0+255),f,b
 20464  0043B8  2B99               	incf	(UARTTransmitText@str+1)& (0+255),f,b
 20465  0043BA                     
 20466                           ; BSR set to: 0
 20467  0043BA  A2AC               	btfss	4012,1,c	;volatile
 20468  0043BC  D7FE               	goto	l763
 20469  0043BE                     u9160:
 20470  0043BE  C098  FFF6         	movff	UARTTransmitText@str,tblptrl
 20471  0043C2  C099  FFF7         	movff	UARTTransmitText@str+1,tblptrh
 20472  0043C6  6AF8               	clrf	tblptru,c
 20473  0043C8  0E07               	movlw	(high __ramtop+-1)
 20474  0043CA  64F7               	cpfsgt	tblptrh,c
 20475  0043CC  D003               	bra	u9177
 20476  0043CE  0008               	tblrd		*
 20477  0043D0  50F5               	movf	tablat,w,c
 20478  0043D2  D005               	bra	u9170
 20479  0043D4                     u9177:
 20480  0043D4  CFF6 FFE9          	movff	tblptrl,fsr0l
 20481  0043D8  CFF7 FFEA          	movff	tblptrh,fsr0h
 20482  0043DC  50EF               	movf	indf0,w,c
 20483  0043DE                     u9170:
 20484  0043DE  0900               	iorlw	0
 20485  0043E0  B4D8               	btfsc	status,2,c
 20486  0043E2  0012               	return	
 20487  0043E4  D7D6               	goto	l761
 20488  0043E6                     __end_of_UARTTransmitText:
 20489                           	opt stack 0
 20490                           tblptru	equ	0xFF8
 20491                           tblptrh	equ	0xFF7
 20492                           tblptrl	equ	0xFF6
 20493                           tablat	equ	0xFF5
 20494                           prodh	equ	0xFF4
 20495                           prodl	equ	0xFF3
 20496                           intcon	equ	0xFF2
 20497                           intcon3	equ	0xFF0
 20498                           indf0	equ	0xFEF
 20499                           postinc0	equ	0xFEE
 20500                           plusw0	equ	0xFEB
 20501                           fsr0h	equ	0xFEA
 20502                           fsr0l	equ	0xFE9
 20503                           wreg	equ	0xFE8
 20504                           indf1	equ	0xFE7
 20505                           postinc1	equ	0xFE6
 20506                           postdec1	equ	0xFE5
 20507                           plusw1	equ	0xFE3
 20508                           fsr1h	equ	0xFE2
 20509                           fsr1l	equ	0xFE1
 20510                           indf2	equ	0xFDF
 20511                           postinc2	equ	0xFDE
 20512                           postdec2	equ	0xFDD
 20513                           plusw2	equ	0xFDB
 20514                           fsr2h	equ	0xFDA
 20515                           fsr2l	equ	0xFD9
 20516                           status	equ	0xFD8
 20517                           
 20518 ;; *************** function _ethernetController_init *****************
 20519 ;; Defined at:
 20520 ;;		line 34 in file "src/enc424j600/ENC424J600.c"
 20521 ;; Parameters:    Size  Location     Type
 20522 ;;		None
 20523 ;; Auto vars:     Size  Location     Type
 20524 ;;  err             3   29[BANK0 ] struct error
 20525 ;; Return value:  Size  Location     Type
 20526 ;;                  3   26[BANK0 ] struct error
 20527 ;; Registers used:
 20528 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20529 ;; Tracked objects:
 20530 ;;		On entry : 0/0
 20531 ;;		On exit  : 0/0
 20532 ;;		Unchanged: 0/0
 20533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20534 ;;      Params:         0       3       0       0       0       0       0       0       0
 20535 ;;      Locals:         0       3       0       0       0       0       0       0       0
 20536 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20537 ;;      Totals:         0       6       0       0       0       0       0       0       0
 20538 ;;Total ram usage:        6 bytes
 20539 ;; Hardware stack levels used:    1
 20540 ;; Hardware stack levels required when called:    8
 20541 ;; This function calls:
 20542 ;;		_enc424j600_enableAutoMACInsertion
 20543 ;;		_enc424j600_enableReception
 20544 ;;		_enc424j600_initSPI
 20545 ;;		_enc424j600_setNextPacketPointer
 20546 ;;		_enc424j600_setRXBufferStartAddress
 20547 ;;		_enc424j600_setRXTailPointer
 20548 ;;		_ethernetController_checkDeviceId
 20549 ;;		_ethernetController_softReset
 20550 ;; This function is called by:
 20551 ;;		_main
 20552 ;; This function uses a non-reentrant model
 20553 ;;
 20554                           
 20555                           	psect	text88
 20556  003F96                     __ptext88:
 20557                           	opt stack 0
 20558  003F96                     _ethernetController_init:
 20559                           	opt stack 22
 20560                           
 20561                           ;ENC424J600.c: 35: error_t err;
 20562                           ;ENC424J600.c: 36: enc424j600_initSPI();
 20563                           
 20564                           ;incstack = 0
 20565  003F96  ECE9  F025         	call	_enc424j600_initSPI	;wreg free
 20566                           
 20567                           ;ENC424J600.c: 37: err = ethernetController_softReset();
 20568  003F9A  ECB1  F016         	call	_ethernetController_softReset	;wreg free
 20569  003F9E  C06E  F07D         	movff	?_ethernetController_softReset,ethernetController_init@err
 20570  003FA2  C06F  F07E         	movff	?_ethernetController_softReset+1,ethernetController_init@err+1
 20571  003FA6  C070  F07F         	movff	?_ethernetController_softReset+2,ethernetController_init@err+2
 20572                           
 20573                           ;ENC424J600.c: 40: }
 20574                           ;ENC424J600.c: 41: err = ethernetController_checkDeviceId();
 20575  003FAA  ECBF  F022         	call	_ethernetController_checkDeviceId	;wreg free
 20576  003FAE  C06E  F07D         	movff	?_ethernetController_checkDeviceId,ethernetController_init@err
 20577  003FB2  C06F  F07E         	movff	?_ethernetController_checkDeviceId+1,ethernetController_init@err+1
 20578  003FB6  C070  F07F         	movff	?_ethernetController_checkDeviceId+2,ethernetController_init@err+2
 20579                           
 20580                           ;ENC424J600.c: 44: }
 20581                           ;ENC424J600.c: 63: enc424j600_setRXBufferStartAddress(0x3000);
 20582  003FBA  0E30               	movlw	48
 20583  003FBC  0100               	movlb	0	; () banked
 20584  003FBE  6F6F               	movwf	(enc424j600_setRXBufferStartAddress@addr+1)& (0+255),b
 20585  003FC0  0E00               	movlw	0
 20586  003FC2  6F6E               	movwf	enc424j600_setRXBufferStartAddress@addr& (0+255),b
 20587  003FC4  EC1D  F025         	call	_enc424j600_setRXBufferStartAddress	;wreg free
 20588                           
 20589                           ;ENC424J600.c: 64: enc424j600_setNextPacketPointer(0x3000);
 20590  003FC8  0E30               	movlw	48
 20591  003FCA  0100               	movlb	0	; () banked
 20592  003FCC  6F61               	movwf	(enc424j600_setNextPacketPointer@ptr+1)& (0+255),b
 20593  003FCE  0E00               	movlw	0
 20594  003FD0  6F60               	movwf	enc424j600_setNextPacketPointer@ptr& (0+255),b
 20595  003FD2  EC79  F026         	call	_enc424j600_setNextPacketPointer	;wreg free
 20596                           
 20597                           ;ENC424J600.c: 65: enc424j600_setRXTailPointer(0x5FFE);
 20598  003FD6  0E5F               	movlw	95
 20599  003FD8  0100               	movlb	0	; () banked
 20600  003FDA  6F6F               	movwf	(enc424j600_setRXTailPointer@addr+1)& (0+255),b
 20601  003FDC  0EFE               	movlw	254
 20602  003FDE  6F6E               	movwf	enc424j600_setRXTailPointer@addr& (0+255),b
 20603  003FE0  EC08  F025         	call	_enc424j600_setRXTailPointer	;wreg free
 20604                           
 20605                           ;ENC424J600.c: 67: enc424j600_enableReception();
 20606  003FE4  EC7E  F026         	call	_enc424j600_enableReception	;wreg free
 20607                           
 20608                           ;ENC424J600.c: 68: enc424j600_enableAutoMACInsertion();
 20609  003FE8  EC5A  F025         	call	_enc424j600_enableAutoMACInsertion	;wreg free
 20610                           
 20611                           ;ENC424J600.c: 70: err.module = ERROR_MODULE_ETHERNET_CONTROLLER;
 20612  003FEC  0E01               	movlw	1
 20613  003FEE  0100               	movlb	0	; () banked
 20614  003FF0  6F7D               	movwf	ethernetController_init@err& (0+255),b
 20615                           
 20616                           ; BSR set to: 0
 20617                           ;ENC424J600.c: 71: err.code = (uint16_t)0;
 20618  003FF2  0E00               	movlw	0
 20619  003FF4  6F7F               	movwf	(ethernetController_init@err+2)& (0+255),b
 20620  003FF6  0E00               	movlw	0
 20621  003FF8  6F7E               	movwf	(ethernetController_init@err+1)& (0+255),b
 20622                           
 20623                           ; BSR set to: 0
 20624                           ;ENC424J600.c: 72: return err;
 20625  003FFA  C07D  F07A         	movff	ethernetController_init@err,?_ethernetController_init
 20626  003FFE  C07E  F07B         	movff	ethernetController_init@err+1,?_ethernetController_init+1
 20627  004002  C07F  F07C         	movff	ethernetController_init@err+2,?_ethernetController_init+2
 20628  004006  0012               	return	
 20629  004008                     __end_of_ethernetController_init:
 20630                           	opt stack 0
 20631                           tblptru	equ	0xFF8
 20632                           tblptrh	equ	0xFF7
 20633                           tblptrl	equ	0xFF6
 20634                           tablat	equ	0xFF5
 20635                           prodh	equ	0xFF4
 20636                           prodl	equ	0xFF3
 20637                           intcon	equ	0xFF2
 20638                           intcon3	equ	0xFF0
 20639                           indf0	equ	0xFEF
 20640                           postinc0	equ	0xFEE
 20641                           plusw0	equ	0xFEB
 20642                           fsr0h	equ	0xFEA
 20643                           fsr0l	equ	0xFE9
 20644                           wreg	equ	0xFE8
 20645                           indf1	equ	0xFE7
 20646                           postinc1	equ	0xFE6
 20647                           postdec1	equ	0xFE5
 20648                           plusw1	equ	0xFE3
 20649                           fsr1h	equ	0xFE2
 20650                           fsr1l	equ	0xFE1
 20651                           indf2	equ	0xFDF
 20652                           postinc2	equ	0xFDE
 20653                           postdec2	equ	0xFDD
 20654                           plusw2	equ	0xFDB
 20655                           fsr2h	equ	0xFDA
 20656                           fsr2l	equ	0xFD9
 20657                           status	equ	0xFD8
 20658                           
 20659 ;; *************** function _ethernetController_softReset *****************
 20660 ;; Defined at:
 20661 ;;		line 75 in file "src/enc424j600/ENC424J600.c"
 20662 ;; Parameters:    Size  Location     Type
 20663 ;;		None
 20664 ;; Auto vars:     Size  Location     Type
 20665 ;;  err             3   23[BANK0 ] struct error
 20666 ;;  receivedData    2   21[BANK0 ] unsigned char [2]
 20667 ;;  dataToSend      2   19[BANK0 ] unsigned char [2]
 20668 ;;  comFailCount    1   18[BANK0 ] unsigned char 
 20669 ;; Return value:  Size  Location     Type
 20670 ;;                  3   14[BANK0 ] struct error
 20671 ;; Registers used:
 20672 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20673 ;; Tracked objects:
 20674 ;;		On entry : 0/0
 20675 ;;		On exit  : 0/0
 20676 ;;		Unchanged: 0/0
 20677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20678 ;;      Params:         0       3       0       0       0       0       0       0       0
 20679 ;;      Locals:         0       8       0       0       0       0       0       0       0
 20680 ;;      Temps:          0       1       0       0       0       0       0       0       0
 20681 ;;      Totals:         0      12       0       0       0       0       0       0       0
 20682 ;;Total ram usage:       12 bytes
 20683 ;; Hardware stack levels used:    1
 20684 ;; Hardware stack levels required when called:    7
 20685 ;; This function calls:
 20686 ;;		_enc424j600_readControlRegisterUnbanked
 20687 ;;		_enc424j600_writeControlRegisterUnbanked
 20688 ;;		_enc424j600_writeSingleByte
 20689 ;; This function is called by:
 20690 ;;		_ethernetController_init
 20691 ;; This function uses a non-reentrant model
 20692 ;;
 20693                           
 20694                           	psect	text89
 20695  002D62                     __ptext89:
 20696                           	opt stack 0
 20697  002D62                     _ethernetController_softReset:
 20698                           	opt stack 22
 20699                           
 20700                           ;ENC424J600.c: 93: uint8_t comFailCount = 0;
 20701                           
 20702                           ; BSR set to: 0
 20703                           ;incstack = 0
 20704  002D62  0E00               	movlw	0
 20705  002D64  0100               	movlb	0	; () banked
 20706  002D66  6F72               	movwf	ethernetController_softReset@comFailCount& (0+255),b
 20707                           
 20708                           ; BSR set to: 0
 20709                           ;ENC424J600.c: 94: uint8_t dataToSend[2] = {0x12, 0x34};
 20710  002D68  C04D  F073         	movff	ethernetController_softReset@F5983,ethernetController_softReset@dataToSend
 20711  002D6C  C04E  F074         	movff	ethernetController_softReset@F5983+1,ethernetController_softReset@dataToSend+1
 20712                           
 20713                           ; BSR set to: 0
 20714                           ;ENC424J600.c: 95: uint8_t receivedData[2] = {0, 0};
 20715  002D70  C040  F075         	movff	ethernetController_softReset@F5985,ethernetController_softReset@receivedData
 20716  002D74  C041  F076         	movff	ethernetController_softReset@F5985+1,ethernetController_softReset@receivedData+1
 20717                           
 20718                           ;ENC424J600.c: 96: error_t err;
 20719                           ;ENC424J600.c: 97: err.module = ERROR_MODULE_ETHERNET_CONTROLLER;
 20720  002D78  0E01               	movlw	1
 20721  002D7A  6F77               	movwf	ethernetController_softReset@err& (0+255),b
 20722                           
 20723                           ;ENC424J600.c: 98: err.code = (uint16_t)0;
 20724  002D7C  0E00               	movlw	0
 20725  002D7E  6F79               	movwf	(ethernetController_softReset@err+2)& (0+255),b
 20726  002D80  0E00               	movlw	0
 20727  002D82  6F78               	movwf	(ethernetController_softReset@err+1)& (0+255),b
 20728                           
 20729                           ; BSR set to: 0
 20730                           ;ENC424J600.c: 99: if (comFailCount < 5) {
 20731  002D84  0E05               	movlw	5
 20732  002D86  6172               	cpfslt	ethernetController_softReset@comFailCount& (0+255),b
 20733  002D88  D05F               	goto	l84
 20734                           
 20735                           ; BSR set to: 0
 20736                           ;ENC424J600.c: 101: enc424j600_writeControlRegisterUnbanked(0x16 + 0x00, &dataToSend[0])
      +                          ;
 20737  002D8A  0E73               	movlw	low ethernetController_softReset@dataToSend
 20738  002D8C  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 20739  002D8E  0E00               	movlw	high ethernetController_softReset@dataToSend
 20740  002D90  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 20741  002D92  0E16               	movlw	22
 20742  002D94  EC48  F024         	call	_enc424j600_writeControlRegisterUnbanked
 20743                           
 20744                           ;ENC424J600.c: 102: enc424j600_writeControlRegisterUnbanked(0x17 + 0x00, &dataToSend[1])
      +                          ;
 20745  002D98  0E74               	movlw	low (ethernetController_softReset@dataToSend+1)
 20746  002D9A  0100               	movlb	0	; () banked
 20747  002D9C  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 20748  002D9E  0E00               	movlw	high (ethernetController_softReset@dataToSend+1)
 20749  002DA0  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 20750  002DA2  0E17               	movlw	23
 20751  002DA4  EC48  F024         	call	_enc424j600_writeControlRegisterUnbanked
 20752                           
 20753                           ;ENC424J600.c: 104: enc424j600_readControlRegisterUnbanked(0x16 + 0x00, &receivedData[0]
      +                          );
 20754  002DA8  0E75               	movlw	low ethernetController_softReset@receivedData
 20755  002DAA  0100               	movlb	0	; () banked
 20756  002DAC  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 20757  002DAE  0E00               	movlw	high ethernetController_softReset@receivedData
 20758  002DB0  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 20759  002DB2  0E16               	movlw	22
 20760  002DB4  EC63  F024         	call	_enc424j600_readControlRegisterUnbanked
 20761                           
 20762                           ;ENC424J600.c: 105: enc424j600_readControlRegisterUnbanked(0x17 + 0x00, &receivedData[1]
      +                          );
 20763  002DB8  0E76               	movlw	low (ethernetController_softReset@receivedData+1)
 20764  002DBA  0100               	movlb	0	; () banked
 20765  002DBC  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 20766  002DBE  0E00               	movlw	high (ethernetController_softReset@receivedData+1)
 20767  002DC0  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 20768  002DC2  0E17               	movlw	23
 20769  002DC4  EC63  F024         	call	_enc424j600_readControlRegisterUnbanked
 20770                           
 20771                           ;ENC424J600.c: 107: if ((receivedData[0] == dataToSend[0]) && (receivedData[1] == dataTo
      +                          Send[1])) {
 20772  002DC8  0100               	movlb	0	; () banked
 20773  002DCA  5173               	movf	ethernetController_softReset@dataToSend& (0+255),w,b
 20774  002DCC  1975               	xorwf	ethernetController_softReset@receivedData& (0+255),w,b
 20775  002DCE  A4D8               	btfss	status,2,c
 20776  002DD0  D038               	goto	l88
 20777                           
 20778                           ; BSR set to: 0
 20779  002DD2  5174               	movf	(ethernetController_softReset@dataToSend+1)& (0+255),w,b
 20780  002DD4  1976               	xorwf	(ethernetController_softReset@receivedData+1)& (0+255),w,b
 20781  002DD6  A4D8               	btfss	status,2,c
 20782  002DD8  D034               	goto	l88
 20783                           
 20784                           ; BSR set to: 0
 20785                           ;ENC424J600.c: 109: enc424j600_writeSingleByte(0b11001010);
 20786  002DDA  0ECA               	movlw	202
 20787  002DDC  EC11  F026         	call	_enc424j600_writeSingleByte
 20788                           
 20789                           ;ENC424J600.c: 110: _delay((unsigned long)((25)*(32000000UL/4000000.0)));
 20790  002DE0  0E42               	movlw	66
 20791  002DE2                     u11797:
 20792  002DE2  2EE8               	decfsz	wreg,f,c
 20793  002DE4  D7FE               	bra	u11797
 20794  002DE6  D000               	nop2	
 20795                           
 20796                           ;ENC424J600.c: 112: enc424j600_readControlRegisterUnbanked(0x16 + 0x00, &receivedData[0]
      +                          );
 20797  002DE8  0E75               	movlw	low ethernetController_softReset@receivedData
 20798  002DEA  0100               	movlb	0	; () banked
 20799  002DEC  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 20800  002DEE  0E00               	movlw	high ethernetController_softReset@receivedData
 20801  002DF0  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 20802  002DF2  0E16               	movlw	22
 20803  002DF4  EC63  F024         	call	_enc424j600_readControlRegisterUnbanked
 20804                           
 20805                           ;ENC424J600.c: 113: enc424j600_readControlRegisterUnbanked(0x17 + 0x00, &receivedData[1]
      +                          );
 20806  002DF8  0E76               	movlw	low (ethernetController_softReset@receivedData+1)
 20807  002DFA  0100               	movlb	0	; () banked
 20808  002DFC  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 20809  002DFE  0E00               	movlw	high (ethernetController_softReset@receivedData+1)
 20810  002E00  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 20811  002E02  0E17               	movlw	23
 20812  002E04  EC63  F024         	call	_enc424j600_readControlRegisterUnbanked
 20813                           
 20814                           ;ENC424J600.c: 115: if (!receivedData[0] && !receivedData[1]) {
 20815  002E08  0100               	movlb	0	; () banked
 20816  002E0A  5175               	movf	ethernetController_softReset@receivedData& (0+255),w,b
 20817  002E0C  A4D8               	btfss	status,2,c
 20818  002E0E  D00D               	goto	l86
 20819                           
 20820                           ; BSR set to: 0
 20821  002E10  5176               	movf	(ethernetController_softReset@receivedData+1)& (0+255),w,b
 20822  002E12  A4D8               	btfss	status,2,c
 20823  002E14  D00A               	goto	l86
 20824                           
 20825                           ; BSR set to: 0
 20826                           ;ENC424J600.c: 117: _delay((unsigned long)((256)*(32000000UL/4000000.0)));
 20827  002E16  0E03               	movlw	3
 20828  002E18  0100               	movlb	0	; () banked
 20829  002E1A  6F71               	movwf	??_ethernetController_softReset& (0+255),b
 20830  002E1C  0EA7               	movlw	167
 20831  002E1E                     u11807:
 20832  002E1E  2EE8               	decfsz	wreg,f,c
 20833  002E20  D7FE               	bra	u11807
 20834  002E22  2F71               	decfsz	??_ethernetController_softReset& (0+255),f,b
 20835  002E24  D7FC               	bra	u11807
 20836  002E26  D000               	nop2	
 20837  002E28  D005               	goto	l9297
 20838  002E2A                     l86:
 20839                           
 20840                           ;ENC424J600.c: 120: err.code = ERROR_ETHERNET_CONTROLLER_UNRESPONSIVE;
 20841  002E2A  0E01               	movlw	1
 20842  002E2C  0100               	movlb	0	; () banked
 20843  002E2E  6F79               	movwf	(ethernetController_softReset@err+2)& (0+255),b
 20844  002E30  0E2E               	movlw	46
 20845  002E32  6F78               	movwf	(ethernetController_softReset@err+1)& (0+255),b
 20846  002E34                     l9297:
 20847                           
 20848                           ; BSR set to: 0
 20849                           ;ENC424J600.c: 121: return err;
 20850  002E34  C077  F06E         	movff	ethernetController_softReset@err,?_ethernetController_softReset
 20851  002E38  C078  F06F         	movff	ethernetController_softReset@err+1,?_ethernetController_softReset+1
 20852  002E3C  C079  F070         	movff	ethernetController_softReset@err+2,?_ethernetController_softReset+2
 20853                           
 20854                           ; BSR set to: 0
 20855  002E40  0012               	return	
 20856  002E42                     l88:
 20857                           
 20858                           ;ENC424J600.c: 122: }
 20859                           ;ENC424J600.c: 123: }
 20860                           ;ENC424J600.c: 124: comFailCount++;
 20861                           
 20862                           ; BSR set to: 0
 20863                           
 20864                           ; BSR set to: 0
 20865  002E42  0100               	movlb	0	; () banked
 20866  002E44  2B72               	incf	ethernetController_softReset@comFailCount& (0+255),f,b
 20867                           
 20868                           ;ENC424J600.c: 125: } else {
 20869  002E46  D00B               	goto	l89
 20870  002E48                     l84:
 20871                           
 20872                           ; BSR set to: 0
 20873                           ;ENC424J600.c: 126: err.code = ERROR_ETHERNET_CONTROLLER_UNRESPONSIVE;
 20874                           
 20875                           ; BSR set to: 0
 20876  002E48  0E01               	movlw	1
 20877  002E4A  6F79               	movwf	(ethernetController_softReset@err+2)& (0+255),b
 20878  002E4C  0E2E               	movlw	46
 20879  002E4E  6F78               	movwf	(ethernetController_softReset@err+1)& (0+255),b
 20880                           
 20881                           ; BSR set to: 0
 20882                           ;ENC424J600.c: 127: return err;
 20883  002E50  C077  F06E         	movff	ethernetController_softReset@err,?_ethernetController_softReset
 20884  002E54  C078  F06F         	movff	ethernetController_softReset@err+1,?_ethernetController_softReset+1
 20885  002E58  C079  F070         	movff	ethernetController_softReset@err+2,?_ethernetController_softReset+2
 20886                           
 20887                           ; BSR set to: 0
 20888  002E5C  0012               	return	
 20889  002E5E                     l89:
 20890                           
 20891                           ; BSR set to: 0
 20892                           ;ENC424J600.c: 128: }
 20893                           ;ENC424J600.c: 129: return err;
 20894  002E5E  C077  F06E         	movff	ethernetController_softReset@err,?_ethernetController_softReset
 20895  002E62  C078  F06F         	movff	ethernetController_softReset@err+1,?_ethernetController_softReset+1
 20896  002E66  C079  F070         	movff	ethernetController_softReset@err+2,?_ethernetController_softReset+2
 20897  002E6A  0012               	return		;funcret
 20898  002E6C                     __end_of_ethernetController_softReset:
 20899                           	opt stack 0
 20900                           tblptru	equ	0xFF8
 20901                           tblptrh	equ	0xFF7
 20902                           tblptrl	equ	0xFF6
 20903                           tablat	equ	0xFF5
 20904                           prodh	equ	0xFF4
 20905                           prodl	equ	0xFF3
 20906                           intcon	equ	0xFF2
 20907                           intcon3	equ	0xFF0
 20908                           indf0	equ	0xFEF
 20909                           postinc0	equ	0xFEE
 20910                           plusw0	equ	0xFEB
 20911                           fsr0h	equ	0xFEA
 20912                           fsr0l	equ	0xFE9
 20913                           wreg	equ	0xFE8
 20914                           indf1	equ	0xFE7
 20915                           postinc1	equ	0xFE6
 20916                           postdec1	equ	0xFE5
 20917                           plusw1	equ	0xFE3
 20918                           fsr1h	equ	0xFE2
 20919                           fsr1l	equ	0xFE1
 20920                           indf2	equ	0xFDF
 20921                           postinc2	equ	0xFDE
 20922                           postdec2	equ	0xFDD
 20923                           plusw2	equ	0xFDB
 20924                           fsr2h	equ	0xFDA
 20925                           fsr2l	equ	0xFD9
 20926                           status	equ	0xFD8
 20927                           
 20928 ;; *************** function _ethernetController_checkDeviceId *****************
 20929 ;; Defined at:
 20930 ;;		line 132 in file "src/enc424j600/ENC424J600.c"
 20931 ;; Parameters:    Size  Location     Type
 20932 ;;		None
 20933 ;; Auto vars:     Size  Location     Type
 20934 ;;  err             3   18[BANK0 ] struct error
 20935 ;;  data            1   17[BANK0 ] unsigned char 
 20936 ;; Return value:  Size  Location     Type
 20937 ;;                  3   14[BANK0 ] struct error
 20938 ;; Registers used:
 20939 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20940 ;; Tracked objects:
 20941 ;;		On entry : 0/0
 20942 ;;		On exit  : 0/0
 20943 ;;		Unchanged: 0/0
 20944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20945 ;;      Params:         0       3       0       0       0       0       0       0       0
 20946 ;;      Locals:         0       4       0       0       0       0       0       0       0
 20947 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20948 ;;      Totals:         0       7       0       0       0       0       0       0       0
 20949 ;;Total ram usage:        7 bytes
 20950 ;; Hardware stack levels used:    1
 20951 ;; Hardware stack levels required when called:    7
 20952 ;; This function calls:
 20953 ;;		_enc424j600_readControlRegisterUnbanked
 20954 ;; This function is called by:
 20955 ;;		_ethernetController_init
 20956 ;;		_main
 20957 ;; This function uses a non-reentrant model
 20958 ;;
 20959                           
 20960                           	psect	text90
 20961  00457E                     __ptext90:
 20962                           	opt stack 0
 20963  00457E                     _ethernetController_checkDeviceId:
 20964                           	opt stack 22
 20965                           
 20966                           ;ENC424J600.c: 133: error_t err;
 20967                           ;ENC424J600.c: 134: err.module = ERROR_MODULE_ETHERNET_CONTROLLER;
 20968                           
 20969                           ;incstack = 0
 20970  00457E  0E01               	movlw	1
 20971  004580  0100               	movlb	0	; () banked
 20972  004582  6F72               	movwf	ethernetController_checkDeviceId@err& (0+255),b
 20973                           
 20974                           ;ENC424J600.c: 135: err.code = (uint16_t)0;
 20975  004584  0E00               	movlw	0
 20976  004586  6F74               	movwf	(ethernetController_checkDeviceId@err+2)& (0+255),b
 20977  004588  0E00               	movlw	0
 20978  00458A  6F73               	movwf	(ethernetController_checkDeviceId@err+1)& (0+255),b
 20979                           
 20980                           ;ENC424J600.c: 136: uint8_t data = 0;
 20981  00458C  0E00               	movlw	0
 20982  00458E  6F71               	movwf	ethernetController_checkDeviceId@data& (0+255),b
 20983                           
 20984                           ; BSR set to: 0
 20985                           ;ENC424J600.c: 137: enc424j600_readControlRegisterUnbanked(0x14 + 0x60, &data);
 20986  004590  0E71               	movlw	low ethernetController_checkDeviceId@data
 20987  004592  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 20988  004594  0E00               	movlw	high ethernetController_checkDeviceId@data
 20989  004596  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 20990  004598  0E74               	movlw	116
 20991  00459A  EC63  F024         	call	_enc424j600_readControlRegisterUnbanked
 20992                           
 20993                           ;ENC424J600.c: 138: if (((data >> 5)&0x07) == 0b001)
 20994  00459E  0100               	movlb	0	; () banked
 20995  0045A0  3971               	swapf	ethernetController_checkDeviceId@data& (0+255),w,b
 20996  0045A2  42E8               	rrncf	wreg,f,c
 20997  0045A4  0B07               	andlw	7
 20998  0045A6  0B07               	andlw	7
 20999  0045A8  06E8               	decf	wreg,f,c
 21000  0045AA  A4D8               	btfss	status,2,c
 21001  0045AC  D004               	goto	l92
 21002                           
 21003                           ; BSR set to: 0
 21004                           ;ENC424J600.c: 139: err.code = (uint16_t)0;
 21005  0045AE  0E00               	movlw	0
 21006  0045B0  6F74               	movwf	(ethernetController_checkDeviceId@err+2)& (0+255),b
 21007  0045B2  0E00               	movlw	0
 21008  0045B4  D003               	goto	L9
 21009  0045B6                     l92:
 21010                           
 21011                           ; BSR set to: 0
 21012                           ;ENC424J600.c: 140: else
 21013                           ;ENC424J600.c: 141: err.code = ERROR_ETHERNET_CONTROLLER_UNKNOWN_DEVICE_ID;
 21014                           
 21015                           ; BSR set to: 0
 21016  0045B6  0E01               	movlw	1
 21017  0045B8  6F74               	movwf	(ethernetController_checkDeviceId@err+2)& (0+255),b
 21018  0045BA  0E2D               	movlw	45
 21019  0045BC                     L9:
 21020  0045BC  6F73               	movwf	(ethernetController_checkDeviceId@err+1)& (0+255),b
 21021                           
 21022                           ; BSR set to: 0
 21023                           ;ENC424J600.c: 142: return err;
 21024                           
 21025                           ; BSR set to: 0
 21026  0045BE  C072  F06E         	movff	ethernetController_checkDeviceId@err,?_ethernetController_checkDeviceId
 21027  0045C2  C073  F06F         	movff	ethernetController_checkDeviceId@err+1,?_ethernetController_checkDeviceId+1
 21028  0045C6  C074  F070         	movff	ethernetController_checkDeviceId@err+2,?_ethernetController_checkDeviceId+2
 21029  0045CA  0012               	return	
 21030  0045CC                     __end_of_ethernetController_checkDeviceId:
 21031                           	opt stack 0
 21032                           tblptru	equ	0xFF8
 21033                           tblptrh	equ	0xFF7
 21034                           tblptrl	equ	0xFF6
 21035                           tablat	equ	0xFF5
 21036                           prodh	equ	0xFF4
 21037                           prodl	equ	0xFF3
 21038                           intcon	equ	0xFF2
 21039                           intcon3	equ	0xFF0
 21040                           indf0	equ	0xFEF
 21041                           postinc0	equ	0xFEE
 21042                           plusw0	equ	0xFEB
 21043                           fsr0h	equ	0xFEA
 21044                           fsr0l	equ	0xFE9
 21045                           wreg	equ	0xFE8
 21046                           indf1	equ	0xFE7
 21047                           postinc1	equ	0xFE6
 21048                           postdec1	equ	0xFE5
 21049                           plusw1	equ	0xFE3
 21050                           fsr1h	equ	0xFE2
 21051                           fsr1l	equ	0xFE1
 21052                           indf2	equ	0xFDF
 21053                           postinc2	equ	0xFDE
 21054                           postdec2	equ	0xFDD
 21055                           plusw2	equ	0xFDB
 21056                           fsr2h	equ	0xFDA
 21057                           fsr2l	equ	0xFD9
 21058                           status	equ	0xFD8
 21059                           
 21060 ;; *************** function _enc424j600_setRXTailPointer *****************
 21061 ;; Defined at:
 21062 ;;		line 649 in file "src/enc424j600/ENC424J600.c"
 21063 ;; Parameters:    Size  Location     Type
 21064 ;;  addr            2   14[BANK0 ] unsigned int 
 21065 ;; Auto vars:     Size  Location     Type
 21066 ;;  highByte        1   17[BANK0 ] unsigned char 
 21067 ;;  lowByte         1   16[BANK0 ] unsigned char 
 21068 ;; Return value:  Size  Location     Type
 21069 ;;                  1    wreg      void 
 21070 ;; Registers used:
 21071 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21072 ;; Tracked objects:
 21073 ;;		On entry : 0/0
 21074 ;;		On exit  : 0/0
 21075 ;;		Unchanged: 0/0
 21076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21077 ;;      Params:         0       2       0       0       0       0       0       0       0
 21078 ;;      Locals:         0       2       0       0       0       0       0       0       0
 21079 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21080 ;;      Totals:         0       4       0       0       0       0       0       0       0
 21081 ;;Total ram usage:        4 bytes
 21082 ;; Hardware stack levels used:    1
 21083 ;; Hardware stack levels required when called:    7
 21084 ;; This function calls:
 21085 ;;		_enc424j600_writeControlRegisterUnbanked
 21086 ;; This function is called by:
 21087 ;;		_ethernetController_init
 21088 ;;		_ethernetController_dropPacket
 21089 ;; This function uses a non-reentrant model
 21090 ;;
 21091                           
 21092                           	psect	text91
 21093  004A10                     __ptext91:
 21094                           	opt stack 0
 21095  004A10                     _enc424j600_setRXTailPointer:
 21096                           	opt stack 19
 21097                           
 21098                           ;ENC424J600.c: 650: uint8_t lowByte = addr & 0x00ff;
 21099                           
 21100                           ; BSR set to: 0
 21101                           ;incstack = 0
 21102  004A10  C06E  F070         	movff	enc424j600_setRXTailPointer@addr,enc424j600_setRXTailPointer@lowByte
 21103                           
 21104                           ;ENC424J600.c: 651: uint8_t highByte = (addr >> 8) & 0xff;
 21105  004A14  0100               	movlb	0	; () banked
 21106  004A16  516F               	movf	(enc424j600_setRXTailPointer@addr+1)& (0+255),w,b
 21107  004A18  6F71               	movwf	enc424j600_setRXTailPointer@highByte& (0+255),b
 21108                           
 21109                           ; BSR set to: 0
 21110                           ;ENC424J600.c: 652: enc424j600_writeControlRegisterUnbanked(0x06 + 0x00, &lowByte);
 21111  004A1A  0E70               	movlw	low enc424j600_setRXTailPointer@lowByte
 21112  004A1C  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 21113  004A1E  0E00               	movlw	high enc424j600_setRXTailPointer@lowByte
 21114  004A20  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 21115  004A22  0E06               	movlw	6
 21116  004A24  EC48  F024         	call	_enc424j600_writeControlRegisterUnbanked
 21117                           
 21118                           ;ENC424J600.c: 653: enc424j600_writeControlRegisterUnbanked(0x07 + 0x00, &highByte);
 21119  004A28  0E71               	movlw	low enc424j600_setRXTailPointer@highByte
 21120  004A2A  0100               	movlb	0	; () banked
 21121  004A2C  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 21122  004A2E  0E00               	movlw	high enc424j600_setRXTailPointer@highByte
 21123  004A30  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 21124  004A32  0E07               	movlw	7
 21125  004A34  EC48  F024         	call	_enc424j600_writeControlRegisterUnbanked
 21126  004A38  0012               	return		;funcret
 21127  004A3A                     __end_of_enc424j600_setRXTailPointer:
 21128                           	opt stack 0
 21129                           tblptru	equ	0xFF8
 21130                           tblptrh	equ	0xFF7
 21131                           tblptrl	equ	0xFF6
 21132                           tablat	equ	0xFF5
 21133                           prodh	equ	0xFF4
 21134                           prodl	equ	0xFF3
 21135                           intcon	equ	0xFF2
 21136                           intcon3	equ	0xFF0
 21137                           indf0	equ	0xFEF
 21138                           postinc0	equ	0xFEE
 21139                           plusw0	equ	0xFEB
 21140                           fsr0h	equ	0xFEA
 21141                           fsr0l	equ	0xFE9
 21142                           wreg	equ	0xFE8
 21143                           indf1	equ	0xFE7
 21144                           postinc1	equ	0xFE6
 21145                           postdec1	equ	0xFE5
 21146                           plusw1	equ	0xFE3
 21147                           fsr1h	equ	0xFE2
 21148                           fsr1l	equ	0xFE1
 21149                           indf2	equ	0xFDF
 21150                           postinc2	equ	0xFDE
 21151                           postdec2	equ	0xFDD
 21152                           plusw2	equ	0xFDB
 21153                           fsr2h	equ	0xFDA
 21154                           fsr2l	equ	0xFD9
 21155                           status	equ	0xFD8
 21156                           
 21157 ;; *************** function _enc424j600_setRXBufferStartAddress *****************
 21158 ;; Defined at:
 21159 ;;		line 642 in file "src/enc424j600/ENC424J600.c"
 21160 ;; Parameters:    Size  Location     Type
 21161 ;;  addr            2   14[BANK0 ] unsigned int 
 21162 ;; Auto vars:     Size  Location     Type
 21163 ;;  highByte        1   17[BANK0 ] unsigned char 
 21164 ;;  lowByte         1   16[BANK0 ] unsigned char 
 21165 ;; Return value:  Size  Location     Type
 21166 ;;                  1    wreg      void 
 21167 ;; Registers used:
 21168 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21169 ;; Tracked objects:
 21170 ;;		On entry : 0/0
 21171 ;;		On exit  : 0/0
 21172 ;;		Unchanged: 0/0
 21173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21174 ;;      Params:         0       2       0       0       0       0       0       0       0
 21175 ;;      Locals:         0       2       0       0       0       0       0       0       0
 21176 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21177 ;;      Totals:         0       4       0       0       0       0       0       0       0
 21178 ;;Total ram usage:        4 bytes
 21179 ;; Hardware stack levels used:    1
 21180 ;; Hardware stack levels required when called:    7
 21181 ;; This function calls:
 21182 ;;		_enc424j600_writeControlRegisterUnbanked
 21183 ;; This function is called by:
 21184 ;;		_ethernetController_init
 21185 ;; This function uses a non-reentrant model
 21186 ;;
 21187                           
 21188                           	psect	text92
 21189  004A3A                     __ptext92:
 21190                           	opt stack 0
 21191  004A3A                     _enc424j600_setRXBufferStartAddress:
 21192                           	opt stack 22
 21193                           
 21194                           ;ENC424J600.c: 643: uint8_t lowByte = addr & 0x00ff;
 21195                           
 21196                           ;incstack = 0
 21197  004A3A  C06E  F070         	movff	enc424j600_setRXBufferStartAddress@addr,enc424j600_setRXBufferStartAddress@lowByt
      +                          e
 21198                           
 21199                           ;ENC424J600.c: 644: uint8_t highByte = (addr >> 8) & 0xff;
 21200  004A3E  0100               	movlb	0	; () banked
 21201  004A40  516F               	movf	(enc424j600_setRXBufferStartAddress@addr+1)& (0+255),w,b
 21202  004A42  6F71               	movwf	enc424j600_setRXBufferStartAddress@highByte& (0+255),b
 21203                           
 21204                           ; BSR set to: 0
 21205                           ;ENC424J600.c: 645: enc424j600_writeControlRegisterUnbanked(0x04 + 0x00, &lowByte);
 21206  004A44  0E70               	movlw	low enc424j600_setRXBufferStartAddress@lowByte
 21207  004A46  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 21208  004A48  0E00               	movlw	high enc424j600_setRXBufferStartAddress@lowByte
 21209  004A4A  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 21210  004A4C  0E04               	movlw	4
 21211  004A4E  EC48  F024         	call	_enc424j600_writeControlRegisterUnbanked
 21212                           
 21213                           ;ENC424J600.c: 646: enc424j600_writeControlRegisterUnbanked(0x05 + 0x00, &highByte);
 21214  004A52  0E71               	movlw	low enc424j600_setRXBufferStartAddress@highByte
 21215  004A54  0100               	movlb	0	; () banked
 21216  004A56  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 21217  004A58  0E00               	movlw	high enc424j600_setRXBufferStartAddress@highByte
 21218  004A5A  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 21219  004A5C  0E05               	movlw	5
 21220  004A5E  EC48  F024         	call	_enc424j600_writeControlRegisterUnbanked
 21221  004A62  0012               	return		;funcret
 21222  004A64                     __end_of_enc424j600_setRXBufferStartAddress:
 21223                           	opt stack 0
 21224                           tblptru	equ	0xFF8
 21225                           tblptrh	equ	0xFF7
 21226                           tblptrl	equ	0xFF6
 21227                           tablat	equ	0xFF5
 21228                           prodh	equ	0xFF4
 21229                           prodl	equ	0xFF3
 21230                           intcon	equ	0xFF2
 21231                           intcon3	equ	0xFF0
 21232                           indf0	equ	0xFEF
 21233                           postinc0	equ	0xFEE
 21234                           plusw0	equ	0xFEB
 21235                           fsr0h	equ	0xFEA
 21236                           fsr0l	equ	0xFE9
 21237                           wreg	equ	0xFE8
 21238                           indf1	equ	0xFE7
 21239                           postinc1	equ	0xFE6
 21240                           postdec1	equ	0xFE5
 21241                           plusw1	equ	0xFE3
 21242                           fsr1h	equ	0xFE2
 21243                           fsr1l	equ	0xFE1
 21244                           indf2	equ	0xFDF
 21245                           postinc2	equ	0xFDE
 21246                           postdec2	equ	0xFDD
 21247                           plusw2	equ	0xFDB
 21248                           fsr2h	equ	0xFDA
 21249                           fsr2l	equ	0xFD9
 21250                           status	equ	0xFD8
 21251                           
 21252 ;; *************** function _enc424j600_setNextPacketPointer *****************
 21253 ;; Defined at:
 21254 ;;		line 586 in file "src/enc424j600/ENC424J600.c"
 21255 ;; Parameters:    Size  Location     Type
 21256 ;;  ptr             2    0[BANK0 ] unsigned int 
 21257 ;; Auto vars:     Size  Location     Type
 21258 ;;		None
 21259 ;; Return value:  Size  Location     Type
 21260 ;;                  1    wreg      void 
 21261 ;; Registers used:
 21262 ;;		None
 21263 ;; Tracked objects:
 21264 ;;		On entry : 0/0
 21265 ;;		On exit  : 0/0
 21266 ;;		Unchanged: 0/0
 21267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21268 ;;      Params:         0       2       0       0       0       0       0       0       0
 21269 ;;      Locals:         0       0       0       0       0       0       0       0       0
 21270 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21271 ;;      Totals:         0       2       0       0       0       0       0       0       0
 21272 ;;Total ram usage:        2 bytes
 21273 ;; Hardware stack levels used:    1
 21274 ;; Hardware stack levels required when called:    4
 21275 ;; This function calls:
 21276 ;;		Nothing
 21277 ;; This function is called by:
 21278 ;;		_ethernetController_init
 21279 ;;		_ethernetController_updateNextPacketPointer
 21280 ;; This function uses a non-reentrant model
 21281 ;;
 21282                           
 21283                           	psect	text93
 21284  004CF2                     __ptext93:
 21285                           	opt stack 0
 21286  004CF2                     _enc424j600_setNextPacketPointer:
 21287                           	opt stack 23
 21288                           
 21289                           ;ENC424J600.c: 587: nextPacketPointer = ptr;
 21290                           
 21291                           ;incstack = 0
 21292  004CF2  C060  F042         	movff	enc424j600_setNextPacketPointer@ptr,_nextPacketPointer
 21293  004CF6  C061  F043         	movff	enc424j600_setNextPacketPointer@ptr+1,_nextPacketPointer+1
 21294  004CFA  0012               	return		;funcret
 21295  004CFC                     __end_of_enc424j600_setNextPacketPointer:
 21296                           	opt stack 0
 21297                           tblptru	equ	0xFF8
 21298                           tblptrh	equ	0xFF7
 21299                           tblptrl	equ	0xFF6
 21300                           tablat	equ	0xFF5
 21301                           prodh	equ	0xFF4
 21302                           prodl	equ	0xFF3
 21303                           intcon	equ	0xFF2
 21304                           intcon3	equ	0xFF0
 21305                           indf0	equ	0xFEF
 21306                           postinc0	equ	0xFEE
 21307                           plusw0	equ	0xFEB
 21308                           fsr0h	equ	0xFEA
 21309                           fsr0l	equ	0xFE9
 21310                           wreg	equ	0xFE8
 21311                           indf1	equ	0xFE7
 21312                           postinc1	equ	0xFE6
 21313                           postdec1	equ	0xFE5
 21314                           plusw1	equ	0xFE3
 21315                           fsr1h	equ	0xFE2
 21316                           fsr1l	equ	0xFE1
 21317                           indf2	equ	0xFDF
 21318                           postinc2	equ	0xFDE
 21319                           postdec2	equ	0xFDD
 21320                           plusw2	equ	0xFDB
 21321                           fsr2h	equ	0xFDA
 21322                           fsr2l	equ	0xFD9
 21323                           status	equ	0xFD8
 21324                           
 21325 ;; *************** function _enc424j600_enableReception *****************
 21326 ;; Defined at:
 21327 ;;		line 672 in file "src/enc424j600/ENC424J600.c"
 21328 ;; Parameters:    Size  Location     Type
 21329 ;;		None
 21330 ;; Auto vars:     Size  Location     Type
 21331 ;;		None
 21332 ;; Return value:  Size  Location     Type
 21333 ;;                  1    wreg      void 
 21334 ;; Registers used:
 21335 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21336 ;; Tracked objects:
 21337 ;;		On entry : 0/0
 21338 ;;		On exit  : 0/0
 21339 ;;		Unchanged: 0/0
 21340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21341 ;;      Params:         0       0       0       0       0       0       0       0       0
 21342 ;;      Locals:         0       0       0       0       0       0       0       0       0
 21343 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21344 ;;      Totals:         0       0       0       0       0       0       0       0       0
 21345 ;;Total ram usage:        0 bytes
 21346 ;; Hardware stack levels used:    1
 21347 ;; Hardware stack levels required when called:    7
 21348 ;; This function calls:
 21349 ;;		_enc424j600_writeSingleByte
 21350 ;; This function is called by:
 21351 ;;		_ethernetController_init
 21352 ;;		_ethernetController_enableReception
 21353 ;; This function uses a non-reentrant model
 21354 ;;
 21355                           
 21356                           	psect	text94
 21357  004CFC                     __ptext94:
 21358                           	opt stack 0
 21359  004CFC                     _enc424j600_enableReception:
 21360                           	opt stack 22
 21361                           
 21362                           ;ENC424J600.c: 673: enc424j600_writeSingleByte(0b11101000);
 21363                           
 21364                           ;incstack = 0
 21365  004CFC  0EE8               	movlw	232
 21366  004CFE  EC11  F026         	call	_enc424j600_writeSingleByte
 21367  004D02  0012               	return		;funcret
 21368  004D04                     __end_of_enc424j600_enableReception:
 21369                           	opt stack 0
 21370                           tblptru	equ	0xFF8
 21371                           tblptrh	equ	0xFF7
 21372                           tblptrl	equ	0xFF6
 21373                           tablat	equ	0xFF5
 21374                           prodh	equ	0xFF4
 21375                           prodl	equ	0xFF3
 21376                           intcon	equ	0xFF2
 21377                           intcon3	equ	0xFF0
 21378                           indf0	equ	0xFEF
 21379                           postinc0	equ	0xFEE
 21380                           plusw0	equ	0xFEB
 21381                           fsr0h	equ	0xFEA
 21382                           fsr0l	equ	0xFE9
 21383                           wreg	equ	0xFE8
 21384                           indf1	equ	0xFE7
 21385                           postinc1	equ	0xFE6
 21386                           postdec1	equ	0xFE5
 21387                           plusw1	equ	0xFE3
 21388                           fsr1h	equ	0xFE2
 21389                           fsr1l	equ	0xFE1
 21390                           indf2	equ	0xFDF
 21391                           postinc2	equ	0xFDE
 21392                           postdec2	equ	0xFDD
 21393                           plusw2	equ	0xFDB
 21394                           fsr2h	equ	0xFDA
 21395                           fsr2l	equ	0xFD9
 21396                           status	equ	0xFD8
 21397                           
 21398 ;; *************** function _enc424j600_writeSingleByte *****************
 21399 ;; Defined at:
 21400 ;;		line 512 in file "src/enc424j600/ENC424J600.c"
 21401 ;; Parameters:    Size  Location     Type
 21402 ;;  opcode          1    wreg     unsigned char 
 21403 ;; Auto vars:     Size  Location     Type
 21404 ;;  opcode          1   10[BANK0 ] unsigned char 
 21405 ;; Return value:  Size  Location     Type
 21406 ;;                  1    wreg      void 
 21407 ;; Registers used:
 21408 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21409 ;; Tracked objects:
 21410 ;;		On entry : 0/0
 21411 ;;		On exit  : 0/0
 21412 ;;		Unchanged: 0/0
 21413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21414 ;;      Params:         0       0       0       0       0       0       0       0       0
 21415 ;;      Locals:         0       1       0       0       0       0       0       0       0
 21416 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21417 ;;      Totals:         0       1       0       0       0       0       0       0       0
 21418 ;;Total ram usage:        1 bytes
 21419 ;; Hardware stack levels used:    1
 21420 ;; Hardware stack levels required when called:    6
 21421 ;; This function calls:
 21422 ;;		_enc424j600_writeSPI
 21423 ;; This function is called by:
 21424 ;;		_ethernetController_softReset
 21425 ;;		_ethernetController_sendPacket
 21426 ;;		_ethernetController_dropPacket
 21427 ;;		_enc424j600_enableReception
 21428 ;;		_enc424j600_disableReception
 21429 ;; This function uses a non-reentrant model
 21430 ;;
 21431                           
 21432                           	psect	text95
 21433  004C22                     __ptext95:
 21434                           	opt stack 0
 21435  004C22                     _enc424j600_writeSingleByte:
 21436                           	opt stack 20
 21437                           
 21438                           ;incstack = 0
 21439                           ;enc424j600_writeSingleByte@opcode stored from wreg
 21440  004C22  0100               	movlb	0	; () banked
 21441  004C24  6F6A               	movwf	enc424j600_writeSingleByte@opcode& (0+255),b
 21442                           
 21443                           ;ENC424J600.c: 513: PORTBbits.RB4=0;
 21444  004C26  9881               	bcf	3969,4,c	;volatile
 21445                           
 21446                           ;ENC424J600.c: 514: enc424j600_writeSPI(&opcode);
 21447  004C28  0E6A               	movlw	low enc424j600_writeSingleByte@opcode
 21448  004C2A  0100               	movlb	0	; () banked
 21449  004C2C  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 21450  004C2E  0E00               	movlw	high enc424j600_writeSingleByte@opcode
 21451  004C30  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 21452  004C32  EC10  F021         	call	_enc424j600_writeSPI	;wreg free
 21453                           
 21454                           ;ENC424J600.c: 515: PORTBbits.RB4=1;
 21455  004C36  8881               	bsf	3969,4,c	;volatile
 21456  004C38  0012               	return		;funcret
 21457  004C3A                     __end_of_enc424j600_writeSingleByte:
 21458                           	opt stack 0
 21459                           tblptru	equ	0xFF8
 21460                           tblptrh	equ	0xFF7
 21461                           tblptrl	equ	0xFF6
 21462                           tablat	equ	0xFF5
 21463                           prodh	equ	0xFF4
 21464                           prodl	equ	0xFF3
 21465                           intcon	equ	0xFF2
 21466                           intcon3	equ	0xFF0
 21467                           indf0	equ	0xFEF
 21468                           postinc0	equ	0xFEE
 21469                           plusw0	equ	0xFEB
 21470                           fsr0h	equ	0xFEA
 21471                           fsr0l	equ	0xFE9
 21472                           wreg	equ	0xFE8
 21473                           indf1	equ	0xFE7
 21474                           postinc1	equ	0xFE6
 21475                           postdec1	equ	0xFE5
 21476                           plusw1	equ	0xFE3
 21477                           fsr1h	equ	0xFE2
 21478                           fsr1l	equ	0xFE1
 21479                           indf2	equ	0xFDF
 21480                           postinc2	equ	0xFDE
 21481                           postdec2	equ	0xFDD
 21482                           plusw2	equ	0xFDB
 21483                           fsr2h	equ	0xFDA
 21484                           fsr2l	equ	0xFD9
 21485                           status	equ	0xFD8
 21486                           
 21487 ;; *************** function _enc424j600_enableAutoMACInsertion *****************
 21488 ;; Defined at:
 21489 ;;		line 658 in file "src/enc424j600/ENC424J600.c"
 21490 ;; Parameters:    Size  Location     Type
 21491 ;;		None
 21492 ;; Auto vars:     Size  Location     Type
 21493 ;;  temp            1   14[BANK0 ] unsigned char 
 21494 ;; Return value:  Size  Location     Type
 21495 ;;                  1    wreg      void 
 21496 ;; Registers used:
 21497 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21498 ;; Tracked objects:
 21499 ;;		On entry : 0/0
 21500 ;;		On exit  : 0/0
 21501 ;;		Unchanged: 0/0
 21502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21503 ;;      Params:         0       0       0       0       0       0       0       0       0
 21504 ;;      Locals:         0       1       0       0       0       0       0       0       0
 21505 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21506 ;;      Totals:         0       1       0       0       0       0       0       0       0
 21507 ;;Total ram usage:        1 bytes
 21508 ;; Hardware stack levels used:    1
 21509 ;; Hardware stack levels required when called:    7
 21510 ;; This function calls:
 21511 ;;		_enc424j600_readControlRegisterUnbanked
 21512 ;;		_enc424j600_writeControlRegisterUnbanked
 21513 ;; This function is called by:
 21514 ;;		_ethernetController_init
 21515 ;; This function uses a non-reentrant model
 21516 ;;
 21517                           
 21518                           	psect	text96
 21519  004AB4                     __ptext96:
 21520                           	opt stack 0
 21521  004AB4                     _enc424j600_enableAutoMACInsertion:
 21522                           	opt stack 22
 21523                           
 21524                           ;ENC424J600.c: 659: uint8_t temp = 0;
 21525                           
 21526                           ;incstack = 0
 21527  004AB4  0E00               	movlw	0
 21528  004AB6  0100               	movlb	0	; () banked
 21529  004AB8  6F6E               	movwf	enc424j600_enableAutoMACInsertion@temp& (0+255),b
 21530                           
 21531                           ; BSR set to: 0
 21532                           ;ENC424J600.c: 660: enc424j600_readControlRegisterUnbanked(0x0F + 0x60, &temp);
 21533  004ABA  0E6E               	movlw	low enc424j600_enableAutoMACInsertion@temp
 21534  004ABC  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 21535  004ABE  0E00               	movlw	high enc424j600_enableAutoMACInsertion@temp
 21536  004AC0  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 21537  004AC2  0E6F               	movlw	111
 21538  004AC4  EC63  F024         	call	_enc424j600_readControlRegisterUnbanked
 21539                           
 21540                           ;ENC424J600.c: 661: temp |= (1 << 5);
 21541  004AC8  0100               	movlb	0	; () banked
 21542  004ACA  8B6E               	bsf	enc424j600_enableAutoMACInsertion@temp& (0+255),5,b
 21543                           
 21544                           ; BSR set to: 0
 21545                           ;ENC424J600.c: 662: enc424j600_writeControlRegisterUnbanked(0x0F + 0x60, &temp);
 21546  004ACC  0E6E               	movlw	low enc424j600_enableAutoMACInsertion@temp
 21547  004ACE  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 21548  004AD0  0E00               	movlw	high enc424j600_enableAutoMACInsertion@temp
 21549  004AD2  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 21550  004AD4  0E6F               	movlw	111
 21551  004AD6  EC48  F024         	call	_enc424j600_writeControlRegisterUnbanked
 21552  004ADA  0012               	return		;funcret
 21553  004ADC                     __end_of_enc424j600_enableAutoMACInsertion:
 21554                           	opt stack 0
 21555                           tblptru	equ	0xFF8
 21556                           tblptrh	equ	0xFF7
 21557                           tblptrl	equ	0xFF6
 21558                           tablat	equ	0xFF5
 21559                           prodh	equ	0xFF4
 21560                           prodl	equ	0xFF3
 21561                           intcon	equ	0xFF2
 21562                           intcon3	equ	0xFF0
 21563                           indf0	equ	0xFEF
 21564                           postinc0	equ	0xFEE
 21565                           plusw0	equ	0xFEB
 21566                           fsr0h	equ	0xFEA
 21567                           fsr0l	equ	0xFE9
 21568                           wreg	equ	0xFE8
 21569                           indf1	equ	0xFE7
 21570                           postinc1	equ	0xFE6
 21571                           postdec1	equ	0xFE5
 21572                           plusw1	equ	0xFE3
 21573                           fsr1h	equ	0xFE2
 21574                           fsr1l	equ	0xFE1
 21575                           indf2	equ	0xFDF
 21576                           postinc2	equ	0xFDE
 21577                           postdec2	equ	0xFDD
 21578                           plusw2	equ	0xFDB
 21579                           fsr2h	equ	0xFDA
 21580                           fsr2l	equ	0xFD9
 21581                           status	equ	0xFD8
 21582                           
 21583 ;; *************** function _enc424j600_writeControlRegisterUnbanked *****************
 21584 ;; Defined at:
 21585 ;;		line 518 in file "src/enc424j600/ENC424J600.c"
 21586 ;; Parameters:    Size  Location     Type
 21587 ;;  addr            1    wreg     unsigned char 
 21588 ;;  data            2   10[BANK0 ] PTR unsigned char 
 21589 ;;		 -> enc424j600_clearInterruptFlag@temp(1), enc424j600_disable@temp(1), enc424j600_enable@temp(1), enc424j600_disable
      +AutoMACInsertion@temp(1), 
 21590 ;;		 -> enc424j600_enableAutoMACInsertion@temp(1), enc424j600_setRXTailPointer@highByte(1), enc424j600_setRXTailPointer@
      +lowByte(1), enc424j600_setRXBufferStartAddress@highByte(1), 
 21591 ;;		 -> enc424j600_setRXBufferStartAddress@lowByte(1), enc424j600_setTXStartAddress@highByte(1), enc424j600_setTXStartAd
      +dress@lowByte(1), enc424j600_setTXLength@highByte(1), 
 21592 ;;		 -> enc424j600_setTXLength@lowByte(1), enc424j600_readPHYRegister@temp(1), enc424j600_readPHYRegister@unusedBits(1),
      + enc424j600_readPHYRegister@PHYaddress(1), 
 21593 ;;		 -> ethernetController_setLEDConfig@data(1), mac.address(6), ethernetController_setMacAddress@mac(6), ethernetContro
      +ller_softReset@dataToSend(2), 
 21594 ;; Auto vars:     Size  Location     Type
 21595 ;;  addr            1   12[BANK0 ] unsigned char 
 21596 ;;  opcode          1   13[BANK0 ] unsigned char 
 21597 ;; Return value:  Size  Location     Type
 21598 ;;                  1    wreg      void 
 21599 ;; Registers used:
 21600 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21601 ;; Tracked objects:
 21602 ;;		On entry : 0/0
 21603 ;;		On exit  : 0/0
 21604 ;;		Unchanged: 0/0
 21605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21606 ;;      Params:         0       2       0       0       0       0       0       0       0
 21607 ;;      Locals:         0       2       0       0       0       0       0       0       0
 21608 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21609 ;;      Totals:         0       4       0       0       0       0       0       0       0
 21610 ;;Total ram usage:        4 bytes
 21611 ;; Hardware stack levels used:    1
 21612 ;; Hardware stack levels required when called:    6
 21613 ;; This function calls:
 21614 ;;		_enc424j600_writeSPI
 21615 ;; This function is called by:
 21616 ;;		_ethernetController_softReset
 21617 ;;		_ethernetController_setLEDConfig
 21618 ;;		_enc424j600_readPHYRegister
 21619 ;;		_enc424j600_setTXLength
 21620 ;;		_enc424j600_setTXStartAddress
 21621 ;;		_enc424j600_setRXBufferStartAddress
 21622 ;;		_enc424j600_setRXTailPointer
 21623 ;;		_enc424j600_enableAutoMACInsertion
 21624 ;;		_enc424j600_clearInterruptFlag
 21625 ;;		_ethernetController_setMacAddress
 21626 ;;		_enc424j600_disableAutoMACInsertion
 21627 ;;		_enc424j600_enable
 21628 ;;		_enc424j600_disable
 21629 ;; This function uses a non-reentrant model
 21630 ;;
 21631                           
 21632                           	psect	text97
 21633  004890                     __ptext97:
 21634                           	opt stack 0
 21635  004890                     _enc424j600_writeControlRegisterUnbanked:
 21636                           	opt stack 19
 21637                           
 21638                           ;incstack = 0
 21639                           ;enc424j600_writeControlRegisterUnbanked@addr stored from wreg
 21640  004890  0100               	movlb	0	; () banked
 21641  004892  6F6C               	movwf	enc424j600_writeControlRegisterUnbanked@addr& (0+255),b
 21642                           
 21643                           ;ENC424J600.c: 519: uint8_t opcode = 0x22;
 21644  004894  0E22               	movlw	34
 21645  004896  0100               	movlb	0	; () banked
 21646  004898  6F6D               	movwf	enc424j600_writeControlRegisterUnbanked@opcode& (0+255),b
 21647                           
 21648                           ; BSR set to: 0
 21649                           ;ENC424J600.c: 520: PORTBbits.RB4=0;
 21650  00489A  9881               	bcf	3969,4,c	;volatile
 21651                           
 21652                           ; BSR set to: 0
 21653                           ;ENC424J600.c: 521: enc424j600_writeSPI(&opcode);
 21654  00489C  0E6D               	movlw	low enc424j600_writeControlRegisterUnbanked@opcode
 21655  00489E  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 21656  0048A0  0E00               	movlw	high enc424j600_writeControlRegisterUnbanked@opcode
 21657  0048A2  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 21658  0048A4  EC10  F021         	call	_enc424j600_writeSPI	;wreg free
 21659                           
 21660                           ;ENC424J600.c: 522: enc424j600_writeSPI(&addr);
 21661  0048A8  0E6C               	movlw	low enc424j600_writeControlRegisterUnbanked@addr
 21662  0048AA  0100               	movlb	0	; () banked
 21663  0048AC  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 21664  0048AE  0E00               	movlw	high enc424j600_writeControlRegisterUnbanked@addr
 21665  0048B0  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 21666  0048B2  EC10  F021         	call	_enc424j600_writeSPI	;wreg free
 21667                           
 21668                           ;ENC424J600.c: 523: enc424j600_writeSPI(data);
 21669  0048B6  C06A  F060         	movff	enc424j600_writeControlRegisterUnbanked@data,enc424j600_writeSPI@data
 21670  0048BA  C06B  F061         	movff	enc424j600_writeControlRegisterUnbanked@data+1,enc424j600_writeSPI@data+1
 21671  0048BE  EC10  F021         	call	_enc424j600_writeSPI	;wreg free
 21672                           
 21673                           ;ENC424J600.c: 524: PORTBbits.RB4=1;
 21674  0048C2  8881               	bsf	3969,4,c	;volatile
 21675  0048C4  0012               	return		;funcret
 21676  0048C6                     __end_of_enc424j600_writeControlRegisterUnbanked:
 21677                           	opt stack 0
 21678                           tblptru	equ	0xFF8
 21679                           tblptrh	equ	0xFF7
 21680                           tblptrl	equ	0xFF6
 21681                           tablat	equ	0xFF5
 21682                           prodh	equ	0xFF4
 21683                           prodl	equ	0xFF3
 21684                           intcon	equ	0xFF2
 21685                           intcon3	equ	0xFF0
 21686                           indf0	equ	0xFEF
 21687                           postinc0	equ	0xFEE
 21688                           plusw0	equ	0xFEB
 21689                           fsr0h	equ	0xFEA
 21690                           fsr0l	equ	0xFE9
 21691                           wreg	equ	0xFE8
 21692                           indf1	equ	0xFE7
 21693                           postinc1	equ	0xFE6
 21694                           postdec1	equ	0xFE5
 21695                           plusw1	equ	0xFE3
 21696                           fsr1h	equ	0xFE2
 21697                           fsr1l	equ	0xFE1
 21698                           indf2	equ	0xFDF
 21699                           postinc2	equ	0xFDE
 21700                           postdec2	equ	0xFDD
 21701                           plusw2	equ	0xFDB
 21702                           fsr2h	equ	0xFDA
 21703                           fsr2l	equ	0xFD9
 21704                           status	equ	0xFD8
 21705                           
 21706 ;; *************** function _ethernetController_getDeviceName *****************
 21707 ;; Defined at:
 21708 ;;		line 145 in file "src/enc424j600/ENC424J600.c"
 21709 ;; Parameters:    Size  Location     Type
 21710 ;;		None
 21711 ;; Auto vars:     Size  Location     Type
 21712 ;;  string         11    2[BANK0 ] const unsigned char [11]
 21713 ;; Return value:  Size  Location     Type
 21714 ;;                  2    0[BANK0 ] PTR unsigned char 
 21715 ;; Registers used:
 21716 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 21717 ;; Tracked objects:
 21718 ;;		On entry : 0/0
 21719 ;;		On exit  : 0/0
 21720 ;;		Unchanged: 0/0
 21721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21722 ;;      Params:         0       2       0       0       0       0       0       0       0
 21723 ;;      Locals:         0      11       0       0       0       0       0       0       0
 21724 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21725 ;;      Totals:         0      13       0       0       0       0       0       0       0
 21726 ;;Total ram usage:       13 bytes
 21727 ;; Hardware stack levels used:    1
 21728 ;; Hardware stack levels required when called:    4
 21729 ;; This function calls:
 21730 ;;		Nothing
 21731 ;; This function is called by:
 21732 ;;		_main
 21733 ;; This function uses a non-reentrant model
 21734 ;;
 21735                           
 21736                           	psect	text98
 21737  004B4C                     __ptext98:
 21738                           	opt stack 0
 21739  004B4C                     _ethernetController_getDeviceName:
 21740                           	opt stack 26
 21741                           
 21742                           ;ENC424J600.c: 146: const char string [] = "ENC424J600";
 21743                           
 21744                           ;incstack = 0
 21745  004B4C  0EA9               	movlw	low ethernetController_getDeviceName@F5995
 21746  004B4E  6EF6               	movwf	tblptrl,c
 21747  004B50                     	if	1	;There is more than 1 active tblptr byte
 21748  004B50  0E7A               	movlw	high ethernetController_getDeviceName@F5995
 21749  004B52  6EF7               	movwf	tblptrh,c
 21750  004B54                     	endif
 21751  004B54                     	if	0	;There are less than 3 active tblptr bytes
 21752  004B54                     	endif
 21753  004B54  EE20  F062         	lfsr	2,ethernetController_getDeviceName@string
 21754  004B58  0E0A               	movlw	10
 21755  004B5A                     u11450:
 21756  004B5A  0009               	tblrd		*+
 21757  004B5C  CFF5 FFDE          	movff	tablat,postinc2
 21758  004B60  06E8               	decf	wreg,f,c
 21759  004B62  E2FB               	bc	u11450
 21760                           
 21761                           ;ENC424J600.c: 147: return (char*) string;
 21762  004B64  0E62               	movlw	low ethernetController_getDeviceName@string
 21763  004B66  0100               	movlb	0	; () banked
 21764  004B68  6F60               	movwf	?_ethernetController_getDeviceName& (0+255),b
 21765  004B6A  0E00               	movlw	high ethernetController_getDeviceName@string
 21766  004B6C  6F61               	movwf	(?_ethernetController_getDeviceName+1)& (0+255),b
 21767  004B6E  0012               	return	
 21768  004B70                     __end_of_ethernetController_getDeviceName:
 21769                           	opt stack 0
 21770                           tblptru	equ	0xFF8
 21771                           tblptrh	equ	0xFF7
 21772                           tblptrl	equ	0xFF6
 21773                           tablat	equ	0xFF5
 21774                           prodh	equ	0xFF4
 21775                           prodl	equ	0xFF3
 21776                           intcon	equ	0xFF2
 21777                           intcon3	equ	0xFF0
 21778                           indf0	equ	0xFEF
 21779                           postinc0	equ	0xFEE
 21780                           plusw0	equ	0xFEB
 21781                           fsr0h	equ	0xFEA
 21782                           fsr0l	equ	0xFE9
 21783                           wreg	equ	0xFE8
 21784                           indf1	equ	0xFE7
 21785                           postinc1	equ	0xFE6
 21786                           postdec1	equ	0xFE5
 21787                           plusw1	equ	0xFE3
 21788                           fsr1h	equ	0xFE2
 21789                           fsr1l	equ	0xFE1
 21790                           indf2	equ	0xFDF
 21791                           postinc2	equ	0xFDE
 21792                           postdec2	equ	0xFDD
 21793                           plusw2	equ	0xFDB
 21794                           fsr2h	equ	0xFDA
 21795                           fsr2l	equ	0xFD9
 21796                           status	equ	0xFD8
 21797                           
 21798 ;; *************** function _ethernetController_getCurrentPacketCount *****************
 21799 ;; Defined at:
 21800 ;;		line 457 in file "src/enc424j600/ENC424J600.c"
 21801 ;; Parameters:    Size  Location     Type
 21802 ;;		None
 21803 ;; Auto vars:     Size  Location     Type
 21804 ;;		None
 21805 ;; Return value:  Size  Location     Type
 21806 ;;                  1    wreg      unsigned char 
 21807 ;; Registers used:
 21808 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21809 ;; Tracked objects:
 21810 ;;		On entry : 0/0
 21811 ;;		On exit  : 0/0
 21812 ;;		Unchanged: 0/0
 21813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21814 ;;      Params:         0       0       0       0       0       0       0       0       0
 21815 ;;      Locals:         0       0       0       0       0       0       0       0       0
 21816 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21817 ;;      Totals:         0       0       0       0       0       0       0       0       0
 21818 ;;Total ram usage:        0 bytes
 21819 ;; Hardware stack levels used:    1
 21820 ;; Hardware stack levels required when called:    8
 21821 ;; This function calls:
 21822 ;;		_enc424j600_getPacketCount
 21823 ;; This function is called by:
 21824 ;;		_main
 21825 ;; This function uses a non-reentrant model
 21826 ;;
 21827                           
 21828                           	psect	text99
 21829  004D0A                     __ptext99:
 21830                           	opt stack 0
 21831  004D0A                     _ethernetController_getCurrentPacketCount:
 21832                           	opt stack 22
 21833                           
 21834                           ;ENC424J600.c: 458: return enc424j600_getPacketCount();
 21835                           
 21836                           ; BSR set to: 0
 21837                           ;incstack = 0
 21838  004D0A  EC04  F026         	call	_enc424j600_getPacketCount	;wreg free
 21839  004D0E  0012               	return	
 21840  004D10                     __end_of_ethernetController_getCurrentPacketCount:
 21841                           	opt stack 0
 21842                           tblptru	equ	0xFF8
 21843                           tblptrh	equ	0xFF7
 21844                           tblptrl	equ	0xFF6
 21845                           tablat	equ	0xFF5
 21846                           prodh	equ	0xFF4
 21847                           prodl	equ	0xFF3
 21848                           intcon	equ	0xFF2
 21849                           intcon3	equ	0xFF0
 21850                           indf0	equ	0xFEF
 21851                           postinc0	equ	0xFEE
 21852                           plusw0	equ	0xFEB
 21853                           fsr0h	equ	0xFEA
 21854                           fsr0l	equ	0xFE9
 21855                           wreg	equ	0xFE8
 21856                           indf1	equ	0xFE7
 21857                           postinc1	equ	0xFE6
 21858                           postdec1	equ	0xFE5
 21859                           plusw1	equ	0xFE3
 21860                           fsr1h	equ	0xFE2
 21861                           fsr1l	equ	0xFE1
 21862                           indf2	equ	0xFDF
 21863                           postinc2	equ	0xFDE
 21864                           postdec2	equ	0xFDD
 21865                           plusw2	equ	0xFDB
 21866                           fsr2h	equ	0xFDA
 21867                           fsr2l	equ	0xFD9
 21868                           status	equ	0xFD8
 21869                           
 21870 ;; *************** function _enc424j600_getPacketCount *****************
 21871 ;; Defined at:
 21872 ;;		line 594 in file "src/enc424j600/ENC424J600.c"
 21873 ;; Parameters:    Size  Location     Type
 21874 ;;		None
 21875 ;; Auto vars:     Size  Location     Type
 21876 ;;  lowByte         1   14[BANK0 ] unsigned char 
 21877 ;; Return value:  Size  Location     Type
 21878 ;;                  1    wreg      unsigned char 
 21879 ;; Registers used:
 21880 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21881 ;; Tracked objects:
 21882 ;;		On entry : 0/0
 21883 ;;		On exit  : 0/0
 21884 ;;		Unchanged: 0/0
 21885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21886 ;;      Params:         0       0       0       0       0       0       0       0       0
 21887 ;;      Locals:         0       1       0       0       0       0       0       0       0
 21888 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21889 ;;      Totals:         0       1       0       0       0       0       0       0       0
 21890 ;;Total ram usage:        1 bytes
 21891 ;; Hardware stack levels used:    1
 21892 ;; Hardware stack levels required when called:    7
 21893 ;; This function calls:
 21894 ;;		_enc424j600_readControlRegisterUnbanked
 21895 ;; This function is called by:
 21896 ;;		_ethernetController_newPacketAvailable
 21897 ;;		_ethernetController_getCurrentPacketCount
 21898 ;; This function uses a non-reentrant model
 21899 ;;
 21900                           
 21901                           	psect	text100
 21902  004C08                     __ptext100:
 21903                           	opt stack 0
 21904  004C08                     _enc424j600_getPacketCount:
 21905                           	opt stack 21
 21906                           
 21907                           ;ENC424J600.c: 595: uint8_t lowByte = 0;
 21908                           
 21909                           ;incstack = 0
 21910  004C08  0E00               	movlw	0
 21911  004C0A  0100               	movlb	0	; () banked
 21912  004C0C  6F6E               	movwf	enc424j600_getPacketCount@lowByte& (0+255),b
 21913                           
 21914                           ; BSR set to: 0
 21915                           ;ENC424J600.c: 596: enc424j600_readControlRegisterUnbanked(0x1A + 0x00, &lowByte);
 21916  004C0E  0E6E               	movlw	low enc424j600_getPacketCount@lowByte
 21917  004C10  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 21918  004C12  0E00               	movlw	high enc424j600_getPacketCount@lowByte
 21919  004C14  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 21920  004C16  0E1A               	movlw	26
 21921  004C18  EC63  F024         	call	_enc424j600_readControlRegisterUnbanked
 21922                           
 21923                           ;ENC424J600.c: 597: return (uint32_t) lowByte;
 21924  004C1C  0100               	movlb	0	; () banked
 21925  004C1E  516E               	movf	enc424j600_getPacketCount@lowByte& (0+255),w,b
 21926  004C20  0012               	return	
 21927  004C22                     __end_of_enc424j600_getPacketCount:
 21928                           	opt stack 0
 21929                           tblptru	equ	0xFF8
 21930                           tblptrh	equ	0xFF7
 21931                           tblptrl	equ	0xFF6
 21932                           tablat	equ	0xFF5
 21933                           prodh	equ	0xFF4
 21934                           prodl	equ	0xFF3
 21935                           intcon	equ	0xFF2
 21936                           intcon3	equ	0xFF0
 21937                           indf0	equ	0xFEF
 21938                           postinc0	equ	0xFEE
 21939                           plusw0	equ	0xFEB
 21940                           fsr0h	equ	0xFEA
 21941                           fsr0l	equ	0xFE9
 21942                           wreg	equ	0xFE8
 21943                           indf1	equ	0xFE7
 21944                           postinc1	equ	0xFE6
 21945                           postdec1	equ	0xFE5
 21946                           plusw1	equ	0xFE3
 21947                           fsr1h	equ	0xFE2
 21948                           fsr1l	equ	0xFE1
 21949                           indf2	equ	0xFDF
 21950                           postinc2	equ	0xFDE
 21951                           postdec2	equ	0xFDD
 21952                           plusw2	equ	0xFDB
 21953                           fsr2h	equ	0xFDA
 21954                           fsr2l	equ	0xFD9
 21955                           status	equ	0xFD8
 21956                           
 21957 ;; *************** function _enc424j600_readControlRegisterUnbanked *****************
 21958 ;; Defined at:
 21959 ;;		line 527 in file "src/enc424j600/ENC424J600.c"
 21960 ;; Parameters:    Size  Location     Type
 21961 ;;  addr            1    wreg     unsigned char 
 21962 ;;  data            2   10[BANK0 ] PTR unsigned char 
 21963 ;;		 -> enc424j600_clearInterruptFlag@temp(1), enc424j600_getInterruptFlags@high(1), enc424j600_getInterruptFlags@low(1)
      +, enc424j600_disable@temp(1), 
 21964 ;;		 -> enc424j600_enable@temp(1), enc424j600_disableAutoMACInsertion@temp(1), enc424j600_enableAutoMACInsertion@temp(1)
      +, enc424j600_getPacketCount@lowByte(1), 
 21965 ;;		 -> enc424j600_readPHYRegister@highByte(1), enc424j600_readPHYRegister@lowByte(1), enc424j600_readPHYRegister@temp(1
      +), ethernetController_setLEDConfig@data(1), 
 21966 ;;		 -> ethernetController_updateLinkStatus@temp(1), mac.address(6), ethernetController_getMacAddress@mac(6), ethernetCo
      +ntroller_getSiliconRevision@data(1), 
 21967 ;;		 -> ethernetController_checkDeviceId@data(1), ethernetController_softReset@receivedData(2), 
 21968 ;; Auto vars:     Size  Location     Type
 21969 ;;  addr            1   12[BANK0 ] unsigned char 
 21970 ;;  opcode          1   13[BANK0 ] unsigned char 
 21971 ;; Return value:  Size  Location     Type
 21972 ;;                  1    wreg      void 
 21973 ;; Registers used:
 21974 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21975 ;; Tracked objects:
 21976 ;;		On entry : 0/0
 21977 ;;		On exit  : 0/0
 21978 ;;		Unchanged: 0/0
 21979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21980 ;;      Params:         0       2       0       0       0       0       0       0       0
 21981 ;;      Locals:         0       2       0       0       0       0       0       0       0
 21982 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21983 ;;      Totals:         0       4       0       0       0       0       0       0       0
 21984 ;;Total ram usage:        4 bytes
 21985 ;; Hardware stack levels used:    1
 21986 ;; Hardware stack levels required when called:    6
 21987 ;; This function calls:
 21988 ;;		_enc424j600_readSPI
 21989 ;;		_enc424j600_writeSPI
 21990 ;; This function is called by:
 21991 ;;		_ethernetController_softReset
 21992 ;;		_ethernetController_checkDeviceId
 21993 ;;		_ethernetController_getMacAddress
 21994 ;;		_ethernetController_updateLinkStatus
 21995 ;;		_ethernetController_setLEDConfig
 21996 ;;		_enc424j600_readPHYRegister
 21997 ;;		_enc424j600_getPacketCount
 21998 ;;		_enc424j600_enableAutoMACInsertion
 21999 ;;		_enc424j600_getInterruptFlags
 22000 ;;		_enc424j600_clearInterruptFlag
 22001 ;;		_ethernetController_getSiliconRevision
 22002 ;;		_enc424j600_disableAutoMACInsertion
 22003 ;;		_enc424j600_enable
 22004 ;;		_enc424j600_disable
 22005 ;; This function uses a non-reentrant model
 22006 ;;
 22007                           
 22008                           	psect	text101
 22009  0048C6                     __ptext101:
 22010                           	opt stack 0
 22011  0048C6                     _enc424j600_readControlRegisterUnbanked:
 22012                           	opt stack 19
 22013                           
 22014                           ; BSR set to: 0
 22015                           ;incstack = 0
 22016                           ;enc424j600_readControlRegisterUnbanked@addr stored from wreg
 22017  0048C6  0100               	movlb	0	; () banked
 22018  0048C8  6F6C               	movwf	enc424j600_readControlRegisterUnbanked@addr& (0+255),b
 22019                           
 22020                           ;ENC424J600.c: 528: uint8_t opcode = 0x20;
 22021  0048CA  0E20               	movlw	32
 22022  0048CC  0100               	movlb	0	; () banked
 22023  0048CE  6F6D               	movwf	enc424j600_readControlRegisterUnbanked@opcode& (0+255),b
 22024                           
 22025                           ; BSR set to: 0
 22026                           ;ENC424J600.c: 529: PORTBbits.RB4=0;
 22027  0048D0  9881               	bcf	3969,4,c	;volatile
 22028                           
 22029                           ; BSR set to: 0
 22030                           ;ENC424J600.c: 530: enc424j600_writeSPI(&opcode);
 22031  0048D2  0E6D               	movlw	low enc424j600_readControlRegisterUnbanked@opcode
 22032  0048D4  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 22033  0048D6  0E00               	movlw	high enc424j600_readControlRegisterUnbanked@opcode
 22034  0048D8  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 22035  0048DA  EC10  F021         	call	_enc424j600_writeSPI	;wreg free
 22036                           
 22037                           ;ENC424J600.c: 531: enc424j600_writeSPI(&addr);
 22038  0048DE  0E6C               	movlw	low enc424j600_readControlRegisterUnbanked@addr
 22039  0048E0  0100               	movlb	0	; () banked
 22040  0048E2  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 22041  0048E4  0E00               	movlw	high enc424j600_readControlRegisterUnbanked@addr
 22042  0048E6  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 22043  0048E8  EC10  F021         	call	_enc424j600_writeSPI	;wreg free
 22044                           
 22045                           ;ENC424J600.c: 532: enc424j600_readSPI(data);
 22046  0048EC  C06A  F060         	movff	enc424j600_readControlRegisterUnbanked@data,enc424j600_readSPI@data
 22047  0048F0  C06B  F061         	movff	enc424j600_readControlRegisterUnbanked@data+1,enc424j600_readSPI@data+1
 22048  0048F4  EC74  F020         	call	_enc424j600_readSPI	;wreg free
 22049                           
 22050                           ;ENC424J600.c: 533: PORTBbits.RB4=1;
 22051  0048F8  8881               	bsf	3969,4,c	;volatile
 22052  0048FA  0012               	return		;funcret
 22053  0048FC                     __end_of_enc424j600_readControlRegisterUnbanked:
 22054                           	opt stack 0
 22055                           tblptru	equ	0xFF8
 22056                           tblptrh	equ	0xFF7
 22057                           tblptrl	equ	0xFF6
 22058                           tablat	equ	0xFF5
 22059                           prodh	equ	0xFF4
 22060                           prodl	equ	0xFF3
 22061                           intcon	equ	0xFF2
 22062                           intcon3	equ	0xFF0
 22063                           indf0	equ	0xFEF
 22064                           postinc0	equ	0xFEE
 22065                           plusw0	equ	0xFEB
 22066                           fsr0h	equ	0xFEA
 22067                           fsr0l	equ	0xFE9
 22068                           wreg	equ	0xFE8
 22069                           indf1	equ	0xFE7
 22070                           postinc1	equ	0xFE6
 22071                           postdec1	equ	0xFE5
 22072                           plusw1	equ	0xFE3
 22073                           fsr1h	equ	0xFE2
 22074                           fsr1l	equ	0xFE1
 22075                           indf2	equ	0xFDF
 22076                           postinc2	equ	0xFDE
 22077                           postdec2	equ	0xFDD
 22078                           plusw2	equ	0xFDB
 22079                           fsr2h	equ	0xFDA
 22080                           fsr2l	equ	0xFD9
 22081                           status	equ	0xFD8
 22082                           
 22083 ;; *************** function _enc424j600_writeSPI *****************
 22084 ;; Defined at:
 22085 ;;		line 487 in file "src/enc424j600/ENC424J600.c"
 22086 ;; Parameters:    Size  Location     Type
 22087 ;;  data            2    0[BANK0 ] PTR unsigned char 
 22088 ;;		 -> enc424j600_clearInterruptFlag@temp(1), enc424j600_disable@temp(1), enc424j600_enable@temp(1), enc424j600_disable
      +AutoMACInsertion@temp(1), 
 22089 ;;		 -> enc424j600_enableAutoMACInsertion@temp(1), enc424j600_setRXTailPointer@highByte(1), enc424j600_setRXTailPointer@
      +lowByte(1), enc424j600_setRXBufferStartAddress@highByte(1), 
 22090 ;;		 -> enc424j600_setRXBufferStartAddress@lowByte(1), enc424j600_setERXDATAReadPointer@highByte(1), enc424j600_setERXDA
      +TAReadPointer@lowByte(1), enc424j600_setERXDATAReadPointer@opcode(1), 
 22091 ;;		 -> enc424j600_setGPDATAReadPointer@highByte(1), enc424j600_setGPDATAReadPointer@lowByte(1), enc424j600_setGPDATARea
      +dPointer@opcode(1), enc424j600_setGPDATAWritePointer@highByte(1), 
 22092 ;;		 -> enc424j600_setGPDATAWritePointer@lowByte(1), enc424j600_setGPDATAWritePointer@opcode(1), enc424j600_setTXStartAd
      +dress@highByte(1), enc424j600_setTXStartAddress@lowByte(1), 
 22093 ;;		 -> enc424j600_setTXLength@highByte(1), enc424j600_setTXLength@lowByte(1), enc424j600_readPHYRegister@temp(1), enc42
      +4j600_readPHYRegister@unusedBits(1), 
 22094 ;;		 -> enc424j600_readPHYRegister@PHYaddress(1), enc424j600_readControlRegisterUnbanked@addr(1), enc424j600_readControl
      +RegisterUnbanked@opcode(1), enc424j600_writeControlRegisterUnbanked@addr(1), 
 22095 ;;		 -> enc424j600_writeControlRegisterUnbanked@opcode(1), enc424j600_writeSingleByte@opcode(1), ethernetController_setL
      +EDConfig@data(1), ethernetController_streamFromRXBuffer@opcode(1), 
 22096 ;;		 -> ethernetController_updateNextPacketPointer@opcode(1), ethernetController_getRSV@opcode(1), ethernetController_ge
      +tEtherTypeField@opcode(1), ethernetController_getSourceMACAddress@opcode(1), 
 22097 ;;		 -> ethernetController_getDestinationMACAddress@opcode(1), ethernetController_writeEtherTypeFieldToBuffer@opcode(1),
      + ethernetController_writeEtherTypeFieldToBuffer@highByte(1), ethernetController_writeEtherTypeFieldToBuffer@lowByte(1), 
 22098 ;;		 -> ethernetController_writeDestinationMACAddress@opcode(1), ethernetController_writeDestinationMACAddress@data(6), 
      +ethernetController_streamToTransmitBuffer@data(1), ethernetController_streamToTransmitBuffer@opcode(1), 
 22099 ;;		 -> mac.address(6), ethernetController_setMacAddress@mac(6), ethernetController_softReset@dataToSend(2), 
 22100 ;; Auto vars:     Size  Location     Type
 22101 ;;  timeoutCount    4    6[BANK0 ] unsigned long 
 22102 ;; Return value:  Size  Location     Type
 22103 ;;                  1    wreg      void 
 22104 ;; Registers used:
 22105 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 22106 ;; Tracked objects:
 22107 ;;		On entry : 0/0
 22108 ;;		On exit  : 0/0
 22109 ;;		Unchanged: 0/0
 22110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22111 ;;      Params:         0       2       0       0       0       0       0       0       0
 22112 ;;      Locals:         0       4       0       0       0       0       0       0       0
 22113 ;;      Temps:          0       4       0       0       0       0       0       0       0
 22114 ;;      Totals:         0      10       0       0       0       0       0       0       0
 22115 ;;Total ram usage:       10 bytes
 22116 ;; Hardware stack levels used:    1
 22117 ;; Hardware stack levels required when called:    5
 22118 ;; This function calls:
 22119 ;;		_enc424j600_initSPI
 22120 ;; This function is called by:
 22121 ;;		_ethernetController_streamToTransmitBuffer
 22122 ;;		_ethernetController_writeDestinationMACAddress
 22123 ;;		_ethernetController_writeEtherTypeFieldToBuffer
 22124 ;;		_ethernetController_getSourceMACAddress
 22125 ;;		_ethernetController_getEtherTypeField
 22126 ;;		_ethernetController_getRSV
 22127 ;;		_ethernetController_updateNextPacketPointer
 22128 ;;		_ethernetController_streamFromRXBuffer
 22129 ;;		_enc424j600_writeSingleByte
 22130 ;;		_enc424j600_writeControlRegisterUnbanked
 22131 ;;		_enc424j600_readControlRegisterUnbanked
 22132 ;;		_enc424j600_setGPDATAWritePointer
 22133 ;;		_enc424j600_setERXDATAReadPointer
 22134 ;;		_ethernetController_getDestinationMACAddress
 22135 ;;		_enc424j600_setGPDATAReadPointer
 22136 ;; This function uses a non-reentrant model
 22137 ;;
 22138                           
 22139                           	psect	text102
 22140  004220                     __ptext102:
 22141                           	opt stack 0
 22142  004220                     _enc424j600_writeSPI:
 22143                           	opt stack 20
 22144                           
 22145                           ;ENC424J600.c: 489: uint32_t timeoutCounter = 0;
 22146                           
 22147                           ;incstack = 0
 22148  004220  0E00               	movlw	0
 22149  004222  0100               	movlb	0	; () banked
 22150  004224  6F66               	movwf	enc424j600_writeSPI@timeoutCounter& (0+255),b
 22151  004226  0E00               	movlw	0
 22152  004228  6F67               	movwf	(enc424j600_writeSPI@timeoutCounter+1)& (0+255),b
 22153  00422A  0E00               	movlw	0
 22154  00422C  6F68               	movwf	(enc424j600_writeSPI@timeoutCounter+2)& (0+255),b
 22155  00422E  0E00               	movlw	0
 22156  004230  6F69               	movwf	(enc424j600_writeSPI@timeoutCounter+3)& (0+255),b
 22157                           
 22158                           ; BSR set to: 0
 22159                           ;ENC424J600.c: 490: SSP1BUF = *data;
 22160  004232  C060  FFD9         	movff	enc424j600_writeSPI@data,fsr2l
 22161  004236  C061  FFDA         	movff	enc424j600_writeSPI@data+1,fsr2h
 22162  00423A  50DF               	movf	indf2,w,c
 22163  00423C  6EC9               	movwf	4041,c	;volatile
 22164  00423E                     
 22165                           ; BSR set to: 0
 22166                           
 22167                           ; BSR set to: 0
 22168  00423E  B0C7               	btfsc	4039,0,c	;volatile
 22169  004240  D015               	goto	u8020
 22170                           
 22171                           ; BSR set to: 0
 22172  004242  C066  F062         	movff	enc424j600_writeSPI@timeoutCounter,??_enc424j600_writeSPI
 22173  004246  C067  F063         	movff	enc424j600_writeSPI@timeoutCounter+1,??_enc424j600_writeSPI+1
 22174  00424A  C068  F064         	movff	enc424j600_writeSPI@timeoutCounter+2,??_enc424j600_writeSPI+2
 22175  00424E  C069  F065         	movff	enc424j600_writeSPI@timeoutCounter+3,??_enc424j600_writeSPI+3
 22176  004252  2B66               	incf	enc424j600_writeSPI@timeoutCounter& (0+255),f,b
 22177  004254  0E00               	movlw	0
 22178  004256  2367               	addwfc	(enc424j600_writeSPI@timeoutCounter+1)& (0+255),f,b
 22179  004258  2368               	addwfc	(enc424j600_writeSPI@timeoutCounter+2)& (0+255),f,b
 22180  00425A  2369               	addwfc	(enc424j600_writeSPI@timeoutCounter+3)& (0+255),f,b
 22181  00425C  5165               	movf	(??_enc424j600_writeSPI+3)& (0+255),w,b
 22182  00425E  1164               	iorwf	(??_enc424j600_writeSPI+2)& (0+255),w,b
 22183  004260  E105               	bnz	l7563
 22184  004262  2962               	incf	??_enc424j600_writeSPI& (0+255),w,b
 22185  004264  0E0F               	movlw	15
 22186  004266  5963               	subwfb	(??_enc424j600_writeSPI+1)& (0+255),w,b
 22187  004268  A0D8               	btfss	status,0,c
 22188  00426A  D7E9               	goto	l232
 22189  00426C                     u8020:
 22190  00426C                     l7563:
 22191                           
 22192                           ; BSR set to: 0
 22193                           ;ENC424J600.c: 492: if (timeoutCounter >= 0xfff) {
 22194  00426C  5169               	movf	(enc424j600_writeSPI@timeoutCounter+3)& (0+255),w,b
 22195  00426E  1168               	iorwf	(enc424j600_writeSPI@timeoutCounter+2)& (0+255),w,b
 22196  004270  E105               	bnz	u8030
 22197  004272  2966               	incf	enc424j600_writeSPI@timeoutCounter& (0+255),w,b
 22198  004274  0E0F               	movlw	15
 22199  004276  5967               	subwfb	(enc424j600_writeSPI@timeoutCounter+1)& (0+255),w,b
 22200  004278  A0D8               	btfss	status,0,c
 22201  00427A  0012               	return	
 22202  00427C                     u8030:
 22203                           
 22204                           ; BSR set to: 0
 22205                           ;ENC424J600.c: 493: PORTBbits.RB4=1;
 22206  00427C  8881               	bsf	3969,4,c	;volatile
 22207                           
 22208                           ; BSR set to: 0
 22209                           ;ENC424J600.c: 494: enc424j600_initSPI();
 22210  00427E  ECE9  F025         	call	_enc424j600_initSPI	;wreg free
 22211                           
 22212                           ;ENC424J600.c: 495: return;
 22213  004282  0012               	return	
 22214  004284                     __end_of_enc424j600_writeSPI:
 22215                           	opt stack 0
 22216                           tblptru	equ	0xFF8
 22217                           tblptrh	equ	0xFF7
 22218                           tblptrl	equ	0xFF6
 22219                           tablat	equ	0xFF5
 22220                           prodh	equ	0xFF4
 22221                           prodl	equ	0xFF3
 22222                           intcon	equ	0xFF2
 22223                           intcon3	equ	0xFF0
 22224                           indf0	equ	0xFEF
 22225                           postinc0	equ	0xFEE
 22226                           plusw0	equ	0xFEB
 22227                           fsr0h	equ	0xFEA
 22228                           fsr0l	equ	0xFE9
 22229                           wreg	equ	0xFE8
 22230                           indf1	equ	0xFE7
 22231                           postinc1	equ	0xFE6
 22232                           postdec1	equ	0xFE5
 22233                           plusw1	equ	0xFE3
 22234                           fsr1h	equ	0xFE2
 22235                           fsr1l	equ	0xFE1
 22236                           indf2	equ	0xFDF
 22237                           postinc2	equ	0xFDE
 22238                           postdec2	equ	0xFDD
 22239                           plusw2	equ	0xFDB
 22240                           fsr2h	equ	0xFDA
 22241                           fsr2l	equ	0xFD9
 22242                           status	equ	0xFD8
 22243                           
 22244 ;; *************** function _enc424j600_readSPI *****************
 22245 ;; Defined at:
 22246 ;;		line 499 in file "src/enc424j600/ENC424J600.c"
 22247 ;; Parameters:    Size  Location     Type
 22248 ;;  data            2    0[BANK0 ] PTR unsigned char 
 22249 ;;		 -> enc424j600_clearInterruptFlag@temp(1), enc424j600_getInterruptFlags@high(1), enc424j600_getInterruptFlags@low(1)
      +, enc424j600_disable@temp(1), 
 22250 ;;		 -> enc424j600_enable@temp(1), enc424j600_disableAutoMACInsertion@temp(1), enc424j600_enableAutoMACInsertion@temp(1)
      +, enc424j600_getPacketCount@lowByte(1), 
 22251 ;;		 -> enc424j600_readPHYRegister@highByte(1), enc424j600_readPHYRegister@lowByte(1), enc424j600_readPHYRegister@temp(1
      +), ethernetController_setLEDConfig@data(1), 
 22252 ;;		 -> ethernetController_updateLinkStatus@temp(1), ethernetController_streamFromRXBuffer@temp(1), ethernetController_u
      +pdateNextPacketPointer@newPointerH(1), ethernetController_updateNextPacketPointer@newPointerL(1), 
 22253 ;;		 -> ethernetController_getRSV@temp(6), ethernetController_getEtherTypeField@lowByte(1), ethernetController_getEtherT
      +ypeField@highByte(1), ethernetController_getSourceMACAddress@temp(1), 
 22254 ;;		 -> ethernetController_getDestinationMACAddress@temp(1), mac.address(6), ethernetController_getMacAddress@mac(6), et
      +hernetController_getSiliconRevision@data(1), 
 22255 ;;		 -> ethernetController_checkDeviceId@data(1), ethernetController_softReset@receivedData(2), 
 22256 ;; Auto vars:     Size  Location     Type
 22257 ;;  timeoutCount    4    6[BANK0 ] unsigned long 
 22258 ;; Return value:  Size  Location     Type
 22259 ;;                  1    wreg      void 
 22260 ;; Registers used:
 22261 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 22262 ;; Tracked objects:
 22263 ;;		On entry : 0/0
 22264 ;;		On exit  : 0/0
 22265 ;;		Unchanged: 0/0
 22266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22267 ;;      Params:         0       2       0       0       0       0       0       0       0
 22268 ;;      Locals:         0       4       0       0       0       0       0       0       0
 22269 ;;      Temps:          0       4       0       0       0       0       0       0       0
 22270 ;;      Totals:         0      10       0       0       0       0       0       0       0
 22271 ;;Total ram usage:       10 bytes
 22272 ;; Hardware stack levels used:    1
 22273 ;; Hardware stack levels required when called:    5
 22274 ;; This function calls:
 22275 ;;		_enc424j600_initSPI
 22276 ;; This function is called by:
 22277 ;;		_ethernetController_getSourceMACAddress
 22278 ;;		_ethernetController_getEtherTypeField
 22279 ;;		_ethernetController_getRSV
 22280 ;;		_ethernetController_updateNextPacketPointer
 22281 ;;		_ethernetController_streamFromRXBuffer
 22282 ;;		_enc424j600_readControlRegisterUnbanked
 22283 ;;		_ethernetController_getDestinationMACAddress
 22284 ;; This function uses a non-reentrant model
 22285 ;;
 22286                           
 22287                           	psect	text103
 22288  0040E8                     __ptext103:
 22289                           	opt stack 0
 22290  0040E8                     _enc424j600_readSPI:
 22291                           	opt stack 20
 22292                           
 22293                           ;ENC424J600.c: 501: uint32_t timeoutCounter = 0;
 22294                           
 22295                           ;incstack = 0
 22296  0040E8  0E00               	movlw	0
 22297  0040EA  0100               	movlb	0	; () banked
 22298  0040EC  6F66               	movwf	enc424j600_readSPI@timeoutCounter& (0+255),b
 22299  0040EE  0E00               	movlw	0
 22300  0040F0  6F67               	movwf	(enc424j600_readSPI@timeoutCounter+1)& (0+255),b
 22301  0040F2  0E00               	movlw	0
 22302  0040F4  6F68               	movwf	(enc424j600_readSPI@timeoutCounter+2)& (0+255),b
 22303  0040F6  0E00               	movlw	0
 22304  0040F8  6F69               	movwf	(enc424j600_readSPI@timeoutCounter+3)& (0+255),b
 22305                           
 22306                           ;ENC424J600.c: 502: SSP1BUF = 0x00;
 22307  0040FA  0E00               	movlw	0
 22308  0040FC  6EC9               	movwf	4041,c	;volatile
 22309  0040FE                     
 22310                           ; BSR set to: 0
 22311                           
 22312                           ; BSR set to: 0
 22313  0040FE  B0C7               	btfsc	4039,0,c	;volatile
 22314  004100  D015               	goto	u8470
 22315                           
 22316                           ; BSR set to: 0
 22317  004102  C066  F062         	movff	enc424j600_readSPI@timeoutCounter,??_enc424j600_readSPI
 22318  004106  C067  F063         	movff	enc424j600_readSPI@timeoutCounter+1,??_enc424j600_readSPI+1
 22319  00410A  C068  F064         	movff	enc424j600_readSPI@timeoutCounter+2,??_enc424j600_readSPI+2
 22320  00410E  C069  F065         	movff	enc424j600_readSPI@timeoutCounter+3,??_enc424j600_readSPI+3
 22321  004112  2B66               	incf	enc424j600_readSPI@timeoutCounter& (0+255),f,b
 22322  004114  0E00               	movlw	0
 22323  004116  2367               	addwfc	(enc424j600_readSPI@timeoutCounter+1)& (0+255),f,b
 22324  004118  2368               	addwfc	(enc424j600_readSPI@timeoutCounter+2)& (0+255),f,b
 22325  00411A  2369               	addwfc	(enc424j600_readSPI@timeoutCounter+3)& (0+255),f,b
 22326  00411C  5165               	movf	(??_enc424j600_readSPI+3)& (0+255),w,b
 22327  00411E  1164               	iorwf	(??_enc424j600_readSPI+2)& (0+255),w,b
 22328  004120  E105               	bnz	l7849
 22329  004122  2962               	incf	??_enc424j600_readSPI& (0+255),w,b
 22330  004124  0E0F               	movlw	15
 22331  004126  5963               	subwfb	(??_enc424j600_readSPI+1)& (0+255),w,b
 22332  004128  A0D8               	btfss	status,0,c
 22333  00412A  D7E9               	goto	l241
 22334  00412C                     u8470:
 22335  00412C                     l7849:
 22336                           
 22337                           ; BSR set to: 0
 22338                           ;ENC424J600.c: 504: if (timeoutCounter >= 0xfff) {
 22339  00412C  5169               	movf	(enc424j600_readSPI@timeoutCounter+3)& (0+255),w,b
 22340  00412E  1168               	iorwf	(enc424j600_readSPI@timeoutCounter+2)& (0+255),w,b
 22341  004130  E105               	bnz	u8480
 22342  004132  2966               	incf	enc424j600_readSPI@timeoutCounter& (0+255),w,b
 22343  004134  0E0F               	movlw	15
 22344  004136  5967               	subwfb	(enc424j600_readSPI@timeoutCounter+1)& (0+255),w,b
 22345  004138  A0D8               	btfss	status,0,c
 22346  00413A  D004               	goto	l245
 22347  00413C                     u8480:
 22348                           
 22349                           ; BSR set to: 0
 22350                           ;ENC424J600.c: 505: PORTBbits.RB4=1;
 22351  00413C  8881               	bsf	3969,4,c	;volatile
 22352                           
 22353                           ; BSR set to: 0
 22354                           ;ENC424J600.c: 506: enc424j600_initSPI();
 22355  00413E  ECE9  F025         	call	_enc424j600_initSPI	;wreg free
 22356                           
 22357                           ;ENC424J600.c: 507: return;
 22358  004142  0012               	return	
 22359  004144                     l245:
 22360                           
 22361                           ;ENC424J600.c: 508: }
 22362                           ;ENC424J600.c: 509: *data = SSP1BUF;
 22363  004144  C060  FFD9         	movff	enc424j600_readSPI@data,fsr2l
 22364  004148  C061  FFDA         	movff	enc424j600_readSPI@data+1,fsr2h
 22365  00414C  CFC9 FFDF          	movff	4041,indf2	;volatile
 22366  004150  0012               	return		;funcret
 22367  004152                     __end_of_enc424j600_readSPI:
 22368                           	opt stack 0
 22369                           tblptru	equ	0xFF8
 22370                           tblptrh	equ	0xFF7
 22371                           tblptrl	equ	0xFF6
 22372                           tablat	equ	0xFF5
 22373                           prodh	equ	0xFF4
 22374                           prodl	equ	0xFF3
 22375                           intcon	equ	0xFF2
 22376                           intcon3	equ	0xFF0
 22377                           indf0	equ	0xFEF
 22378                           postinc0	equ	0xFEE
 22379                           plusw0	equ	0xFEB
 22380                           fsr0h	equ	0xFEA
 22381                           fsr0l	equ	0xFE9
 22382                           wreg	equ	0xFE8
 22383                           indf1	equ	0xFE7
 22384                           postinc1	equ	0xFE6
 22385                           postdec1	equ	0xFE5
 22386                           plusw1	equ	0xFE3
 22387                           fsr1h	equ	0xFE2
 22388                           fsr1l	equ	0xFE1
 22389                           indf2	equ	0xFDF
 22390                           postinc2	equ	0xFDE
 22391                           postdec2	equ	0xFDD
 22392                           plusw2	equ	0xFDB
 22393                           fsr2h	equ	0xFDA
 22394                           fsr2l	equ	0xFD9
 22395                           status	equ	0xFD8
 22396                           
 22397 ;; *************** function _enc424j600_initSPI *****************
 22398 ;; Defined at:
 22399 ;;		line 469 in file "src/enc424j600/ENC424J600.c"
 22400 ;; Parameters:    Size  Location     Type
 22401 ;;		None
 22402 ;; Auto vars:     Size  Location     Type
 22403 ;;		None
 22404 ;; Return value:  Size  Location     Type
 22405 ;;                  1    wreg      void 
 22406 ;; Registers used:
 22407 ;;		None
 22408 ;; Tracked objects:
 22409 ;;		On entry : 0/0
 22410 ;;		On exit  : 0/0
 22411 ;;		Unchanged: 0/0
 22412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22413 ;;      Params:         0       0       0       0       0       0       0       0       0
 22414 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22415 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22416 ;;      Totals:         0       0       0       0       0       0       0       0       0
 22417 ;;Total ram usage:        0 bytes
 22418 ;; Hardware stack levels used:    1
 22419 ;; Hardware stack levels required when called:    4
 22420 ;; This function calls:
 22421 ;;		Nothing
 22422 ;; This function is called by:
 22423 ;;		_ethernetController_init
 22424 ;;		_enc424j600_writeSPI
 22425 ;;		_enc424j600_readSPI
 22426 ;; This function uses a non-reentrant model
 22427 ;;
 22428                           
 22429                           	psect	text104
 22430  004BD2                     __ptext104:
 22431                           	opt stack 0
 22432  004BD2                     _enc424j600_initSPI:
 22433                           	opt stack 20
 22434                           
 22435                           ;ENC424J600.c: 470: SSP1CON1bits.SSPEN = 0;
 22436                           
 22437                           ;incstack = 0
 22438  004BD2  9AC6               	bcf	4038,5,c	;volatile
 22439                           
 22440                           ;ENC424J600.c: 471: SSP1STATbits.CKE = 1;
 22441  004BD4  8CC7               	bsf	4039,6,c	;volatile
 22442                           
 22443                           ;ENC424J600.c: 473: TRISBbits.TRISB0 = 1;
 22444  004BD6  8093               	bsf	3987,0,c	;volatile
 22445                           
 22446                           ;ENC424J600.c: 474: ANSELBbits.ANSB0 = 0;
 22447  004BD8  010F               	movlb	15	; () banked
 22448  004BDA  915C               	bcf	92,0,b	;volatile
 22449                           
 22450                           ;ENC424J600.c: 475: TRISBbits.TRISB1 = 0;
 22451  004BDC  9293               	bcf	3987,1,c	;volatile
 22452                           
 22453                           ;ENC424J600.c: 476: ANSELBbits.ANSB1 = 0;
 22454  004BDE  935C               	bcf	92,1,b	;volatile
 22455                           
 22456                           ;ENC424J600.c: 477: TRISBbits.TRISB3 = 0;
 22457  004BE0  9693               	bcf	3987,3,c	;volatile
 22458                           
 22459                           ;ENC424J600.c: 478: ANSELBbits.ANSB3 = 0;
 22460  004BE2  975C               	bcf	92,3,b	;volatile
 22461                           
 22462                           ;ENC424J600.c: 479: TRISBbits.TRISB4 = 0;
 22463  004BE4  9893               	bcf	3987,4,c	;volatile
 22464                           
 22465                           ;ENC424J600.c: 480: ANSELBbits.ANSB4 = 0;
 22466  004BE6  995C               	bcf	92,4,b	;volatile
 22467                           
 22468                           ;ENC424J600.c: 481: PORTBbits.RB4=1;
 22469  004BE8  8881               	bsf	3969,4,c	;volatile
 22470                           
 22471                           ;ENC424J600.c: 482: SSP1CON1bits.SSPEN = 1;
 22472  004BEA  8AC6               	bsf	4038,5,c	;volatile
 22473                           
 22474                           ; BSR set to: 15
 22475  004BEC  0012               	return		;funcret
 22476  004BEE                     __end_of_enc424j600_initSPI:
 22477                           	opt stack 0
 22478                           tblptru	equ	0xFF8
 22479                           tblptrh	equ	0xFF7
 22480                           tblptrl	equ	0xFF6
 22481                           tablat	equ	0xFF5
 22482                           prodh	equ	0xFF4
 22483                           prodl	equ	0xFF3
 22484                           intcon	equ	0xFF2
 22485                           intcon3	equ	0xFF0
 22486                           indf0	equ	0xFEF
 22487                           postinc0	equ	0xFEE
 22488                           plusw0	equ	0xFEB
 22489                           fsr0h	equ	0xFEA
 22490                           fsr0l	equ	0xFE9
 22491                           wreg	equ	0xFE8
 22492                           indf1	equ	0xFE7
 22493                           postinc1	equ	0xFE6
 22494                           postdec1	equ	0xFE5
 22495                           plusw1	equ	0xFE3
 22496                           fsr1h	equ	0xFE2
 22497                           fsr1l	equ	0xFE1
 22498                           indf2	equ	0xFDF
 22499                           postinc2	equ	0xFDE
 22500                           postdec2	equ	0xFDD
 22501                           plusw2	equ	0xFDB
 22502                           fsr2h	equ	0xFDA
 22503                           fsr2l	equ	0xFD9
 22504                           status	equ	0xFD8
 22505                           
 22506 ;; *************** function _UARTInit *****************
 22507 ;; Defined at:
 22508 ;;		line 26 in file "src/system/uart.c"
 22509 ;; Parameters:    Size  Location     Type
 22510 ;;		None
 22511 ;; Auto vars:     Size  Location     Type
 22512 ;;		None
 22513 ;; Return value:  Size  Location     Type
 22514 ;;                  1    wreg      void 
 22515 ;; Registers used:
 22516 ;;		wreg, status,2
 22517 ;; Tracked objects:
 22518 ;;		On entry : 0/0
 22519 ;;		On exit  : 0/0
 22520 ;;		Unchanged: 0/0
 22521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22522 ;;      Params:         0       0       0       0       0       0       0       0       0
 22523 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22524 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22525 ;;      Totals:         0       0       0       0       0       0       0       0       0
 22526 ;;Total ram usage:        0 bytes
 22527 ;; Hardware stack levels used:    1
 22528 ;; Hardware stack levels required when called:    4
 22529 ;; This function calls:
 22530 ;;		Nothing
 22531 ;; This function is called by:
 22532 ;;		_main
 22533 ;; This function uses a non-reentrant model
 22534 ;;
 22535                           
 22536                           	psect	text105
 22537  004C96                     __ptext105:
 22538                           	opt stack 0
 22539  004C96                     _UARTInit:
 22540                           	opt stack 26
 22541                           
 22542                           ;uart.c: 27: TXSTA1bits.TXEN = 1;
 22543                           
 22544                           ; BSR set to: 15
 22545                           ;incstack = 0
 22546  004C96  8AAC               	bsf	4012,5,c	;volatile
 22547                           
 22548                           ;uart.c: 28: TXSTA1bits.SYNC = 0;
 22549  004C98  98AC               	bcf	4012,4,c	;volatile
 22550                           
 22551                           ;uart.c: 29: RCSTA1bits.SPEN = 1;
 22552  004C9A  8EAB               	bsf	4011,7,c	;volatile
 22553                           
 22554                           ;uart.c: 30: TXSTA1bits.TX9 = 1;
 22555  004C9C  8CAC               	bsf	4012,6,c	;volatile
 22556                           
 22557                           ;uart.c: 31: TXSTA1bits.TX9D = 1;
 22558  004C9E  80AC               	bsf	4012,0,c	;volatile
 22559                           
 22560                           ;uart.c: 32: SPBRG = 3;
 22561  004CA0  0E03               	movlw	3
 22562  004CA2  6EAF               	movwf	4015,c	;volatile
 22563  004CA4  0012               	return		;funcret
 22564  004CA6                     __end_of_UARTInit:
 22565                           	opt stack 0
 22566                           tblptru	equ	0xFF8
 22567                           tblptrh	equ	0xFF7
 22568                           tblptrl	equ	0xFF6
 22569                           tablat	equ	0xFF5
 22570                           prodh	equ	0xFF4
 22571                           prodl	equ	0xFF3
 22572                           intcon	equ	0xFF2
 22573                           intcon3	equ	0xFF0
 22574                           indf0	equ	0xFEF
 22575                           postinc0	equ	0xFEE
 22576                           plusw0	equ	0xFEB
 22577                           fsr0h	equ	0xFEA
 22578                           fsr0l	equ	0xFE9
 22579                           wreg	equ	0xFE8
 22580                           indf1	equ	0xFE7
 22581                           postinc1	equ	0xFE6
 22582                           postdec1	equ	0xFE5
 22583                           plusw1	equ	0xFE3
 22584                           fsr1h	equ	0xFE2
 22585                           fsr1l	equ	0xFE1
 22586                           indf2	equ	0xFDF
 22587                           postinc2	equ	0xFDE
 22588                           postdec2	equ	0xFDD
 22589                           plusw2	equ	0xFDB
 22590                           fsr2h	equ	0xFDA
 22591                           fsr2l	equ	0xFD9
 22592                           status	equ	0xFD8
 22593                           
 22594 ;; *************** function _ISR *****************
 22595 ;; Defined at:
 22596 ;;		line 269 in file "src/system/main.c"
 22597 ;; Parameters:    Size  Location     Type
 22598 ;;		None
 22599 ;; Auto vars:     Size  Location     Type
 22600 ;;		None
 22601 ;; Return value:  Size  Location     Type
 22602 ;;                  1    wreg      void 
 22603 ;; Registers used:
 22604 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22605 ;; Tracked objects:
 22606 ;;		On entry : 0/0
 22607 ;;		On exit  : 0/0
 22608 ;;		Unchanged: 0/0
 22609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22610 ;;      Params:         0       0       0       0       0       0       0       0       0
 22611 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22612 ;;      Temps:         19       0       0       0       0       0       0       0       0
 22613 ;;      Totals:        19       0       0       0       0       0       0       0       0
 22614 ;;Total ram usage:       19 bytes
 22615 ;; Hardware stack levels used:    1
 22616 ;; Hardware stack levels required when called:    3
 22617 ;; This function calls:
 22618 ;;		_buttonHandler
 22619 ;;		_sevenSegmentUpdate
 22620 ;;		_updateTime
 22621 ;; This function is called by:
 22622 ;;		Interrupt level 2
 22623 ;; This function uses a non-reentrant model
 22624 ;;
 22625                           
 22626                           	psect	intcode
 22627  000008                     __pintcode:
 22628                           	opt stack 0
 22629  000008                     _ISR:
 22630                           	opt stack 17
 22631                           
 22632                           ;incstack = 0
 22633  000008  8250               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 22634  00000A  CFFA F017          	movff	pclath,??_ISR+1
 22635  00000E  CFFB F018          	movff	pclatu,??_ISR+2
 22636  000012  CFE9 F019          	movff	fsr0l,??_ISR+3
 22637  000016  CFEA F01A          	movff	fsr0h,??_ISR+4
 22638  00001A  CFE1 F01B          	movff	fsr1l,??_ISR+5
 22639  00001E  CFE2 F01C          	movff	fsr1h,??_ISR+6
 22640  000022  CFD9 F01D          	movff	fsr2l,??_ISR+7
 22641  000026  CFDA F01E          	movff	fsr2h,??_ISR+8
 22642  00002A  CFF3 F01F          	movff	prodl,??_ISR+9
 22643  00002E  CFF4 F020          	movff	prodh,??_ISR+10
 22644  000032  CFF6 F021          	movff	tblptrl,??_ISR+11
 22645  000036  CFF7 F022          	movff	tblptrh,??_ISR+12
 22646  00003A  CFF8 F023          	movff	tblptru,??_ISR+13
 22647  00003E  CFF5 F024          	movff	tablat,??_ISR+14
 22648  000042  C050  F025         	movff	btemp,??_ISR+15
 22649  000046  C051  F026         	movff	btemp+1,??_ISR+16
 22650  00004A  C052  F027         	movff	btemp+2,??_ISR+17
 22651  00004E  C053  F028         	movff	btemp+3,??_ISR+18
 22652                           
 22653                           ;main.c: 271: if (PIR1bits.CCP1IF) {
 22654  000052  A49E               	btfss	3998,2,c	;volatile
 22655  000054  D012               	goto	i2l690
 22656                           
 22657                           ;main.c: 272: PIR1bits.CCP1IF = 0;
 22658  000056  949E               	bcf	3998,2,c	;volatile
 22659                           
 22660                           ;main.c: 273: PORTBbits.RB6 = ~PORTBbits.RB6;
 22661  000058  AC81               	btfss	3969,6,c	;volatile
 22662  00005A  D002               	goto	i2u794_40
 22663  00005C  0E01               	movlw	1
 22664  00005E  D001               	goto	i2u794_46
 22665  000060                     i2u794_40:
 22666  000060  0E00               	movlw	0
 22667  000062                     i2u794_46:
 22668  000062  0AFF               	xorlw	255
 22669  000064  6E16               	movwf	??_ISR& (0+255),c
 22670  000066  3A16               	swapf	??_ISR,f,c
 22671  000068  4616               	rlncf	??_ISR,f,c
 22672  00006A  4616               	rlncf	??_ISR,f,c
 22673  00006C  5081               	movf	3969,w,c	;volatile
 22674  00006E  1816               	xorwf	??_ISR,w,c
 22675  000070  0BBF               	andlw	-65
 22676  000072  1816               	xorwf	??_ISR,w,c
 22677  000074  6E81               	movwf	3969,c	;volatile
 22678                           
 22679                           ;main.c: 274: updateTime();
 22680  000076  EC68  F026         	call	_updateTime	;wreg free
 22681  00007A                     i2l690:
 22682                           
 22683                           ;main.c: 275: }
 22684                           ;main.c: 277: if (INTCONbits.TMR0IF) {
 22685  00007A  A4F2               	btfss	intcon,2,c	;volatile
 22686  00007C  D00D               	goto	i2l691
 22687                           
 22688                           ;main.c: 278: INTCONbits.TMR0IF = 0;
 22689  00007E  94F2               	bcf	intcon,2,c	;volatile
 22690                           
 22691                           ;main.c: 279: sevenSegmentUpdate(numberToDisplay);
 22692  000080  C031  F00F         	movff	_numberToDisplay,sevenSegmentUpdate@numberToDisplay	;volatile
 22693  000084  C032  F010         	movff	_numberToDisplay+1,sevenSegmentUpdate@numberToDisplay+1	;volatile
 22694  000088  ECFB  F01A         	call	_sevenSegmentUpdate	;wreg free
 22695                           
 22696                           ;main.c: 280: buttonHandler(&buttonState);
 22697  00008C  0EF0               	movlw	low _buttonState
 22698  00008E  6E01               	movwf	buttonHandler@state,c
 22699  000090  0E01               	movlw	high _buttonState
 22700  000092  6E02               	movwf	buttonHandler@state+1,c
 22701  000094  EC65  F01C         	call	_buttonHandler	;wreg free
 22702  000098                     i2l691:
 22703                           
 22704                           ;main.c: 283: }
 22705                           ;main.c: 285: if (INTCON3bits.INT2IF) {
 22706  000098  B2F0               	btfsc	intcon3,1,c	;volatile
 22707                           
 22708                           ;main.c: 286: INTCON3bits.INT2IF = 0;
 22709  00009A  92F0               	bcf	intcon3,1,c	;volatile
 22710                           
 22711                           ;main.c: 293: }
 22712                           ;main.c: 294: if (RCIF) {
 22713  00009C  C028  F053         	movff	??_ISR+18,btemp+3
 22714  0000A0  C027  F052         	movff	??_ISR+17,btemp+2
 22715  0000A4  C026  F051         	movff	??_ISR+16,btemp+1
 22716  0000A8  C025  F050         	movff	??_ISR+15,btemp
 22717  0000AC  C024  FFF5         	movff	??_ISR+14,tablat
 22718  0000B0  C023  FFF8         	movff	??_ISR+13,tblptru
 22719  0000B4  C022  FFF7         	movff	??_ISR+12,tblptrh
 22720  0000B8  C021  FFF6         	movff	??_ISR+11,tblptrl
 22721  0000BC  C020  FFF4         	movff	??_ISR+10,prodh
 22722  0000C0  C01F  FFF3         	movff	??_ISR+9,prodl
 22723  0000C4  C01E  FFDA         	movff	??_ISR+8,fsr2h
 22724  0000C8  C01D  FFD9         	movff	??_ISR+7,fsr2l
 22725  0000CC  C01C  FFE2         	movff	??_ISR+6,fsr1h
 22726  0000D0  C01B  FFE1         	movff	??_ISR+5,fsr1l
 22727  0000D4  C01A  FFEA         	movff	??_ISR+4,fsr0h
 22728  0000D8  C019  FFE9         	movff	??_ISR+3,fsr0l
 22729  0000DC  C018  FFFB         	movff	??_ISR+2,pclatu
 22730  0000E0  C017  FFFA         	movff	??_ISR+1,pclath
 22731  0000E4  9250               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 22732  0000E6  0011               	retfie		f
 22733  0000E8                     __end_of_ISR:
 22734                           	opt stack 0
 22735                           pclatu	equ	0xFFB
 22736                           pclath	equ	0xFFA
 22737                           tblptru	equ	0xFF8
 22738                           tblptrh	equ	0xFF7
 22739                           tblptrl	equ	0xFF6
 22740                           tablat	equ	0xFF5
 22741                           prodh	equ	0xFF4
 22742                           prodl	equ	0xFF3
 22743                           intcon	equ	0xFF2
 22744                           intcon3	equ	0xFF0
 22745                           indf0	equ	0xFEF
 22746                           postinc0	equ	0xFEE
 22747                           plusw0	equ	0xFEB
 22748                           fsr0h	equ	0xFEA
 22749                           fsr0l	equ	0xFE9
 22750                           wreg	equ	0xFE8
 22751                           indf1	equ	0xFE7
 22752                           postinc1	equ	0xFE6
 22753                           postdec1	equ	0xFE5
 22754                           plusw1	equ	0xFE3
 22755                           fsr1h	equ	0xFE2
 22756                           fsr1l	equ	0xFE1
 22757                           indf2	equ	0xFDF
 22758                           postinc2	equ	0xFDE
 22759                           postdec2	equ	0xFDD
 22760                           plusw2	equ	0xFDB
 22761                           fsr2h	equ	0xFDA
 22762                           fsr2l	equ	0xFD9
 22763                           status	equ	0xFD8
 22764                           
 22765 ;; *************** function _updateTime *****************
 22766 ;; Defined at:
 22767 ;;		line 30 in file "src/stack/time.c"
 22768 ;; Parameters:    Size  Location     Type
 22769 ;;		None
 22770 ;; Auto vars:     Size  Location     Type
 22771 ;;		None
 22772 ;; Return value:  Size  Location     Type
 22773 ;;                  1    wreg      void 
 22774 ;; Registers used:
 22775 ;;		wreg, status,2, status,0
 22776 ;; Tracked objects:
 22777 ;;		On entry : 0/0
 22778 ;;		On exit  : 0/0
 22779 ;;		Unchanged: 0/0
 22780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22781 ;;      Params:         0       0       0       0       0       0       0       0       0
 22782 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22783 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22784 ;;      Totals:         0       0       0       0       0       0       0       0       0
 22785 ;;Total ram usage:        0 bytes
 22786 ;; Hardware stack levels used:    1
 22787 ;; This function calls:
 22788 ;;		Nothing
 22789 ;; This function is called by:
 22790 ;;		_ISR
 22791 ;; This function uses a non-reentrant model
 22792 ;;
 22793                           
 22794                           	psect	text107
 22795  004CD0                     __ptext107:
 22796                           	opt stack 0
 22797  004CD0                     _updateTime:
 22798                           	opt stack 19
 22799                           
 22800                           ;time.c: 31: time++;
 22801                           
 22802                           ;incstack = 0
 22803  004CD0  0E01               	movlw	1
 22804  004CD2  2629               	addwf	_time,f,c	;volatile
 22805  004CD4  0E00               	movlw	0
 22806  004CD6  222A               	addwfc	_time+1,f,c	;volatile
 22807  004CD8  222B               	addwfc	_time+2,f,c	;volatile
 22808  004CDA  222C               	addwfc	_time+3,f,c	;volatile
 22809  004CDC  0012               	return		;funcret
 22810  004CDE                     __end_of_updateTime:
 22811                           	opt stack 0
 22812                           pclatu	equ	0xFFB
 22813                           pclath	equ	0xFFA
 22814                           tblptru	equ	0xFF8
 22815                           tblptrh	equ	0xFF7
 22816                           tblptrl	equ	0xFF6
 22817                           tablat	equ	0xFF5
 22818                           prodh	equ	0xFF4
 22819                           prodl	equ	0xFF3
 22820                           intcon	equ	0xFF2
 22821                           intcon3	equ	0xFF0
 22822                           indf0	equ	0xFEF
 22823                           postinc0	equ	0xFEE
 22824                           plusw0	equ	0xFEB
 22825                           fsr0h	equ	0xFEA
 22826                           fsr0l	equ	0xFE9
 22827                           wreg	equ	0xFE8
 22828                           indf1	equ	0xFE7
 22829                           postinc1	equ	0xFE6
 22830                           postdec1	equ	0xFE5
 22831                           plusw1	equ	0xFE3
 22832                           fsr1h	equ	0xFE2
 22833                           fsr1l	equ	0xFE1
 22834                           indf2	equ	0xFDF
 22835                           postinc2	equ	0xFDE
 22836                           postdec2	equ	0xFDD
 22837                           plusw2	equ	0xFDB
 22838                           fsr2h	equ	0xFDA
 22839                           fsr2l	equ	0xFD9
 22840                           status	equ	0xFD8
 22841                           
 22842 ;; *************** function _sevenSegmentUpdate *****************
 22843 ;; Defined at:
 22844 ;;		line 41 in file "src/system/sevenseg.c"
 22845 ;; Parameters:    Size  Location     Type
 22846 ;;  numberToDisp    2   14[COMRAM] unsigned int 
 22847 ;; Auto vars:     Size  Location     Type
 22848 ;;  i               1   20[COMRAM] unsigned char 
 22849 ;; Return value:  Size  Location     Type
 22850 ;;                  1    wreg      void 
 22851 ;; Registers used:
 22852 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22853 ;; Tracked objects:
 22854 ;;		On entry : 0/0
 22855 ;;		On exit  : 0/0
 22856 ;;		Unchanged: 0/0
 22857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22858 ;;      Params:         2       0       0       0       0       0       0       0       0
 22859 ;;      Locals:         3       0       0       0       0       0       0       0       0
 22860 ;;      Temps:          2       0       0       0       0       0       0       0       0
 22861 ;;      Totals:         7       0       0       0       0       0       0       0       0
 22862 ;;Total ram usage:        7 bytes
 22863 ;; Hardware stack levels used:    1
 22864 ;; Hardware stack levels required when called:    2
 22865 ;; This function calls:
 22866 ;;		_parseNumber
 22867 ;; This function is called by:
 22868 ;;		_ISR
 22869 ;; This function uses a non-reentrant model
 22870 ;;
 22871                           
 22872                           	psect	text108
 22873  0035F6                     __ptext108:
 22874                           	opt stack 0
 22875  0035F6                     _sevenSegmentUpdate:
 22876                           	opt stack 17
 22877                           
 22878                           ;sevenseg.c: 43: uint8_t static digitPointer = 0;
 22879                           ;sevenseg.c: 44: uint8_t static digitsToDisplay[3] = {0, 0, 0};
 22880                           ;sevenseg.c: 45: PORTC &= ~(unsigned)(1 << digitPointer);
 22881                           
 22882                           ;incstack = 0
 22883  0035F6  C045  F011         	movff	sevenSegmentUpdate@digitPointer,??_sevenSegmentUpdate
 22884  0035FA  0E01               	movlw	1
 22885  0035FC  6E12               	movwf	(??_sevenSegmentUpdate+1)& (0+255),c
 22886  0035FE  2A11               	incf	??_sevenSegmentUpdate,f,c
 22887  003600  D002               	goto	i2u768_44
 22888  003602                     i2u768_45:
 22889  003602  90D8               	bcf	status,0,c
 22890  003604  3612               	rlcf	??_sevenSegmentUpdate+1,f,c
 22891  003606                     i2u768_44:
 22892  003606  2E11               	decfsz	??_sevenSegmentUpdate,f,c
 22893  003608  D7FC               	goto	i2u768_45
 22894  00360A  5012               	movf	??_sevenSegmentUpdate+1,w,c
 22895  00360C  0AFF               	xorlw	255
 22896  00360E  1682               	andwf	3970,f,c	;volatile
 22897                           
 22898                           ;sevenseg.c: 46: PORTA = 0x00;
 22899  003610  0E00               	movlw	0
 22900  003612  6E80               	movwf	3968,c	;volatile
 22901                           
 22902                           ;sevenseg.c: 47: digitPointer = (unsigned)((digitPointer >= 2) ? 0 : digitPointer + 1);
 22903  003614  0E02               	movlw	2
 22904  003616  6045               	cpfslt	sevenSegmentUpdate@digitPointer,c
 22905  003618  D007               	goto	i2l723
 22906  00361A  0E01               	movlw	1
 22907  00361C  2445               	addwf	sevenSegmentUpdate@digitPointer,w,c
 22908  00361E  6E13               	movwf	_sevenSegmentUpdate$2458,c
 22909  003620  6A14               	clrf	_sevenSegmentUpdate$2458+1,c
 22910  003622  0E00               	movlw	0
 22911  003624  2214               	addwfc	_sevenSegmentUpdate$2458+1,f,c
 22912  003626  D004               	goto	i2l725
 22913  003628                     i2l723:
 22914  003628  0E00               	movlw	0
 22915  00362A  6E14               	movwf	_sevenSegmentUpdate$2458+1,c
 22916  00362C  0E00               	movlw	0
 22917  00362E  6E13               	movwf	_sevenSegmentUpdate$2458,c
 22918  003630                     i2l725:
 22919  003630  C013  F045         	movff	_sevenSegmentUpdate$2458,sevenSegmentUpdate@digitPointer
 22920                           
 22921                           ;sevenseg.c: 49: if (numberToDisplay > 999) {
 22922  003634  0EE8               	movlw	232
 22923  003636  5C0F               	subwf	sevenSegmentUpdate@numberToDisplay,w,c
 22924  003638  0E03               	movlw	3
 22925  00363A  5810               	subwfb	sevenSegmentUpdate@numberToDisplay+1,w,c
 22926  00363C  B0D8               	btfsc	status,0,c
 22927  00363E  0012               	return	
 22928                           
 22929                           ;sevenseg.c: 51: }
 22930                           ;sevenseg.c: 52: for (uint8_t i = 0; i < 3; i++) {
 22931                           
 22932                           ;sevenseg.c: 50: return;
 22933  003640  0E00               	movlw	0
 22934  003642  6E15               	movwf	sevenSegmentUpdate@i,c
 22935  003644                     i2l7075:
 22936  003644  0E02               	movlw	2
 22937  003646  6415               	cpfsgt	sevenSegmentUpdate@i,c
 22938  003648  D001               	goto	i2l728
 22939  00364A  D013               	goto	i2u772_40
 22940  00364C                     i2l728:
 22941                           
 22942                           ;sevenseg.c: 53: digitsToDisplay[i] = parseNumber(numberToDisplay, i);
 22943  00364C  5015               	movf	sevenSegmentUpdate@i,w,c
 22944  00364E  0D01               	mullw	1
 22945  003650  0E39               	movlw	low sevenSegmentUpdate@digitsToDisplay
 22946  003652  24F3               	addwf	prodl,w,c
 22947  003654  6ED9               	movwf	fsr2l,c
 22948  003656  0E00               	movlw	high sevenSegmentUpdate@digitsToDisplay
 22949  003658  20F4               	addwfc	prodh,w,c
 22950  00365A  6EDA               	movwf	fsr2h,c
 22951  00365C  C00F  F008         	movff	sevenSegmentUpdate@numberToDisplay,parseNumber@numberToDisplay
 22952  003660  C010  F009         	movff	sevenSegmentUpdate@numberToDisplay+1,parseNumber@numberToDisplay+1
 22953  003664  C015  F00A         	movff	sevenSegmentUpdate@i,parseNumber@digit
 22954  003668  EC9F  F01E         	call	_parseNumber	;wreg free
 22955  00366C  6EDF               	movwf	indf2,c
 22956  00366E  2A15               	incf	sevenSegmentUpdate@i,f,c
 22957  003670  D7E9               	goto	i2l7075
 22958  003672                     i2u772_40:
 22959                           
 22960                           ;sevenseg.c: 54: }
 22961                           ;sevenseg.c: 55: PORTC |= (unsigned)(1 << digitPointer);
 22962  003672  C045  F011         	movff	sevenSegmentUpdate@digitPointer,??_sevenSegmentUpdate
 22963  003676  0E01               	movlw	1
 22964  003678  6E12               	movwf	(??_sevenSegmentUpdate+1)& (0+255),c
 22965  00367A  2A11               	incf	??_sevenSegmentUpdate,f,c
 22966  00367C  D002               	goto	i2u773_44
 22967  00367E                     i2u773_45:
 22968  00367E  90D8               	bcf	status,0,c
 22969  003680  3612               	rlcf	??_sevenSegmentUpdate+1,f,c
 22970  003682                     i2u773_44:
 22971  003682  2E11               	decfsz	??_sevenSegmentUpdate,f,c
 22972  003684  D7FC               	goto	i2u773_45
 22973  003686  5012               	movf	??_sevenSegmentUpdate+1,w,c
 22974  003688  1282               	iorwf	3970,f,c	;volatile
 22975                           
 22976                           ;sevenseg.c: 56: PORTA = (sevenSegCharacters[digitsToDisplay[digitPointer]]);
 22977  00368A  5045               	movf	sevenSegmentUpdate@digitPointer,w,c
 22978  00368C  0D01               	mullw	1
 22979  00368E  0E39               	movlw	low sevenSegmentUpdate@digitsToDisplay
 22980  003690  24F3               	addwf	prodl,w,c
 22981  003692  6ED9               	movwf	fsr2l,c
 22982  003694  0E00               	movlw	high sevenSegmentUpdate@digitsToDisplay
 22983  003696  20F4               	addwfc	prodh,w,c
 22984  003698  6EDA               	movwf	fsr2h,c
 22985  00369A  50DF               	movf	indf2,w,c
 22986  00369C  6E11               	movwf	??_sevenSegmentUpdate& (0+255),c
 22987  00369E  5011               	movf	??_sevenSegmentUpdate,w,c
 22988  0036A0  0D01               	mullw	1
 22989  0036A2  0ED7               	movlw	low _sevenSegCharacters
 22990  0036A4  24F3               	addwf	prodl,w,c
 22991  0036A6  6ED9               	movwf	fsr2l,c
 22992  0036A8  0E02               	movlw	high _sevenSegCharacters
 22993  0036AA  20F4               	addwfc	prodh,w,c
 22994  0036AC  6EDA               	movwf	fsr2h,c
 22995  0036AE  50DF               	movf	indf2,w,c
 22996  0036B0  6E80               	movwf	3968,c	;volatile
 22997  0036B2  0012               	return		;funcret
 22998  0036B4                     __end_of_sevenSegmentUpdate:
 22999                           	opt stack 0
 23000                           pclatu	equ	0xFFB
 23001                           pclath	equ	0xFFA
 23002                           tblptru	equ	0xFF8
 23003                           tblptrh	equ	0xFF7
 23004                           tblptrl	equ	0xFF6
 23005                           tablat	equ	0xFF5
 23006                           prodh	equ	0xFF4
 23007                           prodl	equ	0xFF3
 23008                           intcon	equ	0xFF2
 23009                           intcon3	equ	0xFF0
 23010                           indf0	equ	0xFEF
 23011                           postinc0	equ	0xFEE
 23012                           plusw0	equ	0xFEB
 23013                           fsr0h	equ	0xFEA
 23014                           fsr0l	equ	0xFE9
 23015                           wreg	equ	0xFE8
 23016                           indf1	equ	0xFE7
 23017                           postinc1	equ	0xFE6
 23018                           postdec1	equ	0xFE5
 23019                           plusw1	equ	0xFE3
 23020                           fsr1h	equ	0xFE2
 23021                           fsr1l	equ	0xFE1
 23022                           indf2	equ	0xFDF
 23023                           postinc2	equ	0xFDE
 23024                           postdec2	equ	0xFDD
 23025                           plusw2	equ	0xFDB
 23026                           fsr2h	equ	0xFDA
 23027                           fsr2l	equ	0xFD9
 23028                           status	equ	0xFD8
 23029                           
 23030 ;; *************** function _parseNumber *****************
 23031 ;; Defined at:
 23032 ;;		line 59 in file "src/system/sevenseg.c"
 23033 ;; Parameters:    Size  Location     Type
 23034 ;;  numberToDisp    2    7[COMRAM] unsigned int 
 23035 ;;  digit           1    9[COMRAM] unsigned char 
 23036 ;; Auto vars:     Size  Location     Type
 23037 ;;  hundreds        1   13[COMRAM] unsigned char 
 23038 ;;  tens            1   12[COMRAM] unsigned char 
 23039 ;;  ones            1   11[COMRAM] unsigned char 
 23040 ;; Return value:  Size  Location     Type
 23041 ;;                  1    wreg      unsigned char 
 23042 ;; Registers used:
 23043 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 23044 ;; Tracked objects:
 23045 ;;		On entry : 0/0
 23046 ;;		On exit  : 0/0
 23047 ;;		Unchanged: 0/0
 23048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23049 ;;      Params:         3       0       0       0       0       0       0       0       0
 23050 ;;      Locals:         3       0       0       0       0       0       0       0       0
 23051 ;;      Temps:          1       0       0       0       0       0       0       0       0
 23052 ;;      Totals:         7       0       0       0       0       0       0       0       0
 23053 ;;Total ram usage:        7 bytes
 23054 ;; Hardware stack levels used:    1
 23055 ;; Hardware stack levels required when called:    1
 23056 ;; This function calls:
 23057 ;;		i2___lwdiv
 23058 ;; This function is called by:
 23059 ;;		_sevenSegmentUpdate
 23060 ;; This function uses a non-reentrant model
 23061 ;;
 23062                           
 23063                           	psect	text109
 23064  003D3E                     __ptext109:
 23065                           	opt stack 0
 23066  003D3E                     _parseNumber:
 23067                           	opt stack 17
 23068                           
 23069                           ;sevenseg.c: 61: uint8_t hundreds = numberToDisplay / 100u;
 23070                           
 23071                           ;incstack = 0
 23072  003D3E  C008  F001         	movff	parseNumber@numberToDisplay,i2___lwdiv@dividend
 23073  003D42  C009  F002         	movff	parseNumber@numberToDisplay+1,i2___lwdiv@dividend+1
 23074  003D46  0E00               	movlw	0
 23075  003D48  6E04               	movwf	i2___lwdiv@divisor+1,c
 23076  003D4A  0E64               	movlw	100
 23077  003D4C  6E03               	movwf	i2___lwdiv@divisor,c
 23078  003D4E  EC47  F022         	call	i2___lwdiv	;wreg free
 23079  003D52  5001               	movf	?i2___lwdiv,w,c
 23080  003D54  6E0E               	movwf	parseNumber@hundreds,c
 23081                           
 23082                           ;sevenseg.c: 62: uint8_t tens = (numberToDisplay - hundreds * 100u) / 10u;
 23083  003D56  500E               	movf	parseNumber@hundreds,w,c
 23084  003D58  0D64               	mullw	100
 23085  003D5A  1EF3               	comf	prodl,f,c
 23086  003D5C  1EF4               	comf	prodh,f,c
 23087  003D5E  4AF3               	infsnz	prodl,f,c
 23088  003D60  2AF4               	incf	prodh,f,c
 23089  003D62  5008               	movf	parseNumber@numberToDisplay,w,c
 23090  003D64  24F3               	addwf	prodl,w,c
 23091  003D66  6E01               	movwf	i2___lwdiv@dividend,c
 23092  003D68  5009               	movf	parseNumber@numberToDisplay+1,w,c
 23093  003D6A  20F4               	addwfc	prodh,w,c
 23094  003D6C  6E02               	movwf	i2___lwdiv@dividend+1,c
 23095  003D6E  0E00               	movlw	0
 23096  003D70  6E04               	movwf	i2___lwdiv@divisor+1,c
 23097  003D72  0E0A               	movlw	10
 23098  003D74  6E03               	movwf	i2___lwdiv@divisor,c
 23099  003D76  EC47  F022         	call	i2___lwdiv	;wreg free
 23100  003D7A  5001               	movf	?i2___lwdiv,w,c
 23101  003D7C  6E0D               	movwf	parseNumber@tens,c
 23102                           
 23103                           ;sevenseg.c: 63: uint8_t ones = (numberToDisplay - hundreds * 100u - tens * 10u);
 23104  003D7E  500D               	movf	parseNumber@tens,w,c
 23105  003D80  0D0A               	mullw	10
 23106  003D82  CFF3 F00B          	movff	prodl,??_parseNumber
 23107  003D86  500E               	movf	parseNumber@hundreds,w,c
 23108  003D88  0D64               	mullw	100
 23109  003D8A  50F3               	movf	prodl,w,c
 23110  003D8C  240B               	addwf	??_parseNumber,w,c
 23111  003D8E  0800               	sublw	0
 23112  003D90  2408               	addwf	parseNumber@numberToDisplay,w,c
 23113  003D92  6E0C               	movwf	parseNumber@ones,c
 23114                           
 23115                           ;sevenseg.c: 64: switch (digit) {
 23116  003D94  D008               	goto	i2l732
 23117  003D96                     
 23118                           ;sevenseg.c: 66: return ones;
 23119  003D96  500C               	movf	parseNumber@ones,w,c
 23120  003D98  0012               	return	
 23121  003D9A                     
 23122                           ;sevenseg.c: 68: return tens;
 23123  003D9A  500D               	movf	parseNumber@tens,w,c
 23124  003D9C  0012               	return	
 23125  003D9E                     
 23126                           ;sevenseg.c: 70: return hundreds;
 23127  003D9E  500E               	movf	parseNumber@hundreds,w,c
 23128  003DA0  0012               	return	
 23129  003DA2  0E00               	movlw	0
 23130                           
 23131                           ;sevenseg.c: 72: }
 23132  003DA4  0012               	return	
 23133  003DA6                     i2l732:
 23134  003DA6  500A               	movf	parseNumber@digit,w,c
 23135                           
 23136                           ; Switch size 1, requested type "space"
 23137                           ; Number of cases is 3, Range of values is 0 to 2
 23138                           ; switch strategies available:
 23139                           ; Name         Instructions Cycles
 23140                           ; simple_byte           10     6 (average)
 23141                           ;	Chosen strategy is simple_byte
 23142  003DA8  0A00               	xorlw	0	; case 0
 23143  003DAA  B4D8               	btfsc	status,2,c
 23144  003DAC  D7F8               	goto	i2l736
 23145  003DAE  0A01               	xorlw	1	; case 1
 23146  003DB0  B4D8               	btfsc	status,2,c
 23147  003DB2  D7F3               	goto	i2l735
 23148  003DB4  0A03               	xorlw	3	; case 2
 23149  003DB6  B4D8               	btfsc	status,2,c
 23150  003DB8  D7EE               	goto	i2l733
 23151  003DBA  D7F3               	goto	i2l737
 23152  003DBC                     __end_of_parseNumber:
 23153                           	opt stack 0
 23154                           pclatu	equ	0xFFB
 23155                           pclath	equ	0xFFA
 23156                           tblptru	equ	0xFF8
 23157                           tblptrh	equ	0xFF7
 23158                           tblptrl	equ	0xFF6
 23159                           tablat	equ	0xFF5
 23160                           prodh	equ	0xFF4
 23161                           prodl	equ	0xFF3
 23162                           intcon	equ	0xFF2
 23163                           intcon3	equ	0xFF0
 23164                           indf0	equ	0xFEF
 23165                           postinc0	equ	0xFEE
 23166                           plusw0	equ	0xFEB
 23167                           fsr0h	equ	0xFEA
 23168                           fsr0l	equ	0xFE9
 23169                           wreg	equ	0xFE8
 23170                           indf1	equ	0xFE7
 23171                           postinc1	equ	0xFE6
 23172                           postdec1	equ	0xFE5
 23173                           plusw1	equ	0xFE3
 23174                           fsr1h	equ	0xFE2
 23175                           fsr1l	equ	0xFE1
 23176                           indf2	equ	0xFDF
 23177                           postinc2	equ	0xFDE
 23178                           postdec2	equ	0xFDD
 23179                           plusw2	equ	0xFDB
 23180                           fsr2h	equ	0xFDA
 23181                           fsr2l	equ	0xFD9
 23182                           status	equ	0xFD8
 23183                           
 23184 ;; *************** function i2___lwdiv *****************
 23185 ;; Defined at:
 23186 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 23187 ;; Parameters:    Size  Location     Type
 23188 ;;  dividend        2    0[COMRAM] unsigned int 
 23189 ;;  divisor         2    2[COMRAM] unsigned int 
 23190 ;; Auto vars:     Size  Location     Type
 23191 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 23192 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 23193 ;; Return value:  Size  Location     Type
 23194 ;;                  2    0[COMRAM] unsigned int 
 23195 ;; Registers used:
 23196 ;;		wreg, status,2, status,0
 23197 ;; Tracked objects:
 23198 ;;		On entry : 0/0
 23199 ;;		On exit  : 0/0
 23200 ;;		Unchanged: 0/0
 23201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23202 ;;      Params:         4       0       0       0       0       0       0       0       0
 23203 ;;      Locals:         3       0       0       0       0       0       0       0       0
 23204 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23205 ;;      Totals:         7       0       0       0       0       0       0       0       0
 23206 ;;Total ram usage:        7 bytes
 23207 ;; Hardware stack levels used:    1
 23208 ;; This function calls:
 23209 ;;		Nothing
 23210 ;; This function is called by:
 23211 ;;		_parseNumber
 23212 ;; This function uses a non-reentrant model
 23213 ;;
 23214                           
 23215                           	psect	text110
 23216  00448E                     __ptext110:
 23217                           	opt stack 0
 23218  00448E                     i2___lwdiv:
 23219                           	opt stack 17
 23220                           
 23221                           ;incstack = 0
 23222  00448E  0E00               	movlw	0
 23223  004490  6E06               	movwf	i2___lwdiv@quotient+1,c
 23224  004492  0E00               	movlw	0
 23225  004494  6E05               	movwf	i2___lwdiv@quotient,c
 23226  004496  5003               	movf	i2___lwdiv@divisor,w,c
 23227  004498  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 23228  00449A  B4D8               	btfsc	status,2,c
 23229  00449C  D01C               	goto	i2l1574
 23230  00449E  0E01               	movlw	1
 23231  0044A0  6E07               	movwf	i2___lwdiv@counter,c
 23232  0044A2  D004               	goto	i2l1569
 23233  0044A4  90D8               	bcf	status,0,c
 23234  0044A6  3603               	rlcf	i2___lwdiv@divisor,f,c
 23235  0044A8  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 23236  0044AA  2A07               	incf	i2___lwdiv@counter,f,c
 23237  0044AC                     i2l1569:
 23238  0044AC  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 23239  0044AE  D7FA               	goto	i2l1570
 23240  0044B0                     i2u693_40:
 23241  0044B0  90D8               	bcf	status,0,c
 23242  0044B2  3605               	rlcf	i2___lwdiv@quotient,f,c
 23243  0044B4  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 23244  0044B6  5003               	movf	i2___lwdiv@divisor,w,c
 23245  0044B8  5C01               	subwf	i2___lwdiv@dividend,w,c
 23246  0044BA  5004               	movf	i2___lwdiv@divisor+1,w,c
 23247  0044BC  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 23248  0044BE  A0D8               	btfss	status,0,c
 23249  0044C0  D005               	goto	i2l1573
 23250  0044C2  5003               	movf	i2___lwdiv@divisor,w,c
 23251  0044C4  5E01               	subwf	i2___lwdiv@dividend,f,c
 23252  0044C6  5004               	movf	i2___lwdiv@divisor+1,w,c
 23253  0044C8  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 23254  0044CA  8005               	bsf	i2___lwdiv@quotient,0,c
 23255  0044CC                     i2l1573:
 23256  0044CC  90D8               	bcf	status,0,c
 23257  0044CE  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 23258  0044D0  3203               	rrcf	i2___lwdiv@divisor,f,c
 23259  0044D2  2E07               	decfsz	i2___lwdiv@counter,f,c
 23260  0044D4  D7ED               	goto	i2u693_40
 23261  0044D6                     i2l1574:
 23262  0044D6  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 23263  0044DA  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 23264  0044DE  0012               	return		;funcret
 23265  0044E0                     __end_ofi2___lwdiv:
 23266                           	opt stack 0
 23267                           pclatu	equ	0xFFB
 23268                           pclath	equ	0xFFA
 23269                           tblptru	equ	0xFF8
 23270                           tblptrh	equ	0xFF7
 23271                           tblptrl	equ	0xFF6
 23272                           tablat	equ	0xFF5
 23273                           prodh	equ	0xFF4
 23274                           prodl	equ	0xFF3
 23275                           intcon	equ	0xFF2
 23276                           intcon3	equ	0xFF0
 23277                           indf0	equ	0xFEF
 23278                           postinc0	equ	0xFEE
 23279                           plusw0	equ	0xFEB
 23280                           fsr0h	equ	0xFEA
 23281                           fsr0l	equ	0xFE9
 23282                           wreg	equ	0xFE8
 23283                           indf1	equ	0xFE7
 23284                           postinc1	equ	0xFE6
 23285                           postdec1	equ	0xFE5
 23286                           plusw1	equ	0xFE3
 23287                           fsr1h	equ	0xFE2
 23288                           fsr1l	equ	0xFE1
 23289                           indf2	equ	0xFDF
 23290                           postinc2	equ	0xFDE
 23291                           postdec2	equ	0xFDD
 23292                           plusw2	equ	0xFDB
 23293                           fsr2h	equ	0xFDA
 23294                           fsr2l	equ	0xFD9
 23295                           status	equ	0xFD8
 23296                           
 23297 ;; *************** function _buttonHandler *****************
 23298 ;; Defined at:
 23299 ;;		line 245 in file "src/system/main.c"
 23300 ;; Parameters:    Size  Location     Type
 23301 ;;  state           2    0[COMRAM] PTR volatile unsigned ch
 23302 ;;		 -> buttonState(1), 
 23303 ;; Auto vars:     Size  Location     Type
 23304 ;;  debounceValu    4    6[COMRAM] const unsigned long 
 23305 ;;  resetValue      4    2[COMRAM] const unsigned long 
 23306 ;; Return value:  Size  Location     Type
 23307 ;;                  1    wreg      void 
 23308 ;; Registers used:
 23309 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 23310 ;; Tracked objects:
 23311 ;;		On entry : 0/0
 23312 ;;		On exit  : 0/0
 23313 ;;		Unchanged: 0/0
 23314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23315 ;;      Params:         2       0       0       0       0       0       0       0       0
 23316 ;;      Locals:         8       0       0       0       0       0       0       0       0
 23317 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23318 ;;      Totals:        10       0       0       0       0       0       0       0       0
 23319 ;;Total ram usage:       10 bytes
 23320 ;; Hardware stack levels used:    1
 23321 ;; This function calls:
 23322 ;;		Nothing
 23323 ;; This function is called by:
 23324 ;;		_ISR
 23325 ;; This function uses a non-reentrant model
 23326 ;;
 23327                           
 23328                           	psect	text111
 23329  0038CA                     __ptext111:
 23330                           	opt stack 0
 23331  0038CA                     _buttonHandler:
 23332                           	opt stack 19
 23333                           
 23334                           ;main.c: 246: uint8_t static oldState = 0;
 23335                           ;main.c: 247: uint8_t static newState = 0;
 23336                           ;main.c: 248: uint32_t static debounceCounter = 0;
 23337                           ;main.c: 249: const uint32_t debounceValue = 0x1f;
 23338                           
 23339                           ;incstack = 0
 23340  0038CA  0E1F               	movlw	31
 23341  0038CC  6E07               	movwf	buttonHandler@debounceValue,c
 23342  0038CE  0E00               	movlw	0
 23343  0038D0  6E08               	movwf	buttonHandler@debounceValue+1,c
 23344  0038D2  0E00               	movlw	0
 23345  0038D4  6E09               	movwf	buttonHandler@debounceValue+2,c
 23346  0038D6  0E00               	movlw	0
 23347  0038D8  6E0A               	movwf	buttonHandler@debounceValue+3,c
 23348                           
 23349                           ;main.c: 250: const uint32_t resetValue = 0xfff;
 23350  0038DA  0EFF               	movlw	255
 23351  0038DC  6E03               	movwf	buttonHandler@resetValue,c
 23352  0038DE  0E0F               	movlw	15
 23353  0038E0  6E04               	movwf	buttonHandler@resetValue+1,c
 23354  0038E2  0E00               	movlw	0
 23355  0038E4  6E05               	movwf	buttonHandler@resetValue+2,c
 23356  0038E6  0E00               	movlw	0
 23357  0038E8  6E06               	movwf	buttonHandler@resetValue+3,c
 23358                           
 23359                           ;main.c: 251: if ((unsigned)(!(PORTB & (1<<5)))) {
 23360  0038EA  BA81               	btfsc	3969,5,c	;volatile
 23361  0038EC  D007               	goto	i2l680
 23362                           
 23363                           ;main.c: 252: debounceCounter++;
 23364  0038EE  0E01               	movlw	1
 23365  0038F0  262D               	addwf	buttonHandler@debounceCounter,f,c
 23366  0038F2  0E00               	movlw	0
 23367  0038F4  222E               	addwfc	buttonHandler@debounceCounter+1,f,c
 23368  0038F6  222F               	addwfc	buttonHandler@debounceCounter+2,f,c
 23369  0038F8  2230               	addwfc	buttonHandler@debounceCounter+3,f,c
 23370                           
 23371                           ;main.c: 253: } else {
 23372  0038FA  D008               	goto	i2l681
 23373  0038FC                     i2l680:
 23374                           
 23375                           ;main.c: 254: debounceCounter = 0;
 23376  0038FC  0E00               	movlw	0
 23377  0038FE  6E2D               	movwf	buttonHandler@debounceCounter,c
 23378  003900  0E00               	movlw	0
 23379  003902  6E2E               	movwf	buttonHandler@debounceCounter+1,c
 23380  003904  0E00               	movlw	0
 23381  003906  6E2F               	movwf	buttonHandler@debounceCounter+2,c
 23382  003908  0E00               	movlw	0
 23383  00390A  6E30               	movwf	buttonHandler@debounceCounter+3,c
 23384  00390C                     i2l681:
 23385                           
 23386                           ;main.c: 255: }
 23387                           ;main.c: 256: newState = (unsigned) ((debounceCounter >= debounceValue) ? 1 : 0);
 23388  00390C  5007               	movf	buttonHandler@debounceValue,w,c
 23389  00390E  5C2D               	subwf	buttonHandler@debounceCounter,w,c
 23390  003910  5008               	movf	buttonHandler@debounceValue+1,w,c
 23391  003912  582E               	subwfb	buttonHandler@debounceCounter+1,w,c
 23392  003914  5009               	movf	buttonHandler@debounceValue+2,w,c
 23393  003916  582F               	subwfb	buttonHandler@debounceCounter+2,w,c
 23394  003918  500A               	movf	buttonHandler@debounceValue+3,w,c
 23395  00391A  5830               	subwfb	buttonHandler@debounceCounter+3,w,c
 23396  00391C  A0D8               	btfss	status,0,c
 23397  00391E  D002               	goto	i2u763_40
 23398  003920  0E01               	movlw	1
 23399  003922  D001               	goto	i2u764_40
 23400  003924                     i2u763_40:
 23401  003924  0E00               	movlw	0
 23402  003926                     i2u764_40:
 23403  003926  6E46               	movwf	buttonHandler@newState,c
 23404                           
 23405                           ;main.c: 257: if (newState && !oldState) {
 23406  003928  5046               	movf	buttonHandler@newState,w,c
 23407  00392A  B4D8               	btfsc	status,2,c
 23408  00392C  D011               	goto	i2l682
 23409  00392E  5047               	movf	buttonHandler@oldState,w,c
 23410  003930  A4D8               	btfss	status,2,c
 23411  003932  D00E               	goto	i2l682
 23412                           
 23413                           ;main.c: 258: debounceCounter = debounceValue;
 23414  003934  C007  F02D         	movff	buttonHandler@debounceValue,buttonHandler@debounceCounter
 23415  003938  C008  F02E         	movff	buttonHandler@debounceValue+1,buttonHandler@debounceCounter+1
 23416  00393C  C009  F02F         	movff	buttonHandler@debounceValue+2,buttonHandler@debounceCounter+2
 23417  003940  C00A  F030         	movff	buttonHandler@debounceValue+3,buttonHandler@debounceCounter+3
 23418                           
 23419                           ;main.c: 259: *state = 1;
 23420  003944  C001  FFD9         	movff	buttonHandler@state,fsr2l
 23421  003948  C002  FFDA         	movff	buttonHandler@state+1,fsr2h
 23422  00394C  0E01               	movlw	1
 23423  00394E  D005               	goto	L10
 23424  003950                     i2l682:
 23425                           
 23426                           ;main.c: 261: *state = 0;
 23427  003950  C001  FFD9         	movff	buttonHandler@state,fsr2l
 23428  003954  C002  FFDA         	movff	buttonHandler@state+1,fsr2h
 23429  003958  0E00               	movlw	0
 23430  00395A                     L10:
 23431  00395A  6EDF               	movwf	indf2,c
 23432                           
 23433                           ;main.c: 262: }
 23434                           ;main.c: 263: if (debounceCounter > resetValue)
 23435  00395C  502D               	movf	buttonHandler@debounceCounter,w,c
 23436  00395E  5C03               	subwf	buttonHandler@resetValue,w,c
 23437  003960  502E               	movf	buttonHandler@debounceCounter+1,w,c
 23438  003962  5804               	subwfb	buttonHandler@resetValue+1,w,c
 23439  003964  502F               	movf	buttonHandler@debounceCounter+2,w,c
 23440  003966  5805               	subwfb	buttonHandler@resetValue+2,w,c
 23441  003968  5030               	movf	buttonHandler@debounceCounter+3,w,c
 23442  00396A  5806               	subwfb	buttonHandler@resetValue+3,w,c
 23443  00396C  A0D8               	btfss	status,0,c
 23444  00396E  00FF               	reset		;# 
 23445                           
 23446                           ;main.c: 266: oldState = newState;
 23447  003970  C046  F047         	movff	buttonHandler@newState,buttonHandler@oldState
 23448  003974  0012               	return		;funcret
 23449  003976                     __end_of_buttonHandler:
 23450                           	opt stack 0
 23451                           pclatu	equ	0xFFB
 23452                           pclath	equ	0xFFA
 23453                           tblptru	equ	0xFF8
 23454                           tblptrh	equ	0xFF7
 23455                           tblptrl	equ	0xFF6
 23456                           tablat	equ	0xFF5
 23457                           prodh	equ	0xFF4
 23458                           prodl	equ	0xFF3
 23459                           intcon	equ	0xFF2
 23460                           intcon3	equ	0xFF0
 23461                           indf0	equ	0xFEF
 23462                           postinc0	equ	0xFEE
 23463                           plusw0	equ	0xFEB
 23464                           fsr0h	equ	0xFEA
 23465                           fsr0l	equ	0xFE9
 23466                           wreg	equ	0xFE8
 23467                           indf1	equ	0xFE7
 23468                           postinc1	equ	0xFE6
 23469                           postdec1	equ	0xFE5
 23470                           plusw1	equ	0xFE3
 23471                           fsr1h	equ	0xFE2
 23472                           fsr1l	equ	0xFE1
 23473                           indf2	equ	0xFDF
 23474                           postinc2	equ	0xFDE
 23475                           postdec2	equ	0xFDD
 23476                           plusw2	equ	0xFDB
 23477                           fsr2h	equ	0xFDA
 23478                           fsr2l	equ	0xFD9
 23479                           status	equ	0xFD8
 23480                           pclatu	equ	0xFFB
 23481                           pclath	equ	0xFFA
 23482                           tblptru	equ	0xFF8
 23483                           tblptrh	equ	0xFF7
 23484                           tblptrl	equ	0xFF6
 23485                           tablat	equ	0xFF5
 23486                           prodh	equ	0xFF4
 23487                           prodl	equ	0xFF3
 23488                           intcon	equ	0xFF2
 23489                           intcon3	equ	0xFF0
 23490                           indf0	equ	0xFEF
 23491                           postinc0	equ	0xFEE
 23492                           plusw0	equ	0xFEB
 23493                           fsr0h	equ	0xFEA
 23494                           fsr0l	equ	0xFE9
 23495                           wreg	equ	0xFE8
 23496                           indf1	equ	0xFE7
 23497                           postinc1	equ	0xFE6
 23498                           postdec1	equ	0xFE5
 23499                           plusw1	equ	0xFE3
 23500                           fsr1h	equ	0xFE2
 23501                           fsr1l	equ	0xFE1
 23502                           indf2	equ	0xFDF
 23503                           postinc2	equ	0xFDE
 23504                           postdec2	equ	0xFDD
 23505                           plusw2	equ	0xFDB
 23506                           fsr2h	equ	0xFDA
 23507                           fsr2l	equ	0xFD9
 23508                           status	equ	0xFD8
 23509                           
 23510                           	psect	rparam
 23511  0000                     pclatu	equ	0xFFB
 23512                           pclath	equ	0xFFA
 23513                           tblptru	equ	0xFF8
 23514                           tblptrh	equ	0xFF7
 23515                           tblptrl	equ	0xFF6
 23516                           tablat	equ	0xFF5
 23517                           prodh	equ	0xFF4
 23518                           prodl	equ	0xFF3
 23519                           intcon	equ	0xFF2
 23520                           intcon3	equ	0xFF0
 23521                           indf0	equ	0xFEF
 23522                           postinc0	equ	0xFEE
 23523                           plusw0	equ	0xFEB
 23524                           fsr0h	equ	0xFEA
 23525                           fsr0l	equ	0xFE9
 23526                           wreg	equ	0xFE8
 23527                           indf1	equ	0xFE7
 23528                           postinc1	equ	0xFE6
 23529                           postdec1	equ	0xFE5
 23530                           plusw1	equ	0xFE3
 23531                           fsr1h	equ	0xFE2
 23532                           fsr1l	equ	0xFE1
 23533                           indf2	equ	0xFDF
 23534                           postinc2	equ	0xFDE
 23535                           postdec2	equ	0xFDD
 23536                           plusw2	equ	0xFDB
 23537                           fsr2h	equ	0xFDA
 23538                           fsr2l	equ	0xFD9
 23539                           status	equ	0xFD8
 23540                           
 23541                           	psect	temp
 23542  000050                     btemp:
 23543                           	opt stack 0
 23544  000050                     	ds	1
 23545  0000                     int$flags	set	btemp
 23546  0000                     wtemp6	set	btemp+1
 23547                           pclatu	equ	0xFFB
 23548                           pclath	equ	0xFFA
 23549                           tblptru	equ	0xFF8
 23550                           tblptrh	equ	0xFF7
 23551                           tblptrl	equ	0xFF6
 23552                           tablat	equ	0xFF5
 23553                           prodh	equ	0xFF4
 23554                           prodl	equ	0xFF3
 23555                           intcon	equ	0xFF2
 23556                           intcon3	equ	0xFF0
 23557                           indf0	equ	0xFEF
 23558                           postinc0	equ	0xFEE
 23559                           plusw0	equ	0xFEB
 23560                           fsr0h	equ	0xFEA
 23561                           fsr0l	equ	0xFE9
 23562                           wreg	equ	0xFE8
 23563                           indf1	equ	0xFE7
 23564                           postinc1	equ	0xFE6
 23565                           postdec1	equ	0xFE5
 23566                           plusw1	equ	0xFE3
 23567                           fsr1h	equ	0xFE2
 23568                           fsr1l	equ	0xFE1
 23569                           indf2	equ	0xFDF
 23570                           postinc2	equ	0xFDE
 23571                           postdec2	equ	0xFDD
 23572                           plusw2	equ	0xFDB
 23573                           fsr2h	equ	0xFDA
 23574                           fsr2l	equ	0xFD9
 23575                           status	equ	0xFD8


Data Sizes:
    Strings     1355
    Constant    11
    Data        52
    BSS         452
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      79
    BANK0           160    160     160
    BANK1           256    139     241
    BANK2           256      0     243
    BANK3           256     17     138
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ethernetController_dropPacket@frame	PTR struct ethernetFrame size(2) Largest target is 121
		 -> stack.ethernet(BANK3[15]), stack(BANK3[121]), 

    ultoa@buf	PTR unsigned char  size(2) Largest target is 10
		 -> intToString@number(BANK2[10]), 

    sp__ultoa	PTR unsigned char  size(2) Largest target is 10
		 -> intToString@number(BANK2[10]), 

    ltoa@buf	PTR unsigned char  size(2) Largest target is 10
		 -> intToString@number(BANK2[10]), 

    ltoa@cp	PTR unsigned char  size(2) Largest target is 10
		 -> intToString@number(BANK2[10]), 

    ipv4_setToAllZero@ip	PTR struct ipv4_address size(2) Largest target is 4
		 -> arp_init@ip(BANK0[4]), arp_probe@ipSender(BANK1[4]), 

    ipv4_isAllZero@ip	PTR struct ipv4_address size(2) Largest target is 32
		 -> arp_parseFromRXBuffer@arp(BANK0[32]), 

    ipv4_cmp@b	PTR struct ipv4_address size(2) Largest target is 32
		 -> arp_checkForEntry@ip(BANK0[4]), arp_sendReply@myIP(BANK1[4]), arp_parseFromRXBuffer@arp(BANK0[32]), 

    ipv4_cmp@a	PTR struct ipv4_address size(2) Largest target is 112
		 -> arp_table(BANK2[112]), arp_sendReply@request(BANK1[32]), arp_parseFromRXBuffer@arp(BANK0[32]), 

    ipv4_SrcAddrChanged@err	PTR struct error size(2) Largest target is 3
		 -> arp_background@err(BANK1[3]), 

    arpStatus	PTR struct error size(2) Largest target is 3
		 -> NULL(NULL[0]), arp_background@err(BANK1[3]), 

    ipv4_handleNewPacket@frame	PTR struct ethernetFrame size(2) Largest target is 121
		 -> stack.ethernet(BANK3[15]), stack(BANK3[121]), 

    ipv4_checkHeaderChecksum@header	PTR struct ipv4_header size(2) Largest target is 23
		 -> ipv4_handleNewPacket@ip(BANK0[23]), 

    ipv4_parseHeader@field	PTR struct memoryField size(2) Largest target is 9
		 -> ipv4_handleNewPacket@headerField(BANK0[9]), 

    ipv4_calculateHeaderChecksum@header	PTR struct ipv4_header size(2) Largest target is 23
		 -> ipv4_checkHeaderChecksum@testHeader(BANK0[23]), 

    arp_checkForEntry@index	PTR unsigned char  size(2) Largest target is 1
		 -> arp_probe@index(BANK1[1]), 

    arp_parseFromRXBuffer@frame	PTR struct ethernetFrame size(2) Largest target is 121
		 -> stack.ethernet(BANK3[15]), stack(BANK3[121]), 

    arp_handleNewPacket@frame	PTR struct ethernetFrame size(2) Largest target is 121
		 -> stack.ethernet(BANK3[15]), stack(BANK3[121]), 

    sp__arpEntryToString	PTR unsigned char  size(2) Largest target is 50
		 -> arpEntryToString@string(BANK2[50]), 

    sp__ipAdressToString	PTR unsigned char  size(2) Largest target is 16
		 -> ipAdressToString@address(BANK2[16]), 

    sp__ipProtocolToString	PTR unsigned char  size(2) Largest target is 17
		 -> STR_58(CODE[17]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[5]), 

    sp__hexToString	PTR unsigned char  size(2) Largest target is 10
		 -> hexToString@number(BANK2[10]), 

    sp__ltoa	PTR unsigned char  size(2) Largest target is 10
		 -> intToString@number(BANK2[10]), 

    UARTTransmitText@str	PTR const unsigned char  size(2) Largest target is 64
		 -> STR_96(CODE[39]), STR_95(CODE[59]), STR_94(CODE[5]), STR_93(CODE[38]), 
		 -> STR_92(CODE[23]), STR_91(CODE[30]), STR_90(CODE[45]), STR_89(CODE[64]), 
		 -> STR_88(CODE[35]), STR_87(CODE[5]), STR_86(CODE[42]), STR_85(CODE[19]), 
		 -> STR_84(CODE[2]), STR_83(CODE[3]), STR_82(CODE[3]), STR_81(CODE[3]), 
		 -> STR_80(CODE[3]), STR_79(CODE[5]), STR_78(CODE[2]), STR_77(CODE[2]), 
		 -> STR_76(CODE[7]), STR_75(CODE[11]), STR_74(CODE[3]), STR_73(CODE[31]), 
		 -> STR_72(CODE[33]), STR_71(CODE[24]), STR_70(CODE[36]), STR_69(CODE[2]), 
		 -> STR_68(CODE[3]), STR_67(CODE[16]), STR_66(CODE[15]), STR_65(CODE[10]), 
		 -> STR_64(CODE[2]), STR_63(CODE[3]), STR_62(CODE[5]), STR_61(CODE[3]), 
		 -> STR_60(CODE[2]), STR_59(CODE[39]), arpEntryToString@string(BANK2[50]), ipAdressToString@address(BANK2[16]), 
		 -> STR_58(CODE[17]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[5]), 
		 -> STR_54(CODE[18]), STR_53(CODE[4]), STR_52(CODE[5]), macToString@address(BANK0[18]), 
		 -> hexToString@number(BANK2[10]), intToString@number(BANK2[10]), STR_51(CODE[5]), STR_50(CODE[9]), 
		 -> STR_49(CODE[30]), STR_48(CODE[34]), STR_47(CODE[55]), STR_46(CODE[37]), 
		 -> STR_45(CODE[15]), STR_44(CODE[14]), STR_43(CODE[19]), STR_42(CODE[30]), 
		 -> STR_41(CODE[17]), STR_40(CODE[8]), STR_39(CODE[29]), STR_38(CODE[29]), 
		 -> STR_37(CODE[20]), STR_36(CODE[19]), STR_35(CODE[19]), STR_34(CODE[13]), 
		 -> STR_33(CODE[51]), STR_32(CODE[4]), STR_31(CODE[23]), STR_30(CODE[12]), 
		 -> STR_29(CODE[4]), STR_28(CODE[9]), STR_27(CODE[2]), STR_26(CODE[12]), 
		 -> STR_25(CODE[24]), STR_24(CODE[51]), STR_23(CODE[49]), STR_22(CODE[51]), 
		 -> STR_21(CODE[2]), STR_20(CODE[3]), STR_19(CODE[3]), STR_18(CODE[3]), 
		 -> STR_17(CODE[5]), STR_16(CODE[2]), STR_15(CODE[3]), STR_14(CODE[5]), 
		 -> STR_13(CODE[3]), STR_12(CODE[3]), STR_11(CODE[2]), STR_10(CODE[20]), 
		 -> STR_9(CODE[7]), STR_8(CODE[6]), STR_7(CODE[2]), STR_6(CODE[2]), 
		 -> STR_5(CODE[16]), STR_4(CODE[10]), STR_3(CODE[12]), STR_2(CODE[2]), 
		 -> STR_1(CODE[2]), ethernetController_getDeviceName@string(BANK0[11]), 

    buttonHandler@state	PTR volatile unsigned char  size(2) Largest target is 1
		 -> buttonState(BANK1[1]), 

    handleStackBackgroundTasks@stack	PTR volatile struct stack size(2) Largest target is 121
		 -> stack(BANK3[121]), 

    mac_setAllZero@mac	PTR struct macaddress size(2) Largest target is 6
		 -> arp_init@mac(BANK0[6]), arp_sendRequest@targetMAC(BANK1[6]), 

    mac_cmp@b	PTR struct macaddress size(2) Largest target is 32
		 -> arp_parseFromRXBuffer@arp(BANK0[32]), 

    mac_cmp@a	PTR struct macaddress size(2) Largest target is 32
		 -> arp_parseFromRXBuffer@arp(BANK0[32]), 

    mac_isAllZero@mac	PTR struct macaddress size(2) Largest target is 32
		 -> arp_parseFromRXBuffer@arp(BANK0[32]), 

    mac_setToBroadcast@mac	PTR struct macaddress size(2) Largest target is 6
		 -> arp_send@destination(BANK0[6]), 

    sp__etherTypeToString	PTR unsigned char  size(2) Largest target is 18
		 -> STR_54(CODE[18]), STR_53(CODE[4]), STR_52(CODE[5]), 

    sp__macToString	PTR unsigned char  size(2) Largest target is 18
		 -> macToString@address(BANK0[18]), 

    sp__intToString	PTR unsigned char  size(2) Largest target is 10
		 -> intToString@number(BANK2[10]), 

    ethernet_rxGetNewFrame@frame	PTR struct ethernetFrame size(2) Largest target is 121
		 -> stack.ethernet(BANK3[15]), stack(BANK3[121]), 

    ethernet_txFrameRequest@frame	PTR struct ethernetFrame size(2) Largest target is 34
		 -> arp_send@ethFrame(BANK0[34]), 

    enc424j600_updateReceiveStatusVector@rsv	PTR unsigned char  size(2) Largest target is 6
		 -> ethernetController_getRSV@temp(BANK1[6]), 

    enc424j600_readPHYRegister@data	PTR unsigned int  size(2) Largest target is 2
		 -> ethernetController_updateLinkStatus@temp16(BANK0[2]), 

    enc424j600_readControlRegisterUnbanked@data	PTR unsigned char  size(2) Largest target is 6
		 -> enc424j600_clearInterruptFlag@temp(BANK0[1]), enc424j600_getInterruptFlags@high(BANK0[1]), enc424j600_getInterruptFlags@low(BANK0[1]), enc424j600_disable@temp(COMRAM[1]), 
		 -> enc424j600_enable@temp(COMRAM[1]), enc424j600_disableAutoMACInsertion@temp(COMRAM[1]), enc424j600_enableAutoMACInsertion@temp(BANK0[1]), enc424j600_getPacketCount@lowByte(BANK0[1]), 
		 -> enc424j600_readPHYRegister@highByte(BANK0[1]), enc424j600_readPHYRegister@lowByte(BANK0[1]), enc424j600_readPHYRegister@temp(BANK0[1]), ethernetController_setLEDConfig@data(BANK0[1]), 
		 -> ethernetController_updateLinkStatus@temp(BANK0[1]), mac.address(COMRAM[6]), ethernetController_getMacAddress@mac(BANK0[6]), ethernetController_getSiliconRevision@data(COMRAM[1]), 
		 -> ethernetController_checkDeviceId@data(BANK0[1]), ethernetController_softReset@receivedData(BANK0[2]), 

    enc424j600_writeControlRegisterUnbanked@data	PTR unsigned char  size(2) Largest target is 6
		 -> enc424j600_clearInterruptFlag@temp(BANK0[1]), enc424j600_disable@temp(COMRAM[1]), enc424j600_enable@temp(COMRAM[1]), enc424j600_disableAutoMACInsertion@temp(COMRAM[1]), 
		 -> enc424j600_enableAutoMACInsertion@temp(BANK0[1]), enc424j600_setRXTailPointer@highByte(BANK0[1]), enc424j600_setRXTailPointer@lowByte(BANK0[1]), enc424j600_setRXBufferStartAddress@highByte(BANK0[1]), 
		 -> enc424j600_setRXBufferStartAddress@lowByte(BANK0[1]), enc424j600_setTXStartAddress@highByte(BANK0[1]), enc424j600_setTXStartAddress@lowByte(BANK0[1]), enc424j600_setTXLength@highByte(BANK0[1]), 
		 -> enc424j600_setTXLength@lowByte(BANK0[1]), enc424j600_readPHYRegister@temp(BANK0[1]), enc424j600_readPHYRegister@unusedBits(BANK0[1]), enc424j600_readPHYRegister@PHYaddress(BANK0[1]), 
		 -> ethernetController_setLEDConfig@data(BANK0[1]), mac.address(COMRAM[6]), ethernetController_setMacAddress@mac(COMRAM[6]), ethernetController_softReset@dataToSend(BANK0[2]), 

    enc424j600_readSPI@data	PTR unsigned char  size(2) Largest target is 6
		 -> enc424j600_clearInterruptFlag@temp(BANK0[1]), enc424j600_getInterruptFlags@high(BANK0[1]), enc424j600_getInterruptFlags@low(BANK0[1]), enc424j600_disable@temp(COMRAM[1]), 
		 -> enc424j600_enable@temp(COMRAM[1]), enc424j600_disableAutoMACInsertion@temp(COMRAM[1]), enc424j600_enableAutoMACInsertion@temp(BANK0[1]), enc424j600_getPacketCount@lowByte(BANK0[1]), 
		 -> enc424j600_readPHYRegister@highByte(BANK0[1]), enc424j600_readPHYRegister@lowByte(BANK0[1]), enc424j600_readPHYRegister@temp(BANK0[1]), ethernetController_setLEDConfig@data(BANK0[1]), 
		 -> ethernetController_updateLinkStatus@temp(BANK0[1]), ethernetController_streamFromRXBuffer@temp(BANK0[1]), ethernetController_updateNextPacketPointer@newPointerH(BANK0[1]), ethernetController_updateNextPacketPointer@newPointerL(BANK0[1]), 
		 -> ethernetController_getRSV@temp(BANK1[6]), ethernetController_getEtherTypeField@lowByte(BANK0[1]), ethernetController_getEtherTypeField@highByte(BANK0[1]), ethernetController_getSourceMACAddress@temp(BANK0[1]), 
		 -> ethernetController_getDestinationMACAddress@temp(COMRAM[1]), mac.address(COMRAM[6]), ethernetController_getMacAddress@mac(BANK0[6]), ethernetController_getSiliconRevision@data(COMRAM[1]), 
		 -> ethernetController_checkDeviceId@data(BANK0[1]), ethernetController_softReset@receivedData(BANK0[2]), 

    enc424j600_writeSPI@data	PTR unsigned char  size(2) Largest target is 6
		 -> enc424j600_clearInterruptFlag@temp(BANK0[1]), enc424j600_disable@temp(COMRAM[1]), enc424j600_enable@temp(COMRAM[1]), enc424j600_disableAutoMACInsertion@temp(COMRAM[1]), 
		 -> enc424j600_enableAutoMACInsertion@temp(BANK0[1]), enc424j600_setRXTailPointer@highByte(BANK0[1]), enc424j600_setRXTailPointer@lowByte(BANK0[1]), enc424j600_setRXBufferStartAddress@highByte(BANK0[1]), 
		 -> enc424j600_setRXBufferStartAddress@lowByte(BANK0[1]), enc424j600_setERXDATAReadPointer@highByte(BANK0[1]), enc424j600_setERXDATAReadPointer@lowByte(BANK0[1]), enc424j600_setERXDATAReadPointer@opcode(BANK0[1]), 
		 -> enc424j600_setGPDATAReadPointer@highByte(COMRAM[1]), enc424j600_setGPDATAReadPointer@lowByte(COMRAM[1]), enc424j600_setGPDATAReadPointer@opcode(COMRAM[1]), enc424j600_setGPDATAWritePointer@highByte(BANK0[1]), 
		 -> enc424j600_setGPDATAWritePointer@lowByte(BANK0[1]), enc424j600_setGPDATAWritePointer@opcode(BANK0[1]), enc424j600_setTXStartAddress@highByte(BANK0[1]), enc424j600_setTXStartAddress@lowByte(BANK0[1]), 
		 -> enc424j600_setTXLength@highByte(BANK0[1]), enc424j600_setTXLength@lowByte(BANK0[1]), enc424j600_readPHYRegister@temp(BANK0[1]), enc424j600_readPHYRegister@unusedBits(BANK0[1]), 
		 -> enc424j600_readPHYRegister@PHYaddress(BANK0[1]), enc424j600_readControlRegisterUnbanked@addr(BANK0[1]), enc424j600_readControlRegisterUnbanked@opcode(BANK0[1]), enc424j600_writeControlRegisterUnbanked@addr(BANK0[1]), 
		 -> enc424j600_writeControlRegisterUnbanked@opcode(BANK0[1]), enc424j600_writeSingleByte@opcode(BANK0[1]), ethernetController_setLEDConfig@data(BANK0[1]), ethernetController_streamFromRXBuffer@opcode(BANK0[1]), 
		 -> ethernetController_updateNextPacketPointer@opcode(BANK0[1]), ethernetController_getRSV@opcode(BANK0[1]), ethernetController_getEtherTypeField@opcode(BANK0[1]), ethernetController_getSourceMACAddress@opcode(BANK0[1]), 
		 -> ethernetController_getDestinationMACAddress@opcode(COMRAM[1]), ethernetController_writeEtherTypeFieldToBuffer@opcode(BANK0[1]), ethernetController_writeEtherTypeFieldToBuffer@highByte(BANK0[1]), ethernetController_writeEtherTypeFieldToBuffer@lowByte(BANK0[1]), 
		 -> ethernetController_writeDestinationMACAddress@opcode(BANK0[1]), ethernetController_writeDestinationMACAddress@data(BANK0[6]), ethernetController_streamToTransmitBuffer@data(BANK0[1]), ethernetController_streamToTransmitBuffer@opcode(BANK0[1]), 
		 -> mac.address(COMRAM[6]), ethernetController_setMacAddress@mac(COMRAM[6]), ethernetController_softReset@dataToSend(BANK0[2]), 

    ethernetController_updateLinkStatus@state	PTR struct ethernetConnection size(2) Largest target is 121
		 -> stack(BANK3[121]), 

    sp__ethernetController_getDeviceName	PTR unsigned char  size(2) Largest target is 11
		 -> ethernetController_getDeviceName@string(BANK0[11]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->_sevenSegmentUpdate
    _sevenSegmentUpdate->_parseNumber
    _parseNumber->i2___lwdiv

Critical Paths under _main in BANK0

    _stack_init->_arp_init
    _arp_init->_arp_setNewEntry
    _srand->_ethernetController_getMacAddress
    _printEthernetState->_UARTTransmitText
    _printErrorMessage->_UARTTransmitText
    _ipv4_setIPSourceAddress->_UARTTransmitText
    _ipv4_background->_UARTTransmitText
    _ethernet_rxGetNewFrame->_arp_handleNewPacket
    _ipv4_handleNewPacket->_ipv4_checkHeaderChecksum
    _ipv4_parseHeader->_ethernetController_streamFromRXBuffer
    _ipv4_checkHeaderChecksum->_UARTTransmitText
    _hexToString->_hexToChar
    _ethernetController_updateNextPacketPointer->_enc424j600_setERXDATAReadPointer
    _ethernetController_getRSV->_enc424j600_updateReceiveStatusVector
    _ethernetController_getEtherTypeField->_enc424j600_setERXDATAReadPointer
    _ethernetController_dropPacket->_enc424j600_setRXTailPointer
    _ethernetController_getNextPacketPointer->_enc424j600_getNextPacketPointer
    _arp_setNewEntry->_getMillis
    _arp_sendReply->_arp_send
    _macToString->_ethernetController_getMacAddress
    _ipAdressToString->___lwmod
    _arp_parseFromRXBuffer->_ethernetController_streamFromRXBuffer
    _ethernetController_streamFromRXBuffer->_enc424j600_setERXDATAReadPointer
    _UARTTransmitInt->_UARTTransmitText
    _intToString->_ltoa
    _ltoa->_ultoa
    _ultoa->___lldiv
    _ethernetController_updateLinkStatus->_enc424j600_readPHYRegister
    _enc424j600_readPHYRegister->_enc424j600_readControlRegisterUnbanked
    _enc424j600_readPHYRegister->_enc424j600_writeControlRegisterUnbanked
    _ethernetController_setLEDConfig->_enc424j600_readControlRegisterUnbanked
    _ethernetController_setLEDConfig->_enc424j600_writeControlRegisterUnbanked
    _ethernetController_pollInterruptFlags->_enc424j600_getInterruptFlags
    _enc424j600_getInterruptFlags->_enc424j600_readControlRegisterUnbanked
    _ethernetController_newPacketAvailable->_enc424j600_getPacketCount
    _ethernetController_clearInterruptFlag->_enc424j600_clearInterruptFlag
    _enc424j600_clearInterruptFlag->_enc424j600_readControlRegisterUnbanked
    _enc424j600_clearInterruptFlag->_enc424j600_writeControlRegisterUnbanked
    _arp_background->_arp_gratuitous
    _arp_background->_arp_probe
    _rand->___lmul
    _arp_checkForEntry->_ipv4_cmp
    ___lwmod->_rand
    _arp_sendRequest->_arp_send
    _ethernetController_getMacAddress->_enc424j600_readControlRegisterUnbanked
    _arp_send->_ethernet_txFrameRequest
    _ethernet_txFrameRequest->_memory_txFrameRequest
    _memory_txFrameRequest->_checkForOverlap
    _checkForOverlap->_checkForOverlapSwitched
    _ethernetController_writeEtherTypeFieldToBuffer->_enc424j600_setGPDATAWritePointer
    _ethernetController_writeDestinationMACAddress->_enc424j600_setGPDATAWritePointer
    _ethernetController_streamToTransmitBuffer->_enc424j600_setGPDATAWritePointer
    _enc424j600_setGPDATAWritePointer->_enc424j600_writeSPI
    _ethernetController_sendPacket->_enc424j600_setTXLength
    _ethernetController_sendPacket->_enc424j600_setTXStartAddress
    _enc424j600_setTXStartAddress->_enc424j600_writeControlRegisterUnbanked
    _enc424j600_setTXLength->_enc424j600_writeControlRegisterUnbanked
    _ethernetController_getSourceMACAddress->_enc424j600_setERXDATAReadPointer
    _enc424j600_setERXDATAReadPointer->_enc424j600_writeSPI
    _UARTTransmitText->_macToString
    _ethernetController_init->_ethernetController_softReset
    _ethernetController_softReset->_enc424j600_readControlRegisterUnbanked
    _ethernetController_softReset->_enc424j600_writeControlRegisterUnbanked
    _ethernetController_checkDeviceId->_enc424j600_readControlRegisterUnbanked
    _enc424j600_setRXTailPointer->_enc424j600_writeControlRegisterUnbanked
    _enc424j600_setRXBufferStartAddress->_enc424j600_writeControlRegisterUnbanked
    _enc424j600_enableReception->_enc424j600_writeSingleByte
    _enc424j600_writeSingleByte->_enc424j600_writeSPI
    _enc424j600_enableAutoMACInsertion->_enc424j600_readControlRegisterUnbanked
    _enc424j600_enableAutoMACInsertion->_enc424j600_writeControlRegisterUnbanked
    _enc424j600_writeControlRegisterUnbanked->_enc424j600_writeSPI
    _ethernetController_getCurrentPacketCount->_enc424j600_getPacketCount
    _enc424j600_getPacketCount->_enc424j600_readControlRegisterUnbanked
    _enc424j600_readControlRegisterUnbanked->_enc424j600_readSPI
    _enc424j600_readControlRegisterUnbanked->_enc424j600_writeSPI

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_handleStackBackgroundTasks
    _handleStackBackgroundTasks->_ethernet_rxGetNewFrame
    _ethernet_rxGetNewFrame->_arp_handleNewPacket
    _arp_handleNewPacket->_arp_sendReply
    _arp_background->_arp_probe
    _arp_probe->_arp_sendRequest
    _arp_gratuitous->_arp_sendRequest

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                20    20      0  567185
                                            137 BANK1      2     2      0
                                              0 BANK3     17    17      0
                           _UARTInit
                   _UARTTransmitText
   _ethernetController_checkDeviceId
_ethernetController_getCurrentPacket
   _ethernetController_getDeviceName
   _ethernetController_getMacAddress
            _ethernetController_init
    _ethernetController_setLEDConfig
         _handleStackBackgroundTasks
            _ipv4_setIPSourceAddress
                        _macToString
                  _printErrorMessage
                 _printEthernetState
                   _sevenSegmentInit
                              _srand
                         _stack_init
 ---------------------------------------------------------------------------------
 (1) _stack_init                                           0     0      0    1720
                           _arp_init
                          _ipv4_init
 ---------------------------------------------------------------------------------
 (2) _ipv4_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _arp_init                                            11    11      0    1720
                                             28 BANK0     11    11      0
                    _arp_setNewEntry
                  _ipv4_setToAllZero
                     _mac_setAllZero
 ---------------------------------------------------------------------------------
 (1) _srand                                                2     0      2     121
                                             26 BANK0      2     0      2
   _ethernetController_getMacAddress (ARG)
 ---------------------------------------------------------------------------------
 (1) _sevenSegmentInit                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _printEthernetState                                  15     0     15   11156
                                             58 BANK0     15     0     15
                   _UARTTransmitText
 ---------------------------------------------------------------------------------
 (1) _printErrorMessage                                    5     2      3   14391
                                             58 BANK0      5     2      3
                   _UARTTransmitText
                        _intToString
 ---------------------------------------------------------------------------------
 (1) _handleStackBackgroundTasks                          13    11      2  434986
                                            134 BANK1      3     1      2
                     _arp_background
_ethernetController_clearInterruptFl
_ethernetController_newPacketAvailab
_ethernetController_pollInterruptFla
    _ethernetController_setLEDConfig
_ethernetController_updateLinkStatus
             _ethernet_rxGetNewFrame
                    _ipv4_background
            _ipv4_getIPSourceAddress
            _ipv4_setIPSourceAddress
 ---------------------------------------------------------------------------------
 (1) _ipv4_setIPSourceAddress                              4     0      4   14633
                                             58 BANK0      4     0      4
                   _UARTTransmitText
                   _ipAdressToString
            _ipv4_getIPSourceAddress (ARG)
 ---------------------------------------------------------------------------------
 (2) _ipv4_background                                      5     5      0   14466
                                             58 BANK0      5     5      0
                   _UARTTransmitText
                   _ipAdressToString
 ---------------------------------------------------------------------------------
 (2) _ethernet_rxGetNewFrame                              14    11      3  225043
                                            120 BANK1     14    11      3
                    _UARTTransmitInt
                   _UARTTransmitText
                _arp_handleNewPacket
                  _etherTypeToString
      _ethernetController_dropPacket
_ethernetController_getEtherTypeFiel
_ethernetController_getNextPacketPoi
          _ethernetController_getRSV
_ethernetController_updateNextPacket
                          _getMillis
                        _intToString
               _ipv4_handleNewPacket
                        _macToString
 ---------------------------------------------------------------------------------
 (3) _ipv4_handleNewPacket                                36    34      2   50814
                                             85 BANK0     36    34      2
                   _UARTTransmitText
      _ethernetController_dropPacket
                        _intToString
                   _ipAdressToString
                 _ipProtocolToString
           _ipv4_checkHeaderChecksum
                   _ipv4_parseHeader
 ---------------------------------------------------------------------------------
 (4) _ipv4_parseHeader                                    50    27     23   11323
                                             20 BANK0     50    27     23
_ethernetController_streamFromRXBuff
 ---------------------------------------------------------------------------------
 (4) _ipv4_checkHeaderChecksum                            27    25      2   12628
                                             58 BANK0     27    25      2
                   _UARTTransmitText
                        _hexToString
       _ipv4_calculateHeaderChecksum
 ---------------------------------------------------------------------------------
 (5) _ipv4_calculateHeaderChecksum                        18    16      2     839
                                              0 BANK0     18    16      2
 ---------------------------------------------------------------------------------
 (5) _hexToString                                          9     5      4     632
                                              1 BANK0      9     5      4
                          _hexToChar
 ---------------------------------------------------------------------------------
 (6) _hexToChar                                            1     1      0     124
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _ipProtocolToString                                   3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _ethernetController_updateNextPacketPointer          11    11      0    7269
                                             15 BANK0     11    11      0
    _enc424j600_getNextPacketPointer
                 _enc424j600_readSPI
   _enc424j600_setERXDATAReadPointer
    _enc424j600_setNextPacketPointer
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (3) _ethernetController_getRSV                            7     2      5    8464
                                             17 BANK0      7     2      5
                 _enc424j600_readSPI
   _enc424j600_setERXDATAReadPointer
_enc424j600_updateReceiveStatusVecto
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (4) _enc424j600_updateReceiveStatusVector                17    12      5    1356
                                              0 BANK0     17    12      5
 ---------------------------------------------------------------------------------
 (3) _ethernetController_getEtherTypeField                18     9      9    7182
                                             15 BANK0     18     9      9
                 _enc424j600_readSPI
   _enc424j600_setERXDATAReadPointer
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (3) _etherTypeToString                                    4     2      2     121
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _arp_handleNewPacket                                 36    34      2  111484
                                            156 BANK0      4     2      2
                                             88 BANK1     32    32      0
                   _UARTTransmitText
              _arp_parseFromRXBuffer
                      _arp_sendReply
                    _arp_setNewEntry
      _ethernetController_dropPacket
                          _getMillis
                   _ipAdressToString
                        _macToString
 ---------------------------------------------------------------------------------
 (4) _ethernetController_dropPacket                        2     0      2    8564
                                             18 BANK0      2     0      2
        _enc424j600_setRXTailPointer
         _enc424j600_writeSingleByte
_ethernetController_getNextPacketPoi
 ---------------------------------------------------------------------------------
 (5) _ethernetController_getNextPacketPointer              2     0      2       0
                                              2 BANK0      2     0      2
    _enc424j600_getNextPacketPointer
 ---------------------------------------------------------------------------------
 (6) _enc424j600_getNextPacketPointer                      2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _arp_setNewEntry                                     24    10     14     930
                                              4 BANK0     24    10     14
                          _getMillis (ARG)
 ---------------------------------------------------------------------------------
 (4) _arp_sendReply                                       88    56     32   71591
                                              0 BANK1     88    56     32
                   _UARTTransmitText
                           _arp_send
   _ethernetController_getMacAddress
                   _ipAdressToString
                           _ipv4_cmp
            _ipv4_getIPSourceAddress
                        _macToString
 ---------------------------------------------------------------------------------
 (1) _macToString                                         30    24      6    1473
                                             26 BANK0     30    24      6
   _ethernetController_getMacAddress (ARG)
 ---------------------------------------------------------------------------------
 (2) _ipAdressToString                                    22    18      4    3526
                                             19 BANK0     22    18      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     821
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) _arp_parseFromRXBuffer                               73    41     32   14071
                                             20 BANK0     73    41     32
_ethernetController_streamFromRXBuff
                           _ipv4_cmp
                     _ipv4_isAllZero
                            _mac_cmp
                      _mac_isAllZero
 ---------------------------------------------------------------------------------
 (5) _mac_isAllZero                                        3     1      2     220
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (5) _mac_cmp                                              7     3      4     372
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (5) _ipv4_isAllZero                                       3     1      2     220
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (5) _ethernetController_streamFromRXBuffer                5     3      2    9718
                                             15 BANK0      5     3      2
                 _enc424j600_readSPI
   _enc424j600_setERXDATAReadPointer
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (3) _UARTTransmitInt                                      4     0      4   14320
                                             58 BANK0      4     0      4
                   _UARTTransmitText
                        _intToString
 ---------------------------------------------------------------------------------
 (2) _intToString                                          4     0      4    3424
                                             36 BANK0      4     0      4
                               _ltoa
 ---------------------------------------------------------------------------------
 (3) _ltoa                                                10     2      8    2403
                                             26 BANK0     10     2      8
                              _ultoa
 ---------------------------------------------------------------------------------
 (4) _ultoa                                               13     5      8    1900
                                             13 BANK0     13     5      8
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (5) ___llmod                                              9     1      8     592
                                              0 BANK0      9     1      8
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8     601
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _ethernetController_updateLinkStatus                  5     3      2   18510
                                             32 BANK0      5     3      2
_enc424j600_readControlRegisterUnban
         _enc424j600_readPHYRegister
 ---------------------------------------------------------------------------------
 (3) _enc424j600_readPHYRegister                          18    16      2   11923
                                             14 BANK0     18    16      2
_enc424j600_readControlRegisterUnban
_enc424j600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (2) _ethernetController_setLEDConfig                      3     2      1   12237
                                             14 BANK0      3     2      1
_enc424j600_readControlRegisterUnban
_enc424j600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (2) _ethernetController_pollInterruptFlags               10     8      2    6716
                                             24 BANK0     10     8      2
       _enc424j600_getInterruptFlags
 ---------------------------------------------------------------------------------
 (3) _enc424j600_getInterruptFlags                        10     8      2    6280
                                             14 BANK0     10     8      2
_enc424j600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (2) _ethernetController_newPacketAvailable                0     0      0    6215
          _enc424j600_getPacketCount
 ---------------------------------------------------------------------------------
 (2) _ethernetController_clearInterruptFlag                1     1      0   11558
                                             18 BANK0      1     1      0
      _enc424j600_clearInterruptFlag
 ---------------------------------------------------------------------------------
 (3) _enc424j600_clearInterruptFlag                        4     4      0   11527
                                             14 BANK0      4     4      0
_enc424j600_readControlRegisterUnban
_enc424j600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (2) _arp_background                                       9     9      0  125270
                                             76 BANK1      9     9      0
                   _UARTTransmitText
                     _arp_gratuitous
                          _arp_probe
                _ipv4_SrcAddrChanged
 _ipv4_getPreliminaryIPSourceAddress
 ---------------------------------------------------------------------------------
 (3) _ipv4_getPreliminaryIPSourceAddress                   4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (3) _ipv4_SrcAddrChanged                                  2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _arp_probe                                           28    24      4   58709
                                            156 BANK0      4     0      4
                                             52 BANK1     24    24      0
                            ___lwmod
                  _arp_checkForEntry
                    _arp_sendRequest
                          _getMillis
                  _ipv4_setToAllZero
                               _rand
 ---------------------------------------------------------------------------------
 (4) _rand                                                 2     0      2     456
                                             12 BANK0      2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8     456
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) _ipv4_setToAllZero                                    3     1      2     279
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _arp_checkForEntry                                   15     9      6    1318
                                              7 BANK0     15     9      6
                          _getMillis
                           _ipv4_cmp
 ---------------------------------------------------------------------------------
 (5) _ipv4_cmp                                             7     3      4     912
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     772
                                             14 BANK0      5     1      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (3) _arp_gratuitous                                      15    11      4   55532
                                            156 BANK0      4     0      4
                                             52 BANK1     11    11      0
                    _arp_sendRequest
                          _getMillis
 ---------------------------------------------------------------------------------
 (3) _getMillis                                            4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (4) _arp_sendRequest                                     52    44      8   55272
                                              0 BANK1     52    44      8
                           _arp_send
   _ethernetController_getMacAddress
            _ipv4_getIPSourceAddress
                     _mac_setAllZero
 ---------------------------------------------------------------------------------
 (3) _mac_setAllZero                                       3     1      2     310
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _ipv4_getIPSourceAddress                              4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (5) _ethernetController_getMacAddress                    12     6      6    6367
                                             14 BANK0     12     6      6
_enc424j600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (5) _arp_send                                            85    53     32   47741
                                             71 BANK0     85    53     32
_ethernetController_getSourceMACAddr
      _ethernetController_sendPacket
_ethernetController_streamToTransmit
            _ethernet_txFrameRequest
                 _mac_setToBroadcast
 ---------------------------------------------------------------------------------
 (6) _mac_setToBroadcast                                   3     1      2     220
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (6) _ethernet_txFrameRequest                              5     3      2   17835
                                             66 BANK0      5     3      2
_ethernetController_writeDestination
_ethernetController_writeEtherTypeFi
              _memory_txFrameRequest
 ---------------------------------------------------------------------------------
 (7) _memory_txFrameRequest                               30    21      9    4950
                                             36 BANK0     30    21      9
                             ___wmul
                    _checkForOverlap
                  _entireMemoryEmpty
                   _entireMemoryFull
 ---------------------------------------------------------------------------------
 (8) _entireMemoryFull                                     1     1      0      99
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (8) _entireMemoryEmpty                                    1     1      0      99
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (8) _checkForOverlap                                     18     0     18    2268
                                             18 BANK0     18     0     18
            _checkForOverlapSwitched
 ---------------------------------------------------------------------------------
 (9) _checkForOverlapSwitched                             18     0     18    1072
                                              0 BANK0     18     0     18
 ---------------------------------------------------------------------------------
 (8) ___wmul                                               6     2      4     412
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (7) _ethernetController_writeEtherTypeFieldToBuffer      14     3     11    6059
                                             15 BANK0     14     3     11
   _enc424j600_setGPDATAWritePointer
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (7) _ethernetController_writeDestinationMACAddress       24     9     15    6257
                                             15 BANK0     24     9     15
   _enc424j600_setGPDATAWritePointer
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (6) _ethernetController_streamToTransmitBuffer           15     6      9    6981
                                             15 BANK0     15     6      9
   _enc424j600_setGPDATAWritePointer
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (8) _enc424j600_setGPDATAWritePointer                     5     3      2    3059
                                             10 BANK0      5     3      2
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (6) _ethernetController_sendPacket                        9     0      9   13618
                                             18 BANK0      9     0      9
             _enc424j600_setTXLength
       _enc424j600_setTXStartAddress
         _enc424j600_writeSingleByte
                _memory_txFrameClear
 ---------------------------------------------------------------------------------
 (7) _memory_txFrameClear                                  1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _enc424j600_setTXStartAddress                         4     2      2    5374
                                             14 BANK0      4     2      2
_enc424j600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (7) _enc424j600_setTXLength                               4     2      2    5374
                                             14 BANK0      4     2      2
_enc424j600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (6) _ethernetController_getSourceMACAddress              18     9      9    7244
                                             15 BANK0     18     9      9
                 _enc424j600_readSPI
   _enc424j600_setERXDATAReadPointer
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (6) _enc424j600_setERXDATAReadPointer                     5     3      2    3329
                                             10 BANK0      5     3      2
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (2) _UARTTransmitText                                     2     0      2   10775
                                             56 BANK0      2     0      2
                  _etherTypeToString (ARG)
   _ethernetController_getDeviceName (ARG)
   _ethernetController_getMacAddress (ARG)
                        _hexToString (ARG)
                        _intToString (ARG)
                   _ipAdressToString (ARG)
                 _ipProtocolToString (ARG)
                        _macToString (ARG)
 ---------------------------------------------------------------------------------
 (1) _ethernetController_init                              6     3      3   46276
                                             26 BANK0      6     3      3
  _enc424j600_enableAutoMACInsertion
         _enc424j600_enableReception
                 _enc424j600_initSPI
    _enc424j600_setNextPacketPointer
 _enc424j600_setRXBufferStartAddress
        _enc424j600_setRXTailPointer
   _ethernetController_checkDeviceId
       _ethernetController_softReset
 ---------------------------------------------------------------------------------
 (2) _ethernetController_softReset                        12     9      3   14613
                                             14 BANK0     12     9      3
_enc424j600_readControlRegisterUnban
_enc424j600_writeControlRegisterUnba
         _enc424j600_writeSingleByte
 ---------------------------------------------------------------------------------
 (2) _ethernetController_checkDeviceId                     7     4      3    6360
                                             14 BANK0      7     4      3
_enc424j600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (5) _enc424j600_setRXTailPointer                          4     2      2    5554
                                             14 BANK0      4     2      2
_enc424j600_writeControlRegisterUnba
_ethernetController_getNextPacketPoi (ARG)
 ---------------------------------------------------------------------------------
 (2) _enc424j600_setRXBufferStartAddress                   4     2      2    5374
                                             14 BANK0      4     2      2
_enc424j600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (4) _enc424j600_setNextPacketPointer                      2     0      2     211
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _enc424j600_enableReception                           0     0      0    2650
         _enc424j600_writeSingleByte
 ---------------------------------------------------------------------------------
 (5) _enc424j600_writeSingleByte                           1     1      0    2650
                                             10 BANK0      1     1      0
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (2) _enc424j600_enableAutoMACInsertion                    1     1      0   11369
                                             14 BANK0      1     1      0
_enc424j600_readControlRegisterUnban
_enc424j600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (6) _enc424j600_writeControlRegisterUnbanked              4     2      2    5148
                                             10 BANK0      4     2      2
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (1) _ethernetController_getDeviceName                    13    11      2      40
                                              0 BANK0     13    11      2
 ---------------------------------------------------------------------------------
 (1) _ethernetController_getCurrentPacketCount             0     0      0    6215
          _enc424j600_getPacketCount
 ---------------------------------------------------------------------------------
 (3) _enc424j600_getPacketCount                            1     1      0    6215
                                             14 BANK0      1     1      0
_enc424j600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (6) _enc424j600_readControlRegisterUnbanked               4     2      2    6144
                                             10 BANK0      4     2      2
                 _enc424j600_readSPI
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (6) _enc424j600_writeSPI                                 10     8      2    2616
                                              0 BANK0     10     8      2
                 _enc424j600_initSPI
 ---------------------------------------------------------------------------------
 (6) _enc424j600_readSPI                                  10     8      2     906
                                              0 BANK0     10     8      2
                 _enc424j600_initSPI
 ---------------------------------------------------------------------------------
 (7) _enc424j600_initSPI                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UARTInit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                19    19      0    1063
                                             21 COMRAM    19    19      0
                      _buttonHandler
                 _sevenSegmentUpdate
                         _updateTime
 ---------------------------------------------------------------------------------
 (12) _updateTime                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _sevenSegmentUpdate                                  7     5      2     875
                                             14 COMRAM     7     5      2
                        _parseNumber
 ---------------------------------------------------------------------------------
 (13) _parseNumber                                         7     4      3     641
                                              7 COMRAM     7     4      3
                          i2___lwdiv
 ---------------------------------------------------------------------------------
 (14) i2___lwdiv                                           7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (12) _buttonHandler                                      10     8      2     188
                                              0 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UARTInit
   _UARTTransmitText
     _etherTypeToString (ARG)
     _ethernetController_getDeviceName (ARG)
     _ethernetController_getMacAddress (ARG)
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
     _hexToString (ARG)
       _hexToChar
     _intToString (ARG)
       _ltoa
         _ultoa
           ___lldiv
           ___llmod
     _ipAdressToString (ARG)
       ___lwdiv
       ___lwmod
         _rand (ARG)
           ___lmul
     _ipProtocolToString (ARG)
     _macToString (ARG)
       _ethernetController_getMacAddress (ARG)
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
   _ethernetController_checkDeviceId
     _enc424j600_readControlRegisterUnbanked
       _enc424j600_readSPI
         _enc424j600_initSPI
       _enc424j600_writeSPI
         _enc424j600_initSPI
   _ethernetController_getCurrentPacketCount
     _enc424j600_getPacketCount
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
   _ethernetController_getDeviceName
   _ethernetController_getMacAddress
     _enc424j600_readControlRegisterUnbanked
       _enc424j600_readSPI
         _enc424j600_initSPI
       _enc424j600_writeSPI
         _enc424j600_initSPI
   _ethernetController_init
     _enc424j600_enableAutoMACInsertion
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _enc424j600_writeControlRegisterUnbanked
         _enc424j600_writeSPI
           _enc424j600_initSPI
     _enc424j600_enableReception
       _enc424j600_writeSingleByte
         _enc424j600_writeSPI
           _enc424j600_initSPI
     _enc424j600_initSPI
     _enc424j600_setNextPacketPointer
     _enc424j600_setRXBufferStartAddress
       _enc424j600_writeControlRegisterUnbanked
         _enc424j600_writeSPI
           _enc424j600_initSPI
     _enc424j600_setRXTailPointer
       _enc424j600_writeControlRegisterUnbanked
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _ethernetController_getNextPacketPointer (ARG)
         _enc424j600_getNextPacketPointer
     _ethernetController_checkDeviceId
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
     _ethernetController_softReset
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _enc424j600_writeControlRegisterUnbanked
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _enc424j600_writeSingleByte
         _enc424j600_writeSPI
           _enc424j600_initSPI
   _ethernetController_setLEDConfig
     _enc424j600_readControlRegisterUnbanked
       _enc424j600_readSPI
         _enc424j600_initSPI
       _enc424j600_writeSPI
         _enc424j600_initSPI
     _enc424j600_writeControlRegisterUnbanked
       _enc424j600_writeSPI
         _enc424j600_initSPI
   _handleStackBackgroundTasks
     _arp_background
       _UARTTransmitText
         _etherTypeToString (ARG)
         _ethernetController_getDeviceName (ARG)
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
         _hexToString (ARG)
           _hexToChar
         _intToString (ARG)
           _ltoa
             _ultoa
               ___lldiv
               ___llmod
         _ipAdressToString (ARG)
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
         _ipProtocolToString (ARG)
         _macToString (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
       _arp_gratuitous
         _arp_sendRequest
           _arp_send
             _ethernetController_getSourceMACAddress
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_setERXDATAReadPointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernetController_sendPacket
               _enc424j600_setTXLength
                 _enc424j600_writeControlRegisterUnbanked
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
               _enc424j600_setTXStartAddress
                 _enc424j600_writeControlRegisterUnbanked
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
               _enc424j600_writeSingleByte
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _memory_txFrameClear
             _ethernetController_streamToTransmitBuffer
               _enc424j600_setGPDATAWritePointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernet_txFrameRequest
               _ethernetController_writeDestinationMACAddress
                 _enc424j600_setGPDATAWritePointer
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _ethernetController_writeEtherTypeFieldToBuffer
                 _enc424j600_setGPDATAWritePointer
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _memory_txFrameRequest
                 ___wmul
                 _checkForOverlap
                   _checkForOverlapSwitched
                 _entireMemoryEmpty
                 _entireMemoryFull
             _mac_setToBroadcast
           _ethernetController_getMacAddress
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _ipv4_getIPSourceAddress
           _mac_setAllZero
         _getMillis
       _arp_probe
         ___lwmod
           _rand (ARG)
             ___lmul
         _arp_checkForEntry
           _getMillis
           _ipv4_cmp
         _arp_sendRequest
           _arp_send
             _ethernetController_getSourceMACAddress
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_setERXDATAReadPointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernetController_sendPacket
               _enc424j600_setTXLength
                 _enc424j600_writeControlRegisterUnbanked
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
               _enc424j600_setTXStartAddress
                 _enc424j600_writeControlRegisterUnbanked
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
               _enc424j600_writeSingleByte
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _memory_txFrameClear
             _ethernetController_streamToTransmitBuffer
               _enc424j600_setGPDATAWritePointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernet_txFrameRequest
               _ethernetController_writeDestinationMACAddress
                 _enc424j600_setGPDATAWritePointer
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _ethernetController_writeEtherTypeFieldToBuffer
                 _enc424j600_setGPDATAWritePointer
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _memory_txFrameRequest
                 ___wmul
                 _checkForOverlap
                   _checkForOverlapSwitched
                 _entireMemoryEmpty
                 _entireMemoryFull
             _mac_setToBroadcast
           _ethernetController_getMacAddress
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _ipv4_getIPSourceAddress
           _mac_setAllZero
         _getMillis
         _ipv4_setToAllZero
         _rand
           ___lmul
       _ipv4_SrcAddrChanged
       _ipv4_getPreliminaryIPSourceAddress
     _ethernetController_clearInterruptFlag
       _enc424j600_clearInterruptFlag
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_writeControlRegisterUnbanked
           _enc424j600_writeSPI
             _enc424j600_initSPI
     _ethernetController_newPacketAvailable
       _enc424j600_getPacketCount
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
     _ethernetController_pollInterruptFlags
       _enc424j600_getInterruptFlags
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
     _ethernetController_setLEDConfig
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _enc424j600_writeControlRegisterUnbanked
         _enc424j600_writeSPI
           _enc424j600_initSPI
     _ethernetController_updateLinkStatus
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _enc424j600_readPHYRegister
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_writeControlRegisterUnbanked
           _enc424j600_writeSPI
             _enc424j600_initSPI
     _ethernet_rxGetNewFrame
       _UARTTransmitInt
         _UARTTransmitText
           _etherTypeToString (ARG)
           _ethernetController_getDeviceName (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _hexToString (ARG)
             _hexToChar
           _intToString (ARG)
             _ltoa
               _ultoa
                 ___lldiv
                 ___llmod
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
               _rand (ARG)
                 ___lmul
           _ipProtocolToString (ARG)
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
         _intToString
           _ltoa
             _ultoa
               ___lldiv
               ___llmod
       _UARTTransmitText
         _etherTypeToString (ARG)
         _ethernetController_getDeviceName (ARG)
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
         _hexToString (ARG)
           _hexToChar
         _intToString (ARG)
           _ltoa
             _ultoa
               ___lldiv
               ___llmod
         _ipAdressToString (ARG)
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
         _ipProtocolToString (ARG)
         _macToString (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
       _arp_handleNewPacket
         _UARTTransmitText
           _etherTypeToString (ARG)
           _ethernetController_getDeviceName (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _hexToString (ARG)
             _hexToChar
           _intToString (ARG)
             _ltoa
               _ultoa
                 ___lldiv
                 ___llmod
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
               _rand (ARG)
                 ___lmul
           _ipProtocolToString (ARG)
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
         _arp_parseFromRXBuffer
           _ethernetController_streamFromRXBuffer
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_setERXDATAReadPointer
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
           _ipv4_cmp
           _ipv4_isAllZero
           _mac_cmp
           _mac_isAllZero
         _arp_sendReply
           _UARTTransmitText
             _etherTypeToString (ARG)
             _ethernetController_getDeviceName (ARG)
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
             _hexToString (ARG)
               _hexToChar
             _intToString (ARG)
               _ltoa
                 _ultoa
                   ___lldiv
                   ___llmod
             _ipAdressToString (ARG)
               ___lwdiv
               ___lwmod
                 _rand (ARG)
                   ___lmul
             _ipProtocolToString (ARG)
             _macToString (ARG)
               _ethernetController_getMacAddress (ARG)
                 _enc424j600_readControlRegisterUnbanked
                   _enc424j600_readSPI
                     _enc424j600_initSPI
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
           _arp_send
             _ethernetController_getSourceMACAddress
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_setERXDATAReadPointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernetController_sendPacket
               _enc424j600_setTXLength
                 _enc424j600_writeControlRegisterUnbanked
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
               _enc424j600_setTXStartAddress
                 _enc424j600_writeControlRegisterUnbanked
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
               _enc424j600_writeSingleByte
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _memory_txFrameClear
             _ethernetController_streamToTransmitBuffer
               _enc424j600_setGPDATAWritePointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernet_txFrameRequest
               _ethernetController_writeDestinationMACAddress
                 _enc424j600_setGPDATAWritePointer
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _ethernetController_writeEtherTypeFieldToBuffer
                 _enc424j600_setGPDATAWritePointer
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _memory_txFrameRequest
                 ___wmul
                 _checkForOverlap
                   _checkForOverlapSwitched
                 _entireMemoryEmpty
                 _entireMemoryFull
             _mac_setToBroadcast
           _ethernetController_getMacAddress
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _ipAdressToString
             ___lwdiv
             ___lwmod
               _rand (ARG)
                 ___lmul
           _ipv4_cmp
           _ipv4_getIPSourceAddress
           _macToString
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
         _arp_setNewEntry
           _getMillis (ARG)
         _ethernetController_dropPacket
           _enc424j600_setRXTailPointer
             _enc424j600_writeControlRegisterUnbanked
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernetController_getNextPacketPointer (ARG)
               _enc424j600_getNextPacketPointer
           _enc424j600_writeSingleByte
             _enc424j600_writeSPI
               _enc424j600_initSPI
           _ethernetController_getNextPacketPointer
             _enc424j600_getNextPacketPointer
         _getMillis
         _ipAdressToString
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
         _macToString
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
       _etherTypeToString
       _ethernetController_dropPacket
         _enc424j600_setRXTailPointer
           _enc424j600_writeControlRegisterUnbanked
             _enc424j600_writeSPI
               _enc424j600_initSPI
           _ethernetController_getNextPacketPointer (ARG)
             _enc424j600_getNextPacketPointer
         _enc424j600_writeSingleByte
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _ethernetController_getNextPacketPointer
           _enc424j600_getNextPacketPointer
       _ethernetController_getEtherTypeField
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_setERXDATAReadPointer
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _ethernetController_getNextPacketPointer
         _enc424j600_getNextPacketPointer
       _ethernetController_getRSV
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_setERXDATAReadPointer
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_updateReceiveStatusVector
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _ethernetController_updateNextPacketPointer
         _enc424j600_getNextPacketPointer
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_setERXDATAReadPointer
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_setNextPacketPointer
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _getMillis
       _intToString
         _ltoa
           _ultoa
             ___lldiv
             ___llmod
       _ipv4_handleNewPacket
         _UARTTransmitText
           _etherTypeToString (ARG)
           _ethernetController_getDeviceName (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _hexToString (ARG)
             _hexToChar
           _intToString (ARG)
             _ltoa
               _ultoa
                 ___lldiv
                 ___llmod
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
               _rand (ARG)
                 ___lmul
           _ipProtocolToString (ARG)
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
         _ethernetController_dropPacket
           _enc424j600_setRXTailPointer
             _enc424j600_writeControlRegisterUnbanked
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernetController_getNextPacketPointer (ARG)
               _enc424j600_getNextPacketPointer
           _enc424j600_writeSingleByte
             _enc424j600_writeSPI
               _enc424j600_initSPI
           _ethernetController_getNextPacketPointer
             _enc424j600_getNextPacketPointer
         _intToString
           _ltoa
             _ultoa
               ___lldiv
               ___llmod
         _ipAdressToString
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
         _ipProtocolToString
         _ipv4_checkHeaderChecksum
           _UARTTransmitText
             _etherTypeToString (ARG)
             _ethernetController_getDeviceName (ARG)
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
             _hexToString (ARG)
               _hexToChar
             _intToString (ARG)
               _ltoa
                 _ultoa
                   ___lldiv
                   ___llmod
             _ipAdressToString (ARG)
               ___lwdiv
               ___lwmod
                 _rand (ARG)
                   ___lmul
             _ipProtocolToString (ARG)
             _macToString (ARG)
               _ethernetController_getMacAddress (ARG)
                 _enc424j600_readControlRegisterUnbanked
                   _enc424j600_readSPI
                     _enc424j600_initSPI
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
           _hexToString
             _hexToChar
           _ipv4_calculateHeaderChecksum
         _ipv4_parseHeader
           _ethernetController_streamFromRXBuffer
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_setERXDATAReadPointer
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
       _macToString
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
     _ipv4_background
       _UARTTransmitText
         _etherTypeToString (ARG)
         _ethernetController_getDeviceName (ARG)
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
         _hexToString (ARG)
           _hexToChar
         _intToString (ARG)
           _ltoa
             _ultoa
               ___lldiv
               ___llmod
         _ipAdressToString (ARG)
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
         _ipProtocolToString (ARG)
         _macToString (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
       _ipAdressToString
         ___lwdiv
         ___lwmod
           _rand (ARG)
             ___lmul
     _ipv4_getIPSourceAddress
     _ipv4_setIPSourceAddress
       _UARTTransmitText
         _etherTypeToString (ARG)
         _ethernetController_getDeviceName (ARG)
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
         _hexToString (ARG)
           _hexToChar
         _intToString (ARG)
           _ltoa
             _ultoa
               ___lldiv
               ___llmod
         _ipAdressToString (ARG)
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
         _ipProtocolToString (ARG)
         _macToString (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
       _ipAdressToString
         ___lwdiv
         ___lwmod
           _rand (ARG)
             ___lmul
       _ipv4_getIPSourceAddress (ARG)
   _ipv4_setIPSourceAddress
     _UARTTransmitText
       _etherTypeToString (ARG)
       _ethernetController_getDeviceName (ARG)
       _ethernetController_getMacAddress (ARG)
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
       _hexToString (ARG)
         _hexToChar
       _intToString (ARG)
         _ltoa
           _ultoa
             ___lldiv
             ___llmod
       _ipAdressToString (ARG)
         ___lwdiv
         ___lwmod
           _rand (ARG)
             ___lmul
       _ipProtocolToString (ARG)
       _macToString (ARG)
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
     _ipAdressToString
       ___lwdiv
       ___lwmod
         _rand (ARG)
           ___lmul
     _ipv4_getIPSourceAddress (ARG)
   _macToString
     _ethernetController_getMacAddress (ARG)
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
   _printErrorMessage
     _UARTTransmitText
       _etherTypeToString (ARG)
       _ethernetController_getDeviceName (ARG)
       _ethernetController_getMacAddress (ARG)
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
       _hexToString (ARG)
         _hexToChar
       _intToString (ARG)
         _ltoa
           _ultoa
             ___lldiv
             ___llmod
       _ipAdressToString (ARG)
         ___lwdiv
         ___lwmod
           _rand (ARG)
             ___lmul
       _ipProtocolToString (ARG)
       _macToString (ARG)
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
     _intToString
       _ltoa
         _ultoa
           ___lldiv
           ___llmod
   _printEthernetState
     _UARTTransmitText
       _etherTypeToString (ARG)
       _ethernetController_getDeviceName (ARG)
       _ethernetController_getMacAddress (ARG)
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
       _hexToString (ARG)
         _hexToChar
       _intToString (ARG)
         _ltoa
           _ultoa
             ___lldiv
             ___llmod
       _ipAdressToString (ARG)
         ___lwdiv
         ___lwmod
           _rand (ARG)
             ___lmul
       _ipProtocolToString (ARG)
       _macToString (ARG)
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
   _sevenSegmentInit
   _srand
     _ethernetController_getMacAddress (ARG)
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
   _stack_init
     _arp_init
       _arp_setNewEntry
         _getMillis (ARG)
       _ipv4_setToAllZero
       _mac_setAllZero
     _ipv4_init

 _ISR (ROOT)
   _buttonHandler
   _sevenSegmentUpdate
     _parseNumber
       i2___lwdiv
   _updateTime

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100     11      8A      12       53.9%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0      F3      10       94.9%
BITBANK1           100      0       0       7        0.0%
BANK1              100     8B      F1       8       94.1%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     A0      A0       5      100.0%
BITCOMRAM           5E      0       1       0        1.1%
COMRAM              5E     28      4F       1       84.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     35D       6        0.0%
DATA                 0      0     35D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Mar 17 19:46:30 2019

                                            ?_hexToString 0061  
                __end_of_ethernetController_getMacAddress 3F96  
               __size_of_ethernetController_getMacAddress 0074  
                      ??_ethernetController_getMacAddress 0074  
                       ?_ethernetController_getMacAddress 006E  
                        _ethernetController_getMacAddress 3F22  
                                             arp_init@mac 007C  
                                                      l92 45B6  
                                                      l84 2E48  
                                                      l86 2E2A  
                                                      l88 2E42  
                                                      l89 2E5E  
                        __end_of_ipv4_checkHeaderChecksum 35F6  
                 ethernetController_getSourceMACAddress@i 0080  
                                     ___wmul@multiplicand 0062  
                                      i2___lwdiv@dividend 0001  
                      ipv4_calculateHeaderChecksum@header 0060  
                                            __CFG_CP0$OFF 000000  
                                            __CFG_CP1$OFF 000000  
                                            __CFG_CP2$OFF 000000  
                                            __CFG_CP3$OFF 000000  
                                             __CFG_LVP$ON 000000  
                                             arp_send@arp 00A7  
                                 ??_memory_txFrameRequest 008D  
                                                     l210 3A42  
                                                     l140 3CD8  
                                                     l204 3A60  
                                                     l213 3A80  
                                                     l205 3A4A  
                                                     l134 3E62  
                                                     l142 3D20  
                                                     l214 3A68  
                                                     l206 3A36  
                                                     l135 3EA8  
                                                     l232 423E  
                                                     l216 3A96  
                                                     l241 40FE  
                                                     l217 3A70  
                                                     l209 3A3E  
                                                     l218 3A76  
                                                     l155 40AC  
                                                     l412 4866  
                                                     l420 4850  
                                                     l180 428A  
                                                     l245 4144  
                                                     l317 3B78  
                                                     l165 3EE2  
                                                     l414 4888  
                                                     l182 42AE  
                                                     l263 2C42  
                                                     l183 42C2  
                                                     l432 2CAA  
                                                     l520 31F2  
                                                     l361 34C0  
                                                     l418 482E  
                                                     l258 2B8A  
                                                     l370 036E  
                                                     l522 3252  
                                                     l443 2D28  
                                                     l195 3AC8  
                                                     l179 42C8  
                                                     l187 478A  
                                                     l371 04E8  
                                                     l436 2D2C  
                                                     l188 47A0  
                                                     l372 03BA  
                                                     l453 38B6  
                                                     l437 2D18  
                                                     l197 3AF8  
                                                     l373 0516  
                                                     l438 2CE2  
                                                     l462 0638  
                                                     l390 46F6  
                                                     l374 03D6  
                                                     l366 024E  
                                                     l518 3210  
                                                     l455 38B2  
                                                     l439 2CDE  
                                                     l359 34A0  
                                                     l199 3B1E  
                                                     l375 03F2  
                                                     l367 0292  
                                                     l519 31DA  
                                                     l631 17A2  
                                                     l448 387E  
                                                     l472 06EE  
                                                     l464 065A  
                                                     l392 4722  
                                                     l384 493C  
                                                     l368 032E  
                                                     l481 08B4  
                                                     l801 4682  
                                                     l369 034E  
                                                     l633 17AA  
                                                     l482 0962  
                                                     l474 06F6  
                                                     l466 0684  
                                                     l386 4956  
                                                     l802 4662  
                                                     l810 461E  
                                                     l650 39F0  
                                                     l626 15A8  
                                                     l459 38C6  
                                                     l379 4B10  
                                                     l643 3996  
                                                     l627 1618  
                                                     l476 0910  
                                                     l396 4AEA  
                                                     l820 1EF0  
                                                     l804 466E  
                                                     l812 462A  
                                                     l660 2A24  
                                                     l652 3A04  
                                                     l628 1650  
                                                     l477 0830  
                                                     l469 06BA  
                                                     l805 4678  
                                                     l813 4634  
                                                     l661 2A34  
                                                     l645 39AA  
                                                     l629 1762  
                                                     l910 0C88  
                                                     l822 2010  
                                                     l902 20F6  
                                                     l814 463E  
                                                     l662 2A44  
                                                     l487 09D2  
                                                     l823 2064  
                                                     l647 39C6  
                                                     l488 0AB0  
                                                     l912 0D26  
                                                     l904 2136  
                                                     l664 2AB4  
                                                     l656 2A54  
                                                     l761 4392  
                                                     l489 0AD2  
                                                     l921 0E18  
                                                     l913 0CDE  
                                                     l905 2214  
                                                     l809 4648  
                                                     l665 2A78  
                                                     l657 2A04  
                                                     l649 39DA  
                                                     l826 20AA  
                                                     l906 2228  
                                                     l666 2AE6  
                                                     l763 43BA  
                                                     l923 0E4E  
                                                     l915 0D7C  
                                                     l667 2A86  
                                                     l659 2A14  
                                                     l940 197E  
                                                     l916 0D34  
                                                     l780 4B8E  
                                                     l668 2A96  
                                                     l925 0E90  
                                                     l909 0CD0  
                                                     l669 2AA4  
                                                     l942 19F4  
                                                     l926 0E92  
                                                     l918 0DD2  
                                                     l943 19C0  
                                                     l927 0EC8  
                                                     l919 0D8A  
                                                     l791 2E9C  
                                                     l936 1970  
                                                     l792 2F6A  
                                                     l945 1A36  
                                                     l937 193C  
                                                     l793 2EEC  
                                                     l777 4B82  
                                                     l785 32DA  
                                                     l946 1A02  
                                                     l939 19B2  
                                                     l963 1EB4  
                                                     l795 2F20  
                                                     l972 1E7E  
                                                     l964 1CD2  
                                                     l973 1E96  
                                                     l965 1ED0  
                                                     l797 2F5C  
                                                     l990 2652  
                                                     l966 1D24  
                                                     l991 26F6  
                                                     l975 1EA2  
                                                     l967 1DCC  
                                                     l968 1DD4  
                                                     l985 270E  
                                                     l986 25CA  
                                                     l987 2722  
                                                     l988 25E6  
                                            __CFG_CPB$OFF 000000  
                                            __CFG_CPD$OFF 000000  
                                                     _ISR 0008  
           enc424j600_writeControlRegisterUnbanked@opcode 006D  
                            ??_enc424j600_writeSingleByte 006A  
                __end_of_ethernetController_getDeviceName 4B70  
               __size_of_ethernetController_getDeviceName 0024  
                      ??_ethernetController_getDeviceName 0062  
                       ?_ethernetController_getDeviceName 0060  
                        _ethernetController_getDeviceName 4B4C  
                                memory_txFrameClear@index 0060  
                    enc424j600_readPHYRegister@unusedBits 0078  
                     ethernetController_getMacAddress@mac 0074  
                          memory_txFrameRequest@freeIndex 00A1  
                                                     prod 000FF3  
                                            hexToChar@val 0060  
           ethernetController_streamFromRXBuffer@startEnd 0071  
                                                     wreg 000FE8  
                                              _TXSTA1bits 000FAC  
                                      _sevenSegmentUpdate 35F6  
               ethernetController_getEtherTypeField@field 006F  
                                  _numberOfOccupiedFields 0048  
                      ethernetController_setLEDConfig@LED 006F  
                      __size_of_ethernetController_getRSV 0074  
                            ipv4_sendFrame@requestCounter 0044  
                      __end_of_enc424j600_readPHYRegister 2C44  
                              _enc424j600_readPHYRegister 2B22  
                          __end_of_enc424j600_setTXLength 4A10  
                                        ??_arp_background 014C  
                                                    ?_ISR 0001  
                          ?_ethernetController_sendPacket 0072  
                                                    l1003 3006  
                                                    l1004 2FD4  
                                                    l1005 3032  
                                                    l1014 36C2  
                                                    l1006 2FE4  
                                                    l1110 25B0  
                                                    l1030 41E4  
                                                    l1111 2568  
                                                    l1008 2FF6  
                                                    l1024 337A  
                                                    l1112 244A  
                                                    l1017 375E  
                                                    l1026 33D2  
                                                    l1114 2460  
                                                    l1115 2476  
                                                    l1132 496C  
                                                    l1116 2494  
                                                    l1117 2544  
                                                    l1126 4738  
                                                    l1134 4986  
                                                    l1128 4764  
                                                    l1138 4BC2  
                                                    l1163 42F4  
                                                    l1164 4308  
                                                    l1092 357A  
                                                    l1085 1BF6  
                                                    l1502 3BEA  
                                                    l1503 3BDE  
                                                    l1087 1C3C  
                                                    l1512 4172  
                                                    l1096 22A2  
                                                    l1513 4166  
                                                    l1506 3C1E  
                                                    l1507 3C2C  
                                                    l1516 419A  
                                                    l1517 41A8  
                                                    l1551 4468  
                                                    l1570 43FE  
                                                    l1555 308A  
                                                    l1580 46B4  
                                                    l1557 30E6  
                                                    l1573 4426  
                                                    l1558 3154  
                                                    l1574 4430  
                                                    l1583 46D4  
                                                    l1584 46DE  
                                                    l1569 4406  
                                                    l1579 46BC  
                                                    l8121 4B08  
                                                    l9051 2BBC  
                                                    l8315 2F5C  
                                                    l8307 2F34  
                                                    l8069 3EA8  
                                                    l8325 4934  
                                                    l8079 40A4  
                                                    l7543 2D14  
                                                    l7551 4C4A  
                                                    l8415 1EE8  
                                                    l8319 2F6A  
                                                    l8345 46EE  
                                                    l7563 426C  
                                                    l7547 2D5E  
                                                    l9235 26BA  
                                                    l7653 485E  
                                                    l8365 4AE2  
                                                    l8455 4964  
                                                    l7809 3D18  
                                                    l7673 4826  
                                                    l8297 2F00  
                                                    l8475 4730  
         ethernetController_streamToTransmitBuffer@opcode 007D  
                                                    l7791 3CD0  
                                                    l7919 0828  
                                                    l8727 0EC0  
                                                    l8903 1C34  
                                                    l7849 412C  
                                                    l9297 2E34  
                                                    l7953 095A  
                                                    l8833 36BA  
                                                    l8931 357A  
                                                    l9651 41DC  
                                                    l8847 375E  
                                                    l8857 4BBA  
                                                    l8785 3372  
                                                    l8891 1BEE  
                                                    l8967 3EDA  
                                                    STR_1 7FCF  
                                                    STR_2 7FFB  
                                                    STR_3 7F6E  
                                                    STR_4 7F8F  
                                                    STR_5 7F0D  
                           ?_ethernetController_softReset 006E  
                                                    STR_6 7FCF  
                                                    STR_7 7FFB  
                                                    STR_8 7FC1  
                                                    STR_9 7FBA  
               ethernetController_clearInterruptFlag@flag 0072  
               enc424j600_setRXBufferStartAddress@lowByte 0070  
                                                    _RCIE 007CED  
                                                    u8020 426C  
                                                    _RCIF 007CF5  
                                                    u8030 427C  
                                                    u8110 387A  
                                                    u8040 3828  
                                                    u9001 3520  
                                                    u8050 3836  
                                                    u8060 3844  
                                                    u8300 2CA6  
                                                    u8220 4854  
                                                    u8070 3852  
                                                    u8230 2C54  
                                                    _RCIP 007CFD  
                                                    u8240 2C62  
                                                    u9120 46C0  
                                                    u8401 2D48  
                                                    u8250 2C70  
                                                    u8260 2C7E  
                                                    u9300 4726  
                                                    u8501 062E  
                                                    u9141 3F8C  
                                                    u9150 43B2  
                                                    u8430 3D00  
                                                    u8190 488C  
                                                    u9230 2F46  
                                                    u8351 2CEC  
                                                    u9160 43BE  
                                                    u9400 203C  
                                                    u9240 2F6A  
                                                    u8361 2CFE  
                                                    u8521 0650  
                                                    u9170 43DE  
                                                    u8450 3D3A  
                                                    u9090 440A  
                                                    u9420 20AE  
                                                    u9340 327C  
                                                    u9157 43A8  
                                                    u8701 0906  
                                                    u9501 1812  
                                                    u8470 412C  
                                                    u9270 495A  
                                                    u9350 32AA  
                                                    u8391 2D36  
                                                    u8551 067A  
                                                    u9511 1824  
                                                    u9191 2E76  
                                                    u8480 413C  
                                                    u9360 3308  
                                                    u9177 43D4  
                                                    u8641 084E  
                                                    u8561 06B0  
                                                    u9601 1924  
                                                    u9450 498A  
                                                    u8811 0AC8  
                                                    u8651 086C  
                                                    u9611 1946  
                                                    u9531 1870  
                                                    u9355 32A0  
                                                    u8741 099E  
                                                    u9541 1888  
                                                    u9365 32FE  
                                                    u8831 0AE4  
                                                    u8751 09BC  
                                                    u9631 1988  
                                                    u9551 18A2  
                                                    u9480 4768  
                                                    u9720 1486  
                                                    u8681 08AA  
                                                    u9561 18BC  
                                                    u9705 125A  
                                                    u8930 40D2  
                                                    u8770 09D6  
                                                    u8690 08B8  
                                                    u8850 3BEE  
                                                    u9810 0FB2  
                                                    u9651 19CA  
                                                    u9571 18D6  
                                                    u9491 17F6  
                                                    u9715 1308  
                                                    u8941 40DE  
                                                    u9581 18F0  
                                                    u9725 147C  
                                                    u9910 107C  
                                                    u9830 0FDC  
                                                    u9750 0F40  
                                                    u8791 0AA6  
                                                    u8951 3478  
                                                    u9671 1A0C  
                                                    u9591 190A  
                                                    u8880 4176  
                                                    u9808 0F8E  
                                                    u9930 10A2  
                                                    u9850 1002  
                                                    u9770 0F64  
                                                    u9691 1A48  
                                                    u9908 1058  
                                                    u9828 0FB6  
                                                    u8981 34D2  
                                                    u9950 10CA  
                                                    u9870 102A  
                                                    u9790 0F8A  
                                                    u8991 34EC  
                                                    u9928 1080  
                                                    u9848 0FE0  
                                                    u9768 0F44  
                                                    u9970 10F4  
                                                    u9890 1054  
                                                    u9948 10A6  
                                                    u9868 1006  
                                                    u9788 0F68  
                                                    u9990 111A  
                                                    u9968 10CE  
                                                    u9888 102E  
                                                    u9988 10F8  
                                                    _TRMT 007D61  
                                                    _TXIF 007CF4  
                                          mac_isAllZero@i 0062  
                                     ?_sevenSegmentUpdate 000F  
                                       _ipv4_setToAllZero 4BB4  
                                                    _main 1510  
                                                    _rand 433A  
                                 printEthernetState@state 009A  
                                                    _ltoa 443A  
                                                    _time 0029  
                                                    fsr0h 000FEA  
                                                    fsr1h 000FE2  
                                      i2___lwdiv@quotient 0005  
                                                    indf0 000FEF  
                                                    fsr2h 000FDA  
                                                    fsr0l 000FE9  
                                                    indf1 000FE7  
                                                    indf2 000FDF  
                                                    fsr1l 000FE1  
                                                    fsr2l 000FD9  
                                                    btemp 0050  
                                           __CFG_BORV$190 000000  
                               __size_of_sevenSegmentInit 001A  
                                 _ethernetController_init 3F96  
                                      ?_ipv4_setToAllZero 0060  
                                                    prodh 000FF4  
                                                    prodl 000FF3  
                     __size_of_handleStackBackgroundTasks 00F2  
                                                    start 00E8  
          __end_of_ethernetController_getSourceMACAddress 40E8  
         __size_of_ethernetController_getSourceMACAddress 0070  
                ??_ethernetController_getSourceMACAddress 0078  
                 ?_ethernetController_getSourceMACAddress 006F  
                  _ethernetController_getSourceMACAddress 4078  
                                            arp_probe@err 0149  
                                           __CFG_IESO$OFF 000000  
                                 __end_of_UARTTransmitInt 4BB4  
                                         ??_mac_isAllZero 0062  
                                           __CFG_MCLRE$ON 000000  
                              memory_txFrameRequest@field 0098  
                                            ___param_bank 000000  
                           ethernet_rxGetNewFrame@counter 0035  
                                 _checkForOverlapSwitched 3818  
              enc424j600_setRXBufferStartAddress@highByte 0071  
            __end_of_ethernetController_getEtherTypeField 4078  
           __size_of_ethernetController_getEtherTypeField 0070  
                  ??_ethernetController_getEtherTypeField 0078  
                   ?_ethernetController_getEtherTypeField 006F  
                    _ethernetController_getEtherTypeField 4008  
                                                   ??_ISR 0016  
                                     ??_ipv4_setToAllZero 0062  
                             ?_enc424j600_enableReception 0001  
                      __size_of_enc424j600_getPacketCount 001A  
                                          _ipv4_isAllZero 495E  
                     ethernetController_setLEDConfig@data 0070  
                                    ??_sevenSegmentUpdate 0011  
                                            ?_intToString 0084  
                     ethernetController_setLEDConfig@conf 006E  
        __end_of_ethernetController_getCurrentPacketCount 4D10  
       __size_of_ethernetController_getCurrentPacketCount 0006  
               ?_ethernetController_getCurrentPacketCount 0001  
              ??_ethernetController_getCurrentPacketCount 006F  
                _ethernetController_getCurrentPacketCount 4D0A  
                                           arp_send@field 00F3  
                                                   l10217 258E  
                                                   l10219 2598  
                                     arp_checkForEntry@ip 0067  
                                       _nextPacketPointer 0042  
                                                   ?_main 0001  
                                                   ?_rand 006C  
                                                   _CCPR1 000FBE  
                                                   STR_10 7E69  
                                                   ?_ltoa 007A  
                                                   STR_11 7FCF  
                                                   STR_20 7CDB  
                                                   STR_12 7FF4  
                                                   STR_21 7FFD  
                                                   STR_13 7FF7  
                                                   STR_14 7FE0  
                                                   STR_30 7F56  
                                                   STR_22 7B66  
                                                   STR_15 7FF1  
                                                   STR_31 7E3E  
                                                   STR_23 7B99  
                                                   STR_24 7B66  
                                                   STR_32 7FDC  
                                                   STR_16 7FCF  
                                                   STR_40 7FAB  
                                                   STR_33 7B66  
                                                   STR_17 7F08  
                                                   STR_41 7EEC  
                                                   STR_25 7E0F  
                                                   STR_18 7C1E  
                                                   STR_50 7F99  
                                                   STR_26 7F62  
                                                   STR_34 7F49  
                                                   STR_42 7D81  
                                                   STR_27 7E67  
                                                   STR_19 7FFA  
                                                   STR_51 7FDB  
                                                   STR_43 7EB6  
                                                   STR_35 7EA3  
                                                   STR_60 7FCF  
                                                   STR_52 7FD1  
                                                   STR_28 7FA2  
                                                   STR_44 7F3B  
                                                   STR_36 7E90  
                                                   STR_29 7FDC  
                                                   STR_61 7E66  
                                                   STR_53 7FED  
                                                   STR_45 7F2C  
                                                   STR_37 7E55  
                                                   STR_62 7FCC  
                                                   STR_54 7EC9  
                                                   STR_38 7DBD  
                                                   STR_70 7CBA  
                                                   STR_46 7C95  
                                                   STR_63 7E66  
                                                   STR_55 7FD6  
                                                   STR_71 7DF7  
                                                   STR_39 7DDA  
                                                   STR_47 7B2F  
                                                   STR_80 7FF7  
                                                   STR_64 7FFB  
                                                   STR_56 7FE5  
                                                   STR_72 7D23  
                                                   STR_48 7D01  
                                                   STR_81 7FF7  
                                                   STR_57 7FE9  
                                                   STR_65 7F85  
                                                   STR_49 7D9F  
                                                   STR_73 7D44  
                                                   STR_82 7FF7  
                                                   STR_66 7F1D  
                                                   STR_58 7EDB  
                                                   STR_90 7BCA  
                                                   STR_83 7E66  
                                                   STR_75 7F7A  
                                                   STR_67 7EFD  
                                                   STR_91 7D63  
                                                   STR_59 7C48  
                                                   STR_68 7E66  
                                                   STR_84 7FFB  
                                                   STR_76 7FB3  
                                                   STR_92 7E27  
                                                   STR_77 7FFB  
                                                   STR_69 7FFB  
                                                   STR_85 7E7D  
                                                   STR_93 7C6F  
                                                   STR_94 7FDB  
                                                   STR_78 7FCF  
                                                   STR_86 7BF7  
                                                   STR_87 7FDB  
                                                   STR_79 7FC7  
                                                   STR_95 7AF4  
                                                   STR_88 7CDE  
                                                   STR_96 7C21  
                                                   STR_89 7AB4  
                                                   u10010 1142  
                                         __end_of___lldiv 3C3E  
                                                   u10030 116C  
                                                   u10111 11FA  
                                                   u11000 28CC  
                                                   u10008 111E  
                                                   u10050 1194  
                                                   u11100 2956  
                                                   u11020 28E6  
                                                   u10108 11E2  
                                                   u10028 1146  
                                                   u10230 0E8C  
                                                   u10070 11B8  
                                                   u11040 2902  
                                                   u10400 33D6  
                                                   u10048 1170  
                                                   u10321 2774  
                                                   u11210 4C5C  
                                                   u11130 2988  
                                                   u11018 28D0  
                                                   u10090 11DE  
                                                   u10331 2786  
                                                   u10411 3414  
                                                   u11124 296C  
                                                   u11060 2920  
                                                   u10068 1198  
                                                   u10421 3770  
                                                   u11125 2966  
                                                   u10341 27EE  
                                                   u11301 02A4  
                                                   u11150 29A6  
                                                   u11118 295A  
                                                   u11038 28EA  
                                                   u10431 37D6  
                                                   u10351 2810  
                                                   u11208 29DE  
                                                   u11080 293A  
                                                   u10280 0EC0  
                                                   u10088 11BC  
                                                   u10600 3EFC  
                                                   u10441 37F8  
                                                   u10361 2822  
                                                   u11170 29C2  
                                                   u11058 2906  
                                                   u10530 1C30  
                                                   u10451 380A  
                                                   u10291 0EDE  
                                                   u10371 2846  
                                                   u10611 3F18  
                                                   u11148 298C  
                                                   u11341 0422  
                                                   u11190 29DA  
                                                   u11078 2924  
                                                   u10550 1C76  
                                                   u10711 214E  
                                                   u11351 045C  
                                                   u11431 41EE  
                                                   u11168 29AA  
                                         __end_of___llmod 41BA  
                                                   u10721 21AC  
                                                   u10561 1C96  
                                                   u11281 0178  
                                                   u11450 4B5A  
                                                   u10490 3762  
                                                   u10634 3B5C  
                                                   u11098 293E  
                                                   u10635 3B58  
                                                   u10571 353C  
                                                   u10644 3B9E  
                                                   u11188 29C6  
                                                   u10660 2BBC  
                                                   u10645 3B9A  
                                                   u10751 2232  
                                                   u10840 1E3E  
                                                   u10680 20E8  
                                                   u10761 2248  
                                                   u10770 2294  
                                                   u10691 2108  
                                                   u10781 22B6  
                                                   u11581 3A0E  
                                                   u10870 2648  
                                                   u11807 2E1E  
                                                   u10791 22F0  
                                                   u11681 1670  
                                                   u10890 26BA  
                                                   u11691 177C  
                                                   u10980 28B4  
                                                   u11767 1562  
                                                   u11777 16CC  
                                                   u11787 2B84  
                                                   u11797 2DE2  
                                                   u10998 28B8  
                                         __end_of___lwdiv 443A  
                              __end_of_printEthernetState 3A18  
                                         __end_of___lwmod 46E8  
                                           __CFG_WDTEN$ON 000000  
        ethernetController_streamToTransmitBuffer@pointer 003E  
                                                   i2l723 3628  
                                                   i2l732 3DA6  
                                                   i2l733 3D96  
                                                   i2l725 3630  
                                                   i2l735 3D9A  
                                                   i2l680 38FC  
                                                   i2l736 3D9E  
                                                   i2l728 364C  
                                                   i2l681 390C  
                                                   i2l737 3DA2  
                                                   i2l682 3950  
                                                   i2l690 007A  
                                                   i2l691 0098  
                                     _arp_handleNewPacket 20CC  
                                                   _SPBRG 000FAF  
                                                   _PORTA 000F80  
                                                   _PORTB 000F81  
                                                   _PORTC 000F82  
                        __size_of_ethernet_txFrameRequest 00E8  
                                                   _TRISA 000F92  
                                                   _TRISB 000F93  
                                                   _TRISC 000F94  
         __end_of_enc424j600_writeControlRegisterUnbanked 48C6  
        __size_of_enc424j600_writeControlRegisterUnbanked 0036  
               ??_enc424j600_writeControlRegisterUnbanked 006C  
                ?_enc424j600_writeControlRegisterUnbanked 006A  
                 _enc424j600_writeControlRegisterUnbanked 4890  
                                           __CFG_WRT0$OFF 000000  
                                           __CFG_WRT1$OFF 000000  
                                           __CFG_WRT2$OFF 000000  
                                     ___lmul@multiplicand 0064  
                                           __CFG_WRT3$OFF 000000  
                                          __CFG_EBTR0$OFF 000000  
                                          __CFG_FCMEN$OFF 000000  
                                          __CFG_EBTR1$OFF 000000  
                                          __CFG_EBTR2$OFF 000000  
                                          __CFG_EBTR3$OFF 000000  
                                         __end_of_mac_cmp 472A  
                                         _ipv4_background 2426  
                                        __end_of_UARTInit 4CA6  
                                         ??_arp_sendReply 00FC  
                                           __CFG_WRTB$OFF 000000  
                                           __CFG_WRTC$OFF 000000  
                                           __CFG_WRTD$OFF 000000  
                                          __CFG_EBTRB$OFF 000000  
                                                   _randx 0049  
                               __end_of_ipv4_setToAllZero 4BD2  
                                                   _srand 4CA6  
                                                   _stack 0300  
                               arp_background@errAnnounce 0152  
                                                   _ultoa 307A  
           ethernetController_streamToTransmitBuffer@data 007C  
                       __end_of_ethernetController_getRSV 3F22  
                                          __pbitbssCOMRAM 0278  
                                                   pclath 000FFA  
                                                   tablat 000FF5  
                            ethernet_txFrameRequest@frame 00A2  
                                        ?_checkForOverlap 0072  
                                                   plusw0 000FEB  
                                                   plusw1 000FE3  
                                                   plusw2 000FDB  
                             memory_txFrameRequest@i_1187 0097  
                                                   status 000FD8  
                                          __CFG_T3CMX$RC0 000000  
                                                   wtemp6 0051  
                       enc424j600_clearInterruptFlag@flag 0070  
                             __size_of_mac_setToBroadcast 0026  
                                          __CFG_ICPRT$OFF 000000  
                       enc424j600_clearInterruptFlag@temp 0071  
                                    ?_arp_handleNewPacket 00FC  
                                __end_of_UARTTransmitText 43E6  
                                          __CFG_PBADEN$ON 000000  
                                      __size_ofi2___lwdiv 0052  
                                            ?_parseNumber 0008  
                                        _ipAdressToString 1EDE  
                                         __initialization 3C3E  
                       ethernetController_softReset@F5983 004D  
                       ethernetController_softReset@F5985 0040  
                             memory_txFrameRequest@length 0084  
                                            __end_of_main 17DE  
                                  __end_of_ipv4_isAllZero 498E  
                                            __end_of_rand 4390  
                                            __end_of_ltoa 448E  
                                ?_ipv4_getIPSourceAddress 0060  
                                  arpEntryToString@string 027F  
                                ?_ipv4_setIPSourceAddress 009A  
                                    _ipv4_handleNewPacket 227A  
                                          __CFG_PCLKEN$ON 000000  
                              _memory_txFrameRequest$1183 0093  
                       __end_of_enc424j600_getPacketCount 4C22  
                                          arp_send@i_3070 00CF  
                                          arp_send@i_3071 00D0  
                                          arp_send@i_3069 00CE  
                                                  ??_main 0189  
                                                  ??_rand 006E  
                               __size_of_entireMemoryFull 0038  
                                                  ??_ltoa 0082  
                                           __activetblptr 000002  
                         handleStackBackgroundTasks@stack 0186  
                                        ??_arp_gratuitous 0134  
                                          __CFG_SDOMX$RB3 000000  
                                         __CFG_CCP2MX$RC1 000000  
       ethernetController_writeDestinationMACAddress@addr 006F  
       ethernetController_writeDestinationMACAddress@data 007E  
                ethernetController_pollInterruptFlags@reg 0080  
                                        ___llmod@dividend 0060  
                                    __size_of_macToString 0108  
                                                  ?_srand 007A  
                                                  _ANSELA 000F5B  
                                                  _ANSELB 000F5C  
                                                  _ANSELC 000F5D  
                              ethernetController_getRSV@i 0077  
                                                  ?_ultoa 006D  
                                    ipv4_parseHeader@temp 008E  
                       __size_of_ipv4_checkHeaderChecksum 00C8  
                              printEthernetState@oldState 0200  
                                                  i2l1570 44A4  
                                                  i2l1573 44CC  
                                                  i2l1574 44D6  
                                                  i2l1569 44AC  
                                                  i2l7075 3644  
                               ??_ethernetController_init 007D  
                               ?_ipv4_checkHeaderChecksum 009A  
       __end_of_ethernetController_streamToTransmitBuffer 3EAE  
      __size_of_ethernetController_streamToTransmitBuffer 0078  
             ??_ethernetController_streamToTransmitBuffer 0078  
              ?_ethernetController_streamToTransmitBuffer 006F  
               _ethernetController_streamToTransmitBuffer 3E36  
                                         _fSrcAddrChanged 0278  
                                   ??_arp_handleNewPacket 00FE  
                                                  _TXREG1 000FAD  
                                        mac_isAllZero@mac 0060  
                          ??_ethernetController_softReset 0071  
                               ??_checkForOverlapSwitched 0072  
                              ethernetController_init@err 007D  
                                  __size_of_buttonHandler 00AC  
                                 ?_ethernet_rxGetNewFrame 0178  
                                        ?_UARTTransmitInt 009A  
                                          __CFG_XINST$OFF 000000  
                                        __end_of_arp_init 4220  
                                        __end_of_arp_send 1A56  
                                                  ___lmul 42E2  
                                        __end_of_ipv4_cmp 476C  
                                         ?_ipv4_isAllZero 0060  
                                                  ___wmul 4A64  
                                   ?_ipv4_handleNewPacket 00B5  
                      __end_of_handleStackBackgroundTasks 326A  
                              _handleStackBackgroundTasks 3178  
                                          __CFG_STVREN$ON 000000  
                                   buttonHandler@oldState 0047  
                                               ??___lldiv 0068  
             enc424j600_writeControlRegisterUnbanked@addr 006C  
                                   buttonHandler@newState 0046  
             enc424j600_writeControlRegisterUnbanked@data 006A  
                                               ??___llmod 0068  
                                               ??___lwdiv 0064  
                                               ??___lwmod 0072  
                                    __size_of_hexToString 00EE  
                           enc424j600_setTXLength@lowByte 0070  
                            buttonHandler@debounceCounter 002D  
                                                  clear_0 3C84  
                                                  clear_1 3C90  
                                                  clear_2 3C9C  
                                                  clear_3 3CAA  
                              parseNumber@numberToDisplay 0008  
                                arp_parseFromRXBuffer@arp 009D  
                                 __end_of_ipv4_background 25BA  
  __end_of_ethernetController_writeEtherTypeFieldToBuffer 457E  
 __size_of_ethernetController_writeEtherTypeFieldToBuffer 004E  
        ??_ethernetController_writeEtherTypeFieldToBuffer 007A  
         ?_ethernetController_writeEtherTypeFieldToBuffer 006F  
          _ethernetController_writeEtherTypeFieldToBuffer 4530  
                                               ??_mac_cmp 0064  
                                        ??_mac_setAllZero 0062  
                                           main@prescaler 0379  
          ethernetController_streamToTransmitBuffer@field 006F  
          __end_of_enc424j600_readControlRegisterUnbanked 48FC  
         __size_of_enc424j600_readControlRegisterUnbanked 0036  
                ??_enc424j600_readControlRegisterUnbanked 006C  
                 ?_enc424j600_readControlRegisterUnbanked 006A  
                  _enc424j600_readControlRegisterUnbanked 48C6  
                                            __pdataCOMRAM 0049  
                                      _enc424j600_initSPI 4BD2  
                           ?_enc424j600_setTXStartAddress 006E  
                                      _enc424j600_readSPI 40E8  
                ethernetController_softReset@comFailCount 0072  
                                                  ltoa@cp 0082  
                                       __end_ofi2___lwdiv 44E0  
                                            __mediumconst 7AA8  
                             __size_of_ipProtocolToString 0048  
                                                  tblptrh 000FF7  
                                                  tblptrl 000FF6  
                                                  tblptru 000FF8  
                                                  srand@x 007A  
           __end_of_ethernetController_clearInterruptFlag 4CD0  
          __size_of_ethernetController_clearInterruptFlag 000E  
                  ?_ethernetController_clearInterruptFlag 0001  
                 ??_ethernetController_clearInterruptFlag 0072  
                   _ethernetController_clearInterruptFlag 4CC2  
                                     mac_setToBroadcast@i 0062  
                                                  ultoa@c 0079  
                                                  ultoa@v 0075  
                              __size_of_ipv4_setToAllZero 001E  
                                     ?_enc424j600_initSPI 0001  
                                      ipv4_background@err 009C  
                                          arp_probe@index 013C  
                                     ?_enc424j600_readSPI 0060  
                         ethernetController_softReset@err 0077  
                                         _numberToDisplay 0031  
                                    __CFG_LS48MHZ$SYS24X4 000000  
                                          arp_probe@state 01E5  
                                 ipAdressToString@address 02E3  
      __end_of_ethernetController_updateNextPacketPointer 3E36  
     __size_of_ethernetController_updateNextPacketPointer 007A  
             ?_ethernetController_updateNextPacketPointer 0001  
            ??_ethernetController_updateNextPacketPointer 006F  
              _ethernetController_updateNextPacketPointer 3DBC  
                     __size_of_enc424j600_enableReception 0008  
                                __size_of_arp_setNewEntry 00EE  
                       sevenSegmentUpdate@digitsToDisplay 0039  
                                              __accesstop 0060  
                                 __end_of__initialization 3CB0  
                                       _printErrorMessage 29F4  
                                __size_of_arp_sendRequest 00B2  
                            ??_enc424j600_readPHYRegister 0070  
           ethernetController_getEtherTypeField@ethertype 007C  
                                   _arp_parseFromRXBuffer 0AEE  
                          __end_of_ethernet_rxGetNewFrame 0612  
                                        _sevenSegmentInit 4BEE  
                            __size_of_enc424j600_writeSPI 0064  
               ethernetController_updateLinkStatus@temp16 0083  
                                           ___rparam_used 000001  
                                      ?_printErrorMessage 009A  
              ethernetController_pollInterruptFlags@flags 007E  
                             arp_parseFromRXBuffer@i_2994 0098  
                             arp_parseFromRXBuffer@i_2995 0099  
                             arp_parseFromRXBuffer@i_2996 009A  
                                 enc424j600_writeSPI@data 0060  
                                          __pcstackCOMRAM 0001  
                                        __CFG_nPWRTEN$OFF 000000  
                                 ipAdressToString@pointer 0087  
 enc424j600_updateReceiveStatusVector@receiveStatusVector 006C  
                                            __pidataBANK2 498E  
                                       ipv4_parseHeader@i 008C  
                                               ?_UARTInit 0001  
                                    ??_enc424j600_initSPI 0060  
                                    ??_enc424j600_readSPI 0062  
                                     ??_printErrorMessage 009D  
                         enc424j600_setRXTailPointer@addr 006E  
                         __end_of_ethernetController_init 4008  
                                           __end_of_srand 4CB4  
                         ??_ethernetController_dropPacket 0074  
                                           __end_of_ultoa 3178  
                             arp_parseFromRXBuffer@offset 009B  
     ethernetController_getSourceMACAddress@sourceAddress 0079  
                           ?_enc424j600_getInterruptFlags 006E  
                                     arp_send@destination 00C7  
                                 _ethernet_txFrameRequest 3446  
                               __size_of_ipv4_parseHeader 024A  
                              ipProtocolToString@protocol 0062  
                                    __size_of_intToString 0032  
                         __end_of_checkForOverlapSwitched 38CA  
                                      __size_of_getMillis 0012  
                                           _buttonHandler 38CA  
                      ethernetController_dropPacket@frame 0072  
                          __size_of_memory_txFrameRequest 04DC  
                             __end_of_ipv4_SrcAddrChanged 4C4E  
                           __end_of_memory_txFrameRequest 0AEE  
                                      __size_of_hexToChar 0022  
                                 arp_background@fAnnounce 0279  
                                      __size_of_arp_probe 023E  
                                  arp_parseFromRXBuffer@i 0097  
                    __size_of_enc424j600_setRXTailPointer 002A  
                                                 ??_srand 007C  
                                      __size_of_ipv4_init 0004  
                                                 ??_ultoa 0075  
                               __end_of_printErrorMessage 2B22  
                        enc424j600_getPacketCount@lowByte 006E  
                                              __pbssBANK1 018B  
                                              __pbssBANK2 0200  
                                              __pbssBANK3 0300  
                             __end_of_memory_txFrameClear 4B4C  
                          ?_enc424j600_clearInterruptFlag 0001  
                                       _etherTypeToString 4660  
                                      ?_etherTypeToString 0060  
                                       __CFG_PLLSEL$PLL4X 000000  
                                  ??_ipv4_handleNewPacket 00B7  
                         ??_ethernetController_sendPacket 007B  
                                                 ?___lmul 0060  
                                                 ?___wmul 0060  
                                              ??_UARTInit 0060  
                                    __size_of_parseNumber 007E  
                                          hexToString@val 0061  
                                          ___lmul@product 0068  
                                   macToString@firstDigit 0093  
                                     ??_etherTypeToString 0062  
          ethernetController_writeDestinationMACAddress@i 0086  
                                        ?_ipv4_background 0001  
                                        _entireMemoryFull 4820  
                                   ipv4_parseHeader@field 0074  
                                          ?_buttonHandler 0001  
                              etherTypeToString@ethertype 0060  
                                  ipv4_SrcAddrChanged@err 0060  
                 enc424j600_updateReceiveStatusVector@rsv 0060  
                       enc424j600_readPHYRegister@lowByte 007D  
                                __end_of_ipAdressToString 20CC  
                                         __CFG_WDTPS$1024 000000  
                enc424j600_setERXDATAReadPointer@highByte 006E  
                                                 _SSP1BUF 000FC9  
  ethernetController_writeEtherTypeFieldToBuffer@highByte 007B  
                                               ?_arp_init 0001  
                                               ?_arp_send 00A7  
                          ??_enc424j600_setTXStartAddress 0070  
                                               ?_ipv4_cmp 0060  
                                        __CFG_CFGPLLEN$ON 000000  
                                      _printEthernetState 3976  
                               __end_of_etherTypeToString 46A4  
                                  ?_arp_parseFromRXBuffer 0074  
                  enc424j600_setRXBufferStartAddress@addr 006E  
           __end_of_ethernetController_streamFromRXBuffer 42E2  
          __size_of_ethernetController_streamFromRXBuffer 005E  
                 ??_ethernetController_streamFromRXBuffer 0071  
                  ?_ethernetController_streamFromRXBuffer 006F  
                   _ethernetController_streamFromRXBuffer 4284  
                          sevenSegmentUpdate@digitPointer 0045  
                                       ?_UARTTransmitText 0098  
                                       __end_of_getMillis 4C84  
                                                 __Hparam 0000  
                      __end_of_enc424j600_enableReception 4D04  
                              _enc424j600_enableReception 4CFC  
ethernetController_updateNextPacketPointer@nextPktPointer 0075  
                                                 __Lparam 0000  
                                         ipv4_isAllZero@i 0062  
                                     ?_printEthernetState 009A  
                                       ??_arp_setNewEntry 0072  
               __end_of_enc424j600_enableAutoMACInsertion 4ADC  
              __size_of_enc424j600_enableAutoMACInsertion 0028  
                      ?_enc424j600_enableAutoMACInsertion 0001  
                     ??_enc424j600_enableAutoMACInsertion 006E  
                       _enc424j600_enableAutoMACInsertion 4AB4  
                                       __end_of_hexToChar 4B92  
                                      ??_UARTTransmitText 009A  
                                checkForOverlapSwitched@a 0060  
                                checkForOverlapSwitched@b 0069  
                                       ??_arp_sendRequest 00FC  
                                       __end_of_arp_probe 1EDE  
                                      buttonHandler@state 0001  
                               enc424j600_setTXLength@len 006E  
                                   __end_of_mac_isAllZero 495E  
                                         __size_of___lmul 0058  
                          enc424j600_setTXLength@highByte 0071  
                                                 ___lldiv 3BBA  
                                         __size_of___wmul 0028  
                                                 ___llmod 4152  
                                                 ___lwdiv 43E6  
                                                 ___lwmod 46A4  
                    enc424j600_setGPDATAWritePointer@addr 006A  
                               ??_ethernet_txFrameRequest 00A4  
                                       __end_of_ipv4_init 4D14  
                                     sevenSegmentUpdate@i 0015  
                                                 __pcinit 3C3E  
                             __size_of_sevenSegmentUpdate 00BE  
                                     parseNumber@hundreds 000E  
                                                 __ramtop 0800  
                                                 __ptext0 1510  
                                                 __ptext1 4CDE  
                                                 __ptext2 4D10  
                                                 __ptext3 41BA  
                                                 __ptext4 4CA6  
                                                 __ptext5 4BEE  
                                                 __ptext6 3976  
                                                 __ptext7 29F4  
                                                 __ptext8 3178  
                                                 __ptext9 44E0  
                                                 _mac_cmp 46E8  
                                  ipv4_handleNewPacket@ip 00C2  
                                               _T0CONbits 000FD5  
                            ??_handleStackBackgroundTasks 0188  
                                            __size_of_ISR 00E0  
                                               _T1CONbits 000FCD  
                  enc424j600_setGPDATAWritePointer@opcode 006C  
                      enc424j600_setRXTailPointer@lowByte 0070  
              __end_of_enc424j600_setRXBufferStartAddress 4A64  
             __size_of_enc424j600_setRXBufferStartAddress 002A  
                    ??_enc424j600_setRXBufferStartAddress 0070  
                     ?_enc424j600_setRXBufferStartAddress 006E  
                      _enc424j600_setRXBufferStartAddress 4A3A  
                   __end_of_ethernetController_dropPacket 47A8  
                  __size_of_ethernetController_dropPacket 003C  
                           _ethernetController_dropPacket 476C  
                                    ??_printEthernetState 00A9  
           __end_of_ethernetController_pollInterruptFlags 29F4  
          __size_of_ethernetController_pollInterruptFlags 0158  
                 ??_ethernetController_pollInterruptFlags 007A  
                  ?_ethernetController_pollInterruptFlags 0078  
                   _ethernetController_pollInterruptFlags 289C  
                          ??_enc424j600_getInterruptFlags 0070  
                        __size_of_ipv4_getIPSourceAddress 0012  
                 enc424j600_setGPDATAWritePointer@lowByte 006D  
                        __size_of_ipv4_setIPSourceAddress 0050  
                                              ??_arp_init 007C  
                                                 main@err 037F  
                                              ??_arp_send 00C7  
                                   __end_of_arp_sendReply 289C  
                                    end_of_initialization 3CB0  
                              __size_of_printErrorMessage 012E  
                                              ??_ipv4_cmp 0064  
                              __end_of_mac_setToBroadcast 4B28  
                              ?_ethernetController_getRSV 0071  
                                        arp_gratuitous@ip 00FC  
                                           __Lmediumconst 7AA8  
                                                 ltoa@buf 007A  
                                        ??_ipv4_isAllZero 0062  
                         ipv4_calculateHeaderChecksum@sum 006E  
                                                 ltoa@val 007C  
                                         mac_setAllZero@i 0062  
             ethernetController_streamFromRXBuffer@opcode 0072  
                                         ___lldiv@divisor 0064  
                                         ___lldiv@counter 006C  
                                 __size_of_arp_background 0106  
                                      entireMemoryEmpty@i 0060  
                                __size_of_checkForOverlap 011E  
                                                 postdec1 000FE5  
                                                 postdec2 000FDD  
                                         macToString@addr 007A  
                                                 postinc0 000FEE  
                                                 postinc1 000FE6  
                                                 postinc2 000FDE  
                                       arp_setNewEntry@ip 006A  
                             ?_handleStackBackgroundTasks 0186  
                                       _arp_checkForEntry 36B4  
                   memory_txFrameRequest@fNoOverlapMarker 0095  
                    enc424j600_readPHYRegister@PHYaddress 0077  
                                         ??_buttonHandler 0003  
                                      ?_arp_checkForEntry 0067  
                   __end_of_ethernetController_sendPacket 4AB4  
                  __size_of_ethernetController_sendPacket 0028  
                           _ethernetController_sendPacket 4A8C  
                                       arp_sendReply@myIP 0134  
                                               _PORTBbits 000F81  
                                        _ipv4_parseHeader 1A56  
                             ?_enc424j600_writeSingleByte 0001  
                              ?_enc424j600_getPacketCount 0001  
                                ??_enc424j600_setTXLength 0070  
                       sevenSegmentUpdate@numberToDisplay 000F  
                                __end_of_sevenSegmentInit 4C08  
                                     _enc424j600_writeSPI 4220  
                                              _stack_init 4CDE  
                                           ??_macToString 0080  
                  ethernetController_softReset@dataToSend 0073  
                                               _TRISBbits 000F93  
                                     ??_arp_checkForEntry 006D  
                                              _updateTime 4CD0  
         __end_of_ethernetController_getNextPacketPointer 4CC2  
        __size_of_ethernetController_getNextPacketPointer 000E  
               ??_ethernetController_getNextPacketPointer 0064  
                ?_ethernetController_getNextPacketPointer 0062  
                 _ethernetController_getNextPacketPointer 4CB4  
                                              arp_init@ip 0082  
                             __end_of_arp_handleNewPacket 227A  
                                       i2___lwdiv@divisor 0003  
                         __end_of_ethernet_txFrameRequest 352E  
                        ethernetController_getRSV@address 0071  
                                               i2___lwdiv 448E  
                                       i2___lwdiv@counter 0007  
                              __size_of_etherTypeToString 0044  
                                     UARTTransmitText@str 0098  
                                             _CCP1CONbits 000FBD  
                    __end_of_ipv4_calculateHeaderChecksum 1510  
                   __size_of_ipv4_calculateHeaderChecksum 030C  
                            _ipv4_calculateHeaderChecksum 1204  
                    enc424j600_setTXStartAddress@highByte 0071  
                                    ?_enc424j600_writeSPI 0060  
                                       intToString@number 02BB  
                                ipAdressToString@hundreds 0083  
                                   arp_probe@probeCounter 01E6  
                               __end_of_arp_checkForEntry 3766  
                                           ??_hexToString 0065  
                              arp_setNewEntry@oldestIndex 007A  
                                      arp_checkForEntry@i 0075  
                                      ipv4_parseHeader@ip 008F  
                                          __end_of___lmul 433A  
        ethernetController_updateNextPacketPointer@opcode 0077  
                                          __end_of___wmul 4A8C  
                                           __pidataCOMRAM 4D04  
                                        parseNumber@digit 000A  
                            ?_enc424j600_setRXTailPointer 006E  
                                __size_of_UARTTransmitInt 0022  
                                       __size_of_UARTInit 0010  
                  enc424j600_setERXDATAReadPointer@opcode 006C  
                              __end_of_ipProtocolToString 4660  
                                      hexToString@pointer 0069  
                      ipv4_checkHeaderChecksum@testHeader 009E  
                                  arp_sendReply@senderMAC 0120  
                                  arp_sendReply@targetMAC 0126  
             __end_of_ethernetController_updateLinkStatus 3B30  
            __size_of_ethernetController_updateLinkStatus 008A  
                   ??_ethernetController_updateLinkStatus 0082  
                    ?_ethernetController_updateLinkStatus 0080  
                     _ethernetController_updateLinkStatus 3AA6  
                                     start_initialization 3C3E  
                                             __end_of_ISR 00E8  
                                  enc424j600_readSPI@data 0060  
                                          intToString@val 0084  
                          ipv4_checkHeaderChecksum@header 009A  
                                ?_ethernetController_init 007A  
                                _ipv4_checkHeaderChecksum 352E  
                         ipv4_handleNewPacket@headerField 00B9  
                                              ?i2___lwdiv 0001  
                                ?_checkForOverlapSwitched 0060  
                                     __end_of_macToString 2F74  
                                         __CFG_nLPBOR$OFF 000000  
                                   ??_enc424j600_writeSPI 0062  
                                __end_of_entireMemoryFull 4858  
   __end_of_ethernetController_writeDestinationMACAddress 3D3E  
  __size_of_ethernetController_writeDestinationMACAddress 0080  
         ??_ethernetController_writeDestinationMACAddress 007E  
          ?_ethernetController_writeDestinationMACAddress 006F  
           _ethernetController_writeDestinationMACAddress 3CBE  
                                         ___llmod@divisor 0064  
                     ethernetController_checkDeviceId@err 0072  
                                 __size_of_arp_gratuitous 0176  
                                         ___llmod@counter 0068  
                           ?_ipv4_calculateHeaderChecksum 0060  
                           ethernetController_getRSV@temp 01E7  
                     __end_of_enc424j600_setRXTailPointer 4A3A  
                             _enc424j600_setRXTailPointer 4A10  
                                    printErrorMessage@err 009A  
                                                ??___lmul 0068  
                                          _occupiedMemory 018B  
                                                ??___wmul 0064  
                             arp_background@ipPreliminary 014E  
                  ethernetController_getDeviceName@string 0062  
                             __size_of_enc424j600_initSPI 001C  
                                             __pdataBANK2 02C5  
                                     arp_gratuitous@state 01E3  
                             __size_of_enc424j600_readSPI 006A  
                                           ??_intToString 0088  
                            ??_enc424j600_enableReception 006B  
                                        checkForOverlap@a 0072  
                                        checkForOverlap@b 007B  
                        enc424j600_readSPI@timeoutCounter 0066  
                         ??_enc424j600_clearInterruptFlag 006E  
                                       ??_checkForOverlap 0084  
                                     __end_of_hexToString 3358  
                           ??_enc424j600_setRXTailPointer 0070  
                                             ?_stack_init 0001  
                         __size_of_enc424j600_setTXLength 002A  
                                             __pbssCOMRAM 0029  
                        enc424j600_writeSingleByte@opcode 006A  
                                 _ipv4_getIPSourceAddress 4C84  
                                 _ipv4_setIPSourceAddress 44E0  
                ethernetController_updateLinkStatus@state 0080  
                                           __pcstackBANK0 0060  
                                           __pcstackBANK1 0100  
                                           __pcstackBANK3 0379  
                                             ?_updateTime 0001  
                                       ?_ipAdressToString 0073  
                                   _memory_txFrameRequest 0612  
           __end_of_ethernetController_newPacketAvailable 4C60  
          __size_of_ethernetController_newPacketAvailable 0012  
                  ?_ethernetController_newPacketAvailable 0001  
                 ??_ethernetController_newPacketAvailable 006F  
                   _ethernetController_newPacketAvailable 4C4E  
                              arp_parseFromRXBuffer@frame 0074  
                                 ??_arp_parseFromRXBuffer 0094  
                ethernetController_softReset@receivedData 0075  
                                      ??_ipAdressToString 0077  
                                         _arp_setNewEntry 3358  
                            __size_of_ipv4_SrcAddrChanged 0014  
                        enc424j600_getInterruptFlags@high 0077  
                                         _arp_sendRequest 3766  
                                 __size_of_mac_setAllZero 0026  
                                       __size_of_arp_init 0066  
                                       __size_of_arp_send 0278  
                                       __size_of_ipv4_cmp 0042  
                              buttonHandler@debounceValue 0007  
                                        arp_send@ethFrame 00D1  
                                          _arp_background 2F74  
                     __size_of_enc424j600_writeSingleByte 0018  
                                           ??_parseNumber 000B  
                                               _main$2374 037D  
                                        ___lwdiv@dividend 0060  
                                      _sevenSegCharacters 02D7  
              ethernetController_getEtherTypeField@opcode 007E  
                              __size_of_arp_checkForEntry 00B2  
                                               __pintcode 0008  
                            __size_of_memory_txFrameClear 0024  
                                           __pmediumconst 7AA8  
                                               _getMillis 4C72  
                                               __ptext100 4C08  
                                               __ptext101 48C6  
                                               __ptext110 448E  
                                               __ptext102 4220  
                                               __ptext111 38CA  
                                               __ptext103 40E8  
                                               __ptext104 4BD2  
                                               __ptext105 4C96  
                                               __ptext107 4CD0  
                                               __ptext108 35F6  
                                               __ptext109 3D3E  
                                                ?___lldiv 0060  
                                                ?___llmod 0060  
                           __size_of_ipv4_handleNewPacket 01AC  
                                  arp_checkForEntry@index 006B  
                                                ?___lwdiv 0060  
                                               _arpStatus 003C  
                                                ?___lwmod 006E  
     ethernetController_writeEtherTypeFieldToBuffer@field 0071  
                                               _hexToChar 4B70  
                                               _arp_table 020F  
                                               _arp_probe 1CA0  
                                     ipv4_setToAllZero@ip 0060  
                                                ?_mac_cmp 0060  
                               __size_of_UARTTransmitText 0056  
                                               _ipv4_init 4D10  
              ethernetController_getSourceMACAddress@temp 007F  
                    enc424j600_setERXDATAReadPointer@addr 006A  
                 enc424j600_setERXDATAReadPointer@lowByte 006D  
                                  ipv4_parseHeader@i_3585 008D  
                                      ipAdressToString@ip 0073  
                                     __end_of_intToString 492E  
                                             _macToString 2E6C  
                                       ??_UARTTransmitInt 009E  
                                        ___lwdiv@quotient 0065  
                                __size_of_ipv4_background 0194  
                                       _entireMemoryEmpty 4858  
                                ??_ethernet_rxGetNewFrame 017B  
                                             ??i2___lwdiv 0005  
                                          __size_of_srand 000E  
                                          __size_of_ultoa 00FE  
                      enc424j600_readPHYRegister@highByte 007E  
                                      ?_entireMemoryEmpty 0001  
                             ?_enc424j600_readPHYRegister 006E  
                                arp_setNewEntry@timestamp 006E  
                             ??_ethernetController_getRSV 0076  
                           arp_gratuitous@announceCounter 01E4  
                                  __end_of_arp_background 307A  
                                          ___wmul@product 0064  
                             ethernet_rxGetNewFrame@frame 0178  
                                __end_of_ipv4_parseHeader 1CA0  
                                  _enc424j600_setTXLength 49E6  
                                                _PIE1bits 000F9D  
                       enc424j600_writeSPI@timeoutCounter 0066  
                                     __size_of_stack_init 000A  
                                     ??_entireMemoryEmpty 0060  
                                                _PIR1bits 000F9E  
                                       entireMemoryFull@i 0060  
                                                i2u763_40 3924  
                                                i2u764_40 3926  
                                                i2u772_40 3672  
                                                i2u693_40 44B0  
                                                i2u773_44 3682  
                                                i2u773_45 367E  
                                                i2u768_44 3606  
                                                i2u768_45 3602  
                                                i2u794_40 0060  
                                                i2u794_46 0062  
                                                _RCONbits 000FD0  
                                        arp_setNewEntry@i 007B  
                                     __size_of_updateTime 000E  
                                             _hexToString 326A  
                                      _mac_setToBroadcast 4B02  
                              __end_of_sevenSegmentUpdate 36B4  
                                              ?_getMillis 0060  
                                                _UARTInit 4C96  
                          ??_ipv4_calculateHeaderChecksum 0062  
                    __end_of_enc424j600_setTXStartAddress 49E6  
                   __size_of_enc424j600_setTXStartAddress 002A  
                            _enc424j600_setTXStartAddress 49BC  
                                  arp_handleNewPacket@arp 0158  
                                      UARTTransmitInt@val 009A  
                                              ?_hexToChar 0001  
                                     __end_of_parseNumber 3DBC  
                __end_of_enc424j600_setERXDATAReadPointer 4820  
               __size_of_enc424j600_setERXDATAReadPointer 003C  
                      ??_enc424j600_setERXDATAReadPointer 006C  
                       ?_enc424j600_setERXDATAReadPointer 006A  
                        _enc424j600_setERXDATAReadPointer 47E4  
                                              ?_arp_probe 00FC  
                                               arp_init@i 0086  
                               ??_ipv4_getIPSourceAddress 0064  
                                       ___wmul@multiplier 0060  
                               ??_ipv4_setIPSourceAddress 009E  
                                     ?_mac_setToBroadcast 0060  
                                               arp_send@i 00CD  
                             ??_enc424j600_getPacketCount 006E  
                                              ?_ipv4_init 0001  
                                 arp_gratuitous@timeStart 01DB  
   ethernetController_updateNextPacketPointer@newPointerH 0079  
   ethernetController_updateNextPacketPointer@newPointerL 0078  
                                               main@ipDst 0382  
                                               main@ipSrc 0386  
                                       ?_sevenSegmentInit 0001  
                                 __end_of_arp_setNewEntry 3446  
                                 __end_of_arp_sendRequest 3818  
                               __end_of_entireMemoryEmpty 4890  
                                  ?_memory_txFrameRequest 0084  
                    ethernetController_checkDeviceId@data 0071  
                             __size_of_printEthernetState 00A2  
                   __end_of_enc424j600_clearInterruptFlag 3BBA  
                  __size_of_enc424j600_clearInterruptFlag 008A  
                           _enc424j600_clearInterruptFlag 3B30  
                                      ??_sevenSegmentInit 0060  
                     enc424j600_setTXStartAddress@lowByte 0070  
                                               ipv4_cmp@a 0060  
                                               ipv4_cmp@b 0062  
                                               ipv4_cmp@i 0066  
                                    arp_probe@waitingTime 0141  
                                       ___lmul@multiplier 0060  
                                             _INTCON3bits 000FF0  
                                               copy_data0 3C52  
                                               copy_data1 3C72  
                                         parseNumber@ones 000C  
                                         parseNumber@tens 000D  
                                       hexToString@number 02B1  
                                  __size_of_mac_isAllZero 0030  
                                   arp_sendReply@senderIP 012C  
                                   arp_sendReply@targetIP 0130  
                                      macToString@address 0081  
                                    ipAdressToString@ones 007B  
                                    ipAdressToString@tens 007F  
                                    ??_mac_setToBroadcast 0062  
                                          _arp_gratuitous 25BA  
                                         ?_arp_background 0001  
                __end_of_ethernetController_checkDeviceId 45CC  
               __size_of_ethernetController_checkDeviceId 004E  
                      ??_ethernetController_checkDeviceId 0071  
                       ?_ethernetController_checkDeviceId 006E  
                        _ethernetController_checkDeviceId 457E  
                                                __Hrparam 0000  
                                        ipv4_isAllZero@ip 0060  
                        enc424j600_setTXStartAddress@addr 006E  
                                ?_ethernet_txFrameRequest 00A2  
                                                __Lrparam 0000  
                    __end_of_enc424j600_getInterruptFlags 4618  
                   __size_of_enc424j600_getInterruptFlags 004C  
                            _enc424j600_getInterruptFlags 45CC  
                                      __CFG_BOREN$SBORDIS 000000  
                      __end_of_enc424j600_writeSingleByte 4C3A  
                              _enc424j600_writeSingleByte 4C22  
                                  macToString@secondDigit 0094  
                                  __size_of_arp_sendReply 016C  
                                        __size_of___lldiv 0084  
                                        __size_of___llmod 0068  
                                             _intToString 48FC  
                                        __size_of___lwdiv 0054  
                                        __size_of___lwmod 0044  
                 ethernetController_updateLinkStatus@temp 0082  
                              ??_ipv4_checkHeaderChecksum 009C  
                               _ethernetController_getRSV 3EAE  
                 __end_of_ethernetController_setLEDConfig 3AA6  
                __size_of_ethernetController_setLEDConfig 008E  
                       ??_ethernetController_setLEDConfig 006F  
                        ?_ethernetController_setLEDConfig 006E  
                         _ethernetController_setLEDConfig 3A18  
            ethernetController_getEtherTypeField@highByte 0080  
                                              _ANSELBbits 000F5C  
                                   __end_of_buttonHandler 3976  
                         enc424j600_getInterruptFlags@low 0076  
                                        __size_of_mac_cmp 0042  
       ethernetController_streamFromRXBuffer@startAddress 006F  
                                             _buttonState 01F0  
                     enc424j600_setRXTailPointer@highByte 0071  
                                arp_sendRequest@senderMAC 0108  
                                  memory_txFrameRequest@i 0096  
                                arp_sendRequest@targetMAC 010E  
                                         ___lwdiv@divisor 0062  
                                         ___lwdiv@counter 0064  
                                       mac_setAllZero@mac 0060  
                                     _ipPreliminarySource 01D7  
                                                __ptext10 2426  
                                                __ptext11 00EC  
                                                __ptext20 3EAE  
                                                __ptext12 227A  
                                                __ptext21 0EE8  
                                                __ptext13 1A56  
                                                __ptext30 2E6C  
                                                __ptext22 4008  
                                                __ptext14 352E  
                                                __ptext31 1EDE  
                                                __ptext23 4660  
                                                __ptext15 1204  
                                                __ptext40 443A  
                                                __ptext32 43E6  
                                                __ptext24 20CC  
                                                __ptext16 326A  
                                                __ptext41 307A  
                                                __ptext33 0AEE  
                                                __ptext25 476C  
                                                __ptext17 4B70  
                                                __ptext50 4CC2  
                                                __ptext42 4152  
                                                __ptext34 492E  
                                                __ptext26 4CB4  
                                                __ptext18 4618  
                                                __ptext51 3B30  
                                                __ptext43 3BBA  
                                                __ptext35 46E8  
                                                __ptext27 4CE8  
                                                __ptext19 3DBC  
                                                __ptext60 472A  
                                                __ptext52 2F74  
                                                __ptext44 3AA6  
                                                __ptext36 495E  
                                                __ptext28 3358  
                                                __ptext61 46A4  
                                                __ptext53 4C60  
                                                __ptext45 2B22  
                                                __ptext37 4284  
                                                __ptext29 2730  
                                                __ptext70 3446  
                                                __ptext62 25BA  
                                                __ptext54 4C3A  
                                                __ptext46 3A18  
                                                __ptext38 4B92  
                                                __ptext71 0612  
                                                __ptext63 4C72  
                                                __ptext55 1CA0  
                                                __ptext47 289C  
                                                __ptext39 48FC  
                                                __ptext80 47A8  
                                                __ptext72 4820  
                                                __ptext64 3766  
                                                __ptext56 433A  
                                                __ptext48 45CC  
                                                __ptext81 4A8C  
                                                __ptext73 4858  
                                                __ptext65 4ADC  
                                                __ptext57 42E2  
                                                __ptext49 4C4E  
                                                __ptext90 457E  
                                                __ptext82 4B28  
                                                __ptext74 2C44  
                                                __ptext66 4C84  
                                                __ptext58 4BB4  
                                                __ptext91 4A10  
                                                __ptext83 49BC  
                                                __ptext75 3818  
                                                __ptext67 3F22  
                                                __ptext59 36B4  
                                                __ptext92 4A3A  
                                                __ptext84 49E6  
                                                __ptext76 4A64  
                                                __ptext68 17DE  
                                                __ptext93 4CF2  
                                                __ptext85 4078  
                                                __ptext77 4530  
                                                __ptext69 4B02  
                                                __ptext94 4CFC  
                                                __ptext86 47E4  
                                                __ptext78 3CBE  
                                                __ptext95 4C22  
                                                __ptext87 4390  
                                                __ptext79 3E36  
                                                __ptext96 4AB4  
                                                __ptext88 3F96  
                                                __ptext97 4890  
                                                __ptext89 2D62  
                                                __ptext98 4B4C  
                                                __ptext99 4D0A  
                                            _SSP1CON1bits 000FC6  
                   enc424j600_enableAutoMACInsertion@temp 006E  
                                                _arp_init 41BA  
                                                _arp_send 17DE  
                                      ipv4_setToAllZero@i 0062  
                         __size_of_ethernet_rxGetNewFrame 0526  
                                          _mac_setAllZero 4ADC  
                                  __end_of_arp_gratuitous 2730  
                                                _ipv4_cmp 472A  
                                                _ipSource 01DF  
                                             _OSCCON2bits 000FD2  
                                       ipAdressToString@i 0088  
                                      _ipProtocolToString 4618  
                         __end_of_ipv4_getIPSourceAddress 4C96  
                enc424j600_setGPDATAWritePointer@highByte 006E  
                         __end_of_ipv4_setIPSourceAddress 4530  
              __end_of_ipv4_getPreliminaryIPSourceAddress 4C72  
             __size_of_ipv4_getPreliminaryIPSourceAddress 0012  
                    ??_ipv4_getPreliminaryIPSourceAddress 0064  
                     ?_ipv4_getPreliminaryIPSourceAddress 0060  
                      _ipv4_getPreliminaryIPSourceAddress 4C60  
                                           __size_of_main 02CE  
                                           __size_of_rand 0056  
                                           __size_of_ltoa 0054  
                               _enc424j600_getPacketCount 4C08  
                                       ??_ipv4_background 009A  
                                       ?_entireMemoryFull 0001  
                            __size_of_arp_handleNewPacket 01AE  
                 __end_of_enc424j600_getNextPacketPointer 4CF2  
                __size_of_enc424j600_getNextPacketPointer 000A  
                       ??_enc424j600_getNextPacketPointer 0062  
                        ?_enc424j600_getNextPacketPointer 0060  
                         _enc424j600_getNextPacketPointer 4CE8  
                 __end_of_enc424j600_setNextPacketPointer 4CFC  
                __size_of_enc424j600_setNextPacketPointer 000A  
                       ??_enc424j600_setNextPacketPointer 0062  
                        ?_enc424j600_setNextPacketPointer 0060  
                         _enc424j600_setNextPacketPointer 4CF2  
     ethernetController_writeDestinationMACAddress@opcode 0084  
                        __size_of_ethernetController_init 0072  
                                         _checkForOverlap 2C44  
                                     ?_ipProtocolToString 0060  
                                      ??_entireMemoryFull 0060  
                                             _parseNumber 3D3E  
                                             ??_getMillis 0064  
                                                int$flags 0050  
                                 buttonHandler@resetValue 0003  
                                                mac_cmp@a 0060  
                        __size_of_checkForOverlapSwitched 00B2  
                                                mac_cmp@b 0062  
                                                mac_cmp@i 0066  
            enc424j600_readControlRegisterUnbanked@opcode 006D  
                                           _mac_isAllZero 492E  
                                     _ipv4_SrcAddrChanged 4C3A  
                                            _SSP1STATbits 000FC7  
                                             ??_hexToChar 0060  
                              ethernet_txFrameRequest@err 00A4  
                                             ??_arp_probe 0134  
                                 __size_of_ipv4_isAllZero 0030  
                               ipv4_setIPSourceAddress@ip 009A  
                               ethernet_rxGetNewFrame@err 0183  
                                        _UARTTransmitText 4390  
                                             ??_ipv4_init 0060  
                     __size_of_enc424j600_readPHYRegister 0122  
                                            ??_stack_init 0087  
                                    arp_sendReply@request 0100  
                                 arp_sendRequest@ipSender 0100  
                                 arp_sendRequest@ipTarget 0104  
                                              _INTCONbits 000FF2  
                                    ??_ipProtocolToString 0062  
                                        ?_arp_setNewEntry 0064  
                                       arp_background@err 01ED  
                              __size_of_entireMemoryEmpty 0038  
                                            ??_updateTime 0001  
   ethernetController_writeEtherTypeFieldToBuffer@ethtype 006F  
                                        ?_arp_sendRequest 0100  
   ethernetController_writeEtherTypeFieldToBuffer@lowByte 007A  
                                       arp_gratuitous@err 013C  
                                  __end_of_mac_setAllZero 4B02  
                                               ultoa@base 0073  
                                     _memory_txFrameClear 4B28  
                             __end_of_enc424j600_writeSPI 4284  
                                           _arp_sendReply 2730  
                                                intlevel2 0000  
                                    ?_ipv4_SrcAddrChanged 0060  
                          __size_of_arp_parseFromRXBuffer 03FA  
                                         ?_arp_gratuitous 00FC  
                           __end_of_arp_parseFromRXBuffer 0EE8  
                                                ltoa@base 0080  
                                        ___lwmod@dividend 006E  
                                        ___lldiv@dividend 0060  
             ethernetController_getEtherTypeField@lowByte 007F  
      ethernetController_writeDestinationMACAddress@i_646 0085  
               ethernetController_streamFromRXBuffer@temp 0073  
                          enc424j600_readPHYRegister@addr 0076  
                                              _RCSTA1bits 000FAB  
                          enc424j600_readPHYRegister@data 006E  
                                        macToString@F5943 02C5  
                          enc424j600_readPHYRegister@temp 007F  
      ethernetController_writeDestinationMACAddress@field 0075  
                               arp_setNewEntry@maxSeconds 0076  
                                              _OSCCONbits 000FD3  
                               __size_of_ipAdressToString 01EE  
                                      __end_of_stack_init 4CE8  
                                            macToString@i 0095  
                                            macToString@j 0097  
                enc424j600_readPHYRegister@timeoutCounter 0079  
                              __end_of_enc424j600_initSPI 4BEE  
                              __end_of_enc424j600_readSPI 4152  
                                    ?_memory_txFrameClear 0001  
                                      arp_probe@timeStart 013D  
                                          ?_mac_isAllZero 0060  
                                  _ethernet_rxGetNewFrame 00EC  
                                      __end_of_updateTime 4CDE  
                                    __CFG_CPUDIV$NOCLKDIV 000000  
                                       arp_probe@ipSender 0145  
                                       arp_probe@ipTarget 00FC  
                                         _UARTTransmitInt 4B92  
                                      arp_setNewEntry@mac 0064  
                      ethernetController_sendPacket@field 0072  
            ethernetController_getSourceMACAddress@opcode 0078  
    ethernetController_writeEtherTypeFieldToBuffer@opcode 007C  
            __end_of_enc424j600_updateReceiveStatusVector 1204  
           __size_of_enc424j600_updateReceiveStatusVector 031C  
                  ??_enc424j600_updateReceiveStatusVector 0065  
                   ?_enc424j600_updateReceiveStatusVector 0060  
                    _enc424j600_updateReceiveStatusVector 0EE8  
                                   mac_setToBroadcast@mac 0060  
                                                ultoa@buf 006D  
                                                ultoa@val 006F  
                               ipv4_handleNewPacket@frame 00B5  
                                   ipv4_sendFrame@oldTime 01D3  
                __end_of_enc424j600_setGPDATAWritePointer 47E4  
               __size_of_enc424j600_setGPDATAWritePointer 003C  
                      ??_enc424j600_setGPDATAWritePointer 006C  
                       ?_enc424j600_setGPDATAWritePointer 006A  
                        _enc424j600_setGPDATAWritePointer 47A8  
                                        ___lldiv@quotient 0068  
                                         ___lwmod@divisor 0070  
                                  arp_sendRequest@request 0114  
                      enc424j600_setNextPacketPointer@ptr 0060  
                                         ___lwmod@counter 0072  
                                            ?_macToString 007A  
              enc424j600_readControlRegisterUnbanked@addr 006C  
              enc424j600_readControlRegisterUnbanked@data 006A  
                         ethernetController_getRSV@opcode 0076  
                    __end_of_ethernetController_softReset 2E6C  
                   __size_of_ethernetController_softReset 010A  
                            _ethernetController_softReset 2D62  
                                         ?_mac_setAllZero 0060  
                            __end_of_ipv4_handleNewPacket 2426  
             ethernetController_getSourceMACAddress@field 006F  
                                      arp_sendReply@reply 0138  
                                          ?_arp_sendReply 0100  
                                   ??_ipv4_SrcAddrChanged 0062  
                                arp_handleNewPacket@frame 00FC  
                                      __CFG_FOSC$INTOSCIO 000000  
                                 ?_enc424j600_setTXLength 006E  
                                 __end_of_checkForOverlap 2D62  
           __end_ofethernetController_getDeviceName@F5995 7AB4  
                   ethernetController_getDeviceName@F5995 7AA9  
                          ?_ethernetController_dropPacket 0072  
                                       ?_ipv4_parseHeader 0074  
                                 _sevenSegmentUpdate$2458 0013  
                                      ??_ipv4_parseHeader 008B  
                                   ??_memory_txFrameClear 0060  
