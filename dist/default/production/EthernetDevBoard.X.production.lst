

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Mar 17 15:10:36 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F25K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1
    39                           	psect	text19,global,reloc=2,class=CODE,delta=1
    40                           	psect	text20,global,reloc=2,class=CODE,delta=1
    41                           	psect	text21,global,reloc=2,class=CODE,delta=1
    42                           	psect	text22,global,reloc=2,class=CODE,delta=1
    43                           	psect	text23,global,reloc=2,class=CODE,delta=1
    44                           	psect	text24,global,reloc=2,class=CODE,delta=1
    45                           	psect	text25,global,reloc=2,class=CODE,delta=1
    46                           	psect	text26,global,reloc=2,class=CODE,delta=1
    47                           	psect	text27,global,reloc=2,class=CODE,delta=1
    48                           	psect	text28,global,reloc=2,class=CODE,delta=1
    49                           	psect	text29,global,reloc=2,class=CODE,delta=1
    50                           	psect	text30,global,reloc=2,class=CODE,delta=1
    51                           	psect	text31,global,reloc=2,class=CODE,delta=1
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1
    53                           	psect	text33,global,reloc=2,class=CODE,delta=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1
    57                           	psect	text37,global,reloc=2,class=CODE,delta=1
    58                           	psect	text38,global,reloc=2,class=CODE,delta=1
    59                           	psect	text39,global,reloc=2,class=CODE,delta=1
    60                           	psect	text40,global,reloc=2,class=CODE,delta=1
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1
    62                           	psect	text42,global,reloc=2,class=CODE,delta=1
    63                           	psect	text43,global,reloc=2,class=CODE,delta=1
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1
    66                           	psect	text46,global,reloc=2,class=CODE,delta=1
    67                           	psect	text47,global,reloc=2,class=CODE,delta=1
    68                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text50,global,reloc=2,class=CODE,delta=1
    71                           	psect	text51,global,reloc=2,class=CODE,delta=1
    72                           	psect	text52,global,reloc=2,class=CODE,delta=1
    73                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=1
    74                           	psect	text54,global,reloc=2,class=CODE,delta=1,group=1
    75                           	psect	text55,global,reloc=2,class=CODE,delta=1
    76                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=1
    77                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=1
    78                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=1
    79                           	psect	text59,global,reloc=2,class=CODE,delta=1,group=1
    80                           	psect	text60,global,reloc=2,class=CODE,delta=1
    81                           	psect	text61,global,reloc=2,class=CODE,delta=1
    82                           	psect	text62,global,reloc=2,class=CODE,delta=1
    83                           	psect	text63,global,reloc=2,class=CODE,delta=1
    84                           	psect	text64,global,reloc=2,class=CODE,delta=1
    85                           	psect	text65,global,reloc=2,class=CODE,delta=1
    86                           	psect	text66,global,reloc=2,class=CODE,delta=1
    87                           	psect	text67,global,reloc=2,class=CODE,delta=1
    88                           	psect	text68,global,reloc=2,class=CODE,delta=1
    89                           	psect	text69,global,reloc=2,class=CODE,delta=1
    90                           	psect	text70,global,reloc=2,class=CODE,delta=1
    91                           	psect	text71,global,reloc=2,class=CODE,delta=1
    92                           	psect	text72,global,reloc=2,class=CODE,delta=1,group=1
    93                           	psect	text73,global,reloc=2,class=CODE,delta=1
    94                           	psect	text74,global,reloc=2,class=CODE,delta=1
    95                           	psect	text75,global,reloc=2,class=CODE,delta=1
    96                           	psect	text76,global,reloc=2,class=CODE,delta=1
    97                           	psect	text77,global,reloc=2,class=CODE,delta=1
    98                           	psect	text78,global,reloc=2,class=CODE,delta=1
    99                           	psect	text79,global,reloc=2,class=CODE,delta=1
   100                           	psect	text80,global,reloc=2,class=CODE,delta=1
   101                           	psect	text81,global,reloc=2,class=CODE,delta=1
   102                           	psect	text82,global,reloc=2,class=CODE,delta=1
   103                           	psect	text83,global,reloc=2,class=CODE,delta=1
   104                           	psect	text84,global,reloc=2,class=CODE,delta=1
   105                           	psect	text85,global,reloc=2,class=CODE,delta=1
   106                           	psect	text86,global,reloc=2,class=CODE,delta=1
   107                           	psect	text87,global,reloc=2,class=CODE,delta=1
   108                           	psect	text88,global,reloc=2,class=CODE,delta=1
   109                           	psect	text89,global,reloc=2,class=CODE,delta=1
   110                           	psect	text90,global,reloc=2,class=CODE,delta=1
   111                           	psect	text91,global,reloc=2,class=CODE,delta=1
   112                           	psect	text92,global,reloc=2,class=CODE,delta=1
   113                           	psect	text93,global,reloc=2,class=CODE,delta=1
   114                           	psect	text94,global,reloc=2,class=CODE,delta=1
   115                           	psect	text95,global,reloc=2,class=CODE,delta=1
   116                           	psect	text96,global,reloc=2,class=CODE,delta=1
   117                           	psect	text97,global,reloc=2,class=CODE,delta=1
   118                           	psect	text98,global,reloc=2,class=CODE,delta=1
   119                           	psect	text99,global,reloc=2,class=CODE,delta=1
   120                           	psect	text100,global,reloc=2,class=CODE,delta=1
   121                           	psect	text101,global,reloc=2,class=CODE,delta=1
   122                           	psect	text102,global,reloc=2,class=CODE,delta=1
   123                           	psect	text103,global,reloc=2,class=CODE,delta=1
   124                           	psect	text104,global,reloc=2,class=CODE,delta=1
   125                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   126                           	psect	text106,global,reloc=2,class=CODE,delta=1
   127                           	psect	text107,global,reloc=2,class=CODE,delta=1
   128                           	psect	text108,global,reloc=2,class=CODE,delta=1
   129                           	psect	text109,global,reloc=2,class=CODE,delta=1
   130                           	psect	text110,global,reloc=2,class=CODE,delta=1
   131                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   132                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   133                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   134  0000                     
   135                           ; Version 1.45
   136                           ; Generated 16/11/2017 GMT
   137                           ; 
   138                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   139                           ; All rights reserved.
   140                           ; 
   141                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   142                           ; 
   143                           ; Redistribution and use in source and binary forms, with or without modification, are
   144                           ; permitted provided that the following conditions are met:
   145                           ; 
   146                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   147                           ;        conditions and the following disclaimer.
   148                           ; 
   149                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   150                           ;        of conditions and the following disclaimer in the documentation and/or other
   151                           ;        materials provided with the distribution.
   152                           ; 
   153                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   154                           ;        software without specific prior written permission.
   155                           ; 
   156                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   157                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   158                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   159                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   160                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   161                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   162                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   163                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   164                           ; 
   165                           ; 
   166                           ; Code-generator required, PIC18F25K50 Definitions
   167                           ; 
   168                           ; SFR Addresses
   169  0000                     
   170                           	psect	idataCOMRAM
   171  004C68                     __pidataCOMRAM:
   172                           	opt stack 0
   173                           
   174                           ;initializer for _randx
   175  004C68  0001               	dw	1
   176  004C6A  0000               	dw	0
   177                           
   178                           ;initializer for ethernetController_softReset@F5981
   179  004C6C  12                 	db	18
   180  004C6D  34                 	db	52
   181                           
   182                           	psect	idataBANK2
   183  0048F2                     __pidataBANK2:
   184                           	opt stack 0
   185                           
   186                           ;initializer for macToString@F5941
   187  0048F2  3F                 	db	63
   188  0048F3  3F                 	db	63
   189  0048F4  3A                 	db	58
   190  0048F5  3F                 	db	63
   191  0048F6  3F                 	db	63
   192  0048F7  3A                 	db	58
   193  0048F8  3F                 	db	63
   194  0048F9  3F                 	db	63
   195  0048FA  3A                 	db	58
   196  0048FB  3F                 	db	63
   197  0048FC  3F                 	db	63
   198  0048FD  3A                 	db	58
   199  0048FE  3F                 	db	63
   200  0048FF  3F                 	db	63
   201  004900  3A                 	db	58
   202  004901  3F                 	db	63
   203  004902  3F                 	db	63
   204  004903  00                 	db	0
   205                           
   206                           ;initializer for _sevenSegCharacters
   207  004904  3F                 	db	63
   208  004905  06                 	db	6
   209  004906  5B                 	db	91
   210  004907  4F                 	db	79
   211  004908  66                 	db	102
   212  004909  6D                 	db	109
   213  00490A  7D                 	db	125
   214  00490B  07                 	db	7
   215  00490C  7F                 	db	127
   216  00490D  6F                 	db	111
   217  00490E  00                 	db	0
   218  00490F  40                 	db	64
   219                           
   220                           ;initializer for ipAdressToString@address
   221  004910  3F                 	db	63
   222  004911  3F                 	db	63
   223  004912  3F                 	db	63
   224  004913  2E                 	db	46
   225  004914  3F                 	db	63
   226  004915  3F                 	db	63
   227  004916  3F                 	db	63
   228  004917  2E                 	db	46
   229  004918  3F                 	db	63
   230  004919  3F                 	db	63
   231  00491A  3F                 	db	63
   232  00491B  2E                 	db	46
   233  00491C  3F                 	db	63
   234  00491D  3F                 	db	63
   235  00491E  3F                 	db	63
   236  00491F  00                 	db	0
   237                           
   238                           	psect	mediumconst
   239  007A10                     __pmediumconst:
   240                           	opt stack 0
   241  007A10  00                 	db	0
   242  007A11                     ethernetController_getDeviceName@F5993:
   243                           	opt stack 0
   244  007A11  45                 	db	69
   245  007A12  4E                 	db	78
   246  007A13  43                 	db	67
   247  007A14  34                 	db	52
   248  007A15  32                 	db	50
   249  007A16  34                 	db	52
   250  007A17  4A                 	db	74
   251  007A18  36                 	db	54
   252  007A19  30                 	db	48
   253  007A1A  30                 	db	48
   254  007A1B  00                 	db	0
   255  007A1C                     __end_ofethernetController_getDeviceName@F5993:
   256                           	opt stack 0
   257  0000                     _ANSELC	set	3933
   258  0000                     _ANSELA	set	3931
   259  0000                     _ANSELB	set	3932
   260  0000                     _ANSELBbits	set	3932
   261  0000                     _CCPR1	set	4030
   262  0000                     _TXREG1	set	4013
   263  0000                     _SPBRG	set	4015
   264  0000                     _RCSTA1bits	set	4011
   265  0000                     _TXSTA1bits	set	4012
   266  0000                     _PORTA	set	3968
   267  0000                     _TRISA	set	3986
   268  0000                     _TRISC	set	3988
   269  0000                     _PORTC	set	3970
   270  0000                     _PIR1bits	set	3998
   271  0000                     _PORTB	set	3969
   272  0000                     _TRISB	set	3987
   273  0000                     _RCONbits	set	4048
   274  0000                     _PIE1bits	set	3997
   275  0000                     _CCP1CONbits	set	4029
   276  0000                     _T1CONbits	set	4045
   277  0000                     _T0CONbits	set	4053
   278  0000                     _INTCON3bits	set	4080
   279  0000                     _INTCONbits	set	4082
   280  0000                     _OSCCON2bits	set	4050
   281  0000                     _OSCCONbits	set	4051
   282  0000                     _SSP1BUF	set	4041
   283  0000                     _TRISBbits	set	3987
   284  0000                     _SSP1STATbits	set	4039
   285  0000                     _SSP1CON1bits	set	4038
   286  0000                     _PORTBbits	set	3969
   287  0000                     _TRMT	set	32097
   288  0000                     _RCIF	set	31989
   289  0000                     _RCIE	set	31981
   290  0000                     _RCIP	set	31997
   291  0000                     _TXIF	set	31988
   292  007A1C                     STR_99:
   293  007A1C  49                 	db	73	;'I'
   294  007A1D  50                 	db	80	;'P'
   295  007A1E  76                 	db	118	;'v'
   296  007A1F  34                 	db	52	;'4'
   297  007A20  3A                 	db	58	;':'
   298  007A21  20                 	db	32
   299  007A22  46                 	db	70	;'F'
   300  007A23  6C                 	db	108	;'l'
   301  007A24  61                 	db	97	;'a'
   302  007A25  67                 	db	103	;'g'
   303  007A26  20                 	db	32
   304  007A27  77                 	db	119	;'w'
   305  007A28  61                 	db	97	;'a'
   306  007A29  73                 	db	115	;'s'
   307  007A2A  20                 	db	32
   308  007A2B  72                 	db	114	;'r'
   309  007A2C  65                 	db	101	;'e'
   310  007A2D  73                 	db	115	;'s'
   311  007A2E  65                 	db	101	;'e'
   312  007A2F  74                 	db	116	;'t'
   313  007A30  20                 	db	32
   314  007A31  62                 	db	98	;'b'
   315  007A32  65                 	db	101	;'e'
   316  007A33  63                 	db	99	;'c'
   317  007A34  61                 	db	97	;'a'
   318  007A35  75                 	db	117	;'u'
   319  007A36  73                 	db	115	;'s'
   320  007A37  65                 	db	101	;'e'
   321  007A38  20                 	db	32
   322  007A39  61                 	db	97	;'a'
   323  007A3A  64                 	db	100	;'d'
   324  007A3B  64                 	db	100	;'d'
   325  007A3C  72                 	db	114	;'r'
   326  007A3D  65                 	db	101	;'e'
   327  007A3E  73                 	db	115	;'s'
   328  007A3F  73                 	db	115	;'s'
   329  007A40  20                 	db	32
   330  007A41  63                 	db	99	;'c'
   331  007A42  68                 	db	104	;'h'
   332  007A43  61                 	db	97	;'a'
   333  007A44  6E                 	db	110	;'n'
   334  007A45  67                 	db	103	;'g'
   335  007A46  65                 	db	101	;'e'
   336  007A47  20                 	db	32
   337  007A48  77                 	db	119	;'w'
   338  007A49  61                 	db	97	;'a'
   339  007A4A  73                 	db	115	;'s'
   340  007A4B  20                 	db	32
   341  007A4C  75                 	db	117	;'u'
   342  007A4D  6E                 	db	110	;'n'
   343  007A4E  73                 	db	115	;'s'
   344  007A4F  75                 	db	117	;'u'
   345  007A50  63                 	db	99	;'c'
   346  007A51  63                 	db	99	;'c'
   347  007A52  65                 	db	101	;'e'
   348  007A53  73                 	db	115	;'s'
   349  007A54  73                 	db	115	;'s'
   350  007A55  66                 	db	102	;'f'
   351  007A56  75                 	db	117	;'u'
   352  007A57  6C                 	db	108	;'l'
   353  007A58  2E                 	db	46
   354  007A59  0A                 	db	10
   355  007A5A  0D                 	db	13
   356  007A5B  00                 	db	0
   357  007A5C                     STR_105:
   358  007A5C  49                 	db	73	;'I'
   359  007A5D  50                 	db	80	;'P'
   360  007A5E  76                 	db	118	;'v'
   361  007A5F  34                 	db	52	;'4'
   362  007A60  3A                 	db	58	;':'
   363  007A61  20                 	db	32
   364  007A62  46                 	db	70	;'F'
   365  007A63  6C                 	db	108	;'l'
   366  007A64  61                 	db	97	;'a'
   367  007A65  67                 	db	103	;'g'
   368  007A66  20                 	db	32
   369  007A67  77                 	db	119	;'w'
   370  007A68  61                 	db	97	;'a'
   371  007A69  73                 	db	115	;'s'
   372  007A6A  20                 	db	32
   373  007A6B  72                 	db	114	;'r'
   374  007A6C  65                 	db	101	;'e'
   375  007A6D  73                 	db	115	;'s'
   376  007A6E  65                 	db	101	;'e'
   377  007A6F  74                 	db	116	;'t'
   378  007A70  20                 	db	32
   379  007A71  62                 	db	98	;'b'
   380  007A72  65                 	db	101	;'e'
   381  007A73  63                 	db	99	;'c'
   382  007A74  61                 	db	97	;'a'
   383  007A75  75                 	db	117	;'u'
   384  007A76  73                 	db	115	;'s'
   385  007A77  65                 	db	101	;'e'
   386  007A78  20                 	db	32
   387  007A79  61                 	db	97	;'a'
   388  007A7A  64                 	db	100	;'d'
   389  007A7B  64                 	db	100	;'d'
   390  007A7C  72                 	db	114	;'r'
   391  007A7D  65                 	db	101	;'e'
   392  007A7E  73                 	db	115	;'s'
   393  007A7F  73                 	db	115	;'s'
   394  007A80  20                 	db	32
   395  007A81  63                 	db	99	;'c'
   396  007A82  68                 	db	104	;'h'
   397  007A83  61                 	db	97	;'a'
   398  007A84  6E                 	db	110	;'n'
   399  007A85  67                 	db	103	;'g'
   400  007A86  65                 	db	101	;'e'
   401  007A87  20                 	db	32
   402  007A88  69                 	db	105	;'i'
   403  007A89  73                 	db	115	;'s'
   404  007A8A  20                 	db	32
   405  007A8B  63                 	db	99	;'c'
   406  007A8C  6F                 	db	111	;'o'
   407  007A8D  6D                 	db	109	;'m'
   408  007A8E  70                 	db	112	;'p'
   409  007A8F  6C                 	db	108	;'l'
   410  007A90  65                 	db	101	;'e'
   411  007A91  74                 	db	116	;'t'
   412  007A92  65                 	db	101	;'e'
   413  007A93  2E                 	db	46
   414  007A94  0A                 	db	10
   415  007A95  0D                 	db	13
   416  007A96  00                 	db	0
   417  007A97                     STR_47:
   418  007A97  45                 	db	69	;'E'
   419  007A98  74                 	db	116	;'t'
   420  007A99  68                 	db	104	;'h'
   421  007A9A  65                 	db	101	;'e'
   422  007A9B  72                 	db	114	;'r'
   423  007A9C  6E                 	db	110	;'n'
   424  007A9D  65                 	db	101	;'e'
   425  007A9E  74                 	db	116	;'t'
   426  007A9F  20                 	db	32
   427  007AA0  63                 	db	99	;'c'
   428  007AA1  6F                 	db	111	;'o'
   429  007AA2  6E                 	db	110	;'n'
   430  007AA3  74                 	db	116	;'t'
   431  007AA4  72                 	db	114	;'r'
   432  007AA5  6F                 	db	111	;'o'
   433  007AA6  6C                 	db	108	;'l'
   434  007AA7  6C                 	db	108	;'l'
   435  007AA8  65                 	db	101	;'e'
   436  007AA9  72                 	db	114	;'r'
   437  007AAA  20                 	db	32
   438  007AAB  68                 	db	104	;'h'
   439  007AAC  61                 	db	97	;'a'
   440  007AAD  73                 	db	115	;'s'
   441  007AAE  20                 	db	32
   442  007AAF  72                 	db	114	;'r'
   443  007AB0  65                 	db	101	;'e'
   444  007AB1  74                 	db	116	;'t'
   445  007AB2  75                 	db	117	;'u'
   446  007AB3  72                 	db	114	;'r'
   447  007AB4  6E                 	db	110	;'n'
   448  007AB5  65                 	db	101	;'e'
   449  007AB6  64                 	db	100	;'d'
   450  007AB7  20                 	db	32
   451  007AB8  61                 	db	97	;'a'
   452  007AB9  6E                 	db	110	;'n'
   453  007ABA  20                 	db	32
   454  007ABB  75                 	db	117	;'u'
   455  007ABC  6E                 	db	110	;'n'
   456  007ABD  6B                 	db	107	;'k'
   457  007ABE  6E                 	db	110	;'n'
   458  007ABF  6F                 	db	111	;'o'
   459  007AC0  77                 	db	119	;'w'
   460  007AC1  6E                 	db	110	;'n'
   461  007AC2  20                 	db	32
   462  007AC3  64                 	db	100	;'d'
   463  007AC4  65                 	db	101	;'e'
   464  007AC5  76                 	db	118	;'v'
   465  007AC6  69                 	db	105	;'i'
   466  007AC7  63                 	db	99	;'c'
   467  007AC8  65                 	db	101	;'e'
   468  007AC9  20                 	db	32
   469  007ACA  49                 	db	73	;'I'
   470  007ACB  44                 	db	68	;'D'
   471  007ACC  2E                 	db	46
   472  007ACD  00                 	db	0
   473  007ACE                     STR_22:
   474  007ACE  2D                 	db	45
   475  007ACF  2D                 	db	45
   476  007AD0  2D                 	db	45
   477  007AD1  2D                 	db	45
   478  007AD2  2D                 	db	45
   479  007AD3  2D                 	db	45
   480  007AD4  2D                 	db	45
   481  007AD5  2D                 	db	45
   482  007AD6  2D                 	db	45
   483  007AD7  2D                 	db	45
   484  007AD8  2D                 	db	45
   485  007AD9  2D                 	db	45
   486  007ADA  2D                 	db	45
   487  007ADB  2D                 	db	45
   488  007ADC  2D                 	db	45
   489  007ADD  2D                 	db	45
   490  007ADE  2D                 	db	45
   491  007ADF  2D                 	db	45
   492  007AE0  2D                 	db	45
   493  007AE1  2D                 	db	45
   494  007AE2  2D                 	db	45
   495  007AE3  2D                 	db	45
   496  007AE4  2D                 	db	45
   497  007AE5  2D                 	db	45
   498  007AE6  2D                 	db	45
   499  007AE7  2D                 	db	45
   500  007AE8  2D                 	db	45
   501  007AE9  2D                 	db	45
   502  007AEA  2D                 	db	45
   503  007AEB  2D                 	db	45
   504  007AEC  2D                 	db	45
   505  007AED  2D                 	db	45
   506  007AEE  2D                 	db	45
   507  007AEF  2D                 	db	45
   508  007AF0  2D                 	db	45
   509  007AF1  2D                 	db	45
   510  007AF2  2D                 	db	45
   511  007AF3  2D                 	db	45
   512  007AF4  2D                 	db	45
   513  007AF5  2D                 	db	45
   514  007AF6  2D                 	db	45
   515  007AF7  2D                 	db	45
   516  007AF8  2D                 	db	45
   517  007AF9  2D                 	db	45
   518  007AFA  2D                 	db	45
   519  007AFB  2D                 	db	45
   520  007AFC  2D                 	db	45
   521  007AFD  2D                 	db	45
   522  007AFE  0A                 	db	10
   523  007AFF  0D                 	db	13
   524  007B00  00                 	db	0
   525  007B01                     STR_23:
   526  007B01  07                 	db	7
   527  007B02  2A                 	db	42
   528  007B03  2A                 	db	42
   529  007B04  2A                 	db	42
   530  007B05  20                 	db	32
   531  007B06  43                 	db	67	;'C'
   532  007B07  52                 	db	82	;'R'
   533  007B08  49                 	db	73	;'I'
   534  007B09  54                 	db	84	;'T'
   535  007B0A  49                 	db	73	;'I'
   536  007B0B  43                 	db	67	;'C'
   537  007B0C  41                 	db	65	;'A'
   538  007B0D  4C                 	db	76	;'L'
   539  007B0E  20                 	db	32
   540  007B0F  45                 	db	69	;'E'
   541  007B10  52                 	db	82	;'R'
   542  007B11  52                 	db	82	;'R'
   543  007B12  4F                 	db	79	;'O'
   544  007B13  52                 	db	82	;'R'
   545  007B14  3A                 	db	58	;':'
   546  007B15  20                 	db	32
   547  007B16  57                 	db	87	;'W'
   548  007B17  41                 	db	65	;'A'
   549  007B18  54                 	db	84	;'T'
   550  007B19  43                 	db	67	;'C'
   551  007B1A  48                 	db	72	;'H'
   552  007B1B  44                 	db	68	;'D'
   553  007B1C  4F                 	db	79	;'O'
   554  007B1D  47                 	db	71	;'G'
   555  007B1E  20                 	db	32
   556  007B1F  43                 	db	67	;'C'
   557  007B20  41                 	db	65	;'A'
   558  007B21  55                 	db	85	;'U'
   559  007B22  53                 	db	83	;'S'
   560  007B23  45                 	db	69	;'E'
   561  007B24  44                 	db	68	;'D'
   562  007B25  20                 	db	32
   563  007B26  52                 	db	82	;'R'
   564  007B27  45                 	db	69	;'E'
   565  007B28  53                 	db	83	;'S'
   566  007B29  45                 	db	69	;'E'
   567  007B2A  54                 	db	84	;'T'
   568  007B2B  20                 	db	32
   569  007B2C  2A                 	db	42
   570  007B2D  2A                 	db	42
   571  007B2E  2A                 	db	42
   572  007B2F  0A                 	db	10
   573  007B30  0D                 	db	13
   574  007B31  00                 	db	0
   575  007B32                     STR_100:
   576  007B32  49                 	db	73	;'I'
   577  007B33  50                 	db	80	;'P'
   578  007B34  76                 	db	118	;'v'
   579  007B35  34                 	db	52	;'4'
   580  007B36  3A                 	db	58	;':'
   581  007B37  20                 	db	32
   582  007B38  41                 	db	65	;'A'
   583  007B39  52                 	db	82	;'R'
   584  007B3A  50                 	db	80	;'P'
   585  007B3B  20                 	db	32
   586  007B3C  73                 	db	115	;'s'
   587  007B3D  65                 	db	101	;'e'
   588  007B3E  6E                 	db	110	;'n'
   589  007B3F  74                 	db	116	;'t'
   590  007B40  20                 	db	32
   591  007B41  6D                 	db	109	;'m'
   592  007B42  61                 	db	97	;'a'
   593  007B43  78                 	db	120	;'x'
   594  007B44  69                 	db	105	;'i'
   595  007B45  6D                 	db	109	;'m'
   596  007B46  75                 	db	117	;'u'
   597  007B47  6D                 	db	109	;'m'
   598  007B48  20                 	db	32
   599  007B49  6E                 	db	110	;'n'
   600  007B4A  75                 	db	117	;'u'
   601  007B4B  6D                 	db	109	;'m'
   602  007B4C  62                 	db	98	;'b'
   603  007B4D  65                 	db	101	;'e'
   604  007B4E  72                 	db	114	;'r'
   605  007B4F  20                 	db	32
   606  007B50  6F                 	db	111	;'o'
   607  007B51  66                 	db	102	;'f'
   608  007B52  20                 	db	32
   609  007B53  72                 	db	114	;'r'
   610  007B54  65                 	db	101	;'e'
   611  007B55  71                 	db	113	;'q'
   612  007B56  75                 	db	117	;'u'
   613  007B57  65                 	db	101	;'e'
   614  007B58  73                 	db	115	;'s'
   615  007B59  74                 	db	116	;'t'
   616  007B5A  73                 	db	115	;'s'
   617  007B5B  2E                 	db	46
   618  007B5C  0A                 	db	10
   619  007B5D  0D                 	db	13
   620  007B5E  00                 	db	0
   621  007B5F                     STR_96:
   622  007B5F  49                 	db	73	;'I'
   623  007B60  50                 	db	80	;'P'
   624  007B61  76                 	db	118	;'v'
   625  007B62  34                 	db	52	;'4'
   626  007B63  3A                 	db	58	;':'
   627  007B64  20                 	db	32
   628  007B65  52                 	db	82	;'R'
   629  007B66  65                 	db	101	;'e'
   630  007B67  71                 	db	113	;'q'
   631  007B68  75                 	db	117	;'u'
   632  007B69  65                 	db	101	;'e'
   633  007B6A  73                 	db	115	;'s'
   634  007B6B  74                 	db	116	;'t'
   635  007B6C  20                 	db	32
   636  007B6D  66                 	db	102	;'f'
   637  007B6E  6F                 	db	111	;'o'
   638  007B6F  72                 	db	114	;'r'
   639  007B70  20                 	db	32
   640  007B71  6E                 	db	110	;'n'
   641  007B72  65                 	db	101	;'e'
   642  007B73  77                 	db	119	;'w'
   643  007B74  20                 	db	32
   644  007B75  49                 	db	73	;'I'
   645  007B76  50                 	db	80	;'P'
   646  007B77  20                 	db	32
   647  007B78  73                 	db	115	;'s'
   648  007B79  6F                 	db	111	;'o'
   649  007B7A  75                 	db	117	;'u'
   650  007B7B  72                 	db	114	;'r'
   651  007B7C  63                 	db	99	;'c'
   652  007B7D  65                 	db	101	;'e'
   653  007B7E  20                 	db	32
   654  007B7F  61                 	db	97	;'a'
   655  007B80  64                 	db	100	;'d'
   656  007B81  64                 	db	100	;'d'
   657  007B82  72                 	db	114	;'r'
   658  007B83  65                 	db	101	;'e'
   659  007B84  73                 	db	115	;'s'
   660  007B85  73                 	db	115	;'s'
   661  007B86  20                 	db	32
   662  007B87  28                 	db	40
   663  007B88  00                 	db	0
   664  007B89                     STR_76:
   665  007B89  41                 	db	65	;'A'
   666  007B8A  52                 	db	82	;'R'
   667  007B8B  50                 	db	80	;'P'
   668  007B8C  3A                 	db	58	;':'
   669  007B8D  20                 	db	32
   670  007B8E  57                 	db	87	;'W'
   671  007B8F  61                 	db	97	;'a'
   672  007B90  69                 	db	105	;'i'
   673  007B91  74                 	db	116	;'t'
   674  007B92  69                 	db	105	;'i'
   675  007B93  6E                 	db	110	;'n'
   676  007B94  67                 	db	103	;'g'
   677  007B95  20                 	db	32
   678  007B96  74                 	db	116	;'t'
   679  007B97  69                 	db	105	;'i'
   680  007B98  6D                 	db	109	;'m'
   681  007B99  65                 	db	101	;'e'
   682  007B9A  20                 	db	32
   683  007B9B  62                 	db	98	;'b'
   684  007B9C  65                 	db	101	;'e'
   685  007B9D  74                 	db	116	;'t'
   686  007B9E  77                 	db	119	;'w'
   687  007B9F  65                 	db	101	;'e'
   688  007BA0  65                 	db	101	;'e'
   689  007BA1  6E                 	db	110	;'n'
   690  007BA2  20                 	db	32
   691  007BA3  74                 	db	116	;'t'
   692  007BA4  68                 	db	104	;'h'
   693  007BA5  65                 	db	101	;'e'
   694  007BA6  20                 	db	32
   695  007BA7  70                 	db	112	;'p'
   696  007BA8  72                 	db	114	;'r'
   697  007BA9  6F                 	db	111	;'o'
   698  007BAA  62                 	db	98	;'b'
   699  007BAB  65                 	db	101	;'e'
   700  007BAC  73                 	db	115	;'s'
   701  007BAD  20                 	db	32
   702  007BAE  69                 	db	105	;'i'
   703  007BAF  73                 	db	115	;'s'
   704  007BB0  20                 	db	32
   705  007BB1  00                 	db	0
   706  007BB2                     STR_106:
   707  007BB2  49                 	db	73	;'I'
   708  007BB3  50                 	db	80	;'P'
   709  007BB4  76                 	db	118	;'v'
   710  007BB5  34                 	db	52	;'4'
   711  007BB6  3A                 	db	58	;':'
   712  007BB7  20                 	db	32
   713  007BB8  41                 	db	65	;'A'
   714  007BB9  52                 	db	82	;'R'
   715  007BBA  50                 	db	80	;'P'
   716  007BBB  20                 	db	32
   717  007BBC  72                 	db	114	;'r'
   718  007BBD  65                 	db	101	;'e'
   719  007BBE  74                 	db	116	;'t'
   720  007BBF  75                 	db	117	;'u'
   721  007BC0  72                 	db	114	;'r'
   722  007BC1  6E                 	db	110	;'n'
   723  007BC2  65                 	db	101	;'e'
   724  007BC3  64                 	db	100	;'d'
   725  007BC4  20                 	db	32
   726  007BC5  61                 	db	97	;'a'
   727  007BC6  6E                 	db	110	;'n'
   728  007BC7  20                 	db	32
   729  007BC8  75                 	db	117	;'u'
   730  007BC9  6E                 	db	110	;'n'
   731  007BCA  6B                 	db	107	;'k'
   732  007BCB  6E                 	db	110	;'n'
   733  007BCC  6F                 	db	111	;'o'
   734  007BCD  77                 	db	119	;'w'
   735  007BCE  6E                 	db	110	;'n'
   736  007BCF  20                 	db	32
   737  007BD0  65                 	db	101	;'e'
   738  007BD1  72                 	db	114	;'r'
   739  007BD2  72                 	db	114	;'r'
   740  007BD3  6F                 	db	111	;'o'
   741  007BD4  72                 	db	114	;'r'
   742  007BD5  2E                 	db	46
   743  007BD6  0A                 	db	10
   744  007BD7  0D                 	db	13
   745  007BD8  00                 	db	0
   746  007BD9                     STR_59:
   747  007BD9  5B                 	db	91	;'['
   748  007BDA  49                 	db	73	;'I'
   749  007BDB  6E                 	db	110	;'n'
   750  007BDC  76                 	db	118	;'v'
   751  007BDD  61                 	db	97	;'a'
   752  007BDE  6C                 	db	108	;'l'
   753  007BDF  69                 	db	105	;'i'
   754  007BE0  64                 	db	100	;'d'
   755  007BE1  20                 	db	32
   756  007BE2  41                 	db	65	;'A'
   757  007BE3  52                 	db	82	;'R'
   758  007BE4  50                 	db	80	;'P'
   759  007BE5  20                 	db	32
   760  007BE6  4D                 	db	77	;'M'
   761  007BE7  65                 	db	101	;'e'
   762  007BE8  73                 	db	115	;'s'
   763  007BE9  73                 	db	115	;'s'
   764  007BEA  61                 	db	97	;'a'
   765  007BEB  67                 	db	103	;'g'
   766  007BEC  65                 	db	101	;'e'
   767  007BED  20                 	db	32
   768  007BEE  77                 	db	119	;'w'
   769  007BEF  61                 	db	97	;'a'
   770  007BF0  73                 	db	115	;'s'
   771  007BF1  20                 	db	32
   772  007BF2  64                 	db	100	;'d'
   773  007BF3  69                 	db	105	;'i'
   774  007BF4  73                 	db	115	;'s'
   775  007BF5  63                 	db	99	;'c'
   776  007BF6  61                 	db	97	;'a'
   777  007BF7  72                 	db	114	;'r'
   778  007BF8  64                 	db	100	;'d'
   779  007BF9  65                 	db	101	;'e'
   780  007BFA  64                 	db	100	;'d'
   781  007BFB  2E                 	db	46
   782  007BFC  5D                 	db	93	;']'
   783  007BFD  0D                 	db	13
   784  007BFE  0A                 	db	10
   785  007BFF  00                 	db	0
   786  007C00                     STR_103:
   787  007C00  20                 	db	32
   788  007C01  77                 	db	119	;'w'
   789  007C02  61                 	db	97	;'a'
   790  007C03  73                 	db	115	;'s'
   791  007C04  20                 	db	32
   792  007C05  73                 	db	115	;'s'
   793  007C06  65                 	db	101	;'e'
   794  007C07  74                 	db	116	;'t'
   795  007C08  20                 	db	32
   796  007C09  74                 	db	116	;'t'
   797  007C0A  6F                 	db	111	;'o'
   798  007C0B  20                 	db	32
   799  007C0C  74                 	db	116	;'t'
   800  007C0D  68                 	db	104	;'h'
   801  007C0E  65                 	db	101	;'e'
   802  007C0F  20                 	db	32
   803  007C10  70                 	db	112	;'p'
   804  007C11  72                 	db	114	;'r'
   805  007C12  65                 	db	101	;'e'
   806  007C13  6C                 	db	108	;'l'
   807  007C14  69                 	db	105	;'i'
   808  007C15  6D                 	db	109	;'m'
   809  007C16  69                 	db	105	;'i'
   810  007C17  6E                 	db	110	;'n'
   811  007C18  61                 	db	97	;'a'
   812  007C19  72                 	db	114	;'r'
   813  007C1A  79                 	db	121	;'y'
   814  007C1B  20                 	db	32
   815  007C1C  61                 	db	97	;'a'
   816  007C1D  64                 	db	100	;'d'
   817  007C1E  64                 	db	100	;'d'
   818  007C1F  72                 	db	114	;'r'
   819  007C20  65                 	db	101	;'e'
   820  007C21  73                 	db	115	;'s'
   821  007C22  73                 	db	115	;'s'
   822  007C23  20                 	db	32
   823  007C24  28                 	db	40
   824  007C25  00                 	db	0
   825  007C26                     STR_46:
   826  007C26  45                 	db	69	;'E'
   827  007C27  74                 	db	116	;'t'
   828  007C28  68                 	db	104	;'h'
   829  007C29  65                 	db	101	;'e'
   830  007C2A  72                 	db	114	;'r'
   831  007C2B  6E                 	db	110	;'n'
   832  007C2C  65                 	db	101	;'e'
   833  007C2D  74                 	db	116	;'t'
   834  007C2E  20                 	db	32
   835  007C2F  63                 	db	99	;'c'
   836  007C30  6F                 	db	111	;'o'
   837  007C31  6E                 	db	110	;'n'
   838  007C32  74                 	db	116	;'t'
   839  007C33  72                 	db	114	;'r'
   840  007C34  6F                 	db	111	;'o'
   841  007C35  6C                 	db	108	;'l'
   842  007C36  6C                 	db	108	;'l'
   843  007C37  65                 	db	101	;'e'
   844  007C38  72                 	db	114	;'r'
   845  007C39  20                 	db	32
   846  007C3A  69                 	db	105	;'i'
   847  007C3B  73                 	db	115	;'s'
   848  007C3C  20                 	db	32
   849  007C3D  75                 	db	117	;'u'
   850  007C3E  6E                 	db	110	;'n'
   851  007C3F  72                 	db	114	;'r'
   852  007C40  65                 	db	101	;'e'
   853  007C41  73                 	db	115	;'s'
   854  007C42  70                 	db	112	;'p'
   855  007C43  6F                 	db	111	;'o'
   856  007C44  6E                 	db	110	;'n'
   857  007C45  73                 	db	115	;'s'
   858  007C46  69                 	db	105	;'i'
   859  007C47  76                 	db	118	;'v'
   860  007C48  65                 	db	101	;'e'
   861  007C49  2E                 	db	46
   862  007C4A  00                 	db	0
   863  007C4B                     STR_81:
   864  007C4B  41                 	db	65	;'A'
   865  007C4C  52                 	db	82	;'R'
   866  007C4D  50                 	db	80	;'P'
   867  007C4E  3A                 	db	58	;':'
   868  007C4F  20                 	db	32
   869  007C50  49                 	db	73	;'I'
   870  007C51  50                 	db	80	;'P'
   871  007C52  76                 	db	118	;'v'
   872  007C53  34                 	db	52	;'4'
   873  007C54  20                 	db	32
   874  007C55  61                 	db	97	;'a'
   875  007C56  64                 	db	100	;'d'
   876  007C57  64                 	db	100	;'d'
   877  007C58  72                 	db	114	;'r'
   878  007C59  65                 	db	101	;'e'
   879  007C5A  73                 	db	115	;'s'
   880  007C5B  73                 	db	115	;'s'
   881  007C5C  20                 	db	32
   882  007C5D  61                 	db	97	;'a'
   883  007C5E  6C                 	db	108	;'l'
   884  007C5F  72                 	db	114	;'r'
   885  007C60  65                 	db	101	;'e'
   886  007C61  61                 	db	97	;'a'
   887  007C62  64                 	db	100	;'d'
   888  007C63  79                 	db	121	;'y'
   889  007C64  20                 	db	32
   890  007C65  69                 	db	105	;'i'
   891  007C66  6E                 	db	110	;'n'
   892  007C67  20                 	db	32
   893  007C68  75                 	db	117	;'u'
   894  007C69  73                 	db	115	;'s'
   895  007C6A  65                 	db	101	;'e'
   896  007C6B  21                 	db	33
   897  007C6C  0A                 	db	10
   898  007C6D  0D                 	db	13
   899  007C6E  00                 	db	0
   900  007C6F                     STR_98:
   901  007C6F  49                 	db	73	;'I'
   902  007C70  50                 	db	80	;'P'
   903  007C71  76                 	db	118	;'v'
   904  007C72  34                 	db	52	;'4'
   905  007C73  3A                 	db	58	;':'
   906  007C74  20                 	db	32
   907  007C75  41                 	db	65	;'A'
   908  007C76  64                 	db	100	;'d'
   909  007C77  64                 	db	100	;'d'
   910  007C78  72                 	db	114	;'r'
   911  007C79  65                 	db	101	;'e'
   912  007C7A  73                 	db	115	;'s'
   913  007C7B  73                 	db	115	;'s'
   914  007C7C  20                 	db	32
   915  007C7D  69                 	db	105	;'i'
   916  007C7E  73                 	db	115	;'s'
   917  007C7F  20                 	db	32
   918  007C80  61                 	db	97	;'a'
   919  007C81  6C                 	db	108	;'l'
   920  007C82  72                 	db	114	;'r'
   921  007C83  65                 	db	101	;'e'
   922  007C84  61                 	db	97	;'a'
   923  007C85  64                 	db	100	;'d'
   924  007C86  79                 	db	121	;'y'
   925  007C87  20                 	db	32
   926  007C88  69                 	db	105	;'i'
   927  007C89  6E                 	db	110	;'n'
   928  007C8A  20                 	db	32
   929  007C8B  75                 	db	117	;'u'
   930  007C8C  73                 	db	115	;'s'
   931  007C8D  65                 	db	101	;'e'
   932  007C8E  2E                 	db	46
   933  007C8F  0A                 	db	10
   934  007C90  0D                 	db	13
   935  007C91  00                 	db	0
   936  007C92                     STR_48:
   937  007C92  49                 	db	73	;'I'
   938  007C93  50                 	db	80	;'P'
   939  007C94  20                 	db	32
   940  007C95  61                 	db	97	;'a'
   941  007C96  64                 	db	100	;'d'
   942  007C97  64                 	db	100	;'d'
   943  007C98  72                 	db	114	;'r'
   944  007C99  65                 	db	101	;'e'
   945  007C9A  73                 	db	115	;'s'
   946  007C9B  73                 	db	115	;'s'
   947  007C9C  20                 	db	32
   948  007C9D  63                 	db	99	;'c'
   949  007C9E  6F                 	db	111	;'o'
   950  007C9F  75                 	db	117	;'u'
   951  007CA0  6C                 	db	108	;'l'
   952  007CA1  64                 	db	100	;'d'
   953  007CA2  20                 	db	32
   954  007CA3  6E                 	db	110	;'n'
   955  007CA4  6F                 	db	111	;'o'
   956  007CA5  74                 	db	116	;'t'
   957  007CA6  20                 	db	32
   958  007CA7  62                 	db	98	;'b'
   959  007CA8  65                 	db	101	;'e'
   960  007CA9  20                 	db	32
   961  007CAA  72                 	db	114	;'r'
   962  007CAB  65                 	db	101	;'e'
   963  007CAC  73                 	db	115	;'s'
   964  007CAD  6F                 	db	111	;'o'
   965  007CAE  6C                 	db	108	;'l'
   966  007CAF  76                 	db	118	;'v'
   967  007CB0  65                 	db	101	;'e'
   968  007CB1  64                 	db	100	;'d'
   969  007CB2  2E                 	db	46
   970  007CB3  00                 	db	0
   971  007CB4                     STR_83:
   972  007CB4  41                 	db	65	;'A'
   973  007CB5  52                 	db	82	;'R'
   974  007CB6  50                 	db	80	;'P'
   975  007CB7  3A                 	db	58	;':'
   976  007CB8  20                 	db	32
   977  007CB9  41                 	db	65	;'A'
   978  007CBA  6E                 	db	110	;'n'
   979  007CBB  20                 	db	32
   980  007CBC  75                 	db	117	;'u'
   981  007CBD  6E                 	db	110	;'n'
   982  007CBE  6B                 	db	107	;'k'
   983  007CBF  6E                 	db	110	;'n'
   984  007CC0  6F                 	db	111	;'o'
   985  007CC1  77                 	db	119	;'w'
   986  007CC2  6E                 	db	110	;'n'
   987  007CC3  20                 	db	32
   988  007CC4  65                 	db	101	;'e'
   989  007CC5  72                 	db	114	;'r'
   990  007CC6  72                 	db	114	;'r'
   991  007CC7  6F                 	db	111	;'o'
   992  007CC8  72                 	db	114	;'r'
   993  007CC9  20                 	db	32
   994  007CCA  6F                 	db	111	;'o'
   995  007CCB  63                 	db	99	;'c'
   996  007CCC  63                 	db	99	;'c'
   997  007CCD  75                 	db	117	;'u'
   998  007CCE  72                 	db	114	;'r'
   999  007CCF  65                 	db	101	;'e'
  1000  007CD0  64                 	db	100	;'d'
  1001  007CD1  2E                 	db	46
  1002  007CD2  0A                 	db	10
  1003  007CD3  0D                 	db	13
  1004  007CD4  00                 	db	0
  1005  007CD5                     STR_101:
  1006  007CD5  49                 	db	73	;'I'
  1007  007CD6  50                 	db	80	;'P'
  1008  007CD7  76                 	db	118	;'v'
  1009  007CD8  34                 	db	52	;'4'
  1010  007CD9  3A                 	db	58	;':'
  1011  007CDA  20                 	db	32
  1012  007CDB  41                 	db	65	;'A'
  1013  007CDC  52                 	db	82	;'R'
  1014  007CDD  50                 	db	80	;'P'
  1015  007CDE  20                 	db	32
  1016  007CDF  72                 	db	114	;'r'
  1017  007CE0  65                 	db	101	;'e'
  1018  007CE1  74                 	db	116	;'t'
  1019  007CE2  75                 	db	117	;'u'
  1020  007CE3  72                 	db	114	;'r'
  1021  007CE4  6E                 	db	110	;'n'
  1022  007CE5  65                 	db	101	;'e'
  1023  007CE6  64                 	db	100	;'d'
  1024  007CE7  20                 	db	32
  1025  007CE8  73                 	db	115	;'s'
  1026  007CE9  75                 	db	117	;'u'
  1027  007CEA  63                 	db	99	;'c'
  1028  007CEB  63                 	db	99	;'c'
  1029  007CEC  65                 	db	101	;'e'
  1030  007CED  73                 	db	115	;'s'
  1031  007CEE  73                 	db	115	;'s'
  1032  007CEF  2E                 	db	46
  1033  007CF0  0A                 	db	10
  1034  007CF1  0D                 	db	13
  1035  007CF2  00                 	db	0
  1036  007CF3                     STR_73:
  1037  007CF3  41                 	db	65	;'A'
  1038  007CF4  52                 	db	82	;'R'
  1039  007CF5  50                 	db	80	;'P'
  1040  007CF6  3A                 	db	58	;':'
  1041  007CF7  20                 	db	32
  1042  007CF8  57                 	db	87	;'W'
  1043  007CF9  61                 	db	97	;'a'
  1044  007CFA  69                 	db	105	;'i'
  1045  007CFB  74                 	db	116	;'t'
  1046  007CFC  69                 	db	105	;'i'
  1047  007CFD  6E                 	db	110	;'n'
  1048  007CFE  67                 	db	103	;'g'
  1049  007CFF  20                 	db	32
  1050  007D00  74                 	db	116	;'t'
  1051  007D01  6F                 	db	111	;'o'
  1052  007D02  20                 	db	32
  1053  007D03  73                 	db	115	;'s'
  1054  007D04  65                 	db	101	;'e'
  1055  007D05  6E                 	db	110	;'n'
  1056  007D06  64                 	db	100	;'d'
  1057  007D07  20                 	db	32
  1058  007D08  70                 	db	112	;'p'
  1059  007D09  72                 	db	114	;'r'
  1060  007D0A  6F                 	db	111	;'o'
  1061  007D0B  62                 	db	98	;'b'
  1062  007D0C  65                 	db	101	;'e'
  1063  007D0D  2E                 	db	46
  1064  007D0E  0A                 	db	10
  1065  007D0F  0D                 	db	13
  1066  007D10  00                 	db	0
  1067  007D11                     STR_70:
  1068  007D11  41                 	db	65	;'A'
  1069  007D12  52                 	db	82	;'R'
  1070  007D13  50                 	db	80	;'P'
  1071  007D14  3A                 	db	58	;':'
  1072  007D15  20                 	db	32
  1073  007D16  46                 	db	70	;'F'
  1074  007D17  6F                 	db	111	;'o'
  1075  007D18  75                 	db	117	;'u'
  1076  007D19  6E                 	db	110	;'n'
  1077  007D1A  64                 	db	100	;'d'
  1078  007D1B  20                 	db	32
  1079  007D1C  61                 	db	97	;'a'
  1080  007D1D  20                 	db	32
  1081  007D1E  76                 	db	118	;'v'
  1082  007D1F  61                 	db	97	;'a'
  1083  007D20  6C                 	db	108	;'l'
  1084  007D21  69                 	db	105	;'i'
  1085  007D22  64                 	db	100	;'d'
  1086  007D23  20                 	db	32
  1087  007D24  65                 	db	101	;'e'
  1088  007D25  6E                 	db	110	;'n'
  1089  007D26  74                 	db	116	;'t'
  1090  007D27  72                 	db	114	;'r'
  1091  007D28  79                 	db	121	;'y'
  1092  007D29  20                 	db	32
  1093  007D2A  66                 	db	102	;'f'
  1094  007D2B  6F                 	db	111	;'o'
  1095  007D2C  72                 	db	114	;'r'
  1096  007D2D  20                 	db	32
  1097  007D2E  00                 	db	0
  1098  007D2F                     STR_42:
  1099  007D2F  20                 	db	32
  1100  007D30  45                 	db	69	;'E'
  1101  007D31  54                 	db	84	;'T'
  1102  007D32  48                 	db	72	;'H'
  1103  007D33  45                 	db	69	;'E'
  1104  007D34  52                 	db	82	;'R'
  1105  007D35  4E                 	db	78	;'N'
  1106  007D36  45                 	db	69	;'E'
  1107  007D37  54                 	db	84	;'T'
  1108  007D38  20                 	db	32
  1109  007D39  43                 	db	67	;'C'
  1110  007D3A  4F                 	db	79	;'O'
  1111  007D3B  4E                 	db	78	;'N'
  1112  007D3C  54                 	db	84	;'T'
  1113  007D3D  52                 	db	82	;'R'
  1114  007D3E  4F                 	db	79	;'O'
  1115  007D3F  4C                 	db	76	;'L'
  1116  007D40  4C                 	db	76	;'L'
  1117  007D41  45                 	db	69	;'E'
  1118  007D42  52                 	db	82	;'R'
  1119  007D43  20                 	db	32
  1120  007D44  4D                 	db	77	;'M'
  1121  007D45  4F                 	db	79	;'O'
  1122  007D46  44                 	db	68	;'D'
  1123  007D47  55                 	db	85	;'U'
  1124  007D48  4C                 	db	76	;'L'
  1125  007D49  45                 	db	69	;'E'
  1126  007D4A  3A                 	db	58	;':'
  1127  007D4B  20                 	db	32
  1128  007D4C  00                 	db	0
  1129  007D4D                     STR_49:
  1130  007D4D  41                 	db	65	;'A'
  1131  007D4E  6E                 	db	110	;'n'
  1132  007D4F  20                 	db	32
  1133  007D50  75                 	db	117	;'u'
  1134  007D51  6E                 	db	110	;'n'
  1135  007D52  6B                 	db	107	;'k'
  1136  007D53  6E                 	db	110	;'n'
  1137  007D54  6F                 	db	111	;'o'
  1138  007D55  77                 	db	119	;'w'
  1139  007D56  6E                 	db	110	;'n'
  1140  007D57  20                 	db	32
  1141  007D58  65                 	db	101	;'e'
  1142  007D59  72                 	db	114	;'r'
  1143  007D5A  72                 	db	114	;'r'
  1144  007D5B  6F                 	db	111	;'o'
  1145  007D5C  72                 	db	114	;'r'
  1146  007D5D  20                 	db	32
  1147  007D5E  68                 	db	104	;'h'
  1148  007D5F  61                 	db	97	;'a'
  1149  007D60  73                 	db	115	;'s'
  1150  007D61  20                 	db	32
  1151  007D62  6F                 	db	111	;'o'
  1152  007D63  63                 	db	99	;'c'
  1153  007D64  63                 	db	99	;'c'
  1154  007D65  75                 	db	117	;'u'
  1155  007D66  72                 	db	114	;'r'
  1156  007D67  65                 	db	101	;'e'
  1157  007D68  64                 	db	100	;'d'
  1158  007D69  2E                 	db	46
  1159  007D6A  00                 	db	0
  1160  007D6B                     STR_38:
  1161  007D6B  63                 	db	99	;'c'
  1162  007D6C  6F                 	db	111	;'o'
  1163  007D6D  6E                 	db	110	;'n'
  1164  007D6E  6E                 	db	110	;'n'
  1165  007D6F  65                 	db	101	;'e'
  1166  007D70  63                 	db	99	;'c'
  1167  007D71  74                 	db	116	;'t'
  1168  007D72  69                 	db	105	;'i'
  1169  007D73  6F                 	db	111	;'o'
  1170  007D74  6E                 	db	110	;'n'
  1171  007D75  20                 	db	32
  1172  007D76  69                 	db	105	;'i'
  1173  007D77  73                 	db	115	;'s'
  1174  007D78  20                 	db	32
  1175  007D79  48                 	db	72	;'H'
  1176  007D7A  61                 	db	97	;'a'
  1177  007D7B  6C                 	db	108	;'l'
  1178  007D7C  66                 	db	102	;'f'
  1179  007D7D  20                 	db	32
  1180  007D7E  44                 	db	68	;'D'
  1181  007D7F  75                 	db	117	;'u'
  1182  007D80  70                 	db	112	;'p'
  1183  007D81  6C                 	db	108	;'l'
  1184  007D82  65                 	db	101	;'e'
  1185  007D83  78                 	db	120	;'x'
  1186  007D84  2E                 	db	46
  1187  007D85  0A                 	db	10
  1188  007D86  0D                 	db	13
  1189  007D87  00                 	db	0
  1190  007D88                     STR_39:
  1191  007D88  63                 	db	99	;'c'
  1192  007D89  6F                 	db	111	;'o'
  1193  007D8A  6E                 	db	110	;'n'
  1194  007D8B  6E                 	db	110	;'n'
  1195  007D8C  65                 	db	101	;'e'
  1196  007D8D  63                 	db	99	;'c'
  1197  007D8E  74                 	db	116	;'t'
  1198  007D8F  69                 	db	105	;'i'
  1199  007D90  6F                 	db	111	;'o'
  1200  007D91  6E                 	db	110	;'n'
  1201  007D92  20                 	db	32
  1202  007D93  69                 	db	105	;'i'
  1203  007D94  73                 	db	115	;'s'
  1204  007D95  20                 	db	32
  1205  007D96  46                 	db	70	;'F'
  1206  007D97  75                 	db	117	;'u'
  1207  007D98  6C                 	db	108	;'l'
  1208  007D99  6C                 	db	108	;'l'
  1209  007D9A  20                 	db	32
  1210  007D9B  44                 	db	68	;'D'
  1211  007D9C  75                 	db	117	;'u'
  1212  007D9D  70                 	db	112	;'p'
  1213  007D9E  6C                 	db	108	;'l'
  1214  007D9F  65                 	db	101	;'e'
  1215  007DA0  78                 	db	120	;'x'
  1216  007DA1  2E                 	db	46
  1217  007DA2  0A                 	db	10
  1218  007DA3  0D                 	db	13
  1219  007DA4  00                 	db	0
  1220  007DA5                     STR_72:
  1221  007DA5  41                 	db	65	;'A'
  1222  007DA6  52                 	db	82	;'R'
  1223  007DA7  50                 	db	80	;'P'
  1224  007DA8  3A                 	db	58	;':'
  1225  007DA9  20                 	db	32
  1226  007DAA  50                 	db	80	;'P'
  1227  007DAB  72                 	db	114	;'r'
  1228  007DAC  65                 	db	101	;'e'
  1229  007DAD  70                 	db	112	;'p'
  1230  007DAE  61                 	db	97	;'a'
  1231  007DAF  72                 	db	114	;'r'
  1232  007DB0  69                 	db	105	;'i'
  1233  007DB1  6E                 	db	110	;'n'
  1234  007DB2  67                 	db	103	;'g'
  1235  007DB3  20                 	db	32
  1236  007DB4  70                 	db	112	;'p'
  1237  007DB5  72                 	db	114	;'r'
  1238  007DB6  6F                 	db	111	;'o'
  1239  007DB7  62                 	db	98	;'b'
  1240  007DB8  65                 	db	101	;'e'
  1241  007DB9  2E                 	db	46
  1242  007DBA  2E                 	db	46
  1243  007DBB  2E                 	db	46
  1244  007DBC  0A                 	db	10
  1245  007DBD  0D                 	db	13
  1246  007DBE  00                 	db	0
  1247  007DBF                     STR_82:
  1248  007DBF  41                 	db	65	;'A'
  1249  007DC0  52                 	db	82	;'R'
  1250  007DC1  50                 	db	80	;'P'
  1251  007DC2  3A                 	db	58	;':'
  1252  007DC3  20                 	db	32
  1253  007DC4  4E                 	db	78	;'N'
  1254  007DC5  6F                 	db	111	;'o'
  1255  007DC6  62                 	db	98	;'b'
  1256  007DC7  6F                 	db	111	;'o'
  1257  007DC8  64                 	db	100	;'d'
  1258  007DC9  79                 	db	121	;'y'
  1259  007DCA  20                 	db	32
  1260  007DCB  61                 	db	97	;'a'
  1261  007DCC  6E                 	db	110	;'n'
  1262  007DCD  73                 	db	115	;'s'
  1263  007DCE  77                 	db	119	;'w'
  1264  007DCF  65                 	db	101	;'e'
  1265  007DD0  72                 	db	114	;'r'
  1266  007DD1  65                 	db	101	;'e'
  1267  007DD2  64                 	db	100	;'d'
  1268  007DD3  2E                 	db	46
  1269  007DD4  0A                 	db	10
  1270  007DD5  0D                 	db	13
  1271  007DD6  00                 	db	0
  1272  007DD7                     STR_25:
  1273  007DD7  46                 	db	70	;'F'
  1274  007DD8  49                 	db	73	;'I'
  1275  007DD9  52                 	db	82	;'R'
  1276  007DDA  4D                 	db	77	;'M'
  1277  007DDB  57                 	db	87	;'W'
  1278  007DDC  41                 	db	65	;'A'
  1279  007DDD  52                 	db	82	;'R'
  1280  007DDE  45                 	db	69	;'E'
  1281  007DDF  20                 	db	32
  1282  007DE0  42                 	db	66	;'B'
  1283  007DE1  55                 	db	85	;'U'
  1284  007DE2  49                 	db	73	;'I'
  1285  007DE3  4C                 	db	76	;'L'
  1286  007DE4  44                 	db	68	;'D'
  1287  007DE5  20                 	db	32
  1288  007DE6  44                 	db	68	;'D'
  1289  007DE7  41                 	db	65	;'A'
  1290  007DE8  54                 	db	84	;'T'
  1291  007DE9  45                 	db	69	;'E'
  1292  007DEA  20                 	db	32
  1293  007DEB  49                 	db	73	;'I'
  1294  007DEC  53                 	db	83	;'S'
  1295  007DED  20                 	db	32
  1296  007DEE  00                 	db	0
  1297  007DEF                     STR_102:
  1298  007DEF  49                 	db	73	;'I'
  1299  007DF0  50                 	db	80	;'P'
  1300  007DF1  76                 	db	118	;'v'
  1301  007DF2  34                 	db	52	;'4'
  1302  007DF3  3A                 	db	58	;':'
  1303  007DF4  20                 	db	32
  1304  007DF5  4F                 	db	79	;'O'
  1305  007DF6  6C                 	db	108	;'l'
  1306  007DF7  64                 	db	100	;'d'
  1307  007DF8  20                 	db	32
  1308  007DF9  49                 	db	73	;'I'
  1309  007DFA  50                 	db	80	;'P'
  1310  007DFB  20                 	db	32
  1311  007DFC  53                 	db	83	;'S'
  1312  007DFD  72                 	db	114	;'r'
  1313  007DFE  63                 	db	99	;'c'
  1314  007DFF  20                 	db	32
  1315  007E00  41                 	db	65	;'A'
  1316  007E01  64                 	db	100	;'d'
  1317  007E02  64                 	db	100	;'d'
  1318  007E03  72                 	db	114	;'r'
  1319  007E04  20                 	db	32
  1320  007E05  00                 	db	0
  1321  007E06                     STR_31:
  1322  007E06  53                 	db	83	;'S'
  1323  007E07  6F                 	db	111	;'o'
  1324  007E08  75                 	db	117	;'u'
  1325  007E09  72                 	db	114	;'r'
  1326  007E0A  63                 	db	99	;'c'
  1327  007E0B  65                 	db	101	;'e'
  1328  007E0C  20                 	db	32
  1329  007E0D  4D                 	db	77	;'M'
  1330  007E0E  41                 	db	65	;'A'
  1331  007E0F  43                 	db	67	;'C'
  1332  007E10  20                 	db	32
  1333  007E11  61                 	db	97	;'a'
  1334  007E12  64                 	db	100	;'d'
  1335  007E13  64                 	db	100	;'d'
  1336  007E14  72                 	db	114	;'r'
  1337  007E15  65                 	db	101	;'e'
  1338  007E16  73                 	db	115	;'s'
  1339  007E17  73                 	db	115	;'s'
  1340  007E18  20                 	db	32
  1341  007E19  69                 	db	105	;'i'
  1342  007E1A  73                 	db	115	;'s'
  1343  007E1B  20                 	db	32
  1344  007E1C  00                 	db	0
  1345  007E1D                     STR_78:
  1346  007E1D  41                 	db	65	;'A'
  1347  007E1E  52                 	db	82	;'R'
  1348  007E1F  50                 	db	80	;'P'
  1349  007E20  3A                 	db	58	;':'
  1350  007E21  20                 	db	32
  1351  007E22  53                 	db	83	;'S'
  1352  007E23  65                 	db	101	;'e'
  1353  007E24  6E                 	db	110	;'n'
  1354  007E25  64                 	db	100	;'d'
  1355  007E26  69                 	db	105	;'i'
  1356  007E27  6E                 	db	110	;'n'
  1357  007E28  67                 	db	103	;'g'
  1358  007E29  20                 	db	32
  1359  007E2A  70                 	db	112	;'p'
  1360  007E2B  72                 	db	114	;'r'
  1361  007E2C  6F                 	db	111	;'o'
  1362  007E2D  62                 	db	98	;'b'
  1363  007E2E  65                 	db	101	;'e'
  1364  007E2F  20                 	db	32
  1365  007E30  23                 	db	35
  1366  007E31  00                 	db	0
  1367  007E32                     STR_37:
  1368  007E32  53                 	db	83	;'S'
  1369  007E33  70                 	db	112	;'p'
  1370  007E34  65                 	db	101	;'e'
  1371  007E35  65                 	db	101	;'e'
  1372  007E36  64                 	db	100	;'d'
  1373  007E37  20                 	db	32
  1374  007E38  69                 	db	105	;'i'
  1375  007E39  73                 	db	115	;'s'
  1376  007E3A  20                 	db	32
  1377  007E3B  31                 	db	49	;'1'
  1378  007E3C  30                 	db	48	;'0'
  1379  007E3D  30                 	db	48	;'0'
  1380  007E3E  20                 	db	32
  1381  007E3F  4D                 	db	77	;'M'
  1382  007E40  62                 	db	98	;'b'
  1383  007E41  70                 	db	112	;'p'
  1384  007E42  73                 	db	115	;'s'
  1385  007E43  2C                 	db	44
  1386  007E44  20                 	db	32
  1387  007E45  00                 	db	0
  1388  007E46                     STR_10:
  1389  007E46  5B                 	db	91	;'['
  1390  007E47  55                 	db	85	;'U'
  1391  007E48  6E                 	db	110	;'n'
  1392  007E49  6B                 	db	107	;'k'
  1393  007E4A  6E                 	db	110	;'n'
  1394  007E4B  6F                 	db	111	;'o'
  1395  007E4C  77                 	db	119	;'w'
  1396  007E4D  6E                 	db	110	;'n'
  1397  007E4E  20                 	db	32
  1398  007E4F  45                 	db	69	;'E'
  1399  007E50  74                 	db	116	;'t'
  1400  007E51  68                 	db	104	;'h'
  1401  007E52  65                 	db	101	;'e'
  1402  007E53  72                 	db	114	;'r'
  1403  007E54  54                 	db	84	;'T'
  1404  007E55  79                 	db	121	;'y'
  1405  007E56  70                 	db	112	;'p'
  1406  007E57  65                 	db	101	;'e'
  1407  007E58  5D                 	db	93	;']'
  1408  007E59  00                 	db	0
  1409  007E5A                     STR_95:
  1410  007E5A  5B                 	db	91	;'['
  1411  007E5B  49                 	db	73	;'I'
  1412  007E5C  4E                 	db	78	;'N'
  1413  007E5D  56                 	db	86	;'V'
  1414  007E5E  41                 	db	65	;'A'
  1415  007E5F  4C                 	db	76	;'L'
  1416  007E60  49                 	db	73	;'I'
  1417  007E61  44                 	db	68	;'D'
  1418  007E62  20                 	db	32
  1419  007E63  43                 	db	67	;'C'
  1420  007E64  48                 	db	72	;'H'
  1421  007E65  45                 	db	69	;'E'
  1422  007E66  43                 	db	67	;'C'
  1423  007E67  4B                 	db	75	;'K'
  1424  007E68  53                 	db	83	;'S'
  1425  007E69  55                 	db	85	;'U'
  1426  007E6A  4D                 	db	77	;'M'
  1427  007E6B  5D                 	db	93	;']'
  1428  007E6C  00                 	db	0
  1429  007E6D                     STR_36:
  1430  007E6D  53                 	db	83	;'S'
  1431  007E6E  70                 	db	112	;'p'
  1432  007E6F  65                 	db	101	;'e'
  1433  007E70  65                 	db	101	;'e'
  1434  007E71  64                 	db	100	;'d'
  1435  007E72  20                 	db	32
  1436  007E73  69                 	db	105	;'i'
  1437  007E74  73                 	db	115	;'s'
  1438  007E75  20                 	db	32
  1439  007E76  31                 	db	49	;'1'
  1440  007E77  30                 	db	48	;'0'
  1441  007E78  20                 	db	32
  1442  007E79  4D                 	db	77	;'M'
  1443  007E7A  62                 	db	98	;'b'
  1444  007E7B  70                 	db	112	;'p'
  1445  007E7C  73                 	db	115	;'s'
  1446  007E7D  2C                 	db	44
  1447  007E7E  20                 	db	32
  1448  007E7F  00                 	db	0
  1449  007E80                     STR_35:
  1450  007E80  4C                 	db	76	;'L'
  1451  007E81  69                 	db	105	;'i'
  1452  007E82  6E                 	db	110	;'n'
  1453  007E83  6B                 	db	107	;'k'
  1454  007E84  20                 	db	32
  1455  007E85  65                 	db	101	;'e'
  1456  007E86  73                 	db	115	;'s'
  1457  007E87  74                 	db	116	;'t'
  1458  007E88  61                 	db	97	;'a'
  1459  007E89  62                 	db	98	;'b'
  1460  007E8A  6C                 	db	108	;'l'
  1461  007E8B  69                 	db	105	;'i'
  1462  007E8C  73                 	db	115	;'s'
  1463  007E8D  68                 	db	104	;'h'
  1464  007E8E  65                 	db	101	;'e'
  1465  007E8F  64                 	db	100	;'d'
  1466  007E90  2E                 	db	46
  1467  007E91  20                 	db	32
  1468  007E92  00                 	db	0
  1469  007E93                     STR_43:
  1470  007E93  20                 	db	32
  1471  007E94  45                 	db	69	;'E'
  1472  007E95  54                 	db	84	;'T'
  1473  007E96  48                 	db	72	;'H'
  1474  007E97  45                 	db	69	;'E'
  1475  007E98  52                 	db	82	;'R'
  1476  007E99  4E                 	db	78	;'N'
  1477  007E9A  45                 	db	69	;'E'
  1478  007E9B  54                 	db	84	;'T'
  1479  007E9C  20                 	db	32
  1480  007E9D  4D                 	db	77	;'M'
  1481  007E9E  4F                 	db	79	;'O'
  1482  007E9F  44                 	db	68	;'D'
  1483  007EA0  55                 	db	85	;'U'
  1484  007EA1  4C                 	db	76	;'L'
  1485  007EA2  45                 	db	69	;'E'
  1486  007EA3  3A                 	db	58	;':'
  1487  007EA4  20                 	db	32
  1488  007EA5  00                 	db	0
  1489  007EA6                     STR_54:
  1490  007EA6  55                 	db	85	;'U'
  1491  007EA7  6E                 	db	110	;'n'
  1492  007EA8  6B                 	db	107	;'k'
  1493  007EA9  6E                 	db	110	;'n'
  1494  007EAA  6F                 	db	111	;'o'
  1495  007EAB  77                 	db	119	;'w'
  1496  007EAC  6E                 	db	110	;'n'
  1497  007EAD  20                 	db	32
  1498  007EAE  45                 	db	69	;'E'
  1499  007EAF  74                 	db	116	;'t'
  1500  007EB0  68                 	db	104	;'h'
  1501  007EB1  65                 	db	101	;'e'
  1502  007EB2  72                 	db	114	;'r'
  1503  007EB3  54                 	db	84	;'T'
  1504  007EB4  79                 	db	121	;'y'
  1505  007EB5  70                 	db	112	;'p'
  1506  007EB6  65                 	db	101	;'e'
  1507  007EB7  00                 	db	0
  1508  007EB8                     STR_58:
  1509  007EB8  55                 	db	85	;'U'
  1510  007EB9  6E                 	db	110	;'n'
  1511  007EBA  6B                 	db	107	;'k'
  1512  007EBB  6E                 	db	110	;'n'
  1513  007EBC  6F                 	db	111	;'o'
  1514  007EBD  77                 	db	119	;'w'
  1515  007EBE  6E                 	db	110	;'n'
  1516  007EBF  20                 	db	32
  1517  007EC0  50                 	db	80	;'P'
  1518  007EC1  72                 	db	114	;'r'
  1519  007EC2  6F                 	db	111	;'o'
  1520  007EC3  74                 	db	116	;'t'
  1521  007EC4  6F                 	db	111	;'o'
  1522  007EC5  63                 	db	99	;'c'
  1523  007EC6  6F                 	db	111	;'o'
  1524  007EC7  6C                 	db	108	;'l'
  1525  007EC8  00                 	db	0
  1526  007EC9                     STR_41:
  1527  007EC9  20                 	db	32
  1528  007ECA  4D                 	db	77	;'M'
  1529  007ECB  45                 	db	69	;'E'
  1530  007ECC  4D                 	db	77	;'M'
  1531  007ECD  4F                 	db	79	;'O'
  1532  007ECE  52                 	db	82	;'R'
  1533  007ECF  59                 	db	89	;'Y'
  1534  007ED0  20                 	db	32
  1535  007ED1  4D                 	db	77	;'M'
  1536  007ED2  4F                 	db	79	;'O'
  1537  007ED3  44                 	db	68	;'D'
  1538  007ED4  55                 	db	85	;'U'
  1539  007ED5  4C                 	db	76	;'L'
  1540  007ED6  45                 	db	69	;'E'
  1541  007ED7  3A                 	db	58	;':'
  1542  007ED8  20                 	db	32
  1543  007ED9  00                 	db	0
  1544  007EDA                     STR_67:
  1545  007EDA  5B                 	db	91	;'['
  1546  007EDB  52                 	db	82	;'R'
  1547  007EDC  65                 	db	101	;'e'
  1548  007EDD  70                 	db	112	;'p'
  1549  007EDE  6C                 	db	108	;'l'
  1550  007EDF  79                 	db	121	;'y'
  1551  007EE0  20                 	db	32
  1552  007EE1  73                 	db	115	;'s'
  1553  007EE2  65                 	db	101	;'e'
  1554  007EE3  6E                 	db	110	;'n'
  1555  007EE4  74                 	db	116	;'t'
  1556  007EE5  20                 	db	32
  1557  007EE6  74                 	db	116	;'t'
  1558  007EE7  6F                 	db	111	;'o'
  1559  007EE8  20                 	db	32
  1560  007EE9  00                 	db	0
  1561  007EEA                     STR_5:
  1562  007EEA  5B                 	db	91	;'['
  1563  007EEB  53                 	db	83	;'S'
  1564  007EEC  79                 	db	121	;'y'
  1565  007EED  6D                 	db	109	;'m'
  1566  007EEE  62                 	db	98	;'b'
  1567  007EEF  6F                 	db	111	;'o'
  1568  007EF0  6C                 	db	108	;'l'
  1569  007EF1  20                 	db	32
  1570  007EF2  45                 	db	69	;'E'
  1571  007EF3  72                 	db	114	;'r'
  1572  007EF4  72                 	db	114	;'r'
  1573  007EF5  6F                 	db	111	;'o'
  1574  007EF6  72                 	db	114	;'r'
  1575  007EF7  73                 	db	115	;'s'
  1576  007EF8  5D                 	db	93	;']'
  1577  007EF9  00                 	db	0
  1578  007EFA                     STR_66:
  1579  007EFA  5B                 	db	91	;'['
  1580  007EFB  49                 	db	73	;'I'
  1581  007EFC  73                 	db	115	;'s'
  1582  007EFD  47                 	db	71	;'G'
  1583  007EFE  72                 	db	114	;'r'
  1584  007EFF  61                 	db	97	;'a'
  1585  007F00  74                 	db	116	;'t'
  1586  007F01  75                 	db	117	;'u'
  1587  007F02  69                 	db	105	;'i'
  1588  007F03  74                 	db	116	;'t'
  1589  007F04  6F                 	db	111	;'o'
  1590  007F05  75                 	db	117	;'u'
  1591  007F06  73                 	db	115	;'s'
  1592  007F07  5D                 	db	93	;']'
  1593  007F08  00                 	db	0
  1594  007F09                     STR_45:
  1595  007F09  20                 	db	32
  1596  007F0A  49                 	db	73	;'I'
  1597  007F0B  50                 	db	80	;'P'
  1598  007F0C  76                 	db	118	;'v'
  1599  007F0D  34                 	db	52	;'4'
  1600  007F0E  20                 	db	32
  1601  007F0F  4D                 	db	77	;'M'
  1602  007F10  4F                 	db	79	;'O'
  1603  007F11  44                 	db	68	;'D'
  1604  007F12  55                 	db	85	;'U'
  1605  007F13  4C                 	db	76	;'L'
  1606  007F14  45                 	db	69	;'E'
  1607  007F15  3A                 	db	58	;':'
  1608  007F16  20                 	db	32
  1609  007F17  00                 	db	0
  1610  007F18                     STR_44:
  1611  007F18  20                 	db	32
  1612  007F19  41                 	db	65	;'A'
  1613  007F1A  52                 	db	82	;'R'
  1614  007F1B  50                 	db	80	;'P'
  1615  007F1C  20                 	db	32
  1616  007F1D  4D                 	db	77	;'M'
  1617  007F1E  4F                 	db	79	;'O'
  1618  007F1F  44                 	db	68	;'D'
  1619  007F20  55                 	db	85	;'U'
  1620  007F21  4C                 	db	76	;'L'
  1621  007F22  45                 	db	69	;'E'
  1622  007F23  3A                 	db	58	;':'
  1623  007F24  20                 	db	32
  1624  007F25  00                 	db	0
  1625  007F26                     STR_74:
  1626  007F26  41                 	db	65	;'A'
  1627  007F27  52                 	db	82	;'R'
  1628  007F28  50                 	db	80	;'P'
  1629  007F29  3A                 	db	58	;':'
  1630  007F2A  20                 	db	32
  1631  007F2B  57                 	db	87	;'W'
  1632  007F2C  61                 	db	97	;'a'
  1633  007F2D  69                 	db	105	;'i'
  1634  007F2E  74                 	db	116	;'t'
  1635  007F2F  65                 	db	101	;'e'
  1636  007F30  64                 	db	100	;'d'
  1637  007F31  20                 	db	32
  1638  007F32  00                 	db	0
  1639  007F33                     STR_34:
  1640  007F33  4C                 	db	76	;'L'
  1641  007F34  69                 	db	105	;'i'
  1642  007F35  6E                 	db	110	;'n'
  1643  007F36  6B                 	db	107	;'k'
  1644  007F37  20                 	db	32
  1645  007F38  6C                 	db	108	;'l'
  1646  007F39  6F                 	db	111	;'o'
  1647  007F3A  73                 	db	115	;'s'
  1648  007F3B  74                 	db	116	;'t'
  1649  007F3C  2E                 	db	46
  1650  007F3D  0A                 	db	10
  1651  007F3E  0D                 	db	13
  1652  007F3F  00                 	db	0
  1653  007F40                     STR_30:
  1654  007F40  20                 	db	32
  1655  007F41  64                 	db	100	;'d'
  1656  007F42  65                 	db	101	;'e'
  1657  007F43  74                 	db	116	;'t'
  1658  007F44  65                 	db	101	;'e'
  1659  007F45  63                 	db	99	;'c'
  1660  007F46  74                 	db	116	;'t'
  1661  007F47  65                 	db	101	;'e'
  1662  007F48  64                 	db	100	;'d'
  1663  007F49  2E                 	db	46
  1664  007F4A  20                 	db	32
  1665  007F4B  00                 	db	0
  1666  007F4C                     STR_26:
  1667  007F4C  4D                 	db	77	;'M'
  1668  007F4D  61                 	db	97	;'a'
  1669  007F4E  72                 	db	114	;'r'
  1670  007F4F  20                 	db	32
  1671  007F50  31                 	db	49	;'1'
  1672  007F51  37                 	db	55	;'7'
  1673  007F52  20                 	db	32
  1674  007F53  32                 	db	50	;'2'
  1675  007F54  30                 	db	48	;'0'
  1676  007F55  31                 	db	49	;'1'
  1677  007F56  39                 	db	57	;'9'
  1678  007F57  00                 	db	0
  1679  007F58                     STR_3:
  1680  007F58  5B                 	db	91	;'['
  1681  007F59  42                 	db	66	;'B'
  1682  007F5A  72                 	db	114	;'r'
  1683  007F5B  6F                 	db	111	;'o'
  1684  007F5C  61                 	db	97	;'a'
  1685  007F5D  64                 	db	100	;'d'
  1686  007F5E  63                 	db	99	;'c'
  1687  007F5F  61                 	db	97	;'a'
  1688  007F60  73                 	db	115	;'s'
  1689  007F61  74                 	db	116	;'t'
  1690  007F62  5D                 	db	93	;']'
  1691  007F63  00                 	db	0
  1692  007F64                     STR_85:
  1693  007F64  5B                 	db	91	;'['
  1694  007F65  45                 	db	69	;'E'
  1695  007F66  78                 	db	120	;'x'
  1696  007F67  70                 	db	112	;'p'
  1697  007F68  65                 	db	101	;'e'
  1698  007F69  63                 	db	99	;'c'
  1699  007F6A  74                 	db	116	;'t'
  1700  007F6B  65                 	db	101	;'e'
  1701  007F6C  64                 	db	100	;'d'
  1702  007F6D  20                 	db	32
  1703  007F6E  00                 	db	0
  1704  007F6F                     STR_79:
  1705  007F6F  3A                 	db	58	;':'
  1706  007F70  20                 	db	32
  1707  007F71  57                 	db	87	;'W'
  1708  007F72  68                 	db	104	;'h'
  1709  007F73  6F                 	db	111	;'o'
  1710  007F74  20                 	db	32
  1711  007F75  68                 	db	104	;'h'
  1712  007F76  61                 	db	97	;'a'
  1713  007F77  73                 	db	115	;'s'
  1714  007F78  20                 	db	32
  1715  007F79  00                 	db	0
  1716  007F7A                     STR_65:
  1717  007F7A  5B                 	db	91	;'['
  1718  007F7B  49                 	db	73	;'I'
  1719  007F7C  73                 	db	115	;'s'
  1720  007F7D  50                 	db	80	;'P'
  1721  007F7E  72                 	db	114	;'r'
  1722  007F7F  6F                 	db	111	;'o'
  1723  007F80  62                 	db	98	;'b'
  1724  007F81  65                 	db	101	;'e'
  1725  007F82  5D                 	db	93	;']'
  1726  007F83  00                 	db	0
  1727  007F84                     STR_4:
  1728  007F84  5B                 	db	91	;'['
  1729  007F85  55                 	db	85	;'U'
  1730  007F86  6E                 	db	110	;'n'
  1731  007F87  69                 	db	105	;'i'
  1732  007F88  63                 	db	99	;'c'
  1733  007F89  61                 	db	97	;'a'
  1734  007F8A  73                 	db	115	;'s'
  1735  007F8B  74                 	db	116	;'t'
  1736  007F8C  5D                 	db	93	;']'
  1737  007F8D  00                 	db	0
  1738  007F8E                     STR_50:
  1739  007F8E  20                 	db	32
  1740  007F8F  28                 	db	40
  1741  007F90  43                 	db	67	;'C'
  1742  007F91  6F                 	db	111	;'o'
  1743  007F92  64                 	db	100	;'d'
  1744  007F93  65                 	db	101	;'e'
  1745  007F94  3A                 	db	58	;':'
  1746  007F95  20                 	db	32
  1747  007F96  00                 	db	0
  1748  007F97                     STR_28:
  1749  007F97  31                 	db	49	;'1'
  1750  007F98  35                 	db	53	;'5'
  1751  007F99  3A                 	db	58	;':'
  1752  007F9A  30                 	db	48	;'0'
  1753  007F9B  39                 	db	57	;'9'
  1754  007F9C  3A                 	db	58	;':'
  1755  007F9D  35                 	db	53	;'5'
  1756  007F9E  39                 	db	57	;'9'
  1757  007F9F  00                 	db	0
  1758  007FA0                     STR_40:
  1759  007FA0  5B                 	db	91	;'['
  1760  007FA1  45                 	db	69	;'E'
  1761  007FA2  52                 	db	82	;'R'
  1762  007FA3  52                 	db	82	;'R'
  1763  007FA4  4F                 	db	79	;'O'
  1764  007FA5  52                 	db	82	;'R'
  1765  007FA6  5D                 	db	93	;']'
  1766  007FA7  00                 	db	0
  1767  007FA8                     STR_86:
  1768  007FA8  2C                 	db	44
  1769  007FA9  20                 	db	32
  1770  007FAA  67                 	db	103	;'g'
  1771  007FAB  6F                 	db	111	;'o'
  1772  007FAC  74                 	db	116	;'t'
  1773  007FAD  20                 	db	32
  1774  007FAE  00                 	db	0
  1775  007FAF                     STR_75:
  1776  007FAF  20                 	db	32
  1777  007FB0  6D                 	db	109	;'m'
  1778  007FB1  73                 	db	115	;'s'
  1779  007FB2  2E                 	db	46
  1780  007FB3  0A                 	db	10
  1781  007FB4  0D                 	db	13
  1782  007FB5  00                 	db	0
  1783  007FB6                     STR_9:
  1784  007FB6  5B                 	db	91	;'['
  1785  007FB7  49                 	db	73	;'I'
  1786  007FB8  50                 	db	80	;'P'
  1787  007FB9  76                 	db	118	;'v'
  1788  007FBA  34                 	db	52	;'4'
  1789  007FBB  5D                 	db	93	;']'
  1790  007FBC  00                 	db	0
  1791  007FBD                     STR_8:
  1792  007FBD  5B                 	db	91	;'['
  1793  007FBE  41                 	db	65	;'A'
  1794  007FBF  52                 	db	82	;'R'
  1795  007FC0  50                 	db	80	;'P'
  1796  007FC1  5D                 	db	93	;']'
  1797  007FC2  00                 	db	0
  1798  007FC3                     STR_89:
  1799  007FC3  20                 	db	32
  1800  007FC4  2D                 	db	45
  1801  007FC5  3E                 	db	62	;'>'
  1802  007FC6  20                 	db	32
  1803  007FC7  00                 	db	0
  1804  007FC8                     STR_62:
  1805  007FC8  5D                 	db	93	;']'
  1806  007FC9  2D                 	db	45
  1807  007FCA  3E                 	db	62	;'>'
  1808  007FCB  5B                 	db	91	;'['
  1809  007FCC  00                 	db	0
  1810  007FCD                     STR_52:
  1811  007FCD  49                 	db	73	;'I'
  1812  007FCE  50                 	db	80	;'P'
  1813  007FCF  76                 	db	118	;'v'
  1814  007FD0  34                 	db	52	;'4'
  1815  007FD1  00                 	db	0
  1816  007FD2                     STR_55:
  1817  007FD2  49                 	db	73	;'I'
  1818  007FD3  43                 	db	67	;'C'
  1819  007FD4  4D                 	db	77	;'M'
  1820  007FD5  50                 	db	80	;'P'
  1821  007FD6  00                 	db	0
  1822  007FD7                     STR_51:
  1823  007FD7  29                 	db	41
  1824  007FD8  2E                 	db	46
  1825  007FD9  0A                 	db	10
  1826  007FDA  0D                 	db	13
  1827  007FDB  00                 	db	0
  1828  007FDC                     STR_14:
  1829  007FDC  5D                 	db	93	;']'
  1830  007FDD  5B                 	db	91	;'['
  1831  007FDE  4C                 	db	76	;'L'
  1832  007FDF  3D                 	db	61	;'='
  1833  007FE0  00                 	db	0
  1834  007FE1                     STR_80:
  1835  007FE1  3F                 	db	63	;'?'
  1836  007FE2  0A                 	db	10
  1837  007FE3  0D                 	db	13
  1838  007FE4  00                 	db	0
  1839  007FE5                     STR_56:
  1840  007FE5  54                 	db	84	;'T'
  1841  007FE6  43                 	db	67	;'C'
  1842  007FE7  50                 	db	80	;'P'
  1843  007FE8  00                 	db	0
  1844  007FE9                     STR_57:
  1845  007FE9  55                 	db	85	;'U'
  1846  007FEA  44                 	db	68	;'D'
  1847  007FEB  50                 	db	80	;'P'
  1848  007FEC  00                 	db	0
  1849  007FED                     STR_53:
  1850  007FED  41                 	db	65	;'A'
  1851  007FEE  52                 	db	82	;'R'
  1852  007FEF  50                 	db	80	;'P'
  1853  007FF0  00                 	db	0
  1854  007FF1                     STR_15:
  1855  007FF1  5D                 	db	93	;']'
  1856  007FF2  20                 	db	32
  1857  007FF3  00                 	db	0
  1858  007FF4                     STR_12:
  1859  007FF4  2D                 	db	45
  1860  007FF5  3E                 	db	62	;'>'
  1861  007FF6  00                 	db	0
  1862  007FF7                     STR_13:
  1863  007FF7  5D                 	db	93	;']'
  1864  007FF8  5B                 	db	91	;'['
  1865  007FF9  00                 	db	0
  1866  007FFA                     STR_19:
  1867  007FFA  29                 	db	41
  1868  007FFB  5D                 	db	93	;']'
  1869  007FFC  00                 	db	0
  1870  007FFD                     STR_21:
  1871  007FFD  12                 	db	18
  1872  007FFE  00                 	db	0
  1873  0000                     
  1874                           ; #config settings
  1875  007FFF  00                 	db	0	; dummy byte at the end
  1876  0000                     
  1877                           	psect	cinit
  1878  003BA2                     __pcinit:
  1879                           	opt stack 0
  1880  003BA2                     start_initialization:
  1881                           	opt stack 0
  1882  003BA2                     __initialization:
  1883                           	opt stack 0
  1884                           
  1885                           ; Initialize objects allocated to BANK2 (46 bytes)
  1886                           ; load TBLPTR registers with __pidataBANK2
  1887  003BA2  0EF2               	movlw	low __pidataBANK2
  1888  003BA4  6EF6               	movwf	tblptrl,c
  1889  003BA6  0E48               	movlw	high __pidataBANK2
  1890  003BA8  6EF7               	movwf	tblptrh,c
  1891  003BAA  0E00               	movlw	low (__pidataBANK2 shr (0+16))
  1892  003BAC  6EF8               	movwf	tblptru,c
  1893  003BAE  EE02  F0BB         	lfsr	0,__pdataBANK2
  1894  003BB2  EE10 F02E          	lfsr	1,46
  1895  003BB6                     copy_data0:
  1896  003BB6  0009               	tblrd		*+
  1897  003BB8  CFF5 FFEE          	movff	tablat,postinc0
  1898  003BBC  50E5               	movf	postdec1,w,c
  1899  003BBE  50E1               	movf	fsr1l,w,c
  1900  003BC0  E1FA               	bnz	copy_data0
  1901                           
  1902                           ; Initialize objects allocated to COMRAM (6 bytes)
  1903                           ; load TBLPTR registers with __pidataCOMRAM
  1904  003BC2  0E68               	movlw	low __pidataCOMRAM
  1905  003BC4  6EF6               	movwf	tblptrl,c
  1906  003BC6  0E4C               	movlw	high __pidataCOMRAM
  1907  003BC8  6EF7               	movwf	tblptrh,c
  1908  003BCA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1909  003BCC  6EF8               	movwf	tblptru,c
  1910  003BCE  EE00  F049         	lfsr	0,__pdataCOMRAM
  1911  003BD2  EE10 F006          	lfsr	1,6
  1912  003BD6                     copy_data1:
  1913  003BD6  0009               	tblrd		*+
  1914  003BD8  CFF5 FFEE          	movff	tablat,postinc0
  1915  003BDC  50E5               	movf	postdec1,w,c
  1916  003BDE  50E1               	movf	fsr1l,w,c
  1917  003BE0  E1FA               	bnz	copy_data1
  1918                           
  1919                           ; Clear objects allocated to BANK3 (121 bytes)
  1920  003BE2  EE03  F000         	lfsr	0,__pbssBANK3
  1921  003BE6  0E79               	movlw	121
  1922  003BE8                     clear_0:
  1923  003BE8  6AEE               	clrf	postinc0,c
  1924  003BEA  06E8               	decf	wreg,f,c
  1925  003BEC  E1FD               	bnz	clear_0
  1926                           
  1927                           ; Clear objects allocated to BANK2 (187 bytes)
  1928  003BEE  EE02  F000         	lfsr	0,__pbssBANK2
  1929  003BF2  0EBB               	movlw	187
  1930  003BF4                     clear_1:
  1931  003BF4  6AEE               	clrf	postinc0,c
  1932  003BF6  06E8               	decf	wreg,f,c
  1933  003BF8  E1FD               	bnz	clear_1
  1934                           
  1935                           ; Clear objects allocated to BANK1 (106 bytes)
  1936  003BFA  EE01  F08B         	lfsr	0,__pbssBANK1
  1937  003BFE  0E6A               	movlw	106
  1938  003C00                     clear_2:
  1939  003C00  6AEE               	clrf	postinc0,c
  1940  003C02  06E8               	decf	wreg,f,c
  1941  003C04  E1FD               	bnz	clear_2
  1942                           
  1943                           ; Clear objects allocated to BITCOMRAM (1 bytes)
  1944  003C06  6A4F               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
  1945                           
  1946                           ; Clear objects allocated to COMRAM (32 bytes)
  1947  003C08  EE00  F029         	lfsr	0,__pbssCOMRAM
  1948  003C0C  0E20               	movlw	32
  1949  003C0E                     clear_3:
  1950  003C0E  6AEE               	clrf	postinc0,c
  1951  003C10  06E8               	decf	wreg,f,c
  1952  003C12  E1FD               	bnz	clear_3
  1953  003C14                     end_of_initialization:
  1954                           	opt stack 0
  1955  003C14                     __end_of__initialization:
  1956                           	opt stack 0
  1957  003C14  9050               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1958  003C16  9250               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1959  003C18  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1960  003C1A  6EF8               	movwf	tblptru,c
  1961  003C1C  0100               	movlb	0
  1962  003C1E  EF4C  F00C         	goto	_main	;jump to C main() function
  1963                           tblptru	equ	0xFF8
  1964                           tblptrh	equ	0xFF7
  1965                           tblptrl	equ	0xFF6
  1966                           tablat	equ	0xFF5
  1967                           postinc0	equ	0xFEE
  1968                           wreg	equ	0xFE8
  1969                           postdec1	equ	0xFE5
  1970                           fsr1l	equ	0xFE1
  1971                           
  1972                           	psect	bitbssCOMRAM
  1973  000278                     __pbitbssCOMRAM:
  1974                           	opt stack 0
  1975  000278                     _fSrcAddrChanged:
  1976                           	opt stack 0
  1977  000278                     	ds	1
  1978                           tblptru	equ	0xFF8
  1979                           tblptrh	equ	0xFF7
  1980                           tblptrl	equ	0xFF6
  1981                           tablat	equ	0xFF5
  1982                           postinc0	equ	0xFEE
  1983                           wreg	equ	0xFE8
  1984                           postdec1	equ	0xFE5
  1985                           fsr1l	equ	0xFE1
  1986                           
  1987                           	psect	bssCOMRAM
  1988  000029                     __pbssCOMRAM:
  1989                           	opt stack 0
  1990  000029                     _time:
  1991                           	opt stack 0
  1992  000029                     	ds	4
  1993  00002D                     buttonHandler@debounceCounter:
  1994                           	opt stack 0
  1995  00002D                     	ds	4
  1996  000031                     _numberToDisplay:
  1997                           	opt stack 0
  1998  000031                     	ds	4
  1999  000035                     ethernet_rxGetNewFrame@counter:
  2000                           	opt stack 0
  2001  000035                     	ds	4
  2002  000039                     sevenSegmentUpdate@digitsToDisplay:
  2003                           	opt stack 0
  2004  000039                     	ds	3
  2005  00003C                     _arpStatus:
  2006                           	opt stack 0
  2007  00003C                     	ds	2
  2008  00003E                     ethernetController_streamToTransmitBuffer@pointer:
  2009                           	opt stack 0
  2010  00003E                     	ds	2
  2011  000040                     ethernetController_softReset@F5983:
  2012                           	opt stack 0
  2013  000040                     	ds	2
  2014  000042                     _nextPacketPointer:
  2015                           	opt stack 0
  2016  000042                     	ds	2
  2017  000044                     	ds	1
  2018  000045                     sevenSegmentUpdate@digitPointer:
  2019                           	opt stack 0
  2020  000045                     	ds	1
  2021  000046                     buttonHandler@newState:
  2022                           	opt stack 0
  2023  000046                     	ds	1
  2024  000047                     buttonHandler@oldState:
  2025                           	opt stack 0
  2026  000047                     	ds	1
  2027  000048                     	ds	1
  2028                           tblptru	equ	0xFF8
  2029                           tblptrh	equ	0xFF7
  2030                           tblptrl	equ	0xFF6
  2031                           tablat	equ	0xFF5
  2032                           postinc0	equ	0xFEE
  2033                           wreg	equ	0xFE8
  2034                           postdec1	equ	0xFE5
  2035                           fsr1l	equ	0xFE1
  2036                           
  2037                           	psect	dataCOMRAM
  2038  000049                     __pdataCOMRAM:
  2039                           	opt stack 0
  2040  000049                     _randx:
  2041                           	opt stack 0
  2042  000049                     	ds	4
  2043  00004D                     ethernetController_softReset@F5981:
  2044                           	opt stack 0
  2045  00004D                     	ds	2
  2046                           tblptru	equ	0xFF8
  2047                           tblptrh	equ	0xFF7
  2048                           tblptrl	equ	0xFF6
  2049                           tablat	equ	0xFF5
  2050                           postinc0	equ	0xFEE
  2051                           wreg	equ	0xFE8
  2052                           postdec1	equ	0xFE5
  2053                           fsr1l	equ	0xFE1
  2054                           
  2055                           	psect	bssBANK1
  2056  00018B                     __pbssBANK1:
  2057                           	opt stack 0
  2058  00018B                     _occupiedMemory:
  2059                           	opt stack 0
  2060  00018B                     	ds	72
  2061  0001D3                     	ds	4
  2062  0001D7                     _ipPreliminarySource:
  2063                           	opt stack 0
  2064  0001D7                     	ds	4
  2065  0001DB                     _ipSource:
  2066                           	opt stack 0
  2067  0001DB                     	ds	4
  2068  0001DF                     arp_probe@state:
  2069                           	opt stack 0
  2070  0001DF                     	ds	1
  2071  0001E0                     arp_probe@probeCounter:
  2072                           	opt stack 0
  2073  0001E0                     	ds	1
  2074  0001E1                     hexToString@number:
  2075                           	opt stack 0
  2076  0001E1                     	ds	10
  2077  0001EB                     ethernetController_getRSV@temp:
  2078                           	opt stack 0
  2079  0001EB                     	ds	6
  2080  0001F1                     arp_background@err:
  2081                           	opt stack 0
  2082  0001F1                     	ds	3
  2083  0001F4                     _buttonState:
  2084                           	opt stack 0
  2085  0001F4                     	ds	1
  2086                           tblptru	equ	0xFF8
  2087                           tblptrh	equ	0xFF7
  2088                           tblptrl	equ	0xFF6
  2089                           tablat	equ	0xFF5
  2090                           postinc0	equ	0xFEE
  2091                           wreg	equ	0xFE8
  2092                           postdec1	equ	0xFE5
  2093                           fsr1l	equ	0xFE1
  2094                           
  2095                           	psect	bssBANK2
  2096  000200                     __pbssBANK2:
  2097                           	opt stack 0
  2098  000200                     printEthernetState@oldState:
  2099                           	opt stack 0
  2100  000200                     	ds	15
  2101  00020F                     _arp_table:
  2102                           	opt stack 0
  2103  00020F                     	ds	112
  2104  00027F                     arpEntryToString@string:
  2105                           	opt stack 0
  2106  00027F                     	ds	50
  2107  0002B1                     intToString@number:
  2108                           	opt stack 0
  2109  0002B1                     	ds	10
  2110                           tblptru	equ	0xFF8
  2111                           tblptrh	equ	0xFF7
  2112                           tblptrl	equ	0xFF6
  2113                           tablat	equ	0xFF5
  2114                           postinc0	equ	0xFEE
  2115                           wreg	equ	0xFE8
  2116                           postdec1	equ	0xFE5
  2117                           fsr1l	equ	0xFE1
  2118                           
  2119                           	psect	dataBANK2
  2120  0002BB                     __pdataBANK2:
  2121                           	opt stack 0
  2122  0002BB                     macToString@F5941:
  2123                           	opt stack 0
  2124  0002BB                     	ds	18
  2125  0002CD                     _sevenSegCharacters:
  2126                           	opt stack 0
  2127  0002CD                     	ds	12
  2128  0002D9                     ipAdressToString@address:
  2129                           	opt stack 0
  2130  0002D9                     	ds	16
  2131                           tblptru	equ	0xFF8
  2132                           tblptrh	equ	0xFF7
  2133                           tblptrl	equ	0xFF6
  2134                           tablat	equ	0xFF5
  2135                           postinc0	equ	0xFEE
  2136                           wreg	equ	0xFE8
  2137                           postdec1	equ	0xFE5
  2138                           fsr1l	equ	0xFE1
  2139                           
  2140                           	psect	bssBANK3
  2141  000300                     __pbssBANK3:
  2142                           	opt stack 0
  2143  000300                     _stack:
  2144                           	opt stack 0
  2145  000300                     	ds	121
  2146                           tblptru	equ	0xFF8
  2147                           tblptrh	equ	0xFF7
  2148                           tblptrl	equ	0xFF6
  2149                           tablat	equ	0xFF5
  2150                           postinc0	equ	0xFEE
  2151                           wreg	equ	0xFE8
  2152                           postdec1	equ	0xFE5
  2153                           fsr1l	equ	0xFE1
  2154                           
  2155                           	psect	cstackBANK2
  2156  0002E9                     __pcstackBANK2:
  2157                           	opt stack 0
  2158  0002E9                     main@prescaler:
  2159                           	opt stack 0
  2160                           
  2161                           ; 4 bytes @ 0x0
  2162  0002E9                     	ds	4
  2163  0002ED                     _main$2369:
  2164                           	opt stack 0
  2165                           
  2166                           ; 2 bytes @ 0x4
  2167  0002ED                     	ds	2
  2168  0002EF                     main@err:
  2169                           	opt stack 0
  2170                           
  2171                           ; 3 bytes @ 0x6
  2172  0002EF                     	ds	3
  2173  0002F2                     main@ipDst:
  2174                           	opt stack 0
  2175                           
  2176                           ; 4 bytes @ 0x9
  2177  0002F2                     	ds	4
  2178  0002F6                     main@ipSrc:
  2179                           	opt stack 0
  2180                           
  2181                           ; 4 bytes @ 0xD
  2182  0002F6                     	ds	4
  2183                           tblptru	equ	0xFF8
  2184                           tblptrh	equ	0xFF7
  2185                           tblptrl	equ	0xFF6
  2186                           tablat	equ	0xFF5
  2187                           postinc0	equ	0xFEE
  2188                           wreg	equ	0xFE8
  2189                           postdec1	equ	0xFE5
  2190                           fsr1l	equ	0xFE1
  2191                           
  2192                           	psect	cstackBANK1
  2193  000100                     __pcstackBANK1:
  2194                           	opt stack 0
  2195  000100                     arp_sendRequest@ipSender:
  2196                           	opt stack 0
  2197  000100                     arp_sendReply@request:
  2198                           	opt stack 0
  2199                           
  2200                           ; 32 bytes @ 0x0
  2201  000100                     	ds	4
  2202  000104                     arp_sendRequest@ipTarget:
  2203                           	opt stack 0
  2204                           
  2205                           ; 4 bytes @ 0x4
  2206  000104                     	ds	4
  2207  000108                     arp_sendRequest@senderMAC:
  2208                           	opt stack 0
  2209                           
  2210                           ; 6 bytes @ 0x8
  2211  000108                     	ds	6
  2212  00010E                     arp_sendRequest@targetMAC:
  2213                           	opt stack 0
  2214                           
  2215                           ; 6 bytes @ 0xE
  2216  00010E                     	ds	6
  2217  000114                     arp_sendRequest@request:
  2218                           	opt stack 0
  2219                           
  2220                           ; 32 bytes @ 0x14
  2221  000114                     	ds	12
  2222  000120                     arp_sendReply@senderMAC:
  2223                           	opt stack 0
  2224                           
  2225                           ; 6 bytes @ 0x20
  2226  000120                     	ds	6
  2227  000126                     arp_sendReply@targetMAC:
  2228                           	opt stack 0
  2229                           
  2230                           ; 6 bytes @ 0x26
  2231  000126                     	ds	6
  2232  00012C                     arp_sendReply@senderIP:
  2233                           	opt stack 0
  2234                           
  2235                           ; 4 bytes @ 0x2C
  2236  00012C                     	ds	4
  2237  000130                     arp_sendReply@targetIP:
  2238                           	opt stack 0
  2239                           
  2240                           ; 4 bytes @ 0x30
  2241  000130                     	ds	4
  2242  000134                     ??_arp_probe:
  2243  000134                     arp_sendReply@myIP:
  2244                           	opt stack 0
  2245                           
  2246                           ; 4 bytes @ 0x34
  2247  000134                     	ds	4
  2248  000138                     arp_sendReply@reply:
  2249                           	opt stack 0
  2250                           
  2251                           ; 32 bytes @ 0x38
  2252  000138                     	ds	4
  2253  00013C                     arp_probe@index:
  2254                           	opt stack 0
  2255                           
  2256                           ; 1 bytes @ 0x3C
  2257  00013C                     	ds	1
  2258  00013D                     arp_probe@timeStart:
  2259                           	opt stack 0
  2260                           
  2261                           ; 4 bytes @ 0x3D
  2262  00013D                     	ds	4
  2263  000141                     arp_probe@ipSender:
  2264                           	opt stack 0
  2265                           
  2266                           ; 4 bytes @ 0x41
  2267  000141                     	ds	4
  2268  000145                     arp_probe@waitingTime:
  2269                           	opt stack 0
  2270                           
  2271                           ; 4 bytes @ 0x45
  2272  000145                     	ds	4
  2273  000149                     arp_probe@err:
  2274                           	opt stack 0
  2275                           
  2276                           ; 3 bytes @ 0x49
  2277  000149                     	ds	3
  2278  00014C                     ??_arp_background:
  2279                           
  2280                           ; 1 bytes @ 0x4C
  2281  00014C                     	ds	2
  2282  00014E                     arp_background@ipPreliminary:
  2283                           	opt stack 0
  2284                           
  2285                           ; 4 bytes @ 0x4E
  2286  00014E                     	ds	10
  2287  000158                     arp_handleNewPacket@arp:
  2288                           	opt stack 0
  2289                           
  2290                           ; 32 bytes @ 0x58
  2291  000158                     	ds	32
  2292  000178                     ?_ethernet_rxGetNewFrame:
  2293                           	opt stack 0
  2294  000178                     ethernet_rxGetNewFrame@frame:
  2295                           	opt stack 0
  2296                           
  2297                           ; 2 bytes @ 0x78
  2298  000178                     	ds	3
  2299  00017B                     ??_ethernet_rxGetNewFrame:
  2300                           
  2301                           ; 1 bytes @ 0x7B
  2302  00017B                     	ds	8
  2303  000183                     ethernet_rxGetNewFrame@err:
  2304                           	opt stack 0
  2305                           
  2306                           ; 3 bytes @ 0x83
  2307  000183                     	ds	3
  2308  000186                     handleStackBackgroundTasks@stack:
  2309                           	opt stack 0
  2310                           
  2311                           ; 2 bytes @ 0x86
  2312  000186                     	ds	2
  2313  000188                     
  2314                           ; 1 bytes @ 0x88
  2315  000188                     	ds	1
  2316  000189                     ??_main:
  2317                           
  2318                           ; 1 bytes @ 0x89
  2319  000189                     	ds	2
  2320                           tblptru	equ	0xFF8
  2321                           tblptrh	equ	0xFF7
  2322                           tblptrl	equ	0xFF6
  2323                           tablat	equ	0xFF5
  2324                           postinc0	equ	0xFEE
  2325                           wreg	equ	0xFE8
  2326                           postdec1	equ	0xFE5
  2327                           fsr1l	equ	0xFE1
  2328                           
  2329                           	psect	cstackBANK0
  2330  000060                     __pcstackBANK0:
  2331                           	opt stack 0
  2332  000060                     ?_enc424j600_getNextPacketPointer:
  2333                           	opt stack 0
  2334  000060                     ?_ethernetController_getDeviceName:
  2335                           	opt stack 0
  2336  000060                     ?_etherTypeToString:
  2337                           	opt stack 0
  2338  000060                     ?_ipProtocolToString:
  2339                           	opt stack 0
  2340  000060                     ?___wmul:
  2341                           	opt stack 0
  2342  000060                     ?___lwdiv:
  2343                           	opt stack 0
  2344  000060                     ?_getMillis:
  2345                           	opt stack 0
  2346  000060                     ?_ipv4_getIPSourceAddress:
  2347                           	opt stack 0
  2348  000060                     ?_ipv4_getPreliminaryIPSourceAddress:
  2349                           	opt stack 0
  2350  000060                     ?___lmul:
  2351                           	opt stack 0
  2352  000060                     ?___lldiv:
  2353                           	opt stack 0
  2354  000060                     ?___llmod:
  2355                           	opt stack 0
  2356  000060                     ?_enc424j600_updateReceiveStatusVector:
  2357                           	opt stack 0
  2358  000060                     entireMemoryEmpty@i:
  2359                           	opt stack 0
  2360  000060                     entireMemoryFull@i:
  2361                           	opt stack 0
  2362  000060                     memory_txFrameClear@index:
  2363                           	opt stack 0
  2364  000060                     hexToChar@val:
  2365                           	opt stack 0
  2366  000060                     enc424j600_writeSPI@data:
  2367                           	opt stack 0
  2368  000060                     enc424j600_readSPI@data:
  2369                           	opt stack 0
  2370  000060                     enc424j600_setNextPacketPointer@ptr:
  2371                           	opt stack 0
  2372  000060                     enc424j600_updateReceiveStatusVector@rsv:
  2373                           	opt stack 0
  2374  000060                     mac_setToBroadcast@mac:
  2375                           	opt stack 0
  2376  000060                     mac_isAllZero@mac:
  2377                           	opt stack 0
  2378  000060                     mac_cmp@a:
  2379                           	opt stack 0
  2380  000060                     mac_setAllZero@mac:
  2381                           	opt stack 0
  2382  000060                     etherTypeToString@ethertype:
  2383                           	opt stack 0
  2384  000060                     ipv4_calculateHeaderChecksum@header:
  2385                           	opt stack 0
  2386  000060                     ipv4_SrcAddrChanged@err:
  2387                           	opt stack 0
  2388  000060                     ipv4_cmp@a:
  2389                           	opt stack 0
  2390  000060                     ipv4_isAllZero@ip:
  2391                           	opt stack 0
  2392  000060                     ipv4_setToAllZero@ip:
  2393                           	opt stack 0
  2394  000060                     ___wmul@multiplier:
  2395                           	opt stack 0
  2396  000060                     ___lwdiv@dividend:
  2397                           	opt stack 0
  2398  000060                     ___lmul@multiplier:
  2399                           	opt stack 0
  2400  000060                     ___lldiv@dividend:
  2401                           	opt stack 0
  2402  000060                     ___llmod@dividend:
  2403                           	opt stack 0
  2404  000060                     checkForOverlapSwitched@a:
  2405                           	opt stack 0
  2406                           
  2407                           ; 9 bytes @ 0x0
  2408  000060                     	ds	1
  2409  000061                     ?_hexToString:
  2410                           	opt stack 0
  2411  000061                     hexToString@val:
  2412                           	opt stack 0
  2413                           
  2414                           ; 4 bytes @ 0x1
  2415  000061                     	ds	1
  2416  000062                     ??_enc424j600_writeSPI:
  2417  000062                     ??_enc424j600_readSPI:
  2418  000062                     ??_etherTypeToString:
  2419  000062                     ??_ipv4_calculateHeaderChecksum:
  2420  000062                     ?_ethernetController_getNextPacketPointer:
  2421                           	opt stack 0
  2422  000062                     mac_setToBroadcast@i:
  2423                           	opt stack 0
  2424  000062                     mac_isAllZero@i:
  2425                           	opt stack 0
  2426  000062                     mac_setAllZero@i:
  2427                           	opt stack 0
  2428  000062                     ipProtocolToString@protocol:
  2429                           	opt stack 0
  2430  000062                     ipv4_isAllZero@i:
  2431                           	opt stack 0
  2432  000062                     ipv4_setToAllZero@i:
  2433                           	opt stack 0
  2434  000062                     mac_cmp@b:
  2435                           	opt stack 0
  2436  000062                     ipv4_cmp@b:
  2437                           	opt stack 0
  2438  000062                     ___wmul@multiplicand:
  2439                           	opt stack 0
  2440  000062                     ___lwdiv@divisor:
  2441                           	opt stack 0
  2442  000062                     ethernetController_getDeviceName@string:
  2443                           	opt stack 0
  2444                           
  2445                           ; 11 bytes @ 0x2
  2446  000062                     	ds	2
  2447  000064                     ___lwdiv@counter:
  2448                           	opt stack 0
  2449  000064                     ___wmul@product:
  2450                           	opt stack 0
  2451  000064                     ___lmul@multiplicand:
  2452                           	opt stack 0
  2453  000064                     ___lldiv@divisor:
  2454                           	opt stack 0
  2455  000064                     ___llmod@divisor:
  2456                           	opt stack 0
  2457  000064                     arp_setNewEntry@mac:
  2458                           	opt stack 0
  2459                           
  2460                           ; 6 bytes @ 0x4
  2461  000064                     	ds	1
  2462  000065                     ??_enc424j600_updateReceiveStatusVector:
  2463  000065                     ??_hexToString:
  2464  000065                     ___lwdiv@quotient:
  2465                           	opt stack 0
  2466                           
  2467                           ; 2 bytes @ 0x5
  2468  000065                     	ds	1
  2469  000066                     mac_cmp@i:
  2470                           	opt stack 0
  2471  000066                     ipv4_cmp@i:
  2472                           	opt stack 0
  2473  000066                     enc424j600_writeSPI@timeoutCounter:
  2474                           	opt stack 0
  2475  000066                     enc424j600_readSPI@timeoutCounter:
  2476                           	opt stack 0
  2477                           
  2478                           ; 4 bytes @ 0x6
  2479  000066                     	ds	1
  2480  000067                     arp_checkForEntry@ip:
  2481                           	opt stack 0
  2482                           
  2483                           ; 4 bytes @ 0x7
  2484  000067                     	ds	1
  2485  000068                     ___llmod@counter:
  2486                           	opt stack 0
  2487  000068                     ___lmul@product:
  2488                           	opt stack 0
  2489  000068                     ___lldiv@quotient:
  2490                           	opt stack 0
  2491                           
  2492                           ; 4 bytes @ 0x8
  2493  000068                     	ds	1
  2494  000069                     hexToString@pointer:
  2495                           	opt stack 0
  2496  000069                     checkForOverlapSwitched@b:
  2497                           	opt stack 0
  2498                           
  2499                           ; 9 bytes @ 0x9
  2500  000069                     	ds	1
  2501  00006A                     enc424j600_writeSingleByte@opcode:
  2502                           	opt stack 0
  2503  00006A                     enc424j600_writeControlRegisterUnbanked@data:
  2504                           	opt stack 0
  2505  00006A                     enc424j600_readControlRegisterUnbanked@data:
  2506                           	opt stack 0
  2507  00006A                     enc424j600_setGPDATAWritePointer@addr:
  2508                           	opt stack 0
  2509  00006A                     enc424j600_setERXDATAReadPointer@addr:
  2510                           	opt stack 0
  2511  00006A                     arp_setNewEntry@ip:
  2512                           	opt stack 0
  2513                           
  2514                           ; 4 bytes @ 0xA
  2515  00006A                     	ds	1
  2516  00006B                     arp_checkForEntry@index:
  2517                           	opt stack 0
  2518                           
  2519                           ; 2 bytes @ 0xB
  2520  00006B                     	ds	1
  2521  00006C                     ?_rand:
  2522                           	opt stack 0
  2523  00006C                     enc424j600_writeControlRegisterUnbanked@addr:
  2524                           	opt stack 0
  2525  00006C                     enc424j600_readControlRegisterUnbanked@addr:
  2526                           	opt stack 0
  2527  00006C                     enc424j600_setGPDATAWritePointer@opcode:
  2528                           	opt stack 0
  2529  00006C                     enc424j600_setERXDATAReadPointer@opcode:
  2530                           	opt stack 0
  2531  00006C                     ___lldiv@counter:
  2532                           	opt stack 0
  2533  00006C                     enc424j600_updateReceiveStatusVector@receiveStatusVector:
  2534                           	opt stack 0
  2535                           
  2536                           ; 5 bytes @ 0xC
  2537  00006C                     	ds	1
  2538  00006D                     ??_arp_checkForEntry:
  2539  00006D                     enc424j600_writeControlRegisterUnbanked@opcode:
  2540                           	opt stack 0
  2541  00006D                     enc424j600_readControlRegisterUnbanked@opcode:
  2542                           	opt stack 0
  2543  00006D                     enc424j600_setGPDATAWritePointer@lowByte:
  2544                           	opt stack 0
  2545  00006D                     enc424j600_setERXDATAReadPointer@lowByte:
  2546                           	opt stack 0
  2547  00006D                     ultoa@buf:
  2548                           	opt stack 0
  2549                           
  2550                           ; 2 bytes @ 0xD
  2551  00006D                     	ds	1
  2552  00006E                     ??_enc424j600_clearInterruptFlag:
  2553  00006E                     ?_enc424j600_getInterruptFlags:
  2554                           	opt stack 0
  2555  00006E                     ?___lwmod:
  2556                           	opt stack 0
  2557  00006E                     ?_ethernetController_softReset:
  2558                           	opt stack 0
  2559  00006E                     ?_ethernetController_checkDeviceId:
  2560                           	opt stack 0
  2561  00006E                     ?_ethernetController_getMacAddress:
  2562                           	opt stack 0
  2563  00006E                     ethernetController_setLEDConfig@conf:
  2564                           	opt stack 0
  2565  00006E                     enc424j600_getPacketCount@lowByte:
  2566                           	opt stack 0
  2567  00006E                     enc424j600_setGPDATAWritePointer@highByte:
  2568                           	opt stack 0
  2569  00006E                     enc424j600_setERXDATAReadPointer@highByte:
  2570                           	opt stack 0
  2571  00006E                     enc424j600_enableAutoMACInsertion@temp:
  2572                           	opt stack 0
  2573  00006E                     enc424j600_readPHYRegister@data:
  2574                           	opt stack 0
  2575  00006E                     enc424j600_setTXLength@len:
  2576                           	opt stack 0
  2577  00006E                     enc424j600_setTXStartAddress@addr:
  2578                           	opt stack 0
  2579  00006E                     enc424j600_setRXBufferStartAddress@addr:
  2580                           	opt stack 0
  2581  00006E                     enc424j600_setRXTailPointer@addr:
  2582                           	opt stack 0
  2583  00006E                     ___lwmod@dividend:
  2584                           	opt stack 0
  2585  00006E                     arp_setNewEntry@timestamp:
  2586                           	opt stack 0
  2587  00006E                     ipv4_calculateHeaderChecksum@sum:
  2588                           	opt stack 0
  2589                           
  2590                           ; 4 bytes @ 0xE
  2591  00006E                     	ds	1
  2592  00006F                     ??_ethernetController_updateNextPacketPointer:
  2593  00006F                     ?_ethernetController_getEtherTypeField:
  2594                           	opt stack 0
  2595  00006F                     ?_ethernetController_getSourceMACAddress:
  2596                           	opt stack 0
  2597  00006F                     ethernetController_setLEDConfig@LED:
  2598                           	opt stack 0
  2599  00006F                     ethernetController_writeEtherTypeFieldToBuffer@ethtype:
  2600                           	opt stack 0
  2601  00006F                     ethernetController_streamFromRXBuffer@startAddress:
  2602                           	opt stack 0
  2603  00006F                     ultoa@val:
  2604                           	opt stack 0
  2605  00006F                     ethernetController_writeDestinationMACAddress@addr:
  2606                           	opt stack 0
  2607  00006F                     ethernetController_streamToTransmitBuffer@field:
  2608                           	opt stack 0
  2609  00006F                     ethernetController_getSourceMACAddress@field:
  2610                           	opt stack 0
  2611  00006F                     ethernetController_getEtherTypeField@field:
  2612                           	opt stack 0
  2613                           
  2614                           ; 9 bytes @ 0xF
  2615  00006F                     	ds	1
  2616  000070                     ??_enc424j600_getInterruptFlags:
  2617  000070                     ??_enc424j600_readPHYRegister:
  2618  000070                     ethernetController_setLEDConfig@data:
  2619                           	opt stack 0
  2620  000070                     enc424j600_setTXLength@lowByte:
  2621                           	opt stack 0
  2622  000070                     enc424j600_setTXStartAddress@lowByte:
  2623                           	opt stack 0
  2624  000070                     enc424j600_setRXBufferStartAddress@lowByte:
  2625                           	opt stack 0
  2626  000070                     enc424j600_setRXTailPointer@lowByte:
  2627                           	opt stack 0
  2628  000070                     enc424j600_clearInterruptFlag@flag:
  2629                           	opt stack 0
  2630  000070                     ___lwmod@divisor:
  2631                           	opt stack 0
  2632                           
  2633                           ; 2 bytes @ 0x10
  2634  000070                     	ds	1
  2635  000071                     ??_ethernetController_softReset:
  2636  000071                     ?_ethernetController_getRSV:
  2637                           	opt stack 0
  2638  000071                     ethernetController_checkDeviceId@data:
  2639                           	opt stack 0
  2640  000071                     ethernetController_streamFromRXBuffer@startEnd:
  2641                           	opt stack 0
  2642  000071                     enc424j600_setTXLength@highByte:
  2643                           	opt stack 0
  2644  000071                     enc424j600_setTXStartAddress@highByte:
  2645                           	opt stack 0
  2646  000071                     enc424j600_setRXBufferStartAddress@highByte:
  2647                           	opt stack 0
  2648  000071                     enc424j600_setRXTailPointer@highByte:
  2649                           	opt stack 0
  2650  000071                     enc424j600_clearInterruptFlag@temp:
  2651                           	opt stack 0
  2652  000071                     ethernetController_getRSV@address:
  2653                           	opt stack 0
  2654  000071                     ethernetController_writeEtherTypeFieldToBuffer@field:
  2655                           	opt stack 0
  2656                           
  2657                           ; 9 bytes @ 0x11
  2658  000071                     	ds	1
  2659  000072                     ethernetController_softReset@comFailCount:
  2660                           	opt stack 0
  2661  000072                     ethernetController_clearInterruptFlag@flag:
  2662                           	opt stack 0
  2663  000072                     ethernetController_streamFromRXBuffer@opcode:
  2664                           	opt stack 0
  2665  000072                     ___lwmod@counter:
  2666                           	opt stack 0
  2667  000072                     ethernetController_dropPacket@frame:
  2668                           	opt stack 0
  2669  000072                     ethernetController_checkDeviceId@err:
  2670                           	opt stack 0
  2671  000072                     ethernetController_sendPacket@field:
  2672                           	opt stack 0
  2673  000072                     checkForOverlap@a:
  2674                           	opt stack 0
  2675                           
  2676                           ; 9 bytes @ 0x12
  2677  000072                     	ds	1
  2678  000073                     ?_ipAdressToString:
  2679                           	opt stack 0
  2680  000073                     ethernetController_streamFromRXBuffer@temp:
  2681                           	opt stack 0
  2682  000073                     ethernetController_softReset@dataToSend:
  2683                           	opt stack 0
  2684  000073                     ultoa@base:
  2685                           	opt stack 0
  2686  000073                     ipAdressToString@ip:
  2687                           	opt stack 0
  2688                           
  2689                           ; 4 bytes @ 0x13
  2690  000073                     	ds	1
  2691  000074                     ?_ipv4_parseHeader:
  2692                           	opt stack 0
  2693  000074                     ?_arp_parseFromRXBuffer:
  2694                           	opt stack 0
  2695  000074                     arp_parseFromRXBuffer@frame:
  2696                           	opt stack 0
  2697  000074                     ipv4_parseHeader@field:
  2698                           	opt stack 0
  2699  000074                     ethernetController_getMacAddress@mac:
  2700                           	opt stack 0
  2701                           
  2702                           ; 6 bytes @ 0x14
  2703  000074                     	ds	1
  2704  000075                     arp_checkForEntry@i:
  2705                           	opt stack 0
  2706  000075                     ethernetController_softReset@receivedData:
  2707                           	opt stack 0
  2708  000075                     ethernetController_updateNextPacketPointer@nextPktPointer:
  2709                           	opt stack 0
  2710  000075                     ultoa@v:
  2711                           	opt stack 0
  2712  000075                     ethernetController_writeDestinationMACAddress@field:
  2713                           	opt stack 0
  2714                           
  2715                           ; 9 bytes @ 0x15
  2716  000075                     	ds	1
  2717  000076                     ethernetController_getRSV@opcode:
  2718                           	opt stack 0
  2719  000076                     enc424j600_readPHYRegister@addr:
  2720                           	opt stack 0
  2721  000076                     enc424j600_getInterruptFlags@low:
  2722                           	opt stack 0
  2723  000076                     arp_setNewEntry@maxSeconds:
  2724                           	opt stack 0
  2725                           
  2726                           ; 4 bytes @ 0x16
  2727  000076                     	ds	1
  2728  000077                     ??_ipAdressToString:
  2729  000077                     ethernetController_getRSV@i:
  2730                           	opt stack 0
  2731  000077                     ethernetController_updateNextPacketPointer@opcode:
  2732                           	opt stack 0
  2733  000077                     enc424j600_readPHYRegister@PHYaddress:
  2734                           	opt stack 0
  2735  000077                     enc424j600_getInterruptFlags@high:
  2736                           	opt stack 0
  2737  000077                     ethernetController_softReset@err:
  2738                           	opt stack 0
  2739                           
  2740                           ; 3 bytes @ 0x17
  2741  000077                     	ds	1
  2742  000078                     ??_ethernetController_streamToTransmitBuffer:
  2743  000078                     ??_ethernetController_getEtherTypeField:
  2744  000078                     ?_ethernetController_pollInterruptFlags:
  2745                           	opt stack 0
  2746  000078                     ethernetController_getSourceMACAddress@opcode:
  2747                           	opt stack 0
  2748  000078                     ethernetController_updateNextPacketPointer@newPointerL:
  2749                           	opt stack 0
  2750  000078                     enc424j600_readPHYRegister@unusedBits:
  2751                           	opt stack 0
  2752                           
  2753                           ; 1 bytes @ 0x18
  2754  000078                     	ds	1
  2755  000079                     ethernetController_updateNextPacketPointer@newPointerH:
  2756                           	opt stack 0
  2757  000079                     ultoa@c:
  2758                           	opt stack 0
  2759  000079                     enc424j600_readPHYRegister@timeoutCounter:
  2760                           	opt stack 0
  2761  000079                     ethernetController_getSourceMACAddress@sourceAddress:
  2762                           	opt stack 0
  2763                           
  2764                           ; 6 bytes @ 0x19
  2765  000079                     	ds	1
  2766  00007A                     ??_ethernetController_pollInterruptFlags:
  2767  00007A                     ?_macToString:
  2768                           	opt stack 0
  2769  00007A                     ?_ethernetController_init:
  2770                           	opt stack 0
  2771  00007A                     ethernetController_writeEtherTypeFieldToBuffer@lowByte:
  2772                           	opt stack 0
  2773  00007A                     arp_setNewEntry@oldestIndex:
  2774                           	opt stack 0
  2775  00007A                     ltoa@buf:
  2776                           	opt stack 0
  2777  00007A                     srand@x:
  2778                           	opt stack 0
  2779  00007A                     macToString@addr:
  2780                           	opt stack 0
  2781                           
  2782                           ; 6 bytes @ 0x1A
  2783  00007A                     	ds	1
  2784  00007B                     ethernetController_writeEtherTypeFieldToBuffer@highByte:
  2785                           	opt stack 0
  2786  00007B                     arp_setNewEntry@i:
  2787                           	opt stack 0
  2788  00007B                     ipAdressToString@ones:
  2789                           	opt stack 0
  2790  00007B                     checkForOverlap@b:
  2791                           	opt stack 0
  2792                           
  2793                           ; 9 bytes @ 0x1B
  2794  00007B                     	ds	1
  2795  00007C                     ethernetController_streamToTransmitBuffer@data:
  2796                           	opt stack 0
  2797  00007C                     ethernetController_writeEtherTypeFieldToBuffer@opcode:
  2798                           	opt stack 0
  2799  00007C                     ethernetController_getEtherTypeField@ethertype:
  2800                           	opt stack 0
  2801  00007C                     ltoa@val:
  2802                           	opt stack 0
  2803  00007C                     arp_init@mac:
  2804                           	opt stack 0
  2805                           
  2806                           ; 6 bytes @ 0x1C
  2807  00007C                     	ds	1
  2808  00007D                     ethernetController_streamToTransmitBuffer@opcode:
  2809                           	opt stack 0
  2810  00007D                     enc424j600_readPHYRegister@lowByte:
  2811                           	opt stack 0
  2812  00007D                     ethernetController_init@err:
  2813                           	opt stack 0
  2814                           
  2815                           ; 3 bytes @ 0x1D
  2816  00007D                     	ds	1
  2817  00007E                     ethernetController_getEtherTypeField@opcode:
  2818                           	opt stack 0
  2819  00007E                     enc424j600_readPHYRegister@highByte:
  2820                           	opt stack 0
  2821  00007E                     ethernetController_pollInterruptFlags@flags:
  2822                           	opt stack 0
  2823  00007E                     ethernetController_writeDestinationMACAddress@data:
  2824                           	opt stack 0
  2825                           
  2826                           ; 6 bytes @ 0x1E
  2827  00007E                     	ds	1
  2828  00007F                     ethernetController_getSourceMACAddress@temp:
  2829                           	opt stack 0
  2830  00007F                     ethernetController_getEtherTypeField@lowByte:
  2831                           	opt stack 0
  2832  00007F                     enc424j600_readPHYRegister@temp:
  2833                           	opt stack 0
  2834  00007F                     ipAdressToString@tens:
  2835                           	opt stack 0
  2836                           
  2837                           ; 4 bytes @ 0x1F
  2838  00007F                     	ds	1
  2839  000080                     ??_macToString:
  2840  000080                     ethernetController_getSourceMACAddress@i:
  2841                           	opt stack 0
  2842  000080                     ethernetController_getEtherTypeField@highByte:
  2843                           	opt stack 0
  2844  000080                     ethernetController_pollInterruptFlags@reg:
  2845                           	opt stack 0
  2846  000080                     ethernetController_updateLinkStatus@state:
  2847                           	opt stack 0
  2848  000080                     ltoa@base:
  2849                           	opt stack 0
  2850                           
  2851                           ; 2 bytes @ 0x20
  2852  000080                     	ds	1
  2853  000081                     macToString@address:
  2854                           	opt stack 0
  2855                           
  2856                           ; 18 bytes @ 0x21
  2857  000081                     	ds	1
  2858  000082                     ethernetController_updateLinkStatus@temp:
  2859                           	opt stack 0
  2860  000082                     ltoa@cp:
  2861                           	opt stack 0
  2862  000082                     arp_init@ip:
  2863                           	opt stack 0
  2864                           
  2865                           ; 4 bytes @ 0x22
  2866  000082                     	ds	1
  2867  000083                     ethernetController_updateLinkStatus@temp16:
  2868                           	opt stack 0
  2869  000083                     ipAdressToString@hundreds:
  2870                           	opt stack 0
  2871                           
  2872                           ; 4 bytes @ 0x23
  2873  000083                     	ds	1
  2874  000084                     ?_intToString:
  2875                           	opt stack 0
  2876  000084                     ?_memory_txFrameRequest:
  2877                           	opt stack 0
  2878  000084                     ethernetController_writeDestinationMACAddress@opcode:
  2879                           	opt stack 0
  2880  000084                     memory_txFrameRequest@length:
  2881                           	opt stack 0
  2882  000084                     intToString@val:
  2883                           	opt stack 0
  2884                           
  2885                           ; 4 bytes @ 0x24
  2886  000084                     	ds	1
  2887  000085                     ethernetController_writeDestinationMACAddress@i_646:
  2888                           	opt stack 0
  2889                           
  2890                           ; 1 bytes @ 0x25
  2891  000085                     	ds	1
  2892  000086                     ethernetController_writeDestinationMACAddress@i:
  2893                           	opt stack 0
  2894  000086                     arp_init@i:
  2895                           	opt stack 0
  2896                           
  2897                           ; 1 bytes @ 0x26
  2898  000086                     	ds	1
  2899  000087                     ipAdressToString@pointer:
  2900                           	opt stack 0
  2901                           
  2902                           ; 1 bytes @ 0x27
  2903  000087                     	ds	1
  2904  000088                     ipAdressToString@i:
  2905                           	opt stack 0
  2906                           
  2907                           ; 1 bytes @ 0x28
  2908  000088                     	ds	3
  2909  00008B                     ??_ipv4_parseHeader:
  2910                           
  2911                           ; 1 bytes @ 0x2B
  2912  00008B                     	ds	1
  2913  00008C                     ipv4_parseHeader@i:
  2914                           	opt stack 0
  2915                           
  2916                           ; 1 bytes @ 0x2C
  2917  00008C                     	ds	1
  2918  00008D                     ??_memory_txFrameRequest:
  2919  00008D                     ipv4_parseHeader@i_3580:
  2920                           	opt stack 0
  2921                           
  2922                           ; 1 bytes @ 0x2D
  2923  00008D                     	ds	1
  2924  00008E                     ipv4_parseHeader@temp:
  2925                           	opt stack 0
  2926                           
  2927                           ; 1 bytes @ 0x2E
  2928  00008E                     	ds	1
  2929  00008F                     ipv4_parseHeader@ip:
  2930                           	opt stack 0
  2931                           
  2932                           ; 23 bytes @ 0x2F
  2933  00008F                     	ds	4
  2934  000093                     macToString@firstDigit:
  2935                           	opt stack 0
  2936  000093                     _memory_txFrameRequest$1183:
  2937                           	opt stack 0
  2938                           
  2939                           ; 2 bytes @ 0x33
  2940  000093                     	ds	1
  2941  000094                     ??_arp_parseFromRXBuffer:
  2942  000094                     macToString@secondDigit:
  2943                           	opt stack 0
  2944                           
  2945                           ; 1 bytes @ 0x34
  2946  000094                     	ds	1
  2947  000095                     memory_txFrameRequest@fNoOverlapMarker:
  2948                           	opt stack 0
  2949  000095                     macToString@i:
  2950                           	opt stack 0
  2951                           
  2952                           ; 2 bytes @ 0x35
  2953  000095                     	ds	1
  2954  000096                     memory_txFrameRequest@i:
  2955                           	opt stack 0
  2956                           
  2957                           ; 1 bytes @ 0x36
  2958  000096                     	ds	1
  2959  000097                     memory_txFrameRequest@i_1187:
  2960                           	opt stack 0
  2961  000097                     macToString@j:
  2962                           	opt stack 0
  2963  000097                     arp_parseFromRXBuffer@i:
  2964                           	opt stack 0
  2965                           
  2966                           ; 1 bytes @ 0x37
  2967  000097                     	ds	1
  2968  000098                     arp_parseFromRXBuffer@i_2993:
  2969                           	opt stack 0
  2970  000098                     UARTTransmitText@str:
  2971                           	opt stack 0
  2972  000098                     memory_txFrameRequest@field:
  2973                           	opt stack 0
  2974                           
  2975                           ; 9 bytes @ 0x38
  2976  000098                     	ds	1
  2977  000099                     arp_parseFromRXBuffer@i_2994:
  2978                           	opt stack 0
  2979                           
  2980                           ; 1 bytes @ 0x39
  2981  000099                     	ds	1
  2982  00009A                     ??_ipv4_background:
  2983  00009A                     arp_parseFromRXBuffer@i_2995:
  2984                           	opt stack 0
  2985  00009A                     ipv4_checkHeaderChecksum@header:
  2986                           	opt stack 0
  2987  00009A                     printErrorMessage@err:
  2988                           	opt stack 0
  2989  00009A                     UARTTransmitInt@val:
  2990                           	opt stack 0
  2991  00009A                     ipv4_setIPSourceAddress@ip:
  2992                           	opt stack 0
  2993  00009A                     printEthernetState@state:
  2994                           	opt stack 0
  2995                           
  2996                           ; 15 bytes @ 0x3A
  2997  00009A                     	ds	1
  2998  00009B                     arp_parseFromRXBuffer@offset:
  2999                           	opt stack 0
  3000                           
  3001                           ; 2 bytes @ 0x3B
  3002  00009B                     	ds	1
  3003  00009C                     ??_ipv4_checkHeaderChecksum:
  3004  00009C                     ipv4_background@err:
  3005                           	opt stack 0
  3006                           
  3007                           ; 3 bytes @ 0x3C
  3008  00009C                     	ds	1
  3009  00009D                     ??_printErrorMessage:
  3010  00009D                     arp_parseFromRXBuffer@arp:
  3011                           	opt stack 0
  3012                           
  3013                           ; 32 bytes @ 0x3D
  3014  00009D                     	ds	1
  3015  00009E                     ipv4_checkHeaderChecksum@testHeader:
  3016                           	opt stack 0
  3017                           
  3018                           ; 23 bytes @ 0x3E
  3019  00009E                     	ds	3
  3020  0000A1                     memory_txFrameRequest@freeIndex:
  3021                           	opt stack 0
  3022                           
  3023                           ; 1 bytes @ 0x41
  3024  0000A1                     	ds	1
  3025  0000A2                     ethernet_txFrameRequest@frame:
  3026                           	opt stack 0
  3027                           
  3028                           ; 2 bytes @ 0x42
  3029  0000A2                     	ds	2
  3030  0000A4                     ethernet_txFrameRequest@err:
  3031                           	opt stack 0
  3032                           
  3033                           ; 3 bytes @ 0x44
  3034  0000A4                     	ds	3
  3035  0000A7                     arp_send@arp:
  3036                           	opt stack 0
  3037                           
  3038                           ; 32 bytes @ 0x47
  3039  0000A7                     	ds	2
  3040  0000A9                     
  3041                           ; 1 bytes @ 0x49
  3042  0000A9                     	ds	12
  3043  0000B5                     ipv4_handleNewPacket@frame:
  3044                           	opt stack 0
  3045                           
  3046                           ; 2 bytes @ 0x55
  3047  0000B5                     	ds	2
  3048  0000B7                     ??_ipv4_handleNewPacket:
  3049                           
  3050                           ; 1 bytes @ 0x57
  3051  0000B7                     	ds	2
  3052  0000B9                     ipv4_handleNewPacket@headerField:
  3053                           	opt stack 0
  3054                           
  3055                           ; 9 bytes @ 0x59
  3056  0000B9                     	ds	9
  3057  0000C2                     ipv4_handleNewPacket@ip:
  3058                           	opt stack 0
  3059                           
  3060                           ; 23 bytes @ 0x62
  3061  0000C2                     	ds	5
  3062  0000C7                     arp_send@destination:
  3063                           	opt stack 0
  3064                           
  3065                           ; 6 bytes @ 0x67
  3066  0000C7                     	ds	6
  3067  0000CD                     arp_send@i:
  3068                           	opt stack 0
  3069                           
  3070                           ; 1 bytes @ 0x6D
  3071  0000CD                     	ds	1
  3072  0000CE                     arp_send@i_3068:
  3073                           	opt stack 0
  3074                           
  3075                           ; 1 bytes @ 0x6E
  3076  0000CE                     	ds	1
  3077  0000CF                     arp_send@i_3069:
  3078                           	opt stack 0
  3079                           
  3080                           ; 1 bytes @ 0x6F
  3081  0000CF                     	ds	1
  3082  0000D0                     arp_send@i_3070:
  3083                           	opt stack 0
  3084                           
  3085                           ; 1 bytes @ 0x70
  3086  0000D0                     	ds	1
  3087  0000D1                     arp_send@ethFrame:
  3088                           	opt stack 0
  3089                           
  3090                           ; 34 bytes @ 0x71
  3091  0000D1                     	ds	34
  3092  0000F3                     arp_send@field:
  3093                           	opt stack 0
  3094                           
  3095                           ; 9 bytes @ 0x93
  3096  0000F3                     	ds	9
  3097  0000FC                     ?_arp_probe:
  3098                           	opt stack 0
  3099  0000FC                     arp_handleNewPacket@frame:
  3100                           	opt stack 0
  3101  0000FC                     arp_probe@ipTarget:
  3102                           	opt stack 0
  3103                           
  3104                           ; 4 bytes @ 0x9C
  3105  0000FC                     	ds	2
  3106  0000FE                     
  3107                           ; 1 bytes @ 0x9E
  3108  0000FE                     	ds	2
  3109                           tblptru	equ	0xFF8
  3110                           tblptrh	equ	0xFF7
  3111                           tblptrl	equ	0xFF6
  3112                           tablat	equ	0xFF5
  3113                           postinc0	equ	0xFEE
  3114                           wreg	equ	0xFE8
  3115                           postdec1	equ	0xFE5
  3116                           fsr1l	equ	0xFE1
  3117                           
  3118                           	psect	cstackCOMRAM
  3119  000001                     __pcstackCOMRAM:
  3120                           	opt stack 0
  3121  000001                     ?i2___lwdiv:
  3122                           	opt stack 0
  3123  000001                     buttonHandler@state:
  3124                           	opt stack 0
  3125  000001                     i2___lwdiv@dividend:
  3126                           	opt stack 0
  3127                           
  3128                           ; 2 bytes @ 0x0
  3129  000001                     	ds	2
  3130  000003                     i2___lwdiv@divisor:
  3131                           	opt stack 0
  3132  000003                     buttonHandler@resetValue:
  3133                           	opt stack 0
  3134                           
  3135                           ; 4 bytes @ 0x2
  3136  000003                     	ds	2
  3137  000005                     i2___lwdiv@quotient:
  3138                           	opt stack 0
  3139                           
  3140                           ; 2 bytes @ 0x4
  3141  000005                     	ds	2
  3142  000007                     i2___lwdiv@counter:
  3143                           	opt stack 0
  3144  000007                     buttonHandler@debounceValue:
  3145                           	opt stack 0
  3146                           
  3147                           ; 4 bytes @ 0x6
  3148  000007                     	ds	1
  3149  000008                     parseNumber@numberToDisplay:
  3150                           	opt stack 0
  3151                           
  3152                           ; 2 bytes @ 0x7
  3153  000008                     	ds	2
  3154  00000A                     parseNumber@digit:
  3155                           	opt stack 0
  3156                           
  3157                           ; 1 bytes @ 0x9
  3158  00000A                     	ds	1
  3159  00000B                     ??_parseNumber:
  3160                           
  3161                           ; 1 bytes @ 0xA
  3162  00000B                     	ds	1
  3163  00000C                     parseNumber@ones:
  3164                           	opt stack 0
  3165                           
  3166                           ; 1 bytes @ 0xB
  3167  00000C                     	ds	1
  3168  00000D                     parseNumber@tens:
  3169                           	opt stack 0
  3170                           
  3171                           ; 1 bytes @ 0xC
  3172  00000D                     	ds	1
  3173  00000E                     parseNumber@hundreds:
  3174                           	opt stack 0
  3175                           
  3176                           ; 1 bytes @ 0xD
  3177  00000E                     	ds	1
  3178  00000F                     sevenSegmentUpdate@numberToDisplay:
  3179                           	opt stack 0
  3180                           
  3181                           ; 2 bytes @ 0xE
  3182  00000F                     	ds	2
  3183  000011                     ??_sevenSegmentUpdate:
  3184                           
  3185                           ; 1 bytes @ 0x10
  3186  000011                     	ds	2
  3187  000013                     _sevenSegmentUpdate$2453:
  3188                           	opt stack 0
  3189                           
  3190                           ; 2 bytes @ 0x12
  3191  000013                     	ds	2
  3192  000015                     sevenSegmentUpdate@i:
  3193                           	opt stack 0
  3194                           
  3195                           ; 1 bytes @ 0x14
  3196  000015                     	ds	1
  3197  000016                     ??_ISR:
  3198                           
  3199                           ; 1 bytes @ 0x15
  3200  000016                     	ds	19
  3201                           tblptru	equ	0xFF8
  3202                           tblptrh	equ	0xFF7
  3203                           tblptrl	equ	0xFF6
  3204                           tablat	equ	0xFF5
  3205                           postinc0	equ	0xFEE
  3206                           wreg	equ	0xFE8
  3207                           postdec1	equ	0xFE5
  3208                           fsr1l	equ	0xFE1
  3209                           
  3210 ;;
  3211 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  3212 ;;
  3213 ;; *************** function _main *****************
  3214 ;; Defined at:
  3215 ;;		line 33 in file "src/system/main.c"
  3216 ;; Parameters:    Size  Location     Type
  3217 ;;		None
  3218 ;; Auto vars:     Size  Location     Type
  3219 ;;  ipSrc           4   13[BANK2 ] struct ipv4_address
  3220 ;;  ipDst           4    9[BANK2 ] struct ipv4_address
  3221 ;;  prescaler       4    0[BANK2 ] unsigned long 
  3222 ;;  err             3    6[BANK2 ] struct error
  3223 ;;  oldState        1    0        unsigned char 
  3224 ;; Return value:  Size  Location     Type
  3225 ;;                  1    wreg      void 
  3226 ;; Registers used:
  3227 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3228 ;; Tracked objects:
  3229 ;;		On entry : 0/0
  3230 ;;		On exit  : 0/0
  3231 ;;		Unchanged: 0/0
  3232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3233 ;;      Params:         0       0       0       0       0       0       0       0       0
  3234 ;;      Locals:         0       0       0      17       0       0       0       0       0
  3235 ;;      Temps:          0       0       2       0       0       0       0       0       0
  3236 ;;      Totals:         0       0       2      17       0       0       0       0       0
  3237 ;;Total ram usage:       19 bytes
  3238 ;; Hardware stack levels required when called:   14
  3239 ;; This function calls:
  3240 ;;		_UARTInit
  3241 ;;		_UARTTransmitText
  3242 ;;		_ethernetController_checkDeviceId
  3243 ;;		_ethernetController_getCurrentPacketCount
  3244 ;;		_ethernetController_getDeviceName
  3245 ;;		_ethernetController_getMacAddress
  3246 ;;		_ethernetController_init
  3247 ;;		_ethernetController_setLEDConfig
  3248 ;;		_handleStackBackgroundTasks
  3249 ;;		_ipv4_setIPSourceAddress
  3250 ;;		_macToString
  3251 ;;		_printErrorMessage
  3252 ;;		_printEthernetState
  3253 ;;		_sevenSegmentInit
  3254 ;;		_srand
  3255 ;;		_stack_init
  3256 ;; This function is called by:
  3257 ;;		Startup code after reset
  3258 ;; This function uses a non-reentrant model
  3259 ;;
  3260                           
  3261                           	psect	text0
  3262  001898                     __ptext0:
  3263                           	opt stack 0
  3264  001898                     _main:
  3265                           	opt stack 17
  3266                           
  3267                           ;main.c: 36: OSCCONbits.SCS = 0b00;
  3268                           
  3269                           ;incstack = 0
  3270  001898  0EFC               	movlw	-4
  3271  00189A  16D3               	andwf	4051,f,c	;volatile
  3272                           
  3273                           ;main.c: 37: OSCCONbits.IRCF = 0b1110;
  3274  00189C  50D3               	movf	4051,w,c	;volatile
  3275  00189E  0B8F               	andlw	-113
  3276  0018A0  0960               	iorlw	96
  3277  0018A2  6ED3               	movwf	4051,c	;volatile
  3278                           
  3279                           ;main.c: 38: OSCCON2bits.PLLEN = 0b1;
  3280  0018A4  88D2               	bsf	4050,4,c	;volatile
  3281                           
  3282                           ;main.c: 41: INTCONbits.GIE = 0;
  3283  0018A6  9EF2               	bcf	intcon,7,c	;volatile
  3284                           
  3285                           ;main.c: 42: INTCONbits.TMR0IE = 1;
  3286  0018A8  8AF2               	bsf	intcon,5,c	;volatile
  3287                           
  3288                           ;main.c: 43: INTCON3bits.INT2IE = 1;
  3289  0018AA  88F0               	bsf	intcon3,4,c	;volatile
  3290                           
  3291                           ;main.c: 44: RCIP = 0;
  3292  0018AC  9A9F               	bcf	3999,5,c	;volatile
  3293                           
  3294                           ;main.c: 45: RCIE = 1;
  3295  0018AE  8A9D               	bsf	3997,5,c	;volatile
  3296                           
  3297                           ;main.c: 46: INTCONbits.PEIE = 1;
  3298  0018B0  8CF2               	bsf	intcon,6,c	;volatile
  3299                           
  3300                           ;main.c: 50: T0CONbits.TMR0ON = 1;
  3301  0018B2  8ED5               	bsf	4053,7,c	;volatile
  3302                           
  3303                           ;main.c: 51: T0CONbits.T08BIT = 1;
  3304  0018B4  8CD5               	bsf	4053,6,c	;volatile
  3305                           
  3306                           ;main.c: 52: T0CONbits.T0CS = 0;
  3307  0018B6  9AD5               	bcf	4053,5,c	;volatile
  3308                           
  3309                           ;main.c: 53: T0CONbits.PSA = 0;
  3310  0018B8  96D5               	bcf	4053,3,c	;volatile
  3311                           
  3312                           ;main.c: 54: T0CONbits.T0PS = 0b101;
  3313  0018BA  50D5               	movf	4053,w,c	;volatile
  3314  0018BC  0BF8               	andlw	-8
  3315  0018BE  0905               	iorlw	5
  3316  0018C0  6ED5               	movwf	4053,c	;volatile
  3317                           
  3318                           ;main.c: 58: T1CONbits.TMR1ON = 1;
  3319  0018C2  80CD               	bsf	4045,0,c	;volatile
  3320                           
  3321                           ;main.c: 59: CCP1CONbits.CCP1M = 0b1011;
  3322  0018C4  50BD               	movf	4029,w,c	;volatile
  3323  0018C6  0BF0               	andlw	-16
  3324  0018C8  090B               	iorlw	11
  3325  0018CA  6EBD               	movwf	4029,c	;volatile
  3326                           
  3327                           ;main.c: 60: CCPR1 = 8000;
  3328  0018CC  0E1F               	movlw	31
  3329  0018CE  6EBF               	movwf	4031,c	;volatile
  3330  0018D0  0E40               	movlw	64
  3331  0018D2  6EBE               	movwf	4030,c	;volatile
  3332                           
  3333                           ;main.c: 61: PIE1bits.CCP1IE = 1;
  3334  0018D4  849D               	bsf	3997,2,c	;volatile
  3335                           
  3336                           ;main.c: 62: INTCONbits.PEIE = 1;
  3337  0018D6  8CF2               	bsf	intcon,6,c	;volatile
  3338                           
  3339                           ;main.c: 64: TRISBbits.RB6 = 0;
  3340  0018D8  9C93               	bcf	3987,6,c	;volatile
  3341                           
  3342                           ;main.c: 67: UARTInit();
  3343  0018DA  ECFD  F025         	call	_UARTInit	;wreg free
  3344                           
  3345                           ;main.c: 68: sevenSegmentInit();
  3346  0018DE  ECA9  F025         	call	_sevenSegmentInit	;wreg free
  3347                           
  3348                           ;main.c: 69: _delay((unsigned long)((10)*(32000000UL/4000.0)));
  3349  0018E2  0E68               	movlw	104
  3350  0018E4  0101               	movlb	1	; () banked
  3351  0018E6  6F89               	movwf	??_main& (0+255),b
  3352  0018E8  0EE4               	movlw	228
  3353  0018EA                     u11557:
  3354  0018EA  2EE8               	decfsz	wreg,f,c
  3355  0018EC  D7FE               	bra	u11557
  3356  0018EE  2F89               	decfsz	??_main& (0+255),f,b
  3357  0018F0  D7FC               	bra	u11557
  3358  0018F2  F000               	nop	
  3359                           
  3360                           ;main.c: 70: UARTTransmitText("\x12");
  3361  0018F4  0EFD               	movlw	low STR_21
  3362  0018F6  0100               	movlb	0	; () banked
  3363  0018F8  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3364  0018FA  0E7F               	movlw	high STR_21
  3365  0018FC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3366  0018FE  EC7A  F021         	call	_UARTTransmitText	;wreg free
  3367                           
  3368                           ;main.c: 71: if (!RCONbits.TO) {
  3369  001902  B6D0               	btfsc	4048,3,c	;volatile
  3370  001904  D015               	goto	l622
  3371                           
  3372                           ;main.c: 72: UARTTransmitText("------------------------------------------------\n\r");
  3373  001906  0ECE               	movlw	low STR_22
  3374  001908  0100               	movlb	0	; () banked
  3375  00190A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3376  00190C  0E7A               	movlw	high STR_22
  3377  00190E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3378  001910  EC7A  F021         	call	_UARTTransmitText	;wreg free
  3379                           
  3380                           ;main.c: 73: UARTTransmitText("\a*** CRITICAL ERROR: WATCHDOG CAUSED RESET ***\n\r");
  3381  001914  0E01               	movlw	low STR_23
  3382  001916  0100               	movlb	0	; () banked
  3383  001918  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3384  00191A  0E7B               	movlw	high STR_23
  3385  00191C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3386  00191E  EC7A  F021         	call	_UARTTransmitText	;wreg free
  3387                           
  3388                           ;main.c: 74: UARTTransmitText("------------------------------------------------\n\r");
  3389  001922  0ECE               	movlw	low STR_22
  3390  001924  0100               	movlb	0	; () banked
  3391  001926  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3392  001928  0E7A               	movlw	high STR_22
  3393  00192A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3394  00192C  EC7A  F021         	call	_UARTTransmitText	;wreg free
  3395  001930                     l622:
  3396                           
  3397                           ;main.c: 75: }
  3398                           ;main.c: 76: UARTTransmitText("FIRMWARE BUILD DATE IS ");
  3399  001930  0ED7               	movlw	low STR_25
  3400  001932  0100               	movlb	0	; () banked
  3401  001934  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3402  001936  0E7D               	movlw	high STR_25
  3403  001938  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3404  00193A  EC7A  F021         	call	_UARTTransmitText	;wreg free
  3405                           
  3406                           ;main.c: 77: UARTTransmitText("Mar 17 2019");
  3407  00193E  0E4C               	movlw	low STR_26
  3408  001940  0100               	movlb	0	; () banked
  3409  001942  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3410  001944  0E7F               	movlw	high STR_26
  3411  001946  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3412  001948  EC7A  F021         	call	_UARTTransmitText	;wreg free
  3413                           
  3414                           ;main.c: 78: UARTTransmitText(" ");
  3415  00194C  0E44               	movlw	low (STR_37+18)
  3416  00194E  0100               	movlb	0	; () banked
  3417  001950  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3418  001952  0E7E               	movlw	high (STR_37+18)
  3419  001954  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3420  001956  EC7A  F021         	call	_UARTTransmitText	;wreg free
  3421                           
  3422                           ;main.c: 79: UARTTransmitText("15:09:59");
  3423  00195A  0E97               	movlw	low STR_28
  3424  00195C  0100               	movlb	0	; () banked
  3425  00195E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3426  001960  0E7F               	movlw	high STR_28
  3427  001962  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3428  001964  EC7A  F021         	call	_UARTTransmitText	;wreg free
  3429                           
  3430                           ;main.c: 80: UARTTransmitText(".\n\r");
  3431  001968  0ED8               	movlw	low (STR_51+1)
  3432  00196A  0100               	movlb	0	; () banked
  3433  00196C  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3434  00196E  0E7F               	movlw	high (STR_51+1)
  3435  001970  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3436  001972  EC7A  F021         	call	_UARTTransmitText	;wreg free
  3437                           
  3438                           ;main.c: 81: error_t err;
  3439                           ;main.c: 82: err = ethernetController_init();
  3440  001976  EC7D  F01F         	call	_ethernetController_init	;wreg free
  3441  00197A  C07A  F2EF         	movff	?_ethernetController_init,main@err
  3442  00197E  C07B  F2F0         	movff	?_ethernetController_init+1,main@err+1
  3443  001982  C07C  F2F1         	movff	?_ethernetController_init+2,main@err+2
  3444                           
  3445                           ;main.c: 83: if (err.code != (uint16_t)0)
  3446  001986  0102               	movlb	2	; () banked
  3447  001988  51F0               	movf	(main@err+1)& (0+255),w,b
  3448  00198A  11F1               	iorwf	(main@err+2)& (0+255),w,b
  3449  00198C  B4D8               	btfsc	status,2,c
  3450  00198E  D008               	goto	l623
  3451                           
  3452                           ; BSR set to: 2
  3453                           ;main.c: 84: printErrorMessage(err);
  3454  001990  C2EF  F09A         	movff	main@err,printErrorMessage@err
  3455  001994  C2F0  F09B         	movff	main@err+1,printErrorMessage@err+1
  3456  001998  C2F1  F09C         	movff	main@err+2,printErrorMessage@err+2
  3457  00199C  ECDD  F014         	call	_printErrorMessage	;wreg free
  3458  0019A0                     l623:
  3459                           
  3460                           ;main.c: 85: err = ethernetController_checkDeviceId();
  3461  0019A0  EC71  F022         	call	_ethernetController_checkDeviceId	;wreg free
  3462  0019A4  C06E  F2EF         	movff	?_ethernetController_checkDeviceId,main@err
  3463  0019A8  C06F  F2F0         	movff	?_ethernetController_checkDeviceId+1,main@err+1
  3464  0019AC  C070  F2F1         	movff	?_ethernetController_checkDeviceId+2,main@err+2
  3465                           
  3466                           ;main.c: 86: if (err.code == (uint16_t)0) {
  3467  0019B0  0102               	movlb	2	; () banked
  3468  0019B2  51F0               	movf	(main@err+1)& (0+255),w,b
  3469  0019B4  11F1               	iorwf	(main@err+2)& (0+255),w,b
  3470  0019B6  A4D8               	btfss	status,2,c
  3471  0019B8  D00F               	goto	l624
  3472                           
  3473                           ; BSR set to: 2
  3474                           ;main.c: 87: UARTTransmitText(ethernetController_getDeviceName());
  3475  0019BA  EC58  F025         	call	_ethernetController_getDeviceName	;wreg free
  3476  0019BE  C060  F098         	movff	?_ethernetController_getDeviceName,UARTTransmitText@str
  3477  0019C2  C061  F099         	movff	?_ethernetController_getDeviceName+1,UARTTransmitText@str+1
  3478  0019C6  EC7A  F021         	call	_UARTTransmitText	;wreg free
  3479                           
  3480                           ;main.c: 88: UARTTransmitText(" detected. ");
  3481  0019CA  0E40               	movlw	low STR_30
  3482  0019CC  0100               	movlb	0	; () banked
  3483  0019CE  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3484  0019D0  0E7F               	movlw	high STR_30
  3485  0019D2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3486  0019D4  EC7A  F021         	call	_UARTTransmitText	;wreg free
  3487  0019D8                     l624:
  3488                           
  3489                           ;main.c: 89: }
  3490                           ;main.c: 90: UARTTransmitText("Source MAC address is ");
  3491  0019D8  0E06               	movlw	low STR_31
  3492  0019DA  0100               	movlb	0	; () banked
  3493  0019DC  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3494  0019DE  0E7E               	movlw	high STR_31
  3495  0019E0  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3496  0019E2  EC7A  F021         	call	_UARTTransmitText	;wreg free
  3497                           
  3498                           ;main.c: 91: UARTTransmitText(macToString(ethernetController_getMacAddress()));
  3499  0019E6  EC43  F01F         	call	_ethernetController_getMacAddress	;wreg free
  3500  0019EA  CFE9 FFD9          	movff	fsr0l,fsr2l
  3501  0019EE  CFEA FFDA          	movff	fsr0h,fsr2h
  3502  0019F2  EE00  F07A         	lfsr	0,macToString@addr
  3503  0019F6  0E05               	movlw	5
  3504  0019F8                     u11471:
  3505  0019F8  CFDB FFEB          	movff	plusw2,plusw0
  3506  0019FC  06E8               	decf	wreg,f,c
  3507  0019FE  E2FC               	bc	u11471
  3508  001A00  EC19  F017         	call	_macToString	;wreg free
  3509  001A04  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  3510  001A08  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  3511  001A0C  EC7A  F021         	call	_UARTTransmitText	;wreg free
  3512                           
  3513                           ;main.c: 92: UARTTransmitText(".\n\r");
  3514  001A10  0ED8               	movlw	low (STR_51+1)
  3515  001A12  0100               	movlb	0	; () banked
  3516  001A14  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3517  001A16  0E7F               	movlw	high (STR_51+1)
  3518  001A18  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3519  001A1A  EC7A  F021         	call	_UARTTransmitText	;wreg free
  3520                           
  3521                           ;main.c: 93: UARTTransmitText("------------------------------------------------\n\r");
  3522  001A1E  0ECE               	movlw	low STR_22
  3523  001A20  0100               	movlb	0	; () banked
  3524  001A22  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3525  001A24  0E7A               	movlw	high STR_22
  3526  001A26  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3527  001A28  EC7A  F021         	call	_UARTTransmitText	;wreg free
  3528                           
  3529                           ;main.c: 95: stack_init();
  3530  001A2C  EC21  F026         	call	_stack_init	;wreg free
  3531                           
  3532                           ;main.c: 97: ethernetController_setLEDConfig(LEDA, LED_ON);
  3533  001A30  0E00               	movlw	0
  3534  001A32  0100               	movlb	0	; () banked
  3535  001A34  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  3536  001A36  0E00               	movlw	0
  3537  001A38  ECBE  F01C         	call	_ethernetController_setLEDConfig
  3538                           
  3539                           ;main.c: 98: ethernetController_setLEDConfig(LEDA, LED_ON);
  3540  001A3C  0E00               	movlw	0
  3541  001A3E  0100               	movlb	0	; () banked
  3542  001A40  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  3543  001A42  0E00               	movlw	0
  3544  001A44  ECBE  F01C         	call	_ethernetController_setLEDConfig
  3545                           
  3546                           ;main.c: 99: _delay((unsigned long)((500)*(32000000UL/4000.0)));
  3547  001A48  0E15               	movlw	21
  3548  001A4A  0101               	movlb	1	; () banked
  3549  001A4C  6F8A               	movwf	(??_main+1)& (0+255),b
  3550  001A4E  0E4B               	movlw	75
  3551  001A50  6F89               	movwf	??_main& (0+255),b
  3552  001A52  0EBE               	movlw	190
  3553  001A54                     u11567:
  3554  001A54  2EE8               	decfsz	wreg,f,c
  3555  001A56  D7FE               	bra	u11567
  3556  001A58  2F89               	decfsz	??_main& (0+255),f,b
  3557  001A5A  D7FC               	bra	u11567
  3558  001A5C  2F8A               	decfsz	(??_main+1)& (0+255),f,b
  3559  001A5E  D7FA               	bra	u11567
  3560  001A60  F000               	nop	
  3561                           
  3562                           ;main.c: 101: ethernetController_setLEDConfig(LEDA, LED_OFF);
  3563  001A62  0E01               	movlw	1
  3564  001A64  0100               	movlb	0	; () banked
  3565  001A66  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  3566  001A68  0E00               	movlw	0
  3567  001A6A  ECBE  F01C         	call	_ethernetController_setLEDConfig
  3568                           
  3569                           ;main.c: 102: ethernetController_setLEDConfig(LEDA, LED_OFF);
  3570  001A6E  0E01               	movlw	1
  3571  001A70  0100               	movlb	0	; () banked
  3572  001A72  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  3573  001A74  0E00               	movlw	0
  3574  001A76  ECBE  F01C         	call	_ethernetController_setLEDConfig
  3575                           
  3576                           ;main.c: 105: uint32_t prescaler = 0;
  3577  001A7A  0E00               	movlw	0
  3578  001A7C  0102               	movlb	2	; () banked
  3579  001A7E  6FE9               	movwf	main@prescaler& (0+255),b
  3580  001A80  0E00               	movlw	0
  3581  001A82  6FEA               	movwf	(main@prescaler+1)& (0+255),b
  3582  001A84  0E00               	movlw	0
  3583  001A86  6FEB               	movwf	(main@prescaler+2)& (0+255),b
  3584  001A88  0E00               	movlw	0
  3585  001A8A  6FEC               	movwf	(main@prescaler+3)& (0+255),b
  3586                           
  3587                           ; BSR set to: 2
  3588                           ;main.c: 107: ANSELB &= ~(1<<5);
  3589  001A8C  010F               	movlb	15	; () banked
  3590  001A8E  9B5C               	bcf	92,5,b	;volatile
  3591                           
  3592                           ; BSR set to: 15
  3593                           ;main.c: 108: TRISB |= (1<<5);
  3594  001A90  8A93               	bsf	3987,5,c	;volatile
  3595                           
  3596                           ; BSR set to: 15
  3597                           ;main.c: 110: uint8_t oldState;
  3598                           ;main.c: 112: ipv4_address_t ipSrc;
  3599                           ;main.c: 113: ipSrc.address[0] = 192;
  3600  001A92  0EC0               	movlw	192
  3601  001A94  0102               	movlb	2	; () banked
  3602  001A96  6FF6               	movwf	main@ipSrc& (0+255),b
  3603                           
  3604                           ; BSR set to: 2
  3605                           ;main.c: 114: ipSrc.address[1] = 168;
  3606  001A98  0EA8               	movlw	168
  3607  001A9A  6FF7               	movwf	(main@ipSrc+1)& (0+255),b
  3608                           
  3609                           ; BSR set to: 2
  3610                           ;main.c: 115: ipSrc.address[2] = 0;
  3611  001A9C  0E00               	movlw	0
  3612  001A9E  6FF8               	movwf	(main@ipSrc+2)& (0+255),b
  3613                           
  3614                           ; BSR set to: 2
  3615                           ;main.c: 116: ipSrc.address[3] = 1;
  3616  001AA0  0E01               	movlw	1
  3617  001AA2  6FF9               	movwf	(main@ipSrc+3)& (0+255),b
  3618                           
  3619                           ; BSR set to: 2
  3620                           ;main.c: 118: ipv4_address_t ipDst;
  3621                           ;main.c: 119: ipDst.address[0] = 192;
  3622  001AA4  0EC0               	movlw	192
  3623  001AA6  6FF2               	movwf	main@ipDst& (0+255),b
  3624                           
  3625                           ; BSR set to: 2
  3626                           ;main.c: 120: ipDst.address[1] = 168;
  3627  001AA8  0EA8               	movlw	168
  3628  001AAA  6FF3               	movwf	(main@ipDst+1)& (0+255),b
  3629                           
  3630                           ; BSR set to: 2
  3631                           ;main.c: 121: ipDst.address[2] = 0;
  3632  001AAC  0E00               	movlw	0
  3633  001AAE  6FF4               	movwf	(main@ipDst+2)& (0+255),b
  3634                           
  3635                           ; BSR set to: 2
  3636                           ;main.c: 122: ipDst.address[3] = 4;
  3637  001AB0  0E04               	movlw	4
  3638  001AB2  6FF5               	movwf	(main@ipDst+3)& (0+255),b
  3639                           
  3640                           ; BSR set to: 2
  3641                           ;main.c: 125: INTCONbits.GIE = 1;
  3642  001AB4  8EF2               	bsf	intcon,7,c	;volatile
  3643                           
  3644                           ; BSR set to: 2
  3645                           ;main.c: 126: INTCONbits.PEIE = 1;
  3646  001AB6  8CF2               	bsf	intcon,6,c	;volatile
  3647                           
  3648                           ; BSR set to: 2
  3649                           ;main.c: 130: srand(ethernetController_getMacAddress().address[5]);
  3650  001AB8  EC43  F01F         	call	_ethernetController_getMacAddress	;wreg free
  3651  001ABC  0E05               	movlw	5
  3652  001ABE  26E9               	addwf	fsr0l,f,c
  3653  001AC0  0E00               	movlw	0
  3654  001AC2  22EA               	addwfc	fsr0h,f,c
  3655  001AC4  50EF               	movf	indf0,w,c
  3656  001AC6  0101               	movlb	1	; () banked
  3657  001AC8  6F89               	movwf	??_main& (0+255),b
  3658  001ACA  5189               	movf	??_main& (0+255),w,b
  3659  001ACC  0100               	movlb	0	; () banked
  3660  001ACE  6F7A               	movwf	srand@x& (0+255),b
  3661  001AD0  6B7B               	clrf	(srand@x+1)& (0+255),b
  3662  001AD2  EC05  F026         	call	_srand	;wreg free
  3663  001AD6                     l625:
  3664  001AD6  0004               	clrwdt		;# 
  3665                           
  3666                           ;main.c: 136: handleStackBackgroundTasks(&stack);
  3667  001AD8  0E00               	movlw	low _stack
  3668  001ADA  0101               	movlb	1	; () banked
  3669  001ADC  6F86               	movwf	handleStackBackgroundTasks@stack& (0+255),b
  3670  001ADE  0E03               	movlw	high _stack
  3671  001AE0  6F87               	movwf	(handleStackBackgroundTasks@stack+1)& (0+255),b
  3672  001AE2  EC7E  F019         	call	_handleStackBackgroundTasks	;wreg free
  3673                           
  3674                           ;main.c: 138: printEthernetState(stack.ethernet);
  3675  001AE6  EE23  F000         	lfsr	2,_stack	;volatile
  3676  001AEA  EE00  F09A         	lfsr	0,printEthernetState@state
  3677  001AEE  0E0E               	movlw	14
  3678  001AF0                     u11481:
  3679  001AF0  CFDB FFEB          	movff	plusw2,plusw0
  3680  001AF4  06E8               	decf	wreg,f,c
  3681  001AF6  E2FC               	bc	u11481
  3682  001AF8  EC6D  F01C         	call	_printEthernetState	;wreg free
  3683                           
  3684                           ;main.c: 139: numberToDisplay = (stack.ethernet.link == NO_LINK) ? 1000 : ethernetContro
      +                          ller_getCurrentPacketCount();
  3685  001AFC  0103               	movlb	3	; () banked
  3686  001AFE  5100               	movf	_stack& (0+255),w,b	;volatile
  3687  001B00  B4D8               	btfsc	status,2,c
  3688  001B02  D009               	goto	l627
  3689                           
  3690                           ; BSR set to: 3
  3691  001B04  EC37  F026         	call	_ethernetController_getCurrentPacketCount	;wreg free
  3692  001B08  0101               	movlb	1	; () banked
  3693  001B0A  6F89               	movwf	??_main& (0+255),b
  3694  001B0C  5189               	movf	??_main& (0+255),w,b
  3695  001B0E  0102               	movlb	2	; () banked
  3696  001B10  6FED               	movwf	_main$2369& (0+255),b
  3697  001B12  6BEE               	clrf	(_main$2369+1)& (0+255),b
  3698  001B14  D005               	goto	l629
  3699  001B16                     l627:
  3700                           
  3701                           ; BSR set to: 2
  3702  001B16  0E03               	movlw	3
  3703  001B18  0102               	movlb	2	; () banked
  3704  001B1A  6FEE               	movwf	(_main$2369+1)& (0+255),b
  3705  001B1C  0EE8               	movlw	232
  3706  001B1E  6FED               	movwf	_main$2369& (0+255),b
  3707  001B20                     l629:
  3708                           
  3709                           ; BSR set to: 2
  3710                           
  3711                           ; BSR set to: 2
  3712  001B20  C2ED  F031         	movff	_main$2369,_numberToDisplay	;volatile
  3713  001B24  C2EE  F032         	movff	_main$2369+1,_numberToDisplay+1	;volatile
  3714  001B28  0E00               	movlw	0
  3715  001B2A  BE32               	btfsc	_numberToDisplay+1,7,c	;volatile
  3716  001B2C  0EFF               	movlw	-1
  3717  001B2E  6E33               	movwf	_numberToDisplay+2,c	;volatile
  3718  001B30  6E34               	movwf	_numberToDisplay+3,c	;volatile
  3719                           
  3720                           ; BSR set to: 2
  3721                           ;main.c: 141: if (buttonState) {
  3722  001B32  0101               	movlb	1	; () banked
  3723  001B34  51F4               	movf	_buttonState& (0+255),w,b	;volatile
  3724  001B36  B4D8               	btfsc	status,2,c
  3725  001B38  D7CE               	goto	l625
  3726                           
  3727                           ; BSR set to: 1
  3728                           ;main.c: 142: buttonState = 0;
  3729  001B3A  0E00               	movlw	0
  3730  001B3C  6FF4               	movwf	_buttonState& (0+255),b	;volatile
  3731                           
  3732                           ; BSR set to: 1
  3733                           ;main.c: 144: ipv4_setIPSourceAddress(ipSrc);
  3734  001B3E  C2F6  F09A         	movff	main@ipSrc,ipv4_setIPSourceAddress@ip
  3735  001B42  C2F7  F09B         	movff	main@ipSrc+1,ipv4_setIPSourceAddress@ip+1
  3736  001B46  C2F8  F09C         	movff	main@ipSrc+2,ipv4_setIPSourceAddress@ip+2
  3737  001B4A  C2F9  F09D         	movff	main@ipSrc+3,ipv4_setIPSourceAddress@ip+3
  3738  001B4E  EC22  F022         	call	_ipv4_setIPSourceAddress	;wreg free
  3739                           
  3740                           ;main.c: 145: ipSrc.address[3]++;
  3741  001B52  0102               	movlb	2	; () banked
  3742  001B54  2BF9               	incf	(main@ipSrc+3)& (0+255),f,b
  3743                           
  3744                           ; BSR set to: 2
  3745                           
  3746                           ; BSR set to: 2
  3747  001B56  D7BF               	goto	l625
  3748  001B58                     __end_of_main:
  3749                           	opt stack 0
  3750                           tblptru	equ	0xFF8
  3751                           tblptrh	equ	0xFF7
  3752                           tblptrl	equ	0xFF6
  3753                           tablat	equ	0xFF5
  3754                           intcon	equ	0xFF2
  3755                           intcon3	equ	0xFF0
  3756                           indf0	equ	0xFEF
  3757                           postinc0	equ	0xFEE
  3758                           plusw0	equ	0xFEB
  3759                           fsr0h	equ	0xFEA
  3760                           fsr0l	equ	0xFE9
  3761                           wreg	equ	0xFE8
  3762                           postdec1	equ	0xFE5
  3763                           fsr1l	equ	0xFE1
  3764                           plusw2	equ	0xFDB
  3765                           fsr2h	equ	0xFDA
  3766                           fsr2l	equ	0xFD9
  3767                           status	equ	0xFD8
  3768                           
  3769 ;; *************** function _stack_init *****************
  3770 ;; Defined at:
  3771 ;;		line 27 in file "src/stack/stack.c"
  3772 ;; Parameters:    Size  Location     Type
  3773 ;;		None
  3774 ;; Auto vars:     Size  Location     Type
  3775 ;;		None
  3776 ;; Return value:  Size  Location     Type
  3777 ;;                  3  528[None  ] struct error
  3778 ;; Registers used:
  3779 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3780 ;; Tracked objects:
  3781 ;;		On entry : 0/0
  3782 ;;		On exit  : 0/0
  3783 ;;		Unchanged: 0/0
  3784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3785 ;;      Params:         0       0       0       0       0       0       0       0       0
  3786 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3787 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3788 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3789 ;;Total ram usage:        0 bytes
  3790 ;; Hardware stack levels used:    1
  3791 ;; Hardware stack levels required when called:    6
  3792 ;; This function calls:
  3793 ;;		_arp_init
  3794 ;;		_ipv4_init
  3795 ;; This function is called by:
  3796 ;;		_main
  3797 ;; This function uses a non-reentrant model
  3798 ;;
  3799                           
  3800                           	psect	text1
  3801  004C42                     __ptext1:
  3802                           	opt stack 0
  3803  004C42                     _stack_init:
  3804                           	opt stack 24
  3805                           
  3806                           ;stack.c: 28: arp_init();
  3807                           
  3808                           ; BSR set to: 2
  3809                           ;incstack = 0
  3810  004C42  EC8F  F020         	call	_arp_init	;wreg free
  3811                           
  3812                           ;stack.c: 29: ipv4_init();
  3813  004C46  EC3A  F026         	call	_ipv4_init	;wreg free
  3814  004C4A  0012               	return		;funcret
  3815  004C4C                     __end_of_stack_init:
  3816                           	opt stack 0
  3817                           tblptru	equ	0xFF8
  3818                           tblptrh	equ	0xFF7
  3819                           tblptrl	equ	0xFF6
  3820                           tablat	equ	0xFF5
  3821                           intcon	equ	0xFF2
  3822                           intcon3	equ	0xFF0
  3823                           indf0	equ	0xFEF
  3824                           postinc0	equ	0xFEE
  3825                           plusw0	equ	0xFEB
  3826                           fsr0h	equ	0xFEA
  3827                           fsr0l	equ	0xFE9
  3828                           wreg	equ	0xFE8
  3829                           postdec1	equ	0xFE5
  3830                           fsr1l	equ	0xFE1
  3831                           plusw2	equ	0xFDB
  3832                           fsr2h	equ	0xFDA
  3833                           fsr2l	equ	0xFD9
  3834                           status	equ	0xFD8
  3835                           
  3836 ;; *************** function _ipv4_init *****************
  3837 ;; Defined at:
  3838 ;;		line 321 in file "src/stack/protocols/ipv4.c"
  3839 ;; Parameters:    Size  Location     Type
  3840 ;;		None
  3841 ;; Auto vars:     Size  Location     Type
  3842 ;;		None
  3843 ;; Return value:  Size  Location     Type
  3844 ;;                  1    wreg      void 
  3845 ;; Registers used:
  3846 ;;		None
  3847 ;; Tracked objects:
  3848 ;;		On entry : 0/0
  3849 ;;		On exit  : 0/0
  3850 ;;		Unchanged: 0/0
  3851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3852 ;;      Params:         0       0       0       0       0       0       0       0       0
  3853 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3854 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3855 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3856 ;;Total ram usage:        0 bytes
  3857 ;; Hardware stack levels used:    1
  3858 ;; Hardware stack levels required when called:    4
  3859 ;; This function calls:
  3860 ;;		Nothing
  3861 ;; This function is called by:
  3862 ;;		_stack_init
  3863 ;; This function uses a non-reentrant model
  3864 ;;
  3865                           
  3866                           	psect	text2
  3867  004C74                     __ptext2:
  3868                           	opt stack 0
  3869  004C74                     _ipv4_init:
  3870                           	opt stack 25
  3871                           
  3872                           ;ipv4.c: 322: fSrcAddrChanged = 0;
  3873                           
  3874                           ;incstack = 0
  3875  004C74  904F               	bcf	_fSrcAddrChanged/(0+8),_fSrcAddrChanged& (0+7),c
  3876  004C76  0012               	return		;funcret
  3877  004C78                     __end_of_ipv4_init:
  3878                           	opt stack 0
  3879                           tblptru	equ	0xFF8
  3880                           tblptrh	equ	0xFF7
  3881                           tblptrl	equ	0xFF6
  3882                           tablat	equ	0xFF5
  3883                           intcon	equ	0xFF2
  3884                           intcon3	equ	0xFF0
  3885                           indf0	equ	0xFEF
  3886                           postinc0	equ	0xFEE
  3887                           plusw0	equ	0xFEB
  3888                           fsr0h	equ	0xFEA
  3889                           fsr0l	equ	0xFE9
  3890                           wreg	equ	0xFE8
  3891                           postdec1	equ	0xFE5
  3892                           fsr1l	equ	0xFE1
  3893                           plusw2	equ	0xFDB
  3894                           fsr2h	equ	0xFDA
  3895                           fsr2l	equ	0xFD9
  3896                           status	equ	0xFD8
  3897                           
  3898 ;; *************** function _arp_init *****************
  3899 ;; Defined at:
  3900 ;;		line 391 in file "src/stack/protocols/arp.c"
  3901 ;; Parameters:    Size  Location     Type
  3902 ;;		None
  3903 ;; Auto vars:     Size  Location     Type
  3904 ;;  i               1   38[BANK0 ] unsigned char 
  3905 ;;  mac             6   28[BANK0 ] struct macaddress
  3906 ;;  ip              4   34[BANK0 ] struct ipv4_address
  3907 ;; Return value:  Size  Location     Type
  3908 ;;                  1    wreg      void 
  3909 ;; Registers used:
  3910 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3911 ;; Tracked objects:
  3912 ;;		On entry : 0/0
  3913 ;;		On exit  : 0/0
  3914 ;;		Unchanged: 0/0
  3915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3916 ;;      Params:         0       0       0       0       0       0       0       0       0
  3917 ;;      Locals:         0      11       0       0       0       0       0       0       0
  3918 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3919 ;;      Totals:         0      11       0       0       0       0       0       0       0
  3920 ;;Total ram usage:       11 bytes
  3921 ;; Hardware stack levels used:    1
  3922 ;; Hardware stack levels required when called:    5
  3923 ;; This function calls:
  3924 ;;		_arp_setNewEntry
  3925 ;;		_ipv4_setToAllZero
  3926 ;;		_mac_setAllZero
  3927 ;; This function is called by:
  3928 ;;		_stack_init
  3929 ;; This function uses a non-reentrant model
  3930 ;;
  3931                           
  3932                           	psect	text3
  3933  00411E                     __ptext3:
  3934                           	opt stack 0
  3935  00411E                     _arp_init:
  3936                           	opt stack 24
  3937                           
  3938                           ;arp.c: 392: macaddress_t mac;
  3939                           ;arp.c: 393: ipv4_address_t ip;
  3940                           ;arp.c: 394: mac_setAllZero(&mac);
  3941                           
  3942                           ;incstack = 0
  3943  00411E  0E7C               	movlw	low arp_init@mac
  3944  004120  0100               	movlb	0	; () banked
  3945  004122  6F60               	movwf	mac_setAllZero@mac& (0+255),b
  3946  004124  0E00               	movlw	high arp_init@mac
  3947  004126  6F61               	movwf	(mac_setAllZero@mac+1)& (0+255),b
  3948  004128  EC20  F025         	call	_mac_setAllZero	;wreg free
  3949                           
  3950                           ;arp.c: 395: ipv4_setToAllZero(&ip);
  3951  00412C  0E82               	movlw	low arp_init@ip
  3952  00412E  0100               	movlb	0	; () banked
  3953  004130  6F60               	movwf	ipv4_setToAllZero@ip& (0+255),b
  3954  004132  0E00               	movlw	high arp_init@ip
  3955  004134  6F61               	movwf	(ipv4_setToAllZero@ip+1)& (0+255),b
  3956  004136  EC8C  F025         	call	_ipv4_setToAllZero	;wreg free
  3957                           
  3958                           ;arp.c: 397: for (uint8_t i = 0; i < 8u; i++)
  3959  00413A  0E00               	movlw	0
  3960  00413C  0100               	movlb	0	; () banked
  3961  00413E  6F86               	movwf	arp_init@i& (0+255),b
  3962  004140                     l9578:
  3963                           
  3964                           ; BSR set to: 0
  3965  004140  0E07               	movlw	7
  3966  004142  6586               	cpfsgt	arp_init@i& (0+255),b
  3967  004144  D001               	goto	l1005
  3968  004146  0012               	return	
  3969  004148                     l1005:
  3970                           
  3971                           ; BSR set to: 0
  3972                           ;arp.c: 398: arp_setNewEntry(mac, ip, 0xffffffff);
  3973                           
  3974                           ; BSR set to: 0
  3975  004148  EE20  F07C         	lfsr	2,arp_init@mac
  3976  00414C  EE00  F064         	lfsr	0,arp_setNewEntry@mac
  3977  004150  0E05               	movlw	5
  3978  004152                     u11221:
  3979  004152  CFDB FFEB          	movff	plusw2,plusw0
  3980  004156  06E8               	decf	wreg,f,c
  3981  004158  E2FC               	bc	u11221
  3982  00415A  C082  F06A         	movff	arp_init@ip,arp_setNewEntry@ip
  3983  00415E  C083  F06B         	movff	arp_init@ip+1,arp_setNewEntry@ip+1
  3984  004162  C084  F06C         	movff	arp_init@ip+2,arp_setNewEntry@ip+2
  3985  004166  C085  F06D         	movff	arp_init@ip+3,arp_setNewEntry@ip+3
  3986  00416A  0EFF               	movlw	255
  3987  00416C  6F6E               	movwf	arp_setNewEntry@timestamp& (0+255),b
  3988  00416E  0EFF               	movlw	255
  3989  004170  6F6F               	movwf	(arp_setNewEntry@timestamp+1)& (0+255),b
  3990  004172  0EFF               	movlw	255
  3991  004174  6F70               	movwf	(arp_setNewEntry@timestamp+2)& (0+255),b
  3992  004176  0EFF               	movlw	255
  3993  004178  6F71               	movwf	(arp_setNewEntry@timestamp+3)& (0+255),b
  3994  00417A  EC93  F018         	call	_arp_setNewEntry	;wreg free
  3995  00417E  0100               	movlb	0	; () banked
  3996  004180  2B86               	incf	arp_init@i& (0+255),f,b
  3997  004182  D7DE               	goto	l9578
  3998  004184                     __end_of_arp_init:
  3999                           	opt stack 0
  4000                           tblptru	equ	0xFF8
  4001                           tblptrh	equ	0xFF7
  4002                           tblptrl	equ	0xFF6
  4003                           tablat	equ	0xFF5
  4004                           intcon	equ	0xFF2
  4005                           intcon3	equ	0xFF0
  4006                           indf0	equ	0xFEF
  4007                           postinc0	equ	0xFEE
  4008                           plusw0	equ	0xFEB
  4009                           fsr0h	equ	0xFEA
  4010                           fsr0l	equ	0xFE9
  4011                           wreg	equ	0xFE8
  4012                           postdec1	equ	0xFE5
  4013                           fsr1l	equ	0xFE1
  4014                           plusw2	equ	0xFDB
  4015                           fsr2h	equ	0xFDA
  4016                           fsr2l	equ	0xFD9
  4017                           status	equ	0xFD8
  4018                           
  4019 ;; *************** function _srand *****************
  4020 ;; Defined at:
  4021 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\rand.c"
  4022 ;; Parameters:    Size  Location     Type
  4023 ;;  x               2   26[BANK0 ] unsigned int 
  4024 ;; Auto vars:     Size  Location     Type
  4025 ;;		None
  4026 ;; Return value:  Size  Location     Type
  4027 ;;                  1    wreg      void 
  4028 ;; Registers used:
  4029 ;;		status,2
  4030 ;; Tracked objects:
  4031 ;;		On entry : 0/0
  4032 ;;		On exit  : 0/0
  4033 ;;		Unchanged: 0/0
  4034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4035 ;;      Params:         0       2       0       0       0       0       0       0       0
  4036 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4037 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4038 ;;      Totals:         0       2       0       0       0       0       0       0       0
  4039 ;;Total ram usage:        2 bytes
  4040 ;; Hardware stack levels used:    1
  4041 ;; Hardware stack levels required when called:    4
  4042 ;; This function calls:
  4043 ;;		Nothing
  4044 ;; This function is called by:
  4045 ;;		_main
  4046 ;; This function uses a non-reentrant model
  4047 ;;
  4048                           
  4049                           	psect	text4
  4050  004C0A                     __ptext4:
  4051                           	opt stack 0
  4052  004C0A                     _srand:
  4053                           	opt stack 26
  4054                           
  4055                           ; BSR set to: 0
  4056                           ;incstack = 0
  4057  004C0A  C07A  F049         	movff	srand@x,_randx
  4058  004C0E  C07B  F04A         	movff	srand@x+1,_randx+1
  4059  004C12  6A4B               	clrf	_randx+2,c
  4060  004C14  6A4C               	clrf	_randx+3,c
  4061  004C16  0012               	return		;funcret
  4062  004C18                     __end_of_srand:
  4063                           	opt stack 0
  4064                           tblptru	equ	0xFF8
  4065                           tblptrh	equ	0xFF7
  4066                           tblptrl	equ	0xFF6
  4067                           tablat	equ	0xFF5
  4068                           intcon	equ	0xFF2
  4069                           intcon3	equ	0xFF0
  4070                           indf0	equ	0xFEF
  4071                           postinc0	equ	0xFEE
  4072                           plusw0	equ	0xFEB
  4073                           fsr0h	equ	0xFEA
  4074                           fsr0l	equ	0xFE9
  4075                           wreg	equ	0xFE8
  4076                           postdec1	equ	0xFE5
  4077                           fsr1l	equ	0xFE1
  4078                           plusw2	equ	0xFDB
  4079                           fsr2h	equ	0xFDA
  4080                           fsr2l	equ	0xFD9
  4081                           status	equ	0xFD8
  4082                           
  4083 ;; *************** function _sevenSegmentInit *****************
  4084 ;; Defined at:
  4085 ;;		line 28 in file "src/system/sevenseg.c"
  4086 ;; Parameters:    Size  Location     Type
  4087 ;;		None
  4088 ;; Auto vars:     Size  Location     Type
  4089 ;;		None
  4090 ;; Return value:  Size  Location     Type
  4091 ;;                  1    wreg      void 
  4092 ;; Registers used:
  4093 ;;		wreg, status,2, status,0
  4094 ;; Tracked objects:
  4095 ;;		On entry : 0/0
  4096 ;;		On exit  : 0/0
  4097 ;;		Unchanged: 0/0
  4098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4099 ;;      Params:         0       0       0       0       0       0       0       0       0
  4100 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4101 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4102 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4103 ;;Total ram usage:        0 bytes
  4104 ;; Hardware stack levels used:    1
  4105 ;; Hardware stack levels required when called:    4
  4106 ;; This function calls:
  4107 ;;		Nothing
  4108 ;; This function is called by:
  4109 ;;		_main
  4110 ;; This function uses a non-reentrant model
  4111 ;;
  4112                           
  4113                           	psect	text5
  4114  004B52                     __ptext5:
  4115                           	opt stack 0
  4116  004B52                     _sevenSegmentInit:
  4117                           	opt stack 26
  4118                           
  4119                           ;sevenseg.c: 30: PORTC &= ~(0x07);
  4120                           
  4121                           ;incstack = 0
  4122  004B52  0EF8               	movlw	248
  4123  004B54  1682               	andwf	3970,f,c	;volatile
  4124                           
  4125                           ;sevenseg.c: 32: TRISC&= ~0x07;;
  4126  004B56  0EF8               	movlw	248
  4127  004B58  1694               	andwf	3988,f,c	;volatile
  4128                           
  4129                           ;sevenseg.c: 33: TRISA &=~0xff;;
  4130  004B5A  0E00               	movlw	0
  4131  004B5C  6E92               	movwf	3986,c	;volatile
  4132                           
  4133                           ;sevenseg.c: 35: ANSELA&=~0xff;;
  4134  004B5E  0E00               	movlw	0
  4135  004B60  010F               	movlb	15	; () banked
  4136  004B62  6F5B               	movwf	91,b	;volatile
  4137                           
  4138                           ;sevenseg.c: 36: ANSELC&= ~0x07;;
  4139  004B64  0EF8               	movlw	248
  4140  004B66  175D               	andwf	93,f,b	;volatile
  4141                           
  4142                           ; BSR set to: 15
  4143                           ;sevenseg.c: 38: PORTA = 0xff;
  4144  004B68  6880               	setf	3968,c	;volatile
  4145                           
  4146                           ; BSR set to: 15
  4147  004B6A  0012               	return		;funcret
  4148  004B6C                     __end_of_sevenSegmentInit:
  4149                           	opt stack 0
  4150                           tblptru	equ	0xFF8
  4151                           tblptrh	equ	0xFF7
  4152                           tblptrl	equ	0xFF6
  4153                           tablat	equ	0xFF5
  4154                           intcon	equ	0xFF2
  4155                           intcon3	equ	0xFF0
  4156                           indf0	equ	0xFEF
  4157                           postinc0	equ	0xFEE
  4158                           plusw0	equ	0xFEB
  4159                           fsr0h	equ	0xFEA
  4160                           fsr0l	equ	0xFE9
  4161                           wreg	equ	0xFE8
  4162                           postdec1	equ	0xFE5
  4163                           fsr1l	equ	0xFE1
  4164                           plusw2	equ	0xFDB
  4165                           fsr2h	equ	0xFDA
  4166                           fsr2l	equ	0xFD9
  4167                           status	equ	0xFD8
  4168                           
  4169 ;; *************** function _printEthernetState *****************
  4170 ;; Defined at:
  4171 ;;		line 179 in file "src/system/main.c"
  4172 ;; Parameters:    Size  Location     Type
  4173 ;;  state          15   58[BANK0 ] struct ethernetConnectio
  4174 ;; Auto vars:     Size  Location     Type
  4175 ;;		None
  4176 ;; Return value:  Size  Location     Type
  4177 ;;                  1    wreg      void 
  4178 ;; Registers used:
  4179 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4180 ;; Tracked objects:
  4181 ;;		On entry : 0/0
  4182 ;;		On exit  : 0/0
  4183 ;;		Unchanged: 0/0
  4184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4185 ;;      Params:         0      15       0       0       0       0       0       0       0
  4186 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4187 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4188 ;;      Totals:         0      15       0       0       0       0       0       0       0
  4189 ;;Total ram usage:       15 bytes
  4190 ;; Hardware stack levels used:    1
  4191 ;; Hardware stack levels required when called:    5
  4192 ;; This function calls:
  4193 ;;		_UARTTransmitText
  4194 ;; This function is called by:
  4195 ;;		_main
  4196 ;; This function uses a non-reentrant model
  4197 ;;
  4198                           
  4199                           	psect	text6
  4200  0038DA                     __ptext6:
  4201                           	opt stack 0
  4202  0038DA                     _printEthernetState:
  4203                           	opt stack 25
  4204                           
  4205                           ;main.c: 180: static ethernetConnection_t oldState;
  4206                           ;main.c: 181: if (state.link != oldState.link) {
  4207                           
  4208                           ; BSR set to: 15
  4209                           ;incstack = 0
  4210  0038DA  0102               	movlb	2	; () banked
  4211  0038DC  5100               	movf	printEthernetState@oldState& (0+255),w,b
  4212  0038DE  0100               	movlb	0	; () banked
  4213  0038E0  199A               	xorwf	printEthernetState@state& (0+255),w,b
  4214  0038E2  B4D8               	btfsc	status,2,c
  4215  0038E4  D041               	goto	l648
  4216                           
  4217                           ; BSR set to: 0
  4218                           ;main.c: 182: if (state.link == NO_LINK) {
  4219  0038E6  519A               	movf	printEthernetState@state& (0+255),w,b
  4220  0038E8  A4D8               	btfss	status,2,c
  4221  0038EA  D007               	goto	l639
  4222                           
  4223                           ; BSR set to: 0
  4224                           ;main.c: 183: UARTTransmitText("Link lost.\n\r");
  4225  0038EC  0E33               	movlw	low STR_34
  4226  0038EE  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4227  0038F0  0E7F               	movlw	high STR_34
  4228  0038F2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4229  0038F4  EC7A  F021         	call	_UARTTransmitText	;wreg free
  4230                           
  4231                           ;main.c: 184: } else if (state.link == LINK_ESTABLISHED) {
  4232  0038F8  D00A               	goto	l641
  4233  0038FA                     l639:
  4234  0038FA  0100               	movlb	0	; () banked
  4235  0038FC  059A               	decf	printEthernetState@state& (0+255),w,b
  4236  0038FE  A4D8               	btfss	status,2,c
  4237  003900  D006               	goto	l641
  4238                           
  4239                           ; BSR set to: 0
  4240                           ;main.c: 185: UARTTransmitText("Link established. ");
  4241  003902  0E80               	movlw	low STR_35
  4242  003904  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4243  003906  0E7E               	movlw	high STR_35
  4244  003908  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4245  00390A  EC7A  F021         	call	_UARTTransmitText	;wreg free
  4246  00390E                     l641:
  4247                           
  4248                           ;main.c: 186: }
  4249                           ;main.c: 188: if (state.link == LINK_ESTABLISHED) {
  4250  00390E  0100               	movlb	0	; () banked
  4251  003910  059A               	decf	printEthernetState@state& (0+255),w,b
  4252  003912  A4D8               	btfss	status,2,c
  4253  003914  D029               	goto	l648
  4254                           
  4255                           ; BSR set to: 0
  4256                           ;main.c: 189: if (state.speed == TEN_MBIT) {
  4257  003916  519B               	movf	(printEthernetState@state+1)& (0+255),w,b
  4258  003918  A4D8               	btfss	status,2,c
  4259  00391A  D007               	goto	l643
  4260                           
  4261                           ; BSR set to: 0
  4262                           ;main.c: 190: UARTTransmitText("Speed is 10 Mbps, ");
  4263  00391C  0E6D               	movlw	low STR_36
  4264  00391E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4265  003920  0E7E               	movlw	high STR_36
  4266  003922  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4267  003924  EC7A  F021         	call	_UARTTransmitText	;wreg free
  4268                           
  4269                           ;main.c: 191: } else if (state.speed == HUNDRED_MBIT) {
  4270  003928  D00A               	goto	l645
  4271  00392A                     l643:
  4272  00392A  0100               	movlb	0	; () banked
  4273  00392C  059B               	decf	(printEthernetState@state+1)& (0+255),w,b
  4274  00392E  A4D8               	btfss	status,2,c
  4275  003930  D006               	goto	l645
  4276                           
  4277                           ; BSR set to: 0
  4278                           ;main.c: 192: UARTTransmitText("Speed is 100 Mbps, ");
  4279  003932  0E32               	movlw	low STR_37
  4280  003934  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4281  003936  0E7E               	movlw	high STR_37
  4282  003938  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4283  00393A  EC7A  F021         	call	_UARTTransmitText	;wreg free
  4284  00393E                     l645:
  4285                           
  4286                           ;main.c: 193: }
  4287                           ;main.c: 194: if (state.duplex == HALF_DUPLEX) {
  4288  00393E  0100               	movlb	0	; () banked
  4289  003940  519C               	movf	(printEthernetState@state+2)& (0+255),w,b
  4290  003942  A4D8               	btfss	status,2,c
  4291  003944  D007               	goto	l646
  4292                           
  4293                           ; BSR set to: 0
  4294                           ;main.c: 195: UARTTransmitText("connection is Half Duplex.\n\r");
  4295  003946  0E6B               	movlw	low STR_38
  4296  003948  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4297  00394A  0E7D               	movlw	high STR_38
  4298  00394C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4299  00394E  EC7A  F021         	call	_UARTTransmitText	;wreg free
  4300                           
  4301                           ;main.c: 196: } else if (state.duplex == FULL_DUPLEX) {
  4302  003952  D00A               	goto	l648
  4303  003954                     l646:
  4304  003954  0100               	movlb	0	; () banked
  4305  003956  059C               	decf	(printEthernetState@state+2)& (0+255),w,b
  4306  003958  A4D8               	btfss	status,2,c
  4307  00395A  D006               	goto	l648
  4308                           
  4309                           ; BSR set to: 0
  4310                           ;main.c: 198: UARTTransmitText("connection is Full Duplex.\n\r");
  4311  00395C  0E88               	movlw	low STR_39
  4312  00395E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4313  003960  0E7D               	movlw	high STR_39
  4314  003962  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4315  003964  EC7A  F021         	call	_UARTTransmitText	;wreg free
  4316  003968                     l648:
  4317                           
  4318                           ;main.c: 199: }
  4319                           ;main.c: 200: }
  4320                           ;main.c: 201: }
  4321                           ;main.c: 202: oldState = state;
  4322  003968  EE20  F09A         	lfsr	2,printEthernetState@state
  4323  00396C  EE12  F000         	lfsr	1,printEthernetState@oldState
  4324  003970  0E0E               	movlw	14
  4325  003972                     u11371:
  4326  003972  CFDB FFE3          	movff	plusw2,plusw1
  4327  003976  06E8               	decf	wreg,f,c
  4328  003978  E2FC               	bc	u11371
  4329  00397A  0012               	return		;funcret
  4330  00397C                     __end_of_printEthernetState:
  4331                           	opt stack 0
  4332                           tblptru	equ	0xFF8
  4333                           tblptrh	equ	0xFF7
  4334                           tblptrl	equ	0xFF6
  4335                           tablat	equ	0xFF5
  4336                           intcon	equ	0xFF2
  4337                           intcon3	equ	0xFF0
  4338                           indf0	equ	0xFEF
  4339                           postinc0	equ	0xFEE
  4340                           plusw0	equ	0xFEB
  4341                           fsr0h	equ	0xFEA
  4342                           fsr0l	equ	0xFE9
  4343                           wreg	equ	0xFE8
  4344                           postdec1	equ	0xFE5
  4345                           plusw1	equ	0xFE3
  4346                           fsr1l	equ	0xFE1
  4347                           plusw2	equ	0xFDB
  4348                           fsr2h	equ	0xFDA
  4349                           fsr2l	equ	0xFD9
  4350                           status	equ	0xFD8
  4351                           
  4352 ;; *************** function _printErrorMessage *****************
  4353 ;; Defined at:
  4354 ;;		line 205 in file "src/system/main.c"
  4355 ;; Parameters:    Size  Location     Type
  4356 ;;  err             3   58[BANK0 ] struct error
  4357 ;; Auto vars:     Size  Location     Type
  4358 ;;		None
  4359 ;; Return value:  Size  Location     Type
  4360 ;;                  1    wreg      void 
  4361 ;; Registers used:
  4362 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4363 ;; Tracked objects:
  4364 ;;		On entry : 0/0
  4365 ;;		On exit  : 0/0
  4366 ;;		Unchanged: 0/0
  4367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4368 ;;      Params:         0       3       0       0       0       0       0       0       0
  4369 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4370 ;;      Temps:          0       2       0       0       0       0       0       0       0
  4371 ;;      Totals:         0       5       0       0       0       0       0       0       0
  4372 ;;Total ram usage:        5 bytes
  4373 ;; Hardware stack levels used:    1
  4374 ;; Hardware stack levels required when called:    8
  4375 ;; This function calls:
  4376 ;;		_UARTTransmitText
  4377 ;;		_intToString
  4378 ;; This function is called by:
  4379 ;;		_main
  4380 ;; This function uses a non-reentrant model
  4381 ;;
  4382                           
  4383                           	psect	text7
  4384  0029BA                     __ptext7:
  4385                           	opt stack 0
  4386  0029BA                     _printErrorMessage:
  4387                           	opt stack 22
  4388                           
  4389                           ;main.c: 206: UARTTransmitText("[ERROR]");
  4390                           
  4391                           ;incstack = 0
  4392  0029BA  0EA0               	movlw	low STR_40
  4393  0029BC  0100               	movlb	0	; () banked
  4394  0029BE  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4395  0029C0  0E7F               	movlw	high STR_40
  4396  0029C2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4397  0029C4  EC7A  F021         	call	_UARTTransmitText	;wreg free
  4398                           
  4399                           ;main.c: 207: switch (err.module) {
  4400  0029C8  D028               	goto	l652
  4401  0029CA                     
  4402                           ;main.c: 209: UARTTransmitText(" MEMORY MODULE: ");
  4403  0029CA  0EC9               	movlw	low STR_41
  4404  0029CC  0100               	movlb	0	; () banked
  4405  0029CE  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4406  0029D0  0E7E               	movlw	high STR_41
  4407  0029D2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4408  0029D4  EC7A  F021         	call	_UARTTransmitText	;wreg free
  4409                           
  4410                           ;main.c: 210: break;
  4411  0029D8  D050               	goto	l660
  4412  0029DA                     
  4413                           ;main.c: 212: UARTTransmitText(" ETHERNET CONTROLLER MODULE: ");
  4414  0029DA  0E2F               	movlw	low STR_42
  4415  0029DC  0100               	movlb	0	; () banked
  4416  0029DE  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4417  0029E0  0E7D               	movlw	high STR_42
  4418  0029E2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4419  0029E4  EC7A  F021         	call	_UARTTransmitText	;wreg free
  4420                           
  4421                           ;main.c: 213: break;
  4422  0029E8  D048               	goto	l660
  4423  0029EA                     
  4424                           ;main.c: 215: UARTTransmitText(" ETHERNET MODULE: ");
  4425  0029EA  0E93               	movlw	low STR_43
  4426  0029EC  0100               	movlb	0	; () banked
  4427  0029EE  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4428  0029F0  0E7E               	movlw	high STR_43
  4429  0029F2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4430  0029F4  EC7A  F021         	call	_UARTTransmitText	;wreg free
  4431                           
  4432                           ;main.c: 216: break;
  4433  0029F8  D040               	goto	l660
  4434  0029FA                     
  4435                           ;main.c: 218: UARTTransmitText(" ARP MODULE: ");
  4436  0029FA  0E18               	movlw	low STR_44
  4437  0029FC  0100               	movlb	0	; () banked
  4438  0029FE  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4439  002A00  0E7F               	movlw	high STR_44
  4440  002A02  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4441  002A04  EC7A  F021         	call	_UARTTransmitText	;wreg free
  4442                           
  4443                           ;main.c: 219: break;
  4444  002A08  D038               	goto	l660
  4445  002A0A                     
  4446                           ;main.c: 221: UARTTransmitText(" IPv4 MODULE: ");
  4447  002A0A  0E09               	movlw	low STR_45
  4448  002A0C  0100               	movlb	0	; () banked
  4449  002A0E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4450  002A10  0E7F               	movlw	high STR_45
  4451  002A12  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4452  002A14  EC7A  F021         	call	_UARTTransmitText	;wreg free
  4453                           
  4454                           ;main.c: 224: }
  4455                           
  4456                           ;main.c: 223: break;
  4457                           
  4458                           ;main.c: 222: default:
  4459  002A18  D030               	goto	l660
  4460  002A1A                     l652:
  4461  002A1A  0100               	movlb	0	; () banked
  4462  002A1C  519A               	movf	printErrorMessage@err& (0+255),w,b
  4463                           
  4464                           ; Switch size 1, requested type "space"
  4465                           ; Number of cases is 5, Range of values is 0 to 4
  4466                           ; switch strategies available:
  4467                           ; Name         Instructions Cycles
  4468                           ; simple_byte           16     9 (average)
  4469                           ;	Chosen strategy is simple_byte
  4470  002A1E  0A00               	xorlw	0	; case 0
  4471  002A20  B4D8               	btfsc	status,2,c
  4472  002A22  D7D3               	goto	l653
  4473  002A24  0A01               	xorlw	1	; case 1
  4474  002A26  B4D8               	btfsc	status,2,c
  4475  002A28  D7D8               	goto	l655
  4476  002A2A  0A03               	xorlw	3	; case 2
  4477  002A2C  B4D8               	btfsc	status,2,c
  4478  002A2E  D7DD               	goto	l656
  4479  002A30  0A01               	xorlw	1	; case 3
  4480  002A32  B4D8               	btfsc	status,2,c
  4481  002A34  D7E2               	goto	l657
  4482  002A36  0A07               	xorlw	7	; case 4
  4483  002A38  B4D8               	btfsc	status,2,c
  4484  002A3A  D7E7               	goto	l658
  4485                           
  4486                           ; BSR set to: 0
  4487                           ;main.c: 225: switch (err.code) {
  4488  002A3C  D01E               	goto	l660
  4489  002A3E                     
  4490                           ; BSR set to: 0
  4491                           ;main.c: 227: UARTTransmitText("Ethernet controller is unresponsive.");
  4492                           
  4493                           ; BSR set to: 0
  4494  002A3E  0E26               	movlw	low STR_46
  4495  002A40  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4496  002A42  0E7C               	movlw	high STR_46
  4497  002A44  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4498  002A46  EC7A  F021         	call	_UARTTransmitText	;wreg free
  4499                           
  4500                           ;main.c: 228: break;
  4501  002A4A  D030               	goto	l662
  4502  002A4C                     
  4503                           ;main.c: 230: UARTTransmitText("Ethernet controller has returned an unknown device ID.")
      +                          ;
  4504  002A4C  0E97               	movlw	low STR_47
  4505  002A4E  0100               	movlb	0	; () banked
  4506  002A50  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4507  002A52  0E7A               	movlw	high STR_47
  4508  002A54  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4509  002A56  EC7A  F021         	call	_UARTTransmitText	;wreg free
  4510                           
  4511                           ;main.c: 231: break;
  4512  002A5A  D028               	goto	l662
  4513  002A5C                     
  4514                           ;main.c: 233: UARTTransmitText("IP address could not be resolved.");
  4515  002A5C  0E92               	movlw	low STR_48
  4516  002A5E  0100               	movlb	0	; () banked
  4517  002A60  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4518  002A62  0E7C               	movlw	high STR_48
  4519  002A64  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4520  002A66  EC7A  F021         	call	_UARTTransmitText	;wreg free
  4521  002A6A                     
  4522                           ;main.c: 236: UARTTransmitText("An unknown error has occured.");
  4523                           
  4524                           ;main.c: 235: case ERROR_ETHERNET_CONTROLLER_UNKNOWN:
  4525  002A6A  0E4D               	movlw	low STR_49
  4526  002A6C  0100               	movlb	0	; () banked
  4527  002A6E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4528  002A70  0E7D               	movlw	high STR_49
  4529  002A72  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4530  002A74  EC7A  F021         	call	_UARTTransmitText	;wreg free
  4531                           
  4532                           ;main.c: 238: }
  4533                           
  4534                           ;main.c: 237: break;
  4535  002A78  D019               	goto	l662
  4536  002A7A                     l660:
  4537  002A7A  EE20  F09B         	lfsr	2,printErrorMessage@err+1
  4538  002A7E  CFDE F09D          	movff	postinc2,??_printErrorMessage
  4539  002A82  CFDD F09E          	movff	postdec2,??_printErrorMessage+1
  4540                           
  4541                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4542                           ; Switch size 1, requested type "space"
  4543                           ; Number of cases is 1, Range of values is 1 to 1
  4544                           ; switch strategies available:
  4545                           ; Name         Instructions Cycles
  4546                           ; simple_byte            4     3 (average)
  4547                           ;	Chosen strategy is simple_byte
  4548  002A86  0100               	movlb	0	; () banked
  4549  002A88  519E               	movf	(??_printErrorMessage+1)& (0+255),w,b
  4550  002A8A  0A01               	xorlw	1	; case 1
  4551  002A8C  A4D8               	btfss	status,2,c
  4552  002A8E  D7ED               	goto	l665
  4553                           
  4554                           ; BSR set to: 0
  4555                           ; Switch size 1, requested type "space"
  4556                           ; Number of cases is 4, Range of values is 45 to 146
  4557                           ; switch strategies available:
  4558                           ; Name         Instructions Cycles
  4559                           ; simple_byte           13     7 (average)
  4560                           ;	Chosen strategy is simple_byte
  4561  002A90  519D               	movf	??_printErrorMessage& (0+255),w,b
  4562  002A92  0A2D               	xorlw	45	; case 45
  4563  002A94  B4D8               	btfsc	status,2,c
  4564  002A96  D7DA               	goto	l663
  4565  002A98  0A03               	xorlw	3	; case 46
  4566  002A9A  B4D8               	btfsc	status,2,c
  4567  002A9C  D7D0               	goto	l661
  4568  002A9E  0AA1               	xorlw	161	; case 143
  4569  002AA0  B4D8               	btfsc	status,2,c
  4570  002AA2  D7E3               	goto	l665
  4571  002AA4  0A1D               	xorlw	29	; case 146
  4572  002AA6  B4D8               	btfsc	status,2,c
  4573  002AA8  D7D9               	goto	l664
  4574  002AAA  D7DF               	goto	l665
  4575  002AAC                     l662:
  4576                           
  4577                           ;main.c: 240: UARTTransmitText(" (Code: ");
  4578                           
  4579                           ; BSR set to: 0
  4580  002AAC  0E8E               	movlw	low STR_50
  4581  002AAE  0100               	movlb	0	; () banked
  4582  002AB0  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4583  002AB2  0E7F               	movlw	high STR_50
  4584  002AB4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4585  002AB6  EC7A  F021         	call	_UARTTransmitText	;wreg free
  4586                           
  4587                           ;main.c: 241: UARTTransmitText(intToString(err.code));
  4588  002ABA  C09B  F084         	movff	printErrorMessage@err+1,intToString@val
  4589  002ABE  C09C  F085         	movff	printErrorMessage@err+2,intToString@val+1
  4590  002AC2  0100               	movlb	0	; () banked
  4591  002AC4  6B86               	clrf	(intToString@val+2)& (0+255),b
  4592  002AC6  6B87               	clrf	(intToString@val+3)& (0+255),b
  4593  002AC8  EC30  F024         	call	_intToString	;wreg free
  4594  002ACC  C084  F098         	movff	?_intToString,UARTTransmitText@str
  4595  002AD0  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  4596  002AD4  EC7A  F021         	call	_UARTTransmitText	;wreg free
  4597                           
  4598                           ;main.c: 242: UARTTransmitText(").\n\r");
  4599  002AD8  0ED7               	movlw	low STR_51
  4600  002ADA  0100               	movlb	0	; () banked
  4601  002ADC  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4602  002ADE  0E7F               	movlw	high STR_51
  4603  002AE0  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4604  002AE2  EC7A  F021         	call	_UARTTransmitText	;wreg free
  4605  002AE6  0012               	return		;funcret
  4606  002AE8                     __end_of_printErrorMessage:
  4607                           	opt stack 0
  4608                           tblptru	equ	0xFF8
  4609                           tblptrh	equ	0xFF7
  4610                           tblptrl	equ	0xFF6
  4611                           tablat	equ	0xFF5
  4612                           intcon	equ	0xFF2
  4613                           intcon3	equ	0xFF0
  4614                           indf0	equ	0xFEF
  4615                           postinc0	equ	0xFEE
  4616                           plusw0	equ	0xFEB
  4617                           fsr0h	equ	0xFEA
  4618                           fsr0l	equ	0xFE9
  4619                           wreg	equ	0xFE8
  4620                           postdec1	equ	0xFE5
  4621                           plusw1	equ	0xFE3
  4622                           fsr1l	equ	0xFE1
  4623                           postinc2	equ	0xFDE
  4624                           postdec2	equ	0xFDD
  4625                           plusw2	equ	0xFDB
  4626                           fsr2h	equ	0xFDA
  4627                           fsr2l	equ	0xFD9
  4628                           status	equ	0xFD8
  4629                           
  4630 ;; *************** function _ipv4_setIPSourceAddress *****************
  4631 ;; Defined at:
  4632 ;;		line 239 in file "src/stack/protocols/ipv4.c"
  4633 ;; Parameters:    Size  Location     Type
  4634 ;;  ip              4   58[BANK0 ] struct ipv4_address
  4635 ;; Auto vars:     Size  Location     Type
  4636 ;;		None
  4637 ;; Return value:  Size  Location     Type
  4638 ;;                  1    wreg      void 
  4639 ;; Registers used:
  4640 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4641 ;; Tracked objects:
  4642 ;;		On entry : 0/0
  4643 ;;		On exit  : 0/0
  4644 ;;		Unchanged: 0/0
  4645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4646 ;;      Params:         0       4       0       0       0       0       0       0       0
  4647 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4648 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4649 ;;      Totals:         0       4       0       0       0       0       0       0       0
  4650 ;;Total ram usage:        4 bytes
  4651 ;; Hardware stack levels used:    1
  4652 ;; Hardware stack levels required when called:    6
  4653 ;; This function calls:
  4654 ;;		_UARTTransmitText
  4655 ;;		_ipAdressToString
  4656 ;; This function is called by:
  4657 ;;		_main
  4658 ;; This function uses a non-reentrant model
  4659 ;;
  4660                           
  4661                           	psect	text8
  4662  004444                     __ptext8:
  4663                           	opt stack 0
  4664  004444                     _ipv4_setIPSourceAddress:
  4665                           	opt stack 24
  4666                           
  4667                           ;ipv4.c: 240: UARTTransmitText("IPv4: Request for new IP source address (");
  4668                           
  4669                           ;incstack = 0
  4670  004444  0E5F               	movlw	low STR_96
  4671  004446  0100               	movlb	0	; () banked
  4672  004448  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4673  00444A  0E7B               	movlw	high STR_96
  4674  00444C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4675  00444E  EC7A  F021         	call	_UARTTransmitText	;wreg free
  4676                           
  4677                           ;ipv4.c: 241: UARTTransmitText(ipAdressToString(ip));
  4678  004452  C09A  F073         	movff	ipv4_setIPSourceAddress@ip,ipAdressToString@ip
  4679  004456  C09B  F074         	movff	ipv4_setIPSourceAddress@ip+1,ipAdressToString@ip+1
  4680  00445A  C09C  F075         	movff	ipv4_setIPSourceAddress@ip+2,ipAdressToString@ip+2
  4681  00445E  C09D  F076         	movff	ipv4_setIPSourceAddress@ip+3,ipAdressToString@ip+3
  4682  004462  EC0D  F010         	call	_ipAdressToString	;wreg free
  4683  004466  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  4684  00446A  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  4685  00446E  EC7A  F021         	call	_UARTTransmitText	;wreg free
  4686                           
  4687                           ;ipv4.c: 242: UARTTransmitText(").\n\r");
  4688  004472  0ED7               	movlw	low STR_51
  4689  004474  0100               	movlb	0	; () banked
  4690  004476  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4691  004478  0E7F               	movlw	high STR_51
  4692  00447A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4693  00447C  EC7A  F021         	call	_UARTTransmitText	;wreg free
  4694                           
  4695                           ;ipv4.c: 243: ipPreliminarySource = ip;
  4696  004480  C09A  F1D7         	movff	ipv4_setIPSourceAddress@ip,_ipPreliminarySource
  4697  004484  C09B  F1D8         	movff	ipv4_setIPSourceAddress@ip+1,_ipPreliminarySource+1
  4698  004488  C09C  F1D9         	movff	ipv4_setIPSourceAddress@ip+2,_ipPreliminarySource+2
  4699  00448C  C09D  F1DA         	movff	ipv4_setIPSourceAddress@ip+3,_ipPreliminarySource+3
  4700                           
  4701                           ;ipv4.c: 244: fSrcAddrChanged = 1;
  4702  004490  804F               	bsf	_fSrcAddrChanged/(0+8),_fSrcAddrChanged& (0+7),c
  4703  004492  0012               	return		;funcret
  4704  004494                     __end_of_ipv4_setIPSourceAddress:
  4705                           	opt stack 0
  4706                           tblptru	equ	0xFF8
  4707                           tblptrh	equ	0xFF7
  4708                           tblptrl	equ	0xFF6
  4709                           tablat	equ	0xFF5
  4710                           intcon	equ	0xFF2
  4711                           intcon3	equ	0xFF0
  4712                           indf0	equ	0xFEF
  4713                           postinc0	equ	0xFEE
  4714                           plusw0	equ	0xFEB
  4715                           fsr0h	equ	0xFEA
  4716                           fsr0l	equ	0xFE9
  4717                           wreg	equ	0xFE8
  4718                           postdec1	equ	0xFE5
  4719                           plusw1	equ	0xFE3
  4720                           fsr1l	equ	0xFE1
  4721                           postinc2	equ	0xFDE
  4722                           postdec2	equ	0xFDD
  4723                           plusw2	equ	0xFDB
  4724                           fsr2h	equ	0xFDA
  4725                           fsr2l	equ	0xFD9
  4726                           status	equ	0xFD8
  4727                           
  4728 ;; *************** function _handleStackBackgroundTasks *****************
  4729 ;; Defined at:
  4730 ;;		line 36 in file "src/stack/backgroundTasks.c"
  4731 ;; Parameters:    Size  Location     Type
  4732 ;;  stack           2  134[BANK1 ] PTR volatile struct stac
  4733 ;;		 -> stack(121), 
  4734 ;; Auto vars:     Size  Location     Type
  4735 ;;  foo            10    0        unsigned char [10]
  4736 ;; Return value:  Size  Location     Type
  4737 ;;                  1    wreg      void 
  4738 ;; Registers used:
  4739 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4740 ;; Tracked objects:
  4741 ;;		On entry : 0/0
  4742 ;;		On exit  : 0/0
  4743 ;;		Unchanged: 0/0
  4744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4745 ;;      Params:         0       0       2       0       0       0       0       0       0
  4746 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4747 ;;      Temps:          0       0       1       0       0       0       0       0       0
  4748 ;;      Totals:         0       0       3       0       0       0       0       0       0
  4749 ;;Total ram usage:        3 bytes
  4750 ;; Hardware stack levels used:    1
  4751 ;; Hardware stack levels required when called:   13
  4752 ;; This function calls:
  4753 ;;		_arp_background
  4754 ;;		_ethernetController_clearInterruptFlag
  4755 ;;		_ethernetController_newPacketAvailable
  4756 ;;		_ethernetController_pollInterruptFlags
  4757 ;;		_ethernetController_setLEDConfig
  4758 ;;		_ethernetController_updateLinkStatus
  4759 ;;		_ethernet_rxGetNewFrame
  4760 ;;		_ipv4_background
  4761 ;; This function is called by:
  4762 ;;		_main
  4763 ;; This function uses a non-reentrant model
  4764 ;;
  4765                           
  4766                           	psect	text9
  4767  0032FC                     __ptext9:
  4768                           	opt stack 0
  4769  0032FC                     _handleStackBackgroundTasks:
  4770                           	opt stack 17
  4771                           
  4772                           ;backgroundTasks.c: 37: unsigned char foo[10];
  4773                           ;backgroundTasks.c: 39: stack->background.interruptFlags = ethernetController_pollInterr
      +                          uptFlags();
  4774                           
  4775                           ;incstack = 0
  4776  0032FC  EC31  F014         	call	_ethernetController_pollInterruptFlags	;wreg free
  4777  003300  0101               	movlb	1	; () banked
  4778  003302  EE20 F012          	lfsr	2,18
  4779  003306  5186               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  4780  003308  26D9               	addwf	fsr2l,f,c
  4781  00330A  5187               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  4782  00330C  22DA               	addwfc	fsr2h,f,c
  4783  00330E  0100               	movlb	0	; () banked
  4784  003310  C078  FFDE         	movff	?_ethernetController_pollInterruptFlags,postinc2
  4785  003314  C079  FFDD         	movff	?_ethernetController_pollInterruptFlags+1,postdec2
  4786                           
  4787                           ; BSR set to: 0
  4788                           ;backgroundTasks.c: 42: if (stack->background.interruptFlags.LINKIF) {
  4789  003318  0101               	movlb	1	; () banked
  4790  00331A  EE20 F012          	lfsr	2,18
  4791  00331E  5186               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  4792  003320  26D9               	addwf	fsr2l,f,c
  4793  003322  5187               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  4794  003324  22DA               	addwfc	fsr2h,f,c
  4795  003326  A6DF               	btfss	indf2,3,c
  4796  003328  D029               	goto	l514
  4797                           
  4798                           ; BSR set to: 1
  4799                           ;backgroundTasks.c: 44: ethernetController_updateLinkStatus(&(stack->ethernet));
  4800  00332A  C186  F080         	movff	handleStackBackgroundTasks@stack,ethernetController_updateLinkStatus@state
  4801  00332E  C187  F081         	movff	handleStackBackgroundTasks@stack+1,ethernetController_updateLinkStatus@state+1
  4802  003332  EC05  F01D         	call	_ethernetController_updateLinkStatus	;wreg free
  4803                           
  4804                           ;backgroundTasks.c: 46: if (stack->ethernet.link == LINK_ESTABLISHED) {
  4805  003336  C186  FFD9         	movff	handleStackBackgroundTasks@stack,fsr2l
  4806  00333A  C187  FFDA         	movff	handleStackBackgroundTasks@stack+1,fsr2h
  4807  00333E  04DE               	decf	postinc2,w,c
  4808  003340  A4D8               	btfss	status,2,c
  4809  003342  D00D               	goto	l515
  4810                           
  4811                           ;backgroundTasks.c: 47: ethernetController_setLEDConfig(LEDA, LED_ON);
  4812  003344  0E00               	movlw	0
  4813  003346  0100               	movlb	0	; () banked
  4814  003348  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  4815  00334A  0E00               	movlw	0
  4816  00334C  ECBE  F01C         	call	_ethernetController_setLEDConfig
  4817                           
  4818                           ;backgroundTasks.c: 48: ethernetController_setLEDConfig(LEDB, LED_TRANSMIT_RECEIVE_EVENT
      +                          S);
  4819  003350  0E02               	movlw	2
  4820  003352  0100               	movlb	0	; () banked
  4821  003354  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  4822  003356  0E01               	movlw	1
  4823  003358  ECBE  F01C         	call	_ethernetController_setLEDConfig
  4824                           
  4825                           ;backgroundTasks.c: 49: } else {
  4826  00335C  D00C               	goto	l516
  4827  00335E                     l515:
  4828                           
  4829                           ;backgroundTasks.c: 50: ethernetController_setLEDConfig(LEDA, LED_OFF);
  4830  00335E  0E01               	movlw	1
  4831  003360  0100               	movlb	0	; () banked
  4832  003362  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  4833  003364  0E00               	movlw	0
  4834  003366  ECBE  F01C         	call	_ethernetController_setLEDConfig
  4835                           
  4836                           ;backgroundTasks.c: 51: ethernetController_setLEDConfig(LEDB, LED_OFF);
  4837  00336A  0E01               	movlw	1
  4838  00336C  0100               	movlb	0	; () banked
  4839  00336E  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  4840  003370  0E01               	movlw	1
  4841  003372  ECBE  F01C         	call	_ethernetController_setLEDConfig
  4842  003376                     l516:
  4843                           
  4844                           ;backgroundTasks.c: 52: }
  4845                           ;backgroundTasks.c: 53: ethernetController_clearInterruptFlag(LINKIF);
  4846  003376  0E0B               	movlw	11
  4847  003378  EC13  F026         	call	_ethernetController_clearInterruptFlag
  4848  00337C                     l514:
  4849                           
  4850                           ;backgroundTasks.c: 54: }
  4851                           ;backgroundTasks.c: 56: if (stack->background.interruptFlags.PKTIF) {
  4852  00337C  0101               	movlb	1	; () banked
  4853  00337E  EE20 F012          	lfsr	2,18
  4854  003382  5186               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  4855  003384  26D9               	addwf	fsr2l,f,c
  4856  003386  5187               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  4857  003388  22DA               	addwfc	fsr2h,f,c
  4858  00338A  A8DF               	btfss	indf2,4,c
  4859  00338C  D018               	goto	l518
  4860                           
  4861                           ; BSR set to: 1
  4862                           ;backgroundTasks.c: 58: if (ethernetController_newPacketAvailable()) {
  4863  00338E  ECD9  F025         	call	_ethernetController_newPacketAvailable	;wreg free
  4864  003392  0900               	iorlw	0
  4865  003394  B4D8               	btfsc	status,2,c
  4866  003396  D013               	goto	l518
  4867                           
  4868                           ;backgroundTasks.c: 59: stack->background.err = ethernet_rxGetNewFrame(&stack->ethernet)
      +                          ;
  4869  003398  C186  F178         	movff	handleStackBackgroundTasks@stack,ethernet_rxGetNewFrame@frame
  4870  00339C  C187  F179         	movff	handleStackBackgroundTasks@stack+1,ethernet_rxGetNewFrame@frame+1
  4871  0033A0  EC76  F000         	call	_ethernet_rxGetNewFrame	;wreg free
  4872  0033A4  0101               	movlb	1	; () banked
  4873  0033A6  EE20 F00F          	lfsr	2,15
  4874  0033AA  5186               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  4875  0033AC  26D9               	addwf	fsr2l,f,c
  4876  0033AE  5187               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  4877  0033B0  22DA               	addwfc	fsr2h,f,c
  4878  0033B2  C178  FFDE         	movff	?_ethernet_rxGetNewFrame,postinc2
  4879  0033B6  C179  FFDE         	movff	?_ethernet_rxGetNewFrame+1,postinc2
  4880  0033BA  C17A  FFDE         	movff	?_ethernet_rxGetNewFrame+2,postinc2
  4881  0033BE                     l518:
  4882                           
  4883                           ;backgroundTasks.c: 60: }
  4884                           ;backgroundTasks.c: 61: }
  4885                           ;backgroundTasks.c: 66: if (stack->background.fPacketPending) {
  4886                           
  4887                           ; BSR set to: 1
  4888                           
  4889                           ; BSR set to: 1
  4890  0033BE  0101               	movlb	1	; () banked
  4891  0033C0  EE20 F014          	lfsr	2,20
  4892  0033C4  5186               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  4893  0033C6  26D9               	addwf	fsr2l,f,c
  4894  0033C8  5187               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  4895  0033CA  22DA               	addwfc	fsr2h,f,c
  4896                           
  4897                           ; BSR set to: 1
  4898                           ;backgroundTasks.c: 86: }
  4899                           ;backgroundTasks.c: 88: arp_background();
  4900                           
  4901                           ; BSR set to: 1
  4902  0033CC  ECAE  F01A         	call	_arp_background	;wreg free
  4903                           
  4904                           ;backgroundTasks.c: 89: ipv4_background();
  4905  0033D0  ECB1  F012         	call	_ipv4_background	;wreg free
  4906  0033D4  0012               	return		;funcret
  4907  0033D6                     __end_of_handleStackBackgroundTasks:
  4908                           	opt stack 0
  4909                           tblptru	equ	0xFF8
  4910                           tblptrh	equ	0xFF7
  4911                           tblptrl	equ	0xFF6
  4912                           tablat	equ	0xFF5
  4913                           intcon	equ	0xFF2
  4914                           intcon3	equ	0xFF0
  4915                           indf0	equ	0xFEF
  4916                           postinc0	equ	0xFEE
  4917                           plusw0	equ	0xFEB
  4918                           fsr0h	equ	0xFEA
  4919                           fsr0l	equ	0xFE9
  4920                           wreg	equ	0xFE8
  4921                           postdec1	equ	0xFE5
  4922                           plusw1	equ	0xFE3
  4923                           fsr1l	equ	0xFE1
  4924                           indf2	equ	0xFDF
  4925                           postinc2	equ	0xFDE
  4926                           postdec2	equ	0xFDD
  4927                           plusw2	equ	0xFDB
  4928                           fsr2h	equ	0xFDA
  4929                           fsr2l	equ	0xFD9
  4930                           status	equ	0xFD8
  4931                           
  4932 ;; *************** function _ipv4_background *****************
  4933 ;; Defined at:
  4934 ;;		line 249 in file "src/stack/protocols/ipv4.c"
  4935 ;; Parameters:    Size  Location     Type
  4936 ;;		None
  4937 ;; Auto vars:     Size  Location     Type
  4938 ;;  err             3   60[BANK0 ] struct error
  4939 ;; Return value:  Size  Location     Type
  4940 ;;                  3  509[None  ] struct error
  4941 ;; Registers used:
  4942 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4943 ;; Tracked objects:
  4944 ;;		On entry : 0/0
  4945 ;;		On exit  : 0/0
  4946 ;;		Unchanged: 0/0
  4947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4948 ;;      Params:         0       0       0       0       0       0       0       0       0
  4949 ;;      Locals:         0       3       0       0       0       0       0       0       0
  4950 ;;      Temps:          0       2       0       0       0       0       0       0       0
  4951 ;;      Totals:         0       5       0       0       0       0       0       0       0
  4952 ;;Total ram usage:        5 bytes
  4953 ;; Hardware stack levels used:    1
  4954 ;; Hardware stack levels required when called:    6
  4955 ;; This function calls:
  4956 ;;		_UARTTransmitText
  4957 ;;		_ipAdressToString
  4958 ;; This function is called by:
  4959 ;;		_handleStackBackgroundTasks
  4960 ;; This function uses a non-reentrant model
  4961 ;;
  4962                           
  4963                           	psect	text10
  4964  002562                     __ptext10:
  4965                           	opt stack 0
  4966  002562                     _ipv4_background:
  4967                           	opt stack 23
  4968                           
  4969                           ;ipv4.c: 250: error_t err;
  4970                           ;ipv4.c: 251: err.module = ERROR_MODULE_IPv4;
  4971                           
  4972                           ;incstack = 0
  4973  002562  0E04               	movlw	4
  4974  002564  0100               	movlb	0	; () banked
  4975  002566  6F9C               	movwf	ipv4_background@err& (0+255),b
  4976                           
  4977                           ;ipv4.c: 252: err.code = (uint16_t)0;
  4978  002568  0E00               	movlw	0
  4979  00256A  6F9E               	movwf	(ipv4_background@err+2)& (0+255),b
  4980  00256C  0E00               	movlw	0
  4981  00256E  6F9D               	movwf	(ipv4_background@err+1)& (0+255),b
  4982                           
  4983                           ; BSR set to: 0
  4984                           ;ipv4.c: 253: if ((*arpStatus).module == ERROR_MODULE_ARP && fSrcAddrChanged) {
  4985  002570  C03C  FFD9         	movff	_arpStatus,fsr2l
  4986  002574  C03D  FFDA         	movff	_arpStatus+1,fsr2h
  4987  002578  0E03               	movlw	3
  4988  00257A  18DE               	xorwf	postinc2,w,c
  4989  00257C  A4D8               	btfss	status,2,c
  4990  00257E  D0B6               	goto	l1085
  4991                           
  4992                           ; BSR set to: 0
  4993  002580  B04F               	btfsc	_fSrcAddrChanged/(0+8),_fSrcAddrChanged& (0+7),c
  4994  002582  D090               	goto	l1086
  4995  002584  D0B3               	goto	l1085
  4996  002586                     
  4997                           ; BSR set to: 0
  4998                           ;ipv4.c: 256: err = (*arpStatus);
  4999                           
  5000                           ; BSR set to: 0
  5001  002586  C03C  FFD9         	movff	_arpStatus,fsr2l
  5002  00258A  C03D  FFDA         	movff	_arpStatus+1,fsr2h
  5003  00258E  CFDE F09C          	movff	postinc2,ipv4_background@err
  5004  002592  CFDE F09D          	movff	postinc2,ipv4_background@err+1
  5005  002596  CFDD F09E          	movff	postdec2,ipv4_background@err+2
  5006                           
  5007                           ; BSR set to: 0
  5008                           ;ipv4.c: 257: return err;
  5009                           ;	Return value of _ipv4_background is never used
  5010  00259A  0012               	return	
  5011  00259C                     
  5012                           ; BSR set to: 0
  5013                           ;ipv4.c: 259: err = (*arpStatus);
  5014                           
  5015                           ; BSR set to: 0
  5016  00259C  C03C  FFD9         	movff	_arpStatus,fsr2l
  5017  0025A0  C03D  FFDA         	movff	_arpStatus+1,fsr2h
  5018  0025A4  CFDE F09C          	movff	postinc2,ipv4_background@err
  5019  0025A8  CFDE F09D          	movff	postinc2,ipv4_background@err+1
  5020  0025AC  CFDD F09E          	movff	postdec2,ipv4_background@err+2
  5021                           
  5022                           ; BSR set to: 0
  5023                           ;ipv4.c: 261: return err;
  5024                           ;	Return value of _ipv4_background is never used
  5025  0025B0  0012               	return	
  5026  0025B2                     
  5027                           ; BSR set to: 0
  5028                           ;ipv4.c: 263: UARTTransmitText("IPv4: Address is already in use.\n\r");
  5029                           
  5030                           ; BSR set to: 0
  5031  0025B2  0E6F               	movlw	low STR_98
  5032  0025B4  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5033  0025B6  0E7C               	movlw	high STR_98
  5034  0025B8  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5035  0025BA  EC7A  F021         	call	_UARTTransmitText	;wreg free
  5036                           
  5037                           ;ipv4.c: 264: fSrcAddrChanged = 0;
  5038  0025BE  904F               	bcf	_fSrcAddrChanged/(0+8),_fSrcAddrChanged& (0+7),c
  5039                           
  5040                           ;ipv4.c: 265: UARTTransmitText("IPv4: Flag was reset because address change was unsucces
      +                          sful.\n\r");
  5041  0025C0  0E1C               	movlw	low STR_99
  5042  0025C2  0100               	movlb	0	; () banked
  5043  0025C4  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5044  0025C6  0E7A               	movlw	high STR_99
  5045  0025C8  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5046  0025CA  EC7A  F021         	call	_UARTTransmitText	;wreg free
  5047                           
  5048                           ;ipv4.c: 266: return err;
  5049                           ;	Return value of _ipv4_background is never used
  5050  0025CE  0012               	return	
  5051  0025D0                     
  5052                           ;ipv4.c: 268: err.code = (uint16_t)0;
  5053  0025D0  0E00               	movlw	0
  5054  0025D2  0100               	movlb	0	; () banked
  5055  0025D4  6F9E               	movwf	(ipv4_background@err+2)& (0+255),b
  5056  0025D6  0E00               	movlw	0
  5057  0025D8  6F9D               	movwf	(ipv4_background@err+1)& (0+255),b
  5058                           
  5059                           ; BSR set to: 0
  5060                           ;ipv4.c: 269: UARTTransmitText("IPv4: ARP sent maximum number of requests.\n\r");
  5061  0025DA  0E32               	movlw	low STR_100
  5062  0025DC  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5063  0025DE  0E7B               	movlw	high STR_100
  5064  0025E0  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5065  0025E2  EC7A  F021         	call	_UARTTransmitText	;wreg free
  5066                           
  5067                           ;ipv4.c: 270: UARTTransmitText("IPv4: ARP returned success.\n\r");
  5068  0025E6  0ED5               	movlw	low STR_101
  5069  0025E8  0100               	movlb	0	; () banked
  5070  0025EA  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5071  0025EC  0E7C               	movlw	high STR_101
  5072  0025EE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5073  0025F0  EC7A  F021         	call	_UARTTransmitText	;wreg free
  5074                           
  5075                           ;ipv4.c: 271: UARTTransmitText("IPv4: Old IP Src Addr ");
  5076  0025F4  0EEF               	movlw	low STR_102
  5077  0025F6  0100               	movlb	0	; () banked
  5078  0025F8  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5079  0025FA  0E7D               	movlw	high STR_102
  5080  0025FC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5081  0025FE  EC7A  F021         	call	_UARTTransmitText	;wreg free
  5082                           
  5083                           ;ipv4.c: 272: UARTTransmitText(ipAdressToString(ipSource));
  5084  002602  C1DB  F073         	movff	_ipSource,ipAdressToString@ip
  5085  002606  C1DC  F074         	movff	_ipSource+1,ipAdressToString@ip+1
  5086  00260A  C1DD  F075         	movff	_ipSource+2,ipAdressToString@ip+2
  5087  00260E  C1DE  F076         	movff	_ipSource+3,ipAdressToString@ip+3
  5088  002612  EC0D  F010         	call	_ipAdressToString	;wreg free
  5089  002616  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  5090  00261A  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  5091  00261E  EC7A  F021         	call	_UARTTransmitText	;wreg free
  5092                           
  5093                           ;ipv4.c: 273: ipSource = ipPreliminarySource;
  5094  002622  C1D7  F1DB         	movff	_ipPreliminarySource,_ipSource
  5095  002626  C1D8  F1DC         	movff	_ipPreliminarySource+1,_ipSource+1
  5096  00262A  C1D9  F1DD         	movff	_ipPreliminarySource+2,_ipSource+2
  5097  00262E  C1DA  F1DE         	movff	_ipPreliminarySource+3,_ipSource+3
  5098                           
  5099                           ;ipv4.c: 274: UARTTransmitText(" was set to the preliminary address (");
  5100  002632  0E00               	movlw	low STR_103
  5101  002634  0100               	movlb	0	; () banked
  5102  002636  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5103  002638  0E7C               	movlw	high STR_103
  5104  00263A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5105  00263C  EC7A  F021         	call	_UARTTransmitText	;wreg free
  5106                           
  5107                           ;ipv4.c: 275: UARTTransmitText(ipAdressToString(ipSource));
  5108  002640  C1DB  F073         	movff	_ipSource,ipAdressToString@ip
  5109  002644  C1DC  F074         	movff	_ipSource+1,ipAdressToString@ip+1
  5110  002648  C1DD  F075         	movff	_ipSource+2,ipAdressToString@ip+2
  5111  00264C  C1DE  F076         	movff	_ipSource+3,ipAdressToString@ip+3
  5112  002650  EC0D  F010         	call	_ipAdressToString	;wreg free
  5113  002654  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  5114  002658  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  5115  00265C  EC7A  F021         	call	_UARTTransmitText	;wreg free
  5116                           
  5117                           ;ipv4.c: 276: UARTTransmitText(").\n\r");
  5118  002660  0ED7               	movlw	low STR_51
  5119  002662  0100               	movlb	0	; () banked
  5120  002664  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5121  002666  0E7F               	movlw	high STR_51
  5122  002668  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5123  00266A  EC7A  F021         	call	_UARTTransmitText	;wreg free
  5124                           
  5125                           ;ipv4.c: 277: fSrcAddrChanged = 0;
  5126  00266E  904F               	bcf	_fSrcAddrChanged/(0+8),_fSrcAddrChanged& (0+7),c
  5127                           
  5128                           ;ipv4.c: 278: UARTTransmitText("IPv4: Flag was reset because address change is complete.
      +                          \n\r");
  5129  002670  0E5C               	movlw	low STR_105
  5130  002672  0100               	movlb	0	; () banked
  5131  002674  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5132  002676  0E7A               	movlw	high STR_105
  5133  002678  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5134  00267A  EC7A  F021         	call	_UARTTransmitText	;wreg free
  5135                           
  5136                           ;ipv4.c: 279: return err;
  5137                           ;	Return value of _ipv4_background is never used
  5138  00267E  0012               	return	
  5139  002680                     
  5140                           ;ipv4.c: 282: err = (*arpStatus);
  5141                           
  5142                           ;ipv4.c: 281: case ERROR_ARP_UNKNOWN:
  5143  002680  C03C  FFD9         	movff	_arpStatus,fsr2l
  5144  002684  C03D  FFDA         	movff	_arpStatus+1,fsr2h
  5145  002688  CFDE F09C          	movff	postinc2,ipv4_background@err
  5146  00268C  CFDE F09D          	movff	postinc2,ipv4_background@err+1
  5147  002690  CFDD F09E          	movff	postdec2,ipv4_background@err+2
  5148                           
  5149                           ;ipv4.c: 283: UARTTransmitText("IPv4: ARP returned an unknown error.\n\r");
  5150  002694  0EB2               	movlw	low STR_106
  5151  002696  0100               	movlb	0	; () banked
  5152  002698  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5153  00269A  0E7B               	movlw	high STR_106
  5154  00269C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5155  00269E  EC7A  F021         	call	_UARTTransmitText	;wreg free
  5156                           
  5157                           ;ipv4.c: 285: }
  5158                           
  5159                           ;ipv4.c: 284: return err;
  5160                           ;	Return value of _ipv4_background is never used
  5161  0026A2  0012               	return	
  5162  0026A4                     l1086:
  5163  0026A4  EE20 F001          	lfsr	2,1
  5164  0026A8  503C               	movf	_arpStatus,w,c
  5165  0026AA  26D9               	addwf	fsr2l,f,c
  5166  0026AC  503D               	movf	_arpStatus+1,w,c
  5167  0026AE  22DA               	addwfc	fsr2h,f,c
  5168  0026B0  CFDE F09A          	movff	postinc2,??_ipv4_background
  5169  0026B4  CFDD F09B          	movff	postdec2,??_ipv4_background+1
  5170                           
  5171                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  5172                           ; Switch size 1, requested type "space"
  5173                           ; Number of cases is 2, Range of values is 0 to 1
  5174                           ; switch strategies available:
  5175                           ; Name         Instructions Cycles
  5176                           ; simple_byte            7     4 (average)
  5177                           ;	Chosen strategy is simple_byte
  5178  0026B8  0100               	movlb	0	; () banked
  5179  0026BA  519B               	movf	(??_ipv4_background+1)& (0+255),w,b
  5180  0026BC  0A00               	xorlw	0	; case 0
  5181  0026BE  B4D8               	btfsc	status,2,c
  5182  0026C0  D004               	goto	l10150
  5183  0026C2  0A01               	xorlw	1	; case 1
  5184  0026C4  B4D8               	btfsc	status,2,c
  5185  0026C6  D006               	goto	l10152
  5186  0026C8  D7DB               	goto	l1092
  5187  0026CA                     l10150:
  5188                           
  5189                           ; BSR set to: 0
  5190                           ; Switch size 1, requested type "space"
  5191                           ; Number of cases is 1, Range of values is 0 to 0
  5192                           ; switch strategies available:
  5193                           ; Name         Instructions Cycles
  5194                           ; simple_byte            4     3 (average)
  5195                           ;	Chosen strategy is simple_byte
  5196  0026CA  519A               	movf	??_ipv4_background& (0+255),w,b
  5197  0026CC  0A00               	xorlw	0	; case 0
  5198  0026CE  B4D8               	btfsc	status,2,c
  5199  0026D0  D75A               	goto	l1087
  5200  0026D2  D7D6               	goto	l1092
  5201  0026D4                     l10152:
  5202                           
  5203                           ; BSR set to: 0
  5204                           ; Switch size 1, requested type "space"
  5205                           ; Number of cases is 4, Range of values is 145 to 243
  5206                           ; switch strategies available:
  5207                           ; Name         Instructions Cycles
  5208                           ; simple_byte           13     7 (average)
  5209                           ;	Chosen strategy is simple_byte
  5210  0026D4  519A               	movf	??_ipv4_background& (0+255),w,b
  5211  0026D6  0A91               	xorlw	145	; case 145
  5212  0026D8  B4D8               	btfsc	status,2,c
  5213  0026DA  D760               	goto	l1089
  5214  0026DC  0A03               	xorlw	3	; case 146
  5215  0026DE  B4D8               	btfsc	status,2,c
  5216  0026E0  D777               	goto	l1091
  5217  0026E2  0A06               	xorlw	6	; case 148
  5218  0026E4  B4D8               	btfsc	status,2,c
  5219  0026E6  D765               	goto	l1090
  5220  0026E8  0A67               	xorlw	103	; case 243
  5221  0026EA  D7CA               	goto	l1092
  5222  0026EC                     l1085:
  5223                           
  5224                           ; BSR set to: 0
  5225                           ;ipv4.c: 287: err.code = ERROR_IPv4_UNKNOWN;
  5226                           
  5227                           ; BSR set to: 0
  5228  0026EC  0E02               	movlw	2
  5229  0026EE  6F9E               	movwf	(ipv4_background@err+2)& (0+255),b
  5230  0026F0  0E57               	movlw	87
  5231  0026F2  6F9D               	movwf	(ipv4_background@err+1)& (0+255),b
  5232                           
  5233                           ; BSR set to: 0
  5234  0026F4  0012               	return	
  5235  0026F6                     __end_of_ipv4_background:
  5236                           	opt stack 0
  5237                           tblptru	equ	0xFF8
  5238                           tblptrh	equ	0xFF7
  5239                           tblptrl	equ	0xFF6
  5240                           tablat	equ	0xFF5
  5241                           intcon	equ	0xFF2
  5242                           intcon3	equ	0xFF0
  5243                           indf0	equ	0xFEF
  5244                           postinc0	equ	0xFEE
  5245                           plusw0	equ	0xFEB
  5246                           fsr0h	equ	0xFEA
  5247                           fsr0l	equ	0xFE9
  5248                           wreg	equ	0xFE8
  5249                           postdec1	equ	0xFE5
  5250                           plusw1	equ	0xFE3
  5251                           fsr1l	equ	0xFE1
  5252                           indf2	equ	0xFDF
  5253                           postinc2	equ	0xFDE
  5254                           postdec2	equ	0xFDD
  5255                           plusw2	equ	0xFDB
  5256                           fsr2h	equ	0xFDA
  5257                           fsr2l	equ	0xFD9
  5258                           status	equ	0xFD8
  5259                           
  5260 ;; *************** function _ethernet_rxGetNewFrame *****************
  5261 ;; Defined at:
  5262 ;;		line 55 in file "src/eth/ethernet.c"
  5263 ;; Parameters:    Size  Location     Type
  5264 ;;  frame           2  120[BANK1 ] PTR struct ethernetFrame
  5265 ;;		 -> stack.ethernet(15), stack(121), 
  5266 ;; Auto vars:     Size  Location     Type
  5267 ;;  err             3  131[BANK1 ] struct error
  5268 ;; Return value:  Size  Location     Type
  5269 ;;                  3  120[BANK1 ] struct error
  5270 ;; Registers used:
  5271 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5272 ;; Tracked objects:
  5273 ;;		On entry : 0/0
  5274 ;;		On exit  : 0/0
  5275 ;;		Unchanged: 0/0
  5276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5277 ;;      Params:         0       0       3       0       0       0       0       0       0
  5278 ;;      Locals:         0       0       3       0       0       0       0       0       0
  5279 ;;      Temps:          0       0       8       0       0       0       0       0       0
  5280 ;;      Totals:         0       0      14       0       0       0       0       0       0
  5281 ;;Total ram usage:       14 bytes
  5282 ;; Hardware stack levels used:    1
  5283 ;; Hardware stack levels required when called:   12
  5284 ;; This function calls:
  5285 ;;		_UARTTransmitInt
  5286 ;;		_UARTTransmitText
  5287 ;;		_arp_handleNewPacket
  5288 ;;		_etherTypeToString
  5289 ;;		_ethernetController_dropPacket
  5290 ;;		_ethernetController_getEtherTypeField
  5291 ;;		_ethernetController_getNextPacketPointer
  5292 ;;		_ethernetController_getRSV
  5293 ;;		_ethernetController_updateNextPacketPointer
  5294 ;;		_getMillis
  5295 ;;		_intToString
  5296 ;;		_ipv4_handleNewPacket
  5297 ;;		_macToString
  5298 ;; This function is called by:
  5299 ;;		_handleStackBackgroundTasks
  5300 ;; This function uses a non-reentrant model
  5301 ;;
  5302                           
  5303                           	psect	text11
  5304  0000EC                     __ptext11:
  5305                           	opt stack 0
  5306  0000EC                     _ethernet_rxGetNewFrame:
  5307                           	opt stack 17
  5308                           
  5309                           ;ethernet.c: 56: uint32_t static counter = 0;
  5310                           ;ethernet.c: 57: error_t err;
  5311                           ;ethernet.c: 58: err.module = ERROR_MODULE_ETHERNET;
  5312                           
  5313                           ;incstack = 0
  5314  0000EC  0E02               	movlw	2
  5315  0000EE  0101               	movlb	1	; () banked
  5316  0000F0  6F83               	movwf	ethernet_rxGetNewFrame@err& (0+255),b
  5317                           
  5318                           ;ethernet.c: 59: err.code = (uint16_t)0;
  5319  0000F2  0E00               	movlw	0
  5320  0000F4  6F85               	movwf	(ethernet_rxGetNewFrame@err+2)& (0+255),b
  5321  0000F6  0E00               	movlw	0
  5322  0000F8  6F84               	movwf	(ethernet_rxGetNewFrame@err+1)& (0+255),b
  5323                           
  5324                           ; BSR set to: 1
  5325                           ;ethernet.c: 62: frame->tReceived = getMillis();
  5326  0000FA  ECF4  F025         	call	_getMillis	;wreg free
  5327  0000FE  0101               	movlb	1	; () banked
  5328  000100  EE20 F01E          	lfsr	2,30
  5329  000104  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5330  000106  26D9               	addwf	fsr2l,f,c
  5331  000108  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5332  00010A  22DA               	addwfc	fsr2h,f,c
  5333  00010C  0100               	movlb	0	; () banked
  5334  00010E  C060  FFDE         	movff	?_getMillis,postinc2
  5335  000112  C061  FFDE         	movff	?_getMillis+1,postinc2
  5336  000116  C062  FFDE         	movff	?_getMillis+2,postinc2
  5337  00011A  C063  FFDE         	movff	?_getMillis+3,postinc2
  5338                           
  5339                           ; BSR set to: 0
  5340                           ;ethernet.c: 63: frame->memory.start = ethernetController_getNextPacketPointer();
  5341  00011E  EC0C  F026         	call	_ethernetController_getNextPacketPointer	;wreg free
  5342  000122  0101               	movlb	1	; () banked
  5343  000124  EE20 F010          	lfsr	2,16
  5344  000128  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5345  00012A  26D9               	addwf	fsr2l,f,c
  5346  00012C  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5347  00012E  22DA               	addwfc	fsr2h,f,c
  5348  000130  0100               	movlb	0	; () banked
  5349  000132  C062  FFDE         	movff	?_ethernetController_getNextPacketPointer,postinc2
  5350  000136  C063  FFDD         	movff	?_ethernetController_getNextPacketPointer+1,postdec2
  5351                           
  5352                           ; BSR set to: 0
  5353                           ;ethernet.c: 64: ethernetController_updateNextPacketPointer();
  5354  00013A  EC90  F01E         	call	_ethernetController_updateNextPacketPointer	;wreg free
  5355                           
  5356                           ;ethernet.c: 65: frame->memory.fIsAssigned = 1;
  5357  00013E  0101               	movlb	1	; () banked
  5358  000140  EE20 F016          	lfsr	2,22
  5359  000144  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5360  000146  26D9               	addwf	fsr2l,f,c
  5361  000148  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5362  00014A  22DA               	addwfc	fsr2h,f,c
  5363  00014C  0E01               	movlw	1
  5364  00014E  6EDF               	movwf	indf2,c
  5365                           
  5366                           ; BSR set to: 1
  5367                           ;ethernet.c: 66: frame->receiveStatusVector = ethernetController_getRSV(frame->memory.st
      +                          art);
  5368  000150  EE20 F010          	lfsr	2,16
  5369  000154  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5370  000156  26D9               	addwf	fsr2l,f,c
  5371  000158  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5372  00015A  22DA               	addwfc	fsr2h,f,c
  5373  00015C  CFDE F071          	movff	postinc2,ethernetController_getRSV@address
  5374  000160  CFDD F072          	movff	postdec2,ethernetController_getRSV@address+1
  5375  000164  EC09  F01F         	call	_ethernetController_getRSV	;wreg free
  5376  000168  0101               	movlb	1	; () banked
  5377  00016A  EE20 F019          	lfsr	2,25
  5378  00016E  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5379  000170  26D9               	addwf	fsr2l,f,c
  5380  000172  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5381  000174  22DA               	addwfc	fsr2h,f,c
  5382  000176  0E04               	movlw	4
  5383  000178                     u11101:
  5384  000178  CFEB FFDB          	movff	plusw0,plusw2
  5385  00017C  06E8               	decf	wreg,f,c
  5386  00017E  E2FC               	bc	u11101
  5387                           
  5388                           ; BSR set to: 1
  5389                           ;ethernet.c: 67: frame->memory.length = frame->receiveStatusVector.length;
  5390  000180  EE20 F019          	lfsr	2,25
  5391  000184  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5392  000186  26D9               	addwf	fsr2l,f,c
  5393  000188  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5394  00018A  22DA               	addwfc	fsr2h,f,c
  5395  00018C  EE10 F014          	lfsr	1,20
  5396  000190  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5397  000192  26E1               	addwf	fsr1l,f,c
  5398  000194  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5399  000196  22E2               	addwfc	fsr1h,f,c
  5400  000198  CFDE FFE6          	movff	postinc2,postinc1
  5401  00019C  CFDD FFE5          	movff	postdec2,postdec1
  5402                           
  5403                           ; BSR set to: 1
  5404                           ;ethernet.c: 71: if (frame->memory.start + frame->memory.length > 0x5FFF) {
  5405  0001A0  EE20 F014          	lfsr	2,20
  5406  0001A4  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5407  0001A6  26D9               	addwf	fsr2l,f,c
  5408  0001A8  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5409  0001AA  22DA               	addwfc	fsr2h,f,c
  5410  0001AC  CFDE F17B          	movff	postinc2,??_ethernet_rxGetNewFrame
  5411  0001B0  CFDD F17C          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  5412  0001B4  EE20 F010          	lfsr	2,16
  5413  0001B8  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5414  0001BA  26D9               	addwf	fsr2l,f,c
  5415  0001BC  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5416  0001BE  22DA               	addwfc	fsr2h,f,c
  5417  0001C0  CFDE F17D          	movff	postinc2,??_ethernet_rxGetNewFrame+2
  5418  0001C4  CFDD F17E          	movff	postdec2,??_ethernet_rxGetNewFrame+3
  5419  0001C8  517B               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  5420  0001CA  277D               	addwf	(??_ethernet_rxGetNewFrame+2)& (0+255),f,b
  5421  0001CC  517C               	movf	(??_ethernet_rxGetNewFrame+1)& (0+255),w,b
  5422  0001CE  237E               	addwfc	(??_ethernet_rxGetNewFrame+3)& (0+255),f,b
  5423  0001D0  0E60               	movlw	96
  5424  0001D2  5D7E               	subwf	(??_ethernet_rxGetNewFrame+3)& (0+255),w,b
  5425  0001D4  A0D8               	btfss	status,0,c
  5426  0001D6  D03B               	goto	l366
  5427                           
  5428                           ; BSR set to: 1
  5429                           ;ethernet.c: 73: frame->memory.end = frame->memory.length - ((0x5FFF - 0x3000) - frame->
      +                          memory.start) + 0x3000;
  5430  0001D8  0E00               	movlw	0
  5431  0001DA  6F7B               	movwf	??_ethernet_rxGetNewFrame& (0+255),b
  5432  0001DC  0E30               	movlw	48
  5433  0001DE  6F7C               	movwf	(??_ethernet_rxGetNewFrame+1)& (0+255),b
  5434  0001E0  EE20 F014          	lfsr	2,20
  5435  0001E4  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5436  0001E6  26D9               	addwf	fsr2l,f,c
  5437  0001E8  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5438  0001EA  22DA               	addwfc	fsr2h,f,c
  5439  0001EC  CFDE F17D          	movff	postinc2,??_ethernet_rxGetNewFrame+2
  5440  0001F0  CFDD F17E          	movff	postdec2,??_ethernet_rxGetNewFrame+3
  5441  0001F4  0EFF               	movlw	255
  5442  0001F6  6F7F               	movwf	(??_ethernet_rxGetNewFrame+4)& (0+255),b
  5443  0001F8  0E2F               	movlw	47
  5444  0001FA  6F80               	movwf	(??_ethernet_rxGetNewFrame+5)& (0+255),b
  5445  0001FC  EE20 F010          	lfsr	2,16
  5446  000200  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5447  000202  26D9               	addwf	fsr2l,f,c
  5448  000204  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5449  000206  22DA               	addwfc	fsr2h,f,c
  5450  000208  CFDE F181          	movff	postinc2,??_ethernet_rxGetNewFrame+6
  5451  00020C  CFDD F182          	movff	postdec2,??_ethernet_rxGetNewFrame+7
  5452  000210  1F81               	comf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  5453  000212  1F82               	comf	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  5454  000214  4B81               	infsnz	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  5455  000216  2B82               	incf	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  5456  000218  517F               	movf	(??_ethernet_rxGetNewFrame+4)& (0+255),w,b
  5457  00021A  2781               	addwf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  5458  00021C  5180               	movf	(??_ethernet_rxGetNewFrame+5)& (0+255),w,b
  5459  00021E  2382               	addwfc	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  5460  000220  1F81               	comf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  5461  000222  1F82               	comf	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  5462  000224  4B81               	infsnz	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  5463  000226  2B82               	incf	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  5464  000228  517D               	movf	(??_ethernet_rxGetNewFrame+2)& (0+255),w,b
  5465  00022A  2781               	addwf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  5466  00022C  517E               	movf	(??_ethernet_rxGetNewFrame+3)& (0+255),w,b
  5467  00022E  2382               	addwfc	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  5468  000230  517B               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  5469  000232  2781               	addwf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  5470  000234  517C               	movf	(??_ethernet_rxGetNewFrame+1)& (0+255),w,b
  5471  000236  2382               	addwfc	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  5472  000238  EE20 F012          	lfsr	2,18
  5473  00023C  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5474  00023E  26D9               	addwf	fsr2l,f,c
  5475  000240  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5476  000242  22DA               	addwfc	fsr2h,f,c
  5477  000244  C181  FFDE         	movff	??_ethernet_rxGetNewFrame+6,postinc2
  5478  000248  C182  FFDD         	movff	??_ethernet_rxGetNewFrame+7,postdec2
  5479                           
  5480                           ;ethernet.c: 74: } else {
  5481  00024C  D022               	goto	l367
  5482  00024E                     l366:
  5483                           
  5484                           ; BSR set to: 1
  5485                           ;ethernet.c: 75: frame->memory.end = frame->memory.start + frame->memory.length;
  5486                           
  5487                           ; BSR set to: 1
  5488  00024E  EE20 F014          	lfsr	2,20
  5489  000252  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5490  000254  26D9               	addwf	fsr2l,f,c
  5491  000256  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5492  000258  22DA               	addwfc	fsr2h,f,c
  5493  00025A  CFDE F17B          	movff	postinc2,??_ethernet_rxGetNewFrame
  5494  00025E  CFDD F17C          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  5495  000262  EE20 F010          	lfsr	2,16
  5496  000266  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5497  000268  26D9               	addwf	fsr2l,f,c
  5498  00026A  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5499  00026C  22DA               	addwfc	fsr2h,f,c
  5500  00026E  CFDE F17D          	movff	postinc2,??_ethernet_rxGetNewFrame+2
  5501  000272  CFDD F17E          	movff	postdec2,??_ethernet_rxGetNewFrame+3
  5502  000276  517B               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  5503  000278  277D               	addwf	(??_ethernet_rxGetNewFrame+2)& (0+255),f,b
  5504  00027A  517C               	movf	(??_ethernet_rxGetNewFrame+1)& (0+255),w,b
  5505  00027C  237E               	addwfc	(??_ethernet_rxGetNewFrame+3)& (0+255),f,b
  5506  00027E  EE20 F012          	lfsr	2,18
  5507  000282  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5508  000284  26D9               	addwf	fsr2l,f,c
  5509  000286  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5510  000288  22DA               	addwfc	fsr2h,f,c
  5511  00028A  C17D  FFDE         	movff	??_ethernet_rxGetNewFrame+2,postinc2
  5512  00028E  C17E  FFDD         	movff	??_ethernet_rxGetNewFrame+3,postdec2
  5513  000292                     l367:
  5514                           
  5515                           ; BSR set to: 1
  5516                           ;ethernet.c: 76: }
  5517                           ;ethernet.c: 77: frame->ethertype = ethernetController_getEtherTypeField(frame->memory);
  5518                           
  5519                           ; BSR set to: 1
  5520  000292  EE20 F010          	lfsr	2,16
  5521  000296  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5522  000298  26D9               	addwf	fsr2l,f,c
  5523  00029A  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5524  00029C  22DA               	addwfc	fsr2h,f,c
  5525  00029E  EE00  F06F         	lfsr	0,ethernetController_getEtherTypeField@field
  5526  0002A2  0E08               	movlw	8
  5527  0002A4                     u11121:
  5528  0002A4  CFDB FFEB          	movff	plusw2,plusw0
  5529  0002A8  06E8               	decf	wreg,f,c
  5530  0002AA  E2FC               	bc	u11121
  5531  0002AC  ECB6  F01F         	call	_ethernetController_getEtherTypeField	;wreg free
  5532  0002B0  0101               	movlb	1	; () banked
  5533  0002B2  EE20 F00E          	lfsr	2,14
  5534  0002B6  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5535  0002B8  26D9               	addwf	fsr2l,f,c
  5536  0002BA  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5537  0002BC  22DA               	addwfc	fsr2h,f,c
  5538  0002BE  0100               	movlb	0	; () banked
  5539  0002C0  C06F  FFDE         	movff	?_ethernetController_getEtherTypeField,postinc2
  5540  0002C4  C070  FFDD         	movff	?_ethernetController_getEtherTypeField+1,postdec2
  5541                           
  5542                           ; BSR set to: 0
  5543                           ;ethernet.c: 79: UARTTransmitText("[");
  5544  0002C8  0ECB               	movlw	low (STR_62+3)
  5545  0002CA  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5546  0002CC  0E7F               	movlw	high (STR_62+3)
  5547  0002CE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5548  0002D0  EC7A  F021         	call	_UARTTransmitText	;wreg free
  5549                           
  5550                           ;ethernet.c: 80: UARTTransmitText(intToString(counter++));
  5551  0002D4  C035  F084         	movff	ethernet_rxGetNewFrame@counter,intToString@val
  5552  0002D8  C036  F085         	movff	ethernet_rxGetNewFrame@counter+1,intToString@val+1
  5553  0002DC  C037  F086         	movff	ethernet_rxGetNewFrame@counter+2,intToString@val+2
  5554  0002E0  C038  F087         	movff	ethernet_rxGetNewFrame@counter+3,intToString@val+3
  5555  0002E4  EC30  F024         	call	_intToString	;wreg free
  5556  0002E8  C084  F098         	movff	?_intToString,UARTTransmitText@str
  5557  0002EC  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  5558  0002F0  EC7A  F021         	call	_UARTTransmitText	;wreg free
  5559  0002F4  0E01               	movlw	1
  5560  0002F6  2635               	addwf	ethernet_rxGetNewFrame@counter,f,c
  5561  0002F8  0E00               	movlw	0
  5562  0002FA  2236               	addwfc	ethernet_rxGetNewFrame@counter+1,f,c
  5563  0002FC  2237               	addwfc	ethernet_rxGetNewFrame@counter+2,f,c
  5564  0002FE  2238               	addwfc	ethernet_rxGetNewFrame@counter+3,f,c
  5565                           
  5566                           ;ethernet.c: 81: UARTTransmitText("]");
  5567  000300  0EFB               	movlw	low (STR_19+1)
  5568  000302  0100               	movlb	0	; () banked
  5569  000304  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5570  000306  0E7F               	movlw	high (STR_19+1)
  5571  000308  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5572  00030A  EC7A  F021         	call	_UARTTransmitText	;wreg free
  5573                           
  5574                           ;ethernet.c: 84: if (frame->receiveStatusVector.broadcast)
  5575  00030E  0101               	movlb	1	; () banked
  5576  000310  EE20 F01B          	lfsr	2,27
  5577  000314  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5578  000316  26D9               	addwf	fsr2l,f,c
  5579  000318  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5580  00031A  22DA               	addwfc	fsr2h,f,c
  5581  00031C  AEDF               	btfss	indf2,7,c
  5582  00031E  D007               	goto	l368
  5583                           
  5584                           ; BSR set to: 1
  5585                           ;ethernet.c: 85: UARTTransmitText("[Broadcast]");
  5586  000320  0E58               	movlw	low STR_3
  5587  000322  0100               	movlb	0	; () banked
  5588  000324  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5589  000326  0E7F               	movlw	high STR_3
  5590  000328  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5591  00032A  EC7A  F021         	call	_UARTTransmitText	;wreg free
  5592  00032E                     l368:
  5593                           
  5594                           ;ethernet.c: 86: if (frame->receiveStatusVector.unicast)
  5595  00032E  0101               	movlb	1	; () banked
  5596  000330  EE20 F01D          	lfsr	2,29
  5597  000334  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5598  000336  26D9               	addwf	fsr2l,f,c
  5599  000338  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5600  00033A  22DA               	addwfc	fsr2h,f,c
  5601  00033C  A4DF               	btfss	indf2,2,c
  5602  00033E  D007               	goto	l369
  5603                           
  5604                           ; BSR set to: 1
  5605                           ;ethernet.c: 87: UARTTransmitText("[Unicast]");
  5606  000340  0E84               	movlw	low STR_4
  5607  000342  0100               	movlb	0	; () banked
  5608  000344  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5609  000346  0E7F               	movlw	high STR_4
  5610  000348  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5611  00034A  EC7A  F021         	call	_UARTTransmitText	;wreg free
  5612  00034E                     l369:
  5613                           
  5614                           ;ethernet.c: 88: if (!frame->receiveStatusVector.receivedOk)
  5615  00034E  0101               	movlb	1	; () banked
  5616  000350  EE20 F01B          	lfsr	2,27
  5617  000354  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5618  000356  26D9               	addwf	fsr2l,f,c
  5619  000358  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5620  00035A  22DA               	addwfc	fsr2h,f,c
  5621  00035C  BADF               	btfsc	indf2,5,c
  5622  00035E  D007               	goto	l370
  5623                           
  5624                           ; BSR set to: 1
  5625                           ;ethernet.c: 89: UARTTransmitText("[Symbol Errors]");
  5626  000360  0EEA               	movlw	low STR_5
  5627  000362  0100               	movlb	0	; () banked
  5628  000364  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5629  000366  0E7E               	movlw	high STR_5
  5630  000368  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5631  00036A  EC7A  F021         	call	_UARTTransmitText	;wreg free
  5632  00036E                     l370:
  5633                           
  5634                           ;ethernet.c: 91: UARTTransmitText("[");
  5635  00036E  0ECB               	movlw	low (STR_62+3)
  5636  000370  0100               	movlb	0	; () banked
  5637  000372  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5638  000374  0E7F               	movlw	high (STR_62+3)
  5639  000376  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5640  000378  EC7A  F021         	call	_UARTTransmitText	;wreg free
  5641                           
  5642                           ;ethernet.c: 92: UARTTransmitText(intToString(frame->tReceived));
  5643  00037C  0101               	movlb	1	; () banked
  5644  00037E  EE20 F01E          	lfsr	2,30
  5645  000382  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5646  000384  26D9               	addwf	fsr2l,f,c
  5647  000386  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5648  000388  22DA               	addwfc	fsr2h,f,c
  5649  00038A  CFDE F084          	movff	postinc2,intToString@val
  5650  00038E  CFDE F085          	movff	postinc2,intToString@val+1
  5651  000392  CFDE F086          	movff	postinc2,intToString@val+2
  5652  000396  CFDE F087          	movff	postinc2,intToString@val+3
  5653  00039A  EC30  F024         	call	_intToString	;wreg free
  5654  00039E  C084  F098         	movff	?_intToString,UARTTransmitText@str
  5655  0003A2  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  5656  0003A6  EC7A  F021         	call	_UARTTransmitText	;wreg free
  5657                           
  5658                           ;ethernet.c: 93: UARTTransmitText("]");
  5659  0003AA  0EFB               	movlw	low (STR_19+1)
  5660  0003AC  0100               	movlb	0	; () banked
  5661  0003AE  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5662  0003B0  0E7F               	movlw	high (STR_19+1)
  5663  0003B2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5664  0003B4  EC7A  F021         	call	_UARTTransmitText	;wreg free
  5665                           
  5666                           ;ethernet.c: 99: switch (frame->ethertype) {
  5667  0003B8  D097               	goto	l371
  5668  0003BA                     
  5669                           ;ethernet.c: 101: UARTTransmitText("[ARP]");
  5670  0003BA  0EBD               	movlw	low STR_8
  5671  0003BC  0100               	movlb	0	; () banked
  5672  0003BE  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5673  0003C0  0E7F               	movlw	high STR_8
  5674  0003C2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5675  0003C4  EC7A  F021         	call	_UARTTransmitText	;wreg free
  5676                           
  5677                           ;ethernet.c: 102: arp_handleNewPacket(frame);
  5678  0003C8  C178  F0FC         	movff	ethernet_rxGetNewFrame@frame,arp_handleNewPacket@frame
  5679  0003CC  C179  F0FD         	movff	ethernet_rxGetNewFrame@frame+1,arp_handleNewPacket@frame+1
  5680  0003D0  EC04  F011         	call	_arp_handleNewPacket	;wreg free
  5681                           
  5682                           ;ethernet.c: 103: break;
  5683  0003D4  D0A0               	goto	l373
  5684  0003D6                     
  5685                           ;ethernet.c: 105: UARTTransmitText("[IPv4]");
  5686  0003D6  0EB6               	movlw	low STR_9
  5687  0003D8  0100               	movlb	0	; () banked
  5688  0003DA  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5689  0003DC  0E7F               	movlw	high STR_9
  5690  0003DE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5691  0003E0  EC7A  F021         	call	_UARTTransmitText	;wreg free
  5692                           
  5693                           ;ethernet.c: 106: ipv4_handleNewPacket(frame);
  5694  0003E4  C178  F0B5         	movff	ethernet_rxGetNewFrame@frame,ipv4_handleNewPacket@frame
  5695  0003E8  C179  F0B6         	movff	ethernet_rxGetNewFrame@frame+1,ipv4_handleNewPacket@frame+1
  5696  0003EC  ECDB  F011         	call	_ipv4_handleNewPacket	;wreg free
  5697                           
  5698                           ;ethernet.c: 107: break;
  5699  0003F0  D092               	goto	l373
  5700  0003F2                     
  5701                           ;ethernet.c: 109: UARTTransmitText("[Unknown EtherType]");
  5702  0003F2  0E46               	movlw	low STR_10
  5703  0003F4  0100               	movlb	0	; () banked
  5704  0003F6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5705  0003F8  0E7E               	movlw	high STR_10
  5706  0003FA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5707  0003FC  EC7A  F021         	call	_UARTTransmitText	;wreg free
  5708                           
  5709                           ;ethernet.c: 110: UARTTransmitText("[");
  5710  000400  0ECB               	movlw	low (STR_62+3)
  5711  000402  0100               	movlb	0	; () banked
  5712  000404  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5713  000406  0E7F               	movlw	high (STR_62+3)
  5714  000408  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5715  00040A  EC7A  F021         	call	_UARTTransmitText	;wreg free
  5716                           
  5717                           ;ethernet.c: 111: UARTTransmitText(macToString(frame->source));
  5718  00040E  0101               	movlb	1	; () banked
  5719  000410  EE20 F002          	lfsr	2,2
  5720  000414  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5721  000416  26D9               	addwf	fsr2l,f,c
  5722  000418  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5723  00041A  22DA               	addwfc	fsr2h,f,c
  5724  00041C  EE00  F07A         	lfsr	0,macToString@addr
  5725  000420  0E05               	movlw	5
  5726  000422                     u11161:
  5727  000422  CFDB FFEB          	movff	plusw2,plusw0
  5728  000426  06E8               	decf	wreg,f,c
  5729  000428  E2FC               	bc	u11161
  5730  00042A  EC19  F017         	call	_macToString	;wreg free
  5731  00042E  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  5732  000432  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  5733  000436  EC7A  F021         	call	_UARTTransmitText	;wreg free
  5734                           
  5735                           ;ethernet.c: 112: UARTTransmitText("->");
  5736  00043A  0EF4               	movlw	low STR_12
  5737  00043C  0100               	movlb	0	; () banked
  5738  00043E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5739  000440  0E7F               	movlw	high STR_12
  5740  000442  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5741  000444  EC7A  F021         	call	_UARTTransmitText	;wreg free
  5742                           
  5743                           ;ethernet.c: 113: UARTTransmitText(macToString(frame->destination));
  5744  000448  0101               	movlb	1	; () banked
  5745  00044A  EE20 F008          	lfsr	2,8
  5746  00044E  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5747  000450  26D9               	addwf	fsr2l,f,c
  5748  000452  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5749  000454  22DA               	addwfc	fsr2h,f,c
  5750  000456  EE00  F07A         	lfsr	0,macToString@addr
  5751  00045A  0E05               	movlw	5
  5752  00045C                     u11171:
  5753  00045C  CFDB FFEB          	movff	plusw2,plusw0
  5754  000460  06E8               	decf	wreg,f,c
  5755  000462  E2FC               	bc	u11171
  5756  000464  EC19  F017         	call	_macToString	;wreg free
  5757  000468  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  5758  00046C  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  5759  000470  EC7A  F021         	call	_UARTTransmitText	;wreg free
  5760                           
  5761                           ;ethernet.c: 114: UARTTransmitText("][");
  5762  000474  0EF7               	movlw	low STR_13
  5763  000476  0100               	movlb	0	; () banked
  5764  000478  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5765  00047A  0E7F               	movlw	high STR_13
  5766  00047C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5767  00047E  EC7A  F021         	call	_UARTTransmitText	;wreg free
  5768                           
  5769                           ;ethernet.c: 115: UARTTransmitText(etherTypeToString(frame->ethertype));
  5770  000482  0101               	movlb	1	; () banked
  5771  000484  EE20 F00E          	lfsr	2,14
  5772  000488  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5773  00048A  26D9               	addwf	fsr2l,f,c
  5774  00048C  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5775  00048E  22DA               	addwfc	fsr2h,f,c
  5776  000490  CFDE F060          	movff	postinc2,etherTypeToString@ethertype
  5777  000494  CFDD F061          	movff	postdec2,etherTypeToString@ethertype+1
  5778  000498  ECE2  F022         	call	_etherTypeToString	;wreg free
  5779  00049C  C060  F098         	movff	?_etherTypeToString,UARTTransmitText@str
  5780  0004A0  C061  F099         	movff	?_etherTypeToString+1,UARTTransmitText@str+1
  5781  0004A4  EC7A  F021         	call	_UARTTransmitText	;wreg free
  5782                           
  5783                           ;ethernet.c: 116: UARTTransmitText("][L=");
  5784  0004A8  0EDC               	movlw	low STR_14
  5785  0004AA  0100               	movlb	0	; () banked
  5786  0004AC  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5787  0004AE  0E7F               	movlw	high STR_14
  5788  0004B0  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5789  0004B2  EC7A  F021         	call	_UARTTransmitText	;wreg free
  5790                           
  5791                           ;ethernet.c: 117: UARTTransmitInt(frame->length);
  5792  0004B6  C178  FFD9         	movff	ethernet_rxGetNewFrame@frame,fsr2l
  5793  0004BA  C179  FFDA         	movff	ethernet_rxGetNewFrame@frame+1,fsr2h
  5794  0004BE  CFDE F17B          	movff	postinc2,??_ethernet_rxGetNewFrame
  5795  0004C2  CFDD F17C          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  5796  0004C6  C17B  F09A         	movff	??_ethernet_rxGetNewFrame,UARTTransmitInt@val
  5797  0004CA  C17C  F09B         	movff	??_ethernet_rxGetNewFrame+1,UARTTransmitInt@val+1
  5798  0004CE  0100               	movlb	0	; () banked
  5799  0004D0  6B9C               	clrf	(UARTTransmitInt@val+2)& (0+255),b
  5800  0004D2  6B9D               	clrf	(UARTTransmitInt@val+3)& (0+255),b
  5801  0004D4  EC7B  F025         	call	_UARTTransmitInt	;wreg free
  5802                           
  5803                           ;ethernet.c: 118: UARTTransmitText("] ");
  5804  0004D8  0EF1               	movlw	low STR_15
  5805  0004DA  0100               	movlb	0	; () banked
  5806  0004DC  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5807  0004DE  0E7F               	movlw	high STR_15
  5808  0004E0  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5809  0004E2  EC7A  F021         	call	_UARTTransmitText	;wreg free
  5810                           
  5811                           ;ethernet.c: 120: }
  5812                           
  5813                           ;ethernet.c: 119: break;
  5814  0004E6  D017               	goto	l373
  5815  0004E8                     l371:
  5816  0004E8  0101               	movlb	1	; () banked
  5817  0004EA  EE20 F00E          	lfsr	2,14
  5818  0004EE  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5819  0004F0  26D9               	addwf	fsr2l,f,c
  5820  0004F2  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5821  0004F4  22DA               	addwfc	fsr2h,f,c
  5822  0004F6  CFDE F17B          	movff	postinc2,??_ethernet_rxGetNewFrame
  5823  0004FA  CFDD F17C          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  5824                           
  5825                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5826                           ; Switch size 1, requested type "space"
  5827                           ; Number of cases is 1, Range of values is 8 to 8
  5828                           ; switch strategies available:
  5829                           ; Name         Instructions Cycles
  5830                           ; simple_byte            4     3 (average)
  5831                           ;	Chosen strategy is simple_byte
  5832  0004FE  517C               	movf	(??_ethernet_rxGetNewFrame+1)& (0+255),w,b
  5833  000500  0A08               	xorlw	8	; case 8
  5834  000502  A4D8               	btfss	status,2,c
  5835  000504  D776               	goto	l375
  5836                           
  5837                           ; BSR set to: 1
  5838                           ; Switch size 1, requested type "space"
  5839                           ; Number of cases is 2, Range of values is 0 to 6
  5840                           ; switch strategies available:
  5841                           ; Name         Instructions Cycles
  5842                           ; simple_byte            7     4 (average)
  5843                           ;	Chosen strategy is simple_byte
  5844  000506  517B               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  5845  000508  0A00               	xorlw	0	; case 0
  5846  00050A  B4D8               	btfsc	status,2,c
  5847  00050C  D764               	goto	l374
  5848  00050E  0A06               	xorlw	6	; case 6
  5849  000510  B4D8               	btfsc	status,2,c
  5850  000512  D753               	goto	l372
  5851  000514  D76E               	goto	l375
  5852  000516                     l373:
  5853                           
  5854                           ;ethernet.c: 123: UARTTransmitText("[");
  5855                           
  5856                           ; BSR set to: 1
  5857  000516  0ECB               	movlw	low (STR_62+3)
  5858  000518  0100               	movlb	0	; () banked
  5859  00051A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5860  00051C  0E7F               	movlw	high (STR_62+3)
  5861  00051E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5862  000520  EC7A  F021         	call	_UARTTransmitText	;wreg free
  5863                           
  5864                           ;ethernet.c: 124: UARTTransmitText(intToString(frame->memory.start));
  5865  000524  0101               	movlb	1	; () banked
  5866  000526  EE20 F010          	lfsr	2,16
  5867  00052A  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5868  00052C  26D9               	addwf	fsr2l,f,c
  5869  00052E  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5870  000530  22DA               	addwfc	fsr2h,f,c
  5871  000532  CFDE F17B          	movff	postinc2,??_ethernet_rxGetNewFrame
  5872  000536  CFDD F17C          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  5873  00053A  C17B  F084         	movff	??_ethernet_rxGetNewFrame,intToString@val
  5874  00053E  C17C  F085         	movff	??_ethernet_rxGetNewFrame+1,intToString@val+1
  5875  000542  0100               	movlb	0	; () banked
  5876  000544  6B86               	clrf	(intToString@val+2)& (0+255),b
  5877  000546  6B87               	clrf	(intToString@val+3)& (0+255),b
  5878  000548  EC30  F024         	call	_intToString	;wreg free
  5879  00054C  C084  F098         	movff	?_intToString,UARTTransmitText@str
  5880  000550  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  5881  000554  EC7A  F021         	call	_UARTTransmitText	;wreg free
  5882                           
  5883                           ;ethernet.c: 125: UARTTransmitText(" to ");
  5884  000558  0EE5               	movlw	low (STR_67+11)
  5885  00055A  0100               	movlb	0	; () banked
  5886  00055C  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5887  00055E  0E7E               	movlw	high (STR_67+11)
  5888  000560  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5889  000562  EC7A  F021         	call	_UARTTransmitText	;wreg free
  5890                           
  5891                           ;ethernet.c: 126: UARTTransmitText(intToString(frame->memory.end));
  5892  000566  0101               	movlb	1	; () banked
  5893  000568  EE20 F012          	lfsr	2,18
  5894  00056C  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5895  00056E  26D9               	addwf	fsr2l,f,c
  5896  000570  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5897  000572  22DA               	addwfc	fsr2h,f,c
  5898  000574  CFDE F17B          	movff	postinc2,??_ethernet_rxGetNewFrame
  5899  000578  CFDD F17C          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  5900  00057C  C17B  F084         	movff	??_ethernet_rxGetNewFrame,intToString@val
  5901  000580  C17C  F085         	movff	??_ethernet_rxGetNewFrame+1,intToString@val+1
  5902  000584  0100               	movlb	0	; () banked
  5903  000586  6B86               	clrf	(intToString@val+2)& (0+255),b
  5904  000588  6B87               	clrf	(intToString@val+3)& (0+255),b
  5905  00058A  EC30  F024         	call	_intToString	;wreg free
  5906  00058E  C084  F098         	movff	?_intToString,UARTTransmitText@str
  5907  000592  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  5908  000596  EC7A  F021         	call	_UARTTransmitText	;wreg free
  5909                           
  5910                           ;ethernet.c: 127: UARTTransmitText(" (");
  5911  00059A  0E86               	movlw	low (STR_96+39)
  5912  00059C  0100               	movlb	0	; () banked
  5913  00059E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5914  0005A0  0E7B               	movlw	high (STR_96+39)
  5915  0005A2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5916  0005A4  EC7A  F021         	call	_UARTTransmitText	;wreg free
  5917                           
  5918                           ;ethernet.c: 128: UARTTransmitText(intToString(frame->memory.length));
  5919  0005A8  0101               	movlb	1	; () banked
  5920  0005AA  EE20 F014          	lfsr	2,20
  5921  0005AE  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5922  0005B0  26D9               	addwf	fsr2l,f,c
  5923  0005B2  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5924  0005B4  22DA               	addwfc	fsr2h,f,c
  5925  0005B6  CFDE F17B          	movff	postinc2,??_ethernet_rxGetNewFrame
  5926  0005BA  CFDD F17C          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  5927  0005BE  C17B  F084         	movff	??_ethernet_rxGetNewFrame,intToString@val
  5928  0005C2  C17C  F085         	movff	??_ethernet_rxGetNewFrame+1,intToString@val+1
  5929  0005C6  0100               	movlb	0	; () banked
  5930  0005C8  6B86               	clrf	(intToString@val+2)& (0+255),b
  5931  0005CA  6B87               	clrf	(intToString@val+3)& (0+255),b
  5932  0005CC  EC30  F024         	call	_intToString	;wreg free
  5933  0005D0  C084  F098         	movff	?_intToString,UARTTransmitText@str
  5934  0005D4  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  5935  0005D8  EC7A  F021         	call	_UARTTransmitText	;wreg free
  5936                           
  5937                           ;ethernet.c: 129: UARTTransmitText(")]");
  5938  0005DC  0EFA               	movlw	low STR_19
  5939  0005DE  0100               	movlb	0	; () banked
  5940  0005E0  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5941  0005E2  0E7F               	movlw	high STR_19
  5942  0005E4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5943  0005E6  EC7A  F021         	call	_UARTTransmitText	;wreg free
  5944                           
  5945                           ;ethernet.c: 131: ethernetController_dropPacket(frame);
  5946  0005EA  C178  F072         	movff	ethernet_rxGetNewFrame@frame,ethernetController_dropPacket@frame
  5947  0005EE  C179  F073         	movff	ethernet_rxGetNewFrame@frame+1,ethernetController_dropPacket@frame+1
  5948  0005F2  EC68  F023         	call	_ethernetController_dropPacket	;wreg free
  5949                           
  5950                           ;ethernet.c: 133: UARTTransmitText("\n\r");
  5951  0005F6  0E6C               	movlw	low (STR_81+33)
  5952  0005F8  0100               	movlb	0	; () banked
  5953  0005FA  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5954  0005FC  0E7C               	movlw	high (STR_81+33)
  5955  0005FE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5956  000600  EC7A  F021         	call	_UARTTransmitText	;wreg free
  5957                           
  5958                           ;ethernet.c: 135: return err;
  5959  000604  C183  F178         	movff	ethernet_rxGetNewFrame@err,?_ethernet_rxGetNewFrame
  5960  000608  C184  F179         	movff	ethernet_rxGetNewFrame@err+1,?_ethernet_rxGetNewFrame+1
  5961  00060C  C185  F17A         	movff	ethernet_rxGetNewFrame@err+2,?_ethernet_rxGetNewFrame+2
  5962  000610  0012               	return	
  5963  000612                     __end_of_ethernet_rxGetNewFrame:
  5964                           	opt stack 0
  5965                           tblptru	equ	0xFF8
  5966                           tblptrh	equ	0xFF7
  5967                           tblptrl	equ	0xFF6
  5968                           tablat	equ	0xFF5
  5969                           intcon	equ	0xFF2
  5970                           intcon3	equ	0xFF0
  5971                           indf0	equ	0xFEF
  5972                           postinc0	equ	0xFEE
  5973                           plusw0	equ	0xFEB
  5974                           fsr0h	equ	0xFEA
  5975                           fsr0l	equ	0xFE9
  5976                           wreg	equ	0xFE8
  5977                           postinc1	equ	0xFE6
  5978                           postdec1	equ	0xFE5
  5979                           plusw1	equ	0xFE3
  5980                           fsr1h	equ	0xFE2
  5981                           fsr1l	equ	0xFE1
  5982                           indf2	equ	0xFDF
  5983                           postinc2	equ	0xFDE
  5984                           postdec2	equ	0xFDD
  5985                           plusw2	equ	0xFDB
  5986                           fsr2h	equ	0xFDA
  5987                           fsr2l	equ	0xFD9
  5988                           status	equ	0xFD8
  5989                           
  5990 ;; *************** function _ipv4_handleNewPacket *****************
  5991 ;; Defined at:
  5992 ;;		line 203 in file "src/stack/protocols/ipv4.c"
  5993 ;; Parameters:    Size  Location     Type
  5994 ;;  frame           2   85[BANK0 ] PTR struct ethernetFrame
  5995 ;;		 -> stack.ethernet(15), stack(121), 
  5996 ;; Auto vars:     Size  Location     Type
  5997 ;;  ip             23   98[BANK0 ] struct ipv4_header
  5998 ;;  headerField     9   89[BANK0 ] struct memoryField
  5999 ;; Return value:  Size  Location     Type
  6000 ;;                  1    wreg      void 
  6001 ;; Registers used:
  6002 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6003 ;; Tracked objects:
  6004 ;;		On entry : 0/0
  6005 ;;		On exit  : 0/0
  6006 ;;		Unchanged: 0/0
  6007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6008 ;;      Params:         0       2       0       0       0       0       0       0       0
  6009 ;;      Locals:         0      32       0       0       0       0       0       0       0
  6010 ;;      Temps:          0       2       0       0       0       0       0       0       0
  6011 ;;      Totals:         0      36       0       0       0       0       0       0       0
  6012 ;;Total ram usage:       36 bytes
  6013 ;; Hardware stack levels used:    1
  6014 ;; Hardware stack levels required when called:    9
  6015 ;; This function calls:
  6016 ;;		_UARTTransmitText
  6017 ;;		_ethernetController_dropPacket
  6018 ;;		_intToString
  6019 ;;		_ipAdressToString
  6020 ;;		_ipProtocolToString
  6021 ;;		_ipv4_checkHeaderChecksum
  6022 ;;		_ipv4_parseHeader
  6023 ;; This function is called by:
  6024 ;;		_ethernet_rxGetNewFrame
  6025 ;; This function uses a non-reentrant model
  6026 ;;
  6027                           
  6028                           	psect	text12
  6029  0023B6                     __ptext12:
  6030                           	opt stack 0
  6031  0023B6                     _ipv4_handleNewPacket:
  6032                           	opt stack 19
  6033                           
  6034                           ;ipv4.c: 204: ipv4_header_t ip;
  6035                           ;ipv4.c: 205: memoryField_t headerField;
  6036                           ;ipv4.c: 206: if (frame->ethertype != ETHERTYPE_IPv4) {
  6037                           
  6038                           ;incstack = 0
  6039  0023B6  0100               	movlb	0	; () banked
  6040  0023B8  EE20 F00E          	lfsr	2,14
  6041  0023BC  51B5               	movf	ipv4_handleNewPacket@frame& (0+255),w,b
  6042  0023BE  26D9               	addwf	fsr2l,f,c
  6043  0023C0  51B6               	movf	(ipv4_handleNewPacket@frame+1)& (0+255),w,b
  6044  0023C2  22DA               	addwfc	fsr2h,f,c
  6045  0023C4  50DE               	movf	postinc2,w,c
  6046  0023C6  E104               	bnz	u10630
  6047  0023C8  0E08               	movlw	8
  6048  0023CA  18DE               	xorwf	postinc2,w,c
  6049  0023CC  B4D8               	btfsc	status,2,c
  6050  0023CE  D007               	goto	l1071
  6051  0023D0                     u10630:
  6052                           
  6053                           ; BSR set to: 0
  6054                           ;ipv4.c: 207: ethernetController_dropPacket(frame);
  6055  0023D0  C0B5  F072         	movff	ipv4_handleNewPacket@frame,ethernetController_dropPacket@frame
  6056  0023D4  C0B6  F073         	movff	ipv4_handleNewPacket@frame+1,ethernetController_dropPacket@frame+1
  6057  0023D8  EC68  F023         	call	_ethernetController_dropPacket	;wreg free
  6058                           
  6059                           ;ipv4.c: 208: return;
  6060  0023DC  0012               	return	
  6061  0023DE                     l1071:
  6062                           
  6063                           ;ipv4.c: 209: }
  6064                           ;ipv4.c: 210: headerField = frame->memory;
  6065  0023DE  0100               	movlb	0	; () banked
  6066  0023E0  EE20 F010          	lfsr	2,16
  6067  0023E4  51B5               	movf	ipv4_handleNewPacket@frame& (0+255),w,b
  6068  0023E6  26D9               	addwf	fsr2l,f,c
  6069  0023E8  51B6               	movf	(ipv4_handleNewPacket@frame+1)& (0+255),w,b
  6070  0023EA  22DA               	addwfc	fsr2h,f,c
  6071  0023EC  EE10  F0B9         	lfsr	1,ipv4_handleNewPacket@headerField
  6072  0023F0  0E08               	movlw	8
  6073  0023F2                     u10641:
  6074  0023F2  CFDB FFE3          	movff	plusw2,plusw1
  6075  0023F6  06E8               	decf	wreg,f,c
  6076  0023F8  E2FC               	bc	u10641
  6077                           
  6078                           ; BSR set to: 0
  6079                           ;ipv4.c: 211: headerField.start = frame->memory.start + 22;
  6080  0023FA  EE20 F010          	lfsr	2,16
  6081  0023FE  51B5               	movf	ipv4_handleNewPacket@frame& (0+255),w,b
  6082  002400  26D9               	addwf	fsr2l,f,c
  6083  002402  51B6               	movf	(ipv4_handleNewPacket@frame+1)& (0+255),w,b
  6084  002404  22DA               	addwfc	fsr2h,f,c
  6085  002406  CFDE F0B7          	movff	postinc2,??_ipv4_handleNewPacket
  6086  00240A  CFDD F0B8          	movff	postdec2,??_ipv4_handleNewPacket+1
  6087  00240E  0E16               	movlw	22
  6088  002410  25B7               	addwf	??_ipv4_handleNewPacket& (0+255),w,b
  6089  002412  6FB9               	movwf	ipv4_handleNewPacket@headerField& (0+255),b
  6090  002414  0E00               	movlw	0
  6091  002416  21B8               	addwfc	(??_ipv4_handleNewPacket+1)& (0+255),w,b
  6092  002418  6FBA               	movwf	(ipv4_handleNewPacket@headerField+1)& (0+255),b
  6093                           
  6094                           ; BSR set to: 0
  6095                           ;ipv4.c: 213: ip = ipv4_parseHeader(&headerField);
  6096  00241A  0EB9               	movlw	low ipv4_handleNewPacket@headerField
  6097  00241C  6F74               	movwf	ipv4_parseHeader@field& (0+255),b
  6098  00241E  0E00               	movlw	high ipv4_handleNewPacket@headerField
  6099  002420  6F75               	movwf	(ipv4_parseHeader@field+1)& (0+255),b
  6100  002422  ECE8  F00E         	call	_ipv4_parseHeader	;wreg free
  6101  002426  EE20  F0C2         	lfsr	2,ipv4_handleNewPacket@ip
  6102  00242A  0E16               	movlw	22
  6103  00242C                     u10651:
  6104  00242C  CFEB FFDB          	movff	plusw0,plusw2
  6105  002430  06E8               	decf	wreg,f,c
  6106  002432  E2FC               	bc	u10651
  6107                           
  6108                           ;ipv4.c: 214: UARTTransmitText("[");
  6109  002434  0ECB               	movlw	low (STR_62+3)
  6110  002436  0100               	movlb	0	; () banked
  6111  002438  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6112  00243A  0E7F               	movlw	high (STR_62+3)
  6113  00243C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6114  00243E  EC7A  F021         	call	_UARTTransmitText	;wreg free
  6115                           
  6116                           ;ipv4.c: 215: UARTTransmitText(ipAdressToString(ip.source));
  6117  002442  C0D1  F073         	movff	ipv4_handleNewPacket@ip+15,ipAdressToString@ip
  6118  002446  C0D2  F074         	movff	ipv4_handleNewPacket@ip+16,ipAdressToString@ip+1
  6119  00244A  C0D3  F075         	movff	ipv4_handleNewPacket@ip+17,ipAdressToString@ip+2
  6120  00244E  C0D4  F076         	movff	ipv4_handleNewPacket@ip+18,ipAdressToString@ip+3
  6121  002452  EC0D  F010         	call	_ipAdressToString	;wreg free
  6122  002456  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  6123  00245A  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  6124  00245E  EC7A  F021         	call	_UARTTransmitText	;wreg free
  6125                           
  6126                           ;ipv4.c: 216: UARTTransmitText(" -> ");
  6127  002462  0EC3               	movlw	low STR_89
  6128  002464  0100               	movlb	0	; () banked
  6129  002466  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6130  002468  0E7F               	movlw	high STR_89
  6131  00246A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6132  00246C  EC7A  F021         	call	_UARTTransmitText	;wreg free
  6133                           
  6134                           ;ipv4.c: 217: UARTTransmitText(ipAdressToString(ip.destination));
  6135  002470  C0D5  F073         	movff	ipv4_handleNewPacket@ip+19,ipAdressToString@ip
  6136  002474  C0D6  F074         	movff	ipv4_handleNewPacket@ip+20,ipAdressToString@ip+1
  6137  002478  C0D7  F075         	movff	ipv4_handleNewPacket@ip+21,ipAdressToString@ip+2
  6138  00247C  C0D8  F076         	movff	ipv4_handleNewPacket@ip+22,ipAdressToString@ip+3
  6139  002480  EC0D  F010         	call	_ipAdressToString	;wreg free
  6140  002484  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  6141  002488  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  6142  00248C  EC7A  F021         	call	_UARTTransmitText	;wreg free
  6143                           
  6144                           ;ipv4.c: 218: UARTTransmitText("][");
  6145  002490  0EF7               	movlw	low STR_13
  6146  002492  0100               	movlb	0	; () banked
  6147  002494  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6148  002496  0E7F               	movlw	high STR_13
  6149  002498  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6150  00249A  EC7A  F021         	call	_UARTTransmitText	;wreg free
  6151                           
  6152                           ;ipv4.c: 219: UARTTransmitText((ipProtocolToString(ip.protocol)));
  6153  00249E  0100               	movlb	0	; () banked
  6154  0024A0  51CE               	movf	(ipv4_handleNewPacket@ip+12)& (0+255),w,b
  6155  0024A2  ECBE  F022         	call	_ipProtocolToString
  6156  0024A6  C060  F098         	movff	?_ipProtocolToString,UARTTransmitText@str
  6157  0024AA  C061  F099         	movff	?_ipProtocolToString+1,UARTTransmitText@str+1
  6158  0024AE  EC7A  F021         	call	_UARTTransmitText	;wreg free
  6159                           
  6160                           ;ipv4.c: 220: UARTTransmitText("][");
  6161  0024B2  0EF7               	movlw	low STR_13
  6162  0024B4  0100               	movlb	0	; () banked
  6163  0024B6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6164  0024B8  0E7F               	movlw	high STR_13
  6165  0024BA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6166  0024BC  EC7A  F021         	call	_UARTTransmitText	;wreg free
  6167                           
  6168                           ;ipv4.c: 221: UARTTransmitText(intToString(ip.totalLength));
  6169  0024C0  C0C6  F084         	movff	ipv4_handleNewPacket@ip+4,intToString@val
  6170  0024C4  C0C7  F085         	movff	ipv4_handleNewPacket@ip+5,intToString@val+1
  6171  0024C8  0100               	movlb	0	; () banked
  6172  0024CA  6B86               	clrf	(intToString@val+2)& (0+255),b
  6173  0024CC  6B87               	clrf	(intToString@val+3)& (0+255),b
  6174  0024CE  EC30  F024         	call	_intToString	;wreg free
  6175  0024D2  C084  F098         	movff	?_intToString,UARTTransmitText@str
  6176  0024D6  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  6177  0024DA  EC7A  F021         	call	_UARTTransmitText	;wreg free
  6178                           
  6179                           ;ipv4.c: 222: UARTTransmitText("][");
  6180  0024DE  0EF7               	movlw	low STR_13
  6181  0024E0  0100               	movlb	0	; () banked
  6182  0024E2  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6183  0024E4  0E7F               	movlw	high STR_13
  6184  0024E6  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6185  0024E8  EC7A  F021         	call	_UARTTransmitText	;wreg free
  6186                           
  6187                           ;ipv4.c: 223: UARTTransmitText(intToString(ip.version));
  6188  0024EC  0100               	movlb	0	; () banked
  6189  0024EE  51C2               	movf	ipv4_handleNewPacket@ip& (0+255),w,b
  6190  0024F0  6F84               	movwf	intToString@val& (0+255),b
  6191  0024F2  6B85               	clrf	(intToString@val+1)& (0+255),b
  6192  0024F4  6B86               	clrf	(intToString@val+2)& (0+255),b
  6193  0024F6  6B87               	clrf	(intToString@val+3)& (0+255),b
  6194  0024F8  EC30  F024         	call	_intToString	;wreg free
  6195  0024FC  C084  F098         	movff	?_intToString,UARTTransmitText@str
  6196  002500  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  6197  002504  EC7A  F021         	call	_UARTTransmitText	;wreg free
  6198                           
  6199                           ;ipv4.c: 224: UARTTransmitText(", ");
  6200  002508  0E43               	movlw	low (STR_37+17)
  6201  00250A  0100               	movlb	0	; () banked
  6202  00250C  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6203  00250E  0E7E               	movlw	high (STR_37+17)
  6204  002510  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6205  002512  EC7A  F021         	call	_UARTTransmitText	;wreg free
  6206                           
  6207                           ;ipv4.c: 225: UARTTransmitText(intToString(ip.headerLength));
  6208  002516  0100               	movlb	0	; () banked
  6209  002518  51C3               	movf	(ipv4_handleNewPacket@ip+1)& (0+255),w,b
  6210  00251A  6F84               	movwf	intToString@val& (0+255),b
  6211  00251C  6B85               	clrf	(intToString@val+1)& (0+255),b
  6212  00251E  6B86               	clrf	(intToString@val+2)& (0+255),b
  6213  002520  6B87               	clrf	(intToString@val+3)& (0+255),b
  6214  002522  EC30  F024         	call	_intToString	;wreg free
  6215  002526  C084  F098         	movff	?_intToString,UARTTransmitText@str
  6216  00252A  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  6217  00252E  EC7A  F021         	call	_UARTTransmitText	;wreg free
  6218                           
  6219                           ;ipv4.c: 226: UARTTransmitText("]");
  6220  002532  0EFB               	movlw	low (STR_19+1)
  6221  002534  0100               	movlb	0	; () banked
  6222  002536  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6223  002538  0E7F               	movlw	high (STR_19+1)
  6224  00253A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6225  00253C  EC7A  F021         	call	_UARTTransmitText	;wreg free
  6226                           
  6227                           ;ipv4.c: 227: if (!ipv4_checkHeaderChecksum(&ip))
  6228  002540  0EC2               	movlw	low ipv4_handleNewPacket@ip
  6229  002542  0100               	movlb	0	; () banked
  6230  002544  6F9A               	movwf	ipv4_checkHeaderChecksum@header& (0+255),b
  6231  002546  0E00               	movlw	high ipv4_handleNewPacket@ip
  6232  002548  6F9B               	movwf	(ipv4_checkHeaderChecksum@header+1)& (0+255),b
  6233  00254A  ECEB  F019         	call	_ipv4_checkHeaderChecksum	;wreg free
  6234  00254E  0100               	movlb	0	; () banked
  6235  002550  B0D8               	btfsc	status,0,c
  6236  002552  0012               	return	
  6237                           
  6238                           ; BSR set to: 0
  6239                           ;ipv4.c: 228: UARTTransmitText("[INVALID CHECKSUM]");
  6240  002554  0E5A               	movlw	low STR_95
  6241  002556  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6242  002558  0E7E               	movlw	high STR_95
  6243  00255A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6244  00255C  EC7A  F021         	call	_UARTTransmitText	;wreg free
  6245  002560  0012               	return	
  6246  002562                     __end_of_ipv4_handleNewPacket:
  6247                           	opt stack 0
  6248                           tblptru	equ	0xFF8
  6249                           tblptrh	equ	0xFF7
  6250                           tblptrl	equ	0xFF6
  6251                           tablat	equ	0xFF5
  6252                           intcon	equ	0xFF2
  6253                           intcon3	equ	0xFF0
  6254                           indf0	equ	0xFEF
  6255                           postinc0	equ	0xFEE
  6256                           plusw0	equ	0xFEB
  6257                           fsr0h	equ	0xFEA
  6258                           fsr0l	equ	0xFE9
  6259                           wreg	equ	0xFE8
  6260                           postinc1	equ	0xFE6
  6261                           postdec1	equ	0xFE5
  6262                           plusw1	equ	0xFE3
  6263                           fsr1h	equ	0xFE2
  6264                           fsr1l	equ	0xFE1
  6265                           indf2	equ	0xFDF
  6266                           postinc2	equ	0xFDE
  6267                           postdec2	equ	0xFDD
  6268                           plusw2	equ	0xFDB
  6269                           fsr2h	equ	0xFDA
  6270                           fsr2l	equ	0xFD9
  6271                           status	equ	0xFD8
  6272                           
  6273 ;; *************** function _ipv4_parseHeader *****************
  6274 ;; Defined at:
  6275 ;;		line 141 in file "src/stack/protocols/ipv4.c"
  6276 ;; Parameters:    Size  Location     Type
  6277 ;;  field           2   20[BANK0 ] PTR struct memoryField
  6278 ;;		 -> ipv4_handleNewPacket@headerField(9), 
  6279 ;; Auto vars:     Size  Location     Type
  6280 ;;  i               1   45[BANK0 ] unsigned char 
  6281 ;;  i               1   44[BANK0 ] unsigned char 
  6282 ;;  ip             23   47[BANK0 ] struct ipv4_header
  6283 ;;  temp            1   46[BANK0 ] unsigned char 
  6284 ;; Return value:  Size  Location     Type
  6285 ;;                  23   20[BANK0 ] struct ipv4_header
  6286 ;; Registers used:
  6287 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6288 ;; Tracked objects:
  6289 ;;		On entry : 0/0
  6290 ;;		On exit  : 0/0
  6291 ;;		Unchanged: 0/0
  6292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6293 ;;      Params:         0      23       0       0       0       0       0       0       0
  6294 ;;      Locals:         0      26       0       0       0       0       0       0       0
  6295 ;;      Temps:          0       1       0       0       0       0       0       0       0
  6296 ;;      Totals:         0      50       0       0       0       0       0       0       0
  6297 ;;Total ram usage:       50 bytes
  6298 ;; Hardware stack levels used:    1
  6299 ;; Hardware stack levels required when called:    8
  6300 ;; This function calls:
  6301 ;;		_ethernetController_streamFromRXBuffer
  6302 ;; This function is called by:
  6303 ;;		_ipv4_handleNewPacket
  6304 ;; This function uses a non-reentrant model
  6305 ;;
  6306                           
  6307                           	psect	text13
  6308  001DD0                     __ptext13:
  6309                           	opt stack 0
  6310  001DD0                     _ipv4_parseHeader:
  6311                           	opt stack 19
  6312                           
  6313                           ;ipv4.c: 142: ipv4_header_t ip;
  6314                           ;ipv4.c: 143: uint8_t temp;
  6315                           ;ipv4.c: 145: ethernetController_streamFromRXBuffer(0, field->start);
  6316                           
  6317                           ;incstack = 0
  6318  001DD0  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6319  001DD4  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6320  001DD8  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6321  001DDC  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6322  001DE0  0E00               	movlw	0
  6323  001DE2  ECF4  F020         	call	_ethernetController_streamFromRXBuffer
  6324                           
  6325                           ;ipv4.c: 147: temp = ethernetController_streamFromRXBuffer(1, field->start);
  6326  001DE6  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6327  001DEA  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6328  001DEE  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6329  001DF2  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6330  001DF6  0E01               	movlw	1
  6331  001DF8  ECF4  F020         	call	_ethernetController_streamFromRXBuffer
  6332  001DFC  0100               	movlb	0	; () banked
  6333  001DFE  6F8E               	movwf	ipv4_parseHeader@temp& (0+255),b
  6334                           
  6335                           ; BSR set to: 0
  6336                           ;ipv4.c: 148: ip.version = (temp & 0xf0) >> 4;
  6337  001E00  398E               	swapf	ipv4_parseHeader@temp& (0+255),w,b
  6338  001E02  0B0F               	andlw	15
  6339  001E04  0B0F               	andlw	15
  6340  001E06  6F8F               	movwf	ipv4_parseHeader@ip& (0+255),b
  6341                           
  6342                           ; BSR set to: 0
  6343                           ;ipv4.c: 149: ip.headerLength = temp & 0x0f;
  6344  001E08  518E               	movf	ipv4_parseHeader@temp& (0+255),w,b
  6345  001E0A  0B0F               	andlw	15
  6346  001E0C  6F90               	movwf	(ipv4_parseHeader@ip+1)& (0+255),b
  6347                           
  6348                           ;ipv4.c: 151: temp = ethernetController_streamFromRXBuffer(1, field->start);
  6349  001E0E  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6350  001E12  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6351  001E16  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6352  001E1A  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6353  001E1E  0E01               	movlw	1
  6354  001E20  ECF4  F020         	call	_ethernetController_streamFromRXBuffer
  6355  001E24  0100               	movlb	0	; () banked
  6356  001E26  6F8E               	movwf	ipv4_parseHeader@temp& (0+255),b
  6357                           
  6358                           ; BSR set to: 0
  6359                           ;ipv4.c: 152: ip.dscp = (temp & 0x1f);
  6360  001E28  518E               	movf	ipv4_parseHeader@temp& (0+255),w,b
  6361  001E2A  0B1F               	andlw	31
  6362  001E2C  6F91               	movwf	(ipv4_parseHeader@ip+2)& (0+255),b
  6363                           
  6364                           ; BSR set to: 0
  6365                           ;ipv4.c: 153: ip.ecn = (temp & 0xC0) >> 6;
  6366  001E2E  458E               	rlncf	ipv4_parseHeader@temp& (0+255),w,b
  6367  001E30  46E8               	rlncf	wreg,f,c
  6368  001E32  0B03               	andlw	3
  6369  001E34  0B03               	andlw	3
  6370  001E36  6F92               	movwf	(ipv4_parseHeader@ip+3)& (0+255),b
  6371                           
  6372                           ;ipv4.c: 155: ip.totalLength = (ethernetController_streamFromRXBuffer(1, field->start) <
      +                          < 8);
  6373  001E38  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6374  001E3C  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6375  001E40  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6376  001E44  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6377  001E48  0E01               	movlw	1
  6378  001E4A  ECF4  F020         	call	_ethernetController_streamFromRXBuffer
  6379  001E4E  0100               	movlb	0	; () banked
  6380  001E50  6F94               	movwf	(ipv4_parseHeader@ip+5)& (0+255),b
  6381  001E52  6B93               	clrf	(ipv4_parseHeader@ip+4)& (0+255),b
  6382                           
  6383                           ;ipv4.c: 156: ip.totalLength |= ethernetController_streamFromRXBuffer(1, field->start);
  6384  001E54  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6385  001E58  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6386  001E5C  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6387  001E60  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6388  001E64  0E01               	movlw	1
  6389  001E66  ECF4  F020         	call	_ethernetController_streamFromRXBuffer
  6390  001E6A  0100               	movlb	0	; () banked
  6391  001E6C  6F8B               	movwf	??_ipv4_parseHeader& (0+255),b
  6392  001E6E  518B               	movf	??_ipv4_parseHeader& (0+255),w,b
  6393  001E70  1393               	iorwf	(ipv4_parseHeader@ip+4)& (0+255),f,b
  6394                           
  6395                           ;ipv4.c: 158: ip.identification = (ethernetController_streamFromRXBuffer(1, field->start
      +                          ) << 8);
  6396  001E72  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6397  001E76  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6398  001E7A  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6399  001E7E  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6400  001E82  0E01               	movlw	1
  6401  001E84  ECF4  F020         	call	_ethernetController_streamFromRXBuffer
  6402  001E88  0100               	movlb	0	; () banked
  6403  001E8A  6F96               	movwf	(ipv4_parseHeader@ip+7)& (0+255),b
  6404  001E8C  6B95               	clrf	(ipv4_parseHeader@ip+6)& (0+255),b
  6405                           
  6406                           ;ipv4.c: 159: ip.identification |= ethernetController_streamFromRXBuffer(1, field->start
      +                          );
  6407  001E8E  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6408  001E92  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6409  001E96  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6410  001E9A  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6411  001E9E  0E01               	movlw	1
  6412  001EA0  ECF4  F020         	call	_ethernetController_streamFromRXBuffer
  6413  001EA4  0100               	movlb	0	; () banked
  6414  001EA6  6F8B               	movwf	??_ipv4_parseHeader& (0+255),b
  6415  001EA8  518B               	movf	??_ipv4_parseHeader& (0+255),w,b
  6416  001EAA  1395               	iorwf	(ipv4_parseHeader@ip+6)& (0+255),f,b
  6417                           
  6418                           ;ipv4.c: 161: temp = ethernetController_streamFromRXBuffer(1, field->start);
  6419  001EAC  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6420  001EB0  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6421  001EB4  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6422  001EB8  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6423  001EBC  0E01               	movlw	1
  6424  001EBE  ECF4  F020         	call	_ethernetController_streamFromRXBuffer
  6425  001EC2  0100               	movlb	0	; () banked
  6426  001EC4  6F8E               	movwf	ipv4_parseHeader@temp& (0+255),b
  6427                           
  6428                           ; BSR set to: 0
  6429                           ;ipv4.c: 162: ip.flags = ((temp & 0xC0) >> 6);
  6430  001EC6  458E               	rlncf	ipv4_parseHeader@temp& (0+255),w,b
  6431  001EC8  46E8               	rlncf	wreg,f,c
  6432  001ECA  0B03               	andlw	3
  6433  001ECC  0B03               	andlw	3
  6434  001ECE  6F97               	movwf	(ipv4_parseHeader@ip+8)& (0+255),b
  6435                           
  6436                           ; BSR set to: 0
  6437                           ;ipv4.c: 163: ip.fragmentOffset = ((temp & 0x1f) << 8);
  6438  001ED0  518E               	movf	ipv4_parseHeader@temp& (0+255),w,b
  6439  001ED2  0B1F               	andlw	31
  6440  001ED4  6F99               	movwf	(ipv4_parseHeader@ip+10)& (0+255),b
  6441  001ED6  6B98               	clrf	(ipv4_parseHeader@ip+9)& (0+255),b
  6442                           
  6443                           ;ipv4.c: 165: ip.fragmentOffset |= ethernetController_streamFromRXBuffer(1, field->start
      +                          );
  6444  001ED8  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6445  001EDC  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6446  001EE0  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6447  001EE4  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6448  001EE8  0E01               	movlw	1
  6449  001EEA  ECF4  F020         	call	_ethernetController_streamFromRXBuffer
  6450  001EEE  0100               	movlb	0	; () banked
  6451  001EF0  6F8B               	movwf	??_ipv4_parseHeader& (0+255),b
  6452  001EF2  518B               	movf	??_ipv4_parseHeader& (0+255),w,b
  6453  001EF4  1398               	iorwf	(ipv4_parseHeader@ip+9)& (0+255),f,b
  6454                           
  6455                           ;ipv4.c: 167: ip.timeToLive = ethernetController_streamFromRXBuffer(1, field->start);
  6456  001EF6  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6457  001EFA  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6458  001EFE  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6459  001F02  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6460  001F06  0E01               	movlw	1
  6461  001F08  ECF4  F020         	call	_ethernetController_streamFromRXBuffer
  6462  001F0C  0100               	movlb	0	; () banked
  6463  001F0E  6F9A               	movwf	(ipv4_parseHeader@ip+11)& (0+255),b
  6464                           
  6465                           ;ipv4.c: 169: ip.protocol = ethernetController_streamFromRXBuffer(1, field->start);
  6466  001F10  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6467  001F14  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6468  001F18  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6469  001F1C  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6470  001F20  0E01               	movlw	1
  6471  001F22  ECF4  F020         	call	_ethernetController_streamFromRXBuffer
  6472  001F26  0100               	movlb	0	; () banked
  6473  001F28  6F9B               	movwf	(ipv4_parseHeader@ip+12)& (0+255),b
  6474                           
  6475                           ;ipv4.c: 171: ip.checksum = (ethernetController_streamFromRXBuffer(1, field->start) << 8
      +                          );
  6476  001F2A  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6477  001F2E  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6478  001F32  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6479  001F36  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6480  001F3A  0E01               	movlw	1
  6481  001F3C  ECF4  F020         	call	_ethernetController_streamFromRXBuffer
  6482  001F40  0100               	movlb	0	; () banked
  6483  001F42  6F9D               	movwf	(ipv4_parseHeader@ip+14)& (0+255),b
  6484  001F44  6B9C               	clrf	(ipv4_parseHeader@ip+13)& (0+255),b
  6485                           
  6486                           ;ipv4.c: 172: ip.checksum |= ethernetController_streamFromRXBuffer(1, field->start);
  6487  001F46  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6488  001F4A  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6489  001F4E  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6490  001F52  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6491  001F56  0E01               	movlw	1
  6492  001F58  ECF4  F020         	call	_ethernetController_streamFromRXBuffer
  6493  001F5C  0100               	movlb	0	; () banked
  6494  001F5E  6F8B               	movwf	??_ipv4_parseHeader& (0+255),b
  6495  001F60  518B               	movf	??_ipv4_parseHeader& (0+255),w,b
  6496  001F62  139C               	iorwf	(ipv4_parseHeader@ip+13)& (0+255),f,b
  6497                           
  6498                           ; BSR set to: 0
  6499                           ;ipv4.c: 174: for (uint8_t i = 0; i < 4; i++)
  6500  001F64  0E00               	movlw	0
  6501  001F66  6F8C               	movwf	ipv4_parseHeader@i& (0+255),b
  6502  001F68                     l8840:
  6503                           
  6504                           ; BSR set to: 0
  6505  001F68  0E03               	movlw	3
  6506  001F6A  658C               	cpfsgt	ipv4_parseHeader@i& (0+255),b
  6507  001F6C  D001               	goto	l1060
  6508  001F6E  D01D               	goto	u10390
  6509  001F70                     l1060:
  6510                           
  6511                           ; BSR set to: 0
  6512                           ;ipv4.c: 175: ip.source.address[i] = ethernetController_streamFromRXBuffer(1, field->sta
      +                          rt);
  6513                           
  6514                           ; BSR set to: 0
  6515  001F70  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6516  001F74  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6517  001F78  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6518  001F7C  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6519  001F80  0E01               	movlw	1
  6520  001F82  ECF4  F020         	call	_ethernetController_streamFromRXBuffer
  6521  001F86  0100               	movlb	0	; () banked
  6522  001F88  6F8B               	movwf	??_ipv4_parseHeader& (0+255),b
  6523  001F8A  518C               	movf	ipv4_parseHeader@i& (0+255),w,b
  6524  001F8C  0D01               	mullw	1
  6525  001F8E  0E0F               	movlw	15
  6526  001F90  26F3               	addwf	prodl,f,c
  6527  001F92  0E00               	movlw	0
  6528  001F94  22F4               	addwfc	prodh,f,c
  6529  001F96  0E8F               	movlw	low ipv4_parseHeader@ip
  6530  001F98  24F3               	addwf	prodl,w,c
  6531  001F9A  6ED9               	movwf	fsr2l,c
  6532  001F9C  0E00               	movlw	high ipv4_parseHeader@ip
  6533  001F9E  20F4               	addwfc	prodh,w,c
  6534  001FA0  6EDA               	movwf	fsr2h,c
  6535  001FA2  C08B  FFDF         	movff	??_ipv4_parseHeader,indf2
  6536                           
  6537                           ; BSR set to: 0
  6538  001FA6  2B8C               	incf	ipv4_parseHeader@i& (0+255),f,b
  6539  001FA8  D7DF               	goto	l8840
  6540  001FAA                     u10390:
  6541                           
  6542                           ; BSR set to: 0
  6543                           ;ipv4.c: 177: for (uint8_t i = 0; i < 4; i++)
  6544                           
  6545                           ; BSR set to: 0
  6546  001FAA  0E00               	movlw	0
  6547  001FAC  6F8D               	movwf	ipv4_parseHeader@i_3580& (0+255),b
  6548  001FAE                     l8852:
  6549                           
  6550                           ; BSR set to: 0
  6551  001FAE  0E03               	movlw	3
  6552  001FB0  658D               	cpfsgt	ipv4_parseHeader@i_3580& (0+255),b
  6553  001FB2  D001               	goto	l1062
  6554  001FB4  D01D               	goto	u10410
  6555  001FB6                     l1062:
  6556                           
  6557                           ; BSR set to: 0
  6558                           ;ipv4.c: 178: ip.destination.address[i] = ethernetController_streamFromRXBuffer(1, field
      +                          ->start);
  6559                           
  6560                           ; BSR set to: 0
  6561  001FB6  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6562  001FBA  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6563  001FBE  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6564  001FC2  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6565  001FC6  0E01               	movlw	1
  6566  001FC8  ECF4  F020         	call	_ethernetController_streamFromRXBuffer
  6567  001FCC  0100               	movlb	0	; () banked
  6568  001FCE  6F8B               	movwf	??_ipv4_parseHeader& (0+255),b
  6569  001FD0  518D               	movf	ipv4_parseHeader@i_3580& (0+255),w,b
  6570  001FD2  0D01               	mullw	1
  6571  001FD4  0E13               	movlw	19
  6572  001FD6  26F3               	addwf	prodl,f,c
  6573  001FD8  0E00               	movlw	0
  6574  001FDA  22F4               	addwfc	prodh,f,c
  6575  001FDC  0E8F               	movlw	low ipv4_parseHeader@ip
  6576  001FDE  24F3               	addwf	prodl,w,c
  6577  001FE0  6ED9               	movwf	fsr2l,c
  6578  001FE2  0E00               	movlw	high ipv4_parseHeader@ip
  6579  001FE4  20F4               	addwfc	prodh,w,c
  6580  001FE6  6EDA               	movwf	fsr2h,c
  6581  001FE8  C08B  FFDF         	movff	??_ipv4_parseHeader,indf2
  6582                           
  6583                           ; BSR set to: 0
  6584  001FEC  2B8D               	incf	ipv4_parseHeader@i_3580& (0+255),f,b
  6585  001FEE  D7DF               	goto	l8852
  6586  001FF0                     u10410:
  6587                           
  6588                           ; BSR set to: 0
  6589                           ;ipv4.c: 180: ethernetController_streamFromRXBuffer(2, field->start);
  6590                           
  6591                           ; BSR set to: 0
  6592  001FF0  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6593  001FF4  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6594  001FF8  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6595  001FFC  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6596  002000  0E02               	movlw	2
  6597  002002  ECF4  F020         	call	_ethernetController_streamFromRXBuffer
  6598                           
  6599                           ;ipv4.c: 182: return ip;
  6600  002006  EE20  F08F         	lfsr	2,ipv4_parseHeader@ip
  6601  00200A  EE00  F074         	lfsr	0,?_ipv4_parseHeader
  6602  00200E  0E16               	movlw	22
  6603  002010                     u10421:
  6604  002010  CFDB FFEB          	movff	plusw2,plusw0
  6605  002014  06E8               	decf	wreg,f,c
  6606  002016  E2FC               	bc	u10421
  6607  002018  0012               	return	
  6608  00201A                     __end_of_ipv4_parseHeader:
  6609                           	opt stack 0
  6610                           tblptru	equ	0xFF8
  6611                           tblptrh	equ	0xFF7
  6612                           tblptrl	equ	0xFF6
  6613                           tablat	equ	0xFF5
  6614                           prodh	equ	0xFF4
  6615                           prodl	equ	0xFF3
  6616                           intcon	equ	0xFF2
  6617                           intcon3	equ	0xFF0
  6618                           indf0	equ	0xFEF
  6619                           postinc0	equ	0xFEE
  6620                           plusw0	equ	0xFEB
  6621                           fsr0h	equ	0xFEA
  6622                           fsr0l	equ	0xFE9
  6623                           wreg	equ	0xFE8
  6624                           postinc1	equ	0xFE6
  6625                           postdec1	equ	0xFE5
  6626                           plusw1	equ	0xFE3
  6627                           fsr1h	equ	0xFE2
  6628                           fsr1l	equ	0xFE1
  6629                           indf2	equ	0xFDF
  6630                           postinc2	equ	0xFDE
  6631                           postdec2	equ	0xFDD
  6632                           plusw2	equ	0xFDB
  6633                           fsr2h	equ	0xFDA
  6634                           fsr2l	equ	0xFD9
  6635                           status	equ	0xFD8
  6636                           
  6637 ;; *************** function _ipv4_checkHeaderChecksum *****************
  6638 ;; Defined at:
  6639 ;;		line 185 in file "src/stack/protocols/ipv4.c"
  6640 ;; Parameters:    Size  Location     Type
  6641 ;;  header          2   58[BANK0 ] PTR struct ipv4_header
  6642 ;;		 -> ipv4_handleNewPacket@ip(23), 
  6643 ;; Auto vars:     Size  Location     Type
  6644 ;;  testHeader     23   62[BANK0 ] struct ipv4_header
  6645 ;; Return value:  Size  Location     Type
  6646 ;;		None               void
  6647 ;; Registers used:
  6648 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6649 ;; Tracked objects:
  6650 ;;		On entry : 0/0
  6651 ;;		On exit  : 0/0
  6652 ;;		Unchanged: 0/0
  6653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6654 ;;      Params:         0       2       0       0       0       0       0       0       0
  6655 ;;      Locals:         0      23       0       0       0       0       0       0       0
  6656 ;;      Temps:          0       2       0       0       0       0       0       0       0
  6657 ;;      Totals:         0      27       0       0       0       0       0       0       0
  6658 ;;Total ram usage:       27 bytes
  6659 ;; Hardware stack levels used:    1
  6660 ;; Hardware stack levels required when called:    6
  6661 ;; This function calls:
  6662 ;;		_UARTTransmitText
  6663 ;;		_hexToString
  6664 ;;		_ipv4_calculateHeaderChecksum
  6665 ;; This function is called by:
  6666 ;;		_ipv4_handleNewPacket
  6667 ;; This function uses a non-reentrant model
  6668 ;;
  6669                           
  6670                           	psect	text14
  6671  0033D6                     __ptext14:
  6672                           	opt stack 0
  6673  0033D6                     _ipv4_checkHeaderChecksum:
  6674                           	opt stack 21
  6675                           
  6676                           ;ipv4.c: 186: ipv4_header_t testHeader;
  6677                           ;ipv4.c: 187: testHeader = *header;
  6678                           
  6679                           ;incstack = 0
  6680  0033D6  C09A  FFD9         	movff	ipv4_checkHeaderChecksum@header,fsr2l
  6681  0033DA  C09B  FFDA         	movff	ipv4_checkHeaderChecksum@header+1,fsr2h
  6682  0033DE  EE10  F09E         	lfsr	1,ipv4_checkHeaderChecksum@testHeader
  6683  0033E2  0E16               	movlw	22
  6684  0033E4                     u10431:
  6685  0033E4  CFDB FFE3          	movff	plusw2,plusw1
  6686  0033E8  06E8               	decf	wreg,f,c
  6687  0033EA  E2FC               	bc	u10431
  6688                           
  6689                           ;ipv4.c: 188: testHeader.checksum = 0x0000;
  6690  0033EC  0E00               	movlw	0
  6691  0033EE  0100               	movlb	0	; () banked
  6692  0033F0  6FAC               	movwf	(ipv4_checkHeaderChecksum@testHeader+14)& (0+255),b
  6693  0033F2  0E00               	movlw	0
  6694  0033F4  6FAB               	movwf	(ipv4_checkHeaderChecksum@testHeader+13)& (0+255),b
  6695                           
  6696                           ; BSR set to: 0
  6697                           ;ipv4.c: 189: ipv4_calculateHeaderChecksum(&testHeader);
  6698  0033F6  0E9E               	movlw	low ipv4_checkHeaderChecksum@testHeader
  6699  0033F8  6F60               	movwf	ipv4_calculateHeaderChecksum@header& (0+255),b
  6700  0033FA  0E00               	movlw	high ipv4_checkHeaderChecksum@testHeader
  6701  0033FC  6F61               	movwf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),b
  6702  0033FE  ECC6  F00A         	call	_ipv4_calculateHeaderChecksum	;wreg free
  6703                           
  6704                           ;ipv4.c: 190: if (testHeader.checksum == header->checksum) {
  6705  003402  0100               	movlb	0	; () banked
  6706  003404  EE20 F00D          	lfsr	2,13
  6707  003408  519A               	movf	ipv4_checkHeaderChecksum@header& (0+255),w,b
  6708  00340A  26D9               	addwf	fsr2l,f,c
  6709  00340C  519B               	movf	(ipv4_checkHeaderChecksum@header+1)& (0+255),w,b
  6710  00340E  22DA               	addwfc	fsr2h,f,c
  6711  003410  50DE               	movf	postinc2,w,c
  6712  003412  19AB               	xorwf	(ipv4_checkHeaderChecksum@testHeader+13)& (0+255),w,b
  6713  003414  E106               	bnz	l8880
  6714  003416  50DE               	movf	postinc2,w,c
  6715  003418  19AC               	xorwf	(ipv4_checkHeaderChecksum@testHeader+14)& (0+255),w,b
  6716  00341A  A4D8               	btfss	status,2,c
  6717  00341C  D002               	goto	l1067
  6718                           
  6719                           ; BSR set to: 0
  6720                           ;ipv4.c: 191: return 1;
  6721  00341E  80D8               	bsf	status,0,c
  6722                           
  6723                           ; BSR set to: 0
  6724  003420  0012               	return	
  6725  003422                     l1067:
  6726  003422                     l8880:
  6727                           
  6728                           ; BSR set to: 0
  6729                           ;ipv4.c: 192: }
  6730                           ;ipv4.c: 193: UARTTransmitText("[Expected ");
  6731  003422  0E64               	movlw	low STR_85
  6732  003424  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6733  003426  0E7F               	movlw	high STR_85
  6734  003428  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6735  00342A  EC7A  F021         	call	_UARTTransmitText	;wreg free
  6736                           
  6737                           ;ipv4.c: 194: UARTTransmitText(hexToString(testHeader.checksum));
  6738  00342E  C0AB  F061         	movff	ipv4_checkHeaderChecksum@testHeader+13,hexToString@val
  6739  003432  C0AC  F062         	movff	ipv4_checkHeaderChecksum@testHeader+14,hexToString@val+1
  6740  003436  0100               	movlb	0	; () banked
  6741  003438  6B63               	clrf	(hexToString@val+2)& (0+255),b
  6742  00343A  6B64               	clrf	(hexToString@val+3)& (0+255),b
  6743  00343C  EC1C  F018         	call	_hexToString	;wreg free
  6744  003440  C061  F098         	movff	?_hexToString,UARTTransmitText@str
  6745  003444  C062  F099         	movff	?_hexToString+1,UARTTransmitText@str+1
  6746  003448  EC7A  F021         	call	_UARTTransmitText	;wreg free
  6747                           
  6748                           ;ipv4.c: 195: UARTTransmitText(", got ");
  6749  00344C  0EA8               	movlw	low STR_86
  6750  00344E  0100               	movlb	0	; () banked
  6751  003450  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6752  003452  0E7F               	movlw	high STR_86
  6753  003454  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6754  003456  EC7A  F021         	call	_UARTTransmitText	;wreg free
  6755                           
  6756                           ;ipv4.c: 196: UARTTransmitText(hexToString(header->checksum));
  6757  00345A  0100               	movlb	0	; () banked
  6758  00345C  EE20 F00D          	lfsr	2,13
  6759  003460  519A               	movf	ipv4_checkHeaderChecksum@header& (0+255),w,b
  6760  003462  26D9               	addwf	fsr2l,f,c
  6761  003464  519B               	movf	(ipv4_checkHeaderChecksum@header+1)& (0+255),w,b
  6762  003466  22DA               	addwfc	fsr2h,f,c
  6763  003468  CFDE F09C          	movff	postinc2,??_ipv4_checkHeaderChecksum
  6764  00346C  CFDD F09D          	movff	postdec2,??_ipv4_checkHeaderChecksum+1
  6765  003470  C09C  F061         	movff	??_ipv4_checkHeaderChecksum,hexToString@val
  6766  003474  C09D  F062         	movff	??_ipv4_checkHeaderChecksum+1,hexToString@val+1
  6767  003478  6B63               	clrf	(hexToString@val+2)& (0+255),b
  6768  00347A  6B64               	clrf	(hexToString@val+3)& (0+255),b
  6769  00347C  EC1C  F018         	call	_hexToString	;wreg free
  6770  003480  C061  F098         	movff	?_hexToString,UARTTransmitText@str
  6771  003484  C062  F099         	movff	?_hexToString+1,UARTTransmitText@str+1
  6772  003488  EC7A  F021         	call	_UARTTransmitText	;wreg free
  6773                           
  6774                           ;ipv4.c: 197: UARTTransmitText("]");
  6775  00348C  0EFB               	movlw	low (STR_19+1)
  6776  00348E  0100               	movlb	0	; () banked
  6777  003490  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6778  003492  0E7F               	movlw	high (STR_19+1)
  6779  003494  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6780  003496  EC7A  F021         	call	_UARTTransmitText	;wreg free
  6781                           
  6782                           ;ipv4.c: 198: return 0;
  6783  00349A  90D8               	bcf	status,0,c
  6784  00349C  0012               	return	
  6785  00349E                     __end_of_ipv4_checkHeaderChecksum:
  6786                           	opt stack 0
  6787                           tblptru	equ	0xFF8
  6788                           tblptrh	equ	0xFF7
  6789                           tblptrl	equ	0xFF6
  6790                           tablat	equ	0xFF5
  6791                           prodh	equ	0xFF4
  6792                           prodl	equ	0xFF3
  6793                           intcon	equ	0xFF2
  6794                           intcon3	equ	0xFF0
  6795                           indf0	equ	0xFEF
  6796                           postinc0	equ	0xFEE
  6797                           plusw0	equ	0xFEB
  6798                           fsr0h	equ	0xFEA
  6799                           fsr0l	equ	0xFE9
  6800                           wreg	equ	0xFE8
  6801                           postinc1	equ	0xFE6
  6802                           postdec1	equ	0xFE5
  6803                           plusw1	equ	0xFE3
  6804                           fsr1h	equ	0xFE2
  6805                           fsr1l	equ	0xFE1
  6806                           indf2	equ	0xFDF
  6807                           postinc2	equ	0xFDE
  6808                           postdec2	equ	0xFDD
  6809                           plusw2	equ	0xFDB
  6810                           fsr2h	equ	0xFDA
  6811                           fsr2l	equ	0xFD9
  6812                           status	equ	0xFD8
  6813                           
  6814 ;; *************** function _ipv4_calculateHeaderChecksum *****************
  6815 ;; Defined at:
  6816 ;;		line 121 in file "src/stack/protocols/ipv4.c"
  6817 ;; Parameters:    Size  Location     Type
  6818 ;;  header          2    0[BANK0 ] PTR struct ipv4_header
  6819 ;;		 -> ipv4_checkHeaderChecksum@testHeader(23), 
  6820 ;; Auto vars:     Size  Location     Type
  6821 ;;  sum             4   14[BANK0 ] unsigned long 
  6822 ;; Return value:  Size  Location     Type
  6823 ;;                  1    wreg      void 
  6824 ;; Registers used:
  6825 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6826 ;; Tracked objects:
  6827 ;;		On entry : 0/0
  6828 ;;		On exit  : 0/0
  6829 ;;		Unchanged: 0/0
  6830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6831 ;;      Params:         0       2       0       0       0       0       0       0       0
  6832 ;;      Locals:         0       4       0       0       0       0       0       0       0
  6833 ;;      Temps:          0      12       0       0       0       0       0       0       0
  6834 ;;      Totals:         0      18       0       0       0       0       0       0       0
  6835 ;;Total ram usage:       18 bytes
  6836 ;; Hardware stack levels used:    1
  6837 ;; Hardware stack levels required when called:    4
  6838 ;; This function calls:
  6839 ;;		Nothing
  6840 ;; This function is called by:
  6841 ;;		_ipv4_checkHeaderChecksum
  6842 ;; This function uses a non-reentrant model
  6843 ;;
  6844                           
  6845                           	psect	text15
  6846  00158C                     __ptext15:
  6847                           	opt stack 0
  6848  00158C                     _ipv4_calculateHeaderChecksum:
  6849                           	opt stack 22
  6850                           
  6851                           ;ipv4.c: 123: uint32_t sum = 0;
  6852                           
  6853                           ;incstack = 0
  6854  00158C  0E00               	movlw	0
  6855  00158E  0100               	movlb	0	; () banked
  6856  001590  6F6E               	movwf	ipv4_calculateHeaderChecksum@sum& (0+255),b
  6857  001592  0E00               	movlw	0
  6858  001594  6F6F               	movwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),b
  6859  001596  0E00               	movlw	0
  6860  001598  6F70               	movwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),b
  6861  00159A  0E00               	movlw	0
  6862  00159C  6F71               	movwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),b
  6863                           
  6864                           ; BSR set to: 0
  6865                           ;ipv4.c: 124: sum = ((header->version << 12) | (header->headerLength << 8) | (header->ds
      +                          cp << 2) | (header->ecn))&0xffff;
  6866  00159E  EE20 F002          	lfsr	2,2
  6867  0015A2  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  6868  0015A4  26D9               	addwf	fsr2l,f,c
  6869  0015A6  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  6870  0015A8  22DA               	addwfc	fsr2h,f,c
  6871  0015AA  50DF               	movf	indf2,w,c
  6872  0015AC  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  6873  0015AE  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  6874  0015B0  90D8               	bcf	status,0,c
  6875  0015B2  3762               	rlcf	??_ipv4_calculateHeaderChecksum& (0+255),f,b
  6876  0015B4  3763               	rlcf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  6877  0015B6  90D8               	bcf	status,0,c
  6878  0015B8  3762               	rlcf	??_ipv4_calculateHeaderChecksum& (0+255),f,b
  6879  0015BA  3763               	rlcf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  6880  0015BC  EE20 F001          	lfsr	2,1
  6881  0015C0  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  6882  0015C2  26D9               	addwf	fsr2l,f,c
  6883  0015C4  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  6884  0015C6  22DA               	addwfc	fsr2h,f,c
  6885  0015C8  50DF               	movf	indf2,w,c
  6886  0015CA  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  6887  0015CC  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  6888  0015CE  6F66               	movwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  6889  0015D0  6B65               	clrf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  6890  0015D2  C060  FFD9         	movff	ipv4_calculateHeaderChecksum@header,fsr2l
  6891  0015D6  C061  FFDA         	movff	ipv4_calculateHeaderChecksum@header+1,fsr2h
  6892  0015DA  50DF               	movf	indf2,w,c
  6893  0015DC  6F67               	movwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),b
  6894  0015DE  6B68               	clrf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),b
  6895  0015E0  0E0C               	movlw	12
  6896  0015E2                     u9565:
  6897  0015E2  90D8               	bcf	status,0,c
  6898  0015E4  3767               	rlcf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),f,b
  6899  0015E6  3768               	rlcf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),f,b
  6900  0015E8  2EE8               	decfsz	wreg,f,c
  6901  0015EA  D7FB               	goto	u9565
  6902  0015EC  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  6903  0015EE  1367               	iorwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),f,b
  6904  0015F0  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  6905  0015F2  1368               	iorwf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),f,b
  6906  0015F4  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  6907  0015F6  1367               	iorwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),f,b
  6908  0015F8  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  6909  0015FA  1368               	iorwf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),f,b
  6910  0015FC  EE20 F003          	lfsr	2,3
  6911  001600  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  6912  001602  26D9               	addwf	fsr2l,f,c
  6913  001604  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  6914  001606  22DA               	addwfc	fsr2h,f,c
  6915  001608  50DF               	movf	indf2,w,c
  6916  00160A  6F69               	movwf	(??_ipv4_calculateHeaderChecksum+7)& (0+255),b
  6917  00160C  5169               	movf	(??_ipv4_calculateHeaderChecksum+7)& (0+255),w,b
  6918  00160E  1367               	iorwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),f,b
  6919  001610  0E00               	movlw	0
  6920  001612  1368               	iorwf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),f,b
  6921  001614  C067  F06E         	movff	??_ipv4_calculateHeaderChecksum+5,ipv4_calculateHeaderChecksum@sum
  6922  001618  C068  F06F         	movff	??_ipv4_calculateHeaderChecksum+6,ipv4_calculateHeaderChecksum@sum+1
  6923  00161C  6B70               	clrf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),b
  6924  00161E  6B71               	clrf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),b
  6925                           
  6926                           ; BSR set to: 0
  6927                           ;ipv4.c: 125: sum += header->totalLength;
  6928  001620  EE20 F004          	lfsr	2,4
  6929  001624  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  6930  001626  26D9               	addwf	fsr2l,f,c
  6931  001628  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  6932  00162A  22DA               	addwfc	fsr2h,f,c
  6933  00162C  CFDE F062          	movff	postinc2,??_ipv4_calculateHeaderChecksum
  6934  001630  CFDD F063          	movff	postdec2,??_ipv4_calculateHeaderChecksum+1
  6935  001634  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  6936  001636  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  6937  001638  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  6938  00163A  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  6939  00163C  0E00               	movlw	0
  6940  00163E  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  6941  001640  0E00               	movlw	0
  6942  001642  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  6943                           
  6944                           ; BSR set to: 0
  6945                           ;ipv4.c: 126: sum += header->identification;
  6946  001644  EE20 F006          	lfsr	2,6
  6947  001648  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  6948  00164A  26D9               	addwf	fsr2l,f,c
  6949  00164C  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  6950  00164E  22DA               	addwfc	fsr2h,f,c
  6951  001650  CFDE F062          	movff	postinc2,??_ipv4_calculateHeaderChecksum
  6952  001654  CFDD F063          	movff	postdec2,??_ipv4_calculateHeaderChecksum+1
  6953  001658  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  6954  00165A  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  6955  00165C  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  6956  00165E  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  6957  001660  0E00               	movlw	0
  6958  001662  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  6959  001664  0E00               	movlw	0
  6960  001666  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  6961                           
  6962                           ; BSR set to: 0
  6963                           ;ipv4.c: 127: sum += ((header->flags << 13) | (header->fragmentOffset))&0xffff;
  6964  001668  EE20 F009          	lfsr	2,9
  6965  00166C  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  6966  00166E  26D9               	addwf	fsr2l,f,c
  6967  001670  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  6968  001672  22DA               	addwfc	fsr2h,f,c
  6969  001674  CFDE F062          	movff	postinc2,??_ipv4_calculateHeaderChecksum
  6970  001678  CFDD F063          	movff	postdec2,??_ipv4_calculateHeaderChecksum+1
  6971  00167C  EE20 F008          	lfsr	2,8
  6972  001680  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  6973  001682  26D9               	addwf	fsr2l,f,c
  6974  001684  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  6975  001686  22DA               	addwfc	fsr2h,f,c
  6976  001688  50DF               	movf	indf2,w,c
  6977  00168A  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  6978  00168C  6B65               	clrf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  6979  00168E  0E0D               	movlw	13
  6980  001690                     u9575:
  6981  001690  90D8               	bcf	status,0,c
  6982  001692  3764               	rlcf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  6983  001694  3765               	rlcf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  6984  001696  2EE8               	decfsz	wreg,f,c
  6985  001698  D7FB               	goto	u9575
  6986  00169A  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  6987  00169C  1364               	iorwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  6988  00169E  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  6989  0016A0  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  6990  0016A2  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  6991  0016A4  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  6992  0016A6  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  6993  0016A8  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  6994  0016AA  0E00               	movlw	0
  6995  0016AC  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  6996  0016AE  0E00               	movlw	0
  6997  0016B0  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  6998                           
  6999                           ; BSR set to: 0
  7000                           ;ipv4.c: 128: sum += ((header->timeToLive << 8) | (header->protocol))&0xffff;
  7001  0016B2  EE20 F00B          	lfsr	2,11
  7002  0016B6  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  7003  0016B8  26D9               	addwf	fsr2l,f,c
  7004  0016BA  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  7005  0016BC  22DA               	addwfc	fsr2h,f,c
  7006  0016BE  50DF               	movf	indf2,w,c
  7007  0016C0  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  7008  0016C2  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  7009  0016C4  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  7010  0016C6  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  7011  0016C8  EE20 F00C          	lfsr	2,12
  7012  0016CC  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  7013  0016CE  26D9               	addwf	fsr2l,f,c
  7014  0016D0  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  7015  0016D2  22DA               	addwfc	fsr2h,f,c
  7016  0016D4  50DF               	movf	indf2,w,c
  7017  0016D6  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  7018  0016D8  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  7019  0016DA  1363               	iorwf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  7020  0016DC  0E00               	movlw	0
  7021  0016DE  1364               	iorwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  7022  0016E0  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  7023  0016E2  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  7024  0016E4  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  7025  0016E6  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  7026  0016E8  0E00               	movlw	0
  7027  0016EA  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  7028  0016EC  0E00               	movlw	0
  7029  0016EE  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  7030                           
  7031                           ; BSR set to: 0
  7032                           ;ipv4.c: 130: sum += ((header->source.address[1] | (header->source.address[0] << 8)))&0x
      +                          ffff;
  7033  0016F0  EE20 F00F          	lfsr	2,15
  7034  0016F4  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  7035  0016F6  26D9               	addwf	fsr2l,f,c
  7036  0016F8  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  7037  0016FA  22DA               	addwfc	fsr2h,f,c
  7038  0016FC  50DF               	movf	indf2,w,c
  7039  0016FE  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  7040  001700  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  7041  001702  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  7042  001704  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  7043  001706  EE20 F010          	lfsr	2,16
  7044  00170A  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  7045  00170C  26D9               	addwf	fsr2l,f,c
  7046  00170E  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  7047  001710  22DA               	addwfc	fsr2h,f,c
  7048  001712  50DF               	movf	indf2,w,c
  7049  001714  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  7050  001716  6B66               	clrf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  7051  001718  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  7052  00171A  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  7053  00171C  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  7054  00171E  1366               	iorwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),f,b
  7055  001720  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  7056  001722  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  7057  001724  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  7058  001726  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  7059  001728  0E00               	movlw	0
  7060  00172A  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  7061  00172C  0E00               	movlw	0
  7062  00172E  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  7063                           
  7064                           ; BSR set to: 0
  7065                           ;ipv4.c: 131: sum += ((header->source.address[3] | (header->source.address[2] << 8)))&0x
      +                          ffff;
  7066  001730  EE20 F011          	lfsr	2,17
  7067  001734  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  7068  001736  26D9               	addwf	fsr2l,f,c
  7069  001738  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  7070  00173A  22DA               	addwfc	fsr2h,f,c
  7071  00173C  50DF               	movf	indf2,w,c
  7072  00173E  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  7073  001740  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  7074  001742  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  7075  001744  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  7076  001746  EE20 F012          	lfsr	2,18
  7077  00174A  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  7078  00174C  26D9               	addwf	fsr2l,f,c
  7079  00174E  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  7080  001750  22DA               	addwfc	fsr2h,f,c
  7081  001752  50DF               	movf	indf2,w,c
  7082  001754  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  7083  001756  6B66               	clrf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  7084  001758  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  7085  00175A  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  7086  00175C  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  7087  00175E  1366               	iorwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),f,b
  7088  001760  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  7089  001762  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  7090  001764  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  7091  001766  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  7092  001768  0E00               	movlw	0
  7093  00176A  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  7094  00176C  0E00               	movlw	0
  7095  00176E  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  7096                           
  7097                           ; BSR set to: 0
  7098                           ;ipv4.c: 132: sum += ((header->destination.address[1] | (header->destination.address[0] 
      +                          << 8)))&0xffff;
  7099  001770  EE20 F013          	lfsr	2,19
  7100  001774  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  7101  001776  26D9               	addwf	fsr2l,f,c
  7102  001778  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  7103  00177A  22DA               	addwfc	fsr2h,f,c
  7104  00177C  50DF               	movf	indf2,w,c
  7105  00177E  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  7106  001780  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  7107  001782  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  7108  001784  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  7109  001786  EE20 F014          	lfsr	2,20
  7110  00178A  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  7111  00178C  26D9               	addwf	fsr2l,f,c
  7112  00178E  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  7113  001790  22DA               	addwfc	fsr2h,f,c
  7114  001792  50DF               	movf	indf2,w,c
  7115  001794  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  7116  001796  6B66               	clrf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  7117  001798  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  7118  00179A  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  7119  00179C  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  7120  00179E  1366               	iorwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),f,b
  7121  0017A0  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  7122  0017A2  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  7123  0017A4  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  7124  0017A6  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  7125  0017A8  0E00               	movlw	0
  7126  0017AA  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  7127  0017AC  0E00               	movlw	0
  7128  0017AE  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  7129                           
  7130                           ; BSR set to: 0
  7131                           ;ipv4.c: 133: sum += ((header->destination.address[3] | (header->destination.address[2] 
      +                          << 8)))&0xffff;
  7132  0017B0  EE20 F015          	lfsr	2,21
  7133  0017B4  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  7134  0017B6  26D9               	addwf	fsr2l,f,c
  7135  0017B8  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  7136  0017BA  22DA               	addwfc	fsr2h,f,c
  7137  0017BC  50DF               	movf	indf2,w,c
  7138  0017BE  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  7139  0017C0  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  7140  0017C2  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  7141  0017C4  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  7142  0017C6  EE20 F016          	lfsr	2,22
  7143  0017CA  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  7144  0017CC  26D9               	addwf	fsr2l,f,c
  7145  0017CE  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  7146  0017D0  22DA               	addwfc	fsr2h,f,c
  7147  0017D2  50DF               	movf	indf2,w,c
  7148  0017D4  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  7149  0017D6  6B66               	clrf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  7150  0017D8  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  7151  0017DA  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  7152  0017DC  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  7153  0017DE  1366               	iorwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),f,b
  7154  0017E0  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  7155  0017E2  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  7156  0017E4  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  7157  0017E6  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  7158  0017E8  0E00               	movlw	0
  7159  0017EA  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  7160  0017EC  0E00               	movlw	0
  7161  0017EE  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  7162                           
  7163                           ; BSR set to: 0
  7164                           ;ipv4.c: 135: sum = (sum & 0x0ffff)+((sum & 0xf0000) >> 16);
  7165  0017F0  C06E  F062         	movff	ipv4_calculateHeaderChecksum@sum,??_ipv4_calculateHeaderChecksum
  7166  0017F4  C06F  F063         	movff	ipv4_calculateHeaderChecksum@sum+1,??_ipv4_calculateHeaderChecksum+1
  7167  0017F8  C070  F064         	movff	ipv4_calculateHeaderChecksum@sum+2,??_ipv4_calculateHeaderChecksum+2
  7168  0017FC  C071  F065         	movff	ipv4_calculateHeaderChecksum@sum+3,??_ipv4_calculateHeaderChecksum+3
  7169  001800  0E11               	movlw	17
  7170  001802  D005               	goto	u9580
  7171  001804                     u9585:
  7172  001804  90D8               	bcf	status,0,c
  7173  001806  3365               	rrcf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  7174  001808  3364               	rrcf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  7175  00180A  3363               	rrcf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  7176  00180C  3362               	rrcf	??_ipv4_calculateHeaderChecksum& (0+255),f,b
  7177  00180E                     u9580:
  7178  00180E  2EE8               	decfsz	wreg,f,c
  7179  001810  D7F9               	goto	u9585
  7180  001812  0E0F               	movlw	15
  7181  001814  1562               	andwf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  7182  001816  6F66               	movwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  7183  001818  0E00               	movlw	0
  7184  00181A  1563               	andwf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  7185  00181C  6F67               	movwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),b
  7186  00181E  0E00               	movlw	0
  7187  001820  1564               	andwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  7188  001822  6F68               	movwf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),b
  7189  001824  0E00               	movlw	0
  7190  001826  1565               	andwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  7191  001828  6F69               	movwf	(??_ipv4_calculateHeaderChecksum+7)& (0+255),b
  7192  00182A  0EFF               	movlw	255
  7193  00182C  156E               	andwf	ipv4_calculateHeaderChecksum@sum& (0+255),w,b
  7194  00182E  6F6A               	movwf	(??_ipv4_calculateHeaderChecksum+8)& (0+255),b
  7195  001830  0EFF               	movlw	255
  7196  001832  156F               	andwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),w,b
  7197  001834  6F6B               	movwf	(??_ipv4_calculateHeaderChecksum+9)& (0+255),b
  7198  001836  0E00               	movlw	0
  7199  001838  1570               	andwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),w,b
  7200  00183A  6F6C               	movwf	(??_ipv4_calculateHeaderChecksum+10)& (0+255),b
  7201  00183C  0E00               	movlw	0
  7202  00183E  1571               	andwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),w,b
  7203  001840  6F6D               	movwf	(??_ipv4_calculateHeaderChecksum+11)& (0+255),b
  7204  001842  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  7205  001844  256A               	addwf	(??_ipv4_calculateHeaderChecksum+8)& (0+255),w,b
  7206  001846  6F6E               	movwf	ipv4_calculateHeaderChecksum@sum& (0+255),b
  7207  001848  5167               	movf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),w,b
  7208  00184A  216B               	addwfc	(??_ipv4_calculateHeaderChecksum+9)& (0+255),w,b
  7209  00184C  6F6F               	movwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),b
  7210  00184E  5168               	movf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),w,b
  7211  001850  216C               	addwfc	(??_ipv4_calculateHeaderChecksum+10)& (0+255),w,b
  7212  001852  6F70               	movwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),b
  7213  001854  5169               	movf	(??_ipv4_calculateHeaderChecksum+7)& (0+255),w,b
  7214  001856  216D               	addwfc	(??_ipv4_calculateHeaderChecksum+11)& (0+255),w,b
  7215  001858  6F71               	movwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),b
  7216                           
  7217                           ; BSR set to: 0
  7218                           ;ipv4.c: 136: sum = ~sum;
  7219  00185A  C06E  F062         	movff	ipv4_calculateHeaderChecksum@sum,??_ipv4_calculateHeaderChecksum
  7220  00185E  C06F  F063         	movff	ipv4_calculateHeaderChecksum@sum+1,??_ipv4_calculateHeaderChecksum+1
  7221  001862  C070  F064         	movff	ipv4_calculateHeaderChecksum@sum+2,??_ipv4_calculateHeaderChecksum+2
  7222  001866  C071  F065         	movff	ipv4_calculateHeaderChecksum@sum+3,??_ipv4_calculateHeaderChecksum+3
  7223  00186A  1F62               	comf	??_ipv4_calculateHeaderChecksum& (0+255),f,b
  7224  00186C  1F63               	comf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  7225  00186E  1F64               	comf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  7226  001870  1F65               	comf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  7227  001872  C062  F06E         	movff	??_ipv4_calculateHeaderChecksum,ipv4_calculateHeaderChecksum@sum
  7228  001876  C063  F06F         	movff	??_ipv4_calculateHeaderChecksum+1,ipv4_calculateHeaderChecksum@sum+1
  7229  00187A  C064  F070         	movff	??_ipv4_calculateHeaderChecksum+2,ipv4_calculateHeaderChecksum@sum+2
  7230  00187E  C065  F071         	movff	??_ipv4_calculateHeaderChecksum+3,ipv4_calculateHeaderChecksum@sum+3
  7231                           
  7232                           ; BSR set to: 0
  7233                           ;ipv4.c: 138: header->checksum = sum;
  7234  001882  EE20 F00D          	lfsr	2,13
  7235  001886  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  7236  001888  26D9               	addwf	fsr2l,f,c
  7237  00188A  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  7238  00188C  22DA               	addwfc	fsr2h,f,c
  7239  00188E  C06E  FFDE         	movff	ipv4_calculateHeaderChecksum@sum,postinc2
  7240  001892  C06F  FFDD         	movff	ipv4_calculateHeaderChecksum@sum+1,postdec2
  7241                           
  7242                           ; BSR set to: 0
  7243  001896  0012               	return		;funcret
  7244  001898                     __end_of_ipv4_calculateHeaderChecksum:
  7245                           	opt stack 0
  7246                           tblptru	equ	0xFF8
  7247                           tblptrh	equ	0xFF7
  7248                           tblptrl	equ	0xFF6
  7249                           tablat	equ	0xFF5
  7250                           prodh	equ	0xFF4
  7251                           prodl	equ	0xFF3
  7252                           intcon	equ	0xFF2
  7253                           intcon3	equ	0xFF0
  7254                           indf0	equ	0xFEF
  7255                           postinc0	equ	0xFEE
  7256                           plusw0	equ	0xFEB
  7257                           fsr0h	equ	0xFEA
  7258                           fsr0l	equ	0xFE9
  7259                           wreg	equ	0xFE8
  7260                           postinc1	equ	0xFE6
  7261                           postdec1	equ	0xFE5
  7262                           plusw1	equ	0xFE3
  7263                           fsr1h	equ	0xFE2
  7264                           fsr1l	equ	0xFE1
  7265                           indf2	equ	0xFDF
  7266                           postinc2	equ	0xFDE
  7267                           postdec2	equ	0xFDD
  7268                           plusw2	equ	0xFDB
  7269                           fsr2h	equ	0xFDA
  7270                           fsr2l	equ	0xFD9
  7271                           status	equ	0xFD8
  7272                           
  7273 ;; *************** function _hexToString *****************
  7274 ;; Defined at:
  7275 ;;		line 93 in file "src/system/uart.c"
  7276 ;; Parameters:    Size  Location     Type
  7277 ;;  val             4    1[BANK0 ] unsigned long 
  7278 ;; Auto vars:     Size  Location     Type
  7279 ;;  pointer         1    9[BANK0 ] unsigned char 
  7280 ;; Return value:  Size  Location     Type
  7281 ;;                  2    1[BANK0 ] PTR unsigned char 
  7282 ;; Registers used:
  7283 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7284 ;; Tracked objects:
  7285 ;;		On entry : 0/0
  7286 ;;		On exit  : 0/0
  7287 ;;		Unchanged: 0/0
  7288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7289 ;;      Params:         0       4       0       0       0       0       0       0       0
  7290 ;;      Locals:         0       1       0       0       0       0       0       0       0
  7291 ;;      Temps:          0       4       0       0       0       0       0       0       0
  7292 ;;      Totals:         0       9       0       0       0       0       0       0       0
  7293 ;;Total ram usage:        9 bytes
  7294 ;; Hardware stack levels used:    1
  7295 ;; Hardware stack levels required when called:    5
  7296 ;; This function calls:
  7297 ;;		_hexToChar
  7298 ;; This function is called by:
  7299 ;;		_ipv4_checkHeaderChecksum
  7300 ;; This function uses a non-reentrant model
  7301 ;;
  7302                           
  7303                           	psect	text16
  7304  003038                     __ptext16:
  7305                           	opt stack 0
  7306  003038                     _hexToString:
  7307                           	opt stack 21
  7308                           
  7309                           ;uart.c: 94: char static number [10];
  7310                           ;uart.c: 95: uint8_t pointer = 0;
  7311                           
  7312                           ; BSR set to: 0
  7313                           ;incstack = 0
  7314  003038  0E00               	movlw	0
  7315  00303A  0100               	movlb	0	; () banked
  7316  00303C  6F69               	movwf	hexToString@pointer& (0+255),b
  7317                           
  7318                           ; BSR set to: 0
  7319                           ;uart.c: 96: if (val > 0xff) {
  7320  00303E  5164               	movf	(hexToString@val+3)& (0+255),w,b
  7321  003040  1163               	iorwf	(hexToString@val+2)& (0+255),w,b
  7322  003042  E103               	bnz	u9200
  7323  003044  0562               	decf	(hexToString@val+1)& (0+255),w,b
  7324  003046  A0D8               	btfss	status,0,c
  7325  003048  D02F               	goto	l781
  7326  00304A                     u9200:
  7327                           
  7328                           ; BSR set to: 0
  7329                           ;uart.c: 97: number[pointer++] = hexToChar((val >> 12) & 0xf);
  7330  00304A  5169               	movf	hexToString@pointer& (0+255),w,b
  7331  00304C  0D01               	mullw	1
  7332  00304E  0EE1               	movlw	low hexToString@number
  7333  003050  24F3               	addwf	prodl,w,c
  7334  003052  6ED9               	movwf	fsr2l,c
  7335  003054  0E01               	movlw	high hexToString@number
  7336  003056  20F4               	addwfc	prodh,w,c
  7337  003058  6EDA               	movwf	fsr2h,c
  7338  00305A  C061  F065         	movff	hexToString@val,??_hexToString
  7339  00305E  C062  F066         	movff	hexToString@val+1,??_hexToString+1
  7340  003062  C063  F067         	movff	hexToString@val+2,??_hexToString+2
  7341  003066  C064  F068         	movff	hexToString@val+3,??_hexToString+3
  7342  00306A  0E0D               	movlw	13
  7343  00306C  D005               	goto	u9210
  7344  00306E                     u9215:
  7345  00306E  90D8               	bcf	status,0,c
  7346  003070  3368               	rrcf	(??_hexToString+3)& (0+255),f,b
  7347  003072  3367               	rrcf	(??_hexToString+2)& (0+255),f,b
  7348  003074  3366               	rrcf	(??_hexToString+1)& (0+255),f,b
  7349  003076  3365               	rrcf	??_hexToString& (0+255),f,b
  7350  003078                     u9210:
  7351  003078  2EE8               	decfsz	wreg,f,c
  7352  00307A  D7F9               	goto	u9215
  7353  00307C  5165               	movf	??_hexToString& (0+255),w,b
  7354  00307E  0B0F               	andlw	15
  7355  003080  EC6A  F025         	call	_hexToChar
  7356  003084  6EDF               	movwf	indf2,c
  7357  003086  0100               	movlb	0	; () banked
  7358  003088  2B69               	incf	hexToString@pointer& (0+255),f,b
  7359                           
  7360                           ; BSR set to: 0
  7361                           ;uart.c: 98: number[pointer++] = hexToChar((val >> 8) & 0xf);
  7362  00308A  5169               	movf	hexToString@pointer& (0+255),w,b
  7363  00308C  0D01               	mullw	1
  7364  00308E  0EE1               	movlw	low hexToString@number
  7365  003090  24F3               	addwf	prodl,w,c
  7366  003092  6ED9               	movwf	fsr2l,c
  7367  003094  0E01               	movlw	high hexToString@number
  7368  003096  20F4               	addwfc	prodh,w,c
  7369  003098  6EDA               	movwf	fsr2h,c
  7370  00309A  5162               	movf	(hexToString@val+1)& (0+255),w,b
  7371  00309C  0B0F               	andlw	15
  7372  00309E  EC6A  F025         	call	_hexToChar
  7373  0030A2  6EDF               	movwf	indf2,c
  7374  0030A4  0100               	movlb	0	; () banked
  7375  0030A6  2B69               	incf	hexToString@pointer& (0+255),f,b
  7376  0030A8                     l781:
  7377                           
  7378                           ; BSR set to: 0
  7379                           ;uart.c: 99: }
  7380                           ;uart.c: 100: number[pointer++] = hexToChar((val >> 4) & 0xf);
  7381                           
  7382                           ; BSR set to: 0
  7383  0030A8  5169               	movf	hexToString@pointer& (0+255),w,b
  7384  0030AA  0D01               	mullw	1
  7385  0030AC  0EE1               	movlw	low hexToString@number
  7386  0030AE  24F3               	addwf	prodl,w,c
  7387  0030B0  6ED9               	movwf	fsr2l,c
  7388  0030B2  0E01               	movlw	high hexToString@number
  7389  0030B4  20F4               	addwfc	prodh,w,c
  7390  0030B6  6EDA               	movwf	fsr2h,c
  7391  0030B8  C061  F065         	movff	hexToString@val,??_hexToString
  7392  0030BC  C062  F066         	movff	hexToString@val+1,??_hexToString+1
  7393  0030C0  C063  F067         	movff	hexToString@val+2,??_hexToString+2
  7394  0030C4  C064  F068         	movff	hexToString@val+3,??_hexToString+3
  7395  0030C8  0E05               	movlw	5
  7396  0030CA  D005               	goto	u9220
  7397  0030CC                     u9225:
  7398  0030CC  90D8               	bcf	status,0,c
  7399  0030CE  3368               	rrcf	(??_hexToString+3)& (0+255),f,b
  7400  0030D0  3367               	rrcf	(??_hexToString+2)& (0+255),f,b
  7401  0030D2  3366               	rrcf	(??_hexToString+1)& (0+255),f,b
  7402  0030D4  3365               	rrcf	??_hexToString& (0+255),f,b
  7403  0030D6                     u9220:
  7404  0030D6  2EE8               	decfsz	wreg,f,c
  7405  0030D8  D7F9               	goto	u9225
  7406  0030DA  5165               	movf	??_hexToString& (0+255),w,b
  7407  0030DC  0B0F               	andlw	15
  7408  0030DE  EC6A  F025         	call	_hexToChar
  7409  0030E2  6EDF               	movwf	indf2,c
  7410  0030E4  0100               	movlb	0	; () banked
  7411  0030E6  2B69               	incf	hexToString@pointer& (0+255),f,b
  7412                           
  7413                           ;uart.c: 101: number[pointer++] = hexToChar(val & 0xf);
  7414  0030E8  5169               	movf	hexToString@pointer& (0+255),w,b
  7415  0030EA  0D01               	mullw	1
  7416  0030EC  0EE1               	movlw	low hexToString@number
  7417  0030EE  24F3               	addwf	prodl,w,c
  7418  0030F0  6ED9               	movwf	fsr2l,c
  7419  0030F2  0E01               	movlw	high hexToString@number
  7420  0030F4  20F4               	addwfc	prodh,w,c
  7421  0030F6  6EDA               	movwf	fsr2h,c
  7422  0030F8  5161               	movf	hexToString@val& (0+255),w,b
  7423  0030FA  0B0F               	andlw	15
  7424  0030FC  EC6A  F025         	call	_hexToChar
  7425  003100  6EDF               	movwf	indf2,c
  7426  003102  0100               	movlb	0	; () banked
  7427  003104  2B69               	incf	hexToString@pointer& (0+255),f,b
  7428                           
  7429                           ; BSR set to: 0
  7430                           ;uart.c: 103: number[pointer++] = '\0';
  7431  003106  5169               	movf	hexToString@pointer& (0+255),w,b
  7432  003108  0D01               	mullw	1
  7433  00310A  0EE1               	movlw	low hexToString@number
  7434  00310C  24F3               	addwf	prodl,w,c
  7435  00310E  6ED9               	movwf	fsr2l,c
  7436  003110  0E01               	movlw	high hexToString@number
  7437  003112  20F4               	addwfc	prodh,w,c
  7438  003114  6EDA               	movwf	fsr2h,c
  7439  003116  0E00               	movlw	0
  7440  003118  6EDF               	movwf	indf2,c
  7441                           
  7442                           ; BSR set to: 0
  7443  00311A  2B69               	incf	hexToString@pointer& (0+255),f,b
  7444                           
  7445                           ; BSR set to: 0
  7446                           ;uart.c: 104: return number;
  7447  00311C  0EE1               	movlw	low hexToString@number
  7448  00311E  6F61               	movwf	?_hexToString& (0+255),b
  7449  003120  0E01               	movlw	high hexToString@number
  7450  003122  6F62               	movwf	(?_hexToString+1)& (0+255),b
  7451  003124  0012               	return	
  7452  003126                     __end_of_hexToString:
  7453                           	opt stack 0
  7454                           tblptru	equ	0xFF8
  7455                           tblptrh	equ	0xFF7
  7456                           tblptrl	equ	0xFF6
  7457                           tablat	equ	0xFF5
  7458                           prodh	equ	0xFF4
  7459                           prodl	equ	0xFF3
  7460                           intcon	equ	0xFF2
  7461                           intcon3	equ	0xFF0
  7462                           indf0	equ	0xFEF
  7463                           postinc0	equ	0xFEE
  7464                           plusw0	equ	0xFEB
  7465                           fsr0h	equ	0xFEA
  7466                           fsr0l	equ	0xFE9
  7467                           wreg	equ	0xFE8
  7468                           postinc1	equ	0xFE6
  7469                           postdec1	equ	0xFE5
  7470                           plusw1	equ	0xFE3
  7471                           fsr1h	equ	0xFE2
  7472                           fsr1l	equ	0xFE1
  7473                           indf2	equ	0xFDF
  7474                           postinc2	equ	0xFDE
  7475                           postdec2	equ	0xFDD
  7476                           plusw2	equ	0xFDB
  7477                           fsr2h	equ	0xFDA
  7478                           fsr2l	equ	0xFD9
  7479                           status	equ	0xFD8
  7480                           
  7481 ;; *************** function _hexToChar *****************
  7482 ;; Defined at:
  7483 ;;		line 84 in file "src/system/uart.c"
  7484 ;; Parameters:    Size  Location     Type
  7485 ;;  val             1    wreg     unsigned char 
  7486 ;; Auto vars:     Size  Location     Type
  7487 ;;  val             1    0[BANK0 ] unsigned char 
  7488 ;; Return value:  Size  Location     Type
  7489 ;;                  1    wreg      unsigned char 
  7490 ;; Registers used:
  7491 ;;		wreg, status,2, status,0
  7492 ;; Tracked objects:
  7493 ;;		On entry : 0/0
  7494 ;;		On exit  : 0/0
  7495 ;;		Unchanged: 0/0
  7496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7497 ;;      Params:         0       0       0       0       0       0       0       0       0
  7498 ;;      Locals:         0       1       0       0       0       0       0       0       0
  7499 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7500 ;;      Totals:         0       1       0       0       0       0       0       0       0
  7501 ;;Total ram usage:        1 bytes
  7502 ;; Hardware stack levels used:    1
  7503 ;; Hardware stack levels required when called:    4
  7504 ;; This function calls:
  7505 ;;		Nothing
  7506 ;; This function is called by:
  7507 ;;		_hexToString
  7508 ;; This function uses a non-reentrant model
  7509 ;;
  7510                           
  7511                           	psect	text17
  7512  004AD4                     __ptext17:
  7513                           	opt stack 0
  7514  004AD4                     _hexToChar:
  7515                           	opt stack 21
  7516                           
  7517                           ; BSR set to: 0
  7518                           ;incstack = 0
  7519                           ;hexToChar@val stored from wreg
  7520  004AD4  0100               	movlb	0	; () banked
  7521  004AD6  6F60               	movwf	hexToChar@val& (0+255),b
  7522                           
  7523                           ;uart.c: 85: if (val < 10) {
  7524  004AD8  0E0A               	movlw	10
  7525  004ADA  0100               	movlb	0	; () banked
  7526  004ADC  6160               	cpfslt	hexToChar@val& (0+255),b
  7527  004ADE  D003               	goto	l773
  7528                           
  7529                           ; BSR set to: 0
  7530                           ;uart.c: 86: return val + 0x30u;
  7531  004AE0  5160               	movf	hexToChar@val& (0+255),w,b
  7532  004AE2  0F30               	addlw	48
  7533                           
  7534                           ; BSR set to: 0
  7535  004AE4  0012               	return	
  7536  004AE6                     l773:
  7537                           
  7538                           ; BSR set to: 0
  7539                           
  7540                           ; BSR set to: 0
  7541  004AE6  0E10               	movlw	16
  7542  004AE8  6160               	cpfslt	hexToChar@val& (0+255),b
  7543  004AEA  D003               	goto	l776
  7544                           
  7545                           ; BSR set to: 0
  7546                           ;uart.c: 88: return val + 0x41u - 10;
  7547  004AEC  5160               	movf	hexToChar@val& (0+255),w,b
  7548  004AEE  0F37               	addlw	55
  7549                           
  7550                           ; BSR set to: 0
  7551  004AF0  0012               	return	
  7552  004AF2                     l776:
  7553                           
  7554                           ; BSR set to: 0
  7555                           ;uart.c: 89: }
  7556                           ;uart.c: 90: return 0;
  7557                           
  7558                           ; BSR set to: 0
  7559                           
  7560                           ; BSR set to: 0
  7561  004AF2  0E00               	movlw	0
  7562  004AF4  0012               	return	
  7563  004AF6                     __end_of_hexToChar:
  7564                           	opt stack 0
  7565                           tblptru	equ	0xFF8
  7566                           tblptrh	equ	0xFF7
  7567                           tblptrl	equ	0xFF6
  7568                           tablat	equ	0xFF5
  7569                           prodh	equ	0xFF4
  7570                           prodl	equ	0xFF3
  7571                           intcon	equ	0xFF2
  7572                           intcon3	equ	0xFF0
  7573                           indf0	equ	0xFEF
  7574                           postinc0	equ	0xFEE
  7575                           plusw0	equ	0xFEB
  7576                           fsr0h	equ	0xFEA
  7577                           fsr0l	equ	0xFE9
  7578                           wreg	equ	0xFE8
  7579                           postinc1	equ	0xFE6
  7580                           postdec1	equ	0xFE5
  7581                           plusw1	equ	0xFE3
  7582                           fsr1h	equ	0xFE2
  7583                           fsr1l	equ	0xFE1
  7584                           indf2	equ	0xFDF
  7585                           postinc2	equ	0xFDE
  7586                           postdec2	equ	0xFDD
  7587                           plusw2	equ	0xFDB
  7588                           fsr2h	equ	0xFDA
  7589                           fsr2l	equ	0xFD9
  7590                           status	equ	0xFD8
  7591                           
  7592 ;; *************** function _ipProtocolToString *****************
  7593 ;; Defined at:
  7594 ;;		line 149 in file "src/system/uart.c"
  7595 ;; Parameters:    Size  Location     Type
  7596 ;;  protocol        1    wreg     enum E5627
  7597 ;; Auto vars:     Size  Location     Type
  7598 ;;  protocol        1    2[BANK0 ] enum E5627
  7599 ;; Return value:  Size  Location     Type
  7600 ;;                  2    0[BANK0 ] PTR unsigned char 
  7601 ;; Registers used:
  7602 ;;		wreg, status,2, status,0
  7603 ;; Tracked objects:
  7604 ;;		On entry : 0/0
  7605 ;;		On exit  : 0/0
  7606 ;;		Unchanged: 0/0
  7607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7608 ;;      Params:         0       2       0       0       0       0       0       0       0
  7609 ;;      Locals:         0       1       0       0       0       0       0       0       0
  7610 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7611 ;;      Totals:         0       3       0       0       0       0       0       0       0
  7612 ;;Total ram usage:        3 bytes
  7613 ;; Hardware stack levels used:    1
  7614 ;; Hardware stack levels required when called:    4
  7615 ;; This function calls:
  7616 ;;		Nothing
  7617 ;; This function is called by:
  7618 ;;		_ipv4_handleNewPacket
  7619 ;; This function uses a non-reentrant model
  7620 ;;
  7621                           
  7622                           	psect	text18
  7623  00457C                     __ptext18:
  7624                           	opt stack 0
  7625  00457C                     _ipProtocolToString:
  7626                           	opt stack 23
  7627                           
  7628                           ; BSR set to: 0
  7629                           ;incstack = 0
  7630                           ;ipProtocolToString@protocol stored from wreg
  7631  00457C  0100               	movlb	0	; () banked
  7632  00457E  6F62               	movwf	ipProtocolToString@protocol& (0+255),b
  7633                           
  7634                           ;uart.c: 150: switch (protocol) {
  7635  004580  D015               	goto	l805
  7636  004582                     
  7637                           ;uart.c: 152: return "ICMP";
  7638  004582  0ED2               	movlw	low STR_55
  7639  004584  0100               	movlb	0	; () banked
  7640  004586  6F60               	movwf	?_ipProtocolToString& (0+255),b
  7641  004588  0E7F               	movlw	high STR_55
  7642  00458A  6F61               	movwf	(?_ipProtocolToString+1)& (0+255),b
  7643                           
  7644                           ; BSR set to: 0
  7645  00458C  0012               	return	
  7646  00458E                     
  7647                           ; BSR set to: 0
  7648                           ;uart.c: 154: return "TCP";
  7649                           
  7650                           ; BSR set to: 0
  7651  00458E  0EE5               	movlw	low STR_56
  7652  004590  6F60               	movwf	?_ipProtocolToString& (0+255),b
  7653  004592  0E7F               	movlw	high STR_56
  7654  004594  6F61               	movwf	(?_ipProtocolToString+1)& (0+255),b
  7655                           
  7656                           ; BSR set to: 0
  7657  004596  0012               	return	
  7658  004598                     
  7659                           ; BSR set to: 0
  7660                           ;uart.c: 156: return "UDP";
  7661                           
  7662                           ; BSR set to: 0
  7663  004598  0EE9               	movlw	low STR_57
  7664  00459A  6F60               	movwf	?_ipProtocolToString& (0+255),b
  7665  00459C  0E7F               	movlw	high STR_57
  7666  00459E  6F61               	movwf	(?_ipProtocolToString+1)& (0+255),b
  7667                           
  7668                           ; BSR set to: 0
  7669  0045A0  0012               	return	
  7670  0045A2                     
  7671                           ; BSR set to: 0
  7672                           ;uart.c: 158: return "Unknown Protocol";
  7673                           
  7674                           ; BSR set to: 0
  7675  0045A2  0EB8               	movlw	low STR_58
  7676  0045A4  6F60               	movwf	?_ipProtocolToString& (0+255),b
  7677  0045A6  0E7E               	movlw	high STR_58
  7678  0045A8  6F61               	movwf	(?_ipProtocolToString+1)& (0+255),b
  7679                           
  7680                           ; BSR set to: 0
  7681                           ;uart.c: 159: }
  7682                           
  7683                           ; BSR set to: 0
  7684  0045AA  0012               	return	
  7685  0045AC                     l805:
  7686                           
  7687                           ; BSR set to: 0
  7688  0045AC  0100               	movlb	0	; () banked
  7689  0045AE  5162               	movf	ipProtocolToString@protocol& (0+255),w,b
  7690                           
  7691                           ; Switch size 1, requested type "space"
  7692                           ; Number of cases is 3, Range of values is 1 to 17
  7693                           ; switch strategies available:
  7694                           ; Name         Instructions Cycles
  7695                           ; simple_byte           10     6 (average)
  7696                           ;	Chosen strategy is simple_byte
  7697  0045B0  0A01               	xorlw	1	; case 1
  7698  0045B2  B4D8               	btfsc	status,2,c
  7699  0045B4  D7E6               	goto	l806
  7700  0045B6  0A07               	xorlw	7	; case 6
  7701  0045B8  B4D8               	btfsc	status,2,c
  7702  0045BA  D7E9               	goto	l808
  7703  0045BC  0A17               	xorlw	23	; case 17
  7704  0045BE  B4D8               	btfsc	status,2,c
  7705  0045C0  D7EB               	goto	l809
  7706  0045C2  D7EF               	goto	l810
  7707  0045C4                     __end_of_ipProtocolToString:
  7708                           	opt stack 0
  7709                           tblptru	equ	0xFF8
  7710                           tblptrh	equ	0xFF7
  7711                           tblptrl	equ	0xFF6
  7712                           tablat	equ	0xFF5
  7713                           prodh	equ	0xFF4
  7714                           prodl	equ	0xFF3
  7715                           intcon	equ	0xFF2
  7716                           intcon3	equ	0xFF0
  7717                           indf0	equ	0xFEF
  7718                           postinc0	equ	0xFEE
  7719                           plusw0	equ	0xFEB
  7720                           fsr0h	equ	0xFEA
  7721                           fsr0l	equ	0xFE9
  7722                           wreg	equ	0xFE8
  7723                           postinc1	equ	0xFE6
  7724                           postdec1	equ	0xFE5
  7725                           plusw1	equ	0xFE3
  7726                           fsr1h	equ	0xFE2
  7727                           fsr1l	equ	0xFE1
  7728                           indf2	equ	0xFDF
  7729                           postinc2	equ	0xFDE
  7730                           postdec2	equ	0xFDD
  7731                           plusw2	equ	0xFDB
  7732                           fsr2h	equ	0xFDA
  7733                           fsr2l	equ	0xFD9
  7734                           status	equ	0xFD8
  7735                           
  7736 ;; *************** function _ethernetController_updateNextPacketPointer *****************
  7737 ;; Defined at:
  7738 ;;		line 334 in file "src/enc424j600/ENC424J600.c"
  7739 ;; Parameters:    Size  Location     Type
  7740 ;;		None
  7741 ;; Auto vars:     Size  Location     Type
  7742 ;;  nextPktPoint    2   21[BANK0 ] unsigned int 
  7743 ;;  newPointerH     1   25[BANK0 ] unsigned char 
  7744 ;;  newPointerL     1   24[BANK0 ] unsigned char 
  7745 ;;  opcode          1   23[BANK0 ] unsigned char 
  7746 ;; Return value:  Size  Location     Type
  7747 ;;                  1    wreg      void 
  7748 ;; Registers used:
  7749 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7750 ;; Tracked objects:
  7751 ;;		On entry : 0/0
  7752 ;;		On exit  : 0/0
  7753 ;;		Unchanged: 0/0
  7754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7755 ;;      Params:         0       0       0       0       0       0       0       0       0
  7756 ;;      Locals:         0       5       0       0       0       0       0       0       0
  7757 ;;      Temps:          0       6       0       0       0       0       0       0       0
  7758 ;;      Totals:         0      11       0       0       0       0       0       0       0
  7759 ;;Total ram usage:       11 bytes
  7760 ;; Hardware stack levels used:    1
  7761 ;; Hardware stack levels required when called:    7
  7762 ;; This function calls:
  7763 ;;		_enc424j600_getNextPacketPointer
  7764 ;;		_enc424j600_readSPI
  7765 ;;		_enc424j600_setERXDATAReadPointer
  7766 ;;		_enc424j600_setNextPacketPointer
  7767 ;;		_enc424j600_writeSPI
  7768 ;; This function is called by:
  7769 ;;		_ethernet_rxGetNewFrame
  7770 ;; This function uses a non-reentrant model
  7771 ;;
  7772                           
  7773                           	psect	text19
  7774  003D20                     __ptext19:
  7775                           	opt stack 0
  7776  003D20                     _ethernetController_updateNextPacketPointer:
  7777                           	opt stack 21
  7778                           
  7779                           ;ENC424J600.c: 335: uint16_t nextPktPointer;
  7780                           ;ENC424J600.c: 336: uint8_t opcode;
  7781                           ;ENC424J600.c: 337: uint8_t newPointerL, newPointerH;
  7782                           ;ENC424J600.c: 338: nextPktPointer = enc424j600_getNextPacketPointer();
  7783                           
  7784                           ; BSR set to: 0
  7785                           ;incstack = 0
  7786  003D20  EC26  F026         	call	_enc424j600_getNextPacketPointer	;wreg free
  7787  003D24  C060  F075         	movff	?_enc424j600_getNextPacketPointer,ethernetController_updateNextPacketPointer@next
      +                          PktPointer
  7788  003D28  C061  F076         	movff	?_enc424j600_getNextPacketPointer+1,ethernetController_updateNextPacketPointer@ne
      +                          xtPktPointer+1
  7789                           
  7790                           ;ENC424J600.c: 339: enc424j600_setERXDATAReadPointer(nextPktPointer);
  7791  003D2C  C075  F06A         	movff	ethernetController_updateNextPacketPointer@nextPktPointer,enc424j600_setERXDATARe
      +                          adPointer@addr
  7792  003D30  C076  F06B         	movff	ethernetController_updateNextPacketPointer@nextPktPointer+1,enc424j600_setERXDATA
      +                          ReadPointer@addr+1
  7793  003D34  ECA4  F023         	call	_enc424j600_setERXDATAReadPointer	;wreg free
  7794                           
  7795                           ;ENC424J600.c: 340: opcode = 0x2C;
  7796  003D38  0E2C               	movlw	44
  7797  003D3A  0100               	movlb	0	; () banked
  7798  003D3C  6F77               	movwf	ethernetController_updateNextPacketPointer@opcode& (0+255),b
  7799                           
  7800                           ; BSR set to: 0
  7801                           ;ENC424J600.c: 341: PORTBbits.RB4=0;
  7802  003D3E  9881               	bcf	3969,4,c	;volatile
  7803                           
  7804                           ; BSR set to: 0
  7805                           ;ENC424J600.c: 342: enc424j600_writeSPI(&opcode);
  7806  003D40  0E77               	movlw	low ethernetController_updateNextPacketPointer@opcode
  7807  003D42  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
  7808  003D44  0E00               	movlw	high ethernetController_updateNextPacketPointer@opcode
  7809  003D46  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
  7810  003D48  ECC2  F020         	call	_enc424j600_writeSPI	;wreg free
  7811                           
  7812                           ;ENC424J600.c: 343: enc424j600_readSPI(&newPointerL);
  7813  003D4C  0E78               	movlw	low ethernetController_updateNextPacketPointer@newPointerL
  7814  003D4E  0100               	movlb	0	; () banked
  7815  003D50  6F60               	movwf	enc424j600_readSPI@data& (0+255),b
  7816  003D52  0E00               	movlw	high ethernetController_updateNextPacketPointer@newPointerL
  7817  003D54  6F61               	movwf	(enc424j600_readSPI@data+1)& (0+255),b
  7818  003D56  EC26  F020         	call	_enc424j600_readSPI	;wreg free
  7819                           
  7820                           ;ENC424J600.c: 344: enc424j600_readSPI(&newPointerH);
  7821  003D5A  0E79               	movlw	low ethernetController_updateNextPacketPointer@newPointerH
  7822  003D5C  0100               	movlb	0	; () banked
  7823  003D5E  6F60               	movwf	enc424j600_readSPI@data& (0+255),b
  7824  003D60  0E00               	movlw	high ethernetController_updateNextPacketPointer@newPointerH
  7825  003D62  6F61               	movwf	(enc424j600_readSPI@data+1)& (0+255),b
  7826  003D64  EC26  F020         	call	_enc424j600_readSPI	;wreg free
  7827                           
  7828                           ;ENC424J600.c: 345: PORTBbits.RB4=1;
  7829  003D68  8881               	bsf	3969,4,c	;volatile
  7830                           
  7831                           ;ENC424J600.c: 347: enc424j600_setNextPacketPointer((uint16_t) ((newPointerL & (unsigned
      +                          ) 0x00ff) | ((unsigned) (newPointerH << 8)&(unsigned) 0xff00)));
  7832  003D6A  0E00               	movlw	0
  7833  003D6C  0100               	movlb	0	; () banked
  7834  003D6E  6F6F               	movwf	??_ethernetController_updateNextPacketPointer& (0+255),b
  7835  003D70  0EFF               	movlw	255
  7836  003D72  6F70               	movwf	(??_ethernetController_updateNextPacketPointer+1)& (0+255),b
  7837  003D74  5179               	movf	ethernetController_updateNextPacketPointer@newPointerH& (0+255),w,b
  7838  003D76  6F72               	movwf	(??_ethernetController_updateNextPacketPointer+3)& (0+255),b
  7839  003D78  6B71               	clrf	(??_ethernetController_updateNextPacketPointer+2)& (0+255),b
  7840  003D7A  516F               	movf	??_ethernetController_updateNextPacketPointer& (0+255),w,b
  7841  003D7C  1771               	andwf	(??_ethernetController_updateNextPacketPointer+2)& (0+255),f,b
  7842  003D7E  5170               	movf	(??_ethernetController_updateNextPacketPointer+1)& (0+255),w,b
  7843  003D80  1772               	andwf	(??_ethernetController_updateNextPacketPointer+3)& (0+255),f,b
  7844  003D82  5178               	movf	ethernetController_updateNextPacketPointer@newPointerL& (0+255),w,b
  7845  003D84  6F73               	movwf	(??_ethernetController_updateNextPacketPointer+4)& (0+255),b
  7846  003D86  6B74               	clrf	(??_ethernetController_updateNextPacketPointer+5)& (0+255),b
  7847  003D88  5171               	movf	(??_ethernetController_updateNextPacketPointer+2)& (0+255),w,b
  7848  003D8A  1173               	iorwf	(??_ethernetController_updateNextPacketPointer+4)& (0+255),w,b
  7849  003D8C  6F60               	movwf	enc424j600_setNextPacketPointer@ptr& (0+255),b
  7850  003D8E  5172               	movf	(??_ethernetController_updateNextPacketPointer+3)& (0+255),w,b
  7851  003D90  1174               	iorwf	(??_ethernetController_updateNextPacketPointer+5)& (0+255),w,b
  7852  003D92  6F61               	movwf	(enc424j600_setNextPacketPointer@ptr+1)& (0+255),b
  7853  003D94  EC2B  F026         	call	_enc424j600_setNextPacketPointer	;wreg free
  7854  003D98  0012               	return		;funcret
  7855  003D9A                     __end_of_ethernetController_updateNextPacketPointer:
  7856                           	opt stack 0
  7857                           tblptru	equ	0xFF8
  7858                           tblptrh	equ	0xFF7
  7859                           tblptrl	equ	0xFF6
  7860                           tablat	equ	0xFF5
  7861                           prodh	equ	0xFF4
  7862                           prodl	equ	0xFF3
  7863                           intcon	equ	0xFF2
  7864                           intcon3	equ	0xFF0
  7865                           indf0	equ	0xFEF
  7866                           postinc0	equ	0xFEE
  7867                           plusw0	equ	0xFEB
  7868                           fsr0h	equ	0xFEA
  7869                           fsr0l	equ	0xFE9
  7870                           wreg	equ	0xFE8
  7871                           postinc1	equ	0xFE6
  7872                           postdec1	equ	0xFE5
  7873                           plusw1	equ	0xFE3
  7874                           fsr1h	equ	0xFE2
  7875                           fsr1l	equ	0xFE1
  7876                           indf2	equ	0xFDF
  7877                           postinc2	equ	0xFDE
  7878                           postdec2	equ	0xFDD
  7879                           plusw2	equ	0xFDB
  7880                           fsr2h	equ	0xFDA
  7881                           fsr2l	equ	0xFD9
  7882                           status	equ	0xFD8
  7883                           
  7884 ;; *************** function _ethernetController_getRSV *****************
  7885 ;; Defined at:
  7886 ;;		line 299 in file "src/enc424j600/ENC424J600.c"
  7887 ;; Parameters:    Size  Location     Type
  7888 ;;  address         2   17[BANK0 ] unsigned int 
  7889 ;; Auto vars:     Size  Location     Type
  7890 ;;  i               1   23[BANK0 ] unsigned char 
  7891 ;;  opcode          1   22[BANK0 ] unsigned char 
  7892 ;; Return value:  Size  Location     Type
  7893 ;;                  5   17[BANK0 ] struct RSV
  7894 ;; Registers used:
  7895 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7896 ;; Tracked objects:
  7897 ;;		On entry : 0/0
  7898 ;;		On exit  : 0/0
  7899 ;;		Unchanged: 0/0
  7900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7901 ;;      Params:         0       5       0       0       0       0       0       0       0
  7902 ;;      Locals:         0       2       0       0       0       0       0       0       0
  7903 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7904 ;;      Totals:         0       7       0       0       0       0       0       0       0
  7905 ;;Total ram usage:        7 bytes
  7906 ;; Hardware stack levels used:    1
  7907 ;; Hardware stack levels required when called:    7
  7908 ;; This function calls:
  7909 ;;		_enc424j600_readSPI
  7910 ;;		_enc424j600_setERXDATAReadPointer
  7911 ;;		_enc424j600_updateReceiveStatusVector
  7912 ;;		_enc424j600_writeSPI
  7913 ;; This function is called by:
  7914 ;;		_ethernet_rxGetNewFrame
  7915 ;; This function uses a non-reentrant model
  7916 ;;
  7917                           
  7918                           	psect	text20
  7919  003E12                     __ptext20:
  7920                           	opt stack 0
  7921  003E12                     _ethernetController_getRSV:
  7922                           	opt stack 21
  7923                           
  7924                           ;ENC424J600.c: 300: uint8_t static temp[6];
  7925                           ;ENC424J600.c: 301: enc424j600_setERXDATAReadPointer(address + 2);
  7926                           
  7927                           ;incstack = 0
  7928  003E12  0E02               	movlw	2
  7929  003E14  0100               	movlb	0	; () banked
  7930  003E16  2571               	addwf	ethernetController_getRSV@address& (0+255),w,b
  7931  003E18  6F6A               	movwf	enc424j600_setERXDATAReadPointer@addr& (0+255),b
  7932  003E1A  0E00               	movlw	0
  7933  003E1C  2172               	addwfc	(ethernetController_getRSV@address+1)& (0+255),w,b
  7934  003E1E  6F6B               	movwf	(enc424j600_setERXDATAReadPointer@addr+1)& (0+255),b
  7935  003E20  ECA4  F023         	call	_enc424j600_setERXDATAReadPointer	;wreg free
  7936                           
  7937                           ;ENC424J600.c: 302: uint8_t opcode = 0x2C;
  7938  003E24  0E2C               	movlw	44
  7939  003E26  0100               	movlb	0	; () banked
  7940  003E28  6F76               	movwf	ethernetController_getRSV@opcode& (0+255),b
  7941                           
  7942                           ; BSR set to: 0
  7943                           ;ENC424J600.c: 303: PORTBbits.RB4=0;
  7944  003E2A  9881               	bcf	3969,4,c	;volatile
  7945                           
  7946                           ; BSR set to: 0
  7947                           ;ENC424J600.c: 304: enc424j600_writeSPI(&opcode);
  7948  003E2C  0E76               	movlw	low ethernetController_getRSV@opcode
  7949  003E2E  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
  7950  003E30  0E00               	movlw	high ethernetController_getRSV@opcode
  7951  003E32  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
  7952  003E34  ECC2  F020         	call	_enc424j600_writeSPI	;wreg free
  7953                           
  7954                           ;ENC424J600.c: 305: for (uint8_t i = 0; i < 6; i++) {
  7955  003E38  0E00               	movlw	0
  7956  003E3A  0100               	movlb	0	; () banked
  7957  003E3C  6F77               	movwf	ethernetController_getRSV@i& (0+255),b
  7958  003E3E                     l8916:
  7959                           
  7960                           ; BSR set to: 0
  7961  003E3E  0E05               	movlw	5
  7962  003E40  6577               	cpfsgt	ethernetController_getRSV@i& (0+255),b
  7963  003E42  D001               	goto	l165
  7964  003E44  D00D               	goto	u10460
  7965  003E46                     l165:
  7966                           
  7967                           ; BSR set to: 0
  7968                           ;ENC424J600.c: 306: enc424j600_readSPI(&temp[i]);
  7969                           
  7970                           ; BSR set to: 0
  7971  003E46  5177               	movf	ethernetController_getRSV@i& (0+255),w,b
  7972  003E48  0D01               	mullw	1
  7973  003E4A  0EEB               	movlw	low ethernetController_getRSV@temp
  7974  003E4C  24F3               	addwf	prodl,w,c
  7975  003E4E  6F60               	movwf	enc424j600_readSPI@data& (0+255),b
  7976  003E50  0E01               	movlw	high ethernetController_getRSV@temp
  7977  003E52  20F4               	addwfc	prodh,w,c
  7978  003E54  6F61               	movwf	(enc424j600_readSPI@data+1)& (0+255),b
  7979  003E56  EC26  F020         	call	_enc424j600_readSPI	;wreg free
  7980  003E5A  0100               	movlb	0	; () banked
  7981  003E5C  2B77               	incf	ethernetController_getRSV@i& (0+255),f,b
  7982  003E5E  D7EF               	goto	l8916
  7983  003E60                     u10460:
  7984                           
  7985                           ; BSR set to: 0
  7986                           ;ENC424J600.c: 307: }
  7987                           ;ENC424J600.c: 308: PORTBbits.RB4=1;
  7988  003E60  8881               	bsf	3969,4,c	;volatile
  7989                           
  7990                           ; BSR set to: 0
  7991                           ;ENC424J600.c: 309: return enc424j600_updateReceiveStatusVector(&temp[0]);
  7992  003E62  0EEB               	movlw	low ethernetController_getRSV@temp
  7993  003E64  6F60               	movwf	enc424j600_updateReceiveStatusVector@rsv& (0+255),b
  7994  003E66  0E01               	movlw	high ethernetController_getRSV@temp
  7995  003E68  6F61               	movwf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),b
  7996  003E6A  EC38  F009         	call	_enc424j600_updateReceiveStatusVector	;wreg free
  7997  003E6E  CFE9 FFD9          	movff	fsr0l,fsr2l
  7998  003E72  CFEA FFDA          	movff	fsr0h,fsr2h
  7999  003E76  EE00  F071         	lfsr	0,?_ethernetController_getRSV
  8000  003E7A  0E04               	movlw	4
  8001  003E7C                     u10471:
  8002  003E7C  CFDB FFEB          	movff	plusw2,plusw0
  8003  003E80  06E8               	decf	wreg,f,c
  8004  003E82  E2FC               	bc	u10471
  8005  003E84  0012               	return	
  8006  003E86                     __end_of_ethernetController_getRSV:
  8007                           	opt stack 0
  8008                           tblptru	equ	0xFF8
  8009                           tblptrh	equ	0xFF7
  8010                           tblptrl	equ	0xFF6
  8011                           tablat	equ	0xFF5
  8012                           prodh	equ	0xFF4
  8013                           prodl	equ	0xFF3
  8014                           intcon	equ	0xFF2
  8015                           intcon3	equ	0xFF0
  8016                           indf0	equ	0xFEF
  8017                           postinc0	equ	0xFEE
  8018                           plusw0	equ	0xFEB
  8019                           fsr0h	equ	0xFEA
  8020                           fsr0l	equ	0xFE9
  8021                           wreg	equ	0xFE8
  8022                           postinc1	equ	0xFE6
  8023                           postdec1	equ	0xFE5
  8024                           plusw1	equ	0xFE3
  8025                           fsr1h	equ	0xFE2
  8026                           fsr1l	equ	0xFE1
  8027                           indf2	equ	0xFDF
  8028                           postinc2	equ	0xFDE
  8029                           postdec2	equ	0xFDD
  8030                           plusw2	equ	0xFDB
  8031                           fsr2h	equ	0xFDA
  8032                           fsr2l	equ	0xFD9
  8033                           status	equ	0xFD8
  8034                           
  8035 ;; *************** function _enc424j600_updateReceiveStatusVector *****************
  8036 ;; Defined at:
  8037 ;;		line 719 in file "src/enc424j600/ENC424J600.c"
  8038 ;; Parameters:    Size  Location     Type
  8039 ;;  rsv             2    0[BANK0 ] PTR unsigned char 
  8040 ;;		 -> ethernetController_getRSV@temp(6), 
  8041 ;; Auto vars:     Size  Location     Type
  8042 ;;  receiveStatu    5   12[BANK0 ] struct RSV
  8043 ;; Return value:  Size  Location     Type
  8044 ;;                  5    0[BANK0 ] struct RSV
  8045 ;; Registers used:
  8046 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
  8047 ;; Tracked objects:
  8048 ;;		On entry : 0/0
  8049 ;;		On exit  : 0/0
  8050 ;;		Unchanged: 0/0
  8051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8052 ;;      Params:         0       5       0       0       0       0       0       0       0
  8053 ;;      Locals:         0       5       0       0       0       0       0       0       0
  8054 ;;      Temps:          0       7       0       0       0       0       0       0       0
  8055 ;;      Totals:         0      17       0       0       0       0       0       0       0
  8056 ;;Total ram usage:       17 bytes
  8057 ;; Hardware stack levels used:    1
  8058 ;; Hardware stack levels required when called:    4
  8059 ;; This function calls:
  8060 ;;		Nothing
  8061 ;; This function is called by:
  8062 ;;		_ethernetController_getRSV
  8063 ;; This function uses a non-reentrant model
  8064 ;;
  8065                           
  8066                           	psect	text21
  8067  001270                     __ptext21:
  8068                           	opt stack 0
  8069  001270                     _enc424j600_updateReceiveStatusVector:
  8070                           	opt stack 23
  8071                           
  8072                           ;ENC424J600.c: 720: RSV_t receiveStatusVector;
  8073                           ;ENC424J600.c: 723: receiveStatusVector.length = (uint16_t) ((*(rsv + 0)) | (uint16_t) (
      +                          ((*(rsv + 1)) << 8)&0xff00));
  8074                           
  8075                           ;incstack = 0
  8076  001270  0E00               	movlw	0
  8077  001272  0100               	movlb	0	; () banked
  8078  001274  6F65               	movwf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8079  001276  0EFF               	movlw	255
  8080  001278  6F66               	movwf	(??_enc424j600_updateReceiveStatusVector+1)& (0+255),b
  8081  00127A  EE20 F001          	lfsr	2,1
  8082  00127E  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  8083  001280  26D9               	addwf	fsr2l,f,c
  8084  001282  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8085  001284  22DA               	addwfc	fsr2h,f,c
  8086  001286  50DF               	movf	indf2,w,c
  8087  001288  6F67               	movwf	(??_enc424j600_updateReceiveStatusVector+2)& (0+255),b
  8088  00128A  5167               	movf	(??_enc424j600_updateReceiveStatusVector+2)& (0+255),w,b
  8089  00128C  6F69               	movwf	(??_enc424j600_updateReceiveStatusVector+4)& (0+255),b
  8090  00128E  6B68               	clrf	(??_enc424j600_updateReceiveStatusVector+3)& (0+255),b
  8091  001290  5165               	movf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8092  001292  1768               	andwf	(??_enc424j600_updateReceiveStatusVector+3)& (0+255),f,b
  8093  001294  5166               	movf	(??_enc424j600_updateReceiveStatusVector+1)& (0+255),w,b
  8094  001296  1769               	andwf	(??_enc424j600_updateReceiveStatusVector+4)& (0+255),f,b
  8095  001298  C060  FFD9         	movff	enc424j600_updateReceiveStatusVector@rsv,fsr2l
  8096  00129C  C061  FFDA         	movff	enc424j600_updateReceiveStatusVector@rsv+1,fsr2h
  8097  0012A0  50DF               	movf	indf2,w,c
  8098  0012A2  6F6A               	movwf	(??_enc424j600_updateReceiveStatusVector+5)& (0+255),b
  8099  0012A4  6B6B               	clrf	(??_enc424j600_updateReceiveStatusVector+6)& (0+255),b
  8100  0012A6  5168               	movf	(??_enc424j600_updateReceiveStatusVector+3)& (0+255),w,b
  8101  0012A8  116A               	iorwf	(??_enc424j600_updateReceiveStatusVector+5)& (0+255),w,b
  8102  0012AA  6F6C               	movwf	enc424j600_updateReceiveStatusVector@receiveStatusVector& (0+255),b
  8103  0012AC  5169               	movf	(??_enc424j600_updateReceiveStatusVector+4)& (0+255),w,b
  8104  0012AE  116B               	iorwf	(??_enc424j600_updateReceiveStatusVector+6)& (0+255),w,b
  8105  0012B0  6F6D               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+1)& (0+255),b
  8106                           
  8107                           ;ENC424J600.c: 725: receiveStatusVector.packetPreviouslyIgnored = (uint8_t) (*(rsv + 2) 
      +                          & 0b00000001) != 0 ? 1 : 0;
  8108  0012B2  EE20 F002          	lfsr	2,2
  8109  0012B6  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  8110  0012B8  26D9               	addwf	fsr2l,f,c
  8111  0012BA  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8112  0012BC  22DA               	addwfc	fsr2h,f,c
  8113  0012BE  A0DF               	btfss	indf2,0,c
  8114  0012C0  D003               	goto	u9610
  8115  0012C2  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8116  0012C4  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8117  0012C6  D002               	goto	u9628
  8118  0012C8                     u9610:
  8119  0012C8  0100               	movlb	0	; () banked
  8120  0012CA  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8121  0012CC                     u9628:
  8122  0012CC  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  8123  0012CE  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8124  0012D0  0BFE               	andlw	-2
  8125  0012D2  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8126  0012D4  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  8127                           
  8128                           ;ENC424J600.c: 726: receiveStatusVector.carrierEventPreviouslySeen = (uint8_t) (*(rsv + 
      +                          2) & 0b00000100) != 0 ? 1 : 0;
  8129  0012D6  EE20 F002          	lfsr	2,2
  8130  0012DA  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  8131  0012DC  26D9               	addwf	fsr2l,f,c
  8132  0012DE  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8133  0012E0  22DA               	addwfc	fsr2h,f,c
  8134  0012E2  A4DF               	btfss	indf2,2,c
  8135  0012E4  D003               	goto	u9630
  8136  0012E6  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8137  0012E8  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8138  0012EA  D002               	goto	u9648
  8139  0012EC                     u9630:
  8140  0012EC  0100               	movlb	0	; () banked
  8141  0012EE  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8142  0012F0                     u9648:
  8143  0012F0  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8144  0012F2  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  8145  0012F4  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8146  0012F6  0BFD               	andlw	-3
  8147  0012F8  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8148  0012FA  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  8149                           
  8150                           ;ENC424J600.c: 727: receiveStatusVector.CRCError = (uint8_t) (*(rsv + 2) & 0b00010000) !
      +                          = 0 ? 1 : 0;
  8151  0012FC  EE20 F002          	lfsr	2,2
  8152  001300  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  8153  001302  26D9               	addwf	fsr2l,f,c
  8154  001304  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8155  001306  22DA               	addwfc	fsr2h,f,c
  8156  001308  A8DF               	btfss	indf2,4,c
  8157  00130A  D003               	goto	u9650
  8158  00130C  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8159  00130E  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8160  001310  D002               	goto	u9668
  8161  001312                     u9650:
  8162  001312  0100               	movlb	0	; () banked
  8163  001314  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8164  001316                     u9668:
  8165  001316  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8166  001318  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8167  00131A  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  8168  00131C  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8169  00131E  0BFB               	andlw	-5
  8170  001320  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8171  001322  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  8172                           
  8173                           ;ENC424J600.c: 728: receiveStatusVector.lengthCheckError = (uint8_t) (*(rsv + 2) & 0b001
      +                          00000) != 0 ? 1 : 0;
  8174  001324  EE20 F002          	lfsr	2,2
  8175  001328  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  8176  00132A  26D9               	addwf	fsr2l,f,c
  8177  00132C  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8178  00132E  22DA               	addwfc	fsr2h,f,c
  8179  001330  AADF               	btfss	indf2,5,c
  8180  001332  D003               	goto	u9670
  8181  001334  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8182  001336  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8183  001338  D002               	goto	u9688
  8184  00133A                     u9670:
  8185  00133A  0100               	movlb	0	; () banked
  8186  00133C  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8187  00133E                     u9688:
  8188  00133E  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8189  001340  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8190  001342  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8191  001344  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  8192  001346  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8193  001348  0BF7               	andlw	-9
  8194  00134A  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8195  00134C  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  8196                           
  8197                           ;ENC424J600.c: 729: receiveStatusVector.lengthOutOfRange = (uint8_t) (*(rsv + 2) & 0b010
      +                          00000) != 0 ? 1 : 0;
  8198  00134E  EE20 F002          	lfsr	2,2
  8199  001352  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  8200  001354  26D9               	addwf	fsr2l,f,c
  8201  001356  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8202  001358  22DA               	addwfc	fsr2h,f,c
  8203  00135A  ACDF               	btfss	indf2,6,c
  8204  00135C  D003               	goto	u9690
  8205  00135E  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8206  001360  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8207  001362  D002               	goto	u9708
  8208  001364                     u9690:
  8209  001364  0100               	movlb	0	; () banked
  8210  001366  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8211  001368                     u9708:
  8212  001368  3B65               	swapf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8213  00136A  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  8214  00136C  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8215  00136E  0BEF               	andlw	-17
  8216  001370  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8217  001372  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  8218                           
  8219                           ;ENC424J600.c: 730: receiveStatusVector.receivedOk = (uint8_t) (*(rsv + 2) & 0b10000000)
      +                           != 0 ? 1 : 0;
  8220  001374  EE20 F002          	lfsr	2,2
  8221  001378  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  8222  00137A  26D9               	addwf	fsr2l,f,c
  8223  00137C  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8224  00137E  22DA               	addwfc	fsr2h,f,c
  8225  001380  AEDF               	btfss	indf2,7,c
  8226  001382  D003               	goto	u9710
  8227  001384  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8228  001386  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8229  001388  D002               	goto	u9728
  8230  00138A                     u9710:
  8231  00138A  0100               	movlb	0	; () banked
  8232  00138C  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8233  00138E                     u9728:
  8234  00138E  3B65               	swapf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8235  001390  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8236  001392  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  8237  001394  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8238  001396  0BDF               	andlw	-33
  8239  001398  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8240  00139A  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  8241                           
  8242                           ;ENC424J600.c: 732: receiveStatusVector.multicast = (uint8_t) (*(rsv + 3) & 0b00000001) 
      +                          != 0 ? 1 : 0;
  8243  00139C  EE20 F003          	lfsr	2,3
  8244  0013A0  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  8245  0013A2  26D9               	addwf	fsr2l,f,c
  8246  0013A4  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8247  0013A6  22DA               	addwfc	fsr2h,f,c
  8248  0013A8  A0DF               	btfss	indf2,0,c
  8249  0013AA  D003               	goto	u9730
  8250  0013AC  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8251  0013AE  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8252  0013B0  D002               	goto	u9748
  8253  0013B2                     u9730:
  8254  0013B2  0100               	movlb	0	; () banked
  8255  0013B4  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8256  0013B6                     u9748:
  8257  0013B6  3B65               	swapf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8258  0013B8  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8259  0013BA  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8260  0013BC  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  8261  0013BE  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8262  0013C0  0BBF               	andlw	-65
  8263  0013C2  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8264  0013C4  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  8265                           
  8266                           ;ENC424J600.c: 733: receiveStatusVector.broadcast = (uint8_t) (*(rsv + 3) & 0b00000010) 
      +                          != 0 ? 1 : 0;
  8267  0013C6  EE20 F003          	lfsr	2,3
  8268  0013CA  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  8269  0013CC  26D9               	addwf	fsr2l,f,c
  8270  0013CE  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8271  0013D0  22DA               	addwfc	fsr2h,f,c
  8272  0013D2  A2DF               	btfss	indf2,1,c
  8273  0013D4  D003               	goto	u9750
  8274  0013D6  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8275  0013D8  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8276  0013DA  D002               	goto	u9768
  8277  0013DC                     u9750:
  8278  0013DC  0100               	movlb	0	; () banked
  8279  0013DE  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8280  0013E0                     u9768:
  8281  0013E0  3365               	rrcf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8282  0013E2  3365               	rrcf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8283  0013E4  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  8284  0013E6  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8285  0013E8  0B7F               	andlw	-129
  8286  0013EA  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8287  0013EC  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  8288                           
  8289                           ;ENC424J600.c: 734: receiveStatusVector.controlFrame = (uint8_t) (*(rsv + 3) & 0b0000100
      +                          0) != 0 ? 1 : 0;
  8290  0013EE  EE20 F003          	lfsr	2,3
  8291  0013F2  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  8292  0013F4  26D9               	addwf	fsr2l,f,c
  8293  0013F6  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8294  0013F8  22DA               	addwfc	fsr2h,f,c
  8295  0013FA  A6DF               	btfss	indf2,3,c
  8296  0013FC  D003               	goto	u9770
  8297  0013FE  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8298  001400  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8299  001402  D002               	goto	u9788
  8300  001404                     u9770:
  8301  001404  0100               	movlb	0	; () banked
  8302  001406  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8303  001408                     u9788:
  8304  001408  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8305  00140A  516F               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  8306  00140C  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8307  00140E  0BFD               	andlw	-3
  8308  001410  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8309  001412  6F6F               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  8310                           
  8311                           ;ENC424J600.c: 735: receiveStatusVector.pauseFrame = (uint8_t) (*(rsv + 3) & 0b00010000)
      +                           != 0 ? 1 : 0;
  8312  001414  EE20 F003          	lfsr	2,3
  8313  001418  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  8314  00141A  26D9               	addwf	fsr2l,f,c
  8315  00141C  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8316  00141E  22DA               	addwfc	fsr2h,f,c
  8317  001420  A8DF               	btfss	indf2,4,c
  8318  001422  D003               	goto	u9790
  8319  001424  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8320  001426  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8321  001428  D002               	goto	u9808
  8322  00142A                     u9790:
  8323  00142A  0100               	movlb	0	; () banked
  8324  00142C  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8325  00142E                     u9808:
  8326  00142E  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8327  001430  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8328  001432  516F               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  8329  001434  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8330  001436  0BFB               	andlw	-5
  8331  001438  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8332  00143A  6F6F               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  8333                           
  8334                           ;ENC424J600.c: 736: receiveStatusVector.unknownOpcode = (uint8_t) (*(rsv + 3) & 0b001000
      +                          00) != 0 ? 1 : 0;
  8335  00143C  EE20 F003          	lfsr	2,3
  8336  001440  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  8337  001442  26D9               	addwf	fsr2l,f,c
  8338  001444  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8339  001446  22DA               	addwfc	fsr2h,f,c
  8340  001448  AADF               	btfss	indf2,5,c
  8341  00144A  D003               	goto	u9810
  8342  00144C  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8343  00144E  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8344  001450  D002               	goto	u9828
  8345  001452                     u9810:
  8346  001452  0100               	movlb	0	; () banked
  8347  001454  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8348  001456                     u9828:
  8349  001456  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8350  001458  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8351  00145A  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8352  00145C  516F               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  8353  00145E  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8354  001460  0BF7               	andlw	-9
  8355  001462  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8356  001464  6F6F               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  8357                           
  8358                           ;ENC424J600.c: 737: receiveStatusVector.vlan = (uint8_t) (*(rsv + 3) & 0b01000000) != 0 
      +                          ? 1 : 0;
  8359  001466  EE20 F003          	lfsr	2,3
  8360  00146A  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  8361  00146C  26D9               	addwf	fsr2l,f,c
  8362  00146E  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8363  001470  22DA               	addwfc	fsr2h,f,c
  8364  001472  ACDF               	btfss	indf2,6,c
  8365  001474  D003               	goto	u9830
  8366  001476  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8367  001478  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8368  00147A  D002               	goto	u9848
  8369  00147C                     u9830:
  8370  00147C  0100               	movlb	0	; () banked
  8371  00147E  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8372  001480                     u9848:
  8373  001480  3B65               	swapf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8374  001482  516F               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  8375  001484  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8376  001486  0BEF               	andlw	-17
  8377  001488  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8378  00148A  6F6F               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  8379                           
  8380                           ;ENC424J600.c: 738: receiveStatusVector.runtFilter = (uint8_t) (*(rsv + 3) & 0b10000000)
      +                           != 0 ? 1 : 0;
  8381  00148C  EE20 F003          	lfsr	2,3
  8382  001490  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  8383  001492  26D9               	addwf	fsr2l,f,c
  8384  001494  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8385  001496  22DA               	addwfc	fsr2h,f,c
  8386  001498  AEDF               	btfss	indf2,7,c
  8387  00149A  D003               	goto	u9850
  8388  00149C  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8389  00149E  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8390  0014A0  D002               	goto	u9868
  8391  0014A2                     u9850:
  8392  0014A2  0100               	movlb	0	; () banked
  8393  0014A4  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8394  0014A6                     u9868:
  8395  0014A6  3B65               	swapf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8396  0014A8  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8397  0014AA  516F               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  8398  0014AC  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8399  0014AE  0BDF               	andlw	-33
  8400  0014B0  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8401  0014B2  6F6F               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  8402                           
  8403                           ;ENC424J600.c: 740: receiveStatusVector.notMeFilter = (uint8_t) (*(rsv + 4) & 0b00000001
      +                          ) != 0 ? 1 : 0;
  8404  0014B4  EE20 F004          	lfsr	2,4
  8405  0014B8  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  8406  0014BA  26D9               	addwf	fsr2l,f,c
  8407  0014BC  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8408  0014BE  22DA               	addwfc	fsr2h,f,c
  8409  0014C0  A0DF               	btfss	indf2,0,c
  8410  0014C2  D003               	goto	u9870
  8411  0014C4  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8412  0014C6  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8413  0014C8  D002               	goto	u9888
  8414  0014CA                     u9870:
  8415  0014CA  0100               	movlb	0	; () banked
  8416  0014CC  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8417  0014CE                     u9888:
  8418  0014CE  3B65               	swapf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8419  0014D0  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8420  0014D2  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8421  0014D4  516F               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  8422  0014D6  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8423  0014D8  0BBF               	andlw	-65
  8424  0014DA  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8425  0014DC  6F6F               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  8426                           
  8427                           ;ENC424J600.c: 741: receiveStatusVector.hashFilter = (uint8_t) (*(rsv + 4) & 0b00000010)
      +                           != 0 ? 1 : 0;
  8428  0014DE  EE20 F004          	lfsr	2,4
  8429  0014E2  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  8430  0014E4  26D9               	addwf	fsr2l,f,c
  8431  0014E6  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8432  0014E8  22DA               	addwfc	fsr2h,f,c
  8433  0014EA  A2DF               	btfss	indf2,1,c
  8434  0014EC  D003               	goto	u9890
  8435  0014EE  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8436  0014F0  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8437  0014F2  D002               	goto	u9908
  8438  0014F4                     u9890:
  8439  0014F4  0100               	movlb	0	; () banked
  8440  0014F6  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8441  0014F8                     u9908:
  8442  0014F8  3365               	rrcf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8443  0014FA  3365               	rrcf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8444  0014FC  516F               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  8445  0014FE  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8446  001500  0B7F               	andlw	-129
  8447  001502  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8448  001504  6F6F               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  8449                           
  8450                           ;ENC424J600.c: 742: receiveStatusVector.magicFilter = (uint8_t) (*(rsv + 4) & 0b00000100
      +                          ) != 0 ? 1 : 0;
  8451  001506  EE20 F004          	lfsr	2,4
  8452  00150A  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  8453  00150C  26D9               	addwf	fsr2l,f,c
  8454  00150E  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8455  001510  22DA               	addwfc	fsr2h,f,c
  8456  001512  A4DF               	btfss	indf2,2,c
  8457  001514  D003               	goto	u9910
  8458  001516  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8459  001518  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8460  00151A  D002               	goto	u9928
  8461  00151C                     u9910:
  8462  00151C  0100               	movlb	0	; () banked
  8463  00151E  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8464  001520                     u9928:
  8465  001520  5170               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),w,b
  8466  001522  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8467  001524  0BFE               	andlw	-2
  8468  001526  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8469  001528  6F70               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),b
  8470                           
  8471                           ;ENC424J600.c: 743: receiveStatusVector.patternMatch = (uint8_t) (*(rsv + 4) & 0b0000100
      +                          0) != 0 ? 1 : 0;
  8472  00152A  EE20 F004          	lfsr	2,4
  8473  00152E  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  8474  001530  26D9               	addwf	fsr2l,f,c
  8475  001532  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8476  001534  22DA               	addwfc	fsr2h,f,c
  8477  001536  A6DF               	btfss	indf2,3,c
  8478  001538  D003               	goto	u9930
  8479  00153A  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8480  00153C  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8481  00153E  D002               	goto	u9948
  8482  001540                     u9930:
  8483  001540  0100               	movlb	0	; () banked
  8484  001542  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8485  001544                     u9948:
  8486  001544  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8487  001546  5170               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),w,b
  8488  001548  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8489  00154A  0BFD               	andlw	-3
  8490  00154C  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8491  00154E  6F70               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),b
  8492                           
  8493                           ;ENC424J600.c: 744: receiveStatusVector.unicast = (uint8_t) (*(rsv + 4) & 0b00010000) !=
      +                           0 ? 1 : 0;
  8494  001550  EE20 F004          	lfsr	2,4
  8495  001554  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  8496  001556  26D9               	addwf	fsr2l,f,c
  8497  001558  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8498  00155A  22DA               	addwfc	fsr2h,f,c
  8499  00155C  A8DF               	btfss	indf2,4,c
  8500  00155E  D003               	goto	u9950
  8501  001560  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8502  001562  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8503  001564  D002               	goto	u9968
  8504  001566                     u9950:
  8505  001566  0100               	movlb	0	; () banked
  8506  001568  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8507  00156A                     u9968:
  8508  00156A  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8509  00156C  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8510  00156E  5170               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),w,b
  8511  001570  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8512  001572  0BFB               	andlw	-5
  8513  001574  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8514  001576  6F70               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),b
  8515                           
  8516                           ; BSR set to: 0
  8517                           ;ENC424J600.c: 746: return receiveStatusVector;
  8518  001578  EE20  F06C         	lfsr	2,enc424j600_updateReceiveStatusVector@receiveStatusVector
  8519  00157C  EE00  F060         	lfsr	0,?_enc424j600_updateReceiveStatusVector
  8520  001580  0E04               	movlw	4
  8521  001582                     u9971:
  8522  001582  CFDB FFEB          	movff	plusw2,plusw0
  8523  001586  06E8               	decf	wreg,f,c
  8524  001588  E2FC               	bc	u9971
  8525  00158A  0012               	return	
  8526  00158C                     __end_of_enc424j600_updateReceiveStatusVector:
  8527                           	opt stack 0
  8528                           tblptru	equ	0xFF8
  8529                           tblptrh	equ	0xFF7
  8530                           tblptrl	equ	0xFF6
  8531                           tablat	equ	0xFF5
  8532                           prodh	equ	0xFF4
  8533                           prodl	equ	0xFF3
  8534                           intcon	equ	0xFF2
  8535                           intcon3	equ	0xFF0
  8536                           indf0	equ	0xFEF
  8537                           postinc0	equ	0xFEE
  8538                           plusw0	equ	0xFEB
  8539                           fsr0h	equ	0xFEA
  8540                           fsr0l	equ	0xFE9
  8541                           wreg	equ	0xFE8
  8542                           postinc1	equ	0xFE6
  8543                           postdec1	equ	0xFE5
  8544                           plusw1	equ	0xFE3
  8545                           fsr1h	equ	0xFE2
  8546                           fsr1l	equ	0xFE1
  8547                           indf2	equ	0xFDF
  8548                           postinc2	equ	0xFDE
  8549                           postdec2	equ	0xFDD
  8550                           plusw2	equ	0xFDB
  8551                           fsr2h	equ	0xFDA
  8552                           fsr2l	equ	0xFD9
  8553                           status	equ	0xFD8
  8554                           
  8555 ;; *************** function _ethernetController_getEtherTypeField *****************
  8556 ;; Defined at:
  8557 ;;		line 283 in file "src/enc424j600/ENC424J600.c"
  8558 ;; Parameters:    Size  Location     Type
  8559 ;;  field           9   15[BANK0 ] struct memoryField
  8560 ;; Auto vars:     Size  Location     Type
  8561 ;;  ethertype       2   28[BANK0 ] enum E5508
  8562 ;;  highByte        1   32[BANK0 ] unsigned char 
  8563 ;;  lowByte         1   31[BANK0 ] unsigned char 
  8564 ;;  opcode          1   30[BANK0 ] unsigned char 
  8565 ;; Return value:  Size  Location     Type
  8566 ;;                  2   15[BANK0 ] enum E5508
  8567 ;; Registers used:
  8568 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8569 ;; Tracked objects:
  8570 ;;		On entry : 0/0
  8571 ;;		On exit  : 0/0
  8572 ;;		Unchanged: 0/0
  8573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8574 ;;      Params:         0       9       0       0       0       0       0       0       0
  8575 ;;      Locals:         0       5       0       0       0       0       0       0       0
  8576 ;;      Temps:          0       4       0       0       0       0       0       0       0
  8577 ;;      Totals:         0      18       0       0       0       0       0       0       0
  8578 ;;Total ram usage:       18 bytes
  8579 ;; Hardware stack levels used:    1
  8580 ;; Hardware stack levels required when called:    7
  8581 ;; This function calls:
  8582 ;;		_enc424j600_readSPI
  8583 ;;		_enc424j600_setERXDATAReadPointer
  8584 ;;		_enc424j600_writeSPI
  8585 ;; This function is called by:
  8586 ;;		_ethernet_rxGetNewFrame
  8587 ;; This function uses a non-reentrant model
  8588 ;;
  8589                           
  8590                           	psect	text22
  8591  003F6C                     __ptext22:
  8592                           	opt stack 0
  8593  003F6C                     _ethernetController_getEtherTypeField:
  8594                           	opt stack 21
  8595                           
  8596                           ;ENC424J600.c: 284: etherType_t ethertype = 0x0000;
  8597                           
  8598                           ; BSR set to: 0
  8599                           ;incstack = 0
  8600  003F6C  0E00               	movlw	0
  8601  003F6E  0100               	movlb	0	; () banked
  8602  003F70  6F7D               	movwf	(ethernetController_getEtherTypeField@ethertype+1)& (0+255),b
  8603  003F72  0E00               	movlw	0
  8604  003F74  6F7C               	movwf	ethernetController_getEtherTypeField@ethertype& (0+255),b
  8605                           
  8606                           ; BSR set to: 0
  8607                           ;ENC424J600.c: 285: enc424j600_setERXDATAReadPointer(field.start + 20);
  8608  003F76  0E14               	movlw	20
  8609  003F78  256F               	addwf	ethernetController_getEtherTypeField@field& (0+255),w,b
  8610  003F7A  6F6A               	movwf	enc424j600_setERXDATAReadPointer@addr& (0+255),b
  8611  003F7C  0E00               	movlw	0
  8612  003F7E  2170               	addwfc	(ethernetController_getEtherTypeField@field+1)& (0+255),w,b
  8613  003F80  6F6B               	movwf	(enc424j600_setERXDATAReadPointer@addr+1)& (0+255),b
  8614  003F82  ECA4  F023         	call	_enc424j600_setERXDATAReadPointer	;wreg free
  8615                           
  8616                           ;ENC424J600.c: 286: uint8_t opcode = 0x2C;
  8617  003F86  0E2C               	movlw	44
  8618  003F88  0100               	movlb	0	; () banked
  8619  003F8A  6F7E               	movwf	ethernetController_getEtherTypeField@opcode& (0+255),b
  8620                           
  8621                           ; BSR set to: 0
  8622                           ;ENC424J600.c: 287: PORTBbits.RB4=0;
  8623  003F8C  9881               	bcf	3969,4,c	;volatile
  8624                           
  8625                           ;ENC424J600.c: 288: enc424j600_writeSPI(&opcode);
  8626  003F8E  0E7E               	movlw	low ethernetController_getEtherTypeField@opcode
  8627  003F90  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
  8628  003F92  0E00               	movlw	high ethernetController_getEtherTypeField@opcode
  8629  003F94  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
  8630  003F96  ECC2  F020         	call	_enc424j600_writeSPI	;wreg free
  8631                           
  8632                           ;ENC424J600.c: 290: uint8_t lowByte;
  8633                           ;ENC424J600.c: 291: uint8_t highByte;
  8634                           ;ENC424J600.c: 292: enc424j600_readSPI(&highByte);
  8635  003F9A  0E80               	movlw	low ethernetController_getEtherTypeField@highByte
  8636  003F9C  0100               	movlb	0	; () banked
  8637  003F9E  6F60               	movwf	enc424j600_readSPI@data& (0+255),b
  8638  003FA0  0E00               	movlw	high ethernetController_getEtherTypeField@highByte
  8639  003FA2  6F61               	movwf	(enc424j600_readSPI@data+1)& (0+255),b
  8640  003FA4  EC26  F020         	call	_enc424j600_readSPI	;wreg free
  8641                           
  8642                           ;ENC424J600.c: 293: enc424j600_readSPI(&lowByte);
  8643  003FA8  0E7F               	movlw	low ethernetController_getEtherTypeField@lowByte
  8644  003FAA  0100               	movlb	0	; () banked
  8645  003FAC  6F60               	movwf	enc424j600_readSPI@data& (0+255),b
  8646  003FAE  0E00               	movlw	high ethernetController_getEtherTypeField@lowByte
  8647  003FB0  6F61               	movwf	(enc424j600_readSPI@data+1)& (0+255),b
  8648  003FB2  EC26  F020         	call	_enc424j600_readSPI	;wreg free
  8649                           
  8650                           ;ENC424J600.c: 294: ethertype = (uint16_t) (lowByte | (highByte << 8));
  8651  003FB6  0100               	movlb	0	; () banked
  8652  003FB8  5180               	movf	ethernetController_getEtherTypeField@highByte& (0+255),w,b
  8653  003FBA  6F79               	movwf	(??_ethernetController_getEtherTypeField+1)& (0+255),b
  8654  003FBC  6B78               	clrf	??_ethernetController_getEtherTypeField& (0+255),b
  8655  003FBE  517F               	movf	ethernetController_getEtherTypeField@lowByte& (0+255),w,b
  8656  003FC0  6F7A               	movwf	(??_ethernetController_getEtherTypeField+2)& (0+255),b
  8657  003FC2  6B7B               	clrf	(??_ethernetController_getEtherTypeField+3)& (0+255),b
  8658  003FC4  5178               	movf	??_ethernetController_getEtherTypeField& (0+255),w,b
  8659  003FC6  117A               	iorwf	(??_ethernetController_getEtherTypeField+2)& (0+255),w,b
  8660  003FC8  6F7C               	movwf	ethernetController_getEtherTypeField@ethertype& (0+255),b
  8661  003FCA  5179               	movf	(??_ethernetController_getEtherTypeField+1)& (0+255),w,b
  8662  003FCC  117B               	iorwf	(??_ethernetController_getEtherTypeField+3)& (0+255),w,b
  8663  003FCE  6F7D               	movwf	(ethernetController_getEtherTypeField@ethertype+1)& (0+255),b
  8664                           
  8665                           ; BSR set to: 0
  8666                           ;ENC424J600.c: 295: PORTBbits.RB4=1;
  8667  003FD0  8881               	bsf	3969,4,c	;volatile
  8668                           
  8669                           ; BSR set to: 0
  8670                           ;ENC424J600.c: 296: return ethertype;
  8671  003FD2  C07C  F06F         	movff	ethernetController_getEtherTypeField@ethertype,?_ethernetController_getEtherTypeF
      +                          ield
  8672  003FD6  C07D  F070         	movff	ethernetController_getEtherTypeField@ethertype+1,?_ethernetController_getEtherTyp
      +                          eField+1
  8673  003FDA  0012               	return	
  8674  003FDC                     __end_of_ethernetController_getEtherTypeField:
  8675                           	opt stack 0
  8676                           tblptru	equ	0xFF8
  8677                           tblptrh	equ	0xFF7
  8678                           tblptrl	equ	0xFF6
  8679                           tablat	equ	0xFF5
  8680                           prodh	equ	0xFF4
  8681                           prodl	equ	0xFF3
  8682                           intcon	equ	0xFF2
  8683                           intcon3	equ	0xFF0
  8684                           indf0	equ	0xFEF
  8685                           postinc0	equ	0xFEE
  8686                           plusw0	equ	0xFEB
  8687                           fsr0h	equ	0xFEA
  8688                           fsr0l	equ	0xFE9
  8689                           wreg	equ	0xFE8
  8690                           postinc1	equ	0xFE6
  8691                           postdec1	equ	0xFE5
  8692                           plusw1	equ	0xFE3
  8693                           fsr1h	equ	0xFE2
  8694                           fsr1l	equ	0xFE1
  8695                           indf2	equ	0xFDF
  8696                           postinc2	equ	0xFDE
  8697                           postdec2	equ	0xFDD
  8698                           plusw2	equ	0xFDB
  8699                           fsr2h	equ	0xFDA
  8700                           fsr2l	equ	0xFD9
  8701                           status	equ	0xFD8
  8702                           
  8703 ;; *************** function _etherTypeToString *****************
  8704 ;; Defined at:
  8705 ;;		line 138 in file "src/system/uart.c"
  8706 ;; Parameters:    Size  Location     Type
  8707 ;;  ethertype       2    0[BANK0 ] enum E5590
  8708 ;; Auto vars:     Size  Location     Type
  8709 ;;		None
  8710 ;; Return value:  Size  Location     Type
  8711 ;;                  2    0[BANK0 ] PTR unsigned char 
  8712 ;; Registers used:
  8713 ;;		wreg, status,2, status,0
  8714 ;; Tracked objects:
  8715 ;;		On entry : 0/0
  8716 ;;		On exit  : 0/0
  8717 ;;		Unchanged: 0/0
  8718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8719 ;;      Params:         0       2       0       0       0       0       0       0       0
  8720 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8721 ;;      Temps:          0       2       0       0       0       0       0       0       0
  8722 ;;      Totals:         0       4       0       0       0       0       0       0       0
  8723 ;;Total ram usage:        4 bytes
  8724 ;; Hardware stack levels used:    1
  8725 ;; Hardware stack levels required when called:    4
  8726 ;; This function calls:
  8727 ;;		Nothing
  8728 ;; This function is called by:
  8729 ;;		_ethernet_rxGetNewFrame
  8730 ;; This function uses a non-reentrant model
  8731 ;;
  8732                           
  8733                           	psect	text23
  8734  0045C4                     __ptext23:
  8735                           	opt stack 0
  8736  0045C4                     _etherTypeToString:
  8737                           	opt stack 24
  8738                           
  8739                           ;uart.c: 139: switch (ethertype) {
  8740                           
  8741                           ; BSR set to: 0
  8742                           ;incstack = 0
  8743  0045C4  D010               	goto	l797
  8744  0045C6                     
  8745                           ;uart.c: 141: return "IPv4";
  8746  0045C6  0ECD               	movlw	low STR_52
  8747  0045C8  0100               	movlb	0	; () banked
  8748  0045CA  6F60               	movwf	?_etherTypeToString& (0+255),b
  8749  0045CC  0E7F               	movlw	high STR_52
  8750  0045CE  6F61               	movwf	(?_etherTypeToString+1)& (0+255),b
  8751                           
  8752                           ; BSR set to: 0
  8753  0045D0  0012               	return	
  8754  0045D2                     
  8755                           ; BSR set to: 0
  8756                           ;uart.c: 143: return "ARP";
  8757                           
  8758                           ; BSR set to: 0
  8759  0045D2  0EED               	movlw	low STR_53
  8760  0045D4  6F60               	movwf	?_etherTypeToString& (0+255),b
  8761  0045D6  0E7F               	movlw	high STR_53
  8762  0045D8  6F61               	movwf	(?_etherTypeToString+1)& (0+255),b
  8763                           
  8764                           ; BSR set to: 0
  8765  0045DA  0012               	return	
  8766  0045DC                     
  8767                           ; BSR set to: 0
  8768                           ;uart.c: 145: return "Unknown EtherType";
  8769                           
  8770                           ; BSR set to: 0
  8771  0045DC  0EA6               	movlw	low STR_54
  8772  0045DE  6F60               	movwf	?_etherTypeToString& (0+255),b
  8773  0045E0  0E7E               	movlw	high STR_54
  8774  0045E2  6F61               	movwf	(?_etherTypeToString+1)& (0+255),b
  8775                           
  8776                           ; BSR set to: 0
  8777                           ;uart.c: 146: }
  8778                           
  8779                           ; BSR set to: 0
  8780  0045E4  0012               	return	
  8781  0045E6                     l797:
  8782                           
  8783                           ; BSR set to: 0
  8784  0045E6  C060  F062         	movff	etherTypeToString@ethertype,??_etherTypeToString
  8785  0045EA  C061  F063         	movff	etherTypeToString@ethertype+1,??_etherTypeToString+1
  8786                           
  8787                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8788                           ; Switch size 1, requested type "space"
  8789                           ; Number of cases is 1, Range of values is 8 to 8
  8790                           ; switch strategies available:
  8791                           ; Name         Instructions Cycles
  8792                           ; simple_byte            4     3 (average)
  8793                           ;	Chosen strategy is simple_byte
  8794  0045EE  0100               	movlb	0	; () banked
  8795  0045F0  5163               	movf	(??_etherTypeToString+1)& (0+255),w,b
  8796  0045F2  0A08               	xorlw	8	; case 8
  8797  0045F4  A4D8               	btfss	status,2,c
  8798  0045F6  D7F2               	goto	l801
  8799                           
  8800                           ; BSR set to: 0
  8801                           ; Switch size 1, requested type "space"
  8802                           ; Number of cases is 2, Range of values is 0 to 6
  8803                           ; switch strategies available:
  8804                           ; Name         Instructions Cycles
  8805                           ; simple_byte            7     4 (average)
  8806                           ;	Chosen strategy is simple_byte
  8807  0045F8  5162               	movf	??_etherTypeToString& (0+255),w,b
  8808  0045FA  0A00               	xorlw	0	; case 0
  8809  0045FC  B4D8               	btfsc	status,2,c
  8810  0045FE  D7E3               	goto	l798
  8811  004600  0A06               	xorlw	6	; case 6
  8812  004602  B4D8               	btfsc	status,2,c
  8813  004604  D7E6               	goto	l800
  8814  004606  D7EA               	goto	l801
  8815  004608                     __end_of_etherTypeToString:
  8816                           	opt stack 0
  8817                           tblptru	equ	0xFF8
  8818                           tblptrh	equ	0xFF7
  8819                           tblptrl	equ	0xFF6
  8820                           tablat	equ	0xFF5
  8821                           prodh	equ	0xFF4
  8822                           prodl	equ	0xFF3
  8823                           intcon	equ	0xFF2
  8824                           intcon3	equ	0xFF0
  8825                           indf0	equ	0xFEF
  8826                           postinc0	equ	0xFEE
  8827                           plusw0	equ	0xFEB
  8828                           fsr0h	equ	0xFEA
  8829                           fsr0l	equ	0xFE9
  8830                           wreg	equ	0xFE8
  8831                           postinc1	equ	0xFE6
  8832                           postdec1	equ	0xFE5
  8833                           plusw1	equ	0xFE3
  8834                           fsr1h	equ	0xFE2
  8835                           fsr1l	equ	0xFE1
  8836                           indf2	equ	0xFDF
  8837                           postinc2	equ	0xFDE
  8838                           postdec2	equ	0xFDD
  8839                           plusw2	equ	0xFDB
  8840                           fsr2h	equ	0xFDA
  8841                           fsr2l	equ	0xFD9
  8842                           status	equ	0xFD8
  8843                           
  8844 ;; *************** function _arp_handleNewPacket *****************
  8845 ;; Defined at:
  8846 ;;		line 33 in file "src/stack/protocols/arp.c"
  8847 ;; Parameters:    Size  Location     Type
  8848 ;;  frame           2  156[BANK0 ] PTR struct ethernetFrame
  8849 ;;		 -> stack.ethernet(15), stack(121), 
  8850 ;; Auto vars:     Size  Location     Type
  8851 ;;  arp            32   88[BANK1 ] struct arp_message
  8852 ;; Return value:  Size  Location     Type
  8853 ;;                  1    wreg      void 
  8854 ;; Registers used:
  8855 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8856 ;; Tracked objects:
  8857 ;;		On entry : 0/0
  8858 ;;		On exit  : 0/0
  8859 ;;		Unchanged: 0/0
  8860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8861 ;;      Params:         0       2       0       0       0       0       0       0       0
  8862 ;;      Locals:         0       0      32       0       0       0       0       0       0
  8863 ;;      Temps:          0       2       0       0       0       0       0       0       0
  8864 ;;      Totals:         0       4      32       0       0       0       0       0       0
  8865 ;;Total ram usage:       36 bytes
  8866 ;; Hardware stack levels used:    1
  8867 ;; Hardware stack levels required when called:   11
  8868 ;; This function calls:
  8869 ;;		_UARTTransmitText
  8870 ;;		_arp_parseFromRXBuffer
  8871 ;;		_arp_sendReply
  8872 ;;		_arp_setNewEntry
  8873 ;;		_ethernetController_dropPacket
  8874 ;;		_getMillis
  8875 ;;		_ipAdressToString
  8876 ;;		_macToString
  8877 ;; This function is called by:
  8878 ;;		_ethernet_rxGetNewFrame
  8879 ;; This function uses a non-reentrant model
  8880 ;;
  8881                           
  8882                           	psect	text24
  8883  002208                     __ptext24:
  8884                           	opt stack 0
  8885  002208                     _arp_handleNewPacket:
  8886                           	opt stack 17
  8887                           
  8888                           ;arp.c: 34: arp_message_t arp;
  8889                           ;arp.c: 35: if (frame->ethertype != ETHERTYPE_ARP) {
  8890                           
  8891                           ; BSR set to: 0
  8892                           ;incstack = 0
  8893  002208  0100               	movlb	0	; () banked
  8894  00220A  EE20 F00E          	lfsr	2,14
  8895  00220E  51FC               	movf	arp_handleNewPacket@frame& (0+255),w,b
  8896  002210  26D9               	addwf	fsr2l,f,c
  8897  002212  51FD               	movf	(arp_handleNewPacket@frame+1)& (0+255),w,b
  8898  002214  22DA               	addwfc	fsr2h,f,c
  8899  002216  0E06               	movlw	6
  8900  002218  18DE               	xorwf	postinc2,w,c
  8901  00221A  E104               	bnz	u10540
  8902  00221C  0E08               	movlw	8
  8903  00221E  18DE               	xorwf	postinc2,w,c
  8904  002220  B4D8               	btfsc	status,2,c
  8905  002222  D007               	goto	l900
  8906  002224                     u10540:
  8907                           
  8908                           ; BSR set to: 0
  8909                           ;arp.c: 36: ethernetController_dropPacket(frame);
  8910  002224  C0FC  F072         	movff	arp_handleNewPacket@frame,ethernetController_dropPacket@frame
  8911  002228  C0FD  F073         	movff	arp_handleNewPacket@frame+1,ethernetController_dropPacket@frame+1
  8912  00222C  EC68  F023         	call	_ethernetController_dropPacket	;wreg free
  8913                           
  8914                           ;arp.c: 37: return;
  8915  002230  0012               	return	
  8916  002232                     l900:
  8917                           
  8918                           ;arp.c: 38: }
  8919                           ;arp.c: 40: arp = arp_parseFromRXBuffer(frame);
  8920  002232  C0FC  F074         	movff	arp_handleNewPacket@frame,arp_parseFromRXBuffer@frame
  8921  002236  C0FD  F075         	movff	arp_handleNewPacket@frame+1,arp_parseFromRXBuffer@frame+1
  8922  00223A  EC77  F005         	call	_arp_parseFromRXBuffer	;wreg free
  8923  00223E  EE21  F058         	lfsr	2,arp_handleNewPacket@arp
  8924  002242  0E1F               	movlw	31
  8925  002244                     u10551:
  8926  002244  CFEB FFDB          	movff	plusw0,plusw2
  8927  002248  06E8               	decf	wreg,f,c
  8928  00224A  E2FC               	bc	u10551
  8929                           
  8930                           ;arp.c: 41: if (arp.err.code != (uint16_t)0) {
  8931  00224C  0101               	movlb	1	; () banked
  8932  00224E  5176               	movf	(arp_handleNewPacket@arp+30)& (0+255),w,b
  8933  002250  1177               	iorwf	(arp_handleNewPacket@arp+31)& (0+255),w,b
  8934  002252  B4D8               	btfsc	status,2,c
  8935  002254  D00E               	goto	l902
  8936                           
  8937                           ; BSR set to: 1
  8938                           ;arp.c: 42: ethernetController_dropPacket(frame);
  8939  002256  C0FC  F072         	movff	arp_handleNewPacket@frame,ethernetController_dropPacket@frame
  8940  00225A  C0FD  F073         	movff	arp_handleNewPacket@frame+1,ethernetController_dropPacket@frame+1
  8941  00225E  EC68  F023         	call	_ethernetController_dropPacket	;wreg free
  8942                           
  8943                           ;arp.c: 43: UARTTransmitText("[Invalid ARP Message was discarded.]\r\n");
  8944  002262  0ED9               	movlw	low STR_59
  8945  002264  0100               	movlb	0	; () banked
  8946  002266  6F98               	movwf	UARTTransmitText@str& (0+255),b
  8947  002268  0E7B               	movlw	high STR_59
  8948  00226A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  8949  00226C  EC7A  F021         	call	_UARTTransmitText	;wreg free
  8950                           
  8951                           ;arp.c: 44: return;
  8952  002270  0012               	return	
  8953  002272                     l902:
  8954                           
  8955                           ;arp.c: 45: }
  8956                           ;arp.c: 46: UARTTransmitText("[");
  8957  002272  0ECB               	movlw	low (STR_62+3)
  8958  002274  0100               	movlb	0	; () banked
  8959  002276  6F98               	movwf	UARTTransmitText@str& (0+255),b
  8960  002278  0E7F               	movlw	high (STR_62+3)
  8961  00227A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  8962  00227C  EC7A  F021         	call	_UARTTransmitText	;wreg free
  8963                           
  8964                           ;arp.c: 47: UARTTransmitText(macToString(arp.senderMACAddress));
  8965  002280  EE21  F060         	lfsr	2,arp_handleNewPacket@arp+8
  8966  002284  EE00  F07A         	lfsr	0,macToString@addr
  8967  002288  0E05               	movlw	5
  8968  00228A                     u10571:
  8969  00228A  CFDB FFEB          	movff	plusw2,plusw0
  8970  00228E  06E8               	decf	wreg,f,c
  8971  002290  E2FC               	bc	u10571
  8972  002292  EC19  F017         	call	_macToString	;wreg free
  8973  002296  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  8974  00229A  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  8975  00229E  EC7A  F021         	call	_UARTTransmitText	;wreg free
  8976                           
  8977                           ;arp.c: 48: UARTTransmitText(", ");
  8978  0022A2  0E43               	movlw	low (STR_37+17)
  8979  0022A4  0100               	movlb	0	; () banked
  8980  0022A6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  8981  0022A8  0E7E               	movlw	high (STR_37+17)
  8982  0022AA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  8983  0022AC  EC7A  F021         	call	_UARTTransmitText	;wreg free
  8984                           
  8985                           ;arp.c: 49: UARTTransmitText(ipAdressToString(arp.senderIPAddress));
  8986  0022B0  C166  F073         	movff	arp_handleNewPacket@arp+14,ipAdressToString@ip
  8987  0022B4  C167  F074         	movff	arp_handleNewPacket@arp+15,ipAdressToString@ip+1
  8988  0022B8  C168  F075         	movff	arp_handleNewPacket@arp+16,ipAdressToString@ip+2
  8989  0022BC  C169  F076         	movff	arp_handleNewPacket@arp+17,ipAdressToString@ip+3
  8990  0022C0  EC0D  F010         	call	_ipAdressToString	;wreg free
  8991  0022C4  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  8992  0022C8  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  8993  0022CC  EC7A  F021         	call	_UARTTransmitText	;wreg free
  8994                           
  8995                           ;arp.c: 50: UARTTransmitText("]->[");
  8996  0022D0  0EC8               	movlw	low STR_62
  8997  0022D2  0100               	movlb	0	; () banked
  8998  0022D4  6F98               	movwf	UARTTransmitText@str& (0+255),b
  8999  0022D6  0E7F               	movlw	high STR_62
  9000  0022D8  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9001  0022DA  EC7A  F021         	call	_UARTTransmitText	;wreg free
  9002                           
  9003                           ;arp.c: 51: UARTTransmitText(macToString(arp.targetMACAddress));
  9004  0022DE  EE21  F06A         	lfsr	2,arp_handleNewPacket@arp+18
  9005  0022E2  EE00  F07A         	lfsr	0,macToString@addr
  9006  0022E6  0E05               	movlw	5
  9007  0022E8                     u10581:
  9008  0022E8  CFDB FFEB          	movff	plusw2,plusw0
  9009  0022EC  06E8               	decf	wreg,f,c
  9010  0022EE  E2FC               	bc	u10581
  9011  0022F0  EC19  F017         	call	_macToString	;wreg free
  9012  0022F4  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  9013  0022F8  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  9014  0022FC  EC7A  F021         	call	_UARTTransmitText	;wreg free
  9015                           
  9016                           ;arp.c: 52: UARTTransmitText(", ");
  9017  002300  0E43               	movlw	low (STR_37+17)
  9018  002302  0100               	movlb	0	; () banked
  9019  002304  6F98               	movwf	UARTTransmitText@str& (0+255),b
  9020  002306  0E7E               	movlw	high (STR_37+17)
  9021  002308  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9022  00230A  EC7A  F021         	call	_UARTTransmitText	;wreg free
  9023                           
  9024                           ;arp.c: 53: UARTTransmitText(ipAdressToString(arp.targetIPAddress));
  9025  00230E  C170  F073         	movff	arp_handleNewPacket@arp+24,ipAdressToString@ip
  9026  002312  C171  F074         	movff	arp_handleNewPacket@arp+25,ipAdressToString@ip+1
  9027  002316  C172  F075         	movff	arp_handleNewPacket@arp+26,ipAdressToString@ip+2
  9028  00231A  C173  F076         	movff	arp_handleNewPacket@arp+27,ipAdressToString@ip+3
  9029  00231E  EC0D  F010         	call	_ipAdressToString	;wreg free
  9030  002322  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  9031  002326  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  9032  00232A  EC7A  F021         	call	_UARTTransmitText	;wreg free
  9033                           
  9034                           ;arp.c: 54: UARTTransmitText("]");
  9035  00232E  0EFB               	movlw	low (STR_19+1)
  9036  002330  0100               	movlb	0	; () banked
  9037  002332  6F98               	movwf	UARTTransmitText@str& (0+255),b
  9038  002334  0E7F               	movlw	high (STR_19+1)
  9039  002336  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9040  002338  EC7A  F021         	call	_UARTTransmitText	;wreg free
  9041                           
  9042                           ;arp.c: 55: if (arp.fIsProbe)
  9043  00233C  0101               	movlb	1	; () banked
  9044  00233E  A374               	btfss	(arp_handleNewPacket@arp+28)& (0+255),1,b
  9045  002340  D007               	goto	l903
  9046                           
  9047                           ; BSR set to: 1
  9048                           ;arp.c: 56: UARTTransmitText("[IsProbe]");
  9049  002342  0E7A               	movlw	low STR_65
  9050  002344  0100               	movlb	0	; () banked
  9051  002346  6F98               	movwf	UARTTransmitText@str& (0+255),b
  9052  002348  0E7F               	movlw	high STR_65
  9053  00234A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9054  00234C  EC7A  F021         	call	_UARTTransmitText	;wreg free
  9055  002350                     l903:
  9056                           
  9057                           ;arp.c: 57: if (arp.fIsGratuitous)
  9058  002350  0101               	movlb	1	; () banked
  9059  002352  A174               	btfss	(arp_handleNewPacket@arp+28)& (0+255),0,b
  9060  002354  D007               	goto	l904
  9061                           
  9062                           ; BSR set to: 1
  9063                           ;arp.c: 58: UARTTransmitText("[IsGratuitous]");
  9064  002356  0EFA               	movlw	low STR_66
  9065  002358  0100               	movlb	0	; () banked
  9066  00235A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  9067  00235C  0E7E               	movlw	high STR_66
  9068  00235E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9069  002360  EC7A  F021         	call	_UARTTransmitText	;wreg free
  9070  002364                     l904:
  9071                           
  9072                           ;arp.c: 60: arp_sendReply(arp);
  9073  002364  EE21  F058         	lfsr	2,arp_handleNewPacket@arp
  9074  002368  EE01  F000         	lfsr	0,arp_sendReply@request
  9075  00236C  0E1F               	movlw	31
  9076  00236E                     u10611:
  9077  00236E  CFDB FFEB          	movff	plusw2,plusw0
  9078  002372  06E8               	decf	wreg,f,c
  9079  002374  E2FC               	bc	u10611
  9080  002376  EC7B  F013         	call	_arp_sendReply	;wreg free
  9081                           
  9082                           ;arp.c: 61: arp_setNewEntry(arp.senderMACAddress, arp.senderIPAddress, getMillis());
  9083  00237A  EE21  F060         	lfsr	2,arp_handleNewPacket@arp+8
  9084  00237E  EE00  F064         	lfsr	0,arp_setNewEntry@mac
  9085  002382  0E05               	movlw	5
  9086  002384                     u10621:
  9087  002384  CFDB FFEB          	movff	plusw2,plusw0
  9088  002388  06E8               	decf	wreg,f,c
  9089  00238A  E2FC               	bc	u10621
  9090  00238C  C166  F06A         	movff	arp_handleNewPacket@arp+14,arp_setNewEntry@ip
  9091  002390  C167  F06B         	movff	arp_handleNewPacket@arp+15,arp_setNewEntry@ip+1
  9092  002394  C168  F06C         	movff	arp_handleNewPacket@arp+16,arp_setNewEntry@ip+2
  9093  002398  C169  F06D         	movff	arp_handleNewPacket@arp+17,arp_setNewEntry@ip+3
  9094  00239C  ECF4  F025         	call	_getMillis	;wreg free
  9095  0023A0  C060  F06E         	movff	?_getMillis,arp_setNewEntry@timestamp
  9096  0023A4  C061  F06F         	movff	?_getMillis+1,arp_setNewEntry@timestamp+1
  9097  0023A8  C062  F070         	movff	?_getMillis+2,arp_setNewEntry@timestamp+2
  9098  0023AC  C063  F071         	movff	?_getMillis+3,arp_setNewEntry@timestamp+3
  9099  0023B0  EC93  F018         	call	_arp_setNewEntry	;wreg free
  9100  0023B4  0012               	return		;funcret
  9101  0023B6                     __end_of_arp_handleNewPacket:
  9102                           	opt stack 0
  9103                           tblptru	equ	0xFF8
  9104                           tblptrh	equ	0xFF7
  9105                           tblptrl	equ	0xFF6
  9106                           tablat	equ	0xFF5
  9107                           prodh	equ	0xFF4
  9108                           prodl	equ	0xFF3
  9109                           intcon	equ	0xFF2
  9110                           intcon3	equ	0xFF0
  9111                           indf0	equ	0xFEF
  9112                           postinc0	equ	0xFEE
  9113                           plusw0	equ	0xFEB
  9114                           fsr0h	equ	0xFEA
  9115                           fsr0l	equ	0xFE9
  9116                           wreg	equ	0xFE8
  9117                           postinc1	equ	0xFE6
  9118                           postdec1	equ	0xFE5
  9119                           plusw1	equ	0xFE3
  9120                           fsr1h	equ	0xFE2
  9121                           fsr1l	equ	0xFE1
  9122                           indf2	equ	0xFDF
  9123                           postinc2	equ	0xFDE
  9124                           postdec2	equ	0xFDD
  9125                           plusw2	equ	0xFDB
  9126                           fsr2h	equ	0xFDA
  9127                           fsr2l	equ	0xFD9
  9128                           status	equ	0xFD8
  9129                           
  9130 ;; *************** function _ethernetController_dropPacket *****************
  9131 ;; Defined at:
  9132 ;;		line 379 in file "src/enc424j600/ENC424J600.c"
  9133 ;; Parameters:    Size  Location     Type
  9134 ;;  frame           2   18[BANK0 ] PTR struct ethernetFrame
  9135 ;;		 -> stack.ethernet(15), stack(121), 
  9136 ;; Auto vars:     Size  Location     Type
  9137 ;;		None
  9138 ;; Return value:  Size  Location     Type
  9139 ;;                  1    wreg      void 
  9140 ;; Registers used:
  9141 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9142 ;; Tracked objects:
  9143 ;;		On entry : 0/0
  9144 ;;		On exit  : 0/0
  9145 ;;		Unchanged: 0/0
  9146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9147 ;;      Params:         0       2       0       0       0       0       0       0       0
  9148 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9149 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9150 ;;      Totals:         0       2       0       0       0       0       0       0       0
  9151 ;;Total ram usage:        2 bytes
  9152 ;; Hardware stack levels used:    1
  9153 ;; Hardware stack levels required when called:    8
  9154 ;; This function calls:
  9155 ;;		_enc424j600_setRXTailPointer
  9156 ;;		_enc424j600_writeSingleByte
  9157 ;;		_ethernetController_getNextPacketPointer
  9158 ;; This function is called by:
  9159 ;;		_ethernet_rxGetNewFrame
  9160 ;;		_arp_handleNewPacket
  9161 ;;		_ipv4_handleNewPacket
  9162 ;; This function uses a non-reentrant model
  9163 ;;
  9164                           
  9165                           	psect	text25
  9166  0046D0                     __ptext25:
  9167                           	opt stack 0
  9168  0046D0                     _ethernetController_dropPacket:
  9169                           	opt stack 19
  9170                           
  9171                           ;ENC424J600.c: 381: if (ethernetController_getNextPacketPointer() == 0x3000) {
  9172                           
  9173                           ;incstack = 0
  9174  0046D0  EC0C  F026         	call	_ethernetController_getNextPacketPointer	;wreg free
  9175  0046D4  0E30               	movlw	48
  9176  0046D6  0100               	movlb	0	; () banked
  9177  0046D8  1963               	xorwf	(?_ethernetController_getNextPacketPointer+1)& (0+255),w,b
  9178  0046DA  1162               	iorwf	?_ethernetController_getNextPacketPointer& (0+255),w,b
  9179  0046DC  A4D8               	btfss	status,2,c
  9180  0046DE  D007               	goto	l187
  9181                           
  9182                           ; BSR set to: 0
  9183                           ;ENC424J600.c: 382: enc424j600_setRXTailPointer(0x5FFF - 1);
  9184  0046E0  0E5F               	movlw	95
  9185  0046E2  6F6F               	movwf	(enc424j600_setRXTailPointer@addr+1)& (0+255),b
  9186  0046E4  0EFE               	movlw	254
  9187  0046E6  6F6E               	movwf	enc424j600_setRXTailPointer@addr& (0+255),b
  9188  0046E8  ECBA  F024         	call	_enc424j600_setRXTailPointer	;wreg free
  9189                           
  9190                           ;ENC424J600.c: 383: } else {
  9191  0046EC  D00B               	goto	l188
  9192  0046EE                     l187:
  9193                           
  9194                           ;ENC424J600.c: 384: enc424j600_setRXTailPointer(ethernetController_getNextPacketPointer(
      +                          ) - 2);
  9195  0046EE  EC0C  F026         	call	_ethernetController_getNextPacketPointer	;wreg free
  9196  0046F2  0EFE               	movlw	254
  9197  0046F4  0100               	movlb	0	; () banked
  9198  0046F6  2562               	addwf	?_ethernetController_getNextPacketPointer& (0+255),w,b
  9199  0046F8  6F6E               	movwf	enc424j600_setRXTailPointer@addr& (0+255),b
  9200  0046FA  0EFF               	movlw	255
  9201  0046FC  2163               	addwfc	(?_ethernetController_getNextPacketPointer+1)& (0+255),w,b
  9202  0046FE  6F6F               	movwf	(enc424j600_setRXTailPointer@addr+1)& (0+255),b
  9203  004700  ECBA  F024         	call	_enc424j600_setRXTailPointer	;wreg free
  9204  004704                     l188:
  9205                           
  9206                           ;ENC424J600.c: 385: }
  9207                           ;ENC424J600.c: 387: enc424j600_writeSingleByte(0b11001100);
  9208  004704  0ECC               	movlw	204
  9209  004706  ECC3  F025         	call	_enc424j600_writeSingleByte
  9210  00470A  0012               	return		;funcret
  9211  00470C                     __end_of_ethernetController_dropPacket:
  9212                           	opt stack 0
  9213                           tblptru	equ	0xFF8
  9214                           tblptrh	equ	0xFF7
  9215                           tblptrl	equ	0xFF6
  9216                           tablat	equ	0xFF5
  9217                           prodh	equ	0xFF4
  9218                           prodl	equ	0xFF3
  9219                           intcon	equ	0xFF2
  9220                           intcon3	equ	0xFF0
  9221                           indf0	equ	0xFEF
  9222                           postinc0	equ	0xFEE
  9223                           plusw0	equ	0xFEB
  9224                           fsr0h	equ	0xFEA
  9225                           fsr0l	equ	0xFE9
  9226                           wreg	equ	0xFE8
  9227                           postinc1	equ	0xFE6
  9228                           postdec1	equ	0xFE5
  9229                           plusw1	equ	0xFE3
  9230                           fsr1h	equ	0xFE2
  9231                           fsr1l	equ	0xFE1
  9232                           indf2	equ	0xFDF
  9233                           postinc2	equ	0xFDE
  9234                           postdec2	equ	0xFDD
  9235                           plusw2	equ	0xFDB
  9236                           fsr2h	equ	0xFDA
  9237                           fsr2l	equ	0xFD9
  9238                           status	equ	0xFD8
  9239                           
  9240 ;; *************** function _ethernetController_getNextPacketPointer *****************
  9241 ;; Defined at:
  9242 ;;		line 461 in file "src/enc424j600/ENC424J600.c"
  9243 ;; Parameters:    Size  Location     Type
  9244 ;;		None
  9245 ;; Auto vars:     Size  Location     Type
  9246 ;;		None
  9247 ;; Return value:  Size  Location     Type
  9248 ;;                  2    2[BANK0 ] unsigned int 
  9249 ;; Registers used:
  9250 ;;		cstack
  9251 ;; Tracked objects:
  9252 ;;		On entry : 0/0
  9253 ;;		On exit  : 0/0
  9254 ;;		Unchanged: 0/0
  9255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9256 ;;      Params:         0       2       0       0       0       0       0       0       0
  9257 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9258 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9259 ;;      Totals:         0       2       0       0       0       0       0       0       0
  9260 ;;Total ram usage:        2 bytes
  9261 ;; Hardware stack levels used:    1
  9262 ;; Hardware stack levels required when called:    5
  9263 ;; This function calls:
  9264 ;;		_enc424j600_getNextPacketPointer
  9265 ;; This function is called by:
  9266 ;;		_ethernetController_dropPacket
  9267 ;;		_ethernet_rxGetNewFrame
  9268 ;; This function uses a non-reentrant model
  9269 ;;
  9270                           
  9271                           	psect	text26
  9272  004C18                     __ptext26:
  9273                           	opt stack 0
  9274  004C18                     _ethernetController_getNextPacketPointer:
  9275                           	opt stack 21
  9276                           
  9277                           ;ENC424J600.c: 462: return enc424j600_getNextPacketPointer();
  9278                           
  9279                           ;incstack = 0
  9280  004C18  EC26  F026         	call	_enc424j600_getNextPacketPointer	;wreg free
  9281  004C1C  C060  F062         	movff	?_enc424j600_getNextPacketPointer,?_ethernetController_getNextPacketPointer
  9282  004C20  C061  F063         	movff	?_enc424j600_getNextPacketPointer+1,?_ethernetController_getNextPacketPointer+1
  9283  004C24  0012               	return	
  9284  004C26                     __end_of_ethernetController_getNextPacketPointer:
  9285                           	opt stack 0
  9286                           tblptru	equ	0xFF8
  9287                           tblptrh	equ	0xFF7
  9288                           tblptrl	equ	0xFF6
  9289                           tablat	equ	0xFF5
  9290                           prodh	equ	0xFF4
  9291                           prodl	equ	0xFF3
  9292                           intcon	equ	0xFF2
  9293                           intcon3	equ	0xFF0
  9294                           indf0	equ	0xFEF
  9295                           postinc0	equ	0xFEE
  9296                           plusw0	equ	0xFEB
  9297                           fsr0h	equ	0xFEA
  9298                           fsr0l	equ	0xFE9
  9299                           wreg	equ	0xFE8
  9300                           postinc1	equ	0xFE6
  9301                           postdec1	equ	0xFE5
  9302                           plusw1	equ	0xFE3
  9303                           fsr1h	equ	0xFE2
  9304                           fsr1l	equ	0xFE1
  9305                           indf2	equ	0xFDF
  9306                           postinc2	equ	0xFDE
  9307                           postdec2	equ	0xFDD
  9308                           plusw2	equ	0xFDB
  9309                           fsr2h	equ	0xFDA
  9310                           fsr2l	equ	0xFD9
  9311                           status	equ	0xFD8
  9312                           
  9313 ;; *************** function _enc424j600_getNextPacketPointer *****************
  9314 ;; Defined at:
  9315 ;;		line 590 in file "src/enc424j600/ENC424J600.c"
  9316 ;; Parameters:    Size  Location     Type
  9317 ;;		None
  9318 ;; Auto vars:     Size  Location     Type
  9319 ;;		None
  9320 ;; Return value:  Size  Location     Type
  9321 ;;                  2    0[BANK0 ] unsigned int 
  9322 ;; Registers used:
  9323 ;;		None
  9324 ;; Tracked objects:
  9325 ;;		On entry : 0/0
  9326 ;;		On exit  : 0/0
  9327 ;;		Unchanged: 0/0
  9328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9329 ;;      Params:         0       2       0       0       0       0       0       0       0
  9330 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9331 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9332 ;;      Totals:         0       2       0       0       0       0       0       0       0
  9333 ;;Total ram usage:        2 bytes
  9334 ;; Hardware stack levels used:    1
  9335 ;; Hardware stack levels required when called:    4
  9336 ;; This function calls:
  9337 ;;		Nothing
  9338 ;; This function is called by:
  9339 ;;		_ethernetController_updateNextPacketPointer
  9340 ;;		_ethernetController_getNextPacketPointer
  9341 ;; This function uses a non-reentrant model
  9342 ;;
  9343                           
  9344                           	psect	text27
  9345  004C4C                     __ptext27:
  9346                           	opt stack 0
  9347  004C4C                     _enc424j600_getNextPacketPointer:
  9348                           	opt stack 21
  9349                           
  9350                           ;ENC424J600.c: 591: return nextPacketPointer;
  9351                           
  9352                           ;incstack = 0
  9353  004C4C  C042  F060         	movff	_nextPacketPointer,?_enc424j600_getNextPacketPointer
  9354  004C50  C043  F061         	movff	_nextPacketPointer+1,?_enc424j600_getNextPacketPointer+1
  9355  004C54  0012               	return		;funcret
  9356  004C56                     __end_of_enc424j600_getNextPacketPointer:
  9357                           	opt stack 0
  9358                           tblptru	equ	0xFF8
  9359                           tblptrh	equ	0xFF7
  9360                           tblptrl	equ	0xFF6
  9361                           tablat	equ	0xFF5
  9362                           prodh	equ	0xFF4
  9363                           prodl	equ	0xFF3
  9364                           intcon	equ	0xFF2
  9365                           intcon3	equ	0xFF0
  9366                           indf0	equ	0xFEF
  9367                           postinc0	equ	0xFEE
  9368                           plusw0	equ	0xFEB
  9369                           fsr0h	equ	0xFEA
  9370                           fsr0l	equ	0xFE9
  9371                           wreg	equ	0xFE8
  9372                           postinc1	equ	0xFE6
  9373                           postdec1	equ	0xFE5
  9374                           plusw1	equ	0xFE3
  9375                           fsr1h	equ	0xFE2
  9376                           fsr1l	equ	0xFE1
  9377                           indf2	equ	0xFDF
  9378                           postinc2	equ	0xFDE
  9379                           postdec2	equ	0xFDD
  9380                           plusw2	equ	0xFDB
  9381                           fsr2h	equ	0xFDA
  9382                           fsr2l	equ	0xFD9
  9383                           status	equ	0xFD8
  9384                           
  9385 ;; *************** function _arp_setNewEntry *****************
  9386 ;; Defined at:
  9387 ;;		line 374 in file "src/stack/protocols/arp.c"
  9388 ;; Parameters:    Size  Location     Type
  9389 ;;  mac             6    4[BANK0 ] struct macaddress
  9390 ;;  ip              4   10[BANK0 ] struct ipv4_address
  9391 ;;  timestamp       4   14[BANK0 ] unsigned long 
  9392 ;; Auto vars:     Size  Location     Type
  9393 ;;  i               1   27[BANK0 ] unsigned char 
  9394 ;;  maxSeconds      4   22[BANK0 ] unsigned long 
  9395 ;;  oldestIndex     1   26[BANK0 ] unsigned char 
  9396 ;; Return value:  Size  Location     Type
  9397 ;;                  1    wreg      void 
  9398 ;; Registers used:
  9399 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9400 ;; Tracked objects:
  9401 ;;		On entry : 0/0
  9402 ;;		On exit  : 0/0
  9403 ;;		Unchanged: 0/0
  9404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9405 ;;      Params:         0      14       0       0       0       0       0       0       0
  9406 ;;      Locals:         0       6       0       0       0       0       0       0       0
  9407 ;;      Temps:          0       4       0       0       0       0       0       0       0
  9408 ;;      Totals:         0      24       0       0       0       0       0       0       0
  9409 ;;Total ram usage:       24 bytes
  9410 ;; Hardware stack levels used:    1
  9411 ;; Hardware stack levels required when called:    4
  9412 ;; This function calls:
  9413 ;;		Nothing
  9414 ;; This function is called by:
  9415 ;;		_arp_handleNewPacket
  9416 ;;		_arp_init
  9417 ;; This function uses a non-reentrant model
  9418 ;;
  9419                           
  9420                           	psect	text28
  9421  003126                     __ptext28:
  9422                           	opt stack 0
  9423  003126                     _arp_setNewEntry:
  9424                           	opt stack 24
  9425                           
  9426                           ;arp.c: 375: uint32_t maxSeconds = 0;
  9427                           
  9428                           ;incstack = 0
  9429  003126  0E00               	movlw	0
  9430  003128  0100               	movlb	0	; () banked
  9431  00312A  6F76               	movwf	arp_setNewEntry@maxSeconds& (0+255),b
  9432  00312C  0E00               	movlw	0
  9433  00312E  6F77               	movwf	(arp_setNewEntry@maxSeconds+1)& (0+255),b
  9434  003130  0E00               	movlw	0
  9435  003132  6F78               	movwf	(arp_setNewEntry@maxSeconds+2)& (0+255),b
  9436  003134  0E00               	movlw	0
  9437  003136  6F79               	movwf	(arp_setNewEntry@maxSeconds+3)& (0+255),b
  9438                           
  9439                           ;arp.c: 376: uint8_t oldestIndex = 0;
  9440  003138  0E00               	movlw	0
  9441  00313A  6F7A               	movwf	arp_setNewEntry@oldestIndex& (0+255),b
  9442                           
  9443                           ;arp.c: 378: for (uint8_t i = 0; i < 8u; i++) {
  9444  00313C  0E00               	movlw	0
  9445  00313E  6F7B               	movwf	arp_setNewEntry@i& (0+255),b
  9446  003140                     l8732:
  9447                           
  9448                           ; BSR set to: 0
  9449  003140  0E07               	movlw	7
  9450  003142  657B               	cpfsgt	arp_setNewEntry@i& (0+255),b
  9451  003144  D001               	goto	l999
  9452  003146  D02E               	goto	u10260
  9453  003148                     l999:
  9454                           
  9455                           ; BSR set to: 0
  9456                           ;arp.c: 379: if (arp_table[i].timeCreated > maxSeconds) {
  9457                           
  9458                           ; BSR set to: 0
  9459  003148  517B               	movf	arp_setNewEntry@i& (0+255),w,b
  9460  00314A  0D0E               	mullw	14
  9461  00314C  0E0A               	movlw	10
  9462  00314E  26F3               	addwf	prodl,f,c
  9463  003150  0E00               	movlw	0
  9464  003152  22F4               	addwfc	prodh,f,c
  9465  003154  0E0F               	movlw	low _arp_table
  9466  003156  24F3               	addwf	prodl,w,c
  9467  003158  6ED9               	movwf	fsr2l,c
  9468  00315A  0E02               	movlw	high _arp_table
  9469  00315C  20F4               	addwfc	prodh,w,c
  9470  00315E  6EDA               	movwf	fsr2h,c
  9471  003160  50DE               	movf	postinc2,w,c
  9472  003162  5D76               	subwf	arp_setNewEntry@maxSeconds& (0+255),w,b
  9473  003164  50DE               	movf	postinc2,w,c
  9474  003166  5977               	subwfb	(arp_setNewEntry@maxSeconds+1)& (0+255),w,b
  9475  003168  50DE               	movf	postinc2,w,c
  9476  00316A  5978               	subwfb	(arp_setNewEntry@maxSeconds+2)& (0+255),w,b
  9477  00316C  50DE               	movf	postinc2,w,c
  9478  00316E  5979               	subwfb	(arp_setNewEntry@maxSeconds+3)& (0+255),w,b
  9479  003170  B0D8               	btfsc	status,0,c
  9480  003172  D016               	goto	l1001
  9481                           
  9482                           ; BSR set to: 0
  9483                           ;arp.c: 381: maxSeconds = arp_table[i].timeCreated;
  9484  003174  517B               	movf	arp_setNewEntry@i& (0+255),w,b
  9485  003176  0D0E               	mullw	14
  9486  003178  0E0A               	movlw	10
  9487  00317A  26F3               	addwf	prodl,f,c
  9488  00317C  0E00               	movlw	0
  9489  00317E  22F4               	addwfc	prodh,f,c
  9490  003180  0E0F               	movlw	low _arp_table
  9491  003182  24F3               	addwf	prodl,w,c
  9492  003184  6ED9               	movwf	fsr2l,c
  9493  003186  0E02               	movlw	high _arp_table
  9494  003188  20F4               	addwfc	prodh,w,c
  9495  00318A  6EDA               	movwf	fsr2h,c
  9496  00318C  CFDE F076          	movff	postinc2,arp_setNewEntry@maxSeconds
  9497  003190  CFDE F077          	movff	postinc2,arp_setNewEntry@maxSeconds+1
  9498  003194  CFDE F078          	movff	postinc2,arp_setNewEntry@maxSeconds+2
  9499  003198  CFDE F079          	movff	postinc2,arp_setNewEntry@maxSeconds+3
  9500                           
  9501                           ; BSR set to: 0
  9502                           ;arp.c: 382: oldestIndex = i;
  9503  00319C  C07B  F07A         	movff	arp_setNewEntry@i,arp_setNewEntry@oldestIndex
  9504  0031A0                     l1001:
  9505                           
  9506                           ; BSR set to: 0
  9507                           
  9508                           ; BSR set to: 0
  9509  0031A0  2B7B               	incf	arp_setNewEntry@i& (0+255),f,b
  9510  0031A2  D7CE               	goto	l8732
  9511  0031A4                     u10260:
  9512                           
  9513                           ; BSR set to: 0
  9514                           ;arp.c: 383: }
  9515                           ;arp.c: 384: }
  9516                           ;arp.c: 386: arp_table[oldestIndex].ip = ip;
  9517                           
  9518                           ; BSR set to: 0
  9519  0031A4  517A               	movf	arp_setNewEntry@oldestIndex& (0+255),w,b
  9520  0031A6  0D0E               	mullw	14
  9521  0031A8  0E0F               	movlw	low _arp_table
  9522  0031AA  24F3               	addwf	prodl,w,c
  9523  0031AC  6ED9               	movwf	fsr2l,c
  9524  0031AE  0E02               	movlw	high _arp_table
  9525  0031B0  20F4               	addwfc	prodh,w,c
  9526  0031B2  6EDA               	movwf	fsr2h,c
  9527  0031B4  C06A  FFDE         	movff	arp_setNewEntry@ip,postinc2
  9528  0031B8  C06B  FFDE         	movff	arp_setNewEntry@ip+1,postinc2
  9529  0031BC  C06C  FFDE         	movff	arp_setNewEntry@ip+2,postinc2
  9530  0031C0  C06D  FFDE         	movff	arp_setNewEntry@ip+3,postinc2
  9531                           
  9532                           ; BSR set to: 0
  9533                           ;arp.c: 387: arp_table[oldestIndex].mac = mac;
  9534  0031C4  EE20  F064         	lfsr	2,arp_setNewEntry@mac
  9535  0031C8  517A               	movf	arp_setNewEntry@oldestIndex& (0+255),w,b
  9536  0031CA  0D0E               	mullw	14
  9537  0031CC  0E04               	movlw	4
  9538  0031CE  26F3               	addwf	prodl,f,c
  9539  0031D0  0E00               	movlw	0
  9540  0031D2  22F4               	addwfc	prodh,f,c
  9541  0031D4  0E0F               	movlw	low _arp_table
  9542  0031D6  24F3               	addwf	prodl,w,c
  9543  0031D8  6EE1               	movwf	fsr1l,c
  9544  0031DA  0E02               	movlw	high _arp_table
  9545  0031DC  20F4               	addwfc	prodh,w,c
  9546  0031DE  6EE2               	movwf	fsr1h,c
  9547  0031E0  0E05               	movlw	5
  9548  0031E2                     u10271:
  9549  0031E2  CFDB FFE3          	movff	plusw2,plusw1
  9550  0031E6  06E8               	decf	wreg,f,c
  9551  0031E8  E2FC               	bc	u10271
  9552                           
  9553                           ; BSR set to: 0
  9554                           ;arp.c: 388: arp_table[oldestIndex].timeCreated = timestamp;
  9555  0031EA  517A               	movf	arp_setNewEntry@oldestIndex& (0+255),w,b
  9556  0031EC  0D0E               	mullw	14
  9557  0031EE  0E0A               	movlw	10
  9558  0031F0  26F3               	addwf	prodl,f,c
  9559  0031F2  0E00               	movlw	0
  9560  0031F4  22F4               	addwfc	prodh,f,c
  9561  0031F6  0E0F               	movlw	low _arp_table
  9562  0031F8  24F3               	addwf	prodl,w,c
  9563  0031FA  6ED9               	movwf	fsr2l,c
  9564  0031FC  0E02               	movlw	high _arp_table
  9565  0031FE  20F4               	addwfc	prodh,w,c
  9566  003200  6EDA               	movwf	fsr2h,c
  9567  003202  C06E  FFDE         	movff	arp_setNewEntry@timestamp,postinc2
  9568  003206  C06F  FFDE         	movff	arp_setNewEntry@timestamp+1,postinc2
  9569  00320A  C070  FFDE         	movff	arp_setNewEntry@timestamp+2,postinc2
  9570  00320E  C071  FFDE         	movff	arp_setNewEntry@timestamp+3,postinc2
  9571                           
  9572                           ; BSR set to: 0
  9573  003212  0012               	return		;funcret
  9574  003214                     __end_of_arp_setNewEntry:
  9575                           	opt stack 0
  9576                           tblptru	equ	0xFF8
  9577                           tblptrh	equ	0xFF7
  9578                           tblptrl	equ	0xFF6
  9579                           tablat	equ	0xFF5
  9580                           prodh	equ	0xFF4
  9581                           prodl	equ	0xFF3
  9582                           intcon	equ	0xFF2
  9583                           intcon3	equ	0xFF0
  9584                           indf0	equ	0xFEF
  9585                           postinc0	equ	0xFEE
  9586                           plusw0	equ	0xFEB
  9587                           fsr0h	equ	0xFEA
  9588                           fsr0l	equ	0xFE9
  9589                           wreg	equ	0xFE8
  9590                           postinc1	equ	0xFE6
  9591                           postdec1	equ	0xFE5
  9592                           plusw1	equ	0xFE3
  9593                           fsr1h	equ	0xFE2
  9594                           fsr1l	equ	0xFE1
  9595                           indf2	equ	0xFDF
  9596                           postinc2	equ	0xFDE
  9597                           postdec2	equ	0xFDD
  9598                           plusw2	equ	0xFDB
  9599                           fsr2h	equ	0xFDA
  9600                           fsr2l	equ	0xFD9
  9601                           status	equ	0xFD8
  9602                           
  9603 ;; *************** function _arp_sendReply *****************
  9604 ;; Defined at:
  9605 ;;		line 206 in file "src/stack/protocols/arp.c"
  9606 ;; Parameters:    Size  Location     Type
  9607 ;;  request        32    0[BANK1 ] struct arp_message
  9608 ;; Auto vars:     Size  Location     Type
  9609 ;;  reply          32   56[BANK1 ] struct arp_message
  9610 ;;  targetMAC       6   38[BANK1 ] struct macaddress
  9611 ;;  senderMAC       6   32[BANK1 ] struct macaddress
  9612 ;;  myIP            4   52[BANK1 ] struct ipv4_address
  9613 ;;  targetIP        4   48[BANK1 ] struct ipv4_address
  9614 ;;  senderIP        4   44[BANK1 ] struct ipv4_address
  9615 ;; Return value:  Size  Location     Type
  9616 ;;                  1    wreg      void 
  9617 ;; Registers used:
  9618 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9619 ;; Tracked objects:
  9620 ;;		On entry : 0/0
  9621 ;;		On exit  : 0/0
  9622 ;;		Unchanged: 0/0
  9623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9624 ;;      Params:         0       0      32       0       0       0       0       0       0
  9625 ;;      Locals:         0       0      56       0       0       0       0       0       0
  9626 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9627 ;;      Totals:         0       0      88       0       0       0       0       0       0
  9628 ;;Total ram usage:       88 bytes
  9629 ;; Hardware stack levels used:    1
  9630 ;; Hardware stack levels required when called:   10
  9631 ;; This function calls:
  9632 ;;		_UARTTransmitText
  9633 ;;		_arp_send
  9634 ;;		_ethernetController_getMacAddress
  9635 ;;		_ipAdressToString
  9636 ;;		_ipv4_cmp
  9637 ;;		_ipv4_getIPSourceAddress
  9638 ;;		_macToString
  9639 ;; This function is called by:
  9640 ;;		_arp_handleNewPacket
  9641 ;; This function uses a non-reentrant model
  9642 ;;
  9643                           
  9644                           	psect	text29
  9645  0026F6                     __ptext29:
  9646                           	opt stack 0
  9647  0026F6                     _arp_sendReply:
  9648                           	opt stack 17
  9649                           
  9650                           ;arp.c: 207: if (request.operation != ARP_REQUEST)
  9651                           
  9652                           ; BSR set to: 0
  9653                           ;incstack = 0
  9654  0026F6  0101               	movlb	1	; () banked
  9655  0026F8  0506               	decf	(arp_sendReply@request+6)& (0+255),w,b
  9656  0026FA  1107               	iorwf	(arp_sendReply@request+7)& (0+255),w,b
  9657  0026FC  A4D8               	btfss	status,2,c
  9658  0026FE  0012               	return	
  9659                           
  9660                           ; BSR set to: 1
  9661                           ;arp.c: 210: ipv4_address_t myIP = ipv4_getIPSourceAddress();
  9662                           
  9663                           ; BSR set to: 1
  9664                           
  9665                           ; BSR set to: 1
  9666                           ;arp.c: 208: return;
  9667  002700  ECEB  F025         	call	_ipv4_getIPSourceAddress	;wreg free
  9668  002704  C060  F134         	movff	?_ipv4_getIPSourceAddress,arp_sendReply@myIP
  9669  002708  C061  F135         	movff	?_ipv4_getIPSourceAddress+1,arp_sendReply@myIP+1
  9670  00270C  C062  F136         	movff	?_ipv4_getIPSourceAddress+2,arp_sendReply@myIP+2
  9671  002710  C063  F137         	movff	?_ipv4_getIPSourceAddress+3,arp_sendReply@myIP+3
  9672                           
  9673                           ;arp.c: 211: if (!(ipv4_cmp(&request.targetIPAddress, &myIP)))
  9674  002714  0E18               	movlw	low (arp_sendReply@request+24)
  9675  002716  0100               	movlb	0	; () banked
  9676  002718  6F60               	movwf	ipv4_cmp@a& (0+255),b
  9677  00271A  0E01               	movlw	high (arp_sendReply@request+24)
  9678  00271C  6F61               	movwf	(ipv4_cmp@a+1)& (0+255),b
  9679  00271E  0E34               	movlw	low arp_sendReply@myIP
  9680  002720  6F62               	movwf	ipv4_cmp@b& (0+255),b
  9681  002722  0E01               	movlw	high arp_sendReply@myIP
  9682  002724  6F63               	movwf	(ipv4_cmp@b+1)& (0+255),b
  9683  002726  EC47  F023         	call	_ipv4_cmp	;wreg free
  9684  00272A  0100               	movlb	0	; () banked
  9685  00272C  A0D8               	btfss	status,0,c
  9686  00272E  0012               	return	
  9687                           
  9688                           ; BSR set to: 0
  9689                           ;arp.c: 214: arp_message_t reply;
  9690                           ;arp.c: 215: ipv4_address_t senderIP;
  9691                           ;arp.c: 216: ipv4_address_t targetIP;
  9692                           ;arp.c: 217: macaddress_t senderMAC;
  9693                           ;arp.c: 218: macaddress_t targetMAC;
  9694                           ;arp.c: 220: senderMAC = ethernetController_getMacAddress();
  9695                           
  9696                           ; BSR set to: 0
  9697                           
  9698                           ; BSR set to: 0
  9699                           ;arp.c: 212: return;
  9700  002730  EC43  F01F         	call	_ethernetController_getMacAddress	;wreg free
  9701  002734  EE21  F020         	lfsr	2,arp_sendReply@senderMAC
  9702  002738  0E05               	movlw	5
  9703  00273A                     u10181:
  9704  00273A  CFEB FFDB          	movff	plusw0,plusw2
  9705  00273E  06E8               	decf	wreg,f,c
  9706  002740  E2FC               	bc	u10181
  9707                           
  9708                           ;arp.c: 221: targetMAC = request.senderMACAddress;
  9709  002742  EE21  F008         	lfsr	2,arp_sendReply@request+8
  9710  002746  EE11  F026         	lfsr	1,arp_sendReply@targetMAC
  9711  00274A  0E05               	movlw	5
  9712  00274C                     u10191:
  9713  00274C  CFDB FFE3          	movff	plusw2,plusw1
  9714  002750  06E8               	decf	wreg,f,c
  9715  002752  E2FC               	bc	u10191
  9716                           
  9717                           ;arp.c: 222: senderIP = ipv4_getIPSourceAddress();
  9718  002754  ECEB  F025         	call	_ipv4_getIPSourceAddress	;wreg free
  9719  002758  C060  F12C         	movff	?_ipv4_getIPSourceAddress,arp_sendReply@senderIP
  9720  00275C  C061  F12D         	movff	?_ipv4_getIPSourceAddress+1,arp_sendReply@senderIP+1
  9721  002760  C062  F12E         	movff	?_ipv4_getIPSourceAddress+2,arp_sendReply@senderIP+2
  9722  002764  C063  F12F         	movff	?_ipv4_getIPSourceAddress+3,arp_sendReply@senderIP+3
  9723                           
  9724                           ;arp.c: 223: targetIP = request.senderIPAddress;
  9725  002768  C10E  F130         	movff	arp_sendReply@request+14,arp_sendReply@targetIP
  9726  00276C  C10F  F131         	movff	arp_sendReply@request+15,arp_sendReply@targetIP+1
  9727  002770  C110  F132         	movff	arp_sendReply@request+16,arp_sendReply@targetIP+2
  9728  002774  C111  F133         	movff	arp_sendReply@request+17,arp_sendReply@targetIP+3
  9729                           
  9730                           ;arp.c: 225: reply.hlen = 6u;
  9731  002778  0E06               	movlw	6
  9732  00277A  0101               	movlb	1	; () banked
  9733  00277C  6F3C               	movwf	(arp_sendReply@reply+4)& (0+255),b
  9734                           
  9735                           ; BSR set to: 1
  9736                           ;arp.c: 226: reply.plen = 4u;
  9737  00277E  0E04               	movlw	4
  9738  002780  6F3D               	movwf	(arp_sendReply@reply+5)& (0+255),b
  9739                           
  9740                           ; BSR set to: 1
  9741                           ;arp.c: 227: reply.htype = ARP_HTYPE_ETHERNET;
  9742  002782  0E00               	movlw	0
  9743  002784  6F39               	movwf	(arp_sendReply@reply+1)& (0+255),b
  9744  002786  0E01               	movlw	1
  9745  002788  6F38               	movwf	arp_sendReply@reply& (0+255),b
  9746                           
  9747                           ; BSR set to: 1
  9748                           ;arp.c: 228: reply.ptype = ARP_PTYPE_IPv4;
  9749  00278A  0E08               	movlw	8
  9750  00278C  6F3B               	movwf	(arp_sendReply@reply+3)& (0+255),b
  9751  00278E  0E00               	movlw	0
  9752  002790  6F3A               	movwf	(arp_sendReply@reply+2)& (0+255),b
  9753                           
  9754                           ; BSR set to: 1
  9755                           ;arp.c: 229: reply.operation = ARP_REPLY;
  9756  002792  0E00               	movlw	0
  9757  002794  6F3F               	movwf	(arp_sendReply@reply+7)& (0+255),b
  9758  002796  0E02               	movlw	2
  9759  002798  6F3E               	movwf	(arp_sendReply@reply+6)& (0+255),b
  9760                           
  9761                           ; BSR set to: 1
  9762                           ;arp.c: 230: reply.senderIPAddress = senderIP;
  9763  00279A  C12C  F146         	movff	arp_sendReply@senderIP,arp_sendReply@reply+14
  9764  00279E  C12D  F147         	movff	arp_sendReply@senderIP+1,arp_sendReply@reply+15
  9765  0027A2  C12E  F148         	movff	arp_sendReply@senderIP+2,arp_sendReply@reply+16
  9766  0027A6  C12F  F149         	movff	arp_sendReply@senderIP+3,arp_sendReply@reply+17
  9767                           
  9768                           ; BSR set to: 1
  9769                           ;arp.c: 231: reply.senderMACAddress = senderMAC;
  9770  0027AA  EE21  F020         	lfsr	2,arp_sendReply@senderMAC
  9771  0027AE  EE11  F040         	lfsr	1,arp_sendReply@reply+8
  9772  0027B2  0E05               	movlw	5
  9773  0027B4                     u10201:
  9774  0027B4  CFDB FFE3          	movff	plusw2,plusw1
  9775  0027B8  06E8               	decf	wreg,f,c
  9776  0027BA  E2FC               	bc	u10201
  9777                           
  9778                           ; BSR set to: 1
  9779                           ;arp.c: 232: reply.targetIPAddress = targetIP;
  9780  0027BC  C130  F150         	movff	arp_sendReply@targetIP,arp_sendReply@reply+24
  9781  0027C0  C131  F151         	movff	arp_sendReply@targetIP+1,arp_sendReply@reply+25
  9782  0027C4  C132  F152         	movff	arp_sendReply@targetIP+2,arp_sendReply@reply+26
  9783  0027C8  C133  F153         	movff	arp_sendReply@targetIP+3,arp_sendReply@reply+27
  9784                           
  9785                           ; BSR set to: 1
  9786                           ;arp.c: 233: reply.targetMACAddress = targetMAC;
  9787  0027CC  EE21  F026         	lfsr	2,arp_sendReply@targetMAC
  9788  0027D0  EE11  F04A         	lfsr	1,arp_sendReply@reply+18
  9789  0027D4  0E05               	movlw	5
  9790  0027D6                     u10211:
  9791  0027D6  CFDB FFE3          	movff	plusw2,plusw1
  9792  0027DA  06E8               	decf	wreg,f,c
  9793  0027DC  E2FC               	bc	u10211
  9794                           
  9795                           ; BSR set to: 1
  9796                           ;arp.c: 235: arp_send(reply);
  9797  0027DE  EE21  F038         	lfsr	2,arp_sendReply@reply
  9798  0027E2  EE00  F0A7         	lfsr	0,arp_send@arp
  9799  0027E6  0E1F               	movlw	31
  9800  0027E8                     u10221:
  9801  0027E8  CFDB FFEB          	movff	plusw2,plusw0
  9802  0027EC  06E8               	decf	wreg,f,c
  9803  0027EE  E2FC               	bc	u10221
  9804  0027F0  ECAC  F00D         	call	_arp_send	;wreg free
  9805                           
  9806                           ;arp.c: 237: UARTTransmitText("[Reply sent to ");
  9807  0027F4  0EDA               	movlw	low STR_67
  9808  0027F6  0100               	movlb	0	; () banked
  9809  0027F8  6F98               	movwf	UARTTransmitText@str& (0+255),b
  9810  0027FA  0E7E               	movlw	high STR_67
  9811  0027FC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9812  0027FE  EC7A  F021         	call	_UARTTransmitText	;wreg free
  9813                           
  9814                           ;arp.c: 238: UARTTransmitText(macToString(reply.targetMACAddress));
  9815  002802  EE21  F04A         	lfsr	2,arp_sendReply@reply+18
  9816  002806  EE00  F07A         	lfsr	0,macToString@addr
  9817  00280A  0E05               	movlw	5
  9818  00280C                     u10231:
  9819  00280C  CFDB FFEB          	movff	plusw2,plusw0
  9820  002810  06E8               	decf	wreg,f,c
  9821  002812  E2FC               	bc	u10231
  9822  002814  EC19  F017         	call	_macToString	;wreg free
  9823  002818  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  9824  00281C  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  9825  002820  EC7A  F021         	call	_UARTTransmitText	;wreg free
  9826                           
  9827                           ;arp.c: 239: UARTTransmitText(", ");
  9828  002824  0E43               	movlw	low (STR_37+17)
  9829  002826  0100               	movlb	0	; () banked
  9830  002828  6F98               	movwf	UARTTransmitText@str& (0+255),b
  9831  00282A  0E7E               	movlw	high (STR_37+17)
  9832  00282C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9833  00282E  EC7A  F021         	call	_UARTTransmitText	;wreg free
  9834                           
  9835                           ;arp.c: 240: UARTTransmitText(ipAdressToString(reply.targetIPAddress));
  9836  002832  C150  F073         	movff	arp_sendReply@reply+24,ipAdressToString@ip
  9837  002836  C151  F074         	movff	arp_sendReply@reply+25,ipAdressToString@ip+1
  9838  00283A  C152  F075         	movff	arp_sendReply@reply+26,ipAdressToString@ip+2
  9839  00283E  C153  F076         	movff	arp_sendReply@reply+27,ipAdressToString@ip+3
  9840  002842  EC0D  F010         	call	_ipAdressToString	;wreg free
  9841  002846  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  9842  00284A  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  9843  00284E  EC7A  F021         	call	_UARTTransmitText	;wreg free
  9844                           
  9845                           ;arp.c: 241: UARTTransmitText("]");
  9846  002852  0EFB               	movlw	low (STR_19+1)
  9847  002854  0100               	movlb	0	; () banked
  9848  002856  6F98               	movwf	UARTTransmitText@str& (0+255),b
  9849  002858  0E7F               	movlw	high (STR_19+1)
  9850  00285A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9851  00285C  EC7A  F021         	call	_UARTTransmitText	;wreg free
  9852  002860  0012               	return		;funcret
  9853  002862                     __end_of_arp_sendReply:
  9854                           	opt stack 0
  9855                           tblptru	equ	0xFF8
  9856                           tblptrh	equ	0xFF7
  9857                           tblptrl	equ	0xFF6
  9858                           tablat	equ	0xFF5
  9859                           prodh	equ	0xFF4
  9860                           prodl	equ	0xFF3
  9861                           intcon	equ	0xFF2
  9862                           intcon3	equ	0xFF0
  9863                           indf0	equ	0xFEF
  9864                           postinc0	equ	0xFEE
  9865                           plusw0	equ	0xFEB
  9866                           fsr0h	equ	0xFEA
  9867                           fsr0l	equ	0xFE9
  9868                           wreg	equ	0xFE8
  9869                           postinc1	equ	0xFE6
  9870                           postdec1	equ	0xFE5
  9871                           plusw1	equ	0xFE3
  9872                           fsr1h	equ	0xFE2
  9873                           fsr1l	equ	0xFE1
  9874                           indf2	equ	0xFDF
  9875                           postinc2	equ	0xFDE
  9876                           postdec2	equ	0xFDD
  9877                           plusw2	equ	0xFDB
  9878                           fsr2h	equ	0xFDA
  9879                           fsr2l	equ	0xFD9
  9880                           status	equ	0xFD8
  9881                           
  9882 ;; *************** function _macToString *****************
  9883 ;; Defined at:
  9884 ;;		line 107 in file "src/system/uart.c"
  9885 ;; Parameters:    Size  Location     Type
  9886 ;;  addr            6   26[BANK0 ] struct macaddress
  9887 ;; Auto vars:     Size  Location     Type
  9888 ;;  i               2   53[BANK0 ] int 
  9889 ;;  address        18   33[BANK0 ] unsigned char [18]
  9890 ;;  j               1   55[BANK0 ] unsigned char 
  9891 ;;  secondDigit     1   52[BANK0 ] unsigned char 
  9892 ;;  firstDigit      1   51[BANK0 ] unsigned char 
  9893 ;; Return value:  Size  Location     Type
  9894 ;;                  2   26[BANK0 ] PTR unsigned char 
  9895 ;; Registers used:
  9896 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9897 ;; Tracked objects:
  9898 ;;		On entry : 0/0
  9899 ;;		On exit  : 0/0
  9900 ;;		Unchanged: 0/0
  9901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9902 ;;      Params:         0       6       0       0       0       0       0       0       0
  9903 ;;      Locals:         0      23       0       0       0       0       0       0       0
  9904 ;;      Temps:          0       1       0       0       0       0       0       0       0
  9905 ;;      Totals:         0      30       0       0       0       0       0       0       0
  9906 ;;Total ram usage:       30 bytes
  9907 ;; Hardware stack levels used:    1
  9908 ;; Hardware stack levels required when called:    4
  9909 ;; This function calls:
  9910 ;;		Nothing
  9911 ;; This function is called by:
  9912 ;;		_ethernet_rxGetNewFrame
  9913 ;;		_main
  9914 ;;		_arp_handleNewPacket
  9915 ;;		_arp_sendReply
  9916 ;;		_arpEntryToString
  9917 ;; This function uses a non-reentrant model
  9918 ;;
  9919                           
  9920                           	psect	text30
  9921  002E32                     __ptext30:
  9922                           	opt stack 0
  9923  002E32                     _macToString:
  9924                           	opt stack 26
  9925                           
  9926                           ;uart.c: 108: char address[] = "??:??:??:??:??:??";
  9927                           
  9928                           ;incstack = 0
  9929  002E32  EE22  F0BB         	lfsr	2,macToString@F5941
  9930  002E36  EE10  F081         	lfsr	1,macToString@address
  9931  002E3A  0E11               	movlw	17
  9932  002E3C                     u9051:
  9933  002E3C  CFDB FFE3          	movff	plusw2,plusw1
  9934  002E40  06E8               	decf	wreg,f,c
  9935  002E42  E2FC               	bc	u9051
  9936                           
  9937                           ;uart.c: 109: uint8_t j = 0;
  9938  002E44  0E00               	movlw	0
  9939  002E46  0100               	movlb	0	; () banked
  9940  002E48  6F97               	movwf	macToString@j& (0+255),b
  9941                           
  9942                           ; BSR set to: 0
  9943                           ;uart.c: 110: uint8_t firstDigit;
  9944                           ;uart.c: 111: uint8_t secondDigit;
  9945                           ;uart.c: 113: for (int i = 0; i < 6; i++) {
  9946  002E4A  0E00               	movlw	0
  9947  002E4C  6F96               	movwf	(macToString@i+1)& (0+255),b
  9948  002E4E  0E00               	movlw	0
  9949  002E50  6F95               	movwf	macToString@i& (0+255),b
  9950                           
  9951                           ; BSR set to: 0
  9952  002E52  BF96               	btfsc	(macToString@i+1)& (0+255),7,b
  9953  002E54  D006               	goto	l787
  9954  002E56  5196               	movf	(macToString@i+1)& (0+255),w,b
  9955  002E58  E16B               	bnz	l788
  9956  002E5A  0E06               	movlw	6
  9957  002E5C  5D95               	subwf	macToString@i& (0+255),w,b
  9958  002E5E  B0D8               	btfsc	status,0,c
  9959  002E60  D067               	goto	u9100
  9960  002E62                     l787:
  9961                           
  9962                           ; BSR set to: 0
  9963                           ;uart.c: 114: firstDigit = ((addr.address[i] & 0xF0) >> 4)&0x0F;
  9964                           
  9965                           ; BSR set to: 0
  9966  002E62  0E7A               	movlw	low macToString@addr
  9967  002E64  2595               	addwf	macToString@i& (0+255),w,b
  9968  002E66  6ED9               	movwf	fsr2l,c
  9969  002E68  0E00               	movlw	high macToString@addr
  9970  002E6A  2196               	addwfc	(macToString@i+1)& (0+255),w,b
  9971  002E6C  6EDA               	movwf	fsr2h,c
  9972  002E6E  50DF               	movf	indf2,w,c
  9973  002E70  6F80               	movwf	??_macToString& (0+255),b
  9974  002E72  3980               	swapf	??_macToString& (0+255),w,b
  9975  002E74  0B0F               	andlw	15
  9976  002E76  0B0F               	andlw	15
  9977  002E78  6F93               	movwf	macToString@firstDigit& (0+255),b
  9978                           
  9979                           ;uart.c: 115: secondDigit = addr.address[i] & 0x0F;
  9980  002E7A  0E7A               	movlw	low macToString@addr
  9981  002E7C  2595               	addwf	macToString@i& (0+255),w,b
  9982  002E7E  6ED9               	movwf	fsr2l,c
  9983  002E80  0E00               	movlw	high macToString@addr
  9984  002E82  2196               	addwfc	(macToString@i+1)& (0+255),w,b
  9985  002E84  6EDA               	movwf	fsr2h,c
  9986  002E86  50DF               	movf	indf2,w,c
  9987  002E88  0B0F               	andlw	15
  9988  002E8A  6F94               	movwf	macToString@secondDigit& (0+255),b
  9989                           
  9990                           ; BSR set to: 0
  9991                           ;uart.c: 117: firstDigit += 0x30;
  9992  002E8C  0E30               	movlw	48
  9993  002E8E  2793               	addwf	macToString@firstDigit& (0+255),f,b
  9994                           
  9995                           ; BSR set to: 0
  9996                           ;uart.c: 118: secondDigit += 0x30;
  9997  002E90  0E30               	movlw	48
  9998  002E92  2794               	addwf	macToString@secondDigit& (0+255),f,b
  9999                           
 10000                           ; BSR set to: 0
 10001                           ;uart.c: 120: if (firstDigit > '9') {
 10002  002E94  0E39               	movlw	57
 10003  002E96  6593               	cpfsgt	macToString@firstDigit& (0+255),b
 10004  002E98  D00C               	goto	l789
 10005                           
 10006                           ; BSR set to: 0
 10007                           ;uart.c: 121: address[j++] = firstDigit + 7;
 10008  002E9A  5197               	movf	macToString@j& (0+255),w,b
 10009  002E9C  0D01               	mullw	1
 10010  002E9E  0E81               	movlw	low macToString@address
 10011  002EA0  24F3               	addwf	prodl,w,c
 10012  002EA2  6ED9               	movwf	fsr2l,c
 10013  002EA4  0E00               	movlw	high macToString@address
 10014  002EA6  20F4               	addwfc	prodh,w,c
 10015  002EA8  6EDA               	movwf	fsr2h,c
 10016  002EAA  5193               	movf	macToString@firstDigit& (0+255),w,b
 10017  002EAC  0F07               	addlw	7
 10018  002EAE  6EDF               	movwf	indf2,c
 10019  002EB0  D00A               	goto	l8244
 10020  002EB2                     l789:
 10021                           
 10022                           ; BSR set to: 0
 10023                           ;uart.c: 123: address[j++] = firstDigit;
 10024                           
 10025                           ; BSR set to: 0
 10026  002EB2  5197               	movf	macToString@j& (0+255),w,b
 10027  002EB4  0D01               	mullw	1
 10028  002EB6  0E81               	movlw	low macToString@address
 10029  002EB8  24F3               	addwf	prodl,w,c
 10030  002EBA  6ED9               	movwf	fsr2l,c
 10031  002EBC  0E00               	movlw	high macToString@address
 10032  002EBE  20F4               	addwfc	prodh,w,c
 10033  002EC0  6EDA               	movwf	fsr2h,c
 10034  002EC2  C093  FFDF         	movff	macToString@firstDigit,indf2
 10035  002EC6                     l8244:
 10036                           
 10037                           ; BSR set to: 0
 10038  002EC6  2B97               	incf	macToString@j& (0+255),f,b
 10039                           
 10040                           ; BSR set to: 0
 10041                           ;uart.c: 124: }
 10042                           ;uart.c: 125: if (secondDigit > '9') {
 10043                           
 10044                           ; BSR set to: 0
 10045  002EC8  0E39               	movlw	57
 10046  002ECA  6594               	cpfsgt	macToString@secondDigit& (0+255),b
 10047  002ECC  D00C               	goto	l791
 10048                           
 10049                           ; BSR set to: 0
 10050                           ;uart.c: 126: address[j++] = secondDigit + 7;
 10051  002ECE  5197               	movf	macToString@j& (0+255),w,b
 10052  002ED0  0D01               	mullw	1
 10053  002ED2  0E81               	movlw	low macToString@address
 10054  002ED4  24F3               	addwf	prodl,w,c
 10055  002ED6  6ED9               	movwf	fsr2l,c
 10056  002ED8  0E00               	movlw	high macToString@address
 10057  002EDA  20F4               	addwfc	prodh,w,c
 10058  002EDC  6EDA               	movwf	fsr2h,c
 10059  002EDE  5194               	movf	macToString@secondDigit& (0+255),w,b
 10060  002EE0  0F07               	addlw	7
 10061  002EE2  6EDF               	movwf	indf2,c
 10062  002EE4  D00A               	goto	l8254
 10063  002EE6                     l791:
 10064                           
 10065                           ; BSR set to: 0
 10066                           ;uart.c: 128: address[j++] = secondDigit;
 10067                           
 10068                           ; BSR set to: 0
 10069  002EE6  5197               	movf	macToString@j& (0+255),w,b
 10070  002EE8  0D01               	mullw	1
 10071  002EEA  0E81               	movlw	low macToString@address
 10072  002EEC  24F3               	addwf	prodl,w,c
 10073  002EEE  6ED9               	movwf	fsr2l,c
 10074  002EF0  0E00               	movlw	high macToString@address
 10075  002EF2  20F4               	addwfc	prodh,w,c
 10076  002EF4  6EDA               	movwf	fsr2h,c
 10077  002EF6  C094  FFDF         	movff	macToString@secondDigit,indf2
 10078  002EFA                     l8254:
 10079                           
 10080                           ; BSR set to: 0
 10081  002EFA  2B97               	incf	macToString@j& (0+255),f,b
 10082                           
 10083                           ; BSR set to: 0
 10084                           ;uart.c: 129: }
 10085                           ;uart.c: 131: if (i < 5) {
 10086                           
 10087                           ; BSR set to: 0
 10088  002EFC  BF96               	btfsc	(macToString@i+1)& (0+255),7,b
 10089  002EFE  D006               	goto	u9090
 10090  002F00  5196               	movf	(macToString@i+1)& (0+255),w,b
 10091  002F02  E10F               	bnz	l8262
 10092  002F04  0E05               	movlw	5
 10093  002F06  5D95               	subwf	macToString@i& (0+255),w,b
 10094  002F08  B0D8               	btfsc	status,0,c
 10095  002F0A  D00B               	goto	l793
 10096  002F0C                     u9090:
 10097                           
 10098                           ; BSR set to: 0
 10099                           ;uart.c: 132: address[j++] = ':';
 10100  002F0C  5197               	movf	macToString@j& (0+255),w,b
 10101  002F0E  0D01               	mullw	1
 10102  002F10  0E81               	movlw	low macToString@address
 10103  002F12  24F3               	addwf	prodl,w,c
 10104  002F14  6ED9               	movwf	fsr2l,c
 10105  002F16  0E00               	movlw	high macToString@address
 10106  002F18  20F4               	addwfc	prodh,w,c
 10107  002F1A  6EDA               	movwf	fsr2h,c
 10108  002F1C  0E3A               	movlw	58
 10109  002F1E  6EDF               	movwf	indf2,c
 10110                           
 10111                           ; BSR set to: 0
 10112  002F20  2B97               	incf	macToString@j& (0+255),f,b
 10113  002F22                     l793:
 10114  002F22                     l8262:
 10115                           
 10116                           ; BSR set to: 0
 10117  002F22  4B95               	infsnz	macToString@i& (0+255),f,b
 10118  002F24  2B96               	incf	(macToString@i+1)& (0+255),f,b
 10119                           
 10120                           ; BSR set to: 0
 10121  002F26  BF96               	btfsc	(macToString@i+1)& (0+255),7,b
 10122  002F28  D79C               	goto	l787
 10123  002F2A  5196               	movf	(macToString@i+1)& (0+255),w,b
 10124  002F2C  E101               	bnz	l8266
 10125  002F2E  D795               	goto	L1
 10126  002F30                     u9100:
 10127  002F30                     l788:
 10128  002F30                     l8266:
 10129                           
 10130                           ; BSR set to: 0
 10131                           ;uart.c: 133: }
 10132                           ;uart.c: 134: }
 10133                           ;uart.c: 135: return address;
 10134  002F30  0E81               	movlw	low macToString@address
 10135  002F32  6F7A               	movwf	?_macToString& (0+255),b
 10136  002F34  0E00               	movlw	high macToString@address
 10137  002F36  6F7B               	movwf	(?_macToString+1)& (0+255),b
 10138  002F38  0012               	return	
 10139  002F3A                     __end_of_macToString:
 10140                           	opt stack 0
 10141                           tblptru	equ	0xFF8
 10142                           tblptrh	equ	0xFF7
 10143                           tblptrl	equ	0xFF6
 10144                           tablat	equ	0xFF5
 10145                           prodh	equ	0xFF4
 10146                           prodl	equ	0xFF3
 10147                           intcon	equ	0xFF2
 10148                           intcon3	equ	0xFF0
 10149                           indf0	equ	0xFEF
 10150                           postinc0	equ	0xFEE
 10151                           plusw0	equ	0xFEB
 10152                           fsr0h	equ	0xFEA
 10153                           fsr0l	equ	0xFE9
 10154                           wreg	equ	0xFE8
 10155                           postinc1	equ	0xFE6
 10156                           postdec1	equ	0xFE5
 10157                           plusw1	equ	0xFE3
 10158                           fsr1h	equ	0xFE2
 10159                           fsr1l	equ	0xFE1
 10160                           indf2	equ	0xFDF
 10161                           postinc2	equ	0xFDE
 10162                           postdec2	equ	0xFDD
 10163                           plusw2	equ	0xFDB
 10164                           fsr2h	equ	0xFDA
 10165                           fsr2l	equ	0xFD9
 10166                           status	equ	0xFD8
 10167                           
 10168 ;; *************** function _arp_parseFromRXBuffer *****************
 10169 ;; Defined at:
 10170 ;;		line 64 in file "src/stack/protocols/arp.c"
 10171 ;; Parameters:    Size  Location     Type
 10172 ;;  frame           2   20[BANK0 ] PTR struct ethernetFrame
 10173 ;;		 -> stack.ethernet(15), stack(121), 
 10174 ;; Auto vars:     Size  Location     Type
 10175 ;;  i               1   58[BANK0 ] unsigned char 
 10176 ;;  i               1   57[BANK0 ] unsigned char 
 10177 ;;  i               1   56[BANK0 ] unsigned char 
 10178 ;;  i               1   55[BANK0 ] unsigned char 
 10179 ;;  arp            32   61[BANK0 ] struct arp_message
 10180 ;;  offset          2   59[BANK0 ] const unsigned int 
 10181 ;; Return value:  Size  Location     Type
 10182 ;;                  32   20[BANK0 ] struct arp_message
 10183 ;; Registers used:
 10184 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10185 ;; Tracked objects:
 10186 ;;		On entry : 0/0
 10187 ;;		On exit  : 0/0
 10188 ;;		Unchanged: 0/0
 10189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10190 ;;      Params:         0      32       0       0       0       0       0       0       0
 10191 ;;      Locals:         0      38       0       0       0       0       0       0       0
 10192 ;;      Temps:          0       3       0       0       0       0       0       0       0
 10193 ;;      Totals:         0      73       0       0       0       0       0       0       0
 10194 ;;Total ram usage:       73 bytes
 10195 ;; Hardware stack levels used:    1
 10196 ;; Hardware stack levels required when called:    8
 10197 ;; This function calls:
 10198 ;;		_ethernetController_streamFromRXBuffer
 10199 ;;		_ipv4_cmp
 10200 ;;		_ipv4_isAllZero
 10201 ;;		_mac_cmp
 10202 ;;		_mac_isAllZero
 10203 ;; This function is called by:
 10204 ;;		_arp_handleNewPacket
 10205 ;; This function uses a non-reentrant model
 10206 ;;
 10207                           
 10208                           	psect	text31
 10209  000AEE                     __ptext31:
 10210                           	opt stack 0
 10211  000AEE                     _arp_parseFromRXBuffer:
 10212                           	opt stack 19
 10213                           
 10214                           ;arp.c: 65: arp_message_t arp;
 10215                           ;arp.c: 66: uint16_t const offset = 22;
 10216                           
 10217                           ; BSR set to: 0
 10218                           ;incstack = 0
 10219  000AEE  0E00               	movlw	0
 10220  000AF0  0100               	movlb	0	; () banked
 10221  000AF2  6F9C               	movwf	(arp_parseFromRXBuffer@offset+1)& (0+255),b
 10222  000AF4  0E16               	movlw	22
 10223  000AF6  6F9B               	movwf	arp_parseFromRXBuffer@offset& (0+255),b
 10224                           
 10225                           ; BSR set to: 0
 10226                           ;arp.c: 68: ethernetController_streamFromRXBuffer(0, frame->memory.start + offset);
 10227  000AF8  EE20 F010          	lfsr	2,16
 10228  000AFC  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 10229  000AFE  26D9               	addwf	fsr2l,f,c
 10230  000B00  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 10231  000B02  22DA               	addwfc	fsr2h,f,c
 10232  000B04  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 10233  000B08  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 10234  000B0C  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 10235  000B0E  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 10236  000B10  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 10237  000B12  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 10238  000B14  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 10239  000B16  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 10240  000B18  0E00               	movlw	0
 10241  000B1A  ECF4  F020         	call	_ethernetController_streamFromRXBuffer
 10242                           
 10243                           ;arp.c: 71: arp.htype = (ethernetController_streamFromRXBuffer(1, frame->memory.start + 
      +                          offset) << 8);
 10244  000B1E  0100               	movlb	0	; () banked
 10245  000B20  EE20 F010          	lfsr	2,16
 10246  000B24  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 10247  000B26  26D9               	addwf	fsr2l,f,c
 10248  000B28  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 10249  000B2A  22DA               	addwfc	fsr2h,f,c
 10250  000B2C  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 10251  000B30  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 10252  000B34  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 10253  000B36  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 10254  000B38  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 10255  000B3A  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 10256  000B3C  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 10257  000B3E  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 10258  000B40  0E01               	movlw	1
 10259  000B42  ECF4  F020         	call	_ethernetController_streamFromRXBuffer
 10260  000B46  0100               	movlb	0	; () banked
 10261  000B48  6F9E               	movwf	(arp_parseFromRXBuffer@arp+1)& (0+255),b
 10262  000B4A  6B9D               	clrf	arp_parseFromRXBuffer@arp& (0+255),b
 10263                           
 10264                           ; BSR set to: 0
 10265                           ;arp.c: 72: arp.htype |= ethernetController_streamFromRXBuffer(1, frame->memory.start + 
      +                          offset);
 10266  000B4C  EE20 F010          	lfsr	2,16
 10267  000B50  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 10268  000B52  26D9               	addwf	fsr2l,f,c
 10269  000B54  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 10270  000B56  22DA               	addwfc	fsr2h,f,c
 10271  000B58  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 10272  000B5C  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 10273  000B60  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 10274  000B62  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 10275  000B64  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 10276  000B66  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 10277  000B68  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 10278  000B6A  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 10279  000B6C  0E01               	movlw	1
 10280  000B6E  ECF4  F020         	call	_ethernetController_streamFromRXBuffer
 10281  000B72  0100               	movlb	0	; () banked
 10282  000B74  6F96               	movwf	(??_arp_parseFromRXBuffer+2)& (0+255),b
 10283  000B76  5196               	movf	(??_arp_parseFromRXBuffer+2)& (0+255),w,b
 10284  000B78  139D               	iorwf	arp_parseFromRXBuffer@arp& (0+255),f,b
 10285                           
 10286                           ; BSR set to: 0
 10287                           ;arp.c: 74: arp.ptype = (ethernetController_streamFromRXBuffer(1, frame->memory.start + 
      +                          offset) << 8);
 10288  000B7A  EE20 F010          	lfsr	2,16
 10289  000B7E  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 10290  000B80  26D9               	addwf	fsr2l,f,c
 10291  000B82  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 10292  000B84  22DA               	addwfc	fsr2h,f,c
 10293  000B86  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 10294  000B8A  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 10295  000B8E  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 10296  000B90  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 10297  000B92  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 10298  000B94  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 10299  000B96  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 10300  000B98  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 10301  000B9A  0E01               	movlw	1
 10302  000B9C  ECF4  F020         	call	_ethernetController_streamFromRXBuffer
 10303  000BA0  0100               	movlb	0	; () banked
 10304  000BA2  6FA0               	movwf	(arp_parseFromRXBuffer@arp+3)& (0+255),b
 10305  000BA4  6B9F               	clrf	(arp_parseFromRXBuffer@arp+2)& (0+255),b
 10306                           
 10307                           ; BSR set to: 0
 10308                           ;arp.c: 75: arp.ptype |= ethernetController_streamFromRXBuffer(1, frame->memory.start + 
      +                          offset);
 10309  000BA6  EE20 F010          	lfsr	2,16
 10310  000BAA  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 10311  000BAC  26D9               	addwf	fsr2l,f,c
 10312  000BAE  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 10313  000BB0  22DA               	addwfc	fsr2h,f,c
 10314  000BB2  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 10315  000BB6  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 10316  000BBA  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 10317  000BBC  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 10318  000BBE  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 10319  000BC0  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 10320  000BC2  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 10321  000BC4  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 10322  000BC6  0E01               	movlw	1
 10323  000BC8  ECF4  F020         	call	_ethernetController_streamFromRXBuffer
 10324  000BCC  0100               	movlb	0	; () banked
 10325  000BCE  6F96               	movwf	(??_arp_parseFromRXBuffer+2)& (0+255),b
 10326  000BD0  5196               	movf	(??_arp_parseFromRXBuffer+2)& (0+255),w,b
 10327  000BD2  139F               	iorwf	(arp_parseFromRXBuffer@arp+2)& (0+255),f,b
 10328                           
 10329                           ; BSR set to: 0
 10330                           ;arp.c: 77: arp.hlen = ethernetController_streamFromRXBuffer(1, frame->memory.start + of
      +                          fset);
 10331  000BD4  EE20 F010          	lfsr	2,16
 10332  000BD8  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 10333  000BDA  26D9               	addwf	fsr2l,f,c
 10334  000BDC  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 10335  000BDE  22DA               	addwfc	fsr2h,f,c
 10336  000BE0  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 10337  000BE4  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 10338  000BE8  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 10339  000BEA  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 10340  000BEC  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 10341  000BEE  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 10342  000BF0  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 10343  000BF2  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 10344  000BF4  0E01               	movlw	1
 10345  000BF6  ECF4  F020         	call	_ethernetController_streamFromRXBuffer
 10346  000BFA  0100               	movlb	0	; () banked
 10347  000BFC  6FA1               	movwf	(arp_parseFromRXBuffer@arp+4)& (0+255),b
 10348                           
 10349                           ; BSR set to: 0
 10350                           ;arp.c: 78: arp.plen = ethernetController_streamFromRXBuffer(1, frame->memory.start + of
      +                          fset);
 10351  000BFE  EE20 F010          	lfsr	2,16
 10352  000C02  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 10353  000C04  26D9               	addwf	fsr2l,f,c
 10354  000C06  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 10355  000C08  22DA               	addwfc	fsr2h,f,c
 10356  000C0A  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 10357  000C0E  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 10358  000C12  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 10359  000C14  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 10360  000C16  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 10361  000C18  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 10362  000C1A  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 10363  000C1C  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 10364  000C1E  0E01               	movlw	1
 10365  000C20  ECF4  F020         	call	_ethernetController_streamFromRXBuffer
 10366  000C24  0100               	movlb	0	; () banked
 10367  000C26  6FA2               	movwf	(arp_parseFromRXBuffer@arp+5)& (0+255),b
 10368                           
 10369                           ; BSR set to: 0
 10370                           ;arp.c: 80: arp.operation = (ethernetController_streamFromRXBuffer(1, frame->memory.star
      +                          t + offset) << 8);
 10371  000C28  EE20 F010          	lfsr	2,16
 10372  000C2C  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 10373  000C2E  26D9               	addwf	fsr2l,f,c
 10374  000C30  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 10375  000C32  22DA               	addwfc	fsr2h,f,c
 10376  000C34  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 10377  000C38  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 10378  000C3C  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 10379  000C3E  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 10380  000C40  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 10381  000C42  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 10382  000C44  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 10383  000C46  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 10384  000C48  0E01               	movlw	1
 10385  000C4A  ECF4  F020         	call	_ethernetController_streamFromRXBuffer
 10386  000C4E  0100               	movlb	0	; () banked
 10387  000C50  6FA4               	movwf	(arp_parseFromRXBuffer@arp+7)& (0+255),b
 10388  000C52  6BA3               	clrf	(arp_parseFromRXBuffer@arp+6)& (0+255),b
 10389                           
 10390                           ; BSR set to: 0
 10391                           ;arp.c: 81: arp.operation |= ethernetController_streamFromRXBuffer(1, frame->memory.star
      +                          t + offset);
 10392  000C54  EE20 F010          	lfsr	2,16
 10393  000C58  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 10394  000C5A  26D9               	addwf	fsr2l,f,c
 10395  000C5C  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 10396  000C5E  22DA               	addwfc	fsr2h,f,c
 10397  000C60  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 10398  000C64  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 10399  000C68  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 10400  000C6A  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 10401  000C6C  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 10402  000C6E  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 10403  000C70  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 10404  000C72  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 10405  000C74  0E01               	movlw	1
 10406  000C76  ECF4  F020         	call	_ethernetController_streamFromRXBuffer
 10407  000C7A  0100               	movlb	0	; () banked
 10408  000C7C  6F96               	movwf	(??_arp_parseFromRXBuffer+2)& (0+255),b
 10409  000C7E  5196               	movf	(??_arp_parseFromRXBuffer+2)& (0+255),w,b
 10410  000C80  13A3               	iorwf	(arp_parseFromRXBuffer@arp+6)& (0+255),f,b
 10411                           
 10412                           ; BSR set to: 0
 10413                           ;arp.c: 84: for (uint8_t i = 0; i < arp.hlen; i++)
 10414  000C82  0E00               	movlw	0
 10415  000C84  6F97               	movwf	arp_parseFromRXBuffer@i& (0+255),b
 10416  000C86  D024               	goto	l907
 10417  000C88                     
 10418                           ; BSR set to: 0
 10419                           ;arp.c: 85: arp.senderMACAddress.address[i] = ethernetController_streamFromRXBuffer(1, f
      +                          rame->memory.start + offset);
 10420                           
 10421                           ; BSR set to: 0
 10422  000C88  EE20 F010          	lfsr	2,16
 10423  000C8C  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 10424  000C8E  26D9               	addwf	fsr2l,f,c
 10425  000C90  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 10426  000C92  22DA               	addwfc	fsr2h,f,c
 10427  000C94  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 10428  000C98  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 10429  000C9C  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 10430  000C9E  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 10431  000CA0  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 10432  000CA2  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 10433  000CA4  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 10434  000CA6  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 10435  000CA8  0E01               	movlw	1
 10436  000CAA  ECF4  F020         	call	_ethernetController_streamFromRXBuffer
 10437  000CAE  0100               	movlb	0	; () banked
 10438  000CB0  6F96               	movwf	(??_arp_parseFromRXBuffer+2)& (0+255),b
 10439  000CB2  5197               	movf	arp_parseFromRXBuffer@i& (0+255),w,b
 10440  000CB4  0D01               	mullw	1
 10441  000CB6  0E08               	movlw	8
 10442  000CB8  26F3               	addwf	prodl,f,c
 10443  000CBA  0E00               	movlw	0
 10444  000CBC  22F4               	addwfc	prodh,f,c
 10445  000CBE  0E9D               	movlw	low arp_parseFromRXBuffer@arp
 10446  000CC0  24F3               	addwf	prodl,w,c
 10447  000CC2  6ED9               	movwf	fsr2l,c
 10448  000CC4  0E00               	movlw	high arp_parseFromRXBuffer@arp
 10449  000CC6  20F4               	addwfc	prodh,w,c
 10450  000CC8  6EDA               	movwf	fsr2h,c
 10451  000CCA  C096  FFDF         	movff	??_arp_parseFromRXBuffer+2,indf2
 10452                           
 10453                           ; BSR set to: 0
 10454  000CCE  2B97               	incf	arp_parseFromRXBuffer@i& (0+255),f,b
 10455  000CD0                     l907:
 10456                           
 10457                           ; BSR set to: 0
 10458                           
 10459                           ; BSR set to: 0
 10460  000CD0  51A1               	movf	(arp_parseFromRXBuffer@arp+4)& (0+255),w,b
 10461  000CD2  5D97               	subwf	arp_parseFromRXBuffer@i& (0+255),w,b
 10462  000CD4  A0D8               	btfss	status,0,c
 10463  000CD6  D7D8               	goto	l908
 10464                           
 10465                           ; BSR set to: 0
 10466                           ;arp.c: 86: for (uint8_t i = 0; i < arp.plen; i++)
 10467                           
 10468                           ; BSR set to: 0
 10469  000CD8  0E00               	movlw	0
 10470  000CDA  6F98               	movwf	arp_parseFromRXBuffer@i_2993& (0+255),b
 10471  000CDC  D024               	goto	l910
 10472  000CDE                     
 10473                           ; BSR set to: 0
 10474                           ;arp.c: 87: arp.senderIPAddress.address[i] = ethernetController_streamFromRXBuffer(1, fr
      +                          ame->memory.start + offset);
 10475                           
 10476                           ; BSR set to: 0
 10477  000CDE  EE20 F010          	lfsr	2,16
 10478  000CE2  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 10479  000CE4  26D9               	addwf	fsr2l,f,c
 10480  000CE6  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 10481  000CE8  22DA               	addwfc	fsr2h,f,c
 10482  000CEA  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 10483  000CEE  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 10484  000CF2  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 10485  000CF4  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 10486  000CF6  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 10487  000CF8  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 10488  000CFA  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 10489  000CFC  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 10490  000CFE  0E01               	movlw	1
 10491  000D00  ECF4  F020         	call	_ethernetController_streamFromRXBuffer
 10492  000D04  0100               	movlb	0	; () banked
 10493  000D06  6F96               	movwf	(??_arp_parseFromRXBuffer+2)& (0+255),b
 10494  000D08  5198               	movf	arp_parseFromRXBuffer@i_2993& (0+255),w,b
 10495  000D0A  0D01               	mullw	1
 10496  000D0C  0E0E               	movlw	14
 10497  000D0E  26F3               	addwf	prodl,f,c
 10498  000D10  0E00               	movlw	0
 10499  000D12  22F4               	addwfc	prodh,f,c
 10500  000D14  0E9D               	movlw	low arp_parseFromRXBuffer@arp
 10501  000D16  24F3               	addwf	prodl,w,c
 10502  000D18  6ED9               	movwf	fsr2l,c
 10503  000D1A  0E00               	movlw	high arp_parseFromRXBuffer@arp
 10504  000D1C  20F4               	addwfc	prodh,w,c
 10505  000D1E  6EDA               	movwf	fsr2h,c
 10506  000D20  C096  FFDF         	movff	??_arp_parseFromRXBuffer+2,indf2
 10507                           
 10508                           ; BSR set to: 0
 10509  000D24  2B98               	incf	arp_parseFromRXBuffer@i_2993& (0+255),f,b
 10510  000D26                     l910:
 10511                           
 10512                           ; BSR set to: 0
 10513                           
 10514                           ; BSR set to: 0
 10515  000D26  51A2               	movf	(arp_parseFromRXBuffer@arp+5)& (0+255),w,b
 10516  000D28  5D98               	subwf	arp_parseFromRXBuffer@i_2993& (0+255),w,b
 10517  000D2A  A0D8               	btfss	status,0,c
 10518  000D2C  D7D8               	goto	l911
 10519                           
 10520                           ; BSR set to: 0
 10521                           ;arp.c: 89: for (uint8_t i = 0; i < arp.hlen; i++)
 10522                           
 10523                           ; BSR set to: 0
 10524  000D2E  0E00               	movlw	0
 10525  000D30  6F99               	movwf	arp_parseFromRXBuffer@i_2994& (0+255),b
 10526  000D32  D024               	goto	l913
 10527  000D34                     
 10528                           ; BSR set to: 0
 10529                           ;arp.c: 90: arp.targetMACAddress.address[i] = ethernetController_streamFromRXBuffer(1, f
      +                          rame->memory.start + offset);
 10530                           
 10531                           ; BSR set to: 0
 10532  000D34  EE20 F010          	lfsr	2,16
 10533  000D38  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 10534  000D3A  26D9               	addwf	fsr2l,f,c
 10535  000D3C  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 10536  000D3E  22DA               	addwfc	fsr2h,f,c
 10537  000D40  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 10538  000D44  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 10539  000D48  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 10540  000D4A  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 10541  000D4C  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 10542  000D4E  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 10543  000D50  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 10544  000D52  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 10545  000D54  0E01               	movlw	1
 10546  000D56  ECF4  F020         	call	_ethernetController_streamFromRXBuffer
 10547  000D5A  0100               	movlb	0	; () banked
 10548  000D5C  6F96               	movwf	(??_arp_parseFromRXBuffer+2)& (0+255),b
 10549  000D5E  5199               	movf	arp_parseFromRXBuffer@i_2994& (0+255),w,b
 10550  000D60  0D01               	mullw	1
 10551  000D62  0E12               	movlw	18
 10552  000D64  26F3               	addwf	prodl,f,c
 10553  000D66  0E00               	movlw	0
 10554  000D68  22F4               	addwfc	prodh,f,c
 10555  000D6A  0E9D               	movlw	low arp_parseFromRXBuffer@arp
 10556  000D6C  24F3               	addwf	prodl,w,c
 10557  000D6E  6ED9               	movwf	fsr2l,c
 10558  000D70  0E00               	movlw	high arp_parseFromRXBuffer@arp
 10559  000D72  20F4               	addwfc	prodh,w,c
 10560  000D74  6EDA               	movwf	fsr2h,c
 10561  000D76  C096  FFDF         	movff	??_arp_parseFromRXBuffer+2,indf2
 10562                           
 10563                           ; BSR set to: 0
 10564  000D7A  2B99               	incf	arp_parseFromRXBuffer@i_2994& (0+255),f,b
 10565  000D7C                     l913:
 10566                           
 10567                           ; BSR set to: 0
 10568                           
 10569                           ; BSR set to: 0
 10570  000D7C  51A1               	movf	(arp_parseFromRXBuffer@arp+4)& (0+255),w,b
 10571  000D7E  5D99               	subwf	arp_parseFromRXBuffer@i_2994& (0+255),w,b
 10572  000D80  A0D8               	btfss	status,0,c
 10573  000D82  D7D8               	goto	l914
 10574                           
 10575                           ; BSR set to: 0
 10576                           ;arp.c: 91: for (uint8_t i = 0; i < arp.plen; i++)
 10577                           
 10578                           ; BSR set to: 0
 10579  000D84  0E00               	movlw	0
 10580  000D86  6F9A               	movwf	arp_parseFromRXBuffer@i_2995& (0+255),b
 10581  000D88  D024               	goto	l916
 10582  000D8A                     
 10583                           ; BSR set to: 0
 10584                           ;arp.c: 92: arp.targetIPAddress.address[i] = ethernetController_streamFromRXBuffer(1, fr
      +                          ame->memory.start + offset);
 10585                           
 10586                           ; BSR set to: 0
 10587  000D8A  EE20 F010          	lfsr	2,16
 10588  000D8E  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 10589  000D90  26D9               	addwf	fsr2l,f,c
 10590  000D92  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 10591  000D94  22DA               	addwfc	fsr2h,f,c
 10592  000D96  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 10593  000D9A  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 10594  000D9E  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 10595  000DA0  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 10596  000DA2  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 10597  000DA4  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 10598  000DA6  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 10599  000DA8  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 10600  000DAA  0E01               	movlw	1
 10601  000DAC  ECF4  F020         	call	_ethernetController_streamFromRXBuffer
 10602  000DB0  0100               	movlb	0	; () banked
 10603  000DB2  6F96               	movwf	(??_arp_parseFromRXBuffer+2)& (0+255),b
 10604  000DB4  519A               	movf	arp_parseFromRXBuffer@i_2995& (0+255),w,b
 10605  000DB6  0D01               	mullw	1
 10606  000DB8  0E18               	movlw	24
 10607  000DBA  26F3               	addwf	prodl,f,c
 10608  000DBC  0E00               	movlw	0
 10609  000DBE  22F4               	addwfc	prodh,f,c
 10610  000DC0  0E9D               	movlw	low arp_parseFromRXBuffer@arp
 10611  000DC2  24F3               	addwf	prodl,w,c
 10612  000DC4  6ED9               	movwf	fsr2l,c
 10613  000DC6  0E00               	movlw	high arp_parseFromRXBuffer@arp
 10614  000DC8  20F4               	addwfc	prodh,w,c
 10615  000DCA  6EDA               	movwf	fsr2h,c
 10616  000DCC  C096  FFDF         	movff	??_arp_parseFromRXBuffer+2,indf2
 10617                           
 10618                           ; BSR set to: 0
 10619  000DD0  2B9A               	incf	arp_parseFromRXBuffer@i_2995& (0+255),f,b
 10620  000DD2                     l916:
 10621                           
 10622                           ; BSR set to: 0
 10623                           
 10624                           ; BSR set to: 0
 10625  000DD2  51A2               	movf	(arp_parseFromRXBuffer@arp+5)& (0+255),w,b
 10626  000DD4  5D9A               	subwf	arp_parseFromRXBuffer@i_2995& (0+255),w,b
 10627  000DD6  A0D8               	btfss	status,0,c
 10628  000DD8  D7D8               	goto	l917
 10629                           
 10630                           ; BSR set to: 0
 10631                           ;arp.c: 94: ethernetController_streamFromRXBuffer(2, frame->memory.start + offset);
 10632                           
 10633                           ; BSR set to: 0
 10634  000DDA  EE20 F010          	lfsr	2,16
 10635  000DDE  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 10636  000DE0  26D9               	addwf	fsr2l,f,c
 10637  000DE2  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 10638  000DE4  22DA               	addwfc	fsr2h,f,c
 10639  000DE6  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 10640  000DEA  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 10641  000DEE  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 10642  000DF0  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 10643  000DF2  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 10644  000DF4  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 10645  000DF6  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 10646  000DF8  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 10647  000DFA  0E02               	movlw	2
 10648  000DFC  ECF4  F020         	call	_ethernetController_streamFromRXBuffer
 10649                           
 10650                           ;arp.c: 96: if (ipv4_isAllZero(&arp.senderIPAddress)) {
 10651  000E00  0EAB               	movlw	low (arp_parseFromRXBuffer@arp+14)
 10652  000E02  0100               	movlb	0	; () banked
 10653  000E04  6F60               	movwf	ipv4_isAllZero@ip& (0+255),b
 10654  000E06  0E00               	movlw	high (arp_parseFromRXBuffer@arp+14)
 10655  000E08  6F61               	movwf	(ipv4_isAllZero@ip+1)& (0+255),b
 10656  000E0A  EC61  F024         	call	_ipv4_isAllZero	;wreg free
 10657  000E0E  0100               	movlb	0	; () banked
 10658  000E10  A0D8               	btfss	status,0,c
 10659  000E12  D002               	goto	l919
 10660                           
 10661                           ; BSR set to: 0
 10662                           ;arp.c: 97: arp.fIsProbe = 1;
 10663  000E14  83B9               	bsf	(arp_parseFromRXBuffer@arp+28)& (0+255),1,b
 10664  000E16  D03C               	goto	l923
 10665  000E18                     l919:
 10666                           
 10667                           ; BSR set to: 0
 10668                           ;arp.c: 100: arp.fIsProbe = 0;
 10669  000E18  93B9               	bcf	(arp_parseFromRXBuffer@arp+28)& (0+255),1,b
 10670                           
 10671                           ; BSR set to: 0
 10672                           ;arp.c: 102: if (ipv4_cmp(&arp.senderIPAddress, &arp.targetIPAddress) &&
 10673                           ;arp.c: 103: mac_isAllZero(&arp.targetMACAddress) &&
 10674                           ;arp.c: 104: arp.operation == ARP_REQUEST) {
 10675  000E1A  0EAB               	movlw	low (arp_parseFromRXBuffer@arp+14)
 10676  000E1C  6F60               	movwf	ipv4_cmp@a& (0+255),b
 10677  000E1E  0E00               	movlw	high (arp_parseFromRXBuffer@arp+14)
 10678  000E20  6F61               	movwf	(ipv4_cmp@a+1)& (0+255),b
 10679  000E22  0EB5               	movlw	low (arp_parseFromRXBuffer@arp+24)
 10680  000E24  6F62               	movwf	ipv4_cmp@b& (0+255),b
 10681  000E26  0E00               	movlw	high (arp_parseFromRXBuffer@arp+24)
 10682  000E28  6F63               	movwf	(ipv4_cmp@b+1)& (0+255),b
 10683  000E2A  EC47  F023         	call	_ipv4_cmp	;wreg free
 10684  000E2E  0100               	movlb	0	; () banked
 10685  000E30  A0D8               	btfss	status,0,c
 10686  000E32  D00D               	goto	l921
 10687                           
 10688                           ; BSR set to: 0
 10689  000E34  0EAF               	movlw	low (arp_parseFromRXBuffer@arp+18)
 10690  000E36  6F60               	movwf	mac_isAllZero@mac& (0+255),b
 10691  000E38  0E00               	movlw	high (arp_parseFromRXBuffer@arp+18)
 10692  000E3A  6F61               	movwf	(mac_isAllZero@mac+1)& (0+255),b
 10693  000E3C  EC49  F024         	call	_mac_isAllZero	;wreg free
 10694  000E40  0100               	movlb	0	; () banked
 10695  000E42  A0D8               	btfss	status,0,c
 10696  000E44  D004               	goto	l921
 10697                           
 10698                           ; BSR set to: 0
 10699  000E46  05A3               	decf	(arp_parseFromRXBuffer@arp+6)& (0+255),w,b
 10700  000E48  11A4               	iorwf	(arp_parseFromRXBuffer@arp+7)& (0+255),w,b
 10701  000E4A  B4D8               	btfsc	status,2,c
 10702  000E4C  D01F               	goto	u10090
 10703  000E4E                     l921:
 10704                           
 10705                           ; BSR set to: 0
 10706                           ;arp.c: 108: if (ipv4_cmp(&arp.senderIPAddress, &arp.targetIPAddress) &&
 10707                           ;arp.c: 109: mac_cmp(&arp.senderMACAddress, &arp.targetMACAddress) &&
 10708                           ;arp.c: 110: arp.operation == ARP_REPLY) {
 10709                           
 10710                           ; BSR set to: 0
 10711  000E4E  0EAB               	movlw	low (arp_parseFromRXBuffer@arp+14)
 10712  000E50  6F60               	movwf	ipv4_cmp@a& (0+255),b
 10713  000E52  0E00               	movlw	high (arp_parseFromRXBuffer@arp+14)
 10714  000E54  6F61               	movwf	(ipv4_cmp@a+1)& (0+255),b
 10715  000E56  0EB5               	movlw	low (arp_parseFromRXBuffer@arp+24)
 10716  000E58  6F62               	movwf	ipv4_cmp@b& (0+255),b
 10717  000E5A  0E00               	movlw	high (arp_parseFromRXBuffer@arp+24)
 10718  000E5C  6F63               	movwf	(ipv4_cmp@b+1)& (0+255),b
 10719  000E5E  EC47  F023         	call	_ipv4_cmp	;wreg free
 10720  000E62  0100               	movlb	0	; () banked
 10721  000E64  A0D8               	btfss	status,0,c
 10722  000E66  D014               	goto	l923
 10723                           
 10724                           ; BSR set to: 0
 10725  000E68  0EA5               	movlw	low (arp_parseFromRXBuffer@arp+8)
 10726  000E6A  6F60               	movwf	mac_cmp@a& (0+255),b
 10727  000E6C  0E00               	movlw	high (arp_parseFromRXBuffer@arp+8)
 10728  000E6E  6F61               	movwf	(mac_cmp@a+1)& (0+255),b
 10729  000E70  0EAF               	movlw	low (arp_parseFromRXBuffer@arp+18)
 10730  000E72  6F62               	movwf	mac_cmp@b& (0+255),b
 10731  000E74  0E00               	movlw	high (arp_parseFromRXBuffer@arp+18)
 10732  000E76  6F63               	movwf	(mac_cmp@b+1)& (0+255),b
 10733  000E78  EC26  F023         	call	_mac_cmp	;wreg free
 10734  000E7C  0100               	movlb	0	; () banked
 10735  000E7E  A0D8               	btfss	status,0,c
 10736  000E80  D007               	goto	l923
 10737                           
 10738                           ; BSR set to: 0
 10739  000E82  0E02               	movlw	2
 10740  000E84  19A3               	xorwf	(arp_parseFromRXBuffer@arp+6)& (0+255),w,b
 10741  000E86  11A4               	iorwf	(arp_parseFromRXBuffer@arp+7)& (0+255),w,b
 10742  000E88  A4D8               	btfss	status,2,c
 10743  000E8A  D002               	goto	l923
 10744  000E8C                     u10090:
 10745                           
 10746                           ; BSR set to: 0
 10747                           ;arp.c: 111: arp.fIsGratuitous = 1;
 10748  000E8C  81B9               	bsf	(arp_parseFromRXBuffer@arp+28)& (0+255),0,b
 10749                           
 10750                           ;arp.c: 112: } else {
 10751  000E8E  D001               	goto	l924
 10752  000E90                     l923:
 10753                           
 10754                           ; BSR set to: 0
 10755                           ;arp.c: 113: arp.fIsGratuitous = 0;
 10756  000E90  91B9               	bcf	(arp_parseFromRXBuffer@arp+28)& (0+255),0,b
 10757  000E92                     l924:
 10758                           
 10759                           ; BSR set to: 0
 10760                           ;arp.c: 114: }
 10761                           ;arp.c: 115: }
 10762                           ;arp.c: 116: }
 10763                           ;arp.c: 119: if ((arp.htype != ARP_HTYPE_ETHERNET) ||
 10764                           ;arp.c: 120: (arp.ptype != ARP_PTYPE_IPv4) ||
 10765                           ;arp.c: 121: (arp.operation > 2) ||
 10766                           ;arp.c: 122: (arp.hlen != 6u) ||
 10767                           ;arp.c: 123: (arp.plen != 4u)) {
 10768                           
 10769                           ; BSR set to: 0
 10770                           
 10771                           ; BSR set to: 0
 10772                           
 10773                           ; BSR set to: 0
 10774  000E92  059D               	decf	arp_parseFromRXBuffer@arp& (0+255),w,b
 10775  000E94  119E               	iorwf	(arp_parseFromRXBuffer@arp+1)& (0+255),w,b
 10776  000E96  A4D8               	btfss	status,2,c
 10777  000E98  D013               	goto	u10140
 10778                           
 10779                           ; BSR set to: 0
 10780  000E9A  0E08               	movlw	8
 10781  000E9C  19A0               	xorwf	(arp_parseFromRXBuffer@arp+3)& (0+255),w,b
 10782  000E9E  119F               	iorwf	(arp_parseFromRXBuffer@arp+2)& (0+255),w,b
 10783  000EA0  A4D8               	btfss	status,2,c
 10784  000EA2  D00E               	goto	u10140
 10785                           
 10786                           ; BSR set to: 0
 10787  000EA4  51A4               	movf	(arp_parseFromRXBuffer@arp+7)& (0+255),w,b
 10788  000EA6  E10C               	bnz	l8674
 10789  000EA8  0E03               	movlw	3
 10790  000EAA  5DA3               	subwf	(arp_parseFromRXBuffer@arp+6)& (0+255),w,b
 10791  000EAC  B0D8               	btfsc	status,0,c
 10792  000EAE  D008               	goto	u10140
 10793                           
 10794                           ; BSR set to: 0
 10795  000EB0  0E06               	movlw	6
 10796  000EB2  19A1               	xorwf	(arp_parseFromRXBuffer@arp+4)& (0+255),w,b
 10797  000EB4  A4D8               	btfss	status,2,c
 10798  000EB6  D004               	goto	u10140
 10799                           
 10800                           ; BSR set to: 0
 10801  000EB8  0E04               	movlw	4
 10802  000EBA  19A2               	xorwf	(arp_parseFromRXBuffer@arp+5)& (0+255),w,b
 10803  000EBC  B4D8               	btfsc	status,2,c
 10804  000EBE  D004               	goto	l925
 10805  000EC0                     u10140:
 10806  000EC0                     l8674:
 10807                           
 10808                           ; BSR set to: 0
 10809                           ;arp.c: 124: arp.err.code = ERROR_ARP_INVALID_VALUES;
 10810  000EC0  0E01               	movlw	1
 10811  000EC2  6FBC               	movwf	(arp_parseFromRXBuffer@arp+31)& (0+255),b
 10812  000EC4  0E93               	movlw	147
 10813  000EC6  D003               	goto	L2
 10814  000EC8                     l925:
 10815                           
 10816                           ; BSR set to: 0
 10817                           ;arp.c: 127: arp.err.code = (uint16_t)0;
 10818                           
 10819                           ; BSR set to: 0
 10820  000EC8  0E00               	movlw	0
 10821  000ECA  6FBC               	movwf	(arp_parseFromRXBuffer@arp+31)& (0+255),b
 10822  000ECC  0E00               	movlw	0
 10823  000ECE                     L2:
 10824  000ECE  6FBB               	movwf	(arp_parseFromRXBuffer@arp+30)& (0+255),b
 10825                           
 10826                           ;arp.c: 128: arp.err.module = ERROR_MODULE_ARP;
 10827  000ED0  0E03               	movlw	3
 10828  000ED2  6FBA               	movwf	(arp_parseFromRXBuffer@arp+29)& (0+255),b
 10829                           
 10830                           ; BSR set to: 0
 10831                           ;arp.c: 129: }
 10832                           ;arp.c: 131: return arp;
 10833                           
 10834                           ; BSR set to: 0
 10835  000ED4  EE20  F09D         	lfsr	2,arp_parseFromRXBuffer@arp
 10836  000ED8  EE00  F074         	lfsr	0,?_arp_parseFromRXBuffer
 10837  000EDC  0E1F               	movlw	31
 10838  000EDE                     u10151:
 10839  000EDE  CFDB FFEB          	movff	plusw2,plusw0
 10840  000EE2  06E8               	decf	wreg,f,c
 10841  000EE4  E2FC               	bc	u10151
 10842  000EE6  0012               	return	
 10843  000EE8                     __end_of_arp_parseFromRXBuffer:
 10844                           	opt stack 0
 10845                           tblptru	equ	0xFF8
 10846                           tblptrh	equ	0xFF7
 10847                           tblptrl	equ	0xFF6
 10848                           tablat	equ	0xFF5
 10849                           prodh	equ	0xFF4
 10850                           prodl	equ	0xFF3
 10851                           intcon	equ	0xFF2
 10852                           intcon3	equ	0xFF0
 10853                           indf0	equ	0xFEF
 10854                           postinc0	equ	0xFEE
 10855                           plusw0	equ	0xFEB
 10856                           fsr0h	equ	0xFEA
 10857                           fsr0l	equ	0xFE9
 10858                           wreg	equ	0xFE8
 10859                           postinc1	equ	0xFE6
 10860                           postdec1	equ	0xFE5
 10861                           plusw1	equ	0xFE3
 10862                           fsr1h	equ	0xFE2
 10863                           fsr1l	equ	0xFE1
 10864                           indf2	equ	0xFDF
 10865                           postinc2	equ	0xFDE
 10866                           postdec2	equ	0xFDD
 10867                           plusw2	equ	0xFDB
 10868                           fsr2h	equ	0xFDA
 10869                           fsr2l	equ	0xFD9
 10870                           status	equ	0xFD8
 10871                           
 10872 ;; *************** function _mac_isAllZero *****************
 10873 ;; Defined at:
 10874 ;;		line 31 in file "src/eth/mac.c"
 10875 ;; Parameters:    Size  Location     Type
 10876 ;;  mac             2    0[BANK0 ] PTR struct macaddress
 10877 ;;		 -> arp_parseFromRXBuffer@arp(32), 
 10878 ;; Auto vars:     Size  Location     Type
 10879 ;;  i               1    2[BANK0 ] unsigned char 
 10880 ;; Return value:  Size  Location     Type
 10881 ;;		None               void
 10882 ;; Registers used:
 10883 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10884 ;; Tracked objects:
 10885 ;;		On entry : 0/0
 10886 ;;		On exit  : 0/0
 10887 ;;		Unchanged: 0/0
 10888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10889 ;;      Params:         0       2       0       0       0       0       0       0       0
 10890 ;;      Locals:         0       1       0       0       0       0       0       0       0
 10891 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10892 ;;      Totals:         0       3       0       0       0       0       0       0       0
 10893 ;;Total ram usage:        3 bytes
 10894 ;; Hardware stack levels used:    1
 10895 ;; Hardware stack levels required when called:    4
 10896 ;; This function calls:
 10897 ;;		Nothing
 10898 ;; This function is called by:
 10899 ;;		_arp_parseFromRXBuffer
 10900 ;; This function uses a non-reentrant model
 10901 ;;
 10902                           
 10903                           	psect	text32
 10904  004892                     __ptext32:
 10905                           	opt stack 0
 10906  004892                     _mac_isAllZero:
 10907                           	opt stack 22
 10908                           
 10909                           ;mac.c: 32: for (uint8_t i = 0; i < 6; i++) {
 10910                           
 10911                           ; BSR set to: 0
 10912                           ;incstack = 0
 10913  004892  0E00               	movlw	0
 10914  004894  0100               	movlb	0	; () banked
 10915  004896  6F62               	movwf	mac_isAllZero@i& (0+255),b
 10916  004898                     l8272:
 10917                           
 10918                           ; BSR set to: 0
 10919  004898  0E05               	movlw	5
 10920  00489A  6562               	cpfsgt	mac_isAllZero@i& (0+255),b
 10921  00489C  D001               	goto	l384
 10922  00489E  D00F               	goto	u9130
 10923  0048A0                     l384:
 10924                           
 10925                           ; BSR set to: 0
 10926                           ;mac.c: 33: if (mac->address[i] != 0x00)
 10927                           
 10928                           ; BSR set to: 0
 10929  0048A0  5162               	movf	mac_isAllZero@i& (0+255),w,b
 10930  0048A2  0D01               	mullw	1
 10931  0048A4  50F3               	movf	prodl,w,c
 10932  0048A6  2560               	addwf	mac_isAllZero@mac& (0+255),w,b
 10933  0048A8  6ED9               	movwf	fsr2l,c
 10934  0048AA  50F4               	movf	prodh,w,c
 10935  0048AC  2161               	addwfc	(mac_isAllZero@mac+1)& (0+255),w,b
 10936  0048AE  6EDA               	movwf	fsr2h,c
 10937  0048B0  50DF               	movf	indf2,w,c
 10938  0048B2  B4D8               	btfsc	status,2,c
 10939  0048B4  D002               	goto	l386
 10940                           
 10941                           ; BSR set to: 0
 10942                           ;mac.c: 34: return 0;
 10943  0048B6  90D8               	bcf	status,0,c
 10944                           
 10945                           ; BSR set to: 0
 10946  0048B8  0012               	return	
 10947  0048BA                     l386:
 10948                           
 10949                           ; BSR set to: 0
 10950                           
 10951                           ; BSR set to: 0
 10952  0048BA  2B62               	incf	mac_isAllZero@i& (0+255),f,b
 10953  0048BC  D7ED               	goto	l8272
 10954  0048BE                     u9130:
 10955                           
 10956                           ; BSR set to: 0
 10957                           ;mac.c: 35: }
 10958                           ;mac.c: 36: return 1;
 10959                           
 10960                           ; BSR set to: 0
 10961  0048BE  80D8               	bsf	status,0,c
 10962  0048C0  0012               	return	
 10963  0048C2                     __end_of_mac_isAllZero:
 10964                           	opt stack 0
 10965                           tblptru	equ	0xFF8
 10966                           tblptrh	equ	0xFF7
 10967                           tblptrl	equ	0xFF6
 10968                           tablat	equ	0xFF5
 10969                           prodh	equ	0xFF4
 10970                           prodl	equ	0xFF3
 10971                           intcon	equ	0xFF2
 10972                           intcon3	equ	0xFF0
 10973                           indf0	equ	0xFEF
 10974                           postinc0	equ	0xFEE
 10975                           plusw0	equ	0xFEB
 10976                           fsr0h	equ	0xFEA
 10977                           fsr0l	equ	0xFE9
 10978                           wreg	equ	0xFE8
 10979                           postinc1	equ	0xFE6
 10980                           postdec1	equ	0xFE5
 10981                           plusw1	equ	0xFE3
 10982                           fsr1h	equ	0xFE2
 10983                           fsr1l	equ	0xFE1
 10984                           indf2	equ	0xFDF
 10985                           postinc2	equ	0xFDE
 10986                           postdec2	equ	0xFDD
 10987                           plusw2	equ	0xFDB
 10988                           fsr2h	equ	0xFDA
 10989                           fsr2l	equ	0xFD9
 10990                           status	equ	0xFD8
 10991                           
 10992 ;; *************** function _mac_cmp *****************
 10993 ;; Defined at:
 10994 ;;		line 39 in file "src/eth/mac.c"
 10995 ;; Parameters:    Size  Location     Type
 10996 ;;  a               2    0[BANK0 ] PTR struct macaddress
 10997 ;;		 -> arp_parseFromRXBuffer@arp(32), 
 10998 ;;  b               2    2[BANK0 ] PTR struct macaddress
 10999 ;;		 -> arp_parseFromRXBuffer@arp(32), 
 11000 ;; Auto vars:     Size  Location     Type
 11001 ;;  i               1    6[BANK0 ] unsigned char 
 11002 ;; Return value:  Size  Location     Type
 11003 ;;		None               void
 11004 ;; Registers used:
 11005 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11006 ;; Tracked objects:
 11007 ;;		On entry : 0/0
 11008 ;;		On exit  : 0/0
 11009 ;;		Unchanged: 0/0
 11010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11011 ;;      Params:         0       4       0       0       0       0       0       0       0
 11012 ;;      Locals:         0       1       0       0       0       0       0       0       0
 11013 ;;      Temps:          0       2       0       0       0       0       0       0       0
 11014 ;;      Totals:         0       7       0       0       0       0       0       0       0
 11015 ;;Total ram usage:        7 bytes
 11016 ;; Hardware stack levels used:    1
 11017 ;; Hardware stack levels required when called:    4
 11018 ;; This function calls:
 11019 ;;		Nothing
 11020 ;; This function is called by:
 11021 ;;		_arp_parseFromRXBuffer
 11022 ;; This function uses a non-reentrant model
 11023 ;;
 11024                           
 11025                           	psect	text33
 11026  00464C                     __ptext33:
 11027                           	opt stack 0
 11028  00464C                     _mac_cmp:
 11029                           	opt stack 22
 11030                           
 11031                           ;mac.c: 40: for (uint8_t i = 0; i < 6; i++) {
 11032                           
 11033                           ; BSR set to: 0
 11034                           ;incstack = 0
 11035  00464C  0E00               	movlw	0
 11036  00464E  0100               	movlb	0	; () banked
 11037  004650  6F66               	movwf	mac_cmp@i& (0+255),b
 11038  004652                     l8292:
 11039                           
 11040                           ; BSR set to: 0
 11041  004652  0E05               	movlw	5
 11042  004654  6566               	cpfsgt	mac_cmp@i& (0+255),b
 11043  004656  D001               	goto	l390
 11044  004658  D018               	goto	u9160
 11045  00465A                     l390:
 11046                           
 11047                           ; BSR set to: 0
 11048                           ;mac.c: 41: if (a->address[i] != b->address[i])
 11049                           
 11050                           ; BSR set to: 0
 11051  00465A  5166               	movf	mac_cmp@i& (0+255),w,b
 11052  00465C  0D01               	mullw	1
 11053  00465E  50F3               	movf	prodl,w,c
 11054  004660  2562               	addwf	mac_cmp@b& (0+255),w,b
 11055  004662  6ED9               	movwf	fsr2l,c
 11056  004664  50F4               	movf	prodh,w,c
 11057  004666  2163               	addwfc	(mac_cmp@b+1)& (0+255),w,b
 11058  004668  6EDA               	movwf	fsr2h,c
 11059  00466A  5166               	movf	mac_cmp@i& (0+255),w,b
 11060  00466C  0D01               	mullw	1
 11061  00466E  50F3               	movf	prodl,w,c
 11062  004670  2560               	addwf	mac_cmp@a& (0+255),w,b
 11063  004672  6EE1               	movwf	fsr1l,c
 11064  004674  50F4               	movf	prodh,w,c
 11065  004676  2161               	addwfc	(mac_cmp@a+1)& (0+255),w,b
 11066  004678  6EE2               	movwf	fsr1h,c
 11067  00467A  50DE               	movf	postinc2,w,c
 11068  00467C  18E6               	xorwf	postinc1,w,c
 11069  00467E  B4D8               	btfsc	status,2,c
 11070  004680  D002               	goto	l392
 11071                           
 11072                           ; BSR set to: 0
 11073                           ;mac.c: 42: return 0;
 11074  004682  90D8               	bcf	status,0,c
 11075                           
 11076                           ; BSR set to: 0
 11077  004684  0012               	return	
 11078  004686                     l392:
 11079                           
 11080                           ; BSR set to: 0
 11081                           
 11082                           ; BSR set to: 0
 11083  004686  2B66               	incf	mac_cmp@i& (0+255),f,b
 11084  004688  D7E4               	goto	l8292
 11085  00468A                     u9160:
 11086                           
 11087                           ; BSR set to: 0
 11088                           ;mac.c: 43: }
 11089                           ;mac.c: 44: return 1;
 11090                           
 11091                           ; BSR set to: 0
 11092  00468A  80D8               	bsf	status,0,c
 11093  00468C  0012               	return	
 11094  00468E                     __end_of_mac_cmp:
 11095                           	opt stack 0
 11096                           tblptru	equ	0xFF8
 11097                           tblptrh	equ	0xFF7
 11098                           tblptrl	equ	0xFF6
 11099                           tablat	equ	0xFF5
 11100                           prodh	equ	0xFF4
 11101                           prodl	equ	0xFF3
 11102                           intcon	equ	0xFF2
 11103                           intcon3	equ	0xFF0
 11104                           indf0	equ	0xFEF
 11105                           postinc0	equ	0xFEE
 11106                           plusw0	equ	0xFEB
 11107                           fsr0h	equ	0xFEA
 11108                           fsr0l	equ	0xFE9
 11109                           wreg	equ	0xFE8
 11110                           postinc1	equ	0xFE6
 11111                           postdec1	equ	0xFE5
 11112                           plusw1	equ	0xFE3
 11113                           fsr1h	equ	0xFE2
 11114                           fsr1l	equ	0xFE1
 11115                           indf2	equ	0xFDF
 11116                           postinc2	equ	0xFDE
 11117                           postdec2	equ	0xFDD
 11118                           plusw2	equ	0xFDB
 11119                           fsr2h	equ	0xFDA
 11120                           fsr2l	equ	0xFD9
 11121                           status	equ	0xFD8
 11122                           
 11123 ;; *************** function _ipv4_isAllZero *****************
 11124 ;; Defined at:
 11125 ;;		line 306 in file "src/stack/protocols/ipv4.c"
 11126 ;; Parameters:    Size  Location     Type
 11127 ;;  ip              2    0[BANK0 ] PTR struct ipv4_address
 11128 ;;		 -> arp_parseFromRXBuffer@arp(32), 
 11129 ;; Auto vars:     Size  Location     Type
 11130 ;;  i               1    2[BANK0 ] unsigned char 
 11131 ;; Return value:  Size  Location     Type
 11132 ;;		None               void
 11133 ;; Registers used:
 11134 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11135 ;; Tracked objects:
 11136 ;;		On entry : 0/0
 11137 ;;		On exit  : 0/0
 11138 ;;		Unchanged: 0/0
 11139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11140 ;;      Params:         0       2       0       0       0       0       0       0       0
 11141 ;;      Locals:         0       1       0       0       0       0       0       0       0
 11142 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11143 ;;      Totals:         0       3       0       0       0       0       0       0       0
 11144 ;;Total ram usage:        3 bytes
 11145 ;; Hardware stack levels used:    1
 11146 ;; Hardware stack levels required when called:    4
 11147 ;; This function calls:
 11148 ;;		Nothing
 11149 ;; This function is called by:
 11150 ;;		_arp_parseFromRXBuffer
 11151 ;; This function uses a non-reentrant model
 11152 ;;
 11153                           
 11154                           	psect	text34
 11155  0048C2                     __ptext34:
 11156                           	opt stack 0
 11157  0048C2                     _ipv4_isAllZero:
 11158                           	opt stack 22
 11159                           
 11160                           ;ipv4.c: 307: for (uint8_t i = 0; i < 4; i++) {
 11161                           
 11162                           ; BSR set to: 0
 11163                           ;incstack = 0
 11164  0048C2  0E00               	movlw	0
 11165  0048C4  0100               	movlb	0	; () banked
 11166  0048C6  6F62               	movwf	ipv4_isAllZero@i& (0+255),b
 11167  0048C8                     l8400:
 11168                           
 11169                           ; BSR set to: 0
 11170  0048C8  0E03               	movlw	3
 11171  0048CA  6562               	cpfsgt	ipv4_isAllZero@i& (0+255),b
 11172  0048CC  D001               	goto	l1107
 11173  0048CE  D00F               	goto	u9310
 11174  0048D0                     l1107:
 11175                           
 11176                           ; BSR set to: 0
 11177                           ;ipv4.c: 308: if (ip->address[i] != 0x00)
 11178                           
 11179                           ; BSR set to: 0
 11180  0048D0  5162               	movf	ipv4_isAllZero@i& (0+255),w,b
 11181  0048D2  0D01               	mullw	1
 11182  0048D4  50F3               	movf	prodl,w,c
 11183  0048D6  2560               	addwf	ipv4_isAllZero@ip& (0+255),w,b
 11184  0048D8  6ED9               	movwf	fsr2l,c
 11185  0048DA  50F4               	movf	prodh,w,c
 11186  0048DC  2161               	addwfc	(ipv4_isAllZero@ip+1)& (0+255),w,b
 11187  0048DE  6EDA               	movwf	fsr2h,c
 11188  0048E0  50DF               	movf	indf2,w,c
 11189  0048E2  B4D8               	btfsc	status,2,c
 11190  0048E4  D002               	goto	l1109
 11191                           
 11192                           ; BSR set to: 0
 11193                           ;ipv4.c: 309: return 0;
 11194  0048E6  90D8               	bcf	status,0,c
 11195                           
 11196                           ; BSR set to: 0
 11197  0048E8  0012               	return	
 11198  0048EA                     l1109:
 11199                           
 11200                           ; BSR set to: 0
 11201                           
 11202                           ; BSR set to: 0
 11203  0048EA  2B62               	incf	ipv4_isAllZero@i& (0+255),f,b
 11204  0048EC  D7ED               	goto	l8400
 11205  0048EE                     u9310:
 11206                           
 11207                           ; BSR set to: 0
 11208                           ;ipv4.c: 310: }
 11209                           ;ipv4.c: 311: return 1;
 11210                           
 11211                           ; BSR set to: 0
 11212  0048EE  80D8               	bsf	status,0,c
 11213  0048F0  0012               	return	
 11214  0048F2                     __end_of_ipv4_isAllZero:
 11215                           	opt stack 0
 11216                           tblptru	equ	0xFF8
 11217                           tblptrh	equ	0xFF7
 11218                           tblptrl	equ	0xFF6
 11219                           tablat	equ	0xFF5
 11220                           prodh	equ	0xFF4
 11221                           prodl	equ	0xFF3
 11222                           intcon	equ	0xFF2
 11223                           intcon3	equ	0xFF0
 11224                           indf0	equ	0xFEF
 11225                           postinc0	equ	0xFEE
 11226                           plusw0	equ	0xFEB
 11227                           fsr0h	equ	0xFEA
 11228                           fsr0l	equ	0xFE9
 11229                           wreg	equ	0xFE8
 11230                           postinc1	equ	0xFE6
 11231                           postdec1	equ	0xFE5
 11232                           plusw1	equ	0xFE3
 11233                           fsr1h	equ	0xFE2
 11234                           fsr1l	equ	0xFE1
 11235                           indf2	equ	0xFDF
 11236                           postinc2	equ	0xFDE
 11237                           postdec2	equ	0xFDD
 11238                           plusw2	equ	0xFDB
 11239                           fsr2h	equ	0xFDA
 11240                           fsr2l	equ	0xFD9
 11241                           status	equ	0xFD8
 11242                           
 11243 ;; *************** function _ethernetController_streamFromRXBuffer *****************
 11244 ;; Defined at:
 11245 ;;		line 350 in file "src/enc424j600/ENC424J600.c"
 11246 ;; Parameters:    Size  Location     Type
 11247 ;;  startEnd        1    wreg     unsigned char 
 11248 ;;  startAddress    2   15[BANK0 ] unsigned int 
 11249 ;; Auto vars:     Size  Location     Type
 11250 ;;  startEnd        1   17[BANK0 ] unsigned char 
 11251 ;;  temp            1   19[BANK0 ] unsigned char 
 11252 ;;  opcode          1   18[BANK0 ] unsigned char 
 11253 ;; Return value:  Size  Location     Type
 11254 ;;                  1    wreg      unsigned char 
 11255 ;; Registers used:
 11256 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11257 ;; Tracked objects:
 11258 ;;		On entry : 0/0
 11259 ;;		On exit  : 0/0
 11260 ;;		Unchanged: 0/0
 11261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11262 ;;      Params:         0       2       0       0       0       0       0       0       0
 11263 ;;      Locals:         0       3       0       0       0       0       0       0       0
 11264 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11265 ;;      Totals:         0       5       0       0       0       0       0       0       0
 11266 ;;Total ram usage:        5 bytes
 11267 ;; Hardware stack levels used:    1
 11268 ;; Hardware stack levels required when called:    7
 11269 ;; This function calls:
 11270 ;;		_enc424j600_readSPI
 11271 ;;		_enc424j600_setERXDATAReadPointer
 11272 ;;		_enc424j600_writeSPI
 11273 ;; This function is called by:
 11274 ;;		_arp_parseFromRXBuffer
 11275 ;;		_ipv4_parseHeader
 11276 ;; This function uses a non-reentrant model
 11277 ;;
 11278                           
 11279                           	psect	text35
 11280  0041E8                     __ptext35:
 11281                           	opt stack 0
 11282  0041E8                     _ethernetController_streamFromRXBuffer:
 11283                           	opt stack 19
 11284                           
 11285                           ; BSR set to: 0
 11286                           ;incstack = 0
 11287                           ;ethernetController_streamFromRXBuffer@startEnd stored from wreg
 11288  0041E8  0100               	movlb	0	; () banked
 11289  0041EA  6F71               	movwf	ethernetController_streamFromRXBuffer@startEnd& (0+255),b
 11290                           
 11291                           ;ENC424J600.c: 351: uint8_t temp;
 11292                           ;ENC424J600.c: 352: uint8_t opcode;
 11293                           ;ENC424J600.c: 353: switch (startEnd) {
 11294  0041EC  D01F               	goto	l179
 11295  0041EE                     
 11296                           ;ENC424J600.c: 355: enc424j600_setERXDATAReadPointer(startAddress);
 11297  0041EE  C06F  F06A         	movff	ethernetController_streamFromRXBuffer@startAddress,enc424j600_setERXDATAReadPoint
      +                          er@addr
 11298  0041F2  C070  F06B         	movff	ethernetController_streamFromRXBuffer@startAddress+1,enc424j600_setERXDATAReadPoi
      +                          nter@addr+1
 11299  0041F6  ECA4  F023         	call	_enc424j600_setERXDATAReadPointer	;wreg free
 11300                           
 11301                           ;ENC424J600.c: 356: opcode = 0x2C;
 11302  0041FA  0E2C               	movlw	44
 11303  0041FC  0100               	movlb	0	; () banked
 11304  0041FE  6F72               	movwf	ethernetController_streamFromRXBuffer@opcode& (0+255),b
 11305                           
 11306                           ; BSR set to: 0
 11307                           ;ENC424J600.c: 357: PORTBbits.RB4=0;
 11308  004200  9881               	bcf	3969,4,c	;volatile
 11309                           
 11310                           ; BSR set to: 0
 11311                           ;ENC424J600.c: 358: enc424j600_writeSPI(&opcode);
 11312  004202  0E72               	movlw	low ethernetController_streamFromRXBuffer@opcode
 11313  004204  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 11314  004206  0E00               	movlw	high ethernetController_streamFromRXBuffer@opcode
 11315  004208  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 11316  00420A  ECC2  F020         	call	_enc424j600_writeSPI	;wreg free
 11317                           
 11318                           ;ENC424J600.c: 359: return 0;
 11319  00420E  0E00               	movlw	0
 11320  004210  0012               	return	
 11321  004212                     
 11322                           ;ENC424J600.c: 361: enc424j600_readSPI(&temp);
 11323  004212  0E73               	movlw	low ethernetController_streamFromRXBuffer@temp
 11324  004214  0100               	movlb	0	; () banked
 11325  004216  6F60               	movwf	enc424j600_readSPI@data& (0+255),b
 11326  004218  0E00               	movlw	high ethernetController_streamFromRXBuffer@temp
 11327  00421A  6F61               	movwf	(enc424j600_readSPI@data+1)& (0+255),b
 11328  00421C  EC26  F020         	call	_enc424j600_readSPI	;wreg free
 11329                           
 11330                           ;ENC424J600.c: 362: return temp;
 11331  004220  0100               	movlb	0	; () banked
 11332  004222  5173               	movf	ethernetController_streamFromRXBuffer@temp& (0+255),w,b
 11333                           
 11334                           ; BSR set to: 0
 11335  004224  0012               	return	
 11336  004226                     l183:
 11337                           
 11338                           ; BSR set to: 0
 11339                           ;ENC424J600.c: 364: PORTBbits.RB4=1;
 11340  004226  8881               	bsf	3969,4,c	;volatile
 11341                           
 11342                           ; BSR set to: 0
 11343                           ;ENC424J600.c: 374: return 0;
 11344  004228  0E00               	movlw	0
 11345                           
 11346                           ; BSR set to: 0
 11347  00422A  0012               	return	
 11348  00422C                     l179:
 11349                           
 11350                           ; BSR set to: 0
 11351  00422C  0100               	movlb	0	; () banked
 11352  00422E  5171               	movf	ethernetController_streamFromRXBuffer@startEnd& (0+255),w,b
 11353                           
 11354                           ; Switch size 1, requested type "space"
 11355                           ; Number of cases is 3, Range of values is 0 to 2
 11356                           ; switch strategies available:
 11357                           ; Name         Instructions Cycles
 11358                           ; simple_byte           10     6 (average)
 11359                           ;	Chosen strategy is simple_byte
 11360  004230  0A00               	xorlw	0	; case 0
 11361  004232  B4D8               	btfsc	status,2,c
 11362  004234  D7DC               	goto	l180
 11363  004236  0A01               	xorlw	1	; case 1
 11364  004238  B4D8               	btfsc	status,2,c
 11365  00423A  D7EB               	goto	l182
 11366  00423C  0A03               	xorlw	3	; case 2
 11367  00423E  B4D8               	btfsc	status,2,c
 11368  004240  D7F2               	goto	l183
 11369                           
 11370                           ; BSR set to: 0
 11371                           ;ENC424J600.c: 376: return 0;
 11372                           
 11373                           ; BSR set to: 0
 11374  004242  0E00               	movlw	0
 11375  004244  0012               	return	
 11376  004246                     __end_of_ethernetController_streamFromRXBuffer:
 11377                           	opt stack 0
 11378                           tblptru	equ	0xFF8
 11379                           tblptrh	equ	0xFF7
 11380                           tblptrl	equ	0xFF6
 11381                           tablat	equ	0xFF5
 11382                           prodh	equ	0xFF4
 11383                           prodl	equ	0xFF3
 11384                           intcon	equ	0xFF2
 11385                           intcon3	equ	0xFF0
 11386                           indf0	equ	0xFEF
 11387                           postinc0	equ	0xFEE
 11388                           plusw0	equ	0xFEB
 11389                           fsr0h	equ	0xFEA
 11390                           fsr0l	equ	0xFE9
 11391                           wreg	equ	0xFE8
 11392                           postinc1	equ	0xFE6
 11393                           postdec1	equ	0xFE5
 11394                           plusw1	equ	0xFE3
 11395                           fsr1h	equ	0xFE2
 11396                           fsr1l	equ	0xFE1
 11397                           indf2	equ	0xFDF
 11398                           postinc2	equ	0xFDE
 11399                           postdec2	equ	0xFDD
 11400                           plusw2	equ	0xFDB
 11401                           fsr2h	equ	0xFDA
 11402                           fsr2l	equ	0xFD9
 11403                           status	equ	0xFD8
 11404                           
 11405 ;; *************** function _UARTTransmitInt *****************
 11406 ;; Defined at:
 11407 ;;		line 43 in file "src/system/uart.c"
 11408 ;; Parameters:    Size  Location     Type
 11409 ;;  val             4   58[BANK0 ] unsigned long 
 11410 ;; Auto vars:     Size  Location     Type
 11411 ;;		None
 11412 ;; Return value:  Size  Location     Type
 11413 ;;                  1    wreg      void 
 11414 ;; Registers used:
 11415 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11416 ;; Tracked objects:
 11417 ;;		On entry : 0/0
 11418 ;;		On exit  : 0/0
 11419 ;;		Unchanged: 0/0
 11420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11421 ;;      Params:         0       4       0       0       0       0       0       0       0
 11422 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11423 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11424 ;;      Totals:         0       4       0       0       0       0       0       0       0
 11425 ;;Total ram usage:        4 bytes
 11426 ;; Hardware stack levels used:    1
 11427 ;; Hardware stack levels required when called:    8
 11428 ;; This function calls:
 11429 ;;		_UARTTransmitText
 11430 ;;		_intToString
 11431 ;; This function is called by:
 11432 ;;		_ethernet_rxGetNewFrame
 11433 ;; This function uses a non-reentrant model
 11434 ;;
 11435                           
 11436                           	psect	text36
 11437  004AF6                     __ptext36:
 11438                           	opt stack 0
 11439  004AF6                     _UARTTransmitInt:
 11440                           	opt stack 20
 11441                           
 11442                           ;uart.c: 44: UARTTransmitText(intToString(val));
 11443                           
 11444                           ;incstack = 0
 11445  004AF6  C09A  F084         	movff	UARTTransmitInt@val,intToString@val
 11446  004AFA  C09B  F085         	movff	UARTTransmitInt@val+1,intToString@val+1
 11447  004AFE  C09C  F086         	movff	UARTTransmitInt@val+2,intToString@val+2
 11448  004B02  C09D  F087         	movff	UARTTransmitInt@val+3,intToString@val+3
 11449  004B06  EC30  F024         	call	_intToString	;wreg free
 11450  004B0A  C084  F098         	movff	?_intToString,UARTTransmitText@str
 11451  004B0E  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
 11452  004B12  EC7A  F021         	call	_UARTTransmitText	;wreg free
 11453  004B16  0012               	return		;funcret
 11454  004B18                     __end_of_UARTTransmitInt:
 11455                           	opt stack 0
 11456                           tblptru	equ	0xFF8
 11457                           tblptrh	equ	0xFF7
 11458                           tblptrl	equ	0xFF6
 11459                           tablat	equ	0xFF5
 11460                           prodh	equ	0xFF4
 11461                           prodl	equ	0xFF3
 11462                           intcon	equ	0xFF2
 11463                           intcon3	equ	0xFF0
 11464                           indf0	equ	0xFEF
 11465                           postinc0	equ	0xFEE
 11466                           plusw0	equ	0xFEB
 11467                           fsr0h	equ	0xFEA
 11468                           fsr0l	equ	0xFE9
 11469                           wreg	equ	0xFE8
 11470                           postinc1	equ	0xFE6
 11471                           postdec1	equ	0xFE5
 11472                           plusw1	equ	0xFE3
 11473                           fsr1h	equ	0xFE2
 11474                           fsr1l	equ	0xFE1
 11475                           indf2	equ	0xFDF
 11476                           postinc2	equ	0xFDE
 11477                           postdec2	equ	0xFDD
 11478                           plusw2	equ	0xFDB
 11479                           fsr2h	equ	0xFDA
 11480                           fsr2l	equ	0xFD9
 11481                           status	equ	0xFD8
 11482                           
 11483 ;; *************** function _ethernetController_updateLinkStatus *****************
 11484 ;; Defined at:
 11485 ;;		line 394 in file "src/enc424j600/ENC424J600.c"
 11486 ;; Parameters:    Size  Location     Type
 11487 ;;  state           2   32[BANK0 ] PTR struct ethernetConne
 11488 ;;		 -> stack(121), 
 11489 ;; Auto vars:     Size  Location     Type
 11490 ;;  temp16          2   35[BANK0 ] unsigned int 
 11491 ;;  temp            1   34[BANK0 ] unsigned char 
 11492 ;; Return value:  Size  Location     Type
 11493 ;;                  1    wreg      void 
 11494 ;; Registers used:
 11495 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11496 ;; Tracked objects:
 11497 ;;		On entry : 0/0
 11498 ;;		On exit  : 0/0
 11499 ;;		Unchanged: 0/0
 11500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11501 ;;      Params:         0       2       0       0       0       0       0       0       0
 11502 ;;      Locals:         0       3       0       0       0       0       0       0       0
 11503 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11504 ;;      Totals:         0       5       0       0       0       0       0       0       0
 11505 ;;Total ram usage:        5 bytes
 11506 ;; Hardware stack levels used:    1
 11507 ;; Hardware stack levels required when called:    8
 11508 ;; This function calls:
 11509 ;;		_enc424j600_readControlRegisterUnbanked
 11510 ;;		_enc424j600_readPHYRegister
 11511 ;; This function is called by:
 11512 ;;		_handleStackBackgroundTasks
 11513 ;; This function uses a non-reentrant model
 11514 ;;
 11515                           
 11516                           	psect	text37
 11517  003A0A                     __ptext37:
 11518                           	opt stack 0
 11519  003A0A                     _ethernetController_updateLinkStatus:
 11520                           	opt stack 21
 11521                           
 11522                           ;ENC424J600.c: 395: uint8_t temp;
 11523                           ;ENC424J600.c: 396: uint16_t temp16;
 11524                           ;ENC424J600.c: 397: enc424j600_readControlRegisterUnbanked(0x1B, &temp);
 11525                           
 11526                           ;incstack = 0
 11527  003A0A  0E82               	movlw	low ethernetController_updateLinkStatus@temp
 11528  003A0C  0100               	movlb	0	; () banked
 11529  003A0E  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 11530  003A10  0E00               	movlw	high ethernetController_updateLinkStatus@temp
 11531  003A12  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 11532  003A14  0E1B               	movlw	27
 11533  003A16  EC15  F024         	call	_enc424j600_readControlRegisterUnbanked
 11534                           
 11535                           ;ENC424J600.c: 398: if (temp & 0x01) {
 11536  003A1A  0100               	movlb	0	; () banked
 11537  003A1C  A182               	btfss	ethernetController_updateLinkStatus@temp& (0+255),0,b
 11538  003A1E  D006               	goto	l195
 11539                           
 11540                           ; BSR set to: 0
 11541                           ;ENC424J600.c: 399: state->link = LINK_ESTABLISHED;
 11542  003A20  C080  FFD9         	movff	ethernetController_updateLinkStatus@state,fsr2l
 11543  003A24  C081  FFDA         	movff	ethernetController_updateLinkStatus@state+1,fsr2h
 11544  003A28  0E01               	movlw	1
 11545  003A2A  D005               	goto	L3
 11546  003A2C                     l195:
 11547                           
 11548                           ; BSR set to: 0
 11549                           ;ENC424J600.c: 401: state->link = NO_LINK;
 11550                           
 11551                           ; BSR set to: 0
 11552  003A2C  C080  FFD9         	movff	ethernetController_updateLinkStatus@state,fsr2l
 11553  003A30  C081  FFDA         	movff	ethernetController_updateLinkStatus@state+1,fsr2h
 11554  003A34  0E00               	movlw	0
 11555  003A36                     L3:
 11556  003A36  6EDF               	movwf	indf2,c
 11557                           
 11558                           ; BSR set to: 0
 11559                           ;ENC424J600.c: 402: }
 11560                           ;ENC424J600.c: 404: enc424j600_readPHYRegister(0x1F, &temp16);
 11561                           
 11562                           ; BSR set to: 0
 11563  003A38  0E83               	movlw	low ethernetController_updateLinkStatus@temp16
 11564  003A3A  6F6E               	movwf	enc424j600_readPHYRegister@data& (0+255),b
 11565  003A3C  0E00               	movlw	high ethernetController_updateLinkStatus@temp16
 11566  003A3E  6F6F               	movwf	(enc424j600_readPHYRegister@data+1)& (0+255),b
 11567  003A40  0E1F               	movlw	31
 11568  003A42  EC74  F015         	call	_enc424j600_readPHYRegister
 11569                           
 11570                           ;ENC424J600.c: 406: if (temp16 & (1 << 3)) {
 11571  003A46  0100               	movlb	0	; () banked
 11572  003A48  A783               	btfss	ethernetController_updateLinkStatus@temp16& (0+255),3,b
 11573  003A4A  D008               	goto	l197
 11574                           
 11575                           ; BSR set to: 0
 11576                           ;ENC424J600.c: 407: state->speed = HUNDRED_MBIT;
 11577  003A4C  EE20 F001          	lfsr	2,1
 11578  003A50  5180               	movf	ethernetController_updateLinkStatus@state& (0+255),w,b
 11579  003A52  26D9               	addwf	fsr2l,f,c
 11580  003A54  5181               	movf	(ethernetController_updateLinkStatus@state+1)& (0+255),w,b
 11581  003A56  22DA               	addwfc	fsr2h,f,c
 11582  003A58  0E01               	movlw	1
 11583  003A5A  D007               	goto	L4
 11584  003A5C                     l197:
 11585                           
 11586                           ; BSR set to: 0
 11587                           ;ENC424J600.c: 409: state->speed = TEN_MBIT;
 11588                           
 11589                           ; BSR set to: 0
 11590  003A5C  EE20 F001          	lfsr	2,1
 11591  003A60  5180               	movf	ethernetController_updateLinkStatus@state& (0+255),w,b
 11592  003A62  26D9               	addwf	fsr2l,f,c
 11593  003A64  5181               	movf	(ethernetController_updateLinkStatus@state+1)& (0+255),w,b
 11594  003A66  22DA               	addwfc	fsr2h,f,c
 11595  003A68  0E00               	movlw	0
 11596  003A6A                     L4:
 11597  003A6A  6EDF               	movwf	indf2,c
 11598                           
 11599                           ; BSR set to: 0
 11600                           ;ENC424J600.c: 410: }
 11601                           ;ENC424J600.c: 412: if (temp16 & (1 << 4)) {
 11602                           
 11603                           ; BSR set to: 0
 11604  003A6C  A983               	btfss	ethernetController_updateLinkStatus@temp16& (0+255),4,b
 11605  003A6E  D009               	goto	l199
 11606                           
 11607                           ; BSR set to: 0
 11608                           ;ENC424J600.c: 413: state->duplex = FULL_DUPLEX;
 11609  003A70  EE20 F002          	lfsr	2,2
 11610  003A74  5180               	movf	ethernetController_updateLinkStatus@state& (0+255),w,b
 11611  003A76  26D9               	addwf	fsr2l,f,c
 11612  003A78  5181               	movf	(ethernetController_updateLinkStatus@state+1)& (0+255),w,b
 11613  003A7A  22DA               	addwfc	fsr2h,f,c
 11614  003A7C  0E01               	movlw	1
 11615  003A7E  6EDF               	movwf	indf2,c
 11616                           
 11617                           ;ENC424J600.c: 414: } else {
 11618  003A80  0012               	return	
 11619  003A82                     l199:
 11620                           
 11621                           ; BSR set to: 0
 11622                           ;ENC424J600.c: 415: state->duplex = HALF_DUPLEX;
 11623                           
 11624                           ; BSR set to: 0
 11625  003A82  EE20 F002          	lfsr	2,2
 11626  003A86  5180               	movf	ethernetController_updateLinkStatus@state& (0+255),w,b
 11627  003A88  26D9               	addwf	fsr2l,f,c
 11628  003A8A  5181               	movf	(ethernetController_updateLinkStatus@state+1)& (0+255),w,b
 11629  003A8C  22DA               	addwfc	fsr2h,f,c
 11630  003A8E  0E00               	movlw	0
 11631  003A90  6EDF               	movwf	indf2,c
 11632  003A92  0012               	return	
 11633  003A94                     __end_of_ethernetController_updateLinkStatus:
 11634                           	opt stack 0
 11635                           tblptru	equ	0xFF8
 11636                           tblptrh	equ	0xFF7
 11637                           tblptrl	equ	0xFF6
 11638                           tablat	equ	0xFF5
 11639                           prodh	equ	0xFF4
 11640                           prodl	equ	0xFF3
 11641                           intcon	equ	0xFF2
 11642                           intcon3	equ	0xFF0
 11643                           indf0	equ	0xFEF
 11644                           postinc0	equ	0xFEE
 11645                           plusw0	equ	0xFEB
 11646                           fsr0h	equ	0xFEA
 11647                           fsr0l	equ	0xFE9
 11648                           wreg	equ	0xFE8
 11649                           postinc1	equ	0xFE6
 11650                           postdec1	equ	0xFE5
 11651                           plusw1	equ	0xFE3
 11652                           fsr1h	equ	0xFE2
 11653                           fsr1l	equ	0xFE1
 11654                           indf2	equ	0xFDF
 11655                           postinc2	equ	0xFDE
 11656                           postdec2	equ	0xFDD
 11657                           plusw2	equ	0xFDB
 11658                           fsr2h	equ	0xFDA
 11659                           fsr2l	equ	0xFD9
 11660                           status	equ	0xFD8
 11661                           
 11662 ;; *************** function _enc424j600_readPHYRegister *****************
 11663 ;; Defined at:
 11664 ;;		line 538 in file "src/enc424j600/ENC424J600.c"
 11665 ;; Parameters:    Size  Location     Type
 11666 ;;  addr            1    wreg     unsigned char 
 11667 ;;  data            2   14[BANK0 ] PTR unsigned int 
 11668 ;;		 -> ethernetController_updateLinkStatus@temp16(2), 
 11669 ;; Auto vars:     Size  Location     Type
 11670 ;;  addr            1   22[BANK0 ] unsigned char 
 11671 ;;  timeoutCount    4   25[BANK0 ] unsigned long 
 11672 ;;  temp            1   31[BANK0 ] unsigned char 
 11673 ;;  highByte        1   30[BANK0 ] unsigned char 
 11674 ;;  lowByte         1   29[BANK0 ] unsigned char 
 11675 ;;  unusedBits      1   24[BANK0 ] unsigned char 
 11676 ;;  PHYaddress      1   23[BANK0 ] unsigned char 
 11677 ;; Return value:  Size  Location     Type
 11678 ;;                  1    wreg      void 
 11679 ;; Registers used:
 11680 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11681 ;; Tracked objects:
 11682 ;;		On entry : 0/0
 11683 ;;		On exit  : 0/0
 11684 ;;		Unchanged: 0/0
 11685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11686 ;;      Params:         0       2       0       0       0       0       0       0       0
 11687 ;;      Locals:         0      10       0       0       0       0       0       0       0
 11688 ;;      Temps:          0       6       0       0       0       0       0       0       0
 11689 ;;      Totals:         0      18       0       0       0       0       0       0       0
 11690 ;;Total ram usage:       18 bytes
 11691 ;; Hardware stack levels used:    1
 11692 ;; Hardware stack levels required when called:    7
 11693 ;; This function calls:
 11694 ;;		_enc424j600_readControlRegisterUnbanked
 11695 ;;		_enc424j600_writeControlRegisterUnbanked
 11696 ;; This function is called by:
 11697 ;;		_ethernetController_updateLinkStatus
 11698 ;; This function uses a non-reentrant model
 11699 ;;
 11700                           
 11701                           	psect	text38
 11702  002AE8                     __ptext38:
 11703                           	opt stack 0
 11704  002AE8                     _enc424j600_readPHYRegister:
 11705                           	opt stack 21
 11706                           
 11707                           ; BSR set to: 0
 11708                           ;incstack = 0
 11709                           ;enc424j600_readPHYRegister@addr stored from wreg
 11710  002AE8  0100               	movlb	0	; () banked
 11711  002AEA  6F76               	movwf	enc424j600_readPHYRegister@addr& (0+255),b
 11712                           
 11713                           ;ENC424J600.c: 540: uint8_t PHYaddress = addr & 0x1F;
 11714  002AEC  0100               	movlb	0	; () banked
 11715  002AEE  5176               	movf	enc424j600_readPHYRegister@addr& (0+255),w,b
 11716  002AF0  0B1F               	andlw	31
 11717  002AF2  6F77               	movwf	enc424j600_readPHYRegister@PHYaddress& (0+255),b
 11718                           
 11719                           ; BSR set to: 0
 11720                           ;ENC424J600.c: 541: uint8_t unusedBits = 0x01;
 11721  002AF4  0E01               	movlw	1
 11722  002AF6  6F78               	movwf	enc424j600_readPHYRegister@unusedBits& (0+255),b
 11723                           
 11724                           ; BSR set to: 0
 11725                           ;ENC424J600.c: 542: uint8_t temp;
 11726                           ;ENC424J600.c: 543: uint8_t lowByte;
 11727                           ;ENC424J600.c: 544: uint8_t highByte;
 11728                           ;ENC424J600.c: 545: uint32_t timeoutCounter = 0;
 11729  002AF8  0E00               	movlw	0
 11730  002AFA  6F79               	movwf	enc424j600_readPHYRegister@timeoutCounter& (0+255),b
 11731  002AFC  0E00               	movlw	0
 11732  002AFE  6F7A               	movwf	(enc424j600_readPHYRegister@timeoutCounter+1)& (0+255),b
 11733  002B00  0E00               	movlw	0
 11734  002B02  6F7B               	movwf	(enc424j600_readPHYRegister@timeoutCounter+2)& (0+255),b
 11735  002B04  0E00               	movlw	0
 11736  002B06  6F7C               	movwf	(enc424j600_readPHYRegister@timeoutCounter+3)& (0+255),b
 11737                           
 11738                           ; BSR set to: 0
 11739                           ;ENC424J600.c: 547: enc424j600_writeControlRegisterUnbanked(0x14 + 0x40, &PHYaddress);
 11740  002B08  0E77               	movlw	low enc424j600_readPHYRegister@PHYaddress
 11741  002B0A  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 11742  002B0C  0E00               	movlw	high enc424j600_readPHYRegister@PHYaddress
 11743  002B0E  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 11744  002B10  0E54               	movlw	84
 11745  002B12  ECFA  F023         	call	_enc424j600_writeControlRegisterUnbanked
 11746                           
 11747                           ;ENC424J600.c: 548: enc424j600_writeControlRegisterUnbanked(0x15 + 0x40, &unusedBits);
 11748  002B16  0E78               	movlw	low enc424j600_readPHYRegister@unusedBits
 11749  002B18  0100               	movlb	0	; () banked
 11750  002B1A  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 11751  002B1C  0E00               	movlw	high enc424j600_readPHYRegister@unusedBits
 11752  002B1E  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 11753  002B20  0E55               	movlw	85
 11754  002B22  ECFA  F023         	call	_enc424j600_writeControlRegisterUnbanked
 11755                           
 11756                           ;ENC424J600.c: 551: enc424j600_readControlRegisterUnbanked(0x12 + 0x40, &temp);
 11757  002B26  0E7F               	movlw	low enc424j600_readPHYRegister@temp
 11758  002B28  0100               	movlb	0	; () banked
 11759  002B2A  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 11760  002B2C  0E00               	movlw	high enc424j600_readPHYRegister@temp
 11761  002B2E  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 11762  002B30  0E52               	movlw	82
 11763  002B32  EC15  F024         	call	_enc424j600_readControlRegisterUnbanked
 11764                           
 11765                           ;ENC424J600.c: 552: temp |= 0x01;
 11766  002B36  0100               	movlb	0	; () banked
 11767  002B38  817F               	bsf	enc424j600_readPHYRegister@temp& (0+255),0,b
 11768                           
 11769                           ; BSR set to: 0
 11770                           ;ENC424J600.c: 553: enc424j600_writeControlRegisterUnbanked(0x12 + 0x40, &temp);
 11771  002B3A  0E7F               	movlw	low enc424j600_readPHYRegister@temp
 11772  002B3C  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 11773  002B3E  0E00               	movlw	high enc424j600_readPHYRegister@temp
 11774  002B40  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 11775  002B42  0E52               	movlw	82
 11776  002B44  ECFA  F023         	call	_enc424j600_writeControlRegisterUnbanked
 11777                           
 11778                           ;ENC424J600.c: 555: _delay((unsigned long)((26)*(32000000UL/4000000.0)));
 11779  002B48  0E45               	movlw	69
 11780  002B4A                     u11577:
 11781  002B4A  2EE8               	decfsz	wreg,f,c
 11782  002B4C  D7FE               	bra	u11577
 11783  002B4E  F000               	nop	
 11784  002B50                     
 11785                           ;ENC424J600.c: 558: enc424j600_readControlRegisterUnbanked(0x0A + 0x60, &temp);
 11786  002B50  0E7F               	movlw	low enc424j600_readPHYRegister@temp
 11787  002B52  0100               	movlb	0	; () banked
 11788  002B54  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 11789  002B56  0E00               	movlw	high enc424j600_readPHYRegister@temp
 11790  002B58  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 11791  002B5A  0E6A               	movlw	106
 11792  002B5C  EC15  F024         	call	_enc424j600_readControlRegisterUnbanked
 11793                           
 11794                           ;ENC424J600.c: 559: timeoutCounter++;
 11795  002B60  0E01               	movlw	1
 11796  002B62  0100               	movlb	0	; () banked
 11797  002B64  2779               	addwf	enc424j600_readPHYRegister@timeoutCounter& (0+255),f,b
 11798  002B66  0E00               	movlw	0
 11799  002B68  237A               	addwfc	(enc424j600_readPHYRegister@timeoutCounter+1)& (0+255),f,b
 11800  002B6A  237B               	addwfc	(enc424j600_readPHYRegister@timeoutCounter+2)& (0+255),f,b
 11801  002B6C  237C               	addwfc	(enc424j600_readPHYRegister@timeoutCounter+3)& (0+255),f,b
 11802                           
 11803                           ; BSR set to: 0
 11804                           ;ENC424J600.c: 560: } while ((temp & 0x01) && (timeoutCounter < 0xfff));
 11805  002B6E  A17F               	btfss	enc424j600_readPHYRegister@temp& (0+255),0,b
 11806  002B70  D008               	goto	u10520
 11807                           
 11808                           ; BSR set to: 0
 11809  002B72  517C               	movf	(enc424j600_readPHYRegister@timeoutCounter+3)& (0+255),w,b
 11810  002B74  117B               	iorwf	(enc424j600_readPHYRegister@timeoutCounter+2)& (0+255),w,b
 11811  002B76  E105               	bnz	l9000
 11812  002B78  2979               	incf	enc424j600_readPHYRegister@timeoutCounter& (0+255),w,b
 11813  002B7A  0E0F               	movlw	15
 11814  002B7C  597A               	subwfb	(enc424j600_readPHYRegister@timeoutCounter+1)& (0+255),w,b
 11815  002B7E  A0D8               	btfss	status,0,c
 11816  002B80  D7E7               	goto	l258
 11817  002B82                     u10520:
 11818  002B82                     l9000:
 11819                           
 11820                           ; BSR set to: 0
 11821                           ;ENC424J600.c: 561: if (timeoutCounter >= 0xfff)
 11822  002B82  517C               	movf	(enc424j600_readPHYRegister@timeoutCounter+3)& (0+255),w,b
 11823  002B84  117B               	iorwf	(enc424j600_readPHYRegister@timeoutCounter+2)& (0+255),w,b
 11824  002B86  E140               	bnz	l263
 11825  002B88  2979               	incf	enc424j600_readPHYRegister@timeoutCounter& (0+255),w,b
 11826  002B8A  0E0F               	movlw	15
 11827  002B8C  597A               	subwfb	(enc424j600_readPHYRegister@timeoutCounter+1)& (0+255),w,b
 11828  002B8E  B0D8               	btfsc	status,0,c
 11829  002B90  0012               	return	
 11830                           
 11831                           ; BSR set to: 0
 11832                           ;ENC424J600.c: 565: enc424j600_readControlRegisterUnbanked(0x12 + 0x40, &temp);
 11833                           
 11834                           ; BSR set to: 0
 11835                           
 11836                           ; BSR set to: 0
 11837                           ;ENC424J600.c: 562: return;
 11838  002B92  0E7F               	movlw	low enc424j600_readPHYRegister@temp
 11839  002B94  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 11840  002B96  0E00               	movlw	high enc424j600_readPHYRegister@temp
 11841  002B98  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 11842  002B9A  0E52               	movlw	82
 11843  002B9C  EC15  F024         	call	_enc424j600_readControlRegisterUnbanked
 11844                           
 11845                           ;ENC424J600.c: 566: temp &= ~0x01;
 11846  002BA0  0100               	movlb	0	; () banked
 11847  002BA2  917F               	bcf	enc424j600_readPHYRegister@temp& (0+255),0,b
 11848                           
 11849                           ; BSR set to: 0
 11850                           ;ENC424J600.c: 567: enc424j600_writeControlRegisterUnbanked(0x12 + 0x40, &temp);
 11851  002BA4  0E7F               	movlw	low enc424j600_readPHYRegister@temp
 11852  002BA6  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 11853  002BA8  0E00               	movlw	high enc424j600_readPHYRegister@temp
 11854  002BAA  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 11855  002BAC  0E52               	movlw	82
 11856  002BAE  ECFA  F023         	call	_enc424j600_writeControlRegisterUnbanked
 11857                           
 11858                           ;ENC424J600.c: 570: enc424j600_readControlRegisterUnbanked(0x08 + 0x60, &lowByte);
 11859  002BB2  0E7D               	movlw	low enc424j600_readPHYRegister@lowByte
 11860  002BB4  0100               	movlb	0	; () banked
 11861  002BB6  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 11862  002BB8  0E00               	movlw	high enc424j600_readPHYRegister@lowByte
 11863  002BBA  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 11864  002BBC  0E68               	movlw	104
 11865  002BBE  EC15  F024         	call	_enc424j600_readControlRegisterUnbanked
 11866                           
 11867                           ;ENC424J600.c: 571: enc424j600_readControlRegisterUnbanked(0x09 + 0x60, &highByte);
 11868  002BC2  0E7E               	movlw	low enc424j600_readPHYRegister@highByte
 11869  002BC4  0100               	movlb	0	; () banked
 11870  002BC6  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 11871  002BC8  0E00               	movlw	high enc424j600_readPHYRegister@highByte
 11872  002BCA  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 11873  002BCC  0E69               	movlw	105
 11874  002BCE  EC15  F024         	call	_enc424j600_readControlRegisterUnbanked
 11875                           
 11876                           ;ENC424J600.c: 572: *data = (lowByte | ((highByte << 8)&0xff00));
 11877  002BD2  0E00               	movlw	0
 11878  002BD4  0100               	movlb	0	; () banked
 11879  002BD6  6F70               	movwf	??_enc424j600_readPHYRegister& (0+255),b
 11880  002BD8  0EFF               	movlw	255
 11881  002BDA  6F71               	movwf	(??_enc424j600_readPHYRegister+1)& (0+255),b
 11882  002BDC  517E               	movf	enc424j600_readPHYRegister@highByte& (0+255),w,b
 11883  002BDE  6F73               	movwf	(??_enc424j600_readPHYRegister+3)& (0+255),b
 11884  002BE0  6B72               	clrf	(??_enc424j600_readPHYRegister+2)& (0+255),b
 11885  002BE2  5170               	movf	??_enc424j600_readPHYRegister& (0+255),w,b
 11886  002BE4  1772               	andwf	(??_enc424j600_readPHYRegister+2)& (0+255),f,b
 11887  002BE6  5171               	movf	(??_enc424j600_readPHYRegister+1)& (0+255),w,b
 11888  002BE8  1773               	andwf	(??_enc424j600_readPHYRegister+3)& (0+255),f,b
 11889  002BEA  517D               	movf	enc424j600_readPHYRegister@lowByte& (0+255),w,b
 11890  002BEC  6F74               	movwf	(??_enc424j600_readPHYRegister+4)& (0+255),b
 11891  002BEE  6B75               	clrf	(??_enc424j600_readPHYRegister+5)& (0+255),b
 11892  002BF0  5172               	movf	(??_enc424j600_readPHYRegister+2)& (0+255),w,b
 11893  002BF2  1374               	iorwf	(??_enc424j600_readPHYRegister+4)& (0+255),f,b
 11894  002BF4  5173               	movf	(??_enc424j600_readPHYRegister+3)& (0+255),w,b
 11895  002BF6  1375               	iorwf	(??_enc424j600_readPHYRegister+5)& (0+255),f,b
 11896  002BF8  C06E  FFD9         	movff	enc424j600_readPHYRegister@data,fsr2l
 11897  002BFC  C06F  FFDA         	movff	enc424j600_readPHYRegister@data+1,fsr2h
 11898  002C00  C074  FFDE         	movff	??_enc424j600_readPHYRegister+4,postinc2
 11899  002C04  C075  FFDD         	movff	??_enc424j600_readPHYRegister+5,postdec2
 11900  002C08                     l263:
 11901                           
 11902                           ; BSR set to: 0
 11903  002C08  0012               	return		;funcret
 11904  002C0A                     __end_of_enc424j600_readPHYRegister:
 11905                           	opt stack 0
 11906                           tblptru	equ	0xFF8
 11907                           tblptrh	equ	0xFF7
 11908                           tblptrl	equ	0xFF6
 11909                           tablat	equ	0xFF5
 11910                           prodh	equ	0xFF4
 11911                           prodl	equ	0xFF3
 11912                           intcon	equ	0xFF2
 11913                           intcon3	equ	0xFF0
 11914                           indf0	equ	0xFEF
 11915                           postinc0	equ	0xFEE
 11916                           plusw0	equ	0xFEB
 11917                           fsr0h	equ	0xFEA
 11918                           fsr0l	equ	0xFE9
 11919                           wreg	equ	0xFE8
 11920                           postinc1	equ	0xFE6
 11921                           postdec1	equ	0xFE5
 11922                           plusw1	equ	0xFE3
 11923                           fsr1h	equ	0xFE2
 11924                           fsr1l	equ	0xFE1
 11925                           indf2	equ	0xFDF
 11926                           postinc2	equ	0xFDE
 11927                           postdec2	equ	0xFDD
 11928                           plusw2	equ	0xFDB
 11929                           fsr2h	equ	0xFDA
 11930                           fsr2l	equ	0xFD9
 11931                           status	equ	0xFD8
 11932                           
 11933 ;; *************** function _ethernetController_setLEDConfig *****************
 11934 ;; Defined at:
 11935 ;;		line 419 in file "src/enc424j600/ENC424J600.c"
 11936 ;; Parameters:    Size  Location     Type
 11937 ;;  LED             1    wreg     enum E5569
 11938 ;;  conf            1   14[BANK0 ] enum E5573
 11939 ;; Auto vars:     Size  Location     Type
 11940 ;;  LED             1   15[BANK0 ] enum E5569
 11941 ;;  data            1   16[BANK0 ] unsigned char 
 11942 ;; Return value:  Size  Location     Type
 11943 ;;                  1    wreg      void 
 11944 ;; Registers used:
 11945 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11946 ;; Tracked objects:
 11947 ;;		On entry : 0/0
 11948 ;;		On exit  : 0/0
 11949 ;;		Unchanged: 0/0
 11950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11951 ;;      Params:         0       1       0       0       0       0       0       0       0
 11952 ;;      Locals:         0       2       0       0       0       0       0       0       0
 11953 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11954 ;;      Totals:         0       3       0       0       0       0       0       0       0
 11955 ;;Total ram usage:        3 bytes
 11956 ;; Hardware stack levels used:    1
 11957 ;; Hardware stack levels required when called:    7
 11958 ;; This function calls:
 11959 ;;		_enc424j600_readControlRegisterUnbanked
 11960 ;;		_enc424j600_writeControlRegisterUnbanked
 11961 ;; This function is called by:
 11962 ;;		_handleStackBackgroundTasks
 11963 ;;		_main
 11964 ;; This function uses a non-reentrant model
 11965 ;;
 11966                           
 11967                           	psect	text39
 11968  00397C                     __ptext39:
 11969                           	opt stack 0
 11970  00397C                     _ethernetController_setLEDConfig:
 11971                           	opt stack 22
 11972                           
 11973                           ; BSR set to: 0
 11974                           ;incstack = 0
 11975                           ;ethernetController_setLEDConfig@LED stored from wreg
 11976  00397C  0100               	movlb	0	; () banked
 11977  00397E  6F6F               	movwf	ethernetController_setLEDConfig@LED& (0+255),b
 11978                           
 11979                           ;ENC424J600.c: 420: uint8_t data;
 11980                           ;ENC424J600.c: 421: enc424j600_readControlRegisterUnbanked(0x15 + 0x60, &data);
 11981  003980  0E70               	movlw	low ethernetController_setLEDConfig@data
 11982  003982  0100               	movlb	0	; () banked
 11983  003984  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 11984  003986  0E00               	movlw	high ethernetController_setLEDConfig@data
 11985  003988  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 11986  00398A  0E75               	movlw	117
 11987  00398C  EC15  F024         	call	_enc424j600_readControlRegisterUnbanked
 11988                           
 11989                           ;ENC424J600.c: 422: if (LED == LEDB) {
 11990  003990  0100               	movlb	0	; () banked
 11991  003992  056F               	decf	ethernetController_setLEDConfig@LED& (0+255),w,b
 11992  003994  B4D8               	btfsc	status,2,c
 11993  003996  D00B               	goto	l205
 11994  003998  D015               	goto	l204
 11995  00399A                     
 11996                           ; BSR set to: 0
 11997                           ;ENC424J600.c: 427: data &= ~0x0f;
 11998                           
 11999                           ; BSR set to: 0
 12000                           
 12001                           ;ENC424J600.c: 426: case LED_OFF:
 12002                           
 12003                           ; BSR set to: 0
 12004  00399A  0EF0               	movlw	240
 12005  00399C  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 12006                           
 12007                           ; BSR set to: 0
 12008                           ;ENC424J600.c: 428: data |= 0x01;
 12009  00399E  8170               	bsf	ethernetController_setLEDConfig@data& (0+255),0,b
 12010                           
 12011                           ;ENC424J600.c: 429: break;
 12012  0039A0  D02C               	goto	l216
 12013  0039A2                     
 12014                           ; BSR set to: 0
 12015                           ;ENC424J600.c: 431: data &= ~0x0f;
 12016                           
 12017                           ; BSR set to: 0
 12018  0039A2  0EF0               	movlw	240
 12019  0039A4  D018               	goto	L5
 12020  0039A6                     
 12021                           ; BSR set to: 0
 12022                           ;ENC424J600.c: 434: data &= ~0x0f;
 12023                           
 12024                           ; BSR set to: 0
 12025  0039A6  0EF0               	movlw	240
 12026  0039A8  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 12027                           
 12028                           ;ENC424J600.c: 435: data |= 0x06;
 12029  0039AA  0E06               	movlw	6
 12030  0039AC  D019               	goto	L6
 12031  0039AE                     l205:
 12032                           
 12033                           ; BSR set to: 0
 12034                           
 12035                           ; BSR set to: 0
 12036  0039AE  516E               	movf	ethernetController_setLEDConfig@conf& (0+255),w,b
 12037                           
 12038                           ; Switch size 1, requested type "space"
 12039                           ; Number of cases is 3, Range of values is 0 to 2
 12040                           ; switch strategies available:
 12041                           ; Name         Instructions Cycles
 12042                           ; simple_byte           10     6 (average)
 12043                           ;	Chosen strategy is simple_byte
 12044  0039B0  0A00               	xorlw	0	; case 0
 12045  0039B2  B4D8               	btfsc	status,2,c
 12046  0039B4  D7F6               	goto	l209
 12047  0039B6  0A01               	xorlw	1	; case 1
 12048  0039B8  B4D8               	btfsc	status,2,c
 12049  0039BA  D7EF               	goto	l206
 12050  0039BC  0A03               	xorlw	3	; case 2
 12051  0039BE  B4D8               	btfsc	status,2,c
 12052  0039C0  D7F2               	goto	l210
 12053  0039C2  D7EB               	goto	l206
 12054  0039C4                     l204:
 12055                           
 12056                           ; BSR set to: 0
 12057                           
 12058                           ; BSR set to: 0
 12059  0039C4  516F               	movf	ethernetController_setLEDConfig@LED& (0+255),w,b
 12060  0039C6  B4D8               	btfsc	status,2,c
 12061  0039C8  D00D               	goto	l213
 12062  0039CA  D017               	goto	l216
 12063  0039CC                     
 12064                           ; BSR set to: 0
 12065                           ;ENC424J600.c: 442: data &= ~(0x0f << 4);
 12066                           
 12067                           ; BSR set to: 0
 12068                           
 12069                           ;ENC424J600.c: 441: case LED_OFF:
 12070                           
 12071                           ; BSR set to: 0
 12072  0039CC  0E0F               	movlw	15
 12073  0039CE  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 12074                           
 12075                           ; BSR set to: 0
 12076                           ;ENC424J600.c: 443: data |= (0x01 << 4);
 12077  0039D0  8970               	bsf	ethernetController_setLEDConfig@data& (0+255),4,b
 12078                           
 12079                           ;ENC424J600.c: 444: break;
 12080  0039D2  D013               	goto	l216
 12081  0039D4                     
 12082                           ; BSR set to: 0
 12083                           ;ENC424J600.c: 446: data &= ~(0x0f << 4);
 12084                           
 12085                           ; BSR set to: 0
 12086  0039D4  0E0F               	movlw	15
 12087  0039D6                     L5:
 12088  0039D6  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 12089                           
 12090                           ;ENC424J600.c: 447: break;
 12091  0039D8  D010               	goto	l216
 12092  0039DA                     
 12093                           ; BSR set to: 0
 12094                           ;ENC424J600.c: 449: data &= ~(0x0f << 4);
 12095                           
 12096                           ; BSR set to: 0
 12097  0039DA  0E0F               	movlw	15
 12098  0039DC  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 12099                           
 12100                           ;ENC424J600.c: 450: data |= (0x06 << 4);
 12101  0039DE  0E60               	movlw	96
 12102  0039E0                     L6:
 12103  0039E0  1370               	iorwf	ethernetController_setLEDConfig@data& (0+255),f,b
 12104                           
 12105                           ; BSR set to: 0
 12106                           ;ENC424J600.c: 452: }
 12107                           
 12108                           ;ENC424J600.c: 451: break;
 12109  0039E2  D00B               	goto	l216
 12110  0039E4                     l213:
 12111                           
 12112                           ; BSR set to: 0
 12113                           
 12114                           ; BSR set to: 0
 12115  0039E4  516E               	movf	ethernetController_setLEDConfig@conf& (0+255),w,b
 12116                           
 12117                           ; Switch size 1, requested type "space"
 12118                           ; Number of cases is 3, Range of values is 0 to 2
 12119                           ; switch strategies available:
 12120                           ; Name         Instructions Cycles
 12121                           ; simple_byte           10     6 (average)
 12122                           ;	Chosen strategy is simple_byte
 12123  0039E6  0A00               	xorlw	0	; case 0
 12124  0039E8  B4D8               	btfsc	status,2,c
 12125  0039EA  D7F4               	goto	l217
 12126  0039EC  0A01               	xorlw	1	; case 1
 12127  0039EE  B4D8               	btfsc	status,2,c
 12128  0039F0  D7ED               	goto	l214
 12129  0039F2  0A03               	xorlw	3	; case 2
 12130  0039F4  B4D8               	btfsc	status,2,c
 12131  0039F6  D7F1               	goto	l218
 12132  0039F8  D7E9               	goto	l214
 12133  0039FA                     l216:
 12134                           
 12135                           ; BSR set to: 0
 12136                           ;ENC424J600.c: 453: }
 12137                           ;ENC424J600.c: 454: enc424j600_writeControlRegisterUnbanked(0x15 + 0x60, &data);
 12138                           
 12139                           ; BSR set to: 0
 12140                           
 12141                           ; BSR set to: 0
 12142                           
 12143                           ; BSR set to: 0
 12144  0039FA  0E70               	movlw	low ethernetController_setLEDConfig@data
 12145  0039FC  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 12146  0039FE  0E00               	movlw	high ethernetController_setLEDConfig@data
 12147  003A00  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 12148  003A02  0E75               	movlw	117
 12149  003A04  ECFA  F023         	call	_enc424j600_writeControlRegisterUnbanked
 12150  003A08  0012               	return		;funcret
 12151  003A0A                     __end_of_ethernetController_setLEDConfig:
 12152                           	opt stack 0
 12153                           tblptru	equ	0xFF8
 12154                           tblptrh	equ	0xFF7
 12155                           tblptrl	equ	0xFF6
 12156                           tablat	equ	0xFF5
 12157                           prodh	equ	0xFF4
 12158                           prodl	equ	0xFF3
 12159                           intcon	equ	0xFF2
 12160                           intcon3	equ	0xFF0
 12161                           indf0	equ	0xFEF
 12162                           postinc0	equ	0xFEE
 12163                           plusw0	equ	0xFEB
 12164                           fsr0h	equ	0xFEA
 12165                           fsr0l	equ	0xFE9
 12166                           wreg	equ	0xFE8
 12167                           postinc1	equ	0xFE6
 12168                           postdec1	equ	0xFE5
 12169                           plusw1	equ	0xFE3
 12170                           fsr1h	equ	0xFE2
 12171                           fsr1l	equ	0xFE1
 12172                           indf2	equ	0xFDF
 12173                           postinc2	equ	0xFDE
 12174                           postdec2	equ	0xFDD
 12175                           plusw2	equ	0xFDB
 12176                           fsr2h	equ	0xFDA
 12177                           fsr2l	equ	0xFD9
 12178                           status	equ	0xFD8
 12179                           
 12180 ;; *************** function _ethernetController_pollInterruptFlags *****************
 12181 ;; Defined at:
 12182 ;;		line 312 in file "src/enc424j600/ENC424J600.c"
 12183 ;; Parameters:    Size  Location     Type
 12184 ;;		None
 12185 ;; Auto vars:     Size  Location     Type
 12186 ;;  reg             2   32[BANK0 ] unsigned int 
 12187 ;;  flags           2   30[BANK0 ] struct interruptFlags
 12188 ;; Return value:  Size  Location     Type
 12189 ;;                  2   24[BANK0 ] struct interruptFlags
 12190 ;; Registers used:
 12191 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12192 ;; Tracked objects:
 12193 ;;		On entry : 0/0
 12194 ;;		On exit  : 0/0
 12195 ;;		Unchanged: 0/0
 12196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12197 ;;      Params:         0       2       0       0       0       0       0       0       0
 12198 ;;      Locals:         0       4       0       0       0       0       0       0       0
 12199 ;;      Temps:          0       4       0       0       0       0       0       0       0
 12200 ;;      Totals:         0      10       0       0       0       0       0       0       0
 12201 ;;Total ram usage:       10 bytes
 12202 ;; Hardware stack levels used:    1
 12203 ;; Hardware stack levels required when called:    8
 12204 ;; This function calls:
 12205 ;;		_enc424j600_getInterruptFlags
 12206 ;; This function is called by:
 12207 ;;		_handleStackBackgroundTasks
 12208 ;; This function uses a non-reentrant model
 12209 ;;
 12210                           
 12211                           	psect	text40
 12212  002862                     __ptext40:
 12213                           	opt stack 0
 12214  002862                     _ethernetController_pollInterruptFlags:
 12215                           	opt stack 21
 12216                           
 12217                           ;ENC424J600.c: 313: interruptFlags_t flags;
 12218                           ;ENC424J600.c: 314: uint16_t reg = enc424j600_getInterruptFlags();
 12219                           
 12220                           ;incstack = 0
 12221  002862  EC98  F022         	call	_enc424j600_getInterruptFlags	;wreg free
 12222  002866  C06E  F080         	movff	?_enc424j600_getInterruptFlags,ethernetController_pollInterruptFlags@reg
 12223  00286A  C06F  F081         	movff	?_enc424j600_getInterruptFlags+1,ethernetController_pollInterruptFlags@reg+1
 12224                           
 12225                           ;ENC424J600.c: 315: flags.MODEXIF = (reg & (1 << MODEXIF)) != 0 ? 1 : 0;
 12226  00286E  0100               	movlb	0	; () banked
 12227  002870  AD81               	btfss	(ethernetController_pollInterruptFlags@reg+1)& (0+255),6,b
 12228  002872  D003               	goto	u10800
 12229  002874  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 12230  002876  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 12231  002878  D002               	goto	u10818
 12232  00287A                     u10800:
 12233  00287A  0100               	movlb	0	; () banked
 12234  00287C  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 12235  00287E                     u10818:
 12236  00287E  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 12237  002880  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 12238  002882  0BFE               	andlw	-2
 12239  002884  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 12240  002886  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 12241                           
 12242                           ; BSR set to: 0
 12243                           ;ENC424J600.c: 316: flags.HASHIF = (reg & (1 << HASHIF)) != 0 ? 1 : 0;
 12244  002888  AB81               	btfss	(ethernetController_pollInterruptFlags@reg+1)& (0+255),5,b
 12245  00288A  D003               	goto	u10820
 12246  00288C  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 12247  00288E  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 12248  002890  D002               	goto	u10838
 12249  002892                     u10820:
 12250  002892  0100               	movlb	0	; () banked
 12251  002894  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 12252  002896                     u10838:
 12253  002896  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 12254  002898  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 12255  00289A  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 12256  00289C  0BFD               	andlw	-3
 12257  00289E  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 12258  0028A0  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 12259                           
 12260                           ; BSR set to: 0
 12261                           ;ENC424J600.c: 317: flags.AESIF = (reg & (1 << AESIF)) != 0 ? 1 : 0;
 12262  0028A2  A981               	btfss	(ethernetController_pollInterruptFlags@reg+1)& (0+255),4,b
 12263  0028A4  D003               	goto	u10840
 12264  0028A6  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 12265  0028A8  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 12266  0028AA  D002               	goto	u10858
 12267  0028AC                     u10840:
 12268  0028AC  0100               	movlb	0	; () banked
 12269  0028AE  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 12270  0028B0                     u10858:
 12271  0028B0  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 12272  0028B2  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 12273  0028B4  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 12274  0028B6  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 12275  0028B8  0BFB               	andlw	-5
 12276  0028BA  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 12277  0028BC  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 12278                           
 12279                           ; BSR set to: 0
 12280                           ;ENC424J600.c: 318: flags.LINKIF = (reg & (1 << LINKIF)) != 0 ? 1 : 0;
 12281  0028BE  A781               	btfss	(ethernetController_pollInterruptFlags@reg+1)& (0+255),3,b
 12282  0028C0  D003               	goto	u10860
 12283  0028C2  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 12284  0028C4  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 12285  0028C6  D002               	goto	u10878
 12286  0028C8                     u10860:
 12287  0028C8  0100               	movlb	0	; () banked
 12288  0028CA  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 12289  0028CC                     u10878:
 12290  0028CC  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 12291  0028CE  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 12292  0028D0  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 12293  0028D2  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 12294  0028D4  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 12295  0028D6  0BF7               	andlw	-9
 12296  0028D8  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 12297  0028DA  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 12298                           
 12299                           ; BSR set to: 0
 12300                           ;ENC424J600.c: 320: flags.PKTIF = (reg & (1 << PKTIF)) != 0 ? 1 : 0;
 12301  0028DC  AD80               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),6,b
 12302  0028DE  D003               	goto	u10880
 12303  0028E0  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 12304  0028E2  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 12305  0028E4  D002               	goto	u10898
 12306  0028E6                     u10880:
 12307  0028E6  0100               	movlb	0	; () banked
 12308  0028E8  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 12309  0028EA                     u10898:
 12310  0028EA  3B7A               	swapf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 12311  0028EC  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 12312  0028EE  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 12313  0028F0  0BEF               	andlw	-17
 12314  0028F2  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 12315  0028F4  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 12316                           
 12317                           ; BSR set to: 0
 12318                           ;ENC424J600.c: 321: flags.DMAIF = (reg & (1 << DMAIF)) != 0 ? 1 : 0;
 12319  0028F6  AB80               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),5,b
 12320  0028F8  D003               	goto	u10900
 12321  0028FA  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 12322  0028FC  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 12323  0028FE  D002               	goto	u10918
 12324  002900                     u10900:
 12325  002900  0100               	movlb	0	; () banked
 12326  002902  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 12327  002904                     u10918:
 12328  002904  3B7A               	swapf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 12329  002906  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 12330  002908  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 12331  00290A  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 12332  00290C  0BDF               	andlw	-33
 12333  00290E  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 12334  002910  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 12335                           
 12336                           ; BSR set to: 0
 12337                           ;ENC424J600.c: 323: flags.TXIF = (reg & (1 << TXIF)) != 0 ? 1 : 0;
 12338  002912  A89E               	btfss	3998,4,c	;volatile
 12339  002914  D003               	goto	u10920
 12340  002916  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 12341  002918  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 12342  00291A  D002               	goto	u10938
 12343  00291C                     u10920:
 12344  00291C  0100               	movlb	0	; () banked
 12345  00291E  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 12346  002920                     u10938:
 12347  002920  0E01               	movlw	1
 12348  002922  6F7B               	movwf	(??_ethernetController_pollInterruptFlags+1)& (0+255),b
 12349  002924  0E00               	movlw	0
 12350  002926  6F7C               	movwf	(??_ethernetController_pollInterruptFlags+2)& (0+255),b
 12351  002928  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 12352  00292A  D003               	goto	u10944
 12353  00292C                     u10945:
 12354  00292C  90D8               	bcf	status,0,c
 12355  00292E  377B               	rlcf	(??_ethernetController_pollInterruptFlags+1)& (0+255),f,b
 12356  002930  377C               	rlcf	(??_ethernetController_pollInterruptFlags+2)& (0+255),f,b
 12357  002932                     u10944:
 12358  002932  2F7A               	decfsz	??_ethernetController_pollInterruptFlags& (0+255),f,b
 12359  002934  D7FB               	goto	u10945
 12360  002936  0100               	movlb	0	; () banked
 12361  002938  5180               	movf	ethernetController_pollInterruptFlags@reg& (0+255),w,b
 12362  00293A  177B               	andwf	(??_ethernetController_pollInterruptFlags+1)& (0+255),f,b
 12363  00293C  5181               	movf	(ethernetController_pollInterruptFlags@reg+1)& (0+255),w,b
 12364  00293E  177C               	andwf	(??_ethernetController_pollInterruptFlags+2)& (0+255),f,b
 12365  002940  517B               	movf	(??_ethernetController_pollInterruptFlags+1)& (0+255),w,b
 12366  002942  117C               	iorwf	(??_ethernetController_pollInterruptFlags+2)& (0+255),w,b
 12367  002944  B4D8               	btfsc	status,2,c
 12368  002946  D003               	goto	u10950
 12369  002948  6B7D               	clrf	(??_ethernetController_pollInterruptFlags+3)& (0+255),b
 12370  00294A  2B7D               	incf	(??_ethernetController_pollInterruptFlags+3)& (0+255),f,b
 12371  00294C  D002               	goto	u10968
 12372  00294E                     u10950:
 12373  00294E  0100               	movlb	0	; () banked
 12374  002950  6B7D               	clrf	(??_ethernetController_pollInterruptFlags+3)& (0+255),b
 12375  002952                     u10968:
 12376  002952  3B7D               	swapf	(??_ethernetController_pollInterruptFlags+3)& (0+255),f,b
 12377  002954  477D               	rlncf	(??_ethernetController_pollInterruptFlags+3)& (0+255),f,b
 12378  002956  477D               	rlncf	(??_ethernetController_pollInterruptFlags+3)& (0+255),f,b
 12379  002958  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 12380  00295A  197D               	xorwf	(??_ethernetController_pollInterruptFlags+3)& (0+255),w,b
 12381  00295C  0BBF               	andlw	-65
 12382  00295E  197D               	xorwf	(??_ethernetController_pollInterruptFlags+3)& (0+255),w,b
 12383  002960  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 12384                           
 12385                           ; BSR set to: 0
 12386                           ;ENC424J600.c: 324: flags.TXABTIF = (reg & (1 << TXABTIF)) != 0 ? 1 : 0;
 12387  002962  A580               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),2,b
 12388  002964  D003               	goto	u10970
 12389  002966  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 12390  002968  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 12391  00296A  D002               	goto	u10988
 12392  00296C                     u10970:
 12393  00296C  0100               	movlb	0	; () banked
 12394  00296E  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 12395  002970                     u10988:
 12396  002970  337A               	rrcf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 12397  002972  337A               	rrcf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 12398  002974  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 12399  002976  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 12400  002978  0B7F               	andlw	-129
 12401  00297A  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 12402  00297C  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 12403                           
 12404                           ; BSR set to: 0
 12405                           ;ENC424J600.c: 325: flags.RXABTIF = (reg & (1 << RXABTIF)) != 0 ? 1 : 0;
 12406  00297E  A380               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),1,b
 12407  002980  D003               	goto	u10990
 12408  002982  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 12409  002984  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 12410  002986  D002               	goto	u11008
 12411  002988                     u10990:
 12412  002988  0100               	movlb	0	; () banked
 12413  00298A  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 12414  00298C                     u11008:
 12415  00298C  517F               	movf	(ethernetController_pollInterruptFlags@flags+1)& (0+255),w,b
 12416  00298E  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 12417  002990  0BFE               	andlw	-2
 12418  002992  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 12419  002994  6F7F               	movwf	(ethernetController_pollInterruptFlags@flags+1)& (0+255),b
 12420                           
 12421                           ; BSR set to: 0
 12422                           ;ENC424J600.c: 326: flags.PCFULIF = (reg & (1 << PCFULIF)) != 0 ? 1 : 0;
 12423  002996  A180               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),0,b
 12424  002998  D003               	goto	u11010
 12425  00299A  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 12426  00299C  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 12427  00299E  D002               	goto	u11028
 12428  0029A0                     u11010:
 12429  0029A0  0100               	movlb	0	; () banked
 12430  0029A2  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 12431  0029A4                     u11028:
 12432  0029A4  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 12433  0029A6  517F               	movf	(ethernetController_pollInterruptFlags@flags+1)& (0+255),w,b
 12434  0029A8  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 12435  0029AA  0BFD               	andlw	-3
 12436  0029AC  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 12437  0029AE  6F7F               	movwf	(ethernetController_pollInterruptFlags@flags+1)& (0+255),b
 12438                           
 12439                           ; BSR set to: 0
 12440                           ;ENC424J600.c: 327: return flags;
 12441  0029B0  C07E  F078         	movff	ethernetController_pollInterruptFlags@flags,?_ethernetController_pollInterruptFla
      +                          gs
 12442  0029B4  C07F  F079         	movff	ethernetController_pollInterruptFlags@flags+1,?_ethernetController_pollInterruptF
      +                          lags+1
 12443  0029B8  0012               	return	
 12444  0029BA                     __end_of_ethernetController_pollInterruptFlags:
 12445                           	opt stack 0
 12446                           tblptru	equ	0xFF8
 12447                           tblptrh	equ	0xFF7
 12448                           tblptrl	equ	0xFF6
 12449                           tablat	equ	0xFF5
 12450                           prodh	equ	0xFF4
 12451                           prodl	equ	0xFF3
 12452                           intcon	equ	0xFF2
 12453                           intcon3	equ	0xFF0
 12454                           indf0	equ	0xFEF
 12455                           postinc0	equ	0xFEE
 12456                           plusw0	equ	0xFEB
 12457                           fsr0h	equ	0xFEA
 12458                           fsr0l	equ	0xFE9
 12459                           wreg	equ	0xFE8
 12460                           postinc1	equ	0xFE6
 12461                           postdec1	equ	0xFE5
 12462                           plusw1	equ	0xFE3
 12463                           fsr1h	equ	0xFE2
 12464                           fsr1l	equ	0xFE1
 12465                           indf2	equ	0xFDF
 12466                           postinc2	equ	0xFDE
 12467                           postdec2	equ	0xFDD
 12468                           plusw2	equ	0xFDB
 12469                           fsr2h	equ	0xFDA
 12470                           fsr2l	equ	0xFD9
 12471                           status	equ	0xFD8
 12472                           
 12473 ;; *************** function _enc424j600_getInterruptFlags *****************
 12474 ;; Defined at:
 12475 ;;		line 696 in file "src/enc424j600/ENC424J600.c"
 12476 ;; Parameters:    Size  Location     Type
 12477 ;;		None
 12478 ;; Auto vars:     Size  Location     Type
 12479 ;;  high            1   23[BANK0 ] unsigned char 
 12480 ;;  low             1   22[BANK0 ] unsigned char 
 12481 ;; Return value:  Size  Location     Type
 12482 ;;                  2   14[BANK0 ] unsigned int 
 12483 ;; Registers used:
 12484 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12485 ;; Tracked objects:
 12486 ;;		On entry : 0/0
 12487 ;;		On exit  : 0/0
 12488 ;;		Unchanged: 0/0
 12489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12490 ;;      Params:         0       2       0       0       0       0       0       0       0
 12491 ;;      Locals:         0       2       0       0       0       0       0       0       0
 12492 ;;      Temps:          0       6       0       0       0       0       0       0       0
 12493 ;;      Totals:         0      10       0       0       0       0       0       0       0
 12494 ;;Total ram usage:       10 bytes
 12495 ;; Hardware stack levels used:    1
 12496 ;; Hardware stack levels required when called:    7
 12497 ;; This function calls:
 12498 ;;		_enc424j600_readControlRegisterUnbanked
 12499 ;; This function is called by:
 12500 ;;		_ethernetController_pollInterruptFlags
 12501 ;; This function uses a non-reentrant model
 12502 ;;
 12503                           
 12504                           	psect	text41
 12505  004530                     __ptext41:
 12506                           	opt stack 0
 12507  004530                     _enc424j600_getInterruptFlags:
 12508                           	opt stack 21
 12509                           
 12510                           ;ENC424J600.c: 697: uint8_t low, high;
 12511                           ;ENC424J600.c: 698: enc424j600_readControlRegisterUnbanked(0x1C + 0x00, &low);
 12512                           
 12513                           ; BSR set to: 0
 12514                           ;incstack = 0
 12515  004530  0E76               	movlw	low enc424j600_getInterruptFlags@low
 12516  004532  0100               	movlb	0	; () banked
 12517  004534  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 12518  004536  0E00               	movlw	high enc424j600_getInterruptFlags@low
 12519  004538  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 12520  00453A  0E1C               	movlw	28
 12521  00453C  EC15  F024         	call	_enc424j600_readControlRegisterUnbanked
 12522                           
 12523                           ;ENC424J600.c: 699: enc424j600_readControlRegisterUnbanked(0x1D + 0x00, &high);
 12524  004540  0E77               	movlw	low enc424j600_getInterruptFlags@high
 12525  004542  0100               	movlb	0	; () banked
 12526  004544  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 12527  004546  0E00               	movlw	high enc424j600_getInterruptFlags@high
 12528  004548  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 12529  00454A  0E1D               	movlw	29
 12530  00454C  EC15  F024         	call	_enc424j600_readControlRegisterUnbanked
 12531                           
 12532                           ;ENC424J600.c: 700: return ( (((uint16_t) low)&0x00ff) | (((uint16_t) high << 8)&0xff00)
      +                          );
 12533  004550  0E00               	movlw	0
 12534  004552  0100               	movlb	0	; () banked
 12535  004554  6F70               	movwf	??_enc424j600_getInterruptFlags& (0+255),b
 12536  004556  0EFF               	movlw	255
 12537  004558  6F71               	movwf	(??_enc424j600_getInterruptFlags+1)& (0+255),b
 12538  00455A  5177               	movf	enc424j600_getInterruptFlags@high& (0+255),w,b
 12539  00455C  6F73               	movwf	(??_enc424j600_getInterruptFlags+3)& (0+255),b
 12540  00455E  6B72               	clrf	(??_enc424j600_getInterruptFlags+2)& (0+255),b
 12541  004560  5170               	movf	??_enc424j600_getInterruptFlags& (0+255),w,b
 12542  004562  1772               	andwf	(??_enc424j600_getInterruptFlags+2)& (0+255),f,b
 12543  004564  5171               	movf	(??_enc424j600_getInterruptFlags+1)& (0+255),w,b
 12544  004566  1773               	andwf	(??_enc424j600_getInterruptFlags+3)& (0+255),f,b
 12545  004568  5176               	movf	enc424j600_getInterruptFlags@low& (0+255),w,b
 12546  00456A  6F74               	movwf	(??_enc424j600_getInterruptFlags+4)& (0+255),b
 12547  00456C  6B75               	clrf	(??_enc424j600_getInterruptFlags+5)& (0+255),b
 12548  00456E  5172               	movf	(??_enc424j600_getInterruptFlags+2)& (0+255),w,b
 12549  004570  1174               	iorwf	(??_enc424j600_getInterruptFlags+4)& (0+255),w,b
 12550  004572  6F6E               	movwf	?_enc424j600_getInterruptFlags& (0+255),b
 12551  004574  5173               	movf	(??_enc424j600_getInterruptFlags+3)& (0+255),w,b
 12552  004576  1175               	iorwf	(??_enc424j600_getInterruptFlags+5)& (0+255),w,b
 12553  004578  6F6F               	movwf	(?_enc424j600_getInterruptFlags+1)& (0+255),b
 12554  00457A  0012               	return	
 12555  00457C                     __end_of_enc424j600_getInterruptFlags:
 12556                           	opt stack 0
 12557                           tblptru	equ	0xFF8
 12558                           tblptrh	equ	0xFF7
 12559                           tblptrl	equ	0xFF6
 12560                           tablat	equ	0xFF5
 12561                           prodh	equ	0xFF4
 12562                           prodl	equ	0xFF3
 12563                           intcon	equ	0xFF2
 12564                           intcon3	equ	0xFF0
 12565                           indf0	equ	0xFEF
 12566                           postinc0	equ	0xFEE
 12567                           plusw0	equ	0xFEB
 12568                           fsr0h	equ	0xFEA
 12569                           fsr0l	equ	0xFE9
 12570                           wreg	equ	0xFE8
 12571                           postinc1	equ	0xFE6
 12572                           postdec1	equ	0xFE5
 12573                           plusw1	equ	0xFE3
 12574                           fsr1h	equ	0xFE2
 12575                           fsr1l	equ	0xFE1
 12576                           indf2	equ	0xFDF
 12577                           postinc2	equ	0xFDE
 12578                           postdec2	equ	0xFDD
 12579                           plusw2	equ	0xFDB
 12580                           fsr2h	equ	0xFDA
 12581                           fsr2l	equ	0xFD9
 12582                           status	equ	0xFD8
 12583                           
 12584 ;; *************** function _ethernetController_newPacketAvailable *****************
 12585 ;; Defined at:
 12586 ;;		line 390 in file "src/enc424j600/ENC424J600.c"
 12587 ;; Parameters:    Size  Location     Type
 12588 ;;		None
 12589 ;; Auto vars:     Size  Location     Type
 12590 ;;		None
 12591 ;; Return value:  Size  Location     Type
 12592 ;;                  1    wreg      unsigned char 
 12593 ;; Registers used:
 12594 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12595 ;; Tracked objects:
 12596 ;;		On entry : 0/0
 12597 ;;		On exit  : 0/0
 12598 ;;		Unchanged: 0/0
 12599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12600 ;;      Params:         0       0       0       0       0       0       0       0       0
 12601 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12602 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12603 ;;      Totals:         0       0       0       0       0       0       0       0       0
 12604 ;;Total ram usage:        0 bytes
 12605 ;; Hardware stack levels used:    1
 12606 ;; Hardware stack levels required when called:    8
 12607 ;; This function calls:
 12608 ;;		_enc424j600_getPacketCount
 12609 ;; This function is called by:
 12610 ;;		_handleStackBackgroundTasks
 12611 ;; This function uses a non-reentrant model
 12612 ;;
 12613                           
 12614                           	psect	text42
 12615  004BB2                     __ptext42:
 12616                           	opt stack 0
 12617  004BB2                     _ethernetController_newPacketAvailable:
 12618                           	opt stack 21
 12619                           
 12620                           ;ENC424J600.c: 391: return (unsigned) (enc424j600_getPacketCount() != 0);
 12621                           
 12622                           ; BSR set to: 0
 12623                           ;incstack = 0
 12624  004BB2  ECB6  F025         	call	_enc424j600_getPacketCount	;wreg free
 12625  004BB6  0900               	iorlw	0
 12626  004BB8  B4D8               	btfsc	status,2,c
 12627  004BBA  D002               	goto	u11030
 12628  004BBC  0E01               	movlw	1
 12629  004BBE  0012               	return	
 12630  004BC0                     u11030:
 12631  004BC0  0E00               	movlw	0
 12632  004BC2  0012               	return	
 12633  004BC4                     __end_of_ethernetController_newPacketAvailable:
 12634                           	opt stack 0
 12635                           tblptru	equ	0xFF8
 12636                           tblptrh	equ	0xFF7
 12637                           tblptrl	equ	0xFF6
 12638                           tablat	equ	0xFF5
 12639                           prodh	equ	0xFF4
 12640                           prodl	equ	0xFF3
 12641                           intcon	equ	0xFF2
 12642                           intcon3	equ	0xFF0
 12643                           indf0	equ	0xFEF
 12644                           postinc0	equ	0xFEE
 12645                           plusw0	equ	0xFEB
 12646                           fsr0h	equ	0xFEA
 12647                           fsr0l	equ	0xFE9
 12648                           wreg	equ	0xFE8
 12649                           postinc1	equ	0xFE6
 12650                           postdec1	equ	0xFE5
 12651                           plusw1	equ	0xFE3
 12652                           fsr1h	equ	0xFE2
 12653                           fsr1l	equ	0xFE1
 12654                           indf2	equ	0xFDF
 12655                           postinc2	equ	0xFDE
 12656                           postdec2	equ	0xFDD
 12657                           plusw2	equ	0xFDB
 12658                           fsr2h	equ	0xFDA
 12659                           fsr2l	equ	0xFD9
 12660                           status	equ	0xFD8
 12661                           
 12662 ;; *************** function _ethernetController_clearInterruptFlag *****************
 12663 ;; Defined at:
 12664 ;;		line 330 in file "src/enc424j600/ENC424J600.c"
 12665 ;; Parameters:    Size  Location     Type
 12666 ;;  flag            1    wreg     unsigned char 
 12667 ;; Auto vars:     Size  Location     Type
 12668 ;;  flag            1   18[BANK0 ] unsigned char 
 12669 ;; Return value:  Size  Location     Type
 12670 ;;                  1    wreg      void 
 12671 ;; Registers used:
 12672 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12673 ;; Tracked objects:
 12674 ;;		On entry : 0/0
 12675 ;;		On exit  : 0/0
 12676 ;;		Unchanged: 0/0
 12677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12678 ;;      Params:         0       0       0       0       0       0       0       0       0
 12679 ;;      Locals:         0       1       0       0       0       0       0       0       0
 12680 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12681 ;;      Totals:         0       1       0       0       0       0       0       0       0
 12682 ;;Total ram usage:        1 bytes
 12683 ;; Hardware stack levels used:    1
 12684 ;; Hardware stack levels required when called:    8
 12685 ;; This function calls:
 12686 ;;		_enc424j600_clearInterruptFlag
 12687 ;; This function is called by:
 12688 ;;		_handleStackBackgroundTasks
 12689 ;; This function uses a non-reentrant model
 12690 ;;
 12691                           
 12692                           	psect	text43
 12693  004C26                     __ptext43:
 12694                           	opt stack 0
 12695  004C26                     _ethernetController_clearInterruptFlag:
 12696                           	opt stack 21
 12697                           
 12698                           ;incstack = 0
 12699                           ;ethernetController_clearInterruptFlag@flag stored from wreg
 12700  004C26  0100               	movlb	0	; () banked
 12701  004C28  6F72               	movwf	ethernetController_clearInterruptFlag@flag& (0+255),b
 12702                           
 12703                           ;ENC424J600.c: 331: enc424j600_clearInterruptFlag(flag);
 12704  004C2A  0100               	movlb	0	; () banked
 12705  004C2C  5172               	movf	ethernetController_clearInterruptFlag@flag& (0+255),w,b
 12706  004C2E  EC4A  F01D         	call	_enc424j600_clearInterruptFlag
 12707  004C32  0012               	return		;funcret
 12708  004C34                     __end_of_ethernetController_clearInterruptFlag:
 12709                           	opt stack 0
 12710                           tblptru	equ	0xFF8
 12711                           tblptrh	equ	0xFF7
 12712                           tblptrl	equ	0xFF6
 12713                           tablat	equ	0xFF5
 12714                           prodh	equ	0xFF4
 12715                           prodl	equ	0xFF3
 12716                           intcon	equ	0xFF2
 12717                           intcon3	equ	0xFF0
 12718                           indf0	equ	0xFEF
 12719                           postinc0	equ	0xFEE
 12720                           plusw0	equ	0xFEB
 12721                           fsr0h	equ	0xFEA
 12722                           fsr0l	equ	0xFE9
 12723                           wreg	equ	0xFE8
 12724                           postinc1	equ	0xFE6
 12725                           postdec1	equ	0xFE5
 12726                           plusw1	equ	0xFE3
 12727                           fsr1h	equ	0xFE2
 12728                           fsr1l	equ	0xFE1
 12729                           indf2	equ	0xFDF
 12730                           postinc2	equ	0xFDE
 12731                           postdec2	equ	0xFDD
 12732                           plusw2	equ	0xFDB
 12733                           fsr2h	equ	0xFDA
 12734                           fsr2l	equ	0xFD9
 12735                           status	equ	0xFD8
 12736                           
 12737 ;; *************** function _enc424j600_clearInterruptFlag *****************
 12738 ;; Defined at:
 12739 ;;		line 703 in file "src/enc424j600/ENC424J600.c"
 12740 ;; Parameters:    Size  Location     Type
 12741 ;;  flag            1    wreg     unsigned char 
 12742 ;; Auto vars:     Size  Location     Type
 12743 ;;  flag            1   16[BANK0 ] unsigned char 
 12744 ;;  temp            1   17[BANK0 ] unsigned char 
 12745 ;; Return value:  Size  Location     Type
 12746 ;;                  1    wreg      void 
 12747 ;; Registers used:
 12748 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12749 ;; Tracked objects:
 12750 ;;		On entry : 0/0
 12751 ;;		On exit  : 0/0
 12752 ;;		Unchanged: 0/0
 12753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12754 ;;      Params:         0       0       0       0       0       0       0       0       0
 12755 ;;      Locals:         0       2       0       0       0       0       0       0       0
 12756 ;;      Temps:          0       2       0       0       0       0       0       0       0
 12757 ;;      Totals:         0       4       0       0       0       0       0       0       0
 12758 ;;Total ram usage:        4 bytes
 12759 ;; Hardware stack levels used:    1
 12760 ;; Hardware stack levels required when called:    7
 12761 ;; This function calls:
 12762 ;;		_enc424j600_readControlRegisterUnbanked
 12763 ;;		_enc424j600_writeControlRegisterUnbanked
 12764 ;; This function is called by:
 12765 ;;		_ethernetController_clearInterruptFlag
 12766 ;; This function uses a non-reentrant model
 12767 ;;
 12768                           
 12769                           	psect	text44
 12770  003A94                     __ptext44:
 12771                           	opt stack 0
 12772  003A94                     _enc424j600_clearInterruptFlag:
 12773                           	opt stack 21
 12774                           
 12775                           ;incstack = 0
 12776                           ;enc424j600_clearInterruptFlag@flag stored from wreg
 12777  003A94  0100               	movlb	0	; () banked
 12778  003A96  6F70               	movwf	enc424j600_clearInterruptFlag@flag& (0+255),b
 12779                           
 12780                           ;ENC424J600.c: 704: uint8_t temp;
 12781                           ;ENC424J600.c: 705: if (flag < 8) {
 12782  003A98  0E08               	movlw	8
 12783  003A9A  0100               	movlb	0	; () banked
 12784  003A9C  6170               	cpfslt	enc424j600_clearInterruptFlag@flag& (0+255),b
 12785  003A9E  D01E               	goto	l317
 12786                           
 12787                           ; BSR set to: 0
 12788                           ;ENC424J600.c: 706: enc424j600_readControlRegisterUnbanked(0x1C + 0x00, &temp);
 12789  003AA0  0E71               	movlw	low enc424j600_clearInterruptFlag@temp
 12790  003AA2  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 12791  003AA4  0E00               	movlw	high enc424j600_clearInterruptFlag@temp
 12792  003AA6  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 12793  003AA8  0E1C               	movlw	28
 12794  003AAA  EC15  F024         	call	_enc424j600_readControlRegisterUnbanked
 12795                           
 12796                           ;ENC424J600.c: 707: temp &= ~(1 << flag);
 12797  003AAE  C070  F06E         	movff	enc424j600_clearInterruptFlag@flag,??_enc424j600_clearInterruptFlag
 12798  003AB2  0E01               	movlw	1
 12799  003AB4  0100               	movlb	0	; () banked
 12800  003AB6  6F6F               	movwf	(??_enc424j600_clearInterruptFlag+1)& (0+255),b
 12801  003AB8  2B6E               	incf	??_enc424j600_clearInterruptFlag& (0+255),f,b
 12802  003ABA  D002               	goto	u10494
 12803  003ABC                     u10495:
 12804  003ABC  90D8               	bcf	status,0,c
 12805  003ABE  376F               	rlcf	(??_enc424j600_clearInterruptFlag+1)& (0+255),f,b
 12806  003AC0                     u10494:
 12807  003AC0  2F6E               	decfsz	??_enc424j600_clearInterruptFlag& (0+255),f,b
 12808  003AC2  D7FC               	goto	u10495
 12809  003AC4  0100               	movlb	0	; () banked
 12810  003AC6  516F               	movf	(??_enc424j600_clearInterruptFlag+1)& (0+255),w,b
 12811  003AC8  0AFF               	xorlw	255
 12812  003ACA  1771               	andwf	enc424j600_clearInterruptFlag@temp& (0+255),f,b
 12813                           
 12814                           ; BSR set to: 0
 12815                           ;ENC424J600.c: 708: enc424j600_writeControlRegisterUnbanked(0x1C + 0x00, &temp);
 12816  003ACC  0E71               	movlw	low enc424j600_clearInterruptFlag@temp
 12817  003ACE  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 12818  003AD0  0E00               	movlw	high enc424j600_clearInterruptFlag@temp
 12819  003AD2  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 12820  003AD4  0E1C               	movlw	28
 12821  003AD6  ECFA  F023         	call	_enc424j600_writeControlRegisterUnbanked
 12822                           
 12823                           ;ENC424J600.c: 709: } else {
 12824  003ADA  0012               	return	
 12825  003ADC                     l317:
 12826                           
 12827                           ;ENC424J600.c: 710: flag -= 8;
 12828  003ADC  0E08               	movlw	8
 12829  003ADE  0100               	movlb	0	; () banked
 12830  003AE0  5F70               	subwf	enc424j600_clearInterruptFlag@flag& (0+255),f,b
 12831                           
 12832                           ; BSR set to: 0
 12833                           ;ENC424J600.c: 711: enc424j600_readControlRegisterUnbanked(0x1D + 0x00, &temp);
 12834  003AE2  0E71               	movlw	low enc424j600_clearInterruptFlag@temp
 12835  003AE4  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 12836  003AE6  0E00               	movlw	high enc424j600_clearInterruptFlag@temp
 12837  003AE8  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 12838  003AEA  0E1D               	movlw	29
 12839  003AEC  EC15  F024         	call	_enc424j600_readControlRegisterUnbanked
 12840                           
 12841                           ;ENC424J600.c: 712: temp &= ~(1 << flag);
 12842  003AF0  C070  F06E         	movff	enc424j600_clearInterruptFlag@flag,??_enc424j600_clearInterruptFlag
 12843  003AF4  0E01               	movlw	1
 12844  003AF6  0100               	movlb	0	; () banked
 12845  003AF8  6F6F               	movwf	(??_enc424j600_clearInterruptFlag+1)& (0+255),b
 12846  003AFA  2B6E               	incf	??_enc424j600_clearInterruptFlag& (0+255),f,b
 12847  003AFC  D002               	goto	u10504
 12848  003AFE                     u10505:
 12849  003AFE  90D8               	bcf	status,0,c
 12850  003B00  376F               	rlcf	(??_enc424j600_clearInterruptFlag+1)& (0+255),f,b
 12851  003B02                     u10504:
 12852  003B02  2F6E               	decfsz	??_enc424j600_clearInterruptFlag& (0+255),f,b
 12853  003B04  D7FC               	goto	u10505
 12854  003B06  0100               	movlb	0	; () banked
 12855  003B08  516F               	movf	(??_enc424j600_clearInterruptFlag+1)& (0+255),w,b
 12856  003B0A  0AFF               	xorlw	255
 12857  003B0C  1771               	andwf	enc424j600_clearInterruptFlag@temp& (0+255),f,b
 12858                           
 12859                           ;ENC424J600.c: 713: enc424j600_writeControlRegisterUnbanked(0x1D + 0x00, &temp);
 12860  003B0E  0E71               	movlw	low enc424j600_clearInterruptFlag@temp
 12861  003B10  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 12862  003B12  0E00               	movlw	high enc424j600_clearInterruptFlag@temp
 12863  003B14  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 12864  003B16  0E1D               	movlw	29
 12865  003B18  ECFA  F023         	call	_enc424j600_writeControlRegisterUnbanked
 12866  003B1C  0012               	return	
 12867  003B1E                     __end_of_enc424j600_clearInterruptFlag:
 12868                           	opt stack 0
 12869                           tblptru	equ	0xFF8
 12870                           tblptrh	equ	0xFF7
 12871                           tblptrl	equ	0xFF6
 12872                           tablat	equ	0xFF5
 12873                           prodh	equ	0xFF4
 12874                           prodl	equ	0xFF3
 12875                           intcon	equ	0xFF2
 12876                           intcon3	equ	0xFF0
 12877                           indf0	equ	0xFEF
 12878                           postinc0	equ	0xFEE
 12879                           plusw0	equ	0xFEB
 12880                           fsr0h	equ	0xFEA
 12881                           fsr0l	equ	0xFE9
 12882                           wreg	equ	0xFE8
 12883                           postinc1	equ	0xFE6
 12884                           postdec1	equ	0xFE5
 12885                           plusw1	equ	0xFE3
 12886                           fsr1h	equ	0xFE2
 12887                           fsr1l	equ	0xFE1
 12888                           indf2	equ	0xFDF
 12889                           postinc2	equ	0xFDE
 12890                           postdec2	equ	0xFDD
 12891                           plusw2	equ	0xFDB
 12892                           fsr2h	equ	0xFDA
 12893                           fsr2l	equ	0xFD9
 12894                           status	equ	0xFD8
 12895                           
 12896 ;; *************** function _arp_background *****************
 12897 ;; Defined at:
 12898 ;;		line 324 in file "src/stack/protocols/arp.c"
 12899 ;; Parameters:    Size  Location     Type
 12900 ;;		None
 12901 ;; Auto vars:     Size  Location     Type
 12902 ;;  ipPreliminar    4   78[BANK1 ] struct ipv4_address
 12903 ;; Return value:  Size  Location     Type
 12904 ;;                  3  507[None  ] struct error
 12905 ;; Registers used:
 12906 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12907 ;; Tracked objects:
 12908 ;;		On entry : 0/0
 12909 ;;		On exit  : 0/0
 12910 ;;		Unchanged: 0/0
 12911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12912 ;;      Params:         0       0       0       0       0       0       0       0       0
 12913 ;;      Locals:         0       0       4       0       0       0       0       0       0
 12914 ;;      Temps:          0       0       2       0       0       0       0       0       0
 12915 ;;      Totals:         0       0       6       0       0       0       0       0       0
 12916 ;;Total ram usage:        6 bytes
 12917 ;; Hardware stack levels used:    1
 12918 ;; Hardware stack levels required when called:   12
 12919 ;; This function calls:
 12920 ;;		_UARTTransmitText
 12921 ;;		_arp_probe
 12922 ;;		_ipv4_SrcAddrChanged
 12923 ;;		_ipv4_getPreliminaryIPSourceAddress
 12924 ;; This function is called by:
 12925 ;;		_handleStackBackgroundTasks
 12926 ;; This function uses a non-reentrant model
 12927 ;;
 12928                           
 12929                           	psect	text45
 12930  00355C                     __ptext45:
 12931                           	opt stack 0
 12932  00355C                     _arp_background:
 12933                           	opt stack 17
 12934                           
 12935                           ;arp.c: 325: error_t static err;
 12936                           ;arp.c: 326: err.code = (uint16_t)0xffff;
 12937                           
 12938                           ;incstack = 0
 12939  00355C  0101               	movlb	1	; () banked
 12940  00355E  69F2               	setf	(arp_background@err+1)& (0+255),b
 12941  003560  69F3               	setf	(arp_background@err+2)& (0+255),b
 12942                           
 12943                           ; BSR set to: 1
 12944                           ;arp.c: 327: err.module = ERROR_MODULE_ARP;
 12945  003562  0E03               	movlw	3
 12946  003564  6FF1               	movwf	arp_background@err& (0+255),b
 12947                           
 12948                           ; BSR set to: 1
 12949                           ;arp.c: 329: ipv4_address_t ipPreliminary = ipv4_getPreliminaryIPSourceAddress();
 12950  003566  ECE2  F025         	call	_ipv4_getPreliminaryIPSourceAddress	;wreg free
 12951  00356A  C060  F14E         	movff	?_ipv4_getPreliminaryIPSourceAddress,arp_background@ipPreliminary
 12952  00356E  C061  F14F         	movff	?_ipv4_getPreliminaryIPSourceAddress+1,arp_background@ipPreliminary+1
 12953  003572  C062  F150         	movff	?_ipv4_getPreliminaryIPSourceAddress+2,arp_background@ipPreliminary+2
 12954  003576  C063  F151         	movff	?_ipv4_getPreliminaryIPSourceAddress+3,arp_background@ipPreliminary+3
 12955                           
 12956                           ;arp.c: 331: if (ipv4_SrcAddrChanged(&err)) {
 12957  00357A  0EF1               	movlw	low arp_background@err
 12958  00357C  0100               	movlb	0	; () banked
 12959  00357E  6F60               	movwf	ipv4_SrcAddrChanged@err& (0+255),b
 12960  003580  0E01               	movlw	high arp_background@err
 12961  003582  6F61               	movwf	(ipv4_SrcAddrChanged@err+1)& (0+255),b
 12962  003584  ECCF  F025         	call	_ipv4_SrcAddrChanged	;wreg free
 12963  003588  0100               	movlb	0	; () banked
 12964  00358A  A0D8               	btfss	status,0,c
 12965  00358C  0012               	return	
 12966                           
 12967                           ; BSR set to: 0
 12968                           ;arp.c: 336: err.code = arp_probe(ipPreliminary).code;
 12969  00358E  C14E  F0FC         	movff	arp_background@ipPreliminary,arp_probe@ipTarget
 12970  003592  C14F  F0FD         	movff	arp_background@ipPreliminary+1,arp_probe@ipTarget+1
 12971  003596  C150  F0FE         	movff	arp_background@ipPreliminary+2,arp_probe@ipTarget+2
 12972  00359A  C151  F0FF         	movff	arp_background@ipPreliminary+3,arp_probe@ipTarget+3
 12973  00359E  EC74  F007         	call	_arp_probe	;wreg free
 12974  0035A2  0EFC               	movlw	low ?_arp_probe
 12975  0035A4  6ED9               	movwf	fsr2l,c
 12976  0035A6  0E00               	movlw	high ?_arp_probe
 12977  0035A8  6EDA               	movwf	fsr2h,c
 12978  0035AA  0E01               	movlw	1
 12979  0035AC  26D9               	addwf	fsr2l,f,c
 12980  0035AE  0E00               	movlw	0
 12981  0035B0  22DA               	addwfc	fsr2h,f,c
 12982  0035B2  CFDE F1F2          	movff	postinc2,arp_background@err+1
 12983  0035B6  CFDD F1F3          	movff	postdec2,arp_background@err+2
 12984                           
 12985                           ;arp.c: 338: switch (err.code) {
 12986  0035BA  D018               	goto	l980
 12987  0035BC                     
 12988                           ;arp.c: 340: UARTTransmitText("ARP: IPv4 address already in use!\n\r");
 12989  0035BC  0E4B               	movlw	low STR_81
 12990  0035BE  0100               	movlb	0	; () banked
 12991  0035C0  6F98               	movwf	UARTTransmitText@str& (0+255),b
 12992  0035C2  0E7C               	movlw	high STR_81
 12993  0035C4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 12994  0035C6  EC7A  F021         	call	_UARTTransmitText	;wreg free
 12995                           
 12996                           ;arp.c: 341: break;
 12997  0035CA  0012               	return	
 12998  0035CC                     
 12999                           ;arp.c: 343: UARTTransmitText("ARP: Nobody answered.\n\r");
 13000  0035CC  0EBF               	movlw	low STR_82
 13001  0035CE  0100               	movlb	0	; () banked
 13002  0035D0  6F98               	movwf	UARTTransmitText@str& (0+255),b
 13003  0035D2  0E7D               	movlw	high STR_82
 13004  0035D4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 13005  0035D6  EC7A  F021         	call	_UARTTransmitText	;wreg free
 13006                           
 13007                           ;arp.c: 346: break;
 13008                           
 13009                           ;arp.c: 345: case ERROR_ARP_WAITING_FOR_REPLY:
 13010                           
 13011                           ;arp.c: 344: break;
 13012  0035DA  0012               	return	
 13013  0035DC                     
 13014                           ;arp.c: 348: UARTTransmitText("ARP: An unknown error occured.\n\r");
 13015  0035DC  0EB4               	movlw	low STR_83
 13016  0035DE  0100               	movlb	0	; () banked
 13017  0035E0  6F98               	movwf	UARTTransmitText@str& (0+255),b
 13018  0035E2  0E7C               	movlw	high STR_83
 13019  0035E4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 13020  0035E6  EC7A  F021         	call	_UARTTransmitText	;wreg free
 13021                           
 13022                           ;arp.c: 349: }
 13023  0035EA  0012               	return	
 13024  0035EC                     l980:
 13025  0035EC  EE21  F0F2         	lfsr	2,arp_background@err+1
 13026  0035F0  CFDE F14C          	movff	postinc2,??_arp_background
 13027  0035F4  CFDD F14D          	movff	postdec2,??_arp_background+1
 13028                           
 13029                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13030                           ; Switch size 1, requested type "space"
 13031                           ; Number of cases is 1, Range of values is 1 to 1
 13032                           ; switch strategies available:
 13033                           ; Name         Instructions Cycles
 13034                           ; simple_byte            4     3 (average)
 13035                           ;	Chosen strategy is simple_byte
 13036  0035F8  0101               	movlb	1	; () banked
 13037  0035FA  514D               	movf	(??_arp_background+1)& (0+255),w,b
 13038  0035FC  0A01               	xorlw	1	; case 1
 13039  0035FE  A4D8               	btfss	status,2,c
 13040  003600  D7ED               	goto	l985
 13041                           
 13042                           ; BSR set to: 1
 13043                           ; Switch size 1, requested type "space"
 13044                           ; Number of cases is 3, Range of values is 145 to 148
 13045                           ; switch strategies available:
 13046                           ; Name         Instructions Cycles
 13047                           ; simple_byte           10     6 (average)
 13048                           ;	Chosen strategy is simple_byte
 13049  003602  514C               	movf	??_arp_background& (0+255),w,b
 13050  003604  0A91               	xorlw	145	; case 145
 13051  003606  B4D8               	btfsc	status,2,c
 13052  003608  0012               	return	
 13053  00360A  0A03               	xorlw	3	; case 146
 13054  00360C  B4D8               	btfsc	status,2,c
 13055  00360E  D7DE               	goto	l983
 13056  003610  0A06               	xorlw	6	; case 148
 13057  003612  B4D8               	btfsc	status,2,c
 13058  003614  D7D3               	goto	l981
 13059  003616  D7E2               	goto	l985
 13060  003618                     __end_of_arp_background:
 13061                           	opt stack 0
 13062                           tblptru	equ	0xFF8
 13063                           tblptrh	equ	0xFF7
 13064                           tblptrl	equ	0xFF6
 13065                           tablat	equ	0xFF5
 13066                           prodh	equ	0xFF4
 13067                           prodl	equ	0xFF3
 13068                           intcon	equ	0xFF2
 13069                           intcon3	equ	0xFF0
 13070                           indf0	equ	0xFEF
 13071                           postinc0	equ	0xFEE
 13072                           plusw0	equ	0xFEB
 13073                           fsr0h	equ	0xFEA
 13074                           fsr0l	equ	0xFE9
 13075                           wreg	equ	0xFE8
 13076                           postinc1	equ	0xFE6
 13077                           postdec1	equ	0xFE5
 13078                           plusw1	equ	0xFE3
 13079                           fsr1h	equ	0xFE2
 13080                           fsr1l	equ	0xFE1
 13081                           indf2	equ	0xFDF
 13082                           postinc2	equ	0xFDE
 13083                           postdec2	equ	0xFDD
 13084                           plusw2	equ	0xFDB
 13085                           fsr2h	equ	0xFDA
 13086                           fsr2l	equ	0xFD9
 13087                           status	equ	0xFD8
 13088                           
 13089 ;; *************** function _ipv4_SrcAddrChanged *****************
 13090 ;; Defined at:
 13091 ;;		line 291 in file "src/stack/protocols/ipv4.c"
 13092 ;; Parameters:    Size  Location     Type
 13093 ;;  err             2    0[BANK0 ] PTR struct error
 13094 ;;		 -> arp_background@err(3), 
 13095 ;; Auto vars:     Size  Location     Type
 13096 ;;		None
 13097 ;; Return value:  Size  Location     Type
 13098 ;;		None               void
 13099 ;; Registers used:
 13100 ;;		wreg, status,2, status,0
 13101 ;; Tracked objects:
 13102 ;;		On entry : 0/0
 13103 ;;		On exit  : 0/0
 13104 ;;		Unchanged: 0/0
 13105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13106 ;;      Params:         0       2       0       0       0       0       0       0       0
 13107 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13108 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13109 ;;      Totals:         0       2       0       0       0       0       0       0       0
 13110 ;;Total ram usage:        2 bytes
 13111 ;; Hardware stack levels used:    1
 13112 ;; Hardware stack levels required when called:    4
 13113 ;; This function calls:
 13114 ;;		Nothing
 13115 ;; This function is called by:
 13116 ;;		_arp_background
 13117 ;; This function uses a non-reentrant model
 13118 ;;
 13119                           
 13120                           	psect	text46
 13121  004B9E                     __ptext46:
 13122                           	opt stack 0
 13123  004B9E                     _ipv4_SrcAddrChanged:
 13124                           	opt stack 24
 13125                           
 13126                           ;ipv4.c: 292: arpStatus = err;
 13127                           
 13128                           ;incstack = 0
 13129  004B9E  C060  F03C         	movff	ipv4_SrcAddrChanged@err,_arpStatus
 13130  004BA2  C061  F03D         	movff	ipv4_SrcAddrChanged@err+1,_arpStatus+1
 13131                           
 13132                           ;ipv4.c: 293: return fSrcAddrChanged;
 13133  004BA6  B04F               	btfsc	_fSrcAddrChanged/(0+8),_fSrcAddrChanged& (0+7),c
 13134  004BA8  D002               	goto	l7498
 13135  004BAA  90D8               	bcf	status,0,c
 13136  004BAC  0012               	return	
 13137  004BAE                     l7498:
 13138  004BAE  80D8               	bsf	status,0,c
 13139  004BB0  0012               	return	
 13140  004BB2                     __end_of_ipv4_SrcAddrChanged:
 13141                           	opt stack 0
 13142                           tblptru	equ	0xFF8
 13143                           tblptrh	equ	0xFF7
 13144                           tblptrl	equ	0xFF6
 13145                           tablat	equ	0xFF5
 13146                           prodh	equ	0xFF4
 13147                           prodl	equ	0xFF3
 13148                           intcon	equ	0xFF2
 13149                           intcon3	equ	0xFF0
 13150                           indf0	equ	0xFEF
 13151                           postinc0	equ	0xFEE
 13152                           plusw0	equ	0xFEB
 13153                           fsr0h	equ	0xFEA
 13154                           fsr0l	equ	0xFE9
 13155                           wreg	equ	0xFE8
 13156                           postinc1	equ	0xFE6
 13157                           postdec1	equ	0xFE5
 13158                           plusw1	equ	0xFE3
 13159                           fsr1h	equ	0xFE2
 13160                           fsr1l	equ	0xFE1
 13161                           indf2	equ	0xFDF
 13162                           postinc2	equ	0xFDE
 13163                           postdec2	equ	0xFDD
 13164                           plusw2	equ	0xFDB
 13165                           fsr2h	equ	0xFDA
 13166                           fsr2l	equ	0xFD9
 13167                           status	equ	0xFD8
 13168                           
 13169 ;; *************** function _arp_probe *****************
 13170 ;; Defined at:
 13171 ;;		line 245 in file "src/stack/protocols/arp.c"
 13172 ;; Parameters:    Size  Location     Type
 13173 ;;  ipTarget        4  156[BANK0 ] struct ipv4_address
 13174 ;; Auto vars:     Size  Location     Type
 13175 ;;  waitingTime     4   69[BANK1 ] unsigned long 
 13176 ;;  ipSender        4   65[BANK1 ] struct ipv4_address
 13177 ;;  timeStart       4   61[BANK1 ] unsigned long 
 13178 ;;  err             3   73[BANK1 ] struct error
 13179 ;;  index           1   60[BANK1 ] unsigned char 
 13180 ;; Return value:  Size  Location     Type
 13181 ;;                  3  156[BANK0 ] struct error
 13182 ;; Registers used:
 13183 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13184 ;; Tracked objects:
 13185 ;;		On entry : 0/0
 13186 ;;		On exit  : 0/0
 13187 ;;		Unchanged: 0/0
 13188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13189 ;;      Params:         0       4       0       0       0       0       0       0       0
 13190 ;;      Locals:         0       0      16       0       0       0       0       0       0
 13191 ;;      Temps:          0       0       8       0       0       0       0       0       0
 13192 ;;      Totals:         0       4      24       0       0       0       0       0       0
 13193 ;;Total ram usage:       28 bytes
 13194 ;; Hardware stack levels used:    1
 13195 ;; Hardware stack levels required when called:   11
 13196 ;; This function calls:
 13197 ;;		_UARTTransmitText
 13198 ;;		___lwmod
 13199 ;;		_arp_checkForEntry
 13200 ;;		_arp_sendRequest
 13201 ;;		_getMillis
 13202 ;;		_intToString
 13203 ;;		_ipAdressToString
 13204 ;;		_ipv4_getPreliminaryIPSourceAddress
 13205 ;;		_ipv4_setToAllZero
 13206 ;;		_rand
 13207 ;; This function is called by:
 13208 ;;		_arp_background
 13209 ;; This function uses a non-reentrant model
 13210 ;;
 13211                           
 13212                           	psect	text47
 13213  000EE8                     __ptext47:
 13214                           	opt stack 0
 13215  000EE8                     _arp_probe:
 13216                           	opt stack 17
 13217                           
 13218                           ;arp.c: 246: time_t timeStart;
 13219                           ;arp.c: 247: time_t waitingTime;
 13220                           ;arp.c: 248: ipv4_address_t ipSender;
 13221                           ;arp.c: 249: uint8_t static probeCounter = 0;
 13222                           ;arp.c: 250: error_t err;
 13223                           ;arp.c: 252: enum states {
 13224                           ;arp.c: 253: PREPARING_PROBE, WAITING_TO_SEND, SENDING_PROBE, ARP_ENTRY_FOUND
 13225                           ;arp.c: 254: };
 13226                           ;arp.c: 255: uint8_t static state = PREPARING_PROBE;
 13227                           ;arp.c: 256: uint8_t index;
 13228                           ;arp.c: 257: err.module = ERROR_MODULE_ARP;
 13229                           
 13230                           ;incstack = 0
 13231  000EE8  0E03               	movlw	3
 13232  000EEA  0101               	movlb	1	; () banked
 13233  000EEC  6F49               	movwf	arp_probe@err& (0+255),b
 13234                           
 13235                           ; BSR set to: 1
 13236                           ;arp.c: 259: if (arp_checkForEntry(ipTarget, &index)) {
 13237  000EEE  C0FC  F067         	movff	arp_probe@ipTarget,arp_checkForEntry@ip
 13238  000EF2  C0FD  F068         	movff	arp_probe@ipTarget+1,arp_checkForEntry@ip+1
 13239  000EF6  C0FE  F069         	movff	arp_probe@ipTarget+2,arp_checkForEntry@ip+2
 13240  000EFA  C0FF  F06A         	movff	arp_probe@ipTarget+3,arp_checkForEntry@ip+3
 13241  000EFE  0E3C               	movlw	low arp_probe@index
 13242  000F00  0100               	movlb	0	; () banked
 13243  000F02  6F6B               	movwf	arp_checkForEntry@index& (0+255),b
 13244  000F04  0E01               	movlw	high arp_probe@index
 13245  000F06  6F6C               	movwf	(arp_checkForEntry@index+1)& (0+255),b
 13246  000F08  ECBE  F01B         	call	_arp_checkForEntry	;wreg free
 13247  000F0C  0900               	iorlw	0
 13248  000F0E  B4D8               	btfsc	status,2,c
 13249  000F10  D19A               	goto	l961
 13250                           
 13251                           ;arp.c: 260: UARTTransmitText("ARP: Found a valid entry for ");
 13252  000F12  0E11               	movlw	low STR_70
 13253  000F14  0100               	movlb	0	; () banked
 13254  000F16  6F98               	movwf	UARTTransmitText@str& (0+255),b
 13255  000F18  0E7D               	movlw	high STR_70
 13256  000F1A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 13257  000F1C  EC7A  F021         	call	_UARTTransmitText	;wreg free
 13258                           
 13259                           ;arp.c: 261: UARTTransmitText(ipAdressToString(ipTarget));
 13260  000F20  C0FC  F073         	movff	arp_probe@ipTarget,ipAdressToString@ip
 13261  000F24  C0FD  F074         	movff	arp_probe@ipTarget+1,ipAdressToString@ip+1
 13262  000F28  C0FE  F075         	movff	arp_probe@ipTarget+2,ipAdressToString@ip+2
 13263  000F2C  C0FF  F076         	movff	arp_probe@ipTarget+3,ipAdressToString@ip+3
 13264  000F30  EC0D  F010         	call	_ipAdressToString	;wreg free
 13265  000F34  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
 13266  000F38  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
 13267  000F3C  EC7A  F021         	call	_UARTTransmitText	;wreg free
 13268                           
 13269                           ;arp.c: 262: UARTTransmitText(".\n\r");
 13270  000F40  0ED8               	movlw	low (STR_51+1)
 13271  000F42  0100               	movlb	0	; () banked
 13272  000F44  6F98               	movwf	UARTTransmitText@str& (0+255),b
 13273  000F46  0E7F               	movlw	high (STR_51+1)
 13274  000F48  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 13275  000F4A  EC7A  F021         	call	_UARTTransmitText	;wreg free
 13276                           
 13277                           ;arp.c: 263: state = ARP_ENTRY_FOUND;
 13278  000F4E  0E03               	movlw	3
 13279  000F50  0101               	movlb	1	; () banked
 13280  000F52  6FDF               	movwf	arp_probe@state& (0+255),b
 13281                           
 13282                           ; BSR set to: 1
 13283                           ;arp.c: 264: }
 13284                           ;arp.c: 266: switch (state) {
 13285  000F54  D178               	goto	l961
 13286  000F56                     
 13287                           ; BSR set to: 1
 13288                           ;arp.c: 268: UARTTransmitText("ARP: Preparing probe...\n\r");
 13289                           
 13290                           ; BSR set to: 1
 13291  000F56  0EA5               	movlw	low STR_72
 13292  000F58  0100               	movlb	0	; () banked
 13293  000F5A  6F98               	movwf	UARTTransmitText@str& (0+255),b
 13294  000F5C  0E7D               	movlw	high STR_72
 13295  000F5E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 13296  000F60  EC7A  F021         	call	_UARTTransmitText	;wreg free
 13297                           
 13298                           ;arp.c: 269: ipv4_setToAllZero(&ipSender);
 13299  000F64  0E41               	movlw	low arp_probe@ipSender
 13300  000F66  0100               	movlb	0	; () banked
 13301  000F68  6F60               	movwf	ipv4_setToAllZero@ip& (0+255),b
 13302  000F6A  0E01               	movlw	high arp_probe@ipSender
 13303  000F6C  6F61               	movwf	(ipv4_setToAllZero@ip+1)& (0+255),b
 13304  000F6E  EC8C  F025         	call	_ipv4_setToAllZero	;wreg free
 13305                           
 13306                           ;arp.c: 270: timeStart = getMillis();
 13307  000F72  ECF4  F025         	call	_getMillis	;wreg free
 13308  000F76  C060  F13D         	movff	?_getMillis,arp_probe@timeStart
 13309  000F7A  C061  F13E         	movff	?_getMillis+1,arp_probe@timeStart+1
 13310  000F7E  C062  F13F         	movff	?_getMillis+2,arp_probe@timeStart+2
 13311  000F82  C063  F140         	movff	?_getMillis+3,arp_probe@timeStart+3
 13312                           
 13313                           ;arp.c: 271: waitingTime = rand() % 1000u;
 13314  000F86  EC4F  F021         	call	_rand	;wreg free
 13315  000F8A  C06C  F06E         	movff	?_rand,___lwmod@dividend
 13316  000F8E  C06D  F06F         	movff	?_rand+1,___lwmod@dividend+1
 13317  000F92  0E03               	movlw	3
 13318  000F94  0100               	movlb	0	; () banked
 13319  000F96  6F71               	movwf	(___lwmod@divisor+1)& (0+255),b
 13320  000F98  0EE8               	movlw	232
 13321  000F9A  6F70               	movwf	___lwmod@divisor& (0+255),b
 13322  000F9C  EC04  F023         	call	___lwmod	;wreg free
 13323  000FA0  0100               	movlb	0	; () banked
 13324  000FA2  C06E  F145         	movff	?___lwmod,arp_probe@waitingTime
 13325  000FA6  C06F  F146         	movff	?___lwmod+1,arp_probe@waitingTime+1
 13326  000FAA  0101               	movlb	1	; () banked
 13327  000FAC  6B47               	clrf	(arp_probe@waitingTime+2)& (0+255),b
 13328  000FAE  6B48               	clrf	(arp_probe@waitingTime+3)& (0+255),b
 13329                           
 13330                           ; BSR set to: 1
 13331                           ;arp.c: 272: state = WAITING_TO_SEND;
 13332  000FB0  0E01               	movlw	1
 13333  000FB2  6FDF               	movwf	arp_probe@state& (0+255),b
 13334                           
 13335                           ; BSR set to: 1
 13336                           ;arp.c: 273: err.code = ERROR_ARP_WAITING_FOR_REPLY;
 13337  000FB4  0E01               	movlw	1
 13338  000FB6  6F4B               	movwf	(arp_probe@err+2)& (0+255),b
 13339  000FB8  0E91               	movlw	145
 13340  000FBA  6F4A               	movwf	(arp_probe@err+1)& (0+255),b
 13341                           
 13342                           ; BSR set to: 1
 13343                           ;arp.c: 274: UARTTransmitText("ARP: Waiting to send probe.\n\r");
 13344  000FBC  0EF3               	movlw	low STR_73
 13345  000FBE  0100               	movlb	0	; () banked
 13346  000FC0  6F98               	movwf	UARTTransmitText@str& (0+255),b
 13347  000FC2  0E7C               	movlw	high STR_73
 13348  000FC4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 13349  000FC6  EC7A  F021         	call	_UARTTransmitText	;wreg free
 13350                           
 13351                           ;arp.c: 275: break;
 13352  000FCA  D14B               	goto	l963
 13353  000FCC                     
 13354                           ;arp.c: 277: if (getMillis() - timeStart >= waitingTime) {
 13355  000FCC  C13D  F134         	movff	arp_probe@timeStart,??_arp_probe
 13356  000FD0  C13E  F135         	movff	arp_probe@timeStart+1,??_arp_probe+1
 13357  000FD4  C13F  F136         	movff	arp_probe@timeStart+2,??_arp_probe+2
 13358  000FD8  C140  F137         	movff	arp_probe@timeStart+3,??_arp_probe+3
 13359  000FDC  0101               	movlb	1	; () banked
 13360  000FDE  1F34               	comf	??_arp_probe& (0+255),f,b
 13361  000FE0  1F35               	comf	(??_arp_probe+1)& (0+255),f,b
 13362  000FE2  1F36               	comf	(??_arp_probe+2)& (0+255),f,b
 13363  000FE4  1F37               	comf	(??_arp_probe+3)& (0+255),f,b
 13364  000FE6  2B34               	incf	??_arp_probe& (0+255),f,b
 13365  000FE8  0E00               	movlw	0
 13366  000FEA  2335               	addwfc	(??_arp_probe+1)& (0+255),f,b
 13367  000FEC  2336               	addwfc	(??_arp_probe+2)& (0+255),f,b
 13368  000FEE  2337               	addwfc	(??_arp_probe+3)& (0+255),f,b
 13369  000FF0  ECF4  F025         	call	_getMillis	;wreg free
 13370  000FF4  0101               	movlb	1	; () banked
 13371  000FF6  5134               	movf	??_arp_probe& (0+255),w,b
 13372  000FF8  0100               	movlb	0	; () banked
 13373  000FFA  2560               	addwf	?_getMillis& (0+255),w,b
 13374  000FFC  0101               	movlb	1	; () banked
 13375  000FFE  6F38               	movwf	(??_arp_probe+4)& (0+255),b
 13376  001000  5135               	movf	(??_arp_probe+1)& (0+255),w,b
 13377  001002  0100               	movlb	0	; () banked
 13378  001004  2161               	addwfc	(?_getMillis+1)& (0+255),w,b
 13379  001006  0101               	movlb	1	; () banked
 13380  001008  6F39               	movwf	(??_arp_probe+5)& (0+255),b
 13381  00100A  5136               	movf	(??_arp_probe+2)& (0+255),w,b
 13382  00100C  0100               	movlb	0	; () banked
 13383  00100E  2162               	addwfc	(?_getMillis+2)& (0+255),w,b
 13384  001010  0101               	movlb	1	; () banked
 13385  001012  6F3A               	movwf	(??_arp_probe+6)& (0+255),b
 13386  001014  5137               	movf	(??_arp_probe+3)& (0+255),w,b
 13387  001016  0100               	movlb	0	; () banked
 13388  001018  2163               	addwfc	(?_getMillis+3)& (0+255),w,b
 13389  00101A  0101               	movlb	1	; () banked
 13390  00101C  6F3B               	movwf	(??_arp_probe+7)& (0+255),b
 13391  00101E  5145               	movf	arp_probe@waitingTime& (0+255),w,b
 13392  001020  5D38               	subwf	(??_arp_probe+4)& (0+255),w,b
 13393  001022  5146               	movf	(arp_probe@waitingTime+1)& (0+255),w,b
 13394  001024  5939               	subwfb	(??_arp_probe+5)& (0+255),w,b
 13395  001026  5147               	movf	(arp_probe@waitingTime+2)& (0+255),w,b
 13396  001028  593A               	subwfb	(??_arp_probe+6)& (0+255),w,b
 13397  00102A  5148               	movf	(arp_probe@waitingTime+3)& (0+255),w,b
 13398  00102C  593B               	subwfb	(??_arp_probe+7)& (0+255),w,b
 13399  00102E  A0D8               	btfss	status,0,c
 13400  001030  D05F               	goto	l965
 13401                           
 13402                           ; BSR set to: 1
 13403                           ;arp.c: 278: UARTTransmitText("ARP: Waited ");
 13404  001032  0E26               	movlw	low STR_74
 13405  001034  0100               	movlb	0	; () banked
 13406  001036  6F98               	movwf	UARTTransmitText@str& (0+255),b
 13407  001038  0E7F               	movlw	high STR_74
 13408  00103A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 13409  00103C  EC7A  F021         	call	_UARTTransmitText	;wreg free
 13410                           
 13411                           ;arp.c: 279: UARTTransmitText(intToString(waitingTime));
 13412  001040  C145  F084         	movff	arp_probe@waitingTime,intToString@val
 13413  001044  C146  F085         	movff	arp_probe@waitingTime+1,intToString@val+1
 13414  001048  C147  F086         	movff	arp_probe@waitingTime+2,intToString@val+2
 13415  00104C  C148  F087         	movff	arp_probe@waitingTime+3,intToString@val+3
 13416  001050  EC30  F024         	call	_intToString	;wreg free
 13417  001054  C084  F098         	movff	?_intToString,UARTTransmitText@str
 13418  001058  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
 13419  00105C  EC7A  F021         	call	_UARTTransmitText	;wreg free
 13420                           
 13421                           ;arp.c: 280: UARTTransmitText(" ms.\n\r");
 13422  001060  0EAF               	movlw	low STR_75
 13423  001062  0100               	movlb	0	; () banked
 13424  001064  6F98               	movwf	UARTTransmitText@str& (0+255),b
 13425  001066  0E7F               	movlw	high STR_75
 13426  001068  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 13427  00106A  EC7A  F021         	call	_UARTTransmitText	;wreg free
 13428                           
 13429                           ;arp.c: 281: state = SENDING_PROBE;
 13430  00106E  0E02               	movlw	2
 13431  001070  0101               	movlb	1	; () banked
 13432  001072  6FDF               	movwf	arp_probe@state& (0+255),b
 13433                           
 13434                           ; BSR set to: 1
 13435                           ;arp.c: 283: waitingTime = (rand() % (2000u - 1000u)) + 1000u;
 13436  001074  0EE8               	movlw	232
 13437  001076  6F34               	movwf	??_arp_probe& (0+255),b
 13438  001078  0E03               	movlw	3
 13439  00107A  6F35               	movwf	(??_arp_probe+1)& (0+255),b
 13440  00107C  EC4F  F021         	call	_rand	;wreg free
 13441  001080  C06C  F06E         	movff	?_rand,___lwmod@dividend
 13442  001084  C06D  F06F         	movff	?_rand+1,___lwmod@dividend+1
 13443  001088  0E03               	movlw	3
 13444  00108A  0100               	movlb	0	; () banked
 13445  00108C  6F71               	movwf	(___lwmod@divisor+1)& (0+255),b
 13446  00108E  0EE8               	movlw	232
 13447  001090  6F70               	movwf	___lwmod@divisor& (0+255),b
 13448  001092  EC04  F023         	call	___lwmod	;wreg free
 13449  001096  0101               	movlb	1	; () banked
 13450  001098  5134               	movf	??_arp_probe& (0+255),w,b
 13451  00109A  0100               	movlb	0	; () banked
 13452  00109C  276E               	addwf	?___lwmod& (0+255),f,b
 13453  00109E  0101               	movlb	1	; () banked
 13454  0010A0  5135               	movf	(??_arp_probe+1)& (0+255),w,b
 13455  0010A2  0100               	movlb	0	; () banked
 13456  0010A4  236F               	addwfc	(?___lwmod+1)& (0+255),f,b
 13457  0010A6  C06E  F145         	movff	?___lwmod,arp_probe@waitingTime
 13458  0010AA  C06F  F146         	movff	?___lwmod+1,arp_probe@waitingTime+1
 13459  0010AE  0101               	movlb	1	; () banked
 13460  0010B0  6B47               	clrf	(arp_probe@waitingTime+2)& (0+255),b
 13461  0010B2  6B48               	clrf	(arp_probe@waitingTime+3)& (0+255),b
 13462                           
 13463                           ; BSR set to: 1
 13464                           ;arp.c: 285: UARTTransmitText("ARP: Waiting time between the probes is ");
 13465  0010B4  0E89               	movlw	low STR_76
 13466  0010B6  0100               	movlb	0	; () banked
 13467  0010B8  6F98               	movwf	UARTTransmitText@str& (0+255),b
 13468  0010BA  0E7B               	movlw	high STR_76
 13469  0010BC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 13470  0010BE  EC7A  F021         	call	_UARTTransmitText	;wreg free
 13471                           
 13472                           ;arp.c: 286: UARTTransmitText(intToString(waitingTime));
 13473  0010C2  C145  F084         	movff	arp_probe@waitingTime,intToString@val
 13474  0010C6  C146  F085         	movff	arp_probe@waitingTime+1,intToString@val+1
 13475  0010CA  C147  F086         	movff	arp_probe@waitingTime+2,intToString@val+2
 13476  0010CE  C148  F087         	movff	arp_probe@waitingTime+3,intToString@val+3
 13477  0010D2  EC30  F024         	call	_intToString	;wreg free
 13478  0010D6  C084  F098         	movff	?_intToString,UARTTransmitText@str
 13479  0010DA  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
 13480  0010DE  EC7A  F021         	call	_UARTTransmitText	;wreg free
 13481                           
 13482                           ;arp.c: 287: UARTTransmitText(" ms.\n\r");
 13483  0010E2  0EAF               	movlw	low STR_75
 13484  0010E4  0100               	movlb	0	; () banked
 13485  0010E6  6F98               	movwf	UARTTransmitText@str& (0+255),b
 13486  0010E8  0E7F               	movlw	high STR_75
 13487  0010EA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 13488  0010EC  EC7A  F021         	call	_UARTTransmitText	;wreg free
 13489  0010F0                     l965:
 13490                           
 13491                           ;arp.c: 288: }
 13492                           ;arp.c: 289: err.code = ERROR_ARP_WAITING_FOR_REPLY;
 13493  0010F0  0E01               	movlw	1
 13494  0010F2  0101               	movlb	1	; () banked
 13495  0010F4  6F4B               	movwf	(arp_probe@err+2)& (0+255),b
 13496  0010F6  0E91               	movlw	145
 13497  0010F8  D0A4               	goto	L8
 13498  0010FA                     
 13499                           ; BSR set to: 1
 13500                           ;arp.c: 292: if (probeCounter == 0 || (getMillis() - timeStart) > waitingTime) {
 13501                           
 13502                           ; BSR set to: 1
 13503  0010FA  51E0               	movf	arp_probe@probeCounter& (0+255),w,b
 13504  0010FC  B4D8               	btfsc	status,2,c
 13505  0010FE  D032               	goto	u10700
 13506                           
 13507                           ; BSR set to: 1
 13508  001100  C13D  F134         	movff	arp_probe@timeStart,??_arp_probe
 13509  001104  C13E  F135         	movff	arp_probe@timeStart+1,??_arp_probe+1
 13510  001108  C13F  F136         	movff	arp_probe@timeStart+2,??_arp_probe+2
 13511  00110C  C140  F137         	movff	arp_probe@timeStart+3,??_arp_probe+3
 13512  001110  1F34               	comf	??_arp_probe& (0+255),f,b
 13513  001112  1F35               	comf	(??_arp_probe+1)& (0+255),f,b
 13514  001114  1F36               	comf	(??_arp_probe+2)& (0+255),f,b
 13515  001116  1F37               	comf	(??_arp_probe+3)& (0+255),f,b
 13516  001118  2B34               	incf	??_arp_probe& (0+255),f,b
 13517  00111A  0E00               	movlw	0
 13518  00111C  2335               	addwfc	(??_arp_probe+1)& (0+255),f,b
 13519  00111E  2336               	addwfc	(??_arp_probe+2)& (0+255),f,b
 13520  001120  2337               	addwfc	(??_arp_probe+3)& (0+255),f,b
 13521  001122  ECF4  F025         	call	_getMillis	;wreg free
 13522  001126  0101               	movlb	1	; () banked
 13523  001128  5134               	movf	??_arp_probe& (0+255),w,b
 13524  00112A  0100               	movlb	0	; () banked
 13525  00112C  2560               	addwf	?_getMillis& (0+255),w,b
 13526  00112E  0101               	movlb	1	; () banked
 13527  001130  6F38               	movwf	(??_arp_probe+4)& (0+255),b
 13528  001132  5135               	movf	(??_arp_probe+1)& (0+255),w,b
 13529  001134  0100               	movlb	0	; () banked
 13530  001136  2161               	addwfc	(?_getMillis+1)& (0+255),w,b
 13531  001138  0101               	movlb	1	; () banked
 13532  00113A  6F39               	movwf	(??_arp_probe+5)& (0+255),b
 13533  00113C  5136               	movf	(??_arp_probe+2)& (0+255),w,b
 13534  00113E  0100               	movlb	0	; () banked
 13535  001140  2162               	addwfc	(?_getMillis+2)& (0+255),w,b
 13536  001142  0101               	movlb	1	; () banked
 13537  001144  6F3A               	movwf	(??_arp_probe+6)& (0+255),b
 13538  001146  5137               	movf	(??_arp_probe+3)& (0+255),w,b
 13539  001148  0100               	movlb	0	; () banked
 13540  00114A  2163               	addwfc	(?_getMillis+3)& (0+255),w,b
 13541  00114C  0101               	movlb	1	; () banked
 13542  00114E  6F3B               	movwf	(??_arp_probe+7)& (0+255),b
 13543  001150  5138               	movf	(??_arp_probe+4)& (0+255),w,b
 13544  001152  5D45               	subwf	arp_probe@waitingTime& (0+255),w,b
 13545  001154  5139               	movf	(??_arp_probe+5)& (0+255),w,b
 13546  001156  5946               	subwfb	(arp_probe@waitingTime+1)& (0+255),w,b
 13547  001158  513A               	movf	(??_arp_probe+6)& (0+255),w,b
 13548  00115A  5947               	subwfb	(arp_probe@waitingTime+2)& (0+255),w,b
 13549  00115C  513B               	movf	(??_arp_probe+7)& (0+255),w,b
 13550  00115E  5948               	subwfb	(arp_probe@waitingTime+3)& (0+255),w,b
 13551  001160  B0D8               	btfsc	status,0,c
 13552  001162  D07F               	goto	l963
 13553  001164                     u10700:
 13554                           
 13555                           ; BSR set to: 1
 13556                           ;arp.c: 293: timeStart = getMillis();
 13557                           
 13558                           ; BSR set to: 1
 13559  001164  ECF4  F025         	call	_getMillis	;wreg free
 13560  001168  C060  F13D         	movff	?_getMillis,arp_probe@timeStart
 13561  00116C  C061  F13E         	movff	?_getMillis+1,arp_probe@timeStart+1
 13562  001170  C062  F13F         	movff	?_getMillis+2,arp_probe@timeStart+2
 13563  001174  C063  F140         	movff	?_getMillis+3,arp_probe@timeStart+3
 13564                           
 13565                           ;arp.c: 295: if (probeCounter < 3u) {
 13566  001178  0E03               	movlw	3
 13567  00117A  0101               	movlb	1	; () banked
 13568  00117C  61E0               	cpfslt	arp_probe@probeCounter& (0+255),b
 13569  00117E  D048               	goto	l970
 13570                           
 13571                           ; BSR set to: 1
 13572                           ;arp.c: 296: arp_sendRequest(ipSender, ipTarget);
 13573  001180  C141  F100         	movff	arp_probe@ipSender,arp_sendRequest@ipSender
 13574  001184  C142  F101         	movff	arp_probe@ipSender+1,arp_sendRequest@ipSender+1
 13575  001188  C143  F102         	movff	arp_probe@ipSender+2,arp_sendRequest@ipSender+2
 13576  00118C  C144  F103         	movff	arp_probe@ipSender+3,arp_sendRequest@ipSender+3
 13577  001190  C0FC  F104         	movff	arp_probe@ipTarget,arp_sendRequest@ipTarget
 13578  001194  C0FD  F105         	movff	arp_probe@ipTarget+1,arp_sendRequest@ipTarget+1
 13579  001198  C0FE  F106         	movff	arp_probe@ipTarget+2,arp_sendRequest@ipTarget+2
 13580  00119C  C0FF  F107         	movff	arp_probe@ipTarget+3,arp_sendRequest@ipTarget+3
 13581  0011A0  EC0C  F01B         	call	_arp_sendRequest	;wreg free
 13582                           
 13583                           ;arp.c: 297: UARTTransmitText("ARP: Sending probe #");
 13584  0011A4  0E1D               	movlw	low STR_78
 13585  0011A6  0100               	movlb	0	; () banked
 13586  0011A8  6F98               	movwf	UARTTransmitText@str& (0+255),b
 13587  0011AA  0E7E               	movlw	high STR_78
 13588  0011AC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 13589  0011AE  EC7A  F021         	call	_UARTTransmitText	;wreg free
 13590                           
 13591                           ;arp.c: 298: UARTTransmitText(intToString(probeCounter));
 13592  0011B2  0101               	movlb	1	; () banked
 13593  0011B4  51E0               	movf	arp_probe@probeCounter& (0+255),w,b
 13594  0011B6  0100               	movlb	0	; () banked
 13595  0011B8  6F84               	movwf	intToString@val& (0+255),b
 13596  0011BA  6B85               	clrf	(intToString@val+1)& (0+255),b
 13597  0011BC  6B86               	clrf	(intToString@val+2)& (0+255),b
 13598  0011BE  6B87               	clrf	(intToString@val+3)& (0+255),b
 13599  0011C0  EC30  F024         	call	_intToString	;wreg free
 13600  0011C4  C084  F098         	movff	?_intToString,UARTTransmitText@str
 13601  0011C8  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
 13602  0011CC  EC7A  F021         	call	_UARTTransmitText	;wreg free
 13603                           
 13604                           ;arp.c: 299: UARTTransmitText(": Who has ");
 13605  0011D0  0E6F               	movlw	low STR_79
 13606  0011D2  0100               	movlb	0	; () banked
 13607  0011D4  6F98               	movwf	UARTTransmitText@str& (0+255),b
 13608  0011D6  0E7F               	movlw	high STR_79
 13609  0011D8  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 13610  0011DA  EC7A  F021         	call	_UARTTransmitText	;wreg free
 13611                           
 13612                           ;arp.c: 300: UARTTransmitText(ipAdressToString(ipv4_getPreliminaryIPSourceAddress()));
 13613  0011DE  ECE2  F025         	call	_ipv4_getPreliminaryIPSourceAddress	;wreg free
 13614  0011E2  C060  F073         	movff	?_ipv4_getPreliminaryIPSourceAddress,ipAdressToString@ip
 13615  0011E6  C061  F074         	movff	?_ipv4_getPreliminaryIPSourceAddress+1,ipAdressToString@ip+1
 13616  0011EA  C062  F075         	movff	?_ipv4_getPreliminaryIPSourceAddress+2,ipAdressToString@ip+2
 13617  0011EE  C063  F076         	movff	?_ipv4_getPreliminaryIPSourceAddress+3,ipAdressToString@ip+3
 13618  0011F2  EC0D  F010         	call	_ipAdressToString	;wreg free
 13619  0011F6  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
 13620  0011FA  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
 13621  0011FE  EC7A  F021         	call	_UARTTransmitText	;wreg free
 13622                           
 13623                           ;arp.c: 301: UARTTransmitText("?\n\r");
 13624  001202  0EE1               	movlw	low STR_80
 13625  001204  0100               	movlb	0	; () banked
 13626  001206  6F98               	movwf	UARTTransmitText@str& (0+255),b
 13627  001208  0E7F               	movlw	high STR_80
 13628  00120A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 13629  00120C  EC7A  F021         	call	_UARTTransmitText	;wreg free
 13630  001210                     l970:
 13631                           
 13632                           ;arp.c: 302: }
 13633                           ;arp.c: 303: if (probeCounter >= 3u) {
 13634  001210  0E02               	movlw	2
 13635  001212  0101               	movlb	1	; () banked
 13636  001214  65E0               	cpfsgt	arp_probe@probeCounter& (0+255),b
 13637  001216  D008               	goto	l971
 13638                           
 13639                           ; BSR set to: 1
 13640                           ;arp.c: 304: probeCounter = 0;
 13641  001218  0E00               	movlw	0
 13642  00121A  6FE0               	movwf	arp_probe@probeCounter& (0+255),b
 13643                           
 13644                           ;arp.c: 305: state = PREPARING_PROBE;
 13645  00121C  0E00               	movlw	0
 13646  00121E  6FDF               	movwf	arp_probe@state& (0+255),b
 13647                           
 13648                           ;arp.c: 306: err.code = ERROR_ARP_MAXIMUM_NUMBER_OF_PROBES_REACHED;
 13649  001220  0E01               	movlw	1
 13650  001222  6F4B               	movwf	(arp_probe@err+2)& (0+255),b
 13651  001224  0E92               	movlw	146
 13652  001226  D00D               	goto	L8
 13653  001228                     l971:
 13654                           
 13655                           ; BSR set to: 1
 13656                           ;arp.c: 308: err.code = ERROR_ARP_WAITING_FOR_REPLY;
 13657                           
 13658                           ; BSR set to: 1
 13659  001228  0E01               	movlw	1
 13660  00122A  6F4B               	movwf	(arp_probe@err+2)& (0+255),b
 13661  00122C  0E91               	movlw	145
 13662  00122E  6F4A               	movwf	(arp_probe@err+1)& (0+255),b
 13663                           
 13664                           ; BSR set to: 1
 13665                           ;arp.c: 309: probeCounter++;
 13666  001230  2BE0               	incf	arp_probe@probeCounter& (0+255),f,b
 13667                           
 13668                           ; BSR set to: 1
 13669                           ;arp.c: 310: }
 13670                           ;arp.c: 312: }
 13671                           ;arp.c: 313: break;
 13672                           
 13673                           ; BSR set to: 1
 13674  001232  D017               	goto	l963
 13675  001234                     
 13676                           ; BSR set to: 1
 13677                           ;arp.c: 315: probeCounter = 0;
 13678                           
 13679                           ; BSR set to: 1
 13680  001234  0E00               	movlw	0
 13681  001236  6FE0               	movwf	arp_probe@probeCounter& (0+255),b
 13682                           
 13683                           ;arp.c: 316: state = PREPARING_PROBE;
 13684  001238  0E00               	movlw	0
 13685  00123A  6FDF               	movwf	arp_probe@state& (0+255),b
 13686                           
 13687                           ;arp.c: 317: err.code = ERROR_ARP_IPv4_ADDRESS_CONFLICT;
 13688  00123C  0E01               	movlw	1
 13689  00123E  6F4B               	movwf	(arp_probe@err+2)& (0+255),b
 13690  001240  0E94               	movlw	148
 13691  001242                     L8:
 13692  001242  6F4A               	movwf	(arp_probe@err+1)& (0+255),b
 13693                           
 13694                           ;arp.c: 318: }
 13695  001244  D00E               	goto	l963
 13696  001246                     l961:
 13697                           
 13698                           ; BSR set to: 1
 13699  001246  0101               	movlb	1	; () banked
 13700  001248  51DF               	movf	arp_probe@state& (0+255),w,b
 13701                           
 13702                           ; Switch size 1, requested type "space"
 13703                           ; Number of cases is 4, Range of values is 0 to 3
 13704                           ; switch strategies available:
 13705                           ; Name         Instructions Cycles
 13706                           ; simple_byte           13     7 (average)
 13707                           ;	Chosen strategy is simple_byte
 13708  00124A  0A00               	xorlw	0	; case 0
 13709  00124C  B4D8               	btfsc	status,2,c
 13710  00124E  D683               	goto	l962
 13711  001250  0A01               	xorlw	1	; case 1
 13712  001252  B4D8               	btfsc	status,2,c
 13713  001254  D6BB               	goto	l964
 13714  001256  0A03               	xorlw	3	; case 2
 13715  001258  B4D8               	btfsc	status,2,c
 13716  00125A  D74F               	goto	l966
 13717  00125C  0A01               	xorlw	1	; case 3
 13718  00125E  B4D8               	btfsc	status,2,c
 13719  001260  D7E9               	goto	l973
 13720  001262                     l963:
 13721                           
 13722                           ;arp.c: 319: return err;
 13723  001262  C149  F0FC         	movff	arp_probe@err,?_arp_probe
 13724  001266  C14A  F0FD         	movff	arp_probe@err+1,?_arp_probe+1
 13725  00126A  C14B  F0FE         	movff	arp_probe@err+2,?_arp_probe+2
 13726  00126E  0012               	return		;funcret
 13727  001270                     __end_of_arp_probe:
 13728                           	opt stack 0
 13729                           tblptru	equ	0xFF8
 13730                           tblptrh	equ	0xFF7
 13731                           tblptrl	equ	0xFF6
 13732                           tablat	equ	0xFF5
 13733                           prodh	equ	0xFF4
 13734                           prodl	equ	0xFF3
 13735                           intcon	equ	0xFF2
 13736                           intcon3	equ	0xFF0
 13737                           indf0	equ	0xFEF
 13738                           postinc0	equ	0xFEE
 13739                           plusw0	equ	0xFEB
 13740                           fsr0h	equ	0xFEA
 13741                           fsr0l	equ	0xFE9
 13742                           wreg	equ	0xFE8
 13743                           postinc1	equ	0xFE6
 13744                           postdec1	equ	0xFE5
 13745                           plusw1	equ	0xFE3
 13746                           fsr1h	equ	0xFE2
 13747                           fsr1l	equ	0xFE1
 13748                           indf2	equ	0xFDF
 13749                           postinc2	equ	0xFDE
 13750                           postdec2	equ	0xFDD
 13751                           plusw2	equ	0xFDB
 13752                           fsr2h	equ	0xFDA
 13753                           fsr2l	equ	0xFD9
 13754                           status	equ	0xFD8
 13755                           
 13756 ;; *************** function _rand *****************
 13757 ;; Defined at:
 13758 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\rand.c"
 13759 ;; Parameters:    Size  Location     Type
 13760 ;;		None
 13761 ;; Auto vars:     Size  Location     Type
 13762 ;;		None
 13763 ;; Return value:  Size  Location     Type
 13764 ;;                  2   12[BANK0 ] int 
 13765 ;; Registers used:
 13766 ;;		wreg, status,2, status,0, cstack
 13767 ;; Tracked objects:
 13768 ;;		On entry : 0/0
 13769 ;;		On exit  : 0/0
 13770 ;;		Unchanged: 0/0
 13771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13772 ;;      Params:         0       2       0       0       0       0       0       0       0
 13773 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13774 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13775 ;;      Totals:         0       2       0       0       0       0       0       0       0
 13776 ;;Total ram usage:        2 bytes
 13777 ;; Hardware stack levels used:    1
 13778 ;; Hardware stack levels required when called:    5
 13779 ;; This function calls:
 13780 ;;		___lmul
 13781 ;; This function is called by:
 13782 ;;		_arp_probe
 13783 ;; This function uses a non-reentrant model
 13784 ;;
 13785                           
 13786                           	psect	text48
 13787  00429E                     __ptext48:
 13788                           	opt stack 0
 13789  00429E                     _rand:
 13790                           	opt stack 22
 13791                           
 13792                           ;incstack = 0
 13793  00429E  C049  F060         	movff	_randx,___lmul@multiplier
 13794  0042A2  C04A  F061         	movff	_randx+1,___lmul@multiplier+1
 13795  0042A6  C04B  F062         	movff	_randx+2,___lmul@multiplier+2
 13796  0042AA  C04C  F063         	movff	_randx+3,___lmul@multiplier+3
 13797  0042AE  0E6D               	movlw	109
 13798  0042B0  0100               	movlb	0	; () banked
 13799  0042B2  6F64               	movwf	___lmul@multiplicand& (0+255),b
 13800  0042B4  0E4E               	movlw	78
 13801  0042B6  6F65               	movwf	(___lmul@multiplicand+1)& (0+255),b
 13802  0042B8  0EC6               	movlw	198
 13803  0042BA  6F66               	movwf	(___lmul@multiplicand+2)& (0+255),b
 13804  0042BC  0E41               	movlw	65
 13805  0042BE  6F67               	movwf	(___lmul@multiplicand+3)& (0+255),b
 13806  0042C0  EC23  F021         	call	___lmul	;wreg free
 13807  0042C4  C060  F049         	movff	?___lmul,_randx
 13808  0042C8  C061  F04A         	movff	?___lmul+1,_randx+1
 13809  0042CC  C062  F04B         	movff	?___lmul+2,_randx+2
 13810  0042D0  C063  F04C         	movff	?___lmul+3,_randx+3
 13811  0042D4  0E39               	movlw	57
 13812  0042D6  2649               	addwf	_randx,f,c
 13813  0042D8  0E30               	movlw	48
 13814  0042DA  224A               	addwfc	_randx+1,f,c
 13815  0042DC  0E00               	movlw	0
 13816  0042DE  224B               	addwfc	_randx+2,f,c
 13817  0042E0  0E00               	movlw	0
 13818  0042E2  224C               	addwfc	_randx+3,f,c
 13819  0042E4  0EFF               	movlw	255
 13820  0042E6  144B               	andwf	_randx+2,w,c
 13821  0042E8  0100               	movlb	0	; () banked
 13822  0042EA  6F6C               	movwf	?_rand& (0+255),b
 13823  0042EC  0E7F               	movlw	127
 13824  0042EE  144C               	andwf	_randx+3,w,c
 13825  0042F0  6F6D               	movwf	(?_rand+1)& (0+255),b
 13826  0042F2  0012               	return	
 13827  0042F4                     __end_of_rand:
 13828                           	opt stack 0
 13829                           tblptru	equ	0xFF8
 13830                           tblptrh	equ	0xFF7
 13831                           tblptrl	equ	0xFF6
 13832                           tablat	equ	0xFF5
 13833                           prodh	equ	0xFF4
 13834                           prodl	equ	0xFF3
 13835                           intcon	equ	0xFF2
 13836                           intcon3	equ	0xFF0
 13837                           indf0	equ	0xFEF
 13838                           postinc0	equ	0xFEE
 13839                           plusw0	equ	0xFEB
 13840                           fsr0h	equ	0xFEA
 13841                           fsr0l	equ	0xFE9
 13842                           wreg	equ	0xFE8
 13843                           postinc1	equ	0xFE6
 13844                           postdec1	equ	0xFE5
 13845                           plusw1	equ	0xFE3
 13846                           fsr1h	equ	0xFE2
 13847                           fsr1l	equ	0xFE1
 13848                           indf2	equ	0xFDF
 13849                           postinc2	equ	0xFDE
 13850                           postdec2	equ	0xFDD
 13851                           plusw2	equ	0xFDB
 13852                           fsr2h	equ	0xFDA
 13853                           fsr2l	equ	0xFD9
 13854                           status	equ	0xFD8
 13855                           
 13856 ;; *************** function ___lmul *****************
 13857 ;; Defined at:
 13858 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 13859 ;; Parameters:    Size  Location     Type
 13860 ;;  multiplier      4    0[BANK0 ] unsigned long 
 13861 ;;  multiplicand    4    4[BANK0 ] unsigned long 
 13862 ;; Auto vars:     Size  Location     Type
 13863 ;;  product         4    8[BANK0 ] unsigned long 
 13864 ;; Return value:  Size  Location     Type
 13865 ;;                  4    0[BANK0 ] unsigned long 
 13866 ;; Registers used:
 13867 ;;		wreg, status,2, status,0
 13868 ;; Tracked objects:
 13869 ;;		On entry : 0/0
 13870 ;;		On exit  : 0/0
 13871 ;;		Unchanged: 0/0
 13872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13873 ;;      Params:         0       8       0       0       0       0       0       0       0
 13874 ;;      Locals:         0       4       0       0       0       0       0       0       0
 13875 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13876 ;;      Totals:         0      12       0       0       0       0       0       0       0
 13877 ;;Total ram usage:       12 bytes
 13878 ;; Hardware stack levels used:    1
 13879 ;; Hardware stack levels required when called:    4
 13880 ;; This function calls:
 13881 ;;		Nothing
 13882 ;; This function is called by:
 13883 ;;		_rand
 13884 ;; This function uses a non-reentrant model
 13885 ;;
 13886                           
 13887                           	psect	text49
 13888  004246                     __ptext49:
 13889                           	opt stack 0
 13890  004246                     ___lmul:
 13891                           	opt stack 22
 13892                           
 13893                           ; BSR set to: 0
 13894                           ;incstack = 0
 13895  004246  0E00               	movlw	0
 13896  004248  0100               	movlb	0	; () banked
 13897  00424A  6F68               	movwf	___lmul@product& (0+255),b
 13898  00424C  0E00               	movlw	0
 13899  00424E  6F69               	movwf	(___lmul@product+1)& (0+255),b
 13900  004250  0E00               	movlw	0
 13901  004252  6F6A               	movwf	(___lmul@product+2)& (0+255),b
 13902  004254  0E00               	movlw	0
 13903  004256  6F6B               	movwf	(___lmul@product+3)& (0+255),b
 13904  004258                     
 13905                           ; BSR set to: 0
 13906                           
 13907                           ; BSR set to: 0
 13908  004258  A160               	btfss	___lmul@multiplier& (0+255),0,b
 13909  00425A  D008               	goto	l1139
 13910                           
 13911                           ; BSR set to: 0
 13912  00425C  5164               	movf	___lmul@multiplicand& (0+255),w,b
 13913  00425E  2768               	addwf	___lmul@product& (0+255),f,b
 13914  004260  5165               	movf	(___lmul@multiplicand+1)& (0+255),w,b
 13915  004262  2369               	addwfc	(___lmul@product+1)& (0+255),f,b
 13916  004264  5166               	movf	(___lmul@multiplicand+2)& (0+255),w,b
 13917  004266  236A               	addwfc	(___lmul@product+2)& (0+255),f,b
 13918  004268  5167               	movf	(___lmul@multiplicand+3)& (0+255),w,b
 13919  00426A  236B               	addwfc	(___lmul@product+3)& (0+255),f,b
 13920  00426C                     l1139:
 13921                           
 13922                           ; BSR set to: 0
 13923                           
 13924                           ; BSR set to: 0
 13925  00426C  90D8               	bcf	status,0,c
 13926  00426E  3764               	rlcf	___lmul@multiplicand& (0+255),f,b
 13927  004270  3765               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
 13928  004272  3766               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
 13929  004274  3767               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
 13930                           
 13931                           ; BSR set to: 0
 13932  004276  90D8               	bcf	status,0,c
 13933  004278  3363               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
 13934  00427A  3362               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
 13935  00427C  3361               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
 13936  00427E  3360               	rrcf	___lmul@multiplier& (0+255),f,b
 13937  004280  5160               	movf	___lmul@multiplier& (0+255),w,b
 13938  004282  1161               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
 13939  004284  1162               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
 13940  004286  1163               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
 13941  004288  A4D8               	btfss	status,2,c
 13942  00428A  D7E6               	goto	l1138
 13943                           
 13944                           ; BSR set to: 0
 13945  00428C  C068  F060         	movff	___lmul@product,?___lmul
 13946  004290  C069  F061         	movff	___lmul@product+1,?___lmul+1
 13947  004294  C06A  F062         	movff	___lmul@product+2,?___lmul+2
 13948  004298  C06B  F063         	movff	___lmul@product+3,?___lmul+3
 13949                           
 13950                           ; BSR set to: 0
 13951  00429C  0012               	return		;funcret
 13952  00429E                     __end_of___lmul:
 13953                           	opt stack 0
 13954                           tblptru	equ	0xFF8
 13955                           tblptrh	equ	0xFF7
 13956                           tblptrl	equ	0xFF6
 13957                           tablat	equ	0xFF5
 13958                           prodh	equ	0xFF4
 13959                           prodl	equ	0xFF3
 13960                           intcon	equ	0xFF2
 13961                           intcon3	equ	0xFF0
 13962                           indf0	equ	0xFEF
 13963                           postinc0	equ	0xFEE
 13964                           plusw0	equ	0xFEB
 13965                           fsr0h	equ	0xFEA
 13966                           fsr0l	equ	0xFE9
 13967                           wreg	equ	0xFE8
 13968                           postinc1	equ	0xFE6
 13969                           postdec1	equ	0xFE5
 13970                           plusw1	equ	0xFE3
 13971                           fsr1h	equ	0xFE2
 13972                           fsr1l	equ	0xFE1
 13973                           indf2	equ	0xFDF
 13974                           postinc2	equ	0xFDE
 13975                           postdec2	equ	0xFDD
 13976                           plusw2	equ	0xFDB
 13977                           fsr2h	equ	0xFDA
 13978                           fsr2l	equ	0xFD9
 13979                           status	equ	0xFD8
 13980                           
 13981 ;; *************** function _ipv4_setToAllZero *****************
 13982 ;; Defined at:
 13983 ;;		line 314 in file "src/stack/protocols/ipv4.c"
 13984 ;; Parameters:    Size  Location     Type
 13985 ;;  ip              2    0[BANK0 ] PTR struct ipv4_address
 13986 ;;		 -> arp_init@ip(4), arp_probe@ipSender(4), 
 13987 ;; Auto vars:     Size  Location     Type
 13988 ;;  i               1    2[BANK0 ] unsigned char 
 13989 ;; Return value:  Size  Location     Type
 13990 ;;                  1    wreg      void 
 13991 ;; Registers used:
 13992 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13993 ;; Tracked objects:
 13994 ;;		On entry : 0/0
 13995 ;;		On exit  : 0/0
 13996 ;;		Unchanged: 0/0
 13997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13998 ;;      Params:         0       2       0       0       0       0       0       0       0
 13999 ;;      Locals:         0       1       0       0       0       0       0       0       0
 14000 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14001 ;;      Totals:         0       3       0       0       0       0       0       0       0
 14002 ;;Total ram usage:        3 bytes
 14003 ;; Hardware stack levels used:    1
 14004 ;; Hardware stack levels required when called:    4
 14005 ;; This function calls:
 14006 ;;		Nothing
 14007 ;; This function is called by:
 14008 ;;		_arp_probe
 14009 ;;		_arp_init
 14010 ;; This function uses a non-reentrant model
 14011 ;;
 14012                           
 14013                           	psect	text50
 14014  004B18                     __ptext50:
 14015                           	opt stack 0
 14016  004B18                     _ipv4_setToAllZero:
 14017                           	opt stack 24
 14018                           
 14019                           ;ipv4.c: 315: for (uint8_t i = 0; i < 4; i++) {
 14020                           
 14021                           ; BSR set to: 0
 14022                           ;incstack = 0
 14023  004B18  0E00               	movlw	0
 14024  004B1A  0100               	movlb	0	; () banked
 14025  004B1C  6F62               	movwf	ipv4_setToAllZero@i& (0+255),b
 14026  004B1E                     l8804:
 14027                           
 14028                           ; BSR set to: 0
 14029  004B1E  0E03               	movlw	3
 14030  004B20  6562               	cpfsgt	ipv4_setToAllZero@i& (0+255),b
 14031  004B22  D001               	goto	l1113
 14032  004B24  0012               	return	
 14033  004B26                     l1113:
 14034                           
 14035                           ; BSR set to: 0
 14036                           ;ipv4.c: 316: ip->address[0] = 0x00;
 14037                           
 14038                           ; BSR set to: 0
 14039  004B26  C060  FFD9         	movff	ipv4_setToAllZero@ip,fsr2l
 14040  004B2A  C061  FFDA         	movff	ipv4_setToAllZero@ip+1,fsr2h
 14041  004B2E  0E00               	movlw	0
 14042  004B30  6EDF               	movwf	indf2,c
 14043                           
 14044                           ; BSR set to: 0
 14045  004B32  2B62               	incf	ipv4_setToAllZero@i& (0+255),f,b
 14046  004B34  D7F4               	goto	l8804
 14047  004B36                     __end_of_ipv4_setToAllZero:
 14048                           	opt stack 0
 14049                           tblptru	equ	0xFF8
 14050                           tblptrh	equ	0xFF7
 14051                           tblptrl	equ	0xFF6
 14052                           tablat	equ	0xFF5
 14053                           prodh	equ	0xFF4
 14054                           prodl	equ	0xFF3
 14055                           intcon	equ	0xFF2
 14056                           intcon3	equ	0xFF0
 14057                           indf0	equ	0xFEF
 14058                           postinc0	equ	0xFEE
 14059                           plusw0	equ	0xFEB
 14060                           fsr0h	equ	0xFEA
 14061                           fsr0l	equ	0xFE9
 14062                           wreg	equ	0xFE8
 14063                           postinc1	equ	0xFE6
 14064                           postdec1	equ	0xFE5
 14065                           plusw1	equ	0xFE3
 14066                           fsr1h	equ	0xFE2
 14067                           fsr1l	equ	0xFE1
 14068                           indf2	equ	0xFDF
 14069                           postinc2	equ	0xFDE
 14070                           postdec2	equ	0xFDD
 14071                           plusw2	equ	0xFDB
 14072                           fsr2h	equ	0xFDA
 14073                           fsr2l	equ	0xFD9
 14074                           status	equ	0xFD8
 14075                           
 14076 ;; *************** function _ipv4_getPreliminaryIPSourceAddress *****************
 14077 ;; Defined at:
 14078 ;;		line 235 in file "src/stack/protocols/ipv4.c"
 14079 ;; Parameters:    Size  Location     Type
 14080 ;;		None
 14081 ;; Auto vars:     Size  Location     Type
 14082 ;;		None
 14083 ;; Return value:  Size  Location     Type
 14084 ;;                  4    0[BANK0 ] struct ipv4_address
 14085 ;; Registers used:
 14086 ;;		None
 14087 ;; Tracked objects:
 14088 ;;		On entry : 0/0
 14089 ;;		On exit  : 0/0
 14090 ;;		Unchanged: 0/0
 14091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14092 ;;      Params:         0       4       0       0       0       0       0       0       0
 14093 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14094 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14095 ;;      Totals:         0       4       0       0       0       0       0       0       0
 14096 ;;Total ram usage:        4 bytes
 14097 ;; Hardware stack levels used:    1
 14098 ;; Hardware stack levels required when called:    4
 14099 ;; This function calls:
 14100 ;;		Nothing
 14101 ;; This function is called by:
 14102 ;;		_arp_probe
 14103 ;;		_arp_background
 14104 ;; This function uses a non-reentrant model
 14105 ;;
 14106                           
 14107                           	psect	text51
 14108  004BC4                     __ptext51:
 14109                           	opt stack 0
 14110  004BC4                     _ipv4_getPreliminaryIPSourceAddress:
 14111                           	opt stack 24
 14112                           
 14113                           ;ipv4.c: 236: return ipPreliminarySource;
 14114                           
 14115                           ; BSR set to: 0
 14116                           ;incstack = 0
 14117  004BC4  C1D7  F060         	movff	_ipPreliminarySource,?_ipv4_getPreliminaryIPSourceAddress
 14118  004BC8  C1D8  F061         	movff	_ipPreliminarySource+1,?_ipv4_getPreliminaryIPSourceAddress+1
 14119  004BCC  C1D9  F062         	movff	_ipPreliminarySource+2,?_ipv4_getPreliminaryIPSourceAddress+2
 14120  004BD0  C1DA  F063         	movff	_ipPreliminarySource+3,?_ipv4_getPreliminaryIPSourceAddress+3
 14121  004BD4  0012               	return		;funcret
 14122  004BD6                     __end_of_ipv4_getPreliminaryIPSourceAddress:
 14123                           	opt stack 0
 14124                           tblptru	equ	0xFF8
 14125                           tblptrh	equ	0xFF7
 14126                           tblptrl	equ	0xFF6
 14127                           tablat	equ	0xFF5
 14128                           prodh	equ	0xFF4
 14129                           prodl	equ	0xFF3
 14130                           intcon	equ	0xFF2
 14131                           intcon3	equ	0xFF0
 14132                           indf0	equ	0xFEF
 14133                           postinc0	equ	0xFEE
 14134                           plusw0	equ	0xFEB
 14135                           fsr0h	equ	0xFEA
 14136                           fsr0l	equ	0xFE9
 14137                           wreg	equ	0xFE8
 14138                           postinc1	equ	0xFE6
 14139                           postdec1	equ	0xFE5
 14140                           plusw1	equ	0xFE3
 14141                           fsr1h	equ	0xFE2
 14142                           fsr1l	equ	0xFE1
 14143                           indf2	equ	0xFDF
 14144                           postinc2	equ	0xFDE
 14145                           postdec2	equ	0xFDD
 14146                           plusw2	equ	0xFDB
 14147                           fsr2h	equ	0xFDA
 14148                           fsr2l	equ	0xFD9
 14149                           status	equ	0xFD8
 14150                           
 14151 ;; *************** function _ipAdressToString *****************
 14152 ;; Defined at:
 14153 ;;		line 162 in file "src/system/uart.c"
 14154 ;; Parameters:    Size  Location     Type
 14155 ;;  ip              4   19[BANK0 ] struct ipv4_address
 14156 ;; Auto vars:     Size  Location     Type
 14157 ;;  i               1   40[BANK0 ] unsigned char 
 14158 ;;  hundreds        4   35[BANK0 ] unsigned char [4]
 14159 ;;  tens            4   31[BANK0 ] unsigned char [4]
 14160 ;;  ones            4   27[BANK0 ] unsigned char [4]
 14161 ;;  pointer         1   39[BANK0 ] unsigned char 
 14162 ;; Return value:  Size  Location     Type
 14163 ;;                  2   19[BANK0 ] PTR unsigned char 
 14164 ;; Registers used:
 14165 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14166 ;; Tracked objects:
 14167 ;;		On entry : 0/0
 14168 ;;		On exit  : 0/0
 14169 ;;		Unchanged: 0/0
 14170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14171 ;;      Params:         0       4       0       0       0       0       0       0       0
 14172 ;;      Locals:         0      14       0       0       0       0       0       0       0
 14173 ;;      Temps:          0       4       0       0       0       0       0       0       0
 14174 ;;      Totals:         0      22       0       0       0       0       0       0       0
 14175 ;;Total ram usage:       22 bytes
 14176 ;; Hardware stack levels used:    1
 14177 ;; Hardware stack levels required when called:    5
 14178 ;; This function calls:
 14179 ;;		___lwdiv
 14180 ;;		___lwmod
 14181 ;; This function is called by:
 14182 ;;		_arp_handleNewPacket
 14183 ;;		_arp_sendReply
 14184 ;;		_arp_probe
 14185 ;;		_ipv4_handleNewPacket
 14186 ;;		_ipv4_setIPSourceAddress
 14187 ;;		_ipv4_background
 14188 ;;		_arpEntryToString
 14189 ;; This function uses a non-reentrant model
 14190 ;;
 14191                           
 14192                           	psect	text52
 14193  00201A                     __ptext52:
 14194                           	opt stack 0
 14195  00201A                     _ipAdressToString:
 14196                           	opt stack 24
 14197                           
 14198                           ;uart.c: 163: char static address [] = "???.???.???.???";
 14199                           ;uart.c: 164: uint8_t hundreds[4];
 14200                           ;uart.c: 165: uint8_t tens[4];
 14201                           ;uart.c: 166: uint8_t ones[4];
 14202                           ;uart.c: 167: uint8_t pointer = 0;
 14203                           
 14204                           ;incstack = 0
 14205  00201A  0E00               	movlw	0
 14206  00201C  0100               	movlb	0	; () banked
 14207  00201E  6F87               	movwf	ipAdressToString@pointer& (0+255),b
 14208                           
 14209                           ;uart.c: 169: for (uint8_t i = 0; i < 4; i++) {
 14210  002020  0E00               	movlw	0
 14211  002022  6F88               	movwf	ipAdressToString@i& (0+255),b
 14212  002024                     l8360:
 14213                           
 14214                           ; BSR set to: 0
 14215  002024  0E03               	movlw	3
 14216  002026  6588               	cpfsgt	ipAdressToString@i& (0+255),b
 14217  002028  D001               	goto	l816
 14218  00202A  D0DF               	goto	u9280
 14219  00202C                     l816:
 14220                           
 14221                           ; BSR set to: 0
 14222                           ;uart.c: 171: hundreds[i] = ip.address[i] / 100u;
 14223                           
 14224                           ; BSR set to: 0
 14225  00202C  5188               	movf	ipAdressToString@i& (0+255),w,b
 14226  00202E  0D01               	mullw	1
 14227  002030  0E83               	movlw	low ipAdressToString@hundreds
 14228  002032  24F3               	addwf	prodl,w,c
 14229  002034  6ED9               	movwf	fsr2l,c
 14230  002036  0E00               	movlw	high ipAdressToString@hundreds
 14231  002038  20F4               	addwfc	prodh,w,c
 14232  00203A  6EDA               	movwf	fsr2h,c
 14233  00203C  5188               	movf	ipAdressToString@i& (0+255),w,b
 14234  00203E  0D01               	mullw	1
 14235  002040  0E73               	movlw	low ipAdressToString@ip
 14236  002042  24F3               	addwf	prodl,w,c
 14237  002044  6EE1               	movwf	fsr1l,c
 14238  002046  0E00               	movlw	high ipAdressToString@ip
 14239  002048  20F4               	addwfc	prodh,w,c
 14240  00204A  6EE2               	movwf	fsr1h,c
 14241  00204C  50E7               	movf	indf1,w,c
 14242  00204E  6F77               	movwf	??_ipAdressToString& (0+255),b
 14243  002050  5177               	movf	??_ipAdressToString& (0+255),w,b
 14244  002052  6F60               	movwf	___lwdiv@dividend& (0+255),b
 14245  002054  6B61               	clrf	(___lwdiv@dividend+1)& (0+255),b
 14246  002056  0E00               	movlw	0
 14247  002058  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
 14248  00205A  0E64               	movlw	100
 14249  00205C  6F62               	movwf	___lwdiv@divisor& (0+255),b
 14250  00205E  ECA5  F021         	call	___lwdiv	;wreg free
 14251  002062  0100               	movlb	0	; () banked
 14252  002064  5160               	movf	?___lwdiv& (0+255),w,b
 14253  002066  6EDF               	movwf	indf2,c
 14254                           
 14255                           ;uart.c: 172: tens[i] = (ip.address[i] - hundreds[i]*100u) / 10u;
 14256  002068  5188               	movf	ipAdressToString@i& (0+255),w,b
 14257  00206A  0D01               	mullw	1
 14258  00206C  0E7F               	movlw	low ipAdressToString@tens
 14259  00206E  24F3               	addwf	prodl,w,c
 14260  002070  6ED9               	movwf	fsr2l,c
 14261  002072  0E00               	movlw	high ipAdressToString@tens
 14262  002074  20F4               	addwfc	prodh,w,c
 14263  002076  6EDA               	movwf	fsr2h,c
 14264  002078  5188               	movf	ipAdressToString@i& (0+255),w,b
 14265  00207A  0D01               	mullw	1
 14266  00207C  0E83               	movlw	low ipAdressToString@hundreds
 14267  00207E  24F3               	addwf	prodl,w,c
 14268  002080  6EE1               	movwf	fsr1l,c
 14269  002082  0E00               	movlw	high ipAdressToString@hundreds
 14270  002084  20F4               	addwfc	prodh,w,c
 14271  002086  6EE2               	movwf	fsr1h,c
 14272  002088  50E7               	movf	indf1,w,c
 14273  00208A  6F77               	movwf	??_ipAdressToString& (0+255),b
 14274  00208C  5177               	movf	??_ipAdressToString& (0+255),w,b
 14275  00208E  0D64               	mullw	100
 14276  002090  CFF3 F078          	movff	prodl,??_ipAdressToString+1
 14277  002094  CFF4 F079          	movff	prodh,??_ipAdressToString+2
 14278  002098  1F78               	comf	(??_ipAdressToString+1)& (0+255),f,b
 14279  00209A  1F79               	comf	(??_ipAdressToString+2)& (0+255),f,b
 14280  00209C  4B78               	infsnz	(??_ipAdressToString+1)& (0+255),f,b
 14281  00209E  2B79               	incf	(??_ipAdressToString+2)& (0+255),f,b
 14282  0020A0  5188               	movf	ipAdressToString@i& (0+255),w,b
 14283  0020A2  0D01               	mullw	1
 14284  0020A4  0E73               	movlw	low ipAdressToString@ip
 14285  0020A6  24F3               	addwf	prodl,w,c
 14286  0020A8  6EE1               	movwf	fsr1l,c
 14287  0020AA  0E00               	movlw	high ipAdressToString@ip
 14288  0020AC  20F4               	addwfc	prodh,w,c
 14289  0020AE  6EE2               	movwf	fsr1h,c
 14290  0020B0  50E7               	movf	indf1,w,c
 14291  0020B2  6F7A               	movwf	(??_ipAdressToString+3)& (0+255),b
 14292  0020B4  517A               	movf	(??_ipAdressToString+3)& (0+255),w,b
 14293  0020B6  2578               	addwf	(??_ipAdressToString+1)& (0+255),w,b
 14294  0020B8  6F60               	movwf	___lwdiv@dividend& (0+255),b
 14295  0020BA  0E00               	movlw	0
 14296  0020BC  2179               	addwfc	(??_ipAdressToString+2)& (0+255),w,b
 14297  0020BE  6F61               	movwf	(___lwdiv@dividend+1)& (0+255),b
 14298  0020C0  0E00               	movlw	0
 14299  0020C2  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
 14300  0020C4  0E0A               	movlw	10
 14301  0020C6  6F62               	movwf	___lwdiv@divisor& (0+255),b
 14302  0020C8  ECA5  F021         	call	___lwdiv	;wreg free
 14303  0020CC  0100               	movlb	0	; () banked
 14304  0020CE  5160               	movf	?___lwdiv& (0+255),w,b
 14305  0020D0  6EDF               	movwf	indf2,c
 14306                           
 14307                           ;uart.c: 173: ones[i] = ip.address[i] % 10u;
 14308  0020D2  5188               	movf	ipAdressToString@i& (0+255),w,b
 14309  0020D4  0D01               	mullw	1
 14310  0020D6  0E7B               	movlw	low ipAdressToString@ones
 14311  0020D8  24F3               	addwf	prodl,w,c
 14312  0020DA  6ED9               	movwf	fsr2l,c
 14313  0020DC  0E00               	movlw	high ipAdressToString@ones
 14314  0020DE  20F4               	addwfc	prodh,w,c
 14315  0020E0  6EDA               	movwf	fsr2h,c
 14316  0020E2  5188               	movf	ipAdressToString@i& (0+255),w,b
 14317  0020E4  0D01               	mullw	1
 14318  0020E6  0E73               	movlw	low ipAdressToString@ip
 14319  0020E8  24F3               	addwf	prodl,w,c
 14320  0020EA  6EE1               	movwf	fsr1l,c
 14321  0020EC  0E00               	movlw	high ipAdressToString@ip
 14322  0020EE  20F4               	addwfc	prodh,w,c
 14323  0020F0  6EE2               	movwf	fsr1h,c
 14324  0020F2  50E7               	movf	indf1,w,c
 14325  0020F4  6F77               	movwf	??_ipAdressToString& (0+255),b
 14326  0020F6  5177               	movf	??_ipAdressToString& (0+255),w,b
 14327  0020F8  6F6E               	movwf	___lwmod@dividend& (0+255),b
 14328  0020FA  6B6F               	clrf	(___lwmod@dividend+1)& (0+255),b
 14329  0020FC  0E00               	movlw	0
 14330  0020FE  6F71               	movwf	(___lwmod@divisor+1)& (0+255),b
 14331  002100  0E0A               	movlw	10
 14332  002102  6F70               	movwf	___lwmod@divisor& (0+255),b
 14333  002104  EC04  F023         	call	___lwmod	;wreg free
 14334  002108  0100               	movlb	0	; () banked
 14335  00210A  516E               	movf	?___lwmod& (0+255),w,b
 14336  00210C  6EDF               	movwf	indf2,c
 14337                           
 14338                           ; BSR set to: 0
 14339                           ;uart.c: 175: if (hundreds[i] > 0)
 14340  00210E  5188               	movf	ipAdressToString@i& (0+255),w,b
 14341  002110  0D01               	mullw	1
 14342  002112  0E83               	movlw	low ipAdressToString@hundreds
 14343  002114  24F3               	addwf	prodl,w,c
 14344  002116  6ED9               	movwf	fsr2l,c
 14345  002118  0E00               	movlw	high ipAdressToString@hundreds
 14346  00211A  20F4               	addwfc	prodh,w,c
 14347  00211C  6EDA               	movwf	fsr2h,c
 14348  00211E  50DF               	movf	indf2,w,c
 14349  002120  B4D8               	btfsc	status,2,c
 14350  002122  D014               	goto	l818
 14351                           
 14352                           ; BSR set to: 0
 14353                           ;uart.c: 176: address[pointer++] = hundreds[i] + 0x30;
 14354  002124  5187               	movf	ipAdressToString@pointer& (0+255),w,b
 14355  002126  0D01               	mullw	1
 14356  002128  0ED9               	movlw	low ipAdressToString@address
 14357  00212A  24F3               	addwf	prodl,w,c
 14358  00212C  6ED9               	movwf	fsr2l,c
 14359  00212E  0E02               	movlw	high ipAdressToString@address
 14360  002130  20F4               	addwfc	prodh,w,c
 14361  002132  6EDA               	movwf	fsr2h,c
 14362  002134  5188               	movf	ipAdressToString@i& (0+255),w,b
 14363  002136  0D01               	mullw	1
 14364  002138  0E83               	movlw	low ipAdressToString@hundreds
 14365  00213A  24F3               	addwf	prodl,w,c
 14366  00213C  6EE1               	movwf	fsr1l,c
 14367  00213E  0E00               	movlw	high ipAdressToString@hundreds
 14368  002140  20F4               	addwfc	prodh,w,c
 14369  002142  6EE2               	movwf	fsr1h,c
 14370  002144  50E7               	movf	indf1,w,c
 14371  002146  0F30               	addlw	48
 14372  002148  6EDF               	movwf	indf2,c
 14373                           
 14374                           ; BSR set to: 0
 14375  00214A  2B87               	incf	ipAdressToString@pointer& (0+255),f,b
 14376  00214C                     l818:
 14377                           
 14378                           ; BSR set to: 0
 14379                           ;uart.c: 177: if ((tens[i] > 0) || hundreds[i] > 0)
 14380                           
 14381                           ; BSR set to: 0
 14382  00214C  5188               	movf	ipAdressToString@i& (0+255),w,b
 14383  00214E  0D01               	mullw	1
 14384  002150  0E7F               	movlw	low ipAdressToString@tens
 14385  002152  24F3               	addwf	prodl,w,c
 14386  002154  6ED9               	movwf	fsr2l,c
 14387  002156  0E00               	movlw	high ipAdressToString@tens
 14388  002158  20F4               	addwfc	prodh,w,c
 14389  00215A  6EDA               	movwf	fsr2h,c
 14390  00215C  50DF               	movf	indf2,w,c
 14391  00215E  A4D8               	btfss	status,2,c
 14392  002160  D00B               	goto	u9260
 14393                           
 14394                           ; BSR set to: 0
 14395  002162  5188               	movf	ipAdressToString@i& (0+255),w,b
 14396  002164  0D01               	mullw	1
 14397  002166  0E83               	movlw	low ipAdressToString@hundreds
 14398  002168  24F3               	addwf	prodl,w,c
 14399  00216A  6ED9               	movwf	fsr2l,c
 14400  00216C  0E00               	movlw	high ipAdressToString@hundreds
 14401  00216E  20F4               	addwfc	prodh,w,c
 14402  002170  6EDA               	movwf	fsr2h,c
 14403  002172  50DF               	movf	indf2,w,c
 14404  002174  B4D8               	btfsc	status,2,c
 14405  002176  D014               	goto	l819
 14406  002178                     u9260:
 14407                           
 14408                           ; BSR set to: 0
 14409                           ;uart.c: 178: address[pointer++] = tens[i] + 0x30;
 14410                           
 14411                           ; BSR set to: 0
 14412  002178  5187               	movf	ipAdressToString@pointer& (0+255),w,b
 14413  00217A  0D01               	mullw	1
 14414  00217C  0ED9               	movlw	low ipAdressToString@address
 14415  00217E  24F3               	addwf	prodl,w,c
 14416  002180  6ED9               	movwf	fsr2l,c
 14417  002182  0E02               	movlw	high ipAdressToString@address
 14418  002184  20F4               	addwfc	prodh,w,c
 14419  002186  6EDA               	movwf	fsr2h,c
 14420  002188  5188               	movf	ipAdressToString@i& (0+255),w,b
 14421  00218A  0D01               	mullw	1
 14422  00218C  0E7F               	movlw	low ipAdressToString@tens
 14423  00218E  24F3               	addwf	prodl,w,c
 14424  002190  6EE1               	movwf	fsr1l,c
 14425  002192  0E00               	movlw	high ipAdressToString@tens
 14426  002194  20F4               	addwfc	prodh,w,c
 14427  002196  6EE2               	movwf	fsr1h,c
 14428  002198  50E7               	movf	indf1,w,c
 14429  00219A  0F30               	addlw	48
 14430  00219C  6EDF               	movwf	indf2,c
 14431                           
 14432                           ; BSR set to: 0
 14433  00219E  2B87               	incf	ipAdressToString@pointer& (0+255),f,b
 14434  0021A0                     l819:
 14435                           
 14436                           ; BSR set to: 0
 14437                           ;uart.c: 179: address[pointer++] = ones[i] + 0x30;
 14438                           
 14439                           ; BSR set to: 0
 14440  0021A0  5187               	movf	ipAdressToString@pointer& (0+255),w,b
 14441  0021A2  0D01               	mullw	1
 14442  0021A4  0ED9               	movlw	low ipAdressToString@address
 14443  0021A6  24F3               	addwf	prodl,w,c
 14444  0021A8  6ED9               	movwf	fsr2l,c
 14445  0021AA  0E02               	movlw	high ipAdressToString@address
 14446  0021AC  20F4               	addwfc	prodh,w,c
 14447  0021AE  6EDA               	movwf	fsr2h,c
 14448  0021B0  5188               	movf	ipAdressToString@i& (0+255),w,b
 14449  0021B2  0D01               	mullw	1
 14450  0021B4  0E7B               	movlw	low ipAdressToString@ones
 14451  0021B6  24F3               	addwf	prodl,w,c
 14452  0021B8  6EE1               	movwf	fsr1l,c
 14453  0021BA  0E00               	movlw	high ipAdressToString@ones
 14454  0021BC  20F4               	addwfc	prodh,w,c
 14455  0021BE  6EE2               	movwf	fsr1h,c
 14456  0021C0  50E7               	movf	indf1,w,c
 14457  0021C2  0F30               	addlw	48
 14458  0021C4  6EDF               	movwf	indf2,c
 14459  0021C6  2B87               	incf	ipAdressToString@pointer& (0+255),f,b
 14460                           
 14461                           ; BSR set to: 0
 14462                           ;uart.c: 180: if (i != 3)
 14463  0021C8  0E03               	movlw	3
 14464  0021CA  1988               	xorwf	ipAdressToString@i& (0+255),w,b
 14465  0021CC  B4D8               	btfsc	status,2,c
 14466  0021CE  D00B               	goto	l822
 14467                           
 14468                           ; BSR set to: 0
 14469                           ;uart.c: 181: address[pointer++] = '.';
 14470  0021D0  5187               	movf	ipAdressToString@pointer& (0+255),w,b
 14471  0021D2  0D01               	mullw	1
 14472  0021D4  0ED9               	movlw	low ipAdressToString@address
 14473  0021D6  24F3               	addwf	prodl,w,c
 14474  0021D8  6ED9               	movwf	fsr2l,c
 14475  0021DA  0E02               	movlw	high ipAdressToString@address
 14476  0021DC  20F4               	addwfc	prodh,w,c
 14477  0021DE  6EDA               	movwf	fsr2h,c
 14478  0021E0  0E2E               	movlw	46
 14479  0021E2  6EDF               	movwf	indf2,c
 14480                           
 14481                           ; BSR set to: 0
 14482  0021E4  2B87               	incf	ipAdressToString@pointer& (0+255),f,b
 14483  0021E6                     l822:
 14484                           
 14485                           ; BSR set to: 0
 14486                           
 14487                           ; BSR set to: 0
 14488  0021E6  2B88               	incf	ipAdressToString@i& (0+255),f,b
 14489  0021E8  D71D               	goto	l8360
 14490  0021EA                     u9280:
 14491                           
 14492                           ; BSR set to: 0
 14493                           ;uart.c: 182: }
 14494                           ;uart.c: 183: address[pointer] = '\0';
 14495                           
 14496                           ; BSR set to: 0
 14497  0021EA  5187               	movf	ipAdressToString@pointer& (0+255),w,b
 14498  0021EC  0D01               	mullw	1
 14499  0021EE  0ED9               	movlw	low ipAdressToString@address
 14500  0021F0  24F3               	addwf	prodl,w,c
 14501  0021F2  6ED9               	movwf	fsr2l,c
 14502  0021F4  0E02               	movlw	high ipAdressToString@address
 14503  0021F6  20F4               	addwfc	prodh,w,c
 14504  0021F8  6EDA               	movwf	fsr2h,c
 14505  0021FA  0E00               	movlw	0
 14506  0021FC  6EDF               	movwf	indf2,c
 14507                           
 14508                           ; BSR set to: 0
 14509                           ;uart.c: 184: return address;
 14510  0021FE  0ED9               	movlw	low ipAdressToString@address
 14511  002200  6F73               	movwf	?_ipAdressToString& (0+255),b
 14512  002202  0E02               	movlw	high ipAdressToString@address
 14513  002204  6F74               	movwf	(?_ipAdressToString+1)& (0+255),b
 14514  002206  0012               	return	
 14515  002208                     __end_of_ipAdressToString:
 14516                           	opt stack 0
 14517                           tblptru	equ	0xFF8
 14518                           tblptrh	equ	0xFF7
 14519                           tblptrl	equ	0xFF6
 14520                           tablat	equ	0xFF5
 14521                           prodh	equ	0xFF4
 14522                           prodl	equ	0xFF3
 14523                           intcon	equ	0xFF2
 14524                           intcon3	equ	0xFF0
 14525                           indf0	equ	0xFEF
 14526                           postinc0	equ	0xFEE
 14527                           plusw0	equ	0xFEB
 14528                           fsr0h	equ	0xFEA
 14529                           fsr0l	equ	0xFE9
 14530                           wreg	equ	0xFE8
 14531                           indf1	equ	0xFE7
 14532                           postinc1	equ	0xFE6
 14533                           postdec1	equ	0xFE5
 14534                           plusw1	equ	0xFE3
 14535                           fsr1h	equ	0xFE2
 14536                           fsr1l	equ	0xFE1
 14537                           indf2	equ	0xFDF
 14538                           postinc2	equ	0xFDE
 14539                           postdec2	equ	0xFDD
 14540                           plusw2	equ	0xFDB
 14541                           fsr2h	equ	0xFDA
 14542                           fsr2l	equ	0xFD9
 14543                           status	equ	0xFD8
 14544                           
 14545 ;; *************** function ___lwmod *****************
 14546 ;; Defined at:
 14547 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 14548 ;; Parameters:    Size  Location     Type
 14549 ;;  dividend        2   14[BANK0 ] unsigned int 
 14550 ;;  divisor         2   16[BANK0 ] unsigned int 
 14551 ;; Auto vars:     Size  Location     Type
 14552 ;;  counter         1   18[BANK0 ] unsigned char 
 14553 ;; Return value:  Size  Location     Type
 14554 ;;                  2   14[BANK0 ] unsigned int 
 14555 ;; Registers used:
 14556 ;;		wreg, status,2, status,0
 14557 ;; Tracked objects:
 14558 ;;		On entry : 0/0
 14559 ;;		On exit  : 0/0
 14560 ;;		Unchanged: 0/0
 14561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14562 ;;      Params:         0       4       0       0       0       0       0       0       0
 14563 ;;      Locals:         0       1       0       0       0       0       0       0       0
 14564 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14565 ;;      Totals:         0       5       0       0       0       0       0       0       0
 14566 ;;Total ram usage:        5 bytes
 14567 ;; Hardware stack levels used:    1
 14568 ;; Hardware stack levels required when called:    4
 14569 ;; This function calls:
 14570 ;;		Nothing
 14571 ;; This function is called by:
 14572 ;;		_ipAdressToString
 14573 ;;		_arp_probe
 14574 ;; This function uses a non-reentrant model
 14575 ;;
 14576                           
 14577                           	psect	text53
 14578  004608                     __ptext53:
 14579                           	opt stack 0
 14580  004608                     ___lwmod:
 14581                           	opt stack 24
 14582                           
 14583                           ; BSR set to: 0
 14584                           ;incstack = 0
 14585  004608  0100               	movlb	0	; () banked
 14586  00460A  5170               	movf	___lwmod@divisor& (0+255),w,b
 14587  00460C  1171               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 14588  00460E  B4D8               	btfsc	status,2,c
 14589  004610  D018               	goto	l1559
 14590                           
 14591                           ; BSR set to: 0
 14592  004612  0E01               	movlw	1
 14593  004614  6F72               	movwf	___lwmod@counter& (0+255),b
 14594  004616  D004               	goto	l1554
 14595  004618                     
 14596                           ; BSR set to: 0
 14597                           
 14598                           ; BSR set to: 0
 14599  004618  90D8               	bcf	status,0,c
 14600  00461A  3770               	rlcf	___lwmod@divisor& (0+255),f,b
 14601  00461C  3771               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 14602  00461E  2B72               	incf	___lwmod@counter& (0+255),f,b
 14603  004620                     l1554:
 14604                           
 14605                           ; BSR set to: 0
 14606                           
 14607                           ; BSR set to: 0
 14608  004620  AF71               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 14609  004622  D7FA               	goto	l1555
 14610  004624                     u8980:
 14611                           
 14612                           ; BSR set to: 0
 14613                           
 14614                           ; BSR set to: 0
 14615                           
 14616                           ; BSR set to: 0
 14617  004624  5170               	movf	___lwmod@divisor& (0+255),w,b
 14618  004626  5D6E               	subwf	___lwmod@dividend& (0+255),w,b
 14619  004628  5171               	movf	(___lwmod@divisor+1)& (0+255),w,b
 14620  00462A  596F               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 14621  00462C  A0D8               	btfss	status,0,c
 14622  00462E  D004               	goto	l1558
 14623                           
 14624                           ; BSR set to: 0
 14625  004630  5170               	movf	___lwmod@divisor& (0+255),w,b
 14626  004632  5F6E               	subwf	___lwmod@dividend& (0+255),f,b
 14627  004634  5171               	movf	(___lwmod@divisor+1)& (0+255),w,b
 14628  004636  5B6F               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 14629  004638                     l1558:
 14630                           
 14631                           ; BSR set to: 0
 14632                           
 14633                           ; BSR set to: 0
 14634  004638  90D8               	bcf	status,0,c
 14635  00463A  3371               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 14636  00463C  3370               	rrcf	___lwmod@divisor& (0+255),f,b
 14637                           
 14638                           ; BSR set to: 0
 14639  00463E  2F72               	decfsz	___lwmod@counter& (0+255),f,b
 14640  004640  D7F1               	goto	u8980
 14641  004642                     l1559:
 14642                           
 14643                           ; BSR set to: 0
 14644                           
 14645                           ; BSR set to: 0
 14646  004642  C06E  F06E         	movff	___lwmod@dividend,?___lwmod
 14647  004646  C06F  F06F         	movff	___lwmod@dividend+1,?___lwmod+1
 14648                           
 14649                           ; BSR set to: 0
 14650  00464A  0012               	return		;funcret
 14651  00464C                     __end_of___lwmod:
 14652                           	opt stack 0
 14653                           tblptru	equ	0xFF8
 14654                           tblptrh	equ	0xFF7
 14655                           tblptrl	equ	0xFF6
 14656                           tablat	equ	0xFF5
 14657                           prodh	equ	0xFF4
 14658                           prodl	equ	0xFF3
 14659                           intcon	equ	0xFF2
 14660                           intcon3	equ	0xFF0
 14661                           indf0	equ	0xFEF
 14662                           postinc0	equ	0xFEE
 14663                           plusw0	equ	0xFEB
 14664                           fsr0h	equ	0xFEA
 14665                           fsr0l	equ	0xFE9
 14666                           wreg	equ	0xFE8
 14667                           indf1	equ	0xFE7
 14668                           postinc1	equ	0xFE6
 14669                           postdec1	equ	0xFE5
 14670                           plusw1	equ	0xFE3
 14671                           fsr1h	equ	0xFE2
 14672                           fsr1l	equ	0xFE1
 14673                           indf2	equ	0xFDF
 14674                           postinc2	equ	0xFDE
 14675                           postdec2	equ	0xFDD
 14676                           plusw2	equ	0xFDB
 14677                           fsr2h	equ	0xFDA
 14678                           fsr2l	equ	0xFD9
 14679                           status	equ	0xFD8
 14680                           
 14681 ;; *************** function ___lwdiv *****************
 14682 ;; Defined at:
 14683 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 14684 ;; Parameters:    Size  Location     Type
 14685 ;;  dividend        2    0[BANK0 ] unsigned int 
 14686 ;;  divisor         2    2[BANK0 ] unsigned int 
 14687 ;; Auto vars:     Size  Location     Type
 14688 ;;  quotient        2    5[BANK0 ] unsigned int 
 14689 ;;  counter         1    4[BANK0 ] unsigned char 
 14690 ;; Return value:  Size  Location     Type
 14691 ;;                  2    0[BANK0 ] unsigned int 
 14692 ;; Registers used:
 14693 ;;		wreg, status,2, status,0
 14694 ;; Tracked objects:
 14695 ;;		On entry : 0/0
 14696 ;;		On exit  : 0/0
 14697 ;;		Unchanged: 0/0
 14698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14699 ;;      Params:         0       4       0       0       0       0       0       0       0
 14700 ;;      Locals:         0       3       0       0       0       0       0       0       0
 14701 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14702 ;;      Totals:         0       7       0       0       0       0       0       0       0
 14703 ;;Total ram usage:        7 bytes
 14704 ;; Hardware stack levels used:    1
 14705 ;; Hardware stack levels required when called:    4
 14706 ;; This function calls:
 14707 ;;		Nothing
 14708 ;; This function is called by:
 14709 ;;		_ipAdressToString
 14710 ;; This function uses a non-reentrant model
 14711 ;;
 14712                           
 14713                           	psect	text54
 14714  00434A                     __ptext54:
 14715                           	opt stack 0
 14716  00434A                     ___lwdiv:
 14717                           	opt stack 24
 14718                           
 14719                           ; BSR set to: 0
 14720                           ;incstack = 0
 14721  00434A  0E00               	movlw	0
 14722  00434C  0100               	movlb	0	; () banked
 14723  00434E  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
 14724  004350  0E00               	movlw	0
 14725  004352  6F65               	movwf	___lwdiv@quotient& (0+255),b
 14726                           
 14727                           ; BSR set to: 0
 14728  004354  5162               	movf	___lwdiv@divisor& (0+255),w,b
 14729  004356  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 14730  004358  B4D8               	btfsc	status,2,c
 14731  00435A  D01C               	goto	l1549
 14732                           
 14733                           ; BSR set to: 0
 14734  00435C  0E01               	movlw	1
 14735  00435E  6F64               	movwf	___lwdiv@counter& (0+255),b
 14736  004360  D004               	goto	l1544
 14737  004362                     
 14738                           ; BSR set to: 0
 14739                           
 14740                           ; BSR set to: 0
 14741  004362  90D8               	bcf	status,0,c
 14742  004364  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 14743  004366  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 14744  004368  2B64               	incf	___lwdiv@counter& (0+255),f,b
 14745  00436A                     l1544:
 14746                           
 14747                           ; BSR set to: 0
 14748                           
 14749                           ; BSR set to: 0
 14750  00436A  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 14751  00436C  D7FA               	goto	l1545
 14752  00436E                     u8950:
 14753                           
 14754                           ; BSR set to: 0
 14755                           
 14756                           ; BSR set to: 0
 14757                           
 14758                           ; BSR set to: 0
 14759  00436E  90D8               	bcf	status,0,c
 14760  004370  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 14761  004372  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 14762                           
 14763                           ; BSR set to: 0
 14764  004374  5162               	movf	___lwdiv@divisor& (0+255),w,b
 14765  004376  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 14766  004378  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 14767  00437A  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 14768  00437C  A0D8               	btfss	status,0,c
 14769  00437E  D005               	goto	l1548
 14770                           
 14771                           ; BSR set to: 0
 14772  004380  5162               	movf	___lwdiv@divisor& (0+255),w,b
 14773  004382  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 14774  004384  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 14775  004386  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 14776                           
 14777                           ; BSR set to: 0
 14778  004388  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 14779  00438A                     l1548:
 14780                           
 14781                           ; BSR set to: 0
 14782                           
 14783                           ; BSR set to: 0
 14784  00438A  90D8               	bcf	status,0,c
 14785  00438C  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 14786  00438E  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 14787                           
 14788                           ; BSR set to: 0
 14789  004390  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 14790  004392  D7ED               	goto	u8950
 14791  004394                     l1549:
 14792                           
 14793                           ; BSR set to: 0
 14794                           
 14795                           ; BSR set to: 0
 14796  004394  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 14797  004398  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 14798                           
 14799                           ; BSR set to: 0
 14800  00439C  0012               	return		;funcret
 14801  00439E                     __end_of___lwdiv:
 14802                           	opt stack 0
 14803                           tblptru	equ	0xFF8
 14804                           tblptrh	equ	0xFF7
 14805                           tblptrl	equ	0xFF6
 14806                           tablat	equ	0xFF5
 14807                           prodh	equ	0xFF4
 14808                           prodl	equ	0xFF3
 14809                           intcon	equ	0xFF2
 14810                           intcon3	equ	0xFF0
 14811                           indf0	equ	0xFEF
 14812                           postinc0	equ	0xFEE
 14813                           plusw0	equ	0xFEB
 14814                           fsr0h	equ	0xFEA
 14815                           fsr0l	equ	0xFE9
 14816                           wreg	equ	0xFE8
 14817                           indf1	equ	0xFE7
 14818                           postinc1	equ	0xFE6
 14819                           postdec1	equ	0xFE5
 14820                           plusw1	equ	0xFE3
 14821                           fsr1h	equ	0xFE2
 14822                           fsr1l	equ	0xFE1
 14823                           indf2	equ	0xFDF
 14824                           postinc2	equ	0xFDE
 14825                           postdec2	equ	0xFDD
 14826                           plusw2	equ	0xFDB
 14827                           fsr2h	equ	0xFDA
 14828                           fsr2l	equ	0xFD9
 14829                           status	equ	0xFD8
 14830                           
 14831 ;; *************** function _intToString *****************
 14832 ;; Defined at:
 14833 ;;		line 75 in file "src/system/uart.c"
 14834 ;; Parameters:    Size  Location     Type
 14835 ;;  val             4   36[BANK0 ] unsigned long 
 14836 ;; Auto vars:     Size  Location     Type
 14837 ;;		None
 14838 ;; Return value:  Size  Location     Type
 14839 ;;                  2   36[BANK0 ] PTR unsigned char 
 14840 ;; Registers used:
 14841 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14842 ;; Tracked objects:
 14843 ;;		On entry : 0/0
 14844 ;;		On exit  : 0/0
 14845 ;;		Unchanged: 0/0
 14846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14847 ;;      Params:         0       4       0       0       0       0       0       0       0
 14848 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14849 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14850 ;;      Totals:         0       4       0       0       0       0       0       0       0
 14851 ;;Total ram usage:        4 bytes
 14852 ;; Hardware stack levels used:    1
 14853 ;; Hardware stack levels required when called:    7
 14854 ;; This function calls:
 14855 ;;		_ltoa
 14856 ;; This function is called by:
 14857 ;;		_ethernet_rxGetNewFrame
 14858 ;;		_printErrorMessage
 14859 ;;		_UARTTransmitInt
 14860 ;;		_arp_probe
 14861 ;;		_ipv4_handleNewPacket
 14862 ;;		_arpEntryToString
 14863 ;; This function uses a non-reentrant model
 14864 ;;
 14865                           
 14866                           	psect	text55
 14867  004860                     __ptext55:
 14868                           	opt stack 0
 14869  004860                     _intToString:
 14870                           	opt stack 22
 14871                           
 14872                           ;uart.c: 76: char static number [10];
 14873                           ;uart.c: 77: ltoa(&number[0], (long) val, 10);
 14874                           
 14875                           ; BSR set to: 0
 14876                           ;incstack = 0
 14877  004860  0EB1               	movlw	low intToString@number
 14878  004862  0100               	movlb	0	; () banked
 14879  004864  6F7A               	movwf	ltoa@buf& (0+255),b
 14880  004866  0E02               	movlw	high intToString@number
 14881  004868  6F7B               	movwf	(ltoa@buf+1)& (0+255),b
 14882  00486A  C084  F07C         	movff	intToString@val,ltoa@val
 14883  00486E  C085  F07D         	movff	intToString@val+1,ltoa@val+1
 14884  004872  C086  F07E         	movff	intToString@val+2,ltoa@val+2
 14885  004876  C087  F07F         	movff	intToString@val+3,ltoa@val+3
 14886  00487A  0E00               	movlw	0
 14887  00487C  6F81               	movwf	(ltoa@base+1)& (0+255),b
 14888  00487E  0E0A               	movlw	10
 14889  004880  6F80               	movwf	ltoa@base& (0+255),b
 14890  004882  ECCF  F021         	call	_ltoa	;wreg free
 14891                           
 14892                           ;uart.c: 81: return number;
 14893  004886  0EB1               	movlw	low intToString@number
 14894  004888  0100               	movlb	0	; () banked
 14895  00488A  6F84               	movwf	?_intToString& (0+255),b
 14896  00488C  0E02               	movlw	high intToString@number
 14897  00488E  6F85               	movwf	(?_intToString+1)& (0+255),b
 14898  004890  0012               	return	
 14899  004892                     __end_of_intToString:
 14900                           	opt stack 0
 14901                           tblptru	equ	0xFF8
 14902                           tblptrh	equ	0xFF7
 14903                           tblptrl	equ	0xFF6
 14904                           tablat	equ	0xFF5
 14905                           prodh	equ	0xFF4
 14906                           prodl	equ	0xFF3
 14907                           intcon	equ	0xFF2
 14908                           intcon3	equ	0xFF0
 14909                           indf0	equ	0xFEF
 14910                           postinc0	equ	0xFEE
 14911                           plusw0	equ	0xFEB
 14912                           fsr0h	equ	0xFEA
 14913                           fsr0l	equ	0xFE9
 14914                           wreg	equ	0xFE8
 14915                           indf1	equ	0xFE7
 14916                           postinc1	equ	0xFE6
 14917                           postdec1	equ	0xFE5
 14918                           plusw1	equ	0xFE3
 14919                           fsr1h	equ	0xFE2
 14920                           fsr1l	equ	0xFE1
 14921                           indf2	equ	0xFDF
 14922                           postinc2	equ	0xFDE
 14923                           postdec2	equ	0xFDD
 14924                           plusw2	equ	0xFDB
 14925                           fsr2h	equ	0xFDA
 14926                           fsr2l	equ	0xFD9
 14927                           status	equ	0xFD8
 14928                           
 14929 ;; *************** function _ltoa *****************
 14930 ;; Defined at:
 14931 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ltoa.c"
 14932 ;; Parameters:    Size  Location     Type
 14933 ;;  buf             2   26[BANK0 ] PTR unsigned char 
 14934 ;;		 -> intToString@number(10), 
 14935 ;;  val             4   28[BANK0 ] long 
 14936 ;;  base            2   32[BANK0 ] int 
 14937 ;; Auto vars:     Size  Location     Type
 14938 ;;  cp              2   34[BANK0 ] PTR unsigned char 
 14939 ;;		 -> intToString@number(10), 
 14940 ;; Return value:  Size  Location     Type
 14941 ;;                  2   26[BANK0 ] PTR unsigned char 
 14942 ;; Registers used:
 14943 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14944 ;; Tracked objects:
 14945 ;;		On entry : 0/0
 14946 ;;		On exit  : 0/0
 14947 ;;		Unchanged: 0/0
 14948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14949 ;;      Params:         0       8       0       0       0       0       0       0       0
 14950 ;;      Locals:         0       2       0       0       0       0       0       0       0
 14951 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14952 ;;      Totals:         0      10       0       0       0       0       0       0       0
 14953 ;;Total ram usage:       10 bytes
 14954 ;; Hardware stack levels used:    1
 14955 ;; Hardware stack levels required when called:    6
 14956 ;; This function calls:
 14957 ;;		_ultoa
 14958 ;; This function is called by:
 14959 ;;		_intToString
 14960 ;; This function uses a non-reentrant model
 14961 ;;
 14962                           
 14963                           	psect	text56
 14964  00439E                     __ptext56:
 14965                           	opt stack 0
 14966  00439E                     _ltoa:
 14967                           	opt stack 22
 14968                           
 14969                           ; BSR set to: 0
 14970                           ;incstack = 0
 14971  00439E  C07A  F082         	movff	ltoa@buf,ltoa@cp
 14972  0043A2  C07B  F083         	movff	ltoa@buf+1,ltoa@cp+1
 14973  0043A6  0100               	movlb	0	; () banked
 14974  0043A8  AF7F               	btfss	(ltoa@val+3)& (0+255),7,b
 14975  0043AA  D010               	goto	l1526
 14976                           
 14977                           ; BSR set to: 0
 14978  0043AC  C07A  FFD9         	movff	ltoa@buf,fsr2l
 14979  0043B0  C07B  FFDA         	movff	ltoa@buf+1,fsr2h
 14980  0043B4  0E2D               	movlw	45
 14981  0043B6  6EDF               	movwf	indf2,c
 14982                           
 14983                           ; BSR set to: 0
 14984  0043B8  4B7A               	infsnz	ltoa@buf& (0+255),f,b
 14985  0043BA  2B7B               	incf	(ltoa@buf+1)& (0+255),f,b
 14986                           
 14987                           ; BSR set to: 0
 14988  0043BC  1F7F               	comf	(ltoa@val+3)& (0+255),f,b
 14989  0043BE  1F7E               	comf	(ltoa@val+2)& (0+255),f,b
 14990  0043C0  1F7D               	comf	(ltoa@val+1)& (0+255),f,b
 14991  0043C2  6D7C               	negf	ltoa@val& (0+255),b
 14992  0043C4  0E00               	movlw	0
 14993  0043C6  237D               	addwfc	(ltoa@val+1)& (0+255),f,b
 14994  0043C8  237E               	addwfc	(ltoa@val+2)& (0+255),f,b
 14995  0043CA  237F               	addwfc	(ltoa@val+3)& (0+255),f,b
 14996  0043CC                     l1526:
 14997                           
 14998                           ; BSR set to: 0
 14999                           
 15000                           ; BSR set to: 0
 15001  0043CC  C07A  F06D         	movff	ltoa@buf,ultoa@buf
 15002  0043D0  C07B  F06E         	movff	ltoa@buf+1,ultoa@buf+1
 15003  0043D4  C07C  F06F         	movff	ltoa@val,ultoa@val
 15004  0043D8  C07D  F070         	movff	ltoa@val+1,ultoa@val+1
 15005  0043DC  C07E  F071         	movff	ltoa@val+2,ultoa@val+2
 15006  0043E0  C07F  F072         	movff	ltoa@val+3,ultoa@val+3
 15007  0043E4  C080  F073         	movff	ltoa@base,ultoa@base
 15008  0043E8  C081  F074         	movff	ltoa@base+1,ultoa@base+1
 15009  0043EC  EC9D  F017         	call	_ultoa	;wreg free
 15010  0043F0  0012               	return	
 15011  0043F2                     __end_of_ltoa:
 15012                           	opt stack 0
 15013                           tblptru	equ	0xFF8
 15014                           tblptrh	equ	0xFF7
 15015                           tblptrl	equ	0xFF6
 15016                           tablat	equ	0xFF5
 15017                           prodh	equ	0xFF4
 15018                           prodl	equ	0xFF3
 15019                           intcon	equ	0xFF2
 15020                           intcon3	equ	0xFF0
 15021                           indf0	equ	0xFEF
 15022                           postinc0	equ	0xFEE
 15023                           plusw0	equ	0xFEB
 15024                           fsr0h	equ	0xFEA
 15025                           fsr0l	equ	0xFE9
 15026                           wreg	equ	0xFE8
 15027                           indf1	equ	0xFE7
 15028                           postinc1	equ	0xFE6
 15029                           postdec1	equ	0xFE5
 15030                           plusw1	equ	0xFE3
 15031                           fsr1h	equ	0xFE2
 15032                           fsr1l	equ	0xFE1
 15033                           indf2	equ	0xFDF
 15034                           postinc2	equ	0xFDE
 15035                           postdec2	equ	0xFDD
 15036                           plusw2	equ	0xFDB
 15037                           fsr2h	equ	0xFDA
 15038                           fsr2l	equ	0xFD9
 15039                           status	equ	0xFD8
 15040                           
 15041 ;; *************** function _ultoa *****************
 15042 ;; Defined at:
 15043 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ltoa.c"
 15044 ;; Parameters:    Size  Location     Type
 15045 ;;  buf             2   13[BANK0 ] PTR unsigned char 
 15046 ;;		 -> intToString@number(10), 
 15047 ;;  val             4   15[BANK0 ] unsigned long 
 15048 ;;  base            2   19[BANK0 ] int 
 15049 ;; Auto vars:     Size  Location     Type
 15050 ;;  v               4   21[BANK0 ] unsigned long 
 15051 ;;  c               1   25[BANK0 ] unsigned char 
 15052 ;; Return value:  Size  Location     Type
 15053 ;;                  2   13[BANK0 ] PTR unsigned char 
 15054 ;; Registers used:
 15055 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15056 ;; Tracked objects:
 15057 ;;		On entry : 0/0
 15058 ;;		On exit  : 0/0
 15059 ;;		Unchanged: 0/0
 15060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15061 ;;      Params:         0       8       0       0       0       0       0       0       0
 15062 ;;      Locals:         0       5       0       0       0       0       0       0       0
 15063 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15064 ;;      Totals:         0      13       0       0       0       0       0       0       0
 15065 ;;Total ram usage:       13 bytes
 15066 ;; Hardware stack levels used:    1
 15067 ;; Hardware stack levels required when called:    5
 15068 ;; This function calls:
 15069 ;;		___lldiv
 15070 ;;		___llmod
 15071 ;; This function is called by:
 15072 ;;		_ltoa
 15073 ;; This function uses a non-reentrant model
 15074 ;;
 15075                           
 15076                           	psect	text57
 15077  002F3A                     __ptext57:
 15078                           	opt stack 0
 15079  002F3A                     _ultoa:
 15080                           	opt stack 22
 15081                           
 15082                           ;incstack = 0
 15083  002F3A  C06F  F075         	movff	ultoa@val,ultoa@v
 15084  002F3E  C070  F076         	movff	ultoa@val+1,ultoa@v+1
 15085  002F42  C071  F077         	movff	ultoa@val+2,ultoa@v+2
 15086  002F46  C072  F078         	movff	ultoa@val+3,ultoa@v+3
 15087  002F4A  C075  F060         	movff	ultoa@v,___lldiv@dividend
 15088  002F4E  C076  F061         	movff	ultoa@v+1,___lldiv@dividend+1
 15089  002F52  C077  F062         	movff	ultoa@v+2,___lldiv@dividend+2
 15090  002F56  C078  F063         	movff	ultoa@v+3,___lldiv@dividend+3
 15091  002F5A  C073  F064         	movff	ultoa@base,___lldiv@divisor
 15092  002F5E  C074  F065         	movff	ultoa@base+1,___lldiv@divisor+1
 15093  002F62  0100               	movlb	0	; () banked
 15094  002F64  0E00               	movlw	0
 15095  002F66  BF65               	btfsc	(___lldiv@divisor+1)& (0+255),7,b
 15096  002F68  0EFF               	movlw	-1
 15097  002F6A  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
 15098  002F6C  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
 15099  002F6E  EC8F  F01D         	call	___lldiv	;wreg free
 15100  002F72  C060  F075         	movff	?___lldiv,ultoa@v
 15101  002F76  C061  F076         	movff	?___lldiv+1,ultoa@v+1
 15102  002F7A  C062  F077         	movff	?___lldiv+2,ultoa@v+2
 15103  002F7E  C063  F078         	movff	?___lldiv+3,ultoa@v+3
 15104  002F82  0100               	movlb	0	; () banked
 15105  002F84  4B6D               	infsnz	ultoa@buf& (0+255),f,b
 15106  002F86  2B6E               	incf	(ultoa@buf+1)& (0+255),f,b
 15107                           
 15108                           ; BSR set to: 0
 15109  002F88  5175               	movf	ultoa@v& (0+255),w,b
 15110  002F8A  1176               	iorwf	(ultoa@v+1)& (0+255),w,b
 15111  002F8C  1177               	iorwf	(ultoa@v+2)& (0+255),w,b
 15112  002F8E  1178               	iorwf	(ultoa@v+3)& (0+255),w,b
 15113  002F90  A4D8               	btfss	status,2,c
 15114  002F92  D7DB               	goto	l1530
 15115                           
 15116                           ; BSR set to: 0
 15117                           
 15118                           ; BSR set to: 0
 15119  002F94  C06D  FFD9         	movff	ultoa@buf,fsr2l
 15120  002F98  C06E  FFDA         	movff	ultoa@buf+1,fsr2h
 15121  002F9C  0E00               	movlw	0
 15122  002F9E  6EDF               	movwf	indf2,c
 15123                           
 15124                           ; BSR set to: 0
 15125  002FA0  076D               	decf	ultoa@buf& (0+255),f,b
 15126  002FA2  A0D8               	btfss	status,0,c
 15127  002FA4  076E               	decf	(ultoa@buf+1)& (0+255),f,b
 15128  002FA6                     
 15129                           ; BSR set to: 0
 15130                           
 15131                           ; BSR set to: 0
 15132  002FA6  C06F  F060         	movff	ultoa@val,___llmod@dividend
 15133  002FAA  C070  F061         	movff	ultoa@val+1,___llmod@dividend+1
 15134  002FAE  C071  F062         	movff	ultoa@val+2,___llmod@dividend+2
 15135  002FB2  C072  F063         	movff	ultoa@val+3,___llmod@dividend+3
 15136  002FB6  C073  F064         	movff	ultoa@base,___llmod@divisor
 15137  002FBA  C074  F065         	movff	ultoa@base+1,___llmod@divisor+1
 15138  002FBE  0E00               	movlw	0
 15139  002FC0  BF65               	btfsc	(___llmod@divisor+1)& (0+255),7,b
 15140  002FC2  0EFF               	movlw	-1
 15141  002FC4  6F66               	movwf	(___llmod@divisor+2)& (0+255),b
 15142  002FC6  6F67               	movwf	(___llmod@divisor+3)& (0+255),b
 15143  002FC8  EC5B  F020         	call	___llmod	;wreg free
 15144  002FCC  0100               	movlb	0	; () banked
 15145  002FCE  5160               	movf	?___llmod& (0+255),w,b
 15146  002FD0  6F79               	movwf	ultoa@c& (0+255),b
 15147                           
 15148                           ; BSR set to: 0
 15149  002FD2  C06F  F060         	movff	ultoa@val,___lldiv@dividend
 15150  002FD6  C070  F061         	movff	ultoa@val+1,___lldiv@dividend+1
 15151  002FDA  C071  F062         	movff	ultoa@val+2,___lldiv@dividend+2
 15152  002FDE  C072  F063         	movff	ultoa@val+3,___lldiv@dividend+3
 15153  002FE2  C073  F064         	movff	ultoa@base,___lldiv@divisor
 15154  002FE6  C074  F065         	movff	ultoa@base+1,___lldiv@divisor+1
 15155  002FEA  0E00               	movlw	0
 15156  002FEC  BF65               	btfsc	(___lldiv@divisor+1)& (0+255),7,b
 15157  002FEE  0EFF               	movlw	-1
 15158  002FF0  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
 15159  002FF2  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
 15160  002FF4  EC8F  F01D         	call	___lldiv	;wreg free
 15161  002FF8  C060  F06F         	movff	?___lldiv,ultoa@val
 15162  002FFC  C061  F070         	movff	?___lldiv+1,ultoa@val+1
 15163  003000  C062  F071         	movff	?___lldiv+2,ultoa@val+2
 15164  003004  C063  F072         	movff	?___lldiv+3,ultoa@val+3
 15165  003008  0E09               	movlw	9
 15166  00300A  0100               	movlb	0	; () banked
 15167  00300C  6579               	cpfsgt	ultoa@c& (0+255),b
 15168  00300E  D002               	goto	l1533
 15169                           
 15170                           ; BSR set to: 0
 15171  003010  0E07               	movlw	7
 15172  003012  2779               	addwf	ultoa@c& (0+255),f,b
 15173  003014                     l1533:
 15174                           
 15175                           ; BSR set to: 0
 15176  003014  0E30               	movlw	48
 15177  003016  2779               	addwf	ultoa@c& (0+255),f,b
 15178                           
 15179                           ; BSR set to: 0
 15180  003018  C06D  FFD9         	movff	ultoa@buf,fsr2l
 15181  00301C  C06E  FFDA         	movff	ultoa@buf+1,fsr2h
 15182  003020  C079  FFDF         	movff	ultoa@c,indf2
 15183                           
 15184                           ; BSR set to: 0
 15185  003024  076D               	decf	ultoa@buf& (0+255),f,b
 15186  003026  A0D8               	btfss	status,0,c
 15187  003028  076E               	decf	(ultoa@buf+1)& (0+255),f,b
 15188                           
 15189                           ; BSR set to: 0
 15190  00302A  516F               	movf	ultoa@val& (0+255),w,b
 15191  00302C  1170               	iorwf	(ultoa@val+1)& (0+255),w,b
 15192  00302E  1171               	iorwf	(ultoa@val+2)& (0+255),w,b
 15193  003030  1172               	iorwf	(ultoa@val+3)& (0+255),w,b
 15194  003032  B4D8               	btfsc	status,2,c
 15195  003034  0012               	return	
 15196  003036  D7B7               	goto	l1532
 15197  003038                     __end_of_ultoa:
 15198                           	opt stack 0
 15199                           tblptru	equ	0xFF8
 15200                           tblptrh	equ	0xFF7
 15201                           tblptrl	equ	0xFF6
 15202                           tablat	equ	0xFF5
 15203                           prodh	equ	0xFF4
 15204                           prodl	equ	0xFF3
 15205                           intcon	equ	0xFF2
 15206                           intcon3	equ	0xFF0
 15207                           indf0	equ	0xFEF
 15208                           postinc0	equ	0xFEE
 15209                           plusw0	equ	0xFEB
 15210                           fsr0h	equ	0xFEA
 15211                           fsr0l	equ	0xFE9
 15212                           wreg	equ	0xFE8
 15213                           indf1	equ	0xFE7
 15214                           postinc1	equ	0xFE6
 15215                           postdec1	equ	0xFE5
 15216                           plusw1	equ	0xFE3
 15217                           fsr1h	equ	0xFE2
 15218                           fsr1l	equ	0xFE1
 15219                           indf2	equ	0xFDF
 15220                           postinc2	equ	0xFDE
 15221                           postdec2	equ	0xFDD
 15222                           plusw2	equ	0xFDB
 15223                           fsr2h	equ	0xFDA
 15224                           fsr2l	equ	0xFD9
 15225                           status	equ	0xFD8
 15226                           
 15227 ;; *************** function ___llmod *****************
 15228 ;; Defined at:
 15229 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
 15230 ;; Parameters:    Size  Location     Type
 15231 ;;  dividend        4    0[BANK0 ] unsigned long 
 15232 ;;  divisor         4    4[BANK0 ] unsigned long 
 15233 ;; Auto vars:     Size  Location     Type
 15234 ;;  counter         1    8[BANK0 ] unsigned char 
 15235 ;; Return value:  Size  Location     Type
 15236 ;;                  4    0[BANK0 ] unsigned long 
 15237 ;; Registers used:
 15238 ;;		wreg, status,2, status,0
 15239 ;; Tracked objects:
 15240 ;;		On entry : 0/0
 15241 ;;		On exit  : 0/0
 15242 ;;		Unchanged: 0/0
 15243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15244 ;;      Params:         0       8       0       0       0       0       0       0       0
 15245 ;;      Locals:         0       1       0       0       0       0       0       0       0
 15246 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15247 ;;      Totals:         0       9       0       0       0       0       0       0       0
 15248 ;;Total ram usage:        9 bytes
 15249 ;; Hardware stack levels used:    1
 15250 ;; Hardware stack levels required when called:    4
 15251 ;; This function calls:
 15252 ;;		Nothing
 15253 ;; This function is called by:
 15254 ;;		_ultoa
 15255 ;;		_arpEntryToString
 15256 ;; This function uses a non-reentrant model
 15257 ;;
 15258                           
 15259                           	psect	text58
 15260  0040B6                     __ptext58:
 15261                           	opt stack 0
 15262  0040B6                     ___llmod:
 15263                           	opt stack 22
 15264                           
 15265                           ; BSR set to: 0
 15266                           ;incstack = 0
 15267  0040B6  0100               	movlb	0	; () banked
 15268  0040B8  5164               	movf	___llmod@divisor& (0+255),w,b
 15269  0040BA  1165               	iorwf	(___llmod@divisor+1)& (0+255),w,b
 15270  0040BC  1166               	iorwf	(___llmod@divisor+2)& (0+255),w,b
 15271  0040BE  1167               	iorwf	(___llmod@divisor+3)& (0+255),w,b
 15272  0040C0  B4D8               	btfsc	status,2,c
 15273  0040C2  D024               	goto	l1492
 15274                           
 15275                           ; BSR set to: 0
 15276  0040C4  0E01               	movlw	1
 15277  0040C6  6F68               	movwf	___llmod@counter& (0+255),b
 15278  0040C8  D006               	goto	l1487
 15279  0040CA                     
 15280                           ; BSR set to: 0
 15281                           
 15282                           ; BSR set to: 0
 15283  0040CA  90D8               	bcf	status,0,c
 15284  0040CC  3764               	rlcf	___llmod@divisor& (0+255),f,b
 15285  0040CE  3765               	rlcf	(___llmod@divisor+1)& (0+255),f,b
 15286  0040D0  3766               	rlcf	(___llmod@divisor+2)& (0+255),f,b
 15287  0040D2  3767               	rlcf	(___llmod@divisor+3)& (0+255),f,b
 15288  0040D4  2B68               	incf	___llmod@counter& (0+255),f,b
 15289  0040D6                     l1487:
 15290                           
 15291                           ; BSR set to: 0
 15292                           
 15293                           ; BSR set to: 0
 15294  0040D6  AF67               	btfss	(___llmod@divisor+3)& (0+255),7,b
 15295  0040D8  D7F8               	goto	l1488
 15296  0040DA                     u8740:
 15297                           
 15298                           ; BSR set to: 0
 15299                           
 15300                           ; BSR set to: 0
 15301                           
 15302                           ; BSR set to: 0
 15303  0040DA  5164               	movf	___llmod@divisor& (0+255),w,b
 15304  0040DC  5D60               	subwf	___llmod@dividend& (0+255),w,b
 15305  0040DE  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
 15306  0040E0  5961               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 15307  0040E2  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
 15308  0040E4  5962               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 15309  0040E6  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
 15310  0040E8  5963               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 15311  0040EA  A0D8               	btfss	status,0,c
 15312  0040EC  D008               	goto	l1491
 15313                           
 15314                           ; BSR set to: 0
 15315  0040EE  5164               	movf	___llmod@divisor& (0+255),w,b
 15316  0040F0  5F60               	subwf	___llmod@dividend& (0+255),f,b
 15317  0040F2  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
 15318  0040F4  5B61               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 15319  0040F6  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
 15320  0040F8  5B62               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 15321  0040FA  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
 15322  0040FC  5B63               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 15323  0040FE                     l1491:
 15324                           
 15325                           ; BSR set to: 0
 15326                           
 15327                           ; BSR set to: 0
 15328  0040FE  90D8               	bcf	status,0,c
 15329  004100  3367               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 15330  004102  3366               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 15331  004104  3365               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 15332  004106  3364               	rrcf	___llmod@divisor& (0+255),f,b
 15333                           
 15334                           ; BSR set to: 0
 15335  004108  2F68               	decfsz	___llmod@counter& (0+255),f,b
 15336  00410A  D7E7               	goto	u8740
 15337  00410C                     l1492:
 15338                           
 15339                           ; BSR set to: 0
 15340                           
 15341                           ; BSR set to: 0
 15342  00410C  C060  F060         	movff	___llmod@dividend,?___llmod
 15343  004110  C061  F061         	movff	___llmod@dividend+1,?___llmod+1
 15344  004114  C062  F062         	movff	___llmod@dividend+2,?___llmod+2
 15345  004118  C063  F063         	movff	___llmod@dividend+3,?___llmod+3
 15346                           
 15347                           ; BSR set to: 0
 15348  00411C  0012               	return		;funcret
 15349  00411E                     __end_of___llmod:
 15350                           	opt stack 0
 15351                           tblptru	equ	0xFF8
 15352                           tblptrh	equ	0xFF7
 15353                           tblptrl	equ	0xFF6
 15354                           tablat	equ	0xFF5
 15355                           prodh	equ	0xFF4
 15356                           prodl	equ	0xFF3
 15357                           intcon	equ	0xFF2
 15358                           intcon3	equ	0xFF0
 15359                           indf0	equ	0xFEF
 15360                           postinc0	equ	0xFEE
 15361                           plusw0	equ	0xFEB
 15362                           fsr0h	equ	0xFEA
 15363                           fsr0l	equ	0xFE9
 15364                           wreg	equ	0xFE8
 15365                           indf1	equ	0xFE7
 15366                           postinc1	equ	0xFE6
 15367                           postdec1	equ	0xFE5
 15368                           plusw1	equ	0xFE3
 15369                           fsr1h	equ	0xFE2
 15370                           fsr1l	equ	0xFE1
 15371                           indf2	equ	0xFDF
 15372                           postinc2	equ	0xFDE
 15373                           postdec2	equ	0xFDD
 15374                           plusw2	equ	0xFDB
 15375                           fsr2h	equ	0xFDA
 15376                           fsr2l	equ	0xFD9
 15377                           status	equ	0xFD8
 15378                           
 15379 ;; *************** function ___lldiv *****************
 15380 ;; Defined at:
 15381 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 15382 ;; Parameters:    Size  Location     Type
 15383 ;;  dividend        4    0[BANK0 ] unsigned long 
 15384 ;;  divisor         4    4[BANK0 ] unsigned long 
 15385 ;; Auto vars:     Size  Location     Type
 15386 ;;  quotient        4    8[BANK0 ] unsigned long 
 15387 ;;  counter         1   12[BANK0 ] unsigned char 
 15388 ;; Return value:  Size  Location     Type
 15389 ;;                  4    0[BANK0 ] unsigned long 
 15390 ;; Registers used:
 15391 ;;		wreg, status,2, status,0
 15392 ;; Tracked objects:
 15393 ;;		On entry : 0/0
 15394 ;;		On exit  : 0/0
 15395 ;;		Unchanged: 0/0
 15396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15397 ;;      Params:         0       8       0       0       0       0       0       0       0
 15398 ;;      Locals:         0       5       0       0       0       0       0       0       0
 15399 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15400 ;;      Totals:         0      13       0       0       0       0       0       0       0
 15401 ;;Total ram usage:       13 bytes
 15402 ;; Hardware stack levels used:    1
 15403 ;; Hardware stack levels required when called:    4
 15404 ;; This function calls:
 15405 ;;		Nothing
 15406 ;; This function is called by:
 15407 ;;		_ultoa
 15408 ;; This function uses a non-reentrant model
 15409 ;;
 15410                           
 15411                           	psect	text59
 15412  003B1E                     __ptext59:
 15413                           	opt stack 0
 15414  003B1E                     ___lldiv:
 15415                           	opt stack 22
 15416                           
 15417                           ; BSR set to: 0
 15418                           ;incstack = 0
 15419  003B1E  0E00               	movlw	0
 15420  003B20  0100               	movlb	0	; () banked
 15421  003B22  6F68               	movwf	___lldiv@quotient& (0+255),b
 15422  003B24  0E00               	movlw	0
 15423  003B26  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
 15424  003B28  0E00               	movlw	0
 15425  003B2A  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
 15426  003B2C  0E00               	movlw	0
 15427  003B2E  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
 15428                           
 15429                           ; BSR set to: 0
 15430  003B30  5164               	movf	___lldiv@divisor& (0+255),w,b
 15431  003B32  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 15432  003B34  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 15433  003B36  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 15434  003B38  B4D8               	btfsc	status,2,c
 15435  003B3A  D02A               	goto	l1482
 15436                           
 15437                           ; BSR set to: 0
 15438  003B3C  0E01               	movlw	1
 15439  003B3E  6F6C               	movwf	___lldiv@counter& (0+255),b
 15440  003B40  D006               	goto	l1477
 15441  003B42                     
 15442                           ; BSR set to: 0
 15443                           
 15444                           ; BSR set to: 0
 15445  003B42  90D8               	bcf	status,0,c
 15446  003B44  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 15447  003B46  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 15448  003B48  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 15449  003B4A  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 15450  003B4C  2B6C               	incf	___lldiv@counter& (0+255),f,b
 15451  003B4E                     l1477:
 15452                           
 15453                           ; BSR set to: 0
 15454                           
 15455                           ; BSR set to: 0
 15456  003B4E  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 15457  003B50  D7F8               	goto	l1478
 15458  003B52                     u8710:
 15459                           
 15460                           ; BSR set to: 0
 15461                           
 15462                           ; BSR set to: 0
 15463                           
 15464                           ; BSR set to: 0
 15465  003B52  90D8               	bcf	status,0,c
 15466  003B54  3768               	rlcf	___lldiv@quotient& (0+255),f,b
 15467  003B56  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 15468  003B58  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 15469  003B5A  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 15470                           
 15471                           ; BSR set to: 0
 15472  003B5C  5164               	movf	___lldiv@divisor& (0+255),w,b
 15473  003B5E  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 15474  003B60  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 15475  003B62  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 15476  003B64  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 15477  003B66  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 15478  003B68  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 15479  003B6A  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 15480  003B6C  A0D8               	btfss	status,0,c
 15481  003B6E  D009               	goto	l1481
 15482                           
 15483                           ; BSR set to: 0
 15484  003B70  5164               	movf	___lldiv@divisor& (0+255),w,b
 15485  003B72  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 15486  003B74  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 15487  003B76  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 15488  003B78  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 15489  003B7A  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 15490  003B7C  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 15491  003B7E  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 15492                           
 15493                           ; BSR set to: 0
 15494  003B80  8168               	bsf	___lldiv@quotient& (0+255),0,b
 15495  003B82                     l1481:
 15496                           
 15497                           ; BSR set to: 0
 15498                           
 15499                           ; BSR set to: 0
 15500  003B82  90D8               	bcf	status,0,c
 15501  003B84  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 15502  003B86  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 15503  003B88  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 15504  003B8A  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 15505                           
 15506                           ; BSR set to: 0
 15507  003B8C  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
 15508  003B8E  D7E1               	goto	u8710
 15509  003B90                     l1482:
 15510                           
 15511                           ; BSR set to: 0
 15512                           
 15513                           ; BSR set to: 0
 15514  003B90  C068  F060         	movff	___lldiv@quotient,?___lldiv
 15515  003B94  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 15516  003B98  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 15517  003B9C  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 15518                           
 15519                           ; BSR set to: 0
 15520  003BA0  0012               	return		;funcret
 15521  003BA2                     __end_of___lldiv:
 15522                           	opt stack 0
 15523                           tblptru	equ	0xFF8
 15524                           tblptrh	equ	0xFF7
 15525                           tblptrl	equ	0xFF6
 15526                           tablat	equ	0xFF5
 15527                           prodh	equ	0xFF4
 15528                           prodl	equ	0xFF3
 15529                           intcon	equ	0xFF2
 15530                           intcon3	equ	0xFF0
 15531                           indf0	equ	0xFEF
 15532                           postinc0	equ	0xFEE
 15533                           plusw0	equ	0xFEB
 15534                           fsr0h	equ	0xFEA
 15535                           fsr0l	equ	0xFE9
 15536                           wreg	equ	0xFE8
 15537                           indf1	equ	0xFE7
 15538                           postinc1	equ	0xFE6
 15539                           postdec1	equ	0xFE5
 15540                           plusw1	equ	0xFE3
 15541                           fsr1h	equ	0xFE2
 15542                           fsr1l	equ	0xFE1
 15543                           indf2	equ	0xFDF
 15544                           postinc2	equ	0xFDE
 15545                           postdec2	equ	0xFDD
 15546                           plusw2	equ	0xFDB
 15547                           fsr2h	equ	0xFDA
 15548                           fsr2l	equ	0xFD9
 15549                           status	equ	0xFD8
 15550                           
 15551 ;; *************** function _arp_sendRequest *****************
 15552 ;; Defined at:
 15553 ;;		line 183 in file "src/stack/protocols/arp.c"
 15554 ;; Parameters:    Size  Location     Type
 15555 ;;  ipSender        4    0[BANK1 ] struct ipv4_address
 15556 ;;  ipTarget        4    4[BANK1 ] struct ipv4_address
 15557 ;; Auto vars:     Size  Location     Type
 15558 ;;  request        32   20[BANK1 ] struct arp_message
 15559 ;;  targetMAC       6   14[BANK1 ] struct macaddress
 15560 ;;  senderMAC       6    8[BANK1 ] struct macaddress
 15561 ;; Return value:  Size  Location     Type
 15562 ;;                  1    wreg      void 
 15563 ;; Registers used:
 15564 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15565 ;; Tracked objects:
 15566 ;;		On entry : 0/0
 15567 ;;		On exit  : 0/0
 15568 ;;		Unchanged: 0/0
 15569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15570 ;;      Params:         0       0       8       0       0       0       0       0       0
 15571 ;;      Locals:         0       0      44       0       0       0       0       0       0
 15572 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15573 ;;      Totals:         0       0      52       0       0       0       0       0       0
 15574 ;;Total ram usage:       52 bytes
 15575 ;; Hardware stack levels used:    1
 15576 ;; Hardware stack levels required when called:   10
 15577 ;; This function calls:
 15578 ;;		_arp_send
 15579 ;;		_ethernetController_getMacAddress
 15580 ;;		_ipv4_getIPSourceAddress
 15581 ;;		_mac_setAllZero
 15582 ;; This function is called by:
 15583 ;;		_arp_probe
 15584 ;; This function uses a non-reentrant model
 15585 ;;
 15586                           
 15587                           	psect	text60
 15588  003618                     __ptext60:
 15589                           	opt stack 0
 15590  003618                     _arp_sendRequest:
 15591                           	opt stack 17
 15592                           
 15593                           ;arp.c: 184: arp_message_t request;
 15594                           ;arp.c: 185: macaddress_t senderMAC;
 15595                           ;arp.c: 186: macaddress_t targetMAC;
 15596                           ;arp.c: 188: senderMAC = ethernetController_getMacAddress();
 15597                           
 15598                           ; BSR set to: 0
 15599                           ;incstack = 0
 15600  003618  EC43  F01F         	call	_ethernetController_getMacAddress	;wreg free
 15601  00361C  EE21  F008         	lfsr	2,arp_sendRequest@senderMAC
 15602  003620  0E05               	movlw	5
 15603  003622                     u10281:
 15604  003622  CFEB FFDB          	movff	plusw0,plusw2
 15605  003626  06E8               	decf	wreg,f,c
 15606  003628  E2FC               	bc	u10281
 15607                           
 15608                           ;arp.c: 190: ipSender = ipv4_getIPSourceAddress();
 15609  00362A  ECEB  F025         	call	_ipv4_getIPSourceAddress	;wreg free
 15610  00362E  C060  F100         	movff	?_ipv4_getIPSourceAddress,arp_sendRequest@ipSender
 15611  003632  C061  F101         	movff	?_ipv4_getIPSourceAddress+1,arp_sendRequest@ipSender+1
 15612  003636  C062  F102         	movff	?_ipv4_getIPSourceAddress+2,arp_sendRequest@ipSender+2
 15613  00363A  C063  F103         	movff	?_ipv4_getIPSourceAddress+3,arp_sendRequest@ipSender+3
 15614                           
 15615                           ;arp.c: 191: mac_setAllZero(&targetMAC);
 15616  00363E  0E0E               	movlw	low arp_sendRequest@targetMAC
 15617  003640  0100               	movlb	0	; () banked
 15618  003642  6F60               	movwf	mac_setAllZero@mac& (0+255),b
 15619  003644  0E01               	movlw	high arp_sendRequest@targetMAC
 15620  003646  6F61               	movwf	(mac_setAllZero@mac+1)& (0+255),b
 15621  003648  EC20  F025         	call	_mac_setAllZero	;wreg free
 15622                           
 15623                           ;arp.c: 193: request.hlen = 6u;
 15624  00364C  0E06               	movlw	6
 15625  00364E  0101               	movlb	1	; () banked
 15626  003650  6F18               	movwf	(arp_sendRequest@request+4)& (0+255),b
 15627                           
 15628                           ; BSR set to: 1
 15629                           ;arp.c: 194: request.plen = 4u;
 15630  003652  0E04               	movlw	4
 15631  003654  6F19               	movwf	(arp_sendRequest@request+5)& (0+255),b
 15632                           
 15633                           ; BSR set to: 1
 15634                           ;arp.c: 195: request.htype = ARP_HTYPE_ETHERNET;
 15635  003656  0E00               	movlw	0
 15636  003658  6F15               	movwf	(arp_sendRequest@request+1)& (0+255),b
 15637  00365A  0E01               	movlw	1
 15638  00365C  6F14               	movwf	arp_sendRequest@request& (0+255),b
 15639                           
 15640                           ; BSR set to: 1
 15641                           ;arp.c: 196: request.ptype = ARP_PTYPE_IPv4;
 15642  00365E  0E08               	movlw	8
 15643  003660  6F17               	movwf	(arp_sendRequest@request+3)& (0+255),b
 15644  003662  0E00               	movlw	0
 15645  003664  6F16               	movwf	(arp_sendRequest@request+2)& (0+255),b
 15646                           
 15647                           ; BSR set to: 1
 15648                           ;arp.c: 197: request.operation = ARP_REQUEST;
 15649  003666  0E00               	movlw	0
 15650  003668  6F1B               	movwf	(arp_sendRequest@request+7)& (0+255),b
 15651  00366A  0E01               	movlw	1
 15652  00366C  6F1A               	movwf	(arp_sendRequest@request+6)& (0+255),b
 15653                           
 15654                           ; BSR set to: 1
 15655                           ;arp.c: 198: request.senderIPAddress = ipSender;
 15656  00366E  C100  F122         	movff	arp_sendRequest@ipSender,arp_sendRequest@request+14
 15657  003672  C101  F123         	movff	arp_sendRequest@ipSender+1,arp_sendRequest@request+15
 15658  003676  C102  F124         	movff	arp_sendRequest@ipSender+2,arp_sendRequest@request+16
 15659  00367A  C103  F125         	movff	arp_sendRequest@ipSender+3,arp_sendRequest@request+17
 15660                           
 15661                           ; BSR set to: 1
 15662                           ;arp.c: 199: request.senderMACAddress = senderMAC;
 15663  00367E  EE21  F008         	lfsr	2,arp_sendRequest@senderMAC
 15664  003682  EE11  F01C         	lfsr	1,arp_sendRequest@request+8
 15665  003686  0E05               	movlw	5
 15666  003688                     u10291:
 15667  003688  CFDB FFE3          	movff	plusw2,plusw1
 15668  00368C  06E8               	decf	wreg,f,c
 15669  00368E  E2FC               	bc	u10291
 15670                           
 15671                           ; BSR set to: 1
 15672                           ;arp.c: 200: request.targetIPAddress = ipTarget;
 15673  003690  C104  F12C         	movff	arp_sendRequest@ipTarget,arp_sendRequest@request+24
 15674  003694  C105  F12D         	movff	arp_sendRequest@ipTarget+1,arp_sendRequest@request+25
 15675  003698  C106  F12E         	movff	arp_sendRequest@ipTarget+2,arp_sendRequest@request+26
 15676  00369C  C107  F12F         	movff	arp_sendRequest@ipTarget+3,arp_sendRequest@request+27
 15677                           
 15678                           ; BSR set to: 1
 15679                           ;arp.c: 201: request.targetMACAddress = targetMAC;
 15680  0036A0  EE21  F00E         	lfsr	2,arp_sendRequest@targetMAC
 15681  0036A4  EE11  F026         	lfsr	1,arp_sendRequest@request+18
 15682  0036A8  0E05               	movlw	5
 15683  0036AA                     u10301:
 15684  0036AA  CFDB FFE3          	movff	plusw2,plusw1
 15685  0036AE  06E8               	decf	wreg,f,c
 15686  0036B0  E2FC               	bc	u10301
 15687                           
 15688                           ; BSR set to: 1
 15689                           ;arp.c: 203: arp_send(request);
 15690  0036B2  EE21  F014         	lfsr	2,arp_sendRequest@request
 15691  0036B6  EE00  F0A7         	lfsr	0,arp_send@arp
 15692  0036BA  0E1F               	movlw	31
 15693  0036BC                     u10311:
 15694  0036BC  CFDB FFEB          	movff	plusw2,plusw0
 15695  0036C0  06E8               	decf	wreg,f,c
 15696  0036C2  E2FC               	bc	u10311
 15697  0036C4  ECAC  F00D         	call	_arp_send	;wreg free
 15698  0036C8  0012               	return		;funcret
 15699  0036CA                     __end_of_arp_sendRequest:
 15700                           	opt stack 0
 15701                           tblptru	equ	0xFF8
 15702                           tblptrh	equ	0xFF7
 15703                           tblptrl	equ	0xFF6
 15704                           tablat	equ	0xFF5
 15705                           prodh	equ	0xFF4
 15706                           prodl	equ	0xFF3
 15707                           intcon	equ	0xFF2
 15708                           intcon3	equ	0xFF0
 15709                           indf0	equ	0xFEF
 15710                           postinc0	equ	0xFEE
 15711                           plusw0	equ	0xFEB
 15712                           fsr0h	equ	0xFEA
 15713                           fsr0l	equ	0xFE9
 15714                           wreg	equ	0xFE8
 15715                           indf1	equ	0xFE7
 15716                           postinc1	equ	0xFE6
 15717                           postdec1	equ	0xFE5
 15718                           plusw1	equ	0xFE3
 15719                           fsr1h	equ	0xFE2
 15720                           fsr1l	equ	0xFE1
 15721                           indf2	equ	0xFDF
 15722                           postinc2	equ	0xFDE
 15723                           postdec2	equ	0xFDD
 15724                           plusw2	equ	0xFDB
 15725                           fsr2h	equ	0xFDA
 15726                           fsr2l	equ	0xFD9
 15727                           status	equ	0xFD8
 15728                           
 15729 ;; *************** function _mac_setAllZero *****************
 15730 ;; Defined at:
 15731 ;;		line 47 in file "src/eth/mac.c"
 15732 ;; Parameters:    Size  Location     Type
 15733 ;;  mac             2    0[BANK0 ] PTR struct macaddress
 15734 ;;		 -> arp_init@mac(6), arp_sendRequest@targetMAC(6), 
 15735 ;; Auto vars:     Size  Location     Type
 15736 ;;  i               1    2[BANK0 ] unsigned char 
 15737 ;; Return value:  Size  Location     Type
 15738 ;;                  1    wreg      void 
 15739 ;; Registers used:
 15740 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15741 ;; Tracked objects:
 15742 ;;		On entry : 0/0
 15743 ;;		On exit  : 0/0
 15744 ;;		Unchanged: 0/0
 15745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15746 ;;      Params:         0       2       0       0       0       0       0       0       0
 15747 ;;      Locals:         0       1       0       0       0       0       0       0       0
 15748 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15749 ;;      Totals:         0       3       0       0       0       0       0       0       0
 15750 ;;Total ram usage:        3 bytes
 15751 ;; Hardware stack levels used:    1
 15752 ;; Hardware stack levels required when called:    4
 15753 ;; This function calls:
 15754 ;;		Nothing
 15755 ;; This function is called by:
 15756 ;;		_arp_sendRequest
 15757 ;;		_arp_init
 15758 ;; This function uses a non-reentrant model
 15759 ;;
 15760                           
 15761                           	psect	text61
 15762  004A40                     __ptext61:
 15763                           	opt stack 0
 15764  004A40                     _mac_setAllZero:
 15765                           	opt stack 24
 15766                           
 15767                           ;mac.c: 48: for (uint8_t i = 0; i < 6; i++)
 15768                           
 15769                           ;incstack = 0
 15770  004A40  0E00               	movlw	0
 15771  004A42  0100               	movlb	0	; () banked
 15772  004A44  6F62               	movwf	mac_setAllZero@i& (0+255),b
 15773  004A46                     l8312:
 15774                           
 15775                           ; BSR set to: 0
 15776  004A46  0E05               	movlw	5
 15777  004A48  6562               	cpfsgt	mac_setAllZero@i& (0+255),b
 15778  004A4A  D001               	goto	l396
 15779  004A4C  0012               	return	
 15780  004A4E                     l396:
 15781                           
 15782                           ; BSR set to: 0
 15783                           ;mac.c: 49: mac->address[i] = 0x00;
 15784                           
 15785                           ; BSR set to: 0
 15786  004A4E  5162               	movf	mac_setAllZero@i& (0+255),w,b
 15787  004A50  0D01               	mullw	1
 15788  004A52  50F3               	movf	prodl,w,c
 15789  004A54  2560               	addwf	mac_setAllZero@mac& (0+255),w,b
 15790  004A56  6ED9               	movwf	fsr2l,c
 15791  004A58  50F4               	movf	prodh,w,c
 15792  004A5A  2161               	addwfc	(mac_setAllZero@mac+1)& (0+255),w,b
 15793  004A5C  6EDA               	movwf	fsr2h,c
 15794  004A5E  0E00               	movlw	0
 15795  004A60  6EDF               	movwf	indf2,c
 15796                           
 15797                           ; BSR set to: 0
 15798  004A62  2B62               	incf	mac_setAllZero@i& (0+255),f,b
 15799  004A64  D7F0               	goto	l8312
 15800  004A66                     __end_of_mac_setAllZero:
 15801                           	opt stack 0
 15802                           tblptru	equ	0xFF8
 15803                           tblptrh	equ	0xFF7
 15804                           tblptrl	equ	0xFF6
 15805                           tablat	equ	0xFF5
 15806                           prodh	equ	0xFF4
 15807                           prodl	equ	0xFF3
 15808                           intcon	equ	0xFF2
 15809                           intcon3	equ	0xFF0
 15810                           indf0	equ	0xFEF
 15811                           postinc0	equ	0xFEE
 15812                           plusw0	equ	0xFEB
 15813                           fsr0h	equ	0xFEA
 15814                           fsr0l	equ	0xFE9
 15815                           wreg	equ	0xFE8
 15816                           indf1	equ	0xFE7
 15817                           postinc1	equ	0xFE6
 15818                           postdec1	equ	0xFE5
 15819                           plusw1	equ	0xFE3
 15820                           fsr1h	equ	0xFE2
 15821                           fsr1l	equ	0xFE1
 15822                           indf2	equ	0xFDF
 15823                           postinc2	equ	0xFDE
 15824                           postdec2	equ	0xFDD
 15825                           plusw2	equ	0xFDB
 15826                           fsr2h	equ	0xFDA
 15827                           fsr2l	equ	0xFD9
 15828                           status	equ	0xFD8
 15829                           
 15830 ;; *************** function _ipv4_getIPSourceAddress *****************
 15831 ;; Defined at:
 15832 ;;		line 231 in file "src/stack/protocols/ipv4.c"
 15833 ;; Parameters:    Size  Location     Type
 15834 ;;		None
 15835 ;; Auto vars:     Size  Location     Type
 15836 ;;		None
 15837 ;; Return value:  Size  Location     Type
 15838 ;;                  4    0[BANK0 ] struct ipv4_address
 15839 ;; Registers used:
 15840 ;;		None
 15841 ;; Tracked objects:
 15842 ;;		On entry : 0/0
 15843 ;;		On exit  : 0/0
 15844 ;;		Unchanged: 0/0
 15845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15846 ;;      Params:         0       4       0       0       0       0       0       0       0
 15847 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15848 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15849 ;;      Totals:         0       4       0       0       0       0       0       0       0
 15850 ;;Total ram usage:        4 bytes
 15851 ;; Hardware stack levels used:    1
 15852 ;; Hardware stack levels required when called:    4
 15853 ;; This function calls:
 15854 ;;		Nothing
 15855 ;; This function is called by:
 15856 ;;		_arp_sendRequest
 15857 ;;		_arp_sendReply
 15858 ;; This function uses a non-reentrant model
 15859 ;;
 15860                           
 15861                           	psect	text62
 15862  004BD6                     __ptext62:
 15863                           	opt stack 0
 15864  004BD6                     _ipv4_getIPSourceAddress:
 15865                           	opt stack 22
 15866                           
 15867                           ;ipv4.c: 232: return ipSource;
 15868                           
 15869                           ; BSR set to: 0
 15870                           ;incstack = 0
 15871  004BD6  C1DB  F060         	movff	_ipSource,?_ipv4_getIPSourceAddress
 15872  004BDA  C1DC  F061         	movff	_ipSource+1,?_ipv4_getIPSourceAddress+1
 15873  004BDE  C1DD  F062         	movff	_ipSource+2,?_ipv4_getIPSourceAddress+2
 15874  004BE2  C1DE  F063         	movff	_ipSource+3,?_ipv4_getIPSourceAddress+3
 15875  004BE6  0012               	return		;funcret
 15876  004BE8                     __end_of_ipv4_getIPSourceAddress:
 15877                           	opt stack 0
 15878                           tblptru	equ	0xFF8
 15879                           tblptrh	equ	0xFF7
 15880                           tblptrl	equ	0xFF6
 15881                           tablat	equ	0xFF5
 15882                           prodh	equ	0xFF4
 15883                           prodl	equ	0xFF3
 15884                           intcon	equ	0xFF2
 15885                           intcon3	equ	0xFF0
 15886                           indf0	equ	0xFEF
 15887                           postinc0	equ	0xFEE
 15888                           plusw0	equ	0xFEB
 15889                           fsr0h	equ	0xFEA
 15890                           fsr0l	equ	0xFE9
 15891                           wreg	equ	0xFE8
 15892                           indf1	equ	0xFE7
 15893                           postinc1	equ	0xFE6
 15894                           postdec1	equ	0xFE5
 15895                           plusw1	equ	0xFE3
 15896                           fsr1h	equ	0xFE2
 15897                           fsr1l	equ	0xFE1
 15898                           indf2	equ	0xFDF
 15899                           postinc2	equ	0xFDE
 15900                           postdec2	equ	0xFDD
 15901                           plusw2	equ	0xFDB
 15902                           fsr2h	equ	0xFDA
 15903                           fsr2l	equ	0xFD9
 15904                           status	equ	0xFD8
 15905                           
 15906 ;; *************** function _ethernetController_getMacAddress *****************
 15907 ;; Defined at:
 15908 ;;		line 157 in file "src/enc424j600/ENC424J600.c"
 15909 ;; Parameters:    Size  Location     Type
 15910 ;;		None
 15911 ;; Auto vars:     Size  Location     Type
 15912 ;;  mac             6   20[BANK0 ] struct macaddress
 15913 ;; Return value:  Size  Location     Type
 15914 ;;                  6   14[BANK0 ] struct macaddress
 15915 ;; Registers used:
 15916 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 15917 ;; Tracked objects:
 15918 ;;		On entry : 0/0
 15919 ;;		On exit  : 0/0
 15920 ;;		Unchanged: 0/0
 15921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15922 ;;      Params:         0       6       0       0       0       0       0       0       0
 15923 ;;      Locals:         0       6       0       0       0       0       0       0       0
 15924 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15925 ;;      Totals:         0      12       0       0       0       0       0       0       0
 15926 ;;Total ram usage:       12 bytes
 15927 ;; Hardware stack levels used:    1
 15928 ;; Hardware stack levels required when called:    7
 15929 ;; This function calls:
 15930 ;;		_enc424j600_readControlRegisterUnbanked
 15931 ;; This function is called by:
 15932 ;;		_main
 15933 ;;		_arp_sendRequest
 15934 ;;		_arp_sendReply
 15935 ;; This function uses a non-reentrant model
 15936 ;;
 15937                           
 15938                           	psect	text63
 15939  003E86                     __ptext63:
 15940                           	opt stack 0
 15941  003E86                     _ethernetController_getMacAddress:
 15942                           	opt stack 19
 15943                           
 15944                           ;ENC424J600.c: 158: macaddress_t mac;
 15945                           ;ENC424J600.c: 159: enc424j600_readControlRegisterUnbanked(0x04 + 0x60, &mac.address[0])
      +                          ;
 15946                           
 15947                           ;incstack = 0
 15948  003E86  0E74               	movlw	low ethernetController_getMacAddress@mac
 15949  003E88  0100               	movlb	0	; () banked
 15950  003E8A  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 15951  003E8C  0E00               	movlw	high ethernetController_getMacAddress@mac
 15952  003E8E  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 15953  003E90  0E64               	movlw	100
 15954  003E92  EC15  F024         	call	_enc424j600_readControlRegisterUnbanked
 15955                           
 15956                           ;ENC424J600.c: 160: enc424j600_readControlRegisterUnbanked(0x05 + 0x60, &mac.address[1])
      +                          ;
 15957  003E96  0E75               	movlw	low (ethernetController_getMacAddress@mac+1)
 15958  003E98  0100               	movlb	0	; () banked
 15959  003E9A  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 15960  003E9C  0E00               	movlw	high (ethernetController_getMacAddress@mac+1)
 15961  003E9E  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 15962  003EA0  0E65               	movlw	101
 15963  003EA2  EC15  F024         	call	_enc424j600_readControlRegisterUnbanked
 15964                           
 15965                           ;ENC424J600.c: 161: enc424j600_readControlRegisterUnbanked(0x02 + 0x60, &mac.address[2])
      +                          ;
 15966  003EA6  0E76               	movlw	low (ethernetController_getMacAddress@mac+2)
 15967  003EA8  0100               	movlb	0	; () banked
 15968  003EAA  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 15969  003EAC  0E00               	movlw	high (ethernetController_getMacAddress@mac+2)
 15970  003EAE  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 15971  003EB0  0E62               	movlw	98
 15972  003EB2  EC15  F024         	call	_enc424j600_readControlRegisterUnbanked
 15973                           
 15974                           ;ENC424J600.c: 162: enc424j600_readControlRegisterUnbanked(0x03 + 0x60, &mac.address[3])
      +                          ;
 15975  003EB6  0E77               	movlw	low (ethernetController_getMacAddress@mac+3)
 15976  003EB8  0100               	movlb	0	; () banked
 15977  003EBA  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 15978  003EBC  0E00               	movlw	high (ethernetController_getMacAddress@mac+3)
 15979  003EBE  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 15980  003EC0  0E63               	movlw	99
 15981  003EC2  EC15  F024         	call	_enc424j600_readControlRegisterUnbanked
 15982                           
 15983                           ;ENC424J600.c: 163: enc424j600_readControlRegisterUnbanked(0x00 + 0x60, &mac.address[4])
      +                          ;
 15984  003EC6  0E78               	movlw	low (ethernetController_getMacAddress@mac+4)
 15985  003EC8  0100               	movlb	0	; () banked
 15986  003ECA  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 15987  003ECC  0E00               	movlw	high (ethernetController_getMacAddress@mac+4)
 15988  003ECE  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 15989  003ED0  0E60               	movlw	96
 15990  003ED2  EC15  F024         	call	_enc424j600_readControlRegisterUnbanked
 15991                           
 15992                           ;ENC424J600.c: 164: enc424j600_readControlRegisterUnbanked(0x01 + 0x60, &mac.address[5])
      +                          ;
 15993  003ED6  0E79               	movlw	low (ethernetController_getMacAddress@mac+5)
 15994  003ED8  0100               	movlb	0	; () banked
 15995  003EDA  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 15996  003EDC  0E00               	movlw	high (ethernetController_getMacAddress@mac+5)
 15997  003EDE  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 15998  003EE0  0E61               	movlw	97
 15999  003EE2  EC15  F024         	call	_enc424j600_readControlRegisterUnbanked
 16000                           
 16001                           ;ENC424J600.c: 165: return mac;
 16002  003EE6  EE20  F074         	lfsr	2,ethernetController_getMacAddress@mac
 16003  003EEA  EE00  F06E         	lfsr	0,?_ethernetController_getMacAddress
 16004  003EEE  0E05               	movlw	5
 16005  003EF0                     u9001:
 16006  003EF0  CFDB FFEB          	movff	plusw2,plusw0
 16007  003EF4  06E8               	decf	wreg,f,c
 16008  003EF6  E2FC               	bc	u9001
 16009  003EF8  0012               	return	
 16010  003EFA                     __end_of_ethernetController_getMacAddress:
 16011                           	opt stack 0
 16012                           tblptru	equ	0xFF8
 16013                           tblptrh	equ	0xFF7
 16014                           tblptrl	equ	0xFF6
 16015                           tablat	equ	0xFF5
 16016                           prodh	equ	0xFF4
 16017                           prodl	equ	0xFF3
 16018                           intcon	equ	0xFF2
 16019                           intcon3	equ	0xFF0
 16020                           indf0	equ	0xFEF
 16021                           postinc0	equ	0xFEE
 16022                           plusw0	equ	0xFEB
 16023                           fsr0h	equ	0xFEA
 16024                           fsr0l	equ	0xFE9
 16025                           wreg	equ	0xFE8
 16026                           indf1	equ	0xFE7
 16027                           postinc1	equ	0xFE6
 16028                           postdec1	equ	0xFE5
 16029                           plusw1	equ	0xFE3
 16030                           fsr1h	equ	0xFE2
 16031                           fsr1l	equ	0xFE1
 16032                           indf2	equ	0xFDF
 16033                           postinc2	equ	0xFDE
 16034                           postdec2	equ	0xFDD
 16035                           plusw2	equ	0xFDB
 16036                           fsr2h	equ	0xFDA
 16037                           fsr2l	equ	0xFD9
 16038                           status	equ	0xFD8
 16039                           
 16040 ;; *************** function _arp_send *****************
 16041 ;; Defined at:
 16042 ;;		line 136 in file "src/stack/protocols/arp.c"
 16043 ;; Parameters:    Size  Location     Type
 16044 ;;  arp            32   71[BANK0 ] struct arp_message
 16045 ;; Auto vars:     Size  Location     Type
 16046 ;;  i               1  112[BANK0 ] unsigned char 
 16047 ;;  i               1  111[BANK0 ] unsigned char 
 16048 ;;  i               1  110[BANK0 ] unsigned char 
 16049 ;;  i               1  109[BANK0 ] unsigned char 
 16050 ;;  ethFrame       34  113[BANK0 ] struct ethernetFrame
 16051 ;;  field           9  147[BANK0 ] struct memoryField
 16052 ;;  destination     6  103[BANK0 ] struct macaddress
 16053 ;; Return value:  Size  Location     Type
 16054 ;;                  1    wreg      void 
 16055 ;; Registers used:
 16056 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16057 ;; Tracked objects:
 16058 ;;		On entry : 0/0
 16059 ;;		On exit  : 0/0
 16060 ;;		Unchanged: 0/0
 16061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16062 ;;      Params:         0      32       0       0       0       0       0       0       0
 16063 ;;      Locals:         0      53       0       0       0       0       0       0       0
 16064 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16065 ;;      Totals:         0      85       0       0       0       0       0       0       0
 16066 ;;Total ram usage:       85 bytes
 16067 ;; Hardware stack levels used:    1
 16068 ;; Hardware stack levels required when called:    9
 16069 ;; This function calls:
 16070 ;;		_ethernetController_getSourceMACAddress
 16071 ;;		_ethernetController_sendPacket
 16072 ;;		_ethernetController_streamToTransmitBuffer
 16073 ;;		_ethernet_txFrameRequest
 16074 ;;		_mac_setToBroadcast
 16075 ;; This function is called by:
 16076 ;;		_arp_sendRequest
 16077 ;;		_arp_sendReply
 16078 ;; This function uses a non-reentrant model
 16079 ;;
 16080                           
 16081                           	psect	text64
 16082  001B58                     __ptext64:
 16083                           	opt stack 0
 16084  001B58                     _arp_send:
 16085                           	opt stack 17
 16086                           
 16087                           ;arp.c: 137: memoryField_t field;
 16088                           ;arp.c: 138: ethernetFrame_t ethFrame;
 16089                           ;arp.c: 141: macaddress_t destination;
 16090                           ;arp.c: 142: mac_setToBroadcast(&destination);
 16091                           
 16092                           ;incstack = 0
 16093  001B58  0EC7               	movlw	low arp_send@destination
 16094  001B5A  0100               	movlb	0	; () banked
 16095  001B5C  6F60               	movwf	mac_setToBroadcast@mac& (0+255),b
 16096  001B5E  0E00               	movlw	high arp_send@destination
 16097  001B60  6F61               	movwf	(mac_setToBroadcast@mac+1)& (0+255),b
 16098  001B62  EC33  F025         	call	_mac_setToBroadcast	;wreg free
 16099                           
 16100                           ;arp.c: 143: ethFrame.destination = destination;
 16101  001B66  EE20  F0C7         	lfsr	2,arp_send@destination
 16102  001B6A  EE10  F0D9         	lfsr	1,arp_send@ethFrame+8
 16103  001B6E  0E05               	movlw	5
 16104  001B70                     u9351:
 16105  001B70  CFDB FFE3          	movff	plusw2,plusw1
 16106  001B74  06E8               	decf	wreg,f,c
 16107  001B76  E2FC               	bc	u9351
 16108                           
 16109                           ;arp.c: 147: ethFrame.length = 36;
 16110  001B78  0E00               	movlw	0
 16111  001B7A  0100               	movlb	0	; () banked
 16112  001B7C  6FD2               	movwf	(arp_send@ethFrame+1)& (0+255),b
 16113  001B7E  0E24               	movlw	36
 16114  001B80  6FD1               	movwf	arp_send@ethFrame& (0+255),b
 16115                           
 16116                           ; BSR set to: 0
 16117                           ;arp.c: 148: ethFrame.source = ethernetController_getSourceMACAddress(field);
 16118  001B82  EE20  F0F3         	lfsr	2,arp_send@field
 16119  001B86  EE00  F06F         	lfsr	0,ethernetController_getSourceMACAddress@field
 16120  001B8A  0E08               	movlw	8
 16121  001B8C                     u9361:
 16122  001B8C  CFDB FFEB          	movff	plusw2,plusw0
 16123  001B90  06E8               	decf	wreg,f,c
 16124  001B92  E2FC               	bc	u9361
 16125  001B94  ECEE  F01F         	call	_ethernetController_getSourceMACAddress	;wreg free
 16126  001B98  EE20  F0D3         	lfsr	2,arp_send@ethFrame+2
 16127  001B9C  0E05               	movlw	5
 16128  001B9E                     u9371:
 16129  001B9E  CFEB FFDB          	movff	plusw0,plusw2
 16130  001BA2  06E8               	decf	wreg,f,c
 16131  001BA4  E2FC               	bc	u9371
 16132                           
 16133                           ;arp.c: 149: ethFrame.ethertype = ETHERTYPE_ARP;
 16134  001BA6  0E08               	movlw	8
 16135  001BA8  0100               	movlb	0	; () banked
 16136  001BAA  6FE0               	movwf	(arp_send@ethFrame+15)& (0+255),b
 16137  001BAC  0E06               	movlw	6
 16138  001BAE  6FDF               	movwf	(arp_send@ethFrame+14)& (0+255),b
 16139                           
 16140                           ; BSR set to: 0
 16141                           ;arp.c: 151: ethernet_txFrameRequest(&ethFrame);
 16142  001BB0  0ED1               	movlw	low arp_send@ethFrame
 16143  001BB2  6FA2               	movwf	ethernet_txFrameRequest@frame& (0+255),b
 16144  001BB4  0E00               	movlw	high arp_send@ethFrame
 16145  001BB6  6FA3               	movwf	(ethernet_txFrameRequest@frame+1)& (0+255),b
 16146  001BB8  EC0A  F019         	call	_ethernet_txFrameRequest	;wreg free
 16147                           
 16148                           ;arp.c: 153: if (ethFrame.memory.fOutOfMemory) {
 16149  001BBC  0100               	movlb	0	; () banked
 16150  001BBE  51E8               	movf	(arp_send@ethFrame+23)& (0+255),w,b
 16151  001BC0  A4D8               	btfss	status,2,c
 16152  001BC2  0012               	return	
 16153                           
 16154                           ; BSR set to: 0
 16155                           ;arp.c: 155: }
 16156                           ;arp.c: 157: field.start = ethFrame.memory.start + 8;
 16157                           
 16158                           ; BSR set to: 0
 16159                           
 16160                           ; BSR set to: 0
 16161                           ;arp.c: 154: return;
 16162  001BC4  0E08               	movlw	8
 16163  001BC6  25E1               	addwf	(arp_send@ethFrame+16)& (0+255),w,b
 16164  001BC8  6FF3               	movwf	arp_send@field& (0+255),b
 16165  001BCA  0E00               	movlw	0
 16166  001BCC  21E2               	addwfc	(arp_send@ethFrame+17)& (0+255),w,b
 16167  001BCE  6FF4               	movwf	(arp_send@field+1)& (0+255),b
 16168                           
 16169                           ; BSR set to: 0
 16170                           ;arp.c: 158: field.end = ethFrame.memory.end;
 16171  001BD0  C0E3  F0F5         	movff	arp_send@ethFrame+18,arp_send@field+2
 16172  001BD4  C0E4  F0F6         	movff	arp_send@ethFrame+19,arp_send@field+3
 16173                           
 16174                           ; BSR set to: 0
 16175                           ;arp.c: 159: field.length = 28;
 16176  001BD8  0E00               	movlw	0
 16177  001BDA  6FF8               	movwf	(arp_send@field+5)& (0+255),b
 16178  001BDC  0E1C               	movlw	28
 16179  001BDE  6FF7               	movwf	(arp_send@field+4)& (0+255),b
 16180                           
 16181                           ; BSR set to: 0
 16182                           ;arp.c: 161: ethernetController_streamToTransmitBuffer((arp.htype & 0xff00) >> 8, field)
      +                          ;
 16183  001BE0  EE20  F0F3         	lfsr	2,arp_send@field
 16184  001BE4  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 16185  001BE8  0E08               	movlw	8
 16186  001BEA                     u9391:
 16187  001BEA  CFDB FFEB          	movff	plusw2,plusw0
 16188  001BEE  06E8               	decf	wreg,f,c
 16189  001BF0  E2FC               	bc	u9391
 16190  001BF2  51A8               	movf	(arp_send@arp+1)& (0+255),w,b
 16191  001BF4  ECCD  F01E         	call	_ethernetController_streamToTransmitBuffer
 16192                           
 16193                           ;arp.c: 162: ethernetController_streamToTransmitBuffer(arp.htype & 0x00ff, field);
 16194  001BF8  EE20  F0F3         	lfsr	2,arp_send@field
 16195  001BFC  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 16196  001C00  0E08               	movlw	8
 16197  001C02                     u9401:
 16198  001C02  CFDB FFEB          	movff	plusw2,plusw0
 16199  001C06  06E8               	decf	wreg,f,c
 16200  001C08  E2FC               	bc	u9401
 16201  001C0A  0100               	movlb	0	; () banked
 16202  001C0C  51A7               	movf	arp_send@arp& (0+255),w,b
 16203  001C0E  ECCD  F01E         	call	_ethernetController_streamToTransmitBuffer
 16204                           
 16205                           ;arp.c: 163: ethernetController_streamToTransmitBuffer((arp.ptype & 0xff00) >> 8, field)
      +                          ;
 16206  001C12  EE20  F0F3         	lfsr	2,arp_send@field
 16207  001C16  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 16208  001C1A  0E08               	movlw	8
 16209  001C1C                     u9411:
 16210  001C1C  CFDB FFEB          	movff	plusw2,plusw0
 16211  001C20  06E8               	decf	wreg,f,c
 16212  001C22  E2FC               	bc	u9411
 16213  001C24  0100               	movlb	0	; () banked
 16214  001C26  51AA               	movf	(arp_send@arp+3)& (0+255),w,b
 16215  001C28  ECCD  F01E         	call	_ethernetController_streamToTransmitBuffer
 16216                           
 16217                           ;arp.c: 164: ethernetController_streamToTransmitBuffer(arp.ptype & 0x00ff, field);
 16218  001C2C  EE20  F0F3         	lfsr	2,arp_send@field
 16219  001C30  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 16220  001C34  0E08               	movlw	8
 16221  001C36                     u9421:
 16222  001C36  CFDB FFEB          	movff	plusw2,plusw0
 16223  001C3A  06E8               	decf	wreg,f,c
 16224  001C3C  E2FC               	bc	u9421
 16225  001C3E  0100               	movlb	0	; () banked
 16226  001C40  51A9               	movf	(arp_send@arp+2)& (0+255),w,b
 16227  001C42  ECCD  F01E         	call	_ethernetController_streamToTransmitBuffer
 16228                           
 16229                           ;arp.c: 165: ethernetController_streamToTransmitBuffer(arp.hlen, field);
 16230  001C46  EE20  F0F3         	lfsr	2,arp_send@field
 16231  001C4A  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 16232  001C4E  0E08               	movlw	8
 16233  001C50                     u9431:
 16234  001C50  CFDB FFEB          	movff	plusw2,plusw0
 16235  001C54  06E8               	decf	wreg,f,c
 16236  001C56  E2FC               	bc	u9431
 16237  001C58  0100               	movlb	0	; () banked
 16238  001C5A  51AB               	movf	(arp_send@arp+4)& (0+255),w,b
 16239  001C5C  ECCD  F01E         	call	_ethernetController_streamToTransmitBuffer
 16240                           
 16241                           ;arp.c: 166: ethernetController_streamToTransmitBuffer(arp.plen, field);
 16242  001C60  EE20  F0F3         	lfsr	2,arp_send@field
 16243  001C64  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 16244  001C68  0E08               	movlw	8
 16245  001C6A                     u9441:
 16246  001C6A  CFDB FFEB          	movff	plusw2,plusw0
 16247  001C6E  06E8               	decf	wreg,f,c
 16248  001C70  E2FC               	bc	u9441
 16249  001C72  0100               	movlb	0	; () banked
 16250  001C74  51AC               	movf	(arp_send@arp+5)& (0+255),w,b
 16251  001C76  ECCD  F01E         	call	_ethernetController_streamToTransmitBuffer
 16252                           
 16253                           ;arp.c: 167: ethernetController_streamToTransmitBuffer((arp.operation & 0xff00) >> 8, fi
      +                          eld);
 16254  001C7A  EE20  F0F3         	lfsr	2,arp_send@field
 16255  001C7E  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 16256  001C82  0E08               	movlw	8
 16257  001C84                     u9451:
 16258  001C84  CFDB FFEB          	movff	plusw2,plusw0
 16259  001C88  06E8               	decf	wreg,f,c
 16260  001C8A  E2FC               	bc	u9451
 16261  001C8C  0100               	movlb	0	; () banked
 16262  001C8E  51AE               	movf	(arp_send@arp+7)& (0+255),w,b
 16263  001C90  ECCD  F01E         	call	_ethernetController_streamToTransmitBuffer
 16264                           
 16265                           ;arp.c: 168: ethernetController_streamToTransmitBuffer(arp.operation & 0x00ff, field);
 16266  001C94  EE20  F0F3         	lfsr	2,arp_send@field
 16267  001C98  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 16268  001C9C  0E08               	movlw	8
 16269  001C9E                     u9461:
 16270  001C9E  CFDB FFEB          	movff	plusw2,plusw0
 16271  001CA2  06E8               	decf	wreg,f,c
 16272  001CA4  E2FC               	bc	u9461
 16273  001CA6  0100               	movlb	0	; () banked
 16274  001CA8  51AD               	movf	(arp_send@arp+6)& (0+255),w,b
 16275  001CAA  ECCD  F01E         	call	_ethernetController_streamToTransmitBuffer
 16276                           
 16277                           ;arp.c: 169: for (uint8_t i = 0; i < arp.hlen; i++)
 16278  001CAE  0E00               	movlw	0
 16279  001CB0  0100               	movlb	0	; () banked
 16280  001CB2  6FCD               	movwf	arp_send@i& (0+255),b
 16281  001CB4  D01A               	goto	l934
 16282  001CB6                     
 16283                           ; BSR set to: 0
 16284                           ;arp.c: 170: ethernetController_streamToTransmitBuffer(arp.senderMACAddress.address[i], 
      +                          field);
 16285                           
 16286                           ; BSR set to: 0
 16287  001CB6  EE20  F0F3         	lfsr	2,arp_send@field
 16288  001CBA  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 16289  001CBE  0E08               	movlw	8
 16290  001CC0                     u9471:
 16291  001CC0  CFDB FFEB          	movff	plusw2,plusw0
 16292  001CC4  06E8               	decf	wreg,f,c
 16293  001CC6  E2FC               	bc	u9471
 16294  001CC8  51CD               	movf	arp_send@i& (0+255),w,b
 16295  001CCA  0D01               	mullw	1
 16296  001CCC  0E08               	movlw	8
 16297  001CCE  26F3               	addwf	prodl,f,c
 16298  001CD0  0E00               	movlw	0
 16299  001CD2  22F4               	addwfc	prodh,f,c
 16300  001CD4  0EA7               	movlw	low arp_send@arp
 16301  001CD6  24F3               	addwf	prodl,w,c
 16302  001CD8  6ED9               	movwf	fsr2l,c
 16303  001CDA  0E00               	movlw	high arp_send@arp
 16304  001CDC  20F4               	addwfc	prodh,w,c
 16305  001CDE  6EDA               	movwf	fsr2h,c
 16306  001CE0  50DF               	movf	indf2,w,c
 16307  001CE2  ECCD  F01E         	call	_ethernetController_streamToTransmitBuffer
 16308  001CE6  0100               	movlb	0	; () banked
 16309  001CE8  2BCD               	incf	arp_send@i& (0+255),f,b
 16310  001CEA                     l934:
 16311                           
 16312                           ; BSR set to: 0
 16313                           
 16314                           ; BSR set to: 0
 16315  001CEA  51AB               	movf	(arp_send@arp+4)& (0+255),w,b
 16316  001CEC  5DCD               	subwf	arp_send@i& (0+255),w,b
 16317  001CEE  A0D8               	btfss	status,0,c
 16318  001CF0  D7E2               	goto	l935
 16319                           
 16320                           ; BSR set to: 0
 16321                           ;arp.c: 171: for (uint8_t i = 0; i < arp.plen; i++)
 16322                           
 16323                           ; BSR set to: 0
 16324  001CF2  0E00               	movlw	0
 16325  001CF4  6FCE               	movwf	arp_send@i_3068& (0+255),b
 16326  001CF6  D01A               	goto	l937
 16327  001CF8                     
 16328                           ; BSR set to: 0
 16329                           ;arp.c: 172: ethernetController_streamToTransmitBuffer(arp.senderIPAddress.address[i], f
      +                          ield);
 16330                           
 16331                           ; BSR set to: 0
 16332  001CF8  EE20  F0F3         	lfsr	2,arp_send@field
 16333  001CFC  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 16334  001D00  0E08               	movlw	8
 16335  001D02                     u9491:
 16336  001D02  CFDB FFEB          	movff	plusw2,plusw0
 16337  001D06  06E8               	decf	wreg,f,c
 16338  001D08  E2FC               	bc	u9491
 16339  001D0A  51CE               	movf	arp_send@i_3068& (0+255),w,b
 16340  001D0C  0D01               	mullw	1
 16341  001D0E  0E0E               	movlw	14
 16342  001D10  26F3               	addwf	prodl,f,c
 16343  001D12  0E00               	movlw	0
 16344  001D14  22F4               	addwfc	prodh,f,c
 16345  001D16  0EA7               	movlw	low arp_send@arp
 16346  001D18  24F3               	addwf	prodl,w,c
 16347  001D1A  6ED9               	movwf	fsr2l,c
 16348  001D1C  0E00               	movlw	high arp_send@arp
 16349  001D1E  20F4               	addwfc	prodh,w,c
 16350  001D20  6EDA               	movwf	fsr2h,c
 16351  001D22  50DF               	movf	indf2,w,c
 16352  001D24  ECCD  F01E         	call	_ethernetController_streamToTransmitBuffer
 16353  001D28  0100               	movlb	0	; () banked
 16354  001D2A  2BCE               	incf	arp_send@i_3068& (0+255),f,b
 16355  001D2C                     l937:
 16356                           
 16357                           ; BSR set to: 0
 16358                           
 16359                           ; BSR set to: 0
 16360  001D2C  51AC               	movf	(arp_send@arp+5)& (0+255),w,b
 16361  001D2E  5DCE               	subwf	arp_send@i_3068& (0+255),w,b
 16362  001D30  A0D8               	btfss	status,0,c
 16363  001D32  D7E2               	goto	l938
 16364                           
 16365                           ; BSR set to: 0
 16366                           ;arp.c: 173: for (uint8_t i = 0; i < arp.hlen; i++)
 16367                           
 16368                           ; BSR set to: 0
 16369  001D34  0E00               	movlw	0
 16370  001D36  6FCF               	movwf	arp_send@i_3069& (0+255),b
 16371  001D38  D01A               	goto	l940
 16372  001D3A                     
 16373                           ; BSR set to: 0
 16374                           ;arp.c: 174: ethernetController_streamToTransmitBuffer(arp.targetMACAddress.address[i], 
      +                          field);
 16375                           
 16376                           ; BSR set to: 0
 16377  001D3A  EE20  F0F3         	lfsr	2,arp_send@field
 16378  001D3E  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 16379  001D42  0E08               	movlw	8
 16380  001D44                     u9511:
 16381  001D44  CFDB FFEB          	movff	plusw2,plusw0
 16382  001D48  06E8               	decf	wreg,f,c
 16383  001D4A  E2FC               	bc	u9511
 16384  001D4C  51CF               	movf	arp_send@i_3069& (0+255),w,b
 16385  001D4E  0D01               	mullw	1
 16386  001D50  0E12               	movlw	18
 16387  001D52  26F3               	addwf	prodl,f,c
 16388  001D54  0E00               	movlw	0
 16389  001D56  22F4               	addwfc	prodh,f,c
 16390  001D58  0EA7               	movlw	low arp_send@arp
 16391  001D5A  24F3               	addwf	prodl,w,c
 16392  001D5C  6ED9               	movwf	fsr2l,c
 16393  001D5E  0E00               	movlw	high arp_send@arp
 16394  001D60  20F4               	addwfc	prodh,w,c
 16395  001D62  6EDA               	movwf	fsr2h,c
 16396  001D64  50DF               	movf	indf2,w,c
 16397  001D66  ECCD  F01E         	call	_ethernetController_streamToTransmitBuffer
 16398  001D6A  0100               	movlb	0	; () banked
 16399  001D6C  2BCF               	incf	arp_send@i_3069& (0+255),f,b
 16400  001D6E                     l940:
 16401                           
 16402                           ; BSR set to: 0
 16403                           
 16404                           ; BSR set to: 0
 16405  001D6E  51AB               	movf	(arp_send@arp+4)& (0+255),w,b
 16406  001D70  5DCF               	subwf	arp_send@i_3069& (0+255),w,b
 16407  001D72  A0D8               	btfss	status,0,c
 16408  001D74  D7E2               	goto	l941
 16409                           
 16410                           ; BSR set to: 0
 16411                           ;arp.c: 176: for (uint8_t i = 0; i < arp.plen; i++)
 16412                           
 16413                           ; BSR set to: 0
 16414  001D76  0E00               	movlw	0
 16415  001D78  6FD0               	movwf	arp_send@i_3070& (0+255),b
 16416  001D7A  D01A               	goto	l943
 16417  001D7C                     
 16418                           ; BSR set to: 0
 16419                           ;arp.c: 177: ethernetController_streamToTransmitBuffer(arp.targetIPAddress.address[i], f
      +                          ield);
 16420                           
 16421                           ; BSR set to: 0
 16422  001D7C  EE20  F0F3         	lfsr	2,arp_send@field
 16423  001D80  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 16424  001D84  0E08               	movlw	8
 16425  001D86                     u9531:
 16426  001D86  CFDB FFEB          	movff	plusw2,plusw0
 16427  001D8A  06E8               	decf	wreg,f,c
 16428  001D8C  E2FC               	bc	u9531
 16429  001D8E  51D0               	movf	arp_send@i_3070& (0+255),w,b
 16430  001D90  0D01               	mullw	1
 16431  001D92  0E18               	movlw	24
 16432  001D94  26F3               	addwf	prodl,f,c
 16433  001D96  0E00               	movlw	0
 16434  001D98  22F4               	addwfc	prodh,f,c
 16435  001D9A  0EA7               	movlw	low arp_send@arp
 16436  001D9C  24F3               	addwf	prodl,w,c
 16437  001D9E  6ED9               	movwf	fsr2l,c
 16438  001DA0  0E00               	movlw	high arp_send@arp
 16439  001DA2  20F4               	addwfc	prodh,w,c
 16440  001DA4  6EDA               	movwf	fsr2h,c
 16441  001DA6  50DF               	movf	indf2,w,c
 16442  001DA8  ECCD  F01E         	call	_ethernetController_streamToTransmitBuffer
 16443  001DAC  0100               	movlb	0	; () banked
 16444  001DAE  2BD0               	incf	arp_send@i_3070& (0+255),f,b
 16445  001DB0                     l943:
 16446                           
 16447                           ; BSR set to: 0
 16448                           
 16449                           ; BSR set to: 0
 16450  001DB0  51AC               	movf	(arp_send@arp+5)& (0+255),w,b
 16451  001DB2  5DD0               	subwf	arp_send@i_3070& (0+255),w,b
 16452  001DB4  A0D8               	btfss	status,0,c
 16453  001DB6  D7E2               	goto	l944
 16454                           
 16455                           ; BSR set to: 0
 16456                           ;arp.c: 179: ethernetController_sendPacket(ethFrame.memory);
 16457                           
 16458                           ; BSR set to: 0
 16459  001DB8  EE20  F0E1         	lfsr	2,arp_send@ethFrame+16
 16460  001DBC  EE00  F072         	lfsr	0,ethernetController_sendPacket@field
 16461  001DC0  0E08               	movlw	8
 16462  001DC2                     u9551:
 16463  001DC2  CFDB FFEB          	movff	plusw2,plusw0
 16464  001DC6  06E8               	decf	wreg,f,c
 16465  001DC8  E2FC               	bc	u9551
 16466  001DCA  ECF8  F024         	call	_ethernetController_sendPacket	;wreg free
 16467  001DCE  0012               	return		;funcret
 16468  001DD0                     __end_of_arp_send:
 16469                           	opt stack 0
 16470                           tblptru	equ	0xFF8
 16471                           tblptrh	equ	0xFF7
 16472                           tblptrl	equ	0xFF6
 16473                           tablat	equ	0xFF5
 16474                           prodh	equ	0xFF4
 16475                           prodl	equ	0xFF3
 16476                           intcon	equ	0xFF2
 16477                           intcon3	equ	0xFF0
 16478                           indf0	equ	0xFEF
 16479                           postinc0	equ	0xFEE
 16480                           plusw0	equ	0xFEB
 16481                           fsr0h	equ	0xFEA
 16482                           fsr0l	equ	0xFE9
 16483                           wreg	equ	0xFE8
 16484                           indf1	equ	0xFE7
 16485                           postinc1	equ	0xFE6
 16486                           postdec1	equ	0xFE5
 16487                           plusw1	equ	0xFE3
 16488                           fsr1h	equ	0xFE2
 16489                           fsr1l	equ	0xFE1
 16490                           indf2	equ	0xFDF
 16491                           postinc2	equ	0xFDE
 16492                           postdec2	equ	0xFDD
 16493                           plusw2	equ	0xFDB
 16494                           fsr2h	equ	0xFDA
 16495                           fsr2l	equ	0xFD9
 16496                           status	equ	0xFD8
 16497                           
 16498 ;; *************** function _mac_setToBroadcast *****************
 16499 ;; Defined at:
 16500 ;;		line 26 in file "src/eth/mac.c"
 16501 ;; Parameters:    Size  Location     Type
 16502 ;;  mac             2    0[BANK0 ] PTR struct macaddress
 16503 ;;		 -> arp_send@destination(6), 
 16504 ;; Auto vars:     Size  Location     Type
 16505 ;;  i               1    2[BANK0 ] unsigned char 
 16506 ;; Return value:  Size  Location     Type
 16507 ;;                  1    wreg      void 
 16508 ;; Registers used:
 16509 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 16510 ;; Tracked objects:
 16511 ;;		On entry : 0/0
 16512 ;;		On exit  : 0/0
 16513 ;;		Unchanged: 0/0
 16514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16515 ;;      Params:         0       2       0       0       0       0       0       0       0
 16516 ;;      Locals:         0       1       0       0       0       0       0       0       0
 16517 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16518 ;;      Totals:         0       3       0       0       0       0       0       0       0
 16519 ;;Total ram usage:        3 bytes
 16520 ;; Hardware stack levels used:    1
 16521 ;; Hardware stack levels required when called:    4
 16522 ;; This function calls:
 16523 ;;		Nothing
 16524 ;; This function is called by:
 16525 ;;		_arp_send
 16526 ;; This function uses a non-reentrant model
 16527 ;;
 16528                           
 16529                           	psect	text65
 16530  004A66                     __ptext65:
 16531                           	opt stack 0
 16532  004A66                     _mac_setToBroadcast:
 16533                           	opt stack 21
 16534                           
 16535                           ;mac.c: 27: for (uint8_t i = 0; i < 6; i++)
 16536                           
 16537                           ;incstack = 0
 16538  004A66  0E00               	movlw	0
 16539  004A68  0100               	movlb	0	; () banked
 16540  004A6A  6F62               	movwf	mac_setToBroadcast@i& (0+255),b
 16541  004A6C                     l8068:
 16542                           
 16543                           ; BSR set to: 0
 16544  004A6C  0E05               	movlw	5
 16545  004A6E  6562               	cpfsgt	mac_setToBroadcast@i& (0+255),b
 16546  004A70  D001               	goto	l379
 16547  004A72  0012               	return	
 16548  004A74                     l379:
 16549                           
 16550                           ; BSR set to: 0
 16551                           ;mac.c: 28: mac->address[i] = 0xff;
 16552                           
 16553                           ; BSR set to: 0
 16554  004A74  5162               	movf	mac_setToBroadcast@i& (0+255),w,b
 16555  004A76  0D01               	mullw	1
 16556  004A78  50F3               	movf	prodl,w,c
 16557  004A7A  2560               	addwf	mac_setToBroadcast@mac& (0+255),w,b
 16558  004A7C  6ED9               	movwf	fsr2l,c
 16559  004A7E  50F4               	movf	prodh,w,c
 16560  004A80  2161               	addwfc	(mac_setToBroadcast@mac+1)& (0+255),w,b
 16561  004A82  6EDA               	movwf	fsr2h,c
 16562  004A84  0EFF               	movlw	255
 16563  004A86  6EDF               	movwf	indf2,c
 16564                           
 16565                           ; BSR set to: 0
 16566  004A88  2B62               	incf	mac_setToBroadcast@i& (0+255),f,b
 16567  004A8A  D7F0               	goto	l8068
 16568  004A8C                     __end_of_mac_setToBroadcast:
 16569                           	opt stack 0
 16570                           tblptru	equ	0xFF8
 16571                           tblptrh	equ	0xFF7
 16572                           tblptrl	equ	0xFF6
 16573                           tablat	equ	0xFF5
 16574                           prodh	equ	0xFF4
 16575                           prodl	equ	0xFF3
 16576                           intcon	equ	0xFF2
 16577                           intcon3	equ	0xFF0
 16578                           indf0	equ	0xFEF
 16579                           postinc0	equ	0xFEE
 16580                           plusw0	equ	0xFEB
 16581                           fsr0h	equ	0xFEA
 16582                           fsr0l	equ	0xFE9
 16583                           wreg	equ	0xFE8
 16584                           indf1	equ	0xFE7
 16585                           postinc1	equ	0xFE6
 16586                           postdec1	equ	0xFE5
 16587                           plusw1	equ	0xFE3
 16588                           fsr1h	equ	0xFE2
 16589                           fsr1l	equ	0xFE1
 16590                           indf2	equ	0xFDF
 16591                           postinc2	equ	0xFDE
 16592                           postdec2	equ	0xFDD
 16593                           plusw2	equ	0xFDB
 16594                           fsr2h	equ	0xFDA
 16595                           fsr2l	equ	0xFD9
 16596                           status	equ	0xFD8
 16597                           
 16598 ;; *************** function _ethernet_txFrameRequest *****************
 16599 ;; Defined at:
 16600 ;;		line 30 in file "src/eth/ethernet.c"
 16601 ;; Parameters:    Size  Location     Type
 16602 ;;  frame           2   66[BANK0 ] PTR struct ethernetFrame
 16603 ;;		 -> arp_send@ethFrame(34), 
 16604 ;; Auto vars:     Size  Location     Type
 16605 ;;  err             3   68[BANK0 ] struct error
 16606 ;; Return value:  Size  Location     Type
 16607 ;;                  3   66[BANK0 ] struct error
 16608 ;; Registers used:
 16609 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16610 ;; Tracked objects:
 16611 ;;		On entry : 0/0
 16612 ;;		On exit  : 0/0
 16613 ;;		Unchanged: 0/0
 16614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16615 ;;      Params:         0       2       0       0       0       0       0       0       0
 16616 ;;      Locals:         0       3       0       0       0       0       0       0       0
 16617 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16618 ;;      Totals:         0       5       0       0       0       0       0       0       0
 16619 ;;Total ram usage:        5 bytes
 16620 ;; Hardware stack levels used:    1
 16621 ;; Hardware stack levels required when called:    8
 16622 ;; This function calls:
 16623 ;;		_ethernetController_writeDestinationMACAddress
 16624 ;;		_ethernetController_writeEtherTypeFieldToBuffer
 16625 ;;		_memory_txFrameRequest
 16626 ;; This function is called by:
 16627 ;;		_arp_send
 16628 ;;		_ipv4_txFrameRequest
 16629 ;; This function uses a non-reentrant model
 16630 ;;
 16631                           
 16632                           	psect	text66
 16633  003214                     __ptext66:
 16634                           	opt stack 0
 16635  003214                     _ethernet_txFrameRequest:
 16636                           	opt stack 17
 16637                           
 16638                           ;ethernet.c: 32: error_t err;
 16639                           ;ethernet.c: 33: err.module = ERROR_MODULE_ETHERNET;
 16640                           
 16641                           ; BSR set to: 0
 16642                           ;incstack = 0
 16643  003214  0E02               	movlw	2
 16644  003216  0100               	movlb	0	; () banked
 16645  003218  6FA4               	movwf	ethernet_txFrameRequest@err& (0+255),b
 16646                           
 16647                           ;ethernet.c: 34: err.code = (uint16_t)0;
 16648  00321A  0E00               	movlw	0
 16649  00321C  6FA6               	movwf	(ethernet_txFrameRequest@err+2)& (0+255),b
 16650  00321E  0E00               	movlw	0
 16651  003220  6FA5               	movwf	(ethernet_txFrameRequest@err+1)& (0+255),b
 16652                           
 16653                           ; BSR set to: 0
 16654                           ;ethernet.c: 35: frame->memory = memory_txFrameRequest(frame->length);
 16655  003222  C0A2  FFD9         	movff	ethernet_txFrameRequest@frame,fsr2l
 16656  003226  C0A3  FFDA         	movff	ethernet_txFrameRequest@frame+1,fsr2h
 16657  00322A  CFDE F084          	movff	postinc2,memory_txFrameRequest@length
 16658  00322E  CFDD F085          	movff	postdec2,memory_txFrameRequest@length+1
 16659  003232  EC09  F003         	call	_memory_txFrameRequest	;wreg free
 16660  003236  0100               	movlb	0	; () banked
 16661  003238  EE20 F010          	lfsr	2,16
 16662  00323C  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 16663  00323E  26D9               	addwf	fsr2l,f,c
 16664  003240  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 16665  003242  22DA               	addwfc	fsr2h,f,c
 16666  003244  0E08               	movlw	8
 16667  003246                     u8811:
 16668  003246  CFEB FFDB          	movff	plusw0,plusw2
 16669  00324A  06E8               	decf	wreg,f,c
 16670  00324C  E2FC               	bc	u8811
 16671                           
 16672                           ; BSR set to: 0
 16673                           ;ethernet.c: 37: if (frame->memory.fOutOfMemory) {
 16674  00324E  EE20 F017          	lfsr	2,23
 16675  003252  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 16676  003254  26D9               	addwf	fsr2l,f,c
 16677  003256  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 16678  003258  22DA               	addwfc	fsr2h,f,c
 16679  00325A  50DF               	movf	indf2,w,c
 16680  00325C  B4D8               	btfsc	status,2,c
 16681  00325E  D007               	goto	l359
 16682                           
 16683                           ; BSR set to: 0
 16684                           ;ethernet.c: 39: err.module = ERROR_MODULE_MEMORY;
 16685  003260  0E00               	movlw	0
 16686  003262  6FA4               	movwf	ethernet_txFrameRequest@err& (0+255),b
 16687                           
 16688                           ;ethernet.c: 40: err.code = ERROR_MEMORY_OUT_OF_MEMORY;
 16689  003264  0E00               	movlw	0
 16690  003266  6FA6               	movwf	(ethernet_txFrameRequest@err+2)& (0+255),b
 16691  003268  0E65               	movlw	101
 16692  00326A  6FA5               	movwf	(ethernet_txFrameRequest@err+1)& (0+255),b
 16693                           
 16694                           ; BSR set to: 0
 16695                           ;ethernet.c: 41: return err;
 16696                           ;	Return value of _ethernet_txFrameRequest is never used
 16697  00326C  0012               	return	
 16698  00326E                     l359:
 16699                           
 16700                           ; BSR set to: 0
 16701                           ;ethernet.c: 42: }
 16702                           ;ethernet.c: 43: if (!frame->memory.fIsAssigned) {
 16703                           
 16704                           ; BSR set to: 0
 16705  00326E  EE20 F016          	lfsr	2,22
 16706  003272  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 16707  003274  26D9               	addwf	fsr2l,f,c
 16708  003276  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 16709  003278  22DA               	addwfc	fsr2h,f,c
 16710  00327A  50DF               	movf	indf2,w,c
 16711  00327C  A4D8               	btfss	status,2,c
 16712  00327E  D007               	goto	l361
 16713                           
 16714                           ; BSR set to: 0
 16715                           ;ethernet.c: 45: err.module = ERROR_MODULE_MEMORY;
 16716  003280  0E00               	movlw	0
 16717  003282  6FA4               	movwf	ethernet_txFrameRequest@err& (0+255),b
 16718                           
 16719                           ;ethernet.c: 46: err.code = ERROR_MEMORY_UNKNOWN;
 16720  003284  0E00               	movlw	0
 16721  003286  6FA6               	movwf	(ethernet_txFrameRequest@err+2)& (0+255),b
 16722  003288  0EC7               	movlw	199
 16723  00328A  6FA5               	movwf	(ethernet_txFrameRequest@err+1)& (0+255),b
 16724                           
 16725                           ; BSR set to: 0
 16726                           ;ethernet.c: 47: return err;
 16727                           ;	Return value of _ethernet_txFrameRequest is never used
 16728  00328C  0012               	return	
 16729  00328E                     l361:
 16730                           
 16731                           ; BSR set to: 0
 16732                           ;ethernet.c: 48: }
 16733                           ;ethernet.c: 50: ethernetController_writeDestinationMACAddress(frame->destination, frame
      +                          ->memory);
 16734                           
 16735                           ; BSR set to: 0
 16736  00328E  EE20 F008          	lfsr	2,8
 16737  003292  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 16738  003294  26D9               	addwf	fsr2l,f,c
 16739  003296  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 16740  003298  22DA               	addwfc	fsr2h,f,c
 16741  00329A  EE00  F06F         	lfsr	0,ethernetController_writeDestinationMACAddress@addr
 16742  00329E  0E05               	movlw	5
 16743  0032A0                     u8841:
 16744  0032A0  CFDB FFEB          	movff	plusw2,plusw0
 16745  0032A4  06E8               	decf	wreg,f,c
 16746  0032A6  E2FC               	bc	u8841
 16747  0032A8  EE20 F010          	lfsr	2,16
 16748  0032AC  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 16749  0032AE  26D9               	addwf	fsr2l,f,c
 16750  0032B0  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 16751  0032B2  22DA               	addwfc	fsr2h,f,c
 16752  0032B4  EE00  F075         	lfsr	0,ethernetController_writeDestinationMACAddress@field
 16753  0032B8  0E08               	movlw	8
 16754  0032BA                     u8851:
 16755  0032BA  CFDB FFEB          	movff	plusw2,plusw0
 16756  0032BE  06E8               	decf	wreg,f,c
 16757  0032C0  E2FC               	bc	u8851
 16758  0032C2  EC11  F01E         	call	_ethernetController_writeDestinationMACAddress	;wreg free
 16759                           
 16760                           ;ethernet.c: 51: ethernetController_writeEtherTypeFieldToBuffer(frame->ethertype, frame-
      +                          >memory);
 16761  0032C6  0100               	movlb	0	; () banked
 16762  0032C8  EE20 F00E          	lfsr	2,14
 16763  0032CC  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 16764  0032CE  26D9               	addwf	fsr2l,f,c
 16765  0032D0  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 16766  0032D2  22DA               	addwfc	fsr2h,f,c
 16767  0032D4  CFDE F06F          	movff	postinc2,ethernetController_writeEtherTypeFieldToBuffer@ethtype
 16768  0032D8  CFDD F070          	movff	postdec2,ethernetController_writeEtherTypeFieldToBuffer@ethtype+1
 16769  0032DC  EE20 F010          	lfsr	2,16
 16770  0032E0  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 16771  0032E2  26D9               	addwf	fsr2l,f,c
 16772  0032E4  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 16773  0032E6  22DA               	addwfc	fsr2h,f,c
 16774  0032E8  EE00  F071         	lfsr	0,ethernetController_writeEtherTypeFieldToBuffer@field
 16775  0032EC  0E08               	movlw	8
 16776  0032EE                     u8861:
 16777  0032EE  CFDB FFEB          	movff	plusw2,plusw0
 16778  0032F2  06E8               	decf	wreg,f,c
 16779  0032F4  E2FC               	bc	u8861
 16780  0032F6  EC4A  F022         	call	_ethernetController_writeEtherTypeFieldToBuffer	;wreg free
 16781  0032FA  0012               	return	
 16782  0032FC                     __end_of_ethernet_txFrameRequest:
 16783                           	opt stack 0
 16784                           tblptru	equ	0xFF8
 16785                           tblptrh	equ	0xFF7
 16786                           tblptrl	equ	0xFF6
 16787                           tablat	equ	0xFF5
 16788                           prodh	equ	0xFF4
 16789                           prodl	equ	0xFF3
 16790                           intcon	equ	0xFF2
 16791                           intcon3	equ	0xFF0
 16792                           indf0	equ	0xFEF
 16793                           postinc0	equ	0xFEE
 16794                           plusw0	equ	0xFEB
 16795                           fsr0h	equ	0xFEA
 16796                           fsr0l	equ	0xFE9
 16797                           wreg	equ	0xFE8
 16798                           indf1	equ	0xFE7
 16799                           postinc1	equ	0xFE6
 16800                           postdec1	equ	0xFE5
 16801                           plusw1	equ	0xFE3
 16802                           fsr1h	equ	0xFE2
 16803                           fsr1l	equ	0xFE1
 16804                           indf2	equ	0xFDF
 16805                           postinc2	equ	0xFDE
 16806                           postdec2	equ	0xFDD
 16807                           plusw2	equ	0xFDB
 16808                           fsr2h	equ	0xFDA
 16809                           fsr2l	equ	0xFD9
 16810                           status	equ	0xFD8
 16811                           
 16812 ;; *************** function _memory_txFrameRequest *****************
 16813 ;; Defined at:
 16814 ;;		line 133 in file "src/mem/memoryController.c"
 16815 ;; Parameters:    Size  Location     Type
 16816 ;;  length          2   36[BANK0 ] unsigned int 
 16817 ;; Auto vars:     Size  Location     Type
 16818 ;;  i               1   54[BANK0 ] unsigned char 
 16819 ;;  i               1   55[BANK0 ] unsigned char 
 16820 ;;  fNoOverlapMa    1   53[BANK0 ] unsigned char 
 16821 ;;  field           9   56[BANK0 ] struct memoryField
 16822 ;;  freeIndex       1   65[BANK0 ] unsigned char 
 16823 ;; Return value:  Size  Location     Type
 16824 ;;                  9   36[BANK0 ] struct memoryField
 16825 ;; Registers used:
 16826 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16827 ;; Tracked objects:
 16828 ;;		On entry : 0/0
 16829 ;;		On exit  : 0/0
 16830 ;;		Unchanged: 0/0
 16831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16832 ;;      Params:         0       9       0       0       0       0       0       0       0
 16833 ;;      Locals:         0      15       0       0       0       0       0       0       0
 16834 ;;      Temps:          0       6       0       0       0       0       0       0       0
 16835 ;;      Totals:         0      30       0       0       0       0       0       0       0
 16836 ;;Total ram usage:       30 bytes
 16837 ;; Hardware stack levels used:    1
 16838 ;; Hardware stack levels required when called:    6
 16839 ;; This function calls:
 16840 ;;		___wmul
 16841 ;;		_checkForOverlap
 16842 ;;		_entireMemoryEmpty
 16843 ;;		_entireMemoryFull
 16844 ;; This function is called by:
 16845 ;;		_ethernet_txFrameRequest
 16846 ;; This function uses a non-reentrant model
 16847 ;;
 16848                           
 16849                           	psect	text67
 16850  000612                     __ptext67:
 16851                           	opt stack 0
 16852  000612                     _memory_txFrameRequest:
 16853                           	opt stack 18
 16854                           
 16855                           ;memoryController.c: 134: memoryField_t field;
 16856                           ;memoryController.c: 135: uint8_t freeIndex = 0;
 16857                           
 16858                           ;incstack = 0
 16859  000612  0E00               	movlw	0
 16860  000614  0100               	movlb	0	; () banked
 16861  000616  6FA1               	movwf	memory_txFrameRequest@freeIndex& (0+255),b
 16862                           
 16863                           ; BSR set to: 0
 16864                           ;memoryController.c: 137: if (length == 0) {
 16865  000618  5184               	movf	memory_txFrameRequest@length& (0+255),w,b
 16866  00061A  1185               	iorwf	(memory_txFrameRequest@length+1)& (0+255),w,b
 16867  00061C  A4D8               	btfss	status,2,c
 16868  00061E  D00C               	goto	l462
 16869                           
 16870                           ; BSR set to: 0
 16871                           ;memoryController.c: 138: field.fOutOfMemory = 1;
 16872  000620  0E01               	movlw	1
 16873  000622  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 16874                           
 16875                           ; BSR set to: 0
 16876                           ;memoryController.c: 139: return field;
 16877  000624  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 16878  000628  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 16879  00062C  0E08               	movlw	8
 16880  00062E                     u8361:
 16881  00062E  CFDB FFEB          	movff	plusw2,plusw0
 16882  000632  06E8               	decf	wreg,f,c
 16883  000634  E2FC               	bc	u8361
 16884                           
 16885                           ; BSR set to: 0
 16886  000636  0012               	return	
 16887  000638                     l462:
 16888                           
 16889                           ; BSR set to: 0
 16890                           ;memoryController.c: 140: }
 16891                           ;memoryController.c: 142: if (entireMemoryFull()) {
 16892                           
 16893                           ; BSR set to: 0
 16894  000638  ECC2  F023         	call	_entireMemoryFull	;wreg free
 16895  00063C  A0D8               	btfss	status,0,c
 16896  00063E  D00D               	goto	l464
 16897                           
 16898                           ;memoryController.c: 143: field.fOutOfMemory = 1;
 16899  000640  0E01               	movlw	1
 16900  000642  0100               	movlb	0	; () banked
 16901  000644  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 16902                           
 16903                           ; BSR set to: 0
 16904                           ;memoryController.c: 144: return field;
 16905  000646  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 16906  00064A  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 16907  00064E  0E08               	movlw	8
 16908  000650                     u8381:
 16909  000650  CFDB FFEB          	movff	plusw2,plusw0
 16910  000654  06E8               	decf	wreg,f,c
 16911  000656  E2FC               	bc	u8381
 16912                           
 16913                           ; BSR set to: 0
 16914  000658  0012               	return	
 16915  00065A                     l464:
 16916                           
 16917                           ;memoryController.c: 145: }
 16918                           ;memoryController.c: 146: if (entireMemoryEmpty()) {
 16919                           
 16920                           ; BSR set to: 0
 16921  00065A  ECDE  F023         	call	_entireMemoryEmpty	;wreg free
 16922  00065E  A0D8               	btfss	status,0,c
 16923  000660  D238               	goto	l489
 16924                           
 16925                           ;memoryController.c: 148: if ((0x0000 + length) > 0x3000 - 1) {
 16926  000662  0E30               	movlw	48
 16927  000664  0100               	movlb	0	; () banked
 16928  000666  5D85               	subwf	(memory_txFrameRequest@length+1)& (0+255),w,b
 16929  000668  A0D8               	btfss	status,0,c
 16930  00066A  D00C               	goto	l466
 16931                           
 16932                           ; BSR set to: 0
 16933                           ;memoryController.c: 149: field.fOutOfMemory = 1;
 16934  00066C  0E01               	movlw	1
 16935  00066E  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 16936                           
 16937                           ; BSR set to: 0
 16938                           ;memoryController.c: 150: return field;
 16939  000670  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 16940  000674  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 16941  000678  0E08               	movlw	8
 16942  00067A                     u8411:
 16943  00067A  CFDB FFEB          	movff	plusw2,plusw0
 16944  00067E  06E8               	decf	wreg,f,c
 16945  000680  E2FC               	bc	u8411
 16946                           
 16947                           ; BSR set to: 0
 16948  000682  0012               	return	
 16949  000684                     l466:
 16950                           
 16951                           ; BSR set to: 0
 16952                           ;memoryController.c: 152: occupiedMemory[0].start = 0x0000;
 16953                           
 16954                           ; BSR set to: 0
 16955  000684  0E00               	movlw	0
 16956  000686  0101               	movlb	1	; () banked
 16957  000688  6F8C               	movwf	(_occupiedMemory+1)& (0+255),b
 16958  00068A  0E00               	movlw	0
 16959  00068C  6F8B               	movwf	_occupiedMemory& (0+255),b
 16960                           
 16961                           ; BSR set to: 1
 16962                           ;memoryController.c: 153: occupiedMemory[0].end = 0x0000 + length;
 16963  00068E  C084  F18D         	movff	memory_txFrameRequest@length,_occupiedMemory+2
 16964  000692  C085  F18E         	movff	memory_txFrameRequest@length+1,_occupiedMemory+3
 16965                           
 16966                           ; BSR set to: 1
 16967                           ;memoryController.c: 154: occupiedMemory[0].length = length;
 16968  000696  C084  F18F         	movff	memory_txFrameRequest@length,_occupiedMemory+4
 16969  00069A  C085  F190         	movff	memory_txFrameRequest@length+1,_occupiedMemory+5
 16970                           
 16971                           ;memoryController.c: 155: occupiedMemory[0].fIsAssigned = 1;
 16972  00069E  0E01               	movlw	1
 16973  0006A0  6F91               	movwf	(_occupiedMemory+6)& (0+255),b
 16974                           
 16975                           ;memoryController.c: 156: occupiedMemory[0].index = 0;
 16976  0006A2  0E00               	movlw	0
 16977  0006A4  6F93               	movwf	(_occupiedMemory+8)& (0+255),b
 16978                           
 16979                           ; BSR set to: 1
 16980                           ;memoryController.c: 157: return occupiedMemory[0];
 16981  0006A6  EE21  F08B         	lfsr	2,_occupiedMemory
 16982  0006AA  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 16983  0006AE  0E08               	movlw	8
 16984  0006B0                     u8421:
 16985  0006B0  CFDB FFEB          	movff	plusw2,plusw0
 16986  0006B4  06E8               	decf	wreg,f,c
 16987  0006B6  E2FC               	bc	u8421
 16988                           
 16989                           ; BSR set to: 1
 16990  0006B8  0012               	return	
 16991  0006BA                     
 16992                           ;memoryController.c: 163: if (!occupiedMemory[freeIndex].fIsAssigned) {
 16993                           
 16994                           ; BSR set to: 1
 16995  0006BA  0100               	movlb	0	; () banked
 16996  0006BC  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 16997  0006BE  0D09               	mullw	9
 16998  0006C0  0E06               	movlw	6
 16999  0006C2  26F3               	addwf	prodl,f,c
 17000  0006C4  0E00               	movlw	0
 17001  0006C6  22F4               	addwfc	prodh,f,c
 17002  0006C8  0E8B               	movlw	low _occupiedMemory
 17003  0006CA  24F3               	addwf	prodl,w,c
 17004  0006CC  6ED9               	movwf	fsr2l,c
 17005  0006CE  0E01               	movlw	high _occupiedMemory
 17006  0006D0  20F4               	addwfc	prodh,w,c
 17007  0006D2  6EDA               	movwf	fsr2h,c
 17008  0006D4  50DF               	movf	indf2,w,c
 17009  0006D6  A4D8               	btfss	status,2,c
 17010  0006D8  D1EB               	goto	l488
 17011                           
 17012                           ; BSR set to: 0
 17013                           ;memoryController.c: 167: occupiedMemory[freeIndex].start = occupiedMemory[(freeIndex ==
      +                           0) ? 8 - 1 : freeIndex - 1].end + 1;
 17014  0006DA  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17015  0006DC  B4D8               	btfsc	status,2,c
 17016  0006DE  D007               	goto	l472
 17017                           
 17018                           ; BSR set to: 0
 17019  0006E0  0EFF               	movlw	255
 17020  0006E2  25A1               	addwf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17021  0006E4  6F93               	movwf	_memory_txFrameRequest$1183& (0+255),b
 17022  0006E6  6B94               	clrf	(_memory_txFrameRequest$1183+1)& (0+255),b
 17023  0006E8  0EFF               	movlw	255
 17024  0006EA  2394               	addwfc	(_memory_txFrameRequest$1183+1)& (0+255),f,b
 17025  0006EC  D004               	goto	l474
 17026  0006EE                     l472:
 17027                           
 17028                           ; BSR set to: 0
 17029                           
 17030                           ; BSR set to: 0
 17031  0006EE  0E00               	movlw	0
 17032  0006F0  6F94               	movwf	(_memory_txFrameRequest$1183+1)& (0+255),b
 17033  0006F2  0E07               	movlw	7
 17034  0006F4  6F93               	movwf	_memory_txFrameRequest$1183& (0+255),b
 17035  0006F6                     l474:
 17036                           
 17037                           ; BSR set to: 0
 17038                           
 17039                           ; BSR set to: 0
 17040  0006F6  C093  F060         	movff	_memory_txFrameRequest$1183,___wmul@multiplier
 17041  0006FA  C094  F061         	movff	_memory_txFrameRequest$1183+1,___wmul@multiplier+1
 17042  0006FE  0E00               	movlw	0
 17043  000700  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 17044  000702  0E09               	movlw	9
 17045  000704  6F62               	movwf	___wmul@multiplicand& (0+255),b
 17046  000706  ECE4  F024         	call	___wmul	;wreg free
 17047  00070A  0E02               	movlw	2
 17048  00070C  0100               	movlb	0	; () banked
 17049  00070E  2760               	addwf	?___wmul& (0+255),f,b
 17050  000710  0E00               	movlw	0
 17051  000712  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 17052  000714  0E8B               	movlw	low _occupiedMemory
 17053  000716  2560               	addwf	?___wmul& (0+255),w,b
 17054  000718  6ED9               	movwf	fsr2l,c
 17055  00071A  0E01               	movlw	high _occupiedMemory
 17056  00071C  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 17057  00071E  6EDA               	movwf	fsr2h,c
 17058  000720  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 17059  000724  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 17060  000728  0E01               	movlw	1
 17061  00072A  278D               	addwf	??_memory_txFrameRequest& (0+255),f,b
 17062  00072C  0E00               	movlw	0
 17063  00072E  238E               	addwfc	(??_memory_txFrameRequest+1)& (0+255),f,b
 17064  000730  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17065  000732  0D09               	mullw	9
 17066  000734  0E8B               	movlw	low _occupiedMemory
 17067  000736  24F3               	addwf	prodl,w,c
 17068  000738  6ED9               	movwf	fsr2l,c
 17069  00073A  0E01               	movlw	high _occupiedMemory
 17070  00073C  20F4               	addwfc	prodh,w,c
 17071  00073E  6EDA               	movwf	fsr2h,c
 17072  000740  C08D  FFDE         	movff	??_memory_txFrameRequest,postinc2
 17073  000744  C08E  FFDD         	movff	??_memory_txFrameRequest+1,postdec2
 17074                           
 17075                           ; BSR set to: 0
 17076                           ;memoryController.c: 168: if (occupiedMemory[freeIndex].start + length > 0x3000) {
 17077  000748  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17078  00074A  0D09               	mullw	9
 17079  00074C  0E8B               	movlw	low _occupiedMemory
 17080  00074E  24F3               	addwf	prodl,w,c
 17081  000750  6ED9               	movwf	fsr2l,c
 17082  000752  0E01               	movlw	high _occupiedMemory
 17083  000754  20F4               	addwfc	prodh,w,c
 17084  000756  6EDA               	movwf	fsr2h,c
 17085  000758  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 17086  00075C  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 17087  000760  5184               	movf	memory_txFrameRequest@length& (0+255),w,b
 17088  000762  278D               	addwf	??_memory_txFrameRequest& (0+255),f,b
 17089  000764  5185               	movf	(memory_txFrameRequest@length+1)& (0+255),w,b
 17090  000766  238E               	addwfc	(??_memory_txFrameRequest+1)& (0+255),f,b
 17091  000768  058D               	decf	??_memory_txFrameRequest& (0+255),w,b
 17092  00076A  0E30               	movlw	48
 17093  00076C  598E               	subwfb	(??_memory_txFrameRequest+1)& (0+255),w,b
 17094  00076E  A0D8               	btfss	status,0,c
 17095  000770  D0CF               	goto	l476
 17096                           
 17097                           ; BSR set to: 0
 17098                           ;memoryController.c: 169: if (freeIndex == 8 - 1 && !occupiedMemory[0].fIsAssigned) {
 17099  000772  0E07               	movlw	7
 17100  000774  19A1               	xorwf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17101  000776  A4D8               	btfss	status,2,c
 17102  000778  D0CB               	goto	l476
 17103                           
 17104                           ; BSR set to: 0
 17105  00077A  0101               	movlb	1	; () banked
 17106  00077C  5191               	movf	(_occupiedMemory+6)& (0+255),w,b
 17107  00077E  A4D8               	btfss	status,2,c
 17108  000780  D0C7               	goto	l476
 17109                           
 17110                           ; BSR set to: 1
 17111                           ;memoryController.c: 170: occupiedMemory[freeIndex].length = length;
 17112  000782  0100               	movlb	0	; () banked
 17113  000784  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17114  000786  0D09               	mullw	9
 17115  000788  0E04               	movlw	4
 17116  00078A  26F3               	addwf	prodl,f,c
 17117  00078C  0E00               	movlw	0
 17118  00078E  22F4               	addwfc	prodh,f,c
 17119  000790  0E8B               	movlw	low _occupiedMemory
 17120  000792  24F3               	addwf	prodl,w,c
 17121  000794  6ED9               	movwf	fsr2l,c
 17122  000796  0E01               	movlw	high _occupiedMemory
 17123  000798  20F4               	addwfc	prodh,w,c
 17124  00079A  6EDA               	movwf	fsr2h,c
 17125  00079C  C084  FFDE         	movff	memory_txFrameRequest@length,postinc2
 17126  0007A0  C085  FFDD         	movff	memory_txFrameRequest@length+1,postdec2
 17127                           
 17128                           ;memoryController.c: 171: occupiedMemory[freeIndex].end = occupiedMemory[freeIndex].leng
      +                          th - ((0x3000 - 1) - occupiedMemory[freeIndex].start);
 17129  0007A4  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17130  0007A6  0D09               	mullw	9
 17131  0007A8  0E04               	movlw	4
 17132  0007AA  26F3               	addwf	prodl,f,c
 17133  0007AC  0E00               	movlw	0
 17134  0007AE  22F4               	addwfc	prodh,f,c
 17135  0007B0  0E8B               	movlw	low _occupiedMemory
 17136  0007B2  24F3               	addwf	prodl,w,c
 17137  0007B4  6ED9               	movwf	fsr2l,c
 17138  0007B6  0E01               	movlw	high _occupiedMemory
 17139  0007B8  20F4               	addwfc	prodh,w,c
 17140  0007BA  6EDA               	movwf	fsr2h,c
 17141  0007BC  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 17142  0007C0  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 17143  0007C4  0EFF               	movlw	255
 17144  0007C6  6F8F               	movwf	(??_memory_txFrameRequest+2)& (0+255),b
 17145  0007C8  0E2F               	movlw	47
 17146  0007CA  6F90               	movwf	(??_memory_txFrameRequest+3)& (0+255),b
 17147  0007CC  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17148  0007CE  0D09               	mullw	9
 17149  0007D0  0E8B               	movlw	low _occupiedMemory
 17150  0007D2  24F3               	addwf	prodl,w,c
 17151  0007D4  6ED9               	movwf	fsr2l,c
 17152  0007D6  0E01               	movlw	high _occupiedMemory
 17153  0007D8  20F4               	addwfc	prodh,w,c
 17154  0007DA  6EDA               	movwf	fsr2h,c
 17155  0007DC  CFDE F091          	movff	postinc2,??_memory_txFrameRequest+4
 17156  0007E0  CFDD F092          	movff	postdec2,??_memory_txFrameRequest+5
 17157  0007E4  1F91               	comf	(??_memory_txFrameRequest+4)& (0+255),f,b
 17158  0007E6  1F92               	comf	(??_memory_txFrameRequest+5)& (0+255),f,b
 17159  0007E8  4B91               	infsnz	(??_memory_txFrameRequest+4)& (0+255),f,b
 17160  0007EA  2B92               	incf	(??_memory_txFrameRequest+5)& (0+255),f,b
 17161  0007EC  518F               	movf	(??_memory_txFrameRequest+2)& (0+255),w,b
 17162  0007EE  2791               	addwf	(??_memory_txFrameRequest+4)& (0+255),f,b
 17163  0007F0  5190               	movf	(??_memory_txFrameRequest+3)& (0+255),w,b
 17164  0007F2  2392               	addwfc	(??_memory_txFrameRequest+5)& (0+255),f,b
 17165  0007F4  1F91               	comf	(??_memory_txFrameRequest+4)& (0+255),f,b
 17166  0007F6  1F92               	comf	(??_memory_txFrameRequest+5)& (0+255),f,b
 17167  0007F8  4B91               	infsnz	(??_memory_txFrameRequest+4)& (0+255),f,b
 17168  0007FA  2B92               	incf	(??_memory_txFrameRequest+5)& (0+255),f,b
 17169  0007FC  518D               	movf	??_memory_txFrameRequest& (0+255),w,b
 17170  0007FE  2791               	addwf	(??_memory_txFrameRequest+4)& (0+255),f,b
 17171  000800  518E               	movf	(??_memory_txFrameRequest+1)& (0+255),w,b
 17172  000802  2392               	addwfc	(??_memory_txFrameRequest+5)& (0+255),f,b
 17173  000804  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17174  000806  0D09               	mullw	9
 17175  000808  0E02               	movlw	2
 17176  00080A  26F3               	addwf	prodl,f,c
 17177  00080C  0E00               	movlw	0
 17178  00080E  22F4               	addwfc	prodh,f,c
 17179  000810  0E8B               	movlw	low _occupiedMemory
 17180  000812  24F3               	addwf	prodl,w,c
 17181  000814  6ED9               	movwf	fsr2l,c
 17182  000816  0E01               	movlw	high _occupiedMemory
 17183  000818  20F4               	addwfc	prodh,w,c
 17184  00081A  6EDA               	movwf	fsr2h,c
 17185  00081C  C091  FFDE         	movff	??_memory_txFrameRequest+4,postinc2
 17186  000820  C092  FFDD         	movff	??_memory_txFrameRequest+5,postdec2
 17187                           
 17188                           ; BSR set to: 0
 17189                           ;memoryController.c: 172: for (uint8_t i = 0; i < 8; i++) {
 17190  000824  0E00               	movlw	0
 17191  000826  6F96               	movwf	memory_txFrameRequest@i& (0+255),b
 17192  000828                     l7866:
 17193                           
 17194                           ; BSR set to: 0
 17195  000828  0E07               	movlw	7
 17196  00082A  6596               	cpfsgt	memory_txFrameRequest@i& (0+255),b
 17197  00082C  D001               	goto	l477
 17198  00082E  D044               	goto	u8550
 17199  000830                     l477:
 17200                           
 17201                           ; BSR set to: 0
 17202                           ;memoryController.c: 173: if (i == freeIndex)
 17203                           
 17204                           ; BSR set to: 0
 17205  000830  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17206  000832  1996               	xorwf	memory_txFrameRequest@i& (0+255),w,b
 17207  000834  B4D8               	btfsc	status,2,c
 17208  000836  D03E               	goto	l481
 17209                           
 17210                           ; BSR set to: 0
 17211                           ;memoryController.c: 175: if (checkForOverlap(occupiedMemory[freeIndex], occupiedMemory[
      +                          i]) && occupiedMemory[i].fIsAssigned) {
 17212                           
 17213                           ; BSR set to: 0
 17214                           
 17215                           ; BSR set to: 0
 17216                           ;memoryController.c: 174: continue;
 17217  000838  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17218  00083A  0D09               	mullw	9
 17219  00083C  0E8B               	movlw	low _occupiedMemory
 17220  00083E  24F3               	addwf	prodl,w,c
 17221  000840  6ED9               	movwf	fsr2l,c
 17222  000842  0E01               	movlw	high _occupiedMemory
 17223  000844  20F4               	addwfc	prodh,w,c
 17224  000846  6EDA               	movwf	fsr2h,c
 17225  000848  EE00  F072         	lfsr	0,checkForOverlap@a
 17226  00084C  0E08               	movlw	8
 17227  00084E                     u8501:
 17228  00084E  CFDB FFEB          	movff	plusw2,plusw0
 17229  000852  06E8               	decf	wreg,f,c
 17230  000854  E2FC               	bc	u8501
 17231  000856  5196               	movf	memory_txFrameRequest@i& (0+255),w,b
 17232  000858  0D09               	mullw	9
 17233  00085A  0E8B               	movlw	low _occupiedMemory
 17234  00085C  24F3               	addwf	prodl,w,c
 17235  00085E  6ED9               	movwf	fsr2l,c
 17236  000860  0E01               	movlw	high _occupiedMemory
 17237  000862  20F4               	addwfc	prodh,w,c
 17238  000864  6EDA               	movwf	fsr2h,c
 17239  000866  EE00  F07B         	lfsr	0,checkForOverlap@b
 17240  00086A  0E08               	movlw	8
 17241  00086C                     u8511:
 17242  00086C  CFDB FFEB          	movff	plusw2,plusw0
 17243  000870  06E8               	decf	wreg,f,c
 17244  000872  E2FC               	bc	u8511
 17245  000874  EC05  F016         	call	_checkForOverlap	;wreg free
 17246  000878  0100               	movlb	0	; () banked
 17247  00087A  A0D8               	btfss	status,0,c
 17248  00087C  D01B               	goto	l481
 17249                           
 17250                           ; BSR set to: 0
 17251  00087E  5196               	movf	memory_txFrameRequest@i& (0+255),w,b
 17252  000880  0D09               	mullw	9
 17253  000882  0E06               	movlw	6
 17254  000884  26F3               	addwf	prodl,f,c
 17255  000886  0E00               	movlw	0
 17256  000888  22F4               	addwfc	prodh,f,c
 17257  00088A  0E8B               	movlw	low _occupiedMemory
 17258  00088C  24F3               	addwf	prodl,w,c
 17259  00088E  6ED9               	movwf	fsr2l,c
 17260  000890  0E01               	movlw	high _occupiedMemory
 17261  000892  20F4               	addwfc	prodh,w,c
 17262  000894  6EDA               	movwf	fsr2h,c
 17263  000896  50DF               	movf	indf2,w,c
 17264  000898  B4D8               	btfsc	status,2,c
 17265  00089A  D00C               	goto	l481
 17266                           
 17267                           ; BSR set to: 0
 17268                           ;memoryController.c: 177: field.fOutOfMemory = 1;
 17269  00089C  0E01               	movlw	1
 17270  00089E  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 17271                           
 17272                           ; BSR set to: 0
 17273                           ;memoryController.c: 178: return field;
 17274  0008A0  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 17275  0008A4  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 17276  0008A8  0E08               	movlw	8
 17277  0008AA                     u8541:
 17278  0008AA  CFDB FFEB          	movff	plusw2,plusw0
 17279  0008AE  06E8               	decf	wreg,f,c
 17280  0008B0  E2FC               	bc	u8541
 17281                           
 17282                           ; BSR set to: 0
 17283  0008B2  0012               	return	
 17284  0008B4                     l481:
 17285                           
 17286                           ; BSR set to: 0
 17287                           
 17288                           ; BSR set to: 0
 17289                           
 17290                           ; BSR set to: 0
 17291  0008B4  2B96               	incf	memory_txFrameRequest@i& (0+255),f,b
 17292  0008B6  D7B8               	goto	l7866
 17293  0008B8                     u8550:
 17294                           
 17295                           ; BSR set to: 0
 17296                           ;memoryController.c: 179: }
 17297                           ;memoryController.c: 180: }
 17298                           ;memoryController.c: 181: occupiedMemory[freeIndex].fIsAssigned = 1;
 17299                           
 17300                           ; BSR set to: 0
 17301  0008B8  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17302  0008BA  0D09               	mullw	9
 17303  0008BC  0E06               	movlw	6
 17304  0008BE  26F3               	addwf	prodl,f,c
 17305  0008C0  0E00               	movlw	0
 17306  0008C2  22F4               	addwfc	prodh,f,c
 17307  0008C4  0E8B               	movlw	low _occupiedMemory
 17308  0008C6  24F3               	addwf	prodl,w,c
 17309  0008C8  6ED9               	movwf	fsr2l,c
 17310  0008CA  0E01               	movlw	high _occupiedMemory
 17311  0008CC  20F4               	addwfc	prodh,w,c
 17312  0008CE  6EDA               	movwf	fsr2h,c
 17313  0008D0  0E01               	movlw	1
 17314  0008D2  6EDF               	movwf	indf2,c
 17315                           
 17316                           ;memoryController.c: 182: occupiedMemory[freeIndex].index = freeIndex;
 17317  0008D4  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17318  0008D6  0D09               	mullw	9
 17319  0008D8  0E08               	movlw	8
 17320  0008DA  26F3               	addwf	prodl,f,c
 17321  0008DC  0E00               	movlw	0
 17322  0008DE  22F4               	addwfc	prodh,f,c
 17323  0008E0  0E8B               	movlw	low _occupiedMemory
 17324  0008E2  24F3               	addwf	prodl,w,c
 17325  0008E4  6ED9               	movwf	fsr2l,c
 17326  0008E6  0E01               	movlw	high _occupiedMemory
 17327  0008E8  20F4               	addwfc	prodh,w,c
 17328  0008EA  6EDA               	movwf	fsr2h,c
 17329  0008EC  C0A1  FFDF         	movff	memory_txFrameRequest@freeIndex,indf2
 17330                           
 17331                           ; BSR set to: 0
 17332                           ;memoryController.c: 183: return occupiedMemory[freeIndex];
 17333  0008F0  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17334  0008F2  0D09               	mullw	9
 17335  0008F4  0E8B               	movlw	low _occupiedMemory
 17336  0008F6  24F3               	addwf	prodl,w,c
 17337  0008F8  6ED9               	movwf	fsr2l,c
 17338  0008FA  0E01               	movlw	high _occupiedMemory
 17339  0008FC  20F4               	addwfc	prodh,w,c
 17340  0008FE  6EDA               	movwf	fsr2h,c
 17341  000900  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 17342  000904  0E08               	movlw	8
 17343  000906                     u8561:
 17344  000906  CFDB FFEB          	movff	plusw2,plusw0
 17345  00090A  06E8               	decf	wreg,f,c
 17346  00090C  E2FC               	bc	u8561
 17347                           
 17348                           ; BSR set to: 0
 17349  00090E  0012               	return	
 17350  000910                     l476:
 17351                           
 17352                           ;memoryController.c: 184: }
 17353                           ;memoryController.c: 185: }
 17354                           ;memoryController.c: 187: uint8_t fNoOverlapMarker = 1;
 17355                           
 17356                           ; BSR set to: 0
 17357                           
 17358                           ; BSR set to: 0
 17359  000910  0E01               	movlw	1
 17360  000912  0100               	movlb	0	; () banked
 17361  000914  6F95               	movwf	memory_txFrameRequest@fNoOverlapMarker& (0+255),b
 17362                           
 17363                           ; BSR set to: 0
 17364                           ;memoryController.c: 188: uint8_t i;
 17365                           ;memoryController.c: 189: occupiedMemory[freeIndex].end = occupiedMemory[freeIndex].star
      +                          t + length;
 17366  000916  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17367  000918  0D09               	mullw	9
 17368  00091A  0E8B               	movlw	low _occupiedMemory
 17369  00091C  24F3               	addwf	prodl,w,c
 17370  00091E  6ED9               	movwf	fsr2l,c
 17371  000920  0E01               	movlw	high _occupiedMemory
 17372  000922  20F4               	addwfc	prodh,w,c
 17373  000924  6EDA               	movwf	fsr2h,c
 17374  000926  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 17375  00092A  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 17376  00092E  5184               	movf	memory_txFrameRequest@length& (0+255),w,b
 17377  000930  278D               	addwf	??_memory_txFrameRequest& (0+255),f,b
 17378  000932  5185               	movf	(memory_txFrameRequest@length+1)& (0+255),w,b
 17379  000934  238E               	addwfc	(??_memory_txFrameRequest+1)& (0+255),f,b
 17380  000936  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17381  000938  0D09               	mullw	9
 17382  00093A  0E02               	movlw	2
 17383  00093C  26F3               	addwf	prodl,f,c
 17384  00093E  0E00               	movlw	0
 17385  000940  22F4               	addwfc	prodh,f,c
 17386  000942  0E8B               	movlw	low _occupiedMemory
 17387  000944  24F3               	addwf	prodl,w,c
 17388  000946  6ED9               	movwf	fsr2l,c
 17389  000948  0E01               	movlw	high _occupiedMemory
 17390  00094A  20F4               	addwfc	prodh,w,c
 17391  00094C  6EDA               	movwf	fsr2h,c
 17392  00094E  C08D  FFDE         	movff	??_memory_txFrameRequest,postinc2
 17393  000952  C08E  FFDD         	movff	??_memory_txFrameRequest+1,postdec2
 17394                           
 17395                           ; BSR set to: 0
 17396                           ;memoryController.c: 190: for (i = 0; i < 8; i++) {
 17397  000956  0E00               	movlw	0
 17398  000958  6F97               	movwf	memory_txFrameRequest@i_1187& (0+255),b
 17399  00095A                     l7900:
 17400                           
 17401                           ; BSR set to: 0
 17402  00095A  0E07               	movlw	7
 17403  00095C  6597               	cpfsgt	memory_txFrameRequest@i_1187& (0+255),b
 17404  00095E  D001               	goto	l482
 17405  000960  D03A               	goto	u8630
 17406  000962                     l482:
 17407                           
 17408                           ; BSR set to: 0
 17409                           ;memoryController.c: 191: if (i == freeIndex)
 17410                           
 17411                           ; BSR set to: 0
 17412  000962  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17413  000964  1997               	xorwf	memory_txFrameRequest@i_1187& (0+255),w,b
 17414  000966  B4D8               	btfsc	status,2,c
 17415  000968  D034               	goto	l487
 17416                           
 17417                           ; BSR set to: 0
 17418                           ;memoryController.c: 193: if (!occupiedMemory[i].fIsAssigned) {
 17419                           
 17420                           ; BSR set to: 0
 17421                           
 17422                           ; BSR set to: 0
 17423                           ;memoryController.c: 192: continue;
 17424  00096A  5197               	movf	memory_txFrameRequest@i_1187& (0+255),w,b
 17425  00096C  0D09               	mullw	9
 17426  00096E  0E06               	movlw	6
 17427  000970  26F3               	addwf	prodl,f,c
 17428  000972  0E00               	movlw	0
 17429  000974  22F4               	addwfc	prodh,f,c
 17430  000976  0E8B               	movlw	low _occupiedMemory
 17431  000978  24F3               	addwf	prodl,w,c
 17432  00097A  6ED9               	movwf	fsr2l,c
 17433  00097C  0E01               	movlw	high _occupiedMemory
 17434  00097E  20F4               	addwfc	prodh,w,c
 17435  000980  6EDA               	movwf	fsr2h,c
 17436  000982  50DF               	movf	indf2,w,c
 17437  000984  B4D8               	btfsc	status,2,c
 17438  000986  D025               	goto	l487
 17439                           
 17440                           ; BSR set to: 0
 17441                           ;memoryController.c: 196: }
 17442                           ;memoryController.c: 198: if (checkForOverlap(occupiedMemory[freeIndex], occupiedMemory[
      +                          i]))
 17443                           
 17444                           ; BSR set to: 0
 17445                           
 17446                           ; BSR set to: 0
 17447                           ;memoryController.c: 194: continue;
 17448  000988  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17449  00098A  0D09               	mullw	9
 17450  00098C  0E8B               	movlw	low _occupiedMemory
 17451  00098E  24F3               	addwf	prodl,w,c
 17452  000990  6ED9               	movwf	fsr2l,c
 17453  000992  0E01               	movlw	high _occupiedMemory
 17454  000994  20F4               	addwfc	prodh,w,c
 17455  000996  6EDA               	movwf	fsr2h,c
 17456  000998  EE00  F072         	lfsr	0,checkForOverlap@a
 17457  00099C  0E08               	movlw	8
 17458  00099E                     u8601:
 17459  00099E  CFDB FFEB          	movff	plusw2,plusw0
 17460  0009A2  06E8               	decf	wreg,f,c
 17461  0009A4  E2FC               	bc	u8601
 17462  0009A6  5197               	movf	memory_txFrameRequest@i_1187& (0+255),w,b
 17463  0009A8  0D09               	mullw	9
 17464  0009AA  0E8B               	movlw	low _occupiedMemory
 17465  0009AC  24F3               	addwf	prodl,w,c
 17466  0009AE  6ED9               	movwf	fsr2l,c
 17467  0009B0  0E01               	movlw	high _occupiedMemory
 17468  0009B2  20F4               	addwfc	prodh,w,c
 17469  0009B4  6EDA               	movwf	fsr2h,c
 17470  0009B6  EE00  F07B         	lfsr	0,checkForOverlap@b
 17471  0009BA  0E08               	movlw	8
 17472  0009BC                     u8611:
 17473  0009BC  CFDB FFEB          	movff	plusw2,plusw0
 17474  0009C0  06E8               	decf	wreg,f,c
 17475  0009C2  E2FC               	bc	u8611
 17476  0009C4  EC05  F016         	call	_checkForOverlap	;wreg free
 17477  0009C8  0100               	movlb	0	; () banked
 17478  0009CA  A0D8               	btfss	status,0,c
 17479  0009CC  D002               	goto	l487
 17480                           
 17481                           ; BSR set to: 0
 17482                           ;memoryController.c: 199: fNoOverlapMarker = 0;
 17483  0009CE  0E00               	movlw	0
 17484  0009D0  6F95               	movwf	memory_txFrameRequest@fNoOverlapMarker& (0+255),b
 17485  0009D2                     l487:
 17486                           
 17487                           ; BSR set to: 0
 17488                           
 17489                           ; BSR set to: 0
 17490                           
 17491                           ; BSR set to: 0
 17492  0009D2  2B97               	incf	memory_txFrameRequest@i_1187& (0+255),f,b
 17493  0009D4  D7C2               	goto	l7900
 17494  0009D6                     u8630:
 17495                           
 17496                           ; BSR set to: 0
 17497                           ;memoryController.c: 201: }
 17498                           ;memoryController.c: 202: if (fNoOverlapMarker) {
 17499                           
 17500                           ; BSR set to: 0
 17501  0009D6  5195               	movf	memory_txFrameRequest@fNoOverlapMarker& (0+255),w,b
 17502  0009D8  B4D8               	btfsc	status,2,c
 17503  0009DA  D06A               	goto	l488
 17504                           
 17505                           ; BSR set to: 0
 17506                           ;memoryController.c: 203: occupiedMemory[freeIndex].fIsAssigned = 1;
 17507  0009DC  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17508  0009DE  0D09               	mullw	9
 17509  0009E0  0E06               	movlw	6
 17510  0009E2  26F3               	addwf	prodl,f,c
 17511  0009E4  0E00               	movlw	0
 17512  0009E6  22F4               	addwfc	prodh,f,c
 17513  0009E8  0E8B               	movlw	low _occupiedMemory
 17514  0009EA  24F3               	addwf	prodl,w,c
 17515  0009EC  6ED9               	movwf	fsr2l,c
 17516  0009EE  0E01               	movlw	high _occupiedMemory
 17517  0009F0  20F4               	addwfc	prodh,w,c
 17518  0009F2  6EDA               	movwf	fsr2h,c
 17519  0009F4  0E01               	movlw	1
 17520  0009F6  6EDF               	movwf	indf2,c
 17521                           
 17522                           ;memoryController.c: 204: occupiedMemory[freeIndex].end = occupiedMemory[freeIndex].star
      +                          t + length;
 17523  0009F8  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17524  0009FA  0D09               	mullw	9
 17525  0009FC  0E8B               	movlw	low _occupiedMemory
 17526  0009FE  24F3               	addwf	prodl,w,c
 17527  000A00  6ED9               	movwf	fsr2l,c
 17528  000A02  0E01               	movlw	high _occupiedMemory
 17529  000A04  20F4               	addwfc	prodh,w,c
 17530  000A06  6EDA               	movwf	fsr2h,c
 17531  000A08  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 17532  000A0C  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 17533  000A10  5184               	movf	memory_txFrameRequest@length& (0+255),w,b
 17534  000A12  278D               	addwf	??_memory_txFrameRequest& (0+255),f,b
 17535  000A14  5185               	movf	(memory_txFrameRequest@length+1)& (0+255),w,b
 17536  000A16  238E               	addwfc	(??_memory_txFrameRequest+1)& (0+255),f,b
 17537  000A18  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17538  000A1A  0D09               	mullw	9
 17539  000A1C  0E02               	movlw	2
 17540  000A1E  26F3               	addwf	prodl,f,c
 17541  000A20  0E00               	movlw	0
 17542  000A22  22F4               	addwfc	prodh,f,c
 17543  000A24  0E8B               	movlw	low _occupiedMemory
 17544  000A26  24F3               	addwf	prodl,w,c
 17545  000A28  6ED9               	movwf	fsr2l,c
 17546  000A2A  0E01               	movlw	high _occupiedMemory
 17547  000A2C  20F4               	addwfc	prodh,w,c
 17548  000A2E  6EDA               	movwf	fsr2h,c
 17549  000A30  C08D  FFDE         	movff	??_memory_txFrameRequest,postinc2
 17550  000A34  C08E  FFDD         	movff	??_memory_txFrameRequest+1,postdec2
 17551                           
 17552                           ;memoryController.c: 205: occupiedMemory[freeIndex].fOutOfMemory = 0;
 17553  000A38  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17554  000A3A  0D09               	mullw	9
 17555  000A3C  0E07               	movlw	7
 17556  000A3E  26F3               	addwf	prodl,f,c
 17557  000A40  0E00               	movlw	0
 17558  000A42  22F4               	addwfc	prodh,f,c
 17559  000A44  0E8B               	movlw	low _occupiedMemory
 17560  000A46  24F3               	addwf	prodl,w,c
 17561  000A48  6ED9               	movwf	fsr2l,c
 17562  000A4A  0E01               	movlw	high _occupiedMemory
 17563  000A4C  20F4               	addwfc	prodh,w,c
 17564  000A4E  6EDA               	movwf	fsr2h,c
 17565  000A50  0E00               	movlw	0
 17566  000A52  6EDF               	movwf	indf2,c
 17567                           
 17568                           ;memoryController.c: 206: occupiedMemory[freeIndex].length = length;
 17569  000A54  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17570  000A56  0D09               	mullw	9
 17571  000A58  0E04               	movlw	4
 17572  000A5A  26F3               	addwf	prodl,f,c
 17573  000A5C  0E00               	movlw	0
 17574  000A5E  22F4               	addwfc	prodh,f,c
 17575  000A60  0E8B               	movlw	low _occupiedMemory
 17576  000A62  24F3               	addwf	prodl,w,c
 17577  000A64  6ED9               	movwf	fsr2l,c
 17578  000A66  0E01               	movlw	high _occupiedMemory
 17579  000A68  20F4               	addwfc	prodh,w,c
 17580  000A6A  6EDA               	movwf	fsr2h,c
 17581  000A6C  C084  FFDE         	movff	memory_txFrameRequest@length,postinc2
 17582  000A70  C085  FFDD         	movff	memory_txFrameRequest@length+1,postdec2
 17583                           
 17584                           ;memoryController.c: 207: occupiedMemory[freeIndex].index = freeIndex;
 17585  000A74  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17586  000A76  0D09               	mullw	9
 17587  000A78  0E08               	movlw	8
 17588  000A7A  26F3               	addwf	prodl,f,c
 17589  000A7C  0E00               	movlw	0
 17590  000A7E  22F4               	addwfc	prodh,f,c
 17591  000A80  0E8B               	movlw	low _occupiedMemory
 17592  000A82  24F3               	addwf	prodl,w,c
 17593  000A84  6ED9               	movwf	fsr2l,c
 17594  000A86  0E01               	movlw	high _occupiedMemory
 17595  000A88  20F4               	addwfc	prodh,w,c
 17596  000A8A  6EDA               	movwf	fsr2h,c
 17597  000A8C  C0A1  FFDF         	movff	memory_txFrameRequest@freeIndex,indf2
 17598                           
 17599                           ; BSR set to: 0
 17600                           ;memoryController.c: 208: return occupiedMemory[freeIndex];
 17601  000A90  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17602  000A92  0D09               	mullw	9
 17603  000A94  0E8B               	movlw	low _occupiedMemory
 17604  000A96  24F3               	addwf	prodl,w,c
 17605  000A98  6ED9               	movwf	fsr2l,c
 17606  000A9A  0E01               	movlw	high _occupiedMemory
 17607  000A9C  20F4               	addwfc	prodh,w,c
 17608  000A9E  6EDA               	movwf	fsr2h,c
 17609  000AA0  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 17610  000AA4  0E08               	movlw	8
 17611  000AA6                     u8651:
 17612  000AA6  CFDB FFEB          	movff	plusw2,plusw0
 17613  000AAA  06E8               	decf	wreg,f,c
 17614  000AAC  E2FC               	bc	u8651
 17615                           
 17616                           ; BSR set to: 0
 17617  000AAE  0012               	return	
 17618  000AB0                     l488:
 17619                           
 17620                           ; BSR set to: 0
 17621                           ;memoryController.c: 209: }
 17622                           ;memoryController.c: 210: }
 17623                           ;memoryController.c: 211: freeIndex++;
 17624                           
 17625                           ; BSR set to: 0
 17626                           
 17627                           ; BSR set to: 0
 17628  000AB0  2BA1               	incf	memory_txFrameRequest@freeIndex& (0+255),f,b
 17629                           
 17630                           ; BSR set to: 0
 17631                           ;memoryController.c: 212: if (freeIndex == 8) {
 17632  000AB2  0E08               	movlw	8
 17633  000AB4  19A1               	xorwf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17634  000AB6  A4D8               	btfss	status,2,c
 17635  000AB8  D00C               	goto	l489
 17636                           
 17637                           ; BSR set to: 0
 17638                           ;memoryController.c: 214: field.fOutOfMemory = 1;
 17639  000ABA  0E01               	movlw	1
 17640  000ABC  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 17641                           
 17642                           ; BSR set to: 0
 17643                           ;memoryController.c: 215: return field;
 17644  000ABE  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 17645  000AC2  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 17646  000AC6  0E08               	movlw	8
 17647  000AC8                     u8671:
 17648  000AC8  CFDB FFEB          	movff	plusw2,plusw0
 17649  000ACC  06E8               	decf	wreg,f,c
 17650  000ACE  E2FC               	bc	u8671
 17651                           
 17652                           ; BSR set to: 0
 17653  000AD0  0012               	return	
 17654  000AD2                     l489:
 17655                           
 17656                           ; BSR set to: 0
 17657                           
 17658                           ; BSR set to: 0
 17659  000AD2  0E08               	movlw	8
 17660  000AD4  0100               	movlb	0	; () banked
 17661  000AD6  65A1               	cpfsgt	memory_txFrameRequest@freeIndex& (0+255),b
 17662  000AD8  D5F0               	goto	l469
 17663                           
 17664                           ; BSR set to: 0
 17665                           ;memoryController.c: 216: }
 17666                           ;memoryController.c: 217: }
 17667                           ;memoryController.c: 218: return field;
 17668                           
 17669                           ; BSR set to: 0
 17670  000ADA  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 17671  000ADE  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 17672  000AE2  0E08               	movlw	8
 17673  000AE4                     u8691:
 17674  000AE4  CFDB FFEB          	movff	plusw2,plusw0
 17675  000AE8  06E8               	decf	wreg,f,c
 17676  000AEA  E2FC               	bc	u8691
 17677  000AEC  0012               	return	
 17678  000AEE                     __end_of_memory_txFrameRequest:
 17679                           	opt stack 0
 17680                           tblptru	equ	0xFF8
 17681                           tblptrh	equ	0xFF7
 17682                           tblptrl	equ	0xFF6
 17683                           tablat	equ	0xFF5
 17684                           prodh	equ	0xFF4
 17685                           prodl	equ	0xFF3
 17686                           intcon	equ	0xFF2
 17687                           intcon3	equ	0xFF0
 17688                           indf0	equ	0xFEF
 17689                           postinc0	equ	0xFEE
 17690                           plusw0	equ	0xFEB
 17691                           fsr0h	equ	0xFEA
 17692                           fsr0l	equ	0xFE9
 17693                           wreg	equ	0xFE8
 17694                           indf1	equ	0xFE7
 17695                           postinc1	equ	0xFE6
 17696                           postdec1	equ	0xFE5
 17697                           plusw1	equ	0xFE3
 17698                           fsr1h	equ	0xFE2
 17699                           fsr1l	equ	0xFE1
 17700                           indf2	equ	0xFDF
 17701                           postinc2	equ	0xFDE
 17702                           postdec2	equ	0xFDD
 17703                           plusw2	equ	0xFDB
 17704                           fsr2h	equ	0xFDA
 17705                           fsr2l	equ	0xFD9
 17706                           status	equ	0xFD8
 17707                           
 17708 ;; *************** function _entireMemoryFull *****************
 17709 ;; Defined at:
 17710 ;;		line 45 in file "src/mem/memoryController.c"
 17711 ;; Parameters:    Size  Location     Type
 17712 ;;		None
 17713 ;; Auto vars:     Size  Location     Type
 17714 ;;  i               1    0[BANK0 ] unsigned char 
 17715 ;; Return value:  Size  Location     Type
 17716 ;;		None               void
 17717 ;; Registers used:
 17718 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 17719 ;; Tracked objects:
 17720 ;;		On entry : 0/0
 17721 ;;		On exit  : 0/0
 17722 ;;		Unchanged: 0/0
 17723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17724 ;;      Params:         0       0       0       0       0       0       0       0       0
 17725 ;;      Locals:         0       1       0       0       0       0       0       0       0
 17726 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17727 ;;      Totals:         0       1       0       0       0       0       0       0       0
 17728 ;;Total ram usage:        1 bytes
 17729 ;; Hardware stack levels used:    1
 17730 ;; Hardware stack levels required when called:    4
 17731 ;; This function calls:
 17732 ;;		Nothing
 17733 ;; This function is called by:
 17734 ;;		_memory_txFrameRequest
 17735 ;; This function uses a non-reentrant model
 17736 ;;
 17737                           
 17738                           	psect	text68
 17739  004784                     __ptext68:
 17740                           	opt stack 0
 17741  004784                     _entireMemoryFull:
 17742                           	opt stack 19
 17743                           
 17744                           ;memoryController.c: 46: for (uint8_t i = 0; i < 8; i++) {
 17745                           
 17746                           ;incstack = 0
 17747  004784  0E00               	movlw	0
 17748  004786  0100               	movlb	0	; () banked
 17749  004788  6F60               	movwf	entireMemoryFull@i& (0+255),b
 17750  00478A                     l7620:
 17751                           
 17752                           ; BSR set to: 0
 17753  00478A  0E07               	movlw	7
 17754  00478C  6560               	cpfsgt	entireMemoryFull@i& (0+255),b
 17755  00478E  D001               	goto	l418
 17756  004790  D013               	goto	u8080
 17757  004792                     l418:
 17758                           
 17759                           ; BSR set to: 0
 17760                           ;memoryController.c: 47: if (!occupiedMemory[i].fIsAssigned)
 17761                           
 17762                           ; BSR set to: 0
 17763  004792  5160               	movf	entireMemoryFull@i& (0+255),w,b
 17764  004794  0D09               	mullw	9
 17765  004796  0E06               	movlw	6
 17766  004798  26F3               	addwf	prodl,f,c
 17767  00479A  0E00               	movlw	0
 17768  00479C  22F4               	addwfc	prodh,f,c
 17769  00479E  0E8B               	movlw	low _occupiedMemory
 17770  0047A0  24F3               	addwf	prodl,w,c
 17771  0047A2  6ED9               	movwf	fsr2l,c
 17772  0047A4  0E01               	movlw	high _occupiedMemory
 17773  0047A6  20F4               	addwfc	prodh,w,c
 17774  0047A8  6EDA               	movwf	fsr2h,c
 17775  0047AA  50DF               	movf	indf2,w,c
 17776  0047AC  A4D8               	btfss	status,2,c
 17777  0047AE  D002               	goto	l420
 17778                           
 17779                           ; BSR set to: 0
 17780                           ;memoryController.c: 48: return 0;
 17781  0047B0  90D8               	bcf	status,0,c
 17782                           
 17783                           ; BSR set to: 0
 17784  0047B2  0012               	return	
 17785  0047B4                     l420:
 17786                           
 17787                           ; BSR set to: 0
 17788                           
 17789                           ; BSR set to: 0
 17790  0047B4  2B60               	incf	entireMemoryFull@i& (0+255),f,b
 17791  0047B6  D7E9               	goto	l7620
 17792  0047B8                     u8080:
 17793                           
 17794                           ; BSR set to: 0
 17795                           ;memoryController.c: 49: }
 17796                           ;memoryController.c: 50: return 1;
 17797                           
 17798                           ; BSR set to: 0
 17799  0047B8  80D8               	bsf	status,0,c
 17800  0047BA  0012               	return	
 17801  0047BC                     __end_of_entireMemoryFull:
 17802                           	opt stack 0
 17803                           tblptru	equ	0xFF8
 17804                           tblptrh	equ	0xFF7
 17805                           tblptrl	equ	0xFF6
 17806                           tablat	equ	0xFF5
 17807                           prodh	equ	0xFF4
 17808                           prodl	equ	0xFF3
 17809                           intcon	equ	0xFF2
 17810                           intcon3	equ	0xFF0
 17811                           indf0	equ	0xFEF
 17812                           postinc0	equ	0xFEE
 17813                           plusw0	equ	0xFEB
 17814                           fsr0h	equ	0xFEA
 17815                           fsr0l	equ	0xFE9
 17816                           wreg	equ	0xFE8
 17817                           indf1	equ	0xFE7
 17818                           postinc1	equ	0xFE6
 17819                           postdec1	equ	0xFE5
 17820                           plusw1	equ	0xFE3
 17821                           fsr1h	equ	0xFE2
 17822                           fsr1l	equ	0xFE1
 17823                           indf2	equ	0xFDF
 17824                           postinc2	equ	0xFDE
 17825                           postdec2	equ	0xFDD
 17826                           plusw2	equ	0xFDB
 17827                           fsr2h	equ	0xFDA
 17828                           fsr2l	equ	0xFD9
 17829                           status	equ	0xFD8
 17830                           
 17831 ;; *************** function _entireMemoryEmpty *****************
 17832 ;; Defined at:
 17833 ;;		line 37 in file "src/mem/memoryController.c"
 17834 ;; Parameters:    Size  Location     Type
 17835 ;;		None
 17836 ;; Auto vars:     Size  Location     Type
 17837 ;;  i               1    0[BANK0 ] unsigned char 
 17838 ;; Return value:  Size  Location     Type
 17839 ;;		None               void
 17840 ;; Registers used:
 17841 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 17842 ;; Tracked objects:
 17843 ;;		On entry : 0/0
 17844 ;;		On exit  : 0/0
 17845 ;;		Unchanged: 0/0
 17846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17847 ;;      Params:         0       0       0       0       0       0       0       0       0
 17848 ;;      Locals:         0       1       0       0       0       0       0       0       0
 17849 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17850 ;;      Totals:         0       1       0       0       0       0       0       0       0
 17851 ;;Total ram usage:        1 bytes
 17852 ;; Hardware stack levels used:    1
 17853 ;; Hardware stack levels required when called:    4
 17854 ;; This function calls:
 17855 ;;		Nothing
 17856 ;; This function is called by:
 17857 ;;		_memory_txFrameRequest
 17858 ;; This function uses a non-reentrant model
 17859 ;;
 17860                           
 17861                           	psect	text69
 17862  0047BC                     __ptext69:
 17863                           	opt stack 0
 17864  0047BC                     _entireMemoryEmpty:
 17865                           	opt stack 19
 17866                           
 17867                           ;memoryController.c: 38: for (uint8_t i = 0; i < 8; i++) {
 17868                           
 17869                           ; BSR set to: 0
 17870                           ;incstack = 0
 17871  0047BC  0E00               	movlw	0
 17872  0047BE  0100               	movlb	0	; () banked
 17873  0047C0  6F60               	movwf	entireMemoryEmpty@i& (0+255),b
 17874  0047C2                     l7600:
 17875                           
 17876                           ; BSR set to: 0
 17877  0047C2  0E07               	movlw	7
 17878  0047C4  6560               	cpfsgt	entireMemoryEmpty@i& (0+255),b
 17879  0047C6  D001               	goto	l412
 17880  0047C8  D013               	goto	u8050
 17881  0047CA                     l412:
 17882                           
 17883                           ; BSR set to: 0
 17884                           ;memoryController.c: 39: if (occupiedMemory[i].fIsAssigned)
 17885                           
 17886                           ; BSR set to: 0
 17887  0047CA  5160               	movf	entireMemoryEmpty@i& (0+255),w,b
 17888  0047CC  0D09               	mullw	9
 17889  0047CE  0E06               	movlw	6
 17890  0047D0  26F3               	addwf	prodl,f,c
 17891  0047D2  0E00               	movlw	0
 17892  0047D4  22F4               	addwfc	prodh,f,c
 17893  0047D6  0E8B               	movlw	low _occupiedMemory
 17894  0047D8  24F3               	addwf	prodl,w,c
 17895  0047DA  6ED9               	movwf	fsr2l,c
 17896  0047DC  0E01               	movlw	high _occupiedMemory
 17897  0047DE  20F4               	addwfc	prodh,w,c
 17898  0047E0  6EDA               	movwf	fsr2h,c
 17899  0047E2  50DF               	movf	indf2,w,c
 17900  0047E4  B4D8               	btfsc	status,2,c
 17901  0047E6  D002               	goto	l414
 17902                           
 17903                           ; BSR set to: 0
 17904                           ;memoryController.c: 40: return 0;
 17905  0047E8  90D8               	bcf	status,0,c
 17906                           
 17907                           ; BSR set to: 0
 17908  0047EA  0012               	return	
 17909  0047EC                     l414:
 17910                           
 17911                           ; BSR set to: 0
 17912                           
 17913                           ; BSR set to: 0
 17914  0047EC  2B60               	incf	entireMemoryEmpty@i& (0+255),f,b
 17915  0047EE  D7E9               	goto	l7600
 17916  0047F0                     u8050:
 17917                           
 17918                           ; BSR set to: 0
 17919                           ;memoryController.c: 41: }
 17920                           ;memoryController.c: 42: return 1;
 17921                           
 17922                           ; BSR set to: 0
 17923  0047F0  80D8               	bsf	status,0,c
 17924  0047F2  0012               	return	
 17925  0047F4                     __end_of_entireMemoryEmpty:
 17926                           	opt stack 0
 17927                           tblptru	equ	0xFF8
 17928                           tblptrh	equ	0xFF7
 17929                           tblptrl	equ	0xFF6
 17930                           tablat	equ	0xFF5
 17931                           prodh	equ	0xFF4
 17932                           prodl	equ	0xFF3
 17933                           intcon	equ	0xFF2
 17934                           intcon3	equ	0xFF0
 17935                           indf0	equ	0xFEF
 17936                           postinc0	equ	0xFEE
 17937                           plusw0	equ	0xFEB
 17938                           fsr0h	equ	0xFEA
 17939                           fsr0l	equ	0xFE9
 17940                           wreg	equ	0xFE8
 17941                           indf1	equ	0xFE7
 17942                           postinc1	equ	0xFE6
 17943                           postdec1	equ	0xFE5
 17944                           plusw1	equ	0xFE3
 17945                           fsr1h	equ	0xFE2
 17946                           fsr1l	equ	0xFE1
 17947                           indf2	equ	0xFDF
 17948                           postinc2	equ	0xFDE
 17949                           postdec2	equ	0xFDD
 17950                           plusw2	equ	0xFDB
 17951                           fsr2h	equ	0xFDA
 17952                           fsr2l	equ	0xFD9
 17953                           status	equ	0xFD8
 17954                           
 17955 ;; *************** function _checkForOverlap *****************
 17956 ;; Defined at:
 17957 ;;		line 63 in file "src/mem/memoryController.c"
 17958 ;; Parameters:    Size  Location     Type
 17959 ;;  a               9   18[BANK0 ] struct memoryField
 17960 ;;  b               9   27[BANK0 ] struct memoryField
 17961 ;; Auto vars:     Size  Location     Type
 17962 ;;		None
 17963 ;; Return value:  Size  Location     Type
 17964 ;;		None               void
 17965 ;; Registers used:
 17966 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 17967 ;; Tracked objects:
 17968 ;;		On entry : 0/0
 17969 ;;		On exit  : 0/0
 17970 ;;		Unchanged: 0/0
 17971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17972 ;;      Params:         0      18       0       0       0       0       0       0       0
 17973 ;;      Locals:         0       0       0       0       0       0       0       0       0
 17974 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17975 ;;      Totals:         0      18       0       0       0       0       0       0       0
 17976 ;;Total ram usage:       18 bytes
 17977 ;; Hardware stack levels used:    1
 17978 ;; Hardware stack levels required when called:    5
 17979 ;; This function calls:
 17980 ;;		_checkForOverlapSwitched
 17981 ;; This function is called by:
 17982 ;;		_memory_txFrameRequest
 17983 ;; This function uses a non-reentrant model
 17984 ;;
 17985                           
 17986                           	psect	text70
 17987  002C0A                     __ptext70:
 17988                           	opt stack 0
 17989  002C0A                     _checkForOverlap:
 17990                           	opt stack 18
 17991                           
 17992                           ;memoryController.c: 64: if ((a.start == b.start) ||
 17993                           ;memoryController.c: 65: (a.end == b.end) ||
 17994                           ;memoryController.c: 66: (a.start == b.end) ||
 17995                           ;memoryController.c: 67: (a.end == b.start) ||
 17996                           ;memoryController.c: 68: (a.end > 0x3000) ||
 17997                           ;memoryController.c: 69: (a.start > 0x3000) ||
 17998                           ;memoryController.c: 70: (b.end > 0x3000) ||
 17999                           ;memoryController.c: 71: (b.start > 0x3000))
 18000                           
 18001                           ; BSR set to: 0
 18002                           ;incstack = 0
 18003  002C0A  0100               	movlb	0	; () banked
 18004  002C0C  517B               	movf	checkForOverlap@b& (0+255),w,b
 18005  002C0E  1972               	xorwf	checkForOverlap@a& (0+255),w,b
 18006  002C10  E104               	bnz	u8090
 18007  002C12  517C               	movf	(checkForOverlap@b+1)& (0+255),w,b
 18008  002C14  1973               	xorwf	(checkForOverlap@a+1)& (0+255),w,b
 18009  002C16  B4D8               	btfsc	status,2,c
 18010  002C18  D029               	goto	u8160
 18011  002C1A                     u8090:
 18012                           
 18013                           ; BSR set to: 0
 18014  002C1A  517D               	movf	(checkForOverlap@b+2)& (0+255),w,b
 18015  002C1C  1974               	xorwf	(checkForOverlap@a+2)& (0+255),w,b
 18016  002C1E  E104               	bnz	u8100
 18017  002C20  517E               	movf	(checkForOverlap@b+3)& (0+255),w,b
 18018  002C22  1975               	xorwf	(checkForOverlap@a+3)& (0+255),w,b
 18019  002C24  B4D8               	btfsc	status,2,c
 18020  002C26  D022               	goto	u8160
 18021  002C28                     u8100:
 18022                           
 18023                           ; BSR set to: 0
 18024  002C28  5172               	movf	checkForOverlap@a& (0+255),w,b
 18025  002C2A  197D               	xorwf	(checkForOverlap@b+2)& (0+255),w,b
 18026  002C2C  E104               	bnz	u8110
 18027  002C2E  5173               	movf	(checkForOverlap@a+1)& (0+255),w,b
 18028  002C30  197E               	xorwf	(checkForOverlap@b+3)& (0+255),w,b
 18029  002C32  B4D8               	btfsc	status,2,c
 18030  002C34  D01B               	goto	u8160
 18031  002C36                     u8110:
 18032                           
 18033                           ; BSR set to: 0
 18034  002C36  517B               	movf	checkForOverlap@b& (0+255),w,b
 18035  002C38  1974               	xorwf	(checkForOverlap@a+2)& (0+255),w,b
 18036  002C3A  E104               	bnz	u8120
 18037  002C3C  517C               	movf	(checkForOverlap@b+1)& (0+255),w,b
 18038  002C3E  1975               	xorwf	(checkForOverlap@a+3)& (0+255),w,b
 18039  002C40  B4D8               	btfsc	status,2,c
 18040  002C42  D014               	goto	u8160
 18041  002C44                     u8120:
 18042                           
 18043                           ; BSR set to: 0
 18044  002C44  0574               	decf	(checkForOverlap@a+2)& (0+255),w,b
 18045  002C46  0E30               	movlw	48
 18046  002C48  5975               	subwfb	(checkForOverlap@a+3)& (0+255),w,b
 18047  002C4A  B0D8               	btfsc	status,0,c
 18048  002C4C  D00F               	goto	u8160
 18049                           
 18050                           ; BSR set to: 0
 18051  002C4E  0572               	decf	checkForOverlap@a& (0+255),w,b
 18052  002C50  0E30               	movlw	48
 18053  002C52  5973               	subwfb	(checkForOverlap@a+1)& (0+255),w,b
 18054  002C54  B0D8               	btfsc	status,0,c
 18055  002C56  D00A               	goto	u8160
 18056                           
 18057                           ; BSR set to: 0
 18058  002C58  057D               	decf	(checkForOverlap@b+2)& (0+255),w,b
 18059  002C5A  0E30               	movlw	48
 18060  002C5C  597E               	subwfb	(checkForOverlap@b+3)& (0+255),w,b
 18061  002C5E  B0D8               	btfsc	status,0,c
 18062  002C60  D005               	goto	u8160
 18063                           
 18064                           ; BSR set to: 0
 18065  002C62  057B               	decf	checkForOverlap@b& (0+255),w,b
 18066  002C64  0E30               	movlw	48
 18067  002C66  597C               	subwfb	(checkForOverlap@b+1)& (0+255),w,b
 18068  002C68  A0D8               	btfss	status,0,c
 18069  002C6A  D002               	goto	l432
 18070  002C6C                     u8160:
 18071                           
 18072                           ; BSR set to: 0
 18073                           ;memoryController.c: 72: return 1;
 18074                           
 18075                           ; BSR set to: 0
 18076  002C6C  80D8               	bsf	status,0,c
 18077                           
 18078                           ; BSR set to: 0
 18079  002C6E  0012               	return	
 18080  002C70                     l432:
 18081                           
 18082                           ; BSR set to: 0
 18083                           ;memoryController.c: 75: if (a.start < a.end) {
 18084                           
 18085                           ; BSR set to: 0
 18086  002C70  5174               	movf	(checkForOverlap@a+2)& (0+255),w,b
 18087  002C72  5D72               	subwf	checkForOverlap@a& (0+255),w,b
 18088  002C74  5175               	movf	(checkForOverlap@a+3)& (0+255),w,b
 18089  002C76  5973               	subwfb	(checkForOverlap@a+1)& (0+255),w,b
 18090  002C78  B0D8               	btfsc	status,0,c
 18091  002C7A  D03B               	goto	l436
 18092                           
 18093                           ; BSR set to: 0
 18094                           ;memoryController.c: 76: if (b.start < b.end) {
 18095  002C7C  517D               	movf	(checkForOverlap@b+2)& (0+255),w,b
 18096  002C7E  5D7B               	subwf	checkForOverlap@b& (0+255),w,b
 18097  002C80  517E               	movf	(checkForOverlap@b+3)& (0+255),w,b
 18098  002C82  597C               	subwfb	(checkForOverlap@b+1)& (0+255),w,b
 18099  002C84  B0D8               	btfsc	status,0,c
 18100  002C86  D02B               	goto	l437
 18101                           
 18102                           ; BSR set to: 0
 18103                           ;memoryController.c: 78: if (a.start < b.start) {
 18104  002C88  517B               	movf	checkForOverlap@b& (0+255),w,b
 18105  002C8A  5D72               	subwf	checkForOverlap@a& (0+255),w,b
 18106  002C8C  517C               	movf	(checkForOverlap@b+1)& (0+255),w,b
 18107  002C8E  5973               	subwfb	(checkForOverlap@a+1)& (0+255),w,b
 18108  002C90  B0D8               	btfsc	status,0,c
 18109  002C92  D00A               	goto	l438
 18110                           
 18111                           ; BSR set to: 0
 18112                           ;memoryController.c: 79: if (a.end > b.start) {
 18113  002C94  5174               	movf	(checkForOverlap@a+2)& (0+255),w,b
 18114  002C96  5D7B               	subwf	checkForOverlap@b& (0+255),w,b
 18115  002C98  5175               	movf	(checkForOverlap@a+3)& (0+255),w,b
 18116  002C9A  597C               	subwfb	(checkForOverlap@b+1)& (0+255),w,b
 18117  002C9C  B0D8               	btfsc	status,0,c
 18118  002C9E  D002               	goto	l439
 18119                           
 18120                           ; BSR set to: 0
 18121                           ;memoryController.c: 80: return 1;
 18122  002CA0  80D8               	bsf	status,0,c
 18123                           
 18124                           ; BSR set to: 0
 18125                           ;memoryController.c: 81: } else {
 18126                           
 18127                           ; BSR set to: 0
 18128  002CA2  0012               	return	
 18129  002CA4                     l439:
 18130                           
 18131                           ; BSR set to: 0
 18132                           ;memoryController.c: 82: return 0;
 18133                           
 18134                           ; BSR set to: 0
 18135  002CA4  90D8               	bcf	status,0,c
 18136                           
 18137                           ; BSR set to: 0
 18138                           ;memoryController.c: 83: }
 18139                           ;memoryController.c: 84: } else {
 18140                           
 18141                           ; BSR set to: 0
 18142  002CA6  0012               	return	
 18143  002CA8                     l438:
 18144                           
 18145                           ; BSR set to: 0
 18146                           ;memoryController.c: 85: return checkForOverlapSwitched(b, a);
 18147                           
 18148                           ; BSR set to: 0
 18149  002CA8  EE20  F07B         	lfsr	2,checkForOverlap@b
 18150  002CAC  EE00  F060         	lfsr	0,checkForOverlapSwitched@a
 18151  002CB0  0E08               	movlw	8
 18152  002CB2                     u8211:
 18153  002CB2  CFDB FFEB          	movff	plusw2,plusw0
 18154  002CB6  06E8               	decf	wreg,f,c
 18155  002CB8  E2FC               	bc	u8211
 18156  002CBA  EE20  F072         	lfsr	2,checkForOverlap@a
 18157  002CBE  EE00  F069         	lfsr	0,checkForOverlapSwitched@b
 18158  002CC2  0E08               	movlw	8
 18159  002CC4                     u8221:
 18160  002CC4  CFDB FFEB          	movff	plusw2,plusw0
 18161  002CC8  06E8               	decf	wreg,f,c
 18162  002CCA  E2FC               	bc	u8221
 18163  002CCC  EC65  F01B         	call	_checkForOverlapSwitched	;wreg free
 18164  002CD0  0100               	movlb	0	; () banked
 18165  002CD2  B0D8               	btfsc	status,0,c
 18166  002CD4  D002               	goto	l7490
 18167                           
 18168                           ; BSR set to: 0
 18169  002CD6  90D8               	bcf	status,0,c
 18170  002CD8  0012               	return	
 18171  002CDA                     l7490:
 18172                           
 18173                           ; BSR set to: 0
 18174                           
 18175                           ; BSR set to: 0
 18176  002CDA  80D8               	bsf	status,0,c
 18177                           
 18178                           ; BSR set to: 0
 18179                           ;memoryController.c: 86: }
 18180                           ;memoryController.c: 87: } else {
 18181                           
 18182                           ; BSR set to: 0
 18183                           
 18184                           ; BSR set to: 0
 18185  002CDC  0012               	return	
 18186  002CDE                     l437:
 18187                           
 18188                           ; BSR set to: 0
 18189                           ;memoryController.c: 88: if (b.end < a.start)
 18190                           
 18191                           ; BSR set to: 0
 18192  002CDE  5172               	movf	checkForOverlap@a& (0+255),w,b
 18193  002CE0  5D7D               	subwf	(checkForOverlap@b+2)& (0+255),w,b
 18194  002CE2  5173               	movf	(checkForOverlap@a+1)& (0+255),w,b
 18195  002CE4  597E               	subwfb	(checkForOverlap@b+3)& (0+255),w,b
 18196  002CE6  B0D8               	btfsc	status,0,c
 18197  002CE8  D002               	goto	l443
 18198                           
 18199                           ; BSR set to: 0
 18200                           ;memoryController.c: 89: return 0;
 18201  002CEA  90D8               	bcf	status,0,c
 18202                           
 18203                           ; BSR set to: 0
 18204                           
 18205                           ; BSR set to: 0
 18206  002CEC  0012               	return	
 18207  002CEE                     l443:
 18208                           
 18209                           ; BSR set to: 0
 18210                           ;memoryController.c: 90: else
 18211                           ;memoryController.c: 91: return 1;
 18212                           
 18213                           ; BSR set to: 0
 18214  002CEE  80D8               	bsf	status,0,c
 18215                           
 18216                           ; BSR set to: 0
 18217                           ;memoryController.c: 92: }
 18218                           ;memoryController.c: 93: } else {
 18219                           
 18220                           ; BSR set to: 0
 18221                           
 18222                           ; BSR set to: 0
 18223  002CF0  0012               	return	
 18224  002CF2                     l436:
 18225                           
 18226                           ; BSR set to: 0
 18227                           ;memoryController.c: 94: return checkForOverlapSwitched(b, a);
 18228                           
 18229                           ; BSR set to: 0
 18230  002CF2  EE20  F07B         	lfsr	2,checkForOverlap@b
 18231  002CF6  EE00  F060         	lfsr	0,checkForOverlapSwitched@a
 18232  002CFA  0E08               	movlw	8
 18233  002CFC                     u8251:
 18234  002CFC  CFDB FFEB          	movff	plusw2,plusw0
 18235  002D00  06E8               	decf	wreg,f,c
 18236  002D02  E2FC               	bc	u8251
 18237  002D04  EE20  F072         	lfsr	2,checkForOverlap@a
 18238  002D08  EE00  F069         	lfsr	0,checkForOverlapSwitched@b
 18239  002D0C  0E08               	movlw	8
 18240  002D0E                     u8261:
 18241  002D0E  CFDB FFEB          	movff	plusw2,plusw0
 18242  002D12  06E8               	decf	wreg,f,c
 18243  002D14  E2FC               	bc	u8261
 18244  002D16  EC65  F01B         	call	_checkForOverlapSwitched	;wreg free
 18245  002D1A  0100               	movlb	0	; () banked
 18246  002D1C  B0D8               	btfsc	status,0,c
 18247  002D1E  D002               	goto	l7494
 18248                           
 18249                           ; BSR set to: 0
 18250  002D20  90D8               	bcf	status,0,c
 18251  002D22  0012               	return	
 18252  002D24                     l7494:
 18253                           
 18254                           ; BSR set to: 0
 18255                           
 18256                           ; BSR set to: 0
 18257  002D24  80D8               	bsf	status,0,c
 18258                           
 18259                           ; BSR set to: 0
 18260                           
 18261                           ; BSR set to: 0
 18262  002D26  0012               	return	
 18263  002D28                     __end_of_checkForOverlap:
 18264                           	opt stack 0
 18265                           tblptru	equ	0xFF8
 18266                           tblptrh	equ	0xFF7
 18267                           tblptrl	equ	0xFF6
 18268                           tablat	equ	0xFF5
 18269                           prodh	equ	0xFF4
 18270                           prodl	equ	0xFF3
 18271                           intcon	equ	0xFF2
 18272                           intcon3	equ	0xFF0
 18273                           indf0	equ	0xFEF
 18274                           postinc0	equ	0xFEE
 18275                           plusw0	equ	0xFEB
 18276                           fsr0h	equ	0xFEA
 18277                           fsr0l	equ	0xFE9
 18278                           wreg	equ	0xFE8
 18279                           indf1	equ	0xFE7
 18280                           postinc1	equ	0xFE6
 18281                           postdec1	equ	0xFE5
 18282                           plusw1	equ	0xFE3
 18283                           fsr1h	equ	0xFE2
 18284                           fsr1l	equ	0xFE1
 18285                           indf2	equ	0xFDF
 18286                           postinc2	equ	0xFDE
 18287                           postdec2	equ	0xFDD
 18288                           plusw2	equ	0xFDB
 18289                           fsr2h	equ	0xFDA
 18290                           fsr2l	equ	0xFD9
 18291                           status	equ	0xFD8
 18292                           
 18293 ;; *************** function _checkForOverlapSwitched *****************
 18294 ;; Defined at:
 18295 ;;		line 98 in file "src/mem/memoryController.c"
 18296 ;; Parameters:    Size  Location     Type
 18297 ;;  a               9    0[BANK0 ] struct memoryField
 18298 ;;  b               9    9[BANK0 ] struct memoryField
 18299 ;; Auto vars:     Size  Location     Type
 18300 ;;		None
 18301 ;; Return value:  Size  Location     Type
 18302 ;;		None               void
 18303 ;; Registers used:
 18304 ;;		wreg, status,2, status,0
 18305 ;; Tracked objects:
 18306 ;;		On entry : 0/0
 18307 ;;		On exit  : 0/0
 18308 ;;		Unchanged: 0/0
 18309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18310 ;;      Params:         0      18       0       0       0       0       0       0       0
 18311 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18312 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18313 ;;      Totals:         0      18       0       0       0       0       0       0       0
 18314 ;;Total ram usage:       18 bytes
 18315 ;; Hardware stack levels used:    1
 18316 ;; Hardware stack levels required when called:    4
 18317 ;; This function calls:
 18318 ;;		Nothing
 18319 ;; This function is called by:
 18320 ;;		_checkForOverlap
 18321 ;; This function uses a non-reentrant model
 18322 ;;
 18323                           
 18324                           	psect	text71
 18325  0036CA                     __ptext71:
 18326                           	opt stack 0
 18327  0036CA                     _checkForOverlapSwitched:
 18328                           	opt stack 18
 18329                           
 18330                           ;memoryController.c: 101: if ((a.start == b.start) ||
 18331                           ;memoryController.c: 102: (a.end == b.end) ||
 18332                           ;memoryController.c: 103: (a.start == b.end) ||
 18333                           ;memoryController.c: 104: (a.end == b.start) ||
 18334                           ;memoryController.c: 105: (a.end > 0x3000) ||
 18335                           ;memoryController.c: 106: (a.start > 0x3000) ||
 18336                           ;memoryController.c: 107: (b.end > 0x3000) ||
 18337                           ;memoryController.c: 108: (b.start > 0x3000))
 18338                           
 18339                           ; BSR set to: 0
 18340                           ;incstack = 0
 18341  0036CA  0100               	movlb	0	; () banked
 18342  0036CC  5169               	movf	checkForOverlapSwitched@b& (0+255),w,b
 18343  0036CE  1960               	xorwf	checkForOverlapSwitched@a& (0+255),w,b
 18344  0036D0  E104               	bnz	u7900
 18345  0036D2  516A               	movf	(checkForOverlapSwitched@b+1)& (0+255),w,b
 18346  0036D4  1961               	xorwf	(checkForOverlapSwitched@a+1)& (0+255),w,b
 18347  0036D6  B4D8               	btfsc	status,2,c
 18348  0036D8  D029               	goto	u7970
 18349  0036DA                     u7900:
 18350                           
 18351                           ; BSR set to: 0
 18352  0036DA  516B               	movf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 18353  0036DC  1962               	xorwf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 18354  0036DE  E104               	bnz	u7910
 18355  0036E0  516C               	movf	(checkForOverlapSwitched@b+3)& (0+255),w,b
 18356  0036E2  1963               	xorwf	(checkForOverlapSwitched@a+3)& (0+255),w,b
 18357  0036E4  B4D8               	btfsc	status,2,c
 18358  0036E6  D022               	goto	u7970
 18359  0036E8                     u7910:
 18360                           
 18361                           ; BSR set to: 0
 18362  0036E8  5160               	movf	checkForOverlapSwitched@a& (0+255),w,b
 18363  0036EA  196B               	xorwf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 18364  0036EC  E104               	bnz	u7920
 18365  0036EE  5161               	movf	(checkForOverlapSwitched@a+1)& (0+255),w,b
 18366  0036F0  196C               	xorwf	(checkForOverlapSwitched@b+3)& (0+255),w,b
 18367  0036F2  B4D8               	btfsc	status,2,c
 18368  0036F4  D01B               	goto	u7970
 18369  0036F6                     u7920:
 18370                           
 18371                           ; BSR set to: 0
 18372  0036F6  5169               	movf	checkForOverlapSwitched@b& (0+255),w,b
 18373  0036F8  1962               	xorwf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 18374  0036FA  E104               	bnz	u7930
 18375  0036FC  516A               	movf	(checkForOverlapSwitched@b+1)& (0+255),w,b
 18376  0036FE  1963               	xorwf	(checkForOverlapSwitched@a+3)& (0+255),w,b
 18377  003700  B4D8               	btfsc	status,2,c
 18378  003702  D014               	goto	u7970
 18379  003704                     u7930:
 18380                           
 18381                           ; BSR set to: 0
 18382  003704  0562               	decf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 18383  003706  0E30               	movlw	48
 18384  003708  5963               	subwfb	(checkForOverlapSwitched@a+3)& (0+255),w,b
 18385  00370A  B0D8               	btfsc	status,0,c
 18386  00370C  D00F               	goto	u7970
 18387                           
 18388                           ; BSR set to: 0
 18389  00370E  0560               	decf	checkForOverlapSwitched@a& (0+255),w,b
 18390  003710  0E30               	movlw	48
 18391  003712  5961               	subwfb	(checkForOverlapSwitched@a+1)& (0+255),w,b
 18392  003714  B0D8               	btfsc	status,0,c
 18393  003716  D00A               	goto	u7970
 18394                           
 18395                           ; BSR set to: 0
 18396  003718  056B               	decf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 18397  00371A  0E30               	movlw	48
 18398  00371C  596C               	subwfb	(checkForOverlapSwitched@b+3)& (0+255),w,b
 18399  00371E  B0D8               	btfsc	status,0,c
 18400  003720  D005               	goto	u7970
 18401                           
 18402                           ; BSR set to: 0
 18403  003722  0569               	decf	checkForOverlapSwitched@b& (0+255),w,b
 18404  003724  0E30               	movlw	48
 18405  003726  596A               	subwfb	(checkForOverlapSwitched@b+1)& (0+255),w,b
 18406  003728  A0D8               	btfss	status,0,c
 18407  00372A  D002               	goto	l448
 18408  00372C                     u7970:
 18409                           
 18410                           ; BSR set to: 0
 18411                           ;memoryController.c: 109: return 1;
 18412                           
 18413                           ; BSR set to: 0
 18414  00372C  80D8               	bsf	status,0,c
 18415                           
 18416                           ; BSR set to: 0
 18417  00372E  0012               	return	
 18418  003730                     l448:
 18419                           
 18420                           ; BSR set to: 0
 18421                           ;memoryController.c: 112: if (a.start < a.end) {
 18422                           
 18423                           ; BSR set to: 0
 18424  003730  5162               	movf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 18425  003732  5D60               	subwf	checkForOverlapSwitched@a& (0+255),w,b
 18426  003734  5163               	movf	(checkForOverlapSwitched@a+3)& (0+255),w,b
 18427  003736  5961               	subwfb	(checkForOverlapSwitched@a+1)& (0+255),w,b
 18428  003738  B0D8               	btfsc	status,0,c
 18429  00373A  D01E               	goto	l459
 18430                           
 18431                           ; BSR set to: 0
 18432                           ;memoryController.c: 113: if (b.start < b.end) {
 18433  00373C  516B               	movf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 18434  00373E  5D69               	subwf	checkForOverlapSwitched@b& (0+255),w,b
 18435  003740  516C               	movf	(checkForOverlapSwitched@b+3)& (0+255),w,b
 18436  003742  596A               	subwfb	(checkForOverlapSwitched@b+1)& (0+255),w,b
 18437  003744  B0D8               	btfsc	status,0,c
 18438  003746  D010               	goto	l453
 18439                           
 18440                           ; BSR set to: 0
 18441                           ;memoryController.c: 115: if (a.start < b.start) {
 18442  003748  5169               	movf	checkForOverlapSwitched@b& (0+255),w,b
 18443  00374A  5D60               	subwf	checkForOverlapSwitched@a& (0+255),w,b
 18444  00374C  516A               	movf	(checkForOverlapSwitched@b+1)& (0+255),w,b
 18445  00374E  5961               	subwfb	(checkForOverlapSwitched@a+1)& (0+255),w,b
 18446  003750  B0D8               	btfsc	status,0,c
 18447  003752  D012               	goto	l459
 18448                           
 18449                           ; BSR set to: 0
 18450                           ;memoryController.c: 116: if (a.end > b.start) {
 18451  003754  5162               	movf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 18452  003756  5D69               	subwf	checkForOverlapSwitched@b& (0+255),w,b
 18453  003758  5163               	movf	(checkForOverlapSwitched@a+3)& (0+255),w,b
 18454  00375A  596A               	subwfb	(checkForOverlapSwitched@b+1)& (0+255),w,b
 18455  00375C  B0D8               	btfsc	status,0,c
 18456  00375E  D002               	goto	l455
 18457                           
 18458                           ; BSR set to: 0
 18459                           ;memoryController.c: 117: return 1;
 18460  003760  80D8               	bsf	status,0,c
 18461                           
 18462                           ; BSR set to: 0
 18463  003762  0012               	return	
 18464  003764                     l455:
 18465                           
 18466                           ; BSR set to: 0
 18467                           ;memoryController.c: 119: return 0;
 18468                           
 18469                           ; BSR set to: 0
 18470  003764  90D8               	bcf	status,0,c
 18471                           
 18472                           ; BSR set to: 0
 18473  003766  0012               	return	
 18474  003768                     l453:
 18475                           
 18476                           ; BSR set to: 0
 18477                           ;memoryController.c: 123: if (b.end < a.start)
 18478                           
 18479                           ; BSR set to: 0
 18480  003768  5160               	movf	checkForOverlapSwitched@a& (0+255),w,b
 18481  00376A  5D6B               	subwf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 18482  00376C  5161               	movf	(checkForOverlapSwitched@a+1)& (0+255),w,b
 18483  00376E  596C               	subwfb	(checkForOverlapSwitched@b+3)& (0+255),w,b
 18484  003770  A0D8               	btfss	status,0,c
 18485  003772  D7F8               	goto	l455
 18486                           
 18487                           ; BSR set to: 0
 18488                           ;memoryController.c: 125: else
 18489                           ;memoryController.c: 126: return 1;
 18490                           
 18491                           ; BSR set to: 0
 18492                           
 18493                           ; BSR set to: 0
 18494                           
 18495                           ; BSR set to: 0
 18496                           
 18497                           ; BSR set to: 0
 18498                           ;memoryController.c: 124: return 0;
 18499  003774  80D8               	bsf	status,0,c
 18500                           
 18501                           ; BSR set to: 0
 18502  003776  0012               	return	
 18503  003778                     l459:
 18504                           
 18505                           ; BSR set to: 0
 18506                           ;memoryController.c: 127: }
 18507                           ;memoryController.c: 128: }
 18508                           ;memoryController.c: 130: return 1;
 18509                           
 18510                           ; BSR set to: 0
 18511                           
 18512                           ; BSR set to: 0
 18513                           
 18514                           ; BSR set to: 0
 18515  003778  80D8               	bsf	status,0,c
 18516  00377A  0012               	return	
 18517  00377C                     __end_of_checkForOverlapSwitched:
 18518                           	opt stack 0
 18519                           tblptru	equ	0xFF8
 18520                           tblptrh	equ	0xFF7
 18521                           tblptrl	equ	0xFF6
 18522                           tablat	equ	0xFF5
 18523                           prodh	equ	0xFF4
 18524                           prodl	equ	0xFF3
 18525                           intcon	equ	0xFF2
 18526                           intcon3	equ	0xFF0
 18527                           indf0	equ	0xFEF
 18528                           postinc0	equ	0xFEE
 18529                           plusw0	equ	0xFEB
 18530                           fsr0h	equ	0xFEA
 18531                           fsr0l	equ	0xFE9
 18532                           wreg	equ	0xFE8
 18533                           indf1	equ	0xFE7
 18534                           postinc1	equ	0xFE6
 18535                           postdec1	equ	0xFE5
 18536                           plusw1	equ	0xFE3
 18537                           fsr1h	equ	0xFE2
 18538                           fsr1l	equ	0xFE1
 18539                           indf2	equ	0xFDF
 18540                           postinc2	equ	0xFDE
 18541                           postdec2	equ	0xFDD
 18542                           plusw2	equ	0xFDB
 18543                           fsr2h	equ	0xFDA
 18544                           fsr2l	equ	0xFD9
 18545                           status	equ	0xFD8
 18546                           
 18547 ;; *************** function ___wmul *****************
 18548 ;; Defined at:
 18549 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 18550 ;; Parameters:    Size  Location     Type
 18551 ;;  multiplier      2    0[BANK0 ] unsigned int 
 18552 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 18553 ;; Auto vars:     Size  Location     Type
 18554 ;;  product         2    4[BANK0 ] unsigned int 
 18555 ;; Return value:  Size  Location     Type
 18556 ;;                  2    0[BANK0 ] unsigned int 
 18557 ;; Registers used:
 18558 ;;		wreg, status,2, status,0, prodl, prodh
 18559 ;; Tracked objects:
 18560 ;;		On entry : 0/0
 18561 ;;		On exit  : 0/0
 18562 ;;		Unchanged: 0/0
 18563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18564 ;;      Params:         0       4       0       0       0       0       0       0       0
 18565 ;;      Locals:         0       2       0       0       0       0       0       0       0
 18566 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18567 ;;      Totals:         0       6       0       0       0       0       0       0       0
 18568 ;;Total ram usage:        6 bytes
 18569 ;; Hardware stack levels used:    1
 18570 ;; Hardware stack levels required when called:    4
 18571 ;; This function calls:
 18572 ;;		Nothing
 18573 ;; This function is called by:
 18574 ;;		_memory_txFrameRequest
 18575 ;; This function uses a non-reentrant model
 18576 ;;
 18577                           
 18578                           	psect	text72
 18579  0049C8                     __ptext72:
 18580                           	opt stack 0
 18581  0049C8                     ___wmul:
 18582                           	opt stack 19
 18583                           
 18584                           ; BSR set to: 0
 18585                           ;incstack = 0
 18586  0049C8  0100               	movlb	0	; () banked
 18587  0049CA  5160               	movf	___wmul@multiplier& (0+255),w,b
 18588  0049CC  0362               	mulwf	___wmul@multiplicand& (0+255),b
 18589  0049CE  CFF3 F064          	movff	prodl,___wmul@product
 18590  0049D2  CFF4 F065          	movff	prodh,___wmul@product+1
 18591  0049D6  5160               	movf	___wmul@multiplier& (0+255),w,b
 18592  0049D8  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 18593  0049DA  50F3               	movf	prodl,w,c
 18594  0049DC  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 18595  0049DE  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 18596  0049E0  0362               	mulwf	___wmul@multiplicand& (0+255),b
 18597  0049E2  50F3               	movf	prodl,w,c
 18598  0049E4  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 18599                           
 18600                           ; BSR set to: 0
 18601  0049E6  C064  F060         	movff	___wmul@product,?___wmul
 18602  0049EA  C065  F061         	movff	___wmul@product+1,?___wmul+1
 18603  0049EE  0012               	return	
 18604  0049F0                     __end_of___wmul:
 18605                           	opt stack 0
 18606                           tblptru	equ	0xFF8
 18607                           tblptrh	equ	0xFF7
 18608                           tblptrl	equ	0xFF6
 18609                           tablat	equ	0xFF5
 18610                           prodh	equ	0xFF4
 18611                           prodl	equ	0xFF3
 18612                           intcon	equ	0xFF2
 18613                           intcon3	equ	0xFF0
 18614                           indf0	equ	0xFEF
 18615                           postinc0	equ	0xFEE
 18616                           plusw0	equ	0xFEB
 18617                           fsr0h	equ	0xFEA
 18618                           fsr0l	equ	0xFE9
 18619                           wreg	equ	0xFE8
 18620                           indf1	equ	0xFE7
 18621                           postinc1	equ	0xFE6
 18622                           postdec1	equ	0xFE5
 18623                           plusw1	equ	0xFE3
 18624                           fsr1h	equ	0xFE2
 18625                           fsr1l	equ	0xFE1
 18626                           indf2	equ	0xFDF
 18627                           postinc2	equ	0xFDE
 18628                           postdec2	equ	0xFDD
 18629                           plusw2	equ	0xFDB
 18630                           fsr2h	equ	0xFDA
 18631                           fsr2l	equ	0xFD9
 18632                           status	equ	0xFD8
 18633                           
 18634 ;; *************** function _ethernetController_writeEtherTypeFieldToBuffer *****************
 18635 ;; Defined at:
 18636 ;;		line 241 in file "src/enc424j600/ENC424J600.c"
 18637 ;; Parameters:    Size  Location     Type
 18638 ;;  ethtype         2   15[BANK0 ] enum E5508
 18639 ;;  field           9   17[BANK0 ] struct memoryField
 18640 ;; Auto vars:     Size  Location     Type
 18641 ;;  opcode          1   28[BANK0 ] unsigned char 
 18642 ;;  highByte        1   27[BANK0 ] unsigned char 
 18643 ;;  lowByte         1   26[BANK0 ] unsigned char 
 18644 ;; Return value:  Size  Location     Type
 18645 ;;                  1    wreg      void 
 18646 ;; Registers used:
 18647 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18648 ;; Tracked objects:
 18649 ;;		On entry : 0/0
 18650 ;;		On exit  : 0/0
 18651 ;;		Unchanged: 0/0
 18652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18653 ;;      Params:         0      11       0       0       0       0       0       0       0
 18654 ;;      Locals:         0       3       0       0       0       0       0       0       0
 18655 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18656 ;;      Totals:         0      14       0       0       0       0       0       0       0
 18657 ;;Total ram usage:       14 bytes
 18658 ;; Hardware stack levels used:    1
 18659 ;; Hardware stack levels required when called:    7
 18660 ;; This function calls:
 18661 ;;		_enc424j600_setGPDATAWritePointer
 18662 ;;		_enc424j600_writeSPI
 18663 ;; This function is called by:
 18664 ;;		_ethernet_txFrameRequest
 18665 ;; This function uses a non-reentrant model
 18666 ;;
 18667                           
 18668                           	psect	text73
 18669  004494                     __ptext73:
 18670                           	opt stack 0
 18671  004494                     _ethernetController_writeEtherTypeFieldToBuffer:
 18672                           	opt stack 17
 18673                           
 18674                           ;ENC424J600.c: 242: enc424j600_setGPDATAWritePointer(field.start + 0x0006);
 18675                           
 18676                           ; BSR set to: 0
 18677                           ;incstack = 0
 18678  004494  0E06               	movlw	6
 18679  004496  0100               	movlb	0	; () banked
 18680  004498  2571               	addwf	ethernetController_writeEtherTypeFieldToBuffer@field& (0+255),w,b
 18681  00449A  6F6A               	movwf	enc424j600_setGPDATAWritePointer@addr& (0+255),b
 18682  00449C  0E00               	movlw	0
 18683  00449E  2172               	addwfc	(ethernetController_writeEtherTypeFieldToBuffer@field+1)& (0+255),w,b
 18684  0044A0  6F6B               	movwf	(enc424j600_setGPDATAWritePointer@addr+1)& (0+255),b
 18685  0044A2  EC86  F023         	call	_enc424j600_setGPDATAWritePointer	;wreg free
 18686                           
 18687                           ;ENC424J600.c: 243: uint8_t lowByte = ethtype & 0x00ff;
 18688  0044A6  C06F  F07A         	movff	ethernetController_writeEtherTypeFieldToBuffer@ethtype,ethernetController_writeEt
      +                          herTypeFieldToBuffer@lowByte
 18689                           
 18690                           ;ENC424J600.c: 244: uint8_t highByte = (ethtype & 0xff00) >> 8;
 18691  0044AA  0100               	movlb	0	; () banked
 18692  0044AC  5170               	movf	(ethernetController_writeEtherTypeFieldToBuffer@ethtype+1)& (0+255),w,b
 18693  0044AE  6F7B               	movwf	ethernetController_writeEtherTypeFieldToBuffer@highByte& (0+255),b
 18694                           
 18695                           ; BSR set to: 0
 18696                           ;ENC424J600.c: 245: uint8_t opcode = 0x2A;
 18697  0044B0  0E2A               	movlw	42
 18698  0044B2  6F7C               	movwf	ethernetController_writeEtherTypeFieldToBuffer@opcode& (0+255),b
 18699                           
 18700                           ; BSR set to: 0
 18701                           ;ENC424J600.c: 246: PORTBbits.RB4=0;
 18702  0044B4  9881               	bcf	3969,4,c	;volatile
 18703                           
 18704                           ;ENC424J600.c: 247: enc424j600_writeSPI(&opcode);
 18705  0044B6  0E7C               	movlw	low ethernetController_writeEtherTypeFieldToBuffer@opcode
 18706  0044B8  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 18707  0044BA  0E00               	movlw	high ethernetController_writeEtherTypeFieldToBuffer@opcode
 18708  0044BC  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 18709  0044BE  ECC2  F020         	call	_enc424j600_writeSPI	;wreg free
 18710                           
 18711                           ;ENC424J600.c: 248: enc424j600_writeSPI(&highByte);
 18712  0044C2  0E7B               	movlw	low ethernetController_writeEtherTypeFieldToBuffer@highByte
 18713  0044C4  0100               	movlb	0	; () banked
 18714  0044C6  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 18715  0044C8  0E00               	movlw	high ethernetController_writeEtherTypeFieldToBuffer@highByte
 18716  0044CA  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 18717  0044CC  ECC2  F020         	call	_enc424j600_writeSPI	;wreg free
 18718                           
 18719                           ;ENC424J600.c: 249: enc424j600_writeSPI(&lowByte);
 18720  0044D0  0E7A               	movlw	low ethernetController_writeEtherTypeFieldToBuffer@lowByte
 18721  0044D2  0100               	movlb	0	; () banked
 18722  0044D4  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 18723  0044D6  0E00               	movlw	high ethernetController_writeEtherTypeFieldToBuffer@lowByte
 18724  0044D8  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 18725  0044DA  ECC2  F020         	call	_enc424j600_writeSPI	;wreg free
 18726                           
 18727                           ;ENC424J600.c: 250: PORTBbits.RB4=1;
 18728  0044DE  8881               	bsf	3969,4,c	;volatile
 18729  0044E0  0012               	return		;funcret
 18730  0044E2                     __end_of_ethernetController_writeEtherTypeFieldToBuffer:
 18731                           	opt stack 0
 18732                           tblptru	equ	0xFF8
 18733                           tblptrh	equ	0xFF7
 18734                           tblptrl	equ	0xFF6
 18735                           tablat	equ	0xFF5
 18736                           prodh	equ	0xFF4
 18737                           prodl	equ	0xFF3
 18738                           intcon	equ	0xFF2
 18739                           intcon3	equ	0xFF0
 18740                           indf0	equ	0xFEF
 18741                           postinc0	equ	0xFEE
 18742                           plusw0	equ	0xFEB
 18743                           fsr0h	equ	0xFEA
 18744                           fsr0l	equ	0xFE9
 18745                           wreg	equ	0xFE8
 18746                           indf1	equ	0xFE7
 18747                           postinc1	equ	0xFE6
 18748                           postdec1	equ	0xFE5
 18749                           plusw1	equ	0xFE3
 18750                           fsr1h	equ	0xFE2
 18751                           fsr1l	equ	0xFE1
 18752                           indf2	equ	0xFDF
 18753                           postinc2	equ	0xFDE
 18754                           postdec2	equ	0xFDD
 18755                           plusw2	equ	0xFDB
 18756                           fsr2h	equ	0xFDA
 18757                           fsr2l	equ	0xFD9
 18758                           status	equ	0xFD8
 18759                           
 18760 ;; *************** function _ethernetController_writeDestinationMACAddress *****************
 18761 ;; Defined at:
 18762 ;;		line 228 in file "src/enc424j600/ENC424J600.c"
 18763 ;; Parameters:    Size  Location     Type
 18764 ;;  addr            6   15[BANK0 ] struct macaddress
 18765 ;;  field           9   21[BANK0 ] struct memoryField
 18766 ;; Auto vars:     Size  Location     Type
 18767 ;;  i               1   37[BANK0 ] unsigned char 
 18768 ;;  i               1   38[BANK0 ] unsigned char 
 18769 ;;  data            6   30[BANK0 ] unsigned char [6]
 18770 ;;  opcode          1   36[BANK0 ] unsigned char 
 18771 ;; Return value:  Size  Location     Type
 18772 ;;                  1    wreg      void 
 18773 ;; Registers used:
 18774 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18775 ;; Tracked objects:
 18776 ;;		On entry : 0/0
 18777 ;;		On exit  : 0/0
 18778 ;;		Unchanged: 0/0
 18779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18780 ;;      Params:         0      15       0       0       0       0       0       0       0
 18781 ;;      Locals:         0       9       0       0       0       0       0       0       0
 18782 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18783 ;;      Totals:         0      24       0       0       0       0       0       0       0
 18784 ;;Total ram usage:       24 bytes
 18785 ;; Hardware stack levels used:    1
 18786 ;; Hardware stack levels required when called:    7
 18787 ;; This function calls:
 18788 ;;		_enc424j600_setGPDATAWritePointer
 18789 ;;		_enc424j600_writeSPI
 18790 ;; This function is called by:
 18791 ;;		_ethernet_txFrameRequest
 18792 ;; This function uses a non-reentrant model
 18793 ;;
 18794                           
 18795                           	psect	text74
 18796  003C22                     __ptext74:
 18797                           	opt stack 0
 18798  003C22                     _ethernetController_writeDestinationMACAddress:
 18799                           	opt stack 17
 18800                           
 18801                           ;ENC424J600.c: 229: enc424j600_setGPDATAWritePointer(field.start);
 18802                           
 18803                           ;incstack = 0
 18804  003C22  C075  F06A         	movff	ethernetController_writeDestinationMACAddress@field,enc424j600_setGPDATAWritePoin
      +                          ter@addr
 18805  003C26  C076  F06B         	movff	ethernetController_writeDestinationMACAddress@field+1,enc424j600_setGPDATAWritePo
      +                          inter@addr+1
 18806  003C2A  EC86  F023         	call	_enc424j600_setGPDATAWritePointer	;wreg free
 18807                           
 18808                           ;ENC424J600.c: 230: uint8_t data[6];
 18809                           ;ENC424J600.c: 231: for (uint8_t i = 0; i < 6; i++)
 18810  003C2E  0E00               	movlw	0
 18811  003C30  0100               	movlb	0	; () banked
 18812  003C32  6F86               	movwf	ethernetController_writeDestinationMACAddress@i& (0+255),b
 18813  003C34                     l7738:
 18814                           
 18815                           ; BSR set to: 0
 18816  003C34  0E05               	movlw	5
 18817  003C36  6586               	cpfsgt	ethernetController_writeDestinationMACAddress@i& (0+255),b
 18818  003C38  D001               	goto	l140
 18819  003C3A  D014               	goto	u8290
 18820  003C3C                     l140:
 18821                           
 18822                           ; BSR set to: 0
 18823                           ;ENC424J600.c: 232: data[i] = addr.address[i];
 18824                           
 18825                           ; BSR set to: 0
 18826  003C3C  5186               	movf	ethernetController_writeDestinationMACAddress@i& (0+255),w,b
 18827  003C3E  0D01               	mullw	1
 18828  003C40  0E6F               	movlw	low ethernetController_writeDestinationMACAddress@addr
 18829  003C42  24F3               	addwf	prodl,w,c
 18830  003C44  6ED9               	movwf	fsr2l,c
 18831  003C46  0E00               	movlw	high ethernetController_writeDestinationMACAddress@addr
 18832  003C48  20F4               	addwfc	prodh,w,c
 18833  003C4A  6EDA               	movwf	fsr2h,c
 18834  003C4C  5186               	movf	ethernetController_writeDestinationMACAddress@i& (0+255),w,b
 18835  003C4E  0D01               	mullw	1
 18836  003C50  0E7E               	movlw	low ethernetController_writeDestinationMACAddress@data
 18837  003C52  24F3               	addwf	prodl,w,c
 18838  003C54  6EE1               	movwf	fsr1l,c
 18839  003C56  0E00               	movlw	high ethernetController_writeDestinationMACAddress@data
 18840  003C58  20F4               	addwfc	prodh,w,c
 18841  003C5A  6EE2               	movwf	fsr1h,c
 18842  003C5C  CFDF FFE7          	movff	indf2,indf1
 18843                           
 18844                           ; BSR set to: 0
 18845  003C60  2B86               	incf	ethernetController_writeDestinationMACAddress@i& (0+255),f,b
 18846  003C62  D7E8               	goto	l7738
 18847  003C64                     u8290:
 18848                           
 18849                           ; BSR set to: 0
 18850                           ;ENC424J600.c: 233: uint8_t opcode = 0x2A;
 18851                           
 18852                           ; BSR set to: 0
 18853  003C64  0E2A               	movlw	42
 18854  003C66  6F84               	movwf	ethernetController_writeDestinationMACAddress@opcode& (0+255),b
 18855                           
 18856                           ; BSR set to: 0
 18857                           ;ENC424J600.c: 234: PORTBbits.RB4=0;
 18858  003C68  9881               	bcf	3969,4,c	;volatile
 18859                           
 18860                           ; BSR set to: 0
 18861                           ;ENC424J600.c: 235: enc424j600_writeSPI(&opcode);
 18862  003C6A  0E84               	movlw	low ethernetController_writeDestinationMACAddress@opcode
 18863  003C6C  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 18864  003C6E  0E00               	movlw	high ethernetController_writeDestinationMACAddress@opcode
 18865  003C70  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 18866  003C72  ECC2  F020         	call	_enc424j600_writeSPI	;wreg free
 18867                           
 18868                           ;ENC424J600.c: 236: for (uint8_t i = 0; i < 6; i++)
 18869  003C76  0E00               	movlw	0
 18870  003C78  0100               	movlb	0	; () banked
 18871  003C7A  6F85               	movwf	ethernetController_writeDestinationMACAddress@i_646& (0+255),b
 18872  003C7C                     l7756:
 18873                           
 18874                           ; BSR set to: 0
 18875  003C7C  0E05               	movlw	5
 18876  003C7E  6585               	cpfsgt	ethernetController_writeDestinationMACAddress@i_646& (0+255),b
 18877  003C80  D001               	goto	l142
 18878  003C82  D00D               	goto	u8310
 18879  003C84                     l142:
 18880                           
 18881                           ; BSR set to: 0
 18882                           ;ENC424J600.c: 237: enc424j600_writeSPI(&data[i]);
 18883                           
 18884                           ; BSR set to: 0
 18885  003C84  5185               	movf	ethernetController_writeDestinationMACAddress@i_646& (0+255),w,b
 18886  003C86  0D01               	mullw	1
 18887  003C88  0E7E               	movlw	low ethernetController_writeDestinationMACAddress@data
 18888  003C8A  24F3               	addwf	prodl,w,c
 18889  003C8C  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 18890  003C8E  0E00               	movlw	high ethernetController_writeDestinationMACAddress@data
 18891  003C90  20F4               	addwfc	prodh,w,c
 18892  003C92  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 18893  003C94  ECC2  F020         	call	_enc424j600_writeSPI	;wreg free
 18894  003C98  0100               	movlb	0	; () banked
 18895  003C9A  2B85               	incf	ethernetController_writeDestinationMACAddress@i_646& (0+255),f,b
 18896  003C9C  D7EF               	goto	l7756
 18897  003C9E                     u8310:
 18898                           
 18899                           ; BSR set to: 0
 18900                           ;ENC424J600.c: 238: PORTBbits.RB4=1;
 18901  003C9E  8881               	bsf	3969,4,c	;volatile
 18902                           
 18903                           ; BSR set to: 0
 18904  003CA0  0012               	return		;funcret
 18905  003CA2                     __end_of_ethernetController_writeDestinationMACAddress:
 18906                           	opt stack 0
 18907                           tblptru	equ	0xFF8
 18908                           tblptrh	equ	0xFF7
 18909                           tblptrl	equ	0xFF6
 18910                           tablat	equ	0xFF5
 18911                           prodh	equ	0xFF4
 18912                           prodl	equ	0xFF3
 18913                           intcon	equ	0xFF2
 18914                           intcon3	equ	0xFF0
 18915                           indf0	equ	0xFEF
 18916                           postinc0	equ	0xFEE
 18917                           plusw0	equ	0xFEB
 18918                           fsr0h	equ	0xFEA
 18919                           fsr0l	equ	0xFE9
 18920                           wreg	equ	0xFE8
 18921                           indf1	equ	0xFE7
 18922                           postinc1	equ	0xFE6
 18923                           postdec1	equ	0xFE5
 18924                           plusw1	equ	0xFE3
 18925                           fsr1h	equ	0xFE2
 18926                           fsr1l	equ	0xFE1
 18927                           indf2	equ	0xFDF
 18928                           postinc2	equ	0xFDE
 18929                           postdec2	equ	0xFDD
 18930                           plusw2	equ	0xFDB
 18931                           fsr2h	equ	0xFDA
 18932                           fsr2l	equ	0xFD9
 18933                           status	equ	0xFD8
 18934                           
 18935 ;; *************** function _ethernetController_streamToTransmitBuffer *****************
 18936 ;; Defined at:
 18937 ;;		line 208 in file "src/enc424j600/ENC424J600.c"
 18938 ;; Parameters:    Size  Location     Type
 18939 ;;  data            1    wreg     unsigned char 
 18940 ;;  field           9   15[BANK0 ] struct memoryField
 18941 ;; Auto vars:     Size  Location     Type
 18942 ;;  data            1   28[BANK0 ] unsigned char 
 18943 ;;  opcode          1   29[BANK0 ] unsigned char 
 18944 ;; Return value:  Size  Location     Type
 18945 ;;                  1    wreg      void 
 18946 ;; Registers used:
 18947 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18948 ;; Tracked objects:
 18949 ;;		On entry : 0/0
 18950 ;;		On exit  : 0/0
 18951 ;;		Unchanged: 0/0
 18952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18953 ;;      Params:         0       9       0       0       0       0       0       0       0
 18954 ;;      Locals:         0       2       0       0       0       0       0       0       0
 18955 ;;      Temps:          0       4       0       0       0       0       0       0       0
 18956 ;;      Totals:         0      15       0       0       0       0       0       0       0
 18957 ;;Total ram usage:       15 bytes
 18958 ;; Hardware stack levels used:    1
 18959 ;; Hardware stack levels required when called:    7
 18960 ;; This function calls:
 18961 ;;		_enc424j600_setGPDATAWritePointer
 18962 ;;		_enc424j600_writeSPI
 18963 ;; This function is called by:
 18964 ;;		_arp_send
 18965 ;;		_ipv4_streamToTransmissionBuffer
 18966 ;; This function uses a non-reentrant model
 18967 ;;
 18968                           
 18969                           	psect	text75
 18970  003D9A                     __ptext75:
 18971                           	opt stack 0
 18972  003D9A                     _ethernetController_streamToTransmitBuffer:
 18973                           	opt stack 18
 18974                           
 18975                           ; BSR set to: 0
 18976                           ;incstack = 0
 18977                           ;ethernetController_streamToTransmitBuffer@data stored from wreg
 18978  003D9A  0100               	movlb	0	; () banked
 18979  003D9C  6F7C               	movwf	ethernetController_streamToTransmitBuffer@data& (0+255),b
 18980                           
 18981                           ;ENC424J600.c: 209: uint8_t opcode;
 18982                           ;ENC424J600.c: 210: uint16_t static pointer = 0;
 18983                           ;ENC424J600.c: 211: if (pointer == 0) {
 18984  003D9E  503E               	movf	ethernetController_streamToTransmitBuffer@pointer,w,c
 18985  003DA0  103F               	iorwf	ethernetController_streamToTransmitBuffer@pointer+1,w,c
 18986  003DA2  A4D8               	btfss	status,2,c
 18987  003DA4  D010               	goto	l134
 18988                           
 18989                           ;ENC424J600.c: 212: enc424j600_setGPDATAWritePointer(field.start);
 18990  003DA6  C06F  F06A         	movff	ethernetController_streamToTransmitBuffer@field,enc424j600_setGPDATAWritePointer@
      +                          addr
 18991  003DAA  C070  F06B         	movff	ethernetController_streamToTransmitBuffer@field+1,enc424j600_setGPDATAWritePointe
      +                          r@addr+1
 18992  003DAE  EC86  F023         	call	_enc424j600_setGPDATAWritePointer	;wreg free
 18993                           
 18994                           ;ENC424J600.c: 213: opcode = 0x2A;
 18995  003DB2  0E2A               	movlw	42
 18996  003DB4  0100               	movlb	0	; () banked
 18997  003DB6  6F7D               	movwf	ethernetController_streamToTransmitBuffer@opcode& (0+255),b
 18998                           
 18999                           ; BSR set to: 0
 19000                           ;ENC424J600.c: 214: PORTBbits.RB4=0;
 19001  003DB8  9881               	bcf	3969,4,c	;volatile
 19002                           
 19003                           ; BSR set to: 0
 19004                           ;ENC424J600.c: 215: enc424j600_writeSPI(&opcode);
 19005  003DBA  0E7D               	movlw	low ethernetController_streamToTransmitBuffer@opcode
 19006  003DBC  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 19007  003DBE  0E00               	movlw	high ethernetController_streamToTransmitBuffer@opcode
 19008  003DC0  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 19009  003DC2  ECC2  F020         	call	_enc424j600_writeSPI	;wreg free
 19010  003DC6                     l134:
 19011                           
 19012                           ;ENC424J600.c: 216: }
 19013                           ;ENC424J600.c: 218: enc424j600_writeSPI(&data);
 19014  003DC6  0E7C               	movlw	low ethernetController_streamToTransmitBuffer@data
 19015  003DC8  0100               	movlb	0	; () banked
 19016  003DCA  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 19017  003DCC  0E00               	movlw	high ethernetController_streamToTransmitBuffer@data
 19018  003DCE  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 19019  003DD0  ECC2  F020         	call	_enc424j600_writeSPI	;wreg free
 19020                           
 19021                           ;ENC424J600.c: 220: if (pointer == field.length - 1) {
 19022  003DD4  0EFF               	movlw	255
 19023  003DD6  0100               	movlb	0	; () banked
 19024  003DD8  6F78               	movwf	??_ethernetController_streamToTransmitBuffer& (0+255),b
 19025  003DDA  0EFF               	movlw	255
 19026  003DDC  6F79               	movwf	(??_ethernetController_streamToTransmitBuffer+1)& (0+255),b
 19027  003DDE  EE20  F073         	lfsr	2,ethernetController_streamToTransmitBuffer@field+4
 19028  003DE2  CFDE F07A          	movff	postinc2,??_ethernetController_streamToTransmitBuffer+2
 19029  003DE6  CFDD F07B          	movff	postdec2,??_ethernetController_streamToTransmitBuffer+3
 19030  003DEA  5178               	movf	??_ethernetController_streamToTransmitBuffer& (0+255),w,b
 19031  003DEC  277A               	addwf	(??_ethernetController_streamToTransmitBuffer+2)& (0+255),f,b
 19032  003DEE  5179               	movf	(??_ethernetController_streamToTransmitBuffer+1)& (0+255),w,b
 19033  003DF0  237B               	addwfc	(??_ethernetController_streamToTransmitBuffer+3)& (0+255),f,b
 19034  003DF2  503E               	movf	ethernetController_streamToTransmitBuffer@pointer,w,c
 19035  003DF4  197A               	xorwf	(??_ethernetController_streamToTransmitBuffer+2)& (0+255),w,b
 19036  003DF6  E10A               	bnz	l8016
 19037  003DF8  503F               	movf	ethernetController_streamToTransmitBuffer@pointer+1,w,c
 19038  003DFA  197B               	xorwf	(??_ethernetController_streamToTransmitBuffer+3)& (0+255),w,b
 19039  003DFC  A4D8               	btfss	status,2,c
 19040  003DFE  D006               	goto	l135
 19041                           
 19042                           ; BSR set to: 0
 19043                           ;ENC424J600.c: 221: PORTBbits.RB4=1;
 19044  003E00  8881               	bsf	3969,4,c	;volatile
 19045                           
 19046                           ; BSR set to: 0
 19047                           ;ENC424J600.c: 222: pointer = 0;
 19048  003E02  0E00               	movlw	0
 19049  003E04  6E3F               	movwf	ethernetController_streamToTransmitBuffer@pointer+1,c
 19050  003E06  0E00               	movlw	0
 19051  003E08  6E3E               	movwf	ethernetController_streamToTransmitBuffer@pointer,c
 19052                           
 19053                           ;ENC424J600.c: 223: } else {
 19054  003E0A  0012               	return	
 19055  003E0C                     l135:
 19056  003E0C                     l8016:
 19057                           
 19058                           ; BSR set to: 0
 19059                           ;ENC424J600.c: 224: pointer++;
 19060  003E0C  4A3E               	infsnz	ethernetController_streamToTransmitBuffer@pointer,f,c
 19061  003E0E  2A3F               	incf	ethernetController_streamToTransmitBuffer@pointer+1,f,c
 19062  003E10  0012               	return	
 19063  003E12                     __end_of_ethernetController_streamToTransmitBuffer:
 19064                           	opt stack 0
 19065                           tblptru	equ	0xFF8
 19066                           tblptrh	equ	0xFF7
 19067                           tblptrl	equ	0xFF6
 19068                           tablat	equ	0xFF5
 19069                           prodh	equ	0xFF4
 19070                           prodl	equ	0xFF3
 19071                           intcon	equ	0xFF2
 19072                           intcon3	equ	0xFF0
 19073                           indf0	equ	0xFEF
 19074                           postinc0	equ	0xFEE
 19075                           plusw0	equ	0xFEB
 19076                           fsr0h	equ	0xFEA
 19077                           fsr0l	equ	0xFE9
 19078                           wreg	equ	0xFE8
 19079                           indf1	equ	0xFE7
 19080                           postinc1	equ	0xFE6
 19081                           postdec1	equ	0xFE5
 19082                           plusw1	equ	0xFE3
 19083                           fsr1h	equ	0xFE2
 19084                           fsr1l	equ	0xFE1
 19085                           indf2	equ	0xFDF
 19086                           postinc2	equ	0xFDE
 19087                           postdec2	equ	0xFDD
 19088                           plusw2	equ	0xFDB
 19089                           fsr2h	equ	0xFDA
 19090                           fsr2l	equ	0xFD9
 19091                           status	equ	0xFD8
 19092                           
 19093 ;; *************** function _enc424j600_setGPDATAWritePointer *****************
 19094 ;; Defined at:
 19095 ;;		line 609 in file "src/enc424j600/ENC424J600.c"
 19096 ;; Parameters:    Size  Location     Type
 19097 ;;  addr            2   10[BANK0 ] unsigned int 
 19098 ;; Auto vars:     Size  Location     Type
 19099 ;;  highByte        1   14[BANK0 ] unsigned char 
 19100 ;;  lowByte         1   13[BANK0 ] unsigned char 
 19101 ;;  opcode          1   12[BANK0 ] unsigned char 
 19102 ;; Return value:  Size  Location     Type
 19103 ;;                  1    wreg      void 
 19104 ;; Registers used:
 19105 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19106 ;; Tracked objects:
 19107 ;;		On entry : 0/0
 19108 ;;		On exit  : 0/0
 19109 ;;		Unchanged: 0/0
 19110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19111 ;;      Params:         0       2       0       0       0       0       0       0       0
 19112 ;;      Locals:         0       3       0       0       0       0       0       0       0
 19113 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19114 ;;      Totals:         0       5       0       0       0       0       0       0       0
 19115 ;;Total ram usage:        5 bytes
 19116 ;; Hardware stack levels used:    1
 19117 ;; Hardware stack levels required when called:    6
 19118 ;; This function calls:
 19119 ;;		_enc424j600_writeSPI
 19120 ;; This function is called by:
 19121 ;;		_ethernetController_streamToTransmitBuffer
 19122 ;;		_ethernetController_writeDestinationMACAddress
 19123 ;;		_ethernetController_writeEtherTypeFieldToBuffer
 19124 ;; This function uses a non-reentrant model
 19125 ;;
 19126                           
 19127                           	psect	text76
 19128  00470C                     __ptext76:
 19129                           	opt stack 0
 19130  00470C                     _enc424j600_setGPDATAWritePointer:
 19131                           	opt stack 17
 19132                           
 19133                           ;ENC424J600.c: 610: uint8_t opcode = 0x6C;
 19134                           
 19135                           ; BSR set to: 0
 19136                           ;incstack = 0
 19137  00470C  0E6C               	movlw	108
 19138  00470E  0100               	movlb	0	; () banked
 19139  004710  6F6C               	movwf	enc424j600_setGPDATAWritePointer@opcode& (0+255),b
 19140                           
 19141                           ; BSR set to: 0
 19142                           ;ENC424J600.c: 611: uint8_t lowByte = addr & 0x00ff;
 19143  004712  C06A  F06D         	movff	enc424j600_setGPDATAWritePointer@addr,enc424j600_setGPDATAWritePointer@lowByte
 19144                           
 19145                           ;ENC424J600.c: 612: uint8_t highByte = (addr & 0xff00) >> 8;
 19146  004716  516B               	movf	(enc424j600_setGPDATAWritePointer@addr+1)& (0+255),w,b
 19147  004718  6F6E               	movwf	enc424j600_setGPDATAWritePointer@highByte& (0+255),b
 19148                           
 19149                           ; BSR set to: 0
 19150                           ;ENC424J600.c: 613: PORTBbits.RB4=0;
 19151  00471A  9881               	bcf	3969,4,c	;volatile
 19152                           
 19153                           ; BSR set to: 0
 19154                           ;ENC424J600.c: 614: enc424j600_writeSPI(&opcode);
 19155  00471C  0E6C               	movlw	low enc424j600_setGPDATAWritePointer@opcode
 19156  00471E  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 19157  004720  0E00               	movlw	high enc424j600_setGPDATAWritePointer@opcode
 19158  004722  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 19159  004724  ECC2  F020         	call	_enc424j600_writeSPI	;wreg free
 19160                           
 19161                           ;ENC424J600.c: 615: enc424j600_writeSPI(&lowByte);
 19162  004728  0E6D               	movlw	low enc424j600_setGPDATAWritePointer@lowByte
 19163  00472A  0100               	movlb	0	; () banked
 19164  00472C  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 19165  00472E  0E00               	movlw	high enc424j600_setGPDATAWritePointer@lowByte
 19166  004730  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 19167  004732  ECC2  F020         	call	_enc424j600_writeSPI	;wreg free
 19168                           
 19169                           ;ENC424J600.c: 616: enc424j600_writeSPI(&highByte);
 19170  004736  0E6E               	movlw	low enc424j600_setGPDATAWritePointer@highByte
 19171  004738  0100               	movlb	0	; () banked
 19172  00473A  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 19173  00473C  0E00               	movlw	high enc424j600_setGPDATAWritePointer@highByte
 19174  00473E  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 19175  004740  ECC2  F020         	call	_enc424j600_writeSPI	;wreg free
 19176                           
 19177                           ;ENC424J600.c: 617: PORTBbits.RB4=1;
 19178  004744  8881               	bsf	3969,4,c	;volatile
 19179  004746  0012               	return		;funcret
 19180  004748                     __end_of_enc424j600_setGPDATAWritePointer:
 19181                           	opt stack 0
 19182                           tblptru	equ	0xFF8
 19183                           tblptrh	equ	0xFF7
 19184                           tblptrl	equ	0xFF6
 19185                           tablat	equ	0xFF5
 19186                           prodh	equ	0xFF4
 19187                           prodl	equ	0xFF3
 19188                           intcon	equ	0xFF2
 19189                           intcon3	equ	0xFF0
 19190                           indf0	equ	0xFEF
 19191                           postinc0	equ	0xFEE
 19192                           plusw0	equ	0xFEB
 19193                           fsr0h	equ	0xFEA
 19194                           fsr0l	equ	0xFE9
 19195                           wreg	equ	0xFE8
 19196                           indf1	equ	0xFE7
 19197                           postinc1	equ	0xFE6
 19198                           postdec1	equ	0xFE5
 19199                           plusw1	equ	0xFE3
 19200                           fsr1h	equ	0xFE2
 19201                           fsr1l	equ	0xFE1
 19202                           indf2	equ	0xFDF
 19203                           postinc2	equ	0xFDE
 19204                           postdec2	equ	0xFDD
 19205                           plusw2	equ	0xFDB
 19206                           fsr2h	equ	0xFDA
 19207                           fsr2l	equ	0xFD9
 19208                           status	equ	0xFD8
 19209                           
 19210 ;; *************** function _ethernetController_sendPacket *****************
 19211 ;; Defined at:
 19212 ;;		line 201 in file "src/enc424j600/ENC424J600.c"
 19213 ;; Parameters:    Size  Location     Type
 19214 ;;  field           9   18[BANK0 ] struct memoryField
 19215 ;; Auto vars:     Size  Location     Type
 19216 ;;		None
 19217 ;; Return value:  Size  Location     Type
 19218 ;;                  1    wreg      void 
 19219 ;; Registers used:
 19220 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19221 ;; Tracked objects:
 19222 ;;		On entry : 0/0
 19223 ;;		On exit  : 0/0
 19224 ;;		Unchanged: 0/0
 19225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19226 ;;      Params:         0       9       0       0       0       0       0       0       0
 19227 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19228 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19229 ;;      Totals:         0       9       0       0       0       0       0       0       0
 19230 ;;Total ram usage:        9 bytes
 19231 ;; Hardware stack levels used:    1
 19232 ;; Hardware stack levels required when called:    8
 19233 ;; This function calls:
 19234 ;;		_enc424j600_setTXLength
 19235 ;;		_enc424j600_setTXStartAddress
 19236 ;;		_enc424j600_writeSingleByte
 19237 ;;		_memory_txFrameClear
 19238 ;; This function is called by:
 19239 ;;		_arp_send
 19240 ;; This function uses a non-reentrant model
 19241 ;;
 19242                           
 19243                           	psect	text77
 19244  0049F0                     __ptext77:
 19245                           	opt stack 0
 19246  0049F0                     _ethernetController_sendPacket:
 19247                           	opt stack 17
 19248                           
 19249                           ;ENC424J600.c: 202: enc424j600_setTXStartAddress(field.start);
 19250                           
 19251                           ;incstack = 0
 19252  0049F0  C072  F06E         	movff	ethernetController_sendPacket@field,enc424j600_setTXStartAddress@addr
 19253  0049F4  C073  F06F         	movff	ethernetController_sendPacket@field+1,enc424j600_setTXStartAddress@addr+1
 19254  0049F8  EC90  F024         	call	_enc424j600_setTXStartAddress	;wreg free
 19255                           
 19256                           ;ENC424J600.c: 203: enc424j600_setTXLength(field.length);
 19257  0049FC  C076  F06E         	movff	ethernetController_sendPacket@field+4,enc424j600_setTXLength@len
 19258  004A00  C077  F06F         	movff	ethernetController_sendPacket@field+5,enc424j600_setTXLength@len+1
 19259  004A04  ECA5  F024         	call	_enc424j600_setTXLength	;wreg free
 19260                           
 19261                           ;ENC424J600.c: 204: enc424j600_writeSingleByte(0b11010100);
 19262  004A08  0ED4               	movlw	212
 19263  004A0A  ECC3  F025         	call	_enc424j600_writeSingleByte
 19264                           
 19265                           ;ENC424J600.c: 205: memory_txFrameClear(field.index);
 19266  004A0E  0100               	movlb	0	; () banked
 19267  004A10  517A               	movf	(ethernetController_sendPacket@field+8)& (0+255),w,b
 19268  004A12  EC46  F025         	call	_memory_txFrameClear
 19269  004A16  0012               	return		;funcret
 19270  004A18                     __end_of_ethernetController_sendPacket:
 19271                           	opt stack 0
 19272                           tblptru	equ	0xFF8
 19273                           tblptrh	equ	0xFF7
 19274                           tblptrl	equ	0xFF6
 19275                           tablat	equ	0xFF5
 19276                           prodh	equ	0xFF4
 19277                           prodl	equ	0xFF3
 19278                           intcon	equ	0xFF2
 19279                           intcon3	equ	0xFF0
 19280                           indf0	equ	0xFEF
 19281                           postinc0	equ	0xFEE
 19282                           plusw0	equ	0xFEB
 19283                           fsr0h	equ	0xFEA
 19284                           fsr0l	equ	0xFE9
 19285                           wreg	equ	0xFE8
 19286                           indf1	equ	0xFE7
 19287                           postinc1	equ	0xFE6
 19288                           postdec1	equ	0xFE5
 19289                           plusw1	equ	0xFE3
 19290                           fsr1h	equ	0xFE2
 19291                           fsr1l	equ	0xFE1
 19292                           indf2	equ	0xFDF
 19293                           postinc2	equ	0xFDE
 19294                           postdec2	equ	0xFDD
 19295                           plusw2	equ	0xFDB
 19296                           fsr2h	equ	0xFDA
 19297                           fsr2l	equ	0xFD9
 19298                           status	equ	0xFD8
 19299                           
 19300 ;; *************** function _memory_txFrameClear *****************
 19301 ;; Defined at:
 19302 ;;		line 221 in file "src/mem/memoryController.c"
 19303 ;; Parameters:    Size  Location     Type
 19304 ;;  index           1    wreg     unsigned char 
 19305 ;; Auto vars:     Size  Location     Type
 19306 ;;  index           1    0[BANK0 ] unsigned char 
 19307 ;; Return value:  Size  Location     Type
 19308 ;;                  1    wreg      void 
 19309 ;; Registers used:
 19310 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 19311 ;; Tracked objects:
 19312 ;;		On entry : 0/0
 19313 ;;		On exit  : 0/0
 19314 ;;		Unchanged: 0/0
 19315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19316 ;;      Params:         0       0       0       0       0       0       0       0       0
 19317 ;;      Locals:         0       1       0       0       0       0       0       0       0
 19318 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19319 ;;      Totals:         0       1       0       0       0       0       0       0       0
 19320 ;;Total ram usage:        1 bytes
 19321 ;; Hardware stack levels used:    1
 19322 ;; Hardware stack levels required when called:    4
 19323 ;; This function calls:
 19324 ;;		Nothing
 19325 ;; This function is called by:
 19326 ;;		_ethernetController_sendPacket
 19327 ;; This function uses a non-reentrant model
 19328 ;;
 19329                           
 19330                           	psect	text78
 19331  004A8C                     __ptext78:
 19332                           	opt stack 0
 19333  004A8C                     _memory_txFrameClear:
 19334                           	opt stack 20
 19335                           
 19336                           ;incstack = 0
 19337                           ;memory_txFrameClear@index stored from wreg
 19338  004A8C  0100               	movlb	0	; () banked
 19339  004A8E  6F60               	movwf	memory_txFrameClear@index& (0+255),b
 19340                           
 19341                           ;memoryController.c: 222: occupiedMemory[index].fIsAssigned = 0;
 19342  004A90  0100               	movlb	0	; () banked
 19343  004A92  5160               	movf	memory_txFrameClear@index& (0+255),w,b
 19344  004A94  0D09               	mullw	9
 19345  004A96  0E06               	movlw	6
 19346  004A98  26F3               	addwf	prodl,f,c
 19347  004A9A  0E00               	movlw	0
 19348  004A9C  22F4               	addwfc	prodh,f,c
 19349  004A9E  0E8B               	movlw	low _occupiedMemory
 19350  004AA0  24F3               	addwf	prodl,w,c
 19351  004AA2  6ED9               	movwf	fsr2l,c
 19352  004AA4  0E01               	movlw	high _occupiedMemory
 19353  004AA6  20F4               	addwfc	prodh,w,c
 19354  004AA8  6EDA               	movwf	fsr2h,c
 19355  004AAA  0E00               	movlw	0
 19356  004AAC  6EDF               	movwf	indf2,c
 19357                           
 19358                           ; BSR set to: 0
 19359  004AAE  0012               	return		;funcret
 19360  004AB0                     __end_of_memory_txFrameClear:
 19361                           	opt stack 0
 19362                           tblptru	equ	0xFF8
 19363                           tblptrh	equ	0xFF7
 19364                           tblptrl	equ	0xFF6
 19365                           tablat	equ	0xFF5
 19366                           prodh	equ	0xFF4
 19367                           prodl	equ	0xFF3
 19368                           intcon	equ	0xFF2
 19369                           intcon3	equ	0xFF0
 19370                           indf0	equ	0xFEF
 19371                           postinc0	equ	0xFEE
 19372                           plusw0	equ	0xFEB
 19373                           fsr0h	equ	0xFEA
 19374                           fsr0l	equ	0xFE9
 19375                           wreg	equ	0xFE8
 19376                           indf1	equ	0xFE7
 19377                           postinc1	equ	0xFE6
 19378                           postdec1	equ	0xFE5
 19379                           plusw1	equ	0xFE3
 19380                           fsr1h	equ	0xFE2
 19381                           fsr1l	equ	0xFE1
 19382                           indf2	equ	0xFDF
 19383                           postinc2	equ	0xFDE
 19384                           postdec2	equ	0xFDD
 19385                           plusw2	equ	0xFDB
 19386                           fsr2h	equ	0xFDA
 19387                           fsr2l	equ	0xFD9
 19388                           status	equ	0xFD8
 19389                           
 19390 ;; *************** function _enc424j600_setTXStartAddress *****************
 19391 ;; Defined at:
 19392 ;;		line 602 in file "src/enc424j600/ENC424J600.c"
 19393 ;; Parameters:    Size  Location     Type
 19394 ;;  addr            2   14[BANK0 ] unsigned int 
 19395 ;; Auto vars:     Size  Location     Type
 19396 ;;  highByte        1   17[BANK0 ] unsigned char 
 19397 ;;  lowByte         1   16[BANK0 ] unsigned char 
 19398 ;; Return value:  Size  Location     Type
 19399 ;;                  1    wreg      void 
 19400 ;; Registers used:
 19401 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19402 ;; Tracked objects:
 19403 ;;		On entry : 0/0
 19404 ;;		On exit  : 0/0
 19405 ;;		Unchanged: 0/0
 19406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19407 ;;      Params:         0       2       0       0       0       0       0       0       0
 19408 ;;      Locals:         0       2       0       0       0       0       0       0       0
 19409 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19410 ;;      Totals:         0       4       0       0       0       0       0       0       0
 19411 ;;Total ram usage:        4 bytes
 19412 ;; Hardware stack levels used:    1
 19413 ;; Hardware stack levels required when called:    7
 19414 ;; This function calls:
 19415 ;;		_enc424j600_writeControlRegisterUnbanked
 19416 ;; This function is called by:
 19417 ;;		_ethernetController_sendPacket
 19418 ;; This function uses a non-reentrant model
 19419 ;;
 19420                           
 19421                           	psect	text79
 19422  004920                     __ptext79:
 19423                           	opt stack 0
 19424  004920                     _enc424j600_setTXStartAddress:
 19425                           	opt stack 17
 19426                           
 19427                           ;ENC424J600.c: 603: uint8_t lowByte = addr & 0xff;
 19428                           
 19429                           ; BSR set to: 0
 19430                           ;incstack = 0
 19431  004920  C06E  F070         	movff	enc424j600_setTXStartAddress@addr,enc424j600_setTXStartAddress@lowByte
 19432                           
 19433                           ;ENC424J600.c: 604: uint8_t highByte = (addr & 0xff00) >> 8;
 19434  004924  0100               	movlb	0	; () banked
 19435  004926  516F               	movf	(enc424j600_setTXStartAddress@addr+1)& (0+255),w,b
 19436  004928  6F71               	movwf	enc424j600_setTXStartAddress@highByte& (0+255),b
 19437                           
 19438                           ; BSR set to: 0
 19439                           ;ENC424J600.c: 605: enc424j600_writeControlRegisterUnbanked(0x00 + 0x00, &lowByte);
 19440  00492A  0E70               	movlw	low enc424j600_setTXStartAddress@lowByte
 19441  00492C  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 19442  00492E  0E00               	movlw	high enc424j600_setTXStartAddress@lowByte
 19443  004930  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 19444  004932  0E00               	movlw	0
 19445  004934  ECFA  F023         	call	_enc424j600_writeControlRegisterUnbanked
 19446                           
 19447                           ;ENC424J600.c: 606: enc424j600_writeControlRegisterUnbanked(0x01 + 0x00, &highByte);
 19448  004938  0E71               	movlw	low enc424j600_setTXStartAddress@highByte
 19449  00493A  0100               	movlb	0	; () banked
 19450  00493C  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 19451  00493E  0E00               	movlw	high enc424j600_setTXStartAddress@highByte
 19452  004940  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 19453  004942  0E01               	movlw	1
 19454  004944  ECFA  F023         	call	_enc424j600_writeControlRegisterUnbanked
 19455  004948  0012               	return		;funcret
 19456  00494A                     __end_of_enc424j600_setTXStartAddress:
 19457                           	opt stack 0
 19458                           tblptru	equ	0xFF8
 19459                           tblptrh	equ	0xFF7
 19460                           tblptrl	equ	0xFF6
 19461                           tablat	equ	0xFF5
 19462                           prodh	equ	0xFF4
 19463                           prodl	equ	0xFF3
 19464                           intcon	equ	0xFF2
 19465                           intcon3	equ	0xFF0
 19466                           indf0	equ	0xFEF
 19467                           postinc0	equ	0xFEE
 19468                           plusw0	equ	0xFEB
 19469                           fsr0h	equ	0xFEA
 19470                           fsr0l	equ	0xFE9
 19471                           wreg	equ	0xFE8
 19472                           indf1	equ	0xFE7
 19473                           postinc1	equ	0xFE6
 19474                           postdec1	equ	0xFE5
 19475                           plusw1	equ	0xFE3
 19476                           fsr1h	equ	0xFE2
 19477                           fsr1l	equ	0xFE1
 19478                           indf2	equ	0xFDF
 19479                           postinc2	equ	0xFDE
 19480                           postdec2	equ	0xFDD
 19481                           plusw2	equ	0xFDB
 19482                           fsr2h	equ	0xFDA
 19483                           fsr2l	equ	0xFD9
 19484                           status	equ	0xFD8
 19485                           
 19486 ;; *************** function _enc424j600_setTXLength *****************
 19487 ;; Defined at:
 19488 ;;		line 577 in file "src/enc424j600/ENC424J600.c"
 19489 ;; Parameters:    Size  Location     Type
 19490 ;;  len             2   14[BANK0 ] unsigned int 
 19491 ;; Auto vars:     Size  Location     Type
 19492 ;;  highByte        1   17[BANK0 ] unsigned char 
 19493 ;;  lowByte         1   16[BANK0 ] unsigned char 
 19494 ;; Return value:  Size  Location     Type
 19495 ;;                  1    wreg      void 
 19496 ;; Registers used:
 19497 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19498 ;; Tracked objects:
 19499 ;;		On entry : 0/0
 19500 ;;		On exit  : 0/0
 19501 ;;		Unchanged: 0/0
 19502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19503 ;;      Params:         0       2       0       0       0       0       0       0       0
 19504 ;;      Locals:         0       2       0       0       0       0       0       0       0
 19505 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19506 ;;      Totals:         0       4       0       0       0       0       0       0       0
 19507 ;;Total ram usage:        4 bytes
 19508 ;; Hardware stack levels used:    1
 19509 ;; Hardware stack levels required when called:    7
 19510 ;; This function calls:
 19511 ;;		_enc424j600_writeControlRegisterUnbanked
 19512 ;; This function is called by:
 19513 ;;		_ethernetController_sendPacket
 19514 ;; This function uses a non-reentrant model
 19515 ;;
 19516                           
 19517                           	psect	text80
 19518  00494A                     __ptext80:
 19519                           	opt stack 0
 19520  00494A                     _enc424j600_setTXLength:
 19521                           	opt stack 17
 19522                           
 19523                           ;ENC424J600.c: 578: uint8_t lowByte = len & 0x00ff;
 19524                           
 19525                           ;incstack = 0
 19526  00494A  C06E  F070         	movff	enc424j600_setTXLength@len,enc424j600_setTXLength@lowByte
 19527                           
 19528                           ;ENC424J600.c: 579: uint8_t highByte = len >> 8;
 19529  00494E  0100               	movlb	0	; () banked
 19530  004950  516F               	movf	(enc424j600_setTXLength@len+1)& (0+255),w,b
 19531  004952  6F71               	movwf	enc424j600_setTXLength@highByte& (0+255),b
 19532                           
 19533                           ; BSR set to: 0
 19534                           ;ENC424J600.c: 580: enc424j600_writeControlRegisterUnbanked(0x02 + 0x00, &lowByte);
 19535  004954  0E70               	movlw	low enc424j600_setTXLength@lowByte
 19536  004956  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 19537  004958  0E00               	movlw	high enc424j600_setTXLength@lowByte
 19538  00495A  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 19539  00495C  0E02               	movlw	2
 19540  00495E  ECFA  F023         	call	_enc424j600_writeControlRegisterUnbanked
 19541                           
 19542                           ;ENC424J600.c: 581: enc424j600_writeControlRegisterUnbanked(0x03 + 0x00, &highByte);
 19543  004962  0E71               	movlw	low enc424j600_setTXLength@highByte
 19544  004964  0100               	movlb	0	; () banked
 19545  004966  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 19546  004968  0E00               	movlw	high enc424j600_setTXLength@highByte
 19547  00496A  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 19548  00496C  0E03               	movlw	3
 19549  00496E  ECFA  F023         	call	_enc424j600_writeControlRegisterUnbanked
 19550  004972  0012               	return		;funcret
 19551  004974                     __end_of_enc424j600_setTXLength:
 19552                           	opt stack 0
 19553                           tblptru	equ	0xFF8
 19554                           tblptrh	equ	0xFF7
 19555                           tblptrl	equ	0xFF6
 19556                           tablat	equ	0xFF5
 19557                           prodh	equ	0xFF4
 19558                           prodl	equ	0xFF3
 19559                           intcon	equ	0xFF2
 19560                           intcon3	equ	0xFF0
 19561                           indf0	equ	0xFEF
 19562                           postinc0	equ	0xFEE
 19563                           plusw0	equ	0xFEB
 19564                           fsr0h	equ	0xFEA
 19565                           fsr0l	equ	0xFE9
 19566                           wreg	equ	0xFE8
 19567                           indf1	equ	0xFE7
 19568                           postinc1	equ	0xFE6
 19569                           postdec1	equ	0xFE5
 19570                           plusw1	equ	0xFE3
 19571                           fsr1h	equ	0xFE2
 19572                           fsr1l	equ	0xFE1
 19573                           indf2	equ	0xFDF
 19574                           postinc2	equ	0xFDE
 19575                           postdec2	equ	0xFDD
 19576                           plusw2	equ	0xFDB
 19577                           fsr2h	equ	0xFDA
 19578                           fsr2l	equ	0xFD9
 19579                           status	equ	0xFD8
 19580                           
 19581 ;; *************** function _ethernetController_getSourceMACAddress *****************
 19582 ;; Defined at:
 19583 ;;		line 268 in file "src/enc424j600/ENC424J600.c"
 19584 ;; Parameters:    Size  Location     Type
 19585 ;;  field           9   15[BANK0 ] struct memoryField
 19586 ;; Auto vars:     Size  Location     Type
 19587 ;;  temp            1   31[BANK0 ] unsigned char 
 19588 ;;  i               1   32[BANK0 ] unsigned char 
 19589 ;;  sourceAddres    6   25[BANK0 ] struct macaddress
 19590 ;;  opcode          1   24[BANK0 ] unsigned char 
 19591 ;; Return value:  Size  Location     Type
 19592 ;;                  6   15[BANK0 ] struct macaddress
 19593 ;; Registers used:
 19594 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19595 ;; Tracked objects:
 19596 ;;		On entry : 0/0
 19597 ;;		On exit  : 0/0
 19598 ;;		Unchanged: 0/0
 19599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19600 ;;      Params:         0       9       0       0       0       0       0       0       0
 19601 ;;      Locals:         0       9       0       0       0       0       0       0       0
 19602 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19603 ;;      Totals:         0      18       0       0       0       0       0       0       0
 19604 ;;Total ram usage:       18 bytes
 19605 ;; Hardware stack levels used:    1
 19606 ;; Hardware stack levels required when called:    7
 19607 ;; This function calls:
 19608 ;;		_enc424j600_readSPI
 19609 ;;		_enc424j600_setERXDATAReadPointer
 19610 ;;		_enc424j600_writeSPI
 19611 ;; This function is called by:
 19612 ;;		_arp_send
 19613 ;; This function uses a non-reentrant model
 19614 ;;
 19615                           
 19616                           	psect	text81
 19617  003FDC                     __ptext81:
 19618                           	opt stack 0
 19619  003FDC                     _ethernetController_getSourceMACAddress:
 19620                           	opt stack 18
 19621                           
 19622                           ;ENC424J600.c: 269: macaddress_t sourceAddress;
 19623                           ;ENC424J600.c: 270: enc424j600_setERXDATAReadPointer(field.start + 14);
 19624                           
 19625                           ;incstack = 0
 19626  003FDC  0E0E               	movlw	14
 19627  003FDE  0100               	movlb	0	; () banked
 19628  003FE0  256F               	addwf	ethernetController_getSourceMACAddress@field& (0+255),w,b
 19629  003FE2  6F6A               	movwf	enc424j600_setERXDATAReadPointer@addr& (0+255),b
 19630  003FE4  0E00               	movlw	0
 19631  003FE6  2170               	addwfc	(ethernetController_getSourceMACAddress@field+1)& (0+255),w,b
 19632  003FE8  6F6B               	movwf	(enc424j600_setERXDATAReadPointer@addr+1)& (0+255),b
 19633  003FEA  ECA4  F023         	call	_enc424j600_setERXDATAReadPointer	;wreg free
 19634                           
 19635                           ;ENC424J600.c: 271: uint8_t opcode = 0x2C;
 19636  003FEE  0E2C               	movlw	44
 19637  003FF0  0100               	movlb	0	; () banked
 19638  003FF2  6F78               	movwf	ethernetController_getSourceMACAddress@opcode& (0+255),b
 19639                           
 19640                           ; BSR set to: 0
 19641                           ;ENC424J600.c: 272: PORTBbits.RB4=0;
 19642  003FF4  9881               	bcf	3969,4,c	;volatile
 19643                           
 19644                           ; BSR set to: 0
 19645                           ;ENC424J600.c: 273: enc424j600_writeSPI(&opcode);
 19646  003FF6  0E78               	movlw	low ethernetController_getSourceMACAddress@opcode
 19647  003FF8  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 19648  003FFA  0E00               	movlw	high ethernetController_getSourceMACAddress@opcode
 19649  003FFC  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 19650  003FFE  ECC2  F020         	call	_enc424j600_writeSPI	;wreg free
 19651                           
 19652                           ;ENC424J600.c: 274: for (uint8_t i = 0; i < 6; i++) {
 19653  004002  0E00               	movlw	0
 19654  004004  0100               	movlb	0	; () banked
 19655  004006  6F80               	movwf	ethernetController_getSourceMACAddress@i& (0+255),b
 19656  004008                     l8026:
 19657                           
 19658                           ; BSR set to: 0
 19659  004008  0E05               	movlw	5
 19660  00400A  6580               	cpfsgt	ethernetController_getSourceMACAddress@i& (0+255),b
 19661  00400C  D001               	goto	l155
 19662  00400E  D013               	goto	u8790
 19663  004010                     l155:
 19664                           
 19665                           ; BSR set to: 0
 19666                           ;ENC424J600.c: 275: uint8_t temp;
 19667                           ;ENC424J600.c: 276: enc424j600_readSPI(&temp);
 19668                           
 19669                           ; BSR set to: 0
 19670  004010  0E7F               	movlw	low ethernetController_getSourceMACAddress@temp
 19671  004012  6F60               	movwf	enc424j600_readSPI@data& (0+255),b
 19672  004014  0E00               	movlw	high ethernetController_getSourceMACAddress@temp
 19673  004016  6F61               	movwf	(enc424j600_readSPI@data+1)& (0+255),b
 19674  004018  EC26  F020         	call	_enc424j600_readSPI	;wreg free
 19675                           
 19676                           ;ENC424J600.c: 277: sourceAddress.address[i] = temp;
 19677  00401C  0100               	movlb	0	; () banked
 19678  00401E  5180               	movf	ethernetController_getSourceMACAddress@i& (0+255),w,b
 19679  004020  0D01               	mullw	1
 19680  004022  0E79               	movlw	low ethernetController_getSourceMACAddress@sourceAddress
 19681  004024  24F3               	addwf	prodl,w,c
 19682  004026  6ED9               	movwf	fsr2l,c
 19683  004028  0E00               	movlw	high ethernetController_getSourceMACAddress@sourceAddress
 19684  00402A  20F4               	addwfc	prodh,w,c
 19685  00402C  6EDA               	movwf	fsr2h,c
 19686  00402E  C07F  FFDF         	movff	ethernetController_getSourceMACAddress@temp,indf2
 19687                           
 19688                           ; BSR set to: 0
 19689  004032  2B80               	incf	ethernetController_getSourceMACAddress@i& (0+255),f,b
 19690  004034  D7E9               	goto	l8026
 19691  004036                     u8790:
 19692                           
 19693                           ; BSR set to: 0
 19694                           ;ENC424J600.c: 278: }
 19695                           ;ENC424J600.c: 279: PORTBbits.RB4=1;
 19696  004036  8881               	bsf	3969,4,c	;volatile
 19697                           
 19698                           ; BSR set to: 0
 19699                           ;ENC424J600.c: 280: return sourceAddress;
 19700  004038  EE20  F079         	lfsr	2,ethernetController_getSourceMACAddress@sourceAddress
 19701  00403C  EE00  F06F         	lfsr	0,?_ethernetController_getSourceMACAddress
 19702  004040  0E05               	movlw	5
 19703  004042                     u8801:
 19704  004042  CFDB FFEB          	movff	plusw2,plusw0
 19705  004046  06E8               	decf	wreg,f,c
 19706  004048  E2FC               	bc	u8801
 19707  00404A  0012               	return	
 19708  00404C                     __end_of_ethernetController_getSourceMACAddress:
 19709                           	opt stack 0
 19710                           tblptru	equ	0xFF8
 19711                           tblptrh	equ	0xFF7
 19712                           tblptrl	equ	0xFF6
 19713                           tablat	equ	0xFF5
 19714                           prodh	equ	0xFF4
 19715                           prodl	equ	0xFF3
 19716                           intcon	equ	0xFF2
 19717                           intcon3	equ	0xFF0
 19718                           indf0	equ	0xFEF
 19719                           postinc0	equ	0xFEE
 19720                           plusw0	equ	0xFEB
 19721                           fsr0h	equ	0xFEA
 19722                           fsr0l	equ	0xFE9
 19723                           wreg	equ	0xFE8
 19724                           indf1	equ	0xFE7
 19725                           postinc1	equ	0xFE6
 19726                           postdec1	equ	0xFE5
 19727                           plusw1	equ	0xFE3
 19728                           fsr1h	equ	0xFE2
 19729                           fsr1l	equ	0xFE1
 19730                           indf2	equ	0xFDF
 19731                           postinc2	equ	0xFDE
 19732                           postdec2	equ	0xFDD
 19733                           plusw2	equ	0xFDB
 19734                           fsr2h	equ	0xFDA
 19735                           fsr2l	equ	0xFD9
 19736                           status	equ	0xFD8
 19737                           
 19738 ;; *************** function _enc424j600_setERXDATAReadPointer *****************
 19739 ;; Defined at:
 19740 ;;		line 631 in file "src/enc424j600/ENC424J600.c"
 19741 ;; Parameters:    Size  Location     Type
 19742 ;;  addr            2   10[BANK0 ] unsigned int 
 19743 ;; Auto vars:     Size  Location     Type
 19744 ;;  highByte        1   14[BANK0 ] unsigned char 
 19745 ;;  lowByte         1   13[BANK0 ] unsigned char 
 19746 ;;  opcode          1   12[BANK0 ] unsigned char 
 19747 ;; Return value:  Size  Location     Type
 19748 ;;                  1    wreg      void 
 19749 ;; Registers used:
 19750 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19751 ;; Tracked objects:
 19752 ;;		On entry : 0/0
 19753 ;;		On exit  : 0/0
 19754 ;;		Unchanged: 0/0
 19755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19756 ;;      Params:         0       2       0       0       0       0       0       0       0
 19757 ;;      Locals:         0       3       0       0       0       0       0       0       0
 19758 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19759 ;;      Totals:         0       5       0       0       0       0       0       0       0
 19760 ;;Total ram usage:        5 bytes
 19761 ;; Hardware stack levels used:    1
 19762 ;; Hardware stack levels required when called:    6
 19763 ;; This function calls:
 19764 ;;		_enc424j600_writeSPI
 19765 ;; This function is called by:
 19766 ;;		_ethernetController_getSourceMACAddress
 19767 ;;		_ethernetController_getEtherTypeField
 19768 ;;		_ethernetController_getRSV
 19769 ;;		_ethernetController_updateNextPacketPointer
 19770 ;;		_ethernetController_streamFromRXBuffer
 19771 ;;		_ethernetController_getDestinationMACAddress
 19772 ;; This function uses a non-reentrant model
 19773 ;;
 19774                           
 19775                           	psect	text82
 19776  004748                     __ptext82:
 19777                           	opt stack 0
 19778  004748                     _enc424j600_setERXDATAReadPointer:
 19779                           	opt stack 19
 19780                           
 19781                           ;ENC424J600.c: 632: uint8_t opcode = 0x64;
 19782                           
 19783                           ; BSR set to: 0
 19784                           ;incstack = 0
 19785  004748  0E64               	movlw	100
 19786  00474A  0100               	movlb	0	; () banked
 19787  00474C  6F6C               	movwf	enc424j600_setERXDATAReadPointer@opcode& (0+255),b
 19788                           
 19789                           ; BSR set to: 0
 19790                           ;ENC424J600.c: 633: uint8_t lowByte = addr & 0x00ff;
 19791  00474E  C06A  F06D         	movff	enc424j600_setERXDATAReadPointer@addr,enc424j600_setERXDATAReadPointer@lowByte
 19792                           
 19793                           ;ENC424J600.c: 634: uint8_t highByte = (addr >> 8) & 0xff;
 19794  004752  516B               	movf	(enc424j600_setERXDATAReadPointer@addr+1)& (0+255),w,b
 19795  004754  6F6E               	movwf	enc424j600_setERXDATAReadPointer@highByte& (0+255),b
 19796                           
 19797                           ; BSR set to: 0
 19798                           ;ENC424J600.c: 635: PORTBbits.RB4=0;
 19799  004756  9881               	bcf	3969,4,c	;volatile
 19800                           
 19801                           ; BSR set to: 0
 19802                           ;ENC424J600.c: 636: enc424j600_writeSPI(&opcode);
 19803  004758  0E6C               	movlw	low enc424j600_setERXDATAReadPointer@opcode
 19804  00475A  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 19805  00475C  0E00               	movlw	high enc424j600_setERXDATAReadPointer@opcode
 19806  00475E  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 19807  004760  ECC2  F020         	call	_enc424j600_writeSPI	;wreg free
 19808                           
 19809                           ;ENC424J600.c: 637: enc424j600_writeSPI(&lowByte);
 19810  004764  0E6D               	movlw	low enc424j600_setERXDATAReadPointer@lowByte
 19811  004766  0100               	movlb	0	; () banked
 19812  004768  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 19813  00476A  0E00               	movlw	high enc424j600_setERXDATAReadPointer@lowByte
 19814  00476C  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 19815  00476E  ECC2  F020         	call	_enc424j600_writeSPI	;wreg free
 19816                           
 19817                           ;ENC424J600.c: 638: enc424j600_writeSPI(&highByte);
 19818  004772  0E6E               	movlw	low enc424j600_setERXDATAReadPointer@highByte
 19819  004774  0100               	movlb	0	; () banked
 19820  004776  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 19821  004778  0E00               	movlw	high enc424j600_setERXDATAReadPointer@highByte
 19822  00477A  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 19823  00477C  ECC2  F020         	call	_enc424j600_writeSPI	;wreg free
 19824                           
 19825                           ;ENC424J600.c: 639: PORTBbits.RB4=1;
 19826  004780  8881               	bsf	3969,4,c	;volatile
 19827  004782  0012               	return		;funcret
 19828  004784                     __end_of_enc424j600_setERXDATAReadPointer:
 19829                           	opt stack 0
 19830                           tblptru	equ	0xFF8
 19831                           tblptrh	equ	0xFF7
 19832                           tblptrl	equ	0xFF6
 19833                           tablat	equ	0xFF5
 19834                           prodh	equ	0xFF4
 19835                           prodl	equ	0xFF3
 19836                           intcon	equ	0xFF2
 19837                           intcon3	equ	0xFF0
 19838                           indf0	equ	0xFEF
 19839                           postinc0	equ	0xFEE
 19840                           plusw0	equ	0xFEB
 19841                           fsr0h	equ	0xFEA
 19842                           fsr0l	equ	0xFE9
 19843                           wreg	equ	0xFE8
 19844                           indf1	equ	0xFE7
 19845                           postinc1	equ	0xFE6
 19846                           postdec1	equ	0xFE5
 19847                           plusw1	equ	0xFE3
 19848                           fsr1h	equ	0xFE2
 19849                           fsr1l	equ	0xFE1
 19850                           indf2	equ	0xFDF
 19851                           postinc2	equ	0xFDE
 19852                           postdec2	equ	0xFDD
 19853                           plusw2	equ	0xFDB
 19854                           fsr2h	equ	0xFDA
 19855                           fsr2l	equ	0xFD9
 19856                           status	equ	0xFD8
 19857                           
 19858 ;; *************** function _arp_checkForEntry *****************
 19859 ;; Defined at:
 19860 ;;		line 356 in file "src/stack/protocols/arp.c"
 19861 ;; Parameters:    Size  Location     Type
 19862 ;;  ip              4    7[BANK0 ] struct ipv4_address
 19863 ;;  index           2   11[BANK0 ] PTR unsigned char 
 19864 ;;		 -> arp_probe@index(1), 
 19865 ;; Auto vars:     Size  Location     Type
 19866 ;;  i               1   21[BANK0 ] unsigned char 
 19867 ;; Return value:  Size  Location     Type
 19868 ;;                  1    wreg      unsigned char 
 19869 ;; Registers used:
 19870 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19871 ;; Tracked objects:
 19872 ;;		On entry : 0/0
 19873 ;;		On exit  : 0/0
 19874 ;;		Unchanged: 0/0
 19875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19876 ;;      Params:         0       6       0       0       0       0       0       0       0
 19877 ;;      Locals:         0       1       0       0       0       0       0       0       0
 19878 ;;      Temps:          0       8       0       0       0       0       0       0       0
 19879 ;;      Totals:         0      15       0       0       0       0       0       0       0
 19880 ;;Total ram usage:       15 bytes
 19881 ;; Hardware stack levels used:    1
 19882 ;; Hardware stack levels required when called:    5
 19883 ;; This function calls:
 19884 ;;		_getMillis
 19885 ;;		_ipv4_cmp
 19886 ;; This function is called by:
 19887 ;;		_arp_probe
 19888 ;; This function uses a non-reentrant model
 19889 ;;
 19890                           
 19891                           	psect	text83
 19892  00377C                     __ptext83:
 19893                           	opt stack 0
 19894  00377C                     _arp_checkForEntry:
 19895                           	opt stack 22
 19896                           
 19897                           ;arp.c: 357: for (uint8_t i = 0; i < 8u; i++) {
 19898                           
 19899                           ;incstack = 0
 19900  00377C  0E00               	movlw	0
 19901  00377E  0100               	movlb	0	; () banked
 19902  003780  6F75               	movwf	arp_checkForEntry@i& (0+255),b
 19903  003782                     l8780:
 19904                           
 19905                           ; BSR set to: 0
 19906  003782  0E07               	movlw	7
 19907  003784  6575               	cpfsgt	arp_checkForEntry@i& (0+255),b
 19908  003786  D001               	goto	l989
 19909  003788  D050               	goto	u10350
 19910  00378A                     l989:
 19911                           
 19912                           ; BSR set to: 0
 19913                           ;arp.c: 358: if (ipv4_cmp(&arp_table[i].ip, &ip)) {
 19914                           
 19915                           ; BSR set to: 0
 19916  00378A  5175               	movf	arp_checkForEntry@i& (0+255),w,b
 19917  00378C  0D0E               	mullw	14
 19918  00378E  0E0F               	movlw	low _arp_table
 19919  003790  24F3               	addwf	prodl,w,c
 19920  003792  6F60               	movwf	ipv4_cmp@a& (0+255),b
 19921  003794  0E02               	movlw	high _arp_table
 19922  003796  20F4               	addwfc	prodh,w,c
 19923  003798  6F61               	movwf	(ipv4_cmp@a+1)& (0+255),b
 19924  00379A  0E67               	movlw	low arp_checkForEntry@ip
 19925  00379C  6F62               	movwf	ipv4_cmp@b& (0+255),b
 19926  00379E  0E00               	movlw	high arp_checkForEntry@ip
 19927  0037A0  6F63               	movwf	(ipv4_cmp@b+1)& (0+255),b
 19928  0037A2  EC47  F023         	call	_ipv4_cmp	;wreg free
 19929  0037A6  0100               	movlb	0	; () banked
 19930  0037A8  A0D8               	btfss	status,0,c
 19931  0037AA  D03D               	goto	l992
 19932                           
 19933                           ; BSR set to: 0
 19934                           ;arp.c: 359: if (getMillis() - arp_table[i].timeCreated < 30000u) {
 19935  0037AC  5175               	movf	arp_checkForEntry@i& (0+255),w,b
 19936  0037AE  0D0E               	mullw	14
 19937  0037B0  0E0A               	movlw	10
 19938  0037B2  26F3               	addwf	prodl,f,c
 19939  0037B4  0E00               	movlw	0
 19940  0037B6  22F4               	addwfc	prodh,f,c
 19941  0037B8  0E0F               	movlw	low _arp_table
 19942  0037BA  24F3               	addwf	prodl,w,c
 19943  0037BC  6ED9               	movwf	fsr2l,c
 19944  0037BE  0E02               	movlw	high _arp_table
 19945  0037C0  20F4               	addwfc	prodh,w,c
 19946  0037C2  6EDA               	movwf	fsr2h,c
 19947  0037C4  CFDE F06D          	movff	postinc2,??_arp_checkForEntry
 19948  0037C8  CFDE F06E          	movff	postinc2,??_arp_checkForEntry+1
 19949  0037CC  CFDE F06F          	movff	postinc2,??_arp_checkForEntry+2
 19950  0037D0  CFDE F070          	movff	postinc2,??_arp_checkForEntry+3
 19951  0037D4  1F6D               	comf	??_arp_checkForEntry& (0+255),f,b
 19952  0037D6  1F6E               	comf	(??_arp_checkForEntry+1)& (0+255),f,b
 19953  0037D8  1F6F               	comf	(??_arp_checkForEntry+2)& (0+255),f,b
 19954  0037DA  1F70               	comf	(??_arp_checkForEntry+3)& (0+255),f,b
 19955  0037DC  2B6D               	incf	??_arp_checkForEntry& (0+255),f,b
 19956  0037DE  0E00               	movlw	0
 19957  0037E0  236E               	addwfc	(??_arp_checkForEntry+1)& (0+255),f,b
 19958  0037E2  236F               	addwfc	(??_arp_checkForEntry+2)& (0+255),f,b
 19959  0037E4  2370               	addwfc	(??_arp_checkForEntry+3)& (0+255),f,b
 19960  0037E6  ECF4  F025         	call	_getMillis	;wreg free
 19961  0037EA  0100               	movlb	0	; () banked
 19962  0037EC  516D               	movf	??_arp_checkForEntry& (0+255),w,b
 19963  0037EE  2560               	addwf	?_getMillis& (0+255),w,b
 19964  0037F0  6F71               	movwf	(??_arp_checkForEntry+4)& (0+255),b
 19965  0037F2  516E               	movf	(??_arp_checkForEntry+1)& (0+255),w,b
 19966  0037F4  2161               	addwfc	(?_getMillis+1)& (0+255),w,b
 19967  0037F6  6F72               	movwf	(??_arp_checkForEntry+5)& (0+255),b
 19968  0037F8  516F               	movf	(??_arp_checkForEntry+2)& (0+255),w,b
 19969  0037FA  2162               	addwfc	(?_getMillis+2)& (0+255),w,b
 19970  0037FC  6F73               	movwf	(??_arp_checkForEntry+6)& (0+255),b
 19971  0037FE  5170               	movf	(??_arp_checkForEntry+3)& (0+255),w,b
 19972  003800  2163               	addwfc	(?_getMillis+3)& (0+255),w,b
 19973  003802  6F74               	movwf	(??_arp_checkForEntry+7)& (0+255),b
 19974  003804  5174               	movf	(??_arp_checkForEntry+7)& (0+255),w,b
 19975  003806  1173               	iorwf	(??_arp_checkForEntry+6)& (0+255),w,b
 19976  003808  E10E               	bnz	l8794
 19977  00380A  0E30               	movlw	48
 19978  00380C  5D71               	subwf	(??_arp_checkForEntry+4)& (0+255),w,b
 19979  00380E  0E75               	movlw	117
 19980  003810  5972               	subwfb	(??_arp_checkForEntry+5)& (0+255),w,b
 19981  003812  B0D8               	btfsc	status,0,c
 19982  003814  D008               	goto	l992
 19983                           
 19984                           ; BSR set to: 0
 19985                           ;arp.c: 361: *index = i;
 19986  003816  C06B  FFD9         	movff	arp_checkForEntry@index,fsr2l
 19987  00381A  C06C  FFDA         	movff	arp_checkForEntry@index+1,fsr2h
 19988  00381E  C075  FFDF         	movff	arp_checkForEntry@i,indf2
 19989                           
 19990                           ; BSR set to: 0
 19991                           ;arp.c: 363: return 1;
 19992  003822  0E01               	movlw	1
 19993                           
 19994                           ; BSR set to: 0
 19995  003824  0012               	return	
 19996  003826                     l992:
 19997  003826                     l8794:
 19998                           
 19999                           ; BSR set to: 0
 20000  003826  2B75               	incf	arp_checkForEntry@i& (0+255),f,b
 20001  003828  D7AC               	goto	l8780
 20002  00382A                     u10350:
 20003                           
 20004                           ; BSR set to: 0
 20005                           ;arp.c: 364: }
 20006                           ;arp.c: 365: }
 20007                           ;arp.c: 366: }
 20008                           ;arp.c: 367: return 0;
 20009                           
 20010                           ; BSR set to: 0
 20011  00382A  0E00               	movlw	0
 20012  00382C  0012               	return	
 20013  00382E                     __end_of_arp_checkForEntry:
 20014                           	opt stack 0
 20015                           tblptru	equ	0xFF8
 20016                           tblptrh	equ	0xFF7
 20017                           tblptrl	equ	0xFF6
 20018                           tablat	equ	0xFF5
 20019                           prodh	equ	0xFF4
 20020                           prodl	equ	0xFF3
 20021                           intcon	equ	0xFF2
 20022                           intcon3	equ	0xFF0
 20023                           indf0	equ	0xFEF
 20024                           postinc0	equ	0xFEE
 20025                           plusw0	equ	0xFEB
 20026                           fsr0h	equ	0xFEA
 20027                           fsr0l	equ	0xFE9
 20028                           wreg	equ	0xFE8
 20029                           indf1	equ	0xFE7
 20030                           postinc1	equ	0xFE6
 20031                           postdec1	equ	0xFE5
 20032                           plusw1	equ	0xFE3
 20033                           fsr1h	equ	0xFE2
 20034                           fsr1l	equ	0xFE1
 20035                           indf2	equ	0xFDF
 20036                           postinc2	equ	0xFDE
 20037                           postdec2	equ	0xFDD
 20038                           plusw2	equ	0xFDB
 20039                           fsr2h	equ	0xFDA
 20040                           fsr2l	equ	0xFD9
 20041                           status	equ	0xFD8
 20042                           
 20043 ;; *************** function _ipv4_cmp *****************
 20044 ;; Defined at:
 20045 ;;		line 298 in file "src/stack/protocols/ipv4.c"
 20046 ;; Parameters:    Size  Location     Type
 20047 ;;  a               2    0[BANK0 ] PTR struct ipv4_address
 20048 ;;		 -> arp_table(112), arp_sendReply@request(32), arp_parseFromRXBuffer@arp(32), 
 20049 ;;  b               2    2[BANK0 ] PTR struct ipv4_address
 20050 ;;		 -> arp_checkForEntry@ip(4), arp_sendReply@myIP(4), arp_parseFromRXBuffer@arp(32), 
 20051 ;; Auto vars:     Size  Location     Type
 20052 ;;  i               1    6[BANK0 ] unsigned char 
 20053 ;; Return value:  Size  Location     Type
 20054 ;;		None               void
 20055 ;; Registers used:
 20056 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 20057 ;; Tracked objects:
 20058 ;;		On entry : 0/0
 20059 ;;		On exit  : 0/0
 20060 ;;		Unchanged: 0/0
 20061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20062 ;;      Params:         0       4       0       0       0       0       0       0       0
 20063 ;;      Locals:         0       1       0       0       0       0       0       0       0
 20064 ;;      Temps:          0       2       0       0       0       0       0       0       0
 20065 ;;      Totals:         0       7       0       0       0       0       0       0       0
 20066 ;;Total ram usage:        7 bytes
 20067 ;; Hardware stack levels used:    1
 20068 ;; Hardware stack levels required when called:    4
 20069 ;; This function calls:
 20070 ;;		Nothing
 20071 ;; This function is called by:
 20072 ;;		_arp_parseFromRXBuffer
 20073 ;;		_arp_sendReply
 20074 ;;		_arp_checkForEntry
 20075 ;; This function uses a non-reentrant model
 20076 ;;
 20077                           
 20078                           	psect	text84
 20079  00468E                     __ptext84:
 20080                           	opt stack 0
 20081  00468E                     _ipv4_cmp:
 20082                           	opt stack 22
 20083                           
 20084                           ;ipv4.c: 299: for (uint8_t i = 0; i < 4; i++) {
 20085                           
 20086                           ; BSR set to: 0
 20087                           ;incstack = 0
 20088  00468E  0E00               	movlw	0
 20089  004690  0100               	movlb	0	; () banked
 20090  004692  6F66               	movwf	ipv4_cmp@i& (0+255),b
 20091  004694                     l8420:
 20092                           
 20093                           ; BSR set to: 0
 20094  004694  0E03               	movlw	3
 20095  004696  6566               	cpfsgt	ipv4_cmp@i& (0+255),b
 20096  004698  D001               	goto	l1101
 20097  00469A  D018               	goto	u9340
 20098  00469C                     l1101:
 20099                           
 20100                           ; BSR set to: 0
 20101                           ;ipv4.c: 300: if (a->address[i] != b->address[i])
 20102                           
 20103                           ; BSR set to: 0
 20104  00469C  5166               	movf	ipv4_cmp@i& (0+255),w,b
 20105  00469E  0D01               	mullw	1
 20106  0046A0  50F3               	movf	prodl,w,c
 20107  0046A2  2562               	addwf	ipv4_cmp@b& (0+255),w,b
 20108  0046A4  6ED9               	movwf	fsr2l,c
 20109  0046A6  50F4               	movf	prodh,w,c
 20110  0046A8  2163               	addwfc	(ipv4_cmp@b+1)& (0+255),w,b
 20111  0046AA  6EDA               	movwf	fsr2h,c
 20112  0046AC  5166               	movf	ipv4_cmp@i& (0+255),w,b
 20113  0046AE  0D01               	mullw	1
 20114  0046B0  50F3               	movf	prodl,w,c
 20115  0046B2  2560               	addwf	ipv4_cmp@a& (0+255),w,b
 20116  0046B4  6EE1               	movwf	fsr1l,c
 20117  0046B6  50F4               	movf	prodh,w,c
 20118  0046B8  2161               	addwfc	(ipv4_cmp@a+1)& (0+255),w,b
 20119  0046BA  6EE2               	movwf	fsr1h,c
 20120  0046BC  50DE               	movf	postinc2,w,c
 20121  0046BE  18E6               	xorwf	postinc1,w,c
 20122  0046C0  B4D8               	btfsc	status,2,c
 20123  0046C2  D002               	goto	l1103
 20124                           
 20125                           ; BSR set to: 0
 20126                           ;ipv4.c: 301: return 0;
 20127  0046C4  90D8               	bcf	status,0,c
 20128                           
 20129                           ; BSR set to: 0
 20130  0046C6  0012               	return	
 20131  0046C8                     l1103:
 20132                           
 20133                           ; BSR set to: 0
 20134                           
 20135                           ; BSR set to: 0
 20136  0046C8  2B66               	incf	ipv4_cmp@i& (0+255),f,b
 20137  0046CA  D7E4               	goto	l8420
 20138  0046CC                     u9340:
 20139                           
 20140                           ; BSR set to: 0
 20141                           ;ipv4.c: 302: }
 20142                           ;ipv4.c: 303: return 1;
 20143                           
 20144                           ; BSR set to: 0
 20145  0046CC  80D8               	bsf	status,0,c
 20146  0046CE  0012               	return	
 20147  0046D0                     __end_of_ipv4_cmp:
 20148                           	opt stack 0
 20149                           tblptru	equ	0xFF8
 20150                           tblptrh	equ	0xFF7
 20151                           tblptrl	equ	0xFF6
 20152                           tablat	equ	0xFF5
 20153                           prodh	equ	0xFF4
 20154                           prodl	equ	0xFF3
 20155                           intcon	equ	0xFF2
 20156                           intcon3	equ	0xFF0
 20157                           indf0	equ	0xFEF
 20158                           postinc0	equ	0xFEE
 20159                           plusw0	equ	0xFEB
 20160                           fsr0h	equ	0xFEA
 20161                           fsr0l	equ	0xFE9
 20162                           wreg	equ	0xFE8
 20163                           indf1	equ	0xFE7
 20164                           postinc1	equ	0xFE6
 20165                           postdec1	equ	0xFE5
 20166                           plusw1	equ	0xFE3
 20167                           fsr1h	equ	0xFE2
 20168                           fsr1l	equ	0xFE1
 20169                           indf2	equ	0xFDF
 20170                           postinc2	equ	0xFDE
 20171                           postdec2	equ	0xFDD
 20172                           plusw2	equ	0xFDB
 20173                           fsr2h	equ	0xFDA
 20174                           fsr2l	equ	0xFD9
 20175                           status	equ	0xFD8
 20176                           
 20177 ;; *************** function _getMillis *****************
 20178 ;; Defined at:
 20179 ;;		line 34 in file "src/stack/time.c"
 20180 ;; Parameters:    Size  Location     Type
 20181 ;;		None
 20182 ;; Auto vars:     Size  Location     Type
 20183 ;;		None
 20184 ;; Return value:  Size  Location     Type
 20185 ;;                  4    0[BANK0 ] unsigned long 
 20186 ;; Registers used:
 20187 ;;		None
 20188 ;; Tracked objects:
 20189 ;;		On entry : 0/0
 20190 ;;		On exit  : 0/0
 20191 ;;		Unchanged: 0/0
 20192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20193 ;;      Params:         0       4       0       0       0       0       0       0       0
 20194 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20195 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20196 ;;      Totals:         0       4       0       0       0       0       0       0       0
 20197 ;;Total ram usage:        4 bytes
 20198 ;; Hardware stack levels used:    1
 20199 ;; Hardware stack levels required when called:    4
 20200 ;; This function calls:
 20201 ;;		Nothing
 20202 ;; This function is called by:
 20203 ;;		_ethernet_rxGetNewFrame
 20204 ;;		_arp_handleNewPacket
 20205 ;;		_arp_probe
 20206 ;;		_arp_checkForEntry
 20207 ;; This function uses a non-reentrant model
 20208 ;;
 20209                           
 20210                           	psect	text85
 20211  004BE8                     __ptext85:
 20212                           	opt stack 0
 20213  004BE8                     _getMillis:
 20214                           	opt stack 24
 20215                           
 20216                           ;time.c: 35: return time;
 20217                           
 20218                           ; BSR set to: 0
 20219                           ;incstack = 0
 20220  004BE8  C029  F060         	movff	_time,?_getMillis	;volatile
 20221  004BEC  C02A  F061         	movff	_time+1,?_getMillis+1	;volatile
 20222  004BF0  C02B  F062         	movff	_time+2,?_getMillis+2	;volatile
 20223  004BF4  C02C  F063         	movff	_time+3,?_getMillis+3	;volatile
 20224  004BF8  0012               	return		;funcret
 20225  004BFA                     __end_of_getMillis:
 20226                           	opt stack 0
 20227                           tblptru	equ	0xFF8
 20228                           tblptrh	equ	0xFF7
 20229                           tblptrl	equ	0xFF6
 20230                           tablat	equ	0xFF5
 20231                           prodh	equ	0xFF4
 20232                           prodl	equ	0xFF3
 20233                           intcon	equ	0xFF2
 20234                           intcon3	equ	0xFF0
 20235                           indf0	equ	0xFEF
 20236                           postinc0	equ	0xFEE
 20237                           plusw0	equ	0xFEB
 20238                           fsr0h	equ	0xFEA
 20239                           fsr0l	equ	0xFE9
 20240                           wreg	equ	0xFE8
 20241                           indf1	equ	0xFE7
 20242                           postinc1	equ	0xFE6
 20243                           postdec1	equ	0xFE5
 20244                           plusw1	equ	0xFE3
 20245                           fsr1h	equ	0xFE2
 20246                           fsr1l	equ	0xFE1
 20247                           indf2	equ	0xFDF
 20248                           postinc2	equ	0xFDE
 20249                           postdec2	equ	0xFDD
 20250                           plusw2	equ	0xFDB
 20251                           fsr2h	equ	0xFDA
 20252                           fsr2l	equ	0xFD9
 20253                           status	equ	0xFD8
 20254                           
 20255 ;; *************** function _UARTTransmitText *****************
 20256 ;; Defined at:
 20257 ;;		line 36 in file "src/system/uart.c"
 20258 ;; Parameters:    Size  Location     Type
 20259 ;;  str             2   56[BANK0 ] PTR const unsigned char 
 20260 ;;		 -> STR_106(39), STR_105(59), STR_104(5), STR_103(38), 
 20261 ;;		 -> STR_102(23), STR_101(30), STR_100(45), STR_99(64), 
 20262 ;;		 -> STR_98(35), STR_97(5), STR_96(42), STR_95(19), 
 20263 ;;		 -> STR_94(2), STR_93(3), STR_92(3), STR_91(3), 
 20264 ;;		 -> STR_90(3), STR_89(5), STR_88(2), STR_87(2), 
 20265 ;;		 -> STR_86(7), STR_85(11), STR_84(3), STR_83(33), 
 20266 ;;		 -> STR_82(24), STR_81(36), STR_80(4), STR_79(11), 
 20267 ;;		 -> STR_78(21), STR_77(7), STR_76(41), STR_75(7), 
 20268 ;;		 -> STR_74(13), STR_73(30), STR_72(26), STR_71(4), 
 20269 ;;		 -> STR_70(30), STR_69(2), STR_68(3), STR_67(16), 
 20270 ;;		 -> STR_66(15), STR_65(10), STR_64(2), STR_63(3), 
 20271 ;;		 -> STR_62(5), STR_61(3), STR_60(2), STR_59(39), 
 20272 ;;		 -> arpEntryToString@string(50), ipAdressToString@address(16), STR_58(17), STR_57(4), 
 20273 ;;		 -> STR_56(4), STR_55(5), STR_54(18), STR_53(4), 
 20274 ;;		 -> STR_52(5), macToString@address(18), hexToString@number(10), intToString@number(10), 
 20275 ;;		 -> STR_51(5), STR_50(9), STR_49(30), STR_48(34), 
 20276 ;;		 -> STR_47(55), STR_46(37), STR_45(15), STR_44(14), 
 20277 ;;		 -> STR_43(19), STR_42(30), STR_41(17), STR_40(8), 
 20278 ;;		 -> STR_39(29), STR_38(29), STR_37(20), STR_36(19), 
 20279 ;;		 -> STR_35(19), STR_34(13), STR_33(51), STR_32(4), 
 20280 ;;		 -> STR_31(23), STR_30(12), STR_29(4), STR_28(9), 
 20281 ;;		 -> STR_27(2), STR_26(12), STR_25(24), STR_24(51), 
 20282 ;;		 -> STR_23(49), STR_22(51), STR_21(2), STR_20(3), 
 20283 ;;		 -> STR_19(3), STR_18(3), STR_17(5), STR_16(2), 
 20284 ;;		 -> STR_15(3), STR_14(5), STR_13(3), STR_12(3), 
 20285 ;;		 -> STR_11(2), STR_10(20), STR_9(7), STR_8(6), 
 20286 ;;		 -> STR_7(2), STR_6(2), STR_5(16), STR_4(10), 
 20287 ;;		 -> STR_3(12), STR_2(2), STR_1(2), ethernetController_getDeviceName@string(11), 
 20288 ;; Auto vars:     Size  Location     Type
 20289 ;;		None
 20290 ;; Return value:  Size  Location     Type
 20291 ;;                  1    wreg      void 
 20292 ;; Registers used:
 20293 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 20294 ;; Tracked objects:
 20295 ;;		On entry : 0/0
 20296 ;;		On exit  : 0/0
 20297 ;;		Unchanged: 0/0
 20298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20299 ;;      Params:         0       2       0       0       0       0       0       0       0
 20300 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20301 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20302 ;;      Totals:         0       2       0       0       0       0       0       0       0
 20303 ;;Total ram usage:        2 bytes
 20304 ;; Hardware stack levels used:    1
 20305 ;; Hardware stack levels required when called:    4
 20306 ;; This function calls:
 20307 ;;		Nothing
 20308 ;; This function is called by:
 20309 ;;		_ethernet_rxGetNewFrame
 20310 ;;		_main
 20311 ;;		_printEthernetState
 20312 ;;		_printErrorMessage
 20313 ;;		_UARTTransmitInt
 20314 ;;		_arp_handleNewPacket
 20315 ;;		_arp_sendReply
 20316 ;;		_arp_probe
 20317 ;;		_arp_background
 20318 ;;		_ipv4_checkHeaderChecksum
 20319 ;;		_ipv4_handleNewPacket
 20320 ;;		_ipv4_setIPSourceAddress
 20321 ;;		_ipv4_background
 20322 ;;		_printArpTable
 20323 ;; This function uses a non-reentrant model
 20324 ;;
 20325                           
 20326                           	psect	text86
 20327  0042F4                     __ptext86:
 20328                           	opt stack 0
 20329  0042F4                     _UARTTransmitText:
 20330                           	opt stack 25
 20331                           
 20332                           ;uart.c: 37: while (*str) {
 20333                           
 20334                           ;incstack = 0
 20335  0042F4  D016               	goto	u9020
 20336  0042F6                     
 20337                           ;uart.c: 38: TXREG1 = *str++;
 20338  0042F6  C098  FFF6         	movff	UARTTransmitText@str,tblptrl
 20339  0042FA  C099  FFF7         	movff	UARTTransmitText@str+1,tblptrh
 20340  0042FE  6AF8               	clrf	tblptru,c
 20341  004300  0E07               	movlw	(high __ramtop+-1)
 20342  004302  64F7               	cpfsgt	tblptrh,c
 20343  004304  D003               	bra	u9017
 20344  004306  0008               	tblrd		*
 20345  004308  50F5               	movf	tablat,w,c
 20346  00430A  D005               	bra	u9010
 20347  00430C                     u9017:
 20348  00430C  CFF6 FFE9          	movff	tblptrl,fsr0l
 20349  004310  CFF7 FFEA          	movff	tblptrh,fsr0h
 20350  004314  50EF               	movf	indf0,w,c
 20351  004316                     u9010:
 20352  004316  6EAD               	movwf	4013,c	;volatile
 20353  004318  0100               	movlb	0	; () banked
 20354  00431A  4B98               	infsnz	UARTTransmitText@str& (0+255),f,b
 20355  00431C  2B99               	incf	(UARTTransmitText@str+1)& (0+255),f,b
 20356  00431E                     
 20357                           ; BSR set to: 0
 20358  00431E  A2AC               	btfss	4012,1,c	;volatile
 20359  004320  D7FE               	goto	l759
 20360  004322                     u9020:
 20361  004322  C098  FFF6         	movff	UARTTransmitText@str,tblptrl
 20362  004326  C099  FFF7         	movff	UARTTransmitText@str+1,tblptrh
 20363  00432A  6AF8               	clrf	tblptru,c
 20364  00432C  0E07               	movlw	(high __ramtop+-1)
 20365  00432E  64F7               	cpfsgt	tblptrh,c
 20366  004330  D003               	bra	u9037
 20367  004332  0008               	tblrd		*
 20368  004334  50F5               	movf	tablat,w,c
 20369  004336  D005               	bra	u9030
 20370  004338                     u9037:
 20371  004338  CFF6 FFE9          	movff	tblptrl,fsr0l
 20372  00433C  CFF7 FFEA          	movff	tblptrh,fsr0h
 20373  004340  50EF               	movf	indf0,w,c
 20374  004342                     u9030:
 20375  004342  0900               	iorlw	0
 20376  004344  B4D8               	btfsc	status,2,c
 20377  004346  0012               	return	
 20378  004348  D7D6               	goto	l757
 20379  00434A                     __end_of_UARTTransmitText:
 20380                           	opt stack 0
 20381                           tblptru	equ	0xFF8
 20382                           tblptrh	equ	0xFF7
 20383                           tblptrl	equ	0xFF6
 20384                           tablat	equ	0xFF5
 20385                           prodh	equ	0xFF4
 20386                           prodl	equ	0xFF3
 20387                           intcon	equ	0xFF2
 20388                           intcon3	equ	0xFF0
 20389                           indf0	equ	0xFEF
 20390                           postinc0	equ	0xFEE
 20391                           plusw0	equ	0xFEB
 20392                           fsr0h	equ	0xFEA
 20393                           fsr0l	equ	0xFE9
 20394                           wreg	equ	0xFE8
 20395                           indf1	equ	0xFE7
 20396                           postinc1	equ	0xFE6
 20397                           postdec1	equ	0xFE5
 20398                           plusw1	equ	0xFE3
 20399                           fsr1h	equ	0xFE2
 20400                           fsr1l	equ	0xFE1
 20401                           indf2	equ	0xFDF
 20402                           postinc2	equ	0xFDE
 20403                           postdec2	equ	0xFDD
 20404                           plusw2	equ	0xFDB
 20405                           fsr2h	equ	0xFDA
 20406                           fsr2l	equ	0xFD9
 20407                           status	equ	0xFD8
 20408                           
 20409 ;; *************** function _ethernetController_init *****************
 20410 ;; Defined at:
 20411 ;;		line 34 in file "src/enc424j600/ENC424J600.c"
 20412 ;; Parameters:    Size  Location     Type
 20413 ;;		None
 20414 ;; Auto vars:     Size  Location     Type
 20415 ;;  err             3   29[BANK0 ] struct error
 20416 ;; Return value:  Size  Location     Type
 20417 ;;                  3   26[BANK0 ] struct error
 20418 ;; Registers used:
 20419 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20420 ;; Tracked objects:
 20421 ;;		On entry : 0/0
 20422 ;;		On exit  : 0/0
 20423 ;;		Unchanged: 0/0
 20424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20425 ;;      Params:         0       3       0       0       0       0       0       0       0
 20426 ;;      Locals:         0       3       0       0       0       0       0       0       0
 20427 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20428 ;;      Totals:         0       6       0       0       0       0       0       0       0
 20429 ;;Total ram usage:        6 bytes
 20430 ;; Hardware stack levels used:    1
 20431 ;; Hardware stack levels required when called:    8
 20432 ;; This function calls:
 20433 ;;		_enc424j600_enableAutoMACInsertion
 20434 ;;		_enc424j600_enableReception
 20435 ;;		_enc424j600_initSPI
 20436 ;;		_enc424j600_setNextPacketPointer
 20437 ;;		_enc424j600_setRXBufferStartAddress
 20438 ;;		_enc424j600_setRXTailPointer
 20439 ;;		_ethernetController_checkDeviceId
 20440 ;;		_ethernetController_softReset
 20441 ;; This function is called by:
 20442 ;;		_main
 20443 ;; This function uses a non-reentrant model
 20444 ;;
 20445                           
 20446                           	psect	text87
 20447  003EFA                     __ptext87:
 20448                           	opt stack 0
 20449  003EFA                     _ethernetController_init:
 20450                           	opt stack 22
 20451                           
 20452                           ;ENC424J600.c: 35: error_t err;
 20453                           ;ENC424J600.c: 36: enc424j600_initSPI();
 20454                           
 20455                           ;incstack = 0
 20456  003EFA  EC9B  F025         	call	_enc424j600_initSPI	;wreg free
 20457                           
 20458                           ;ENC424J600.c: 37: err = ethernetController_softReset();
 20459  003EFE  EC94  F016         	call	_ethernetController_softReset	;wreg free
 20460  003F02  C06E  F07D         	movff	?_ethernetController_softReset,ethernetController_init@err
 20461  003F06  C06F  F07E         	movff	?_ethernetController_softReset+1,ethernetController_init@err+1
 20462  003F0A  C070  F07F         	movff	?_ethernetController_softReset+2,ethernetController_init@err+2
 20463                           
 20464                           ;ENC424J600.c: 40: }
 20465                           ;ENC424J600.c: 41: err = ethernetController_checkDeviceId();
 20466  003F0E  EC71  F022         	call	_ethernetController_checkDeviceId	;wreg free
 20467  003F12  C06E  F07D         	movff	?_ethernetController_checkDeviceId,ethernetController_init@err
 20468  003F16  C06F  F07E         	movff	?_ethernetController_checkDeviceId+1,ethernetController_init@err+1
 20469  003F1A  C070  F07F         	movff	?_ethernetController_checkDeviceId+2,ethernetController_init@err+2
 20470                           
 20471                           ;ENC424J600.c: 44: }
 20472                           ;ENC424J600.c: 63: enc424j600_setRXBufferStartAddress(0x3000);
 20473  003F1E  0E30               	movlw	48
 20474  003F20  0100               	movlb	0	; () banked
 20475  003F22  6F6F               	movwf	(enc424j600_setRXBufferStartAddress@addr+1)& (0+255),b
 20476  003F24  0E00               	movlw	0
 20477  003F26  6F6E               	movwf	enc424j600_setRXBufferStartAddress@addr& (0+255),b
 20478  003F28  ECCF  F024         	call	_enc424j600_setRXBufferStartAddress	;wreg free
 20479                           
 20480                           ;ENC424J600.c: 64: enc424j600_setNextPacketPointer(0x3000);
 20481  003F2C  0E30               	movlw	48
 20482  003F2E  0100               	movlb	0	; () banked
 20483  003F30  6F61               	movwf	(enc424j600_setNextPacketPointer@ptr+1)& (0+255),b
 20484  003F32  0E00               	movlw	0
 20485  003F34  6F60               	movwf	enc424j600_setNextPacketPointer@ptr& (0+255),b
 20486  003F36  EC2B  F026         	call	_enc424j600_setNextPacketPointer	;wreg free
 20487                           
 20488                           ;ENC424J600.c: 65: enc424j600_setRXTailPointer(0x5FFE);
 20489  003F3A  0E5F               	movlw	95
 20490  003F3C  0100               	movlb	0	; () banked
 20491  003F3E  6F6F               	movwf	(enc424j600_setRXTailPointer@addr+1)& (0+255),b
 20492  003F40  0EFE               	movlw	254
 20493  003F42  6F6E               	movwf	enc424j600_setRXTailPointer@addr& (0+255),b
 20494  003F44  ECBA  F024         	call	_enc424j600_setRXTailPointer	;wreg free
 20495                           
 20496                           ;ENC424J600.c: 67: enc424j600_enableReception();
 20497  003F48  EC30  F026         	call	_enc424j600_enableReception	;wreg free
 20498                           
 20499                           ;ENC424J600.c: 68: enc424j600_enableAutoMACInsertion();
 20500  003F4C  EC0C  F025         	call	_enc424j600_enableAutoMACInsertion	;wreg free
 20501                           
 20502                           ;ENC424J600.c: 70: err.module = ERROR_MODULE_ETHERNET_CONTROLLER;
 20503  003F50  0E01               	movlw	1
 20504  003F52  0100               	movlb	0	; () banked
 20505  003F54  6F7D               	movwf	ethernetController_init@err& (0+255),b
 20506                           
 20507                           ; BSR set to: 0
 20508                           ;ENC424J600.c: 71: err.code = (uint16_t)0;
 20509  003F56  0E00               	movlw	0
 20510  003F58  6F7F               	movwf	(ethernetController_init@err+2)& (0+255),b
 20511  003F5A  0E00               	movlw	0
 20512  003F5C  6F7E               	movwf	(ethernetController_init@err+1)& (0+255),b
 20513                           
 20514                           ; BSR set to: 0
 20515                           ;ENC424J600.c: 72: return err;
 20516  003F5E  C07D  F07A         	movff	ethernetController_init@err,?_ethernetController_init
 20517  003F62  C07E  F07B         	movff	ethernetController_init@err+1,?_ethernetController_init+1
 20518  003F66  C07F  F07C         	movff	ethernetController_init@err+2,?_ethernetController_init+2
 20519  003F6A  0012               	return	
 20520  003F6C                     __end_of_ethernetController_init:
 20521                           	opt stack 0
 20522                           tblptru	equ	0xFF8
 20523                           tblptrh	equ	0xFF7
 20524                           tblptrl	equ	0xFF6
 20525                           tablat	equ	0xFF5
 20526                           prodh	equ	0xFF4
 20527                           prodl	equ	0xFF3
 20528                           intcon	equ	0xFF2
 20529                           intcon3	equ	0xFF0
 20530                           indf0	equ	0xFEF
 20531                           postinc0	equ	0xFEE
 20532                           plusw0	equ	0xFEB
 20533                           fsr0h	equ	0xFEA
 20534                           fsr0l	equ	0xFE9
 20535                           wreg	equ	0xFE8
 20536                           indf1	equ	0xFE7
 20537                           postinc1	equ	0xFE6
 20538                           postdec1	equ	0xFE5
 20539                           plusw1	equ	0xFE3
 20540                           fsr1h	equ	0xFE2
 20541                           fsr1l	equ	0xFE1
 20542                           indf2	equ	0xFDF
 20543                           postinc2	equ	0xFDE
 20544                           postdec2	equ	0xFDD
 20545                           plusw2	equ	0xFDB
 20546                           fsr2h	equ	0xFDA
 20547                           fsr2l	equ	0xFD9
 20548                           status	equ	0xFD8
 20549                           
 20550 ;; *************** function _ethernetController_softReset *****************
 20551 ;; Defined at:
 20552 ;;		line 75 in file "src/enc424j600/ENC424J600.c"
 20553 ;; Parameters:    Size  Location     Type
 20554 ;;		None
 20555 ;; Auto vars:     Size  Location     Type
 20556 ;;  err             3   23[BANK0 ] struct error
 20557 ;;  receivedData    2   21[BANK0 ] unsigned char [2]
 20558 ;;  dataToSend      2   19[BANK0 ] unsigned char [2]
 20559 ;;  comFailCount    1   18[BANK0 ] unsigned char 
 20560 ;; Return value:  Size  Location     Type
 20561 ;;                  3   14[BANK0 ] struct error
 20562 ;; Registers used:
 20563 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20564 ;; Tracked objects:
 20565 ;;		On entry : 0/0
 20566 ;;		On exit  : 0/0
 20567 ;;		Unchanged: 0/0
 20568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20569 ;;      Params:         0       3       0       0       0       0       0       0       0
 20570 ;;      Locals:         0       8       0       0       0       0       0       0       0
 20571 ;;      Temps:          0       1       0       0       0       0       0       0       0
 20572 ;;      Totals:         0      12       0       0       0       0       0       0       0
 20573 ;;Total ram usage:       12 bytes
 20574 ;; Hardware stack levels used:    1
 20575 ;; Hardware stack levels required when called:    7
 20576 ;; This function calls:
 20577 ;;		_enc424j600_readControlRegisterUnbanked
 20578 ;;		_enc424j600_writeControlRegisterUnbanked
 20579 ;;		_enc424j600_writeSingleByte
 20580 ;; This function is called by:
 20581 ;;		_ethernetController_init
 20582 ;; This function uses a non-reentrant model
 20583 ;;
 20584                           
 20585                           	psect	text88
 20586  002D28                     __ptext88:
 20587                           	opt stack 0
 20588  002D28                     _ethernetController_softReset:
 20589                           	opt stack 22
 20590                           
 20591                           ;ENC424J600.c: 93: uint8_t comFailCount = 0;
 20592                           
 20593                           ; BSR set to: 0
 20594                           ;incstack = 0
 20595  002D28  0E00               	movlw	0
 20596  002D2A  0100               	movlb	0	; () banked
 20597  002D2C  6F72               	movwf	ethernetController_softReset@comFailCount& (0+255),b
 20598                           
 20599                           ; BSR set to: 0
 20600                           ;ENC424J600.c: 94: uint8_t dataToSend[2] = {0x12, 0x34};
 20601  002D2E  C04D  F073         	movff	ethernetController_softReset@F5981,ethernetController_softReset@dataToSend
 20602  002D32  C04E  F074         	movff	ethernetController_softReset@F5981+1,ethernetController_softReset@dataToSend+1
 20603                           
 20604                           ; BSR set to: 0
 20605                           ;ENC424J600.c: 95: uint8_t receivedData[2] = {0, 0};
 20606  002D36  C040  F075         	movff	ethernetController_softReset@F5983,ethernetController_softReset@receivedData
 20607  002D3A  C041  F076         	movff	ethernetController_softReset@F5983+1,ethernetController_softReset@receivedData+1
 20608                           
 20609                           ;ENC424J600.c: 96: error_t err;
 20610                           ;ENC424J600.c: 97: err.module = ERROR_MODULE_ETHERNET_CONTROLLER;
 20611  002D3E  0E01               	movlw	1
 20612  002D40  6F77               	movwf	ethernetController_softReset@err& (0+255),b
 20613                           
 20614                           ;ENC424J600.c: 98: err.code = (uint16_t)0;
 20615  002D42  0E00               	movlw	0
 20616  002D44  6F79               	movwf	(ethernetController_softReset@err+2)& (0+255),b
 20617  002D46  0E00               	movlw	0
 20618  002D48  6F78               	movwf	(ethernetController_softReset@err+1)& (0+255),b
 20619                           
 20620                           ; BSR set to: 0
 20621                           ;ENC424J600.c: 99: if (comFailCount < 5) {
 20622  002D4A  0E05               	movlw	5
 20623  002D4C  6172               	cpfslt	ethernetController_softReset@comFailCount& (0+255),b
 20624  002D4E  D05F               	goto	l84
 20625                           
 20626                           ; BSR set to: 0
 20627                           ;ENC424J600.c: 101: enc424j600_writeControlRegisterUnbanked(0x16 + 0x00, &dataToSend[0])
      +                          ;
 20628  002D50  0E73               	movlw	low ethernetController_softReset@dataToSend
 20629  002D52  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 20630  002D54  0E00               	movlw	high ethernetController_softReset@dataToSend
 20631  002D56  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 20632  002D58  0E16               	movlw	22
 20633  002D5A  ECFA  F023         	call	_enc424j600_writeControlRegisterUnbanked
 20634                           
 20635                           ;ENC424J600.c: 102: enc424j600_writeControlRegisterUnbanked(0x17 + 0x00, &dataToSend[1])
      +                          ;
 20636  002D5E  0E74               	movlw	low (ethernetController_softReset@dataToSend+1)
 20637  002D60  0100               	movlb	0	; () banked
 20638  002D62  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 20639  002D64  0E00               	movlw	high (ethernetController_softReset@dataToSend+1)
 20640  002D66  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 20641  002D68  0E17               	movlw	23
 20642  002D6A  ECFA  F023         	call	_enc424j600_writeControlRegisterUnbanked
 20643                           
 20644                           ;ENC424J600.c: 104: enc424j600_readControlRegisterUnbanked(0x16 + 0x00, &receivedData[0]
      +                          );
 20645  002D6E  0E75               	movlw	low ethernetController_softReset@receivedData
 20646  002D70  0100               	movlb	0	; () banked
 20647  002D72  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 20648  002D74  0E00               	movlw	high ethernetController_softReset@receivedData
 20649  002D76  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 20650  002D78  0E16               	movlw	22
 20651  002D7A  EC15  F024         	call	_enc424j600_readControlRegisterUnbanked
 20652                           
 20653                           ;ENC424J600.c: 105: enc424j600_readControlRegisterUnbanked(0x17 + 0x00, &receivedData[1]
      +                          );
 20654  002D7E  0E76               	movlw	low (ethernetController_softReset@receivedData+1)
 20655  002D80  0100               	movlb	0	; () banked
 20656  002D82  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 20657  002D84  0E00               	movlw	high (ethernetController_softReset@receivedData+1)
 20658  002D86  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 20659  002D88  0E17               	movlw	23
 20660  002D8A  EC15  F024         	call	_enc424j600_readControlRegisterUnbanked
 20661                           
 20662                           ;ENC424J600.c: 107: if ((receivedData[0] == dataToSend[0]) && (receivedData[1] == dataTo
      +                          Send[1])) {
 20663  002D8E  0100               	movlb	0	; () banked
 20664  002D90  5173               	movf	ethernetController_softReset@dataToSend& (0+255),w,b
 20665  002D92  1975               	xorwf	ethernetController_softReset@receivedData& (0+255),w,b
 20666  002D94  A4D8               	btfss	status,2,c
 20667  002D96  D038               	goto	l88
 20668                           
 20669                           ; BSR set to: 0
 20670  002D98  5174               	movf	(ethernetController_softReset@dataToSend+1)& (0+255),w,b
 20671  002D9A  1976               	xorwf	(ethernetController_softReset@receivedData+1)& (0+255),w,b
 20672  002D9C  A4D8               	btfss	status,2,c
 20673  002D9E  D034               	goto	l88
 20674                           
 20675                           ; BSR set to: 0
 20676                           ;ENC424J600.c: 109: enc424j600_writeSingleByte(0b11001010);
 20677  002DA0  0ECA               	movlw	202
 20678  002DA2  ECC3  F025         	call	_enc424j600_writeSingleByte
 20679                           
 20680                           ;ENC424J600.c: 110: _delay((unsigned long)((25)*(32000000UL/4000000.0)));
 20681  002DA6  0E42               	movlw	66
 20682  002DA8                     u11587:
 20683  002DA8  2EE8               	decfsz	wreg,f,c
 20684  002DAA  D7FE               	bra	u11587
 20685  002DAC  D000               	nop2	
 20686                           
 20687                           ;ENC424J600.c: 112: enc424j600_readControlRegisterUnbanked(0x16 + 0x00, &receivedData[0]
      +                          );
 20688  002DAE  0E75               	movlw	low ethernetController_softReset@receivedData
 20689  002DB0  0100               	movlb	0	; () banked
 20690  002DB2  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 20691  002DB4  0E00               	movlw	high ethernetController_softReset@receivedData
 20692  002DB6  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 20693  002DB8  0E16               	movlw	22
 20694  002DBA  EC15  F024         	call	_enc424j600_readControlRegisterUnbanked
 20695                           
 20696                           ;ENC424J600.c: 113: enc424j600_readControlRegisterUnbanked(0x17 + 0x00, &receivedData[1]
      +                          );
 20697  002DBE  0E76               	movlw	low (ethernetController_softReset@receivedData+1)
 20698  002DC0  0100               	movlb	0	; () banked
 20699  002DC2  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 20700  002DC4  0E00               	movlw	high (ethernetController_softReset@receivedData+1)
 20701  002DC6  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 20702  002DC8  0E17               	movlw	23
 20703  002DCA  EC15  F024         	call	_enc424j600_readControlRegisterUnbanked
 20704                           
 20705                           ;ENC424J600.c: 115: if (!receivedData[0] && !receivedData[1]) {
 20706  002DCE  0100               	movlb	0	; () banked
 20707  002DD0  5175               	movf	ethernetController_softReset@receivedData& (0+255),w,b
 20708  002DD2  A4D8               	btfss	status,2,c
 20709  002DD4  D00D               	goto	l86
 20710                           
 20711                           ; BSR set to: 0
 20712  002DD6  5176               	movf	(ethernetController_softReset@receivedData+1)& (0+255),w,b
 20713  002DD8  A4D8               	btfss	status,2,c
 20714  002DDA  D00A               	goto	l86
 20715                           
 20716                           ; BSR set to: 0
 20717                           ;ENC424J600.c: 117: _delay((unsigned long)((256)*(32000000UL/4000000.0)));
 20718  002DDC  0E03               	movlw	3
 20719  002DDE  0100               	movlb	0	; () banked
 20720  002DE0  6F71               	movwf	??_ethernetController_softReset& (0+255),b
 20721  002DE2  0EA7               	movlw	167
 20722  002DE4                     u11597:
 20723  002DE4  2EE8               	decfsz	wreg,f,c
 20724  002DE6  D7FE               	bra	u11597
 20725  002DE8  2F71               	decfsz	??_ethernetController_softReset& (0+255),f,b
 20726  002DEA  D7FC               	bra	u11597
 20727  002DEC  D000               	nop2	
 20728  002DEE  D005               	goto	l9248
 20729  002DF0                     l86:
 20730                           
 20731                           ;ENC424J600.c: 120: err.code = ERROR_ETHERNET_CONTROLLER_UNRESPONSIVE;
 20732  002DF0  0E01               	movlw	1
 20733  002DF2  0100               	movlb	0	; () banked
 20734  002DF4  6F79               	movwf	(ethernetController_softReset@err+2)& (0+255),b
 20735  002DF6  0E2E               	movlw	46
 20736  002DF8  6F78               	movwf	(ethernetController_softReset@err+1)& (0+255),b
 20737  002DFA                     l9248:
 20738                           
 20739                           ; BSR set to: 0
 20740                           ;ENC424J600.c: 121: return err;
 20741  002DFA  C077  F06E         	movff	ethernetController_softReset@err,?_ethernetController_softReset
 20742  002DFE  C078  F06F         	movff	ethernetController_softReset@err+1,?_ethernetController_softReset+1
 20743  002E02  C079  F070         	movff	ethernetController_softReset@err+2,?_ethernetController_softReset+2
 20744                           
 20745                           ; BSR set to: 0
 20746  002E06  0012               	return	
 20747  002E08                     l88:
 20748                           
 20749                           ;ENC424J600.c: 122: }
 20750                           ;ENC424J600.c: 123: }
 20751                           ;ENC424J600.c: 124: comFailCount++;
 20752                           
 20753                           ; BSR set to: 0
 20754                           
 20755                           ; BSR set to: 0
 20756  002E08  0100               	movlb	0	; () banked
 20757  002E0A  2B72               	incf	ethernetController_softReset@comFailCount& (0+255),f,b
 20758                           
 20759                           ;ENC424J600.c: 125: } else {
 20760  002E0C  D00B               	goto	l89
 20761  002E0E                     l84:
 20762                           
 20763                           ; BSR set to: 0
 20764                           ;ENC424J600.c: 126: err.code = ERROR_ETHERNET_CONTROLLER_UNRESPONSIVE;
 20765                           
 20766                           ; BSR set to: 0
 20767  002E0E  0E01               	movlw	1
 20768  002E10  6F79               	movwf	(ethernetController_softReset@err+2)& (0+255),b
 20769  002E12  0E2E               	movlw	46
 20770  002E14  6F78               	movwf	(ethernetController_softReset@err+1)& (0+255),b
 20771                           
 20772                           ; BSR set to: 0
 20773                           ;ENC424J600.c: 127: return err;
 20774  002E16  C077  F06E         	movff	ethernetController_softReset@err,?_ethernetController_softReset
 20775  002E1A  C078  F06F         	movff	ethernetController_softReset@err+1,?_ethernetController_softReset+1
 20776  002E1E  C079  F070         	movff	ethernetController_softReset@err+2,?_ethernetController_softReset+2
 20777                           
 20778                           ; BSR set to: 0
 20779  002E22  0012               	return	
 20780  002E24                     l89:
 20781                           
 20782                           ; BSR set to: 0
 20783                           ;ENC424J600.c: 128: }
 20784                           ;ENC424J600.c: 129: return err;
 20785  002E24  C077  F06E         	movff	ethernetController_softReset@err,?_ethernetController_softReset
 20786  002E28  C078  F06F         	movff	ethernetController_softReset@err+1,?_ethernetController_softReset+1
 20787  002E2C  C079  F070         	movff	ethernetController_softReset@err+2,?_ethernetController_softReset+2
 20788  002E30  0012               	return		;funcret
 20789  002E32                     __end_of_ethernetController_softReset:
 20790                           	opt stack 0
 20791                           tblptru	equ	0xFF8
 20792                           tblptrh	equ	0xFF7
 20793                           tblptrl	equ	0xFF6
 20794                           tablat	equ	0xFF5
 20795                           prodh	equ	0xFF4
 20796                           prodl	equ	0xFF3
 20797                           intcon	equ	0xFF2
 20798                           intcon3	equ	0xFF0
 20799                           indf0	equ	0xFEF
 20800                           postinc0	equ	0xFEE
 20801                           plusw0	equ	0xFEB
 20802                           fsr0h	equ	0xFEA
 20803                           fsr0l	equ	0xFE9
 20804                           wreg	equ	0xFE8
 20805                           indf1	equ	0xFE7
 20806                           postinc1	equ	0xFE6
 20807                           postdec1	equ	0xFE5
 20808                           plusw1	equ	0xFE3
 20809                           fsr1h	equ	0xFE2
 20810                           fsr1l	equ	0xFE1
 20811                           indf2	equ	0xFDF
 20812                           postinc2	equ	0xFDE
 20813                           postdec2	equ	0xFDD
 20814                           plusw2	equ	0xFDB
 20815                           fsr2h	equ	0xFDA
 20816                           fsr2l	equ	0xFD9
 20817                           status	equ	0xFD8
 20818                           
 20819 ;; *************** function _ethernetController_checkDeviceId *****************
 20820 ;; Defined at:
 20821 ;;		line 132 in file "src/enc424j600/ENC424J600.c"
 20822 ;; Parameters:    Size  Location     Type
 20823 ;;		None
 20824 ;; Auto vars:     Size  Location     Type
 20825 ;;  err             3   18[BANK0 ] struct error
 20826 ;;  data            1   17[BANK0 ] unsigned char 
 20827 ;; Return value:  Size  Location     Type
 20828 ;;                  3   14[BANK0 ] struct error
 20829 ;; Registers used:
 20830 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20831 ;; Tracked objects:
 20832 ;;		On entry : 0/0
 20833 ;;		On exit  : 0/0
 20834 ;;		Unchanged: 0/0
 20835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20836 ;;      Params:         0       3       0       0       0       0       0       0       0
 20837 ;;      Locals:         0       4       0       0       0       0       0       0       0
 20838 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20839 ;;      Totals:         0       7       0       0       0       0       0       0       0
 20840 ;;Total ram usage:        7 bytes
 20841 ;; Hardware stack levels used:    1
 20842 ;; Hardware stack levels required when called:    7
 20843 ;; This function calls:
 20844 ;;		_enc424j600_readControlRegisterUnbanked
 20845 ;; This function is called by:
 20846 ;;		_ethernetController_init
 20847 ;;		_main
 20848 ;; This function uses a non-reentrant model
 20849 ;;
 20850                           
 20851                           	psect	text89
 20852  0044E2                     __ptext89:
 20853                           	opt stack 0
 20854  0044E2                     _ethernetController_checkDeviceId:
 20855                           	opt stack 22
 20856                           
 20857                           ;ENC424J600.c: 133: error_t err;
 20858                           ;ENC424J600.c: 134: err.module = ERROR_MODULE_ETHERNET_CONTROLLER;
 20859                           
 20860                           ;incstack = 0
 20861  0044E2  0E01               	movlw	1
 20862  0044E4  0100               	movlb	0	; () banked
 20863  0044E6  6F72               	movwf	ethernetController_checkDeviceId@err& (0+255),b
 20864                           
 20865                           ;ENC424J600.c: 135: err.code = (uint16_t)0;
 20866  0044E8  0E00               	movlw	0
 20867  0044EA  6F74               	movwf	(ethernetController_checkDeviceId@err+2)& (0+255),b
 20868  0044EC  0E00               	movlw	0
 20869  0044EE  6F73               	movwf	(ethernetController_checkDeviceId@err+1)& (0+255),b
 20870                           
 20871                           ;ENC424J600.c: 136: uint8_t data = 0;
 20872  0044F0  0E00               	movlw	0
 20873  0044F2  6F71               	movwf	ethernetController_checkDeviceId@data& (0+255),b
 20874                           
 20875                           ; BSR set to: 0
 20876                           ;ENC424J600.c: 137: enc424j600_readControlRegisterUnbanked(0x14 + 0x60, &data);
 20877  0044F4  0E71               	movlw	low ethernetController_checkDeviceId@data
 20878  0044F6  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 20879  0044F8  0E00               	movlw	high ethernetController_checkDeviceId@data
 20880  0044FA  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 20881  0044FC  0E74               	movlw	116
 20882  0044FE  EC15  F024         	call	_enc424j600_readControlRegisterUnbanked
 20883                           
 20884                           ;ENC424J600.c: 138: if (((data >> 5)&0x07) == 0b001)
 20885  004502  0100               	movlb	0	; () banked
 20886  004504  3971               	swapf	ethernetController_checkDeviceId@data& (0+255),w,b
 20887  004506  42E8               	rrncf	wreg,f,c
 20888  004508  0B07               	andlw	7
 20889  00450A  0B07               	andlw	7
 20890  00450C  06E8               	decf	wreg,f,c
 20891  00450E  A4D8               	btfss	status,2,c
 20892  004510  D004               	goto	l92
 20893                           
 20894                           ; BSR set to: 0
 20895                           ;ENC424J600.c: 139: err.code = (uint16_t)0;
 20896  004512  0E00               	movlw	0
 20897  004514  6F74               	movwf	(ethernetController_checkDeviceId@err+2)& (0+255),b
 20898  004516  0E00               	movlw	0
 20899  004518  D003               	goto	L9
 20900  00451A                     l92:
 20901                           
 20902                           ; BSR set to: 0
 20903                           ;ENC424J600.c: 140: else
 20904                           ;ENC424J600.c: 141: err.code = ERROR_ETHERNET_CONTROLLER_UNKNOWN_DEVICE_ID;
 20905                           
 20906                           ; BSR set to: 0
 20907  00451A  0E01               	movlw	1
 20908  00451C  6F74               	movwf	(ethernetController_checkDeviceId@err+2)& (0+255),b
 20909  00451E  0E2D               	movlw	45
 20910  004520                     L9:
 20911  004520  6F73               	movwf	(ethernetController_checkDeviceId@err+1)& (0+255),b
 20912                           
 20913                           ; BSR set to: 0
 20914                           ;ENC424J600.c: 142: return err;
 20915                           
 20916                           ; BSR set to: 0
 20917  004522  C072  F06E         	movff	ethernetController_checkDeviceId@err,?_ethernetController_checkDeviceId
 20918  004526  C073  F06F         	movff	ethernetController_checkDeviceId@err+1,?_ethernetController_checkDeviceId+1
 20919  00452A  C074  F070         	movff	ethernetController_checkDeviceId@err+2,?_ethernetController_checkDeviceId+2
 20920  00452E  0012               	return	
 20921  004530                     __end_of_ethernetController_checkDeviceId:
 20922                           	opt stack 0
 20923                           tblptru	equ	0xFF8
 20924                           tblptrh	equ	0xFF7
 20925                           tblptrl	equ	0xFF6
 20926                           tablat	equ	0xFF5
 20927                           prodh	equ	0xFF4
 20928                           prodl	equ	0xFF3
 20929                           intcon	equ	0xFF2
 20930                           intcon3	equ	0xFF0
 20931                           indf0	equ	0xFEF
 20932                           postinc0	equ	0xFEE
 20933                           plusw0	equ	0xFEB
 20934                           fsr0h	equ	0xFEA
 20935                           fsr0l	equ	0xFE9
 20936                           wreg	equ	0xFE8
 20937                           indf1	equ	0xFE7
 20938                           postinc1	equ	0xFE6
 20939                           postdec1	equ	0xFE5
 20940                           plusw1	equ	0xFE3
 20941                           fsr1h	equ	0xFE2
 20942                           fsr1l	equ	0xFE1
 20943                           indf2	equ	0xFDF
 20944                           postinc2	equ	0xFDE
 20945                           postdec2	equ	0xFDD
 20946                           plusw2	equ	0xFDB
 20947                           fsr2h	equ	0xFDA
 20948                           fsr2l	equ	0xFD9
 20949                           status	equ	0xFD8
 20950                           
 20951 ;; *************** function _enc424j600_setRXTailPointer *****************
 20952 ;; Defined at:
 20953 ;;		line 649 in file "src/enc424j600/ENC424J600.c"
 20954 ;; Parameters:    Size  Location     Type
 20955 ;;  addr            2   14[BANK0 ] unsigned int 
 20956 ;; Auto vars:     Size  Location     Type
 20957 ;;  highByte        1   17[BANK0 ] unsigned char 
 20958 ;;  lowByte         1   16[BANK0 ] unsigned char 
 20959 ;; Return value:  Size  Location     Type
 20960 ;;                  1    wreg      void 
 20961 ;; Registers used:
 20962 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20963 ;; Tracked objects:
 20964 ;;		On entry : 0/0
 20965 ;;		On exit  : 0/0
 20966 ;;		Unchanged: 0/0
 20967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20968 ;;      Params:         0       2       0       0       0       0       0       0       0
 20969 ;;      Locals:         0       2       0       0       0       0       0       0       0
 20970 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20971 ;;      Totals:         0       4       0       0       0       0       0       0       0
 20972 ;;Total ram usage:        4 bytes
 20973 ;; Hardware stack levels used:    1
 20974 ;; Hardware stack levels required when called:    7
 20975 ;; This function calls:
 20976 ;;		_enc424j600_writeControlRegisterUnbanked
 20977 ;; This function is called by:
 20978 ;;		_ethernetController_init
 20979 ;;		_ethernetController_dropPacket
 20980 ;; This function uses a non-reentrant model
 20981 ;;
 20982                           
 20983                           	psect	text90
 20984  004974                     __ptext90:
 20985                           	opt stack 0
 20986  004974                     _enc424j600_setRXTailPointer:
 20987                           	opt stack 19
 20988                           
 20989                           ;ENC424J600.c: 650: uint8_t lowByte = addr & 0x00ff;
 20990                           
 20991                           ; BSR set to: 0
 20992                           ;incstack = 0
 20993  004974  C06E  F070         	movff	enc424j600_setRXTailPointer@addr,enc424j600_setRXTailPointer@lowByte
 20994                           
 20995                           ;ENC424J600.c: 651: uint8_t highByte = (addr >> 8) & 0xff;
 20996  004978  0100               	movlb	0	; () banked
 20997  00497A  516F               	movf	(enc424j600_setRXTailPointer@addr+1)& (0+255),w,b
 20998  00497C  6F71               	movwf	enc424j600_setRXTailPointer@highByte& (0+255),b
 20999                           
 21000                           ; BSR set to: 0
 21001                           ;ENC424J600.c: 652: enc424j600_writeControlRegisterUnbanked(0x06 + 0x00, &lowByte);
 21002  00497E  0E70               	movlw	low enc424j600_setRXTailPointer@lowByte
 21003  004980  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 21004  004982  0E00               	movlw	high enc424j600_setRXTailPointer@lowByte
 21005  004984  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 21006  004986  0E06               	movlw	6
 21007  004988  ECFA  F023         	call	_enc424j600_writeControlRegisterUnbanked
 21008                           
 21009                           ;ENC424J600.c: 653: enc424j600_writeControlRegisterUnbanked(0x07 + 0x00, &highByte);
 21010  00498C  0E71               	movlw	low enc424j600_setRXTailPointer@highByte
 21011  00498E  0100               	movlb	0	; () banked
 21012  004990  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 21013  004992  0E00               	movlw	high enc424j600_setRXTailPointer@highByte
 21014  004994  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 21015  004996  0E07               	movlw	7
 21016  004998  ECFA  F023         	call	_enc424j600_writeControlRegisterUnbanked
 21017  00499C  0012               	return		;funcret
 21018  00499E                     __end_of_enc424j600_setRXTailPointer:
 21019                           	opt stack 0
 21020                           tblptru	equ	0xFF8
 21021                           tblptrh	equ	0xFF7
 21022                           tblptrl	equ	0xFF6
 21023                           tablat	equ	0xFF5
 21024                           prodh	equ	0xFF4
 21025                           prodl	equ	0xFF3
 21026                           intcon	equ	0xFF2
 21027                           intcon3	equ	0xFF0
 21028                           indf0	equ	0xFEF
 21029                           postinc0	equ	0xFEE
 21030                           plusw0	equ	0xFEB
 21031                           fsr0h	equ	0xFEA
 21032                           fsr0l	equ	0xFE9
 21033                           wreg	equ	0xFE8
 21034                           indf1	equ	0xFE7
 21035                           postinc1	equ	0xFE6
 21036                           postdec1	equ	0xFE5
 21037                           plusw1	equ	0xFE3
 21038                           fsr1h	equ	0xFE2
 21039                           fsr1l	equ	0xFE1
 21040                           indf2	equ	0xFDF
 21041                           postinc2	equ	0xFDE
 21042                           postdec2	equ	0xFDD
 21043                           plusw2	equ	0xFDB
 21044                           fsr2h	equ	0xFDA
 21045                           fsr2l	equ	0xFD9
 21046                           status	equ	0xFD8
 21047                           
 21048 ;; *************** function _enc424j600_setRXBufferStartAddress *****************
 21049 ;; Defined at:
 21050 ;;		line 642 in file "src/enc424j600/ENC424J600.c"
 21051 ;; Parameters:    Size  Location     Type
 21052 ;;  addr            2   14[BANK0 ] unsigned int 
 21053 ;; Auto vars:     Size  Location     Type
 21054 ;;  highByte        1   17[BANK0 ] unsigned char 
 21055 ;;  lowByte         1   16[BANK0 ] unsigned char 
 21056 ;; Return value:  Size  Location     Type
 21057 ;;                  1    wreg      void 
 21058 ;; Registers used:
 21059 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21060 ;; Tracked objects:
 21061 ;;		On entry : 0/0
 21062 ;;		On exit  : 0/0
 21063 ;;		Unchanged: 0/0
 21064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21065 ;;      Params:         0       2       0       0       0       0       0       0       0
 21066 ;;      Locals:         0       2       0       0       0       0       0       0       0
 21067 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21068 ;;      Totals:         0       4       0       0       0       0       0       0       0
 21069 ;;Total ram usage:        4 bytes
 21070 ;; Hardware stack levels used:    1
 21071 ;; Hardware stack levels required when called:    7
 21072 ;; This function calls:
 21073 ;;		_enc424j600_writeControlRegisterUnbanked
 21074 ;; This function is called by:
 21075 ;;		_ethernetController_init
 21076 ;; This function uses a non-reentrant model
 21077 ;;
 21078                           
 21079                           	psect	text91
 21080  00499E                     __ptext91:
 21081                           	opt stack 0
 21082  00499E                     _enc424j600_setRXBufferStartAddress:
 21083                           	opt stack 22
 21084                           
 21085                           ;ENC424J600.c: 643: uint8_t lowByte = addr & 0x00ff;
 21086                           
 21087                           ;incstack = 0
 21088  00499E  C06E  F070         	movff	enc424j600_setRXBufferStartAddress@addr,enc424j600_setRXBufferStartAddress@lowByt
      +                          e
 21089                           
 21090                           ;ENC424J600.c: 644: uint8_t highByte = (addr >> 8) & 0xff;
 21091  0049A2  0100               	movlb	0	; () banked
 21092  0049A4  516F               	movf	(enc424j600_setRXBufferStartAddress@addr+1)& (0+255),w,b
 21093  0049A6  6F71               	movwf	enc424j600_setRXBufferStartAddress@highByte& (0+255),b
 21094                           
 21095                           ; BSR set to: 0
 21096                           ;ENC424J600.c: 645: enc424j600_writeControlRegisterUnbanked(0x04 + 0x00, &lowByte);
 21097  0049A8  0E70               	movlw	low enc424j600_setRXBufferStartAddress@lowByte
 21098  0049AA  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 21099  0049AC  0E00               	movlw	high enc424j600_setRXBufferStartAddress@lowByte
 21100  0049AE  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 21101  0049B0  0E04               	movlw	4
 21102  0049B2  ECFA  F023         	call	_enc424j600_writeControlRegisterUnbanked
 21103                           
 21104                           ;ENC424J600.c: 646: enc424j600_writeControlRegisterUnbanked(0x05 + 0x00, &highByte);
 21105  0049B6  0E71               	movlw	low enc424j600_setRXBufferStartAddress@highByte
 21106  0049B8  0100               	movlb	0	; () banked
 21107  0049BA  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 21108  0049BC  0E00               	movlw	high enc424j600_setRXBufferStartAddress@highByte
 21109  0049BE  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 21110  0049C0  0E05               	movlw	5
 21111  0049C2  ECFA  F023         	call	_enc424j600_writeControlRegisterUnbanked
 21112  0049C6  0012               	return		;funcret
 21113  0049C8                     __end_of_enc424j600_setRXBufferStartAddress:
 21114                           	opt stack 0
 21115                           tblptru	equ	0xFF8
 21116                           tblptrh	equ	0xFF7
 21117                           tblptrl	equ	0xFF6
 21118                           tablat	equ	0xFF5
 21119                           prodh	equ	0xFF4
 21120                           prodl	equ	0xFF3
 21121                           intcon	equ	0xFF2
 21122                           intcon3	equ	0xFF0
 21123                           indf0	equ	0xFEF
 21124                           postinc0	equ	0xFEE
 21125                           plusw0	equ	0xFEB
 21126                           fsr0h	equ	0xFEA
 21127                           fsr0l	equ	0xFE9
 21128                           wreg	equ	0xFE8
 21129                           indf1	equ	0xFE7
 21130                           postinc1	equ	0xFE6
 21131                           postdec1	equ	0xFE5
 21132                           plusw1	equ	0xFE3
 21133                           fsr1h	equ	0xFE2
 21134                           fsr1l	equ	0xFE1
 21135                           indf2	equ	0xFDF
 21136                           postinc2	equ	0xFDE
 21137                           postdec2	equ	0xFDD
 21138                           plusw2	equ	0xFDB
 21139                           fsr2h	equ	0xFDA
 21140                           fsr2l	equ	0xFD9
 21141                           status	equ	0xFD8
 21142                           
 21143 ;; *************** function _enc424j600_setNextPacketPointer *****************
 21144 ;; Defined at:
 21145 ;;		line 586 in file "src/enc424j600/ENC424J600.c"
 21146 ;; Parameters:    Size  Location     Type
 21147 ;;  ptr             2    0[BANK0 ] unsigned int 
 21148 ;; Auto vars:     Size  Location     Type
 21149 ;;		None
 21150 ;; Return value:  Size  Location     Type
 21151 ;;                  1    wreg      void 
 21152 ;; Registers used:
 21153 ;;		None
 21154 ;; Tracked objects:
 21155 ;;		On entry : 0/0
 21156 ;;		On exit  : 0/0
 21157 ;;		Unchanged: 0/0
 21158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21159 ;;      Params:         0       2       0       0       0       0       0       0       0
 21160 ;;      Locals:         0       0       0       0       0       0       0       0       0
 21161 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21162 ;;      Totals:         0       2       0       0       0       0       0       0       0
 21163 ;;Total ram usage:        2 bytes
 21164 ;; Hardware stack levels used:    1
 21165 ;; Hardware stack levels required when called:    4
 21166 ;; This function calls:
 21167 ;;		Nothing
 21168 ;; This function is called by:
 21169 ;;		_ethernetController_init
 21170 ;;		_ethernetController_updateNextPacketPointer
 21171 ;; This function uses a non-reentrant model
 21172 ;;
 21173                           
 21174                           	psect	text92
 21175  004C56                     __ptext92:
 21176                           	opt stack 0
 21177  004C56                     _enc424j600_setNextPacketPointer:
 21178                           	opt stack 23
 21179                           
 21180                           ;ENC424J600.c: 587: nextPacketPointer = ptr;
 21181                           
 21182                           ;incstack = 0
 21183  004C56  C060  F042         	movff	enc424j600_setNextPacketPointer@ptr,_nextPacketPointer
 21184  004C5A  C061  F043         	movff	enc424j600_setNextPacketPointer@ptr+1,_nextPacketPointer+1
 21185  004C5E  0012               	return		;funcret
 21186  004C60                     __end_of_enc424j600_setNextPacketPointer:
 21187                           	opt stack 0
 21188                           tblptru	equ	0xFF8
 21189                           tblptrh	equ	0xFF7
 21190                           tblptrl	equ	0xFF6
 21191                           tablat	equ	0xFF5
 21192                           prodh	equ	0xFF4
 21193                           prodl	equ	0xFF3
 21194                           intcon	equ	0xFF2
 21195                           intcon3	equ	0xFF0
 21196                           indf0	equ	0xFEF
 21197                           postinc0	equ	0xFEE
 21198                           plusw0	equ	0xFEB
 21199                           fsr0h	equ	0xFEA
 21200                           fsr0l	equ	0xFE9
 21201                           wreg	equ	0xFE8
 21202                           indf1	equ	0xFE7
 21203                           postinc1	equ	0xFE6
 21204                           postdec1	equ	0xFE5
 21205                           plusw1	equ	0xFE3
 21206                           fsr1h	equ	0xFE2
 21207                           fsr1l	equ	0xFE1
 21208                           indf2	equ	0xFDF
 21209                           postinc2	equ	0xFDE
 21210                           postdec2	equ	0xFDD
 21211                           plusw2	equ	0xFDB
 21212                           fsr2h	equ	0xFDA
 21213                           fsr2l	equ	0xFD9
 21214                           status	equ	0xFD8
 21215                           
 21216 ;; *************** function _enc424j600_enableReception *****************
 21217 ;; Defined at:
 21218 ;;		line 672 in file "src/enc424j600/ENC424J600.c"
 21219 ;; Parameters:    Size  Location     Type
 21220 ;;		None
 21221 ;; Auto vars:     Size  Location     Type
 21222 ;;		None
 21223 ;; Return value:  Size  Location     Type
 21224 ;;                  1    wreg      void 
 21225 ;; Registers used:
 21226 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21227 ;; Tracked objects:
 21228 ;;		On entry : 0/0
 21229 ;;		On exit  : 0/0
 21230 ;;		Unchanged: 0/0
 21231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21232 ;;      Params:         0       0       0       0       0       0       0       0       0
 21233 ;;      Locals:         0       0       0       0       0       0       0       0       0
 21234 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21235 ;;      Totals:         0       0       0       0       0       0       0       0       0
 21236 ;;Total ram usage:        0 bytes
 21237 ;; Hardware stack levels used:    1
 21238 ;; Hardware stack levels required when called:    7
 21239 ;; This function calls:
 21240 ;;		_enc424j600_writeSingleByte
 21241 ;; This function is called by:
 21242 ;;		_ethernetController_init
 21243 ;;		_ethernetController_enableReception
 21244 ;; This function uses a non-reentrant model
 21245 ;;
 21246                           
 21247                           	psect	text93
 21248  004C60                     __ptext93:
 21249                           	opt stack 0
 21250  004C60                     _enc424j600_enableReception:
 21251                           	opt stack 22
 21252                           
 21253                           ;ENC424J600.c: 673: enc424j600_writeSingleByte(0b11101000);
 21254                           
 21255                           ;incstack = 0
 21256  004C60  0EE8               	movlw	232
 21257  004C62  ECC3  F025         	call	_enc424j600_writeSingleByte
 21258  004C66  0012               	return		;funcret
 21259  004C68                     __end_of_enc424j600_enableReception:
 21260                           	opt stack 0
 21261                           tblptru	equ	0xFF8
 21262                           tblptrh	equ	0xFF7
 21263                           tblptrl	equ	0xFF6
 21264                           tablat	equ	0xFF5
 21265                           prodh	equ	0xFF4
 21266                           prodl	equ	0xFF3
 21267                           intcon	equ	0xFF2
 21268                           intcon3	equ	0xFF0
 21269                           indf0	equ	0xFEF
 21270                           postinc0	equ	0xFEE
 21271                           plusw0	equ	0xFEB
 21272                           fsr0h	equ	0xFEA
 21273                           fsr0l	equ	0xFE9
 21274                           wreg	equ	0xFE8
 21275                           indf1	equ	0xFE7
 21276                           postinc1	equ	0xFE6
 21277                           postdec1	equ	0xFE5
 21278                           plusw1	equ	0xFE3
 21279                           fsr1h	equ	0xFE2
 21280                           fsr1l	equ	0xFE1
 21281                           indf2	equ	0xFDF
 21282                           postinc2	equ	0xFDE
 21283                           postdec2	equ	0xFDD
 21284                           plusw2	equ	0xFDB
 21285                           fsr2h	equ	0xFDA
 21286                           fsr2l	equ	0xFD9
 21287                           status	equ	0xFD8
 21288                           
 21289 ;; *************** function _enc424j600_writeSingleByte *****************
 21290 ;; Defined at:
 21291 ;;		line 512 in file "src/enc424j600/ENC424J600.c"
 21292 ;; Parameters:    Size  Location     Type
 21293 ;;  opcode          1    wreg     unsigned char 
 21294 ;; Auto vars:     Size  Location     Type
 21295 ;;  opcode          1   10[BANK0 ] unsigned char 
 21296 ;; Return value:  Size  Location     Type
 21297 ;;                  1    wreg      void 
 21298 ;; Registers used:
 21299 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21300 ;; Tracked objects:
 21301 ;;		On entry : 0/0
 21302 ;;		On exit  : 0/0
 21303 ;;		Unchanged: 0/0
 21304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21305 ;;      Params:         0       0       0       0       0       0       0       0       0
 21306 ;;      Locals:         0       1       0       0       0       0       0       0       0
 21307 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21308 ;;      Totals:         0       1       0       0       0       0       0       0       0
 21309 ;;Total ram usage:        1 bytes
 21310 ;; Hardware stack levels used:    1
 21311 ;; Hardware stack levels required when called:    6
 21312 ;; This function calls:
 21313 ;;		_enc424j600_writeSPI
 21314 ;; This function is called by:
 21315 ;;		_ethernetController_softReset
 21316 ;;		_ethernetController_sendPacket
 21317 ;;		_ethernetController_dropPacket
 21318 ;;		_enc424j600_enableReception
 21319 ;;		_enc424j600_disableReception
 21320 ;; This function uses a non-reentrant model
 21321 ;;
 21322                           
 21323                           	psect	text94
 21324  004B86                     __ptext94:
 21325                           	opt stack 0
 21326  004B86                     _enc424j600_writeSingleByte:
 21327                           	opt stack 20
 21328                           
 21329                           ;incstack = 0
 21330                           ;enc424j600_writeSingleByte@opcode stored from wreg
 21331  004B86  0100               	movlb	0	; () banked
 21332  004B88  6F6A               	movwf	enc424j600_writeSingleByte@opcode& (0+255),b
 21333                           
 21334                           ;ENC424J600.c: 513: PORTBbits.RB4=0;
 21335  004B8A  9881               	bcf	3969,4,c	;volatile
 21336                           
 21337                           ;ENC424J600.c: 514: enc424j600_writeSPI(&opcode);
 21338  004B8C  0E6A               	movlw	low enc424j600_writeSingleByte@opcode
 21339  004B8E  0100               	movlb	0	; () banked
 21340  004B90  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 21341  004B92  0E00               	movlw	high enc424j600_writeSingleByte@opcode
 21342  004B94  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 21343  004B96  ECC2  F020         	call	_enc424j600_writeSPI	;wreg free
 21344                           
 21345                           ;ENC424J600.c: 515: PORTBbits.RB4=1;
 21346  004B9A  8881               	bsf	3969,4,c	;volatile
 21347  004B9C  0012               	return		;funcret
 21348  004B9E                     __end_of_enc424j600_writeSingleByte:
 21349                           	opt stack 0
 21350                           tblptru	equ	0xFF8
 21351                           tblptrh	equ	0xFF7
 21352                           tblptrl	equ	0xFF6
 21353                           tablat	equ	0xFF5
 21354                           prodh	equ	0xFF4
 21355                           prodl	equ	0xFF3
 21356                           intcon	equ	0xFF2
 21357                           intcon3	equ	0xFF0
 21358                           indf0	equ	0xFEF
 21359                           postinc0	equ	0xFEE
 21360                           plusw0	equ	0xFEB
 21361                           fsr0h	equ	0xFEA
 21362                           fsr0l	equ	0xFE9
 21363                           wreg	equ	0xFE8
 21364                           indf1	equ	0xFE7
 21365                           postinc1	equ	0xFE6
 21366                           postdec1	equ	0xFE5
 21367                           plusw1	equ	0xFE3
 21368                           fsr1h	equ	0xFE2
 21369                           fsr1l	equ	0xFE1
 21370                           indf2	equ	0xFDF
 21371                           postinc2	equ	0xFDE
 21372                           postdec2	equ	0xFDD
 21373                           plusw2	equ	0xFDB
 21374                           fsr2h	equ	0xFDA
 21375                           fsr2l	equ	0xFD9
 21376                           status	equ	0xFD8
 21377                           
 21378 ;; *************** function _enc424j600_enableAutoMACInsertion *****************
 21379 ;; Defined at:
 21380 ;;		line 658 in file "src/enc424j600/ENC424J600.c"
 21381 ;; Parameters:    Size  Location     Type
 21382 ;;		None
 21383 ;; Auto vars:     Size  Location     Type
 21384 ;;  temp            1   14[BANK0 ] unsigned char 
 21385 ;; Return value:  Size  Location     Type
 21386 ;;                  1    wreg      void 
 21387 ;; Registers used:
 21388 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21389 ;; Tracked objects:
 21390 ;;		On entry : 0/0
 21391 ;;		On exit  : 0/0
 21392 ;;		Unchanged: 0/0
 21393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21394 ;;      Params:         0       0       0       0       0       0       0       0       0
 21395 ;;      Locals:         0       1       0       0       0       0       0       0       0
 21396 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21397 ;;      Totals:         0       1       0       0       0       0       0       0       0
 21398 ;;Total ram usage:        1 bytes
 21399 ;; Hardware stack levels used:    1
 21400 ;; Hardware stack levels required when called:    7
 21401 ;; This function calls:
 21402 ;;		_enc424j600_readControlRegisterUnbanked
 21403 ;;		_enc424j600_writeControlRegisterUnbanked
 21404 ;; This function is called by:
 21405 ;;		_ethernetController_init
 21406 ;; This function uses a non-reentrant model
 21407 ;;
 21408                           
 21409                           	psect	text95
 21410  004A18                     __ptext95:
 21411                           	opt stack 0
 21412  004A18                     _enc424j600_enableAutoMACInsertion:
 21413                           	opt stack 22
 21414                           
 21415                           ;ENC424J600.c: 659: uint8_t temp = 0;
 21416                           
 21417                           ;incstack = 0
 21418  004A18  0E00               	movlw	0
 21419  004A1A  0100               	movlb	0	; () banked
 21420  004A1C  6F6E               	movwf	enc424j600_enableAutoMACInsertion@temp& (0+255),b
 21421                           
 21422                           ; BSR set to: 0
 21423                           ;ENC424J600.c: 660: enc424j600_readControlRegisterUnbanked(0x0F + 0x60, &temp);
 21424  004A1E  0E6E               	movlw	low enc424j600_enableAutoMACInsertion@temp
 21425  004A20  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 21426  004A22  0E00               	movlw	high enc424j600_enableAutoMACInsertion@temp
 21427  004A24  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 21428  004A26  0E6F               	movlw	111
 21429  004A28  EC15  F024         	call	_enc424j600_readControlRegisterUnbanked
 21430                           
 21431                           ;ENC424J600.c: 661: temp |= (1 << 5);
 21432  004A2C  0100               	movlb	0	; () banked
 21433  004A2E  8B6E               	bsf	enc424j600_enableAutoMACInsertion@temp& (0+255),5,b
 21434                           
 21435                           ; BSR set to: 0
 21436                           ;ENC424J600.c: 662: enc424j600_writeControlRegisterUnbanked(0x0F + 0x60, &temp);
 21437  004A30  0E6E               	movlw	low enc424j600_enableAutoMACInsertion@temp
 21438  004A32  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 21439  004A34  0E00               	movlw	high enc424j600_enableAutoMACInsertion@temp
 21440  004A36  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 21441  004A38  0E6F               	movlw	111
 21442  004A3A  ECFA  F023         	call	_enc424j600_writeControlRegisterUnbanked
 21443  004A3E  0012               	return		;funcret
 21444  004A40                     __end_of_enc424j600_enableAutoMACInsertion:
 21445                           	opt stack 0
 21446                           tblptru	equ	0xFF8
 21447                           tblptrh	equ	0xFF7
 21448                           tblptrl	equ	0xFF6
 21449                           tablat	equ	0xFF5
 21450                           prodh	equ	0xFF4
 21451                           prodl	equ	0xFF3
 21452                           intcon	equ	0xFF2
 21453                           intcon3	equ	0xFF0
 21454                           indf0	equ	0xFEF
 21455                           postinc0	equ	0xFEE
 21456                           plusw0	equ	0xFEB
 21457                           fsr0h	equ	0xFEA
 21458                           fsr0l	equ	0xFE9
 21459                           wreg	equ	0xFE8
 21460                           indf1	equ	0xFE7
 21461                           postinc1	equ	0xFE6
 21462                           postdec1	equ	0xFE5
 21463                           plusw1	equ	0xFE3
 21464                           fsr1h	equ	0xFE2
 21465                           fsr1l	equ	0xFE1
 21466                           indf2	equ	0xFDF
 21467                           postinc2	equ	0xFDE
 21468                           postdec2	equ	0xFDD
 21469                           plusw2	equ	0xFDB
 21470                           fsr2h	equ	0xFDA
 21471                           fsr2l	equ	0xFD9
 21472                           status	equ	0xFD8
 21473                           
 21474 ;; *************** function _enc424j600_writeControlRegisterUnbanked *****************
 21475 ;; Defined at:
 21476 ;;		line 518 in file "src/enc424j600/ENC424J600.c"
 21477 ;; Parameters:    Size  Location     Type
 21478 ;;  addr            1    wreg     unsigned char 
 21479 ;;  data            2   10[BANK0 ] PTR unsigned char 
 21480 ;;		 -> enc424j600_clearInterruptFlag@temp(1), enc424j600_disable@temp(1), enc424j600_enable@temp(1), enc424j600_disable
      +AutoMACInsertion@temp(1), 
 21481 ;;		 -> enc424j600_enableAutoMACInsertion@temp(1), enc424j600_setRXTailPointer@highByte(1), enc424j600_setRXTailPointer@
      +lowByte(1), enc424j600_setRXBufferStartAddress@highByte(1), 
 21482 ;;		 -> enc424j600_setRXBufferStartAddress@lowByte(1), enc424j600_setTXStartAddress@highByte(1), enc424j600_setTXStartAd
      +dress@lowByte(1), enc424j600_setTXLength@highByte(1), 
 21483 ;;		 -> enc424j600_setTXLength@lowByte(1), enc424j600_readPHYRegister@temp(1), enc424j600_readPHYRegister@unusedBits(1),
      + enc424j600_readPHYRegister@PHYaddress(1), 
 21484 ;;		 -> ethernetController_setLEDConfig@data(1), mac.address(6), ethernetController_setMacAddress@mac(6), ethernetContro
      +ller_softReset@dataToSend(2), 
 21485 ;; Auto vars:     Size  Location     Type
 21486 ;;  addr            1   12[BANK0 ] unsigned char 
 21487 ;;  opcode          1   13[BANK0 ] unsigned char 
 21488 ;; Return value:  Size  Location     Type
 21489 ;;                  1    wreg      void 
 21490 ;; Registers used:
 21491 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21492 ;; Tracked objects:
 21493 ;;		On entry : 0/0
 21494 ;;		On exit  : 0/0
 21495 ;;		Unchanged: 0/0
 21496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21497 ;;      Params:         0       2       0       0       0       0       0       0       0
 21498 ;;      Locals:         0       2       0       0       0       0       0       0       0
 21499 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21500 ;;      Totals:         0       4       0       0       0       0       0       0       0
 21501 ;;Total ram usage:        4 bytes
 21502 ;; Hardware stack levels used:    1
 21503 ;; Hardware stack levels required when called:    6
 21504 ;; This function calls:
 21505 ;;		_enc424j600_writeSPI
 21506 ;; This function is called by:
 21507 ;;		_ethernetController_softReset
 21508 ;;		_ethernetController_setLEDConfig
 21509 ;;		_enc424j600_readPHYRegister
 21510 ;;		_enc424j600_setTXLength
 21511 ;;		_enc424j600_setTXStartAddress
 21512 ;;		_enc424j600_setRXBufferStartAddress
 21513 ;;		_enc424j600_setRXTailPointer
 21514 ;;		_enc424j600_enableAutoMACInsertion
 21515 ;;		_enc424j600_clearInterruptFlag
 21516 ;;		_ethernetController_setMacAddress
 21517 ;;		_enc424j600_disableAutoMACInsertion
 21518 ;;		_enc424j600_enable
 21519 ;;		_enc424j600_disable
 21520 ;; This function uses a non-reentrant model
 21521 ;;
 21522                           
 21523                           	psect	text96
 21524  0047F4                     __ptext96:
 21525                           	opt stack 0
 21526  0047F4                     _enc424j600_writeControlRegisterUnbanked:
 21527                           	opt stack 19
 21528                           
 21529                           ;incstack = 0
 21530                           ;enc424j600_writeControlRegisterUnbanked@addr stored from wreg
 21531  0047F4  0100               	movlb	0	; () banked
 21532  0047F6  6F6C               	movwf	enc424j600_writeControlRegisterUnbanked@addr& (0+255),b
 21533                           
 21534                           ;ENC424J600.c: 519: uint8_t opcode = 0x22;
 21535  0047F8  0E22               	movlw	34
 21536  0047FA  0100               	movlb	0	; () banked
 21537  0047FC  6F6D               	movwf	enc424j600_writeControlRegisterUnbanked@opcode& (0+255),b
 21538                           
 21539                           ; BSR set to: 0
 21540                           ;ENC424J600.c: 520: PORTBbits.RB4=0;
 21541  0047FE  9881               	bcf	3969,4,c	;volatile
 21542                           
 21543                           ; BSR set to: 0
 21544                           ;ENC424J600.c: 521: enc424j600_writeSPI(&opcode);
 21545  004800  0E6D               	movlw	low enc424j600_writeControlRegisterUnbanked@opcode
 21546  004802  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 21547  004804  0E00               	movlw	high enc424j600_writeControlRegisterUnbanked@opcode
 21548  004806  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 21549  004808  ECC2  F020         	call	_enc424j600_writeSPI	;wreg free
 21550                           
 21551                           ;ENC424J600.c: 522: enc424j600_writeSPI(&addr);
 21552  00480C  0E6C               	movlw	low enc424j600_writeControlRegisterUnbanked@addr
 21553  00480E  0100               	movlb	0	; () banked
 21554  004810  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 21555  004812  0E00               	movlw	high enc424j600_writeControlRegisterUnbanked@addr
 21556  004814  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 21557  004816  ECC2  F020         	call	_enc424j600_writeSPI	;wreg free
 21558                           
 21559                           ;ENC424J600.c: 523: enc424j600_writeSPI(data);
 21560  00481A  C06A  F060         	movff	enc424j600_writeControlRegisterUnbanked@data,enc424j600_writeSPI@data
 21561  00481E  C06B  F061         	movff	enc424j600_writeControlRegisterUnbanked@data+1,enc424j600_writeSPI@data+1
 21562  004822  ECC2  F020         	call	_enc424j600_writeSPI	;wreg free
 21563                           
 21564                           ;ENC424J600.c: 524: PORTBbits.RB4=1;
 21565  004826  8881               	bsf	3969,4,c	;volatile
 21566  004828  0012               	return		;funcret
 21567  00482A                     __end_of_enc424j600_writeControlRegisterUnbanked:
 21568                           	opt stack 0
 21569                           tblptru	equ	0xFF8
 21570                           tblptrh	equ	0xFF7
 21571                           tblptrl	equ	0xFF6
 21572                           tablat	equ	0xFF5
 21573                           prodh	equ	0xFF4
 21574                           prodl	equ	0xFF3
 21575                           intcon	equ	0xFF2
 21576                           intcon3	equ	0xFF0
 21577                           indf0	equ	0xFEF
 21578                           postinc0	equ	0xFEE
 21579                           plusw0	equ	0xFEB
 21580                           fsr0h	equ	0xFEA
 21581                           fsr0l	equ	0xFE9
 21582                           wreg	equ	0xFE8
 21583                           indf1	equ	0xFE7
 21584                           postinc1	equ	0xFE6
 21585                           postdec1	equ	0xFE5
 21586                           plusw1	equ	0xFE3
 21587                           fsr1h	equ	0xFE2
 21588                           fsr1l	equ	0xFE1
 21589                           indf2	equ	0xFDF
 21590                           postinc2	equ	0xFDE
 21591                           postdec2	equ	0xFDD
 21592                           plusw2	equ	0xFDB
 21593                           fsr2h	equ	0xFDA
 21594                           fsr2l	equ	0xFD9
 21595                           status	equ	0xFD8
 21596                           
 21597 ;; *************** function _ethernetController_getDeviceName *****************
 21598 ;; Defined at:
 21599 ;;		line 145 in file "src/enc424j600/ENC424J600.c"
 21600 ;; Parameters:    Size  Location     Type
 21601 ;;		None
 21602 ;; Auto vars:     Size  Location     Type
 21603 ;;  string         11    2[BANK0 ] const unsigned char [11]
 21604 ;; Return value:  Size  Location     Type
 21605 ;;                  2    0[BANK0 ] PTR unsigned char 
 21606 ;; Registers used:
 21607 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 21608 ;; Tracked objects:
 21609 ;;		On entry : 0/0
 21610 ;;		On exit  : 0/0
 21611 ;;		Unchanged: 0/0
 21612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21613 ;;      Params:         0       2       0       0       0       0       0       0       0
 21614 ;;      Locals:         0      11       0       0       0       0       0       0       0
 21615 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21616 ;;      Totals:         0      13       0       0       0       0       0       0       0
 21617 ;;Total ram usage:       13 bytes
 21618 ;; Hardware stack levels used:    1
 21619 ;; Hardware stack levels required when called:    4
 21620 ;; This function calls:
 21621 ;;		Nothing
 21622 ;; This function is called by:
 21623 ;;		_main
 21624 ;; This function uses a non-reentrant model
 21625 ;;
 21626                           
 21627                           	psect	text97
 21628  004AB0                     __ptext97:
 21629                           	opt stack 0
 21630  004AB0                     _ethernetController_getDeviceName:
 21631                           	opt stack 26
 21632                           
 21633                           ;ENC424J600.c: 146: const char string [] = "ENC424J600";
 21634                           
 21635                           ;incstack = 0
 21636  004AB0  0E11               	movlw	low ethernetController_getDeviceName@F5993
 21637  004AB2  6EF6               	movwf	tblptrl,c
 21638  004AB4                     	if	1	;There is more than 1 active tblptr byte
 21639  004AB4  0E7A               	movlw	high ethernetController_getDeviceName@F5993
 21640  004AB6  6EF7               	movwf	tblptrh,c
 21641  004AB8                     	endif
 21642  004AB8                     	if	0	;There are less than 3 active tblptr bytes
 21643  004AB8                     	endif
 21644  004AB8  EE20  F062         	lfsr	2,ethernetController_getDeviceName@string
 21645  004ABC  0E0A               	movlw	10
 21646  004ABE                     u11240:
 21647  004ABE  0009               	tblrd		*+
 21648  004AC0  CFF5 FFDE          	movff	tablat,postinc2
 21649  004AC4  06E8               	decf	wreg,f,c
 21650  004AC6  E2FB               	bc	u11240
 21651                           
 21652                           ;ENC424J600.c: 147: return (char*) string;
 21653  004AC8  0E62               	movlw	low ethernetController_getDeviceName@string
 21654  004ACA  0100               	movlb	0	; () banked
 21655  004ACC  6F60               	movwf	?_ethernetController_getDeviceName& (0+255),b
 21656  004ACE  0E00               	movlw	high ethernetController_getDeviceName@string
 21657  004AD0  6F61               	movwf	(?_ethernetController_getDeviceName+1)& (0+255),b
 21658  004AD2  0012               	return	
 21659  004AD4                     __end_of_ethernetController_getDeviceName:
 21660                           	opt stack 0
 21661                           tblptru	equ	0xFF8
 21662                           tblptrh	equ	0xFF7
 21663                           tblptrl	equ	0xFF6
 21664                           tablat	equ	0xFF5
 21665                           prodh	equ	0xFF4
 21666                           prodl	equ	0xFF3
 21667                           intcon	equ	0xFF2
 21668                           intcon3	equ	0xFF0
 21669                           indf0	equ	0xFEF
 21670                           postinc0	equ	0xFEE
 21671                           plusw0	equ	0xFEB
 21672                           fsr0h	equ	0xFEA
 21673                           fsr0l	equ	0xFE9
 21674                           wreg	equ	0xFE8
 21675                           indf1	equ	0xFE7
 21676                           postinc1	equ	0xFE6
 21677                           postdec1	equ	0xFE5
 21678                           plusw1	equ	0xFE3
 21679                           fsr1h	equ	0xFE2
 21680                           fsr1l	equ	0xFE1
 21681                           indf2	equ	0xFDF
 21682                           postinc2	equ	0xFDE
 21683                           postdec2	equ	0xFDD
 21684                           plusw2	equ	0xFDB
 21685                           fsr2h	equ	0xFDA
 21686                           fsr2l	equ	0xFD9
 21687                           status	equ	0xFD8
 21688                           
 21689 ;; *************** function _ethernetController_getCurrentPacketCount *****************
 21690 ;; Defined at:
 21691 ;;		line 457 in file "src/enc424j600/ENC424J600.c"
 21692 ;; Parameters:    Size  Location     Type
 21693 ;;		None
 21694 ;; Auto vars:     Size  Location     Type
 21695 ;;		None
 21696 ;; Return value:  Size  Location     Type
 21697 ;;                  1    wreg      unsigned char 
 21698 ;; Registers used:
 21699 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21700 ;; Tracked objects:
 21701 ;;		On entry : 0/0
 21702 ;;		On exit  : 0/0
 21703 ;;		Unchanged: 0/0
 21704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21705 ;;      Params:         0       0       0       0       0       0       0       0       0
 21706 ;;      Locals:         0       0       0       0       0       0       0       0       0
 21707 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21708 ;;      Totals:         0       0       0       0       0       0       0       0       0
 21709 ;;Total ram usage:        0 bytes
 21710 ;; Hardware stack levels used:    1
 21711 ;; Hardware stack levels required when called:    8
 21712 ;; This function calls:
 21713 ;;		_enc424j600_getPacketCount
 21714 ;; This function is called by:
 21715 ;;		_main
 21716 ;; This function uses a non-reentrant model
 21717 ;;
 21718                           
 21719                           	psect	text98
 21720  004C6E                     __ptext98:
 21721                           	opt stack 0
 21722  004C6E                     _ethernetController_getCurrentPacketCount:
 21723                           	opt stack 22
 21724                           
 21725                           ;ENC424J600.c: 458: return enc424j600_getPacketCount();
 21726                           
 21727                           ; BSR set to: 0
 21728                           ;incstack = 0
 21729  004C6E  ECB6  F025         	call	_enc424j600_getPacketCount	;wreg free
 21730  004C72  0012               	return	
 21731  004C74                     __end_of_ethernetController_getCurrentPacketCount:
 21732                           	opt stack 0
 21733                           tblptru	equ	0xFF8
 21734                           tblptrh	equ	0xFF7
 21735                           tblptrl	equ	0xFF6
 21736                           tablat	equ	0xFF5
 21737                           prodh	equ	0xFF4
 21738                           prodl	equ	0xFF3
 21739                           intcon	equ	0xFF2
 21740                           intcon3	equ	0xFF0
 21741                           indf0	equ	0xFEF
 21742                           postinc0	equ	0xFEE
 21743                           plusw0	equ	0xFEB
 21744                           fsr0h	equ	0xFEA
 21745                           fsr0l	equ	0xFE9
 21746                           wreg	equ	0xFE8
 21747                           indf1	equ	0xFE7
 21748                           postinc1	equ	0xFE6
 21749                           postdec1	equ	0xFE5
 21750                           plusw1	equ	0xFE3
 21751                           fsr1h	equ	0xFE2
 21752                           fsr1l	equ	0xFE1
 21753                           indf2	equ	0xFDF
 21754                           postinc2	equ	0xFDE
 21755                           postdec2	equ	0xFDD
 21756                           plusw2	equ	0xFDB
 21757                           fsr2h	equ	0xFDA
 21758                           fsr2l	equ	0xFD9
 21759                           status	equ	0xFD8
 21760                           
 21761 ;; *************** function _enc424j600_getPacketCount *****************
 21762 ;; Defined at:
 21763 ;;		line 594 in file "src/enc424j600/ENC424J600.c"
 21764 ;; Parameters:    Size  Location     Type
 21765 ;;		None
 21766 ;; Auto vars:     Size  Location     Type
 21767 ;;  lowByte         1   14[BANK0 ] unsigned char 
 21768 ;; Return value:  Size  Location     Type
 21769 ;;                  1    wreg      unsigned char 
 21770 ;; Registers used:
 21771 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21772 ;; Tracked objects:
 21773 ;;		On entry : 0/0
 21774 ;;		On exit  : 0/0
 21775 ;;		Unchanged: 0/0
 21776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21777 ;;      Params:         0       0       0       0       0       0       0       0       0
 21778 ;;      Locals:         0       1       0       0       0       0       0       0       0
 21779 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21780 ;;      Totals:         0       1       0       0       0       0       0       0       0
 21781 ;;Total ram usage:        1 bytes
 21782 ;; Hardware stack levels used:    1
 21783 ;; Hardware stack levels required when called:    7
 21784 ;; This function calls:
 21785 ;;		_enc424j600_readControlRegisterUnbanked
 21786 ;; This function is called by:
 21787 ;;		_ethernetController_newPacketAvailable
 21788 ;;		_ethernetController_getCurrentPacketCount
 21789 ;; This function uses a non-reentrant model
 21790 ;;
 21791                           
 21792                           	psect	text99
 21793  004B6C                     __ptext99:
 21794                           	opt stack 0
 21795  004B6C                     _enc424j600_getPacketCount:
 21796                           	opt stack 21
 21797                           
 21798                           ;ENC424J600.c: 595: uint8_t lowByte = 0;
 21799                           
 21800                           ;incstack = 0
 21801  004B6C  0E00               	movlw	0
 21802  004B6E  0100               	movlb	0	; () banked
 21803  004B70  6F6E               	movwf	enc424j600_getPacketCount@lowByte& (0+255),b
 21804                           
 21805                           ; BSR set to: 0
 21806                           ;ENC424J600.c: 596: enc424j600_readControlRegisterUnbanked(0x1A + 0x00, &lowByte);
 21807  004B72  0E6E               	movlw	low enc424j600_getPacketCount@lowByte
 21808  004B74  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 21809  004B76  0E00               	movlw	high enc424j600_getPacketCount@lowByte
 21810  004B78  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 21811  004B7A  0E1A               	movlw	26
 21812  004B7C  EC15  F024         	call	_enc424j600_readControlRegisterUnbanked
 21813                           
 21814                           ;ENC424J600.c: 597: return (uint32_t) lowByte;
 21815  004B80  0100               	movlb	0	; () banked
 21816  004B82  516E               	movf	enc424j600_getPacketCount@lowByte& (0+255),w,b
 21817  004B84  0012               	return	
 21818  004B86                     __end_of_enc424j600_getPacketCount:
 21819                           	opt stack 0
 21820                           tblptru	equ	0xFF8
 21821                           tblptrh	equ	0xFF7
 21822                           tblptrl	equ	0xFF6
 21823                           tablat	equ	0xFF5
 21824                           prodh	equ	0xFF4
 21825                           prodl	equ	0xFF3
 21826                           intcon	equ	0xFF2
 21827                           intcon3	equ	0xFF0
 21828                           indf0	equ	0xFEF
 21829                           postinc0	equ	0xFEE
 21830                           plusw0	equ	0xFEB
 21831                           fsr0h	equ	0xFEA
 21832                           fsr0l	equ	0xFE9
 21833                           wreg	equ	0xFE8
 21834                           indf1	equ	0xFE7
 21835                           postinc1	equ	0xFE6
 21836                           postdec1	equ	0xFE5
 21837                           plusw1	equ	0xFE3
 21838                           fsr1h	equ	0xFE2
 21839                           fsr1l	equ	0xFE1
 21840                           indf2	equ	0xFDF
 21841                           postinc2	equ	0xFDE
 21842                           postdec2	equ	0xFDD
 21843                           plusw2	equ	0xFDB
 21844                           fsr2h	equ	0xFDA
 21845                           fsr2l	equ	0xFD9
 21846                           status	equ	0xFD8
 21847                           
 21848 ;; *************** function _enc424j600_readControlRegisterUnbanked *****************
 21849 ;; Defined at:
 21850 ;;		line 527 in file "src/enc424j600/ENC424J600.c"
 21851 ;; Parameters:    Size  Location     Type
 21852 ;;  addr            1    wreg     unsigned char 
 21853 ;;  data            2   10[BANK0 ] PTR unsigned char 
 21854 ;;		 -> enc424j600_clearInterruptFlag@temp(1), enc424j600_getInterruptFlags@high(1), enc424j600_getInterruptFlags@low(1)
      +, enc424j600_disable@temp(1), 
 21855 ;;		 -> enc424j600_enable@temp(1), enc424j600_disableAutoMACInsertion@temp(1), enc424j600_enableAutoMACInsertion@temp(1)
      +, enc424j600_getPacketCount@lowByte(1), 
 21856 ;;		 -> enc424j600_readPHYRegister@highByte(1), enc424j600_readPHYRegister@lowByte(1), enc424j600_readPHYRegister@temp(1
      +), ethernetController_setLEDConfig@data(1), 
 21857 ;;		 -> ethernetController_updateLinkStatus@temp(1), mac.address(6), ethernetController_getMacAddress@mac(6), ethernetCo
      +ntroller_getSiliconRevision@data(1), 
 21858 ;;		 -> ethernetController_checkDeviceId@data(1), ethernetController_softReset@receivedData(2), 
 21859 ;; Auto vars:     Size  Location     Type
 21860 ;;  addr            1   12[BANK0 ] unsigned char 
 21861 ;;  opcode          1   13[BANK0 ] unsigned char 
 21862 ;; Return value:  Size  Location     Type
 21863 ;;                  1    wreg      void 
 21864 ;; Registers used:
 21865 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21866 ;; Tracked objects:
 21867 ;;		On entry : 0/0
 21868 ;;		On exit  : 0/0
 21869 ;;		Unchanged: 0/0
 21870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21871 ;;      Params:         0       2       0       0       0       0       0       0       0
 21872 ;;      Locals:         0       2       0       0       0       0       0       0       0
 21873 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21874 ;;      Totals:         0       4       0       0       0       0       0       0       0
 21875 ;;Total ram usage:        4 bytes
 21876 ;; Hardware stack levels used:    1
 21877 ;; Hardware stack levels required when called:    6
 21878 ;; This function calls:
 21879 ;;		_enc424j600_readSPI
 21880 ;;		_enc424j600_writeSPI
 21881 ;; This function is called by:
 21882 ;;		_ethernetController_softReset
 21883 ;;		_ethernetController_checkDeviceId
 21884 ;;		_ethernetController_getMacAddress
 21885 ;;		_ethernetController_updateLinkStatus
 21886 ;;		_ethernetController_setLEDConfig
 21887 ;;		_enc424j600_readPHYRegister
 21888 ;;		_enc424j600_getPacketCount
 21889 ;;		_enc424j600_enableAutoMACInsertion
 21890 ;;		_enc424j600_getInterruptFlags
 21891 ;;		_enc424j600_clearInterruptFlag
 21892 ;;		_ethernetController_getSiliconRevision
 21893 ;;		_enc424j600_disableAutoMACInsertion
 21894 ;;		_enc424j600_enable
 21895 ;;		_enc424j600_disable
 21896 ;; This function uses a non-reentrant model
 21897 ;;
 21898                           
 21899                           	psect	text100
 21900  00482A                     __ptext100:
 21901                           	opt stack 0
 21902  00482A                     _enc424j600_readControlRegisterUnbanked:
 21903                           	opt stack 19
 21904                           
 21905                           ; BSR set to: 0
 21906                           ;incstack = 0
 21907                           ;enc424j600_readControlRegisterUnbanked@addr stored from wreg
 21908  00482A  0100               	movlb	0	; () banked
 21909  00482C  6F6C               	movwf	enc424j600_readControlRegisterUnbanked@addr& (0+255),b
 21910                           
 21911                           ;ENC424J600.c: 528: uint8_t opcode = 0x20;
 21912  00482E  0E20               	movlw	32
 21913  004830  0100               	movlb	0	; () banked
 21914  004832  6F6D               	movwf	enc424j600_readControlRegisterUnbanked@opcode& (0+255),b
 21915                           
 21916                           ; BSR set to: 0
 21917                           ;ENC424J600.c: 529: PORTBbits.RB4=0;
 21918  004834  9881               	bcf	3969,4,c	;volatile
 21919                           
 21920                           ; BSR set to: 0
 21921                           ;ENC424J600.c: 530: enc424j600_writeSPI(&opcode);
 21922  004836  0E6D               	movlw	low enc424j600_readControlRegisterUnbanked@opcode
 21923  004838  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 21924  00483A  0E00               	movlw	high enc424j600_readControlRegisterUnbanked@opcode
 21925  00483C  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 21926  00483E  ECC2  F020         	call	_enc424j600_writeSPI	;wreg free
 21927                           
 21928                           ;ENC424J600.c: 531: enc424j600_writeSPI(&addr);
 21929  004842  0E6C               	movlw	low enc424j600_readControlRegisterUnbanked@addr
 21930  004844  0100               	movlb	0	; () banked
 21931  004846  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 21932  004848  0E00               	movlw	high enc424j600_readControlRegisterUnbanked@addr
 21933  00484A  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 21934  00484C  ECC2  F020         	call	_enc424j600_writeSPI	;wreg free
 21935                           
 21936                           ;ENC424J600.c: 532: enc424j600_readSPI(data);
 21937  004850  C06A  F060         	movff	enc424j600_readControlRegisterUnbanked@data,enc424j600_readSPI@data
 21938  004854  C06B  F061         	movff	enc424j600_readControlRegisterUnbanked@data+1,enc424j600_readSPI@data+1
 21939  004858  EC26  F020         	call	_enc424j600_readSPI	;wreg free
 21940                           
 21941                           ;ENC424J600.c: 533: PORTBbits.RB4=1;
 21942  00485C  8881               	bsf	3969,4,c	;volatile
 21943  00485E  0012               	return		;funcret
 21944  004860                     __end_of_enc424j600_readControlRegisterUnbanked:
 21945                           	opt stack 0
 21946                           tblptru	equ	0xFF8
 21947                           tblptrh	equ	0xFF7
 21948                           tblptrl	equ	0xFF6
 21949                           tablat	equ	0xFF5
 21950                           prodh	equ	0xFF4
 21951                           prodl	equ	0xFF3
 21952                           intcon	equ	0xFF2
 21953                           intcon3	equ	0xFF0
 21954                           indf0	equ	0xFEF
 21955                           postinc0	equ	0xFEE
 21956                           plusw0	equ	0xFEB
 21957                           fsr0h	equ	0xFEA
 21958                           fsr0l	equ	0xFE9
 21959                           wreg	equ	0xFE8
 21960                           indf1	equ	0xFE7
 21961                           postinc1	equ	0xFE6
 21962                           postdec1	equ	0xFE5
 21963                           plusw1	equ	0xFE3
 21964                           fsr1h	equ	0xFE2
 21965                           fsr1l	equ	0xFE1
 21966                           indf2	equ	0xFDF
 21967                           postinc2	equ	0xFDE
 21968                           postdec2	equ	0xFDD
 21969                           plusw2	equ	0xFDB
 21970                           fsr2h	equ	0xFDA
 21971                           fsr2l	equ	0xFD9
 21972                           status	equ	0xFD8
 21973                           
 21974 ;; *************** function _enc424j600_writeSPI *****************
 21975 ;; Defined at:
 21976 ;;		line 487 in file "src/enc424j600/ENC424J600.c"
 21977 ;; Parameters:    Size  Location     Type
 21978 ;;  data            2    0[BANK0 ] PTR unsigned char 
 21979 ;;		 -> enc424j600_clearInterruptFlag@temp(1), enc424j600_disable@temp(1), enc424j600_enable@temp(1), enc424j600_disable
      +AutoMACInsertion@temp(1), 
 21980 ;;		 -> enc424j600_enableAutoMACInsertion@temp(1), enc424j600_setRXTailPointer@highByte(1), enc424j600_setRXTailPointer@
      +lowByte(1), enc424j600_setRXBufferStartAddress@highByte(1), 
 21981 ;;		 -> enc424j600_setRXBufferStartAddress@lowByte(1), enc424j600_setERXDATAReadPointer@highByte(1), enc424j600_setERXDA
      +TAReadPointer@lowByte(1), enc424j600_setERXDATAReadPointer@opcode(1), 
 21982 ;;		 -> enc424j600_setGPDATAReadPointer@highByte(1), enc424j600_setGPDATAReadPointer@lowByte(1), enc424j600_setGPDATARea
      +dPointer@opcode(1), enc424j600_setGPDATAWritePointer@highByte(1), 
 21983 ;;		 -> enc424j600_setGPDATAWritePointer@lowByte(1), enc424j600_setGPDATAWritePointer@opcode(1), enc424j600_setTXStartAd
      +dress@highByte(1), enc424j600_setTXStartAddress@lowByte(1), 
 21984 ;;		 -> enc424j600_setTXLength@highByte(1), enc424j600_setTXLength@lowByte(1), enc424j600_readPHYRegister@temp(1), enc42
      +4j600_readPHYRegister@unusedBits(1), 
 21985 ;;		 -> enc424j600_readPHYRegister@PHYaddress(1), enc424j600_readControlRegisterUnbanked@addr(1), enc424j600_readControl
      +RegisterUnbanked@opcode(1), enc424j600_writeControlRegisterUnbanked@addr(1), 
 21986 ;;		 -> enc424j600_writeControlRegisterUnbanked@opcode(1), enc424j600_writeSingleByte@opcode(1), ethernetController_setL
      +EDConfig@data(1), ethernetController_streamFromRXBuffer@opcode(1), 
 21987 ;;		 -> ethernetController_updateNextPacketPointer@opcode(1), ethernetController_getRSV@opcode(1), ethernetController_ge
      +tEtherTypeField@opcode(1), ethernetController_getSourceMACAddress@opcode(1), 
 21988 ;;		 -> ethernetController_getDestinationMACAddress@opcode(1), ethernetController_writeEtherTypeFieldToBuffer@opcode(1),
      + ethernetController_writeEtherTypeFieldToBuffer@highByte(1), ethernetController_writeEtherTypeFieldToBuffer@lowByte(1), 
 21989 ;;		 -> ethernetController_writeDestinationMACAddress@opcode(1), ethernetController_writeDestinationMACAddress@data(6), 
      +ethernetController_streamToTransmitBuffer@data(1), ethernetController_streamToTransmitBuffer@opcode(1), 
 21990 ;;		 -> mac.address(6), ethernetController_setMacAddress@mac(6), ethernetController_softReset@dataToSend(2), 
 21991 ;; Auto vars:     Size  Location     Type
 21992 ;;  timeoutCount    4    6[BANK0 ] unsigned long 
 21993 ;; Return value:  Size  Location     Type
 21994 ;;                  1    wreg      void 
 21995 ;; Registers used:
 21996 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21997 ;; Tracked objects:
 21998 ;;		On entry : 0/0
 21999 ;;		On exit  : 0/0
 22000 ;;		Unchanged: 0/0
 22001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22002 ;;      Params:         0       2       0       0       0       0       0       0       0
 22003 ;;      Locals:         0       4       0       0       0       0       0       0       0
 22004 ;;      Temps:          0       4       0       0       0       0       0       0       0
 22005 ;;      Totals:         0      10       0       0       0       0       0       0       0
 22006 ;;Total ram usage:       10 bytes
 22007 ;; Hardware stack levels used:    1
 22008 ;; Hardware stack levels required when called:    5
 22009 ;; This function calls:
 22010 ;;		_enc424j600_initSPI
 22011 ;; This function is called by:
 22012 ;;		_ethernetController_streamToTransmitBuffer
 22013 ;;		_ethernetController_writeDestinationMACAddress
 22014 ;;		_ethernetController_writeEtherTypeFieldToBuffer
 22015 ;;		_ethernetController_getSourceMACAddress
 22016 ;;		_ethernetController_getEtherTypeField
 22017 ;;		_ethernetController_getRSV
 22018 ;;		_ethernetController_updateNextPacketPointer
 22019 ;;		_ethernetController_streamFromRXBuffer
 22020 ;;		_enc424j600_writeSingleByte
 22021 ;;		_enc424j600_writeControlRegisterUnbanked
 22022 ;;		_enc424j600_readControlRegisterUnbanked
 22023 ;;		_enc424j600_setGPDATAWritePointer
 22024 ;;		_enc424j600_setERXDATAReadPointer
 22025 ;;		_ethernetController_getDestinationMACAddress
 22026 ;;		_enc424j600_setGPDATAReadPointer
 22027 ;; This function uses a non-reentrant model
 22028 ;;
 22029                           
 22030                           	psect	text101
 22031  004184                     __ptext101:
 22032                           	opt stack 0
 22033  004184                     _enc424j600_writeSPI:
 22034                           	opt stack 20
 22035                           
 22036                           ;ENC424J600.c: 489: uint32_t timeoutCounter = 0;
 22037                           
 22038                           ;incstack = 0
 22039  004184  0E00               	movlw	0
 22040  004186  0100               	movlb	0	; () banked
 22041  004188  6F66               	movwf	enc424j600_writeSPI@timeoutCounter& (0+255),b
 22042  00418A  0E00               	movlw	0
 22043  00418C  6F67               	movwf	(enc424j600_writeSPI@timeoutCounter+1)& (0+255),b
 22044  00418E  0E00               	movlw	0
 22045  004190  6F68               	movwf	(enc424j600_writeSPI@timeoutCounter+2)& (0+255),b
 22046  004192  0E00               	movlw	0
 22047  004194  6F69               	movwf	(enc424j600_writeSPI@timeoutCounter+3)& (0+255),b
 22048                           
 22049                           ; BSR set to: 0
 22050                           ;ENC424J600.c: 490: SSP1BUF = *data;
 22051  004196  C060  FFD9         	movff	enc424j600_writeSPI@data,fsr2l
 22052  00419A  C061  FFDA         	movff	enc424j600_writeSPI@data+1,fsr2h
 22053  00419E  50DF               	movf	indf2,w,c
 22054  0041A0  6EC9               	movwf	4041,c	;volatile
 22055  0041A2                     
 22056                           ; BSR set to: 0
 22057                           
 22058                           ; BSR set to: 0
 22059  0041A2  B0C7               	btfsc	4039,0,c	;volatile
 22060  0041A4  D015               	goto	u7880
 22061                           
 22062                           ; BSR set to: 0
 22063  0041A6  C066  F062         	movff	enc424j600_writeSPI@timeoutCounter,??_enc424j600_writeSPI
 22064  0041AA  C067  F063         	movff	enc424j600_writeSPI@timeoutCounter+1,??_enc424j600_writeSPI+1
 22065  0041AE  C068  F064         	movff	enc424j600_writeSPI@timeoutCounter+2,??_enc424j600_writeSPI+2
 22066  0041B2  C069  F065         	movff	enc424j600_writeSPI@timeoutCounter+3,??_enc424j600_writeSPI+3
 22067  0041B6  2B66               	incf	enc424j600_writeSPI@timeoutCounter& (0+255),f,b
 22068  0041B8  0E00               	movlw	0
 22069  0041BA  2367               	addwfc	(enc424j600_writeSPI@timeoutCounter+1)& (0+255),f,b
 22070  0041BC  2368               	addwfc	(enc424j600_writeSPI@timeoutCounter+2)& (0+255),f,b
 22071  0041BE  2369               	addwfc	(enc424j600_writeSPI@timeoutCounter+3)& (0+255),f,b
 22072  0041C0  5165               	movf	(??_enc424j600_writeSPI+3)& (0+255),w,b
 22073  0041C2  1164               	iorwf	(??_enc424j600_writeSPI+2)& (0+255),w,b
 22074  0041C4  E105               	bnz	l7510
 22075  0041C6  2962               	incf	??_enc424j600_writeSPI& (0+255),w,b
 22076  0041C8  0E0F               	movlw	15
 22077  0041CA  5963               	subwfb	(??_enc424j600_writeSPI+1)& (0+255),w,b
 22078  0041CC  A0D8               	btfss	status,0,c
 22079  0041CE  D7E9               	goto	l232
 22080  0041D0                     u7880:
 22081  0041D0                     l7510:
 22082                           
 22083                           ; BSR set to: 0
 22084                           ;ENC424J600.c: 492: if (timeoutCounter >= 0xfff) {
 22085  0041D0  5169               	movf	(enc424j600_writeSPI@timeoutCounter+3)& (0+255),w,b
 22086  0041D2  1168               	iorwf	(enc424j600_writeSPI@timeoutCounter+2)& (0+255),w,b
 22087  0041D4  E105               	bnz	u7890
 22088  0041D6  2966               	incf	enc424j600_writeSPI@timeoutCounter& (0+255),w,b
 22089  0041D8  0E0F               	movlw	15
 22090  0041DA  5967               	subwfb	(enc424j600_writeSPI@timeoutCounter+1)& (0+255),w,b
 22091  0041DC  A0D8               	btfss	status,0,c
 22092  0041DE  0012               	return	
 22093  0041E0                     u7890:
 22094                           
 22095                           ; BSR set to: 0
 22096                           ;ENC424J600.c: 493: PORTBbits.RB4=1;
 22097  0041E0  8881               	bsf	3969,4,c	;volatile
 22098                           
 22099                           ; BSR set to: 0
 22100                           ;ENC424J600.c: 494: enc424j600_initSPI();
 22101  0041E2  EC9B  F025         	call	_enc424j600_initSPI	;wreg free
 22102                           
 22103                           ;ENC424J600.c: 495: return;
 22104  0041E6  0012               	return	
 22105  0041E8                     __end_of_enc424j600_writeSPI:
 22106                           	opt stack 0
 22107                           tblptru	equ	0xFF8
 22108                           tblptrh	equ	0xFF7
 22109                           tblptrl	equ	0xFF6
 22110                           tablat	equ	0xFF5
 22111                           prodh	equ	0xFF4
 22112                           prodl	equ	0xFF3
 22113                           intcon	equ	0xFF2
 22114                           intcon3	equ	0xFF0
 22115                           indf0	equ	0xFEF
 22116                           postinc0	equ	0xFEE
 22117                           plusw0	equ	0xFEB
 22118                           fsr0h	equ	0xFEA
 22119                           fsr0l	equ	0xFE9
 22120                           wreg	equ	0xFE8
 22121                           indf1	equ	0xFE7
 22122                           postinc1	equ	0xFE6
 22123                           postdec1	equ	0xFE5
 22124                           plusw1	equ	0xFE3
 22125                           fsr1h	equ	0xFE2
 22126                           fsr1l	equ	0xFE1
 22127                           indf2	equ	0xFDF
 22128                           postinc2	equ	0xFDE
 22129                           postdec2	equ	0xFDD
 22130                           plusw2	equ	0xFDB
 22131                           fsr2h	equ	0xFDA
 22132                           fsr2l	equ	0xFD9
 22133                           status	equ	0xFD8
 22134                           
 22135 ;; *************** function _enc424j600_readSPI *****************
 22136 ;; Defined at:
 22137 ;;		line 499 in file "src/enc424j600/ENC424J600.c"
 22138 ;; Parameters:    Size  Location     Type
 22139 ;;  data            2    0[BANK0 ] PTR unsigned char 
 22140 ;;		 -> enc424j600_clearInterruptFlag@temp(1), enc424j600_getInterruptFlags@high(1), enc424j600_getInterruptFlags@low(1)
      +, enc424j600_disable@temp(1), 
 22141 ;;		 -> enc424j600_enable@temp(1), enc424j600_disableAutoMACInsertion@temp(1), enc424j600_enableAutoMACInsertion@temp(1)
      +, enc424j600_getPacketCount@lowByte(1), 
 22142 ;;		 -> enc424j600_readPHYRegister@highByte(1), enc424j600_readPHYRegister@lowByte(1), enc424j600_readPHYRegister@temp(1
      +), ethernetController_setLEDConfig@data(1), 
 22143 ;;		 -> ethernetController_updateLinkStatus@temp(1), ethernetController_streamFromRXBuffer@temp(1), ethernetController_u
      +pdateNextPacketPointer@newPointerH(1), ethernetController_updateNextPacketPointer@newPointerL(1), 
 22144 ;;		 -> ethernetController_getRSV@temp(6), ethernetController_getEtherTypeField@lowByte(1), ethernetController_getEtherT
      +ypeField@highByte(1), ethernetController_getSourceMACAddress@temp(1), 
 22145 ;;		 -> ethernetController_getDestinationMACAddress@temp(1), mac.address(6), ethernetController_getMacAddress@mac(6), et
      +hernetController_getSiliconRevision@data(1), 
 22146 ;;		 -> ethernetController_checkDeviceId@data(1), ethernetController_softReset@receivedData(2), 
 22147 ;; Auto vars:     Size  Location     Type
 22148 ;;  timeoutCount    4    6[BANK0 ] unsigned long 
 22149 ;; Return value:  Size  Location     Type
 22150 ;;                  1    wreg      void 
 22151 ;; Registers used:
 22152 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 22153 ;; Tracked objects:
 22154 ;;		On entry : 0/0
 22155 ;;		On exit  : 0/0
 22156 ;;		Unchanged: 0/0
 22157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22158 ;;      Params:         0       2       0       0       0       0       0       0       0
 22159 ;;      Locals:         0       4       0       0       0       0       0       0       0
 22160 ;;      Temps:          0       4       0       0       0       0       0       0       0
 22161 ;;      Totals:         0      10       0       0       0       0       0       0       0
 22162 ;;Total ram usage:       10 bytes
 22163 ;; Hardware stack levels used:    1
 22164 ;; Hardware stack levels required when called:    5
 22165 ;; This function calls:
 22166 ;;		_enc424j600_initSPI
 22167 ;; This function is called by:
 22168 ;;		_ethernetController_getSourceMACAddress
 22169 ;;		_ethernetController_getEtherTypeField
 22170 ;;		_ethernetController_getRSV
 22171 ;;		_ethernetController_updateNextPacketPointer
 22172 ;;		_ethernetController_streamFromRXBuffer
 22173 ;;		_enc424j600_readControlRegisterUnbanked
 22174 ;;		_ethernetController_getDestinationMACAddress
 22175 ;; This function uses a non-reentrant model
 22176 ;;
 22177                           
 22178                           	psect	text102
 22179  00404C                     __ptext102:
 22180                           	opt stack 0
 22181  00404C                     _enc424j600_readSPI:
 22182                           	opt stack 20
 22183                           
 22184                           ;ENC424J600.c: 501: uint32_t timeoutCounter = 0;
 22185                           
 22186                           ;incstack = 0
 22187  00404C  0E00               	movlw	0
 22188  00404E  0100               	movlb	0	; () banked
 22189  004050  6F66               	movwf	enc424j600_readSPI@timeoutCounter& (0+255),b
 22190  004052  0E00               	movlw	0
 22191  004054  6F67               	movwf	(enc424j600_readSPI@timeoutCounter+1)& (0+255),b
 22192  004056  0E00               	movlw	0
 22193  004058  6F68               	movwf	(enc424j600_readSPI@timeoutCounter+2)& (0+255),b
 22194  00405A  0E00               	movlw	0
 22195  00405C  6F69               	movwf	(enc424j600_readSPI@timeoutCounter+3)& (0+255),b
 22196                           
 22197                           ;ENC424J600.c: 502: SSP1BUF = 0x00;
 22198  00405E  0E00               	movlw	0
 22199  004060  6EC9               	movwf	4041,c	;volatile
 22200  004062                     
 22201                           ; BSR set to: 0
 22202                           
 22203                           ; BSR set to: 0
 22204  004062  B0C7               	btfsc	4039,0,c	;volatile
 22205  004064  D015               	goto	u8330
 22206                           
 22207                           ; BSR set to: 0
 22208  004066  C066  F062         	movff	enc424j600_readSPI@timeoutCounter,??_enc424j600_readSPI
 22209  00406A  C067  F063         	movff	enc424j600_readSPI@timeoutCounter+1,??_enc424j600_readSPI+1
 22210  00406E  C068  F064         	movff	enc424j600_readSPI@timeoutCounter+2,??_enc424j600_readSPI+2
 22211  004072  C069  F065         	movff	enc424j600_readSPI@timeoutCounter+3,??_enc424j600_readSPI+3
 22212  004076  2B66               	incf	enc424j600_readSPI@timeoutCounter& (0+255),f,b
 22213  004078  0E00               	movlw	0
 22214  00407A  2367               	addwfc	(enc424j600_readSPI@timeoutCounter+1)& (0+255),f,b
 22215  00407C  2368               	addwfc	(enc424j600_readSPI@timeoutCounter+2)& (0+255),f,b
 22216  00407E  2369               	addwfc	(enc424j600_readSPI@timeoutCounter+3)& (0+255),f,b
 22217  004080  5165               	movf	(??_enc424j600_readSPI+3)& (0+255),w,b
 22218  004082  1164               	iorwf	(??_enc424j600_readSPI+2)& (0+255),w,b
 22219  004084  E105               	bnz	l7796
 22220  004086  2962               	incf	??_enc424j600_readSPI& (0+255),w,b
 22221  004088  0E0F               	movlw	15
 22222  00408A  5963               	subwfb	(??_enc424j600_readSPI+1)& (0+255),w,b
 22223  00408C  A0D8               	btfss	status,0,c
 22224  00408E  D7E9               	goto	l241
 22225  004090                     u8330:
 22226  004090                     l7796:
 22227                           
 22228                           ; BSR set to: 0
 22229                           ;ENC424J600.c: 504: if (timeoutCounter >= 0xfff) {
 22230  004090  5169               	movf	(enc424j600_readSPI@timeoutCounter+3)& (0+255),w,b
 22231  004092  1168               	iorwf	(enc424j600_readSPI@timeoutCounter+2)& (0+255),w,b
 22232  004094  E105               	bnz	u8340
 22233  004096  2966               	incf	enc424j600_readSPI@timeoutCounter& (0+255),w,b
 22234  004098  0E0F               	movlw	15
 22235  00409A  5967               	subwfb	(enc424j600_readSPI@timeoutCounter+1)& (0+255),w,b
 22236  00409C  A0D8               	btfss	status,0,c
 22237  00409E  D004               	goto	l245
 22238  0040A0                     u8340:
 22239                           
 22240                           ; BSR set to: 0
 22241                           ;ENC424J600.c: 505: PORTBbits.RB4=1;
 22242  0040A0  8881               	bsf	3969,4,c	;volatile
 22243                           
 22244                           ; BSR set to: 0
 22245                           ;ENC424J600.c: 506: enc424j600_initSPI();
 22246  0040A2  EC9B  F025         	call	_enc424j600_initSPI	;wreg free
 22247                           
 22248                           ;ENC424J600.c: 507: return;
 22249  0040A6  0012               	return	
 22250  0040A8                     l245:
 22251                           
 22252                           ;ENC424J600.c: 508: }
 22253                           ;ENC424J600.c: 509: *data = SSP1BUF;
 22254  0040A8  C060  FFD9         	movff	enc424j600_readSPI@data,fsr2l
 22255  0040AC  C061  FFDA         	movff	enc424j600_readSPI@data+1,fsr2h
 22256  0040B0  CFC9 FFDF          	movff	4041,indf2	;volatile
 22257  0040B4  0012               	return		;funcret
 22258  0040B6                     __end_of_enc424j600_readSPI:
 22259                           	opt stack 0
 22260                           tblptru	equ	0xFF8
 22261                           tblptrh	equ	0xFF7
 22262                           tblptrl	equ	0xFF6
 22263                           tablat	equ	0xFF5
 22264                           prodh	equ	0xFF4
 22265                           prodl	equ	0xFF3
 22266                           intcon	equ	0xFF2
 22267                           intcon3	equ	0xFF0
 22268                           indf0	equ	0xFEF
 22269                           postinc0	equ	0xFEE
 22270                           plusw0	equ	0xFEB
 22271                           fsr0h	equ	0xFEA
 22272                           fsr0l	equ	0xFE9
 22273                           wreg	equ	0xFE8
 22274                           indf1	equ	0xFE7
 22275                           postinc1	equ	0xFE6
 22276                           postdec1	equ	0xFE5
 22277                           plusw1	equ	0xFE3
 22278                           fsr1h	equ	0xFE2
 22279                           fsr1l	equ	0xFE1
 22280                           indf2	equ	0xFDF
 22281                           postinc2	equ	0xFDE
 22282                           postdec2	equ	0xFDD
 22283                           plusw2	equ	0xFDB
 22284                           fsr2h	equ	0xFDA
 22285                           fsr2l	equ	0xFD9
 22286                           status	equ	0xFD8
 22287                           
 22288 ;; *************** function _enc424j600_initSPI *****************
 22289 ;; Defined at:
 22290 ;;		line 469 in file "src/enc424j600/ENC424J600.c"
 22291 ;; Parameters:    Size  Location     Type
 22292 ;;		None
 22293 ;; Auto vars:     Size  Location     Type
 22294 ;;		None
 22295 ;; Return value:  Size  Location     Type
 22296 ;;                  1    wreg      void 
 22297 ;; Registers used:
 22298 ;;		None
 22299 ;; Tracked objects:
 22300 ;;		On entry : 0/0
 22301 ;;		On exit  : 0/0
 22302 ;;		Unchanged: 0/0
 22303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22304 ;;      Params:         0       0       0       0       0       0       0       0       0
 22305 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22306 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22307 ;;      Totals:         0       0       0       0       0       0       0       0       0
 22308 ;;Total ram usage:        0 bytes
 22309 ;; Hardware stack levels used:    1
 22310 ;; Hardware stack levels required when called:    4
 22311 ;; This function calls:
 22312 ;;		Nothing
 22313 ;; This function is called by:
 22314 ;;		_ethernetController_init
 22315 ;;		_enc424j600_writeSPI
 22316 ;;		_enc424j600_readSPI
 22317 ;; This function uses a non-reentrant model
 22318 ;;
 22319                           
 22320                           	psect	text103
 22321  004B36                     __ptext103:
 22322                           	opt stack 0
 22323  004B36                     _enc424j600_initSPI:
 22324                           	opt stack 20
 22325                           
 22326                           ;ENC424J600.c: 470: SSP1CON1bits.SSPEN = 0;
 22327                           
 22328                           ;incstack = 0
 22329  004B36  9AC6               	bcf	4038,5,c	;volatile
 22330                           
 22331                           ;ENC424J600.c: 471: SSP1STATbits.CKE = 1;
 22332  004B38  8CC7               	bsf	4039,6,c	;volatile
 22333                           
 22334                           ;ENC424J600.c: 473: TRISBbits.TRISB0 = 1;
 22335  004B3A  8093               	bsf	3987,0,c	;volatile
 22336                           
 22337                           ;ENC424J600.c: 474: ANSELBbits.ANSB0 = 0;
 22338  004B3C  010F               	movlb	15	; () banked
 22339  004B3E  915C               	bcf	92,0,b	;volatile
 22340                           
 22341                           ;ENC424J600.c: 475: TRISBbits.TRISB1 = 0;
 22342  004B40  9293               	bcf	3987,1,c	;volatile
 22343                           
 22344                           ;ENC424J600.c: 476: ANSELBbits.ANSB1 = 0;
 22345  004B42  935C               	bcf	92,1,b	;volatile
 22346                           
 22347                           ;ENC424J600.c: 477: TRISBbits.TRISB3 = 0;
 22348  004B44  9693               	bcf	3987,3,c	;volatile
 22349                           
 22350                           ;ENC424J600.c: 478: ANSELBbits.ANSB3 = 0;
 22351  004B46  975C               	bcf	92,3,b	;volatile
 22352                           
 22353                           ;ENC424J600.c: 479: TRISBbits.TRISB4 = 0;
 22354  004B48  9893               	bcf	3987,4,c	;volatile
 22355                           
 22356                           ;ENC424J600.c: 480: ANSELBbits.ANSB4 = 0;
 22357  004B4A  995C               	bcf	92,4,b	;volatile
 22358                           
 22359                           ;ENC424J600.c: 481: PORTBbits.RB4=1;
 22360  004B4C  8881               	bsf	3969,4,c	;volatile
 22361                           
 22362                           ;ENC424J600.c: 482: SSP1CON1bits.SSPEN = 1;
 22363  004B4E  8AC6               	bsf	4038,5,c	;volatile
 22364                           
 22365                           ; BSR set to: 15
 22366  004B50  0012               	return		;funcret
 22367  004B52                     __end_of_enc424j600_initSPI:
 22368                           	opt stack 0
 22369                           tblptru	equ	0xFF8
 22370                           tblptrh	equ	0xFF7
 22371                           tblptrl	equ	0xFF6
 22372                           tablat	equ	0xFF5
 22373                           prodh	equ	0xFF4
 22374                           prodl	equ	0xFF3
 22375                           intcon	equ	0xFF2
 22376                           intcon3	equ	0xFF0
 22377                           indf0	equ	0xFEF
 22378                           postinc0	equ	0xFEE
 22379                           plusw0	equ	0xFEB
 22380                           fsr0h	equ	0xFEA
 22381                           fsr0l	equ	0xFE9
 22382                           wreg	equ	0xFE8
 22383                           indf1	equ	0xFE7
 22384                           postinc1	equ	0xFE6
 22385                           postdec1	equ	0xFE5
 22386                           plusw1	equ	0xFE3
 22387                           fsr1h	equ	0xFE2
 22388                           fsr1l	equ	0xFE1
 22389                           indf2	equ	0xFDF
 22390                           postinc2	equ	0xFDE
 22391                           postdec2	equ	0xFDD
 22392                           plusw2	equ	0xFDB
 22393                           fsr2h	equ	0xFDA
 22394                           fsr2l	equ	0xFD9
 22395                           status	equ	0xFD8
 22396                           
 22397 ;; *************** function _UARTInit *****************
 22398 ;; Defined at:
 22399 ;;		line 26 in file "src/system/uart.c"
 22400 ;; Parameters:    Size  Location     Type
 22401 ;;		None
 22402 ;; Auto vars:     Size  Location     Type
 22403 ;;		None
 22404 ;; Return value:  Size  Location     Type
 22405 ;;                  1    wreg      void 
 22406 ;; Registers used:
 22407 ;;		wreg, status,2
 22408 ;; Tracked objects:
 22409 ;;		On entry : 0/0
 22410 ;;		On exit  : 0/0
 22411 ;;		Unchanged: 0/0
 22412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22413 ;;      Params:         0       0       0       0       0       0       0       0       0
 22414 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22415 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22416 ;;      Totals:         0       0       0       0       0       0       0       0       0
 22417 ;;Total ram usage:        0 bytes
 22418 ;; Hardware stack levels used:    1
 22419 ;; Hardware stack levels required when called:    4
 22420 ;; This function calls:
 22421 ;;		Nothing
 22422 ;; This function is called by:
 22423 ;;		_main
 22424 ;; This function uses a non-reentrant model
 22425 ;;
 22426                           
 22427                           	psect	text104
 22428  004BFA                     __ptext104:
 22429                           	opt stack 0
 22430  004BFA                     _UARTInit:
 22431                           	opt stack 26
 22432                           
 22433                           ;uart.c: 27: TXSTA1bits.TXEN = 1;
 22434                           
 22435                           ; BSR set to: 15
 22436                           ;incstack = 0
 22437  004BFA  8AAC               	bsf	4012,5,c	;volatile
 22438                           
 22439                           ;uart.c: 28: TXSTA1bits.SYNC = 0;
 22440  004BFC  98AC               	bcf	4012,4,c	;volatile
 22441                           
 22442                           ;uart.c: 29: RCSTA1bits.SPEN = 1;
 22443  004BFE  8EAB               	bsf	4011,7,c	;volatile
 22444                           
 22445                           ;uart.c: 30: TXSTA1bits.TX9 = 1;
 22446  004C00  8CAC               	bsf	4012,6,c	;volatile
 22447                           
 22448                           ;uart.c: 31: TXSTA1bits.TX9D = 1;
 22449  004C02  80AC               	bsf	4012,0,c	;volatile
 22450                           
 22451                           ;uart.c: 32: SPBRG = 3;
 22452  004C04  0E03               	movlw	3
 22453  004C06  6EAF               	movwf	4015,c	;volatile
 22454  004C08  0012               	return		;funcret
 22455  004C0A                     __end_of_UARTInit:
 22456                           	opt stack 0
 22457                           tblptru	equ	0xFF8
 22458                           tblptrh	equ	0xFF7
 22459                           tblptrl	equ	0xFF6
 22460                           tablat	equ	0xFF5
 22461                           prodh	equ	0xFF4
 22462                           prodl	equ	0xFF3
 22463                           intcon	equ	0xFF2
 22464                           intcon3	equ	0xFF0
 22465                           indf0	equ	0xFEF
 22466                           postinc0	equ	0xFEE
 22467                           plusw0	equ	0xFEB
 22468                           fsr0h	equ	0xFEA
 22469                           fsr0l	equ	0xFE9
 22470                           wreg	equ	0xFE8
 22471                           indf1	equ	0xFE7
 22472                           postinc1	equ	0xFE6
 22473                           postdec1	equ	0xFE5
 22474                           plusw1	equ	0xFE3
 22475                           fsr1h	equ	0xFE2
 22476                           fsr1l	equ	0xFE1
 22477                           indf2	equ	0xFDF
 22478                           postinc2	equ	0xFDE
 22479                           postdec2	equ	0xFDD
 22480                           plusw2	equ	0xFDB
 22481                           fsr2h	equ	0xFDA
 22482                           fsr2l	equ	0xFD9
 22483                           status	equ	0xFD8
 22484                           
 22485 ;; *************** function _ISR *****************
 22486 ;; Defined at:
 22487 ;;		line 269 in file "src/system/main.c"
 22488 ;; Parameters:    Size  Location     Type
 22489 ;;		None
 22490 ;; Auto vars:     Size  Location     Type
 22491 ;;		None
 22492 ;; Return value:  Size  Location     Type
 22493 ;;                  1    wreg      void 
 22494 ;; Registers used:
 22495 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22496 ;; Tracked objects:
 22497 ;;		On entry : 0/0
 22498 ;;		On exit  : 0/0
 22499 ;;		Unchanged: 0/0
 22500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22501 ;;      Params:         0       0       0       0       0       0       0       0       0
 22502 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22503 ;;      Temps:         19       0       0       0       0       0       0       0       0
 22504 ;;      Totals:        19       0       0       0       0       0       0       0       0
 22505 ;;Total ram usage:       19 bytes
 22506 ;; Hardware stack levels used:    1
 22507 ;; Hardware stack levels required when called:    3
 22508 ;; This function calls:
 22509 ;;		_buttonHandler
 22510 ;;		_sevenSegmentUpdate
 22511 ;;		_updateTime
 22512 ;; This function is called by:
 22513 ;;		Interrupt level 2
 22514 ;; This function uses a non-reentrant model
 22515 ;;
 22516                           
 22517                           	psect	intcode
 22518  000008                     __pintcode:
 22519                           	opt stack 0
 22520  000008                     _ISR:
 22521                           	opt stack 17
 22522                           
 22523                           ;incstack = 0
 22524  000008  8250               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 22525  00000A  CFFA F017          	movff	pclath,??_ISR+1
 22526  00000E  CFFB F018          	movff	pclatu,??_ISR+2
 22527  000012  CFE9 F019          	movff	fsr0l,??_ISR+3
 22528  000016  CFEA F01A          	movff	fsr0h,??_ISR+4
 22529  00001A  CFE1 F01B          	movff	fsr1l,??_ISR+5
 22530  00001E  CFE2 F01C          	movff	fsr1h,??_ISR+6
 22531  000022  CFD9 F01D          	movff	fsr2l,??_ISR+7
 22532  000026  CFDA F01E          	movff	fsr2h,??_ISR+8
 22533  00002A  CFF3 F01F          	movff	prodl,??_ISR+9
 22534  00002E  CFF4 F020          	movff	prodh,??_ISR+10
 22535  000032  CFF6 F021          	movff	tblptrl,??_ISR+11
 22536  000036  CFF7 F022          	movff	tblptrh,??_ISR+12
 22537  00003A  CFF8 F023          	movff	tblptru,??_ISR+13
 22538  00003E  CFF5 F024          	movff	tablat,??_ISR+14
 22539  000042  C050  F025         	movff	btemp,??_ISR+15
 22540  000046  C051  F026         	movff	btemp+1,??_ISR+16
 22541  00004A  C052  F027         	movff	btemp+2,??_ISR+17
 22542  00004E  C053  F028         	movff	btemp+3,??_ISR+18
 22543                           
 22544                           ;main.c: 271: if (PIR1bits.CCP1IF) {
 22545  000052  A49E               	btfss	3998,2,c	;volatile
 22546  000054  D012               	goto	i2l686
 22547                           
 22548                           ;main.c: 272: PIR1bits.CCP1IF = 0;
 22549  000056  949E               	bcf	3998,2,c	;volatile
 22550                           
 22551                           ;main.c: 273: PORTBbits.RB6 = ~PORTBbits.RB6;
 22552  000058  AC81               	btfss	3969,6,c	;volatile
 22553  00005A  D002               	goto	i2u780_40
 22554  00005C  0E01               	movlw	1
 22555  00005E  D001               	goto	i2u780_46
 22556  000060                     i2u780_40:
 22557  000060  0E00               	movlw	0
 22558  000062                     i2u780_46:
 22559  000062  0AFF               	xorlw	255
 22560  000064  6E16               	movwf	??_ISR& (0+255),c
 22561  000066  3A16               	swapf	??_ISR,f,c
 22562  000068  4616               	rlncf	??_ISR,f,c
 22563  00006A  4616               	rlncf	??_ISR,f,c
 22564  00006C  5081               	movf	3969,w,c	;volatile
 22565  00006E  1816               	xorwf	??_ISR,w,c
 22566  000070  0BBF               	andlw	-65
 22567  000072  1816               	xorwf	??_ISR,w,c
 22568  000074  6E81               	movwf	3969,c	;volatile
 22569                           
 22570                           ;main.c: 274: updateTime();
 22571  000076  EC1A  F026         	call	_updateTime	;wreg free
 22572  00007A                     i2l686:
 22573                           
 22574                           ;main.c: 275: }
 22575                           ;main.c: 277: if (INTCONbits.TMR0IF) {
 22576  00007A  A4F2               	btfss	intcon,2,c	;volatile
 22577  00007C  D00D               	goto	i2l687
 22578                           
 22579                           ;main.c: 278: INTCONbits.TMR0IF = 0;
 22580  00007E  94F2               	bcf	intcon,2,c	;volatile
 22581                           
 22582                           ;main.c: 279: sevenSegmentUpdate(numberToDisplay);
 22583  000080  C031  F00F         	movff	_numberToDisplay,sevenSegmentUpdate@numberToDisplay	;volatile
 22584  000084  C032  F010         	movff	_numberToDisplay+1,sevenSegmentUpdate@numberToDisplay+1	;volatile
 22585  000088  EC4F  F01A         	call	_sevenSegmentUpdate	;wreg free
 22586                           
 22587                           ;main.c: 280: buttonHandler(&buttonState);
 22588  00008C  0EF4               	movlw	low _buttonState
 22589  00008E  6E01               	movwf	buttonHandler@state,c
 22590  000090  0E01               	movlw	high _buttonState
 22591  000092  6E02               	movwf	buttonHandler@state+1,c
 22592  000094  EC17  F01C         	call	_buttonHandler	;wreg free
 22593  000098                     i2l687:
 22594                           
 22595                           ;main.c: 283: }
 22596                           ;main.c: 285: if (INTCON3bits.INT2IF) {
 22597  000098  B2F0               	btfsc	intcon3,1,c	;volatile
 22598                           
 22599                           ;main.c: 286: INTCON3bits.INT2IF = 0;
 22600  00009A  92F0               	bcf	intcon3,1,c	;volatile
 22601                           
 22602                           ;main.c: 293: }
 22603                           ;main.c: 294: if (RCIF) {
 22604  00009C  C028  F053         	movff	??_ISR+18,btemp+3
 22605  0000A0  C027  F052         	movff	??_ISR+17,btemp+2
 22606  0000A4  C026  F051         	movff	??_ISR+16,btemp+1
 22607  0000A8  C025  F050         	movff	??_ISR+15,btemp
 22608  0000AC  C024  FFF5         	movff	??_ISR+14,tablat
 22609  0000B0  C023  FFF8         	movff	??_ISR+13,tblptru
 22610  0000B4  C022  FFF7         	movff	??_ISR+12,tblptrh
 22611  0000B8  C021  FFF6         	movff	??_ISR+11,tblptrl
 22612  0000BC  C020  FFF4         	movff	??_ISR+10,prodh
 22613  0000C0  C01F  FFF3         	movff	??_ISR+9,prodl
 22614  0000C4  C01E  FFDA         	movff	??_ISR+8,fsr2h
 22615  0000C8  C01D  FFD9         	movff	??_ISR+7,fsr2l
 22616  0000CC  C01C  FFE2         	movff	??_ISR+6,fsr1h
 22617  0000D0  C01B  FFE1         	movff	??_ISR+5,fsr1l
 22618  0000D4  C01A  FFEA         	movff	??_ISR+4,fsr0h
 22619  0000D8  C019  FFE9         	movff	??_ISR+3,fsr0l
 22620  0000DC  C018  FFFB         	movff	??_ISR+2,pclatu
 22621  0000E0  C017  FFFA         	movff	??_ISR+1,pclath
 22622  0000E4  9250               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 22623  0000E6  0011               	retfie		f
 22624  0000E8                     __end_of_ISR:
 22625                           	opt stack 0
 22626                           pclatu	equ	0xFFB
 22627                           pclath	equ	0xFFA
 22628                           tblptru	equ	0xFF8
 22629                           tblptrh	equ	0xFF7
 22630                           tblptrl	equ	0xFF6
 22631                           tablat	equ	0xFF5
 22632                           prodh	equ	0xFF4
 22633                           prodl	equ	0xFF3
 22634                           intcon	equ	0xFF2
 22635                           intcon3	equ	0xFF0
 22636                           indf0	equ	0xFEF
 22637                           postinc0	equ	0xFEE
 22638                           plusw0	equ	0xFEB
 22639                           fsr0h	equ	0xFEA
 22640                           fsr0l	equ	0xFE9
 22641                           wreg	equ	0xFE8
 22642                           indf1	equ	0xFE7
 22643                           postinc1	equ	0xFE6
 22644                           postdec1	equ	0xFE5
 22645                           plusw1	equ	0xFE3
 22646                           fsr1h	equ	0xFE2
 22647                           fsr1l	equ	0xFE1
 22648                           indf2	equ	0xFDF
 22649                           postinc2	equ	0xFDE
 22650                           postdec2	equ	0xFDD
 22651                           plusw2	equ	0xFDB
 22652                           fsr2h	equ	0xFDA
 22653                           fsr2l	equ	0xFD9
 22654                           status	equ	0xFD8
 22655                           
 22656 ;; *************** function _updateTime *****************
 22657 ;; Defined at:
 22658 ;;		line 30 in file "src/stack/time.c"
 22659 ;; Parameters:    Size  Location     Type
 22660 ;;		None
 22661 ;; Auto vars:     Size  Location     Type
 22662 ;;		None
 22663 ;; Return value:  Size  Location     Type
 22664 ;;                  1    wreg      void 
 22665 ;; Registers used:
 22666 ;;		wreg, status,2, status,0
 22667 ;; Tracked objects:
 22668 ;;		On entry : 0/0
 22669 ;;		On exit  : 0/0
 22670 ;;		Unchanged: 0/0
 22671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22672 ;;      Params:         0       0       0       0       0       0       0       0       0
 22673 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22674 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22675 ;;      Totals:         0       0       0       0       0       0       0       0       0
 22676 ;;Total ram usage:        0 bytes
 22677 ;; Hardware stack levels used:    1
 22678 ;; This function calls:
 22679 ;;		Nothing
 22680 ;; This function is called by:
 22681 ;;		_ISR
 22682 ;; This function uses a non-reentrant model
 22683 ;;
 22684                           
 22685                           	psect	text106
 22686  004C34                     __ptext106:
 22687                           	opt stack 0
 22688  004C34                     _updateTime:
 22689                           	opt stack 19
 22690                           
 22691                           ;time.c: 31: time++;
 22692                           
 22693                           ;incstack = 0
 22694  004C34  0E01               	movlw	1
 22695  004C36  2629               	addwf	_time,f,c	;volatile
 22696  004C38  0E00               	movlw	0
 22697  004C3A  222A               	addwfc	_time+1,f,c	;volatile
 22698  004C3C  222B               	addwfc	_time+2,f,c	;volatile
 22699  004C3E  222C               	addwfc	_time+3,f,c	;volatile
 22700  004C40  0012               	return		;funcret
 22701  004C42                     __end_of_updateTime:
 22702                           	opt stack 0
 22703                           pclatu	equ	0xFFB
 22704                           pclath	equ	0xFFA
 22705                           tblptru	equ	0xFF8
 22706                           tblptrh	equ	0xFF7
 22707                           tblptrl	equ	0xFF6
 22708                           tablat	equ	0xFF5
 22709                           prodh	equ	0xFF4
 22710                           prodl	equ	0xFF3
 22711                           intcon	equ	0xFF2
 22712                           intcon3	equ	0xFF0
 22713                           indf0	equ	0xFEF
 22714                           postinc0	equ	0xFEE
 22715                           plusw0	equ	0xFEB
 22716                           fsr0h	equ	0xFEA
 22717                           fsr0l	equ	0xFE9
 22718                           wreg	equ	0xFE8
 22719                           indf1	equ	0xFE7
 22720                           postinc1	equ	0xFE6
 22721                           postdec1	equ	0xFE5
 22722                           plusw1	equ	0xFE3
 22723                           fsr1h	equ	0xFE2
 22724                           fsr1l	equ	0xFE1
 22725                           indf2	equ	0xFDF
 22726                           postinc2	equ	0xFDE
 22727                           postdec2	equ	0xFDD
 22728                           plusw2	equ	0xFDB
 22729                           fsr2h	equ	0xFDA
 22730                           fsr2l	equ	0xFD9
 22731                           status	equ	0xFD8
 22732                           
 22733 ;; *************** function _sevenSegmentUpdate *****************
 22734 ;; Defined at:
 22735 ;;		line 41 in file "src/system/sevenseg.c"
 22736 ;; Parameters:    Size  Location     Type
 22737 ;;  numberToDisp    2   14[COMRAM] unsigned int 
 22738 ;; Auto vars:     Size  Location     Type
 22739 ;;  i               1   20[COMRAM] unsigned char 
 22740 ;; Return value:  Size  Location     Type
 22741 ;;                  1    wreg      void 
 22742 ;; Registers used:
 22743 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22744 ;; Tracked objects:
 22745 ;;		On entry : 0/0
 22746 ;;		On exit  : 0/0
 22747 ;;		Unchanged: 0/0
 22748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22749 ;;      Params:         2       0       0       0       0       0       0       0       0
 22750 ;;      Locals:         3       0       0       0       0       0       0       0       0
 22751 ;;      Temps:          2       0       0       0       0       0       0       0       0
 22752 ;;      Totals:         7       0       0       0       0       0       0       0       0
 22753 ;;Total ram usage:        7 bytes
 22754 ;; Hardware stack levels used:    1
 22755 ;; Hardware stack levels required when called:    2
 22756 ;; This function calls:
 22757 ;;		_parseNumber
 22758 ;; This function is called by:
 22759 ;;		_ISR
 22760 ;; This function uses a non-reentrant model
 22761 ;;
 22762                           
 22763                           	psect	text107
 22764  00349E                     __ptext107:
 22765                           	opt stack 0
 22766  00349E                     _sevenSegmentUpdate:
 22767                           	opt stack 17
 22768                           
 22769                           ;sevenseg.c: 43: uint8_t static digitPointer = 0;
 22770                           ;sevenseg.c: 44: uint8_t static digitsToDisplay[3] = {0, 0, 0};
 22771                           ;sevenseg.c: 45: PORTC &= ~(unsigned)(1 << digitPointer);
 22772                           
 22773                           ;incstack = 0
 22774  00349E  C045  F011         	movff	sevenSegmentUpdate@digitPointer,??_sevenSegmentUpdate
 22775  0034A2  0E01               	movlw	1
 22776  0034A4  6E12               	movwf	(??_sevenSegmentUpdate+1)& (0+255),c
 22777  0034A6  2A11               	incf	??_sevenSegmentUpdate,f,c
 22778  0034A8  D002               	goto	i2u754_44
 22779  0034AA                     i2u754_45:
 22780  0034AA  90D8               	bcf	status,0,c
 22781  0034AC  3612               	rlcf	??_sevenSegmentUpdate+1,f,c
 22782  0034AE                     i2u754_44:
 22783  0034AE  2E11               	decfsz	??_sevenSegmentUpdate,f,c
 22784  0034B0  D7FC               	goto	i2u754_45
 22785  0034B2  5012               	movf	??_sevenSegmentUpdate+1,w,c
 22786  0034B4  0AFF               	xorlw	255
 22787  0034B6  1682               	andwf	3970,f,c	;volatile
 22788                           
 22789                           ;sevenseg.c: 46: PORTA = 0x00;
 22790  0034B8  0E00               	movlw	0
 22791  0034BA  6E80               	movwf	3968,c	;volatile
 22792                           
 22793                           ;sevenseg.c: 47: digitPointer = (unsigned)((digitPointer >= 2) ? 0 : digitPointer + 1);
 22794  0034BC  0E02               	movlw	2
 22795  0034BE  6045               	cpfslt	sevenSegmentUpdate@digitPointer,c
 22796  0034C0  D007               	goto	i2l719
 22797  0034C2  0E01               	movlw	1
 22798  0034C4  2445               	addwf	sevenSegmentUpdate@digitPointer,w,c
 22799  0034C6  6E13               	movwf	_sevenSegmentUpdate$2453,c
 22800  0034C8  6A14               	clrf	_sevenSegmentUpdate$2453+1,c
 22801  0034CA  0E00               	movlw	0
 22802  0034CC  2214               	addwfc	_sevenSegmentUpdate$2453+1,f,c
 22803  0034CE  D004               	goto	i2l721
 22804  0034D0                     i2l719:
 22805  0034D0  0E00               	movlw	0
 22806  0034D2  6E14               	movwf	_sevenSegmentUpdate$2453+1,c
 22807  0034D4  0E00               	movlw	0
 22808  0034D6  6E13               	movwf	_sevenSegmentUpdate$2453,c
 22809  0034D8                     i2l721:
 22810  0034D8  C013  F045         	movff	_sevenSegmentUpdate$2453,sevenSegmentUpdate@digitPointer
 22811                           
 22812                           ;sevenseg.c: 49: if (numberToDisplay > 999) {
 22813  0034DC  0EE8               	movlw	232
 22814  0034DE  5C0F               	subwf	sevenSegmentUpdate@numberToDisplay,w,c
 22815  0034E0  0E03               	movlw	3
 22816  0034E2  5810               	subwfb	sevenSegmentUpdate@numberToDisplay+1,w,c
 22817  0034E4  B0D8               	btfsc	status,0,c
 22818  0034E6  0012               	return	
 22819                           
 22820                           ;sevenseg.c: 51: }
 22821                           ;sevenseg.c: 52: for (uint8_t i = 0; i < 3; i++) {
 22822                           
 22823                           ;sevenseg.c: 50: return;
 22824  0034E8  0E00               	movlw	0
 22825  0034EA  6E15               	movwf	sevenSegmentUpdate@i,c
 22826  0034EC                     i2l7022:
 22827  0034EC  0E02               	movlw	2
 22828  0034EE  6415               	cpfsgt	sevenSegmentUpdate@i,c
 22829  0034F0  D001               	goto	i2l724
 22830  0034F2  D013               	goto	i2u758_40
 22831  0034F4                     i2l724:
 22832                           
 22833                           ;sevenseg.c: 53: digitsToDisplay[i] = parseNumber(numberToDisplay, i);
 22834  0034F4  5015               	movf	sevenSegmentUpdate@i,w,c
 22835  0034F6  0D01               	mullw	1
 22836  0034F8  0E39               	movlw	low sevenSegmentUpdate@digitsToDisplay
 22837  0034FA  24F3               	addwf	prodl,w,c
 22838  0034FC  6ED9               	movwf	fsr2l,c
 22839  0034FE  0E00               	movlw	high sevenSegmentUpdate@digitsToDisplay
 22840  003500  20F4               	addwfc	prodh,w,c
 22841  003502  6EDA               	movwf	fsr2h,c
 22842  003504  C00F  F008         	movff	sevenSegmentUpdate@numberToDisplay,parseNumber@numberToDisplay
 22843  003508  C010  F009         	movff	sevenSegmentUpdate@numberToDisplay+1,parseNumber@numberToDisplay+1
 22844  00350C  C015  F00A         	movff	sevenSegmentUpdate@i,parseNumber@digit
 22845  003510  EC51  F01E         	call	_parseNumber	;wreg free
 22846  003514  6EDF               	movwf	indf2,c
 22847  003516  2A15               	incf	sevenSegmentUpdate@i,f,c
 22848  003518  D7E9               	goto	i2l7022
 22849  00351A                     i2u758_40:
 22850                           
 22851                           ;sevenseg.c: 54: }
 22852                           ;sevenseg.c: 55: PORTC |= (unsigned)(1 << digitPointer);
 22853  00351A  C045  F011         	movff	sevenSegmentUpdate@digitPointer,??_sevenSegmentUpdate
 22854  00351E  0E01               	movlw	1
 22855  003520  6E12               	movwf	(??_sevenSegmentUpdate+1)& (0+255),c
 22856  003522  2A11               	incf	??_sevenSegmentUpdate,f,c
 22857  003524  D002               	goto	i2u759_44
 22858  003526                     i2u759_45:
 22859  003526  90D8               	bcf	status,0,c
 22860  003528  3612               	rlcf	??_sevenSegmentUpdate+1,f,c
 22861  00352A                     i2u759_44:
 22862  00352A  2E11               	decfsz	??_sevenSegmentUpdate,f,c
 22863  00352C  D7FC               	goto	i2u759_45
 22864  00352E  5012               	movf	??_sevenSegmentUpdate+1,w,c
 22865  003530  1282               	iorwf	3970,f,c	;volatile
 22866                           
 22867                           ;sevenseg.c: 56: PORTA = (sevenSegCharacters[digitsToDisplay[digitPointer]]);
 22868  003532  5045               	movf	sevenSegmentUpdate@digitPointer,w,c
 22869  003534  0D01               	mullw	1
 22870  003536  0E39               	movlw	low sevenSegmentUpdate@digitsToDisplay
 22871  003538  24F3               	addwf	prodl,w,c
 22872  00353A  6ED9               	movwf	fsr2l,c
 22873  00353C  0E00               	movlw	high sevenSegmentUpdate@digitsToDisplay
 22874  00353E  20F4               	addwfc	prodh,w,c
 22875  003540  6EDA               	movwf	fsr2h,c
 22876  003542  50DF               	movf	indf2,w,c
 22877  003544  6E11               	movwf	??_sevenSegmentUpdate& (0+255),c
 22878  003546  5011               	movf	??_sevenSegmentUpdate,w,c
 22879  003548  0D01               	mullw	1
 22880  00354A  0ECD               	movlw	low _sevenSegCharacters
 22881  00354C  24F3               	addwf	prodl,w,c
 22882  00354E  6ED9               	movwf	fsr2l,c
 22883  003550  0E02               	movlw	high _sevenSegCharacters
 22884  003552  20F4               	addwfc	prodh,w,c
 22885  003554  6EDA               	movwf	fsr2h,c
 22886  003556  50DF               	movf	indf2,w,c
 22887  003558  6E80               	movwf	3968,c	;volatile
 22888  00355A  0012               	return		;funcret
 22889  00355C                     __end_of_sevenSegmentUpdate:
 22890                           	opt stack 0
 22891                           pclatu	equ	0xFFB
 22892                           pclath	equ	0xFFA
 22893                           tblptru	equ	0xFF8
 22894                           tblptrh	equ	0xFF7
 22895                           tblptrl	equ	0xFF6
 22896                           tablat	equ	0xFF5
 22897                           prodh	equ	0xFF4
 22898                           prodl	equ	0xFF3
 22899                           intcon	equ	0xFF2
 22900                           intcon3	equ	0xFF0
 22901                           indf0	equ	0xFEF
 22902                           postinc0	equ	0xFEE
 22903                           plusw0	equ	0xFEB
 22904                           fsr0h	equ	0xFEA
 22905                           fsr0l	equ	0xFE9
 22906                           wreg	equ	0xFE8
 22907                           indf1	equ	0xFE7
 22908                           postinc1	equ	0xFE6
 22909                           postdec1	equ	0xFE5
 22910                           plusw1	equ	0xFE3
 22911                           fsr1h	equ	0xFE2
 22912                           fsr1l	equ	0xFE1
 22913                           indf2	equ	0xFDF
 22914                           postinc2	equ	0xFDE
 22915                           postdec2	equ	0xFDD
 22916                           plusw2	equ	0xFDB
 22917                           fsr2h	equ	0xFDA
 22918                           fsr2l	equ	0xFD9
 22919                           status	equ	0xFD8
 22920                           
 22921 ;; *************** function _parseNumber *****************
 22922 ;; Defined at:
 22923 ;;		line 59 in file "src/system/sevenseg.c"
 22924 ;; Parameters:    Size  Location     Type
 22925 ;;  numberToDisp    2    7[COMRAM] unsigned int 
 22926 ;;  digit           1    9[COMRAM] unsigned char 
 22927 ;; Auto vars:     Size  Location     Type
 22928 ;;  hundreds        1   13[COMRAM] unsigned char 
 22929 ;;  tens            1   12[COMRAM] unsigned char 
 22930 ;;  ones            1   11[COMRAM] unsigned char 
 22931 ;; Return value:  Size  Location     Type
 22932 ;;                  1    wreg      unsigned char 
 22933 ;; Registers used:
 22934 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 22935 ;; Tracked objects:
 22936 ;;		On entry : 0/0
 22937 ;;		On exit  : 0/0
 22938 ;;		Unchanged: 0/0
 22939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22940 ;;      Params:         3       0       0       0       0       0       0       0       0
 22941 ;;      Locals:         3       0       0       0       0       0       0       0       0
 22942 ;;      Temps:          1       0       0       0       0       0       0       0       0
 22943 ;;      Totals:         7       0       0       0       0       0       0       0       0
 22944 ;;Total ram usage:        7 bytes
 22945 ;; Hardware stack levels used:    1
 22946 ;; Hardware stack levels required when called:    1
 22947 ;; This function calls:
 22948 ;;		i2___lwdiv
 22949 ;; This function is called by:
 22950 ;;		_sevenSegmentUpdate
 22951 ;; This function uses a non-reentrant model
 22952 ;;
 22953                           
 22954                           	psect	text108
 22955  003CA2                     __ptext108:
 22956                           	opt stack 0
 22957  003CA2                     _parseNumber:
 22958                           	opt stack 17
 22959                           
 22960                           ;sevenseg.c: 61: uint8_t hundreds = numberToDisplay / 100u;
 22961                           
 22962                           ;incstack = 0
 22963  003CA2  C008  F001         	movff	parseNumber@numberToDisplay,i2___lwdiv@dividend
 22964  003CA6  C009  F002         	movff	parseNumber@numberToDisplay+1,i2___lwdiv@dividend+1
 22965  003CAA  0E00               	movlw	0
 22966  003CAC  6E04               	movwf	i2___lwdiv@divisor+1,c
 22967  003CAE  0E64               	movlw	100
 22968  003CB0  6E03               	movwf	i2___lwdiv@divisor,c
 22969  003CB2  ECF9  F021         	call	i2___lwdiv	;wreg free
 22970  003CB6  5001               	movf	?i2___lwdiv,w,c
 22971  003CB8  6E0E               	movwf	parseNumber@hundreds,c
 22972                           
 22973                           ;sevenseg.c: 62: uint8_t tens = (numberToDisplay - hundreds * 100u) / 10u;
 22974  003CBA  500E               	movf	parseNumber@hundreds,w,c
 22975  003CBC  0D64               	mullw	100
 22976  003CBE  1EF3               	comf	prodl,f,c
 22977  003CC0  1EF4               	comf	prodh,f,c
 22978  003CC2  4AF3               	infsnz	prodl,f,c
 22979  003CC4  2AF4               	incf	prodh,f,c
 22980  003CC6  5008               	movf	parseNumber@numberToDisplay,w,c
 22981  003CC8  24F3               	addwf	prodl,w,c
 22982  003CCA  6E01               	movwf	i2___lwdiv@dividend,c
 22983  003CCC  5009               	movf	parseNumber@numberToDisplay+1,w,c
 22984  003CCE  20F4               	addwfc	prodh,w,c
 22985  003CD0  6E02               	movwf	i2___lwdiv@dividend+1,c
 22986  003CD2  0E00               	movlw	0
 22987  003CD4  6E04               	movwf	i2___lwdiv@divisor+1,c
 22988  003CD6  0E0A               	movlw	10
 22989  003CD8  6E03               	movwf	i2___lwdiv@divisor,c
 22990  003CDA  ECF9  F021         	call	i2___lwdiv	;wreg free
 22991  003CDE  5001               	movf	?i2___lwdiv,w,c
 22992  003CE0  6E0D               	movwf	parseNumber@tens,c
 22993                           
 22994                           ;sevenseg.c: 63: uint8_t ones = (numberToDisplay - hundreds * 100u - tens * 10u);
 22995  003CE2  500D               	movf	parseNumber@tens,w,c
 22996  003CE4  0D0A               	mullw	10
 22997  003CE6  CFF3 F00B          	movff	prodl,??_parseNumber
 22998  003CEA  500E               	movf	parseNumber@hundreds,w,c
 22999  003CEC  0D64               	mullw	100
 23000  003CEE  50F3               	movf	prodl,w,c
 23001  003CF0  240B               	addwf	??_parseNumber,w,c
 23002  003CF2  0800               	sublw	0
 23003  003CF4  2408               	addwf	parseNumber@numberToDisplay,w,c
 23004  003CF6  6E0C               	movwf	parseNumber@ones,c
 23005                           
 23006                           ;sevenseg.c: 64: switch (digit) {
 23007  003CF8  D008               	goto	i2l728
 23008  003CFA                     
 23009                           ;sevenseg.c: 66: return ones;
 23010  003CFA  500C               	movf	parseNumber@ones,w,c
 23011  003CFC  0012               	return	
 23012  003CFE                     
 23013                           ;sevenseg.c: 68: return tens;
 23014  003CFE  500D               	movf	parseNumber@tens,w,c
 23015  003D00  0012               	return	
 23016  003D02                     
 23017                           ;sevenseg.c: 70: return hundreds;
 23018  003D02  500E               	movf	parseNumber@hundreds,w,c
 23019  003D04  0012               	return	
 23020  003D06  0E00               	movlw	0
 23021                           
 23022                           ;sevenseg.c: 72: }
 23023  003D08  0012               	return	
 23024  003D0A                     i2l728:
 23025  003D0A  500A               	movf	parseNumber@digit,w,c
 23026                           
 23027                           ; Switch size 1, requested type "space"
 23028                           ; Number of cases is 3, Range of values is 0 to 2
 23029                           ; switch strategies available:
 23030                           ; Name         Instructions Cycles
 23031                           ; simple_byte           10     6 (average)
 23032                           ;	Chosen strategy is simple_byte
 23033  003D0C  0A00               	xorlw	0	; case 0
 23034  003D0E  B4D8               	btfsc	status,2,c
 23035  003D10  D7F8               	goto	i2l732
 23036  003D12  0A01               	xorlw	1	; case 1
 23037  003D14  B4D8               	btfsc	status,2,c
 23038  003D16  D7F3               	goto	i2l731
 23039  003D18  0A03               	xorlw	3	; case 2
 23040  003D1A  B4D8               	btfsc	status,2,c
 23041  003D1C  D7EE               	goto	i2l729
 23042  003D1E  D7F3               	goto	i2l733
 23043  003D20                     __end_of_parseNumber:
 23044                           	opt stack 0
 23045                           pclatu	equ	0xFFB
 23046                           pclath	equ	0xFFA
 23047                           tblptru	equ	0xFF8
 23048                           tblptrh	equ	0xFF7
 23049                           tblptrl	equ	0xFF6
 23050                           tablat	equ	0xFF5
 23051                           prodh	equ	0xFF4
 23052                           prodl	equ	0xFF3
 23053                           intcon	equ	0xFF2
 23054                           intcon3	equ	0xFF0
 23055                           indf0	equ	0xFEF
 23056                           postinc0	equ	0xFEE
 23057                           plusw0	equ	0xFEB
 23058                           fsr0h	equ	0xFEA
 23059                           fsr0l	equ	0xFE9
 23060                           wreg	equ	0xFE8
 23061                           indf1	equ	0xFE7
 23062                           postinc1	equ	0xFE6
 23063                           postdec1	equ	0xFE5
 23064                           plusw1	equ	0xFE3
 23065                           fsr1h	equ	0xFE2
 23066                           fsr1l	equ	0xFE1
 23067                           indf2	equ	0xFDF
 23068                           postinc2	equ	0xFDE
 23069                           postdec2	equ	0xFDD
 23070                           plusw2	equ	0xFDB
 23071                           fsr2h	equ	0xFDA
 23072                           fsr2l	equ	0xFD9
 23073                           status	equ	0xFD8
 23074                           
 23075 ;; *************** function i2___lwdiv *****************
 23076 ;; Defined at:
 23077 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 23078 ;; Parameters:    Size  Location     Type
 23079 ;;  dividend        2    0[COMRAM] unsigned int 
 23080 ;;  divisor         2    2[COMRAM] unsigned int 
 23081 ;; Auto vars:     Size  Location     Type
 23082 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 23083 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 23084 ;; Return value:  Size  Location     Type
 23085 ;;                  2    0[COMRAM] unsigned int 
 23086 ;; Registers used:
 23087 ;;		wreg, status,2, status,0
 23088 ;; Tracked objects:
 23089 ;;		On entry : 0/0
 23090 ;;		On exit  : 0/0
 23091 ;;		Unchanged: 0/0
 23092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23093 ;;      Params:         4       0       0       0       0       0       0       0       0
 23094 ;;      Locals:         3       0       0       0       0       0       0       0       0
 23095 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23096 ;;      Totals:         7       0       0       0       0       0       0       0       0
 23097 ;;Total ram usage:        7 bytes
 23098 ;; Hardware stack levels used:    1
 23099 ;; This function calls:
 23100 ;;		Nothing
 23101 ;; This function is called by:
 23102 ;;		_parseNumber
 23103 ;; This function uses a non-reentrant model
 23104 ;;
 23105                           
 23106                           	psect	text109
 23107  0043F2                     __ptext109:
 23108                           	opt stack 0
 23109  0043F2                     i2___lwdiv:
 23110                           	opt stack 17
 23111                           
 23112                           ;incstack = 0
 23113  0043F2  0E00               	movlw	0
 23114  0043F4  6E06               	movwf	i2___lwdiv@quotient+1,c
 23115  0043F6  0E00               	movlw	0
 23116  0043F8  6E05               	movwf	i2___lwdiv@quotient,c
 23117  0043FA  5003               	movf	i2___lwdiv@divisor,w,c
 23118  0043FC  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 23119  0043FE  B4D8               	btfsc	status,2,c
 23120  004400  D01C               	goto	i2l1549
 23121  004402  0E01               	movlw	1
 23122  004404  6E07               	movwf	i2___lwdiv@counter,c
 23123  004406  D004               	goto	i2l1544
 23124  004408  90D8               	bcf	status,0,c
 23125  00440A  3603               	rlcf	i2___lwdiv@divisor,f,c
 23126  00440C  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 23127  00440E  2A07               	incf	i2___lwdiv@counter,f,c
 23128  004410                     i2l1544:
 23129  004410  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 23130  004412  D7FA               	goto	i2l1545
 23131  004414                     i2u682_40:
 23132  004414  90D8               	bcf	status,0,c
 23133  004416  3605               	rlcf	i2___lwdiv@quotient,f,c
 23134  004418  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 23135  00441A  5003               	movf	i2___lwdiv@divisor,w,c
 23136  00441C  5C01               	subwf	i2___lwdiv@dividend,w,c
 23137  00441E  5004               	movf	i2___lwdiv@divisor+1,w,c
 23138  004420  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 23139  004422  A0D8               	btfss	status,0,c
 23140  004424  D005               	goto	i2l1548
 23141  004426  5003               	movf	i2___lwdiv@divisor,w,c
 23142  004428  5E01               	subwf	i2___lwdiv@dividend,f,c
 23143  00442A  5004               	movf	i2___lwdiv@divisor+1,w,c
 23144  00442C  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 23145  00442E  8005               	bsf	i2___lwdiv@quotient,0,c
 23146  004430                     i2l1548:
 23147  004430  90D8               	bcf	status,0,c
 23148  004432  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 23149  004434  3203               	rrcf	i2___lwdiv@divisor,f,c
 23150  004436  2E07               	decfsz	i2___lwdiv@counter,f,c
 23151  004438  D7ED               	goto	i2u682_40
 23152  00443A                     i2l1549:
 23153  00443A  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 23154  00443E  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 23155  004442  0012               	return		;funcret
 23156  004444                     __end_ofi2___lwdiv:
 23157                           	opt stack 0
 23158                           pclatu	equ	0xFFB
 23159                           pclath	equ	0xFFA
 23160                           tblptru	equ	0xFF8
 23161                           tblptrh	equ	0xFF7
 23162                           tblptrl	equ	0xFF6
 23163                           tablat	equ	0xFF5
 23164                           prodh	equ	0xFF4
 23165                           prodl	equ	0xFF3
 23166                           intcon	equ	0xFF2
 23167                           intcon3	equ	0xFF0
 23168                           indf0	equ	0xFEF
 23169                           postinc0	equ	0xFEE
 23170                           plusw0	equ	0xFEB
 23171                           fsr0h	equ	0xFEA
 23172                           fsr0l	equ	0xFE9
 23173                           wreg	equ	0xFE8
 23174                           indf1	equ	0xFE7
 23175                           postinc1	equ	0xFE6
 23176                           postdec1	equ	0xFE5
 23177                           plusw1	equ	0xFE3
 23178                           fsr1h	equ	0xFE2
 23179                           fsr1l	equ	0xFE1
 23180                           indf2	equ	0xFDF
 23181                           postinc2	equ	0xFDE
 23182                           postdec2	equ	0xFDD
 23183                           plusw2	equ	0xFDB
 23184                           fsr2h	equ	0xFDA
 23185                           fsr2l	equ	0xFD9
 23186                           status	equ	0xFD8
 23187                           
 23188 ;; *************** function _buttonHandler *****************
 23189 ;; Defined at:
 23190 ;;		line 245 in file "src/system/main.c"
 23191 ;; Parameters:    Size  Location     Type
 23192 ;;  state           2    0[COMRAM] PTR volatile unsigned ch
 23193 ;;		 -> buttonState(1), 
 23194 ;; Auto vars:     Size  Location     Type
 23195 ;;  debounceValu    4    6[COMRAM] const unsigned long 
 23196 ;;  resetValue      4    2[COMRAM] const unsigned long 
 23197 ;; Return value:  Size  Location     Type
 23198 ;;                  1    wreg      void 
 23199 ;; Registers used:
 23200 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 23201 ;; Tracked objects:
 23202 ;;		On entry : 0/0
 23203 ;;		On exit  : 0/0
 23204 ;;		Unchanged: 0/0
 23205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23206 ;;      Params:         2       0       0       0       0       0       0       0       0
 23207 ;;      Locals:         8       0       0       0       0       0       0       0       0
 23208 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23209 ;;      Totals:        10       0       0       0       0       0       0       0       0
 23210 ;;Total ram usage:       10 bytes
 23211 ;; Hardware stack levels used:    1
 23212 ;; This function calls:
 23213 ;;		Nothing
 23214 ;; This function is called by:
 23215 ;;		_ISR
 23216 ;; This function uses a non-reentrant model
 23217 ;;
 23218                           
 23219                           	psect	text110
 23220  00382E                     __ptext110:
 23221                           	opt stack 0
 23222  00382E                     _buttonHandler:
 23223                           	opt stack 19
 23224                           
 23225                           ;main.c: 246: uint8_t static oldState = 0;
 23226                           ;main.c: 247: uint8_t static newState = 0;
 23227                           ;main.c: 248: uint32_t static debounceCounter = 0;
 23228                           ;main.c: 249: const uint32_t debounceValue = 0x1f;
 23229                           
 23230                           ;incstack = 0
 23231  00382E  0E1F               	movlw	31
 23232  003830  6E07               	movwf	buttonHandler@debounceValue,c
 23233  003832  0E00               	movlw	0
 23234  003834  6E08               	movwf	buttonHandler@debounceValue+1,c
 23235  003836  0E00               	movlw	0
 23236  003838  6E09               	movwf	buttonHandler@debounceValue+2,c
 23237  00383A  0E00               	movlw	0
 23238  00383C  6E0A               	movwf	buttonHandler@debounceValue+3,c
 23239                           
 23240                           ;main.c: 250: const uint32_t resetValue = 0xfff;
 23241  00383E  0EFF               	movlw	255
 23242  003840  6E03               	movwf	buttonHandler@resetValue,c
 23243  003842  0E0F               	movlw	15
 23244  003844  6E04               	movwf	buttonHandler@resetValue+1,c
 23245  003846  0E00               	movlw	0
 23246  003848  6E05               	movwf	buttonHandler@resetValue+2,c
 23247  00384A  0E00               	movlw	0
 23248  00384C  6E06               	movwf	buttonHandler@resetValue+3,c
 23249                           
 23250                           ;main.c: 251: if ((unsigned)(!(PORTB & (1<<5)))) {
 23251  00384E  BA81               	btfsc	3969,5,c	;volatile
 23252  003850  D007               	goto	i2l676
 23253                           
 23254                           ;main.c: 252: debounceCounter++;
 23255  003852  0E01               	movlw	1
 23256  003854  262D               	addwf	buttonHandler@debounceCounter,f,c
 23257  003856  0E00               	movlw	0
 23258  003858  222E               	addwfc	buttonHandler@debounceCounter+1,f,c
 23259  00385A  222F               	addwfc	buttonHandler@debounceCounter+2,f,c
 23260  00385C  2230               	addwfc	buttonHandler@debounceCounter+3,f,c
 23261                           
 23262                           ;main.c: 253: } else {
 23263  00385E  D008               	goto	i2l677
 23264  003860                     i2l676:
 23265                           
 23266                           ;main.c: 254: debounceCounter = 0;
 23267  003860  0E00               	movlw	0
 23268  003862  6E2D               	movwf	buttonHandler@debounceCounter,c
 23269  003864  0E00               	movlw	0
 23270  003866  6E2E               	movwf	buttonHandler@debounceCounter+1,c
 23271  003868  0E00               	movlw	0
 23272  00386A  6E2F               	movwf	buttonHandler@debounceCounter+2,c
 23273  00386C  0E00               	movlw	0
 23274  00386E  6E30               	movwf	buttonHandler@debounceCounter+3,c
 23275  003870                     i2l677:
 23276                           
 23277                           ;main.c: 255: }
 23278                           ;main.c: 256: newState = (unsigned) ((debounceCounter >= debounceValue) ? 1 : 0);
 23279  003870  5007               	movf	buttonHandler@debounceValue,w,c
 23280  003872  5C2D               	subwf	buttonHandler@debounceCounter,w,c
 23281  003874  5008               	movf	buttonHandler@debounceValue+1,w,c
 23282  003876  582E               	subwfb	buttonHandler@debounceCounter+1,w,c
 23283  003878  5009               	movf	buttonHandler@debounceValue+2,w,c
 23284  00387A  582F               	subwfb	buttonHandler@debounceCounter+2,w,c
 23285  00387C  500A               	movf	buttonHandler@debounceValue+3,w,c
 23286  00387E  5830               	subwfb	buttonHandler@debounceCounter+3,w,c
 23287  003880  A0D8               	btfss	status,0,c
 23288  003882  D002               	goto	i2u749_40
 23289  003884  0E01               	movlw	1
 23290  003886  D001               	goto	i2u750_40
 23291  003888                     i2u749_40:
 23292  003888  0E00               	movlw	0
 23293  00388A                     i2u750_40:
 23294  00388A  6E46               	movwf	buttonHandler@newState,c
 23295                           
 23296                           ;main.c: 257: if (newState && !oldState) {
 23297  00388C  5046               	movf	buttonHandler@newState,w,c
 23298  00388E  B4D8               	btfsc	status,2,c
 23299  003890  D011               	goto	i2l678
 23300  003892  5047               	movf	buttonHandler@oldState,w,c
 23301  003894  A4D8               	btfss	status,2,c
 23302  003896  D00E               	goto	i2l678
 23303                           
 23304                           ;main.c: 258: debounceCounter = debounceValue;
 23305  003898  C007  F02D         	movff	buttonHandler@debounceValue,buttonHandler@debounceCounter
 23306  00389C  C008  F02E         	movff	buttonHandler@debounceValue+1,buttonHandler@debounceCounter+1
 23307  0038A0  C009  F02F         	movff	buttonHandler@debounceValue+2,buttonHandler@debounceCounter+2
 23308  0038A4  C00A  F030         	movff	buttonHandler@debounceValue+3,buttonHandler@debounceCounter+3
 23309                           
 23310                           ;main.c: 259: *state = 1;
 23311  0038A8  C001  FFD9         	movff	buttonHandler@state,fsr2l
 23312  0038AC  C002  FFDA         	movff	buttonHandler@state+1,fsr2h
 23313  0038B0  0E01               	movlw	1
 23314  0038B2  D005               	goto	L10
 23315  0038B4                     i2l678:
 23316                           
 23317                           ;main.c: 261: *state = 0;
 23318  0038B4  C001  FFD9         	movff	buttonHandler@state,fsr2l
 23319  0038B8  C002  FFDA         	movff	buttonHandler@state+1,fsr2h
 23320  0038BC  0E00               	movlw	0
 23321  0038BE                     L10:
 23322  0038BE  6EDF               	movwf	indf2,c
 23323                           
 23324                           ;main.c: 262: }
 23325                           ;main.c: 263: if (debounceCounter > resetValue)
 23326  0038C0  502D               	movf	buttonHandler@debounceCounter,w,c
 23327  0038C2  5C03               	subwf	buttonHandler@resetValue,w,c
 23328  0038C4  502E               	movf	buttonHandler@debounceCounter+1,w,c
 23329  0038C6  5804               	subwfb	buttonHandler@resetValue+1,w,c
 23330  0038C8  502F               	movf	buttonHandler@debounceCounter+2,w,c
 23331  0038CA  5805               	subwfb	buttonHandler@resetValue+2,w,c
 23332  0038CC  5030               	movf	buttonHandler@debounceCounter+3,w,c
 23333  0038CE  5806               	subwfb	buttonHandler@resetValue+3,w,c
 23334  0038D0  A0D8               	btfss	status,0,c
 23335  0038D2  00FF               	reset		;# 
 23336                           
 23337                           ;main.c: 266: oldState = newState;
 23338  0038D4  C046  F047         	movff	buttonHandler@newState,buttonHandler@oldState
 23339  0038D8  0012               	return		;funcret
 23340  0038DA                     __end_of_buttonHandler:
 23341                           	opt stack 0
 23342                           pclatu	equ	0xFFB
 23343                           pclath	equ	0xFFA
 23344                           tblptru	equ	0xFF8
 23345                           tblptrh	equ	0xFF7
 23346                           tblptrl	equ	0xFF6
 23347                           tablat	equ	0xFF5
 23348                           prodh	equ	0xFF4
 23349                           prodl	equ	0xFF3
 23350                           intcon	equ	0xFF2
 23351                           intcon3	equ	0xFF0
 23352                           indf0	equ	0xFEF
 23353                           postinc0	equ	0xFEE
 23354                           plusw0	equ	0xFEB
 23355                           fsr0h	equ	0xFEA
 23356                           fsr0l	equ	0xFE9
 23357                           wreg	equ	0xFE8
 23358                           indf1	equ	0xFE7
 23359                           postinc1	equ	0xFE6
 23360                           postdec1	equ	0xFE5
 23361                           plusw1	equ	0xFE3
 23362                           fsr1h	equ	0xFE2
 23363                           fsr1l	equ	0xFE1
 23364                           indf2	equ	0xFDF
 23365                           postinc2	equ	0xFDE
 23366                           postdec2	equ	0xFDD
 23367                           plusw2	equ	0xFDB
 23368                           fsr2h	equ	0xFDA
 23369                           fsr2l	equ	0xFD9
 23370                           status	equ	0xFD8
 23371                           pclatu	equ	0xFFB
 23372                           pclath	equ	0xFFA
 23373                           tblptru	equ	0xFF8
 23374                           tblptrh	equ	0xFF7
 23375                           tblptrl	equ	0xFF6
 23376                           tablat	equ	0xFF5
 23377                           prodh	equ	0xFF4
 23378                           prodl	equ	0xFF3
 23379                           intcon	equ	0xFF2
 23380                           intcon3	equ	0xFF0
 23381                           indf0	equ	0xFEF
 23382                           postinc0	equ	0xFEE
 23383                           plusw0	equ	0xFEB
 23384                           fsr0h	equ	0xFEA
 23385                           fsr0l	equ	0xFE9
 23386                           wreg	equ	0xFE8
 23387                           indf1	equ	0xFE7
 23388                           postinc1	equ	0xFE6
 23389                           postdec1	equ	0xFE5
 23390                           plusw1	equ	0xFE3
 23391                           fsr1h	equ	0xFE2
 23392                           fsr1l	equ	0xFE1
 23393                           indf2	equ	0xFDF
 23394                           postinc2	equ	0xFDE
 23395                           postdec2	equ	0xFDD
 23396                           plusw2	equ	0xFDB
 23397                           fsr2h	equ	0xFDA
 23398                           fsr2l	equ	0xFD9
 23399                           status	equ	0xFD8
 23400                           
 23401                           	psect	rparam
 23402  0000                     pclatu	equ	0xFFB
 23403                           pclath	equ	0xFFA
 23404                           tblptru	equ	0xFF8
 23405                           tblptrh	equ	0xFF7
 23406                           tblptrl	equ	0xFF6
 23407                           tablat	equ	0xFF5
 23408                           prodh	equ	0xFF4
 23409                           prodl	equ	0xFF3
 23410                           intcon	equ	0xFF2
 23411                           intcon3	equ	0xFF0
 23412                           indf0	equ	0xFEF
 23413                           postinc0	equ	0xFEE
 23414                           plusw0	equ	0xFEB
 23415                           fsr0h	equ	0xFEA
 23416                           fsr0l	equ	0xFE9
 23417                           wreg	equ	0xFE8
 23418                           indf1	equ	0xFE7
 23419                           postinc1	equ	0xFE6
 23420                           postdec1	equ	0xFE5
 23421                           plusw1	equ	0xFE3
 23422                           fsr1h	equ	0xFE2
 23423                           fsr1l	equ	0xFE1
 23424                           indf2	equ	0xFDF
 23425                           postinc2	equ	0xFDE
 23426                           postdec2	equ	0xFDD
 23427                           plusw2	equ	0xFDB
 23428                           fsr2h	equ	0xFDA
 23429                           fsr2l	equ	0xFD9
 23430                           status	equ	0xFD8
 23431                           
 23432                           	psect	temp
 23433  000050                     btemp:
 23434                           	opt stack 0
 23435  000050                     	ds	1
 23436  0000                     int$flags	set	btemp
 23437  0000                     wtemp6	set	btemp+1
 23438                           pclatu	equ	0xFFB
 23439                           pclath	equ	0xFFA
 23440                           tblptru	equ	0xFF8
 23441                           tblptrh	equ	0xFF7
 23442                           tblptrl	equ	0xFF6
 23443                           tablat	equ	0xFF5
 23444                           prodh	equ	0xFF4
 23445                           prodl	equ	0xFF3
 23446                           intcon	equ	0xFF2
 23447                           intcon3	equ	0xFF0
 23448                           indf0	equ	0xFEF
 23449                           postinc0	equ	0xFEE
 23450                           plusw0	equ	0xFEB
 23451                           fsr0h	equ	0xFEA
 23452                           fsr0l	equ	0xFE9
 23453                           wreg	equ	0xFE8
 23454                           indf1	equ	0xFE7
 23455                           postinc1	equ	0xFE6
 23456                           postdec1	equ	0xFE5
 23457                           plusw1	equ	0xFE3
 23458                           fsr1h	equ	0xFE2
 23459                           fsr1l	equ	0xFE1
 23460                           indf2	equ	0xFDF
 23461                           postinc2	equ	0xFDE
 23462                           postdec2	equ	0xFDD
 23463                           plusw2	equ	0xFDB
 23464                           fsr2h	equ	0xFDA
 23465                           fsr2l	equ	0xFD9
 23466                           status	equ	0xFD8


Data Sizes:
    Strings     1507
    Constant    11
    Data        52
    BSS         446
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      79
    BANK0           160    160     160
    BANK1           256    139     245
    BANK2           256     17     250
    BANK3           256      0     121
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ethernetController_dropPacket@frame	PTR struct ethernetFrame size(2) Largest target is 121
		 -> stack.ethernet(BANK3[15]), stack(BANK3[121]), 

    ultoa@buf	PTR unsigned char  size(2) Largest target is 10
		 -> intToString@number(BANK2[10]), 

    sp__ultoa	PTR unsigned char  size(2) Largest target is 10
		 -> intToString@number(BANK2[10]), 

    ltoa@buf	PTR unsigned char  size(2) Largest target is 10
		 -> intToString@number(BANK2[10]), 

    ltoa@cp	PTR unsigned char  size(2) Largest target is 10
		 -> intToString@number(BANK2[10]), 

    ipv4_setToAllZero@ip	PTR struct ipv4_address size(2) Largest target is 4
		 -> arp_init@ip(BANK0[4]), arp_probe@ipSender(BANK1[4]), 

    ipv4_isAllZero@ip	PTR struct ipv4_address size(2) Largest target is 32
		 -> arp_parseFromRXBuffer@arp(BANK0[32]), 

    ipv4_cmp@b	PTR struct ipv4_address size(2) Largest target is 32
		 -> arp_checkForEntry@ip(BANK0[4]), arp_sendReply@myIP(BANK1[4]), arp_parseFromRXBuffer@arp(BANK0[32]), 

    ipv4_cmp@a	PTR struct ipv4_address size(2) Largest target is 112
		 -> arp_table(BANK2[112]), arp_sendReply@request(BANK1[32]), arp_parseFromRXBuffer@arp(BANK0[32]), 

    ipv4_SrcAddrChanged@err	PTR struct error size(2) Largest target is 3
		 -> arp_background@err(BANK1[3]), 

    arpStatus	PTR struct error size(2) Largest target is 3
		 -> NULL(NULL[0]), arp_background@err(BANK1[3]), 

    ipv4_handleNewPacket@frame	PTR struct ethernetFrame size(2) Largest target is 121
		 -> stack.ethernet(BANK3[15]), stack(BANK3[121]), 

    ipv4_checkHeaderChecksum@header	PTR struct ipv4_header size(2) Largest target is 23
		 -> ipv4_handleNewPacket@ip(BANK0[23]), 

    ipv4_parseHeader@field	PTR struct memoryField size(2) Largest target is 9
		 -> ipv4_handleNewPacket@headerField(BANK0[9]), 

    ipv4_calculateHeaderChecksum@header	PTR struct ipv4_header size(2) Largest target is 23
		 -> ipv4_checkHeaderChecksum@testHeader(BANK0[23]), 

    arp_checkForEntry@index	PTR unsigned char  size(2) Largest target is 1
		 -> arp_probe@index(BANK1[1]), 

    arp_parseFromRXBuffer@frame	PTR struct ethernetFrame size(2) Largest target is 121
		 -> stack.ethernet(BANK3[15]), stack(BANK3[121]), 

    arp_handleNewPacket@frame	PTR struct ethernetFrame size(2) Largest target is 121
		 -> stack.ethernet(BANK3[15]), stack(BANK3[121]), 

    sp__arpEntryToString	PTR unsigned char  size(2) Largest target is 50
		 -> arpEntryToString@string(BANK2[50]), 

    sp__ipAdressToString	PTR unsigned char  size(2) Largest target is 16
		 -> ipAdressToString@address(BANK2[16]), 

    sp__ipProtocolToString	PTR unsigned char  size(2) Largest target is 17
		 -> STR_58(CODE[17]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[5]), 

    sp__hexToString	PTR unsigned char  size(2) Largest target is 10
		 -> hexToString@number(BANK1[10]), 

    sp__ltoa	PTR unsigned char  size(2) Largest target is 10
		 -> intToString@number(BANK2[10]), 

    UARTTransmitText@str	PTR const unsigned char  size(2) Largest target is 64
		 -> STR_106(CODE[39]), STR_105(CODE[59]), STR_104(CODE[5]), STR_103(CODE[38]), 
		 -> STR_102(CODE[23]), STR_101(CODE[30]), STR_100(CODE[45]), STR_99(CODE[64]), 
		 -> STR_98(CODE[35]), STR_97(CODE[5]), STR_96(CODE[42]), STR_95(CODE[19]), 
		 -> STR_94(CODE[2]), STR_93(CODE[3]), STR_92(CODE[3]), STR_91(CODE[3]), 
		 -> STR_90(CODE[3]), STR_89(CODE[5]), STR_88(CODE[2]), STR_87(CODE[2]), 
		 -> STR_86(CODE[7]), STR_85(CODE[11]), STR_84(CODE[3]), STR_83(CODE[33]), 
		 -> STR_82(CODE[24]), STR_81(CODE[36]), STR_80(CODE[4]), STR_79(CODE[11]), 
		 -> STR_78(CODE[21]), STR_77(CODE[7]), STR_76(CODE[41]), STR_75(CODE[7]), 
		 -> STR_74(CODE[13]), STR_73(CODE[30]), STR_72(CODE[26]), STR_71(CODE[4]), 
		 -> STR_70(CODE[30]), STR_69(CODE[2]), STR_68(CODE[3]), STR_67(CODE[16]), 
		 -> STR_66(CODE[15]), STR_65(CODE[10]), STR_64(CODE[2]), STR_63(CODE[3]), 
		 -> STR_62(CODE[5]), STR_61(CODE[3]), STR_60(CODE[2]), STR_59(CODE[39]), 
		 -> arpEntryToString@string(BANK2[50]), ipAdressToString@address(BANK2[16]), STR_58(CODE[17]), STR_57(CODE[4]), 
		 -> STR_56(CODE[4]), STR_55(CODE[5]), STR_54(CODE[18]), STR_53(CODE[4]), 
		 -> STR_52(CODE[5]), macToString@address(BANK0[18]), hexToString@number(BANK1[10]), intToString@number(BANK2[10]), 
		 -> STR_51(CODE[5]), STR_50(CODE[9]), STR_49(CODE[30]), STR_48(CODE[34]), 
		 -> STR_47(CODE[55]), STR_46(CODE[37]), STR_45(CODE[15]), STR_44(CODE[14]), 
		 -> STR_43(CODE[19]), STR_42(CODE[30]), STR_41(CODE[17]), STR_40(CODE[8]), 
		 -> STR_39(CODE[29]), STR_38(CODE[29]), STR_37(CODE[20]), STR_36(CODE[19]), 
		 -> STR_35(CODE[19]), STR_34(CODE[13]), STR_33(CODE[51]), STR_32(CODE[4]), 
		 -> STR_31(CODE[23]), STR_30(CODE[12]), STR_29(CODE[4]), STR_28(CODE[9]), 
		 -> STR_27(CODE[2]), STR_26(CODE[12]), STR_25(CODE[24]), STR_24(CODE[51]), 
		 -> STR_23(CODE[49]), STR_22(CODE[51]), STR_21(CODE[2]), STR_20(CODE[3]), 
		 -> STR_19(CODE[3]), STR_18(CODE[3]), STR_17(CODE[5]), STR_16(CODE[2]), 
		 -> STR_15(CODE[3]), STR_14(CODE[5]), STR_13(CODE[3]), STR_12(CODE[3]), 
		 -> STR_11(CODE[2]), STR_10(CODE[20]), STR_9(CODE[7]), STR_8(CODE[6]), 
		 -> STR_7(CODE[2]), STR_6(CODE[2]), STR_5(CODE[16]), STR_4(CODE[10]), 
		 -> STR_3(CODE[12]), STR_2(CODE[2]), STR_1(CODE[2]), ethernetController_getDeviceName@string(BANK0[11]), 

    buttonHandler@state	PTR volatile unsigned char  size(2) Largest target is 1
		 -> buttonState(BANK1[1]), 

    handleStackBackgroundTasks@stack	PTR volatile struct stack size(2) Largest target is 121
		 -> stack(BANK3[121]), 

    mac_setAllZero@mac	PTR struct macaddress size(2) Largest target is 6
		 -> arp_init@mac(BANK0[6]), arp_sendRequest@targetMAC(BANK1[6]), 

    mac_cmp@b	PTR struct macaddress size(2) Largest target is 32
		 -> arp_parseFromRXBuffer@arp(BANK0[32]), 

    mac_cmp@a	PTR struct macaddress size(2) Largest target is 32
		 -> arp_parseFromRXBuffer@arp(BANK0[32]), 

    mac_isAllZero@mac	PTR struct macaddress size(2) Largest target is 32
		 -> arp_parseFromRXBuffer@arp(BANK0[32]), 

    mac_setToBroadcast@mac	PTR struct macaddress size(2) Largest target is 6
		 -> arp_send@destination(BANK0[6]), 

    sp__etherTypeToString	PTR unsigned char  size(2) Largest target is 18
		 -> STR_54(CODE[18]), STR_53(CODE[4]), STR_52(CODE[5]), 

    sp__macToString	PTR unsigned char  size(2) Largest target is 18
		 -> macToString@address(BANK0[18]), 

    sp__intToString	PTR unsigned char  size(2) Largest target is 10
		 -> intToString@number(BANK2[10]), 

    ethernet_rxGetNewFrame@frame	PTR struct ethernetFrame size(2) Largest target is 121
		 -> stack.ethernet(BANK3[15]), stack(BANK3[121]), 

    ethernet_txFrameRequest@frame	PTR struct ethernetFrame size(2) Largest target is 34
		 -> arp_send@ethFrame(BANK0[34]), 

    enc424j600_updateReceiveStatusVector@rsv	PTR unsigned char  size(2) Largest target is 6
		 -> ethernetController_getRSV@temp(BANK1[6]), 

    enc424j600_readPHYRegister@data	PTR unsigned int  size(2) Largest target is 2
		 -> ethernetController_updateLinkStatus@temp16(BANK0[2]), 

    enc424j600_readControlRegisterUnbanked@data	PTR unsigned char  size(2) Largest target is 6
		 -> enc424j600_clearInterruptFlag@temp(BANK0[1]), enc424j600_getInterruptFlags@high(BANK0[1]), enc424j600_getInterruptFlags@low(BANK0[1]), enc424j600_disable@temp(COMRAM[1]), 
		 -> enc424j600_enable@temp(COMRAM[1]), enc424j600_disableAutoMACInsertion@temp(COMRAM[1]), enc424j600_enableAutoMACInsertion@temp(BANK0[1]), enc424j600_getPacketCount@lowByte(BANK0[1]), 
		 -> enc424j600_readPHYRegister@highByte(BANK0[1]), enc424j600_readPHYRegister@lowByte(BANK0[1]), enc424j600_readPHYRegister@temp(BANK0[1]), ethernetController_setLEDConfig@data(BANK0[1]), 
		 -> ethernetController_updateLinkStatus@temp(BANK0[1]), mac.address(COMRAM[6]), ethernetController_getMacAddress@mac(BANK0[6]), ethernetController_getSiliconRevision@data(COMRAM[1]), 
		 -> ethernetController_checkDeviceId@data(BANK0[1]), ethernetController_softReset@receivedData(BANK0[2]), 

    enc424j600_writeControlRegisterUnbanked@data	PTR unsigned char  size(2) Largest target is 6
		 -> enc424j600_clearInterruptFlag@temp(BANK0[1]), enc424j600_disable@temp(COMRAM[1]), enc424j600_enable@temp(COMRAM[1]), enc424j600_disableAutoMACInsertion@temp(COMRAM[1]), 
		 -> enc424j600_enableAutoMACInsertion@temp(BANK0[1]), enc424j600_setRXTailPointer@highByte(BANK0[1]), enc424j600_setRXTailPointer@lowByte(BANK0[1]), enc424j600_setRXBufferStartAddress@highByte(BANK0[1]), 
		 -> enc424j600_setRXBufferStartAddress@lowByte(BANK0[1]), enc424j600_setTXStartAddress@highByte(BANK0[1]), enc424j600_setTXStartAddress@lowByte(BANK0[1]), enc424j600_setTXLength@highByte(BANK0[1]), 
		 -> enc424j600_setTXLength@lowByte(BANK0[1]), enc424j600_readPHYRegister@temp(BANK0[1]), enc424j600_readPHYRegister@unusedBits(BANK0[1]), enc424j600_readPHYRegister@PHYaddress(BANK0[1]), 
		 -> ethernetController_setLEDConfig@data(BANK0[1]), mac.address(COMRAM[6]), ethernetController_setMacAddress@mac(COMRAM[6]), ethernetController_softReset@dataToSend(BANK0[2]), 

    enc424j600_readSPI@data	PTR unsigned char  size(2) Largest target is 6
		 -> enc424j600_clearInterruptFlag@temp(BANK0[1]), enc424j600_getInterruptFlags@high(BANK0[1]), enc424j600_getInterruptFlags@low(BANK0[1]), enc424j600_disable@temp(COMRAM[1]), 
		 -> enc424j600_enable@temp(COMRAM[1]), enc424j600_disableAutoMACInsertion@temp(COMRAM[1]), enc424j600_enableAutoMACInsertion@temp(BANK0[1]), enc424j600_getPacketCount@lowByte(BANK0[1]), 
		 -> enc424j600_readPHYRegister@highByte(BANK0[1]), enc424j600_readPHYRegister@lowByte(BANK0[1]), enc424j600_readPHYRegister@temp(BANK0[1]), ethernetController_setLEDConfig@data(BANK0[1]), 
		 -> ethernetController_updateLinkStatus@temp(BANK0[1]), ethernetController_streamFromRXBuffer@temp(BANK0[1]), ethernetController_updateNextPacketPointer@newPointerH(BANK0[1]), ethernetController_updateNextPacketPointer@newPointerL(BANK0[1]), 
		 -> ethernetController_getRSV@temp(BANK1[6]), ethernetController_getEtherTypeField@lowByte(BANK0[1]), ethernetController_getEtherTypeField@highByte(BANK0[1]), ethernetController_getSourceMACAddress@temp(BANK0[1]), 
		 -> ethernetController_getDestinationMACAddress@temp(COMRAM[1]), mac.address(COMRAM[6]), ethernetController_getMacAddress@mac(BANK0[6]), ethernetController_getSiliconRevision@data(COMRAM[1]), 
		 -> ethernetController_checkDeviceId@data(BANK0[1]), ethernetController_softReset@receivedData(BANK0[2]), 

    enc424j600_writeSPI@data	PTR unsigned char  size(2) Largest target is 6
		 -> enc424j600_clearInterruptFlag@temp(BANK0[1]), enc424j600_disable@temp(COMRAM[1]), enc424j600_enable@temp(COMRAM[1]), enc424j600_disableAutoMACInsertion@temp(COMRAM[1]), 
		 -> enc424j600_enableAutoMACInsertion@temp(BANK0[1]), enc424j600_setRXTailPointer@highByte(BANK0[1]), enc424j600_setRXTailPointer@lowByte(BANK0[1]), enc424j600_setRXBufferStartAddress@highByte(BANK0[1]), 
		 -> enc424j600_setRXBufferStartAddress@lowByte(BANK0[1]), enc424j600_setERXDATAReadPointer@highByte(BANK0[1]), enc424j600_setERXDATAReadPointer@lowByte(BANK0[1]), enc424j600_setERXDATAReadPointer@opcode(BANK0[1]), 
		 -> enc424j600_setGPDATAReadPointer@highByte(COMRAM[1]), enc424j600_setGPDATAReadPointer@lowByte(COMRAM[1]), enc424j600_setGPDATAReadPointer@opcode(COMRAM[1]), enc424j600_setGPDATAWritePointer@highByte(BANK0[1]), 
		 -> enc424j600_setGPDATAWritePointer@lowByte(BANK0[1]), enc424j600_setGPDATAWritePointer@opcode(BANK0[1]), enc424j600_setTXStartAddress@highByte(BANK0[1]), enc424j600_setTXStartAddress@lowByte(BANK0[1]), 
		 -> enc424j600_setTXLength@highByte(BANK0[1]), enc424j600_setTXLength@lowByte(BANK0[1]), enc424j600_readPHYRegister@temp(BANK0[1]), enc424j600_readPHYRegister@unusedBits(BANK0[1]), 
		 -> enc424j600_readPHYRegister@PHYaddress(BANK0[1]), enc424j600_readControlRegisterUnbanked@addr(BANK0[1]), enc424j600_readControlRegisterUnbanked@opcode(BANK0[1]), enc424j600_writeControlRegisterUnbanked@addr(BANK0[1]), 
		 -> enc424j600_writeControlRegisterUnbanked@opcode(BANK0[1]), enc424j600_writeSingleByte@opcode(BANK0[1]), ethernetController_setLEDConfig@data(BANK0[1]), ethernetController_streamFromRXBuffer@opcode(BANK0[1]), 
		 -> ethernetController_updateNextPacketPointer@opcode(BANK0[1]), ethernetController_getRSV@opcode(BANK0[1]), ethernetController_getEtherTypeField@opcode(BANK0[1]), ethernetController_getSourceMACAddress@opcode(BANK0[1]), 
		 -> ethernetController_getDestinationMACAddress@opcode(COMRAM[1]), ethernetController_writeEtherTypeFieldToBuffer@opcode(BANK0[1]), ethernetController_writeEtherTypeFieldToBuffer@highByte(BANK0[1]), ethernetController_writeEtherTypeFieldToBuffer@lowByte(BANK0[1]), 
		 -> ethernetController_writeDestinationMACAddress@opcode(BANK0[1]), ethernetController_writeDestinationMACAddress@data(BANK0[6]), ethernetController_streamToTransmitBuffer@data(BANK0[1]), ethernetController_streamToTransmitBuffer@opcode(BANK0[1]), 
		 -> mac.address(COMRAM[6]), ethernetController_setMacAddress@mac(COMRAM[6]), ethernetController_softReset@dataToSend(BANK0[2]), 

    ethernetController_updateLinkStatus@state	PTR struct ethernetConnection size(2) Largest target is 121
		 -> stack(BANK3[121]), 

    sp__ethernetController_getDeviceName	PTR unsigned char  size(2) Largest target is 11
		 -> ethernetController_getDeviceName@string(BANK0[11]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->_sevenSegmentUpdate
    _sevenSegmentUpdate->_parseNumber
    _parseNumber->i2___lwdiv

Critical Paths under _main in BANK0

    _stack_init->_arp_init
    _arp_init->_arp_setNewEntry
    _srand->_ethernetController_getMacAddress
    _printEthernetState->_UARTTransmitText
    _printErrorMessage->_UARTTransmitText
    _ipv4_setIPSourceAddress->_UARTTransmitText
    _ipv4_background->_UARTTransmitText
    _ethernet_rxGetNewFrame->_arp_handleNewPacket
    _ipv4_handleNewPacket->_ipv4_checkHeaderChecksum
    _ipv4_parseHeader->_ethernetController_streamFromRXBuffer
    _ipv4_checkHeaderChecksum->_UARTTransmitText
    _hexToString->_hexToChar
    _ethernetController_updateNextPacketPointer->_enc424j600_setERXDATAReadPointer
    _ethernetController_getRSV->_enc424j600_updateReceiveStatusVector
    _ethernetController_getEtherTypeField->_enc424j600_setERXDATAReadPointer
    _ethernetController_dropPacket->_enc424j600_setRXTailPointer
    _ethernetController_getNextPacketPointer->_enc424j600_getNextPacketPointer
    _arp_setNewEntry->_getMillis
    _arp_sendReply->_arp_send
    _macToString->_ethernetController_getMacAddress
    _arp_parseFromRXBuffer->_ethernetController_streamFromRXBuffer
    _ethernetController_streamFromRXBuffer->_enc424j600_setERXDATAReadPointer
    _UARTTransmitInt->_UARTTransmitText
    _ethernetController_updateLinkStatus->_enc424j600_readPHYRegister
    _enc424j600_readPHYRegister->_enc424j600_readControlRegisterUnbanked
    _enc424j600_readPHYRegister->_enc424j600_writeControlRegisterUnbanked
    _ethernetController_setLEDConfig->_enc424j600_readControlRegisterUnbanked
    _ethernetController_setLEDConfig->_enc424j600_writeControlRegisterUnbanked
    _ethernetController_pollInterruptFlags->_enc424j600_getInterruptFlags
    _enc424j600_getInterruptFlags->_enc424j600_readControlRegisterUnbanked
    _ethernetController_newPacketAvailable->_enc424j600_getPacketCount
    _ethernetController_clearInterruptFlag->_enc424j600_clearInterruptFlag
    _enc424j600_clearInterruptFlag->_enc424j600_readControlRegisterUnbanked
    _enc424j600_clearInterruptFlag->_enc424j600_writeControlRegisterUnbanked
    _arp_background->_arp_probe
    _rand->___lmul
    _ipAdressToString->___lwmod
    ___lwmod->_rand
    _intToString->_ltoa
    _ltoa->_ultoa
    _ultoa->___lldiv
    _arp_sendRequest->_arp_send
    _ethernetController_getMacAddress->_enc424j600_readControlRegisterUnbanked
    _arp_send->_ethernet_txFrameRequest
    _ethernet_txFrameRequest->_memory_txFrameRequest
    _memory_txFrameRequest->_checkForOverlap
    _checkForOverlap->_checkForOverlapSwitched
    _ethernetController_writeEtherTypeFieldToBuffer->_enc424j600_setGPDATAWritePointer
    _ethernetController_writeDestinationMACAddress->_enc424j600_setGPDATAWritePointer
    _ethernetController_streamToTransmitBuffer->_enc424j600_setGPDATAWritePointer
    _enc424j600_setGPDATAWritePointer->_enc424j600_writeSPI
    _ethernetController_sendPacket->_enc424j600_setTXLength
    _ethernetController_sendPacket->_enc424j600_setTXStartAddress
    _enc424j600_setTXStartAddress->_enc424j600_writeControlRegisterUnbanked
    _enc424j600_setTXLength->_enc424j600_writeControlRegisterUnbanked
    _ethernetController_getSourceMACAddress->_enc424j600_setERXDATAReadPointer
    _enc424j600_setERXDATAReadPointer->_enc424j600_writeSPI
    _arp_checkForEntry->_ipv4_cmp
    _UARTTransmitText->_macToString
    _ethernetController_init->_ethernetController_softReset
    _ethernetController_softReset->_enc424j600_readControlRegisterUnbanked
    _ethernetController_softReset->_enc424j600_writeControlRegisterUnbanked
    _ethernetController_checkDeviceId->_enc424j600_readControlRegisterUnbanked
    _enc424j600_setRXTailPointer->_enc424j600_writeControlRegisterUnbanked
    _enc424j600_setRXBufferStartAddress->_enc424j600_writeControlRegisterUnbanked
    _enc424j600_enableReception->_enc424j600_writeSingleByte
    _enc424j600_writeSingleByte->_enc424j600_writeSPI
    _enc424j600_enableAutoMACInsertion->_enc424j600_readControlRegisterUnbanked
    _enc424j600_enableAutoMACInsertion->_enc424j600_writeControlRegisterUnbanked
    _enc424j600_writeControlRegisterUnbanked->_enc424j600_writeSPI
    _ethernetController_getCurrentPacketCount->_enc424j600_getPacketCount
    _enc424j600_getPacketCount->_enc424j600_readControlRegisterUnbanked
    _enc424j600_readControlRegisterUnbanked->_enc424j600_readSPI
    _enc424j600_readControlRegisterUnbanked->_enc424j600_writeSPI

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_handleStackBackgroundTasks
    _handleStackBackgroundTasks->_ethernet_rxGetNewFrame
    _ethernet_rxGetNewFrame->_arp_handleNewPacket
    _arp_handleNewPacket->_arp_sendReply
    _arp_background->_arp_probe
    _arp_probe->_arp_sendRequest

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                20    20      0  534365
                                            137 BANK1      2     2      0
                                              0 BANK2     17    17      0
                           _UARTInit
                   _UARTTransmitText
   _ethernetController_checkDeviceId
_ethernetController_getCurrentPacket
   _ethernetController_getDeviceName
   _ethernetController_getMacAddress
            _ethernetController_init
    _ethernetController_setLEDConfig
         _handleStackBackgroundTasks
            _ipv4_setIPSourceAddress
                        _macToString
                  _printErrorMessage
                 _printEthernetState
                   _sevenSegmentInit
                              _srand
                         _stack_init
 ---------------------------------------------------------------------------------
 (1) _stack_init                                           0     0      0    1720
                           _arp_init
                          _ipv4_init
 ---------------------------------------------------------------------------------
 (2) _ipv4_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _arp_init                                            11    11      0    1720
                                             28 BANK0     11    11      0
                    _arp_setNewEntry
                  _ipv4_setToAllZero
                     _mac_setAllZero
 ---------------------------------------------------------------------------------
 (1) _srand                                                2     0      2     121
                                             26 BANK0      2     0      2
   _ethernetController_getMacAddress (ARG)
 ---------------------------------------------------------------------------------
 (1) _sevenSegmentInit                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _printEthernetState                                  15     0     15   12506
                                             58 BANK0     15     0     15
                   _UARTTransmitText
 ---------------------------------------------------------------------------------
 (1) _printErrorMessage                                    5     2      3   16011
                                             58 BANK0      5     2      3
                   _UARTTransmitText
                        _intToString
 ---------------------------------------------------------------------------------
 (1) _ipv4_setIPSourceAddress                              4     0      4   15983
                                             58 BANK0      4     0      4
                   _UARTTransmitText
                   _ipAdressToString
 ---------------------------------------------------------------------------------
 (1) _handleStackBackgroundTasks                          13    11      2  396490
                                            134 BANK1      3     1      2
                     _arp_background
_ethernetController_clearInterruptFl
_ethernetController_newPacketAvailab
_ethernetController_pollInterruptFla
    _ethernetController_setLEDConfig
_ethernetController_updateLinkStatus
             _ethernet_rxGetNewFrame
                    _ipv4_background
 ---------------------------------------------------------------------------------
 (2) _ipv4_background                                      5     5      0   15996
                                             58 BANK0      5     5      0
                   _UARTTransmitText
                   _ipAdressToString
 ---------------------------------------------------------------------------------
 (2) _ethernet_rxGetNewFrame                              14    11      3  234493
                                            120 BANK1     14    11      3
                    _UARTTransmitInt
                   _UARTTransmitText
                _arp_handleNewPacket
                  _etherTypeToString
      _ethernetController_dropPacket
_ethernetController_getEtherTypeFiel
_ethernetController_getNextPacketPoi
          _ethernetController_getRSV
_ethernetController_updateNextPacket
                          _getMillis
                        _intToString
               _ipv4_handleNewPacket
                        _macToString
 ---------------------------------------------------------------------------------
 (3) _ipv4_handleNewPacket                                36    34      2   53964
                                             85 BANK0     36    34      2
                   _UARTTransmitText
      _ethernetController_dropPacket
                        _intToString
                   _ipAdressToString
                 _ipProtocolToString
           _ipv4_checkHeaderChecksum
                   _ipv4_parseHeader
 ---------------------------------------------------------------------------------
 (4) _ipv4_parseHeader                                    50    27     23   11323
                                             20 BANK0     50    27     23
_ethernetController_streamFromRXBuff
 ---------------------------------------------------------------------------------
 (4) _ipv4_checkHeaderChecksum                            27    25      2   13978
                                             58 BANK0     27    25      2
                   _UARTTransmitText
                        _hexToString
       _ipv4_calculateHeaderChecksum
 ---------------------------------------------------------------------------------
 (5) _ipv4_calculateHeaderChecksum                        18    16      2     839
                                              0 BANK0     18    16      2
 ---------------------------------------------------------------------------------
 (5) _hexToString                                          9     5      4     632
                                              1 BANK0      9     5      4
                          _hexToChar
 ---------------------------------------------------------------------------------
 (6) _hexToChar                                            1     1      0     124
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _ipProtocolToString                                   3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _ethernetController_updateNextPacketPointer          11    11      0    7269
                                             15 BANK0     11    11      0
    _enc424j600_getNextPacketPointer
                 _enc424j600_readSPI
   _enc424j600_setERXDATAReadPointer
    _enc424j600_setNextPacketPointer
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (3) _ethernetController_getRSV                            7     2      5    8464
                                             17 BANK0      7     2      5
                 _enc424j600_readSPI
   _enc424j600_setERXDATAReadPointer
_enc424j600_updateReceiveStatusVecto
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (4) _enc424j600_updateReceiveStatusVector                17    12      5    1356
                                              0 BANK0     17    12      5
 ---------------------------------------------------------------------------------
 (3) _ethernetController_getEtherTypeField                18     9      9    7182
                                             15 BANK0     18     9      9
                 _enc424j600_readSPI
   _enc424j600_setERXDATAReadPointer
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (3) _etherTypeToString                                    4     2      2     121
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _arp_handleNewPacket                                 36    34      2  114544
                                            156 BANK0      4     2      2
                                             88 BANK1     32    32      0
                   _UARTTransmitText
              _arp_parseFromRXBuffer
                      _arp_sendReply
                    _arp_setNewEntry
      _ethernetController_dropPacket
                          _getMillis
                   _ipAdressToString
                        _macToString
 ---------------------------------------------------------------------------------
 (4) _ethernetController_dropPacket                        2     0      2    8564
                                             18 BANK0      2     0      2
        _enc424j600_setRXTailPointer
         _enc424j600_writeSingleByte
_ethernetController_getNextPacketPoi
 ---------------------------------------------------------------------------------
 (5) _ethernetController_getNextPacketPointer              2     0      2       0
                                              2 BANK0      2     0      2
    _enc424j600_getNextPacketPointer
 ---------------------------------------------------------------------------------
 (6) _enc424j600_getNextPacketPointer                      2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _arp_setNewEntry                                     24    10     14     930
                                              4 BANK0     24    10     14
                          _getMillis (ARG)
 ---------------------------------------------------------------------------------
 (4) _arp_sendReply                                       88    56     32   73121
                                              0 BANK1     88    56     32
                   _UARTTransmitText
                           _arp_send
   _ethernetController_getMacAddress
                   _ipAdressToString
                           _ipv4_cmp
            _ipv4_getIPSourceAddress
                        _macToString
 ---------------------------------------------------------------------------------
 (1) _macToString                                         30    24      6    1473
                                             26 BANK0     30    24      6
   _ethernetController_getMacAddress (ARG)
 ---------------------------------------------------------------------------------
 (4) _arp_parseFromRXBuffer                               73    41     32   14071
                                             20 BANK0     73    41     32
_ethernetController_streamFromRXBuff
                           _ipv4_cmp
                     _ipv4_isAllZero
                            _mac_cmp
                      _mac_isAllZero
 ---------------------------------------------------------------------------------
 (5) _mac_isAllZero                                        3     1      2     220
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (5) _mac_cmp                                              7     3      4     372
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (5) _ipv4_isAllZero                                       3     1      2     220
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (5) _ethernetController_streamFromRXBuffer                5     3      2    9718
                                             15 BANK0      5     3      2
                 _enc424j600_readSPI
   _enc424j600_setERXDATAReadPointer
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (3) _UARTTransmitInt                                      4     0      4   15940
                                             58 BANK0      4     0      4
                   _UARTTransmitText
                        _intToString
 ---------------------------------------------------------------------------------
 (2) _ethernetController_updateLinkStatus                  5     3      2   18510
                                             32 BANK0      5     3      2
_enc424j600_readControlRegisterUnban
         _enc424j600_readPHYRegister
 ---------------------------------------------------------------------------------
 (3) _enc424j600_readPHYRegister                          18    16      2   11923
                                             14 BANK0     18    16      2
_enc424j600_readControlRegisterUnban
_enc424j600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (2) _ethernetController_setLEDConfig                      3     2      1   12237
                                             14 BANK0      3     2      1
_enc424j600_readControlRegisterUnban
_enc424j600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (2) _ethernetController_pollInterruptFlags               10     8      2    6716
                                             24 BANK0     10     8      2
       _enc424j600_getInterruptFlags
 ---------------------------------------------------------------------------------
 (3) _enc424j600_getInterruptFlags                        10     8      2    6280
                                             14 BANK0     10     8      2
_enc424j600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (2) _ethernetController_newPacketAvailable                0     0      0    6215
          _enc424j600_getPacketCount
 ---------------------------------------------------------------------------------
 (2) _ethernetController_clearInterruptFlag                1     1      0   11558
                                             18 BANK0      1     1      0
      _enc424j600_clearInterruptFlag
 ---------------------------------------------------------------------------------
 (3) _enc424j600_clearInterruptFlag                        4     4      0   11527
                                             14 BANK0      4     4      0
_enc424j600_readControlRegisterUnban
_enc424j600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (2) _arp_background                                       6     6      0   90427
                                             76 BANK1      6     6      0
                   _UARTTransmitText
                          _arp_probe
                _ipv4_SrcAddrChanged
 _ipv4_getPreliminaryIPSourceAddress
 ---------------------------------------------------------------------------------
 (3) _ipv4_SrcAddrChanged                                  2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _arp_probe                                           28    24      4   78147
                                            156 BANK0      4     0      4
                                             52 BANK1     24    24      0
                   _UARTTransmitText
                            ___lwmod
                  _arp_checkForEntry
                    _arp_sendRequest
                          _getMillis
                        _intToString
                   _ipAdressToString
 _ipv4_getPreliminaryIPSourceAddress
                  _ipv4_setToAllZero
                               _rand
 ---------------------------------------------------------------------------------
 (4) _rand                                                 2     0      2     456
                                             12 BANK0      2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8     456
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) _ipv4_setToAllZero                                    3     1      2     279
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _ipv4_getPreliminaryIPSourceAddress                   4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _ipAdressToString                                    22    18      4    3706
                                             19 BANK0     22    18      4
                            ___lwdiv
                            ___lwmod
 _ipv4_getPreliminaryIPSourceAddress (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     772
                                             14 BANK0      5     1      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     821
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _intToString                                          4     0      4    3694
                                             36 BANK0      4     0      4
                               _ltoa
 ---------------------------------------------------------------------------------
 (3) _ltoa                                                10     2      8    2403
                                             26 BANK0     10     2      8
                              _ultoa
 ---------------------------------------------------------------------------------
 (4) _ultoa                                               13     5      8    1900
                                             13 BANK0     13     5      8
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (5) ___llmod                                              9     1      8     592
                                              0 BANK0      9     1      8
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8     601
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (4) _arp_sendRequest                                     52    44      8   55092
                                              0 BANK1     52    44      8
                           _arp_send
   _ethernetController_getMacAddress
            _ipv4_getIPSourceAddress
                     _mac_setAllZero
 ---------------------------------------------------------------------------------
 (3) _mac_setAllZero                                       3     1      2     310
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (5) _ipv4_getIPSourceAddress                              4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (5) _ethernetController_getMacAddress                    12     6      6    6367
                                             14 BANK0     12     6      6
_enc424j600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (5) _arp_send                                            85    53     32   47741
                                             71 BANK0     85    53     32
_ethernetController_getSourceMACAddr
      _ethernetController_sendPacket
_ethernetController_streamToTransmit
            _ethernet_txFrameRequest
                 _mac_setToBroadcast
 ---------------------------------------------------------------------------------
 (6) _mac_setToBroadcast                                   3     1      2     220
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (6) _ethernet_txFrameRequest                              5     3      2   17835
                                             66 BANK0      5     3      2
_ethernetController_writeDestination
_ethernetController_writeEtherTypeFi
              _memory_txFrameRequest
 ---------------------------------------------------------------------------------
 (7) _memory_txFrameRequest                               30    21      9    4950
                                             36 BANK0     30    21      9
                             ___wmul
                    _checkForOverlap
                  _entireMemoryEmpty
                   _entireMemoryFull
 ---------------------------------------------------------------------------------
 (8) _entireMemoryFull                                     1     1      0      99
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (8) _entireMemoryEmpty                                    1     1      0      99
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (8) _checkForOverlap                                     18     0     18    2268
                                             18 BANK0     18     0     18
            _checkForOverlapSwitched
 ---------------------------------------------------------------------------------
 (9) _checkForOverlapSwitched                             18     0     18    1072
                                              0 BANK0     18     0     18
 ---------------------------------------------------------------------------------
 (8) ___wmul                                               6     2      4     412
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (7) _ethernetController_writeEtherTypeFieldToBuffer      14     3     11    6059
                                             15 BANK0     14     3     11
   _enc424j600_setGPDATAWritePointer
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (7) _ethernetController_writeDestinationMACAddress       24     9     15    6257
                                             15 BANK0     24     9     15
   _enc424j600_setGPDATAWritePointer
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (6) _ethernetController_streamToTransmitBuffer           15     6      9    6981
                                             15 BANK0     15     6      9
   _enc424j600_setGPDATAWritePointer
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (8) _enc424j600_setGPDATAWritePointer                     5     3      2    3059
                                             10 BANK0      5     3      2
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (6) _ethernetController_sendPacket                        9     0      9   13618
                                             18 BANK0      9     0      9
             _enc424j600_setTXLength
       _enc424j600_setTXStartAddress
         _enc424j600_writeSingleByte
                _memory_txFrameClear
 ---------------------------------------------------------------------------------
 (7) _memory_txFrameClear                                  1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _enc424j600_setTXStartAddress                         4     2      2    5374
                                             14 BANK0      4     2      2
_enc424j600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (7) _enc424j600_setTXLength                               4     2      2    5374
                                             14 BANK0      4     2      2
_enc424j600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (6) _ethernetController_getSourceMACAddress              18     9      9    7244
                                             15 BANK0     18     9      9
                 _enc424j600_readSPI
   _enc424j600_setERXDATAReadPointer
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (6) _enc424j600_setERXDATAReadPointer                     5     3      2    3329
                                             10 BANK0      5     3      2
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (4) _arp_checkForEntry                                   15     9      6    1318
                                              7 BANK0     15     9      6
                          _getMillis
                           _ipv4_cmp
 ---------------------------------------------------------------------------------
 (5) _ipv4_cmp                                             7     3      4     912
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _getMillis                                            4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _UARTTransmitText                                     2     0      2   12125
                                             56 BANK0      2     0      2
                  _etherTypeToString (ARG)
   _ethernetController_getDeviceName (ARG)
   _ethernetController_getMacAddress (ARG)
                        _hexToString (ARG)
                        _intToString (ARG)
                   _ipAdressToString (ARG)
                 _ipProtocolToString (ARG)
 _ipv4_getPreliminaryIPSourceAddress (ARG)
                        _macToString (ARG)
 ---------------------------------------------------------------------------------
 (1) _ethernetController_init                              6     3      3   46276
                                             26 BANK0      6     3      3
  _enc424j600_enableAutoMACInsertion
         _enc424j600_enableReception
                 _enc424j600_initSPI
    _enc424j600_setNextPacketPointer
 _enc424j600_setRXBufferStartAddress
        _enc424j600_setRXTailPointer
   _ethernetController_checkDeviceId
       _ethernetController_softReset
 ---------------------------------------------------------------------------------
 (2) _ethernetController_softReset                        12     9      3   14613
                                             14 BANK0     12     9      3
_enc424j600_readControlRegisterUnban
_enc424j600_writeControlRegisterUnba
         _enc424j600_writeSingleByte
 ---------------------------------------------------------------------------------
 (2) _ethernetController_checkDeviceId                     7     4      3    6360
                                             14 BANK0      7     4      3
_enc424j600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (5) _enc424j600_setRXTailPointer                          4     2      2    5554
                                             14 BANK0      4     2      2
_enc424j600_writeControlRegisterUnba
_ethernetController_getNextPacketPoi (ARG)
 ---------------------------------------------------------------------------------
 (2) _enc424j600_setRXBufferStartAddress                   4     2      2    5374
                                             14 BANK0      4     2      2
_enc424j600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (4) _enc424j600_setNextPacketPointer                      2     0      2     211
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _enc424j600_enableReception                           0     0      0    2650
         _enc424j600_writeSingleByte
 ---------------------------------------------------------------------------------
 (5) _enc424j600_writeSingleByte                           1     1      0    2650
                                             10 BANK0      1     1      0
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (2) _enc424j600_enableAutoMACInsertion                    1     1      0   11369
                                             14 BANK0      1     1      0
_enc424j600_readControlRegisterUnban
_enc424j600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (6) _enc424j600_writeControlRegisterUnbanked              4     2      2    5148
                                             10 BANK0      4     2      2
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (1) _ethernetController_getDeviceName                    13    11      2      40
                                              0 BANK0     13    11      2
 ---------------------------------------------------------------------------------
 (1) _ethernetController_getCurrentPacketCount             0     0      0    6215
          _enc424j600_getPacketCount
 ---------------------------------------------------------------------------------
 (3) _enc424j600_getPacketCount                            1     1      0    6215
                                             14 BANK0      1     1      0
_enc424j600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (6) _enc424j600_readControlRegisterUnbanked               4     2      2    6144
                                             10 BANK0      4     2      2
                 _enc424j600_readSPI
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (6) _enc424j600_writeSPI                                 10     8      2    2616
                                              0 BANK0     10     8      2
                 _enc424j600_initSPI
 ---------------------------------------------------------------------------------
 (6) _enc424j600_readSPI                                  10     8      2     906
                                              0 BANK0     10     8      2
                 _enc424j600_initSPI
 ---------------------------------------------------------------------------------
 (7) _enc424j600_initSPI                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UARTInit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                19    19      0    1063
                                             21 COMRAM    19    19      0
                      _buttonHandler
                 _sevenSegmentUpdate
                         _updateTime
 ---------------------------------------------------------------------------------
 (12) _updateTime                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _sevenSegmentUpdate                                  7     5      2     875
                                             14 COMRAM     7     5      2
                        _parseNumber
 ---------------------------------------------------------------------------------
 (13) _parseNumber                                         7     4      3     641
                                              7 COMRAM     7     4      3
                          i2___lwdiv
 ---------------------------------------------------------------------------------
 (14) i2___lwdiv                                           7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (12) _buttonHandler                                      10     8      2     188
                                              0 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UARTInit
   _UARTTransmitText
     _etherTypeToString (ARG)
     _ethernetController_getDeviceName (ARG)
     _ethernetController_getMacAddress (ARG)
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
     _hexToString (ARG)
       _hexToChar
     _intToString (ARG)
       _ltoa
         _ultoa
           ___lldiv
           ___llmod
     _ipAdressToString (ARG)
       ___lwdiv
       ___lwmod
         _rand (ARG)
           ___lmul
       _ipv4_getPreliminaryIPSourceAddress (ARG)
     _ipProtocolToString (ARG)
     _ipv4_getPreliminaryIPSourceAddress (ARG)
     _macToString (ARG)
       _ethernetController_getMacAddress (ARG)
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
   _ethernetController_checkDeviceId
     _enc424j600_readControlRegisterUnbanked
       _enc424j600_readSPI
         _enc424j600_initSPI
       _enc424j600_writeSPI
         _enc424j600_initSPI
   _ethernetController_getCurrentPacketCount
     _enc424j600_getPacketCount
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
   _ethernetController_getDeviceName
   _ethernetController_getMacAddress
     _enc424j600_readControlRegisterUnbanked
       _enc424j600_readSPI
         _enc424j600_initSPI
       _enc424j600_writeSPI
         _enc424j600_initSPI
   _ethernetController_init
     _enc424j600_enableAutoMACInsertion
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _enc424j600_writeControlRegisterUnbanked
         _enc424j600_writeSPI
           _enc424j600_initSPI
     _enc424j600_enableReception
       _enc424j600_writeSingleByte
         _enc424j600_writeSPI
           _enc424j600_initSPI
     _enc424j600_initSPI
     _enc424j600_setNextPacketPointer
     _enc424j600_setRXBufferStartAddress
       _enc424j600_writeControlRegisterUnbanked
         _enc424j600_writeSPI
           _enc424j600_initSPI
     _enc424j600_setRXTailPointer
       _enc424j600_writeControlRegisterUnbanked
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _ethernetController_getNextPacketPointer (ARG)
         _enc424j600_getNextPacketPointer
     _ethernetController_checkDeviceId
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
     _ethernetController_softReset
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _enc424j600_writeControlRegisterUnbanked
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _enc424j600_writeSingleByte
         _enc424j600_writeSPI
           _enc424j600_initSPI
   _ethernetController_setLEDConfig
     _enc424j600_readControlRegisterUnbanked
       _enc424j600_readSPI
         _enc424j600_initSPI
       _enc424j600_writeSPI
         _enc424j600_initSPI
     _enc424j600_writeControlRegisterUnbanked
       _enc424j600_writeSPI
         _enc424j600_initSPI
   _handleStackBackgroundTasks
     _arp_background
       _UARTTransmitText
         _etherTypeToString (ARG)
         _ethernetController_getDeviceName (ARG)
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
         _hexToString (ARG)
           _hexToChar
         _intToString (ARG)
           _ltoa
             _ultoa
               ___lldiv
               ___llmod
         _ipAdressToString (ARG)
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
           _ipv4_getPreliminaryIPSourceAddress (ARG)
         _ipProtocolToString (ARG)
         _ipv4_getPreliminaryIPSourceAddress (ARG)
         _macToString (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
       _arp_probe
         _UARTTransmitText
           _etherTypeToString (ARG)
           _ethernetController_getDeviceName (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _hexToString (ARG)
             _hexToChar
           _intToString (ARG)
             _ltoa
               _ultoa
                 ___lldiv
                 ___llmod
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
               _rand (ARG)
                 ___lmul
             _ipv4_getPreliminaryIPSourceAddress (ARG)
           _ipProtocolToString (ARG)
           _ipv4_getPreliminaryIPSourceAddress (ARG)
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
         ___lwmod
           _rand (ARG)
             ___lmul
         _arp_checkForEntry
           _getMillis
           _ipv4_cmp
         _arp_sendRequest
           _arp_send
             _ethernetController_getSourceMACAddress
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_setERXDATAReadPointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernetController_sendPacket
               _enc424j600_setTXLength
                 _enc424j600_writeControlRegisterUnbanked
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
               _enc424j600_setTXStartAddress
                 _enc424j600_writeControlRegisterUnbanked
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
               _enc424j600_writeSingleByte
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _memory_txFrameClear
             _ethernetController_streamToTransmitBuffer
               _enc424j600_setGPDATAWritePointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernet_txFrameRequest
               _ethernetController_writeDestinationMACAddress
                 _enc424j600_setGPDATAWritePointer
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _ethernetController_writeEtherTypeFieldToBuffer
                 _enc424j600_setGPDATAWritePointer
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _memory_txFrameRequest
                 ___wmul
                 _checkForOverlap
                   _checkForOverlapSwitched
                 _entireMemoryEmpty
                 _entireMemoryFull
             _mac_setToBroadcast
           _ethernetController_getMacAddress
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _ipv4_getIPSourceAddress
           _mac_setAllZero
         _getMillis
         _intToString
           _ltoa
             _ultoa
               ___lldiv
               ___llmod
         _ipAdressToString
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
           _ipv4_getPreliminaryIPSourceAddress (ARG)
         _ipv4_getPreliminaryIPSourceAddress
         _ipv4_setToAllZero
         _rand
           ___lmul
       _ipv4_SrcAddrChanged
       _ipv4_getPreliminaryIPSourceAddress
     _ethernetController_clearInterruptFlag
       _enc424j600_clearInterruptFlag
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_writeControlRegisterUnbanked
           _enc424j600_writeSPI
             _enc424j600_initSPI
     _ethernetController_newPacketAvailable
       _enc424j600_getPacketCount
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
     _ethernetController_pollInterruptFlags
       _enc424j600_getInterruptFlags
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
     _ethernetController_setLEDConfig
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _enc424j600_writeControlRegisterUnbanked
         _enc424j600_writeSPI
           _enc424j600_initSPI
     _ethernetController_updateLinkStatus
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _enc424j600_readPHYRegister
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_writeControlRegisterUnbanked
           _enc424j600_writeSPI
             _enc424j600_initSPI
     _ethernet_rxGetNewFrame
       _UARTTransmitInt
         _UARTTransmitText
           _etherTypeToString (ARG)
           _ethernetController_getDeviceName (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _hexToString (ARG)
             _hexToChar
           _intToString (ARG)
             _ltoa
               _ultoa
                 ___lldiv
                 ___llmod
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
               _rand (ARG)
                 ___lmul
             _ipv4_getPreliminaryIPSourceAddress (ARG)
           _ipProtocolToString (ARG)
           _ipv4_getPreliminaryIPSourceAddress (ARG)
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
         _intToString
           _ltoa
             _ultoa
               ___lldiv
               ___llmod
       _UARTTransmitText
         _etherTypeToString (ARG)
         _ethernetController_getDeviceName (ARG)
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
         _hexToString (ARG)
           _hexToChar
         _intToString (ARG)
           _ltoa
             _ultoa
               ___lldiv
               ___llmod
         _ipAdressToString (ARG)
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
           _ipv4_getPreliminaryIPSourceAddress (ARG)
         _ipProtocolToString (ARG)
         _ipv4_getPreliminaryIPSourceAddress (ARG)
         _macToString (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
       _arp_handleNewPacket
         _UARTTransmitText
           _etherTypeToString (ARG)
           _ethernetController_getDeviceName (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _hexToString (ARG)
             _hexToChar
           _intToString (ARG)
             _ltoa
               _ultoa
                 ___lldiv
                 ___llmod
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
               _rand (ARG)
                 ___lmul
             _ipv4_getPreliminaryIPSourceAddress (ARG)
           _ipProtocolToString (ARG)
           _ipv4_getPreliminaryIPSourceAddress (ARG)
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
         _arp_parseFromRXBuffer
           _ethernetController_streamFromRXBuffer
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_setERXDATAReadPointer
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
           _ipv4_cmp
           _ipv4_isAllZero
           _mac_cmp
           _mac_isAllZero
         _arp_sendReply
           _UARTTransmitText
             _etherTypeToString (ARG)
             _ethernetController_getDeviceName (ARG)
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
             _hexToString (ARG)
               _hexToChar
             _intToString (ARG)
               _ltoa
                 _ultoa
                   ___lldiv
                   ___llmod
             _ipAdressToString (ARG)
               ___lwdiv
               ___lwmod
                 _rand (ARG)
                   ___lmul
               _ipv4_getPreliminaryIPSourceAddress (ARG)
             _ipProtocolToString (ARG)
             _ipv4_getPreliminaryIPSourceAddress (ARG)
             _macToString (ARG)
               _ethernetController_getMacAddress (ARG)
                 _enc424j600_readControlRegisterUnbanked
                   _enc424j600_readSPI
                     _enc424j600_initSPI
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
           _arp_send
             _ethernetController_getSourceMACAddress
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_setERXDATAReadPointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernetController_sendPacket
               _enc424j600_setTXLength
                 _enc424j600_writeControlRegisterUnbanked
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
               _enc424j600_setTXStartAddress
                 _enc424j600_writeControlRegisterUnbanked
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
               _enc424j600_writeSingleByte
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _memory_txFrameClear
             _ethernetController_streamToTransmitBuffer
               _enc424j600_setGPDATAWritePointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernet_txFrameRequest
               _ethernetController_writeDestinationMACAddress
                 _enc424j600_setGPDATAWritePointer
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _ethernetController_writeEtherTypeFieldToBuffer
                 _enc424j600_setGPDATAWritePointer
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _memory_txFrameRequest
                 ___wmul
                 _checkForOverlap
                   _checkForOverlapSwitched
                 _entireMemoryEmpty
                 _entireMemoryFull
             _mac_setToBroadcast
           _ethernetController_getMacAddress
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _ipAdressToString
             ___lwdiv
             ___lwmod
               _rand (ARG)
                 ___lmul
             _ipv4_getPreliminaryIPSourceAddress (ARG)
           _ipv4_cmp
           _ipv4_getIPSourceAddress
           _macToString
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
         _arp_setNewEntry
           _getMillis (ARG)
         _ethernetController_dropPacket
           _enc424j600_setRXTailPointer
             _enc424j600_writeControlRegisterUnbanked
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernetController_getNextPacketPointer (ARG)
               _enc424j600_getNextPacketPointer
           _enc424j600_writeSingleByte
             _enc424j600_writeSPI
               _enc424j600_initSPI
           _ethernetController_getNextPacketPointer
             _enc424j600_getNextPacketPointer
         _getMillis
         _ipAdressToString
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
           _ipv4_getPreliminaryIPSourceAddress (ARG)
         _macToString
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
       _etherTypeToString
       _ethernetController_dropPacket
         _enc424j600_setRXTailPointer
           _enc424j600_writeControlRegisterUnbanked
             _enc424j600_writeSPI
               _enc424j600_initSPI
           _ethernetController_getNextPacketPointer (ARG)
             _enc424j600_getNextPacketPointer
         _enc424j600_writeSingleByte
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _ethernetController_getNextPacketPointer
           _enc424j600_getNextPacketPointer
       _ethernetController_getEtherTypeField
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_setERXDATAReadPointer
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _ethernetController_getNextPacketPointer
         _enc424j600_getNextPacketPointer
       _ethernetController_getRSV
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_setERXDATAReadPointer
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_updateReceiveStatusVector
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _ethernetController_updateNextPacketPointer
         _enc424j600_getNextPacketPointer
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_setERXDATAReadPointer
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_setNextPacketPointer
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _getMillis
       _intToString
         _ltoa
           _ultoa
             ___lldiv
             ___llmod
       _ipv4_handleNewPacket
         _UARTTransmitText
           _etherTypeToString (ARG)
           _ethernetController_getDeviceName (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _hexToString (ARG)
             _hexToChar
           _intToString (ARG)
             _ltoa
               _ultoa
                 ___lldiv
                 ___llmod
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
               _rand (ARG)
                 ___lmul
             _ipv4_getPreliminaryIPSourceAddress (ARG)
           _ipProtocolToString (ARG)
           _ipv4_getPreliminaryIPSourceAddress (ARG)
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
         _ethernetController_dropPacket
           _enc424j600_setRXTailPointer
             _enc424j600_writeControlRegisterUnbanked
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernetController_getNextPacketPointer (ARG)
               _enc424j600_getNextPacketPointer
           _enc424j600_writeSingleByte
             _enc424j600_writeSPI
               _enc424j600_initSPI
           _ethernetController_getNextPacketPointer
             _enc424j600_getNextPacketPointer
         _intToString
           _ltoa
             _ultoa
               ___lldiv
               ___llmod
         _ipAdressToString
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
           _ipv4_getPreliminaryIPSourceAddress (ARG)
         _ipProtocolToString
         _ipv4_checkHeaderChecksum
           _UARTTransmitText
             _etherTypeToString (ARG)
             _ethernetController_getDeviceName (ARG)
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
             _hexToString (ARG)
               _hexToChar
             _intToString (ARG)
               _ltoa
                 _ultoa
                   ___lldiv
                   ___llmod
             _ipAdressToString (ARG)
               ___lwdiv
               ___lwmod
                 _rand (ARG)
                   ___lmul
               _ipv4_getPreliminaryIPSourceAddress (ARG)
             _ipProtocolToString (ARG)
             _ipv4_getPreliminaryIPSourceAddress (ARG)
             _macToString (ARG)
               _ethernetController_getMacAddress (ARG)
                 _enc424j600_readControlRegisterUnbanked
                   _enc424j600_readSPI
                     _enc424j600_initSPI
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
           _hexToString
             _hexToChar
           _ipv4_calculateHeaderChecksum
         _ipv4_parseHeader
           _ethernetController_streamFromRXBuffer
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_setERXDATAReadPointer
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
       _macToString
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
     _ipv4_background
       _UARTTransmitText
         _etherTypeToString (ARG)
         _ethernetController_getDeviceName (ARG)
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
         _hexToString (ARG)
           _hexToChar
         _intToString (ARG)
           _ltoa
             _ultoa
               ___lldiv
               ___llmod
         _ipAdressToString (ARG)
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
           _ipv4_getPreliminaryIPSourceAddress (ARG)
         _ipProtocolToString (ARG)
         _ipv4_getPreliminaryIPSourceAddress (ARG)
         _macToString (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
       _ipAdressToString
         ___lwdiv
         ___lwmod
           _rand (ARG)
             ___lmul
         _ipv4_getPreliminaryIPSourceAddress (ARG)
   _ipv4_setIPSourceAddress
     _UARTTransmitText
       _etherTypeToString (ARG)
       _ethernetController_getDeviceName (ARG)
       _ethernetController_getMacAddress (ARG)
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
       _hexToString (ARG)
         _hexToChar
       _intToString (ARG)
         _ltoa
           _ultoa
             ___lldiv
             ___llmod
       _ipAdressToString (ARG)
         ___lwdiv
         ___lwmod
           _rand (ARG)
             ___lmul
         _ipv4_getPreliminaryIPSourceAddress (ARG)
       _ipProtocolToString (ARG)
       _ipv4_getPreliminaryIPSourceAddress (ARG)
       _macToString (ARG)
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
     _ipAdressToString
       ___lwdiv
       ___lwmod
         _rand (ARG)
           ___lmul
       _ipv4_getPreliminaryIPSourceAddress (ARG)
   _macToString
     _ethernetController_getMacAddress (ARG)
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
   _printErrorMessage
     _UARTTransmitText
       _etherTypeToString (ARG)
       _ethernetController_getDeviceName (ARG)
       _ethernetController_getMacAddress (ARG)
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
       _hexToString (ARG)
         _hexToChar
       _intToString (ARG)
         _ltoa
           _ultoa
             ___lldiv
             ___llmod
       _ipAdressToString (ARG)
         ___lwdiv
         ___lwmod
           _rand (ARG)
             ___lmul
         _ipv4_getPreliminaryIPSourceAddress (ARG)
       _ipProtocolToString (ARG)
       _ipv4_getPreliminaryIPSourceAddress (ARG)
       _macToString (ARG)
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
     _intToString
       _ltoa
         _ultoa
           ___lldiv
           ___llmod
   _printEthernetState
     _UARTTransmitText
       _etherTypeToString (ARG)
       _ethernetController_getDeviceName (ARG)
       _ethernetController_getMacAddress (ARG)
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
       _hexToString (ARG)
         _hexToChar
       _intToString (ARG)
         _ltoa
           _ultoa
             ___lldiv
             ___llmod
       _ipAdressToString (ARG)
         ___lwdiv
         ___lwmod
           _rand (ARG)
             ___lmul
         _ipv4_getPreliminaryIPSourceAddress (ARG)
       _ipProtocolToString (ARG)
       _ipv4_getPreliminaryIPSourceAddress (ARG)
       _macToString (ARG)
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
   _sevenSegmentInit
   _srand
     _ethernetController_getMacAddress (ARG)
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
   _stack_init
     _arp_init
       _arp_setNewEntry
         _getMillis (ARG)
       _ipv4_setToAllZero
       _mac_setAllZero
     _ipv4_init

 _ISR (ROOT)
   _buttonHandler
   _sevenSegmentUpdate
     _parseNumber
       i2___lwdiv
   _updateTime

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0      79      12       47.3%
BITBANK2           100      0       0       9        0.0%
BANK2              100     11      FA      10       97.7%
BITBANK1           100      0       0       7        0.0%
BANK1              100     8B      F5       8       95.7%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     A0      A0       5      100.0%
BITCOMRAM           5E      0       1       0        1.1%
COMRAM              5E     28      4F       1       84.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     357       6        0.0%
DATA                 0      0     357       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Mar 17 15:10:36 2019

                                            ?_hexToString 0061  
                __end_of_ethernetController_getMacAddress 3EFA  
               __size_of_ethernetController_getMacAddress 0074  
                      ??_ethernetController_getMacAddress 0074  
                       ?_ethernetController_getMacAddress 006E  
                        _ethernetController_getMacAddress 3E86  
                                             arp_init@mac 007C  
                                                      l92 451A  
                                                      l84 2E0E  
                                                      l86 2DF0  
                                                      l88 2E08  
                                                      l89 2E24  
                        __end_of_ipv4_checkHeaderChecksum 349E  
                 ethernetController_getSourceMACAddress@i 0080  
                                     ___wmul@multiplicand 0062  
                                      i2___lwdiv@dividend 0001  
                      ipv4_calculateHeaderChecksum@header 0060  
                                            __CFG_CP0$OFF 000000  
                                            __CFG_CP1$OFF 000000  
                                            __CFG_CP2$OFF 000000  
                                            __CFG_CP3$OFF 000000  
                                             __CFG_LVP$ON 000000  
                                             arp_send@arp 00A7  
                                 ??_memory_txFrameRequest 008D  
                                                     l210 39A6  
                                                     l140 3C3C  
                                                     l204 39C4  
                                                     l213 39E4  
                                                     l205 39AE  
                                                     l134 3DC6  
                                                     l142 3C84  
                                                     l214 39CC  
                                                     l206 399A  
                                                     l135 3E0C  
                                                     l232 41A2  
                                                     l216 39FA  
                                                     l241 4062  
                                                     l217 39D4  
                                                     l209 39A2  
                                                     l218 39DA  
                                                     l155 4010  
                                                     l412 47CA  
                                                     l420 47B4  
                                                     l180 41EE  
                                                     l245 40A8  
                                                     l317 3ADC  
                                                     l165 3E46  
                                                     l414 47EC  
                                                     l182 4212  
                                                     l263 2C08  
                                                     l183 4226  
                                                     l432 2C70  
                                                     l361 328E  
                                                     l418 4792  
                                                     l258 2B50  
                                                     l370 036E  
                                                     l514 337C  
                                                     l443 2CEE  
                                                     l195 3A2C  
                                                     l179 422C  
                                                     l187 46EE  
                                                     l371 04E8  
                                                     l515 335E  
                                                     l436 2CF2  
                                                     l188 4704  
                                                     l372 03BA  
                                                     l516 3376  
                                                     l453 3768  
                                                     l437 2CDE  
                                                     l197 3A5C  
                                                     l373 0516  
                                                     l438 2CA8  
                                                     l462 0638  
                                                     l390 465A  
                                                     l374 03D6  
                                                     l366 024E  
                                                     l518 33BE  
                                                     l622 1930  
                                                     l455 3764  
                                                     l439 2CA4  
                                                     l359 326E  
                                                     l199 3A82  
                                                     l375 03F2  
                                                     l367 0292  
                                                     l623 19A0  
                                                     l448 3730  
                                                     l472 06EE  
                                                     l464 065A  
                                                     l392 4686  
                                                     l384 48A0  
                                                     l800 45D2  
                                                     l368 032E  
                                                     l624 19D8  
                                                     l481 08B4  
                                                     l801 45DC  
                                                     l369 034E  
                                                     l641 390E  
                                                     l625 1AD6  
                                                     l482 0962  
                                                     l474 06F6  
                                                     l466 0684  
                                                     l386 48BA  
                                                     l810 45A2  
                                                     l459 3778  
                                                     l379 4A74  
                                                     l643 392A  
                                                     l627 1B16  
                                                     l476 0910  
                                                     l396 4A4E  
                                                     l900 2232  
                                                     l660 2A7A  
                                                     l652 2A1A  
                                                     l477 0830  
                                                     l469 06BA  
                                                     l805 45AC  
                                                     l661 2A3E  
                                                     l653 29CA  
                                                     l645 393E  
                                                     l629 1B20  
                                                     l822 21E6  
                                                     l910 0D26  
                                                     l902 2272  
                                                     l806 4582  
                                                     l662 2AAC  
                                                     l646 3954  
                                                     l487 09D2  
                                                     l911 0CDE  
                                                     l903 2350  
                                                     l663 2A4C  
                                                     l655 29DA  
                                                     l639 38FA  
                                                     l488 0AB0  
                                                     l816 202C  
                                                     l904 2364  
                                                     l808 458E  
                                                     l664 2A5C  
                                                     l656 29EA  
                                                     l648 3968  
                                                     l489 0AD2  
                                                     l921 0E4E  
                                                     l913 0D7C  
                                                     l809 4598  
                                                     l665 2A6A  
                                                     l657 29FA  
                                                     l818 214C  
                                                     l914 0D34  
                                                     l658 2A0A  
                                                     l819 21A0  
                                                     l923 0E90  
                                                     l907 0CD0  
                                                     l940 1D6E  
                                                     l924 0E92  
                                                     l916 0DD2  
                                                     l908 0C88  
                                                     l757 42F6  
                                                     l941 1D3A  
                                                     l925 0EC8  
                                                     l917 0D8A  
                                                     l773 4AE6  
                                                     l781 30A8  
                                                     l934 1CEA  
                                                     l759 431E  
                                                     l943 1DB0  
                                                     l935 1CB6  
                                                     l919 0E18  
                                                     l791 2EE6  
                                                     l944 1D7C  
                                                     l776 4AF2  
                                                     l937 1D2C  
                                                     l961 1246  
                                                     l793 2F22  
                                                     l938 1CF8  
                                                     l970 1210  
                                                     l962 0F56  
                                                     l971 1228  
                                                     l963 1262  
                                                     l787 2E62  
                                                     l964 0FCC  
                                                     l980 35EC  
                                                     l788 2F30  
                                                     l973 1234  
                                                     l965 10F0  
                                                     l981 35BC  
                                                     l789 2EB2  
                                                     l797 45E6  
                                                     l966 10FA  
                                                     l798 45C6  
                                                     l983 35CC  
                                                     l992 3826  
                                                     l985 35DC  
                                                     l989 378A  
                                                     l999 3148  
                                            __CFG_CPB$OFF 000000  
                                            __CFG_CPD$OFF 000000  
                                                     _ISR 0008  
           enc424j600_writeControlRegisterUnbanked@opcode 006D  
                            ??_enc424j600_writeSingleByte 006A  
                __end_of_ethernetController_getDeviceName 4AD4  
               __size_of_ethernetController_getDeviceName 0024  
                      ??_ethernetController_getDeviceName 0062  
                       ?_ethernetController_getDeviceName 0060  
                        _ethernetController_getDeviceName 4AB0  
                                memory_txFrameClear@index 0060  
                    enc424j600_readPHYRegister@unusedBits 0078  
                     ethernetController_getMacAddress@mac 0074  
                          memory_txFrameRequest@freeIndex 00A1  
                                                     prod 000FF3  
                                            hexToChar@val 0060  
           ethernetController_streamFromRXBuffer@startEnd 0071  
                                                     wreg 000FE8  
                                              _TXSTA1bits 000FAC  
                                      _sevenSegmentUpdate 349E  
               ethernetController_getEtherTypeField@field 006F  
                                  _numberOfOccupiedFields 0048  
                      ethernetController_setLEDConfig@LED 006F  
                      __size_of_ethernetController_getRSV 0074  
                            ipv4_sendFrame@requestCounter 0044  
                      __end_of_enc424j600_readPHYRegister 2C0A  
                              _enc424j600_readPHYRegister 2AE8  
                          __end_of_enc424j600_setTXLength 4974  
                                        ??_arp_background 014C  
                                                    ?_ISR 0001  
                          ?_ethernetController_sendPacket 0072  
                                                    l1001 31A0  
                                                    l1101 469C  
                                                    l1005 4148  
                                                    l1103 46C8  
                                                    l1113 4B26  
                                                    l1107 48D0  
                                                    l1060 1F70  
                                                    l1109 48EA  
                                                    l1062 1FB6  
                                                    l1071 23DE  
                                                    l1138 4258  
                                                    l1090 25B2  
                                                    l1139 426C  
                                                    l1067 3422  
                                                    l1091 25D0  
                                                    l1092 2680  
                                                    l1085 26EC  
                                                    l1086 26A4  
                                                    l1087 2586  
                                                    l1089 259C  
                                                    l1530 2F4A  
                                                    l1532 2FA6  
                                                    l1533 3014  
                                                    l1526 43CC  
                                                    l1544 436A  
                                                    l1481 3B82  
                                                    l1545 4362  
                                                    l1482 3B90  
                                                    l1554 4620  
                                                    l1491 40FE  
                                                    l1555 4618  
                                                    l1492 410C  
                                                    l1548 438A  
                                                    l1477 3B4E  
                                                    l1549 4394  
                                                    l1478 3B42  
                                                    l1558 4638  
                                                    l1487 40D6  
                                                    l1559 4642  
                                                    l1488 40CA  
                                                    l8016 3E0C  
                                                    l9000 2B82  
                                                    l8026 4008  
                                                    l7510 41D0  
                                                    l7600 47C2  
                                                    l8312 4A46  
                                                    l8400 48C8  
                                                    l8420 4694  
                                                    l7620 478A  
                                                    l8068 4A6C  
                                                    l8244 2EC6  
                                                    l8262 2F22  
                                                    l8254 2EFA  
                                                    l8360 2024  
                                                    l8272 4898  
                                                    l7490 2CDA  
                                                    l8266 2F30  
                                                    l7900 095A  
                                                    l8292 4652  
                                                    l7494 2D24  
                                                    l9248 2DFA  
                                                    l7738 3C34  
                                                    l7498 4BAE  
                                                    l7756 3C7C  
                                                    l8804 4B1E  
                                                    l8732 3140  
         ethernetController_streamToTransmitBuffer@opcode 007D  
                                                    l8840 1F68  
                                                    l7866 0828  
                                                    l8674 0EC0  
                                                    l7796 4090  
                                                    l8780 3782  
                                                    l8916 3E3E  
                                                    l8852 1FAE  
                                                    l8880 3422  
                                                    l8794 3826  
                                                    l9578 4140  
                                                    STR_1 7FCB  
                                                    STR_2 7FFB  
                                                    STR_3 7F58  
                                                    STR_4 7F84  
                                                    STR_5 7EEA  
                           ?_ethernetController_softReset 006E  
                                                    STR_6 7FCB  
                                                    STR_7 7FFB  
                                                    STR_8 7FBD  
                                                    STR_9 7FB6  
               ethernetController_clearInterruptFlag@flag 0072  
               enc424j600_setRXBufferStartAddress@lowByte 0070  
                                                    _RCIE 007CED  
                                                    u8100 2C28  
                                                    _RCIF 007CF5  
                                                    u8110 2C36  
                                                    u8120 2C44  
                                                    u9001 3EF0  
                                                    u9010 4316  
                                                    u8050 47F0  
                                                    u8211 2CB2  
                                                    u9020 4322  
                                                    u9100 2F30  
                                                    u8221 2CC4  
                                                    u9030 4342  
                                                    u8310 3C9E  
                                                    _RCIP 007CFD  
                                                    u8160 2C6C  
                                                    u8080 47B8  
                                                    u9200 304A  
                                                    u9017 430C  
                                                    u8330 4090  
                                                    u8090 2C1A  
                                                    u9130 48BE  
                                                    u9210 3078  
                                                    u8251 2CFC  
                                                    u8411 067A  
                                                    u9051 2E3C  
                                                    u8340 40A0  
                                                    u9220 30D6  
                                                    u9037 4338  
                                                    u8261 2D0E  
                                                    u8501 084E  
                                                    u8421 06B0  
                                                    u9310 48EE  
                                                    u8511 086C  
                                                    u9215 306E  
                                                    u9160 468A  
                                                    u8601 099E  
                                                    u8361 062E  
                                                    u9401 1C02  
                                                    u9225 30CC  
                                                    u8290 3C64  
                                                    u9090 2F0C  
                                                    u8611 09BC  
                                                    u9411 1C1C  
                                                    u9340 46CC  
                                                    u7900 36DA  
                                                    u9260 2178  
                                                    u8541 08AA  
                                                    u8381 0650  
                                                    u9421 1C36  
                                                    u7910 36E8  
                                                    u8630 09D6  
                                                    u8550 08B8  
                                                    u8710 3B52  
                                                    u9511 1D44  
                                                    u9431 1C50  
                                                    u9351 1B70  
                                                    u7920 36F6  
                                                    u9280 21EA  
                                                    u8801 4042  
                                                    u8561 0906  
                                                    u9441 1C6A  
                                                    u9361 1B8C  
                                                    u7930 3704  
                                                    u9610 12C8  
                                                    u8651 0AA6  
                                                    u8811 3246  
                                                    u9531 1D86  
                                                    u9451 1C84  
                                                    u9371 1B9E  
                                                    u8740 40DA  
                                                    u9461 1C9E  
                                                    u9710 138A  
                                                    u9630 12EC  
                                                    u8671 0AC8  
                                                    u9551 1DC2  
                                                    u9471 1CC0  
                                                    u9391 1BEA  
                                                    u7880 41D0  
                                                    u8841 32A0  
                                                    u7890 41E0  
                                                    u7970 372C  
                                                    u9810 1452  
                                                    u9730 13B2  
                                                    u9650 1312  
                                                    u8691 0AE4  
                                                    u8851 32BA  
                                                    u9491 1D02  
                                                    u9708 1368  
                                                    u9628 12CC  
                                                    u9580 180E  
                                                    u8861 32EE  
                                                    u9565 15E2  
                                                    u8790 4036  
                                                    u8950 436E  
                                                    u9910 151C  
                                                    u9830 147C  
                                                    u9750 13DC  
                                                    u9670 133A  
                                                    u9575 1690  
                                                    u9808 142E  
                                                    u9728 138E  
                                                    u9648 12F0  
                                                    u9585 1804  
                                                    u9930 1540  
                                                    u9850 14A2  
                                                    u9770 1404  
                                                    u9690 1364  
                                                    u8980 4624  
                                                    u9908 14F8  
                                                    u9828 1456  
                                                    u9748 13B6  
                                                    u9668 1316  
                                                    u9950 1566  
                                                    u9870 14CA  
                                                    u9790 142A  
                                                    u9928 1520  
                                                    u9848 1480  
                                                    u9768 13E0  
                                                    u9688 133E  
                                                    u9890 14F4  
                                                    u9971 1582  
                                                    u9948 1544  
                                                    u9868 14A6  
                                                    u9788 1408  
                                                    u9968 156A  
                                                    u9888 14CE  
                                                    _TRMT 007D61  
                                                    _TXIF 007CF4  
                                          mac_isAllZero@i 0062  
                                     ?_sevenSegmentUpdate 000F  
                                       _ipv4_setToAllZero 4B18  
                                                    _main 1898  
                                                    _rand 429E  
                                 printEthernetState@state 009A  
                                                    _ltoa 439E  
                                                    _time 0029  
                                                    fsr0h 000FEA  
                                                    fsr1h 000FE2  
                                      i2___lwdiv@quotient 0005  
                                                    indf0 000FEF  
                                                    fsr2h 000FDA  
                                                    fsr0l 000FE9  
                                                    indf1 000FE7  
                                                    indf2 000FDF  
                                                    fsr1l 000FE1  
                                                    fsr2l 000FD9  
                                                    btemp 0050  
                                           __CFG_BORV$190 000000  
                               __size_of_sevenSegmentInit 001A  
                                 _ethernetController_init 3EFA  
                                      ?_ipv4_setToAllZero 0060  
                                                    prodh 000FF4  
                                                    prodl 000FF3  
                     __size_of_handleStackBackgroundTasks 00DA  
                                                    start 00E8  
          __end_of_ethernetController_getSourceMACAddress 404C  
         __size_of_ethernetController_getSourceMACAddress 0070  
                ??_ethernetController_getSourceMACAddress 0078  
                 ?_ethernetController_getSourceMACAddress 006F  
                  _ethernetController_getSourceMACAddress 3FDC  
                                            arp_probe@err 0149  
                                           __CFG_IESO$OFF 000000  
                                 __end_of_UARTTransmitInt 4B18  
                                         ??_mac_isAllZero 0062  
                                           __CFG_MCLRE$ON 000000  
                              memory_txFrameRequest@field 0098  
                                            ___param_bank 000000  
                           ethernet_rxGetNewFrame@counter 0035  
                                 _checkForOverlapSwitched 36CA  
              enc424j600_setRXBufferStartAddress@highByte 0071  
            __end_of_ethernetController_getEtherTypeField 3FDC  
           __size_of_ethernetController_getEtherTypeField 0070  
                  ??_ethernetController_getEtherTypeField 0078  
                   ?_ethernetController_getEtherTypeField 006F  
                    _ethernetController_getEtherTypeField 3F6C  
                                                   ??_ISR 0016  
                                     ??_ipv4_setToAllZero 0062  
                             ?_enc424j600_enableReception 0001  
                      __size_of_enc424j600_getPacketCount 001A  
                                          _ipv4_isAllZero 48C2  
                     ethernetController_setLEDConfig@data 0070  
                                    ??_sevenSegmentUpdate 0011  
                                            ?_intToString 0084  
                     ethernetController_setLEDConfig@conf 006E  
        __end_of_ethernetController_getCurrentPacketCount 4C74  
       __size_of_ethernetController_getCurrentPacketCount 0006  
               ?_ethernetController_getCurrentPacketCount 0001  
              ??_ethernetController_getCurrentPacketCount 006F  
                _ethernetController_getCurrentPacketCount 4C6E  
                                           arp_send@field 00F3  
                                                   l10150 26CA  
                                                   l10152 26D4  
                                     arp_checkForEntry@ip 0067  
                                       _nextPacketPointer 0042  
                                                   ?_main 0001  
                                                   ?_rand 006C  
                                                   _CCPR1 000FBE  
                                                   STR_10 7E46  
                                                   ?_ltoa 007A  
                                                   STR_11 7FCB  
                                                   STR_20 7C6C  
                                                   STR_12 7FF4  
                                                   STR_21 7FFD  
                                                   STR_13 7FF7  
                                                   STR_14 7FDC  
                                                   STR_30 7F40  
                                                   STR_22 7ACE  
                                                   STR_15 7FF1  
                                                   STR_31 7E06  
                                                   STR_23 7B01  
                                                   STR_24 7ACE  
                                                   STR_32 7FD8  
                                                   STR_16 7FCB  
                                                   STR_40 7FA0  
                                                   STR_33 7ACE  
                                                   STR_17 7EE5  
                                                   STR_41 7EC9  
                                                   STR_25 7DD7  
                                                   STR_18 7B86  
                                                   STR_50 7F8E  
                                                   STR_26 7F4C  
                                                   STR_34 7F33  
                                                   STR_42 7D2F  
                                                   STR_27 7E44  
                                                   STR_19 7FFA  
                                                   STR_51 7FD7  
                                                   STR_43 7E93  
                                                   STR_35 7E80  
                                                   STR_60 7FCB  
                                                   STR_52 7FCD  
                                                   STR_28 7F97  
                                                   STR_44 7F18  
                                                   STR_36 7E6D  
                                                   STR_29 7FD8  
                                                   STR_61 7E43  
                                                   STR_53 7FED  
                                                   STR_45 7F09  
                                                   STR_37 7E32  
                                                   STR_62 7FC8  
                                                   STR_54 7EA6  
                                                   STR_38 7D6B  
                                                   STR_70 7D11  
                                                   STR_46 7C26  
                                                   STR_71 7FD8  
                                                   STR_63 7E43  
                                                   STR_55 7FD2  
                                                   STR_39 7D88  
                                                   STR_47 7A97  
                                                   STR_64 7FFB  
                                                   STR_56 7FE5  
                                                   STR_80 7FE1  
                                                   STR_72 7DA5  
                                                   STR_48 7C92  
                                                   STR_57 7FE9  
                                                   STR_65 7F7A  
                                                   STR_49 7D4D  
                                                   STR_73 7CF3  
                                                   STR_81 7C4B  
                                                   STR_90 7FF7  
                                                   STR_74 7F26  
                                                   STR_66 7EFA  
                                                   STR_58 7EB8  
                                                   STR_82 7DBF  
                                                   STR_91 7FF7  
                                                   STR_75 7FAF  
                                                   STR_67 7EDA  
                                                   STR_83 7CB4  
                                                   STR_59 7BD9  
                                                   STR_68 7E43  
                                                   STR_92 7FF7  
                                                   STR_76 7B89  
                                                   STR_77 7FAF  
                                                   STR_93 7E43  
                                                   STR_69 7FFB  
                                                   STR_85 7F64  
                                                   STR_94 7FFB  
                                                   STR_86 7FA8  
                                                   STR_78 7E1D  
                                                   STR_87 7FFB  
                                                   STR_79 7F6F  
                                                   STR_95 7E5A  
                                                   STR_88 7FCB  
                                                   STR_96 7B5F  
                                                   STR_97 7FD7  
                                                   STR_89 7FC3  
                                                   STR_98 7C6F  
                                                   STR_99 7A1C  
                                         __end_of___lldiv 3BA2  
                                                   u10201 27B4  
                                                   u11010 29A0  
                                                   u10211 27D6  
                                                   u10140 0EC0  
                                                   u10301 36AA  
                                                   u10221 27E8  
                                                   u11101 0178  
                                                   u11030 4BC0  
                                                   u10311 36BC  
                                                   u10151 0EDE  
                                                   u10231 280C  
                                                   u11008 298C  
                                                   u11121 02A4  
                                                   u10090 0E8C  
                                                   u10410 1FF0  
                                                   u11028 29A4  
                                                   u10260 31A4  
                                                   u10181 273A  
                                                   u10421 2010  
                                                   u11221 4152  
                                                   u10350 382A  
                                                   u10191 274C  
                                                   u10271 31E2  
                                                   u10431 33E4  
                                                   u11240 4ABE  
                                                   u10504 3B02  
                                                   u10520 2B82  
                                                   u10281 3622  
                                                   u10505 3AFE  
                                                   u11161 0422  
                                                   u10291 3688  
                                                   u10611 236E  
                                                   u11171 045C  
                                                   u10700 1164  
                                                   u10540 2224  
                                                   u10460 3E60  
                                                   u10621 2384  
                                                   u10390 1FAA  
                                                   u10630 23D0  
                                                   u10551 2244  
                                                   u10471 3E7C  
                                                   u10800 287A  
                                         __end_of___llmod 411E  
                                                   u10641 23F2  
                                                   u10571 228A  
                                                   u10651 242C  
                                                   u11371 3972  
                                                   u10900 2900  
                                                   u10820 2892  
                                                   u10581 22E8  
                                                   u10494 3AC0  
                                                   u10495 3ABC  
                                                   u11471 19F8  
                                                   u10920 291C  
                                                   u10840 28AC  
                                                   u11481 1AF0  
                                                   u10818 287E  
                                                   u10860 28C8  
                                                   u11557 18EA  
                                                   u10950 294E  
                                                   u10918 2904  
                                                   u10838 2896  
                                                   u11567 1A54  
                                                   u10944 2932  
                                                   u10880 28E6  
                                                   u10945 292C  
                                                   u11577 2B4A  
                                                   u10970 296C  
                                                   u10938 2920  
                                                   u10858 28B0  
                                                   u11587 2DA8  
                                                   u11597 2DE4  
                                                   u10990 2988  
                                                   u10878 28CC  
                                                   u10968 2952  
                                                   u10898 28EA  
                                                   u10988 2970  
                                         __end_of___lwdiv 439E  
                              __end_of_printEthernetState 397C  
                                         __end_of___lwmod 464C  
                                           __CFG_WDTEN$ON 000000  
                                                   i2l721 34D8  
        ethernetController_streamToTransmitBuffer@pointer 003E  
                                                   i2l731 3CFE  
                                                   i2l732 3D02  
                                                   i2l724 34F4  
                                                   i2l733 3D06  
                                                   i2l719 34D0  
                                                   i2l728 3D0A  
                                                   i2l729 3CFA  
                                                   i2l676 3860  
                                                   i2l677 3870  
                                                   i2l678 38B4  
                                                   i2l686 007A  
                                                   i2l687 0098  
                                     _arp_handleNewPacket 2208  
                                                   _SPBRG 000FAF  
                                                   _PORTA 000F80  
                                                   _PORTB 000F81  
                                                   _PORTC 000F82  
                        __size_of_ethernet_txFrameRequest 00E8  
                                                   _TRISA 000F92  
                                                   _TRISB 000F93  
                                                   _TRISC 000F94  
         __end_of_enc424j600_writeControlRegisterUnbanked 482A  
        __size_of_enc424j600_writeControlRegisterUnbanked 0036  
               ??_enc424j600_writeControlRegisterUnbanked 006C  
                ?_enc424j600_writeControlRegisterUnbanked 006A  
                 _enc424j600_writeControlRegisterUnbanked 47F4  
                                           __CFG_WRT0$OFF 000000  
                                           __CFG_WRT1$OFF 000000  
                                           __CFG_WRT2$OFF 000000  
                                     ___lmul@multiplicand 0064  
                                           __CFG_WRT3$OFF 000000  
                                          __CFG_EBTR0$OFF 000000  
                                          __CFG_FCMEN$OFF 000000  
                                          __CFG_EBTR1$OFF 000000  
                                          __CFG_EBTR2$OFF 000000  
                                          __CFG_EBTR3$OFF 000000  
                                         __end_of_mac_cmp 468E  
                                         _ipv4_background 2562  
                                        __end_of_UARTInit 4C0A  
                                         ??_arp_sendReply 00FC  
                                           __CFG_WRTB$OFF 000000  
                                           __CFG_WRTC$OFF 000000  
                                           __CFG_WRTD$OFF 000000  
                                          __CFG_EBTRB$OFF 000000  
                                                   _randx 0049  
                               __end_of_ipv4_setToAllZero 4B36  
                                                   _srand 4C0A  
                                                   _stack 0300  
                                                   _ultoa 2F3A  
           ethernetController_streamToTransmitBuffer@data 007C  
                       __end_of_ethernetController_getRSV 3E86  
                                          __pbitbssCOMRAM 0278  
                                                   pclath 000FFA  
                                                   tablat 000FF5  
                            ethernet_txFrameRequest@frame 00A2  
                                        ?_checkForOverlap 0072  
                                                   plusw0 000FEB  
                                                   plusw1 000FE3  
                                                   plusw2 000FDB  
                             memory_txFrameRequest@i_1187 0097  
                                                   status 000FD8  
                                          __CFG_T3CMX$RC0 000000  
                                                   wtemp6 0051  
                       enc424j600_clearInterruptFlag@flag 0070  
                             __size_of_mac_setToBroadcast 0026  
                                          __CFG_ICPRT$OFF 000000  
                       enc424j600_clearInterruptFlag@temp 0071  
                                    ?_arp_handleNewPacket 00FC  
                                __end_of_UARTTransmitText 434A  
                                          __CFG_PBADEN$ON 000000  
                                      __size_ofi2___lwdiv 0052  
                                            ?_parseNumber 0008  
                                        _ipAdressToString 201A  
                                         __initialization 3BA2  
                       ethernetController_softReset@F5981 004D  
                       ethernetController_softReset@F5983 0040  
                             memory_txFrameRequest@length 0084  
                                            __end_of_main 1B58  
                                  __end_of_ipv4_isAllZero 48F2  
                                            __end_of_rand 42F4  
                                            __end_of_ltoa 43F2  
                                ?_ipv4_getIPSourceAddress 0060  
                                  arpEntryToString@string 027F  
                                ?_ipv4_setIPSourceAddress 009A  
                                    _ipv4_handleNewPacket 23B6  
                                          __CFG_PCLKEN$ON 000000  
                              _memory_txFrameRequest$1183 0093  
                       __end_of_enc424j600_getPacketCount 4B86  
                                          arp_send@i_3070 00D0  
                                          arp_send@i_3068 00CE  
                                          arp_send@i_3069 00CF  
                                                  ??_main 0189  
                                                  ??_rand 006E  
                               __size_of_entireMemoryFull 0038  
                                                  ??_ltoa 0082  
                                           __activetblptr 000002  
                         handleStackBackgroundTasks@stack 0186  
                                          __CFG_SDOMX$RB3 000000  
                                         __CFG_CCP2MX$RC1 000000  
       ethernetController_writeDestinationMACAddress@addr 006F  
       ethernetController_writeDestinationMACAddress@data 007E  
                ethernetController_pollInterruptFlags@reg 0080  
                                        ___llmod@dividend 0060  
                                                  STR_100 7B32  
                                                  STR_101 7CD5  
                                                  STR_102 7DEF  
                                                  STR_103 7C00  
                                                  STR_104 7FD7  
                                                  STR_105 7A5C  
                                                  STR_106 7BB2  
                                    __size_of_macToString 0108  
                                                  ?_srand 007A  
                                                  _ANSELA 000F5B  
                                                  _ANSELB 000F5C  
                                                  _ANSELC 000F5D  
                              ethernetController_getRSV@i 0077  
                                                  ?_ultoa 006D  
                                    ipv4_parseHeader@temp 008E  
                       __size_of_ipv4_checkHeaderChecksum 00C8  
                              printEthernetState@oldState 0200  
                                                  i2l1544 4410  
                                                  i2l1545 4408  
                                                  i2l1548 4430  
                                                  i2l1549 443A  
                                                  i2l7022 34EC  
                               ??_ethernetController_init 007D  
                               ?_ipv4_checkHeaderChecksum 009A  
       __end_of_ethernetController_streamToTransmitBuffer 3E12  
      __size_of_ethernetController_streamToTransmitBuffer 0078  
             ??_ethernetController_streamToTransmitBuffer 0078  
              ?_ethernetController_streamToTransmitBuffer 006F  
               _ethernetController_streamToTransmitBuffer 3D9A  
                                         _fSrcAddrChanged 0278  
                                   ??_arp_handleNewPacket 00FE  
                                                  _TXREG1 000FAD  
                                        mac_isAllZero@mac 0060  
                          ??_ethernetController_softReset 0071  
                               ??_checkForOverlapSwitched 0072  
                              ethernetController_init@err 007D  
                                  __size_of_buttonHandler 00AC  
                                 ?_ethernet_rxGetNewFrame 0178  
                                        ?_UARTTransmitInt 009A  
                                          __CFG_XINST$OFF 000000  
                                        __end_of_arp_init 4184  
                                        __end_of_arp_send 1DD0  
                                                  ___lmul 4246  
                                        __end_of_ipv4_cmp 46D0  
                                         ?_ipv4_isAllZero 0060  
                                                  ___wmul 49C8  
                                   ?_ipv4_handleNewPacket 00B5  
                      __end_of_handleStackBackgroundTasks 33D6  
                              _handleStackBackgroundTasks 32FC  
                                          __CFG_STVREN$ON 000000  
                                   buttonHandler@oldState 0047  
                                               ??___lldiv 0068  
             enc424j600_writeControlRegisterUnbanked@addr 006C  
                                   buttonHandler@newState 0046  
             enc424j600_writeControlRegisterUnbanked@data 006A  
                                               ??___llmod 0068  
                                               ??___lwdiv 0064  
                                               ??___lwmod 0072  
                                    __size_of_hexToString 00EE  
                           enc424j600_setTXLength@lowByte 0070  
                            buttonHandler@debounceCounter 002D  
                                                  clear_0 3BE8  
                                                  clear_1 3BF4  
                                                  clear_2 3C00  
                                                  clear_3 3C0E  
                              parseNumber@numberToDisplay 0008  
                                arp_parseFromRXBuffer@arp 009D  
                                 __end_of_ipv4_background 26F6  
  __end_of_ethernetController_writeEtherTypeFieldToBuffer 44E2  
 __size_of_ethernetController_writeEtherTypeFieldToBuffer 004E  
        ??_ethernetController_writeEtherTypeFieldToBuffer 007A  
         ?_ethernetController_writeEtherTypeFieldToBuffer 006F  
          _ethernetController_writeEtherTypeFieldToBuffer 4494  
                                               ??_mac_cmp 0064  
                                        ??_mac_setAllZero 0062  
                                           main@prescaler 02E9  
          ethernetController_streamToTransmitBuffer@field 006F  
          __end_of_enc424j600_readControlRegisterUnbanked 4860  
         __size_of_enc424j600_readControlRegisterUnbanked 0036  
                ??_enc424j600_readControlRegisterUnbanked 006C  
                 ?_enc424j600_readControlRegisterUnbanked 006A  
                  _enc424j600_readControlRegisterUnbanked 482A  
                                            __pdataCOMRAM 0049  
                                      _enc424j600_initSPI 4B36  
                           ?_enc424j600_setTXStartAddress 006E  
                                      _enc424j600_readSPI 404C  
                ethernetController_softReset@comFailCount 0072  
                                                  ltoa@cp 0082  
                                       __end_ofi2___lwdiv 4444  
                                            __mediumconst 7A10  
                             __size_of_ipProtocolToString 0048  
                                                  tblptrh 000FF7  
                                                  tblptrl 000FF6  
                                                  tblptru 000FF8  
                                                  srand@x 007A  
           __end_of_ethernetController_clearInterruptFlag 4C34  
          __size_of_ethernetController_clearInterruptFlag 000E  
                  ?_ethernetController_clearInterruptFlag 0001  
                 ??_ethernetController_clearInterruptFlag 0072  
                   _ethernetController_clearInterruptFlag 4C26  
                                     mac_setToBroadcast@i 0062  
                                                  ultoa@c 0079  
                                                  ultoa@v 0075  
                              __size_of_ipv4_setToAllZero 001E  
                                     ?_enc424j600_initSPI 0001  
                                      ipv4_background@err 009C  
                                          arp_probe@index 013C  
                                     ?_enc424j600_readSPI 0060  
                         ethernetController_softReset@err 0077  
                                         _numberToDisplay 0031  
                                    __CFG_LS48MHZ$SYS24X4 000000  
                                          arp_probe@state 01DF  
                                 ipAdressToString@address 02D9  
      __end_of_ethernetController_updateNextPacketPointer 3D9A  
     __size_of_ethernetController_updateNextPacketPointer 007A  
             ?_ethernetController_updateNextPacketPointer 0001  
            ??_ethernetController_updateNextPacketPointer 006F  
              _ethernetController_updateNextPacketPointer 3D20  
                     __size_of_enc424j600_enableReception 0008  
                                __size_of_arp_setNewEntry 00EE  
                       sevenSegmentUpdate@digitsToDisplay 0039  
                                              __accesstop 0060  
                                 __end_of__initialization 3C14  
                                       _printErrorMessage 29BA  
                                __size_of_arp_sendRequest 00B2  
                            ??_enc424j600_readPHYRegister 0070  
           ethernetController_getEtherTypeField@ethertype 007C  
                                   _arp_parseFromRXBuffer 0AEE  
                          __end_of_ethernet_rxGetNewFrame 0612  
                                        _sevenSegmentInit 4B52  
                            __size_of_enc424j600_writeSPI 0064  
               ethernetController_updateLinkStatus@temp16 0083  
                                           ___rparam_used 000001  
                                      ?_printErrorMessage 009A  
              ethernetController_pollInterruptFlags@flags 007E  
                             arp_parseFromRXBuffer@i_2993 0098  
                             arp_parseFromRXBuffer@i_2994 0099  
                             arp_parseFromRXBuffer@i_2995 009A  
                                 enc424j600_writeSPI@data 0060  
                                          __pcstackCOMRAM 0001  
                                        __CFG_nPWRTEN$OFF 000000  
                                 ipAdressToString@pointer 0087  
 enc424j600_updateReceiveStatusVector@receiveStatusVector 006C  
                                            __pidataBANK2 48F2  
                                       ipv4_parseHeader@i 008C  
                                               ?_UARTInit 0001  
                                    ??_enc424j600_initSPI 0060  
                                    ??_enc424j600_readSPI 0062  
                                     ??_printErrorMessage 009D  
                         enc424j600_setRXTailPointer@addr 006E  
                         __end_of_ethernetController_init 3F6C  
                                           __end_of_srand 4C18  
                         ??_ethernetController_dropPacket 0074  
                                           __end_of_ultoa 3038  
                             arp_parseFromRXBuffer@offset 009B  
     ethernetController_getSourceMACAddress@sourceAddress 0079  
                           ?_enc424j600_getInterruptFlags 006E  
                                     arp_send@destination 00C7  
                                 _ethernet_txFrameRequest 3214  
                               __size_of_ipv4_parseHeader 024A  
                              ipProtocolToString@protocol 0062  
                                    __size_of_intToString 0032  
                         __end_of_checkForOverlapSwitched 377C  
                                      __size_of_getMillis 0012  
                                           _buttonHandler 382E  
                      ethernetController_dropPacket@frame 0072  
                          __size_of_memory_txFrameRequest 04DC  
                             __end_of_ipv4_SrcAddrChanged 4BB2  
                           __end_of_memory_txFrameRequest 0AEE  
                                      __size_of_hexToChar 0022  
                                      __size_of_arp_probe 0388  
                                  arp_parseFromRXBuffer@i 0097  
                    __size_of_enc424j600_setRXTailPointer 002A  
                                                 ??_srand 007C  
                                      __size_of_ipv4_init 0004  
                                                 ??_ultoa 0075  
                               __end_of_printErrorMessage 2AE8  
                        enc424j600_getPacketCount@lowByte 006E  
                                              __pbssBANK1 018B  
                                              __pbssBANK2 0200  
                                              __pbssBANK3 0300  
                             __end_of_memory_txFrameClear 4AB0  
                          ?_enc424j600_clearInterruptFlag 0001  
                                       _etherTypeToString 45C4  
                                      ?_etherTypeToString 0060  
                                       __CFG_PLLSEL$PLL4X 000000  
                                  ??_ipv4_handleNewPacket 00B7  
                         ??_ethernetController_sendPacket 007B  
                                                 ?___lmul 0060  
                                                 ?___wmul 0060  
                                              ??_UARTInit 0060  
                                    __size_of_parseNumber 007E  
                                          hexToString@val 0061  
                                          ___lmul@product 0068  
                                   macToString@firstDigit 0093  
                                     ??_etherTypeToString 0062  
          ethernetController_writeDestinationMACAddress@i 0086  
                                        ?_ipv4_background 0001  
                                        _entireMemoryFull 4784  
                                   ipv4_parseHeader@field 0074  
                                          ?_buttonHandler 0001  
                              etherTypeToString@ethertype 0060  
                                  ipv4_SrcAddrChanged@err 0060  
                 enc424j600_updateReceiveStatusVector@rsv 0060  
                       enc424j600_readPHYRegister@lowByte 007D  
                                __end_of_ipAdressToString 2208  
                                         __CFG_WDTPS$1024 000000  
                enc424j600_setERXDATAReadPointer@highByte 006E  
                                                 _SSP1BUF 000FC9  
  ethernetController_writeEtherTypeFieldToBuffer@highByte 007B  
                                               ?_arp_init 0001  
                                               ?_arp_send 00A7  
                          ??_enc424j600_setTXStartAddress 0070  
                                               ?_ipv4_cmp 0060  
                                        __CFG_CFGPLLEN$ON 000000  
                                      _printEthernetState 38DA  
                               __end_of_etherTypeToString 4608  
                                  ?_arp_parseFromRXBuffer 0074  
                  enc424j600_setRXBufferStartAddress@addr 006E  
           __end_of_ethernetController_streamFromRXBuffer 4246  
          __size_of_ethernetController_streamFromRXBuffer 005E  
                 ??_ethernetController_streamFromRXBuffer 0071  
                  ?_ethernetController_streamFromRXBuffer 006F  
                   _ethernetController_streamFromRXBuffer 41E8  
                          sevenSegmentUpdate@digitPointer 0045  
                                       ?_UARTTransmitText 0098  
                                       __end_of_getMillis 4BFA  
                                                 __Hparam 0000  
                      __end_of_enc424j600_enableReception 4C68  
                              _enc424j600_enableReception 4C60  
ethernetController_updateNextPacketPointer@nextPktPointer 0075  
                                                 __Lparam 0000  
                                         ipv4_isAllZero@i 0062  
                                     ?_printEthernetState 009A  
                                       ??_arp_setNewEntry 0072  
               __end_of_enc424j600_enableAutoMACInsertion 4A40  
              __size_of_enc424j600_enableAutoMACInsertion 0028  
                      ?_enc424j600_enableAutoMACInsertion 0001  
                     ??_enc424j600_enableAutoMACInsertion 006E  
                       _enc424j600_enableAutoMACInsertion 4A18  
                                       __end_of_hexToChar 4AF6  
                                      ??_UARTTransmitText 009A  
                                checkForOverlapSwitched@a 0060  
                                checkForOverlapSwitched@b 0069  
                                       ??_arp_sendRequest 00FC  
                                       __end_of_arp_probe 1270  
                                      buttonHandler@state 0001  
                               enc424j600_setTXLength@len 006E  
                                   __end_of_mac_isAllZero 48C2  
                                         __size_of___lmul 0058  
                          enc424j600_setTXLength@highByte 0071  
                                                 ___lldiv 3B1E  
                                         __size_of___wmul 0028  
                                                 ___llmod 40B6  
                                                 ___lwdiv 434A  
                                                 ___lwmod 4608  
                    enc424j600_setGPDATAWritePointer@addr 006A  
                               ??_ethernet_txFrameRequest 00A4  
                                       __end_of_ipv4_init 4C78  
                                     sevenSegmentUpdate@i 0015  
                                                 __pcinit 3BA2  
                             __size_of_sevenSegmentUpdate 00BE  
                                     parseNumber@hundreds 000E  
                                                 __ramtop 0800  
                                                 __ptext0 1898  
                                                 __ptext1 4C42  
                                                 __ptext2 4C74  
                                                 __ptext3 411E  
                                                 __ptext4 4C0A  
                                                 __ptext5 4B52  
                                                 __ptext6 38DA  
                                                 __ptext7 29BA  
                                                 __ptext8 4444  
                                                 __ptext9 32FC  
                                                 _mac_cmp 464C  
                                  ipv4_handleNewPacket@ip 00C2  
                                               _T0CONbits 000FD5  
                            ??_handleStackBackgroundTasks 0188  
                                            __size_of_ISR 00E0  
                                               _T1CONbits 000FCD  
                  enc424j600_setGPDATAWritePointer@opcode 006C  
                      enc424j600_setRXTailPointer@lowByte 0070  
              __end_of_enc424j600_setRXBufferStartAddress 49C8  
             __size_of_enc424j600_setRXBufferStartAddress 002A  
                    ??_enc424j600_setRXBufferStartAddress 0070  
                     ?_enc424j600_setRXBufferStartAddress 006E  
                      _enc424j600_setRXBufferStartAddress 499E  
                   __end_of_ethernetController_dropPacket 470C  
                  __size_of_ethernetController_dropPacket 003C  
                           _ethernetController_dropPacket 46D0  
                                    ??_printEthernetState 00A9  
           __end_of_ethernetController_pollInterruptFlags 29BA  
          __size_of_ethernetController_pollInterruptFlags 0158  
                 ??_ethernetController_pollInterruptFlags 007A  
                  ?_ethernetController_pollInterruptFlags 0078  
                   _ethernetController_pollInterruptFlags 2862  
                          ??_enc424j600_getInterruptFlags 0070  
                        __size_of_ipv4_getIPSourceAddress 0012  
                 enc424j600_setGPDATAWritePointer@lowByte 006D  
                        __size_of_ipv4_setIPSourceAddress 0050  
                                              ??_arp_init 007C  
                                                 main@err 02EF  
                                              ??_arp_send 00C7  
                                   __end_of_arp_sendReply 2862  
                                    end_of_initialization 3C14  
                              __size_of_printErrorMessage 012E  
                                              ??_ipv4_cmp 0064  
                              __end_of_mac_setToBroadcast 4A8C  
                              ?_ethernetController_getRSV 0071  
                                           __Lmediumconst 7A10  
                                                 ltoa@buf 007A  
                                        ??_ipv4_isAllZero 0062  
                         ipv4_calculateHeaderChecksum@sum 006E  
                                                 ltoa@val 007C  
                                         mac_setAllZero@i 0062  
             ethernetController_streamFromRXBuffer@opcode 0072  
                                         ___lldiv@divisor 0064  
                                         ___lldiv@counter 006C  
                                 __size_of_arp_background 00BC  
                                      entireMemoryEmpty@i 0060  
                                __size_of_checkForOverlap 011E  
                                                 postdec1 000FE5  
                                                 postdec2 000FDD  
                                         macToString@addr 007A  
                                                 postinc0 000FEE  
                                                 postinc1 000FE6  
                                                 postinc2 000FDE  
                                       arp_setNewEntry@ip 006A  
                             ?_handleStackBackgroundTasks 0186  
                                       _arp_checkForEntry 377C  
                   memory_txFrameRequest@fNoOverlapMarker 0095  
                    enc424j600_readPHYRegister@PHYaddress 0077  
                                         ??_buttonHandler 0003  
                                      ?_arp_checkForEntry 0067  
                   __end_of_ethernetController_sendPacket 4A18  
                  __size_of_ethernetController_sendPacket 0028  
                           _ethernetController_sendPacket 49F0  
                                       arp_sendReply@myIP 0134  
                                               _PORTBbits 000F81  
                                        _ipv4_parseHeader 1DD0  
                             ?_enc424j600_writeSingleByte 0001  
                              ?_enc424j600_getPacketCount 0001  
                                ??_enc424j600_setTXLength 0070  
                       sevenSegmentUpdate@numberToDisplay 000F  
                                __end_of_sevenSegmentInit 4B6C  
                                     _enc424j600_writeSPI 4184  
                                              _stack_init 4C42  
                                           ??_macToString 0080  
                  ethernetController_softReset@dataToSend 0073  
                                               _TRISBbits 000F93  
                                     ??_arp_checkForEntry 006D  
                                              _updateTime 4C34  
         __end_of_ethernetController_getNextPacketPointer 4C26  
        __size_of_ethernetController_getNextPacketPointer 000E  
               ??_ethernetController_getNextPacketPointer 0064  
                ?_ethernetController_getNextPacketPointer 0062  
                 _ethernetController_getNextPacketPointer 4C18  
                                              arp_init@ip 0082  
                             __end_of_arp_handleNewPacket 23B6  
                                       i2___lwdiv@divisor 0003  
                         __end_of_ethernet_txFrameRequest 32FC  
                        ethernetController_getRSV@address 0071  
                                               i2___lwdiv 43F2  
                                       i2___lwdiv@counter 0007  
                              __size_of_etherTypeToString 0044  
                                     UARTTransmitText@str 0098  
                                             _CCP1CONbits 000FBD  
                    __end_of_ipv4_calculateHeaderChecksum 1898  
                   __size_of_ipv4_calculateHeaderChecksum 030C  
                            _ipv4_calculateHeaderChecksum 158C  
                    enc424j600_setTXStartAddress@highByte 0071  
                                    ?_enc424j600_writeSPI 0060  
                                       intToString@number 02B1  
                                ipAdressToString@hundreds 0083  
                                   arp_probe@probeCounter 01E0  
                               __end_of_arp_checkForEntry 382E  
                                           ??_hexToString 0065  
                              arp_setNewEntry@oldestIndex 007A  
                                      arp_checkForEntry@i 0075  
                                      ipv4_parseHeader@ip 008F  
                                          __end_of___lmul 429E  
        ethernetController_updateNextPacketPointer@opcode 0077  
                                          __end_of___wmul 49F0  
                                           __pidataCOMRAM 4C68  
                                        parseNumber@digit 000A  
                            ?_enc424j600_setRXTailPointer 006E  
                                __size_of_UARTTransmitInt 0022  
                                       __size_of_UARTInit 0010  
                  enc424j600_setERXDATAReadPointer@opcode 006C  
                              __end_of_ipProtocolToString 45C4  
                                      hexToString@pointer 0069  
                      ipv4_checkHeaderChecksum@testHeader 009E  
                                  arp_sendReply@senderMAC 0120  
                                  arp_sendReply@targetMAC 0126  
             __end_of_ethernetController_updateLinkStatus 3A94  
            __size_of_ethernetController_updateLinkStatus 008A  
                   ??_ethernetController_updateLinkStatus 0082  
                    ?_ethernetController_updateLinkStatus 0080  
                     _ethernetController_updateLinkStatus 3A0A  
                                     start_initialization 3BA2  
                                             __end_of_ISR 00E8  
                                  enc424j600_readSPI@data 0060  
                                          intToString@val 0084  
                          ipv4_checkHeaderChecksum@header 009A  
                                ?_ethernetController_init 007A  
                                _ipv4_checkHeaderChecksum 33D6  
                         ipv4_handleNewPacket@headerField 00B9  
                                              ?i2___lwdiv 0001  
                                ?_checkForOverlapSwitched 0060  
                                     __end_of_macToString 2F3A  
                                         __CFG_nLPBOR$OFF 000000  
                                   ??_enc424j600_writeSPI 0062  
                                __end_of_entireMemoryFull 47BC  
   __end_of_ethernetController_writeDestinationMACAddress 3CA2  
  __size_of_ethernetController_writeDestinationMACAddress 0080  
         ??_ethernetController_writeDestinationMACAddress 007E  
          ?_ethernetController_writeDestinationMACAddress 006F  
           _ethernetController_writeDestinationMACAddress 3C22  
                                         ___llmod@divisor 0064  
                     ethernetController_checkDeviceId@err 0072  
                                         ___llmod@counter 0068  
                           ?_ipv4_calculateHeaderChecksum 0060  
                           ethernetController_getRSV@temp 01EB  
                     __end_of_enc424j600_setRXTailPointer 499E  
                             _enc424j600_setRXTailPointer 4974  
                                    printErrorMessage@err 009A  
                                                ??___lmul 0068  
                                          _occupiedMemory 018B  
                                                ??___wmul 0064  
                             arp_background@ipPreliminary 014E  
                  ethernetController_getDeviceName@string 0062  
                             __size_of_enc424j600_initSPI 001C  
                                             __pdataBANK2 02BB  
                             __size_of_enc424j600_readSPI 006A  
                                           ??_intToString 0088  
                            ??_enc424j600_enableReception 006B  
                                        checkForOverlap@a 0072  
                                        checkForOverlap@b 007B  
                        enc424j600_readSPI@timeoutCounter 0066  
                         ??_enc424j600_clearInterruptFlag 006E  
                                       ??_checkForOverlap 0084  
                                     __end_of_hexToString 3126  
                           ??_enc424j600_setRXTailPointer 0070  
                                             ?_stack_init 0001  
                         __size_of_enc424j600_setTXLength 002A  
                                             __pbssCOMRAM 0029  
                        enc424j600_writeSingleByte@opcode 006A  
                                 _ipv4_getIPSourceAddress 4BD6  
                                 _ipv4_setIPSourceAddress 4444  
                ethernetController_updateLinkStatus@state 0080  
                                           __pcstackBANK0 0060  
                                           __pcstackBANK1 0100  
                                           __pcstackBANK2 02E9  
                                             ?_updateTime 0001  
                                       ?_ipAdressToString 0073  
                                   _memory_txFrameRequest 0612  
           __end_of_ethernetController_newPacketAvailable 4BC4  
          __size_of_ethernetController_newPacketAvailable 0012  
                  ?_ethernetController_newPacketAvailable 0001  
                 ??_ethernetController_newPacketAvailable 006F  
                   _ethernetController_newPacketAvailable 4BB2  
                              arp_parseFromRXBuffer@frame 0074  
                                 ??_arp_parseFromRXBuffer 0094  
                ethernetController_softReset@receivedData 0075  
                                      ??_ipAdressToString 0077  
                                         _arp_setNewEntry 3126  
                            __size_of_ipv4_SrcAddrChanged 0014  
                        enc424j600_getInterruptFlags@high 0077  
                                         _arp_sendRequest 3618  
                                 __size_of_mac_setAllZero 0026  
                                       __size_of_arp_init 0066  
                                       __size_of_arp_send 0278  
                                       __size_of_ipv4_cmp 0042  
                              buttonHandler@debounceValue 0007  
                                        arp_send@ethFrame 00D1  
                                          _arp_background 355C  
                     __size_of_enc424j600_writeSingleByte 0018  
                                           ??_parseNumber 000B  
                                               _main$2369 02ED  
                                        ___lwdiv@dividend 0060  
                                      _sevenSegCharacters 02CD  
              ethernetController_getEtherTypeField@opcode 007E  
                              __size_of_arp_checkForEntry 00B2  
                                               __pintcode 0008  
                            __size_of_memory_txFrameClear 0024  
                                           __pmediumconst 7A10  
                                               _getMillis 4BE8  
                                               __ptext100 482A  
                                               __ptext101 4184  
                                               __ptext110 382E  
                                               __ptext102 404C  
                                               __ptext103 4B36  
                                               __ptext104 4BFA  
                                               __ptext106 4C34  
                                               __ptext107 349E  
                                               __ptext108 3CA2  
                                               __ptext109 43F2  
                                                ?___lldiv 0060  
                                                ?___llmod 0060  
                           __size_of_ipv4_handleNewPacket 01AC  
                                  arp_checkForEntry@index 006B  
                                                ?___lwdiv 0060  
                                               _arpStatus 003C  
                                                ?___lwmod 006E  
     ethernetController_writeEtherTypeFieldToBuffer@field 0071  
                                               _hexToChar 4AD4  
                                               _arp_table 020F  
                                               _arp_probe 0EE8  
                                     ipv4_setToAllZero@ip 0060  
                                                ?_mac_cmp 0060  
                               __size_of_UARTTransmitText 0056  
                                               _ipv4_init 4C74  
              ethernetController_getSourceMACAddress@temp 007F  
                    enc424j600_setERXDATAReadPointer@addr 006A  
                 enc424j600_setERXDATAReadPointer@lowByte 006D  
                                  ipv4_parseHeader@i_3580 008D  
                                      ipAdressToString@ip 0073  
                                     __end_of_intToString 4892  
                                             _macToString 2E32  
                                       ??_UARTTransmitInt 009E  
                                        ___lwdiv@quotient 0065  
                                __size_of_ipv4_background 0194  
                                       _entireMemoryEmpty 47BC  
                                ??_ethernet_rxGetNewFrame 017B  
                                             ??i2___lwdiv 0005  
                                          __size_of_srand 000E  
                                          __size_of_ultoa 00FE  
                      enc424j600_readPHYRegister@highByte 007E  
                                      ?_entireMemoryEmpty 0001  
                             ?_enc424j600_readPHYRegister 006E  
                                arp_setNewEntry@timestamp 006E  
                             ??_ethernetController_getRSV 0076  
                                  __end_of_arp_background 3618  
                                          ___wmul@product 0064  
                             ethernet_rxGetNewFrame@frame 0178  
                                __end_of_ipv4_parseHeader 201A  
                                  _enc424j600_setTXLength 494A  
                                                _PIE1bits 000F9D  
                       enc424j600_writeSPI@timeoutCounter 0066  
                                     __size_of_stack_init 000A  
                                     ??_entireMemoryEmpty 0060  
                                                _PIR1bits 000F9E  
                                       entireMemoryFull@i 0060  
                                                i2u750_40 388A  
                                                i2u682_40 4414  
                                                i2u754_44 34AE  
                                                i2u754_45 34AA  
                                                i2u780_40 0060  
                                                i2u780_46 0062  
                                                i2u749_40 3888  
                                                i2u758_40 351A  
                                                i2u759_44 352A  
                                                i2u759_45 3526  
                                                _RCONbits 000FD0  
                                        arp_setNewEntry@i 007B  
                                     __size_of_updateTime 000E  
                                             _hexToString 3038  
                                      _mac_setToBroadcast 4A66  
                              __end_of_sevenSegmentUpdate 355C  
                                              ?_getMillis 0060  
                                                _UARTInit 4BFA  
                          ??_ipv4_calculateHeaderChecksum 0062  
                    __end_of_enc424j600_setTXStartAddress 494A  
                   __size_of_enc424j600_setTXStartAddress 002A  
                            _enc424j600_setTXStartAddress 4920  
                                  arp_handleNewPacket@arp 0158  
                                      UARTTransmitInt@val 009A  
                                              ?_hexToChar 0001  
                                     __end_of_parseNumber 3D20  
                __end_of_enc424j600_setERXDATAReadPointer 4784  
               __size_of_enc424j600_setERXDATAReadPointer 003C  
                      ??_enc424j600_setERXDATAReadPointer 006C  
                       ?_enc424j600_setERXDATAReadPointer 006A  
                        _enc424j600_setERXDATAReadPointer 4748  
                                              ?_arp_probe 00FC  
                                               arp_init@i 0086  
                               ??_ipv4_getIPSourceAddress 0064  
                                       ___wmul@multiplier 0060  
                               ??_ipv4_setIPSourceAddress 009E  
                                     ?_mac_setToBroadcast 0060  
                                               arp_send@i 00CD  
                             ??_enc424j600_getPacketCount 006E  
                                              ?_ipv4_init 0001  
   ethernetController_updateNextPacketPointer@newPointerH 0079  
   ethernetController_updateNextPacketPointer@newPointerL 0078  
                                               main@ipDst 02F2  
                                               main@ipSrc 02F6  
                                       ?_sevenSegmentInit 0001  
                                 __end_of_arp_setNewEntry 3214  
                                 __end_of_arp_sendRequest 36CA  
                               __end_of_entireMemoryEmpty 47F4  
                                  ?_memory_txFrameRequest 0084  
                    ethernetController_checkDeviceId@data 0071  
                             __size_of_printEthernetState 00A2  
                   __end_of_enc424j600_clearInterruptFlag 3B1E  
                  __size_of_enc424j600_clearInterruptFlag 008A  
                           _enc424j600_clearInterruptFlag 3A94  
                                      ??_sevenSegmentInit 0060  
                     enc424j600_setTXStartAddress@lowByte 0070  
                                               ipv4_cmp@a 0060  
                                               ipv4_cmp@b 0062  
                                               ipv4_cmp@i 0066  
                                    arp_probe@waitingTime 0145  
                                       ___lmul@multiplier 0060  
                                             _INTCON3bits 000FF0  
                                               copy_data0 3BB6  
                                               copy_data1 3BD6  
                                         parseNumber@ones 000C  
                                         parseNumber@tens 000D  
                                       hexToString@number 01E1  
                                  __size_of_mac_isAllZero 0030  
                                   arp_sendReply@senderIP 012C  
                                   arp_sendReply@targetIP 0130  
                                      macToString@address 0081  
                                    ipAdressToString@ones 007B  
                                    ipAdressToString@tens 007F  
                                    ??_mac_setToBroadcast 0062  
                                         ?_arp_background 0001  
                __end_of_ethernetController_checkDeviceId 4530  
               __size_of_ethernetController_checkDeviceId 004E  
                      ??_ethernetController_checkDeviceId 0071  
                       ?_ethernetController_checkDeviceId 006E  
                        _ethernetController_checkDeviceId 44E2  
                                                __Hrparam 0000  
                                        ipv4_isAllZero@ip 0060  
                        enc424j600_setTXStartAddress@addr 006E  
                                ?_ethernet_txFrameRequest 00A2  
                                                __Lrparam 0000  
                    __end_of_enc424j600_getInterruptFlags 457C  
                   __size_of_enc424j600_getInterruptFlags 004C  
                            _enc424j600_getInterruptFlags 4530  
                                      __CFG_BOREN$SBORDIS 000000  
                      __end_of_enc424j600_writeSingleByte 4B9E  
                              _enc424j600_writeSingleByte 4B86  
                                  macToString@secondDigit 0094  
                                  __size_of_arp_sendReply 016C  
                                        __size_of___lldiv 0084  
                                        __size_of___llmod 0068  
                                             _intToString 4860  
                                        __size_of___lwdiv 0054  
                                        __size_of___lwmod 0044  
                 ethernetController_updateLinkStatus@temp 0082  
                              ??_ipv4_checkHeaderChecksum 009C  
                               _ethernetController_getRSV 3E12  
                 __end_of_ethernetController_setLEDConfig 3A0A  
                __size_of_ethernetController_setLEDConfig 008E  
                       ??_ethernetController_setLEDConfig 006F  
                        ?_ethernetController_setLEDConfig 006E  
                         _ethernetController_setLEDConfig 397C  
            ethernetController_getEtherTypeField@highByte 0080  
                                              _ANSELBbits 000F5C  
                                   __end_of_buttonHandler 38DA  
                         enc424j600_getInterruptFlags@low 0076  
                                        __size_of_mac_cmp 0042  
       ethernetController_streamFromRXBuffer@startAddress 006F  
                                             _buttonState 01F4  
                     enc424j600_setRXTailPointer@highByte 0071  
                                arp_sendRequest@senderMAC 0108  
                                  memory_txFrameRequest@i 0096  
                                arp_sendRequest@targetMAC 010E  
                                         ___lwdiv@divisor 0062  
                                         ___lwdiv@counter 0064  
                                       mac_setAllZero@mac 0060  
                                     _ipPreliminarySource 01D7  
                                                __ptext10 2562  
                                                __ptext11 00EC  
                                                __ptext20 3E12  
                                                __ptext12 23B6  
                                                __ptext21 1270  
                                                __ptext13 1DD0  
                                                __ptext30 2E32  
                                                __ptext22 3F6C  
                                                __ptext14 33D6  
                                                __ptext31 0AEE  
                                                __ptext23 45C4  
                                                __ptext15 158C  
                                                __ptext40 2862  
                                                __ptext32 4892  
                                                __ptext24 2208  
                                                __ptext16 3038  
                                                __ptext41 4530  
                                                __ptext33 464C  
                                                __ptext25 46D0  
                                                __ptext17 4AD4  
                                                __ptext50 4B18  
                                                __ptext42 4BB2  
                                                __ptext34 48C2  
                                                __ptext26 4C18  
                                                __ptext18 457C  
                                                __ptext51 4BC4  
                                                __ptext43 4C26  
                                                __ptext35 41E8  
                                                __ptext27 4C4C  
                                                __ptext19 3D20  
                                                __ptext60 3618  
                                                __ptext52 201A  
                                                __ptext44 3A94  
                                                __ptext36 4AF6  
                                                __ptext28 3126  
                                                __ptext61 4A40  
                                                __ptext53 4608  
                                                __ptext45 355C  
                                                __ptext37 3A0A  
                                                __ptext29 26F6  
                                                __ptext70 2C0A  
                                                __ptext62 4BD6  
                                                __ptext54 434A  
                                                __ptext46 4B9E  
                                                __ptext38 2AE8  
                                                __ptext71 36CA  
                                                __ptext63 3E86  
                                                __ptext55 4860  
                                                __ptext47 0EE8  
                                                __ptext39 397C  
                                                __ptext80 494A  
                                                __ptext72 49C8  
                                                __ptext64 1B58  
                                                __ptext56 439E  
                                                __ptext48 429E  
                                                __ptext81 3FDC  
                                                __ptext73 4494  
                                                __ptext65 4A66  
                                                __ptext57 2F3A  
                                                __ptext49 4246  
                                                __ptext90 4974  
                                                __ptext82 4748  
                                                __ptext74 3C22  
                                                __ptext66 3214  
                                                __ptext58 40B6  
                                                __ptext91 499E  
                                                __ptext83 377C  
                                                __ptext75 3D9A  
                                                __ptext67 0612  
                                                __ptext59 3B1E  
                                                __ptext92 4C56  
                                                __ptext84 468E  
                                                __ptext76 470C  
                                                __ptext68 4784  
                                                __ptext93 4C60  
                                                __ptext85 4BE8  
                                                __ptext77 49F0  
                                                __ptext69 47BC  
                                                __ptext94 4B86  
                                                __ptext86 42F4  
                                                __ptext78 4A8C  
                                                __ptext95 4A18  
                                                __ptext87 3EFA  
                                                __ptext79 4920  
                                                __ptext96 47F4  
                                                __ptext88 2D28  
                                                __ptext97 4AB0  
                                                __ptext89 44E2  
                                                __ptext98 4C6E  
                                                __ptext99 4B6C  
                                            _SSP1CON1bits 000FC6  
                   enc424j600_enableAutoMACInsertion@temp 006E  
                                                _arp_init 411E  
                                                _arp_send 1B58  
                                      ipv4_setToAllZero@i 0062  
                         __size_of_ethernet_rxGetNewFrame 0526  
                                          _mac_setAllZero 4A40  
                                                _ipv4_cmp 468E  
                                                _ipSource 01DB  
                                             _OSCCON2bits 000FD2  
                                       ipAdressToString@i 0088  
                                      _ipProtocolToString 457C  
                         __end_of_ipv4_getIPSourceAddress 4BE8  
                enc424j600_setGPDATAWritePointer@highByte 006E  
                         __end_of_ipv4_setIPSourceAddress 4494  
              __end_of_ipv4_getPreliminaryIPSourceAddress 4BD6  
             __size_of_ipv4_getPreliminaryIPSourceAddress 0012  
                    ??_ipv4_getPreliminaryIPSourceAddress 0064  
                     ?_ipv4_getPreliminaryIPSourceAddress 0060  
                      _ipv4_getPreliminaryIPSourceAddress 4BC4  
                                           __size_of_main 02C0  
                                           __size_of_rand 0056  
                                           __size_of_ltoa 0054  
                               _enc424j600_getPacketCount 4B6C  
                                       ??_ipv4_background 009A  
                                       ?_entireMemoryFull 0001  
                            __size_of_arp_handleNewPacket 01AE  
                 __end_of_enc424j600_getNextPacketPointer 4C56  
                __size_of_enc424j600_getNextPacketPointer 000A  
                       ??_enc424j600_getNextPacketPointer 0062  
                        ?_enc424j600_getNextPacketPointer 0060  
                         _enc424j600_getNextPacketPointer 4C4C  
                 __end_of_enc424j600_setNextPacketPointer 4C60  
                __size_of_enc424j600_setNextPacketPointer 000A  
                       ??_enc424j600_setNextPacketPointer 0062  
                        ?_enc424j600_setNextPacketPointer 0060  
                         _enc424j600_setNextPacketPointer 4C56  
     ethernetController_writeDestinationMACAddress@opcode 0084  
                        __size_of_ethernetController_init 0072  
                                         _checkForOverlap 2C0A  
                                     ?_ipProtocolToString 0060  
                                      ??_entireMemoryFull 0060  
                                             _parseNumber 3CA2  
                                             ??_getMillis 0064  
                                                int$flags 0050  
                                 buttonHandler@resetValue 0003  
                                                mac_cmp@a 0060  
                        __size_of_checkForOverlapSwitched 00B2  
                                                mac_cmp@b 0062  
                                                mac_cmp@i 0066  
            enc424j600_readControlRegisterUnbanked@opcode 006D  
                                           _mac_isAllZero 4892  
                                     _ipv4_SrcAddrChanged 4B9E  
                                            _SSP1STATbits 000FC7  
                                             ??_hexToChar 0060  
                              ethernet_txFrameRequest@err 00A4  
                                             ??_arp_probe 0134  
                                 __size_of_ipv4_isAllZero 0030  
                               ipv4_setIPSourceAddress@ip 009A  
                               ethernet_rxGetNewFrame@err 0183  
                                        _UARTTransmitText 42F4  
                                             ??_ipv4_init 0060  
                     __size_of_enc424j600_readPHYRegister 0122  
                                            ??_stack_init 0087  
                                    arp_sendReply@request 0100  
                                 arp_sendRequest@ipSender 0100  
                                 arp_sendRequest@ipTarget 0104  
                                              _INTCONbits 000FF2  
                                    ??_ipProtocolToString 0062  
                                        ?_arp_setNewEntry 0064  
                                       arp_background@err 01F1  
                              __size_of_entireMemoryEmpty 0038  
                                            ??_updateTime 0001  
   ethernetController_writeEtherTypeFieldToBuffer@ethtype 006F  
                                        ?_arp_sendRequest 0100  
   ethernetController_writeEtherTypeFieldToBuffer@lowByte 007A  
                                  __end_of_mac_setAllZero 4A66  
                                               ultoa@base 0073  
                                     _memory_txFrameClear 4A8C  
                             __end_of_enc424j600_writeSPI 41E8  
                                           _arp_sendReply 26F6  
                                                intlevel2 0000  
                                    ?_ipv4_SrcAddrChanged 0060  
                          __size_of_arp_parseFromRXBuffer 03FA  
                           __end_of_arp_parseFromRXBuffer 0EE8  
                                                ltoa@base 0080  
                                        ___lwmod@dividend 006E  
                                        ___lldiv@dividend 0060  
             ethernetController_getEtherTypeField@lowByte 007F  
      ethernetController_writeDestinationMACAddress@i_646 0085  
               ethernetController_streamFromRXBuffer@temp 0073  
                          enc424j600_readPHYRegister@addr 0076  
                                              _RCSTA1bits 000FAB  
                          enc424j600_readPHYRegister@data 006E  
                                        macToString@F5941 02BB  
                          enc424j600_readPHYRegister@temp 007F  
      ethernetController_writeDestinationMACAddress@field 0075  
                               arp_setNewEntry@maxSeconds 0076  
                                              _OSCCONbits 000FD3  
                               __size_of_ipAdressToString 01EE  
                                      __end_of_stack_init 4C4C  
                                            macToString@i 0095  
                                            macToString@j 0097  
                enc424j600_readPHYRegister@timeoutCounter 0079  
                              __end_of_enc424j600_initSPI 4B52  
                              __end_of_enc424j600_readSPI 40B6  
                                    ?_memory_txFrameClear 0001  
                                      arp_probe@timeStart 013D  
                                          ?_mac_isAllZero 0060  
                                  _ethernet_rxGetNewFrame 00EC  
                                      __end_of_updateTime 4C42  
                                    __CFG_CPUDIV$NOCLKDIV 000000  
                                       arp_probe@ipSender 0141  
                                       arp_probe@ipTarget 00FC  
                                         _UARTTransmitInt 4AF6  
                                      arp_setNewEntry@mac 0064  
                      ethernetController_sendPacket@field 0072  
            ethernetController_getSourceMACAddress@opcode 0078  
    ethernetController_writeEtherTypeFieldToBuffer@opcode 007C  
            __end_of_enc424j600_updateReceiveStatusVector 158C  
           __size_of_enc424j600_updateReceiveStatusVector 031C  
                  ??_enc424j600_updateReceiveStatusVector 0065  
                   ?_enc424j600_updateReceiveStatusVector 0060  
                    _enc424j600_updateReceiveStatusVector 1270  
                                   mac_setToBroadcast@mac 0060  
                                                ultoa@buf 006D  
                                                ultoa@val 006F  
                               ipv4_handleNewPacket@frame 00B5  
                                   ipv4_sendFrame@oldTime 01D3  
                __end_of_enc424j600_setGPDATAWritePointer 4748  
               __size_of_enc424j600_setGPDATAWritePointer 003C  
                      ??_enc424j600_setGPDATAWritePointer 006C  
                       ?_enc424j600_setGPDATAWritePointer 006A  
                        _enc424j600_setGPDATAWritePointer 470C  
                                        ___lldiv@quotient 0068  
                                         ___lwmod@divisor 0070  
                                  arp_sendRequest@request 0114  
                      enc424j600_setNextPacketPointer@ptr 0060  
                                         ___lwmod@counter 0072  
                                            ?_macToString 007A  
              enc424j600_readControlRegisterUnbanked@addr 006C  
              enc424j600_readControlRegisterUnbanked@data 006A  
                         ethernetController_getRSV@opcode 0076  
                    __end_of_ethernetController_softReset 2E32  
                   __size_of_ethernetController_softReset 010A  
                            _ethernetController_softReset 2D28  
                                         ?_mac_setAllZero 0060  
                            __end_of_ipv4_handleNewPacket 2562  
             ethernetController_getSourceMACAddress@field 006F  
                                      arp_sendReply@reply 0138  
                                          ?_arp_sendReply 0100  
                                   ??_ipv4_SrcAddrChanged 0062  
                                arp_handleNewPacket@frame 00FC  
                                      __CFG_FOSC$INTOSCIO 000000  
                                 ?_enc424j600_setTXLength 006E  
                                 __end_of_checkForOverlap 2D28  
           __end_ofethernetController_getDeviceName@F5993 7A1C  
                   ethernetController_getDeviceName@F5993 7A11  
                          ?_ethernetController_dropPacket 0072  
                                       ?_ipv4_parseHeader 0074  
                                 _sevenSegmentUpdate$2453 0013  
                                      ??_ipv4_parseHeader 008B  
                                   ??_memory_txFrameClear 0060  
