

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Mar 30 11:44:54 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F25K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    16                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    21                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    22                           	psect	text0,global,reloc=2,class=CODE,delta=1
    23                           	psect	text1,global,reloc=2,class=CODE,delta=1
    24                           	psect	text2,global,reloc=2,class=CODE,delta=1
    25                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text4,global,reloc=2,class=CODE,delta=1
    27                           	psect	text5,global,reloc=2,class=CODE,delta=1
    28                           	psect	text6,global,reloc=2,class=CODE,delta=1
    29                           	psect	text7,global,reloc=2,class=CODE,delta=1
    30                           	psect	text8,global,reloc=2,class=CODE,delta=1
    31                           	psect	text9,global,reloc=2,class=CODE,delta=1
    32                           	psect	text10,global,reloc=2,class=CODE,delta=1
    33                           	psect	text11,global,reloc=2,class=CODE,delta=1
    34                           	psect	text12,global,reloc=2,class=CODE,delta=1
    35                           	psect	text13,global,reloc=2,class=CODE,delta=1
    36                           	psect	text14,global,reloc=2,class=CODE,delta=1
    37                           	psect	text15,global,reloc=2,class=CODE,delta=1
    38                           	psect	text16,global,reloc=2,class=CODE,delta=1
    39                           	psect	text17,global,reloc=2,class=CODE,delta=1
    40                           	psect	text18,global,reloc=2,class=CODE,delta=1
    41                           	psect	text19,global,reloc=2,class=CODE,delta=1
    42                           	psect	text20,global,reloc=2,class=CODE,delta=1
    43                           	psect	text21,global,reloc=2,class=CODE,delta=1
    44                           	psect	text22,global,reloc=2,class=CODE,delta=1
    45                           	psect	text23,global,reloc=2,class=CODE,delta=1
    46                           	psect	text24,global,reloc=2,class=CODE,delta=1
    47                           	psect	text25,global,reloc=2,class=CODE,delta=1
    48                           	psect	text26,global,reloc=2,class=CODE,delta=1
    49                           	psect	text27,global,reloc=2,class=CODE,delta=1
    50                           	psect	text28,global,reloc=2,class=CODE,delta=1
    51                           	psect	text29,global,reloc=2,class=CODE,delta=1
    52                           	psect	text30,global,reloc=2,class=CODE,delta=1
    53                           	psect	text31,global,reloc=2,class=CODE,delta=1
    54                           	psect	text32,global,reloc=2,class=CODE,delta=1
    55                           	psect	text33,global,reloc=2,class=CODE,delta=1
    56                           	psect	text34,global,reloc=2,class=CODE,delta=1
    57                           	psect	text35,global,reloc=2,class=CODE,delta=1
    58                           	psect	text36,global,reloc=2,class=CODE,delta=1
    59                           	psect	text37,global,reloc=2,class=CODE,delta=1
    60                           	psect	text38,global,reloc=2,class=CODE,delta=1
    61                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    62                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1
    65                           	psect	text43,global,reloc=2,class=CODE,delta=1
    66                           	psect	text44,global,reloc=2,class=CODE,delta=1
    67                           	psect	text45,global,reloc=2,class=CODE,delta=1
    68                           	psect	text46,global,reloc=2,class=CODE,delta=1
    69                           	psect	text47,global,reloc=2,class=CODE,delta=1
    70                           	psect	text48,global,reloc=2,class=CODE,delta=1
    71                           	psect	text49,global,reloc=2,class=CODE,delta=1
    72                           	psect	text50,global,reloc=2,class=CODE,delta=1
    73                           	psect	text51,global,reloc=2,class=CODE,delta=1
    74                           	psect	text52,global,reloc=2,class=CODE,delta=1
    75                           	psect	text53,global,reloc=2,class=CODE,delta=1
    76                           	psect	text54,global,reloc=2,class=CODE,delta=1
    77                           	psect	text55,global,reloc=2,class=CODE,delta=1
    78                           	psect	text56,global,reloc=2,class=CODE,delta=1
    79                           	psect	text57,global,reloc=2,class=CODE,delta=1
    80                           	psect	text58,global,reloc=2,class=CODE,delta=1
    81                           	psect	text59,global,reloc=2,class=CODE,delta=1
    82                           	psect	text60,global,reloc=2,class=CODE,delta=1
    83                           	psect	text61,global,reloc=2,class=CODE,delta=1,group=1
    84                           	psect	text62,global,reloc=2,class=CODE,delta=1,group=1
    85                           	psect	text63,global,reloc=2,class=CODE,delta=1
    86                           	psect	text64,global,reloc=2,class=CODE,delta=1
    87                           	psect	text65,global,reloc=2,class=CODE,delta=1
    88                           	psect	text66,global,reloc=2,class=CODE,delta=1,group=1
    89                           	psect	text67,global,reloc=2,class=CODE,delta=1,group=1
    90                           	psect	text68,global,reloc=2,class=CODE,delta=1
    91                           	psect	text69,global,reloc=2,class=CODE,delta=1
    92                           	psect	text70,global,reloc=2,class=CODE,delta=1
    93                           	psect	text71,global,reloc=2,class=CODE,delta=1
    94                           	psect	text72,global,reloc=2,class=CODE,delta=1
    95                           	psect	text73,global,reloc=2,class=CODE,delta=1
    96                           	psect	text74,global,reloc=2,class=CODE,delta=1
    97                           	psect	text75,global,reloc=2,class=CODE,delta=1
    98                           	psect	text76,global,reloc=2,class=CODE,delta=1
    99                           	psect	text77,global,reloc=2,class=CODE,delta=1
   100                           	psect	text78,global,reloc=2,class=CODE,delta=1
   101                           	psect	text79,global,reloc=2,class=CODE,delta=1,group=1
   102                           	psect	text80,global,reloc=2,class=CODE,delta=1
   103                           	psect	text81,global,reloc=2,class=CODE,delta=1
   104                           	psect	text82,global,reloc=2,class=CODE,delta=1
   105                           	psect	text83,global,reloc=2,class=CODE,delta=1
   106                           	psect	text84,global,reloc=2,class=CODE,delta=1
   107                           	psect	text85,global,reloc=2,class=CODE,delta=1
   108                           	psect	text86,global,reloc=2,class=CODE,delta=1
   109                           	psect	text87,global,reloc=2,class=CODE,delta=1
   110                           	psect	text88,global,reloc=2,class=CODE,delta=1
   111                           	psect	text89,global,reloc=2,class=CODE,delta=1
   112                           	psect	text90,global,reloc=2,class=CODE,delta=1
   113                           	psect	text91,global,reloc=2,class=CODE,delta=1
   114                           	psect	text92,global,reloc=2,class=CODE,delta=1
   115                           	psect	text93,global,reloc=2,class=CODE,delta=1
   116                           	psect	text94,global,reloc=2,class=CODE,delta=1
   117                           	psect	text95,global,reloc=2,class=CODE,delta=1
   118                           	psect	text96,global,reloc=2,class=CODE,delta=1
   119                           	psect	text97,global,reloc=2,class=CODE,delta=1
   120                           	psect	text98,global,reloc=2,class=CODE,delta=1
   121                           	psect	text99,global,reloc=2,class=CODE,delta=1
   122                           	psect	text100,global,reloc=2,class=CODE,delta=1
   123                           	psect	text101,global,reloc=2,class=CODE,delta=1
   124                           	psect	text102,global,reloc=2,class=CODE,delta=1
   125                           	psect	text103,global,reloc=2,class=CODE,delta=1
   126                           	psect	text104,global,reloc=2,class=CODE,delta=1
   127                           	psect	text105,global,reloc=2,class=CODE,delta=1
   128                           	psect	text106,global,reloc=2,class=CODE,delta=1
   129                           	psect	text107,global,reloc=2,class=CODE,delta=1
   130                           	psect	text108,global,reloc=2,class=CODE,delta=1
   131                           	psect	text109,global,reloc=2,class=CODE,delta=1,group=1
   132                           	psect	text110,global,reloc=2,class=CODE,delta=1
   133                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   134                           	psect	text112,global,reloc=2,class=CODE,delta=1
   135                           	psect	text113,global,reloc=2,class=CODE,delta=1
   136                           	psect	text114,global,reloc=2,class=CODE,delta=1
   137                           	psect	text115,global,reloc=2,class=CODE,delta=1
   138                           	psect	text116,global,reloc=2,class=CODE,delta=1
   139                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   140                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   141                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   142  0000                     
   143                           ; Version 1.45
   144                           ; Generated 16/11/2017 GMT
   145                           ; 
   146                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   147                           ; All rights reserved.
   148                           ; 
   149                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   150                           ; 
   151                           ; Redistribution and use in source and binary forms, with or without modification, are
   152                           ; permitted provided that the following conditions are met:
   153                           ; 
   154                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   155                           ;        conditions and the following disclaimer.
   156                           ; 
   157                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   158                           ;        of conditions and the following disclaimer in the documentation and/or other
   159                           ;        materials provided with the distribution.
   160                           ; 
   161                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   162                           ;        software without specific prior written permission.
   163                           ; 
   164                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   165                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   166                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   167                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   168                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   169                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   170                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   171                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   172                           ; 
   173                           ; 
   174                           ; Code-generator required, PIC18F25K50 Definitions
   175                           ; 
   176                           ; SFR Addresses
   177  0000                     
   178                           	psect	idataCOMRAM
   179  0057A8                     __pidataCOMRAM:
   180                           	opt stack 0
   181                           
   182                           ;initializer for _randx
   183  0057A8  0001               	dw	1
   184  0057AA  0000               	dw	0
   185                           
   186                           ;initializer for ethernetController_softReset@F5987
   187  0057AC  12                 	db	18
   188  0057AD  34                 	db	52
   189                           
   190                           	psect	idataBANK1
   191  005776                     __pidataBANK1:
   192                           	opt stack 0
   193                           
   194                           ;initializer for _sevenSegCharacters
   195  005776  3F                 	db	63
   196  005777  06                 	db	6
   197  005778  5B                 	db	91
   198  005779  4F                 	db	79
   199  00577A  66                 	db	102
   200  00577B  6D                 	db	109
   201  00577C  7D                 	db	125
   202  00577D  07                 	db	7
   203  00577E  7F                 	db	127
   204  00577F  6F                 	db	111
   205  005780  00                 	db	0
   206  005781  40                 	db	64
   207                           
   208                           	psect	idataBANK2
   209  0055F0                     __pidataBANK2:
   210                           	opt stack 0
   211                           
   212                           ;initializer for macToString@F5947
   213  0055F0  3F                 	db	63
   214  0055F1  3F                 	db	63
   215  0055F2  3A                 	db	58
   216  0055F3  3F                 	db	63
   217  0055F4  3F                 	db	63
   218  0055F5  3A                 	db	58
   219  0055F6  3F                 	db	63
   220  0055F7  3F                 	db	63
   221  0055F8  3A                 	db	58
   222  0055F9  3F                 	db	63
   223  0055FA  3F                 	db	63
   224  0055FB  3A                 	db	58
   225  0055FC  3F                 	db	63
   226  0055FD  3F                 	db	63
   227  0055FE  3A                 	db	58
   228  0055FF  3F                 	db	63
   229  005600  3F                 	db	63
   230  005601  00                 	db	0
   231                           
   232                           ;initializer for ipAdressToString@address
   233  005602  3F                 	db	63
   234  005603  3F                 	db	63
   235  005604  3F                 	db	63
   236  005605  2E                 	db	46
   237  005606  3F                 	db	63
   238  005607  3F                 	db	63
   239  005608  3F                 	db	63
   240  005609  2E                 	db	46
   241  00560A  3F                 	db	63
   242  00560B  3F                 	db	63
   243  00560C  3F                 	db	63
   244  00560D  2E                 	db	46
   245  00560E  3F                 	db	63
   246  00560F  3F                 	db	63
   247  005610  3F                 	db	63
   248  005611  00                 	db	0
   249                           
   250                           	psect	mediumconst
   251  007A08                     __pmediumconst:
   252                           	opt stack 0
   253  007A08  00                 	db	0
   254  007A09                     ethernetController_getDeviceName@F5999:
   255                           	opt stack 0
   256  007A09  45                 	db	69
   257  007A0A  4E                 	db	78
   258  007A0B  43                 	db	67
   259  007A0C  34                 	db	52
   260  007A0D  32                 	db	50
   261  007A0E  34                 	db	52
   262  007A0F  4A                 	db	74
   263  007A10  36                 	db	54
   264  007A11  30                 	db	48
   265  007A12  30                 	db	48
   266  007A13  00                 	db	0
   267  007A14                     __end_ofethernetController_getDeviceName@F5999:
   268                           	opt stack 0
   269  0000                     _ANSELC	set	3933
   270  0000                     _ANSELA	set	3931
   271  0000                     _ANSELB	set	3932
   272  0000                     _ANSELBbits	set	3932
   273  0000                     _CCPR1	set	4030
   274  0000                     _TXREG1	set	4013
   275  0000                     _SPBRG	set	4015
   276  0000                     _RCSTA1bits	set	4011
   277  0000                     _TXSTA1bits	set	4012
   278  0000                     _PORTA	set	3968
   279  0000                     _TRISA	set	3986
   280  0000                     _TRISC	set	3988
   281  0000                     _PORTC	set	3970
   282  0000                     _PIR1bits	set	3998
   283  0000                     _PORTB	set	3969
   284  0000                     _TRISB	set	3987
   285  0000                     _RCONbits	set	4048
   286  0000                     _PIE1bits	set	3997
   287  0000                     _CCP1CONbits	set	4029
   288  0000                     _T1CONbits	set	4045
   289  0000                     _T0CONbits	set	4053
   290  0000                     _INTCON3bits	set	4080
   291  0000                     _INTCONbits	set	4082
   292  0000                     _OSCCON2bits	set	4050
   293  0000                     _OSCCONbits	set	4051
   294  0000                     _SSP1BUF	set	4041
   295  0000                     _TRISBbits	set	3987
   296  0000                     _SSP1STATbits	set	4039
   297  0000                     _SSP1CON1bits	set	4038
   298  0000                     _PORTBbits	set	3969
   299  0000                     _TRMT	set	32097
   300  0000                     _RCIF	set	31989
   301  0000                     _RCIE	set	31981
   302  0000                     _RCIP	set	31997
   303  0000                     _TXIF	set	31988
   304  007A14                     STR_87:
   305  007A14  5B                 	db	91	;'['
   306  007A15  41                 	db	65	;'A'
   307  007A16  52                 	db	82	;'R'
   308  007A17  50                 	db	80	;'P'
   309  007A18  5D                 	db	93	;']'
   310  007A19  3A                 	db	58	;':'
   311  007A1A  20                 	db	32
   312  007A1B  4F                 	db	79	;'O'
   313  007A1C  70                 	db	112	;'p'
   314  007A1D  65                 	db	101	;'e'
   315  007A1E  72                 	db	114	;'r'
   316  007A1F  61                 	db	97	;'a'
   317  007A20  74                 	db	116	;'t'
   318  007A21  69                 	db	105	;'i'
   319  007A22  6F                 	db	111	;'o'
   320  007A23  6E                 	db	110	;'n'
   321  007A24  20                 	db	32
   322  007A25  77                 	db	119	;'w'
   323  007A26  61                 	db	97	;'a'
   324  007A27  73                 	db	115	;'s'
   325  007A28  20                 	db	32
   326  007A29  69                 	db	105	;'i'
   327  007A2A  6E                 	db	110	;'n'
   328  007A2B  74                 	db	116	;'t'
   329  007A2C  65                 	db	101	;'e'
   330  007A2D  72                 	db	114	;'r'
   331  007A2E  72                 	db	114	;'r'
   332  007A2F  75                 	db	117	;'u'
   333  007A30  70                 	db	112	;'p'
   334  007A31  74                 	db	116	;'t'
   335  007A32  65                 	db	101	;'e'
   336  007A33  64                 	db	100	;'d'
   337  007A34  20                 	db	32
   338  007A35  62                 	db	98	;'b'
   339  007A36  65                 	db	101	;'e'
   340  007A37  63                 	db	99	;'c'
   341  007A38  61                 	db	97	;'a'
   342  007A39  75                 	db	117	;'u'
   343  007A3A  73                 	db	115	;'s'
   344  007A3B  65                 	db	101	;'e'
   345  007A3C  20                 	db	32
   346  007A3D  6C                 	db	108	;'l'
   347  007A3E  69                 	db	105	;'i'
   348  007A3F  6E                 	db	110	;'n'
   349  007A40  6B                 	db	107	;'k'
   350  007A41  20                 	db	32
   351  007A42  77                 	db	119	;'w'
   352  007A43  61                 	db	97	;'a'
   353  007A44  73                 	db	115	;'s'
   354  007A45  20                 	db	32
   355  007A46  6C                 	db	108	;'l'
   356  007A47  6F                 	db	111	;'o'
   357  007A48  73                 	db	115	;'s'
   358  007A49  74                 	db	116	;'t'
   359  007A4A  2E                 	db	46
   360  007A4B  0A                 	db	10
   361  007A4C  0D                 	db	13
   362  007A4D  00                 	db	0
   363  007A4E                     STR_57:
   364  007A4E  45                 	db	69	;'E'
   365  007A4F  74                 	db	116	;'t'
   366  007A50  68                 	db	104	;'h'
   367  007A51  65                 	db	101	;'e'
   368  007A52  72                 	db	114	;'r'
   369  007A53  6E                 	db	110	;'n'
   370  007A54  65                 	db	101	;'e'
   371  007A55  74                 	db	116	;'t'
   372  007A56  20                 	db	32
   373  007A57  63                 	db	99	;'c'
   374  007A58  6F                 	db	111	;'o'
   375  007A59  6E                 	db	110	;'n'
   376  007A5A  74                 	db	116	;'t'
   377  007A5B  72                 	db	114	;'r'
   378  007A5C  6F                 	db	111	;'o'
   379  007A5D  6C                 	db	108	;'l'
   380  007A5E  6C                 	db	108	;'l'
   381  007A5F  65                 	db	101	;'e'
   382  007A60  72                 	db	114	;'r'
   383  007A61  20                 	db	32
   384  007A62  68                 	db	104	;'h'
   385  007A63  61                 	db	97	;'a'
   386  007A64  73                 	db	115	;'s'
   387  007A65  20                 	db	32
   388  007A66  72                 	db	114	;'r'
   389  007A67  65                 	db	101	;'e'
   390  007A68  74                 	db	116	;'t'
   391  007A69  75                 	db	117	;'u'
   392  007A6A  72                 	db	114	;'r'
   393  007A6B  6E                 	db	110	;'n'
   394  007A6C  65                 	db	101	;'e'
   395  007A6D  64                 	db	100	;'d'
   396  007A6E  20                 	db	32
   397  007A6F  61                 	db	97	;'a'
   398  007A70  6E                 	db	110	;'n'
   399  007A71  20                 	db	32
   400  007A72  75                 	db	117	;'u'
   401  007A73  6E                 	db	110	;'n'
   402  007A74  6B                 	db	107	;'k'
   403  007A75  6E                 	db	110	;'n'
   404  007A76  6F                 	db	111	;'o'
   405  007A77  77                 	db	119	;'w'
   406  007A78  6E                 	db	110	;'n'
   407  007A79  20                 	db	32
   408  007A7A  64                 	db	100	;'d'
   409  007A7B  65                 	db	101	;'e'
   410  007A7C  76                 	db	118	;'v'
   411  007A7D  69                 	db	105	;'i'
   412  007A7E  63                 	db	99	;'c'
   413  007A7F  65                 	db	101	;'e'
   414  007A80  20                 	db	32
   415  007A81  49                 	db	73	;'I'
   416  007A82  44                 	db	68	;'D'
   417  007A83  2E                 	db	46
   418  007A84  00                 	db	0
   419  007A85                     STR_27:
   420  007A85  2D                 	db	45
   421  007A86  2D                 	db	45
   422  007A87  2D                 	db	45
   423  007A88  2D                 	db	45
   424  007A89  2D                 	db	45
   425  007A8A  2D                 	db	45
   426  007A8B  2D                 	db	45
   427  007A8C  2D                 	db	45
   428  007A8D  2D                 	db	45
   429  007A8E  2D                 	db	45
   430  007A8F  2D                 	db	45
   431  007A90  2D                 	db	45
   432  007A91  2D                 	db	45
   433  007A92  2D                 	db	45
   434  007A93  2D                 	db	45
   435  007A94  2D                 	db	45
   436  007A95  2D                 	db	45
   437  007A96  2D                 	db	45
   438  007A97  2D                 	db	45
   439  007A98  2D                 	db	45
   440  007A99  2D                 	db	45
   441  007A9A  2D                 	db	45
   442  007A9B  2D                 	db	45
   443  007A9C  2D                 	db	45
   444  007A9D  2D                 	db	45
   445  007A9E  2D                 	db	45
   446  007A9F  2D                 	db	45
   447  007AA0  2D                 	db	45
   448  007AA1  2D                 	db	45
   449  007AA2  2D                 	db	45
   450  007AA3  2D                 	db	45
   451  007AA4  2D                 	db	45
   452  007AA5  2D                 	db	45
   453  007AA6  2D                 	db	45
   454  007AA7  2D                 	db	45
   455  007AA8  2D                 	db	45
   456  007AA9  2D                 	db	45
   457  007AAA  2D                 	db	45
   458  007AAB  2D                 	db	45
   459  007AAC  2D                 	db	45
   460  007AAD  2D                 	db	45
   461  007AAE  2D                 	db	45
   462  007AAF  2D                 	db	45
   463  007AB0  2D                 	db	45
   464  007AB1  2D                 	db	45
   465  007AB2  2D                 	db	45
   466  007AB3  2D                 	db	45
   467  007AB4  2D                 	db	45
   468  007AB5  0A                 	db	10
   469  007AB6  0D                 	db	13
   470  007AB7  00                 	db	0
   471  007AB8                     STR_28:
   472  007AB8  07                 	db	7
   473  007AB9  2A                 	db	42
   474  007ABA  2A                 	db	42
   475  007ABB  2A                 	db	42
   476  007ABC  20                 	db	32
   477  007ABD  43                 	db	67	;'C'
   478  007ABE  52                 	db	82	;'R'
   479  007ABF  49                 	db	73	;'I'
   480  007AC0  54                 	db	84	;'T'
   481  007AC1  49                 	db	73	;'I'
   482  007AC2  43                 	db	67	;'C'
   483  007AC3  41                 	db	65	;'A'
   484  007AC4  4C                 	db	76	;'L'
   485  007AC5  20                 	db	32
   486  007AC6  45                 	db	69	;'E'
   487  007AC7  52                 	db	82	;'R'
   488  007AC8  52                 	db	82	;'R'
   489  007AC9  4F                 	db	79	;'O'
   490  007ACA  52                 	db	82	;'R'
   491  007ACB  3A                 	db	58	;':'
   492  007ACC  20                 	db	32
   493  007ACD  57                 	db	87	;'W'
   494  007ACE  41                 	db	65	;'A'
   495  007ACF  54                 	db	84	;'T'
   496  007AD0  43                 	db	67	;'C'
   497  007AD1  48                 	db	72	;'H'
   498  007AD2  44                 	db	68	;'D'
   499  007AD3  4F                 	db	79	;'O'
   500  007AD4  47                 	db	71	;'G'
   501  007AD5  20                 	db	32
   502  007AD6  43                 	db	67	;'C'
   503  007AD7  41                 	db	65	;'A'
   504  007AD8  55                 	db	85	;'U'
   505  007AD9  53                 	db	83	;'S'
   506  007ADA  45                 	db	69	;'E'
   507  007ADB  44                 	db	68	;'D'
   508  007ADC  20                 	db	32
   509  007ADD  52                 	db	82	;'R'
   510  007ADE  45                 	db	69	;'E'
   511  007ADF  53                 	db	83	;'S'
   512  007AE0  45                 	db	69	;'E'
   513  007AE1  54                 	db	84	;'T'
   514  007AE2  20                 	db	32
   515  007AE3  2A                 	db	42
   516  007AE4  2A                 	db	42
   517  007AE5  2A                 	db	42
   518  007AE6  0A                 	db	10
   519  007AE7  0D                 	db	13
   520  007AE8  00                 	db	0
   521  007AE9                     STR_83:
   522  007AE9  5B                 	db	91	;'['
   523  007AEA  41                 	db	65	;'A'
   524  007AEB  52                 	db	82	;'R'
   525  007AEC  50                 	db	80	;'P'
   526  007AED  5D                 	db	93	;']'
   527  007AEE  3A                 	db	58	;':'
   528  007AEF  20                 	db	32
   529  007AF0  53                 	db	83	;'S'
   530  007AF1  65                 	db	101	;'e'
   531  007AF2  6E                 	db	110	;'n'
   532  007AF3  64                 	db	100	;'d'
   533  007AF4  69                 	db	105	;'i'
   534  007AF5  6E                 	db	110	;'n'
   535  007AF6  67                 	db	103	;'g'
   536  007AF7  20                 	db	32
   537  007AF8  47                 	db	71	;'G'
   538  007AF9  72                 	db	114	;'r'
   539  007AFA  61                 	db	97	;'a'
   540  007AFB  74                 	db	116	;'t'
   541  007AFC  75                 	db	117	;'u'
   542  007AFD  69                 	db	105	;'i'
   543  007AFE  74                 	db	116	;'t'
   544  007AFF  6F                 	db	111	;'o'
   545  007B00  75                 	db	117	;'u'
   546  007B01  73                 	db	115	;'s'
   547  007B02  20                 	db	32
   548  007B03  41                 	db	65	;'A'
   549  007B04  52                 	db	82	;'R'
   550  007B05  50                 	db	80	;'P'
   551  007B06  20                 	db	32
   552  007B07  72                 	db	114	;'r'
   553  007B08  65                 	db	101	;'e'
   554  007B09  71                 	db	113	;'q'
   555  007B0A  75                 	db	117	;'u'
   556  007B0B  65                 	db	101	;'e'
   557  007B0C  73                 	db	115	;'s'
   558  007B0D  74                 	db	116	;'t'
   559  007B0E  20                 	db	32
   560  007B0F  66                 	db	102	;'f'
   561  007B10  6F                 	db	111	;'o'
   562  007B11  72                 	db	114	;'r'
   563  007B12  20                 	db	32
   564  007B13  00                 	db	0
   565  007B14                     STR_22:
   566  007B14  5B                 	db	91	;'['
   567  007B15  49                 	db	73	;'I'
   568  007B16  50                 	db	80	;'P'
   569  007B17  76                 	db	118	;'v'
   570  007B18  34                 	db	52	;'4'
   571  007B19  5D                 	db	93	;']'
   572  007B1A  3A                 	db	58	;':'
   573  007B1B  20                 	db	32
   574  007B1C  50                 	db	80	;'P'
   575  007B1D  61                 	db	97	;'a'
   576  007B1E  63                 	db	99	;'c'
   577  007B1F  6B                 	db	107	;'k'
   578  007B20  65                 	db	101	;'e'
   579  007B21  74                 	db	116	;'t'
   580  007B22  20                 	db	32
   581  007B23  77                 	db	119	;'w'
   582  007B24  61                 	db	97	;'a'
   583  007B25  73                 	db	115	;'s'
   584  007B26  20                 	db	32
   585  007B27  73                 	db	115	;'s'
   586  007B28  65                 	db	101	;'e'
   587  007B29  6E                 	db	110	;'n'
   588  007B2A  74                 	db	116	;'t'
   589  007B2B  20                 	db	32
   590  007B2C  73                 	db	115	;'s'
   591  007B2D  75                 	db	117	;'u'
   592  007B2E  63                 	db	99	;'c'
   593  007B2F  63                 	db	99	;'c'
   594  007B30  65                 	db	101	;'e'
   595  007B31  73                 	db	115	;'s'
   596  007B32  73                 	db	115	;'s'
   597  007B33  66                 	db	102	;'f'
   598  007B34  75                 	db	117	;'u'
   599  007B35  6C                 	db	108	;'l'
   600  007B36  6C                 	db	108	;'l'
   601  007B37  79                 	db	121	;'y'
   602  007B38  2E                 	db	46
   603  007B39  0A                 	db	10
   604  007B3A  0D                 	db	13
   605  007B3B  00                 	db	0
   606  007B3C                     STR_69:
   607  007B3C  5B                 	db	91	;'['
   608  007B3D  49                 	db	73	;'I'
   609  007B3E  6E                 	db	110	;'n'
   610  007B3F  76                 	db	118	;'v'
   611  007B40  61                 	db	97	;'a'
   612  007B41  6C                 	db	108	;'l'
   613  007B42  69                 	db	105	;'i'
   614  007B43  64                 	db	100	;'d'
   615  007B44  20                 	db	32
   616  007B45  41                 	db	65	;'A'
   617  007B46  52                 	db	82	;'R'
   618  007B47  50                 	db	80	;'P'
   619  007B48  20                 	db	32
   620  007B49  4D                 	db	77	;'M'
   621  007B4A  65                 	db	101	;'e'
   622  007B4B  73                 	db	115	;'s'
   623  007B4C  73                 	db	115	;'s'
   624  007B4D  61                 	db	97	;'a'
   625  007B4E  67                 	db	103	;'g'
   626  007B4F  65                 	db	101	;'e'
   627  007B50  20                 	db	32
   628  007B51  77                 	db	119	;'w'
   629  007B52  61                 	db	97	;'a'
   630  007B53  73                 	db	115	;'s'
   631  007B54  20                 	db	32
   632  007B55  64                 	db	100	;'d'
   633  007B56  69                 	db	105	;'i'
   634  007B57  73                 	db	115	;'s'
   635  007B58  63                 	db	99	;'c'
   636  007B59  61                 	db	97	;'a'
   637  007B5A  72                 	db	114	;'r'
   638  007B5B  64                 	db	100	;'d'
   639  007B5C  65                 	db	101	;'e'
   640  007B5D  64                 	db	100	;'d'
   641  007B5E  2E                 	db	46
   642  007B5F  5D                 	db	93	;']'
   643  007B60  0D                 	db	13
   644  007B61  0A                 	db	10
   645  007B62  00                 	db	0
   646  007B63                     STR_89:
   647  007B63  5B                 	db	91	;'['
   648  007B64  41                 	db	65	;'A'
   649  007B65  52                 	db	82	;'R'
   650  007B66  50                 	db	80	;'P'
   651  007B67  5D                 	db	93	;']'
   652  007B68  3A                 	db	58	;':'
   653  007B69  20                 	db	32
   654  007B6A  43                 	db	67	;'C'
   655  007B6B  6F                 	db	111	;'o'
   656  007B6C  6E                 	db	110	;'n'
   657  007B6D  66                 	db	102	;'f'
   658  007B6E  6C                 	db	108	;'l'
   659  007B6F  69                 	db	105	;'i'
   660  007B70  63                 	db	99	;'c'
   661  007B71  74                 	db	116	;'t'
   662  007B72  20                 	db	32
   663  007B73  64                 	db	100	;'d'
   664  007B74  75                 	db	117	;'u'
   665  007B75  72                 	db	114	;'r'
   666  007B76  69                 	db	105	;'i'
   667  007B77  6E                 	db	110	;'n'
   668  007B78  67                 	db	103	;'g'
   669  007B79  20                 	db	32
   670  007B7A  61                 	db	97	;'a'
   671  007B7B  6E                 	db	110	;'n'
   672  007B7C  6E                 	db	110	;'n'
   673  007B7D  6F                 	db	111	;'o'
   674  007B7E  75                 	db	117	;'u'
   675  007B7F  6E                 	db	110	;'n'
   676  007B80  63                 	db	99	;'c'
   677  007B81  65                 	db	101	;'e'
   678  007B82  6D                 	db	109	;'m'
   679  007B83  65                 	db	101	;'e'
   680  007B84  6E                 	db	110	;'n'
   681  007B85  74                 	db	116	;'t'
   682  007B86  2E                 	db	46
   683  007B87  0A                 	db	10
   684  007B88  0D                 	db	13
   685  007B89  00                 	db	0
   686  007B8A                     STR_94:
   687  007B8A  5B                 	db	91	;'['
   688  007B8B  41                 	db	65	;'A'
   689  007B8C  52                 	db	82	;'R'
   690  007B8D  50                 	db	80	;'P'
   691  007B8E  5D                 	db	93	;']'
   692  007B8F  3A                 	db	58	;':'
   693  007B90  20                 	db	32
   694  007B91  54                 	db	84	;'T'
   695  007B92  61                 	db	97	;'a'
   696  007B93  62                 	db	98	;'b'
   697  007B94  6C                 	db	108	;'l'
   698  007B95  65                 	db	101	;'e'
   699  007B96  20                 	db	32
   700  007B97  77                 	db	119	;'w'
   701  007B98  61                 	db	97	;'a'
   702  007B99  73                 	db	115	;'s'
   703  007B9A  20                 	db	32
   704  007B9B  72                 	db	114	;'r'
   705  007B9C  65                 	db	101	;'e'
   706  007B9D  73                 	db	115	;'s'
   707  007B9E  65                 	db	101	;'e'
   708  007B9F  74                 	db	116	;'t'
   709  007BA0  20                 	db	32
   710  007BA1  73                 	db	115	;'s'
   711  007BA2  75                 	db	117	;'u'
   712  007BA3  63                 	db	99	;'c'
   713  007BA4  63                 	db	99	;'c'
   714  007BA5  65                 	db	101	;'e'
   715  007BA6  73                 	db	115	;'s'
   716  007BA7  73                 	db	115	;'s'
   717  007BA8  66                 	db	102	;'f'
   718  007BA9  75                 	db	117	;'u'
   719  007BAA  6C                 	db	108	;'l'
   720  007BAB  6C                 	db	108	;'l'
   721  007BAC  79                 	db	121	;'y'
   722  007BAD  2E                 	db	46
   723  007BAE  0A                 	db	10
   724  007BAF  0D                 	db	13
   725  007BB0  00                 	db	0
   726  007BB1                     STR_23:
   727  007BB1  5B                 	db	91	;'['
   728  007BB2  49                 	db	73	;'I'
   729  007BB3  50                 	db	80	;'P'
   730  007BB4  76                 	db	118	;'v'
   731  007BB5  34                 	db	52	;'4'
   732  007BB6  5D                 	db	93	;']'
   733  007BB7  3A                 	db	58	;':'
   734  007BB8  20                 	db	32
   735  007BB9  41                 	db	65	;'A'
   736  007BBA  64                 	db	100	;'d'
   737  007BBB  64                 	db	100	;'d'
   738  007BBC  72                 	db	114	;'r'
   739  007BBD  65                 	db	101	;'e'
   740  007BBE  73                 	db	115	;'s'
   741  007BBF  73                 	db	115	;'s'
   742  007BC0  20                 	db	32
   743  007BC1  63                 	db	99	;'c'
   744  007BC2  6F                 	db	111	;'o'
   745  007BC3  6E                 	db	110	;'n'
   746  007BC4  66                 	db	102	;'f'
   747  007BC5  6C                 	db	108	;'l'
   748  007BC6  69                 	db	105	;'i'
   749  007BC7  63                 	db	99	;'c'
   750  007BC8  74                 	db	116	;'t'
   751  007BC9  20                 	db	32
   752  007BCA  64                 	db	100	;'d'
   753  007BCB  65                 	db	101	;'e'
   754  007BCC  74                 	db	116	;'t'
   755  007BCD  65                 	db	101	;'e'
   756  007BCE  63                 	db	99	;'c'
   757  007BCF  74                 	db	116	;'t'
   758  007BD0  65                 	db	101	;'e'
   759  007BD1  64                 	db	100	;'d'
   760  007BD2  2E                 	db	46
   761  007BD3  20                 	db	32
   762  007BD4  0A                 	db	10
   763  007BD5  0D                 	db	13
   764  007BD6  00                 	db	0
   765  007BD7                     STR_56:
   766  007BD7  45                 	db	69	;'E'
   767  007BD8  74                 	db	116	;'t'
   768  007BD9  68                 	db	104	;'h'
   769  007BDA  65                 	db	101	;'e'
   770  007BDB  72                 	db	114	;'r'
   771  007BDC  6E                 	db	110	;'n'
   772  007BDD  65                 	db	101	;'e'
   773  007BDE  74                 	db	116	;'t'
   774  007BDF  20                 	db	32
   775  007BE0  63                 	db	99	;'c'
   776  007BE1  6F                 	db	111	;'o'
   777  007BE2  6E                 	db	110	;'n'
   778  007BE3  74                 	db	116	;'t'
   779  007BE4  72                 	db	114	;'r'
   780  007BE5  6F                 	db	111	;'o'
   781  007BE6  6C                 	db	108	;'l'
   782  007BE7  6C                 	db	108	;'l'
   783  007BE8  65                 	db	101	;'e'
   784  007BE9  72                 	db	114	;'r'
   785  007BEA  20                 	db	32
   786  007BEB  69                 	db	105	;'i'
   787  007BEC  73                 	db	115	;'s'
   788  007BED  20                 	db	32
   789  007BEE  75                 	db	117	;'u'
   790  007BEF  6E                 	db	110	;'n'
   791  007BF0  72                 	db	114	;'r'
   792  007BF1  65                 	db	101	;'e'
   793  007BF2  73                 	db	115	;'s'
   794  007BF3  70                 	db	112	;'p'
   795  007BF4  6F                 	db	111	;'o'
   796  007BF5  6E                 	db	110	;'n'
   797  007BF6  73                 	db	115	;'s'
   798  007BF7  69                 	db	105	;'i'
   799  007BF8  76                 	db	118	;'v'
   800  007BF9  65                 	db	101	;'e'
   801  007BFA  2E                 	db	46
   802  007BFB  00                 	db	0
   803  007BFC                     STR_24:
   804  007BFC  5B                 	db	91	;'['
   805  007BFD  49                 	db	73	;'I'
   806  007BFE  50                 	db	80	;'P'
   807  007BFF  76                 	db	118	;'v'
   808  007C00  34                 	db	52	;'4'
   809  007C01  5D                 	db	93	;']'
   810  007C02  3A                 	db	58	;':'
   811  007C03  20                 	db	32
   812  007C04  53                 	db	83	;'S'
   813  007C05  65                 	db	101	;'e'
   814  007C06  74                 	db	116	;'t'
   815  007C07  74                 	db	116	;'t'
   816  007C08  69                 	db	105	;'i'
   817  007C09  6E                 	db	110	;'n'
   818  007C0A  67                 	db	103	;'g'
   819  007C0B  20                 	db	32
   820  007C0C  49                 	db	73	;'I'
   821  007C0D  50                 	db	80	;'P'
   822  007C0E  76                 	db	118	;'v'
   823  007C0F  34                 	db	52	;'4'
   824  007C10  20                 	db	32
   825  007C11  53                 	db	83	;'S'
   826  007C12  72                 	db	114	;'r'
   827  007C13  63                 	db	99	;'c'
   828  007C14  20                 	db	32
   829  007C15  41                 	db	65	;'A'
   830  007C16  64                 	db	100	;'d'
   831  007C17  64                 	db	100	;'d'
   832  007C18  72                 	db	114	;'r'
   833  007C19  65                 	db	101	;'e'
   834  007C1A  73                 	db	115	;'s'
   835  007C1B  73                 	db	115	;'s'
   836  007C1C  20                 	db	32
   837  007C1D  74                 	db	116	;'t'
   838  007C1E  6F                 	db	111	;'o'
   839  007C1F  20                 	db	32
   840  007C20  00                 	db	0
   841  007C21                     STR_86:
   842  007C21  5B                 	db	91	;'['
   843  007C22  41                 	db	65	;'A'
   844  007C23  52                 	db	82	;'R'
   845  007C24  50                 	db	80	;'P'
   846  007C25  5D                 	db	93	;']'
   847  007C26  3A                 	db	58	;':'
   848  007C27  20                 	db	32
   849  007C28  4E                 	db	78	;'N'
   850  007C29  6F                 	db	111	;'o'
   851  007C2A  62                 	db	98	;'b'
   852  007C2B  6F                 	db	111	;'o'
   853  007C2C  64                 	db	100	;'d'
   854  007C2D  79                 	db	121	;'y'
   855  007C2E  20                 	db	32
   856  007C2F  61                 	db	97	;'a'
   857  007C30  6E                 	db	110	;'n'
   858  007C31  73                 	db	115	;'s'
   859  007C32  77                 	db	119	;'w'
   860  007C33  65                 	db	101	;'e'
   861  007C34  72                 	db	114	;'r'
   862  007C35  65                 	db	101	;'e'
   863  007C36  64                 	db	100	;'d'
   864  007C37  20                 	db	32
   865  007C38  74                 	db	116	;'t'
   866  007C39  6F                 	db	111	;'o'
   867  007C3A  20                 	db	32
   868  007C3B  70                 	db	112	;'p'
   869  007C3C  72                 	db	114	;'r'
   870  007C3D  6F                 	db	111	;'o'
   871  007C3E  62                 	db	98	;'b'
   872  007C3F  65                 	db	101	;'e'
   873  007C40  73                 	db	115	;'s'
   874  007C41  2E                 	db	46
   875  007C42  0A                 	db	10
   876  007C43  0D                 	db	13
   877  007C44  00                 	db	0
   878  007C45                     STR_88:
   879  007C45  5B                 	db	91	;'['
   880  007C46  41                 	db	65	;'A'
   881  007C47  52                 	db	82	;'R'
   882  007C48  50                 	db	80	;'P'
   883  007C49  5D                 	db	93	;']'
   884  007C4A  3A                 	db	58	;':'
   885  007C4B  20                 	db	32
   886  007C4C  41                 	db	65	;'A'
   887  007C4D  6E                 	db	110	;'n'
   888  007C4E  20                 	db	32
   889  007C4F  75                 	db	117	;'u'
   890  007C50  6E                 	db	110	;'n'
   891  007C51  6B                 	db	107	;'k'
   892  007C52  6E                 	db	110	;'n'
   893  007C53  6F                 	db	111	;'o'
   894  007C54  77                 	db	119	;'w'
   895  007C55  6E                 	db	110	;'n'
   896  007C56  20                 	db	32
   897  007C57  65                 	db	101	;'e'
   898  007C58  72                 	db	114	;'r'
   899  007C59  72                 	db	114	;'r'
   900  007C5A  6F                 	db	111	;'o'
   901  007C5B  72                 	db	114	;'r'
   902  007C5C  20                 	db	32
   903  007C5D  6F                 	db	111	;'o'
   904  007C5E  63                 	db	99	;'c'
   905  007C5F  63                 	db	99	;'c'
   906  007C60  75                 	db	117	;'u'
   907  007C61  72                 	db	114	;'r'
   908  007C62  65                 	db	101	;'e'
   909  007C63  64                 	db	100	;'d'
   910  007C64  2E                 	db	46
   911  007C65  0A                 	db	10
   912  007C66  0D                 	db	13
   913  007C67  00                 	db	0
   914  007C68                     STR_85:
   915  007C68  5B                 	db	91	;'['
   916  007C69  41                 	db	65	;'A'
   917  007C6A  52                 	db	82	;'R'
   918  007C6B  50                 	db	80	;'P'
   919  007C6C  5D                 	db	93	;']'
   920  007C6D  3A                 	db	58	;':'
   921  007C6E  20                 	db	32
   922  007C6F  43                 	db	67	;'C'
   923  007C70  6F                 	db	111	;'o'
   924  007C71  6E                 	db	110	;'n'
   925  007C72  66                 	db	102	;'f'
   926  007C73  6C                 	db	108	;'l'
   927  007C74  69                 	db	105	;'i'
   928  007C75  63                 	db	99	;'c'
   929  007C76  74                 	db	116	;'t'
   930  007C77  20                 	db	32
   931  007C78  64                 	db	100	;'d'
   932  007C79  75                 	db	117	;'u'
   933  007C7A  72                 	db	114	;'r'
   934  007C7B  69                 	db	105	;'i'
   935  007C7C  6E                 	db	110	;'n'
   936  007C7D  67                 	db	103	;'g'
   937  007C7E  20                 	db	32
   938  007C7F  70                 	db	112	;'p'
   939  007C80  72                 	db	114	;'r'
   940  007C81  6F                 	db	111	;'o'
   941  007C82  62                 	db	98	;'b'
   942  007C83  69                 	db	105	;'i'
   943  007C84  6E                 	db	110	;'n'
   944  007C85  67                 	db	103	;'g'
   945  007C86  2E                 	db	46
   946  007C87  0A                 	db	10
   947  007C88  0D                 	db	13
   948  007C89  00                 	db	0
   949  007C8A                     STR_58:
   950  007C8A  49                 	db	73	;'I'
   951  007C8B  50                 	db	80	;'P'
   952  007C8C  20                 	db	32
   953  007C8D  61                 	db	97	;'a'
   954  007C8E  64                 	db	100	;'d'
   955  007C8F  64                 	db	100	;'d'
   956  007C90  72                 	db	114	;'r'
   957  007C91  65                 	db	101	;'e'
   958  007C92  73                 	db	115	;'s'
   959  007C93  73                 	db	115	;'s'
   960  007C94  20                 	db	32
   961  007C95  63                 	db	99	;'c'
   962  007C96  6F                 	db	111	;'o'
   963  007C97  75                 	db	117	;'u'
   964  007C98  6C                 	db	108	;'l'
   965  007C99  64                 	db	100	;'d'
   966  007C9A  20                 	db	32
   967  007C9B  6E                 	db	110	;'n'
   968  007C9C  6F                 	db	111	;'o'
   969  007C9D  74                 	db	116	;'t'
   970  007C9E  20                 	db	32
   971  007C9F  62                 	db	98	;'b'
   972  007CA0  65                 	db	101	;'e'
   973  007CA1  20                 	db	32
   974  007CA2  72                 	db	114	;'r'
   975  007CA3  65                 	db	101	;'e'
   976  007CA4  73                 	db	115	;'s'
   977  007CA5  6F                 	db	111	;'o'
   978  007CA6  6C                 	db	108	;'l'
   979  007CA7  76                 	db	118	;'v'
   980  007CA8  65                 	db	101	;'e'
   981  007CA9  64                 	db	100	;'d'
   982  007CAA  2E                 	db	46
   983  007CAB  00                 	db	0
   984  007CAC                     STR_112:
   985  007CAC  5B                 	db	91	;'['
   986  007CAD  49                 	db	73	;'I'
   987  007CAE  50                 	db	80	;'P'
   988  007CAF  76                 	db	118	;'v'
   989  007CB0  34                 	db	52	;'4'
   990  007CB1  5D                 	db	93	;']'
   991  007CB2  3A                 	db	58	;':'
   992  007CB3  20                 	db	32
   993  007CB4  41                 	db	65	;'A'
   994  007CB5  52                 	db	82	;'R'
   995  007CB6  50                 	db	80	;'P'
   996  007CB7  20                 	db	32
   997  007CB8  70                 	db	112	;'p'
   998  007CB9  72                 	db	114	;'r'
   999  007CBA  6F                 	db	111	;'o'
  1000  007CBB  63                 	db	99	;'c'
  1001  007CBC  65                 	db	101	;'e'
  1002  007CBD  73                 	db	115	;'s'
  1003  007CBE  73                 	db	115	;'s'
  1004  007CBF  20                 	db	32
  1005  007CC0  63                 	db	99	;'c'
  1006  007CC1  6F                 	db	111	;'o'
  1007  007CC2  6D                 	db	109	;'m'
  1008  007CC3  70                 	db	112	;'p'
  1009  007CC4  6C                 	db	108	;'l'
  1010  007CC5  65                 	db	101	;'e'
  1011  007CC6  74                 	db	116	;'t'
  1012  007CC7  65                 	db	101	;'e'
  1013  007CC8  64                 	db	100	;'d'
  1014  007CC9  2E                 	db	46
  1015  007CCA  0A                 	db	10
  1016  007CCB  0D                 	db	13
  1017  007CCC  00                 	db	0
  1018  007CCD                     STR_90:
  1019  007CCD  5B                 	db	91	;'['
  1020  007CCE  41                 	db	65	;'A'
  1021  007CCF  52                 	db	82	;'R'
  1022  007CD0  50                 	db	80	;'P'
  1023  007CD1  5D                 	db	93	;']'
  1024  007CD2  3A                 	db	58	;':'
  1025  007CD3  20                 	db	32
  1026  007CD4  41                 	db	65	;'A'
  1027  007CD5  6C                 	db	108	;'l'
  1028  007CD6  6C                 	db	108	;'l'
  1029  007CD7  20                 	db	32
  1030  007CD8  61                 	db	97	;'a'
  1031  007CD9  6E                 	db	110	;'n'
  1032  007CDA  6E                 	db	110	;'n'
  1033  007CDB  6F                 	db	111	;'o'
  1034  007CDC  75                 	db	117	;'u'
  1035  007CDD  6E                 	db	110	;'n'
  1036  007CDE  63                 	db	99	;'c'
  1037  007CDF  65                 	db	101	;'e'
  1038  007CE0  6D                 	db	109	;'m'
  1039  007CE1  65                 	db	101	;'e'
  1040  007CE2  6E                 	db	110	;'n'
  1041  007CE3  74                 	db	116	;'t'
  1042  007CE4  73                 	db	115	;'s'
  1043  007CE5  20                 	db	32
  1044  007CE6  73                 	db	115	;'s'
  1045  007CE7  65                 	db	101	;'e'
  1046  007CE8  6E                 	db	110	;'n'
  1047  007CE9  74                 	db	116	;'t'
  1048  007CEA  2E                 	db	46
  1049  007CEB  0A                 	db	10
  1050  007CEC  0D                 	db	13
  1051  007CED  00                 	db	0
  1052  007CEE                     STR_41:
  1053  007CEE  5B                 	db	91	;'['
  1054  007CEF  49                 	db	73	;'I'
  1055  007CF0  50                 	db	80	;'P'
  1056  007CF1  76                 	db	118	;'v'
  1057  007CF2  34                 	db	52	;'4'
  1058  007CF3  5D                 	db	93	;']'
  1059  007CF4  3A                 	db	58	;':'
  1060  007CF5  20                 	db	32
  1061  007CF6  41                 	db	65	;'A'
  1062  007CF7  20                 	db	32
  1063  007CF8  70                 	db	112	;'p'
  1064  007CF9  61                 	db	97	;'a'
  1065  007CFA  63                 	db	99	;'c'
  1066  007CFB  6B                 	db	107	;'k'
  1067  007CFC  65                 	db	101	;'e'
  1068  007CFD  74                 	db	116	;'t'
  1069  007CFE  20                 	db	32
  1070  007CFF  77                 	db	119	;'w'
  1071  007D00  61                 	db	97	;'a'
  1072  007D01  73                 	db	115	;'s'
  1073  007D02  20                 	db	32
  1074  007D03  70                 	db	112	;'p'
  1075  007D04  72                 	db	114	;'r'
  1076  007D05  65                 	db	101	;'e'
  1077  007D06  70                 	db	112	;'p'
  1078  007D07  61                 	db	97	;'a'
  1079  007D08  72                 	db	114	;'r'
  1080  007D09  65                 	db	101	;'e'
  1081  007D0A  64                 	db	100	;'d'
  1082  007D0B  20                 	db	32
  1083  007D0C  28                 	db	40
  1084  007D0D  00                 	db	0
  1085  007D0E                     STR_91:
  1086  007D0E  5B                 	db	91	;'['
  1087  007D0F  41                 	db	65	;'A'
  1088  007D10  52                 	db	82	;'R'
  1089  007D11  50                 	db	80	;'P'
  1090  007D12  5D                 	db	93	;']'
  1091  007D13  3A                 	db	58	;':'
  1092  007D14  20                 	db	32
  1093  007D15  4E                 	db	78	;'N'
  1094  007D16  65                 	db	101	;'e'
  1095  007D17  77                 	db	119	;'w'
  1096  007D18  20                 	db	32
  1097  007D19  65                 	db	101	;'e'
  1098  007D1A  6E                 	db	110	;'n'
  1099  007D1B  74                 	db	116	;'t'
  1100  007D1C  72                 	db	114	;'r'
  1101  007D1D  79                 	db	121	;'y'
  1102  007D1E  20                 	db	32
  1103  007D1F  63                 	db	99	;'c'
  1104  007D20  72                 	db	114	;'r'
  1105  007D21  65                 	db	101	;'e'
  1106  007D22  61                 	db	97	;'a'
  1107  007D23  74                 	db	116	;'t'
  1108  007D24  65                 	db	101	;'e'
  1109  007D25  64                 	db	100	;'d'
  1110  007D26  20                 	db	32
  1111  007D27  66                 	db	102	;'f'
  1112  007D28  6F                 	db	111	;'o'
  1113  007D29  72                 	db	114	;'r'
  1114  007D2A  20                 	db	32
  1115  007D2B  00                 	db	0
  1116  007D2C                     STR_52:
  1117  007D2C  20                 	db	32
  1118  007D2D  45                 	db	69	;'E'
  1119  007D2E  54                 	db	84	;'T'
  1120  007D2F  48                 	db	72	;'H'
  1121  007D30  45                 	db	69	;'E'
  1122  007D31  52                 	db	82	;'R'
  1123  007D32  4E                 	db	78	;'N'
  1124  007D33  45                 	db	69	;'E'
  1125  007D34  54                 	db	84	;'T'
  1126  007D35  20                 	db	32
  1127  007D36  43                 	db	67	;'C'
  1128  007D37  4F                 	db	79	;'O'
  1129  007D38  4E                 	db	78	;'N'
  1130  007D39  54                 	db	84	;'T'
  1131  007D3A  52                 	db	82	;'R'
  1132  007D3B  4F                 	db	79	;'O'
  1133  007D3C  4C                 	db	76	;'L'
  1134  007D3D  4C                 	db	76	;'L'
  1135  007D3E  45                 	db	69	;'E'
  1136  007D3F  52                 	db	82	;'R'
  1137  007D40  20                 	db	32
  1138  007D41  4D                 	db	77	;'M'
  1139  007D42  4F                 	db	79	;'O'
  1140  007D43  44                 	db	68	;'D'
  1141  007D44  55                 	db	85	;'U'
  1142  007D45  4C                 	db	76	;'L'
  1143  007D46  45                 	db	69	;'E'
  1144  007D47  3A                 	db	58	;':'
  1145  007D48  20                 	db	32
  1146  007D49  00                 	db	0
  1147  007D4A                     STR_59:
  1148  007D4A  41                 	db	65	;'A'
  1149  007D4B  6E                 	db	110	;'n'
  1150  007D4C  20                 	db	32
  1151  007D4D  75                 	db	117	;'u'
  1152  007D4E  6E                 	db	110	;'n'
  1153  007D4F  6B                 	db	107	;'k'
  1154  007D50  6E                 	db	110	;'n'
  1155  007D51  6F                 	db	111	;'o'
  1156  007D52  77                 	db	119	;'w'
  1157  007D53  6E                 	db	110	;'n'
  1158  007D54  20                 	db	32
  1159  007D55  65                 	db	101	;'e'
  1160  007D56  72                 	db	114	;'r'
  1161  007D57  72                 	db	114	;'r'
  1162  007D58  6F                 	db	111	;'o'
  1163  007D59  72                 	db	114	;'r'
  1164  007D5A  20                 	db	32
  1165  007D5B  68                 	db	104	;'h'
  1166  007D5C  61                 	db	97	;'a'
  1167  007D5D  73                 	db	115	;'s'
  1168  007D5E  20                 	db	32
  1169  007D5F  6F                 	db	111	;'o'
  1170  007D60  63                 	db	99	;'c'
  1171  007D61  63                 	db	99	;'c'
  1172  007D62  75                 	db	117	;'u'
  1173  007D63  72                 	db	114	;'r'
  1174  007D64  65                 	db	101	;'e'
  1175  007D65  64                 	db	100	;'d'
  1176  007D66  2E                 	db	46
  1177  007D67  00                 	db	0
  1178  007D68                     STR_48:
  1179  007D68  63                 	db	99	;'c'
  1180  007D69  6F                 	db	111	;'o'
  1181  007D6A  6E                 	db	110	;'n'
  1182  007D6B  6E                 	db	110	;'n'
  1183  007D6C  65                 	db	101	;'e'
  1184  007D6D  63                 	db	99	;'c'
  1185  007D6E  74                 	db	116	;'t'
  1186  007D6F  69                 	db	105	;'i'
  1187  007D70  6F                 	db	111	;'o'
  1188  007D71  6E                 	db	110	;'n'
  1189  007D72  20                 	db	32
  1190  007D73  69                 	db	105	;'i'
  1191  007D74  73                 	db	115	;'s'
  1192  007D75  20                 	db	32
  1193  007D76  48                 	db	72	;'H'
  1194  007D77  61                 	db	97	;'a'
  1195  007D78  6C                 	db	108	;'l'
  1196  007D79  66                 	db	102	;'f'
  1197  007D7A  20                 	db	32
  1198  007D7B  44                 	db	68	;'D'
  1199  007D7C  75                 	db	117	;'u'
  1200  007D7D  70                 	db	112	;'p'
  1201  007D7E  6C                 	db	108	;'l'
  1202  007D7F  65                 	db	101	;'e'
  1203  007D80  78                 	db	120	;'x'
  1204  007D81  2E                 	db	46
  1205  007D82  0A                 	db	10
  1206  007D83  0D                 	db	13
  1207  007D84  00                 	db	0
  1208  007D85                     STR_49:
  1209  007D85  63                 	db	99	;'c'
  1210  007D86  6F                 	db	111	;'o'
  1211  007D87  6E                 	db	110	;'n'
  1212  007D88  6E                 	db	110	;'n'
  1213  007D89  65                 	db	101	;'e'
  1214  007D8A  63                 	db	99	;'c'
  1215  007D8B  74                 	db	116	;'t'
  1216  007D8C  69                 	db	105	;'i'
  1217  007D8D  6F                 	db	111	;'o'
  1218  007D8E  6E                 	db	110	;'n'
  1219  007D8F  20                 	db	32
  1220  007D90  69                 	db	105	;'i'
  1221  007D91  73                 	db	115	;'s'
  1222  007D92  20                 	db	32
  1223  007D93  46                 	db	70	;'F'
  1224  007D94  75                 	db	117	;'u'
  1225  007D95  6C                 	db	108	;'l'
  1226  007D96  6C                 	db	108	;'l'
  1227  007D97  20                 	db	32
  1228  007D98  44                 	db	68	;'D'
  1229  007D99  75                 	db	117	;'u'
  1230  007D9A  70                 	db	112	;'p'
  1231  007D9B  6C                 	db	108	;'l'
  1232  007D9C  65                 	db	101	;'e'
  1233  007D9D  78                 	db	120	;'x'
  1234  007D9E  2E                 	db	46
  1235  007D9F  0A                 	db	10
  1236  007DA0  0D                 	db	13
  1237  007DA1  00                 	db	0
  1238  007DA2                     STR_113:
  1239  007DA2  5B                 	db	91	;'['
  1240  007DA3  49                 	db	73	;'I'
  1241  007DA4  50                 	db	80	;'P'
  1242  007DA5  76                 	db	118	;'v'
  1243  007DA6  34                 	db	52	;'4'
  1244  007DA7  5D                 	db	93	;']'
  1245  007DA8  3A                 	db	58	;':'
  1246  007DA9  20                 	db	32
  1247  007DAA  41                 	db	65	;'A'
  1248  007DAB  64                 	db	100	;'d'
  1249  007DAC  64                 	db	100	;'d'
  1250  007DAD  72                 	db	114	;'r'
  1251  007DAE  65                 	db	101	;'e'
  1252  007DAF  73                 	db	115	;'s'
  1253  007DB0  73                 	db	115	;'s'
  1254  007DB1  20                 	db	32
  1255  007DB2  63                 	db	99	;'c'
  1256  007DB3  6F                 	db	111	;'o'
  1257  007DB4  6E                 	db	110	;'n'
  1258  007DB5  66                 	db	102	;'f'
  1259  007DB6  6C                 	db	108	;'l'
  1260  007DB7  69                 	db	105	;'i'
  1261  007DB8  63                 	db	99	;'c'
  1262  007DB9  74                 	db	116	;'t'
  1263  007DBA  0A                 	db	10
  1264  007DBB  0D                 	db	13
  1265  007DBC  00                 	db	0
  1266  007DBD                     STR_99:
  1267  007DBD  5B                 	db	91	;'['
  1268  007DBE  49                 	db	73	;'I'
  1269  007DBF  50                 	db	80	;'P'
  1270  007DC0  76                 	db	118	;'v'
  1271  007DC1  34                 	db	52	;'4'
  1272  007DC2  5D                 	db	93	;']'
  1273  007DC3  3A                 	db	58	;':'
  1274  007DC4  20                 	db	32
  1275  007DC5  54                 	db	84	;'T'
  1276  007DC6  72                 	db	114	;'r'
  1277  007DC7  79                 	db	121	;'y'
  1278  007DC8  69                 	db	105	;'i'
  1279  007DC9  6E                 	db	110	;'n'
  1280  007DCA  67                 	db	103	;'g'
  1281  007DCB  20                 	db	32
  1282  007DCC  74                 	db	116	;'t'
  1283  007DCD  6F                 	db	111	;'o'
  1284  007DCE  20                 	db	32
  1285  007DCF  72                 	db	114	;'r'
  1286  007DD0  65                 	db	101	;'e'
  1287  007DD1  73                 	db	115	;'s'
  1288  007DD2  6F                 	db	111	;'o'
  1289  007DD3  6C                 	db	108	;'l'
  1290  007DD4  76                 	db	118	;'v'
  1291  007DD5  65                 	db	101	;'e'
  1292  007DD6  20                 	db	32
  1293  007DD7  00                 	db	0
  1294  007DD8                     STR_80:
  1295  007DD8  5B                 	db	91	;'['
  1296  007DD9  41                 	db	65	;'A'
  1297  007DDA  52                 	db	82	;'R'
  1298  007DDB  50                 	db	80	;'P'
  1299  007DDC  5D                 	db	93	;']'
  1300  007DDD  3A                 	db	58	;':'
  1301  007DDE  20                 	db	32
  1302  007DDF  53                 	db	83	;'S'
  1303  007DE0  65                 	db	101	;'e'
  1304  007DE1  6E                 	db	110	;'n'
  1305  007DE2  64                 	db	100	;'d'
  1306  007DE3  69                 	db	105	;'i'
  1307  007DE4  6E                 	db	110	;'n'
  1308  007DE5  67                 	db	103	;'g'
  1309  007DE6  20                 	db	32
  1310  007DE7  50                 	db	80	;'P'
  1311  007DE8  72                 	db	114	;'r'
  1312  007DE9  6F                 	db	111	;'o'
  1313  007DEA  62                 	db	98	;'b'
  1314  007DEB  65                 	db	101	;'e'
  1315  007DEC  20                 	db	32
  1316  007DED  66                 	db	102	;'f'
  1317  007DEE  6F                 	db	111	;'o'
  1318  007DEF  72                 	db	114	;'r'
  1319  007DF0  20                 	db	32
  1320  007DF1  00                 	db	0
  1321  007DF2                     STR_30:
  1322  007DF2  46                 	db	70	;'F'
  1323  007DF3  49                 	db	73	;'I'
  1324  007DF4  52                 	db	82	;'R'
  1325  007DF5  4D                 	db	77	;'M'
  1326  007DF6  57                 	db	87	;'W'
  1327  007DF7  41                 	db	65	;'A'
  1328  007DF8  52                 	db	82	;'R'
  1329  007DF9  45                 	db	69	;'E'
  1330  007DFA  20                 	db	32
  1331  007DFB  42                 	db	66	;'B'
  1332  007DFC  55                 	db	85	;'U'
  1333  007DFD  49                 	db	73	;'I'
  1334  007DFE  4C                 	db	76	;'L'
  1335  007DFF  44                 	db	68	;'D'
  1336  007E00  20                 	db	32
  1337  007E01  44                 	db	68	;'D'
  1338  007E02  41                 	db	65	;'A'
  1339  007E03  54                 	db	84	;'T'
  1340  007E04  45                 	db	69	;'E'
  1341  007E05  20                 	db	32
  1342  007E06  49                 	db	73	;'I'
  1343  007E07  53                 	db	83	;'S'
  1344  007E08  20                 	db	32
  1345  007E09  00                 	db	0
  1346  007E0A                     STR_36:
  1347  007E0A  53                 	db	83	;'S'
  1348  007E0B  6F                 	db	111	;'o'
  1349  007E0C  75                 	db	117	;'u'
  1350  007E0D  72                 	db	114	;'r'
  1351  007E0E  63                 	db	99	;'c'
  1352  007E0F  65                 	db	101	;'e'
  1353  007E10  20                 	db	32
  1354  007E11  4D                 	db	77	;'M'
  1355  007E12  41                 	db	65	;'A'
  1356  007E13  43                 	db	67	;'C'
  1357  007E14  20                 	db	32
  1358  007E15  61                 	db	97	;'a'
  1359  007E16  64                 	db	100	;'d'
  1360  007E17  64                 	db	100	;'d'
  1361  007E18  72                 	db	114	;'r'
  1362  007E19  65                 	db	101	;'e'
  1363  007E1A  73                 	db	115	;'s'
  1364  007E1B  73                 	db	115	;'s'
  1365  007E1C  20                 	db	32
  1366  007E1D  69                 	db	105	;'i'
  1367  007E1E  73                 	db	115	;'s'
  1368  007E1F  20                 	db	32
  1369  007E20  00                 	db	0
  1370  007E21                     STR_47:
  1371  007E21  53                 	db	83	;'S'
  1372  007E22  70                 	db	112	;'p'
  1373  007E23  65                 	db	101	;'e'
  1374  007E24  65                 	db	101	;'e'
  1375  007E25  64                 	db	100	;'d'
  1376  007E26  20                 	db	32
  1377  007E27  69                 	db	105	;'i'
  1378  007E28  73                 	db	115	;'s'
  1379  007E29  20                 	db	32
  1380  007E2A  31                 	db	49	;'1'
  1381  007E2B  30                 	db	48	;'0'
  1382  007E2C  30                 	db	48	;'0'
  1383  007E2D  20                 	db	32
  1384  007E2E  4D                 	db	77	;'M'
  1385  007E2F  62                 	db	98	;'b'
  1386  007E30  70                 	db	112	;'p'
  1387  007E31  73                 	db	115	;'s'
  1388  007E32  2C                 	db	44
  1389  007E33  20                 	db	32
  1390  007E34  00                 	db	0
  1391  007E35                     STR_10:
  1392  007E35  5B                 	db	91	;'['
  1393  007E36  55                 	db	85	;'U'
  1394  007E37  6E                 	db	110	;'n'
  1395  007E38  6B                 	db	107	;'k'
  1396  007E39  6E                 	db	110	;'n'
  1397  007E3A  6F                 	db	111	;'o'
  1398  007E3B  77                 	db	119	;'w'
  1399  007E3C  6E                 	db	110	;'n'
  1400  007E3D  20                 	db	32
  1401  007E3E  45                 	db	69	;'E'
  1402  007E3F  74                 	db	116	;'t'
  1403  007E40  68                 	db	104	;'h'
  1404  007E41  65                 	db	101	;'e'
  1405  007E42  72                 	db	114	;'r'
  1406  007E43  54                 	db	84	;'T'
  1407  007E44  79                 	db	121	;'y'
  1408  007E45  70                 	db	112	;'p'
  1409  007E46  65                 	db	101	;'e'
  1410  007E47  5D                 	db	93	;']'
  1411  007E48  00                 	db	0
  1412  007E49                     STR_111:
  1413  007E49  5B                 	db	91	;'['
  1414  007E4A  49                 	db	73	;'I'
  1415  007E4B  4E                 	db	78	;'N'
  1416  007E4C  56                 	db	86	;'V'
  1417  007E4D  41                 	db	65	;'A'
  1418  007E4E  4C                 	db	76	;'L'
  1419  007E4F  49                 	db	73	;'I'
  1420  007E50  44                 	db	68	;'D'
  1421  007E51  20                 	db	32
  1422  007E52  43                 	db	67	;'C'
  1423  007E53  48                 	db	72	;'H'
  1424  007E54  45                 	db	69	;'E'
  1425  007E55  43                 	db	67	;'C'
  1426  007E56  4B                 	db	75	;'K'
  1427  007E57  53                 	db	83	;'S'
  1428  007E58  55                 	db	85	;'U'
  1429  007E59  4D                 	db	77	;'M'
  1430  007E5A  5D                 	db	93	;']'
  1431  007E5B  00                 	db	0
  1432  007E5C                     STR_46:
  1433  007E5C  53                 	db	83	;'S'
  1434  007E5D  70                 	db	112	;'p'
  1435  007E5E  65                 	db	101	;'e'
  1436  007E5F  65                 	db	101	;'e'
  1437  007E60  64                 	db	100	;'d'
  1438  007E61  20                 	db	32
  1439  007E62  69                 	db	105	;'i'
  1440  007E63  73                 	db	115	;'s'
  1441  007E64  20                 	db	32
  1442  007E65  31                 	db	49	;'1'
  1443  007E66  30                 	db	48	;'0'
  1444  007E67  20                 	db	32
  1445  007E68  4D                 	db	77	;'M'
  1446  007E69  62                 	db	98	;'b'
  1447  007E6A  70                 	db	112	;'p'
  1448  007E6B  73                 	db	115	;'s'
  1449  007E6C  2C                 	db	44
  1450  007E6D  20                 	db	32
  1451  007E6E  00                 	db	0
  1452  007E6F                     STR_45:
  1453  007E6F  4C                 	db	76	;'L'
  1454  007E70  69                 	db	105	;'i'
  1455  007E71  6E                 	db	110	;'n'
  1456  007E72  6B                 	db	107	;'k'
  1457  007E73  20                 	db	32
  1458  007E74  65                 	db	101	;'e'
  1459  007E75  73                 	db	115	;'s'
  1460  007E76  74                 	db	116	;'t'
  1461  007E77  61                 	db	97	;'a'
  1462  007E78  62                 	db	98	;'b'
  1463  007E79  6C                 	db	108	;'l'
  1464  007E7A  69                 	db	105	;'i'
  1465  007E7B  73                 	db	115	;'s'
  1466  007E7C  68                 	db	104	;'h'
  1467  007E7D  65                 	db	101	;'e'
  1468  007E7E  64                 	db	100	;'d'
  1469  007E7F  2E                 	db	46
  1470  007E80  20                 	db	32
  1471  007E81  00                 	db	0
  1472  007E82                     STR_53:
  1473  007E82  20                 	db	32
  1474  007E83  45                 	db	69	;'E'
  1475  007E84  54                 	db	84	;'T'
  1476  007E85  48                 	db	72	;'H'
  1477  007E86  45                 	db	69	;'E'
  1478  007E87  52                 	db	82	;'R'
  1479  007E88  4E                 	db	78	;'N'
  1480  007E89  45                 	db	69	;'E'
  1481  007E8A  54                 	db	84	;'T'
  1482  007E8B  20                 	db	32
  1483  007E8C  4D                 	db	77	;'M'
  1484  007E8D  4F                 	db	79	;'O'
  1485  007E8E  44                 	db	68	;'D'
  1486  007E8F  55                 	db	85	;'U'
  1487  007E90  4C                 	db	76	;'L'
  1488  007E91  45                 	db	69	;'E'
  1489  007E92  3A                 	db	58	;':'
  1490  007E93  20                 	db	32
  1491  007E94  00                 	db	0
  1492  007E95                     STR_64:
  1493  007E95  55                 	db	85	;'U'
  1494  007E96  6E                 	db	110	;'n'
  1495  007E97  6B                 	db	107	;'k'
  1496  007E98  6E                 	db	110	;'n'
  1497  007E99  6F                 	db	111	;'o'
  1498  007E9A  77                 	db	119	;'w'
  1499  007E9B  6E                 	db	110	;'n'
  1500  007E9C  20                 	db	32
  1501  007E9D  45                 	db	69	;'E'
  1502  007E9E  74                 	db	116	;'t'
  1503  007E9F  68                 	db	104	;'h'
  1504  007EA0  65                 	db	101	;'e'
  1505  007EA1  72                 	db	114	;'r'
  1506  007EA2  54                 	db	84	;'T'
  1507  007EA3  79                 	db	121	;'y'
  1508  007EA4  70                 	db	112	;'p'
  1509  007EA5  65                 	db	101	;'e'
  1510  007EA6  00                 	db	0
  1511  007EA7                     STR_68:
  1512  007EA7  55                 	db	85	;'U'
  1513  007EA8  6E                 	db	110	;'n'
  1514  007EA9  6B                 	db	107	;'k'
  1515  007EAA  6E                 	db	110	;'n'
  1516  007EAB  6F                 	db	111	;'o'
  1517  007EAC  77                 	db	119	;'w'
  1518  007EAD  6E                 	db	110	;'n'
  1519  007EAE  20                 	db	32
  1520  007EAF  50                 	db	80	;'P'
  1521  007EB0  72                 	db	114	;'r'
  1522  007EB1  6F                 	db	111	;'o'
  1523  007EB2  74                 	db	116	;'t'
  1524  007EB3  6F                 	db	111	;'o'
  1525  007EB4  63                 	db	99	;'c'
  1526  007EB5  6F                 	db	111	;'o'
  1527  007EB6  6C                 	db	108	;'l'
  1528  007EB7  00                 	db	0
  1529  007EB8                     STR_51:
  1530  007EB8  20                 	db	32
  1531  007EB9  4D                 	db	77	;'M'
  1532  007EBA  45                 	db	69	;'E'
  1533  007EBB  4D                 	db	77	;'M'
  1534  007EBC  4F                 	db	79	;'O'
  1535  007EBD  52                 	db	82	;'R'
  1536  007EBE  59                 	db	89	;'Y'
  1537  007EBF  20                 	db	32
  1538  007EC0  4D                 	db	77	;'M'
  1539  007EC1  4F                 	db	79	;'O'
  1540  007EC2  44                 	db	68	;'D'
  1541  007EC3  55                 	db	85	;'U'
  1542  007EC4  4C                 	db	76	;'L'
  1543  007EC5  45                 	db	69	;'E'
  1544  007EC6  3A                 	db	58	;':'
  1545  007EC7  20                 	db	32
  1546  007EC8  00                 	db	0
  1547  007EC9                     STR_77:
  1548  007EC9  5B                 	db	91	;'['
  1549  007ECA  52                 	db	82	;'R'
  1550  007ECB  65                 	db	101	;'e'
  1551  007ECC  70                 	db	112	;'p'
  1552  007ECD  6C                 	db	108	;'l'
  1553  007ECE  79                 	db	121	;'y'
  1554  007ECF  20                 	db	32
  1555  007ED0  73                 	db	115	;'s'
  1556  007ED1  65                 	db	101	;'e'
  1557  007ED2  6E                 	db	110	;'n'
  1558  007ED3  74                 	db	116	;'t'
  1559  007ED4  20                 	db	32
  1560  007ED5  74                 	db	116	;'t'
  1561  007ED6  6F                 	db	111	;'o'
  1562  007ED7  20                 	db	32
  1563  007ED8  00                 	db	0
  1564  007ED9                     STR_5:
  1565  007ED9  5B                 	db	91	;'['
  1566  007EDA  53                 	db	83	;'S'
  1567  007EDB  79                 	db	121	;'y'
  1568  007EDC  6D                 	db	109	;'m'
  1569  007EDD  62                 	db	98	;'b'
  1570  007EDE  6F                 	db	111	;'o'
  1571  007EDF  6C                 	db	108	;'l'
  1572  007EE0  20                 	db	32
  1573  007EE1  45                 	db	69	;'E'
  1574  007EE2  72                 	db	114	;'r'
  1575  007EE3  72                 	db	114	;'r'
  1576  007EE4  6F                 	db	111	;'o'
  1577  007EE5  72                 	db	114	;'r'
  1578  007EE6  73                 	db	115	;'s'
  1579  007EE7  5D                 	db	93	;']'
  1580  007EE8  00                 	db	0
  1581  007EE9                     STR_76:
  1582  007EE9  5B                 	db	91	;'['
  1583  007EEA  49                 	db	73	;'I'
  1584  007EEB  73                 	db	115	;'s'
  1585  007EEC  47                 	db	71	;'G'
  1586  007EED  72                 	db	114	;'r'
  1587  007EEE  61                 	db	97	;'a'
  1588  007EEF  74                 	db	116	;'t'
  1589  007EF0  75                 	db	117	;'u'
  1590  007EF1  69                 	db	105	;'i'
  1591  007EF2  74                 	db	116	;'t'
  1592  007EF3  6F                 	db	111	;'o'
  1593  007EF4  75                 	db	117	;'u'
  1594  007EF5  73                 	db	115	;'s'
  1595  007EF6  5D                 	db	93	;']'
  1596  007EF7  00                 	db	0
  1597  007EF8                     STR_55:
  1598  007EF8  20                 	db	32
  1599  007EF9  49                 	db	73	;'I'
  1600  007EFA  50                 	db	80	;'P'
  1601  007EFB  76                 	db	118	;'v'
  1602  007EFC  34                 	db	52	;'4'
  1603  007EFD  20                 	db	32
  1604  007EFE  4D                 	db	77	;'M'
  1605  007EFF  4F                 	db	79	;'O'
  1606  007F00  44                 	db	68	;'D'
  1607  007F01  55                 	db	85	;'U'
  1608  007F02  4C                 	db	76	;'L'
  1609  007F03  45                 	db	69	;'E'
  1610  007F04  3A                 	db	58	;':'
  1611  007F05  20                 	db	32
  1612  007F06  00                 	db	0
  1613  007F07                     STR_39:
  1614  007F07  4D                 	db	77	;'M'
  1615  007F08  79                 	db	121	;'y'
  1616  007F09  20                 	db	32
  1617  007F0A  41                 	db	65	;'A'
  1618  007F0B  64                 	db	100	;'d'
  1619  007F0C  64                 	db	100	;'d'
  1620  007F0D  72                 	db	114	;'r'
  1621  007F0E  65                 	db	101	;'e'
  1622  007F0F  73                 	db	115	;'s'
  1623  007F10  73                 	db	115	;'s'
  1624  007F11  20                 	db	32
  1625  007F12  69                 	db	105	;'i'
  1626  007F13  73                 	db	115	;'s'
  1627  007F14  20                 	db	32
  1628  007F15  00                 	db	0
  1629  007F16                     STR_54:
  1630  007F16  20                 	db	32
  1631  007F17  41                 	db	65	;'A'
  1632  007F18  52                 	db	82	;'R'
  1633  007F19  50                 	db	80	;'P'
  1634  007F1A  20                 	db	32
  1635  007F1B  4D                 	db	77	;'M'
  1636  007F1C  4F                 	db	79	;'O'
  1637  007F1D  44                 	db	68	;'D'
  1638  007F1E  55                 	db	85	;'U'
  1639  007F1F  4C                 	db	76	;'L'
  1640  007F20  45                 	db	69	;'E'
  1641  007F21  3A                 	db	58	;':'
  1642  007F22  20                 	db	32
  1643  007F23  00                 	db	0
  1644  007F24                     STR_44:
  1645  007F24  4C                 	db	76	;'L'
  1646  007F25  69                 	db	105	;'i'
  1647  007F26  6E                 	db	110	;'n'
  1648  007F27  6B                 	db	107	;'k'
  1649  007F28  20                 	db	32
  1650  007F29  6C                 	db	108	;'l'
  1651  007F2A  6F                 	db	111	;'o'
  1652  007F2B  73                 	db	115	;'s'
  1653  007F2C  74                 	db	116	;'t'
  1654  007F2D  2E                 	db	46
  1655  007F2E  0A                 	db	10
  1656  007F2F  0D                 	db	13
  1657  007F30  00                 	db	0
  1658  007F31                     STR_81:
  1659  007F31  20                 	db	32
  1660  007F32  28                 	db	40
  1661  007F33  72                 	db	114	;'r'
  1662  007F34  65                 	db	101	;'e'
  1663  007F35  70                 	db	112	;'p'
  1664  007F36  6C                 	db	108	;'l'
  1665  007F37  79                 	db	121	;'y'
  1666  007F38  20                 	db	32
  1667  007F39  74                 	db	116	;'t'
  1668  007F3A  6F                 	db	111	;'o'
  1669  007F3B  20                 	db	32
  1670  007F3C  00                 	db	0
  1671  007F3D                     STR_35:
  1672  007F3D  20                 	db	32
  1673  007F3E  64                 	db	100	;'d'
  1674  007F3F  65                 	db	101	;'e'
  1675  007F40  74                 	db	116	;'t'
  1676  007F41  65                 	db	101	;'e'
  1677  007F42  63                 	db	99	;'c'
  1678  007F43  74                 	db	116	;'t'
  1679  007F44  65                 	db	101	;'e'
  1680  007F45  64                 	db	100	;'d'
  1681  007F46  2E                 	db	46
  1682  007F47  20                 	db	32
  1683  007F48  00                 	db	0
  1684  007F49                     STR_31:
  1685  007F49  4D                 	db	77	;'M'
  1686  007F4A  61                 	db	97	;'a'
  1687  007F4B  72                 	db	114	;'r'
  1688  007F4C  20                 	db	32
  1689  007F4D  33                 	db	51	;'3'
  1690  007F4E  30                 	db	48	;'0'
  1691  007F4F  20                 	db	32
  1692  007F50  32                 	db	50	;'2'
  1693  007F51  30                 	db	48	;'0'
  1694  007F52  31                 	db	49	;'1'
  1695  007F53  39                 	db	57	;'9'
  1696  007F54  00                 	db	0
  1697  007F55                     STR_3:
  1698  007F55  5B                 	db	91	;'['
  1699  007F56  42                 	db	66	;'B'
  1700  007F57  72                 	db	114	;'r'
  1701  007F58  6F                 	db	111	;'o'
  1702  007F59  61                 	db	97	;'a'
  1703  007F5A  64                 	db	100	;'d'
  1704  007F5B  63                 	db	99	;'c'
  1705  007F5C  61                 	db	97	;'a'
  1706  007F5D  73                 	db	115	;'s'
  1707  007F5E  74                 	db	116	;'t'
  1708  007F5F  5D                 	db	93	;']'
  1709  007F60  00                 	db	0
  1710  007F61                     STR_101:
  1711  007F61  5B                 	db	91	;'['
  1712  007F62  45                 	db	69	;'E'
  1713  007F63  78                 	db	120	;'x'
  1714  007F64  70                 	db	112	;'p'
  1715  007F65  65                 	db	101	;'e'
  1716  007F66  63                 	db	99	;'c'
  1717  007F67  74                 	db	116	;'t'
  1718  007F68  65                 	db	101	;'e'
  1719  007F69  64                 	db	100	;'d'
  1720  007F6A  20                 	db	32
  1721  007F6B  00                 	db	0
  1722  007F6C                     STR_75:
  1723  007F6C  5B                 	db	91	;'['
  1724  007F6D  49                 	db	73	;'I'
  1725  007F6E  73                 	db	115	;'s'
  1726  007F6F  50                 	db	80	;'P'
  1727  007F70  72                 	db	114	;'r'
  1728  007F71  6F                 	db	111	;'o'
  1729  007F72  62                 	db	98	;'b'
  1730  007F73  65                 	db	101	;'e'
  1731  007F74  5D                 	db	93	;']'
  1732  007F75  00                 	db	0
  1733  007F76                     STR_4:
  1734  007F76  5B                 	db	91	;'['
  1735  007F77  55                 	db	85	;'U'
  1736  007F78  6E                 	db	110	;'n'
  1737  007F79  69                 	db	105	;'i'
  1738  007F7A  63                 	db	99	;'c'
  1739  007F7B  61                 	db	97	;'a'
  1740  007F7C  73                 	db	115	;'s'
  1741  007F7D  74                 	db	116	;'t'
  1742  007F7E  5D                 	db	93	;']'
  1743  007F7F  00                 	db	0
  1744  007F80                     STR_96:
  1745  007F80  5B                 	db	91	;'['
  1746  007F81  49                 	db	73	;'I'
  1747  007F82  50                 	db	80	;'P'
  1748  007F83  76                 	db	118	;'v'
  1749  007F84  34                 	db	52	;'4'
  1750  007F85  5D                 	db	93	;']'
  1751  007F86  3A                 	db	58	;':'
  1752  007F87  20                 	db	32
  1753  007F88  00                 	db	0
  1754  007F89                     STR_60:
  1755  007F89  20                 	db	32
  1756  007F8A  28                 	db	40
  1757  007F8B  43                 	db	67	;'C'
  1758  007F8C  6F                 	db	111	;'o'
  1759  007F8D  64                 	db	100	;'d'
  1760  007F8E  65                 	db	101	;'e'
  1761  007F8F  3A                 	db	58	;':'
  1762  007F90  20                 	db	32
  1763  007F91  00                 	db	0
  1764  007F92                     STR_33:
  1765  007F92  31                 	db	49	;'1'
  1766  007F93  31                 	db	49	;'1'
  1767  007F94  3A                 	db	58	;':'
  1768  007F95  34                 	db	52	;'4'
  1769  007F96  34                 	db	52	;'4'
  1770  007F97  3A                 	db	58	;':'
  1771  007F98  34                 	db	52	;'4'
  1772  007F99  34                 	db	52	;'4'
  1773  007F9A  00                 	db	0
  1774  007F9B                     STR_97:
  1775  007F9B  20                 	db	32
  1776  007F9C  69                 	db	105	;'i'
  1777  007F9D  73                 	db	115	;'s'
  1778  007F9E  20                 	db	32
  1779  007F9F  61                 	db	97	;'a'
  1780  007FA0  74                 	db	116	;'t'
  1781  007FA1  20                 	db	32
  1782  007FA2  00                 	db	0
  1783  007FA3                     STR_50:
  1784  007FA3  5B                 	db	91	;'['
  1785  007FA4  45                 	db	69	;'E'
  1786  007FA5  52                 	db	82	;'R'
  1787  007FA6  52                 	db	82	;'R'
  1788  007FA7  4F                 	db	79	;'O'
  1789  007FA8  52                 	db	82	;'R'
  1790  007FA9  5D                 	db	93	;']'
  1791  007FAA  00                 	db	0
  1792  007FAB                     STR_102:
  1793  007FAB  2C                 	db	44
  1794  007FAC  20                 	db	32
  1795  007FAD  67                 	db	103	;'g'
  1796  007FAE  6F                 	db	111	;'o'
  1797  007FAF  74                 	db	116	;'t'
  1798  007FB0  20                 	db	32
  1799  007FB1  00                 	db	0
  1800  007FB2                     STR_9:
  1801  007FB2  5B                 	db	91	;'['
  1802  007FB3  49                 	db	73	;'I'
  1803  007FB4  50                 	db	80	;'P'
  1804  007FB5  76                 	db	118	;'v'
  1805  007FB6  34                 	db	52	;'4'
  1806  007FB7  5D                 	db	93	;']'
  1807  007FB8  00                 	db	0
  1808  007FB9                     STR_8:
  1809  007FB9  5B                 	db	91	;'['
  1810  007FBA  41                 	db	65	;'A'
  1811  007FBB  52                 	db	82	;'R'
  1812  007FBC  50                 	db	80	;'P'
  1813  007FBD  5D                 	db	93	;']'
  1814  007FBE  00                 	db	0
  1815  007FBF                     STR_72:
  1816  007FBF  5D                 	db	93	;']'
  1817  007FC0  2D                 	db	45
  1818  007FC1  3E                 	db	62	;'>'
  1819  007FC2  5B                 	db	91	;'['
  1820  007FC3  00                 	db	0
  1821  007FC4                     STR_62:
  1822  007FC4  49                 	db	73	;'I'
  1823  007FC5  50                 	db	80	;'P'
  1824  007FC6  76                 	db	118	;'v'
  1825  007FC7  34                 	db	52	;'4'
  1826  007FC8  00                 	db	0
  1827  007FC9                     STR_65:
  1828  007FC9  49                 	db	73	;'I'
  1829  007FCA  43                 	db	67	;'C'
  1830  007FCB  4D                 	db	77	;'M'
  1831  007FCC  50                 	db	80	;'P'
  1832  007FCD  00                 	db	0
  1833  007FCE                     STR_61:
  1834  007FCE  29                 	db	41
  1835  007FCF  2E                 	db	46
  1836  007FD0  0A                 	db	10
  1837  007FD1  0D                 	db	13
  1838  007FD2  00                 	db	0
  1839  007FD3                     STR_42:
  1840  007FD3  20                 	db	32
  1841  007FD4  2D                 	db	45
  1842  007FD5  3E                 	db	62	;'>'
  1843  007FD6  20                 	db	32
  1844  007FD7  00                 	db	0
  1845  007FD8                     STR_14:
  1846  007FD8  5D                 	db	93	;']'
  1847  007FD9  5B                 	db	91	;'['
  1848  007FDA  4C                 	db	76	;'L'
  1849  007FDB  3D                 	db	61	;'='
  1850  007FDC  00                 	db	0
  1851  007FDD                     STR_66:
  1852  007FDD  54                 	db	84	;'T'
  1853  007FDE  43                 	db	67	;'C'
  1854  007FDF  50                 	db	80	;'P'
  1855  007FE0  00                 	db	0
  1856  007FE1                     STR_67:
  1857  007FE1  55                 	db	85	;'U'
  1858  007FE2  44                 	db	68	;'D'
  1859  007FE3  50                 	db	80	;'P'
  1860  007FE4  00                 	db	0
  1861  007FE5                     STR_63:
  1862  007FE5  41                 	db	65	;'A'
  1863  007FE6  52                 	db	82	;'R'
  1864  007FE7  50                 	db	80	;'P'
  1865  007FE8  00                 	db	0
  1866  007FE9                     STR_43:
  1867  007FE9  29                 	db	41
  1868  007FEA  0A                 	db	10
  1869  007FEB  0D                 	db	13
  1870  007FEC  00                 	db	0
  1871  007FED                     STR_93:
  1872  007FED  29                 	db	41
  1873  007FEE  20                 	db	32
  1874  007FEF  00                 	db	0
  1875  007FF0                     STR_15:
  1876  007FF0  5D                 	db	93	;']'
  1877  007FF1  20                 	db	32
  1878  007FF2  00                 	db	0
  1879  007FF3                     STR_12:
  1880  007FF3  2D                 	db	45
  1881  007FF4  3E                 	db	62	;'>'
  1882  007FF5  00                 	db	0
  1883  007FF6                     STR_13:
  1884  007FF6  5D                 	db	93	;']'
  1885  007FF7  5B                 	db	91	;'['
  1886  007FF8  00                 	db	0
  1887  007FF9                     STR_19:
  1888  007FF9  29                 	db	41
  1889  007FFA  5D                 	db	93	;']'
  1890  007FFB  00                 	db	0
  1891  007FFC                     STR_26:
  1892  007FFC  12                 	db	18
  1893  007FFD  00                 	db	0
  1894  0000                     
  1895                           ; #config settings
  1896  007FFE  00                 	db	0	; dummy byte at the end
  1897  0000                     
  1898                           	psect	cinit
  1899  00432E                     __pcinit:
  1900                           	opt stack 0
  1901  00432E                     start_initialization:
  1902                           	opt stack 0
  1903  00432E                     __initialization:
  1904                           	opt stack 0
  1905                           
  1906                           ; Initialize objects allocated to BANK2 (34 bytes)
  1907                           ; load TBLPTR registers with __pidataBANK2
  1908  00432E  0EF0               	movlw	low __pidataBANK2
  1909  004330  6EF6               	movwf	tblptrl,c
  1910  004332  0E55               	movlw	high __pidataBANK2
  1911  004334  6EF7               	movwf	tblptrh,c
  1912  004336  0E00               	movlw	low (__pidataBANK2 shr (0+16))
  1913  004338  6EF8               	movwf	tblptru,c
  1914  00433A  EE02  F0DE         	lfsr	0,__pdataBANK2
  1915  00433E  EE10 F022          	lfsr	1,34
  1916  004342                     copy_data0:
  1917  004342  0009               	tblrd		*+
  1918  004344  CFF5 FFEE          	movff	tablat,postinc0
  1919  004348  50E5               	movf	postdec1,w,c
  1920  00434A  50E1               	movf	fsr1l,w,c
  1921  00434C  E1FA               	bnz	copy_data0
  1922                           
  1923                           ; Initialize objects allocated to BANK1 (12 bytes)
  1924                           ; load TBLPTR registers with __pidataBANK1
  1925  00434E  0E76               	movlw	low __pidataBANK1
  1926  004350  6EF6               	movwf	tblptrl,c
  1927  004352  0E57               	movlw	high __pidataBANK1
  1928  004354  6EF7               	movwf	tblptrh,c
  1929  004356  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1930  004358  6EF8               	movwf	tblptru,c
  1931  00435A  EE01  F0CB         	lfsr	0,__pdataBANK1
  1932  00435E  EE10 F00C          	lfsr	1,12
  1933  004362                     copy_data1:
  1934  004362  0009               	tblrd		*+
  1935  004364  CFF5 FFEE          	movff	tablat,postinc0
  1936  004368  50E5               	movf	postdec1,w,c
  1937  00436A  50E1               	movf	fsr1l,w,c
  1938  00436C  E1FA               	bnz	copy_data1
  1939                           
  1940                           ; Initialize objects allocated to COMRAM (6 bytes)
  1941                           ; load TBLPTR registers with __pidataCOMRAM
  1942  00436E  0EA8               	movlw	low __pidataCOMRAM
  1943  004370  6EF6               	movwf	tblptrl,c
  1944  004372  0E57               	movlw	high __pidataCOMRAM
  1945  004374  6EF7               	movwf	tblptrh,c
  1946  004376  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1947  004378  6EF8               	movwf	tblptru,c
  1948  00437A  EE00  F049         	lfsr	0,__pdataCOMRAM
  1949  00437E  EE10 F006          	lfsr	1,6
  1950  004382                     copy_data2:
  1951  004382  0009               	tblrd		*+
  1952  004384  CFF5 FFEE          	movff	tablat,postinc0
  1953  004388  50E5               	movf	postdec1,w,c
  1954  00438A  50E1               	movf	fsr1l,w,c
  1955  00438C  E1FA               	bnz	copy_data2
  1956                           
  1957                           ; Clear objects allocated to BANK3 (162 bytes)
  1958  00438E  EE03  F000         	lfsr	0,__pbssBANK3
  1959  004392  0EA2               	movlw	162
  1960  004394                     clear_0:
  1961  004394  6AEE               	clrf	postinc0,c
  1962  004396  06E8               	decf	wreg,f,c
  1963  004398  E1FD               	bnz	clear_0
  1964                           
  1965                           ; Clear objects allocated to BANK2 (222 bytes)
  1966  00439A  EE02  F000         	lfsr	0,__pbssBANK2
  1967  00439E  0EDE               	movlw	222
  1968  0043A0                     clear_1:
  1969  0043A0  6AEE               	clrf	postinc0,c
  1970  0043A2  06E8               	decf	wreg,f,c
  1971  0043A4  E1FD               	bnz	clear_1
  1972                           
  1973                           ; Clear objects allocated to BANK1 (55 bytes)
  1974  0043A6  EE01  F094         	lfsr	0,__pbssBANK1
  1975  0043AA  0E37               	movlw	55
  1976  0043AC                     clear_2:
  1977  0043AC  6AEE               	clrf	postinc0,c
  1978  0043AE  06E8               	decf	wreg,f,c
  1979  0043B0  E1FD               	bnz	clear_2
  1980                           
  1981                           ; Clear objects allocated to BITCOMRAM (1 bytes)
  1982  0043B2  6A4F               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
  1983                           
  1984                           ; Clear objects allocated to COMRAM (32 bytes)
  1985  0043B4  EE00  F029         	lfsr	0,__pbssCOMRAM
  1986  0043B8  0E20               	movlw	32
  1987  0043BA                     clear_3:
  1988  0043BA  6AEE               	clrf	postinc0,c
  1989  0043BC  06E8               	decf	wreg,f,c
  1990  0043BE  E1FD               	bnz	clear_3
  1991  0043C0                     end_of_initialization:
  1992                           	opt stack 0
  1993  0043C0                     __end_of__initialization:
  1994                           	opt stack 0
  1995  0043C0  9050               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1996  0043C2  9250               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1997  0043C4  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1998  0043C6  6EF8               	movwf	tblptru,c
  1999  0043C8  0100               	movlb	0
  2000  0043CA  EF6D  F005         	goto	_main	;jump to C main() function
  2001                           tblptru	equ	0xFF8
  2002                           tblptrh	equ	0xFF7
  2003                           tblptrl	equ	0xFF6
  2004                           tablat	equ	0xFF5
  2005                           postinc0	equ	0xFEE
  2006                           wreg	equ	0xFE8
  2007                           postdec1	equ	0xFE5
  2008                           fsr1l	equ	0xFE1
  2009                           
  2010                           	psect	bitbssCOMRAM
  2011  000278                     __pbitbssCOMRAM:
  2012                           	opt stack 0
  2013  000278                     _fSrcAddrChanged:
  2014                           	opt stack 0
  2015  000278                     	ds	1
  2016  000279                     	ds	1
  2017                           tblptru	equ	0xFF8
  2018                           tblptrh	equ	0xFF7
  2019                           tblptrl	equ	0xFF6
  2020                           tablat	equ	0xFF5
  2021                           postinc0	equ	0xFEE
  2022                           wreg	equ	0xFE8
  2023                           postdec1	equ	0xFE5
  2024                           fsr1l	equ	0xFE1
  2025                           
  2026                           	psect	bssCOMRAM
  2027  000029                     __pbssCOMRAM:
  2028                           	opt stack 0
  2029  000029                     _time:
  2030                           	opt stack 0
  2031  000029                     	ds	4
  2032  00002D                     buttonHandler@debounceCounter:
  2033                           	opt stack 0
  2034  00002D                     	ds	4
  2035  000031                     _numberToDisplay:
  2036                           	opt stack 0
  2037  000031                     	ds	4
  2038  000035                     ethernet_rxGetNewFrame@counter:
  2039                           	opt stack 0
  2040  000035                     	ds	4
  2041  000039                     sevenSegmentUpdate@digitsToDisplay:
  2042                           	opt stack 0
  2043  000039                     	ds	3
  2044  00003C                     _arpStatus:
  2045                           	opt stack 0
  2046  00003C                     	ds	2
  2047  00003E                     ethernetController_streamToTransmitBuffer@pointer:
  2048                           	opt stack 0
  2049  00003E                     	ds	2
  2050  000040                     ethernetController_softReset@F5989:
  2051                           	opt stack 0
  2052  000040                     	ds	2
  2053  000042                     _nextPacketPointer:
  2054                           	opt stack 0
  2055  000042                     	ds	2
  2056  000044                     	ds	1
  2057  000045                     sevenSegmentUpdate@digitPointer:
  2058                           	opt stack 0
  2059  000045                     	ds	1
  2060  000046                     buttonHandler@newState:
  2061                           	opt stack 0
  2062  000046                     	ds	1
  2063  000047                     buttonHandler@oldState:
  2064                           	opt stack 0
  2065  000047                     	ds	1
  2066  000048                     	ds	1
  2067                           tblptru	equ	0xFF8
  2068                           tblptrh	equ	0xFF7
  2069                           tblptrl	equ	0xFF6
  2070                           tablat	equ	0xFF5
  2071                           postinc0	equ	0xFEE
  2072                           wreg	equ	0xFE8
  2073                           postdec1	equ	0xFE5
  2074                           fsr1l	equ	0xFE1
  2075                           
  2076                           	psect	dataCOMRAM
  2077  000049                     __pdataCOMRAM:
  2078                           	opt stack 0
  2079  000049                     _randx:
  2080                           	opt stack 0
  2081  000049                     	ds	4
  2082  00004D                     ethernetController_softReset@F5987:
  2083                           	opt stack 0
  2084  00004D                     	ds	2
  2085                           tblptru	equ	0xFF8
  2086                           tblptrh	equ	0xFF7
  2087                           tblptrl	equ	0xFF6
  2088                           tablat	equ	0xFF5
  2089                           postinc0	equ	0xFEE
  2090                           wreg	equ	0xFE8
  2091                           postdec1	equ	0xFE5
  2092                           fsr1l	equ	0xFE1
  2093                           
  2094                           	psect	bssBANK1
  2095  000194                     __pbssBANK1:
  2096                           	opt stack 0
  2097  000194                     ipv4_sendFrame@oldTime:
  2098                           	opt stack 0
  2099  000194                     	ds	4
  2100  000198                     _ipPreliminarySource:
  2101                           	opt stack 0
  2102  000198                     	ds	4
  2103  00019C                     arp_background@ipPreliminary:
  2104                           	opt stack 0
  2105  00019C                     	ds	4
  2106  0001A0                     arp_gratuitous@timeStart:
  2107                           	opt stack 0
  2108  0001A0                     	ds	4
  2109  0001A4                     _ipSource:
  2110                           	opt stack 0
  2111  0001A4                     	ds	4
  2112  0001A8                     arp_background@state:
  2113                           	opt stack 0
  2114  0001A8                     	ds	1
  2115  0001A9                     arp_gratuitous@state:
  2116                           	opt stack 0
  2117  0001A9                     	ds	1
  2118  0001AA                     arp_gratuitous@announceCounter:
  2119                           	opt stack 0
  2120  0001AA                     	ds	1
  2121  0001AB                     arp_probe@state:
  2122                           	opt stack 0
  2123  0001AB                     	ds	1
  2124  0001AC                     arp_probe@probeCounter:
  2125                           	opt stack 0
  2126  0001AC                     	ds	1
  2127  0001AD                     hexToString@number:
  2128                           	opt stack 0
  2129  0001AD                     	ds	10
  2130  0001B7                     intToString@number:
  2131                           	opt stack 0
  2132  0001B7                     	ds	10
  2133  0001C1                     ethernetController_getRSV@temp:
  2134                           	opt stack 0
  2135  0001C1                     	ds	6
  2136  0001C7                     arp_background@err:
  2137                           	opt stack 0
  2138  0001C7                     	ds	3
  2139  0001CA                     _buttonState:
  2140                           	opt stack 0
  2141  0001CA                     	ds	1
  2142                           tblptru	equ	0xFF8
  2143                           tblptrh	equ	0xFF7
  2144                           tblptrl	equ	0xFF6
  2145                           tablat	equ	0xFF5
  2146                           postinc0	equ	0xFEE
  2147                           wreg	equ	0xFE8
  2148                           postdec1	equ	0xFE5
  2149                           fsr1l	equ	0xFE1
  2150                           
  2151                           	psect	dataBANK1
  2152  0001CB                     __pdataBANK1:
  2153                           	opt stack 0
  2154  0001CB                     _sevenSegCharacters:
  2155                           	opt stack 0
  2156  0001CB                     	ds	12
  2157                           tblptru	equ	0xFF8
  2158                           tblptrh	equ	0xFF7
  2159                           tblptrl	equ	0xFF6
  2160                           tablat	equ	0xFF5
  2161                           postinc0	equ	0xFEE
  2162                           wreg	equ	0xFE8
  2163                           postdec1	equ	0xFE5
  2164                           fsr1l	equ	0xFE1
  2165                           
  2166                           	psect	bssBANK2
  2167  000200                     __pbssBANK2:
  2168                           	opt stack 0
  2169  000200                     _occupiedMemory:
  2170                           	opt stack 0
  2171  000200                     	ds	72
  2172  000248                     printEthernetState@oldState:
  2173                           	opt stack 0
  2174  000248                     	ds	15
  2175  000257                     _stack:
  2176                           	opt stack 0
  2177  000257                     	ds	135
  2178                           tblptru	equ	0xFF8
  2179                           tblptrh	equ	0xFF7
  2180                           tblptrl	equ	0xFF6
  2181                           tablat	equ	0xFF5
  2182                           postinc0	equ	0xFEE
  2183                           wreg	equ	0xFE8
  2184                           postdec1	equ	0xFE5
  2185                           fsr1l	equ	0xFE1
  2186                           
  2187                           	psect	dataBANK2
  2188  0002DE                     __pdataBANK2:
  2189                           	opt stack 0
  2190  0002DE                     macToString@F5947:
  2191                           	opt stack 0
  2192  0002DE                     	ds	18
  2193  0002F0                     ipAdressToString@address:
  2194                           	opt stack 0
  2195  0002F0                     	ds	16
  2196                           tblptru	equ	0xFF8
  2197                           tblptrh	equ	0xFF7
  2198                           tblptrl	equ	0xFF6
  2199                           tablat	equ	0xFF5
  2200                           postinc0	equ	0xFEE
  2201                           wreg	equ	0xFE8
  2202                           postdec1	equ	0xFE5
  2203                           fsr1l	equ	0xFE1
  2204                           
  2205                           	psect	bssBANK3
  2206  000300                     __pbssBANK3:
  2207                           	opt stack 0
  2208  000300                     _arp_table:
  2209                           	opt stack 0
  2210  000300                     	ds	112
  2211  000370                     arpEntryToString@string:
  2212                           	opt stack 0
  2213  000370                     	ds	50
  2214                           tblptru	equ	0xFF8
  2215                           tblptrh	equ	0xFF7
  2216                           tblptrl	equ	0xFF6
  2217                           tablat	equ	0xFF5
  2218                           postinc0	equ	0xFEE
  2219                           wreg	equ	0xFE8
  2220                           postdec1	equ	0xFE5
  2221                           fsr1l	equ	0xFE1
  2222                           
  2223                           	psect	cstackBANK3
  2224  0003A2                     __pcstackBANK3:
  2225                           	opt stack 0
  2226  0003A2                     main@prescaler:
  2227                           	opt stack 0
  2228                           
  2229                           ; 4 bytes @ 0x0
  2230  0003A2                     	ds	4
  2231  0003A6                     main@headerBuf:
  2232                           	opt stack 0
  2233                           
  2234                           ; 32 bytes @ 0x4
  2235  0003A6                     	ds	32
  2236  0003C6                     _main$2404:
  2237                           	opt stack 0
  2238                           
  2239                           ; 2 bytes @ 0x24
  2240  0003C6                     	ds	2
  2241  0003C8                     main@i:
  2242                           	opt stack 0
  2243                           
  2244                           ; 1 bytes @ 0x26
  2245  0003C8                     	ds	1
  2246  0003C9                     main@err:
  2247                           	opt stack 0
  2248                           
  2249                           ; 3 bytes @ 0x27
  2250  0003C9                     	ds	3
  2251  0003CC                     main@ipDst:
  2252                           	opt stack 0
  2253                           
  2254                           ; 4 bytes @ 0x2A
  2255  0003CC                     	ds	4
  2256                           tblptru	equ	0xFF8
  2257                           tblptrh	equ	0xFF7
  2258                           tblptrl	equ	0xFF6
  2259                           tablat	equ	0xFF5
  2260                           postinc0	equ	0xFEE
  2261                           wreg	equ	0xFE8
  2262                           postdec1	equ	0xFE5
  2263                           fsr1l	equ	0xFE1
  2264                           
  2265                           	psect	cstackBANK1
  2266  000100                     __pcstackBANK1:
  2267                           	opt stack 0
  2268  000100                     arp_sendRequest@ipSender:
  2269                           	opt stack 0
  2270  000100                     arp_sendReply@request:
  2271                           	opt stack 0
  2272                           
  2273                           ; 32 bytes @ 0x0
  2274  000100                     	ds	4
  2275  000104                     arp_sendRequest@ipTarget:
  2276                           	opt stack 0
  2277                           
  2278                           ; 4 bytes @ 0x4
  2279  000104                     	ds	4
  2280  000108                     arp_sendRequest@senderMAC:
  2281                           	opt stack 0
  2282                           
  2283                           ; 6 bytes @ 0x8
  2284  000108                     	ds	6
  2285  00010E                     arp_sendRequest@targetMAC:
  2286                           	opt stack 0
  2287                           
  2288                           ; 6 bytes @ 0xE
  2289  00010E                     	ds	6
  2290  000114                     arp_sendRequest@request:
  2291                           	opt stack 0
  2292                           
  2293                           ; 32 bytes @ 0x14
  2294  000114                     	ds	12
  2295  000120                     arp_sendReply@senderMAC:
  2296                           	opt stack 0
  2297                           
  2298                           ; 6 bytes @ 0x20
  2299  000120                     	ds	6
  2300  000126                     arp_sendReply@targetMAC:
  2301                           	opt stack 0
  2302                           
  2303                           ; 6 bytes @ 0x26
  2304  000126                     	ds	6
  2305  00012C                     arp_sendReply@senderIP:
  2306                           	opt stack 0
  2307                           
  2308                           ; 4 bytes @ 0x2C
  2309  00012C                     	ds	4
  2310  000130                     arp_sendReply@targetIP:
  2311                           	opt stack 0
  2312                           
  2313                           ; 4 bytes @ 0x30
  2314  000130                     	ds	4
  2315  000134                     ?_ipv4_sendFrame:
  2316                           	opt stack 0
  2317  000134                     ?_arp_probe:
  2318                           	opt stack 0
  2319  000134                     ?_arp_gratuitous:
  2320                           	opt stack 0
  2321  000134                     arp_sendReply@myIP:
  2322                           	opt stack 0
  2323  000134                     arp_probe@ipTarget:
  2324                           	opt stack 0
  2325  000134                     arp_gratuitous@ip:
  2326                           	opt stack 0
  2327  000134                     ipv4_sendFrame@ipPacket:
  2328                           	opt stack 0
  2329                           
  2330                           ; 66 bytes @ 0x34
  2331  000134                     	ds	4
  2332  000138                     arp_probe@link:
  2333                           	opt stack 0
  2334  000138                     arp_gratuitous@link:
  2335                           	opt stack 0
  2336  000138                     arp_sendReply@reply:
  2337                           	opt stack 0
  2338                           
  2339                           ; 32 bytes @ 0x38
  2340  000138                     	ds	1
  2341  000139                     ??_arp_probe:
  2342  000139                     ??_arp_gratuitous:
  2343                           
  2344                           ; 1 bytes @ 0x39
  2345  000139                     	ds	8
  2346  000141                     arp_probe@index:
  2347                           	opt stack 0
  2348                           
  2349                           ; 1 bytes @ 0x41
  2350  000141                     	ds	1
  2351  000142                     arp_probe@timeStart:
  2352                           	opt stack 0
  2353                           
  2354                           ; 4 bytes @ 0x42
  2355  000142                     	ds	4
  2356  000146                     arp_probe@waitingTime:
  2357                           	opt stack 0
  2358                           
  2359                           ; 4 bytes @ 0x46
  2360  000146                     	ds	4
  2361  00014A                     arp_probe@ipSender:
  2362                           	opt stack 0
  2363                           
  2364                           ; 4 bytes @ 0x4A
  2365  00014A                     	ds	4
  2366  00014E                     arp_probe@err:
  2367                           	opt stack 0
  2368                           
  2369                           ; 3 bytes @ 0x4E
  2370  00014E                     	ds	3
  2371  000151                     ?_arp_background:
  2372                           	opt stack 0
  2373                           
  2374                           ; 3 bytes @ 0x51
  2375  000151                     	ds	3
  2376  000154                     ??_arp_background:
  2377                           
  2378                           ; 1 bytes @ 0x54
  2379  000154                     	ds	2
  2380  000156                     arp_background@link:
  2381                           	opt stack 0
  2382                           
  2383                           ; 1 bytes @ 0x56
  2384  000156                     	ds	1
  2385  000157                     arp_background@errAnnounce:
  2386                           	opt stack 0
  2387                           
  2388                           ; 3 bytes @ 0x57
  2389  000157                     	ds	1
  2390  000158                     arp_handleNewPacket@arp:
  2391                           	opt stack 0
  2392                           
  2393                           ; 32 bytes @ 0x58
  2394  000158                     	ds	2
  2395  00015A                     arp_background@errProbe:
  2396                           	opt stack 0
  2397                           
  2398                           ; 3 bytes @ 0x5A
  2399  00015A                     	ds	28
  2400  000176                     ??_ipv4_sendFrame:
  2401                           
  2402                           ; 1 bytes @ 0x76
  2403  000176                     	ds	2
  2404  000178                     ethernet_rxGetNewFrame@frame:
  2405                           	opt stack 0
  2406                           
  2407                           ; 2 bytes @ 0x78
  2408  000178                     	ds	2
  2409  00017A                     ??_ethernet_rxGetNewFrame:
  2410                           
  2411                           ; 1 bytes @ 0x7A
  2412  00017A                     	ds	8
  2413  000182                     ethernet_rxGetNewFrame@err:
  2414                           	opt stack 0
  2415                           
  2416                           ; 3 bytes @ 0x82
  2417  000182                     	ds	3
  2418  000185                     handleStackBackgroundTasks@stack:
  2419                           	opt stack 0
  2420                           
  2421                           ; 2 bytes @ 0x85
  2422  000185                     	ds	2
  2423  000187                     
  2424                           ; 1 bytes @ 0x87
  2425  000187                     	ds	2
  2426  000189                     handleStackBackgroundTasks@errArp:
  2427                           	opt stack 0
  2428                           
  2429                           ; 3 bytes @ 0x89
  2430  000189                     	ds	3
  2431  00018C                     handleStackBackgroundTasks@intf:
  2432                           	opt stack 0
  2433                           
  2434                           ; 2 bytes @ 0x8C
  2435  00018C                     	ds	2
  2436  00018E                     handleStackBackgroundTasks@errIPv4:
  2437                           	opt stack 0
  2438                           
  2439                           ; 3 bytes @ 0x8E
  2440  00018E                     	ds	3
  2441  000191                     ??_main:
  2442                           
  2443                           ; 1 bytes @ 0x91
  2444  000191                     	ds	3
  2445                           tblptru	equ	0xFF8
  2446                           tblptrh	equ	0xFF7
  2447                           tblptrl	equ	0xFF6
  2448                           tablat	equ	0xFF5
  2449                           postinc0	equ	0xFEE
  2450                           wreg	equ	0xFE8
  2451                           postdec1	equ	0xFE5
  2452                           fsr1l	equ	0xFE1
  2453                           
  2454                           	psect	cstackBANK0
  2455  000060                     __pcstackBANK0:
  2456                           	opt stack 0
  2457  000060                     ?_enc424j600_getNextPacketPointer:
  2458                           	opt stack 0
  2459  000060                     ?_ethernetController_getDeviceName:
  2460                           	opt stack 0
  2461  000060                     ?_etherTypeToString:
  2462                           	opt stack 0
  2463  000060                     ?_ipProtocolToString:
  2464                           	opt stack 0
  2465  000060                     ?___wmul:
  2466                           	opt stack 0
  2467  000060                     ?___lwdiv:
  2468                           	opt stack 0
  2469  000060                     ?_getMillis:
  2470                           	opt stack 0
  2471  000060                     ?_ipv4_getIPSourceAddress:
  2472                           	opt stack 0
  2473  000060                     ?_ipv4_getPreliminaryIPSourceAddress:
  2474                           	opt stack 0
  2475  000060                     ?___lmul:
  2476                           	opt stack 0
  2477  000060                     ?___lldiv:
  2478                           	opt stack 0
  2479  000060                     ?___llmod:
  2480                           	opt stack 0
  2481  000060                     ?_enc424j600_updateReceiveStatusVector:
  2482                           	opt stack 0
  2483  000060                     ?_arp_getEntryFromTable:
  2484                           	opt stack 0
  2485  000060                     entireMemoryEmpty@i:
  2486                           	opt stack 0
  2487  000060                     entireMemoryFull@i:
  2488                           	opt stack 0
  2489  000060                     memory_txFrameClear@index:
  2490                           	opt stack 0
  2491  000060                     hexToChar@val:
  2492                           	opt stack 0
  2493  000060                     enc424j600_writeSPI@data:
  2494                           	opt stack 0
  2495  000060                     enc424j600_readSPI@data:
  2496                           	opt stack 0
  2497  000060                     enc424j600_setNextPacketPointer@ptr:
  2498                           	opt stack 0
  2499  000060                     enc424j600_updateReceiveStatusVector@rsv:
  2500                           	opt stack 0
  2501  000060                     mac_setToBroadcast@mac:
  2502                           	opt stack 0
  2503  000060                     mac_isAllZero@mac:
  2504                           	opt stack 0
  2505  000060                     mac_cmp@a:
  2506                           	opt stack 0
  2507  000060                     mac_setAllZero@mac:
  2508                           	opt stack 0
  2509  000060                     etherTypeToString@ethertype:
  2510                           	opt stack 0
  2511  000060                     ipv4_calculateHeaderChecksum@header:
  2512                           	opt stack 0
  2513  000060                     ipv4_SrcAddrChanged@err:
  2514                           	opt stack 0
  2515  000060                     ipv4_cmp@a:
  2516                           	opt stack 0
  2517  000060                     ipv4_isAllZero@ip:
  2518                           	opt stack 0
  2519  000060                     ipv4_setToAllZero@ip:
  2520                           	opt stack 0
  2521  000060                     ___wmul@multiplier:
  2522                           	opt stack 0
  2523  000060                     ___lwdiv@dividend:
  2524                           	opt stack 0
  2525  000060                     ipv4_setIPSourceAddress@ip:
  2526                           	opt stack 0
  2527  000060                     ___lmul@multiplier:
  2528                           	opt stack 0
  2529  000060                     ___lldiv@dividend:
  2530                           	opt stack 0
  2531  000060                     ___llmod@dividend:
  2532                           	opt stack 0
  2533  000060                     checkForOverlapSwitched@a:
  2534                           	opt stack 0
  2535  000060                     ipv4_writeHeaderIntoBuffer@header:
  2536                           	opt stack 0
  2537                           
  2538                           ; 23 bytes @ 0x0
  2539  000060                     	ds	1
  2540  000061                     ?_hexToString:
  2541                           	opt stack 0
  2542  000061                     hexToString@val:
  2543                           	opt stack 0
  2544                           
  2545                           ; 4 bytes @ 0x1
  2546  000061                     	ds	1
  2547  000062                     ??_enc424j600_writeSPI:
  2548  000062                     ??_enc424j600_readSPI:
  2549  000062                     ??_etherTypeToString:
  2550  000062                     ??_ipv4_calculateHeaderChecksum:
  2551  000062                     ?_ethernetController_getNextPacketPointer:
  2552                           	opt stack 0
  2553  000062                     mac_setToBroadcast@i:
  2554                           	opt stack 0
  2555  000062                     mac_isAllZero@i:
  2556                           	opt stack 0
  2557  000062                     mac_setAllZero@i:
  2558                           	opt stack 0
  2559  000062                     ipProtocolToString@protocol:
  2560                           	opt stack 0
  2561  000062                     ipv4_isAllZero@i:
  2562                           	opt stack 0
  2563  000062                     ipv4_setToAllZero@i:
  2564                           	opt stack 0
  2565  000062                     mac_cmp@b:
  2566                           	opt stack 0
  2567  000062                     ipv4_cmp@b:
  2568                           	opt stack 0
  2569  000062                     ___wmul@multiplicand:
  2570                           	opt stack 0
  2571  000062                     ___lwdiv@divisor:
  2572                           	opt stack 0
  2573  000062                     ethernetController_getDeviceName@string:
  2574                           	opt stack 0
  2575                           
  2576                           ; 11 bytes @ 0x2
  2577  000062                     	ds	2
  2578  000064                     ___lwdiv@counter:
  2579                           	opt stack 0
  2580  000064                     ___wmul@product:
  2581                           	opt stack 0
  2582  000064                     ___lmul@multiplicand:
  2583                           	opt stack 0
  2584  000064                     ___lldiv@divisor:
  2585                           	opt stack 0
  2586  000064                     ___llmod@divisor:
  2587                           	opt stack 0
  2588                           
  2589                           ; 4 bytes @ 0x4
  2590  000064                     	ds	1
  2591  000065                     ??_enc424j600_updateReceiveStatusVector:
  2592  000065                     ??_hexToString:
  2593  000065                     ___lwdiv@quotient:
  2594                           	opt stack 0
  2595                           
  2596                           ; 2 bytes @ 0x5
  2597  000065                     	ds	1
  2598  000066                     mac_cmp@i:
  2599                           	opt stack 0
  2600  000066                     ipv4_cmp@i:
  2601                           	opt stack 0
  2602  000066                     enc424j600_writeSPI@timeoutCounter:
  2603                           	opt stack 0
  2604  000066                     enc424j600_readSPI@timeoutCounter:
  2605                           	opt stack 0
  2606                           
  2607                           ; 4 bytes @ 0x6
  2608  000066                     	ds	1
  2609  000067                     arp_getEntryFromTable@index:
  2610                           	opt stack 0
  2611  000067                     arp_checkForEntry@ip:
  2612                           	opt stack 0
  2613                           
  2614                           ; 4 bytes @ 0x7
  2615  000067                     	ds	1
  2616  000068                     ___llmod@counter:
  2617                           	opt stack 0
  2618  000068                     ___lmul@product:
  2619                           	opt stack 0
  2620  000068                     ___lldiv@quotient:
  2621                           	opt stack 0
  2622                           
  2623                           ; 4 bytes @ 0x8
  2624  000068                     	ds	1
  2625  000069                     hexToString@pointer:
  2626                           	opt stack 0
  2627  000069                     checkForOverlapSwitched@b:
  2628                           	opt stack 0
  2629                           
  2630                           ; 9 bytes @ 0x9
  2631  000069                     	ds	1
  2632  00006A                     enc424j600_writeSingleByte@opcode:
  2633                           	opt stack 0
  2634  00006A                     enc424j600_writeControlRegisterUnbanked@data:
  2635                           	opt stack 0
  2636  00006A                     enc424j600_readControlRegisterUnbanked@data:
  2637                           	opt stack 0
  2638  00006A                     enc424j600_setGPDATAWritePointer@addr:
  2639                           	opt stack 0
  2640  00006A                     enc424j600_setERXDATAReadPointer@addr:
  2641                           	opt stack 0
  2642                           
  2643                           ; 2 bytes @ 0xA
  2644  00006A                     	ds	1
  2645  00006B                     arp_checkForEntry@index:
  2646                           	opt stack 0
  2647                           
  2648                           ; 2 bytes @ 0xB
  2649  00006B                     	ds	1
  2650  00006C                     ?_rand:
  2651                           	opt stack 0
  2652  00006C                     enc424j600_writeControlRegisterUnbanked@addr:
  2653                           	opt stack 0
  2654  00006C                     enc424j600_readControlRegisterUnbanked@addr:
  2655                           	opt stack 0
  2656  00006C                     enc424j600_setGPDATAWritePointer@opcode:
  2657                           	opt stack 0
  2658  00006C                     enc424j600_setERXDATAReadPointer@opcode:
  2659                           	opt stack 0
  2660  00006C                     ___lldiv@counter:
  2661                           	opt stack 0
  2662  00006C                     enc424j600_updateReceiveStatusVector@receiveStatusVector:
  2663                           	opt stack 0
  2664                           
  2665                           ; 5 bytes @ 0xC
  2666  00006C                     	ds	1
  2667  00006D                     ??_arp_checkForEntry:
  2668  00006D                     enc424j600_writeControlRegisterUnbanked@opcode:
  2669                           	opt stack 0
  2670  00006D                     enc424j600_readControlRegisterUnbanked@opcode:
  2671                           	opt stack 0
  2672  00006D                     enc424j600_setGPDATAWritePointer@lowByte:
  2673                           	opt stack 0
  2674  00006D                     enc424j600_setERXDATAReadPointer@lowByte:
  2675                           	opt stack 0
  2676  00006D                     ultoa@buf:
  2677                           	opt stack 0
  2678                           
  2679                           ; 2 bytes @ 0xD
  2680  00006D                     	ds	1
  2681  00006E                     ??_enc424j600_clearInterruptFlag:
  2682  00006E                     ?_enc424j600_getInterruptFlags:
  2683                           	opt stack 0
  2684  00006E                     ?___awmod:
  2685                           	opt stack 0
  2686  00006E                     ?___lwmod:
  2687                           	opt stack 0
  2688  00006E                     ?_ethernetController_softReset:
  2689                           	opt stack 0
  2690  00006E                     ?_ethernetController_checkDeviceId:
  2691                           	opt stack 0
  2692  00006E                     ?_ethernetController_getMacAddress:
  2693                           	opt stack 0
  2694  00006E                     ethernetController_setLEDConfig@conf:
  2695                           	opt stack 0
  2696  00006E                     enc424j600_getPacketCount@lowByte:
  2697                           	opt stack 0
  2698  00006E                     enc424j600_setGPDATAWritePointer@highByte:
  2699                           	opt stack 0
  2700  00006E                     enc424j600_setERXDATAReadPointer@highByte:
  2701                           	opt stack 0
  2702  00006E                     enc424j600_enableAutoMACInsertion@temp:
  2703                           	opt stack 0
  2704  00006E                     enc424j600_readPHYRegister@data:
  2705                           	opt stack 0
  2706  00006E                     enc424j600_setTXLength@len:
  2707                           	opt stack 0
  2708  00006E                     enc424j600_setTXStartAddress@addr:
  2709                           	opt stack 0
  2710  00006E                     enc424j600_setRXBufferStartAddress@addr:
  2711                           	opt stack 0
  2712  00006E                     enc424j600_setRXTailPointer@addr:
  2713                           	opt stack 0
  2714  00006E                     ___awmod@dividend:
  2715                           	opt stack 0
  2716  00006E                     ___lwmod@dividend:
  2717                           	opt stack 0
  2718  00006E                     ipv4_calculateHeaderChecksum@sum:
  2719                           	opt stack 0
  2720                           
  2721                           ; 4 bytes @ 0xE
  2722  00006E                     	ds	1
  2723  00006F                     ??_ethernetController_updateNextPacketPointer:
  2724  00006F                     ?_ethernetController_getEtherTypeField:
  2725                           	opt stack 0
  2726  00006F                     ?_ethernetController_getSourceMACAddress:
  2727                           	opt stack 0
  2728  00006F                     ethernetController_setLEDConfig@LED:
  2729                           	opt stack 0
  2730  00006F                     ethernetController_writeEtherTypeFieldToBuffer@ethtype:
  2731                           	opt stack 0
  2732  00006F                     ethernetController_streamFromRXBuffer@startAddress:
  2733                           	opt stack 0
  2734  00006F                     ultoa@val:
  2735                           	opt stack 0
  2736  00006F                     ethernetController_writeDestinationMACAddress@addr:
  2737                           	opt stack 0
  2738  00006F                     ethernetController_streamToTransmitBuffer@field:
  2739                           	opt stack 0
  2740  00006F                     ethernetController_getSourceMACAddress@field:
  2741                           	opt stack 0
  2742  00006F                     ethernetController_getEtherTypeField@field:
  2743                           	opt stack 0
  2744                           
  2745                           ; 9 bytes @ 0xF
  2746  00006F                     	ds	1
  2747  000070                     ??_enc424j600_getInterruptFlags:
  2748  000070                     ??_enc424j600_readPHYRegister:
  2749  000070                     ethernetController_setLEDConfig@data:
  2750                           	opt stack 0
  2751  000070                     enc424j600_setTXLength@lowByte:
  2752                           	opt stack 0
  2753  000070                     enc424j600_setTXStartAddress@lowByte:
  2754                           	opt stack 0
  2755  000070                     enc424j600_setRXBufferStartAddress@lowByte:
  2756                           	opt stack 0
  2757  000070                     enc424j600_setRXTailPointer@lowByte:
  2758                           	opt stack 0
  2759  000070                     enc424j600_clearInterruptFlag@flag:
  2760                           	opt stack 0
  2761  000070                     ___awmod@divisor:
  2762                           	opt stack 0
  2763  000070                     ___lwmod@divisor:
  2764                           	opt stack 0
  2765                           
  2766                           ; 2 bytes @ 0x10
  2767  000070                     	ds	1
  2768  000071                     ??_ethernetController_softReset:
  2769  000071                     ?_ethernetController_getRSV:
  2770                           	opt stack 0
  2771  000071                     ethernetController_checkDeviceId@data:
  2772                           	opt stack 0
  2773  000071                     ethernetController_streamFromRXBuffer@startEnd:
  2774                           	opt stack 0
  2775  000071                     enc424j600_setTXLength@highByte:
  2776                           	opt stack 0
  2777  000071                     enc424j600_setTXStartAddress@highByte:
  2778                           	opt stack 0
  2779  000071                     enc424j600_setRXBufferStartAddress@highByte:
  2780                           	opt stack 0
  2781  000071                     enc424j600_setRXTailPointer@highByte:
  2782                           	opt stack 0
  2783  000071                     enc424j600_clearInterruptFlag@temp:
  2784                           	opt stack 0
  2785  000071                     ethernetController_getRSV@address:
  2786                           	opt stack 0
  2787  000071                     ethernetController_writeEtherTypeFieldToBuffer@field:
  2788                           	opt stack 0
  2789                           
  2790                           ; 9 bytes @ 0x11
  2791  000071                     	ds	1
  2792  000072                     ?_ethernetController_dropPacket:
  2793                           	opt stack 0
  2794  000072                     ethernetController_softReset@comFailCount:
  2795                           	opt stack 0
  2796  000072                     ethernetController_clearInterruptFlag@flag:
  2797                           	opt stack 0
  2798  000072                     ethernetController_streamFromRXBuffer@opcode:
  2799                           	opt stack 0
  2800  000072                     ___awmod@counter:
  2801                           	opt stack 0
  2802  000072                     ___lwmod@counter:
  2803                           	opt stack 0
  2804  000072                     ethernetController_checkDeviceId@err:
  2805                           	opt stack 0
  2806  000072                     ethernetController_sendPacket@field:
  2807                           	opt stack 0
  2808  000072                     checkForOverlap@a:
  2809                           	opt stack 0
  2810                           
  2811                           ; 9 bytes @ 0x12
  2812  000072                     	ds	1
  2813  000073                     ?_ipAdressToString:
  2814                           	opt stack 0
  2815  000073                     ethernetController_streamFromRXBuffer@temp:
  2816                           	opt stack 0
  2817  000073                     ___awmod@sign:
  2818                           	opt stack 0
  2819  000073                     ethernetController_softReset@dataToSend:
  2820                           	opt stack 0
  2821  000073                     ultoa@base:
  2822                           	opt stack 0
  2823  000073                     ipAdressToString@ip:
  2824                           	opt stack 0
  2825                           
  2826                           ; 4 bytes @ 0x13
  2827  000073                     	ds	1
  2828  000074                     ?_ipv4_parseHeader:
  2829                           	opt stack 0
  2830  000074                     ?_arp_parseFromRXBuffer:
  2831                           	opt stack 0
  2832  000074                     arp_parseFromRXBuffer@frame:
  2833                           	opt stack 0
  2834  000074                     ipv4_parseHeader@field:
  2835                           	opt stack 0
  2836  000074                     ethernetController_getMacAddress@mac:
  2837                           	opt stack 0
  2838                           
  2839                           ; 6 bytes @ 0x14
  2840  000074                     	ds	1
  2841  000075                     arp_checkForEntry@i:
  2842                           	opt stack 0
  2843  000075                     ethernetController_softReset@receivedData:
  2844                           	opt stack 0
  2845  000075                     ethernetController_updateNextPacketPointer@nextPktPointer:
  2846                           	opt stack 0
  2847  000075                     ultoa@v:
  2848                           	opt stack 0
  2849  000075                     ethernetController_writeDestinationMACAddress@field:
  2850                           	opt stack 0
  2851                           
  2852                           ; 9 bytes @ 0x15
  2853  000075                     	ds	1
  2854  000076                     ethernetController_getRSV@opcode:
  2855                           	opt stack 0
  2856  000076                     enc424j600_readPHYRegister@addr:
  2857                           	opt stack 0
  2858  000076                     enc424j600_getInterruptFlags@low:
  2859                           	opt stack 0
  2860                           
  2861                           ; 1 bytes @ 0x16
  2862  000076                     	ds	1
  2863  000077                     ??_ipAdressToString:
  2864  000077                     ethernetController_getRSV@i:
  2865                           	opt stack 0
  2866  000077                     ethernetController_updateNextPacketPointer@opcode:
  2867                           	opt stack 0
  2868  000077                     enc424j600_readPHYRegister@PHYaddress:
  2869                           	opt stack 0
  2870  000077                     enc424j600_getInterruptFlags@high:
  2871                           	opt stack 0
  2872  000077                     ipv4_writeHeaderIntoBuffer@ptr:
  2873                           	opt stack 0
  2874  000077                     ethernetController_softReset@err:
  2875                           	opt stack 0
  2876                           
  2877                           ; 3 bytes @ 0x17
  2878  000077                     	ds	1
  2879  000078                     ??_ethernetController_streamToTransmitBuffer:
  2880  000078                     ??_ethernetController_getEtherTypeField:
  2881  000078                     ?_ethernetController_pollInterruptFlags:
  2882                           	opt stack 0
  2883  000078                     ethernetController_getSourceMACAddress@opcode:
  2884                           	opt stack 0
  2885  000078                     ethernetController_updateNextPacketPointer@newPointerL:
  2886                           	opt stack 0
  2887  000078                     enc424j600_readPHYRegister@unusedBits:
  2888                           	opt stack 0
  2889                           
  2890                           ; 1 bytes @ 0x18
  2891  000078                     	ds	1
  2892  000079                     ??_ipv4_writeHeaderIntoBuffer:
  2893  000079                     ethernetController_updateNextPacketPointer@newPointerH:
  2894                           	opt stack 0
  2895  000079                     ultoa@c:
  2896                           	opt stack 0
  2897  000079                     enc424j600_readPHYRegister@timeoutCounter:
  2898                           	opt stack 0
  2899  000079                     ethernetController_getSourceMACAddress@sourceAddress:
  2900                           	opt stack 0
  2901                           
  2902                           ; 6 bytes @ 0x19
  2903  000079                     	ds	1
  2904  00007A                     ??_ethernetController_pollInterruptFlags:
  2905  00007A                     ?_macToString:
  2906                           	opt stack 0
  2907  00007A                     ?_ethernetController_init:
  2908                           	opt stack 0
  2909  00007A                     ethernetController_writeEtherTypeFieldToBuffer@lowByte:
  2910                           	opt stack 0
  2911  00007A                     ltoa@buf:
  2912                           	opt stack 0
  2913  00007A                     srand@x:
  2914                           	opt stack 0
  2915  00007A                     macToString@addr:
  2916                           	opt stack 0
  2917                           
  2918                           ; 6 bytes @ 0x1A
  2919  00007A                     	ds	1
  2920  00007B                     ethernetController_writeEtherTypeFieldToBuffer@highByte:
  2921                           	opt stack 0
  2922  00007B                     ipAdressToString@ones:
  2923                           	opt stack 0
  2924  00007B                     checkForOverlap@b:
  2925                           	opt stack 0
  2926                           
  2927                           ; 9 bytes @ 0x1B
  2928  00007B                     	ds	1
  2929  00007C                     ethernetController_streamToTransmitBuffer@data:
  2930                           	opt stack 0
  2931  00007C                     ethernetController_writeEtherTypeFieldToBuffer@opcode:
  2932                           	opt stack 0
  2933  00007C                     ethernetController_getEtherTypeField@ethertype:
  2934                           	opt stack 0
  2935  00007C                     ltoa@val:
  2936                           	opt stack 0
  2937                           
  2938                           ; 4 bytes @ 0x1C
  2939  00007C                     	ds	1
  2940  00007D                     ethernetController_streamToTransmitBuffer@opcode:
  2941                           	opt stack 0
  2942  00007D                     enc424j600_readPHYRegister@lowByte:
  2943                           	opt stack 0
  2944  00007D                     ethernetController_init@err:
  2945                           	opt stack 0
  2946                           
  2947                           ; 3 bytes @ 0x1D
  2948  00007D                     	ds	1
  2949  00007E                     ethernetController_getEtherTypeField@opcode:
  2950                           	opt stack 0
  2951  00007E                     enc424j600_readPHYRegister@highByte:
  2952                           	opt stack 0
  2953  00007E                     ethernetController_pollInterruptFlags@flags:
  2954                           	opt stack 0
  2955  00007E                     ethernetController_writeDestinationMACAddress@data:
  2956                           	opt stack 0
  2957  00007E                     ipv4_streamToTransmissionBuffer@packet:
  2958                           	opt stack 0
  2959                           
  2960                           ; 66 bytes @ 0x1E
  2961  00007E                     	ds	1
  2962  00007F                     ethernetController_getSourceMACAddress@temp:
  2963                           	opt stack 0
  2964  00007F                     ethernetController_getEtherTypeField@lowByte:
  2965                           	opt stack 0
  2966  00007F                     enc424j600_readPHYRegister@temp:
  2967                           	opt stack 0
  2968  00007F                     ipAdressToString@tens:
  2969                           	opt stack 0
  2970                           
  2971                           ; 4 bytes @ 0x1F
  2972  00007F                     	ds	1
  2973  000080                     ??_macToString:
  2974  000080                     ethernetController_getSourceMACAddress@i:
  2975                           	opt stack 0
  2976  000080                     ethernetController_getEtherTypeField@highByte:
  2977                           	opt stack 0
  2978  000080                     ethernetController_pollInterruptFlags@reg:
  2979                           	opt stack 0
  2980  000080                     ethernetController_updateLinkStatus@state:
  2981                           	opt stack 0
  2982  000080                     ltoa@base:
  2983                           	opt stack 0
  2984                           
  2985                           ; 2 bytes @ 0x20
  2986  000080                     	ds	1
  2987  000081                     macToString@address:
  2988                           	opt stack 0
  2989                           
  2990                           ; 18 bytes @ 0x21
  2991  000081                     	ds	1
  2992  000082                     ethernetController_updateLinkStatus@temp:
  2993                           	opt stack 0
  2994  000082                     ltoa@cp:
  2995                           	opt stack 0
  2996                           
  2997                           ; 2 bytes @ 0x22
  2998  000082                     	ds	1
  2999  000083                     ethernetController_updateLinkStatus@temp16:
  3000                           	opt stack 0
  3001  000083                     ipAdressToString@hundreds:
  3002                           	opt stack 0
  3003                           
  3004                           ; 4 bytes @ 0x23
  3005  000083                     	ds	1
  3006  000084                     ?_intToString:
  3007                           	opt stack 0
  3008  000084                     ?_memory_txFrameRequest:
  3009                           	opt stack 0
  3010  000084                     ethernetController_writeDestinationMACAddress@opcode:
  3011                           	opt stack 0
  3012  000084                     memory_txFrameRequest@length:
  3013                           	opt stack 0
  3014  000084                     intToString@val:
  3015                           	opt stack 0
  3016                           
  3017                           ; 4 bytes @ 0x24
  3018  000084                     	ds	1
  3019  000085                     ethernetController_writeDestinationMACAddress@i_638:
  3020                           	opt stack 0
  3021                           
  3022                           ; 1 bytes @ 0x25
  3023  000085                     	ds	1
  3024  000086                     ethernetController_writeDestinationMACAddress@i:
  3025                           	opt stack 0
  3026                           
  3027                           ; 1 bytes @ 0x26
  3028  000086                     	ds	1
  3029  000087                     ipAdressToString@pointer:
  3030                           	opt stack 0
  3031                           
  3032                           ; 1 bytes @ 0x27
  3033  000087                     	ds	1
  3034  000088                     ipAdressToString@i:
  3035                           	opt stack 0
  3036                           
  3037                           ; 1 bytes @ 0x28
  3038  000088                     	ds	3
  3039  00008B                     ??_ipv4_parseHeader:
  3040                           
  3041                           ; 1 bytes @ 0x2B
  3042  00008B                     	ds	1
  3043  00008C                     ipv4_parseHeader@i:
  3044                           	opt stack 0
  3045                           
  3046                           ; 1 bytes @ 0x2C
  3047  00008C                     	ds	1
  3048  00008D                     ??_memory_txFrameRequest:
  3049  00008D                     ipv4_parseHeader@i_3661:
  3050                           	opt stack 0
  3051                           
  3052                           ; 1 bytes @ 0x2D
  3053  00008D                     	ds	1
  3054  00008E                     ipv4_parseHeader@temp:
  3055                           	opt stack 0
  3056                           
  3057                           ; 1 bytes @ 0x2E
  3058  00008E                     	ds	1
  3059  00008F                     ipv4_parseHeader@ip:
  3060                           	opt stack 0
  3061                           
  3062                           ; 23 bytes @ 0x2F
  3063  00008F                     	ds	4
  3064  000093                     macToString@firstDigit:
  3065                           	opt stack 0
  3066  000093                     _memory_txFrameRequest$1174:
  3067                           	opt stack 0
  3068                           
  3069                           ; 2 bytes @ 0x33
  3070  000093                     	ds	1
  3071  000094                     ??_arp_parseFromRXBuffer:
  3072  000094                     macToString@secondDigit:
  3073                           	opt stack 0
  3074                           
  3075                           ; 1 bytes @ 0x34
  3076  000094                     	ds	1
  3077  000095                     memory_txFrameRequest@fNoOverlapMarker:
  3078                           	opt stack 0
  3079  000095                     macToString@i:
  3080                           	opt stack 0
  3081                           
  3082                           ; 2 bytes @ 0x35
  3083  000095                     	ds	1
  3084  000096                     memory_txFrameRequest@i:
  3085                           	opt stack 0
  3086                           
  3087                           ; 1 bytes @ 0x36
  3088  000096                     	ds	1
  3089  000097                     memory_txFrameRequest@i_1178:
  3090                           	opt stack 0
  3091  000097                     macToString@j:
  3092                           	opt stack 0
  3093  000097                     arp_parseFromRXBuffer@i:
  3094                           	opt stack 0
  3095                           
  3096                           ; 1 bytes @ 0x37
  3097  000097                     	ds	1
  3098  000098                     arp_parseFromRXBuffer@i_3029:
  3099                           	opt stack 0
  3100  000098                     UARTTransmitText@str:
  3101                           	opt stack 0
  3102  000098                     memory_txFrameRequest@field:
  3103                           	opt stack 0
  3104                           
  3105                           ; 9 bytes @ 0x38
  3106  000098                     	ds	1
  3107  000099                     arp_parseFromRXBuffer@i_3030:
  3108                           	opt stack 0
  3109                           
  3110                           ; 1 bytes @ 0x39
  3111  000099                     	ds	1
  3112  00009A                     ?_ipv4_background:
  3113                           	opt stack 0
  3114  00009A                     arp_parseFromRXBuffer@i_3031:
  3115                           	opt stack 0
  3116  00009A                     ipv4_checkHeaderChecksum@header:
  3117                           	opt stack 0
  3118  00009A                     printErrorMessage@err:
  3119                           	opt stack 0
  3120  00009A                     UARTTransmitInt@val:
  3121                           	opt stack 0
  3122  00009A                     arp_setNewEntry@mac:
  3123                           	opt stack 0
  3124  00009A                     printEthernetState@state:
  3125                           	opt stack 0
  3126                           
  3127                           ; 15 bytes @ 0x3A
  3128  00009A                     	ds	1
  3129  00009B                     arp_parseFromRXBuffer@offset:
  3130                           	opt stack 0
  3131                           
  3132                           ; 2 bytes @ 0x3B
  3133  00009B                     	ds	1
  3134  00009C                     ??_ipv4_checkHeaderChecksum:
  3135                           
  3136                           ; 1 bytes @ 0x3C
  3137  00009C                     	ds	1
  3138  00009D                     ??_ipv4_background:
  3139  00009D                     ??_printErrorMessage:
  3140  00009D                     arp_parseFromRXBuffer@arp:
  3141                           	opt stack 0
  3142                           
  3143                           ; 32 bytes @ 0x3D
  3144  00009D                     	ds	1
  3145  00009E                     ipv4_checkHeaderChecksum@testHeader:
  3146                           	opt stack 0
  3147                           
  3148                           ; 23 bytes @ 0x3E
  3149  00009E                     	ds	1
  3150  00009F                     ipv4_background@err:
  3151                           	opt stack 0
  3152                           
  3153                           ; 3 bytes @ 0x3F
  3154  00009F                     	ds	1
  3155  0000A0                     arp_setNewEntry@ip:
  3156                           	opt stack 0
  3157                           
  3158                           ; 4 bytes @ 0x40
  3159  0000A0                     	ds	1
  3160  0000A1                     memory_txFrameRequest@freeIndex:
  3161                           	opt stack 0
  3162                           
  3163                           ; 1 bytes @ 0x41
  3164  0000A1                     	ds	1
  3165  0000A2                     ethernet_txFrameRequest@frame:
  3166                           	opt stack 0
  3167                           
  3168                           ; 2 bytes @ 0x42
  3169  0000A2                     	ds	2
  3170  0000A4                     ethernet_txFrameRequest@err:
  3171                           	opt stack 0
  3172  0000A4                     arp_setNewEntry@timestamp:
  3173                           	opt stack 0
  3174                           
  3175                           ; 4 bytes @ 0x44
  3176  0000A4                     	ds	3
  3177  0000A7                     ipv4_txFrameRequest@packet:
  3178                           	opt stack 0
  3179  0000A7                     arp_send@arp:
  3180                           	opt stack 0
  3181                           
  3182                           ; 32 bytes @ 0x47
  3183  0000A7                     	ds	1
  3184  0000A8                     
  3185                           ; 1 bytes @ 0x48
  3186  0000A8                     	ds	1
  3187  0000A9                     ??_ipv4_txFrameRequest:
  3188                           
  3189                           ; 1 bytes @ 0x49
  3190  0000A9                     	ds	3
  3191  0000AC                     arp_setNewEntry@maxSeconds:
  3192                           	opt stack 0
  3193                           
  3194                           ; 4 bytes @ 0x4C
  3195  0000AC                     	ds	4
  3196  0000B0                     arp_setNewEntry@oldestIndex:
  3197                           	opt stack 0
  3198                           
  3199                           ; 1 bytes @ 0x50
  3200  0000B0                     	ds	1
  3201  0000B1                     arp_setNewEntry@i:
  3202                           	opt stack 0
  3203                           
  3204                           ; 1 bytes @ 0x51
  3205  0000B1                     	ds	1
  3206  0000B2                     arp_init@mac:
  3207                           	opt stack 0
  3208                           
  3209                           ; 6 bytes @ 0x52
  3210  0000B2                     	ds	3
  3211  0000B5                     ipv4_handleNewPacket@frame:
  3212                           	opt stack 0
  3213                           
  3214                           ; 2 bytes @ 0x55
  3215  0000B5                     	ds	2
  3216  0000B7                     ??_ipv4_handleNewPacket:
  3217                           
  3218                           ; 1 bytes @ 0x57
  3219  0000B7                     	ds	1
  3220  0000B8                     arp_init@ip:
  3221                           	opt stack 0
  3222                           
  3223                           ; 4 bytes @ 0x58
  3224  0000B8                     	ds	1
  3225  0000B9                     ipv4_handleNewPacket@headerField:
  3226                           	opt stack 0
  3227                           
  3228                           ; 9 bytes @ 0x59
  3229  0000B9                     	ds	3
  3230  0000BC                     arp_init@i:
  3231                           	opt stack 0
  3232                           
  3233                           ; 1 bytes @ 0x5C
  3234  0000BC                     	ds	1
  3235  0000BD                     
  3236                           ; 1 bytes @ 0x5D
  3237  0000BD                     	ds	3
  3238  0000C0                     ipv4_streamToTransmissionBuffer@ethernetPacketLength:
  3239                           	opt stack 0
  3240                           
  3241                           ; 2 bytes @ 0x60
  3242  0000C0                     	ds	2
  3243  0000C2                     ipv4_streamToTransmissionBuffer@data:
  3244                           	opt stack 0
  3245  0000C2                     ipv4_handleNewPacket@ip:
  3246                           	opt stack 0
  3247                           
  3248                           ; 23 bytes @ 0x62
  3249  0000C2                     	ds	5
  3250  0000C7                     arp_send@destination:
  3251                           	opt stack 0
  3252                           
  3253                           ; 6 bytes @ 0x67
  3254  0000C7                     	ds	6
  3255  0000CD                     arp_send@i:
  3256                           	opt stack 0
  3257                           
  3258                           ; 1 bytes @ 0x6D
  3259  0000CD                     	ds	1
  3260  0000CE                     arp_send@i_3104:
  3261                           	opt stack 0
  3262                           
  3263                           ; 1 bytes @ 0x6E
  3264  0000CE                     	ds	1
  3265  0000CF                     arp_send@i_3105:
  3266                           	opt stack 0
  3267                           
  3268                           ; 1 bytes @ 0x6F
  3269  0000CF                     	ds	1
  3270  0000D0                     arp_send@i_3106:
  3271                           	opt stack 0
  3272                           
  3273                           ; 1 bytes @ 0x70
  3274  0000D0                     	ds	1
  3275  0000D1                     arp_send@ethFrame:
  3276                           	opt stack 0
  3277                           
  3278                           ; 34 bytes @ 0x71
  3279  0000D1                     	ds	34
  3280  0000F3                     arp_send@field:
  3281                           	opt stack 0
  3282                           
  3283                           ; 9 bytes @ 0x93
  3284  0000F3                     	ds	9
  3285  0000FC                     arp_gratuitous@index:
  3286                           	opt stack 0
  3287  0000FC                     ipv4_sendFrame@index:
  3288                           	opt stack 0
  3289  0000FC                     arp_handleNewPacket@frame:
  3290                           	opt stack 0
  3291                           
  3292                           ; 2 bytes @ 0x9C
  3293  0000FC                     	ds	1
  3294  0000FD                     arp_gratuitous@err:
  3295                           	opt stack 0
  3296  0000FD                     ipv4_sendFrame@err:
  3297                           	opt stack 0
  3298                           
  3299                           ; 3 bytes @ 0x9D
  3300  0000FD                     	ds	1
  3301  0000FE                     
  3302                           ; 1 bytes @ 0x9E
  3303  0000FE                     	ds	2
  3304                           tblptru	equ	0xFF8
  3305                           tblptrh	equ	0xFF7
  3306                           tblptrl	equ	0xFF6
  3307                           tablat	equ	0xFF5
  3308                           postinc0	equ	0xFEE
  3309                           wreg	equ	0xFE8
  3310                           postdec1	equ	0xFE5
  3311                           fsr1l	equ	0xFE1
  3312                           
  3313                           	psect	cstackCOMRAM
  3314  000001                     __pcstackCOMRAM:
  3315                           	opt stack 0
  3316  000001                     ?i2___lwdiv:
  3317                           	opt stack 0
  3318  000001                     buttonHandler@state:
  3319                           	opt stack 0
  3320  000001                     i2___lwdiv@dividend:
  3321                           	opt stack 0
  3322                           
  3323                           ; 2 bytes @ 0x0
  3324  000001                     	ds	2
  3325  000003                     i2___lwdiv@divisor:
  3326                           	opt stack 0
  3327  000003                     buttonHandler@resetValue:
  3328                           	opt stack 0
  3329                           
  3330                           ; 4 bytes @ 0x2
  3331  000003                     	ds	2
  3332  000005                     i2___lwdiv@quotient:
  3333                           	opt stack 0
  3334                           
  3335                           ; 2 bytes @ 0x4
  3336  000005                     	ds	2
  3337  000007                     i2___lwdiv@counter:
  3338                           	opt stack 0
  3339  000007                     buttonHandler@debounceValue:
  3340                           	opt stack 0
  3341                           
  3342                           ; 4 bytes @ 0x6
  3343  000007                     	ds	1
  3344  000008                     parseNumber@numberToDisplay:
  3345                           	opt stack 0
  3346                           
  3347                           ; 2 bytes @ 0x7
  3348  000008                     	ds	2
  3349  00000A                     parseNumber@digit:
  3350                           	opt stack 0
  3351                           
  3352                           ; 1 bytes @ 0x9
  3353  00000A                     	ds	1
  3354  00000B                     ??_parseNumber:
  3355                           
  3356                           ; 1 bytes @ 0xA
  3357  00000B                     	ds	1
  3358  00000C                     parseNumber@ones:
  3359                           	opt stack 0
  3360                           
  3361                           ; 1 bytes @ 0xB
  3362  00000C                     	ds	1
  3363  00000D                     parseNumber@tens:
  3364                           	opt stack 0
  3365                           
  3366                           ; 1 bytes @ 0xC
  3367  00000D                     	ds	1
  3368  00000E                     parseNumber@hundreds:
  3369                           	opt stack 0
  3370                           
  3371                           ; 1 bytes @ 0xD
  3372  00000E                     	ds	1
  3373  00000F                     sevenSegmentUpdate@numberToDisplay:
  3374                           	opt stack 0
  3375                           
  3376                           ; 2 bytes @ 0xE
  3377  00000F                     	ds	2
  3378  000011                     ??_sevenSegmentUpdate:
  3379                           
  3380                           ; 1 bytes @ 0x10
  3381  000011                     	ds	2
  3382  000013                     _sevenSegmentUpdate$2495:
  3383                           	opt stack 0
  3384                           
  3385                           ; 2 bytes @ 0x12
  3386  000013                     	ds	2
  3387  000015                     sevenSegmentUpdate@i:
  3388                           	opt stack 0
  3389                           
  3390                           ; 1 bytes @ 0x14
  3391  000015                     	ds	1
  3392  000016                     ??_ISR:
  3393                           
  3394                           ; 1 bytes @ 0x15
  3395  000016                     	ds	19
  3396                           tblptru	equ	0xFF8
  3397                           tblptrh	equ	0xFF7
  3398                           tblptrl	equ	0xFF6
  3399                           tablat	equ	0xFF5
  3400                           postinc0	equ	0xFEE
  3401                           wreg	equ	0xFE8
  3402                           postdec1	equ	0xFE5
  3403                           fsr1l	equ	0xFE1
  3404                           
  3405 ;;
  3406 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  3407 ;;
  3408 ;; *************** function _main *****************
  3409 ;; Defined at:
  3410 ;;		line 33 in file "src/system/main.c"
  3411 ;; Parameters:    Size  Location     Type
  3412 ;;		None
  3413 ;; Auto vars:     Size  Location     Type
  3414 ;;  i               1   38[BANK3 ] unsigned char 
  3415 ;;  headerBuf      32    4[BANK3 ] unsigned char [32]
  3416 ;;  ipDst           4   42[BANK3 ] struct ipv4_address
  3417 ;;  prescaler       4    0[BANK3 ] unsigned long 
  3418 ;;  err             3   39[BANK3 ] struct error
  3419 ;;  oldState        1    0        unsigned char 
  3420 ;; Return value:  Size  Location     Type
  3421 ;;                  1    wreg      void 
  3422 ;; Registers used:
  3423 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3424 ;; Tracked objects:
  3425 ;;		On entry : 0/0
  3426 ;;		On exit  : 0/0
  3427 ;;		Unchanged: 0/0
  3428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3429 ;;      Params:         0       0       0       0       0       0       0       0       0
  3430 ;;      Locals:         0       0       0       0      46       0       0       0       0
  3431 ;;      Temps:          0       0       3       0       0       0       0       0       0
  3432 ;;      Totals:         0       0       3       0      46       0       0       0       0
  3433 ;;Total ram usage:       49 bytes
  3434 ;; Hardware stack levels required when called:   14
  3435 ;; This function calls:
  3436 ;;		_UARTInit
  3437 ;;		_UARTTransmitText
  3438 ;;		___awmod
  3439 ;;		_ethernetController_checkDeviceId
  3440 ;;		_ethernetController_getDeviceName
  3441 ;;		_ethernetController_getMacAddress
  3442 ;;		_ethernetController_init
  3443 ;;		_ethernetController_setLEDConfig
  3444 ;;		_handleStackBackgroundTasks
  3445 ;;		_intToString
  3446 ;;		_ipAdressToString
  3447 ;;		_ipv4_calculateHeaderChecksum
  3448 ;;		_ipv4_getIPSourceAddress
  3449 ;;		_ipv4_streamToTransmissionBuffer
  3450 ;;		_ipv4_txFrameRequest
  3451 ;;		_ipv4_writeHeaderIntoBuffer
  3452 ;;		_macToString
  3453 ;;		_printErrorMessage
  3454 ;;		_printEthernetState
  3455 ;;		_rand
  3456 ;;		_sevenSegmentInit
  3457 ;;		_srand
  3458 ;;		_stack_init
  3459 ;; This function is called by:
  3460 ;;		Startup code after reset
  3461 ;; This function uses a non-reentrant model
  3462 ;;
  3463                           
  3464                           	psect	text0
  3465  000ADA                     __ptext0:
  3466                           	opt stack 0
  3467  000ADA                     _main:
  3468                           	opt stack 17
  3469                           
  3470                           ;main.c: 36: OSCCONbits.SCS = 0b00;
  3471                           
  3472                           ;incstack = 0
  3473  000ADA  0EFC               	movlw	-4
  3474  000ADC  16D3               	andwf	4051,f,c	;volatile
  3475                           
  3476                           ;main.c: 37: OSCCONbits.IRCF = 0b1110;
  3477  000ADE  50D3               	movf	4051,w,c	;volatile
  3478  000AE0  0B8F               	andlw	-113
  3479  000AE2  0960               	iorlw	96
  3480  000AE4  6ED3               	movwf	4051,c	;volatile
  3481                           
  3482                           ;main.c: 38: OSCCON2bits.PLLEN = 0b1;
  3483  000AE6  88D2               	bsf	4050,4,c	;volatile
  3484                           
  3485                           ;main.c: 41: INTCONbits.GIE = 0;
  3486  000AE8  9EF2               	bcf	intcon,7,c	;volatile
  3487                           
  3488                           ;main.c: 42: INTCONbits.TMR0IE = 1;
  3489  000AEA  8AF2               	bsf	intcon,5,c	;volatile
  3490                           
  3491                           ;main.c: 43: INTCON3bits.INT2IE = 1;
  3492  000AEC  88F0               	bsf	intcon3,4,c	;volatile
  3493                           
  3494                           ;main.c: 44: RCIP = 0;
  3495  000AEE  9A9F               	bcf	3999,5,c	;volatile
  3496                           
  3497                           ;main.c: 45: RCIE = 1;
  3498  000AF0  8A9D               	bsf	3997,5,c	;volatile
  3499                           
  3500                           ;main.c: 46: INTCONbits.PEIE = 1;
  3501  000AF2  8CF2               	bsf	intcon,6,c	;volatile
  3502                           
  3503                           ;main.c: 50: T0CONbits.TMR0ON = 1;
  3504  000AF4  8ED5               	bsf	4053,7,c	;volatile
  3505                           
  3506                           ;main.c: 51: T0CONbits.T08BIT = 1;
  3507  000AF6  8CD5               	bsf	4053,6,c	;volatile
  3508                           
  3509                           ;main.c: 52: T0CONbits.T0CS = 0;
  3510  000AF8  9AD5               	bcf	4053,5,c	;volatile
  3511                           
  3512                           ;main.c: 53: T0CONbits.PSA = 0;
  3513  000AFA  96D5               	bcf	4053,3,c	;volatile
  3514                           
  3515                           ;main.c: 54: T0CONbits.T0PS = 0b101;
  3516  000AFC  50D5               	movf	4053,w,c	;volatile
  3517  000AFE  0BF8               	andlw	-8
  3518  000B00  0905               	iorlw	5
  3519  000B02  6ED5               	movwf	4053,c	;volatile
  3520                           
  3521                           ;main.c: 58: T1CONbits.TMR1ON = 1;
  3522  000B04  80CD               	bsf	4045,0,c	;volatile
  3523                           
  3524                           ;main.c: 59: CCP1CONbits.CCP1M = 0b1011;
  3525  000B06  50BD               	movf	4029,w,c	;volatile
  3526  000B08  0BF0               	andlw	-16
  3527  000B0A  090B               	iorlw	11
  3528  000B0C  6EBD               	movwf	4029,c	;volatile
  3529                           
  3530                           ;main.c: 60: CCPR1 = 8000;
  3531  000B0E  0E1F               	movlw	31
  3532  000B10  6EBF               	movwf	4031,c	;volatile
  3533  000B12  0E40               	movlw	64
  3534  000B14  6EBE               	movwf	4030,c	;volatile
  3535                           
  3536                           ;main.c: 61: PIE1bits.CCP1IE = 1;
  3537  000B16  849D               	bsf	3997,2,c	;volatile
  3538                           
  3539                           ;main.c: 62: INTCONbits.PEIE = 1;
  3540  000B18  8CF2               	bsf	intcon,6,c	;volatile
  3541                           
  3542                           ;main.c: 64: TRISBbits.RB6 = 0;
  3543  000B1A  9C93               	bcf	3987,6,c	;volatile
  3544                           
  3545                           ;main.c: 67: UARTInit();
  3546  000B1C  EC97  F02B         	call	_UARTInit	;wreg free
  3547                           
  3548                           ;main.c: 68: sevenSegmentInit();
  3549  000B20  EC39  F02B         	call	_sevenSegmentInit	;wreg free
  3550                           
  3551                           ;main.c: 69: _delay((unsigned long)((10)*(32000000UL/4000.0)));
  3552  000B24  0E68               	movlw	104
  3553  000B26  0101               	movlb	1	; () banked
  3554  000B28  6F91               	movwf	??_main& (0+255),b
  3555  000B2A  0EE4               	movlw	228
  3556  000B2C                     u12817:
  3557  000B2C  2EE8               	decfsz	wreg,f,c
  3558  000B2E  D7FE               	bra	u12817
  3559  000B30  2F91               	decfsz	??_main& (0+255),f,b
  3560  000B32  D7FC               	bra	u12817
  3561  000B34  F000               	nop	
  3562                           
  3563                           ;main.c: 70: UARTTransmitText("\x12");
  3564  000B36  0EFC               	movlw	low STR_26
  3565  000B38  0100               	movlb	0	; () banked
  3566  000B3A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3567  000B3C  0E7F               	movlw	high STR_26
  3568  000B3E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3569  000B40  EC09  F027         	call	_UARTTransmitText	;wreg free
  3570                           
  3571                           ;main.c: 71: if (!RCONbits.TO) {
  3572  000B44  B6D0               	btfsc	4048,3,c	;volatile
  3573  000B46  D015               	goto	l644
  3574                           
  3575                           ;main.c: 72: UARTTransmitText("------------------------------------------------\n\r");
  3576  000B48  0E85               	movlw	low STR_27
  3577  000B4A  0100               	movlb	0	; () banked
  3578  000B4C  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3579  000B4E  0E7A               	movlw	high STR_27
  3580  000B50  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3581  000B52  EC09  F027         	call	_UARTTransmitText	;wreg free
  3582                           
  3583                           ;main.c: 73: UARTTransmitText("\a*** CRITICAL ERROR: WATCHDOG CAUSED RESET ***\n\r");
  3584  000B56  0EB8               	movlw	low STR_28
  3585  000B58  0100               	movlb	0	; () banked
  3586  000B5A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3587  000B5C  0E7A               	movlw	high STR_28
  3588  000B5E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3589  000B60  EC09  F027         	call	_UARTTransmitText	;wreg free
  3590                           
  3591                           ;main.c: 74: UARTTransmitText("------------------------------------------------\n\r");
  3592  000B64  0E85               	movlw	low STR_27
  3593  000B66  0100               	movlb	0	; () banked
  3594  000B68  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3595  000B6A  0E7A               	movlw	high STR_27
  3596  000B6C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3597  000B6E  EC09  F027         	call	_UARTTransmitText	;wreg free
  3598  000B72                     l644:
  3599                           
  3600                           ;main.c: 75: }
  3601                           ;main.c: 76: UARTTransmitText("FIRMWARE BUILD DATE IS ");
  3602  000B72  0EF2               	movlw	low STR_30
  3603  000B74  0100               	movlb	0	; () banked
  3604  000B76  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3605  000B78  0E7D               	movlw	high STR_30
  3606  000B7A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3607  000B7C  EC09  F027         	call	_UARTTransmitText	;wreg free
  3608                           
  3609                           ;main.c: 77: UARTTransmitText("Mar 30 2019");
  3610  000B80  0E49               	movlw	low STR_31
  3611  000B82  0100               	movlb	0	; () banked
  3612  000B84  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3613  000B86  0E7F               	movlw	high STR_31
  3614  000B88  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3615  000B8A  EC09  F027         	call	_UARTTransmitText	;wreg free
  3616                           
  3617                           ;main.c: 78: UARTTransmitText(" ");
  3618  000B8E  0EEE               	movlw	low (STR_93+1)
  3619  000B90  0100               	movlb	0	; () banked
  3620  000B92  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3621  000B94  0E7F               	movlw	high (STR_93+1)
  3622  000B96  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3623  000B98  EC09  F027         	call	_UARTTransmitText	;wreg free
  3624                           
  3625                           ;main.c: 79: UARTTransmitText("11:44:44");
  3626  000B9C  0E92               	movlw	low STR_33
  3627  000B9E  0100               	movlb	0	; () banked
  3628  000BA0  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3629  000BA2  0E7F               	movlw	high STR_33
  3630  000BA4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3631  000BA6  EC09  F027         	call	_UARTTransmitText	;wreg free
  3632                           
  3633                           ;main.c: 80: UARTTransmitText(".\n\r");
  3634  000BAA  0ECF               	movlw	low (STR_61+1)
  3635  000BAC  0100               	movlb	0	; () banked
  3636  000BAE  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3637  000BB0  0E7F               	movlw	high (STR_61+1)
  3638  000BB2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3639  000BB4  EC09  F027         	call	_UARTTransmitText	;wreg free
  3640                           
  3641                           ;main.c: 81: error_t err;
  3642                           ;main.c: 82: err = ethernetController_init();
  3643  000BB8  ECE7  F021         	call	_ethernetController_init	;wreg free
  3644  000BBC  C07A  F3C9         	movff	?_ethernetController_init,main@err
  3645  000BC0  C07B  F3CA         	movff	?_ethernetController_init+1,main@err+1
  3646  000BC4  C07C  F3CB         	movff	?_ethernetController_init+2,main@err+2
  3647                           
  3648                           ;main.c: 83: if (err.code != (uint16_t)0)
  3649  000BC8  0103               	movlb	3	; () banked
  3650  000BCA  51CA               	movf	(main@err+1)& (0+255),w,b
  3651  000BCC  11CB               	iorwf	(main@err+2)& (0+255),w,b
  3652  000BCE  B4D8               	btfsc	status,2,c
  3653  000BD0  D008               	goto	l645
  3654                           
  3655                           ; BSR set to: 3
  3656                           ;main.c: 84: printErrorMessage(err);
  3657  000BD2  C3C9  F09A         	movff	main@err,printErrorMessage@err
  3658  000BD6  C3CA  F09B         	movff	main@err+1,printErrorMessage@err+1
  3659  000BDA  C3CB  F09C         	movff	main@err+2,printErrorMessage@err+2
  3660  000BDE  EC51  F01B         	call	_printErrorMessage	;wreg free
  3661  000BE2                     l645:
  3662                           
  3663                           ;main.c: 85: err = ethernetController_checkDeviceId();
  3664  000BE2  ECD8  F027         	call	_ethernetController_checkDeviceId	;wreg free
  3665  000BE6  C06E  F3C9         	movff	?_ethernetController_checkDeviceId,main@err
  3666  000BEA  C06F  F3CA         	movff	?_ethernetController_checkDeviceId+1,main@err+1
  3667  000BEE  C070  F3CB         	movff	?_ethernetController_checkDeviceId+2,main@err+2
  3668                           
  3669                           ;main.c: 86: if (err.code == (uint16_t)0) {
  3670  000BF2  0103               	movlb	3	; () banked
  3671  000BF4  51CA               	movf	(main@err+1)& (0+255),w,b
  3672  000BF6  11CB               	iorwf	(main@err+2)& (0+255),w,b
  3673  000BF8  A4D8               	btfss	status,2,c
  3674  000BFA  D00F               	goto	l646
  3675                           
  3676                           ; BSR set to: 3
  3677                           ;main.c: 87: UARTTransmitText(ethernetController_getDeviceName());
  3678  000BFC  ECE6  F02A         	call	_ethernetController_getDeviceName	;wreg free
  3679  000C00  C060  F098         	movff	?_ethernetController_getDeviceName,UARTTransmitText@str
  3680  000C04  C061  F099         	movff	?_ethernetController_getDeviceName+1,UARTTransmitText@str+1
  3681  000C08  EC09  F027         	call	_UARTTransmitText	;wreg free
  3682                           
  3683                           ;main.c: 88: UARTTransmitText(" detected. ");
  3684  000C0C  0E3D               	movlw	low STR_35
  3685  000C0E  0100               	movlb	0	; () banked
  3686  000C10  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3687  000C12  0E7F               	movlw	high STR_35
  3688  000C14  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3689  000C16  EC09  F027         	call	_UARTTransmitText	;wreg free
  3690  000C1A                     l646:
  3691                           
  3692                           ;main.c: 89: }
  3693                           ;main.c: 90: UARTTransmitText("Source MAC address is ");
  3694  000C1A  0E0A               	movlw	low STR_36
  3695  000C1C  0100               	movlb	0	; () banked
  3696  000C1E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3697  000C20  0E7E               	movlw	high STR_36
  3698  000C22  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3699  000C24  EC09  F027         	call	_UARTTransmitText	;wreg free
  3700                           
  3701                           ;main.c: 91: UARTTransmitText(macToString(ethernetController_getMacAddress()));
  3702  000C28  EC05  F025         	call	_ethernetController_getMacAddress	;wreg free
  3703  000C2C  CFE9 FFD9          	movff	fsr0l,fsr2l
  3704  000C30  CFEA FFDA          	movff	fsr0h,fsr2h
  3705  000C34  EE00  F07A         	lfsr	0,macToString@addr
  3706  000C38  0E05               	movlw	5
  3707  000C3A                     u12681:
  3708  000C3A  CFDB FFEB          	movff	plusw2,plusw0
  3709  000C3E  06E8               	decf	wreg,f,c
  3710  000C40  E2FC               	bc	u12681
  3711  000C42  EC8D  F01D         	call	_macToString	;wreg free
  3712  000C46  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  3713  000C4A  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  3714  000C4E  EC09  F027         	call	_UARTTransmitText	;wreg free
  3715                           
  3716                           ;main.c: 92: UARTTransmitText(".\n\r");
  3717  000C52  0ECF               	movlw	low (STR_61+1)
  3718  000C54  0100               	movlb	0	; () banked
  3719  000C56  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3720  000C58  0E7F               	movlw	high (STR_61+1)
  3721  000C5A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3722  000C5C  EC09  F027         	call	_UARTTransmitText	;wreg free
  3723                           
  3724                           ;main.c: 93: UARTTransmitText("------------------------------------------------\n\r");
  3725  000C60  0E85               	movlw	low STR_27
  3726  000C62  0100               	movlb	0	; () banked
  3727  000C64  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3728  000C66  0E7A               	movlw	high STR_27
  3729  000C68  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3730  000C6A  EC09  F027         	call	_UARTTransmitText	;wreg free
  3731                           
  3732                           ;main.c: 95: stack_init();
  3733  000C6E  ECC1  F02B         	call	_stack_init	;wreg free
  3734                           
  3735                           ;main.c: 97: ethernetController_setLEDConfig(LEDA, LED_ON);
  3736  000C72  0E00               	movlw	0
  3737  000C74  0100               	movlb	0	; () banked
  3738  000C76  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  3739  000C78  0E00               	movlw	0
  3740  000C7A  EC86  F022         	call	_ethernetController_setLEDConfig
  3741                           
  3742                           ;main.c: 98: ethernetController_setLEDConfig(LEDA, LED_ON);
  3743  000C7E  0E00               	movlw	0
  3744  000C80  0100               	movlb	0	; () banked
  3745  000C82  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  3746  000C84  0E00               	movlw	0
  3747  000C86  EC86  F022         	call	_ethernetController_setLEDConfig
  3748                           
  3749                           ;main.c: 99: _delay((unsigned long)((500)*(32000000UL/4000.0)));
  3750  000C8A  0E15               	movlw	21
  3751  000C8C  0101               	movlb	1	; () banked
  3752  000C8E  6F92               	movwf	(??_main+1)& (0+255),b
  3753  000C90  0E4B               	movlw	75
  3754  000C92  6F91               	movwf	??_main& (0+255),b
  3755  000C94  0EBE               	movlw	190
  3756  000C96                     u12827:
  3757  000C96  2EE8               	decfsz	wreg,f,c
  3758  000C98  D7FE               	bra	u12827
  3759  000C9A  2F91               	decfsz	??_main& (0+255),f,b
  3760  000C9C  D7FC               	bra	u12827
  3761  000C9E  2F92               	decfsz	(??_main+1)& (0+255),f,b
  3762  000CA0  D7FA               	bra	u12827
  3763  000CA2  F000               	nop	
  3764                           
  3765                           ;main.c: 101: ethernetController_setLEDConfig(LEDA, LED_OFF);
  3766  000CA4  0E01               	movlw	1
  3767  000CA6  0100               	movlb	0	; () banked
  3768  000CA8  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  3769  000CAA  0E00               	movlw	0
  3770  000CAC  EC86  F022         	call	_ethernetController_setLEDConfig
  3771                           
  3772                           ;main.c: 102: ethernetController_setLEDConfig(LEDA, LED_OFF);
  3773  000CB0  0E01               	movlw	1
  3774  000CB2  0100               	movlb	0	; () banked
  3775  000CB4  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  3776  000CB6  0E00               	movlw	0
  3777  000CB8  EC86  F022         	call	_ethernetController_setLEDConfig
  3778                           
  3779                           ;main.c: 105: uint32_t prescaler = 0;
  3780  000CBC  0E00               	movlw	0
  3781  000CBE  0103               	movlb	3	; () banked
  3782  000CC0  6FA2               	movwf	main@prescaler& (0+255),b
  3783  000CC2  0E00               	movlw	0
  3784  000CC4  6FA3               	movwf	(main@prescaler+1)& (0+255),b
  3785  000CC6  0E00               	movlw	0
  3786  000CC8  6FA4               	movwf	(main@prescaler+2)& (0+255),b
  3787  000CCA  0E00               	movlw	0
  3788  000CCC  6FA5               	movwf	(main@prescaler+3)& (0+255),b
  3789                           
  3790                           ; BSR set to: 3
  3791                           ;main.c: 107: ANSELB &= ~(1<<5);
  3792  000CCE  010F               	movlb	15	; () banked
  3793  000CD0  9B5C               	bcf	92,5,b	;volatile
  3794                           
  3795                           ; BSR set to: 15
  3796                           ;main.c: 108: TRISB |= (1<<5);
  3797  000CD2  8A93               	bsf	3987,5,c	;volatile
  3798                           
  3799                           ; BSR set to: 15
  3800                           ;main.c: 110: uint8_t oldState;
  3801                           ;main.c: 112: stack.source.address[0] = 192;
  3802  000CD4  0EC0               	movlw	192
  3803  000CD6  0102               	movlb	2	; () banked
  3804  000CD8  6FDA               	movwf	(_stack+131)& (0+255),b
  3805                           
  3806                           ; BSR set to: 2
  3807                           ;main.c: 113: stack.source.address[1] = 168;
  3808  000CDA  0EA8               	movlw	168
  3809  000CDC  6FDB               	movwf	(_stack+132)& (0+255),b
  3810                           
  3811                           ; BSR set to: 2
  3812                           ;main.c: 114: stack.source.address[2] = 0;
  3813  000CDE  0E00               	movlw	0
  3814  000CE0  6FDC               	movwf	(_stack+133)& (0+255),b
  3815                           
  3816                           ; BSR set to: 2
  3817                           ;main.c: 115: stack.source.address[3] = 1;
  3818  000CE2  0E01               	movlw	1
  3819  000CE4  6FDD               	movwf	(_stack+134)& (0+255),b
  3820                           
  3821                           ; BSR set to: 2
  3822                           ;main.c: 117: ipv4_address_t ipDst;
  3823                           ;main.c: 118: ipDst.address[0] = 192;
  3824  000CE6  0EC0               	movlw	192
  3825  000CE8  0103               	movlb	3	; () banked
  3826  000CEA  6FCC               	movwf	main@ipDst& (0+255),b
  3827                           
  3828                           ; BSR set to: 3
  3829                           ;main.c: 119: ipDst.address[1] = 168;
  3830  000CEC  0EA8               	movlw	168
  3831  000CEE  6FCD               	movwf	(main@ipDst+1)& (0+255),b
  3832                           
  3833                           ; BSR set to: 3
  3834                           ;main.c: 120: ipDst.address[2] = 0;
  3835  000CF0  0E00               	movlw	0
  3836  000CF2  6FCE               	movwf	(main@ipDst+2)& (0+255),b
  3837                           
  3838                           ; BSR set to: 3
  3839                           ;main.c: 121: ipDst.address[3] = 10;
  3840  000CF4  0E0A               	movlw	10
  3841  000CF6  6FCF               	movwf	(main@ipDst+3)& (0+255),b
  3842                           
  3843                           ; BSR set to: 3
  3844                           ;main.c: 124: INTCONbits.GIE = 1;
  3845  000CF8  8EF2               	bsf	intcon,7,c	;volatile
  3846                           
  3847                           ; BSR set to: 3
  3848                           ;main.c: 125: INTCONbits.PEIE = 1;
  3849  000CFA  8CF2               	bsf	intcon,6,c	;volatile
  3850                           
  3851                           ; BSR set to: 3
  3852                           ;main.c: 127: srand(ethernetController_getMacAddress().address[5]);
  3853  000CFC  EC05  F025         	call	_ethernetController_getMacAddress	;wreg free
  3854  000D00  0E05               	movlw	5
  3855  000D02  26E9               	addwf	fsr0l,f,c
  3856  000D04  0E00               	movlw	0
  3857  000D06  22EA               	addwfc	fsr0h,f,c
  3858  000D08  50EF               	movf	indf0,w,c
  3859  000D0A  0101               	movlb	1	; () banked
  3860  000D0C  6F91               	movwf	??_main& (0+255),b
  3861  000D0E  5191               	movf	??_main& (0+255),w,b
  3862  000D10  0100               	movlb	0	; () banked
  3863  000D12  6F7A               	movwf	srand@x& (0+255),b
  3864  000D14  6B7B               	clrf	(srand@x+1)& (0+255),b
  3865  000D16  EC9F  F02B         	call	_srand	;wreg free
  3866                           
  3867                           ;main.c: 128: UARTTransmitText(intToString(rand() % 100));
  3868  000D1A  ECDE  F026         	call	_rand	;wreg free
  3869  000D1E  C06C  F06E         	movff	?_rand,___awmod@dividend
  3870  000D22  C06D  F06F         	movff	?_rand+1,___awmod@dividend+1
  3871  000D26  0E00               	movlw	0
  3872  000D28  0100               	movlb	0	; () banked
  3873  000D2A  6F71               	movwf	(___awmod@divisor+1)& (0+255),b
  3874  000D2C  0E64               	movlw	100
  3875  000D2E  6F70               	movwf	___awmod@divisor& (0+255),b
  3876  000D30  EC3F  F025         	call	___awmod	;wreg free
  3877  000D34  0100               	movlb	0	; () banked
  3878  000D36  C06E  F084         	movff	?___awmod,intToString@val
  3879  000D3A  C06F  F085         	movff	?___awmod+1,intToString@val+1
  3880  000D3E  0E00               	movlw	0
  3881  000D40  BF85               	btfsc	(intToString@val+1)& (0+255),7,b
  3882  000D42  0EFF               	movlw	-1
  3883  000D44  6F86               	movwf	(intToString@val+2)& (0+255),b
  3884  000D46  6F87               	movwf	(intToString@val+3)& (0+255),b
  3885  000D48  EC97  F029         	call	_intToString	;wreg free
  3886  000D4C  C084  F098         	movff	?_intToString,UARTTransmitText@str
  3887  000D50  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  3888  000D54  EC09  F027         	call	_UARTTransmitText	;wreg free
  3889  000D58                     l647:
  3890  000D58  0004               	clrwdt		;# 
  3891                           
  3892                           ;main.c: 133: handleStackBackgroundTasks(&stack);
  3893  000D5A  0E57               	movlw	low _stack
  3894  000D5C  0101               	movlb	1	; () banked
  3895  000D5E  6F85               	movwf	handleStackBackgroundTasks@stack& (0+255),b
  3896  000D60  0E02               	movlw	high _stack
  3897  000D62  6F86               	movwf	(handleStackBackgroundTasks@stack+1)& (0+255),b
  3898  000D64  ECB3  F011         	call	_handleStackBackgroundTasks	;wreg free
  3899                           
  3900                           ;main.c: 135: printEthernetState(stack.ethernet);
  3901  000D68  EE22  F05B         	lfsr	2,_stack+4
  3902  000D6C  EE00  F09A         	lfsr	0,printEthernetState@state
  3903  000D70  0E0E               	movlw	14
  3904  000D72                     u12691:
  3905  000D72  CFDB FFEB          	movff	plusw2,plusw0
  3906  000D76  06E8               	decf	wreg,f,c
  3907  000D78  E2FC               	bc	u12691
  3908  000D7A  EC46  F021         	call	_printEthernetState	;wreg free
  3909                           
  3910                           ;main.c: 137: numberToDisplay = (stack.ethernet.link == NO_LINK) ? 1000 : stack.source.a
      +                          ddress[3];
  3911  000D7E  0102               	movlb	2	; () banked
  3912  000D80  515B               	movf	(_stack+4)& (0+255),w,b
  3913  000D82  B4D8               	btfsc	status,2,c
  3914  000D84  D005               	goto	l649
  3915                           
  3916                           ; BSR set to: 2
  3917  000D86  C2DD  F3C6         	movff	_stack+134,_main$2404
  3918  000D8A  0103               	movlb	3	; () banked
  3919  000D8C  6BC7               	clrf	(_main$2404+1)& (0+255),b
  3920  000D8E  D005               	goto	l651
  3921  000D90                     l649:
  3922                           
  3923                           ; BSR set to: 3
  3924  000D90  0E03               	movlw	3
  3925  000D92  0103               	movlb	3	; () banked
  3926  000D94  6FC7               	movwf	(_main$2404+1)& (0+255),b
  3927  000D96  0EE8               	movlw	232
  3928  000D98  6FC6               	movwf	_main$2404& (0+255),b
  3929  000D9A                     l651:
  3930                           
  3931                           ; BSR set to: 3
  3932                           
  3933                           ; BSR set to: 3
  3934  000D9A  C3C6  F031         	movff	_main$2404,_numberToDisplay	;volatile
  3935  000D9E  C3C7  F032         	movff	_main$2404+1,_numberToDisplay+1	;volatile
  3936  000DA2  0E00               	movlw	0
  3937  000DA4  BE32               	btfsc	_numberToDisplay+1,7,c	;volatile
  3938  000DA6  0EFF               	movlw	-1
  3939  000DA8  6E33               	movwf	_numberToDisplay+2,c	;volatile
  3940  000DAA  6E34               	movwf	_numberToDisplay+3,c	;volatile
  3941                           
  3942                           ; BSR set to: 3
  3943                           ;main.c: 139: if (buttonState) {
  3944  000DAC  0101               	movlb	1	; () banked
  3945  000DAE  51CA               	movf	_buttonState& (0+255),w,b	;volatile
  3946  000DB0  B4D8               	btfsc	status,2,c
  3947  000DB2  D7D2               	goto	l647
  3948                           
  3949                           ; BSR set to: 1
  3950                           ;main.c: 140: buttonState = 0;
  3951  000DB4  0E00               	movlw	0
  3952  000DB6  6FCA               	movwf	_buttonState& (0+255),b	;volatile
  3953                           
  3954                           ; BSR set to: 1
  3955                           ;main.c: 142: UARTTransmitText("My Address is ");
  3956  000DB8  0E07               	movlw	low STR_39
  3957  000DBA  0100               	movlb	0	; () banked
  3958  000DBC  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3959  000DBE  0E7F               	movlw	high STR_39
  3960  000DC0  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3961  000DC2  EC09  F027         	call	_UARTTransmitText	;wreg free
  3962                           
  3963                           ;main.c: 143: UARTTransmitText(ipAdressToString(ipv4_getIPSourceAddress()));
  3964  000DC6  EC73  F02B         	call	_ipv4_getIPSourceAddress	;wreg free
  3965  000DCA  C060  F073         	movff	?_ipv4_getIPSourceAddress,ipAdressToString@ip
  3966  000DCE  C061  F074         	movff	?_ipv4_getIPSourceAddress+1,ipAdressToString@ip+1
  3967  000DD2  C062  F075         	movff	?_ipv4_getIPSourceAddress+2,ipAdressToString@ip+2
  3968  000DD6  C063  F076         	movff	?_ipv4_getIPSourceAddress+3,ipAdressToString@ip+3
  3969  000DDA  ECC9  F013         	call	_ipAdressToString	;wreg free
  3970  000DDE  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  3971  000DE2  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  3972  000DE6  EC09  F027         	call	_UARTTransmitText	;wreg free
  3973                           
  3974                           ;main.c: 144: UARTTransmitText("\n\r");
  3975  000DEA  0ED4               	movlw	low (STR_23+35)
  3976  000DEC  0100               	movlb	0	; () banked
  3977  000DEE  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3978  000DF0  0E7B               	movlw	high (STR_23+35)
  3979  000DF2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3980  000DF4  EC09  F027         	call	_UARTTransmitText	;wreg free
  3981                           
  3982                           ;main.c: 147: if (stack.ethernet.link == LINK_ESTABLISHED) {
  3983  000DF8  0102               	movlb	2	; () banked
  3984  000DFA  055B               	decf	(_stack+4)& (0+255),w,b
  3985  000DFC  A4D8               	btfss	status,2,c
  3986  000DFE  D7AC               	goto	l647
  3987                           
  3988                           ; BSR set to: 2
  3989                           ;main.c: 150: uint8_t headerBuf[32];
  3990                           ;main.c: 151: stack.pendingPacketToSend.ipv4Header.destination = ipDst;
  3991  000E00  C3CC  F2AB         	movff	main@ipDst,_stack+84
  3992  000E04  C3CD  F2AC         	movff	main@ipDst+1,_stack+85
  3993  000E08  C3CE  F2AD         	movff	main@ipDst+2,_stack+86
  3994  000E0C  C3CF  F2AE         	movff	main@ipDst+3,_stack+87
  3995                           
  3996                           ; BSR set to: 2
  3997                           ;main.c: 152: stack.pendingPacketToSend.ipv4Header.source = ipv4_getIPSourceAddress();
  3998  000E10  EC73  F02B         	call	_ipv4_getIPSourceAddress	;wreg free
  3999  000E14  C060  F2A7         	movff	?_ipv4_getIPSourceAddress,_stack+80
  4000  000E18  C061  F2A8         	movff	?_ipv4_getIPSourceAddress+1,_stack+81
  4001  000E1C  C062  F2A9         	movff	?_ipv4_getIPSourceAddress+2,_stack+82
  4002  000E20  C063  F2AA         	movff	?_ipv4_getIPSourceAddress+3,_stack+83
  4003                           
  4004                           ;main.c: 153: stack.pendingPacketToSend.ipv4Header.totalLength = 120;
  4005  000E24  0E00               	movlw	0
  4006  000E26  0102               	movlb	2	; () banked
  4007  000E28  6F9D               	movwf	(_stack+70)& (0+255),b
  4008  000E2A  0E78               	movlw	120
  4009  000E2C  6F9C               	movwf	(_stack+69)& (0+255),b
  4010                           
  4011                           ; BSR set to: 2
  4012                           ;main.c: 154: stack.pendingPacketToSend.ipv4Header.timeToLive = 255;
  4013  000E2E  69A3               	setf	(_stack+76)& (0+255),b
  4014                           
  4015                           ; BSR set to: 2
  4016                           ;main.c: 155: stack.pendingPacketToSend.ipv4Header.version = 4;
  4017  000E30  0E04               	movlw	4
  4018  000E32  6F98               	movwf	(_stack+65)& (0+255),b
  4019                           
  4020                           ; BSR set to: 2
  4021                           ;main.c: 156: ipv4_calculateHeaderChecksum(&stack.pendingPacketToSend.ipv4Header);
  4022  000E34  0E98               	movlw	low (_stack+65)
  4023  000E36  0100               	movlb	0	; () banked
  4024  000E38  6F60               	movwf	ipv4_calculateHeaderChecksum@header& (0+255),b
  4025  000E3A  0E02               	movlw	high (_stack+65)
  4026  000E3C  6F61               	movwf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),b
  4027  000E3E  EC44  F00B         	call	_ipv4_calculateHeaderChecksum	;wreg free
  4028                           
  4029                           ;main.c: 157: ipv4_writeHeaderIntoBuffer(stack.pendingPacketToSend.ipv4Header, headerBuf
      +                          );
  4030  000E42  EE22  F098         	lfsr	2,_stack+65
  4031  000E46  EE00  F060         	lfsr	0,ipv4_writeHeaderIntoBuffer@header
  4032  000E4A  0E16               	movlw	22
  4033  000E4C                     u12731:
  4034  000E4C  CFDB FFEB          	movff	plusw2,plusw0
  4035  000E50  06E8               	decf	wreg,f,c
  4036  000E52  E2FC               	bc	u12731
  4037  000E54  0EA6               	movlw	low main@headerBuf
  4038  000E56  0100               	movlb	0	; () banked
  4039  000E58  6F77               	movwf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),b
  4040  000E5A  0E03               	movlw	high main@headerBuf
  4041  000E5C  6F78               	movwf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),b
  4042  000E5E  ECEB  F017         	call	_ipv4_writeHeaderIntoBuffer	;wreg free
  4043                           
  4044                           ;main.c: 159: ipv4_txFrameRequest(&stack.pendingPacketToSend);
  4045  000E62  0E98               	movlw	low (_stack+65)
  4046  000E64  0100               	movlb	0	; () banked
  4047  000E66  6FA7               	movwf	ipv4_txFrameRequest@packet& (0+255),b
  4048  000E68  0E02               	movlw	high (_stack+65)
  4049  000E6A  6FA8               	movwf	(ipv4_txFrameRequest@packet+1)& (0+255),b
  4050  000E6C  ECB6  F01A         	call	_ipv4_txFrameRequest	;wreg free
  4051                           
  4052                           ;main.c: 161: for (uint8_t i = 0; i < stack.pendingPacketToSend.ipv4Header.totalLength; 
      +                          i++) {
  4053  000E70  0E00               	movlw	0
  4054  000E72  0103               	movlb	3	; () banked
  4055  000E74  6FC8               	movwf	main@i& (0+255),b
  4056  000E76  D036               	goto	l654
  4057  000E78                     
  4058                           ;main.c: 162: if (i < stack.pendingPacketToSend.ipv4Header.headerLength * 4) {
  4059                           
  4060                           ; BSR set to: 3
  4061  000E78  0102               	movlb	2	; () banked
  4062  000E7A  5199               	movf	(_stack+66)& (0+255),w,b
  4063  000E7C  0D04               	mullw	4
  4064  000E7E  0103               	movlb	3	; () banked
  4065  000E80  51C8               	movf	main@i& (0+255),w,b
  4066  000E82  0101               	movlb	1	; () banked
  4067  000E84  6F91               	movwf	??_main& (0+255),b
  4068  000E86  6B92               	clrf	(??_main+1)& (0+255),b
  4069  000E88  50F3               	movf	prodl,w,c
  4070  000E8A  5D91               	subwf	??_main& (0+255),w,b
  4071  000E8C  5192               	movf	(??_main+1)& (0+255),w,b
  4072  000E8E  0A80               	xorlw	128
  4073  000E90  6F93               	movwf	(??_main+2)& (0+255),b
  4074  000E92  50F4               	movf	prodh,w,c
  4075  000E94  0A80               	xorlw	128
  4076  000E96  5993               	subwfb	(??_main+2)& (0+255),w,b
  4077  000E98  B0D8               	btfsc	status,0,c
  4078  000E9A  D016               	goto	l656
  4079                           
  4080                           ; BSR set to: 1
  4081                           ;main.c: 163: ipv4_streamToTransmissionBuffer(headerBuf[i], stack.pendingPacketToSend);
  4082  000E9C  EE22  F098         	lfsr	2,_stack+65
  4083  000EA0  EE00  F07E         	lfsr	0,ipv4_streamToTransmissionBuffer@packet
  4084  000EA4  0E41               	movlw	65
  4085  000EA6                     u12751:
  4086  000EA6  CFDB FFEB          	movff	plusw2,plusw0
  4087  000EAA  06E8               	decf	wreg,f,c
  4088  000EAC  E2FC               	bc	u12751
  4089  000EAE  0103               	movlb	3	; () banked
  4090  000EB0  51C8               	movf	main@i& (0+255),w,b
  4091  000EB2  0D01               	mullw	1
  4092  000EB4  0EA6               	movlw	low main@headerBuf
  4093  000EB6  24F3               	addwf	prodl,w,c
  4094  000EB8  6ED9               	movwf	fsr2l,c
  4095  000EBA  0E03               	movlw	high main@headerBuf
  4096  000EBC  20F4               	addwfc	prodh,w,c
  4097  000EBE  6EDA               	movwf	fsr2h,c
  4098  000EC0  50DF               	movf	indf2,w,c
  4099  000EC2  EC4B  F02A         	call	_ipv4_streamToTransmissionBuffer
  4100                           
  4101                           ;main.c: 164: } else
  4102  000EC6  D00C               	goto	l657
  4103  000EC8                     l656:
  4104                           
  4105                           ;main.c: 165: ipv4_streamToTransmissionBuffer(0, stack.pendingPacketToSend);
  4106  000EC8  EE22  F098         	lfsr	2,_stack+65
  4107  000ECC  EE00  F07E         	lfsr	0,ipv4_streamToTransmissionBuffer@packet
  4108  000ED0  0E41               	movlw	65
  4109  000ED2                     u12761:
  4110  000ED2  CFDB FFEB          	movff	plusw2,plusw0
  4111  000ED6  06E8               	decf	wreg,f,c
  4112  000ED8  E2FC               	bc	u12761
  4113  000EDA  0E00               	movlw	0
  4114  000EDC  EC4B  F02A         	call	_ipv4_streamToTransmissionBuffer
  4115  000EE0                     l657:
  4116  000EE0  0103               	movlb	3	; () banked
  4117  000EE2  2BC8               	incf	main@i& (0+255),f,b
  4118  000EE4                     l654:
  4119                           
  4120                           ; BSR set to: 3
  4121                           
  4122                           ; BSR set to: 3
  4123  000EE4  51C8               	movf	main@i& (0+255),w,b
  4124  000EE6  0101               	movlb	1	; () banked
  4125  000EE8  6F91               	movwf	??_main& (0+255),b
  4126  000EEA  6B92               	clrf	(??_main+1)& (0+255),b
  4127  000EEC  0102               	movlb	2	; () banked
  4128  000EEE  519C               	movf	(_stack+69)& (0+255),w,b
  4129  000EF0  0101               	movlb	1	; () banked
  4130  000EF2  5D91               	subwf	??_main& (0+255),w,b
  4131  000EF4  0102               	movlb	2	; () banked
  4132  000EF6  519D               	movf	(_stack+70)& (0+255),w,b
  4133  000EF8  0101               	movlb	1	; () banked
  4134  000EFA  5992               	subwfb	(??_main+1)& (0+255),w,b
  4135  000EFC  A0D8               	btfss	status,0,c
  4136  000EFE  D7BC               	goto	l655
  4137                           
  4138                           ; BSR set to: 1
  4139                           ;main.c: 166: }
  4140                           ;main.c: 167: UARTTransmitText("[IPv4]: A packet was prepared (");
  4141                           
  4142                           ; BSR set to: 1
  4143  000F00  0EEE               	movlw	low STR_41
  4144  000F02  0100               	movlb	0	; () banked
  4145  000F04  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4146  000F06  0E7C               	movlw	high STR_41
  4147  000F08  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4148  000F0A  EC09  F027         	call	_UARTTransmitText	;wreg free
  4149                           
  4150                           ;main.c: 168: UARTTransmitText(ipAdressToString(stack.pendingPacketToSend.ipv4Header.sou
      +                          rce));
  4151  000F0E  C2A7  F073         	movff	_stack+80,ipAdressToString@ip
  4152  000F12  C2A8  F074         	movff	_stack+81,ipAdressToString@ip+1
  4153  000F16  C2A9  F075         	movff	_stack+82,ipAdressToString@ip+2
  4154  000F1A  C2AA  F076         	movff	_stack+83,ipAdressToString@ip+3
  4155  000F1E  ECC9  F013         	call	_ipAdressToString	;wreg free
  4156  000F22  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  4157  000F26  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  4158  000F2A  EC09  F027         	call	_UARTTransmitText	;wreg free
  4159                           
  4160                           ;main.c: 169: UARTTransmitText(" -> ");
  4161  000F2E  0ED3               	movlw	low STR_42
  4162  000F30  0100               	movlb	0	; () banked
  4163  000F32  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4164  000F34  0E7F               	movlw	high STR_42
  4165  000F36  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4166  000F38  EC09  F027         	call	_UARTTransmitText	;wreg free
  4167                           
  4168                           ;main.c: 170: UARTTransmitText(ipAdressToString(stack.pendingPacketToSend.ipv4Header.des
      +                          tination));
  4169  000F3C  C2AB  F073         	movff	_stack+84,ipAdressToString@ip
  4170  000F40  C2AC  F074         	movff	_stack+85,ipAdressToString@ip+1
  4171  000F44  C2AD  F075         	movff	_stack+86,ipAdressToString@ip+2
  4172  000F48  C2AE  F076         	movff	_stack+87,ipAdressToString@ip+3
  4173  000F4C  ECC9  F013         	call	_ipAdressToString	;wreg free
  4174  000F50  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  4175  000F54  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  4176  000F58  EC09  F027         	call	_UARTTransmitText	;wreg free
  4177                           
  4178                           ;main.c: 171: UARTTransmitText(")\n\r");
  4179  000F5C  0EE9               	movlw	low STR_43
  4180  000F5E  0100               	movlb	0	; () banked
  4181  000F60  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4182  000F62  0E7F               	movlw	high STR_43
  4183  000F64  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4184  000F66  EC09  F027         	call	_UARTTransmitText	;wreg free
  4185                           
  4186                           ;main.c: 173: stack.background.fPacketPending = 1;
  4187  000F6A  0E01               	movlw	1
  4188  000F6C  0102               	movlb	2	; () banked
  4189  000F6E  6F5A               	movwf	(_stack+3)& (0+255),b
  4190                           
  4191                           ; BSR set to: 2
  4192                           
  4193                           ; BSR set to: 2
  4194                           
  4195                           ; BSR set to: 2
  4196  000F70  D6F3               	goto	l647
  4197  000F72                     __end_of_main:
  4198                           	opt stack 0
  4199                           tblptru	equ	0xFF8
  4200                           tblptrh	equ	0xFF7
  4201                           tblptrl	equ	0xFF6
  4202                           tablat	equ	0xFF5
  4203                           prodh	equ	0xFF4
  4204                           prodl	equ	0xFF3
  4205                           intcon	equ	0xFF2
  4206                           intcon3	equ	0xFF0
  4207                           indf0	equ	0xFEF
  4208                           postinc0	equ	0xFEE
  4209                           plusw0	equ	0xFEB
  4210                           fsr0h	equ	0xFEA
  4211                           fsr0l	equ	0xFE9
  4212                           wreg	equ	0xFE8
  4213                           postdec1	equ	0xFE5
  4214                           fsr1l	equ	0xFE1
  4215                           indf2	equ	0xFDF
  4216                           plusw2	equ	0xFDB
  4217                           fsr2h	equ	0xFDA
  4218                           fsr2l	equ	0xFD9
  4219                           status	equ	0xFD8
  4220                           
  4221 ;; *************** function _stack_init *****************
  4222 ;; Defined at:
  4223 ;;		line 27 in file "src/stack/stack.c"
  4224 ;; Parameters:    Size  Location     Type
  4225 ;;		None
  4226 ;; Auto vars:     Size  Location     Type
  4227 ;;		None
  4228 ;; Return value:  Size  Location     Type
  4229 ;;                  3  540[None  ] struct error
  4230 ;; Registers used:
  4231 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4232 ;; Tracked objects:
  4233 ;;		On entry : 0/0
  4234 ;;		On exit  : 0/0
  4235 ;;		Unchanged: 0/0
  4236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4237 ;;      Params:         0       0       0       0       0       0       0       0       0
  4238 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4239 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4240 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4241 ;;Total ram usage:        0 bytes
  4242 ;; Hardware stack levels used:    1
  4243 ;; Hardware stack levels required when called:    8
  4244 ;; This function calls:
  4245 ;;		_arp_init
  4246 ;;		_ipv4_init
  4247 ;; This function is called by:
  4248 ;;		_main
  4249 ;; This function uses a non-reentrant model
  4250 ;;
  4251                           
  4252                           	psect	text1
  4253  005782                     __ptext1:
  4254                           	opt stack 0
  4255  005782                     _stack_init:
  4256                           	opt stack 22
  4257                           
  4258                           ;stack.c: 28: arp_init();
  4259                           
  4260                           ; BSR set to: 2
  4261                           ;incstack = 0
  4262  005782  ECCB  F024         	call	_arp_init	;wreg free
  4263                           
  4264                           ;stack.c: 29: ipv4_init();
  4265  005786  ECD7  F02B         	call	_ipv4_init	;wreg free
  4266  00578A  0012               	return		;funcret
  4267  00578C                     __end_of_stack_init:
  4268                           	opt stack 0
  4269                           tblptru	equ	0xFF8
  4270                           tblptrh	equ	0xFF7
  4271                           tblptrl	equ	0xFF6
  4272                           tablat	equ	0xFF5
  4273                           prodh	equ	0xFF4
  4274                           prodl	equ	0xFF3
  4275                           intcon	equ	0xFF2
  4276                           intcon3	equ	0xFF0
  4277                           indf0	equ	0xFEF
  4278                           postinc0	equ	0xFEE
  4279                           plusw0	equ	0xFEB
  4280                           fsr0h	equ	0xFEA
  4281                           fsr0l	equ	0xFE9
  4282                           wreg	equ	0xFE8
  4283                           postdec1	equ	0xFE5
  4284                           fsr1l	equ	0xFE1
  4285                           indf2	equ	0xFDF
  4286                           plusw2	equ	0xFDB
  4287                           fsr2h	equ	0xFDA
  4288                           fsr2l	equ	0xFD9
  4289                           status	equ	0xFD8
  4290                           
  4291 ;; *************** function _ipv4_init *****************
  4292 ;; Defined at:
  4293 ;;		line 311 in file "src/stack/protocols/ipv4.c"
  4294 ;; Parameters:    Size  Location     Type
  4295 ;;		None
  4296 ;; Auto vars:     Size  Location     Type
  4297 ;;		None
  4298 ;; Return value:  Size  Location     Type
  4299 ;;                  1    wreg      void 
  4300 ;; Registers used:
  4301 ;;		None
  4302 ;; Tracked objects:
  4303 ;;		On entry : 0/0
  4304 ;;		On exit  : 0/0
  4305 ;;		Unchanged: 0/0
  4306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4307 ;;      Params:         0       0       0       0       0       0       0       0       0
  4308 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4309 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4310 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4311 ;;Total ram usage:        0 bytes
  4312 ;; Hardware stack levels used:    1
  4313 ;; Hardware stack levels required when called:    4
  4314 ;; This function calls:
  4315 ;;		Nothing
  4316 ;; This function is called by:
  4317 ;;		_stack_init
  4318 ;; This function uses a non-reentrant model
  4319 ;;
  4320                           
  4321                           	psect	text2
  4322  0057AE                     __ptext2:
  4323                           	opt stack 0
  4324  0057AE                     _ipv4_init:
  4325                           	opt stack 25
  4326                           
  4327                           ;ipv4.c: 312: fSrcAddrChanged = 0;
  4328                           
  4329                           ;incstack = 0
  4330  0057AE  904F               	bcf	_fSrcAddrChanged/(0+8),_fSrcAddrChanged& (0+7),c
  4331  0057B0  0012               	return		;funcret
  4332  0057B2                     __end_of_ipv4_init:
  4333                           	opt stack 0
  4334                           tblptru	equ	0xFF8
  4335                           tblptrh	equ	0xFF7
  4336                           tblptrl	equ	0xFF6
  4337                           tablat	equ	0xFF5
  4338                           prodh	equ	0xFF4
  4339                           prodl	equ	0xFF3
  4340                           intcon	equ	0xFF2
  4341                           intcon3	equ	0xFF0
  4342                           indf0	equ	0xFEF
  4343                           postinc0	equ	0xFEE
  4344                           plusw0	equ	0xFEB
  4345                           fsr0h	equ	0xFEA
  4346                           fsr0l	equ	0xFE9
  4347                           wreg	equ	0xFE8
  4348                           postdec1	equ	0xFE5
  4349                           fsr1l	equ	0xFE1
  4350                           indf2	equ	0xFDF
  4351                           plusw2	equ	0xFDB
  4352                           fsr2h	equ	0xFDA
  4353                           fsr2l	equ	0xFD9
  4354                           status	equ	0xFD8
  4355                           
  4356 ;; *************** function _srand *****************
  4357 ;; Defined at:
  4358 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\rand.c"
  4359 ;; Parameters:    Size  Location     Type
  4360 ;;  x               2   26[BANK0 ] unsigned int 
  4361 ;; Auto vars:     Size  Location     Type
  4362 ;;		None
  4363 ;; Return value:  Size  Location     Type
  4364 ;;                  1    wreg      void 
  4365 ;; Registers used:
  4366 ;;		status,2
  4367 ;; Tracked objects:
  4368 ;;		On entry : 0/0
  4369 ;;		On exit  : 0/0
  4370 ;;		Unchanged: 0/0
  4371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4372 ;;      Params:         0       2       0       0       0       0       0       0       0
  4373 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4374 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4375 ;;      Totals:         0       2       0       0       0       0       0       0       0
  4376 ;;Total ram usage:        2 bytes
  4377 ;; Hardware stack levels used:    1
  4378 ;; Hardware stack levels required when called:    4
  4379 ;; This function calls:
  4380 ;;		Nothing
  4381 ;; This function is called by:
  4382 ;;		_main
  4383 ;; This function uses a non-reentrant model
  4384 ;;
  4385                           
  4386                           	psect	text3
  4387  00573E                     __ptext3:
  4388                           	opt stack 0
  4389  00573E                     _srand:
  4390                           	opt stack 26
  4391                           
  4392                           ;incstack = 0
  4393  00573E  C07A  F049         	movff	srand@x,_randx
  4394  005742  C07B  F04A         	movff	srand@x+1,_randx+1
  4395  005746  6A4B               	clrf	_randx+2,c
  4396  005748  6A4C               	clrf	_randx+3,c
  4397  00574A  0012               	return		;funcret
  4398  00574C                     __end_of_srand:
  4399                           	opt stack 0
  4400                           tblptru	equ	0xFF8
  4401                           tblptrh	equ	0xFF7
  4402                           tblptrl	equ	0xFF6
  4403                           tablat	equ	0xFF5
  4404                           prodh	equ	0xFF4
  4405                           prodl	equ	0xFF3
  4406                           intcon	equ	0xFF2
  4407                           intcon3	equ	0xFF0
  4408                           indf0	equ	0xFEF
  4409                           postinc0	equ	0xFEE
  4410                           plusw0	equ	0xFEB
  4411                           fsr0h	equ	0xFEA
  4412                           fsr0l	equ	0xFE9
  4413                           wreg	equ	0xFE8
  4414                           postdec1	equ	0xFE5
  4415                           fsr1l	equ	0xFE1
  4416                           indf2	equ	0xFDF
  4417                           plusw2	equ	0xFDB
  4418                           fsr2h	equ	0xFDA
  4419                           fsr2l	equ	0xFD9
  4420                           status	equ	0xFD8
  4421                           
  4422 ;; *************** function _sevenSegmentInit *****************
  4423 ;; Defined at:
  4424 ;;		line 28 in file "src/system/sevenseg.c"
  4425 ;; Parameters:    Size  Location     Type
  4426 ;;		None
  4427 ;; Auto vars:     Size  Location     Type
  4428 ;;		None
  4429 ;; Return value:  Size  Location     Type
  4430 ;;                  1    wreg      void 
  4431 ;; Registers used:
  4432 ;;		wreg, status,2, status,0
  4433 ;; Tracked objects:
  4434 ;;		On entry : 0/0
  4435 ;;		On exit  : 0/0
  4436 ;;		Unchanged: 0/0
  4437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4438 ;;      Params:         0       0       0       0       0       0       0       0       0
  4439 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4440 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4441 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4442 ;;Total ram usage:        0 bytes
  4443 ;; Hardware stack levels used:    1
  4444 ;; Hardware stack levels required when called:    4
  4445 ;; This function calls:
  4446 ;;		Nothing
  4447 ;; This function is called by:
  4448 ;;		_main
  4449 ;; This function uses a non-reentrant model
  4450 ;;
  4451                           
  4452                           	psect	text4
  4453  005672                     __ptext4:
  4454                           	opt stack 0
  4455  005672                     _sevenSegmentInit:
  4456                           	opt stack 26
  4457                           
  4458                           ;sevenseg.c: 30: PORTC &= ~(0x07);
  4459                           
  4460                           ;incstack = 0
  4461  005672  0EF8               	movlw	248
  4462  005674  1682               	andwf	3970,f,c	;volatile
  4463                           
  4464                           ;sevenseg.c: 32: TRISC&= ~0x07;;
  4465  005676  0EF8               	movlw	248
  4466  005678  1694               	andwf	3988,f,c	;volatile
  4467                           
  4468                           ;sevenseg.c: 33: TRISA &=~0xff;;
  4469  00567A  0E00               	movlw	0
  4470  00567C  6E92               	movwf	3986,c	;volatile
  4471                           
  4472                           ;sevenseg.c: 35: ANSELA&=~0xff;;
  4473  00567E  0E00               	movlw	0
  4474  005680  010F               	movlb	15	; () banked
  4475  005682  6F5B               	movwf	91,b	;volatile
  4476                           
  4477                           ;sevenseg.c: 36: ANSELC&= ~0x07;;
  4478  005684  0EF8               	movlw	248
  4479  005686  175D               	andwf	93,f,b	;volatile
  4480                           
  4481                           ; BSR set to: 15
  4482                           ;sevenseg.c: 38: PORTA = 0xff;
  4483  005688  6880               	setf	3968,c	;volatile
  4484                           
  4485                           ; BSR set to: 15
  4486  00568A  0012               	return		;funcret
  4487  00568C                     __end_of_sevenSegmentInit:
  4488                           	opt stack 0
  4489                           tblptru	equ	0xFF8
  4490                           tblptrh	equ	0xFF7
  4491                           tblptrl	equ	0xFF6
  4492                           tablat	equ	0xFF5
  4493                           prodh	equ	0xFF4
  4494                           prodl	equ	0xFF3
  4495                           intcon	equ	0xFF2
  4496                           intcon3	equ	0xFF0
  4497                           indf0	equ	0xFEF
  4498                           postinc0	equ	0xFEE
  4499                           plusw0	equ	0xFEB
  4500                           fsr0h	equ	0xFEA
  4501                           fsr0l	equ	0xFE9
  4502                           wreg	equ	0xFE8
  4503                           postdec1	equ	0xFE5
  4504                           fsr1l	equ	0xFE1
  4505                           indf2	equ	0xFDF
  4506                           plusw2	equ	0xFDB
  4507                           fsr2h	equ	0xFDA
  4508                           fsr2l	equ	0xFD9
  4509                           status	equ	0xFD8
  4510                           
  4511 ;; *************** function _printEthernetState *****************
  4512 ;; Defined at:
  4513 ;;		line 179 in file "src/system/main.c"
  4514 ;; Parameters:    Size  Location     Type
  4515 ;;  state          15   58[BANK0 ] struct ethernetConnectio
  4516 ;; Auto vars:     Size  Location     Type
  4517 ;;		None
  4518 ;; Return value:  Size  Location     Type
  4519 ;;                  1    wreg      void 
  4520 ;; Registers used:
  4521 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4522 ;; Tracked objects:
  4523 ;;		On entry : 0/0
  4524 ;;		On exit  : 0/0
  4525 ;;		Unchanged: 0/0
  4526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4527 ;;      Params:         0      15       0       0       0       0       0       0       0
  4528 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4529 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4530 ;;      Totals:         0      15       0       0       0       0       0       0       0
  4531 ;;Total ram usage:       15 bytes
  4532 ;; Hardware stack levels used:    1
  4533 ;; Hardware stack levels required when called:    5
  4534 ;; This function calls:
  4535 ;;		_UARTTransmitText
  4536 ;; This function is called by:
  4537 ;;		_main
  4538 ;; This function uses a non-reentrant model
  4539 ;;
  4540                           
  4541                           	psect	text5
  4542  00428C                     __ptext5:
  4543                           	opt stack 0
  4544  00428C                     _printEthernetState:
  4545                           	opt stack 25
  4546                           
  4547                           ;main.c: 180: static ethernetConnection_t oldState;
  4548                           ;main.c: 181: if (state.link != oldState.link) {
  4549                           
  4550                           ; BSR set to: 15
  4551                           ;incstack = 0
  4552  00428C  0102               	movlb	2	; () banked
  4553  00428E  5148               	movf	printEthernetState@oldState& (0+255),w,b
  4554  004290  0100               	movlb	0	; () banked
  4555  004292  199A               	xorwf	printEthernetState@state& (0+255),w,b
  4556  004294  B4D8               	btfsc	status,2,c
  4557  004296  D041               	goto	l676
  4558                           
  4559                           ; BSR set to: 0
  4560                           ;main.c: 182: if (state.link == NO_LINK) {
  4561  004298  519A               	movf	printEthernetState@state& (0+255),w,b
  4562  00429A  A4D8               	btfss	status,2,c
  4563  00429C  D007               	goto	l667
  4564                           
  4565                           ; BSR set to: 0
  4566                           ;main.c: 183: UARTTransmitText("Link lost.\n\r");
  4567  00429E  0E24               	movlw	low STR_44
  4568  0042A0  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4569  0042A2  0E7F               	movlw	high STR_44
  4570  0042A4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4571  0042A6  EC09  F027         	call	_UARTTransmitText	;wreg free
  4572                           
  4573                           ;main.c: 184: } else if (state.link == LINK_ESTABLISHED) {
  4574  0042AA  D00A               	goto	l669
  4575  0042AC                     l667:
  4576  0042AC  0100               	movlb	0	; () banked
  4577  0042AE  059A               	decf	printEthernetState@state& (0+255),w,b
  4578  0042B0  A4D8               	btfss	status,2,c
  4579  0042B2  D006               	goto	l669
  4580                           
  4581                           ; BSR set to: 0
  4582                           ;main.c: 185: UARTTransmitText("Link established. ");
  4583  0042B4  0E6F               	movlw	low STR_45
  4584  0042B6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4585  0042B8  0E7E               	movlw	high STR_45
  4586  0042BA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4587  0042BC  EC09  F027         	call	_UARTTransmitText	;wreg free
  4588  0042C0                     l669:
  4589                           
  4590                           ;main.c: 186: }
  4591                           ;main.c: 188: if (state.link == LINK_ESTABLISHED) {
  4592  0042C0  0100               	movlb	0	; () banked
  4593  0042C2  059A               	decf	printEthernetState@state& (0+255),w,b
  4594  0042C4  A4D8               	btfss	status,2,c
  4595  0042C6  D029               	goto	l676
  4596                           
  4597                           ; BSR set to: 0
  4598                           ;main.c: 189: if (state.speed == TEN_MBIT) {
  4599  0042C8  519B               	movf	(printEthernetState@state+1)& (0+255),w,b
  4600  0042CA  A4D8               	btfss	status,2,c
  4601  0042CC  D007               	goto	l671
  4602                           
  4603                           ; BSR set to: 0
  4604                           ;main.c: 190: UARTTransmitText("Speed is 10 Mbps, ");
  4605  0042CE  0E5C               	movlw	low STR_46
  4606  0042D0  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4607  0042D2  0E7E               	movlw	high STR_46
  4608  0042D4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4609  0042D6  EC09  F027         	call	_UARTTransmitText	;wreg free
  4610                           
  4611                           ;main.c: 191: } else if (state.speed == HUNDRED_MBIT) {
  4612  0042DA  D00A               	goto	l673
  4613  0042DC                     l671:
  4614  0042DC  0100               	movlb	0	; () banked
  4615  0042DE  059B               	decf	(printEthernetState@state+1)& (0+255),w,b
  4616  0042E0  A4D8               	btfss	status,2,c
  4617  0042E2  D006               	goto	l673
  4618                           
  4619                           ; BSR set to: 0
  4620                           ;main.c: 192: UARTTransmitText("Speed is 100 Mbps, ");
  4621  0042E4  0E21               	movlw	low STR_47
  4622  0042E6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4623  0042E8  0E7E               	movlw	high STR_47
  4624  0042EA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4625  0042EC  EC09  F027         	call	_UARTTransmitText	;wreg free
  4626  0042F0                     l673:
  4627                           
  4628                           ;main.c: 193: }
  4629                           ;main.c: 194: if (state.duplex == HALF_DUPLEX) {
  4630  0042F0  0100               	movlb	0	; () banked
  4631  0042F2  519C               	movf	(printEthernetState@state+2)& (0+255),w,b
  4632  0042F4  A4D8               	btfss	status,2,c
  4633  0042F6  D007               	goto	l674
  4634                           
  4635                           ; BSR set to: 0
  4636                           ;main.c: 195: UARTTransmitText("connection is Half Duplex.\n\r");
  4637  0042F8  0E68               	movlw	low STR_48
  4638  0042FA  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4639  0042FC  0E7D               	movlw	high STR_48
  4640  0042FE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4641  004300  EC09  F027         	call	_UARTTransmitText	;wreg free
  4642                           
  4643                           ;main.c: 196: } else if (state.duplex == FULL_DUPLEX) {
  4644  004304  D00A               	goto	l676
  4645  004306                     l674:
  4646  004306  0100               	movlb	0	; () banked
  4647  004308  059C               	decf	(printEthernetState@state+2)& (0+255),w,b
  4648  00430A  A4D8               	btfss	status,2,c
  4649  00430C  D006               	goto	l676
  4650                           
  4651                           ; BSR set to: 0
  4652                           ;main.c: 198: UARTTransmitText("connection is Full Duplex.\n\r");
  4653  00430E  0E85               	movlw	low STR_49
  4654  004310  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4655  004312  0E7D               	movlw	high STR_49
  4656  004314  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4657  004316  EC09  F027         	call	_UARTTransmitText	;wreg free
  4658  00431A                     l676:
  4659                           
  4660                           ;main.c: 199: }
  4661                           ;main.c: 200: }
  4662                           ;main.c: 201: }
  4663                           ;main.c: 202: oldState = state;
  4664  00431A  EE20  F09A         	lfsr	2,printEthernetState@state
  4665  00431E  EE12  F048         	lfsr	1,printEthernetState@oldState
  4666  004322  0E0E               	movlw	14
  4667  004324                     u12511:
  4668  004324  CFDB FFE3          	movff	plusw2,plusw1
  4669  004328  06E8               	decf	wreg,f,c
  4670  00432A  E2FC               	bc	u12511
  4671  00432C  0012               	return		;funcret
  4672  00432E                     __end_of_printEthernetState:
  4673                           	opt stack 0
  4674                           tblptru	equ	0xFF8
  4675                           tblptrh	equ	0xFF7
  4676                           tblptrl	equ	0xFF6
  4677                           tablat	equ	0xFF5
  4678                           prodh	equ	0xFF4
  4679                           prodl	equ	0xFF3
  4680                           intcon	equ	0xFF2
  4681                           intcon3	equ	0xFF0
  4682                           indf0	equ	0xFEF
  4683                           postinc0	equ	0xFEE
  4684                           plusw0	equ	0xFEB
  4685                           fsr0h	equ	0xFEA
  4686                           fsr0l	equ	0xFE9
  4687                           wreg	equ	0xFE8
  4688                           postdec1	equ	0xFE5
  4689                           plusw1	equ	0xFE3
  4690                           fsr1l	equ	0xFE1
  4691                           indf2	equ	0xFDF
  4692                           plusw2	equ	0xFDB
  4693                           fsr2h	equ	0xFDA
  4694                           fsr2l	equ	0xFD9
  4695                           status	equ	0xFD8
  4696                           
  4697 ;; *************** function _printErrorMessage *****************
  4698 ;; Defined at:
  4699 ;;		line 205 in file "src/system/main.c"
  4700 ;; Parameters:    Size  Location     Type
  4701 ;;  err             3   58[BANK0 ] struct error
  4702 ;; Auto vars:     Size  Location     Type
  4703 ;;		None
  4704 ;; Return value:  Size  Location     Type
  4705 ;;                  1    wreg      void 
  4706 ;; Registers used:
  4707 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4708 ;; Tracked objects:
  4709 ;;		On entry : 0/0
  4710 ;;		On exit  : 0/0
  4711 ;;		Unchanged: 0/0
  4712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4713 ;;      Params:         0       3       0       0       0       0       0       0       0
  4714 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4715 ;;      Temps:          0       2       0       0       0       0       0       0       0
  4716 ;;      Totals:         0       5       0       0       0       0       0       0       0
  4717 ;;Total ram usage:        5 bytes
  4718 ;; Hardware stack levels used:    1
  4719 ;; Hardware stack levels required when called:    8
  4720 ;; This function calls:
  4721 ;;		_UARTTransmitText
  4722 ;;		_intToString
  4723 ;; This function is called by:
  4724 ;;		_main
  4725 ;; This function uses a non-reentrant model
  4726 ;;
  4727                           
  4728                           	psect	text6
  4729  0036A2                     __ptext6:
  4730                           	opt stack 0
  4731  0036A2                     _printErrorMessage:
  4732                           	opt stack 22
  4733                           
  4734                           ;main.c: 206: UARTTransmitText("[ERROR]");
  4735                           
  4736                           ;incstack = 0
  4737  0036A2  0EA3               	movlw	low STR_50
  4738  0036A4  0100               	movlb	0	; () banked
  4739  0036A6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4740  0036A8  0E7F               	movlw	high STR_50
  4741  0036AA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4742  0036AC  EC09  F027         	call	_UARTTransmitText	;wreg free
  4743                           
  4744                           ;main.c: 207: switch (err.module) {
  4745  0036B0  D028               	goto	l680
  4746  0036B2                     
  4747                           ;main.c: 209: UARTTransmitText(" MEMORY MODULE: ");
  4748  0036B2  0EB8               	movlw	low STR_51
  4749  0036B4  0100               	movlb	0	; () banked
  4750  0036B6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4751  0036B8  0E7E               	movlw	high STR_51
  4752  0036BA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4753  0036BC  EC09  F027         	call	_UARTTransmitText	;wreg free
  4754                           
  4755                           ;main.c: 210: break;
  4756  0036C0  D050               	goto	l688
  4757  0036C2                     
  4758                           ;main.c: 212: UARTTransmitText(" ETHERNET CONTROLLER MODULE: ");
  4759  0036C2  0E2C               	movlw	low STR_52
  4760  0036C4  0100               	movlb	0	; () banked
  4761  0036C6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4762  0036C8  0E7D               	movlw	high STR_52
  4763  0036CA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4764  0036CC  EC09  F027         	call	_UARTTransmitText	;wreg free
  4765                           
  4766                           ;main.c: 213: break;
  4767  0036D0  D048               	goto	l688
  4768  0036D2                     
  4769                           ;main.c: 215: UARTTransmitText(" ETHERNET MODULE: ");
  4770  0036D2  0E82               	movlw	low STR_53
  4771  0036D4  0100               	movlb	0	; () banked
  4772  0036D6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4773  0036D8  0E7E               	movlw	high STR_53
  4774  0036DA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4775  0036DC  EC09  F027         	call	_UARTTransmitText	;wreg free
  4776                           
  4777                           ;main.c: 216: break;
  4778  0036E0  D040               	goto	l688
  4779  0036E2                     
  4780                           ;main.c: 218: UARTTransmitText(" ARP MODULE: ");
  4781  0036E2  0E16               	movlw	low STR_54
  4782  0036E4  0100               	movlb	0	; () banked
  4783  0036E6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4784  0036E8  0E7F               	movlw	high STR_54
  4785  0036EA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4786  0036EC  EC09  F027         	call	_UARTTransmitText	;wreg free
  4787                           
  4788                           ;main.c: 219: break;
  4789  0036F0  D038               	goto	l688
  4790  0036F2                     
  4791                           ;main.c: 221: UARTTransmitText(" IPv4 MODULE: ");
  4792  0036F2  0EF8               	movlw	low STR_55
  4793  0036F4  0100               	movlb	0	; () banked
  4794  0036F6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4795  0036F8  0E7E               	movlw	high STR_55
  4796  0036FA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4797  0036FC  EC09  F027         	call	_UARTTransmitText	;wreg free
  4798                           
  4799                           ;main.c: 224: }
  4800                           
  4801                           ;main.c: 223: break;
  4802                           
  4803                           ;main.c: 222: default:
  4804  003700  D030               	goto	l688
  4805  003702                     l680:
  4806  003702  0100               	movlb	0	; () banked
  4807  003704  519A               	movf	printErrorMessage@err& (0+255),w,b
  4808                           
  4809                           ; Switch size 1, requested type "space"
  4810                           ; Number of cases is 5, Range of values is 0 to 4
  4811                           ; switch strategies available:
  4812                           ; Name         Instructions Cycles
  4813                           ; simple_byte           16     9 (average)
  4814                           ;	Chosen strategy is simple_byte
  4815  003706  0A00               	xorlw	0	; case 0
  4816  003708  B4D8               	btfsc	status,2,c
  4817  00370A  D7D3               	goto	l681
  4818  00370C  0A01               	xorlw	1	; case 1
  4819  00370E  B4D8               	btfsc	status,2,c
  4820  003710  D7D8               	goto	l683
  4821  003712  0A03               	xorlw	3	; case 2
  4822  003714  B4D8               	btfsc	status,2,c
  4823  003716  D7DD               	goto	l684
  4824  003718  0A01               	xorlw	1	; case 3
  4825  00371A  B4D8               	btfsc	status,2,c
  4826  00371C  D7E2               	goto	l685
  4827  00371E  0A07               	xorlw	7	; case 4
  4828  003720  B4D8               	btfsc	status,2,c
  4829  003722  D7E7               	goto	l686
  4830                           
  4831                           ; BSR set to: 0
  4832                           ;main.c: 225: switch (err.code) {
  4833  003724  D01E               	goto	l688
  4834  003726                     
  4835                           ; BSR set to: 0
  4836                           ;main.c: 227: UARTTransmitText("Ethernet controller is unresponsive.");
  4837                           
  4838                           ; BSR set to: 0
  4839  003726  0ED7               	movlw	low STR_56
  4840  003728  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4841  00372A  0E7B               	movlw	high STR_56
  4842  00372C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4843  00372E  EC09  F027         	call	_UARTTransmitText	;wreg free
  4844                           
  4845                           ;main.c: 228: break;
  4846  003732  D030               	goto	l690
  4847  003734                     
  4848                           ;main.c: 230: UARTTransmitText("Ethernet controller has returned an unknown device ID.")
      +                          ;
  4849  003734  0E4E               	movlw	low STR_57
  4850  003736  0100               	movlb	0	; () banked
  4851  003738  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4852  00373A  0E7A               	movlw	high STR_57
  4853  00373C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4854  00373E  EC09  F027         	call	_UARTTransmitText	;wreg free
  4855                           
  4856                           ;main.c: 231: break;
  4857  003742  D028               	goto	l690
  4858  003744                     
  4859                           ;main.c: 233: UARTTransmitText("IP address could not be resolved.");
  4860  003744  0E8A               	movlw	low STR_58
  4861  003746  0100               	movlb	0	; () banked
  4862  003748  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4863  00374A  0E7C               	movlw	high STR_58
  4864  00374C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4865  00374E  EC09  F027         	call	_UARTTransmitText	;wreg free
  4866  003752                     
  4867                           ;main.c: 236: UARTTransmitText("An unknown error has occured.");
  4868                           
  4869                           ;main.c: 235: case ERROR_ETHERNET_CONTROLLER_UNKNOWN:
  4870  003752  0E4A               	movlw	low STR_59
  4871  003754  0100               	movlb	0	; () banked
  4872  003756  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4873  003758  0E7D               	movlw	high STR_59
  4874  00375A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4875  00375C  EC09  F027         	call	_UARTTransmitText	;wreg free
  4876                           
  4877                           ;main.c: 238: }
  4878                           
  4879                           ;main.c: 237: break;
  4880  003760  D019               	goto	l690
  4881  003762                     l688:
  4882  003762  EE20  F09B         	lfsr	2,printErrorMessage@err+1
  4883  003766  CFDE F09D          	movff	postinc2,??_printErrorMessage
  4884  00376A  CFDD F09E          	movff	postdec2,??_printErrorMessage+1
  4885                           
  4886                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4887                           ; Switch size 1, requested type "space"
  4888                           ; Number of cases is 1, Range of values is 1 to 1
  4889                           ; switch strategies available:
  4890                           ; Name         Instructions Cycles
  4891                           ; simple_byte            4     3 (average)
  4892                           ;	Chosen strategy is simple_byte
  4893  00376E  0100               	movlb	0	; () banked
  4894  003770  519E               	movf	(??_printErrorMessage+1)& (0+255),w,b
  4895  003772  0A01               	xorlw	1	; case 1
  4896  003774  A4D8               	btfss	status,2,c
  4897  003776  D7ED               	goto	l693
  4898                           
  4899                           ; BSR set to: 0
  4900                           ; Switch size 1, requested type "space"
  4901                           ; Number of cases is 4, Range of values is 45 to 147
  4902                           ; switch strategies available:
  4903                           ; Name         Instructions Cycles
  4904                           ; simple_byte           13     7 (average)
  4905                           ;	Chosen strategy is simple_byte
  4906  003778  519D               	movf	??_printErrorMessage& (0+255),w,b
  4907  00377A  0A2D               	xorlw	45	; case 45
  4908  00377C  B4D8               	btfsc	status,2,c
  4909  00377E  D7DA               	goto	l691
  4910  003780  0A03               	xorlw	3	; case 46
  4911  003782  B4D8               	btfsc	status,2,c
  4912  003784  D7D0               	goto	l689
  4913  003786  0AA1               	xorlw	161	; case 143
  4914  003788  B4D8               	btfsc	status,2,c
  4915  00378A  D7E3               	goto	l693
  4916  00378C  0A1C               	xorlw	28	; case 147
  4917  00378E  B4D8               	btfsc	status,2,c
  4918  003790  D7D9               	goto	l692
  4919  003792  D7DF               	goto	l693
  4920  003794                     l690:
  4921                           
  4922                           ;main.c: 240: UARTTransmitText(" (Code: ");
  4923                           
  4924                           ; BSR set to: 0
  4925  003794  0E89               	movlw	low STR_60
  4926  003796  0100               	movlb	0	; () banked
  4927  003798  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4928  00379A  0E7F               	movlw	high STR_60
  4929  00379C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4930  00379E  EC09  F027         	call	_UARTTransmitText	;wreg free
  4931                           
  4932                           ;main.c: 241: UARTTransmitText(intToString(err.code));
  4933  0037A2  C09B  F084         	movff	printErrorMessage@err+1,intToString@val
  4934  0037A6  C09C  F085         	movff	printErrorMessage@err+2,intToString@val+1
  4935  0037AA  0100               	movlb	0	; () banked
  4936  0037AC  6B86               	clrf	(intToString@val+2)& (0+255),b
  4937  0037AE  6B87               	clrf	(intToString@val+3)& (0+255),b
  4938  0037B0  EC97  F029         	call	_intToString	;wreg free
  4939  0037B4  C084  F098         	movff	?_intToString,UARTTransmitText@str
  4940  0037B8  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  4941  0037BC  EC09  F027         	call	_UARTTransmitText	;wreg free
  4942                           
  4943                           ;main.c: 242: UARTTransmitText(").\n\r");
  4944  0037C0  0ECE               	movlw	low STR_61
  4945  0037C2  0100               	movlb	0	; () banked
  4946  0037C4  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4947  0037C6  0E7F               	movlw	high STR_61
  4948  0037C8  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4949  0037CA  EC09  F027         	call	_UARTTransmitText	;wreg free
  4950  0037CE  0012               	return		;funcret
  4951  0037D0                     __end_of_printErrorMessage:
  4952                           	opt stack 0
  4953                           tblptru	equ	0xFF8
  4954                           tblptrh	equ	0xFF7
  4955                           tblptrl	equ	0xFF6
  4956                           tablat	equ	0xFF5
  4957                           prodh	equ	0xFF4
  4958                           prodl	equ	0xFF3
  4959                           intcon	equ	0xFF2
  4960                           intcon3	equ	0xFF0
  4961                           indf0	equ	0xFEF
  4962                           postinc0	equ	0xFEE
  4963                           plusw0	equ	0xFEB
  4964                           fsr0h	equ	0xFEA
  4965                           fsr0l	equ	0xFE9
  4966                           wreg	equ	0xFE8
  4967                           postdec1	equ	0xFE5
  4968                           plusw1	equ	0xFE3
  4969                           fsr1l	equ	0xFE1
  4970                           indf2	equ	0xFDF
  4971                           postinc2	equ	0xFDE
  4972                           postdec2	equ	0xFDD
  4973                           plusw2	equ	0xFDB
  4974                           fsr2h	equ	0xFDA
  4975                           fsr2l	equ	0xFD9
  4976                           status	equ	0xFD8
  4977                           
  4978 ;; *************** function _ipv4_writeHeaderIntoBuffer *****************
  4979 ;; Defined at:
  4980 ;;		line 94 in file "src/stack/protocols/ipv4.c"
  4981 ;; Parameters:    Size  Location     Type
  4982 ;;  header         23    0[BANK0 ] struct ipv4_header
  4983 ;;  ptr             2   23[BANK0 ] PTR unsigned char 
  4984 ;;		 -> main@headerBuf(32), 
  4985 ;; Auto vars:     Size  Location     Type
  4986 ;;		None
  4987 ;; Return value:  Size  Location     Type
  4988 ;;                  1    wreg      void 
  4989 ;; Registers used:
  4990 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  4991 ;; Tracked objects:
  4992 ;;		On entry : 0/0
  4993 ;;		On exit  : 0/0
  4994 ;;		Unchanged: 0/0
  4995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4996 ;;      Params:         0      25       0       0       0       0       0       0       0
  4997 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4998 ;;      Temps:          0       2       0       0       0       0       0       0       0
  4999 ;;      Totals:         0      27       0       0       0       0       0       0       0
  5000 ;;Total ram usage:       27 bytes
  5001 ;; Hardware stack levels used:    1
  5002 ;; Hardware stack levels required when called:    4
  5003 ;; This function calls:
  5004 ;;		Nothing
  5005 ;; This function is called by:
  5006 ;;		_main
  5007 ;; This function uses a non-reentrant model
  5008 ;;
  5009                           
  5010                           	psect	text7
  5011  002FD6                     __ptext7:
  5012                           	opt stack 0
  5013  002FD6                     _ipv4_writeHeaderIntoBuffer:
  5014                           	opt stack 26
  5015                           
  5016                           ;ipv4.c: 95: *ptr = (header.version << 4) | (header.headerLength);
  5017                           
  5018                           ;incstack = 0
  5019  002FD6  0100               	movlb	0	; () banked
  5020  002FD8  3960               	swapf	ipv4_writeHeaderIntoBuffer@header& (0+255),w,b
  5021  002FDA  0BF0               	andlw	240
  5022  002FDC  1161               	iorwf	(ipv4_writeHeaderIntoBuffer@header+1)& (0+255),w,b
  5023  002FDE  C077  FFD9         	movff	ipv4_writeHeaderIntoBuffer@ptr,fsr2l
  5024  002FE2  C078  FFDA         	movff	ipv4_writeHeaderIntoBuffer@ptr+1,fsr2h
  5025  002FE6  6EDF               	movwf	indf2,c
  5026                           
  5027                           ;ipv4.c: 96: *(ptr + 1) = (header.dscp << 2) | (header.ecn & 0x03);
  5028  002FE8  EE20 F001          	lfsr	2,1
  5029  002FEC  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  5030  002FEE  26D9               	addwf	fsr2l,f,c
  5031  002FF0  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  5032  002FF2  22DA               	addwfc	fsr2h,f,c
  5033  002FF4  C063  F079         	movff	ipv4_writeHeaderIntoBuffer@header+3,??_ipv4_writeHeaderIntoBuffer
  5034  002FF8  0E03               	movlw	3
  5035  002FFA  1779               	andwf	??_ipv4_writeHeaderIntoBuffer& (0+255),f,b
  5036  002FFC  4562               	rlncf	(ipv4_writeHeaderIntoBuffer@header+2)& (0+255),w,b
  5037  002FFE  46E8               	rlncf	wreg,f,c
  5038  003000  0BFC               	andlw	252
  5039  003002  1179               	iorwf	??_ipv4_writeHeaderIntoBuffer& (0+255),w,b
  5040  003004  6EDF               	movwf	indf2,c
  5041                           
  5042                           ;ipv4.c: 97: *(ptr + 2) = (header.totalLength & 0xff00) >> 8;
  5043  003006  EE20 F002          	lfsr	2,2
  5044  00300A  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  5045  00300C  26D9               	addwf	fsr2l,f,c
  5046  00300E  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  5047  003010  22DA               	addwfc	fsr2h,f,c
  5048  003012  5165               	movf	(ipv4_writeHeaderIntoBuffer@header+5)& (0+255),w,b
  5049  003014  6EDF               	movwf	indf2,c
  5050                           
  5051                           ;ipv4.c: 98: *(ptr + 3) = header.totalLength & 0x00ff;
  5052  003016  EE20 F003          	lfsr	2,3
  5053  00301A  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  5054  00301C  26D9               	addwf	fsr2l,f,c
  5055  00301E  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  5056  003020  22DA               	addwfc	fsr2h,f,c
  5057  003022  C064  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+4,indf2
  5058                           
  5059                           ;ipv4.c: 99: *(ptr + 4) = (header.identification & 0xff00) >> 8;
  5060  003026  EE20 F004          	lfsr	2,4
  5061  00302A  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  5062  00302C  26D9               	addwf	fsr2l,f,c
  5063  00302E  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  5064  003030  22DA               	addwfc	fsr2h,f,c
  5065  003032  5167               	movf	(ipv4_writeHeaderIntoBuffer@header+7)& (0+255),w,b
  5066  003034  6EDF               	movwf	indf2,c
  5067                           
  5068                           ;ipv4.c: 100: *(ptr + 5) = header.identification & 0x00ff;
  5069  003036  EE20 F005          	lfsr	2,5
  5070  00303A  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  5071  00303C  26D9               	addwf	fsr2l,f,c
  5072  00303E  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  5073  003040  22DA               	addwfc	fsr2h,f,c
  5074  003042  C066  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+6,indf2
  5075                           
  5076                           ; BSR set to: 0
  5077                           ;ipv4.c: 101: *(ptr + 6) = (header.flags << 5) | ((header.fragmentOffset & 0x1f00) >> 8)
      +                          ;
  5078  003046  EE20 F006          	lfsr	2,6
  5079  00304A  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  5080  00304C  26D9               	addwf	fsr2l,f,c
  5081  00304E  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  5082  003050  22DA               	addwfc	fsr2h,f,c
  5083  003052  EE10  F069         	lfsr	1,ipv4_writeHeaderIntoBuffer@header+9
  5084  003056  CFE6 F079          	movff	postinc1,??_ipv4_writeHeaderIntoBuffer
  5085  00305A  CFE5 F07A          	movff	postdec1,??_ipv4_writeHeaderIntoBuffer+1
  5086  00305E  C07A  F079         	movff	??_ipv4_writeHeaderIntoBuffer+1,??_ipv4_writeHeaderIntoBuffer
  5087  003062  6B7A               	clrf	(??_ipv4_writeHeaderIntoBuffer+1)& (0+255),b
  5088  003064  0E1F               	movlw	31
  5089  003066  1779               	andwf	??_ipv4_writeHeaderIntoBuffer& (0+255),f,b
  5090  003068  3968               	swapf	(ipv4_writeHeaderIntoBuffer@header+8)& (0+255),w,b
  5091  00306A  46E8               	rlncf	wreg,f,c
  5092  00306C  0BE0               	andlw	224
  5093  00306E  1179               	iorwf	??_ipv4_writeHeaderIntoBuffer& (0+255),w,b
  5094  003070  6EDF               	movwf	indf2,c
  5095                           
  5096                           ; BSR set to: 0
  5097                           ;ipv4.c: 102: *(ptr + 7) = (header.fragmentOffset & 0x00ff);
  5098  003072  EE20 F007          	lfsr	2,7
  5099  003076  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  5100  003078  26D9               	addwf	fsr2l,f,c
  5101  00307A  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  5102  00307C  22DA               	addwfc	fsr2h,f,c
  5103  00307E  C069  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+9,indf2
  5104                           
  5105                           ; BSR set to: 0
  5106                           ;ipv4.c: 103: *(ptr + 8) = (header.timeToLive);
  5107  003082  EE20 F008          	lfsr	2,8
  5108  003086  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  5109  003088  26D9               	addwf	fsr2l,f,c
  5110  00308A  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  5111  00308C  22DA               	addwfc	fsr2h,f,c
  5112  00308E  C06B  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+11,indf2
  5113                           
  5114                           ; BSR set to: 0
  5115                           ;ipv4.c: 104: *(ptr + 9) = (header.protocol);
  5116  003092  EE20 F009          	lfsr	2,9
  5117  003096  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  5118  003098  26D9               	addwf	fsr2l,f,c
  5119  00309A  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  5120  00309C  22DA               	addwfc	fsr2h,f,c
  5121  00309E  C06C  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+12,indf2
  5122                           
  5123                           ; BSR set to: 0
  5124                           ;ipv4.c: 105: *(ptr + 10) = (header.checksum & 0xff00) >> 8;
  5125  0030A2  EE20 F00A          	lfsr	2,10
  5126  0030A6  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  5127  0030A8  26D9               	addwf	fsr2l,f,c
  5128  0030AA  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  5129  0030AC  22DA               	addwfc	fsr2h,f,c
  5130  0030AE  516E               	movf	(ipv4_writeHeaderIntoBuffer@header+14)& (0+255),w,b
  5131  0030B0  6EDF               	movwf	indf2,c
  5132                           
  5133                           ; BSR set to: 0
  5134                           ;ipv4.c: 106: *(ptr + 11) = (header.checksum & 0x00ff);
  5135  0030B2  EE20 F00B          	lfsr	2,11
  5136  0030B6  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  5137  0030B8  26D9               	addwf	fsr2l,f,c
  5138  0030BA  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  5139  0030BC  22DA               	addwfc	fsr2h,f,c
  5140  0030BE  C06D  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+13,indf2
  5141                           
  5142                           ; BSR set to: 0
  5143                           ;ipv4.c: 107: *(ptr + 12) = (header.source.address[0]);
  5144  0030C2  EE20 F00C          	lfsr	2,12
  5145  0030C6  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  5146  0030C8  26D9               	addwf	fsr2l,f,c
  5147  0030CA  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  5148  0030CC  22DA               	addwfc	fsr2h,f,c
  5149  0030CE  C06F  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+15,indf2
  5150                           
  5151                           ; BSR set to: 0
  5152                           ;ipv4.c: 108: *(ptr + 13) = (header.source.address[1]);
  5153  0030D2  EE20 F00D          	lfsr	2,13
  5154  0030D6  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  5155  0030D8  26D9               	addwf	fsr2l,f,c
  5156  0030DA  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  5157  0030DC  22DA               	addwfc	fsr2h,f,c
  5158  0030DE  C070  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+16,indf2
  5159                           
  5160                           ; BSR set to: 0
  5161                           ;ipv4.c: 109: *(ptr + 14) = (header.source.address[2]);
  5162  0030E2  EE20 F00E          	lfsr	2,14
  5163  0030E6  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  5164  0030E8  26D9               	addwf	fsr2l,f,c
  5165  0030EA  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  5166  0030EC  22DA               	addwfc	fsr2h,f,c
  5167  0030EE  C071  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+17,indf2
  5168                           
  5169                           ; BSR set to: 0
  5170                           ;ipv4.c: 110: *(ptr + 15) = (header.source.address[3]);
  5171  0030F2  EE20 F00F          	lfsr	2,15
  5172  0030F6  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  5173  0030F8  26D9               	addwf	fsr2l,f,c
  5174  0030FA  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  5175  0030FC  22DA               	addwfc	fsr2h,f,c
  5176  0030FE  C072  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+18,indf2
  5177                           
  5178                           ; BSR set to: 0
  5179                           ;ipv4.c: 111: *(ptr + 16) = (header.destination.address[0]);
  5180  003102  EE20 F010          	lfsr	2,16
  5181  003106  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  5182  003108  26D9               	addwf	fsr2l,f,c
  5183  00310A  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  5184  00310C  22DA               	addwfc	fsr2h,f,c
  5185  00310E  C073  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+19,indf2
  5186                           
  5187                           ; BSR set to: 0
  5188                           ;ipv4.c: 112: *(ptr + 17) = (header.destination.address[1]);
  5189  003112  EE20 F011          	lfsr	2,17
  5190  003116  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  5191  003118  26D9               	addwf	fsr2l,f,c
  5192  00311A  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  5193  00311C  22DA               	addwfc	fsr2h,f,c
  5194  00311E  C074  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+20,indf2
  5195                           
  5196                           ; BSR set to: 0
  5197                           ;ipv4.c: 113: *(ptr + 18) = (header.destination.address[2]);
  5198  003122  EE20 F012          	lfsr	2,18
  5199  003126  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  5200  003128  26D9               	addwf	fsr2l,f,c
  5201  00312A  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  5202  00312C  22DA               	addwfc	fsr2h,f,c
  5203  00312E  C075  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+21,indf2
  5204                           
  5205                           ; BSR set to: 0
  5206                           ;ipv4.c: 114: *(ptr + 19) = (header.destination.address[3]);
  5207  003132  EE20 F013          	lfsr	2,19
  5208  003136  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  5209  003138  26D9               	addwf	fsr2l,f,c
  5210  00313A  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  5211  00313C  22DA               	addwfc	fsr2h,f,c
  5212  00313E  C076  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+22,indf2
  5213                           
  5214                           ; BSR set to: 0
  5215  003142  0012               	return		;funcret
  5216  003144                     __end_of_ipv4_writeHeaderIntoBuffer:
  5217                           	opt stack 0
  5218                           tblptru	equ	0xFF8
  5219                           tblptrh	equ	0xFF7
  5220                           tblptrl	equ	0xFF6
  5221                           tablat	equ	0xFF5
  5222                           prodh	equ	0xFF4
  5223                           prodl	equ	0xFF3
  5224                           intcon	equ	0xFF2
  5225                           intcon3	equ	0xFF0
  5226                           indf0	equ	0xFEF
  5227                           postinc0	equ	0xFEE
  5228                           plusw0	equ	0xFEB
  5229                           fsr0h	equ	0xFEA
  5230                           fsr0l	equ	0xFE9
  5231                           wreg	equ	0xFE8
  5232                           postinc1	equ	0xFE6
  5233                           postdec1	equ	0xFE5
  5234                           plusw1	equ	0xFE3
  5235                           fsr1l	equ	0xFE1
  5236                           indf2	equ	0xFDF
  5237                           postinc2	equ	0xFDE
  5238                           postdec2	equ	0xFDD
  5239                           plusw2	equ	0xFDB
  5240                           fsr2h	equ	0xFDA
  5241                           fsr2l	equ	0xFD9
  5242                           status	equ	0xFD8
  5243                           
  5244 ;; *************** function _ipv4_txFrameRequest *****************
  5245 ;; Defined at:
  5246 ;;		line 36 in file "src/stack/protocols/ipv4.c"
  5247 ;; Parameters:    Size  Location     Type
  5248 ;;  packet          2   71[BANK0 ] PTR struct ipv4_packet
  5249 ;;		 -> stack(135), 
  5250 ;; Auto vars:     Size  Location     Type
  5251 ;;		None
  5252 ;; Return value:  Size  Location     Type
  5253 ;;                  1    wreg      void 
  5254 ;; Registers used:
  5255 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5256 ;; Tracked objects:
  5257 ;;		On entry : 0/0
  5258 ;;		On exit  : 0/0
  5259 ;;		Unchanged: 0/0
  5260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5261 ;;      Params:         0       2       0       0       0       0       0       0       0
  5262 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5263 ;;      Temps:          0       4       0       0       0       0       0       0       0
  5264 ;;      Totals:         0       6       0       0       0       0       0       0       0
  5265 ;;Total ram usage:        6 bytes
  5266 ;; Hardware stack levels used:    1
  5267 ;; Hardware stack levels required when called:    9
  5268 ;; This function calls:
  5269 ;;		_ethernet_txFrameRequest
  5270 ;; This function is called by:
  5271 ;;		_main
  5272 ;; This function uses a non-reentrant model
  5273 ;;
  5274                           
  5275                           	psect	text8
  5276  00356C                     __ptext8:
  5277                           	opt stack 0
  5278  00356C                     _ipv4_txFrameRequest:
  5279                           	opt stack 21
  5280                           
  5281                           ;ipv4.c: 37: packet->ethernet.length = packet->ipv4Header.totalLength + 8;
  5282                           
  5283                           ; BSR set to: 0
  5284                           ;incstack = 0
  5285  00356C  0100               	movlb	0	; () banked
  5286  00356E  EE20 F004          	lfsr	2,4
  5287  003572  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  5288  003574  26D9               	addwf	fsr2l,f,c
  5289  003576  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  5290  003578  22DA               	addwfc	fsr2h,f,c
  5291  00357A  CFDE F0A9          	movff	postinc2,??_ipv4_txFrameRequest
  5292  00357E  CFDD F0AA          	movff	postdec2,??_ipv4_txFrameRequest+1
  5293  003582  0E08               	movlw	8
  5294  003584  27A9               	addwf	??_ipv4_txFrameRequest& (0+255),f,b
  5295  003586  0E00               	movlw	0
  5296  003588  23AA               	addwfc	(??_ipv4_txFrameRequest+1)& (0+255),f,b
  5297  00358A  EE20 F020          	lfsr	2,32
  5298  00358E  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  5299  003590  26D9               	addwf	fsr2l,f,c
  5300  003592  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  5301  003594  22DA               	addwfc	fsr2h,f,c
  5302  003596  C0A9  FFDE         	movff	??_ipv4_txFrameRequest,postinc2
  5303  00359A  C0AA  FFDD         	movff	??_ipv4_txFrameRequest+1,postdec2
  5304                           
  5305                           ;ipv4.c: 38: packet->ethernet.ethertype = ETHERTYPE_IPv4;
  5306  00359E  EE20 F02E          	lfsr	2,46
  5307  0035A2  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  5308  0035A4  26D9               	addwf	fsr2l,f,c
  5309  0035A6  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  5310  0035A8  22DA               	addwfc	fsr2h,f,c
  5311  0035AA  0E00               	movlw	0
  5312  0035AC  6EDE               	movwf	postinc2,c
  5313  0035AE  0E08               	movlw	8
  5314  0035B0  6EDD               	movwf	postdec2,c
  5315                           
  5316                           ; BSR set to: 0
  5317                           ;ipv4.c: 39: ethernet_txFrameRequest(&packet->ethernet);
  5318  0035B2  0E20               	movlw	32
  5319  0035B4  25A7               	addwf	ipv4_txFrameRequest@packet& (0+255),w,b
  5320  0035B6  6FA2               	movwf	ethernet_txFrameRequest@frame& (0+255),b
  5321  0035B8  0E00               	movlw	0
  5322  0035BA  21A8               	addwfc	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  5323  0035BC  6FA3               	movwf	(ethernet_txFrameRequest@frame+1)& (0+255),b
  5324  0035BE  EC07  F01F         	call	_ethernet_txFrameRequest	;wreg free
  5325                           
  5326                           ;ipv4.c: 41: packet->memory.fIsAssigned = packet->ethernet.memory.fIsAssigned;
  5327  0035C2  0100               	movlb	0	; () banked
  5328  0035C4  EE20 F036          	lfsr	2,54
  5329  0035C8  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  5330  0035CA  26D9               	addwf	fsr2l,f,c
  5331  0035CC  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  5332  0035CE  22DA               	addwfc	fsr2h,f,c
  5333  0035D0  EE10 F01D          	lfsr	1,29
  5334  0035D4  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  5335  0035D6  26E1               	addwf	fsr1l,f,c
  5336  0035D8  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  5337  0035DA  22E2               	addwfc	fsr1h,f,c
  5338  0035DC  CFDF FFE7          	movff	indf2,indf1
  5339                           
  5340                           ; BSR set to: 0
  5341                           ;ipv4.c: 42: packet->memory.fOutOfMemory = packet->ethernet.memory.fOutOfMemory;
  5342  0035E0  EE20 F037          	lfsr	2,55
  5343  0035E4  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  5344  0035E6  26D9               	addwf	fsr2l,f,c
  5345  0035E8  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  5346  0035EA  22DA               	addwfc	fsr2h,f,c
  5347  0035EC  EE10 F01E          	lfsr	1,30
  5348  0035F0  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  5349  0035F2  26E1               	addwf	fsr1l,f,c
  5350  0035F4  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  5351  0035F6  22E2               	addwfc	fsr1h,f,c
  5352  0035F8  CFDF FFE7          	movff	indf2,indf1
  5353                           
  5354                           ; BSR set to: 0
  5355                           ;ipv4.c: 43: packet->memory.index = packet->ethernet.memory.index;
  5356  0035FC  EE20 F038          	lfsr	2,56
  5357  003600  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  5358  003602  26D9               	addwf	fsr2l,f,c
  5359  003604  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  5360  003606  22DA               	addwfc	fsr2h,f,c
  5361  003608  EE10 F01F          	lfsr	1,31
  5362  00360C  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  5363  00360E  26E1               	addwf	fsr1l,f,c
  5364  003610  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  5365  003612  22E2               	addwfc	fsr1h,f,c
  5366  003614  CFDF FFE7          	movff	indf2,indf1
  5367                           
  5368                           ; BSR set to: 0
  5369                           ;ipv4.c: 44: packet->memory.start = packet->ethernet.memory.start + 8;
  5370  003618  EE20 F030          	lfsr	2,48
  5371  00361C  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  5372  00361E  26D9               	addwf	fsr2l,f,c
  5373  003620  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  5374  003622  22DA               	addwfc	fsr2h,f,c
  5375  003624  CFDE F0A9          	movff	postinc2,??_ipv4_txFrameRequest
  5376  003628  CFDD F0AA          	movff	postdec2,??_ipv4_txFrameRequest+1
  5377  00362C  0E08               	movlw	8
  5378  00362E  27A9               	addwf	??_ipv4_txFrameRequest& (0+255),f,b
  5379  003630  0E00               	movlw	0
  5380  003632  23AA               	addwfc	(??_ipv4_txFrameRequest+1)& (0+255),f,b
  5381  003634  EE20 F017          	lfsr	2,23
  5382  003638  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  5383  00363A  26D9               	addwf	fsr2l,f,c
  5384  00363C  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  5385  00363E  22DA               	addwfc	fsr2h,f,c
  5386  003640  C0A9  FFDE         	movff	??_ipv4_txFrameRequest,postinc2
  5387  003644  C0AA  FFDD         	movff	??_ipv4_txFrameRequest+1,postdec2
  5388                           
  5389                           ; BSR set to: 0
  5390                           ;ipv4.c: 45: packet->memory.end = packet->ethernet.memory.end;
  5391  003648  EE20 F032          	lfsr	2,50
  5392  00364C  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  5393  00364E  26D9               	addwf	fsr2l,f,c
  5394  003650  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  5395  003652  22DA               	addwfc	fsr2h,f,c
  5396  003654  EE10 F019          	lfsr	1,25
  5397  003658  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  5398  00365A  26E1               	addwf	fsr1l,f,c
  5399  00365C  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  5400  00365E  22E2               	addwfc	fsr1h,f,c
  5401  003660  CFDE FFE6          	movff	postinc2,postinc1
  5402  003664  CFDD FFE5          	movff	postdec2,postdec1
  5403                           
  5404                           ; BSR set to: 0
  5405                           ;ipv4.c: 46: packet->memory.length = packet->ethernet.memory.length - 8;
  5406  003668  0EF8               	movlw	248
  5407  00366A  6FA9               	movwf	??_ipv4_txFrameRequest& (0+255),b
  5408  00366C  0EFF               	movlw	255
  5409  00366E  6FAA               	movwf	(??_ipv4_txFrameRequest+1)& (0+255),b
  5410  003670  EE20 F034          	lfsr	2,52
  5411  003674  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  5412  003676  26D9               	addwf	fsr2l,f,c
  5413  003678  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  5414  00367A  22DA               	addwfc	fsr2h,f,c
  5415  00367C  CFDE F0AB          	movff	postinc2,??_ipv4_txFrameRequest+2
  5416  003680  CFDD F0AC          	movff	postdec2,??_ipv4_txFrameRequest+3
  5417  003684  51A9               	movf	??_ipv4_txFrameRequest& (0+255),w,b
  5418  003686  27AB               	addwf	(??_ipv4_txFrameRequest+2)& (0+255),f,b
  5419  003688  51AA               	movf	(??_ipv4_txFrameRequest+1)& (0+255),w,b
  5420  00368A  23AC               	addwfc	(??_ipv4_txFrameRequest+3)& (0+255),f,b
  5421  00368C  EE20 F01B          	lfsr	2,27
  5422  003690  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  5423  003692  26D9               	addwf	fsr2l,f,c
  5424  003694  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  5425  003696  22DA               	addwfc	fsr2h,f,c
  5426  003698  C0AB  FFDE         	movff	??_ipv4_txFrameRequest+2,postinc2
  5427  00369C  C0AC  FFDD         	movff	??_ipv4_txFrameRequest+3,postdec2
  5428                           
  5429                           ; BSR set to: 0
  5430  0036A0  0012               	return		;funcret
  5431  0036A2                     __end_of_ipv4_txFrameRequest:
  5432                           	opt stack 0
  5433                           tblptru	equ	0xFF8
  5434                           tblptrh	equ	0xFF7
  5435                           tblptrl	equ	0xFF6
  5436                           tablat	equ	0xFF5
  5437                           prodh	equ	0xFF4
  5438                           prodl	equ	0xFF3
  5439                           intcon	equ	0xFF2
  5440                           intcon3	equ	0xFF0
  5441                           indf0	equ	0xFEF
  5442                           postinc0	equ	0xFEE
  5443                           plusw0	equ	0xFEB
  5444                           fsr0h	equ	0xFEA
  5445                           fsr0l	equ	0xFE9
  5446                           wreg	equ	0xFE8
  5447                           indf1	equ	0xFE7
  5448                           postinc1	equ	0xFE6
  5449                           postdec1	equ	0xFE5
  5450                           plusw1	equ	0xFE3
  5451                           fsr1h	equ	0xFE2
  5452                           fsr1l	equ	0xFE1
  5453                           indf2	equ	0xFDF
  5454                           postinc2	equ	0xFDE
  5455                           postdec2	equ	0xFDD
  5456                           plusw2	equ	0xFDB
  5457                           fsr2h	equ	0xFDA
  5458                           fsr2l	equ	0xFD9
  5459                           status	equ	0xFD8
  5460                           
  5461 ;; *************** function _ipv4_streamToTransmissionBuffer *****************
  5462 ;; Defined at:
  5463 ;;		line 83 in file "src/stack/protocols/ipv4.c"
  5464 ;; Parameters:    Size  Location     Type
  5465 ;;  data            1    wreg     unsigned char 
  5466 ;;  packet         66   30[BANK0 ] struct ipv4_packet
  5467 ;; Auto vars:     Size  Location     Type
  5468 ;;  data            1   98[BANK0 ] unsigned char 
  5469 ;;  ethernetPack    2   96[BANK0 ] unsigned int 
  5470 ;;  remainingLen    2    0        unsigned int 
  5471 ;; Return value:  Size  Location     Type
  5472 ;;                  1    wreg      void 
  5473 ;; Registers used:
  5474 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  5475 ;; Tracked objects:
  5476 ;;		On entry : 0/0
  5477 ;;		On exit  : 0/0
  5478 ;;		Unchanged: 0/0
  5479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5480 ;;      Params:         0      66       0       0       0       0       0       0       0
  5481 ;;      Locals:         0       3       0       0       0       0       0       0       0
  5482 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5483 ;;      Totals:         0      69       0       0       0       0       0       0       0
  5484 ;;Total ram usage:       69 bytes
  5485 ;; Hardware stack levels used:    1
  5486 ;; Hardware stack levels required when called:    8
  5487 ;; This function calls:
  5488 ;;		_ethernetController_streamToTransmitBuffer
  5489 ;; This function is called by:
  5490 ;;		_main
  5491 ;; This function uses a non-reentrant model
  5492 ;;
  5493                           
  5494                           	psect	text9
  5495  005496                     __ptext9:
  5496                           	opt stack 0
  5497  005496                     _ipv4_streamToTransmissionBuffer:
  5498                           	opt stack 22
  5499                           
  5500                           ; BSR set to: 0
  5501                           ;incstack = 0
  5502                           ;ipv4_streamToTransmissionBuffer@data stored from wreg
  5503  005496  0100               	movlb	0	; () banked
  5504  005498  6FC2               	movwf	ipv4_streamToTransmissionBuffer@data& (0+255),b
  5505                           
  5506                           ;ipv4.c: 84: uint16_t ethernetPacketLength = packet.ipv4Header.totalLength;
  5507  00549A  C082  F0C0         	movff	ipv4_streamToTransmissionBuffer@packet+4,ipv4_streamToTransmissionBuffer@ethernet
      +                          PacketLength
  5508  00549E  C083  F0C1         	movff	ipv4_streamToTransmissionBuffer@packet+5,ipv4_streamToTransmissionBuffer@ethernet
      +                          PacketLength+1
  5509                           
  5510                           ;ipv4.c: 85: uint16_t remainingLength;
  5511                           ;ipv4.c: 89: ethernetController_streamToTransmitBuffer(data, packet.memory);
  5512  0054A2  EE20  F095         	lfsr	2,ipv4_streamToTransmissionBuffer@packet+23
  5513  0054A6  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
  5514  0054AA  0E08               	movlw	8
  5515  0054AC                     u12521:
  5516  0054AC  CFDB FFEB          	movff	plusw2,plusw0
  5517  0054B0  06E8               	decf	wreg,f,c
  5518  0054B2  E2FC               	bc	u12521
  5519  0054B4  0100               	movlb	0	; () banked
  5520  0054B6  51C2               	movf	ipv4_streamToTransmissionBuffer@data& (0+255),w,b
  5521  0054B8  EC55  F024         	call	_ethernetController_streamToTransmitBuffer
  5522  0054BC  0012               	return		;funcret
  5523  0054BE                     __end_of_ipv4_streamToTransmissionBuffer:
  5524                           	opt stack 0
  5525                           tblptru	equ	0xFF8
  5526                           tblptrh	equ	0xFF7
  5527                           tblptrl	equ	0xFF6
  5528                           tablat	equ	0xFF5
  5529                           prodh	equ	0xFF4
  5530                           prodl	equ	0xFF3
  5531                           intcon	equ	0xFF2
  5532                           intcon3	equ	0xFF0
  5533                           indf0	equ	0xFEF
  5534                           postinc0	equ	0xFEE
  5535                           plusw0	equ	0xFEB
  5536                           fsr0h	equ	0xFEA
  5537                           fsr0l	equ	0xFE9
  5538                           wreg	equ	0xFE8
  5539                           indf1	equ	0xFE7
  5540                           postinc1	equ	0xFE6
  5541                           postdec1	equ	0xFE5
  5542                           plusw1	equ	0xFE3
  5543                           fsr1h	equ	0xFE2
  5544                           fsr1l	equ	0xFE1
  5545                           indf2	equ	0xFDF
  5546                           postinc2	equ	0xFDE
  5547                           postdec2	equ	0xFDD
  5548                           plusw2	equ	0xFDB
  5549                           fsr2h	equ	0xFDA
  5550                           fsr2l	equ	0xFD9
  5551                           status	equ	0xFD8
  5552                           
  5553 ;; *************** function _handleStackBackgroundTasks *****************
  5554 ;; Defined at:
  5555 ;;		line 36 in file "src/stack/backgroundTasks.c"
  5556 ;; Parameters:    Size  Location     Type
  5557 ;;  stack           2  133[BANK1 ] PTR struct stack
  5558 ;;		 -> stack(135), 
  5559 ;; Auto vars:     Size  Location     Type
  5560 ;;  foo            10    0        unsigned char [10]
  5561 ;;  errIPv4         3  142[BANK1 ] struct error
  5562 ;;  errArp          3  137[BANK1 ] struct error
  5563 ;;  intf            2  140[BANK1 ] struct interruptFlags
  5564 ;; Return value:  Size  Location     Type
  5565 ;;                  1    wreg      void 
  5566 ;; Registers used:
  5567 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5568 ;; Tracked objects:
  5569 ;;		On entry : 0/0
  5570 ;;		On exit  : 0/0
  5571 ;;		Unchanged: 0/0
  5572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5573 ;;      Params:         0       0       2       0       0       0       0       0       0
  5574 ;;      Locals:         0       0       8       0       0       0       0       0       0
  5575 ;;      Temps:          0       0       2       0       0       0       0       0       0
  5576 ;;      Totals:         0       0      12       0       0       0       0       0       0
  5577 ;;Total ram usage:       12 bytes
  5578 ;; Hardware stack levels used:    1
  5579 ;; Hardware stack levels required when called:   13
  5580 ;; This function calls:
  5581 ;;		_UARTTransmitText
  5582 ;;		_arp_background
  5583 ;;		_arp_init
  5584 ;;		_ethernetController_clearInterruptFlag
  5585 ;;		_ethernetController_newPacketAvailable
  5586 ;;		_ethernetController_pollInterruptFlags
  5587 ;;		_ethernetController_setLEDConfig
  5588 ;;		_ethernetController_updateLinkStatus
  5589 ;;		_ethernet_rxGetNewFrame
  5590 ;;		_ipAdressToString
  5591 ;;		_ipv4_background
  5592 ;;		_ipv4_sendFrame
  5593 ;;		_ipv4_setIPSourceAddress
  5594 ;; This function is called by:
  5595 ;;		_main
  5596 ;; This function uses a non-reentrant model
  5597 ;;
  5598                           
  5599                           	psect	text10
  5600  002366                     __ptext10:
  5601                           	opt stack 0
  5602  002366                     _handleStackBackgroundTasks:
  5603                           	opt stack 17
  5604                           
  5605                           ;backgroundTasks.c: 37: unsigned char foo[10];
  5606                           ;backgroundTasks.c: 38: error_t errArp;
  5607                           ;backgroundTasks.c: 39: error_t errIPv4;
  5608                           ;backgroundTasks.c: 40: interruptFlags_t intf;
  5609                           ;backgroundTasks.c: 42: intf = ethernetController_pollInterruptFlags();
  5610                           
  5611                           ;incstack = 0
  5612  002366  EC0A  F01A         	call	_ethernetController_pollInterruptFlags	;wreg free
  5613  00236A  C078  F18C         	movff	?_ethernetController_pollInterruptFlags,handleStackBackgroundTasks@intf
  5614  00236E  C079  F18D         	movff	?_ethernetController_pollInterruptFlags+1,handleStackBackgroundTasks@intf+1
  5615                           
  5616                           ;backgroundTasks.c: 43: if (intf.LINKIF) {
  5617  002372  0101               	movlb	1	; () banked
  5618  002374  A78C               	btfss	handleStackBackgroundTasks@intf& (0+255),3,b
  5619  002376  D044               	goto	l524
  5620                           
  5621                           ; BSR set to: 1
  5622                           ;backgroundTasks.c: 45: ethernetController_updateLinkStatus(&(stack->ethernet));
  5623  002378  0E04               	movlw	4
  5624  00237A  2585               	addwf	handleStackBackgroundTasks@stack& (0+255),w,b
  5625  00237C  0100               	movlb	0	; () banked
  5626  00237E  6F80               	movwf	ethernetController_updateLinkStatus@state& (0+255),b
  5627  002380  0E00               	movlw	0
  5628  002382  0101               	movlb	1	; () banked
  5629  002384  2186               	addwfc	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5630  002386  0100               	movlb	0	; () banked
  5631  002388  6F81               	movwf	(ethernetController_updateLinkStatus@state+1)& (0+255),b
  5632  00238A  ECCD  F022         	call	_ethernetController_updateLinkStatus	;wreg free
  5633                           
  5634                           ;backgroundTasks.c: 47: if (stack->ethernet.link == LINK_ESTABLISHED) {
  5635  00238E  0101               	movlb	1	; () banked
  5636  002390  EE20 F004          	lfsr	2,4
  5637  002394  5185               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5638  002396  26D9               	addwf	fsr2l,f,c
  5639  002398  5186               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5640  00239A  22DA               	addwfc	fsr2h,f,c
  5641  00239C  04DE               	decf	postinc2,w,c
  5642  00239E  A4D8               	btfss	status,2,c
  5643  0023A0  D01E               	goto	l525
  5644                           
  5645                           ; BSR set to: 1
  5646                           ;backgroundTasks.c: 48: ethernetController_setLEDConfig(LEDA, LED_ON);
  5647  0023A2  0E00               	movlw	0
  5648  0023A4  0100               	movlb	0	; () banked
  5649  0023A6  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  5650  0023A8  0E00               	movlw	0
  5651  0023AA  EC86  F022         	call	_ethernetController_setLEDConfig
  5652                           
  5653                           ;backgroundTasks.c: 49: ethernetController_setLEDConfig(LEDB, LED_TRANSMIT_RECEIVE_EVENT
      +                          S);
  5654  0023AE  0E02               	movlw	2
  5655  0023B0  0100               	movlb	0	; () banked
  5656  0023B2  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  5657  0023B4  0E01               	movlw	1
  5658  0023B6  EC86  F022         	call	_ethernetController_setLEDConfig
  5659                           
  5660                           ;backgroundTasks.c: 50: ipv4_setIPSourceAddress(stack->source);
  5661  0023BA  0101               	movlb	1	; () banked
  5662  0023BC  EE20 F083          	lfsr	2,131
  5663  0023C0  5185               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5664  0023C2  26D9               	addwf	fsr2l,f,c
  5665  0023C4  5186               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5666  0023C6  22DA               	addwfc	fsr2h,f,c
  5667  0023C8  CFDE F060          	movff	postinc2,ipv4_setIPSourceAddress@ip
  5668  0023CC  CFDE F061          	movff	postinc2,ipv4_setIPSourceAddress@ip+1
  5669  0023D0  CFDE F062          	movff	postinc2,ipv4_setIPSourceAddress@ip+2
  5670  0023D4  CFDE F063          	movff	postinc2,ipv4_setIPSourceAddress@ip+3
  5671  0023D8  EC5F  F02B         	call	_ipv4_setIPSourceAddress	;wreg free
  5672                           
  5673                           ;backgroundTasks.c: 51: } else {
  5674  0023DC  D00E               	goto	l526
  5675  0023DE                     l525:
  5676                           
  5677                           ;backgroundTasks.c: 52: ethernetController_setLEDConfig(LEDA, LED_OFF);
  5678  0023DE  0E01               	movlw	1
  5679  0023E0  0100               	movlb	0	; () banked
  5680  0023E2  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  5681  0023E4  0E00               	movlw	0
  5682  0023E6  EC86  F022         	call	_ethernetController_setLEDConfig
  5683                           
  5684                           ;backgroundTasks.c: 53: ethernetController_setLEDConfig(LEDB, LED_OFF);
  5685  0023EA  0E01               	movlw	1
  5686  0023EC  0100               	movlb	0	; () banked
  5687  0023EE  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  5688  0023F0  0E01               	movlw	1
  5689  0023F2  EC86  F022         	call	_ethernetController_setLEDConfig
  5690                           
  5691                           ;backgroundTasks.c: 54: arp_init();
  5692  0023F6  ECCB  F024         	call	_arp_init	;wreg free
  5693  0023FA                     l526:
  5694                           
  5695                           ;backgroundTasks.c: 55: }
  5696                           ;backgroundTasks.c: 56: ethernetController_clearInterruptFlag(LINKIF);
  5697  0023FA  0E0B               	movlw	11
  5698  0023FC  ECAD  F02B         	call	_ethernetController_clearInterruptFlag
  5699  002400                     l524:
  5700                           
  5701                           ;backgroundTasks.c: 57: }
  5702                           ;backgroundTasks.c: 58: if (intf.PKTIF) {
  5703  002400  0101               	movlb	1	; () banked
  5704  002402  A98C               	btfss	handleStackBackgroundTasks@intf& (0+255),4,b
  5705  002404  D00E               	goto	l528
  5706                           
  5707                           ; BSR set to: 1
  5708                           ;backgroundTasks.c: 60: if (ethernetController_newPacketAvailable()) {
  5709  002406  EC7C  F02B         	call	_ethernetController_newPacketAvailable	;wreg free
  5710  00240A  0900               	iorlw	0
  5711  00240C  B4D8               	btfsc	status,2,c
  5712  00240E  D009               	goto	l528
  5713                           
  5714                           ;backgroundTasks.c: 62: ethernet_rxGetNewFrame(&stack->ethernet);
  5715  002410  0E04               	movlw	4
  5716  002412  0101               	movlb	1	; () banked
  5717  002414  2585               	addwf	handleStackBackgroundTasks@stack& (0+255),w,b
  5718  002416  6F78               	movwf	ethernet_rxGetNewFrame@frame& (0+255),b
  5719  002418  0E00               	movlw	0
  5720  00241A  2186               	addwfc	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5721  00241C  6F79               	movwf	(ethernet_rxGetNewFrame@frame+1)& (0+255),b
  5722  00241E  EC76  F000         	call	_ethernet_rxGetNewFrame	;wreg free
  5723  002422                     l528:
  5724                           
  5725                           ;backgroundTasks.c: 63: }
  5726                           ;backgroundTasks.c: 64: }
  5727                           ;backgroundTasks.c: 71: if (stack->background.fPacketPending == 1) {
  5728  002422  0101               	movlb	1	; () banked
  5729  002424  EE20 F003          	lfsr	2,3
  5730  002428  5185               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5731  00242A  26D9               	addwf	fsr2l,f,c
  5732  00242C  5186               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5733  00242E  22DA               	addwfc	fsr2h,f,c
  5734  002430  04DE               	decf	postinc2,w,c
  5735  002432  A4D8               	btfss	status,2,c
  5736  002434  D033               	goto	l530
  5737                           
  5738                           ; BSR set to: 1
  5739                           ;backgroundTasks.c: 74: UARTTransmitText(".");
  5740  002436  0E83               	movlw	low (STR_57+53)
  5741  002438  0100               	movlb	0	; () banked
  5742  00243A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5743  00243C  0E7A               	movlw	high (STR_57+53)
  5744  00243E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5745  002440  EC09  F027         	call	_UARTTransmitText	;wreg free
  5746                           
  5747                           ;backgroundTasks.c: 75: if (ipv4_sendFrame(stack->pendingPacketToSend).code == (uint16_t
      +                          )0) {
  5748  002444  0101               	movlb	1	; () banked
  5749  002446  EE20 F041          	lfsr	2,65
  5750  00244A  5185               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5751  00244C  26D9               	addwf	fsr2l,f,c
  5752  00244E  5186               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5753  002450  22DA               	addwfc	fsr2h,f,c
  5754  002452  EE01  F034         	lfsr	0,ipv4_sendFrame@ipPacket
  5755  002456  0E41               	movlw	65
  5756  002458                     u12391:
  5757  002458  CFDB FFEB          	movff	plusw2,plusw0
  5758  00245C  06E8               	decf	wreg,f,c
  5759  00245E  E2FC               	bc	u12391
  5760  002460  ECC0  F012         	call	_ipv4_sendFrame	;wreg free
  5761  002464  0E34               	movlw	low ?_ipv4_sendFrame
  5762  002466  6ED9               	movwf	fsr2l,c
  5763  002468  0E01               	movlw	high ?_ipv4_sendFrame
  5764  00246A  6EDA               	movwf	fsr2h,c
  5765  00246C  0E01               	movlw	1
  5766  00246E  26D9               	addwf	fsr2l,f,c
  5767  002470  0E00               	movlw	0
  5768  002472  22DA               	addwfc	fsr2h,f,c
  5769  002474  50DE               	movf	postinc2,w,c
  5770  002476  10DE               	iorwf	postinc2,w,c
  5771  002478  A4D8               	btfss	status,2,c
  5772  00247A  D010               	goto	l530
  5773                           
  5774                           ;backgroundTasks.c: 76: UARTTransmitText("[IPv4]: Packet was sent successfully.\n\r");
  5775  00247C  0E14               	movlw	low STR_22
  5776  00247E  0100               	movlb	0	; () banked
  5777  002480  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5778  002482  0E7B               	movlw	high STR_22
  5779  002484  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5780  002486  EC09  F027         	call	_UARTTransmitText	;wreg free
  5781                           
  5782                           ;backgroundTasks.c: 77: stack->background.fPacketPending=0;
  5783  00248A  0101               	movlb	1	; () banked
  5784  00248C  EE20 F003          	lfsr	2,3
  5785  002490  5185               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5786  002492  26D9               	addwf	fsr2l,f,c
  5787  002494  5186               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5788  002496  22DA               	addwfc	fsr2h,f,c
  5789  002498  0E00               	movlw	0
  5790  00249A  6EDF               	movwf	indf2,c
  5791  00249C                     l530:
  5792                           
  5793                           ;backgroundTasks.c: 78: }
  5794                           ;backgroundTasks.c: 79: }
  5795                           ;backgroundTasks.c: 82: errArp = arp_background(stack->ethernet.link);
  5796                           
  5797                           ; BSR set to: 1
  5798                           
  5799                           ; BSR set to: 1
  5800  00249C  0101               	movlb	1	; () banked
  5801  00249E  EE20 F004          	lfsr	2,4
  5802  0024A2  5185               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5803  0024A4  26D9               	addwf	fsr2l,f,c
  5804  0024A6  5186               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5805  0024A8  22DA               	addwfc	fsr2h,f,c
  5806  0024AA  50DF               	movf	indf2,w,c
  5807  0024AC  EC6D  F016         	call	_arp_background
  5808  0024B0  C151  F189         	movff	?_arp_background,handleStackBackgroundTasks@errArp
  5809  0024B4  C152  F18A         	movff	?_arp_background+1,handleStackBackgroundTasks@errArp+1
  5810  0024B8  C153  F18B         	movff	?_arp_background+2,handleStackBackgroundTasks@errArp+2
  5811                           
  5812                           ;backgroundTasks.c: 83: errIPv4 = ipv4_background(stack->ethernet.link);
  5813  0024BC  0101               	movlb	1	; () banked
  5814  0024BE  EE20 F004          	lfsr	2,4
  5815  0024C2  5185               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5816  0024C4  26D9               	addwf	fsr2l,f,c
  5817  0024C6  5186               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5818  0024C8  22DA               	addwfc	fsr2h,f,c
  5819  0024CA  50DF               	movf	indf2,w,c
  5820  0024CC  EC58  F019         	call	_ipv4_background
  5821  0024D0  C09A  F18E         	movff	?_ipv4_background,handleStackBackgroundTasks@errIPv4
  5822  0024D4  C09B  F18F         	movff	?_ipv4_background+1,handleStackBackgroundTasks@errIPv4+1
  5823  0024D8  C09C  F190         	movff	?_ipv4_background+2,handleStackBackgroundTasks@errIPv4+2
  5824                           
  5825                           ;backgroundTasks.c: 85: if (errIPv4.module == ERROR_MODULE_IPv4 &&
  5826                           ;backgroundTasks.c: 86: errIPv4.code == ERROR_IPv4_ADDRESS_ALREADY_IN_USE) {
  5827  0024DC  0E04               	movlw	4
  5828  0024DE  0101               	movlb	1	; () banked
  5829  0024E0  198E               	xorwf	handleStackBackgroundTasks@errIPv4& (0+255),w,b
  5830  0024E2  A4D8               	btfss	status,2,c
  5831  0024E4  0012               	return	
  5832                           
  5833                           ; BSR set to: 1
  5834  0024E6  0EF5               	movlw	245
  5835  0024E8  198F               	xorwf	(handleStackBackgroundTasks@errIPv4+1)& (0+255),w,b
  5836  0024EA  E149               	bnz	l532
  5837  0024EC  0590               	decf	(handleStackBackgroundTasks@errIPv4+2)& (0+255),w,b
  5838  0024EE  A4D8               	btfss	status,2,c
  5839  0024F0  0012               	return	
  5840                           
  5841                           ; BSR set to: 1
  5842                           ;backgroundTasks.c: 87: UARTTransmitText("[IPv4]: Address conflict detected. \n\r");
  5843  0024F2  0EB1               	movlw	low STR_23
  5844  0024F4  0100               	movlb	0	; () banked
  5845  0024F6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5846  0024F8  0E7B               	movlw	high STR_23
  5847  0024FA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5848  0024FC  EC09  F027         	call	_UARTTransmitText	;wreg free
  5849                           
  5850                           ;backgroundTasks.c: 88: stack->source.address[3]++;
  5851  002500  0101               	movlb	1	; () banked
  5852  002502  EE20 F086          	lfsr	2,134
  5853  002506  5185               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5854  002508  26D9               	addwf	fsr2l,f,c
  5855  00250A  5186               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5856  00250C  22DA               	addwfc	fsr2h,f,c
  5857  00250E  2ADF               	incf	indf2,f,c
  5858                           
  5859                           ; BSR set to: 1
  5860                           ;backgroundTasks.c: 89: UARTTransmitText("[IPv4]: Setting IPv4 Src Address to ");
  5861  002510  0EFC               	movlw	low STR_24
  5862  002512  0100               	movlb	0	; () banked
  5863  002514  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5864  002516  0E7B               	movlw	high STR_24
  5865  002518  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5866  00251A  EC09  F027         	call	_UARTTransmitText	;wreg free
  5867                           
  5868                           ;backgroundTasks.c: 90: UARTTransmitText(ipAdressToString(stack->source));
  5869  00251E  0101               	movlb	1	; () banked
  5870  002520  EE20 F083          	lfsr	2,131
  5871  002524  5185               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5872  002526  26D9               	addwf	fsr2l,f,c
  5873  002528  5186               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5874  00252A  22DA               	addwfc	fsr2h,f,c
  5875  00252C  CFDE F073          	movff	postinc2,ipAdressToString@ip
  5876  002530  CFDE F074          	movff	postinc2,ipAdressToString@ip+1
  5877  002534  CFDE F075          	movff	postinc2,ipAdressToString@ip+2
  5878  002538  CFDE F076          	movff	postinc2,ipAdressToString@ip+3
  5879  00253C  ECC9  F013         	call	_ipAdressToString	;wreg free
  5880  002540  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  5881  002544  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  5882  002548  EC09  F027         	call	_UARTTransmitText	;wreg free
  5883                           
  5884                           ;backgroundTasks.c: 91: UARTTransmitText("\n\r");
  5885  00254C  0ED4               	movlw	low (STR_23+35)
  5886  00254E  0100               	movlb	0	; () banked
  5887  002550  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5888  002552  0E7B               	movlw	high (STR_23+35)
  5889  002554  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5890  002556  EC09  F027         	call	_UARTTransmitText	;wreg free
  5891                           
  5892                           ;backgroundTasks.c: 92: ipv4_setIPSourceAddress(stack->source);
  5893  00255A  0101               	movlb	1	; () banked
  5894  00255C  EE20 F083          	lfsr	2,131
  5895  002560  5185               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5896  002562  26D9               	addwf	fsr2l,f,c
  5897  002564  5186               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5898  002566  22DA               	addwfc	fsr2h,f,c
  5899  002568  CFDE F060          	movff	postinc2,ipv4_setIPSourceAddress@ip
  5900  00256C  CFDE F061          	movff	postinc2,ipv4_setIPSourceAddress@ip+1
  5901  002570  CFDE F062          	movff	postinc2,ipv4_setIPSourceAddress@ip+2
  5902  002574  CFDE F063          	movff	postinc2,ipv4_setIPSourceAddress@ip+3
  5903  002578  EC5F  F02B         	call	_ipv4_setIPSourceAddress	;wreg free
  5904  00257C  0012               	return	
  5905  00257E                     l532:
  5906  00257E  0012               	return		;funcret
  5907  002580                     __end_of_handleStackBackgroundTasks:
  5908                           	opt stack 0
  5909                           tblptru	equ	0xFF8
  5910                           tblptrh	equ	0xFF7
  5911                           tblptrl	equ	0xFF6
  5912                           tablat	equ	0xFF5
  5913                           prodh	equ	0xFF4
  5914                           prodl	equ	0xFF3
  5915                           intcon	equ	0xFF2
  5916                           intcon3	equ	0xFF0
  5917                           indf0	equ	0xFEF
  5918                           postinc0	equ	0xFEE
  5919                           plusw0	equ	0xFEB
  5920                           fsr0h	equ	0xFEA
  5921                           fsr0l	equ	0xFE9
  5922                           wreg	equ	0xFE8
  5923                           indf1	equ	0xFE7
  5924                           postinc1	equ	0xFE6
  5925                           postdec1	equ	0xFE5
  5926                           plusw1	equ	0xFE3
  5927                           fsr1h	equ	0xFE2
  5928                           fsr1l	equ	0xFE1
  5929                           indf2	equ	0xFDF
  5930                           postinc2	equ	0xFDE
  5931                           postdec2	equ	0xFDD
  5932                           plusw2	equ	0xFDB
  5933                           fsr2h	equ	0xFDA
  5934                           fsr2l	equ	0xFD9
  5935                           status	equ	0xFD8
  5936                           
  5937 ;; *************** function _ipv4_setIPSourceAddress *****************
  5938 ;; Defined at:
  5939 ;;		line 235 in file "src/stack/protocols/ipv4.c"
  5940 ;; Parameters:    Size  Location     Type
  5941 ;;  ip              4    0[BANK0 ] struct ipv4_address
  5942 ;; Auto vars:     Size  Location     Type
  5943 ;;		None
  5944 ;; Return value:  Size  Location     Type
  5945 ;;                  1    wreg      void 
  5946 ;; Registers used:
  5947 ;;		None
  5948 ;; Tracked objects:
  5949 ;;		On entry : 0/0
  5950 ;;		On exit  : 0/0
  5951 ;;		Unchanged: 0/0
  5952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5953 ;;      Params:         0       4       0       0       0       0       0       0       0
  5954 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5955 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5956 ;;      Totals:         0       4       0       0       0       0       0       0       0
  5957 ;;Total ram usage:        4 bytes
  5958 ;; Hardware stack levels used:    1
  5959 ;; Hardware stack levels required when called:    4
  5960 ;; This function calls:
  5961 ;;		Nothing
  5962 ;; This function is called by:
  5963 ;;		_handleStackBackgroundTasks
  5964 ;; This function uses a non-reentrant model
  5965 ;;
  5966                           
  5967                           	psect	text11
  5968  0056BE                     __ptext11:
  5969                           	opt stack 0
  5970  0056BE                     _ipv4_setIPSourceAddress:
  5971                           	opt stack 25
  5972                           
  5973                           ;ipv4.c: 236: ipPreliminarySource = ip;
  5974                           
  5975                           ;incstack = 0
  5976  0056BE  C060  F198         	movff	ipv4_setIPSourceAddress@ip,_ipPreliminarySource
  5977  0056C2  C061  F199         	movff	ipv4_setIPSourceAddress@ip+1,_ipPreliminarySource+1
  5978  0056C6  C062  F19A         	movff	ipv4_setIPSourceAddress@ip+2,_ipPreliminarySource+2
  5979  0056CA  C063  F19B         	movff	ipv4_setIPSourceAddress@ip+3,_ipPreliminarySource+3
  5980                           
  5981                           ;ipv4.c: 237: fSrcAddrChanged = 1;
  5982  0056CE  804F               	bsf	_fSrcAddrChanged/(0+8),_fSrcAddrChanged& (0+7),c
  5983  0056D0  0012               	return		;funcret
  5984  0056D2                     __end_of_ipv4_setIPSourceAddress:
  5985                           	opt stack 0
  5986                           tblptru	equ	0xFF8
  5987                           tblptrh	equ	0xFF7
  5988                           tblptrl	equ	0xFF6
  5989                           tablat	equ	0xFF5
  5990                           prodh	equ	0xFF4
  5991                           prodl	equ	0xFF3
  5992                           intcon	equ	0xFF2
  5993                           intcon3	equ	0xFF0
  5994                           indf0	equ	0xFEF
  5995                           postinc0	equ	0xFEE
  5996                           plusw0	equ	0xFEB
  5997                           fsr0h	equ	0xFEA
  5998                           fsr0l	equ	0xFE9
  5999                           wreg	equ	0xFE8
  6000                           indf1	equ	0xFE7
  6001                           postinc1	equ	0xFE6
  6002                           postdec1	equ	0xFE5
  6003                           plusw1	equ	0xFE3
  6004                           fsr1h	equ	0xFE2
  6005                           fsr1l	equ	0xFE1
  6006                           indf2	equ	0xFDF
  6007                           postinc2	equ	0xFDE
  6008                           postdec2	equ	0xFDD
  6009                           plusw2	equ	0xFDB
  6010                           fsr2h	equ	0xFDA
  6011                           fsr2l	equ	0xFD9
  6012                           status	equ	0xFD8
  6013                           
  6014 ;; *************** function _ipv4_sendFrame *****************
  6015 ;; Defined at:
  6016 ;;		line 49 in file "src/stack/protocols/ipv4.c"
  6017 ;; Parameters:    Size  Location     Type
  6018 ;;  ipPacket       66   52[BANK1 ] struct ipv4_packet
  6019 ;; Auto vars:     Size  Location     Type
  6020 ;;  err             3  157[BANK0 ] struct error
  6021 ;;  index           1  156[BANK0 ] unsigned char 
  6022 ;; Return value:  Size  Location     Type
  6023 ;;                  3   52[BANK1 ] struct error
  6024 ;; Registers used:
  6025 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6026 ;; Tracked objects:
  6027 ;;		On entry : 0/0
  6028 ;;		On exit  : 0/0
  6029 ;;		Unchanged: 0/0
  6030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6031 ;;      Params:         0       0      66       0       0       0       0       0       0
  6032 ;;      Locals:         0       4       0       0       0       0       0       0       0
  6033 ;;      Temps:          0       0       8       0       0       0       0       0       0
  6034 ;;      Totals:         0       4      74       0       0       0       0       0       0
  6035 ;;Total ram usage:       78 bytes
  6036 ;; Hardware stack levels used:    1
  6037 ;; Hardware stack levels required when called:   11
  6038 ;; This function calls:
  6039 ;;		_UARTTransmitText
  6040 ;;		_arp_checkForEntry
  6041 ;;		_arp_getEntryFromTable
  6042 ;;		_arp_sendRequest
  6043 ;;		_ethernetController_getMacAddress
  6044 ;;		_ethernetController_sendPacket
  6045 ;;		_ethernetController_writeDestinationMACAddress
  6046 ;;		_getMillis
  6047 ;;		_ipAdressToString
  6048 ;;		_macToString
  6049 ;; This function is called by:
  6050 ;;		_handleStackBackgroundTasks
  6051 ;; This function uses a non-reentrant model
  6052 ;;
  6053                           
  6054                           	psect	text12
  6055  002580                     __ptext12:
  6056                           	opt stack 0
  6057  002580                     _ipv4_sendFrame:
  6058                           	opt stack 18
  6059                           
  6060                           ;ipv4.c: 50: error_t err;
  6061                           ;ipv4.c: 51: err.module = ERROR_MODULE_ARP;
  6062                           
  6063                           ;incstack = 0
  6064  002580  0E03               	movlw	3
  6065  002582  0100               	movlb	0	; () banked
  6066  002584  6FFD               	movwf	ipv4_sendFrame@err& (0+255),b
  6067                           
  6068                           ;ipv4.c: 52: err.code = ERROR_ARP_WAITING;
  6069  002586  0E01               	movlw	1
  6070  002588  6FFF               	movwf	(ipv4_sendFrame@err+2)& (0+255),b
  6071  00258A  0E91               	movlw	145
  6072  00258C  6FFE               	movwf	(ipv4_sendFrame@err+1)& (0+255),b
  6073                           
  6074                           ; BSR set to: 0
  6075                           ;ipv4.c: 53: uint8_t index;
  6076                           ;ipv4.c: 54: uint8_t static requestCounter = 0;
  6077                           ;ipv4.c: 55: time_t static oldTime = 0;
  6078                           ;ipv4.c: 58: if (arp_checkForEntry(ipPacket.ipv4Header.destination, &index)) {
  6079  00258E  C147  F067         	movff	ipv4_sendFrame@ipPacket+19,arp_checkForEntry@ip
  6080  002592  C148  F068         	movff	ipv4_sendFrame@ipPacket+20,arp_checkForEntry@ip+1
  6081  002596  C149  F069         	movff	ipv4_sendFrame@ipPacket+21,arp_checkForEntry@ip+2
  6082  00259A  C14A  F06A         	movff	ipv4_sendFrame@ipPacket+22,arp_checkForEntry@ip+3
  6083  00259E  0EFC               	movlw	low ipv4_sendFrame@index
  6084  0025A0  6F6B               	movwf	arp_checkForEntry@index& (0+255),b
  6085  0025A2  0E00               	movlw	high ipv4_sendFrame@index
  6086  0025A4  6F6C               	movwf	(arp_checkForEntry@index+1)& (0+255),b
  6087  0025A6  EC97  F020         	call	_arp_checkForEntry	;wreg free
  6088  0025AA  0900               	iorlw	0
  6089  0025AC  B4D8               	btfsc	status,2,c
  6090  0025AE  D078               	goto	l1129
  6091                           
  6092                           ;ipv4.c: 60: ipPacket.ethernet.destination = arp_getEntryFromTable(index);
  6093  0025B0  0100               	movlb	0	; () banked
  6094  0025B2  51FC               	movf	ipv4_sendFrame@index& (0+255),w,b
  6095  0025B4  ECE0  F029         	call	_arp_getEntryFromTable
  6096  0025B8  EE21  F05C         	lfsr	2,ipv4_sendFrame@ipPacket+40
  6097  0025BC  0E05               	movlw	5
  6098  0025BE                     u12171:
  6099  0025BE  CFEB FFDB          	movff	plusw0,plusw2
  6100  0025C2  06E8               	decf	wreg,f,c
  6101  0025C4  E2FC               	bc	u12171
  6102                           
  6103                           ;ipv4.c: 61: UARTTransmitText("[IPv4]: ");
  6104  0025C6  0E80               	movlw	low STR_96
  6105  0025C8  0100               	movlb	0	; () banked
  6106  0025CA  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6107  0025CC  0E7F               	movlw	high STR_96
  6108  0025CE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6109  0025D0  EC09  F027         	call	_UARTTransmitText	;wreg free
  6110                           
  6111                           ;ipv4.c: 62: UARTTransmitText(ipAdressToString(ipPacket.ipv4Header.destination));
  6112  0025D4  C147  F073         	movff	ipv4_sendFrame@ipPacket+19,ipAdressToString@ip
  6113  0025D8  C148  F074         	movff	ipv4_sendFrame@ipPacket+20,ipAdressToString@ip+1
  6114  0025DC  C149  F075         	movff	ipv4_sendFrame@ipPacket+21,ipAdressToString@ip+2
  6115  0025E0  C14A  F076         	movff	ipv4_sendFrame@ipPacket+22,ipAdressToString@ip+3
  6116  0025E4  ECC9  F013         	call	_ipAdressToString	;wreg free
  6117  0025E8  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  6118  0025EC  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  6119  0025F0  EC09  F027         	call	_UARTTransmitText	;wreg free
  6120                           
  6121                           ;ipv4.c: 63: UARTTransmitText(" is at ");
  6122  0025F4  0E9B               	movlw	low STR_97
  6123  0025F6  0100               	movlb	0	; () banked
  6124  0025F8  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6125  0025FA  0E7F               	movlw	high STR_97
  6126  0025FC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6127  0025FE  EC09  F027         	call	_UARTTransmitText	;wreg free
  6128                           
  6129                           ;ipv4.c: 64: UARTTransmitText(macToString(ipPacket.ethernet.destination));
  6130  002602  EE21  F05C         	lfsr	2,ipv4_sendFrame@ipPacket+40
  6131  002606  EE00  F07A         	lfsr	0,macToString@addr
  6132  00260A  0E05               	movlw	5
  6133  00260C                     u12181:
  6134  00260C  CFDB FFEB          	movff	plusw2,plusw0
  6135  002610  06E8               	decf	wreg,f,c
  6136  002612  E2FC               	bc	u12181
  6137  002614  EC8D  F01D         	call	_macToString	;wreg free
  6138  002618  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  6139  00261C  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  6140  002620  EC09  F027         	call	_UARTTransmitText	;wreg free
  6141                           
  6142                           ;ipv4.c: 65: UARTTransmitText("\n\r");
  6143  002624  0ED4               	movlw	low (STR_23+35)
  6144  002626  0100               	movlb	0	; () banked
  6145  002628  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6146  00262A  0E7B               	movlw	high (STR_23+35)
  6147  00262C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6148  00262E  EC09  F027         	call	_UARTTransmitText	;wreg free
  6149                           
  6150                           ;ipv4.c: 67: ipPacket.ethernet.source = ethernetController_getMacAddress();
  6151  002632  EC05  F025         	call	_ethernetController_getMacAddress	;wreg free
  6152  002636  EE21  F056         	lfsr	2,ipv4_sendFrame@ipPacket+34
  6153  00263A  0E05               	movlw	5
  6154  00263C                     u12191:
  6155  00263C  CFEB FFDB          	movff	plusw0,plusw2
  6156  002640  06E8               	decf	wreg,f,c
  6157  002642  E2FC               	bc	u12191
  6158                           
  6159                           ;ipv4.c: 69: ethernetController_writeDestinationMACAddress(ipPacket.ethernet.destination
      +                          , ipPacket.ethernet.memory);
  6160  002644  EE21  F05C         	lfsr	2,ipv4_sendFrame@ipPacket+40
  6161  002648  EE00  F06F         	lfsr	0,ethernetController_writeDestinationMACAddress@addr
  6162  00264C  0E05               	movlw	5
  6163  00264E                     u12201:
  6164  00264E  CFDB FFEB          	movff	plusw2,plusw0
  6165  002652  06E8               	decf	wreg,f,c
  6166  002654  E2FC               	bc	u12201
  6167  002656  EE21  F064         	lfsr	2,ipv4_sendFrame@ipPacket+48
  6168  00265A  EE00  F075         	lfsr	0,ethernetController_writeDestinationMACAddress@field
  6169  00265E  0E08               	movlw	8
  6170  002660                     u12211:
  6171  002660  CFDB FFEB          	movff	plusw2,plusw0
  6172  002664  06E8               	decf	wreg,f,c
  6173  002666  E2FC               	bc	u12211
  6174  002668  EC99  F023         	call	_ethernetController_writeDestinationMACAddress	;wreg free
  6175                           
  6176                           ;ipv4.c: 70: ethernetController_sendPacket(ipPacket.ethernet.memory);
  6177  00266C  EE21  F064         	lfsr	2,ipv4_sendFrame@ipPacket+48
  6178  002670  EE00  F072         	lfsr	0,ethernetController_sendPacket@field
  6179  002674  0E08               	movlw	8
  6180  002676                     u12221:
  6181  002676  CFDB FFEB          	movff	plusw2,plusw0
  6182  00267A  06E8               	decf	wreg,f,c
  6183  00267C  E2FC               	bc	u12221
  6184  00267E  EC73  F02A         	call	_ethernetController_sendPacket	;wreg free
  6185                           
  6186                           ;ipv4.c: 71: err.code = (uint16_t)0;
  6187  002682  0E00               	movlw	0
  6188  002684  0100               	movlb	0	; () banked
  6189  002686  6FFF               	movwf	(ipv4_sendFrame@err+2)& (0+255),b
  6190  002688  0E00               	movlw	0
  6191  00268A  6FFE               	movwf	(ipv4_sendFrame@err+1)& (0+255),b
  6192                           
  6193                           ; BSR set to: 0
  6194                           ;ipv4.c: 72: oldTime = 0;
  6195  00268C  0E00               	movlw	0
  6196  00268E  0101               	movlb	1	; () banked
  6197  002690  6F94               	movwf	ipv4_sendFrame@oldTime& (0+255),b
  6198  002692  0E00               	movlw	0
  6199  002694  6F95               	movwf	(ipv4_sendFrame@oldTime+1)& (0+255),b
  6200  002696  0E00               	movlw	0
  6201  002698  6F96               	movwf	(ipv4_sendFrame@oldTime+2)& (0+255),b
  6202  00269A  0E00               	movlw	0
  6203  00269C  6F97               	movwf	(ipv4_sendFrame@oldTime+3)& (0+255),b
  6204                           
  6205                           ;ipv4.c: 73: } else if ((getMillis() - oldTime) > 1000u || oldTime == 0) {
  6206  00269E  D072               	goto	l1131
  6207  0026A0                     l1129:
  6208                           
  6209                           ; BSR set to: 1
  6210  0026A0  C194  F176         	movff	ipv4_sendFrame@oldTime,??_ipv4_sendFrame
  6211  0026A4  C195  F177         	movff	ipv4_sendFrame@oldTime+1,??_ipv4_sendFrame+1
  6212  0026A8  C196  F178         	movff	ipv4_sendFrame@oldTime+2,??_ipv4_sendFrame+2
  6213  0026AC  C197  F179         	movff	ipv4_sendFrame@oldTime+3,??_ipv4_sendFrame+3
  6214  0026B0  0101               	movlb	1	; () banked
  6215  0026B2  1F76               	comf	??_ipv4_sendFrame& (0+255),f,b
  6216  0026B4  1F77               	comf	(??_ipv4_sendFrame+1)& (0+255),f,b
  6217  0026B6  1F78               	comf	(??_ipv4_sendFrame+2)& (0+255),f,b
  6218  0026B8  1F79               	comf	(??_ipv4_sendFrame+3)& (0+255),f,b
  6219  0026BA  2B76               	incf	??_ipv4_sendFrame& (0+255),f,b
  6220  0026BC  0E00               	movlw	0
  6221  0026BE  2377               	addwfc	(??_ipv4_sendFrame+1)& (0+255),f,b
  6222  0026C0  2378               	addwfc	(??_ipv4_sendFrame+2)& (0+255),f,b
  6223  0026C2  2379               	addwfc	(??_ipv4_sendFrame+3)& (0+255),f,b
  6224  0026C4  EC8E  F02B         	call	_getMillis	;wreg free
  6225  0026C8  0101               	movlb	1	; () banked
  6226  0026CA  5176               	movf	??_ipv4_sendFrame& (0+255),w,b
  6227  0026CC  0100               	movlb	0	; () banked
  6228  0026CE  2560               	addwf	?_getMillis& (0+255),w,b
  6229  0026D0  0101               	movlb	1	; () banked
  6230  0026D2  6F7A               	movwf	(??_ipv4_sendFrame+4)& (0+255),b
  6231  0026D4  5177               	movf	(??_ipv4_sendFrame+1)& (0+255),w,b
  6232  0026D6  0100               	movlb	0	; () banked
  6233  0026D8  2161               	addwfc	(?_getMillis+1)& (0+255),w,b
  6234  0026DA  0101               	movlb	1	; () banked
  6235  0026DC  6F7B               	movwf	(??_ipv4_sendFrame+5)& (0+255),b
  6236  0026DE  5178               	movf	(??_ipv4_sendFrame+2)& (0+255),w,b
  6237  0026E0  0100               	movlb	0	; () banked
  6238  0026E2  2162               	addwfc	(?_getMillis+2)& (0+255),w,b
  6239  0026E4  0101               	movlb	1	; () banked
  6240  0026E6  6F7C               	movwf	(??_ipv4_sendFrame+6)& (0+255),b
  6241  0026E8  5179               	movf	(??_ipv4_sendFrame+3)& (0+255),w,b
  6242  0026EA  0100               	movlb	0	; () banked
  6243  0026EC  2163               	addwfc	(?_getMillis+3)& (0+255),w,b
  6244  0026EE  0101               	movlb	1	; () banked
  6245  0026F0  6F7D               	movwf	(??_ipv4_sendFrame+7)& (0+255),b
  6246  0026F2  517D               	movf	(??_ipv4_sendFrame+7)& (0+255),w,b
  6247  0026F4  117C               	iorwf	(??_ipv4_sendFrame+6)& (0+255),w,b
  6248  0026F6  E10C               	bnz	l10207
  6249  0026F8  0EE9               	movlw	233
  6250  0026FA  5D7A               	subwf	(??_ipv4_sendFrame+4)& (0+255),w,b
  6251  0026FC  0E03               	movlw	3
  6252  0026FE  597B               	subwfb	(??_ipv4_sendFrame+5)& (0+255),w,b
  6253  002700  B0D8               	btfsc	status,0,c
  6254  002702  D006               	goto	u12240
  6255                           
  6256                           ; BSR set to: 1
  6257  002704  5194               	movf	ipv4_sendFrame@oldTime& (0+255),w,b
  6258  002706  1195               	iorwf	(ipv4_sendFrame@oldTime+1)& (0+255),w,b
  6259  002708  1196               	iorwf	(ipv4_sendFrame@oldTime+2)& (0+255),w,b
  6260  00270A  1197               	iorwf	(ipv4_sendFrame@oldTime+3)& (0+255),w,b
  6261  00270C  A4D8               	btfss	status,2,c
  6262  00270E  D03A               	goto	l1131
  6263  002710                     u12240:
  6264  002710                     l10207:
  6265                           
  6266                           ; BSR set to: 1
  6267                           ;ipv4.c: 74: UARTTransmitText("[IPv4]: Trying to resolve ");
  6268  002710  0EBD               	movlw	low STR_99
  6269  002712  0100               	movlb	0	; () banked
  6270  002714  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6271  002716  0E7D               	movlw	high STR_99
  6272  002718  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6273  00271A  EC09  F027         	call	_UARTTransmitText	;wreg free
  6274                           
  6275                           ;ipv4.c: 75: UARTTransmitText(ipAdressToString(ipPacket.ipv4Header.destination));
  6276  00271E  C147  F073         	movff	ipv4_sendFrame@ipPacket+19,ipAdressToString@ip
  6277  002722  C148  F074         	movff	ipv4_sendFrame@ipPacket+20,ipAdressToString@ip+1
  6278  002726  C149  F075         	movff	ipv4_sendFrame@ipPacket+21,ipAdressToString@ip+2
  6279  00272A  C14A  F076         	movff	ipv4_sendFrame@ipPacket+22,ipAdressToString@ip+3
  6280  00272E  ECC9  F013         	call	_ipAdressToString	;wreg free
  6281  002732  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  6282  002736  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  6283  00273A  EC09  F027         	call	_UARTTransmitText	;wreg free
  6284                           
  6285                           ;ipv4.c: 76: UARTTransmitText("\n\r");
  6286  00273E  0ED4               	movlw	low (STR_23+35)
  6287  002740  0100               	movlb	0	; () banked
  6288  002742  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6289  002744  0E7B               	movlw	high (STR_23+35)
  6290  002746  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6291  002748  EC09  F027         	call	_UARTTransmitText	;wreg free
  6292                           
  6293                           ;ipv4.c: 77: oldTime = getMillis();
  6294  00274C  EC8E  F02B         	call	_getMillis	;wreg free
  6295  002750  C060  F194         	movff	?_getMillis,ipv4_sendFrame@oldTime
  6296  002754  C061  F195         	movff	?_getMillis+1,ipv4_sendFrame@oldTime+1
  6297  002758  C062  F196         	movff	?_getMillis+2,ipv4_sendFrame@oldTime+2
  6298  00275C  C063  F197         	movff	?_getMillis+3,ipv4_sendFrame@oldTime+3
  6299                           
  6300                           ;ipv4.c: 78: arp_sendRequest(ipPacket.ipv4Header.destination, ipPacket.ipv4Header.destin
      +                          ation);
  6301  002760  C147  F100         	movff	ipv4_sendFrame@ipPacket+19,arp_sendRequest@ipSender
  6302  002764  C148  F101         	movff	ipv4_sendFrame@ipPacket+20,arp_sendRequest@ipSender+1
  6303  002768  C149  F102         	movff	ipv4_sendFrame@ipPacket+21,arp_sendRequest@ipSender+2
  6304  00276C  C14A  F103         	movff	ipv4_sendFrame@ipPacket+22,arp_sendRequest@ipSender+3
  6305  002770  C147  F104         	movff	ipv4_sendFrame@ipPacket+19,arp_sendRequest@ipTarget
  6306  002774  C148  F105         	movff	ipv4_sendFrame@ipPacket+20,arp_sendRequest@ipTarget+1
  6307  002778  C149  F106         	movff	ipv4_sendFrame@ipPacket+21,arp_sendRequest@ipTarget+2
  6308  00277C  C14A  F107         	movff	ipv4_sendFrame@ipPacket+22,arp_sendRequest@ipTarget+3
  6309  002780  EC37  F022         	call	_arp_sendRequest	;wreg free
  6310  002784                     l1131:
  6311                           
  6312                           ;ipv4.c: 79: }
  6313                           ;ipv4.c: 80: return err;
  6314  002784  C0FD  F134         	movff	ipv4_sendFrame@err,?_ipv4_sendFrame
  6315  002788  C0FE  F135         	movff	ipv4_sendFrame@err+1,?_ipv4_sendFrame+1
  6316  00278C  C0FF  F136         	movff	ipv4_sendFrame@err+2,?_ipv4_sendFrame+2
  6317  002790  0012               	return	
  6318  002792                     __end_of_ipv4_sendFrame:
  6319                           	opt stack 0
  6320                           tblptru	equ	0xFF8
  6321                           tblptrh	equ	0xFF7
  6322                           tblptrl	equ	0xFF6
  6323                           tablat	equ	0xFF5
  6324                           prodh	equ	0xFF4
  6325                           prodl	equ	0xFF3
  6326                           intcon	equ	0xFF2
  6327                           intcon3	equ	0xFF0
  6328                           indf0	equ	0xFEF
  6329                           postinc0	equ	0xFEE
  6330                           plusw0	equ	0xFEB
  6331                           fsr0h	equ	0xFEA
  6332                           fsr0l	equ	0xFE9
  6333                           wreg	equ	0xFE8
  6334                           indf1	equ	0xFE7
  6335                           postinc1	equ	0xFE6
  6336                           postdec1	equ	0xFE5
  6337                           plusw1	equ	0xFE3
  6338                           fsr1h	equ	0xFE2
  6339                           fsr1l	equ	0xFE1
  6340                           indf2	equ	0xFDF
  6341                           postinc2	equ	0xFDE
  6342                           postdec2	equ	0xFDD
  6343                           plusw2	equ	0xFDB
  6344                           fsr2h	equ	0xFDA
  6345                           fsr2l	equ	0xFD9
  6346                           status	equ	0xFD8
  6347                           
  6348 ;; *************** function _arp_getEntryFromTable *****************
  6349 ;; Defined at:
  6350 ;;		line 466 in file "src/stack/protocols/arp.c"
  6351 ;; Parameters:    Size  Location     Type
  6352 ;;  index           1    wreg     unsigned char 
  6353 ;; Auto vars:     Size  Location     Type
  6354 ;;  index           1    7[BANK0 ] unsigned char 
  6355 ;; Return value:  Size  Location     Type
  6356 ;;                  6    0[BANK0 ] struct macaddress
  6357 ;; Registers used:
  6358 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6359 ;; Tracked objects:
  6360 ;;		On entry : 0/0
  6361 ;;		On exit  : 0/0
  6362 ;;		Unchanged: 0/0
  6363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6364 ;;      Params:         0       7       0       0       0       0       0       0       0
  6365 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6366 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6367 ;;      Totals:         0       8       0       0       0       0       0       0       0
  6368 ;;Total ram usage:        8 bytes
  6369 ;; Hardware stack levels used:    1
  6370 ;; Hardware stack levels required when called:    4
  6371 ;; This function calls:
  6372 ;;		Nothing
  6373 ;; This function is called by:
  6374 ;;		_ipv4_sendFrame
  6375 ;; This function uses a non-reentrant model
  6376 ;;
  6377                           
  6378                           	psect	text13
  6379  0053C0                     __ptext13:
  6380                           	opt stack 0
  6381  0053C0                     _arp_getEntryFromTable:
  6382                           	opt stack 24
  6383                           
  6384                           ;incstack = 0
  6385                           ;arp_getEntryFromTable@index stored from wreg
  6386  0053C0  0100               	movlb	0	; () banked
  6387  0053C2  6F67               	movwf	arp_getEntryFromTable@index& (0+255),b
  6388                           
  6389                           ;arp.c: 467: return arp_table[index].mac;
  6390  0053C4  0100               	movlb	0	; () banked
  6391  0053C6  5167               	movf	arp_getEntryFromTable@index& (0+255),w,b
  6392  0053C8  0D0E               	mullw	14
  6393  0053CA  0E04               	movlw	4
  6394  0053CC  26F3               	addwf	prodl,f,c
  6395  0053CE  0E00               	movlw	0
  6396  0053D0  22F4               	addwfc	prodh,f,c
  6397  0053D2  0E00               	movlw	low _arp_table
  6398  0053D4  24F3               	addwf	prodl,w,c
  6399  0053D6  6ED9               	movwf	fsr2l,c
  6400  0053D8  0E03               	movlw	high _arp_table
  6401  0053DA  20F4               	addwfc	prodh,w,c
  6402  0053DC  6EDA               	movwf	fsr2h,c
  6403  0053DE  EE00  F060         	lfsr	0,?_arp_getEntryFromTable
  6404  0053E2  0E05               	movlw	5
  6405  0053E4                     u11681:
  6406  0053E4  CFDB FFEB          	movff	plusw2,plusw0
  6407  0053E8  06E8               	decf	wreg,f,c
  6408  0053EA  E2FC               	bc	u11681
  6409  0053EC  0012               	return	
  6410  0053EE                     __end_of_arp_getEntryFromTable:
  6411                           	opt stack 0
  6412                           tblptru	equ	0xFF8
  6413                           tblptrh	equ	0xFF7
  6414                           tblptrl	equ	0xFF6
  6415                           tablat	equ	0xFF5
  6416                           prodh	equ	0xFF4
  6417                           prodl	equ	0xFF3
  6418                           intcon	equ	0xFF2
  6419                           intcon3	equ	0xFF0
  6420                           indf0	equ	0xFEF
  6421                           postinc0	equ	0xFEE
  6422                           plusw0	equ	0xFEB
  6423                           fsr0h	equ	0xFEA
  6424                           fsr0l	equ	0xFE9
  6425                           wreg	equ	0xFE8
  6426                           indf1	equ	0xFE7
  6427                           postinc1	equ	0xFE6
  6428                           postdec1	equ	0xFE5
  6429                           plusw1	equ	0xFE3
  6430                           fsr1h	equ	0xFE2
  6431                           fsr1l	equ	0xFE1
  6432                           indf2	equ	0xFDF
  6433                           postinc2	equ	0xFDE
  6434                           postdec2	equ	0xFDD
  6435                           plusw2	equ	0xFDB
  6436                           fsr2h	equ	0xFDA
  6437                           fsr2l	equ	0xFD9
  6438                           status	equ	0xFD8
  6439                           
  6440 ;; *************** function _ipv4_background *****************
  6441 ;; Defined at:
  6442 ;;		line 242 in file "src/stack/protocols/ipv4.c"
  6443 ;; Parameters:    Size  Location     Type
  6444 ;;  link            1    wreg     enum E72
  6445 ;; Auto vars:     Size  Location     Type
  6446 ;;  link            1    0[COMRAM] enum E72
  6447 ;;  err             3   63[BANK0 ] struct error
  6448 ;; Return value:  Size  Location     Type
  6449 ;;                  3   58[BANK0 ] struct error
  6450 ;; Registers used:
  6451 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6452 ;; Tracked objects:
  6453 ;;		On entry : 0/0
  6454 ;;		On exit  : 0/0
  6455 ;;		Unchanged: 0/0
  6456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6457 ;;      Params:         0       3       0       0       0       0       0       0       0
  6458 ;;      Locals:         0       3       0       0       0       0       0       0       0
  6459 ;;      Temps:          0       2       0       0       0       0       0       0       0
  6460 ;;      Totals:         0       8       0       0       0       0       0       0       0
  6461 ;;Total ram usage:        8 bytes
  6462 ;; Hardware stack levels used:    1
  6463 ;; Hardware stack levels required when called:    5
  6464 ;; This function calls:
  6465 ;;		_UARTTransmitText
  6466 ;; This function is called by:
  6467 ;;		_handleStackBackgroundTasks
  6468 ;; This function uses a non-reentrant model
  6469 ;;
  6470                           
  6471                           	psect	text14
  6472  0032B0                     __ptext14:
  6473                           	opt stack 0
  6474  0032B0                     _ipv4_background:
  6475                           	opt stack 24
  6476                           
  6477                           ;ipv4.c: 243: error_t err;
  6478                           ;ipv4.c: 244: err.module = ERROR_MODULE_IPv4;
  6479                           
  6480                           ; BSR set to: 0
  6481                           ;incstack = 0
  6482  0032B0  0E04               	movlw	4
  6483  0032B2  0100               	movlb	0	; () banked
  6484  0032B4  6F9F               	movwf	ipv4_background@err& (0+255),b
  6485                           
  6486                           ;ipv4.c: 245: err.code = (uint16_t)0;
  6487  0032B6  0E00               	movlw	0
  6488  0032B8  6FA1               	movwf	(ipv4_background@err+2)& (0+255),b
  6489  0032BA  0E00               	movlw	0
  6490  0032BC  6FA0               	movwf	(ipv4_background@err+1)& (0+255),b
  6491                           
  6492                           ; BSR set to: 0
  6493                           ;ipv4.c: 246: if ((*arpStatus).module == ERROR_MODULE_ARP && fSrcAddrChanged) {
  6494  0032BE  C03C  FFD9         	movff	_arpStatus,fsr2l
  6495  0032C2  C03D  FFDA         	movff	_arpStatus+1,fsr2h
  6496  0032C6  0E03               	movlw	3
  6497  0032C8  18DE               	xorwf	postinc2,w,c
  6498  0032CA  A4D8               	btfss	status,2,c
  6499  0032CC  D098               	goto	l1171
  6500                           
  6501                           ; BSR set to: 0
  6502  0032CE  B04F               	btfsc	_fSrcAddrChanged/(0+8),_fSrcAddrChanged& (0+7),c
  6503  0032D0  D070               	goto	l1172
  6504  0032D2  D095               	goto	l1171
  6505  0032D4                     
  6506                           ; BSR set to: 0
  6507                           ;ipv4.c: 249: err = (*arpStatus);
  6508                           
  6509                           ; BSR set to: 0
  6510  0032D4  C03C  FFD9         	movff	_arpStatus,fsr2l
  6511  0032D8  C03D  FFDA         	movff	_arpStatus+1,fsr2h
  6512  0032DC  CFDE F09F          	movff	postinc2,ipv4_background@err
  6513  0032E0  CFDE F0A0          	movff	postinc2,ipv4_background@err+1
  6514  0032E4  CFDD F0A1          	movff	postdec2,ipv4_background@err+2
  6515                           
  6516                           ; BSR set to: 0
  6517                           ;ipv4.c: 250: UARTTransmitText("[IPv4]: ARP process completed.\n\r");
  6518  0032E8  0EAC               	movlw	low STR_112
  6519  0032EA  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6520  0032EC  0E7C               	movlw	high STR_112
  6521  0032EE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6522  0032F0  EC09  F027         	call	_UARTTransmitText	;wreg free
  6523                           
  6524                           ;ipv4.c: 251: ipSource = ipPreliminarySource;
  6525  0032F4  C198  F1A4         	movff	_ipPreliminarySource,_ipSource
  6526  0032F8  C199  F1A5         	movff	_ipPreliminarySource+1,_ipSource+1
  6527  0032FC  C19A  F1A6         	movff	_ipPreliminarySource+2,_ipSource+2
  6528  003300  C19B  F1A7         	movff	_ipPreliminarySource+3,_ipSource+3
  6529                           
  6530                           ;ipv4.c: 252: fSrcAddrChanged = 0;
  6531  003304  904F               	bcf	_fSrcAddrChanged/(0+8),_fSrcAddrChanged& (0+7),c
  6532                           
  6533                           ;ipv4.c: 253: return err;
  6534  003306  C09F  F09A         	movff	ipv4_background@err,?_ipv4_background
  6535  00330A  C0A0  F09B         	movff	ipv4_background@err+1,?_ipv4_background+1
  6536  00330E  C0A1  F09C         	movff	ipv4_background@err+2,?_ipv4_background+2
  6537  003312  0012               	return	
  6538  003314                     
  6539                           ;ipv4.c: 255: err = (*arpStatus);
  6540  003314  C03C  FFD9         	movff	_arpStatus,fsr2l
  6541  003318  C03D  FFDA         	movff	_arpStatus+1,fsr2h
  6542  00331C  CFDE F09F          	movff	postinc2,ipv4_background@err
  6543  003320  CFDE F0A0          	movff	postinc2,ipv4_background@err+1
  6544  003324  CFDD F0A1          	movff	postdec2,ipv4_background@err+2
  6545                           
  6546                           ;ipv4.c: 256: return err;
  6547  003328  C09F  F09A         	movff	ipv4_background@err,?_ipv4_background
  6548  00332C  C0A0  F09B         	movff	ipv4_background@err+1,?_ipv4_background+1
  6549  003330  C0A1  F09C         	movff	ipv4_background@err+2,?_ipv4_background+2
  6550  003334  0012               	return	
  6551  003336                     
  6552                           ;ipv4.c: 258: err.code = ERROR_IPv4_ADDRESS_ALREADY_IN_USE;
  6553  003336  0E01               	movlw	1
  6554  003338  0100               	movlb	0	; () banked
  6555  00333A  6FA1               	movwf	(ipv4_background@err+2)& (0+255),b
  6556  00333C  0EF5               	movlw	245
  6557  00333E  6FA0               	movwf	(ipv4_background@err+1)& (0+255),b
  6558                           
  6559                           ; BSR set to: 0
  6560                           ;ipv4.c: 259: UARTTransmitText("[IPv4]: Address conflict\n\r");
  6561  003340  0EA2               	movlw	low STR_113
  6562  003342  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6563  003344  0E7D               	movlw	high STR_113
  6564  003346  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6565  003348  EC09  F027         	call	_UARTTransmitText	;wreg free
  6566                           
  6567                           ;ipv4.c: 260: fSrcAddrChanged = 0;
  6568  00334C  904F               	bcf	_fSrcAddrChanged/(0+8),_fSrcAddrChanged& (0+7),c
  6569                           
  6570                           ;ipv4.c: 261: return err;
  6571  00334E  C09F  F09A         	movff	ipv4_background@err,?_ipv4_background
  6572  003352  C0A0  F09B         	movff	ipv4_background@err+1,?_ipv4_background+1
  6573  003356  C0A1  F09C         	movff	ipv4_background@err+2,?_ipv4_background+2
  6574  00335A  0012               	return	
  6575  00335C                     l1177:
  6576                           
  6577                           ; BSR set to: 0
  6578                           ;ipv4.c: 265: return err;
  6579  00335C  C09F  F09A         	movff	ipv4_background@err,?_ipv4_background
  6580  003360  C0A0  F09B         	movff	ipv4_background@err+1,?_ipv4_background+1
  6581  003364  C0A1  F09C         	movff	ipv4_background@err+2,?_ipv4_background+2
  6582  003368  0012               	return	
  6583  00336A                     
  6584                           ; BSR set to: 0
  6585                           ;ipv4.c: 267: err = (*arpStatus);
  6586                           
  6587                           ; BSR set to: 0
  6588  00336A  C03C  FFD9         	movff	_arpStatus,fsr2l
  6589  00336E  C03D  FFDA         	movff	_arpStatus+1,fsr2h
  6590  003372  CFDE F09F          	movff	postinc2,ipv4_background@err
  6591  003376  CFDE F0A0          	movff	postinc2,ipv4_background@err+1
  6592  00337A  CFDD F0A1          	movff	postdec2,ipv4_background@err+2
  6593                           
  6594                           ; BSR set to: 0
  6595                           ;ipv4.c: 268: fSrcAddrChanged = 0;
  6596  00337E  904F               	bcf	_fSrcAddrChanged/(0+8),_fSrcAddrChanged& (0+7),c
  6597                           
  6598                           ; BSR set to: 0
  6599                           ;ipv4.c: 269: return err;
  6600  003380  C09F  F09A         	movff	ipv4_background@err,?_ipv4_background
  6601  003384  C0A0  F09B         	movff	ipv4_background@err+1,?_ipv4_background+1
  6602  003388  C0A1  F09C         	movff	ipv4_background@err+2,?_ipv4_background+2
  6603                           
  6604                           ; BSR set to: 0
  6605  00338C  0012               	return	
  6606  00338E                     
  6607                           ; BSR set to: 0
  6608                           ;ipv4.c: 272: fSrcAddrChanged = 0;
  6609                           
  6610                           ; BSR set to: 0
  6611                           ;ipv4.c: 271: case ERROR_ARP_UNKNOWN:
  6612  00338E  904F               	bcf	_fSrcAddrChanged/(0+8),_fSrcAddrChanged& (0+7),c
  6613                           
  6614                           ; BSR set to: 0
  6615                           ;ipv4.c: 273: err = (*arpStatus);
  6616  003390  C03C  FFD9         	movff	_arpStatus,fsr2l
  6617  003394  C03D  FFDA         	movff	_arpStatus+1,fsr2h
  6618  003398  CFDE F09F          	movff	postinc2,ipv4_background@err
  6619  00339C  CFDE F0A0          	movff	postinc2,ipv4_background@err+1
  6620  0033A0  CFDD F0A1          	movff	postdec2,ipv4_background@err+2
  6621                           
  6622                           ; BSR set to: 0
  6623                           ;ipv4.c: 274: return err;
  6624  0033A4  C09F  F09A         	movff	ipv4_background@err,?_ipv4_background
  6625  0033A8  C0A0  F09B         	movff	ipv4_background@err+1,?_ipv4_background+1
  6626  0033AC  C0A1  F09C         	movff	ipv4_background@err+2,?_ipv4_background+2
  6627                           
  6628                           ; BSR set to: 0
  6629  0033B0  0012               	return	
  6630  0033B2                     l1172:
  6631                           
  6632                           ; BSR set to: 0
  6633                           
  6634                           ; BSR set to: 0
  6635  0033B2  EE20 F001          	lfsr	2,1
  6636  0033B6  503C               	movf	_arpStatus,w,c
  6637  0033B8  26D9               	addwf	fsr2l,f,c
  6638  0033BA  503D               	movf	_arpStatus+1,w,c
  6639  0033BC  22DA               	addwfc	fsr2h,f,c
  6640  0033BE  CFDE F09D          	movff	postinc2,??_ipv4_background
  6641  0033C2  CFDD F09E          	movff	postdec2,??_ipv4_background+1
  6642                           
  6643                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  6644                           ; Switch size 1, requested type "space"
  6645                           ; Number of cases is 2, Range of values is 0 to 1
  6646                           ; switch strategies available:
  6647                           ; Name         Instructions Cycles
  6648                           ; simple_byte            7     4 (average)
  6649                           ;	Chosen strategy is simple_byte
  6650  0033C6  519E               	movf	(??_ipv4_background+1)& (0+255),w,b
  6651  0033C8  0A00               	xorlw	0	; case 0
  6652  0033CA  B4D8               	btfsc	status,2,c
  6653  0033CC  D004               	goto	l11049
  6654  0033CE  0A01               	xorlw	1	; case 1
  6655  0033D0  B4D8               	btfsc	status,2,c
  6656  0033D2  D006               	goto	l11051
  6657  0033D4  D7DC               	goto	l1179
  6658  0033D6                     l11049:
  6659                           
  6660                           ; BSR set to: 0
  6661                           ; Switch size 1, requested type "space"
  6662                           ; Number of cases is 1, Range of values is 0 to 0
  6663                           ; switch strategies available:
  6664                           ; Name         Instructions Cycles
  6665                           ; simple_byte            4     3 (average)
  6666                           ;	Chosen strategy is simple_byte
  6667  0033D6  519D               	movf	??_ipv4_background& (0+255),w,b
  6668  0033D8  0A00               	xorlw	0	; case 0
  6669  0033DA  B4D8               	btfsc	status,2,c
  6670  0033DC  D77B               	goto	l1173
  6671  0033DE  D7D7               	goto	l1179
  6672  0033E0                     l11051:
  6673                           
  6674                           ; BSR set to: 0
  6675                           ; Switch size 1, requested type "space"
  6676                           ; Number of cases is 5, Range of values is 145 to 243
  6677                           ; switch strategies available:
  6678                           ; Name         Instructions Cycles
  6679                           ; simple_byte           16     9 (average)
  6680                           ;	Chosen strategy is simple_byte
  6681  0033E0  519D               	movf	??_ipv4_background& (0+255),w,b
  6682  0033E2  0A91               	xorlw	145	; case 145
  6683  0033E4  B4D8               	btfsc	status,2,c
  6684  0033E6  D796               	goto	l1175
  6685  0033E8  0A02               	xorlw	2	; case 147
  6686  0033EA  B4D8               	btfsc	status,2,c
  6687  0033EC  D7B7               	goto	l1177
  6688  0033EE  0A06               	xorlw	6	; case 149
  6689  0033F0  B4D8               	btfsc	status,2,c
  6690  0033F2  D7A1               	goto	l1176
  6691  0033F4  0A03               	xorlw	3	; case 150
  6692  0033F6  B4D8               	btfsc	status,2,c
  6693  0033F8  D7B8               	goto	l1178
  6694  0033FA  0A65               	xorlw	101	; case 243
  6695  0033FC  D7C8               	goto	l1179
  6696  0033FE                     l1171:
  6697                           
  6698                           ; BSR set to: 0
  6699                           ;ipv4.c: 277: err.code = ERROR_IPv4_UNKNOWN;
  6700                           
  6701                           ; BSR set to: 0
  6702  0033FE  0E02               	movlw	2
  6703  003400  6FA1               	movwf	(ipv4_background@err+2)& (0+255),b
  6704  003402  0E57               	movlw	87
  6705  003404  6FA0               	movwf	(ipv4_background@err+1)& (0+255),b
  6706                           
  6707                           ; BSR set to: 0
  6708                           ;ipv4.c: 278: return err;
  6709                           
  6710                           ; BSR set to: 0
  6711  003406  C09F  F09A         	movff	ipv4_background@err,?_ipv4_background
  6712  00340A  C0A0  F09B         	movff	ipv4_background@err+1,?_ipv4_background+1
  6713  00340E  C0A1  F09C         	movff	ipv4_background@err+2,?_ipv4_background+2
  6714  003412  0012               	return	
  6715  003414                     __end_of_ipv4_background:
  6716                           	opt stack 0
  6717                           tblptru	equ	0xFF8
  6718                           tblptrh	equ	0xFF7
  6719                           tblptrl	equ	0xFF6
  6720                           tablat	equ	0xFF5
  6721                           prodh	equ	0xFF4
  6722                           prodl	equ	0xFF3
  6723                           intcon	equ	0xFF2
  6724                           intcon3	equ	0xFF0
  6725                           indf0	equ	0xFEF
  6726                           postinc0	equ	0xFEE
  6727                           plusw0	equ	0xFEB
  6728                           fsr0h	equ	0xFEA
  6729                           fsr0l	equ	0xFE9
  6730                           wreg	equ	0xFE8
  6731                           indf1	equ	0xFE7
  6732                           postinc1	equ	0xFE6
  6733                           postdec1	equ	0xFE5
  6734                           plusw1	equ	0xFE3
  6735                           fsr1h	equ	0xFE2
  6736                           fsr1l	equ	0xFE1
  6737                           indf2	equ	0xFDF
  6738                           postinc2	equ	0xFDE
  6739                           postdec2	equ	0xFDD
  6740                           plusw2	equ	0xFDB
  6741                           fsr2h	equ	0xFDA
  6742                           fsr2l	equ	0xFD9
  6743                           status	equ	0xFD8
  6744                           
  6745 ;; *************** function _ethernet_rxGetNewFrame *****************
  6746 ;; Defined at:
  6747 ;;		line 55 in file "src/eth/ethernet.c"
  6748 ;; Parameters:    Size  Location     Type
  6749 ;;  frame           2  120[BANK1 ] PTR struct ethernetFrame
  6750 ;;		 -> stack(135), 
  6751 ;; Auto vars:     Size  Location     Type
  6752 ;;  err             3  130[BANK1 ] struct error
  6753 ;; Return value:  Size  Location     Type
  6754 ;;                  3  120[BANK1 ] struct error
  6755 ;; Registers used:
  6756 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6757 ;; Tracked objects:
  6758 ;;		On entry : 0/0
  6759 ;;		On exit  : 0/0
  6760 ;;		Unchanged: 0/0
  6761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6762 ;;      Params:         0       0       2       0       0       0       0       0       0
  6763 ;;      Locals:         0       0       3       0       0       0       0       0       0
  6764 ;;      Temps:          0       0       8       0       0       0       0       0       0
  6765 ;;      Totals:         0       0      13       0       0       0       0       0       0
  6766 ;;Total ram usage:       13 bytes
  6767 ;; Hardware stack levels used:    1
  6768 ;; Hardware stack levels required when called:   12
  6769 ;; This function calls:
  6770 ;;		_UARTTransmitInt
  6771 ;;		_UARTTransmitText
  6772 ;;		_arp_handleNewPacket
  6773 ;;		_etherTypeToString
  6774 ;;		_ethernetController_dropPacket
  6775 ;;		_ethernetController_getEtherTypeField
  6776 ;;		_ethernetController_getNextPacketPointer
  6777 ;;		_ethernetController_getRSV
  6778 ;;		_ethernetController_updateNextPacketPointer
  6779 ;;		_getMillis
  6780 ;;		_intToString
  6781 ;;		_ipv4_handleNewPacket
  6782 ;;		_macToString
  6783 ;; This function is called by:
  6784 ;;		_handleStackBackgroundTasks
  6785 ;; This function uses a non-reentrant model
  6786 ;;
  6787                           
  6788                           	psect	text15
  6789  0000EC                     __ptext15:
  6790                           	opt stack 0
  6791  0000EC                     _ethernet_rxGetNewFrame:
  6792                           	opt stack 17
  6793                           
  6794                           ;ethernet.c: 56: uint32_t static counter = 0;
  6795                           ;ethernet.c: 57: error_t err;
  6796                           ;ethernet.c: 58: err.module = ERROR_MODULE_ETHERNET;
  6797                           
  6798                           ;incstack = 0
  6799  0000EC  0E02               	movlw	2
  6800  0000EE  0101               	movlb	1	; () banked
  6801  0000F0  6F82               	movwf	ethernet_rxGetNewFrame@err& (0+255),b
  6802                           
  6803                           ;ethernet.c: 59: err.code = (uint16_t)0;
  6804  0000F2  0E00               	movlw	0
  6805  0000F4  6F84               	movwf	(ethernet_rxGetNewFrame@err+2)& (0+255),b
  6806  0000F6  0E00               	movlw	0
  6807  0000F8  6F83               	movwf	(ethernet_rxGetNewFrame@err+1)& (0+255),b
  6808                           
  6809                           ; BSR set to: 1
  6810                           ;ethernet.c: 62: frame->tReceived = getMillis();
  6811  0000FA  EC8E  F02B         	call	_getMillis	;wreg free
  6812  0000FE  0101               	movlb	1	; () banked
  6813  000100  EE20 F01E          	lfsr	2,30
  6814  000104  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6815  000106  26D9               	addwf	fsr2l,f,c
  6816  000108  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6817  00010A  22DA               	addwfc	fsr2h,f,c
  6818  00010C  0100               	movlb	0	; () banked
  6819  00010E  C060  FFDE         	movff	?_getMillis,postinc2
  6820  000112  C061  FFDE         	movff	?_getMillis+1,postinc2
  6821  000116  C062  FFDE         	movff	?_getMillis+2,postinc2
  6822  00011A  C063  FFDE         	movff	?_getMillis+3,postinc2
  6823                           
  6824                           ; BSR set to: 0
  6825                           ;ethernet.c: 63: frame->memory.start = ethernetController_getNextPacketPointer();
  6826  00011E  ECA6  F02B         	call	_ethernetController_getNextPacketPointer	;wreg free
  6827  000122  0101               	movlb	1	; () banked
  6828  000124  EE20 F010          	lfsr	2,16
  6829  000128  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6830  00012A  26D9               	addwf	fsr2l,f,c
  6831  00012C  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6832  00012E  22DA               	addwfc	fsr2h,f,c
  6833  000130  0100               	movlb	0	; () banked
  6834  000132  C062  FFDE         	movff	?_ethernetController_getNextPacketPointer,postinc2
  6835  000136  C063  FFDD         	movff	?_ethernetController_getNextPacketPointer+1,postdec2
  6836                           
  6837                           ; BSR set to: 0
  6838                           ;ethernet.c: 64: ethernetController_updateNextPacketPointer();
  6839  00013A  EC18  F024         	call	_ethernetController_updateNextPacketPointer	;wreg free
  6840                           
  6841                           ;ethernet.c: 65: frame->memory.fIsAssigned = 1;
  6842  00013E  0101               	movlb	1	; () banked
  6843  000140  EE20 F016          	lfsr	2,22
  6844  000144  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6845  000146  26D9               	addwf	fsr2l,f,c
  6846  000148  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6847  00014A  22DA               	addwfc	fsr2h,f,c
  6848  00014C  0E01               	movlw	1
  6849  00014E  6EDF               	movwf	indf2,c
  6850                           
  6851                           ; BSR set to: 1
  6852                           ;ethernet.c: 66: frame->receiveStatusVector = ethernetController_getRSV(frame->memory.st
      +                          art);
  6853  000150  EE20 F010          	lfsr	2,16
  6854  000154  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6855  000156  26D9               	addwf	fsr2l,f,c
  6856  000158  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6857  00015A  22DA               	addwfc	fsr2h,f,c
  6858  00015C  CFDE F071          	movff	postinc2,ethernetController_getRSV@address
  6859  000160  CFDD F072          	movff	postdec2,ethernetController_getRSV@address+1
  6860  000164  EC91  F024         	call	_ethernetController_getRSV	;wreg free
  6861  000168  0101               	movlb	1	; () banked
  6862  00016A  EE20 F019          	lfsr	2,25
  6863  00016E  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6864  000170  26D9               	addwf	fsr2l,f,c
  6865  000172  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6866  000174  22DA               	addwfc	fsr2h,f,c
  6867  000176  0E04               	movlw	4
  6868  000178                     u12051:
  6869  000178  CFEB FFDB          	movff	plusw0,plusw2
  6870  00017C  06E8               	decf	wreg,f,c
  6871  00017E  E2FC               	bc	u12051
  6872                           
  6873                           ; BSR set to: 1
  6874                           ;ethernet.c: 67: frame->memory.length = frame->receiveStatusVector.length;
  6875  000180  EE20 F019          	lfsr	2,25
  6876  000184  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6877  000186  26D9               	addwf	fsr2l,f,c
  6878  000188  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6879  00018A  22DA               	addwfc	fsr2h,f,c
  6880  00018C  EE10 F014          	lfsr	1,20
  6881  000190  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6882  000192  26E1               	addwf	fsr1l,f,c
  6883  000194  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6884  000196  22E2               	addwfc	fsr1h,f,c
  6885  000198  CFDE FFE6          	movff	postinc2,postinc1
  6886  00019C  CFDD FFE5          	movff	postdec2,postdec1
  6887                           
  6888                           ; BSR set to: 1
  6889                           ;ethernet.c: 71: if (frame->memory.start + frame->memory.length > 0x5FFF) {
  6890  0001A0  EE20 F014          	lfsr	2,20
  6891  0001A4  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6892  0001A6  26D9               	addwf	fsr2l,f,c
  6893  0001A8  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6894  0001AA  22DA               	addwfc	fsr2h,f,c
  6895  0001AC  CFDE F17A          	movff	postinc2,??_ethernet_rxGetNewFrame
  6896  0001B0  CFDD F17B          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  6897  0001B4  EE20 F010          	lfsr	2,16
  6898  0001B8  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6899  0001BA  26D9               	addwf	fsr2l,f,c
  6900  0001BC  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6901  0001BE  22DA               	addwfc	fsr2h,f,c
  6902  0001C0  CFDE F17C          	movff	postinc2,??_ethernet_rxGetNewFrame+2
  6903  0001C4  CFDD F17D          	movff	postdec2,??_ethernet_rxGetNewFrame+3
  6904  0001C8  517A               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  6905  0001CA  277C               	addwf	(??_ethernet_rxGetNewFrame+2)& (0+255),f,b
  6906  0001CC  517B               	movf	(??_ethernet_rxGetNewFrame+1)& (0+255),w,b
  6907  0001CE  237D               	addwfc	(??_ethernet_rxGetNewFrame+3)& (0+255),f,b
  6908  0001D0  0E60               	movlw	96
  6909  0001D2  5D7D               	subwf	(??_ethernet_rxGetNewFrame+3)& (0+255),w,b
  6910  0001D4  A0D8               	btfss	status,0,c
  6911  0001D6  D03B               	goto	l366
  6912                           
  6913                           ; BSR set to: 1
  6914                           ;ethernet.c: 73: frame->memory.end = frame->memory.length - ((0x5FFF - 0x3000) - frame->
      +                          memory.start) + 0x3000;
  6915  0001D8  0E00               	movlw	0
  6916  0001DA  6F7A               	movwf	??_ethernet_rxGetNewFrame& (0+255),b
  6917  0001DC  0E30               	movlw	48
  6918  0001DE  6F7B               	movwf	(??_ethernet_rxGetNewFrame+1)& (0+255),b
  6919  0001E0  EE20 F014          	lfsr	2,20
  6920  0001E4  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6921  0001E6  26D9               	addwf	fsr2l,f,c
  6922  0001E8  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6923  0001EA  22DA               	addwfc	fsr2h,f,c
  6924  0001EC  CFDE F17C          	movff	postinc2,??_ethernet_rxGetNewFrame+2
  6925  0001F0  CFDD F17D          	movff	postdec2,??_ethernet_rxGetNewFrame+3
  6926  0001F4  0EFF               	movlw	255
  6927  0001F6  6F7E               	movwf	(??_ethernet_rxGetNewFrame+4)& (0+255),b
  6928  0001F8  0E2F               	movlw	47
  6929  0001FA  6F7F               	movwf	(??_ethernet_rxGetNewFrame+5)& (0+255),b
  6930  0001FC  EE20 F010          	lfsr	2,16
  6931  000200  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6932  000202  26D9               	addwf	fsr2l,f,c
  6933  000204  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6934  000206  22DA               	addwfc	fsr2h,f,c
  6935  000208  CFDE F180          	movff	postinc2,??_ethernet_rxGetNewFrame+6
  6936  00020C  CFDD F181          	movff	postdec2,??_ethernet_rxGetNewFrame+7
  6937  000210  1F80               	comf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  6938  000212  1F81               	comf	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  6939  000214  4B80               	infsnz	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  6940  000216  2B81               	incf	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  6941  000218  517E               	movf	(??_ethernet_rxGetNewFrame+4)& (0+255),w,b
  6942  00021A  2780               	addwf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  6943  00021C  517F               	movf	(??_ethernet_rxGetNewFrame+5)& (0+255),w,b
  6944  00021E  2381               	addwfc	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  6945  000220  1F80               	comf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  6946  000222  1F81               	comf	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  6947  000224  4B80               	infsnz	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  6948  000226  2B81               	incf	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  6949  000228  517C               	movf	(??_ethernet_rxGetNewFrame+2)& (0+255),w,b
  6950  00022A  2780               	addwf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  6951  00022C  517D               	movf	(??_ethernet_rxGetNewFrame+3)& (0+255),w,b
  6952  00022E  2381               	addwfc	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  6953  000230  517A               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  6954  000232  2780               	addwf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  6955  000234  517B               	movf	(??_ethernet_rxGetNewFrame+1)& (0+255),w,b
  6956  000236  2381               	addwfc	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  6957  000238  EE20 F012          	lfsr	2,18
  6958  00023C  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6959  00023E  26D9               	addwf	fsr2l,f,c
  6960  000240  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6961  000242  22DA               	addwfc	fsr2h,f,c
  6962  000244  C180  FFDE         	movff	??_ethernet_rxGetNewFrame+6,postinc2
  6963  000248  C181  FFDD         	movff	??_ethernet_rxGetNewFrame+7,postdec2
  6964                           
  6965                           ;ethernet.c: 74: } else {
  6966  00024C  D022               	goto	l367
  6967  00024E                     l366:
  6968                           
  6969                           ; BSR set to: 1
  6970                           ;ethernet.c: 75: frame->memory.end = frame->memory.start + frame->memory.length;
  6971                           
  6972                           ; BSR set to: 1
  6973  00024E  EE20 F014          	lfsr	2,20
  6974  000252  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6975  000254  26D9               	addwf	fsr2l,f,c
  6976  000256  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6977  000258  22DA               	addwfc	fsr2h,f,c
  6978  00025A  CFDE F17A          	movff	postinc2,??_ethernet_rxGetNewFrame
  6979  00025E  CFDD F17B          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  6980  000262  EE20 F010          	lfsr	2,16
  6981  000266  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6982  000268  26D9               	addwf	fsr2l,f,c
  6983  00026A  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6984  00026C  22DA               	addwfc	fsr2h,f,c
  6985  00026E  CFDE F17C          	movff	postinc2,??_ethernet_rxGetNewFrame+2
  6986  000272  CFDD F17D          	movff	postdec2,??_ethernet_rxGetNewFrame+3
  6987  000276  517A               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  6988  000278  277C               	addwf	(??_ethernet_rxGetNewFrame+2)& (0+255),f,b
  6989  00027A  517B               	movf	(??_ethernet_rxGetNewFrame+1)& (0+255),w,b
  6990  00027C  237D               	addwfc	(??_ethernet_rxGetNewFrame+3)& (0+255),f,b
  6991  00027E  EE20 F012          	lfsr	2,18
  6992  000282  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6993  000284  26D9               	addwf	fsr2l,f,c
  6994  000286  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6995  000288  22DA               	addwfc	fsr2h,f,c
  6996  00028A  C17C  FFDE         	movff	??_ethernet_rxGetNewFrame+2,postinc2
  6997  00028E  C17D  FFDD         	movff	??_ethernet_rxGetNewFrame+3,postdec2
  6998  000292                     l367:
  6999                           
  7000                           ; BSR set to: 1
  7001                           ;ethernet.c: 76: }
  7002                           ;ethernet.c: 77: frame->ethertype = ethernetController_getEtherTypeField(frame->memory);
  7003                           
  7004                           ; BSR set to: 1
  7005  000292  EE20 F010          	lfsr	2,16
  7006  000296  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7007  000298  26D9               	addwf	fsr2l,f,c
  7008  00029A  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7009  00029C  22DA               	addwfc	fsr2h,f,c
  7010  00029E  EE00  F06F         	lfsr	0,ethernetController_getEtherTypeField@field
  7011  0002A2  0E08               	movlw	8
  7012  0002A4                     u12071:
  7013  0002A4  CFDB FFEB          	movff	plusw2,plusw0
  7014  0002A8  06E8               	decf	wreg,f,c
  7015  0002AA  E2FC               	bc	u12071
  7016  0002AC  EC78  F025         	call	_ethernetController_getEtherTypeField	;wreg free
  7017  0002B0  0101               	movlb	1	; () banked
  7018  0002B2  EE20 F00E          	lfsr	2,14
  7019  0002B6  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7020  0002B8  26D9               	addwf	fsr2l,f,c
  7021  0002BA  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7022  0002BC  22DA               	addwfc	fsr2h,f,c
  7023  0002BE  0100               	movlb	0	; () banked
  7024  0002C0  C06F  FFDE         	movff	?_ethernetController_getEtherTypeField,postinc2
  7025  0002C4  C070  FFDD         	movff	?_ethernetController_getEtherTypeField+1,postdec2
  7026                           
  7027                           ; BSR set to: 0
  7028                           ;ethernet.c: 79: UARTTransmitText("[");
  7029  0002C8  0EC2               	movlw	low (STR_72+3)
  7030  0002CA  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7031  0002CC  0E7F               	movlw	high (STR_72+3)
  7032  0002CE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7033  0002D0  EC09  F027         	call	_UARTTransmitText	;wreg free
  7034                           
  7035                           ;ethernet.c: 80: UARTTransmitText(intToString(counter++));
  7036  0002D4  C035  F084         	movff	ethernet_rxGetNewFrame@counter,intToString@val
  7037  0002D8  C036  F085         	movff	ethernet_rxGetNewFrame@counter+1,intToString@val+1
  7038  0002DC  C037  F086         	movff	ethernet_rxGetNewFrame@counter+2,intToString@val+2
  7039  0002E0  C038  F087         	movff	ethernet_rxGetNewFrame@counter+3,intToString@val+3
  7040  0002E4  EC97  F029         	call	_intToString	;wreg free
  7041  0002E8  C084  F098         	movff	?_intToString,UARTTransmitText@str
  7042  0002EC  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  7043  0002F0  EC09  F027         	call	_UARTTransmitText	;wreg free
  7044  0002F4  0E01               	movlw	1
  7045  0002F6  2635               	addwf	ethernet_rxGetNewFrame@counter,f,c
  7046  0002F8  0E00               	movlw	0
  7047  0002FA  2236               	addwfc	ethernet_rxGetNewFrame@counter+1,f,c
  7048  0002FC  2237               	addwfc	ethernet_rxGetNewFrame@counter+2,f,c
  7049  0002FE  2238               	addwfc	ethernet_rxGetNewFrame@counter+3,f,c
  7050                           
  7051                           ;ethernet.c: 81: UARTTransmitText("]");
  7052  000300  0EFA               	movlw	low (STR_19+1)
  7053  000302  0100               	movlb	0	; () banked
  7054  000304  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7055  000306  0E7F               	movlw	high (STR_19+1)
  7056  000308  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7057  00030A  EC09  F027         	call	_UARTTransmitText	;wreg free
  7058                           
  7059                           ;ethernet.c: 84: if (frame->receiveStatusVector.broadcast)
  7060  00030E  0101               	movlb	1	; () banked
  7061  000310  EE20 F01B          	lfsr	2,27
  7062  000314  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7063  000316  26D9               	addwf	fsr2l,f,c
  7064  000318  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7065  00031A  22DA               	addwfc	fsr2h,f,c
  7066  00031C  AEDF               	btfss	indf2,7,c
  7067  00031E  D007               	goto	l368
  7068                           
  7069                           ; BSR set to: 1
  7070                           ;ethernet.c: 85: UARTTransmitText("[Broadcast]");
  7071  000320  0E55               	movlw	low STR_3
  7072  000322  0100               	movlb	0	; () banked
  7073  000324  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7074  000326  0E7F               	movlw	high STR_3
  7075  000328  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7076  00032A  EC09  F027         	call	_UARTTransmitText	;wreg free
  7077  00032E                     l368:
  7078                           
  7079                           ;ethernet.c: 86: if (frame->receiveStatusVector.unicast)
  7080  00032E  0101               	movlb	1	; () banked
  7081  000330  EE20 F01D          	lfsr	2,29
  7082  000334  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7083  000336  26D9               	addwf	fsr2l,f,c
  7084  000338  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7085  00033A  22DA               	addwfc	fsr2h,f,c
  7086  00033C  A4DF               	btfss	indf2,2,c
  7087  00033E  D007               	goto	l369
  7088                           
  7089                           ; BSR set to: 1
  7090                           ;ethernet.c: 87: UARTTransmitText("[Unicast]");
  7091  000340  0E76               	movlw	low STR_4
  7092  000342  0100               	movlb	0	; () banked
  7093  000344  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7094  000346  0E7F               	movlw	high STR_4
  7095  000348  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7096  00034A  EC09  F027         	call	_UARTTransmitText	;wreg free
  7097  00034E                     l369:
  7098                           
  7099                           ;ethernet.c: 88: if (!frame->receiveStatusVector.receivedOk)
  7100  00034E  0101               	movlb	1	; () banked
  7101  000350  EE20 F01B          	lfsr	2,27
  7102  000354  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7103  000356  26D9               	addwf	fsr2l,f,c
  7104  000358  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7105  00035A  22DA               	addwfc	fsr2h,f,c
  7106  00035C  BADF               	btfsc	indf2,5,c
  7107  00035E  D007               	goto	l370
  7108                           
  7109                           ; BSR set to: 1
  7110                           ;ethernet.c: 89: UARTTransmitText("[Symbol Errors]");
  7111  000360  0ED9               	movlw	low STR_5
  7112  000362  0100               	movlb	0	; () banked
  7113  000364  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7114  000366  0E7E               	movlw	high STR_5
  7115  000368  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7116  00036A  EC09  F027         	call	_UARTTransmitText	;wreg free
  7117  00036E                     l370:
  7118                           
  7119                           ;ethernet.c: 91: UARTTransmitText("[");
  7120  00036E  0EC2               	movlw	low (STR_72+3)
  7121  000370  0100               	movlb	0	; () banked
  7122  000372  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7123  000374  0E7F               	movlw	high (STR_72+3)
  7124  000376  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7125  000378  EC09  F027         	call	_UARTTransmitText	;wreg free
  7126                           
  7127                           ;ethernet.c: 92: UARTTransmitText(intToString(frame->tReceived));
  7128  00037C  0101               	movlb	1	; () banked
  7129  00037E  EE20 F01E          	lfsr	2,30
  7130  000382  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7131  000384  26D9               	addwf	fsr2l,f,c
  7132  000386  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7133  000388  22DA               	addwfc	fsr2h,f,c
  7134  00038A  CFDE F084          	movff	postinc2,intToString@val
  7135  00038E  CFDE F085          	movff	postinc2,intToString@val+1
  7136  000392  CFDE F086          	movff	postinc2,intToString@val+2
  7137  000396  CFDE F087          	movff	postinc2,intToString@val+3
  7138  00039A  EC97  F029         	call	_intToString	;wreg free
  7139  00039E  C084  F098         	movff	?_intToString,UARTTransmitText@str
  7140  0003A2  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  7141  0003A6  EC09  F027         	call	_UARTTransmitText	;wreg free
  7142                           
  7143                           ;ethernet.c: 93: UARTTransmitText("]");
  7144  0003AA  0EFA               	movlw	low (STR_19+1)
  7145  0003AC  0100               	movlb	0	; () banked
  7146  0003AE  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7147  0003B0  0E7F               	movlw	high (STR_19+1)
  7148  0003B2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7149  0003B4  EC09  F027         	call	_UARTTransmitText	;wreg free
  7150                           
  7151                           ;ethernet.c: 99: switch (frame->ethertype) {
  7152  0003B8  D097               	goto	l371
  7153  0003BA                     
  7154                           ;ethernet.c: 101: UARTTransmitText("[ARP]");
  7155  0003BA  0EB9               	movlw	low STR_8
  7156  0003BC  0100               	movlb	0	; () banked
  7157  0003BE  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7158  0003C0  0E7F               	movlw	high STR_8
  7159  0003C2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7160  0003C4  EC09  F027         	call	_UARTTransmitText	;wreg free
  7161                           
  7162                           ;ethernet.c: 102: arp_handleNewPacket(frame);
  7163  0003C8  C178  F0FC         	movff	ethernet_rxGetNewFrame@frame,arp_handleNewPacket@frame
  7164  0003CC  C179  F0FD         	movff	ethernet_rxGetNewFrame@frame+1,arp_handleNewPacket@frame+1
  7165  0003D0  ECC0  F014         	call	_arp_handleNewPacket	;wreg free
  7166                           
  7167                           ;ethernet.c: 103: break;
  7168  0003D4  D0A0               	goto	l373
  7169  0003D6                     
  7170                           ;ethernet.c: 105: UARTTransmitText("[IPv4]");
  7171  0003D6  0EB2               	movlw	low STR_9
  7172  0003D8  0100               	movlb	0	; () banked
  7173  0003DA  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7174  0003DC  0E7F               	movlw	high STR_9
  7175  0003DE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7176  0003E0  EC09  F027         	call	_UARTTransmitText	;wreg free
  7177                           
  7178                           ;ethernet.c: 106: ipv4_handleNewPacket(frame);
  7179  0003E4  C178  F0B5         	movff	ethernet_rxGetNewFrame@frame,ipv4_handleNewPacket@frame
  7180  0003E8  C179  F0B6         	movff	ethernet_rxGetNewFrame@frame+1,ipv4_handleNewPacket@frame+1
  7181  0003EC  EC97  F015         	call	_ipv4_handleNewPacket	;wreg free
  7182                           
  7183                           ;ethernet.c: 107: break;
  7184  0003F0  D092               	goto	l373
  7185  0003F2                     
  7186                           ;ethernet.c: 109: UARTTransmitText("[Unknown EtherType]");
  7187  0003F2  0E35               	movlw	low STR_10
  7188  0003F4  0100               	movlb	0	; () banked
  7189  0003F6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7190  0003F8  0E7E               	movlw	high STR_10
  7191  0003FA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7192  0003FC  EC09  F027         	call	_UARTTransmitText	;wreg free
  7193                           
  7194                           ;ethernet.c: 110: UARTTransmitText("[");
  7195  000400  0EC2               	movlw	low (STR_72+3)
  7196  000402  0100               	movlb	0	; () banked
  7197  000404  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7198  000406  0E7F               	movlw	high (STR_72+3)
  7199  000408  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7200  00040A  EC09  F027         	call	_UARTTransmitText	;wreg free
  7201                           
  7202                           ;ethernet.c: 111: UARTTransmitText(macToString(frame->source));
  7203  00040E  0101               	movlb	1	; () banked
  7204  000410  EE20 F002          	lfsr	2,2
  7205  000414  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7206  000416  26D9               	addwf	fsr2l,f,c
  7207  000418  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7208  00041A  22DA               	addwfc	fsr2h,f,c
  7209  00041C  EE00  F07A         	lfsr	0,macToString@addr
  7210  000420  0E05               	movlw	5
  7211  000422                     u12111:
  7212  000422  CFDB FFEB          	movff	plusw2,plusw0
  7213  000426  06E8               	decf	wreg,f,c
  7214  000428  E2FC               	bc	u12111
  7215  00042A  EC8D  F01D         	call	_macToString	;wreg free
  7216  00042E  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  7217  000432  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  7218  000436  EC09  F027         	call	_UARTTransmitText	;wreg free
  7219                           
  7220                           ;ethernet.c: 112: UARTTransmitText("->");
  7221  00043A  0EF3               	movlw	low STR_12
  7222  00043C  0100               	movlb	0	; () banked
  7223  00043E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7224  000440  0E7F               	movlw	high STR_12
  7225  000442  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7226  000444  EC09  F027         	call	_UARTTransmitText	;wreg free
  7227                           
  7228                           ;ethernet.c: 113: UARTTransmitText(macToString(frame->destination));
  7229  000448  0101               	movlb	1	; () banked
  7230  00044A  EE20 F008          	lfsr	2,8
  7231  00044E  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7232  000450  26D9               	addwf	fsr2l,f,c
  7233  000452  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7234  000454  22DA               	addwfc	fsr2h,f,c
  7235  000456  EE00  F07A         	lfsr	0,macToString@addr
  7236  00045A  0E05               	movlw	5
  7237  00045C                     u12121:
  7238  00045C  CFDB FFEB          	movff	plusw2,plusw0
  7239  000460  06E8               	decf	wreg,f,c
  7240  000462  E2FC               	bc	u12121
  7241  000464  EC8D  F01D         	call	_macToString	;wreg free
  7242  000468  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  7243  00046C  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  7244  000470  EC09  F027         	call	_UARTTransmitText	;wreg free
  7245                           
  7246                           ;ethernet.c: 114: UARTTransmitText("][");
  7247  000474  0EF6               	movlw	low STR_13
  7248  000476  0100               	movlb	0	; () banked
  7249  000478  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7250  00047A  0E7F               	movlw	high STR_13
  7251  00047C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7252  00047E  EC09  F027         	call	_UARTTransmitText	;wreg free
  7253                           
  7254                           ;ethernet.c: 115: UARTTransmitText(etherTypeToString(frame->ethertype));
  7255  000482  0101               	movlb	1	; () banked
  7256  000484  EE20 F00E          	lfsr	2,14
  7257  000488  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7258  00048A  26D9               	addwf	fsr2l,f,c
  7259  00048C  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7260  00048E  22DA               	addwfc	fsr2h,f,c
  7261  000490  CFDE F060          	movff	postinc2,etherTypeToString@ethertype
  7262  000494  CFDD F061          	movff	postdec2,etherTypeToString@ethertype+1
  7263  000498  EC49  F028         	call	_etherTypeToString	;wreg free
  7264  00049C  C060  F098         	movff	?_etherTypeToString,UARTTransmitText@str
  7265  0004A0  C061  F099         	movff	?_etherTypeToString+1,UARTTransmitText@str+1
  7266  0004A4  EC09  F027         	call	_UARTTransmitText	;wreg free
  7267                           
  7268                           ;ethernet.c: 116: UARTTransmitText("][L=");
  7269  0004A8  0ED8               	movlw	low STR_14
  7270  0004AA  0100               	movlb	0	; () banked
  7271  0004AC  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7272  0004AE  0E7F               	movlw	high STR_14
  7273  0004B0  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7274  0004B2  EC09  F027         	call	_UARTTransmitText	;wreg free
  7275                           
  7276                           ;ethernet.c: 117: UARTTransmitInt(frame->length);
  7277  0004B6  C178  FFD9         	movff	ethernet_rxGetNewFrame@frame,fsr2l
  7278  0004BA  C179  FFDA         	movff	ethernet_rxGetNewFrame@frame+1,fsr2h
  7279  0004BE  CFDE F17A          	movff	postinc2,??_ethernet_rxGetNewFrame
  7280  0004C2  CFDD F17B          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  7281  0004C6  C17A  F09A         	movff	??_ethernet_rxGetNewFrame,UARTTransmitInt@val
  7282  0004CA  C17B  F09B         	movff	??_ethernet_rxGetNewFrame+1,UARTTransmitInt@val+1
  7283  0004CE  0100               	movlb	0	; () banked
  7284  0004D0  6B9C               	clrf	(UARTTransmitInt@val+2)& (0+255),b
  7285  0004D2  6B9D               	clrf	(UARTTransmitInt@val+3)& (0+255),b
  7286  0004D4  EC1A  F02B         	call	_UARTTransmitInt	;wreg free
  7287                           
  7288                           ;ethernet.c: 118: UARTTransmitText("] ");
  7289  0004D8  0EF0               	movlw	low STR_15
  7290  0004DA  0100               	movlb	0	; () banked
  7291  0004DC  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7292  0004DE  0E7F               	movlw	high STR_15
  7293  0004E0  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7294  0004E2  EC09  F027         	call	_UARTTransmitText	;wreg free
  7295                           
  7296                           ;ethernet.c: 120: }
  7297                           
  7298                           ;ethernet.c: 119: break;
  7299  0004E6  D017               	goto	l373
  7300  0004E8                     l371:
  7301  0004E8  0101               	movlb	1	; () banked
  7302  0004EA  EE20 F00E          	lfsr	2,14
  7303  0004EE  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7304  0004F0  26D9               	addwf	fsr2l,f,c
  7305  0004F2  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7306  0004F4  22DA               	addwfc	fsr2h,f,c
  7307  0004F6  CFDE F17A          	movff	postinc2,??_ethernet_rxGetNewFrame
  7308  0004FA  CFDD F17B          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  7309                           
  7310                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7311                           ; Switch size 1, requested type "space"
  7312                           ; Number of cases is 1, Range of values is 8 to 8
  7313                           ; switch strategies available:
  7314                           ; Name         Instructions Cycles
  7315                           ; simple_byte            4     3 (average)
  7316                           ;	Chosen strategy is simple_byte
  7317  0004FE  517B               	movf	(??_ethernet_rxGetNewFrame+1)& (0+255),w,b
  7318  000500  0A08               	xorlw	8	; case 8
  7319  000502  A4D8               	btfss	status,2,c
  7320  000504  D776               	goto	l375
  7321                           
  7322                           ; BSR set to: 1
  7323                           ; Switch size 1, requested type "space"
  7324                           ; Number of cases is 2, Range of values is 0 to 6
  7325                           ; switch strategies available:
  7326                           ; Name         Instructions Cycles
  7327                           ; simple_byte            7     4 (average)
  7328                           ;	Chosen strategy is simple_byte
  7329  000506  517A               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  7330  000508  0A00               	xorlw	0	; case 0
  7331  00050A  B4D8               	btfsc	status,2,c
  7332  00050C  D764               	goto	l374
  7333  00050E  0A06               	xorlw	6	; case 6
  7334  000510  B4D8               	btfsc	status,2,c
  7335  000512  D753               	goto	l372
  7336  000514  D76E               	goto	l375
  7337  000516                     l373:
  7338                           
  7339                           ;ethernet.c: 123: UARTTransmitText("[");
  7340                           
  7341                           ; BSR set to: 1
  7342  000516  0EC2               	movlw	low (STR_72+3)
  7343  000518  0100               	movlb	0	; () banked
  7344  00051A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7345  00051C  0E7F               	movlw	high (STR_72+3)
  7346  00051E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7347  000520  EC09  F027         	call	_UARTTransmitText	;wreg free
  7348                           
  7349                           ;ethernet.c: 124: UARTTransmitText(intToString(frame->memory.start));
  7350  000524  0101               	movlb	1	; () banked
  7351  000526  EE20 F010          	lfsr	2,16
  7352  00052A  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7353  00052C  26D9               	addwf	fsr2l,f,c
  7354  00052E  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7355  000530  22DA               	addwfc	fsr2h,f,c
  7356  000532  CFDE F17A          	movff	postinc2,??_ethernet_rxGetNewFrame
  7357  000536  CFDD F17B          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  7358  00053A  C17A  F084         	movff	??_ethernet_rxGetNewFrame,intToString@val
  7359  00053E  C17B  F085         	movff	??_ethernet_rxGetNewFrame+1,intToString@val+1
  7360  000542  0100               	movlb	0	; () banked
  7361  000544  6B86               	clrf	(intToString@val+2)& (0+255),b
  7362  000546  6B87               	clrf	(intToString@val+3)& (0+255),b
  7363  000548  EC97  F029         	call	_intToString	;wreg free
  7364  00054C  C084  F098         	movff	?_intToString,UARTTransmitText@str
  7365  000550  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  7366  000554  EC09  F027         	call	_UARTTransmitText	;wreg free
  7367                           
  7368                           ;ethernet.c: 125: UARTTransmitText(" to ");
  7369  000558  0E1C               	movlw	low (STR_24+32)
  7370  00055A  0100               	movlb	0	; () banked
  7371  00055C  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7372  00055E  0E7C               	movlw	high (STR_24+32)
  7373  000560  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7374  000562  EC09  F027         	call	_UARTTransmitText	;wreg free
  7375                           
  7376                           ;ethernet.c: 126: UARTTransmitText(intToString(frame->memory.end));
  7377  000566  0101               	movlb	1	; () banked
  7378  000568  EE20 F012          	lfsr	2,18
  7379  00056C  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7380  00056E  26D9               	addwf	fsr2l,f,c
  7381  000570  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7382  000572  22DA               	addwfc	fsr2h,f,c
  7383  000574  CFDE F17A          	movff	postinc2,??_ethernet_rxGetNewFrame
  7384  000578  CFDD F17B          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  7385  00057C  C17A  F084         	movff	??_ethernet_rxGetNewFrame,intToString@val
  7386  000580  C17B  F085         	movff	??_ethernet_rxGetNewFrame+1,intToString@val+1
  7387  000584  0100               	movlb	0	; () banked
  7388  000586  6B86               	clrf	(intToString@val+2)& (0+255),b
  7389  000588  6B87               	clrf	(intToString@val+3)& (0+255),b
  7390  00058A  EC97  F029         	call	_intToString	;wreg free
  7391  00058E  C084  F098         	movff	?_intToString,UARTTransmitText@str
  7392  000592  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  7393  000596  EC09  F027         	call	_UARTTransmitText	;wreg free
  7394                           
  7395                           ;ethernet.c: 127: UARTTransmitText(" (");
  7396  00059A  0E0B               	movlw	low (STR_41+29)
  7397  00059C  0100               	movlb	0	; () banked
  7398  00059E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7399  0005A0  0E7D               	movlw	high (STR_41+29)
  7400  0005A2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7401  0005A4  EC09  F027         	call	_UARTTransmitText	;wreg free
  7402                           
  7403                           ;ethernet.c: 128: UARTTransmitText(intToString(frame->memory.length));
  7404  0005A8  0101               	movlb	1	; () banked
  7405  0005AA  EE20 F014          	lfsr	2,20
  7406  0005AE  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7407  0005B0  26D9               	addwf	fsr2l,f,c
  7408  0005B2  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7409  0005B4  22DA               	addwfc	fsr2h,f,c
  7410  0005B6  CFDE F17A          	movff	postinc2,??_ethernet_rxGetNewFrame
  7411  0005BA  CFDD F17B          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  7412  0005BE  C17A  F084         	movff	??_ethernet_rxGetNewFrame,intToString@val
  7413  0005C2  C17B  F085         	movff	??_ethernet_rxGetNewFrame+1,intToString@val+1
  7414  0005C6  0100               	movlb	0	; () banked
  7415  0005C8  6B86               	clrf	(intToString@val+2)& (0+255),b
  7416  0005CA  6B87               	clrf	(intToString@val+3)& (0+255),b
  7417  0005CC  EC97  F029         	call	_intToString	;wreg free
  7418  0005D0  C084  F098         	movff	?_intToString,UARTTransmitText@str
  7419  0005D4  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  7420  0005D8  EC09  F027         	call	_UARTTransmitText	;wreg free
  7421                           
  7422                           ;ethernet.c: 129: UARTTransmitText(")]");
  7423  0005DC  0EF9               	movlw	low STR_19
  7424  0005DE  0100               	movlb	0	; () banked
  7425  0005E0  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7426  0005E2  0E7F               	movlw	high STR_19
  7427  0005E4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7428  0005E6  EC09  F027         	call	_UARTTransmitText	;wreg free
  7429                           
  7430                           ;ethernet.c: 131: ethernetController_dropPacket();
  7431  0005EA  ECCF  F028         	call	_ethernetController_dropPacket	;wreg free
  7432                           
  7433                           ;ethernet.c: 133: UARTTransmitText("\n\r");
  7434  0005EE  0ED4               	movlw	low (STR_23+35)
  7435  0005F0  0100               	movlb	0	; () banked
  7436  0005F2  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7437  0005F4  0E7B               	movlw	high (STR_23+35)
  7438  0005F6  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7439  0005F8  EC09  F027         	call	_UARTTransmitText	;wreg free
  7440  0005FC  0012               	return	
  7441  0005FE                     __end_of_ethernet_rxGetNewFrame:
  7442                           	opt stack 0
  7443                           tblptru	equ	0xFF8
  7444                           tblptrh	equ	0xFF7
  7445                           tblptrl	equ	0xFF6
  7446                           tablat	equ	0xFF5
  7447                           prodh	equ	0xFF4
  7448                           prodl	equ	0xFF3
  7449                           intcon	equ	0xFF2
  7450                           intcon3	equ	0xFF0
  7451                           indf0	equ	0xFEF
  7452                           postinc0	equ	0xFEE
  7453                           plusw0	equ	0xFEB
  7454                           fsr0h	equ	0xFEA
  7455                           fsr0l	equ	0xFE9
  7456                           wreg	equ	0xFE8
  7457                           indf1	equ	0xFE7
  7458                           postinc1	equ	0xFE6
  7459                           postdec1	equ	0xFE5
  7460                           plusw1	equ	0xFE3
  7461                           fsr1h	equ	0xFE2
  7462                           fsr1l	equ	0xFE1
  7463                           indf2	equ	0xFDF
  7464                           postinc2	equ	0xFDE
  7465                           postdec2	equ	0xFDD
  7466                           plusw2	equ	0xFDB
  7467                           fsr2h	equ	0xFDA
  7468                           fsr2l	equ	0xFD9
  7469                           status	equ	0xFD8
  7470                           
  7471 ;; *************** function _ipv4_handleNewPacket *****************
  7472 ;; Defined at:
  7473 ;;		line 199 in file "src/stack/protocols/ipv4.c"
  7474 ;; Parameters:    Size  Location     Type
  7475 ;;  frame           2   85[BANK0 ] PTR struct ethernetFrame
  7476 ;;		 -> stack(135), 
  7477 ;; Auto vars:     Size  Location     Type
  7478 ;;  ip             23   98[BANK0 ] struct ipv4_header
  7479 ;;  headerField     9   89[BANK0 ] struct memoryField
  7480 ;; Return value:  Size  Location     Type
  7481 ;;                  1    wreg      void 
  7482 ;; Registers used:
  7483 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7484 ;; Tracked objects:
  7485 ;;		On entry : 0/0
  7486 ;;		On exit  : 0/0
  7487 ;;		Unchanged: 0/0
  7488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7489 ;;      Params:         0       2       0       0       0       0       0       0       0
  7490 ;;      Locals:         0      32       0       0       0       0       0       0       0
  7491 ;;      Temps:          0       2       0       0       0       0       0       0       0
  7492 ;;      Totals:         0      36       0       0       0       0       0       0       0
  7493 ;;Total ram usage:       36 bytes
  7494 ;; Hardware stack levels used:    1
  7495 ;; Hardware stack levels required when called:    9
  7496 ;; This function calls:
  7497 ;;		_UARTTransmitText
  7498 ;;		_ethernetController_dropPacket
  7499 ;;		_intToString
  7500 ;;		_ipAdressToString
  7501 ;;		_ipProtocolToString
  7502 ;;		_ipv4_checkHeaderChecksum
  7503 ;;		_ipv4_parseHeader
  7504 ;; This function is called by:
  7505 ;;		_ethernet_rxGetNewFrame
  7506 ;; This function uses a non-reentrant model
  7507 ;;
  7508                           
  7509                           	psect	text16
  7510  002B2E                     __ptext16:
  7511                           	opt stack 0
  7512  002B2E                     _ipv4_handleNewPacket:
  7513                           	opt stack 19
  7514                           
  7515                           ;ipv4.c: 200: ipv4_header_t ip;
  7516                           ;ipv4.c: 201: memoryField_t headerField;
  7517                           ;ipv4.c: 202: if (frame->ethertype != ETHERTYPE_IPv4) {
  7518                           
  7519                           ;incstack = 0
  7520  002B2E  0100               	movlb	0	; () banked
  7521  002B30  EE20 F00E          	lfsr	2,14
  7522  002B34  51B5               	movf	ipv4_handleNewPacket@frame& (0+255),w,b
  7523  002B36  26D9               	addwf	fsr2l,f,c
  7524  002B38  51B6               	movf	(ipv4_handleNewPacket@frame+1)& (0+255),w,b
  7525  002B3A  22DA               	addwfc	fsr2h,f,c
  7526  002B3C  50DE               	movf	postinc2,w,c
  7527  002B3E  E104               	bnz	u11500
  7528  002B40  0E08               	movlw	8
  7529  002B42  18DE               	xorwf	postinc2,w,c
  7530  002B44  B4D8               	btfsc	status,2,c
  7531  002B46  D007               	goto	l1157
  7532  002B48                     u11500:
  7533                           
  7534                           ; BSR set to: 0
  7535                           ;ipv4.c: 203: ethernetController_dropPacket(frame);
  7536  002B48  C0B5  F072         	movff	ipv4_handleNewPacket@frame,?_ethernetController_dropPacket
  7537  002B4C  C0B6  F073         	movff	ipv4_handleNewPacket@frame+1,?_ethernetController_dropPacket+1
  7538  002B50  ECCF  F028         	call	_ethernetController_dropPacket	;wreg free
  7539                           
  7540                           ;ipv4.c: 204: return;
  7541  002B54  0012               	return	
  7542  002B56                     l1157:
  7543                           
  7544                           ;ipv4.c: 205: }
  7545                           ;ipv4.c: 206: headerField = frame->memory;
  7546  002B56  0100               	movlb	0	; () banked
  7547  002B58  EE20 F010          	lfsr	2,16
  7548  002B5C  51B5               	movf	ipv4_handleNewPacket@frame& (0+255),w,b
  7549  002B5E  26D9               	addwf	fsr2l,f,c
  7550  002B60  51B6               	movf	(ipv4_handleNewPacket@frame+1)& (0+255),w,b
  7551  002B62  22DA               	addwfc	fsr2h,f,c
  7552  002B64  EE10  F0B9         	lfsr	1,ipv4_handleNewPacket@headerField
  7553  002B68  0E08               	movlw	8
  7554  002B6A                     u11511:
  7555  002B6A  CFDB FFE3          	movff	plusw2,plusw1
  7556  002B6E  06E8               	decf	wreg,f,c
  7557  002B70  E2FC               	bc	u11511
  7558                           
  7559                           ; BSR set to: 0
  7560                           ;ipv4.c: 207: headerField.start = frame->memory.start + 22;
  7561  002B72  EE20 F010          	lfsr	2,16
  7562  002B76  51B5               	movf	ipv4_handleNewPacket@frame& (0+255),w,b
  7563  002B78  26D9               	addwf	fsr2l,f,c
  7564  002B7A  51B6               	movf	(ipv4_handleNewPacket@frame+1)& (0+255),w,b
  7565  002B7C  22DA               	addwfc	fsr2h,f,c
  7566  002B7E  CFDE F0B7          	movff	postinc2,??_ipv4_handleNewPacket
  7567  002B82  CFDD F0B8          	movff	postdec2,??_ipv4_handleNewPacket+1
  7568  002B86  0E16               	movlw	22
  7569  002B88  25B7               	addwf	??_ipv4_handleNewPacket& (0+255),w,b
  7570  002B8A  6FB9               	movwf	ipv4_handleNewPacket@headerField& (0+255),b
  7571  002B8C  0E00               	movlw	0
  7572  002B8E  21B8               	addwfc	(??_ipv4_handleNewPacket+1)& (0+255),w,b
  7573  002B90  6FBA               	movwf	(ipv4_handleNewPacket@headerField+1)& (0+255),b
  7574                           
  7575                           ; BSR set to: 0
  7576                           ;ipv4.c: 209: ip = ipv4_parseHeader(&headerField);
  7577  002B92  0EB9               	movlw	low ipv4_handleNewPacket@headerField
  7578  002B94  6F74               	movwf	ipv4_parseHeader@field& (0+255),b
  7579  002B96  0E00               	movlw	high ipv4_handleNewPacket@headerField
  7580  002B98  6F75               	movwf	(ipv4_parseHeader@field+1)& (0+255),b
  7581  002B9A  EC6C  F00F         	call	_ipv4_parseHeader	;wreg free
  7582  002B9E  EE20  F0C2         	lfsr	2,ipv4_handleNewPacket@ip
  7583  002BA2  0E16               	movlw	22
  7584  002BA4                     u11521:
  7585  002BA4  CFEB FFDB          	movff	plusw0,plusw2
  7586  002BA8  06E8               	decf	wreg,f,c
  7587  002BAA  E2FC               	bc	u11521
  7588                           
  7589                           ;ipv4.c: 210: UARTTransmitText("[");
  7590  002BAC  0EC2               	movlw	low (STR_72+3)
  7591  002BAE  0100               	movlb	0	; () banked
  7592  002BB0  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7593  002BB2  0E7F               	movlw	high (STR_72+3)
  7594  002BB4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7595  002BB6  EC09  F027         	call	_UARTTransmitText	;wreg free
  7596                           
  7597                           ;ipv4.c: 211: UARTTransmitText(ipAdressToString(ip.source));
  7598  002BBA  C0D1  F073         	movff	ipv4_handleNewPacket@ip+15,ipAdressToString@ip
  7599  002BBE  C0D2  F074         	movff	ipv4_handleNewPacket@ip+16,ipAdressToString@ip+1
  7600  002BC2  C0D3  F075         	movff	ipv4_handleNewPacket@ip+17,ipAdressToString@ip+2
  7601  002BC6  C0D4  F076         	movff	ipv4_handleNewPacket@ip+18,ipAdressToString@ip+3
  7602  002BCA  ECC9  F013         	call	_ipAdressToString	;wreg free
  7603  002BCE  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  7604  002BD2  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  7605  002BD6  EC09  F027         	call	_UARTTransmitText	;wreg free
  7606                           
  7607                           ;ipv4.c: 212: UARTTransmitText(" -> ");
  7608  002BDA  0ED3               	movlw	low STR_42
  7609  002BDC  0100               	movlb	0	; () banked
  7610  002BDE  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7611  002BE0  0E7F               	movlw	high STR_42
  7612  002BE2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7613  002BE4  EC09  F027         	call	_UARTTransmitText	;wreg free
  7614                           
  7615                           ;ipv4.c: 213: UARTTransmitText(ipAdressToString(ip.destination));
  7616  002BE8  C0D5  F073         	movff	ipv4_handleNewPacket@ip+19,ipAdressToString@ip
  7617  002BEC  C0D6  F074         	movff	ipv4_handleNewPacket@ip+20,ipAdressToString@ip+1
  7618  002BF0  C0D7  F075         	movff	ipv4_handleNewPacket@ip+21,ipAdressToString@ip+2
  7619  002BF4  C0D8  F076         	movff	ipv4_handleNewPacket@ip+22,ipAdressToString@ip+3
  7620  002BF8  ECC9  F013         	call	_ipAdressToString	;wreg free
  7621  002BFC  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  7622  002C00  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  7623  002C04  EC09  F027         	call	_UARTTransmitText	;wreg free
  7624                           
  7625                           ;ipv4.c: 214: UARTTransmitText("][");
  7626  002C08  0EF6               	movlw	low STR_13
  7627  002C0A  0100               	movlb	0	; () banked
  7628  002C0C  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7629  002C0E  0E7F               	movlw	high STR_13
  7630  002C10  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7631  002C12  EC09  F027         	call	_UARTTransmitText	;wreg free
  7632                           
  7633                           ;ipv4.c: 215: UARTTransmitText((ipProtocolToString(ip.protocol)));
  7634  002C16  0100               	movlb	0	; () banked
  7635  002C18  51CE               	movf	(ipv4_handleNewPacket@ip+12)& (0+255),w,b
  7636  002C1A  EC25  F028         	call	_ipProtocolToString
  7637  002C1E  C060  F098         	movff	?_ipProtocolToString,UARTTransmitText@str
  7638  002C22  C061  F099         	movff	?_ipProtocolToString+1,UARTTransmitText@str+1
  7639  002C26  EC09  F027         	call	_UARTTransmitText	;wreg free
  7640                           
  7641                           ;ipv4.c: 216: UARTTransmitText("][");
  7642  002C2A  0EF6               	movlw	low STR_13
  7643  002C2C  0100               	movlb	0	; () banked
  7644  002C2E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7645  002C30  0E7F               	movlw	high STR_13
  7646  002C32  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7647  002C34  EC09  F027         	call	_UARTTransmitText	;wreg free
  7648                           
  7649                           ;ipv4.c: 217: UARTTransmitText(intToString(ip.totalLength));
  7650  002C38  C0C6  F084         	movff	ipv4_handleNewPacket@ip+4,intToString@val
  7651  002C3C  C0C7  F085         	movff	ipv4_handleNewPacket@ip+5,intToString@val+1
  7652  002C40  0100               	movlb	0	; () banked
  7653  002C42  6B86               	clrf	(intToString@val+2)& (0+255),b
  7654  002C44  6B87               	clrf	(intToString@val+3)& (0+255),b
  7655  002C46  EC97  F029         	call	_intToString	;wreg free
  7656  002C4A  C084  F098         	movff	?_intToString,UARTTransmitText@str
  7657  002C4E  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  7658  002C52  EC09  F027         	call	_UARTTransmitText	;wreg free
  7659                           
  7660                           ;ipv4.c: 218: UARTTransmitText("][");
  7661  002C56  0EF6               	movlw	low STR_13
  7662  002C58  0100               	movlb	0	; () banked
  7663  002C5A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7664  002C5C  0E7F               	movlw	high STR_13
  7665  002C5E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7666  002C60  EC09  F027         	call	_UARTTransmitText	;wreg free
  7667                           
  7668                           ;ipv4.c: 219: UARTTransmitText(intToString(ip.version));
  7669  002C64  0100               	movlb	0	; () banked
  7670  002C66  51C2               	movf	ipv4_handleNewPacket@ip& (0+255),w,b
  7671  002C68  6F84               	movwf	intToString@val& (0+255),b
  7672  002C6A  6B85               	clrf	(intToString@val+1)& (0+255),b
  7673  002C6C  6B86               	clrf	(intToString@val+2)& (0+255),b
  7674  002C6E  6B87               	clrf	(intToString@val+3)& (0+255),b
  7675  002C70  EC97  F029         	call	_intToString	;wreg free
  7676  002C74  C084  F098         	movff	?_intToString,UARTTransmitText@str
  7677  002C78  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  7678  002C7C  EC09  F027         	call	_UARTTransmitText	;wreg free
  7679                           
  7680                           ;ipv4.c: 220: UARTTransmitText(", ");
  7681  002C80  0E32               	movlw	low (STR_47+17)
  7682  002C82  0100               	movlb	0	; () banked
  7683  002C84  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7684  002C86  0E7E               	movlw	high (STR_47+17)
  7685  002C88  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7686  002C8A  EC09  F027         	call	_UARTTransmitText	;wreg free
  7687                           
  7688                           ;ipv4.c: 221: UARTTransmitText(intToString(ip.headerLength));
  7689  002C8E  0100               	movlb	0	; () banked
  7690  002C90  51C3               	movf	(ipv4_handleNewPacket@ip+1)& (0+255),w,b
  7691  002C92  6F84               	movwf	intToString@val& (0+255),b
  7692  002C94  6B85               	clrf	(intToString@val+1)& (0+255),b
  7693  002C96  6B86               	clrf	(intToString@val+2)& (0+255),b
  7694  002C98  6B87               	clrf	(intToString@val+3)& (0+255),b
  7695  002C9A  EC97  F029         	call	_intToString	;wreg free
  7696  002C9E  C084  F098         	movff	?_intToString,UARTTransmitText@str
  7697  002CA2  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  7698  002CA6  EC09  F027         	call	_UARTTransmitText	;wreg free
  7699                           
  7700                           ;ipv4.c: 222: UARTTransmitText("]");
  7701  002CAA  0EFA               	movlw	low (STR_19+1)
  7702  002CAC  0100               	movlb	0	; () banked
  7703  002CAE  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7704  002CB0  0E7F               	movlw	high (STR_19+1)
  7705  002CB2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7706  002CB4  EC09  F027         	call	_UARTTransmitText	;wreg free
  7707                           
  7708                           ;ipv4.c: 223: if (!ipv4_checkHeaderChecksum(&ip))
  7709  002CB8  0EC2               	movlw	low ipv4_handleNewPacket@ip
  7710  002CBA  0100               	movlb	0	; () banked
  7711  002CBC  6F9A               	movwf	ipv4_checkHeaderChecksum@header& (0+255),b
  7712  002CBE  0E00               	movlw	high ipv4_handleNewPacket@ip
  7713  002CC0  6F9B               	movwf	(ipv4_checkHeaderChecksum@header+1)& (0+255),b
  7714  002CC2  EC7B  F01F         	call	_ipv4_checkHeaderChecksum	;wreg free
  7715  002CC6  0100               	movlb	0	; () banked
  7716  002CC8  B0D8               	btfsc	status,0,c
  7717  002CCA  0012               	return	
  7718                           
  7719                           ; BSR set to: 0
  7720                           ;ipv4.c: 224: UARTTransmitText("[INVALID CHECKSUM]");
  7721  002CCC  0E49               	movlw	low STR_111
  7722  002CCE  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7723  002CD0  0E7E               	movlw	high STR_111
  7724  002CD2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7725  002CD4  EC09  F027         	call	_UARTTransmitText	;wreg free
  7726  002CD8  0012               	return	
  7727  002CDA                     __end_of_ipv4_handleNewPacket:
  7728                           	opt stack 0
  7729                           tblptru	equ	0xFF8
  7730                           tblptrh	equ	0xFF7
  7731                           tblptrl	equ	0xFF6
  7732                           tablat	equ	0xFF5
  7733                           prodh	equ	0xFF4
  7734                           prodl	equ	0xFF3
  7735                           intcon	equ	0xFF2
  7736                           intcon3	equ	0xFF0
  7737                           indf0	equ	0xFEF
  7738                           postinc0	equ	0xFEE
  7739                           plusw0	equ	0xFEB
  7740                           fsr0h	equ	0xFEA
  7741                           fsr0l	equ	0xFE9
  7742                           wreg	equ	0xFE8
  7743                           indf1	equ	0xFE7
  7744                           postinc1	equ	0xFE6
  7745                           postdec1	equ	0xFE5
  7746                           plusw1	equ	0xFE3
  7747                           fsr1h	equ	0xFE2
  7748                           fsr1l	equ	0xFE1
  7749                           indf2	equ	0xFDF
  7750                           postinc2	equ	0xFDE
  7751                           postdec2	equ	0xFDD
  7752                           plusw2	equ	0xFDB
  7753                           fsr2h	equ	0xFDA
  7754                           fsr2l	equ	0xFD9
  7755                           status	equ	0xFD8
  7756                           
  7757 ;; *************** function _ipv4_parseHeader *****************
  7758 ;; Defined at:
  7759 ;;		line 137 in file "src/stack/protocols/ipv4.c"
  7760 ;; Parameters:    Size  Location     Type
  7761 ;;  field           2   20[BANK0 ] PTR struct memoryField
  7762 ;;		 -> ipv4_handleNewPacket@headerField(9), 
  7763 ;; Auto vars:     Size  Location     Type
  7764 ;;  i               1   45[BANK0 ] unsigned char 
  7765 ;;  i               1   44[BANK0 ] unsigned char 
  7766 ;;  ip             23   47[BANK0 ] struct ipv4_header
  7767 ;;  temp            1   46[BANK0 ] unsigned char 
  7768 ;; Return value:  Size  Location     Type
  7769 ;;                  23   20[BANK0 ] struct ipv4_header
  7770 ;; Registers used:
  7771 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7772 ;; Tracked objects:
  7773 ;;		On entry : 0/0
  7774 ;;		On exit  : 0/0
  7775 ;;		Unchanged: 0/0
  7776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7777 ;;      Params:         0      23       0       0       0       0       0       0       0
  7778 ;;      Locals:         0      26       0       0       0       0       0       0       0
  7779 ;;      Temps:          0       1       0       0       0       0       0       0       0
  7780 ;;      Totals:         0      50       0       0       0       0       0       0       0
  7781 ;;Total ram usage:       50 bytes
  7782 ;; Hardware stack levels used:    1
  7783 ;; Hardware stack levels required when called:    8
  7784 ;; This function calls:
  7785 ;;		_ethernetController_streamFromRXBuffer
  7786 ;; This function is called by:
  7787 ;;		_ipv4_handleNewPacket
  7788 ;; This function uses a non-reentrant model
  7789 ;;
  7790                           
  7791                           	psect	text17
  7792  001ED8                     __ptext17:
  7793                           	opt stack 0
  7794  001ED8                     _ipv4_parseHeader:
  7795                           	opt stack 19
  7796                           
  7797                           ;ipv4.c: 138: ipv4_header_t ip;
  7798                           ;ipv4.c: 139: uint8_t temp;
  7799                           ;ipv4.c: 141: ethernetController_streamFromRXBuffer(0, field->start);
  7800                           
  7801                           ;incstack = 0
  7802  001ED8  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  7803  001EDC  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  7804  001EE0  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  7805  001EE4  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  7806  001EE8  0E00               	movlw	0
  7807  001EEA  EC83  F026         	call	_ethernetController_streamFromRXBuffer
  7808                           
  7809                           ;ipv4.c: 143: temp = ethernetController_streamFromRXBuffer(1, field->start);
  7810  001EEE  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  7811  001EF2  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  7812  001EF6  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  7813  001EFA  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  7814  001EFE  0E01               	movlw	1
  7815  001F00  EC83  F026         	call	_ethernetController_streamFromRXBuffer
  7816  001F04  0100               	movlb	0	; () banked
  7817  001F06  6F8E               	movwf	ipv4_parseHeader@temp& (0+255),b
  7818                           
  7819                           ; BSR set to: 0
  7820                           ;ipv4.c: 144: ip.version = (temp & 0xf0) >> 4;
  7821  001F08  398E               	swapf	ipv4_parseHeader@temp& (0+255),w,b
  7822  001F0A  0B0F               	andlw	15
  7823  001F0C  0B0F               	andlw	15
  7824  001F0E  6F8F               	movwf	ipv4_parseHeader@ip& (0+255),b
  7825                           
  7826                           ; BSR set to: 0
  7827                           ;ipv4.c: 145: ip.headerLength = temp & 0x0f;
  7828  001F10  518E               	movf	ipv4_parseHeader@temp& (0+255),w,b
  7829  001F12  0B0F               	andlw	15
  7830  001F14  6F90               	movwf	(ipv4_parseHeader@ip+1)& (0+255),b
  7831                           
  7832                           ;ipv4.c: 147: temp = ethernetController_streamFromRXBuffer(1, field->start);
  7833  001F16  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  7834  001F1A  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  7835  001F1E  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  7836  001F22  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  7837  001F26  0E01               	movlw	1
  7838  001F28  EC83  F026         	call	_ethernetController_streamFromRXBuffer
  7839  001F2C  0100               	movlb	0	; () banked
  7840  001F2E  6F8E               	movwf	ipv4_parseHeader@temp& (0+255),b
  7841                           
  7842                           ; BSR set to: 0
  7843                           ;ipv4.c: 148: ip.dscp = (temp & 0x1f);
  7844  001F30  518E               	movf	ipv4_parseHeader@temp& (0+255),w,b
  7845  001F32  0B1F               	andlw	31
  7846  001F34  6F91               	movwf	(ipv4_parseHeader@ip+2)& (0+255),b
  7847                           
  7848                           ; BSR set to: 0
  7849                           ;ipv4.c: 149: ip.ecn = (temp & 0xC0) >> 6;
  7850  001F36  458E               	rlncf	ipv4_parseHeader@temp& (0+255),w,b
  7851  001F38  46E8               	rlncf	wreg,f,c
  7852  001F3A  0B03               	andlw	3
  7853  001F3C  0B03               	andlw	3
  7854  001F3E  6F92               	movwf	(ipv4_parseHeader@ip+3)& (0+255),b
  7855                           
  7856                           ;ipv4.c: 151: ip.totalLength = (ethernetController_streamFromRXBuffer(1, field->start) <
      +                          < 8);
  7857  001F40  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  7858  001F44  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  7859  001F48  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  7860  001F4C  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  7861  001F50  0E01               	movlw	1
  7862  001F52  EC83  F026         	call	_ethernetController_streamFromRXBuffer
  7863  001F56  0100               	movlb	0	; () banked
  7864  001F58  6F94               	movwf	(ipv4_parseHeader@ip+5)& (0+255),b
  7865  001F5A  6B93               	clrf	(ipv4_parseHeader@ip+4)& (0+255),b
  7866                           
  7867                           ;ipv4.c: 152: ip.totalLength |= ethernetController_streamFromRXBuffer(1, field->start);
  7868  001F5C  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  7869  001F60  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  7870  001F64  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  7871  001F68  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  7872  001F6C  0E01               	movlw	1
  7873  001F6E  EC83  F026         	call	_ethernetController_streamFromRXBuffer
  7874  001F72  0100               	movlb	0	; () banked
  7875  001F74  6F8B               	movwf	??_ipv4_parseHeader& (0+255),b
  7876  001F76  518B               	movf	??_ipv4_parseHeader& (0+255),w,b
  7877  001F78  1393               	iorwf	(ipv4_parseHeader@ip+4)& (0+255),f,b
  7878                           
  7879                           ;ipv4.c: 154: ip.identification = (ethernetController_streamFromRXBuffer(1, field->start
      +                          ) << 8);
  7880  001F7A  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  7881  001F7E  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  7882  001F82  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  7883  001F86  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  7884  001F8A  0E01               	movlw	1
  7885  001F8C  EC83  F026         	call	_ethernetController_streamFromRXBuffer
  7886  001F90  0100               	movlb	0	; () banked
  7887  001F92  6F96               	movwf	(ipv4_parseHeader@ip+7)& (0+255),b
  7888  001F94  6B95               	clrf	(ipv4_parseHeader@ip+6)& (0+255),b
  7889                           
  7890                           ;ipv4.c: 155: ip.identification |= ethernetController_streamFromRXBuffer(1, field->start
      +                          );
  7891  001F96  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  7892  001F9A  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  7893  001F9E  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  7894  001FA2  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  7895  001FA6  0E01               	movlw	1
  7896  001FA8  EC83  F026         	call	_ethernetController_streamFromRXBuffer
  7897  001FAC  0100               	movlb	0	; () banked
  7898  001FAE  6F8B               	movwf	??_ipv4_parseHeader& (0+255),b
  7899  001FB0  518B               	movf	??_ipv4_parseHeader& (0+255),w,b
  7900  001FB2  1395               	iorwf	(ipv4_parseHeader@ip+6)& (0+255),f,b
  7901                           
  7902                           ;ipv4.c: 157: temp = ethernetController_streamFromRXBuffer(1, field->start);
  7903  001FB4  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  7904  001FB8  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  7905  001FBC  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  7906  001FC0  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  7907  001FC4  0E01               	movlw	1
  7908  001FC6  EC83  F026         	call	_ethernetController_streamFromRXBuffer
  7909  001FCA  0100               	movlb	0	; () banked
  7910  001FCC  6F8E               	movwf	ipv4_parseHeader@temp& (0+255),b
  7911                           
  7912                           ; BSR set to: 0
  7913                           ;ipv4.c: 158: ip.flags = ((temp & 0xC0) >> 6);
  7914  001FCE  458E               	rlncf	ipv4_parseHeader@temp& (0+255),w,b
  7915  001FD0  46E8               	rlncf	wreg,f,c
  7916  001FD2  0B03               	andlw	3
  7917  001FD4  0B03               	andlw	3
  7918  001FD6  6F97               	movwf	(ipv4_parseHeader@ip+8)& (0+255),b
  7919                           
  7920                           ; BSR set to: 0
  7921                           ;ipv4.c: 159: ip.fragmentOffset = ((temp & 0x1f) << 8);
  7922  001FD8  518E               	movf	ipv4_parseHeader@temp& (0+255),w,b
  7923  001FDA  0B1F               	andlw	31
  7924  001FDC  6F99               	movwf	(ipv4_parseHeader@ip+10)& (0+255),b
  7925  001FDE  6B98               	clrf	(ipv4_parseHeader@ip+9)& (0+255),b
  7926                           
  7927                           ;ipv4.c: 161: ip.fragmentOffset |= ethernetController_streamFromRXBuffer(1, field->start
      +                          );
  7928  001FE0  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  7929  001FE4  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  7930  001FE8  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  7931  001FEC  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  7932  001FF0  0E01               	movlw	1
  7933  001FF2  EC83  F026         	call	_ethernetController_streamFromRXBuffer
  7934  001FF6  0100               	movlb	0	; () banked
  7935  001FF8  6F8B               	movwf	??_ipv4_parseHeader& (0+255),b
  7936  001FFA  518B               	movf	??_ipv4_parseHeader& (0+255),w,b
  7937  001FFC  1398               	iorwf	(ipv4_parseHeader@ip+9)& (0+255),f,b
  7938                           
  7939                           ;ipv4.c: 163: ip.timeToLive = ethernetController_streamFromRXBuffer(1, field->start);
  7940  001FFE  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  7941  002002  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  7942  002006  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  7943  00200A  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  7944  00200E  0E01               	movlw	1
  7945  002010  EC83  F026         	call	_ethernetController_streamFromRXBuffer
  7946  002014  0100               	movlb	0	; () banked
  7947  002016  6F9A               	movwf	(ipv4_parseHeader@ip+11)& (0+255),b
  7948                           
  7949                           ;ipv4.c: 165: ip.protocol = ethernetController_streamFromRXBuffer(1, field->start);
  7950  002018  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  7951  00201C  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  7952  002020  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  7953  002024  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  7954  002028  0E01               	movlw	1
  7955  00202A  EC83  F026         	call	_ethernetController_streamFromRXBuffer
  7956  00202E  0100               	movlb	0	; () banked
  7957  002030  6F9B               	movwf	(ipv4_parseHeader@ip+12)& (0+255),b
  7958                           
  7959                           ;ipv4.c: 167: ip.checksum = (ethernetController_streamFromRXBuffer(1, field->start) << 8
      +                          );
  7960  002032  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  7961  002036  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  7962  00203A  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  7963  00203E  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  7964  002042  0E01               	movlw	1
  7965  002044  EC83  F026         	call	_ethernetController_streamFromRXBuffer
  7966  002048  0100               	movlb	0	; () banked
  7967  00204A  6F9D               	movwf	(ipv4_parseHeader@ip+14)& (0+255),b
  7968  00204C  6B9C               	clrf	(ipv4_parseHeader@ip+13)& (0+255),b
  7969                           
  7970                           ;ipv4.c: 168: ip.checksum |= ethernetController_streamFromRXBuffer(1, field->start);
  7971  00204E  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  7972  002052  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  7973  002056  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  7974  00205A  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  7975  00205E  0E01               	movlw	1
  7976  002060  EC83  F026         	call	_ethernetController_streamFromRXBuffer
  7977  002064  0100               	movlb	0	; () banked
  7978  002066  6F8B               	movwf	??_ipv4_parseHeader& (0+255),b
  7979  002068  518B               	movf	??_ipv4_parseHeader& (0+255),w,b
  7980  00206A  139C               	iorwf	(ipv4_parseHeader@ip+13)& (0+255),f,b
  7981                           
  7982                           ; BSR set to: 0
  7983                           ;ipv4.c: 170: for (uint8_t i = 0; i < 4; i++)
  7984  00206C  0E00               	movlw	0
  7985  00206E  6F8C               	movwf	ipv4_parseHeader@i& (0+255),b
  7986  002070                     l9485:
  7987                           
  7988                           ; BSR set to: 0
  7989  002070  0E03               	movlw	3
  7990  002072  658C               	cpfsgt	ipv4_parseHeader@i& (0+255),b
  7991  002074  D001               	goto	l1146
  7992  002076  D01D               	goto	u11260
  7993  002078                     l1146:
  7994                           
  7995                           ; BSR set to: 0
  7996                           ;ipv4.c: 171: ip.source.address[i] = ethernetController_streamFromRXBuffer(1, field->sta
      +                          rt);
  7997                           
  7998                           ; BSR set to: 0
  7999  002078  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  8000  00207C  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  8001  002080  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  8002  002084  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  8003  002088  0E01               	movlw	1
  8004  00208A  EC83  F026         	call	_ethernetController_streamFromRXBuffer
  8005  00208E  0100               	movlb	0	; () banked
  8006  002090  6F8B               	movwf	??_ipv4_parseHeader& (0+255),b
  8007  002092  518C               	movf	ipv4_parseHeader@i& (0+255),w,b
  8008  002094  0D01               	mullw	1
  8009  002096  0E0F               	movlw	15
  8010  002098  26F3               	addwf	prodl,f,c
  8011  00209A  0E00               	movlw	0
  8012  00209C  22F4               	addwfc	prodh,f,c
  8013  00209E  0E8F               	movlw	low ipv4_parseHeader@ip
  8014  0020A0  24F3               	addwf	prodl,w,c
  8015  0020A2  6ED9               	movwf	fsr2l,c
  8016  0020A4  0E00               	movlw	high ipv4_parseHeader@ip
  8017  0020A6  20F4               	addwfc	prodh,w,c
  8018  0020A8  6EDA               	movwf	fsr2h,c
  8019  0020AA  C08B  FFDF         	movff	??_ipv4_parseHeader,indf2
  8020                           
  8021                           ; BSR set to: 0
  8022  0020AE  2B8C               	incf	ipv4_parseHeader@i& (0+255),f,b
  8023  0020B0  D7DF               	goto	l9485
  8024  0020B2                     u11260:
  8025                           
  8026                           ; BSR set to: 0
  8027                           ;ipv4.c: 173: for (uint8_t i = 0; i < 4; i++)
  8028                           
  8029                           ; BSR set to: 0
  8030  0020B2  0E00               	movlw	0
  8031  0020B4  6F8D               	movwf	ipv4_parseHeader@i_3661& (0+255),b
  8032  0020B6                     l9497:
  8033                           
  8034                           ; BSR set to: 0
  8035  0020B6  0E03               	movlw	3
  8036  0020B8  658D               	cpfsgt	ipv4_parseHeader@i_3661& (0+255),b
  8037  0020BA  D001               	goto	l1148
  8038  0020BC  D01D               	goto	u11280
  8039  0020BE                     l1148:
  8040                           
  8041                           ; BSR set to: 0
  8042                           ;ipv4.c: 174: ip.destination.address[i] = ethernetController_streamFromRXBuffer(1, field
      +                          ->start);
  8043                           
  8044                           ; BSR set to: 0
  8045  0020BE  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  8046  0020C2  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  8047  0020C6  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  8048  0020CA  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  8049  0020CE  0E01               	movlw	1
  8050  0020D0  EC83  F026         	call	_ethernetController_streamFromRXBuffer
  8051  0020D4  0100               	movlb	0	; () banked
  8052  0020D6  6F8B               	movwf	??_ipv4_parseHeader& (0+255),b
  8053  0020D8  518D               	movf	ipv4_parseHeader@i_3661& (0+255),w,b
  8054  0020DA  0D01               	mullw	1
  8055  0020DC  0E13               	movlw	19
  8056  0020DE  26F3               	addwf	prodl,f,c
  8057  0020E0  0E00               	movlw	0
  8058  0020E2  22F4               	addwfc	prodh,f,c
  8059  0020E4  0E8F               	movlw	low ipv4_parseHeader@ip
  8060  0020E6  24F3               	addwf	prodl,w,c
  8061  0020E8  6ED9               	movwf	fsr2l,c
  8062  0020EA  0E00               	movlw	high ipv4_parseHeader@ip
  8063  0020EC  20F4               	addwfc	prodh,w,c
  8064  0020EE  6EDA               	movwf	fsr2h,c
  8065  0020F0  C08B  FFDF         	movff	??_ipv4_parseHeader,indf2
  8066                           
  8067                           ; BSR set to: 0
  8068  0020F4  2B8D               	incf	ipv4_parseHeader@i_3661& (0+255),f,b
  8069  0020F6  D7DF               	goto	l9497
  8070  0020F8                     u11280:
  8071                           
  8072                           ; BSR set to: 0
  8073                           ;ipv4.c: 176: ethernetController_streamFromRXBuffer(2, field->start);
  8074                           
  8075                           ; BSR set to: 0
  8076  0020F8  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  8077  0020FC  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  8078  002100  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  8079  002104  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  8080  002108  0E02               	movlw	2
  8081  00210A  EC83  F026         	call	_ethernetController_streamFromRXBuffer
  8082                           
  8083                           ;ipv4.c: 178: return ip;
  8084  00210E  EE20  F08F         	lfsr	2,ipv4_parseHeader@ip
  8085  002112  EE00  F074         	lfsr	0,?_ipv4_parseHeader
  8086  002116  0E16               	movlw	22
  8087  002118                     u11291:
  8088  002118  CFDB FFEB          	movff	plusw2,plusw0
  8089  00211C  06E8               	decf	wreg,f,c
  8090  00211E  E2FC               	bc	u11291
  8091  002120  0012               	return	
  8092  002122                     __end_of_ipv4_parseHeader:
  8093                           	opt stack 0
  8094                           tblptru	equ	0xFF8
  8095                           tblptrh	equ	0xFF7
  8096                           tblptrl	equ	0xFF6
  8097                           tablat	equ	0xFF5
  8098                           prodh	equ	0xFF4
  8099                           prodl	equ	0xFF3
  8100                           intcon	equ	0xFF2
  8101                           intcon3	equ	0xFF0
  8102                           indf0	equ	0xFEF
  8103                           postinc0	equ	0xFEE
  8104                           plusw0	equ	0xFEB
  8105                           fsr0h	equ	0xFEA
  8106                           fsr0l	equ	0xFE9
  8107                           wreg	equ	0xFE8
  8108                           indf1	equ	0xFE7
  8109                           postinc1	equ	0xFE6
  8110                           postdec1	equ	0xFE5
  8111                           plusw1	equ	0xFE3
  8112                           fsr1h	equ	0xFE2
  8113                           fsr1l	equ	0xFE1
  8114                           indf2	equ	0xFDF
  8115                           postinc2	equ	0xFDE
  8116                           postdec2	equ	0xFDD
  8117                           plusw2	equ	0xFDB
  8118                           fsr2h	equ	0xFDA
  8119                           fsr2l	equ	0xFD9
  8120                           status	equ	0xFD8
  8121                           
  8122 ;; *************** function _ipv4_checkHeaderChecksum *****************
  8123 ;; Defined at:
  8124 ;;		line 181 in file "src/stack/protocols/ipv4.c"
  8125 ;; Parameters:    Size  Location     Type
  8126 ;;  header          2   58[BANK0 ] PTR struct ipv4_header
  8127 ;;		 -> ipv4_handleNewPacket@ip(23), 
  8128 ;; Auto vars:     Size  Location     Type
  8129 ;;  testHeader     23   62[BANK0 ] struct ipv4_header
  8130 ;; Return value:  Size  Location     Type
  8131 ;;		None               void
  8132 ;; Registers used:
  8133 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8134 ;; Tracked objects:
  8135 ;;		On entry : 0/0
  8136 ;;		On exit  : 0/0
  8137 ;;		Unchanged: 0/0
  8138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8139 ;;      Params:         0       2       0       0       0       0       0       0       0
  8140 ;;      Locals:         0      23       0       0       0       0       0       0       0
  8141 ;;      Temps:          0       2       0       0       0       0       0       0       0
  8142 ;;      Totals:         0      27       0       0       0       0       0       0       0
  8143 ;;Total ram usage:       27 bytes
  8144 ;; Hardware stack levels used:    1
  8145 ;; Hardware stack levels required when called:    6
  8146 ;; This function calls:
  8147 ;;		_UARTTransmitText
  8148 ;;		_hexToString
  8149 ;;		_ipv4_calculateHeaderChecksum
  8150 ;; This function is called by:
  8151 ;;		_ipv4_handleNewPacket
  8152 ;; This function uses a non-reentrant model
  8153 ;;
  8154                           
  8155                           	psect	text18
  8156  003EF6                     __ptext18:
  8157                           	opt stack 0
  8158  003EF6                     _ipv4_checkHeaderChecksum:
  8159                           	opt stack 21
  8160                           
  8161                           ;ipv4.c: 182: ipv4_header_t testHeader;
  8162                           ;ipv4.c: 183: testHeader = *header;
  8163                           
  8164                           ;incstack = 0
  8165  003EF6  C09A  FFD9         	movff	ipv4_checkHeaderChecksum@header,fsr2l
  8166  003EFA  C09B  FFDA         	movff	ipv4_checkHeaderChecksum@header+1,fsr2h
  8167  003EFE  EE10  F09E         	lfsr	1,ipv4_checkHeaderChecksum@testHeader
  8168  003F02  0E16               	movlw	22
  8169  003F04                     u11301:
  8170  003F04  CFDB FFE3          	movff	plusw2,plusw1
  8171  003F08  06E8               	decf	wreg,f,c
  8172  003F0A  E2FC               	bc	u11301
  8173                           
  8174                           ;ipv4.c: 184: testHeader.checksum = 0x0000;
  8175  003F0C  0E00               	movlw	0
  8176  003F0E  0100               	movlb	0	; () banked
  8177  003F10  6FAC               	movwf	(ipv4_checkHeaderChecksum@testHeader+14)& (0+255),b
  8178  003F12  0E00               	movlw	0
  8179  003F14  6FAB               	movwf	(ipv4_checkHeaderChecksum@testHeader+13)& (0+255),b
  8180                           
  8181                           ; BSR set to: 0
  8182                           ;ipv4.c: 185: ipv4_calculateHeaderChecksum(&testHeader);
  8183  003F16  0E9E               	movlw	low ipv4_checkHeaderChecksum@testHeader
  8184  003F18  6F60               	movwf	ipv4_calculateHeaderChecksum@header& (0+255),b
  8185  003F1A  0E00               	movlw	high ipv4_checkHeaderChecksum@testHeader
  8186  003F1C  6F61               	movwf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),b
  8187  003F1E  EC44  F00B         	call	_ipv4_calculateHeaderChecksum	;wreg free
  8188                           
  8189                           ;ipv4.c: 186: if (testHeader.checksum == header->checksum) {
  8190  003F22  0100               	movlb	0	; () banked
  8191  003F24  EE20 F00D          	lfsr	2,13
  8192  003F28  519A               	movf	ipv4_checkHeaderChecksum@header& (0+255),w,b
  8193  003F2A  26D9               	addwf	fsr2l,f,c
  8194  003F2C  519B               	movf	(ipv4_checkHeaderChecksum@header+1)& (0+255),w,b
  8195  003F2E  22DA               	addwfc	fsr2h,f,c
  8196  003F30  50DE               	movf	postinc2,w,c
  8197  003F32  19AB               	xorwf	(ipv4_checkHeaderChecksum@testHeader+13)& (0+255),w,b
  8198  003F34  E106               	bnz	l9525
  8199  003F36  50DE               	movf	postinc2,w,c
  8200  003F38  19AC               	xorwf	(ipv4_checkHeaderChecksum@testHeader+14)& (0+255),w,b
  8201  003F3A  A4D8               	btfss	status,2,c
  8202  003F3C  D002               	goto	l1153
  8203                           
  8204                           ; BSR set to: 0
  8205                           ;ipv4.c: 187: return 1;
  8206  003F3E  80D8               	bsf	status,0,c
  8207                           
  8208                           ; BSR set to: 0
  8209  003F40  0012               	return	
  8210  003F42                     l1153:
  8211  003F42                     l9525:
  8212                           
  8213                           ; BSR set to: 0
  8214                           ;ipv4.c: 188: }
  8215                           ;ipv4.c: 189: UARTTransmitText("[Expected ");
  8216  003F42  0E61               	movlw	low STR_101
  8217  003F44  6F98               	movwf	UARTTransmitText@str& (0+255),b
  8218  003F46  0E7F               	movlw	high STR_101
  8219  003F48  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  8220  003F4A  EC09  F027         	call	_UARTTransmitText	;wreg free
  8221                           
  8222                           ;ipv4.c: 190: UARTTransmitText(hexToString(testHeader.checksum));
  8223  003F4E  C0AB  F061         	movff	ipv4_checkHeaderChecksum@testHeader+13,hexToString@val
  8224  003F52  C0AC  F062         	movff	ipv4_checkHeaderChecksum@testHeader+14,hexToString@val+1
  8225  003F56  0100               	movlb	0	; () banked
  8226  003F58  6B63               	clrf	(hexToString@val+2)& (0+255),b
  8227  003F5A  6B64               	clrf	(hexToString@val+3)& (0+255),b
  8228  003F5C  EC90  F01E         	call	_hexToString	;wreg free
  8229  003F60  C061  F098         	movff	?_hexToString,UARTTransmitText@str
  8230  003F64  C062  F099         	movff	?_hexToString+1,UARTTransmitText@str+1
  8231  003F68  EC09  F027         	call	_UARTTransmitText	;wreg free
  8232                           
  8233                           ;ipv4.c: 191: UARTTransmitText(", got ");
  8234  003F6C  0EAB               	movlw	low STR_102
  8235  003F6E  0100               	movlb	0	; () banked
  8236  003F70  6F98               	movwf	UARTTransmitText@str& (0+255),b
  8237  003F72  0E7F               	movlw	high STR_102
  8238  003F74  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  8239  003F76  EC09  F027         	call	_UARTTransmitText	;wreg free
  8240                           
  8241                           ;ipv4.c: 192: UARTTransmitText(hexToString(header->checksum));
  8242  003F7A  0100               	movlb	0	; () banked
  8243  003F7C  EE20 F00D          	lfsr	2,13
  8244  003F80  519A               	movf	ipv4_checkHeaderChecksum@header& (0+255),w,b
  8245  003F82  26D9               	addwf	fsr2l,f,c
  8246  003F84  519B               	movf	(ipv4_checkHeaderChecksum@header+1)& (0+255),w,b
  8247  003F86  22DA               	addwfc	fsr2h,f,c
  8248  003F88  CFDE F09C          	movff	postinc2,??_ipv4_checkHeaderChecksum
  8249  003F8C  CFDD F09D          	movff	postdec2,??_ipv4_checkHeaderChecksum+1
  8250  003F90  C09C  F061         	movff	??_ipv4_checkHeaderChecksum,hexToString@val
  8251  003F94  C09D  F062         	movff	??_ipv4_checkHeaderChecksum+1,hexToString@val+1
  8252  003F98  6B63               	clrf	(hexToString@val+2)& (0+255),b
  8253  003F9A  6B64               	clrf	(hexToString@val+3)& (0+255),b
  8254  003F9C  EC90  F01E         	call	_hexToString	;wreg free
  8255  003FA0  C061  F098         	movff	?_hexToString,UARTTransmitText@str
  8256  003FA4  C062  F099         	movff	?_hexToString+1,UARTTransmitText@str+1
  8257  003FA8  EC09  F027         	call	_UARTTransmitText	;wreg free
  8258                           
  8259                           ;ipv4.c: 193: UARTTransmitText("]");
  8260  003FAC  0EFA               	movlw	low (STR_19+1)
  8261  003FAE  0100               	movlb	0	; () banked
  8262  003FB0  6F98               	movwf	UARTTransmitText@str& (0+255),b
  8263  003FB2  0E7F               	movlw	high (STR_19+1)
  8264  003FB4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  8265  003FB6  EC09  F027         	call	_UARTTransmitText	;wreg free
  8266                           
  8267                           ;ipv4.c: 194: return 0;
  8268  003FBA  90D8               	bcf	status,0,c
  8269  003FBC  0012               	return	
  8270  003FBE                     __end_of_ipv4_checkHeaderChecksum:
  8271                           	opt stack 0
  8272                           tblptru	equ	0xFF8
  8273                           tblptrh	equ	0xFF7
  8274                           tblptrl	equ	0xFF6
  8275                           tablat	equ	0xFF5
  8276                           prodh	equ	0xFF4
  8277                           prodl	equ	0xFF3
  8278                           intcon	equ	0xFF2
  8279                           intcon3	equ	0xFF0
  8280                           indf0	equ	0xFEF
  8281                           postinc0	equ	0xFEE
  8282                           plusw0	equ	0xFEB
  8283                           fsr0h	equ	0xFEA
  8284                           fsr0l	equ	0xFE9
  8285                           wreg	equ	0xFE8
  8286                           indf1	equ	0xFE7
  8287                           postinc1	equ	0xFE6
  8288                           postdec1	equ	0xFE5
  8289                           plusw1	equ	0xFE3
  8290                           fsr1h	equ	0xFE2
  8291                           fsr1l	equ	0xFE1
  8292                           indf2	equ	0xFDF
  8293                           postinc2	equ	0xFDE
  8294                           postdec2	equ	0xFDD
  8295                           plusw2	equ	0xFDB
  8296                           fsr2h	equ	0xFDA
  8297                           fsr2l	equ	0xFD9
  8298                           status	equ	0xFD8
  8299                           
  8300 ;; *************** function _ipv4_calculateHeaderChecksum *****************
  8301 ;; Defined at:
  8302 ;;		line 117 in file "src/stack/protocols/ipv4.c"
  8303 ;; Parameters:    Size  Location     Type
  8304 ;;  header          2    0[BANK0 ] PTR struct ipv4_header
  8305 ;;		 -> ipv4_checkHeaderChecksum@testHeader(23), stack.pendingPacketToSend(66), stack(135), 
  8306 ;; Auto vars:     Size  Location     Type
  8307 ;;  sum             4   14[BANK0 ] unsigned long 
  8308 ;; Return value:  Size  Location     Type
  8309 ;;                  1    wreg      void 
  8310 ;; Registers used:
  8311 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8312 ;; Tracked objects:
  8313 ;;		On entry : 0/0
  8314 ;;		On exit  : 0/0
  8315 ;;		Unchanged: 0/0
  8316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8317 ;;      Params:         0       2       0       0       0       0       0       0       0
  8318 ;;      Locals:         0       4       0       0       0       0       0       0       0
  8319 ;;      Temps:          0      12       0       0       0       0       0       0       0
  8320 ;;      Totals:         0      18       0       0       0       0       0       0       0
  8321 ;;Total ram usage:       18 bytes
  8322 ;; Hardware stack levels used:    1
  8323 ;; Hardware stack levels required when called:    4
  8324 ;; This function calls:
  8325 ;;		Nothing
  8326 ;; This function is called by:
  8327 ;;		_main
  8328 ;;		_ipv4_checkHeaderChecksum
  8329 ;; This function uses a non-reentrant model
  8330 ;;
  8331                           
  8332                           	psect	text19
  8333  001688                     __ptext19:
  8334                           	opt stack 0
  8335  001688                     _ipv4_calculateHeaderChecksum:
  8336                           	opt stack 26
  8337                           
  8338                           ;ipv4.c: 119: uint32_t sum = 0;
  8339                           
  8340                           ;incstack = 0
  8341  001688  0E00               	movlw	0
  8342  00168A  0100               	movlb	0	; () banked
  8343  00168C  6F6E               	movwf	ipv4_calculateHeaderChecksum@sum& (0+255),b
  8344  00168E  0E00               	movlw	0
  8345  001690  6F6F               	movwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),b
  8346  001692  0E00               	movlw	0
  8347  001694  6F70               	movwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),b
  8348  001696  0E00               	movlw	0
  8349  001698  6F71               	movwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),b
  8350                           
  8351                           ; BSR set to: 0
  8352                           ;ipv4.c: 120: sum = ((header->version << 12) | (header->headerLength << 8) | (header->ds
      +                          cp << 2) | (header->ecn))&0xffff;
  8353  00169A  EE20 F002          	lfsr	2,2
  8354  00169E  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  8355  0016A0  26D9               	addwf	fsr2l,f,c
  8356  0016A2  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  8357  0016A4  22DA               	addwfc	fsr2h,f,c
  8358  0016A6  50DF               	movf	indf2,w,c
  8359  0016A8  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  8360  0016AA  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  8361  0016AC  90D8               	bcf	status,0,c
  8362  0016AE  3762               	rlcf	??_ipv4_calculateHeaderChecksum& (0+255),f,b
  8363  0016B0  3763               	rlcf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  8364  0016B2  90D8               	bcf	status,0,c
  8365  0016B4  3762               	rlcf	??_ipv4_calculateHeaderChecksum& (0+255),f,b
  8366  0016B6  3763               	rlcf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  8367  0016B8  EE20 F001          	lfsr	2,1
  8368  0016BC  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  8369  0016BE  26D9               	addwf	fsr2l,f,c
  8370  0016C0  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  8371  0016C2  22DA               	addwfc	fsr2h,f,c
  8372  0016C4  50DF               	movf	indf2,w,c
  8373  0016C6  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  8374  0016C8  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  8375  0016CA  6F66               	movwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  8376  0016CC  6B65               	clrf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  8377  0016CE  C060  FFD9         	movff	ipv4_calculateHeaderChecksum@header,fsr2l
  8378  0016D2  C061  FFDA         	movff	ipv4_calculateHeaderChecksum@header+1,fsr2h
  8379  0016D6  50DF               	movf	indf2,w,c
  8380  0016D8  6F67               	movwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),b
  8381  0016DA  6B68               	clrf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),b
  8382  0016DC  0E0C               	movlw	12
  8383  0016DE                     u10095:
  8384  0016DE  90D8               	bcf	status,0,c
  8385  0016E0  3767               	rlcf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),f,b
  8386  0016E2  3768               	rlcf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),f,b
  8387  0016E4  2EE8               	decfsz	wreg,f,c
  8388  0016E6  D7FB               	goto	u10095
  8389  0016E8  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  8390  0016EA  1367               	iorwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),f,b
  8391  0016EC  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  8392  0016EE  1368               	iorwf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),f,b
  8393  0016F0  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  8394  0016F2  1367               	iorwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),f,b
  8395  0016F4  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  8396  0016F6  1368               	iorwf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),f,b
  8397  0016F8  EE20 F003          	lfsr	2,3
  8398  0016FC  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  8399  0016FE  26D9               	addwf	fsr2l,f,c
  8400  001700  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  8401  001702  22DA               	addwfc	fsr2h,f,c
  8402  001704  50DF               	movf	indf2,w,c
  8403  001706  6F69               	movwf	(??_ipv4_calculateHeaderChecksum+7)& (0+255),b
  8404  001708  5169               	movf	(??_ipv4_calculateHeaderChecksum+7)& (0+255),w,b
  8405  00170A  1367               	iorwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),f,b
  8406  00170C  0E00               	movlw	0
  8407  00170E  1368               	iorwf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),f,b
  8408  001710  C067  F06E         	movff	??_ipv4_calculateHeaderChecksum+5,ipv4_calculateHeaderChecksum@sum
  8409  001714  C068  F06F         	movff	??_ipv4_calculateHeaderChecksum+6,ipv4_calculateHeaderChecksum@sum+1
  8410  001718  6B70               	clrf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),b
  8411  00171A  6B71               	clrf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),b
  8412                           
  8413                           ; BSR set to: 0
  8414                           ;ipv4.c: 121: sum += header->totalLength;
  8415  00171C  EE20 F004          	lfsr	2,4
  8416  001720  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  8417  001722  26D9               	addwf	fsr2l,f,c
  8418  001724  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  8419  001726  22DA               	addwfc	fsr2h,f,c
  8420  001728  CFDE F062          	movff	postinc2,??_ipv4_calculateHeaderChecksum
  8421  00172C  CFDD F063          	movff	postdec2,??_ipv4_calculateHeaderChecksum+1
  8422  001730  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  8423  001732  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  8424  001734  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  8425  001736  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  8426  001738  0E00               	movlw	0
  8427  00173A  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  8428  00173C  0E00               	movlw	0
  8429  00173E  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  8430                           
  8431                           ; BSR set to: 0
  8432                           ;ipv4.c: 122: sum += header->identification;
  8433  001740  EE20 F006          	lfsr	2,6
  8434  001744  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  8435  001746  26D9               	addwf	fsr2l,f,c
  8436  001748  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  8437  00174A  22DA               	addwfc	fsr2h,f,c
  8438  00174C  CFDE F062          	movff	postinc2,??_ipv4_calculateHeaderChecksum
  8439  001750  CFDD F063          	movff	postdec2,??_ipv4_calculateHeaderChecksum+1
  8440  001754  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  8441  001756  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  8442  001758  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  8443  00175A  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  8444  00175C  0E00               	movlw	0
  8445  00175E  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  8446  001760  0E00               	movlw	0
  8447  001762  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  8448                           
  8449                           ; BSR set to: 0
  8450                           ;ipv4.c: 123: sum += ((header->flags << 13) | (header->fragmentOffset))&0xffff;
  8451  001764  EE20 F009          	lfsr	2,9
  8452  001768  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  8453  00176A  26D9               	addwf	fsr2l,f,c
  8454  00176C  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  8455  00176E  22DA               	addwfc	fsr2h,f,c
  8456  001770  CFDE F062          	movff	postinc2,??_ipv4_calculateHeaderChecksum
  8457  001774  CFDD F063          	movff	postdec2,??_ipv4_calculateHeaderChecksum+1
  8458  001778  EE20 F008          	lfsr	2,8
  8459  00177C  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  8460  00177E  26D9               	addwf	fsr2l,f,c
  8461  001780  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  8462  001782  22DA               	addwfc	fsr2h,f,c
  8463  001784  50DF               	movf	indf2,w,c
  8464  001786  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  8465  001788  6B65               	clrf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  8466  00178A  0E0D               	movlw	13
  8467  00178C                     u10105:
  8468  00178C  90D8               	bcf	status,0,c
  8469  00178E  3764               	rlcf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  8470  001790  3765               	rlcf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  8471  001792  2EE8               	decfsz	wreg,f,c
  8472  001794  D7FB               	goto	u10105
  8473  001796  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  8474  001798  1364               	iorwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  8475  00179A  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  8476  00179C  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  8477  00179E  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  8478  0017A0  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  8479  0017A2  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  8480  0017A4  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  8481  0017A6  0E00               	movlw	0
  8482  0017A8  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  8483  0017AA  0E00               	movlw	0
  8484  0017AC  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  8485                           
  8486                           ; BSR set to: 0
  8487                           ;ipv4.c: 124: sum += ((header->timeToLive << 8) | (header->protocol))&0xffff;
  8488  0017AE  EE20 F00B          	lfsr	2,11
  8489  0017B2  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  8490  0017B4  26D9               	addwf	fsr2l,f,c
  8491  0017B6  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  8492  0017B8  22DA               	addwfc	fsr2h,f,c
  8493  0017BA  50DF               	movf	indf2,w,c
  8494  0017BC  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  8495  0017BE  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  8496  0017C0  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  8497  0017C2  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  8498  0017C4  EE20 F00C          	lfsr	2,12
  8499  0017C8  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  8500  0017CA  26D9               	addwf	fsr2l,f,c
  8501  0017CC  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  8502  0017CE  22DA               	addwfc	fsr2h,f,c
  8503  0017D0  50DF               	movf	indf2,w,c
  8504  0017D2  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  8505  0017D4  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  8506  0017D6  1363               	iorwf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  8507  0017D8  0E00               	movlw	0
  8508  0017DA  1364               	iorwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  8509  0017DC  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  8510  0017DE  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  8511  0017E0  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  8512  0017E2  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  8513  0017E4  0E00               	movlw	0
  8514  0017E6  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  8515  0017E8  0E00               	movlw	0
  8516  0017EA  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  8517                           
  8518                           ; BSR set to: 0
  8519                           ;ipv4.c: 126: sum += ((header->source.address[1] | (header->source.address[0] << 8)))&0x
      +                          ffff;
  8520  0017EC  EE20 F00F          	lfsr	2,15
  8521  0017F0  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  8522  0017F2  26D9               	addwf	fsr2l,f,c
  8523  0017F4  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  8524  0017F6  22DA               	addwfc	fsr2h,f,c
  8525  0017F8  50DF               	movf	indf2,w,c
  8526  0017FA  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  8527  0017FC  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  8528  0017FE  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  8529  001800  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  8530  001802  EE20 F010          	lfsr	2,16
  8531  001806  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  8532  001808  26D9               	addwf	fsr2l,f,c
  8533  00180A  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  8534  00180C  22DA               	addwfc	fsr2h,f,c
  8535  00180E  50DF               	movf	indf2,w,c
  8536  001810  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  8537  001812  6B66               	clrf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  8538  001814  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  8539  001816  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  8540  001818  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  8541  00181A  1366               	iorwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),f,b
  8542  00181C  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  8543  00181E  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  8544  001820  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  8545  001822  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  8546  001824  0E00               	movlw	0
  8547  001826  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  8548  001828  0E00               	movlw	0
  8549  00182A  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  8550                           
  8551                           ; BSR set to: 0
  8552                           ;ipv4.c: 127: sum += ((header->source.address[3] | (header->source.address[2] << 8)))&0x
      +                          ffff;
  8553  00182C  EE20 F011          	lfsr	2,17
  8554  001830  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  8555  001832  26D9               	addwf	fsr2l,f,c
  8556  001834  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  8557  001836  22DA               	addwfc	fsr2h,f,c
  8558  001838  50DF               	movf	indf2,w,c
  8559  00183A  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  8560  00183C  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  8561  00183E  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  8562  001840  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  8563  001842  EE20 F012          	lfsr	2,18
  8564  001846  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  8565  001848  26D9               	addwf	fsr2l,f,c
  8566  00184A  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  8567  00184C  22DA               	addwfc	fsr2h,f,c
  8568  00184E  50DF               	movf	indf2,w,c
  8569  001850  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  8570  001852  6B66               	clrf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  8571  001854  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  8572  001856  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  8573  001858  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  8574  00185A  1366               	iorwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),f,b
  8575  00185C  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  8576  00185E  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  8577  001860  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  8578  001862  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  8579  001864  0E00               	movlw	0
  8580  001866  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  8581  001868  0E00               	movlw	0
  8582  00186A  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  8583                           
  8584                           ; BSR set to: 0
  8585                           ;ipv4.c: 128: sum += ((header->destination.address[1] | (header->destination.address[0] 
      +                          << 8)))&0xffff;
  8586  00186C  EE20 F013          	lfsr	2,19
  8587  001870  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  8588  001872  26D9               	addwf	fsr2l,f,c
  8589  001874  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  8590  001876  22DA               	addwfc	fsr2h,f,c
  8591  001878  50DF               	movf	indf2,w,c
  8592  00187A  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  8593  00187C  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  8594  00187E  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  8595  001880  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  8596  001882  EE20 F014          	lfsr	2,20
  8597  001886  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  8598  001888  26D9               	addwf	fsr2l,f,c
  8599  00188A  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  8600  00188C  22DA               	addwfc	fsr2h,f,c
  8601  00188E  50DF               	movf	indf2,w,c
  8602  001890  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  8603  001892  6B66               	clrf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  8604  001894  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  8605  001896  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  8606  001898  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  8607  00189A  1366               	iorwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),f,b
  8608  00189C  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  8609  00189E  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  8610  0018A0  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  8611  0018A2  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  8612  0018A4  0E00               	movlw	0
  8613  0018A6  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  8614  0018A8  0E00               	movlw	0
  8615  0018AA  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  8616                           
  8617                           ; BSR set to: 0
  8618                           ;ipv4.c: 129: sum += ((header->destination.address[3] | (header->destination.address[2] 
      +                          << 8)))&0xffff;
  8619  0018AC  EE20 F015          	lfsr	2,21
  8620  0018B0  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  8621  0018B2  26D9               	addwf	fsr2l,f,c
  8622  0018B4  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  8623  0018B6  22DA               	addwfc	fsr2h,f,c
  8624  0018B8  50DF               	movf	indf2,w,c
  8625  0018BA  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  8626  0018BC  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  8627  0018BE  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  8628  0018C0  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  8629  0018C2  EE20 F016          	lfsr	2,22
  8630  0018C6  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  8631  0018C8  26D9               	addwf	fsr2l,f,c
  8632  0018CA  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  8633  0018CC  22DA               	addwfc	fsr2h,f,c
  8634  0018CE  50DF               	movf	indf2,w,c
  8635  0018D0  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  8636  0018D2  6B66               	clrf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  8637  0018D4  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  8638  0018D6  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  8639  0018D8  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  8640  0018DA  1366               	iorwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),f,b
  8641  0018DC  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  8642  0018DE  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  8643  0018E0  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  8644  0018E2  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  8645  0018E4  0E00               	movlw	0
  8646  0018E6  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  8647  0018E8  0E00               	movlw	0
  8648  0018EA  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  8649                           
  8650                           ; BSR set to: 0
  8651                           ;ipv4.c: 131: sum = (sum & 0x0ffff)+((sum & 0xf0000) >> 16);
  8652  0018EC  C06E  F062         	movff	ipv4_calculateHeaderChecksum@sum,??_ipv4_calculateHeaderChecksum
  8653  0018F0  C06F  F063         	movff	ipv4_calculateHeaderChecksum@sum+1,??_ipv4_calculateHeaderChecksum+1
  8654  0018F4  C070  F064         	movff	ipv4_calculateHeaderChecksum@sum+2,??_ipv4_calculateHeaderChecksum+2
  8655  0018F8  C071  F065         	movff	ipv4_calculateHeaderChecksum@sum+3,??_ipv4_calculateHeaderChecksum+3
  8656  0018FC  0E11               	movlw	17
  8657  0018FE  D005               	goto	u10110
  8658  001900                     u10115:
  8659  001900  90D8               	bcf	status,0,c
  8660  001902  3365               	rrcf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  8661  001904  3364               	rrcf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  8662  001906  3363               	rrcf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  8663  001908  3362               	rrcf	??_ipv4_calculateHeaderChecksum& (0+255),f,b
  8664  00190A                     u10110:
  8665  00190A  2EE8               	decfsz	wreg,f,c
  8666  00190C  D7F9               	goto	u10115
  8667  00190E  0E0F               	movlw	15
  8668  001910  1562               	andwf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  8669  001912  6F66               	movwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  8670  001914  0E00               	movlw	0
  8671  001916  1563               	andwf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  8672  001918  6F67               	movwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),b
  8673  00191A  0E00               	movlw	0
  8674  00191C  1564               	andwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  8675  00191E  6F68               	movwf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),b
  8676  001920  0E00               	movlw	0
  8677  001922  1565               	andwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  8678  001924  6F69               	movwf	(??_ipv4_calculateHeaderChecksum+7)& (0+255),b
  8679  001926  0EFF               	movlw	255
  8680  001928  156E               	andwf	ipv4_calculateHeaderChecksum@sum& (0+255),w,b
  8681  00192A  6F6A               	movwf	(??_ipv4_calculateHeaderChecksum+8)& (0+255),b
  8682  00192C  0EFF               	movlw	255
  8683  00192E  156F               	andwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),w,b
  8684  001930  6F6B               	movwf	(??_ipv4_calculateHeaderChecksum+9)& (0+255),b
  8685  001932  0E00               	movlw	0
  8686  001934  1570               	andwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),w,b
  8687  001936  6F6C               	movwf	(??_ipv4_calculateHeaderChecksum+10)& (0+255),b
  8688  001938  0E00               	movlw	0
  8689  00193A  1571               	andwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),w,b
  8690  00193C  6F6D               	movwf	(??_ipv4_calculateHeaderChecksum+11)& (0+255),b
  8691  00193E  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  8692  001940  256A               	addwf	(??_ipv4_calculateHeaderChecksum+8)& (0+255),w,b
  8693  001942  6F6E               	movwf	ipv4_calculateHeaderChecksum@sum& (0+255),b
  8694  001944  5167               	movf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),w,b
  8695  001946  216B               	addwfc	(??_ipv4_calculateHeaderChecksum+9)& (0+255),w,b
  8696  001948  6F6F               	movwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),b
  8697  00194A  5168               	movf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),w,b
  8698  00194C  216C               	addwfc	(??_ipv4_calculateHeaderChecksum+10)& (0+255),w,b
  8699  00194E  6F70               	movwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),b
  8700  001950  5169               	movf	(??_ipv4_calculateHeaderChecksum+7)& (0+255),w,b
  8701  001952  216D               	addwfc	(??_ipv4_calculateHeaderChecksum+11)& (0+255),w,b
  8702  001954  6F71               	movwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),b
  8703                           
  8704                           ; BSR set to: 0
  8705                           ;ipv4.c: 132: sum = ~sum;
  8706  001956  C06E  F062         	movff	ipv4_calculateHeaderChecksum@sum,??_ipv4_calculateHeaderChecksum
  8707  00195A  C06F  F063         	movff	ipv4_calculateHeaderChecksum@sum+1,??_ipv4_calculateHeaderChecksum+1
  8708  00195E  C070  F064         	movff	ipv4_calculateHeaderChecksum@sum+2,??_ipv4_calculateHeaderChecksum+2
  8709  001962  C071  F065         	movff	ipv4_calculateHeaderChecksum@sum+3,??_ipv4_calculateHeaderChecksum+3
  8710  001966  1F62               	comf	??_ipv4_calculateHeaderChecksum& (0+255),f,b
  8711  001968  1F63               	comf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  8712  00196A  1F64               	comf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  8713  00196C  1F65               	comf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  8714  00196E  C062  F06E         	movff	??_ipv4_calculateHeaderChecksum,ipv4_calculateHeaderChecksum@sum
  8715  001972  C063  F06F         	movff	??_ipv4_calculateHeaderChecksum+1,ipv4_calculateHeaderChecksum@sum+1
  8716  001976  C064  F070         	movff	??_ipv4_calculateHeaderChecksum+2,ipv4_calculateHeaderChecksum@sum+2
  8717  00197A  C065  F071         	movff	??_ipv4_calculateHeaderChecksum+3,ipv4_calculateHeaderChecksum@sum+3
  8718                           
  8719                           ; BSR set to: 0
  8720                           ;ipv4.c: 134: header->checksum = sum;
  8721  00197E  EE20 F00D          	lfsr	2,13
  8722  001982  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  8723  001984  26D9               	addwf	fsr2l,f,c
  8724  001986  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  8725  001988  22DA               	addwfc	fsr2h,f,c
  8726  00198A  C06E  FFDE         	movff	ipv4_calculateHeaderChecksum@sum,postinc2
  8727  00198E  C06F  FFDD         	movff	ipv4_calculateHeaderChecksum@sum+1,postdec2
  8728                           
  8729                           ; BSR set to: 0
  8730  001992  0012               	return		;funcret
  8731  001994                     __end_of_ipv4_calculateHeaderChecksum:
  8732                           	opt stack 0
  8733                           tblptru	equ	0xFF8
  8734                           tblptrh	equ	0xFF7
  8735                           tblptrl	equ	0xFF6
  8736                           tablat	equ	0xFF5
  8737                           prodh	equ	0xFF4
  8738                           prodl	equ	0xFF3
  8739                           intcon	equ	0xFF2
  8740                           intcon3	equ	0xFF0
  8741                           indf0	equ	0xFEF
  8742                           postinc0	equ	0xFEE
  8743                           plusw0	equ	0xFEB
  8744                           fsr0h	equ	0xFEA
  8745                           fsr0l	equ	0xFE9
  8746                           wreg	equ	0xFE8
  8747                           indf1	equ	0xFE7
  8748                           postinc1	equ	0xFE6
  8749                           postdec1	equ	0xFE5
  8750                           plusw1	equ	0xFE3
  8751                           fsr1h	equ	0xFE2
  8752                           fsr1l	equ	0xFE1
  8753                           indf2	equ	0xFDF
  8754                           postinc2	equ	0xFDE
  8755                           postdec2	equ	0xFDD
  8756                           plusw2	equ	0xFDB
  8757                           fsr2h	equ	0xFDA
  8758                           fsr2l	equ	0xFD9
  8759                           status	equ	0xFD8
  8760                           
  8761 ;; *************** function _hexToString *****************
  8762 ;; Defined at:
  8763 ;;		line 93 in file "src/system/uart.c"
  8764 ;; Parameters:    Size  Location     Type
  8765 ;;  val             4    1[BANK0 ] unsigned long 
  8766 ;; Auto vars:     Size  Location     Type
  8767 ;;  pointer         1    9[BANK0 ] unsigned char 
  8768 ;; Return value:  Size  Location     Type
  8769 ;;                  2    1[BANK0 ] PTR unsigned char 
  8770 ;; Registers used:
  8771 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8772 ;; Tracked objects:
  8773 ;;		On entry : 0/0
  8774 ;;		On exit  : 0/0
  8775 ;;		Unchanged: 0/0
  8776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8777 ;;      Params:         0       4       0       0       0       0       0       0       0
  8778 ;;      Locals:         0       1       0       0       0       0       0       0       0
  8779 ;;      Temps:          0       4       0       0       0       0       0       0       0
  8780 ;;      Totals:         0       9       0       0       0       0       0       0       0
  8781 ;;Total ram usage:        9 bytes
  8782 ;; Hardware stack levels used:    1
  8783 ;; Hardware stack levels required when called:    5
  8784 ;; This function calls:
  8785 ;;		_hexToChar
  8786 ;; This function is called by:
  8787 ;;		_ipv4_checkHeaderChecksum
  8788 ;; This function uses a non-reentrant model
  8789 ;;
  8790                           
  8791                           	psect	text20
  8792  003D20                     __ptext20:
  8793                           	opt stack 0
  8794  003D20                     _hexToString:
  8795                           	opt stack 21
  8796                           
  8797                           ;uart.c: 94: char static number [10];
  8798                           ;uart.c: 95: uint8_t pointer = 0;
  8799                           
  8800                           ; BSR set to: 0
  8801                           ;incstack = 0
  8802  003D20  0E00               	movlw	0
  8803  003D22  0100               	movlb	0	; () banked
  8804  003D24  6F69               	movwf	hexToString@pointer& (0+255),b
  8805                           
  8806                           ; BSR set to: 0
  8807                           ;uart.c: 96: if (val > 0xff) {
  8808  003D26  5164               	movf	(hexToString@val+3)& (0+255),w,b
  8809  003D28  1163               	iorwf	(hexToString@val+2)& (0+255),w,b
  8810  003D2A  E103               	bnz	u10130
  8811  003D2C  0562               	decf	(hexToString@val+1)& (0+255),w,b
  8812  003D2E  A0D8               	btfss	status,0,c
  8813  003D30  D02F               	goto	l809
  8814  003D32                     u10130:
  8815                           
  8816                           ; BSR set to: 0
  8817                           ;uart.c: 97: number[pointer++] = hexToChar((val >> 12) & 0xf);
  8818  003D32  5169               	movf	hexToString@pointer& (0+255),w,b
  8819  003D34  0D01               	mullw	1
  8820  003D36  0EAD               	movlw	low hexToString@number
  8821  003D38  24F3               	addwf	prodl,w,c
  8822  003D3A  6ED9               	movwf	fsr2l,c
  8823  003D3C  0E01               	movlw	high hexToString@number
  8824  003D3E  20F4               	addwfc	prodh,w,c
  8825  003D40  6EDA               	movwf	fsr2h,c
  8826  003D42  C061  F065         	movff	hexToString@val,??_hexToString
  8827  003D46  C062  F066         	movff	hexToString@val+1,??_hexToString+1
  8828  003D4A  C063  F067         	movff	hexToString@val+2,??_hexToString+2
  8829  003D4E  C064  F068         	movff	hexToString@val+3,??_hexToString+3
  8830  003D52  0E0D               	movlw	13
  8831  003D54  D005               	goto	u10140
  8832  003D56                     u10145:
  8833  003D56  90D8               	bcf	status,0,c
  8834  003D58  3368               	rrcf	(??_hexToString+3)& (0+255),f,b
  8835  003D5A  3367               	rrcf	(??_hexToString+2)& (0+255),f,b
  8836  003D5C  3366               	rrcf	(??_hexToString+1)& (0+255),f,b
  8837  003D5E  3365               	rrcf	??_hexToString& (0+255),f,b
  8838  003D60                     u10140:
  8839  003D60  2EE8               	decfsz	wreg,f,c
  8840  003D62  D7F9               	goto	u10145
  8841  003D64  5165               	movf	??_hexToString& (0+255),w,b
  8842  003D66  0B0F               	andlw	15
  8843  003D68  EC09  F02B         	call	_hexToChar
  8844  003D6C  6EDF               	movwf	indf2,c
  8845  003D6E  0100               	movlb	0	; () banked
  8846  003D70  2B69               	incf	hexToString@pointer& (0+255),f,b
  8847                           
  8848                           ; BSR set to: 0
  8849                           ;uart.c: 98: number[pointer++] = hexToChar((val >> 8) & 0xf);
  8850  003D72  5169               	movf	hexToString@pointer& (0+255),w,b
  8851  003D74  0D01               	mullw	1
  8852  003D76  0EAD               	movlw	low hexToString@number
  8853  003D78  24F3               	addwf	prodl,w,c
  8854  003D7A  6ED9               	movwf	fsr2l,c
  8855  003D7C  0E01               	movlw	high hexToString@number
  8856  003D7E  20F4               	addwfc	prodh,w,c
  8857  003D80  6EDA               	movwf	fsr2h,c
  8858  003D82  5162               	movf	(hexToString@val+1)& (0+255),w,b
  8859  003D84  0B0F               	andlw	15
  8860  003D86  EC09  F02B         	call	_hexToChar
  8861  003D8A  6EDF               	movwf	indf2,c
  8862  003D8C  0100               	movlb	0	; () banked
  8863  003D8E  2B69               	incf	hexToString@pointer& (0+255),f,b
  8864  003D90                     l809:
  8865                           
  8866                           ; BSR set to: 0
  8867                           ;uart.c: 99: }
  8868                           ;uart.c: 100: number[pointer++] = hexToChar((val >> 4) & 0xf);
  8869                           
  8870                           ; BSR set to: 0
  8871  003D90  5169               	movf	hexToString@pointer& (0+255),w,b
  8872  003D92  0D01               	mullw	1
  8873  003D94  0EAD               	movlw	low hexToString@number
  8874  003D96  24F3               	addwf	prodl,w,c
  8875  003D98  6ED9               	movwf	fsr2l,c
  8876  003D9A  0E01               	movlw	high hexToString@number
  8877  003D9C  20F4               	addwfc	prodh,w,c
  8878  003D9E  6EDA               	movwf	fsr2h,c
  8879  003DA0  C061  F065         	movff	hexToString@val,??_hexToString
  8880  003DA4  C062  F066         	movff	hexToString@val+1,??_hexToString+1
  8881  003DA8  C063  F067         	movff	hexToString@val+2,??_hexToString+2
  8882  003DAC  C064  F068         	movff	hexToString@val+3,??_hexToString+3
  8883  003DB0  0E05               	movlw	5
  8884  003DB2  D005               	goto	u10150
  8885  003DB4                     u10155:
  8886  003DB4  90D8               	bcf	status,0,c
  8887  003DB6  3368               	rrcf	(??_hexToString+3)& (0+255),f,b
  8888  003DB8  3367               	rrcf	(??_hexToString+2)& (0+255),f,b
  8889  003DBA  3366               	rrcf	(??_hexToString+1)& (0+255),f,b
  8890  003DBC  3365               	rrcf	??_hexToString& (0+255),f,b
  8891  003DBE                     u10150:
  8892  003DBE  2EE8               	decfsz	wreg,f,c
  8893  003DC0  D7F9               	goto	u10155
  8894  003DC2  5165               	movf	??_hexToString& (0+255),w,b
  8895  003DC4  0B0F               	andlw	15
  8896  003DC6  EC09  F02B         	call	_hexToChar
  8897  003DCA  6EDF               	movwf	indf2,c
  8898  003DCC  0100               	movlb	0	; () banked
  8899  003DCE  2B69               	incf	hexToString@pointer& (0+255),f,b
  8900                           
  8901                           ;uart.c: 101: number[pointer++] = hexToChar(val & 0xf);
  8902  003DD0  5169               	movf	hexToString@pointer& (0+255),w,b
  8903  003DD2  0D01               	mullw	1
  8904  003DD4  0EAD               	movlw	low hexToString@number
  8905  003DD6  24F3               	addwf	prodl,w,c
  8906  003DD8  6ED9               	movwf	fsr2l,c
  8907  003DDA  0E01               	movlw	high hexToString@number
  8908  003DDC  20F4               	addwfc	prodh,w,c
  8909  003DDE  6EDA               	movwf	fsr2h,c
  8910  003DE0  5161               	movf	hexToString@val& (0+255),w,b
  8911  003DE2  0B0F               	andlw	15
  8912  003DE4  EC09  F02B         	call	_hexToChar
  8913  003DE8  6EDF               	movwf	indf2,c
  8914  003DEA  0100               	movlb	0	; () banked
  8915  003DEC  2B69               	incf	hexToString@pointer& (0+255),f,b
  8916                           
  8917                           ; BSR set to: 0
  8918                           ;uart.c: 103: number[pointer++] = '\0';
  8919  003DEE  5169               	movf	hexToString@pointer& (0+255),w,b
  8920  003DF0  0D01               	mullw	1
  8921  003DF2  0EAD               	movlw	low hexToString@number
  8922  003DF4  24F3               	addwf	prodl,w,c
  8923  003DF6  6ED9               	movwf	fsr2l,c
  8924  003DF8  0E01               	movlw	high hexToString@number
  8925  003DFA  20F4               	addwfc	prodh,w,c
  8926  003DFC  6EDA               	movwf	fsr2h,c
  8927  003DFE  0E00               	movlw	0
  8928  003E00  6EDF               	movwf	indf2,c
  8929                           
  8930                           ; BSR set to: 0
  8931  003E02  2B69               	incf	hexToString@pointer& (0+255),f,b
  8932                           
  8933                           ; BSR set to: 0
  8934                           ;uart.c: 104: return number;
  8935  003E04  0EAD               	movlw	low hexToString@number
  8936  003E06  6F61               	movwf	?_hexToString& (0+255),b
  8937  003E08  0E01               	movlw	high hexToString@number
  8938  003E0A  6F62               	movwf	(?_hexToString+1)& (0+255),b
  8939  003E0C  0012               	return	
  8940  003E0E                     __end_of_hexToString:
  8941                           	opt stack 0
  8942                           tblptru	equ	0xFF8
  8943                           tblptrh	equ	0xFF7
  8944                           tblptrl	equ	0xFF6
  8945                           tablat	equ	0xFF5
  8946                           prodh	equ	0xFF4
  8947                           prodl	equ	0xFF3
  8948                           intcon	equ	0xFF2
  8949                           intcon3	equ	0xFF0
  8950                           indf0	equ	0xFEF
  8951                           postinc0	equ	0xFEE
  8952                           plusw0	equ	0xFEB
  8953                           fsr0h	equ	0xFEA
  8954                           fsr0l	equ	0xFE9
  8955                           wreg	equ	0xFE8
  8956                           indf1	equ	0xFE7
  8957                           postinc1	equ	0xFE6
  8958                           postdec1	equ	0xFE5
  8959                           plusw1	equ	0xFE3
  8960                           fsr1h	equ	0xFE2
  8961                           fsr1l	equ	0xFE1
  8962                           indf2	equ	0xFDF
  8963                           postinc2	equ	0xFDE
  8964                           postdec2	equ	0xFDD
  8965                           plusw2	equ	0xFDB
  8966                           fsr2h	equ	0xFDA
  8967                           fsr2l	equ	0xFD9
  8968                           status	equ	0xFD8
  8969                           
  8970 ;; *************** function _hexToChar *****************
  8971 ;; Defined at:
  8972 ;;		line 84 in file "src/system/uart.c"
  8973 ;; Parameters:    Size  Location     Type
  8974 ;;  val             1    wreg     unsigned char 
  8975 ;; Auto vars:     Size  Location     Type
  8976 ;;  val             1    0[BANK0 ] unsigned char 
  8977 ;; Return value:  Size  Location     Type
  8978 ;;                  1    wreg      unsigned char 
  8979 ;; Registers used:
  8980 ;;		wreg, status,2, status,0
  8981 ;; Tracked objects:
  8982 ;;		On entry : 0/0
  8983 ;;		On exit  : 0/0
  8984 ;;		Unchanged: 0/0
  8985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8986 ;;      Params:         0       0       0       0       0       0       0       0       0
  8987 ;;      Locals:         0       1       0       0       0       0       0       0       0
  8988 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8989 ;;      Totals:         0       1       0       0       0       0       0       0       0
  8990 ;;Total ram usage:        1 bytes
  8991 ;; Hardware stack levels used:    1
  8992 ;; Hardware stack levels required when called:    4
  8993 ;; This function calls:
  8994 ;;		Nothing
  8995 ;; This function is called by:
  8996 ;;		_hexToString
  8997 ;; This function uses a non-reentrant model
  8998 ;;
  8999                           
  9000                           	psect	text21
  9001  005612                     __ptext21:
  9002                           	opt stack 0
  9003  005612                     _hexToChar:
  9004                           	opt stack 21
  9005                           
  9006                           ; BSR set to: 0
  9007                           ;incstack = 0
  9008                           ;hexToChar@val stored from wreg
  9009  005612  0100               	movlb	0	; () banked
  9010  005614  6F60               	movwf	hexToChar@val& (0+255),b
  9011                           
  9012                           ;uart.c: 85: if (val < 10) {
  9013  005616  0E0A               	movlw	10
  9014  005618  0100               	movlb	0	; () banked
  9015  00561A  6160               	cpfslt	hexToChar@val& (0+255),b
  9016  00561C  D003               	goto	l801
  9017                           
  9018                           ; BSR set to: 0
  9019                           ;uart.c: 86: return val + 0x30u;
  9020  00561E  5160               	movf	hexToChar@val& (0+255),w,b
  9021  005620  0F30               	addlw	48
  9022                           
  9023                           ; BSR set to: 0
  9024  005622  0012               	return	
  9025  005624                     l801:
  9026                           
  9027                           ; BSR set to: 0
  9028                           
  9029                           ; BSR set to: 0
  9030  005624  0E10               	movlw	16
  9031  005626  6160               	cpfslt	hexToChar@val& (0+255),b
  9032  005628  D003               	goto	l804
  9033                           
  9034                           ; BSR set to: 0
  9035                           ;uart.c: 88: return val + 0x41u - 10;
  9036  00562A  5160               	movf	hexToChar@val& (0+255),w,b
  9037  00562C  0F37               	addlw	55
  9038                           
  9039                           ; BSR set to: 0
  9040  00562E  0012               	return	
  9041  005630                     l804:
  9042                           
  9043                           ; BSR set to: 0
  9044                           ;uart.c: 89: }
  9045                           ;uart.c: 90: return 0;
  9046                           
  9047                           ; BSR set to: 0
  9048                           
  9049                           ; BSR set to: 0
  9050  005630  0E00               	movlw	0
  9051  005632  0012               	return	
  9052  005634                     __end_of_hexToChar:
  9053                           	opt stack 0
  9054                           tblptru	equ	0xFF8
  9055                           tblptrh	equ	0xFF7
  9056                           tblptrl	equ	0xFF6
  9057                           tablat	equ	0xFF5
  9058                           prodh	equ	0xFF4
  9059                           prodl	equ	0xFF3
  9060                           intcon	equ	0xFF2
  9061                           intcon3	equ	0xFF0
  9062                           indf0	equ	0xFEF
  9063                           postinc0	equ	0xFEE
  9064                           plusw0	equ	0xFEB
  9065                           fsr0h	equ	0xFEA
  9066                           fsr0l	equ	0xFE9
  9067                           wreg	equ	0xFE8
  9068                           indf1	equ	0xFE7
  9069                           postinc1	equ	0xFE6
  9070                           postdec1	equ	0xFE5
  9071                           plusw1	equ	0xFE3
  9072                           fsr1h	equ	0xFE2
  9073                           fsr1l	equ	0xFE1
  9074                           indf2	equ	0xFDF
  9075                           postinc2	equ	0xFDE
  9076                           postdec2	equ	0xFDD
  9077                           plusw2	equ	0xFDB
  9078                           fsr2h	equ	0xFDA
  9079                           fsr2l	equ	0xFD9
  9080                           status	equ	0xFD8
  9081                           
  9082 ;; *************** function _ipProtocolToString *****************
  9083 ;; Defined at:
  9084 ;;		line 149 in file "src/system/uart.c"
  9085 ;; Parameters:    Size  Location     Type
  9086 ;;  protocol        1    wreg     enum E5627
  9087 ;; Auto vars:     Size  Location     Type
  9088 ;;  protocol        1    2[BANK0 ] enum E5627
  9089 ;; Return value:  Size  Location     Type
  9090 ;;                  2    0[BANK0 ] PTR unsigned char 
  9091 ;; Registers used:
  9092 ;;		wreg, status,2, status,0
  9093 ;; Tracked objects:
  9094 ;;		On entry : 0/0
  9095 ;;		On exit  : 0/0
  9096 ;;		Unchanged: 0/0
  9097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9098 ;;      Params:         0       2       0       0       0       0       0       0       0
  9099 ;;      Locals:         0       1       0       0       0       0       0       0       0
  9100 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9101 ;;      Totals:         0       3       0       0       0       0       0       0       0
  9102 ;;Total ram usage:        3 bytes
  9103 ;; Hardware stack levels used:    1
  9104 ;; Hardware stack levels required when called:    4
  9105 ;; This function calls:
  9106 ;;		Nothing
  9107 ;; This function is called by:
  9108 ;;		_ipv4_handleNewPacket
  9109 ;; This function uses a non-reentrant model
  9110 ;;
  9111                           
  9112                           	psect	text22
  9113  00504A                     __ptext22:
  9114                           	opt stack 0
  9115  00504A                     _ipProtocolToString:
  9116                           	opt stack 23
  9117                           
  9118                           ; BSR set to: 0
  9119                           ;incstack = 0
  9120                           ;ipProtocolToString@protocol stored from wreg
  9121  00504A  0100               	movlb	0	; () banked
  9122  00504C  6F62               	movwf	ipProtocolToString@protocol& (0+255),b
  9123                           
  9124                           ;uart.c: 150: switch (protocol) {
  9125  00504E  D015               	goto	l833
  9126  005050                     
  9127                           ;uart.c: 152: return "ICMP";
  9128  005050  0EC9               	movlw	low STR_65
  9129  005052  0100               	movlb	0	; () banked
  9130  005054  6F60               	movwf	?_ipProtocolToString& (0+255),b
  9131  005056  0E7F               	movlw	high STR_65
  9132  005058  6F61               	movwf	(?_ipProtocolToString+1)& (0+255),b
  9133                           
  9134                           ; BSR set to: 0
  9135  00505A  0012               	return	
  9136  00505C                     
  9137                           ; BSR set to: 0
  9138                           ;uart.c: 154: return "TCP";
  9139                           
  9140                           ; BSR set to: 0
  9141  00505C  0EDD               	movlw	low STR_66
  9142  00505E  6F60               	movwf	?_ipProtocolToString& (0+255),b
  9143  005060  0E7F               	movlw	high STR_66
  9144  005062  6F61               	movwf	(?_ipProtocolToString+1)& (0+255),b
  9145                           
  9146                           ; BSR set to: 0
  9147  005064  0012               	return	
  9148  005066                     
  9149                           ; BSR set to: 0
  9150                           ;uart.c: 156: return "UDP";
  9151                           
  9152                           ; BSR set to: 0
  9153  005066  0EE1               	movlw	low STR_67
  9154  005068  6F60               	movwf	?_ipProtocolToString& (0+255),b
  9155  00506A  0E7F               	movlw	high STR_67
  9156  00506C  6F61               	movwf	(?_ipProtocolToString+1)& (0+255),b
  9157                           
  9158                           ; BSR set to: 0
  9159  00506E  0012               	return	
  9160  005070                     
  9161                           ; BSR set to: 0
  9162                           ;uart.c: 158: return "Unknown Protocol";
  9163                           
  9164                           ; BSR set to: 0
  9165  005070  0EA7               	movlw	low STR_68
  9166  005072  6F60               	movwf	?_ipProtocolToString& (0+255),b
  9167  005074  0E7E               	movlw	high STR_68
  9168  005076  6F61               	movwf	(?_ipProtocolToString+1)& (0+255),b
  9169                           
  9170                           ; BSR set to: 0
  9171                           ;uart.c: 159: }
  9172                           
  9173                           ; BSR set to: 0
  9174  005078  0012               	return	
  9175  00507A                     l833:
  9176                           
  9177                           ; BSR set to: 0
  9178  00507A  0100               	movlb	0	; () banked
  9179  00507C  5162               	movf	ipProtocolToString@protocol& (0+255),w,b
  9180                           
  9181                           ; Switch size 1, requested type "space"
  9182                           ; Number of cases is 3, Range of values is 1 to 17
  9183                           ; switch strategies available:
  9184                           ; Name         Instructions Cycles
  9185                           ; simple_byte           10     6 (average)
  9186                           ;	Chosen strategy is simple_byte
  9187  00507E  0A01               	xorlw	1	; case 1
  9188  005080  B4D8               	btfsc	status,2,c
  9189  005082  D7E6               	goto	l834
  9190  005084  0A07               	xorlw	7	; case 6
  9191  005086  B4D8               	btfsc	status,2,c
  9192  005088  D7E9               	goto	l836
  9193  00508A  0A17               	xorlw	23	; case 17
  9194  00508C  B4D8               	btfsc	status,2,c
  9195  00508E  D7EB               	goto	l837
  9196  005090  D7EF               	goto	l838
  9197  005092                     __end_of_ipProtocolToString:
  9198                           	opt stack 0
  9199                           tblptru	equ	0xFF8
  9200                           tblptrh	equ	0xFF7
  9201                           tblptrl	equ	0xFF6
  9202                           tablat	equ	0xFF5
  9203                           prodh	equ	0xFF4
  9204                           prodl	equ	0xFF3
  9205                           intcon	equ	0xFF2
  9206                           intcon3	equ	0xFF0
  9207                           indf0	equ	0xFEF
  9208                           postinc0	equ	0xFEE
  9209                           plusw0	equ	0xFEB
  9210                           fsr0h	equ	0xFEA
  9211                           fsr0l	equ	0xFE9
  9212                           wreg	equ	0xFE8
  9213                           indf1	equ	0xFE7
  9214                           postinc1	equ	0xFE6
  9215                           postdec1	equ	0xFE5
  9216                           plusw1	equ	0xFE3
  9217                           fsr1h	equ	0xFE2
  9218                           fsr1l	equ	0xFE1
  9219                           indf2	equ	0xFDF
  9220                           postinc2	equ	0xFDE
  9221                           postdec2	equ	0xFDD
  9222                           plusw2	equ	0xFDB
  9223                           fsr2h	equ	0xFDA
  9224                           fsr2l	equ	0xFD9
  9225                           status	equ	0xFD8
  9226                           
  9227 ;; *************** function _ethernetController_updateNextPacketPointer *****************
  9228 ;; Defined at:
  9229 ;;		line 334 in file "src/enc424j600/ENC424J600.c"
  9230 ;; Parameters:    Size  Location     Type
  9231 ;;		None
  9232 ;; Auto vars:     Size  Location     Type
  9233 ;;  nextPktPoint    2   21[BANK0 ] unsigned int 
  9234 ;;  newPointerH     1   25[BANK0 ] unsigned char 
  9235 ;;  newPointerL     1   24[BANK0 ] unsigned char 
  9236 ;;  opcode          1   23[BANK0 ] unsigned char 
  9237 ;; Return value:  Size  Location     Type
  9238 ;;                  1    wreg      void 
  9239 ;; Registers used:
  9240 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9241 ;; Tracked objects:
  9242 ;;		On entry : 0/0
  9243 ;;		On exit  : 0/0
  9244 ;;		Unchanged: 0/0
  9245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9246 ;;      Params:         0       0       0       0       0       0       0       0       0
  9247 ;;      Locals:         0       5       0       0       0       0       0       0       0
  9248 ;;      Temps:          0       6       0       0       0       0       0       0       0
  9249 ;;      Totals:         0      11       0       0       0       0       0       0       0
  9250 ;;Total ram usage:       11 bytes
  9251 ;; Hardware stack levels used:    1
  9252 ;; Hardware stack levels required when called:    7
  9253 ;; This function calls:
  9254 ;;		_enc424j600_getNextPacketPointer
  9255 ;;		_enc424j600_readSPI
  9256 ;;		_enc424j600_setERXDATAReadPointer
  9257 ;;		_enc424j600_setNextPacketPointer
  9258 ;;		_enc424j600_writeSPI
  9259 ;; This function is called by:
  9260 ;;		_ethernet_rxGetNewFrame
  9261 ;; This function uses a non-reentrant model
  9262 ;;
  9263                           
  9264                           	psect	text23
  9265  004830                     __ptext23:
  9266                           	opt stack 0
  9267  004830                     _ethernetController_updateNextPacketPointer:
  9268                           	opt stack 21
  9269                           
  9270                           ;ENC424J600.c: 335: uint16_t nextPktPointer;
  9271                           ;ENC424J600.c: 336: uint8_t opcode;
  9272                           ;ENC424J600.c: 337: uint8_t newPointerL, newPointerH;
  9273                           ;ENC424J600.c: 338: nextPktPointer = enc424j600_getNextPacketPointer();
  9274                           
  9275                           ; BSR set to: 0
  9276                           ;incstack = 0
  9277  004830  ECC6  F02B         	call	_enc424j600_getNextPacketPointer	;wreg free
  9278  004834  C060  F075         	movff	?_enc424j600_getNextPacketPointer,ethernetController_updateNextPacketPointer@next
      +                          PktPointer
  9279  004838  C061  F076         	movff	?_enc424j600_getNextPacketPointer+1,ethernetController_updateNextPacketPointer@ne
      +                          xtPktPointer+1
  9280                           
  9281                           ;ENC424J600.c: 339: enc424j600_setERXDATAReadPointer(nextPktPointer);
  9282  00483C  C075  F06A         	movff	ethernetController_updateNextPacketPointer@nextPktPointer,enc424j600_setERXDATARe
      +                          adPointer@addr
  9283  004840  C076  F06B         	movff	ethernetController_updateNextPacketPointer@nextPktPointer+1,enc424j600_setERXDATA
      +                          ReadPointer@addr+1
  9284  004844  EC0B  F029         	call	_enc424j600_setERXDATAReadPointer	;wreg free
  9285                           
  9286                           ;ENC424J600.c: 340: opcode = 0x2C;
  9287  004848  0E2C               	movlw	44
  9288  00484A  0100               	movlb	0	; () banked
  9289  00484C  6F77               	movwf	ethernetController_updateNextPacketPointer@opcode& (0+255),b
  9290                           
  9291                           ; BSR set to: 0
  9292                           ;ENC424J600.c: 341: PORTBbits.RB4=0;
  9293  00484E  9881               	bcf	3969,4,c	;volatile
  9294                           
  9295                           ; BSR set to: 0
  9296                           ;ENC424J600.c: 342: enc424j600_writeSPI(&opcode);
  9297  004850  0E77               	movlw	low ethernetController_updateNextPacketPointer@opcode
  9298  004852  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
  9299  004854  0E00               	movlw	high ethernetController_updateNextPacketPointer@opcode
  9300  004856  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
  9301  004858  EC51  F026         	call	_enc424j600_writeSPI	;wreg free
  9302                           
  9303                           ;ENC424J600.c: 343: enc424j600_readSPI(&newPointerL);
  9304  00485C  0E78               	movlw	low ethernetController_updateNextPacketPointer@newPointerL
  9305  00485E  0100               	movlb	0	; () banked
  9306  004860  6F60               	movwf	enc424j600_readSPI@data& (0+255),b
  9307  004862  0E00               	movlw	high ethernetController_updateNextPacketPointer@newPointerL
  9308  004864  6F61               	movwf	(enc424j600_readSPI@data+1)& (0+255),b
  9309  004866  ECE8  F025         	call	_enc424j600_readSPI	;wreg free
  9310                           
  9311                           ;ENC424J600.c: 344: enc424j600_readSPI(&newPointerH);
  9312  00486A  0E79               	movlw	low ethernetController_updateNextPacketPointer@newPointerH
  9313  00486C  0100               	movlb	0	; () banked
  9314  00486E  6F60               	movwf	enc424j600_readSPI@data& (0+255),b
  9315  004870  0E00               	movlw	high ethernetController_updateNextPacketPointer@newPointerH
  9316  004872  6F61               	movwf	(enc424j600_readSPI@data+1)& (0+255),b
  9317  004874  ECE8  F025         	call	_enc424j600_readSPI	;wreg free
  9318                           
  9319                           ;ENC424J600.c: 345: PORTBbits.RB4=1;
  9320  004878  8881               	bsf	3969,4,c	;volatile
  9321                           
  9322                           ;ENC424J600.c: 347: enc424j600_setNextPacketPointer((uint16_t) ((newPointerL & (unsigned
      +                          ) 0x00ff) | ((unsigned) (newPointerH << 8)&(unsigned) 0xff00)));
  9323  00487A  0E00               	movlw	0
  9324  00487C  0100               	movlb	0	; () banked
  9325  00487E  6F6F               	movwf	??_ethernetController_updateNextPacketPointer& (0+255),b
  9326  004880  0EFF               	movlw	255
  9327  004882  6F70               	movwf	(??_ethernetController_updateNextPacketPointer+1)& (0+255),b
  9328  004884  5179               	movf	ethernetController_updateNextPacketPointer@newPointerH& (0+255),w,b
  9329  004886  6F72               	movwf	(??_ethernetController_updateNextPacketPointer+3)& (0+255),b
  9330  004888  6B71               	clrf	(??_ethernetController_updateNextPacketPointer+2)& (0+255),b
  9331  00488A  516F               	movf	??_ethernetController_updateNextPacketPointer& (0+255),w,b
  9332  00488C  1771               	andwf	(??_ethernetController_updateNextPacketPointer+2)& (0+255),f,b
  9333  00488E  5170               	movf	(??_ethernetController_updateNextPacketPointer+1)& (0+255),w,b
  9334  004890  1772               	andwf	(??_ethernetController_updateNextPacketPointer+3)& (0+255),f,b
  9335  004892  5178               	movf	ethernetController_updateNextPacketPointer@newPointerL& (0+255),w,b
  9336  004894  6F73               	movwf	(??_ethernetController_updateNextPacketPointer+4)& (0+255),b
  9337  004896  6B74               	clrf	(??_ethernetController_updateNextPacketPointer+5)& (0+255),b
  9338  004898  5171               	movf	(??_ethernetController_updateNextPacketPointer+2)& (0+255),w,b
  9339  00489A  1173               	iorwf	(??_ethernetController_updateNextPacketPointer+4)& (0+255),w,b
  9340  00489C  6F60               	movwf	enc424j600_setNextPacketPointer@ptr& (0+255),b
  9341  00489E  5172               	movf	(??_ethernetController_updateNextPacketPointer+3)& (0+255),w,b
  9342  0048A0  1174               	iorwf	(??_ethernetController_updateNextPacketPointer+5)& (0+255),w,b
  9343  0048A2  6F61               	movwf	(enc424j600_setNextPacketPointer@ptr+1)& (0+255),b
  9344  0048A4  ECCB  F02B         	call	_enc424j600_setNextPacketPointer	;wreg free
  9345  0048A8  0012               	return		;funcret
  9346  0048AA                     __end_of_ethernetController_updateNextPacketPointer:
  9347                           	opt stack 0
  9348                           tblptru	equ	0xFF8
  9349                           tblptrh	equ	0xFF7
  9350                           tblptrl	equ	0xFF6
  9351                           tablat	equ	0xFF5
  9352                           prodh	equ	0xFF4
  9353                           prodl	equ	0xFF3
  9354                           intcon	equ	0xFF2
  9355                           intcon3	equ	0xFF0
  9356                           indf0	equ	0xFEF
  9357                           postinc0	equ	0xFEE
  9358                           plusw0	equ	0xFEB
  9359                           fsr0h	equ	0xFEA
  9360                           fsr0l	equ	0xFE9
  9361                           wreg	equ	0xFE8
  9362                           indf1	equ	0xFE7
  9363                           postinc1	equ	0xFE6
  9364                           postdec1	equ	0xFE5
  9365                           plusw1	equ	0xFE3
  9366                           fsr1h	equ	0xFE2
  9367                           fsr1l	equ	0xFE1
  9368                           indf2	equ	0xFDF
  9369                           postinc2	equ	0xFDE
  9370                           postdec2	equ	0xFDD
  9371                           plusw2	equ	0xFDB
  9372                           fsr2h	equ	0xFDA
  9373                           fsr2l	equ	0xFD9
  9374                           status	equ	0xFD8
  9375                           
  9376 ;; *************** function _ethernetController_getRSV *****************
  9377 ;; Defined at:
  9378 ;;		line 299 in file "src/enc424j600/ENC424J600.c"
  9379 ;; Parameters:    Size  Location     Type
  9380 ;;  address         2   17[BANK0 ] unsigned int 
  9381 ;; Auto vars:     Size  Location     Type
  9382 ;;  i               1   23[BANK0 ] unsigned char 
  9383 ;;  opcode          1   22[BANK0 ] unsigned char 
  9384 ;; Return value:  Size  Location     Type
  9385 ;;                  5   17[BANK0 ] struct RSV
  9386 ;; Registers used:
  9387 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9388 ;; Tracked objects:
  9389 ;;		On entry : 0/0
  9390 ;;		On exit  : 0/0
  9391 ;;		Unchanged: 0/0
  9392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9393 ;;      Params:         0       5       0       0       0       0       0       0       0
  9394 ;;      Locals:         0       2       0       0       0       0       0       0       0
  9395 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9396 ;;      Totals:         0       7       0       0       0       0       0       0       0
  9397 ;;Total ram usage:        7 bytes
  9398 ;; Hardware stack levels used:    1
  9399 ;; Hardware stack levels required when called:    7
  9400 ;; This function calls:
  9401 ;;		_enc424j600_readSPI
  9402 ;;		_enc424j600_setERXDATAReadPointer
  9403 ;;		_enc424j600_updateReceiveStatusVector
  9404 ;;		_enc424j600_writeSPI
  9405 ;; This function is called by:
  9406 ;;		_ethernet_rxGetNewFrame
  9407 ;; This function uses a non-reentrant model
  9408 ;;
  9409                           
  9410                           	psect	text24
  9411  004922                     __ptext24:
  9412                           	opt stack 0
  9413  004922                     _ethernetController_getRSV:
  9414                           	opt stack 21
  9415                           
  9416                           ;ENC424J600.c: 300: uint8_t static temp[6];
  9417                           ;ENC424J600.c: 301: enc424j600_setERXDATAReadPointer(address + 2);
  9418                           
  9419                           ;incstack = 0
  9420  004922  0E02               	movlw	2
  9421  004924  0100               	movlb	0	; () banked
  9422  004926  2571               	addwf	ethernetController_getRSV@address& (0+255),w,b
  9423  004928  6F6A               	movwf	enc424j600_setERXDATAReadPointer@addr& (0+255),b
  9424  00492A  0E00               	movlw	0
  9425  00492C  2172               	addwfc	(ethernetController_getRSV@address+1)& (0+255),w,b
  9426  00492E  6F6B               	movwf	(enc424j600_setERXDATAReadPointer@addr+1)& (0+255),b
  9427  004930  EC0B  F029         	call	_enc424j600_setERXDATAReadPointer	;wreg free
  9428                           
  9429                           ;ENC424J600.c: 302: uint8_t opcode = 0x2C;
  9430  004934  0E2C               	movlw	44
  9431  004936  0100               	movlb	0	; () banked
  9432  004938  6F76               	movwf	ethernetController_getRSV@opcode& (0+255),b
  9433                           
  9434                           ; BSR set to: 0
  9435                           ;ENC424J600.c: 303: PORTBbits.RB4=0;
  9436  00493A  9881               	bcf	3969,4,c	;volatile
  9437                           
  9438                           ; BSR set to: 0
  9439                           ;ENC424J600.c: 304: enc424j600_writeSPI(&opcode);
  9440  00493C  0E76               	movlw	low ethernetController_getRSV@opcode
  9441  00493E  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
  9442  004940  0E00               	movlw	high ethernetController_getRSV@opcode
  9443  004942  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
  9444  004944  EC51  F026         	call	_enc424j600_writeSPI	;wreg free
  9445                           
  9446                           ;ENC424J600.c: 305: for (uint8_t i = 0; i < 6; i++) {
  9447  004948  0E00               	movlw	0
  9448  00494A  0100               	movlb	0	; () banked
  9449  00494C  6F77               	movwf	ethernetController_getRSV@i& (0+255),b
  9450  00494E                     l9561:
  9451                           
  9452                           ; BSR set to: 0
  9453  00494E  0E05               	movlw	5
  9454  004950  6577               	cpfsgt	ethernetController_getRSV@i& (0+255),b
  9455  004952  D001               	goto	l165
  9456  004954  D00D               	goto	u11330
  9457  004956                     l165:
  9458                           
  9459                           ; BSR set to: 0
  9460                           ;ENC424J600.c: 306: enc424j600_readSPI(&temp[i]);
  9461                           
  9462                           ; BSR set to: 0
  9463  004956  5177               	movf	ethernetController_getRSV@i& (0+255),w,b
  9464  004958  0D01               	mullw	1
  9465  00495A  0EC1               	movlw	low ethernetController_getRSV@temp
  9466  00495C  24F3               	addwf	prodl,w,c
  9467  00495E  6F60               	movwf	enc424j600_readSPI@data& (0+255),b
  9468  004960  0E01               	movlw	high ethernetController_getRSV@temp
  9469  004962  20F4               	addwfc	prodh,w,c
  9470  004964  6F61               	movwf	(enc424j600_readSPI@data+1)& (0+255),b
  9471  004966  ECE8  F025         	call	_enc424j600_readSPI	;wreg free
  9472  00496A  0100               	movlb	0	; () banked
  9473  00496C  2B77               	incf	ethernetController_getRSV@i& (0+255),f,b
  9474  00496E  D7EF               	goto	l9561
  9475  004970                     u11330:
  9476                           
  9477                           ; BSR set to: 0
  9478                           ;ENC424J600.c: 307: }
  9479                           ;ENC424J600.c: 308: PORTBbits.RB4=1;
  9480  004970  8881               	bsf	3969,4,c	;volatile
  9481                           
  9482                           ; BSR set to: 0
  9483                           ;ENC424J600.c: 309: return enc424j600_updateReceiveStatusVector(&temp[0]);
  9484  004972  0EC1               	movlw	low ethernetController_getRSV@temp
  9485  004974  6F60               	movwf	enc424j600_updateReceiveStatusVector@rsv& (0+255),b
  9486  004976  0E01               	movlw	high ethernetController_getRSV@temp
  9487  004978  6F61               	movwf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),b
  9488  00497A  ECB6  F009         	call	_enc424j600_updateReceiveStatusVector	;wreg free
  9489  00497E  CFE9 FFD9          	movff	fsr0l,fsr2l
  9490  004982  CFEA FFDA          	movff	fsr0h,fsr2h
  9491  004986  EE00  F071         	lfsr	0,?_ethernetController_getRSV
  9492  00498A  0E04               	movlw	4
  9493  00498C                     u11341:
  9494  00498C  CFDB FFEB          	movff	plusw2,plusw0
  9495  004990  06E8               	decf	wreg,f,c
  9496  004992  E2FC               	bc	u11341
  9497  004994  0012               	return	
  9498  004996                     __end_of_ethernetController_getRSV:
  9499                           	opt stack 0
  9500                           tblptru	equ	0xFF8
  9501                           tblptrh	equ	0xFF7
  9502                           tblptrl	equ	0xFF6
  9503                           tablat	equ	0xFF5
  9504                           prodh	equ	0xFF4
  9505                           prodl	equ	0xFF3
  9506                           intcon	equ	0xFF2
  9507                           intcon3	equ	0xFF0
  9508                           indf0	equ	0xFEF
  9509                           postinc0	equ	0xFEE
  9510                           plusw0	equ	0xFEB
  9511                           fsr0h	equ	0xFEA
  9512                           fsr0l	equ	0xFE9
  9513                           wreg	equ	0xFE8
  9514                           indf1	equ	0xFE7
  9515                           postinc1	equ	0xFE6
  9516                           postdec1	equ	0xFE5
  9517                           plusw1	equ	0xFE3
  9518                           fsr1h	equ	0xFE2
  9519                           fsr1l	equ	0xFE1
  9520                           indf2	equ	0xFDF
  9521                           postinc2	equ	0xFDE
  9522                           postdec2	equ	0xFDD
  9523                           plusw2	equ	0xFDB
  9524                           fsr2h	equ	0xFDA
  9525                           fsr2l	equ	0xFD9
  9526                           status	equ	0xFD8
  9527                           
  9528 ;; *************** function _enc424j600_updateReceiveStatusVector *****************
  9529 ;; Defined at:
  9530 ;;		line 719 in file "src/enc424j600/ENC424J600.c"
  9531 ;; Parameters:    Size  Location     Type
  9532 ;;  rsv             2    0[BANK0 ] PTR unsigned char 
  9533 ;;		 -> ethernetController_getRSV@temp(6), 
  9534 ;; Auto vars:     Size  Location     Type
  9535 ;;  receiveStatu    5   12[BANK0 ] struct RSV
  9536 ;; Return value:  Size  Location     Type
  9537 ;;                  5    0[BANK0 ] struct RSV
  9538 ;; Registers used:
  9539 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
  9540 ;; Tracked objects:
  9541 ;;		On entry : 0/0
  9542 ;;		On exit  : 0/0
  9543 ;;		Unchanged: 0/0
  9544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9545 ;;      Params:         0       5       0       0       0       0       0       0       0
  9546 ;;      Locals:         0       5       0       0       0       0       0       0       0
  9547 ;;      Temps:          0       7       0       0       0       0       0       0       0
  9548 ;;      Totals:         0      17       0       0       0       0       0       0       0
  9549 ;;Total ram usage:       17 bytes
  9550 ;; Hardware stack levels used:    1
  9551 ;; Hardware stack levels required when called:    4
  9552 ;; This function calls:
  9553 ;;		Nothing
  9554 ;; This function is called by:
  9555 ;;		_ethernetController_getRSV
  9556 ;; This function uses a non-reentrant model
  9557 ;;
  9558                           
  9559                           	psect	text25
  9560  00136C                     __ptext25:
  9561                           	opt stack 0
  9562  00136C                     _enc424j600_updateReceiveStatusVector:
  9563                           	opt stack 23
  9564                           
  9565                           ;ENC424J600.c: 720: RSV_t receiveStatusVector;
  9566                           ;ENC424J600.c: 723: receiveStatusVector.length = (uint16_t) ((*(rsv + 0)) | (uint16_t) (
      +                          ((*(rsv + 1)) << 8)&0xff00));
  9567                           
  9568                           ;incstack = 0
  9569  00136C  0E00               	movlw	0
  9570  00136E  0100               	movlb	0	; () banked
  9571  001370  6F65               	movwf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9572  001372  0EFF               	movlw	255
  9573  001374  6F66               	movwf	(??_enc424j600_updateReceiveStatusVector+1)& (0+255),b
  9574  001376  EE20 F001          	lfsr	2,1
  9575  00137A  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  9576  00137C  26D9               	addwf	fsr2l,f,c
  9577  00137E  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  9578  001380  22DA               	addwfc	fsr2h,f,c
  9579  001382  50DF               	movf	indf2,w,c
  9580  001384  6F67               	movwf	(??_enc424j600_updateReceiveStatusVector+2)& (0+255),b
  9581  001386  5167               	movf	(??_enc424j600_updateReceiveStatusVector+2)& (0+255),w,b
  9582  001388  6F69               	movwf	(??_enc424j600_updateReceiveStatusVector+4)& (0+255),b
  9583  00138A  6B68               	clrf	(??_enc424j600_updateReceiveStatusVector+3)& (0+255),b
  9584  00138C  5165               	movf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9585  00138E  1768               	andwf	(??_enc424j600_updateReceiveStatusVector+3)& (0+255),f,b
  9586  001390  5166               	movf	(??_enc424j600_updateReceiveStatusVector+1)& (0+255),w,b
  9587  001392  1769               	andwf	(??_enc424j600_updateReceiveStatusVector+4)& (0+255),f,b
  9588  001394  C060  FFD9         	movff	enc424j600_updateReceiveStatusVector@rsv,fsr2l
  9589  001398  C061  FFDA         	movff	enc424j600_updateReceiveStatusVector@rsv+1,fsr2h
  9590  00139C  50DF               	movf	indf2,w,c
  9591  00139E  6F6A               	movwf	(??_enc424j600_updateReceiveStatusVector+5)& (0+255),b
  9592  0013A0  6B6B               	clrf	(??_enc424j600_updateReceiveStatusVector+6)& (0+255),b
  9593  0013A2  5168               	movf	(??_enc424j600_updateReceiveStatusVector+3)& (0+255),w,b
  9594  0013A4  116A               	iorwf	(??_enc424j600_updateReceiveStatusVector+5)& (0+255),w,b
  9595  0013A6  6F6C               	movwf	enc424j600_updateReceiveStatusVector@receiveStatusVector& (0+255),b
  9596  0013A8  5169               	movf	(??_enc424j600_updateReceiveStatusVector+4)& (0+255),w,b
  9597  0013AA  116B               	iorwf	(??_enc424j600_updateReceiveStatusVector+6)& (0+255),w,b
  9598  0013AC  6F6D               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+1)& (0+255),b
  9599                           
  9600                           ;ENC424J600.c: 725: receiveStatusVector.packetPreviouslyIgnored = (uint8_t) (*(rsv + 2) 
      +                          & 0b00000001) != 0 ? 1 : 0;
  9601  0013AE  EE20 F002          	lfsr	2,2
  9602  0013B2  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  9603  0013B4  26D9               	addwf	fsr2l,f,c
  9604  0013B6  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  9605  0013B8  22DA               	addwfc	fsr2h,f,c
  9606  0013BA  A0DF               	btfss	indf2,0,c
  9607  0013BC  D003               	goto	u10450
  9608  0013BE  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9609  0013C0  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9610  0013C2  D002               	goto	u10468
  9611  0013C4                     u10450:
  9612  0013C4  0100               	movlb	0	; () banked
  9613  0013C6  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9614  0013C8                     u10468:
  9615  0013C8  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  9616  0013CA  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9617  0013CC  0BFE               	andlw	-2
  9618  0013CE  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9619  0013D0  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  9620                           
  9621                           ;ENC424J600.c: 726: receiveStatusVector.carrierEventPreviouslySeen = (uint8_t) (*(rsv + 
      +                          2) & 0b00000100) != 0 ? 1 : 0;
  9622  0013D2  EE20 F002          	lfsr	2,2
  9623  0013D6  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  9624  0013D8  26D9               	addwf	fsr2l,f,c
  9625  0013DA  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  9626  0013DC  22DA               	addwfc	fsr2h,f,c
  9627  0013DE  A4DF               	btfss	indf2,2,c
  9628  0013E0  D003               	goto	u10470
  9629  0013E2  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9630  0013E4  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9631  0013E6  D002               	goto	u10488
  9632  0013E8                     u10470:
  9633  0013E8  0100               	movlb	0	; () banked
  9634  0013EA  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9635  0013EC                     u10488:
  9636  0013EC  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9637  0013EE  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  9638  0013F0  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9639  0013F2  0BFD               	andlw	-3
  9640  0013F4  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9641  0013F6  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  9642                           
  9643                           ;ENC424J600.c: 727: receiveStatusVector.CRCError = (uint8_t) (*(rsv + 2) & 0b00010000) !
      +                          = 0 ? 1 : 0;
  9644  0013F8  EE20 F002          	lfsr	2,2
  9645  0013FC  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  9646  0013FE  26D9               	addwf	fsr2l,f,c
  9647  001400  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  9648  001402  22DA               	addwfc	fsr2h,f,c
  9649  001404  A8DF               	btfss	indf2,4,c
  9650  001406  D003               	goto	u10490
  9651  001408  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9652  00140A  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9653  00140C  D002               	goto	u10508
  9654  00140E                     u10490:
  9655  00140E  0100               	movlb	0	; () banked
  9656  001410  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9657  001412                     u10508:
  9658  001412  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9659  001414  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9660  001416  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  9661  001418  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9662  00141A  0BFB               	andlw	-5
  9663  00141C  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9664  00141E  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  9665                           
  9666                           ;ENC424J600.c: 728: receiveStatusVector.lengthCheckError = (uint8_t) (*(rsv + 2) & 0b001
      +                          00000) != 0 ? 1 : 0;
  9667  001420  EE20 F002          	lfsr	2,2
  9668  001424  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  9669  001426  26D9               	addwf	fsr2l,f,c
  9670  001428  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  9671  00142A  22DA               	addwfc	fsr2h,f,c
  9672  00142C  AADF               	btfss	indf2,5,c
  9673  00142E  D003               	goto	u10510
  9674  001430  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9675  001432  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9676  001434  D002               	goto	u10528
  9677  001436                     u10510:
  9678  001436  0100               	movlb	0	; () banked
  9679  001438  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9680  00143A                     u10528:
  9681  00143A  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9682  00143C  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9683  00143E  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9684  001440  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  9685  001442  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9686  001444  0BF7               	andlw	-9
  9687  001446  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9688  001448  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  9689                           
  9690                           ;ENC424J600.c: 729: receiveStatusVector.lengthOutOfRange = (uint8_t) (*(rsv + 2) & 0b010
      +                          00000) != 0 ? 1 : 0;
  9691  00144A  EE20 F002          	lfsr	2,2
  9692  00144E  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  9693  001450  26D9               	addwf	fsr2l,f,c
  9694  001452  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  9695  001454  22DA               	addwfc	fsr2h,f,c
  9696  001456  ACDF               	btfss	indf2,6,c
  9697  001458  D003               	goto	u10530
  9698  00145A  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9699  00145C  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9700  00145E  D002               	goto	u10548
  9701  001460                     u10530:
  9702  001460  0100               	movlb	0	; () banked
  9703  001462  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9704  001464                     u10548:
  9705  001464  3B65               	swapf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9706  001466  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  9707  001468  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9708  00146A  0BEF               	andlw	-17
  9709  00146C  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9710  00146E  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  9711                           
  9712                           ;ENC424J600.c: 730: receiveStatusVector.receivedOk = (uint8_t) (*(rsv + 2) & 0b10000000)
      +                           != 0 ? 1 : 0;
  9713  001470  EE20 F002          	lfsr	2,2
  9714  001474  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  9715  001476  26D9               	addwf	fsr2l,f,c
  9716  001478  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  9717  00147A  22DA               	addwfc	fsr2h,f,c
  9718  00147C  AEDF               	btfss	indf2,7,c
  9719  00147E  D003               	goto	u10550
  9720  001480  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9721  001482  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9722  001484  D002               	goto	u10568
  9723  001486                     u10550:
  9724  001486  0100               	movlb	0	; () banked
  9725  001488  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9726  00148A                     u10568:
  9727  00148A  3B65               	swapf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9728  00148C  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9729  00148E  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  9730  001490  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9731  001492  0BDF               	andlw	-33
  9732  001494  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9733  001496  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  9734                           
  9735                           ;ENC424J600.c: 732: receiveStatusVector.multicast = (uint8_t) (*(rsv + 3) & 0b00000001) 
      +                          != 0 ? 1 : 0;
  9736  001498  EE20 F003          	lfsr	2,3
  9737  00149C  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  9738  00149E  26D9               	addwf	fsr2l,f,c
  9739  0014A0  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  9740  0014A2  22DA               	addwfc	fsr2h,f,c
  9741  0014A4  A0DF               	btfss	indf2,0,c
  9742  0014A6  D003               	goto	u10570
  9743  0014A8  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9744  0014AA  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9745  0014AC  D002               	goto	u10588
  9746  0014AE                     u10570:
  9747  0014AE  0100               	movlb	0	; () banked
  9748  0014B0  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9749  0014B2                     u10588:
  9750  0014B2  3B65               	swapf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9751  0014B4  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9752  0014B6  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9753  0014B8  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  9754  0014BA  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9755  0014BC  0BBF               	andlw	-65
  9756  0014BE  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9757  0014C0  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  9758                           
  9759                           ;ENC424J600.c: 733: receiveStatusVector.broadcast = (uint8_t) (*(rsv + 3) & 0b00000010) 
      +                          != 0 ? 1 : 0;
  9760  0014C2  EE20 F003          	lfsr	2,3
  9761  0014C6  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  9762  0014C8  26D9               	addwf	fsr2l,f,c
  9763  0014CA  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  9764  0014CC  22DA               	addwfc	fsr2h,f,c
  9765  0014CE  A2DF               	btfss	indf2,1,c
  9766  0014D0  D003               	goto	u10590
  9767  0014D2  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9768  0014D4  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9769  0014D6  D002               	goto	u10608
  9770  0014D8                     u10590:
  9771  0014D8  0100               	movlb	0	; () banked
  9772  0014DA  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9773  0014DC                     u10608:
  9774  0014DC  3365               	rrcf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9775  0014DE  3365               	rrcf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9776  0014E0  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  9777  0014E2  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9778  0014E4  0B7F               	andlw	-129
  9779  0014E6  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9780  0014E8  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  9781                           
  9782                           ;ENC424J600.c: 734: receiveStatusVector.controlFrame = (uint8_t) (*(rsv + 3) & 0b0000100
      +                          0) != 0 ? 1 : 0;
  9783  0014EA  EE20 F003          	lfsr	2,3
  9784  0014EE  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  9785  0014F0  26D9               	addwf	fsr2l,f,c
  9786  0014F2  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  9787  0014F4  22DA               	addwfc	fsr2h,f,c
  9788  0014F6  A6DF               	btfss	indf2,3,c
  9789  0014F8  D003               	goto	u10610
  9790  0014FA  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9791  0014FC  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9792  0014FE  D002               	goto	u10628
  9793  001500                     u10610:
  9794  001500  0100               	movlb	0	; () banked
  9795  001502  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9796  001504                     u10628:
  9797  001504  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9798  001506  516F               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  9799  001508  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9800  00150A  0BFD               	andlw	-3
  9801  00150C  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9802  00150E  6F6F               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  9803                           
  9804                           ;ENC424J600.c: 735: receiveStatusVector.pauseFrame = (uint8_t) (*(rsv + 3) & 0b00010000)
      +                           != 0 ? 1 : 0;
  9805  001510  EE20 F003          	lfsr	2,3
  9806  001514  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  9807  001516  26D9               	addwf	fsr2l,f,c
  9808  001518  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  9809  00151A  22DA               	addwfc	fsr2h,f,c
  9810  00151C  A8DF               	btfss	indf2,4,c
  9811  00151E  D003               	goto	u10630
  9812  001520  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9813  001522  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9814  001524  D002               	goto	u10648
  9815  001526                     u10630:
  9816  001526  0100               	movlb	0	; () banked
  9817  001528  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9818  00152A                     u10648:
  9819  00152A  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9820  00152C  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9821  00152E  516F               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  9822  001530  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9823  001532  0BFB               	andlw	-5
  9824  001534  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9825  001536  6F6F               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  9826                           
  9827                           ;ENC424J600.c: 736: receiveStatusVector.unknownOpcode = (uint8_t) (*(rsv + 3) & 0b001000
      +                          00) != 0 ? 1 : 0;
  9828  001538  EE20 F003          	lfsr	2,3
  9829  00153C  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  9830  00153E  26D9               	addwf	fsr2l,f,c
  9831  001540  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  9832  001542  22DA               	addwfc	fsr2h,f,c
  9833  001544  AADF               	btfss	indf2,5,c
  9834  001546  D003               	goto	u10650
  9835  001548  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9836  00154A  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9837  00154C  D002               	goto	u10668
  9838  00154E                     u10650:
  9839  00154E  0100               	movlb	0	; () banked
  9840  001550  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9841  001552                     u10668:
  9842  001552  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9843  001554  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9844  001556  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9845  001558  516F               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  9846  00155A  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9847  00155C  0BF7               	andlw	-9
  9848  00155E  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9849  001560  6F6F               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  9850                           
  9851                           ;ENC424J600.c: 737: receiveStatusVector.vlan = (uint8_t) (*(rsv + 3) & 0b01000000) != 0 
      +                          ? 1 : 0;
  9852  001562  EE20 F003          	lfsr	2,3
  9853  001566  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  9854  001568  26D9               	addwf	fsr2l,f,c
  9855  00156A  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  9856  00156C  22DA               	addwfc	fsr2h,f,c
  9857  00156E  ACDF               	btfss	indf2,6,c
  9858  001570  D003               	goto	u10670
  9859  001572  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9860  001574  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9861  001576  D002               	goto	u10688
  9862  001578                     u10670:
  9863  001578  0100               	movlb	0	; () banked
  9864  00157A  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9865  00157C                     u10688:
  9866  00157C  3B65               	swapf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9867  00157E  516F               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  9868  001580  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9869  001582  0BEF               	andlw	-17
  9870  001584  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9871  001586  6F6F               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  9872                           
  9873                           ;ENC424J600.c: 738: receiveStatusVector.runtFilter = (uint8_t) (*(rsv + 3) & 0b10000000)
      +                           != 0 ? 1 : 0;
  9874  001588  EE20 F003          	lfsr	2,3
  9875  00158C  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  9876  00158E  26D9               	addwf	fsr2l,f,c
  9877  001590  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  9878  001592  22DA               	addwfc	fsr2h,f,c
  9879  001594  AEDF               	btfss	indf2,7,c
  9880  001596  D003               	goto	u10690
  9881  001598  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9882  00159A  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9883  00159C  D002               	goto	u10708
  9884  00159E                     u10690:
  9885  00159E  0100               	movlb	0	; () banked
  9886  0015A0  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9887  0015A2                     u10708:
  9888  0015A2  3B65               	swapf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9889  0015A4  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9890  0015A6  516F               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  9891  0015A8  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9892  0015AA  0BDF               	andlw	-33
  9893  0015AC  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9894  0015AE  6F6F               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  9895                           
  9896                           ;ENC424J600.c: 740: receiveStatusVector.notMeFilter = (uint8_t) (*(rsv + 4) & 0b00000001
      +                          ) != 0 ? 1 : 0;
  9897  0015B0  EE20 F004          	lfsr	2,4
  9898  0015B4  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  9899  0015B6  26D9               	addwf	fsr2l,f,c
  9900  0015B8  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  9901  0015BA  22DA               	addwfc	fsr2h,f,c
  9902  0015BC  A0DF               	btfss	indf2,0,c
  9903  0015BE  D003               	goto	u10710
  9904  0015C0  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9905  0015C2  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9906  0015C4  D002               	goto	u10728
  9907  0015C6                     u10710:
  9908  0015C6  0100               	movlb	0	; () banked
  9909  0015C8  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9910  0015CA                     u10728:
  9911  0015CA  3B65               	swapf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9912  0015CC  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9913  0015CE  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9914  0015D0  516F               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  9915  0015D2  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9916  0015D4  0BBF               	andlw	-65
  9917  0015D6  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9918  0015D8  6F6F               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  9919                           
  9920                           ;ENC424J600.c: 741: receiveStatusVector.hashFilter = (uint8_t) (*(rsv + 4) & 0b00000010)
      +                           != 0 ? 1 : 0;
  9921  0015DA  EE20 F004          	lfsr	2,4
  9922  0015DE  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  9923  0015E0  26D9               	addwf	fsr2l,f,c
  9924  0015E2  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  9925  0015E4  22DA               	addwfc	fsr2h,f,c
  9926  0015E6  A2DF               	btfss	indf2,1,c
  9927  0015E8  D003               	goto	u10730
  9928  0015EA  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9929  0015EC  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9930  0015EE  D002               	goto	u10748
  9931  0015F0                     u10730:
  9932  0015F0  0100               	movlb	0	; () banked
  9933  0015F2  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9934  0015F4                     u10748:
  9935  0015F4  3365               	rrcf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9936  0015F6  3365               	rrcf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9937  0015F8  516F               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  9938  0015FA  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9939  0015FC  0B7F               	andlw	-129
  9940  0015FE  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9941  001600  6F6F               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  9942                           
  9943                           ;ENC424J600.c: 742: receiveStatusVector.magicFilter = (uint8_t) (*(rsv + 4) & 0b00000100
      +                          ) != 0 ? 1 : 0;
  9944  001602  EE20 F004          	lfsr	2,4
  9945  001606  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  9946  001608  26D9               	addwf	fsr2l,f,c
  9947  00160A  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  9948  00160C  22DA               	addwfc	fsr2h,f,c
  9949  00160E  A4DF               	btfss	indf2,2,c
  9950  001610  D003               	goto	u10750
  9951  001612  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9952  001614  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9953  001616  D002               	goto	u10768
  9954  001618                     u10750:
  9955  001618  0100               	movlb	0	; () banked
  9956  00161A  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9957  00161C                     u10768:
  9958  00161C  5170               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),w,b
  9959  00161E  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9960  001620  0BFE               	andlw	-2
  9961  001622  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9962  001624  6F70               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),b
  9963                           
  9964                           ;ENC424J600.c: 743: receiveStatusVector.patternMatch = (uint8_t) (*(rsv + 4) & 0b0000100
      +                          0) != 0 ? 1 : 0;
  9965  001626  EE20 F004          	lfsr	2,4
  9966  00162A  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  9967  00162C  26D9               	addwf	fsr2l,f,c
  9968  00162E  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  9969  001630  22DA               	addwfc	fsr2h,f,c
  9970  001632  A6DF               	btfss	indf2,3,c
  9971  001634  D003               	goto	u10770
  9972  001636  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9973  001638  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9974  00163A  D002               	goto	u10788
  9975  00163C                     u10770:
  9976  00163C  0100               	movlb	0	; () banked
  9977  00163E  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9978  001640                     u10788:
  9979  001640  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9980  001642  5170               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),w,b
  9981  001644  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9982  001646  0BFD               	andlw	-3
  9983  001648  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9984  00164A  6F70               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),b
  9985                           
  9986                           ;ENC424J600.c: 744: receiveStatusVector.unicast = (uint8_t) (*(rsv + 4) & 0b00010000) !=
      +                           0 ? 1 : 0;
  9987  00164C  EE20 F004          	lfsr	2,4
  9988  001650  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  9989  001652  26D9               	addwf	fsr2l,f,c
  9990  001654  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  9991  001656  22DA               	addwfc	fsr2h,f,c
  9992  001658  A8DF               	btfss	indf2,4,c
  9993  00165A  D003               	goto	u10790
  9994  00165C  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9995  00165E  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9996  001660  D002               	goto	u10808
  9997  001662                     u10790:
  9998  001662  0100               	movlb	0	; () banked
  9999  001664  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 10000  001666                     u10808:
 10001  001666  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 10002  001668  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 10003  00166A  5170               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),w,b
 10004  00166C  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 10005  00166E  0BFB               	andlw	-5
 10006  001670  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 10007  001672  6F70               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),b
 10008                           
 10009                           ; BSR set to: 0
 10010                           ;ENC424J600.c: 746: return receiveStatusVector;
 10011  001674  EE20  F06C         	lfsr	2,enc424j600_updateReceiveStatusVector@receiveStatusVector
 10012  001678  EE00  F060         	lfsr	0,?_enc424j600_updateReceiveStatusVector
 10013  00167C  0E04               	movlw	4
 10014  00167E                     u10811:
 10015  00167E  CFDB FFEB          	movff	plusw2,plusw0
 10016  001682  06E8               	decf	wreg,f,c
 10017  001684  E2FC               	bc	u10811
 10018  001686  0012               	return	
 10019  001688                     __end_of_enc424j600_updateReceiveStatusVector:
 10020                           	opt stack 0
 10021                           tblptru	equ	0xFF8
 10022                           tblptrh	equ	0xFF7
 10023                           tblptrl	equ	0xFF6
 10024                           tablat	equ	0xFF5
 10025                           prodh	equ	0xFF4
 10026                           prodl	equ	0xFF3
 10027                           intcon	equ	0xFF2
 10028                           intcon3	equ	0xFF0
 10029                           indf0	equ	0xFEF
 10030                           postinc0	equ	0xFEE
 10031                           plusw0	equ	0xFEB
 10032                           fsr0h	equ	0xFEA
 10033                           fsr0l	equ	0xFE9
 10034                           wreg	equ	0xFE8
 10035                           indf1	equ	0xFE7
 10036                           postinc1	equ	0xFE6
 10037                           postdec1	equ	0xFE5
 10038                           plusw1	equ	0xFE3
 10039                           fsr1h	equ	0xFE2
 10040                           fsr1l	equ	0xFE1
 10041                           indf2	equ	0xFDF
 10042                           postinc2	equ	0xFDE
 10043                           postdec2	equ	0xFDD
 10044                           plusw2	equ	0xFDB
 10045                           fsr2h	equ	0xFDA
 10046                           fsr2l	equ	0xFD9
 10047                           status	equ	0xFD8
 10048                           
 10049 ;; *************** function _ethernetController_getEtherTypeField *****************
 10050 ;; Defined at:
 10051 ;;		line 283 in file "src/enc424j600/ENC424J600.c"
 10052 ;; Parameters:    Size  Location     Type
 10053 ;;  field           9   15[BANK0 ] struct memoryField
 10054 ;; Auto vars:     Size  Location     Type
 10055 ;;  ethertype       2   28[BANK0 ] enum E5508
 10056 ;;  highByte        1   32[BANK0 ] unsigned char 
 10057 ;;  lowByte         1   31[BANK0 ] unsigned char 
 10058 ;;  opcode          1   30[BANK0 ] unsigned char 
 10059 ;; Return value:  Size  Location     Type
 10060 ;;                  2   15[BANK0 ] enum E5508
 10061 ;; Registers used:
 10062 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10063 ;; Tracked objects:
 10064 ;;		On entry : 0/0
 10065 ;;		On exit  : 0/0
 10066 ;;		Unchanged: 0/0
 10067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10068 ;;      Params:         0       9       0       0       0       0       0       0       0
 10069 ;;      Locals:         0       5       0       0       0       0       0       0       0
 10070 ;;      Temps:          0       4       0       0       0       0       0       0       0
 10071 ;;      Totals:         0      18       0       0       0       0       0       0       0
 10072 ;;Total ram usage:       18 bytes
 10073 ;; Hardware stack levels used:    1
 10074 ;; Hardware stack levels required when called:    7
 10075 ;; This function calls:
 10076 ;;		_enc424j600_readSPI
 10077 ;;		_enc424j600_setERXDATAReadPointer
 10078 ;;		_enc424j600_writeSPI
 10079 ;; This function is called by:
 10080 ;;		_ethernet_rxGetNewFrame
 10081 ;; This function uses a non-reentrant model
 10082 ;;
 10083                           
 10084                           	psect	text26
 10085  004AF0                     __ptext26:
 10086                           	opt stack 0
 10087  004AF0                     _ethernetController_getEtherTypeField:
 10088                           	opt stack 21
 10089                           
 10090                           ;ENC424J600.c: 284: etherType_t ethertype = 0x0000;
 10091                           
 10092                           ; BSR set to: 0
 10093                           ;incstack = 0
 10094  004AF0  0E00               	movlw	0
 10095  004AF2  0100               	movlb	0	; () banked
 10096  004AF4  6F7D               	movwf	(ethernetController_getEtherTypeField@ethertype+1)& (0+255),b
 10097  004AF6  0E00               	movlw	0
 10098  004AF8  6F7C               	movwf	ethernetController_getEtherTypeField@ethertype& (0+255),b
 10099                           
 10100                           ; BSR set to: 0
 10101                           ;ENC424J600.c: 285: enc424j600_setERXDATAReadPointer(field.start + 20);
 10102  004AFA  0E14               	movlw	20
 10103  004AFC  256F               	addwf	ethernetController_getEtherTypeField@field& (0+255),w,b
 10104  004AFE  6F6A               	movwf	enc424j600_setERXDATAReadPointer@addr& (0+255),b
 10105  004B00  0E00               	movlw	0
 10106  004B02  2170               	addwfc	(ethernetController_getEtherTypeField@field+1)& (0+255),w,b
 10107  004B04  6F6B               	movwf	(enc424j600_setERXDATAReadPointer@addr+1)& (0+255),b
 10108  004B06  EC0B  F029         	call	_enc424j600_setERXDATAReadPointer	;wreg free
 10109                           
 10110                           ;ENC424J600.c: 286: uint8_t opcode = 0x2C;
 10111  004B0A  0E2C               	movlw	44
 10112  004B0C  0100               	movlb	0	; () banked
 10113  004B0E  6F7E               	movwf	ethernetController_getEtherTypeField@opcode& (0+255),b
 10114                           
 10115                           ; BSR set to: 0
 10116                           ;ENC424J600.c: 287: PORTBbits.RB4=0;
 10117  004B10  9881               	bcf	3969,4,c	;volatile
 10118                           
 10119                           ;ENC424J600.c: 288: enc424j600_writeSPI(&opcode);
 10120  004B12  0E7E               	movlw	low ethernetController_getEtherTypeField@opcode
 10121  004B14  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 10122  004B16  0E00               	movlw	high ethernetController_getEtherTypeField@opcode
 10123  004B18  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 10124  004B1A  EC51  F026         	call	_enc424j600_writeSPI	;wreg free
 10125                           
 10126                           ;ENC424J600.c: 290: uint8_t lowByte;
 10127                           ;ENC424J600.c: 291: uint8_t highByte;
 10128                           ;ENC424J600.c: 292: enc424j600_readSPI(&highByte);
 10129  004B1E  0E80               	movlw	low ethernetController_getEtherTypeField@highByte
 10130  004B20  0100               	movlb	0	; () banked
 10131  004B22  6F60               	movwf	enc424j600_readSPI@data& (0+255),b
 10132  004B24  0E00               	movlw	high ethernetController_getEtherTypeField@highByte
 10133  004B26  6F61               	movwf	(enc424j600_readSPI@data+1)& (0+255),b
 10134  004B28  ECE8  F025         	call	_enc424j600_readSPI	;wreg free
 10135                           
 10136                           ;ENC424J600.c: 293: enc424j600_readSPI(&lowByte);
 10137  004B2C  0E7F               	movlw	low ethernetController_getEtherTypeField@lowByte
 10138  004B2E  0100               	movlb	0	; () banked
 10139  004B30  6F60               	movwf	enc424j600_readSPI@data& (0+255),b
 10140  004B32  0E00               	movlw	high ethernetController_getEtherTypeField@lowByte
 10141  004B34  6F61               	movwf	(enc424j600_readSPI@data+1)& (0+255),b
 10142  004B36  ECE8  F025         	call	_enc424j600_readSPI	;wreg free
 10143                           
 10144                           ;ENC424J600.c: 294: ethertype = (uint16_t) (lowByte | (highByte << 8));
 10145  004B3A  0100               	movlb	0	; () banked
 10146  004B3C  5180               	movf	ethernetController_getEtherTypeField@highByte& (0+255),w,b
 10147  004B3E  6F79               	movwf	(??_ethernetController_getEtherTypeField+1)& (0+255),b
 10148  004B40  6B78               	clrf	??_ethernetController_getEtherTypeField& (0+255),b
 10149  004B42  517F               	movf	ethernetController_getEtherTypeField@lowByte& (0+255),w,b
 10150  004B44  6F7A               	movwf	(??_ethernetController_getEtherTypeField+2)& (0+255),b
 10151  004B46  6B7B               	clrf	(??_ethernetController_getEtherTypeField+3)& (0+255),b
 10152  004B48  5178               	movf	??_ethernetController_getEtherTypeField& (0+255),w,b
 10153  004B4A  117A               	iorwf	(??_ethernetController_getEtherTypeField+2)& (0+255),w,b
 10154  004B4C  6F7C               	movwf	ethernetController_getEtherTypeField@ethertype& (0+255),b
 10155  004B4E  5179               	movf	(??_ethernetController_getEtherTypeField+1)& (0+255),w,b
 10156  004B50  117B               	iorwf	(??_ethernetController_getEtherTypeField+3)& (0+255),w,b
 10157  004B52  6F7D               	movwf	(ethernetController_getEtherTypeField@ethertype+1)& (0+255),b
 10158                           
 10159                           ; BSR set to: 0
 10160                           ;ENC424J600.c: 295: PORTBbits.RB4=1;
 10161  004B54  8881               	bsf	3969,4,c	;volatile
 10162                           
 10163                           ; BSR set to: 0
 10164                           ;ENC424J600.c: 296: return ethertype;
 10165  004B56  C07C  F06F         	movff	ethernetController_getEtherTypeField@ethertype,?_ethernetController_getEtherTypeF
      +                          ield
 10166  004B5A  C07D  F070         	movff	ethernetController_getEtherTypeField@ethertype+1,?_ethernetController_getEtherTyp
      +                          eField+1
 10167  004B5E  0012               	return	
 10168  004B60                     __end_of_ethernetController_getEtherTypeField:
 10169                           	opt stack 0
 10170                           tblptru	equ	0xFF8
 10171                           tblptrh	equ	0xFF7
 10172                           tblptrl	equ	0xFF6
 10173                           tablat	equ	0xFF5
 10174                           prodh	equ	0xFF4
 10175                           prodl	equ	0xFF3
 10176                           intcon	equ	0xFF2
 10177                           intcon3	equ	0xFF0
 10178                           indf0	equ	0xFEF
 10179                           postinc0	equ	0xFEE
 10180                           plusw0	equ	0xFEB
 10181                           fsr0h	equ	0xFEA
 10182                           fsr0l	equ	0xFE9
 10183                           wreg	equ	0xFE8
 10184                           indf1	equ	0xFE7
 10185                           postinc1	equ	0xFE6
 10186                           postdec1	equ	0xFE5
 10187                           plusw1	equ	0xFE3
 10188                           fsr1h	equ	0xFE2
 10189                           fsr1l	equ	0xFE1
 10190                           indf2	equ	0xFDF
 10191                           postinc2	equ	0xFDE
 10192                           postdec2	equ	0xFDD
 10193                           plusw2	equ	0xFDB
 10194                           fsr2h	equ	0xFDA
 10195                           fsr2l	equ	0xFD9
 10196                           status	equ	0xFD8
 10197                           
 10198 ;; *************** function _etherTypeToString *****************
 10199 ;; Defined at:
 10200 ;;		line 138 in file "src/system/uart.c"
 10201 ;; Parameters:    Size  Location     Type
 10202 ;;  ethertype       2    0[BANK0 ] enum E5590
 10203 ;; Auto vars:     Size  Location     Type
 10204 ;;		None
 10205 ;; Return value:  Size  Location     Type
 10206 ;;                  2    0[BANK0 ] PTR unsigned char 
 10207 ;; Registers used:
 10208 ;;		wreg, status,2, status,0
 10209 ;; Tracked objects:
 10210 ;;		On entry : 0/0
 10211 ;;		On exit  : 0/0
 10212 ;;		Unchanged: 0/0
 10213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10214 ;;      Params:         0       2       0       0       0       0       0       0       0
 10215 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10216 ;;      Temps:          0       2       0       0       0       0       0       0       0
 10217 ;;      Totals:         0       4       0       0       0       0       0       0       0
 10218 ;;Total ram usage:        4 bytes
 10219 ;; Hardware stack levels used:    1
 10220 ;; Hardware stack levels required when called:    4
 10221 ;; This function calls:
 10222 ;;		Nothing
 10223 ;; This function is called by:
 10224 ;;		_ethernet_rxGetNewFrame
 10225 ;; This function uses a non-reentrant model
 10226 ;;
 10227                           
 10228                           	psect	text27
 10229  005092                     __ptext27:
 10230                           	opt stack 0
 10231  005092                     _etherTypeToString:
 10232                           	opt stack 24
 10233                           
 10234                           ;uart.c: 139: switch (ethertype) {
 10235                           
 10236                           ; BSR set to: 0
 10237                           ;incstack = 0
 10238  005092  D010               	goto	l825
 10239  005094                     
 10240                           ;uart.c: 141: return "IPv4";
 10241  005094  0EC4               	movlw	low STR_62
 10242  005096  0100               	movlb	0	; () banked
 10243  005098  6F60               	movwf	?_etherTypeToString& (0+255),b
 10244  00509A  0E7F               	movlw	high STR_62
 10245  00509C  6F61               	movwf	(?_etherTypeToString+1)& (0+255),b
 10246                           
 10247                           ; BSR set to: 0
 10248  00509E  0012               	return	
 10249  0050A0                     
 10250                           ; BSR set to: 0
 10251                           ;uart.c: 143: return "ARP";
 10252                           
 10253                           ; BSR set to: 0
 10254  0050A0  0EE5               	movlw	low STR_63
 10255  0050A2  6F60               	movwf	?_etherTypeToString& (0+255),b
 10256  0050A4  0E7F               	movlw	high STR_63
 10257  0050A6  6F61               	movwf	(?_etherTypeToString+1)& (0+255),b
 10258                           
 10259                           ; BSR set to: 0
 10260  0050A8  0012               	return	
 10261  0050AA                     
 10262                           ; BSR set to: 0
 10263                           ;uart.c: 145: return "Unknown EtherType";
 10264                           
 10265                           ; BSR set to: 0
 10266  0050AA  0E95               	movlw	low STR_64
 10267  0050AC  6F60               	movwf	?_etherTypeToString& (0+255),b
 10268  0050AE  0E7E               	movlw	high STR_64
 10269  0050B0  6F61               	movwf	(?_etherTypeToString+1)& (0+255),b
 10270                           
 10271                           ; BSR set to: 0
 10272                           ;uart.c: 146: }
 10273                           
 10274                           ; BSR set to: 0
 10275  0050B2  0012               	return	
 10276  0050B4                     l825:
 10277                           
 10278                           ; BSR set to: 0
 10279  0050B4  C060  F062         	movff	etherTypeToString@ethertype,??_etherTypeToString
 10280  0050B8  C061  F063         	movff	etherTypeToString@ethertype+1,??_etherTypeToString+1
 10281                           
 10282                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10283                           ; Switch size 1, requested type "space"
 10284                           ; Number of cases is 1, Range of values is 8 to 8
 10285                           ; switch strategies available:
 10286                           ; Name         Instructions Cycles
 10287                           ; simple_byte            4     3 (average)
 10288                           ;	Chosen strategy is simple_byte
 10289  0050BC  0100               	movlb	0	; () banked
 10290  0050BE  5163               	movf	(??_etherTypeToString+1)& (0+255),w,b
 10291  0050C0  0A08               	xorlw	8	; case 8
 10292  0050C2  A4D8               	btfss	status,2,c
 10293  0050C4  D7F2               	goto	l829
 10294                           
 10295                           ; BSR set to: 0
 10296                           ; Switch size 1, requested type "space"
 10297                           ; Number of cases is 2, Range of values is 0 to 6
 10298                           ; switch strategies available:
 10299                           ; Name         Instructions Cycles
 10300                           ; simple_byte            7     4 (average)
 10301                           ;	Chosen strategy is simple_byte
 10302  0050C6  5162               	movf	??_etherTypeToString& (0+255),w,b
 10303  0050C8  0A00               	xorlw	0	; case 0
 10304  0050CA  B4D8               	btfsc	status,2,c
 10305  0050CC  D7E3               	goto	l826
 10306  0050CE  0A06               	xorlw	6	; case 6
 10307  0050D0  B4D8               	btfsc	status,2,c
 10308  0050D2  D7E6               	goto	l828
 10309  0050D4  D7EA               	goto	l829
 10310  0050D6                     __end_of_etherTypeToString:
 10311                           	opt stack 0
 10312                           tblptru	equ	0xFF8
 10313                           tblptrh	equ	0xFF7
 10314                           tblptrl	equ	0xFF6
 10315                           tablat	equ	0xFF5
 10316                           prodh	equ	0xFF4
 10317                           prodl	equ	0xFF3
 10318                           intcon	equ	0xFF2
 10319                           intcon3	equ	0xFF0
 10320                           indf0	equ	0xFEF
 10321                           postinc0	equ	0xFEE
 10322                           plusw0	equ	0xFEB
 10323                           fsr0h	equ	0xFEA
 10324                           fsr0l	equ	0xFE9
 10325                           wreg	equ	0xFE8
 10326                           indf1	equ	0xFE7
 10327                           postinc1	equ	0xFE6
 10328                           postdec1	equ	0xFE5
 10329                           plusw1	equ	0xFE3
 10330                           fsr1h	equ	0xFE2
 10331                           fsr1l	equ	0xFE1
 10332                           indf2	equ	0xFDF
 10333                           postinc2	equ	0xFDE
 10334                           postdec2	equ	0xFDD
 10335                           plusw2	equ	0xFDB
 10336                           fsr2h	equ	0xFDA
 10337                           fsr2l	equ	0xFD9
 10338                           status	equ	0xFD8
 10339                           
 10340 ;; *************** function _arp_handleNewPacket *****************
 10341 ;; Defined at:
 10342 ;;		line 33 in file "src/stack/protocols/arp.c"
 10343 ;; Parameters:    Size  Location     Type
 10344 ;;  frame           2  156[BANK0 ] PTR struct ethernetFrame
 10345 ;;		 -> stack(135), 
 10346 ;; Auto vars:     Size  Location     Type
 10347 ;;  arp            32   88[BANK1 ] struct arp_message
 10348 ;; Return value:  Size  Location     Type
 10349 ;;                  1    wreg      void 
 10350 ;; Registers used:
 10351 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10352 ;; Tracked objects:
 10353 ;;		On entry : 0/0
 10354 ;;		On exit  : 0/0
 10355 ;;		Unchanged: 0/0
 10356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10357 ;;      Params:         0       2       0       0       0       0       0       0       0
 10358 ;;      Locals:         0       0      32       0       0       0       0       0       0
 10359 ;;      Temps:          0       2       0       0       0       0       0       0       0
 10360 ;;      Totals:         0       4      32       0       0       0       0       0       0
 10361 ;;Total ram usage:       36 bytes
 10362 ;; Hardware stack levels used:    1
 10363 ;; Hardware stack levels required when called:   11
 10364 ;; This function calls:
 10365 ;;		_UARTTransmitText
 10366 ;;		_arp_parseFromRXBuffer
 10367 ;;		_arp_sendReply
 10368 ;;		_arp_setNewEntry
 10369 ;;		_ethernetController_dropPacket
 10370 ;;		_getMillis
 10371 ;;		_ipAdressToString
 10372 ;;		_macToString
 10373 ;; This function is called by:
 10374 ;;		_ethernet_rxGetNewFrame
 10375 ;; This function uses a non-reentrant model
 10376 ;;
 10377                           
 10378                           	psect	text28
 10379  002980                     __ptext28:
 10380                           	opt stack 0
 10381  002980                     _arp_handleNewPacket:
 10382                           	opt stack 17
 10383                           
 10384                           ;arp.c: 34: arp_message_t arp;
 10385                           ;arp.c: 35: if (frame->ethertype != ETHERTYPE_ARP) {
 10386                           
 10387                           ; BSR set to: 0
 10388                           ;incstack = 0
 10389  002980  0100               	movlb	0	; () banked
 10390  002982  EE20 F00E          	lfsr	2,14
 10391  002986  51FC               	movf	arp_handleNewPacket@frame& (0+255),w,b
 10392  002988  26D9               	addwf	fsr2l,f,c
 10393  00298A  51FD               	movf	(arp_handleNewPacket@frame+1)& (0+255),w,b
 10394  00298C  22DA               	addwfc	fsr2h,f,c
 10395  00298E  0E06               	movlw	6
 10396  002990  18DE               	xorwf	postinc2,w,c
 10397  002992  E104               	bnz	u11410
 10398  002994  0E08               	movlw	8
 10399  002996  18DE               	xorwf	postinc2,w,c
 10400  002998  B4D8               	btfsc	status,2,c
 10401  00299A  D007               	goto	l926
 10402  00299C                     u11410:
 10403                           
 10404                           ; BSR set to: 0
 10405                           ;arp.c: 36: ethernetController_dropPacket(frame);
 10406  00299C  C0FC  F072         	movff	arp_handleNewPacket@frame,?_ethernetController_dropPacket
 10407  0029A0  C0FD  F073         	movff	arp_handleNewPacket@frame+1,?_ethernetController_dropPacket+1
 10408  0029A4  ECCF  F028         	call	_ethernetController_dropPacket	;wreg free
 10409                           
 10410                           ;arp.c: 37: return;
 10411  0029A8  0012               	return	
 10412  0029AA                     l926:
 10413                           
 10414                           ;arp.c: 38: }
 10415                           ;arp.c: 40: arp = arp_parseFromRXBuffer(frame);
 10416  0029AA  C0FC  F074         	movff	arp_handleNewPacket@frame,arp_parseFromRXBuffer@frame
 10417  0029AE  C0FD  F075         	movff	arp_handleNewPacket@frame+1,arp_parseFromRXBuffer@frame+1
 10418  0029B2  ECB9  F007         	call	_arp_parseFromRXBuffer	;wreg free
 10419  0029B6  EE21  F058         	lfsr	2,arp_handleNewPacket@arp
 10420  0029BA  0E1F               	movlw	31
 10421  0029BC                     u11421:
 10422  0029BC  CFEB FFDB          	movff	plusw0,plusw2
 10423  0029C0  06E8               	decf	wreg,f,c
 10424  0029C2  E2FC               	bc	u11421
 10425                           
 10426                           ;arp.c: 41: if (arp.err.code != (uint16_t)0) {
 10427  0029C4  0101               	movlb	1	; () banked
 10428  0029C6  5176               	movf	(arp_handleNewPacket@arp+30)& (0+255),w,b
 10429  0029C8  1177               	iorwf	(arp_handleNewPacket@arp+31)& (0+255),w,b
 10430  0029CA  B4D8               	btfsc	status,2,c
 10431  0029CC  D00E               	goto	l928
 10432                           
 10433                           ; BSR set to: 1
 10434                           ;arp.c: 42: ethernetController_dropPacket(frame);
 10435  0029CE  C0FC  F072         	movff	arp_handleNewPacket@frame,?_ethernetController_dropPacket
 10436  0029D2  C0FD  F073         	movff	arp_handleNewPacket@frame+1,?_ethernetController_dropPacket+1
 10437  0029D6  ECCF  F028         	call	_ethernetController_dropPacket	;wreg free
 10438                           
 10439                           ;arp.c: 43: UARTTransmitText("[Invalid ARP Message was discarded.]\r\n");
 10440  0029DA  0E3C               	movlw	low STR_69
 10441  0029DC  0100               	movlb	0	; () banked
 10442  0029DE  6F98               	movwf	UARTTransmitText@str& (0+255),b
 10443  0029E0  0E7B               	movlw	high STR_69
 10444  0029E2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 10445  0029E4  EC09  F027         	call	_UARTTransmitText	;wreg free
 10446                           
 10447                           ;arp.c: 44: return;
 10448  0029E8  0012               	return	
 10449  0029EA                     l928:
 10450                           
 10451                           ;arp.c: 45: }
 10452                           ;arp.c: 46: UARTTransmitText("[");
 10453  0029EA  0EC2               	movlw	low (STR_72+3)
 10454  0029EC  0100               	movlb	0	; () banked
 10455  0029EE  6F98               	movwf	UARTTransmitText@str& (0+255),b
 10456  0029F0  0E7F               	movlw	high (STR_72+3)
 10457  0029F2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 10458  0029F4  EC09  F027         	call	_UARTTransmitText	;wreg free
 10459                           
 10460                           ;arp.c: 47: UARTTransmitText(macToString(arp.senderMACAddress));
 10461  0029F8  EE21  F060         	lfsr	2,arp_handleNewPacket@arp+8
 10462  0029FC  EE00  F07A         	lfsr	0,macToString@addr
 10463  002A00  0E05               	movlw	5
 10464  002A02                     u11441:
 10465  002A02  CFDB FFEB          	movff	plusw2,plusw0
 10466  002A06  06E8               	decf	wreg,f,c
 10467  002A08  E2FC               	bc	u11441
 10468  002A0A  EC8D  F01D         	call	_macToString	;wreg free
 10469  002A0E  C07A  F098         	movff	?_macToString,UARTTransmitText@str
 10470  002A12  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
 10471  002A16  EC09  F027         	call	_UARTTransmitText	;wreg free
 10472                           
 10473                           ;arp.c: 48: UARTTransmitText(", ");
 10474  002A1A  0E32               	movlw	low (STR_47+17)
 10475  002A1C  0100               	movlb	0	; () banked
 10476  002A1E  6F98               	movwf	UARTTransmitText@str& (0+255),b
 10477  002A20  0E7E               	movlw	high (STR_47+17)
 10478  002A22  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 10479  002A24  EC09  F027         	call	_UARTTransmitText	;wreg free
 10480                           
 10481                           ;arp.c: 49: UARTTransmitText(ipAdressToString(arp.senderIPAddress));
 10482  002A28  C166  F073         	movff	arp_handleNewPacket@arp+14,ipAdressToString@ip
 10483  002A2C  C167  F074         	movff	arp_handleNewPacket@arp+15,ipAdressToString@ip+1
 10484  002A30  C168  F075         	movff	arp_handleNewPacket@arp+16,ipAdressToString@ip+2
 10485  002A34  C169  F076         	movff	arp_handleNewPacket@arp+17,ipAdressToString@ip+3
 10486  002A38  ECC9  F013         	call	_ipAdressToString	;wreg free
 10487  002A3C  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
 10488  002A40  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
 10489  002A44  EC09  F027         	call	_UARTTransmitText	;wreg free
 10490                           
 10491                           ;arp.c: 50: UARTTransmitText("]->[");
 10492  002A48  0EBF               	movlw	low STR_72
 10493  002A4A  0100               	movlb	0	; () banked
 10494  002A4C  6F98               	movwf	UARTTransmitText@str& (0+255),b
 10495  002A4E  0E7F               	movlw	high STR_72
 10496  002A50  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 10497  002A52  EC09  F027         	call	_UARTTransmitText	;wreg free
 10498                           
 10499                           ;arp.c: 51: UARTTransmitText(macToString(arp.targetMACAddress));
 10500  002A56  EE21  F06A         	lfsr	2,arp_handleNewPacket@arp+18
 10501  002A5A  EE00  F07A         	lfsr	0,macToString@addr
 10502  002A5E  0E05               	movlw	5
 10503  002A60                     u11451:
 10504  002A60  CFDB FFEB          	movff	plusw2,plusw0
 10505  002A64  06E8               	decf	wreg,f,c
 10506  002A66  E2FC               	bc	u11451
 10507  002A68  EC8D  F01D         	call	_macToString	;wreg free
 10508  002A6C  C07A  F098         	movff	?_macToString,UARTTransmitText@str
 10509  002A70  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
 10510  002A74  EC09  F027         	call	_UARTTransmitText	;wreg free
 10511                           
 10512                           ;arp.c: 52: UARTTransmitText(", ");
 10513  002A78  0E32               	movlw	low (STR_47+17)
 10514  002A7A  0100               	movlb	0	; () banked
 10515  002A7C  6F98               	movwf	UARTTransmitText@str& (0+255),b
 10516  002A7E  0E7E               	movlw	high (STR_47+17)
 10517  002A80  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 10518  002A82  EC09  F027         	call	_UARTTransmitText	;wreg free
 10519                           
 10520                           ;arp.c: 53: UARTTransmitText(ipAdressToString(arp.targetIPAddress));
 10521  002A86  C170  F073         	movff	arp_handleNewPacket@arp+24,ipAdressToString@ip
 10522  002A8A  C171  F074         	movff	arp_handleNewPacket@arp+25,ipAdressToString@ip+1
 10523  002A8E  C172  F075         	movff	arp_handleNewPacket@arp+26,ipAdressToString@ip+2
 10524  002A92  C173  F076         	movff	arp_handleNewPacket@arp+27,ipAdressToString@ip+3
 10525  002A96  ECC9  F013         	call	_ipAdressToString	;wreg free
 10526  002A9A  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
 10527  002A9E  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
 10528  002AA2  EC09  F027         	call	_UARTTransmitText	;wreg free
 10529                           
 10530                           ;arp.c: 54: UARTTransmitText("]");
 10531  002AA6  0EFA               	movlw	low (STR_19+1)
 10532  002AA8  0100               	movlb	0	; () banked
 10533  002AAA  6F98               	movwf	UARTTransmitText@str& (0+255),b
 10534  002AAC  0E7F               	movlw	high (STR_19+1)
 10535  002AAE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 10536  002AB0  EC09  F027         	call	_UARTTransmitText	;wreg free
 10537                           
 10538                           ;arp.c: 55: if (arp.fIsProbe)
 10539  002AB4  0101               	movlb	1	; () banked
 10540  002AB6  A374               	btfss	(arp_handleNewPacket@arp+28)& (0+255),1,b
 10541  002AB8  D007               	goto	l929
 10542                           
 10543                           ; BSR set to: 1
 10544                           ;arp.c: 56: UARTTransmitText("[IsProbe]");
 10545  002ABA  0E6C               	movlw	low STR_75
 10546  002ABC  0100               	movlb	0	; () banked
 10547  002ABE  6F98               	movwf	UARTTransmitText@str& (0+255),b
 10548  002AC0  0E7F               	movlw	high STR_75
 10549  002AC2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 10550  002AC4  EC09  F027         	call	_UARTTransmitText	;wreg free
 10551  002AC8                     l929:
 10552                           
 10553                           ;arp.c: 57: if (arp.fIsGratuitous)
 10554  002AC8  0101               	movlb	1	; () banked
 10555  002ACA  A174               	btfss	(arp_handleNewPacket@arp+28)& (0+255),0,b
 10556  002ACC  D007               	goto	l930
 10557                           
 10558                           ; BSR set to: 1
 10559                           ;arp.c: 58: UARTTransmitText("[IsGratuitous]");
 10560  002ACE  0EE9               	movlw	low STR_76
 10561  002AD0  0100               	movlb	0	; () banked
 10562  002AD2  6F98               	movwf	UARTTransmitText@str& (0+255),b
 10563  002AD4  0E7E               	movlw	high STR_76
 10564  002AD6  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 10565  002AD8  EC09  F027         	call	_UARTTransmitText	;wreg free
 10566  002ADC                     l930:
 10567                           
 10568                           ;arp.c: 60: arp_sendReply(arp);
 10569  002ADC  EE21  F058         	lfsr	2,arp_handleNewPacket@arp
 10570  002AE0  EE01  F000         	lfsr	0,arp_sendReply@request
 10571  002AE4  0E1F               	movlw	31
 10572  002AE6                     u11481:
 10573  002AE6  CFDB FFEB          	movff	plusw2,plusw0
 10574  002AEA  06E8               	decf	wreg,f,c
 10575  002AEC  E2FC               	bc	u11481
 10576  002AEE  ECA2  F018         	call	_arp_sendReply	;wreg free
 10577                           
 10578                           ;arp.c: 61: arp_setNewEntry(arp.senderMACAddress, arp.senderIPAddress, getMillis());
 10579  002AF2  EE21  F060         	lfsr	2,arp_handleNewPacket@arp+8
 10580  002AF6  EE00  F09A         	lfsr	0,arp_setNewEntry@mac
 10581  002AFA  0E05               	movlw	5
 10582  002AFC                     u11491:
 10583  002AFC  CFDB FFEB          	movff	plusw2,plusw0
 10584  002B00  06E8               	decf	wreg,f,c
 10585  002B02  E2FC               	bc	u11491
 10586  002B04  C166  F0A0         	movff	arp_handleNewPacket@arp+14,arp_setNewEntry@ip
 10587  002B08  C167  F0A1         	movff	arp_handleNewPacket@arp+15,arp_setNewEntry@ip+1
 10588  002B0C  C168  F0A2         	movff	arp_handleNewPacket@arp+16,arp_setNewEntry@ip+2
 10589  002B10  C169  F0A3         	movff	arp_handleNewPacket@arp+17,arp_setNewEntry@ip+3
 10590  002B14  EC8E  F02B         	call	_getMillis	;wreg free
 10591  002B18  C060  F0A4         	movff	?_getMillis,arp_setNewEntry@timestamp
 10592  002B1C  C061  F0A5         	movff	?_getMillis+1,arp_setNewEntry@timestamp+1
 10593  002B20  C062  F0A6         	movff	?_getMillis+2,arp_setNewEntry@timestamp+2
 10594  002B24  C063  F0A7         	movff	?_getMillis+3,arp_setNewEntry@timestamp+3
 10595  002B28  EC2D  F017         	call	_arp_setNewEntry	;wreg free
 10596  002B2C  0012               	return		;funcret
 10597  002B2E                     __end_of_arp_handleNewPacket:
 10598                           	opt stack 0
 10599                           tblptru	equ	0xFF8
 10600                           tblptrh	equ	0xFF7
 10601                           tblptrl	equ	0xFF6
 10602                           tablat	equ	0xFF5
 10603                           prodh	equ	0xFF4
 10604                           prodl	equ	0xFF3
 10605                           intcon	equ	0xFF2
 10606                           intcon3	equ	0xFF0
 10607                           indf0	equ	0xFEF
 10608                           postinc0	equ	0xFEE
 10609                           plusw0	equ	0xFEB
 10610                           fsr0h	equ	0xFEA
 10611                           fsr0l	equ	0xFE9
 10612                           wreg	equ	0xFE8
 10613                           indf1	equ	0xFE7
 10614                           postinc1	equ	0xFE6
 10615                           postdec1	equ	0xFE5
 10616                           plusw1	equ	0xFE3
 10617                           fsr1h	equ	0xFE2
 10618                           fsr1l	equ	0xFE1
 10619                           indf2	equ	0xFDF
 10620                           postinc2	equ	0xFDE
 10621                           postdec2	equ	0xFDD
 10622                           plusw2	equ	0xFDB
 10623                           fsr2h	equ	0xFDA
 10624                           fsr2l	equ	0xFD9
 10625                           status	equ	0xFD8
 10626                           
 10627 ;; *************** function _ethernetController_dropPacket *****************
 10628 ;; Defined at:
 10629 ;;		line 379 in file "src/enc424j600/ENC424J600.c"
 10630 ;; Parameters:    Size  Location     Type
 10631 ;;		None
 10632 ;; Auto vars:     Size  Location     Type
 10633 ;;		None
 10634 ;; Return value:  Size  Location     Type
 10635 ;;                  1    wreg      void 
 10636 ;; Registers used:
 10637 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10638 ;; Tracked objects:
 10639 ;;		On entry : 0/0
 10640 ;;		On exit  : 0/0
 10641 ;;		Unchanged: 0/0
 10642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10643 ;;      Params:         0       2       0       0       0       0       0       0       0
 10644 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10645 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10646 ;;      Totals:         0       2       0       0       0       0       0       0       0
 10647 ;;Total ram usage:        2 bytes
 10648 ;; Hardware stack levels used:    1
 10649 ;; Hardware stack levels required when called:    8
 10650 ;; This function calls:
 10651 ;;		_enc424j600_setRXTailPointer
 10652 ;;		_enc424j600_writeSingleByte
 10653 ;;		_ethernetController_getNextPacketPointer
 10654 ;; This function is called by:
 10655 ;;		_ethernet_rxGetNewFrame
 10656 ;;		_arp_handleNewPacket
 10657 ;;		_ipv4_handleNewPacket
 10658 ;; This function uses a non-reentrant model
 10659 ;;
 10660                           
 10661                           	psect	text29
 10662  00519E                     __ptext29:
 10663                           	opt stack 0
 10664  00519E                     _ethernetController_dropPacket:
 10665                           	opt stack 19
 10666                           
 10667                           ;ENC424J600.c: 381: if (ethernetController_getNextPacketPointer() == 0x3000) {
 10668                           
 10669                           ;incstack = 0
 10670  00519E  ECA6  F02B         	call	_ethernetController_getNextPacketPointer	;wreg free
 10671  0051A2  0E30               	movlw	48
 10672  0051A4  0100               	movlb	0	; () banked
 10673  0051A6  1963               	xorwf	(?_ethernetController_getNextPacketPointer+1)& (0+255),w,b
 10674  0051A8  1162               	iorwf	?_ethernetController_getNextPacketPointer& (0+255),w,b
 10675  0051AA  A4D8               	btfss	status,2,c
 10676  0051AC  D007               	goto	l187
 10677                           
 10678                           ; BSR set to: 0
 10679                           ;ENC424J600.c: 382: enc424j600_setRXTailPointer(0x5FFF - 1);
 10680  0051AE  0E5F               	movlw	95
 10681  0051B0  6F6F               	movwf	(enc424j600_setRXTailPointer@addr+1)& (0+255),b
 10682  0051B2  0EFE               	movlw	254
 10683  0051B4  6F6E               	movwf	enc424j600_setRXTailPointer@addr& (0+255),b
 10684  0051B6  EC21  F02A         	call	_enc424j600_setRXTailPointer	;wreg free
 10685                           
 10686                           ;ENC424J600.c: 383: } else {
 10687  0051BA  D00B               	goto	l188
 10688  0051BC                     l187:
 10689                           
 10690                           ;ENC424J600.c: 384: enc424j600_setRXTailPointer(ethernetController_getNextPacketPointer(
      +                          ) - 2);
 10691  0051BC  ECA6  F02B         	call	_ethernetController_getNextPacketPointer	;wreg free
 10692  0051C0  0EFE               	movlw	254
 10693  0051C2  0100               	movlb	0	; () banked
 10694  0051C4  2562               	addwf	?_ethernetController_getNextPacketPointer& (0+255),w,b
 10695  0051C6  6F6E               	movwf	enc424j600_setRXTailPointer@addr& (0+255),b
 10696  0051C8  0EFF               	movlw	255
 10697  0051CA  2163               	addwfc	(?_ethernetController_getNextPacketPointer+1)& (0+255),w,b
 10698  0051CC  6F6F               	movwf	(enc424j600_setRXTailPointer@addr+1)& (0+255),b
 10699  0051CE  EC21  F02A         	call	_enc424j600_setRXTailPointer	;wreg free
 10700  0051D2                     l188:
 10701                           
 10702                           ;ENC424J600.c: 385: }
 10703                           ;ENC424J600.c: 387: enc424j600_writeSingleByte(0b11001100);
 10704  0051D2  0ECC               	movlw	204
 10705  0051D4  EC53  F02B         	call	_enc424j600_writeSingleByte
 10706  0051D8  0012               	return		;funcret
 10707  0051DA                     __end_of_ethernetController_dropPacket:
 10708                           	opt stack 0
 10709                           tblptru	equ	0xFF8
 10710                           tblptrh	equ	0xFF7
 10711                           tblptrl	equ	0xFF6
 10712                           tablat	equ	0xFF5
 10713                           prodh	equ	0xFF4
 10714                           prodl	equ	0xFF3
 10715                           intcon	equ	0xFF2
 10716                           intcon3	equ	0xFF0
 10717                           indf0	equ	0xFEF
 10718                           postinc0	equ	0xFEE
 10719                           plusw0	equ	0xFEB
 10720                           fsr0h	equ	0xFEA
 10721                           fsr0l	equ	0xFE9
 10722                           wreg	equ	0xFE8
 10723                           indf1	equ	0xFE7
 10724                           postinc1	equ	0xFE6
 10725                           postdec1	equ	0xFE5
 10726                           plusw1	equ	0xFE3
 10727                           fsr1h	equ	0xFE2
 10728                           fsr1l	equ	0xFE1
 10729                           indf2	equ	0xFDF
 10730                           postinc2	equ	0xFDE
 10731                           postdec2	equ	0xFDD
 10732                           plusw2	equ	0xFDB
 10733                           fsr2h	equ	0xFDA
 10734                           fsr2l	equ	0xFD9
 10735                           status	equ	0xFD8
 10736                           
 10737 ;; *************** function _ethernetController_getNextPacketPointer *****************
 10738 ;; Defined at:
 10739 ;;		line 461 in file "src/enc424j600/ENC424J600.c"
 10740 ;; Parameters:    Size  Location     Type
 10741 ;;		None
 10742 ;; Auto vars:     Size  Location     Type
 10743 ;;		None
 10744 ;; Return value:  Size  Location     Type
 10745 ;;                  2    2[BANK0 ] unsigned int 
 10746 ;; Registers used:
 10747 ;;		cstack
 10748 ;; Tracked objects:
 10749 ;;		On entry : 0/0
 10750 ;;		On exit  : 0/0
 10751 ;;		Unchanged: 0/0
 10752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10753 ;;      Params:         0       2       0       0       0       0       0       0       0
 10754 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10755 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10756 ;;      Totals:         0       2       0       0       0       0       0       0       0
 10757 ;;Total ram usage:        2 bytes
 10758 ;; Hardware stack levels used:    1
 10759 ;; Hardware stack levels required when called:    5
 10760 ;; This function calls:
 10761 ;;		_enc424j600_getNextPacketPointer
 10762 ;; This function is called by:
 10763 ;;		_ethernetController_dropPacket
 10764 ;;		_ethernet_rxGetNewFrame
 10765 ;; This function uses a non-reentrant model
 10766 ;;
 10767                           
 10768                           	psect	text30
 10769  00574C                     __ptext30:
 10770                           	opt stack 0
 10771  00574C                     _ethernetController_getNextPacketPointer:
 10772                           	opt stack 21
 10773                           
 10774                           ;ENC424J600.c: 462: return enc424j600_getNextPacketPointer();
 10775                           
 10776                           ;incstack = 0
 10777  00574C  ECC6  F02B         	call	_enc424j600_getNextPacketPointer	;wreg free
 10778  005750  C060  F062         	movff	?_enc424j600_getNextPacketPointer,?_ethernetController_getNextPacketPointer
 10779  005754  C061  F063         	movff	?_enc424j600_getNextPacketPointer+1,?_ethernetController_getNextPacketPointer+1
 10780  005758  0012               	return	
 10781  00575A                     __end_of_ethernetController_getNextPacketPointer:
 10782                           	opt stack 0
 10783                           tblptru	equ	0xFF8
 10784                           tblptrh	equ	0xFF7
 10785                           tblptrl	equ	0xFF6
 10786                           tablat	equ	0xFF5
 10787                           prodh	equ	0xFF4
 10788                           prodl	equ	0xFF3
 10789                           intcon	equ	0xFF2
 10790                           intcon3	equ	0xFF0
 10791                           indf0	equ	0xFEF
 10792                           postinc0	equ	0xFEE
 10793                           plusw0	equ	0xFEB
 10794                           fsr0h	equ	0xFEA
 10795                           fsr0l	equ	0xFE9
 10796                           wreg	equ	0xFE8
 10797                           indf1	equ	0xFE7
 10798                           postinc1	equ	0xFE6
 10799                           postdec1	equ	0xFE5
 10800                           plusw1	equ	0xFE3
 10801                           fsr1h	equ	0xFE2
 10802                           fsr1l	equ	0xFE1
 10803                           indf2	equ	0xFDF
 10804                           postinc2	equ	0xFDE
 10805                           postdec2	equ	0xFDD
 10806                           plusw2	equ	0xFDB
 10807                           fsr2h	equ	0xFDA
 10808                           fsr2l	equ	0xFD9
 10809                           status	equ	0xFD8
 10810                           
 10811 ;; *************** function _enc424j600_getNextPacketPointer *****************
 10812 ;; Defined at:
 10813 ;;		line 590 in file "src/enc424j600/ENC424J600.c"
 10814 ;; Parameters:    Size  Location     Type
 10815 ;;		None
 10816 ;; Auto vars:     Size  Location     Type
 10817 ;;		None
 10818 ;; Return value:  Size  Location     Type
 10819 ;;                  2    0[BANK0 ] unsigned int 
 10820 ;; Registers used:
 10821 ;;		None
 10822 ;; Tracked objects:
 10823 ;;		On entry : 0/0
 10824 ;;		On exit  : 0/0
 10825 ;;		Unchanged: 0/0
 10826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10827 ;;      Params:         0       2       0       0       0       0       0       0       0
 10828 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10829 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10830 ;;      Totals:         0       2       0       0       0       0       0       0       0
 10831 ;;Total ram usage:        2 bytes
 10832 ;; Hardware stack levels used:    1
 10833 ;; Hardware stack levels required when called:    4
 10834 ;; This function calls:
 10835 ;;		Nothing
 10836 ;; This function is called by:
 10837 ;;		_ethernetController_updateNextPacketPointer
 10838 ;;		_ethernetController_getNextPacketPointer
 10839 ;; This function uses a non-reentrant model
 10840 ;;
 10841                           
 10842                           	psect	text31
 10843  00578C                     __ptext31:
 10844                           	opt stack 0
 10845  00578C                     _enc424j600_getNextPacketPointer:
 10846                           	opt stack 21
 10847                           
 10848                           ;ENC424J600.c: 591: return nextPacketPointer;
 10849                           
 10850                           ;incstack = 0
 10851  00578C  C042  F060         	movff	_nextPacketPointer,?_enc424j600_getNextPacketPointer
 10852  005790  C043  F061         	movff	_nextPacketPointer+1,?_enc424j600_getNextPacketPointer+1
 10853  005794  0012               	return		;funcret
 10854  005796                     __end_of_enc424j600_getNextPacketPointer:
 10855                           	opt stack 0
 10856                           tblptru	equ	0xFF8
 10857                           tblptrh	equ	0xFF7
 10858                           tblptrl	equ	0xFF6
 10859                           tablat	equ	0xFF5
 10860                           prodh	equ	0xFF4
 10861                           prodl	equ	0xFF3
 10862                           intcon	equ	0xFF2
 10863                           intcon3	equ	0xFF0
 10864                           indf0	equ	0xFEF
 10865                           postinc0	equ	0xFEE
 10866                           plusw0	equ	0xFEB
 10867                           fsr0h	equ	0xFEA
 10868                           fsr0l	equ	0xFE9
 10869                           wreg	equ	0xFE8
 10870                           indf1	equ	0xFE7
 10871                           postinc1	equ	0xFE6
 10872                           postdec1	equ	0xFE5
 10873                           plusw1	equ	0xFE3
 10874                           fsr1h	equ	0xFE2
 10875                           fsr1l	equ	0xFE1
 10876                           indf2	equ	0xFDF
 10877                           postinc2	equ	0xFDE
 10878                           postdec2	equ	0xFDD
 10879                           plusw2	equ	0xFDB
 10880                           fsr2h	equ	0xFDA
 10881                           fsr2l	equ	0xFD9
 10882                           status	equ	0xFD8
 10883                           
 10884 ;; *************** function _arp_sendReply *****************
 10885 ;; Defined at:
 10886 ;;		line 203 in file "src/stack/protocols/arp.c"
 10887 ;; Parameters:    Size  Location     Type
 10888 ;;  request        32    0[BANK1 ] struct arp_message
 10889 ;; Auto vars:     Size  Location     Type
 10890 ;;  reply          32   56[BANK1 ] struct arp_message
 10891 ;;  targetMAC       6   38[BANK1 ] struct macaddress
 10892 ;;  senderMAC       6   32[BANK1 ] struct macaddress
 10893 ;;  myIP            4   52[BANK1 ] struct ipv4_address
 10894 ;;  targetIP        4   48[BANK1 ] struct ipv4_address
 10895 ;;  senderIP        4   44[BANK1 ] struct ipv4_address
 10896 ;; Return value:  Size  Location     Type
 10897 ;;                  1    wreg      void 
 10898 ;; Registers used:
 10899 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10900 ;; Tracked objects:
 10901 ;;		On entry : 0/0
 10902 ;;		On exit  : 0/0
 10903 ;;		Unchanged: 0/0
 10904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10905 ;;      Params:         0       0      32       0       0       0       0       0       0
 10906 ;;      Locals:         0       0      56       0       0       0       0       0       0
 10907 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10908 ;;      Totals:         0       0      88       0       0       0       0       0       0
 10909 ;;Total ram usage:       88 bytes
 10910 ;; Hardware stack levels used:    1
 10911 ;; Hardware stack levels required when called:   10
 10912 ;; This function calls:
 10913 ;;		_UARTTransmitText
 10914 ;;		_arp_send
 10915 ;;		_ethernetController_getMacAddress
 10916 ;;		_ipAdressToString
 10917 ;;		_ipv4_cmp
 10918 ;;		_ipv4_getIPSourceAddress
 10919 ;;		_macToString
 10920 ;; This function is called by:
 10921 ;;		_arp_handleNewPacket
 10922 ;; This function uses a non-reentrant model
 10923 ;;
 10924                           
 10925                           	psect	text32
 10926  003144                     __ptext32:
 10927                           	opt stack 0
 10928  003144                     _arp_sendReply:
 10929                           	opt stack 17
 10930                           
 10931                           ;arp.c: 204: if (request.operation != ARP_REQUEST)
 10932                           
 10933                           ;incstack = 0
 10934  003144  0101               	movlb	1	; () banked
 10935  003146  0506               	decf	(arp_sendReply@request+6)& (0+255),w,b
 10936  003148  1107               	iorwf	(arp_sendReply@request+7)& (0+255),w,b
 10937  00314A  A4D8               	btfss	status,2,c
 10938  00314C  0012               	return	
 10939                           
 10940                           ; BSR set to: 1
 10941                           ;arp.c: 207: ipv4_address_t myIP = ipv4_getIPSourceAddress();
 10942                           
 10943                           ; BSR set to: 1
 10944                           
 10945                           ; BSR set to: 1
 10946                           ;arp.c: 205: return;
 10947  00314E  EC73  F02B         	call	_ipv4_getIPSourceAddress	;wreg free
 10948  003152  C060  F134         	movff	?_ipv4_getIPSourceAddress,arp_sendReply@myIP
 10949  003156  C061  F135         	movff	?_ipv4_getIPSourceAddress+1,arp_sendReply@myIP+1
 10950  00315A  C062  F136         	movff	?_ipv4_getIPSourceAddress+2,arp_sendReply@myIP+2
 10951  00315E  C063  F137         	movff	?_ipv4_getIPSourceAddress+3,arp_sendReply@myIP+3
 10952                           
 10953                           ;arp.c: 208: if (!(ipv4_cmp(&request.targetIPAddress, &myIP)))
 10954  003162  0E18               	movlw	low (arp_sendReply@request+24)
 10955  003164  0100               	movlb	0	; () banked
 10956  003166  6F60               	movwf	ipv4_cmp@a& (0+255),b
 10957  003168  0E01               	movlw	high (arp_sendReply@request+24)
 10958  00316A  6F61               	movwf	(ipv4_cmp@a+1)& (0+255),b
 10959  00316C  0E34               	movlw	low arp_sendReply@myIP
 10960  00316E  6F62               	movwf	ipv4_cmp@b& (0+255),b
 10961  003170  0E01               	movlw	high arp_sendReply@myIP
 10962  003172  6F63               	movwf	(ipv4_cmp@b+1)& (0+255),b
 10963  003174  ECAE  F028         	call	_ipv4_cmp	;wreg free
 10964  003178  0100               	movlb	0	; () banked
 10965  00317A  A0D8               	btfss	status,0,c
 10966  00317C  0012               	return	
 10967                           
 10968                           ; BSR set to: 0
 10969                           ;arp.c: 211: arp_message_t reply;
 10970                           ;arp.c: 212: ipv4_address_t senderIP;
 10971                           ;arp.c: 213: ipv4_address_t targetIP;
 10972                           ;arp.c: 214: macaddress_t senderMAC;
 10973                           ;arp.c: 215: macaddress_t targetMAC;
 10974                           ;arp.c: 217: senderMAC = ethernetController_getMacAddress();
 10975                           
 10976                           ; BSR set to: 0
 10977                           
 10978                           ; BSR set to: 0
 10979                           ;arp.c: 209: return;
 10980  00317E  EC05  F025         	call	_ethernetController_getMacAddress	;wreg free
 10981  003182  EE21  F020         	lfsr	2,arp_sendReply@senderMAC
 10982  003186  0E05               	movlw	5
 10983  003188                     u11021:
 10984  003188  CFEB FFDB          	movff	plusw0,plusw2
 10985  00318C  06E8               	decf	wreg,f,c
 10986  00318E  E2FC               	bc	u11021
 10987                           
 10988                           ;arp.c: 218: targetMAC = request.senderMACAddress;
 10989  003190  EE21  F008         	lfsr	2,arp_sendReply@request+8
 10990  003194  EE11  F026         	lfsr	1,arp_sendReply@targetMAC
 10991  003198  0E05               	movlw	5
 10992  00319A                     u11031:
 10993  00319A  CFDB FFE3          	movff	plusw2,plusw1
 10994  00319E  06E8               	decf	wreg,f,c
 10995  0031A0  E2FC               	bc	u11031
 10996                           
 10997                           ;arp.c: 219: senderIP = ipv4_getIPSourceAddress();
 10998  0031A2  EC73  F02B         	call	_ipv4_getIPSourceAddress	;wreg free
 10999  0031A6  C060  F12C         	movff	?_ipv4_getIPSourceAddress,arp_sendReply@senderIP
 11000  0031AA  C061  F12D         	movff	?_ipv4_getIPSourceAddress+1,arp_sendReply@senderIP+1
 11001  0031AE  C062  F12E         	movff	?_ipv4_getIPSourceAddress+2,arp_sendReply@senderIP+2
 11002  0031B2  C063  F12F         	movff	?_ipv4_getIPSourceAddress+3,arp_sendReply@senderIP+3
 11003                           
 11004                           ;arp.c: 220: targetIP = request.senderIPAddress;
 11005  0031B6  C10E  F130         	movff	arp_sendReply@request+14,arp_sendReply@targetIP
 11006  0031BA  C10F  F131         	movff	arp_sendReply@request+15,arp_sendReply@targetIP+1
 11007  0031BE  C110  F132         	movff	arp_sendReply@request+16,arp_sendReply@targetIP+2
 11008  0031C2  C111  F133         	movff	arp_sendReply@request+17,arp_sendReply@targetIP+3
 11009                           
 11010                           ;arp.c: 222: reply.hlen = 6u;
 11011  0031C6  0E06               	movlw	6
 11012  0031C8  0101               	movlb	1	; () banked
 11013  0031CA  6F3C               	movwf	(arp_sendReply@reply+4)& (0+255),b
 11014                           
 11015                           ; BSR set to: 1
 11016                           ;arp.c: 223: reply.plen = 4u;
 11017  0031CC  0E04               	movlw	4
 11018  0031CE  6F3D               	movwf	(arp_sendReply@reply+5)& (0+255),b
 11019                           
 11020                           ; BSR set to: 1
 11021                           ;arp.c: 224: reply.htype = ARP_HTYPE_ETHERNET;
 11022  0031D0  0E00               	movlw	0
 11023  0031D2  6F39               	movwf	(arp_sendReply@reply+1)& (0+255),b
 11024  0031D4  0E01               	movlw	1
 11025  0031D6  6F38               	movwf	arp_sendReply@reply& (0+255),b
 11026                           
 11027                           ; BSR set to: 1
 11028                           ;arp.c: 225: reply.ptype = ARP_PTYPE_IPv4;
 11029  0031D8  0E08               	movlw	8
 11030  0031DA  6F3B               	movwf	(arp_sendReply@reply+3)& (0+255),b
 11031  0031DC  0E00               	movlw	0
 11032  0031DE  6F3A               	movwf	(arp_sendReply@reply+2)& (0+255),b
 11033                           
 11034                           ; BSR set to: 1
 11035                           ;arp.c: 226: reply.operation = ARP_REPLY;
 11036  0031E0  0E00               	movlw	0
 11037  0031E2  6F3F               	movwf	(arp_sendReply@reply+7)& (0+255),b
 11038  0031E4  0E02               	movlw	2
 11039  0031E6  6F3E               	movwf	(arp_sendReply@reply+6)& (0+255),b
 11040                           
 11041                           ; BSR set to: 1
 11042                           ;arp.c: 227: reply.senderIPAddress = senderIP;
 11043  0031E8  C12C  F146         	movff	arp_sendReply@senderIP,arp_sendReply@reply+14
 11044  0031EC  C12D  F147         	movff	arp_sendReply@senderIP+1,arp_sendReply@reply+15
 11045  0031F0  C12E  F148         	movff	arp_sendReply@senderIP+2,arp_sendReply@reply+16
 11046  0031F4  C12F  F149         	movff	arp_sendReply@senderIP+3,arp_sendReply@reply+17
 11047                           
 11048                           ; BSR set to: 1
 11049                           ;arp.c: 228: reply.senderMACAddress = senderMAC;
 11050  0031F8  EE21  F020         	lfsr	2,arp_sendReply@senderMAC
 11051  0031FC  EE11  F040         	lfsr	1,arp_sendReply@reply+8
 11052  003200  0E05               	movlw	5
 11053  003202                     u11041:
 11054  003202  CFDB FFE3          	movff	plusw2,plusw1
 11055  003206  06E8               	decf	wreg,f,c
 11056  003208  E2FC               	bc	u11041
 11057                           
 11058                           ; BSR set to: 1
 11059                           ;arp.c: 229: reply.targetIPAddress = targetIP;
 11060  00320A  C130  F150         	movff	arp_sendReply@targetIP,arp_sendReply@reply+24
 11061  00320E  C131  F151         	movff	arp_sendReply@targetIP+1,arp_sendReply@reply+25
 11062  003212  C132  F152         	movff	arp_sendReply@targetIP+2,arp_sendReply@reply+26
 11063  003216  C133  F153         	movff	arp_sendReply@targetIP+3,arp_sendReply@reply+27
 11064                           
 11065                           ; BSR set to: 1
 11066                           ;arp.c: 230: reply.targetMACAddress = targetMAC;
 11067  00321A  EE21  F026         	lfsr	2,arp_sendReply@targetMAC
 11068  00321E  EE11  F04A         	lfsr	1,arp_sendReply@reply+18
 11069  003222  0E05               	movlw	5
 11070  003224                     u11051:
 11071  003224  CFDB FFE3          	movff	plusw2,plusw1
 11072  003228  06E8               	decf	wreg,f,c
 11073  00322A  E2FC               	bc	u11051
 11074                           
 11075                           ; BSR set to: 1
 11076                           ;arp.c: 232: arp_send(reply);
 11077  00322C  EE21  F038         	lfsr	2,arp_sendReply@reply
 11078  003230  EE00  F0A7         	lfsr	0,arp_send@arp
 11079  003234  0E1F               	movlw	31
 11080  003236                     u11061:
 11081  003236  CFDB FFEB          	movff	plusw2,plusw0
 11082  00323A  06E8               	decf	wreg,f,c
 11083  00323C  E2FC               	bc	u11061
 11084  00323E  EC30  F00E         	call	_arp_send	;wreg free
 11085                           
 11086                           ;arp.c: 234: UARTTransmitText("[Reply sent to ");
 11087  003242  0EC9               	movlw	low STR_77
 11088  003244  0100               	movlb	0	; () banked
 11089  003246  6F98               	movwf	UARTTransmitText@str& (0+255),b
 11090  003248  0E7E               	movlw	high STR_77
 11091  00324A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 11092  00324C  EC09  F027         	call	_UARTTransmitText	;wreg free
 11093                           
 11094                           ;arp.c: 235: UARTTransmitText(macToString(reply.targetMACAddress));
 11095  003250  EE21  F04A         	lfsr	2,arp_sendReply@reply+18
 11096  003254  EE00  F07A         	lfsr	0,macToString@addr
 11097  003258  0E05               	movlw	5
 11098  00325A                     u11071:
 11099  00325A  CFDB FFEB          	movff	plusw2,plusw0
 11100  00325E  06E8               	decf	wreg,f,c
 11101  003260  E2FC               	bc	u11071
 11102  003262  EC8D  F01D         	call	_macToString	;wreg free
 11103  003266  C07A  F098         	movff	?_macToString,UARTTransmitText@str
 11104  00326A  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
 11105  00326E  EC09  F027         	call	_UARTTransmitText	;wreg free
 11106                           
 11107                           ;arp.c: 236: UARTTransmitText(", ");
 11108  003272  0E32               	movlw	low (STR_47+17)
 11109  003274  0100               	movlb	0	; () banked
 11110  003276  6F98               	movwf	UARTTransmitText@str& (0+255),b
 11111  003278  0E7E               	movlw	high (STR_47+17)
 11112  00327A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 11113  00327C  EC09  F027         	call	_UARTTransmitText	;wreg free
 11114                           
 11115                           ;arp.c: 237: UARTTransmitText(ipAdressToString(reply.targetIPAddress));
 11116  003280  C150  F073         	movff	arp_sendReply@reply+24,ipAdressToString@ip
 11117  003284  C151  F074         	movff	arp_sendReply@reply+25,ipAdressToString@ip+1
 11118  003288  C152  F075         	movff	arp_sendReply@reply+26,ipAdressToString@ip+2
 11119  00328C  C153  F076         	movff	arp_sendReply@reply+27,ipAdressToString@ip+3
 11120  003290  ECC9  F013         	call	_ipAdressToString	;wreg free
 11121  003294  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
 11122  003298  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
 11123  00329C  EC09  F027         	call	_UARTTransmitText	;wreg free
 11124                           
 11125                           ;arp.c: 238: UARTTransmitText("]");
 11126  0032A0  0EFA               	movlw	low (STR_19+1)
 11127  0032A2  0100               	movlb	0	; () banked
 11128  0032A4  6F98               	movwf	UARTTransmitText@str& (0+255),b
 11129  0032A6  0E7F               	movlw	high (STR_19+1)
 11130  0032A8  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 11131  0032AA  EC09  F027         	call	_UARTTransmitText	;wreg free
 11132  0032AE  0012               	return		;funcret
 11133  0032B0                     __end_of_arp_sendReply:
 11134                           	opt stack 0
 11135                           tblptru	equ	0xFF8
 11136                           tblptrh	equ	0xFF7
 11137                           tblptrl	equ	0xFF6
 11138                           tablat	equ	0xFF5
 11139                           prodh	equ	0xFF4
 11140                           prodl	equ	0xFF3
 11141                           intcon	equ	0xFF2
 11142                           intcon3	equ	0xFF0
 11143                           indf0	equ	0xFEF
 11144                           postinc0	equ	0xFEE
 11145                           plusw0	equ	0xFEB
 11146                           fsr0h	equ	0xFEA
 11147                           fsr0l	equ	0xFE9
 11148                           wreg	equ	0xFE8
 11149                           indf1	equ	0xFE7
 11150                           postinc1	equ	0xFE6
 11151                           postdec1	equ	0xFE5
 11152                           plusw1	equ	0xFE3
 11153                           fsr1h	equ	0xFE2
 11154                           fsr1l	equ	0xFE1
 11155                           indf2	equ	0xFDF
 11156                           postinc2	equ	0xFDE
 11157                           postdec2	equ	0xFDD
 11158                           plusw2	equ	0xFDB
 11159                           fsr2h	equ	0xFDA
 11160                           fsr2l	equ	0xFD9
 11161                           status	equ	0xFD8
 11162                           
 11163 ;; *************** function _ipv4_getIPSourceAddress *****************
 11164 ;; Defined at:
 11165 ;;		line 227 in file "src/stack/protocols/ipv4.c"
 11166 ;; Parameters:    Size  Location     Type
 11167 ;;		None
 11168 ;; Auto vars:     Size  Location     Type
 11169 ;;		None
 11170 ;; Return value:  Size  Location     Type
 11171 ;;                  4    0[BANK0 ] struct ipv4_address
 11172 ;; Registers used:
 11173 ;;		None
 11174 ;; Tracked objects:
 11175 ;;		On entry : 0/0
 11176 ;;		On exit  : 0/0
 11177 ;;		Unchanged: 0/0
 11178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11179 ;;      Params:         0       4       0       0       0       0       0       0       0
 11180 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11181 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11182 ;;      Totals:         0       4       0       0       0       0       0       0       0
 11183 ;;Total ram usage:        4 bytes
 11184 ;; Hardware stack levels used:    1
 11185 ;; Hardware stack levels required when called:    4
 11186 ;; This function calls:
 11187 ;;		Nothing
 11188 ;; This function is called by:
 11189 ;;		_main
 11190 ;;		_arp_sendReply
 11191 ;; This function uses a non-reentrant model
 11192 ;;
 11193                           
 11194                           	psect	text33
 11195  0056E6                     __ptext33:
 11196                           	opt stack 0
 11197  0056E6                     _ipv4_getIPSourceAddress:
 11198                           	opt stack 26
 11199                           
 11200                           ;ipv4.c: 228: return ipSource;
 11201                           
 11202                           ;incstack = 0
 11203  0056E6  C1A4  F060         	movff	_ipSource,?_ipv4_getIPSourceAddress
 11204  0056EA  C1A5  F061         	movff	_ipSource+1,?_ipv4_getIPSourceAddress+1
 11205  0056EE  C1A6  F062         	movff	_ipSource+2,?_ipv4_getIPSourceAddress+2
 11206  0056F2  C1A7  F063         	movff	_ipSource+3,?_ipv4_getIPSourceAddress+3
 11207  0056F6  0012               	return		;funcret
 11208  0056F8                     __end_of_ipv4_getIPSourceAddress:
 11209                           	opt stack 0
 11210                           tblptru	equ	0xFF8
 11211                           tblptrh	equ	0xFF7
 11212                           tblptrl	equ	0xFF6
 11213                           tablat	equ	0xFF5
 11214                           prodh	equ	0xFF4
 11215                           prodl	equ	0xFF3
 11216                           intcon	equ	0xFF2
 11217                           intcon3	equ	0xFF0
 11218                           indf0	equ	0xFEF
 11219                           postinc0	equ	0xFEE
 11220                           plusw0	equ	0xFEB
 11221                           fsr0h	equ	0xFEA
 11222                           fsr0l	equ	0xFE9
 11223                           wreg	equ	0xFE8
 11224                           indf1	equ	0xFE7
 11225                           postinc1	equ	0xFE6
 11226                           postdec1	equ	0xFE5
 11227                           plusw1	equ	0xFE3
 11228                           fsr1h	equ	0xFE2
 11229                           fsr1l	equ	0xFE1
 11230                           indf2	equ	0xFDF
 11231                           postinc2	equ	0xFDE
 11232                           postdec2	equ	0xFDD
 11233                           plusw2	equ	0xFDB
 11234                           fsr2h	equ	0xFDA
 11235                           fsr2l	equ	0xFD9
 11236                           status	equ	0xFD8
 11237                           
 11238 ;; *************** function _arp_parseFromRXBuffer *****************
 11239 ;; Defined at:
 11240 ;;		line 64 in file "src/stack/protocols/arp.c"
 11241 ;; Parameters:    Size  Location     Type
 11242 ;;  frame           2   20[BANK0 ] PTR struct ethernetFrame
 11243 ;;		 -> stack(135), 
 11244 ;; Auto vars:     Size  Location     Type
 11245 ;;  i               1   58[BANK0 ] unsigned char 
 11246 ;;  i               1   57[BANK0 ] unsigned char 
 11247 ;;  i               1   56[BANK0 ] unsigned char 
 11248 ;;  i               1   55[BANK0 ] unsigned char 
 11249 ;;  arp            32   61[BANK0 ] struct arp_message
 11250 ;;  offset          2   59[BANK0 ] const unsigned int 
 11251 ;; Return value:  Size  Location     Type
 11252 ;;                  32   20[BANK0 ] struct arp_message
 11253 ;; Registers used:
 11254 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11255 ;; Tracked objects:
 11256 ;;		On entry : 0/0
 11257 ;;		On exit  : 0/0
 11258 ;;		Unchanged: 0/0
 11259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11260 ;;      Params:         0      32       0       0       0       0       0       0       0
 11261 ;;      Locals:         0      38       0       0       0       0       0       0       0
 11262 ;;      Temps:          0       3       0       0       0       0       0       0       0
 11263 ;;      Totals:         0      73       0       0       0       0       0       0       0
 11264 ;;Total ram usage:       73 bytes
 11265 ;; Hardware stack levels used:    1
 11266 ;; Hardware stack levels required when called:    8
 11267 ;; This function calls:
 11268 ;;		_ethernetController_streamFromRXBuffer
 11269 ;;		_ipv4_cmp
 11270 ;;		_ipv4_isAllZero
 11271 ;;		_mac_cmp
 11272 ;;		_mac_isAllZero
 11273 ;; This function is called by:
 11274 ;;		_arp_handleNewPacket
 11275 ;; This function uses a non-reentrant model
 11276 ;;
 11277                           
 11278                           	psect	text34
 11279  000F72                     __ptext34:
 11280                           	opt stack 0
 11281  000F72                     _arp_parseFromRXBuffer:
 11282                           	opt stack 19
 11283                           
 11284                           ;arp.c: 65: arp_message_t arp;
 11285                           ;arp.c: 66: uint16_t const offset = 22;
 11286                           
 11287                           ;incstack = 0
 11288  000F72  0E00               	movlw	0
 11289  000F74  0100               	movlb	0	; () banked
 11290  000F76  6F9C               	movwf	(arp_parseFromRXBuffer@offset+1)& (0+255),b
 11291  000F78  0E16               	movlw	22
 11292  000F7A  6F9B               	movwf	arp_parseFromRXBuffer@offset& (0+255),b
 11293                           
 11294                           ; BSR set to: 0
 11295                           ;arp.c: 68: ethernetController_streamFromRXBuffer(0, frame->memory.start + offset);
 11296  000F7C  EE20 F010          	lfsr	2,16
 11297  000F80  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 11298  000F82  26D9               	addwf	fsr2l,f,c
 11299  000F84  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 11300  000F86  22DA               	addwfc	fsr2h,f,c
 11301  000F88  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 11302  000F8C  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 11303  000F90  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 11304  000F92  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 11305  000F94  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 11306  000F96  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 11307  000F98  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 11308  000F9A  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 11309  000F9C  0E00               	movlw	0
 11310  000F9E  EC83  F026         	call	_ethernetController_streamFromRXBuffer
 11311                           
 11312                           ;arp.c: 71: arp.htype = (ethernetController_streamFromRXBuffer(1, frame->memory.start + 
      +                          offset) << 8);
 11313  000FA2  0100               	movlb	0	; () banked
 11314  000FA4  EE20 F010          	lfsr	2,16
 11315  000FA8  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 11316  000FAA  26D9               	addwf	fsr2l,f,c
 11317  000FAC  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 11318  000FAE  22DA               	addwfc	fsr2h,f,c
 11319  000FB0  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 11320  000FB4  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 11321  000FB8  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 11322  000FBA  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 11323  000FBC  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 11324  000FBE  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 11325  000FC0  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 11326  000FC2  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 11327  000FC4  0E01               	movlw	1
 11328  000FC6  EC83  F026         	call	_ethernetController_streamFromRXBuffer
 11329  000FCA  0100               	movlb	0	; () banked
 11330  000FCC  6F9E               	movwf	(arp_parseFromRXBuffer@arp+1)& (0+255),b
 11331  000FCE  6B9D               	clrf	arp_parseFromRXBuffer@arp& (0+255),b
 11332                           
 11333                           ; BSR set to: 0
 11334                           ;arp.c: 72: arp.htype |= ethernetController_streamFromRXBuffer(1, frame->memory.start + 
      +                          offset);
 11335  000FD0  EE20 F010          	lfsr	2,16
 11336  000FD4  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 11337  000FD6  26D9               	addwf	fsr2l,f,c
 11338  000FD8  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 11339  000FDA  22DA               	addwfc	fsr2h,f,c
 11340  000FDC  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 11341  000FE0  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 11342  000FE4  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 11343  000FE6  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 11344  000FE8  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 11345  000FEA  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 11346  000FEC  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 11347  000FEE  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 11348  000FF0  0E01               	movlw	1
 11349  000FF2  EC83  F026         	call	_ethernetController_streamFromRXBuffer
 11350  000FF6  0100               	movlb	0	; () banked
 11351  000FF8  6F96               	movwf	(??_arp_parseFromRXBuffer+2)& (0+255),b
 11352  000FFA  5196               	movf	(??_arp_parseFromRXBuffer+2)& (0+255),w,b
 11353  000FFC  139D               	iorwf	arp_parseFromRXBuffer@arp& (0+255),f,b
 11354                           
 11355                           ; BSR set to: 0
 11356                           ;arp.c: 74: arp.ptype = (ethernetController_streamFromRXBuffer(1, frame->memory.start + 
      +                          offset) << 8);
 11357  000FFE  EE20 F010          	lfsr	2,16
 11358  001002  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 11359  001004  26D9               	addwf	fsr2l,f,c
 11360  001006  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 11361  001008  22DA               	addwfc	fsr2h,f,c
 11362  00100A  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 11363  00100E  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 11364  001012  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 11365  001014  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 11366  001016  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 11367  001018  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 11368  00101A  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 11369  00101C  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 11370  00101E  0E01               	movlw	1
 11371  001020  EC83  F026         	call	_ethernetController_streamFromRXBuffer
 11372  001024  0100               	movlb	0	; () banked
 11373  001026  6FA0               	movwf	(arp_parseFromRXBuffer@arp+3)& (0+255),b
 11374  001028  6B9F               	clrf	(arp_parseFromRXBuffer@arp+2)& (0+255),b
 11375                           
 11376                           ; BSR set to: 0
 11377                           ;arp.c: 75: arp.ptype |= ethernetController_streamFromRXBuffer(1, frame->memory.start + 
      +                          offset);
 11378  00102A  EE20 F010          	lfsr	2,16
 11379  00102E  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 11380  001030  26D9               	addwf	fsr2l,f,c
 11381  001032  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 11382  001034  22DA               	addwfc	fsr2h,f,c
 11383  001036  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 11384  00103A  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 11385  00103E  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 11386  001040  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 11387  001042  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 11388  001044  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 11389  001046  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 11390  001048  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 11391  00104A  0E01               	movlw	1
 11392  00104C  EC83  F026         	call	_ethernetController_streamFromRXBuffer
 11393  001050  0100               	movlb	0	; () banked
 11394  001052  6F96               	movwf	(??_arp_parseFromRXBuffer+2)& (0+255),b
 11395  001054  5196               	movf	(??_arp_parseFromRXBuffer+2)& (0+255),w,b
 11396  001056  139F               	iorwf	(arp_parseFromRXBuffer@arp+2)& (0+255),f,b
 11397                           
 11398                           ; BSR set to: 0
 11399                           ;arp.c: 77: arp.hlen = ethernetController_streamFromRXBuffer(1, frame->memory.start + of
      +                          fset);
 11400  001058  EE20 F010          	lfsr	2,16
 11401  00105C  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 11402  00105E  26D9               	addwf	fsr2l,f,c
 11403  001060  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 11404  001062  22DA               	addwfc	fsr2h,f,c
 11405  001064  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 11406  001068  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 11407  00106C  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 11408  00106E  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 11409  001070  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 11410  001072  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 11411  001074  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 11412  001076  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 11413  001078  0E01               	movlw	1
 11414  00107A  EC83  F026         	call	_ethernetController_streamFromRXBuffer
 11415  00107E  0100               	movlb	0	; () banked
 11416  001080  6FA1               	movwf	(arp_parseFromRXBuffer@arp+4)& (0+255),b
 11417                           
 11418                           ; BSR set to: 0
 11419                           ;arp.c: 78: arp.plen = ethernetController_streamFromRXBuffer(1, frame->memory.start + of
      +                          fset);
 11420  001082  EE20 F010          	lfsr	2,16
 11421  001086  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 11422  001088  26D9               	addwf	fsr2l,f,c
 11423  00108A  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 11424  00108C  22DA               	addwfc	fsr2h,f,c
 11425  00108E  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 11426  001092  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 11427  001096  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 11428  001098  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 11429  00109A  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 11430  00109C  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 11431  00109E  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 11432  0010A0  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 11433  0010A2  0E01               	movlw	1
 11434  0010A4  EC83  F026         	call	_ethernetController_streamFromRXBuffer
 11435  0010A8  0100               	movlb	0	; () banked
 11436  0010AA  6FA2               	movwf	(arp_parseFromRXBuffer@arp+5)& (0+255),b
 11437                           
 11438                           ; BSR set to: 0
 11439                           ;arp.c: 80: arp.operation = (ethernetController_streamFromRXBuffer(1, frame->memory.star
      +                          t + offset) << 8);
 11440  0010AC  EE20 F010          	lfsr	2,16
 11441  0010B0  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 11442  0010B2  26D9               	addwf	fsr2l,f,c
 11443  0010B4  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 11444  0010B6  22DA               	addwfc	fsr2h,f,c
 11445  0010B8  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 11446  0010BC  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 11447  0010C0  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 11448  0010C2  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 11449  0010C4  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 11450  0010C6  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 11451  0010C8  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 11452  0010CA  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 11453  0010CC  0E01               	movlw	1
 11454  0010CE  EC83  F026         	call	_ethernetController_streamFromRXBuffer
 11455  0010D2  0100               	movlb	0	; () banked
 11456  0010D4  6FA4               	movwf	(arp_parseFromRXBuffer@arp+7)& (0+255),b
 11457  0010D6  6BA3               	clrf	(arp_parseFromRXBuffer@arp+6)& (0+255),b
 11458                           
 11459                           ; BSR set to: 0
 11460                           ;arp.c: 81: arp.operation |= ethernetController_streamFromRXBuffer(1, frame->memory.star
      +                          t + offset);
 11461  0010D8  EE20 F010          	lfsr	2,16
 11462  0010DC  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 11463  0010DE  26D9               	addwf	fsr2l,f,c
 11464  0010E0  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 11465  0010E2  22DA               	addwfc	fsr2h,f,c
 11466  0010E4  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 11467  0010E8  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 11468  0010EC  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 11469  0010EE  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 11470  0010F0  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 11471  0010F2  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 11472  0010F4  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 11473  0010F6  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 11474  0010F8  0E01               	movlw	1
 11475  0010FA  EC83  F026         	call	_ethernetController_streamFromRXBuffer
 11476  0010FE  0100               	movlb	0	; () banked
 11477  001100  6F96               	movwf	(??_arp_parseFromRXBuffer+2)& (0+255),b
 11478  001102  5196               	movf	(??_arp_parseFromRXBuffer+2)& (0+255),w,b
 11479  001104  13A3               	iorwf	(arp_parseFromRXBuffer@arp+6)& (0+255),f,b
 11480                           
 11481                           ; BSR set to: 0
 11482                           ;arp.c: 84: for (uint8_t i = 0; i < arp.hlen; i++)
 11483  001106  0E00               	movlw	0
 11484  001108  6F97               	movwf	arp_parseFromRXBuffer@i& (0+255),b
 11485  00110A  D024               	goto	l933
 11486  00110C                     
 11487                           ; BSR set to: 0
 11488                           ;arp.c: 85: arp.senderMACAddress.address[i] = ethernetController_streamFromRXBuffer(1, f
      +                          rame->memory.start + offset);
 11489                           
 11490                           ; BSR set to: 0
 11491  00110C  EE20 F010          	lfsr	2,16
 11492  001110  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 11493  001112  26D9               	addwf	fsr2l,f,c
 11494  001114  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 11495  001116  22DA               	addwfc	fsr2h,f,c
 11496  001118  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 11497  00111C  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 11498  001120  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 11499  001122  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 11500  001124  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 11501  001126  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 11502  001128  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 11503  00112A  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 11504  00112C  0E01               	movlw	1
 11505  00112E  EC83  F026         	call	_ethernetController_streamFromRXBuffer
 11506  001132  0100               	movlb	0	; () banked
 11507  001134  6F96               	movwf	(??_arp_parseFromRXBuffer+2)& (0+255),b
 11508  001136  5197               	movf	arp_parseFromRXBuffer@i& (0+255),w,b
 11509  001138  0D01               	mullw	1
 11510  00113A  0E08               	movlw	8
 11511  00113C  26F3               	addwf	prodl,f,c
 11512  00113E  0E00               	movlw	0
 11513  001140  22F4               	addwfc	prodh,f,c
 11514  001142  0E9D               	movlw	low arp_parseFromRXBuffer@arp
 11515  001144  24F3               	addwf	prodl,w,c
 11516  001146  6ED9               	movwf	fsr2l,c
 11517  001148  0E00               	movlw	high arp_parseFromRXBuffer@arp
 11518  00114A  20F4               	addwfc	prodh,w,c
 11519  00114C  6EDA               	movwf	fsr2h,c
 11520  00114E  C096  FFDF         	movff	??_arp_parseFromRXBuffer+2,indf2
 11521                           
 11522                           ; BSR set to: 0
 11523  001152  2B97               	incf	arp_parseFromRXBuffer@i& (0+255),f,b
 11524  001154                     l933:
 11525                           
 11526                           ; BSR set to: 0
 11527                           
 11528                           ; BSR set to: 0
 11529  001154  51A1               	movf	(arp_parseFromRXBuffer@arp+4)& (0+255),w,b
 11530  001156  5D97               	subwf	arp_parseFromRXBuffer@i& (0+255),w,b
 11531  001158  A0D8               	btfss	status,0,c
 11532  00115A  D7D8               	goto	l934
 11533                           
 11534                           ; BSR set to: 0
 11535                           ;arp.c: 86: for (uint8_t i = 0; i < arp.plen; i++)
 11536                           
 11537                           ; BSR set to: 0
 11538  00115C  0E00               	movlw	0
 11539  00115E  6F98               	movwf	arp_parseFromRXBuffer@i_3029& (0+255),b
 11540  001160  D024               	goto	l936
 11541  001162                     
 11542                           ; BSR set to: 0
 11543                           ;arp.c: 87: arp.senderIPAddress.address[i] = ethernetController_streamFromRXBuffer(1, fr
      +                          ame->memory.start + offset);
 11544                           
 11545                           ; BSR set to: 0
 11546  001162  EE20 F010          	lfsr	2,16
 11547  001166  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 11548  001168  26D9               	addwf	fsr2l,f,c
 11549  00116A  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 11550  00116C  22DA               	addwfc	fsr2h,f,c
 11551  00116E  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 11552  001172  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 11553  001176  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 11554  001178  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 11555  00117A  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 11556  00117C  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 11557  00117E  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 11558  001180  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 11559  001182  0E01               	movlw	1
 11560  001184  EC83  F026         	call	_ethernetController_streamFromRXBuffer
 11561  001188  0100               	movlb	0	; () banked
 11562  00118A  6F96               	movwf	(??_arp_parseFromRXBuffer+2)& (0+255),b
 11563  00118C  5198               	movf	arp_parseFromRXBuffer@i_3029& (0+255),w,b
 11564  00118E  0D01               	mullw	1
 11565  001190  0E0E               	movlw	14
 11566  001192  26F3               	addwf	prodl,f,c
 11567  001194  0E00               	movlw	0
 11568  001196  22F4               	addwfc	prodh,f,c
 11569  001198  0E9D               	movlw	low arp_parseFromRXBuffer@arp
 11570  00119A  24F3               	addwf	prodl,w,c
 11571  00119C  6ED9               	movwf	fsr2l,c
 11572  00119E  0E00               	movlw	high arp_parseFromRXBuffer@arp
 11573  0011A0  20F4               	addwfc	prodh,w,c
 11574  0011A2  6EDA               	movwf	fsr2h,c
 11575  0011A4  C096  FFDF         	movff	??_arp_parseFromRXBuffer+2,indf2
 11576                           
 11577                           ; BSR set to: 0
 11578  0011A8  2B98               	incf	arp_parseFromRXBuffer@i_3029& (0+255),f,b
 11579  0011AA                     l936:
 11580                           
 11581                           ; BSR set to: 0
 11582                           
 11583                           ; BSR set to: 0
 11584  0011AA  51A2               	movf	(arp_parseFromRXBuffer@arp+5)& (0+255),w,b
 11585  0011AC  5D98               	subwf	arp_parseFromRXBuffer@i_3029& (0+255),w,b
 11586  0011AE  A0D8               	btfss	status,0,c
 11587  0011B0  D7D8               	goto	l937
 11588                           
 11589                           ; BSR set to: 0
 11590                           ;arp.c: 89: for (uint8_t i = 0; i < arp.hlen; i++)
 11591                           
 11592                           ; BSR set to: 0
 11593  0011B2  0E00               	movlw	0
 11594  0011B4  6F99               	movwf	arp_parseFromRXBuffer@i_3030& (0+255),b
 11595  0011B6  D024               	goto	l939
 11596  0011B8                     
 11597                           ; BSR set to: 0
 11598                           ;arp.c: 90: arp.targetMACAddress.address[i] = ethernetController_streamFromRXBuffer(1, f
      +                          rame->memory.start + offset);
 11599                           
 11600                           ; BSR set to: 0
 11601  0011B8  EE20 F010          	lfsr	2,16
 11602  0011BC  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 11603  0011BE  26D9               	addwf	fsr2l,f,c
 11604  0011C0  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 11605  0011C2  22DA               	addwfc	fsr2h,f,c
 11606  0011C4  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 11607  0011C8  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 11608  0011CC  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 11609  0011CE  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 11610  0011D0  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 11611  0011D2  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 11612  0011D4  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 11613  0011D6  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 11614  0011D8  0E01               	movlw	1
 11615  0011DA  EC83  F026         	call	_ethernetController_streamFromRXBuffer
 11616  0011DE  0100               	movlb	0	; () banked
 11617  0011E0  6F96               	movwf	(??_arp_parseFromRXBuffer+2)& (0+255),b
 11618  0011E2  5199               	movf	arp_parseFromRXBuffer@i_3030& (0+255),w,b
 11619  0011E4  0D01               	mullw	1
 11620  0011E6  0E12               	movlw	18
 11621  0011E8  26F3               	addwf	prodl,f,c
 11622  0011EA  0E00               	movlw	0
 11623  0011EC  22F4               	addwfc	prodh,f,c
 11624  0011EE  0E9D               	movlw	low arp_parseFromRXBuffer@arp
 11625  0011F0  24F3               	addwf	prodl,w,c
 11626  0011F2  6ED9               	movwf	fsr2l,c
 11627  0011F4  0E00               	movlw	high arp_parseFromRXBuffer@arp
 11628  0011F6  20F4               	addwfc	prodh,w,c
 11629  0011F8  6EDA               	movwf	fsr2h,c
 11630  0011FA  C096  FFDF         	movff	??_arp_parseFromRXBuffer+2,indf2
 11631                           
 11632                           ; BSR set to: 0
 11633  0011FE  2B99               	incf	arp_parseFromRXBuffer@i_3030& (0+255),f,b
 11634  001200                     l939:
 11635                           
 11636                           ; BSR set to: 0
 11637                           
 11638                           ; BSR set to: 0
 11639  001200  51A1               	movf	(arp_parseFromRXBuffer@arp+4)& (0+255),w,b
 11640  001202  5D99               	subwf	arp_parseFromRXBuffer@i_3030& (0+255),w,b
 11641  001204  A0D8               	btfss	status,0,c
 11642  001206  D7D8               	goto	l940
 11643                           
 11644                           ; BSR set to: 0
 11645                           ;arp.c: 91: for (uint8_t i = 0; i < arp.plen; i++)
 11646                           
 11647                           ; BSR set to: 0
 11648  001208  0E00               	movlw	0
 11649  00120A  6F9A               	movwf	arp_parseFromRXBuffer@i_3031& (0+255),b
 11650  00120C  D024               	goto	l942
 11651  00120E                     
 11652                           ; BSR set to: 0
 11653                           ;arp.c: 92: arp.targetIPAddress.address[i] = ethernetController_streamFromRXBuffer(1, fr
      +                          ame->memory.start + offset);
 11654                           
 11655                           ; BSR set to: 0
 11656  00120E  EE20 F010          	lfsr	2,16
 11657  001212  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 11658  001214  26D9               	addwf	fsr2l,f,c
 11659  001216  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 11660  001218  22DA               	addwfc	fsr2h,f,c
 11661  00121A  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 11662  00121E  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 11663  001222  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 11664  001224  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 11665  001226  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 11666  001228  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 11667  00122A  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 11668  00122C  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 11669  00122E  0E01               	movlw	1
 11670  001230  EC83  F026         	call	_ethernetController_streamFromRXBuffer
 11671  001234  0100               	movlb	0	; () banked
 11672  001236  6F96               	movwf	(??_arp_parseFromRXBuffer+2)& (0+255),b
 11673  001238  519A               	movf	arp_parseFromRXBuffer@i_3031& (0+255),w,b
 11674  00123A  0D01               	mullw	1
 11675  00123C  0E18               	movlw	24
 11676  00123E  26F3               	addwf	prodl,f,c
 11677  001240  0E00               	movlw	0
 11678  001242  22F4               	addwfc	prodh,f,c
 11679  001244  0E9D               	movlw	low arp_parseFromRXBuffer@arp
 11680  001246  24F3               	addwf	prodl,w,c
 11681  001248  6ED9               	movwf	fsr2l,c
 11682  00124A  0E00               	movlw	high arp_parseFromRXBuffer@arp
 11683  00124C  20F4               	addwfc	prodh,w,c
 11684  00124E  6EDA               	movwf	fsr2h,c
 11685  001250  C096  FFDF         	movff	??_arp_parseFromRXBuffer+2,indf2
 11686                           
 11687                           ; BSR set to: 0
 11688  001254  2B9A               	incf	arp_parseFromRXBuffer@i_3031& (0+255),f,b
 11689  001256                     l942:
 11690                           
 11691                           ; BSR set to: 0
 11692                           
 11693                           ; BSR set to: 0
 11694  001256  51A2               	movf	(arp_parseFromRXBuffer@arp+5)& (0+255),w,b
 11695  001258  5D9A               	subwf	arp_parseFromRXBuffer@i_3031& (0+255),w,b
 11696  00125A  A0D8               	btfss	status,0,c
 11697  00125C  D7D8               	goto	l943
 11698                           
 11699                           ; BSR set to: 0
 11700                           ;arp.c: 94: ethernetController_streamFromRXBuffer(2, frame->memory.start + offset);
 11701                           
 11702                           ; BSR set to: 0
 11703  00125E  EE20 F010          	lfsr	2,16
 11704  001262  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 11705  001264  26D9               	addwf	fsr2l,f,c
 11706  001266  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 11707  001268  22DA               	addwfc	fsr2h,f,c
 11708  00126A  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 11709  00126E  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 11710  001272  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 11711  001274  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 11712  001276  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 11713  001278  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 11714  00127A  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 11715  00127C  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 11716  00127E  0E02               	movlw	2
 11717  001280  EC83  F026         	call	_ethernetController_streamFromRXBuffer
 11718                           
 11719                           ;arp.c: 96: if (ipv4_isAllZero(&arp.senderIPAddress)) {
 11720  001284  0EAB               	movlw	low (arp_parseFromRXBuffer@arp+14)
 11721  001286  0100               	movlb	0	; () banked
 11722  001288  6F60               	movwf	ipv4_isAllZero@ip& (0+255),b
 11723  00128A  0E00               	movlw	high (arp_parseFromRXBuffer@arp+14)
 11724  00128C  6F61               	movwf	(ipv4_isAllZero@ip+1)& (0+255),b
 11725  00128E  ECC8  F029         	call	_ipv4_isAllZero	;wreg free
 11726  001292  0100               	movlb	0	; () banked
 11727  001294  A0D8               	btfss	status,0,c
 11728  001296  D002               	goto	l945
 11729                           
 11730                           ; BSR set to: 0
 11731                           ;arp.c: 97: arp.fIsProbe = 1;
 11732  001298  83B9               	bsf	(arp_parseFromRXBuffer@arp+28)& (0+255),1,b
 11733  00129A  D03C               	goto	l949
 11734  00129C                     l945:
 11735                           
 11736                           ; BSR set to: 0
 11737                           ;arp.c: 100: arp.fIsProbe = 0;
 11738  00129C  93B9               	bcf	(arp_parseFromRXBuffer@arp+28)& (0+255),1,b
 11739                           
 11740                           ; BSR set to: 0
 11741                           ;arp.c: 102: if (ipv4_cmp(&arp.senderIPAddress, &arp.targetIPAddress) &&
 11742                           ;arp.c: 103: mac_isAllZero(&arp.targetMACAddress) &&
 11743                           ;arp.c: 104: arp.operation == ARP_REQUEST) {
 11744  00129E  0EAB               	movlw	low (arp_parseFromRXBuffer@arp+14)
 11745  0012A0  6F60               	movwf	ipv4_cmp@a& (0+255),b
 11746  0012A2  0E00               	movlw	high (arp_parseFromRXBuffer@arp+14)
 11747  0012A4  6F61               	movwf	(ipv4_cmp@a+1)& (0+255),b
 11748  0012A6  0EB5               	movlw	low (arp_parseFromRXBuffer@arp+24)
 11749  0012A8  6F62               	movwf	ipv4_cmp@b& (0+255),b
 11750  0012AA  0E00               	movlw	high (arp_parseFromRXBuffer@arp+24)
 11751  0012AC  6F63               	movwf	(ipv4_cmp@b+1)& (0+255),b
 11752  0012AE  ECAE  F028         	call	_ipv4_cmp	;wreg free
 11753  0012B2  0100               	movlb	0	; () banked
 11754  0012B4  A0D8               	btfss	status,0,c
 11755  0012B6  D00D               	goto	l947
 11756                           
 11757                           ; BSR set to: 0
 11758  0012B8  0EAF               	movlw	low (arp_parseFromRXBuffer@arp+18)
 11759  0012BA  6F60               	movwf	mac_isAllZero@mac& (0+255),b
 11760  0012BC  0E00               	movlw	high (arp_parseFromRXBuffer@arp+18)
 11761  0012BE  6F61               	movwf	(mac_isAllZero@mac+1)& (0+255),b
 11762  0012C0  ECB0  F029         	call	_mac_isAllZero	;wreg free
 11763  0012C4  0100               	movlb	0	; () banked
 11764  0012C6  A0D8               	btfss	status,0,c
 11765  0012C8  D004               	goto	l947
 11766                           
 11767                           ; BSR set to: 0
 11768  0012CA  05A3               	decf	(arp_parseFromRXBuffer@arp+6)& (0+255),w,b
 11769  0012CC  11A4               	iorwf	(arp_parseFromRXBuffer@arp+7)& (0+255),w,b
 11770  0012CE  B4D8               	btfsc	status,2,c
 11771  0012D0  D01F               	goto	u10930
 11772  0012D2                     l947:
 11773                           
 11774                           ; BSR set to: 0
 11775                           ;arp.c: 108: if (ipv4_cmp(&arp.senderIPAddress, &arp.targetIPAddress) &&
 11776                           ;arp.c: 109: mac_cmp(&arp.senderMACAddress, &arp.targetMACAddress) &&
 11777                           ;arp.c: 110: arp.operation == ARP_REPLY) {
 11778                           
 11779                           ; BSR set to: 0
 11780  0012D2  0EAB               	movlw	low (arp_parseFromRXBuffer@arp+14)
 11781  0012D4  6F60               	movwf	ipv4_cmp@a& (0+255),b
 11782  0012D6  0E00               	movlw	high (arp_parseFromRXBuffer@arp+14)
 11783  0012D8  6F61               	movwf	(ipv4_cmp@a+1)& (0+255),b
 11784  0012DA  0EB5               	movlw	low (arp_parseFromRXBuffer@arp+24)
 11785  0012DC  6F62               	movwf	ipv4_cmp@b& (0+255),b
 11786  0012DE  0E00               	movlw	high (arp_parseFromRXBuffer@arp+24)
 11787  0012E0  6F63               	movwf	(ipv4_cmp@b+1)& (0+255),b
 11788  0012E2  ECAE  F028         	call	_ipv4_cmp	;wreg free
 11789  0012E6  0100               	movlb	0	; () banked
 11790  0012E8  A0D8               	btfss	status,0,c
 11791  0012EA  D014               	goto	l949
 11792                           
 11793                           ; BSR set to: 0
 11794  0012EC  0EA5               	movlw	low (arp_parseFromRXBuffer@arp+8)
 11795  0012EE  6F60               	movwf	mac_cmp@a& (0+255),b
 11796  0012F0  0E00               	movlw	high (arp_parseFromRXBuffer@arp+8)
 11797  0012F2  6F61               	movwf	(mac_cmp@a+1)& (0+255),b
 11798  0012F4  0EAF               	movlw	low (arp_parseFromRXBuffer@arp+18)
 11799  0012F6  6F62               	movwf	mac_cmp@b& (0+255),b
 11800  0012F8  0E00               	movlw	high (arp_parseFromRXBuffer@arp+18)
 11801  0012FA  6F63               	movwf	(mac_cmp@b+1)& (0+255),b
 11802  0012FC  EC8D  F028         	call	_mac_cmp	;wreg free
 11803  001300  0100               	movlb	0	; () banked
 11804  001302  A0D8               	btfss	status,0,c
 11805  001304  D007               	goto	l949
 11806                           
 11807                           ; BSR set to: 0
 11808  001306  0E02               	movlw	2
 11809  001308  19A3               	xorwf	(arp_parseFromRXBuffer@arp+6)& (0+255),w,b
 11810  00130A  11A4               	iorwf	(arp_parseFromRXBuffer@arp+7)& (0+255),w,b
 11811  00130C  A4D8               	btfss	status,2,c
 11812  00130E  D002               	goto	l949
 11813  001310                     u10930:
 11814                           
 11815                           ; BSR set to: 0
 11816                           ;arp.c: 111: arp.fIsGratuitous = 1;
 11817  001310  81B9               	bsf	(arp_parseFromRXBuffer@arp+28)& (0+255),0,b
 11818                           
 11819                           ;arp.c: 112: } else {
 11820  001312  D001               	goto	l950
 11821  001314                     l949:
 11822                           
 11823                           ; BSR set to: 0
 11824                           ;arp.c: 113: arp.fIsGratuitous = 0;
 11825  001314  91B9               	bcf	(arp_parseFromRXBuffer@arp+28)& (0+255),0,b
 11826  001316                     l950:
 11827                           
 11828                           ; BSR set to: 0
 11829                           ;arp.c: 114: }
 11830                           ;arp.c: 115: }
 11831                           ;arp.c: 116: }
 11832                           ;arp.c: 119: if ((arp.htype != ARP_HTYPE_ETHERNET) ||
 11833                           ;arp.c: 120: (arp.ptype != ARP_PTYPE_IPv4) ||
 11834                           ;arp.c: 121: (arp.operation > 2) ||
 11835                           ;arp.c: 122: (arp.hlen != 6u) ||
 11836                           ;arp.c: 123: (arp.plen != 4u)) {
 11837                           
 11838                           ; BSR set to: 0
 11839                           
 11840                           ; BSR set to: 0
 11841                           
 11842                           ; BSR set to: 0
 11843  001316  059D               	decf	arp_parseFromRXBuffer@arp& (0+255),w,b
 11844  001318  119E               	iorwf	(arp_parseFromRXBuffer@arp+1)& (0+255),w,b
 11845  00131A  A4D8               	btfss	status,2,c
 11846  00131C  D013               	goto	u10980
 11847                           
 11848                           ; BSR set to: 0
 11849  00131E  0E08               	movlw	8
 11850  001320  19A0               	xorwf	(arp_parseFromRXBuffer@arp+3)& (0+255),w,b
 11851  001322  119F               	iorwf	(arp_parseFromRXBuffer@arp+2)& (0+255),w,b
 11852  001324  A4D8               	btfss	status,2,c
 11853  001326  D00E               	goto	u10980
 11854                           
 11855                           ; BSR set to: 0
 11856  001328  51A4               	movf	(arp_parseFromRXBuffer@arp+7)& (0+255),w,b
 11857  00132A  E10C               	bnz	l9319
 11858  00132C  0E03               	movlw	3
 11859  00132E  5DA3               	subwf	(arp_parseFromRXBuffer@arp+6)& (0+255),w,b
 11860  001330  B0D8               	btfsc	status,0,c
 11861  001332  D008               	goto	u10980
 11862                           
 11863                           ; BSR set to: 0
 11864  001334  0E06               	movlw	6
 11865  001336  19A1               	xorwf	(arp_parseFromRXBuffer@arp+4)& (0+255),w,b
 11866  001338  A4D8               	btfss	status,2,c
 11867  00133A  D004               	goto	u10980
 11868                           
 11869                           ; BSR set to: 0
 11870  00133C  0E04               	movlw	4
 11871  00133E  19A2               	xorwf	(arp_parseFromRXBuffer@arp+5)& (0+255),w,b
 11872  001340  B4D8               	btfsc	status,2,c
 11873  001342  D004               	goto	l951
 11874  001344                     u10980:
 11875  001344                     l9319:
 11876                           
 11877                           ; BSR set to: 0
 11878                           ;arp.c: 124: arp.err.code = ERROR_ARP_INVALID_VALUES;
 11879  001344  0E01               	movlw	1
 11880  001346  6FBC               	movwf	(arp_parseFromRXBuffer@arp+31)& (0+255),b
 11881  001348  0E94               	movlw	148
 11882  00134A  D003               	goto	L1
 11883  00134C                     l951:
 11884                           
 11885                           ; BSR set to: 0
 11886                           ;arp.c: 127: arp.err.code = (uint16_t)0;
 11887                           
 11888                           ; BSR set to: 0
 11889  00134C  0E00               	movlw	0
 11890  00134E  6FBC               	movwf	(arp_parseFromRXBuffer@arp+31)& (0+255),b
 11891  001350  0E00               	movlw	0
 11892  001352                     L1:
 11893  001352  6FBB               	movwf	(arp_parseFromRXBuffer@arp+30)& (0+255),b
 11894                           
 11895                           ;arp.c: 128: arp.err.module = ERROR_MODULE_ARP;
 11896  001354  0E03               	movlw	3
 11897  001356  6FBA               	movwf	(arp_parseFromRXBuffer@arp+29)& (0+255),b
 11898                           
 11899                           ; BSR set to: 0
 11900                           ;arp.c: 129: }
 11901                           ;arp.c: 131: return arp;
 11902                           
 11903                           ; BSR set to: 0
 11904  001358  EE20  F09D         	lfsr	2,arp_parseFromRXBuffer@arp
 11905  00135C  EE00  F074         	lfsr	0,?_arp_parseFromRXBuffer
 11906  001360  0E1F               	movlw	31
 11907  001362                     u10991:
 11908  001362  CFDB FFEB          	movff	plusw2,plusw0
 11909  001366  06E8               	decf	wreg,f,c
 11910  001368  E2FC               	bc	u10991
 11911  00136A  0012               	return	
 11912  00136C                     __end_of_arp_parseFromRXBuffer:
 11913                           	opt stack 0
 11914                           tblptru	equ	0xFF8
 11915                           tblptrh	equ	0xFF7
 11916                           tblptrl	equ	0xFF6
 11917                           tablat	equ	0xFF5
 11918                           prodh	equ	0xFF4
 11919                           prodl	equ	0xFF3
 11920                           intcon	equ	0xFF2
 11921                           intcon3	equ	0xFF0
 11922                           indf0	equ	0xFEF
 11923                           postinc0	equ	0xFEE
 11924                           plusw0	equ	0xFEB
 11925                           fsr0h	equ	0xFEA
 11926                           fsr0l	equ	0xFE9
 11927                           wreg	equ	0xFE8
 11928                           indf1	equ	0xFE7
 11929                           postinc1	equ	0xFE6
 11930                           postdec1	equ	0xFE5
 11931                           plusw1	equ	0xFE3
 11932                           fsr1h	equ	0xFE2
 11933                           fsr1l	equ	0xFE1
 11934                           indf2	equ	0xFDF
 11935                           postinc2	equ	0xFDE
 11936                           postdec2	equ	0xFDD
 11937                           plusw2	equ	0xFDB
 11938                           fsr2h	equ	0xFDA
 11939                           fsr2l	equ	0xFD9
 11940                           status	equ	0xFD8
 11941                           
 11942 ;; *************** function _mac_cmp *****************
 11943 ;; Defined at:
 11944 ;;		line 39 in file "src/eth/mac.c"
 11945 ;; Parameters:    Size  Location     Type
 11946 ;;  a               2    0[BANK0 ] PTR struct macaddress
 11947 ;;		 -> arp_parseFromRXBuffer@arp(32), 
 11948 ;;  b               2    2[BANK0 ] PTR struct macaddress
 11949 ;;		 -> arp_parseFromRXBuffer@arp(32), 
 11950 ;; Auto vars:     Size  Location     Type
 11951 ;;  i               1    6[BANK0 ] unsigned char 
 11952 ;; Return value:  Size  Location     Type
 11953 ;;		None               void
 11954 ;; Registers used:
 11955 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11956 ;; Tracked objects:
 11957 ;;		On entry : 0/0
 11958 ;;		On exit  : 0/0
 11959 ;;		Unchanged: 0/0
 11960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11961 ;;      Params:         0       4       0       0       0       0       0       0       0
 11962 ;;      Locals:         0       1       0       0       0       0       0       0       0
 11963 ;;      Temps:          0       2       0       0       0       0       0       0       0
 11964 ;;      Totals:         0       7       0       0       0       0       0       0       0
 11965 ;;Total ram usage:        7 bytes
 11966 ;; Hardware stack levels used:    1
 11967 ;; Hardware stack levels required when called:    4
 11968 ;; This function calls:
 11969 ;;		Nothing
 11970 ;; This function is called by:
 11971 ;;		_arp_parseFromRXBuffer
 11972 ;; This function uses a non-reentrant model
 11973 ;;
 11974                           
 11975                           	psect	text35
 11976  00511A                     __ptext35:
 11977                           	opt stack 0
 11978  00511A                     _mac_cmp:
 11979                           	opt stack 22
 11980                           
 11981                           ;mac.c: 40: for (uint8_t i = 0; i < 6; i++) {
 11982                           
 11983                           ; BSR set to: 0
 11984                           ;incstack = 0
 11985  00511A  0E00               	movlw	0
 11986  00511C  0100               	movlb	0	; () banked
 11987  00511E  6F66               	movwf	mac_cmp@i& (0+255),b
 11988  005120                     l8929:
 11989                           
 11990                           ; BSR set to: 0
 11991  005120  0E05               	movlw	5
 11992  005122  6566               	cpfsgt	mac_cmp@i& (0+255),b
 11993  005124  D001               	goto	l390
 11994  005126  D018               	goto	u10000
 11995  005128                     l390:
 11996                           
 11997                           ; BSR set to: 0
 11998                           ;mac.c: 41: if (a->address[i] != b->address[i])
 11999                           
 12000                           ; BSR set to: 0
 12001  005128  5166               	movf	mac_cmp@i& (0+255),w,b
 12002  00512A  0D01               	mullw	1
 12003  00512C  50F3               	movf	prodl,w,c
 12004  00512E  2562               	addwf	mac_cmp@b& (0+255),w,b
 12005  005130  6ED9               	movwf	fsr2l,c
 12006  005132  50F4               	movf	prodh,w,c
 12007  005134  2163               	addwfc	(mac_cmp@b+1)& (0+255),w,b
 12008  005136  6EDA               	movwf	fsr2h,c
 12009  005138  5166               	movf	mac_cmp@i& (0+255),w,b
 12010  00513A  0D01               	mullw	1
 12011  00513C  50F3               	movf	prodl,w,c
 12012  00513E  2560               	addwf	mac_cmp@a& (0+255),w,b
 12013  005140  6EE1               	movwf	fsr1l,c
 12014  005142  50F4               	movf	prodh,w,c
 12015  005144  2161               	addwfc	(mac_cmp@a+1)& (0+255),w,b
 12016  005146  6EE2               	movwf	fsr1h,c
 12017  005148  50DE               	movf	postinc2,w,c
 12018  00514A  18E6               	xorwf	postinc1,w,c
 12019  00514C  B4D8               	btfsc	status,2,c
 12020  00514E  D002               	goto	l392
 12021                           
 12022                           ; BSR set to: 0
 12023                           ;mac.c: 42: return 0;
 12024  005150  90D8               	bcf	status,0,c
 12025                           
 12026                           ; BSR set to: 0
 12027  005152  0012               	return	
 12028  005154                     l392:
 12029                           
 12030                           ; BSR set to: 0
 12031                           
 12032                           ; BSR set to: 0
 12033  005154  2B66               	incf	mac_cmp@i& (0+255),f,b
 12034  005156  D7E4               	goto	l8929
 12035  005158                     u10000:
 12036                           
 12037                           ; BSR set to: 0
 12038                           ;mac.c: 43: }
 12039                           ;mac.c: 44: return 1;
 12040                           
 12041                           ; BSR set to: 0
 12042  005158  80D8               	bsf	status,0,c
 12043  00515A  0012               	return	
 12044  00515C                     __end_of_mac_cmp:
 12045                           	opt stack 0
 12046                           tblptru	equ	0xFF8
 12047                           tblptrh	equ	0xFF7
 12048                           tblptrl	equ	0xFF6
 12049                           tablat	equ	0xFF5
 12050                           prodh	equ	0xFF4
 12051                           prodl	equ	0xFF3
 12052                           intcon	equ	0xFF2
 12053                           intcon3	equ	0xFF0
 12054                           indf0	equ	0xFEF
 12055                           postinc0	equ	0xFEE
 12056                           plusw0	equ	0xFEB
 12057                           fsr0h	equ	0xFEA
 12058                           fsr0l	equ	0xFE9
 12059                           wreg	equ	0xFE8
 12060                           indf1	equ	0xFE7
 12061                           postinc1	equ	0xFE6
 12062                           postdec1	equ	0xFE5
 12063                           plusw1	equ	0xFE3
 12064                           fsr1h	equ	0xFE2
 12065                           fsr1l	equ	0xFE1
 12066                           indf2	equ	0xFDF
 12067                           postinc2	equ	0xFDE
 12068                           postdec2	equ	0xFDD
 12069                           plusw2	equ	0xFDB
 12070                           fsr2h	equ	0xFDA
 12071                           fsr2l	equ	0xFD9
 12072                           status	equ	0xFD8
 12073                           
 12074 ;; *************** function _ethernetController_streamFromRXBuffer *****************
 12075 ;; Defined at:
 12076 ;;		line 350 in file "src/enc424j600/ENC424J600.c"
 12077 ;; Parameters:    Size  Location     Type
 12078 ;;  startEnd        1    wreg     unsigned char 
 12079 ;;  startAddress    2   15[BANK0 ] unsigned int 
 12080 ;; Auto vars:     Size  Location     Type
 12081 ;;  startEnd        1   17[BANK0 ] unsigned char 
 12082 ;;  temp            1   19[BANK0 ] unsigned char 
 12083 ;;  opcode          1   18[BANK0 ] unsigned char 
 12084 ;; Return value:  Size  Location     Type
 12085 ;;                  1    wreg      unsigned char 
 12086 ;; Registers used:
 12087 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12088 ;; Tracked objects:
 12089 ;;		On entry : 0/0
 12090 ;;		On exit  : 0/0
 12091 ;;		Unchanged: 0/0
 12092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12093 ;;      Params:         0       2       0       0       0       0       0       0       0
 12094 ;;      Locals:         0       3       0       0       0       0       0       0       0
 12095 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12096 ;;      Totals:         0       5       0       0       0       0       0       0       0
 12097 ;;Total ram usage:        5 bytes
 12098 ;; Hardware stack levels used:    1
 12099 ;; Hardware stack levels required when called:    7
 12100 ;; This function calls:
 12101 ;;		_enc424j600_readSPI
 12102 ;;		_enc424j600_setERXDATAReadPointer
 12103 ;;		_enc424j600_writeSPI
 12104 ;; This function is called by:
 12105 ;;		_arp_parseFromRXBuffer
 12106 ;;		_ipv4_parseHeader
 12107 ;; This function uses a non-reentrant model
 12108 ;;
 12109                           
 12110                           	psect	text36
 12111  004D06                     __ptext36:
 12112                           	opt stack 0
 12113  004D06                     _ethernetController_streamFromRXBuffer:
 12114                           	opt stack 19
 12115                           
 12116                           ; BSR set to: 0
 12117                           ;incstack = 0
 12118                           ;ethernetController_streamFromRXBuffer@startEnd stored from wreg
 12119  004D06  0100               	movlb	0	; () banked
 12120  004D08  6F71               	movwf	ethernetController_streamFromRXBuffer@startEnd& (0+255),b
 12121                           
 12122                           ;ENC424J600.c: 351: uint8_t temp;
 12123                           ;ENC424J600.c: 352: uint8_t opcode;
 12124                           ;ENC424J600.c: 353: switch (startEnd) {
 12125  004D0A  D01F               	goto	l179
 12126  004D0C                     
 12127                           ;ENC424J600.c: 355: enc424j600_setERXDATAReadPointer(startAddress);
 12128  004D0C  C06F  F06A         	movff	ethernetController_streamFromRXBuffer@startAddress,enc424j600_setERXDATAReadPoint
      +                          er@addr
 12129  004D10  C070  F06B         	movff	ethernetController_streamFromRXBuffer@startAddress+1,enc424j600_setERXDATAReadPoi
      +                          nter@addr+1
 12130  004D14  EC0B  F029         	call	_enc424j600_setERXDATAReadPointer	;wreg free
 12131                           
 12132                           ;ENC424J600.c: 356: opcode = 0x2C;
 12133  004D18  0E2C               	movlw	44
 12134  004D1A  0100               	movlb	0	; () banked
 12135  004D1C  6F72               	movwf	ethernetController_streamFromRXBuffer@opcode& (0+255),b
 12136                           
 12137                           ; BSR set to: 0
 12138                           ;ENC424J600.c: 357: PORTBbits.RB4=0;
 12139  004D1E  9881               	bcf	3969,4,c	;volatile
 12140                           
 12141                           ; BSR set to: 0
 12142                           ;ENC424J600.c: 358: enc424j600_writeSPI(&opcode);
 12143  004D20  0E72               	movlw	low ethernetController_streamFromRXBuffer@opcode
 12144  004D22  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 12145  004D24  0E00               	movlw	high ethernetController_streamFromRXBuffer@opcode
 12146  004D26  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 12147  004D28  EC51  F026         	call	_enc424j600_writeSPI	;wreg free
 12148                           
 12149                           ;ENC424J600.c: 359: return 0;
 12150  004D2C  0E00               	movlw	0
 12151  004D2E  0012               	return	
 12152  004D30                     
 12153                           ;ENC424J600.c: 361: enc424j600_readSPI(&temp);
 12154  004D30  0E73               	movlw	low ethernetController_streamFromRXBuffer@temp
 12155  004D32  0100               	movlb	0	; () banked
 12156  004D34  6F60               	movwf	enc424j600_readSPI@data& (0+255),b
 12157  004D36  0E00               	movlw	high ethernetController_streamFromRXBuffer@temp
 12158  004D38  6F61               	movwf	(enc424j600_readSPI@data+1)& (0+255),b
 12159  004D3A  ECE8  F025         	call	_enc424j600_readSPI	;wreg free
 12160                           
 12161                           ;ENC424J600.c: 362: return temp;
 12162  004D3E  0100               	movlb	0	; () banked
 12163  004D40  5173               	movf	ethernetController_streamFromRXBuffer@temp& (0+255),w,b
 12164                           
 12165                           ; BSR set to: 0
 12166  004D42  0012               	return	
 12167  004D44                     l183:
 12168                           
 12169                           ; BSR set to: 0
 12170                           ;ENC424J600.c: 364: PORTBbits.RB4=1;
 12171  004D44  8881               	bsf	3969,4,c	;volatile
 12172                           
 12173                           ; BSR set to: 0
 12174                           ;ENC424J600.c: 374: return 0;
 12175  004D46  0E00               	movlw	0
 12176                           
 12177                           ; BSR set to: 0
 12178  004D48  0012               	return	
 12179  004D4A                     l179:
 12180                           
 12181                           ; BSR set to: 0
 12182  004D4A  0100               	movlb	0	; () banked
 12183  004D4C  5171               	movf	ethernetController_streamFromRXBuffer@startEnd& (0+255),w,b
 12184                           
 12185                           ; Switch size 1, requested type "space"
 12186                           ; Number of cases is 3, Range of values is 0 to 2
 12187                           ; switch strategies available:
 12188                           ; Name         Instructions Cycles
 12189                           ; simple_byte           10     6 (average)
 12190                           ;	Chosen strategy is simple_byte
 12191  004D4E  0A00               	xorlw	0	; case 0
 12192  004D50  B4D8               	btfsc	status,2,c
 12193  004D52  D7DC               	goto	l180
 12194  004D54  0A01               	xorlw	1	; case 1
 12195  004D56  B4D8               	btfsc	status,2,c
 12196  004D58  D7EB               	goto	l182
 12197  004D5A  0A03               	xorlw	3	; case 2
 12198  004D5C  B4D8               	btfsc	status,2,c
 12199  004D5E  D7F2               	goto	l183
 12200                           
 12201                           ; BSR set to: 0
 12202                           ;ENC424J600.c: 376: return 0;
 12203                           
 12204                           ; BSR set to: 0
 12205  004D60  0E00               	movlw	0
 12206  004D62  0012               	return	
 12207  004D64                     __end_of_ethernetController_streamFromRXBuffer:
 12208                           	opt stack 0
 12209                           tblptru	equ	0xFF8
 12210                           tblptrh	equ	0xFF7
 12211                           tblptrl	equ	0xFF6
 12212                           tablat	equ	0xFF5
 12213                           prodh	equ	0xFF4
 12214                           prodl	equ	0xFF3
 12215                           intcon	equ	0xFF2
 12216                           intcon3	equ	0xFF0
 12217                           indf0	equ	0xFEF
 12218                           postinc0	equ	0xFEE
 12219                           plusw0	equ	0xFEB
 12220                           fsr0h	equ	0xFEA
 12221                           fsr0l	equ	0xFE9
 12222                           wreg	equ	0xFE8
 12223                           indf1	equ	0xFE7
 12224                           postinc1	equ	0xFE6
 12225                           postdec1	equ	0xFE5
 12226                           plusw1	equ	0xFE3
 12227                           fsr1h	equ	0xFE2
 12228                           fsr1l	equ	0xFE1
 12229                           indf2	equ	0xFDF
 12230                           postinc2	equ	0xFDE
 12231                           postdec2	equ	0xFDD
 12232                           plusw2	equ	0xFDB
 12233                           fsr2h	equ	0xFDA
 12234                           fsr2l	equ	0xFD9
 12235                           status	equ	0xFD8
 12236                           
 12237 ;; *************** function _UARTTransmitInt *****************
 12238 ;; Defined at:
 12239 ;;		line 43 in file "src/system/uart.c"
 12240 ;; Parameters:    Size  Location     Type
 12241 ;;  val             4   58[BANK0 ] unsigned long 
 12242 ;; Auto vars:     Size  Location     Type
 12243 ;;		None
 12244 ;; Return value:  Size  Location     Type
 12245 ;;                  1    wreg      void 
 12246 ;; Registers used:
 12247 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12248 ;; Tracked objects:
 12249 ;;		On entry : 0/0
 12250 ;;		On exit  : 0/0
 12251 ;;		Unchanged: 0/0
 12252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12253 ;;      Params:         0       4       0       0       0       0       0       0       0
 12254 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12255 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12256 ;;      Totals:         0       4       0       0       0       0       0       0       0
 12257 ;;Total ram usage:        4 bytes
 12258 ;; Hardware stack levels used:    1
 12259 ;; Hardware stack levels required when called:    8
 12260 ;; This function calls:
 12261 ;;		_UARTTransmitText
 12262 ;;		_intToString
 12263 ;; This function is called by:
 12264 ;;		_ethernet_rxGetNewFrame
 12265 ;; This function uses a non-reentrant model
 12266 ;;
 12267                           
 12268                           	psect	text37
 12269  005634                     __ptext37:
 12270                           	opt stack 0
 12271  005634                     _UARTTransmitInt:
 12272                           	opt stack 20
 12273                           
 12274                           ;uart.c: 44: UARTTransmitText(intToString(val));
 12275                           
 12276                           ;incstack = 0
 12277  005634  C09A  F084         	movff	UARTTransmitInt@val,intToString@val
 12278  005638  C09B  F085         	movff	UARTTransmitInt@val+1,intToString@val+1
 12279  00563C  C09C  F086         	movff	UARTTransmitInt@val+2,intToString@val+2
 12280  005640  C09D  F087         	movff	UARTTransmitInt@val+3,intToString@val+3
 12281  005644  EC97  F029         	call	_intToString	;wreg free
 12282  005648  C084  F098         	movff	?_intToString,UARTTransmitText@str
 12283  00564C  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
 12284  005650  EC09  F027         	call	_UARTTransmitText	;wreg free
 12285  005654  0012               	return		;funcret
 12286  005656                     __end_of_UARTTransmitInt:
 12287                           	opt stack 0
 12288                           tblptru	equ	0xFF8
 12289                           tblptrh	equ	0xFF7
 12290                           tblptrl	equ	0xFF6
 12291                           tablat	equ	0xFF5
 12292                           prodh	equ	0xFF4
 12293                           prodl	equ	0xFF3
 12294                           intcon	equ	0xFF2
 12295                           intcon3	equ	0xFF0
 12296                           indf0	equ	0xFEF
 12297                           postinc0	equ	0xFEE
 12298                           plusw0	equ	0xFEB
 12299                           fsr0h	equ	0xFEA
 12300                           fsr0l	equ	0xFE9
 12301                           wreg	equ	0xFE8
 12302                           indf1	equ	0xFE7
 12303                           postinc1	equ	0xFE6
 12304                           postdec1	equ	0xFE5
 12305                           plusw1	equ	0xFE3
 12306                           fsr1h	equ	0xFE2
 12307                           fsr1l	equ	0xFE1
 12308                           indf2	equ	0xFDF
 12309                           postinc2	equ	0xFDE
 12310                           postdec2	equ	0xFDD
 12311                           plusw2	equ	0xFDB
 12312                           fsr2h	equ	0xFDA
 12313                           fsr2l	equ	0xFD9
 12314                           status	equ	0xFD8
 12315                           
 12316 ;; *************** function _intToString *****************
 12317 ;; Defined at:
 12318 ;;		line 75 in file "src/system/uart.c"
 12319 ;; Parameters:    Size  Location     Type
 12320 ;;  val             4   36[BANK0 ] unsigned long 
 12321 ;; Auto vars:     Size  Location     Type
 12322 ;;		None
 12323 ;; Return value:  Size  Location     Type
 12324 ;;                  2   36[BANK0 ] PTR unsigned char 
 12325 ;; Registers used:
 12326 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12327 ;; Tracked objects:
 12328 ;;		On entry : 0/0
 12329 ;;		On exit  : 0/0
 12330 ;;		Unchanged: 0/0
 12331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12332 ;;      Params:         0       4       0       0       0       0       0       0       0
 12333 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12334 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12335 ;;      Totals:         0       4       0       0       0       0       0       0       0
 12336 ;;Total ram usage:        4 bytes
 12337 ;; Hardware stack levels used:    1
 12338 ;; Hardware stack levels required when called:    7
 12339 ;; This function calls:
 12340 ;;		_ltoa
 12341 ;; This function is called by:
 12342 ;;		_ethernet_rxGetNewFrame
 12343 ;;		_main
 12344 ;;		_printErrorMessage
 12345 ;;		_UARTTransmitInt
 12346 ;;		_ipv4_handleNewPacket
 12347 ;;		_arpEntryToString
 12348 ;; This function uses a non-reentrant model
 12349 ;;
 12350                           
 12351                           	psect	text38
 12352  00532E                     __ptext38:
 12353                           	opt stack 0
 12354  00532E                     _intToString:
 12355                           	opt stack 22
 12356                           
 12357                           ;uart.c: 76: char static number [10];
 12358                           ;uart.c: 77: ltoa(&number[0], (long) val, 10);
 12359                           
 12360                           ;incstack = 0
 12361  00532E  0EB7               	movlw	low intToString@number
 12362  005330  0100               	movlb	0	; () banked
 12363  005332  6F7A               	movwf	ltoa@buf& (0+255),b
 12364  005334  0E01               	movlw	high intToString@number
 12365  005336  6F7B               	movwf	(ltoa@buf+1)& (0+255),b
 12366  005338  C084  F07C         	movff	intToString@val,ltoa@val
 12367  00533C  C085  F07D         	movff	intToString@val+1,ltoa@val+1
 12368  005340  C086  F07E         	movff	intToString@val+2,ltoa@val+2
 12369  005344  C087  F07F         	movff	intToString@val+3,ltoa@val+3
 12370  005348  0E00               	movlw	0
 12371  00534A  6F81               	movwf	(ltoa@base+1)& (0+255),b
 12372  00534C  0E0A               	movlw	10
 12373  00534E  6F80               	movwf	ltoa@base& (0+255),b
 12374  005350  EC34  F027         	call	_ltoa	;wreg free
 12375                           
 12376                           ;uart.c: 81: return number;
 12377  005354  0EB7               	movlw	low intToString@number
 12378  005356  0100               	movlb	0	; () banked
 12379  005358  6F84               	movwf	?_intToString& (0+255),b
 12380  00535A  0E01               	movlw	high intToString@number
 12381  00535C  6F85               	movwf	(?_intToString+1)& (0+255),b
 12382  00535E  0012               	return	
 12383  005360                     __end_of_intToString:
 12384                           	opt stack 0
 12385                           tblptru	equ	0xFF8
 12386                           tblptrh	equ	0xFF7
 12387                           tblptrl	equ	0xFF6
 12388                           tablat	equ	0xFF5
 12389                           prodh	equ	0xFF4
 12390                           prodl	equ	0xFF3
 12391                           intcon	equ	0xFF2
 12392                           intcon3	equ	0xFF0
 12393                           indf0	equ	0xFEF
 12394                           postinc0	equ	0xFEE
 12395                           plusw0	equ	0xFEB
 12396                           fsr0h	equ	0xFEA
 12397                           fsr0l	equ	0xFE9
 12398                           wreg	equ	0xFE8
 12399                           indf1	equ	0xFE7
 12400                           postinc1	equ	0xFE6
 12401                           postdec1	equ	0xFE5
 12402                           plusw1	equ	0xFE3
 12403                           fsr1h	equ	0xFE2
 12404                           fsr1l	equ	0xFE1
 12405                           indf2	equ	0xFDF
 12406                           postinc2	equ	0xFDE
 12407                           postdec2	equ	0xFDD
 12408                           plusw2	equ	0xFDB
 12409                           fsr2h	equ	0xFDA
 12410                           fsr2l	equ	0xFD9
 12411                           status	equ	0xFD8
 12412                           
 12413 ;; *************** function _ltoa *****************
 12414 ;; Defined at:
 12415 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ltoa.c"
 12416 ;; Parameters:    Size  Location     Type
 12417 ;;  buf             2   26[BANK0 ] PTR unsigned char 
 12418 ;;		 -> intToString@number(10), 
 12419 ;;  val             4   28[BANK0 ] long 
 12420 ;;  base            2   32[BANK0 ] int 
 12421 ;; Auto vars:     Size  Location     Type
 12422 ;;  cp              2   34[BANK0 ] PTR unsigned char 
 12423 ;;		 -> intToString@number(10), 
 12424 ;; Return value:  Size  Location     Type
 12425 ;;                  2   26[BANK0 ] PTR unsigned char 
 12426 ;; Registers used:
 12427 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12428 ;; Tracked objects:
 12429 ;;		On entry : 0/0
 12430 ;;		On exit  : 0/0
 12431 ;;		Unchanged: 0/0
 12432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12433 ;;      Params:         0       8       0       0       0       0       0       0       0
 12434 ;;      Locals:         0       2       0       0       0       0       0       0       0
 12435 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12436 ;;      Totals:         0      10       0       0       0       0       0       0       0
 12437 ;;Total ram usage:       10 bytes
 12438 ;; Hardware stack levels used:    1
 12439 ;; Hardware stack levels required when called:    6
 12440 ;; This function calls:
 12441 ;;		_ultoa
 12442 ;; This function is called by:
 12443 ;;		_intToString
 12444 ;; This function uses a non-reentrant model
 12445 ;;
 12446                           
 12447                           	psect	text39
 12448  004E68                     __ptext39:
 12449                           	opt stack 0
 12450  004E68                     _ltoa:
 12451                           	opt stack 22
 12452                           
 12453                           ; BSR set to: 0
 12454                           ;incstack = 0
 12455  004E68  C07A  F082         	movff	ltoa@buf,ltoa@cp
 12456  004E6C  C07B  F083         	movff	ltoa@buf+1,ltoa@cp+1
 12457  004E70  0100               	movlb	0	; () banked
 12458  004E72  AF7F               	btfss	(ltoa@val+3)& (0+255),7,b
 12459  004E74  D010               	goto	l1613
 12460                           
 12461                           ; BSR set to: 0
 12462  004E76  C07A  FFD9         	movff	ltoa@buf,fsr2l
 12463  004E7A  C07B  FFDA         	movff	ltoa@buf+1,fsr2h
 12464  004E7E  0E2D               	movlw	45
 12465  004E80  6EDF               	movwf	indf2,c
 12466                           
 12467                           ; BSR set to: 0
 12468  004E82  4B7A               	infsnz	ltoa@buf& (0+255),f,b
 12469  004E84  2B7B               	incf	(ltoa@buf+1)& (0+255),f,b
 12470                           
 12471                           ; BSR set to: 0
 12472  004E86  1F7F               	comf	(ltoa@val+3)& (0+255),f,b
 12473  004E88  1F7E               	comf	(ltoa@val+2)& (0+255),f,b
 12474  004E8A  1F7D               	comf	(ltoa@val+1)& (0+255),f,b
 12475  004E8C  6D7C               	negf	ltoa@val& (0+255),b
 12476  004E8E  0E00               	movlw	0
 12477  004E90  237D               	addwfc	(ltoa@val+1)& (0+255),f,b
 12478  004E92  237E               	addwfc	(ltoa@val+2)& (0+255),f,b
 12479  004E94  237F               	addwfc	(ltoa@val+3)& (0+255),f,b
 12480  004E96                     l1613:
 12481                           
 12482                           ; BSR set to: 0
 12483                           
 12484                           ; BSR set to: 0
 12485  004E96  C07A  F06D         	movff	ltoa@buf,ultoa@buf
 12486  004E9A  C07B  F06E         	movff	ltoa@buf+1,ultoa@buf+1
 12487  004E9E  C07C  F06F         	movff	ltoa@val,ultoa@val
 12488  004EA2  C07D  F070         	movff	ltoa@val+1,ultoa@val+1
 12489  004EA6  C07E  F071         	movff	ltoa@val+2,ultoa@val+2
 12490  004EAA  C07F  F072         	movff	ltoa@val+3,ultoa@val+3
 12491  004EAE  C080  F073         	movff	ltoa@base,ultoa@base
 12492  004EB2  C081  F074         	movff	ltoa@base+1,ultoa@base+1
 12493  004EB6  EC11  F01E         	call	_ultoa	;wreg free
 12494  004EBA  0012               	return	
 12495  004EBC                     __end_of_ltoa:
 12496                           	opt stack 0
 12497                           tblptru	equ	0xFF8
 12498                           tblptrh	equ	0xFF7
 12499                           tblptrl	equ	0xFF6
 12500                           tablat	equ	0xFF5
 12501                           prodh	equ	0xFF4
 12502                           prodl	equ	0xFF3
 12503                           intcon	equ	0xFF2
 12504                           intcon3	equ	0xFF0
 12505                           indf0	equ	0xFEF
 12506                           postinc0	equ	0xFEE
 12507                           plusw0	equ	0xFEB
 12508                           fsr0h	equ	0xFEA
 12509                           fsr0l	equ	0xFE9
 12510                           wreg	equ	0xFE8
 12511                           indf1	equ	0xFE7
 12512                           postinc1	equ	0xFE6
 12513                           postdec1	equ	0xFE5
 12514                           plusw1	equ	0xFE3
 12515                           fsr1h	equ	0xFE2
 12516                           fsr1l	equ	0xFE1
 12517                           indf2	equ	0xFDF
 12518                           postinc2	equ	0xFDE
 12519                           postdec2	equ	0xFDD
 12520                           plusw2	equ	0xFDB
 12521                           fsr2h	equ	0xFDA
 12522                           fsr2l	equ	0xFD9
 12523                           status	equ	0xFD8
 12524                           
 12525 ;; *************** function _ultoa *****************
 12526 ;; Defined at:
 12527 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ltoa.c"
 12528 ;; Parameters:    Size  Location     Type
 12529 ;;  buf             2   13[BANK0 ] PTR unsigned char 
 12530 ;;		 -> intToString@number(10), 
 12531 ;;  val             4   15[BANK0 ] unsigned long 
 12532 ;;  base            2   19[BANK0 ] int 
 12533 ;; Auto vars:     Size  Location     Type
 12534 ;;  v               4   21[BANK0 ] unsigned long 
 12535 ;;  c               1   25[BANK0 ] unsigned char 
 12536 ;; Return value:  Size  Location     Type
 12537 ;;                  2   13[BANK0 ] PTR unsigned char 
 12538 ;; Registers used:
 12539 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12540 ;; Tracked objects:
 12541 ;;		On entry : 0/0
 12542 ;;		On exit  : 0/0
 12543 ;;		Unchanged: 0/0
 12544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12545 ;;      Params:         0       8       0       0       0       0       0       0       0
 12546 ;;      Locals:         0       5       0       0       0       0       0       0       0
 12547 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12548 ;;      Totals:         0      13       0       0       0       0       0       0       0
 12549 ;;Total ram usage:       13 bytes
 12550 ;; Hardware stack levels used:    1
 12551 ;; Hardware stack levels required when called:    5
 12552 ;; This function calls:
 12553 ;;		___lldiv
 12554 ;;		___llmod
 12555 ;; This function is called by:
 12556 ;;		_ltoa
 12557 ;; This function uses a non-reentrant model
 12558 ;;
 12559                           
 12560                           	psect	text40
 12561  003C22                     __ptext40:
 12562                           	opt stack 0
 12563  003C22                     _ultoa:
 12564                           	opt stack 22
 12565                           
 12566                           ;incstack = 0
 12567  003C22  C06F  F075         	movff	ultoa@val,ultoa@v
 12568  003C26  C070  F076         	movff	ultoa@val+1,ultoa@v+1
 12569  003C2A  C071  F077         	movff	ultoa@val+2,ultoa@v+2
 12570  003C2E  C072  F078         	movff	ultoa@val+3,ultoa@v+3
 12571  003C32  C075  F060         	movff	ultoa@v,___lldiv@dividend
 12572  003C36  C076  F061         	movff	ultoa@v+1,___lldiv@dividend+1
 12573  003C3A  C077  F062         	movff	ultoa@v+2,___lldiv@dividend+2
 12574  003C3E  C078  F063         	movff	ultoa@v+3,___lldiv@dividend+3
 12575  003C42  C073  F064         	movff	ultoa@base,___lldiv@divisor
 12576  003C46  C074  F065         	movff	ultoa@base+1,___lldiv@divisor+1
 12577  003C4A  0100               	movlb	0	; () banked
 12578  003C4C  0E00               	movlw	0
 12579  003C4E  BF65               	btfsc	(___lldiv@divisor+1)& (0+255),7,b
 12580  003C50  0EFF               	movlw	-1
 12581  003C52  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
 12582  003C54  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
 12583  003C56  EC57  F023         	call	___lldiv	;wreg free
 12584  003C5A  C060  F075         	movff	?___lldiv,ultoa@v
 12585  003C5E  C061  F076         	movff	?___lldiv+1,ultoa@v+1
 12586  003C62  C062  F077         	movff	?___lldiv+2,ultoa@v+2
 12587  003C66  C063  F078         	movff	?___lldiv+3,ultoa@v+3
 12588  003C6A  0100               	movlb	0	; () banked
 12589  003C6C  4B6D               	infsnz	ultoa@buf& (0+255),f,b
 12590  003C6E  2B6E               	incf	(ultoa@buf+1)& (0+255),f,b
 12591                           
 12592                           ; BSR set to: 0
 12593  003C70  5175               	movf	ultoa@v& (0+255),w,b
 12594  003C72  1176               	iorwf	(ultoa@v+1)& (0+255),w,b
 12595  003C74  1177               	iorwf	(ultoa@v+2)& (0+255),w,b
 12596  003C76  1178               	iorwf	(ultoa@v+3)& (0+255),w,b
 12597  003C78  A4D8               	btfss	status,2,c
 12598  003C7A  D7DB               	goto	l1617
 12599                           
 12600                           ; BSR set to: 0
 12601                           
 12602                           ; BSR set to: 0
 12603  003C7C  C06D  FFD9         	movff	ultoa@buf,fsr2l
 12604  003C80  C06E  FFDA         	movff	ultoa@buf+1,fsr2h
 12605  003C84  0E00               	movlw	0
 12606  003C86  6EDF               	movwf	indf2,c
 12607                           
 12608                           ; BSR set to: 0
 12609  003C88  076D               	decf	ultoa@buf& (0+255),f,b
 12610  003C8A  A0D8               	btfss	status,0,c
 12611  003C8C  076E               	decf	(ultoa@buf+1)& (0+255),f,b
 12612  003C8E                     
 12613                           ; BSR set to: 0
 12614                           
 12615                           ; BSR set to: 0
 12616  003C8E  C06F  F060         	movff	ultoa@val,___llmod@dividend
 12617  003C92  C070  F061         	movff	ultoa@val+1,___llmod@dividend+1
 12618  003C96  C071  F062         	movff	ultoa@val+2,___llmod@dividend+2
 12619  003C9A  C072  F063         	movff	ultoa@val+3,___llmod@dividend+3
 12620  003C9E  C073  F064         	movff	ultoa@base,___llmod@divisor
 12621  003CA2  C074  F065         	movff	ultoa@base+1,___llmod@divisor+1
 12622  003CA6  0E00               	movlw	0
 12623  003CA8  BF65               	btfsc	(___llmod@divisor+1)& (0+255),7,b
 12624  003CAA  0EFF               	movlw	-1
 12625  003CAC  6F66               	movwf	(___llmod@divisor+2)& (0+255),b
 12626  003CAE  6F67               	movwf	(___llmod@divisor+3)& (0+255),b
 12627  003CB0  EC1D  F026         	call	___llmod	;wreg free
 12628  003CB4  0100               	movlb	0	; () banked
 12629  003CB6  5160               	movf	?___llmod& (0+255),w,b
 12630  003CB8  6F79               	movwf	ultoa@c& (0+255),b
 12631                           
 12632                           ; BSR set to: 0
 12633  003CBA  C06F  F060         	movff	ultoa@val,___lldiv@dividend
 12634  003CBE  C070  F061         	movff	ultoa@val+1,___lldiv@dividend+1
 12635  003CC2  C071  F062         	movff	ultoa@val+2,___lldiv@dividend+2
 12636  003CC6  C072  F063         	movff	ultoa@val+3,___lldiv@dividend+3
 12637  003CCA  C073  F064         	movff	ultoa@base,___lldiv@divisor
 12638  003CCE  C074  F065         	movff	ultoa@base+1,___lldiv@divisor+1
 12639  003CD2  0E00               	movlw	0
 12640  003CD4  BF65               	btfsc	(___lldiv@divisor+1)& (0+255),7,b
 12641  003CD6  0EFF               	movlw	-1
 12642  003CD8  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
 12643  003CDA  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
 12644  003CDC  EC57  F023         	call	___lldiv	;wreg free
 12645  003CE0  C060  F06F         	movff	?___lldiv,ultoa@val
 12646  003CE4  C061  F070         	movff	?___lldiv+1,ultoa@val+1
 12647  003CE8  C062  F071         	movff	?___lldiv+2,ultoa@val+2
 12648  003CEC  C063  F072         	movff	?___lldiv+3,ultoa@val+3
 12649  003CF0  0E09               	movlw	9
 12650  003CF2  0100               	movlb	0	; () banked
 12651  003CF4  6579               	cpfsgt	ultoa@c& (0+255),b
 12652  003CF6  D002               	goto	l1620
 12653                           
 12654                           ; BSR set to: 0
 12655  003CF8  0E07               	movlw	7
 12656  003CFA  2779               	addwf	ultoa@c& (0+255),f,b
 12657  003CFC                     l1620:
 12658                           
 12659                           ; BSR set to: 0
 12660  003CFC  0E30               	movlw	48
 12661  003CFE  2779               	addwf	ultoa@c& (0+255),f,b
 12662                           
 12663                           ; BSR set to: 0
 12664  003D00  C06D  FFD9         	movff	ultoa@buf,fsr2l
 12665  003D04  C06E  FFDA         	movff	ultoa@buf+1,fsr2h
 12666  003D08  C079  FFDF         	movff	ultoa@c,indf2
 12667                           
 12668                           ; BSR set to: 0
 12669  003D0C  076D               	decf	ultoa@buf& (0+255),f,b
 12670  003D0E  A0D8               	btfss	status,0,c
 12671  003D10  076E               	decf	(ultoa@buf+1)& (0+255),f,b
 12672                           
 12673                           ; BSR set to: 0
 12674  003D12  516F               	movf	ultoa@val& (0+255),w,b
 12675  003D14  1170               	iorwf	(ultoa@val+1)& (0+255),w,b
 12676  003D16  1171               	iorwf	(ultoa@val+2)& (0+255),w,b
 12677  003D18  1172               	iorwf	(ultoa@val+3)& (0+255),w,b
 12678  003D1A  B4D8               	btfsc	status,2,c
 12679  003D1C  0012               	return	
 12680  003D1E  D7B7               	goto	l1619
 12681  003D20                     __end_of_ultoa:
 12682                           	opt stack 0
 12683                           tblptru	equ	0xFF8
 12684                           tblptrh	equ	0xFF7
 12685                           tblptrl	equ	0xFF6
 12686                           tablat	equ	0xFF5
 12687                           prodh	equ	0xFF4
 12688                           prodl	equ	0xFF3
 12689                           intcon	equ	0xFF2
 12690                           intcon3	equ	0xFF0
 12691                           indf0	equ	0xFEF
 12692                           postinc0	equ	0xFEE
 12693                           plusw0	equ	0xFEB
 12694                           fsr0h	equ	0xFEA
 12695                           fsr0l	equ	0xFE9
 12696                           wreg	equ	0xFE8
 12697                           indf1	equ	0xFE7
 12698                           postinc1	equ	0xFE6
 12699                           postdec1	equ	0xFE5
 12700                           plusw1	equ	0xFE3
 12701                           fsr1h	equ	0xFE2
 12702                           fsr1l	equ	0xFE1
 12703                           indf2	equ	0xFDF
 12704                           postinc2	equ	0xFDE
 12705                           postdec2	equ	0xFDD
 12706                           plusw2	equ	0xFDB
 12707                           fsr2h	equ	0xFDA
 12708                           fsr2l	equ	0xFD9
 12709                           status	equ	0xFD8
 12710                           
 12711 ;; *************** function ___llmod *****************
 12712 ;; Defined at:
 12713 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
 12714 ;; Parameters:    Size  Location     Type
 12715 ;;  dividend        4    0[BANK0 ] unsigned long 
 12716 ;;  divisor         4    4[BANK0 ] unsigned long 
 12717 ;; Auto vars:     Size  Location     Type
 12718 ;;  counter         1    8[BANK0 ] unsigned char 
 12719 ;; Return value:  Size  Location     Type
 12720 ;;                  4    0[BANK0 ] unsigned long 
 12721 ;; Registers used:
 12722 ;;		wreg, status,2, status,0
 12723 ;; Tracked objects:
 12724 ;;		On entry : 0/0
 12725 ;;		On exit  : 0/0
 12726 ;;		Unchanged: 0/0
 12727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12728 ;;      Params:         0       8       0       0       0       0       0       0       0
 12729 ;;      Locals:         0       1       0       0       0       0       0       0       0
 12730 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12731 ;;      Totals:         0       9       0       0       0       0       0       0       0
 12732 ;;Total ram usage:        9 bytes
 12733 ;; Hardware stack levels used:    1
 12734 ;; Hardware stack levels required when called:    4
 12735 ;; This function calls:
 12736 ;;		Nothing
 12737 ;; This function is called by:
 12738 ;;		_ultoa
 12739 ;;		_arpEntryToString
 12740 ;; This function uses a non-reentrant model
 12741 ;;
 12742                           
 12743                           	psect	text41
 12744  004C3A                     __ptext41:
 12745                           	opt stack 0
 12746  004C3A                     ___llmod:
 12747                           	opt stack 22
 12748                           
 12749                           ; BSR set to: 0
 12750                           ;incstack = 0
 12751  004C3A  0100               	movlb	0	; () banked
 12752  004C3C  5164               	movf	___llmod@divisor& (0+255),w,b
 12753  004C3E  1165               	iorwf	(___llmod@divisor+1)& (0+255),w,b
 12754  004C40  1166               	iorwf	(___llmod@divisor+2)& (0+255),w,b
 12755  004C42  1167               	iorwf	(___llmod@divisor+3)& (0+255),w,b
 12756  004C44  B4D8               	btfsc	status,2,c
 12757  004C46  D024               	goto	l1579
 12758                           
 12759                           ; BSR set to: 0
 12760  004C48  0E01               	movlw	1
 12761  004C4A  6F68               	movwf	___llmod@counter& (0+255),b
 12762  004C4C  D006               	goto	l1574
 12763  004C4E                     
 12764                           ; BSR set to: 0
 12765                           
 12766                           ; BSR set to: 0
 12767  004C4E  90D8               	bcf	status,0,c
 12768  004C50  3764               	rlcf	___llmod@divisor& (0+255),f,b
 12769  004C52  3765               	rlcf	(___llmod@divisor+1)& (0+255),f,b
 12770  004C54  3766               	rlcf	(___llmod@divisor+2)& (0+255),f,b
 12771  004C56  3767               	rlcf	(___llmod@divisor+3)& (0+255),f,b
 12772  004C58  2B68               	incf	___llmod@counter& (0+255),f,b
 12773  004C5A                     l1574:
 12774                           
 12775                           ; BSR set to: 0
 12776                           
 12777                           ; BSR set to: 0
 12778  004C5A  AF67               	btfss	(___llmod@divisor+3)& (0+255),7,b
 12779  004C5C  D7F8               	goto	l1575
 12780  004C5E                     u9580:
 12781                           
 12782                           ; BSR set to: 0
 12783                           
 12784                           ; BSR set to: 0
 12785                           
 12786                           ; BSR set to: 0
 12787  004C5E  5164               	movf	___llmod@divisor& (0+255),w,b
 12788  004C60  5D60               	subwf	___llmod@dividend& (0+255),w,b
 12789  004C62  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
 12790  004C64  5961               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 12791  004C66  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
 12792  004C68  5962               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 12793  004C6A  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
 12794  004C6C  5963               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 12795  004C6E  A0D8               	btfss	status,0,c
 12796  004C70  D008               	goto	l1578
 12797                           
 12798                           ; BSR set to: 0
 12799  004C72  5164               	movf	___llmod@divisor& (0+255),w,b
 12800  004C74  5F60               	subwf	___llmod@dividend& (0+255),f,b
 12801  004C76  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
 12802  004C78  5B61               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 12803  004C7A  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
 12804  004C7C  5B62               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 12805  004C7E  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
 12806  004C80  5B63               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 12807  004C82                     l1578:
 12808                           
 12809                           ; BSR set to: 0
 12810                           
 12811                           ; BSR set to: 0
 12812  004C82  90D8               	bcf	status,0,c
 12813  004C84  3367               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 12814  004C86  3366               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 12815  004C88  3365               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 12816  004C8A  3364               	rrcf	___llmod@divisor& (0+255),f,b
 12817                           
 12818                           ; BSR set to: 0
 12819  004C8C  2F68               	decfsz	___llmod@counter& (0+255),f,b
 12820  004C8E  D7E7               	goto	u9580
 12821  004C90                     l1579:
 12822                           
 12823                           ; BSR set to: 0
 12824                           
 12825                           ; BSR set to: 0
 12826  004C90  C060  F060         	movff	___llmod@dividend,?___llmod
 12827  004C94  C061  F061         	movff	___llmod@dividend+1,?___llmod+1
 12828  004C98  C062  F062         	movff	___llmod@dividend+2,?___llmod+2
 12829  004C9C  C063  F063         	movff	___llmod@dividend+3,?___llmod+3
 12830                           
 12831                           ; BSR set to: 0
 12832  004CA0  0012               	return		;funcret
 12833  004CA2                     __end_of___llmod:
 12834                           	opt stack 0
 12835                           tblptru	equ	0xFF8
 12836                           tblptrh	equ	0xFF7
 12837                           tblptrl	equ	0xFF6
 12838                           tablat	equ	0xFF5
 12839                           prodh	equ	0xFF4
 12840                           prodl	equ	0xFF3
 12841                           intcon	equ	0xFF2
 12842                           intcon3	equ	0xFF0
 12843                           indf0	equ	0xFEF
 12844                           postinc0	equ	0xFEE
 12845                           plusw0	equ	0xFEB
 12846                           fsr0h	equ	0xFEA
 12847                           fsr0l	equ	0xFE9
 12848                           wreg	equ	0xFE8
 12849                           indf1	equ	0xFE7
 12850                           postinc1	equ	0xFE6
 12851                           postdec1	equ	0xFE5
 12852                           plusw1	equ	0xFE3
 12853                           fsr1h	equ	0xFE2
 12854                           fsr1l	equ	0xFE1
 12855                           indf2	equ	0xFDF
 12856                           postinc2	equ	0xFDE
 12857                           postdec2	equ	0xFDD
 12858                           plusw2	equ	0xFDB
 12859                           fsr2h	equ	0xFDA
 12860                           fsr2l	equ	0xFD9
 12861                           status	equ	0xFD8
 12862                           
 12863 ;; *************** function ___lldiv *****************
 12864 ;; Defined at:
 12865 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 12866 ;; Parameters:    Size  Location     Type
 12867 ;;  dividend        4    0[BANK0 ] unsigned long 
 12868 ;;  divisor         4    4[BANK0 ] unsigned long 
 12869 ;; Auto vars:     Size  Location     Type
 12870 ;;  quotient        4    8[BANK0 ] unsigned long 
 12871 ;;  counter         1   12[BANK0 ] unsigned char 
 12872 ;; Return value:  Size  Location     Type
 12873 ;;                  4    0[BANK0 ] unsigned long 
 12874 ;; Registers used:
 12875 ;;		wreg, status,2, status,0
 12876 ;; Tracked objects:
 12877 ;;		On entry : 0/0
 12878 ;;		On exit  : 0/0
 12879 ;;		Unchanged: 0/0
 12880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12881 ;;      Params:         0       8       0       0       0       0       0       0       0
 12882 ;;      Locals:         0       5       0       0       0       0       0       0       0
 12883 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12884 ;;      Totals:         0      13       0       0       0       0       0       0       0
 12885 ;;Total ram usage:       13 bytes
 12886 ;; Hardware stack levels used:    1
 12887 ;; Hardware stack levels required when called:    4
 12888 ;; This function calls:
 12889 ;;		Nothing
 12890 ;; This function is called by:
 12891 ;;		_ultoa
 12892 ;; This function uses a non-reentrant model
 12893 ;;
 12894                           
 12895                           	psect	text42
 12896  0046AE                     __ptext42:
 12897                           	opt stack 0
 12898  0046AE                     ___lldiv:
 12899                           	opt stack 22
 12900                           
 12901                           ; BSR set to: 0
 12902                           ;incstack = 0
 12903  0046AE  0E00               	movlw	0
 12904  0046B0  0100               	movlb	0	; () banked
 12905  0046B2  6F68               	movwf	___lldiv@quotient& (0+255),b
 12906  0046B4  0E00               	movlw	0
 12907  0046B6  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
 12908  0046B8  0E00               	movlw	0
 12909  0046BA  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
 12910  0046BC  0E00               	movlw	0
 12911  0046BE  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
 12912                           
 12913                           ; BSR set to: 0
 12914  0046C0  5164               	movf	___lldiv@divisor& (0+255),w,b
 12915  0046C2  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 12916  0046C4  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 12917  0046C6  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 12918  0046C8  B4D8               	btfsc	status,2,c
 12919  0046CA  D02A               	goto	l1569
 12920                           
 12921                           ; BSR set to: 0
 12922  0046CC  0E01               	movlw	1
 12923  0046CE  6F6C               	movwf	___lldiv@counter& (0+255),b
 12924  0046D0  D006               	goto	l1564
 12925  0046D2                     
 12926                           ; BSR set to: 0
 12927                           
 12928                           ; BSR set to: 0
 12929  0046D2  90D8               	bcf	status,0,c
 12930  0046D4  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 12931  0046D6  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 12932  0046D8  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 12933  0046DA  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 12934  0046DC  2B6C               	incf	___lldiv@counter& (0+255),f,b
 12935  0046DE                     l1564:
 12936                           
 12937                           ; BSR set to: 0
 12938                           
 12939                           ; BSR set to: 0
 12940  0046DE  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 12941  0046E0  D7F8               	goto	l1565
 12942  0046E2                     u9550:
 12943                           
 12944                           ; BSR set to: 0
 12945                           
 12946                           ; BSR set to: 0
 12947                           
 12948                           ; BSR set to: 0
 12949  0046E2  90D8               	bcf	status,0,c
 12950  0046E4  3768               	rlcf	___lldiv@quotient& (0+255),f,b
 12951  0046E6  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 12952  0046E8  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 12953  0046EA  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 12954                           
 12955                           ; BSR set to: 0
 12956  0046EC  5164               	movf	___lldiv@divisor& (0+255),w,b
 12957  0046EE  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 12958  0046F0  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 12959  0046F2  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 12960  0046F4  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 12961  0046F6  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 12962  0046F8  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 12963  0046FA  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 12964  0046FC  A0D8               	btfss	status,0,c
 12965  0046FE  D009               	goto	l1568
 12966                           
 12967                           ; BSR set to: 0
 12968  004700  5164               	movf	___lldiv@divisor& (0+255),w,b
 12969  004702  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 12970  004704  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 12971  004706  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 12972  004708  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 12973  00470A  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 12974  00470C  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 12975  00470E  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 12976                           
 12977                           ; BSR set to: 0
 12978  004710  8168               	bsf	___lldiv@quotient& (0+255),0,b
 12979  004712                     l1568:
 12980                           
 12981                           ; BSR set to: 0
 12982                           
 12983                           ; BSR set to: 0
 12984  004712  90D8               	bcf	status,0,c
 12985  004714  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 12986  004716  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 12987  004718  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 12988  00471A  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 12989                           
 12990                           ; BSR set to: 0
 12991  00471C  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
 12992  00471E  D7E1               	goto	u9550
 12993  004720                     l1569:
 12994                           
 12995                           ; BSR set to: 0
 12996                           
 12997                           ; BSR set to: 0
 12998  004720  C068  F060         	movff	___lldiv@quotient,?___lldiv
 12999  004724  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 13000  004728  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 13001  00472C  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 13002                           
 13003                           ; BSR set to: 0
 13004  004730  0012               	return		;funcret
 13005  004732                     __end_of___lldiv:
 13006                           	opt stack 0
 13007                           tblptru	equ	0xFF8
 13008                           tblptrh	equ	0xFF7
 13009                           tblptrl	equ	0xFF6
 13010                           tablat	equ	0xFF5
 13011                           prodh	equ	0xFF4
 13012                           prodl	equ	0xFF3
 13013                           intcon	equ	0xFF2
 13014                           intcon3	equ	0xFF0
 13015                           indf0	equ	0xFEF
 13016                           postinc0	equ	0xFEE
 13017                           plusw0	equ	0xFEB
 13018                           fsr0h	equ	0xFEA
 13019                           fsr0l	equ	0xFE9
 13020                           wreg	equ	0xFE8
 13021                           indf1	equ	0xFE7
 13022                           postinc1	equ	0xFE6
 13023                           postdec1	equ	0xFE5
 13024                           plusw1	equ	0xFE3
 13025                           fsr1h	equ	0xFE2
 13026                           fsr1l	equ	0xFE1
 13027                           indf2	equ	0xFDF
 13028                           postinc2	equ	0xFDE
 13029                           postdec2	equ	0xFDD
 13030                           plusw2	equ	0xFDB
 13031                           fsr2h	equ	0xFDA
 13032                           fsr2l	equ	0xFD9
 13033                           status	equ	0xFD8
 13034                           
 13035 ;; *************** function _ethernetController_updateLinkStatus *****************
 13036 ;; Defined at:
 13037 ;;		line 394 in file "src/enc424j600/ENC424J600.c"
 13038 ;; Parameters:    Size  Location     Type
 13039 ;;  state           2   32[BANK0 ] PTR struct ethernetConne
 13040 ;;		 -> stack(135), 
 13041 ;; Auto vars:     Size  Location     Type
 13042 ;;  temp16          2   35[BANK0 ] unsigned int 
 13043 ;;  temp            1   34[BANK0 ] unsigned char 
 13044 ;; Return value:  Size  Location     Type
 13045 ;;                  1    wreg      void 
 13046 ;; Registers used:
 13047 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13048 ;; Tracked objects:
 13049 ;;		On entry : 0/0
 13050 ;;		On exit  : 0/0
 13051 ;;		Unchanged: 0/0
 13052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13053 ;;      Params:         0       2       0       0       0       0       0       0       0
 13054 ;;      Locals:         0       3       0       0       0       0       0       0       0
 13055 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13056 ;;      Totals:         0       5       0       0       0       0       0       0       0
 13057 ;;Total ram usage:        5 bytes
 13058 ;; Hardware stack levels used:    1
 13059 ;; Hardware stack levels required when called:    8
 13060 ;; This function calls:
 13061 ;;		_enc424j600_readControlRegisterUnbanked
 13062 ;;		_enc424j600_readPHYRegister
 13063 ;; This function is called by:
 13064 ;;		_handleStackBackgroundTasks
 13065 ;; This function uses a non-reentrant model
 13066 ;;
 13067                           
 13068                           	psect	text43
 13069  00459A                     __ptext43:
 13070                           	opt stack 0
 13071  00459A                     _ethernetController_updateLinkStatus:
 13072                           	opt stack 21
 13073                           
 13074                           ;ENC424J600.c: 395: uint8_t temp;
 13075                           ;ENC424J600.c: 396: uint16_t temp16;
 13076                           ;ENC424J600.c: 397: enc424j600_readControlRegisterUnbanked(0x1B, &temp);
 13077                           
 13078                           ; BSR set to: 0
 13079                           ;incstack = 0
 13080  00459A  0E82               	movlw	low ethernetController_updateLinkStatus@temp
 13081  00459C  0100               	movlb	0	; () banked
 13082  00459E  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 13083  0045A0  0E00               	movlw	high ethernetController_updateLinkStatus@temp
 13084  0045A2  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 13085  0045A4  0E1B               	movlw	27
 13086  0045A6  EC7C  F029         	call	_enc424j600_readControlRegisterUnbanked
 13087                           
 13088                           ;ENC424J600.c: 398: if (temp & 0x01) {
 13089  0045AA  0100               	movlb	0	; () banked
 13090  0045AC  A182               	btfss	ethernetController_updateLinkStatus@temp& (0+255),0,b
 13091  0045AE  D006               	goto	l195
 13092                           
 13093                           ; BSR set to: 0
 13094                           ;ENC424J600.c: 399: state->link = LINK_ESTABLISHED;
 13095  0045B0  C080  FFD9         	movff	ethernetController_updateLinkStatus@state,fsr2l
 13096  0045B4  C081  FFDA         	movff	ethernetController_updateLinkStatus@state+1,fsr2h
 13097  0045B8  0E01               	movlw	1
 13098  0045BA  D005               	goto	L2
 13099  0045BC                     l195:
 13100                           
 13101                           ; BSR set to: 0
 13102                           ;ENC424J600.c: 401: state->link = NO_LINK;
 13103                           
 13104                           ; BSR set to: 0
 13105  0045BC  C080  FFD9         	movff	ethernetController_updateLinkStatus@state,fsr2l
 13106  0045C0  C081  FFDA         	movff	ethernetController_updateLinkStatus@state+1,fsr2h
 13107  0045C4  0E00               	movlw	0
 13108  0045C6                     L2:
 13109  0045C6  6EDF               	movwf	indf2,c
 13110                           
 13111                           ; BSR set to: 0
 13112                           ;ENC424J600.c: 402: }
 13113                           ;ENC424J600.c: 404: enc424j600_readPHYRegister(0x1F, &temp16);
 13114                           
 13115                           ; BSR set to: 0
 13116  0045C8  0E83               	movlw	low ethernetController_updateLinkStatus@temp16
 13117  0045CA  6F6E               	movwf	enc424j600_readPHYRegister@data& (0+255),b
 13118  0045CC  0E00               	movlw	high ethernetController_updateLinkStatus@temp16
 13119  0045CE  6F6F               	movwf	(enc424j600_readPHYRegister@data+1)& (0+255),b
 13120  0045D0  0E1F               	movlw	31
 13121  0045D2  ECE8  F01B         	call	_enc424j600_readPHYRegister
 13122                           
 13123                           ;ENC424J600.c: 406: if (temp16 & (1 << 3)) {
 13124  0045D6  0100               	movlb	0	; () banked
 13125  0045D8  A783               	btfss	ethernetController_updateLinkStatus@temp16& (0+255),3,b
 13126  0045DA  D008               	goto	l197
 13127                           
 13128                           ; BSR set to: 0
 13129                           ;ENC424J600.c: 407: state->speed = HUNDRED_MBIT;
 13130  0045DC  EE20 F001          	lfsr	2,1
 13131  0045E0  5180               	movf	ethernetController_updateLinkStatus@state& (0+255),w,b
 13132  0045E2  26D9               	addwf	fsr2l,f,c
 13133  0045E4  5181               	movf	(ethernetController_updateLinkStatus@state+1)& (0+255),w,b
 13134  0045E6  22DA               	addwfc	fsr2h,f,c
 13135  0045E8  0E01               	movlw	1
 13136  0045EA  D007               	goto	L3
 13137  0045EC                     l197:
 13138                           
 13139                           ; BSR set to: 0
 13140                           ;ENC424J600.c: 409: state->speed = TEN_MBIT;
 13141                           
 13142                           ; BSR set to: 0
 13143  0045EC  EE20 F001          	lfsr	2,1
 13144  0045F0  5180               	movf	ethernetController_updateLinkStatus@state& (0+255),w,b
 13145  0045F2  26D9               	addwf	fsr2l,f,c
 13146  0045F4  5181               	movf	(ethernetController_updateLinkStatus@state+1)& (0+255),w,b
 13147  0045F6  22DA               	addwfc	fsr2h,f,c
 13148  0045F8  0E00               	movlw	0
 13149  0045FA                     L3:
 13150  0045FA  6EDF               	movwf	indf2,c
 13151                           
 13152                           ; BSR set to: 0
 13153                           ;ENC424J600.c: 410: }
 13154                           ;ENC424J600.c: 412: if (temp16 & (1 << 4)) {
 13155                           
 13156                           ; BSR set to: 0
 13157  0045FC  A983               	btfss	ethernetController_updateLinkStatus@temp16& (0+255),4,b
 13158  0045FE  D009               	goto	l199
 13159                           
 13160                           ; BSR set to: 0
 13161                           ;ENC424J600.c: 413: state->duplex = FULL_DUPLEX;
 13162  004600  EE20 F002          	lfsr	2,2
 13163  004604  5180               	movf	ethernetController_updateLinkStatus@state& (0+255),w,b
 13164  004606  26D9               	addwf	fsr2l,f,c
 13165  004608  5181               	movf	(ethernetController_updateLinkStatus@state+1)& (0+255),w,b
 13166  00460A  22DA               	addwfc	fsr2h,f,c
 13167  00460C  0E01               	movlw	1
 13168  00460E  6EDF               	movwf	indf2,c
 13169                           
 13170                           ;ENC424J600.c: 414: } else {
 13171  004610  0012               	return	
 13172  004612                     l199:
 13173                           
 13174                           ; BSR set to: 0
 13175                           ;ENC424J600.c: 415: state->duplex = HALF_DUPLEX;
 13176                           
 13177                           ; BSR set to: 0
 13178  004612  EE20 F002          	lfsr	2,2
 13179  004616  5180               	movf	ethernetController_updateLinkStatus@state& (0+255),w,b
 13180  004618  26D9               	addwf	fsr2l,f,c
 13181  00461A  5181               	movf	(ethernetController_updateLinkStatus@state+1)& (0+255),w,b
 13182  00461C  22DA               	addwfc	fsr2h,f,c
 13183  00461E  0E00               	movlw	0
 13184  004620  6EDF               	movwf	indf2,c
 13185  004622  0012               	return	
 13186  004624                     __end_of_ethernetController_updateLinkStatus:
 13187                           	opt stack 0
 13188                           tblptru	equ	0xFF8
 13189                           tblptrh	equ	0xFF7
 13190                           tblptrl	equ	0xFF6
 13191                           tablat	equ	0xFF5
 13192                           prodh	equ	0xFF4
 13193                           prodl	equ	0xFF3
 13194                           intcon	equ	0xFF2
 13195                           intcon3	equ	0xFF0
 13196                           indf0	equ	0xFEF
 13197                           postinc0	equ	0xFEE
 13198                           plusw0	equ	0xFEB
 13199                           fsr0h	equ	0xFEA
 13200                           fsr0l	equ	0xFE9
 13201                           wreg	equ	0xFE8
 13202                           indf1	equ	0xFE7
 13203                           postinc1	equ	0xFE6
 13204                           postdec1	equ	0xFE5
 13205                           plusw1	equ	0xFE3
 13206                           fsr1h	equ	0xFE2
 13207                           fsr1l	equ	0xFE1
 13208                           indf2	equ	0xFDF
 13209                           postinc2	equ	0xFDE
 13210                           postdec2	equ	0xFDD
 13211                           plusw2	equ	0xFDB
 13212                           fsr2h	equ	0xFDA
 13213                           fsr2l	equ	0xFD9
 13214                           status	equ	0xFD8
 13215                           
 13216 ;; *************** function _enc424j600_readPHYRegister *****************
 13217 ;; Defined at:
 13218 ;;		line 538 in file "src/enc424j600/ENC424J600.c"
 13219 ;; Parameters:    Size  Location     Type
 13220 ;;  addr            1    wreg     unsigned char 
 13221 ;;  data            2   14[BANK0 ] PTR unsigned int 
 13222 ;;		 -> ethernetController_updateLinkStatus@temp16(2), 
 13223 ;; Auto vars:     Size  Location     Type
 13224 ;;  addr            1   22[BANK0 ] unsigned char 
 13225 ;;  timeoutCount    4   25[BANK0 ] unsigned long 
 13226 ;;  temp            1   31[BANK0 ] unsigned char 
 13227 ;;  highByte        1   30[BANK0 ] unsigned char 
 13228 ;;  lowByte         1   29[BANK0 ] unsigned char 
 13229 ;;  unusedBits      1   24[BANK0 ] unsigned char 
 13230 ;;  PHYaddress      1   23[BANK0 ] unsigned char 
 13231 ;; Return value:  Size  Location     Type
 13232 ;;                  1    wreg      void 
 13233 ;; Registers used:
 13234 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13235 ;; Tracked objects:
 13236 ;;		On entry : 0/0
 13237 ;;		On exit  : 0/0
 13238 ;;		Unchanged: 0/0
 13239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13240 ;;      Params:         0       2       0       0       0       0       0       0       0
 13241 ;;      Locals:         0      10       0       0       0       0       0       0       0
 13242 ;;      Temps:          0       6       0       0       0       0       0       0       0
 13243 ;;      Totals:         0      18       0       0       0       0       0       0       0
 13244 ;;Total ram usage:       18 bytes
 13245 ;; Hardware stack levels used:    1
 13246 ;; Hardware stack levels required when called:    7
 13247 ;; This function calls:
 13248 ;;		_enc424j600_readControlRegisterUnbanked
 13249 ;;		_enc424j600_writeControlRegisterUnbanked
 13250 ;; This function is called by:
 13251 ;;		_ethernetController_updateLinkStatus
 13252 ;; This function uses a non-reentrant model
 13253 ;;
 13254                           
 13255                           	psect	text44
 13256  0037D0                     __ptext44:
 13257                           	opt stack 0
 13258  0037D0                     _enc424j600_readPHYRegister:
 13259                           	opt stack 21
 13260                           
 13261                           ; BSR set to: 0
 13262                           ;incstack = 0
 13263                           ;enc424j600_readPHYRegister@addr stored from wreg
 13264  0037D0  0100               	movlb	0	; () banked
 13265  0037D2  6F76               	movwf	enc424j600_readPHYRegister@addr& (0+255),b
 13266                           
 13267                           ;ENC424J600.c: 540: uint8_t PHYaddress = addr & 0x1F;
 13268  0037D4  0100               	movlb	0	; () banked
 13269  0037D6  5176               	movf	enc424j600_readPHYRegister@addr& (0+255),w,b
 13270  0037D8  0B1F               	andlw	31
 13271  0037DA  6F77               	movwf	enc424j600_readPHYRegister@PHYaddress& (0+255),b
 13272                           
 13273                           ; BSR set to: 0
 13274                           ;ENC424J600.c: 541: uint8_t unusedBits = 0x01;
 13275  0037DC  0E01               	movlw	1
 13276  0037DE  6F78               	movwf	enc424j600_readPHYRegister@unusedBits& (0+255),b
 13277                           
 13278                           ; BSR set to: 0
 13279                           ;ENC424J600.c: 542: uint8_t temp;
 13280                           ;ENC424J600.c: 543: uint8_t lowByte;
 13281                           ;ENC424J600.c: 544: uint8_t highByte;
 13282                           ;ENC424J600.c: 545: uint32_t timeoutCounter = 0;
 13283  0037E0  0E00               	movlw	0
 13284  0037E2  6F79               	movwf	enc424j600_readPHYRegister@timeoutCounter& (0+255),b
 13285  0037E4  0E00               	movlw	0
 13286  0037E6  6F7A               	movwf	(enc424j600_readPHYRegister@timeoutCounter+1)& (0+255),b
 13287  0037E8  0E00               	movlw	0
 13288  0037EA  6F7B               	movwf	(enc424j600_readPHYRegister@timeoutCounter+2)& (0+255),b
 13289  0037EC  0E00               	movlw	0
 13290  0037EE  6F7C               	movwf	(enc424j600_readPHYRegister@timeoutCounter+3)& (0+255),b
 13291                           
 13292                           ; BSR set to: 0
 13293                           ;ENC424J600.c: 547: enc424j600_writeControlRegisterUnbanked(0x14 + 0x40, &PHYaddress);
 13294  0037F0  0E77               	movlw	low enc424j600_readPHYRegister@PHYaddress
 13295  0037F2  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 13296  0037F4  0E00               	movlw	high enc424j600_readPHYRegister@PHYaddress
 13297  0037F6  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 13298  0037F8  0E54               	movlw	84
 13299  0037FA  EC61  F029         	call	_enc424j600_writeControlRegisterUnbanked
 13300                           
 13301                           ;ENC424J600.c: 548: enc424j600_writeControlRegisterUnbanked(0x15 + 0x40, &unusedBits);
 13302  0037FE  0E78               	movlw	low enc424j600_readPHYRegister@unusedBits
 13303  003800  0100               	movlb	0	; () banked
 13304  003802  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 13305  003804  0E00               	movlw	high enc424j600_readPHYRegister@unusedBits
 13306  003806  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 13307  003808  0E55               	movlw	85
 13308  00380A  EC61  F029         	call	_enc424j600_writeControlRegisterUnbanked
 13309                           
 13310                           ;ENC424J600.c: 551: enc424j600_readControlRegisterUnbanked(0x12 + 0x40, &temp);
 13311  00380E  0E7F               	movlw	low enc424j600_readPHYRegister@temp
 13312  003810  0100               	movlb	0	; () banked
 13313  003812  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 13314  003814  0E00               	movlw	high enc424j600_readPHYRegister@temp
 13315  003816  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 13316  003818  0E52               	movlw	82
 13317  00381A  EC7C  F029         	call	_enc424j600_readControlRegisterUnbanked
 13318                           
 13319                           ;ENC424J600.c: 552: temp |= 0x01;
 13320  00381E  0100               	movlb	0	; () banked
 13321  003820  817F               	bsf	enc424j600_readPHYRegister@temp& (0+255),0,b
 13322                           
 13323                           ; BSR set to: 0
 13324                           ;ENC424J600.c: 553: enc424j600_writeControlRegisterUnbanked(0x12 + 0x40, &temp);
 13325  003822  0E7F               	movlw	low enc424j600_readPHYRegister@temp
 13326  003824  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 13327  003826  0E00               	movlw	high enc424j600_readPHYRegister@temp
 13328  003828  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 13329  00382A  0E52               	movlw	82
 13330  00382C  EC61  F029         	call	_enc424j600_writeControlRegisterUnbanked
 13331                           
 13332                           ;ENC424J600.c: 555: _delay((unsigned long)((26)*(32000000UL/4000000.0)));
 13333  003830  0E45               	movlw	69
 13334  003832                     u12837:
 13335  003832  2EE8               	decfsz	wreg,f,c
 13336  003834  D7FE               	bra	u12837
 13337  003836  F000               	nop	
 13338  003838                     
 13339                           ;ENC424J600.c: 558: enc424j600_readControlRegisterUnbanked(0x0A + 0x60, &temp);
 13340  003838  0E7F               	movlw	low enc424j600_readPHYRegister@temp
 13341  00383A  0100               	movlb	0	; () banked
 13342  00383C  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 13343  00383E  0E00               	movlw	high enc424j600_readPHYRegister@temp
 13344  003840  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 13345  003842  0E6A               	movlw	106
 13346  003844  EC7C  F029         	call	_enc424j600_readControlRegisterUnbanked
 13347                           
 13348                           ;ENC424J600.c: 559: timeoutCounter++;
 13349  003848  0E01               	movlw	1
 13350  00384A  0100               	movlb	0	; () banked
 13351  00384C  2779               	addwf	enc424j600_readPHYRegister@timeoutCounter& (0+255),f,b
 13352  00384E  0E00               	movlw	0
 13353  003850  237A               	addwfc	(enc424j600_readPHYRegister@timeoutCounter+1)& (0+255),f,b
 13354  003852  237B               	addwfc	(enc424j600_readPHYRegister@timeoutCounter+2)& (0+255),f,b
 13355  003854  237C               	addwfc	(enc424j600_readPHYRegister@timeoutCounter+3)& (0+255),f,b
 13356                           
 13357                           ; BSR set to: 0
 13358                           ;ENC424J600.c: 560: } while ((temp & 0x01) && (timeoutCounter < 0xfff));
 13359  003856  A17F               	btfss	enc424j600_readPHYRegister@temp& (0+255),0,b
 13360  003858  D008               	goto	u11390
 13361                           
 13362                           ; BSR set to: 0
 13363  00385A  517C               	movf	(enc424j600_readPHYRegister@timeoutCounter+3)& (0+255),w,b
 13364  00385C  117B               	iorwf	(enc424j600_readPHYRegister@timeoutCounter+2)& (0+255),w,b
 13365  00385E  E105               	bnz	l9645
 13366  003860  2979               	incf	enc424j600_readPHYRegister@timeoutCounter& (0+255),w,b
 13367  003862  0E0F               	movlw	15
 13368  003864  597A               	subwfb	(enc424j600_readPHYRegister@timeoutCounter+1)& (0+255),w,b
 13369  003866  A0D8               	btfss	status,0,c
 13370  003868  D7E7               	goto	l258
 13371  00386A                     u11390:
 13372  00386A                     l9645:
 13373                           
 13374                           ; BSR set to: 0
 13375                           ;ENC424J600.c: 561: if (timeoutCounter >= 0xfff)
 13376  00386A  517C               	movf	(enc424j600_readPHYRegister@timeoutCounter+3)& (0+255),w,b
 13377  00386C  117B               	iorwf	(enc424j600_readPHYRegister@timeoutCounter+2)& (0+255),w,b
 13378  00386E  E140               	bnz	l263
 13379  003870  2979               	incf	enc424j600_readPHYRegister@timeoutCounter& (0+255),w,b
 13380  003872  0E0F               	movlw	15
 13381  003874  597A               	subwfb	(enc424j600_readPHYRegister@timeoutCounter+1)& (0+255),w,b
 13382  003876  B0D8               	btfsc	status,0,c
 13383  003878  0012               	return	
 13384                           
 13385                           ; BSR set to: 0
 13386                           ;ENC424J600.c: 565: enc424j600_readControlRegisterUnbanked(0x12 + 0x40, &temp);
 13387                           
 13388                           ; BSR set to: 0
 13389                           
 13390                           ; BSR set to: 0
 13391                           ;ENC424J600.c: 562: return;
 13392  00387A  0E7F               	movlw	low enc424j600_readPHYRegister@temp
 13393  00387C  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 13394  00387E  0E00               	movlw	high enc424j600_readPHYRegister@temp
 13395  003880  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 13396  003882  0E52               	movlw	82
 13397  003884  EC7C  F029         	call	_enc424j600_readControlRegisterUnbanked
 13398                           
 13399                           ;ENC424J600.c: 566: temp &= ~0x01;
 13400  003888  0100               	movlb	0	; () banked
 13401  00388A  917F               	bcf	enc424j600_readPHYRegister@temp& (0+255),0,b
 13402                           
 13403                           ; BSR set to: 0
 13404                           ;ENC424J600.c: 567: enc424j600_writeControlRegisterUnbanked(0x12 + 0x40, &temp);
 13405  00388C  0E7F               	movlw	low enc424j600_readPHYRegister@temp
 13406  00388E  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 13407  003890  0E00               	movlw	high enc424j600_readPHYRegister@temp
 13408  003892  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 13409  003894  0E52               	movlw	82
 13410  003896  EC61  F029         	call	_enc424j600_writeControlRegisterUnbanked
 13411                           
 13412                           ;ENC424J600.c: 570: enc424j600_readControlRegisterUnbanked(0x08 + 0x60, &lowByte);
 13413  00389A  0E7D               	movlw	low enc424j600_readPHYRegister@lowByte
 13414  00389C  0100               	movlb	0	; () banked
 13415  00389E  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 13416  0038A0  0E00               	movlw	high enc424j600_readPHYRegister@lowByte
 13417  0038A2  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 13418  0038A4  0E68               	movlw	104
 13419  0038A6  EC7C  F029         	call	_enc424j600_readControlRegisterUnbanked
 13420                           
 13421                           ;ENC424J600.c: 571: enc424j600_readControlRegisterUnbanked(0x09 + 0x60, &highByte);
 13422  0038AA  0E7E               	movlw	low enc424j600_readPHYRegister@highByte
 13423  0038AC  0100               	movlb	0	; () banked
 13424  0038AE  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 13425  0038B0  0E00               	movlw	high enc424j600_readPHYRegister@highByte
 13426  0038B2  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 13427  0038B4  0E69               	movlw	105
 13428  0038B6  EC7C  F029         	call	_enc424j600_readControlRegisterUnbanked
 13429                           
 13430                           ;ENC424J600.c: 572: *data = (lowByte | ((highByte << 8)&0xff00));
 13431  0038BA  0E00               	movlw	0
 13432  0038BC  0100               	movlb	0	; () banked
 13433  0038BE  6F70               	movwf	??_enc424j600_readPHYRegister& (0+255),b
 13434  0038C0  0EFF               	movlw	255
 13435  0038C2  6F71               	movwf	(??_enc424j600_readPHYRegister+1)& (0+255),b
 13436  0038C4  517E               	movf	enc424j600_readPHYRegister@highByte& (0+255),w,b
 13437  0038C6  6F73               	movwf	(??_enc424j600_readPHYRegister+3)& (0+255),b
 13438  0038C8  6B72               	clrf	(??_enc424j600_readPHYRegister+2)& (0+255),b
 13439  0038CA  5170               	movf	??_enc424j600_readPHYRegister& (0+255),w,b
 13440  0038CC  1772               	andwf	(??_enc424j600_readPHYRegister+2)& (0+255),f,b
 13441  0038CE  5171               	movf	(??_enc424j600_readPHYRegister+1)& (0+255),w,b
 13442  0038D0  1773               	andwf	(??_enc424j600_readPHYRegister+3)& (0+255),f,b
 13443  0038D2  517D               	movf	enc424j600_readPHYRegister@lowByte& (0+255),w,b
 13444  0038D4  6F74               	movwf	(??_enc424j600_readPHYRegister+4)& (0+255),b
 13445  0038D6  6B75               	clrf	(??_enc424j600_readPHYRegister+5)& (0+255),b
 13446  0038D8  5172               	movf	(??_enc424j600_readPHYRegister+2)& (0+255),w,b
 13447  0038DA  1374               	iorwf	(??_enc424j600_readPHYRegister+4)& (0+255),f,b
 13448  0038DC  5173               	movf	(??_enc424j600_readPHYRegister+3)& (0+255),w,b
 13449  0038DE  1375               	iorwf	(??_enc424j600_readPHYRegister+5)& (0+255),f,b
 13450  0038E0  C06E  FFD9         	movff	enc424j600_readPHYRegister@data,fsr2l
 13451  0038E4  C06F  FFDA         	movff	enc424j600_readPHYRegister@data+1,fsr2h
 13452  0038E8  C074  FFDE         	movff	??_enc424j600_readPHYRegister+4,postinc2
 13453  0038EC  C075  FFDD         	movff	??_enc424j600_readPHYRegister+5,postdec2
 13454  0038F0                     l263:
 13455                           
 13456                           ; BSR set to: 0
 13457  0038F0  0012               	return		;funcret
 13458  0038F2                     __end_of_enc424j600_readPHYRegister:
 13459                           	opt stack 0
 13460                           tblptru	equ	0xFF8
 13461                           tblptrh	equ	0xFF7
 13462                           tblptrl	equ	0xFF6
 13463                           tablat	equ	0xFF5
 13464                           prodh	equ	0xFF4
 13465                           prodl	equ	0xFF3
 13466                           intcon	equ	0xFF2
 13467                           intcon3	equ	0xFF0
 13468                           indf0	equ	0xFEF
 13469                           postinc0	equ	0xFEE
 13470                           plusw0	equ	0xFEB
 13471                           fsr0h	equ	0xFEA
 13472                           fsr0l	equ	0xFE9
 13473                           wreg	equ	0xFE8
 13474                           indf1	equ	0xFE7
 13475                           postinc1	equ	0xFE6
 13476                           postdec1	equ	0xFE5
 13477                           plusw1	equ	0xFE3
 13478                           fsr1h	equ	0xFE2
 13479                           fsr1l	equ	0xFE1
 13480                           indf2	equ	0xFDF
 13481                           postinc2	equ	0xFDE
 13482                           postdec2	equ	0xFDD
 13483                           plusw2	equ	0xFDB
 13484                           fsr2h	equ	0xFDA
 13485                           fsr2l	equ	0xFD9
 13486                           status	equ	0xFD8
 13487                           
 13488 ;; *************** function _ethernetController_setLEDConfig *****************
 13489 ;; Defined at:
 13490 ;;		line 419 in file "src/enc424j600/ENC424J600.c"
 13491 ;; Parameters:    Size  Location     Type
 13492 ;;  LED             1    wreg     enum E5569
 13493 ;;  conf            1   14[BANK0 ] enum E5573
 13494 ;; Auto vars:     Size  Location     Type
 13495 ;;  LED             1   15[BANK0 ] enum E5569
 13496 ;;  data            1   16[BANK0 ] unsigned char 
 13497 ;; Return value:  Size  Location     Type
 13498 ;;                  1    wreg      void 
 13499 ;; Registers used:
 13500 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13501 ;; Tracked objects:
 13502 ;;		On entry : 0/0
 13503 ;;		On exit  : 0/0
 13504 ;;		Unchanged: 0/0
 13505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13506 ;;      Params:         0       1       0       0       0       0       0       0       0
 13507 ;;      Locals:         0       2       0       0       0       0       0       0       0
 13508 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13509 ;;      Totals:         0       3       0       0       0       0       0       0       0
 13510 ;;Total ram usage:        3 bytes
 13511 ;; Hardware stack levels used:    1
 13512 ;; Hardware stack levels required when called:    7
 13513 ;; This function calls:
 13514 ;;		_enc424j600_readControlRegisterUnbanked
 13515 ;;		_enc424j600_writeControlRegisterUnbanked
 13516 ;; This function is called by:
 13517 ;;		_handleStackBackgroundTasks
 13518 ;;		_main
 13519 ;; This function uses a non-reentrant model
 13520 ;;
 13521                           
 13522                           	psect	text45
 13523  00450C                     __ptext45:
 13524                           	opt stack 0
 13525  00450C                     _ethernetController_setLEDConfig:
 13526                           	opt stack 22
 13527                           
 13528                           ; BSR set to: 0
 13529                           ;incstack = 0
 13530                           ;ethernetController_setLEDConfig@LED stored from wreg
 13531  00450C  0100               	movlb	0	; () banked
 13532  00450E  6F6F               	movwf	ethernetController_setLEDConfig@LED& (0+255),b
 13533                           
 13534                           ;ENC424J600.c: 420: uint8_t data;
 13535                           ;ENC424J600.c: 421: enc424j600_readControlRegisterUnbanked(0x15 + 0x60, &data);
 13536  004510  0E70               	movlw	low ethernetController_setLEDConfig@data
 13537  004512  0100               	movlb	0	; () banked
 13538  004514  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 13539  004516  0E00               	movlw	high ethernetController_setLEDConfig@data
 13540  004518  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 13541  00451A  0E75               	movlw	117
 13542  00451C  EC7C  F029         	call	_enc424j600_readControlRegisterUnbanked
 13543                           
 13544                           ;ENC424J600.c: 422: if (LED == LEDB) {
 13545  004520  0100               	movlb	0	; () banked
 13546  004522  056F               	decf	ethernetController_setLEDConfig@LED& (0+255),w,b
 13547  004524  B4D8               	btfsc	status,2,c
 13548  004526  D00B               	goto	l205
 13549  004528  D015               	goto	l204
 13550  00452A                     
 13551                           ; BSR set to: 0
 13552                           ;ENC424J600.c: 427: data &= ~0x0f;
 13553                           
 13554                           ; BSR set to: 0
 13555                           
 13556                           ;ENC424J600.c: 426: case LED_OFF:
 13557                           
 13558                           ; BSR set to: 0
 13559  00452A  0EF0               	movlw	240
 13560  00452C  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 13561                           
 13562                           ; BSR set to: 0
 13563                           ;ENC424J600.c: 428: data |= 0x01;
 13564  00452E  8170               	bsf	ethernetController_setLEDConfig@data& (0+255),0,b
 13565                           
 13566                           ;ENC424J600.c: 429: break;
 13567  004530  D02C               	goto	l216
 13568  004532                     
 13569                           ; BSR set to: 0
 13570                           ;ENC424J600.c: 431: data &= ~0x0f;
 13571                           
 13572                           ; BSR set to: 0
 13573  004532  0EF0               	movlw	240
 13574  004534  D018               	goto	L4
 13575  004536                     
 13576                           ; BSR set to: 0
 13577                           ;ENC424J600.c: 434: data &= ~0x0f;
 13578                           
 13579                           ; BSR set to: 0
 13580  004536  0EF0               	movlw	240
 13581  004538  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 13582                           
 13583                           ;ENC424J600.c: 435: data |= 0x06;
 13584  00453A  0E06               	movlw	6
 13585  00453C  D019               	goto	L5
 13586  00453E                     l205:
 13587                           
 13588                           ; BSR set to: 0
 13589                           
 13590                           ; BSR set to: 0
 13591  00453E  516E               	movf	ethernetController_setLEDConfig@conf& (0+255),w,b
 13592                           
 13593                           ; Switch size 1, requested type "space"
 13594                           ; Number of cases is 3, Range of values is 0 to 2
 13595                           ; switch strategies available:
 13596                           ; Name         Instructions Cycles
 13597                           ; simple_byte           10     6 (average)
 13598                           ;	Chosen strategy is simple_byte
 13599  004540  0A00               	xorlw	0	; case 0
 13600  004542  B4D8               	btfsc	status,2,c
 13601  004544  D7F6               	goto	l209
 13602  004546  0A01               	xorlw	1	; case 1
 13603  004548  B4D8               	btfsc	status,2,c
 13604  00454A  D7EF               	goto	l206
 13605  00454C  0A03               	xorlw	3	; case 2
 13606  00454E  B4D8               	btfsc	status,2,c
 13607  004550  D7F2               	goto	l210
 13608  004552  D7EB               	goto	l206
 13609  004554                     l204:
 13610                           
 13611                           ; BSR set to: 0
 13612                           
 13613                           ; BSR set to: 0
 13614  004554  516F               	movf	ethernetController_setLEDConfig@LED& (0+255),w,b
 13615  004556  B4D8               	btfsc	status,2,c
 13616  004558  D00D               	goto	l213
 13617  00455A  D017               	goto	l216
 13618  00455C                     
 13619                           ; BSR set to: 0
 13620                           ;ENC424J600.c: 442: data &= ~(0x0f << 4);
 13621                           
 13622                           ; BSR set to: 0
 13623                           
 13624                           ;ENC424J600.c: 441: case LED_OFF:
 13625                           
 13626                           ; BSR set to: 0
 13627  00455C  0E0F               	movlw	15
 13628  00455E  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 13629                           
 13630                           ; BSR set to: 0
 13631                           ;ENC424J600.c: 443: data |= (0x01 << 4);
 13632  004560  8970               	bsf	ethernetController_setLEDConfig@data& (0+255),4,b
 13633                           
 13634                           ;ENC424J600.c: 444: break;
 13635  004562  D013               	goto	l216
 13636  004564                     
 13637                           ; BSR set to: 0
 13638                           ;ENC424J600.c: 446: data &= ~(0x0f << 4);
 13639                           
 13640                           ; BSR set to: 0
 13641  004564  0E0F               	movlw	15
 13642  004566                     L4:
 13643  004566  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 13644                           
 13645                           ;ENC424J600.c: 447: break;
 13646  004568  D010               	goto	l216
 13647  00456A                     
 13648                           ; BSR set to: 0
 13649                           ;ENC424J600.c: 449: data &= ~(0x0f << 4);
 13650                           
 13651                           ; BSR set to: 0
 13652  00456A  0E0F               	movlw	15
 13653  00456C  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 13654                           
 13655                           ;ENC424J600.c: 450: data |= (0x06 << 4);
 13656  00456E  0E60               	movlw	96
 13657  004570                     L5:
 13658  004570  1370               	iorwf	ethernetController_setLEDConfig@data& (0+255),f,b
 13659                           
 13660                           ; BSR set to: 0
 13661                           ;ENC424J600.c: 452: }
 13662                           
 13663                           ;ENC424J600.c: 451: break;
 13664  004572  D00B               	goto	l216
 13665  004574                     l213:
 13666                           
 13667                           ; BSR set to: 0
 13668                           
 13669                           ; BSR set to: 0
 13670  004574  516E               	movf	ethernetController_setLEDConfig@conf& (0+255),w,b
 13671                           
 13672                           ; Switch size 1, requested type "space"
 13673                           ; Number of cases is 3, Range of values is 0 to 2
 13674                           ; switch strategies available:
 13675                           ; Name         Instructions Cycles
 13676                           ; simple_byte           10     6 (average)
 13677                           ;	Chosen strategy is simple_byte
 13678  004576  0A00               	xorlw	0	; case 0
 13679  004578  B4D8               	btfsc	status,2,c
 13680  00457A  D7F4               	goto	l217
 13681  00457C  0A01               	xorlw	1	; case 1
 13682  00457E  B4D8               	btfsc	status,2,c
 13683  004580  D7ED               	goto	l214
 13684  004582  0A03               	xorlw	3	; case 2
 13685  004584  B4D8               	btfsc	status,2,c
 13686  004586  D7F1               	goto	l218
 13687  004588  D7E9               	goto	l214
 13688  00458A                     l216:
 13689                           
 13690                           ; BSR set to: 0
 13691                           ;ENC424J600.c: 453: }
 13692                           ;ENC424J600.c: 454: enc424j600_writeControlRegisterUnbanked(0x15 + 0x60, &data);
 13693                           
 13694                           ; BSR set to: 0
 13695                           
 13696                           ; BSR set to: 0
 13697                           
 13698                           ; BSR set to: 0
 13699  00458A  0E70               	movlw	low ethernetController_setLEDConfig@data
 13700  00458C  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 13701  00458E  0E00               	movlw	high ethernetController_setLEDConfig@data
 13702  004590  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 13703  004592  0E75               	movlw	117
 13704  004594  EC61  F029         	call	_enc424j600_writeControlRegisterUnbanked
 13705  004598  0012               	return		;funcret
 13706  00459A                     __end_of_ethernetController_setLEDConfig:
 13707                           	opt stack 0
 13708                           tblptru	equ	0xFF8
 13709                           tblptrh	equ	0xFF7
 13710                           tblptrl	equ	0xFF6
 13711                           tablat	equ	0xFF5
 13712                           prodh	equ	0xFF4
 13713                           prodl	equ	0xFF3
 13714                           intcon	equ	0xFF2
 13715                           intcon3	equ	0xFF0
 13716                           indf0	equ	0xFEF
 13717                           postinc0	equ	0xFEE
 13718                           plusw0	equ	0xFEB
 13719                           fsr0h	equ	0xFEA
 13720                           fsr0l	equ	0xFE9
 13721                           wreg	equ	0xFE8
 13722                           indf1	equ	0xFE7
 13723                           postinc1	equ	0xFE6
 13724                           postdec1	equ	0xFE5
 13725                           plusw1	equ	0xFE3
 13726                           fsr1h	equ	0xFE2
 13727                           fsr1l	equ	0xFE1
 13728                           indf2	equ	0xFDF
 13729                           postinc2	equ	0xFDE
 13730                           postdec2	equ	0xFDD
 13731                           plusw2	equ	0xFDB
 13732                           fsr2h	equ	0xFDA
 13733                           fsr2l	equ	0xFD9
 13734                           status	equ	0xFD8
 13735                           
 13736 ;; *************** function _ethernetController_pollInterruptFlags *****************
 13737 ;; Defined at:
 13738 ;;		line 312 in file "src/enc424j600/ENC424J600.c"
 13739 ;; Parameters:    Size  Location     Type
 13740 ;;		None
 13741 ;; Auto vars:     Size  Location     Type
 13742 ;;  reg             2   32[BANK0 ] unsigned int 
 13743 ;;  flags           2   30[BANK0 ] struct interruptFlags
 13744 ;; Return value:  Size  Location     Type
 13745 ;;                  2   24[BANK0 ] struct interruptFlags
 13746 ;; Registers used:
 13747 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13748 ;; Tracked objects:
 13749 ;;		On entry : 0/0
 13750 ;;		On exit  : 0/0
 13751 ;;		Unchanged: 0/0
 13752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13753 ;;      Params:         0       2       0       0       0       0       0       0       0
 13754 ;;      Locals:         0       4       0       0       0       0       0       0       0
 13755 ;;      Temps:          0       4       0       0       0       0       0       0       0
 13756 ;;      Totals:         0      10       0       0       0       0       0       0       0
 13757 ;;Total ram usage:       10 bytes
 13758 ;; Hardware stack levels used:    1
 13759 ;; Hardware stack levels required when called:    8
 13760 ;; This function calls:
 13761 ;;		_enc424j600_getInterruptFlags
 13762 ;; This function is called by:
 13763 ;;		_handleStackBackgroundTasks
 13764 ;; This function uses a non-reentrant model
 13765 ;;
 13766                           
 13767                           	psect	text46
 13768  003414                     __ptext46:
 13769                           	opt stack 0
 13770  003414                     _ethernetController_pollInterruptFlags:
 13771                           	opt stack 21
 13772                           
 13773                           ;ENC424J600.c: 313: interruptFlags_t flags;
 13774                           ;ENC424J600.c: 314: uint16_t reg = enc424j600_getInterruptFlags();
 13775                           
 13776                           ;incstack = 0
 13777  003414  ECFF  F027         	call	_enc424j600_getInterruptFlags	;wreg free
 13778  003418  C06E  F080         	movff	?_enc424j600_getInterruptFlags,ethernetController_pollInterruptFlags@reg
 13779  00341C  C06F  F081         	movff	?_enc424j600_getInterruptFlags+1,ethernetController_pollInterruptFlags@reg+1
 13780                           
 13781                           ;ENC424J600.c: 315: flags.MODEXIF = (reg & (1 << MODEXIF)) != 0 ? 1 : 0;
 13782  003420  0100               	movlb	0	; () banked
 13783  003422  AD81               	btfss	(ethernetController_pollInterruptFlags@reg+1)& (0+255),6,b
 13784  003424  D003               	goto	u11750
 13785  003426  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13786  003428  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13787  00342A  D002               	goto	u11768
 13788  00342C                     u11750:
 13789  00342C  0100               	movlb	0	; () banked
 13790  00342E  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13791  003430                     u11768:
 13792  003430  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 13793  003432  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13794  003434  0BFE               	andlw	-2
 13795  003436  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13796  003438  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 13797                           
 13798                           ; BSR set to: 0
 13799                           ;ENC424J600.c: 316: flags.HASHIF = (reg & (1 << HASHIF)) != 0 ? 1 : 0;
 13800  00343A  AB81               	btfss	(ethernetController_pollInterruptFlags@reg+1)& (0+255),5,b
 13801  00343C  D003               	goto	u11770
 13802  00343E  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13803  003440  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13804  003442  D002               	goto	u11788
 13805  003444                     u11770:
 13806  003444  0100               	movlb	0	; () banked
 13807  003446  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13808  003448                     u11788:
 13809  003448  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13810  00344A  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 13811  00344C  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13812  00344E  0BFD               	andlw	-3
 13813  003450  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13814  003452  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 13815                           
 13816                           ; BSR set to: 0
 13817                           ;ENC424J600.c: 317: flags.AESIF = (reg & (1 << AESIF)) != 0 ? 1 : 0;
 13818  003454  A981               	btfss	(ethernetController_pollInterruptFlags@reg+1)& (0+255),4,b
 13819  003456  D003               	goto	u11790
 13820  003458  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13821  00345A  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13822  00345C  D002               	goto	u11808
 13823  00345E                     u11790:
 13824  00345E  0100               	movlb	0	; () banked
 13825  003460  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13826  003462                     u11808:
 13827  003462  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13828  003464  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13829  003466  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 13830  003468  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13831  00346A  0BFB               	andlw	-5
 13832  00346C  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13833  00346E  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 13834                           
 13835                           ; BSR set to: 0
 13836                           ;ENC424J600.c: 318: flags.LINKIF = (reg & (1 << LINKIF)) != 0 ? 1 : 0;
 13837  003470  A781               	btfss	(ethernetController_pollInterruptFlags@reg+1)& (0+255),3,b
 13838  003472  D003               	goto	u11810
 13839  003474  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13840  003476  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13841  003478  D002               	goto	u11828
 13842  00347A                     u11810:
 13843  00347A  0100               	movlb	0	; () banked
 13844  00347C  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13845  00347E                     u11828:
 13846  00347E  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13847  003480  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13848  003482  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13849  003484  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 13850  003486  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13851  003488  0BF7               	andlw	-9
 13852  00348A  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13853  00348C  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 13854                           
 13855                           ; BSR set to: 0
 13856                           ;ENC424J600.c: 320: flags.PKTIF = (reg & (1 << PKTIF)) != 0 ? 1 : 0;
 13857  00348E  AD80               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),6,b
 13858  003490  D003               	goto	u11830
 13859  003492  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13860  003494  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13861  003496  D002               	goto	u11848
 13862  003498                     u11830:
 13863  003498  0100               	movlb	0	; () banked
 13864  00349A  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13865  00349C                     u11848:
 13866  00349C  3B7A               	swapf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13867  00349E  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 13868  0034A0  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13869  0034A2  0BEF               	andlw	-17
 13870  0034A4  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13871  0034A6  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 13872                           
 13873                           ; BSR set to: 0
 13874                           ;ENC424J600.c: 321: flags.DMAIF = (reg & (1 << DMAIF)) != 0 ? 1 : 0;
 13875  0034A8  AB80               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),5,b
 13876  0034AA  D003               	goto	u11850
 13877  0034AC  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13878  0034AE  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13879  0034B0  D002               	goto	u11868
 13880  0034B2                     u11850:
 13881  0034B2  0100               	movlb	0	; () banked
 13882  0034B4  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13883  0034B6                     u11868:
 13884  0034B6  3B7A               	swapf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13885  0034B8  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13886  0034BA  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 13887  0034BC  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13888  0034BE  0BDF               	andlw	-33
 13889  0034C0  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13890  0034C2  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 13891                           
 13892                           ; BSR set to: 0
 13893                           ;ENC424J600.c: 323: flags.TXIF = (reg & (1 << TXIF)) != 0 ? 1 : 0;
 13894  0034C4  A89E               	btfss	3998,4,c	;volatile
 13895  0034C6  D003               	goto	u11870
 13896  0034C8  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13897  0034CA  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13898  0034CC  D002               	goto	u11888
 13899  0034CE                     u11870:
 13900  0034CE  0100               	movlb	0	; () banked
 13901  0034D0  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13902  0034D2                     u11888:
 13903  0034D2  0E01               	movlw	1
 13904  0034D4  6F7B               	movwf	(??_ethernetController_pollInterruptFlags+1)& (0+255),b
 13905  0034D6  0E00               	movlw	0
 13906  0034D8  6F7C               	movwf	(??_ethernetController_pollInterruptFlags+2)& (0+255),b
 13907  0034DA  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13908  0034DC  D003               	goto	u11894
 13909  0034DE                     u11895:
 13910  0034DE  90D8               	bcf	status,0,c
 13911  0034E0  377B               	rlcf	(??_ethernetController_pollInterruptFlags+1)& (0+255),f,b
 13912  0034E2  377C               	rlcf	(??_ethernetController_pollInterruptFlags+2)& (0+255),f,b
 13913  0034E4                     u11894:
 13914  0034E4  2F7A               	decfsz	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13915  0034E6  D7FB               	goto	u11895
 13916  0034E8  0100               	movlb	0	; () banked
 13917  0034EA  5180               	movf	ethernetController_pollInterruptFlags@reg& (0+255),w,b
 13918  0034EC  177B               	andwf	(??_ethernetController_pollInterruptFlags+1)& (0+255),f,b
 13919  0034EE  5181               	movf	(ethernetController_pollInterruptFlags@reg+1)& (0+255),w,b
 13920  0034F0  177C               	andwf	(??_ethernetController_pollInterruptFlags+2)& (0+255),f,b
 13921  0034F2  517B               	movf	(??_ethernetController_pollInterruptFlags+1)& (0+255),w,b
 13922  0034F4  117C               	iorwf	(??_ethernetController_pollInterruptFlags+2)& (0+255),w,b
 13923  0034F6  B4D8               	btfsc	status,2,c
 13924  0034F8  D003               	goto	u11900
 13925  0034FA  6B7D               	clrf	(??_ethernetController_pollInterruptFlags+3)& (0+255),b
 13926  0034FC  2B7D               	incf	(??_ethernetController_pollInterruptFlags+3)& (0+255),f,b
 13927  0034FE  D002               	goto	u11918
 13928  003500                     u11900:
 13929  003500  0100               	movlb	0	; () banked
 13930  003502  6B7D               	clrf	(??_ethernetController_pollInterruptFlags+3)& (0+255),b
 13931  003504                     u11918:
 13932  003504  3B7D               	swapf	(??_ethernetController_pollInterruptFlags+3)& (0+255),f,b
 13933  003506  477D               	rlncf	(??_ethernetController_pollInterruptFlags+3)& (0+255),f,b
 13934  003508  477D               	rlncf	(??_ethernetController_pollInterruptFlags+3)& (0+255),f,b
 13935  00350A  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 13936  00350C  197D               	xorwf	(??_ethernetController_pollInterruptFlags+3)& (0+255),w,b
 13937  00350E  0BBF               	andlw	-65
 13938  003510  197D               	xorwf	(??_ethernetController_pollInterruptFlags+3)& (0+255),w,b
 13939  003512  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 13940                           
 13941                           ; BSR set to: 0
 13942                           ;ENC424J600.c: 324: flags.TXABTIF = (reg & (1 << TXABTIF)) != 0 ? 1 : 0;
 13943  003514  A580               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),2,b
 13944  003516  D003               	goto	u11920
 13945  003518  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13946  00351A  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13947  00351C  D002               	goto	u11938
 13948  00351E                     u11920:
 13949  00351E  0100               	movlb	0	; () banked
 13950  003520  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13951  003522                     u11938:
 13952  003522  337A               	rrcf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13953  003524  337A               	rrcf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13954  003526  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 13955  003528  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13956  00352A  0B7F               	andlw	-129
 13957  00352C  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13958  00352E  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 13959                           
 13960                           ; BSR set to: 0
 13961                           ;ENC424J600.c: 325: flags.RXABTIF = (reg & (1 << RXABTIF)) != 0 ? 1 : 0;
 13962  003530  A380               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),1,b
 13963  003532  D003               	goto	u11940
 13964  003534  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13965  003536  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13966  003538  D002               	goto	u11958
 13967  00353A                     u11940:
 13968  00353A  0100               	movlb	0	; () banked
 13969  00353C  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13970  00353E                     u11958:
 13971  00353E  517F               	movf	(ethernetController_pollInterruptFlags@flags+1)& (0+255),w,b
 13972  003540  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13973  003542  0BFE               	andlw	-2
 13974  003544  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13975  003546  6F7F               	movwf	(ethernetController_pollInterruptFlags@flags+1)& (0+255),b
 13976                           
 13977                           ; BSR set to: 0
 13978                           ;ENC424J600.c: 326: flags.PCFULIF = (reg & (1 << PCFULIF)) != 0 ? 1 : 0;
 13979  003548  A180               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),0,b
 13980  00354A  D003               	goto	u11960
 13981  00354C  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13982  00354E  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13983  003550  D002               	goto	u11978
 13984  003552                     u11960:
 13985  003552  0100               	movlb	0	; () banked
 13986  003554  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13987  003556                     u11978:
 13988  003556  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13989  003558  517F               	movf	(ethernetController_pollInterruptFlags@flags+1)& (0+255),w,b
 13990  00355A  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13991  00355C  0BFD               	andlw	-3
 13992  00355E  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13993  003560  6F7F               	movwf	(ethernetController_pollInterruptFlags@flags+1)& (0+255),b
 13994                           
 13995                           ; BSR set to: 0
 13996                           ;ENC424J600.c: 327: return flags;
 13997  003562  C07E  F078         	movff	ethernetController_pollInterruptFlags@flags,?_ethernetController_pollInterruptFla
      +                          gs
 13998  003566  C07F  F079         	movff	ethernetController_pollInterruptFlags@flags+1,?_ethernetController_pollInterruptF
      +                          lags+1
 13999  00356A  0012               	return	
 14000  00356C                     __end_of_ethernetController_pollInterruptFlags:
 14001                           	opt stack 0
 14002                           tblptru	equ	0xFF8
 14003                           tblptrh	equ	0xFF7
 14004                           tblptrl	equ	0xFF6
 14005                           tablat	equ	0xFF5
 14006                           prodh	equ	0xFF4
 14007                           prodl	equ	0xFF3
 14008                           intcon	equ	0xFF2
 14009                           intcon3	equ	0xFF0
 14010                           indf0	equ	0xFEF
 14011                           postinc0	equ	0xFEE
 14012                           plusw0	equ	0xFEB
 14013                           fsr0h	equ	0xFEA
 14014                           fsr0l	equ	0xFE9
 14015                           wreg	equ	0xFE8
 14016                           indf1	equ	0xFE7
 14017                           postinc1	equ	0xFE6
 14018                           postdec1	equ	0xFE5
 14019                           plusw1	equ	0xFE3
 14020                           fsr1h	equ	0xFE2
 14021                           fsr1l	equ	0xFE1
 14022                           indf2	equ	0xFDF
 14023                           postinc2	equ	0xFDE
 14024                           postdec2	equ	0xFDD
 14025                           plusw2	equ	0xFDB
 14026                           fsr2h	equ	0xFDA
 14027                           fsr2l	equ	0xFD9
 14028                           status	equ	0xFD8
 14029                           
 14030 ;; *************** function _enc424j600_getInterruptFlags *****************
 14031 ;; Defined at:
 14032 ;;		line 696 in file "src/enc424j600/ENC424J600.c"
 14033 ;; Parameters:    Size  Location     Type
 14034 ;;		None
 14035 ;; Auto vars:     Size  Location     Type
 14036 ;;  high            1   23[BANK0 ] unsigned char 
 14037 ;;  low             1   22[BANK0 ] unsigned char 
 14038 ;; Return value:  Size  Location     Type
 14039 ;;                  2   14[BANK0 ] unsigned int 
 14040 ;; Registers used:
 14041 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14042 ;; Tracked objects:
 14043 ;;		On entry : 0/0
 14044 ;;		On exit  : 0/0
 14045 ;;		Unchanged: 0/0
 14046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14047 ;;      Params:         0       2       0       0       0       0       0       0       0
 14048 ;;      Locals:         0       2       0       0       0       0       0       0       0
 14049 ;;      Temps:          0       6       0       0       0       0       0       0       0
 14050 ;;      Totals:         0      10       0       0       0       0       0       0       0
 14051 ;;Total ram usage:       10 bytes
 14052 ;; Hardware stack levels used:    1
 14053 ;; Hardware stack levels required when called:    7
 14054 ;; This function calls:
 14055 ;;		_enc424j600_readControlRegisterUnbanked
 14056 ;; This function is called by:
 14057 ;;		_ethernetController_pollInterruptFlags
 14058 ;; This function uses a non-reentrant model
 14059 ;;
 14060                           
 14061                           	psect	text47
 14062  004FFE                     __ptext47:
 14063                           	opt stack 0
 14064  004FFE                     _enc424j600_getInterruptFlags:
 14065                           	opt stack 21
 14066                           
 14067                           ;ENC424J600.c: 697: uint8_t low, high;
 14068                           ;ENC424J600.c: 698: enc424j600_readControlRegisterUnbanked(0x1C + 0x00, &low);
 14069                           
 14070                           ; BSR set to: 0
 14071                           ;incstack = 0
 14072  004FFE  0E76               	movlw	low enc424j600_getInterruptFlags@low
 14073  005000  0100               	movlb	0	; () banked
 14074  005002  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 14075  005004  0E00               	movlw	high enc424j600_getInterruptFlags@low
 14076  005006  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 14077  005008  0E1C               	movlw	28
 14078  00500A  EC7C  F029         	call	_enc424j600_readControlRegisterUnbanked
 14079                           
 14080                           ;ENC424J600.c: 699: enc424j600_readControlRegisterUnbanked(0x1D + 0x00, &high);
 14081  00500E  0E77               	movlw	low enc424j600_getInterruptFlags@high
 14082  005010  0100               	movlb	0	; () banked
 14083  005012  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 14084  005014  0E00               	movlw	high enc424j600_getInterruptFlags@high
 14085  005016  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 14086  005018  0E1D               	movlw	29
 14087  00501A  EC7C  F029         	call	_enc424j600_readControlRegisterUnbanked
 14088                           
 14089                           ;ENC424J600.c: 700: return ( (((uint16_t) low)&0x00ff) | (((uint16_t) high << 8)&0xff00)
      +                          );
 14090  00501E  0E00               	movlw	0
 14091  005020  0100               	movlb	0	; () banked
 14092  005022  6F70               	movwf	??_enc424j600_getInterruptFlags& (0+255),b
 14093  005024  0EFF               	movlw	255
 14094  005026  6F71               	movwf	(??_enc424j600_getInterruptFlags+1)& (0+255),b
 14095  005028  5177               	movf	enc424j600_getInterruptFlags@high& (0+255),w,b
 14096  00502A  6F73               	movwf	(??_enc424j600_getInterruptFlags+3)& (0+255),b
 14097  00502C  6B72               	clrf	(??_enc424j600_getInterruptFlags+2)& (0+255),b
 14098  00502E  5170               	movf	??_enc424j600_getInterruptFlags& (0+255),w,b
 14099  005030  1772               	andwf	(??_enc424j600_getInterruptFlags+2)& (0+255),f,b
 14100  005032  5171               	movf	(??_enc424j600_getInterruptFlags+1)& (0+255),w,b
 14101  005034  1773               	andwf	(??_enc424j600_getInterruptFlags+3)& (0+255),f,b
 14102  005036  5176               	movf	enc424j600_getInterruptFlags@low& (0+255),w,b
 14103  005038  6F74               	movwf	(??_enc424j600_getInterruptFlags+4)& (0+255),b
 14104  00503A  6B75               	clrf	(??_enc424j600_getInterruptFlags+5)& (0+255),b
 14105  00503C  5172               	movf	(??_enc424j600_getInterruptFlags+2)& (0+255),w,b
 14106  00503E  1174               	iorwf	(??_enc424j600_getInterruptFlags+4)& (0+255),w,b
 14107  005040  6F6E               	movwf	?_enc424j600_getInterruptFlags& (0+255),b
 14108  005042  5173               	movf	(??_enc424j600_getInterruptFlags+3)& (0+255),w,b
 14109  005044  1175               	iorwf	(??_enc424j600_getInterruptFlags+5)& (0+255),w,b
 14110  005046  6F6F               	movwf	(?_enc424j600_getInterruptFlags+1)& (0+255),b
 14111  005048  0012               	return	
 14112  00504A                     __end_of_enc424j600_getInterruptFlags:
 14113                           	opt stack 0
 14114                           tblptru	equ	0xFF8
 14115                           tblptrh	equ	0xFF7
 14116                           tblptrl	equ	0xFF6
 14117                           tablat	equ	0xFF5
 14118                           prodh	equ	0xFF4
 14119                           prodl	equ	0xFF3
 14120                           intcon	equ	0xFF2
 14121                           intcon3	equ	0xFF0
 14122                           indf0	equ	0xFEF
 14123                           postinc0	equ	0xFEE
 14124                           plusw0	equ	0xFEB
 14125                           fsr0h	equ	0xFEA
 14126                           fsr0l	equ	0xFE9
 14127                           wreg	equ	0xFE8
 14128                           indf1	equ	0xFE7
 14129                           postinc1	equ	0xFE6
 14130                           postdec1	equ	0xFE5
 14131                           plusw1	equ	0xFE3
 14132                           fsr1h	equ	0xFE2
 14133                           fsr1l	equ	0xFE1
 14134                           indf2	equ	0xFDF
 14135                           postinc2	equ	0xFDE
 14136                           postdec2	equ	0xFDD
 14137                           plusw2	equ	0xFDB
 14138                           fsr2h	equ	0xFDA
 14139                           fsr2l	equ	0xFD9
 14140                           status	equ	0xFD8
 14141                           
 14142 ;; *************** function _ethernetController_newPacketAvailable *****************
 14143 ;; Defined at:
 14144 ;;		line 390 in file "src/enc424j600/ENC424J600.c"
 14145 ;; Parameters:    Size  Location     Type
 14146 ;;		None
 14147 ;; Auto vars:     Size  Location     Type
 14148 ;;		None
 14149 ;; Return value:  Size  Location     Type
 14150 ;;                  1    wreg      unsigned char 
 14151 ;; Registers used:
 14152 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14153 ;; Tracked objects:
 14154 ;;		On entry : 0/0
 14155 ;;		On exit  : 0/0
 14156 ;;		Unchanged: 0/0
 14157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14158 ;;      Params:         0       0       0       0       0       0       0       0       0
 14159 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14160 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14161 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14162 ;;Total ram usage:        0 bytes
 14163 ;; Hardware stack levels used:    1
 14164 ;; Hardware stack levels required when called:    8
 14165 ;; This function calls:
 14166 ;;		_enc424j600_getPacketCount
 14167 ;; This function is called by:
 14168 ;;		_handleStackBackgroundTasks
 14169 ;; This function uses a non-reentrant model
 14170 ;;
 14171                           
 14172                           	psect	text48
 14173  0056F8                     __ptext48:
 14174                           	opt stack 0
 14175  0056F8                     _ethernetController_newPacketAvailable:
 14176                           	opt stack 21
 14177                           
 14178                           ;ENC424J600.c: 391: return (unsigned) (enc424j600_getPacketCount() != 0);
 14179                           
 14180                           ; BSR set to: 0
 14181                           ;incstack = 0
 14182  0056F8  EC46  F02B         	call	_enc424j600_getPacketCount	;wreg free
 14183  0056FC  0900               	iorlw	0
 14184  0056FE  B4D8               	btfsc	status,2,c
 14185  005700  D002               	goto	u11980
 14186  005702  0E01               	movlw	1
 14187  005704  0012               	return	
 14188  005706                     u11980:
 14189  005706  0E00               	movlw	0
 14190  005708  0012               	return	
 14191  00570A                     __end_of_ethernetController_newPacketAvailable:
 14192                           	opt stack 0
 14193                           tblptru	equ	0xFF8
 14194                           tblptrh	equ	0xFF7
 14195                           tblptrl	equ	0xFF6
 14196                           tablat	equ	0xFF5
 14197                           prodh	equ	0xFF4
 14198                           prodl	equ	0xFF3
 14199                           intcon	equ	0xFF2
 14200                           intcon3	equ	0xFF0
 14201                           indf0	equ	0xFEF
 14202                           postinc0	equ	0xFEE
 14203                           plusw0	equ	0xFEB
 14204                           fsr0h	equ	0xFEA
 14205                           fsr0l	equ	0xFE9
 14206                           wreg	equ	0xFE8
 14207                           indf1	equ	0xFE7
 14208                           postinc1	equ	0xFE6
 14209                           postdec1	equ	0xFE5
 14210                           plusw1	equ	0xFE3
 14211                           fsr1h	equ	0xFE2
 14212                           fsr1l	equ	0xFE1
 14213                           indf2	equ	0xFDF
 14214                           postinc2	equ	0xFDE
 14215                           postdec2	equ	0xFDD
 14216                           plusw2	equ	0xFDB
 14217                           fsr2h	equ	0xFDA
 14218                           fsr2l	equ	0xFD9
 14219                           status	equ	0xFD8
 14220                           
 14221 ;; *************** function _enc424j600_getPacketCount *****************
 14222 ;; Defined at:
 14223 ;;		line 594 in file "src/enc424j600/ENC424J600.c"
 14224 ;; Parameters:    Size  Location     Type
 14225 ;;		None
 14226 ;; Auto vars:     Size  Location     Type
 14227 ;;  lowByte         1   14[BANK0 ] unsigned char 
 14228 ;; Return value:  Size  Location     Type
 14229 ;;                  1    wreg      unsigned char 
 14230 ;; Registers used:
 14231 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14232 ;; Tracked objects:
 14233 ;;		On entry : 0/0
 14234 ;;		On exit  : 0/0
 14235 ;;		Unchanged: 0/0
 14236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14237 ;;      Params:         0       0       0       0       0       0       0       0       0
 14238 ;;      Locals:         0       1       0       0       0       0       0       0       0
 14239 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14240 ;;      Totals:         0       1       0       0       0       0       0       0       0
 14241 ;;Total ram usage:        1 bytes
 14242 ;; Hardware stack levels used:    1
 14243 ;; Hardware stack levels required when called:    7
 14244 ;; This function calls:
 14245 ;;		_enc424j600_readControlRegisterUnbanked
 14246 ;; This function is called by:
 14247 ;;		_ethernetController_newPacketAvailable
 14248 ;;		_ethernetController_getCurrentPacketCount
 14249 ;; This function uses a non-reentrant model
 14250 ;;
 14251                           
 14252                           	psect	text49
 14253  00568C                     __ptext49:
 14254                           	opt stack 0
 14255  00568C                     _enc424j600_getPacketCount:
 14256                           	opt stack 21
 14257                           
 14258                           ;ENC424J600.c: 595: uint8_t lowByte = 0;
 14259                           
 14260                           ;incstack = 0
 14261  00568C  0E00               	movlw	0
 14262  00568E  0100               	movlb	0	; () banked
 14263  005690  6F6E               	movwf	enc424j600_getPacketCount@lowByte& (0+255),b
 14264                           
 14265                           ; BSR set to: 0
 14266                           ;ENC424J600.c: 596: enc424j600_readControlRegisterUnbanked(0x1A + 0x00, &lowByte);
 14267  005692  0E6E               	movlw	low enc424j600_getPacketCount@lowByte
 14268  005694  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 14269  005696  0E00               	movlw	high enc424j600_getPacketCount@lowByte
 14270  005698  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 14271  00569A  0E1A               	movlw	26
 14272  00569C  EC7C  F029         	call	_enc424j600_readControlRegisterUnbanked
 14273                           
 14274                           ;ENC424J600.c: 597: return (uint32_t) lowByte;
 14275  0056A0  0100               	movlb	0	; () banked
 14276  0056A2  516E               	movf	enc424j600_getPacketCount@lowByte& (0+255),w,b
 14277  0056A4  0012               	return	
 14278  0056A6                     __end_of_enc424j600_getPacketCount:
 14279                           	opt stack 0
 14280                           tblptru	equ	0xFF8
 14281                           tblptrh	equ	0xFF7
 14282                           tblptrl	equ	0xFF6
 14283                           tablat	equ	0xFF5
 14284                           prodh	equ	0xFF4
 14285                           prodl	equ	0xFF3
 14286                           intcon	equ	0xFF2
 14287                           intcon3	equ	0xFF0
 14288                           indf0	equ	0xFEF
 14289                           postinc0	equ	0xFEE
 14290                           plusw0	equ	0xFEB
 14291                           fsr0h	equ	0xFEA
 14292                           fsr0l	equ	0xFE9
 14293                           wreg	equ	0xFE8
 14294                           indf1	equ	0xFE7
 14295                           postinc1	equ	0xFE6
 14296                           postdec1	equ	0xFE5
 14297                           plusw1	equ	0xFE3
 14298                           fsr1h	equ	0xFE2
 14299                           fsr1l	equ	0xFE1
 14300                           indf2	equ	0xFDF
 14301                           postinc2	equ	0xFDE
 14302                           postdec2	equ	0xFDD
 14303                           plusw2	equ	0xFDB
 14304                           fsr2h	equ	0xFDA
 14305                           fsr2l	equ	0xFD9
 14306                           status	equ	0xFD8
 14307                           
 14308 ;; *************** function _ethernetController_clearInterruptFlag *****************
 14309 ;; Defined at:
 14310 ;;		line 330 in file "src/enc424j600/ENC424J600.c"
 14311 ;; Parameters:    Size  Location     Type
 14312 ;;  flag            1    wreg     unsigned char 
 14313 ;; Auto vars:     Size  Location     Type
 14314 ;;  flag            1   18[BANK0 ] unsigned char 
 14315 ;; Return value:  Size  Location     Type
 14316 ;;                  1    wreg      void 
 14317 ;; Registers used:
 14318 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14319 ;; Tracked objects:
 14320 ;;		On entry : 0/0
 14321 ;;		On exit  : 0/0
 14322 ;;		Unchanged: 0/0
 14323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14324 ;;      Params:         0       0       0       0       0       0       0       0       0
 14325 ;;      Locals:         0       1       0       0       0       0       0       0       0
 14326 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14327 ;;      Totals:         0       1       0       0       0       0       0       0       0
 14328 ;;Total ram usage:        1 bytes
 14329 ;; Hardware stack levels used:    1
 14330 ;; Hardware stack levels required when called:    8
 14331 ;; This function calls:
 14332 ;;		_enc424j600_clearInterruptFlag
 14333 ;; This function is called by:
 14334 ;;		_handleStackBackgroundTasks
 14335 ;; This function uses a non-reentrant model
 14336 ;;
 14337                           
 14338                           	psect	text50
 14339  00575A                     __ptext50:
 14340                           	opt stack 0
 14341  00575A                     _ethernetController_clearInterruptFlag:
 14342                           	opt stack 21
 14343                           
 14344                           ; BSR set to: 0
 14345                           ;incstack = 0
 14346                           ;ethernetController_clearInterruptFlag@flag stored from wreg
 14347  00575A  0100               	movlb	0	; () banked
 14348  00575C  6F72               	movwf	ethernetController_clearInterruptFlag@flag& (0+255),b
 14349                           
 14350                           ;ENC424J600.c: 331: enc424j600_clearInterruptFlag(flag);
 14351  00575E  0100               	movlb	0	; () banked
 14352  005760  5172               	movf	ethernetController_clearInterruptFlag@flag& (0+255),w,b
 14353  005762  EC12  F023         	call	_enc424j600_clearInterruptFlag
 14354  005766  0012               	return		;funcret
 14355  005768                     __end_of_ethernetController_clearInterruptFlag:
 14356                           	opt stack 0
 14357                           tblptru	equ	0xFF8
 14358                           tblptrh	equ	0xFF7
 14359                           tblptrl	equ	0xFF6
 14360                           tablat	equ	0xFF5
 14361                           prodh	equ	0xFF4
 14362                           prodl	equ	0xFF3
 14363                           intcon	equ	0xFF2
 14364                           intcon3	equ	0xFF0
 14365                           indf0	equ	0xFEF
 14366                           postinc0	equ	0xFEE
 14367                           plusw0	equ	0xFEB
 14368                           fsr0h	equ	0xFEA
 14369                           fsr0l	equ	0xFE9
 14370                           wreg	equ	0xFE8
 14371                           indf1	equ	0xFE7
 14372                           postinc1	equ	0xFE6
 14373                           postdec1	equ	0xFE5
 14374                           plusw1	equ	0xFE3
 14375                           fsr1h	equ	0xFE2
 14376                           fsr1l	equ	0xFE1
 14377                           indf2	equ	0xFDF
 14378                           postinc2	equ	0xFDE
 14379                           postdec2	equ	0xFDD
 14380                           plusw2	equ	0xFDB
 14381                           fsr2h	equ	0xFDA
 14382                           fsr2l	equ	0xFD9
 14383                           status	equ	0xFD8
 14384                           
 14385 ;; *************** function _enc424j600_clearInterruptFlag *****************
 14386 ;; Defined at:
 14387 ;;		line 703 in file "src/enc424j600/ENC424J600.c"
 14388 ;; Parameters:    Size  Location     Type
 14389 ;;  flag            1    wreg     unsigned char 
 14390 ;; Auto vars:     Size  Location     Type
 14391 ;;  flag            1   16[BANK0 ] unsigned char 
 14392 ;;  temp            1   17[BANK0 ] unsigned char 
 14393 ;; Return value:  Size  Location     Type
 14394 ;;                  1    wreg      void 
 14395 ;; Registers used:
 14396 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14397 ;; Tracked objects:
 14398 ;;		On entry : 0/0
 14399 ;;		On exit  : 0/0
 14400 ;;		Unchanged: 0/0
 14401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14402 ;;      Params:         0       0       0       0       0       0       0       0       0
 14403 ;;      Locals:         0       2       0       0       0       0       0       0       0
 14404 ;;      Temps:          0       2       0       0       0       0       0       0       0
 14405 ;;      Totals:         0       4       0       0       0       0       0       0       0
 14406 ;;Total ram usage:        4 bytes
 14407 ;; Hardware stack levels used:    1
 14408 ;; Hardware stack levels required when called:    7
 14409 ;; This function calls:
 14410 ;;		_enc424j600_readControlRegisterUnbanked
 14411 ;;		_enc424j600_writeControlRegisterUnbanked
 14412 ;; This function is called by:
 14413 ;;		_ethernetController_clearInterruptFlag
 14414 ;; This function uses a non-reentrant model
 14415 ;;
 14416                           
 14417                           	psect	text51
 14418  004624                     __ptext51:
 14419                           	opt stack 0
 14420  004624                     _enc424j600_clearInterruptFlag:
 14421                           	opt stack 21
 14422                           
 14423                           ;incstack = 0
 14424                           ;enc424j600_clearInterruptFlag@flag stored from wreg
 14425  004624  0100               	movlb	0	; () banked
 14426  004626  6F70               	movwf	enc424j600_clearInterruptFlag@flag& (0+255),b
 14427                           
 14428                           ;ENC424J600.c: 704: uint8_t temp;
 14429                           ;ENC424J600.c: 705: if (flag < 8) {
 14430  004628  0E08               	movlw	8
 14431  00462A  0100               	movlb	0	; () banked
 14432  00462C  6170               	cpfslt	enc424j600_clearInterruptFlag@flag& (0+255),b
 14433  00462E  D01E               	goto	l317
 14434                           
 14435                           ; BSR set to: 0
 14436                           ;ENC424J600.c: 706: enc424j600_readControlRegisterUnbanked(0x1C + 0x00, &temp);
 14437  004630  0E71               	movlw	low enc424j600_clearInterruptFlag@temp
 14438  004632  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 14439  004634  0E00               	movlw	high enc424j600_clearInterruptFlag@temp
 14440  004636  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 14441  004638  0E1C               	movlw	28
 14442  00463A  EC7C  F029         	call	_enc424j600_readControlRegisterUnbanked
 14443                           
 14444                           ;ENC424J600.c: 707: temp &= ~(1 << flag);
 14445  00463E  C070  F06E         	movff	enc424j600_clearInterruptFlag@flag,??_enc424j600_clearInterruptFlag
 14446  004642  0E01               	movlw	1
 14447  004644  0100               	movlb	0	; () banked
 14448  004646  6F6F               	movwf	(??_enc424j600_clearInterruptFlag+1)& (0+255),b
 14449  004648  2B6E               	incf	??_enc424j600_clearInterruptFlag& (0+255),f,b
 14450  00464A  D002               	goto	u11364
 14451  00464C                     u11365:
 14452  00464C  90D8               	bcf	status,0,c
 14453  00464E  376F               	rlcf	(??_enc424j600_clearInterruptFlag+1)& (0+255),f,b
 14454  004650                     u11364:
 14455  004650  2F6E               	decfsz	??_enc424j600_clearInterruptFlag& (0+255),f,b
 14456  004652  D7FC               	goto	u11365
 14457  004654  0100               	movlb	0	; () banked
 14458  004656  516F               	movf	(??_enc424j600_clearInterruptFlag+1)& (0+255),w,b
 14459  004658  0AFF               	xorlw	255
 14460  00465A  1771               	andwf	enc424j600_clearInterruptFlag@temp& (0+255),f,b
 14461                           
 14462                           ; BSR set to: 0
 14463                           ;ENC424J600.c: 708: enc424j600_writeControlRegisterUnbanked(0x1C + 0x00, &temp);
 14464  00465C  0E71               	movlw	low enc424j600_clearInterruptFlag@temp
 14465  00465E  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 14466  004660  0E00               	movlw	high enc424j600_clearInterruptFlag@temp
 14467  004662  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 14468  004664  0E1C               	movlw	28
 14469  004666  EC61  F029         	call	_enc424j600_writeControlRegisterUnbanked
 14470                           
 14471                           ;ENC424J600.c: 709: } else {
 14472  00466A  0012               	return	
 14473  00466C                     l317:
 14474                           
 14475                           ;ENC424J600.c: 710: flag -= 8;
 14476  00466C  0E08               	movlw	8
 14477  00466E  0100               	movlb	0	; () banked
 14478  004670  5F70               	subwf	enc424j600_clearInterruptFlag@flag& (0+255),f,b
 14479                           
 14480                           ; BSR set to: 0
 14481                           ;ENC424J600.c: 711: enc424j600_readControlRegisterUnbanked(0x1D + 0x00, &temp);
 14482  004672  0E71               	movlw	low enc424j600_clearInterruptFlag@temp
 14483  004674  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 14484  004676  0E00               	movlw	high enc424j600_clearInterruptFlag@temp
 14485  004678  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 14486  00467A  0E1D               	movlw	29
 14487  00467C  EC7C  F029         	call	_enc424j600_readControlRegisterUnbanked
 14488                           
 14489                           ;ENC424J600.c: 712: temp &= ~(1 << flag);
 14490  004680  C070  F06E         	movff	enc424j600_clearInterruptFlag@flag,??_enc424j600_clearInterruptFlag
 14491  004684  0E01               	movlw	1
 14492  004686  0100               	movlb	0	; () banked
 14493  004688  6F6F               	movwf	(??_enc424j600_clearInterruptFlag+1)& (0+255),b
 14494  00468A  2B6E               	incf	??_enc424j600_clearInterruptFlag& (0+255),f,b
 14495  00468C  D002               	goto	u11374
 14496  00468E                     u11375:
 14497  00468E  90D8               	bcf	status,0,c
 14498  004690  376F               	rlcf	(??_enc424j600_clearInterruptFlag+1)& (0+255),f,b
 14499  004692                     u11374:
 14500  004692  2F6E               	decfsz	??_enc424j600_clearInterruptFlag& (0+255),f,b
 14501  004694  D7FC               	goto	u11375
 14502  004696  0100               	movlb	0	; () banked
 14503  004698  516F               	movf	(??_enc424j600_clearInterruptFlag+1)& (0+255),w,b
 14504  00469A  0AFF               	xorlw	255
 14505  00469C  1771               	andwf	enc424j600_clearInterruptFlag@temp& (0+255),f,b
 14506                           
 14507                           ;ENC424J600.c: 713: enc424j600_writeControlRegisterUnbanked(0x1D + 0x00, &temp);
 14508  00469E  0E71               	movlw	low enc424j600_clearInterruptFlag@temp
 14509  0046A0  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 14510  0046A2  0E00               	movlw	high enc424j600_clearInterruptFlag@temp
 14511  0046A4  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 14512  0046A6  0E1D               	movlw	29
 14513  0046A8  EC61  F029         	call	_enc424j600_writeControlRegisterUnbanked
 14514  0046AC  0012               	return	
 14515  0046AE                     __end_of_enc424j600_clearInterruptFlag:
 14516                           	opt stack 0
 14517                           tblptru	equ	0xFF8
 14518                           tblptrh	equ	0xFF7
 14519                           tblptrl	equ	0xFF6
 14520                           tablat	equ	0xFF5
 14521                           prodh	equ	0xFF4
 14522                           prodl	equ	0xFF3
 14523                           intcon	equ	0xFF2
 14524                           intcon3	equ	0xFF0
 14525                           indf0	equ	0xFEF
 14526                           postinc0	equ	0xFEE
 14527                           plusw0	equ	0xFEB
 14528                           fsr0h	equ	0xFEA
 14529                           fsr0l	equ	0xFE9
 14530                           wreg	equ	0xFE8
 14531                           indf1	equ	0xFE7
 14532                           postinc1	equ	0xFE6
 14533                           postdec1	equ	0xFE5
 14534                           plusw1	equ	0xFE3
 14535                           fsr1h	equ	0xFE2
 14536                           fsr1l	equ	0xFE1
 14537                           indf2	equ	0xFDF
 14538                           postinc2	equ	0xFDE
 14539                           postdec2	equ	0xFDD
 14540                           plusw2	equ	0xFDB
 14541                           fsr2h	equ	0xFDA
 14542                           fsr2l	equ	0xFD9
 14543                           status	equ	0xFD8
 14544                           
 14545 ;; *************** function _arp_init *****************
 14546 ;; Defined at:
 14547 ;;		line 495 in file "src/stack/protocols/arp.c"
 14548 ;; Parameters:    Size  Location     Type
 14549 ;;		None
 14550 ;; Auto vars:     Size  Location     Type
 14551 ;;  i               1   92[BANK0 ] unsigned char 
 14552 ;;  mac             6   82[BANK0 ] struct macaddress
 14553 ;;  ip              4   88[BANK0 ] struct ipv4_address
 14554 ;; Return value:  Size  Location     Type
 14555 ;;                  1    wreg      void 
 14556 ;; Registers used:
 14557 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14558 ;; Tracked objects:
 14559 ;;		On entry : 0/0
 14560 ;;		On exit  : 0/0
 14561 ;;		Unchanged: 0/0
 14562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14563 ;;      Params:         0       0       0       0       0       0       0       0       0
 14564 ;;      Locals:         0      11       0       0       0       0       0       0       0
 14565 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14566 ;;      Totals:         0      11       0       0       0       0       0       0       0
 14567 ;;Total ram usage:       11 bytes
 14568 ;; Hardware stack levels used:    1
 14569 ;; Hardware stack levels required when called:    7
 14570 ;; This function calls:
 14571 ;;		_UARTTransmitText
 14572 ;;		_arp_setNewEntry
 14573 ;;		_ipv4_setToAllZero
 14574 ;;		_mac_setAllZero
 14575 ;; This function is called by:
 14576 ;;		_handleStackBackgroundTasks
 14577 ;;		_stack_init
 14578 ;; This function uses a non-reentrant model
 14579 ;;
 14580                           
 14581                           	psect	text52
 14582  004996                     __ptext52:
 14583                           	opt stack 0
 14584  004996                     _arp_init:
 14585                           	opt stack 22
 14586                           
 14587                           ;arp.c: 496: macaddress_t mac;
 14588                           ;arp.c: 497: ipv4_address_t ip;
 14589                           ;arp.c: 498: mac_setAllZero(&mac);
 14590                           
 14591                           ;incstack = 0
 14592  004996  0EB2               	movlw	low arp_init@mac
 14593  004998  0100               	movlb	0	; () banked
 14594  00499A  6F60               	movwf	mac_setAllZero@mac& (0+255),b
 14595  00499C  0E00               	movlw	high arp_init@mac
 14596  00499E  6F61               	movwf	(mac_setAllZero@mac+1)& (0+255),b
 14597  0049A0  ECAE  F02A         	call	_mac_setAllZero	;wreg free
 14598                           
 14599                           ;arp.c: 499: ipv4_setToAllZero(&ip);
 14600  0049A4  0EB8               	movlw	low arp_init@ip
 14601  0049A6  0100               	movlb	0	; () banked
 14602  0049A8  6F60               	movwf	ipv4_setToAllZero@ip& (0+255),b
 14603  0049AA  0E00               	movlw	high arp_init@ip
 14604  0049AC  6F61               	movwf	(ipv4_setToAllZero@ip+1)& (0+255),b
 14605  0049AE  EC9B  F02A         	call	_ipv4_setToAllZero	;wreg free
 14606                           
 14607                           ;arp.c: 501: for (uint8_t i = 0; i < 8u; i++)
 14608  0049B2  0E00               	movlw	0
 14609  0049B4  0100               	movlb	0	; () banked
 14610  0049B6  6FBC               	movwf	arp_init@i& (0+255),b
 14611  0049B8                     l10165:
 14612                           
 14613                           ; BSR set to: 0
 14614  0049B8  0E07               	movlw	7
 14615  0049BA  65BC               	cpfsgt	arp_init@i& (0+255),b
 14616  0049BC  D001               	goto	l1070
 14617  0049BE  D01E               	goto	u12150
 14618  0049C0                     l1070:
 14619                           
 14620                           ; BSR set to: 0
 14621                           ;arp.c: 502: arp_setNewEntry(mac, ip, 0xffffffff);
 14622                           
 14623                           ; BSR set to: 0
 14624  0049C0  EE20  F0B2         	lfsr	2,arp_init@mac
 14625  0049C4  EE00  F09A         	lfsr	0,arp_setNewEntry@mac
 14626  0049C8  0E05               	movlw	5
 14627  0049CA                     u12141:
 14628  0049CA  CFDB FFEB          	movff	plusw2,plusw0
 14629  0049CE  06E8               	decf	wreg,f,c
 14630  0049D0  E2FC               	bc	u12141
 14631  0049D2  C0B8  F0A0         	movff	arp_init@ip,arp_setNewEntry@ip
 14632  0049D6  C0B9  F0A1         	movff	arp_init@ip+1,arp_setNewEntry@ip+1
 14633  0049DA  C0BA  F0A2         	movff	arp_init@ip+2,arp_setNewEntry@ip+2
 14634  0049DE  C0BB  F0A3         	movff	arp_init@ip+3,arp_setNewEntry@ip+3
 14635  0049E2  0EFF               	movlw	255
 14636  0049E4  6FA4               	movwf	arp_setNewEntry@timestamp& (0+255),b
 14637  0049E6  0EFF               	movlw	255
 14638  0049E8  6FA5               	movwf	(arp_setNewEntry@timestamp+1)& (0+255),b
 14639  0049EA  0EFF               	movlw	255
 14640  0049EC  6FA6               	movwf	(arp_setNewEntry@timestamp+2)& (0+255),b
 14641  0049EE  0EFF               	movlw	255
 14642  0049F0  6FA7               	movwf	(arp_setNewEntry@timestamp+3)& (0+255),b
 14643  0049F2  EC2D  F017         	call	_arp_setNewEntry	;wreg free
 14644  0049F6  0100               	movlb	0	; () banked
 14645  0049F8  2BBC               	incf	arp_init@i& (0+255),f,b
 14646  0049FA  D7DE               	goto	l10165
 14647  0049FC                     u12150:
 14648                           
 14649                           ; BSR set to: 0
 14650                           ;arp.c: 505: UARTTransmitText("[ARP]: Table was reset successfully.\n\r");
 14651                           
 14652                           ; BSR set to: 0
 14653  0049FC  0E8A               	movlw	low STR_94
 14654  0049FE  6F98               	movwf	UARTTransmitText@str& (0+255),b
 14655  004A00  0E7B               	movlw	high STR_94
 14656  004A02  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 14657  004A04  EC09  F027         	call	_UARTTransmitText	;wreg free
 14658  004A08  0012               	return		;funcret
 14659  004A0A                     __end_of_arp_init:
 14660                           	opt stack 0
 14661                           tblptru	equ	0xFF8
 14662                           tblptrh	equ	0xFF7
 14663                           tblptrl	equ	0xFF6
 14664                           tablat	equ	0xFF5
 14665                           prodh	equ	0xFF4
 14666                           prodl	equ	0xFF3
 14667                           intcon	equ	0xFF2
 14668                           intcon3	equ	0xFF0
 14669                           indf0	equ	0xFEF
 14670                           postinc0	equ	0xFEE
 14671                           plusw0	equ	0xFEB
 14672                           fsr0h	equ	0xFEA
 14673                           fsr0l	equ	0xFE9
 14674                           wreg	equ	0xFE8
 14675                           indf1	equ	0xFE7
 14676                           postinc1	equ	0xFE6
 14677                           postdec1	equ	0xFE5
 14678                           plusw1	equ	0xFE3
 14679                           fsr1h	equ	0xFE2
 14680                           fsr1l	equ	0xFE1
 14681                           indf2	equ	0xFDF
 14682                           postinc2	equ	0xFDE
 14683                           postdec2	equ	0xFDD
 14684                           plusw2	equ	0xFDB
 14685                           fsr2h	equ	0xFDA
 14686                           fsr2l	equ	0xFD9
 14687                           status	equ	0xFD8
 14688                           
 14689 ;; *************** function _arp_setNewEntry *****************
 14690 ;; Defined at:
 14691 ;;		line 470 in file "src/stack/protocols/arp.c"
 14692 ;; Parameters:    Size  Location     Type
 14693 ;;  mac             6   58[BANK0 ] struct macaddress
 14694 ;;  ip              4   64[BANK0 ] struct ipv4_address
 14695 ;;  timestamp       4   68[BANK0 ] unsigned long 
 14696 ;; Auto vars:     Size  Location     Type
 14697 ;;  i               1   81[BANK0 ] unsigned char 
 14698 ;;  maxSeconds      4   76[BANK0 ] unsigned long 
 14699 ;;  oldestIndex     1   80[BANK0 ] unsigned char 
 14700 ;; Return value:  Size  Location     Type
 14701 ;;                  1    wreg      void 
 14702 ;; Registers used:
 14703 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14704 ;; Tracked objects:
 14705 ;;		On entry : 0/0
 14706 ;;		On exit  : 0/0
 14707 ;;		Unchanged: 0/0
 14708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14709 ;;      Params:         0      14       0       0       0       0       0       0       0
 14710 ;;      Locals:         0       6       0       0       0       0       0       0       0
 14711 ;;      Temps:          0       4       0       0       0       0       0       0       0
 14712 ;;      Totals:         0      24       0       0       0       0       0       0       0
 14713 ;;Total ram usage:       24 bytes
 14714 ;; Hardware stack levels used:    1
 14715 ;; Hardware stack levels required when called:    6
 14716 ;; This function calls:
 14717 ;;		_UARTTransmitText
 14718 ;;		_ipAdressToString
 14719 ;;		_ipv4_isAllZero
 14720 ;;		_macToString
 14721 ;;		_mac_isAllZero
 14722 ;; This function is called by:
 14723 ;;		_arp_handleNewPacket
 14724 ;;		_arp_init
 14725 ;; This function uses a non-reentrant model
 14726 ;;
 14727                           
 14728                           	psect	text53
 14729  002E5A                     __ptext53:
 14730                           	opt stack 0
 14731  002E5A                     _arp_setNewEntry:
 14732                           	opt stack 22
 14733                           
 14734                           ;arp.c: 471: time_t maxSeconds = 0;
 14735                           
 14736                           ;incstack = 0
 14737  002E5A  0E00               	movlw	0
 14738  002E5C  0100               	movlb	0	; () banked
 14739  002E5E  6FAC               	movwf	arp_setNewEntry@maxSeconds& (0+255),b
 14740  002E60  0E00               	movlw	0
 14741  002E62  6FAD               	movwf	(arp_setNewEntry@maxSeconds+1)& (0+255),b
 14742  002E64  0E00               	movlw	0
 14743  002E66  6FAE               	movwf	(arp_setNewEntry@maxSeconds+2)& (0+255),b
 14744  002E68  0E00               	movlw	0
 14745  002E6A  6FAF               	movwf	(arp_setNewEntry@maxSeconds+3)& (0+255),b
 14746                           
 14747                           ;arp.c: 472: uint8_t oldestIndex = 0;
 14748  002E6C  0E00               	movlw	0
 14749  002E6E  6FB0               	movwf	arp_setNewEntry@oldestIndex& (0+255),b
 14750                           
 14751                           ;arp.c: 474: for (uint8_t i = 0; i < 8u; i++) {
 14752  002E70  0E00               	movlw	0
 14753  002E72  6FB1               	movwf	arp_setNewEntry@i& (0+255),b
 14754  002E74                     l9377:
 14755                           
 14756                           ; BSR set to: 0
 14757  002E74  0E07               	movlw	7
 14758  002E76  65B1               	cpfsgt	arp_setNewEntry@i& (0+255),b
 14759  002E78  D001               	goto	l1061
 14760  002E7A  D02E               	goto	u11100
 14761  002E7C                     l1061:
 14762                           
 14763                           ; BSR set to: 0
 14764                           ;arp.c: 475: if (arp_table[i].timeCreated > maxSeconds) {
 14765                           
 14766                           ; BSR set to: 0
 14767  002E7C  51B1               	movf	arp_setNewEntry@i& (0+255),w,b
 14768  002E7E  0D0E               	mullw	14
 14769  002E80  0E0A               	movlw	10
 14770  002E82  26F3               	addwf	prodl,f,c
 14771  002E84  0E00               	movlw	0
 14772  002E86  22F4               	addwfc	prodh,f,c
 14773  002E88  0E00               	movlw	low _arp_table
 14774  002E8A  24F3               	addwf	prodl,w,c
 14775  002E8C  6ED9               	movwf	fsr2l,c
 14776  002E8E  0E03               	movlw	high _arp_table
 14777  002E90  20F4               	addwfc	prodh,w,c
 14778  002E92  6EDA               	movwf	fsr2h,c
 14779  002E94  50DE               	movf	postinc2,w,c
 14780  002E96  5DAC               	subwf	arp_setNewEntry@maxSeconds& (0+255),w,b
 14781  002E98  50DE               	movf	postinc2,w,c
 14782  002E9A  59AD               	subwfb	(arp_setNewEntry@maxSeconds+1)& (0+255),w,b
 14783  002E9C  50DE               	movf	postinc2,w,c
 14784  002E9E  59AE               	subwfb	(arp_setNewEntry@maxSeconds+2)& (0+255),w,b
 14785  002EA0  50DE               	movf	postinc2,w,c
 14786  002EA2  59AF               	subwfb	(arp_setNewEntry@maxSeconds+3)& (0+255),w,b
 14787  002EA4  B0D8               	btfsc	status,0,c
 14788  002EA6  D016               	goto	l1063
 14789                           
 14790                           ; BSR set to: 0
 14791                           ;arp.c: 476: maxSeconds = arp_table[i].timeCreated;
 14792  002EA8  51B1               	movf	arp_setNewEntry@i& (0+255),w,b
 14793  002EAA  0D0E               	mullw	14
 14794  002EAC  0E0A               	movlw	10
 14795  002EAE  26F3               	addwf	prodl,f,c
 14796  002EB0  0E00               	movlw	0
 14797  002EB2  22F4               	addwfc	prodh,f,c
 14798  002EB4  0E00               	movlw	low _arp_table
 14799  002EB6  24F3               	addwf	prodl,w,c
 14800  002EB8  6ED9               	movwf	fsr2l,c
 14801  002EBA  0E03               	movlw	high _arp_table
 14802  002EBC  20F4               	addwfc	prodh,w,c
 14803  002EBE  6EDA               	movwf	fsr2h,c
 14804  002EC0  CFDE F0AC          	movff	postinc2,arp_setNewEntry@maxSeconds
 14805  002EC4  CFDE F0AD          	movff	postinc2,arp_setNewEntry@maxSeconds+1
 14806  002EC8  CFDE F0AE          	movff	postinc2,arp_setNewEntry@maxSeconds+2
 14807  002ECC  CFDE F0AF          	movff	postinc2,arp_setNewEntry@maxSeconds+3
 14808                           
 14809                           ; BSR set to: 0
 14810                           ;arp.c: 477: oldestIndex = i;
 14811  002ED0  C0B1  F0B0         	movff	arp_setNewEntry@i,arp_setNewEntry@oldestIndex
 14812  002ED4                     l1063:
 14813                           
 14814                           ; BSR set to: 0
 14815                           
 14816                           ; BSR set to: 0
 14817  002ED4  2BB1               	incf	arp_setNewEntry@i& (0+255),f,b
 14818  002ED6  D7CE               	goto	l9377
 14819  002ED8                     u11100:
 14820                           
 14821                           ; BSR set to: 0
 14822                           ;arp.c: 478: }
 14823                           ;arp.c: 479: }
 14824                           ;arp.c: 481: arp_table[oldestIndex].ip = ip;
 14825                           
 14826                           ; BSR set to: 0
 14827  002ED8  51B0               	movf	arp_setNewEntry@oldestIndex& (0+255),w,b
 14828  002EDA  0D0E               	mullw	14
 14829  002EDC  0E00               	movlw	low _arp_table
 14830  002EDE  24F3               	addwf	prodl,w,c
 14831  002EE0  6ED9               	movwf	fsr2l,c
 14832  002EE2  0E03               	movlw	high _arp_table
 14833  002EE4  20F4               	addwfc	prodh,w,c
 14834  002EE6  6EDA               	movwf	fsr2h,c
 14835  002EE8  C0A0  FFDE         	movff	arp_setNewEntry@ip,postinc2
 14836  002EEC  C0A1  FFDE         	movff	arp_setNewEntry@ip+1,postinc2
 14837  002EF0  C0A2  FFDE         	movff	arp_setNewEntry@ip+2,postinc2
 14838  002EF4  C0A3  FFDE         	movff	arp_setNewEntry@ip+3,postinc2
 14839                           
 14840                           ; BSR set to: 0
 14841                           ;arp.c: 482: arp_table[oldestIndex].mac = mac;
 14842  002EF8  EE20  F09A         	lfsr	2,arp_setNewEntry@mac
 14843  002EFC  51B0               	movf	arp_setNewEntry@oldestIndex& (0+255),w,b
 14844  002EFE  0D0E               	mullw	14
 14845  002F00  0E04               	movlw	4
 14846  002F02  26F3               	addwf	prodl,f,c
 14847  002F04  0E00               	movlw	0
 14848  002F06  22F4               	addwfc	prodh,f,c
 14849  002F08  0E00               	movlw	low _arp_table
 14850  002F0A  24F3               	addwf	prodl,w,c
 14851  002F0C  6EE1               	movwf	fsr1l,c
 14852  002F0E  0E03               	movlw	high _arp_table
 14853  002F10  20F4               	addwfc	prodh,w,c
 14854  002F12  6EE2               	movwf	fsr1h,c
 14855  002F14  0E05               	movlw	5
 14856  002F16                     u11111:
 14857  002F16  CFDB FFE3          	movff	plusw2,plusw1
 14858  002F1A  06E8               	decf	wreg,f,c
 14859  002F1C  E2FC               	bc	u11111
 14860                           
 14861                           ; BSR set to: 0
 14862                           ;arp.c: 483: arp_table[oldestIndex].timeCreated = timestamp;
 14863  002F1E  51B0               	movf	arp_setNewEntry@oldestIndex& (0+255),w,b
 14864  002F20  0D0E               	mullw	14
 14865  002F22  0E0A               	movlw	10
 14866  002F24  26F3               	addwf	prodl,f,c
 14867  002F26  0E00               	movlw	0
 14868  002F28  22F4               	addwfc	prodh,f,c
 14869  002F2A  0E00               	movlw	low _arp_table
 14870  002F2C  24F3               	addwf	prodl,w,c
 14871  002F2E  6ED9               	movwf	fsr2l,c
 14872  002F30  0E03               	movlw	high _arp_table
 14873  002F32  20F4               	addwfc	prodh,w,c
 14874  002F34  6EDA               	movwf	fsr2h,c
 14875  002F36  C0A4  FFDE         	movff	arp_setNewEntry@timestamp,postinc2
 14876  002F3A  C0A5  FFDE         	movff	arp_setNewEntry@timestamp+1,postinc2
 14877  002F3E  C0A6  FFDE         	movff	arp_setNewEntry@timestamp+2,postinc2
 14878  002F42  C0A7  FFDE         	movff	arp_setNewEntry@timestamp+3,postinc2
 14879                           
 14880                           ; BSR set to: 0
 14881                           ;arp.c: 485: if (!((mac_isAllZero(&mac)) && ipv4_isAllZero(&ip))) {
 14882  002F46  0E9A               	movlw	low arp_setNewEntry@mac
 14883  002F48  6F60               	movwf	mac_isAllZero@mac& (0+255),b
 14884  002F4A  0E00               	movlw	high arp_setNewEntry@mac
 14885  002F4C  6F61               	movwf	(mac_isAllZero@mac+1)& (0+255),b
 14886  002F4E  ECB0  F029         	call	_mac_isAllZero	;wreg free
 14887  002F52  0100               	movlb	0	; () banked
 14888  002F54  A0D8               	btfss	status,0,c
 14889  002F56  D009               	goto	u11130
 14890                           
 14891                           ; BSR set to: 0
 14892  002F58  0EA0               	movlw	low arp_setNewEntry@ip
 14893  002F5A  6F60               	movwf	ipv4_isAllZero@ip& (0+255),b
 14894  002F5C  0E00               	movlw	high arp_setNewEntry@ip
 14895  002F5E  6F61               	movwf	(ipv4_isAllZero@ip+1)& (0+255),b
 14896  002F60  ECC8  F029         	call	_ipv4_isAllZero	;wreg free
 14897  002F64  0100               	movlb	0	; () banked
 14898  002F66  B0D8               	btfsc	status,0,c
 14899  002F68  0012               	return	
 14900  002F6A                     u11130:
 14901                           
 14902                           ; BSR set to: 0
 14903                           ;arp.c: 486: UARTTransmitText("[ARP]: New entry created for ");
 14904                           
 14905                           ; BSR set to: 0
 14906  002F6A  0E0E               	movlw	low STR_91
 14907  002F6C  6F98               	movwf	UARTTransmitText@str& (0+255),b
 14908  002F6E  0E7D               	movlw	high STR_91
 14909  002F70  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 14910  002F72  EC09  F027         	call	_UARTTransmitText	;wreg free
 14911                           
 14912                           ;arp.c: 487: UARTTransmitText(ipAdressToString(ip));
 14913  002F76  C0A0  F073         	movff	arp_setNewEntry@ip,ipAdressToString@ip
 14914  002F7A  C0A1  F074         	movff	arp_setNewEntry@ip+1,ipAdressToString@ip+1
 14915  002F7E  C0A2  F075         	movff	arp_setNewEntry@ip+2,ipAdressToString@ip+2
 14916  002F82  C0A3  F076         	movff	arp_setNewEntry@ip+3,ipAdressToString@ip+3
 14917  002F86  ECC9  F013         	call	_ipAdressToString	;wreg free
 14918  002F8A  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
 14919  002F8E  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
 14920  002F92  EC09  F027         	call	_UARTTransmitText	;wreg free
 14921                           
 14922                           ;arp.c: 488: UARTTransmitText(" (");
 14923  002F96  0E0B               	movlw	low (STR_41+29)
 14924  002F98  0100               	movlb	0	; () banked
 14925  002F9A  6F98               	movwf	UARTTransmitText@str& (0+255),b
 14926  002F9C  0E7D               	movlw	high (STR_41+29)
 14927  002F9E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 14928  002FA0  EC09  F027         	call	_UARTTransmitText	;wreg free
 14929                           
 14930                           ;arp.c: 489: UARTTransmitText(macToString(mac));
 14931  002FA4  EE20  F09A         	lfsr	2,arp_setNewEntry@mac
 14932  002FA8  EE00  F07A         	lfsr	0,macToString@addr
 14933  002FAC  0E05               	movlw	5
 14934  002FAE                     u11141:
 14935  002FAE  CFDB FFEB          	movff	plusw2,plusw0
 14936  002FB2  06E8               	decf	wreg,f,c
 14937  002FB4  E2FC               	bc	u11141
 14938  002FB6  EC8D  F01D         	call	_macToString	;wreg free
 14939  002FBA  C07A  F098         	movff	?_macToString,UARTTransmitText@str
 14940  002FBE  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
 14941  002FC2  EC09  F027         	call	_UARTTransmitText	;wreg free
 14942                           
 14943                           ;arp.c: 490: UARTTransmitText(") ");
 14944  002FC6  0EED               	movlw	low STR_93
 14945  002FC8  0100               	movlb	0	; () banked
 14946  002FCA  6F98               	movwf	UARTTransmitText@str& (0+255),b
 14947  002FCC  0E7F               	movlw	high STR_93
 14948  002FCE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 14949  002FD0  EC09  F027         	call	_UARTTransmitText	;wreg free
 14950  002FD4  0012               	return	
 14951  002FD6                     __end_of_arp_setNewEntry:
 14952                           	opt stack 0
 14953                           tblptru	equ	0xFF8
 14954                           tblptrh	equ	0xFF7
 14955                           tblptrl	equ	0xFF6
 14956                           tablat	equ	0xFF5
 14957                           prodh	equ	0xFF4
 14958                           prodl	equ	0xFF3
 14959                           intcon	equ	0xFF2
 14960                           intcon3	equ	0xFF0
 14961                           indf0	equ	0xFEF
 14962                           postinc0	equ	0xFEE
 14963                           plusw0	equ	0xFEB
 14964                           fsr0h	equ	0xFEA
 14965                           fsr0l	equ	0xFE9
 14966                           wreg	equ	0xFE8
 14967                           indf1	equ	0xFE7
 14968                           postinc1	equ	0xFE6
 14969                           postdec1	equ	0xFE5
 14970                           plusw1	equ	0xFE3
 14971                           fsr1h	equ	0xFE2
 14972                           fsr1l	equ	0xFE1
 14973                           indf2	equ	0xFDF
 14974                           postinc2	equ	0xFDE
 14975                           postdec2	equ	0xFDD
 14976                           plusw2	equ	0xFDB
 14977                           fsr2h	equ	0xFDA
 14978                           fsr2l	equ	0xFD9
 14979                           status	equ	0xFD8
 14980                           
 14981 ;; *************** function _mac_isAllZero *****************
 14982 ;; Defined at:
 14983 ;;		line 31 in file "src/eth/mac.c"
 14984 ;; Parameters:    Size  Location     Type
 14985 ;;  mac             2    0[BANK0 ] PTR struct macaddress
 14986 ;;		 -> arp_setNewEntry@mac(6), arp_parseFromRXBuffer@arp(32), 
 14987 ;; Auto vars:     Size  Location     Type
 14988 ;;  i               1    2[BANK0 ] unsigned char 
 14989 ;; Return value:  Size  Location     Type
 14990 ;;		None               void
 14991 ;; Registers used:
 14992 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14993 ;; Tracked objects:
 14994 ;;		On entry : 0/0
 14995 ;;		On exit  : 0/0
 14996 ;;		Unchanged: 0/0
 14997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14998 ;;      Params:         0       2       0       0       0       0       0       0       0
 14999 ;;      Locals:         0       1       0       0       0       0       0       0       0
 15000 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15001 ;;      Totals:         0       3       0       0       0       0       0       0       0
 15002 ;;Total ram usage:        3 bytes
 15003 ;; Hardware stack levels used:    1
 15004 ;; Hardware stack levels required when called:    4
 15005 ;; This function calls:
 15006 ;;		Nothing
 15007 ;; This function is called by:
 15008 ;;		_arp_parseFromRXBuffer
 15009 ;;		_arp_setNewEntry
 15010 ;; This function uses a non-reentrant model
 15011 ;;
 15012                           
 15013                           	psect	text54
 15014  005360                     __ptext54:
 15015                           	opt stack 0
 15016  005360                     _mac_isAllZero:
 15017                           	opt stack 23
 15018                           
 15019                           ;mac.c: 32: for (uint8_t i = 0; i < 6; i++) {
 15020                           
 15021                           ;incstack = 0
 15022  005360  0E00               	movlw	0
 15023  005362  0100               	movlb	0	; () banked
 15024  005364  6F62               	movwf	mac_isAllZero@i& (0+255),b
 15025  005366                     l8909:
 15026                           
 15027                           ; BSR set to: 0
 15028  005366  0E05               	movlw	5
 15029  005368  6562               	cpfsgt	mac_isAllZero@i& (0+255),b
 15030  00536A  D001               	goto	l384
 15031  00536C  D00F               	goto	u9970
 15032  00536E                     l384:
 15033                           
 15034                           ; BSR set to: 0
 15035                           ;mac.c: 33: if (mac->address[i] != 0x00)
 15036                           
 15037                           ; BSR set to: 0
 15038  00536E  5162               	movf	mac_isAllZero@i& (0+255),w,b
 15039  005370  0D01               	mullw	1
 15040  005372  50F3               	movf	prodl,w,c
 15041  005374  2560               	addwf	mac_isAllZero@mac& (0+255),w,b
 15042  005376  6ED9               	movwf	fsr2l,c
 15043  005378  50F4               	movf	prodh,w,c
 15044  00537A  2161               	addwfc	(mac_isAllZero@mac+1)& (0+255),w,b
 15045  00537C  6EDA               	movwf	fsr2h,c
 15046  00537E  50DF               	movf	indf2,w,c
 15047  005380  B4D8               	btfsc	status,2,c
 15048  005382  D002               	goto	l386
 15049                           
 15050                           ; BSR set to: 0
 15051                           ;mac.c: 34: return 0;
 15052  005384  90D8               	bcf	status,0,c
 15053                           
 15054                           ; BSR set to: 0
 15055  005386  0012               	return	
 15056  005388                     l386:
 15057                           
 15058                           ; BSR set to: 0
 15059                           
 15060                           ; BSR set to: 0
 15061  005388  2B62               	incf	mac_isAllZero@i& (0+255),f,b
 15062  00538A  D7ED               	goto	l8909
 15063  00538C                     u9970:
 15064                           
 15065                           ; BSR set to: 0
 15066                           ;mac.c: 35: }
 15067                           ;mac.c: 36: return 1;
 15068                           
 15069                           ; BSR set to: 0
 15070  00538C  80D8               	bsf	status,0,c
 15071  00538E  0012               	return	
 15072  005390                     __end_of_mac_isAllZero:
 15073                           	opt stack 0
 15074                           tblptru	equ	0xFF8
 15075                           tblptrh	equ	0xFF7
 15076                           tblptrl	equ	0xFF6
 15077                           tablat	equ	0xFF5
 15078                           prodh	equ	0xFF4
 15079                           prodl	equ	0xFF3
 15080                           intcon	equ	0xFF2
 15081                           intcon3	equ	0xFF0
 15082                           indf0	equ	0xFEF
 15083                           postinc0	equ	0xFEE
 15084                           plusw0	equ	0xFEB
 15085                           fsr0h	equ	0xFEA
 15086                           fsr0l	equ	0xFE9
 15087                           wreg	equ	0xFE8
 15088                           indf1	equ	0xFE7
 15089                           postinc1	equ	0xFE6
 15090                           postdec1	equ	0xFE5
 15091                           plusw1	equ	0xFE3
 15092                           fsr1h	equ	0xFE2
 15093                           fsr1l	equ	0xFE1
 15094                           indf2	equ	0xFDF
 15095                           postinc2	equ	0xFDE
 15096                           postdec2	equ	0xFDD
 15097                           plusw2	equ	0xFDB
 15098                           fsr2h	equ	0xFDA
 15099                           fsr2l	equ	0xFD9
 15100                           status	equ	0xFD8
 15101                           
 15102 ;; *************** function _macToString *****************
 15103 ;; Defined at:
 15104 ;;		line 107 in file "src/system/uart.c"
 15105 ;; Parameters:    Size  Location     Type
 15106 ;;  addr            6   26[BANK0 ] struct macaddress
 15107 ;; Auto vars:     Size  Location     Type
 15108 ;;  i               2   53[BANK0 ] int 
 15109 ;;  address        18   33[BANK0 ] unsigned char [18]
 15110 ;;  j               1   55[BANK0 ] unsigned char 
 15111 ;;  secondDigit     1   52[BANK0 ] unsigned char 
 15112 ;;  firstDigit      1   51[BANK0 ] unsigned char 
 15113 ;; Return value:  Size  Location     Type
 15114 ;;                  2   26[BANK0 ] PTR unsigned char 
 15115 ;; Registers used:
 15116 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15117 ;; Tracked objects:
 15118 ;;		On entry : 0/0
 15119 ;;		On exit  : 0/0
 15120 ;;		Unchanged: 0/0
 15121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15122 ;;      Params:         0       6       0       0       0       0       0       0       0
 15123 ;;      Locals:         0      23       0       0       0       0       0       0       0
 15124 ;;      Temps:          0       1       0       0       0       0       0       0       0
 15125 ;;      Totals:         0      30       0       0       0       0       0       0       0
 15126 ;;Total ram usage:       30 bytes
 15127 ;; Hardware stack levels used:    1
 15128 ;; Hardware stack levels required when called:    4
 15129 ;; This function calls:
 15130 ;;		Nothing
 15131 ;; This function is called by:
 15132 ;;		_ethernet_rxGetNewFrame
 15133 ;;		_main
 15134 ;;		_arp_handleNewPacket
 15135 ;;		_arp_sendReply
 15136 ;;		_arp_setNewEntry
 15137 ;;		_ipv4_sendFrame
 15138 ;;		_arpEntryToString
 15139 ;; This function uses a non-reentrant model
 15140 ;;
 15141                           
 15142                           	psect	text55
 15143  003B1A                     __ptext55:
 15144                           	opt stack 0
 15145  003B1A                     _macToString:
 15146                           	opt stack 23
 15147                           
 15148                           ;uart.c: 108: char address[] = "??:??:??:??:??:??";
 15149                           
 15150                           ; BSR set to: 0
 15151                           ;incstack = 0
 15152  003B1A  EE22  F0DE         	lfsr	2,macToString@F5947
 15153  003B1E  EE10  F081         	lfsr	1,macToString@address
 15154  003B22  0E11               	movlw	17
 15155  003B24                     u9891:
 15156  003B24  CFDB FFE3          	movff	plusw2,plusw1
 15157  003B28  06E8               	decf	wreg,f,c
 15158  003B2A  E2FC               	bc	u9891
 15159                           
 15160                           ;uart.c: 109: uint8_t j = 0;
 15161  003B2C  0E00               	movlw	0
 15162  003B2E  0100               	movlb	0	; () banked
 15163  003B30  6F97               	movwf	macToString@j& (0+255),b
 15164                           
 15165                           ; BSR set to: 0
 15166                           ;uart.c: 110: uint8_t firstDigit;
 15167                           ;uart.c: 111: uint8_t secondDigit;
 15168                           ;uart.c: 113: for (int i = 0; i < 6; i++) {
 15169  003B32  0E00               	movlw	0
 15170  003B34  6F96               	movwf	(macToString@i+1)& (0+255),b
 15171  003B36  0E00               	movlw	0
 15172  003B38  6F95               	movwf	macToString@i& (0+255),b
 15173                           
 15174                           ; BSR set to: 0
 15175  003B3A  BF96               	btfsc	(macToString@i+1)& (0+255),7,b
 15176  003B3C  D006               	goto	l815
 15177  003B3E  5196               	movf	(macToString@i+1)& (0+255),w,b
 15178  003B40  E16B               	bnz	l816
 15179  003B42  0E06               	movlw	6
 15180  003B44  5D95               	subwf	macToString@i& (0+255),w,b
 15181  003B46  B0D8               	btfsc	status,0,c
 15182  003B48  D067               	goto	u9940
 15183  003B4A                     l815:
 15184                           
 15185                           ; BSR set to: 0
 15186                           ;uart.c: 114: firstDigit = ((addr.address[i] & 0xF0) >> 4)&0x0F;
 15187                           
 15188                           ; BSR set to: 0
 15189  003B4A  0E7A               	movlw	low macToString@addr
 15190  003B4C  2595               	addwf	macToString@i& (0+255),w,b
 15191  003B4E  6ED9               	movwf	fsr2l,c
 15192  003B50  0E00               	movlw	high macToString@addr
 15193  003B52  2196               	addwfc	(macToString@i+1)& (0+255),w,b
 15194  003B54  6EDA               	movwf	fsr2h,c
 15195  003B56  50DF               	movf	indf2,w,c
 15196  003B58  6F80               	movwf	??_macToString& (0+255),b
 15197  003B5A  3980               	swapf	??_macToString& (0+255),w,b
 15198  003B5C  0B0F               	andlw	15
 15199  003B5E  0B0F               	andlw	15
 15200  003B60  6F93               	movwf	macToString@firstDigit& (0+255),b
 15201                           
 15202                           ;uart.c: 115: secondDigit = addr.address[i] & 0x0F;
 15203  003B62  0E7A               	movlw	low macToString@addr
 15204  003B64  2595               	addwf	macToString@i& (0+255),w,b
 15205  003B66  6ED9               	movwf	fsr2l,c
 15206  003B68  0E00               	movlw	high macToString@addr
 15207  003B6A  2196               	addwfc	(macToString@i+1)& (0+255),w,b
 15208  003B6C  6EDA               	movwf	fsr2h,c
 15209  003B6E  50DF               	movf	indf2,w,c
 15210  003B70  0B0F               	andlw	15
 15211  003B72  6F94               	movwf	macToString@secondDigit& (0+255),b
 15212                           
 15213                           ; BSR set to: 0
 15214                           ;uart.c: 117: firstDigit += 0x30;
 15215  003B74  0E30               	movlw	48
 15216  003B76  2793               	addwf	macToString@firstDigit& (0+255),f,b
 15217                           
 15218                           ; BSR set to: 0
 15219                           ;uart.c: 118: secondDigit += 0x30;
 15220  003B78  0E30               	movlw	48
 15221  003B7A  2794               	addwf	macToString@secondDigit& (0+255),f,b
 15222                           
 15223                           ; BSR set to: 0
 15224                           ;uart.c: 120: if (firstDigit > '9') {
 15225  003B7C  0E39               	movlw	57
 15226  003B7E  6593               	cpfsgt	macToString@firstDigit& (0+255),b
 15227  003B80  D00C               	goto	l817
 15228                           
 15229                           ; BSR set to: 0
 15230                           ;uart.c: 121: address[j++] = firstDigit + 7;
 15231  003B82  5197               	movf	macToString@j& (0+255),w,b
 15232  003B84  0D01               	mullw	1
 15233  003B86  0E81               	movlw	low macToString@address
 15234  003B88  24F3               	addwf	prodl,w,c
 15235  003B8A  6ED9               	movwf	fsr2l,c
 15236  003B8C  0E00               	movlw	high macToString@address
 15237  003B8E  20F4               	addwfc	prodh,w,c
 15238  003B90  6EDA               	movwf	fsr2h,c
 15239  003B92  5193               	movf	macToString@firstDigit& (0+255),w,b
 15240  003B94  0F07               	addlw	7
 15241  003B96  6EDF               	movwf	indf2,c
 15242  003B98  D00A               	goto	l8881
 15243  003B9A                     l817:
 15244                           
 15245                           ; BSR set to: 0
 15246                           ;uart.c: 123: address[j++] = firstDigit;
 15247                           
 15248                           ; BSR set to: 0
 15249  003B9A  5197               	movf	macToString@j& (0+255),w,b
 15250  003B9C  0D01               	mullw	1
 15251  003B9E  0E81               	movlw	low macToString@address
 15252  003BA0  24F3               	addwf	prodl,w,c
 15253  003BA2  6ED9               	movwf	fsr2l,c
 15254  003BA4  0E00               	movlw	high macToString@address
 15255  003BA6  20F4               	addwfc	prodh,w,c
 15256  003BA8  6EDA               	movwf	fsr2h,c
 15257  003BAA  C093  FFDF         	movff	macToString@firstDigit,indf2
 15258  003BAE                     l8881:
 15259                           
 15260                           ; BSR set to: 0
 15261  003BAE  2B97               	incf	macToString@j& (0+255),f,b
 15262                           
 15263                           ; BSR set to: 0
 15264                           ;uart.c: 124: }
 15265                           ;uart.c: 125: if (secondDigit > '9') {
 15266                           
 15267                           ; BSR set to: 0
 15268  003BB0  0E39               	movlw	57
 15269  003BB2  6594               	cpfsgt	macToString@secondDigit& (0+255),b
 15270  003BB4  D00C               	goto	l819
 15271                           
 15272                           ; BSR set to: 0
 15273                           ;uart.c: 126: address[j++] = secondDigit + 7;
 15274  003BB6  5197               	movf	macToString@j& (0+255),w,b
 15275  003BB8  0D01               	mullw	1
 15276  003BBA  0E81               	movlw	low macToString@address
 15277  003BBC  24F3               	addwf	prodl,w,c
 15278  003BBE  6ED9               	movwf	fsr2l,c
 15279  003BC0  0E00               	movlw	high macToString@address
 15280  003BC2  20F4               	addwfc	prodh,w,c
 15281  003BC4  6EDA               	movwf	fsr2h,c
 15282  003BC6  5194               	movf	macToString@secondDigit& (0+255),w,b
 15283  003BC8  0F07               	addlw	7
 15284  003BCA  6EDF               	movwf	indf2,c
 15285  003BCC  D00A               	goto	l8891
 15286  003BCE                     l819:
 15287                           
 15288                           ; BSR set to: 0
 15289                           ;uart.c: 128: address[j++] = secondDigit;
 15290                           
 15291                           ; BSR set to: 0
 15292  003BCE  5197               	movf	macToString@j& (0+255),w,b
 15293  003BD0  0D01               	mullw	1
 15294  003BD2  0E81               	movlw	low macToString@address
 15295  003BD4  24F3               	addwf	prodl,w,c
 15296  003BD6  6ED9               	movwf	fsr2l,c
 15297  003BD8  0E00               	movlw	high macToString@address
 15298  003BDA  20F4               	addwfc	prodh,w,c
 15299  003BDC  6EDA               	movwf	fsr2h,c
 15300  003BDE  C094  FFDF         	movff	macToString@secondDigit,indf2
 15301  003BE2                     l8891:
 15302                           
 15303                           ; BSR set to: 0
 15304  003BE2  2B97               	incf	macToString@j& (0+255),f,b
 15305                           
 15306                           ; BSR set to: 0
 15307                           ;uart.c: 129: }
 15308                           ;uart.c: 131: if (i < 5) {
 15309                           
 15310                           ; BSR set to: 0
 15311  003BE4  BF96               	btfsc	(macToString@i+1)& (0+255),7,b
 15312  003BE6  D006               	goto	u9930
 15313  003BE8  5196               	movf	(macToString@i+1)& (0+255),w,b
 15314  003BEA  E10F               	bnz	l8899
 15315  003BEC  0E05               	movlw	5
 15316  003BEE  5D95               	subwf	macToString@i& (0+255),w,b
 15317  003BF0  B0D8               	btfsc	status,0,c
 15318  003BF2  D00B               	goto	l821
 15319  003BF4                     u9930:
 15320                           
 15321                           ; BSR set to: 0
 15322                           ;uart.c: 132: address[j++] = ':';
 15323  003BF4  5197               	movf	macToString@j& (0+255),w,b
 15324  003BF6  0D01               	mullw	1
 15325  003BF8  0E81               	movlw	low macToString@address
 15326  003BFA  24F3               	addwf	prodl,w,c
 15327  003BFC  6ED9               	movwf	fsr2l,c
 15328  003BFE  0E00               	movlw	high macToString@address
 15329  003C00  20F4               	addwfc	prodh,w,c
 15330  003C02  6EDA               	movwf	fsr2h,c
 15331  003C04  0E3A               	movlw	58
 15332  003C06  6EDF               	movwf	indf2,c
 15333                           
 15334                           ; BSR set to: 0
 15335  003C08  2B97               	incf	macToString@j& (0+255),f,b
 15336  003C0A                     l821:
 15337  003C0A                     l8899:
 15338                           
 15339                           ; BSR set to: 0
 15340  003C0A  4B95               	infsnz	macToString@i& (0+255),f,b
 15341  003C0C  2B96               	incf	(macToString@i+1)& (0+255),f,b
 15342                           
 15343                           ; BSR set to: 0
 15344  003C0E  BF96               	btfsc	(macToString@i+1)& (0+255),7,b
 15345  003C10  D79C               	goto	l815
 15346  003C12  5196               	movf	(macToString@i+1)& (0+255),w,b
 15347  003C14  E101               	bnz	l8903
 15348  003C16  D795               	goto	L6
 15349  003C18                     u9940:
 15350  003C18                     l816:
 15351  003C18                     l8903:
 15352                           
 15353                           ; BSR set to: 0
 15354                           ;uart.c: 133: }
 15355                           ;uart.c: 134: }
 15356                           ;uart.c: 135: return address;
 15357  003C18  0E81               	movlw	low macToString@address
 15358  003C1A  6F7A               	movwf	?_macToString& (0+255),b
 15359  003C1C  0E00               	movlw	high macToString@address
 15360  003C1E  6F7B               	movwf	(?_macToString+1)& (0+255),b
 15361  003C20  0012               	return	
 15362  003C22                     __end_of_macToString:
 15363                           	opt stack 0
 15364                           tblptru	equ	0xFF8
 15365                           tblptrh	equ	0xFF7
 15366                           tblptrl	equ	0xFF6
 15367                           tablat	equ	0xFF5
 15368                           prodh	equ	0xFF4
 15369                           prodl	equ	0xFF3
 15370                           intcon	equ	0xFF2
 15371                           intcon3	equ	0xFF0
 15372                           indf0	equ	0xFEF
 15373                           postinc0	equ	0xFEE
 15374                           plusw0	equ	0xFEB
 15375                           fsr0h	equ	0xFEA
 15376                           fsr0l	equ	0xFE9
 15377                           wreg	equ	0xFE8
 15378                           indf1	equ	0xFE7
 15379                           postinc1	equ	0xFE6
 15380                           postdec1	equ	0xFE5
 15381                           plusw1	equ	0xFE3
 15382                           fsr1h	equ	0xFE2
 15383                           fsr1l	equ	0xFE1
 15384                           indf2	equ	0xFDF
 15385                           postinc2	equ	0xFDE
 15386                           postdec2	equ	0xFDD
 15387                           plusw2	equ	0xFDB
 15388                           fsr2h	equ	0xFDA
 15389                           fsr2l	equ	0xFD9
 15390                           status	equ	0xFD8
 15391                           
 15392 ;; *************** function _ipv4_isAllZero *****************
 15393 ;; Defined at:
 15394 ;;		line 296 in file "src/stack/protocols/ipv4.c"
 15395 ;; Parameters:    Size  Location     Type
 15396 ;;  ip              2    0[BANK0 ] PTR struct ipv4_address
 15397 ;;		 -> arp_setNewEntry@ip(4), arp_parseFromRXBuffer@arp(32), 
 15398 ;; Auto vars:     Size  Location     Type
 15399 ;;  i               1    2[BANK0 ] unsigned char 
 15400 ;; Return value:  Size  Location     Type
 15401 ;;		None               void
 15402 ;; Registers used:
 15403 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15404 ;; Tracked objects:
 15405 ;;		On entry : 0/0
 15406 ;;		On exit  : 0/0
 15407 ;;		Unchanged: 0/0
 15408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15409 ;;      Params:         0       2       0       0       0       0       0       0       0
 15410 ;;      Locals:         0       1       0       0       0       0       0       0       0
 15411 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15412 ;;      Totals:         0       3       0       0       0       0       0       0       0
 15413 ;;Total ram usage:        3 bytes
 15414 ;; Hardware stack levels used:    1
 15415 ;; Hardware stack levels required when called:    4
 15416 ;; This function calls:
 15417 ;;		Nothing
 15418 ;; This function is called by:
 15419 ;;		_arp_parseFromRXBuffer
 15420 ;;		_arp_setNewEntry
 15421 ;; This function uses a non-reentrant model
 15422 ;;
 15423                           
 15424                           	psect	text56
 15425  005390                     __ptext56:
 15426                           	opt stack 0
 15427  005390                     _ipv4_isAllZero:
 15428                           	opt stack 23
 15429                           
 15430                           ;ipv4.c: 297: for (uint8_t i = 0; i < 4; i++) {
 15431                           
 15432                           ; BSR set to: 0
 15433                           ;incstack = 0
 15434  005390  0E00               	movlw	0
 15435  005392  0100               	movlb	0	; () banked
 15436  005394  6F62               	movwf	ipv4_isAllZero@i& (0+255),b
 15437  005396                     l9065:
 15438                           
 15439                           ; BSR set to: 0
 15440  005396  0E03               	movlw	3
 15441  005398  6562               	cpfsgt	ipv4_isAllZero@i& (0+255),b
 15442  00539A  D001               	goto	l1194
 15443  00539C  D00F               	goto	u10180
 15444  00539E                     l1194:
 15445                           
 15446                           ; BSR set to: 0
 15447                           ;ipv4.c: 298: if (ip->address[i] != 0x00)
 15448                           
 15449                           ; BSR set to: 0
 15450  00539E  5162               	movf	ipv4_isAllZero@i& (0+255),w,b
 15451  0053A0  0D01               	mullw	1
 15452  0053A2  50F3               	movf	prodl,w,c
 15453  0053A4  2560               	addwf	ipv4_isAllZero@ip& (0+255),w,b
 15454  0053A6  6ED9               	movwf	fsr2l,c
 15455  0053A8  50F4               	movf	prodh,w,c
 15456  0053AA  2161               	addwfc	(ipv4_isAllZero@ip+1)& (0+255),w,b
 15457  0053AC  6EDA               	movwf	fsr2h,c
 15458  0053AE  50DF               	movf	indf2,w,c
 15459  0053B0  B4D8               	btfsc	status,2,c
 15460  0053B2  D002               	goto	l1196
 15461                           
 15462                           ; BSR set to: 0
 15463                           ;ipv4.c: 299: return 0;
 15464  0053B4  90D8               	bcf	status,0,c
 15465                           
 15466                           ; BSR set to: 0
 15467  0053B6  0012               	return	
 15468  0053B8                     l1196:
 15469                           
 15470                           ; BSR set to: 0
 15471                           
 15472                           ; BSR set to: 0
 15473  0053B8  2B62               	incf	ipv4_isAllZero@i& (0+255),f,b
 15474  0053BA  D7ED               	goto	l9065
 15475  0053BC                     u10180:
 15476                           
 15477                           ; BSR set to: 0
 15478                           ;ipv4.c: 300: }
 15479                           ;ipv4.c: 301: return 1;
 15480                           
 15481                           ; BSR set to: 0
 15482  0053BC  80D8               	bsf	status,0,c
 15483  0053BE  0012               	return	
 15484  0053C0                     __end_of_ipv4_isAllZero:
 15485                           	opt stack 0
 15486                           tblptru	equ	0xFF8
 15487                           tblptrh	equ	0xFF7
 15488                           tblptrl	equ	0xFF6
 15489                           tablat	equ	0xFF5
 15490                           prodh	equ	0xFF4
 15491                           prodl	equ	0xFF3
 15492                           intcon	equ	0xFF2
 15493                           intcon3	equ	0xFF0
 15494                           indf0	equ	0xFEF
 15495                           postinc0	equ	0xFEE
 15496                           plusw0	equ	0xFEB
 15497                           fsr0h	equ	0xFEA
 15498                           fsr0l	equ	0xFE9
 15499                           wreg	equ	0xFE8
 15500                           indf1	equ	0xFE7
 15501                           postinc1	equ	0xFE6
 15502                           postdec1	equ	0xFE5
 15503                           plusw1	equ	0xFE3
 15504                           fsr1h	equ	0xFE2
 15505                           fsr1l	equ	0xFE1
 15506                           indf2	equ	0xFDF
 15507                           postinc2	equ	0xFDE
 15508                           postdec2	equ	0xFDD
 15509                           plusw2	equ	0xFDB
 15510                           fsr2h	equ	0xFDA
 15511                           fsr2l	equ	0xFD9
 15512                           status	equ	0xFD8
 15513                           
 15514 ;; *************** function _arp_background *****************
 15515 ;; Defined at:
 15516 ;;		line 383 in file "src/stack/protocols/arp.c"
 15517 ;; Parameters:    Size  Location     Type
 15518 ;;  link            1    wreg     enum E232
 15519 ;; Auto vars:     Size  Location     Type
 15520 ;;  link            1   86[BANK1 ] enum E232
 15521 ;;  errProbe        3   90[BANK1 ] struct error
 15522 ;;  errAnnounce     3   87[BANK1 ] struct error
 15523 ;; Return value:  Size  Location     Type
 15524 ;;                  3   81[BANK1 ] struct error
 15525 ;; Registers used:
 15526 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15527 ;; Tracked objects:
 15528 ;;		On entry : 0/0
 15529 ;;		On exit  : 0/0
 15530 ;;		Unchanged: 0/0
 15531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15532 ;;      Params:         0       0       3       0       0       0       0       0       0
 15533 ;;      Locals:         0       0       7       0       0       0       0       0       0
 15534 ;;      Temps:          0       0       2       0       0       0       0       0       0
 15535 ;;      Totals:         0       0      12       0       0       0       0       0       0
 15536 ;;Total ram usage:       12 bytes
 15537 ;; Hardware stack levels used:    1
 15538 ;; Hardware stack levels required when called:   12
 15539 ;; This function calls:
 15540 ;;		_UARTTransmitText
 15541 ;;		_arp_gratuitous
 15542 ;;		_arp_probe
 15543 ;;		_ipv4_SrcAddrChanged
 15544 ;;		_ipv4_getPreliminaryIPSourceAddress
 15545 ;; This function is called by:
 15546 ;;		_handleStackBackgroundTasks
 15547 ;; This function uses a non-reentrant model
 15548 ;;
 15549                           
 15550                           	psect	text57
 15551  002CDA                     __ptext57:
 15552                           	opt stack 0
 15553  002CDA                     _arp_background:
 15554                           	opt stack 17
 15555                           
 15556                           ; BSR set to: 0
 15557                           ;incstack = 0
 15558                           ;arp_background@link stored from wreg
 15559  002CDA  0101               	movlb	1	; () banked
 15560  002CDC  6F56               	movwf	arp_background@link& (0+255),b
 15561                           
 15562                           ;arp.c: 384: error_t static err;
 15563                           ;arp.c: 385: error_t errProbe;
 15564                           ;arp.c: 386: error_t errAnnounce;
 15565                           ;arp.c: 387: bool_t static fAnnounce = 0;
 15566                           ;arp.c: 388: int8_t static state = 0;
 15567                           ;arp.c: 389: ipv4_address_t static ipPreliminary;
 15568                           ;arp.c: 390: err.code = ERROR_ARP_WAITING;
 15569  002CDE  0E01               	movlw	1
 15570  002CE0  0101               	movlb	1	; () banked
 15571  002CE2  6FC9               	movwf	(arp_background@err+2)& (0+255),b
 15572  002CE4  0E91               	movlw	145
 15573  002CE6  6FC8               	movwf	(arp_background@err+1)& (0+255),b
 15574                           
 15575                           ;arp.c: 391: err.module = ERROR_MODULE_ARP;
 15576  002CE8  0E03               	movlw	3
 15577  002CEA  6FC7               	movwf	arp_background@err& (0+255),b
 15578                           
 15579                           ;arp.c: 393: switch (state) {
 15580  002CEC  D0A8               	goto	l1034
 15581  002CEE                     
 15582                           ; BSR set to: 1
 15583                           ;arp.c: 397: ipPreliminary = ipv4_getPreliminaryIPSourceAddress();
 15584                           
 15585                           ; BSR set to: 1
 15586  002CEE  EC85  F02B         	call	_ipv4_getPreliminaryIPSourceAddress	;wreg free
 15587  002CF2  C060  F19C         	movff	?_ipv4_getPreliminaryIPSourceAddress,arp_background@ipPreliminary
 15588  002CF6  C061  F19D         	movff	?_ipv4_getPreliminaryIPSourceAddress+1,arp_background@ipPreliminary+1
 15589  002CFA  C062  F19E         	movff	?_ipv4_getPreliminaryIPSourceAddress+2,arp_background@ipPreliminary+2
 15590  002CFE  C063  F19F         	movff	?_ipv4_getPreliminaryIPSourceAddress+3,arp_background@ipPreliminary+3
 15591                           
 15592                           ;arp.c: 398: if (ipv4_SrcAddrChanged(&err)) {
 15593  002D02  0EC7               	movlw	low arp_background@err
 15594  002D04  0100               	movlb	0	; () banked
 15595  002D06  6F60               	movwf	ipv4_SrcAddrChanged@err& (0+255),b
 15596  002D08  0E01               	movlw	high arp_background@err
 15597  002D0A  6F61               	movwf	(ipv4_SrcAddrChanged@err+1)& (0+255),b
 15598  002D0C  EC69  F02B         	call	_ipv4_SrcAddrChanged	;wreg free
 15599  002D10  0100               	movlb	0	; () banked
 15600  002D12  A0D8               	btfss	status,0,c
 15601  002D14  D055               	goto	l1039
 15602                           
 15603                           ; BSR set to: 0
 15604                           ;arp.c: 399: errProbe.code = arp_probe(ipPreliminary, link).code;
 15605  002D16  C19C  F134         	movff	arp_background@ipPreliminary,arp_probe@ipTarget
 15606  002D1A  C19D  F135         	movff	arp_background@ipPreliminary+1,arp_probe@ipTarget+1
 15607  002D1E  C19E  F136         	movff	arp_background@ipPreliminary+2,arp_probe@ipTarget+2
 15608  002D22  C19F  F137         	movff	arp_background@ipPreliminary+3,arp_probe@ipTarget+3
 15609  002D26  C156  F138         	movff	arp_background@link,arp_probe@link
 15610  002D2A  ECCA  F00C         	call	_arp_probe	;wreg free
 15611  002D2E  0E34               	movlw	low ?_arp_probe
 15612  002D30  6ED9               	movwf	fsr2l,c
 15613  002D32  0E01               	movlw	high ?_arp_probe
 15614  002D34  6EDA               	movwf	fsr2h,c
 15615  002D36  0E01               	movlw	1
 15616  002D38  26D9               	addwf	fsr2l,f,c
 15617  002D3A  0E00               	movlw	0
 15618  002D3C  22DA               	addwfc	fsr2h,f,c
 15619  002D3E  CFDE F15B          	movff	postinc2,arp_background@errProbe+1
 15620  002D42  CFDD F15C          	movff	postdec2,arp_background@errProbe+2
 15621                           
 15622                           ;arp.c: 400: switch (errProbe.code) {
 15623  002D46  D023               	goto	l1037
 15624  002D48                     
 15625                           ;arp.c: 403: UARTTransmitText("[ARP]: Conflict during probing.\n\r");
 15626  002D48  0E68               	movlw	low STR_85
 15627  002D4A  0100               	movlb	0	; () banked
 15628  002D4C  6F98               	movwf	UARTTransmitText@str& (0+255),b
 15629  002D4E  0E7C               	movlw	high STR_85
 15630  002D50  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 15631  002D52  EC09  F027         	call	_UARTTransmitText	;wreg free
 15632                           
 15633                           ;arp.c: 405: break;
 15634  002D56  D034               	goto	l1039
 15635  002D58                     
 15636                           ;arp.c: 408: UARTTransmitText("[ARP]: Nobody answered to probes.\n\r");
 15637  002D58  0E21               	movlw	low STR_86
 15638  002D5A  0100               	movlb	0	; () banked
 15639  002D5C  6F98               	movwf	UARTTransmitText@str& (0+255),b
 15640  002D5E  0E7C               	movlw	high STR_86
 15641  002D60  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 15642  002D62  EC09  F027         	call	_UARTTransmitText	;wreg free
 15643                           
 15644                           ;arp.c: 410: state = 1;
 15645  002D66  0E01               	movlw	1
 15646  002D68  0101               	movlb	1	; () banked
 15647  002D6A  6FA8               	movwf	arp_background@state& (0+255),b
 15648                           
 15649                           ; BSR set to: 1
 15650                           ;arp.c: 413: break;
 15651                           
 15652                           ;arp.c: 412: case ERROR_ARP_WAITING:
 15653                           
 15654                           ;arp.c: 411: break;
 15655  002D6C  D029               	goto	l1039
 15656  002D6E                     
 15657                           ; BSR set to: 1
 15658                           ;arp.c: 416: UARTTransmitText("[ARP]: Operation was interrupted because link was lost.\n
      +                          \r");
 15659                           
 15660                           ; BSR set to: 1
 15661  002D6E  0E14               	movlw	low STR_87
 15662  002D70  0100               	movlb	0	; () banked
 15663  002D72  6F98               	movwf	UARTTransmitText@str& (0+255),b
 15664  002D74  0E7A               	movlw	high STR_87
 15665  002D76  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 15666  002D78  EC09  F027         	call	_UARTTransmitText	;wreg free
 15667                           
 15668                           ;arp.c: 418: break;
 15669  002D7C  D021               	goto	l1039
 15670  002D7E                     
 15671                           ;arp.c: 421: UARTTransmitText("[ARP]: An unknown error occured.\n\r");
 15672  002D7E  0E45               	movlw	low STR_88
 15673  002D80  0100               	movlb	0	; () banked
 15674  002D82  6F98               	movwf	UARTTransmitText@str& (0+255),b
 15675  002D84  0E7C               	movlw	high STR_88
 15676  002D86  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 15677  002D88  EC09  F027         	call	_UARTTransmitText	;wreg free
 15678                           
 15679                           ;arp.c: 423: }
 15680  002D8C  D019               	goto	l1039
 15681  002D8E                     l1037:
 15682  002D8E  EE21  F05B         	lfsr	2,arp_background@errProbe+1
 15683  002D92  CFDE F154          	movff	postinc2,??_arp_background
 15684  002D96  CFDD F155          	movff	postdec2,??_arp_background+1
 15685                           
 15686                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15687                           ; Switch size 1, requested type "space"
 15688                           ; Number of cases is 1, Range of values is 1 to 1
 15689                           ; switch strategies available:
 15690                           ; Name         Instructions Cycles
 15691                           ; simple_byte            4     3 (average)
 15692                           ;	Chosen strategy is simple_byte
 15693  002D9A  0101               	movlb	1	; () banked
 15694  002D9C  5155               	movf	(??_arp_background+1)& (0+255),w,b
 15695  002D9E  0A01               	xorlw	1	; case 1
 15696  002DA0  A4D8               	btfss	status,2,c
 15697  002DA2  D7ED               	goto	l1043
 15698                           
 15699                           ; BSR set to: 1
 15700                           ; Switch size 1, requested type "space"
 15701                           ; Number of cases is 4, Range of values is 145 to 150
 15702                           ; switch strategies available:
 15703                           ; Name         Instructions Cycles
 15704                           ; simple_byte           13     7 (average)
 15705                           ;	Chosen strategy is simple_byte
 15706  002DA4  5154               	movf	??_arp_background& (0+255),w,b
 15707  002DA6  0A91               	xorlw	145	; case 145
 15708  002DA8  B4D8               	btfsc	status,2,c
 15709  002DAA  D00A               	goto	l1039
 15710  002DAC  0A02               	xorlw	2	; case 147
 15711  002DAE  B4D8               	btfsc	status,2,c
 15712  002DB0  D7D3               	goto	l1040
 15713  002DB2  0A06               	xorlw	6	; case 149
 15714  002DB4  B4D8               	btfsc	status,2,c
 15715  002DB6  D7C8               	goto	l1038
 15716  002DB8  0A03               	xorlw	3	; case 150
 15717  002DBA  B4D8               	btfsc	status,2,c
 15718  002DBC  D7D8               	goto	l1042
 15719  002DBE  D7DF               	goto	l1043
 15720  002DC0                     l1039:
 15721                           
 15722                           ;arp.c: 424: }
 15723                           ;arp.c: 425: err.code = errProbe.code;
 15724                           
 15725                           ; BSR set to: 1
 15726  002DC0  C15B  F1C8         	movff	arp_background@errProbe+1,arp_background@err+1
 15727  002DC4  C15C  F1C9         	movff	arp_background@errProbe+2,arp_background@err+2
 15728                           
 15729                           ;arp.c: 427: break;
 15730  002DC8  D041               	goto	l1044
 15731  002DCA                     
 15732                           ;arp.c: 430: errAnnounce = arp_gratuitous(ipPreliminary, link);
 15733  002DCA  C19C  F134         	movff	arp_background@ipPreliminary,arp_gratuitous@ip
 15734  002DCE  C19D  F135         	movff	arp_background@ipPreliminary+1,arp_gratuitous@ip+1
 15735  002DD2  C19E  F136         	movff	arp_background@ipPreliminary+2,arp_gratuitous@ip+2
 15736  002DD6  C19F  F137         	movff	arp_background@ipPreliminary+3,arp_gratuitous@ip+3
 15737  002DDA  C156  F138         	movff	arp_background@link,arp_gratuitous@link
 15738  002DDE  EC91  F010         	call	_arp_gratuitous	;wreg free
 15739  002DE2  C134  F157         	movff	?_arp_gratuitous,arp_background@errAnnounce
 15740  002DE6  C135  F158         	movff	?_arp_gratuitous+1,arp_background@errAnnounce+1
 15741  002DEA  C136  F159         	movff	?_arp_gratuitous+2,arp_background@errAnnounce+2
 15742                           
 15743                           ;arp.c: 431: err.code = errAnnounce.code;
 15744  002DEE  C158  F1C8         	movff	arp_background@errAnnounce+1,arp_background@err+1
 15745  002DF2  C159  F1C9         	movff	arp_background@errAnnounce+2,arp_background@err+2
 15746                           
 15747                           ;arp.c: 432: if (err.code == ERROR_ARP_IPv4_ADDRESS_CONFLICT) {
 15748  002DF6  0E95               	movlw	149
 15749  002DF8  0101               	movlb	1	; () banked
 15750  002DFA  19C8               	xorwf	(arp_background@err+1)& (0+255),w,b
 15751  002DFC  E10D               	bnz	l10251
 15752  002DFE  05C9               	decf	(arp_background@err+2)& (0+255),w,b
 15753  002E00  A4D8               	btfss	status,2,c
 15754  002E02  D00A               	goto	l1046
 15755                           
 15756                           ; BSR set to: 1
 15757                           ;arp.c: 434: UARTTransmitText("[ARP]: Conflict during announcement.\n\r");
 15758  002E04  0E63               	movlw	low STR_89
 15759  002E06  0100               	movlb	0	; () banked
 15760  002E08  6F98               	movwf	UARTTransmitText@str& (0+255),b
 15761  002E0A  0E7B               	movlw	high STR_89
 15762  002E0C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 15763  002E0E  EC09  F027         	call	_UARTTransmitText	;wreg free
 15764                           
 15765                           ;arp.c: 436: state = 0;
 15766  002E12  0E00               	movlw	0
 15767  002E14  0101               	movlb	1	; () banked
 15768  002E16  6FA8               	movwf	arp_background@state& (0+255),b
 15769  002E18                     l1046:
 15770  002E18                     l10251:
 15771                           
 15772                           ; BSR set to: 1
 15773                           ;arp.c: 437: }
 15774                           ;arp.c: 438: if (errAnnounce.module == ERROR_MODULE_ARP &&
 15775                           ;arp.c: 439: errAnnounce.code == (uint16_t)0) {
 15776  002E18  0E03               	movlw	3
 15777  002E1A  1957               	xorwf	arp_background@errAnnounce& (0+255),w,b
 15778  002E1C  A4D8               	btfss	status,2,c
 15779  002E1E  D016               	goto	l1044
 15780                           
 15781                           ; BSR set to: 1
 15782  002E20  5158               	movf	(arp_background@errAnnounce+1)& (0+255),w,b
 15783  002E22  1159               	iorwf	(arp_background@errAnnounce+2)& (0+255),w,b
 15784  002E24  A4D8               	btfss	status,2,c
 15785  002E26  D012               	goto	l1044
 15786                           
 15787                           ; BSR set to: 1
 15788                           ;arp.c: 441: UARTTransmitText("[ARP]: All announcements sent.\n\r");
 15789  002E28  0ECD               	movlw	low STR_90
 15790  002E2A  0100               	movlb	0	; () banked
 15791  002E2C  6F98               	movwf	UARTTransmitText@str& (0+255),b
 15792  002E2E  0E7C               	movlw	high STR_90
 15793  002E30  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 15794  002E32  EC09  F027         	call	_UARTTransmitText	;wreg free
 15795                           
 15796                           ;arp.c: 443: state = 0;
 15797  002E36  0E00               	movlw	0
 15798  002E38  0101               	movlb	1	; () banked
 15799  002E3A  6FA8               	movwf	arp_background@state& (0+255),b
 15800                           
 15801                           ; BSR set to: 1
 15802                           ;arp.c: 446: }
 15803                           
 15804                           ; BSR set to: 1
 15805                           ;arp.c: 444: }
 15806                           ;arp.c: 445: break;
 15807  002E3C  D007               	goto	l1044
 15808  002E3E                     l1034:
 15809                           
 15810                           ; BSR set to: 1
 15811                           
 15812                           ; BSR set to: 1
 15813  002E3E  51A8               	movf	arp_background@state& (0+255),w,b
 15814                           
 15815                           ; Switch size 1, requested type "space"
 15816                           ; Number of cases is 2, Range of values is 0 to 1
 15817                           ; switch strategies available:
 15818                           ; Name         Instructions Cycles
 15819                           ; simple_byte            7     4 (average)
 15820                           ;	Chosen strategy is simple_byte
 15821  002E40  0A00               	xorlw	0	; case 0
 15822  002E42  B4D8               	btfsc	status,2,c
 15823  002E44  D754               	goto	l1035
 15824  002E46  0A01               	xorlw	1	; case 1
 15825  002E48  B4D8               	btfsc	status,2,c
 15826  002E4A  D7BF               	goto	l1045
 15827  002E4C                     l1044:
 15828                           
 15829                           ;arp.c: 448: return err;
 15830  002E4C  C1C7  F151         	movff	arp_background@err,?_arp_background
 15831  002E50  C1C8  F152         	movff	arp_background@err+1,?_arp_background+1
 15832  002E54  C1C9  F153         	movff	arp_background@err+2,?_arp_background+2
 15833  002E58  0012               	return		;funcret
 15834  002E5A                     __end_of_arp_background:
 15835                           	opt stack 0
 15836                           tblptru	equ	0xFF8
 15837                           tblptrh	equ	0xFF7
 15838                           tblptrl	equ	0xFF6
 15839                           tablat	equ	0xFF5
 15840                           prodh	equ	0xFF4
 15841                           prodl	equ	0xFF3
 15842                           intcon	equ	0xFF2
 15843                           intcon3	equ	0xFF0
 15844                           indf0	equ	0xFEF
 15845                           postinc0	equ	0xFEE
 15846                           plusw0	equ	0xFEB
 15847                           fsr0h	equ	0xFEA
 15848                           fsr0l	equ	0xFE9
 15849                           wreg	equ	0xFE8
 15850                           indf1	equ	0xFE7
 15851                           postinc1	equ	0xFE6
 15852                           postdec1	equ	0xFE5
 15853                           plusw1	equ	0xFE3
 15854                           fsr1h	equ	0xFE2
 15855                           fsr1l	equ	0xFE1
 15856                           indf2	equ	0xFDF
 15857                           postinc2	equ	0xFDE
 15858                           postdec2	equ	0xFDD
 15859                           plusw2	equ	0xFDB
 15860                           fsr2h	equ	0xFDA
 15861                           fsr2l	equ	0xFD9
 15862                           status	equ	0xFD8
 15863                           
 15864 ;; *************** function _ipv4_getPreliminaryIPSourceAddress *****************
 15865 ;; Defined at:
 15866 ;;		line 231 in file "src/stack/protocols/ipv4.c"
 15867 ;; Parameters:    Size  Location     Type
 15868 ;;		None
 15869 ;; Auto vars:     Size  Location     Type
 15870 ;;		None
 15871 ;; Return value:  Size  Location     Type
 15872 ;;                  4    0[BANK0 ] struct ipv4_address
 15873 ;; Registers used:
 15874 ;;		None
 15875 ;; Tracked objects:
 15876 ;;		On entry : 0/0
 15877 ;;		On exit  : 0/0
 15878 ;;		Unchanged: 0/0
 15879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15880 ;;      Params:         0       4       0       0       0       0       0       0       0
 15881 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15882 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15883 ;;      Totals:         0       4       0       0       0       0       0       0       0
 15884 ;;Total ram usage:        4 bytes
 15885 ;; Hardware stack levels used:    1
 15886 ;; Hardware stack levels required when called:    4
 15887 ;; This function calls:
 15888 ;;		Nothing
 15889 ;; This function is called by:
 15890 ;;		_arp_background
 15891 ;; This function uses a non-reentrant model
 15892 ;;
 15893                           
 15894                           	psect	text58
 15895  00570A                     __ptext58:
 15896                           	opt stack 0
 15897  00570A                     _ipv4_getPreliminaryIPSourceAddress:
 15898                           	opt stack 24
 15899                           
 15900                           ;ipv4.c: 232: return ipPreliminarySource;
 15901                           
 15902                           ;incstack = 0
 15903  00570A  C198  F060         	movff	_ipPreliminarySource,?_ipv4_getPreliminaryIPSourceAddress
 15904  00570E  C199  F061         	movff	_ipPreliminarySource+1,?_ipv4_getPreliminaryIPSourceAddress+1
 15905  005712  C19A  F062         	movff	_ipPreliminarySource+2,?_ipv4_getPreliminaryIPSourceAddress+2
 15906  005716  C19B  F063         	movff	_ipPreliminarySource+3,?_ipv4_getPreliminaryIPSourceAddress+3
 15907  00571A  0012               	return		;funcret
 15908  00571C                     __end_of_ipv4_getPreliminaryIPSourceAddress:
 15909                           	opt stack 0
 15910                           tblptru	equ	0xFF8
 15911                           tblptrh	equ	0xFF7
 15912                           tblptrl	equ	0xFF6
 15913                           tablat	equ	0xFF5
 15914                           prodh	equ	0xFF4
 15915                           prodl	equ	0xFF3
 15916                           intcon	equ	0xFF2
 15917                           intcon3	equ	0xFF0
 15918                           indf0	equ	0xFEF
 15919                           postinc0	equ	0xFEE
 15920                           plusw0	equ	0xFEB
 15921                           fsr0h	equ	0xFEA
 15922                           fsr0l	equ	0xFE9
 15923                           wreg	equ	0xFE8
 15924                           indf1	equ	0xFE7
 15925                           postinc1	equ	0xFE6
 15926                           postdec1	equ	0xFE5
 15927                           plusw1	equ	0xFE3
 15928                           fsr1h	equ	0xFE2
 15929                           fsr1l	equ	0xFE1
 15930                           indf2	equ	0xFDF
 15931                           postinc2	equ	0xFDE
 15932                           postdec2	equ	0xFDD
 15933                           plusw2	equ	0xFDB
 15934                           fsr2h	equ	0xFDA
 15935                           fsr2l	equ	0xFD9
 15936                           status	equ	0xFD8
 15937                           
 15938 ;; *************** function _ipv4_SrcAddrChanged *****************
 15939 ;; Defined at:
 15940 ;;		line 281 in file "src/stack/protocols/ipv4.c"
 15941 ;; Parameters:    Size  Location     Type
 15942 ;;  err             2    0[BANK0 ] PTR struct error
 15943 ;;		 -> arp_background@err(3), 
 15944 ;; Auto vars:     Size  Location     Type
 15945 ;;		None
 15946 ;; Return value:  Size  Location     Type
 15947 ;;		None               void
 15948 ;; Registers used:
 15949 ;;		wreg, status,2, status,0
 15950 ;; Tracked objects:
 15951 ;;		On entry : 0/0
 15952 ;;		On exit  : 0/0
 15953 ;;		Unchanged: 0/0
 15954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15955 ;;      Params:         0       2       0       0       0       0       0       0       0
 15956 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15957 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15958 ;;      Totals:         0       2       0       0       0       0       0       0       0
 15959 ;;Total ram usage:        2 bytes
 15960 ;; Hardware stack levels used:    1
 15961 ;; Hardware stack levels required when called:    4
 15962 ;; This function calls:
 15963 ;;		Nothing
 15964 ;; This function is called by:
 15965 ;;		_arp_background
 15966 ;; This function uses a non-reentrant model
 15967 ;;
 15968                           
 15969                           	psect	text59
 15970  0056D2                     __ptext59:
 15971                           	opt stack 0
 15972  0056D2                     _ipv4_SrcAddrChanged:
 15973                           	opt stack 24
 15974                           
 15975                           ;ipv4.c: 282: arpStatus = err;
 15976                           
 15977                           ;incstack = 0
 15978  0056D2  C060  F03C         	movff	ipv4_SrcAddrChanged@err,_arpStatus
 15979  0056D6  C061  F03D         	movff	ipv4_SrcAddrChanged@err+1,_arpStatus+1
 15980                           
 15981                           ;ipv4.c: 283: return fSrcAddrChanged;
 15982  0056DA  B04F               	btfsc	_fSrcAddrChanged/(0+8),_fSrcAddrChanged& (0+7),c
 15983  0056DC  D002               	goto	l8135
 15984  0056DE  90D8               	bcf	status,0,c
 15985  0056E0  0012               	return	
 15986  0056E2                     l8135:
 15987  0056E2  80D8               	bsf	status,0,c
 15988  0056E4  0012               	return	
 15989  0056E6                     __end_of_ipv4_SrcAddrChanged:
 15990                           	opt stack 0
 15991                           tblptru	equ	0xFF8
 15992                           tblptrh	equ	0xFF7
 15993                           tblptrl	equ	0xFF6
 15994                           tablat	equ	0xFF5
 15995                           prodh	equ	0xFF4
 15996                           prodl	equ	0xFF3
 15997                           intcon	equ	0xFF2
 15998                           intcon3	equ	0xFF0
 15999                           indf0	equ	0xFEF
 16000                           postinc0	equ	0xFEE
 16001                           plusw0	equ	0xFEB
 16002                           fsr0h	equ	0xFEA
 16003                           fsr0l	equ	0xFE9
 16004                           wreg	equ	0xFE8
 16005                           indf1	equ	0xFE7
 16006                           postinc1	equ	0xFE6
 16007                           postdec1	equ	0xFE5
 16008                           plusw1	equ	0xFE3
 16009                           fsr1h	equ	0xFE2
 16010                           fsr1l	equ	0xFE1
 16011                           indf2	equ	0xFDF
 16012                           postinc2	equ	0xFDE
 16013                           postdec2	equ	0xFDD
 16014                           plusw2	equ	0xFDB
 16015                           fsr2h	equ	0xFDA
 16016                           fsr2l	equ	0xFD9
 16017                           status	equ	0xFD8
 16018                           
 16019 ;; *************** function _arp_probe *****************
 16020 ;; Defined at:
 16021 ;;		line 242 in file "src/stack/protocols/arp.c"
 16022 ;; Parameters:    Size  Location     Type
 16023 ;;  ipTarget        4   52[BANK1 ] struct ipv4_address
 16024 ;;  link            1   56[BANK1 ] enum E232
 16025 ;; Auto vars:     Size  Location     Type
 16026 ;;  ipSender        4   74[BANK1 ] struct ipv4_address
 16027 ;;  waitingTime     4   70[BANK1 ] unsigned long 
 16028 ;;  timeStart       4   66[BANK1 ] unsigned long 
 16029 ;;  err             3   78[BANK1 ] struct error
 16030 ;;  index           1   65[BANK1 ] unsigned char 
 16031 ;; Return value:  Size  Location     Type
 16032 ;;                  3   52[BANK1 ] struct error
 16033 ;; Registers used:
 16034 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16035 ;; Tracked objects:
 16036 ;;		On entry : 0/0
 16037 ;;		On exit  : 0/0
 16038 ;;		Unchanged: 0/0
 16039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16040 ;;      Params:         0       0       5       0       0       0       0       0       0
 16041 ;;      Locals:         0       0      16       0       0       0       0       0       0
 16042 ;;      Temps:          0       0       8       0       0       0       0       0       0
 16043 ;;      Totals:         0       0      29       0       0       0       0       0       0
 16044 ;;Total ram usage:       29 bytes
 16045 ;; Hardware stack levels used:    1
 16046 ;; Hardware stack levels required when called:   11
 16047 ;; This function calls:
 16048 ;;		_UARTTransmitText
 16049 ;;		___lwmod
 16050 ;;		_arp_checkForEntry
 16051 ;;		_arp_sendRequest
 16052 ;;		_getMillis
 16053 ;;		_ipAdressToString
 16054 ;;		_ipv4_setToAllZero
 16055 ;;		_rand
 16056 ;; This function is called by:
 16057 ;;		_arp_background
 16058 ;; This function uses a non-reentrant model
 16059 ;;
 16060                           
 16061                           	psect	text60
 16062  001994                     __ptext60:
 16063                           	opt stack 0
 16064  001994                     _arp_probe:
 16065                           	opt stack 17
 16066                           
 16067                           ;arp.c: 243: time_t timeStart;
 16068                           ;arp.c: 244: time_t waitingTime;
 16069                           ;arp.c: 245: ipv4_address_t ipSender;
 16070                           ;arp.c: 246: uint8_t static probeCounter = 0;
 16071                           ;arp.c: 247: error_t err;
 16072                           ;arp.c: 249: enum states {
 16073                           ;arp.c: 250: PREPARING_PROBE, WAITING_TO_SEND, SENDING_PROBE, ARP_ENTRY_FOUND
 16074                           ;arp.c: 251: };
 16075                           ;arp.c: 252: uint8_t static state = PREPARING_PROBE;
 16076                           ;arp.c: 253: uint8_t index;
 16077                           ;arp.c: 254: err.module = ERROR_MODULE_ARP;
 16078                           
 16079                           ;incstack = 0
 16080  001994  0E03               	movlw	3
 16081  001996  0101               	movlb	1	; () banked
 16082  001998  6F4E               	movwf	arp_probe@err& (0+255),b
 16083                           
 16084                           ;arp.c: 256: if (link == NO_LINK) {
 16085  00199A  5138               	movf	arp_probe@link& (0+255),w,b
 16086  00199C  A4D8               	btfss	status,2,c
 16087  00199E  D00F               	goto	l986
 16088                           
 16089                           ; BSR set to: 1
 16090                           ;arp.c: 257: state = PREPARING_PROBE;
 16091  0019A0  0E00               	movlw	0
 16092  0019A2  6FAB               	movwf	arp_probe@state& (0+255),b
 16093                           
 16094                           ;arp.c: 258: probeCounter = 0;
 16095  0019A4  0E00               	movlw	0
 16096  0019A6  6FAC               	movwf	arp_probe@probeCounter& (0+255),b
 16097                           
 16098                           ;arp.c: 259: err.code = ERROR_ARP_CONNECTION_FAILED;
 16099  0019A8  0E01               	movlw	1
 16100  0019AA  6F50               	movwf	(arp_probe@err+2)& (0+255),b
 16101  0019AC  0E96               	movlw	150
 16102  0019AE  6F4F               	movwf	(arp_probe@err+1)& (0+255),b
 16103                           
 16104                           ; BSR set to: 1
 16105                           ;arp.c: 260: return err;
 16106  0019B0  C14E  F134         	movff	arp_probe@err,?_arp_probe
 16107  0019B4  C14F  F135         	movff	arp_probe@err+1,?_arp_probe+1
 16108  0019B8  C150  F136         	movff	arp_probe@err+2,?_arp_probe+2
 16109                           
 16110                           ; BSR set to: 1
 16111  0019BC  0012               	return	
 16112  0019BE                     l986:
 16113                           
 16114                           ; BSR set to: 1
 16115                           ;arp.c: 261: }
 16116                           ;arp.c: 263: if (arp_checkForEntry(ipTarget, &index)) {
 16117                           
 16118                           ; BSR set to: 1
 16119  0019BE  C134  F067         	movff	arp_probe@ipTarget,arp_checkForEntry@ip
 16120  0019C2  C135  F068         	movff	arp_probe@ipTarget+1,arp_checkForEntry@ip+1
 16121  0019C6  C136  F069         	movff	arp_probe@ipTarget+2,arp_checkForEntry@ip+2
 16122  0019CA  C137  F06A         	movff	arp_probe@ipTarget+3,arp_checkForEntry@ip+3
 16123  0019CE  0E41               	movlw	low arp_probe@index
 16124  0019D0  0100               	movlb	0	; () banked
 16125  0019D2  6F6B               	movwf	arp_checkForEntry@index& (0+255),b
 16126  0019D4  0E01               	movlw	high arp_probe@index
 16127  0019D6  6F6C               	movwf	(arp_checkForEntry@index+1)& (0+255),b
 16128  0019D8  EC97  F020         	call	_arp_checkForEntry	;wreg free
 16129  0019DC  0900               	iorlw	0
 16130  0019DE  B4D8               	btfsc	status,2,c
 16131  0019E0  D12A               	goto	l989
 16132                           
 16133                           ;arp.c: 264: state = ARP_ENTRY_FOUND;
 16134  0019E2  0E03               	movlw	3
 16135  0019E4  0101               	movlb	1	; () banked
 16136  0019E6  6FAB               	movwf	arp_probe@state& (0+255),b
 16137                           
 16138                           ; BSR set to: 1
 16139                           ;arp.c: 265: }
 16140                           ;arp.c: 267: switch (state) {
 16141  0019E8  D126               	goto	l989
 16142  0019EA                     
 16143                           ; BSR set to: 1
 16144                           ;arp.c: 269: ipv4_setToAllZero(&ipSender);
 16145                           
 16146                           ; BSR set to: 1
 16147  0019EA  0E4A               	movlw	low arp_probe@ipSender
 16148  0019EC  0100               	movlb	0	; () banked
 16149  0019EE  6F60               	movwf	ipv4_setToAllZero@ip& (0+255),b
 16150  0019F0  0E01               	movlw	high arp_probe@ipSender
 16151  0019F2  6F61               	movwf	(ipv4_setToAllZero@ip+1)& (0+255),b
 16152  0019F4  EC9B  F02A         	call	_ipv4_setToAllZero	;wreg free
 16153                           
 16154                           ;arp.c: 270: timeStart = getMillis();
 16155  0019F8  EC8E  F02B         	call	_getMillis	;wreg free
 16156  0019FC  C060  F142         	movff	?_getMillis,arp_probe@timeStart
 16157  001A00  C061  F143         	movff	?_getMillis+1,arp_probe@timeStart+1
 16158  001A04  C062  F144         	movff	?_getMillis+2,arp_probe@timeStart+2
 16159  001A08  C063  F145         	movff	?_getMillis+3,arp_probe@timeStart+3
 16160                           
 16161                           ;arp.c: 271: waitingTime = rand() % 1000u;
 16162  001A0C  ECDE  F026         	call	_rand	;wreg free
 16163  001A10  C06C  F06E         	movff	?_rand,___lwmod@dividend
 16164  001A14  C06D  F06F         	movff	?_rand+1,___lwmod@dividend+1
 16165  001A18  0E03               	movlw	3
 16166  001A1A  0100               	movlb	0	; () banked
 16167  001A1C  6F71               	movwf	(___lwmod@divisor+1)& (0+255),b
 16168  001A1E  0EE8               	movlw	232
 16169  001A20  6F70               	movwf	___lwmod@divisor& (0+255),b
 16170  001A22  EC6B  F028         	call	___lwmod	;wreg free
 16171  001A26  0100               	movlb	0	; () banked
 16172  001A28  C06E  F146         	movff	?___lwmod,arp_probe@waitingTime
 16173  001A2C  C06F  F147         	movff	?___lwmod+1,arp_probe@waitingTime+1
 16174  001A30  0101               	movlb	1	; () banked
 16175  001A32  6B48               	clrf	(arp_probe@waitingTime+2)& (0+255),b
 16176  001A34  6B49               	clrf	(arp_probe@waitingTime+3)& (0+255),b
 16177                           
 16178                           ; BSR set to: 1
 16179                           ;arp.c: 272: state = WAITING_TO_SEND;
 16180  001A36  0E01               	movlw	1
 16181  001A38  6FAB               	movwf	arp_probe@state& (0+255),b
 16182  001A3A  D054               	goto	l993
 16183  001A3C                     
 16184                           ; BSR set to: 1
 16185                           ;arp.c: 276: if (getMillis() - timeStart >= waitingTime) {
 16186                           
 16187                           ; BSR set to: 1
 16188  001A3C  C142  F139         	movff	arp_probe@timeStart,??_arp_probe
 16189  001A40  C143  F13A         	movff	arp_probe@timeStart+1,??_arp_probe+1
 16190  001A44  C144  F13B         	movff	arp_probe@timeStart+2,??_arp_probe+2
 16191  001A48  C145  F13C         	movff	arp_probe@timeStart+3,??_arp_probe+3
 16192  001A4C  1F39               	comf	??_arp_probe& (0+255),f,b
 16193  001A4E  1F3A               	comf	(??_arp_probe+1)& (0+255),f,b
 16194  001A50  1F3B               	comf	(??_arp_probe+2)& (0+255),f,b
 16195  001A52  1F3C               	comf	(??_arp_probe+3)& (0+255),f,b
 16196  001A54  2B39               	incf	??_arp_probe& (0+255),f,b
 16197  001A56  0E00               	movlw	0
 16198  001A58  233A               	addwfc	(??_arp_probe+1)& (0+255),f,b
 16199  001A5A  233B               	addwfc	(??_arp_probe+2)& (0+255),f,b
 16200  001A5C  233C               	addwfc	(??_arp_probe+3)& (0+255),f,b
 16201  001A5E  EC8E  F02B         	call	_getMillis	;wreg free
 16202  001A62  0101               	movlb	1	; () banked
 16203  001A64  5139               	movf	??_arp_probe& (0+255),w,b
 16204  001A66  0100               	movlb	0	; () banked
 16205  001A68  2560               	addwf	?_getMillis& (0+255),w,b
 16206  001A6A  0101               	movlb	1	; () banked
 16207  001A6C  6F3D               	movwf	(??_arp_probe+4)& (0+255),b
 16208  001A6E  513A               	movf	(??_arp_probe+1)& (0+255),w,b
 16209  001A70  0100               	movlb	0	; () banked
 16210  001A72  2161               	addwfc	(?_getMillis+1)& (0+255),w,b
 16211  001A74  0101               	movlb	1	; () banked
 16212  001A76  6F3E               	movwf	(??_arp_probe+5)& (0+255),b
 16213  001A78  513B               	movf	(??_arp_probe+2)& (0+255),w,b
 16214  001A7A  0100               	movlb	0	; () banked
 16215  001A7C  2162               	addwfc	(?_getMillis+2)& (0+255),w,b
 16216  001A7E  0101               	movlb	1	; () banked
 16217  001A80  6F3F               	movwf	(??_arp_probe+6)& (0+255),b
 16218  001A82  513C               	movf	(??_arp_probe+3)& (0+255),w,b
 16219  001A84  0100               	movlb	0	; () banked
 16220  001A86  2163               	addwfc	(?_getMillis+3)& (0+255),w,b
 16221  001A88  0101               	movlb	1	; () banked
 16222  001A8A  6F40               	movwf	(??_arp_probe+7)& (0+255),b
 16223  001A8C  5146               	movf	arp_probe@waitingTime& (0+255),w,b
 16224  001A8E  5D3D               	subwf	(??_arp_probe+4)& (0+255),w,b
 16225  001A90  5147               	movf	(arp_probe@waitingTime+1)& (0+255),w,b
 16226  001A92  593E               	subwfb	(??_arp_probe+5)& (0+255),w,b
 16227  001A94  5148               	movf	(arp_probe@waitingTime+2)& (0+255),w,b
 16228  001A96  593F               	subwfb	(??_arp_probe+6)& (0+255),w,b
 16229  001A98  5149               	movf	(arp_probe@waitingTime+3)& (0+255),w,b
 16230  001A9A  5940               	subwfb	(??_arp_probe+7)& (0+255),w,b
 16231  001A9C  A0D8               	btfss	status,0,c
 16232  001A9E  D022               	goto	l993
 16233                           
 16234                           ; BSR set to: 1
 16235                           ;arp.c: 277: state = SENDING_PROBE;
 16236  001AA0  0E02               	movlw	2
 16237  001AA2  6FAB               	movwf	arp_probe@state& (0+255),b
 16238                           
 16239                           ; BSR set to: 1
 16240                           ;arp.c: 279: waitingTime = (rand() % (2000u - 1000u)) + 1000u;
 16241  001AA4  0EE8               	movlw	232
 16242  001AA6  6F39               	movwf	??_arp_probe& (0+255),b
 16243  001AA8  0E03               	movlw	3
 16244  001AAA  6F3A               	movwf	(??_arp_probe+1)& (0+255),b
 16245  001AAC  ECDE  F026         	call	_rand	;wreg free
 16246  001AB0  C06C  F06E         	movff	?_rand,___lwmod@dividend
 16247  001AB4  C06D  F06F         	movff	?_rand+1,___lwmod@dividend+1
 16248  001AB8  0E03               	movlw	3
 16249  001ABA  0100               	movlb	0	; () banked
 16250  001ABC  6F71               	movwf	(___lwmod@divisor+1)& (0+255),b
 16251  001ABE  0EE8               	movlw	232
 16252  001AC0  6F70               	movwf	___lwmod@divisor& (0+255),b
 16253  001AC2  EC6B  F028         	call	___lwmod	;wreg free
 16254  001AC6  0101               	movlb	1	; () banked
 16255  001AC8  5139               	movf	??_arp_probe& (0+255),w,b
 16256  001ACA  0100               	movlb	0	; () banked
 16257  001ACC  276E               	addwf	?___lwmod& (0+255),f,b
 16258  001ACE  0101               	movlb	1	; () banked
 16259  001AD0  513A               	movf	(??_arp_probe+1)& (0+255),w,b
 16260  001AD2  0100               	movlb	0	; () banked
 16261  001AD4  236F               	addwfc	(?___lwmod+1)& (0+255),f,b
 16262  001AD6  C06E  F146         	movff	?___lwmod,arp_probe@waitingTime
 16263  001ADA  C06F  F147         	movff	?___lwmod+1,arp_probe@waitingTime+1
 16264  001ADE  0101               	movlb	1	; () banked
 16265  001AE0  6B48               	clrf	(arp_probe@waitingTime+2)& (0+255),b
 16266  001AE2  6B49               	clrf	(arp_probe@waitingTime+3)& (0+255),b
 16267  001AE4                     l993:
 16268                           
 16269                           ; BSR set to: 1
 16270                           ;arp.c: 280: }
 16271                           ;arp.c: 281: err.code = ERROR_ARP_WAITING;
 16272                           
 16273                           ; BSR set to: 1
 16274  001AE4  0E01               	movlw	1
 16275  001AE6  6F50               	movwf	(arp_probe@err+2)& (0+255),b
 16276  001AE8  0E91               	movlw	145
 16277  001AEA  D0A3               	goto	L8
 16278  001AEC                     
 16279                           ; BSR set to: 1
 16280                           ;arp.c: 284: if (probeCounter == 0 || (getMillis() - timeStart) > waitingTime) {
 16281                           
 16282                           ; BSR set to: 1
 16283  001AEC  51AC               	movf	arp_probe@probeCounter& (0+255),w,b
 16284  001AEE  B4D8               	btfsc	status,2,c
 16285  001AF0  D032               	goto	u11580
 16286                           
 16287                           ; BSR set to: 1
 16288  001AF2  C142  F139         	movff	arp_probe@timeStart,??_arp_probe
 16289  001AF6  C143  F13A         	movff	arp_probe@timeStart+1,??_arp_probe+1
 16290  001AFA  C144  F13B         	movff	arp_probe@timeStart+2,??_arp_probe+2
 16291  001AFE  C145  F13C         	movff	arp_probe@timeStart+3,??_arp_probe+3
 16292  001B02  1F39               	comf	??_arp_probe& (0+255),f,b
 16293  001B04  1F3A               	comf	(??_arp_probe+1)& (0+255),f,b
 16294  001B06  1F3B               	comf	(??_arp_probe+2)& (0+255),f,b
 16295  001B08  1F3C               	comf	(??_arp_probe+3)& (0+255),f,b
 16296  001B0A  2B39               	incf	??_arp_probe& (0+255),f,b
 16297  001B0C  0E00               	movlw	0
 16298  001B0E  233A               	addwfc	(??_arp_probe+1)& (0+255),f,b
 16299  001B10  233B               	addwfc	(??_arp_probe+2)& (0+255),f,b
 16300  001B12  233C               	addwfc	(??_arp_probe+3)& (0+255),f,b
 16301  001B14  EC8E  F02B         	call	_getMillis	;wreg free
 16302  001B18  0101               	movlb	1	; () banked
 16303  001B1A  5139               	movf	??_arp_probe& (0+255),w,b
 16304  001B1C  0100               	movlb	0	; () banked
 16305  001B1E  2560               	addwf	?_getMillis& (0+255),w,b
 16306  001B20  0101               	movlb	1	; () banked
 16307  001B22  6F3D               	movwf	(??_arp_probe+4)& (0+255),b
 16308  001B24  513A               	movf	(??_arp_probe+1)& (0+255),w,b
 16309  001B26  0100               	movlb	0	; () banked
 16310  001B28  2161               	addwfc	(?_getMillis+1)& (0+255),w,b
 16311  001B2A  0101               	movlb	1	; () banked
 16312  001B2C  6F3E               	movwf	(??_arp_probe+5)& (0+255),b
 16313  001B2E  513B               	movf	(??_arp_probe+2)& (0+255),w,b
 16314  001B30  0100               	movlb	0	; () banked
 16315  001B32  2162               	addwfc	(?_getMillis+2)& (0+255),w,b
 16316  001B34  0101               	movlb	1	; () banked
 16317  001B36  6F3F               	movwf	(??_arp_probe+6)& (0+255),b
 16318  001B38  513C               	movf	(??_arp_probe+3)& (0+255),w,b
 16319  001B3A  0100               	movlb	0	; () banked
 16320  001B3C  2163               	addwfc	(?_getMillis+3)& (0+255),w,b
 16321  001B3E  0101               	movlb	1	; () banked
 16322  001B40  6F40               	movwf	(??_arp_probe+7)& (0+255),b
 16323  001B42  513D               	movf	(??_arp_probe+4)& (0+255),w,b
 16324  001B44  5D46               	subwf	arp_probe@waitingTime& (0+255),w,b
 16325  001B46  513E               	movf	(??_arp_probe+5)& (0+255),w,b
 16326  001B48  5947               	subwfb	(arp_probe@waitingTime+1)& (0+255),w,b
 16327  001B4A  513F               	movf	(??_arp_probe+6)& (0+255),w,b
 16328  001B4C  5948               	subwfb	(arp_probe@waitingTime+2)& (0+255),w,b
 16329  001B4E  5140               	movf	(??_arp_probe+7)& (0+255),w,b
 16330  001B50  5949               	subwfb	(arp_probe@waitingTime+3)& (0+255),w,b
 16331  001B52  B0D8               	btfsc	status,0,c
 16332  001B54  D07E               	goto	l991
 16333  001B56                     u11580:
 16334                           
 16335                           ; BSR set to: 1
 16336                           ;arp.c: 285: timeStart = getMillis();
 16337                           
 16338                           ; BSR set to: 1
 16339  001B56  EC8E  F02B         	call	_getMillis	;wreg free
 16340  001B5A  C060  F142         	movff	?_getMillis,arp_probe@timeStart
 16341  001B5E  C061  F143         	movff	?_getMillis+1,arp_probe@timeStart+1
 16342  001B62  C062  F144         	movff	?_getMillis+2,arp_probe@timeStart+2
 16343  001B66  C063  F145         	movff	?_getMillis+3,arp_probe@timeStart+3
 16344                           
 16345                           ;arp.c: 287: if (probeCounter < 3u) {
 16346  001B6A  0E03               	movlw	3
 16347  001B6C  0101               	movlb	1	; () banked
 16348  001B6E  61AC               	cpfslt	arp_probe@probeCounter& (0+255),b
 16349  001B70  D047               	goto	l998
 16350                           
 16351                           ; BSR set to: 1
 16352                           ;arp.c: 289: UARTTransmitText("[ARP]: Sending Probe for ");
 16353  001B72  0ED8               	movlw	low STR_80
 16354  001B74  0100               	movlb	0	; () banked
 16355  001B76  6F98               	movwf	UARTTransmitText@str& (0+255),b
 16356  001B78  0E7D               	movlw	high STR_80
 16357  001B7A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 16358  001B7C  EC09  F027         	call	_UARTTransmitText	;wreg free
 16359                           
 16360                           ;arp.c: 290: UARTTransmitText(ipAdressToString(ipTarget));
 16361  001B80  C134  F073         	movff	arp_probe@ipTarget,ipAdressToString@ip
 16362  001B84  C135  F074         	movff	arp_probe@ipTarget+1,ipAdressToString@ip+1
 16363  001B88  C136  F075         	movff	arp_probe@ipTarget+2,ipAdressToString@ip+2
 16364  001B8C  C137  F076         	movff	arp_probe@ipTarget+3,ipAdressToString@ip+3
 16365  001B90  ECC9  F013         	call	_ipAdressToString	;wreg free
 16366  001B94  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
 16367  001B98  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
 16368  001B9C  EC09  F027         	call	_UARTTransmitText	;wreg free
 16369                           
 16370                           ;arp.c: 291: UARTTransmitText(" (reply to ");
 16371  001BA0  0E31               	movlw	low STR_81
 16372  001BA2  0100               	movlb	0	; () banked
 16373  001BA4  6F98               	movwf	UARTTransmitText@str& (0+255),b
 16374  001BA6  0E7F               	movlw	high STR_81
 16375  001BA8  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 16376  001BAA  EC09  F027         	call	_UARTTransmitText	;wreg free
 16377                           
 16378                           ;arp.c: 292: UARTTransmitText(ipAdressToString(ipSender));
 16379  001BAE  C14A  F073         	movff	arp_probe@ipSender,ipAdressToString@ip
 16380  001BB2  C14B  F074         	movff	arp_probe@ipSender+1,ipAdressToString@ip+1
 16381  001BB6  C14C  F075         	movff	arp_probe@ipSender+2,ipAdressToString@ip+2
 16382  001BBA  C14D  F076         	movff	arp_probe@ipSender+3,ipAdressToString@ip+3
 16383  001BBE  ECC9  F013         	call	_ipAdressToString	;wreg free
 16384  001BC2  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
 16385  001BC6  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
 16386  001BCA  EC09  F027         	call	_UARTTransmitText	;wreg free
 16387                           
 16388                           ;arp.c: 293: UARTTransmitText(")\n\r");
 16389  001BCE  0EE9               	movlw	low STR_43
 16390  001BD0  0100               	movlb	0	; () banked
 16391  001BD2  6F98               	movwf	UARTTransmitText@str& (0+255),b
 16392  001BD4  0E7F               	movlw	high STR_43
 16393  001BD6  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 16394  001BD8  EC09  F027         	call	_UARTTransmitText	;wreg free
 16395                           
 16396                           ;arp.c: 295: arp_sendRequest(ipSender, ipTarget);
 16397  001BDC  C14A  F100         	movff	arp_probe@ipSender,arp_sendRequest@ipSender
 16398  001BE0  C14B  F101         	movff	arp_probe@ipSender+1,arp_sendRequest@ipSender+1
 16399  001BE4  C14C  F102         	movff	arp_probe@ipSender+2,arp_sendRequest@ipSender+2
 16400  001BE8  C14D  F103         	movff	arp_probe@ipSender+3,arp_sendRequest@ipSender+3
 16401  001BEC  C134  F104         	movff	arp_probe@ipTarget,arp_sendRequest@ipTarget
 16402  001BF0  C135  F105         	movff	arp_probe@ipTarget+1,arp_sendRequest@ipTarget+1
 16403  001BF4  C136  F106         	movff	arp_probe@ipTarget+2,arp_sendRequest@ipTarget+2
 16404  001BF8  C137  F107         	movff	arp_probe@ipTarget+3,arp_sendRequest@ipTarget+3
 16405  001BFC  EC37  F022         	call	_arp_sendRequest	;wreg free
 16406  001C00                     l998:
 16407                           
 16408                           ;arp.c: 296: }
 16409                           ;arp.c: 297: if (probeCounter >= 3u) {
 16410  001C00  0E02               	movlw	2
 16411  001C02  0101               	movlb	1	; () banked
 16412  001C04  65AC               	cpfsgt	arp_probe@probeCounter& (0+255),b
 16413  001C06  D008               	goto	l999
 16414                           
 16415                           ; BSR set to: 1
 16416                           ;arp.c: 298: probeCounter = 0;
 16417  001C08  0E00               	movlw	0
 16418  001C0A  6FAC               	movwf	arp_probe@probeCounter& (0+255),b
 16419                           
 16420                           ;arp.c: 299: state = PREPARING_PROBE;
 16421  001C0C  0E00               	movlw	0
 16422  001C0E  6FAB               	movwf	arp_probe@state& (0+255),b
 16423                           
 16424                           ;arp.c: 300: err.code = ERROR_ARP_MAXIMUM_NUMBER_OF_PROBES_REACHED;
 16425  001C10  0E01               	movlw	1
 16426  001C12  6F50               	movwf	(arp_probe@err+2)& (0+255),b
 16427  001C14  0E93               	movlw	147
 16428  001C16  D00D               	goto	L8
 16429  001C18                     l999:
 16430                           
 16431                           ; BSR set to: 1
 16432                           ;arp.c: 302: err.code = ERROR_ARP_WAITING;
 16433                           
 16434                           ; BSR set to: 1
 16435  001C18  0E01               	movlw	1
 16436  001C1A  6F50               	movwf	(arp_probe@err+2)& (0+255),b
 16437  001C1C  0E91               	movlw	145
 16438  001C1E  6F4F               	movwf	(arp_probe@err+1)& (0+255),b
 16439                           
 16440                           ; BSR set to: 1
 16441                           ;arp.c: 303: probeCounter++;
 16442  001C20  2BAC               	incf	arp_probe@probeCounter& (0+255),f,b
 16443                           
 16444                           ; BSR set to: 1
 16445                           ;arp.c: 304: }
 16446                           ;arp.c: 305: }
 16447                           ;arp.c: 306: break;
 16448                           
 16449                           ; BSR set to: 1
 16450  001C22  D017               	goto	l991
 16451  001C24                     
 16452                           ; BSR set to: 1
 16453                           ;arp.c: 308: probeCounter = 0;
 16454                           
 16455                           ; BSR set to: 1
 16456  001C24  0E00               	movlw	0
 16457  001C26  6FAC               	movwf	arp_probe@probeCounter& (0+255),b
 16458                           
 16459                           ;arp.c: 309: state = PREPARING_PROBE;
 16460  001C28  0E00               	movlw	0
 16461  001C2A  6FAB               	movwf	arp_probe@state& (0+255),b
 16462                           
 16463                           ;arp.c: 310: err.code = ERROR_ARP_IPv4_ADDRESS_CONFLICT;
 16464  001C2C  0E01               	movlw	1
 16465  001C2E  6F50               	movwf	(arp_probe@err+2)& (0+255),b
 16466  001C30  0E95               	movlw	149
 16467  001C32                     L8:
 16468  001C32  6F4F               	movwf	(arp_probe@err+1)& (0+255),b
 16469                           
 16470                           ;arp.c: 311: }
 16471  001C34  D00E               	goto	l991
 16472  001C36                     l989:
 16473                           
 16474                           ; BSR set to: 1
 16475  001C36  0101               	movlb	1	; () banked
 16476  001C38  51AB               	movf	arp_probe@state& (0+255),w,b
 16477                           
 16478                           ; Switch size 1, requested type "space"
 16479                           ; Number of cases is 4, Range of values is 0 to 3
 16480                           ; switch strategies available:
 16481                           ; Name         Instructions Cycles
 16482                           ; simple_byte           13     7 (average)
 16483                           ;	Chosen strategy is simple_byte
 16484  001C3A  0A00               	xorlw	0	; case 0
 16485  001C3C  B4D8               	btfsc	status,2,c
 16486  001C3E  D6D5               	goto	l990
 16487  001C40  0A01               	xorlw	1	; case 1
 16488  001C42  B4D8               	btfsc	status,2,c
 16489  001C44  D6FB               	goto	l992
 16490  001C46  0A03               	xorlw	3	; case 2
 16491  001C48  B4D8               	btfsc	status,2,c
 16492  001C4A  D750               	goto	l994
 16493  001C4C  0A01               	xorlw	1	; case 3
 16494  001C4E  B4D8               	btfsc	status,2,c
 16495  001C50  D7E9               	goto	l1001
 16496  001C52                     l991:
 16497                           
 16498                           ; BSR set to: 1
 16499                           ;arp.c: 312: return err;
 16500  001C52  C14E  F134         	movff	arp_probe@err,?_arp_probe
 16501  001C56  C14F  F135         	movff	arp_probe@err+1,?_arp_probe+1
 16502  001C5A  C150  F136         	movff	arp_probe@err+2,?_arp_probe+2
 16503                           
 16504                           ; BSR set to: 1
 16505  001C5E  0012               	return		;funcret
 16506  001C60                     __end_of_arp_probe:
 16507                           	opt stack 0
 16508                           tblptru	equ	0xFF8
 16509                           tblptrh	equ	0xFF7
 16510                           tblptrl	equ	0xFF6
 16511                           tablat	equ	0xFF5
 16512                           prodh	equ	0xFF4
 16513                           prodl	equ	0xFF3
 16514                           intcon	equ	0xFF2
 16515                           intcon3	equ	0xFF0
 16516                           indf0	equ	0xFEF
 16517                           postinc0	equ	0xFEE
 16518                           plusw0	equ	0xFEB
 16519                           fsr0h	equ	0xFEA
 16520                           fsr0l	equ	0xFE9
 16521                           wreg	equ	0xFE8
 16522                           indf1	equ	0xFE7
 16523                           postinc1	equ	0xFE6
 16524                           postdec1	equ	0xFE5
 16525                           plusw1	equ	0xFE3
 16526                           fsr1h	equ	0xFE2
 16527                           fsr1l	equ	0xFE1
 16528                           indf2	equ	0xFDF
 16529                           postinc2	equ	0xFDE
 16530                           postdec2	equ	0xFDD
 16531                           plusw2	equ	0xFDB
 16532                           fsr2h	equ	0xFDA
 16533                           fsr2l	equ	0xFD9
 16534                           status	equ	0xFD8
 16535                           
 16536 ;; *************** function _rand *****************
 16537 ;; Defined at:
 16538 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\rand.c"
 16539 ;; Parameters:    Size  Location     Type
 16540 ;;		None
 16541 ;; Auto vars:     Size  Location     Type
 16542 ;;		None
 16543 ;; Return value:  Size  Location     Type
 16544 ;;                  2   12[BANK0 ] int 
 16545 ;; Registers used:
 16546 ;;		wreg, status,2, status,0, cstack
 16547 ;; Tracked objects:
 16548 ;;		On entry : 0/0
 16549 ;;		On exit  : 0/0
 16550 ;;		Unchanged: 0/0
 16551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16552 ;;      Params:         0       2       0       0       0       0       0       0       0
 16553 ;;      Locals:         0       0       0       0       0       0       0       0       0
 16554 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16555 ;;      Totals:         0       2       0       0       0       0       0       0       0
 16556 ;;Total ram usage:        2 bytes
 16557 ;; Hardware stack levels used:    1
 16558 ;; Hardware stack levels required when called:    5
 16559 ;; This function calls:
 16560 ;;		___lmul
 16561 ;; This function is called by:
 16562 ;;		_main
 16563 ;;		_arp_probe
 16564 ;; This function uses a non-reentrant model
 16565 ;;
 16566                           
 16567                           	psect	text61
 16568  004DBC                     __ptext61:
 16569                           	opt stack 0
 16570  004DBC                     _rand:
 16571                           	opt stack 25
 16572                           
 16573                           ; BSR set to: 1
 16574                           ;incstack = 0
 16575  004DBC  C049  F060         	movff	_randx,___lmul@multiplier
 16576  004DC0  C04A  F061         	movff	_randx+1,___lmul@multiplier+1
 16577  004DC4  C04B  F062         	movff	_randx+2,___lmul@multiplier+2
 16578  004DC8  C04C  F063         	movff	_randx+3,___lmul@multiplier+3
 16579  004DCC  0E6D               	movlw	109
 16580  004DCE  0100               	movlb	0	; () banked
 16581  004DD0  6F64               	movwf	___lmul@multiplicand& (0+255),b
 16582  004DD2  0E4E               	movlw	78
 16583  004DD4  6F65               	movwf	(___lmul@multiplicand+1)& (0+255),b
 16584  004DD6  0EC6               	movlw	198
 16585  004DD8  6F66               	movwf	(___lmul@multiplicand+2)& (0+255),b
 16586  004DDA  0E41               	movlw	65
 16587  004DDC  6F67               	movwf	(___lmul@multiplicand+3)& (0+255),b
 16588  004DDE  ECB2  F026         	call	___lmul	;wreg free
 16589  004DE2  C060  F049         	movff	?___lmul,_randx
 16590  004DE6  C061  F04A         	movff	?___lmul+1,_randx+1
 16591  004DEA  C062  F04B         	movff	?___lmul+2,_randx+2
 16592  004DEE  C063  F04C         	movff	?___lmul+3,_randx+3
 16593  004DF2  0E39               	movlw	57
 16594  004DF4  2649               	addwf	_randx,f,c
 16595  004DF6  0E30               	movlw	48
 16596  004DF8  224A               	addwfc	_randx+1,f,c
 16597  004DFA  0E00               	movlw	0
 16598  004DFC  224B               	addwfc	_randx+2,f,c
 16599  004DFE  0E00               	movlw	0
 16600  004E00  224C               	addwfc	_randx+3,f,c
 16601  004E02  0EFF               	movlw	255
 16602  004E04  144B               	andwf	_randx+2,w,c
 16603  004E06  0100               	movlb	0	; () banked
 16604  004E08  6F6C               	movwf	?_rand& (0+255),b
 16605  004E0A  0E7F               	movlw	127
 16606  004E0C  144C               	andwf	_randx+3,w,c
 16607  004E0E  6F6D               	movwf	(?_rand+1)& (0+255),b
 16608  004E10  0012               	return	
 16609  004E12                     __end_of_rand:
 16610                           	opt stack 0
 16611                           tblptru	equ	0xFF8
 16612                           tblptrh	equ	0xFF7
 16613                           tblptrl	equ	0xFF6
 16614                           tablat	equ	0xFF5
 16615                           prodh	equ	0xFF4
 16616                           prodl	equ	0xFF3
 16617                           intcon	equ	0xFF2
 16618                           intcon3	equ	0xFF0
 16619                           indf0	equ	0xFEF
 16620                           postinc0	equ	0xFEE
 16621                           plusw0	equ	0xFEB
 16622                           fsr0h	equ	0xFEA
 16623                           fsr0l	equ	0xFE9
 16624                           wreg	equ	0xFE8
 16625                           indf1	equ	0xFE7
 16626                           postinc1	equ	0xFE6
 16627                           postdec1	equ	0xFE5
 16628                           plusw1	equ	0xFE3
 16629                           fsr1h	equ	0xFE2
 16630                           fsr1l	equ	0xFE1
 16631                           indf2	equ	0xFDF
 16632                           postinc2	equ	0xFDE
 16633                           postdec2	equ	0xFDD
 16634                           plusw2	equ	0xFDB
 16635                           fsr2h	equ	0xFDA
 16636                           fsr2l	equ	0xFD9
 16637                           status	equ	0xFD8
 16638                           
 16639 ;; *************** function ___lmul *****************
 16640 ;; Defined at:
 16641 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 16642 ;; Parameters:    Size  Location     Type
 16643 ;;  multiplier      4    0[BANK0 ] unsigned long 
 16644 ;;  multiplicand    4    4[BANK0 ] unsigned long 
 16645 ;; Auto vars:     Size  Location     Type
 16646 ;;  product         4    8[BANK0 ] unsigned long 
 16647 ;; Return value:  Size  Location     Type
 16648 ;;                  4    0[BANK0 ] unsigned long 
 16649 ;; Registers used:
 16650 ;;		wreg, status,2, status,0
 16651 ;; Tracked objects:
 16652 ;;		On entry : 0/0
 16653 ;;		On exit  : 0/0
 16654 ;;		Unchanged: 0/0
 16655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16656 ;;      Params:         0       8       0       0       0       0       0       0       0
 16657 ;;      Locals:         0       4       0       0       0       0       0       0       0
 16658 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16659 ;;      Totals:         0      12       0       0       0       0       0       0       0
 16660 ;;Total ram usage:       12 bytes
 16661 ;; Hardware stack levels used:    1
 16662 ;; Hardware stack levels required when called:    4
 16663 ;; This function calls:
 16664 ;;		Nothing
 16665 ;; This function is called by:
 16666 ;;		_rand
 16667 ;; This function uses a non-reentrant model
 16668 ;;
 16669                           
 16670                           	psect	text62
 16671  004D64                     __ptext62:
 16672                           	opt stack 0
 16673  004D64                     ___lmul:
 16674                           	opt stack 25
 16675                           
 16676                           ; BSR set to: 0
 16677                           ;incstack = 0
 16678  004D64  0E00               	movlw	0
 16679  004D66  0100               	movlb	0	; () banked
 16680  004D68  6F68               	movwf	___lmul@product& (0+255),b
 16681  004D6A  0E00               	movlw	0
 16682  004D6C  6F69               	movwf	(___lmul@product+1)& (0+255),b
 16683  004D6E  0E00               	movlw	0
 16684  004D70  6F6A               	movwf	(___lmul@product+2)& (0+255),b
 16685  004D72  0E00               	movlw	0
 16686  004D74  6F6B               	movwf	(___lmul@product+3)& (0+255),b
 16687  004D76                     
 16688                           ; BSR set to: 0
 16689                           
 16690                           ; BSR set to: 0
 16691  004D76  A160               	btfss	___lmul@multiplier& (0+255),0,b
 16692  004D78  D008               	goto	l1226
 16693                           
 16694                           ; BSR set to: 0
 16695  004D7A  5164               	movf	___lmul@multiplicand& (0+255),w,b
 16696  004D7C  2768               	addwf	___lmul@product& (0+255),f,b
 16697  004D7E  5165               	movf	(___lmul@multiplicand+1)& (0+255),w,b
 16698  004D80  2369               	addwfc	(___lmul@product+1)& (0+255),f,b
 16699  004D82  5166               	movf	(___lmul@multiplicand+2)& (0+255),w,b
 16700  004D84  236A               	addwfc	(___lmul@product+2)& (0+255),f,b
 16701  004D86  5167               	movf	(___lmul@multiplicand+3)& (0+255),w,b
 16702  004D88  236B               	addwfc	(___lmul@product+3)& (0+255),f,b
 16703  004D8A                     l1226:
 16704                           
 16705                           ; BSR set to: 0
 16706                           
 16707                           ; BSR set to: 0
 16708  004D8A  90D8               	bcf	status,0,c
 16709  004D8C  3764               	rlcf	___lmul@multiplicand& (0+255),f,b
 16710  004D8E  3765               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
 16711  004D90  3766               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
 16712  004D92  3767               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
 16713                           
 16714                           ; BSR set to: 0
 16715  004D94  90D8               	bcf	status,0,c
 16716  004D96  3363               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
 16717  004D98  3362               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
 16718  004D9A  3361               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
 16719  004D9C  3360               	rrcf	___lmul@multiplier& (0+255),f,b
 16720  004D9E  5160               	movf	___lmul@multiplier& (0+255),w,b
 16721  004DA0  1161               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
 16722  004DA2  1162               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
 16723  004DA4  1163               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
 16724  004DA6  A4D8               	btfss	status,2,c
 16725  004DA8  D7E6               	goto	l1225
 16726                           
 16727                           ; BSR set to: 0
 16728  004DAA  C068  F060         	movff	___lmul@product,?___lmul
 16729  004DAE  C069  F061         	movff	___lmul@product+1,?___lmul+1
 16730  004DB2  C06A  F062         	movff	___lmul@product+2,?___lmul+2
 16731  004DB6  C06B  F063         	movff	___lmul@product+3,?___lmul+3
 16732                           
 16733                           ; BSR set to: 0
 16734  004DBA  0012               	return		;funcret
 16735  004DBC                     __end_of___lmul:
 16736                           	opt stack 0
 16737                           tblptru	equ	0xFF8
 16738                           tblptrh	equ	0xFF7
 16739                           tblptrl	equ	0xFF6
 16740                           tablat	equ	0xFF5
 16741                           prodh	equ	0xFF4
 16742                           prodl	equ	0xFF3
 16743                           intcon	equ	0xFF2
 16744                           intcon3	equ	0xFF0
 16745                           indf0	equ	0xFEF
 16746                           postinc0	equ	0xFEE
 16747                           plusw0	equ	0xFEB
 16748                           fsr0h	equ	0xFEA
 16749                           fsr0l	equ	0xFE9
 16750                           wreg	equ	0xFE8
 16751                           indf1	equ	0xFE7
 16752                           postinc1	equ	0xFE6
 16753                           postdec1	equ	0xFE5
 16754                           plusw1	equ	0xFE3
 16755                           fsr1h	equ	0xFE2
 16756                           fsr1l	equ	0xFE1
 16757                           indf2	equ	0xFDF
 16758                           postinc2	equ	0xFDE
 16759                           postdec2	equ	0xFDD
 16760                           plusw2	equ	0xFDB
 16761                           fsr2h	equ	0xFDA
 16762                           fsr2l	equ	0xFD9
 16763                           status	equ	0xFD8
 16764                           
 16765 ;; *************** function _ipv4_setToAllZero *****************
 16766 ;; Defined at:
 16767 ;;		line 304 in file "src/stack/protocols/ipv4.c"
 16768 ;; Parameters:    Size  Location     Type
 16769 ;;  ip              2    0[BANK0 ] PTR struct ipv4_address
 16770 ;;		 -> arp_init@ip(4), arp_probe@ipSender(4), 
 16771 ;; Auto vars:     Size  Location     Type
 16772 ;;  i               1    2[BANK0 ] unsigned char 
 16773 ;; Return value:  Size  Location     Type
 16774 ;;                  1    wreg      void 
 16775 ;; Registers used:
 16776 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 16777 ;; Tracked objects:
 16778 ;;		On entry : 0/0
 16779 ;;		On exit  : 0/0
 16780 ;;		Unchanged: 0/0
 16781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16782 ;;      Params:         0       2       0       0       0       0       0       0       0
 16783 ;;      Locals:         0       1       0       0       0       0       0       0       0
 16784 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16785 ;;      Totals:         0       3       0       0       0       0       0       0       0
 16786 ;;Total ram usage:        3 bytes
 16787 ;; Hardware stack levels used:    1
 16788 ;; Hardware stack levels required when called:    4
 16789 ;; This function calls:
 16790 ;;		Nothing
 16791 ;; This function is called by:
 16792 ;;		_arp_probe
 16793 ;;		_arp_init
 16794 ;; This function uses a non-reentrant model
 16795 ;;
 16796                           
 16797                           	psect	text63
 16798  005536                     __ptext63:
 16799                           	opt stack 0
 16800  005536                     _ipv4_setToAllZero:
 16801                           	opt stack 24
 16802                           
 16803                           ;ipv4.c: 305: for (uint8_t i = 0; i < 4; i++) {
 16804                           
 16805                           ; BSR set to: 0
 16806                           ;incstack = 0
 16807  005536  0E00               	movlw	0
 16808  005538  0100               	movlb	0	; () banked
 16809  00553A  6F62               	movwf	ipv4_setToAllZero@i& (0+255),b
 16810  00553C                     l9459:
 16811                           
 16812                           ; BSR set to: 0
 16813  00553C  0E03               	movlw	3
 16814  00553E  6562               	cpfsgt	ipv4_setToAllZero@i& (0+255),b
 16815  005540  D001               	goto	l1200
 16816  005542  0012               	return	
 16817  005544                     l1200:
 16818                           
 16819                           ; BSR set to: 0
 16820                           ;ipv4.c: 306: ip->address[i] = 0x00;
 16821                           
 16822                           ; BSR set to: 0
 16823  005544  5162               	movf	ipv4_setToAllZero@i& (0+255),w,b
 16824  005546  0D01               	mullw	1
 16825  005548  50F3               	movf	prodl,w,c
 16826  00554A  2560               	addwf	ipv4_setToAllZero@ip& (0+255),w,b
 16827  00554C  6ED9               	movwf	fsr2l,c
 16828  00554E  50F4               	movf	prodh,w,c
 16829  005550  2161               	addwfc	(ipv4_setToAllZero@ip+1)& (0+255),w,b
 16830  005552  6EDA               	movwf	fsr2h,c
 16831  005554  0E00               	movlw	0
 16832  005556  6EDF               	movwf	indf2,c
 16833                           
 16834                           ; BSR set to: 0
 16835  005558  2B62               	incf	ipv4_setToAllZero@i& (0+255),f,b
 16836  00555A  D7F0               	goto	l9459
 16837  00555C                     __end_of_ipv4_setToAllZero:
 16838                           	opt stack 0
 16839                           tblptru	equ	0xFF8
 16840                           tblptrh	equ	0xFF7
 16841                           tblptrl	equ	0xFF6
 16842                           tablat	equ	0xFF5
 16843                           prodh	equ	0xFF4
 16844                           prodl	equ	0xFF3
 16845                           intcon	equ	0xFF2
 16846                           intcon3	equ	0xFF0
 16847                           indf0	equ	0xFEF
 16848                           postinc0	equ	0xFEE
 16849                           plusw0	equ	0xFEB
 16850                           fsr0h	equ	0xFEA
 16851                           fsr0l	equ	0xFE9
 16852                           wreg	equ	0xFE8
 16853                           indf1	equ	0xFE7
 16854                           postinc1	equ	0xFE6
 16855                           postdec1	equ	0xFE5
 16856                           plusw1	equ	0xFE3
 16857                           fsr1h	equ	0xFE2
 16858                           fsr1l	equ	0xFE1
 16859                           indf2	equ	0xFDF
 16860                           postinc2	equ	0xFDE
 16861                           postdec2	equ	0xFDD
 16862                           plusw2	equ	0xFDB
 16863                           fsr2h	equ	0xFDA
 16864                           fsr2l	equ	0xFD9
 16865                           status	equ	0xFD8
 16866                           
 16867 ;; *************** function _arp_gratuitous *****************
 16868 ;; Defined at:
 16869 ;;		line 315 in file "src/stack/protocols/arp.c"
 16870 ;; Parameters:    Size  Location     Type
 16871 ;;  ip              4   52[BANK1 ] struct ipv4_address
 16872 ;;  link            1   56[BANK1 ] enum E232
 16873 ;; Auto vars:     Size  Location     Type
 16874 ;;  err             3  157[BANK0 ] struct error
 16875 ;;  index           1  156[BANK0 ] unsigned char 
 16876 ;; Return value:  Size  Location     Type
 16877 ;;                  3   52[BANK1 ] struct error
 16878 ;; Registers used:
 16879 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16880 ;; Tracked objects:
 16881 ;;		On entry : 0/0
 16882 ;;		On exit  : 0/0
 16883 ;;		Unchanged: 0/0
 16884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16885 ;;      Params:         0       0       5       0       0       0       0       0       0
 16886 ;;      Locals:         0       4       0       0       0       0       0       0       0
 16887 ;;      Temps:          0       0       8       0       0       0       0       0       0
 16888 ;;      Totals:         0       4      13       0       0       0       0       0       0
 16889 ;;Total ram usage:       17 bytes
 16890 ;; Hardware stack levels used:    1
 16891 ;; Hardware stack levels required when called:   11
 16892 ;; This function calls:
 16893 ;;		_UARTTransmitText
 16894 ;;		_arp_checkForEntry
 16895 ;;		_arp_sendRequest
 16896 ;;		_getMillis
 16897 ;;		_ipAdressToString
 16898 ;; This function is called by:
 16899 ;;		_arp_background
 16900 ;; This function uses a non-reentrant model
 16901 ;;
 16902                           
 16903                           	psect	text64
 16904  002122                     __ptext64:
 16905                           	opt stack 0
 16906  002122                     _arp_gratuitous:
 16907                           	opt stack 17
 16908                           
 16909                           ;arp.c: 316: uint8_t static announceCounter = 0;
 16910                           ;arp.c: 317: uint8_t static state = 0;
 16911                           ;arp.c: 318: time_t static timeStart = 0;
 16912                           ;arp.c: 319: uint8_t index;
 16913                           ;arp.c: 320: error_t err;
 16914                           ;arp.c: 322: enum states {
 16915                           ;arp.c: 323: INIT, WAIT_FOR_ANNOUNCE, ANNOUNCING, ENTRY_FOUND
 16916                           ;arp.c: 324: };
 16917                           ;arp.c: 325: err.module = ERROR_MODULE_ARP;
 16918                           
 16919                           ; BSR set to: 0
 16920                           ;incstack = 0
 16921  002122  0E03               	movlw	3
 16922  002124  0100               	movlb	0	; () banked
 16923  002126  6FFD               	movwf	arp_gratuitous@err& (0+255),b
 16924                           
 16925                           ;arp.c: 326: err.code = ERROR_ARP_WAITING;
 16926  002128  0E01               	movlw	1
 16927  00212A  6FFF               	movwf	(arp_gratuitous@err+2)& (0+255),b
 16928  00212C  0E91               	movlw	145
 16929  00212E  6FFE               	movwf	(arp_gratuitous@err+1)& (0+255),b
 16930                           
 16931                           ;arp.c: 328: if (link == NO_LINK) {
 16932  002130  0101               	movlb	1	; () banked
 16933  002132  5138               	movf	arp_gratuitous@link& (0+255),w,b
 16934  002134  A4D8               	btfss	status,2,c
 16935  002136  D010               	goto	l1010
 16936                           
 16937                           ; BSR set to: 1
 16938                           ;arp.c: 329: announceCounter = 0;
 16939  002138  0E00               	movlw	0
 16940  00213A  6FAA               	movwf	arp_gratuitous@announceCounter& (0+255),b
 16941                           
 16942                           ;arp.c: 330: state = INIT;
 16943  00213C  0E00               	movlw	0
 16944  00213E  6FA9               	movwf	arp_gratuitous@state& (0+255),b
 16945                           
 16946                           ;arp.c: 331: err.code = ERROR_ARP_CONNECTION_FAILED;
 16947  002140  0E01               	movlw	1
 16948  002142  0100               	movlb	0	; () banked
 16949  002144  6FFF               	movwf	(arp_gratuitous@err+2)& (0+255),b
 16950  002146  0E96               	movlw	150
 16951  002148  6FFE               	movwf	(arp_gratuitous@err+1)& (0+255),b
 16952                           
 16953                           ; BSR set to: 0
 16954                           ;arp.c: 332: return err;
 16955  00214A  C0FD  F134         	movff	arp_gratuitous@err,?_arp_gratuitous
 16956  00214E  C0FE  F135         	movff	arp_gratuitous@err+1,?_arp_gratuitous+1
 16957  002152  C0FF  F136         	movff	arp_gratuitous@err+2,?_arp_gratuitous+2
 16958                           
 16959                           ; BSR set to: 0
 16960  002156  0012               	return	
 16961  002158                     l1010:
 16962                           
 16963                           ;arp.c: 333: }
 16964                           ;arp.c: 335: if (arp_checkForEntry(ip, &index)) {
 16965                           
 16966                           ; BSR set to: 0
 16967  002158  C134  F067         	movff	arp_gratuitous@ip,arp_checkForEntry@ip
 16968  00215C  C135  F068         	movff	arp_gratuitous@ip+1,arp_checkForEntry@ip+1
 16969  002160  C136  F069         	movff	arp_gratuitous@ip+2,arp_checkForEntry@ip+2
 16970  002164  C137  F06A         	movff	arp_gratuitous@ip+3,arp_checkForEntry@ip+3
 16971  002168  0EFC               	movlw	low arp_gratuitous@index
 16972  00216A  0100               	movlb	0	; () banked
 16973  00216C  6F6B               	movwf	arp_checkForEntry@index& (0+255),b
 16974  00216E  0E00               	movlw	high arp_gratuitous@index
 16975  002170  6F6C               	movwf	(arp_checkForEntry@index+1)& (0+255),b
 16976  002172  EC97  F020         	call	_arp_checkForEntry	;wreg free
 16977  002176  0900               	iorlw	0
 16978  002178  B4D8               	btfsc	status,2,c
 16979  00217A  D0E0               	goto	l1013
 16980                           
 16981                           ;arp.c: 336: state = ENTRY_FOUND;
 16982  00217C  0E03               	movlw	3
 16983  00217E  0101               	movlb	1	; () banked
 16984  002180  6FA9               	movwf	arp_gratuitous@state& (0+255),b
 16985                           
 16986                           ; BSR set to: 1
 16987                           ;arp.c: 337: }
 16988                           ;arp.c: 339: switch (state) {
 16989  002182  D0DC               	goto	l1013
 16990  002184                     
 16991                           ; BSR set to: 1
 16992                           ;arp.c: 341: err.code = ERROR_ARP_WAITING;
 16993                           
 16994                           ; BSR set to: 1
 16995  002184  0E01               	movlw	1
 16996  002186  0100               	movlb	0	; () banked
 16997  002188  6FFF               	movwf	(arp_gratuitous@err+2)& (0+255),b
 16998  00218A  0E91               	movlw	145
 16999  00218C  6FFE               	movwf	(arp_gratuitous@err+1)& (0+255),b
 17000                           
 17001                           ; BSR set to: 0
 17002                           ;arp.c: 342: timeStart = getMillis();
 17003  00218E  EC8E  F02B         	call	_getMillis	;wreg free
 17004  002192  C060  F1A0         	movff	?_getMillis,arp_gratuitous@timeStart
 17005  002196  C061  F1A1         	movff	?_getMillis+1,arp_gratuitous@timeStart+1
 17006  00219A  C062  F1A2         	movff	?_getMillis+2,arp_gratuitous@timeStart+2
 17007  00219E  C063  F1A3         	movff	?_getMillis+3,arp_gratuitous@timeStart+3
 17008                           
 17009                           ;arp.c: 343: state = WAIT_FOR_ANNOUNCE;
 17010  0021A2  0E01               	movlw	1
 17011  0021A4  0101               	movlb	1	; () banked
 17012  0021A6  6FA9               	movwf	arp_gratuitous@state& (0+255),b
 17013                           
 17014                           ;arp.c: 344: break;
 17015  0021A8  D0D7               	goto	l1015
 17016  0021AA                     
 17017                           ; BSR set to: 1
 17018                           ;arp.c: 346: err.code = ERROR_ARP_WAITING;
 17019                           
 17020                           ; BSR set to: 1
 17021  0021AA  0E01               	movlw	1
 17022  0021AC  0100               	movlb	0	; () banked
 17023  0021AE  6FFF               	movwf	(arp_gratuitous@err+2)& (0+255),b
 17024  0021B0  0E91               	movlw	145
 17025  0021B2  6FFE               	movwf	(arp_gratuitous@err+1)& (0+255),b
 17026                           
 17027                           ; BSR set to: 0
 17028                           ;arp.c: 347: if ((getMillis() - timeStart) > 2000u) {
 17029  0021B4  C1A0  F139         	movff	arp_gratuitous@timeStart,??_arp_gratuitous
 17030  0021B8  C1A1  F13A         	movff	arp_gratuitous@timeStart+1,??_arp_gratuitous+1
 17031  0021BC  C1A2  F13B         	movff	arp_gratuitous@timeStart+2,??_arp_gratuitous+2
 17032  0021C0  C1A3  F13C         	movff	arp_gratuitous@timeStart+3,??_arp_gratuitous+3
 17033  0021C4  0101               	movlb	1	; () banked
 17034  0021C6  1F39               	comf	??_arp_gratuitous& (0+255),f,b
 17035  0021C8  1F3A               	comf	(??_arp_gratuitous+1)& (0+255),f,b
 17036  0021CA  1F3B               	comf	(??_arp_gratuitous+2)& (0+255),f,b
 17037  0021CC  1F3C               	comf	(??_arp_gratuitous+3)& (0+255),f,b
 17038  0021CE  2B39               	incf	??_arp_gratuitous& (0+255),f,b
 17039  0021D0  0E00               	movlw	0
 17040  0021D2  233A               	addwfc	(??_arp_gratuitous+1)& (0+255),f,b
 17041  0021D4  233B               	addwfc	(??_arp_gratuitous+2)& (0+255),f,b
 17042  0021D6  233C               	addwfc	(??_arp_gratuitous+3)& (0+255),f,b
 17043  0021D8  EC8E  F02B         	call	_getMillis	;wreg free
 17044  0021DC  0101               	movlb	1	; () banked
 17045  0021DE  5139               	movf	??_arp_gratuitous& (0+255),w,b
 17046  0021E0  0100               	movlb	0	; () banked
 17047  0021E2  2560               	addwf	?_getMillis& (0+255),w,b
 17048  0021E4  0101               	movlb	1	; () banked
 17049  0021E6  6F3D               	movwf	(??_arp_gratuitous+4)& (0+255),b
 17050  0021E8  513A               	movf	(??_arp_gratuitous+1)& (0+255),w,b
 17051  0021EA  0100               	movlb	0	; () banked
 17052  0021EC  2161               	addwfc	(?_getMillis+1)& (0+255),w,b
 17053  0021EE  0101               	movlb	1	; () banked
 17054  0021F0  6F3E               	movwf	(??_arp_gratuitous+5)& (0+255),b
 17055  0021F2  513B               	movf	(??_arp_gratuitous+2)& (0+255),w,b
 17056  0021F4  0100               	movlb	0	; () banked
 17057  0021F6  2162               	addwfc	(?_getMillis+2)& (0+255),w,b
 17058  0021F8  0101               	movlb	1	; () banked
 17059  0021FA  6F3F               	movwf	(??_arp_gratuitous+6)& (0+255),b
 17060  0021FC  513C               	movf	(??_arp_gratuitous+3)& (0+255),w,b
 17061  0021FE  0100               	movlb	0	; () banked
 17062  002200  2163               	addwfc	(?_getMillis+3)& (0+255),w,b
 17063  002202  0101               	movlb	1	; () banked
 17064  002204  6F40               	movwf	(??_arp_gratuitous+7)& (0+255),b
 17065  002206  5140               	movf	(??_arp_gratuitous+7)& (0+255),w,b
 17066  002208  113F               	iorwf	(??_arp_gratuitous+6)& (0+255),w,b
 17067  00220A  E106               	bnz	u11630
 17068  00220C  0ED1               	movlw	209
 17069  00220E  5D3D               	subwf	(??_arp_gratuitous+4)& (0+255),w,b
 17070  002210  0E07               	movlw	7
 17071  002212  593E               	subwfb	(??_arp_gratuitous+5)& (0+255),w,b
 17072  002214  A0D8               	btfss	status,0,c
 17073  002216  D0A0               	goto	l1015
 17074  002218                     u11630:
 17075                           
 17076                           ; BSR set to: 1
 17077                           ;arp.c: 348: state = ANNOUNCING;
 17078  002218  0E02               	movlw	2
 17079  00221A  6FA9               	movwf	arp_gratuitous@state& (0+255),b
 17080                           
 17081                           ;arp.c: 349: announceCounter = 0;
 17082  00221C  0E00               	movlw	0
 17083  00221E  6FAA               	movwf	arp_gratuitous@announceCounter& (0+255),b
 17084                           
 17085                           ; BSR set to: 1
 17086                           ;arp.c: 350: }
 17087                           ;arp.c: 351: break;
 17088  002220  D09B               	goto	l1015
 17089  002222                     
 17090                           ; BSR set to: 1
 17091                           ;arp.c: 353: err.code = ERROR_ARP_WAITING;
 17092                           
 17093                           ; BSR set to: 1
 17094  002222  0E01               	movlw	1
 17095  002224  0100               	movlb	0	; () banked
 17096  002226  6FFF               	movwf	(arp_gratuitous@err+2)& (0+255),b
 17097  002228  0E91               	movlw	145
 17098  00222A  6FFE               	movwf	(arp_gratuitous@err+1)& (0+255),b
 17099                           
 17100                           ;arp.c: 354: if ((announceCounter == 0) || (getMillis() - timeStart) > 2000u) {
 17101  00222C  0101               	movlb	1	; () banked
 17102  00222E  51AA               	movf	arp_gratuitous@announceCounter& (0+255),w,b
 17103  002230  B4D8               	btfsc	status,2,c
 17104  002232  D031               	goto	u11650
 17105                           
 17106                           ; BSR set to: 1
 17107  002234  C1A0  F139         	movff	arp_gratuitous@timeStart,??_arp_gratuitous
 17108  002238  C1A1  F13A         	movff	arp_gratuitous@timeStart+1,??_arp_gratuitous+1
 17109  00223C  C1A2  F13B         	movff	arp_gratuitous@timeStart+2,??_arp_gratuitous+2
 17110  002240  C1A3  F13C         	movff	arp_gratuitous@timeStart+3,??_arp_gratuitous+3
 17111  002244  1F39               	comf	??_arp_gratuitous& (0+255),f,b
 17112  002246  1F3A               	comf	(??_arp_gratuitous+1)& (0+255),f,b
 17113  002248  1F3B               	comf	(??_arp_gratuitous+2)& (0+255),f,b
 17114  00224A  1F3C               	comf	(??_arp_gratuitous+3)& (0+255),f,b
 17115  00224C  2B39               	incf	??_arp_gratuitous& (0+255),f,b
 17116  00224E  0E00               	movlw	0
 17117  002250  233A               	addwfc	(??_arp_gratuitous+1)& (0+255),f,b
 17118  002252  233B               	addwfc	(??_arp_gratuitous+2)& (0+255),f,b
 17119  002254  233C               	addwfc	(??_arp_gratuitous+3)& (0+255),f,b
 17120  002256  EC8E  F02B         	call	_getMillis	;wreg free
 17121  00225A  0101               	movlb	1	; () banked
 17122  00225C  5139               	movf	??_arp_gratuitous& (0+255),w,b
 17123  00225E  0100               	movlb	0	; () banked
 17124  002260  2560               	addwf	?_getMillis& (0+255),w,b
 17125  002262  0101               	movlb	1	; () banked
 17126  002264  6F3D               	movwf	(??_arp_gratuitous+4)& (0+255),b
 17127  002266  513A               	movf	(??_arp_gratuitous+1)& (0+255),w,b
 17128  002268  0100               	movlb	0	; () banked
 17129  00226A  2161               	addwfc	(?_getMillis+1)& (0+255),w,b
 17130  00226C  0101               	movlb	1	; () banked
 17131  00226E  6F3E               	movwf	(??_arp_gratuitous+5)& (0+255),b
 17132  002270  513B               	movf	(??_arp_gratuitous+2)& (0+255),w,b
 17133  002272  0100               	movlb	0	; () banked
 17134  002274  2162               	addwfc	(?_getMillis+2)& (0+255),w,b
 17135  002276  0101               	movlb	1	; () banked
 17136  002278  6F3F               	movwf	(??_arp_gratuitous+6)& (0+255),b
 17137  00227A  513C               	movf	(??_arp_gratuitous+3)& (0+255),w,b
 17138  00227C  0100               	movlb	0	; () banked
 17139  00227E  2163               	addwfc	(?_getMillis+3)& (0+255),w,b
 17140  002280  0101               	movlb	1	; () banked
 17141  002282  6F40               	movwf	(??_arp_gratuitous+7)& (0+255),b
 17142  002284  5140               	movf	(??_arp_gratuitous+7)& (0+255),w,b
 17143  002286  113F               	iorwf	(??_arp_gratuitous+6)& (0+255),w,b
 17144  002288  E106               	bnz	l9857
 17145  00228A  0ED1               	movlw	209
 17146  00228C  5D3D               	subwf	(??_arp_gratuitous+4)& (0+255),w,b
 17147  00228E  0E07               	movlw	7
 17148  002290  593E               	subwfb	(??_arp_gratuitous+5)& (0+255),w,b
 17149  002292  A0D8               	btfss	status,0,c
 17150  002294  D03C               	goto	l1019
 17151  002296                     u11650:
 17152  002296                     l9857:
 17153                           
 17154                           ; BSR set to: 1
 17155                           ;arp.c: 356: UARTTransmitText("[ARP]: Sending Gratuitous ARP request for ");
 17156  002296  0EE9               	movlw	low STR_83
 17157  002298  0100               	movlb	0	; () banked
 17158  00229A  6F98               	movwf	UARTTransmitText@str& (0+255),b
 17159  00229C  0E7A               	movlw	high STR_83
 17160  00229E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 17161  0022A0  EC09  F027         	call	_UARTTransmitText	;wreg free
 17162                           
 17163                           ;arp.c: 357: UARTTransmitText(ipAdressToString(ip));
 17164  0022A4  C134  F073         	movff	arp_gratuitous@ip,ipAdressToString@ip
 17165  0022A8  C135  F074         	movff	arp_gratuitous@ip+1,ipAdressToString@ip+1
 17166  0022AC  C136  F075         	movff	arp_gratuitous@ip+2,ipAdressToString@ip+2
 17167  0022B0  C137  F076         	movff	arp_gratuitous@ip+3,ipAdressToString@ip+3
 17168  0022B4  ECC9  F013         	call	_ipAdressToString	;wreg free
 17169  0022B8  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
 17170  0022BC  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
 17171  0022C0  EC09  F027         	call	_UARTTransmitText	;wreg free
 17172                           
 17173                           ;arp.c: 358: UARTTransmitText("\n\r");
 17174  0022C4  0ED4               	movlw	low (STR_23+35)
 17175  0022C6  0100               	movlb	0	; () banked
 17176  0022C8  6F98               	movwf	UARTTransmitText@str& (0+255),b
 17177  0022CA  0E7B               	movlw	high (STR_23+35)
 17178  0022CC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 17179  0022CE  EC09  F027         	call	_UARTTransmitText	;wreg free
 17180                           
 17181                           ;arp.c: 360: timeStart = getMillis();
 17182  0022D2  EC8E  F02B         	call	_getMillis	;wreg free
 17183  0022D6  C060  F1A0         	movff	?_getMillis,arp_gratuitous@timeStart
 17184  0022DA  C061  F1A1         	movff	?_getMillis+1,arp_gratuitous@timeStart+1
 17185  0022DE  C062  F1A2         	movff	?_getMillis+2,arp_gratuitous@timeStart+2
 17186  0022E2  C063  F1A3         	movff	?_getMillis+3,arp_gratuitous@timeStart+3
 17187                           
 17188                           ;arp.c: 361: arp_sendRequest(ip, ip);
 17189  0022E6  C134  F100         	movff	arp_gratuitous@ip,arp_sendRequest@ipSender
 17190  0022EA  C135  F101         	movff	arp_gratuitous@ip+1,arp_sendRequest@ipSender+1
 17191  0022EE  C136  F102         	movff	arp_gratuitous@ip+2,arp_sendRequest@ipSender+2
 17192  0022F2  C137  F103         	movff	arp_gratuitous@ip+3,arp_sendRequest@ipSender+3
 17193  0022F6  C134  F104         	movff	arp_gratuitous@ip,arp_sendRequest@ipTarget
 17194  0022FA  C135  F105         	movff	arp_gratuitous@ip+1,arp_sendRequest@ipTarget+1
 17195  0022FE  C136  F106         	movff	arp_gratuitous@ip+2,arp_sendRequest@ipTarget+2
 17196  002302  C137  F107         	movff	arp_gratuitous@ip+3,arp_sendRequest@ipTarget+3
 17197  002306  EC37  F022         	call	_arp_sendRequest	;wreg free
 17198                           
 17199                           ;arp.c: 362: announceCounter++;
 17200  00230A  0101               	movlb	1	; () banked
 17201  00230C  2BAA               	incf	arp_gratuitous@announceCounter& (0+255),f,b
 17202  00230E                     l1019:
 17203                           
 17204                           ; BSR set to: 1
 17205                           ;arp.c: 363: }
 17206                           ;arp.c: 364: if (announceCounter >= 2u) {
 17207                           
 17208                           ; BSR set to: 1
 17209  00230E  0E01               	movlw	1
 17210  002310  65AA               	cpfsgt	arp_gratuitous@announceCounter& (0+255),b
 17211  002312  D022               	goto	l1015
 17212                           
 17213                           ; BSR set to: 1
 17214                           ;arp.c: 366: announceCounter = 0;
 17215  002314  0E00               	movlw	0
 17216  002316  6FAA               	movwf	arp_gratuitous@announceCounter& (0+255),b
 17217                           
 17218                           ;arp.c: 367: state = INIT;
 17219  002318  0E00               	movlw	0
 17220  00231A  6FA9               	movwf	arp_gratuitous@state& (0+255),b
 17221                           
 17222                           ;arp.c: 368: err.code = (uint16_t)0;
 17223  00231C  0E00               	movlw	0
 17224  00231E  0100               	movlb	0	; () banked
 17225  002320  6FFF               	movwf	(arp_gratuitous@err+2)& (0+255),b
 17226  002322  0E00               	movlw	0
 17227  002324  D009               	goto	L9
 17228  002326                     
 17229                           ;arp.c: 372: announceCounter = 0;
 17230                           
 17231                           ; BSR set to: 0
 17232  002326  0E00               	movlw	0
 17233  002328  0101               	movlb	1	; () banked
 17234  00232A  6FAA               	movwf	arp_gratuitous@announceCounter& (0+255),b
 17235                           
 17236                           ;arp.c: 373: state = INIT;
 17237  00232C  0E00               	movlw	0
 17238  00232E  6FA9               	movwf	arp_gratuitous@state& (0+255),b
 17239                           
 17240                           ;arp.c: 374: err.code = ERROR_ARP_IPv4_ADDRESS_CONFLICT;
 17241  002330  0E01               	movlw	1
 17242  002332  0100               	movlb	0	; () banked
 17243  002334  6FFF               	movwf	(arp_gratuitous@err+2)& (0+255),b
 17244  002336  0E95               	movlw	149
 17245  002338                     L9:
 17246  002338  6FFE               	movwf	(arp_gratuitous@err+1)& (0+255),b
 17247                           
 17248                           ; BSR set to: 0
 17249                           ;arp.c: 377: }
 17250                           
 17251                           ;arp.c: 375: break;
 17252  00233A  D00E               	goto	l1015
 17253  00233C                     l1013:
 17254                           
 17255                           ; BSR set to: 0
 17256  00233C  0101               	movlb	1	; () banked
 17257  00233E  51A9               	movf	arp_gratuitous@state& (0+255),w,b
 17258                           
 17259                           ; Switch size 1, requested type "space"
 17260                           ; Number of cases is 4, Range of values is 0 to 3
 17261                           ; switch strategies available:
 17262                           ; Name         Instructions Cycles
 17263                           ; simple_byte           13     7 (average)
 17264                           ;	Chosen strategy is simple_byte
 17265  002340  0A00               	xorlw	0	; case 0
 17266  002342  B4D8               	btfsc	status,2,c
 17267  002344  D71F               	goto	l1014
 17268  002346  0A01               	xorlw	1	; case 1
 17269  002348  B4D8               	btfsc	status,2,c
 17270  00234A  D72F               	goto	l1016
 17271  00234C  0A03               	xorlw	3	; case 2
 17272  00234E  B4D8               	btfsc	status,2,c
 17273  002350  D768               	goto	l1018
 17274  002352  0A01               	xorlw	1	; case 3
 17275  002354  B4D8               	btfsc	status,2,c
 17276  002356  D7E7               	goto	l1023
 17277  002358                     l1015:
 17278                           
 17279                           ;arp.c: 378: return err;
 17280  002358  C0FD  F134         	movff	arp_gratuitous@err,?_arp_gratuitous
 17281  00235C  C0FE  F135         	movff	arp_gratuitous@err+1,?_arp_gratuitous+1
 17282  002360  C0FF  F136         	movff	arp_gratuitous@err+2,?_arp_gratuitous+2
 17283  002364  0012               	return		;funcret
 17284  002366                     __end_of_arp_gratuitous:
 17285                           	opt stack 0
 17286                           tblptru	equ	0xFF8
 17287                           tblptrh	equ	0xFF7
 17288                           tblptrl	equ	0xFF6
 17289                           tablat	equ	0xFF5
 17290                           prodh	equ	0xFF4
 17291                           prodl	equ	0xFF3
 17292                           intcon	equ	0xFF2
 17293                           intcon3	equ	0xFF0
 17294                           indf0	equ	0xFEF
 17295                           postinc0	equ	0xFEE
 17296                           plusw0	equ	0xFEB
 17297                           fsr0h	equ	0xFEA
 17298                           fsr0l	equ	0xFE9
 17299                           wreg	equ	0xFE8
 17300                           indf1	equ	0xFE7
 17301                           postinc1	equ	0xFE6
 17302                           postdec1	equ	0xFE5
 17303                           plusw1	equ	0xFE3
 17304                           fsr1h	equ	0xFE2
 17305                           fsr1l	equ	0xFE1
 17306                           indf2	equ	0xFDF
 17307                           postinc2	equ	0xFDE
 17308                           postdec2	equ	0xFDD
 17309                           plusw2	equ	0xFDB
 17310                           fsr2h	equ	0xFDA
 17311                           fsr2l	equ	0xFD9
 17312                           status	equ	0xFD8
 17313                           
 17314 ;; *************** function _ipAdressToString *****************
 17315 ;; Defined at:
 17316 ;;		line 162 in file "src/system/uart.c"
 17317 ;; Parameters:    Size  Location     Type
 17318 ;;  ip              4   19[BANK0 ] struct ipv4_address
 17319 ;; Auto vars:     Size  Location     Type
 17320 ;;  i               1   40[BANK0 ] unsigned char 
 17321 ;;  hundreds        4   35[BANK0 ] unsigned char [4]
 17322 ;;  tens            4   31[BANK0 ] unsigned char [4]
 17323 ;;  ones            4   27[BANK0 ] unsigned char [4]
 17324 ;;  pointer         1   39[BANK0 ] unsigned char 
 17325 ;; Return value:  Size  Location     Type
 17326 ;;                  2   19[BANK0 ] PTR unsigned char 
 17327 ;; Registers used:
 17328 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17329 ;; Tracked objects:
 17330 ;;		On entry : 0/0
 17331 ;;		On exit  : 0/0
 17332 ;;		Unchanged: 0/0
 17333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17334 ;;      Params:         0       4       0       0       0       0       0       0       0
 17335 ;;      Locals:         0      14       0       0       0       0       0       0       0
 17336 ;;      Temps:          0       4       0       0       0       0       0       0       0
 17337 ;;      Totals:         0      22       0       0       0       0       0       0       0
 17338 ;;Total ram usage:       22 bytes
 17339 ;; Hardware stack levels used:    1
 17340 ;; Hardware stack levels required when called:    5
 17341 ;; This function calls:
 17342 ;;		___lwdiv
 17343 ;;		___lwmod
 17344 ;; This function is called by:
 17345 ;;		_handleStackBackgroundTasks
 17346 ;;		_main
 17347 ;;		_arp_handleNewPacket
 17348 ;;		_arp_sendReply
 17349 ;;		_arp_probe
 17350 ;;		_arp_gratuitous
 17351 ;;		_arp_setNewEntry
 17352 ;;		_ipv4_sendFrame
 17353 ;;		_ipv4_handleNewPacket
 17354 ;;		_arpEntryToString
 17355 ;; This function uses a non-reentrant model
 17356 ;;
 17357                           
 17358                           	psect	text65
 17359  002792                     __ptext65:
 17360                           	opt stack 0
 17361  002792                     _ipAdressToString:
 17362                           	opt stack 22
 17363                           
 17364                           ;uart.c: 163: char static address [] = "???.???.???.???";
 17365                           ;uart.c: 164: uint8_t hundreds[4];
 17366                           ;uart.c: 165: uint8_t tens[4];
 17367                           ;uart.c: 166: uint8_t ones[4];
 17368                           ;uart.c: 167: uint8_t pointer = 0;
 17369                           
 17370                           ;incstack = 0
 17371  002792  0E00               	movlw	0
 17372  002794  0100               	movlb	0	; () banked
 17373  002796  6F87               	movwf	ipAdressToString@pointer& (0+255),b
 17374                           
 17375                           ;uart.c: 169: for (uint8_t i = 0; i < 4; i++) {
 17376  002798  0E00               	movlw	0
 17377  00279A  6F88               	movwf	ipAdressToString@i& (0+255),b
 17378  00279C                     l8961:
 17379                           
 17380                           ; BSR set to: 0
 17381  00279C  0E03               	movlw	3
 17382  00279E  6588               	cpfsgt	ipAdressToString@i& (0+255),b
 17383  0027A0  D001               	goto	l844
 17384  0027A2  D0DF               	goto	u10080
 17385  0027A4                     l844:
 17386                           
 17387                           ; BSR set to: 0
 17388                           ;uart.c: 171: hundreds[i] = ip.address[i] / 100u;
 17389                           
 17390                           ; BSR set to: 0
 17391  0027A4  5188               	movf	ipAdressToString@i& (0+255),w,b
 17392  0027A6  0D01               	mullw	1
 17393  0027A8  0E83               	movlw	low ipAdressToString@hundreds
 17394  0027AA  24F3               	addwf	prodl,w,c
 17395  0027AC  6ED9               	movwf	fsr2l,c
 17396  0027AE  0E00               	movlw	high ipAdressToString@hundreds
 17397  0027B0  20F4               	addwfc	prodh,w,c
 17398  0027B2  6EDA               	movwf	fsr2h,c
 17399  0027B4  5188               	movf	ipAdressToString@i& (0+255),w,b
 17400  0027B6  0D01               	mullw	1
 17401  0027B8  0E73               	movlw	low ipAdressToString@ip
 17402  0027BA  24F3               	addwf	prodl,w,c
 17403  0027BC  6EE1               	movwf	fsr1l,c
 17404  0027BE  0E00               	movlw	high ipAdressToString@ip
 17405  0027C0  20F4               	addwfc	prodh,w,c
 17406  0027C2  6EE2               	movwf	fsr1h,c
 17407  0027C4  50E7               	movf	indf1,w,c
 17408  0027C6  6F77               	movwf	??_ipAdressToString& (0+255),b
 17409  0027C8  5177               	movf	??_ipAdressToString& (0+255),w,b
 17410  0027CA  6F60               	movwf	___lwdiv@dividend& (0+255),b
 17411  0027CC  6B61               	clrf	(___lwdiv@dividend+1)& (0+255),b
 17412  0027CE  0E00               	movlw	0
 17413  0027D0  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
 17414  0027D2  0E64               	movlw	100
 17415  0027D4  6F62               	movwf	___lwdiv@divisor& (0+255),b
 17416  0027D6  EC5E  F027         	call	___lwdiv	;wreg free
 17417  0027DA  0100               	movlb	0	; () banked
 17418  0027DC  5160               	movf	?___lwdiv& (0+255),w,b
 17419  0027DE  6EDF               	movwf	indf2,c
 17420                           
 17421                           ;uart.c: 172: tens[i] = (ip.address[i] - hundreds[i]*100u) / 10u;
 17422  0027E0  5188               	movf	ipAdressToString@i& (0+255),w,b
 17423  0027E2  0D01               	mullw	1
 17424  0027E4  0E7F               	movlw	low ipAdressToString@tens
 17425  0027E6  24F3               	addwf	prodl,w,c
 17426  0027E8  6ED9               	movwf	fsr2l,c
 17427  0027EA  0E00               	movlw	high ipAdressToString@tens
 17428  0027EC  20F4               	addwfc	prodh,w,c
 17429  0027EE  6EDA               	movwf	fsr2h,c
 17430  0027F0  5188               	movf	ipAdressToString@i& (0+255),w,b
 17431  0027F2  0D01               	mullw	1
 17432  0027F4  0E83               	movlw	low ipAdressToString@hundreds
 17433  0027F6  24F3               	addwf	prodl,w,c
 17434  0027F8  6EE1               	movwf	fsr1l,c
 17435  0027FA  0E00               	movlw	high ipAdressToString@hundreds
 17436  0027FC  20F4               	addwfc	prodh,w,c
 17437  0027FE  6EE2               	movwf	fsr1h,c
 17438  002800  50E7               	movf	indf1,w,c
 17439  002802  6F77               	movwf	??_ipAdressToString& (0+255),b
 17440  002804  5177               	movf	??_ipAdressToString& (0+255),w,b
 17441  002806  0D64               	mullw	100
 17442  002808  CFF3 F078          	movff	prodl,??_ipAdressToString+1
 17443  00280C  CFF4 F079          	movff	prodh,??_ipAdressToString+2
 17444  002810  1F78               	comf	(??_ipAdressToString+1)& (0+255),f,b
 17445  002812  1F79               	comf	(??_ipAdressToString+2)& (0+255),f,b
 17446  002814  4B78               	infsnz	(??_ipAdressToString+1)& (0+255),f,b
 17447  002816  2B79               	incf	(??_ipAdressToString+2)& (0+255),f,b
 17448  002818  5188               	movf	ipAdressToString@i& (0+255),w,b
 17449  00281A  0D01               	mullw	1
 17450  00281C  0E73               	movlw	low ipAdressToString@ip
 17451  00281E  24F3               	addwf	prodl,w,c
 17452  002820  6EE1               	movwf	fsr1l,c
 17453  002822  0E00               	movlw	high ipAdressToString@ip
 17454  002824  20F4               	addwfc	prodh,w,c
 17455  002826  6EE2               	movwf	fsr1h,c
 17456  002828  50E7               	movf	indf1,w,c
 17457  00282A  6F7A               	movwf	(??_ipAdressToString+3)& (0+255),b
 17458  00282C  517A               	movf	(??_ipAdressToString+3)& (0+255),w,b
 17459  00282E  2578               	addwf	(??_ipAdressToString+1)& (0+255),w,b
 17460  002830  6F60               	movwf	___lwdiv@dividend& (0+255),b
 17461  002832  0E00               	movlw	0
 17462  002834  2179               	addwfc	(??_ipAdressToString+2)& (0+255),w,b
 17463  002836  6F61               	movwf	(___lwdiv@dividend+1)& (0+255),b
 17464  002838  0E00               	movlw	0
 17465  00283A  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
 17466  00283C  0E0A               	movlw	10
 17467  00283E  6F62               	movwf	___lwdiv@divisor& (0+255),b
 17468  002840  EC5E  F027         	call	___lwdiv	;wreg free
 17469  002844  0100               	movlb	0	; () banked
 17470  002846  5160               	movf	?___lwdiv& (0+255),w,b
 17471  002848  6EDF               	movwf	indf2,c
 17472                           
 17473                           ;uart.c: 173: ones[i] = ip.address[i] % 10u;
 17474  00284A  5188               	movf	ipAdressToString@i& (0+255),w,b
 17475  00284C  0D01               	mullw	1
 17476  00284E  0E7B               	movlw	low ipAdressToString@ones
 17477  002850  24F3               	addwf	prodl,w,c
 17478  002852  6ED9               	movwf	fsr2l,c
 17479  002854  0E00               	movlw	high ipAdressToString@ones
 17480  002856  20F4               	addwfc	prodh,w,c
 17481  002858  6EDA               	movwf	fsr2h,c
 17482  00285A  5188               	movf	ipAdressToString@i& (0+255),w,b
 17483  00285C  0D01               	mullw	1
 17484  00285E  0E73               	movlw	low ipAdressToString@ip
 17485  002860  24F3               	addwf	prodl,w,c
 17486  002862  6EE1               	movwf	fsr1l,c
 17487  002864  0E00               	movlw	high ipAdressToString@ip
 17488  002866  20F4               	addwfc	prodh,w,c
 17489  002868  6EE2               	movwf	fsr1h,c
 17490  00286A  50E7               	movf	indf1,w,c
 17491  00286C  6F77               	movwf	??_ipAdressToString& (0+255),b
 17492  00286E  5177               	movf	??_ipAdressToString& (0+255),w,b
 17493  002870  6F6E               	movwf	___lwmod@dividend& (0+255),b
 17494  002872  6B6F               	clrf	(___lwmod@dividend+1)& (0+255),b
 17495  002874  0E00               	movlw	0
 17496  002876  6F71               	movwf	(___lwmod@divisor+1)& (0+255),b
 17497  002878  0E0A               	movlw	10
 17498  00287A  6F70               	movwf	___lwmod@divisor& (0+255),b
 17499  00287C  EC6B  F028         	call	___lwmod	;wreg free
 17500  002880  0100               	movlb	0	; () banked
 17501  002882  516E               	movf	?___lwmod& (0+255),w,b
 17502  002884  6EDF               	movwf	indf2,c
 17503                           
 17504                           ; BSR set to: 0
 17505                           ;uart.c: 175: if (hundreds[i] > 0)
 17506  002886  5188               	movf	ipAdressToString@i& (0+255),w,b
 17507  002888  0D01               	mullw	1
 17508  00288A  0E83               	movlw	low ipAdressToString@hundreds
 17509  00288C  24F3               	addwf	prodl,w,c
 17510  00288E  6ED9               	movwf	fsr2l,c
 17511  002890  0E00               	movlw	high ipAdressToString@hundreds
 17512  002892  20F4               	addwfc	prodh,w,c
 17513  002894  6EDA               	movwf	fsr2h,c
 17514  002896  50DF               	movf	indf2,w,c
 17515  002898  B4D8               	btfsc	status,2,c
 17516  00289A  D014               	goto	l846
 17517                           
 17518                           ; BSR set to: 0
 17519                           ;uart.c: 176: address[pointer++] = hundreds[i] + 0x30;
 17520  00289C  5187               	movf	ipAdressToString@pointer& (0+255),w,b
 17521  00289E  0D01               	mullw	1
 17522  0028A0  0EF0               	movlw	low ipAdressToString@address
 17523  0028A2  24F3               	addwf	prodl,w,c
 17524  0028A4  6ED9               	movwf	fsr2l,c
 17525  0028A6  0E02               	movlw	high ipAdressToString@address
 17526  0028A8  20F4               	addwfc	prodh,w,c
 17527  0028AA  6EDA               	movwf	fsr2h,c
 17528  0028AC  5188               	movf	ipAdressToString@i& (0+255),w,b
 17529  0028AE  0D01               	mullw	1
 17530  0028B0  0E83               	movlw	low ipAdressToString@hundreds
 17531  0028B2  24F3               	addwf	prodl,w,c
 17532  0028B4  6EE1               	movwf	fsr1l,c
 17533  0028B6  0E00               	movlw	high ipAdressToString@hundreds
 17534  0028B8  20F4               	addwfc	prodh,w,c
 17535  0028BA  6EE2               	movwf	fsr1h,c
 17536  0028BC  50E7               	movf	indf1,w,c
 17537  0028BE  0F30               	addlw	48
 17538  0028C0  6EDF               	movwf	indf2,c
 17539                           
 17540                           ; BSR set to: 0
 17541  0028C2  2B87               	incf	ipAdressToString@pointer& (0+255),f,b
 17542  0028C4                     l846:
 17543                           
 17544                           ; BSR set to: 0
 17545                           ;uart.c: 177: if ((tens[i] > 0) || hundreds[i] > 0)
 17546                           
 17547                           ; BSR set to: 0
 17548  0028C4  5188               	movf	ipAdressToString@i& (0+255),w,b
 17549  0028C6  0D01               	mullw	1
 17550  0028C8  0E7F               	movlw	low ipAdressToString@tens
 17551  0028CA  24F3               	addwf	prodl,w,c
 17552  0028CC  6ED9               	movwf	fsr2l,c
 17553  0028CE  0E00               	movlw	high ipAdressToString@tens
 17554  0028D0  20F4               	addwfc	prodh,w,c
 17555  0028D2  6EDA               	movwf	fsr2h,c
 17556  0028D4  50DF               	movf	indf2,w,c
 17557  0028D6  A4D8               	btfss	status,2,c
 17558  0028D8  D00B               	goto	u10060
 17559                           
 17560                           ; BSR set to: 0
 17561  0028DA  5188               	movf	ipAdressToString@i& (0+255),w,b
 17562  0028DC  0D01               	mullw	1
 17563  0028DE  0E83               	movlw	low ipAdressToString@hundreds
 17564  0028E0  24F3               	addwf	prodl,w,c
 17565  0028E2  6ED9               	movwf	fsr2l,c
 17566  0028E4  0E00               	movlw	high ipAdressToString@hundreds
 17567  0028E6  20F4               	addwfc	prodh,w,c
 17568  0028E8  6EDA               	movwf	fsr2h,c
 17569  0028EA  50DF               	movf	indf2,w,c
 17570  0028EC  B4D8               	btfsc	status,2,c
 17571  0028EE  D014               	goto	l847
 17572  0028F0                     u10060:
 17573                           
 17574                           ; BSR set to: 0
 17575                           ;uart.c: 178: address[pointer++] = tens[i] + 0x30;
 17576                           
 17577                           ; BSR set to: 0
 17578  0028F0  5187               	movf	ipAdressToString@pointer& (0+255),w,b
 17579  0028F2  0D01               	mullw	1
 17580  0028F4  0EF0               	movlw	low ipAdressToString@address
 17581  0028F6  24F3               	addwf	prodl,w,c
 17582  0028F8  6ED9               	movwf	fsr2l,c
 17583  0028FA  0E02               	movlw	high ipAdressToString@address
 17584  0028FC  20F4               	addwfc	prodh,w,c
 17585  0028FE  6EDA               	movwf	fsr2h,c
 17586  002900  5188               	movf	ipAdressToString@i& (0+255),w,b
 17587  002902  0D01               	mullw	1
 17588  002904  0E7F               	movlw	low ipAdressToString@tens
 17589  002906  24F3               	addwf	prodl,w,c
 17590  002908  6EE1               	movwf	fsr1l,c
 17591  00290A  0E00               	movlw	high ipAdressToString@tens
 17592  00290C  20F4               	addwfc	prodh,w,c
 17593  00290E  6EE2               	movwf	fsr1h,c
 17594  002910  50E7               	movf	indf1,w,c
 17595  002912  0F30               	addlw	48
 17596  002914  6EDF               	movwf	indf2,c
 17597                           
 17598                           ; BSR set to: 0
 17599  002916  2B87               	incf	ipAdressToString@pointer& (0+255),f,b
 17600  002918                     l847:
 17601                           
 17602                           ; BSR set to: 0
 17603                           ;uart.c: 179: address[pointer++] = ones[i] + 0x30;
 17604                           
 17605                           ; BSR set to: 0
 17606  002918  5187               	movf	ipAdressToString@pointer& (0+255),w,b
 17607  00291A  0D01               	mullw	1
 17608  00291C  0EF0               	movlw	low ipAdressToString@address
 17609  00291E  24F3               	addwf	prodl,w,c
 17610  002920  6ED9               	movwf	fsr2l,c
 17611  002922  0E02               	movlw	high ipAdressToString@address
 17612  002924  20F4               	addwfc	prodh,w,c
 17613  002926  6EDA               	movwf	fsr2h,c
 17614  002928  5188               	movf	ipAdressToString@i& (0+255),w,b
 17615  00292A  0D01               	mullw	1
 17616  00292C  0E7B               	movlw	low ipAdressToString@ones
 17617  00292E  24F3               	addwf	prodl,w,c
 17618  002930  6EE1               	movwf	fsr1l,c
 17619  002932  0E00               	movlw	high ipAdressToString@ones
 17620  002934  20F4               	addwfc	prodh,w,c
 17621  002936  6EE2               	movwf	fsr1h,c
 17622  002938  50E7               	movf	indf1,w,c
 17623  00293A  0F30               	addlw	48
 17624  00293C  6EDF               	movwf	indf2,c
 17625  00293E  2B87               	incf	ipAdressToString@pointer& (0+255),f,b
 17626                           
 17627                           ; BSR set to: 0
 17628                           ;uart.c: 180: if (i != 3)
 17629  002940  0E03               	movlw	3
 17630  002942  1988               	xorwf	ipAdressToString@i& (0+255),w,b
 17631  002944  B4D8               	btfsc	status,2,c
 17632  002946  D00B               	goto	l850
 17633                           
 17634                           ; BSR set to: 0
 17635                           ;uart.c: 181: address[pointer++] = '.';
 17636  002948  5187               	movf	ipAdressToString@pointer& (0+255),w,b
 17637  00294A  0D01               	mullw	1
 17638  00294C  0EF0               	movlw	low ipAdressToString@address
 17639  00294E  24F3               	addwf	prodl,w,c
 17640  002950  6ED9               	movwf	fsr2l,c
 17641  002952  0E02               	movlw	high ipAdressToString@address
 17642  002954  20F4               	addwfc	prodh,w,c
 17643  002956  6EDA               	movwf	fsr2h,c
 17644  002958  0E2E               	movlw	46
 17645  00295A  6EDF               	movwf	indf2,c
 17646                           
 17647                           ; BSR set to: 0
 17648  00295C  2B87               	incf	ipAdressToString@pointer& (0+255),f,b
 17649  00295E                     l850:
 17650                           
 17651                           ; BSR set to: 0
 17652                           
 17653                           ; BSR set to: 0
 17654  00295E  2B88               	incf	ipAdressToString@i& (0+255),f,b
 17655  002960  D71D               	goto	l8961
 17656  002962                     u10080:
 17657                           
 17658                           ; BSR set to: 0
 17659                           ;uart.c: 182: }
 17660                           ;uart.c: 183: address[pointer] = '\0';
 17661                           
 17662                           ; BSR set to: 0
 17663  002962  5187               	movf	ipAdressToString@pointer& (0+255),w,b
 17664  002964  0D01               	mullw	1
 17665  002966  0EF0               	movlw	low ipAdressToString@address
 17666  002968  24F3               	addwf	prodl,w,c
 17667  00296A  6ED9               	movwf	fsr2l,c
 17668  00296C  0E02               	movlw	high ipAdressToString@address
 17669  00296E  20F4               	addwfc	prodh,w,c
 17670  002970  6EDA               	movwf	fsr2h,c
 17671  002972  0E00               	movlw	0
 17672  002974  6EDF               	movwf	indf2,c
 17673                           
 17674                           ; BSR set to: 0
 17675                           ;uart.c: 184: return address;
 17676  002976  0EF0               	movlw	low ipAdressToString@address
 17677  002978  6F73               	movwf	?_ipAdressToString& (0+255),b
 17678  00297A  0E02               	movlw	high ipAdressToString@address
 17679  00297C  6F74               	movwf	(?_ipAdressToString+1)& (0+255),b
 17680  00297E  0012               	return	
 17681  002980                     __end_of_ipAdressToString:
 17682                           	opt stack 0
 17683                           tblptru	equ	0xFF8
 17684                           tblptrh	equ	0xFF7
 17685                           tblptrl	equ	0xFF6
 17686                           tablat	equ	0xFF5
 17687                           prodh	equ	0xFF4
 17688                           prodl	equ	0xFF3
 17689                           intcon	equ	0xFF2
 17690                           intcon3	equ	0xFF0
 17691                           indf0	equ	0xFEF
 17692                           postinc0	equ	0xFEE
 17693                           plusw0	equ	0xFEB
 17694                           fsr0h	equ	0xFEA
 17695                           fsr0l	equ	0xFE9
 17696                           wreg	equ	0xFE8
 17697                           indf1	equ	0xFE7
 17698                           postinc1	equ	0xFE6
 17699                           postdec1	equ	0xFE5
 17700                           plusw1	equ	0xFE3
 17701                           fsr1h	equ	0xFE2
 17702                           fsr1l	equ	0xFE1
 17703                           indf2	equ	0xFDF
 17704                           postinc2	equ	0xFDE
 17705                           postdec2	equ	0xFDD
 17706                           plusw2	equ	0xFDB
 17707                           fsr2h	equ	0xFDA
 17708                           fsr2l	equ	0xFD9
 17709                           status	equ	0xFD8
 17710                           
 17711 ;; *************** function ___lwmod *****************
 17712 ;; Defined at:
 17713 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 17714 ;; Parameters:    Size  Location     Type
 17715 ;;  dividend        2   14[BANK0 ] unsigned int 
 17716 ;;  divisor         2   16[BANK0 ] unsigned int 
 17717 ;; Auto vars:     Size  Location     Type
 17718 ;;  counter         1   18[BANK0 ] unsigned char 
 17719 ;; Return value:  Size  Location     Type
 17720 ;;                  2   14[BANK0 ] unsigned int 
 17721 ;; Registers used:
 17722 ;;		wreg, status,2, status,0
 17723 ;; Tracked objects:
 17724 ;;		On entry : 0/0
 17725 ;;		On exit  : 0/0
 17726 ;;		Unchanged: 0/0
 17727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17728 ;;      Params:         0       4       0       0       0       0       0       0       0
 17729 ;;      Locals:         0       1       0       0       0       0       0       0       0
 17730 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17731 ;;      Totals:         0       5       0       0       0       0       0       0       0
 17732 ;;Total ram usage:        5 bytes
 17733 ;; Hardware stack levels used:    1
 17734 ;; Hardware stack levels required when called:    4
 17735 ;; This function calls:
 17736 ;;		Nothing
 17737 ;; This function is called by:
 17738 ;;		_ipAdressToString
 17739 ;;		_arp_probe
 17740 ;; This function uses a non-reentrant model
 17741 ;;
 17742                           
 17743                           	psect	text66
 17744  0050D6                     __ptext66:
 17745                           	opt stack 0
 17746  0050D6                     ___lwmod:
 17747                           	opt stack 22
 17748                           
 17749                           ; BSR set to: 0
 17750                           ;incstack = 0
 17751  0050D6  0100               	movlb	0	; () banked
 17752  0050D8  5170               	movf	___lwmod@divisor& (0+255),w,b
 17753  0050DA  1171               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 17754  0050DC  B4D8               	btfsc	status,2,c
 17755  0050DE  D018               	goto	l1646
 17756                           
 17757                           ; BSR set to: 0
 17758  0050E0  0E01               	movlw	1
 17759  0050E2  6F72               	movwf	___lwmod@counter& (0+255),b
 17760  0050E4  D004               	goto	l1641
 17761  0050E6                     
 17762                           ; BSR set to: 0
 17763                           
 17764                           ; BSR set to: 0
 17765  0050E6  90D8               	bcf	status,0,c
 17766  0050E8  3770               	rlcf	___lwmod@divisor& (0+255),f,b
 17767  0050EA  3771               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 17768  0050EC  2B72               	incf	___lwmod@counter& (0+255),f,b
 17769  0050EE                     l1641:
 17770                           
 17771                           ; BSR set to: 0
 17772                           
 17773                           ; BSR set to: 0
 17774  0050EE  AF71               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 17775  0050F0  D7FA               	goto	l1642
 17776  0050F2                     u9820:
 17777                           
 17778                           ; BSR set to: 0
 17779                           
 17780                           ; BSR set to: 0
 17781                           
 17782                           ; BSR set to: 0
 17783  0050F2  5170               	movf	___lwmod@divisor& (0+255),w,b
 17784  0050F4  5D6E               	subwf	___lwmod@dividend& (0+255),w,b
 17785  0050F6  5171               	movf	(___lwmod@divisor+1)& (0+255),w,b
 17786  0050F8  596F               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 17787  0050FA  A0D8               	btfss	status,0,c
 17788  0050FC  D004               	goto	l1645
 17789                           
 17790                           ; BSR set to: 0
 17791  0050FE  5170               	movf	___lwmod@divisor& (0+255),w,b
 17792  005100  5F6E               	subwf	___lwmod@dividend& (0+255),f,b
 17793  005102  5171               	movf	(___lwmod@divisor+1)& (0+255),w,b
 17794  005104  5B6F               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 17795  005106                     l1645:
 17796                           
 17797                           ; BSR set to: 0
 17798                           
 17799                           ; BSR set to: 0
 17800  005106  90D8               	bcf	status,0,c
 17801  005108  3371               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 17802  00510A  3370               	rrcf	___lwmod@divisor& (0+255),f,b
 17803                           
 17804                           ; BSR set to: 0
 17805  00510C  2F72               	decfsz	___lwmod@counter& (0+255),f,b
 17806  00510E  D7F1               	goto	u9820
 17807  005110                     l1646:
 17808                           
 17809                           ; BSR set to: 0
 17810                           
 17811                           ; BSR set to: 0
 17812  005110  C06E  F06E         	movff	___lwmod@dividend,?___lwmod
 17813  005114  C06F  F06F         	movff	___lwmod@dividend+1,?___lwmod+1
 17814                           
 17815                           ; BSR set to: 0
 17816  005118  0012               	return		;funcret
 17817  00511A                     __end_of___lwmod:
 17818                           	opt stack 0
 17819                           tblptru	equ	0xFF8
 17820                           tblptrh	equ	0xFF7
 17821                           tblptrl	equ	0xFF6
 17822                           tablat	equ	0xFF5
 17823                           prodh	equ	0xFF4
 17824                           prodl	equ	0xFF3
 17825                           intcon	equ	0xFF2
 17826                           intcon3	equ	0xFF0
 17827                           indf0	equ	0xFEF
 17828                           postinc0	equ	0xFEE
 17829                           plusw0	equ	0xFEB
 17830                           fsr0h	equ	0xFEA
 17831                           fsr0l	equ	0xFE9
 17832                           wreg	equ	0xFE8
 17833                           indf1	equ	0xFE7
 17834                           postinc1	equ	0xFE6
 17835                           postdec1	equ	0xFE5
 17836                           plusw1	equ	0xFE3
 17837                           fsr1h	equ	0xFE2
 17838                           fsr1l	equ	0xFE1
 17839                           indf2	equ	0xFDF
 17840                           postinc2	equ	0xFDE
 17841                           postdec2	equ	0xFDD
 17842                           plusw2	equ	0xFDB
 17843                           fsr2h	equ	0xFDA
 17844                           fsr2l	equ	0xFD9
 17845                           status	equ	0xFD8
 17846                           
 17847 ;; *************** function ___lwdiv *****************
 17848 ;; Defined at:
 17849 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 17850 ;; Parameters:    Size  Location     Type
 17851 ;;  dividend        2    0[BANK0 ] unsigned int 
 17852 ;;  divisor         2    2[BANK0 ] unsigned int 
 17853 ;; Auto vars:     Size  Location     Type
 17854 ;;  quotient        2    5[BANK0 ] unsigned int 
 17855 ;;  counter         1    4[BANK0 ] unsigned char 
 17856 ;; Return value:  Size  Location     Type
 17857 ;;                  2    0[BANK0 ] unsigned int 
 17858 ;; Registers used:
 17859 ;;		wreg, status,2, status,0
 17860 ;; Tracked objects:
 17861 ;;		On entry : 0/0
 17862 ;;		On exit  : 0/0
 17863 ;;		Unchanged: 0/0
 17864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17865 ;;      Params:         0       4       0       0       0       0       0       0       0
 17866 ;;      Locals:         0       3       0       0       0       0       0       0       0
 17867 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17868 ;;      Totals:         0       7       0       0       0       0       0       0       0
 17869 ;;Total ram usage:        7 bytes
 17870 ;; Hardware stack levels used:    1
 17871 ;; Hardware stack levels required when called:    4
 17872 ;; This function calls:
 17873 ;;		Nothing
 17874 ;; This function is called by:
 17875 ;;		_ipAdressToString
 17876 ;; This function uses a non-reentrant model
 17877 ;;
 17878                           
 17879                           	psect	text67
 17880  004EBC                     __ptext67:
 17881                           	opt stack 0
 17882  004EBC                     ___lwdiv:
 17883                           	opt stack 22
 17884                           
 17885                           ; BSR set to: 0
 17886                           ;incstack = 0
 17887  004EBC  0E00               	movlw	0
 17888  004EBE  0100               	movlb	0	; () banked
 17889  004EC0  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
 17890  004EC2  0E00               	movlw	0
 17891  004EC4  6F65               	movwf	___lwdiv@quotient& (0+255),b
 17892                           
 17893                           ; BSR set to: 0
 17894  004EC6  5162               	movf	___lwdiv@divisor& (0+255),w,b
 17895  004EC8  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 17896  004ECA  B4D8               	btfsc	status,2,c
 17897  004ECC  D01C               	goto	l1636
 17898                           
 17899                           ; BSR set to: 0
 17900  004ECE  0E01               	movlw	1
 17901  004ED0  6F64               	movwf	___lwdiv@counter& (0+255),b
 17902  004ED2  D004               	goto	l1631
 17903  004ED4                     
 17904                           ; BSR set to: 0
 17905                           
 17906                           ; BSR set to: 0
 17907  004ED4  90D8               	bcf	status,0,c
 17908  004ED6  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 17909  004ED8  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 17910  004EDA  2B64               	incf	___lwdiv@counter& (0+255),f,b
 17911  004EDC                     l1631:
 17912                           
 17913                           ; BSR set to: 0
 17914                           
 17915                           ; BSR set to: 0
 17916  004EDC  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 17917  004EDE  D7FA               	goto	l1632
 17918  004EE0                     u9790:
 17919                           
 17920                           ; BSR set to: 0
 17921                           
 17922                           ; BSR set to: 0
 17923                           
 17924                           ; BSR set to: 0
 17925  004EE0  90D8               	bcf	status,0,c
 17926  004EE2  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 17927  004EE4  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 17928                           
 17929                           ; BSR set to: 0
 17930  004EE6  5162               	movf	___lwdiv@divisor& (0+255),w,b
 17931  004EE8  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 17932  004EEA  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 17933  004EEC  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 17934  004EEE  A0D8               	btfss	status,0,c
 17935  004EF0  D005               	goto	l1635
 17936                           
 17937                           ; BSR set to: 0
 17938  004EF2  5162               	movf	___lwdiv@divisor& (0+255),w,b
 17939  004EF4  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 17940  004EF6  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 17941  004EF8  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 17942                           
 17943                           ; BSR set to: 0
 17944  004EFA  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 17945  004EFC                     l1635:
 17946                           
 17947                           ; BSR set to: 0
 17948                           
 17949                           ; BSR set to: 0
 17950  004EFC  90D8               	bcf	status,0,c
 17951  004EFE  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 17952  004F00  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 17953                           
 17954                           ; BSR set to: 0
 17955  004F02  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 17956  004F04  D7ED               	goto	u9790
 17957  004F06                     l1636:
 17958                           
 17959                           ; BSR set to: 0
 17960                           
 17961                           ; BSR set to: 0
 17962  004F06  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 17963  004F0A  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 17964                           
 17965                           ; BSR set to: 0
 17966  004F0E  0012               	return		;funcret
 17967  004F10                     __end_of___lwdiv:
 17968                           	opt stack 0
 17969                           tblptru	equ	0xFF8
 17970                           tblptrh	equ	0xFF7
 17971                           tblptrl	equ	0xFF6
 17972                           tablat	equ	0xFF5
 17973                           prodh	equ	0xFF4
 17974                           prodl	equ	0xFF3
 17975                           intcon	equ	0xFF2
 17976                           intcon3	equ	0xFF0
 17977                           indf0	equ	0xFEF
 17978                           postinc0	equ	0xFEE
 17979                           plusw0	equ	0xFEB
 17980                           fsr0h	equ	0xFEA
 17981                           fsr0l	equ	0xFE9
 17982                           wreg	equ	0xFE8
 17983                           indf1	equ	0xFE7
 17984                           postinc1	equ	0xFE6
 17985                           postdec1	equ	0xFE5
 17986                           plusw1	equ	0xFE3
 17987                           fsr1h	equ	0xFE2
 17988                           fsr1l	equ	0xFE1
 17989                           indf2	equ	0xFDF
 17990                           postinc2	equ	0xFDE
 17991                           postdec2	equ	0xFDD
 17992                           plusw2	equ	0xFDB
 17993                           fsr2h	equ	0xFDA
 17994                           fsr2l	equ	0xFD9
 17995                           status	equ	0xFD8
 17996                           
 17997 ;; *************** function _arp_sendRequest *****************
 17998 ;; Defined at:
 17999 ;;		line 182 in file "src/stack/protocols/arp.c"
 18000 ;; Parameters:    Size  Location     Type
 18001 ;;  ipSender        4    0[BANK1 ] struct ipv4_address
 18002 ;;  ipTarget        4    4[BANK1 ] struct ipv4_address
 18003 ;; Auto vars:     Size  Location     Type
 18004 ;;  request        32   20[BANK1 ] struct arp_message
 18005 ;;  targetMAC       6   14[BANK1 ] struct macaddress
 18006 ;;  senderMAC       6    8[BANK1 ] struct macaddress
 18007 ;; Return value:  Size  Location     Type
 18008 ;;                  1    wreg      void 
 18009 ;; Registers used:
 18010 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18011 ;; Tracked objects:
 18012 ;;		On entry : 0/0
 18013 ;;		On exit  : 0/0
 18014 ;;		Unchanged: 0/0
 18015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18016 ;;      Params:         0       0       8       0       0       0       0       0       0
 18017 ;;      Locals:         0       0      44       0       0       0       0       0       0
 18018 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18019 ;;      Totals:         0       0      52       0       0       0       0       0       0
 18020 ;;Total ram usage:       52 bytes
 18021 ;; Hardware stack levels used:    1
 18022 ;; Hardware stack levels required when called:   10
 18023 ;; This function calls:
 18024 ;;		_arp_send
 18025 ;;		_ethernetController_getMacAddress
 18026 ;;		_mac_setAllZero
 18027 ;; This function is called by:
 18028 ;;		_arp_probe
 18029 ;;		_arp_gratuitous
 18030 ;;		_ipv4_sendFrame
 18031 ;; This function uses a non-reentrant model
 18032 ;;
 18033                           
 18034                           	psect	text68
 18035  00446E                     __ptext68:
 18036                           	opt stack 0
 18037  00446E                     _arp_sendRequest:
 18038                           	opt stack 18
 18039                           
 18040                           ;arp.c: 183: arp_message_t request;
 18041                           ;arp.c: 184: macaddress_t senderMAC;
 18042                           ;arp.c: 185: macaddress_t targetMAC;
 18043                           ;arp.c: 187: senderMAC = ethernetController_getMacAddress();
 18044                           
 18045                           ; BSR set to: 0
 18046                           ;incstack = 0
 18047  00446E  EC05  F025         	call	_ethernetController_getMacAddress	;wreg free
 18048  004472  EE21  F008         	lfsr	2,arp_sendRequest@senderMAC
 18049  004476  0E05               	movlw	5
 18050  004478                     u11151:
 18051  004478  CFEB FFDB          	movff	plusw0,plusw2
 18052  00447C  06E8               	decf	wreg,f,c
 18053  00447E  E2FC               	bc	u11151
 18054                           
 18055                           ;arp.c: 188: mac_setAllZero(&targetMAC);
 18056  004480  0E0E               	movlw	low arp_sendRequest@targetMAC
 18057  004482  0100               	movlb	0	; () banked
 18058  004484  6F60               	movwf	mac_setAllZero@mac& (0+255),b
 18059  004486  0E01               	movlw	high arp_sendRequest@targetMAC
 18060  004488  6F61               	movwf	(mac_setAllZero@mac+1)& (0+255),b
 18061  00448A  ECAE  F02A         	call	_mac_setAllZero	;wreg free
 18062                           
 18063                           ;arp.c: 190: request.hlen = 6u;
 18064  00448E  0E06               	movlw	6
 18065  004490  0101               	movlb	1	; () banked
 18066  004492  6F18               	movwf	(arp_sendRequest@request+4)& (0+255),b
 18067                           
 18068                           ; BSR set to: 1
 18069                           ;arp.c: 191: request.plen = 4u;
 18070  004494  0E04               	movlw	4
 18071  004496  6F19               	movwf	(arp_sendRequest@request+5)& (0+255),b
 18072                           
 18073                           ; BSR set to: 1
 18074                           ;arp.c: 192: request.htype = ARP_HTYPE_ETHERNET;
 18075  004498  0E00               	movlw	0
 18076  00449A  6F15               	movwf	(arp_sendRequest@request+1)& (0+255),b
 18077  00449C  0E01               	movlw	1
 18078  00449E  6F14               	movwf	arp_sendRequest@request& (0+255),b
 18079                           
 18080                           ; BSR set to: 1
 18081                           ;arp.c: 193: request.ptype = ARP_PTYPE_IPv4;
 18082  0044A0  0E08               	movlw	8
 18083  0044A2  6F17               	movwf	(arp_sendRequest@request+3)& (0+255),b
 18084  0044A4  0E00               	movlw	0
 18085  0044A6  6F16               	movwf	(arp_sendRequest@request+2)& (0+255),b
 18086                           
 18087                           ; BSR set to: 1
 18088                           ;arp.c: 194: request.operation = ARP_REQUEST;
 18089  0044A8  0E00               	movlw	0
 18090  0044AA  6F1B               	movwf	(arp_sendRequest@request+7)& (0+255),b
 18091  0044AC  0E01               	movlw	1
 18092  0044AE  6F1A               	movwf	(arp_sendRequest@request+6)& (0+255),b
 18093                           
 18094                           ; BSR set to: 1
 18095                           ;arp.c: 195: request.senderIPAddress = ipSender;
 18096  0044B0  C100  F122         	movff	arp_sendRequest@ipSender,arp_sendRequest@request+14
 18097  0044B4  C101  F123         	movff	arp_sendRequest@ipSender+1,arp_sendRequest@request+15
 18098  0044B8  C102  F124         	movff	arp_sendRequest@ipSender+2,arp_sendRequest@request+16
 18099  0044BC  C103  F125         	movff	arp_sendRequest@ipSender+3,arp_sendRequest@request+17
 18100                           
 18101                           ; BSR set to: 1
 18102                           ;arp.c: 196: request.senderMACAddress = senderMAC;
 18103  0044C0  EE21  F008         	lfsr	2,arp_sendRequest@senderMAC
 18104  0044C4  EE11  F01C         	lfsr	1,arp_sendRequest@request+8
 18105  0044C8  0E05               	movlw	5
 18106  0044CA                     u11161:
 18107  0044CA  CFDB FFE3          	movff	plusw2,plusw1
 18108  0044CE  06E8               	decf	wreg,f,c
 18109  0044D0  E2FC               	bc	u11161
 18110                           
 18111                           ; BSR set to: 1
 18112                           ;arp.c: 197: request.targetIPAddress = ipTarget;
 18113  0044D2  C104  F12C         	movff	arp_sendRequest@ipTarget,arp_sendRequest@request+24
 18114  0044D6  C105  F12D         	movff	arp_sendRequest@ipTarget+1,arp_sendRequest@request+25
 18115  0044DA  C106  F12E         	movff	arp_sendRequest@ipTarget+2,arp_sendRequest@request+26
 18116  0044DE  C107  F12F         	movff	arp_sendRequest@ipTarget+3,arp_sendRequest@request+27
 18117                           
 18118                           ; BSR set to: 1
 18119                           ;arp.c: 198: request.targetMACAddress = targetMAC;
 18120  0044E2  EE21  F00E         	lfsr	2,arp_sendRequest@targetMAC
 18121  0044E6  EE11  F026         	lfsr	1,arp_sendRequest@request+18
 18122  0044EA  0E05               	movlw	5
 18123  0044EC                     u11171:
 18124  0044EC  CFDB FFE3          	movff	plusw2,plusw1
 18125  0044F0  06E8               	decf	wreg,f,c
 18126  0044F2  E2FC               	bc	u11171
 18127                           
 18128                           ; BSR set to: 1
 18129                           ;arp.c: 200: arp_send(request);
 18130  0044F4  EE21  F014         	lfsr	2,arp_sendRequest@request
 18131  0044F8  EE00  F0A7         	lfsr	0,arp_send@arp
 18132  0044FC  0E1F               	movlw	31
 18133  0044FE                     u11181:
 18134  0044FE  CFDB FFEB          	movff	plusw2,plusw0
 18135  004502  06E8               	decf	wreg,f,c
 18136  004504  E2FC               	bc	u11181
 18137  004506  EC30  F00E         	call	_arp_send	;wreg free
 18138  00450A  0012               	return		;funcret
 18139  00450C                     __end_of_arp_sendRequest:
 18140                           	opt stack 0
 18141                           tblptru	equ	0xFF8
 18142                           tblptrh	equ	0xFF7
 18143                           tblptrl	equ	0xFF6
 18144                           tablat	equ	0xFF5
 18145                           prodh	equ	0xFF4
 18146                           prodl	equ	0xFF3
 18147                           intcon	equ	0xFF2
 18148                           intcon3	equ	0xFF0
 18149                           indf0	equ	0xFEF
 18150                           postinc0	equ	0xFEE
 18151                           plusw0	equ	0xFEB
 18152                           fsr0h	equ	0xFEA
 18153                           fsr0l	equ	0xFE9
 18154                           wreg	equ	0xFE8
 18155                           indf1	equ	0xFE7
 18156                           postinc1	equ	0xFE6
 18157                           postdec1	equ	0xFE5
 18158                           plusw1	equ	0xFE3
 18159                           fsr1h	equ	0xFE2
 18160                           fsr1l	equ	0xFE1
 18161                           indf2	equ	0xFDF
 18162                           postinc2	equ	0xFDE
 18163                           postdec2	equ	0xFDD
 18164                           plusw2	equ	0xFDB
 18165                           fsr2h	equ	0xFDA
 18166                           fsr2l	equ	0xFD9
 18167                           status	equ	0xFD8
 18168                           
 18169 ;; *************** function _mac_setAllZero *****************
 18170 ;; Defined at:
 18171 ;;		line 47 in file "src/eth/mac.c"
 18172 ;; Parameters:    Size  Location     Type
 18173 ;;  mac             2    0[BANK0 ] PTR struct macaddress
 18174 ;;		 -> arp_init@mac(6), arp_sendRequest@targetMAC(6), 
 18175 ;; Auto vars:     Size  Location     Type
 18176 ;;  i               1    2[BANK0 ] unsigned char 
 18177 ;; Return value:  Size  Location     Type
 18178 ;;                  1    wreg      void 
 18179 ;; Registers used:
 18180 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 18181 ;; Tracked objects:
 18182 ;;		On entry : 0/0
 18183 ;;		On exit  : 0/0
 18184 ;;		Unchanged: 0/0
 18185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18186 ;;      Params:         0       2       0       0       0       0       0       0       0
 18187 ;;      Locals:         0       1       0       0       0       0       0       0       0
 18188 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18189 ;;      Totals:         0       3       0       0       0       0       0       0       0
 18190 ;;Total ram usage:        3 bytes
 18191 ;; Hardware stack levels used:    1
 18192 ;; Hardware stack levels required when called:    4
 18193 ;; This function calls:
 18194 ;;		Nothing
 18195 ;; This function is called by:
 18196 ;;		_arp_sendRequest
 18197 ;;		_arp_init
 18198 ;; This function uses a non-reentrant model
 18199 ;;
 18200                           
 18201                           	psect	text69
 18202  00555C                     __ptext69:
 18203                           	opt stack 0
 18204  00555C                     _mac_setAllZero:
 18205                           	opt stack 24
 18206                           
 18207                           ;mac.c: 48: for (uint8_t i = 0; i < 6; i++)
 18208                           
 18209                           ;incstack = 0
 18210  00555C  0E00               	movlw	0
 18211  00555E  0100               	movlb	0	; () banked
 18212  005560  6F62               	movwf	mac_setAllZero@i& (0+255),b
 18213  005562                     l8949:
 18214                           
 18215                           ; BSR set to: 0
 18216  005562  0E05               	movlw	5
 18217  005564  6562               	cpfsgt	mac_setAllZero@i& (0+255),b
 18218  005566  D001               	goto	l396
 18219  005568  0012               	return	
 18220  00556A                     l396:
 18221                           
 18222                           ; BSR set to: 0
 18223                           ;mac.c: 49: mac->address[i] = 0x00;
 18224                           
 18225                           ; BSR set to: 0
 18226  00556A  5162               	movf	mac_setAllZero@i& (0+255),w,b
 18227  00556C  0D01               	mullw	1
 18228  00556E  50F3               	movf	prodl,w,c
 18229  005570  2560               	addwf	mac_setAllZero@mac& (0+255),w,b
 18230  005572  6ED9               	movwf	fsr2l,c
 18231  005574  50F4               	movf	prodh,w,c
 18232  005576  2161               	addwfc	(mac_setAllZero@mac+1)& (0+255),w,b
 18233  005578  6EDA               	movwf	fsr2h,c
 18234  00557A  0E00               	movlw	0
 18235  00557C  6EDF               	movwf	indf2,c
 18236                           
 18237                           ; BSR set to: 0
 18238  00557E  2B62               	incf	mac_setAllZero@i& (0+255),f,b
 18239  005580  D7F0               	goto	l8949
 18240  005582                     __end_of_mac_setAllZero:
 18241                           	opt stack 0
 18242                           tblptru	equ	0xFF8
 18243                           tblptrh	equ	0xFF7
 18244                           tblptrl	equ	0xFF6
 18245                           tablat	equ	0xFF5
 18246                           prodh	equ	0xFF4
 18247                           prodl	equ	0xFF3
 18248                           intcon	equ	0xFF2
 18249                           intcon3	equ	0xFF0
 18250                           indf0	equ	0xFEF
 18251                           postinc0	equ	0xFEE
 18252                           plusw0	equ	0xFEB
 18253                           fsr0h	equ	0xFEA
 18254                           fsr0l	equ	0xFE9
 18255                           wreg	equ	0xFE8
 18256                           indf1	equ	0xFE7
 18257                           postinc1	equ	0xFE6
 18258                           postdec1	equ	0xFE5
 18259                           plusw1	equ	0xFE3
 18260                           fsr1h	equ	0xFE2
 18261                           fsr1l	equ	0xFE1
 18262                           indf2	equ	0xFDF
 18263                           postinc2	equ	0xFDE
 18264                           postdec2	equ	0xFDD
 18265                           plusw2	equ	0xFDB
 18266                           fsr2h	equ	0xFDA
 18267                           fsr2l	equ	0xFD9
 18268                           status	equ	0xFD8
 18269                           
 18270 ;; *************** function _ethernetController_getMacAddress *****************
 18271 ;; Defined at:
 18272 ;;		line 157 in file "src/enc424j600/ENC424J600.c"
 18273 ;; Parameters:    Size  Location     Type
 18274 ;;		None
 18275 ;; Auto vars:     Size  Location     Type
 18276 ;;  mac             6   20[BANK0 ] struct macaddress
 18277 ;; Return value:  Size  Location     Type
 18278 ;;                  6   14[BANK0 ] struct macaddress
 18279 ;; Registers used:
 18280 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 18281 ;; Tracked objects:
 18282 ;;		On entry : 0/0
 18283 ;;		On exit  : 0/0
 18284 ;;		Unchanged: 0/0
 18285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18286 ;;      Params:         0       6       0       0       0       0       0       0       0
 18287 ;;      Locals:         0       6       0       0       0       0       0       0       0
 18288 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18289 ;;      Totals:         0      12       0       0       0       0       0       0       0
 18290 ;;Total ram usage:       12 bytes
 18291 ;; Hardware stack levels used:    1
 18292 ;; Hardware stack levels required when called:    7
 18293 ;; This function calls:
 18294 ;;		_enc424j600_readControlRegisterUnbanked
 18295 ;; This function is called by:
 18296 ;;		_main
 18297 ;;		_arp_sendRequest
 18298 ;;		_arp_sendReply
 18299 ;;		_ipv4_sendFrame
 18300 ;; This function uses a non-reentrant model
 18301 ;;
 18302                           
 18303                           	psect	text70
 18304  004A0A                     __ptext70:
 18305                           	opt stack 0
 18306  004A0A                     _ethernetController_getMacAddress:
 18307                           	opt stack 21
 18308                           
 18309                           ;ENC424J600.c: 158: macaddress_t mac;
 18310                           ;ENC424J600.c: 159: enc424j600_readControlRegisterUnbanked(0x04 + 0x60, &mac.address[0])
      +                          ;
 18311                           
 18312                           ; BSR set to: 0
 18313                           ;incstack = 0
 18314  004A0A  0E74               	movlw	low ethernetController_getMacAddress@mac
 18315  004A0C  0100               	movlb	0	; () banked
 18316  004A0E  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 18317  004A10  0E00               	movlw	high ethernetController_getMacAddress@mac
 18318  004A12  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 18319  004A14  0E64               	movlw	100
 18320  004A16  EC7C  F029         	call	_enc424j600_readControlRegisterUnbanked
 18321                           
 18322                           ;ENC424J600.c: 160: enc424j600_readControlRegisterUnbanked(0x05 + 0x60, &mac.address[1])
      +                          ;
 18323  004A1A  0E75               	movlw	low (ethernetController_getMacAddress@mac+1)
 18324  004A1C  0100               	movlb	0	; () banked
 18325  004A1E  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 18326  004A20  0E00               	movlw	high (ethernetController_getMacAddress@mac+1)
 18327  004A22  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 18328  004A24  0E65               	movlw	101
 18329  004A26  EC7C  F029         	call	_enc424j600_readControlRegisterUnbanked
 18330                           
 18331                           ;ENC424J600.c: 161: enc424j600_readControlRegisterUnbanked(0x02 + 0x60, &mac.address[2])
      +                          ;
 18332  004A2A  0E76               	movlw	low (ethernetController_getMacAddress@mac+2)
 18333  004A2C  0100               	movlb	0	; () banked
 18334  004A2E  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 18335  004A30  0E00               	movlw	high (ethernetController_getMacAddress@mac+2)
 18336  004A32  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 18337  004A34  0E62               	movlw	98
 18338  004A36  EC7C  F029         	call	_enc424j600_readControlRegisterUnbanked
 18339                           
 18340                           ;ENC424J600.c: 162: enc424j600_readControlRegisterUnbanked(0x03 + 0x60, &mac.address[3])
      +                          ;
 18341  004A3A  0E77               	movlw	low (ethernetController_getMacAddress@mac+3)
 18342  004A3C  0100               	movlb	0	; () banked
 18343  004A3E  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 18344  004A40  0E00               	movlw	high (ethernetController_getMacAddress@mac+3)
 18345  004A42  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 18346  004A44  0E63               	movlw	99
 18347  004A46  EC7C  F029         	call	_enc424j600_readControlRegisterUnbanked
 18348                           
 18349                           ;ENC424J600.c: 163: enc424j600_readControlRegisterUnbanked(0x00 + 0x60, &mac.address[4])
      +                          ;
 18350  004A4A  0E78               	movlw	low (ethernetController_getMacAddress@mac+4)
 18351  004A4C  0100               	movlb	0	; () banked
 18352  004A4E  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 18353  004A50  0E00               	movlw	high (ethernetController_getMacAddress@mac+4)
 18354  004A52  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 18355  004A54  0E60               	movlw	96
 18356  004A56  EC7C  F029         	call	_enc424j600_readControlRegisterUnbanked
 18357                           
 18358                           ;ENC424J600.c: 164: enc424j600_readControlRegisterUnbanked(0x01 + 0x60, &mac.address[5])
      +                          ;
 18359  004A5A  0E79               	movlw	low (ethernetController_getMacAddress@mac+5)
 18360  004A5C  0100               	movlb	0	; () banked
 18361  004A5E  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 18362  004A60  0E00               	movlw	high (ethernetController_getMacAddress@mac+5)
 18363  004A62  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 18364  004A64  0E61               	movlw	97
 18365  004A66  EC7C  F029         	call	_enc424j600_readControlRegisterUnbanked
 18366                           
 18367                           ;ENC424J600.c: 165: return mac;
 18368  004A6A  EE20  F074         	lfsr	2,ethernetController_getMacAddress@mac
 18369  004A6E  EE00  F06E         	lfsr	0,?_ethernetController_getMacAddress
 18370  004A72  0E05               	movlw	5
 18371  004A74                     u9841:
 18372  004A74  CFDB FFEB          	movff	plusw2,plusw0
 18373  004A78  06E8               	decf	wreg,f,c
 18374  004A7A  E2FC               	bc	u9841
 18375  004A7C  0012               	return	
 18376  004A7E                     __end_of_ethernetController_getMacAddress:
 18377                           	opt stack 0
 18378                           tblptru	equ	0xFF8
 18379                           tblptrh	equ	0xFF7
 18380                           tblptrl	equ	0xFF6
 18381                           tablat	equ	0xFF5
 18382                           prodh	equ	0xFF4
 18383                           prodl	equ	0xFF3
 18384                           intcon	equ	0xFF2
 18385                           intcon3	equ	0xFF0
 18386                           indf0	equ	0xFEF
 18387                           postinc0	equ	0xFEE
 18388                           plusw0	equ	0xFEB
 18389                           fsr0h	equ	0xFEA
 18390                           fsr0l	equ	0xFE9
 18391                           wreg	equ	0xFE8
 18392                           indf1	equ	0xFE7
 18393                           postinc1	equ	0xFE6
 18394                           postdec1	equ	0xFE5
 18395                           plusw1	equ	0xFE3
 18396                           fsr1h	equ	0xFE2
 18397                           fsr1l	equ	0xFE1
 18398                           indf2	equ	0xFDF
 18399                           postinc2	equ	0xFDE
 18400                           postdec2	equ	0xFDD
 18401                           plusw2	equ	0xFDB
 18402                           fsr2h	equ	0xFDA
 18403                           fsr2l	equ	0xFD9
 18404                           status	equ	0xFD8
 18405                           
 18406 ;; *************** function _arp_send *****************
 18407 ;; Defined at:
 18408 ;;		line 136 in file "src/stack/protocols/arp.c"
 18409 ;; Parameters:    Size  Location     Type
 18410 ;;  arp            32   71[BANK0 ] struct arp_message
 18411 ;; Auto vars:     Size  Location     Type
 18412 ;;  i               1  112[BANK0 ] unsigned char 
 18413 ;;  i               1  111[BANK0 ] unsigned char 
 18414 ;;  i               1  110[BANK0 ] unsigned char 
 18415 ;;  i               1  109[BANK0 ] unsigned char 
 18416 ;;  ethFrame       34  113[BANK0 ] struct ethernetFrame
 18417 ;;  field           9  147[BANK0 ] struct memoryField
 18418 ;;  destination     6  103[BANK0 ] struct macaddress
 18419 ;; Return value:  Size  Location     Type
 18420 ;;                  1    wreg      void 
 18421 ;; Registers used:
 18422 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18423 ;; Tracked objects:
 18424 ;;		On entry : 0/0
 18425 ;;		On exit  : 0/0
 18426 ;;		Unchanged: 0/0
 18427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18428 ;;      Params:         0      32       0       0       0       0       0       0       0
 18429 ;;      Locals:         0      53       0       0       0       0       0       0       0
 18430 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18431 ;;      Totals:         0      85       0       0       0       0       0       0       0
 18432 ;;Total ram usage:       85 bytes
 18433 ;; Hardware stack levels used:    1
 18434 ;; Hardware stack levels required when called:    9
 18435 ;; This function calls:
 18436 ;;		_ethernetController_getSourceMACAddress
 18437 ;;		_ethernetController_sendPacket
 18438 ;;		_ethernetController_streamToTransmitBuffer
 18439 ;;		_ethernet_txFrameRequest
 18440 ;;		_mac_setToBroadcast
 18441 ;; This function is called by:
 18442 ;;		_arp_sendRequest
 18443 ;;		_arp_sendReply
 18444 ;; This function uses a non-reentrant model
 18445 ;;
 18446                           
 18447                           	psect	text71
 18448  001C60                     __ptext71:
 18449                           	opt stack 0
 18450  001C60                     _arp_send:
 18451                           	opt stack 18
 18452                           
 18453                           ;arp.c: 137: memoryField_t field;
 18454                           ;arp.c: 138: ethernetFrame_t ethFrame;
 18455                           ;arp.c: 141: macaddress_t destination;
 18456                           ;arp.c: 142: mac_setToBroadcast(&destination);
 18457                           
 18458                           ;incstack = 0
 18459  001C60  0EC7               	movlw	low arp_send@destination
 18460  001C62  0100               	movlb	0	; () banked
 18461  001C64  6F60               	movwf	mac_setToBroadcast@mac& (0+255),b
 18462  001C66  0E00               	movlw	high arp_send@destination
 18463  001C68  6F61               	movwf	(mac_setToBroadcast@mac+1)& (0+255),b
 18464  001C6A  ECC1  F02A         	call	_mac_setToBroadcast	;wreg free
 18465                           
 18466                           ;arp.c: 143: ethFrame.destination = destination;
 18467  001C6E  EE20  F0C7         	lfsr	2,arp_send@destination
 18468  001C72  EE10  F0D9         	lfsr	1,arp_send@ethFrame+8
 18469  001C76  0E05               	movlw	5
 18470  001C78                     u10221:
 18471  001C78  CFDB FFE3          	movff	plusw2,plusw1
 18472  001C7C  06E8               	decf	wreg,f,c
 18473  001C7E  E2FC               	bc	u10221
 18474                           
 18475                           ;arp.c: 147: ethFrame.length = 36;
 18476  001C80  0E00               	movlw	0
 18477  001C82  0100               	movlb	0	; () banked
 18478  001C84  6FD2               	movwf	(arp_send@ethFrame+1)& (0+255),b
 18479  001C86  0E24               	movlw	36
 18480  001C88  6FD1               	movwf	arp_send@ethFrame& (0+255),b
 18481                           
 18482                           ; BSR set to: 0
 18483                           ;arp.c: 148: ethFrame.source = ethernetController_getSourceMACAddress(field);
 18484  001C8A  EE20  F0F3         	lfsr	2,arp_send@field
 18485  001C8E  EE00  F06F         	lfsr	0,ethernetController_getSourceMACAddress@field
 18486  001C92  0E08               	movlw	8
 18487  001C94                     u10231:
 18488  001C94  CFDB FFEB          	movff	plusw2,plusw0
 18489  001C98  06E8               	decf	wreg,f,c
 18490  001C9A  E2FC               	bc	u10231
 18491  001C9C  ECB0  F025         	call	_ethernetController_getSourceMACAddress	;wreg free
 18492  001CA0  EE20  F0D3         	lfsr	2,arp_send@ethFrame+2
 18493  001CA4  0E05               	movlw	5
 18494  001CA6                     u10241:
 18495  001CA6  CFEB FFDB          	movff	plusw0,plusw2
 18496  001CAA  06E8               	decf	wreg,f,c
 18497  001CAC  E2FC               	bc	u10241
 18498                           
 18499                           ;arp.c: 149: ethFrame.ethertype = ETHERTYPE_ARP;
 18500  001CAE  0E08               	movlw	8
 18501  001CB0  0100               	movlb	0	; () banked
 18502  001CB2  6FE0               	movwf	(arp_send@ethFrame+15)& (0+255),b
 18503  001CB4  0E06               	movlw	6
 18504  001CB6  6FDF               	movwf	(arp_send@ethFrame+14)& (0+255),b
 18505                           
 18506                           ; BSR set to: 0
 18507                           ;arp.c: 151: ethernet_txFrameRequest(&ethFrame);
 18508  001CB8  0ED1               	movlw	low arp_send@ethFrame
 18509  001CBA  6FA2               	movwf	ethernet_txFrameRequest@frame& (0+255),b
 18510  001CBC  0E00               	movlw	high arp_send@ethFrame
 18511  001CBE  6FA3               	movwf	(ethernet_txFrameRequest@frame+1)& (0+255),b
 18512  001CC0  EC07  F01F         	call	_ethernet_txFrameRequest	;wreg free
 18513                           
 18514                           ;arp.c: 153: if (ethFrame.memory.fOutOfMemory) {
 18515  001CC4  0100               	movlb	0	; () banked
 18516  001CC6  51E8               	movf	(arp_send@ethFrame+23)& (0+255),w,b
 18517  001CC8  A4D8               	btfss	status,2,c
 18518  001CCA  0012               	return	
 18519                           
 18520                           ; BSR set to: 0
 18521                           ;arp.c: 155: }
 18522                           ;arp.c: 157: field.start = ethFrame.memory.start + 8;
 18523                           
 18524                           ; BSR set to: 0
 18525                           
 18526                           ; BSR set to: 0
 18527                           ;arp.c: 154: return;
 18528  001CCC  0E08               	movlw	8
 18529  001CCE  25E1               	addwf	(arp_send@ethFrame+16)& (0+255),w,b
 18530  001CD0  6FF3               	movwf	arp_send@field& (0+255),b
 18531  001CD2  0E00               	movlw	0
 18532  001CD4  21E2               	addwfc	(arp_send@ethFrame+17)& (0+255),w,b
 18533  001CD6  6FF4               	movwf	(arp_send@field+1)& (0+255),b
 18534                           
 18535                           ; BSR set to: 0
 18536                           ;arp.c: 158: field.end = ethFrame.memory.end;
 18537  001CD8  C0E3  F0F5         	movff	arp_send@ethFrame+18,arp_send@field+2
 18538  001CDC  C0E4  F0F6         	movff	arp_send@ethFrame+19,arp_send@field+3
 18539                           
 18540                           ; BSR set to: 0
 18541                           ;arp.c: 159: field.length = 28;
 18542  001CE0  0E00               	movlw	0
 18543  001CE2  6FF8               	movwf	(arp_send@field+5)& (0+255),b
 18544  001CE4  0E1C               	movlw	28
 18545  001CE6  6FF7               	movwf	(arp_send@field+4)& (0+255),b
 18546                           
 18547                           ; BSR set to: 0
 18548                           ;arp.c: 161: ethernetController_streamToTransmitBuffer((arp.htype & 0xff00) >> 8, field)
      +                          ;
 18549  001CE8  EE20  F0F3         	lfsr	2,arp_send@field
 18550  001CEC  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 18551  001CF0  0E08               	movlw	8
 18552  001CF2                     u10261:
 18553  001CF2  CFDB FFEB          	movff	plusw2,plusw0
 18554  001CF6  06E8               	decf	wreg,f,c
 18555  001CF8  E2FC               	bc	u10261
 18556  001CFA  51A8               	movf	(arp_send@arp+1)& (0+255),w,b
 18557  001CFC  EC55  F024         	call	_ethernetController_streamToTransmitBuffer
 18558                           
 18559                           ;arp.c: 162: ethernetController_streamToTransmitBuffer(arp.htype & 0x00ff, field);
 18560  001D00  EE20  F0F3         	lfsr	2,arp_send@field
 18561  001D04  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 18562  001D08  0E08               	movlw	8
 18563  001D0A                     u10271:
 18564  001D0A  CFDB FFEB          	movff	plusw2,plusw0
 18565  001D0E  06E8               	decf	wreg,f,c
 18566  001D10  E2FC               	bc	u10271
 18567  001D12  0100               	movlb	0	; () banked
 18568  001D14  51A7               	movf	arp_send@arp& (0+255),w,b
 18569  001D16  EC55  F024         	call	_ethernetController_streamToTransmitBuffer
 18570                           
 18571                           ;arp.c: 163: ethernetController_streamToTransmitBuffer((arp.ptype & 0xff00) >> 8, field)
      +                          ;
 18572  001D1A  EE20  F0F3         	lfsr	2,arp_send@field
 18573  001D1E  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 18574  001D22  0E08               	movlw	8
 18575  001D24                     u10281:
 18576  001D24  CFDB FFEB          	movff	plusw2,plusw0
 18577  001D28  06E8               	decf	wreg,f,c
 18578  001D2A  E2FC               	bc	u10281
 18579  001D2C  0100               	movlb	0	; () banked
 18580  001D2E  51AA               	movf	(arp_send@arp+3)& (0+255),w,b
 18581  001D30  EC55  F024         	call	_ethernetController_streamToTransmitBuffer
 18582                           
 18583                           ;arp.c: 164: ethernetController_streamToTransmitBuffer(arp.ptype & 0x00ff, field);
 18584  001D34  EE20  F0F3         	lfsr	2,arp_send@field
 18585  001D38  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 18586  001D3C  0E08               	movlw	8
 18587  001D3E                     u10291:
 18588  001D3E  CFDB FFEB          	movff	plusw2,plusw0
 18589  001D42  06E8               	decf	wreg,f,c
 18590  001D44  E2FC               	bc	u10291
 18591  001D46  0100               	movlb	0	; () banked
 18592  001D48  51A9               	movf	(arp_send@arp+2)& (0+255),w,b
 18593  001D4A  EC55  F024         	call	_ethernetController_streamToTransmitBuffer
 18594                           
 18595                           ;arp.c: 165: ethernetController_streamToTransmitBuffer(arp.hlen, field);
 18596  001D4E  EE20  F0F3         	lfsr	2,arp_send@field
 18597  001D52  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 18598  001D56  0E08               	movlw	8
 18599  001D58                     u10301:
 18600  001D58  CFDB FFEB          	movff	plusw2,plusw0
 18601  001D5C  06E8               	decf	wreg,f,c
 18602  001D5E  E2FC               	bc	u10301
 18603  001D60  0100               	movlb	0	; () banked
 18604  001D62  51AB               	movf	(arp_send@arp+4)& (0+255),w,b
 18605  001D64  EC55  F024         	call	_ethernetController_streamToTransmitBuffer
 18606                           
 18607                           ;arp.c: 166: ethernetController_streamToTransmitBuffer(arp.plen, field);
 18608  001D68  EE20  F0F3         	lfsr	2,arp_send@field
 18609  001D6C  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 18610  001D70  0E08               	movlw	8
 18611  001D72                     u10311:
 18612  001D72  CFDB FFEB          	movff	plusw2,plusw0
 18613  001D76  06E8               	decf	wreg,f,c
 18614  001D78  E2FC               	bc	u10311
 18615  001D7A  0100               	movlb	0	; () banked
 18616  001D7C  51AC               	movf	(arp_send@arp+5)& (0+255),w,b
 18617  001D7E  EC55  F024         	call	_ethernetController_streamToTransmitBuffer
 18618                           
 18619                           ;arp.c: 167: ethernetController_streamToTransmitBuffer((arp.operation & 0xff00) >> 8, fi
      +                          eld);
 18620  001D82  EE20  F0F3         	lfsr	2,arp_send@field
 18621  001D86  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 18622  001D8A  0E08               	movlw	8
 18623  001D8C                     u10321:
 18624  001D8C  CFDB FFEB          	movff	plusw2,plusw0
 18625  001D90  06E8               	decf	wreg,f,c
 18626  001D92  E2FC               	bc	u10321
 18627  001D94  0100               	movlb	0	; () banked
 18628  001D96  51AE               	movf	(arp_send@arp+7)& (0+255),w,b
 18629  001D98  EC55  F024         	call	_ethernetController_streamToTransmitBuffer
 18630                           
 18631                           ;arp.c: 168: ethernetController_streamToTransmitBuffer(arp.operation & 0x00ff, field);
 18632  001D9C  EE20  F0F3         	lfsr	2,arp_send@field
 18633  001DA0  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 18634  001DA4  0E08               	movlw	8
 18635  001DA6                     u10331:
 18636  001DA6  CFDB FFEB          	movff	plusw2,plusw0
 18637  001DAA  06E8               	decf	wreg,f,c
 18638  001DAC  E2FC               	bc	u10331
 18639  001DAE  0100               	movlb	0	; () banked
 18640  001DB0  51AD               	movf	(arp_send@arp+6)& (0+255),w,b
 18641  001DB2  EC55  F024         	call	_ethernetController_streamToTransmitBuffer
 18642                           
 18643                           ;arp.c: 169: for (uint8_t i = 0; i < arp.hlen; i++)
 18644  001DB6  0E00               	movlw	0
 18645  001DB8  0100               	movlb	0	; () banked
 18646  001DBA  6FCD               	movwf	arp_send@i& (0+255),b
 18647  001DBC  D01A               	goto	l960
 18648  001DBE                     
 18649                           ; BSR set to: 0
 18650                           ;arp.c: 170: ethernetController_streamToTransmitBuffer(arp.senderMACAddress.address[i], 
      +                          field);
 18651                           
 18652                           ; BSR set to: 0
 18653  001DBE  EE20  F0F3         	lfsr	2,arp_send@field
 18654  001DC2  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 18655  001DC6  0E08               	movlw	8
 18656  001DC8                     u10341:
 18657  001DC8  CFDB FFEB          	movff	plusw2,plusw0
 18658  001DCC  06E8               	decf	wreg,f,c
 18659  001DCE  E2FC               	bc	u10341
 18660  001DD0  51CD               	movf	arp_send@i& (0+255),w,b
 18661  001DD2  0D01               	mullw	1
 18662  001DD4  0E08               	movlw	8
 18663  001DD6  26F3               	addwf	prodl,f,c
 18664  001DD8  0E00               	movlw	0
 18665  001DDA  22F4               	addwfc	prodh,f,c
 18666  001DDC  0EA7               	movlw	low arp_send@arp
 18667  001DDE  24F3               	addwf	prodl,w,c
 18668  001DE0  6ED9               	movwf	fsr2l,c
 18669  001DE2  0E00               	movlw	high arp_send@arp
 18670  001DE4  20F4               	addwfc	prodh,w,c
 18671  001DE6  6EDA               	movwf	fsr2h,c
 18672  001DE8  50DF               	movf	indf2,w,c
 18673  001DEA  EC55  F024         	call	_ethernetController_streamToTransmitBuffer
 18674  001DEE  0100               	movlb	0	; () banked
 18675  001DF0  2BCD               	incf	arp_send@i& (0+255),f,b
 18676  001DF2                     l960:
 18677                           
 18678                           ; BSR set to: 0
 18679                           
 18680                           ; BSR set to: 0
 18681  001DF2  51AB               	movf	(arp_send@arp+4)& (0+255),w,b
 18682  001DF4  5DCD               	subwf	arp_send@i& (0+255),w,b
 18683  001DF6  A0D8               	btfss	status,0,c
 18684  001DF8  D7E2               	goto	l961
 18685                           
 18686                           ; BSR set to: 0
 18687                           ;arp.c: 171: for (uint8_t i = 0; i < arp.plen; i++)
 18688                           
 18689                           ; BSR set to: 0
 18690  001DFA  0E00               	movlw	0
 18691  001DFC  6FCE               	movwf	arp_send@i_3104& (0+255),b
 18692  001DFE  D01A               	goto	l963
 18693  001E00                     
 18694                           ; BSR set to: 0
 18695                           ;arp.c: 172: ethernetController_streamToTransmitBuffer(arp.senderIPAddress.address[i], f
      +                          ield);
 18696                           
 18697                           ; BSR set to: 0
 18698  001E00  EE20  F0F3         	lfsr	2,arp_send@field
 18699  001E04  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 18700  001E08  0E08               	movlw	8
 18701  001E0A                     u10361:
 18702  001E0A  CFDB FFEB          	movff	plusw2,plusw0
 18703  001E0E  06E8               	decf	wreg,f,c
 18704  001E10  E2FC               	bc	u10361
 18705  001E12  51CE               	movf	arp_send@i_3104& (0+255),w,b
 18706  001E14  0D01               	mullw	1
 18707  001E16  0E0E               	movlw	14
 18708  001E18  26F3               	addwf	prodl,f,c
 18709  001E1A  0E00               	movlw	0
 18710  001E1C  22F4               	addwfc	prodh,f,c
 18711  001E1E  0EA7               	movlw	low arp_send@arp
 18712  001E20  24F3               	addwf	prodl,w,c
 18713  001E22  6ED9               	movwf	fsr2l,c
 18714  001E24  0E00               	movlw	high arp_send@arp
 18715  001E26  20F4               	addwfc	prodh,w,c
 18716  001E28  6EDA               	movwf	fsr2h,c
 18717  001E2A  50DF               	movf	indf2,w,c
 18718  001E2C  EC55  F024         	call	_ethernetController_streamToTransmitBuffer
 18719  001E30  0100               	movlb	0	; () banked
 18720  001E32  2BCE               	incf	arp_send@i_3104& (0+255),f,b
 18721  001E34                     l963:
 18722                           
 18723                           ; BSR set to: 0
 18724                           
 18725                           ; BSR set to: 0
 18726  001E34  51AC               	movf	(arp_send@arp+5)& (0+255),w,b
 18727  001E36  5DCE               	subwf	arp_send@i_3104& (0+255),w,b
 18728  001E38  A0D8               	btfss	status,0,c
 18729  001E3A  D7E2               	goto	l964
 18730                           
 18731                           ; BSR set to: 0
 18732                           ;arp.c: 173: for (uint8_t i = 0; i < arp.hlen; i++)
 18733                           
 18734                           ; BSR set to: 0
 18735  001E3C  0E00               	movlw	0
 18736  001E3E  6FCF               	movwf	arp_send@i_3105& (0+255),b
 18737  001E40  D01A               	goto	l966
 18738  001E42                     
 18739                           ; BSR set to: 0
 18740                           ;arp.c: 174: ethernetController_streamToTransmitBuffer(arp.targetMACAddress.address[i], 
      +                          field);
 18741                           
 18742                           ; BSR set to: 0
 18743  001E42  EE20  F0F3         	lfsr	2,arp_send@field
 18744  001E46  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 18745  001E4A  0E08               	movlw	8
 18746  001E4C                     u10381:
 18747  001E4C  CFDB FFEB          	movff	plusw2,plusw0
 18748  001E50  06E8               	decf	wreg,f,c
 18749  001E52  E2FC               	bc	u10381
 18750  001E54  51CF               	movf	arp_send@i_3105& (0+255),w,b
 18751  001E56  0D01               	mullw	1
 18752  001E58  0E12               	movlw	18
 18753  001E5A  26F3               	addwf	prodl,f,c
 18754  001E5C  0E00               	movlw	0
 18755  001E5E  22F4               	addwfc	prodh,f,c
 18756  001E60  0EA7               	movlw	low arp_send@arp
 18757  001E62  24F3               	addwf	prodl,w,c
 18758  001E64  6ED9               	movwf	fsr2l,c
 18759  001E66  0E00               	movlw	high arp_send@arp
 18760  001E68  20F4               	addwfc	prodh,w,c
 18761  001E6A  6EDA               	movwf	fsr2h,c
 18762  001E6C  50DF               	movf	indf2,w,c
 18763  001E6E  EC55  F024         	call	_ethernetController_streamToTransmitBuffer
 18764  001E72  0100               	movlb	0	; () banked
 18765  001E74  2BCF               	incf	arp_send@i_3105& (0+255),f,b
 18766  001E76                     l966:
 18767                           
 18768                           ; BSR set to: 0
 18769                           
 18770                           ; BSR set to: 0
 18771  001E76  51AB               	movf	(arp_send@arp+4)& (0+255),w,b
 18772  001E78  5DCF               	subwf	arp_send@i_3105& (0+255),w,b
 18773  001E7A  A0D8               	btfss	status,0,c
 18774  001E7C  D7E2               	goto	l967
 18775                           
 18776                           ; BSR set to: 0
 18777                           ;arp.c: 175: for (uint8_t i = 0; i < arp.plen; i++)
 18778                           
 18779                           ; BSR set to: 0
 18780  001E7E  0E00               	movlw	0
 18781  001E80  6FD0               	movwf	arp_send@i_3106& (0+255),b
 18782  001E82  D01A               	goto	l969
 18783  001E84                     
 18784                           ; BSR set to: 0
 18785                           ;arp.c: 176: ethernetController_streamToTransmitBuffer(arp.targetIPAddress.address[i], f
      +                          ield);
 18786                           
 18787                           ; BSR set to: 0
 18788  001E84  EE20  F0F3         	lfsr	2,arp_send@field
 18789  001E88  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 18790  001E8C  0E08               	movlw	8
 18791  001E8E                     u10401:
 18792  001E8E  CFDB FFEB          	movff	plusw2,plusw0
 18793  001E92  06E8               	decf	wreg,f,c
 18794  001E94  E2FC               	bc	u10401
 18795  001E96  51D0               	movf	arp_send@i_3106& (0+255),w,b
 18796  001E98  0D01               	mullw	1
 18797  001E9A  0E18               	movlw	24
 18798  001E9C  26F3               	addwf	prodl,f,c
 18799  001E9E  0E00               	movlw	0
 18800  001EA0  22F4               	addwfc	prodh,f,c
 18801  001EA2  0EA7               	movlw	low arp_send@arp
 18802  001EA4  24F3               	addwf	prodl,w,c
 18803  001EA6  6ED9               	movwf	fsr2l,c
 18804  001EA8  0E00               	movlw	high arp_send@arp
 18805  001EAA  20F4               	addwfc	prodh,w,c
 18806  001EAC  6EDA               	movwf	fsr2h,c
 18807  001EAE  50DF               	movf	indf2,w,c
 18808  001EB0  EC55  F024         	call	_ethernetController_streamToTransmitBuffer
 18809  001EB4  0100               	movlb	0	; () banked
 18810  001EB6  2BD0               	incf	arp_send@i_3106& (0+255),f,b
 18811  001EB8                     l969:
 18812                           
 18813                           ; BSR set to: 0
 18814                           
 18815                           ; BSR set to: 0
 18816  001EB8  51AC               	movf	(arp_send@arp+5)& (0+255),w,b
 18817  001EBA  5DD0               	subwf	arp_send@i_3106& (0+255),w,b
 18818  001EBC  A0D8               	btfss	status,0,c
 18819  001EBE  D7E2               	goto	l970
 18820                           
 18821                           ; BSR set to: 0
 18822                           ;arp.c: 178: ethernetController_sendPacket(ethFrame.memory);
 18823                           
 18824                           ; BSR set to: 0
 18825  001EC0  EE20  F0E1         	lfsr	2,arp_send@ethFrame+16
 18826  001EC4  EE00  F072         	lfsr	0,ethernetController_sendPacket@field
 18827  001EC8  0E08               	movlw	8
 18828  001ECA                     u10421:
 18829  001ECA  CFDB FFEB          	movff	plusw2,plusw0
 18830  001ECE  06E8               	decf	wreg,f,c
 18831  001ED0  E2FC               	bc	u10421
 18832  001ED2  EC73  F02A         	call	_ethernetController_sendPacket	;wreg free
 18833  001ED6  0012               	return		;funcret
 18834  001ED8                     __end_of_arp_send:
 18835                           	opt stack 0
 18836                           tblptru	equ	0xFF8
 18837                           tblptrh	equ	0xFF7
 18838                           tblptrl	equ	0xFF6
 18839                           tablat	equ	0xFF5
 18840                           prodh	equ	0xFF4
 18841                           prodl	equ	0xFF3
 18842                           intcon	equ	0xFF2
 18843                           intcon3	equ	0xFF0
 18844                           indf0	equ	0xFEF
 18845                           postinc0	equ	0xFEE
 18846                           plusw0	equ	0xFEB
 18847                           fsr0h	equ	0xFEA
 18848                           fsr0l	equ	0xFE9
 18849                           wreg	equ	0xFE8
 18850                           indf1	equ	0xFE7
 18851                           postinc1	equ	0xFE6
 18852                           postdec1	equ	0xFE5
 18853                           plusw1	equ	0xFE3
 18854                           fsr1h	equ	0xFE2
 18855                           fsr1l	equ	0xFE1
 18856                           indf2	equ	0xFDF
 18857                           postinc2	equ	0xFDE
 18858                           postdec2	equ	0xFDD
 18859                           plusw2	equ	0xFDB
 18860                           fsr2h	equ	0xFDA
 18861                           fsr2l	equ	0xFD9
 18862                           status	equ	0xFD8
 18863                           
 18864 ;; *************** function _mac_setToBroadcast *****************
 18865 ;; Defined at:
 18866 ;;		line 26 in file "src/eth/mac.c"
 18867 ;; Parameters:    Size  Location     Type
 18868 ;;  mac             2    0[BANK0 ] PTR struct macaddress
 18869 ;;		 -> arp_send@destination(6), 
 18870 ;; Auto vars:     Size  Location     Type
 18871 ;;  i               1    2[BANK0 ] unsigned char 
 18872 ;; Return value:  Size  Location     Type
 18873 ;;                  1    wreg      void 
 18874 ;; Registers used:
 18875 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 18876 ;; Tracked objects:
 18877 ;;		On entry : 0/0
 18878 ;;		On exit  : 0/0
 18879 ;;		Unchanged: 0/0
 18880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18881 ;;      Params:         0       2       0       0       0       0       0       0       0
 18882 ;;      Locals:         0       1       0       0       0       0       0       0       0
 18883 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18884 ;;      Totals:         0       3       0       0       0       0       0       0       0
 18885 ;;Total ram usage:        3 bytes
 18886 ;; Hardware stack levels used:    1
 18887 ;; Hardware stack levels required when called:    4
 18888 ;; This function calls:
 18889 ;;		Nothing
 18890 ;; This function is called by:
 18891 ;;		_arp_send
 18892 ;; This function uses a non-reentrant model
 18893 ;;
 18894                           
 18895                           	psect	text72
 18896  005582                     __ptext72:
 18897                           	opt stack 0
 18898  005582                     _mac_setToBroadcast:
 18899                           	opt stack 22
 18900                           
 18901                           ;mac.c: 27: for (uint8_t i = 0; i < 6; i++)
 18902                           
 18903                           ;incstack = 0
 18904  005582  0E00               	movlw	0
 18905  005584  0100               	movlb	0	; () banked
 18906  005586  6F62               	movwf	mac_setToBroadcast@i& (0+255),b
 18907  005588                     l8705:
 18908                           
 18909                           ; BSR set to: 0
 18910  005588  0E05               	movlw	5
 18911  00558A  6562               	cpfsgt	mac_setToBroadcast@i& (0+255),b
 18912  00558C  D001               	goto	l379
 18913  00558E  0012               	return	
 18914  005590                     l379:
 18915                           
 18916                           ; BSR set to: 0
 18917                           ;mac.c: 28: mac->address[i] = 0xff;
 18918                           
 18919                           ; BSR set to: 0
 18920  005590  5162               	movf	mac_setToBroadcast@i& (0+255),w,b
 18921  005592  0D01               	mullw	1
 18922  005594  50F3               	movf	prodl,w,c
 18923  005596  2560               	addwf	mac_setToBroadcast@mac& (0+255),w,b
 18924  005598  6ED9               	movwf	fsr2l,c
 18925  00559A  50F4               	movf	prodh,w,c
 18926  00559C  2161               	addwfc	(mac_setToBroadcast@mac+1)& (0+255),w,b
 18927  00559E  6EDA               	movwf	fsr2h,c
 18928  0055A0  0EFF               	movlw	255
 18929  0055A2  6EDF               	movwf	indf2,c
 18930                           
 18931                           ; BSR set to: 0
 18932  0055A4  2B62               	incf	mac_setToBroadcast@i& (0+255),f,b
 18933  0055A6  D7F0               	goto	l8705
 18934  0055A8                     __end_of_mac_setToBroadcast:
 18935                           	opt stack 0
 18936                           tblptru	equ	0xFF8
 18937                           tblptrh	equ	0xFF7
 18938                           tblptrl	equ	0xFF6
 18939                           tablat	equ	0xFF5
 18940                           prodh	equ	0xFF4
 18941                           prodl	equ	0xFF3
 18942                           intcon	equ	0xFF2
 18943                           intcon3	equ	0xFF0
 18944                           indf0	equ	0xFEF
 18945                           postinc0	equ	0xFEE
 18946                           plusw0	equ	0xFEB
 18947                           fsr0h	equ	0xFEA
 18948                           fsr0l	equ	0xFE9
 18949                           wreg	equ	0xFE8
 18950                           indf1	equ	0xFE7
 18951                           postinc1	equ	0xFE6
 18952                           postdec1	equ	0xFE5
 18953                           plusw1	equ	0xFE3
 18954                           fsr1h	equ	0xFE2
 18955                           fsr1l	equ	0xFE1
 18956                           indf2	equ	0xFDF
 18957                           postinc2	equ	0xFDE
 18958                           postdec2	equ	0xFDD
 18959                           plusw2	equ	0xFDB
 18960                           fsr2h	equ	0xFDA
 18961                           fsr2l	equ	0xFD9
 18962                           status	equ	0xFD8
 18963                           
 18964 ;; *************** function _ethernet_txFrameRequest *****************
 18965 ;; Defined at:
 18966 ;;		line 30 in file "src/eth/ethernet.c"
 18967 ;; Parameters:    Size  Location     Type
 18968 ;;  frame           2   66[BANK0 ] PTR struct ethernetFrame
 18969 ;;		 -> arp_send@ethFrame(34), stack(135), 
 18970 ;; Auto vars:     Size  Location     Type
 18971 ;;  err             3   68[BANK0 ] struct error
 18972 ;; Return value:  Size  Location     Type
 18973 ;;                  3   66[BANK0 ] struct error
 18974 ;; Registers used:
 18975 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18976 ;; Tracked objects:
 18977 ;;		On entry : 0/0
 18978 ;;		On exit  : 0/0
 18979 ;;		Unchanged: 0/0
 18980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18981 ;;      Params:         0       2       0       0       0       0       0       0       0
 18982 ;;      Locals:         0       3       0       0       0       0       0       0       0
 18983 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18984 ;;      Totals:         0       5       0       0       0       0       0       0       0
 18985 ;;Total ram usage:        5 bytes
 18986 ;; Hardware stack levels used:    1
 18987 ;; Hardware stack levels required when called:    8
 18988 ;; This function calls:
 18989 ;;		_ethernetController_writeDestinationMACAddress
 18990 ;;		_ethernetController_writeEtherTypeFieldToBuffer
 18991 ;;		_memory_txFrameRequest
 18992 ;; This function is called by:
 18993 ;;		_arp_send
 18994 ;;		_ipv4_txFrameRequest
 18995 ;; This function uses a non-reentrant model
 18996 ;;
 18997                           
 18998                           	psect	text73
 18999  003E0E                     __ptext73:
 19000                           	opt stack 0
 19001  003E0E                     _ethernet_txFrameRequest:
 19002                           	opt stack 21
 19003                           
 19004                           ;ethernet.c: 32: error_t err;
 19005                           ;ethernet.c: 33: err.module = ERROR_MODULE_ETHERNET;
 19006                           
 19007                           ; BSR set to: 0
 19008                           ;incstack = 0
 19009  003E0E  0E02               	movlw	2
 19010  003E10  0100               	movlb	0	; () banked
 19011  003E12  6FA4               	movwf	ethernet_txFrameRequest@err& (0+255),b
 19012                           
 19013                           ;ethernet.c: 34: err.code = (uint16_t)0;
 19014  003E14  0E00               	movlw	0
 19015  003E16  6FA6               	movwf	(ethernet_txFrameRequest@err+2)& (0+255),b
 19016  003E18  0E00               	movlw	0
 19017  003E1A  6FA5               	movwf	(ethernet_txFrameRequest@err+1)& (0+255),b
 19018                           
 19019                           ; BSR set to: 0
 19020                           ;ethernet.c: 35: frame->memory = memory_txFrameRequest(frame->length);
 19021  003E1C  C0A2  FFD9         	movff	ethernet_txFrameRequest@frame,fsr2l
 19022  003E20  C0A3  FFDA         	movff	ethernet_txFrameRequest@frame+1,fsr2h
 19023  003E24  CFDE F084          	movff	postinc2,memory_txFrameRequest@length
 19024  003E28  CFDD F085          	movff	postdec2,memory_txFrameRequest@length+1
 19025  003E2C  ECFF  F002         	call	_memory_txFrameRequest	;wreg free
 19026  003E30  0100               	movlb	0	; () banked
 19027  003E32  EE20 F010          	lfsr	2,16
 19028  003E36  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 19029  003E38  26D9               	addwf	fsr2l,f,c
 19030  003E3A  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 19031  003E3C  22DA               	addwfc	fsr2h,f,c
 19032  003E3E  0E08               	movlw	8
 19033  003E40                     u9651:
 19034  003E40  CFEB FFDB          	movff	plusw0,plusw2
 19035  003E44  06E8               	decf	wreg,f,c
 19036  003E46  E2FC               	bc	u9651
 19037                           
 19038                           ; BSR set to: 0
 19039                           ;ethernet.c: 37: if (frame->memory.fOutOfMemory) {
 19040  003E48  EE20 F017          	lfsr	2,23
 19041  003E4C  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 19042  003E4E  26D9               	addwf	fsr2l,f,c
 19043  003E50  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 19044  003E52  22DA               	addwfc	fsr2h,f,c
 19045  003E54  50DF               	movf	indf2,w,c
 19046  003E56  B4D8               	btfsc	status,2,c
 19047  003E58  D007               	goto	l359
 19048                           
 19049                           ; BSR set to: 0
 19050                           ;ethernet.c: 39: err.module = ERROR_MODULE_MEMORY;
 19051  003E5A  0E00               	movlw	0
 19052  003E5C  6FA4               	movwf	ethernet_txFrameRequest@err& (0+255),b
 19053                           
 19054                           ;ethernet.c: 40: err.code = ERROR_MEMORY_OUT_OF_MEMORY;
 19055  003E5E  0E00               	movlw	0
 19056  003E60  6FA6               	movwf	(ethernet_txFrameRequest@err+2)& (0+255),b
 19057  003E62  0E65               	movlw	101
 19058  003E64  6FA5               	movwf	(ethernet_txFrameRequest@err+1)& (0+255),b
 19059                           
 19060                           ; BSR set to: 0
 19061                           ;ethernet.c: 41: return err;
 19062                           ;	Return value of _ethernet_txFrameRequest is never used
 19063  003E66  0012               	return	
 19064  003E68                     l359:
 19065                           
 19066                           ; BSR set to: 0
 19067                           ;ethernet.c: 42: }
 19068                           ;ethernet.c: 43: if (!frame->memory.fIsAssigned) {
 19069                           
 19070                           ; BSR set to: 0
 19071  003E68  EE20 F016          	lfsr	2,22
 19072  003E6C  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 19073  003E6E  26D9               	addwf	fsr2l,f,c
 19074  003E70  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 19075  003E72  22DA               	addwfc	fsr2h,f,c
 19076  003E74  50DF               	movf	indf2,w,c
 19077  003E76  A4D8               	btfss	status,2,c
 19078  003E78  D007               	goto	l361
 19079                           
 19080                           ; BSR set to: 0
 19081                           ;ethernet.c: 45: err.module = ERROR_MODULE_MEMORY;
 19082  003E7A  0E00               	movlw	0
 19083  003E7C  6FA4               	movwf	ethernet_txFrameRequest@err& (0+255),b
 19084                           
 19085                           ;ethernet.c: 46: err.code = ERROR_MEMORY_UNKNOWN;
 19086  003E7E  0E00               	movlw	0
 19087  003E80  6FA6               	movwf	(ethernet_txFrameRequest@err+2)& (0+255),b
 19088  003E82  0EC7               	movlw	199
 19089  003E84  6FA5               	movwf	(ethernet_txFrameRequest@err+1)& (0+255),b
 19090                           
 19091                           ; BSR set to: 0
 19092                           ;ethernet.c: 47: return err;
 19093                           ;	Return value of _ethernet_txFrameRequest is never used
 19094  003E86  0012               	return	
 19095  003E88                     l361:
 19096                           
 19097                           ; BSR set to: 0
 19098                           ;ethernet.c: 48: }
 19099                           ;ethernet.c: 50: ethernetController_writeDestinationMACAddress(frame->destination, frame
      +                          ->memory);
 19100                           
 19101                           ; BSR set to: 0
 19102  003E88  EE20 F008          	lfsr	2,8
 19103  003E8C  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 19104  003E8E  26D9               	addwf	fsr2l,f,c
 19105  003E90  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 19106  003E92  22DA               	addwfc	fsr2h,f,c
 19107  003E94  EE00  F06F         	lfsr	0,ethernetController_writeDestinationMACAddress@addr
 19108  003E98  0E05               	movlw	5
 19109  003E9A                     u9681:
 19110  003E9A  CFDB FFEB          	movff	plusw2,plusw0
 19111  003E9E  06E8               	decf	wreg,f,c
 19112  003EA0  E2FC               	bc	u9681
 19113  003EA2  EE20 F010          	lfsr	2,16
 19114  003EA6  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 19115  003EA8  26D9               	addwf	fsr2l,f,c
 19116  003EAA  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 19117  003EAC  22DA               	addwfc	fsr2h,f,c
 19118  003EAE  EE00  F075         	lfsr	0,ethernetController_writeDestinationMACAddress@field
 19119  003EB2  0E08               	movlw	8
 19120  003EB4                     u9691:
 19121  003EB4  CFDB FFEB          	movff	plusw2,plusw0
 19122  003EB8  06E8               	decf	wreg,f,c
 19123  003EBA  E2FC               	bc	u9691
 19124  003EBC  EC99  F023         	call	_ethernetController_writeDestinationMACAddress	;wreg free
 19125                           
 19126                           ;ethernet.c: 51: ethernetController_writeEtherTypeFieldToBuffer(frame->ethertype, frame-
      +                          >memory);
 19127  003EC0  0100               	movlb	0	; () banked
 19128  003EC2  EE20 F00E          	lfsr	2,14
 19129  003EC6  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 19130  003EC8  26D9               	addwf	fsr2l,f,c
 19131  003ECA  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 19132  003ECC  22DA               	addwfc	fsr2h,f,c
 19133  003ECE  CFDE F06F          	movff	postinc2,ethernetController_writeEtherTypeFieldToBuffer@ethtype
 19134  003ED2  CFDD F070          	movff	postdec2,ethernetController_writeEtherTypeFieldToBuffer@ethtype+1
 19135  003ED6  EE20 F010          	lfsr	2,16
 19136  003EDA  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 19137  003EDC  26D9               	addwf	fsr2l,f,c
 19138  003EDE  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 19139  003EE0  22DA               	addwfc	fsr2h,f,c
 19140  003EE2  EE00  F071         	lfsr	0,ethernetController_writeEtherTypeFieldToBuffer@field
 19141  003EE6  0E08               	movlw	8
 19142  003EE8                     u9701:
 19143  003EE8  CFDB FFEB          	movff	plusw2,plusw0
 19144  003EEC  06E8               	decf	wreg,f,c
 19145  003EEE  E2FC               	bc	u9701
 19146  003EF0  ECB1  F027         	call	_ethernetController_writeEtherTypeFieldToBuffer	;wreg free
 19147  003EF4  0012               	return	
 19148  003EF6                     __end_of_ethernet_txFrameRequest:
 19149                           	opt stack 0
 19150                           tblptru	equ	0xFF8
 19151                           tblptrh	equ	0xFF7
 19152                           tblptrl	equ	0xFF6
 19153                           tablat	equ	0xFF5
 19154                           prodh	equ	0xFF4
 19155                           prodl	equ	0xFF3
 19156                           intcon	equ	0xFF2
 19157                           intcon3	equ	0xFF0
 19158                           indf0	equ	0xFEF
 19159                           postinc0	equ	0xFEE
 19160                           plusw0	equ	0xFEB
 19161                           fsr0h	equ	0xFEA
 19162                           fsr0l	equ	0xFE9
 19163                           wreg	equ	0xFE8
 19164                           indf1	equ	0xFE7
 19165                           postinc1	equ	0xFE6
 19166                           postdec1	equ	0xFE5
 19167                           plusw1	equ	0xFE3
 19168                           fsr1h	equ	0xFE2
 19169                           fsr1l	equ	0xFE1
 19170                           indf2	equ	0xFDF
 19171                           postinc2	equ	0xFDE
 19172                           postdec2	equ	0xFDD
 19173                           plusw2	equ	0xFDB
 19174                           fsr2h	equ	0xFDA
 19175                           fsr2l	equ	0xFD9
 19176                           status	equ	0xFD8
 19177                           
 19178 ;; *************** function _memory_txFrameRequest *****************
 19179 ;; Defined at:
 19180 ;;		line 133 in file "src/mem/memoryController.c"
 19181 ;; Parameters:    Size  Location     Type
 19182 ;;  length          2   36[BANK0 ] unsigned int 
 19183 ;; Auto vars:     Size  Location     Type
 19184 ;;  i               1   54[BANK0 ] unsigned char 
 19185 ;;  i               1   55[BANK0 ] unsigned char 
 19186 ;;  fNoOverlapMa    1   53[BANK0 ] unsigned char 
 19187 ;;  field           9   56[BANK0 ] struct memoryField
 19188 ;;  freeIndex       1   65[BANK0 ] unsigned char 
 19189 ;; Return value:  Size  Location     Type
 19190 ;;                  9   36[BANK0 ] struct memoryField
 19191 ;; Registers used:
 19192 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19193 ;; Tracked objects:
 19194 ;;		On entry : 0/0
 19195 ;;		On exit  : 0/0
 19196 ;;		Unchanged: 0/0
 19197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19198 ;;      Params:         0       9       0       0       0       0       0       0       0
 19199 ;;      Locals:         0      15       0       0       0       0       0       0       0
 19200 ;;      Temps:          0       6       0       0       0       0       0       0       0
 19201 ;;      Totals:         0      30       0       0       0       0       0       0       0
 19202 ;;Total ram usage:       30 bytes
 19203 ;; Hardware stack levels used:    1
 19204 ;; Hardware stack levels required when called:    6
 19205 ;; This function calls:
 19206 ;;		___wmul
 19207 ;;		_checkForOverlap
 19208 ;;		_entireMemoryEmpty
 19209 ;;		_entireMemoryFull
 19210 ;; This function is called by:
 19211 ;;		_ethernet_txFrameRequest
 19212 ;; This function uses a non-reentrant model
 19213 ;;
 19214                           
 19215                           	psect	text74
 19216  0005FE                     __ptext74:
 19217                           	opt stack 0
 19218  0005FE                     _memory_txFrameRequest:
 19219                           	opt stack 22
 19220                           
 19221                           ;memoryController.c: 134: memoryField_t field;
 19222                           ;memoryController.c: 135: uint8_t freeIndex = 0;
 19223                           
 19224                           ;incstack = 0
 19225  0005FE  0E00               	movlw	0
 19226  000600  0100               	movlb	0	; () banked
 19227  000602  6FA1               	movwf	memory_txFrameRequest@freeIndex& (0+255),b
 19228                           
 19229                           ; BSR set to: 0
 19230                           ;memoryController.c: 137: if (length == 0) {
 19231  000604  5184               	movf	memory_txFrameRequest@length& (0+255),w,b
 19232  000606  1185               	iorwf	(memory_txFrameRequest@length+1)& (0+255),w,b
 19233  000608  A4D8               	btfss	status,2,c
 19234  00060A  D00C               	goto	l462
 19235                           
 19236                           ; BSR set to: 0
 19237                           ;memoryController.c: 138: field.fOutOfMemory = 1;
 19238  00060C  0E01               	movlw	1
 19239  00060E  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 19240                           
 19241                           ; BSR set to: 0
 19242                           ;memoryController.c: 139: return field;
 19243  000610  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 19244  000614  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 19245  000618  0E08               	movlw	8
 19246  00061A                     u9201:
 19247  00061A  CFDB FFEB          	movff	plusw2,plusw0
 19248  00061E  06E8               	decf	wreg,f,c
 19249  000620  E2FC               	bc	u9201
 19250                           
 19251                           ; BSR set to: 0
 19252  000622  0012               	return	
 19253  000624                     l462:
 19254                           
 19255                           ; BSR set to: 0
 19256                           ;memoryController.c: 140: }
 19257                           ;memoryController.c: 142: if (entireMemoryFull()) {
 19258                           
 19259                           ; BSR set to: 0
 19260  000624  EC29  F029         	call	_entireMemoryFull	;wreg free
 19261  000628  A0D8               	btfss	status,0,c
 19262  00062A  D00D               	goto	l464
 19263                           
 19264                           ;memoryController.c: 143: field.fOutOfMemory = 1;
 19265  00062C  0E01               	movlw	1
 19266  00062E  0100               	movlb	0	; () banked
 19267  000630  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 19268                           
 19269                           ; BSR set to: 0
 19270                           ;memoryController.c: 144: return field;
 19271  000632  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 19272  000636  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 19273  00063A  0E08               	movlw	8
 19274  00063C                     u9221:
 19275  00063C  CFDB FFEB          	movff	plusw2,plusw0
 19276  000640  06E8               	decf	wreg,f,c
 19277  000642  E2FC               	bc	u9221
 19278                           
 19279                           ; BSR set to: 0
 19280  000644  0012               	return	
 19281  000646                     l464:
 19282                           
 19283                           ;memoryController.c: 145: }
 19284                           ;memoryController.c: 146: if (entireMemoryEmpty()) {
 19285                           
 19286                           ; BSR set to: 0
 19287  000646  EC45  F029         	call	_entireMemoryEmpty	;wreg free
 19288  00064A  A0D8               	btfss	status,0,c
 19289  00064C  D238               	goto	l489
 19290                           
 19291                           ;memoryController.c: 148: if ((0x0000 + length) > 0x3000 - 1) {
 19292  00064E  0E30               	movlw	48
 19293  000650  0100               	movlb	0	; () banked
 19294  000652  5D85               	subwf	(memory_txFrameRequest@length+1)& (0+255),w,b
 19295  000654  A0D8               	btfss	status,0,c
 19296  000656  D00C               	goto	l466
 19297                           
 19298                           ; BSR set to: 0
 19299                           ;memoryController.c: 149: field.fOutOfMemory = 1;
 19300  000658  0E01               	movlw	1
 19301  00065A  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 19302                           
 19303                           ; BSR set to: 0
 19304                           ;memoryController.c: 150: return field;
 19305  00065C  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 19306  000660  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 19307  000664  0E08               	movlw	8
 19308  000666                     u9251:
 19309  000666  CFDB FFEB          	movff	plusw2,plusw0
 19310  00066A  06E8               	decf	wreg,f,c
 19311  00066C  E2FC               	bc	u9251
 19312                           
 19313                           ; BSR set to: 0
 19314  00066E  0012               	return	
 19315  000670                     l466:
 19316                           
 19317                           ; BSR set to: 0
 19318                           ;memoryController.c: 152: occupiedMemory[0].start = 0x0000;
 19319                           
 19320                           ; BSR set to: 0
 19321  000670  0E00               	movlw	0
 19322  000672  0102               	movlb	2	; () banked
 19323  000674  6F01               	movwf	(_occupiedMemory+1)& (0+255),b
 19324  000676  0E00               	movlw	0
 19325  000678  6F00               	movwf	_occupiedMemory& (0+255),b
 19326                           
 19327                           ; BSR set to: 2
 19328                           ;memoryController.c: 153: occupiedMemory[0].end = 0x0000 + length;
 19329  00067A  C084  F202         	movff	memory_txFrameRequest@length,_occupiedMemory+2
 19330  00067E  C085  F203         	movff	memory_txFrameRequest@length+1,_occupiedMemory+3
 19331                           
 19332                           ; BSR set to: 2
 19333                           ;memoryController.c: 154: occupiedMemory[0].length = length;
 19334  000682  C084  F204         	movff	memory_txFrameRequest@length,_occupiedMemory+4
 19335  000686  C085  F205         	movff	memory_txFrameRequest@length+1,_occupiedMemory+5
 19336                           
 19337                           ;memoryController.c: 155: occupiedMemory[0].fIsAssigned = 1;
 19338  00068A  0E01               	movlw	1
 19339  00068C  6F06               	movwf	(_occupiedMemory+6)& (0+255),b
 19340                           
 19341                           ;memoryController.c: 156: occupiedMemory[0].index = 0;
 19342  00068E  0E00               	movlw	0
 19343  000690  6F08               	movwf	(_occupiedMemory+8)& (0+255),b
 19344                           
 19345                           ; BSR set to: 2
 19346                           ;memoryController.c: 157: return occupiedMemory[0];
 19347  000692  EE22  F000         	lfsr	2,_occupiedMemory
 19348  000696  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 19349  00069A  0E08               	movlw	8
 19350  00069C                     u9261:
 19351  00069C  CFDB FFEB          	movff	plusw2,plusw0
 19352  0006A0  06E8               	decf	wreg,f,c
 19353  0006A2  E2FC               	bc	u9261
 19354                           
 19355                           ; BSR set to: 2
 19356  0006A4  0012               	return	
 19357  0006A6                     
 19358                           ;memoryController.c: 163: if (!occupiedMemory[freeIndex].fIsAssigned) {
 19359                           
 19360                           ; BSR set to: 2
 19361  0006A6  0100               	movlb	0	; () banked
 19362  0006A8  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19363  0006AA  0D09               	mullw	9
 19364  0006AC  0E06               	movlw	6
 19365  0006AE  26F3               	addwf	prodl,f,c
 19366  0006B0  0E00               	movlw	0
 19367  0006B2  22F4               	addwfc	prodh,f,c
 19368  0006B4  0E00               	movlw	low _occupiedMemory
 19369  0006B6  24F3               	addwf	prodl,w,c
 19370  0006B8  6ED9               	movwf	fsr2l,c
 19371  0006BA  0E02               	movlw	high _occupiedMemory
 19372  0006BC  20F4               	addwfc	prodh,w,c
 19373  0006BE  6EDA               	movwf	fsr2h,c
 19374  0006C0  50DF               	movf	indf2,w,c
 19375  0006C2  A4D8               	btfss	status,2,c
 19376  0006C4  D1EB               	goto	l488
 19377                           
 19378                           ; BSR set to: 0
 19379                           ;memoryController.c: 167: occupiedMemory[freeIndex].start = occupiedMemory[(freeIndex ==
      +                           0) ? 8 - 1 : freeIndex - 1].end + 1;
 19380  0006C6  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19381  0006C8  B4D8               	btfsc	status,2,c
 19382  0006CA  D007               	goto	l472
 19383                           
 19384                           ; BSR set to: 0
 19385  0006CC  0EFF               	movlw	255
 19386  0006CE  25A1               	addwf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19387  0006D0  6F93               	movwf	_memory_txFrameRequest$1174& (0+255),b
 19388  0006D2  6B94               	clrf	(_memory_txFrameRequest$1174+1)& (0+255),b
 19389  0006D4  0EFF               	movlw	255
 19390  0006D6  2394               	addwfc	(_memory_txFrameRequest$1174+1)& (0+255),f,b
 19391  0006D8  D004               	goto	l474
 19392  0006DA                     l472:
 19393                           
 19394                           ; BSR set to: 0
 19395                           
 19396                           ; BSR set to: 0
 19397  0006DA  0E00               	movlw	0
 19398  0006DC  6F94               	movwf	(_memory_txFrameRequest$1174+1)& (0+255),b
 19399  0006DE  0E07               	movlw	7
 19400  0006E0  6F93               	movwf	_memory_txFrameRequest$1174& (0+255),b
 19401  0006E2                     l474:
 19402                           
 19403                           ; BSR set to: 0
 19404                           
 19405                           ; BSR set to: 0
 19406  0006E2  C093  F060         	movff	_memory_txFrameRequest$1174,___wmul@multiplier
 19407  0006E6  C094  F061         	movff	_memory_txFrameRequest$1174+1,___wmul@multiplier+1
 19408  0006EA  0E00               	movlw	0
 19409  0006EC  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19410  0006EE  0E09               	movlw	9
 19411  0006F0  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19412  0006F2  EC5F  F02A         	call	___wmul	;wreg free
 19413  0006F6  0E02               	movlw	2
 19414  0006F8  0100               	movlb	0	; () banked
 19415  0006FA  2760               	addwf	?___wmul& (0+255),f,b
 19416  0006FC  0E00               	movlw	0
 19417  0006FE  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 19418  000700  0E00               	movlw	low _occupiedMemory
 19419  000702  2560               	addwf	?___wmul& (0+255),w,b
 19420  000704  6ED9               	movwf	fsr2l,c
 19421  000706  0E02               	movlw	high _occupiedMemory
 19422  000708  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 19423  00070A  6EDA               	movwf	fsr2h,c
 19424  00070C  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 19425  000710  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 19426  000714  0E01               	movlw	1
 19427  000716  278D               	addwf	??_memory_txFrameRequest& (0+255),f,b
 19428  000718  0E00               	movlw	0
 19429  00071A  238E               	addwfc	(??_memory_txFrameRequest+1)& (0+255),f,b
 19430  00071C  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19431  00071E  0D09               	mullw	9
 19432  000720  0E00               	movlw	low _occupiedMemory
 19433  000722  24F3               	addwf	prodl,w,c
 19434  000724  6ED9               	movwf	fsr2l,c
 19435  000726  0E02               	movlw	high _occupiedMemory
 19436  000728  20F4               	addwfc	prodh,w,c
 19437  00072A  6EDA               	movwf	fsr2h,c
 19438  00072C  C08D  FFDE         	movff	??_memory_txFrameRequest,postinc2
 19439  000730  C08E  FFDD         	movff	??_memory_txFrameRequest+1,postdec2
 19440                           
 19441                           ; BSR set to: 0
 19442                           ;memoryController.c: 168: if (occupiedMemory[freeIndex].start + length > 0x3000) {
 19443  000734  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19444  000736  0D09               	mullw	9
 19445  000738  0E00               	movlw	low _occupiedMemory
 19446  00073A  24F3               	addwf	prodl,w,c
 19447  00073C  6ED9               	movwf	fsr2l,c
 19448  00073E  0E02               	movlw	high _occupiedMemory
 19449  000740  20F4               	addwfc	prodh,w,c
 19450  000742  6EDA               	movwf	fsr2h,c
 19451  000744  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 19452  000748  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 19453  00074C  5184               	movf	memory_txFrameRequest@length& (0+255),w,b
 19454  00074E  278D               	addwf	??_memory_txFrameRequest& (0+255),f,b
 19455  000750  5185               	movf	(memory_txFrameRequest@length+1)& (0+255),w,b
 19456  000752  238E               	addwfc	(??_memory_txFrameRequest+1)& (0+255),f,b
 19457  000754  058D               	decf	??_memory_txFrameRequest& (0+255),w,b
 19458  000756  0E30               	movlw	48
 19459  000758  598E               	subwfb	(??_memory_txFrameRequest+1)& (0+255),w,b
 19460  00075A  A0D8               	btfss	status,0,c
 19461  00075C  D0CF               	goto	l476
 19462                           
 19463                           ; BSR set to: 0
 19464                           ;memoryController.c: 169: if (freeIndex == 8 - 1 && !occupiedMemory[0].fIsAssigned) {
 19465  00075E  0E07               	movlw	7
 19466  000760  19A1               	xorwf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19467  000762  A4D8               	btfss	status,2,c
 19468  000764  D0CB               	goto	l476
 19469                           
 19470                           ; BSR set to: 0
 19471  000766  0102               	movlb	2	; () banked
 19472  000768  5106               	movf	(_occupiedMemory+6)& (0+255),w,b
 19473  00076A  A4D8               	btfss	status,2,c
 19474  00076C  D0C7               	goto	l476
 19475                           
 19476                           ; BSR set to: 2
 19477                           ;memoryController.c: 170: occupiedMemory[freeIndex].length = length;
 19478  00076E  0100               	movlb	0	; () banked
 19479  000770  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19480  000772  0D09               	mullw	9
 19481  000774  0E04               	movlw	4
 19482  000776  26F3               	addwf	prodl,f,c
 19483  000778  0E00               	movlw	0
 19484  00077A  22F4               	addwfc	prodh,f,c
 19485  00077C  0E00               	movlw	low _occupiedMemory
 19486  00077E  24F3               	addwf	prodl,w,c
 19487  000780  6ED9               	movwf	fsr2l,c
 19488  000782  0E02               	movlw	high _occupiedMemory
 19489  000784  20F4               	addwfc	prodh,w,c
 19490  000786  6EDA               	movwf	fsr2h,c
 19491  000788  C084  FFDE         	movff	memory_txFrameRequest@length,postinc2
 19492  00078C  C085  FFDD         	movff	memory_txFrameRequest@length+1,postdec2
 19493                           
 19494                           ;memoryController.c: 171: occupiedMemory[freeIndex].end = occupiedMemory[freeIndex].leng
      +                          th - ((0x3000 - 1) - occupiedMemory[freeIndex].start);
 19495  000790  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19496  000792  0D09               	mullw	9
 19497  000794  0E04               	movlw	4
 19498  000796  26F3               	addwf	prodl,f,c
 19499  000798  0E00               	movlw	0
 19500  00079A  22F4               	addwfc	prodh,f,c
 19501  00079C  0E00               	movlw	low _occupiedMemory
 19502  00079E  24F3               	addwf	prodl,w,c
 19503  0007A0  6ED9               	movwf	fsr2l,c
 19504  0007A2  0E02               	movlw	high _occupiedMemory
 19505  0007A4  20F4               	addwfc	prodh,w,c
 19506  0007A6  6EDA               	movwf	fsr2h,c
 19507  0007A8  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 19508  0007AC  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 19509  0007B0  0EFF               	movlw	255
 19510  0007B2  6F8F               	movwf	(??_memory_txFrameRequest+2)& (0+255),b
 19511  0007B4  0E2F               	movlw	47
 19512  0007B6  6F90               	movwf	(??_memory_txFrameRequest+3)& (0+255),b
 19513  0007B8  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19514  0007BA  0D09               	mullw	9
 19515  0007BC  0E00               	movlw	low _occupiedMemory
 19516  0007BE  24F3               	addwf	prodl,w,c
 19517  0007C0  6ED9               	movwf	fsr2l,c
 19518  0007C2  0E02               	movlw	high _occupiedMemory
 19519  0007C4  20F4               	addwfc	prodh,w,c
 19520  0007C6  6EDA               	movwf	fsr2h,c
 19521  0007C8  CFDE F091          	movff	postinc2,??_memory_txFrameRequest+4
 19522  0007CC  CFDD F092          	movff	postdec2,??_memory_txFrameRequest+5
 19523  0007D0  1F91               	comf	(??_memory_txFrameRequest+4)& (0+255),f,b
 19524  0007D2  1F92               	comf	(??_memory_txFrameRequest+5)& (0+255),f,b
 19525  0007D4  4B91               	infsnz	(??_memory_txFrameRequest+4)& (0+255),f,b
 19526  0007D6  2B92               	incf	(??_memory_txFrameRequest+5)& (0+255),f,b
 19527  0007D8  518F               	movf	(??_memory_txFrameRequest+2)& (0+255),w,b
 19528  0007DA  2791               	addwf	(??_memory_txFrameRequest+4)& (0+255),f,b
 19529  0007DC  5190               	movf	(??_memory_txFrameRequest+3)& (0+255),w,b
 19530  0007DE  2392               	addwfc	(??_memory_txFrameRequest+5)& (0+255),f,b
 19531  0007E0  1F91               	comf	(??_memory_txFrameRequest+4)& (0+255),f,b
 19532  0007E2  1F92               	comf	(??_memory_txFrameRequest+5)& (0+255),f,b
 19533  0007E4  4B91               	infsnz	(??_memory_txFrameRequest+4)& (0+255),f,b
 19534  0007E6  2B92               	incf	(??_memory_txFrameRequest+5)& (0+255),f,b
 19535  0007E8  518D               	movf	??_memory_txFrameRequest& (0+255),w,b
 19536  0007EA  2791               	addwf	(??_memory_txFrameRequest+4)& (0+255),f,b
 19537  0007EC  518E               	movf	(??_memory_txFrameRequest+1)& (0+255),w,b
 19538  0007EE  2392               	addwfc	(??_memory_txFrameRequest+5)& (0+255),f,b
 19539  0007F0  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19540  0007F2  0D09               	mullw	9
 19541  0007F4  0E02               	movlw	2
 19542  0007F6  26F3               	addwf	prodl,f,c
 19543  0007F8  0E00               	movlw	0
 19544  0007FA  22F4               	addwfc	prodh,f,c
 19545  0007FC  0E00               	movlw	low _occupiedMemory
 19546  0007FE  24F3               	addwf	prodl,w,c
 19547  000800  6ED9               	movwf	fsr2l,c
 19548  000802  0E02               	movlw	high _occupiedMemory
 19549  000804  20F4               	addwfc	prodh,w,c
 19550  000806  6EDA               	movwf	fsr2h,c
 19551  000808  C091  FFDE         	movff	??_memory_txFrameRequest+4,postinc2
 19552  00080C  C092  FFDD         	movff	??_memory_txFrameRequest+5,postdec2
 19553                           
 19554                           ; BSR set to: 0
 19555                           ;memoryController.c: 172: for (uint8_t i = 0; i < 8; i++) {
 19556  000810  0E00               	movlw	0
 19557  000812  6F96               	movwf	memory_txFrameRequest@i& (0+255),b
 19558  000814                     l8503:
 19559                           
 19560                           ; BSR set to: 0
 19561  000814  0E07               	movlw	7
 19562  000816  6596               	cpfsgt	memory_txFrameRequest@i& (0+255),b
 19563  000818  D001               	goto	l477
 19564  00081A  D044               	goto	u9390
 19565  00081C                     l477:
 19566                           
 19567                           ; BSR set to: 0
 19568                           ;memoryController.c: 173: if (i == freeIndex)
 19569                           
 19570                           ; BSR set to: 0
 19571  00081C  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19572  00081E  1996               	xorwf	memory_txFrameRequest@i& (0+255),w,b
 19573  000820  B4D8               	btfsc	status,2,c
 19574  000822  D03E               	goto	l481
 19575                           
 19576                           ; BSR set to: 0
 19577                           ;memoryController.c: 175: if (checkForOverlap(occupiedMemory[freeIndex], occupiedMemory[
      +                          i]) && occupiedMemory[i].fIsAssigned) {
 19578                           
 19579                           ; BSR set to: 0
 19580                           
 19581                           ; BSR set to: 0
 19582                           ;memoryController.c: 174: continue;
 19583  000824  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19584  000826  0D09               	mullw	9
 19585  000828  0E00               	movlw	low _occupiedMemory
 19586  00082A  24F3               	addwf	prodl,w,c
 19587  00082C  6ED9               	movwf	fsr2l,c
 19588  00082E  0E02               	movlw	high _occupiedMemory
 19589  000830  20F4               	addwfc	prodh,w,c
 19590  000832  6EDA               	movwf	fsr2h,c
 19591  000834  EE00  F072         	lfsr	0,checkForOverlap@a
 19592  000838  0E08               	movlw	8
 19593  00083A                     u9341:
 19594  00083A  CFDB FFEB          	movff	plusw2,plusw0
 19595  00083E  06E8               	decf	wreg,f,c
 19596  000840  E2FC               	bc	u9341
 19597  000842  5196               	movf	memory_txFrameRequest@i& (0+255),w,b
 19598  000844  0D09               	mullw	9
 19599  000846  0E00               	movlw	low _occupiedMemory
 19600  000848  24F3               	addwf	prodl,w,c
 19601  00084A  6ED9               	movwf	fsr2l,c
 19602  00084C  0E02               	movlw	high _occupiedMemory
 19603  00084E  20F4               	addwfc	prodh,w,c
 19604  000850  6EDA               	movwf	fsr2h,c
 19605  000852  EE00  F07B         	lfsr	0,checkForOverlap@b
 19606  000856  0E08               	movlw	8
 19607  000858                     u9351:
 19608  000858  CFDB FFEB          	movff	plusw2,plusw0
 19609  00085C  06E8               	decf	wreg,f,c
 19610  00085E  E2FC               	bc	u9351
 19611  000860  EC79  F01C         	call	_checkForOverlap	;wreg free
 19612  000864  0100               	movlb	0	; () banked
 19613  000866  A0D8               	btfss	status,0,c
 19614  000868  D01B               	goto	l481
 19615                           
 19616                           ; BSR set to: 0
 19617  00086A  5196               	movf	memory_txFrameRequest@i& (0+255),w,b
 19618  00086C  0D09               	mullw	9
 19619  00086E  0E06               	movlw	6
 19620  000870  26F3               	addwf	prodl,f,c
 19621  000872  0E00               	movlw	0
 19622  000874  22F4               	addwfc	prodh,f,c
 19623  000876  0E00               	movlw	low _occupiedMemory
 19624  000878  24F3               	addwf	prodl,w,c
 19625  00087A  6ED9               	movwf	fsr2l,c
 19626  00087C  0E02               	movlw	high _occupiedMemory
 19627  00087E  20F4               	addwfc	prodh,w,c
 19628  000880  6EDA               	movwf	fsr2h,c
 19629  000882  50DF               	movf	indf2,w,c
 19630  000884  B4D8               	btfsc	status,2,c
 19631  000886  D00C               	goto	l481
 19632                           
 19633                           ; BSR set to: 0
 19634                           ;memoryController.c: 177: field.fOutOfMemory = 1;
 19635  000888  0E01               	movlw	1
 19636  00088A  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 19637                           
 19638                           ; BSR set to: 0
 19639                           ;memoryController.c: 178: return field;
 19640  00088C  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 19641  000890  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 19642  000894  0E08               	movlw	8
 19643  000896                     u9381:
 19644  000896  CFDB FFEB          	movff	plusw2,plusw0
 19645  00089A  06E8               	decf	wreg,f,c
 19646  00089C  E2FC               	bc	u9381
 19647                           
 19648                           ; BSR set to: 0
 19649  00089E  0012               	return	
 19650  0008A0                     l481:
 19651                           
 19652                           ; BSR set to: 0
 19653                           
 19654                           ; BSR set to: 0
 19655                           
 19656                           ; BSR set to: 0
 19657  0008A0  2B96               	incf	memory_txFrameRequest@i& (0+255),f,b
 19658  0008A2  D7B8               	goto	l8503
 19659  0008A4                     u9390:
 19660                           
 19661                           ; BSR set to: 0
 19662                           ;memoryController.c: 179: }
 19663                           ;memoryController.c: 180: }
 19664                           ;memoryController.c: 181: occupiedMemory[freeIndex].fIsAssigned = 1;
 19665                           
 19666                           ; BSR set to: 0
 19667  0008A4  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19668  0008A6  0D09               	mullw	9
 19669  0008A8  0E06               	movlw	6
 19670  0008AA  26F3               	addwf	prodl,f,c
 19671  0008AC  0E00               	movlw	0
 19672  0008AE  22F4               	addwfc	prodh,f,c
 19673  0008B0  0E00               	movlw	low _occupiedMemory
 19674  0008B2  24F3               	addwf	prodl,w,c
 19675  0008B4  6ED9               	movwf	fsr2l,c
 19676  0008B6  0E02               	movlw	high _occupiedMemory
 19677  0008B8  20F4               	addwfc	prodh,w,c
 19678  0008BA  6EDA               	movwf	fsr2h,c
 19679  0008BC  0E01               	movlw	1
 19680  0008BE  6EDF               	movwf	indf2,c
 19681                           
 19682                           ;memoryController.c: 182: occupiedMemory[freeIndex].index = freeIndex;
 19683  0008C0  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19684  0008C2  0D09               	mullw	9
 19685  0008C4  0E08               	movlw	8
 19686  0008C6  26F3               	addwf	prodl,f,c
 19687  0008C8  0E00               	movlw	0
 19688  0008CA  22F4               	addwfc	prodh,f,c
 19689  0008CC  0E00               	movlw	low _occupiedMemory
 19690  0008CE  24F3               	addwf	prodl,w,c
 19691  0008D0  6ED9               	movwf	fsr2l,c
 19692  0008D2  0E02               	movlw	high _occupiedMemory
 19693  0008D4  20F4               	addwfc	prodh,w,c
 19694  0008D6  6EDA               	movwf	fsr2h,c
 19695  0008D8  C0A1  FFDF         	movff	memory_txFrameRequest@freeIndex,indf2
 19696                           
 19697                           ; BSR set to: 0
 19698                           ;memoryController.c: 183: return occupiedMemory[freeIndex];
 19699  0008DC  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19700  0008DE  0D09               	mullw	9
 19701  0008E0  0E00               	movlw	low _occupiedMemory
 19702  0008E2  24F3               	addwf	prodl,w,c
 19703  0008E4  6ED9               	movwf	fsr2l,c
 19704  0008E6  0E02               	movlw	high _occupiedMemory
 19705  0008E8  20F4               	addwfc	prodh,w,c
 19706  0008EA  6EDA               	movwf	fsr2h,c
 19707  0008EC  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 19708  0008F0  0E08               	movlw	8
 19709  0008F2                     u9401:
 19710  0008F2  CFDB FFEB          	movff	plusw2,plusw0
 19711  0008F6  06E8               	decf	wreg,f,c
 19712  0008F8  E2FC               	bc	u9401
 19713                           
 19714                           ; BSR set to: 0
 19715  0008FA  0012               	return	
 19716  0008FC                     l476:
 19717                           
 19718                           ;memoryController.c: 184: }
 19719                           ;memoryController.c: 185: }
 19720                           ;memoryController.c: 187: uint8_t fNoOverlapMarker = 1;
 19721                           
 19722                           ; BSR set to: 0
 19723                           
 19724                           ; BSR set to: 0
 19725  0008FC  0E01               	movlw	1
 19726  0008FE  0100               	movlb	0	; () banked
 19727  000900  6F95               	movwf	memory_txFrameRequest@fNoOverlapMarker& (0+255),b
 19728                           
 19729                           ; BSR set to: 0
 19730                           ;memoryController.c: 188: uint8_t i;
 19731                           ;memoryController.c: 189: occupiedMemory[freeIndex].end = occupiedMemory[freeIndex].star
      +                          t + length;
 19732  000902  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19733  000904  0D09               	mullw	9
 19734  000906  0E00               	movlw	low _occupiedMemory
 19735  000908  24F3               	addwf	prodl,w,c
 19736  00090A  6ED9               	movwf	fsr2l,c
 19737  00090C  0E02               	movlw	high _occupiedMemory
 19738  00090E  20F4               	addwfc	prodh,w,c
 19739  000910  6EDA               	movwf	fsr2h,c
 19740  000912  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 19741  000916  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 19742  00091A  5184               	movf	memory_txFrameRequest@length& (0+255),w,b
 19743  00091C  278D               	addwf	??_memory_txFrameRequest& (0+255),f,b
 19744  00091E  5185               	movf	(memory_txFrameRequest@length+1)& (0+255),w,b
 19745  000920  238E               	addwfc	(??_memory_txFrameRequest+1)& (0+255),f,b
 19746  000922  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19747  000924  0D09               	mullw	9
 19748  000926  0E02               	movlw	2
 19749  000928  26F3               	addwf	prodl,f,c
 19750  00092A  0E00               	movlw	0
 19751  00092C  22F4               	addwfc	prodh,f,c
 19752  00092E  0E00               	movlw	low _occupiedMemory
 19753  000930  24F3               	addwf	prodl,w,c
 19754  000932  6ED9               	movwf	fsr2l,c
 19755  000934  0E02               	movlw	high _occupiedMemory
 19756  000936  20F4               	addwfc	prodh,w,c
 19757  000938  6EDA               	movwf	fsr2h,c
 19758  00093A  C08D  FFDE         	movff	??_memory_txFrameRequest,postinc2
 19759  00093E  C08E  FFDD         	movff	??_memory_txFrameRequest+1,postdec2
 19760                           
 19761                           ; BSR set to: 0
 19762                           ;memoryController.c: 190: for (i = 0; i < 8; i++) {
 19763  000942  0E00               	movlw	0
 19764  000944  6F97               	movwf	memory_txFrameRequest@i_1178& (0+255),b
 19765  000946                     l8537:
 19766                           
 19767                           ; BSR set to: 0
 19768  000946  0E07               	movlw	7
 19769  000948  6597               	cpfsgt	memory_txFrameRequest@i_1178& (0+255),b
 19770  00094A  D001               	goto	l482
 19771  00094C  D03A               	goto	u9470
 19772  00094E                     l482:
 19773                           
 19774                           ; BSR set to: 0
 19775                           ;memoryController.c: 191: if (i == freeIndex)
 19776                           
 19777                           ; BSR set to: 0
 19778  00094E  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19779  000950  1997               	xorwf	memory_txFrameRequest@i_1178& (0+255),w,b
 19780  000952  B4D8               	btfsc	status,2,c
 19781  000954  D034               	goto	l487
 19782                           
 19783                           ; BSR set to: 0
 19784                           ;memoryController.c: 193: if (!occupiedMemory[i].fIsAssigned) {
 19785                           
 19786                           ; BSR set to: 0
 19787                           
 19788                           ; BSR set to: 0
 19789                           ;memoryController.c: 192: continue;
 19790  000956  5197               	movf	memory_txFrameRequest@i_1178& (0+255),w,b
 19791  000958  0D09               	mullw	9
 19792  00095A  0E06               	movlw	6
 19793  00095C  26F3               	addwf	prodl,f,c
 19794  00095E  0E00               	movlw	0
 19795  000960  22F4               	addwfc	prodh,f,c
 19796  000962  0E00               	movlw	low _occupiedMemory
 19797  000964  24F3               	addwf	prodl,w,c
 19798  000966  6ED9               	movwf	fsr2l,c
 19799  000968  0E02               	movlw	high _occupiedMemory
 19800  00096A  20F4               	addwfc	prodh,w,c
 19801  00096C  6EDA               	movwf	fsr2h,c
 19802  00096E  50DF               	movf	indf2,w,c
 19803  000970  B4D8               	btfsc	status,2,c
 19804  000972  D025               	goto	l487
 19805                           
 19806                           ; BSR set to: 0
 19807                           ;memoryController.c: 196: }
 19808                           ;memoryController.c: 198: if (checkForOverlap(occupiedMemory[freeIndex], occupiedMemory[
      +                          i]))
 19809                           
 19810                           ; BSR set to: 0
 19811                           
 19812                           ; BSR set to: 0
 19813                           ;memoryController.c: 194: continue;
 19814  000974  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19815  000976  0D09               	mullw	9
 19816  000978  0E00               	movlw	low _occupiedMemory
 19817  00097A  24F3               	addwf	prodl,w,c
 19818  00097C  6ED9               	movwf	fsr2l,c
 19819  00097E  0E02               	movlw	high _occupiedMemory
 19820  000980  20F4               	addwfc	prodh,w,c
 19821  000982  6EDA               	movwf	fsr2h,c
 19822  000984  EE00  F072         	lfsr	0,checkForOverlap@a
 19823  000988  0E08               	movlw	8
 19824  00098A                     u9441:
 19825  00098A  CFDB FFEB          	movff	plusw2,plusw0
 19826  00098E  06E8               	decf	wreg,f,c
 19827  000990  E2FC               	bc	u9441
 19828  000992  5197               	movf	memory_txFrameRequest@i_1178& (0+255),w,b
 19829  000994  0D09               	mullw	9
 19830  000996  0E00               	movlw	low _occupiedMemory
 19831  000998  24F3               	addwf	prodl,w,c
 19832  00099A  6ED9               	movwf	fsr2l,c
 19833  00099C  0E02               	movlw	high _occupiedMemory
 19834  00099E  20F4               	addwfc	prodh,w,c
 19835  0009A0  6EDA               	movwf	fsr2h,c
 19836  0009A2  EE00  F07B         	lfsr	0,checkForOverlap@b
 19837  0009A6  0E08               	movlw	8
 19838  0009A8                     u9451:
 19839  0009A8  CFDB FFEB          	movff	plusw2,plusw0
 19840  0009AC  06E8               	decf	wreg,f,c
 19841  0009AE  E2FC               	bc	u9451
 19842  0009B0  EC79  F01C         	call	_checkForOverlap	;wreg free
 19843  0009B4  0100               	movlb	0	; () banked
 19844  0009B6  A0D8               	btfss	status,0,c
 19845  0009B8  D002               	goto	l487
 19846                           
 19847                           ; BSR set to: 0
 19848                           ;memoryController.c: 199: fNoOverlapMarker = 0;
 19849  0009BA  0E00               	movlw	0
 19850  0009BC  6F95               	movwf	memory_txFrameRequest@fNoOverlapMarker& (0+255),b
 19851  0009BE                     l487:
 19852                           
 19853                           ; BSR set to: 0
 19854                           
 19855                           ; BSR set to: 0
 19856                           
 19857                           ; BSR set to: 0
 19858  0009BE  2B97               	incf	memory_txFrameRequest@i_1178& (0+255),f,b
 19859  0009C0  D7C2               	goto	l8537
 19860  0009C2                     u9470:
 19861                           
 19862                           ; BSR set to: 0
 19863                           ;memoryController.c: 201: }
 19864                           ;memoryController.c: 202: if (fNoOverlapMarker) {
 19865                           
 19866                           ; BSR set to: 0
 19867  0009C2  5195               	movf	memory_txFrameRequest@fNoOverlapMarker& (0+255),w,b
 19868  0009C4  B4D8               	btfsc	status,2,c
 19869  0009C6  D06A               	goto	l488
 19870                           
 19871                           ; BSR set to: 0
 19872                           ;memoryController.c: 203: occupiedMemory[freeIndex].fIsAssigned = 1;
 19873  0009C8  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19874  0009CA  0D09               	mullw	9
 19875  0009CC  0E06               	movlw	6
 19876  0009CE  26F3               	addwf	prodl,f,c
 19877  0009D0  0E00               	movlw	0
 19878  0009D2  22F4               	addwfc	prodh,f,c
 19879  0009D4  0E00               	movlw	low _occupiedMemory
 19880  0009D6  24F3               	addwf	prodl,w,c
 19881  0009D8  6ED9               	movwf	fsr2l,c
 19882  0009DA  0E02               	movlw	high _occupiedMemory
 19883  0009DC  20F4               	addwfc	prodh,w,c
 19884  0009DE  6EDA               	movwf	fsr2h,c
 19885  0009E0  0E01               	movlw	1
 19886  0009E2  6EDF               	movwf	indf2,c
 19887                           
 19888                           ;memoryController.c: 204: occupiedMemory[freeIndex].end = occupiedMemory[freeIndex].star
      +                          t + length;
 19889  0009E4  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19890  0009E6  0D09               	mullw	9
 19891  0009E8  0E00               	movlw	low _occupiedMemory
 19892  0009EA  24F3               	addwf	prodl,w,c
 19893  0009EC  6ED9               	movwf	fsr2l,c
 19894  0009EE  0E02               	movlw	high _occupiedMemory
 19895  0009F0  20F4               	addwfc	prodh,w,c
 19896  0009F2  6EDA               	movwf	fsr2h,c
 19897  0009F4  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 19898  0009F8  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 19899  0009FC  5184               	movf	memory_txFrameRequest@length& (0+255),w,b
 19900  0009FE  278D               	addwf	??_memory_txFrameRequest& (0+255),f,b
 19901  000A00  5185               	movf	(memory_txFrameRequest@length+1)& (0+255),w,b
 19902  000A02  238E               	addwfc	(??_memory_txFrameRequest+1)& (0+255),f,b
 19903  000A04  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19904  000A06  0D09               	mullw	9
 19905  000A08  0E02               	movlw	2
 19906  000A0A  26F3               	addwf	prodl,f,c
 19907  000A0C  0E00               	movlw	0
 19908  000A0E  22F4               	addwfc	prodh,f,c
 19909  000A10  0E00               	movlw	low _occupiedMemory
 19910  000A12  24F3               	addwf	prodl,w,c
 19911  000A14  6ED9               	movwf	fsr2l,c
 19912  000A16  0E02               	movlw	high _occupiedMemory
 19913  000A18  20F4               	addwfc	prodh,w,c
 19914  000A1A  6EDA               	movwf	fsr2h,c
 19915  000A1C  C08D  FFDE         	movff	??_memory_txFrameRequest,postinc2
 19916  000A20  C08E  FFDD         	movff	??_memory_txFrameRequest+1,postdec2
 19917                           
 19918                           ;memoryController.c: 205: occupiedMemory[freeIndex].fOutOfMemory = 0;
 19919  000A24  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19920  000A26  0D09               	mullw	9
 19921  000A28  0E07               	movlw	7
 19922  000A2A  26F3               	addwf	prodl,f,c
 19923  000A2C  0E00               	movlw	0
 19924  000A2E  22F4               	addwfc	prodh,f,c
 19925  000A30  0E00               	movlw	low _occupiedMemory
 19926  000A32  24F3               	addwf	prodl,w,c
 19927  000A34  6ED9               	movwf	fsr2l,c
 19928  000A36  0E02               	movlw	high _occupiedMemory
 19929  000A38  20F4               	addwfc	prodh,w,c
 19930  000A3A  6EDA               	movwf	fsr2h,c
 19931  000A3C  0E00               	movlw	0
 19932  000A3E  6EDF               	movwf	indf2,c
 19933                           
 19934                           ;memoryController.c: 206: occupiedMemory[freeIndex].length = length;
 19935  000A40  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19936  000A42  0D09               	mullw	9
 19937  000A44  0E04               	movlw	4
 19938  000A46  26F3               	addwf	prodl,f,c
 19939  000A48  0E00               	movlw	0
 19940  000A4A  22F4               	addwfc	prodh,f,c
 19941  000A4C  0E00               	movlw	low _occupiedMemory
 19942  000A4E  24F3               	addwf	prodl,w,c
 19943  000A50  6ED9               	movwf	fsr2l,c
 19944  000A52  0E02               	movlw	high _occupiedMemory
 19945  000A54  20F4               	addwfc	prodh,w,c
 19946  000A56  6EDA               	movwf	fsr2h,c
 19947  000A58  C084  FFDE         	movff	memory_txFrameRequest@length,postinc2
 19948  000A5C  C085  FFDD         	movff	memory_txFrameRequest@length+1,postdec2
 19949                           
 19950                           ;memoryController.c: 207: occupiedMemory[freeIndex].index = freeIndex;
 19951  000A60  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19952  000A62  0D09               	mullw	9
 19953  000A64  0E08               	movlw	8
 19954  000A66  26F3               	addwf	prodl,f,c
 19955  000A68  0E00               	movlw	0
 19956  000A6A  22F4               	addwfc	prodh,f,c
 19957  000A6C  0E00               	movlw	low _occupiedMemory
 19958  000A6E  24F3               	addwf	prodl,w,c
 19959  000A70  6ED9               	movwf	fsr2l,c
 19960  000A72  0E02               	movlw	high _occupiedMemory
 19961  000A74  20F4               	addwfc	prodh,w,c
 19962  000A76  6EDA               	movwf	fsr2h,c
 19963  000A78  C0A1  FFDF         	movff	memory_txFrameRequest@freeIndex,indf2
 19964                           
 19965                           ; BSR set to: 0
 19966                           ;memoryController.c: 208: return occupiedMemory[freeIndex];
 19967  000A7C  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19968  000A7E  0D09               	mullw	9
 19969  000A80  0E00               	movlw	low _occupiedMemory
 19970  000A82  24F3               	addwf	prodl,w,c
 19971  000A84  6ED9               	movwf	fsr2l,c
 19972  000A86  0E02               	movlw	high _occupiedMemory
 19973  000A88  20F4               	addwfc	prodh,w,c
 19974  000A8A  6EDA               	movwf	fsr2h,c
 19975  000A8C  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 19976  000A90  0E08               	movlw	8
 19977  000A92                     u9491:
 19978  000A92  CFDB FFEB          	movff	plusw2,plusw0
 19979  000A96  06E8               	decf	wreg,f,c
 19980  000A98  E2FC               	bc	u9491
 19981                           
 19982                           ; BSR set to: 0
 19983  000A9A  0012               	return	
 19984  000A9C                     l488:
 19985                           
 19986                           ; BSR set to: 0
 19987                           ;memoryController.c: 209: }
 19988                           ;memoryController.c: 210: }
 19989                           ;memoryController.c: 211: freeIndex++;
 19990                           
 19991                           ; BSR set to: 0
 19992                           
 19993                           ; BSR set to: 0
 19994  000A9C  2BA1               	incf	memory_txFrameRequest@freeIndex& (0+255),f,b
 19995                           
 19996                           ; BSR set to: 0
 19997                           ;memoryController.c: 212: if (freeIndex == 8) {
 19998  000A9E  0E08               	movlw	8
 19999  000AA0  19A1               	xorwf	memory_txFrameRequest@freeIndex& (0+255),w,b
 20000  000AA2  A4D8               	btfss	status,2,c
 20001  000AA4  D00C               	goto	l489
 20002                           
 20003                           ; BSR set to: 0
 20004                           ;memoryController.c: 214: field.fOutOfMemory = 1;
 20005  000AA6  0E01               	movlw	1
 20006  000AA8  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 20007                           
 20008                           ; BSR set to: 0
 20009                           ;memoryController.c: 215: return field;
 20010  000AAA  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 20011  000AAE  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 20012  000AB2  0E08               	movlw	8
 20013  000AB4                     u9511:
 20014  000AB4  CFDB FFEB          	movff	plusw2,plusw0
 20015  000AB8  06E8               	decf	wreg,f,c
 20016  000ABA  E2FC               	bc	u9511
 20017                           
 20018                           ; BSR set to: 0
 20019  000ABC  0012               	return	
 20020  000ABE                     l489:
 20021                           
 20022                           ; BSR set to: 0
 20023                           
 20024                           ; BSR set to: 0
 20025  000ABE  0E08               	movlw	8
 20026  000AC0  0100               	movlb	0	; () banked
 20027  000AC2  65A1               	cpfsgt	memory_txFrameRequest@freeIndex& (0+255),b
 20028  000AC4  D5F0               	goto	l469
 20029                           
 20030                           ; BSR set to: 0
 20031                           ;memoryController.c: 216: }
 20032                           ;memoryController.c: 217: }
 20033                           ;memoryController.c: 218: return field;
 20034                           
 20035                           ; BSR set to: 0
 20036  000AC6  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 20037  000ACA  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 20038  000ACE  0E08               	movlw	8
 20039  000AD0                     u9531:
 20040  000AD0  CFDB FFEB          	movff	plusw2,plusw0
 20041  000AD4  06E8               	decf	wreg,f,c
 20042  000AD6  E2FC               	bc	u9531
 20043  000AD8  0012               	return	
 20044  000ADA                     __end_of_memory_txFrameRequest:
 20045                           	opt stack 0
 20046                           tblptru	equ	0xFF8
 20047                           tblptrh	equ	0xFF7
 20048                           tblptrl	equ	0xFF6
 20049                           tablat	equ	0xFF5
 20050                           prodh	equ	0xFF4
 20051                           prodl	equ	0xFF3
 20052                           intcon	equ	0xFF2
 20053                           intcon3	equ	0xFF0
 20054                           indf0	equ	0xFEF
 20055                           postinc0	equ	0xFEE
 20056                           plusw0	equ	0xFEB
 20057                           fsr0h	equ	0xFEA
 20058                           fsr0l	equ	0xFE9
 20059                           wreg	equ	0xFE8
 20060                           indf1	equ	0xFE7
 20061                           postinc1	equ	0xFE6
 20062                           postdec1	equ	0xFE5
 20063                           plusw1	equ	0xFE3
 20064                           fsr1h	equ	0xFE2
 20065                           fsr1l	equ	0xFE1
 20066                           indf2	equ	0xFDF
 20067                           postinc2	equ	0xFDE
 20068                           postdec2	equ	0xFDD
 20069                           plusw2	equ	0xFDB
 20070                           fsr2h	equ	0xFDA
 20071                           fsr2l	equ	0xFD9
 20072                           status	equ	0xFD8
 20073                           
 20074 ;; *************** function _entireMemoryFull *****************
 20075 ;; Defined at:
 20076 ;;		line 45 in file "src/mem/memoryController.c"
 20077 ;; Parameters:    Size  Location     Type
 20078 ;;		None
 20079 ;; Auto vars:     Size  Location     Type
 20080 ;;  i               1    0[BANK0 ] unsigned char 
 20081 ;; Return value:  Size  Location     Type
 20082 ;;		None               void
 20083 ;; Registers used:
 20084 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 20085 ;; Tracked objects:
 20086 ;;		On entry : 0/0
 20087 ;;		On exit  : 0/0
 20088 ;;		Unchanged: 0/0
 20089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20090 ;;      Params:         0       0       0       0       0       0       0       0       0
 20091 ;;      Locals:         0       1       0       0       0       0       0       0       0
 20092 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20093 ;;      Totals:         0       1       0       0       0       0       0       0       0
 20094 ;;Total ram usage:        1 bytes
 20095 ;; Hardware stack levels used:    1
 20096 ;; Hardware stack levels required when called:    4
 20097 ;; This function calls:
 20098 ;;		Nothing
 20099 ;; This function is called by:
 20100 ;;		_memory_txFrameRequest
 20101 ;; This function uses a non-reentrant model
 20102 ;;
 20103                           
 20104                           	psect	text75
 20105  005252                     __ptext75:
 20106                           	opt stack 0
 20107  005252                     _entireMemoryFull:
 20108                           	opt stack 23
 20109                           
 20110                           ;memoryController.c: 46: for (uint8_t i = 0; i < 8; i++) {
 20111                           
 20112                           ;incstack = 0
 20113  005252  0E00               	movlw	0
 20114  005254  0100               	movlb	0	; () banked
 20115  005256  6F60               	movwf	entireMemoryFull@i& (0+255),b
 20116  005258                     l8257:
 20117                           
 20118                           ; BSR set to: 0
 20119  005258  0E07               	movlw	7
 20120  00525A  6560               	cpfsgt	entireMemoryFull@i& (0+255),b
 20121  00525C  D001               	goto	l418
 20122  00525E  D013               	goto	u8920
 20123  005260                     l418:
 20124                           
 20125                           ; BSR set to: 0
 20126                           ;memoryController.c: 47: if (!occupiedMemory[i].fIsAssigned)
 20127                           
 20128                           ; BSR set to: 0
 20129  005260  5160               	movf	entireMemoryFull@i& (0+255),w,b
 20130  005262  0D09               	mullw	9
 20131  005264  0E06               	movlw	6
 20132  005266  26F3               	addwf	prodl,f,c
 20133  005268  0E00               	movlw	0
 20134  00526A  22F4               	addwfc	prodh,f,c
 20135  00526C  0E00               	movlw	low _occupiedMemory
 20136  00526E  24F3               	addwf	prodl,w,c
 20137  005270  6ED9               	movwf	fsr2l,c
 20138  005272  0E02               	movlw	high _occupiedMemory
 20139  005274  20F4               	addwfc	prodh,w,c
 20140  005276  6EDA               	movwf	fsr2h,c
 20141  005278  50DF               	movf	indf2,w,c
 20142  00527A  A4D8               	btfss	status,2,c
 20143  00527C  D002               	goto	l420
 20144                           
 20145                           ; BSR set to: 0
 20146                           ;memoryController.c: 48: return 0;
 20147  00527E  90D8               	bcf	status,0,c
 20148                           
 20149                           ; BSR set to: 0
 20150  005280  0012               	return	
 20151  005282                     l420:
 20152                           
 20153                           ; BSR set to: 0
 20154                           
 20155                           ; BSR set to: 0
 20156  005282  2B60               	incf	entireMemoryFull@i& (0+255),f,b
 20157  005284  D7E9               	goto	l8257
 20158  005286                     u8920:
 20159                           
 20160                           ; BSR set to: 0
 20161                           ;memoryController.c: 49: }
 20162                           ;memoryController.c: 50: return 1;
 20163                           
 20164                           ; BSR set to: 0
 20165  005286  80D8               	bsf	status,0,c
 20166  005288  0012               	return	
 20167  00528A                     __end_of_entireMemoryFull:
 20168                           	opt stack 0
 20169                           tblptru	equ	0xFF8
 20170                           tblptrh	equ	0xFF7
 20171                           tblptrl	equ	0xFF6
 20172                           tablat	equ	0xFF5
 20173                           prodh	equ	0xFF4
 20174                           prodl	equ	0xFF3
 20175                           intcon	equ	0xFF2
 20176                           intcon3	equ	0xFF0
 20177                           indf0	equ	0xFEF
 20178                           postinc0	equ	0xFEE
 20179                           plusw0	equ	0xFEB
 20180                           fsr0h	equ	0xFEA
 20181                           fsr0l	equ	0xFE9
 20182                           wreg	equ	0xFE8
 20183                           indf1	equ	0xFE7
 20184                           postinc1	equ	0xFE6
 20185                           postdec1	equ	0xFE5
 20186                           plusw1	equ	0xFE3
 20187                           fsr1h	equ	0xFE2
 20188                           fsr1l	equ	0xFE1
 20189                           indf2	equ	0xFDF
 20190                           postinc2	equ	0xFDE
 20191                           postdec2	equ	0xFDD
 20192                           plusw2	equ	0xFDB
 20193                           fsr2h	equ	0xFDA
 20194                           fsr2l	equ	0xFD9
 20195                           status	equ	0xFD8
 20196                           
 20197 ;; *************** function _entireMemoryEmpty *****************
 20198 ;; Defined at:
 20199 ;;		line 37 in file "src/mem/memoryController.c"
 20200 ;; Parameters:    Size  Location     Type
 20201 ;;		None
 20202 ;; Auto vars:     Size  Location     Type
 20203 ;;  i               1    0[BANK0 ] unsigned char 
 20204 ;; Return value:  Size  Location     Type
 20205 ;;		None               void
 20206 ;; Registers used:
 20207 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 20208 ;; Tracked objects:
 20209 ;;		On entry : 0/0
 20210 ;;		On exit  : 0/0
 20211 ;;		Unchanged: 0/0
 20212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20213 ;;      Params:         0       0       0       0       0       0       0       0       0
 20214 ;;      Locals:         0       1       0       0       0       0       0       0       0
 20215 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20216 ;;      Totals:         0       1       0       0       0       0       0       0       0
 20217 ;;Total ram usage:        1 bytes
 20218 ;; Hardware stack levels used:    1
 20219 ;; Hardware stack levels required when called:    4
 20220 ;; This function calls:
 20221 ;;		Nothing
 20222 ;; This function is called by:
 20223 ;;		_memory_txFrameRequest
 20224 ;; This function uses a non-reentrant model
 20225 ;;
 20226                           
 20227                           	psect	text76
 20228  00528A                     __ptext76:
 20229                           	opt stack 0
 20230  00528A                     _entireMemoryEmpty:
 20231                           	opt stack 23
 20232                           
 20233                           ;memoryController.c: 38: for (uint8_t i = 0; i < 8; i++) {
 20234                           
 20235                           ; BSR set to: 0
 20236                           ;incstack = 0
 20237  00528A  0E00               	movlw	0
 20238  00528C  0100               	movlb	0	; () banked
 20239  00528E  6F60               	movwf	entireMemoryEmpty@i& (0+255),b
 20240  005290                     l8237:
 20241                           
 20242                           ; BSR set to: 0
 20243  005290  0E07               	movlw	7
 20244  005292  6560               	cpfsgt	entireMemoryEmpty@i& (0+255),b
 20245  005294  D001               	goto	l412
 20246  005296  D013               	goto	u8890
 20247  005298                     l412:
 20248                           
 20249                           ; BSR set to: 0
 20250                           ;memoryController.c: 39: if (occupiedMemory[i].fIsAssigned)
 20251                           
 20252                           ; BSR set to: 0
 20253  005298  5160               	movf	entireMemoryEmpty@i& (0+255),w,b
 20254  00529A  0D09               	mullw	9
 20255  00529C  0E06               	movlw	6
 20256  00529E  26F3               	addwf	prodl,f,c
 20257  0052A0  0E00               	movlw	0
 20258  0052A2  22F4               	addwfc	prodh,f,c
 20259  0052A4  0E00               	movlw	low _occupiedMemory
 20260  0052A6  24F3               	addwf	prodl,w,c
 20261  0052A8  6ED9               	movwf	fsr2l,c
 20262  0052AA  0E02               	movlw	high _occupiedMemory
 20263  0052AC  20F4               	addwfc	prodh,w,c
 20264  0052AE  6EDA               	movwf	fsr2h,c
 20265  0052B0  50DF               	movf	indf2,w,c
 20266  0052B2  B4D8               	btfsc	status,2,c
 20267  0052B4  D002               	goto	l414
 20268                           
 20269                           ; BSR set to: 0
 20270                           ;memoryController.c: 40: return 0;
 20271  0052B6  90D8               	bcf	status,0,c
 20272                           
 20273                           ; BSR set to: 0
 20274  0052B8  0012               	return	
 20275  0052BA                     l414:
 20276                           
 20277                           ; BSR set to: 0
 20278                           
 20279                           ; BSR set to: 0
 20280  0052BA  2B60               	incf	entireMemoryEmpty@i& (0+255),f,b
 20281  0052BC  D7E9               	goto	l8237
 20282  0052BE                     u8890:
 20283                           
 20284                           ; BSR set to: 0
 20285                           ;memoryController.c: 41: }
 20286                           ;memoryController.c: 42: return 1;
 20287                           
 20288                           ; BSR set to: 0
 20289  0052BE  80D8               	bsf	status,0,c
 20290  0052C0  0012               	return	
 20291  0052C2                     __end_of_entireMemoryEmpty:
 20292                           	opt stack 0
 20293                           tblptru	equ	0xFF8
 20294                           tblptrh	equ	0xFF7
 20295                           tblptrl	equ	0xFF6
 20296                           tablat	equ	0xFF5
 20297                           prodh	equ	0xFF4
 20298                           prodl	equ	0xFF3
 20299                           intcon	equ	0xFF2
 20300                           intcon3	equ	0xFF0
 20301                           indf0	equ	0xFEF
 20302                           postinc0	equ	0xFEE
 20303                           plusw0	equ	0xFEB
 20304                           fsr0h	equ	0xFEA
 20305                           fsr0l	equ	0xFE9
 20306                           wreg	equ	0xFE8
 20307                           indf1	equ	0xFE7
 20308                           postinc1	equ	0xFE6
 20309                           postdec1	equ	0xFE5
 20310                           plusw1	equ	0xFE3
 20311                           fsr1h	equ	0xFE2
 20312                           fsr1l	equ	0xFE1
 20313                           indf2	equ	0xFDF
 20314                           postinc2	equ	0xFDE
 20315                           postdec2	equ	0xFDD
 20316                           plusw2	equ	0xFDB
 20317                           fsr2h	equ	0xFDA
 20318                           fsr2l	equ	0xFD9
 20319                           status	equ	0xFD8
 20320                           
 20321 ;; *************** function _checkForOverlap *****************
 20322 ;; Defined at:
 20323 ;;		line 63 in file "src/mem/memoryController.c"
 20324 ;; Parameters:    Size  Location     Type
 20325 ;;  a               9   18[BANK0 ] struct memoryField
 20326 ;;  b               9   27[BANK0 ] struct memoryField
 20327 ;; Auto vars:     Size  Location     Type
 20328 ;;		None
 20329 ;; Return value:  Size  Location     Type
 20330 ;;		None               void
 20331 ;; Registers used:
 20332 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 20333 ;; Tracked objects:
 20334 ;;		On entry : 0/0
 20335 ;;		On exit  : 0/0
 20336 ;;		Unchanged: 0/0
 20337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20338 ;;      Params:         0      18       0       0       0       0       0       0       0
 20339 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20340 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20341 ;;      Totals:         0      18       0       0       0       0       0       0       0
 20342 ;;Total ram usage:       18 bytes
 20343 ;; Hardware stack levels used:    1
 20344 ;; Hardware stack levels required when called:    5
 20345 ;; This function calls:
 20346 ;;		_checkForOverlapSwitched
 20347 ;; This function is called by:
 20348 ;;		_memory_txFrameRequest
 20349 ;; This function uses a non-reentrant model
 20350 ;;
 20351                           
 20352                           	psect	text77
 20353  0038F2                     __ptext77:
 20354                           	opt stack 0
 20355  0038F2                     _checkForOverlap:
 20356                           	opt stack 22
 20357                           
 20358                           ;memoryController.c: 64: if ((a.start == b.start) ||
 20359                           ;memoryController.c: 65: (a.end == b.end) ||
 20360                           ;memoryController.c: 66: (a.start == b.end) ||
 20361                           ;memoryController.c: 67: (a.end == b.start) ||
 20362                           ;memoryController.c: 68: (a.end > 0x3000) ||
 20363                           ;memoryController.c: 69: (a.start > 0x3000) ||
 20364                           ;memoryController.c: 70: (b.end > 0x3000) ||
 20365                           ;memoryController.c: 71: (b.start > 0x3000))
 20366                           
 20367                           ; BSR set to: 0
 20368                           ;incstack = 0
 20369  0038F2  0100               	movlb	0	; () banked
 20370  0038F4  517B               	movf	checkForOverlap@b& (0+255),w,b
 20371  0038F6  1972               	xorwf	checkForOverlap@a& (0+255),w,b
 20372  0038F8  E104               	bnz	u8930
 20373  0038FA  517C               	movf	(checkForOverlap@b+1)& (0+255),w,b
 20374  0038FC  1973               	xorwf	(checkForOverlap@a+1)& (0+255),w,b
 20375  0038FE  B4D8               	btfsc	status,2,c
 20376  003900  D029               	goto	u9000
 20377  003902                     u8930:
 20378                           
 20379                           ; BSR set to: 0
 20380  003902  517D               	movf	(checkForOverlap@b+2)& (0+255),w,b
 20381  003904  1974               	xorwf	(checkForOverlap@a+2)& (0+255),w,b
 20382  003906  E104               	bnz	u8940
 20383  003908  517E               	movf	(checkForOverlap@b+3)& (0+255),w,b
 20384  00390A  1975               	xorwf	(checkForOverlap@a+3)& (0+255),w,b
 20385  00390C  B4D8               	btfsc	status,2,c
 20386  00390E  D022               	goto	u9000
 20387  003910                     u8940:
 20388                           
 20389                           ; BSR set to: 0
 20390  003910  5172               	movf	checkForOverlap@a& (0+255),w,b
 20391  003912  197D               	xorwf	(checkForOverlap@b+2)& (0+255),w,b
 20392  003914  E104               	bnz	u8950
 20393  003916  5173               	movf	(checkForOverlap@a+1)& (0+255),w,b
 20394  003918  197E               	xorwf	(checkForOverlap@b+3)& (0+255),w,b
 20395  00391A  B4D8               	btfsc	status,2,c
 20396  00391C  D01B               	goto	u9000
 20397  00391E                     u8950:
 20398                           
 20399                           ; BSR set to: 0
 20400  00391E  517B               	movf	checkForOverlap@b& (0+255),w,b
 20401  003920  1974               	xorwf	(checkForOverlap@a+2)& (0+255),w,b
 20402  003922  E104               	bnz	u8960
 20403  003924  517C               	movf	(checkForOverlap@b+1)& (0+255),w,b
 20404  003926  1975               	xorwf	(checkForOverlap@a+3)& (0+255),w,b
 20405  003928  B4D8               	btfsc	status,2,c
 20406  00392A  D014               	goto	u9000
 20407  00392C                     u8960:
 20408                           
 20409                           ; BSR set to: 0
 20410  00392C  0574               	decf	(checkForOverlap@a+2)& (0+255),w,b
 20411  00392E  0E30               	movlw	48
 20412  003930  5975               	subwfb	(checkForOverlap@a+3)& (0+255),w,b
 20413  003932  B0D8               	btfsc	status,0,c
 20414  003934  D00F               	goto	u9000
 20415                           
 20416                           ; BSR set to: 0
 20417  003936  0572               	decf	checkForOverlap@a& (0+255),w,b
 20418  003938  0E30               	movlw	48
 20419  00393A  5973               	subwfb	(checkForOverlap@a+1)& (0+255),w,b
 20420  00393C  B0D8               	btfsc	status,0,c
 20421  00393E  D00A               	goto	u9000
 20422                           
 20423                           ; BSR set to: 0
 20424  003940  057D               	decf	(checkForOverlap@b+2)& (0+255),w,b
 20425  003942  0E30               	movlw	48
 20426  003944  597E               	subwfb	(checkForOverlap@b+3)& (0+255),w,b
 20427  003946  B0D8               	btfsc	status,0,c
 20428  003948  D005               	goto	u9000
 20429                           
 20430                           ; BSR set to: 0
 20431  00394A  057B               	decf	checkForOverlap@b& (0+255),w,b
 20432  00394C  0E30               	movlw	48
 20433  00394E  597C               	subwfb	(checkForOverlap@b+1)& (0+255),w,b
 20434  003950  A0D8               	btfss	status,0,c
 20435  003952  D002               	goto	l432
 20436  003954                     u9000:
 20437                           
 20438                           ; BSR set to: 0
 20439                           ;memoryController.c: 72: return 1;
 20440                           
 20441                           ; BSR set to: 0
 20442  003954  80D8               	bsf	status,0,c
 20443                           
 20444                           ; BSR set to: 0
 20445  003956  0012               	return	
 20446  003958                     l432:
 20447                           
 20448                           ; BSR set to: 0
 20449                           ;memoryController.c: 75: if (a.start < a.end) {
 20450                           
 20451                           ; BSR set to: 0
 20452  003958  5174               	movf	(checkForOverlap@a+2)& (0+255),w,b
 20453  00395A  5D72               	subwf	checkForOverlap@a& (0+255),w,b
 20454  00395C  5175               	movf	(checkForOverlap@a+3)& (0+255),w,b
 20455  00395E  5973               	subwfb	(checkForOverlap@a+1)& (0+255),w,b
 20456  003960  B0D8               	btfsc	status,0,c
 20457  003962  D03B               	goto	l436
 20458                           
 20459                           ; BSR set to: 0
 20460                           ;memoryController.c: 76: if (b.start < b.end) {
 20461  003964  517D               	movf	(checkForOverlap@b+2)& (0+255),w,b
 20462  003966  5D7B               	subwf	checkForOverlap@b& (0+255),w,b
 20463  003968  517E               	movf	(checkForOverlap@b+3)& (0+255),w,b
 20464  00396A  597C               	subwfb	(checkForOverlap@b+1)& (0+255),w,b
 20465  00396C  B0D8               	btfsc	status,0,c
 20466  00396E  D02B               	goto	l437
 20467                           
 20468                           ; BSR set to: 0
 20469                           ;memoryController.c: 78: if (a.start < b.start) {
 20470  003970  517B               	movf	checkForOverlap@b& (0+255),w,b
 20471  003972  5D72               	subwf	checkForOverlap@a& (0+255),w,b
 20472  003974  517C               	movf	(checkForOverlap@b+1)& (0+255),w,b
 20473  003976  5973               	subwfb	(checkForOverlap@a+1)& (0+255),w,b
 20474  003978  B0D8               	btfsc	status,0,c
 20475  00397A  D00A               	goto	l438
 20476                           
 20477                           ; BSR set to: 0
 20478                           ;memoryController.c: 79: if (a.end > b.start) {
 20479  00397C  5174               	movf	(checkForOverlap@a+2)& (0+255),w,b
 20480  00397E  5D7B               	subwf	checkForOverlap@b& (0+255),w,b
 20481  003980  5175               	movf	(checkForOverlap@a+3)& (0+255),w,b
 20482  003982  597C               	subwfb	(checkForOverlap@b+1)& (0+255),w,b
 20483  003984  B0D8               	btfsc	status,0,c
 20484  003986  D002               	goto	l439
 20485                           
 20486                           ; BSR set to: 0
 20487                           ;memoryController.c: 80: return 1;
 20488  003988  80D8               	bsf	status,0,c
 20489                           
 20490                           ; BSR set to: 0
 20491                           ;memoryController.c: 81: } else {
 20492                           
 20493                           ; BSR set to: 0
 20494  00398A  0012               	return	
 20495  00398C                     l439:
 20496                           
 20497                           ; BSR set to: 0
 20498                           ;memoryController.c: 82: return 0;
 20499                           
 20500                           ; BSR set to: 0
 20501  00398C  90D8               	bcf	status,0,c
 20502                           
 20503                           ; BSR set to: 0
 20504                           ;memoryController.c: 83: }
 20505                           ;memoryController.c: 84: } else {
 20506                           
 20507                           ; BSR set to: 0
 20508  00398E  0012               	return	
 20509  003990                     l438:
 20510                           
 20511                           ; BSR set to: 0
 20512                           ;memoryController.c: 85: return checkForOverlapSwitched(b, a);
 20513                           
 20514                           ; BSR set to: 0
 20515  003990  EE20  F07B         	lfsr	2,checkForOverlap@b
 20516  003994  EE00  F060         	lfsr	0,checkForOverlapSwitched@a
 20517  003998  0E08               	movlw	8
 20518  00399A                     u9051:
 20519  00399A  CFDB FFEB          	movff	plusw2,plusw0
 20520  00399E  06E8               	decf	wreg,f,c
 20521  0039A0  E2FC               	bc	u9051
 20522  0039A2  EE20  F072         	lfsr	2,checkForOverlap@a
 20523  0039A6  EE00  F069         	lfsr	0,checkForOverlapSwitched@b
 20524  0039AA  0E08               	movlw	8
 20525  0039AC                     u9061:
 20526  0039AC  CFDB FFEB          	movff	plusw2,plusw0
 20527  0039B0  06E8               	decf	wreg,f,c
 20528  0039B2  E2FC               	bc	u9061
 20529  0039B4  EC3E  F020         	call	_checkForOverlapSwitched	;wreg free
 20530  0039B8  0100               	movlb	0	; () banked
 20531  0039BA  B0D8               	btfsc	status,0,c
 20532  0039BC  D002               	goto	l8127
 20533                           
 20534                           ; BSR set to: 0
 20535  0039BE  90D8               	bcf	status,0,c
 20536  0039C0  0012               	return	
 20537  0039C2                     l8127:
 20538                           
 20539                           ; BSR set to: 0
 20540                           
 20541                           ; BSR set to: 0
 20542  0039C2  80D8               	bsf	status,0,c
 20543                           
 20544                           ; BSR set to: 0
 20545                           ;memoryController.c: 86: }
 20546                           ;memoryController.c: 87: } else {
 20547                           
 20548                           ; BSR set to: 0
 20549                           
 20550                           ; BSR set to: 0
 20551  0039C4  0012               	return	
 20552  0039C6                     l437:
 20553                           
 20554                           ; BSR set to: 0
 20555                           ;memoryController.c: 88: if (b.end < a.start)
 20556                           
 20557                           ; BSR set to: 0
 20558  0039C6  5172               	movf	checkForOverlap@a& (0+255),w,b
 20559  0039C8  5D7D               	subwf	(checkForOverlap@b+2)& (0+255),w,b
 20560  0039CA  5173               	movf	(checkForOverlap@a+1)& (0+255),w,b
 20561  0039CC  597E               	subwfb	(checkForOverlap@b+3)& (0+255),w,b
 20562  0039CE  B0D8               	btfsc	status,0,c
 20563  0039D0  D002               	goto	l443
 20564                           
 20565                           ; BSR set to: 0
 20566                           ;memoryController.c: 89: return 0;
 20567  0039D2  90D8               	bcf	status,0,c
 20568                           
 20569                           ; BSR set to: 0
 20570                           
 20571                           ; BSR set to: 0
 20572  0039D4  0012               	return	
 20573  0039D6                     l443:
 20574                           
 20575                           ; BSR set to: 0
 20576                           ;memoryController.c: 90: else
 20577                           ;memoryController.c: 91: return 1;
 20578                           
 20579                           ; BSR set to: 0
 20580  0039D6  80D8               	bsf	status,0,c
 20581                           
 20582                           ; BSR set to: 0
 20583                           ;memoryController.c: 92: }
 20584                           ;memoryController.c: 93: } else {
 20585                           
 20586                           ; BSR set to: 0
 20587                           
 20588                           ; BSR set to: 0
 20589  0039D8  0012               	return	
 20590  0039DA                     l436:
 20591                           
 20592                           ; BSR set to: 0
 20593                           ;memoryController.c: 94: return checkForOverlapSwitched(b, a);
 20594                           
 20595                           ; BSR set to: 0
 20596  0039DA  EE20  F07B         	lfsr	2,checkForOverlap@b
 20597  0039DE  EE00  F060         	lfsr	0,checkForOverlapSwitched@a
 20598  0039E2  0E08               	movlw	8
 20599  0039E4                     u9091:
 20600  0039E4  CFDB FFEB          	movff	plusw2,plusw0
 20601  0039E8  06E8               	decf	wreg,f,c
 20602  0039EA  E2FC               	bc	u9091
 20603  0039EC  EE20  F072         	lfsr	2,checkForOverlap@a
 20604  0039F0  EE00  F069         	lfsr	0,checkForOverlapSwitched@b
 20605  0039F4  0E08               	movlw	8
 20606  0039F6                     u9101:
 20607  0039F6  CFDB FFEB          	movff	plusw2,plusw0
 20608  0039FA  06E8               	decf	wreg,f,c
 20609  0039FC  E2FC               	bc	u9101
 20610  0039FE  EC3E  F020         	call	_checkForOverlapSwitched	;wreg free
 20611  003A02  0100               	movlb	0	; () banked
 20612  003A04  B0D8               	btfsc	status,0,c
 20613  003A06  D002               	goto	l8131
 20614                           
 20615                           ; BSR set to: 0
 20616  003A08  90D8               	bcf	status,0,c
 20617  003A0A  0012               	return	
 20618  003A0C                     l8131:
 20619                           
 20620                           ; BSR set to: 0
 20621                           
 20622                           ; BSR set to: 0
 20623  003A0C  80D8               	bsf	status,0,c
 20624                           
 20625                           ; BSR set to: 0
 20626                           
 20627                           ; BSR set to: 0
 20628  003A0E  0012               	return	
 20629  003A10                     __end_of_checkForOverlap:
 20630                           	opt stack 0
 20631                           tblptru	equ	0xFF8
 20632                           tblptrh	equ	0xFF7
 20633                           tblptrl	equ	0xFF6
 20634                           tablat	equ	0xFF5
 20635                           prodh	equ	0xFF4
 20636                           prodl	equ	0xFF3
 20637                           intcon	equ	0xFF2
 20638                           intcon3	equ	0xFF0
 20639                           indf0	equ	0xFEF
 20640                           postinc0	equ	0xFEE
 20641                           plusw0	equ	0xFEB
 20642                           fsr0h	equ	0xFEA
 20643                           fsr0l	equ	0xFE9
 20644                           wreg	equ	0xFE8
 20645                           indf1	equ	0xFE7
 20646                           postinc1	equ	0xFE6
 20647                           postdec1	equ	0xFE5
 20648                           plusw1	equ	0xFE3
 20649                           fsr1h	equ	0xFE2
 20650                           fsr1l	equ	0xFE1
 20651                           indf2	equ	0xFDF
 20652                           postinc2	equ	0xFDE
 20653                           postdec2	equ	0xFDD
 20654                           plusw2	equ	0xFDB
 20655                           fsr2h	equ	0xFDA
 20656                           fsr2l	equ	0xFD9
 20657                           status	equ	0xFD8
 20658                           
 20659 ;; *************** function _checkForOverlapSwitched *****************
 20660 ;; Defined at:
 20661 ;;		line 98 in file "src/mem/memoryController.c"
 20662 ;; Parameters:    Size  Location     Type
 20663 ;;  a               9    0[BANK0 ] struct memoryField
 20664 ;;  b               9    9[BANK0 ] struct memoryField
 20665 ;; Auto vars:     Size  Location     Type
 20666 ;;		None
 20667 ;; Return value:  Size  Location     Type
 20668 ;;		None               void
 20669 ;; Registers used:
 20670 ;;		wreg, status,2, status,0
 20671 ;; Tracked objects:
 20672 ;;		On entry : 0/0
 20673 ;;		On exit  : 0/0
 20674 ;;		Unchanged: 0/0
 20675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20676 ;;      Params:         0      18       0       0       0       0       0       0       0
 20677 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20678 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20679 ;;      Totals:         0      18       0       0       0       0       0       0       0
 20680 ;;Total ram usage:       18 bytes
 20681 ;; Hardware stack levels used:    1
 20682 ;; Hardware stack levels required when called:    4
 20683 ;; This function calls:
 20684 ;;		Nothing
 20685 ;; This function is called by:
 20686 ;;		_checkForOverlap
 20687 ;; This function uses a non-reentrant model
 20688 ;;
 20689                           
 20690                           	psect	text78
 20691  00407C                     __ptext78:
 20692                           	opt stack 0
 20693  00407C                     _checkForOverlapSwitched:
 20694                           	opt stack 22
 20695                           
 20696                           ;memoryController.c: 101: if ((a.start == b.start) ||
 20697                           ;memoryController.c: 102: (a.end == b.end) ||
 20698                           ;memoryController.c: 103: (a.start == b.end) ||
 20699                           ;memoryController.c: 104: (a.end == b.start) ||
 20700                           ;memoryController.c: 105: (a.end > 0x3000) ||
 20701                           ;memoryController.c: 106: (a.start > 0x3000) ||
 20702                           ;memoryController.c: 107: (b.end > 0x3000) ||
 20703                           ;memoryController.c: 108: (b.start > 0x3000))
 20704                           
 20705                           ; BSR set to: 0
 20706                           ;incstack = 0
 20707  00407C  0100               	movlb	0	; () banked
 20708  00407E  5169               	movf	checkForOverlapSwitched@b& (0+255),w,b
 20709  004080  1960               	xorwf	checkForOverlapSwitched@a& (0+255),w,b
 20710  004082  E104               	bnz	u8740
 20711  004084  516A               	movf	(checkForOverlapSwitched@b+1)& (0+255),w,b
 20712  004086  1961               	xorwf	(checkForOverlapSwitched@a+1)& (0+255),w,b
 20713  004088  B4D8               	btfsc	status,2,c
 20714  00408A  D029               	goto	u8810
 20715  00408C                     u8740:
 20716                           
 20717                           ; BSR set to: 0
 20718  00408C  516B               	movf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 20719  00408E  1962               	xorwf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 20720  004090  E104               	bnz	u8750
 20721  004092  516C               	movf	(checkForOverlapSwitched@b+3)& (0+255),w,b
 20722  004094  1963               	xorwf	(checkForOverlapSwitched@a+3)& (0+255),w,b
 20723  004096  B4D8               	btfsc	status,2,c
 20724  004098  D022               	goto	u8810
 20725  00409A                     u8750:
 20726                           
 20727                           ; BSR set to: 0
 20728  00409A  5160               	movf	checkForOverlapSwitched@a& (0+255),w,b
 20729  00409C  196B               	xorwf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 20730  00409E  E104               	bnz	u8760
 20731  0040A0  5161               	movf	(checkForOverlapSwitched@a+1)& (0+255),w,b
 20732  0040A2  196C               	xorwf	(checkForOverlapSwitched@b+3)& (0+255),w,b
 20733  0040A4  B4D8               	btfsc	status,2,c
 20734  0040A6  D01B               	goto	u8810
 20735  0040A8                     u8760:
 20736                           
 20737                           ; BSR set to: 0
 20738  0040A8  5169               	movf	checkForOverlapSwitched@b& (0+255),w,b
 20739  0040AA  1962               	xorwf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 20740  0040AC  E104               	bnz	u8770
 20741  0040AE  516A               	movf	(checkForOverlapSwitched@b+1)& (0+255),w,b
 20742  0040B0  1963               	xorwf	(checkForOverlapSwitched@a+3)& (0+255),w,b
 20743  0040B2  B4D8               	btfsc	status,2,c
 20744  0040B4  D014               	goto	u8810
 20745  0040B6                     u8770:
 20746                           
 20747                           ; BSR set to: 0
 20748  0040B6  0562               	decf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 20749  0040B8  0E30               	movlw	48
 20750  0040BA  5963               	subwfb	(checkForOverlapSwitched@a+3)& (0+255),w,b
 20751  0040BC  B0D8               	btfsc	status,0,c
 20752  0040BE  D00F               	goto	u8810
 20753                           
 20754                           ; BSR set to: 0
 20755  0040C0  0560               	decf	checkForOverlapSwitched@a& (0+255),w,b
 20756  0040C2  0E30               	movlw	48
 20757  0040C4  5961               	subwfb	(checkForOverlapSwitched@a+1)& (0+255),w,b
 20758  0040C6  B0D8               	btfsc	status,0,c
 20759  0040C8  D00A               	goto	u8810
 20760                           
 20761                           ; BSR set to: 0
 20762  0040CA  056B               	decf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 20763  0040CC  0E30               	movlw	48
 20764  0040CE  596C               	subwfb	(checkForOverlapSwitched@b+3)& (0+255),w,b
 20765  0040D0  B0D8               	btfsc	status,0,c
 20766  0040D2  D005               	goto	u8810
 20767                           
 20768                           ; BSR set to: 0
 20769  0040D4  0569               	decf	checkForOverlapSwitched@b& (0+255),w,b
 20770  0040D6  0E30               	movlw	48
 20771  0040D8  596A               	subwfb	(checkForOverlapSwitched@b+1)& (0+255),w,b
 20772  0040DA  A0D8               	btfss	status,0,c
 20773  0040DC  D002               	goto	l448
 20774  0040DE                     u8810:
 20775                           
 20776                           ; BSR set to: 0
 20777                           ;memoryController.c: 109: return 1;
 20778                           
 20779                           ; BSR set to: 0
 20780  0040DE  80D8               	bsf	status,0,c
 20781                           
 20782                           ; BSR set to: 0
 20783  0040E0  0012               	return	
 20784  0040E2                     l448:
 20785                           
 20786                           ; BSR set to: 0
 20787                           ;memoryController.c: 112: if (a.start < a.end) {
 20788                           
 20789                           ; BSR set to: 0
 20790  0040E2  5162               	movf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 20791  0040E4  5D60               	subwf	checkForOverlapSwitched@a& (0+255),w,b
 20792  0040E6  5163               	movf	(checkForOverlapSwitched@a+3)& (0+255),w,b
 20793  0040E8  5961               	subwfb	(checkForOverlapSwitched@a+1)& (0+255),w,b
 20794  0040EA  B0D8               	btfsc	status,0,c
 20795  0040EC  D01E               	goto	l459
 20796                           
 20797                           ; BSR set to: 0
 20798                           ;memoryController.c: 113: if (b.start < b.end) {
 20799  0040EE  516B               	movf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 20800  0040F0  5D69               	subwf	checkForOverlapSwitched@b& (0+255),w,b
 20801  0040F2  516C               	movf	(checkForOverlapSwitched@b+3)& (0+255),w,b
 20802  0040F4  596A               	subwfb	(checkForOverlapSwitched@b+1)& (0+255),w,b
 20803  0040F6  B0D8               	btfsc	status,0,c
 20804  0040F8  D010               	goto	l453
 20805                           
 20806                           ; BSR set to: 0
 20807                           ;memoryController.c: 115: if (a.start < b.start) {
 20808  0040FA  5169               	movf	checkForOverlapSwitched@b& (0+255),w,b
 20809  0040FC  5D60               	subwf	checkForOverlapSwitched@a& (0+255),w,b
 20810  0040FE  516A               	movf	(checkForOverlapSwitched@b+1)& (0+255),w,b
 20811  004100  5961               	subwfb	(checkForOverlapSwitched@a+1)& (0+255),w,b
 20812  004102  B0D8               	btfsc	status,0,c
 20813  004104  D012               	goto	l459
 20814                           
 20815                           ; BSR set to: 0
 20816                           ;memoryController.c: 116: if (a.end > b.start) {
 20817  004106  5162               	movf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 20818  004108  5D69               	subwf	checkForOverlapSwitched@b& (0+255),w,b
 20819  00410A  5163               	movf	(checkForOverlapSwitched@a+3)& (0+255),w,b
 20820  00410C  596A               	subwfb	(checkForOverlapSwitched@b+1)& (0+255),w,b
 20821  00410E  B0D8               	btfsc	status,0,c
 20822  004110  D002               	goto	l455
 20823                           
 20824                           ; BSR set to: 0
 20825                           ;memoryController.c: 117: return 1;
 20826  004112  80D8               	bsf	status,0,c
 20827                           
 20828                           ; BSR set to: 0
 20829  004114  0012               	return	
 20830  004116                     l455:
 20831                           
 20832                           ; BSR set to: 0
 20833                           ;memoryController.c: 119: return 0;
 20834                           
 20835                           ; BSR set to: 0
 20836  004116  90D8               	bcf	status,0,c
 20837                           
 20838                           ; BSR set to: 0
 20839  004118  0012               	return	
 20840  00411A                     l453:
 20841                           
 20842                           ; BSR set to: 0
 20843                           ;memoryController.c: 123: if (b.end < a.start)
 20844                           
 20845                           ; BSR set to: 0
 20846  00411A  5160               	movf	checkForOverlapSwitched@a& (0+255),w,b
 20847  00411C  5D6B               	subwf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 20848  00411E  5161               	movf	(checkForOverlapSwitched@a+1)& (0+255),w,b
 20849  004120  596C               	subwfb	(checkForOverlapSwitched@b+3)& (0+255),w,b
 20850  004122  A0D8               	btfss	status,0,c
 20851  004124  D7F8               	goto	l455
 20852                           
 20853                           ; BSR set to: 0
 20854                           ;memoryController.c: 125: else
 20855                           ;memoryController.c: 126: return 1;
 20856                           
 20857                           ; BSR set to: 0
 20858                           
 20859                           ; BSR set to: 0
 20860                           
 20861                           ; BSR set to: 0
 20862                           
 20863                           ; BSR set to: 0
 20864                           ;memoryController.c: 124: return 0;
 20865  004126  80D8               	bsf	status,0,c
 20866                           
 20867                           ; BSR set to: 0
 20868  004128  0012               	return	
 20869  00412A                     l459:
 20870                           
 20871                           ; BSR set to: 0
 20872                           ;memoryController.c: 127: }
 20873                           ;memoryController.c: 128: }
 20874                           ;memoryController.c: 130: return 1;
 20875                           
 20876                           ; BSR set to: 0
 20877                           
 20878                           ; BSR set to: 0
 20879                           
 20880                           ; BSR set to: 0
 20881  00412A  80D8               	bsf	status,0,c
 20882  00412C  0012               	return	
 20883  00412E                     __end_of_checkForOverlapSwitched:
 20884                           	opt stack 0
 20885                           tblptru	equ	0xFF8
 20886                           tblptrh	equ	0xFF7
 20887                           tblptrl	equ	0xFF6
 20888                           tablat	equ	0xFF5
 20889                           prodh	equ	0xFF4
 20890                           prodl	equ	0xFF3
 20891                           intcon	equ	0xFF2
 20892                           intcon3	equ	0xFF0
 20893                           indf0	equ	0xFEF
 20894                           postinc0	equ	0xFEE
 20895                           plusw0	equ	0xFEB
 20896                           fsr0h	equ	0xFEA
 20897                           fsr0l	equ	0xFE9
 20898                           wreg	equ	0xFE8
 20899                           indf1	equ	0xFE7
 20900                           postinc1	equ	0xFE6
 20901                           postdec1	equ	0xFE5
 20902                           plusw1	equ	0xFE3
 20903                           fsr1h	equ	0xFE2
 20904                           fsr1l	equ	0xFE1
 20905                           indf2	equ	0xFDF
 20906                           postinc2	equ	0xFDE
 20907                           postdec2	equ	0xFDD
 20908                           plusw2	equ	0xFDB
 20909                           fsr2h	equ	0xFDA
 20910                           fsr2l	equ	0xFD9
 20911                           status	equ	0xFD8
 20912                           
 20913 ;; *************** function ___wmul *****************
 20914 ;; Defined at:
 20915 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 20916 ;; Parameters:    Size  Location     Type
 20917 ;;  multiplier      2    0[BANK0 ] unsigned int 
 20918 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 20919 ;; Auto vars:     Size  Location     Type
 20920 ;;  product         2    4[BANK0 ] unsigned int 
 20921 ;; Return value:  Size  Location     Type
 20922 ;;                  2    0[BANK0 ] unsigned int 
 20923 ;; Registers used:
 20924 ;;		wreg, status,2, status,0, prodl, prodh
 20925 ;; Tracked objects:
 20926 ;;		On entry : 0/0
 20927 ;;		On exit  : 0/0
 20928 ;;		Unchanged: 0/0
 20929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20930 ;;      Params:         0       4       0       0       0       0       0       0       0
 20931 ;;      Locals:         0       2       0       0       0       0       0       0       0
 20932 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20933 ;;      Totals:         0       6       0       0       0       0       0       0       0
 20934 ;;Total ram usage:        6 bytes
 20935 ;; Hardware stack levels used:    1
 20936 ;; Hardware stack levels required when called:    4
 20937 ;; This function calls:
 20938 ;;		Nothing
 20939 ;; This function is called by:
 20940 ;;		_memory_txFrameRequest
 20941 ;; This function uses a non-reentrant model
 20942 ;;
 20943                           
 20944                           	psect	text79
 20945  0054BE                     __ptext79:
 20946                           	opt stack 0
 20947  0054BE                     ___wmul:
 20948                           	opt stack 23
 20949                           
 20950                           ; BSR set to: 0
 20951                           ;incstack = 0
 20952  0054BE  0100               	movlb	0	; () banked
 20953  0054C0  5160               	movf	___wmul@multiplier& (0+255),w,b
 20954  0054C2  0362               	mulwf	___wmul@multiplicand& (0+255),b
 20955  0054C4  CFF3 F064          	movff	prodl,___wmul@product
 20956  0054C8  CFF4 F065          	movff	prodh,___wmul@product+1
 20957  0054CC  5160               	movf	___wmul@multiplier& (0+255),w,b
 20958  0054CE  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 20959  0054D0  50F3               	movf	prodl,w,c
 20960  0054D2  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 20961  0054D4  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 20962  0054D6  0362               	mulwf	___wmul@multiplicand& (0+255),b
 20963  0054D8  50F3               	movf	prodl,w,c
 20964  0054DA  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 20965                           
 20966                           ; BSR set to: 0
 20967  0054DC  C064  F060         	movff	___wmul@product,?___wmul
 20968  0054E0  C065  F061         	movff	___wmul@product+1,?___wmul+1
 20969  0054E4  0012               	return	
 20970  0054E6                     __end_of___wmul:
 20971                           	opt stack 0
 20972                           tblptru	equ	0xFF8
 20973                           tblptrh	equ	0xFF7
 20974                           tblptrl	equ	0xFF6
 20975                           tablat	equ	0xFF5
 20976                           prodh	equ	0xFF4
 20977                           prodl	equ	0xFF3
 20978                           intcon	equ	0xFF2
 20979                           intcon3	equ	0xFF0
 20980                           indf0	equ	0xFEF
 20981                           postinc0	equ	0xFEE
 20982                           plusw0	equ	0xFEB
 20983                           fsr0h	equ	0xFEA
 20984                           fsr0l	equ	0xFE9
 20985                           wreg	equ	0xFE8
 20986                           indf1	equ	0xFE7
 20987                           postinc1	equ	0xFE6
 20988                           postdec1	equ	0xFE5
 20989                           plusw1	equ	0xFE3
 20990                           fsr1h	equ	0xFE2
 20991                           fsr1l	equ	0xFE1
 20992                           indf2	equ	0xFDF
 20993                           postinc2	equ	0xFDE
 20994                           postdec2	equ	0xFDD
 20995                           plusw2	equ	0xFDB
 20996                           fsr2h	equ	0xFDA
 20997                           fsr2l	equ	0xFD9
 20998                           status	equ	0xFD8
 20999                           
 21000 ;; *************** function _ethernetController_writeEtherTypeFieldToBuffer *****************
 21001 ;; Defined at:
 21002 ;;		line 241 in file "src/enc424j600/ENC424J600.c"
 21003 ;; Parameters:    Size  Location     Type
 21004 ;;  ethtype         2   15[BANK0 ] enum E5508
 21005 ;;  field           9   17[BANK0 ] struct memoryField
 21006 ;; Auto vars:     Size  Location     Type
 21007 ;;  opcode          1   28[BANK0 ] unsigned char 
 21008 ;;  highByte        1   27[BANK0 ] unsigned char 
 21009 ;;  lowByte         1   26[BANK0 ] unsigned char 
 21010 ;; Return value:  Size  Location     Type
 21011 ;;                  1    wreg      void 
 21012 ;; Registers used:
 21013 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21014 ;; Tracked objects:
 21015 ;;		On entry : 0/0
 21016 ;;		On exit  : 0/0
 21017 ;;		Unchanged: 0/0
 21018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21019 ;;      Params:         0      11       0       0       0       0       0       0       0
 21020 ;;      Locals:         0       3       0       0       0       0       0       0       0
 21021 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21022 ;;      Totals:         0      14       0       0       0       0       0       0       0
 21023 ;;Total ram usage:       14 bytes
 21024 ;; Hardware stack levels used:    1
 21025 ;; Hardware stack levels required when called:    7
 21026 ;; This function calls:
 21027 ;;		_enc424j600_setGPDATAWritePointer
 21028 ;;		_enc424j600_writeSPI
 21029 ;; This function is called by:
 21030 ;;		_ethernet_txFrameRequest
 21031 ;; This function uses a non-reentrant model
 21032 ;;
 21033                           
 21034                           	psect	text80
 21035  004F62                     __ptext80:
 21036                           	opt stack 0
 21037  004F62                     _ethernetController_writeEtherTypeFieldToBuffer:
 21038                           	opt stack 21
 21039                           
 21040                           ;ENC424J600.c: 242: enc424j600_setGPDATAWritePointer(field.start + 0x0006);
 21041                           
 21042                           ; BSR set to: 0
 21043                           ;incstack = 0
 21044  004F62  0E06               	movlw	6
 21045  004F64  0100               	movlb	0	; () banked
 21046  004F66  2571               	addwf	ethernetController_writeEtherTypeFieldToBuffer@field& (0+255),w,b
 21047  004F68  6F6A               	movwf	enc424j600_setGPDATAWritePointer@addr& (0+255),b
 21048  004F6A  0E00               	movlw	0
 21049  004F6C  2172               	addwfc	(ethernetController_writeEtherTypeFieldToBuffer@field+1)& (0+255),w,b
 21050  004F6E  6F6B               	movwf	(enc424j600_setGPDATAWritePointer@addr+1)& (0+255),b
 21051  004F70  ECED  F028         	call	_enc424j600_setGPDATAWritePointer	;wreg free
 21052                           
 21053                           ;ENC424J600.c: 243: uint8_t lowByte = ethtype & 0x00ff;
 21054  004F74  C06F  F07A         	movff	ethernetController_writeEtherTypeFieldToBuffer@ethtype,ethernetController_writeEt
      +                          herTypeFieldToBuffer@lowByte
 21055                           
 21056                           ;ENC424J600.c: 244: uint8_t highByte = (ethtype & 0xff00) >> 8;
 21057  004F78  0100               	movlb	0	; () banked
 21058  004F7A  5170               	movf	(ethernetController_writeEtherTypeFieldToBuffer@ethtype+1)& (0+255),w,b
 21059  004F7C  6F7B               	movwf	ethernetController_writeEtherTypeFieldToBuffer@highByte& (0+255),b
 21060                           
 21061                           ; BSR set to: 0
 21062                           ;ENC424J600.c: 245: uint8_t opcode = 0x2A;
 21063  004F7E  0E2A               	movlw	42
 21064  004F80  6F7C               	movwf	ethernetController_writeEtherTypeFieldToBuffer@opcode& (0+255),b
 21065                           
 21066                           ; BSR set to: 0
 21067                           ;ENC424J600.c: 246: PORTBbits.RB4=0;
 21068  004F82  9881               	bcf	3969,4,c	;volatile
 21069                           
 21070                           ;ENC424J600.c: 247: enc424j600_writeSPI(&opcode);
 21071  004F84  0E7C               	movlw	low ethernetController_writeEtherTypeFieldToBuffer@opcode
 21072  004F86  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 21073  004F88  0E00               	movlw	high ethernetController_writeEtherTypeFieldToBuffer@opcode
 21074  004F8A  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 21075  004F8C  EC51  F026         	call	_enc424j600_writeSPI	;wreg free
 21076                           
 21077                           ;ENC424J600.c: 248: enc424j600_writeSPI(&highByte);
 21078  004F90  0E7B               	movlw	low ethernetController_writeEtherTypeFieldToBuffer@highByte
 21079  004F92  0100               	movlb	0	; () banked
 21080  004F94  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 21081  004F96  0E00               	movlw	high ethernetController_writeEtherTypeFieldToBuffer@highByte
 21082  004F98  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 21083  004F9A  EC51  F026         	call	_enc424j600_writeSPI	;wreg free
 21084                           
 21085                           ;ENC424J600.c: 249: enc424j600_writeSPI(&lowByte);
 21086  004F9E  0E7A               	movlw	low ethernetController_writeEtherTypeFieldToBuffer@lowByte
 21087  004FA0  0100               	movlb	0	; () banked
 21088  004FA2  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 21089  004FA4  0E00               	movlw	high ethernetController_writeEtherTypeFieldToBuffer@lowByte
 21090  004FA6  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 21091  004FA8  EC51  F026         	call	_enc424j600_writeSPI	;wreg free
 21092                           
 21093                           ;ENC424J600.c: 250: PORTBbits.RB4=1;
 21094  004FAC  8881               	bsf	3969,4,c	;volatile
 21095  004FAE  0012               	return		;funcret
 21096  004FB0                     __end_of_ethernetController_writeEtherTypeFieldToBuffer:
 21097                           	opt stack 0
 21098                           tblptru	equ	0xFF8
 21099                           tblptrh	equ	0xFF7
 21100                           tblptrl	equ	0xFF6
 21101                           tablat	equ	0xFF5
 21102                           prodh	equ	0xFF4
 21103                           prodl	equ	0xFF3
 21104                           intcon	equ	0xFF2
 21105                           intcon3	equ	0xFF0
 21106                           indf0	equ	0xFEF
 21107                           postinc0	equ	0xFEE
 21108                           plusw0	equ	0xFEB
 21109                           fsr0h	equ	0xFEA
 21110                           fsr0l	equ	0xFE9
 21111                           wreg	equ	0xFE8
 21112                           indf1	equ	0xFE7
 21113                           postinc1	equ	0xFE6
 21114                           postdec1	equ	0xFE5
 21115                           plusw1	equ	0xFE3
 21116                           fsr1h	equ	0xFE2
 21117                           fsr1l	equ	0xFE1
 21118                           indf2	equ	0xFDF
 21119                           postinc2	equ	0xFDE
 21120                           postdec2	equ	0xFDD
 21121                           plusw2	equ	0xFDB
 21122                           fsr2h	equ	0xFDA
 21123                           fsr2l	equ	0xFD9
 21124                           status	equ	0xFD8
 21125                           
 21126 ;; *************** function _ethernetController_writeDestinationMACAddress *****************
 21127 ;; Defined at:
 21128 ;;		line 228 in file "src/enc424j600/ENC424J600.c"
 21129 ;; Parameters:    Size  Location     Type
 21130 ;;  addr            6   15[BANK0 ] struct macaddress
 21131 ;;  field           9   21[BANK0 ] struct memoryField
 21132 ;; Auto vars:     Size  Location     Type
 21133 ;;  i               1   37[BANK0 ] unsigned char 
 21134 ;;  i               1   38[BANK0 ] unsigned char 
 21135 ;;  data            6   30[BANK0 ] unsigned char [6]
 21136 ;;  opcode          1   36[BANK0 ] unsigned char 
 21137 ;; Return value:  Size  Location     Type
 21138 ;;                  1    wreg      void 
 21139 ;; Registers used:
 21140 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21141 ;; Tracked objects:
 21142 ;;		On entry : 0/0
 21143 ;;		On exit  : 0/0
 21144 ;;		Unchanged: 0/0
 21145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21146 ;;      Params:         0      15       0       0       0       0       0       0       0
 21147 ;;      Locals:         0       9       0       0       0       0       0       0       0
 21148 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21149 ;;      Totals:         0      24       0       0       0       0       0       0       0
 21150 ;;Total ram usage:       24 bytes
 21151 ;; Hardware stack levels used:    1
 21152 ;; Hardware stack levels required when called:    7
 21153 ;; This function calls:
 21154 ;;		_enc424j600_setGPDATAWritePointer
 21155 ;;		_enc424j600_writeSPI
 21156 ;; This function is called by:
 21157 ;;		_ethernet_txFrameRequest
 21158 ;;		_ipv4_sendFrame
 21159 ;; This function uses a non-reentrant model
 21160 ;;
 21161                           
 21162                           	psect	text81
 21163  004732                     __ptext81:
 21164                           	opt stack 0
 21165  004732                     _ethernetController_writeDestinationMACAddress:
 21166                           	opt stack 21
 21167                           
 21168                           ;ENC424J600.c: 229: enc424j600_setGPDATAWritePointer(field.start);
 21169                           
 21170                           ;incstack = 0
 21171  004732  C075  F06A         	movff	ethernetController_writeDestinationMACAddress@field,enc424j600_setGPDATAWritePoin
      +                          ter@addr
 21172  004736  C076  F06B         	movff	ethernetController_writeDestinationMACAddress@field+1,enc424j600_setGPDATAWritePo
      +                          inter@addr+1
 21173  00473A  ECED  F028         	call	_enc424j600_setGPDATAWritePointer	;wreg free
 21174                           
 21175                           ;ENC424J600.c: 230: uint8_t data[6];
 21176                           ;ENC424J600.c: 231: for (uint8_t i = 0; i < 6; i++)
 21177  00473E  0E00               	movlw	0
 21178  004740  0100               	movlb	0	; () banked
 21179  004742  6F86               	movwf	ethernetController_writeDestinationMACAddress@i& (0+255),b
 21180  004744                     l8375:
 21181                           
 21182                           ; BSR set to: 0
 21183  004744  0E05               	movlw	5
 21184  004746  6586               	cpfsgt	ethernetController_writeDestinationMACAddress@i& (0+255),b
 21185  004748  D001               	goto	l140
 21186  00474A  D014               	goto	u9130
 21187  00474C                     l140:
 21188                           
 21189                           ; BSR set to: 0
 21190                           ;ENC424J600.c: 232: data[i] = addr.address[i];
 21191                           
 21192                           ; BSR set to: 0
 21193  00474C  5186               	movf	ethernetController_writeDestinationMACAddress@i& (0+255),w,b
 21194  00474E  0D01               	mullw	1
 21195  004750  0E6F               	movlw	low ethernetController_writeDestinationMACAddress@addr
 21196  004752  24F3               	addwf	prodl,w,c
 21197  004754  6ED9               	movwf	fsr2l,c
 21198  004756  0E00               	movlw	high ethernetController_writeDestinationMACAddress@addr
 21199  004758  20F4               	addwfc	prodh,w,c
 21200  00475A  6EDA               	movwf	fsr2h,c
 21201  00475C  5186               	movf	ethernetController_writeDestinationMACAddress@i& (0+255),w,b
 21202  00475E  0D01               	mullw	1
 21203  004760  0E7E               	movlw	low ethernetController_writeDestinationMACAddress@data
 21204  004762  24F3               	addwf	prodl,w,c
 21205  004764  6EE1               	movwf	fsr1l,c
 21206  004766  0E00               	movlw	high ethernetController_writeDestinationMACAddress@data
 21207  004768  20F4               	addwfc	prodh,w,c
 21208  00476A  6EE2               	movwf	fsr1h,c
 21209  00476C  CFDF FFE7          	movff	indf2,indf1
 21210                           
 21211                           ; BSR set to: 0
 21212  004770  2B86               	incf	ethernetController_writeDestinationMACAddress@i& (0+255),f,b
 21213  004772  D7E8               	goto	l8375
 21214  004774                     u9130:
 21215                           
 21216                           ; BSR set to: 0
 21217                           ;ENC424J600.c: 233: uint8_t opcode = 0x2A;
 21218                           
 21219                           ; BSR set to: 0
 21220  004774  0E2A               	movlw	42
 21221  004776  6F84               	movwf	ethernetController_writeDestinationMACAddress@opcode& (0+255),b
 21222                           
 21223                           ; BSR set to: 0
 21224                           ;ENC424J600.c: 234: PORTBbits.RB4=0;
 21225  004778  9881               	bcf	3969,4,c	;volatile
 21226                           
 21227                           ; BSR set to: 0
 21228                           ;ENC424J600.c: 235: enc424j600_writeSPI(&opcode);
 21229  00477A  0E84               	movlw	low ethernetController_writeDestinationMACAddress@opcode
 21230  00477C  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 21231  00477E  0E00               	movlw	high ethernetController_writeDestinationMACAddress@opcode
 21232  004780  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 21233  004782  EC51  F026         	call	_enc424j600_writeSPI	;wreg free
 21234                           
 21235                           ;ENC424J600.c: 236: for (uint8_t i = 0; i < 6; i++)
 21236  004786  0E00               	movlw	0
 21237  004788  0100               	movlb	0	; () banked
 21238  00478A  6F85               	movwf	ethernetController_writeDestinationMACAddress@i_638& (0+255),b
 21239  00478C                     l8393:
 21240                           
 21241                           ; BSR set to: 0
 21242  00478C  0E05               	movlw	5
 21243  00478E  6585               	cpfsgt	ethernetController_writeDestinationMACAddress@i_638& (0+255),b
 21244  004790  D001               	goto	l142
 21245  004792  D00D               	goto	u9150
 21246  004794                     l142:
 21247                           
 21248                           ; BSR set to: 0
 21249                           ;ENC424J600.c: 237: enc424j600_writeSPI(&data[i]);
 21250                           
 21251                           ; BSR set to: 0
 21252  004794  5185               	movf	ethernetController_writeDestinationMACAddress@i_638& (0+255),w,b
 21253  004796  0D01               	mullw	1
 21254  004798  0E7E               	movlw	low ethernetController_writeDestinationMACAddress@data
 21255  00479A  24F3               	addwf	prodl,w,c
 21256  00479C  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 21257  00479E  0E00               	movlw	high ethernetController_writeDestinationMACAddress@data
 21258  0047A0  20F4               	addwfc	prodh,w,c
 21259  0047A2  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 21260  0047A4  EC51  F026         	call	_enc424j600_writeSPI	;wreg free
 21261  0047A8  0100               	movlb	0	; () banked
 21262  0047AA  2B85               	incf	ethernetController_writeDestinationMACAddress@i_638& (0+255),f,b
 21263  0047AC  D7EF               	goto	l8393
 21264  0047AE                     u9150:
 21265                           
 21266                           ; BSR set to: 0
 21267                           ;ENC424J600.c: 238: PORTBbits.RB4=1;
 21268  0047AE  8881               	bsf	3969,4,c	;volatile
 21269                           
 21270                           ; BSR set to: 0
 21271  0047B0  0012               	return		;funcret
 21272  0047B2                     __end_of_ethernetController_writeDestinationMACAddress:
 21273                           	opt stack 0
 21274                           tblptru	equ	0xFF8
 21275                           tblptrh	equ	0xFF7
 21276                           tblptrl	equ	0xFF6
 21277                           tablat	equ	0xFF5
 21278                           prodh	equ	0xFF4
 21279                           prodl	equ	0xFF3
 21280                           intcon	equ	0xFF2
 21281                           intcon3	equ	0xFF0
 21282                           indf0	equ	0xFEF
 21283                           postinc0	equ	0xFEE
 21284                           plusw0	equ	0xFEB
 21285                           fsr0h	equ	0xFEA
 21286                           fsr0l	equ	0xFE9
 21287                           wreg	equ	0xFE8
 21288                           indf1	equ	0xFE7
 21289                           postinc1	equ	0xFE6
 21290                           postdec1	equ	0xFE5
 21291                           plusw1	equ	0xFE3
 21292                           fsr1h	equ	0xFE2
 21293                           fsr1l	equ	0xFE1
 21294                           indf2	equ	0xFDF
 21295                           postinc2	equ	0xFDE
 21296                           postdec2	equ	0xFDD
 21297                           plusw2	equ	0xFDB
 21298                           fsr2h	equ	0xFDA
 21299                           fsr2l	equ	0xFD9
 21300                           status	equ	0xFD8
 21301                           
 21302 ;; *************** function _ethernetController_streamToTransmitBuffer *****************
 21303 ;; Defined at:
 21304 ;;		line 208 in file "src/enc424j600/ENC424J600.c"
 21305 ;; Parameters:    Size  Location     Type
 21306 ;;  data            1    wreg     unsigned char 
 21307 ;;  field           9   15[BANK0 ] struct memoryField
 21308 ;; Auto vars:     Size  Location     Type
 21309 ;;  data            1   28[BANK0 ] unsigned char 
 21310 ;;  opcode          1   29[BANK0 ] unsigned char 
 21311 ;; Return value:  Size  Location     Type
 21312 ;;                  1    wreg      void 
 21313 ;; Registers used:
 21314 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21315 ;; Tracked objects:
 21316 ;;		On entry : 0/0
 21317 ;;		On exit  : 0/0
 21318 ;;		Unchanged: 0/0
 21319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21320 ;;      Params:         0       9       0       0       0       0       0       0       0
 21321 ;;      Locals:         0       2       0       0       0       0       0       0       0
 21322 ;;      Temps:          0       4       0       0       0       0       0       0       0
 21323 ;;      Totals:         0      15       0       0       0       0       0       0       0
 21324 ;;Total ram usage:       15 bytes
 21325 ;; Hardware stack levels used:    1
 21326 ;; Hardware stack levels required when called:    7
 21327 ;; This function calls:
 21328 ;;		_enc424j600_setGPDATAWritePointer
 21329 ;;		_enc424j600_writeSPI
 21330 ;; This function is called by:
 21331 ;;		_arp_send
 21332 ;;		_ipv4_streamToTransmissionBuffer
 21333 ;; This function uses a non-reentrant model
 21334 ;;
 21335                           
 21336                           	psect	text82
 21337  0048AA                     __ptext82:
 21338                           	opt stack 0
 21339  0048AA                     _ethernetController_streamToTransmitBuffer:
 21340                           	opt stack 22
 21341                           
 21342                           ; BSR set to: 0
 21343                           ;incstack = 0
 21344                           ;ethernetController_streamToTransmitBuffer@data stored from wreg
 21345  0048AA  0100               	movlb	0	; () banked
 21346  0048AC  6F7C               	movwf	ethernetController_streamToTransmitBuffer@data& (0+255),b
 21347                           
 21348                           ;ENC424J600.c: 209: uint8_t opcode;
 21349                           ;ENC424J600.c: 210: uint16_t static pointer = 0;
 21350                           ;ENC424J600.c: 211: if (pointer == 0) {
 21351  0048AE  503E               	movf	ethernetController_streamToTransmitBuffer@pointer,w,c
 21352  0048B0  103F               	iorwf	ethernetController_streamToTransmitBuffer@pointer+1,w,c
 21353  0048B2  A4D8               	btfss	status,2,c
 21354  0048B4  D010               	goto	l134
 21355                           
 21356                           ;ENC424J600.c: 212: enc424j600_setGPDATAWritePointer(field.start);
 21357  0048B6  C06F  F06A         	movff	ethernetController_streamToTransmitBuffer@field,enc424j600_setGPDATAWritePointer@
      +                          addr
 21358  0048BA  C070  F06B         	movff	ethernetController_streamToTransmitBuffer@field+1,enc424j600_setGPDATAWritePointe
      +                          r@addr+1
 21359  0048BE  ECED  F028         	call	_enc424j600_setGPDATAWritePointer	;wreg free
 21360                           
 21361                           ;ENC424J600.c: 213: opcode = 0x2A;
 21362  0048C2  0E2A               	movlw	42
 21363  0048C4  0100               	movlb	0	; () banked
 21364  0048C6  6F7D               	movwf	ethernetController_streamToTransmitBuffer@opcode& (0+255),b
 21365                           
 21366                           ; BSR set to: 0
 21367                           ;ENC424J600.c: 214: PORTBbits.RB4=0;
 21368  0048C8  9881               	bcf	3969,4,c	;volatile
 21369                           
 21370                           ; BSR set to: 0
 21371                           ;ENC424J600.c: 215: enc424j600_writeSPI(&opcode);
 21372  0048CA  0E7D               	movlw	low ethernetController_streamToTransmitBuffer@opcode
 21373  0048CC  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 21374  0048CE  0E00               	movlw	high ethernetController_streamToTransmitBuffer@opcode
 21375  0048D0  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 21376  0048D2  EC51  F026         	call	_enc424j600_writeSPI	;wreg free
 21377  0048D6                     l134:
 21378                           
 21379                           ;ENC424J600.c: 216: }
 21380                           ;ENC424J600.c: 218: enc424j600_writeSPI(&data);
 21381  0048D6  0E7C               	movlw	low ethernetController_streamToTransmitBuffer@data
 21382  0048D8  0100               	movlb	0	; () banked
 21383  0048DA  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 21384  0048DC  0E00               	movlw	high ethernetController_streamToTransmitBuffer@data
 21385  0048DE  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 21386  0048E0  EC51  F026         	call	_enc424j600_writeSPI	;wreg free
 21387                           
 21388                           ;ENC424J600.c: 220: if (pointer == field.length - 1) {
 21389  0048E4  0EFF               	movlw	255
 21390  0048E6  0100               	movlb	0	; () banked
 21391  0048E8  6F78               	movwf	??_ethernetController_streamToTransmitBuffer& (0+255),b
 21392  0048EA  0EFF               	movlw	255
 21393  0048EC  6F79               	movwf	(??_ethernetController_streamToTransmitBuffer+1)& (0+255),b
 21394  0048EE  EE20  F073         	lfsr	2,ethernetController_streamToTransmitBuffer@field+4
 21395  0048F2  CFDE F07A          	movff	postinc2,??_ethernetController_streamToTransmitBuffer+2
 21396  0048F6  CFDD F07B          	movff	postdec2,??_ethernetController_streamToTransmitBuffer+3
 21397  0048FA  5178               	movf	??_ethernetController_streamToTransmitBuffer& (0+255),w,b
 21398  0048FC  277A               	addwf	(??_ethernetController_streamToTransmitBuffer+2)& (0+255),f,b
 21399  0048FE  5179               	movf	(??_ethernetController_streamToTransmitBuffer+1)& (0+255),w,b
 21400  004900  237B               	addwfc	(??_ethernetController_streamToTransmitBuffer+3)& (0+255),f,b
 21401  004902  503E               	movf	ethernetController_streamToTransmitBuffer@pointer,w,c
 21402  004904  197A               	xorwf	(??_ethernetController_streamToTransmitBuffer+2)& (0+255),w,b
 21403  004906  E10A               	bnz	l8653
 21404  004908  503F               	movf	ethernetController_streamToTransmitBuffer@pointer+1,w,c
 21405  00490A  197B               	xorwf	(??_ethernetController_streamToTransmitBuffer+3)& (0+255),w,b
 21406  00490C  A4D8               	btfss	status,2,c
 21407  00490E  D006               	goto	l135
 21408                           
 21409                           ; BSR set to: 0
 21410                           ;ENC424J600.c: 221: PORTBbits.RB4=1;
 21411  004910  8881               	bsf	3969,4,c	;volatile
 21412                           
 21413                           ; BSR set to: 0
 21414                           ;ENC424J600.c: 222: pointer = 0;
 21415  004912  0E00               	movlw	0
 21416  004914  6E3F               	movwf	ethernetController_streamToTransmitBuffer@pointer+1,c
 21417  004916  0E00               	movlw	0
 21418  004918  6E3E               	movwf	ethernetController_streamToTransmitBuffer@pointer,c
 21419                           
 21420                           ;ENC424J600.c: 223: } else {
 21421  00491A  0012               	return	
 21422  00491C                     l135:
 21423  00491C                     l8653:
 21424                           
 21425                           ; BSR set to: 0
 21426                           ;ENC424J600.c: 224: pointer++;
 21427  00491C  4A3E               	infsnz	ethernetController_streamToTransmitBuffer@pointer,f,c
 21428  00491E  2A3F               	incf	ethernetController_streamToTransmitBuffer@pointer+1,f,c
 21429  004920  0012               	return	
 21430  004922                     __end_of_ethernetController_streamToTransmitBuffer:
 21431                           	opt stack 0
 21432                           tblptru	equ	0xFF8
 21433                           tblptrh	equ	0xFF7
 21434                           tblptrl	equ	0xFF6
 21435                           tablat	equ	0xFF5
 21436                           prodh	equ	0xFF4
 21437                           prodl	equ	0xFF3
 21438                           intcon	equ	0xFF2
 21439                           intcon3	equ	0xFF0
 21440                           indf0	equ	0xFEF
 21441                           postinc0	equ	0xFEE
 21442                           plusw0	equ	0xFEB
 21443                           fsr0h	equ	0xFEA
 21444                           fsr0l	equ	0xFE9
 21445                           wreg	equ	0xFE8
 21446                           indf1	equ	0xFE7
 21447                           postinc1	equ	0xFE6
 21448                           postdec1	equ	0xFE5
 21449                           plusw1	equ	0xFE3
 21450                           fsr1h	equ	0xFE2
 21451                           fsr1l	equ	0xFE1
 21452                           indf2	equ	0xFDF
 21453                           postinc2	equ	0xFDE
 21454                           postdec2	equ	0xFDD
 21455                           plusw2	equ	0xFDB
 21456                           fsr2h	equ	0xFDA
 21457                           fsr2l	equ	0xFD9
 21458                           status	equ	0xFD8
 21459                           
 21460 ;; *************** function _enc424j600_setGPDATAWritePointer *****************
 21461 ;; Defined at:
 21462 ;;		line 609 in file "src/enc424j600/ENC424J600.c"
 21463 ;; Parameters:    Size  Location     Type
 21464 ;;  addr            2   10[BANK0 ] unsigned int 
 21465 ;; Auto vars:     Size  Location     Type
 21466 ;;  highByte        1   14[BANK0 ] unsigned char 
 21467 ;;  lowByte         1   13[BANK0 ] unsigned char 
 21468 ;;  opcode          1   12[BANK0 ] unsigned char 
 21469 ;; Return value:  Size  Location     Type
 21470 ;;                  1    wreg      void 
 21471 ;; Registers used:
 21472 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21473 ;; Tracked objects:
 21474 ;;		On entry : 0/0
 21475 ;;		On exit  : 0/0
 21476 ;;		Unchanged: 0/0
 21477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21478 ;;      Params:         0       2       0       0       0       0       0       0       0
 21479 ;;      Locals:         0       3       0       0       0       0       0       0       0
 21480 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21481 ;;      Totals:         0       5       0       0       0       0       0       0       0
 21482 ;;Total ram usage:        5 bytes
 21483 ;; Hardware stack levels used:    1
 21484 ;; Hardware stack levels required when called:    6
 21485 ;; This function calls:
 21486 ;;		_enc424j600_writeSPI
 21487 ;; This function is called by:
 21488 ;;		_ethernetController_streamToTransmitBuffer
 21489 ;;		_ethernetController_writeDestinationMACAddress
 21490 ;;		_ethernetController_writeEtherTypeFieldToBuffer
 21491 ;; This function uses a non-reentrant model
 21492 ;;
 21493                           
 21494                           	psect	text83
 21495  0051DA                     __ptext83:
 21496                           	opt stack 0
 21497  0051DA                     _enc424j600_setGPDATAWritePointer:
 21498                           	opt stack 21
 21499                           
 21500                           ;ENC424J600.c: 610: uint8_t opcode = 0x6C;
 21501                           
 21502                           ; BSR set to: 0
 21503                           ;incstack = 0
 21504  0051DA  0E6C               	movlw	108
 21505  0051DC  0100               	movlb	0	; () banked
 21506  0051DE  6F6C               	movwf	enc424j600_setGPDATAWritePointer@opcode& (0+255),b
 21507                           
 21508                           ; BSR set to: 0
 21509                           ;ENC424J600.c: 611: uint8_t lowByte = addr & 0x00ff;
 21510  0051E0  C06A  F06D         	movff	enc424j600_setGPDATAWritePointer@addr,enc424j600_setGPDATAWritePointer@lowByte
 21511                           
 21512                           ;ENC424J600.c: 612: uint8_t highByte = (addr & 0xff00) >> 8;
 21513  0051E4  516B               	movf	(enc424j600_setGPDATAWritePointer@addr+1)& (0+255),w,b
 21514  0051E6  6F6E               	movwf	enc424j600_setGPDATAWritePointer@highByte& (0+255),b
 21515                           
 21516                           ; BSR set to: 0
 21517                           ;ENC424J600.c: 613: PORTBbits.RB4=0;
 21518  0051E8  9881               	bcf	3969,4,c	;volatile
 21519                           
 21520                           ; BSR set to: 0
 21521                           ;ENC424J600.c: 614: enc424j600_writeSPI(&opcode);
 21522  0051EA  0E6C               	movlw	low enc424j600_setGPDATAWritePointer@opcode
 21523  0051EC  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 21524  0051EE  0E00               	movlw	high enc424j600_setGPDATAWritePointer@opcode
 21525  0051F0  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 21526  0051F2  EC51  F026         	call	_enc424j600_writeSPI	;wreg free
 21527                           
 21528                           ;ENC424J600.c: 615: enc424j600_writeSPI(&lowByte);
 21529  0051F6  0E6D               	movlw	low enc424j600_setGPDATAWritePointer@lowByte
 21530  0051F8  0100               	movlb	0	; () banked
 21531  0051FA  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 21532  0051FC  0E00               	movlw	high enc424j600_setGPDATAWritePointer@lowByte
 21533  0051FE  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 21534  005200  EC51  F026         	call	_enc424j600_writeSPI	;wreg free
 21535                           
 21536                           ;ENC424J600.c: 616: enc424j600_writeSPI(&highByte);
 21537  005204  0E6E               	movlw	low enc424j600_setGPDATAWritePointer@highByte
 21538  005206  0100               	movlb	0	; () banked
 21539  005208  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 21540  00520A  0E00               	movlw	high enc424j600_setGPDATAWritePointer@highByte
 21541  00520C  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 21542  00520E  EC51  F026         	call	_enc424j600_writeSPI	;wreg free
 21543                           
 21544                           ;ENC424J600.c: 617: PORTBbits.RB4=1;
 21545  005212  8881               	bsf	3969,4,c	;volatile
 21546  005214  0012               	return		;funcret
 21547  005216                     __end_of_enc424j600_setGPDATAWritePointer:
 21548                           	opt stack 0
 21549                           tblptru	equ	0xFF8
 21550                           tblptrh	equ	0xFF7
 21551                           tblptrl	equ	0xFF6
 21552                           tablat	equ	0xFF5
 21553                           prodh	equ	0xFF4
 21554                           prodl	equ	0xFF3
 21555                           intcon	equ	0xFF2
 21556                           intcon3	equ	0xFF0
 21557                           indf0	equ	0xFEF
 21558                           postinc0	equ	0xFEE
 21559                           plusw0	equ	0xFEB
 21560                           fsr0h	equ	0xFEA
 21561                           fsr0l	equ	0xFE9
 21562                           wreg	equ	0xFE8
 21563                           indf1	equ	0xFE7
 21564                           postinc1	equ	0xFE6
 21565                           postdec1	equ	0xFE5
 21566                           plusw1	equ	0xFE3
 21567                           fsr1h	equ	0xFE2
 21568                           fsr1l	equ	0xFE1
 21569                           indf2	equ	0xFDF
 21570                           postinc2	equ	0xFDE
 21571                           postdec2	equ	0xFDD
 21572                           plusw2	equ	0xFDB
 21573                           fsr2h	equ	0xFDA
 21574                           fsr2l	equ	0xFD9
 21575                           status	equ	0xFD8
 21576                           
 21577 ;; *************** function _ethernetController_sendPacket *****************
 21578 ;; Defined at:
 21579 ;;		line 201 in file "src/enc424j600/ENC424J600.c"
 21580 ;; Parameters:    Size  Location     Type
 21581 ;;  field           9   18[BANK0 ] struct memoryField
 21582 ;; Auto vars:     Size  Location     Type
 21583 ;;		None
 21584 ;; Return value:  Size  Location     Type
 21585 ;;                  1    wreg      void 
 21586 ;; Registers used:
 21587 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21588 ;; Tracked objects:
 21589 ;;		On entry : 0/0
 21590 ;;		On exit  : 0/0
 21591 ;;		Unchanged: 0/0
 21592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21593 ;;      Params:         0       9       0       0       0       0       0       0       0
 21594 ;;      Locals:         0       0       0       0       0       0       0       0       0
 21595 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21596 ;;      Totals:         0       9       0       0       0       0       0       0       0
 21597 ;;Total ram usage:        9 bytes
 21598 ;; Hardware stack levels used:    1
 21599 ;; Hardware stack levels required when called:    8
 21600 ;; This function calls:
 21601 ;;		_enc424j600_setTXLength
 21602 ;;		_enc424j600_setTXStartAddress
 21603 ;;		_enc424j600_writeSingleByte
 21604 ;;		_memory_txFrameClear
 21605 ;; This function is called by:
 21606 ;;		_arp_send
 21607 ;;		_ipv4_sendFrame
 21608 ;; This function uses a non-reentrant model
 21609 ;;
 21610                           
 21611                           	psect	text84
 21612  0054E6                     __ptext84:
 21613                           	opt stack 0
 21614  0054E6                     _ethernetController_sendPacket:
 21615                           	opt stack 20
 21616                           
 21617                           ;ENC424J600.c: 202: enc424j600_setTXStartAddress(field.start);
 21618                           
 21619                           ;incstack = 0
 21620  0054E6  C072  F06E         	movff	ethernetController_sendPacket@field,enc424j600_setTXStartAddress@addr
 21621  0054EA  C073  F06F         	movff	ethernetController_sendPacket@field+1,enc424j600_setTXStartAddress@addr+1
 21622  0054EE  ECF7  F029         	call	_enc424j600_setTXStartAddress	;wreg free
 21623                           
 21624                           ;ENC424J600.c: 203: enc424j600_setTXLength(field.length);
 21625  0054F2  C076  F06E         	movff	ethernetController_sendPacket@field+4,enc424j600_setTXLength@len
 21626  0054F6  C077  F06F         	movff	ethernetController_sendPacket@field+5,enc424j600_setTXLength@len+1
 21627  0054FA  EC0C  F02A         	call	_enc424j600_setTXLength	;wreg free
 21628                           
 21629                           ;ENC424J600.c: 204: enc424j600_writeSingleByte(0b11010100);
 21630  0054FE  0ED4               	movlw	212
 21631  005500  EC53  F02B         	call	_enc424j600_writeSingleByte
 21632                           
 21633                           ;ENC424J600.c: 205: memory_txFrameClear(field.index);
 21634  005504  0100               	movlb	0	; () banked
 21635  005506  517A               	movf	(ethernetController_sendPacket@field+8)& (0+255),w,b
 21636  005508  ECD4  F02A         	call	_memory_txFrameClear
 21637  00550C  0012               	return		;funcret
 21638  00550E                     __end_of_ethernetController_sendPacket:
 21639                           	opt stack 0
 21640                           tblptru	equ	0xFF8
 21641                           tblptrh	equ	0xFF7
 21642                           tblptrl	equ	0xFF6
 21643                           tablat	equ	0xFF5
 21644                           prodh	equ	0xFF4
 21645                           prodl	equ	0xFF3
 21646                           intcon	equ	0xFF2
 21647                           intcon3	equ	0xFF0
 21648                           indf0	equ	0xFEF
 21649                           postinc0	equ	0xFEE
 21650                           plusw0	equ	0xFEB
 21651                           fsr0h	equ	0xFEA
 21652                           fsr0l	equ	0xFE9
 21653                           wreg	equ	0xFE8
 21654                           indf1	equ	0xFE7
 21655                           postinc1	equ	0xFE6
 21656                           postdec1	equ	0xFE5
 21657                           plusw1	equ	0xFE3
 21658                           fsr1h	equ	0xFE2
 21659                           fsr1l	equ	0xFE1
 21660                           indf2	equ	0xFDF
 21661                           postinc2	equ	0xFDE
 21662                           postdec2	equ	0xFDD
 21663                           plusw2	equ	0xFDB
 21664                           fsr2h	equ	0xFDA
 21665                           fsr2l	equ	0xFD9
 21666                           status	equ	0xFD8
 21667                           
 21668 ;; *************** function _memory_txFrameClear *****************
 21669 ;; Defined at:
 21670 ;;		line 221 in file "src/mem/memoryController.c"
 21671 ;; Parameters:    Size  Location     Type
 21672 ;;  index           1    wreg     unsigned char 
 21673 ;; Auto vars:     Size  Location     Type
 21674 ;;  index           1    0[BANK0 ] unsigned char 
 21675 ;; Return value:  Size  Location     Type
 21676 ;;                  1    wreg      void 
 21677 ;; Registers used:
 21678 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 21679 ;; Tracked objects:
 21680 ;;		On entry : 0/0
 21681 ;;		On exit  : 0/0
 21682 ;;		Unchanged: 0/0
 21683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21684 ;;      Params:         0       0       0       0       0       0       0       0       0
 21685 ;;      Locals:         0       1       0       0       0       0       0       0       0
 21686 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21687 ;;      Totals:         0       1       0       0       0       0       0       0       0
 21688 ;;Total ram usage:        1 bytes
 21689 ;; Hardware stack levels used:    1
 21690 ;; Hardware stack levels required when called:    4
 21691 ;; This function calls:
 21692 ;;		Nothing
 21693 ;; This function is called by:
 21694 ;;		_ethernetController_sendPacket
 21695 ;; This function uses a non-reentrant model
 21696 ;;
 21697                           
 21698                           	psect	text85
 21699  0055A8                     __ptext85:
 21700                           	opt stack 0
 21701  0055A8                     _memory_txFrameClear:
 21702                           	opt stack 23
 21703                           
 21704                           ;incstack = 0
 21705                           ;memory_txFrameClear@index stored from wreg
 21706  0055A8  0100               	movlb	0	; () banked
 21707  0055AA  6F60               	movwf	memory_txFrameClear@index& (0+255),b
 21708                           
 21709                           ;memoryController.c: 222: occupiedMemory[index].fIsAssigned = 0;
 21710  0055AC  0100               	movlb	0	; () banked
 21711  0055AE  5160               	movf	memory_txFrameClear@index& (0+255),w,b
 21712  0055B0  0D09               	mullw	9
 21713  0055B2  0E06               	movlw	6
 21714  0055B4  26F3               	addwf	prodl,f,c
 21715  0055B6  0E00               	movlw	0
 21716  0055B8  22F4               	addwfc	prodh,f,c
 21717  0055BA  0E00               	movlw	low _occupiedMemory
 21718  0055BC  24F3               	addwf	prodl,w,c
 21719  0055BE  6ED9               	movwf	fsr2l,c
 21720  0055C0  0E02               	movlw	high _occupiedMemory
 21721  0055C2  20F4               	addwfc	prodh,w,c
 21722  0055C4  6EDA               	movwf	fsr2h,c
 21723  0055C6  0E00               	movlw	0
 21724  0055C8  6EDF               	movwf	indf2,c
 21725                           
 21726                           ; BSR set to: 0
 21727  0055CA  0012               	return		;funcret
 21728  0055CC                     __end_of_memory_txFrameClear:
 21729                           	opt stack 0
 21730                           tblptru	equ	0xFF8
 21731                           tblptrh	equ	0xFF7
 21732                           tblptrl	equ	0xFF6
 21733                           tablat	equ	0xFF5
 21734                           prodh	equ	0xFF4
 21735                           prodl	equ	0xFF3
 21736                           intcon	equ	0xFF2
 21737                           intcon3	equ	0xFF0
 21738                           indf0	equ	0xFEF
 21739                           postinc0	equ	0xFEE
 21740                           plusw0	equ	0xFEB
 21741                           fsr0h	equ	0xFEA
 21742                           fsr0l	equ	0xFE9
 21743                           wreg	equ	0xFE8
 21744                           indf1	equ	0xFE7
 21745                           postinc1	equ	0xFE6
 21746                           postdec1	equ	0xFE5
 21747                           plusw1	equ	0xFE3
 21748                           fsr1h	equ	0xFE2
 21749                           fsr1l	equ	0xFE1
 21750                           indf2	equ	0xFDF
 21751                           postinc2	equ	0xFDE
 21752                           postdec2	equ	0xFDD
 21753                           plusw2	equ	0xFDB
 21754                           fsr2h	equ	0xFDA
 21755                           fsr2l	equ	0xFD9
 21756                           status	equ	0xFD8
 21757                           
 21758 ;; *************** function _enc424j600_setTXStartAddress *****************
 21759 ;; Defined at:
 21760 ;;		line 602 in file "src/enc424j600/ENC424J600.c"
 21761 ;; Parameters:    Size  Location     Type
 21762 ;;  addr            2   14[BANK0 ] unsigned int 
 21763 ;; Auto vars:     Size  Location     Type
 21764 ;;  highByte        1   17[BANK0 ] unsigned char 
 21765 ;;  lowByte         1   16[BANK0 ] unsigned char 
 21766 ;; Return value:  Size  Location     Type
 21767 ;;                  1    wreg      void 
 21768 ;; Registers used:
 21769 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21770 ;; Tracked objects:
 21771 ;;		On entry : 0/0
 21772 ;;		On exit  : 0/0
 21773 ;;		Unchanged: 0/0
 21774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21775 ;;      Params:         0       2       0       0       0       0       0       0       0
 21776 ;;      Locals:         0       2       0       0       0       0       0       0       0
 21777 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21778 ;;      Totals:         0       4       0       0       0       0       0       0       0
 21779 ;;Total ram usage:        4 bytes
 21780 ;; Hardware stack levels used:    1
 21781 ;; Hardware stack levels required when called:    7
 21782 ;; This function calls:
 21783 ;;		_enc424j600_writeControlRegisterUnbanked
 21784 ;; This function is called by:
 21785 ;;		_ethernetController_sendPacket
 21786 ;; This function uses a non-reentrant model
 21787 ;;
 21788                           
 21789                           	psect	text86
 21790  0053EE                     __ptext86:
 21791                           	opt stack 0
 21792  0053EE                     _enc424j600_setTXStartAddress:
 21793                           	opt stack 20
 21794                           
 21795                           ;ENC424J600.c: 603: uint8_t lowByte = addr & 0xff;
 21796                           
 21797                           ; BSR set to: 0
 21798                           ;incstack = 0
 21799  0053EE  C06E  F070         	movff	enc424j600_setTXStartAddress@addr,enc424j600_setTXStartAddress@lowByte
 21800                           
 21801                           ;ENC424J600.c: 604: uint8_t highByte = (addr & 0xff00) >> 8;
 21802  0053F2  0100               	movlb	0	; () banked
 21803  0053F4  516F               	movf	(enc424j600_setTXStartAddress@addr+1)& (0+255),w,b
 21804  0053F6  6F71               	movwf	enc424j600_setTXStartAddress@highByte& (0+255),b
 21805                           
 21806                           ; BSR set to: 0
 21807                           ;ENC424J600.c: 605: enc424j600_writeControlRegisterUnbanked(0x00 + 0x00, &lowByte);
 21808  0053F8  0E70               	movlw	low enc424j600_setTXStartAddress@lowByte
 21809  0053FA  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 21810  0053FC  0E00               	movlw	high enc424j600_setTXStartAddress@lowByte
 21811  0053FE  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 21812  005400  0E00               	movlw	0
 21813  005402  EC61  F029         	call	_enc424j600_writeControlRegisterUnbanked
 21814                           
 21815                           ;ENC424J600.c: 606: enc424j600_writeControlRegisterUnbanked(0x01 + 0x00, &highByte);
 21816  005406  0E71               	movlw	low enc424j600_setTXStartAddress@highByte
 21817  005408  0100               	movlb	0	; () banked
 21818  00540A  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 21819  00540C  0E00               	movlw	high enc424j600_setTXStartAddress@highByte
 21820  00540E  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 21821  005410  0E01               	movlw	1
 21822  005412  EC61  F029         	call	_enc424j600_writeControlRegisterUnbanked
 21823  005416  0012               	return		;funcret
 21824  005418                     __end_of_enc424j600_setTXStartAddress:
 21825                           	opt stack 0
 21826                           tblptru	equ	0xFF8
 21827                           tblptrh	equ	0xFF7
 21828                           tblptrl	equ	0xFF6
 21829                           tablat	equ	0xFF5
 21830                           prodh	equ	0xFF4
 21831                           prodl	equ	0xFF3
 21832                           intcon	equ	0xFF2
 21833                           intcon3	equ	0xFF0
 21834                           indf0	equ	0xFEF
 21835                           postinc0	equ	0xFEE
 21836                           plusw0	equ	0xFEB
 21837                           fsr0h	equ	0xFEA
 21838                           fsr0l	equ	0xFE9
 21839                           wreg	equ	0xFE8
 21840                           indf1	equ	0xFE7
 21841                           postinc1	equ	0xFE6
 21842                           postdec1	equ	0xFE5
 21843                           plusw1	equ	0xFE3
 21844                           fsr1h	equ	0xFE2
 21845                           fsr1l	equ	0xFE1
 21846                           indf2	equ	0xFDF
 21847                           postinc2	equ	0xFDE
 21848                           postdec2	equ	0xFDD
 21849                           plusw2	equ	0xFDB
 21850                           fsr2h	equ	0xFDA
 21851                           fsr2l	equ	0xFD9
 21852                           status	equ	0xFD8
 21853                           
 21854 ;; *************** function _enc424j600_setTXLength *****************
 21855 ;; Defined at:
 21856 ;;		line 577 in file "src/enc424j600/ENC424J600.c"
 21857 ;; Parameters:    Size  Location     Type
 21858 ;;  len             2   14[BANK0 ] unsigned int 
 21859 ;; Auto vars:     Size  Location     Type
 21860 ;;  highByte        1   17[BANK0 ] unsigned char 
 21861 ;;  lowByte         1   16[BANK0 ] unsigned char 
 21862 ;; Return value:  Size  Location     Type
 21863 ;;                  1    wreg      void 
 21864 ;; Registers used:
 21865 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21866 ;; Tracked objects:
 21867 ;;		On entry : 0/0
 21868 ;;		On exit  : 0/0
 21869 ;;		Unchanged: 0/0
 21870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21871 ;;      Params:         0       2       0       0       0       0       0       0       0
 21872 ;;      Locals:         0       2       0       0       0       0       0       0       0
 21873 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21874 ;;      Totals:         0       4       0       0       0       0       0       0       0
 21875 ;;Total ram usage:        4 bytes
 21876 ;; Hardware stack levels used:    1
 21877 ;; Hardware stack levels required when called:    7
 21878 ;; This function calls:
 21879 ;;		_enc424j600_writeControlRegisterUnbanked
 21880 ;; This function is called by:
 21881 ;;		_ethernetController_sendPacket
 21882 ;; This function uses a non-reentrant model
 21883 ;;
 21884                           
 21885                           	psect	text87
 21886  005418                     __ptext87:
 21887                           	opt stack 0
 21888  005418                     _enc424j600_setTXLength:
 21889                           	opt stack 20
 21890                           
 21891                           ;ENC424J600.c: 578: uint8_t lowByte = len & 0x00ff;
 21892                           
 21893                           ;incstack = 0
 21894  005418  C06E  F070         	movff	enc424j600_setTXLength@len,enc424j600_setTXLength@lowByte
 21895                           
 21896                           ;ENC424J600.c: 579: uint8_t highByte = len >> 8;
 21897  00541C  0100               	movlb	0	; () banked
 21898  00541E  516F               	movf	(enc424j600_setTXLength@len+1)& (0+255),w,b
 21899  005420  6F71               	movwf	enc424j600_setTXLength@highByte& (0+255),b
 21900                           
 21901                           ; BSR set to: 0
 21902                           ;ENC424J600.c: 580: enc424j600_writeControlRegisterUnbanked(0x02 + 0x00, &lowByte);
 21903  005422  0E70               	movlw	low enc424j600_setTXLength@lowByte
 21904  005424  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 21905  005426  0E00               	movlw	high enc424j600_setTXLength@lowByte
 21906  005428  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 21907  00542A  0E02               	movlw	2
 21908  00542C  EC61  F029         	call	_enc424j600_writeControlRegisterUnbanked
 21909                           
 21910                           ;ENC424J600.c: 581: enc424j600_writeControlRegisterUnbanked(0x03 + 0x00, &highByte);
 21911  005430  0E71               	movlw	low enc424j600_setTXLength@highByte
 21912  005432  0100               	movlb	0	; () banked
 21913  005434  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 21914  005436  0E00               	movlw	high enc424j600_setTXLength@highByte
 21915  005438  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 21916  00543A  0E03               	movlw	3
 21917  00543C  EC61  F029         	call	_enc424j600_writeControlRegisterUnbanked
 21918  005440  0012               	return		;funcret
 21919  005442                     __end_of_enc424j600_setTXLength:
 21920                           	opt stack 0
 21921                           tblptru	equ	0xFF8
 21922                           tblptrh	equ	0xFF7
 21923                           tblptrl	equ	0xFF6
 21924                           tablat	equ	0xFF5
 21925                           prodh	equ	0xFF4
 21926                           prodl	equ	0xFF3
 21927                           intcon	equ	0xFF2
 21928                           intcon3	equ	0xFF0
 21929                           indf0	equ	0xFEF
 21930                           postinc0	equ	0xFEE
 21931                           plusw0	equ	0xFEB
 21932                           fsr0h	equ	0xFEA
 21933                           fsr0l	equ	0xFE9
 21934                           wreg	equ	0xFE8
 21935                           indf1	equ	0xFE7
 21936                           postinc1	equ	0xFE6
 21937                           postdec1	equ	0xFE5
 21938                           plusw1	equ	0xFE3
 21939                           fsr1h	equ	0xFE2
 21940                           fsr1l	equ	0xFE1
 21941                           indf2	equ	0xFDF
 21942                           postinc2	equ	0xFDE
 21943                           postdec2	equ	0xFDD
 21944                           plusw2	equ	0xFDB
 21945                           fsr2h	equ	0xFDA
 21946                           fsr2l	equ	0xFD9
 21947                           status	equ	0xFD8
 21948                           
 21949 ;; *************** function _ethernetController_getSourceMACAddress *****************
 21950 ;; Defined at:
 21951 ;;		line 268 in file "src/enc424j600/ENC424J600.c"
 21952 ;; Parameters:    Size  Location     Type
 21953 ;;  field           9   15[BANK0 ] struct memoryField
 21954 ;; Auto vars:     Size  Location     Type
 21955 ;;  temp            1   31[BANK0 ] unsigned char 
 21956 ;;  i               1   32[BANK0 ] unsigned char 
 21957 ;;  sourceAddres    6   25[BANK0 ] struct macaddress
 21958 ;;  opcode          1   24[BANK0 ] unsigned char 
 21959 ;; Return value:  Size  Location     Type
 21960 ;;                  6   15[BANK0 ] struct macaddress
 21961 ;; Registers used:
 21962 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21963 ;; Tracked objects:
 21964 ;;		On entry : 0/0
 21965 ;;		On exit  : 0/0
 21966 ;;		Unchanged: 0/0
 21967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21968 ;;      Params:         0       9       0       0       0       0       0       0       0
 21969 ;;      Locals:         0       9       0       0       0       0       0       0       0
 21970 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21971 ;;      Totals:         0      18       0       0       0       0       0       0       0
 21972 ;;Total ram usage:       18 bytes
 21973 ;; Hardware stack levels used:    1
 21974 ;; Hardware stack levels required when called:    7
 21975 ;; This function calls:
 21976 ;;		_enc424j600_readSPI
 21977 ;;		_enc424j600_setERXDATAReadPointer
 21978 ;;		_enc424j600_writeSPI
 21979 ;; This function is called by:
 21980 ;;		_arp_send
 21981 ;; This function uses a non-reentrant model
 21982 ;;
 21983                           
 21984                           	psect	text88
 21985  004B60                     __ptext88:
 21986                           	opt stack 0
 21987  004B60                     _ethernetController_getSourceMACAddress:
 21988                           	opt stack 19
 21989                           
 21990                           ;ENC424J600.c: 269: macaddress_t sourceAddress;
 21991                           ;ENC424J600.c: 270: enc424j600_setERXDATAReadPointer(field.start + 14);
 21992                           
 21993                           ;incstack = 0
 21994  004B60  0E0E               	movlw	14
 21995  004B62  0100               	movlb	0	; () banked
 21996  004B64  256F               	addwf	ethernetController_getSourceMACAddress@field& (0+255),w,b
 21997  004B66  6F6A               	movwf	enc424j600_setERXDATAReadPointer@addr& (0+255),b
 21998  004B68  0E00               	movlw	0
 21999  004B6A  2170               	addwfc	(ethernetController_getSourceMACAddress@field+1)& (0+255),w,b
 22000  004B6C  6F6B               	movwf	(enc424j600_setERXDATAReadPointer@addr+1)& (0+255),b
 22001  004B6E  EC0B  F029         	call	_enc424j600_setERXDATAReadPointer	;wreg free
 22002                           
 22003                           ;ENC424J600.c: 271: uint8_t opcode = 0x2C;
 22004  004B72  0E2C               	movlw	44
 22005  004B74  0100               	movlb	0	; () banked
 22006  004B76  6F78               	movwf	ethernetController_getSourceMACAddress@opcode& (0+255),b
 22007                           
 22008                           ; BSR set to: 0
 22009                           ;ENC424J600.c: 272: PORTBbits.RB4=0;
 22010  004B78  9881               	bcf	3969,4,c	;volatile
 22011                           
 22012                           ; BSR set to: 0
 22013                           ;ENC424J600.c: 273: enc424j600_writeSPI(&opcode);
 22014  004B7A  0E78               	movlw	low ethernetController_getSourceMACAddress@opcode
 22015  004B7C  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 22016  004B7E  0E00               	movlw	high ethernetController_getSourceMACAddress@opcode
 22017  004B80  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 22018  004B82  EC51  F026         	call	_enc424j600_writeSPI	;wreg free
 22019                           
 22020                           ;ENC424J600.c: 274: for (uint8_t i = 0; i < 6; i++) {
 22021  004B86  0E00               	movlw	0
 22022  004B88  0100               	movlb	0	; () banked
 22023  004B8A  6F80               	movwf	ethernetController_getSourceMACAddress@i& (0+255),b
 22024  004B8C                     l8663:
 22025                           
 22026                           ; BSR set to: 0
 22027  004B8C  0E05               	movlw	5
 22028  004B8E  6580               	cpfsgt	ethernetController_getSourceMACAddress@i& (0+255),b
 22029  004B90  D001               	goto	l155
 22030  004B92  D013               	goto	u9630
 22031  004B94                     l155:
 22032                           
 22033                           ; BSR set to: 0
 22034                           ;ENC424J600.c: 275: uint8_t temp;
 22035                           ;ENC424J600.c: 276: enc424j600_readSPI(&temp);
 22036                           
 22037                           ; BSR set to: 0
 22038  004B94  0E7F               	movlw	low ethernetController_getSourceMACAddress@temp
 22039  004B96  6F60               	movwf	enc424j600_readSPI@data& (0+255),b
 22040  004B98  0E00               	movlw	high ethernetController_getSourceMACAddress@temp
 22041  004B9A  6F61               	movwf	(enc424j600_readSPI@data+1)& (0+255),b
 22042  004B9C  ECE8  F025         	call	_enc424j600_readSPI	;wreg free
 22043                           
 22044                           ;ENC424J600.c: 277: sourceAddress.address[i] = temp;
 22045  004BA0  0100               	movlb	0	; () banked
 22046  004BA2  5180               	movf	ethernetController_getSourceMACAddress@i& (0+255),w,b
 22047  004BA4  0D01               	mullw	1
 22048  004BA6  0E79               	movlw	low ethernetController_getSourceMACAddress@sourceAddress
 22049  004BA8  24F3               	addwf	prodl,w,c
 22050  004BAA  6ED9               	movwf	fsr2l,c
 22051  004BAC  0E00               	movlw	high ethernetController_getSourceMACAddress@sourceAddress
 22052  004BAE  20F4               	addwfc	prodh,w,c
 22053  004BB0  6EDA               	movwf	fsr2h,c
 22054  004BB2  C07F  FFDF         	movff	ethernetController_getSourceMACAddress@temp,indf2
 22055                           
 22056                           ; BSR set to: 0
 22057  004BB6  2B80               	incf	ethernetController_getSourceMACAddress@i& (0+255),f,b
 22058  004BB8  D7E9               	goto	l8663
 22059  004BBA                     u9630:
 22060                           
 22061                           ; BSR set to: 0
 22062                           ;ENC424J600.c: 278: }
 22063                           ;ENC424J600.c: 279: PORTBbits.RB4=1;
 22064  004BBA  8881               	bsf	3969,4,c	;volatile
 22065                           
 22066                           ; BSR set to: 0
 22067                           ;ENC424J600.c: 280: return sourceAddress;
 22068  004BBC  EE20  F079         	lfsr	2,ethernetController_getSourceMACAddress@sourceAddress
 22069  004BC0  EE00  F06F         	lfsr	0,?_ethernetController_getSourceMACAddress
 22070  004BC4  0E05               	movlw	5
 22071  004BC6                     u9641:
 22072  004BC6  CFDB FFEB          	movff	plusw2,plusw0
 22073  004BCA  06E8               	decf	wreg,f,c
 22074  004BCC  E2FC               	bc	u9641
 22075  004BCE  0012               	return	
 22076  004BD0                     __end_of_ethernetController_getSourceMACAddress:
 22077                           	opt stack 0
 22078                           tblptru	equ	0xFF8
 22079                           tblptrh	equ	0xFF7
 22080                           tblptrl	equ	0xFF6
 22081                           tablat	equ	0xFF5
 22082                           prodh	equ	0xFF4
 22083                           prodl	equ	0xFF3
 22084                           intcon	equ	0xFF2
 22085                           intcon3	equ	0xFF0
 22086                           indf0	equ	0xFEF
 22087                           postinc0	equ	0xFEE
 22088                           plusw0	equ	0xFEB
 22089                           fsr0h	equ	0xFEA
 22090                           fsr0l	equ	0xFE9
 22091                           wreg	equ	0xFE8
 22092                           indf1	equ	0xFE7
 22093                           postinc1	equ	0xFE6
 22094                           postdec1	equ	0xFE5
 22095                           plusw1	equ	0xFE3
 22096                           fsr1h	equ	0xFE2
 22097                           fsr1l	equ	0xFE1
 22098                           indf2	equ	0xFDF
 22099                           postinc2	equ	0xFDE
 22100                           postdec2	equ	0xFDD
 22101                           plusw2	equ	0xFDB
 22102                           fsr2h	equ	0xFDA
 22103                           fsr2l	equ	0xFD9
 22104                           status	equ	0xFD8
 22105                           
 22106 ;; *************** function _enc424j600_setERXDATAReadPointer *****************
 22107 ;; Defined at:
 22108 ;;		line 631 in file "src/enc424j600/ENC424J600.c"
 22109 ;; Parameters:    Size  Location     Type
 22110 ;;  addr            2   10[BANK0 ] unsigned int 
 22111 ;; Auto vars:     Size  Location     Type
 22112 ;;  highByte        1   14[BANK0 ] unsigned char 
 22113 ;;  lowByte         1   13[BANK0 ] unsigned char 
 22114 ;;  opcode          1   12[BANK0 ] unsigned char 
 22115 ;; Return value:  Size  Location     Type
 22116 ;;                  1    wreg      void 
 22117 ;; Registers used:
 22118 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 22119 ;; Tracked objects:
 22120 ;;		On entry : 0/0
 22121 ;;		On exit  : 0/0
 22122 ;;		Unchanged: 0/0
 22123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22124 ;;      Params:         0       2       0       0       0       0       0       0       0
 22125 ;;      Locals:         0       3       0       0       0       0       0       0       0
 22126 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22127 ;;      Totals:         0       5       0       0       0       0       0       0       0
 22128 ;;Total ram usage:        5 bytes
 22129 ;; Hardware stack levels used:    1
 22130 ;; Hardware stack levels required when called:    6
 22131 ;; This function calls:
 22132 ;;		_enc424j600_writeSPI
 22133 ;; This function is called by:
 22134 ;;		_ethernetController_getSourceMACAddress
 22135 ;;		_ethernetController_getEtherTypeField
 22136 ;;		_ethernetController_getRSV
 22137 ;;		_ethernetController_updateNextPacketPointer
 22138 ;;		_ethernetController_streamFromRXBuffer
 22139 ;;		_ethernetController_getDestinationMACAddress
 22140 ;; This function uses a non-reentrant model
 22141 ;;
 22142                           
 22143                           	psect	text89
 22144  005216                     __ptext89:
 22145                           	opt stack 0
 22146  005216                     _enc424j600_setERXDATAReadPointer:
 22147                           	opt stack 19
 22148                           
 22149                           ;ENC424J600.c: 632: uint8_t opcode = 0x64;
 22150                           
 22151                           ; BSR set to: 0
 22152                           ;incstack = 0
 22153  005216  0E64               	movlw	100
 22154  005218  0100               	movlb	0	; () banked
 22155  00521A  6F6C               	movwf	enc424j600_setERXDATAReadPointer@opcode& (0+255),b
 22156                           
 22157                           ; BSR set to: 0
 22158                           ;ENC424J600.c: 633: uint8_t lowByte = addr & 0x00ff;
 22159  00521C  C06A  F06D         	movff	enc424j600_setERXDATAReadPointer@addr,enc424j600_setERXDATAReadPointer@lowByte
 22160                           
 22161                           ;ENC424J600.c: 634: uint8_t highByte = (addr >> 8) & 0xff;
 22162  005220  516B               	movf	(enc424j600_setERXDATAReadPointer@addr+1)& (0+255),w,b
 22163  005222  6F6E               	movwf	enc424j600_setERXDATAReadPointer@highByte& (0+255),b
 22164                           
 22165                           ; BSR set to: 0
 22166                           ;ENC424J600.c: 635: PORTBbits.RB4=0;
 22167  005224  9881               	bcf	3969,4,c	;volatile
 22168                           
 22169                           ; BSR set to: 0
 22170                           ;ENC424J600.c: 636: enc424j600_writeSPI(&opcode);
 22171  005226  0E6C               	movlw	low enc424j600_setERXDATAReadPointer@opcode
 22172  005228  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 22173  00522A  0E00               	movlw	high enc424j600_setERXDATAReadPointer@opcode
 22174  00522C  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 22175  00522E  EC51  F026         	call	_enc424j600_writeSPI	;wreg free
 22176                           
 22177                           ;ENC424J600.c: 637: enc424j600_writeSPI(&lowByte);
 22178  005232  0E6D               	movlw	low enc424j600_setERXDATAReadPointer@lowByte
 22179  005234  0100               	movlb	0	; () banked
 22180  005236  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 22181  005238  0E00               	movlw	high enc424j600_setERXDATAReadPointer@lowByte
 22182  00523A  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 22183  00523C  EC51  F026         	call	_enc424j600_writeSPI	;wreg free
 22184                           
 22185                           ;ENC424J600.c: 638: enc424j600_writeSPI(&highByte);
 22186  005240  0E6E               	movlw	low enc424j600_setERXDATAReadPointer@highByte
 22187  005242  0100               	movlb	0	; () banked
 22188  005244  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 22189  005246  0E00               	movlw	high enc424j600_setERXDATAReadPointer@highByte
 22190  005248  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 22191  00524A  EC51  F026         	call	_enc424j600_writeSPI	;wreg free
 22192                           
 22193                           ;ENC424J600.c: 639: PORTBbits.RB4=1;
 22194  00524E  8881               	bsf	3969,4,c	;volatile
 22195  005250  0012               	return		;funcret
 22196  005252                     __end_of_enc424j600_setERXDATAReadPointer:
 22197                           	opt stack 0
 22198                           tblptru	equ	0xFF8
 22199                           tblptrh	equ	0xFF7
 22200                           tblptrl	equ	0xFF6
 22201                           tablat	equ	0xFF5
 22202                           prodh	equ	0xFF4
 22203                           prodl	equ	0xFF3
 22204                           intcon	equ	0xFF2
 22205                           intcon3	equ	0xFF0
 22206                           indf0	equ	0xFEF
 22207                           postinc0	equ	0xFEE
 22208                           plusw0	equ	0xFEB
 22209                           fsr0h	equ	0xFEA
 22210                           fsr0l	equ	0xFE9
 22211                           wreg	equ	0xFE8
 22212                           indf1	equ	0xFE7
 22213                           postinc1	equ	0xFE6
 22214                           postdec1	equ	0xFE5
 22215                           plusw1	equ	0xFE3
 22216                           fsr1h	equ	0xFE2
 22217                           fsr1l	equ	0xFE1
 22218                           indf2	equ	0xFDF
 22219                           postinc2	equ	0xFDE
 22220                           postdec2	equ	0xFDD
 22221                           plusw2	equ	0xFDB
 22222                           fsr2h	equ	0xFDA
 22223                           fsr2l	equ	0xFD9
 22224                           status	equ	0xFD8
 22225                           
 22226 ;; *************** function _arp_checkForEntry *****************
 22227 ;; Defined at:
 22228 ;;		line 453 in file "src/stack/protocols/arp.c"
 22229 ;; Parameters:    Size  Location     Type
 22230 ;;  ip              4    7[BANK0 ] struct ipv4_address
 22231 ;;  index           2   11[BANK0 ] PTR unsigned char 
 22232 ;;		 -> ipv4_sendFrame@index(1), arp_gratuitous@index(1), arp_probe@index(1), 
 22233 ;; Auto vars:     Size  Location     Type
 22234 ;;  i               1   21[BANK0 ] unsigned char 
 22235 ;; Return value:  Size  Location     Type
 22236 ;;                  1    wreg      unsigned char 
 22237 ;; Registers used:
 22238 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22239 ;; Tracked objects:
 22240 ;;		On entry : 0/0
 22241 ;;		On exit  : 0/0
 22242 ;;		Unchanged: 0/0
 22243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22244 ;;      Params:         0       6       0       0       0       0       0       0       0
 22245 ;;      Locals:         0       1       0       0       0       0       0       0       0
 22246 ;;      Temps:          0       8       0       0       0       0       0       0       0
 22247 ;;      Totals:         0      15       0       0       0       0       0       0       0
 22248 ;;Total ram usage:       15 bytes
 22249 ;; Hardware stack levels used:    1
 22250 ;; Hardware stack levels required when called:    5
 22251 ;; This function calls:
 22252 ;;		_getMillis
 22253 ;;		_ipv4_cmp
 22254 ;; This function is called by:
 22255 ;;		_arp_probe
 22256 ;;		_arp_gratuitous
 22257 ;;		_ipv4_sendFrame
 22258 ;; This function uses a non-reentrant model
 22259 ;;
 22260                           
 22261                           	psect	text90
 22262  00412E                     __ptext90:
 22263                           	opt stack 0
 22264  00412E                     _arp_checkForEntry:
 22265                           	opt stack 23
 22266                           
 22267                           ;arp.c: 454: for (uint8_t i = 0; i < 8u; i++) {
 22268                           
 22269                           ;incstack = 0
 22270  00412E  0E00               	movlw	0
 22271  004130  0100               	movlb	0	; () banked
 22272  004132  6F75               	movwf	arp_checkForEntry@i& (0+255),b
 22273  004134                     l9435:
 22274                           
 22275                           ; BSR set to: 0
 22276  004134  0E07               	movlw	7
 22277  004136  6575               	cpfsgt	arp_checkForEntry@i& (0+255),b
 22278  004138  D001               	goto	l1051
 22279  00413A  D050               	goto	u11220
 22280  00413C                     l1051:
 22281                           
 22282                           ; BSR set to: 0
 22283                           ;arp.c: 455: if (ipv4_cmp(&arp_table[i].ip, &ip)) {
 22284                           
 22285                           ; BSR set to: 0
 22286  00413C  5175               	movf	arp_checkForEntry@i& (0+255),w,b
 22287  00413E  0D0E               	mullw	14
 22288  004140  0E00               	movlw	low _arp_table
 22289  004142  24F3               	addwf	prodl,w,c
 22290  004144  6F60               	movwf	ipv4_cmp@a& (0+255),b
 22291  004146  0E03               	movlw	high _arp_table
 22292  004148  20F4               	addwfc	prodh,w,c
 22293  00414A  6F61               	movwf	(ipv4_cmp@a+1)& (0+255),b
 22294  00414C  0E67               	movlw	low arp_checkForEntry@ip
 22295  00414E  6F62               	movwf	ipv4_cmp@b& (0+255),b
 22296  004150  0E00               	movlw	high arp_checkForEntry@ip
 22297  004152  6F63               	movwf	(ipv4_cmp@b+1)& (0+255),b
 22298  004154  ECAE  F028         	call	_ipv4_cmp	;wreg free
 22299  004158  0100               	movlb	0	; () banked
 22300  00415A  A0D8               	btfss	status,0,c
 22301  00415C  D03D               	goto	l1054
 22302                           
 22303                           ; BSR set to: 0
 22304                           ;arp.c: 456: if (getMillis() - arp_table[i].timeCreated < 30000u) {
 22305  00415E  5175               	movf	arp_checkForEntry@i& (0+255),w,b
 22306  004160  0D0E               	mullw	14
 22307  004162  0E0A               	movlw	10
 22308  004164  26F3               	addwf	prodl,f,c
 22309  004166  0E00               	movlw	0
 22310  004168  22F4               	addwfc	prodh,f,c
 22311  00416A  0E00               	movlw	low _arp_table
 22312  00416C  24F3               	addwf	prodl,w,c
 22313  00416E  6ED9               	movwf	fsr2l,c
 22314  004170  0E03               	movlw	high _arp_table
 22315  004172  20F4               	addwfc	prodh,w,c
 22316  004174  6EDA               	movwf	fsr2h,c
 22317  004176  CFDE F06D          	movff	postinc2,??_arp_checkForEntry
 22318  00417A  CFDE F06E          	movff	postinc2,??_arp_checkForEntry+1
 22319  00417E  CFDE F06F          	movff	postinc2,??_arp_checkForEntry+2
 22320  004182  CFDE F070          	movff	postinc2,??_arp_checkForEntry+3
 22321  004186  1F6D               	comf	??_arp_checkForEntry& (0+255),f,b
 22322  004188  1F6E               	comf	(??_arp_checkForEntry+1)& (0+255),f,b
 22323  00418A  1F6F               	comf	(??_arp_checkForEntry+2)& (0+255),f,b
 22324  00418C  1F70               	comf	(??_arp_checkForEntry+3)& (0+255),f,b
 22325  00418E  2B6D               	incf	??_arp_checkForEntry& (0+255),f,b
 22326  004190  0E00               	movlw	0
 22327  004192  236E               	addwfc	(??_arp_checkForEntry+1)& (0+255),f,b
 22328  004194  236F               	addwfc	(??_arp_checkForEntry+2)& (0+255),f,b
 22329  004196  2370               	addwfc	(??_arp_checkForEntry+3)& (0+255),f,b
 22330  004198  EC8E  F02B         	call	_getMillis	;wreg free
 22331  00419C  0100               	movlb	0	; () banked
 22332  00419E  516D               	movf	??_arp_checkForEntry& (0+255),w,b
 22333  0041A0  2560               	addwf	?_getMillis& (0+255),w,b
 22334  0041A2  6F71               	movwf	(??_arp_checkForEntry+4)& (0+255),b
 22335  0041A4  516E               	movf	(??_arp_checkForEntry+1)& (0+255),w,b
 22336  0041A6  2161               	addwfc	(?_getMillis+1)& (0+255),w,b
 22337  0041A8  6F72               	movwf	(??_arp_checkForEntry+5)& (0+255),b
 22338  0041AA  516F               	movf	(??_arp_checkForEntry+2)& (0+255),w,b
 22339  0041AC  2162               	addwfc	(?_getMillis+2)& (0+255),w,b
 22340  0041AE  6F73               	movwf	(??_arp_checkForEntry+6)& (0+255),b
 22341  0041B0  5170               	movf	(??_arp_checkForEntry+3)& (0+255),w,b
 22342  0041B2  2163               	addwfc	(?_getMillis+3)& (0+255),w,b
 22343  0041B4  6F74               	movwf	(??_arp_checkForEntry+7)& (0+255),b
 22344  0041B6  5174               	movf	(??_arp_checkForEntry+7)& (0+255),w,b
 22345  0041B8  1173               	iorwf	(??_arp_checkForEntry+6)& (0+255),w,b
 22346  0041BA  E10E               	bnz	l9449
 22347  0041BC  0E30               	movlw	48
 22348  0041BE  5D71               	subwf	(??_arp_checkForEntry+4)& (0+255),w,b
 22349  0041C0  0E75               	movlw	117
 22350  0041C2  5972               	subwfb	(??_arp_checkForEntry+5)& (0+255),w,b
 22351  0041C4  B0D8               	btfsc	status,0,c
 22352  0041C6  D008               	goto	l1054
 22353                           
 22354                           ; BSR set to: 0
 22355                           ;arp.c: 458: *index = i;
 22356  0041C8  C06B  FFD9         	movff	arp_checkForEntry@index,fsr2l
 22357  0041CC  C06C  FFDA         	movff	arp_checkForEntry@index+1,fsr2h
 22358  0041D0  C075  FFDF         	movff	arp_checkForEntry@i,indf2
 22359                           
 22360                           ; BSR set to: 0
 22361                           ;arp.c: 459: return 1;
 22362  0041D4  0E01               	movlw	1
 22363                           
 22364                           ; BSR set to: 0
 22365  0041D6  0012               	return	
 22366  0041D8                     l1054:
 22367  0041D8                     l9449:
 22368                           
 22369                           ; BSR set to: 0
 22370  0041D8  2B75               	incf	arp_checkForEntry@i& (0+255),f,b
 22371  0041DA  D7AC               	goto	l9435
 22372  0041DC                     u11220:
 22373                           
 22374                           ; BSR set to: 0
 22375                           ;arp.c: 460: }
 22376                           ;arp.c: 461: }
 22377                           ;arp.c: 462: }
 22378                           ;arp.c: 463: return 0;
 22379                           
 22380                           ; BSR set to: 0
 22381  0041DC  0E00               	movlw	0
 22382  0041DE  0012               	return	
 22383  0041E0                     __end_of_arp_checkForEntry:
 22384                           	opt stack 0
 22385                           tblptru	equ	0xFF8
 22386                           tblptrh	equ	0xFF7
 22387                           tblptrl	equ	0xFF6
 22388                           tablat	equ	0xFF5
 22389                           prodh	equ	0xFF4
 22390                           prodl	equ	0xFF3
 22391                           intcon	equ	0xFF2
 22392                           intcon3	equ	0xFF0
 22393                           indf0	equ	0xFEF
 22394                           postinc0	equ	0xFEE
 22395                           plusw0	equ	0xFEB
 22396                           fsr0h	equ	0xFEA
 22397                           fsr0l	equ	0xFE9
 22398                           wreg	equ	0xFE8
 22399                           indf1	equ	0xFE7
 22400                           postinc1	equ	0xFE6
 22401                           postdec1	equ	0xFE5
 22402                           plusw1	equ	0xFE3
 22403                           fsr1h	equ	0xFE2
 22404                           fsr1l	equ	0xFE1
 22405                           indf2	equ	0xFDF
 22406                           postinc2	equ	0xFDE
 22407                           postdec2	equ	0xFDD
 22408                           plusw2	equ	0xFDB
 22409                           fsr2h	equ	0xFDA
 22410                           fsr2l	equ	0xFD9
 22411                           status	equ	0xFD8
 22412                           
 22413 ;; *************** function _ipv4_cmp *****************
 22414 ;; Defined at:
 22415 ;;		line 288 in file "src/stack/protocols/ipv4.c"
 22416 ;; Parameters:    Size  Location     Type
 22417 ;;  a               2    0[BANK0 ] PTR struct ipv4_address
 22418 ;;		 -> arp_table(112), arp_sendReply@request(32), arp_parseFromRXBuffer@arp(32), 
 22419 ;;  b               2    2[BANK0 ] PTR struct ipv4_address
 22420 ;;		 -> arp_checkForEntry@ip(4), arp_sendReply@myIP(4), arp_parseFromRXBuffer@arp(32), 
 22421 ;; Auto vars:     Size  Location     Type
 22422 ;;  i               1    6[BANK0 ] unsigned char 
 22423 ;; Return value:  Size  Location     Type
 22424 ;;		None               void
 22425 ;; Registers used:
 22426 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 22427 ;; Tracked objects:
 22428 ;;		On entry : 0/0
 22429 ;;		On exit  : 0/0
 22430 ;;		Unchanged: 0/0
 22431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22432 ;;      Params:         0       4       0       0       0       0       0       0       0
 22433 ;;      Locals:         0       1       0       0       0       0       0       0       0
 22434 ;;      Temps:          0       2       0       0       0       0       0       0       0
 22435 ;;      Totals:         0       7       0       0       0       0       0       0       0
 22436 ;;Total ram usage:        7 bytes
 22437 ;; Hardware stack levels used:    1
 22438 ;; Hardware stack levels required when called:    4
 22439 ;; This function calls:
 22440 ;;		Nothing
 22441 ;; This function is called by:
 22442 ;;		_arp_parseFromRXBuffer
 22443 ;;		_arp_sendReply
 22444 ;;		_arp_checkForEntry
 22445 ;; This function uses a non-reentrant model
 22446 ;;
 22447                           
 22448                           	psect	text91
 22449  00515C                     __ptext91:
 22450                           	opt stack 0
 22451  00515C                     _ipv4_cmp:
 22452                           	opt stack 23
 22453                           
 22454                           ;ipv4.c: 289: for (uint8_t i = 0; i < 4; i++) {
 22455                           
 22456                           ; BSR set to: 0
 22457                           ;incstack = 0
 22458  00515C  0E00               	movlw	0
 22459  00515E  0100               	movlb	0	; () banked
 22460  005160  6F66               	movwf	ipv4_cmp@i& (0+255),b
 22461  005162                     l9085:
 22462                           
 22463                           ; BSR set to: 0
 22464  005162  0E03               	movlw	3
 22465  005164  6566               	cpfsgt	ipv4_cmp@i& (0+255),b
 22466  005166  D001               	goto	l1188
 22467  005168  D018               	goto	u10210
 22468  00516A                     l1188:
 22469                           
 22470                           ; BSR set to: 0
 22471                           ;ipv4.c: 290: if (a->address[i] != b->address[i])
 22472                           
 22473                           ; BSR set to: 0
 22474  00516A  5166               	movf	ipv4_cmp@i& (0+255),w,b
 22475  00516C  0D01               	mullw	1
 22476  00516E  50F3               	movf	prodl,w,c
 22477  005170  2562               	addwf	ipv4_cmp@b& (0+255),w,b
 22478  005172  6ED9               	movwf	fsr2l,c
 22479  005174  50F4               	movf	prodh,w,c
 22480  005176  2163               	addwfc	(ipv4_cmp@b+1)& (0+255),w,b
 22481  005178  6EDA               	movwf	fsr2h,c
 22482  00517A  5166               	movf	ipv4_cmp@i& (0+255),w,b
 22483  00517C  0D01               	mullw	1
 22484  00517E  50F3               	movf	prodl,w,c
 22485  005180  2560               	addwf	ipv4_cmp@a& (0+255),w,b
 22486  005182  6EE1               	movwf	fsr1l,c
 22487  005184  50F4               	movf	prodh,w,c
 22488  005186  2161               	addwfc	(ipv4_cmp@a+1)& (0+255),w,b
 22489  005188  6EE2               	movwf	fsr1h,c
 22490  00518A  50DE               	movf	postinc2,w,c
 22491  00518C  18E6               	xorwf	postinc1,w,c
 22492  00518E  B4D8               	btfsc	status,2,c
 22493  005190  D002               	goto	l1190
 22494                           
 22495                           ; BSR set to: 0
 22496                           ;ipv4.c: 291: return 0;
 22497  005192  90D8               	bcf	status,0,c
 22498                           
 22499                           ; BSR set to: 0
 22500  005194  0012               	return	
 22501  005196                     l1190:
 22502                           
 22503                           ; BSR set to: 0
 22504                           
 22505                           ; BSR set to: 0
 22506  005196  2B66               	incf	ipv4_cmp@i& (0+255),f,b
 22507  005198  D7E4               	goto	l9085
 22508  00519A                     u10210:
 22509                           
 22510                           ; BSR set to: 0
 22511                           ;ipv4.c: 292: }
 22512                           ;ipv4.c: 293: return 1;
 22513                           
 22514                           ; BSR set to: 0
 22515  00519A  80D8               	bsf	status,0,c
 22516  00519C  0012               	return	
 22517  00519E                     __end_of_ipv4_cmp:
 22518                           	opt stack 0
 22519                           tblptru	equ	0xFF8
 22520                           tblptrh	equ	0xFF7
 22521                           tblptrl	equ	0xFF6
 22522                           tablat	equ	0xFF5
 22523                           prodh	equ	0xFF4
 22524                           prodl	equ	0xFF3
 22525                           intcon	equ	0xFF2
 22526                           intcon3	equ	0xFF0
 22527                           indf0	equ	0xFEF
 22528                           postinc0	equ	0xFEE
 22529                           plusw0	equ	0xFEB
 22530                           fsr0h	equ	0xFEA
 22531                           fsr0l	equ	0xFE9
 22532                           wreg	equ	0xFE8
 22533                           indf1	equ	0xFE7
 22534                           postinc1	equ	0xFE6
 22535                           postdec1	equ	0xFE5
 22536                           plusw1	equ	0xFE3
 22537                           fsr1h	equ	0xFE2
 22538                           fsr1l	equ	0xFE1
 22539                           indf2	equ	0xFDF
 22540                           postinc2	equ	0xFDE
 22541                           postdec2	equ	0xFDD
 22542                           plusw2	equ	0xFDB
 22543                           fsr2h	equ	0xFDA
 22544                           fsr2l	equ	0xFD9
 22545                           status	equ	0xFD8
 22546                           
 22547 ;; *************** function _getMillis *****************
 22548 ;; Defined at:
 22549 ;;		line 34 in file "src/stack/time.c"
 22550 ;; Parameters:    Size  Location     Type
 22551 ;;		None
 22552 ;; Auto vars:     Size  Location     Type
 22553 ;;		None
 22554 ;; Return value:  Size  Location     Type
 22555 ;;                  4    0[BANK0 ] unsigned long 
 22556 ;; Registers used:
 22557 ;;		None
 22558 ;; Tracked objects:
 22559 ;;		On entry : 0/0
 22560 ;;		On exit  : 0/0
 22561 ;;		Unchanged: 0/0
 22562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22563 ;;      Params:         0       4       0       0       0       0       0       0       0
 22564 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22565 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22566 ;;      Totals:         0       4       0       0       0       0       0       0       0
 22567 ;;Total ram usage:        4 bytes
 22568 ;; Hardware stack levels used:    1
 22569 ;; Hardware stack levels required when called:    4
 22570 ;; This function calls:
 22571 ;;		Nothing
 22572 ;; This function is called by:
 22573 ;;		_ethernet_rxGetNewFrame
 22574 ;;		_arp_handleNewPacket
 22575 ;;		_arp_probe
 22576 ;;		_arp_gratuitous
 22577 ;;		_arp_checkForEntry
 22578 ;;		_ipv4_sendFrame
 22579 ;; This function uses a non-reentrant model
 22580 ;;
 22581                           
 22582                           	psect	text92
 22583  00571C                     __ptext92:
 22584                           	opt stack 0
 22585  00571C                     _getMillis:
 22586                           	opt stack 24
 22587                           
 22588                           ;time.c: 35: return time;
 22589                           
 22590                           ; BSR set to: 0
 22591                           ;incstack = 0
 22592  00571C  C029  F060         	movff	_time,?_getMillis	;volatile
 22593  005720  C02A  F061         	movff	_time+1,?_getMillis+1	;volatile
 22594  005724  C02B  F062         	movff	_time+2,?_getMillis+2	;volatile
 22595  005728  C02C  F063         	movff	_time+3,?_getMillis+3	;volatile
 22596  00572C  0012               	return		;funcret
 22597  00572E                     __end_of_getMillis:
 22598                           	opt stack 0
 22599                           tblptru	equ	0xFF8
 22600                           tblptrh	equ	0xFF7
 22601                           tblptrl	equ	0xFF6
 22602                           tablat	equ	0xFF5
 22603                           prodh	equ	0xFF4
 22604                           prodl	equ	0xFF3
 22605                           intcon	equ	0xFF2
 22606                           intcon3	equ	0xFF0
 22607                           indf0	equ	0xFEF
 22608                           postinc0	equ	0xFEE
 22609                           plusw0	equ	0xFEB
 22610                           fsr0h	equ	0xFEA
 22611                           fsr0l	equ	0xFE9
 22612                           wreg	equ	0xFE8
 22613                           indf1	equ	0xFE7
 22614                           postinc1	equ	0xFE6
 22615                           postdec1	equ	0xFE5
 22616                           plusw1	equ	0xFE3
 22617                           fsr1h	equ	0xFE2
 22618                           fsr1l	equ	0xFE1
 22619                           indf2	equ	0xFDF
 22620                           postinc2	equ	0xFDE
 22621                           postdec2	equ	0xFDD
 22622                           plusw2	equ	0xFDB
 22623                           fsr2h	equ	0xFDA
 22624                           fsr2l	equ	0xFD9
 22625                           status	equ	0xFD8
 22626                           
 22627 ;; *************** function _UARTTransmitText *****************
 22628 ;; Defined at:
 22629 ;;		line 36 in file "src/system/uart.c"
 22630 ;; Parameters:    Size  Location     Type
 22631 ;;  str             2   56[BANK0 ] PTR const unsigned char 
 22632 ;;		 -> STR_113(27), STR_112(33), STR_111(19), STR_110(2), 
 22633 ;;		 -> STR_109(3), STR_108(3), STR_107(3), STR_106(3), 
 22634 ;;		 -> STR_105(5), STR_104(2), STR_103(2), STR_102(7), 
 22635 ;;		 -> STR_101(11), STR_100(3), STR_99(27), STR_98(3), 
 22636 ;;		 -> STR_97(8), STR_96(9), STR_95(3), STR_94(39), 
 22637 ;;		 -> STR_93(3), STR_92(3), STR_91(30), STR_90(33), 
 22638 ;;		 -> STR_89(39), STR_88(35), STR_87(58), STR_86(36), 
 22639 ;;		 -> STR_85(34), STR_84(3), STR_83(43), STR_82(4), 
 22640 ;;		 -> STR_81(12), STR_80(26), STR_79(2), STR_78(3), 
 22641 ;;		 -> STR_77(16), STR_76(15), STR_75(10), STR_74(2), 
 22642 ;;		 -> STR_73(3), STR_72(5), STR_71(3), STR_70(2), 
 22643 ;;		 -> STR_69(39), arpEntryToString@string(50), ipAdressToString@address(16), STR_68(17), 
 22644 ;;		 -> STR_67(4), STR_66(4), STR_65(5), STR_64(18), 
 22645 ;;		 -> STR_63(4), STR_62(5), macToString@address(18), hexToString@number(10), 
 22646 ;;		 -> intToString@number(10), STR_61(5), STR_60(9), STR_59(30), 
 22647 ;;		 -> STR_58(34), STR_57(55), STR_56(37), STR_55(15), 
 22648 ;;		 -> STR_54(14), STR_53(19), STR_52(30), STR_51(17), 
 22649 ;;		 -> STR_50(8), STR_49(29), STR_48(29), STR_47(20), 
 22650 ;;		 -> STR_46(19), STR_45(19), STR_44(13), STR_43(4), 
 22651 ;;		 -> STR_42(5), STR_41(32), STR_40(3), STR_39(15), 
 22652 ;;		 -> STR_38(51), STR_37(4), STR_36(23), STR_35(12), 
 22653 ;;		 -> STR_34(4), STR_33(9), STR_32(2), STR_31(12), 
 22654 ;;		 -> STR_30(24), STR_29(51), STR_28(49), STR_27(51), 
 22655 ;;		 -> STR_26(2), STR_25(3), STR_24(37), STR_23(38), 
 22656 ;;		 -> STR_22(40), STR_21(2), STR_20(3), STR_19(3), 
 22657 ;;		 -> STR_18(3), STR_17(5), STR_16(2), STR_15(3), 
 22658 ;;		 -> STR_14(5), STR_13(3), STR_12(3), STR_11(2), 
 22659 ;;		 -> STR_10(20), STR_9(7), STR_8(6), STR_7(2), 
 22660 ;;		 -> STR_6(2), STR_5(16), STR_4(10), STR_3(12), 
 22661 ;;		 -> STR_2(2), STR_1(2), ethernetController_getDeviceName@string(11), 
 22662 ;; Auto vars:     Size  Location     Type
 22663 ;;		None
 22664 ;; Return value:  Size  Location     Type
 22665 ;;                  1    wreg      void 
 22666 ;; Registers used:
 22667 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 22668 ;; Tracked objects:
 22669 ;;		On entry : 0/0
 22670 ;;		On exit  : 0/0
 22671 ;;		Unchanged: 0/0
 22672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22673 ;;      Params:         0       2       0       0       0       0       0       0       0
 22674 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22675 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22676 ;;      Totals:         0       2       0       0       0       0       0       0       0
 22677 ;;Total ram usage:        2 bytes
 22678 ;; Hardware stack levels used:    1
 22679 ;; Hardware stack levels required when called:    4
 22680 ;; This function calls:
 22681 ;;		Nothing
 22682 ;; This function is called by:
 22683 ;;		_ethernet_rxGetNewFrame
 22684 ;;		_handleStackBackgroundTasks
 22685 ;;		_main
 22686 ;;		_printEthernetState
 22687 ;;		_printErrorMessage
 22688 ;;		_UARTTransmitInt
 22689 ;;		_arp_handleNewPacket
 22690 ;;		_arp_sendReply
 22691 ;;		_arp_probe
 22692 ;;		_arp_gratuitous
 22693 ;;		_arp_background
 22694 ;;		_arp_setNewEntry
 22695 ;;		_arp_init
 22696 ;;		_ipv4_sendFrame
 22697 ;;		_ipv4_checkHeaderChecksum
 22698 ;;		_ipv4_handleNewPacket
 22699 ;;		_ipv4_background
 22700 ;;		_printArpTable
 22701 ;; This function uses a non-reentrant model
 22702 ;;
 22703                           
 22704                           	psect	text93
 22705  004E12                     __ptext93:
 22706                           	opt stack 0
 22707  004E12                     _UARTTransmitText:
 22708                           	opt stack 23
 22709                           
 22710                           ;uart.c: 37: while (*str) {
 22711                           
 22712                           ;incstack = 0
 22713  004E12  D016               	goto	u9860
 22714  004E14                     
 22715                           ;uart.c: 38: TXREG1 = *str++;
 22716  004E14  C098  FFF6         	movff	UARTTransmitText@str,tblptrl
 22717  004E18  C099  FFF7         	movff	UARTTransmitText@str+1,tblptrh
 22718  004E1C  6AF8               	clrf	tblptru,c
 22719  004E1E  0E07               	movlw	(high __ramtop+-1)
 22720  004E20  64F7               	cpfsgt	tblptrh,c
 22721  004E22  D003               	bra	u9857
 22722  004E24  0008               	tblrd		*
 22723  004E26  50F5               	movf	tablat,w,c
 22724  004E28  D005               	bra	u9850
 22725  004E2A                     u9857:
 22726  004E2A  CFF6 FFE9          	movff	tblptrl,fsr0l
 22727  004E2E  CFF7 FFEA          	movff	tblptrh,fsr0h
 22728  004E32  50EF               	movf	indf0,w,c
 22729  004E34                     u9850:
 22730  004E34  6EAD               	movwf	4013,c	;volatile
 22731  004E36  0100               	movlb	0	; () banked
 22732  004E38  4B98               	infsnz	UARTTransmitText@str& (0+255),f,b
 22733  004E3A  2B99               	incf	(UARTTransmitText@str+1)& (0+255),f,b
 22734  004E3C                     
 22735                           ; BSR set to: 0
 22736  004E3C  A2AC               	btfss	4012,1,c	;volatile
 22737  004E3E  D7FE               	goto	l787
 22738  004E40                     u9860:
 22739  004E40  C098  FFF6         	movff	UARTTransmitText@str,tblptrl
 22740  004E44  C099  FFF7         	movff	UARTTransmitText@str+1,tblptrh
 22741  004E48  6AF8               	clrf	tblptru,c
 22742  004E4A  0E07               	movlw	(high __ramtop+-1)
 22743  004E4C  64F7               	cpfsgt	tblptrh,c
 22744  004E4E  D003               	bra	u9877
 22745  004E50  0008               	tblrd		*
 22746  004E52  50F5               	movf	tablat,w,c
 22747  004E54  D005               	bra	u9870
 22748  004E56                     u9877:
 22749  004E56  CFF6 FFE9          	movff	tblptrl,fsr0l
 22750  004E5A  CFF7 FFEA          	movff	tblptrh,fsr0h
 22751  004E5E  50EF               	movf	indf0,w,c
 22752  004E60                     u9870:
 22753  004E60  0900               	iorlw	0
 22754  004E62  B4D8               	btfsc	status,2,c
 22755  004E64  0012               	return	
 22756  004E66  D7D6               	goto	l785
 22757  004E68                     __end_of_UARTTransmitText:
 22758                           	opt stack 0
 22759                           tblptru	equ	0xFF8
 22760                           tblptrh	equ	0xFF7
 22761                           tblptrl	equ	0xFF6
 22762                           tablat	equ	0xFF5
 22763                           prodh	equ	0xFF4
 22764                           prodl	equ	0xFF3
 22765                           intcon	equ	0xFF2
 22766                           intcon3	equ	0xFF0
 22767                           indf0	equ	0xFEF
 22768                           postinc0	equ	0xFEE
 22769                           plusw0	equ	0xFEB
 22770                           fsr0h	equ	0xFEA
 22771                           fsr0l	equ	0xFE9
 22772                           wreg	equ	0xFE8
 22773                           indf1	equ	0xFE7
 22774                           postinc1	equ	0xFE6
 22775                           postdec1	equ	0xFE5
 22776                           plusw1	equ	0xFE3
 22777                           fsr1h	equ	0xFE2
 22778                           fsr1l	equ	0xFE1
 22779                           indf2	equ	0xFDF
 22780                           postinc2	equ	0xFDE
 22781                           postdec2	equ	0xFDD
 22782                           plusw2	equ	0xFDB
 22783                           fsr2h	equ	0xFDA
 22784                           fsr2l	equ	0xFD9
 22785                           status	equ	0xFD8
 22786                           
 22787 ;; *************** function _ethernetController_init *****************
 22788 ;; Defined at:
 22789 ;;		line 34 in file "src/enc424j600/ENC424J600.c"
 22790 ;; Parameters:    Size  Location     Type
 22791 ;;		None
 22792 ;; Auto vars:     Size  Location     Type
 22793 ;;  err             3   29[BANK0 ] struct error
 22794 ;; Return value:  Size  Location     Type
 22795 ;;                  3   26[BANK0 ] struct error
 22796 ;; Registers used:
 22797 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 22798 ;; Tracked objects:
 22799 ;;		On entry : 0/0
 22800 ;;		On exit  : 0/0
 22801 ;;		Unchanged: 0/0
 22802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22803 ;;      Params:         0       3       0       0       0       0       0       0       0
 22804 ;;      Locals:         0       3       0       0       0       0       0       0       0
 22805 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22806 ;;      Totals:         0       6       0       0       0       0       0       0       0
 22807 ;;Total ram usage:        6 bytes
 22808 ;; Hardware stack levels used:    1
 22809 ;; Hardware stack levels required when called:    8
 22810 ;; This function calls:
 22811 ;;		_enc424j600_enableAutoMACInsertion
 22812 ;;		_enc424j600_enableReception
 22813 ;;		_enc424j600_initSPI
 22814 ;;		_enc424j600_setNextPacketPointer
 22815 ;;		_enc424j600_setRXBufferStartAddress
 22816 ;;		_enc424j600_setRXTailPointer
 22817 ;;		_ethernetController_checkDeviceId
 22818 ;;		_ethernetController_softReset
 22819 ;; This function is called by:
 22820 ;;		_main
 22821 ;; This function uses a non-reentrant model
 22822 ;;
 22823                           
 22824                           	psect	text94
 22825  0043CE                     __ptext94:
 22826                           	opt stack 0
 22827  0043CE                     _ethernetController_init:
 22828                           	opt stack 22
 22829                           
 22830                           ;ENC424J600.c: 35: error_t err;
 22831                           ;ENC424J600.c: 36: enc424j600_initSPI();
 22832                           
 22833                           ;incstack = 0
 22834  0043CE  EC2B  F02B         	call	_enc424j600_initSPI	;wreg free
 22835                           
 22836                           ;ENC424J600.c: 37: err = ethernetController_softReset();
 22837  0043D2  EC08  F01D         	call	_ethernetController_softReset	;wreg free
 22838  0043D6  C06E  F07D         	movff	?_ethernetController_softReset,ethernetController_init@err
 22839  0043DA  C06F  F07E         	movff	?_ethernetController_softReset+1,ethernetController_init@err+1
 22840  0043DE  C070  F07F         	movff	?_ethernetController_softReset+2,ethernetController_init@err+2
 22841                           
 22842                           ;ENC424J600.c: 38: if (err.code != (uint16_t)0) {
 22843  0043E2  0100               	movlb	0	; () banked
 22844  0043E4  517E               	movf	(ethernetController_init@err+1)& (0+255),w,b
 22845  0043E6  117F               	iorwf	(ethernetController_init@err+2)& (0+255),w,b
 22846  0043E8  B4D8               	btfsc	status,2,c
 22847  0043EA  D007               	goto	l75
 22848                           
 22849                           ; BSR set to: 0
 22850                           ;ENC424J600.c: 39: return err;
 22851  0043EC  C07D  F07A         	movff	ethernetController_init@err,?_ethernetController_init
 22852  0043F0  C07E  F07B         	movff	ethernetController_init@err+1,?_ethernetController_init+1
 22853  0043F4  C07F  F07C         	movff	ethernetController_init@err+2,?_ethernetController_init+2
 22854  0043F8  0012               	return	
 22855  0043FA                     l75:
 22856                           
 22857                           ; BSR set to: 0
 22858                           ;ENC424J600.c: 40: }
 22859                           ;ENC424J600.c: 41: err = ethernetController_checkDeviceId();
 22860                           
 22861                           ; BSR set to: 0
 22862  0043FA  ECD8  F027         	call	_ethernetController_checkDeviceId	;wreg free
 22863  0043FE  C06E  F07D         	movff	?_ethernetController_checkDeviceId,ethernetController_init@err
 22864  004402  C06F  F07E         	movff	?_ethernetController_checkDeviceId+1,ethernetController_init@err+1
 22865  004406  C070  F07F         	movff	?_ethernetController_checkDeviceId+2,ethernetController_init@err+2
 22866                           
 22867                           ;ENC424J600.c: 42: if (err.code != (uint16_t)0) {
 22868  00440A  0100               	movlb	0	; () banked
 22869  00440C  517E               	movf	(ethernetController_init@err+1)& (0+255),w,b
 22870  00440E  117F               	iorwf	(ethernetController_init@err+2)& (0+255),w,b
 22871  004410  B4D8               	btfsc	status,2,c
 22872  004412  D007               	goto	l77
 22873                           
 22874                           ; BSR set to: 0
 22875                           ;ENC424J600.c: 43: return err;
 22876  004414  C07D  F07A         	movff	ethernetController_init@err,?_ethernetController_init
 22877  004418  C07E  F07B         	movff	ethernetController_init@err+1,?_ethernetController_init+1
 22878  00441C  C07F  F07C         	movff	ethernetController_init@err+2,?_ethernetController_init+2
 22879  004420  0012               	return	
 22880  004422                     l77:
 22881                           
 22882                           ; BSR set to: 0
 22883                           ;ENC424J600.c: 44: }
 22884                           ;ENC424J600.c: 63: enc424j600_setRXBufferStartAddress(0x3000);
 22885                           
 22886                           ; BSR set to: 0
 22887  004422  0E30               	movlw	48
 22888  004424  6F6F               	movwf	(enc424j600_setRXBufferStartAddress@addr+1)& (0+255),b
 22889  004426  0E00               	movlw	0
 22890  004428  6F6E               	movwf	enc424j600_setRXBufferStartAddress@addr& (0+255),b
 22891  00442A  EC36  F02A         	call	_enc424j600_setRXBufferStartAddress	;wreg free
 22892                           
 22893                           ;ENC424J600.c: 64: enc424j600_setNextPacketPointer(0x3000);
 22894  00442E  0E30               	movlw	48
 22895  004430  0100               	movlb	0	; () banked
 22896  004432  6F61               	movwf	(enc424j600_setNextPacketPointer@ptr+1)& (0+255),b
 22897  004434  0E00               	movlw	0
 22898  004436  6F60               	movwf	enc424j600_setNextPacketPointer@ptr& (0+255),b
 22899  004438  ECCB  F02B         	call	_enc424j600_setNextPacketPointer	;wreg free
 22900                           
 22901                           ;ENC424J600.c: 65: enc424j600_setRXTailPointer(0x5FFE);
 22902  00443C  0E5F               	movlw	95
 22903  00443E  0100               	movlb	0	; () banked
 22904  004440  6F6F               	movwf	(enc424j600_setRXTailPointer@addr+1)& (0+255),b
 22905  004442  0EFE               	movlw	254
 22906  004444  6F6E               	movwf	enc424j600_setRXTailPointer@addr& (0+255),b
 22907  004446  EC21  F02A         	call	_enc424j600_setRXTailPointer	;wreg free
 22908                           
 22909                           ;ENC424J600.c: 67: enc424j600_enableReception();
 22910  00444A  ECD0  F02B         	call	_enc424j600_enableReception	;wreg free
 22911                           
 22912                           ;ENC424J600.c: 68: enc424j600_enableAutoMACInsertion();
 22913  00444E  EC87  F02A         	call	_enc424j600_enableAutoMACInsertion	;wreg free
 22914                           
 22915                           ;ENC424J600.c: 70: err.module = ERROR_MODULE_ETHERNET_CONTROLLER;
 22916  004452  0E01               	movlw	1
 22917  004454  0100               	movlb	0	; () banked
 22918  004456  6F7D               	movwf	ethernetController_init@err& (0+255),b
 22919                           
 22920                           ; BSR set to: 0
 22921                           ;ENC424J600.c: 71: err.code = (uint16_t)0;
 22922  004458  0E00               	movlw	0
 22923  00445A  6F7F               	movwf	(ethernetController_init@err+2)& (0+255),b
 22924  00445C  0E00               	movlw	0
 22925  00445E  6F7E               	movwf	(ethernetController_init@err+1)& (0+255),b
 22926                           
 22927                           ; BSR set to: 0
 22928                           ;ENC424J600.c: 72: return err;
 22929  004460  C07D  F07A         	movff	ethernetController_init@err,?_ethernetController_init
 22930  004464  C07E  F07B         	movff	ethernetController_init@err+1,?_ethernetController_init+1
 22931  004468  C07F  F07C         	movff	ethernetController_init@err+2,?_ethernetController_init+2
 22932  00446C  0012               	return	
 22933  00446E                     __end_of_ethernetController_init:
 22934                           	opt stack 0
 22935                           tblptru	equ	0xFF8
 22936                           tblptrh	equ	0xFF7
 22937                           tblptrl	equ	0xFF6
 22938                           tablat	equ	0xFF5
 22939                           prodh	equ	0xFF4
 22940                           prodl	equ	0xFF3
 22941                           intcon	equ	0xFF2
 22942                           intcon3	equ	0xFF0
 22943                           indf0	equ	0xFEF
 22944                           postinc0	equ	0xFEE
 22945                           plusw0	equ	0xFEB
 22946                           fsr0h	equ	0xFEA
 22947                           fsr0l	equ	0xFE9
 22948                           wreg	equ	0xFE8
 22949                           indf1	equ	0xFE7
 22950                           postinc1	equ	0xFE6
 22951                           postdec1	equ	0xFE5
 22952                           plusw1	equ	0xFE3
 22953                           fsr1h	equ	0xFE2
 22954                           fsr1l	equ	0xFE1
 22955                           indf2	equ	0xFDF
 22956                           postinc2	equ	0xFDE
 22957                           postdec2	equ	0xFDD
 22958                           plusw2	equ	0xFDB
 22959                           fsr2h	equ	0xFDA
 22960                           fsr2l	equ	0xFD9
 22961                           status	equ	0xFD8
 22962                           
 22963 ;; *************** function _ethernetController_softReset *****************
 22964 ;; Defined at:
 22965 ;;		line 75 in file "src/enc424j600/ENC424J600.c"
 22966 ;; Parameters:    Size  Location     Type
 22967 ;;		None
 22968 ;; Auto vars:     Size  Location     Type
 22969 ;;  err             3   23[BANK0 ] struct error
 22970 ;;  receivedData    2   21[BANK0 ] unsigned char [2]
 22971 ;;  dataToSend      2   19[BANK0 ] unsigned char [2]
 22972 ;;  comFailCount    1   18[BANK0 ] unsigned char 
 22973 ;; Return value:  Size  Location     Type
 22974 ;;                  3   14[BANK0 ] struct error
 22975 ;; Registers used:
 22976 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 22977 ;; Tracked objects:
 22978 ;;		On entry : 0/0
 22979 ;;		On exit  : 0/0
 22980 ;;		Unchanged: 0/0
 22981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22982 ;;      Params:         0       3       0       0       0       0       0       0       0
 22983 ;;      Locals:         0       8       0       0       0       0       0       0       0
 22984 ;;      Temps:          0       1       0       0       0       0       0       0       0
 22985 ;;      Totals:         0      12       0       0       0       0       0       0       0
 22986 ;;Total ram usage:       12 bytes
 22987 ;; Hardware stack levels used:    1
 22988 ;; Hardware stack levels required when called:    7
 22989 ;; This function calls:
 22990 ;;		_enc424j600_readControlRegisterUnbanked
 22991 ;;		_enc424j600_writeControlRegisterUnbanked
 22992 ;;		_enc424j600_writeSingleByte
 22993 ;; This function is called by:
 22994 ;;		_ethernetController_init
 22995 ;; This function uses a non-reentrant model
 22996 ;;
 22997                           
 22998                           	psect	text95
 22999  003A10                     __ptext95:
 23000                           	opt stack 0
 23001  003A10                     _ethernetController_softReset:
 23002                           	opt stack 22
 23003                           
 23004                           ;ENC424J600.c: 93: uint8_t comFailCount = 0;
 23005                           
 23006                           ; BSR set to: 0
 23007                           ;incstack = 0
 23008  003A10  0E00               	movlw	0
 23009  003A12  0100               	movlb	0	; () banked
 23010  003A14  6F72               	movwf	ethernetController_softReset@comFailCount& (0+255),b
 23011                           
 23012                           ; BSR set to: 0
 23013                           ;ENC424J600.c: 94: uint8_t dataToSend[2] = {0x12, 0x34};
 23014  003A16  C04D  F073         	movff	ethernetController_softReset@F5987,ethernetController_softReset@dataToSend
 23015  003A1A  C04E  F074         	movff	ethernetController_softReset@F5987+1,ethernetController_softReset@dataToSend+1
 23016                           
 23017                           ; BSR set to: 0
 23018                           ;ENC424J600.c: 95: uint8_t receivedData[2] = {0, 0};
 23019  003A1E  C040  F075         	movff	ethernetController_softReset@F5989,ethernetController_softReset@receivedData
 23020  003A22  C041  F076         	movff	ethernetController_softReset@F5989+1,ethernetController_softReset@receivedData+1
 23021                           
 23022                           ;ENC424J600.c: 96: error_t err;
 23023                           ;ENC424J600.c: 97: err.module = ERROR_MODULE_ETHERNET_CONTROLLER;
 23024  003A26  0E01               	movlw	1
 23025  003A28  6F77               	movwf	ethernetController_softReset@err& (0+255),b
 23026                           
 23027                           ;ENC424J600.c: 98: err.code = (uint16_t)0;
 23028  003A2A  0E00               	movlw	0
 23029  003A2C  6F79               	movwf	(ethernetController_softReset@err+2)& (0+255),b
 23030  003A2E  0E00               	movlw	0
 23031  003A30  6F78               	movwf	(ethernetController_softReset@err+1)& (0+255),b
 23032                           
 23033                           ; BSR set to: 0
 23034                           ;ENC424J600.c: 99: if (comFailCount < 5) {
 23035  003A32  0E05               	movlw	5
 23036  003A34  6172               	cpfslt	ethernetController_softReset@comFailCount& (0+255),b
 23037  003A36  D05F               	goto	l84
 23038                           
 23039                           ; BSR set to: 0
 23040                           ;ENC424J600.c: 101: enc424j600_writeControlRegisterUnbanked(0x16 + 0x00, &dataToSend[0])
      +                          ;
 23041  003A38  0E73               	movlw	low ethernetController_softReset@dataToSend
 23042  003A3A  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 23043  003A3C  0E00               	movlw	high ethernetController_softReset@dataToSend
 23044  003A3E  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 23045  003A40  0E16               	movlw	22
 23046  003A42  EC61  F029         	call	_enc424j600_writeControlRegisterUnbanked
 23047                           
 23048                           ;ENC424J600.c: 102: enc424j600_writeControlRegisterUnbanked(0x17 + 0x00, &dataToSend[1])
      +                          ;
 23049  003A46  0E74               	movlw	low (ethernetController_softReset@dataToSend+1)
 23050  003A48  0100               	movlb	0	; () banked
 23051  003A4A  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 23052  003A4C  0E00               	movlw	high (ethernetController_softReset@dataToSend+1)
 23053  003A4E  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 23054  003A50  0E17               	movlw	23
 23055  003A52  EC61  F029         	call	_enc424j600_writeControlRegisterUnbanked
 23056                           
 23057                           ;ENC424J600.c: 104: enc424j600_readControlRegisterUnbanked(0x16 + 0x00, &receivedData[0]
      +                          );
 23058  003A56  0E75               	movlw	low ethernetController_softReset@receivedData
 23059  003A58  0100               	movlb	0	; () banked
 23060  003A5A  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 23061  003A5C  0E00               	movlw	high ethernetController_softReset@receivedData
 23062  003A5E  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 23063  003A60  0E16               	movlw	22
 23064  003A62  EC7C  F029         	call	_enc424j600_readControlRegisterUnbanked
 23065                           
 23066                           ;ENC424J600.c: 105: enc424j600_readControlRegisterUnbanked(0x17 + 0x00, &receivedData[1]
      +                          );
 23067  003A66  0E76               	movlw	low (ethernetController_softReset@receivedData+1)
 23068  003A68  0100               	movlb	0	; () banked
 23069  003A6A  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 23070  003A6C  0E00               	movlw	high (ethernetController_softReset@receivedData+1)
 23071  003A6E  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 23072  003A70  0E17               	movlw	23
 23073  003A72  EC7C  F029         	call	_enc424j600_readControlRegisterUnbanked
 23074                           
 23075                           ;ENC424J600.c: 107: if ((receivedData[0] == dataToSend[0]) && (receivedData[1] == dataTo
      +                          Send[1])) {
 23076  003A76  0100               	movlb	0	; () banked
 23077  003A78  5173               	movf	ethernetController_softReset@dataToSend& (0+255),w,b
 23078  003A7A  1975               	xorwf	ethernetController_softReset@receivedData& (0+255),w,b
 23079  003A7C  A4D8               	btfss	status,2,c
 23080  003A7E  D038               	goto	l88
 23081                           
 23082                           ; BSR set to: 0
 23083  003A80  5174               	movf	(ethernetController_softReset@dataToSend+1)& (0+255),w,b
 23084  003A82  1976               	xorwf	(ethernetController_softReset@receivedData+1)& (0+255),w,b
 23085  003A84  A4D8               	btfss	status,2,c
 23086  003A86  D034               	goto	l88
 23087                           
 23088                           ; BSR set to: 0
 23089                           ;ENC424J600.c: 109: enc424j600_writeSingleByte(0b11001010);
 23090  003A88  0ECA               	movlw	202
 23091  003A8A  EC53  F02B         	call	_enc424j600_writeSingleByte
 23092                           
 23093                           ;ENC424J600.c: 110: _delay((unsigned long)((25)*(32000000UL/4000000.0)));
 23094  003A8E  0E42               	movlw	66
 23095  003A90                     u12847:
 23096  003A90  2EE8               	decfsz	wreg,f,c
 23097  003A92  D7FE               	bra	u12847
 23098  003A94  D000               	nop2	
 23099                           
 23100                           ;ENC424J600.c: 112: enc424j600_readControlRegisterUnbanked(0x16 + 0x00, &receivedData[0]
      +                          );
 23101  003A96  0E75               	movlw	low ethernetController_softReset@receivedData
 23102  003A98  0100               	movlb	0	; () banked
 23103  003A9A  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 23104  003A9C  0E00               	movlw	high ethernetController_softReset@receivedData
 23105  003A9E  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 23106  003AA0  0E16               	movlw	22
 23107  003AA2  EC7C  F029         	call	_enc424j600_readControlRegisterUnbanked
 23108                           
 23109                           ;ENC424J600.c: 113: enc424j600_readControlRegisterUnbanked(0x17 + 0x00, &receivedData[1]
      +                          );
 23110  003AA6  0E76               	movlw	low (ethernetController_softReset@receivedData+1)
 23111  003AA8  0100               	movlb	0	; () banked
 23112  003AAA  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 23113  003AAC  0E00               	movlw	high (ethernetController_softReset@receivedData+1)
 23114  003AAE  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 23115  003AB0  0E17               	movlw	23
 23116  003AB2  EC7C  F029         	call	_enc424j600_readControlRegisterUnbanked
 23117                           
 23118                           ;ENC424J600.c: 115: if (!receivedData[0] && !receivedData[1]) {
 23119  003AB6  0100               	movlb	0	; () banked
 23120  003AB8  5175               	movf	ethernetController_softReset@receivedData& (0+255),w,b
 23121  003ABA  A4D8               	btfss	status,2,c
 23122  003ABC  D00D               	goto	l86
 23123                           
 23124                           ; BSR set to: 0
 23125  003ABE  5176               	movf	(ethernetController_softReset@receivedData+1)& (0+255),w,b
 23126  003AC0  A4D8               	btfss	status,2,c
 23127  003AC2  D00A               	goto	l86
 23128                           
 23129                           ; BSR set to: 0
 23130                           ;ENC424J600.c: 117: _delay((unsigned long)((256)*(32000000UL/4000000.0)));
 23131  003AC4  0E03               	movlw	3
 23132  003AC6  0100               	movlb	0	; () banked
 23133  003AC8  6F71               	movwf	??_ethernetController_softReset& (0+255),b
 23134  003ACA  0EA7               	movlw	167
 23135  003ACC                     u12857:
 23136  003ACC  2EE8               	decfsz	wreg,f,c
 23137  003ACE  D7FE               	bra	u12857
 23138  003AD0  2F71               	decfsz	??_ethernetController_softReset& (0+255),f,b
 23139  003AD2  D7FC               	bra	u12857
 23140  003AD4  D000               	nop2	
 23141  003AD6  D005               	goto	l9931
 23142  003AD8                     l86:
 23143                           
 23144                           ;ENC424J600.c: 120: err.code = ERROR_ETHERNET_CONTROLLER_UNRESPONSIVE;
 23145  003AD8  0E01               	movlw	1
 23146  003ADA  0100               	movlb	0	; () banked
 23147  003ADC  6F79               	movwf	(ethernetController_softReset@err+2)& (0+255),b
 23148  003ADE  0E2E               	movlw	46
 23149  003AE0  6F78               	movwf	(ethernetController_softReset@err+1)& (0+255),b
 23150  003AE2                     l9931:
 23151                           
 23152                           ; BSR set to: 0
 23153                           ;ENC424J600.c: 121: return err;
 23154  003AE2  C077  F06E         	movff	ethernetController_softReset@err,?_ethernetController_softReset
 23155  003AE6  C078  F06F         	movff	ethernetController_softReset@err+1,?_ethernetController_softReset+1
 23156  003AEA  C079  F070         	movff	ethernetController_softReset@err+2,?_ethernetController_softReset+2
 23157                           
 23158                           ; BSR set to: 0
 23159  003AEE  0012               	return	
 23160  003AF0                     l88:
 23161                           
 23162                           ;ENC424J600.c: 122: }
 23163                           ;ENC424J600.c: 123: }
 23164                           ;ENC424J600.c: 124: comFailCount++;
 23165                           
 23166                           ; BSR set to: 0
 23167                           
 23168                           ; BSR set to: 0
 23169  003AF0  0100               	movlb	0	; () banked
 23170  003AF2  2B72               	incf	ethernetController_softReset@comFailCount& (0+255),f,b
 23171                           
 23172                           ;ENC424J600.c: 125: } else {
 23173  003AF4  D00B               	goto	l89
 23174  003AF6                     l84:
 23175                           
 23176                           ; BSR set to: 0
 23177                           ;ENC424J600.c: 126: err.code = ERROR_ETHERNET_CONTROLLER_UNRESPONSIVE;
 23178                           
 23179                           ; BSR set to: 0
 23180  003AF6  0E01               	movlw	1
 23181  003AF8  6F79               	movwf	(ethernetController_softReset@err+2)& (0+255),b
 23182  003AFA  0E2E               	movlw	46
 23183  003AFC  6F78               	movwf	(ethernetController_softReset@err+1)& (0+255),b
 23184                           
 23185                           ; BSR set to: 0
 23186                           ;ENC424J600.c: 127: return err;
 23187  003AFE  C077  F06E         	movff	ethernetController_softReset@err,?_ethernetController_softReset
 23188  003B02  C078  F06F         	movff	ethernetController_softReset@err+1,?_ethernetController_softReset+1
 23189  003B06  C079  F070         	movff	ethernetController_softReset@err+2,?_ethernetController_softReset+2
 23190                           
 23191                           ; BSR set to: 0
 23192  003B0A  0012               	return	
 23193  003B0C                     l89:
 23194                           
 23195                           ; BSR set to: 0
 23196                           ;ENC424J600.c: 128: }
 23197                           ;ENC424J600.c: 129: return err;
 23198  003B0C  C077  F06E         	movff	ethernetController_softReset@err,?_ethernetController_softReset
 23199  003B10  C078  F06F         	movff	ethernetController_softReset@err+1,?_ethernetController_softReset+1
 23200  003B14  C079  F070         	movff	ethernetController_softReset@err+2,?_ethernetController_softReset+2
 23201  003B18  0012               	return		;funcret
 23202  003B1A                     __end_of_ethernetController_softReset:
 23203                           	opt stack 0
 23204                           tblptru	equ	0xFF8
 23205                           tblptrh	equ	0xFF7
 23206                           tblptrl	equ	0xFF6
 23207                           tablat	equ	0xFF5
 23208                           prodh	equ	0xFF4
 23209                           prodl	equ	0xFF3
 23210                           intcon	equ	0xFF2
 23211                           intcon3	equ	0xFF0
 23212                           indf0	equ	0xFEF
 23213                           postinc0	equ	0xFEE
 23214                           plusw0	equ	0xFEB
 23215                           fsr0h	equ	0xFEA
 23216                           fsr0l	equ	0xFE9
 23217                           wreg	equ	0xFE8
 23218                           indf1	equ	0xFE7
 23219                           postinc1	equ	0xFE6
 23220                           postdec1	equ	0xFE5
 23221                           plusw1	equ	0xFE3
 23222                           fsr1h	equ	0xFE2
 23223                           fsr1l	equ	0xFE1
 23224                           indf2	equ	0xFDF
 23225                           postinc2	equ	0xFDE
 23226                           postdec2	equ	0xFDD
 23227                           plusw2	equ	0xFDB
 23228                           fsr2h	equ	0xFDA
 23229                           fsr2l	equ	0xFD9
 23230                           status	equ	0xFD8
 23231                           
 23232 ;; *************** function _ethernetController_checkDeviceId *****************
 23233 ;; Defined at:
 23234 ;;		line 132 in file "src/enc424j600/ENC424J600.c"
 23235 ;; Parameters:    Size  Location     Type
 23236 ;;		None
 23237 ;; Auto vars:     Size  Location     Type
 23238 ;;  err             3   18[BANK0 ] struct error
 23239 ;;  data            1   17[BANK0 ] unsigned char 
 23240 ;; Return value:  Size  Location     Type
 23241 ;;                  3   14[BANK0 ] struct error
 23242 ;; Registers used:
 23243 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23244 ;; Tracked objects:
 23245 ;;		On entry : 0/0
 23246 ;;		On exit  : 0/0
 23247 ;;		Unchanged: 0/0
 23248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23249 ;;      Params:         0       3       0       0       0       0       0       0       0
 23250 ;;      Locals:         0       4       0       0       0       0       0       0       0
 23251 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23252 ;;      Totals:         0       7       0       0       0       0       0       0       0
 23253 ;;Total ram usage:        7 bytes
 23254 ;; Hardware stack levels used:    1
 23255 ;; Hardware stack levels required when called:    7
 23256 ;; This function calls:
 23257 ;;		_enc424j600_readControlRegisterUnbanked
 23258 ;; This function is called by:
 23259 ;;		_ethernetController_init
 23260 ;;		_main
 23261 ;; This function uses a non-reentrant model
 23262 ;;
 23263                           
 23264                           	psect	text96
 23265  004FB0                     __ptext96:
 23266                           	opt stack 0
 23267  004FB0                     _ethernetController_checkDeviceId:
 23268                           	opt stack 22
 23269                           
 23270                           ;ENC424J600.c: 133: error_t err;
 23271                           ;ENC424J600.c: 134: err.module = ERROR_MODULE_ETHERNET_CONTROLLER;
 23272                           
 23273                           ;incstack = 0
 23274  004FB0  0E01               	movlw	1
 23275  004FB2  0100               	movlb	0	; () banked
 23276  004FB4  6F72               	movwf	ethernetController_checkDeviceId@err& (0+255),b
 23277                           
 23278                           ;ENC424J600.c: 135: err.code = (uint16_t)0;
 23279  004FB6  0E00               	movlw	0
 23280  004FB8  6F74               	movwf	(ethernetController_checkDeviceId@err+2)& (0+255),b
 23281  004FBA  0E00               	movlw	0
 23282  004FBC  6F73               	movwf	(ethernetController_checkDeviceId@err+1)& (0+255),b
 23283                           
 23284                           ;ENC424J600.c: 136: uint8_t data = 0;
 23285  004FBE  0E00               	movlw	0
 23286  004FC0  6F71               	movwf	ethernetController_checkDeviceId@data& (0+255),b
 23287                           
 23288                           ; BSR set to: 0
 23289                           ;ENC424J600.c: 137: enc424j600_readControlRegisterUnbanked(0x14 + 0x60, &data);
 23290  004FC2  0E71               	movlw	low ethernetController_checkDeviceId@data
 23291  004FC4  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 23292  004FC6  0E00               	movlw	high ethernetController_checkDeviceId@data
 23293  004FC8  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 23294  004FCA  0E74               	movlw	116
 23295  004FCC  EC7C  F029         	call	_enc424j600_readControlRegisterUnbanked
 23296                           
 23297                           ;ENC424J600.c: 138: if (((data >> 5)&0x07) == 0b001)
 23298  004FD0  0100               	movlb	0	; () banked
 23299  004FD2  3971               	swapf	ethernetController_checkDeviceId@data& (0+255),w,b
 23300  004FD4  42E8               	rrncf	wreg,f,c
 23301  004FD6  0B07               	andlw	7
 23302  004FD8  0B07               	andlw	7
 23303  004FDA  06E8               	decf	wreg,f,c
 23304  004FDC  A4D8               	btfss	status,2,c
 23305  004FDE  D004               	goto	l92
 23306                           
 23307                           ; BSR set to: 0
 23308                           ;ENC424J600.c: 139: err.code = (uint16_t)0;
 23309  004FE0  0E00               	movlw	0
 23310  004FE2  6F74               	movwf	(ethernetController_checkDeviceId@err+2)& (0+255),b
 23311  004FE4  0E00               	movlw	0
 23312  004FE6  D003               	goto	L10
 23313  004FE8                     l92:
 23314                           
 23315                           ; BSR set to: 0
 23316                           ;ENC424J600.c: 140: else
 23317                           ;ENC424J600.c: 141: err.code = ERROR_ETHERNET_CONTROLLER_UNKNOWN_DEVICE_ID;
 23318                           
 23319                           ; BSR set to: 0
 23320  004FE8  0E01               	movlw	1
 23321  004FEA  6F74               	movwf	(ethernetController_checkDeviceId@err+2)& (0+255),b
 23322  004FEC  0E2D               	movlw	45
 23323  004FEE                     L10:
 23324  004FEE  6F73               	movwf	(ethernetController_checkDeviceId@err+1)& (0+255),b
 23325                           
 23326                           ; BSR set to: 0
 23327                           ;ENC424J600.c: 142: return err;
 23328                           
 23329                           ; BSR set to: 0
 23330  004FF0  C072  F06E         	movff	ethernetController_checkDeviceId@err,?_ethernetController_checkDeviceId
 23331  004FF4  C073  F06F         	movff	ethernetController_checkDeviceId@err+1,?_ethernetController_checkDeviceId+1
 23332  004FF8  C074  F070         	movff	ethernetController_checkDeviceId@err+2,?_ethernetController_checkDeviceId+2
 23333  004FFC  0012               	return	
 23334  004FFE                     __end_of_ethernetController_checkDeviceId:
 23335                           	opt stack 0
 23336                           tblptru	equ	0xFF8
 23337                           tblptrh	equ	0xFF7
 23338                           tblptrl	equ	0xFF6
 23339                           tablat	equ	0xFF5
 23340                           prodh	equ	0xFF4
 23341                           prodl	equ	0xFF3
 23342                           intcon	equ	0xFF2
 23343                           intcon3	equ	0xFF0
 23344                           indf0	equ	0xFEF
 23345                           postinc0	equ	0xFEE
 23346                           plusw0	equ	0xFEB
 23347                           fsr0h	equ	0xFEA
 23348                           fsr0l	equ	0xFE9
 23349                           wreg	equ	0xFE8
 23350                           indf1	equ	0xFE7
 23351                           postinc1	equ	0xFE6
 23352                           postdec1	equ	0xFE5
 23353                           plusw1	equ	0xFE3
 23354                           fsr1h	equ	0xFE2
 23355                           fsr1l	equ	0xFE1
 23356                           indf2	equ	0xFDF
 23357                           postinc2	equ	0xFDE
 23358                           postdec2	equ	0xFDD
 23359                           plusw2	equ	0xFDB
 23360                           fsr2h	equ	0xFDA
 23361                           fsr2l	equ	0xFD9
 23362                           status	equ	0xFD8
 23363                           
 23364 ;; *************** function _enc424j600_setRXTailPointer *****************
 23365 ;; Defined at:
 23366 ;;		line 649 in file "src/enc424j600/ENC424J600.c"
 23367 ;; Parameters:    Size  Location     Type
 23368 ;;  addr            2   14[BANK0 ] unsigned int 
 23369 ;; Auto vars:     Size  Location     Type
 23370 ;;  highByte        1   17[BANK0 ] unsigned char 
 23371 ;;  lowByte         1   16[BANK0 ] unsigned char 
 23372 ;; Return value:  Size  Location     Type
 23373 ;;                  1    wreg      void 
 23374 ;; Registers used:
 23375 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23376 ;; Tracked objects:
 23377 ;;		On entry : 0/0
 23378 ;;		On exit  : 0/0
 23379 ;;		Unchanged: 0/0
 23380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23381 ;;      Params:         0       2       0       0       0       0       0       0       0
 23382 ;;      Locals:         0       2       0       0       0       0       0       0       0
 23383 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23384 ;;      Totals:         0       4       0       0       0       0       0       0       0
 23385 ;;Total ram usage:        4 bytes
 23386 ;; Hardware stack levels used:    1
 23387 ;; Hardware stack levels required when called:    7
 23388 ;; This function calls:
 23389 ;;		_enc424j600_writeControlRegisterUnbanked
 23390 ;; This function is called by:
 23391 ;;		_ethernetController_init
 23392 ;;		_ethernetController_dropPacket
 23393 ;; This function uses a non-reentrant model
 23394 ;;
 23395                           
 23396                           	psect	text97
 23397  005442                     __ptext97:
 23398                           	opt stack 0
 23399  005442                     _enc424j600_setRXTailPointer:
 23400                           	opt stack 19
 23401                           
 23402                           ;ENC424J600.c: 650: uint8_t lowByte = addr & 0x00ff;
 23403                           
 23404                           ; BSR set to: 0
 23405                           ;incstack = 0
 23406  005442  C06E  F070         	movff	enc424j600_setRXTailPointer@addr,enc424j600_setRXTailPointer@lowByte
 23407                           
 23408                           ;ENC424J600.c: 651: uint8_t highByte = (addr >> 8) & 0xff;
 23409  005446  0100               	movlb	0	; () banked
 23410  005448  516F               	movf	(enc424j600_setRXTailPointer@addr+1)& (0+255),w,b
 23411  00544A  6F71               	movwf	enc424j600_setRXTailPointer@highByte& (0+255),b
 23412                           
 23413                           ; BSR set to: 0
 23414                           ;ENC424J600.c: 652: enc424j600_writeControlRegisterUnbanked(0x06 + 0x00, &lowByte);
 23415  00544C  0E70               	movlw	low enc424j600_setRXTailPointer@lowByte
 23416  00544E  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 23417  005450  0E00               	movlw	high enc424j600_setRXTailPointer@lowByte
 23418  005452  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 23419  005454  0E06               	movlw	6
 23420  005456  EC61  F029         	call	_enc424j600_writeControlRegisterUnbanked
 23421                           
 23422                           ;ENC424J600.c: 653: enc424j600_writeControlRegisterUnbanked(0x07 + 0x00, &highByte);
 23423  00545A  0E71               	movlw	low enc424j600_setRXTailPointer@highByte
 23424  00545C  0100               	movlb	0	; () banked
 23425  00545E  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 23426  005460  0E00               	movlw	high enc424j600_setRXTailPointer@highByte
 23427  005462  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 23428  005464  0E07               	movlw	7
 23429  005466  EC61  F029         	call	_enc424j600_writeControlRegisterUnbanked
 23430  00546A  0012               	return		;funcret
 23431  00546C                     __end_of_enc424j600_setRXTailPointer:
 23432                           	opt stack 0
 23433                           tblptru	equ	0xFF8
 23434                           tblptrh	equ	0xFF7
 23435                           tblptrl	equ	0xFF6
 23436                           tablat	equ	0xFF5
 23437                           prodh	equ	0xFF4
 23438                           prodl	equ	0xFF3
 23439                           intcon	equ	0xFF2
 23440                           intcon3	equ	0xFF0
 23441                           indf0	equ	0xFEF
 23442                           postinc0	equ	0xFEE
 23443                           plusw0	equ	0xFEB
 23444                           fsr0h	equ	0xFEA
 23445                           fsr0l	equ	0xFE9
 23446                           wreg	equ	0xFE8
 23447                           indf1	equ	0xFE7
 23448                           postinc1	equ	0xFE6
 23449                           postdec1	equ	0xFE5
 23450                           plusw1	equ	0xFE3
 23451                           fsr1h	equ	0xFE2
 23452                           fsr1l	equ	0xFE1
 23453                           indf2	equ	0xFDF
 23454                           postinc2	equ	0xFDE
 23455                           postdec2	equ	0xFDD
 23456                           plusw2	equ	0xFDB
 23457                           fsr2h	equ	0xFDA
 23458                           fsr2l	equ	0xFD9
 23459                           status	equ	0xFD8
 23460                           
 23461 ;; *************** function _enc424j600_setRXBufferStartAddress *****************
 23462 ;; Defined at:
 23463 ;;		line 642 in file "src/enc424j600/ENC424J600.c"
 23464 ;; Parameters:    Size  Location     Type
 23465 ;;  addr            2   14[BANK0 ] unsigned int 
 23466 ;; Auto vars:     Size  Location     Type
 23467 ;;  highByte        1   17[BANK0 ] unsigned char 
 23468 ;;  lowByte         1   16[BANK0 ] unsigned char 
 23469 ;; Return value:  Size  Location     Type
 23470 ;;                  1    wreg      void 
 23471 ;; Registers used:
 23472 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23473 ;; Tracked objects:
 23474 ;;		On entry : 0/0
 23475 ;;		On exit  : 0/0
 23476 ;;		Unchanged: 0/0
 23477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23478 ;;      Params:         0       2       0       0       0       0       0       0       0
 23479 ;;      Locals:         0       2       0       0       0       0       0       0       0
 23480 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23481 ;;      Totals:         0       4       0       0       0       0       0       0       0
 23482 ;;Total ram usage:        4 bytes
 23483 ;; Hardware stack levels used:    1
 23484 ;; Hardware stack levels required when called:    7
 23485 ;; This function calls:
 23486 ;;		_enc424j600_writeControlRegisterUnbanked
 23487 ;; This function is called by:
 23488 ;;		_ethernetController_init
 23489 ;; This function uses a non-reentrant model
 23490 ;;
 23491                           
 23492                           	psect	text98
 23493  00546C                     __ptext98:
 23494                           	opt stack 0
 23495  00546C                     _enc424j600_setRXBufferStartAddress:
 23496                           	opt stack 22
 23497                           
 23498                           ;ENC424J600.c: 643: uint8_t lowByte = addr & 0x00ff;
 23499                           
 23500                           ;incstack = 0
 23501  00546C  C06E  F070         	movff	enc424j600_setRXBufferStartAddress@addr,enc424j600_setRXBufferStartAddress@lowByt
      +                          e
 23502                           
 23503                           ;ENC424J600.c: 644: uint8_t highByte = (addr >> 8) & 0xff;
 23504  005470  0100               	movlb	0	; () banked
 23505  005472  516F               	movf	(enc424j600_setRXBufferStartAddress@addr+1)& (0+255),w,b
 23506  005474  6F71               	movwf	enc424j600_setRXBufferStartAddress@highByte& (0+255),b
 23507                           
 23508                           ; BSR set to: 0
 23509                           ;ENC424J600.c: 645: enc424j600_writeControlRegisterUnbanked(0x04 + 0x00, &lowByte);
 23510  005476  0E70               	movlw	low enc424j600_setRXBufferStartAddress@lowByte
 23511  005478  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 23512  00547A  0E00               	movlw	high enc424j600_setRXBufferStartAddress@lowByte
 23513  00547C  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 23514  00547E  0E04               	movlw	4
 23515  005480  EC61  F029         	call	_enc424j600_writeControlRegisterUnbanked
 23516                           
 23517                           ;ENC424J600.c: 646: enc424j600_writeControlRegisterUnbanked(0x05 + 0x00, &highByte);
 23518  005484  0E71               	movlw	low enc424j600_setRXBufferStartAddress@highByte
 23519  005486  0100               	movlb	0	; () banked
 23520  005488  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 23521  00548A  0E00               	movlw	high enc424j600_setRXBufferStartAddress@highByte
 23522  00548C  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 23523  00548E  0E05               	movlw	5
 23524  005490  EC61  F029         	call	_enc424j600_writeControlRegisterUnbanked
 23525  005494  0012               	return		;funcret
 23526  005496                     __end_of_enc424j600_setRXBufferStartAddress:
 23527                           	opt stack 0
 23528                           tblptru	equ	0xFF8
 23529                           tblptrh	equ	0xFF7
 23530                           tblptrl	equ	0xFF6
 23531                           tablat	equ	0xFF5
 23532                           prodh	equ	0xFF4
 23533                           prodl	equ	0xFF3
 23534                           intcon	equ	0xFF2
 23535                           intcon3	equ	0xFF0
 23536                           indf0	equ	0xFEF
 23537                           postinc0	equ	0xFEE
 23538                           plusw0	equ	0xFEB
 23539                           fsr0h	equ	0xFEA
 23540                           fsr0l	equ	0xFE9
 23541                           wreg	equ	0xFE8
 23542                           indf1	equ	0xFE7
 23543                           postinc1	equ	0xFE6
 23544                           postdec1	equ	0xFE5
 23545                           plusw1	equ	0xFE3
 23546                           fsr1h	equ	0xFE2
 23547                           fsr1l	equ	0xFE1
 23548                           indf2	equ	0xFDF
 23549                           postinc2	equ	0xFDE
 23550                           postdec2	equ	0xFDD
 23551                           plusw2	equ	0xFDB
 23552                           fsr2h	equ	0xFDA
 23553                           fsr2l	equ	0xFD9
 23554                           status	equ	0xFD8
 23555                           
 23556 ;; *************** function _enc424j600_setNextPacketPointer *****************
 23557 ;; Defined at:
 23558 ;;		line 586 in file "src/enc424j600/ENC424J600.c"
 23559 ;; Parameters:    Size  Location     Type
 23560 ;;  ptr             2    0[BANK0 ] unsigned int 
 23561 ;; Auto vars:     Size  Location     Type
 23562 ;;		None
 23563 ;; Return value:  Size  Location     Type
 23564 ;;                  1    wreg      void 
 23565 ;; Registers used:
 23566 ;;		None
 23567 ;; Tracked objects:
 23568 ;;		On entry : 0/0
 23569 ;;		On exit  : 0/0
 23570 ;;		Unchanged: 0/0
 23571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23572 ;;      Params:         0       2       0       0       0       0       0       0       0
 23573 ;;      Locals:         0       0       0       0       0       0       0       0       0
 23574 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23575 ;;      Totals:         0       2       0       0       0       0       0       0       0
 23576 ;;Total ram usage:        2 bytes
 23577 ;; Hardware stack levels used:    1
 23578 ;; Hardware stack levels required when called:    4
 23579 ;; This function calls:
 23580 ;;		Nothing
 23581 ;; This function is called by:
 23582 ;;		_ethernetController_init
 23583 ;;		_ethernetController_updateNextPacketPointer
 23584 ;; This function uses a non-reentrant model
 23585 ;;
 23586                           
 23587                           	psect	text99
 23588  005796                     __ptext99:
 23589                           	opt stack 0
 23590  005796                     _enc424j600_setNextPacketPointer:
 23591                           	opt stack 23
 23592                           
 23593                           ;ENC424J600.c: 587: nextPacketPointer = ptr;
 23594                           
 23595                           ;incstack = 0
 23596  005796  C060  F042         	movff	enc424j600_setNextPacketPointer@ptr,_nextPacketPointer
 23597  00579A  C061  F043         	movff	enc424j600_setNextPacketPointer@ptr+1,_nextPacketPointer+1
 23598  00579E  0012               	return		;funcret
 23599  0057A0                     __end_of_enc424j600_setNextPacketPointer:
 23600                           	opt stack 0
 23601                           tblptru	equ	0xFF8
 23602                           tblptrh	equ	0xFF7
 23603                           tblptrl	equ	0xFF6
 23604                           tablat	equ	0xFF5
 23605                           prodh	equ	0xFF4
 23606                           prodl	equ	0xFF3
 23607                           intcon	equ	0xFF2
 23608                           intcon3	equ	0xFF0
 23609                           indf0	equ	0xFEF
 23610                           postinc0	equ	0xFEE
 23611                           plusw0	equ	0xFEB
 23612                           fsr0h	equ	0xFEA
 23613                           fsr0l	equ	0xFE9
 23614                           wreg	equ	0xFE8
 23615                           indf1	equ	0xFE7
 23616                           postinc1	equ	0xFE6
 23617                           postdec1	equ	0xFE5
 23618                           plusw1	equ	0xFE3
 23619                           fsr1h	equ	0xFE2
 23620                           fsr1l	equ	0xFE1
 23621                           indf2	equ	0xFDF
 23622                           postinc2	equ	0xFDE
 23623                           postdec2	equ	0xFDD
 23624                           plusw2	equ	0xFDB
 23625                           fsr2h	equ	0xFDA
 23626                           fsr2l	equ	0xFD9
 23627                           status	equ	0xFD8
 23628                           
 23629 ;; *************** function _enc424j600_enableReception *****************
 23630 ;; Defined at:
 23631 ;;		line 672 in file "src/enc424j600/ENC424J600.c"
 23632 ;; Parameters:    Size  Location     Type
 23633 ;;		None
 23634 ;; Auto vars:     Size  Location     Type
 23635 ;;		None
 23636 ;; Return value:  Size  Location     Type
 23637 ;;                  1    wreg      void 
 23638 ;; Registers used:
 23639 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23640 ;; Tracked objects:
 23641 ;;		On entry : 0/0
 23642 ;;		On exit  : 0/0
 23643 ;;		Unchanged: 0/0
 23644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23645 ;;      Params:         0       0       0       0       0       0       0       0       0
 23646 ;;      Locals:         0       0       0       0       0       0       0       0       0
 23647 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23648 ;;      Totals:         0       0       0       0       0       0       0       0       0
 23649 ;;Total ram usage:        0 bytes
 23650 ;; Hardware stack levels used:    1
 23651 ;; Hardware stack levels required when called:    7
 23652 ;; This function calls:
 23653 ;;		_enc424j600_writeSingleByte
 23654 ;; This function is called by:
 23655 ;;		_ethernetController_init
 23656 ;;		_ethernetController_enableReception
 23657 ;; This function uses a non-reentrant model
 23658 ;;
 23659                           
 23660                           	psect	text100
 23661  0057A0                     __ptext100:
 23662                           	opt stack 0
 23663  0057A0                     _enc424j600_enableReception:
 23664                           	opt stack 22
 23665                           
 23666                           ;ENC424J600.c: 673: enc424j600_writeSingleByte(0b11101000);
 23667                           
 23668                           ;incstack = 0
 23669  0057A0  0EE8               	movlw	232
 23670  0057A2  EC53  F02B         	call	_enc424j600_writeSingleByte
 23671  0057A6  0012               	return		;funcret
 23672  0057A8                     __end_of_enc424j600_enableReception:
 23673                           	opt stack 0
 23674                           tblptru	equ	0xFF8
 23675                           tblptrh	equ	0xFF7
 23676                           tblptrl	equ	0xFF6
 23677                           tablat	equ	0xFF5
 23678                           prodh	equ	0xFF4
 23679                           prodl	equ	0xFF3
 23680                           intcon	equ	0xFF2
 23681                           intcon3	equ	0xFF0
 23682                           indf0	equ	0xFEF
 23683                           postinc0	equ	0xFEE
 23684                           plusw0	equ	0xFEB
 23685                           fsr0h	equ	0xFEA
 23686                           fsr0l	equ	0xFE9
 23687                           wreg	equ	0xFE8
 23688                           indf1	equ	0xFE7
 23689                           postinc1	equ	0xFE6
 23690                           postdec1	equ	0xFE5
 23691                           plusw1	equ	0xFE3
 23692                           fsr1h	equ	0xFE2
 23693                           fsr1l	equ	0xFE1
 23694                           indf2	equ	0xFDF
 23695                           postinc2	equ	0xFDE
 23696                           postdec2	equ	0xFDD
 23697                           plusw2	equ	0xFDB
 23698                           fsr2h	equ	0xFDA
 23699                           fsr2l	equ	0xFD9
 23700                           status	equ	0xFD8
 23701                           
 23702 ;; *************** function _enc424j600_writeSingleByte *****************
 23703 ;; Defined at:
 23704 ;;		line 512 in file "src/enc424j600/ENC424J600.c"
 23705 ;; Parameters:    Size  Location     Type
 23706 ;;  opcode          1    wreg     unsigned char 
 23707 ;; Auto vars:     Size  Location     Type
 23708 ;;  opcode          1   10[BANK0 ] unsigned char 
 23709 ;; Return value:  Size  Location     Type
 23710 ;;                  1    wreg      void 
 23711 ;; Registers used:
 23712 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23713 ;; Tracked objects:
 23714 ;;		On entry : 0/0
 23715 ;;		On exit  : 0/0
 23716 ;;		Unchanged: 0/0
 23717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23718 ;;      Params:         0       0       0       0       0       0       0       0       0
 23719 ;;      Locals:         0       1       0       0       0       0       0       0       0
 23720 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23721 ;;      Totals:         0       1       0       0       0       0       0       0       0
 23722 ;;Total ram usage:        1 bytes
 23723 ;; Hardware stack levels used:    1
 23724 ;; Hardware stack levels required when called:    6
 23725 ;; This function calls:
 23726 ;;		_enc424j600_writeSPI
 23727 ;; This function is called by:
 23728 ;;		_ethernetController_softReset
 23729 ;;		_ethernetController_sendPacket
 23730 ;;		_ethernetController_dropPacket
 23731 ;;		_enc424j600_enableReception
 23732 ;;		_enc424j600_disableReception
 23733 ;; This function uses a non-reentrant model
 23734 ;;
 23735                           
 23736                           	psect	text101
 23737  0056A6                     __ptext101:
 23738                           	opt stack 0
 23739  0056A6                     _enc424j600_writeSingleByte:
 23740                           	opt stack 21
 23741                           
 23742                           ;incstack = 0
 23743                           ;enc424j600_writeSingleByte@opcode stored from wreg
 23744  0056A6  0100               	movlb	0	; () banked
 23745  0056A8  6F6A               	movwf	enc424j600_writeSingleByte@opcode& (0+255),b
 23746                           
 23747                           ;ENC424J600.c: 513: PORTBbits.RB4=0;
 23748  0056AA  9881               	bcf	3969,4,c	;volatile
 23749                           
 23750                           ;ENC424J600.c: 514: enc424j600_writeSPI(&opcode);
 23751  0056AC  0E6A               	movlw	low enc424j600_writeSingleByte@opcode
 23752  0056AE  0100               	movlb	0	; () banked
 23753  0056B0  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 23754  0056B2  0E00               	movlw	high enc424j600_writeSingleByte@opcode
 23755  0056B4  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 23756  0056B6  EC51  F026         	call	_enc424j600_writeSPI	;wreg free
 23757                           
 23758                           ;ENC424J600.c: 515: PORTBbits.RB4=1;
 23759  0056BA  8881               	bsf	3969,4,c	;volatile
 23760  0056BC  0012               	return		;funcret
 23761  0056BE                     __end_of_enc424j600_writeSingleByte:
 23762                           	opt stack 0
 23763                           tblptru	equ	0xFF8
 23764                           tblptrh	equ	0xFF7
 23765                           tblptrl	equ	0xFF6
 23766                           tablat	equ	0xFF5
 23767                           prodh	equ	0xFF4
 23768                           prodl	equ	0xFF3
 23769                           intcon	equ	0xFF2
 23770                           intcon3	equ	0xFF0
 23771                           indf0	equ	0xFEF
 23772                           postinc0	equ	0xFEE
 23773                           plusw0	equ	0xFEB
 23774                           fsr0h	equ	0xFEA
 23775                           fsr0l	equ	0xFE9
 23776                           wreg	equ	0xFE8
 23777                           indf1	equ	0xFE7
 23778                           postinc1	equ	0xFE6
 23779                           postdec1	equ	0xFE5
 23780                           plusw1	equ	0xFE3
 23781                           fsr1h	equ	0xFE2
 23782                           fsr1l	equ	0xFE1
 23783                           indf2	equ	0xFDF
 23784                           postinc2	equ	0xFDE
 23785                           postdec2	equ	0xFDD
 23786                           plusw2	equ	0xFDB
 23787                           fsr2h	equ	0xFDA
 23788                           fsr2l	equ	0xFD9
 23789                           status	equ	0xFD8
 23790                           
 23791 ;; *************** function _enc424j600_enableAutoMACInsertion *****************
 23792 ;; Defined at:
 23793 ;;		line 658 in file "src/enc424j600/ENC424J600.c"
 23794 ;; Parameters:    Size  Location     Type
 23795 ;;		None
 23796 ;; Auto vars:     Size  Location     Type
 23797 ;;  temp            1   14[BANK0 ] unsigned char 
 23798 ;; Return value:  Size  Location     Type
 23799 ;;                  1    wreg      void 
 23800 ;; Registers used:
 23801 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23802 ;; Tracked objects:
 23803 ;;		On entry : 0/0
 23804 ;;		On exit  : 0/0
 23805 ;;		Unchanged: 0/0
 23806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23807 ;;      Params:         0       0       0       0       0       0       0       0       0
 23808 ;;      Locals:         0       1       0       0       0       0       0       0       0
 23809 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23810 ;;      Totals:         0       1       0       0       0       0       0       0       0
 23811 ;;Total ram usage:        1 bytes
 23812 ;; Hardware stack levels used:    1
 23813 ;; Hardware stack levels required when called:    7
 23814 ;; This function calls:
 23815 ;;		_enc424j600_readControlRegisterUnbanked
 23816 ;;		_enc424j600_writeControlRegisterUnbanked
 23817 ;; This function is called by:
 23818 ;;		_ethernetController_init
 23819 ;; This function uses a non-reentrant model
 23820 ;;
 23821                           
 23822                           	psect	text102
 23823  00550E                     __ptext102:
 23824                           	opt stack 0
 23825  00550E                     _enc424j600_enableAutoMACInsertion:
 23826                           	opt stack 22
 23827                           
 23828                           ;ENC424J600.c: 659: uint8_t temp = 0;
 23829                           
 23830                           ;incstack = 0
 23831  00550E  0E00               	movlw	0
 23832  005510  0100               	movlb	0	; () banked
 23833  005512  6F6E               	movwf	enc424j600_enableAutoMACInsertion@temp& (0+255),b
 23834                           
 23835                           ; BSR set to: 0
 23836                           ;ENC424J600.c: 660: enc424j600_readControlRegisterUnbanked(0x0F + 0x60, &temp);
 23837  005514  0E6E               	movlw	low enc424j600_enableAutoMACInsertion@temp
 23838  005516  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 23839  005518  0E00               	movlw	high enc424j600_enableAutoMACInsertion@temp
 23840  00551A  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 23841  00551C  0E6F               	movlw	111
 23842  00551E  EC7C  F029         	call	_enc424j600_readControlRegisterUnbanked
 23843                           
 23844                           ;ENC424J600.c: 661: temp |= (1 << 5);
 23845  005522  0100               	movlb	0	; () banked
 23846  005524  8B6E               	bsf	enc424j600_enableAutoMACInsertion@temp& (0+255),5,b
 23847                           
 23848                           ; BSR set to: 0
 23849                           ;ENC424J600.c: 662: enc424j600_writeControlRegisterUnbanked(0x0F + 0x60, &temp);
 23850  005526  0E6E               	movlw	low enc424j600_enableAutoMACInsertion@temp
 23851  005528  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 23852  00552A  0E00               	movlw	high enc424j600_enableAutoMACInsertion@temp
 23853  00552C  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 23854  00552E  0E6F               	movlw	111
 23855  005530  EC61  F029         	call	_enc424j600_writeControlRegisterUnbanked
 23856  005534  0012               	return		;funcret
 23857  005536                     __end_of_enc424j600_enableAutoMACInsertion:
 23858                           	opt stack 0
 23859                           tblptru	equ	0xFF8
 23860                           tblptrh	equ	0xFF7
 23861                           tblptrl	equ	0xFF6
 23862                           tablat	equ	0xFF5
 23863                           prodh	equ	0xFF4
 23864                           prodl	equ	0xFF3
 23865                           intcon	equ	0xFF2
 23866                           intcon3	equ	0xFF0
 23867                           indf0	equ	0xFEF
 23868                           postinc0	equ	0xFEE
 23869                           plusw0	equ	0xFEB
 23870                           fsr0h	equ	0xFEA
 23871                           fsr0l	equ	0xFE9
 23872                           wreg	equ	0xFE8
 23873                           indf1	equ	0xFE7
 23874                           postinc1	equ	0xFE6
 23875                           postdec1	equ	0xFE5
 23876                           plusw1	equ	0xFE3
 23877                           fsr1h	equ	0xFE2
 23878                           fsr1l	equ	0xFE1
 23879                           indf2	equ	0xFDF
 23880                           postinc2	equ	0xFDE
 23881                           postdec2	equ	0xFDD
 23882                           plusw2	equ	0xFDB
 23883                           fsr2h	equ	0xFDA
 23884                           fsr2l	equ	0xFD9
 23885                           status	equ	0xFD8
 23886                           
 23887 ;; *************** function _enc424j600_writeControlRegisterUnbanked *****************
 23888 ;; Defined at:
 23889 ;;		line 518 in file "src/enc424j600/ENC424J600.c"
 23890 ;; Parameters:    Size  Location     Type
 23891 ;;  addr            1    wreg     unsigned char 
 23892 ;;  data            2   10[BANK0 ] PTR unsigned char 
 23893 ;;		 -> enc424j600_clearInterruptFlag@temp(1), enc424j600_disable@temp(1), enc424j600_enable@temp(1), enc424j600_disable
      +AutoMACInsertion@temp(1), 
 23894 ;;		 -> enc424j600_enableAutoMACInsertion@temp(1), enc424j600_setRXTailPointer@highByte(1), enc424j600_setRXTailPointer@
      +lowByte(1), enc424j600_setRXBufferStartAddress@highByte(1), 
 23895 ;;		 -> enc424j600_setRXBufferStartAddress@lowByte(1), enc424j600_setTXStartAddress@highByte(1), enc424j600_setTXStartAd
      +dress@lowByte(1), enc424j600_setTXLength@highByte(1), 
 23896 ;;		 -> enc424j600_setTXLength@lowByte(1), enc424j600_readPHYRegister@temp(1), enc424j600_readPHYRegister@unusedBits(1),
      + enc424j600_readPHYRegister@PHYaddress(1), 
 23897 ;;		 -> ethernetController_setLEDConfig@data(1), mac.address(6), ethernetController_setMacAddress@mac(6), ethernetContro
      +ller_softReset@dataToSend(2), 
 23898 ;; Auto vars:     Size  Location     Type
 23899 ;;  addr            1   12[BANK0 ] unsigned char 
 23900 ;;  opcode          1   13[BANK0 ] unsigned char 
 23901 ;; Return value:  Size  Location     Type
 23902 ;;                  1    wreg      void 
 23903 ;; Registers used:
 23904 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23905 ;; Tracked objects:
 23906 ;;		On entry : 0/0
 23907 ;;		On exit  : 0/0
 23908 ;;		Unchanged: 0/0
 23909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23910 ;;      Params:         0       2       0       0       0       0       0       0       0
 23911 ;;      Locals:         0       2       0       0       0       0       0       0       0
 23912 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23913 ;;      Totals:         0       4       0       0       0       0       0       0       0
 23914 ;;Total ram usage:        4 bytes
 23915 ;; Hardware stack levels used:    1
 23916 ;; Hardware stack levels required when called:    6
 23917 ;; This function calls:
 23918 ;;		_enc424j600_writeSPI
 23919 ;; This function is called by:
 23920 ;;		_ethernetController_softReset
 23921 ;;		_ethernetController_setLEDConfig
 23922 ;;		_enc424j600_readPHYRegister
 23923 ;;		_enc424j600_setTXLength
 23924 ;;		_enc424j600_setTXStartAddress
 23925 ;;		_enc424j600_setRXBufferStartAddress
 23926 ;;		_enc424j600_setRXTailPointer
 23927 ;;		_enc424j600_enableAutoMACInsertion
 23928 ;;		_enc424j600_clearInterruptFlag
 23929 ;;		_ethernetController_setMacAddress
 23930 ;;		_enc424j600_disableAutoMACInsertion
 23931 ;;		_enc424j600_enable
 23932 ;;		_enc424j600_disable
 23933 ;; This function uses a non-reentrant model
 23934 ;;
 23935                           
 23936                           	psect	text103
 23937  0052C2                     __ptext103:
 23938                           	opt stack 0
 23939  0052C2                     _enc424j600_writeControlRegisterUnbanked:
 23940                           	opt stack 20
 23941                           
 23942                           ;incstack = 0
 23943                           ;enc424j600_writeControlRegisterUnbanked@addr stored from wreg
 23944  0052C2  0100               	movlb	0	; () banked
 23945  0052C4  6F6C               	movwf	enc424j600_writeControlRegisterUnbanked@addr& (0+255),b
 23946                           
 23947                           ;ENC424J600.c: 519: uint8_t opcode = 0x22;
 23948  0052C6  0E22               	movlw	34
 23949  0052C8  0100               	movlb	0	; () banked
 23950  0052CA  6F6D               	movwf	enc424j600_writeControlRegisterUnbanked@opcode& (0+255),b
 23951                           
 23952                           ; BSR set to: 0
 23953                           ;ENC424J600.c: 520: PORTBbits.RB4=0;
 23954  0052CC  9881               	bcf	3969,4,c	;volatile
 23955                           
 23956                           ; BSR set to: 0
 23957                           ;ENC424J600.c: 521: enc424j600_writeSPI(&opcode);
 23958  0052CE  0E6D               	movlw	low enc424j600_writeControlRegisterUnbanked@opcode
 23959  0052D0  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 23960  0052D2  0E00               	movlw	high enc424j600_writeControlRegisterUnbanked@opcode
 23961  0052D4  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 23962  0052D6  EC51  F026         	call	_enc424j600_writeSPI	;wreg free
 23963                           
 23964                           ;ENC424J600.c: 522: enc424j600_writeSPI(&addr);
 23965  0052DA  0E6C               	movlw	low enc424j600_writeControlRegisterUnbanked@addr
 23966  0052DC  0100               	movlb	0	; () banked
 23967  0052DE  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 23968  0052E0  0E00               	movlw	high enc424j600_writeControlRegisterUnbanked@addr
 23969  0052E2  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 23970  0052E4  EC51  F026         	call	_enc424j600_writeSPI	;wreg free
 23971                           
 23972                           ;ENC424J600.c: 523: enc424j600_writeSPI(data);
 23973  0052E8  C06A  F060         	movff	enc424j600_writeControlRegisterUnbanked@data,enc424j600_writeSPI@data
 23974  0052EC  C06B  F061         	movff	enc424j600_writeControlRegisterUnbanked@data+1,enc424j600_writeSPI@data+1
 23975  0052F0  EC51  F026         	call	_enc424j600_writeSPI	;wreg free
 23976                           
 23977                           ;ENC424J600.c: 524: PORTBbits.RB4=1;
 23978  0052F4  8881               	bsf	3969,4,c	;volatile
 23979  0052F6  0012               	return		;funcret
 23980  0052F8                     __end_of_enc424j600_writeControlRegisterUnbanked:
 23981                           	opt stack 0
 23982                           tblptru	equ	0xFF8
 23983                           tblptrh	equ	0xFF7
 23984                           tblptrl	equ	0xFF6
 23985                           tablat	equ	0xFF5
 23986                           prodh	equ	0xFF4
 23987                           prodl	equ	0xFF3
 23988                           intcon	equ	0xFF2
 23989                           intcon3	equ	0xFF0
 23990                           indf0	equ	0xFEF
 23991                           postinc0	equ	0xFEE
 23992                           plusw0	equ	0xFEB
 23993                           fsr0h	equ	0xFEA
 23994                           fsr0l	equ	0xFE9
 23995                           wreg	equ	0xFE8
 23996                           indf1	equ	0xFE7
 23997                           postinc1	equ	0xFE6
 23998                           postdec1	equ	0xFE5
 23999                           plusw1	equ	0xFE3
 24000                           fsr1h	equ	0xFE2
 24001                           fsr1l	equ	0xFE1
 24002                           indf2	equ	0xFDF
 24003                           postinc2	equ	0xFDE
 24004                           postdec2	equ	0xFDD
 24005                           plusw2	equ	0xFDB
 24006                           fsr2h	equ	0xFDA
 24007                           fsr2l	equ	0xFD9
 24008                           status	equ	0xFD8
 24009                           
 24010 ;; *************** function _enc424j600_readControlRegisterUnbanked *****************
 24011 ;; Defined at:
 24012 ;;		line 527 in file "src/enc424j600/ENC424J600.c"
 24013 ;; Parameters:    Size  Location     Type
 24014 ;;  addr            1    wreg     unsigned char 
 24015 ;;  data            2   10[BANK0 ] PTR unsigned char 
 24016 ;;		 -> enc424j600_clearInterruptFlag@temp(1), enc424j600_getInterruptFlags@high(1), enc424j600_getInterruptFlags@low(1)
      +, enc424j600_disable@temp(1), 
 24017 ;;		 -> enc424j600_enable@temp(1), enc424j600_disableAutoMACInsertion@temp(1), enc424j600_enableAutoMACInsertion@temp(1)
      +, enc424j600_getPacketCount@lowByte(1), 
 24018 ;;		 -> enc424j600_readPHYRegister@highByte(1), enc424j600_readPHYRegister@lowByte(1), enc424j600_readPHYRegister@temp(1
      +), ethernetController_setLEDConfig@data(1), 
 24019 ;;		 -> ethernetController_updateLinkStatus@temp(1), mac.address(6), ethernetController_getMacAddress@mac(6), ethernetCo
      +ntroller_getSiliconRevision@data(1), 
 24020 ;;		 -> ethernetController_checkDeviceId@data(1), ethernetController_softReset@receivedData(2), 
 24021 ;; Auto vars:     Size  Location     Type
 24022 ;;  addr            1   12[BANK0 ] unsigned char 
 24023 ;;  opcode          1   13[BANK0 ] unsigned char 
 24024 ;; Return value:  Size  Location     Type
 24025 ;;                  1    wreg      void 
 24026 ;; Registers used:
 24027 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24028 ;; Tracked objects:
 24029 ;;		On entry : 0/0
 24030 ;;		On exit  : 0/0
 24031 ;;		Unchanged: 0/0
 24032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24033 ;;      Params:         0       2       0       0       0       0       0       0       0
 24034 ;;      Locals:         0       2       0       0       0       0       0       0       0
 24035 ;;      Temps:          0       0       0       0       0       0       0       0       0
 24036 ;;      Totals:         0       4       0       0       0       0       0       0       0
 24037 ;;Total ram usage:        4 bytes
 24038 ;; Hardware stack levels used:    1
 24039 ;; Hardware stack levels required when called:    6
 24040 ;; This function calls:
 24041 ;;		_enc424j600_readSPI
 24042 ;;		_enc424j600_writeSPI
 24043 ;; This function is called by:
 24044 ;;		_ethernetController_softReset
 24045 ;;		_ethernetController_checkDeviceId
 24046 ;;		_ethernetController_getMacAddress
 24047 ;;		_ethernetController_updateLinkStatus
 24048 ;;		_ethernetController_setLEDConfig
 24049 ;;		_enc424j600_readPHYRegister
 24050 ;;		_enc424j600_getPacketCount
 24051 ;;		_enc424j600_enableAutoMACInsertion
 24052 ;;		_enc424j600_getInterruptFlags
 24053 ;;		_enc424j600_clearInterruptFlag
 24054 ;;		_ethernetController_getSiliconRevision
 24055 ;;		_enc424j600_disableAutoMACInsertion
 24056 ;;		_enc424j600_enable
 24057 ;;		_enc424j600_disable
 24058 ;; This function uses a non-reentrant model
 24059 ;;
 24060                           
 24061                           	psect	text104
 24062  0052F8                     __ptext104:
 24063                           	opt stack 0
 24064  0052F8                     _enc424j600_readControlRegisterUnbanked:
 24065                           	opt stack 21
 24066                           
 24067                           ;incstack = 0
 24068                           ;enc424j600_readControlRegisterUnbanked@addr stored from wreg
 24069  0052F8  0100               	movlb	0	; () banked
 24070  0052FA  6F6C               	movwf	enc424j600_readControlRegisterUnbanked@addr& (0+255),b
 24071                           
 24072                           ;ENC424J600.c: 528: uint8_t opcode = 0x20;
 24073  0052FC  0E20               	movlw	32
 24074  0052FE  0100               	movlb	0	; () banked
 24075  005300  6F6D               	movwf	enc424j600_readControlRegisterUnbanked@opcode& (0+255),b
 24076                           
 24077                           ; BSR set to: 0
 24078                           ;ENC424J600.c: 529: PORTBbits.RB4=0;
 24079  005302  9881               	bcf	3969,4,c	;volatile
 24080                           
 24081                           ; BSR set to: 0
 24082                           ;ENC424J600.c: 530: enc424j600_writeSPI(&opcode);
 24083  005304  0E6D               	movlw	low enc424j600_readControlRegisterUnbanked@opcode
 24084  005306  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 24085  005308  0E00               	movlw	high enc424j600_readControlRegisterUnbanked@opcode
 24086  00530A  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 24087  00530C  EC51  F026         	call	_enc424j600_writeSPI	;wreg free
 24088                           
 24089                           ;ENC424J600.c: 531: enc424j600_writeSPI(&addr);
 24090  005310  0E6C               	movlw	low enc424j600_readControlRegisterUnbanked@addr
 24091  005312  0100               	movlb	0	; () banked
 24092  005314  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 24093  005316  0E00               	movlw	high enc424j600_readControlRegisterUnbanked@addr
 24094  005318  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 24095  00531A  EC51  F026         	call	_enc424j600_writeSPI	;wreg free
 24096                           
 24097                           ;ENC424J600.c: 532: enc424j600_readSPI(data);
 24098  00531E  C06A  F060         	movff	enc424j600_readControlRegisterUnbanked@data,enc424j600_readSPI@data
 24099  005322  C06B  F061         	movff	enc424j600_readControlRegisterUnbanked@data+1,enc424j600_readSPI@data+1
 24100  005326  ECE8  F025         	call	_enc424j600_readSPI	;wreg free
 24101                           
 24102                           ;ENC424J600.c: 533: PORTBbits.RB4=1;
 24103  00532A  8881               	bsf	3969,4,c	;volatile
 24104  00532C  0012               	return		;funcret
 24105  00532E                     __end_of_enc424j600_readControlRegisterUnbanked:
 24106                           	opt stack 0
 24107                           tblptru	equ	0xFF8
 24108                           tblptrh	equ	0xFF7
 24109                           tblptrl	equ	0xFF6
 24110                           tablat	equ	0xFF5
 24111                           prodh	equ	0xFF4
 24112                           prodl	equ	0xFF3
 24113                           intcon	equ	0xFF2
 24114                           intcon3	equ	0xFF0
 24115                           indf0	equ	0xFEF
 24116                           postinc0	equ	0xFEE
 24117                           plusw0	equ	0xFEB
 24118                           fsr0h	equ	0xFEA
 24119                           fsr0l	equ	0xFE9
 24120                           wreg	equ	0xFE8
 24121                           indf1	equ	0xFE7
 24122                           postinc1	equ	0xFE6
 24123                           postdec1	equ	0xFE5
 24124                           plusw1	equ	0xFE3
 24125                           fsr1h	equ	0xFE2
 24126                           fsr1l	equ	0xFE1
 24127                           indf2	equ	0xFDF
 24128                           postinc2	equ	0xFDE
 24129                           postdec2	equ	0xFDD
 24130                           plusw2	equ	0xFDB
 24131                           fsr2h	equ	0xFDA
 24132                           fsr2l	equ	0xFD9
 24133                           status	equ	0xFD8
 24134                           
 24135 ;; *************** function _enc424j600_writeSPI *****************
 24136 ;; Defined at:
 24137 ;;		line 487 in file "src/enc424j600/ENC424J600.c"
 24138 ;; Parameters:    Size  Location     Type
 24139 ;;  data            2    0[BANK0 ] PTR unsigned char 
 24140 ;;		 -> enc424j600_clearInterruptFlag@temp(1), enc424j600_disable@temp(1), enc424j600_enable@temp(1), enc424j600_disable
      +AutoMACInsertion@temp(1), 
 24141 ;;		 -> enc424j600_enableAutoMACInsertion@temp(1), enc424j600_setRXTailPointer@highByte(1), enc424j600_setRXTailPointer@
      +lowByte(1), enc424j600_setRXBufferStartAddress@highByte(1), 
 24142 ;;		 -> enc424j600_setRXBufferStartAddress@lowByte(1), enc424j600_setERXDATAReadPointer@highByte(1), enc424j600_setERXDA
      +TAReadPointer@lowByte(1), enc424j600_setERXDATAReadPointer@opcode(1), 
 24143 ;;		 -> enc424j600_setGPDATAReadPointer@highByte(1), enc424j600_setGPDATAReadPointer@lowByte(1), enc424j600_setGPDATARea
      +dPointer@opcode(1), enc424j600_setGPDATAWritePointer@highByte(1), 
 24144 ;;		 -> enc424j600_setGPDATAWritePointer@lowByte(1), enc424j600_setGPDATAWritePointer@opcode(1), enc424j600_setTXStartAd
      +dress@highByte(1), enc424j600_setTXStartAddress@lowByte(1), 
 24145 ;;		 -> enc424j600_setTXLength@highByte(1), enc424j600_setTXLength@lowByte(1), enc424j600_readPHYRegister@temp(1), enc42
      +4j600_readPHYRegister@unusedBits(1), 
 24146 ;;		 -> enc424j600_readPHYRegister@PHYaddress(1), enc424j600_readControlRegisterUnbanked@addr(1), enc424j600_readControl
      +RegisterUnbanked@opcode(1), enc424j600_writeControlRegisterUnbanked@addr(1), 
 24147 ;;		 -> enc424j600_writeControlRegisterUnbanked@opcode(1), enc424j600_writeSingleByte@opcode(1), ethernetController_setL
      +EDConfig@data(1), ethernetController_streamFromRXBuffer@opcode(1), 
 24148 ;;		 -> ethernetController_updateNextPacketPointer@opcode(1), ethernetController_getRSV@opcode(1), ethernetController_ge
      +tEtherTypeField@opcode(1), ethernetController_getSourceMACAddress@opcode(1), 
 24149 ;;		 -> ethernetController_getDestinationMACAddress@opcode(1), ethernetController_writeEtherTypeFieldToBuffer@opcode(1),
      + ethernetController_writeEtherTypeFieldToBuffer@highByte(1), ethernetController_writeEtherTypeFieldToBuffer@lowByte(1), 
 24150 ;;		 -> ethernetController_writeDestinationMACAddress@opcode(1), ethernetController_writeDestinationMACAddress@data(6), 
      +ethernetController_streamToTransmitBuffer@data(1), ethernetController_streamToTransmitBuffer@opcode(1), 
 24151 ;;		 -> mac.address(6), ethernetController_setMacAddress@mac(6), ethernetController_softReset@dataToSend(2), 
 24152 ;; Auto vars:     Size  Location     Type
 24153 ;;  timeoutCount    4    6[BANK0 ] unsigned long 
 24154 ;; Return value:  Size  Location     Type
 24155 ;;                  1    wreg      void 
 24156 ;; Registers used:
 24157 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24158 ;; Tracked objects:
 24159 ;;		On entry : 0/0
 24160 ;;		On exit  : 0/0
 24161 ;;		Unchanged: 0/0
 24162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24163 ;;      Params:         0       2       0       0       0       0       0       0       0
 24164 ;;      Locals:         0       4       0       0       0       0       0       0       0
 24165 ;;      Temps:          0       4       0       0       0       0       0       0       0
 24166 ;;      Totals:         0      10       0       0       0       0       0       0       0
 24167 ;;Total ram usage:       10 bytes
 24168 ;; Hardware stack levels used:    1
 24169 ;; Hardware stack levels required when called:    5
 24170 ;; This function calls:
 24171 ;;		_enc424j600_initSPI
 24172 ;; This function is called by:
 24173 ;;		_ethernetController_streamToTransmitBuffer
 24174 ;;		_ethernetController_writeDestinationMACAddress
 24175 ;;		_ethernetController_writeEtherTypeFieldToBuffer
 24176 ;;		_ethernetController_getSourceMACAddress
 24177 ;;		_ethernetController_getEtherTypeField
 24178 ;;		_ethernetController_getRSV
 24179 ;;		_ethernetController_updateNextPacketPointer
 24180 ;;		_ethernetController_streamFromRXBuffer
 24181 ;;		_enc424j600_writeSingleByte
 24182 ;;		_enc424j600_writeControlRegisterUnbanked
 24183 ;;		_enc424j600_readControlRegisterUnbanked
 24184 ;;		_enc424j600_setGPDATAWritePointer
 24185 ;;		_enc424j600_setERXDATAReadPointer
 24186 ;;		_ethernetController_getDestinationMACAddress
 24187 ;;		_enc424j600_setGPDATAReadPointer
 24188 ;; This function uses a non-reentrant model
 24189 ;;
 24190                           
 24191                           	psect	text105
 24192  004CA2                     __ptext105:
 24193                           	opt stack 0
 24194  004CA2                     _enc424j600_writeSPI:
 24195                           	opt stack 22
 24196                           
 24197                           ;ENC424J600.c: 489: uint32_t timeoutCounter = 0;
 24198                           
 24199                           ;incstack = 0
 24200  004CA2  0E00               	movlw	0
 24201  004CA4  0100               	movlb	0	; () banked
 24202  004CA6  6F66               	movwf	enc424j600_writeSPI@timeoutCounter& (0+255),b
 24203  004CA8  0E00               	movlw	0
 24204  004CAA  6F67               	movwf	(enc424j600_writeSPI@timeoutCounter+1)& (0+255),b
 24205  004CAC  0E00               	movlw	0
 24206  004CAE  6F68               	movwf	(enc424j600_writeSPI@timeoutCounter+2)& (0+255),b
 24207  004CB0  0E00               	movlw	0
 24208  004CB2  6F69               	movwf	(enc424j600_writeSPI@timeoutCounter+3)& (0+255),b
 24209                           
 24210                           ; BSR set to: 0
 24211                           ;ENC424J600.c: 490: SSP1BUF = *data;
 24212  004CB4  C060  FFD9         	movff	enc424j600_writeSPI@data,fsr2l
 24213  004CB8  C061  FFDA         	movff	enc424j600_writeSPI@data+1,fsr2h
 24214  004CBC  50DF               	movf	indf2,w,c
 24215  004CBE  6EC9               	movwf	4041,c	;volatile
 24216  004CC0                     
 24217                           ; BSR set to: 0
 24218                           
 24219                           ; BSR set to: 0
 24220  004CC0  B0C7               	btfsc	4039,0,c	;volatile
 24221  004CC2  D015               	goto	u8720
 24222                           
 24223                           ; BSR set to: 0
 24224  004CC4  C066  F062         	movff	enc424j600_writeSPI@timeoutCounter,??_enc424j600_writeSPI
 24225  004CC8  C067  F063         	movff	enc424j600_writeSPI@timeoutCounter+1,??_enc424j600_writeSPI+1
 24226  004CCC  C068  F064         	movff	enc424j600_writeSPI@timeoutCounter+2,??_enc424j600_writeSPI+2
 24227  004CD0  C069  F065         	movff	enc424j600_writeSPI@timeoutCounter+3,??_enc424j600_writeSPI+3
 24228  004CD4  2B66               	incf	enc424j600_writeSPI@timeoutCounter& (0+255),f,b
 24229  004CD6  0E00               	movlw	0
 24230  004CD8  2367               	addwfc	(enc424j600_writeSPI@timeoutCounter+1)& (0+255),f,b
 24231  004CDA  2368               	addwfc	(enc424j600_writeSPI@timeoutCounter+2)& (0+255),f,b
 24232  004CDC  2369               	addwfc	(enc424j600_writeSPI@timeoutCounter+3)& (0+255),f,b
 24233  004CDE  5165               	movf	(??_enc424j600_writeSPI+3)& (0+255),w,b
 24234  004CE0  1164               	iorwf	(??_enc424j600_writeSPI+2)& (0+255),w,b
 24235  004CE2  E105               	bnz	l8147
 24236  004CE4  2962               	incf	??_enc424j600_writeSPI& (0+255),w,b
 24237  004CE6  0E0F               	movlw	15
 24238  004CE8  5963               	subwfb	(??_enc424j600_writeSPI+1)& (0+255),w,b
 24239  004CEA  A0D8               	btfss	status,0,c
 24240  004CEC  D7E9               	goto	l232
 24241  004CEE                     u8720:
 24242  004CEE                     l8147:
 24243                           
 24244                           ; BSR set to: 0
 24245                           ;ENC424J600.c: 492: if (timeoutCounter >= 0xfff) {
 24246  004CEE  5169               	movf	(enc424j600_writeSPI@timeoutCounter+3)& (0+255),w,b
 24247  004CF0  1168               	iorwf	(enc424j600_writeSPI@timeoutCounter+2)& (0+255),w,b
 24248  004CF2  E105               	bnz	u8730
 24249  004CF4  2966               	incf	enc424j600_writeSPI@timeoutCounter& (0+255),w,b
 24250  004CF6  0E0F               	movlw	15
 24251  004CF8  5967               	subwfb	(enc424j600_writeSPI@timeoutCounter+1)& (0+255),w,b
 24252  004CFA  A0D8               	btfss	status,0,c
 24253  004CFC  0012               	return	
 24254  004CFE                     u8730:
 24255                           
 24256                           ; BSR set to: 0
 24257                           ;ENC424J600.c: 493: PORTBbits.RB4=1;
 24258  004CFE  8881               	bsf	3969,4,c	;volatile
 24259                           
 24260                           ; BSR set to: 0
 24261                           ;ENC424J600.c: 494: enc424j600_initSPI();
 24262  004D00  EC2B  F02B         	call	_enc424j600_initSPI	;wreg free
 24263                           
 24264                           ;ENC424J600.c: 495: return;
 24265  004D04  0012               	return	
 24266  004D06                     __end_of_enc424j600_writeSPI:
 24267                           	opt stack 0
 24268                           tblptru	equ	0xFF8
 24269                           tblptrh	equ	0xFF7
 24270                           tblptrl	equ	0xFF6
 24271                           tablat	equ	0xFF5
 24272                           prodh	equ	0xFF4
 24273                           prodl	equ	0xFF3
 24274                           intcon	equ	0xFF2
 24275                           intcon3	equ	0xFF0
 24276                           indf0	equ	0xFEF
 24277                           postinc0	equ	0xFEE
 24278                           plusw0	equ	0xFEB
 24279                           fsr0h	equ	0xFEA
 24280                           fsr0l	equ	0xFE9
 24281                           wreg	equ	0xFE8
 24282                           indf1	equ	0xFE7
 24283                           postinc1	equ	0xFE6
 24284                           postdec1	equ	0xFE5
 24285                           plusw1	equ	0xFE3
 24286                           fsr1h	equ	0xFE2
 24287                           fsr1l	equ	0xFE1
 24288                           indf2	equ	0xFDF
 24289                           postinc2	equ	0xFDE
 24290                           postdec2	equ	0xFDD
 24291                           plusw2	equ	0xFDB
 24292                           fsr2h	equ	0xFDA
 24293                           fsr2l	equ	0xFD9
 24294                           status	equ	0xFD8
 24295                           
 24296 ;; *************** function _enc424j600_readSPI *****************
 24297 ;; Defined at:
 24298 ;;		line 499 in file "src/enc424j600/ENC424J600.c"
 24299 ;; Parameters:    Size  Location     Type
 24300 ;;  data            2    0[BANK0 ] PTR unsigned char 
 24301 ;;		 -> enc424j600_clearInterruptFlag@temp(1), enc424j600_getInterruptFlags@high(1), enc424j600_getInterruptFlags@low(1)
      +, enc424j600_disable@temp(1), 
 24302 ;;		 -> enc424j600_enable@temp(1), enc424j600_disableAutoMACInsertion@temp(1), enc424j600_enableAutoMACInsertion@temp(1)
      +, enc424j600_getPacketCount@lowByte(1), 
 24303 ;;		 -> enc424j600_readPHYRegister@highByte(1), enc424j600_readPHYRegister@lowByte(1), enc424j600_readPHYRegister@temp(1
      +), ethernetController_setLEDConfig@data(1), 
 24304 ;;		 -> ethernetController_updateLinkStatus@temp(1), ethernetController_streamFromRXBuffer@temp(1), ethernetController_u
      +pdateNextPacketPointer@newPointerH(1), ethernetController_updateNextPacketPointer@newPointerL(1), 
 24305 ;;		 -> ethernetController_getRSV@temp(6), ethernetController_getEtherTypeField@lowByte(1), ethernetController_getEtherT
      +ypeField@highByte(1), ethernetController_getSourceMACAddress@temp(1), 
 24306 ;;		 -> ethernetController_getDestinationMACAddress@temp(1), mac.address(6), ethernetController_getMacAddress@mac(6), et
      +hernetController_getSiliconRevision@data(1), 
 24307 ;;		 -> ethernetController_checkDeviceId@data(1), ethernetController_softReset@receivedData(2), 
 24308 ;; Auto vars:     Size  Location     Type
 24309 ;;  timeoutCount    4    6[BANK0 ] unsigned long 
 24310 ;; Return value:  Size  Location     Type
 24311 ;;                  1    wreg      void 
 24312 ;; Registers used:
 24313 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24314 ;; Tracked objects:
 24315 ;;		On entry : 0/0
 24316 ;;		On exit  : 0/0
 24317 ;;		Unchanged: 0/0
 24318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24319 ;;      Params:         0       2       0       0       0       0       0       0       0
 24320 ;;      Locals:         0       4       0       0       0       0       0       0       0
 24321 ;;      Temps:          0       4       0       0       0       0       0       0       0
 24322 ;;      Totals:         0      10       0       0       0       0       0       0       0
 24323 ;;Total ram usage:       10 bytes
 24324 ;; Hardware stack levels used:    1
 24325 ;; Hardware stack levels required when called:    5
 24326 ;; This function calls:
 24327 ;;		_enc424j600_initSPI
 24328 ;; This function is called by:
 24329 ;;		_ethernetController_getSourceMACAddress
 24330 ;;		_ethernetController_getEtherTypeField
 24331 ;;		_ethernetController_getRSV
 24332 ;;		_ethernetController_updateNextPacketPointer
 24333 ;;		_ethernetController_streamFromRXBuffer
 24334 ;;		_enc424j600_readControlRegisterUnbanked
 24335 ;;		_ethernetController_getDestinationMACAddress
 24336 ;; This function uses a non-reentrant model
 24337 ;;
 24338                           
 24339                           	psect	text106
 24340  004BD0                     __ptext106:
 24341                           	opt stack 0
 24342  004BD0                     _enc424j600_readSPI:
 24343                           	opt stack 21
 24344                           
 24345                           ;ENC424J600.c: 501: uint32_t timeoutCounter = 0;
 24346                           
 24347                           ;incstack = 0
 24348  004BD0  0E00               	movlw	0
 24349  004BD2  0100               	movlb	0	; () banked
 24350  004BD4  6F66               	movwf	enc424j600_readSPI@timeoutCounter& (0+255),b
 24351  004BD6  0E00               	movlw	0
 24352  004BD8  6F67               	movwf	(enc424j600_readSPI@timeoutCounter+1)& (0+255),b
 24353  004BDA  0E00               	movlw	0
 24354  004BDC  6F68               	movwf	(enc424j600_readSPI@timeoutCounter+2)& (0+255),b
 24355  004BDE  0E00               	movlw	0
 24356  004BE0  6F69               	movwf	(enc424j600_readSPI@timeoutCounter+3)& (0+255),b
 24357                           
 24358                           ;ENC424J600.c: 502: SSP1BUF = 0x00;
 24359  004BE2  0E00               	movlw	0
 24360  004BE4  6EC9               	movwf	4041,c	;volatile
 24361  004BE6                     
 24362                           ; BSR set to: 0
 24363                           
 24364                           ; BSR set to: 0
 24365  004BE6  B0C7               	btfsc	4039,0,c	;volatile
 24366  004BE8  D015               	goto	u9170
 24367                           
 24368                           ; BSR set to: 0
 24369  004BEA  C066  F062         	movff	enc424j600_readSPI@timeoutCounter,??_enc424j600_readSPI
 24370  004BEE  C067  F063         	movff	enc424j600_readSPI@timeoutCounter+1,??_enc424j600_readSPI+1
 24371  004BF2  C068  F064         	movff	enc424j600_readSPI@timeoutCounter+2,??_enc424j600_readSPI+2
 24372  004BF6  C069  F065         	movff	enc424j600_readSPI@timeoutCounter+3,??_enc424j600_readSPI+3
 24373  004BFA  2B66               	incf	enc424j600_readSPI@timeoutCounter& (0+255),f,b
 24374  004BFC  0E00               	movlw	0
 24375  004BFE  2367               	addwfc	(enc424j600_readSPI@timeoutCounter+1)& (0+255),f,b
 24376  004C00  2368               	addwfc	(enc424j600_readSPI@timeoutCounter+2)& (0+255),f,b
 24377  004C02  2369               	addwfc	(enc424j600_readSPI@timeoutCounter+3)& (0+255),f,b
 24378  004C04  5165               	movf	(??_enc424j600_readSPI+3)& (0+255),w,b
 24379  004C06  1164               	iorwf	(??_enc424j600_readSPI+2)& (0+255),w,b
 24380  004C08  E105               	bnz	l8433
 24381  004C0A  2962               	incf	??_enc424j600_readSPI& (0+255),w,b
 24382  004C0C  0E0F               	movlw	15
 24383  004C0E  5963               	subwfb	(??_enc424j600_readSPI+1)& (0+255),w,b
 24384  004C10  A0D8               	btfss	status,0,c
 24385  004C12  D7E9               	goto	l241
 24386  004C14                     u9170:
 24387  004C14                     l8433:
 24388                           
 24389                           ; BSR set to: 0
 24390                           ;ENC424J600.c: 504: if (timeoutCounter >= 0xfff) {
 24391  004C14  5169               	movf	(enc424j600_readSPI@timeoutCounter+3)& (0+255),w,b
 24392  004C16  1168               	iorwf	(enc424j600_readSPI@timeoutCounter+2)& (0+255),w,b
 24393  004C18  E105               	bnz	u9180
 24394  004C1A  2966               	incf	enc424j600_readSPI@timeoutCounter& (0+255),w,b
 24395  004C1C  0E0F               	movlw	15
 24396  004C1E  5967               	subwfb	(enc424j600_readSPI@timeoutCounter+1)& (0+255),w,b
 24397  004C20  A0D8               	btfss	status,0,c
 24398  004C22  D004               	goto	l245
 24399  004C24                     u9180:
 24400                           
 24401                           ; BSR set to: 0
 24402                           ;ENC424J600.c: 505: PORTBbits.RB4=1;
 24403  004C24  8881               	bsf	3969,4,c	;volatile
 24404                           
 24405                           ; BSR set to: 0
 24406                           ;ENC424J600.c: 506: enc424j600_initSPI();
 24407  004C26  EC2B  F02B         	call	_enc424j600_initSPI	;wreg free
 24408                           
 24409                           ;ENC424J600.c: 507: return;
 24410  004C2A  0012               	return	
 24411  004C2C                     l245:
 24412                           
 24413                           ;ENC424J600.c: 508: }
 24414                           ;ENC424J600.c: 509: *data = SSP1BUF;
 24415  004C2C  C060  FFD9         	movff	enc424j600_readSPI@data,fsr2l
 24416  004C30  C061  FFDA         	movff	enc424j600_readSPI@data+1,fsr2h
 24417  004C34  CFC9 FFDF          	movff	4041,indf2	;volatile
 24418  004C38  0012               	return		;funcret
 24419  004C3A                     __end_of_enc424j600_readSPI:
 24420                           	opt stack 0
 24421                           tblptru	equ	0xFF8
 24422                           tblptrh	equ	0xFF7
 24423                           tblptrl	equ	0xFF6
 24424                           tablat	equ	0xFF5
 24425                           prodh	equ	0xFF4
 24426                           prodl	equ	0xFF3
 24427                           intcon	equ	0xFF2
 24428                           intcon3	equ	0xFF0
 24429                           indf0	equ	0xFEF
 24430                           postinc0	equ	0xFEE
 24431                           plusw0	equ	0xFEB
 24432                           fsr0h	equ	0xFEA
 24433                           fsr0l	equ	0xFE9
 24434                           wreg	equ	0xFE8
 24435                           indf1	equ	0xFE7
 24436                           postinc1	equ	0xFE6
 24437                           postdec1	equ	0xFE5
 24438                           plusw1	equ	0xFE3
 24439                           fsr1h	equ	0xFE2
 24440                           fsr1l	equ	0xFE1
 24441                           indf2	equ	0xFDF
 24442                           postinc2	equ	0xFDE
 24443                           postdec2	equ	0xFDD
 24444                           plusw2	equ	0xFDB
 24445                           fsr2h	equ	0xFDA
 24446                           fsr2l	equ	0xFD9
 24447                           status	equ	0xFD8
 24448                           
 24449 ;; *************** function _enc424j600_initSPI *****************
 24450 ;; Defined at:
 24451 ;;		line 469 in file "src/enc424j600/ENC424J600.c"
 24452 ;; Parameters:    Size  Location     Type
 24453 ;;		None
 24454 ;; Auto vars:     Size  Location     Type
 24455 ;;		None
 24456 ;; Return value:  Size  Location     Type
 24457 ;;                  1    wreg      void 
 24458 ;; Registers used:
 24459 ;;		None
 24460 ;; Tracked objects:
 24461 ;;		On entry : 0/0
 24462 ;;		On exit  : 0/0
 24463 ;;		Unchanged: 0/0
 24464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24465 ;;      Params:         0       0       0       0       0       0       0       0       0
 24466 ;;      Locals:         0       0       0       0       0       0       0       0       0
 24467 ;;      Temps:          0       0       0       0       0       0       0       0       0
 24468 ;;      Totals:         0       0       0       0       0       0       0       0       0
 24469 ;;Total ram usage:        0 bytes
 24470 ;; Hardware stack levels used:    1
 24471 ;; Hardware stack levels required when called:    4
 24472 ;; This function calls:
 24473 ;;		Nothing
 24474 ;; This function is called by:
 24475 ;;		_ethernetController_init
 24476 ;;		_enc424j600_writeSPI
 24477 ;;		_enc424j600_readSPI
 24478 ;; This function uses a non-reentrant model
 24479 ;;
 24480                           
 24481                           	psect	text107
 24482  005656                     __ptext107:
 24483                           	opt stack 0
 24484  005656                     _enc424j600_initSPI:
 24485                           	opt stack 22
 24486                           
 24487                           ;ENC424J600.c: 470: SSP1CON1bits.SSPEN = 0;
 24488                           
 24489                           ;incstack = 0
 24490  005656  9AC6               	bcf	4038,5,c	;volatile
 24491                           
 24492                           ;ENC424J600.c: 471: SSP1STATbits.CKE = 1;
 24493  005658  8CC7               	bsf	4039,6,c	;volatile
 24494                           
 24495                           ;ENC424J600.c: 473: TRISBbits.TRISB0 = 1;
 24496  00565A  8093               	bsf	3987,0,c	;volatile
 24497                           
 24498                           ;ENC424J600.c: 474: ANSELBbits.ANSB0 = 0;
 24499  00565C  010F               	movlb	15	; () banked
 24500  00565E  915C               	bcf	92,0,b	;volatile
 24501                           
 24502                           ;ENC424J600.c: 475: TRISBbits.TRISB1 = 0;
 24503  005660  9293               	bcf	3987,1,c	;volatile
 24504                           
 24505                           ;ENC424J600.c: 476: ANSELBbits.ANSB1 = 0;
 24506  005662  935C               	bcf	92,1,b	;volatile
 24507                           
 24508                           ;ENC424J600.c: 477: TRISBbits.TRISB3 = 0;
 24509  005664  9693               	bcf	3987,3,c	;volatile
 24510                           
 24511                           ;ENC424J600.c: 478: ANSELBbits.ANSB3 = 0;
 24512  005666  975C               	bcf	92,3,b	;volatile
 24513                           
 24514                           ;ENC424J600.c: 479: TRISBbits.TRISB4 = 0;
 24515  005668  9893               	bcf	3987,4,c	;volatile
 24516                           
 24517                           ;ENC424J600.c: 480: ANSELBbits.ANSB4 = 0;
 24518  00566A  995C               	bcf	92,4,b	;volatile
 24519                           
 24520                           ;ENC424J600.c: 481: PORTBbits.RB4=1;
 24521  00566C  8881               	bsf	3969,4,c	;volatile
 24522                           
 24523                           ;ENC424J600.c: 482: SSP1CON1bits.SSPEN = 1;
 24524  00566E  8AC6               	bsf	4038,5,c	;volatile
 24525                           
 24526                           ; BSR set to: 15
 24527  005670  0012               	return		;funcret
 24528  005672                     __end_of_enc424j600_initSPI:
 24529                           	opt stack 0
 24530                           tblptru	equ	0xFF8
 24531                           tblptrh	equ	0xFF7
 24532                           tblptrl	equ	0xFF6
 24533                           tablat	equ	0xFF5
 24534                           prodh	equ	0xFF4
 24535                           prodl	equ	0xFF3
 24536                           intcon	equ	0xFF2
 24537                           intcon3	equ	0xFF0
 24538                           indf0	equ	0xFEF
 24539                           postinc0	equ	0xFEE
 24540                           plusw0	equ	0xFEB
 24541                           fsr0h	equ	0xFEA
 24542                           fsr0l	equ	0xFE9
 24543                           wreg	equ	0xFE8
 24544                           indf1	equ	0xFE7
 24545                           postinc1	equ	0xFE6
 24546                           postdec1	equ	0xFE5
 24547                           plusw1	equ	0xFE3
 24548                           fsr1h	equ	0xFE2
 24549                           fsr1l	equ	0xFE1
 24550                           indf2	equ	0xFDF
 24551                           postinc2	equ	0xFDE
 24552                           postdec2	equ	0xFDD
 24553                           plusw2	equ	0xFDB
 24554                           fsr2h	equ	0xFDA
 24555                           fsr2l	equ	0xFD9
 24556                           status	equ	0xFD8
 24557                           
 24558 ;; *************** function _ethernetController_getDeviceName *****************
 24559 ;; Defined at:
 24560 ;;		line 145 in file "src/enc424j600/ENC424J600.c"
 24561 ;; Parameters:    Size  Location     Type
 24562 ;;		None
 24563 ;; Auto vars:     Size  Location     Type
 24564 ;;  string         11    2[BANK0 ] const unsigned char [11]
 24565 ;; Return value:  Size  Location     Type
 24566 ;;                  2    0[BANK0 ] PTR unsigned char 
 24567 ;; Registers used:
 24568 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 24569 ;; Tracked objects:
 24570 ;;		On entry : 0/0
 24571 ;;		On exit  : 0/0
 24572 ;;		Unchanged: 0/0
 24573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24574 ;;      Params:         0       2       0       0       0       0       0       0       0
 24575 ;;      Locals:         0      11       0       0       0       0       0       0       0
 24576 ;;      Temps:          0       0       0       0       0       0       0       0       0
 24577 ;;      Totals:         0      13       0       0       0       0       0       0       0
 24578 ;;Total ram usage:       13 bytes
 24579 ;; Hardware stack levels used:    1
 24580 ;; Hardware stack levels required when called:    4
 24581 ;; This function calls:
 24582 ;;		Nothing
 24583 ;; This function is called by:
 24584 ;;		_main
 24585 ;; This function uses a non-reentrant model
 24586 ;;
 24587                           
 24588                           	psect	text108
 24589  0055CC                     __ptext108:
 24590                           	opt stack 0
 24591  0055CC                     _ethernetController_getDeviceName:
 24592                           	opt stack 26
 24593                           
 24594                           ;ENC424J600.c: 146: const char string [] = "ENC424J600";
 24595                           
 24596                           ; BSR set to: 15
 24597                           ;incstack = 0
 24598  0055CC  0E09               	movlw	low ethernetController_getDeviceName@F5999
 24599  0055CE  6EF6               	movwf	tblptrl,c
 24600  0055D0                     	if	1	;There is more than 1 active tblptr byte
 24601  0055D0  0E7A               	movlw	high ethernetController_getDeviceName@F5999
 24602  0055D2  6EF7               	movwf	tblptrh,c
 24603  0055D4                     	endif
 24604  0055D4                     	if	0	;There are less than 3 active tblptr bytes
 24605  0055D4                     	endif
 24606  0055D4  EE20  F062         	lfsr	2,ethernetController_getDeviceName@string
 24607  0055D8  0E0A               	movlw	10
 24608  0055DA                     u12330:
 24609  0055DA  0009               	tblrd		*+
 24610  0055DC  CFF5 FFDE          	movff	tablat,postinc2
 24611  0055E0  06E8               	decf	wreg,f,c
 24612  0055E2  E2FB               	bc	u12330
 24613                           
 24614                           ;ENC424J600.c: 147: return (char*) string;
 24615  0055E4  0E62               	movlw	low ethernetController_getDeviceName@string
 24616  0055E6  0100               	movlb	0	; () banked
 24617  0055E8  6F60               	movwf	?_ethernetController_getDeviceName& (0+255),b
 24618  0055EA  0E00               	movlw	high ethernetController_getDeviceName@string
 24619  0055EC  6F61               	movwf	(?_ethernetController_getDeviceName+1)& (0+255),b
 24620  0055EE  0012               	return	
 24621  0055F0                     __end_of_ethernetController_getDeviceName:
 24622                           	opt stack 0
 24623                           tblptru	equ	0xFF8
 24624                           tblptrh	equ	0xFF7
 24625                           tblptrl	equ	0xFF6
 24626                           tablat	equ	0xFF5
 24627                           prodh	equ	0xFF4
 24628                           prodl	equ	0xFF3
 24629                           intcon	equ	0xFF2
 24630                           intcon3	equ	0xFF0
 24631                           indf0	equ	0xFEF
 24632                           postinc0	equ	0xFEE
 24633                           plusw0	equ	0xFEB
 24634                           fsr0h	equ	0xFEA
 24635                           fsr0l	equ	0xFE9
 24636                           wreg	equ	0xFE8
 24637                           indf1	equ	0xFE7
 24638                           postinc1	equ	0xFE6
 24639                           postdec1	equ	0xFE5
 24640                           plusw1	equ	0xFE3
 24641                           fsr1h	equ	0xFE2
 24642                           fsr1l	equ	0xFE1
 24643                           indf2	equ	0xFDF
 24644                           postinc2	equ	0xFDE
 24645                           postdec2	equ	0xFDD
 24646                           plusw2	equ	0xFDB
 24647                           fsr2h	equ	0xFDA
 24648                           fsr2l	equ	0xFD9
 24649                           status	equ	0xFD8
 24650                           
 24651 ;; *************** function ___awmod *****************
 24652 ;; Defined at:
 24653 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
 24654 ;; Parameters:    Size  Location     Type
 24655 ;;  dividend        2   14[BANK0 ] int 
 24656 ;;  divisor         2   16[BANK0 ] int 
 24657 ;; Auto vars:     Size  Location     Type
 24658 ;;  sign            1   19[BANK0 ] unsigned char 
 24659 ;;  counter         1   18[BANK0 ] unsigned char 
 24660 ;; Return value:  Size  Location     Type
 24661 ;;                  2   14[BANK0 ] int 
 24662 ;; Registers used:
 24663 ;;		wreg, status,2, status,0
 24664 ;; Tracked objects:
 24665 ;;		On entry : 0/0
 24666 ;;		On exit  : 0/0
 24667 ;;		Unchanged: 0/0
 24668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24669 ;;      Params:         0       4       0       0       0       0       0       0       0
 24670 ;;      Locals:         0       2       0       0       0       0       0       0       0
 24671 ;;      Temps:          0       0       0       0       0       0       0       0       0
 24672 ;;      Totals:         0       6       0       0       0       0       0       0       0
 24673 ;;Total ram usage:        6 bytes
 24674 ;; Hardware stack levels used:    1
 24675 ;; Hardware stack levels required when called:    4
 24676 ;; This function calls:
 24677 ;;		Nothing
 24678 ;; This function is called by:
 24679 ;;		_main
 24680 ;; This function uses a non-reentrant model
 24681 ;;
 24682                           
 24683                           	psect	text109
 24684  004A7E                     __ptext109:
 24685                           	opt stack 0
 24686  004A7E                     ___awmod:
 24687                           	opt stack 26
 24688                           
 24689                           ; BSR set to: 0
 24690                           ;incstack = 0
 24691  004A7E  0E00               	movlw	0
 24692  004A80  0100               	movlb	0	; () banked
 24693  004A82  6F73               	movwf	___awmod@sign& (0+255),b
 24694                           
 24695                           ; BSR set to: 0
 24696  004A84  AF6F               	btfss	(___awmod@dividend+1)& (0+255),7,b
 24697  004A86  D006               	goto	l1394
 24698                           
 24699                           ; BSR set to: 0
 24700  004A88  6D6E               	negf	___awmod@dividend& (0+255),b
 24701  004A8A  1F6F               	comf	(___awmod@dividend+1)& (0+255),f,b
 24702  004A8C  B0D8               	btfsc	status,0,c
 24703  004A8E  2B6F               	incf	(___awmod@dividend+1)& (0+255),f,b
 24704                           
 24705                           ; BSR set to: 0
 24706  004A90  0E01               	movlw	1
 24707  004A92  6F73               	movwf	___awmod@sign& (0+255),b
 24708  004A94                     l1394:
 24709                           
 24710                           ; BSR set to: 0
 24711                           
 24712                           ; BSR set to: 0
 24713  004A94  AF71               	btfss	(___awmod@divisor+1)& (0+255),7,b
 24714  004A96  D004               	goto	l1395
 24715                           
 24716                           ; BSR set to: 0
 24717  004A98  6D70               	negf	___awmod@divisor& (0+255),b
 24718  004A9A  1F71               	comf	(___awmod@divisor+1)& (0+255),f,b
 24719  004A9C  B0D8               	btfsc	status,0,c
 24720  004A9E  2B71               	incf	(___awmod@divisor+1)& (0+255),f,b
 24721  004AA0                     l1395:
 24722                           
 24723                           ; BSR set to: 0
 24724                           
 24725                           ; BSR set to: 0
 24726  004AA0  5170               	movf	___awmod@divisor& (0+255),w,b
 24727  004AA2  1171               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 24728  004AA4  B4D8               	btfsc	status,2,c
 24729  004AA6  D018               	goto	l1402
 24730                           
 24731                           ; BSR set to: 0
 24732  004AA8  0E01               	movlw	1
 24733  004AAA  6F72               	movwf	___awmod@counter& (0+255),b
 24734  004AAC  D004               	goto	l1397
 24735  004AAE                     
 24736                           ; BSR set to: 0
 24737                           
 24738                           ; BSR set to: 0
 24739  004AAE  90D8               	bcf	status,0,c
 24740  004AB0  3770               	rlcf	___awmod@divisor& (0+255),f,b
 24741  004AB2  3771               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 24742  004AB4  2B72               	incf	___awmod@counter& (0+255),f,b
 24743  004AB6                     l1397:
 24744                           
 24745                           ; BSR set to: 0
 24746                           
 24747                           ; BSR set to: 0
 24748  004AB6  AF71               	btfss	(___awmod@divisor+1)& (0+255),7,b
 24749  004AB8  D7FA               	goto	l1398
 24750  004ABA                     u12600:
 24751                           
 24752                           ; BSR set to: 0
 24753                           
 24754                           ; BSR set to: 0
 24755                           
 24756                           ; BSR set to: 0
 24757  004ABA  5170               	movf	___awmod@divisor& (0+255),w,b
 24758  004ABC  5D6E               	subwf	___awmod@dividend& (0+255),w,b
 24759  004ABE  5171               	movf	(___awmod@divisor+1)& (0+255),w,b
 24760  004AC0  596F               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 24761  004AC2  A0D8               	btfss	status,0,c
 24762  004AC4  D004               	goto	l1401
 24763                           
 24764                           ; BSR set to: 0
 24765  004AC6  5170               	movf	___awmod@divisor& (0+255),w,b
 24766  004AC8  5F6E               	subwf	___awmod@dividend& (0+255),f,b
 24767  004ACA  5171               	movf	(___awmod@divisor+1)& (0+255),w,b
 24768  004ACC  5B6F               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 24769  004ACE                     l1401:
 24770                           
 24771                           ; BSR set to: 0
 24772                           
 24773                           ; BSR set to: 0
 24774  004ACE  90D8               	bcf	status,0,c
 24775  004AD0  3371               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 24776  004AD2  3370               	rrcf	___awmod@divisor& (0+255),f,b
 24777                           
 24778                           ; BSR set to: 0
 24779  004AD4  2F72               	decfsz	___awmod@counter& (0+255),f,b
 24780  004AD6  D7F1               	goto	u12600
 24781  004AD8                     l1402:
 24782                           
 24783                           ; BSR set to: 0
 24784                           
 24785                           ; BSR set to: 0
 24786                           
 24787                           ; BSR set to: 0
 24788  004AD8  5173               	movf	___awmod@sign& (0+255),w,b
 24789  004ADA  B4D8               	btfsc	status,2,c
 24790  004ADC  D004               	goto	l1403
 24791                           
 24792                           ; BSR set to: 0
 24793  004ADE  6D6E               	negf	___awmod@dividend& (0+255),b
 24794  004AE0  1F6F               	comf	(___awmod@dividend+1)& (0+255),f,b
 24795  004AE2  B0D8               	btfsc	status,0,c
 24796  004AE4  2B6F               	incf	(___awmod@dividend+1)& (0+255),f,b
 24797  004AE6                     l1403:
 24798                           
 24799                           ; BSR set to: 0
 24800                           
 24801                           ; BSR set to: 0
 24802  004AE6  C06E  F06E         	movff	___awmod@dividend,?___awmod
 24803  004AEA  C06F  F06F         	movff	___awmod@dividend+1,?___awmod+1
 24804  004AEE  0012               	return	
 24805  004AF0                     __end_of___awmod:
 24806                           	opt stack 0
 24807                           tblptru	equ	0xFF8
 24808                           tblptrh	equ	0xFF7
 24809                           tblptrl	equ	0xFF6
 24810                           tablat	equ	0xFF5
 24811                           prodh	equ	0xFF4
 24812                           prodl	equ	0xFF3
 24813                           intcon	equ	0xFF2
 24814                           intcon3	equ	0xFF0
 24815                           indf0	equ	0xFEF
 24816                           postinc0	equ	0xFEE
 24817                           plusw0	equ	0xFEB
 24818                           fsr0h	equ	0xFEA
 24819                           fsr0l	equ	0xFE9
 24820                           wreg	equ	0xFE8
 24821                           indf1	equ	0xFE7
 24822                           postinc1	equ	0xFE6
 24823                           postdec1	equ	0xFE5
 24824                           plusw1	equ	0xFE3
 24825                           fsr1h	equ	0xFE2
 24826                           fsr1l	equ	0xFE1
 24827                           indf2	equ	0xFDF
 24828                           postinc2	equ	0xFDE
 24829                           postdec2	equ	0xFDD
 24830                           plusw2	equ	0xFDB
 24831                           fsr2h	equ	0xFDA
 24832                           fsr2l	equ	0xFD9
 24833                           status	equ	0xFD8
 24834                           
 24835 ;; *************** function _UARTInit *****************
 24836 ;; Defined at:
 24837 ;;		line 26 in file "src/system/uart.c"
 24838 ;; Parameters:    Size  Location     Type
 24839 ;;		None
 24840 ;; Auto vars:     Size  Location     Type
 24841 ;;		None
 24842 ;; Return value:  Size  Location     Type
 24843 ;;                  1    wreg      void 
 24844 ;; Registers used:
 24845 ;;		wreg, status,2
 24846 ;; Tracked objects:
 24847 ;;		On entry : 0/0
 24848 ;;		On exit  : 0/0
 24849 ;;		Unchanged: 0/0
 24850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24851 ;;      Params:         0       0       0       0       0       0       0       0       0
 24852 ;;      Locals:         0       0       0       0       0       0       0       0       0
 24853 ;;      Temps:          0       0       0       0       0       0       0       0       0
 24854 ;;      Totals:         0       0       0       0       0       0       0       0       0
 24855 ;;Total ram usage:        0 bytes
 24856 ;; Hardware stack levels used:    1
 24857 ;; Hardware stack levels required when called:    4
 24858 ;; This function calls:
 24859 ;;		Nothing
 24860 ;; This function is called by:
 24861 ;;		_main
 24862 ;; This function uses a non-reentrant model
 24863 ;;
 24864                           
 24865                           	psect	text110
 24866  00572E                     __ptext110:
 24867                           	opt stack 0
 24868  00572E                     _UARTInit:
 24869                           	opt stack 26
 24870                           
 24871                           ;uart.c: 27: TXSTA1bits.TXEN = 1;
 24872                           
 24873                           ; BSR set to: 0
 24874                           ;incstack = 0
 24875  00572E  8AAC               	bsf	4012,5,c	;volatile
 24876                           
 24877                           ;uart.c: 28: TXSTA1bits.SYNC = 0;
 24878  005730  98AC               	bcf	4012,4,c	;volatile
 24879                           
 24880                           ;uart.c: 29: RCSTA1bits.SPEN = 1;
 24881  005732  8EAB               	bsf	4011,7,c	;volatile
 24882                           
 24883                           ;uart.c: 30: TXSTA1bits.TX9 = 1;
 24884  005734  8CAC               	bsf	4012,6,c	;volatile
 24885                           
 24886                           ;uart.c: 31: TXSTA1bits.TX9D = 1;
 24887  005736  80AC               	bsf	4012,0,c	;volatile
 24888                           
 24889                           ;uart.c: 32: SPBRG = 3;
 24890  005738  0E03               	movlw	3
 24891  00573A  6EAF               	movwf	4015,c	;volatile
 24892  00573C  0012               	return		;funcret
 24893  00573E                     __end_of_UARTInit:
 24894                           	opt stack 0
 24895                           tblptru	equ	0xFF8
 24896                           tblptrh	equ	0xFF7
 24897                           tblptrl	equ	0xFF6
 24898                           tablat	equ	0xFF5
 24899                           prodh	equ	0xFF4
 24900                           prodl	equ	0xFF3
 24901                           intcon	equ	0xFF2
 24902                           intcon3	equ	0xFF0
 24903                           indf0	equ	0xFEF
 24904                           postinc0	equ	0xFEE
 24905                           plusw0	equ	0xFEB
 24906                           fsr0h	equ	0xFEA
 24907                           fsr0l	equ	0xFE9
 24908                           wreg	equ	0xFE8
 24909                           indf1	equ	0xFE7
 24910                           postinc1	equ	0xFE6
 24911                           postdec1	equ	0xFE5
 24912                           plusw1	equ	0xFE3
 24913                           fsr1h	equ	0xFE2
 24914                           fsr1l	equ	0xFE1
 24915                           indf2	equ	0xFDF
 24916                           postinc2	equ	0xFDE
 24917                           postdec2	equ	0xFDD
 24918                           plusw2	equ	0xFDB
 24919                           fsr2h	equ	0xFDA
 24920                           fsr2l	equ	0xFD9
 24921                           status	equ	0xFD8
 24922                           
 24923 ;; *************** function _ISR *****************
 24924 ;; Defined at:
 24925 ;;		line 269 in file "src/system/main.c"
 24926 ;; Parameters:    Size  Location     Type
 24927 ;;		None
 24928 ;; Auto vars:     Size  Location     Type
 24929 ;;		None
 24930 ;; Return value:  Size  Location     Type
 24931 ;;                  1    wreg      void 
 24932 ;; Registers used:
 24933 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 24934 ;; Tracked objects:
 24935 ;;		On entry : 0/0
 24936 ;;		On exit  : 0/0
 24937 ;;		Unchanged: 0/0
 24938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24939 ;;      Params:         0       0       0       0       0       0       0       0       0
 24940 ;;      Locals:         0       0       0       0       0       0       0       0       0
 24941 ;;      Temps:         19       0       0       0       0       0       0       0       0
 24942 ;;      Totals:        19       0       0       0       0       0       0       0       0
 24943 ;;Total ram usage:       19 bytes
 24944 ;; Hardware stack levels used:    1
 24945 ;; Hardware stack levels required when called:    3
 24946 ;; This function calls:
 24947 ;;		_buttonHandler
 24948 ;;		_sevenSegmentUpdate
 24949 ;;		_updateTime
 24950 ;; This function is called by:
 24951 ;;		Interrupt level 2
 24952 ;; This function uses a non-reentrant model
 24953 ;;
 24954                           
 24955                           	psect	intcode
 24956  000008                     __pintcode:
 24957                           	opt stack 0
 24958  000008                     _ISR:
 24959                           	opt stack 17
 24960                           
 24961                           ;incstack = 0
 24962  000008  8250               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 24963  00000A  CFFA F017          	movff	pclath,??_ISR+1
 24964  00000E  CFFB F018          	movff	pclatu,??_ISR+2
 24965  000012  CFE9 F019          	movff	fsr0l,??_ISR+3
 24966  000016  CFEA F01A          	movff	fsr0h,??_ISR+4
 24967  00001A  CFE1 F01B          	movff	fsr1l,??_ISR+5
 24968  00001E  CFE2 F01C          	movff	fsr1h,??_ISR+6
 24969  000022  CFD9 F01D          	movff	fsr2l,??_ISR+7
 24970  000026  CFDA F01E          	movff	fsr2h,??_ISR+8
 24971  00002A  CFF3 F01F          	movff	prodl,??_ISR+9
 24972  00002E  CFF4 F020          	movff	prodh,??_ISR+10
 24973  000032  CFF6 F021          	movff	tblptrl,??_ISR+11
 24974  000036  CFF7 F022          	movff	tblptrh,??_ISR+12
 24975  00003A  CFF8 F023          	movff	tblptru,??_ISR+13
 24976  00003E  CFF5 F024          	movff	tablat,??_ISR+14
 24977  000042  C050  F025         	movff	btemp,??_ISR+15
 24978  000046  C051  F026         	movff	btemp+1,??_ISR+16
 24979  00004A  C052  F027         	movff	btemp+2,??_ISR+17
 24980  00004E  C053  F028         	movff	btemp+3,??_ISR+18
 24981                           
 24982                           ;main.c: 271: if (PIR1bits.CCP1IF) {
 24983  000052  A49E               	btfss	3998,2,c	;volatile
 24984  000054  D012               	goto	i2l714
 24985                           
 24986                           ;main.c: 272: PIR1bits.CCP1IF = 0;
 24987  000056  949E               	bcf	3998,2,c	;volatile
 24988                           
 24989                           ;main.c: 273: PORTBbits.RB6 = ~PORTBbits.RB6;
 24990  000058  AC81               	btfss	3969,6,c	;volatile
 24991  00005A  D002               	goto	i2u865_40
 24992  00005C  0E01               	movlw	1
 24993  00005E  D001               	goto	i2u865_46
 24994  000060                     i2u865_40:
 24995  000060  0E00               	movlw	0
 24996  000062                     i2u865_46:
 24997  000062  0AFF               	xorlw	255
 24998  000064  6E16               	movwf	??_ISR& (0+255),c
 24999  000066  3A16               	swapf	??_ISR,f,c
 25000  000068  4616               	rlncf	??_ISR,f,c
 25001  00006A  4616               	rlncf	??_ISR,f,c
 25002  00006C  5081               	movf	3969,w,c	;volatile
 25003  00006E  1816               	xorwf	??_ISR,w,c
 25004  000070  0BBF               	andlw	-65
 25005  000072  1816               	xorwf	??_ISR,w,c
 25006  000074  6E81               	movwf	3969,c	;volatile
 25007                           
 25008                           ;main.c: 274: updateTime();
 25009  000076  ECB4  F02B         	call	_updateTime	;wreg free
 25010  00007A                     i2l714:
 25011                           
 25012                           ;main.c: 275: }
 25013                           ;main.c: 277: if (INTCONbits.TMR0IF) {
 25014  00007A  A4F2               	btfss	intcon,2,c	;volatile
 25015  00007C  D00D               	goto	i2l715
 25016                           
 25017                           ;main.c: 278: INTCONbits.TMR0IF = 0;
 25018  00007E  94F2               	bcf	intcon,2,c	;volatile
 25019                           
 25020                           ;main.c: 279: sevenSegmentUpdate(numberToDisplay);
 25021  000080  C031  F00F         	movff	_numberToDisplay,sevenSegmentUpdate@numberToDisplay	;volatile
 25022  000084  C032  F010         	movff	_numberToDisplay+1,sevenSegmentUpdate@numberToDisplay+1	;volatile
 25023  000088  ECDF  F01F         	call	_sevenSegmentUpdate	;wreg free
 25024                           
 25025                           ;main.c: 280: buttonHandler(&buttonState);
 25026  00008C  0ECA               	movlw	low _buttonState
 25027  00008E  6E01               	movwf	buttonHandler@state,c
 25028  000090  0E01               	movlw	high _buttonState
 25029  000092  6E02               	movwf	buttonHandler@state+1,c
 25030  000094  ECF0  F020         	call	_buttonHandler	;wreg free
 25031  000098                     i2l715:
 25032                           
 25033                           ;main.c: 283: }
 25034                           ;main.c: 285: if (INTCON3bits.INT2IF) {
 25035  000098  B2F0               	btfsc	intcon3,1,c	;volatile
 25036                           
 25037                           ;main.c: 286: INTCON3bits.INT2IF = 0;
 25038  00009A  92F0               	bcf	intcon3,1,c	;volatile
 25039                           
 25040                           ;main.c: 293: }
 25041                           ;main.c: 294: if (RCIF) {
 25042  00009C  C028  F053         	movff	??_ISR+18,btemp+3
 25043  0000A0  C027  F052         	movff	??_ISR+17,btemp+2
 25044  0000A4  C026  F051         	movff	??_ISR+16,btemp+1
 25045  0000A8  C025  F050         	movff	??_ISR+15,btemp
 25046  0000AC  C024  FFF5         	movff	??_ISR+14,tablat
 25047  0000B0  C023  FFF8         	movff	??_ISR+13,tblptru
 25048  0000B4  C022  FFF7         	movff	??_ISR+12,tblptrh
 25049  0000B8  C021  FFF6         	movff	??_ISR+11,tblptrl
 25050  0000BC  C020  FFF4         	movff	??_ISR+10,prodh
 25051  0000C0  C01F  FFF3         	movff	??_ISR+9,prodl
 25052  0000C4  C01E  FFDA         	movff	??_ISR+8,fsr2h
 25053  0000C8  C01D  FFD9         	movff	??_ISR+7,fsr2l
 25054  0000CC  C01C  FFE2         	movff	??_ISR+6,fsr1h
 25055  0000D0  C01B  FFE1         	movff	??_ISR+5,fsr1l
 25056  0000D4  C01A  FFEA         	movff	??_ISR+4,fsr0h
 25057  0000D8  C019  FFE9         	movff	??_ISR+3,fsr0l
 25058  0000DC  C018  FFFB         	movff	??_ISR+2,pclatu
 25059  0000E0  C017  FFFA         	movff	??_ISR+1,pclath
 25060  0000E4  9250               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 25061  0000E6  0011               	retfie		f
 25062  0000E8                     __end_of_ISR:
 25063                           	opt stack 0
 25064                           pclatu	equ	0xFFB
 25065                           pclath	equ	0xFFA
 25066                           tblptru	equ	0xFF8
 25067                           tblptrh	equ	0xFF7
 25068                           tblptrl	equ	0xFF6
 25069                           tablat	equ	0xFF5
 25070                           prodh	equ	0xFF4
 25071                           prodl	equ	0xFF3
 25072                           intcon	equ	0xFF2
 25073                           intcon3	equ	0xFF0
 25074                           indf0	equ	0xFEF
 25075                           postinc0	equ	0xFEE
 25076                           plusw0	equ	0xFEB
 25077                           fsr0h	equ	0xFEA
 25078                           fsr0l	equ	0xFE9
 25079                           wreg	equ	0xFE8
 25080                           indf1	equ	0xFE7
 25081                           postinc1	equ	0xFE6
 25082                           postdec1	equ	0xFE5
 25083                           plusw1	equ	0xFE3
 25084                           fsr1h	equ	0xFE2
 25085                           fsr1l	equ	0xFE1
 25086                           indf2	equ	0xFDF
 25087                           postinc2	equ	0xFDE
 25088                           postdec2	equ	0xFDD
 25089                           plusw2	equ	0xFDB
 25090                           fsr2h	equ	0xFDA
 25091                           fsr2l	equ	0xFD9
 25092                           status	equ	0xFD8
 25093                           
 25094 ;; *************** function _updateTime *****************
 25095 ;; Defined at:
 25096 ;;		line 30 in file "src/stack/time.c"
 25097 ;; Parameters:    Size  Location     Type
 25098 ;;		None
 25099 ;; Auto vars:     Size  Location     Type
 25100 ;;		None
 25101 ;; Return value:  Size  Location     Type
 25102 ;;                  1    wreg      void 
 25103 ;; Registers used:
 25104 ;;		wreg, status,2, status,0
 25105 ;; Tracked objects:
 25106 ;;		On entry : 0/0
 25107 ;;		On exit  : 0/0
 25108 ;;		Unchanged: 0/0
 25109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 25110 ;;      Params:         0       0       0       0       0       0       0       0       0
 25111 ;;      Locals:         0       0       0       0       0       0       0       0       0
 25112 ;;      Temps:          0       0       0       0       0       0       0       0       0
 25113 ;;      Totals:         0       0       0       0       0       0       0       0       0
 25114 ;;Total ram usage:        0 bytes
 25115 ;; Hardware stack levels used:    1
 25116 ;; This function calls:
 25117 ;;		Nothing
 25118 ;; This function is called by:
 25119 ;;		_ISR
 25120 ;; This function uses a non-reentrant model
 25121 ;;
 25122                           
 25123                           	psect	text112
 25124  005768                     __ptext112:
 25125                           	opt stack 0
 25126  005768                     _updateTime:
 25127                           	opt stack 19
 25128                           
 25129                           ;time.c: 31: time++;
 25130                           
 25131                           ;incstack = 0
 25132  005768  0E01               	movlw	1
 25133  00576A  2629               	addwf	_time,f,c	;volatile
 25134  00576C  0E00               	movlw	0
 25135  00576E  222A               	addwfc	_time+1,f,c	;volatile
 25136  005770  222B               	addwfc	_time+2,f,c	;volatile
 25137  005772  222C               	addwfc	_time+3,f,c	;volatile
 25138  005774  0012               	return		;funcret
 25139  005776                     __end_of_updateTime:
 25140                           	opt stack 0
 25141                           pclatu	equ	0xFFB
 25142                           pclath	equ	0xFFA
 25143                           tblptru	equ	0xFF8
 25144                           tblptrh	equ	0xFF7
 25145                           tblptrl	equ	0xFF6
 25146                           tablat	equ	0xFF5
 25147                           prodh	equ	0xFF4
 25148                           prodl	equ	0xFF3
 25149                           intcon	equ	0xFF2
 25150                           intcon3	equ	0xFF0
 25151                           indf0	equ	0xFEF
 25152                           postinc0	equ	0xFEE
 25153                           plusw0	equ	0xFEB
 25154                           fsr0h	equ	0xFEA
 25155                           fsr0l	equ	0xFE9
 25156                           wreg	equ	0xFE8
 25157                           indf1	equ	0xFE7
 25158                           postinc1	equ	0xFE6
 25159                           postdec1	equ	0xFE5
 25160                           plusw1	equ	0xFE3
 25161                           fsr1h	equ	0xFE2
 25162                           fsr1l	equ	0xFE1
 25163                           indf2	equ	0xFDF
 25164                           postinc2	equ	0xFDE
 25165                           postdec2	equ	0xFDD
 25166                           plusw2	equ	0xFDB
 25167                           fsr2h	equ	0xFDA
 25168                           fsr2l	equ	0xFD9
 25169                           status	equ	0xFD8
 25170                           
 25171 ;; *************** function _sevenSegmentUpdate *****************
 25172 ;; Defined at:
 25173 ;;		line 41 in file "src/system/sevenseg.c"
 25174 ;; Parameters:    Size  Location     Type
 25175 ;;  numberToDisp    2   14[COMRAM] unsigned int 
 25176 ;; Auto vars:     Size  Location     Type
 25177 ;;  i               1   20[COMRAM] unsigned char 
 25178 ;; Return value:  Size  Location     Type
 25179 ;;                  1    wreg      void 
 25180 ;; Registers used:
 25181 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 25182 ;; Tracked objects:
 25183 ;;		On entry : 0/0
 25184 ;;		On exit  : 0/0
 25185 ;;		Unchanged: 0/0
 25186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 25187 ;;      Params:         2       0       0       0       0       0       0       0       0
 25188 ;;      Locals:         3       0       0       0       0       0       0       0       0
 25189 ;;      Temps:          2       0       0       0       0       0       0       0       0
 25190 ;;      Totals:         7       0       0       0       0       0       0       0       0
 25191 ;;Total ram usage:        7 bytes
 25192 ;; Hardware stack levels used:    1
 25193 ;; Hardware stack levels required when called:    2
 25194 ;; This function calls:
 25195 ;;		_parseNumber
 25196 ;; This function is called by:
 25197 ;;		_ISR
 25198 ;; This function uses a non-reentrant model
 25199 ;;
 25200                           
 25201                           	psect	text113
 25202  003FBE                     __ptext113:
 25203                           	opt stack 0
 25204  003FBE                     _sevenSegmentUpdate:
 25205                           	opt stack 17
 25206                           
 25207                           ;sevenseg.c: 43: uint8_t static digitPointer = 0;
 25208                           ;sevenseg.c: 44: uint8_t static digitsToDisplay[3] = {0, 0, 0};
 25209                           ;sevenseg.c: 45: PORTC &= ~(unsigned)(1 << digitPointer);
 25210                           
 25211                           ;incstack = 0
 25212  003FBE  C045  F011         	movff	sevenSegmentUpdate@digitPointer,??_sevenSegmentUpdate
 25213  003FC2  0E01               	movlw	1
 25214  003FC4  6E12               	movwf	(??_sevenSegmentUpdate+1)& (0+255),c
 25215  003FC6  2A11               	incf	??_sevenSegmentUpdate,f,c
 25216  003FC8  D002               	goto	i2u827_44
 25217  003FCA                     i2u827_45:
 25218  003FCA  90D8               	bcf	status,0,c
 25219  003FCC  3612               	rlcf	??_sevenSegmentUpdate+1,f,c
 25220  003FCE                     i2u827_44:
 25221  003FCE  2E11               	decfsz	??_sevenSegmentUpdate,f,c
 25222  003FD0  D7FC               	goto	i2u827_45
 25223  003FD2  5012               	movf	??_sevenSegmentUpdate+1,w,c
 25224  003FD4  0AFF               	xorlw	255
 25225  003FD6  1682               	andwf	3970,f,c	;volatile
 25226                           
 25227                           ;sevenseg.c: 46: PORTA = 0x00;
 25228  003FD8  0E00               	movlw	0
 25229  003FDA  6E80               	movwf	3968,c	;volatile
 25230                           
 25231                           ;sevenseg.c: 47: digitPointer = (unsigned)((digitPointer >= 2) ? 0 : digitPointer + 1);
 25232  003FDC  0E02               	movlw	2
 25233  003FDE  6045               	cpfslt	sevenSegmentUpdate@digitPointer,c
 25234  003FE0  D007               	goto	i2l747
 25235  003FE2  0E01               	movlw	1
 25236  003FE4  2445               	addwf	sevenSegmentUpdate@digitPointer,w,c
 25237  003FE6  6E13               	movwf	_sevenSegmentUpdate$2495,c
 25238  003FE8  6A14               	clrf	_sevenSegmentUpdate$2495+1,c
 25239  003FEA  0E00               	movlw	0
 25240  003FEC  2214               	addwfc	_sevenSegmentUpdate$2495+1,f,c
 25241  003FEE  D004               	goto	i2l749
 25242  003FF0                     i2l747:
 25243  003FF0  0E00               	movlw	0
 25244  003FF2  6E14               	movwf	_sevenSegmentUpdate$2495+1,c
 25245  003FF4  0E00               	movlw	0
 25246  003FF6  6E13               	movwf	_sevenSegmentUpdate$2495,c
 25247  003FF8                     i2l749:
 25248  003FF8  C013  F045         	movff	_sevenSegmentUpdate$2495,sevenSegmentUpdate@digitPointer
 25249                           
 25250                           ;sevenseg.c: 49: if (numberToDisplay > 999) {
 25251  003FFC  0EE8               	movlw	232
 25252  003FFE  5C0F               	subwf	sevenSegmentUpdate@numberToDisplay,w,c
 25253  004000  0E03               	movlw	3
 25254  004002  5810               	subwfb	sevenSegmentUpdate@numberToDisplay+1,w,c
 25255  004004  B0D8               	btfsc	status,0,c
 25256  004006  0012               	return	
 25257                           
 25258                           ;sevenseg.c: 51: }
 25259                           ;sevenseg.c: 52: for (uint8_t i = 0; i < 3; i++) {
 25260                           
 25261                           ;sevenseg.c: 50: return;
 25262  004008  0E00               	movlw	0
 25263  00400A  6E15               	movwf	sevenSegmentUpdate@i,c
 25264  00400C                     i2l7581:
 25265  00400C  0E02               	movlw	2
 25266  00400E  6415               	cpfsgt	sevenSegmentUpdate@i,c
 25267  004010  D001               	goto	i2l752
 25268  004012  D013               	goto	i2u831_40
 25269  004014                     i2l752:
 25270                           
 25271                           ;sevenseg.c: 53: digitsToDisplay[i] = parseNumber(numberToDisplay, i);
 25272  004014  5015               	movf	sevenSegmentUpdate@i,w,c
 25273  004016  0D01               	mullw	1
 25274  004018  0E39               	movlw	low sevenSegmentUpdate@digitsToDisplay
 25275  00401A  24F3               	addwf	prodl,w,c
 25276  00401C  6ED9               	movwf	fsr2l,c
 25277  00401E  0E00               	movlw	high sevenSegmentUpdate@digitsToDisplay
 25278  004020  20F4               	addwfc	prodh,w,c
 25279  004022  6EDA               	movwf	fsr2h,c
 25280  004024  C00F  F008         	movff	sevenSegmentUpdate@numberToDisplay,parseNumber@numberToDisplay
 25281  004028  C010  F009         	movff	sevenSegmentUpdate@numberToDisplay+1,parseNumber@numberToDisplay+1
 25282  00402C  C015  F00A         	movff	sevenSegmentUpdate@i,parseNumber@digit
 25283  004030  ECD9  F023         	call	_parseNumber	;wreg free
 25284  004034  6EDF               	movwf	indf2,c
 25285  004036  2A15               	incf	sevenSegmentUpdate@i,f,c
 25286  004038  D7E9               	goto	i2l7581
 25287  00403A                     i2u831_40:
 25288                           
 25289                           ;sevenseg.c: 54: }
 25290                           ;sevenseg.c: 55: PORTC |= (unsigned)(1 << digitPointer);
 25291  00403A  C045  F011         	movff	sevenSegmentUpdate@digitPointer,??_sevenSegmentUpdate
 25292  00403E  0E01               	movlw	1
 25293  004040  6E12               	movwf	(??_sevenSegmentUpdate+1)& (0+255),c
 25294  004042  2A11               	incf	??_sevenSegmentUpdate,f,c
 25295  004044  D002               	goto	i2u832_44
 25296  004046                     i2u832_45:
 25297  004046  90D8               	bcf	status,0,c
 25298  004048  3612               	rlcf	??_sevenSegmentUpdate+1,f,c
 25299  00404A                     i2u832_44:
 25300  00404A  2E11               	decfsz	??_sevenSegmentUpdate,f,c
 25301  00404C  D7FC               	goto	i2u832_45
 25302  00404E  5012               	movf	??_sevenSegmentUpdate+1,w,c
 25303  004050  1282               	iorwf	3970,f,c	;volatile
 25304                           
 25305                           ;sevenseg.c: 56: PORTA = (sevenSegCharacters[digitsToDisplay[digitPointer]]);
 25306  004052  5045               	movf	sevenSegmentUpdate@digitPointer,w,c
 25307  004054  0D01               	mullw	1
 25308  004056  0E39               	movlw	low sevenSegmentUpdate@digitsToDisplay
 25309  004058  24F3               	addwf	prodl,w,c
 25310  00405A  6ED9               	movwf	fsr2l,c
 25311  00405C  0E00               	movlw	high sevenSegmentUpdate@digitsToDisplay
 25312  00405E  20F4               	addwfc	prodh,w,c
 25313  004060  6EDA               	movwf	fsr2h,c
 25314  004062  50DF               	movf	indf2,w,c
 25315  004064  6E11               	movwf	??_sevenSegmentUpdate& (0+255),c
 25316  004066  5011               	movf	??_sevenSegmentUpdate,w,c
 25317  004068  0D01               	mullw	1
 25318  00406A  0ECB               	movlw	low _sevenSegCharacters
 25319  00406C  24F3               	addwf	prodl,w,c
 25320  00406E  6ED9               	movwf	fsr2l,c
 25321  004070  0E01               	movlw	high _sevenSegCharacters
 25322  004072  20F4               	addwfc	prodh,w,c
 25323  004074  6EDA               	movwf	fsr2h,c
 25324  004076  50DF               	movf	indf2,w,c
 25325  004078  6E80               	movwf	3968,c	;volatile
 25326  00407A  0012               	return		;funcret
 25327  00407C                     __end_of_sevenSegmentUpdate:
 25328                           	opt stack 0
 25329                           pclatu	equ	0xFFB
 25330                           pclath	equ	0xFFA
 25331                           tblptru	equ	0xFF8
 25332                           tblptrh	equ	0xFF7
 25333                           tblptrl	equ	0xFF6
 25334                           tablat	equ	0xFF5
 25335                           prodh	equ	0xFF4
 25336                           prodl	equ	0xFF3
 25337                           intcon	equ	0xFF2
 25338                           intcon3	equ	0xFF0
 25339                           indf0	equ	0xFEF
 25340                           postinc0	equ	0xFEE
 25341                           plusw0	equ	0xFEB
 25342                           fsr0h	equ	0xFEA
 25343                           fsr0l	equ	0xFE9
 25344                           wreg	equ	0xFE8
 25345                           indf1	equ	0xFE7
 25346                           postinc1	equ	0xFE6
 25347                           postdec1	equ	0xFE5
 25348                           plusw1	equ	0xFE3
 25349                           fsr1h	equ	0xFE2
 25350                           fsr1l	equ	0xFE1
 25351                           indf2	equ	0xFDF
 25352                           postinc2	equ	0xFDE
 25353                           postdec2	equ	0xFDD
 25354                           plusw2	equ	0xFDB
 25355                           fsr2h	equ	0xFDA
 25356                           fsr2l	equ	0xFD9
 25357                           status	equ	0xFD8
 25358                           
 25359 ;; *************** function _parseNumber *****************
 25360 ;; Defined at:
 25361 ;;		line 59 in file "src/system/sevenseg.c"
 25362 ;; Parameters:    Size  Location     Type
 25363 ;;  numberToDisp    2    7[COMRAM] unsigned int 
 25364 ;;  digit           1    9[COMRAM] unsigned char 
 25365 ;; Auto vars:     Size  Location     Type
 25366 ;;  hundreds        1   13[COMRAM] unsigned char 
 25367 ;;  tens            1   12[COMRAM] unsigned char 
 25368 ;;  ones            1   11[COMRAM] unsigned char 
 25369 ;; Return value:  Size  Location     Type
 25370 ;;                  1    wreg      unsigned char 
 25371 ;; Registers used:
 25372 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 25373 ;; Tracked objects:
 25374 ;;		On entry : 0/0
 25375 ;;		On exit  : 0/0
 25376 ;;		Unchanged: 0/0
 25377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 25378 ;;      Params:         3       0       0       0       0       0       0       0       0
 25379 ;;      Locals:         3       0       0       0       0       0       0       0       0
 25380 ;;      Temps:          1       0       0       0       0       0       0       0       0
 25381 ;;      Totals:         7       0       0       0       0       0       0       0       0
 25382 ;;Total ram usage:        7 bytes
 25383 ;; Hardware stack levels used:    1
 25384 ;; Hardware stack levels required when called:    1
 25385 ;; This function calls:
 25386 ;;		i2___lwdiv
 25387 ;; This function is called by:
 25388 ;;		_sevenSegmentUpdate
 25389 ;; This function uses a non-reentrant model
 25390 ;;
 25391                           
 25392                           	psect	text114
 25393  0047B2                     __ptext114:
 25394                           	opt stack 0
 25395  0047B2                     _parseNumber:
 25396                           	opt stack 17
 25397                           
 25398                           ;sevenseg.c: 61: uint8_t hundreds = numberToDisplay / 100u;
 25399                           
 25400                           ;incstack = 0
 25401  0047B2  C008  F001         	movff	parseNumber@numberToDisplay,i2___lwdiv@dividend
 25402  0047B6  C009  F002         	movff	parseNumber@numberToDisplay+1,i2___lwdiv@dividend+1
 25403  0047BA  0E00               	movlw	0
 25404  0047BC  6E04               	movwf	i2___lwdiv@divisor+1,c
 25405  0047BE  0E64               	movlw	100
 25406  0047C0  6E03               	movwf	i2___lwdiv@divisor,c
 25407  0047C2  EC88  F027         	call	i2___lwdiv	;wreg free
 25408  0047C6  5001               	movf	?i2___lwdiv,w,c
 25409  0047C8  6E0E               	movwf	parseNumber@hundreds,c
 25410                           
 25411                           ;sevenseg.c: 62: uint8_t tens = (numberToDisplay - hundreds * 100u) / 10u;
 25412  0047CA  500E               	movf	parseNumber@hundreds,w,c
 25413  0047CC  0D64               	mullw	100
 25414  0047CE  1EF3               	comf	prodl,f,c
 25415  0047D0  1EF4               	comf	prodh,f,c
 25416  0047D2  4AF3               	infsnz	prodl,f,c
 25417  0047D4  2AF4               	incf	prodh,f,c
 25418  0047D6  5008               	movf	parseNumber@numberToDisplay,w,c
 25419  0047D8  24F3               	addwf	prodl,w,c
 25420  0047DA  6E01               	movwf	i2___lwdiv@dividend,c
 25421  0047DC  5009               	movf	parseNumber@numberToDisplay+1,w,c
 25422  0047DE  20F4               	addwfc	prodh,w,c
 25423  0047E0  6E02               	movwf	i2___lwdiv@dividend+1,c
 25424  0047E2  0E00               	movlw	0
 25425  0047E4  6E04               	movwf	i2___lwdiv@divisor+1,c
 25426  0047E6  0E0A               	movlw	10
 25427  0047E8  6E03               	movwf	i2___lwdiv@divisor,c
 25428  0047EA  EC88  F027         	call	i2___lwdiv	;wreg free
 25429  0047EE  5001               	movf	?i2___lwdiv,w,c
 25430  0047F0  6E0D               	movwf	parseNumber@tens,c
 25431                           
 25432                           ;sevenseg.c: 63: uint8_t ones = (numberToDisplay - hundreds * 100u - tens * 10u);
 25433  0047F2  500D               	movf	parseNumber@tens,w,c
 25434  0047F4  0D0A               	mullw	10
 25435  0047F6  CFF3 F00B          	movff	prodl,??_parseNumber
 25436  0047FA  500E               	movf	parseNumber@hundreds,w,c
 25437  0047FC  0D64               	mullw	100
 25438  0047FE  50F3               	movf	prodl,w,c
 25439  004800  240B               	addwf	??_parseNumber,w,c
 25440  004802  0800               	sublw	0
 25441  004804  2408               	addwf	parseNumber@numberToDisplay,w,c
 25442  004806  6E0C               	movwf	parseNumber@ones,c
 25443                           
 25444                           ;sevenseg.c: 64: switch (digit) {
 25445  004808  D008               	goto	i2l756
 25446  00480A                     
 25447                           ;sevenseg.c: 66: return ones;
 25448  00480A  500C               	movf	parseNumber@ones,w,c
 25449  00480C  0012               	return	
 25450  00480E                     
 25451                           ;sevenseg.c: 68: return tens;
 25452  00480E  500D               	movf	parseNumber@tens,w,c
 25453  004810  0012               	return	
 25454  004812                     
 25455                           ;sevenseg.c: 70: return hundreds;
 25456  004812  500E               	movf	parseNumber@hundreds,w,c
 25457  004814  0012               	return	
 25458  004816  0E00               	movlw	0
 25459                           
 25460                           ;sevenseg.c: 72: }
 25461  004818  0012               	return	
 25462  00481A                     i2l756:
 25463  00481A  500A               	movf	parseNumber@digit,w,c
 25464                           
 25465                           ; Switch size 1, requested type "space"
 25466                           ; Number of cases is 3, Range of values is 0 to 2
 25467                           ; switch strategies available:
 25468                           ; Name         Instructions Cycles
 25469                           ; simple_byte           10     6 (average)
 25470                           ;	Chosen strategy is simple_byte
 25471  00481C  0A00               	xorlw	0	; case 0
 25472  00481E  B4D8               	btfsc	status,2,c
 25473  004820  D7F8               	goto	i2l760
 25474  004822  0A01               	xorlw	1	; case 1
 25475  004824  B4D8               	btfsc	status,2,c
 25476  004826  D7F3               	goto	i2l759
 25477  004828  0A03               	xorlw	3	; case 2
 25478  00482A  B4D8               	btfsc	status,2,c
 25479  00482C  D7EE               	goto	i2l757
 25480  00482E  D7F3               	goto	i2l761
 25481  004830                     __end_of_parseNumber:
 25482                           	opt stack 0
 25483                           pclatu	equ	0xFFB
 25484                           pclath	equ	0xFFA
 25485                           tblptru	equ	0xFF8
 25486                           tblptrh	equ	0xFF7
 25487                           tblptrl	equ	0xFF6
 25488                           tablat	equ	0xFF5
 25489                           prodh	equ	0xFF4
 25490                           prodl	equ	0xFF3
 25491                           intcon	equ	0xFF2
 25492                           intcon3	equ	0xFF0
 25493                           indf0	equ	0xFEF
 25494                           postinc0	equ	0xFEE
 25495                           plusw0	equ	0xFEB
 25496                           fsr0h	equ	0xFEA
 25497                           fsr0l	equ	0xFE9
 25498                           wreg	equ	0xFE8
 25499                           indf1	equ	0xFE7
 25500                           postinc1	equ	0xFE6
 25501                           postdec1	equ	0xFE5
 25502                           plusw1	equ	0xFE3
 25503                           fsr1h	equ	0xFE2
 25504                           fsr1l	equ	0xFE1
 25505                           indf2	equ	0xFDF
 25506                           postinc2	equ	0xFDE
 25507                           postdec2	equ	0xFDD
 25508                           plusw2	equ	0xFDB
 25509                           fsr2h	equ	0xFDA
 25510                           fsr2l	equ	0xFD9
 25511                           status	equ	0xFD8
 25512                           
 25513 ;; *************** function i2___lwdiv *****************
 25514 ;; Defined at:
 25515 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 25516 ;; Parameters:    Size  Location     Type
 25517 ;;  dividend        2    0[COMRAM] unsigned int 
 25518 ;;  divisor         2    2[COMRAM] unsigned int 
 25519 ;; Auto vars:     Size  Location     Type
 25520 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 25521 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 25522 ;; Return value:  Size  Location     Type
 25523 ;;                  2    0[COMRAM] unsigned int 
 25524 ;; Registers used:
 25525 ;;		wreg, status,2, status,0
 25526 ;; Tracked objects:
 25527 ;;		On entry : 0/0
 25528 ;;		On exit  : 0/0
 25529 ;;		Unchanged: 0/0
 25530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 25531 ;;      Params:         4       0       0       0       0       0       0       0       0
 25532 ;;      Locals:         3       0       0       0       0       0       0       0       0
 25533 ;;      Temps:          0       0       0       0       0       0       0       0       0
 25534 ;;      Totals:         7       0       0       0       0       0       0       0       0
 25535 ;;Total ram usage:        7 bytes
 25536 ;; Hardware stack levels used:    1
 25537 ;; This function calls:
 25538 ;;		Nothing
 25539 ;; This function is called by:
 25540 ;;		_parseNumber
 25541 ;; This function uses a non-reentrant model
 25542 ;;
 25543                           
 25544                           	psect	text115
 25545  004F10                     __ptext115:
 25546                           	opt stack 0
 25547  004F10                     i2___lwdiv:
 25548                           	opt stack 17
 25549                           
 25550                           ;incstack = 0
 25551  004F10  0E00               	movlw	0
 25552  004F12  6E06               	movwf	i2___lwdiv@quotient+1,c
 25553  004F14  0E00               	movlw	0
 25554  004F16  6E05               	movwf	i2___lwdiv@quotient,c
 25555  004F18  5003               	movf	i2___lwdiv@divisor,w,c
 25556  004F1A  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 25557  004F1C  B4D8               	btfsc	status,2,c
 25558  004F1E  D01C               	goto	i2l1636
 25559  004F20  0E01               	movlw	1
 25560  004F22  6E07               	movwf	i2___lwdiv@counter,c
 25561  004F24  D004               	goto	i2l1631
 25562  004F26  90D8               	bcf	status,0,c
 25563  004F28  3603               	rlcf	i2___lwdiv@divisor,f,c
 25564  004F2A  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 25565  004F2C  2A07               	incf	i2___lwdiv@counter,f,c
 25566  004F2E                     i2l1631:
 25567  004F2E  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 25568  004F30  D7FA               	goto	i2l1632
 25569  004F32                     i2u735_40:
 25570  004F32  90D8               	bcf	status,0,c
 25571  004F34  3605               	rlcf	i2___lwdiv@quotient,f,c
 25572  004F36  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 25573  004F38  5003               	movf	i2___lwdiv@divisor,w,c
 25574  004F3A  5C01               	subwf	i2___lwdiv@dividend,w,c
 25575  004F3C  5004               	movf	i2___lwdiv@divisor+1,w,c
 25576  004F3E  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 25577  004F40  A0D8               	btfss	status,0,c
 25578  004F42  D005               	goto	i2l1635
 25579  004F44  5003               	movf	i2___lwdiv@divisor,w,c
 25580  004F46  5E01               	subwf	i2___lwdiv@dividend,f,c
 25581  004F48  5004               	movf	i2___lwdiv@divisor+1,w,c
 25582  004F4A  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 25583  004F4C  8005               	bsf	i2___lwdiv@quotient,0,c
 25584  004F4E                     i2l1635:
 25585  004F4E  90D8               	bcf	status,0,c
 25586  004F50  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 25587  004F52  3203               	rrcf	i2___lwdiv@divisor,f,c
 25588  004F54  2E07               	decfsz	i2___lwdiv@counter,f,c
 25589  004F56  D7ED               	goto	i2u735_40
 25590  004F58                     i2l1636:
 25591  004F58  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 25592  004F5C  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 25593  004F60  0012               	return		;funcret
 25594  004F62                     __end_ofi2___lwdiv:
 25595                           	opt stack 0
 25596                           pclatu	equ	0xFFB
 25597                           pclath	equ	0xFFA
 25598                           tblptru	equ	0xFF8
 25599                           tblptrh	equ	0xFF7
 25600                           tblptrl	equ	0xFF6
 25601                           tablat	equ	0xFF5
 25602                           prodh	equ	0xFF4
 25603                           prodl	equ	0xFF3
 25604                           intcon	equ	0xFF2
 25605                           intcon3	equ	0xFF0
 25606                           indf0	equ	0xFEF
 25607                           postinc0	equ	0xFEE
 25608                           plusw0	equ	0xFEB
 25609                           fsr0h	equ	0xFEA
 25610                           fsr0l	equ	0xFE9
 25611                           wreg	equ	0xFE8
 25612                           indf1	equ	0xFE7
 25613                           postinc1	equ	0xFE6
 25614                           postdec1	equ	0xFE5
 25615                           plusw1	equ	0xFE3
 25616                           fsr1h	equ	0xFE2
 25617                           fsr1l	equ	0xFE1
 25618                           indf2	equ	0xFDF
 25619                           postinc2	equ	0xFDE
 25620                           postdec2	equ	0xFDD
 25621                           plusw2	equ	0xFDB
 25622                           fsr2h	equ	0xFDA
 25623                           fsr2l	equ	0xFD9
 25624                           status	equ	0xFD8
 25625                           
 25626 ;; *************** function _buttonHandler *****************
 25627 ;; Defined at:
 25628 ;;		line 245 in file "src/system/main.c"
 25629 ;; Parameters:    Size  Location     Type
 25630 ;;  state           2    0[COMRAM] PTR volatile unsigned ch
 25631 ;;		 -> buttonState(1), 
 25632 ;; Auto vars:     Size  Location     Type
 25633 ;;  debounceValu    4    6[COMRAM] const unsigned long 
 25634 ;;  resetValue      4    2[COMRAM] const unsigned long 
 25635 ;; Return value:  Size  Location     Type
 25636 ;;                  1    wreg      void 
 25637 ;; Registers used:
 25638 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 25639 ;; Tracked objects:
 25640 ;;		On entry : 0/0
 25641 ;;		On exit  : 0/0
 25642 ;;		Unchanged: 0/0
 25643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 25644 ;;      Params:         2       0       0       0       0       0       0       0       0
 25645 ;;      Locals:         8       0       0       0       0       0       0       0       0
 25646 ;;      Temps:          0       0       0       0       0       0       0       0       0
 25647 ;;      Totals:        10       0       0       0       0       0       0       0       0
 25648 ;;Total ram usage:       10 bytes
 25649 ;; Hardware stack levels used:    1
 25650 ;; This function calls:
 25651 ;;		Nothing
 25652 ;; This function is called by:
 25653 ;;		_ISR
 25654 ;; This function uses a non-reentrant model
 25655 ;;
 25656                           
 25657                           	psect	text116
 25658  0041E0                     __ptext116:
 25659                           	opt stack 0
 25660  0041E0                     _buttonHandler:
 25661                           	opt stack 19
 25662                           
 25663                           ;main.c: 246: uint8_t static oldState = 0;
 25664                           ;main.c: 247: uint8_t static newState = 0;
 25665                           ;main.c: 248: uint32_t static debounceCounter = 0;
 25666                           ;main.c: 249: const uint32_t debounceValue = 0x1f;
 25667                           
 25668                           ;incstack = 0
 25669  0041E0  0E1F               	movlw	31
 25670  0041E2  6E07               	movwf	buttonHandler@debounceValue,c
 25671  0041E4  0E00               	movlw	0
 25672  0041E6  6E08               	movwf	buttonHandler@debounceValue+1,c
 25673  0041E8  0E00               	movlw	0
 25674  0041EA  6E09               	movwf	buttonHandler@debounceValue+2,c
 25675  0041EC  0E00               	movlw	0
 25676  0041EE  6E0A               	movwf	buttonHandler@debounceValue+3,c
 25677                           
 25678                           ;main.c: 250: const uint32_t resetValue = 0x3ff;
 25679  0041F0  0EFF               	movlw	255
 25680  0041F2  6E03               	movwf	buttonHandler@resetValue,c
 25681  0041F4  0E03               	movlw	3
 25682  0041F6  6E04               	movwf	buttonHandler@resetValue+1,c
 25683  0041F8  0E00               	movlw	0
 25684  0041FA  6E05               	movwf	buttonHandler@resetValue+2,c
 25685  0041FC  0E00               	movlw	0
 25686  0041FE  6E06               	movwf	buttonHandler@resetValue+3,c
 25687                           
 25688                           ;main.c: 251: if ((unsigned)(!(PORTB & (1<<5)))) {
 25689  004200  BA81               	btfsc	3969,5,c	;volatile
 25690  004202  D007               	goto	i2l704
 25691                           
 25692                           ;main.c: 252: debounceCounter++;
 25693  004204  0E01               	movlw	1
 25694  004206  262D               	addwf	buttonHandler@debounceCounter,f,c
 25695  004208  0E00               	movlw	0
 25696  00420A  222E               	addwfc	buttonHandler@debounceCounter+1,f,c
 25697  00420C  222F               	addwfc	buttonHandler@debounceCounter+2,f,c
 25698  00420E  2230               	addwfc	buttonHandler@debounceCounter+3,f,c
 25699                           
 25700                           ;main.c: 253: } else {
 25701  004210  D008               	goto	i2l705
 25702  004212                     i2l704:
 25703                           
 25704                           ;main.c: 254: debounceCounter = 0;
 25705  004212  0E00               	movlw	0
 25706  004214  6E2D               	movwf	buttonHandler@debounceCounter,c
 25707  004216  0E00               	movlw	0
 25708  004218  6E2E               	movwf	buttonHandler@debounceCounter+1,c
 25709  00421A  0E00               	movlw	0
 25710  00421C  6E2F               	movwf	buttonHandler@debounceCounter+2,c
 25711  00421E  0E00               	movlw	0
 25712  004220  6E30               	movwf	buttonHandler@debounceCounter+3,c
 25713  004222                     i2l705:
 25714                           
 25715                           ;main.c: 255: }
 25716                           ;main.c: 256: newState = (unsigned) ((debounceCounter >= debounceValue) ? 1 : 0);
 25717  004222  5007               	movf	buttonHandler@debounceValue,w,c
 25718  004224  5C2D               	subwf	buttonHandler@debounceCounter,w,c
 25719  004226  5008               	movf	buttonHandler@debounceValue+1,w,c
 25720  004228  582E               	subwfb	buttonHandler@debounceCounter+1,w,c
 25721  00422A  5009               	movf	buttonHandler@debounceValue+2,w,c
 25722  00422C  582F               	subwfb	buttonHandler@debounceCounter+2,w,c
 25723  00422E  500A               	movf	buttonHandler@debounceValue+3,w,c
 25724  004230  5830               	subwfb	buttonHandler@debounceCounter+3,w,c
 25725  004232  A0D8               	btfss	status,0,c
 25726  004234  D002               	goto	i2u822_40
 25727  004236  0E01               	movlw	1
 25728  004238  D001               	goto	i2u823_40
 25729  00423A                     i2u822_40:
 25730  00423A  0E00               	movlw	0
 25731  00423C                     i2u823_40:
 25732  00423C  6E46               	movwf	buttonHandler@newState,c
 25733                           
 25734                           ;main.c: 257: if (newState && !oldState) {
 25735  00423E  5046               	movf	buttonHandler@newState,w,c
 25736  004240  B4D8               	btfsc	status,2,c
 25737  004242  D011               	goto	i2l706
 25738  004244  5047               	movf	buttonHandler@oldState,w,c
 25739  004246  A4D8               	btfss	status,2,c
 25740  004248  D00E               	goto	i2l706
 25741                           
 25742                           ;main.c: 258: debounceCounter = debounceValue;
 25743  00424A  C007  F02D         	movff	buttonHandler@debounceValue,buttonHandler@debounceCounter
 25744  00424E  C008  F02E         	movff	buttonHandler@debounceValue+1,buttonHandler@debounceCounter+1
 25745  004252  C009  F02F         	movff	buttonHandler@debounceValue+2,buttonHandler@debounceCounter+2
 25746  004256  C00A  F030         	movff	buttonHandler@debounceValue+3,buttonHandler@debounceCounter+3
 25747                           
 25748                           ;main.c: 259: *state = 1;
 25749  00425A  C001  FFD9         	movff	buttonHandler@state,fsr2l
 25750  00425E  C002  FFDA         	movff	buttonHandler@state+1,fsr2h
 25751  004262  0E01               	movlw	1
 25752  004264  D005               	goto	L11
 25753  004266                     i2l706:
 25754                           
 25755                           ;main.c: 261: *state = 0;
 25756  004266  C001  FFD9         	movff	buttonHandler@state,fsr2l
 25757  00426A  C002  FFDA         	movff	buttonHandler@state+1,fsr2h
 25758  00426E  0E00               	movlw	0
 25759  004270                     L11:
 25760  004270  6EDF               	movwf	indf2,c
 25761                           
 25762                           ;main.c: 262: }
 25763                           ;main.c: 263: if (debounceCounter > resetValue)
 25764  004272  502D               	movf	buttonHandler@debounceCounter,w,c
 25765  004274  5C03               	subwf	buttonHandler@resetValue,w,c
 25766  004276  502E               	movf	buttonHandler@debounceCounter+1,w,c
 25767  004278  5804               	subwfb	buttonHandler@resetValue+1,w,c
 25768  00427A  502F               	movf	buttonHandler@debounceCounter+2,w,c
 25769  00427C  5805               	subwfb	buttonHandler@resetValue+2,w,c
 25770  00427E  5030               	movf	buttonHandler@debounceCounter+3,w,c
 25771  004280  5806               	subwfb	buttonHandler@resetValue+3,w,c
 25772  004282  A0D8               	btfss	status,0,c
 25773  004284  00FF               	reset		;# 
 25774                           
 25775                           ;main.c: 266: oldState = newState;
 25776  004286  C046  F047         	movff	buttonHandler@newState,buttonHandler@oldState
 25777  00428A  0012               	return		;funcret
 25778  00428C                     __end_of_buttonHandler:
 25779                           	opt stack 0
 25780                           pclatu	equ	0xFFB
 25781                           pclath	equ	0xFFA
 25782                           tblptru	equ	0xFF8
 25783                           tblptrh	equ	0xFF7
 25784                           tblptrl	equ	0xFF6
 25785                           tablat	equ	0xFF5
 25786                           prodh	equ	0xFF4
 25787                           prodl	equ	0xFF3
 25788                           intcon	equ	0xFF2
 25789                           intcon3	equ	0xFF0
 25790                           indf0	equ	0xFEF
 25791                           postinc0	equ	0xFEE
 25792                           plusw0	equ	0xFEB
 25793                           fsr0h	equ	0xFEA
 25794                           fsr0l	equ	0xFE9
 25795                           wreg	equ	0xFE8
 25796                           indf1	equ	0xFE7
 25797                           postinc1	equ	0xFE6
 25798                           postdec1	equ	0xFE5
 25799                           plusw1	equ	0xFE3
 25800                           fsr1h	equ	0xFE2
 25801                           fsr1l	equ	0xFE1
 25802                           indf2	equ	0xFDF
 25803                           postinc2	equ	0xFDE
 25804                           postdec2	equ	0xFDD
 25805                           plusw2	equ	0xFDB
 25806                           fsr2h	equ	0xFDA
 25807                           fsr2l	equ	0xFD9
 25808                           status	equ	0xFD8
 25809                           pclatu	equ	0xFFB
 25810                           pclath	equ	0xFFA
 25811                           tblptru	equ	0xFF8
 25812                           tblptrh	equ	0xFF7
 25813                           tblptrl	equ	0xFF6
 25814                           tablat	equ	0xFF5
 25815                           prodh	equ	0xFF4
 25816                           prodl	equ	0xFF3
 25817                           intcon	equ	0xFF2
 25818                           intcon3	equ	0xFF0
 25819                           indf0	equ	0xFEF
 25820                           postinc0	equ	0xFEE
 25821                           plusw0	equ	0xFEB
 25822                           fsr0h	equ	0xFEA
 25823                           fsr0l	equ	0xFE9
 25824                           wreg	equ	0xFE8
 25825                           indf1	equ	0xFE7
 25826                           postinc1	equ	0xFE6
 25827                           postdec1	equ	0xFE5
 25828                           plusw1	equ	0xFE3
 25829                           fsr1h	equ	0xFE2
 25830                           fsr1l	equ	0xFE1
 25831                           indf2	equ	0xFDF
 25832                           postinc2	equ	0xFDE
 25833                           postdec2	equ	0xFDD
 25834                           plusw2	equ	0xFDB
 25835                           fsr2h	equ	0xFDA
 25836                           fsr2l	equ	0xFD9
 25837                           status	equ	0xFD8
 25838                           
 25839                           	psect	rparam
 25840  0000                     pclatu	equ	0xFFB
 25841                           pclath	equ	0xFFA
 25842                           tblptru	equ	0xFF8
 25843                           tblptrh	equ	0xFF7
 25844                           tblptrl	equ	0xFF6
 25845                           tablat	equ	0xFF5
 25846                           prodh	equ	0xFF4
 25847                           prodl	equ	0xFF3
 25848                           intcon	equ	0xFF2
 25849                           intcon3	equ	0xFF0
 25850                           indf0	equ	0xFEF
 25851                           postinc0	equ	0xFEE
 25852                           plusw0	equ	0xFEB
 25853                           fsr0h	equ	0xFEA
 25854                           fsr0l	equ	0xFE9
 25855                           wreg	equ	0xFE8
 25856                           indf1	equ	0xFE7
 25857                           postinc1	equ	0xFE6
 25858                           postdec1	equ	0xFE5
 25859                           plusw1	equ	0xFE3
 25860                           fsr1h	equ	0xFE2
 25861                           fsr1l	equ	0xFE1
 25862                           indf2	equ	0xFDF
 25863                           postinc2	equ	0xFDE
 25864                           postdec2	equ	0xFDD
 25865                           plusw2	equ	0xFDB
 25866                           fsr2h	equ	0xFDA
 25867                           fsr2l	equ	0xFD9
 25868                           status	equ	0xFD8
 25869                           
 25870                           	psect	temp
 25871  000050                     btemp:
 25872                           	opt stack 0
 25873  000050                     	ds	1
 25874  0000                     int$flags	set	btemp
 25875  0000                     wtemp6	set	btemp+1
 25876                           pclatu	equ	0xFFB
 25877                           pclath	equ	0xFFA
 25878                           tblptru	equ	0xFF8
 25879                           tblptrh	equ	0xFF7
 25880                           tblptrl	equ	0xFF6
 25881                           tablat	equ	0xFF5
 25882                           prodh	equ	0xFF4
 25883                           prodl	equ	0xFF3
 25884                           intcon	equ	0xFF2
 25885                           intcon3	equ	0xFF0
 25886                           indf0	equ	0xFEF
 25887                           postinc0	equ	0xFEE
 25888                           plusw0	equ	0xFEB
 25889                           fsr0h	equ	0xFEA
 25890                           fsr0l	equ	0xFE9
 25891                           wreg	equ	0xFE8
 25892                           indf1	equ	0xFE7
 25893                           postinc1	equ	0xFE6
 25894                           postdec1	equ	0xFE5
 25895                           plusw1	equ	0xFE3
 25896                           fsr1h	equ	0xFE2
 25897                           fsr1l	equ	0xFE1
 25898                           indf2	equ	0xFDF
 25899                           postinc2	equ	0xFDE
 25900                           postdec2	equ	0xFDD
 25901                           plusw2	equ	0xFDB
 25902                           fsr2h	equ	0xFDA
 25903                           fsr2l	equ	0xFD9
 25904                           status	equ	0xFD8


Data Sizes:
    Strings     1514
    Constant    11
    Data        52
    BSS         471
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      79
    BANK0           160    160     160
    BANK1           256    148     215
    BANK2           256      0     256
    BANK3           256     46     208
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ultoa@buf	PTR unsigned char  size(2) Largest target is 10
		 -> intToString@number(BANK1[10]), 

    sp__ultoa	PTR unsigned char  size(2) Largest target is 10
		 -> intToString@number(BANK1[10]), 

    ltoa@buf	PTR unsigned char  size(2) Largest target is 10
		 -> intToString@number(BANK1[10]), 

    ltoa@cp	PTR unsigned char  size(2) Largest target is 10
		 -> intToString@number(BANK1[10]), 

    ipv4_setToAllZero@ip	PTR struct ipv4_address size(2) Largest target is 4
		 -> arp_init@ip(BANK0[4]), arp_probe@ipSender(BANK1[4]), 

    ipv4_isAllZero@ip	PTR struct ipv4_address size(2) Largest target is 32
		 -> arp_setNewEntry@ip(BANK0[4]), arp_parseFromRXBuffer@arp(BANK0[32]), 

    ipv4_cmp@b	PTR struct ipv4_address size(2) Largest target is 32
		 -> arp_checkForEntry@ip(BANK0[4]), arp_sendReply@myIP(BANK1[4]), arp_parseFromRXBuffer@arp(BANK0[32]), 

    ipv4_cmp@a	PTR struct ipv4_address size(2) Largest target is 112
		 -> arp_table(BANK3[112]), arp_sendReply@request(BANK1[32]), arp_parseFromRXBuffer@arp(BANK0[32]), 

    ipv4_SrcAddrChanged@err	PTR struct error size(2) Largest target is 3
		 -> arp_background@err(BANK1[3]), 

    arpStatus	PTR struct error size(2) Largest target is 3
		 -> NULL(NULL[0]), arp_background@err(BANK1[3]), 

    ipv4_handleNewPacket@frame	PTR struct ethernetFrame size(2) Largest target is 135
		 -> stack(BANK2[135]), 

    ipv4_checkHeaderChecksum@header	PTR struct ipv4_header size(2) Largest target is 23
		 -> ipv4_handleNewPacket@ip(BANK0[23]), 

    ipv4_parseHeader@field	PTR struct memoryField size(2) Largest target is 9
		 -> ipv4_handleNewPacket@headerField(BANK0[9]), 

    ipv4_calculateHeaderChecksum@header	PTR struct ipv4_header size(2) Largest target is 135
		 -> ipv4_checkHeaderChecksum@testHeader(BANK0[23]), stack.pendingPacketToSend(BANK2[66]), stack(BANK2[135]), 

    ipv4_writeHeaderIntoBuffer@ptr	PTR unsigned char  size(2) Largest target is 32
		 -> main@headerBuf(BANK3[32]), 

    ipv4_txFrameRequest@packet	PTR struct ipv4_packet size(2) Largest target is 135
		 -> stack(BANK2[135]), 

    arp_checkForEntry@index	PTR unsigned char  size(2) Largest target is 1
		 -> ipv4_sendFrame@index(BANK0[1]), arp_gratuitous@index(BANK0[1]), arp_probe@index(BANK1[1]), 

    arp_parseFromRXBuffer@frame	PTR struct ethernetFrame size(2) Largest target is 135
		 -> stack(BANK2[135]), 

    arp_handleNewPacket@frame	PTR struct ethernetFrame size(2) Largest target is 135
		 -> stack(BANK2[135]), 

    sp__arpEntryToString	PTR unsigned char  size(2) Largest target is 50
		 -> arpEntryToString@string(BANK3[50]), 

    sp__ipProtocolToString	PTR unsigned char  size(2) Largest target is 17
		 -> STR_68(CODE[17]), STR_67(CODE[4]), STR_66(CODE[4]), STR_65(CODE[5]), 

    sp__hexToString	PTR unsigned char  size(2) Largest target is 10
		 -> hexToString@number(BANK1[10]), 

    sp__ltoa	PTR unsigned char  size(2) Largest target is 10
		 -> intToString@number(BANK1[10]), 

    UARTTransmitText@str	PTR const unsigned char  size(2) Largest target is 58
		 -> STR_113(CODE[27]), STR_112(CODE[33]), STR_111(CODE[19]), STR_110(CODE[2]), 
		 -> STR_109(CODE[3]), STR_108(CODE[3]), STR_107(CODE[3]), STR_106(CODE[3]), 
		 -> STR_105(CODE[5]), STR_104(CODE[2]), STR_103(CODE[2]), STR_102(CODE[7]), 
		 -> STR_101(CODE[11]), STR_100(CODE[3]), STR_99(CODE[27]), STR_98(CODE[3]), 
		 -> STR_97(CODE[8]), STR_96(CODE[9]), STR_95(CODE[3]), STR_94(CODE[39]), 
		 -> STR_93(CODE[3]), STR_92(CODE[3]), STR_91(CODE[30]), STR_90(CODE[33]), 
		 -> STR_89(CODE[39]), STR_88(CODE[35]), STR_87(CODE[58]), STR_86(CODE[36]), 
		 -> STR_85(CODE[34]), STR_84(CODE[3]), STR_83(CODE[43]), STR_82(CODE[4]), 
		 -> STR_81(CODE[12]), STR_80(CODE[26]), STR_79(CODE[2]), STR_78(CODE[3]), 
		 -> STR_77(CODE[16]), STR_76(CODE[15]), STR_75(CODE[10]), STR_74(CODE[2]), 
		 -> STR_73(CODE[3]), STR_72(CODE[5]), STR_71(CODE[3]), STR_70(CODE[2]), 
		 -> STR_69(CODE[39]), arpEntryToString@string(BANK3[50]), ipAdressToString@address(BANK2[16]), STR_68(CODE[17]), 
		 -> STR_67(CODE[4]), STR_66(CODE[4]), STR_65(CODE[5]), STR_64(CODE[18]), 
		 -> STR_63(CODE[4]), STR_62(CODE[5]), macToString@address(BANK0[18]), hexToString@number(BANK1[10]), 
		 -> intToString@number(BANK1[10]), STR_61(CODE[5]), STR_60(CODE[9]), STR_59(CODE[30]), 
		 -> STR_58(CODE[34]), STR_57(CODE[55]), STR_56(CODE[37]), STR_55(CODE[15]), 
		 -> STR_54(CODE[14]), STR_53(CODE[19]), STR_52(CODE[30]), STR_51(CODE[17]), 
		 -> STR_50(CODE[8]), STR_49(CODE[29]), STR_48(CODE[29]), STR_47(CODE[20]), 
		 -> STR_46(CODE[19]), STR_45(CODE[19]), STR_44(CODE[13]), STR_43(CODE[4]), 
		 -> STR_42(CODE[5]), STR_41(CODE[32]), STR_40(CODE[3]), STR_39(CODE[15]), 
		 -> STR_38(CODE[51]), STR_37(CODE[4]), STR_36(CODE[23]), STR_35(CODE[12]), 
		 -> STR_34(CODE[4]), STR_33(CODE[9]), STR_32(CODE[2]), STR_31(CODE[12]), 
		 -> STR_30(CODE[24]), STR_29(CODE[51]), STR_28(CODE[49]), STR_27(CODE[51]), 
		 -> STR_26(CODE[2]), STR_25(CODE[3]), STR_24(CODE[37]), STR_23(CODE[38]), 
		 -> STR_22(CODE[40]), STR_21(CODE[2]), STR_20(CODE[3]), STR_19(CODE[3]), 
		 -> STR_18(CODE[3]), STR_17(CODE[5]), STR_16(CODE[2]), STR_15(CODE[3]), 
		 -> STR_14(CODE[5]), STR_13(CODE[3]), STR_12(CODE[3]), STR_11(CODE[2]), 
		 -> STR_10(CODE[20]), STR_9(CODE[7]), STR_8(CODE[6]), STR_7(CODE[2]), 
		 -> STR_6(CODE[2]), STR_5(CODE[16]), STR_4(CODE[10]), STR_3(CODE[12]), 
		 -> STR_2(CODE[2]), STR_1(CODE[2]), ethernetController_getDeviceName@string(BANK0[11]), 

    buttonHandler@state	PTR volatile unsigned char  size(2) Largest target is 1
		 -> buttonState(BANK1[1]), 

    sp__ipAdressToString	PTR unsigned char  size(2) Largest target is 16
		 -> ipAdressToString@address(BANK2[16]), 

    handleStackBackgroundTasks@stack	PTR struct stack size(2) Largest target is 135
		 -> stack(BANK2[135]), 

    mac_setAllZero@mac	PTR struct macaddress size(2) Largest target is 6
		 -> arp_init@mac(BANK0[6]), arp_sendRequest@targetMAC(BANK1[6]), 

    mac_cmp@b	PTR struct macaddress size(2) Largest target is 32
		 -> arp_parseFromRXBuffer@arp(BANK0[32]), 

    mac_cmp@a	PTR struct macaddress size(2) Largest target is 32
		 -> arp_parseFromRXBuffer@arp(BANK0[32]), 

    mac_isAllZero@mac	PTR struct macaddress size(2) Largest target is 32
		 -> arp_setNewEntry@mac(BANK0[6]), arp_parseFromRXBuffer@arp(BANK0[32]), 

    mac_setToBroadcast@mac	PTR struct macaddress size(2) Largest target is 6
		 -> arp_send@destination(BANK0[6]), 

    sp__etherTypeToString	PTR unsigned char  size(2) Largest target is 18
		 -> STR_64(CODE[18]), STR_63(CODE[4]), STR_62(CODE[5]), 

    sp__macToString	PTR unsigned char  size(2) Largest target is 18
		 -> macToString@address(BANK0[18]), 

    sp__intToString	PTR unsigned char  size(2) Largest target is 10
		 -> intToString@number(BANK1[10]), 

    ethernet_rxGetNewFrame@frame	PTR struct ethernetFrame size(2) Largest target is 135
		 -> stack(BANK2[135]), 

    ethernet_txFrameRequest@frame	PTR struct ethernetFrame size(2) Largest target is 135
		 -> arp_send@ethFrame(BANK0[34]), stack(BANK2[135]), 

    enc424j600_updateReceiveStatusVector@rsv	PTR unsigned char  size(2) Largest target is 6
		 -> ethernetController_getRSV@temp(BANK1[6]), 

    enc424j600_readPHYRegister@data	PTR unsigned int  size(2) Largest target is 2
		 -> ethernetController_updateLinkStatus@temp16(BANK0[2]), 

    enc424j600_readControlRegisterUnbanked@data	PTR unsigned char  size(2) Largest target is 6
		 -> enc424j600_clearInterruptFlag@temp(BANK0[1]), enc424j600_getInterruptFlags@high(BANK0[1]), enc424j600_getInterruptFlags@low(BANK0[1]), enc424j600_disable@temp(COMRAM[1]), 
		 -> enc424j600_enable@temp(COMRAM[1]), enc424j600_disableAutoMACInsertion@temp(COMRAM[1]), enc424j600_enableAutoMACInsertion@temp(BANK0[1]), enc424j600_getPacketCount@lowByte(BANK0[1]), 
		 -> enc424j600_readPHYRegister@highByte(BANK0[1]), enc424j600_readPHYRegister@lowByte(BANK0[1]), enc424j600_readPHYRegister@temp(BANK0[1]), ethernetController_setLEDConfig@data(BANK0[1]), 
		 -> ethernetController_updateLinkStatus@temp(BANK0[1]), mac.address(COMRAM[6]), ethernetController_getMacAddress@mac(BANK0[6]), ethernetController_getSiliconRevision@data(COMRAM[1]), 
		 -> ethernetController_checkDeviceId@data(BANK0[1]), ethernetController_softReset@receivedData(BANK0[2]), 

    enc424j600_writeControlRegisterUnbanked@data	PTR unsigned char  size(2) Largest target is 6
		 -> enc424j600_clearInterruptFlag@temp(BANK0[1]), enc424j600_disable@temp(COMRAM[1]), enc424j600_enable@temp(COMRAM[1]), enc424j600_disableAutoMACInsertion@temp(COMRAM[1]), 
		 -> enc424j600_enableAutoMACInsertion@temp(BANK0[1]), enc424j600_setRXTailPointer@highByte(BANK0[1]), enc424j600_setRXTailPointer@lowByte(BANK0[1]), enc424j600_setRXBufferStartAddress@highByte(BANK0[1]), 
		 -> enc424j600_setRXBufferStartAddress@lowByte(BANK0[1]), enc424j600_setTXStartAddress@highByte(BANK0[1]), enc424j600_setTXStartAddress@lowByte(BANK0[1]), enc424j600_setTXLength@highByte(BANK0[1]), 
		 -> enc424j600_setTXLength@lowByte(BANK0[1]), enc424j600_readPHYRegister@temp(BANK0[1]), enc424j600_readPHYRegister@unusedBits(BANK0[1]), enc424j600_readPHYRegister@PHYaddress(BANK0[1]), 
		 -> ethernetController_setLEDConfig@data(BANK0[1]), mac.address(COMRAM[6]), ethernetController_setMacAddress@mac(COMRAM[6]), ethernetController_softReset@dataToSend(BANK0[2]), 

    enc424j600_readSPI@data	PTR unsigned char  size(2) Largest target is 6
		 -> enc424j600_clearInterruptFlag@temp(BANK0[1]), enc424j600_getInterruptFlags@high(BANK0[1]), enc424j600_getInterruptFlags@low(BANK0[1]), enc424j600_disable@temp(COMRAM[1]), 
		 -> enc424j600_enable@temp(COMRAM[1]), enc424j600_disableAutoMACInsertion@temp(COMRAM[1]), enc424j600_enableAutoMACInsertion@temp(BANK0[1]), enc424j600_getPacketCount@lowByte(BANK0[1]), 
		 -> enc424j600_readPHYRegister@highByte(BANK0[1]), enc424j600_readPHYRegister@lowByte(BANK0[1]), enc424j600_readPHYRegister@temp(BANK0[1]), ethernetController_setLEDConfig@data(BANK0[1]), 
		 -> ethernetController_updateLinkStatus@temp(BANK0[1]), ethernetController_streamFromRXBuffer@temp(BANK0[1]), ethernetController_updateNextPacketPointer@newPointerH(BANK0[1]), ethernetController_updateNextPacketPointer@newPointerL(BANK0[1]), 
		 -> ethernetController_getRSV@temp(BANK1[6]), ethernetController_getEtherTypeField@lowByte(BANK0[1]), ethernetController_getEtherTypeField@highByte(BANK0[1]), ethernetController_getSourceMACAddress@temp(BANK0[1]), 
		 -> ethernetController_getDestinationMACAddress@temp(COMRAM[1]), mac.address(COMRAM[6]), ethernetController_getMacAddress@mac(BANK0[6]), ethernetController_getSiliconRevision@data(COMRAM[1]), 
		 -> ethernetController_checkDeviceId@data(BANK0[1]), ethernetController_softReset@receivedData(BANK0[2]), 

    enc424j600_writeSPI@data	PTR unsigned char  size(2) Largest target is 6
		 -> enc424j600_clearInterruptFlag@temp(BANK0[1]), enc424j600_disable@temp(COMRAM[1]), enc424j600_enable@temp(COMRAM[1]), enc424j600_disableAutoMACInsertion@temp(COMRAM[1]), 
		 -> enc424j600_enableAutoMACInsertion@temp(BANK0[1]), enc424j600_setRXTailPointer@highByte(BANK0[1]), enc424j600_setRXTailPointer@lowByte(BANK0[1]), enc424j600_setRXBufferStartAddress@highByte(BANK0[1]), 
		 -> enc424j600_setRXBufferStartAddress@lowByte(BANK0[1]), enc424j600_setERXDATAReadPointer@highByte(BANK0[1]), enc424j600_setERXDATAReadPointer@lowByte(BANK0[1]), enc424j600_setERXDATAReadPointer@opcode(BANK0[1]), 
		 -> enc424j600_setGPDATAReadPointer@highByte(COMRAM[1]), enc424j600_setGPDATAReadPointer@lowByte(COMRAM[1]), enc424j600_setGPDATAReadPointer@opcode(COMRAM[1]), enc424j600_setGPDATAWritePointer@highByte(BANK0[1]), 
		 -> enc424j600_setGPDATAWritePointer@lowByte(BANK0[1]), enc424j600_setGPDATAWritePointer@opcode(BANK0[1]), enc424j600_setTXStartAddress@highByte(BANK0[1]), enc424j600_setTXStartAddress@lowByte(BANK0[1]), 
		 -> enc424j600_setTXLength@highByte(BANK0[1]), enc424j600_setTXLength@lowByte(BANK0[1]), enc424j600_readPHYRegister@temp(BANK0[1]), enc424j600_readPHYRegister@unusedBits(BANK0[1]), 
		 -> enc424j600_readPHYRegister@PHYaddress(BANK0[1]), enc424j600_readControlRegisterUnbanked@addr(BANK0[1]), enc424j600_readControlRegisterUnbanked@opcode(BANK0[1]), enc424j600_writeControlRegisterUnbanked@addr(BANK0[1]), 
		 -> enc424j600_writeControlRegisterUnbanked@opcode(BANK0[1]), enc424j600_writeSingleByte@opcode(BANK0[1]), ethernetController_setLEDConfig@data(BANK0[1]), ethernetController_streamFromRXBuffer@opcode(BANK0[1]), 
		 -> ethernetController_updateNextPacketPointer@opcode(BANK0[1]), ethernetController_getRSV@opcode(BANK0[1]), ethernetController_getEtherTypeField@opcode(BANK0[1]), ethernetController_getSourceMACAddress@opcode(BANK0[1]), 
		 -> ethernetController_getDestinationMACAddress@opcode(COMRAM[1]), ethernetController_writeEtherTypeFieldToBuffer@opcode(BANK0[1]), ethernetController_writeEtherTypeFieldToBuffer@highByte(BANK0[1]), ethernetController_writeEtherTypeFieldToBuffer@lowByte(BANK0[1]), 
		 -> ethernetController_writeDestinationMACAddress@opcode(BANK0[1]), ethernetController_writeDestinationMACAddress@data(BANK0[6]), ethernetController_streamToTransmitBuffer@data(BANK0[1]), ethernetController_streamToTransmitBuffer@opcode(BANK0[1]), 
		 -> mac.address(COMRAM[6]), ethernetController_setMacAddress@mac(COMRAM[6]), ethernetController_softReset@dataToSend(BANK0[2]), 

    ethernetController_updateLinkStatus@state	PTR struct ethernetConnection size(2) Largest target is 135
		 -> stack(BANK2[135]), 

    sp__ethernetController_getDeviceName	PTR unsigned char  size(2) Largest target is 11
		 -> ethernetController_getDeviceName@string(BANK0[11]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->_sevenSegmentUpdate
    _sevenSegmentUpdate->_parseNumber
    _parseNumber->i2___lwdiv

Critical Paths under _main in BANK0

    _stack_init->_arp_init
    _srand->_ethernetController_getMacAddress
    _printEthernetState->_UARTTransmitText
    _printErrorMessage->_UARTTransmitText
    _ipv4_txFrameRequest->_ethernet_txFrameRequest
    _ipv4_streamToTransmissionBuffer->_ethernetController_streamToTransmitBuffer
    _handleStackBackgroundTasks->_ipv4_sendFrame
    _ipv4_background->_UARTTransmitText
    _ethernet_rxGetNewFrame->_arp_handleNewPacket
    _ipv4_handleNewPacket->_ipv4_checkHeaderChecksum
    _ipv4_parseHeader->_ethernetController_streamFromRXBuffer
    _ipv4_checkHeaderChecksum->_UARTTransmitText
    _hexToString->_hexToChar
    _ethernetController_updateNextPacketPointer->_enc424j600_setERXDATAReadPointer
    _ethernetController_getRSV->_enc424j600_updateReceiveStatusVector
    _ethernetController_getEtherTypeField->_enc424j600_setERXDATAReadPointer
    _ethernetController_dropPacket->_enc424j600_setRXTailPointer
    _ethernetController_getNextPacketPointer->_enc424j600_getNextPacketPointer
    _arp_sendReply->_arp_send
    _arp_parseFromRXBuffer->_ethernetController_streamFromRXBuffer
    _ethernetController_streamFromRXBuffer->_enc424j600_setERXDATAReadPointer
    _UARTTransmitInt->_UARTTransmitText
    _intToString->_ltoa
    _ltoa->_ultoa
    _ultoa->___lldiv
    _ethernetController_updateLinkStatus->_enc424j600_readPHYRegister
    _enc424j600_readPHYRegister->_enc424j600_readControlRegisterUnbanked
    _enc424j600_readPHYRegister->_enc424j600_writeControlRegisterUnbanked
    _ethernetController_setLEDConfig->_enc424j600_readControlRegisterUnbanked
    _ethernetController_setLEDConfig->_enc424j600_writeControlRegisterUnbanked
    _ethernetController_pollInterruptFlags->_enc424j600_getInterruptFlags
    _enc424j600_getInterruptFlags->_enc424j600_readControlRegisterUnbanked
    _ethernetController_newPacketAvailable->_enc424j600_getPacketCount
    _enc424j600_getPacketCount->_enc424j600_readControlRegisterUnbanked
    _ethernetController_clearInterruptFlag->_enc424j600_clearInterruptFlag
    _enc424j600_clearInterruptFlag->_enc424j600_readControlRegisterUnbanked
    _enc424j600_clearInterruptFlag->_enc424j600_writeControlRegisterUnbanked
    _arp_init->_arp_setNewEntry
    _arp_setNewEntry->_UARTTransmitText
    _macToString->_ethernetController_getMacAddress
    _arp_background->_arp_gratuitous
    _rand->___lmul
    _ipAdressToString->___lwmod
    ___lwmod->_rand
    _arp_sendRequest->_arp_send
    _ethernetController_getMacAddress->_enc424j600_readControlRegisterUnbanked
    _arp_send->_ethernet_txFrameRequest
    _ethernet_txFrameRequest->_memory_txFrameRequest
    _memory_txFrameRequest->_checkForOverlap
    _checkForOverlap->_checkForOverlapSwitched
    _ethernetController_writeEtherTypeFieldToBuffer->_enc424j600_setGPDATAWritePointer
    _ethernetController_writeDestinationMACAddress->_enc424j600_setGPDATAWritePointer
    _ethernetController_streamToTransmitBuffer->_enc424j600_setGPDATAWritePointer
    _enc424j600_setGPDATAWritePointer->_enc424j600_writeSPI
    _ethernetController_sendPacket->_enc424j600_setTXLength
    _ethernetController_sendPacket->_enc424j600_setTXStartAddress
    _enc424j600_setTXStartAddress->_enc424j600_writeControlRegisterUnbanked
    _enc424j600_setTXLength->_enc424j600_writeControlRegisterUnbanked
    _ethernetController_getSourceMACAddress->_enc424j600_setERXDATAReadPointer
    _enc424j600_setERXDATAReadPointer->_enc424j600_writeSPI
    _arp_checkForEntry->_ipv4_cmp
    _UARTTransmitText->_macToString
    _ethernetController_init->_ethernetController_softReset
    _ethernetController_softReset->_enc424j600_readControlRegisterUnbanked
    _ethernetController_softReset->_enc424j600_writeControlRegisterUnbanked
    _ethernetController_checkDeviceId->_enc424j600_readControlRegisterUnbanked
    _enc424j600_setRXTailPointer->_enc424j600_writeControlRegisterUnbanked
    _enc424j600_setRXBufferStartAddress->_enc424j600_writeControlRegisterUnbanked
    _enc424j600_enableReception->_enc424j600_writeSingleByte
    _enc424j600_writeSingleByte->_enc424j600_writeSPI
    _enc424j600_enableAutoMACInsertion->_enc424j600_readControlRegisterUnbanked
    _enc424j600_enableAutoMACInsertion->_enc424j600_writeControlRegisterUnbanked
    _enc424j600_writeControlRegisterUnbanked->_enc424j600_writeSPI
    _enc424j600_readControlRegisterUnbanked->_enc424j600_readSPI
    _enc424j600_readControlRegisterUnbanked->_enc424j600_writeSPI
    ___awmod->_rand

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_handleStackBackgroundTasks
    _handleStackBackgroundTasks->_ethernet_rxGetNewFrame
    _ipv4_sendFrame->_arp_sendRequest
    _ethernet_rxGetNewFrame->_arp_handleNewPacket
    _arp_handleNewPacket->_arp_sendReply
    _arp_background->_arp_probe
    _arp_probe->_arp_sendRequest
    _arp_gratuitous->_arp_sendRequest

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                50    50      0  954877
                                            145 BANK1      3     3      0
                                              0 BANK3     46    46      0
                           _UARTInit
                   _UARTTransmitText
                            ___awmod
   _ethernetController_checkDeviceId
   _ethernetController_getDeviceName
   _ethernetController_getMacAddress
            _ethernetController_init
    _ethernetController_setLEDConfig
         _handleStackBackgroundTasks
                        _intToString
                   _ipAdressToString
       _ipv4_calculateHeaderChecksum
            _ipv4_getIPSourceAddress
    _ipv4_streamToTransmissionBuffer
                _ipv4_txFrameRequest
         _ipv4_writeHeaderIntoBuffer
                        _macToString
                  _printErrorMessage
                 _printEthernetState
                               _rand
                   _sevenSegmentInit
                              _srand
                         _stack_init
 ---------------------------------------------------------------------------------
 (1) _stack_init                                           0     0      0   39547
                           _arp_init
                          _ipv4_init
 ---------------------------------------------------------------------------------
 (2) _ipv4_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _srand                                                2     0      2     135
                                             26 BANK0      2     0      2
   _ethernetController_getMacAddress (ARG)
 ---------------------------------------------------------------------------------
 (1) _sevenSegmentInit                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _printEthernetState                                  15     0     15   15644
                                             58 BANK0     15     0     15
                   _UARTTransmitText
 ---------------------------------------------------------------------------------
 (1) _printErrorMessage                                    5     2      3   19333
                                             58 BANK0      5     2      3
                   _UARTTransmitText
                        _intToString
 ---------------------------------------------------------------------------------
 (1) _ipv4_writeHeaderIntoBuffer                          27     2     25    1607
                                              0 BANK0     27     2     25
 ---------------------------------------------------------------------------------
 (1) _ipv4_txFrameRequest                                  6     4      2   20533
                                             71 BANK0      6     4      2
            _ethernet_txFrameRequest
 ---------------------------------------------------------------------------------
 (1) _ipv4_streamToTransmissionBuffer                     71     5     66    8299
                                             30 BANK0     69     3     66
_ethernetController_streamToTransmit
 ---------------------------------------------------------------------------------
 (1) _handleStackBackgroundTasks                          22    20      2  739981
                                            133 BANK1     12    10      2
                   _UARTTransmitText
                     _arp_background
                           _arp_init
_ethernetController_clearInterruptFl
_ethernetController_newPacketAvailab
_ethernetController_pollInterruptFla
    _ethernetController_setLEDConfig
_ethernetController_updateLinkStatus
             _ethernet_rxGetNewFrame
                   _ipAdressToString
                    _ipv4_background
                     _ipv4_sendFrame
            _ipv4_setIPSourceAddress
 ---------------------------------------------------------------------------------
 (2) _ipv4_setIPSourceAddress                              4     0      4     239
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _ipv4_sendFrame                                      78    12     66  117166
                                            156 BANK0      4     4      0
                                             52 BANK1     74     8     66
                   _UARTTransmitText
                  _arp_checkForEntry
              _arp_getEntryFromTable
                    _arp_sendRequest
   _ethernetController_getMacAddress
      _ethernetController_sendPacket
_ethernetController_writeDestination
                          _getMillis
                   _ipAdressToString
                        _macToString
 ---------------------------------------------------------------------------------
 (3) _arp_getEntryFromTable                                8     1      7      31
                                              0 BANK0      8     1      7
 ---------------------------------------------------------------------------------
 (2) _ipv4_background                                      9     6      3   15592
                                             58 BANK0      8     5      3
                   _UARTTransmitText
 ---------------------------------------------------------------------------------
 (2) _ethernet_rxGetNewFrame                              13    11      2  296072
                                            120 BANK1     13    11      2
                    _UARTTransmitInt
                   _UARTTransmitText
                _arp_handleNewPacket
                  _etherTypeToString
      _ethernetController_dropPacket
_ethernetController_getEtherTypeFiel
_ethernetController_getNextPacketPoi
          _ethernetController_getRSV
_ethernetController_updateNextPacket
                          _getMillis
                        _intToString
               _ipv4_handleNewPacket
                        _macToString
 ---------------------------------------------------------------------------------
 (3) _ipv4_handleNewPacket                                36    34      2   63712
                                             85 BANK0     36    34      2
                   _UARTTransmitText
      _ethernetController_dropPacket
                        _intToString
                   _ipAdressToString
                 _ipProtocolToString
           _ipv4_checkHeaderChecksum
                   _ipv4_parseHeader
 ---------------------------------------------------------------------------------
 (4) _ipv4_parseHeader                                    50    27     23   12751
                                             20 BANK0     50    27     23
_ethernetController_streamFromRXBuff
 ---------------------------------------------------------------------------------
 (4) _ipv4_checkHeaderChecksum                            27    25      2   17262
                                             58 BANK0     27    25      2
                   _UARTTransmitText
                        _hexToString
       _ipv4_calculateHeaderChecksum
 ---------------------------------------------------------------------------------
 (1) _ipv4_calculateHeaderChecksum                        18    16      2     957
                                              0 BANK0     18    16      2
 ---------------------------------------------------------------------------------
 (5) _hexToString                                          9     5      4     660
                                              1 BANK0      9     5      4
                          _hexToChar
 ---------------------------------------------------------------------------------
 (6) _hexToChar                                            1     1      0     124
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _ipProtocolToString                                   3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _ethernetController_updateNextPacketPointer          11    11      0    8291
                                             15 BANK0     11    11      0
    _enc424j600_getNextPacketPointer
                 _enc424j600_readSPI
   _enc424j600_setERXDATAReadPointer
    _enc424j600_setNextPacketPointer
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (3) _ethernetController_getRSV                            7     2      5    9486
                                             17 BANK0      7     2      5
                 _enc424j600_readSPI
   _enc424j600_setERXDATAReadPointer
_enc424j600_updateReceiveStatusVecto
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (4) _enc424j600_updateReceiveStatusVector                17    12      5    1370
                                              0 BANK0     17    12      5
 ---------------------------------------------------------------------------------
 (3) _ethernetController_getEtherTypeField                18     9      9    8190
                                             15 BANK0     18     9      9
                 _enc424j600_readSPI
   _enc424j600_setERXDATAReadPointer
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (3) _etherTypeToString                                    4     2      2     135
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _arp_handleNewPacket                                 36    34      2  155570
                                            156 BANK0      4     2      2
                                             88 BANK1     32    32      0
                   _UARTTransmitText
              _arp_parseFromRXBuffer
                      _arp_sendReply
                    _arp_setNewEntry
      _ethernetController_dropPacket
                          _getMillis
                   _ipAdressToString
                        _macToString
 ---------------------------------------------------------------------------------
 (4) _ethernetController_dropPacket                        2     0      2    9408
                                             18 BANK0      2     0      2
        _enc424j600_setRXTailPointer
         _enc424j600_writeSingleByte
_ethernetController_getNextPacketPoi
 ---------------------------------------------------------------------------------
 (5) _ethernetController_getNextPacketPointer              2     0      2       0
                                              2 BANK0      2     0      2
    _enc424j600_getNextPacketPointer
 ---------------------------------------------------------------------------------
 (6) _enc424j600_getNextPacketPointer                      2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _arp_sendReply                                       88    56     32   84691
                                              0 BANK1     88    56     32
                   _UARTTransmitText
                           _arp_send
   _ethernetController_getMacAddress
                   _ipAdressToString
                           _ipv4_cmp
            _ipv4_getIPSourceAddress
                        _macToString
 ---------------------------------------------------------------------------------
 (1) _ipv4_getIPSourceAddress                              4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (4) _arp_parseFromRXBuffer                               73    41     32   15875
                                             20 BANK0     73    41     32
_ethernetController_streamFromRXBuff
                           _ipv4_cmp
                     _ipv4_isAllZero
                            _mac_cmp
                      _mac_isAllZero
 ---------------------------------------------------------------------------------
 (5) _mac_cmp                                              7     3      4     400
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (5) _ethernetController_streamFromRXBuffer                5     3      2   11132
                                             15 BANK0      5     3      2
                 _enc424j600_readSPI
   _enc424j600_setERXDATAReadPointer
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (3) _UARTTransmitInt                                      4     0      4   19262
                                             58 BANK0      4     0      4
                   _UARTTransmitText
                        _intToString
 ---------------------------------------------------------------------------------
 (2) _intToString                                          4     0      4    3878
                                             36 BANK0      4     0      4
                            ___awmod (ARG)
                               _ltoa
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (3) _ltoa                                                10     2      8    2599
                                             26 BANK0     10     2      8
                              _ultoa
 ---------------------------------------------------------------------------------
 (4) _ultoa                                               13     5      8    2054
                                             13 BANK0     13     5      8
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (5) ___llmod                                              9     1      8     648
                                              0 BANK0      9     1      8
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8     657
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _ethernetController_updateLinkStatus                  5     3      2   21128
                                             32 BANK0      5     3      2
_enc424j600_readControlRegisterUnban
         _enc424j600_readPHYRegister
 ---------------------------------------------------------------------------------
 (3) _enc424j600_readPHYRegister                          18    16      2   13617
                                             14 BANK0     18    16      2
_enc424j600_readControlRegisterUnban
_enc424j600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (2) _ethernetController_setLEDConfig                      3     2      1   14029
                                             14 BANK0      3     2      1
_enc424j600_readControlRegisterUnban
_enc424j600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (2) _ethernetController_pollInterruptFlags               10     8      2    7626
                                             24 BANK0     10     8      2
       _enc424j600_getInterruptFlags
 ---------------------------------------------------------------------------------
 (3) _enc424j600_getInterruptFlags                        10     8      2    7190
                                             14 BANK0     10     8      2
_enc424j600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (2) _ethernetController_newPacketAvailable                0     0      0    7125
          _enc424j600_getPacketCount
 ---------------------------------------------------------------------------------
 (3) _enc424j600_getPacketCount                            1     1      0    7125
                                             14 BANK0      1     1      0
_enc424j600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (2) _ethernetController_clearInterruptFlag                1     1      0   13238
                                             18 BANK0      1     1      0
      _enc424j600_clearInterruptFlag
 ---------------------------------------------------------------------------------
 (3) _enc424j600_clearInterruptFlag                        4     4      0   13207
                                             14 BANK0      4     4      0
_enc424j600_readControlRegisterUnban
_enc424j600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (2) _arp_init                                            11    11      0   39547
                                             82 BANK0     11    11      0
                   _UARTTransmitText
                    _arp_setNewEntry
                  _ipv4_setToAllZero
                     _mac_setAllZero
 ---------------------------------------------------------------------------------
 (3) _arp_setNewEntry                                     24    10     14   23424
                                             58 BANK0     24    10     14
                   _UARTTransmitText
                          _getMillis (ARG)
                   _ipAdressToString
                     _ipv4_isAllZero
                        _macToString
                      _mac_isAllZero
 ---------------------------------------------------------------------------------
 (4) _mac_isAllZero                                        3     1      2     338
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _macToString                                         30    24      6    1779
                                             26 BANK0     30    24      6
   _ethernetController_getMacAddress (ARG)
 ---------------------------------------------------------------------------------
 (4) _ipv4_isAllZero                                       3     1      2     338
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _arp_background                                      12     9      3  187782
                                             81 BANK1     12     9      3
                   _UARTTransmitText
                     _arp_gratuitous
                          _arp_probe
                _ipv4_SrcAddrChanged
 _ipv4_getPreliminaryIPSourceAddress
 ---------------------------------------------------------------------------------
 (3) _ipv4_getPreliminaryIPSourceAddress                   4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (3) _ipv4_SrcAddrChanged                                  2     0      2     135
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _arp_probe                                           29    24      5   86998
                                             52 BANK1     29    24      5
                   _UARTTransmitText
                            ___lwmod
                  _arp_checkForEntry
                    _arp_sendRequest
                          _getMillis
                   _ipAdressToString
                  _ipv4_setToAllZero
                               _rand
 ---------------------------------------------------------------------------------
 (1) _rand                                                 2     0      2     512
                                             12 BANK0      2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     512
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) _ipv4_setToAllZero                                    3     1      2     338
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _arp_gratuitous                                      17    12      5   85128
                                            156 BANK0      4     4      0
                                             52 BANK1     13     8      5
                   _UARTTransmitText
                  _arp_checkForEntry
                    _arp_sendRequest
                          _getMillis
                   _ipAdressToString
 ---------------------------------------------------------------------------------
 (4) _ipAdressToString                                    22    18      4    4576
                                             19 BANK0     22    18      4
                            ___lwdiv
                            ___lwmod
            _ipv4_getIPSourceAddress (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     856
                                             14 BANK0      5     1      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     933
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _arp_sendRequest                                     52    44      8   62705
                                              0 BANK1     52    44      8
                           _arp_send
   _ethernetController_getMacAddress
                     _mac_setAllZero
 ---------------------------------------------------------------------------------
 (3) _mac_setAllZero                                       3     1      2     338
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _ethernetController_getMacAddress                    12     6      6    7277
                                             14 BANK0     12     6      6
_enc424j600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (4) _arp_send                                            85    53     32   53975
                                             71 BANK0     85    53     32
_ethernetController_getSourceMACAddr
      _ethernetController_sendPacket
_ethernetController_streamToTransmit
            _ethernet_txFrameRequest
                 _mac_setToBroadcast
 ---------------------------------------------------------------------------------
 (5) _mac_setToBroadcast                                   3     1      2     234
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _ethernet_txFrameRequest                              5     3      2   19933
                                             66 BANK0      5     3      2
_ethernetController_writeDestination
_ethernetController_writeEtherTypeFi
              _memory_txFrameRequest
 ---------------------------------------------------------------------------------
 (3) _memory_txFrameRequest                               30    21      9    5104
                                             36 BANK0     30    21      9
                             ___wmul
                    _checkForOverlap
                  _entireMemoryEmpty
                   _entireMemoryFull
 ---------------------------------------------------------------------------------
 (4) _entireMemoryFull                                     1     1      0      99
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _entireMemoryEmpty                                    1     1      0      99
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _checkForOverlap                                     18     0     18    2380
                                             18 BANK0     18     0     18
            _checkForOverlapSwitched
 ---------------------------------------------------------------------------------
 (5) _checkForOverlapSwitched                             18     0     18    1128
                                              0 BANK0     18     0     18
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     440
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _ethernetController_writeEtherTypeFieldToBuffer      14     3     11    6913
                                             15 BANK0     14     3     11
   _enc424j600_setGPDATAWritePointer
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (3) _ethernetController_writeDestinationMACAddress       24     9     15    7319
                                             15 BANK0     24     9     15
   _enc424j600_setGPDATAWritePointer
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (2) _ethernetController_streamToTransmitBuffer           15     6      9    7989
                                             15 BANK0     15     6      9
   _enc424j600_setGPDATAWritePointer
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (4) _enc424j600_setGPDATAWritePointer                     5     3      2    3493
                                             10 BANK0      5     3      2
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (3) _ethernetController_sendPacket                        9     0      9   15696
                                             18 BANK0      9     0      9
             _enc424j600_setTXLength
       _enc424j600_setTXStartAddress
         _enc424j600_writeSingleByte
                _memory_txFrameClear
 ---------------------------------------------------------------------------------
 (4) _memory_txFrameClear                                  1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _enc424j600_setTXStartAddress                         4     2      2    6158
                                             14 BANK0      4     2      2
_enc424j600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (4) _enc424j600_setTXLength                               4     2      2    6158
                                             14 BANK0      4     2      2
_enc424j600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (5) _ethernetController_getSourceMACAddress              18     9      9    8252
                                             15 BANK0     18     9      9
                 _enc424j600_readSPI
   _enc424j600_setERXDATAReadPointer
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (6) _enc424j600_setERXDATAReadPointer                     5     3      2    3805
                                             10 BANK0      5     3      2
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (3) _arp_checkForEntry                                   15     9      6    1874
                                              7 BANK0     15     9      6
                          _getMillis
                           _ipv4_cmp
 ---------------------------------------------------------------------------------
 (4) _ipv4_cmp                                             7     3      4    1024
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _getMillis                                            4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (4) _UARTTransmitText                                     2     0      2   15249
                                             56 BANK0      2     0      2
                            ___awmod (ARG)
                  _etherTypeToString (ARG)
   _ethernetController_getDeviceName (ARG)
   _ethernetController_getMacAddress (ARG)
                        _hexToString (ARG)
                        _intToString (ARG)
                   _ipAdressToString (ARG)
                 _ipProtocolToString (ARG)
            _ipv4_getIPSourceAddress (ARG)
                        _macToString (ARG)
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (1) _ethernetController_init                              6     3      3   53016
                                             26 BANK0      6     3      3
  _enc424j600_enableAutoMACInsertion
         _enc424j600_enableReception
                 _enc424j600_initSPI
    _enc424j600_setNextPacketPointer
 _enc424j600_setRXBufferStartAddress
        _enc424j600_setRXTailPointer
   _ethernetController_checkDeviceId
       _ethernetController_softReset
 ---------------------------------------------------------------------------------
 (2) _ethernetController_softReset                        12     9      3   16685
                                             14 BANK0     12     9      3
_enc424j600_readControlRegisterUnban
_enc424j600_writeControlRegisterUnba
         _enc424j600_writeSingleByte
 ---------------------------------------------------------------------------------
 (2) _ethernetController_checkDeviceId                     7     4      3    7270
                                             14 BANK0      7     4      3
_enc424j600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (5) _enc424j600_setRXTailPointer                          4     2      2    6366
                                             14 BANK0      4     2      2
_enc424j600_writeControlRegisterUnba
_ethernetController_getNextPacketPoi (ARG)
 ---------------------------------------------------------------------------------
 (2) _enc424j600_setRXBufferStartAddress                   4     2      2    6158
                                             14 BANK0      4     2      2
_enc424j600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (4) _enc424j600_setNextPacketPointer                      2     0      2     239
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _enc424j600_enableReception                           0     0      0    3042
         _enc424j600_writeSingleByte
 ---------------------------------------------------------------------------------
 (4) _enc424j600_writeSingleByte                           1     1      0    3042
                                             10 BANK0      1     1      0
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (2) _enc424j600_enableAutoMACInsertion                    1     1      0   13049
                                             14 BANK0      1     1      0
_enc424j600_readControlRegisterUnban
_enc424j600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (5) _enc424j600_writeControlRegisterUnbanked              4     2      2    5918
                                             10 BANK0      4     2      2
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (4) _enc424j600_readControlRegisterUnbanked               4     2      2    7054
                                             10 BANK0      4     2      2
                 _enc424j600_readSPI
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (4) _enc424j600_writeSPI                                 10     8      2    3008
                                              0 BANK0     10     8      2
                 _enc424j600_initSPI
 ---------------------------------------------------------------------------------
 (5) _enc424j600_readSPI                                  10     8      2    1032
                                              0 BANK0     10     8      2
                 _enc424j600_initSPI
 ---------------------------------------------------------------------------------
 (5) _enc424j600_initSPI                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ethernetController_getDeviceName                    13    11      2      40
                                              0 BANK0     13    11      2
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              6     2      4     641
                                             14 BANK0      6     2      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (1) _UARTInit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                19    19      0    1115
                                             21 COMRAM    19    19      0
                      _buttonHandler
                 _sevenSegmentUpdate
                         _updateTime
 ---------------------------------------------------------------------------------
 (12) _updateTime                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _sevenSegmentUpdate                                  7     5      2     914
                                             14 COMRAM     7     5      2
                        _parseNumber
 ---------------------------------------------------------------------------------
 (13) _parseNumber                                         7     4      3     667
                                              7 COMRAM     7     4      3
                          i2___lwdiv
 ---------------------------------------------------------------------------------
 (14) i2___lwdiv                                           7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (12) _buttonHandler                                      10     8      2     201
                                              0 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UARTInit
   _UARTTransmitText
     ___awmod (ARG)
       _rand (ARG)
         ___lmul
     _etherTypeToString (ARG)
     _ethernetController_getDeviceName (ARG)
     _ethernetController_getMacAddress (ARG)
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
     _hexToString (ARG)
       _hexToChar
     _intToString (ARG)
       ___awmod (ARG)
         _rand (ARG)
           ___lmul
       _ltoa (ARG)
         _ultoa
           ___lldiv
           ___llmod
       _rand (ARG)
         ___lmul
     _ipAdressToString (ARG)
       ___lwdiv
       ___lwmod
         _rand (ARG)
           ___lmul
       _ipv4_getIPSourceAddress (ARG)
     _ipProtocolToString (ARG)
     _ipv4_getIPSourceAddress (ARG)
     _macToString (ARG)
       _ethernetController_getMacAddress (ARG)
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
     _rand (ARG)
       ___lmul
   ___awmod
     _rand (ARG)
       ___lmul
   _ethernetController_checkDeviceId
     _enc424j600_readControlRegisterUnbanked
       _enc424j600_readSPI
         _enc424j600_initSPI
       _enc424j600_writeSPI
         _enc424j600_initSPI
   _ethernetController_getDeviceName
   _ethernetController_getMacAddress
     _enc424j600_readControlRegisterUnbanked
       _enc424j600_readSPI
         _enc424j600_initSPI
       _enc424j600_writeSPI
         _enc424j600_initSPI
   _ethernetController_init
     _enc424j600_enableAutoMACInsertion
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _enc424j600_writeControlRegisterUnbanked
         _enc424j600_writeSPI
           _enc424j600_initSPI
     _enc424j600_enableReception
       _enc424j600_writeSingleByte
         _enc424j600_writeSPI
           _enc424j600_initSPI
     _enc424j600_initSPI
     _enc424j600_setNextPacketPointer
     _enc424j600_setRXBufferStartAddress
       _enc424j600_writeControlRegisterUnbanked
         _enc424j600_writeSPI
           _enc424j600_initSPI
     _enc424j600_setRXTailPointer
       _enc424j600_writeControlRegisterUnbanked
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _ethernetController_getNextPacketPointer (ARG)
         _enc424j600_getNextPacketPointer
     _ethernetController_checkDeviceId
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
     _ethernetController_softReset
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _enc424j600_writeControlRegisterUnbanked
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _enc424j600_writeSingleByte
         _enc424j600_writeSPI
           _enc424j600_initSPI
   _ethernetController_setLEDConfig
     _enc424j600_readControlRegisterUnbanked
       _enc424j600_readSPI
         _enc424j600_initSPI
       _enc424j600_writeSPI
         _enc424j600_initSPI
     _enc424j600_writeControlRegisterUnbanked
       _enc424j600_writeSPI
         _enc424j600_initSPI
   _handleStackBackgroundTasks
     _UARTTransmitText
       ___awmod (ARG)
         _rand (ARG)
           ___lmul
       _etherTypeToString (ARG)
       _ethernetController_getDeviceName (ARG)
       _ethernetController_getMacAddress (ARG)
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
       _hexToString (ARG)
         _hexToChar
       _intToString (ARG)
         ___awmod (ARG)
           _rand (ARG)
             ___lmul
         _ltoa (ARG)
           _ultoa
             ___lldiv
             ___llmod
         _rand (ARG)
           ___lmul
       _ipAdressToString (ARG)
         ___lwdiv
         ___lwmod
           _rand (ARG)
             ___lmul
         _ipv4_getIPSourceAddress (ARG)
       _ipProtocolToString (ARG)
       _ipv4_getIPSourceAddress (ARG)
       _macToString (ARG)
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
       _rand (ARG)
         ___lmul
     _arp_background
       _UARTTransmitText
         ___awmod (ARG)
           _rand (ARG)
             ___lmul
         _etherTypeToString (ARG)
         _ethernetController_getDeviceName (ARG)
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
         _hexToString (ARG)
           _hexToChar
         _intToString (ARG)
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           _ltoa (ARG)
             _ultoa
               ___lldiv
               ___llmod
           _rand (ARG)
             ___lmul
         _ipAdressToString (ARG)
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
           _ipv4_getIPSourceAddress (ARG)
         _ipProtocolToString (ARG)
         _ipv4_getIPSourceAddress (ARG)
         _macToString (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
         _rand (ARG)
           ___lmul
       _arp_gratuitous
         _UARTTransmitText
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           _etherTypeToString (ARG)
           _ethernetController_getDeviceName (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _hexToString (ARG)
             _hexToChar
           _intToString (ARG)
             ___awmod (ARG)
               _rand (ARG)
                 ___lmul
             _ltoa (ARG)
               _ultoa
                 ___lldiv
                 ___llmod
             _rand (ARG)
               ___lmul
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
               _rand (ARG)
                 ___lmul
             _ipv4_getIPSourceAddress (ARG)
           _ipProtocolToString (ARG)
           _ipv4_getIPSourceAddress (ARG)
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
           _rand (ARG)
             ___lmul
         _arp_checkForEntry
           _getMillis
           _ipv4_cmp
         _arp_sendRequest
           _arp_send
             _ethernetController_getSourceMACAddress
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_setERXDATAReadPointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernetController_sendPacket
               _enc424j600_setTXLength
                 _enc424j600_writeControlRegisterUnbanked
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
               _enc424j600_setTXStartAddress
                 _enc424j600_writeControlRegisterUnbanked
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
               _enc424j600_writeSingleByte
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _memory_txFrameClear
             _ethernetController_streamToTransmitBuffer
               _enc424j600_setGPDATAWritePointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernet_txFrameRequest
               _ethernetController_writeDestinationMACAddress
                 _enc424j600_setGPDATAWritePointer
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _ethernetController_writeEtherTypeFieldToBuffer
                 _enc424j600_setGPDATAWritePointer
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _memory_txFrameRequest
                 ___wmul
                 _checkForOverlap
                   _checkForOverlapSwitched
                 _entireMemoryEmpty
                 _entireMemoryFull
             _mac_setToBroadcast
           _ethernetController_getMacAddress
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _mac_setAllZero
         _getMillis
         _ipAdressToString
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
           _ipv4_getIPSourceAddress (ARG)
       _arp_probe
         _UARTTransmitText
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           _etherTypeToString (ARG)
           _ethernetController_getDeviceName (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _hexToString (ARG)
             _hexToChar
           _intToString (ARG)
             ___awmod (ARG)
               _rand (ARG)
                 ___lmul
             _ltoa (ARG)
               _ultoa
                 ___lldiv
                 ___llmod
             _rand (ARG)
               ___lmul
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
               _rand (ARG)
                 ___lmul
             _ipv4_getIPSourceAddress (ARG)
           _ipProtocolToString (ARG)
           _ipv4_getIPSourceAddress (ARG)
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
           _rand (ARG)
             ___lmul
         ___lwmod
           _rand (ARG)
             ___lmul
         _arp_checkForEntry
           _getMillis
           _ipv4_cmp
         _arp_sendRequest
           _arp_send
             _ethernetController_getSourceMACAddress
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_setERXDATAReadPointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernetController_sendPacket
               _enc424j600_setTXLength
                 _enc424j600_writeControlRegisterUnbanked
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
               _enc424j600_setTXStartAddress
                 _enc424j600_writeControlRegisterUnbanked
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
               _enc424j600_writeSingleByte
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _memory_txFrameClear
             _ethernetController_streamToTransmitBuffer
               _enc424j600_setGPDATAWritePointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernet_txFrameRequest
               _ethernetController_writeDestinationMACAddress
                 _enc424j600_setGPDATAWritePointer
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _ethernetController_writeEtherTypeFieldToBuffer
                 _enc424j600_setGPDATAWritePointer
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _memory_txFrameRequest
                 ___wmul
                 _checkForOverlap
                   _checkForOverlapSwitched
                 _entireMemoryEmpty
                 _entireMemoryFull
             _mac_setToBroadcast
           _ethernetController_getMacAddress
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _mac_setAllZero
         _getMillis
         _ipAdressToString
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
           _ipv4_getIPSourceAddress (ARG)
         _ipv4_setToAllZero
         _rand
           ___lmul
       _ipv4_SrcAddrChanged
       _ipv4_getPreliminaryIPSourceAddress
     _arp_init
       _UARTTransmitText
         ___awmod (ARG)
           _rand (ARG)
             ___lmul
         _etherTypeToString (ARG)
         _ethernetController_getDeviceName (ARG)
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
         _hexToString (ARG)
           _hexToChar
         _intToString (ARG)
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           _ltoa (ARG)
             _ultoa
               ___lldiv
               ___llmod
           _rand (ARG)
             ___lmul
         _ipAdressToString (ARG)
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
           _ipv4_getIPSourceAddress (ARG)
         _ipProtocolToString (ARG)
         _ipv4_getIPSourceAddress (ARG)
         _macToString (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
         _rand (ARG)
           ___lmul
       _arp_setNewEntry
         _UARTTransmitText
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           _etherTypeToString (ARG)
           _ethernetController_getDeviceName (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _hexToString (ARG)
             _hexToChar
           _intToString (ARG)
             ___awmod (ARG)
               _rand (ARG)
                 ___lmul
             _ltoa (ARG)
               _ultoa
                 ___lldiv
                 ___llmod
             _rand (ARG)
               ___lmul
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
               _rand (ARG)
                 ___lmul
             _ipv4_getIPSourceAddress (ARG)
           _ipProtocolToString (ARG)
           _ipv4_getIPSourceAddress (ARG)
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
           _rand (ARG)
             ___lmul
         _getMillis (ARG)
         _ipAdressToString (ARG)
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
           _ipv4_getIPSourceAddress (ARG)
         _ipv4_isAllZero (ARG)
         _macToString (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
         _mac_isAllZero (ARG)
       _ipv4_setToAllZero
       _mac_setAllZero
     _ethernetController_clearInterruptFlag
       _enc424j600_clearInterruptFlag
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_writeControlRegisterUnbanked
           _enc424j600_writeSPI
             _enc424j600_initSPI
     _ethernetController_newPacketAvailable
       _enc424j600_getPacketCount
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
     _ethernetController_pollInterruptFlags
       _enc424j600_getInterruptFlags
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
     _ethernetController_setLEDConfig
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _enc424j600_writeControlRegisterUnbanked
         _enc424j600_writeSPI
           _enc424j600_initSPI
     _ethernetController_updateLinkStatus
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _enc424j600_readPHYRegister
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_writeControlRegisterUnbanked
           _enc424j600_writeSPI
             _enc424j600_initSPI
     _ethernet_rxGetNewFrame
       _UARTTransmitInt
         _UARTTransmitText
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           _etherTypeToString (ARG)
           _ethernetController_getDeviceName (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _hexToString (ARG)
             _hexToChar
           _intToString (ARG)
             ___awmod (ARG)
               _rand (ARG)
                 ___lmul
             _ltoa (ARG)
               _ultoa
                 ___lldiv
                 ___llmod
             _rand (ARG)
               ___lmul
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
               _rand (ARG)
                 ___lmul
             _ipv4_getIPSourceAddress (ARG)
           _ipProtocolToString (ARG)
           _ipv4_getIPSourceAddress (ARG)
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
           _rand (ARG)
             ___lmul
         _intToString
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           _ltoa (ARG)
             _ultoa
               ___lldiv
               ___llmod
           _rand (ARG)
             ___lmul
       _UARTTransmitText
         ___awmod (ARG)
           _rand (ARG)
             ___lmul
         _etherTypeToString (ARG)
         _ethernetController_getDeviceName (ARG)
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
         _hexToString (ARG)
           _hexToChar
         _intToString (ARG)
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           _ltoa (ARG)
             _ultoa
               ___lldiv
               ___llmod
           _rand (ARG)
             ___lmul
         _ipAdressToString (ARG)
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
           _ipv4_getIPSourceAddress (ARG)
         _ipProtocolToString (ARG)
         _ipv4_getIPSourceAddress (ARG)
         _macToString (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
         _rand (ARG)
           ___lmul
       _arp_handleNewPacket
         _UARTTransmitText
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           _etherTypeToString (ARG)
           _ethernetController_getDeviceName (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _hexToString (ARG)
             _hexToChar
           _intToString (ARG)
             ___awmod (ARG)
               _rand (ARG)
                 ___lmul
             _ltoa (ARG)
               _ultoa
                 ___lldiv
                 ___llmod
             _rand (ARG)
               ___lmul
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
               _rand (ARG)
                 ___lmul
             _ipv4_getIPSourceAddress (ARG)
           _ipProtocolToString (ARG)
           _ipv4_getIPSourceAddress (ARG)
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
           _rand (ARG)
             ___lmul
         _arp_parseFromRXBuffer
           _ethernetController_streamFromRXBuffer
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_setERXDATAReadPointer
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
           _ipv4_cmp
           _ipv4_isAllZero
           _mac_cmp
           _mac_isAllZero
         _arp_sendReply
           _UARTTransmitText
             ___awmod (ARG)
               _rand (ARG)
                 ___lmul
             _etherTypeToString (ARG)
             _ethernetController_getDeviceName (ARG)
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
             _hexToString (ARG)
               _hexToChar
             _intToString (ARG)
               ___awmod (ARG)
                 _rand (ARG)
                   ___lmul
               _ltoa (ARG)
                 _ultoa
                   ___lldiv
                   ___llmod
               _rand (ARG)
                 ___lmul
             _ipAdressToString (ARG)
               ___lwdiv
               ___lwmod
                 _rand (ARG)
                   ___lmul
               _ipv4_getIPSourceAddress (ARG)
             _ipProtocolToString (ARG)
             _ipv4_getIPSourceAddress (ARG)
             _macToString (ARG)
               _ethernetController_getMacAddress (ARG)
                 _enc424j600_readControlRegisterUnbanked
                   _enc424j600_readSPI
                     _enc424j600_initSPI
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
             _rand (ARG)
               ___lmul
           _arp_send
             _ethernetController_getSourceMACAddress
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_setERXDATAReadPointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernetController_sendPacket
               _enc424j600_setTXLength
                 _enc424j600_writeControlRegisterUnbanked
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
               _enc424j600_setTXStartAddress
                 _enc424j600_writeControlRegisterUnbanked
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
               _enc424j600_writeSingleByte
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _memory_txFrameClear
             _ethernetController_streamToTransmitBuffer
               _enc424j600_setGPDATAWritePointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernet_txFrameRequest
               _ethernetController_writeDestinationMACAddress
                 _enc424j600_setGPDATAWritePointer
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _ethernetController_writeEtherTypeFieldToBuffer
                 _enc424j600_setGPDATAWritePointer
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _memory_txFrameRequest
                 ___wmul
                 _checkForOverlap
                   _checkForOverlapSwitched
                 _entireMemoryEmpty
                 _entireMemoryFull
             _mac_setToBroadcast
           _ethernetController_getMacAddress
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _ipAdressToString
             ___lwdiv
             ___lwmod
               _rand (ARG)
                 ___lmul
             _ipv4_getIPSourceAddress (ARG)
           _ipv4_cmp
           _ipv4_getIPSourceAddress
           _macToString
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
         _arp_setNewEntry
           _UARTTransmitText
             ___awmod (ARG)
               _rand (ARG)
                 ___lmul
             _etherTypeToString (ARG)
             _ethernetController_getDeviceName (ARG)
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
             _hexToString (ARG)
               _hexToChar
             _intToString (ARG)
               ___awmod (ARG)
                 _rand (ARG)
                   ___lmul
               _ltoa (ARG)
                 _ultoa
                   ___lldiv
                   ___llmod
               _rand (ARG)
                 ___lmul
             _ipAdressToString (ARG)
               ___lwdiv
               ___lwmod
                 _rand (ARG)
                   ___lmul
               _ipv4_getIPSourceAddress (ARG)
             _ipProtocolToString (ARG)
             _ipv4_getIPSourceAddress (ARG)
             _macToString (ARG)
               _ethernetController_getMacAddress (ARG)
                 _enc424j600_readControlRegisterUnbanked
                   _enc424j600_readSPI
                     _enc424j600_initSPI
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
             _rand (ARG)
               ___lmul
           _getMillis (ARG)
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
               _rand (ARG)
                 ___lmul
             _ipv4_getIPSourceAddress (ARG)
           _ipv4_isAllZero (ARG)
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
           _mac_isAllZero (ARG)
         _ethernetController_dropPacket
           _enc424j600_setRXTailPointer
             _enc424j600_writeControlRegisterUnbanked
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernetController_getNextPacketPointer (ARG)
               _enc424j600_getNextPacketPointer
           _enc424j600_writeSingleByte
             _enc424j600_writeSPI
               _enc424j600_initSPI
           _ethernetController_getNextPacketPointer
             _enc424j600_getNextPacketPointer
         _getMillis
         _ipAdressToString
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
           _ipv4_getIPSourceAddress (ARG)
         _macToString
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
       _etherTypeToString
       _ethernetController_dropPacket
         _enc424j600_setRXTailPointer
           _enc424j600_writeControlRegisterUnbanked
             _enc424j600_writeSPI
               _enc424j600_initSPI
           _ethernetController_getNextPacketPointer (ARG)
             _enc424j600_getNextPacketPointer
         _enc424j600_writeSingleByte
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _ethernetController_getNextPacketPointer
           _enc424j600_getNextPacketPointer
       _ethernetController_getEtherTypeField
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_setERXDATAReadPointer
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _ethernetController_getNextPacketPointer
         _enc424j600_getNextPacketPointer
       _ethernetController_getRSV
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_setERXDATAReadPointer
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_updateReceiveStatusVector
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _ethernetController_updateNextPacketPointer
         _enc424j600_getNextPacketPointer
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_setERXDATAReadPointer
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_setNextPacketPointer
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _getMillis
       _intToString
         ___awmod (ARG)
           _rand (ARG)
             ___lmul
         _ltoa (ARG)
           _ultoa
             ___lldiv
             ___llmod
         _rand (ARG)
           ___lmul
       _ipv4_handleNewPacket
         _UARTTransmitText
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           _etherTypeToString (ARG)
           _ethernetController_getDeviceName (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _hexToString (ARG)
             _hexToChar
           _intToString (ARG)
             ___awmod (ARG)
               _rand (ARG)
                 ___lmul
             _ltoa (ARG)
               _ultoa
                 ___lldiv
                 ___llmod
             _rand (ARG)
               ___lmul
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
               _rand (ARG)
                 ___lmul
             _ipv4_getIPSourceAddress (ARG)
           _ipProtocolToString (ARG)
           _ipv4_getIPSourceAddress (ARG)
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
           _rand (ARG)
             ___lmul
         _ethernetController_dropPacket
           _enc424j600_setRXTailPointer
             _enc424j600_writeControlRegisterUnbanked
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernetController_getNextPacketPointer (ARG)
               _enc424j600_getNextPacketPointer
           _enc424j600_writeSingleByte
             _enc424j600_writeSPI
               _enc424j600_initSPI
           _ethernetController_getNextPacketPointer
             _enc424j600_getNextPacketPointer
         _intToString
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           _ltoa (ARG)
             _ultoa
               ___lldiv
               ___llmod
           _rand (ARG)
             ___lmul
         _ipAdressToString
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
           _ipv4_getIPSourceAddress (ARG)
         _ipProtocolToString
         _ipv4_checkHeaderChecksum
           _UARTTransmitText
             ___awmod (ARG)
               _rand (ARG)
                 ___lmul
             _etherTypeToString (ARG)
             _ethernetController_getDeviceName (ARG)
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
             _hexToString (ARG)
               _hexToChar
             _intToString (ARG)
               ___awmod (ARG)
                 _rand (ARG)
                   ___lmul
               _ltoa (ARG)
                 _ultoa
                   ___lldiv
                   ___llmod
               _rand (ARG)
                 ___lmul
             _ipAdressToString (ARG)
               ___lwdiv
               ___lwmod
                 _rand (ARG)
                   ___lmul
               _ipv4_getIPSourceAddress (ARG)
             _ipProtocolToString (ARG)
             _ipv4_getIPSourceAddress (ARG)
             _macToString (ARG)
               _ethernetController_getMacAddress (ARG)
                 _enc424j600_readControlRegisterUnbanked
                   _enc424j600_readSPI
                     _enc424j600_initSPI
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
             _rand (ARG)
               ___lmul
           _hexToString
             _hexToChar
           _ipv4_calculateHeaderChecksum
         _ipv4_parseHeader
           _ethernetController_streamFromRXBuffer
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_setERXDATAReadPointer
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
       _macToString
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
     _ipAdressToString
       ___lwdiv
       ___lwmod
         _rand (ARG)
           ___lmul
       _ipv4_getIPSourceAddress (ARG)
     _ipv4_background
       _UARTTransmitText
         ___awmod (ARG)
           _rand (ARG)
             ___lmul
         _etherTypeToString (ARG)
         _ethernetController_getDeviceName (ARG)
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
         _hexToString (ARG)
           _hexToChar
         _intToString (ARG)
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           _ltoa (ARG)
             _ultoa
               ___lldiv
               ___llmod
           _rand (ARG)
             ___lmul
         _ipAdressToString (ARG)
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
           _ipv4_getIPSourceAddress (ARG)
         _ipProtocolToString (ARG)
         _ipv4_getIPSourceAddress (ARG)
         _macToString (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
         _rand (ARG)
           ___lmul
     _ipv4_sendFrame
       _UARTTransmitText
         ___awmod (ARG)
           _rand (ARG)
             ___lmul
         _etherTypeToString (ARG)
         _ethernetController_getDeviceName (ARG)
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
         _hexToString (ARG)
           _hexToChar
         _intToString (ARG)
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           _ltoa (ARG)
             _ultoa
               ___lldiv
               ___llmod
           _rand (ARG)
             ___lmul
         _ipAdressToString (ARG)
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
           _ipv4_getIPSourceAddress (ARG)
         _ipProtocolToString (ARG)
         _ipv4_getIPSourceAddress (ARG)
         _macToString (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
         _rand (ARG)
           ___lmul
       _arp_checkForEntry
         _getMillis
         _ipv4_cmp
       _arp_getEntryFromTable
       _arp_sendRequest
         _arp_send
           _ethernetController_getSourceMACAddress
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_setERXDATAReadPointer
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
           _ethernetController_sendPacket
             _enc424j600_setTXLength
               _enc424j600_writeControlRegisterUnbanked
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
             _enc424j600_setTXStartAddress
               _enc424j600_writeControlRegisterUnbanked
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
             _enc424j600_writeSingleByte
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _memory_txFrameClear
           _ethernetController_streamToTransmitBuffer
             _enc424j600_setGPDATAWritePointer
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
           _ethernet_txFrameRequest
             _ethernetController_writeDestinationMACAddress
               _enc424j600_setGPDATAWritePointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernetController_writeEtherTypeFieldToBuffer
               _enc424j600_setGPDATAWritePointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _memory_txFrameRequest
               ___wmul
               _checkForOverlap
                 _checkForOverlapSwitched
               _entireMemoryEmpty
               _entireMemoryFull
           _mac_setToBroadcast
         _ethernetController_getMacAddress
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
         _mac_setAllZero
       _ethernetController_getMacAddress
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
       _ethernetController_sendPacket
         _enc424j600_setTXLength
           _enc424j600_writeControlRegisterUnbanked
             _enc424j600_writeSPI
               _enc424j600_initSPI
         _enc424j600_setTXStartAddress
           _enc424j600_writeControlRegisterUnbanked
             _enc424j600_writeSPI
               _enc424j600_initSPI
         _enc424j600_writeSingleByte
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _memory_txFrameClear
       _ethernetController_writeDestinationMACAddress
         _enc424j600_setGPDATAWritePointer
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _getMillis
       _ipAdressToString
         ___lwdiv
         ___lwmod
           _rand (ARG)
             ___lmul
         _ipv4_getIPSourceAddress (ARG)
       _macToString
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
     _ipv4_setIPSourceAddress
   _intToString
     ___awmod (ARG)
       _rand (ARG)
         ___lmul
     _ltoa (ARG)
       _ultoa
         ___lldiv
         ___llmod
     _rand (ARG)
       ___lmul
   _ipAdressToString
     ___lwdiv
     ___lwmod
       _rand (ARG)
         ___lmul
     _ipv4_getIPSourceAddress (ARG)
   _ipv4_calculateHeaderChecksum
   _ipv4_getIPSourceAddress
   _ipv4_streamToTransmissionBuffer
     _ethernetController_streamToTransmitBuffer
       _enc424j600_setGPDATAWritePointer
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _enc424j600_writeSPI
         _enc424j600_initSPI
   _ipv4_txFrameRequest
     _ethernet_txFrameRequest
       _ethernetController_writeDestinationMACAddress
         _enc424j600_setGPDATAWritePointer
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _ethernetController_writeEtherTypeFieldToBuffer
         _enc424j600_setGPDATAWritePointer
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _memory_txFrameRequest
         ___wmul
         _checkForOverlap
           _checkForOverlapSwitched
         _entireMemoryEmpty
         _entireMemoryFull
   _ipv4_writeHeaderIntoBuffer
   _macToString
     _ethernetController_getMacAddress (ARG)
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
   _printErrorMessage
     _UARTTransmitText
       ___awmod (ARG)
         _rand (ARG)
           ___lmul
       _etherTypeToString (ARG)
       _ethernetController_getDeviceName (ARG)
       _ethernetController_getMacAddress (ARG)
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
       _hexToString (ARG)
         _hexToChar
       _intToString (ARG)
         ___awmod (ARG)
           _rand (ARG)
             ___lmul
         _ltoa (ARG)
           _ultoa
             ___lldiv
             ___llmod
         _rand (ARG)
           ___lmul
       _ipAdressToString (ARG)
         ___lwdiv
         ___lwmod
           _rand (ARG)
             ___lmul
         _ipv4_getIPSourceAddress (ARG)
       _ipProtocolToString (ARG)
       _ipv4_getIPSourceAddress (ARG)
       _macToString (ARG)
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
       _rand (ARG)
         ___lmul
     _intToString
       ___awmod (ARG)
         _rand (ARG)
           ___lmul
       _ltoa (ARG)
         _ultoa
           ___lldiv
           ___llmod
       _rand (ARG)
         ___lmul
   _printEthernetState
     _UARTTransmitText
       ___awmod (ARG)
         _rand (ARG)
           ___lmul
       _etherTypeToString (ARG)
       _ethernetController_getDeviceName (ARG)
       _ethernetController_getMacAddress (ARG)
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
       _hexToString (ARG)
         _hexToChar
       _intToString (ARG)
         ___awmod (ARG)
           _rand (ARG)
             ___lmul
         _ltoa (ARG)
           _ultoa
             ___lldiv
             ___llmod
         _rand (ARG)
           ___lmul
       _ipAdressToString (ARG)
         ___lwdiv
         ___lwmod
           _rand (ARG)
             ___lmul
         _ipv4_getIPSourceAddress (ARG)
       _ipProtocolToString (ARG)
       _ipv4_getIPSourceAddress (ARG)
       _macToString (ARG)
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
       _rand (ARG)
         ___lmul
   _rand
     ___lmul
   _sevenSegmentInit
   _srand
     _ethernetController_getMacAddress (ARG)
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
   _stack_init
     _arp_init
       _UARTTransmitText
         ___awmod (ARG)
           _rand (ARG)
             ___lmul
         _etherTypeToString (ARG)
         _ethernetController_getDeviceName (ARG)
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
         _hexToString (ARG)
           _hexToChar
         _intToString (ARG)
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           _ltoa (ARG)
             _ultoa
               ___lldiv
               ___llmod
           _rand (ARG)
             ___lmul
         _ipAdressToString (ARG)
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
           _ipv4_getIPSourceAddress (ARG)
         _ipProtocolToString (ARG)
         _ipv4_getIPSourceAddress (ARG)
         _macToString (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
         _rand (ARG)
           ___lmul
       _arp_setNewEntry
         _UARTTransmitText
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           _etherTypeToString (ARG)
           _ethernetController_getDeviceName (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _hexToString (ARG)
             _hexToChar
           _intToString (ARG)
             ___awmod (ARG)
               _rand (ARG)
                 ___lmul
             _ltoa (ARG)
               _ultoa
                 ___lldiv
                 ___llmod
             _rand (ARG)
               ___lmul
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
               _rand (ARG)
                 ___lmul
             _ipv4_getIPSourceAddress (ARG)
           _ipProtocolToString (ARG)
           _ipv4_getIPSourceAddress (ARG)
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
           _rand (ARG)
             ___lmul
         _getMillis (ARG)
         _ipAdressToString (ARG)
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
           _ipv4_getIPSourceAddress (ARG)
         _ipv4_isAllZero (ARG)
         _macToString (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
         _mac_isAllZero (ARG)
       _ipv4_setToAllZero
       _mac_setAllZero
     _ipv4_init

 _ISR (ROOT)
   _buttonHandler
   _sevenSegmentUpdate
     _parseNumber
       i2___lwdiv
   _updateTime

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100     2E      D0      12       81.3%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0     100      10      100.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100     94      D7       8       84.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     A0      A0       5      100.0%
BITCOMRAM           5E      0       1       0        1.1%
COMRAM              5E     28      4F       1       84.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     396       6        0.0%
DATA                 0      0     396       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Mar 30 11:44:54 2019

                                            ?_hexToString 0061  
                __end_of_ethernetController_getMacAddress 4A7E  
               __size_of_ethernetController_getMacAddress 0074  
                      ??_ethernetController_getMacAddress 0074  
                       ?_ethernetController_getMacAddress 006E  
                        _ethernetController_getMacAddress 4A0A  
                                             arp_init@mac 00B2  
                                                      l75 43FA  
                                                      l92 4FE8  
                                                      l84 3AF6  
                                                      l77 4422  
                                                      l86 3AD8  
                                                      l88 3AF0  
                                                      l89 3B0C  
                     __size_of_ipv4_writeHeaderIntoBuffer 016E  
                        __end_of_ipv4_checkHeaderChecksum 3FBE  
                 ethernetController_getSourceMACAddress@i 0080  
                                     ___wmul@multiplicand 0062  
                                      i2___lwdiv@dividend 0001  
                      ipv4_calculateHeaderChecksum@header 0060  
                                            __CFG_CP0$OFF 000000  
                                            __CFG_CP1$OFF 000000  
                                            __CFG_CP2$OFF 000000  
                                            __CFG_CP3$OFF 000000  
                                             __CFG_LVP$ON 000000  
                                             arp_send@arp 00A7  
                                 ??_memory_txFrameRequest 008D  
                                                     l210 4536  
                                                     l140 474C  
                                                     l204 4554  
                                                     l213 4574  
                                                     l205 453E  
                                                     l134 48D6  
                                                     l142 4794  
                                                     l214 455C  
                                                     l206 452A  
                                                     l135 491C  
                                                     l232 4CC0  
                                                     l216 458A  
                                                     l241 4BE6  
                                                     l217 4564  
                                                     l209 4532  
                                                     l218 456A  
                                                     l155 4B94  
                                                     l412 5298  
                                                     l420 5282  
                                                     l180 4D0C  
                                                     l245 4C2C  
                                                     l317 466C  
                                                     l165 4956  
                                                     l414 52BA  
                                                     l182 4D30  
                                                     l263 38F0  
                                                     l183 4D44  
                                                     l432 3958  
                                                     l361 3E88  
                                                     l418 5260  
                                                     l258 3838  
                                                     l370 036E  
                                                     l530 249C  
                                                     l443 39D6  
                                                     l195 45BC  
                                                     l179 4D4A  
                                                     l187 51BC  
                                                     l371 04E8  
                                                     l436 39DA  
                                                     l188 51D2  
                                                     l372 03BA  
                                                     l532 257E  
                                                     l524 2400  
                                                     l453 411A  
                                                     l437 39C6  
                                                     l197 45EC  
                                                     l373 0516  
                                                     l525 23DE  
                                                     l438 3990  
                                                     l462 0624  
                                                     l390 5128  
                                                     l374 03D6  
                                                     l366 024E  
                                                     l526 23FA  
                                                     l455 4116  
                                                     l439 398C  
                                                     l359 3E68  
                                                     l199 4612  
                                                     l375 03F2  
                                                     l367 0292  
                                                     l448 40E2  
                                                     l472 06DA  
                                                     l464 0646  
                                                     l384 536E  
                                                     l392 5154  
                                                     l368 032E  
                                                     l528 2422  
                                                     l481 08A0  
                                                     l801 5624  
                                                     l369 034E  
                                                     l482 094E  
                                                     l474 06E2  
                                                     l466 0670  
                                                     l386 5388  
                                                     l459 412A  
                                                     l379 5590  
                                                     l651 0D9A  
                                                     l476 08FC  
                                                     l396 556A  
                                                     l804 5630  
                                                     l644 0B72  
                                                     l477 081C  
                                                     l469 06A6  
                                                     l821 3C0A  
                                                     l645 0BE2  
                                                     l654 0EE4  
                                                     l646 0C1A  
                                                     l487 09BE  
                                                     l815 3B4A  
                                                     l671 42DC  
                                                     l655 0E78  
                                                     l647 0D58  
                                                     l488 0A9C  
                                                     l816 3C18  
                                                     l680 3702  
                                                     l656 0EC8  
                                                     l489 0ABE  
                                                     l817 3B9A  
                                                     l825 50B4  
                                                     l833 507A  
                                                     l809 3D90  
                                                     l681 36B2  
                                                     l673 42F0  
                                                     l657 0EE0  
                                                     l649 0D90  
                                                     l850 295E  
                                                     l930 2ADC  
                                                     l826 5094  
                                                     l834 5050  
                                                     l690 3794  
                                                     l674 4306  
                                                     l819 3BCE  
                                                     l691 3734  
                                                     l683 36C2  
                                                     l667 42AC  
                                                     l844 27A4  
                                                     l940 11B8  
                                                     l828 50A0  
                                                     l836 505C  
                                                     l692 3744  
                                                     l684 36D2  
                                                     l676 431A  
                                                     l933 1154  
                                                     l829 50AA  
                                                     l837 5066  
                                                     l693 3752  
                                                     l685 36E2  
                                                     l669 42C0  
                                                     l846 28C4  
                                                     l950 1316  
                                                     l942 1256  
                                                     l934 110C  
                                                     l926 29AA  
                                                     l838 5070  
                                                     l686 36F2  
                                                     l847 2918  
                                                     l951 134C  
                                                     l943 120E  
                                                     l960 1DF2  
                                                     l936 11AA  
                                                     l928 29EA  
                                                     l688 3762  
                                                     l785 4E14  
                                                     l961 1DBE  
                                                     l945 129C  
                                                     l937 1162  
                                                     l929 2AC8  
                                                     l689 3726  
                                                     l970 1E84  
                                                     l787 4E3C  
                                                     l963 1E34  
                                                     l947 12D2  
                                                     l939 1200  
                                                     l964 1E00  
                                                     l949 1314  
                                                     l966 1E76  
                                                     l990 19EA  
                                                     l967 1E42  
                                                     l991 1C52  
                                                     l992 1A3C  
                                                     l969 1EB8  
                                                     l993 1AE4  
                                                     l994 1AEC  
                                                     l986 19BE  
                                                     l989 1C36  
                                                     l998 1C00  
                                                     l999 1C18  
                                            __CFG_CPB$OFF 000000  
                             __end_of_ipv4_txFrameRequest 36A2  
                                            __CFG_CPD$OFF 000000  
                                                     _ISR 0008  
           enc424j600_writeControlRegisterUnbanked@opcode 006D  
                            ??_enc424j600_writeSingleByte 006A  
                __end_of_ethernetController_getDeviceName 55F0  
               __size_of_ethernetController_getDeviceName 0024  
                      ??_ethernetController_getDeviceName 0062  
                       ?_ethernetController_getDeviceName 0060  
                        _ethernetController_getDeviceName 55CC  
                                memory_txFrameClear@index 0060  
                    enc424j600_readPHYRegister@unusedBits 0078  
                     ethernetController_getMacAddress@mac 0074  
                          memory_txFrameRequest@freeIndex 00A1  
                                            ___awmod@sign 0073  
                                                     prod 000FF3  
                                            hexToChar@val 0060  
           ethernetController_streamFromRXBuffer@startEnd 0071  
                                                     wreg 000FE8  
                                              _TXSTA1bits 000FAC  
                                      _sevenSegmentUpdate 3FBE  
               ethernetController_getEtherTypeField@field 006F  
                                  _numberOfOccupiedFields 0048  
                      ethernetController_setLEDConfig@LED 006F  
                      __size_of_ethernetController_getRSV 0074  
                            ipv4_sendFrame@requestCounter 0044  
                      __end_of_enc424j600_readPHYRegister 38F2  
                              _enc424j600_readPHYRegister 37D0  
                          __end_of_enc424j600_setTXLength 5442  
                                        ??_arp_background 0154  
                                                    ?_ISR 0001  
                          ?_ethernetController_sendPacket 0072  
                                                    l1001 1C24  
                                                    l1010 2158  
                                                    l1013 233C  
                                                    l1014 2184  
                                                    l1023 2326  
                                                    l1015 2358  
                                                    l1016 21AA  
                                                    l1200 5544  
                                                    l1040 2D58  
                                                    l1018 2222  
                                                    l1034 2E3E  
                                                    l1042 2D6E  
                                                    l1051 413C  
                                                    l1019 230E  
                                                    l1043 2D7E  
                                                    l1035 2CEE  
                                                    l1131 2784  
                                                    l1044 2E4C  
                                                    l1045 2DCA  
                                                    l1037 2D8E  
                                                    l1061 2E7C  
                                                    l1054 41D8  
                                                    l1046 2E18  
                                                    l1038 2D48  
                                                    l1070 49C0  
                                                    l1039 2DC0  
                                                    l1063 2ED4  
                                                    l1401 4ACE  
                                                    l1225 4D76  
                                                    l1153 3F42  
                                                    l1129 26A0  
                                                    l1402 4AD8  
                                                    l1226 4D8A  
                                                    l1146 2078  
                                                    l1403 4AE6  
                                                    l1171 33FE  
                                                    l1148 20BE  
                                                    l1172 33B2  
                                                    l1157 2B56  
                                                    l1173 32D4  
                                                    l1190 5196  
                                                    l1175 3314  
                                                    l1176 3336  
                                                    l1177 335C  
                                                    l1194 539E  
                                                    l1178 336A  
                                                    l1179 338E  
                                                    l1188 516A  
                                                    l1196 53B8  
                                                    l1620 3CFC  
                                                    l1613 4E96  
                                                    l1631 4EDC  
                                                    l1632 4ED4  
                                                    l1641 50EE  
                                                    l1617 3C32  
                                                    l1394 4A94  
                                                    l1642 50E6  
                                                    l1395 4AA0  
                                                    l1635 4EFC  
                                                    l1619 3C8E  
                                                    l1636 4F06  
                                                    l1564 46DE  
                                                    l1397 4AB6  
                                                    l1645 5106  
                                                    l1565 46D2  
                                                    l1398 4AAE  
                                                    l1646 5110  
                                                    l1574 4C5A  
                                                    l1575 4C4E  
                                                    l1568 4712  
                                                    l1569 4720  
                                                    l1578 4C82  
                                                    l1579 4C90  
                                                    l8131 3A0C  
                                                    l8127 39C2  
                                                    l8135 56E2  
                                                    l8147 4CEE  
                                                    l8237 5290  
                                                    l8503 0814  
                                                    l8433 4C14  
                                                    l8257 5258  
                                                    l9065 5396  
                                                    l9085 5162  
                                                    l8375 4744  
                                                    l9319 1344  
                                                    l8393 478C  
                                                    l8537 0946  
                                                    l8705 5588  
                                                    l9435 4134  
         ethernetController_streamToTransmitBuffer@opcode 007D  
                                                    l8653 491C  
                                                    l9525 3F42  
                                                    l8663 4B8C  
                                                    l8903 3C18  
                                                    l9449 41D8  
                                                    l9377 2E74  
                                                    l9561 494E  
                                                    l9459 553C  
                                                    l8909 5366  
                                                    l9645 386A  
                                                    l9485 2070  
                                                    l8961 279C  
                                                    l8881 3BAE  
                                                    l8929 5120  
                                                    l9497 20B6  
                                                    l9931 3AE2  
                                                    l8891 3BE2  
                                                    l8949 5562  
                                                    STR_1 7FC2  
                                                    STR_2 7FFA  
                                                    l9857 2296  
                                                    STR_3 7F55  
                                                    STR_4 7F76  
                                                    l8899 3C0A  
                                                    STR_5 7ED9  
                           ?_ethernetController_softReset 006E  
                                                    STR_6 7FC2  
                                                    STR_7 7FFA  
                                                    STR_8 7FB9  
                                                    STR_9 7FB2  
               ethernetController_clearInterruptFlag@flag 0072  
               enc424j600_setRXBufferStartAddress@lowByte 0070  
                                                    _RCIE 007CED  
                                                    _RCIF 007CF5  
                                                    u9000 3954  
                                                    u9101 39F6  
                                                    _RCIP 007CFD  
                                                    u9201 061A  
                                                    u9130 4774  
                                                    u9051 399A  
                                                    u9061 39AC  
                                                    u9221 063C  
                                                    u9150 47AE  
                                                    u9401 08F2  
                                                    u9170 4C14  
                                                    u9091 39E4  
                                                    u9251 0666  
                                                    u9180 4C24  
                                                    u9341 083A  
                                                    u9261 069C  
                                                    u9511 0AB4  
                                                    u9351 0858  
                                                    u8720 4CEE  
                                                    u9441 098A  
                                                    u8730 4CFE  
                                                    u8810 40DE  
                                                    u9531 0AD0  
                                                    u9451 09A8  
                                                    u8740 408C  
                                                    u9381 0896  
                                                    u9701 3EE8  
                                                    u9630 4BBA  
                                                    u8750 409A  
                                                    u9470 09C2  
                                                    u9390 08A4  
                                                    u9550 46E2  
                                                    u8760 40A8  
                                                    u8920 5286  
                                                    u9641 4BC6  
                                                    u8770 40B6  
                                                    u8930 3902  
                                                    u9491 0A92  
                                                    u9651 3E40  
                                                    u8940 3910  
                                                    u9820 50F2  
                                                    u9580 4C5E  
                                                    u8950 391E  
                                                    u8960 392C  
                                                    u9681 3E9A  
                                                    u9841 4A74  
                                                    u9850 4E34  
                                                    u8890 52BE  
                                                    u9930 3BF4  
                                                    u9691 3EB4  
                                                    u9860 4E40  
                                                    u9940 3C18  
                                                    u9870 4E60  
                                                    u9790 4EE0  
                                                    u9857 4E2A  
                                                    u9970 538C  
                                                    u9891 3B24  
                                                    u9877 4E56  
                                                    _TRMT 007D61  
                                                    _TXIF 007CF4  
                                          mac_isAllZero@i 0062  
                                     ?_sevenSegmentUpdate 000F  
                                       _ipv4_setToAllZero 5536  
                                                    _main 0ADA  
                                                    _rand 4DBC  
                                 printEthernetState@state 009A  
                                                    _ltoa 4E68  
                                                    _time 0029  
                                                    fsr0h 000FEA  
                                                    fsr1h 000FE2  
                                      i2___lwdiv@quotient 0005  
                                                    indf0 000FEF  
                                                    fsr2h 000FDA  
                                                    fsr0l 000FE9  
                                                    indf1 000FE7  
                                                    indf2 000FDF  
                                                    fsr1l 000FE1  
                                                    fsr2l 000FD9  
                                                    btemp 0050  
                                           __CFG_BORV$190 000000  
                               __size_of_sevenSegmentInit 001A  
                                 _ethernetController_init 43CE  
                                      ?_ipv4_setToAllZero 0060  
                                                    prodh 000FF4  
                                                    prodl 000FF3  
                     __size_of_handleStackBackgroundTasks 021A  
                                                    start 00E8  
          __end_of_ethernetController_getSourceMACAddress 4BD0  
         __size_of_ethernetController_getSourceMACAddress 0070  
                ??_ethernetController_getSourceMACAddress 0078  
                 ?_ethernetController_getSourceMACAddress 006F  
                  _ethernetController_getSourceMACAddress 4B60  
                                            arp_probe@err 014E  
                                           __CFG_IESO$OFF 000000  
                                 __end_of_UARTTransmitInt 5656  
                                         ??_mac_isAllZero 0062  
                                           __CFG_MCLRE$ON 000000  
                              memory_txFrameRequest@field 0098  
                                            ___param_bank 000000  
                           ethernet_rxGetNewFrame@counter 0035  
                                 _checkForOverlapSwitched 407C  
              enc424j600_setRXBufferStartAddress@highByte 0071  
            __end_of_ethernetController_getEtherTypeField 4B60  
           __size_of_ethernetController_getEtherTypeField 0070  
                  ??_ethernetController_getEtherTypeField 0078  
                   ?_ethernetController_getEtherTypeField 006F  
                    _ethernetController_getEtherTypeField 4AF0  
                                                   ??_ISR 0016  
                                     ??_ipv4_setToAllZero 0062  
                             ?_enc424j600_enableReception 0001  
                      __size_of_enc424j600_getPacketCount 001A  
                                          _ipv4_isAllZero 5390  
                     ethernetController_setLEDConfig@data 0070  
                                    ??_sevenSegmentUpdate 0011  
                                            ?_intToString 0084  
                          handleStackBackgroundTasks@intf 018C  
                     ethernetController_setLEDConfig@conf 006E  
                                           arp_send@field 00F3  
                                                   l10207 2710  
                                                   l10251 2E18  
                                                   l11051 33E0  
                                                   l10165 49B8  
                                                   l11049 33D6  
                                     arp_checkForEntry@ip 0067  
                                       _nextPacketPointer 0042  
                                                   ?_main 0001  
                                                   ?_rand 006C  
                                                   _CCPR1 000FBE  
                                                   STR_10 7E35  
                                                   ?_ltoa 007A  
                                                   STR_11 7FC2  
                                                   STR_20 7BD4  
                                                   STR_12 7FF3  
                                                   STR_21 7A83  
                                                   STR_13 7FF6  
                                                   STR_14 7FD8  
                                                   STR_30 7DF2  
                                                   STR_22 7B14  
                                                   STR_15 7FF0  
                                                   STR_31 7F49  
                                                   STR_23 7BB1  
                                                   STR_40 7BD4  
                                                   STR_32 7FEE  
                                                   STR_16 7FC2  
                                                   STR_24 7BFC  
                                                   STR_25 7BD4  
                                                   STR_17 7C1C  
                                                   STR_33 7F92  
                                                   STR_41 7CEE  
                                                   STR_34 7FCF  
                                                   STR_18 7D0B  
                                                   STR_26 7FFC  
                                                   STR_42 7FD3  
                                                   STR_50 7FA3  
                                                   STR_19 7FF9  
                                                   STR_43 7FE9  
                                                   STR_35 7F3D  
                                                   STR_51 7EB8  
                                                   STR_27 7A85  
                                                   STR_60 7F89  
                                                   STR_44 7F24  
                                                   STR_36 7E0A  
                                                   STR_52 7D2C  
                                                   STR_28 7AB8  
                                         __end_of___awmod 4AF0  
                                                   STR_29 7A85  
                                                   STR_37 7FCF  
                                                   STR_61 7FCE  
                                                   STR_53 7E82  
                                                   STR_45 7E6F  
                                                   STR_38 7A85  
                                                   STR_70 7FC2  
                                                   STR_62 7FC4  
                                                   STR_54 7F16  
                                                   STR_46 7E5C  
                                                   STR_71 7E32  
                                                   STR_63 7FE5  
                                                   STR_39 7F07  
                                                   STR_55 7EF8  
                                                   STR_47 7E21  
                                                   STR_72 7FBF  
                                                   STR_64 7E95  
                                                   STR_80 7DD8  
                                                   STR_48 7D68  
                                                   STR_56 7BD7  
                                                   STR_73 7E32  
                                                   STR_65 7FC9  
                                                   STR_81 7F31  
                                                   STR_49 7D85  
                                                   STR_57 7A4E  
                                                   STR_82 7FE9  
                                                   STR_74 7FFA  
                                                   STR_66 7FDD  
                                                   STR_90 7CCD  
                                                   STR_58 7C8A  
                                                   STR_67 7FE1  
                                                   STR_75 7F6C  
                                                   STR_59 7D4A  
                                                   STR_91 7D0E  
                                                   STR_83 7AE9  
                                                   STR_84 7BD4  
                                                   STR_92 7D0B  
                                                   STR_76 7EE9  
                                                   STR_68 7EA7  
                                                   STR_93 7FED  
                                                   STR_77 7EC9  
                                                   STR_85 7C68  
                                                   STR_69 7B3C  
                                                   STR_78 7E32  
                                                   STR_86 7C21  
                                                   STR_94 7B8A  
                                                   STR_79 7FFA  
                                                   STR_87 7A14  
                                                   STR_96 7F80  
                                                   STR_88 7C45  
                                                   STR_97 7F9B  
                                                   STR_89 7B63  
                                                   STR_98 7BD4  
                                                   STR_99 7DBD  
                                                   u10000 5158  
                                         __end_of___lldiv 4732  
                                                   u10110 190A  
                                                   u10105 178C  
                                                   u10210 519A  
                                                   u10130 3D32  
                                                   u10115 1900  
                                                   u10060 28F0  
                                                   u11100 2ED8  
                                                   u10140 3D60  
                                                   u10301 1D58  
                                                   u10221 1C78  
                                                   u11021 3188  
                                                   u10150 3DBE  
                                                   u10311 1D72  
                                                   u10231 1C94  
                                                   u11111 2F16  
                                                   u11031 319A  
                                                   u10080 2962  
                                                   u10401 1E8E  
                                                   u10321 1D8C  
                                                   u10241 1CA6  
                                                   u11041 3202  
                                                   u10145 3D56  
                                                   u11130 2F6A  
                                                   u10331 1DA6  
                                                   u11051 3224  
                                                   u10155 3DB4  
                                                   u11220 41DC  
                                                   u10180 53BC  
                                                   u10421 1ECA  
                                                   u10341 1DC8  
                                                   u10261 1CF2  
                                                   u11141 2FAE  
                                                   u11061 3236  
                                                   u11301 3F04  
                                                   u10510 1436  
                                                   u10271 1D0A  
                                                   u11151 4478  
                                                   u11071 325A  
                                                   u10095 16DE  
                                                   u12111 0422  
                                                   u10361 1E0A  
                                                   u10281 1D24  
                                                   u11161 44CA  
                                                   u12121 045C  
                                                   u12201 264E  
                                                   u11410 299C  
                                                   u10610 1500  
                                                   u10530 1460  
                                                   u10450 13C4  
                                                   u11330 4970  
                                                   u10291 1D3E  
                                                   u11171 44EC  
                                                   u12051 0178  
                                                   u12211 2660  
                                                   u10508 1412  
                                                   u11260 20B2  
                                                   u11500 2B48  
                                                   u10381 1E4C  
                                                   u11181 44FE  
                                                   u12141 49CA  
                                                   u11421 29BC  
                                                   u11341 498C  
                                                   u12221 2676  
                                                   u12150 49FC  
                                                   u10710 15C6  
                                                   u10630 1526  
                                                   u10550 1486  
                                                   u10470 13E8  
                                                   u11511 2B6A  
                                                   u12071 02A4  
                                                   u10608 14DC  
                                                   u10528 143A  
                                                   u11280 20F8  
                                                   u12240 2710  
                                         __end_of___llmod 4CA2  
                                                   u11441 2A02  
                                                   u11521 2BA4  
                                                   u12330 55DA  
                                                   u10730 15F0  
                                                   u10650 154E  
                                                   u10570 14AE  
                                                   u10490 140E  
                                                   u11451 2A60  
                                                   u10811 167E  
                                                   u11291 2118  
                                                   u12171 25BE  
                                                   u11364 4650  
                                                   u10708 15A2  
                                                   u10628 1504  
                                                   u10548 1464  
                                                   u10468 13C8  
                                                   u11365 464C  
                                                   u12181 260C  
                                                   u11630 2218  
                                                   u11374 4692  
                                                   u11390 386A  
                                                   u10750 1618  
                                                   u10670 1578  
                                                   u10590 14D8  
                                                   u11375 468E  
                                                   u12191 263C  
                                                   u12511 4324  
                                                   u12600 4ABA  
                                                   u10808 1666  
                                                   u10728 15CA  
                                                   u10648 152A  
                                                   u10568 148A  
                                                   u10488 13EC  
                                                   u11481 2AE6  
                                                   u12521 54AC  
                                                   u11650 2296  
                                                   u11810 347A  
                                                   u10930 1310  
                                                   u10770 163C  
                                                   u10690 159E  
                                                   u11491 2AFC  
                                                   u11580 1B56  
                                                   u11900 3500  
                                                   u10748 15F4  
                                                   u10668 1552  
                                                   u10588 14B2  
                                                   u11830 3498  
                                                   u11750 342C  
                                                   u10790 1662  
                                                   u12391 2458  
                                                   u11920 351E  
                                                   u11808 3462  
                                                   u10768 161C  
                                                   u10688 157C  
                                                   u11681 53E4  
                                                   u11850 34B2  
                                                   u11770 3444  
                                                   u12731 0E4C  
                                                   u11940 353A  
                                                   u11828 347E  
                                                   u10980 1344  
                                                   u10788 1640  
                                                   u11918 3504  
                                                   u11870 34CE  
                                                   u11790 345E  
                                                   u10991 1362  
                                                   u12751 0EA6  
                                                   u11960 3552  
                                                   u11848 349C  
                                                   u11768 3430  
                                                   u12761 0ED2  
                                                   u12681 0C3A  
                                                   u12817 0B2C  
                                                   u11938 3522  
                                                   u12691 0D72  
                                                   u12827 0C96  
                                                   u11980 5706  
                                                   u11868 34B6  
                                                   u11788 3448  
                                                   u12837 3832  
                                                   u11958 353E  
                                                   u11894 34E4  
                                                   u12847 3A90  
                                                   u11895 34DE  
                                                   u11888 34D2  
                                                   u12857 3ACC  
                                                   u11978 3556  
                                         __end_of___lwdiv 4F10  
                              __end_of_printEthernetState 432E  
                                         __end_of___lwmod 511A  
                                           __CFG_WDTEN$ON 000000  
                                                   i2l704 4212  
                                                   i2l705 4222  
                                                   i2l706 4266  
                                                   i2l714 007A  
        ethernetController_streamToTransmitBuffer@pointer 003E  
                                                   i2l715 0098  
                                                   i2l760 4812  
                                                   i2l752 4014  
                                                   i2l761 4816  
                                                   i2l747 3FF0  
                                                   i2l756 481A  
                                                   i2l757 480A  
                                                   i2l749 3FF8  
                                                   i2l759 480E  
                                     _arp_handleNewPacket 2980  
                                                   _SPBRG 000FAF  
                                                   _PORTA 000F80  
                                                   _PORTB 000F81  
                                                   _PORTC 000F82  
                        __size_of_ethernet_txFrameRequest 00E8  
                                                   _TRISA 000F92  
                                                   _TRISB 000F93  
                                                   _TRISC 000F94  
         __end_of_enc424j600_writeControlRegisterUnbanked 52F8  
        __size_of_enc424j600_writeControlRegisterUnbanked 0036  
               ??_enc424j600_writeControlRegisterUnbanked 006C  
                ?_enc424j600_writeControlRegisterUnbanked 006A  
                 _enc424j600_writeControlRegisterUnbanked 52C2  
                                           __CFG_WRT0$OFF 000000  
                                           __CFG_WRT1$OFF 000000  
                                           __CFG_WRT2$OFF 000000  
                                     ___lmul@multiplicand 0064  
                                           __CFG_WRT3$OFF 000000  
                                          __CFG_EBTR0$OFF 000000  
                                          __CFG_FCMEN$OFF 000000  
                                          __CFG_EBTR1$OFF 000000  
                                          __CFG_EBTR2$OFF 000000  
                                          __CFG_EBTR3$OFF 000000  
                                         __end_of_mac_cmp 515C  
                                         _ipv4_background 32B0  
                                        __end_of_UARTInit 573E  
                                         ??_arp_sendReply 00FC  
                                           __CFG_WRTB$OFF 000000  
                                           __CFG_WRTC$OFF 000000  
                                           __CFG_WRTD$OFF 000000  
                                          __CFG_EBTRB$OFF 000000  
                                                   _randx 0049  
                               __end_of_ipv4_setToAllZero 555C  
                                                   _srand 573E  
                                                   _stack 0257  
                               arp_background@errAnnounce 0157  
                                                   main@i 03C8  
                                                   _ultoa 3C22  
           ethernetController_streamToTransmitBuffer@data 007C  
                       __end_of_ethernetController_getRSV 4996  
                                          __pbitbssCOMRAM 0278  
                                                   pclath 000FFA  
                                                   tablat 000FF5  
                            ethernet_txFrameRequest@frame 00A2  
                                        ?_checkForOverlap 0072  
                                                   plusw0 000FEB  
                                                   plusw1 000FE3  
                                                   plusw2 000FDB  
                             memory_txFrameRequest@i_1178 0097  
                                                   status 000FD8  
                                          __CFG_T3CMX$RC0 000000  
                                                   wtemp6 0051  
                       enc424j600_clearInterruptFlag@flag 0070  
                             __size_of_mac_setToBroadcast 0026  
                                           arp_probe@link 0138  
                                          __CFG_ICPRT$OFF 000000  
                       enc424j600_clearInterruptFlag@temp 0071  
                                    ?_arp_handleNewPacket 00FC  
                                __end_of_UARTTransmitText 4E68  
                                          __CFG_PBADEN$ON 000000  
                                          _ipv4_sendFrame 2580  
                                      __size_ofi2___lwdiv 0052  
                                            ?_parseNumber 0008  
                                        _ipAdressToString 2792  
                                         __initialization 432E  
                       ethernetController_softReset@F5987 004D  
                       ethernetController_softReset@F5989 0040  
                             memory_txFrameRequest@length 0084  
                                            __end_of_main 0F72  
                                  __end_of_ipv4_isAllZero 53C0  
                                            __end_of_rand 4E12  
                                            __end_of_ltoa 4EBC  
                                ?_ipv4_getIPSourceAddress 0060  
                                  arpEntryToString@string 0370  
                                ?_ipv4_setIPSourceAddress 0060  
                                    _ipv4_handleNewPacket 2B2E  
                                          __CFG_PCLKEN$ON 000000  
                              _memory_txFrameRequest$1174 0093  
                       __end_of_enc424j600_getPacketCount 56A6  
                                           main@headerBuf 03A6  
                                          arp_send@i_3104 00CE  
                                          arp_send@i_3105 00CF  
                                          arp_send@i_3106 00D0  
                                                  ??_main 0191  
                                                  ??_rand 006E  
                               __size_of_entireMemoryFull 0038  
                                                  ??_ltoa 0082  
                                           __activetblptr 000002  
                      __end_of_ipv4_writeHeaderIntoBuffer 3144  
                              _ipv4_writeHeaderIntoBuffer 2FD6  
                         handleStackBackgroundTasks@stack 0185  
                                        ??_arp_gratuitous 0139  
                                          __CFG_SDOMX$RB3 000000  
                                         __CFG_CCP2MX$RC1 000000  
       ethernetController_writeDestinationMACAddress@addr 006F  
       ethernetController_writeDestinationMACAddress@data 007E  
                ethernetController_pollInterruptFlags@reg 0080  
                                        ___llmod@dividend 0060  
                                                  STR_100 7BD4  
                                                  STR_101 7F61  
                                                  STR_110 7FFA  
                                                  STR_102 7FAB  
                                                  STR_103 7FFA  
                                                  STR_111 7E49  
                                                  STR_104 7FC2  
                                                  STR_112 7CAC  
                                                  STR_105 7FD3  
                                                  STR_113 7DA2  
                                                  STR_106 7FF6  
                                                  STR_107 7FF6  
                                                  STR_108 7FF6  
                                                  STR_109 7E32  
                                    __size_of_macToString 0108  
                                                  ?_srand 007A  
                                   _arp_getEntryFromTable 53C0  
                                                  _ANSELA 000F5B  
                                                  _ANSELB 000F5C  
                                                  _ANSELC 000F5D  
                              ethernetController_getRSV@i 0077  
                                                  ?_ultoa 006D  
                                    ipv4_parseHeader@temp 008E  
                       __size_of_ipv4_checkHeaderChecksum 00C8  
                              printEthernetState@oldState 0248  
                                                  i2l1631 4F2E  
                                                  i2l1632 4F26  
                                                  i2l1635 4F4E  
                                                  i2l1636 4F58  
                               ??_ethernetController_init 007D  
                                                  i2l7581 400C  
                               ?_ipv4_checkHeaderChecksum 009A  
       __end_of_ethernetController_streamToTransmitBuffer 4922  
      __size_of_ethernetController_streamToTransmitBuffer 0078  
             ??_ethernetController_streamToTransmitBuffer 0078  
              ?_ethernetController_streamToTransmitBuffer 006F  
               _ethernetController_streamToTransmitBuffer 48AA  
                                         _fSrcAddrChanged 0278  
                                  __end_of_ipv4_sendFrame 2792  
                                   ??_arp_handleNewPacket 00FE  
                                                  _TXREG1 000FAD  
                                        mac_isAllZero@mac 0060  
                          ??_ethernetController_softReset 0071  
                               ??_checkForOverlapSwitched 0072  
                              ethernetController_init@err 007D  
                                  __size_of_buttonHandler 00AC  
                                 ?_ethernet_rxGetNewFrame 0178  
                                        ?_UARTTransmitInt 009A  
                                          __CFG_XINST$OFF 000000  
                                        __end_of_arp_init 4A0A  
                                        __end_of_arp_send 1ED8  
                                                  ___lmul 4D64  
                                        __end_of_ipv4_cmp 519E  
                                         ?_ipv4_isAllZero 0060  
                                                  ___wmul 54BE  
                                   ?_ipv4_handleNewPacket 00B5  
                      __end_of_handleStackBackgroundTasks 2580  
                              _handleStackBackgroundTasks 2366  
                                          __CFG_STVREN$ON 000000  
                                               ??___awmod 0072  
                                   buttonHandler@oldState 0047  
                                               ??___lldiv 0068  
             enc424j600_writeControlRegisterUnbanked@addr 006C  
                                   buttonHandler@newState 0046  
             enc424j600_writeControlRegisterUnbanked@data 006A  
                                               ??___llmod 0068  
                                               ??___lwdiv 0064  
                                               ??___lwmod 0072  
                                    __size_of_hexToString 00EE  
                           enc424j600_setTXLength@lowByte 0070  
                            buttonHandler@debounceCounter 002D  
                                                  clear_0 4394  
                                                  clear_1 43A0  
                                                  clear_2 43AC  
                                                  clear_3 43BA  
                                         ___awmod@divisor 0070  
                              parseNumber@numberToDisplay 0008  
                                arp_parseFromRXBuffer@arp 009D  
                                 __end_of_ipv4_background 3414  
                                         ___awmod@counter 0072  
  __end_of_ethernetController_writeEtherTypeFieldToBuffer 4FB0  
 __size_of_ethernetController_writeEtherTypeFieldToBuffer 004E  
        ??_ethernetController_writeEtherTypeFieldToBuffer 007A  
         ?_ethernetController_writeEtherTypeFieldToBuffer 006F  
          _ethernetController_writeEtherTypeFieldToBuffer 4F62  
                                               ??_mac_cmp 0064  
                                        ??_mac_setAllZero 0062  
                                           main@prescaler 03A2  
          ethernetController_streamToTransmitBuffer@field 006F  
          __end_of_enc424j600_readControlRegisterUnbanked 532E  
         __size_of_enc424j600_readControlRegisterUnbanked 0036  
                ??_enc424j600_readControlRegisterUnbanked 006C  
                 ?_enc424j600_readControlRegisterUnbanked 006A  
                  _enc424j600_readControlRegisterUnbanked 52F8  
                                            __pdataCOMRAM 0049  
                                      _enc424j600_initSPI 5656  
                           ?_enc424j600_setTXStartAddress 006E  
                                      _enc424j600_readSPI 4BD0  
                ethernetController_softReset@comFailCount 0072  
                                                  ltoa@cp 0082  
                                       __end_ofi2___lwdiv 4F62  
                                            __mediumconst 7A08  
                             __size_of_ipProtocolToString 0048  
                                                  tblptrh 000FF7  
                                                  tblptrl 000FF6  
                                                  tblptru 000FF8  
                                                  srand@x 007A  
           __end_of_ethernetController_clearInterruptFlag 5768  
          __size_of_ethernetController_clearInterruptFlag 000E  
                  ?_ethernetController_clearInterruptFlag 0001  
                 ??_ethernetController_clearInterruptFlag 0072  
                   _ethernetController_clearInterruptFlag 575A  
                                     mac_setToBroadcast@i 0062  
                                                  ultoa@c 0079  
                                                  ultoa@v 0075  
                              __size_of_ipv4_setToAllZero 0026  
                                     ?_enc424j600_initSPI 0001  
                                      ipv4_background@err 009F  
                                          arp_probe@index 0141  
                                     ?_enc424j600_readSPI 0060  
                         ethernetController_softReset@err 0077  
                                         _numberToDisplay 0031  
                                    __CFG_LS48MHZ$SYS24X4 000000  
                                          arp_probe@state 01AB  
                                 ipAdressToString@address 02F0  
      __end_of_ethernetController_updateNextPacketPointer 48AA  
     __size_of_ethernetController_updateNextPacketPointer 007A  
             ?_ethernetController_updateNextPacketPointer 0001  
            ??_ethernetController_updateNextPacketPointer 006F  
              _ethernetController_updateNextPacketPointer 4830  
                     __size_of_enc424j600_enableReception 0008  
                                __size_of_arp_setNewEntry 017C  
                       sevenSegmentUpdate@digitsToDisplay 0039  
                                              __accesstop 0060  
                                 __end_of__initialization 43C0  
                                       _printErrorMessage 36A2  
                                __size_of_arp_sendRequest 009E  
                            ??_enc424j600_readPHYRegister 0070  
           ethernetController_getEtherTypeField@ethertype 007C  
                                         ?_ipv4_sendFrame 0134  
                                   _arp_parseFromRXBuffer 0F72  
                          __end_of_ethernet_rxGetNewFrame 05FE  
                                        _sevenSegmentInit 5672  
                            __size_of_enc424j600_writeSPI 0064  
               ethernetController_updateLinkStatus@temp16 0083  
                                           ___rparam_used 000001  
                                      ?_printErrorMessage 009A  
                             arp_parseFromRXBuffer@i_3030 0099  
                             arp_parseFromRXBuffer@i_3031 009A  
                             arp_parseFromRXBuffer@i_3029 0098  
              ethernetController_pollInterruptFlags@flags 007E  
                                 enc424j600_writeSPI@data 0060  
                                          __pcstackCOMRAM 0001  
                                        __CFG_nPWRTEN$OFF 000000  
                                 ipAdressToString@pointer 0087  
 enc424j600_updateReceiveStatusVector@receiveStatusVector 006C  
                                            __pidataBANK1 5776  
                                            __pidataBANK2 55F0  
                                       ipv4_parseHeader@i 008C  
                                               ?_UARTInit 0001  
                                    ??_enc424j600_initSPI 0060  
                                    ??_enc424j600_readSPI 0062  
                                     ??_printErrorMessage 009D  
                         enc424j600_setRXTailPointer@addr 006E  
                         __end_of_ethernetController_init 446E  
                                           __end_of_srand 574C  
                         ??_ethernetController_dropPacket 0074  
                                           __end_of_ultoa 3D20  
                             arp_parseFromRXBuffer@offset 009B  
     ethernetController_getSourceMACAddress@sourceAddress 0079  
                           ?_enc424j600_getInterruptFlags 006E  
                                     arp_send@destination 00C7  
                                 _ethernet_txFrameRequest 3E0E  
                               __size_of_ipv4_parseHeader 024A  
                              ipProtocolToString@protocol 0062  
                                    __size_of_intToString 0032  
                         __end_of_checkForOverlapSwitched 412E  
                                      __size_of_getMillis 0012  
                                           _buttonHandler 41E0  
                          __size_of_memory_txFrameRequest 04DC  
                             __end_of_ipv4_SrcAddrChanged 56E6  
                           __end_of_memory_txFrameRequest 0ADA  
                                      __size_of_hexToChar 0022  
                                 arp_background@fAnnounce 0279  
                                      __size_of_arp_probe 02CC  
                                  ?_arp_getEntryFromTable 0060  
                                  arp_parseFromRXBuffer@i 0097  
                    __size_of_enc424j600_setRXTailPointer 002A  
                                                 ??_srand 007C  
                                      __size_of_ipv4_init 0004  
                                                 ??_ultoa 0075  
                               __end_of_printErrorMessage 37D0  
                        enc424j600_getPacketCount@lowByte 006E  
                                              __pbssBANK1 0194  
                                              __pbssBANK2 0200  
                                              __pbssBANK3 0300  
                             __end_of_memory_txFrameClear 55CC  
                          ?_enc424j600_clearInterruptFlag 0001  
                                       _etherTypeToString 5092  
                                      ?_etherTypeToString 0060  
                                       __CFG_PLLSEL$PLL4X 000000  
                                  ??_ipv4_handleNewPacket 00B7  
                         ??_ethernetController_sendPacket 007B  
                                                 ?___lmul 0060  
                                                 ?___wmul 0060  
                                              ??_UARTInit 0060  
                                    __size_of_parseNumber 007E  
                                          hexToString@val 0061  
                                          ___lmul@product 0068  
                                   macToString@firstDigit 0093  
                                     ??_etherTypeToString 0062  
          ethernetController_writeDestinationMACAddress@i 0086  
                                        ?_ipv4_background 009A  
                                        _entireMemoryFull 5252  
                                   ipv4_parseHeader@field 0074  
                                          ?_buttonHandler 0001  
                              etherTypeToString@ethertype 0060  
                                  ipv4_SrcAddrChanged@err 0060  
                 enc424j600_updateReceiveStatusVector@rsv 0060  
                       enc424j600_readPHYRegister@lowByte 007D  
                                __end_of_ipAdressToString 2980  
                                         __CFG_WDTPS$1024 000000  
                enc424j600_setERXDATAReadPointer@highByte 006E  
                                                 _SSP1BUF 000FC9  
                                       ipv4_sendFrame@err 00FD  
  ethernetController_writeEtherTypeFieldToBuffer@highByte 007B  
                                               ?_arp_init 0001  
                                               ?_arp_send 00A7  
                            __size_of_ipv4_txFrameRequest 0136  
                          ??_enc424j600_setTXStartAddress 0070  
                                               ?_ipv4_cmp 0060  
                                        __CFG_CFGPLLEN$ON 000000  
                                      _printEthernetState 428C  
                               __end_of_etherTypeToString 50D6  
                                  ?_arp_parseFromRXBuffer 0074  
                  enc424j600_setRXBufferStartAddress@addr 006E  
           __end_of_ethernetController_streamFromRXBuffer 4D64  
          __size_of_ethernetController_streamFromRXBuffer 005E  
                 ??_ethernetController_streamFromRXBuffer 0071  
                  ?_ethernetController_streamFromRXBuffer 006F  
                   _ethernetController_streamFromRXBuffer 4D06  
                          sevenSegmentUpdate@digitPointer 0045  
                                       ?_UARTTransmitText 0098  
                                       __end_of_getMillis 572E  
                                                 __Hparam 0000  
                      __end_of_enc424j600_enableReception 57A8  
                              _enc424j600_enableReception 57A0  
ethernetController_updateNextPacketPointer@nextPktPointer 0075  
                                                 __Lparam 0000  
                                         ipv4_isAllZero@i 0062  
                                     ?_printEthernetState 009A  
                                       ??_arp_setNewEntry 00A8  
               __end_of_enc424j600_enableAutoMACInsertion 5536  
              __size_of_enc424j600_enableAutoMACInsertion 0028  
                      ?_enc424j600_enableAutoMACInsertion 0001  
                     ??_enc424j600_enableAutoMACInsertion 006E  
                       _enc424j600_enableAutoMACInsertion 550E  
                                       __end_of_hexToChar 5634  
                                      ??_UARTTransmitText 009A  
                                checkForOverlapSwitched@a 0060  
                                checkForOverlapSwitched@b 0069  
                                       ??_arp_sendRequest 00FC  
                                       __end_of_arp_probe 1C60  
                                      buttonHandler@state 0001  
                               enc424j600_setTXLength@len 006E  
                                   __end_of_mac_isAllZero 5390  
                                         __size_of___lmul 0058  
                                                 ___awmod 4A7E  
                          enc424j600_setTXLength@highByte 0071  
                                                 ___lldiv 46AE  
                                         __size_of___wmul 0028  
                                                 ___llmod 4C3A  
                                                 ___lwdiv 4EBC  
                                                 ___lwmod 50D6  
                    enc424j600_setGPDATAWritePointer@addr 006A  
                               ??_ethernet_txFrameRequest 00A4  
                                       __end_of_ipv4_init 57B2  
                                     sevenSegmentUpdate@i 0015  
                                                 __pcinit 432E  
                             __size_of_sevenSegmentUpdate 00BE  
                                     parseNumber@hundreds 000E  
                                                 __ramtop 0800  
                                                 __ptext0 0ADA  
                                                 __ptext1 5782  
                                                 __ptext2 57AE  
                                                 __ptext3 573E  
                                                 __ptext4 5672  
                                                 __ptext5 428C  
                                                 __ptext6 36A2  
                                                 __ptext7 2FD6  
                                                 __ptext8 356C  
                                                 __ptext9 5496  
                                                 _mac_cmp 511A  
                                  ipv4_handleNewPacket@ip 00C2  
                                               _T0CONbits 000FD5  
                            ??_handleStackBackgroundTasks 0187  
                                            __size_of_ISR 00E0  
                                               _T1CONbits 000FCD  
                  enc424j600_setGPDATAWritePointer@opcode 006C  
                      enc424j600_setRXTailPointer@lowByte 0070  
              __end_of_enc424j600_setRXBufferStartAddress 5496  
             __size_of_enc424j600_setRXBufferStartAddress 002A  
                    ??_enc424j600_setRXBufferStartAddress 0070  
                     ?_enc424j600_setRXBufferStartAddress 006E  
                      _enc424j600_setRXBufferStartAddress 546C  
                   __end_of_ethernetController_dropPacket 51DA  
                  __size_of_ethernetController_dropPacket 003C  
                           _ethernetController_dropPacket 519E  
                             ?_ipv4_writeHeaderIntoBuffer 0060  
                                        ___awmod@dividend 006E  
                                    ??_printEthernetState 00A9  
           __end_of_ethernetController_pollInterruptFlags 356C  
          __size_of_ethernetController_pollInterruptFlags 0158  
                 ??_ethernetController_pollInterruptFlags 007A  
                  ?_ethernetController_pollInterruptFlags 0078  
                   _ethernetController_pollInterruptFlags 3414  
                          ??_enc424j600_getInterruptFlags 0070  
                        __size_of_ipv4_getIPSourceAddress 0012  
                 enc424j600_setGPDATAWritePointer@lowByte 006D  
                        __size_of_ipv4_setIPSourceAddress 0014  
                                              ??_arp_init 00B2  
                                                 main@err 03C9  
                                              ??_arp_send 00C7  
                                   __end_of_arp_sendReply 32B0  
                                    end_of_initialization 43C0  
                              __size_of_printErrorMessage 012E  
                                              ??_ipv4_cmp 0064  
                              __end_of_mac_setToBroadcast 55A8  
                              ?_ethernetController_getRSV 0071  
                                        arp_gratuitous@ip 0134  
                                           __Lmediumconst 7A08  
                                                 ltoa@buf 007A  
                                        ??_ipv4_isAllZero 0062  
                         ipv4_calculateHeaderChecksum@sum 006E  
                                                 ltoa@val 007C  
                                         mac_setAllZero@i 0062  
             ethernetController_streamFromRXBuffer@opcode 0072  
                                         ___lldiv@divisor 0064  
                                         ___lldiv@counter 006C  
                                 __size_of_arp_background 0180  
                                      entireMemoryEmpty@i 0060  
                                __size_of_checkForOverlap 011E  
                                                 postdec1 000FE5  
                                                 postdec2 000FDD  
                                         macToString@addr 007A  
                                                 postinc0 000FEE  
                                                 postinc1 000FE6  
                                                 postinc2 000FDE  
                                       arp_setNewEntry@ip 00A0  
                             ?_handleStackBackgroundTasks 0185  
                                       _arp_checkForEntry 412E  
                   memory_txFrameRequest@fNoOverlapMarker 0095  
                    enc424j600_readPHYRegister@PHYaddress 0077  
                                         ??_buttonHandler 0003  
                                      ?_arp_checkForEntry 0067  
                   __end_of_ethernetController_sendPacket 550E  
                  __size_of_ethernetController_sendPacket 0028  
                           _ethernetController_sendPacket 54E6  
                                       arp_sendReply@myIP 0134  
                                               _PORTBbits 000F81  
                                     ipv4_background@link 0001  
                                        _ipv4_parseHeader 1ED8  
                             ?_enc424j600_writeSingleByte 0001  
                                     ipv4_sendFrame@index 00FC  
                              ?_enc424j600_getPacketCount 0001  
                                ??_enc424j600_setTXLength 0070  
                       sevenSegmentUpdate@numberToDisplay 000F  
                                __end_of_sevenSegmentInit 568C  
                                     _enc424j600_writeSPI 4CA2  
                 __end_of_ipv4_streamToTransmissionBuffer 54BE  
                __size_of_ipv4_streamToTransmissionBuffer 0028  
                       ??_ipv4_streamToTransmissionBuffer 00C0  
                        ?_ipv4_streamToTransmissionBuffer 007E  
                         _ipv4_streamToTransmissionBuffer 5496  
                                              _stack_init 5782  
                                           ??_macToString 0080  
                  ethernetController_softReset@dataToSend 0073  
                                               _TRISBbits 000F93  
                                     ??_arp_checkForEntry 006D  
                                              _updateTime 5768  
         __end_of_ethernetController_getNextPacketPointer 575A  
        __size_of_ethernetController_getNextPacketPointer 000E  
               ??_ethernetController_getNextPacketPointer 0064  
                ?_ethernetController_getNextPacketPointer 0062  
                 _ethernetController_getNextPacketPointer 574C  
                                              arp_init@ip 00B8  
                             __end_of_arp_handleNewPacket 2B2E  
                                        ??_ipv4_sendFrame 0176  
                                       i2___lwdiv@divisor 0003  
                         __end_of_ethernet_txFrameRequest 3EF6  
                        ethernetController_getRSV@address 0071  
                                               i2___lwdiv 4F10  
                                       i2___lwdiv@counter 0007  
                              __size_of_etherTypeToString 0044  
                                     UARTTransmitText@str 0098  
                                             _CCP1CONbits 000FBD  
                    __end_of_ipv4_calculateHeaderChecksum 1994  
                   __size_of_ipv4_calculateHeaderChecksum 030C  
                            _ipv4_calculateHeaderChecksum 1688  
                    enc424j600_setTXStartAddress@highByte 0071  
                                    ?_enc424j600_writeSPI 0060  
                                       intToString@number 01B7  
                                ipAdressToString@hundreds 0083  
                                   arp_probe@probeCounter 01AC  
                               __end_of_arp_checkForEntry 41E0  
                                           ??_hexToString 0065  
                              arp_getEntryFromTable@index 0067  
                              arp_setNewEntry@oldestIndex 00B0  
                                      arp_checkForEntry@i 0075  
                                      ipv4_parseHeader@ip 008F  
                                          __end_of___lmul 4DBC  
        ethernetController_updateNextPacketPointer@opcode 0077  
                                          __end_of___wmul 54E6  
                                           __pidataCOMRAM 57A8  
                                        parseNumber@digit 000A  
                            ?_enc424j600_setRXTailPointer 006E  
                                __size_of_UARTTransmitInt 0022  
                                       __size_of_UARTInit 0010  
                  enc424j600_setERXDATAReadPointer@opcode 006C  
                              __end_of_ipProtocolToString 5092  
                                      hexToString@pointer 0069  
                      ipv4_checkHeaderChecksum@testHeader 009E  
                                  arp_sendReply@senderMAC 0120  
                                  arp_sendReply@targetMAC 0126  
                                 ??_arp_getEntryFromTable 0067  
             __end_of_ethernetController_updateLinkStatus 4624  
            __size_of_ethernetController_updateLinkStatus 008A  
                   ??_ethernetController_updateLinkStatus 0082  
                    ?_ethernetController_updateLinkStatus 0080  
                     _ethernetController_updateLinkStatus 459A  
                                     start_initialization 432E  
                                             __end_of_ISR 00E8  
                                  enc424j600_readSPI@data 0060  
                                          intToString@val 0084  
                          ipv4_checkHeaderChecksum@header 009A  
                                ?_ethernetController_init 007A  
                                _ipv4_checkHeaderChecksum 3EF6  
                         ipv4_handleNewPacket@headerField 00B9  
                                              ?i2___lwdiv 0001  
                           ipv4_writeHeaderIntoBuffer@ptr 0077  
                                ?_checkForOverlapSwitched 0060  
                                     __end_of_macToString 3C22  
                                         __CFG_nLPBOR$OFF 000000  
                                   ??_enc424j600_writeSPI 0062  
                                __end_of_entireMemoryFull 528A  
   __end_of_ethernetController_writeDestinationMACAddress 47B2  
  __size_of_ethernetController_writeDestinationMACAddress 0080  
         ??_ethernetController_writeDestinationMACAddress 007E  
          ?_ethernetController_writeDestinationMACAddress 006F  
           _ethernetController_writeDestinationMACAddress 4732  
                                         ___llmod@divisor 0064  
                     ethernetController_checkDeviceId@err 0072  
                                 __size_of_arp_gratuitous 0244  
                                     arp_background@state 01A8  
                                         ___llmod@counter 0068  
                           ?_ipv4_calculateHeaderChecksum 0060  
                           ethernetController_getRSV@temp 01C1  
                     __end_of_enc424j600_setRXTailPointer 546C  
                             _enc424j600_setRXTailPointer 5442  
                                    printErrorMessage@err 009A  
                                                ??___lmul 0068  
                                          _occupiedMemory 0200  
                                                ??___wmul 0064  
                                     arp_gratuitous@index 00FC  
                                     _ipv4_txFrameRequest 356C  
                             arp_background@ipPreliminary 019C  
                  ethernetController_getDeviceName@string 0062  
                             __size_of_enc424j600_initSPI 001C  
                                             __pdataBANK1 01CB  
                                             __pdataBANK2 02DE  
                                     arp_gratuitous@state 01A9  
                             __size_of_enc424j600_readSPI 006A  
                                           ??_intToString 0088  
                            ??_enc424j600_enableReception 006B  
                                        checkForOverlap@a 0072  
                                        checkForOverlap@b 007B  
                        enc424j600_readSPI@timeoutCounter 0066  
                         ??_enc424j600_clearInterruptFlag 006E  
                                       ??_checkForOverlap 0084  
                                     __end_of_hexToString 3E0E  
                           ??_enc424j600_setRXTailPointer 0070  
                                             ?_stack_init 0001  
                         __size_of_enc424j600_setTXLength 002A  
                                             __pbssCOMRAM 0029  
                        enc424j600_writeSingleByte@opcode 006A  
                                 _ipv4_getIPSourceAddress 56E6  
                                 _ipv4_setIPSourceAddress 56BE  
                ethernetController_updateLinkStatus@state 0080  
                                           __pcstackBANK0 0060  
                                           __pcstackBANK1 0100  
                                           __pcstackBANK3 03A2  
                                             ?_updateTime 0001  
                                       ?_ipAdressToString 0073  
                                   _memory_txFrameRequest 05FE  
           __end_of_ethernetController_newPacketAvailable 570A  
          __size_of_ethernetController_newPacketAvailable 0012  
                  ?_ethernetController_newPacketAvailable 0001  
                 ??_ethernetController_newPacketAvailable 006F  
                   _ethernetController_newPacketAvailable 56F8  
                              arp_parseFromRXBuffer@frame 0074  
                                 ??_arp_parseFromRXBuffer 0094  
                                    ?_ipv4_txFrameRequest 00A7  
                ethernetController_softReset@receivedData 0075  
                                      ??_ipAdressToString 0077  
                                         _arp_setNewEntry 2E5A  
                            __size_of_ipv4_SrcAddrChanged 0014  
                        enc424j600_getInterruptFlags@high 0077  
                                         _arp_sendRequest 446E  
                                 __size_of_mac_setAllZero 0026  
                                       __size_of_arp_init 0074  
                                       __size_of_arp_send 0278  
                                       __size_of_ipv4_cmp 0042  
                               ipv4_txFrameRequest@packet 00A7  
                              buttonHandler@debounceValue 0007  
                                        arp_send@ethFrame 00D1  
                                          _arp_background 2CDA  
                     __size_of_enc424j600_writeSingleByte 0018  
                                           ??_parseNumber 000B  
                                               _main$2404 03C6  
                                        ___lwdiv@dividend 0060  
                                      _sevenSegCharacters 01CB  
              ethernetController_getEtherTypeField@opcode 007E  
                              __size_of_arp_checkForEntry 00B2  
                                               __pintcode 0008  
                            __size_of_memory_txFrameClear 0024  
                                           __pmediumconst 7A08  
                                               _getMillis 571C  
                                               __ptext100 57A0  
                                               __ptext101 56A6  
                                               __ptext110 572E  
                                               __ptext102 550E  
                                               __ptext103 52C2  
                                               __ptext112 5768  
                                               __ptext104 52F8  
                                               __ptext113 3FBE  
                                               __ptext105 4CA2  
                                               __ptext114 47B2  
                                               __ptext106 4BD0  
                                               __ptext115 4F10  
                                               __ptext107 5656  
                                               __ptext116 41E0  
                                               __ptext108 55CC  
                                               __ptext109 4A7E  
                                                ?___awmod 006E  
                                                ?___lldiv 0060  
                                                ?___llmod 0060  
                           __size_of_ipv4_handleNewPacket 01AC  
                                  arp_checkForEntry@index 006B  
                                                ?___lwdiv 0060  
                                               _arpStatus 003C  
                                                ?___lwmod 006E  
     ethernetController_writeEtherTypeFieldToBuffer@field 0071  
                                               _hexToChar 5612  
                                               _arp_table 0300  
                                               _arp_probe 1994  
                                     ipv4_setToAllZero@ip 0060  
                                                ?_mac_cmp 0060  
                               __size_of_UARTTransmitText 0056  
                                               _ipv4_init 57AE  
              ethernetController_getSourceMACAddress@temp 007F  
                    enc424j600_setERXDATAReadPointer@addr 006A  
                                  arp_background@errProbe 015A  
                 enc424j600_setERXDATAReadPointer@lowByte 006D  
                                  ipv4_parseHeader@i_3661 008D  
                                      ipAdressToString@ip 0073  
                                     __end_of_intToString 5360  
                                             _macToString 3B1A  
                                       ??_UARTTransmitInt 009E  
                                   ??_ipv4_txFrameRequest 00A9  
                                        ___lwdiv@quotient 0065  
                                __size_of_ipv4_background 0164  
                                       _entireMemoryEmpty 528A  
                                ??_ethernet_rxGetNewFrame 017A  
                                             ??i2___lwdiv 0005  
                                          __size_of_srand 000E  
                                          __size_of_ultoa 00FE  
                      enc424j600_readPHYRegister@highByte 007E  
                                      ?_entireMemoryEmpty 0001  
                             ?_enc424j600_readPHYRegister 006E  
                     ipv4_streamToTransmissionBuffer@data 00C2  
                                arp_setNewEntry@timestamp 00A4  
                             ??_ethernetController_getRSV 0076  
                           arp_gratuitous@announceCounter 01AA  
                                  __end_of_arp_background 2E5A  
                                          ___wmul@product 0064  
                             ethernet_rxGetNewFrame@frame 0178  
                                __end_of_ipv4_parseHeader 2122  
                                  _enc424j600_setTXLength 5418  
                                                _PIE1bits 000F9D  
                       enc424j600_writeSPI@timeoutCounter 0066  
                                     __size_of_stack_init 000A  
                                     ??_entireMemoryEmpty 0060  
                                                _PIR1bits 000F9E  
                                       entireMemoryFull@i 0060  
                                                i2u822_40 423A  
                                                i2u823_40 423C  
                                                i2u735_40 4F32  
                                                i2u831_40 403A  
                                                i2u832_44 404A  
                                                i2u832_45 4046  
                                                i2u827_44 3FCE  
                                                i2u827_45 3FCA  
                                                i2u865_40 0060  
                                                i2u865_46 0062  
                                                _RCONbits 000FD0  
                                        arp_setNewEntry@i 00B1  
                                     __size_of_updateTime 000E  
                                             _hexToString 3D20  
                                      _mac_setToBroadcast 5582  
                              __end_of_sevenSegmentUpdate 407C  
                                              ?_getMillis 0060  
                                                _UARTInit 572E  
                          ??_ipv4_calculateHeaderChecksum 0062  
                    __end_of_enc424j600_setTXStartAddress 5418  
                   __size_of_enc424j600_setTXStartAddress 002A  
                            _enc424j600_setTXStartAddress 53EE  
                                  arp_handleNewPacket@arp 0158  
                                      UARTTransmitInt@val 009A  
                                              ?_hexToChar 0001  
                                     __end_of_parseNumber 4830  
                __end_of_enc424j600_setERXDATAReadPointer 5252  
               __size_of_enc424j600_setERXDATAReadPointer 003C  
                      ??_enc424j600_setERXDATAReadPointer 006C  
                       ?_enc424j600_setERXDATAReadPointer 006A  
                        _enc424j600_setERXDATAReadPointer 5216  
                                              ?_arp_probe 0134  
                                               arp_init@i 00BC  
                               ??_ipv4_getIPSourceAddress 0064  
                                       ___wmul@multiplier 0060  
                               ??_ipv4_setIPSourceAddress 0064  
                                     ?_mac_setToBroadcast 0060  
                                               arp_send@i 00CD  
                             ??_enc424j600_getPacketCount 006E  
                                              ?_ipv4_init 0001  
                                 arp_gratuitous@timeStart 01A0  
   ethernetController_updateNextPacketPointer@newPointerH 0079  
   ethernetController_updateNextPacketPointer@newPointerL 0078  
                                               main@ipDst 03CC  
                                       ?_sevenSegmentInit 0001  
                                 __end_of_arp_setNewEntry 2FD6  
                                 __end_of_arp_sendRequest 450C  
                               __end_of_entireMemoryEmpty 52C2  
                                  ?_memory_txFrameRequest 0084  
                    ethernetController_checkDeviceId@data 0071  
                             __size_of_printEthernetState 00A2  
                   __end_of_enc424j600_clearInterruptFlag 46AE  
                  __size_of_enc424j600_clearInterruptFlag 008A  
                           _enc424j600_clearInterruptFlag 4624  
                                      ??_sevenSegmentInit 0060  
                     enc424j600_setTXStartAddress@lowByte 0070  
                                               ipv4_cmp@a 0060  
                                               ipv4_cmp@b 0062  
                                               ipv4_cmp@i 0066  
                                    arp_probe@waitingTime 0146  
                                       ___lmul@multiplier 0060  
                                             _INTCON3bits 000FF0  
                                               copy_data0 4342  
                                               copy_data1 4362  
                                               copy_data2 4382  
                                         parseNumber@ones 000C  
                                         parseNumber@tens 000D  
                                       hexToString@number 01AD  
                                  __size_of_mac_isAllZero 0030  
                                   arp_sendReply@senderIP 012C  
                                   arp_sendReply@targetIP 0130  
                                      macToString@address 0081  
                                    ipAdressToString@ones 007B  
                                    ipAdressToString@tens 007F  
                                    ??_mac_setToBroadcast 0062  
                                          _arp_gratuitous 2122  
                                         ?_arp_background 0151  
                __end_of_ethernetController_checkDeviceId 4FFE  
               __size_of_ethernetController_checkDeviceId 004E  
                      ??_ethernetController_checkDeviceId 0071  
                       ?_ethernetController_checkDeviceId 006E  
                        _ethernetController_checkDeviceId 4FB0  
                                      arp_background@link 0156  
                                                __Hrparam 0000  
                                        ipv4_isAllZero@ip 0060  
                        enc424j600_setTXStartAddress@addr 006E  
                                ?_ethernet_txFrameRequest 00A2  
                                                __Lrparam 0000  
                    __end_of_enc424j600_getInterruptFlags 504A  
                   __size_of_enc424j600_getInterruptFlags 004C  
                            _enc424j600_getInterruptFlags 4FFE  
                                      __CFG_BOREN$SBORDIS 000000  
                        ipv4_writeHeaderIntoBuffer@header 0060  
                                      arp_gratuitous@link 0138  
                      __end_of_enc424j600_writeSingleByte 56BE  
                              _enc424j600_writeSingleByte 56A6  
                                  macToString@secondDigit 0094  
                                        __size_of___awmod 0072  
                                  __size_of_arp_sendReply 016C  
                                        __size_of___lldiv 0084  
                                        __size_of___llmod 0068  
                                             _intToString 532E  
                       handleStackBackgroundTasks@errIPv4 018E  
                                        __size_of___lwdiv 0054  
                                        __size_of___lwmod 0044  
                 ethernetController_updateLinkStatus@temp 0082  
                              ??_ipv4_checkHeaderChecksum 009C  
                               _ethernetController_getRSV 4922  
                 __end_of_ethernetController_setLEDConfig 459A  
                __size_of_ethernetController_setLEDConfig 008E  
                       ??_ethernetController_setLEDConfig 006F  
                        ?_ethernetController_setLEDConfig 006E  
                         _ethernetController_setLEDConfig 450C  
            ethernetController_getEtherTypeField@highByte 0080  
                                              _ANSELBbits 000F5C  
                                   __end_of_buttonHandler 428C  
                         enc424j600_getInterruptFlags@low 0076  
                                        __size_of_mac_cmp 0042  
       ethernetController_streamFromRXBuffer@startAddress 006F  
                                             _buttonState 01CA  
                     enc424j600_setRXTailPointer@highByte 0071  
                                arp_sendRequest@senderMAC 0108  
                                  memory_txFrameRequest@i 0096  
                          __size_of_arp_getEntryFromTable 002E  
                                arp_sendRequest@targetMAC 010E  
                                         ___lwdiv@divisor 0062  
                           __end_of_arp_getEntryFromTable 53EE  
                                         ___lwdiv@counter 0064  
                                       mac_setAllZero@mac 0060  
                                     _ipPreliminarySource 0198  
                                                __ptext10 2366  
                                                __ptext11 56BE  
                                                __ptext20 3D20  
                                                __ptext12 2580  
                                                __ptext21 5612  
                                                __ptext13 53C0  
                                                __ptext30 574C  
                                                __ptext22 504A  
                                                __ptext14 32B0  
                                                __ptext31 578C  
                                                __ptext23 4830  
                                                __ptext15 00EC  
                                                __ptext40 3C22  
                                                __ptext32 3144  
                                                __ptext24 4922  
                                                __ptext16 2B2E  
                                                __ptext41 4C3A  
                                                __ptext33 56E6  
                                                __ptext25 136C  
                                                __ptext17 1ED8  
                                                __ptext50 575A  
                                                __ptext42 46AE  
                                                __ptext34 0F72  
                                                __ptext26 4AF0  
                                                __ptext18 3EF6  
                                                __ptext51 4624  
                                                __ptext43 459A  
                                                __ptext35 511A  
                                                __ptext27 5092  
                                                __ptext19 1688  
                                                __ptext60 1994  
                                                __ptext52 4996  
                                                __ptext44 37D0  
                                                __ptext36 4D06  
                                                __ptext28 2980  
                                                __ptext61 4DBC  
                                                __ptext53 2E5A  
                                                __ptext45 450C  
                                                __ptext37 5634  
                                                __ptext29 519E  
                                                __ptext70 4A0A  
                                                __ptext62 4D64  
                                                __ptext54 5360  
                                                __ptext46 3414  
                                                __ptext38 532E  
                                                __ptext71 1C60  
                                                __ptext63 5536  
                                                __ptext55 3B1A  
                                                __ptext47 4FFE  
                                                __ptext39 4E68  
                                                __ptext80 4F62  
                                                __ptext72 5582  
                                                __ptext64 2122  
                                                __ptext56 5390  
                                                __ptext48 56F8  
                                                __ptext81 4732  
                                                __ptext73 3E0E  
                                                __ptext65 2792  
                                                __ptext57 2CDA  
                                                __ptext49 568C  
                                                __ptext90 412E  
                                                __ptext82 48AA  
                                                __ptext74 05FE  
                                                __ptext66 50D6  
                                                __ptext58 570A  
                                                __ptext91 515C  
                                                __ptext83 51DA  
                                                __ptext75 5252  
                                                __ptext67 4EBC  
                                                __ptext59 56D2  
                                                __ptext92 571C  
                                                __ptext84 54E6  
                                                __ptext76 528A  
                                                __ptext68 446E  
                                                __ptext93 4E12  
                                                __ptext85 55A8  
                                                __ptext77 38F2  
                                                __ptext69 555C  
                                                __ptext94 43CE  
                                                __ptext86 53EE  
                                                __ptext78 407C  
                                                __ptext95 3A10  
                                                __ptext87 5418  
                                                __ptext79 54BE  
                                                __ptext96 4FB0  
                                                __ptext88 4B60  
                                                __ptext97 5442  
                                                __ptext89 5216  
                                                __ptext98 546C  
                                                __ptext99 5796  
                                            _SSP1CON1bits 000FC6  
                   enc424j600_enableAutoMACInsertion@temp 006E  
                                                _arp_init 4996  
                                                _arp_send 1C60  
                                      ipv4_setToAllZero@i 0062  
                         __size_of_ethernet_rxGetNewFrame 0512  
                                          _mac_setAllZero 555C  
                                  __end_of_arp_gratuitous 2366  
                                                _ipv4_cmp 515C  
                                                _ipSource 01A4  
                                             _OSCCON2bits 000FD2  
                                       ipAdressToString@i 0088  
                                      _ipProtocolToString 504A  
                         __end_of_ipv4_getIPSourceAddress 56F8  
                enc424j600_setGPDATAWritePointer@highByte 006E  
                         __end_of_ipv4_setIPSourceAddress 56D2  
              __end_of_ipv4_getPreliminaryIPSourceAddress 571C  
             __size_of_ipv4_getPreliminaryIPSourceAddress 0012  
                    ??_ipv4_getPreliminaryIPSourceAddress 0064  
                     ?_ipv4_getPreliminaryIPSourceAddress 0060  
                      _ipv4_getPreliminaryIPSourceAddress 570A  
                                           __size_of_main 0498  
                                           __size_of_rand 0056  
                                           __size_of_ltoa 0054  
                               _enc424j600_getPacketCount 568C  
                                       ??_ipv4_background 009D  
                                       ?_entireMemoryFull 0001  
                            __size_of_arp_handleNewPacket 01AE  
                 __end_of_enc424j600_getNextPacketPointer 5796  
                __size_of_enc424j600_getNextPacketPointer 000A  
                       ??_enc424j600_getNextPacketPointer 0062  
                        ?_enc424j600_getNextPacketPointer 0060  
                         _enc424j600_getNextPacketPointer 578C  
                 __end_of_enc424j600_setNextPacketPointer 57A0  
                __size_of_enc424j600_setNextPacketPointer 000A  
                       ??_enc424j600_setNextPacketPointer 0062  
                        ?_enc424j600_setNextPacketPointer 0060  
                         _enc424j600_setNextPacketPointer 5796  
     ethernetController_writeDestinationMACAddress@opcode 0084  
                        __size_of_ethernetController_init 00A0  
                                         _checkForOverlap 38F2  
                                     ?_ipProtocolToString 0060  
                                      ??_entireMemoryFull 0060  
                                             _parseNumber 47B2  
                                             ??_getMillis 0064  
                                                int$flags 0050  
                                 buttonHandler@resetValue 0003  
                                                mac_cmp@a 0060  
                        __size_of_checkForOverlapSwitched 00B2  
                                                mac_cmp@b 0062  
                                                mac_cmp@i 0066  
            enc424j600_readControlRegisterUnbanked@opcode 006D  
                                           _mac_isAllZero 5360  
                   ipv4_streamToTransmissionBuffer@packet 007E  
                                     _ipv4_SrcAddrChanged 56D2  
                                            _SSP1STATbits 000FC7  
                                             ??_hexToChar 0060  
                              ethernet_txFrameRequest@err 00A4  
                                             ??_arp_probe 0139  
                                 __size_of_ipv4_isAllZero 0030  
                               ipv4_setIPSourceAddress@ip 0060  
                               ethernet_rxGetNewFrame@err 0182  
                                        _UARTTransmitText 4E12  
                                             ??_ipv4_init 0060  
                     __size_of_enc424j600_readPHYRegister 0122  
                                            ??_stack_init 00BD  
                                    arp_sendReply@request 0100  
                                 arp_sendRequest@ipSender 0100  
                                 arp_sendRequest@ipTarget 0104  
                                              _INTCONbits 000FF2  
                                    ??_ipProtocolToString 0062  
                                        ?_arp_setNewEntry 009A  
                                  ipv4_sendFrame@ipPacket 0134  
                                       arp_background@err 01C7  
                              __size_of_entireMemoryEmpty 0038  
                                            ??_updateTime 0001  
   ethernetController_writeEtherTypeFieldToBuffer@ethtype 006F  
                                        ?_arp_sendRequest 0100  
   ethernetController_writeEtherTypeFieldToBuffer@lowByte 007A  
                                       arp_gratuitous@err 00FD  
                                  __end_of_mac_setAllZero 5582  
                                               ultoa@base 0073  
                                     _memory_txFrameClear 55A8  
                             __end_of_enc424j600_writeSPI 4D06  
                        handleStackBackgroundTasks@errArp 0189  
     ipv4_streamToTransmissionBuffer@ethernetPacketLength 00C0  
                                           _arp_sendReply 3144  
                                                intlevel2 0000  
                                    ?_ipv4_SrcAddrChanged 0060  
                          __size_of_arp_parseFromRXBuffer 03FA  
                                         ?_arp_gratuitous 0134  
                           __end_of_arp_parseFromRXBuffer 136C  
                                                ltoa@base 0080  
                                        ___lwmod@dividend 006E  
                                        ___lldiv@dividend 0060  
             ethernetController_getEtherTypeField@lowByte 007F  
      ethernetController_writeDestinationMACAddress@i_638 0085  
               ethernetController_streamFromRXBuffer@temp 0073  
                          enc424j600_readPHYRegister@addr 0076  
                                              _RCSTA1bits 000FAB  
                          enc424j600_readPHYRegister@data 006E  
                                        macToString@F5947 02DE  
                          enc424j600_readPHYRegister@temp 007F  
      ethernetController_writeDestinationMACAddress@field 0075  
                               arp_setNewEntry@maxSeconds 00AC  
                                              _OSCCONbits 000FD3  
                                 __size_of_ipv4_sendFrame 0212  
                               __size_of_ipAdressToString 01EE  
                                      __end_of_stack_init 578C  
                                            macToString@i 0095  
                                            macToString@j 0097  
                enc424j600_readPHYRegister@timeoutCounter 0079  
                              __end_of_enc424j600_initSPI 5672  
                              __end_of_enc424j600_readSPI 4C3A  
                                    ?_memory_txFrameClear 0001  
                                      arp_probe@timeStart 0142  
                                          ?_mac_isAllZero 0060  
                                  _ethernet_rxGetNewFrame 00EC  
                                      __end_of_updateTime 5776  
                                    __CFG_CPUDIV$NOCLKDIV 000000  
                                       arp_probe@ipSender 014A  
                                       arp_probe@ipTarget 0134  
                                         _UARTTransmitInt 5634  
                                      arp_setNewEntry@mac 009A  
                      ethernetController_sendPacket@field 0072  
            ethernetController_getSourceMACAddress@opcode 0078  
    ethernetController_writeEtherTypeFieldToBuffer@opcode 007C  
            __end_of_enc424j600_updateReceiveStatusVector 1688  
           __size_of_enc424j600_updateReceiveStatusVector 031C  
                  ??_enc424j600_updateReceiveStatusVector 0065  
                   ?_enc424j600_updateReceiveStatusVector 0060  
                    _enc424j600_updateReceiveStatusVector 136C  
                                   mac_setToBroadcast@mac 0060  
                                                ultoa@buf 006D  
                                                ultoa@val 006F  
                               ipv4_handleNewPacket@frame 00B5  
                                   ipv4_sendFrame@oldTime 0194  
                __end_of_enc424j600_setGPDATAWritePointer 5216  
               __size_of_enc424j600_setGPDATAWritePointer 003C  
                      ??_enc424j600_setGPDATAWritePointer 006C  
                       ?_enc424j600_setGPDATAWritePointer 006A  
                        _enc424j600_setGPDATAWritePointer 51DA  
                                        ___lldiv@quotient 0068  
                                         ___lwmod@divisor 0070  
                                  arp_sendRequest@request 0114  
                      enc424j600_setNextPacketPointer@ptr 0060  
                                         ___lwmod@counter 0072  
                            ??_ipv4_writeHeaderIntoBuffer 0079  
                                            ?_macToString 007A  
              enc424j600_readControlRegisterUnbanked@addr 006C  
              enc424j600_readControlRegisterUnbanked@data 006A  
                         ethernetController_getRSV@opcode 0076  
                    __end_of_ethernetController_softReset 3B1A  
                   __size_of_ethernetController_softReset 010A  
                            _ethernetController_softReset 3A10  
                                         ?_mac_setAllZero 0060  
                            __end_of_ipv4_handleNewPacket 2CDA  
             ethernetController_getSourceMACAddress@field 006F  
                                      arp_sendReply@reply 0138  
                                          ?_arp_sendReply 0100  
                                   ??_ipv4_SrcAddrChanged 0062  
                                arp_handleNewPacket@frame 00FC  
                                      __CFG_FOSC$INTOSCIO 000000  
                                 ?_enc424j600_setTXLength 006E  
                                 __end_of_checkForOverlap 3A10  
           __end_ofethernetController_getDeviceName@F5999 7A14  
                   ethernetController_getDeviceName@F5999 7A09  
                          ?_ethernetController_dropPacket 0072  
                                       ?_ipv4_parseHeader 0074  
                                 _sevenSegmentUpdate$2495 0013  
                                      ??_ipv4_parseHeader 008B  
                                   ??_memory_txFrameClear 0060  
