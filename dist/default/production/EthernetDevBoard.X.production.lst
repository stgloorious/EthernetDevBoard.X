

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Feb 28 23:22:06 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F25K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    20                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    21                           	psect	text0,global,reloc=2,class=CODE,delta=1
    22                           	psect	text1,global,reloc=2,class=CODE,delta=1
    23                           	psect	text2,global,reloc=2,class=CODE,delta=1
    24                           	psect	text3,global,reloc=2,class=CODE,delta=1
    25                           	psect	text4,global,reloc=2,class=CODE,delta=1
    26                           	psect	text5,global,reloc=2,class=CODE,delta=1
    27                           	psect	text6,global,reloc=2,class=CODE,delta=1
    28                           	psect	text7,global,reloc=2,class=CODE,delta=1
    29                           	psect	text8,global,reloc=2,class=CODE,delta=1
    30                           	psect	text9,global,reloc=2,class=CODE,delta=1
    31                           	psect	text10,global,reloc=2,class=CODE,delta=1
    32                           	psect	text11,global,reloc=2,class=CODE,delta=1
    33                           	psect	text12,global,reloc=2,class=CODE,delta=1
    34                           	psect	text13,global,reloc=2,class=CODE,delta=1
    35                           	psect	text14,global,reloc=2,class=CODE,delta=1
    36                           	psect	text15,global,reloc=2,class=CODE,delta=1
    37                           	psect	text16,global,reloc=2,class=CODE,delta=1
    38                           	psect	text17,global,reloc=2,class=CODE,delta=1
    39                           	psect	text18,global,reloc=2,class=CODE,delta=1
    40                           	psect	text19,global,reloc=2,class=CODE,delta=1
    41                           	psect	text20,global,reloc=2,class=CODE,delta=1
    42                           	psect	text21,global,reloc=2,class=CODE,delta=1
    43                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text24,global,reloc=2,class=CODE,delta=1
    46                           	psect	text25,global,reloc=2,class=CODE,delta=1
    47                           	psect	text26,global,reloc=2,class=CODE,delta=1
    48                           	psect	text27,global,reloc=2,class=CODE,delta=1
    49                           	psect	text28,global,reloc=2,class=CODE,delta=1
    50                           	psect	text29,global,reloc=2,class=CODE,delta=1
    51                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    53                           	psect	text32,global,reloc=2,class=CODE,delta=1
    54                           	psect	text33,global,reloc=2,class=CODE,delta=1
    55                           	psect	text34,global,reloc=2,class=CODE,delta=1
    56                           	psect	text35,global,reloc=2,class=CODE,delta=1
    57                           	psect	text36,global,reloc=2,class=CODE,delta=1
    58                           	psect	text37,global,reloc=2,class=CODE,delta=1
    59                           	psect	text38,global,reloc=2,class=CODE,delta=1
    60                           	psect	text39,global,reloc=2,class=CODE,delta=1
    61                           	psect	text40,global,reloc=2,class=CODE,delta=1
    62                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text42,global,reloc=2,class=CODE,delta=1
    64                           	psect	text43,global,reloc=2,class=CODE,delta=1
    65                           	psect	text44,global,reloc=2,class=CODE,delta=1
    66                           	psect	text45,global,reloc=2,class=CODE,delta=1
    67                           	psect	text46,global,reloc=2,class=CODE,delta=1
    68                           	psect	text47,global,reloc=2,class=CODE,delta=1
    69                           	psect	text48,global,reloc=2,class=CODE,delta=1
    70                           	psect	text49,global,reloc=2,class=CODE,delta=1
    71                           	psect	text50,global,reloc=2,class=CODE,delta=1
    72                           	psect	text51,global,reloc=2,class=CODE,delta=1
    73                           	psect	text52,global,reloc=2,class=CODE,delta=1
    74                           	psect	text53,global,reloc=2,class=CODE,delta=1
    75                           	psect	text54,global,reloc=2,class=CODE,delta=1
    76                           	psect	text55,global,reloc=2,class=CODE,delta=1
    77                           	psect	text56,global,reloc=2,class=CODE,delta=1
    78                           	psect	text57,global,reloc=2,class=CODE,delta=1
    79                           	psect	text58,global,reloc=2,class=CODE,delta=1
    80                           	psect	text59,global,reloc=2,class=CODE,delta=1
    81                           	psect	text60,global,reloc=2,class=CODE,delta=1
    82                           	psect	text61,global,reloc=2,class=CODE,delta=1
    83                           	psect	text62,global,reloc=2,class=CODE,delta=1
    84                           	psect	text63,global,reloc=2,class=CODE,delta=1
    85                           	psect	text64,global,reloc=2,class=CODE,delta=1
    86                           	psect	text65,global,reloc=2,class=CODE,delta=1
    87                           	psect	text66,global,reloc=2,class=CODE,delta=1
    88                           	psect	text67,global,reloc=2,class=CODE,delta=1
    89                           	psect	text68,global,reloc=2,class=CODE,delta=1
    90                           	psect	text69,global,reloc=2,class=CODE,delta=1
    91                           	psect	text70,global,reloc=2,class=CODE,delta=1
    92                           	psect	text71,global,reloc=2,class=CODE,delta=1
    93                           	psect	text72,global,reloc=2,class=CODE,delta=1
    94                           	psect	text73,global,reloc=2,class=CODE,delta=1
    95                           	psect	text74,global,reloc=2,class=CODE,delta=1
    96                           	psect	text75,global,reloc=2,class=CODE,delta=1
    97                           	psect	text76,global,reloc=2,class=CODE,delta=1
    98                           	psect	text77,global,reloc=2,class=CODE,delta=1
    99                           	psect	text78,global,reloc=2,class=CODE,delta=1
   100                           	psect	text79,global,reloc=2,class=CODE,delta=1
   101                           	psect	text80,global,reloc=2,class=CODE,delta=1
   102                           	psect	text81,global,reloc=2,class=CODE,delta=1
   103                           	psect	text82,global,reloc=2,class=CODE,delta=1
   104                           	psect	text83,global,reloc=2,class=CODE,delta=1
   105                           	psect	text84,global,reloc=2,class=CODE,delta=1
   106                           	psect	text85,global,reloc=2,class=CODE,delta=1
   107                           	psect	text86,global,reloc=2,class=CODE,delta=1
   108                           	psect	text87,global,reloc=2,class=CODE,delta=1
   109                           	psect	text88,global,reloc=2,class=CODE,delta=1
   110                           	psect	text89,global,reloc=2,class=CODE,delta=1
   111                           	psect	text90,global,reloc=2,class=CODE,delta=1
   112                           	psect	text91,global,reloc=2,class=CODE,delta=1
   113                           	psect	text92,global,reloc=2,class=CODE,delta=1
   114                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   115                           	psect	text94,global,reloc=2,class=CODE,delta=1
   116                           	psect	text95,global,reloc=2,class=CODE,delta=1
   117                           	psect	text96,global,reloc=2,class=CODE,delta=1
   118                           	psect	text97,global,reloc=2,class=CODE,delta=1
   119                           	psect	text98,global,reloc=2,class=CODE,delta=1
   120                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   121                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   122                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   123  0000                     
   124                           ; Version 1.45
   125                           ; Generated 16/11/2017 GMT
   126                           ; 
   127                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   128                           ; All rights reserved.
   129                           ; 
   130                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   131                           ; 
   132                           ; Redistribution and use in source and binary forms, with or without modification, are
   133                           ; permitted provided that the following conditions are met:
   134                           ; 
   135                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   136                           ;        conditions and the following disclaimer.
   137                           ; 
   138                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   139                           ;        of conditions and the following disclaimer in the documentation and/or other
   140                           ;        materials provided with the distribution.
   141                           ; 
   142                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   143                           ;        software without specific prior written permission.
   144                           ; 
   145                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   146                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   147                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   148                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   149                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   150                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   151                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   152                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   153                           ; 
   154                           ; 
   155                           ; Code-generator required, PIC18F25K50 Definitions
   156                           ; 
   157                           ; SFR Addresses
   158  0000                     
   159                           	psect	idataCOMRAM
   160  0046EE                     __pidataCOMRAM:
   161                           	opt stack 0
   162                           
   163                           ;initializer for ethernetController_softReset@F5827
   164  0046EE  12                 	db	18
   165  0046EF  34                 	db	52
   166                           
   167                           	psect	idataBANK1
   168  0045CA                     __pidataBANK1:
   169                           	opt stack 0
   170                           
   171                           ;initializer for _sevenSegCharacters
   172  0045CA  3F                 	db	63
   173  0045CB  06                 	db	6
   174  0045CC  5B                 	db	91
   175  0045CD  4F                 	db	79
   176  0045CE  66                 	db	102
   177  0045CF  6D                 	db	109
   178  0045D0  7D                 	db	125
   179  0045D1  07                 	db	7
   180  0045D2  7F                 	db	127
   181  0045D3  6F                 	db	111
   182  0045D4  00                 	db	0
   183  0045D5  40                 	db	64
   184                           
   185                           ;initializer for ipAdressToString@address
   186  0045D6  3F                 	db	63
   187  0045D7  3F                 	db	63
   188  0045D8  3F                 	db	63
   189  0045D9  2E                 	db	46
   190  0045DA  3F                 	db	63
   191  0045DB  3F                 	db	63
   192  0045DC  3F                 	db	63
   193  0045DD  2E                 	db	46
   194  0045DE  3F                 	db	63
   195  0045DF  3F                 	db	63
   196  0045E0  3F                 	db	63
   197  0045E1  2E                 	db	46
   198  0045E2  3F                 	db	63
   199  0045E3  3F                 	db	63
   200  0045E4  3F                 	db	63
   201  0045E5  00                 	db	0
   202                           
   203                           	psect	idataBANK2
   204  00466A                     __pidataBANK2:
   205                           	opt stack 0
   206                           
   207                           ;initializer for macToString@F5794
   208  00466A  3F                 	db	63
   209  00466B  3F                 	db	63
   210  00466C  3A                 	db	58
   211  00466D  3F                 	db	63
   212  00466E  3F                 	db	63
   213  00466F  3A                 	db	58
   214  004670  3F                 	db	63
   215  004671  3F                 	db	63
   216  004672  3A                 	db	58
   217  004673  3F                 	db	63
   218  004674  3F                 	db	63
   219  004675  3A                 	db	58
   220  004676  3F                 	db	63
   221  004677  3F                 	db	63
   222  004678  3A                 	db	58
   223  004679  3F                 	db	63
   224  00467A  3F                 	db	63
   225  00467B  00                 	db	0
   226                           
   227                           	psect	mediumconst
   228  007C84                     __pmediumconst:
   229                           	opt stack 0
   230  007C84  00                 	db	0
   231  007C85                     ethernetController_getDeviceName@F5839:
   232                           	opt stack 0
   233  007C85  45                 	db	69
   234  007C86  4E                 	db	78
   235  007C87  43                 	db	67
   236  007C88  34                 	db	52
   237  007C89  32                 	db	50
   238  007C8A  34                 	db	52
   239  007C8B  4A                 	db	74
   240  007C8C  36                 	db	54
   241  007C8D  30                 	db	48
   242  007C8E  30                 	db	48
   243  007C8F  00                 	db	0
   244  007C90                     __end_ofethernetController_getDeviceName@F5839:
   245                           	opt stack 0
   246  0000                     _ANSELC	set	3933
   247  0000                     _ANSELA	set	3931
   248  0000                     _ANSELB	set	3932
   249  0000                     _ANSELBbits	set	3932
   250  0000                     _TXREG1	set	4013
   251  0000                     _SPBRG	set	4015
   252  0000                     _RCSTA1bits	set	4011
   253  0000                     _TXSTA1bits	set	4012
   254  0000                     _PORTA	set	3968
   255  0000                     _TRISA	set	3986
   256  0000                     _TRISC	set	3988
   257  0000                     _PORTC	set	3970
   258  0000                     _PORTB	set	3969
   259  0000                     _TRISB	set	3987
   260  0000                     _T0CONbits	set	4053
   261  0000                     _INTCON3bits	set	4080
   262  0000                     _INTCONbits	set	4082
   263  0000                     _OSCCON2bits	set	4050
   264  0000                     _OSCCONbits	set	4051
   265  0000                     _SSP1BUF	set	4041
   266  0000                     _TRISBbits	set	3987
   267  0000                     _SSP1STATbits	set	4039
   268  0000                     _SSP1CON1bits	set	4038
   269  0000                     _PORTBbits	set	3969
   270  0000                     _TRMT	set	32097
   271  0000                     _RCIF	set	31989
   272  0000                     _RCIE	set	31981
   273  0000                     _RCIP	set	31997
   274  007C90                     STR_48:
   275  007C90  45                 	db	69	;'E'
   276  007C91  74                 	db	116	;'t'
   277  007C92  68                 	db	104	;'h'
   278  007C93  65                 	db	101	;'e'
   279  007C94  72                 	db	114	;'r'
   280  007C95  6E                 	db	110	;'n'
   281  007C96  65                 	db	101	;'e'
   282  007C97  74                 	db	116	;'t'
   283  007C98  20                 	db	32
   284  007C99  63                 	db	99	;'c'
   285  007C9A  6F                 	db	111	;'o'
   286  007C9B  6E                 	db	110	;'n'
   287  007C9C  74                 	db	116	;'t'
   288  007C9D  72                 	db	114	;'r'
   289  007C9E  6F                 	db	111	;'o'
   290  007C9F  6C                 	db	108	;'l'
   291  007CA0  6C                 	db	108	;'l'
   292  007CA1  65                 	db	101	;'e'
   293  007CA2  72                 	db	114	;'r'
   294  007CA3  20                 	db	32
   295  007CA4  68                 	db	104	;'h'
   296  007CA5  61                 	db	97	;'a'
   297  007CA6  73                 	db	115	;'s'
   298  007CA7  20                 	db	32
   299  007CA8  72                 	db	114	;'r'
   300  007CA9  65                 	db	101	;'e'
   301  007CAA  74                 	db	116	;'t'
   302  007CAB  75                 	db	117	;'u'
   303  007CAC  72                 	db	114	;'r'
   304  007CAD  6E                 	db	110	;'n'
   305  007CAE  65                 	db	101	;'e'
   306  007CAF  64                 	db	100	;'d'
   307  007CB0  20                 	db	32
   308  007CB1  61                 	db	97	;'a'
   309  007CB2  6E                 	db	110	;'n'
   310  007CB3  20                 	db	32
   311  007CB4  75                 	db	117	;'u'
   312  007CB5  6E                 	db	110	;'n'
   313  007CB6  6B                 	db	107	;'k'
   314  007CB7  6E                 	db	110	;'n'
   315  007CB8  6F                 	db	111	;'o'
   316  007CB9  77                 	db	119	;'w'
   317  007CBA  6E                 	db	110	;'n'
   318  007CBB  20                 	db	32
   319  007CBC  64                 	db	100	;'d'
   320  007CBD  65                 	db	101	;'e'
   321  007CBE  76                 	db	118	;'v'
   322  007CBF  69                 	db	105	;'i'
   323  007CC0  63                 	db	99	;'c'
   324  007CC1  65                 	db	101	;'e'
   325  007CC2  20                 	db	32
   326  007CC3  49                 	db	73	;'I'
   327  007CC4  44                 	db	68	;'D'
   328  007CC5  2E                 	db	46
   329  007CC6  00                 	db	0
   330  007CC7                     STR_34:
   331  007CC7  2D                 	db	45
   332  007CC8  2D                 	db	45
   333  007CC9  2D                 	db	45
   334  007CCA  2D                 	db	45
   335  007CCB  2D                 	db	45
   336  007CCC  2D                 	db	45
   337  007CCD  2D                 	db	45
   338  007CCE  2D                 	db	45
   339  007CCF  2D                 	db	45
   340  007CD0  2D                 	db	45
   341  007CD1  2D                 	db	45
   342  007CD2  2D                 	db	45
   343  007CD3  2D                 	db	45
   344  007CD4  2D                 	db	45
   345  007CD5  2D                 	db	45
   346  007CD6  2D                 	db	45
   347  007CD7  2D                 	db	45
   348  007CD8  2D                 	db	45
   349  007CD9  2D                 	db	45
   350  007CDA  2D                 	db	45
   351  007CDB  2D                 	db	45
   352  007CDC  2D                 	db	45
   353  007CDD  2D                 	db	45
   354  007CDE  2D                 	db	45
   355  007CDF  2D                 	db	45
   356  007CE0  2D                 	db	45
   357  007CE1  2D                 	db	45
   358  007CE2  2D                 	db	45
   359  007CE3  2D                 	db	45
   360  007CE4  2D                 	db	45
   361  007CE5  2D                 	db	45
   362  007CE6  2D                 	db	45
   363  007CE7  2D                 	db	45
   364  007CE8  2D                 	db	45
   365  007CE9  2D                 	db	45
   366  007CEA  2D                 	db	45
   367  007CEB  2D                 	db	45
   368  007CEC  2D                 	db	45
   369  007CED  2D                 	db	45
   370  007CEE  2D                 	db	45
   371  007CEF  2D                 	db	45
   372  007CF0  2D                 	db	45
   373  007CF1  2D                 	db	45
   374  007CF2  2D                 	db	45
   375  007CF3  2D                 	db	45
   376  007CF4  2D                 	db	45
   377  007CF5  2D                 	db	45
   378  007CF6  2D                 	db	45
   379  007CF7  0A                 	db	10
   380  007CF8  0D                 	db	13
   381  007CF9  00                 	db	0
   382  007CFA                     STR_55:
   383  007CFA  5B                 	db	91	;'['
   384  007CFB  49                 	db	73	;'I'
   385  007CFC  6E                 	db	110	;'n'
   386  007CFD  76                 	db	118	;'v'
   387  007CFE  61                 	db	97	;'a'
   388  007CFF  6C                 	db	108	;'l'
   389  007D00  69                 	db	105	;'i'
   390  007D01  64                 	db	100	;'d'
   391  007D02  20                 	db	32
   392  007D03  41                 	db	65	;'A'
   393  007D04  52                 	db	82	;'R'
   394  007D05  50                 	db	80	;'P'
   395  007D06  20                 	db	32
   396  007D07  4D                 	db	77	;'M'
   397  007D08  65                 	db	101	;'e'
   398  007D09  73                 	db	115	;'s'
   399  007D0A  73                 	db	115	;'s'
   400  007D0B  61                 	db	97	;'a'
   401  007D0C  67                 	db	103	;'g'
   402  007D0D  65                 	db	101	;'e'
   403  007D0E  20                 	db	32
   404  007D0F  77                 	db	119	;'w'
   405  007D10  61                 	db	97	;'a'
   406  007D11  73                 	db	115	;'s'
   407  007D12  20                 	db	32
   408  007D13  64                 	db	100	;'d'
   409  007D14  69                 	db	105	;'i'
   410  007D15  73                 	db	115	;'s'
   411  007D16  63                 	db	99	;'c'
   412  007D17  61                 	db	97	;'a'
   413  007D18  72                 	db	114	;'r'
   414  007D19  64                 	db	100	;'d'
   415  007D1A  65                 	db	101	;'e'
   416  007D1B  64                 	db	100	;'d'
   417  007D1C  2E                 	db	46
   418  007D1D  5D                 	db	93	;']'
   419  007D1E  0D                 	db	13
   420  007D1F  0A                 	db	10
   421  007D20  00                 	db	0
   422  007D21                     STR_27:
   423  007D21  49                 	db	73	;'I'
   424  007D22  6E                 	db	110	;'n'
   425  007D23  69                 	db	105	;'i'
   426  007D24  74                 	db	116	;'t'
   427  007D25  69                 	db	105	;'i'
   428  007D26  61                 	db	97	;'a'
   429  007D27  6C                 	db	108	;'l'
   430  007D28  69                 	db	105	;'i'
   431  007D29  73                 	db	115	;'s'
   432  007D2A  69                 	db	105	;'i'
   433  007D2B  6E                 	db	110	;'n'
   434  007D2C  67                 	db	103	;'g'
   435  007D2D  20                 	db	32
   436  007D2E  45                 	db	69	;'E'
   437  007D2F  74                 	db	116	;'t'
   438  007D30  68                 	db	104	;'h'
   439  007D31  65                 	db	101	;'e'
   440  007D32  72                 	db	114	;'r'
   441  007D33  6E                 	db	110	;'n'
   442  007D34  65                 	db	101	;'e'
   443  007D35  74                 	db	116	;'t'
   444  007D36  20                 	db	32
   445  007D37  43                 	db	67	;'C'
   446  007D38  6F                 	db	111	;'o'
   447  007D39  6E                 	db	110	;'n'
   448  007D3A  74                 	db	116	;'t'
   449  007D3B  72                 	db	114	;'r'
   450  007D3C  6F                 	db	111	;'o'
   451  007D3D  6C                 	db	108	;'l'
   452  007D3E  6C                 	db	108	;'l'
   453  007D3F  65                 	db	101	;'e'
   454  007D40  72                 	db	114	;'r'
   455  007D41  2E                 	db	46
   456  007D42  2E                 	db	46
   457  007D43  2E                 	db	46
   458  007D44  0A                 	db	10
   459  007D45  0D                 	db	13
   460  007D46  00                 	db	0
   461  007D47                     STR_47:
   462  007D47  45                 	db	69	;'E'
   463  007D48  74                 	db	116	;'t'
   464  007D49  68                 	db	104	;'h'
   465  007D4A  65                 	db	101	;'e'
   466  007D4B  72                 	db	114	;'r'
   467  007D4C  6E                 	db	110	;'n'
   468  007D4D  65                 	db	101	;'e'
   469  007D4E  74                 	db	116	;'t'
   470  007D4F  20                 	db	32
   471  007D50  63                 	db	99	;'c'
   472  007D51  6F                 	db	111	;'o'
   473  007D52  6E                 	db	110	;'n'
   474  007D53  74                 	db	116	;'t'
   475  007D54  72                 	db	114	;'r'
   476  007D55  6F                 	db	111	;'o'
   477  007D56  6C                 	db	108	;'l'
   478  007D57  6C                 	db	108	;'l'
   479  007D58  65                 	db	101	;'e'
   480  007D59  72                 	db	114	;'r'
   481  007D5A  20                 	db	32
   482  007D5B  69                 	db	105	;'i'
   483  007D5C  73                 	db	115	;'s'
   484  007D5D  20                 	db	32
   485  007D5E  75                 	db	117	;'u'
   486  007D5F  6E                 	db	110	;'n'
   487  007D60  72                 	db	114	;'r'
   488  007D61  65                 	db	101	;'e'
   489  007D62  73                 	db	115	;'s'
   490  007D63  70                 	db	112	;'p'
   491  007D64  6F                 	db	111	;'o'
   492  007D65  6E                 	db	110	;'n'
   493  007D66  73                 	db	115	;'s'
   494  007D67  69                 	db	105	;'i'
   495  007D68  76                 	db	118	;'v'
   496  007D69  65                 	db	101	;'e'
   497  007D6A  2E                 	db	46
   498  007D6B  00                 	db	0
   499  007D6C                     STR_43:
   500  007D6C  20                 	db	32
   501  007D6D  45                 	db	69	;'E'
   502  007D6E  54                 	db	84	;'T'
   503  007D6F  48                 	db	72	;'H'
   504  007D70  45                 	db	69	;'E'
   505  007D71  52                 	db	82	;'R'
   506  007D72  4E                 	db	78	;'N'
   507  007D73  45                 	db	69	;'E'
   508  007D74  54                 	db	84	;'T'
   509  007D75  20                 	db	32
   510  007D76  43                 	db	67	;'C'
   511  007D77  4F                 	db	79	;'O'
   512  007D78  4E                 	db	78	;'N'
   513  007D79  54                 	db	84	;'T'
   514  007D7A  52                 	db	82	;'R'
   515  007D7B  4F                 	db	79	;'O'
   516  007D7C  4C                 	db	76	;'L'
   517  007D7D  4C                 	db	76	;'L'
   518  007D7E  45                 	db	69	;'E'
   519  007D7F  52                 	db	82	;'R'
   520  007D80  20                 	db	32
   521  007D81  4D                 	db	77	;'M'
   522  007D82  4F                 	db	79	;'O'
   523  007D83  44                 	db	68	;'D'
   524  007D84  55                 	db	85	;'U'
   525  007D85  4C                 	db	76	;'L'
   526  007D86  45                 	db	69	;'E'
   527  007D87  3A                 	db	58	;':'
   528  007D88  20                 	db	32
   529  007D89  00                 	db	0
   530  007D8A                     STR_49:
   531  007D8A  41                 	db	65	;'A'
   532  007D8B  6E                 	db	110	;'n'
   533  007D8C  20                 	db	32
   534  007D8D  75                 	db	117	;'u'
   535  007D8E  6E                 	db	110	;'n'
   536  007D8F  6B                 	db	107	;'k'
   537  007D90  6E                 	db	110	;'n'
   538  007D91  6F                 	db	111	;'o'
   539  007D92  77                 	db	119	;'w'
   540  007D93  6E                 	db	110	;'n'
   541  007D94  20                 	db	32
   542  007D95  65                 	db	101	;'e'
   543  007D96  72                 	db	114	;'r'
   544  007D97  72                 	db	114	;'r'
   545  007D98  6F                 	db	111	;'o'
   546  007D99  72                 	db	114	;'r'
   547  007D9A  20                 	db	32
   548  007D9B  68                 	db	104	;'h'
   549  007D9C  61                 	db	97	;'a'
   550  007D9D  73                 	db	115	;'s'
   551  007D9E  20                 	db	32
   552  007D9F  6F                 	db	111	;'o'
   553  007DA0  63                 	db	99	;'c'
   554  007DA1  63                 	db	99	;'c'
   555  007DA2  75                 	db	117	;'u'
   556  007DA3  72                 	db	114	;'r'
   557  007DA4  65                 	db	101	;'e'
   558  007DA5  64                 	db	100	;'d'
   559  007DA6  2E                 	db	46
   560  007DA7  00                 	db	0
   561  007DA8                     STR_39:
   562  007DA8  63                 	db	99	;'c'
   563  007DA9  6F                 	db	111	;'o'
   564  007DAA  6E                 	db	110	;'n'
   565  007DAB  6E                 	db	110	;'n'
   566  007DAC  65                 	db	101	;'e'
   567  007DAD  63                 	db	99	;'c'
   568  007DAE  74                 	db	116	;'t'
   569  007DAF  69                 	db	105	;'i'
   570  007DB0  6F                 	db	111	;'o'
   571  007DB1  6E                 	db	110	;'n'
   572  007DB2  20                 	db	32
   573  007DB3  69                 	db	105	;'i'
   574  007DB4  73                 	db	115	;'s'
   575  007DB5  20                 	db	32
   576  007DB6  48                 	db	72	;'H'
   577  007DB7  61                 	db	97	;'a'
   578  007DB8  6C                 	db	108	;'l'
   579  007DB9  66                 	db	102	;'f'
   580  007DBA  20                 	db	32
   581  007DBB  44                 	db	68	;'D'
   582  007DBC  75                 	db	117	;'u'
   583  007DBD  70                 	db	112	;'p'
   584  007DBE  6C                 	db	108	;'l'
   585  007DBF  65                 	db	101	;'e'
   586  007DC0  78                 	db	120	;'x'
   587  007DC1  2E                 	db	46
   588  007DC2  0A                 	db	10
   589  007DC3  0D                 	db	13
   590  007DC4  00                 	db	0
   591  007DC5                     STR_40:
   592  007DC5  63                 	db	99	;'c'
   593  007DC6  6F                 	db	111	;'o'
   594  007DC7  6E                 	db	110	;'n'
   595  007DC8  6E                 	db	110	;'n'
   596  007DC9  65                 	db	101	;'e'
   597  007DCA  63                 	db	99	;'c'
   598  007DCB  74                 	db	116	;'t'
   599  007DCC  69                 	db	105	;'i'
   600  007DCD  6F                 	db	111	;'o'
   601  007DCE  6E                 	db	110	;'n'
   602  007DCF  20                 	db	32
   603  007DD0  69                 	db	105	;'i'
   604  007DD1  73                 	db	115	;'s'
   605  007DD2  20                 	db	32
   606  007DD3  46                 	db	70	;'F'
   607  007DD4  75                 	db	117	;'u'
   608  007DD5  6C                 	db	108	;'l'
   609  007DD6  6C                 	db	108	;'l'
   610  007DD7  20                 	db	32
   611  007DD8  44                 	db	68	;'D'
   612  007DD9  75                 	db	117	;'u'
   613  007DDA  70                 	db	112	;'p'
   614  007DDB  6C                 	db	108	;'l'
   615  007DDC  65                 	db	101	;'e'
   616  007DDD  78                 	db	120	;'x'
   617  007DDE  2E                 	db	46
   618  007DDF  0A                 	db	10
   619  007DE0  0D                 	db	13
   620  007DE1  00                 	db	0
   621  007DE2                     STR_1:
   622  007DE2  57                 	db	87	;'W'
   623  007DE3  72                 	db	114	;'r'
   624  007DE4  69                 	db	105	;'i'
   625  007DE5  74                 	db	116	;'t'
   626  007DE6  69                 	db	105	;'i'
   627  007DE7  6E                 	db	110	;'n'
   628  007DE8  67                 	db	103	;'g'
   629  007DE9  20                 	db	32
   630  007DEA  30                 	db	48	;'0'
   631  007DEB  78                 	db	120	;'x'
   632  007DEC  31                 	db	49	;'1'
   633  007DED  32                 	db	50	;'2'
   634  007DEE  33                 	db	51	;'3'
   635  007DEF  34                 	db	52	;'4'
   636  007DF0  20                 	db	32
   637  007DF1  73                 	db	115	;'s'
   638  007DF2  75                 	db	117	;'u'
   639  007DF3  63                 	db	99	;'c'
   640  007DF4  63                 	db	99	;'c'
   641  007DF5  65                 	db	101	;'e'
   642  007DF6  73                 	db	115	;'s'
   643  007DF7  73                 	db	115	;'s'
   644  007DF8  66                 	db	102	;'f'
   645  007DF9  75                 	db	117	;'u'
   646  007DFA  6C                 	db	108	;'l'
   647  007DFB  2E                 	db	46
   648  007DFC  0A                 	db	10
   649  007DFD  0D                 	db	13
   650  007DFE  00                 	db	0
   651  007DFF                     STR_33:
   652  007DFF  49                 	db	73	;'I'
   653  007E00  6E                 	db	110	;'n'
   654  007E01  69                 	db	105	;'i'
   655  007E02  74                 	db	116	;'t'
   656  007E03  69                 	db	105	;'i'
   657  007E04  61                 	db	97	;'a'
   658  007E05  6C                 	db	108	;'l'
   659  007E06  69                 	db	105	;'i'
   660  007E07  73                 	db	115	;'s'
   661  007E08  61                 	db	97	;'a'
   662  007E09  74                 	db	116	;'t'
   663  007E0A  69                 	db	105	;'i'
   664  007E0B  6F                 	db	111	;'o'
   665  007E0C  6E                 	db	110	;'n'
   666  007E0D  20                 	db	32
   667  007E0E  63                 	db	99	;'c'
   668  007E0F  6F                 	db	111	;'o'
   669  007E10  6D                 	db	109	;'m'
   670  007E11  70                 	db	112	;'p'
   671  007E12  6C                 	db	108	;'l'
   672  007E13  65                 	db	101	;'e'
   673  007E14  74                 	db	116	;'t'
   674  007E15  65                 	db	101	;'e'
   675  007E16  64                 	db	100	;'d'
   676  007E17  2E                 	db	46
   677  007E18  0A                 	db	10
   678  007E19  0D                 	db	13
   679  007E1A  00                 	db	0
   680  007E1B                     STR_4:
   681  007E1B  57                 	db	87	;'W'
   682  007E1C  72                 	db	114	;'r'
   683  007E1D  69                 	db	105	;'i'
   684  007E1E  74                 	db	116	;'t'
   685  007E1F  69                 	db	105	;'i'
   686  007E20  6E                 	db	110	;'n'
   687  007E21  67                 	db	103	;'g'
   688  007E22  20                 	db	32
   689  007E23  30                 	db	48	;'0'
   690  007E24  78                 	db	120	;'x'
   691  007E25  31                 	db	49	;'1'
   692  007E26  32                 	db	50	;'2'
   693  007E27  33                 	db	51	;'3'
   694  007E28  34                 	db	52	;'4'
   695  007E29  20                 	db	32
   696  007E2A  66                 	db	102	;'f'
   697  007E2B  61                 	db	97	;'a'
   698  007E2C  69                 	db	105	;'i'
   699  007E2D  6C                 	db	108	;'l'
   700  007E2E  65                 	db	101	;'e'
   701  007E2F  64                 	db	100	;'d'
   702  007E30  2E                 	db	46
   703  007E31  0A                 	db	10
   704  007E32  0D                 	db	13
   705  007E33  00                 	db	0
   706  007E34                     STR_22:
   707  007E34  46                 	db	70	;'F'
   708  007E35  49                 	db	73	;'I'
   709  007E36  52                 	db	82	;'R'
   710  007E37  4D                 	db	77	;'M'
   711  007E38  57                 	db	87	;'W'
   712  007E39  41                 	db	65	;'A'
   713  007E3A  52                 	db	82	;'R'
   714  007E3B  45                 	db	69	;'E'
   715  007E3C  20                 	db	32
   716  007E3D  42                 	db	66	;'B'
   717  007E3E  55                 	db	85	;'U'
   718  007E3F  49                 	db	73	;'I'
   719  007E40  4C                 	db	76	;'L'
   720  007E41  44                 	db	68	;'D'
   721  007E42  20                 	db	32
   722  007E43  44                 	db	68	;'D'
   723  007E44  41                 	db	65	;'A'
   724  007E45  54                 	db	84	;'T'
   725  007E46  45                 	db	69	;'E'
   726  007E47  20                 	db	32
   727  007E48  49                 	db	73	;'I'
   728  007E49  53                 	db	83	;'S'
   729  007E4A  20                 	db	32
   730  007E4B  00                 	db	0
   731  007E4C                     STR_31:
   732  007E4C  53                 	db	83	;'S'
   733  007E4D  6F                 	db	111	;'o'
   734  007E4E  75                 	db	117	;'u'
   735  007E4F  72                 	db	114	;'r'
   736  007E50  63                 	db	99	;'c'
   737  007E51  65                 	db	101	;'e'
   738  007E52  20                 	db	32
   739  007E53  4D                 	db	77	;'M'
   740  007E54  41                 	db	65	;'A'
   741  007E55  43                 	db	67	;'C'
   742  007E56  20                 	db	32
   743  007E57  61                 	db	97	;'a'
   744  007E58  64                 	db	100	;'d'
   745  007E59  64                 	db	100	;'d'
   746  007E5A  72                 	db	114	;'r'
   747  007E5B  65                 	db	101	;'e'
   748  007E5C  73                 	db	115	;'s'
   749  007E5D  73                 	db	115	;'s'
   750  007E5E  20                 	db	32
   751  007E5F  69                 	db	105	;'i'
   752  007E60  73                 	db	115	;'s'
   753  007E61  20                 	db	32
   754  007E62  00                 	db	0
   755  007E63                     STR_29:
   756  007E63  53                 	db	83	;'S'
   757  007E64  69                 	db	105	;'i'
   758  007E65  6C                 	db	108	;'l'
   759  007E66  69                 	db	105	;'i'
   760  007E67  63                 	db	99	;'c'
   761  007E68  6F                 	db	111	;'o'
   762  007E69  6E                 	db	110	;'n'
   763  007E6A  20                 	db	32
   764  007E6B  72                 	db	114	;'r'
   765  007E6C  65                 	db	101	;'e'
   766  007E6D  76                 	db	118	;'v'
   767  007E6E  69                 	db	105	;'i'
   768  007E6F  73                 	db	115	;'s'
   769  007E70  69                 	db	105	;'i'
   770  007E71  6F                 	db	111	;'o'
   771  007E72  6E                 	db	110	;'n'
   772  007E73  20                 	db	32
   773  007E74  69                 	db	105	;'i'
   774  007E75  73                 	db	115	;'s'
   775  007E76  20                 	db	32
   776  007E77  00                 	db	0
   777  007E78                     STR_38:
   778  007E78  53                 	db	83	;'S'
   779  007E79  70                 	db	112	;'p'
   780  007E7A  65                 	db	101	;'e'
   781  007E7B  65                 	db	101	;'e'
   782  007E7C  64                 	db	100	;'d'
   783  007E7D  20                 	db	32
   784  007E7E  69                 	db	105	;'i'
   785  007E7F  73                 	db	115	;'s'
   786  007E80  20                 	db	32
   787  007E81  31                 	db	49	;'1'
   788  007E82  30                 	db	48	;'0'
   789  007E83  30                 	db	48	;'0'
   790  007E84  20                 	db	32
   791  007E85  4D                 	db	77	;'M'
   792  007E86  62                 	db	98	;'b'
   793  007E87  70                 	db	112	;'p'
   794  007E88  73                 	db	115	;'s'
   795  007E89  2C                 	db	44
   796  007E8A  20                 	db	32
   797  007E8B  00                 	db	0
   798  007E8C                     STR_37:
   799  007E8C  53                 	db	83	;'S'
   800  007E8D  70                 	db	112	;'p'
   801  007E8E  65                 	db	101	;'e'
   802  007E8F  65                 	db	101	;'e'
   803  007E90  64                 	db	100	;'d'
   804  007E91  20                 	db	32
   805  007E92  69                 	db	105	;'i'
   806  007E93  73                 	db	115	;'s'
   807  007E94  20                 	db	32
   808  007E95  31                 	db	49	;'1'
   809  007E96  30                 	db	48	;'0'
   810  007E97  20                 	db	32
   811  007E98  4D                 	db	77	;'M'
   812  007E99  62                 	db	98	;'b'
   813  007E9A  70                 	db	112	;'p'
   814  007E9B  73                 	db	115	;'s'
   815  007E9C  2C                 	db	44
   816  007E9D  20                 	db	32
   817  007E9E  00                 	db	0
   818  007E9F                     STR_36:
   819  007E9F  4C                 	db	76	;'L'
   820  007EA0  69                 	db	105	;'i'
   821  007EA1  6E                 	db	110	;'n'
   822  007EA2  6B                 	db	107	;'k'
   823  007EA3  20                 	db	32
   824  007EA4  65                 	db	101	;'e'
   825  007EA5  73                 	db	115	;'s'
   826  007EA6  74                 	db	116	;'t'
   827  007EA7  61                 	db	97	;'a'
   828  007EA8  62                 	db	98	;'b'
   829  007EA9  6C                 	db	108	;'l'
   830  007EAA  69                 	db	105	;'i'
   831  007EAB  73                 	db	115	;'s'
   832  007EAC  68                 	db	104	;'h'
   833  007EAD  65                 	db	101	;'e'
   834  007EAE  64                 	db	100	;'d'
   835  007EAF  2E                 	db	46
   836  007EB0  20                 	db	32
   837  007EB1  00                 	db	0
   838  007EB2                     STR_44:
   839  007EB2  20                 	db	32
   840  007EB3  45                 	db	69	;'E'
   841  007EB4  54                 	db	84	;'T'
   842  007EB5  48                 	db	72	;'H'
   843  007EB6  45                 	db	69	;'E'
   844  007EB7  52                 	db	82	;'R'
   845  007EB8  4E                 	db	78	;'N'
   846  007EB9  45                 	db	69	;'E'
   847  007EBA  54                 	db	84	;'T'
   848  007EBB  20                 	db	32
   849  007EBC  4D                 	db	77	;'M'
   850  007EBD  4F                 	db	79	;'O'
   851  007EBE  44                 	db	68	;'D'
   852  007EBF  55                 	db	85	;'U'
   853  007EC0  4C                 	db	76	;'L'
   854  007EC1  45                 	db	69	;'E'
   855  007EC2  3A                 	db	58	;':'
   856  007EC3  20                 	db	32
   857  007EC4  00                 	db	0
   858  007EC5                     STR_54:
   859  007EC5  55                 	db	85	;'U'
   860  007EC6  6E                 	db	110	;'n'
   861  007EC7  6B                 	db	107	;'k'
   862  007EC8  6E                 	db	110	;'n'
   863  007EC9  6F                 	db	111	;'o'
   864  007ECA  77                 	db	119	;'w'
   865  007ECB  6E                 	db	110	;'n'
   866  007ECC  20                 	db	32
   867  007ECD  45                 	db	69	;'E'
   868  007ECE  74                 	db	116	;'t'
   869  007ECF  68                 	db	104	;'h'
   870  007ED0  65                 	db	101	;'e'
   871  007ED1  72                 	db	114	;'r'
   872  007ED2  54                 	db	84	;'T'
   873  007ED3  79                 	db	121	;'y'
   874  007ED4  70                 	db	112	;'p'
   875  007ED5  65                 	db	101	;'e'
   876  007ED6  00                 	db	0
   877  007ED7                     STR_69:
   878  007ED7  5B                 	db	91	;'['
   879  007ED8  50                 	db	80	;'P'
   880  007ED9  41                 	db	65	;'A'
   881  007EDA  43                 	db	67	;'C'
   882  007EDB  4B                 	db	75	;'K'
   883  007EDC  45                 	db	69	;'E'
   884  007EDD  54                 	db	84	;'T'
   885  007EDE  20                 	db	32
   886  007EDF  44                 	db	68	;'D'
   887  007EE0  52                 	db	82	;'R'
   888  007EE1  4F                 	db	79	;'O'
   889  007EE2  50                 	db	80	;'P'
   890  007EE3  50                 	db	80	;'P'
   891  007EE4  45                 	db	69	;'E'
   892  007EE5  44                 	db	68	;'D'
   893  007EE6  5D                 	db	93	;']'
   894  007EE7  00                 	db	0
   895  007EE8                     STR_42:
   896  007EE8  20                 	db	32
   897  007EE9  4D                 	db	77	;'M'
   898  007EEA  45                 	db	69	;'E'
   899  007EEB  4D                 	db	77	;'M'
   900  007EEC  4F                 	db	79	;'O'
   901  007EED  52                 	db	82	;'R'
   902  007EEE  59                 	db	89	;'Y'
   903  007EEF  20                 	db	32
   904  007EF0  4D                 	db	77	;'M'
   905  007EF1  4F                 	db	79	;'O'
   906  007EF2  44                 	db	68	;'D'
   907  007EF3  55                 	db	85	;'U'
   908  007EF4  4C                 	db	76	;'L'
   909  007EF5  45                 	db	69	;'E'
   910  007EF6  3A                 	db	58	;':'
   911  007EF7  20                 	db	32
   912  007EF8  00                 	db	0
   913  007EF9                     STR_2:
   914  007EF9  52                 	db	82	;'R'
   915  007EFA  65                 	db	101	;'e'
   916  007EFB  73                 	db	115	;'s'
   917  007EFC  65                 	db	101	;'e'
   918  007EFD  74                 	db	116	;'t'
   919  007EFE  20                 	db	32
   920  007EFF  73                 	db	115	;'s'
   921  007F00  75                 	db	117	;'u'
   922  007F01  63                 	db	99	;'c'
   923  007F02  63                 	db	99	;'c'
   924  007F03  65                 	db	101	;'e'
   925  007F04  73                 	db	115	;'s'
   926  007F05  73                 	db	115	;'s'
   927  007F06  2E                 	db	46
   928  007F07  0A                 	db	10
   929  007F08  0D                 	db	13
   930  007F09  00                 	db	0
   931  007F0A                     STR_63:
   932  007F0A  5B                 	db	91	;'['
   933  007F0B  52                 	db	82	;'R'
   934  007F0C  65                 	db	101	;'e'
   935  007F0D  70                 	db	112	;'p'
   936  007F0E  6C                 	db	108	;'l'
   937  007F0F  79                 	db	121	;'y'
   938  007F10  20                 	db	32
   939  007F11  73                 	db	115	;'s'
   940  007F12  65                 	db	101	;'e'
   941  007F13  6E                 	db	110	;'n'
   942  007F14  74                 	db	116	;'t'
   943  007F15  20                 	db	32
   944  007F16  74                 	db	116	;'t'
   945  007F17  6F                 	db	111	;'o'
   946  007F18  20                 	db	32
   947  007F19  00                 	db	0
   948  007F1A                     STR_9:
   949  007F1A  5B                 	db	91	;'['
   950  007F1B  53                 	db	83	;'S'
   951  007F1C  79                 	db	121	;'y'
   952  007F1D  6D                 	db	109	;'m'
   953  007F1E  62                 	db	98	;'b'
   954  007F1F  6F                 	db	111	;'o'
   955  007F20  6C                 	db	108	;'l'
   956  007F21  20                 	db	32
   957  007F22  45                 	db	69	;'E'
   958  007F23  72                 	db	114	;'r'
   959  007F24  72                 	db	114	;'r'
   960  007F25  6F                 	db	111	;'o'
   961  007F26  72                 	db	114	;'r'
   962  007F27  73                 	db	115	;'s'
   963  007F28  5D                 	db	93	;']'
   964  007F29  00                 	db	0
   965  007F2A                     STR_3:
   966  007F2A  52                 	db	82	;'R'
   967  007F2B  65                 	db	101	;'e'
   968  007F2C  73                 	db	115	;'s'
   969  007F2D  65                 	db	101	;'e'
   970  007F2E  74                 	db	116	;'t'
   971  007F2F  20                 	db	32
   972  007F30  66                 	db	102	;'f'
   973  007F31  61                 	db	97	;'a'
   974  007F32  69                 	db	105	;'i'
   975  007F33  6C                 	db	108	;'l'
   976  007F34  65                 	db	101	;'e'
   977  007F35  64                 	db	100	;'d'
   978  007F36  2E                 	db	46
   979  007F37  0A                 	db	10
   980  007F38  0D                 	db	13
   981  007F39  00                 	db	0
   982  007F3A                     STR_62:
   983  007F3A  5B                 	db	91	;'['
   984  007F3B  49                 	db	73	;'I'
   985  007F3C  73                 	db	115	;'s'
   986  007F3D  47                 	db	71	;'G'
   987  007F3E  72                 	db	114	;'r'
   988  007F3F  61                 	db	97	;'a'
   989  007F40  74                 	db	116	;'t'
   990  007F41  75                 	db	117	;'u'
   991  007F42  69                 	db	105	;'i'
   992  007F43  74                 	db	116	;'t'
   993  007F44  6F                 	db	111	;'o'
   994  007F45  75                 	db	117	;'u'
   995  007F46  73                 	db	115	;'s'
   996  007F47  5D                 	db	93	;']'
   997  007F48  00                 	db	0
   998  007F49                     STR_46:
   999  007F49  20                 	db	32
  1000  007F4A  49                 	db	73	;'I'
  1001  007F4B  50                 	db	80	;'P'
  1002  007F4C  76                 	db	118	;'v'
  1003  007F4D  34                 	db	52	;'4'
  1004  007F4E  20                 	db	32
  1005  007F4F  4D                 	db	77	;'M'
  1006  007F50  4F                 	db	79	;'O'
  1007  007F51  44                 	db	68	;'D'
  1008  007F52  55                 	db	85	;'U'
  1009  007F53  4C                 	db	76	;'L'
  1010  007F54  45                 	db	69	;'E'
  1011  007F55  3A                 	db	58	;':'
  1012  007F56  20                 	db	32
  1013  007F57  00                 	db	0
  1014  007F58                     STR_45:
  1015  007F58  20                 	db	32
  1016  007F59  41                 	db	65	;'A'
  1017  007F5A  52                 	db	82	;'R'
  1018  007F5B  50                 	db	80	;'P'
  1019  007F5C  20                 	db	32
  1020  007F5D  4D                 	db	77	;'M'
  1021  007F5E  4F                 	db	79	;'O'
  1022  007F5F  44                 	db	68	;'D'
  1023  007F60  55                 	db	85	;'U'
  1024  007F61  4C                 	db	76	;'L'
  1025  007F62  45                 	db	69	;'E'
  1026  007F63  3A                 	db	58	;':'
  1027  007F64  20                 	db	32
  1028  007F65  00                 	db	0
  1029  007F66                     STR_35:
  1030  007F66  4C                 	db	76	;'L'
  1031  007F67  69                 	db	105	;'i'
  1032  007F68  6E                 	db	110	;'n'
  1033  007F69  6B                 	db	107	;'k'
  1034  007F6A  20                 	db	32
  1035  007F6B  6C                 	db	108	;'l'
  1036  007F6C  6F                 	db	111	;'o'
  1037  007F6D  73                 	db	115	;'s'
  1038  007F6E  74                 	db	116	;'t'
  1039  007F6F  2E                 	db	46
  1040  007F70  0A                 	db	10
  1041  007F71  0D                 	db	13
  1042  007F72  00                 	db	0
  1043  007F73                     STR_28:
  1044  007F73  20                 	db	32
  1045  007F74  64                 	db	100	;'d'
  1046  007F75  65                 	db	101	;'e'
  1047  007F76  74                 	db	116	;'t'
  1048  007F77  65                 	db	101	;'e'
  1049  007F78  63                 	db	99	;'c'
  1050  007F79  74                 	db	116	;'t'
  1051  007F7A  65                 	db	101	;'e'
  1052  007F7B  64                 	db	100	;'d'
  1053  007F7C  2E                 	db	46
  1054  007F7D  20                 	db	32
  1055  007F7E  00                 	db	0
  1056  007F7F                     STR_23:
  1057  007F7F  46                 	db	70	;'F'
  1058  007F80  65                 	db	101	;'e'
  1059  007F81  62                 	db	98	;'b'
  1060  007F82  20                 	db	32
  1061  007F83  32                 	db	50	;'2'
  1062  007F84  38                 	db	56	;'8'
  1063  007F85  20                 	db	32
  1064  007F86  32                 	db	50	;'2'
  1065  007F87  30                 	db	48	;'0'
  1066  007F88  31                 	db	49	;'1'
  1067  007F89  39                 	db	57	;'9'
  1068  007F8A  00                 	db	0
  1069  007F8B                     STR_7:
  1070  007F8B  5B                 	db	91	;'['
  1071  007F8C  42                 	db	66	;'B'
  1072  007F8D  72                 	db	114	;'r'
  1073  007F8E  6F                 	db	111	;'o'
  1074  007F8F  61                 	db	97	;'a'
  1075  007F90  64                 	db	100	;'d'
  1076  007F91  63                 	db	99	;'c'
  1077  007F92  61                 	db	97	;'a'
  1078  007F93  73                 	db	115	;'s'
  1079  007F94  74                 	db	116	;'t'
  1080  007F95  5D                 	db	93	;']'
  1081  007F96  00                 	db	0
  1082  007F97                     STR_61:
  1083  007F97  5B                 	db	91	;'['
  1084  007F98  49                 	db	73	;'I'
  1085  007F99  73                 	db	115	;'s'
  1086  007F9A  50                 	db	80	;'P'
  1087  007F9B  72                 	db	114	;'r'
  1088  007F9C  6F                 	db	111	;'o'
  1089  007F9D  62                 	db	98	;'b'
  1090  007F9E  65                 	db	101	;'e'
  1091  007F9F  5D                 	db	93	;']'
  1092  007FA0  00                 	db	0
  1093  007FA1                     STR_8:
  1094  007FA1  5B                 	db	91	;'['
  1095  007FA2  55                 	db	85	;'U'
  1096  007FA3  6E                 	db	110	;'n'
  1097  007FA4  69                 	db	105	;'i'
  1098  007FA5  63                 	db	99	;'c'
  1099  007FA6  61                 	db	97	;'a'
  1100  007FA7  73                 	db	115	;'s'
  1101  007FA8  74                 	db	116	;'t'
  1102  007FA9  5D                 	db	93	;']'
  1103  007FAA  00                 	db	0
  1104  007FAB                     STR_50:
  1105  007FAB  20                 	db	32
  1106  007FAC  28                 	db	40
  1107  007FAD  43                 	db	67	;'C'
  1108  007FAE  6F                 	db	111	;'o'
  1109  007FAF  64                 	db	100	;'d'
  1110  007FB0  65                 	db	101	;'e'
  1111  007FB1  3A                 	db	58	;':'
  1112  007FB2  20                 	db	32
  1113  007FB3  00                 	db	0
  1114  007FB4                     STR_25:
  1115  007FB4  32                 	db	50	;'2'
  1116  007FB5  33                 	db	51	;'3'
  1117  007FB6  3A                 	db	58	;':'
  1118  007FB7  30                 	db	48	;'0'
  1119  007FB8  32                 	db	50	;'2'
  1120  007FB9  3A                 	db	58	;':'
  1121  007FBA  33                 	db	51	;'3'
  1122  007FBB  30                 	db	48	;'0'
  1123  007FBC  00                 	db	0
  1124  007FBD                     STR_67:
  1125  007FBD  20                 	db	32
  1126  007FBE  69                 	db	105	;'i'
  1127  007FBF  73                 	db	115	;'s'
  1128  007FC0  20                 	db	32
  1129  007FC1  61                 	db	97	;'a'
  1130  007FC2  74                 	db	116	;'t'
  1131  007FC3  20                 	db	32
  1132  007FC4  00                 	db	0
  1133  007FC5                     STR_41:
  1134  007FC5  5B                 	db	91	;'['
  1135  007FC6  45                 	db	69	;'E'
  1136  007FC7  52                 	db	82	;'R'
  1137  007FC8  52                 	db	82	;'R'
  1138  007FC9  4F                 	db	79	;'O'
  1139  007FCA  52                 	db	82	;'R'
  1140  007FCB  5D                 	db	93	;']'
  1141  007FCC  00                 	db	0
  1142  007FCD                     STR_11:
  1143  007FCD  5B                 	db	91	;'['
  1144  007FCE  49                 	db	73	;'I'
  1145  007FCF  50                 	db	80	;'P'
  1146  007FD0  76                 	db	118	;'v'
  1147  007FD1  34                 	db	52	;'4'
  1148  007FD2  5D                 	db	93	;']'
  1149  007FD3  00                 	db	0
  1150  007FD4                     STR_10:
  1151  007FD4  5B                 	db	91	;'['
  1152  007FD5  41                 	db	65	;'A'
  1153  007FD6  52                 	db	82	;'R'
  1154  007FD7  50                 	db	80	;'P'
  1155  007FD8  5D                 	db	93	;']'
  1156  007FD9  00                 	db	0
  1157  007FDA                     STR_58:
  1158  007FDA  5D                 	db	93	;']'
  1159  007FDB  2D                 	db	45
  1160  007FDC  3E                 	db	62	;'>'
  1161  007FDD  5B                 	db	91	;'['
  1162  007FDE  00                 	db	0
  1163  007FDF                     STR_52:
  1164  007FDF  49                 	db	73	;'I'
  1165  007FE0  50                 	db	80	;'P'
  1166  007FE1  76                 	db	118	;'v'
  1167  007FE2  34                 	db	52	;'4'
  1168  007FE3  00                 	db	0
  1169  007FE4                     STR_51:
  1170  007FE4  29                 	db	41
  1171  007FE5  2E                 	db	46
  1172  007FE6  0A                 	db	10
  1173  007FE7  0D                 	db	13
  1174  007FE8  00                 	db	0
  1175  007FE9                     STR_15:
  1176  007FE9  5D                 	db	93	;']'
  1177  007FEA  5B                 	db	91	;'['
  1178  007FEB  4C                 	db	76	;'L'
  1179  007FEC  3D                 	db	61	;'='
  1180  007FED  00                 	db	0
  1181  007FEE                     STR_53:
  1182  007FEE  41                 	db	65	;'A'
  1183  007FEF  52                 	db	82	;'R'
  1184  007FF0  50                 	db	80	;'P'
  1185  007FF1  00                 	db	0
  1186  007FF2                     STR_19:
  1187  007FF2  20                 	db	32
  1188  007FF3  28                 	db	40
  1189  007FF4  00                 	db	0
  1190  007FF5                     STR_13:
  1191  007FF5  2D                 	db	45
  1192  007FF6  3E                 	db	62	;'>'
  1193  007FF7  00                 	db	0
  1194  007FF8                     STR_14:
  1195  007FF8  5D                 	db	93	;']'
  1196  007FF9  5B                 	db	91	;'['
  1197  007FFA  00                 	db	0
  1198  007FFB                     STR_20:
  1199  007FFB  29                 	db	41
  1200  007FFC  5D                 	db	93	;']'
  1201  007FFD  00                 	db	0
  1202  0000                     
  1203                           ; #config settings
  1204  007FFE  00                 	db	0	; dummy byte at the end
  1205  0000                     
  1206                           	psect	cinit
  1207  00355C                     __pcinit:
  1208                           	opt stack 0
  1209  00355C                     start_initialization:
  1210                           	opt stack 0
  1211  00355C                     __initialization:
  1212                           	opt stack 0
  1213                           
  1214                           ; Initialize objects allocated to BANK2 (18 bytes)
  1215                           ; load TBLPTR registers with __pidataBANK2
  1216  00355C  0E6A               	movlw	low __pidataBANK2
  1217  00355E  6EF6               	movwf	tblptrl,c
  1218  003560  0E46               	movlw	high __pidataBANK2
  1219  003562  6EF7               	movwf	tblptrh,c
  1220  003564  0E00               	movlw	low (__pidataBANK2 shr (0+16))
  1221  003566  6EF8               	movwf	tblptru,c
  1222  003568  EE02  F0EB         	lfsr	0,__pdataBANK2
  1223  00356C  EE10 F012          	lfsr	1,18
  1224  003570                     copy_data0:
  1225  003570  0009               	tblrd		*+
  1226  003572  CFF5 FFEE          	movff	tablat,postinc0
  1227  003576  50E5               	movf	postdec1,w,c
  1228  003578  50E1               	movf	fsr1l,w,c
  1229  00357A  E1FA               	bnz	copy_data0
  1230                           
  1231                           ; Initialize objects allocated to BANK1 (28 bytes)
  1232                           ; load TBLPTR registers with __pidataBANK1
  1233  00357C  0ECA               	movlw	low __pidataBANK1
  1234  00357E  6EF6               	movwf	tblptrl,c
  1235  003580  0E45               	movlw	high __pidataBANK1
  1236  003582  6EF7               	movwf	tblptrh,c
  1237  003584  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1238  003586  6EF8               	movwf	tblptru,c
  1239  003588  EE01  F0BE         	lfsr	0,__pdataBANK1
  1240  00358C  EE10 F01C          	lfsr	1,28
  1241  003590                     copy_data1:
  1242  003590  0009               	tblrd		*+
  1243  003592  CFF5 FFEE          	movff	tablat,postinc0
  1244  003596  50E5               	movf	postdec1,w,c
  1245  003598  50E1               	movf	fsr1l,w,c
  1246  00359A  E1FA               	bnz	copy_data1
  1247                           
  1248                           ; Initialize objects allocated to COMRAM (2 bytes)
  1249                           ; load TBLPTR registers with __pidataCOMRAM
  1250  00359C  0EEE               	movlw	low __pidataCOMRAM
  1251  00359E  6EF6               	movwf	tblptrl,c
  1252  0035A0  0E46               	movlw	high __pidataCOMRAM
  1253  0035A2  6EF7               	movwf	tblptrh,c
  1254  0035A4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1255  0035A6  6EF8               	movwf	tblptru,c
  1256  0035A8  0009               	tblrd		*+	;fetch initializer
  1257  0035AA  CFF5 F04D          	movff	tablat,__pdataCOMRAM
  1258  0035AE  0009               	tblrd		*+	;fetch initializer
  1259  0035B0  CFF5 F04E          	movff	tablat,__pdataCOMRAM+1
  1260                           
  1261                           ; Clear objects allocated to BANK3 (112 bytes)
  1262  0035B4  EE03  F000         	lfsr	0,__pbssBANK3
  1263  0035B8  0E70               	movlw	112
  1264  0035BA                     clear_0:
  1265  0035BA  6AEE               	clrf	postinc0,c
  1266  0035BC  06E8               	decf	wreg,f,c
  1267  0035BE  E1FD               	bnz	clear_0
  1268                           
  1269                           ; Clear objects allocated to BANK2 (235 bytes)
  1270  0035C0  EE02  F000         	lfsr	0,__pbssBANK2
  1271  0035C4  0EEB               	movlw	235
  1272  0035C6                     clear_1:
  1273  0035C6  6AEE               	clrf	postinc0,c
  1274  0035C8  06E8               	decf	wreg,f,c
  1275  0035CA  E1FD               	bnz	clear_1
  1276                           
  1277                           ; Clear objects allocated to BANK1 (51 bytes)
  1278  0035CC  EE01  F08B         	lfsr	0,__pbssBANK1
  1279  0035D0  0E33               	movlw	51
  1280  0035D2                     clear_2:
  1281  0035D2  6AEE               	clrf	postinc0,c
  1282  0035D4  06E8               	decf	wreg,f,c
  1283  0035D6  E1FD               	bnz	clear_2
  1284                           
  1285                           ; Clear objects allocated to COMRAM (37 bytes)
  1286  0035D8  EE00  F028         	lfsr	0,__pbssCOMRAM
  1287  0035DC  0E25               	movlw	37
  1288  0035DE                     clear_3:
  1289  0035DE  6AEE               	clrf	postinc0,c
  1290  0035E0  06E8               	decf	wreg,f,c
  1291  0035E2  E1FD               	bnz	clear_3
  1292  0035E4                     end_of_initialization:
  1293                           	opt stack 0
  1294  0035E4                     __end_of__initialization:
  1295                           	opt stack 0
  1296  0035E4  904F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1297  0035E6  924F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1298  0035E8  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1299  0035EA  6EF8               	movwf	tblptru,c
  1300  0035EC  0100               	movlb	0
  1301  0035EE  EF27  F007         	goto	_main	;jump to C main() function
  1302                           tblptru	equ	0xFF8
  1303                           tblptrh	equ	0xFF7
  1304                           tblptrl	equ	0xFF6
  1305                           tablat	equ	0xFF5
  1306                           postinc0	equ	0xFEE
  1307                           wreg	equ	0xFE8
  1308                           postdec1	equ	0xFE5
  1309                           fsr1l	equ	0xFE1
  1310                           
  1311                           	psect	bssCOMRAM
  1312  000028                     __pbssCOMRAM:
  1313                           	opt stack 0
  1314  000028                     	ds	4
  1315  00002C                     	ds	4
  1316  000030                     buttonHandler@debounceCounter:
  1317                           	opt stack 0
  1318  000030                     	ds	4
  1319  000034                     _numberToDisplay:
  1320                           	opt stack 0
  1321  000034                     	ds	4
  1322  000038                     _seconds:
  1323                           	opt stack 0
  1324  000038                     	ds	4
  1325  00003C                     sevenSegmentUpdate@digitsToDisplay:
  1326                           	opt stack 0
  1327  00003C                     	ds	3
  1328  00003F                     ipv4_streamToTransmissionBuffer@dataPointer:
  1329                           	opt stack 0
  1330  00003F                     	ds	2
  1331  000041                     updateSeconds@prescaler_ms:
  1332                           	opt stack 0
  1333  000041                     	ds	2
  1334  000043                     ethernetController_streamToTransmitBuffer@pointer:
  1335                           	opt stack 0
  1336  000043                     	ds	2
  1337  000045                     ethernetController_softReset@F5829:
  1338                           	opt stack 0
  1339  000045                     	ds	2
  1340  000047                     _nextPacketPointer:
  1341                           	opt stack 0
  1342  000047                     	ds	2
  1343  000049                     sevenSegmentUpdate@digitPointer:
  1344                           	opt stack 0
  1345  000049                     	ds	1
  1346  00004A                     buttonHandler@newState:
  1347                           	opt stack 0
  1348  00004A                     	ds	1
  1349  00004B                     buttonHandler@oldState:
  1350                           	opt stack 0
  1351  00004B                     	ds	1
  1352  00004C                     	ds	1
  1353                           tblptru	equ	0xFF8
  1354                           tblptrh	equ	0xFF7
  1355                           tblptrl	equ	0xFF6
  1356                           tablat	equ	0xFF5
  1357                           postinc0	equ	0xFEE
  1358                           wreg	equ	0xFE8
  1359                           postdec1	equ	0xFE5
  1360                           fsr1l	equ	0xFE1
  1361                           
  1362                           	psect	dataCOMRAM
  1363  00004D                     __pdataCOMRAM:
  1364                           	opt stack 0
  1365  00004D                     ethernetController_softReset@F5827:
  1366                           	opt stack 0
  1367  00004D                     	ds	2
  1368                           tblptru	equ	0xFF8
  1369                           tblptrh	equ	0xFF7
  1370                           tblptrl	equ	0xFF6
  1371                           tablat	equ	0xFF5
  1372                           postinc0	equ	0xFEE
  1373                           wreg	equ	0xFE8
  1374                           postdec1	equ	0xFE5
  1375                           fsr1l	equ	0xFE1
  1376                           
  1377                           	psect	bssBANK1
  1378  00018B                     __pbssBANK1:
  1379                           	opt stack 0
  1380  00018B                     printEthernetState@oldState:
  1381                           	opt stack 0
  1382  00018B                     	ds	15
  1383  00019A                     ipv4_sendFrame@oldTime:
  1384                           	opt stack 0
  1385  00019A                     	ds	4
  1386  00019E                     ethernet_rxGetNewFrame@counter:
  1387                           	opt stack 0
  1388  00019E                     	ds	4
  1389  0001A2                     ipv4_sendFrame@requestCounter:
  1390                           	opt stack 0
  1391  0001A2                     	ds	1
  1392  0001A3                     hexToString@number:
  1393                           	opt stack 0
  1394  0001A3                     	ds	10
  1395  0001AD                     intToString@number:
  1396                           	opt stack 0
  1397  0001AD                     	ds	10
  1398  0001B7                     ethernetController_getRSV@temp:
  1399                           	opt stack 0
  1400  0001B7                     	ds	6
  1401  0001BD                     _buttonState:
  1402                           	opt stack 0
  1403  0001BD                     	ds	1
  1404                           tblptru	equ	0xFF8
  1405                           tblptrh	equ	0xFF7
  1406                           tblptrl	equ	0xFF6
  1407                           tablat	equ	0xFF5
  1408                           postinc0	equ	0xFEE
  1409                           wreg	equ	0xFE8
  1410                           postdec1	equ	0xFE5
  1411                           fsr1l	equ	0xFE1
  1412                           
  1413                           	psect	dataBANK1
  1414  0001BE                     __pdataBANK1:
  1415                           	opt stack 0
  1416  0001BE                     _sevenSegCharacters:
  1417                           	opt stack 0
  1418  0001BE                     	ds	12
  1419  0001CA                     ipAdressToString@address:
  1420                           	opt stack 0
  1421  0001CA                     	ds	16
  1422                           tblptru	equ	0xFF8
  1423                           tblptrh	equ	0xFF7
  1424                           tblptrl	equ	0xFF6
  1425                           tablat	equ	0xFF5
  1426                           postinc0	equ	0xFEE
  1427                           wreg	equ	0xFE8
  1428                           postdec1	equ	0xFE5
  1429                           fsr1l	equ	0xFE1
  1430                           
  1431                           	psect	bssBANK2
  1432  000200                     __pbssBANK2:
  1433                           	opt stack 0
  1434  000200                     _occupiedMemory:
  1435                           	opt stack 0
  1436  000200                     	ds	72
  1437  000248                     _stack:
  1438                           	opt stack 0
  1439  000248                     	ds	113
  1440  0002B9                     arpEntryToString@string:
  1441                           	opt stack 0
  1442  0002B9                     	ds	50
  1443                           tblptru	equ	0xFF8
  1444                           tblptrh	equ	0xFF7
  1445                           tblptrl	equ	0xFF6
  1446                           tablat	equ	0xFF5
  1447                           postinc0	equ	0xFEE
  1448                           wreg	equ	0xFE8
  1449                           postdec1	equ	0xFE5
  1450                           fsr1l	equ	0xFE1
  1451                           
  1452                           	psect	dataBANK2
  1453  0002EB                     __pdataBANK2:
  1454                           	opt stack 0
  1455  0002EB                     macToString@F5794:
  1456                           	opt stack 0
  1457  0002EB                     	ds	18
  1458                           tblptru	equ	0xFF8
  1459                           tblptrh	equ	0xFF7
  1460                           tblptrl	equ	0xFF6
  1461                           tablat	equ	0xFF5
  1462                           postinc0	equ	0xFEE
  1463                           wreg	equ	0xFE8
  1464                           postdec1	equ	0xFE5
  1465                           fsr1l	equ	0xFE1
  1466                           
  1467                           	psect	bssBANK3
  1468  000300                     __pbssBANK3:
  1469                           	opt stack 0
  1470  000300                     _ARP_table:
  1471                           	opt stack 0
  1472  000300                     	ds	112
  1473                           tblptru	equ	0xFF8
  1474                           tblptrh	equ	0xFF7
  1475                           tblptrl	equ	0xFF6
  1476                           tablat	equ	0xFF5
  1477                           postinc0	equ	0xFEE
  1478                           wreg	equ	0xFE8
  1479                           postdec1	equ	0xFE5
  1480                           fsr1l	equ	0xFE1
  1481                           
  1482                           	psect	cstackBANK3
  1483  000370                     __pcstackBANK3:
  1484                           	opt stack 0
  1485  000370                     main@prescaler:
  1486                           	opt stack 0
  1487                           
  1488                           ; 4 bytes @ 0x0
  1489  000370                     	ds	4
  1490  000374                     main@headerBuf:
  1491                           	opt stack 0
  1492                           
  1493                           ; 32 bytes @ 0x4
  1494  000374                     	ds	32
  1495  000394                     _main$1984:
  1496                           	opt stack 0
  1497                           
  1498                           ; 2 bytes @ 0x24
  1499  000394                     	ds	2
  1500  000396                     main@i:
  1501                           	opt stack 0
  1502                           
  1503                           ; 1 bytes @ 0x26
  1504  000396                     	ds	1
  1505  000397                     main@err:
  1506                           	opt stack 0
  1507                           
  1508                           ; 3 bytes @ 0x27
  1509  000397                     	ds	3
  1510  00039A                     main@IPsource:
  1511                           	opt stack 0
  1512                           
  1513                           ; 4 bytes @ 0x2A
  1514  00039A                     	ds	4
  1515  00039E                     main@IPdestination:
  1516                           	opt stack 0
  1517                           
  1518                           ; 4 bytes @ 0x2E
  1519  00039E                     	ds	4
  1520                           tblptru	equ	0xFF8
  1521                           tblptrh	equ	0xFF7
  1522                           tblptrl	equ	0xFF6
  1523                           tablat	equ	0xFF5
  1524                           postinc0	equ	0xFEE
  1525                           wreg	equ	0xFE8
  1526                           postdec1	equ	0xFE5
  1527                           fsr1l	equ	0xFE1
  1528                           
  1529                           	psect	cstackBANK1
  1530  000100                     __pcstackBANK1:
  1531                           	opt stack 0
  1532  000100                     ARP_sendRequest@senderIP:
  1533                           	opt stack 0
  1534  000100                     ARP_replyIfNeeded@request:
  1535                           	opt stack 0
  1536                           
  1537                           ; 32 bytes @ 0x0
  1538  000100                     	ds	4
  1539  000104                     ARP_sendRequest@senderMAC:
  1540                           	opt stack 0
  1541                           
  1542                           ; 6 bytes @ 0x4
  1543  000104                     	ds	6
  1544  00010A                     ARP_sendRequest@targetIP:
  1545                           	opt stack 0
  1546                           
  1547                           ; 4 bytes @ 0xA
  1548  00010A                     	ds	4
  1549  00010E                     ARP_sendRequest@targetMAC:
  1550                           	opt stack 0
  1551                           
  1552                           ; 6 bytes @ 0xE
  1553  00010E                     	ds	6
  1554  000114                     ARP_sendRequest@request:
  1555                           	opt stack 0
  1556                           
  1557                           ; 32 bytes @ 0x14
  1558  000114                     	ds	12
  1559  000120                     ARP_replyIfNeeded@senderIP:
  1560                           	opt stack 0
  1561                           
  1562                           ; 4 bytes @ 0x20
  1563  000120                     	ds	4
  1564  000124                     ARP_replyIfNeeded@senderMAC:
  1565                           	opt stack 0
  1566                           
  1567                           ; 6 bytes @ 0x24
  1568  000124                     	ds	6
  1569  00012A                     ARP_replyIfNeeded@targetMAC:
  1570                           	opt stack 0
  1571                           
  1572                           ; 6 bytes @ 0x2A
  1573  00012A                     	ds	6
  1574  000130                     ARP_replyIfNeeded@targetIP:
  1575                           	opt stack 0
  1576                           
  1577                           ; 4 bytes @ 0x30
  1578  000130                     	ds	4
  1579  000134                     ?_ipv4_sendFrame:
  1580                           	opt stack 0
  1581  000134                     ARP_replyIfNeeded@reply:
  1582                           	opt stack 0
  1583  000134                     ipv4_sendFrame@ipPacket:
  1584                           	opt stack 0
  1585                           
  1586                           ; 62 bytes @ 0x34
  1587  000134                     	ds	32
  1588  000154                     ARP_handleNewPacket@arp:
  1589                           	opt stack 0
  1590                           
  1591                           ; 32 bytes @ 0x54
  1592  000154                     	ds	30
  1593  000172                     ??_ipv4_sendFrame:
  1594                           
  1595                           ; 1 bytes @ 0x72
  1596  000172                     	ds	2
  1597  000174                     ?_ethernet_rxGetNewFrame:
  1598                           	opt stack 0
  1599  000174                     ethernet_rxGetNewFrame@frame:
  1600                           	opt stack 0
  1601                           
  1602                           ; 2 bytes @ 0x74
  1603  000174                     	ds	3
  1604  000177                     ??_ethernet_rxGetNewFrame:
  1605                           
  1606                           ; 1 bytes @ 0x77
  1607  000177                     	ds	7
  1608  00017E                     ipv4_sendFrame@numberOfRequests:
  1609                           	opt stack 0
  1610                           
  1611                           ; 1 bytes @ 0x7E
  1612  00017E                     	ds	1
  1613  00017F                     ipv4_sendFrame@requestTimeout:
  1614                           	opt stack 0
  1615                           
  1616                           ; 1 bytes @ 0x7F
  1617  00017F                     	ds	1
  1618  000180                     ipv4_sendFrame@index:
  1619                           	opt stack 0
  1620                           
  1621                           ; 1 bytes @ 0x80
  1622  000180                     	ds	1
  1623  000181                     ipv4_sendFrame@err:
  1624                           	opt stack 0
  1625                           
  1626                           ; 3 bytes @ 0x81
  1627  000181                     	ds	3
  1628  000184                     handleStackBackgroundTasks@stack:
  1629                           	opt stack 0
  1630                           
  1631                           ; 2 bytes @ 0x84
  1632  000184                     	ds	2
  1633  000186                     
  1634                           ; 1 bytes @ 0x86
  1635  000186                     	ds	2
  1636  000188                     ??_main:
  1637                           
  1638                           ; 1 bytes @ 0x88
  1639  000188                     	ds	3
  1640                           tblptru	equ	0xFF8
  1641                           tblptrh	equ	0xFF7
  1642                           tblptrl	equ	0xFF6
  1643                           tablat	equ	0xFF5
  1644                           postinc0	equ	0xFEE
  1645                           wreg	equ	0xFE8
  1646                           postdec1	equ	0xFE5
  1647                           fsr1l	equ	0xFE1
  1648                           
  1649                           	psect	cstackBANK0
  1650  000060                     __pcstackBANK0:
  1651                           	opt stack 0
  1652  000060                     ?_ENC424J600_getNextPacketPointer:
  1653                           	opt stack 0
  1654  000060                     ?_ethernetController_getDeviceName:
  1655                           	opt stack 0
  1656  000060                     ?_etherTypeToString:
  1657                           	opt stack 0
  1658  000060                     ?___wmul:
  1659                           	opt stack 0
  1660  000060                     ?___lwdiv:
  1661                           	opt stack 0
  1662  000060                     ?___lwmod:
  1663                           	opt stack 0
  1664  000060                     ?_getSeconds:
  1665                           	opt stack 0
  1666  000060                     ?___llmod:
  1667                           	opt stack 0
  1668  000060                     ?_ENC424J600_updateReceiveStatusVector:
  1669                           	opt stack 0
  1670  000060                     ?_ARP_getEntryFromTable:
  1671                           	opt stack 0
  1672  000060                     entireMemoryEmpty@i:
  1673                           	opt stack 0
  1674  000060                     entireMemoryFull@i:
  1675                           	opt stack 0
  1676  000060                     memory_txFrameClear@index:
  1677                           	opt stack 0
  1678  000060                     ENC424J600_setNextPacketPointer@ptr:
  1679                           	opt stack 0
  1680  000060                     ENC424J600_writeSPI@data:
  1681                           	opt stack 0
  1682  000060                     ENC424J600_readSPI@data:
  1683                           	opt stack 0
  1684  000060                     ENC424J600_updateReceiveStatusVector@rsv:
  1685                           	opt stack 0
  1686  000060                     mac_setToBroadcast@mac:
  1687                           	opt stack 0
  1688  000060                     mac_isAllZero@mac:
  1689                           	opt stack 0
  1690  000060                     mac_cmp@a:
  1691                           	opt stack 0
  1692  000060                     mac_setAllZero@mac:
  1693                           	opt stack 0
  1694  000060                     etherTypeToString@ethertype:
  1695                           	opt stack 0
  1696  000060                     ipv4_calculateHeaderChecksum@header:
  1697                           	opt stack 0
  1698  000060                     ipv4_cmp@a:
  1699                           	opt stack 0
  1700  000060                     ipv4_isAllZero@ip:
  1701                           	opt stack 0
  1702  000060                     ipv4_setToAllZero@ip:
  1703                           	opt stack 0
  1704  000060                     ___wmul@multiplier:
  1705                           	opt stack 0
  1706  000060                     ___lwdiv@dividend:
  1707                           	opt stack 0
  1708  000060                     ___lwmod@dividend:
  1709                           	opt stack 0
  1710  000060                     ___llmod@dividend:
  1711                           	opt stack 0
  1712  000060                     checkForOverlapSwitched@a:
  1713                           	opt stack 0
  1714  000060                     ipv4_writeHeaderIntoBuffer@header:
  1715                           	opt stack 0
  1716                           
  1717                           ; 23 bytes @ 0x0
  1718  000060                     	ds	2
  1719  000062                     ??_ENC424J600_writeSPI:
  1720  000062                     ??_ENC424J600_readSPI:
  1721  000062                     ??_etherTypeToString:
  1722  000062                     ??_ipv4_calculateHeaderChecksum:
  1723  000062                     ?_ethernetController_getNextPacketPointer:
  1724                           	opt stack 0
  1725  000062                     mac_setToBroadcast@i:
  1726                           	opt stack 0
  1727  000062                     mac_isAllZero@i:
  1728                           	opt stack 0
  1729  000062                     mac_setAllZero@i:
  1730                           	opt stack 0
  1731  000062                     ipv4_isAllZero@i:
  1732                           	opt stack 0
  1733  000062                     ipv4_setToAllZero@i:
  1734                           	opt stack 0
  1735  000062                     mac_cmp@b:
  1736                           	opt stack 0
  1737  000062                     ipv4_cmp@b:
  1738                           	opt stack 0
  1739  000062                     ___wmul@multiplicand:
  1740                           	opt stack 0
  1741  000062                     ___lwdiv@divisor:
  1742                           	opt stack 0
  1743  000062                     ___lwmod@divisor:
  1744                           	opt stack 0
  1745  000062                     ethernetController_getDeviceName@string:
  1746                           	opt stack 0
  1747                           
  1748                           ; 11 bytes @ 0x2
  1749  000062                     	ds	2
  1750  000064                     ___lwdiv@counter:
  1751                           	opt stack 0
  1752  000064                     ___lwmod@counter:
  1753                           	opt stack 0
  1754  000064                     ___wmul@product:
  1755                           	opt stack 0
  1756  000064                     ___llmod@divisor:
  1757                           	opt stack 0
  1758  000064                     ARP_setNewEntry@mac:
  1759                           	opt stack 0
  1760                           
  1761                           ; 6 bytes @ 0x4
  1762  000064                     	ds	1
  1763  000065                     ??_ENC424J600_updateReceiveStatusVector:
  1764  000065                     ___lwdiv@quotient:
  1765                           	opt stack 0
  1766                           
  1767                           ; 2 bytes @ 0x5
  1768  000065                     	ds	1
  1769  000066                     ?___lldiv:
  1770                           	opt stack 0
  1771  000066                     mac_cmp@i:
  1772                           	opt stack 0
  1773  000066                     ipv4_cmp@i:
  1774                           	opt stack 0
  1775  000066                     ENC424J600_writeSPI@timeoutCounter:
  1776                           	opt stack 0
  1777  000066                     ENC424J600_readSPI@timeoutCounter:
  1778                           	opt stack 0
  1779  000066                     ___lldiv@dividend:
  1780                           	opt stack 0
  1781                           
  1782                           ; 4 bytes @ 0x6
  1783  000066                     	ds	1
  1784  000067                     ?_ipAdressToString:
  1785                           	opt stack 0
  1786  000067                     ARP_getEntryFromTable@index:
  1787                           	opt stack 0
  1788  000067                     ipAdressToString@ip:
  1789                           	opt stack 0
  1790  000067                     ARP_checkForEntry@ip:
  1791                           	opt stack 0
  1792                           
  1793                           ; 4 bytes @ 0x7
  1794  000067                     	ds	1
  1795  000068                     ___llmod@counter:
  1796                           	opt stack 0
  1797                           
  1798                           ; 1 bytes @ 0x8
  1799  000068                     	ds	1
  1800  000069                     checkForOverlapSwitched@b:
  1801                           	opt stack 0
  1802                           
  1803                           ; 9 bytes @ 0x9
  1804  000069                     	ds	1
  1805  00006A                     ENC424J600_writeSingleByte@opcode:
  1806                           	opt stack 0
  1807  00006A                     ethernetController_streamToTransmitBuffer@len:
  1808                           	opt stack 0
  1809  00006A                     ENC424J600_setGPDATAWritePointer@addr:
  1810                           	opt stack 0
  1811  00006A                     ENC424J600_setERXDATAReadPointer@addr:
  1812                           	opt stack 0
  1813  00006A                     ENC424J600_writeControlRegisterUnbanked@data:
  1814                           	opt stack 0
  1815  00006A                     ENC424J600_readControlRegisterUnbanked@data:
  1816                           	opt stack 0
  1817  00006A                     ARP_setNewEntry@ip:
  1818                           	opt stack 0
  1819  00006A                     ___lldiv@divisor:
  1820                           	opt stack 0
  1821                           
  1822                           ; 4 bytes @ 0xA
  1823  00006A                     	ds	1
  1824  00006B                     ??_ipAdressToString:
  1825  00006B                     ARP_checkForEntry@index:
  1826                           	opt stack 0
  1827                           
  1828                           ; 2 bytes @ 0xB
  1829  00006B                     	ds	1
  1830  00006C                     ??_ethernetController_streamToTransmitBuffer:
  1831  00006C                     ENC424J600_setGPDATAWritePointer@opcode:
  1832                           	opt stack 0
  1833  00006C                     ENC424J600_setERXDATAReadPointer@opcode:
  1834                           	opt stack 0
  1835  00006C                     ENC424J600_writeControlRegisterUnbanked@addr:
  1836                           	opt stack 0
  1837  00006C                     ENC424J600_readControlRegisterUnbanked@addr:
  1838                           	opt stack 0
  1839  00006C                     ENC424J600_updateReceiveStatusVector@receiveStatusVector:
  1840                           	opt stack 0
  1841                           
  1842                           ; 5 bytes @ 0xC
  1843  00006C                     	ds	1
  1844  00006D                     ??_ARP_checkForEntry:
  1845  00006D                     ENC424J600_setGPDATAWritePointer@lowByte:
  1846                           	opt stack 0
  1847  00006D                     ENC424J600_setERXDATAReadPointer@lowByte:
  1848                           	opt stack 0
  1849  00006D                     ENC424J600_writeControlRegisterUnbanked@opcode:
  1850                           	opt stack 0
  1851  00006D                     ENC424J600_readControlRegisterUnbanked@opcode:
  1852                           	opt stack 0
  1853                           
  1854                           ; 1 bytes @ 0xD
  1855  00006D                     	ds	1
  1856  00006E                     ??_ENC424J600_clearInterruptFlag:
  1857  00006E                     ?_ENC424J600_getInterruptFlags:
  1858                           	opt stack 0
  1859  00006E                     ?_ethernetController_checkDeviceId:
  1860                           	opt stack 0
  1861  00006E                     ?_ethernetController_getMacAddress:
  1862                           	opt stack 0
  1863  00006E                     ethernetController_getSiliconRevision@data:
  1864                           	opt stack 0
  1865  00006E                     ethernetController_setLEDStatus@status:
  1866                           	opt stack 0
  1867  00006E                     ethernetController_setLEDConfiguration@conf:
  1868                           	opt stack 0
  1869  00006E                     ENC424J600_setGPDATAWritePointer@highByte:
  1870                           	opt stack 0
  1871  00006E                     ENC424J600_setERXDATAReadPointer@highByte:
  1872                           	opt stack 0
  1873  00006E                     ENC424J600_getPacketCount@lowByte:
  1874                           	opt stack 0
  1875  00006E                     ENC424J600_enableAutoMACInsertion@temp:
  1876                           	opt stack 0
  1877  00006E                     ENC424J600_setTXLength@len:
  1878                           	opt stack 0
  1879  00006E                     ENC424J600_setTXStartAddress@addr:
  1880                           	opt stack 0
  1881  00006E                     ENC424J600_setRXBufferStartAddress@addr:
  1882                           	opt stack 0
  1883  00006E                     ENC424J600_setRXTailPointer@addr:
  1884                           	opt stack 0
  1885  00006E                     ENC424J600_readPHYRegister@data:
  1886                           	opt stack 0
  1887  00006E                     ARP_setNewEntry@timestamp:
  1888                           	opt stack 0
  1889  00006E                     ipv4_calculateHeaderChecksum@sum:
  1890                           	opt stack 0
  1891  00006E                     ___lldiv@quotient:
  1892                           	opt stack 0
  1893                           
  1894                           ; 4 bytes @ 0xE
  1895  00006E                     	ds	1
  1896  00006F                     ??_ethernetController_updateNextPacketPointer:
  1897  00006F                     ?_ethernetController_getEtherTypeField:
  1898                           	opt stack 0
  1899  00006F                     ?_ethernetController_getSourceMACAddress:
  1900                           	opt stack 0
  1901  00006F                     ethernetController_setLEDStatus@LED:
  1902                           	opt stack 0
  1903  00006F                     ethernetController_setLEDConfiguration@LED:
  1904                           	opt stack 0
  1905  00006F                     ethernetController_writeEtherTypeFieldToBuffer@ethtype:
  1906                           	opt stack 0
  1907  00006F                     ipAdressToString@ones:
  1908                           	opt stack 0
  1909  00006F                     ethernetController_writeDestinationMACAddress@addr:
  1910                           	opt stack 0
  1911  00006F                     ethernetController_getSourceMACAddress@field:
  1912                           	opt stack 0
  1913  00006F                     ethernetController_getEtherTypeField@field:
  1914                           	opt stack 0
  1915                           
  1916                           ; 9 bytes @ 0xF
  1917  00006F                     	ds	1
  1918  000070                     ??_ENC424J600_getInterruptFlags:
  1919  000070                     ??_ENC424J600_readPHYRegister:
  1920  000070                     ethernetController_streamToTransmitBuffer@data:
  1921                           	opt stack 0
  1922  000070                     ethernetController_setLEDStatus@data:
  1923                           	opt stack 0
  1924  000070                     ethernetController_setLEDConfiguration@data:
  1925                           	opt stack 0
  1926  000070                     ENC424J600_setTXLength@lowByte:
  1927                           	opt stack 0
  1928  000070                     ENC424J600_setTXStartAddress@lowByte:
  1929                           	opt stack 0
  1930  000070                     ENC424J600_setRXBufferStartAddress@lowByte:
  1931                           	opt stack 0
  1932  000070                     ENC424J600_setRXTailPointer@lowByte:
  1933                           	opt stack 0
  1934  000070                     ENC424J600_clearInterruptFlag@flag:
  1935                           	opt stack 0
  1936                           
  1937                           ; 1 bytes @ 0x10
  1938  000070                     	ds	1
  1939  000071                     ?_ethernetController_getRSV:
  1940                           	opt stack 0
  1941  000071                     ethernetController_checkDeviceId@data:
  1942                           	opt stack 0
  1943  000071                     ethernetController_streamToTransmitBuffer@opcode:
  1944                           	opt stack 0
  1945  000071                     ENC424J600_setTXLength@highByte:
  1946                           	opt stack 0
  1947  000071                     ENC424J600_setTXStartAddress@highByte:
  1948                           	opt stack 0
  1949  000071                     ENC424J600_setRXBufferStartAddress@highByte:
  1950                           	opt stack 0
  1951  000071                     ENC424J600_setRXTailPointer@highByte:
  1952                           	opt stack 0
  1953  000071                     ENC424J600_clearInterruptFlag@temp:
  1954                           	opt stack 0
  1955  000071                     ethernetController_getRSV@address:
  1956                           	opt stack 0
  1957  000071                     ethernetController_writeEtherTypeFieldToBuffer@field:
  1958                           	opt stack 0
  1959                           
  1960                           ; 9 bytes @ 0x11
  1961  000071                     	ds	1
  1962  000072                     ethernetController_clearInterruptFlag@flag:
  1963                           	opt stack 0
  1964  000072                     ___lldiv@counter:
  1965                           	opt stack 0
  1966  000072                     ethernetController_streamFromRXBuffer@startAddress:
  1967                           	opt stack 0
  1968  000072                     ethernetController_dropPacket@frame:
  1969                           	opt stack 0
  1970  000072                     ethernetController_checkDeviceId@err:
  1971                           	opt stack 0
  1972  000072                     ethernetController_sendPacket@field:
  1973                           	opt stack 0
  1974  000072                     checkForOverlap@a:
  1975                           	opt stack 0
  1976  000072                     ipv4_streamToTransmissionBuffer@packet:
  1977                           	opt stack 0
  1978                           
  1979                           ; 62 bytes @ 0x12
  1980  000072                     	ds	1
  1981  000073                     ?_intToString:
  1982                           	opt stack 0
  1983  000073                     intToString@val:
  1984                           	opt stack 0
  1985  000073                     ipAdressToString@tens:
  1986                           	opt stack 0
  1987                           
  1988                           ; 4 bytes @ 0x13
  1989  000073                     	ds	1
  1990  000074                     ethernetController_streamFromRXBuffer@startEnd:
  1991                           	opt stack 0
  1992  000074                     ethernetController_getMacAddress@mac:
  1993                           	opt stack 0
  1994                           
  1995                           ; 6 bytes @ 0x14
  1996  000074                     	ds	1
  1997  000075                     ethernetController_streamFromRXBuffer@opcode:
  1998                           	opt stack 0
  1999  000075                     ARP_checkForEntry@i:
  2000                           	opt stack 0
  2001  000075                     ethernetController_updateNextPacketPointer@nextPktPointer:
  2002                           	opt stack 0
  2003  000075                     ethernetController_writeDestinationMACAddress@field:
  2004                           	opt stack 0
  2005                           
  2006                           ; 9 bytes @ 0x15
  2007  000075                     	ds	1
  2008  000076                     ethernetController_getRSV@opcode:
  2009                           	opt stack 0
  2010  000076                     ethernetController_streamFromRXBuffer@temp:
  2011                           	opt stack 0
  2012  000076                     ENC424J600_readPHYRegister@addr:
  2013                           	opt stack 0
  2014  000076                     ENC424J600_getInterruptFlags@low:
  2015                           	opt stack 0
  2016  000076                     ARP_setNewEntry@maxSeconds:
  2017                           	opt stack 0
  2018                           
  2019                           ; 4 bytes @ 0x16
  2020  000076                     	ds	1
  2021  000077                     ??_intToString:
  2022  000077                     ?_ARP_parseFromRXBuffer:
  2023                           	opt stack 0
  2024  000077                     ethernetController_getRSV@i:
  2025                           	opt stack 0
  2026  000077                     ethernetController_updateNextPacketPointer@opcode:
  2027                           	opt stack 0
  2028  000077                     ENC424J600_readPHYRegister@PHYaddress:
  2029                           	opt stack 0
  2030  000077                     ENC424J600_getInterruptFlags@high:
  2031                           	opt stack 0
  2032  000077                     ARP_parseFromRXBuffer@frame:
  2033                           	opt stack 0
  2034  000077                     ipv4_writeHeaderIntoBuffer@ptr:
  2035                           	opt stack 0
  2036  000077                     ipAdressToString@hundreds:
  2037                           	opt stack 0
  2038                           
  2039                           ; 4 bytes @ 0x17
  2040  000077                     	ds	1
  2041  000078                     ??_ethernetController_getEtherTypeField:
  2042  000078                     ?_ethernetController_pollInterruptFlags:
  2043                           	opt stack 0
  2044  000078                     ethernetController_getSourceMACAddress@opcode:
  2045                           	opt stack 0
  2046  000078                     ethernetController_updateNextPacketPointer@newPointerL:
  2047                           	opt stack 0
  2048  000078                     ENC424J600_readPHYRegister@unusedBits:
  2049                           	opt stack 0
  2050                           
  2051                           ; 1 bytes @ 0x18
  2052  000078                     	ds	1
  2053  000079                     ??_ipv4_writeHeaderIntoBuffer:
  2054  000079                     ethernetController_updateNextPacketPointer@newPointerH:
  2055                           	opt stack 0
  2056  000079                     ENC424J600_readPHYRegister@timeoutCounter:
  2057                           	opt stack 0
  2058  000079                     ethernetController_getSourceMACAddress@sourceAddress:
  2059                           	opt stack 0
  2060                           
  2061                           ; 6 bytes @ 0x19
  2062  000079                     	ds	1
  2063  00007A                     ??_ethernetController_pollInterruptFlags:
  2064  00007A                     ?_macToString:
  2065                           	opt stack 0
  2066  00007A                     ethernetController_writeEtherTypeFieldToBuffer@lowByte:
  2067                           	opt stack 0
  2068  00007A                     ARP_setNewEntry@oldestIndex:
  2069                           	opt stack 0
  2070  00007A                     macToString@addr:
  2071                           	opt stack 0
  2072                           
  2073                           ; 6 bytes @ 0x1A
  2074  00007A                     	ds	1
  2075  00007B                     ethernetController_writeEtherTypeFieldToBuffer@highByte:
  2076                           	opt stack 0
  2077  00007B                     ipAdressToString@pointer:
  2078                           	opt stack 0
  2079  00007B                     ARP_setNewEntry@i:
  2080                           	opt stack 0
  2081  00007B                     ethernetController_pollInterruptFlags@flags:
  2082                           	opt stack 0
  2083  00007B                     checkForOverlap@b:
  2084                           	opt stack 0
  2085                           
  2086                           ; 9 bytes @ 0x1B
  2087  00007B                     	ds	1
  2088  00007C                     ethernetController_writeEtherTypeFieldToBuffer@opcode:
  2089                           	opt stack 0
  2090  00007C                     ipAdressToString@i:
  2091                           	opt stack 0
  2092  00007C                     ethernetController_getEtherTypeField@ethertype:
  2093                           	opt stack 0
  2094  00007C                     ARP_initTable@mac:
  2095                           	opt stack 0
  2096                           
  2097                           ; 6 bytes @ 0x1C
  2098  00007C                     	ds	1
  2099  00007D                     ENC424J600_readPHYRegister@lowByte:
  2100                           	opt stack 0
  2101  00007D                     ethernetController_pollInterruptFlags@reg:
  2102                           	opt stack 0
  2103                           
  2104                           ; 2 bytes @ 0x1D
  2105  00007D                     	ds	1
  2106  00007E                     ethernetController_getEtherTypeField@opcode:
  2107                           	opt stack 0
  2108  00007E                     ENC424J600_readPHYRegister@highByte:
  2109                           	opt stack 0
  2110  00007E                     ethernetController_writeDestinationMACAddress@data:
  2111                           	opt stack 0
  2112                           
  2113                           ; 6 bytes @ 0x1E
  2114  00007E                     	ds	1
  2115  00007F                     ethernetController_getSourceMACAddress@temp:
  2116                           	opt stack 0
  2117  00007F                     ethernetController_getEtherTypeField@lowByte:
  2118                           	opt stack 0
  2119  00007F                     ENC424J600_readPHYRegister@temp:
  2120                           	opt stack 0
  2121                           
  2122                           ; 1 bytes @ 0x1F
  2123  00007F                     	ds	1
  2124  000080                     ??_macToString:
  2125  000080                     ethernetController_getSourceMACAddress@i:
  2126                           	opt stack 0
  2127  000080                     ethernetController_getEtherTypeField@highByte:
  2128                           	opt stack 0
  2129  000080                     ethernetController_updateLinkStatus@state:
  2130                           	opt stack 0
  2131                           
  2132                           ; 2 bytes @ 0x20
  2133  000080                     	ds	1
  2134  000081                     intToString@tens:
  2135                           	opt stack 0
  2136  000081                     macToString@address:
  2137                           	opt stack 0
  2138                           
  2139                           ; 18 bytes @ 0x21
  2140  000081                     	ds	1
  2141  000082                     ethernetController_updateLinkStatus@temp:
  2142                           	opt stack 0
  2143  000082                     intToString@ones:
  2144                           	opt stack 0
  2145  000082                     ARP_initTable@ip:
  2146                           	opt stack 0
  2147                           
  2148                           ; 4 bytes @ 0x22
  2149  000082                     	ds	1
  2150  000083                     ethernetController_updateLinkStatus@temp16:
  2151                           	opt stack 0
  2152  000083                     intToString@hundreds:
  2153                           	opt stack 0
  2154                           
  2155                           ; 1 bytes @ 0x23
  2156  000083                     	ds	1
  2157  000084                     ?_memory_txFrameRequest:
  2158                           	opt stack 0
  2159  000084                     ethernetController_writeDestinationMACAddress@opcode:
  2160                           	opt stack 0
  2161  000084                     intToString@thousands:
  2162                           	opt stack 0
  2163  000084                     memory_txFrameRequest@length:
  2164                           	opt stack 0
  2165                           
  2166                           ; 2 bytes @ 0x24
  2167  000084                     	ds	1
  2168  000085                     ethernetController_writeDestinationMACAddress@i_624:
  2169                           	opt stack 0
  2170  000085                     intToString@tenthousands:
  2171                           	opt stack 0
  2172                           
  2173                           ; 1 bytes @ 0x25
  2174  000085                     	ds	1
  2175  000086                     ethernetController_writeDestinationMACAddress@i:
  2176                           	opt stack 0
  2177  000086                     intToString@pointer:
  2178                           	opt stack 0
  2179  000086                     ARP_initTable@i:
  2180                           	opt stack 0
  2181                           
  2182                           ; 1 bytes @ 0x26
  2183  000086                     	ds	7
  2184  00008D                     ??_memory_txFrameRequest:
  2185                           
  2186                           ; 1 bytes @ 0x2D
  2187  00008D                     	ds	6
  2188  000093                     macToString@firstDigit:
  2189                           	opt stack 0
  2190  000093                     _memory_txFrameRequest$1143:
  2191                           	opt stack 0
  2192                           
  2193                           ; 2 bytes @ 0x33
  2194  000093                     	ds	1
  2195  000094                     macToString@secondDigit:
  2196                           	opt stack 0
  2197                           
  2198                           ; 1 bytes @ 0x34
  2199  000094                     	ds	1
  2200  000095                     memory_txFrameRequest@fNoOverlapMarker:
  2201                           	opt stack 0
  2202  000095                     macToString@i:
  2203                           	opt stack 0
  2204                           
  2205                           ; 2 bytes @ 0x35
  2206  000095                     	ds	1
  2207  000096                     memory_txFrameRequest@i:
  2208                           	opt stack 0
  2209                           
  2210                           ; 1 bytes @ 0x36
  2211  000096                     	ds	1
  2212  000097                     ??_ARP_parseFromRXBuffer:
  2213  000097                     memory_txFrameRequest@i_1147:
  2214                           	opt stack 0
  2215  000097                     macToString@j:
  2216                           	opt stack 0
  2217                           
  2218                           ; 1 bytes @ 0x37
  2219  000097                     	ds	1
  2220  000098                     UARTTransmitText@str:
  2221                           	opt stack 0
  2222  000098                     memory_txFrameRequest@field:
  2223                           	opt stack 0
  2224                           
  2225                           ; 9 bytes @ 0x38
  2226  000098                     	ds	2
  2227  00009A                     ?_ethernetController_softReset:
  2228                           	opt stack 0
  2229  00009A                     ARP_parseFromRXBuffer@i:
  2230                           	opt stack 0
  2231  00009A                     ipv4_handleNewPacket@frame:
  2232                           	opt stack 0
  2233  00009A                     printErrorMessage@err:
  2234                           	opt stack 0
  2235  00009A                     UARTTransmitInt@val:
  2236                           	opt stack 0
  2237  00009A                     printEthernetState@state:
  2238                           	opt stack 0
  2239                           
  2240                           ; 15 bytes @ 0x3A
  2241  00009A                     	ds	1
  2242  00009B                     ARP_parseFromRXBuffer@i_2556:
  2243                           	opt stack 0
  2244                           
  2245                           ; 1 bytes @ 0x3B
  2246  00009B                     	ds	1
  2247  00009C                     ARP_parseFromRXBuffer@i_2557:
  2248                           	opt stack 0
  2249                           
  2250                           ; 1 bytes @ 0x3C
  2251  00009C                     	ds	1
  2252  00009D                     ??_ethernetController_softReset:
  2253  00009D                     ??_printErrorMessage:
  2254  00009D                     ARP_parseFromRXBuffer@i_2558:
  2255                           	opt stack 0
  2256                           
  2257                           ; 1 bytes @ 0x3D
  2258  00009D                     	ds	1
  2259  00009E                     ethernetController_softReset@comFailCount:
  2260                           	opt stack 0
  2261  00009E                     ARP_parseFromRXBuffer@offset:
  2262                           	opt stack 0
  2263                           
  2264                           ; 2 bytes @ 0x3E
  2265  00009E                     	ds	1
  2266  00009F                     ethernetController_softReset@dataToSend:
  2267                           	opt stack 0
  2268                           
  2269                           ; 2 bytes @ 0x3F
  2270  00009F                     	ds	1
  2271  0000A0                     ARP_parseFromRXBuffer@arp:
  2272                           	opt stack 0
  2273                           
  2274                           ; 32 bytes @ 0x40
  2275  0000A0                     	ds	1
  2276  0000A1                     memory_txFrameRequest@freeIndex:
  2277                           	opt stack 0
  2278  0000A1                     ethernetController_softReset@receivedData:
  2279                           	opt stack 0
  2280                           
  2281                           ; 2 bytes @ 0x41
  2282  0000A1                     	ds	1
  2283  0000A2                     ethernet_txFrameRequest@frame:
  2284                           	opt stack 0
  2285                           
  2286                           ; 2 bytes @ 0x42
  2287  0000A2                     	ds	1
  2288  0000A3                     ethernetController_softReset@err:
  2289                           	opt stack 0
  2290                           
  2291                           ; 3 bytes @ 0x43
  2292  0000A3                     	ds	1
  2293  0000A4                     ethernet_txFrameRequest@err:
  2294                           	opt stack 0
  2295                           
  2296                           ; 3 bytes @ 0x44
  2297  0000A4                     	ds	2
  2298  0000A6                     ?_ethernetController_init:
  2299                           	opt stack 0
  2300                           
  2301                           ; 3 bytes @ 0x46
  2302  0000A6                     	ds	1
  2303  0000A7                     ipv4_txFrameRequest@packet:
  2304                           	opt stack 0
  2305  0000A7                     ARP_send@arp:
  2306                           	opt stack 0
  2307                           
  2308                           ; 32 bytes @ 0x47
  2309  0000A7                     	ds	2
  2310  0000A9                     ??_ipv4_txFrameRequest:
  2311  0000A9                     ethernetController_init@err:
  2312                           	opt stack 0
  2313                           
  2314                           ; 3 bytes @ 0x49
  2315  0000A9                     	ds	7
  2316  0000B0                     ??_ipv4_streamToTransmissionBuffer:
  2317                           
  2318                           ; 1 bytes @ 0x50
  2319  0000B0                     	ds	4
  2320  0000B4                     ipv4_streamToTransmissionBuffer@data:
  2321                           	opt stack 0
  2322                           
  2323                           ; 1 bytes @ 0x54
  2324  0000B4                     	ds	1
  2325  0000B5                     ipv4_streamToTransmissionBuffer@ethernetPacketLength:
  2326                           	opt stack 0
  2327                           
  2328                           ; 2 bytes @ 0x55
  2329  0000B5                     	ds	18
  2330  0000C7                     ARP_send@destination:
  2331                           	opt stack 0
  2332                           
  2333                           ; 6 bytes @ 0x67
  2334  0000C7                     	ds	6
  2335  0000CD                     ARP_send@i:
  2336                           	opt stack 0
  2337                           
  2338                           ; 1 bytes @ 0x6D
  2339  0000CD                     	ds	1
  2340  0000CE                     ARP_send@i_2680:
  2341                           	opt stack 0
  2342                           
  2343                           ; 1 bytes @ 0x6E
  2344  0000CE                     	ds	1
  2345  0000CF                     ARP_send@i_2681:
  2346                           	opt stack 0
  2347                           
  2348                           ; 1 bytes @ 0x6F
  2349  0000CF                     	ds	1
  2350  0000D0                     ARP_send@i_2682:
  2351                           	opt stack 0
  2352                           
  2353                           ; 1 bytes @ 0x70
  2354  0000D0                     	ds	1
  2355  0000D1                     ARP_send@ethFrame:
  2356                           	opt stack 0
  2357                           
  2358                           ; 30 bytes @ 0x71
  2359  0000D1                     	ds	30
  2360  0000EF                     ARP_send@field:
  2361                           	opt stack 0
  2362                           
  2363                           ; 9 bytes @ 0x8F
  2364  0000EF                     	ds	9
  2365  0000F8                     ARP_handleNewPacket@frame:
  2366                           	opt stack 0
  2367  0000F8                     ARP_sendRequest@ip:
  2368                           	opt stack 0
  2369                           
  2370                           ; 4 bytes @ 0x98
  2371  0000F8                     	ds	2
  2372  0000FA                     
  2373                           ; 1 bytes @ 0x9A
  2374  0000FA                     	ds	2
  2375  0000FC                     ethernet_rxGetNewFrame@err:
  2376                           	opt stack 0
  2377                           
  2378                           ; 3 bytes @ 0x9C
  2379  0000FC                     	ds	3
  2380                           tblptru	equ	0xFF8
  2381                           tblptrh	equ	0xFF7
  2382                           tblptrl	equ	0xFF6
  2383                           tablat	equ	0xFF5
  2384                           postinc0	equ	0xFEE
  2385                           wreg	equ	0xFE8
  2386                           postdec1	equ	0xFE5
  2387                           fsr1l	equ	0xFE1
  2388                           
  2389                           	psect	cstackCOMRAM
  2390  000001                     __pcstackCOMRAM:
  2391                           	opt stack 0
  2392  000001                     ?i2___lwdiv:
  2393                           	opt stack 0
  2394  000001                     buttonHandler@state:
  2395                           	opt stack 0
  2396  000001                     i2___lwdiv@dividend:
  2397                           	opt stack 0
  2398                           
  2399                           ; 2 bytes @ 0x0
  2400  000001                     	ds	2
  2401  000003                     i2___lwdiv@divisor:
  2402                           	opt stack 0
  2403  000003                     buttonHandler@debounceValue:
  2404                           	opt stack 0
  2405                           
  2406                           ; 4 bytes @ 0x2
  2407  000003                     	ds	2
  2408  000005                     i2___lwdiv@quotient:
  2409                           	opt stack 0
  2410                           
  2411                           ; 2 bytes @ 0x4
  2412  000005                     	ds	2
  2413  000007                     i2___lwdiv@counter:
  2414                           	opt stack 0
  2415                           
  2416                           ; 1 bytes @ 0x6
  2417  000007                     	ds	1
  2418  000008                     parseNumber@numberToDisplay:
  2419                           	opt stack 0
  2420                           
  2421                           ; 2 bytes @ 0x7
  2422  000008                     	ds	2
  2423  00000A                     parseNumber@digit:
  2424                           	opt stack 0
  2425                           
  2426                           ; 1 bytes @ 0x9
  2427  00000A                     	ds	1
  2428  00000B                     ??_parseNumber:
  2429                           
  2430                           ; 1 bytes @ 0xA
  2431  00000B                     	ds	1
  2432  00000C                     parseNumber@ones:
  2433                           	opt stack 0
  2434                           
  2435                           ; 1 bytes @ 0xB
  2436  00000C                     	ds	1
  2437  00000D                     parseNumber@tens:
  2438                           	opt stack 0
  2439                           
  2440                           ; 1 bytes @ 0xC
  2441  00000D                     	ds	1
  2442  00000E                     parseNumber@hundreds:
  2443                           	opt stack 0
  2444                           
  2445                           ; 1 bytes @ 0xD
  2446  00000E                     	ds	1
  2447  00000F                     sevenSegmentUpdate@numberToDisplay:
  2448                           	opt stack 0
  2449                           
  2450                           ; 2 bytes @ 0xE
  2451  00000F                     	ds	2
  2452  000011                     ??_sevenSegmentUpdate:
  2453                           
  2454                           ; 1 bytes @ 0x10
  2455  000011                     	ds	2
  2456  000013                     _sevenSegmentUpdate$2058:
  2457                           	opt stack 0
  2458                           
  2459                           ; 2 bytes @ 0x12
  2460  000013                     	ds	2
  2461  000015                     sevenSegmentUpdate@i:
  2462                           	opt stack 0
  2463                           
  2464                           ; 1 bytes @ 0x14
  2465  000015                     	ds	1
  2466  000016                     ??_ISR:
  2467                           
  2468                           ; 1 bytes @ 0x15
  2469  000016                     	ds	18
  2470                           tblptru	equ	0xFF8
  2471                           tblptrh	equ	0xFF7
  2472                           tblptrl	equ	0xFF6
  2473                           tablat	equ	0xFF5
  2474                           postinc0	equ	0xFEE
  2475                           wreg	equ	0xFE8
  2476                           postdec1	equ	0xFE5
  2477                           fsr1l	equ	0xFE1
  2478                           
  2479 ;;
  2480 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  2481 ;;
  2482 ;; *************** function _main *****************
  2483 ;; Defined at:
  2484 ;;		line 32 in file "src/system/main.c"
  2485 ;; Parameters:    Size  Location     Type
  2486 ;;		None
  2487 ;; Auto vars:     Size  Location     Type
  2488 ;;  i               1   38[BANK3 ] unsigned char 
  2489 ;;  headerBuf      32    4[BANK3 ] unsigned char [32]
  2490 ;;  IPdestinatio    4   46[BANK3 ] struct ipv4_address
  2491 ;;  IPsource        4   42[BANK3 ] struct ipv4_address
  2492 ;;  prescaler       4    0[BANK3 ] unsigned long 
  2493 ;;  err             3   39[BANK3 ] struct error
  2494 ;;  oldState        1    0        unsigned char 
  2495 ;; Return value:  Size  Location     Type
  2496 ;;                  1    wreg      void 
  2497 ;; Registers used:
  2498 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2499 ;; Tracked objects:
  2500 ;;		On entry : 0/0
  2501 ;;		On exit  : 0/0
  2502 ;;		Unchanged: 0/0
  2503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2504 ;;      Params:         0       0       0       0       0       0       0       0       0
  2505 ;;      Locals:         0       0       0       0      50       0       0       0       0
  2506 ;;      Temps:          0       0       3       0       0       0       0       0       0
  2507 ;;      Totals:         0       0       3       0      50       0       0       0       0
  2508 ;;Total ram usage:       53 bytes
  2509 ;; Hardware stack levels required when called:   14
  2510 ;; This function calls:
  2511 ;;		_ARP_initTable
  2512 ;;		_UARTInit
  2513 ;;		_UARTTransmitInt
  2514 ;;		_UARTTransmitText
  2515 ;;		_ethernetController_checkDeviceId
  2516 ;;		_ethernetController_getCurrentPacketCount
  2517 ;;		_ethernetController_getDeviceName
  2518 ;;		_ethernetController_getMacAddress
  2519 ;;		_ethernetController_getSiliconRevision
  2520 ;;		_ethernetController_init
  2521 ;;		_ethernetController_setLEDStatus
  2522 ;;		_handleStackBackgroundTasks
  2523 ;;		_ipv4_calculateHeaderChecksum
  2524 ;;		_ipv4_streamToTransmissionBuffer
  2525 ;;		_ipv4_txFrameRequest
  2526 ;;		_ipv4_writeHeaderIntoBuffer
  2527 ;;		_macToString
  2528 ;;		_printErrorMessage
  2529 ;;		_printEthernetState
  2530 ;;		_sevenSegmentInit
  2531 ;; This function is called by:
  2532 ;;		Startup code after reset
  2533 ;; This function uses a non-reentrant model
  2534 ;;
  2535                           
  2536                           	psect	text0
  2537  000E4E                     __ptext0:
  2538                           	opt stack 0
  2539  000E4E                     _main:
  2540                           	opt stack 17
  2541                           
  2542                           ;main.c: 35: OSCCONbits.SCS = 0b00;
  2543                           
  2544                           ;incstack = 0
  2545  000E4E  0EFC               	movlw	-4
  2546  000E50  16D3               	andwf	4051,f,c	;volatile
  2547                           
  2548                           ;main.c: 36: OSCCONbits.IRCF = 0b1110;
  2549  000E52  50D3               	movf	4051,w,c	;volatile
  2550  000E54  0B8F               	andlw	-113
  2551  000E56  0960               	iorlw	96
  2552  000E58  6ED3               	movwf	4051,c	;volatile
  2553                           
  2554                           ;main.c: 37: OSCCON2bits.PLLEN = 0b1;
  2555  000E5A  88D2               	bsf	4050,4,c	;volatile
  2556                           
  2557                           ;main.c: 40: INTCONbits.GIE = 0;
  2558  000E5C  9EF2               	bcf	intcon,7,c	;volatile
  2559                           
  2560                           ;main.c: 41: INTCONbits.TMR0IE = 1;
  2561  000E5E  8AF2               	bsf	intcon,5,c	;volatile
  2562                           
  2563                           ;main.c: 42: INTCON3bits.INT2IE = 1;
  2564  000E60  88F0               	bsf	intcon3,4,c	;volatile
  2565                           
  2566                           ;main.c: 43: RCIP = 0;
  2567  000E62  9A9F               	bcf	3999,5,c	;volatile
  2568                           
  2569                           ;main.c: 44: RCIE = 1;
  2570  000E64  8A9D               	bsf	3997,5,c	;volatile
  2571                           
  2572                           ;main.c: 45: INTCONbits.PEIE = 1;
  2573  000E66  8CF2               	bsf	intcon,6,c	;volatile
  2574                           
  2575                           ;main.c: 49: T0CONbits.TMR0ON = 1;
  2576  000E68  8ED5               	bsf	4053,7,c	;volatile
  2577                           
  2578                           ;main.c: 50: T0CONbits.T08BIT = 1;
  2579  000E6A  8CD5               	bsf	4053,6,c	;volatile
  2580                           
  2581                           ;main.c: 51: T0CONbits.T0CS = 0;
  2582  000E6C  9AD5               	bcf	4053,5,c	;volatile
  2583                           
  2584                           ;main.c: 52: T0CONbits.PSA = 0;
  2585  000E6E  96D5               	bcf	4053,3,c	;volatile
  2586                           
  2587                           ;main.c: 53: T0CONbits.T0PS = 0b101;
  2588  000E70  50D5               	movf	4053,w,c	;volatile
  2589  000E72  0BF8               	andlw	-8
  2590  000E74  0905               	iorlw	5
  2591  000E76  6ED5               	movwf	4053,c	;volatile
  2592                           
  2593                           ;main.c: 55: UARTInit();
  2594  000E78  EC50  F023         	call	_UARTInit	;wreg free
  2595                           
  2596                           ;main.c: 56: sevenSegmentInit();
  2597  000E7C  EC0F  F023         	call	_sevenSegmentInit	;wreg free
  2598                           
  2599                           ;main.c: 57: _delay((unsigned long)((10)*(32000000UL/4000.0)));
  2600  000E80  0E68               	movlw	104
  2601  000E82  0101               	movlb	1	; () banked
  2602  000E84  6F88               	movwf	??_main& (0+255),b
  2603  000E86  0EE4               	movlw	228
  2604  000E88                     u11067:
  2605  000E88  2EE8               	decfsz	wreg,f,c
  2606  000E8A  D7FE               	bra	u11067
  2607  000E8C  2F88               	decfsz	??_main& (0+255),f,b
  2608  000E8E  D7FC               	bra	u11067
  2609  000E90  F000               	nop	
  2610                           
  2611                           ;main.c: 58: UARTTransmitText("FIRMWARE BUILD DATE IS ");
  2612  000E92  0E34               	movlw	low STR_22
  2613  000E94  0100               	movlb	0	; () banked
  2614  000E96  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2615  000E98  0E7E               	movlw	high STR_22
  2616  000E9A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2617  000E9C  EC18  F01F         	call	_UARTTransmitText	;wreg free
  2618                           
  2619                           ;main.c: 59: UARTTransmitText("Feb 28 2019");
  2620  000EA0  0E7F               	movlw	low STR_23
  2621  000EA2  0100               	movlb	0	; () banked
  2622  000EA4  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2623  000EA6  0E7F               	movlw	high STR_23
  2624  000EA8  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2625  000EAA  EC18  F01F         	call	_UARTTransmitText	;wreg free
  2626                           
  2627                           ;main.c: 60: UARTTransmitText(" ");
  2628  000EAE  0E8A               	movlw	low (STR_38+18)
  2629  000EB0  0100               	movlb	0	; () banked
  2630  000EB2  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2631  000EB4  0E7E               	movlw	high (STR_38+18)
  2632  000EB6  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2633  000EB8  EC18  F01F         	call	_UARTTransmitText	;wreg free
  2634                           
  2635                           ;main.c: 61: UARTTransmitText("23:02:30");
  2636  000EBC  0EB4               	movlw	low STR_25
  2637  000EBE  0100               	movlb	0	; () banked
  2638  000EC0  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2639  000EC2  0E7F               	movlw	high STR_25
  2640  000EC4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2641  000EC6  EC18  F01F         	call	_UARTTransmitText	;wreg free
  2642                           
  2643                           ;main.c: 62: UARTTransmitText("\n\r");
  2644  000ECA  0EF7               	movlw	low (STR_34+48)
  2645  000ECC  0100               	movlb	0	; () banked
  2646  000ECE  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2647  000ED0  0E7C               	movlw	high (STR_34+48)
  2648  000ED2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2649  000ED4  EC18  F01F         	call	_UARTTransmitText	;wreg free
  2650                           
  2651                           ;main.c: 63: UARTTransmitText("Initialising Ethernet Controller...\n\r");
  2652  000ED8  0E21               	movlw	low STR_27
  2653  000EDA  0100               	movlb	0	; () banked
  2654  000EDC  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2655  000EDE  0E7D               	movlw	high STR_27
  2656  000EE0  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2657  000EE2  EC18  F01F         	call	_UARTTransmitText	;wreg free
  2658                           
  2659                           ;main.c: 64: error_t err;
  2660                           ;main.c: 65: err = ethernetController_init();
  2661  000EE6  EC3C  F01D         	call	_ethernetController_init	;wreg free
  2662  000EEA  C0A6  F397         	movff	?_ethernetController_init,main@err
  2663  000EEE  C0A7  F398         	movff	?_ethernetController_init+1,main@err+1
  2664  000EF2  C0A8  F399         	movff	?_ethernetController_init+2,main@err+2
  2665                           
  2666                           ;main.c: 66: if (err.code != (uint16_t)0)
  2667  000EF6  0103               	movlb	3	; () banked
  2668  000EF8  5198               	movf	(main@err+1)& (0+255),w,b
  2669  000EFA  1199               	iorwf	(main@err+2)& (0+255),w,b
  2670  000EFC  B4D8               	btfsc	status,2,c
  2671  000EFE  D008               	goto	l606
  2672                           
  2673                           ; BSR set to: 3
  2674                           ;main.c: 67: printErrorMessage(err);
  2675  000F00  C397  F09A         	movff	main@err,printErrorMessage@err
  2676  000F04  C398  F09B         	movff	main@err+1,printErrorMessage@err+1
  2677  000F08  C399  F09C         	movff	main@err+2,printErrorMessage@err+2
  2678  000F0C  ECDF  F015         	call	_printErrorMessage	;wreg free
  2679  000F10                     l606:
  2680                           
  2681                           ;main.c: 68: err = ethernetController_checkDeviceId();
  2682  000F10  ECE7  F01F         	call	_ethernetController_checkDeviceId	;wreg free
  2683  000F14  C06E  F397         	movff	?_ethernetController_checkDeviceId,main@err
  2684  000F18  C06F  F398         	movff	?_ethernetController_checkDeviceId+1,main@err+1
  2685  000F1C  C070  F399         	movff	?_ethernetController_checkDeviceId+2,main@err+2
  2686                           
  2687                           ;main.c: 69: if (err.code == (uint16_t)0) {
  2688  000F20  0103               	movlb	3	; () banked
  2689  000F22  5198               	movf	(main@err+1)& (0+255),w,b
  2690  000F24  1199               	iorwf	(main@err+2)& (0+255),w,b
  2691  000F26  A4D8               	btfss	status,2,c
  2692  000F28  D00F               	goto	l607
  2693                           
  2694                           ; BSR set to: 3
  2695                           ;main.c: 70: UARTTransmitText(ethernetController_getDeviceName());
  2696  000F2A  ECA4  F022         	call	_ethernetController_getDeviceName	;wreg free
  2697  000F2E  C060  F098         	movff	?_ethernetController_getDeviceName,UARTTransmitText@str
  2698  000F32  C061  F099         	movff	?_ethernetController_getDeviceName+1,UARTTransmitText@str+1
  2699  000F36  EC18  F01F         	call	_UARTTransmitText	;wreg free
  2700                           
  2701                           ;main.c: 71: UARTTransmitText(" detected. ");
  2702  000F3A  0E73               	movlw	low STR_28
  2703  000F3C  0100               	movlb	0	; () banked
  2704  000F3E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2705  000F40  0E7F               	movlw	high STR_28
  2706  000F42  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2707  000F44  EC18  F01F         	call	_UARTTransmitText	;wreg free
  2708  000F48                     l607:
  2709                           
  2710                           ;main.c: 72: }
  2711                           ;main.c: 73: UARTTransmitText("Silicon revision is ");
  2712  000F48  0E63               	movlw	low STR_29
  2713  000F4A  0100               	movlb	0	; () banked
  2714  000F4C  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2715  000F4E  0E7E               	movlw	high STR_29
  2716  000F50  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2717  000F52  EC18  F01F         	call	_UARTTransmitText	;wreg free
  2718                           
  2719                           ;main.c: 74: UARTTransmitInt(ethernetController_getSiliconRevision());
  2720  000F56  ECC7  F022         	call	_ethernetController_getSiliconRevision	;wreg free
  2721  000F5A  0101               	movlb	1	; () banked
  2722  000F5C  6F88               	movwf	??_main& (0+255),b
  2723  000F5E  5188               	movf	??_main& (0+255),w,b
  2724  000F60  0100               	movlb	0	; () banked
  2725  000F62  6F9A               	movwf	UARTTransmitInt@val& (0+255),b
  2726  000F64  6B9B               	clrf	(UARTTransmitInt@val+1)& (0+255),b
  2727  000F66  6B9C               	clrf	(UARTTransmitInt@val+2)& (0+255),b
  2728  000F68  6B9D               	clrf	(UARTTransmitInt@val+3)& (0+255),b
  2729  000F6A  ECB6  F022         	call	_UARTTransmitInt	;wreg free
  2730                           
  2731                           ;main.c: 75: UARTTransmitText(".\n\r");
  2732  000F6E  0EE5               	movlw	low (STR_51+1)
  2733  000F70  0100               	movlb	0	; () banked
  2734  000F72  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2735  000F74  0E7F               	movlw	high (STR_51+1)
  2736  000F76  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2737  000F78  EC18  F01F         	call	_UARTTransmitText	;wreg free
  2738                           
  2739                           ;main.c: 76: UARTTransmitText("Source MAC address is ");
  2740  000F7C  0E4C               	movlw	low STR_31
  2741  000F7E  0100               	movlb	0	; () banked
  2742  000F80  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2743  000F82  0E7E               	movlw	high STR_31
  2744  000F84  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2745  000F86  EC18  F01F         	call	_UARTTransmitText	;wreg free
  2746                           
  2747                           ;main.c: 77: UARTTransmitText(macToString(ethernetController_getMacAddress()));
  2748  000F8A  EC02  F01D         	call	_ethernetController_getMacAddress	;wreg free
  2749  000F8E  CFE9 FFD9          	movff	fsr0l,fsr2l
  2750  000F92  CFEA FFDA          	movff	fsr0h,fsr2h
  2751  000F96  EE00  F07A         	lfsr	0,macToString@addr
  2752  000F9A  0E05               	movlw	5
  2753  000F9C                     u10931:
  2754  000F9C  CFDB FFEB          	movff	plusw2,plusw0
  2755  000FA0  06E8               	decf	wreg,f,c
  2756  000FA2  E2FC               	bc	u10931
  2757  000FA4  EC6A  F016         	call	_macToString	;wreg free
  2758  000FA8  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  2759  000FAC  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  2760  000FB0  EC18  F01F         	call	_UARTTransmitText	;wreg free
  2761                           
  2762                           ;main.c: 78: UARTTransmitText(".\n\r");
  2763  000FB4  0EE5               	movlw	low (STR_51+1)
  2764  000FB6  0100               	movlb	0	; () banked
  2765  000FB8  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2766  000FBA  0E7F               	movlw	high (STR_51+1)
  2767  000FBC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2768  000FBE  EC18  F01F         	call	_UARTTransmitText	;wreg free
  2769                           
  2770                           ;main.c: 79: UARTTransmitText("Initialisation completed.\n\r");
  2771  000FC2  0EFF               	movlw	low STR_33
  2772  000FC4  0100               	movlb	0	; () banked
  2773  000FC6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2774  000FC8  0E7D               	movlw	high STR_33
  2775  000FCA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2776  000FCC  EC18  F01F         	call	_UARTTransmitText	;wreg free
  2777                           
  2778                           ;main.c: 80: UARTTransmitText("------------------------------------------------\n\r");
  2779  000FD0  0EC7               	movlw	low STR_34
  2780  000FD2  0100               	movlb	0	; () banked
  2781  000FD4  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2782  000FD6  0E7C               	movlw	high STR_34
  2783  000FD8  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2784  000FDA  EC18  F01F         	call	_UARTTransmitText	;wreg free
  2785                           
  2786                           ;main.c: 82: ARP_initTable();
  2787  000FDE  EC82  F01E         	call	_ARP_initTable	;wreg free
  2788                           
  2789                           ;main.c: 85: ethernetController_setLEDStatus(LEDA, LED_ON);
  2790  000FE2  0E00               	movlw	0
  2791  000FE4  0100               	movlb	0	; () banked
  2792  000FE6  6F6E               	movwf	ethernetController_setLEDStatus@status& (0+255),b
  2793  000FE8  0E00               	movlw	0
  2794  000FEA  ECE7  F01E         	call	_ethernetController_setLEDStatus
  2795                           
  2796                           ;main.c: 86: ethernetController_setLEDStatus(LEDB, LED_ON);
  2797  000FEE  0E00               	movlw	0
  2798  000FF0  0100               	movlb	0	; () banked
  2799  000FF2  6F6E               	movwf	ethernetController_setLEDStatus@status& (0+255),b
  2800  000FF4  0E01               	movlw	1
  2801  000FF6  ECE7  F01E         	call	_ethernetController_setLEDStatus
  2802                           
  2803                           ;main.c: 87: _delay((unsigned long)((500)*(32000000UL/4000.0)));
  2804  000FFA  0E15               	movlw	21
  2805  000FFC  0101               	movlb	1	; () banked
  2806  000FFE  6F89               	movwf	(??_main+1)& (0+255),b
  2807  001000  0E4B               	movlw	75
  2808  001002  6F88               	movwf	??_main& (0+255),b
  2809  001004  0EBE               	movlw	190
  2810  001006                     u11077:
  2811  001006  2EE8               	decfsz	wreg,f,c
  2812  001008  D7FE               	bra	u11077
  2813  00100A  2F88               	decfsz	??_main& (0+255),f,b
  2814  00100C  D7FC               	bra	u11077
  2815  00100E  2F89               	decfsz	(??_main+1)& (0+255),f,b
  2816  001010  D7FA               	bra	u11077
  2817  001012  F000               	nop	
  2818                           
  2819                           ;main.c: 89: ethernetController_setLEDStatus(LEDA, LED_OFF);
  2820  001014  0E01               	movlw	1
  2821  001016  0100               	movlb	0	; () banked
  2822  001018  6F6E               	movwf	ethernetController_setLEDStatus@status& (0+255),b
  2823  00101A  0E00               	movlw	0
  2824  00101C  ECE7  F01E         	call	_ethernetController_setLEDStatus
  2825                           
  2826                           ;main.c: 90: ethernetController_setLEDStatus(LEDB, LED_OFF);
  2827  001020  0E01               	movlw	1
  2828  001022  0100               	movlb	0	; () banked
  2829  001024  6F6E               	movwf	ethernetController_setLEDStatus@status& (0+255),b
  2830  001026  0E01               	movlw	1
  2831  001028  ECE7  F01E         	call	_ethernetController_setLEDStatus
  2832                           
  2833                           ;main.c: 93: uint32_t prescaler = 0;
  2834  00102C  0E00               	movlw	0
  2835  00102E  0103               	movlb	3	; () banked
  2836  001030  6F70               	movwf	main@prescaler& (0+255),b
  2837  001032  0E00               	movlw	0
  2838  001034  6F71               	movwf	(main@prescaler+1)& (0+255),b
  2839  001036  0E00               	movlw	0
  2840  001038  6F72               	movwf	(main@prescaler+2)& (0+255),b
  2841  00103A  0E00               	movlw	0
  2842  00103C  6F73               	movwf	(main@prescaler+3)& (0+255),b
  2843                           
  2844                           ; BSR set to: 3
  2845                           ;main.c: 95: ANSELB &= ~(1<<5);
  2846  00103E  010F               	movlb	15	; () banked
  2847  001040  9B5C               	bcf	92,5,b	;volatile
  2848                           
  2849                           ; BSR set to: 15
  2850                           ;main.c: 96: TRISB |= (1<<5);
  2851  001042  8A93               	bsf	3987,5,c	;volatile
  2852                           
  2853                           ; BSR set to: 15
  2854                           ;main.c: 98: uint8_t oldState;
  2855                           ;main.c: 101: stack.ethernet.destination.address[0] = 0x80;
  2856  001044  0E80               	movlw	128
  2857  001046  0102               	movlb	2	; () banked
  2858  001048  6F51               	movwf	(_stack+9)& (0+255),b	;volatile
  2859                           
  2860                           ; BSR set to: 2
  2861                           ;main.c: 102: stack.ethernet.destination.address[1] = 0x1F;
  2862  00104A  0E1F               	movlw	31
  2863  00104C  6F52               	movwf	(_stack+10)& (0+255),b	;volatile
  2864                           
  2865                           ; BSR set to: 2
  2866                           ;main.c: 103: stack.ethernet.destination.address[2] = 0x12;
  2867  00104E  0E12               	movlw	18
  2868  001050  6F53               	movwf	(_stack+11)& (0+255),b	;volatile
  2869                           
  2870                           ; BSR set to: 2
  2871                           ;main.c: 104: stack.ethernet.destination.address[3] = 0x1B;
  2872  001052  0E1B               	movlw	27
  2873  001054  6F54               	movwf	(_stack+12)& (0+255),b	;volatile
  2874                           
  2875                           ; BSR set to: 2
  2876                           ;main.c: 105: stack.ethernet.destination.address[4] = 0x6A;
  2877  001056  0E6A               	movlw	106
  2878  001058  6F55               	movwf	(_stack+13)& (0+255),b	;volatile
  2879                           
  2880                           ; BSR set to: 2
  2881                           ;main.c: 106: stack.ethernet.destination.address[5] = 0x2F;
  2882  00105A  0E2F               	movlw	47
  2883  00105C  6F56               	movwf	(_stack+14)& (0+255),b	;volatile
  2884                           
  2885                           ; BSR set to: 2
  2886                           ;main.c: 121: ipv4_address_t IPsource;
  2887                           ;main.c: 122: IPsource.address[0] = 192;
  2888  00105E  0EC0               	movlw	192
  2889  001060  0103               	movlb	3	; () banked
  2890  001062  6F9A               	movwf	main@IPsource& (0+255),b
  2891                           
  2892                           ; BSR set to: 3
  2893                           ;main.c: 123: IPsource.address[1] = 168;
  2894  001064  0EA8               	movlw	168
  2895  001066  6F9B               	movwf	(main@IPsource+1)& (0+255),b
  2896                           
  2897                           ; BSR set to: 3
  2898                           ;main.c: 124: IPsource.address[2] = 0;
  2899  001068  0E00               	movlw	0
  2900  00106A  6F9C               	movwf	(main@IPsource+2)& (0+255),b
  2901                           
  2902                           ; BSR set to: 3
  2903                           ;main.c: 125: IPsource.address[3] = 4;
  2904  00106C  0E04               	movlw	4
  2905  00106E  6F9D               	movwf	(main@IPsource+3)& (0+255),b
  2906                           
  2907                           ; BSR set to: 3
  2908                           ;main.c: 127: ipv4_address_t IPdestination;
  2909                           ;main.c: 128: IPdestination.address[0] = 169;
  2910  001070  0EA9               	movlw	169
  2911  001072  6F9E               	movwf	main@IPdestination& (0+255),b
  2912                           
  2913                           ; BSR set to: 3
  2914                           ;main.c: 129: IPdestination.address[1] = 254;
  2915  001074  0EFE               	movlw	254
  2916  001076  6F9F               	movwf	(main@IPdestination+1)& (0+255),b
  2917                           
  2918                           ; BSR set to: 3
  2919                           ;main.c: 130: IPdestination.address[2] = 108;
  2920  001078  0E6C               	movlw	108
  2921  00107A  6FA0               	movwf	(main@IPdestination+2)& (0+255),b
  2922                           
  2923                           ; BSR set to: 3
  2924                           ;main.c: 131: IPdestination.address[3] = 135;
  2925  00107C  0E87               	movlw	135
  2926  00107E  6FA1               	movwf	(main@IPdestination+3)& (0+255),b
  2927                           
  2928                           ; BSR set to: 3
  2929                           ;main.c: 138: INTCONbits.GIE = 1;
  2930  001080  8EF2               	bsf	intcon,7,c	;volatile
  2931                           
  2932                           ; BSR set to: 3
  2933                           ;main.c: 139: INTCONbits.PEIE = 1;
  2934  001082  8CF2               	bsf	intcon,6,c	;volatile
  2935  001084                     l608:
  2936  001084  0004               	clrwdt		;# 
  2937                           
  2938                           ;main.c: 145: handleStackBackgroundTasks(&stack);
  2939  001086  0E48               	movlw	low _stack
  2940  001088  0101               	movlb	1	; () banked
  2941  00108A  6F84               	movwf	handleStackBackgroundTasks@stack& (0+255),b
  2942  00108C  0E02               	movlw	high _stack
  2943  00108E  6F85               	movwf	(handleStackBackgroundTasks@stack+1)& (0+255),b
  2944  001090  EC90  F010         	call	_handleStackBackgroundTasks	;wreg free
  2945                           
  2946                           ;main.c: 148: printEthernetState(stack.ethernet);
  2947  001094  EE22  F048         	lfsr	2,_stack	;volatile
  2948  001098  EE00  F09A         	lfsr	0,printEthernetState@state
  2949  00109C  0E0E               	movlw	14
  2950  00109E                     u10941:
  2951  00109E  CFDB FFEB          	movff	plusw2,plusw0
  2952  0010A2  06E8               	decf	wreg,f,c
  2953  0010A4  E2FC               	bc	u10941
  2954  0010A6  ECC5  F019         	call	_printEthernetState	;wreg free
  2955                           
  2956                           ;main.c: 149: numberToDisplay = (stack.ethernet.link == NO_LINK) ? 1000 : ethernetContro
      +                          ller_getCurrentPacketCount();
  2957  0010AA  0102               	movlb	2	; () banked
  2958  0010AC  5148               	movf	_stack& (0+255),w,b	;volatile
  2959  0010AE  B4D8               	btfsc	status,2,c
  2960  0010B0  D009               	goto	l610
  2961                           
  2962                           ; BSR set to: 2
  2963  0010B2  EC74  F023         	call	_ethernetController_getCurrentPacketCount	;wreg free
  2964  0010B6  0101               	movlb	1	; () banked
  2965  0010B8  6F88               	movwf	??_main& (0+255),b
  2966  0010BA  5188               	movf	??_main& (0+255),w,b
  2967  0010BC  0103               	movlb	3	; () banked
  2968  0010BE  6F94               	movwf	_main$1984& (0+255),b
  2969  0010C0  6B95               	clrf	(_main$1984+1)& (0+255),b
  2970  0010C2  D005               	goto	l612
  2971  0010C4                     l610:
  2972                           
  2973                           ; BSR set to: 3
  2974  0010C4  0E03               	movlw	3
  2975  0010C6  0103               	movlb	3	; () banked
  2976  0010C8  6F95               	movwf	(_main$1984+1)& (0+255),b
  2977  0010CA  0EE8               	movlw	232
  2978  0010CC  6F94               	movwf	_main$1984& (0+255),b
  2979  0010CE                     l612:
  2980                           
  2981                           ; BSR set to: 3
  2982                           
  2983                           ; BSR set to: 3
  2984  0010CE  C394  F034         	movff	_main$1984,_numberToDisplay	;volatile
  2985  0010D2  C395  F035         	movff	_main$1984+1,_numberToDisplay+1	;volatile
  2986  0010D6  0E00               	movlw	0
  2987  0010D8  BE35               	btfsc	_numberToDisplay+1,7,c	;volatile
  2988  0010DA  0EFF               	movlw	-1
  2989  0010DC  6E36               	movwf	_numberToDisplay+2,c	;volatile
  2990  0010DE  6E37               	movwf	_numberToDisplay+3,c	;volatile
  2991                           
  2992                           ; BSR set to: 3
  2993                           ;main.c: 151: if (buttonState) {
  2994  0010E0  0101               	movlb	1	; () banked
  2995  0010E2  51BD               	movf	_buttonState& (0+255),w,b	;volatile
  2996  0010E4  B4D8               	btfsc	status,2,c
  2997  0010E6  D7CE               	goto	l608
  2998                           
  2999                           ; BSR set to: 1
  3000                           ;main.c: 152: buttonState = 0;
  3001  0010E8  0E00               	movlw	0
  3002  0010EA  6FBD               	movwf	_buttonState& (0+255),b	;volatile
  3003                           
  3004                           ; BSR set to: 1
  3005                           ;main.c: 154: if (stack.ethernet.link == LINK_ESTABLISHED) {
  3006  0010EC  0102               	movlb	2	; () banked
  3007  0010EE  0548               	decf	_stack& (0+255),w,b	;volatile
  3008  0010F0  A4D8               	btfss	status,2,c
  3009  0010F2  D7C8               	goto	l608
  3010                           
  3011                           ; BSR set to: 2
  3012                           ;main.c: 157: uint8_t headerBuf[32];
  3013                           ;main.c: 158: stack.pendingPacketToSend.ipv4Header.destination = IPdestination;
  3014  0010F4  C39E  F28E         	movff	main@IPdestination,_stack+70	;volatile
  3015  0010F8  C39F  F28F         	movff	main@IPdestination+1,_stack+71	;volatile
  3016  0010FC  C3A0  F290         	movff	main@IPdestination+2,_stack+72	;volatile
  3017  001100  C3A1  F291         	movff	main@IPdestination+3,_stack+73	;volatile
  3018                           
  3019                           ;main.c: 159: stack.pendingPacketToSend.ipv4Header.source = IPsource;
  3020  001104  C39A  F28A         	movff	main@IPsource,_stack+66	;volatile
  3021  001108  C39B  F28B         	movff	main@IPsource+1,_stack+67	;volatile
  3022  00110C  C39C  F28C         	movff	main@IPsource+2,_stack+68	;volatile
  3023  001110  C39D  F28D         	movff	main@IPsource+3,_stack+69	;volatile
  3024                           
  3025                           ; BSR set to: 2
  3026                           ;main.c: 160: stack.pendingPacketToSend.ipv4Header.totalLength = 120;
  3027  001114  0E00               	movlw	0
  3028  001116  6F80               	movwf	(_stack+56)& (0+255),b	;volatile
  3029  001118  0E78               	movlw	120
  3030  00111A  6F7F               	movwf	(_stack+55)& (0+255),b	;volatile
  3031                           
  3032                           ; BSR set to: 2
  3033                           ;main.c: 161: stack.pendingPacketToSend.ipv4Header.timeToLive = 255;
  3034  00111C  6986               	setf	(_stack+62)& (0+255),b	;volatile
  3035                           
  3036                           ;main.c: 162: stack.pendingPacketToSend.ipv4Header.version = 4;
  3037  00111E  0E04               	movlw	4
  3038  001120  6F7B               	movwf	(_stack+51)& (0+255),b	;volatile
  3039                           
  3040                           ; BSR set to: 2
  3041                           ;main.c: 163: ipv4_calculateHeaderChecksum(&stack.pendingPacketToSend.ipv4Header);
  3042  001122  0E7B               	movlw	low (_stack+51)
  3043  001124  0100               	movlb	0	; () banked
  3044  001126  6F60               	movwf	ipv4_calculateHeaderChecksum@header& (0+255),b
  3045  001128  0E02               	movlw	high (_stack+51)
  3046  00112A  6F61               	movwf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),b
  3047  00112C  ECFA  F008         	call	_ipv4_calculateHeaderChecksum	;wreg free
  3048                           
  3049                           ;main.c: 164: ipv4_writeHeaderIntoBuffer(stack.pendingPacketToSend.ipv4Header, headerBuf
      +                          );
  3050  001130  EE22  F07B         	lfsr	2,_stack+51	;volatile
  3051  001134  EE00  F060         	lfsr	0,ipv4_writeHeaderIntoBuffer@header
  3052  001138  0E16               	movlw	22
  3053  00113A                     u10981:
  3054  00113A  CFDB FFEB          	movff	plusw2,plusw0
  3055  00113E  06E8               	decf	wreg,f,c
  3056  001140  E2FC               	bc	u10981
  3057  001142  0E74               	movlw	low main@headerBuf
  3058  001144  0100               	movlb	0	; () banked
  3059  001146  6F77               	movwf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),b
  3060  001148  0E03               	movlw	high main@headerBuf
  3061  00114A  6F78               	movwf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),b
  3062  00114C  EC36  F012         	call	_ipv4_writeHeaderIntoBuffer	;wreg free
  3063                           
  3064                           ;main.c: 166: ipv4_txFrameRequest(&stack.pendingPacketToSend);
  3065  001150  0E7B               	movlw	low (_stack+51)
  3066  001152  0100               	movlb	0	; () banked
  3067  001154  6FA7               	movwf	ipv4_txFrameRequest@packet& (0+255),b
  3068  001156  0E02               	movlw	high (_stack+51)
  3069  001158  6FA8               	movwf	(ipv4_txFrameRequest@packet+1)& (0+255),b
  3070  00115A  EC8C  F013         	call	_ipv4_txFrameRequest	;wreg free
  3071                           
  3072                           ;main.c: 168: for (uint8_t i = 0; i < stack.pendingPacketToSend.ipv4Header.totalLength; 
      +                          i++) {
  3073  00115E  0E00               	movlw	0
  3074  001160  0103               	movlb	3	; () banked
  3075  001162  6F96               	movwf	main@i& (0+255),b
  3076  001164  D036               	goto	l615
  3077  001166                     
  3078                           ;main.c: 169: if (i < stack.pendingPacketToSend.ipv4Header.headerLength * 4) {
  3079                           
  3080                           ; BSR set to: 3
  3081  001166  0102               	movlb	2	; () banked
  3082  001168  517C               	movf	(_stack+52)& (0+255),w,b	;volatile
  3083  00116A  0D04               	mullw	4
  3084  00116C  0103               	movlb	3	; () banked
  3085  00116E  5196               	movf	main@i& (0+255),w,b
  3086  001170  0101               	movlb	1	; () banked
  3087  001172  6F88               	movwf	??_main& (0+255),b
  3088  001174  6B89               	clrf	(??_main+1)& (0+255),b
  3089  001176  50F3               	movf	prodl,w,c
  3090  001178  5D88               	subwf	??_main& (0+255),w,b
  3091  00117A  5189               	movf	(??_main+1)& (0+255),w,b
  3092  00117C  0A80               	xorlw	128
  3093  00117E  6F8A               	movwf	(??_main+2)& (0+255),b
  3094  001180  50F4               	movf	prodh,w,c
  3095  001182  0A80               	xorlw	128
  3096  001184  598A               	subwfb	(??_main+2)& (0+255),w,b
  3097  001186  B0D8               	btfsc	status,0,c
  3098  001188  D016               	goto	l617
  3099                           
  3100                           ; BSR set to: 1
  3101                           ;main.c: 170: ipv4_streamToTransmissionBuffer(headerBuf[i], stack.pendingPacketToSend);
  3102  00118A  EE22  F07B         	lfsr	2,_stack+51	;volatile
  3103  00118E  EE00  F072         	lfsr	0,ipv4_streamToTransmissionBuffer@packet
  3104  001192  0E3D               	movlw	61
  3105  001194                     u11001:
  3106  001194  CFDB FFEB          	movff	plusw2,plusw0
  3107  001198  06E8               	decf	wreg,f,c
  3108  00119A  E2FC               	bc	u11001
  3109  00119C  0103               	movlb	3	; () banked
  3110  00119E  5196               	movf	main@i& (0+255),w,b
  3111  0011A0  0D01               	mullw	1
  3112  0011A2  0E74               	movlw	low main@headerBuf
  3113  0011A4  24F3               	addwf	prodl,w,c
  3114  0011A6  6ED9               	movwf	fsr2l,c
  3115  0011A8  0E03               	movlw	high main@headerBuf
  3116  0011AA  20F4               	addwfc	prodh,w,c
  3117  0011AC  6EDA               	movwf	fsr2h,c
  3118  0011AE  50DF               	movf	indf2,w,c
  3119  0011B0  EC43  F01F         	call	_ipv4_streamToTransmissionBuffer
  3120                           
  3121                           ;main.c: 171: } else
  3122  0011B4  D00C               	goto	l618
  3123  0011B6                     l617:
  3124                           
  3125                           ;main.c: 172: ipv4_streamToTransmissionBuffer(1, stack.pendingPacketToSend);
  3126  0011B6  EE22  F07B         	lfsr	2,_stack+51	;volatile
  3127  0011BA  EE00  F072         	lfsr	0,ipv4_streamToTransmissionBuffer@packet
  3128  0011BE  0E3D               	movlw	61
  3129  0011C0                     u11011:
  3130  0011C0  CFDB FFEB          	movff	plusw2,plusw0
  3131  0011C4  06E8               	decf	wreg,f,c
  3132  0011C6  E2FC               	bc	u11011
  3133  0011C8  0E01               	movlw	1
  3134  0011CA  EC43  F01F         	call	_ipv4_streamToTransmissionBuffer
  3135  0011CE                     l618:
  3136  0011CE  0103               	movlb	3	; () banked
  3137  0011D0  2B96               	incf	main@i& (0+255),f,b
  3138  0011D2                     l615:
  3139                           
  3140                           ; BSR set to: 3
  3141                           
  3142                           ; BSR set to: 3
  3143  0011D2  5196               	movf	main@i& (0+255),w,b
  3144  0011D4  0101               	movlb	1	; () banked
  3145  0011D6  6F88               	movwf	??_main& (0+255),b
  3146  0011D8  6B89               	clrf	(??_main+1)& (0+255),b
  3147  0011DA  0102               	movlb	2	; () banked
  3148  0011DC  517F               	movf	(_stack+55)& (0+255),w,b	;volatile
  3149  0011DE  0101               	movlb	1	; () banked
  3150  0011E0  5D88               	subwf	??_main& (0+255),w,b
  3151  0011E2  0102               	movlb	2	; () banked
  3152  0011E4  5180               	movf	(_stack+56)& (0+255),w,b	;volatile
  3153  0011E6  0101               	movlb	1	; () banked
  3154  0011E8  5989               	subwfb	(??_main+1)& (0+255),w,b
  3155  0011EA  A0D8               	btfss	status,0,c
  3156  0011EC  D7BC               	goto	l616
  3157                           
  3158                           ; BSR set to: 1
  3159                           ;main.c: 173: }
  3160                           ;main.c: 175: stack.background.fPacketPending = 1;
  3161  0011EE  0102               	movlb	2	; () banked
  3162  0011F0  815C               	bsf	(_stack+20)& (0+255),0,b	;volatile
  3163                           
  3164                           ; BSR set to: 2
  3165                           
  3166                           ; BSR set to: 2
  3167                           
  3168                           ; BSR set to: 2
  3169  0011F2  D748               	goto	l608
  3170  0011F4                     __end_of_main:
  3171                           	opt stack 0
  3172                           tblptru	equ	0xFF8
  3173                           tblptrh	equ	0xFF7
  3174                           tblptrl	equ	0xFF6
  3175                           tablat	equ	0xFF5
  3176                           prodh	equ	0xFF4
  3177                           prodl	equ	0xFF3
  3178                           intcon	equ	0xFF2
  3179                           intcon3	equ	0xFF0
  3180                           postinc0	equ	0xFEE
  3181                           plusw0	equ	0xFEB
  3182                           fsr0h	equ	0xFEA
  3183                           fsr0l	equ	0xFE9
  3184                           wreg	equ	0xFE8
  3185                           postdec1	equ	0xFE5
  3186                           fsr1l	equ	0xFE1
  3187                           indf2	equ	0xFDF
  3188                           plusw2	equ	0xFDB
  3189                           fsr2h	equ	0xFDA
  3190                           fsr2l	equ	0xFD9
  3191                           status	equ	0xFD8
  3192                           
  3193 ;; *************** function _sevenSegmentInit *****************
  3194 ;; Defined at:
  3195 ;;		line 28 in file "src/system/sevenseg.c"
  3196 ;; Parameters:    Size  Location     Type
  3197 ;;		None
  3198 ;; Auto vars:     Size  Location     Type
  3199 ;;		None
  3200 ;; Return value:  Size  Location     Type
  3201 ;;                  1    wreg      void 
  3202 ;; Registers used:
  3203 ;;		wreg, status,2, status,0
  3204 ;; Tracked objects:
  3205 ;;		On entry : 0/0
  3206 ;;		On exit  : 0/0
  3207 ;;		Unchanged: 0/0
  3208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3209 ;;      Params:         0       0       0       0       0       0       0       0       0
  3210 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3211 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3212 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3213 ;;Total ram usage:        0 bytes
  3214 ;; Hardware stack levels used:    1
  3215 ;; Hardware stack levels required when called:    4
  3216 ;; This function calls:
  3217 ;;		Nothing
  3218 ;; This function is called by:
  3219 ;;		_main
  3220 ;; This function uses a non-reentrant model
  3221 ;;
  3222                           
  3223                           	psect	text1
  3224  00461E                     __ptext1:
  3225                           	opt stack 0
  3226  00461E                     _sevenSegmentInit:
  3227                           	opt stack 26
  3228                           
  3229                           ;sevenseg.c: 30: PORTC &= ~(0x07);
  3230                           
  3231                           ; BSR set to: 2
  3232                           ;incstack = 0
  3233  00461E  0EF8               	movlw	248
  3234  004620  1682               	andwf	3970,f,c	;volatile
  3235                           
  3236                           ;sevenseg.c: 32: TRISC&= ~0x07;;
  3237  004622  0EF8               	movlw	248
  3238  004624  1694               	andwf	3988,f,c	;volatile
  3239                           
  3240                           ;sevenseg.c: 33: TRISA &=~0xff;;
  3241  004626  0E00               	movlw	0
  3242  004628  6E92               	movwf	3986,c	;volatile
  3243                           
  3244                           ;sevenseg.c: 35: ANSELA&=~0xff;;
  3245  00462A  0E00               	movlw	0
  3246  00462C  010F               	movlb	15	; () banked
  3247  00462E  6F5B               	movwf	91,b	;volatile
  3248                           
  3249                           ;sevenseg.c: 36: ANSELC&= ~0x07;;
  3250  004630  0EF8               	movlw	248
  3251  004632  175D               	andwf	93,f,b	;volatile
  3252                           
  3253                           ; BSR set to: 15
  3254                           ;sevenseg.c: 38: PORTA = 0xff;
  3255  004634  6880               	setf	3968,c	;volatile
  3256                           
  3257                           ; BSR set to: 15
  3258  004636  0012               	return		;funcret
  3259  004638                     __end_of_sevenSegmentInit:
  3260                           	opt stack 0
  3261                           tblptru	equ	0xFF8
  3262                           tblptrh	equ	0xFF7
  3263                           tblptrl	equ	0xFF6
  3264                           tablat	equ	0xFF5
  3265                           prodh	equ	0xFF4
  3266                           prodl	equ	0xFF3
  3267                           intcon	equ	0xFF2
  3268                           intcon3	equ	0xFF0
  3269                           postinc0	equ	0xFEE
  3270                           plusw0	equ	0xFEB
  3271                           fsr0h	equ	0xFEA
  3272                           fsr0l	equ	0xFE9
  3273                           wreg	equ	0xFE8
  3274                           postdec1	equ	0xFE5
  3275                           fsr1l	equ	0xFE1
  3276                           indf2	equ	0xFDF
  3277                           plusw2	equ	0xFDB
  3278                           fsr2h	equ	0xFDA
  3279                           fsr2l	equ	0xFD9
  3280                           status	equ	0xFD8
  3281                           
  3282 ;; *************** function _printEthernetState *****************
  3283 ;; Defined at:
  3284 ;;		line 181 in file "src/system/main.c"
  3285 ;; Parameters:    Size  Location     Type
  3286 ;;  state          15   58[BANK0 ] struct ethernetConnectio
  3287 ;; Auto vars:     Size  Location     Type
  3288 ;;		None
  3289 ;; Return value:  Size  Location     Type
  3290 ;;                  1    wreg      void 
  3291 ;; Registers used:
  3292 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3293 ;; Tracked objects:
  3294 ;;		On entry : 0/0
  3295 ;;		On exit  : 0/0
  3296 ;;		Unchanged: 0/0
  3297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3298 ;;      Params:         0      15       0       0       0       0       0       0       0
  3299 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3300 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3301 ;;      Totals:         0      15       0       0       0       0       0       0       0
  3302 ;;Total ram usage:       15 bytes
  3303 ;; Hardware stack levels used:    1
  3304 ;; Hardware stack levels required when called:    5
  3305 ;; This function calls:
  3306 ;;		_UARTTransmitText
  3307 ;; This function is called by:
  3308 ;;		_main
  3309 ;; This function uses a non-reentrant model
  3310 ;;
  3311                           
  3312                           	psect	text2
  3313  00338A                     __ptext2:
  3314                           	opt stack 0
  3315  00338A                     _printEthernetState:
  3316                           	opt stack 25
  3317                           
  3318                           ;main.c: 182: static ethernetConnection_t oldState;
  3319                           ;main.c: 183: if (state.link != oldState.link) {
  3320                           
  3321                           ; BSR set to: 15
  3322                           ;incstack = 0
  3323  00338A  0101               	movlb	1	; () banked
  3324  00338C  518B               	movf	printEthernetState@oldState& (0+255),w,b
  3325  00338E  0100               	movlb	0	; () banked
  3326  003390  199A               	xorwf	printEthernetState@state& (0+255),w,b
  3327  003392  B4D8               	btfsc	status,2,c
  3328  003394  D041               	goto	l637
  3329                           
  3330                           ; BSR set to: 0
  3331                           ;main.c: 184: if (state.link == NO_LINK) {
  3332  003396  519A               	movf	printEthernetState@state& (0+255),w,b
  3333  003398  A4D8               	btfss	status,2,c
  3334  00339A  D007               	goto	l628
  3335                           
  3336                           ; BSR set to: 0
  3337                           ;main.c: 185: UARTTransmitText("Link lost.\n\r");
  3338  00339C  0E66               	movlw	low STR_35
  3339  00339E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3340  0033A0  0E7F               	movlw	high STR_35
  3341  0033A2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3342  0033A4  EC18  F01F         	call	_UARTTransmitText	;wreg free
  3343                           
  3344                           ;main.c: 186: } else if (state.link == LINK_ESTABLISHED) {
  3345  0033A8  D00A               	goto	l630
  3346  0033AA                     l628:
  3347  0033AA  0100               	movlb	0	; () banked
  3348  0033AC  059A               	decf	printEthernetState@state& (0+255),w,b
  3349  0033AE  A4D8               	btfss	status,2,c
  3350  0033B0  D006               	goto	l630
  3351                           
  3352                           ; BSR set to: 0
  3353                           ;main.c: 187: UARTTransmitText("Link established. ");
  3354  0033B2  0E9F               	movlw	low STR_36
  3355  0033B4  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3356  0033B6  0E7E               	movlw	high STR_36
  3357  0033B8  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3358  0033BA  EC18  F01F         	call	_UARTTransmitText	;wreg free
  3359  0033BE                     l630:
  3360                           
  3361                           ;main.c: 188: }
  3362                           ;main.c: 190: if (state.link == LINK_ESTABLISHED) {
  3363  0033BE  0100               	movlb	0	; () banked
  3364  0033C0  059A               	decf	printEthernetState@state& (0+255),w,b
  3365  0033C2  A4D8               	btfss	status,2,c
  3366  0033C4  D029               	goto	l637
  3367                           
  3368                           ; BSR set to: 0
  3369                           ;main.c: 191: if (state.speed == TEN_MBIT) {
  3370  0033C6  519B               	movf	(printEthernetState@state+1)& (0+255),w,b
  3371  0033C8  A4D8               	btfss	status,2,c
  3372  0033CA  D007               	goto	l632
  3373                           
  3374                           ; BSR set to: 0
  3375                           ;main.c: 192: UARTTransmitText("Speed is 10 Mbps, ");
  3376  0033CC  0E8C               	movlw	low STR_37
  3377  0033CE  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3378  0033D0  0E7E               	movlw	high STR_37
  3379  0033D2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3380  0033D4  EC18  F01F         	call	_UARTTransmitText	;wreg free
  3381                           
  3382                           ;main.c: 193: } else if (state.speed == HUNDRED_MBIT) {
  3383  0033D8  D00A               	goto	l634
  3384  0033DA                     l632:
  3385  0033DA  0100               	movlb	0	; () banked
  3386  0033DC  059B               	decf	(printEthernetState@state+1)& (0+255),w,b
  3387  0033DE  A4D8               	btfss	status,2,c
  3388  0033E0  D006               	goto	l634
  3389                           
  3390                           ; BSR set to: 0
  3391                           ;main.c: 194: UARTTransmitText("Speed is 100 Mbps, ");
  3392  0033E2  0E78               	movlw	low STR_38
  3393  0033E4  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3394  0033E6  0E7E               	movlw	high STR_38
  3395  0033E8  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3396  0033EA  EC18  F01F         	call	_UARTTransmitText	;wreg free
  3397  0033EE                     l634:
  3398                           
  3399                           ;main.c: 195: }
  3400                           ;main.c: 196: if (state.duplex == HALF_DUPLEX) {
  3401  0033EE  0100               	movlb	0	; () banked
  3402  0033F0  519C               	movf	(printEthernetState@state+2)& (0+255),w,b
  3403  0033F2  A4D8               	btfss	status,2,c
  3404  0033F4  D007               	goto	l635
  3405                           
  3406                           ; BSR set to: 0
  3407                           ;main.c: 197: UARTTransmitText("connection is Half Duplex.\n\r");
  3408  0033F6  0EA8               	movlw	low STR_39
  3409  0033F8  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3410  0033FA  0E7D               	movlw	high STR_39
  3411  0033FC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3412  0033FE  EC18  F01F         	call	_UARTTransmitText	;wreg free
  3413                           
  3414                           ;main.c: 198: } else if (state.duplex == FULL_DUPLEX) {
  3415  003402  D00A               	goto	l637
  3416  003404                     l635:
  3417  003404  0100               	movlb	0	; () banked
  3418  003406  059C               	decf	(printEthernetState@state+2)& (0+255),w,b
  3419  003408  A4D8               	btfss	status,2,c
  3420  00340A  D006               	goto	l637
  3421                           
  3422                           ; BSR set to: 0
  3423                           ;main.c: 200: UARTTransmitText("connection is Full Duplex.\n\r");
  3424  00340C  0EC5               	movlw	low STR_40
  3425  00340E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3426  003410  0E7D               	movlw	high STR_40
  3427  003412  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3428  003414  EC18  F01F         	call	_UARTTransmitText	;wreg free
  3429  003418                     l637:
  3430                           
  3431                           ;main.c: 201: }
  3432                           ;main.c: 202: }
  3433                           ;main.c: 203: }
  3434                           ;main.c: 204: oldState = state;
  3435  003418  EE20  F09A         	lfsr	2,printEthernetState@state
  3436  00341C  EE11  F08B         	lfsr	1,printEthernetState@oldState
  3437  003420  0E0E               	movlw	14
  3438  003422                     u10801:
  3439  003422  CFDB FFE3          	movff	plusw2,plusw1
  3440  003426  06E8               	decf	wreg,f,c
  3441  003428  E2FC               	bc	u10801
  3442  00342A  0012               	return		;funcret
  3443  00342C                     __end_of_printEthernetState:
  3444                           	opt stack 0
  3445                           tblptru	equ	0xFF8
  3446                           tblptrh	equ	0xFF7
  3447                           tblptrl	equ	0xFF6
  3448                           tablat	equ	0xFF5
  3449                           prodh	equ	0xFF4
  3450                           prodl	equ	0xFF3
  3451                           intcon	equ	0xFF2
  3452                           intcon3	equ	0xFF0
  3453                           postinc0	equ	0xFEE
  3454                           plusw0	equ	0xFEB
  3455                           fsr0h	equ	0xFEA
  3456                           fsr0l	equ	0xFE9
  3457                           wreg	equ	0xFE8
  3458                           postdec1	equ	0xFE5
  3459                           plusw1	equ	0xFE3
  3460                           fsr1l	equ	0xFE1
  3461                           indf2	equ	0xFDF
  3462                           plusw2	equ	0xFDB
  3463                           fsr2h	equ	0xFDA
  3464                           fsr2l	equ	0xFD9
  3465                           status	equ	0xFD8
  3466                           
  3467 ;; *************** function _printErrorMessage *****************
  3468 ;; Defined at:
  3469 ;;		line 207 in file "src/system/main.c"
  3470 ;; Parameters:    Size  Location     Type
  3471 ;;  err             3   58[BANK0 ] struct error
  3472 ;; Auto vars:     Size  Location     Type
  3473 ;;		None
  3474 ;; Return value:  Size  Location     Type
  3475 ;;                  1    wreg      void 
  3476 ;; Registers used:
  3477 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3478 ;; Tracked objects:
  3479 ;;		On entry : 0/0
  3480 ;;		On exit  : 0/0
  3481 ;;		Unchanged: 0/0
  3482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3483 ;;      Params:         0       3       0       0       0       0       0       0       0
  3484 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3485 ;;      Temps:          0       2       0       0       0       0       0       0       0
  3486 ;;      Totals:         0       5       0       0       0       0       0       0       0
  3487 ;;Total ram usage:        5 bytes
  3488 ;; Hardware stack levels used:    1
  3489 ;; Hardware stack levels required when called:    6
  3490 ;; This function calls:
  3491 ;;		_UARTTransmitText
  3492 ;;		_intToString
  3493 ;; This function is called by:
  3494 ;;		_main
  3495 ;; This function uses a non-reentrant model
  3496 ;;
  3497                           
  3498                           	psect	text3
  3499  002BBE                     __ptext3:
  3500                           	opt stack 0
  3501  002BBE                     _printErrorMessage:
  3502                           	opt stack 24
  3503                           
  3504                           ;main.c: 208: UARTTransmitText("[ERROR]");
  3505                           
  3506                           ;incstack = 0
  3507  002BBE  0EC5               	movlw	low STR_41
  3508  002BC0  0100               	movlb	0	; () banked
  3509  002BC2  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3510  002BC4  0E7F               	movlw	high STR_41
  3511  002BC6  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3512  002BC8  EC18  F01F         	call	_UARTTransmitText	;wreg free
  3513                           
  3514                           ;main.c: 209: switch (err.module) {
  3515  002BCC  D028               	goto	l641
  3516  002BCE                     
  3517                           ;main.c: 211: UARTTransmitText(" MEMORY MODULE: ");
  3518  002BCE  0EE8               	movlw	low STR_42
  3519  002BD0  0100               	movlb	0	; () banked
  3520  002BD2  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3521  002BD4  0E7E               	movlw	high STR_42
  3522  002BD6  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3523  002BD8  EC18  F01F         	call	_UARTTransmitText	;wreg free
  3524                           
  3525                           ;main.c: 212: break;
  3526  002BDC  D049               	goto	l649
  3527  002BDE                     
  3528                           ;main.c: 214: UARTTransmitText(" ETHERNET CONTROLLER MODULE: ");
  3529  002BDE  0E6C               	movlw	low STR_43
  3530  002BE0  0100               	movlb	0	; () banked
  3531  002BE2  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3532  002BE4  0E7D               	movlw	high STR_43
  3533  002BE6  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3534  002BE8  EC18  F01F         	call	_UARTTransmitText	;wreg free
  3535                           
  3536                           ;main.c: 215: break;
  3537  002BEC  D041               	goto	l649
  3538  002BEE                     
  3539                           ;main.c: 217: UARTTransmitText(" ETHERNET MODULE: ");
  3540  002BEE  0EB2               	movlw	low STR_44
  3541  002BF0  0100               	movlb	0	; () banked
  3542  002BF2  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3543  002BF4  0E7E               	movlw	high STR_44
  3544  002BF6  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3545  002BF8  EC18  F01F         	call	_UARTTransmitText	;wreg free
  3546                           
  3547                           ;main.c: 218: break;
  3548  002BFC  D039               	goto	l649
  3549  002BFE                     
  3550                           ;main.c: 220: UARTTransmitText(" ARP MODULE: ");
  3551  002BFE  0E58               	movlw	low STR_45
  3552  002C00  0100               	movlb	0	; () banked
  3553  002C02  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3554  002C04  0E7F               	movlw	high STR_45
  3555  002C06  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3556  002C08  EC18  F01F         	call	_UARTTransmitText	;wreg free
  3557                           
  3558                           ;main.c: 221: break;
  3559  002C0C  D031               	goto	l649
  3560  002C0E                     
  3561                           ;main.c: 223: UARTTransmitText(" IPv4 MODULE: ");
  3562  002C0E  0E49               	movlw	low STR_46
  3563  002C10  0100               	movlb	0	; () banked
  3564  002C12  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3565  002C14  0E7F               	movlw	high STR_46
  3566  002C16  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3567  002C18  EC18  F01F         	call	_UARTTransmitText	;wreg free
  3568                           
  3569                           ;main.c: 226: }
  3570                           
  3571                           ;main.c: 225: break;
  3572                           
  3573                           ;main.c: 224: default:
  3574  002C1C  D029               	goto	l649
  3575  002C1E                     l641:
  3576  002C1E  0100               	movlb	0	; () banked
  3577  002C20  519A               	movf	printErrorMessage@err& (0+255),w,b
  3578                           
  3579                           ; Switch size 1, requested type "space"
  3580                           ; Number of cases is 5, Range of values is 0 to 4
  3581                           ; switch strategies available:
  3582                           ; Name         Instructions Cycles
  3583                           ; simple_byte           16     9 (average)
  3584                           ;	Chosen strategy is simple_byte
  3585  002C22  0A00               	xorlw	0	; case 0
  3586  002C24  B4D8               	btfsc	status,2,c
  3587  002C26  D7D3               	goto	l642
  3588  002C28  0A01               	xorlw	1	; case 1
  3589  002C2A  B4D8               	btfsc	status,2,c
  3590  002C2C  D7D8               	goto	l644
  3591  002C2E  0A03               	xorlw	3	; case 2
  3592  002C30  B4D8               	btfsc	status,2,c
  3593  002C32  D7DD               	goto	l645
  3594  002C34  0A01               	xorlw	1	; case 3
  3595  002C36  B4D8               	btfsc	status,2,c
  3596  002C38  D7E2               	goto	l646
  3597  002C3A  0A07               	xorlw	7	; case 4
  3598  002C3C  B4D8               	btfsc	status,2,c
  3599  002C3E  D7E7               	goto	l647
  3600                           
  3601                           ; BSR set to: 0
  3602                           ;main.c: 227: switch (err.code) {
  3603  002C40  D017               	goto	l649
  3604  002C42                     
  3605                           ; BSR set to: 0
  3606                           ;main.c: 229: UARTTransmitText("Ethernet controller is unresponsive.");
  3607                           
  3608                           ; BSR set to: 0
  3609  002C42  0E47               	movlw	low STR_47
  3610  002C44  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3611  002C46  0E7D               	movlw	high STR_47
  3612  002C48  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3613  002C4A  EC18  F01F         	call	_UARTTransmitText	;wreg free
  3614                           
  3615                           ;main.c: 230: break;
  3616  002C4E  D024               	goto	l651
  3617  002C50                     
  3618                           ;main.c: 232: UARTTransmitText("Ethernet controller has returned an unknown device ID.")
      +                          ;
  3619  002C50  0E90               	movlw	low STR_48
  3620  002C52  0100               	movlb	0	; () banked
  3621  002C54  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3622  002C56  0E7C               	movlw	high STR_48
  3623  002C58  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3624  002C5A  EC18  F01F         	call	_UARTTransmitText	;wreg free
  3625                           
  3626                           ;main.c: 233: break;
  3627  002C5E  D01C               	goto	l651
  3628  002C60                     
  3629                           ;main.c: 236: UARTTransmitText("An unknown error has occured.");
  3630                           
  3631                           ;main.c: 235: case ERROR_ETHERNET_CONTROLLER_UNKNOWN:
  3632  002C60  0E8A               	movlw	low STR_49
  3633  002C62  0100               	movlb	0	; () banked
  3634  002C64  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3635  002C66  0E7D               	movlw	high STR_49
  3636  002C68  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3637  002C6A  EC18  F01F         	call	_UARTTransmitText	;wreg free
  3638                           
  3639                           ;main.c: 238: }
  3640                           
  3641                           ;main.c: 237: break;
  3642  002C6E  D014               	goto	l651
  3643  002C70                     l649:
  3644  002C70  EE20  F09B         	lfsr	2,printErrorMessage@err+1
  3645  002C74  CFDE F09D          	movff	postinc2,??_printErrorMessage
  3646  002C78  CFDD F09E          	movff	postdec2,??_printErrorMessage+1
  3647                           
  3648                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3649                           ; Switch size 1, requested type "space"
  3650                           ; Number of cases is 1, Range of values is 1 to 1
  3651                           ; switch strategies available:
  3652                           ; Name         Instructions Cycles
  3653                           ; simple_byte            4     3 (average)
  3654                           ;	Chosen strategy is simple_byte
  3655  002C7C  0100               	movlb	0	; () banked
  3656  002C7E  519E               	movf	(??_printErrorMessage+1)& (0+255),w,b
  3657  002C80  0A01               	xorlw	1	; case 1
  3658  002C82  A4D8               	btfss	status,2,c
  3659  002C84  D7ED               	goto	l653
  3660                           
  3661                           ; BSR set to: 0
  3662                           ; Switch size 1, requested type "space"
  3663                           ; Number of cases is 3, Range of values is 45 to 143
  3664                           ; switch strategies available:
  3665                           ; Name         Instructions Cycles
  3666                           ; simple_byte           10     6 (average)
  3667                           ;	Chosen strategy is simple_byte
  3668  002C86  519D               	movf	??_printErrorMessage& (0+255),w,b
  3669  002C88  0A2D               	xorlw	45	; case 45
  3670  002C8A  B4D8               	btfsc	status,2,c
  3671  002C8C  D7E1               	goto	l652
  3672  002C8E  0A03               	xorlw	3	; case 46
  3673  002C90  B4D8               	btfsc	status,2,c
  3674  002C92  D7D7               	goto	l650
  3675  002C94  0AA1               	xorlw	161	; case 143
  3676  002C96  D7E4               	goto	l653
  3677  002C98                     l651:
  3678                           
  3679                           ;main.c: 240: UARTTransmitText(" (Code: ");
  3680                           
  3681                           ; BSR set to: 0
  3682  002C98  0EAB               	movlw	low STR_50
  3683  002C9A  0100               	movlb	0	; () banked
  3684  002C9C  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3685  002C9E  0E7F               	movlw	high STR_50
  3686  002CA0  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3687  002CA2  EC18  F01F         	call	_UARTTransmitText	;wreg free
  3688                           
  3689                           ;main.c: 241: UARTTransmitText(intToString(err.code));
  3690  002CA6  C09B  F073         	movff	printErrorMessage@err+1,intToString@val
  3691  002CAA  C09C  F074         	movff	printErrorMessage@err+2,intToString@val+1
  3692  002CAE  0100               	movlb	0	; () banked
  3693  002CB0  6B75               	clrf	(intToString@val+2)& (0+255),b
  3694  002CB2  6B76               	clrf	(intToString@val+3)& (0+255),b
  3695  002CB4  EC42  F00C         	call	_intToString	;wreg free
  3696  002CB8  C073  F098         	movff	?_intToString,UARTTransmitText@str
  3697  002CBC  C074  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  3698  002CC0  EC18  F01F         	call	_UARTTransmitText	;wreg free
  3699                           
  3700                           ;main.c: 242: UARTTransmitText(").\n\r");
  3701  002CC4  0EE4               	movlw	low STR_51
  3702  002CC6  0100               	movlb	0	; () banked
  3703  002CC8  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3704  002CCA  0E7F               	movlw	high STR_51
  3705  002CCC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3706  002CCE  EC18  F01F         	call	_UARTTransmitText	;wreg free
  3707  002CD2  0012               	return		;funcret
  3708  002CD4                     __end_of_printErrorMessage:
  3709                           	opt stack 0
  3710                           tblptru	equ	0xFF8
  3711                           tblptrh	equ	0xFF7
  3712                           tblptrl	equ	0xFF6
  3713                           tablat	equ	0xFF5
  3714                           prodh	equ	0xFF4
  3715                           prodl	equ	0xFF3
  3716                           intcon	equ	0xFF2
  3717                           intcon3	equ	0xFF0
  3718                           postinc0	equ	0xFEE
  3719                           plusw0	equ	0xFEB
  3720                           fsr0h	equ	0xFEA
  3721                           fsr0l	equ	0xFE9
  3722                           wreg	equ	0xFE8
  3723                           postdec1	equ	0xFE5
  3724                           plusw1	equ	0xFE3
  3725                           fsr1l	equ	0xFE1
  3726                           indf2	equ	0xFDF
  3727                           postinc2	equ	0xFDE
  3728                           postdec2	equ	0xFDD
  3729                           plusw2	equ	0xFDB
  3730                           fsr2h	equ	0xFDA
  3731                           fsr2l	equ	0xFD9
  3732                           status	equ	0xFD8
  3733                           
  3734 ;; *************** function _ipv4_writeHeaderIntoBuffer *****************
  3735 ;; Defined at:
  3736 ;;		line 126 in file "src/stack/protocols/ipv4.c"
  3737 ;; Parameters:    Size  Location     Type
  3738 ;;  header         23    0[BANK0 ] struct ipv4_header
  3739 ;;  ptr             2   23[BANK0 ] PTR unsigned char 
  3740 ;;		 -> main@headerBuf(32), 
  3741 ;; Auto vars:     Size  Location     Type
  3742 ;;		None
  3743 ;; Return value:  Size  Location     Type
  3744 ;;                  1    wreg      void 
  3745 ;; Registers used:
  3746 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  3747 ;; Tracked objects:
  3748 ;;		On entry : 0/0
  3749 ;;		On exit  : 0/0
  3750 ;;		Unchanged: 0/0
  3751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3752 ;;      Params:         0      25       0       0       0       0       0       0       0
  3753 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3754 ;;      Temps:          0       2       0       0       0       0       0       0       0
  3755 ;;      Totals:         0      27       0       0       0       0       0       0       0
  3756 ;;Total ram usage:       27 bytes
  3757 ;; Hardware stack levels used:    1
  3758 ;; Hardware stack levels required when called:    4
  3759 ;; This function calls:
  3760 ;;		Nothing
  3761 ;; This function is called by:
  3762 ;;		_main
  3763 ;; This function uses a non-reentrant model
  3764 ;;
  3765                           
  3766                           	psect	text4
  3767  00246C                     __ptext4:
  3768                           	opt stack 0
  3769  00246C                     _ipv4_writeHeaderIntoBuffer:
  3770                           	opt stack 26
  3771                           
  3772                           ;ipv4.c: 127: *ptr = (header.version << 4) | (header.headerLength);
  3773                           
  3774                           ;incstack = 0
  3775  00246C  0100               	movlb	0	; () banked
  3776  00246E  3960               	swapf	ipv4_writeHeaderIntoBuffer@header& (0+255),w,b
  3777  002470  0BF0               	andlw	240
  3778  002472  1161               	iorwf	(ipv4_writeHeaderIntoBuffer@header+1)& (0+255),w,b
  3779  002474  C077  FFD9         	movff	ipv4_writeHeaderIntoBuffer@ptr,fsr2l
  3780  002478  C078  FFDA         	movff	ipv4_writeHeaderIntoBuffer@ptr+1,fsr2h
  3781  00247C  6EDF               	movwf	indf2,c
  3782                           
  3783                           ;ipv4.c: 128: *(ptr + 1) = (header.dscp << 2) | (header.ecn & 0x03);
  3784  00247E  EE20 F001          	lfsr	2,1
  3785  002482  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  3786  002484  26D9               	addwf	fsr2l,f,c
  3787  002486  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  3788  002488  22DA               	addwfc	fsr2h,f,c
  3789  00248A  C063  F079         	movff	ipv4_writeHeaderIntoBuffer@header+3,??_ipv4_writeHeaderIntoBuffer
  3790  00248E  0E03               	movlw	3
  3791  002490  1779               	andwf	??_ipv4_writeHeaderIntoBuffer& (0+255),f,b
  3792  002492  4562               	rlncf	(ipv4_writeHeaderIntoBuffer@header+2)& (0+255),w,b
  3793  002494  46E8               	rlncf	wreg,f,c
  3794  002496  0BFC               	andlw	252
  3795  002498  1179               	iorwf	??_ipv4_writeHeaderIntoBuffer& (0+255),w,b
  3796  00249A  6EDF               	movwf	indf2,c
  3797                           
  3798                           ;ipv4.c: 129: *(ptr + 2) = (header.totalLength & 0xff00) >> 8;
  3799  00249C  EE20 F002          	lfsr	2,2
  3800  0024A0  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  3801  0024A2  26D9               	addwf	fsr2l,f,c
  3802  0024A4  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  3803  0024A6  22DA               	addwfc	fsr2h,f,c
  3804  0024A8  5165               	movf	(ipv4_writeHeaderIntoBuffer@header+5)& (0+255),w,b
  3805  0024AA  6EDF               	movwf	indf2,c
  3806                           
  3807                           ;ipv4.c: 130: *(ptr + 3) = header.totalLength & 0x00ff;
  3808  0024AC  EE20 F003          	lfsr	2,3
  3809  0024B0  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  3810  0024B2  26D9               	addwf	fsr2l,f,c
  3811  0024B4  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  3812  0024B6  22DA               	addwfc	fsr2h,f,c
  3813  0024B8  C064  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+4,indf2
  3814                           
  3815                           ;ipv4.c: 131: *(ptr + 4) = (header.identification & 0xff00) >> 8;
  3816  0024BC  EE20 F004          	lfsr	2,4
  3817  0024C0  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  3818  0024C2  26D9               	addwf	fsr2l,f,c
  3819  0024C4  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  3820  0024C6  22DA               	addwfc	fsr2h,f,c
  3821  0024C8  5167               	movf	(ipv4_writeHeaderIntoBuffer@header+7)& (0+255),w,b
  3822  0024CA  6EDF               	movwf	indf2,c
  3823                           
  3824                           ;ipv4.c: 132: *(ptr + 5) = header.identification & 0x00ff;
  3825  0024CC  EE20 F005          	lfsr	2,5
  3826  0024D0  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  3827  0024D2  26D9               	addwf	fsr2l,f,c
  3828  0024D4  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  3829  0024D6  22DA               	addwfc	fsr2h,f,c
  3830  0024D8  C066  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+6,indf2
  3831                           
  3832                           ; BSR set to: 0
  3833                           ;ipv4.c: 133: *(ptr + 6) = (header.flags << 5) | ((header.fragmentOffset & 0x1f00) >> 8)
      +                          ;
  3834  0024DC  EE20 F006          	lfsr	2,6
  3835  0024E0  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  3836  0024E2  26D9               	addwf	fsr2l,f,c
  3837  0024E4  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  3838  0024E6  22DA               	addwfc	fsr2h,f,c
  3839  0024E8  EE10  F069         	lfsr	1,ipv4_writeHeaderIntoBuffer@header+9
  3840  0024EC  CFE6 F079          	movff	postinc1,??_ipv4_writeHeaderIntoBuffer
  3841  0024F0  CFE5 F07A          	movff	postdec1,??_ipv4_writeHeaderIntoBuffer+1
  3842  0024F4  C07A  F079         	movff	??_ipv4_writeHeaderIntoBuffer+1,??_ipv4_writeHeaderIntoBuffer
  3843  0024F8  6B7A               	clrf	(??_ipv4_writeHeaderIntoBuffer+1)& (0+255),b
  3844  0024FA  0E1F               	movlw	31
  3845  0024FC  1779               	andwf	??_ipv4_writeHeaderIntoBuffer& (0+255),f,b
  3846  0024FE  3968               	swapf	(ipv4_writeHeaderIntoBuffer@header+8)& (0+255),w,b
  3847  002500  46E8               	rlncf	wreg,f,c
  3848  002502  0BE0               	andlw	224
  3849  002504  1179               	iorwf	??_ipv4_writeHeaderIntoBuffer& (0+255),w,b
  3850  002506  6EDF               	movwf	indf2,c
  3851                           
  3852                           ; BSR set to: 0
  3853                           ;ipv4.c: 134: *(ptr + 7) = (header.fragmentOffset & 0x00ff);
  3854  002508  EE20 F007          	lfsr	2,7
  3855  00250C  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  3856  00250E  26D9               	addwf	fsr2l,f,c
  3857  002510  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  3858  002512  22DA               	addwfc	fsr2h,f,c
  3859  002514  C069  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+9,indf2
  3860                           
  3861                           ; BSR set to: 0
  3862                           ;ipv4.c: 135: *(ptr + 8) = (header.timeToLive);
  3863  002518  EE20 F008          	lfsr	2,8
  3864  00251C  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  3865  00251E  26D9               	addwf	fsr2l,f,c
  3866  002520  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  3867  002522  22DA               	addwfc	fsr2h,f,c
  3868  002524  C06B  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+11,indf2
  3869                           
  3870                           ; BSR set to: 0
  3871                           ;ipv4.c: 136: *(ptr + 9) = (header.protocol);
  3872  002528  EE20 F009          	lfsr	2,9
  3873  00252C  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  3874  00252E  26D9               	addwf	fsr2l,f,c
  3875  002530  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  3876  002532  22DA               	addwfc	fsr2h,f,c
  3877  002534  C06C  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+12,indf2
  3878                           
  3879                           ; BSR set to: 0
  3880                           ;ipv4.c: 137: *(ptr + 10) = (header.checksum & 0xff00) >> 8;
  3881  002538  EE20 F00A          	lfsr	2,10
  3882  00253C  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  3883  00253E  26D9               	addwf	fsr2l,f,c
  3884  002540  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  3885  002542  22DA               	addwfc	fsr2h,f,c
  3886  002544  516E               	movf	(ipv4_writeHeaderIntoBuffer@header+14)& (0+255),w,b
  3887  002546  6EDF               	movwf	indf2,c
  3888                           
  3889                           ; BSR set to: 0
  3890                           ;ipv4.c: 138: *(ptr + 11) = (header.checksum & 0x00ff);
  3891  002548  EE20 F00B          	lfsr	2,11
  3892  00254C  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  3893  00254E  26D9               	addwf	fsr2l,f,c
  3894  002550  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  3895  002552  22DA               	addwfc	fsr2h,f,c
  3896  002554  C06D  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+13,indf2
  3897                           
  3898                           ; BSR set to: 0
  3899                           ;ipv4.c: 139: *(ptr + 12) = (header.source.address[0]);
  3900  002558  EE20 F00C          	lfsr	2,12
  3901  00255C  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  3902  00255E  26D9               	addwf	fsr2l,f,c
  3903  002560  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  3904  002562  22DA               	addwfc	fsr2h,f,c
  3905  002564  C06F  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+15,indf2
  3906                           
  3907                           ; BSR set to: 0
  3908                           ;ipv4.c: 140: *(ptr + 13) = (header.source.address[1]);
  3909  002568  EE20 F00D          	lfsr	2,13
  3910  00256C  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  3911  00256E  26D9               	addwf	fsr2l,f,c
  3912  002570  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  3913  002572  22DA               	addwfc	fsr2h,f,c
  3914  002574  C070  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+16,indf2
  3915                           
  3916                           ; BSR set to: 0
  3917                           ;ipv4.c: 141: *(ptr + 14) = (header.source.address[2]);
  3918  002578  EE20 F00E          	lfsr	2,14
  3919  00257C  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  3920  00257E  26D9               	addwf	fsr2l,f,c
  3921  002580  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  3922  002582  22DA               	addwfc	fsr2h,f,c
  3923  002584  C071  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+17,indf2
  3924                           
  3925                           ; BSR set to: 0
  3926                           ;ipv4.c: 142: *(ptr + 15) = (header.source.address[3]);
  3927  002588  EE20 F00F          	lfsr	2,15
  3928  00258C  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  3929  00258E  26D9               	addwf	fsr2l,f,c
  3930  002590  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  3931  002592  22DA               	addwfc	fsr2h,f,c
  3932  002594  C072  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+18,indf2
  3933                           
  3934                           ; BSR set to: 0
  3935                           ;ipv4.c: 143: *(ptr + 16) = (header.destination.address[0]);
  3936  002598  EE20 F010          	lfsr	2,16
  3937  00259C  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  3938  00259E  26D9               	addwf	fsr2l,f,c
  3939  0025A0  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  3940  0025A2  22DA               	addwfc	fsr2h,f,c
  3941  0025A4  C073  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+19,indf2
  3942                           
  3943                           ; BSR set to: 0
  3944                           ;ipv4.c: 144: *(ptr + 17) = (header.destination.address[1]);
  3945  0025A8  EE20 F011          	lfsr	2,17
  3946  0025AC  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  3947  0025AE  26D9               	addwf	fsr2l,f,c
  3948  0025B0  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  3949  0025B2  22DA               	addwfc	fsr2h,f,c
  3950  0025B4  C074  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+20,indf2
  3951                           
  3952                           ; BSR set to: 0
  3953                           ;ipv4.c: 145: *(ptr + 18) = (header.destination.address[2]);
  3954  0025B8  EE20 F012          	lfsr	2,18
  3955  0025BC  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  3956  0025BE  26D9               	addwf	fsr2l,f,c
  3957  0025C0  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  3958  0025C2  22DA               	addwfc	fsr2h,f,c
  3959  0025C4  C075  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+21,indf2
  3960                           
  3961                           ; BSR set to: 0
  3962                           ;ipv4.c: 146: *(ptr + 19) = (header.destination.address[3]);
  3963  0025C8  EE20 F013          	lfsr	2,19
  3964  0025CC  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  3965  0025CE  26D9               	addwf	fsr2l,f,c
  3966  0025D0  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  3967  0025D2  22DA               	addwfc	fsr2h,f,c
  3968  0025D4  C076  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+22,indf2
  3969                           
  3970                           ; BSR set to: 0
  3971  0025D8  0012               	return		;funcret
  3972  0025DA                     __end_of_ipv4_writeHeaderIntoBuffer:
  3973                           	opt stack 0
  3974                           tblptru	equ	0xFF8
  3975                           tblptrh	equ	0xFF7
  3976                           tblptrl	equ	0xFF6
  3977                           tablat	equ	0xFF5
  3978                           prodh	equ	0xFF4
  3979                           prodl	equ	0xFF3
  3980                           intcon	equ	0xFF2
  3981                           intcon3	equ	0xFF0
  3982                           postinc0	equ	0xFEE
  3983                           plusw0	equ	0xFEB
  3984                           fsr0h	equ	0xFEA
  3985                           fsr0l	equ	0xFE9
  3986                           wreg	equ	0xFE8
  3987                           postinc1	equ	0xFE6
  3988                           postdec1	equ	0xFE5
  3989                           plusw1	equ	0xFE3
  3990                           fsr1l	equ	0xFE1
  3991                           indf2	equ	0xFDF
  3992                           postinc2	equ	0xFDE
  3993                           postdec2	equ	0xFDD
  3994                           plusw2	equ	0xFDB
  3995                           fsr2h	equ	0xFDA
  3996                           fsr2l	equ	0xFD9
  3997                           status	equ	0xFD8
  3998                           
  3999 ;; *************** function _ipv4_txFrameRequest *****************
  4000 ;; Defined at:
  4001 ;;		line 29 in file "src/stack/protocols/ipv4.c"
  4002 ;; Parameters:    Size  Location     Type
  4003 ;;  packet          2   71[BANK0 ] PTR struct ipv4_packet
  4004 ;;		 -> stack(113), 
  4005 ;; Auto vars:     Size  Location     Type
  4006 ;;		None
  4007 ;; Return value:  Size  Location     Type
  4008 ;;                  1    wreg      void 
  4009 ;; Registers used:
  4010 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4011 ;; Tracked objects:
  4012 ;;		On entry : 0/0
  4013 ;;		On exit  : 0/0
  4014 ;;		Unchanged: 0/0
  4015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4016 ;;      Params:         0       2       0       0       0       0       0       0       0
  4017 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4018 ;;      Temps:          0       4       0       0       0       0       0       0       0
  4019 ;;      Totals:         0       6       0       0       0       0       0       0       0
  4020 ;;Total ram usage:        6 bytes
  4021 ;; Hardware stack levels used:    1
  4022 ;; Hardware stack levels required when called:    9
  4023 ;; This function calls:
  4024 ;;		_ethernet_txFrameRequest
  4025 ;; This function is called by:
  4026 ;;		_main
  4027 ;; This function uses a non-reentrant model
  4028 ;;
  4029                           
  4030                           	psect	text5
  4031  002718                     __ptext5:
  4032                           	opt stack 0
  4033  002718                     _ipv4_txFrameRequest:
  4034                           	opt stack 21
  4035                           
  4036                           ;ipv4.c: 30: packet->ethernet.length = packet->ipv4Header.totalLength + 8;
  4037                           
  4038                           ; BSR set to: 0
  4039                           ;incstack = 0
  4040  002718  0100               	movlb	0	; () banked
  4041  00271A  EE20 F004          	lfsr	2,4
  4042  00271E  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4043  002720  26D9               	addwf	fsr2l,f,c
  4044  002722  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4045  002724  22DA               	addwfc	fsr2h,f,c
  4046  002726  CFDE F0A9          	movff	postinc2,??_ipv4_txFrameRequest
  4047  00272A  CFDD F0AA          	movff	postdec2,??_ipv4_txFrameRequest+1
  4048  00272E  0E08               	movlw	8
  4049  002730  27A9               	addwf	??_ipv4_txFrameRequest& (0+255),f,b
  4050  002732  0E00               	movlw	0
  4051  002734  23AA               	addwfc	(??_ipv4_txFrameRequest+1)& (0+255),f,b
  4052  002736  EE20 F020          	lfsr	2,32
  4053  00273A  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4054  00273C  26D9               	addwf	fsr2l,f,c
  4055  00273E  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4056  002740  22DA               	addwfc	fsr2h,f,c
  4057  002742  C0A9  FFDE         	movff	??_ipv4_txFrameRequest,postinc2
  4058  002746  C0AA  FFDD         	movff	??_ipv4_txFrameRequest+1,postdec2
  4059                           
  4060                           ;ipv4.c: 31: packet->ethernet.ethertype = ETHERTYPE_IPv4;
  4061  00274A  EE20 F02E          	lfsr	2,46
  4062  00274E  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4063  002750  26D9               	addwf	fsr2l,f,c
  4064  002752  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4065  002754  22DA               	addwfc	fsr2h,f,c
  4066  002756  0E00               	movlw	0
  4067  002758  6EDE               	movwf	postinc2,c
  4068  00275A  0E08               	movlw	8
  4069  00275C  6EDD               	movwf	postdec2,c
  4070                           
  4071                           ; BSR set to: 0
  4072                           ;ipv4.c: 32: ethernet_txFrameRequest(&packet->ethernet);
  4073  00275E  0E20               	movlw	32
  4074  002760  25A7               	addwf	ipv4_txFrameRequest@packet& (0+255),w,b
  4075  002762  6FA2               	movwf	ethernet_txFrameRequest@frame& (0+255),b
  4076  002764  0E00               	movlw	0
  4077  002766  21A8               	addwfc	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4078  002768  6FA3               	movwf	(ethernet_txFrameRequest@frame+1)& (0+255),b
  4079  00276A  ECE9  F017         	call	_ethernet_txFrameRequest	;wreg free
  4080                           
  4081                           ;ipv4.c: 34: packet->memory.fIsAssigned = packet->ethernet.memory.fIsAssigned;
  4082  00276E  0100               	movlb	0	; () banked
  4083  002770  EE20 F036          	lfsr	2,54
  4084  002774  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4085  002776  26D9               	addwf	fsr2l,f,c
  4086  002778  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4087  00277A  22DA               	addwfc	fsr2h,f,c
  4088  00277C  EE10 F01D          	lfsr	1,29
  4089  002780  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4090  002782  26E1               	addwf	fsr1l,f,c
  4091  002784  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4092  002786  22E2               	addwfc	fsr1h,f,c
  4093  002788  CFDF FFE7          	movff	indf2,indf1
  4094                           
  4095                           ; BSR set to: 0
  4096                           ;ipv4.c: 35: packet->memory.fOutOfMemory = packet->ethernet.memory.fOutOfMemory;
  4097  00278C  EE20 F037          	lfsr	2,55
  4098  002790  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4099  002792  26D9               	addwf	fsr2l,f,c
  4100  002794  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4101  002796  22DA               	addwfc	fsr2h,f,c
  4102  002798  EE10 F01E          	lfsr	1,30
  4103  00279C  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4104  00279E  26E1               	addwf	fsr1l,f,c
  4105  0027A0  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4106  0027A2  22E2               	addwfc	fsr1h,f,c
  4107  0027A4  CFDF FFE7          	movff	indf2,indf1
  4108                           
  4109                           ; BSR set to: 0
  4110                           ;ipv4.c: 36: packet->memory.index = packet->ethernet.memory.index;
  4111  0027A8  EE20 F038          	lfsr	2,56
  4112  0027AC  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4113  0027AE  26D9               	addwf	fsr2l,f,c
  4114  0027B0  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4115  0027B2  22DA               	addwfc	fsr2h,f,c
  4116  0027B4  EE10 F01F          	lfsr	1,31
  4117  0027B8  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4118  0027BA  26E1               	addwf	fsr1l,f,c
  4119  0027BC  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4120  0027BE  22E2               	addwfc	fsr1h,f,c
  4121  0027C0  CFDF FFE7          	movff	indf2,indf1
  4122                           
  4123                           ; BSR set to: 0
  4124                           ;ipv4.c: 37: packet->memory.start = packet->ethernet.memory.start + 8;
  4125  0027C4  EE20 F030          	lfsr	2,48
  4126  0027C8  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4127  0027CA  26D9               	addwf	fsr2l,f,c
  4128  0027CC  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4129  0027CE  22DA               	addwfc	fsr2h,f,c
  4130  0027D0  CFDE F0A9          	movff	postinc2,??_ipv4_txFrameRequest
  4131  0027D4  CFDD F0AA          	movff	postdec2,??_ipv4_txFrameRequest+1
  4132  0027D8  0E08               	movlw	8
  4133  0027DA  27A9               	addwf	??_ipv4_txFrameRequest& (0+255),f,b
  4134  0027DC  0E00               	movlw	0
  4135  0027DE  23AA               	addwfc	(??_ipv4_txFrameRequest+1)& (0+255),f,b
  4136  0027E0  EE20 F017          	lfsr	2,23
  4137  0027E4  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4138  0027E6  26D9               	addwf	fsr2l,f,c
  4139  0027E8  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4140  0027EA  22DA               	addwfc	fsr2h,f,c
  4141  0027EC  C0A9  FFDE         	movff	??_ipv4_txFrameRequest,postinc2
  4142  0027F0  C0AA  FFDD         	movff	??_ipv4_txFrameRequest+1,postdec2
  4143                           
  4144                           ; BSR set to: 0
  4145                           ;ipv4.c: 38: packet->memory.end = packet->ethernet.memory.end;
  4146  0027F4  EE20 F032          	lfsr	2,50
  4147  0027F8  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4148  0027FA  26D9               	addwf	fsr2l,f,c
  4149  0027FC  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4150  0027FE  22DA               	addwfc	fsr2h,f,c
  4151  002800  EE10 F019          	lfsr	1,25
  4152  002804  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4153  002806  26E1               	addwf	fsr1l,f,c
  4154  002808  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4155  00280A  22E2               	addwfc	fsr1h,f,c
  4156  00280C  CFDE FFE6          	movff	postinc2,postinc1
  4157  002810  CFDD FFE5          	movff	postdec2,postdec1
  4158                           
  4159                           ; BSR set to: 0
  4160                           ;ipv4.c: 39: packet->memory.length = packet->ethernet.memory.length - 8;
  4161  002814  0EF8               	movlw	248
  4162  002816  6FA9               	movwf	??_ipv4_txFrameRequest& (0+255),b
  4163  002818  0EFF               	movlw	255
  4164  00281A  6FAA               	movwf	(??_ipv4_txFrameRequest+1)& (0+255),b
  4165  00281C  EE20 F034          	lfsr	2,52
  4166  002820  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4167  002822  26D9               	addwf	fsr2l,f,c
  4168  002824  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4169  002826  22DA               	addwfc	fsr2h,f,c
  4170  002828  CFDE F0AB          	movff	postinc2,??_ipv4_txFrameRequest+2
  4171  00282C  CFDD F0AC          	movff	postdec2,??_ipv4_txFrameRequest+3
  4172  002830  51A9               	movf	??_ipv4_txFrameRequest& (0+255),w,b
  4173  002832  27AB               	addwf	(??_ipv4_txFrameRequest+2)& (0+255),f,b
  4174  002834  51AA               	movf	(??_ipv4_txFrameRequest+1)& (0+255),w,b
  4175  002836  23AC               	addwfc	(??_ipv4_txFrameRequest+3)& (0+255),f,b
  4176  002838  EE20 F01B          	lfsr	2,27
  4177  00283C  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4178  00283E  26D9               	addwf	fsr2l,f,c
  4179  002840  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4180  002842  22DA               	addwfc	fsr2h,f,c
  4181  002844  C0AB  FFDE         	movff	??_ipv4_txFrameRequest+2,postinc2
  4182  002848  C0AC  FFDD         	movff	??_ipv4_txFrameRequest+3,postdec2
  4183                           
  4184                           ; BSR set to: 0
  4185  00284C  0012               	return		;funcret
  4186  00284E                     __end_of_ipv4_txFrameRequest:
  4187                           	opt stack 0
  4188                           tblptru	equ	0xFF8
  4189                           tblptrh	equ	0xFF7
  4190                           tblptrl	equ	0xFF6
  4191                           tablat	equ	0xFF5
  4192                           prodh	equ	0xFF4
  4193                           prodl	equ	0xFF3
  4194                           intcon	equ	0xFF2
  4195                           intcon3	equ	0xFF0
  4196                           postinc0	equ	0xFEE
  4197                           plusw0	equ	0xFEB
  4198                           fsr0h	equ	0xFEA
  4199                           fsr0l	equ	0xFE9
  4200                           wreg	equ	0xFE8
  4201                           indf1	equ	0xFE7
  4202                           postinc1	equ	0xFE6
  4203                           postdec1	equ	0xFE5
  4204                           plusw1	equ	0xFE3
  4205                           fsr1h	equ	0xFE2
  4206                           fsr1l	equ	0xFE1
  4207                           indf2	equ	0xFDF
  4208                           postinc2	equ	0xFDE
  4209                           postdec2	equ	0xFDD
  4210                           plusw2	equ	0xFDB
  4211                           fsr2h	equ	0xFDA
  4212                           fsr2l	equ	0xFD9
  4213                           status	equ	0xFD8
  4214                           
  4215 ;; *************** function _ipv4_streamToTransmissionBuffer *****************
  4216 ;; Defined at:
  4217 ;;		line 85 in file "src/stack/protocols/ipv4.c"
  4218 ;; Parameters:    Size  Location     Type
  4219 ;;  data            1    wreg     unsigned char 
  4220 ;;  packet         62   18[BANK0 ] struct ipv4_packet
  4221 ;; Auto vars:     Size  Location     Type
  4222 ;;  data            1   84[BANK0 ] unsigned char 
  4223 ;;  ethernetPack    2   85[BANK0 ] unsigned int 
  4224 ;;  remainingLen    2    0        unsigned int 
  4225 ;; Return value:  Size  Location     Type
  4226 ;;                  1    wreg      void 
  4227 ;; Registers used:
  4228 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4229 ;; Tracked objects:
  4230 ;;		On entry : 0/0
  4231 ;;		On exit  : 0/0
  4232 ;;		Unchanged: 0/0
  4233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4234 ;;      Params:         0      62       0       0       0       0       0       0       0
  4235 ;;      Locals:         0       3       0       0       0       0       0       0       0
  4236 ;;      Temps:          0       4       0       0       0       0       0       0       0
  4237 ;;      Totals:         0      69       0       0       0       0       0       0       0
  4238 ;;Total ram usage:       69 bytes
  4239 ;; Hardware stack levels used:    1
  4240 ;; Hardware stack levels required when called:    7
  4241 ;; This function calls:
  4242 ;;		_ethernetController_streamToTransmitBuffer
  4243 ;; This function is called by:
  4244 ;;		_main
  4245 ;; This function uses a non-reentrant model
  4246 ;;
  4247                           
  4248                           	psect	text6
  4249  003E86                     __ptext6:
  4250                           	opt stack 0
  4251  003E86                     _ipv4_streamToTransmissionBuffer:
  4252                           	opt stack 23
  4253                           
  4254                           ; BSR set to: 0
  4255                           ;incstack = 0
  4256                           ;ipv4_streamToTransmissionBuffer@data stored from wreg
  4257  003E86  0100               	movlb	0	; () banked
  4258  003E88  6FB4               	movwf	ipv4_streamToTransmissionBuffer@data& (0+255),b
  4259                           
  4260                           ;ipv4.c: 86: uint16_t ethernetPacketLength = packet.ipv4Header.totalLength;
  4261  003E8A  C076  F0B5         	movff	ipv4_streamToTransmissionBuffer@packet+4,ipv4_streamToTransmissionBuffer@ethernet
      +                          PacketLength
  4262  003E8E  C077  F0B6         	movff	ipv4_streamToTransmissionBuffer@packet+5,ipv4_streamToTransmissionBuffer@ethernet
      +                          PacketLength+1
  4263                           
  4264                           ;ipv4.c: 87: uint16_t remainingLength;
  4265                           ;ipv4.c: 91: uint16_t static dataPointer = 0;
  4266                           ;ipv4.c: 92: ethernetController_streamToTransmitBuffer(data, ethernetPacketLength);
  4267  003E92  C0B5  F06A         	movff	ipv4_streamToTransmissionBuffer@ethernetPacketLength,ethernetController_streamToT
      +                          ransmitBuffer@len
  4268  003E96  C0B6  F06B         	movff	ipv4_streamToTransmissionBuffer@ethernetPacketLength+1,ethernetController_streamT
      +                          oTransmitBuffer@len+1
  4269  003E9A  0100               	movlb	0	; () banked
  4270  003E9C  51B4               	movf	ipv4_streamToTransmissionBuffer@data& (0+255),w,b
  4271  003E9E  EC4E  F01E         	call	_ethernetController_streamToTransmitBuffer
  4272                           
  4273                           ;ipv4.c: 93: if (dataPointer == ethernetPacketLength - 1) {
  4274  003EA2  0EFF               	movlw	255
  4275  003EA4  0100               	movlb	0	; () banked
  4276  003EA6  6FB0               	movwf	??_ipv4_streamToTransmissionBuffer& (0+255),b
  4277  003EA8  0EFF               	movlw	255
  4278  003EAA  6FB1               	movwf	(??_ipv4_streamToTransmissionBuffer+1)& (0+255),b
  4279  003EAC  C0B5  F0B2         	movff	ipv4_streamToTransmissionBuffer@ethernetPacketLength,??_ipv4_streamToTransmission
      +                          Buffer+2
  4280  003EB0  C0B6  F0B3         	movff	ipv4_streamToTransmissionBuffer@ethernetPacketLength+1,??_ipv4_streamToTransmissi
      +                          onBuffer+3
  4281  003EB4  51B0               	movf	??_ipv4_streamToTransmissionBuffer& (0+255),w,b
  4282  003EB6  27B2               	addwf	(??_ipv4_streamToTransmissionBuffer+2)& (0+255),f,b
  4283  003EB8  51B1               	movf	(??_ipv4_streamToTransmissionBuffer+1)& (0+255),w,b
  4284  003EBA  23B3               	addwfc	(??_ipv4_streamToTransmissionBuffer+3)& (0+255),f,b
  4285  003EBC  503F               	movf	ipv4_streamToTransmissionBuffer@dataPointer,w,c
  4286  003EBE  19B2               	xorwf	(??_ipv4_streamToTransmissionBuffer+2)& (0+255),w,b
  4287  003EC0  E109               	bnz	l8720
  4288  003EC2  5040               	movf	ipv4_streamToTransmissionBuffer@dataPointer+1,w,c
  4289  003EC4  19B3               	xorwf	(??_ipv4_streamToTransmissionBuffer+3)& (0+255),w,b
  4290  003EC6  A4D8               	btfss	status,2,c
  4291  003EC8  D005               	goto	l992
  4292                           
  4293                           ; BSR set to: 0
  4294                           ;ipv4.c: 94: dataPointer = 0;
  4295  003ECA  0E00               	movlw	0
  4296  003ECC  6E40               	movwf	ipv4_streamToTransmissionBuffer@dataPointer+1,c
  4297  003ECE  0E00               	movlw	0
  4298  003ED0  6E3F               	movwf	ipv4_streamToTransmissionBuffer@dataPointer,c
  4299                           
  4300                           ;ipv4.c: 95: } else {
  4301  003ED2  0012               	return	
  4302  003ED4                     l992:
  4303  003ED4                     l8720:
  4304                           
  4305                           ; BSR set to: 0
  4306                           ;ipv4.c: 96: dataPointer++;
  4307  003ED4  4A3F               	infsnz	ipv4_streamToTransmissionBuffer@dataPointer,f,c
  4308  003ED6  2A40               	incf	ipv4_streamToTransmissionBuffer@dataPointer+1,f,c
  4309  003ED8  0012               	return	
  4310  003EDA                     __end_of_ipv4_streamToTransmissionBuffer:
  4311                           	opt stack 0
  4312                           tblptru	equ	0xFF8
  4313                           tblptrh	equ	0xFF7
  4314                           tblptrl	equ	0xFF6
  4315                           tablat	equ	0xFF5
  4316                           prodh	equ	0xFF4
  4317                           prodl	equ	0xFF3
  4318                           intcon	equ	0xFF2
  4319                           intcon3	equ	0xFF0
  4320                           postinc0	equ	0xFEE
  4321                           plusw0	equ	0xFEB
  4322                           fsr0h	equ	0xFEA
  4323                           fsr0l	equ	0xFE9
  4324                           wreg	equ	0xFE8
  4325                           indf1	equ	0xFE7
  4326                           postinc1	equ	0xFE6
  4327                           postdec1	equ	0xFE5
  4328                           plusw1	equ	0xFE3
  4329                           fsr1h	equ	0xFE2
  4330                           fsr1l	equ	0xFE1
  4331                           indf2	equ	0xFDF
  4332                           postinc2	equ	0xFDE
  4333                           postdec2	equ	0xFDD
  4334                           plusw2	equ	0xFDB
  4335                           fsr2h	equ	0xFDA
  4336                           fsr2l	equ	0xFD9
  4337                           status	equ	0xFD8
  4338                           
  4339 ;; *************** function _ipv4_calculateHeaderChecksum *****************
  4340 ;; Defined at:
  4341 ;;		line 100 in file "src/stack/protocols/ipv4.c"
  4342 ;; Parameters:    Size  Location     Type
  4343 ;;  header          2    0[BANK0 ] PTR struct ipv4_header
  4344 ;;		 -> stack.pendingPacketToSend(62), stack(113), 
  4345 ;; Auto vars:     Size  Location     Type
  4346 ;;  sum             4   14[BANK0 ] unsigned long 
  4347 ;; Return value:  Size  Location     Type
  4348 ;;                  1    wreg      void 
  4349 ;; Registers used:
  4350 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4351 ;; Tracked objects:
  4352 ;;		On entry : 0/0
  4353 ;;		On exit  : 0/0
  4354 ;;		Unchanged: 0/0
  4355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4356 ;;      Params:         0       2       0       0       0       0       0       0       0
  4357 ;;      Locals:         0       4       0       0       0       0       0       0       0
  4358 ;;      Temps:          0      12       0       0       0       0       0       0       0
  4359 ;;      Totals:         0      18       0       0       0       0       0       0       0
  4360 ;;Total ram usage:       18 bytes
  4361 ;; Hardware stack levels used:    1
  4362 ;; Hardware stack levels required when called:    4
  4363 ;; This function calls:
  4364 ;;		Nothing
  4365 ;; This function is called by:
  4366 ;;		_main
  4367 ;; This function uses a non-reentrant model
  4368 ;;
  4369                           
  4370                           	psect	text7
  4371  0011F4                     __ptext7:
  4372                           	opt stack 0
  4373  0011F4                     _ipv4_calculateHeaderChecksum:
  4374                           	opt stack 26
  4375                           
  4376                           ;ipv4.c: 101: header->headerLength = 5;
  4377                           
  4378                           ; BSR set to: 0
  4379                           ;incstack = 0
  4380  0011F4  0100               	movlb	0	; () banked
  4381  0011F6  EE20 F001          	lfsr	2,1
  4382  0011FA  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4383  0011FC  26D9               	addwf	fsr2l,f,c
  4384  0011FE  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4385  001200  22DA               	addwfc	fsr2h,f,c
  4386  001202  0E05               	movlw	5
  4387  001204  6EDF               	movwf	indf2,c
  4388                           
  4389                           ;ipv4.c: 102: header->dscp = 0;
  4390  001206  EE20 F002          	lfsr	2,2
  4391  00120A  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4392  00120C  26D9               	addwf	fsr2l,f,c
  4393  00120E  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4394  001210  22DA               	addwfc	fsr2h,f,c
  4395  001212  0E00               	movlw	0
  4396  001214  6EDF               	movwf	indf2,c
  4397                           
  4398                           ;ipv4.c: 103: header->ecn = 0;
  4399  001216  EE20 F003          	lfsr	2,3
  4400  00121A  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4401  00121C  26D9               	addwf	fsr2l,f,c
  4402  00121E  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4403  001220  22DA               	addwfc	fsr2h,f,c
  4404  001222  0E00               	movlw	0
  4405  001224  6EDF               	movwf	indf2,c
  4406                           
  4407                           ;ipv4.c: 104: header->flags = 0x00;
  4408  001226  EE20 F008          	lfsr	2,8
  4409  00122A  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4410  00122C  26D9               	addwf	fsr2l,f,c
  4411  00122E  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4412  001230  22DA               	addwfc	fsr2h,f,c
  4413  001232  0E00               	movlw	0
  4414  001234  6EDF               	movwf	indf2,c
  4415                           
  4416                           ;ipv4.c: 105: header->fragmentOffset = 0x00;
  4417  001236  EE20 F009          	lfsr	2,9
  4418  00123A  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4419  00123C  26D9               	addwf	fsr2l,f,c
  4420  00123E  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4421  001240  22DA               	addwfc	fsr2h,f,c
  4422  001242  0E00               	movlw	0
  4423  001244  6EDE               	movwf	postinc2,c
  4424  001246  0E00               	movlw	0
  4425  001248  6EDD               	movwf	postdec2,c
  4426                           
  4427                           ;ipv4.c: 106: header->identification = 0x00;
  4428  00124A  EE20 F006          	lfsr	2,6
  4429  00124E  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4430  001250  26D9               	addwf	fsr2l,f,c
  4431  001252  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4432  001254  22DA               	addwfc	fsr2h,f,c
  4433  001256  0E00               	movlw	0
  4434  001258  6EDE               	movwf	postinc2,c
  4435  00125A  0E00               	movlw	0
  4436  00125C  6EDD               	movwf	postdec2,c
  4437                           
  4438                           ; BSR set to: 0
  4439                           ;ipv4.c: 108: uint32_t sum = 0;
  4440  00125E  0E00               	movlw	0
  4441  001260  6F6E               	movwf	ipv4_calculateHeaderChecksum@sum& (0+255),b
  4442  001262  0E00               	movlw	0
  4443  001264  6F6F               	movwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),b
  4444  001266  0E00               	movlw	0
  4445  001268  6F70               	movwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),b
  4446  00126A  0E00               	movlw	0
  4447  00126C  6F71               	movwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),b
  4448                           
  4449                           ; BSR set to: 0
  4450                           ;ipv4.c: 109: sum = ((header->version << 12) | (header->headerLength << 8) | (header->ds
      +                          cp << 2) | (header->ecn))&0xffff;
  4451  00126E  EE20 F002          	lfsr	2,2
  4452  001272  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4453  001274  26D9               	addwf	fsr2l,f,c
  4454  001276  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4455  001278  22DA               	addwfc	fsr2h,f,c
  4456  00127A  50DF               	movf	indf2,w,c
  4457  00127C  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  4458  00127E  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  4459  001280  90D8               	bcf	status,0,c
  4460  001282  3762               	rlcf	??_ipv4_calculateHeaderChecksum& (0+255),f,b
  4461  001284  3763               	rlcf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  4462  001286  90D8               	bcf	status,0,c
  4463  001288  3762               	rlcf	??_ipv4_calculateHeaderChecksum& (0+255),f,b
  4464  00128A  3763               	rlcf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  4465  00128C  EE20 F001          	lfsr	2,1
  4466  001290  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4467  001292  26D9               	addwf	fsr2l,f,c
  4468  001294  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4469  001296  22DA               	addwfc	fsr2h,f,c
  4470  001298  50DF               	movf	indf2,w,c
  4471  00129A  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  4472  00129C  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  4473  00129E  6F66               	movwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  4474  0012A0  6B65               	clrf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  4475  0012A2  C060  FFD9         	movff	ipv4_calculateHeaderChecksum@header,fsr2l
  4476  0012A6  C061  FFDA         	movff	ipv4_calculateHeaderChecksum@header+1,fsr2h
  4477  0012AA  50DF               	movf	indf2,w,c
  4478  0012AC  6F67               	movwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),b
  4479  0012AE  6B68               	clrf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),b
  4480  0012B0  0E0C               	movlw	12
  4481  0012B2                     u10815:
  4482  0012B2  90D8               	bcf	status,0,c
  4483  0012B4  3767               	rlcf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),f,b
  4484  0012B6  3768               	rlcf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),f,b
  4485  0012B8  2EE8               	decfsz	wreg,f,c
  4486  0012BA  D7FB               	goto	u10815
  4487  0012BC  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  4488  0012BE  1367               	iorwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),f,b
  4489  0012C0  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  4490  0012C2  1368               	iorwf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),f,b
  4491  0012C4  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  4492  0012C6  1367               	iorwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),f,b
  4493  0012C8  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  4494  0012CA  1368               	iorwf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),f,b
  4495  0012CC  EE20 F003          	lfsr	2,3
  4496  0012D0  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4497  0012D2  26D9               	addwf	fsr2l,f,c
  4498  0012D4  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4499  0012D6  22DA               	addwfc	fsr2h,f,c
  4500  0012D8  50DF               	movf	indf2,w,c
  4501  0012DA  6F69               	movwf	(??_ipv4_calculateHeaderChecksum+7)& (0+255),b
  4502  0012DC  5169               	movf	(??_ipv4_calculateHeaderChecksum+7)& (0+255),w,b
  4503  0012DE  1367               	iorwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),f,b
  4504  0012E0  0E00               	movlw	0
  4505  0012E2  1368               	iorwf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),f,b
  4506  0012E4  C067  F06E         	movff	??_ipv4_calculateHeaderChecksum+5,ipv4_calculateHeaderChecksum@sum
  4507  0012E8  C068  F06F         	movff	??_ipv4_calculateHeaderChecksum+6,ipv4_calculateHeaderChecksum@sum+1
  4508  0012EC  6B70               	clrf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),b
  4509  0012EE  6B71               	clrf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),b
  4510                           
  4511                           ; BSR set to: 0
  4512                           ;ipv4.c: 110: sum += header->totalLength;
  4513  0012F0  EE20 F004          	lfsr	2,4
  4514  0012F4  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4515  0012F6  26D9               	addwf	fsr2l,f,c
  4516  0012F8  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4517  0012FA  22DA               	addwfc	fsr2h,f,c
  4518  0012FC  CFDE F062          	movff	postinc2,??_ipv4_calculateHeaderChecksum
  4519  001300  CFDD F063          	movff	postdec2,??_ipv4_calculateHeaderChecksum+1
  4520  001304  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  4521  001306  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  4522  001308  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  4523  00130A  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  4524  00130C  0E00               	movlw	0
  4525  00130E  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  4526  001310  0E00               	movlw	0
  4527  001312  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  4528                           
  4529                           ; BSR set to: 0
  4530                           ;ipv4.c: 111: sum += header->identification;
  4531  001314  EE20 F006          	lfsr	2,6
  4532  001318  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4533  00131A  26D9               	addwf	fsr2l,f,c
  4534  00131C  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4535  00131E  22DA               	addwfc	fsr2h,f,c
  4536  001320  CFDE F062          	movff	postinc2,??_ipv4_calculateHeaderChecksum
  4537  001324  CFDD F063          	movff	postdec2,??_ipv4_calculateHeaderChecksum+1
  4538  001328  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  4539  00132A  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  4540  00132C  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  4541  00132E  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  4542  001330  0E00               	movlw	0
  4543  001332  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  4544  001334  0E00               	movlw	0
  4545  001336  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  4546                           
  4547                           ; BSR set to: 0
  4548                           ;ipv4.c: 112: sum += ((header->flags << 13) | (header->fragmentOffset))&0xffff;
  4549  001338  EE20 F009          	lfsr	2,9
  4550  00133C  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4551  00133E  26D9               	addwf	fsr2l,f,c
  4552  001340  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4553  001342  22DA               	addwfc	fsr2h,f,c
  4554  001344  CFDE F062          	movff	postinc2,??_ipv4_calculateHeaderChecksum
  4555  001348  CFDD F063          	movff	postdec2,??_ipv4_calculateHeaderChecksum+1
  4556  00134C  EE20 F008          	lfsr	2,8
  4557  001350  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4558  001352  26D9               	addwf	fsr2l,f,c
  4559  001354  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4560  001356  22DA               	addwfc	fsr2h,f,c
  4561  001358  50DF               	movf	indf2,w,c
  4562  00135A  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  4563  00135C  6B65               	clrf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  4564  00135E  0E0D               	movlw	13
  4565  001360                     u10825:
  4566  001360  90D8               	bcf	status,0,c
  4567  001362  3764               	rlcf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  4568  001364  3765               	rlcf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  4569  001366  2EE8               	decfsz	wreg,f,c
  4570  001368  D7FB               	goto	u10825
  4571  00136A  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  4572  00136C  1364               	iorwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  4573  00136E  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  4574  001370  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  4575  001372  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  4576  001374  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  4577  001376  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  4578  001378  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  4579  00137A  0E00               	movlw	0
  4580  00137C  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  4581  00137E  0E00               	movlw	0
  4582  001380  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  4583                           
  4584                           ; BSR set to: 0
  4585                           ;ipv4.c: 113: sum += ((header->timeToLive << 8) | (header->protocol))&0xffff;
  4586  001382  EE20 F00B          	lfsr	2,11
  4587  001386  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4588  001388  26D9               	addwf	fsr2l,f,c
  4589  00138A  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4590  00138C  22DA               	addwfc	fsr2h,f,c
  4591  00138E  50DF               	movf	indf2,w,c
  4592  001390  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  4593  001392  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  4594  001394  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  4595  001396  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  4596  001398  EE20 F00C          	lfsr	2,12
  4597  00139C  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4598  00139E  26D9               	addwf	fsr2l,f,c
  4599  0013A0  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4600  0013A2  22DA               	addwfc	fsr2h,f,c
  4601  0013A4  50DF               	movf	indf2,w,c
  4602  0013A6  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  4603  0013A8  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  4604  0013AA  1363               	iorwf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  4605  0013AC  0E00               	movlw	0
  4606  0013AE  1364               	iorwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  4607  0013B0  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  4608  0013B2  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  4609  0013B4  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  4610  0013B6  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  4611  0013B8  0E00               	movlw	0
  4612  0013BA  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  4613  0013BC  0E00               	movlw	0
  4614  0013BE  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  4615                           
  4616                           ; BSR set to: 0
  4617                           ;ipv4.c: 115: sum += ((header->source.address[1] | (header->source.address[0] << 8)))&0x
      +                          ffff;
  4618  0013C0  EE20 F00F          	lfsr	2,15
  4619  0013C4  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4620  0013C6  26D9               	addwf	fsr2l,f,c
  4621  0013C8  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4622  0013CA  22DA               	addwfc	fsr2h,f,c
  4623  0013CC  50DF               	movf	indf2,w,c
  4624  0013CE  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  4625  0013D0  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  4626  0013D2  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  4627  0013D4  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  4628  0013D6  EE20 F010          	lfsr	2,16
  4629  0013DA  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4630  0013DC  26D9               	addwf	fsr2l,f,c
  4631  0013DE  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4632  0013E0  22DA               	addwfc	fsr2h,f,c
  4633  0013E2  50DF               	movf	indf2,w,c
  4634  0013E4  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  4635  0013E6  6B66               	clrf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  4636  0013E8  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  4637  0013EA  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  4638  0013EC  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  4639  0013EE  1366               	iorwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),f,b
  4640  0013F0  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  4641  0013F2  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  4642  0013F4  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  4643  0013F6  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  4644  0013F8  0E00               	movlw	0
  4645  0013FA  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  4646  0013FC  0E00               	movlw	0
  4647  0013FE  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  4648                           
  4649                           ; BSR set to: 0
  4650                           ;ipv4.c: 116: sum += ((header->source.address[3] | (header->source.address[2] << 8)))&0x
      +                          ffff;
  4651  001400  EE20 F011          	lfsr	2,17
  4652  001404  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4653  001406  26D9               	addwf	fsr2l,f,c
  4654  001408  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4655  00140A  22DA               	addwfc	fsr2h,f,c
  4656  00140C  50DF               	movf	indf2,w,c
  4657  00140E  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  4658  001410  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  4659  001412  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  4660  001414  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  4661  001416  EE20 F012          	lfsr	2,18
  4662  00141A  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4663  00141C  26D9               	addwf	fsr2l,f,c
  4664  00141E  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4665  001420  22DA               	addwfc	fsr2h,f,c
  4666  001422  50DF               	movf	indf2,w,c
  4667  001424  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  4668  001426  6B66               	clrf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  4669  001428  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  4670  00142A  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  4671  00142C  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  4672  00142E  1366               	iorwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),f,b
  4673  001430  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  4674  001432  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  4675  001434  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  4676  001436  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  4677  001438  0E00               	movlw	0
  4678  00143A  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  4679  00143C  0E00               	movlw	0
  4680  00143E  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  4681                           
  4682                           ; BSR set to: 0
  4683                           ;ipv4.c: 117: sum += ((header->destination.address[1] | (header->destination.address[0] 
      +                          << 8)))&0xffff;
  4684  001440  EE20 F013          	lfsr	2,19
  4685  001444  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4686  001446  26D9               	addwf	fsr2l,f,c
  4687  001448  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4688  00144A  22DA               	addwfc	fsr2h,f,c
  4689  00144C  50DF               	movf	indf2,w,c
  4690  00144E  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  4691  001450  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  4692  001452  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  4693  001454  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  4694  001456  EE20 F014          	lfsr	2,20
  4695  00145A  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4696  00145C  26D9               	addwf	fsr2l,f,c
  4697  00145E  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4698  001460  22DA               	addwfc	fsr2h,f,c
  4699  001462  50DF               	movf	indf2,w,c
  4700  001464  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  4701  001466  6B66               	clrf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  4702  001468  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  4703  00146A  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  4704  00146C  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  4705  00146E  1366               	iorwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),f,b
  4706  001470  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  4707  001472  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  4708  001474  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  4709  001476  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  4710  001478  0E00               	movlw	0
  4711  00147A  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  4712  00147C  0E00               	movlw	0
  4713  00147E  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  4714                           
  4715                           ; BSR set to: 0
  4716                           ;ipv4.c: 118: sum += ((header->destination.address[3] | (header->destination.address[2] 
      +                          << 8)))&0xffff;
  4717  001480  EE20 F015          	lfsr	2,21
  4718  001484  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4719  001486  26D9               	addwf	fsr2l,f,c
  4720  001488  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4721  00148A  22DA               	addwfc	fsr2h,f,c
  4722  00148C  50DF               	movf	indf2,w,c
  4723  00148E  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  4724  001490  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  4725  001492  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  4726  001494  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  4727  001496  EE20 F016          	lfsr	2,22
  4728  00149A  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4729  00149C  26D9               	addwf	fsr2l,f,c
  4730  00149E  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4731  0014A0  22DA               	addwfc	fsr2h,f,c
  4732  0014A2  50DF               	movf	indf2,w,c
  4733  0014A4  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  4734  0014A6  6B66               	clrf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  4735  0014A8  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  4736  0014AA  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  4737  0014AC  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  4738  0014AE  1366               	iorwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),f,b
  4739  0014B0  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  4740  0014B2  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  4741  0014B4  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  4742  0014B6  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  4743  0014B8  0E00               	movlw	0
  4744  0014BA  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  4745  0014BC  0E00               	movlw	0
  4746  0014BE  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  4747                           
  4748                           ; BSR set to: 0
  4749                           ;ipv4.c: 120: sum = (sum & 0x0ffff)+((sum & 0xf0000) >> 16);
  4750  0014C0  C06E  F062         	movff	ipv4_calculateHeaderChecksum@sum,??_ipv4_calculateHeaderChecksum
  4751  0014C4  C06F  F063         	movff	ipv4_calculateHeaderChecksum@sum+1,??_ipv4_calculateHeaderChecksum+1
  4752  0014C8  C070  F064         	movff	ipv4_calculateHeaderChecksum@sum+2,??_ipv4_calculateHeaderChecksum+2
  4753  0014CC  C071  F065         	movff	ipv4_calculateHeaderChecksum@sum+3,??_ipv4_calculateHeaderChecksum+3
  4754  0014D0  0E11               	movlw	17
  4755  0014D2  D005               	goto	u10830
  4756  0014D4                     u10835:
  4757  0014D4  90D8               	bcf	status,0,c
  4758  0014D6  3365               	rrcf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  4759  0014D8  3364               	rrcf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  4760  0014DA  3363               	rrcf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  4761  0014DC  3362               	rrcf	??_ipv4_calculateHeaderChecksum& (0+255),f,b
  4762  0014DE                     u10830:
  4763  0014DE  2EE8               	decfsz	wreg,f,c
  4764  0014E0  D7F9               	goto	u10835
  4765  0014E2  0E0F               	movlw	15
  4766  0014E4  1562               	andwf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  4767  0014E6  6F66               	movwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  4768  0014E8  0E00               	movlw	0
  4769  0014EA  1563               	andwf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  4770  0014EC  6F67               	movwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),b
  4771  0014EE  0E00               	movlw	0
  4772  0014F0  1564               	andwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  4773  0014F2  6F68               	movwf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),b
  4774  0014F4  0E00               	movlw	0
  4775  0014F6  1565               	andwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  4776  0014F8  6F69               	movwf	(??_ipv4_calculateHeaderChecksum+7)& (0+255),b
  4777  0014FA  0EFF               	movlw	255
  4778  0014FC  156E               	andwf	ipv4_calculateHeaderChecksum@sum& (0+255),w,b
  4779  0014FE  6F6A               	movwf	(??_ipv4_calculateHeaderChecksum+8)& (0+255),b
  4780  001500  0EFF               	movlw	255
  4781  001502  156F               	andwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),w,b
  4782  001504  6F6B               	movwf	(??_ipv4_calculateHeaderChecksum+9)& (0+255),b
  4783  001506  0E00               	movlw	0
  4784  001508  1570               	andwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),w,b
  4785  00150A  6F6C               	movwf	(??_ipv4_calculateHeaderChecksum+10)& (0+255),b
  4786  00150C  0E00               	movlw	0
  4787  00150E  1571               	andwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),w,b
  4788  001510  6F6D               	movwf	(??_ipv4_calculateHeaderChecksum+11)& (0+255),b
  4789  001512  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  4790  001514  256A               	addwf	(??_ipv4_calculateHeaderChecksum+8)& (0+255),w,b
  4791  001516  6F6E               	movwf	ipv4_calculateHeaderChecksum@sum& (0+255),b
  4792  001518  5167               	movf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),w,b
  4793  00151A  216B               	addwfc	(??_ipv4_calculateHeaderChecksum+9)& (0+255),w,b
  4794  00151C  6F6F               	movwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),b
  4795  00151E  5168               	movf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),w,b
  4796  001520  216C               	addwfc	(??_ipv4_calculateHeaderChecksum+10)& (0+255),w,b
  4797  001522  6F70               	movwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),b
  4798  001524  5169               	movf	(??_ipv4_calculateHeaderChecksum+7)& (0+255),w,b
  4799  001526  216D               	addwfc	(??_ipv4_calculateHeaderChecksum+11)& (0+255),w,b
  4800  001528  6F71               	movwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),b
  4801                           
  4802                           ; BSR set to: 0
  4803                           ;ipv4.c: 121: sum = ~sum;
  4804  00152A  C06E  F062         	movff	ipv4_calculateHeaderChecksum@sum,??_ipv4_calculateHeaderChecksum
  4805  00152E  C06F  F063         	movff	ipv4_calculateHeaderChecksum@sum+1,??_ipv4_calculateHeaderChecksum+1
  4806  001532  C070  F064         	movff	ipv4_calculateHeaderChecksum@sum+2,??_ipv4_calculateHeaderChecksum+2
  4807  001536  C071  F065         	movff	ipv4_calculateHeaderChecksum@sum+3,??_ipv4_calculateHeaderChecksum+3
  4808  00153A  1F62               	comf	??_ipv4_calculateHeaderChecksum& (0+255),f,b
  4809  00153C  1F63               	comf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  4810  00153E  1F64               	comf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  4811  001540  1F65               	comf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  4812  001542  C062  F06E         	movff	??_ipv4_calculateHeaderChecksum,ipv4_calculateHeaderChecksum@sum
  4813  001546  C063  F06F         	movff	??_ipv4_calculateHeaderChecksum+1,ipv4_calculateHeaderChecksum@sum+1
  4814  00154A  C064  F070         	movff	??_ipv4_calculateHeaderChecksum+2,ipv4_calculateHeaderChecksum@sum+2
  4815  00154E  C065  F071         	movff	??_ipv4_calculateHeaderChecksum+3,ipv4_calculateHeaderChecksum@sum+3
  4816                           
  4817                           ; BSR set to: 0
  4818                           ;ipv4.c: 123: header->checksum = sum;
  4819  001552  EE20 F00D          	lfsr	2,13
  4820  001556  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4821  001558  26D9               	addwf	fsr2l,f,c
  4822  00155A  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4823  00155C  22DA               	addwfc	fsr2h,f,c
  4824  00155E  C06E  FFDE         	movff	ipv4_calculateHeaderChecksum@sum,postinc2
  4825  001562  C06F  FFDD         	movff	ipv4_calculateHeaderChecksum@sum+1,postdec2
  4826                           
  4827                           ; BSR set to: 0
  4828  001566  0012               	return		;funcret
  4829  001568                     __end_of_ipv4_calculateHeaderChecksum:
  4830                           	opt stack 0
  4831                           tblptru	equ	0xFF8
  4832                           tblptrh	equ	0xFF7
  4833                           tblptrl	equ	0xFF6
  4834                           tablat	equ	0xFF5
  4835                           prodh	equ	0xFF4
  4836                           prodl	equ	0xFF3
  4837                           intcon	equ	0xFF2
  4838                           intcon3	equ	0xFF0
  4839                           postinc0	equ	0xFEE
  4840                           plusw0	equ	0xFEB
  4841                           fsr0h	equ	0xFEA
  4842                           fsr0l	equ	0xFE9
  4843                           wreg	equ	0xFE8
  4844                           indf1	equ	0xFE7
  4845                           postinc1	equ	0xFE6
  4846                           postdec1	equ	0xFE5
  4847                           plusw1	equ	0xFE3
  4848                           fsr1h	equ	0xFE2
  4849                           fsr1l	equ	0xFE1
  4850                           indf2	equ	0xFDF
  4851                           postinc2	equ	0xFDE
  4852                           postdec2	equ	0xFDD
  4853                           plusw2	equ	0xFDB
  4854                           fsr2h	equ	0xFDA
  4855                           fsr2l	equ	0xFD9
  4856                           status	equ	0xFD8
  4857                           
  4858 ;; *************** function _handleStackBackgroundTasks *****************
  4859 ;; Defined at:
  4860 ;;		line 26 in file "src/stack/backgroundTasks.c"
  4861 ;; Parameters:    Size  Location     Type
  4862 ;;  stack           2  132[BANK1 ] PTR volatile struct stac
  4863 ;;		 -> stack(113), 
  4864 ;; Auto vars:     Size  Location     Type
  4865 ;;		None
  4866 ;; Return value:  Size  Location     Type
  4867 ;;                  1    wreg      void 
  4868 ;; Registers used:
  4869 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4870 ;; Tracked objects:
  4871 ;;		On entry : 0/0
  4872 ;;		On exit  : 0/0
  4873 ;;		Unchanged: 0/0
  4874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4875 ;;      Params:         0       0       2       0       0       0       0       0       0
  4876 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4877 ;;      Temps:          0       0       2       0       0       0       0       0       0
  4878 ;;      Totals:         0       0       4       0       0       0       0       0       0
  4879 ;;Total ram usage:        4 bytes
  4880 ;; Hardware stack levels used:    1
  4881 ;; Hardware stack levels required when called:   13
  4882 ;; This function calls:
  4883 ;;		_UARTTransmitText
  4884 ;;		_ethernetController_clearInterruptFlag
  4885 ;;		_ethernetController_newPacketAvailable
  4886 ;;		_ethernetController_pollInterruptFlags
  4887 ;;		_ethernetController_setLEDConfiguration
  4888 ;;		_ethernetController_setLEDStatus
  4889 ;;		_ethernetController_updateLinkStatus
  4890 ;;		_ethernet_rxGetNewFrame
  4891 ;;		_ipAdressToString
  4892 ;;		_ipv4_sendFrame
  4893 ;; This function is called by:
  4894 ;;		_main
  4895 ;; This function uses a non-reentrant model
  4896 ;;
  4897                           
  4898                           	psect	text8
  4899  002120                     __ptext8:
  4900                           	opt stack 0
  4901  002120                     _handleStackBackgroundTasks:
  4902                           	opt stack 17
  4903                           
  4904                           ;backgroundTasks.c: 27: stack->background.interruptFlags = ethernetController_pollInterr
      +                          uptFlags();
  4905                           
  4906                           ; BSR set to: 0
  4907                           ;incstack = 0
  4908  002120  ECBB  F014         	call	_ethernetController_pollInterruptFlags	;wreg free
  4909  002124  0101               	movlb	1	; () banked
  4910  002126  EE20 F012          	lfsr	2,18
  4911  00212A  5184               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  4912  00212C  26D9               	addwf	fsr2l,f,c
  4913  00212E  5185               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  4914  002130  22DA               	addwfc	fsr2h,f,c
  4915  002132  0100               	movlb	0	; () banked
  4916  002134  C078  FFDE         	movff	?_ethernetController_pollInterruptFlags,postinc2
  4917  002138  C079  FFDD         	movff	?_ethernetController_pollInterruptFlags+1,postdec2
  4918                           
  4919                           ; BSR set to: 0
  4920                           ;backgroundTasks.c: 28: if (stack->background.interruptFlags.PKTIF) {
  4921  00213C  0101               	movlb	1	; () banked
  4922  00213E  EE20 F012          	lfsr	2,18
  4923  002142  5184               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  4924  002144  26D9               	addwf	fsr2l,f,c
  4925  002146  5185               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  4926  002148  22DA               	addwfc	fsr2h,f,c
  4927  00214A  A8DF               	btfss	indf2,4,c
  4928  00214C  D018               	goto	l504
  4929                           
  4930                           ; BSR set to: 1
  4931                           ;backgroundTasks.c: 30: if (ethernetController_newPacketAvailable()) {
  4932  00214E  EC47  F023         	call	_ethernetController_newPacketAvailable	;wreg free
  4933  002152  0900               	iorlw	0
  4934  002154  B4D8               	btfsc	status,2,c
  4935  002156  D013               	goto	l504
  4936                           
  4937                           ;backgroundTasks.c: 31: stack->background.err = ethernet_rxGetNewFrame(&stack->ethernet)
      +                          ;
  4938  002158  C184  F174         	movff	handleStackBackgroundTasks@stack,ethernet_rxGetNewFrame@frame
  4939  00215C  C185  F175         	movff	handleStackBackgroundTasks@stack+1,ethernet_rxGetNewFrame@frame+1
  4940  002160  ECCF  F002         	call	_ethernet_rxGetNewFrame	;wreg free
  4941  002164  0101               	movlb	1	; () banked
  4942  002166  EE20 F00F          	lfsr	2,15
  4943  00216A  5184               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  4944  00216C  26D9               	addwf	fsr2l,f,c
  4945  00216E  5185               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  4946  002170  22DA               	addwfc	fsr2h,f,c
  4947  002172  C174  FFDE         	movff	?_ethernet_rxGetNewFrame,postinc2
  4948  002176  C175  FFDE         	movff	?_ethernet_rxGetNewFrame+1,postinc2
  4949  00217A  C176  FFDE         	movff	?_ethernet_rxGetNewFrame+2,postinc2
  4950  00217E                     l504:
  4951                           
  4952                           ;backgroundTasks.c: 32: }
  4953                           ;backgroundTasks.c: 33: }
  4954                           ;backgroundTasks.c: 35: if (stack->background.fPacketPending) {
  4955                           
  4956                           ; BSR set to: 1
  4957                           
  4958                           ; BSR set to: 1
  4959  00217E  0101               	movlb	1	; () banked
  4960  002180  EE20 F014          	lfsr	2,20
  4961  002184  5184               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  4962  002186  26D9               	addwf	fsr2l,f,c
  4963  002188  5185               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  4964  00218A  22DA               	addwfc	fsr2h,f,c
  4965  00218C  A0DF               	btfss	indf2,0,c
  4966  00218E  D06B               	goto	l507
  4967                           
  4968                           ; BSR set to: 1
  4969                           ;backgroundTasks.c: 37: stack->background.err = ipv4_sendFrame(stack->pendingPacketToSen
      +                          d);
  4970  002190  EE20 F033          	lfsr	2,51
  4971  002194  5184               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  4972  002196  26D9               	addwf	fsr2l,f,c
  4973  002198  5185               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  4974  00219A  22DA               	addwfc	fsr2h,f,c
  4975  00219C  EE01  F034         	lfsr	0,ipv4_sendFrame@ipPacket
  4976  0021A0  0E3D               	movlw	61
  4977  0021A2                     u10621:
  4978  0021A2  CFDB FFEB          	movff	plusw2,plusw0
  4979  0021A6  06E8               	decf	wreg,f,c
  4980  0021A8  E2FC               	bc	u10621
  4981  0021AA  EC9C  F00F         	call	_ipv4_sendFrame	;wreg free
  4982  0021AE  0101               	movlb	1	; () banked
  4983  0021B0  EE20 F00F          	lfsr	2,15
  4984  0021B4  5184               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  4985  0021B6  26D9               	addwf	fsr2l,f,c
  4986  0021B8  5185               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  4987  0021BA  22DA               	addwfc	fsr2h,f,c
  4988  0021BC  C134  FFDE         	movff	?_ipv4_sendFrame,postinc2
  4989  0021C0  C135  FFDE         	movff	?_ipv4_sendFrame+1,postinc2
  4990  0021C4  C136  FFDE         	movff	?_ipv4_sendFrame+2,postinc2
  4991                           
  4992                           ; BSR set to: 1
  4993                           ;backgroundTasks.c: 38: if (stack->background.err.module == ERROR_MODULE_ARP &&
  4994                           ;backgroundTasks.c: 39: stack->background.err.code == ERROR_ARP_MAXIMUM_NUMBER_OF_REQUES
      +                          TS_REACHED) {
  4995  0021C8  EE20 F00F          	lfsr	2,15
  4996  0021CC  5184               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  4997  0021CE  26D9               	addwf	fsr2l,f,c
  4998  0021D0  5185               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  4999  0021D2  22DA               	addwfc	fsr2h,f,c
  5000  0021D4  0E03               	movlw	3
  5001  0021D6  18DE               	xorwf	postinc2,w,c
  5002  0021D8  A4D8               	btfss	status,2,c
  5003  0021DA  D02A               	goto	l506
  5004                           
  5005                           ; BSR set to: 1
  5006  0021DC  EE20 F010          	lfsr	2,16
  5007  0021E0  5184               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5008  0021E2  26D9               	addwf	fsr2l,f,c
  5009  0021E4  5185               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5010  0021E6  22DA               	addwfc	fsr2h,f,c
  5011  0021E8  0E92               	movlw	146
  5012  0021EA  18DE               	xorwf	postinc2,w,c
  5013  0021EC  E121               	bnz	l8530
  5014  0021EE  04DE               	decf	postinc2,w,c
  5015  0021F0  A4D8               	btfss	status,2,c
  5016  0021F2  D01E               	goto	l506
  5017                           
  5018                           ; BSR set to: 1
  5019                           ;backgroundTasks.c: 40: UARTTransmitText(ipAdressToString(stack->pendingPacketToSend.ipv
      +                          4Header.destination));
  5020  0021F4  EE20 F046          	lfsr	2,70
  5021  0021F8  5184               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5022  0021FA  26D9               	addwf	fsr2l,f,c
  5023  0021FC  5185               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5024  0021FE  22DA               	addwfc	fsr2h,f,c
  5025  002200  CFDE F067          	movff	postinc2,ipAdressToString@ip
  5026  002204  CFDE F068          	movff	postinc2,ipAdressToString@ip+1
  5027  002208  CFDE F069          	movff	postinc2,ipAdressToString@ip+2
  5028  00220C  CFDE F06A          	movff	postinc2,ipAdressToString@ip+3
  5029  002210  ECA5  F00E         	call	_ipAdressToString	;wreg free
  5030  002214  C067  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  5031  002218  C068  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  5032  00221C  EC18  F01F         	call	_UARTTransmitText	;wreg free
  5033                           
  5034                           ;backgroundTasks.c: 41: stack->background.fPacketPending = 0;
  5035  002220  0101               	movlb	1	; () banked
  5036  002222  EE20 F014          	lfsr	2,20
  5037  002226  5184               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5038  002228  26D9               	addwf	fsr2l,f,c
  5039  00222A  5185               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5040  00222C  22DA               	addwfc	fsr2h,f,c
  5041  00222E  90DF               	bcf	indf2,0,c
  5042  002230                     l506:
  5043  002230                     l8530:
  5044                           
  5045                           ; BSR set to: 1
  5046                           ;backgroundTasks.c: 42: }
  5047                           ;backgroundTasks.c: 43: if (stack->background.err.module == ERROR_MODULE_ARP &&
  5048                           ;backgroundTasks.c: 44: stack->background.err.code == (uint16_t)0) {
  5049  002230  EE20 F00F          	lfsr	2,15
  5050  002234  5184               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5051  002236  26D9               	addwf	fsr2l,f,c
  5052  002238  5185               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5053  00223A  22DA               	addwfc	fsr2h,f,c
  5054  00223C  0E03               	movlw	3
  5055  00223E  18DE               	xorwf	postinc2,w,c
  5056  002240  A4D8               	btfss	status,2,c
  5057  002242  D011               	goto	l507
  5058                           
  5059                           ; BSR set to: 1
  5060  002244  EE20 F010          	lfsr	2,16
  5061  002248  5184               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5062  00224A  26D9               	addwf	fsr2l,f,c
  5063  00224C  5185               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5064  00224E  22DA               	addwfc	fsr2h,f,c
  5065  002250  50DE               	movf	postinc2,w,c
  5066  002252  10DE               	iorwf	postinc2,w,c
  5067  002254  A4D8               	btfss	status,2,c
  5068  002256  D007               	goto	l507
  5069                           
  5070                           ; BSR set to: 1
  5071                           ;backgroundTasks.c: 46: stack->background.fPacketPending = 0;
  5072  002258  EE20 F014          	lfsr	2,20
  5073  00225C  5184               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5074  00225E  26D9               	addwf	fsr2l,f,c
  5075  002260  5185               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5076  002262  22DA               	addwfc	fsr2h,f,c
  5077  002264  90DF               	bcf	indf2,0,c
  5078  002266                     l507:
  5079                           
  5080                           ; BSR set to: 1
  5081                           ;backgroundTasks.c: 47: }
  5082                           ;backgroundTasks.c: 48: }
  5083                           ;backgroundTasks.c: 49: if (stack->background.interruptFlags.LINKIF) {
  5084                           
  5085                           ; BSR set to: 1
  5086  002266  EE20 F012          	lfsr	2,18
  5087  00226A  5184               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5088  00226C  26D9               	addwf	fsr2l,f,c
  5089  00226E  5185               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5090  002270  22DA               	addwfc	fsr2h,f,c
  5091  002272  A6DF               	btfss	indf2,3,c
  5092  002274  0012               	return	
  5093                           
  5094                           ; BSR set to: 1
  5095                           ;backgroundTasks.c: 50: ethernetController_updateLinkStatus(&(stack->ethernet));
  5096  002276  C184  F080         	movff	handleStackBackgroundTasks@stack,ethernetController_updateLinkStatus@state
  5097  00227A  C185  F081         	movff	handleStackBackgroundTasks@stack+1,ethernetController_updateLinkStatus@state+1
  5098  00227E  EC40  F01B         	call	_ethernetController_updateLinkStatus	;wreg free
  5099                           
  5100                           ;backgroundTasks.c: 52: if (stack->ethernet.link == LINK_ESTABLISHED) {
  5101  002282  C184  FFD9         	movff	handleStackBackgroundTasks@stack,fsr2l
  5102  002286  C185  FFDA         	movff	handleStackBackgroundTasks@stack+1,fsr2h
  5103  00228A  04DE               	decf	postinc2,w,c
  5104  00228C  A4D8               	btfss	status,2,c
  5105  00228E  D00D               	goto	l509
  5106                           
  5107                           ;backgroundTasks.c: 53: ethernetController_setLEDStatus(LEDA, LED_ON);
  5108  002290  0E00               	movlw	0
  5109  002292  0100               	movlb	0	; () banked
  5110  002294  6F6E               	movwf	ethernetController_setLEDStatus@status& (0+255),b
  5111  002296  0E00               	movlw	0
  5112  002298  ECE7  F01E         	call	_ethernetController_setLEDStatus
  5113                           
  5114                           ;backgroundTasks.c: 54: ethernetController_setLEDConfiguration(LEDB, LED_TRANSMIT_RECEIV
      +                          E_EVENTS);
  5115  00229C  0E02               	movlw	2
  5116  00229E  0100               	movlb	0	; () banked
  5117  0022A0  6F6E               	movwf	ethernetController_setLEDConfiguration@conf& (0+255),b
  5118  0022A2  0E01               	movlw	1
  5119  0022A4  ECF9  F01A         	call	_ethernetController_setLEDConfiguration
  5120                           
  5121                           ;backgroundTasks.c: 55: } else {
  5122  0022A8  D00C               	goto	l510
  5123  0022AA                     l509:
  5124                           
  5125                           ;backgroundTasks.c: 56: ethernetController_setLEDStatus(LEDA, LED_OFF);
  5126  0022AA  0E01               	movlw	1
  5127  0022AC  0100               	movlb	0	; () banked
  5128  0022AE  6F6E               	movwf	ethernetController_setLEDStatus@status& (0+255),b
  5129  0022B0  0E00               	movlw	0
  5130  0022B2  ECE7  F01E         	call	_ethernetController_setLEDStatus
  5131                           
  5132                           ;backgroundTasks.c: 57: ethernetController_setLEDStatus(LEDB, LED_OFF);
  5133  0022B6  0E01               	movlw	1
  5134  0022B8  0100               	movlb	0	; () banked
  5135  0022BA  6F6E               	movwf	ethernetController_setLEDStatus@status& (0+255),b
  5136  0022BC  0E01               	movlw	1
  5137  0022BE  ECE7  F01E         	call	_ethernetController_setLEDStatus
  5138  0022C2                     l510:
  5139                           
  5140                           ;backgroundTasks.c: 58: }
  5141                           ;backgroundTasks.c: 59: ethernetController_clearInterruptFlag(LINKIF);
  5142  0022C2  0E0B               	movlw	11
  5143  0022C4  EC5F  F023         	call	_ethernetController_clearInterruptFlag
  5144  0022C8  0012               	return	
  5145  0022CA                     __end_of_handleStackBackgroundTasks:
  5146                           	opt stack 0
  5147                           tblptru	equ	0xFF8
  5148                           tblptrh	equ	0xFF7
  5149                           tblptrl	equ	0xFF6
  5150                           tablat	equ	0xFF5
  5151                           prodh	equ	0xFF4
  5152                           prodl	equ	0xFF3
  5153                           intcon	equ	0xFF2
  5154                           intcon3	equ	0xFF0
  5155                           postinc0	equ	0xFEE
  5156                           plusw0	equ	0xFEB
  5157                           fsr0h	equ	0xFEA
  5158                           fsr0l	equ	0xFE9
  5159                           wreg	equ	0xFE8
  5160                           indf1	equ	0xFE7
  5161                           postinc1	equ	0xFE6
  5162                           postdec1	equ	0xFE5
  5163                           plusw1	equ	0xFE3
  5164                           fsr1h	equ	0xFE2
  5165                           fsr1l	equ	0xFE1
  5166                           indf2	equ	0xFDF
  5167                           postinc2	equ	0xFDE
  5168                           postdec2	equ	0xFDD
  5169                           plusw2	equ	0xFDB
  5170                           fsr2h	equ	0xFDA
  5171                           fsr2l	equ	0xFD9
  5172                           status	equ	0xFD8
  5173                           
  5174 ;; *************** function _ipv4_sendFrame *****************
  5175 ;; Defined at:
  5176 ;;		line 42 in file "src/stack/protocols/ipv4.c"
  5177 ;; Parameters:    Size  Location     Type
  5178 ;;  ipPacket       62   52[BANK1 ] struct ipv4_packet
  5179 ;; Auto vars:     Size  Location     Type
  5180 ;;  err             3  129[BANK1 ] struct error
  5181 ;;  index           1  128[BANK1 ] unsigned char 
  5182 ;;  requestTimeo    1  127[BANK1 ] const unsigned char 
  5183 ;;  numberOfRequ    1  126[BANK1 ] const unsigned char 
  5184 ;; Return value:  Size  Location     Type
  5185 ;;                  3   52[BANK1 ] struct error
  5186 ;; Registers used:
  5187 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5188 ;; Tracked objects:
  5189 ;;		On entry : 0/0
  5190 ;;		On exit  : 0/0
  5191 ;;		Unchanged: 0/0
  5192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5193 ;;      Params:         0       0      62       0       0       0       0       0       0
  5194 ;;      Locals:         0       0       6       0       0       0       0       0       0
  5195 ;;      Temps:          0       0      12       0       0       0       0       0       0
  5196 ;;      Totals:         0       0      80       0       0       0       0       0       0
  5197 ;;Total ram usage:       80 bytes
  5198 ;; Hardware stack levels used:    1
  5199 ;; Hardware stack levels required when called:   11
  5200 ;; This function calls:
  5201 ;;		_ARP_checkForEntry
  5202 ;;		_ARP_getEntryFromTable
  5203 ;;		_ARP_sendRequest
  5204 ;;		_UARTTransmitText
  5205 ;;		_ethernetController_getMacAddress
  5206 ;;		_ethernetController_sendPacket
  5207 ;;		_ethernetController_writeDestinationMACAddress
  5208 ;;		_getSeconds
  5209 ;;		_ipAdressToString
  5210 ;;		_macToString
  5211 ;; This function is called by:
  5212 ;;		_handleStackBackgroundTasks
  5213 ;; This function uses a non-reentrant model
  5214 ;;
  5215                           
  5216                           	psect	text9
  5217  001F38                     __ptext9:
  5218                           	opt stack 0
  5219  001F38                     _ipv4_sendFrame:
  5220                           	opt stack 18
  5221                           
  5222                           ;ipv4.c: 43: error_t err;
  5223                           ;ipv4.c: 44: err.module = ERROR_MODULE_ARP;
  5224                           
  5225                           ;incstack = 0
  5226  001F38  0E03               	movlw	3
  5227  001F3A  0101               	movlb	1	; () banked
  5228  001F3C  6F81               	movwf	ipv4_sendFrame@err& (0+255),b
  5229                           
  5230                           ;ipv4.c: 45: uint8_t index;
  5231                           ;ipv4.c: 46: uint8_t static requestCounter = 0;
  5232                           ;ipv4.c: 47: uint8_t const numberOfRequests = 3;
  5233  001F3E  0E03               	movlw	3
  5234  001F40  6F7E               	movwf	ipv4_sendFrame@numberOfRequests& (0+255),b
  5235                           
  5236                           ;ipv4.c: 48: uint8_t const requestTimeout = 2;
  5237  001F42  0E02               	movlw	2
  5238  001F44  6F7F               	movwf	ipv4_sendFrame@requestTimeout& (0+255),b
  5239                           
  5240                           ; BSR set to: 1
  5241                           ;ipv4.c: 49: uint32_t static oldTime = 0;
  5242                           ;ipv4.c: 52: if (ARP_checkForEntry(ipPacket.ipv4Header.destination, &index)) {
  5243  001F46  C147  F067         	movff	ipv4_sendFrame@ipPacket+19,ARP_checkForEntry@ip
  5244  001F4A  C148  F068         	movff	ipv4_sendFrame@ipPacket+20,ARP_checkForEntry@ip+1
  5245  001F4E  C149  F069         	movff	ipv4_sendFrame@ipPacket+21,ARP_checkForEntry@ip+2
  5246  001F52  C14A  F06A         	movff	ipv4_sendFrame@ipPacket+22,ARP_checkForEntry@ip+3
  5247  001F56  0E80               	movlw	low ipv4_sendFrame@index
  5248  001F58  0100               	movlb	0	; () banked
  5249  001F5A  6F6B               	movwf	ARP_checkForEntry@index& (0+255),b
  5250  001F5C  0E01               	movlw	high ipv4_sendFrame@index
  5251  001F5E  6F6C               	movwf	(ARP_checkForEntry@index+1)& (0+255),b
  5252  001F60  ECBC  F018         	call	_ARP_checkForEntry	;wreg free
  5253  001F64  0900               	iorlw	0
  5254  001F66  B4D8               	btfsc	status,2,c
  5255  001F68  D06E               	goto	l982
  5256                           
  5257                           ;ipv4.c: 54: ipPacket.ethernet.destination = ARP_getEntryFromTable(index);
  5258  001F6A  0101               	movlb	1	; () banked
  5259  001F6C  5180               	movf	ipv4_sendFrame@index& (0+255),w,b
  5260  001F6E  ECB2  F021         	call	_ARP_getEntryFromTable
  5261  001F72  EE21  F05C         	lfsr	2,ipv4_sendFrame@ipPacket+40
  5262  001F76  0E05               	movlw	5
  5263  001F78                     u10481:
  5264  001F78  CFEB FFDB          	movff	plusw0,plusw2
  5265  001F7C  06E8               	decf	wreg,f,c
  5266  001F7E  E2FC               	bc	u10481
  5267                           
  5268                           ;ipv4.c: 55: UARTTransmitText(ipAdressToString(ipPacket.ipv4Header.destination));
  5269  001F80  C147  F067         	movff	ipv4_sendFrame@ipPacket+19,ipAdressToString@ip
  5270  001F84  C148  F068         	movff	ipv4_sendFrame@ipPacket+20,ipAdressToString@ip+1
  5271  001F88  C149  F069         	movff	ipv4_sendFrame@ipPacket+21,ipAdressToString@ip+2
  5272  001F8C  C14A  F06A         	movff	ipv4_sendFrame@ipPacket+22,ipAdressToString@ip+3
  5273  001F90  ECA5  F00E         	call	_ipAdressToString	;wreg free
  5274  001F94  C067  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  5275  001F98  C068  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  5276  001F9C  EC18  F01F         	call	_UARTTransmitText	;wreg free
  5277                           
  5278                           ;ipv4.c: 56: UARTTransmitText(" is at ");
  5279  001FA0  0EBD               	movlw	low STR_67
  5280  001FA2  0100               	movlb	0	; () banked
  5281  001FA4  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5282  001FA6  0E7F               	movlw	high STR_67
  5283  001FA8  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5284  001FAA  EC18  F01F         	call	_UARTTransmitText	;wreg free
  5285                           
  5286                           ;ipv4.c: 57: UARTTransmitText(macToString(ipPacket.ethernet.destination));
  5287  001FAE  EE21  F05C         	lfsr	2,ipv4_sendFrame@ipPacket+40
  5288  001FB2  EE00  F07A         	lfsr	0,macToString@addr
  5289  001FB6  0E05               	movlw	5
  5290  001FB8                     u10491:
  5291  001FB8  CFDB FFEB          	movff	plusw2,plusw0
  5292  001FBC  06E8               	decf	wreg,f,c
  5293  001FBE  E2FC               	bc	u10491
  5294  001FC0  EC6A  F016         	call	_macToString	;wreg free
  5295  001FC4  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  5296  001FC8  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  5297  001FCC  EC18  F01F         	call	_UARTTransmitText	;wreg free
  5298                           
  5299                           ;ipv4.c: 58: UARTTransmitText(".\n\r");
  5300  001FD0  0EE5               	movlw	low (STR_51+1)
  5301  001FD2  0100               	movlb	0	; () banked
  5302  001FD4  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5303  001FD6  0E7F               	movlw	high (STR_51+1)
  5304  001FD8  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5305  001FDA  EC18  F01F         	call	_UARTTransmitText	;wreg free
  5306                           
  5307                           ;ipv4.c: 60: ipPacket.ethernet.source = ethernetController_getMacAddress();
  5308  001FDE  EC02  F01D         	call	_ethernetController_getMacAddress	;wreg free
  5309  001FE2  EE21  F056         	lfsr	2,ipv4_sendFrame@ipPacket+34
  5310  001FE6  0E05               	movlw	5
  5311  001FE8                     u10501:
  5312  001FE8  CFEB FFDB          	movff	plusw0,plusw2
  5313  001FEC  06E8               	decf	wreg,f,c
  5314  001FEE  E2FC               	bc	u10501
  5315                           
  5316                           ;ipv4.c: 62: ethernetController_writeDestinationMACAddress(ipPacket.ethernet.destination
      +                          , ipPacket.ethernet.memory);
  5317  001FF0  EE21  F05C         	lfsr	2,ipv4_sendFrame@ipPacket+40
  5318  001FF4  EE00  F06F         	lfsr	0,ethernetController_writeDestinationMACAddress@addr
  5319  001FF8  0E05               	movlw	5
  5320  001FFA                     u10511:
  5321  001FFA  CFDB FFEB          	movff	plusw2,plusw0
  5322  001FFE  06E8               	decf	wreg,f,c
  5323  002000  E2FC               	bc	u10511
  5324  002002  EE21  F064         	lfsr	2,ipv4_sendFrame@ipPacket+48
  5325  002006  EE00  F075         	lfsr	0,ethernetController_writeDestinationMACAddress@field
  5326  00200A  0E08               	movlw	8
  5327  00200C                     u10521:
  5328  00200C  CFDB FFEB          	movff	plusw2,plusw0
  5329  002010  06E8               	decf	wreg,f,c
  5330  002012  E2FC               	bc	u10521
  5331  002014  EC0C  F01C         	call	_ethernetController_writeDestinationMACAddress	;wreg free
  5332                           
  5333                           ;ipv4.c: 63: ethernetController_sendPacket(ipPacket.ethernet.memory);
  5334  002018  EE21  F064         	lfsr	2,ipv4_sendFrame@ipPacket+48
  5335  00201C  EE00  F072         	lfsr	0,ethernetController_sendPacket@field
  5336  002020  0E08               	movlw	8
  5337  002022                     u10531:
  5338  002022  CFDB FFEB          	movff	plusw2,plusw0
  5339  002026  06E8               	decf	wreg,f,c
  5340  002028  E2FC               	bc	u10531
  5341  00202A  EC31  F022         	call	_ethernetController_sendPacket	;wreg free
  5342                           
  5343                           ;ipv4.c: 64: err.code = (uint16_t)0;
  5344  00202E  0E00               	movlw	0
  5345  002030  0101               	movlb	1	; () banked
  5346  002032  6F83               	movwf	(ipv4_sendFrame@err+2)& (0+255),b
  5347  002034  0E00               	movlw	0
  5348  002036  6F82               	movwf	(ipv4_sendFrame@err+1)& (0+255),b
  5349                           
  5350                           ; BSR set to: 1
  5351                           ;ipv4.c: 65: return err;
  5352  002038  C181  F134         	movff	ipv4_sendFrame@err,?_ipv4_sendFrame
  5353  00203C  C182  F135         	movff	ipv4_sendFrame@err+1,?_ipv4_sendFrame+1
  5354  002040  C183  F136         	movff	ipv4_sendFrame@err+2,?_ipv4_sendFrame+2
  5355                           
  5356                           ; BSR set to: 1
  5357  002044  0012               	return	
  5358  002046                     l982:
  5359                           
  5360                           ;ipv4.c: 68: if (getSeconds() - oldTime >= requestTimeout) {
  5361                           
  5362                           ; BSR set to: 1
  5363  002046  C17F  F172         	movff	ipv4_sendFrame@requestTimeout,??_ipv4_sendFrame
  5364  00204A  0101               	movlb	1	; () banked
  5365  00204C  6B73               	clrf	(??_ipv4_sendFrame+1)& (0+255),b
  5366  00204E  6B74               	clrf	(??_ipv4_sendFrame+2)& (0+255),b
  5367  002050  6B75               	clrf	(??_ipv4_sendFrame+3)& (0+255),b
  5368  002052  C19A  F176         	movff	ipv4_sendFrame@oldTime,??_ipv4_sendFrame+4
  5369  002056  C19B  F177         	movff	ipv4_sendFrame@oldTime+1,??_ipv4_sendFrame+5
  5370  00205A  C19C  F178         	movff	ipv4_sendFrame@oldTime+2,??_ipv4_sendFrame+6
  5371  00205E  C19D  F179         	movff	ipv4_sendFrame@oldTime+3,??_ipv4_sendFrame+7
  5372  002062  1F76               	comf	(??_ipv4_sendFrame+4)& (0+255),f,b
  5373  002064  1F77               	comf	(??_ipv4_sendFrame+5)& (0+255),f,b
  5374  002066  1F78               	comf	(??_ipv4_sendFrame+6)& (0+255),f,b
  5375  002068  1F79               	comf	(??_ipv4_sendFrame+7)& (0+255),f,b
  5376  00206A  2B76               	incf	(??_ipv4_sendFrame+4)& (0+255),f,b
  5377  00206C  0E00               	movlw	0
  5378  00206E  2377               	addwfc	(??_ipv4_sendFrame+5)& (0+255),f,b
  5379  002070  2378               	addwfc	(??_ipv4_sendFrame+6)& (0+255),f,b
  5380  002072  2379               	addwfc	(??_ipv4_sendFrame+7)& (0+255),f,b
  5381  002074  EC3E  F023         	call	_getSeconds	;wreg free
  5382  002078  0101               	movlb	1	; () banked
  5383  00207A  5176               	movf	(??_ipv4_sendFrame+4)& (0+255),w,b
  5384  00207C  0100               	movlb	0	; () banked
  5385  00207E  2560               	addwf	?_getSeconds& (0+255),w,b
  5386  002080  0101               	movlb	1	; () banked
  5387  002082  6F7A               	movwf	(??_ipv4_sendFrame+8)& (0+255),b
  5388  002084  5177               	movf	(??_ipv4_sendFrame+5)& (0+255),w,b
  5389  002086  0100               	movlb	0	; () banked
  5390  002088  2161               	addwfc	(?_getSeconds+1)& (0+255),w,b
  5391  00208A  0101               	movlb	1	; () banked
  5392  00208C  6F7B               	movwf	(??_ipv4_sendFrame+9)& (0+255),b
  5393  00208E  5178               	movf	(??_ipv4_sendFrame+6)& (0+255),w,b
  5394  002090  0100               	movlb	0	; () banked
  5395  002092  2162               	addwfc	(?_getSeconds+2)& (0+255),w,b
  5396  002094  0101               	movlb	1	; () banked
  5397  002096  6F7C               	movwf	(??_ipv4_sendFrame+10)& (0+255),b
  5398  002098  5179               	movf	(??_ipv4_sendFrame+7)& (0+255),w,b
  5399  00209A  0100               	movlb	0	; () banked
  5400  00209C  2163               	addwfc	(?_getSeconds+3)& (0+255),w,b
  5401  00209E  0101               	movlb	1	; () banked
  5402  0020A0  6F7D               	movwf	(??_ipv4_sendFrame+11)& (0+255),b
  5403  0020A2  5172               	movf	??_ipv4_sendFrame& (0+255),w,b
  5404  0020A4  5D7A               	subwf	(??_ipv4_sendFrame+8)& (0+255),w,b
  5405  0020A6  5173               	movf	(??_ipv4_sendFrame+1)& (0+255),w,b
  5406  0020A8  597B               	subwfb	(??_ipv4_sendFrame+9)& (0+255),w,b
  5407  0020AA  5174               	movf	(??_ipv4_sendFrame+2)& (0+255),w,b
  5408  0020AC  597C               	subwfb	(??_ipv4_sendFrame+10)& (0+255),w,b
  5409  0020AE  5175               	movf	(??_ipv4_sendFrame+3)& (0+255),w,b
  5410  0020B0  597D               	subwfb	(??_ipv4_sendFrame+11)& (0+255),w,b
  5411  0020B2  A0D8               	btfss	status,0,c
  5412  0020B4  D029               	goto	l987
  5413                           
  5414                           ; BSR set to: 1
  5415                           ;ipv4.c: 69: oldTime = getSeconds();
  5416  0020B6  EC3E  F023         	call	_getSeconds	;wreg free
  5417  0020BA  C060  F19A         	movff	?_getSeconds,ipv4_sendFrame@oldTime
  5418  0020BE  C061  F19B         	movff	?_getSeconds+1,ipv4_sendFrame@oldTime+1
  5419  0020C2  C062  F19C         	movff	?_getSeconds+2,ipv4_sendFrame@oldTime+2
  5420  0020C6  C063  F19D         	movff	?_getSeconds+3,ipv4_sendFrame@oldTime+3
  5421                           
  5422                           ;ipv4.c: 70: if (requestCounter < numberOfRequests) {
  5423  0020CA  0101               	movlb	1	; () banked
  5424  0020CC  517E               	movf	ipv4_sendFrame@numberOfRequests& (0+255),w,b
  5425  0020CE  5DA2               	subwf	ipv4_sendFrame@requestCounter& (0+255),w,b
  5426  0020D0  B0D8               	btfsc	status,0,c
  5427  0020D2  D00C               	goto	l986
  5428                           
  5429                           ; BSR set to: 1
  5430                           ;ipv4.c: 71: requestCounter++;
  5431  0020D4  2BA2               	incf	ipv4_sendFrame@requestCounter& (0+255),f,b
  5432                           
  5433                           ; BSR set to: 1
  5434                           ;ipv4.c: 72: ARP_sendRequest(ipPacket.ipv4Header.destination);
  5435  0020D6  C147  F0F8         	movff	ipv4_sendFrame@ipPacket+19,ARP_sendRequest@ip
  5436  0020DA  C148  F0F9         	movff	ipv4_sendFrame@ipPacket+20,ARP_sendRequest@ip+1
  5437  0020DE  C149  F0FA         	movff	ipv4_sendFrame@ipPacket+21,ARP_sendRequest@ip+2
  5438  0020E2  C14A  F0FB         	movff	ipv4_sendFrame@ipPacket+22,ARP_sendRequest@ip+3
  5439  0020E6  EC6E  F019         	call	_ARP_sendRequest	;wreg free
  5440                           
  5441                           ;ipv4.c: 73: } else {
  5442  0020EA  D00E               	goto	l987
  5443  0020EC                     l986:
  5444                           
  5445                           ;ipv4.c: 75: requestCounter = 0;
  5446  0020EC  0E00               	movlw	0
  5447  0020EE  0101               	movlb	1	; () banked
  5448  0020F0  6FA2               	movwf	ipv4_sendFrame@requestCounter& (0+255),b
  5449                           
  5450                           ;ipv4.c: 76: err.code = ERROR_ARP_MAXIMUM_NUMBER_OF_REQUESTS_REACHED;
  5451  0020F2  0E01               	movlw	1
  5452  0020F4  6F83               	movwf	(ipv4_sendFrame@err+2)& (0+255),b
  5453  0020F6  0E92               	movlw	146
  5454  0020F8  6F82               	movwf	(ipv4_sendFrame@err+1)& (0+255),b
  5455                           
  5456                           ; BSR set to: 1
  5457                           ;ipv4.c: 77: return err;
  5458  0020FA  C181  F134         	movff	ipv4_sendFrame@err,?_ipv4_sendFrame
  5459  0020FE  C182  F135         	movff	ipv4_sendFrame@err+1,?_ipv4_sendFrame+1
  5460  002102  C183  F136         	movff	ipv4_sendFrame@err+2,?_ipv4_sendFrame+2
  5461                           
  5462                           ; BSR set to: 1
  5463  002106  0012               	return	
  5464  002108                     l987:
  5465                           
  5466                           ;ipv4.c: 78: }
  5467                           ;ipv4.c: 79: }
  5468                           ;ipv4.c: 80: }
  5469                           ;ipv4.c: 81: err.code = ERROR_ARP_WAITING_FOR_REPLY;
  5470                           
  5471                           ; BSR set to: 1
  5472                           
  5473                           ; BSR set to: 1
  5474                           
  5475                           ; BSR set to: 1
  5476  002108  0E01               	movlw	1
  5477  00210A  0101               	movlb	1	; () banked
  5478  00210C  6F83               	movwf	(ipv4_sendFrame@err+2)& (0+255),b
  5479  00210E  0E91               	movlw	145
  5480  002110  6F82               	movwf	(ipv4_sendFrame@err+1)& (0+255),b
  5481                           
  5482                           ; BSR set to: 1
  5483                           ;ipv4.c: 82: return err;
  5484  002112  C181  F134         	movff	ipv4_sendFrame@err,?_ipv4_sendFrame
  5485  002116  C182  F135         	movff	ipv4_sendFrame@err+1,?_ipv4_sendFrame+1
  5486  00211A  C183  F136         	movff	ipv4_sendFrame@err+2,?_ipv4_sendFrame+2
  5487  00211E  0012               	return	
  5488  002120                     __end_of_ipv4_sendFrame:
  5489                           	opt stack 0
  5490                           tblptru	equ	0xFF8
  5491                           tblptrh	equ	0xFF7
  5492                           tblptrl	equ	0xFF6
  5493                           tablat	equ	0xFF5
  5494                           prodh	equ	0xFF4
  5495                           prodl	equ	0xFF3
  5496                           intcon	equ	0xFF2
  5497                           intcon3	equ	0xFF0
  5498                           postinc0	equ	0xFEE
  5499                           plusw0	equ	0xFEB
  5500                           fsr0h	equ	0xFEA
  5501                           fsr0l	equ	0xFE9
  5502                           wreg	equ	0xFE8
  5503                           indf1	equ	0xFE7
  5504                           postinc1	equ	0xFE6
  5505                           postdec1	equ	0xFE5
  5506                           plusw1	equ	0xFE3
  5507                           fsr1h	equ	0xFE2
  5508                           fsr1l	equ	0xFE1
  5509                           indf2	equ	0xFDF
  5510                           postinc2	equ	0xFDE
  5511                           postdec2	equ	0xFDD
  5512                           plusw2	equ	0xFDB
  5513                           fsr2h	equ	0xFDA
  5514                           fsr2l	equ	0xFD9
  5515                           status	equ	0xFD8
  5516                           
  5517 ;; *************** function _ARP_sendRequest *****************
  5518 ;; Defined at:
  5519 ;;		line 208 in file "src/stack/protocols/arp.c"
  5520 ;; Parameters:    Size  Location     Type
  5521 ;;  ip              4  152[BANK0 ] struct ipv4_address
  5522 ;; Auto vars:     Size  Location     Type
  5523 ;;  request        32   20[BANK1 ] struct ARP_message
  5524 ;;  targetMAC       6   14[BANK1 ] struct macaddress
  5525 ;;  senderMAC       6    4[BANK1 ] struct macaddress
  5526 ;;  targetIP        4   10[BANK1 ] struct ipv4_address
  5527 ;;  senderIP        4    0[BANK1 ] struct ipv4_address
  5528 ;; Return value:  Size  Location     Type
  5529 ;;                  1    wreg      void 
  5530 ;; Registers used:
  5531 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5532 ;; Tracked objects:
  5533 ;;		On entry : 0/0
  5534 ;;		On exit  : 0/0
  5535 ;;		Unchanged: 0/0
  5536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5537 ;;      Params:         0       4       0       0       0       0       0       0       0
  5538 ;;      Locals:         0       0      52       0       0       0       0       0       0
  5539 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5540 ;;      Totals:         0       4      52       0       0       0       0       0       0
  5541 ;;Total ram usage:       56 bytes
  5542 ;; Hardware stack levels used:    1
  5543 ;; Hardware stack levels required when called:   10
  5544 ;; This function calls:
  5545 ;;		_ARP_send
  5546 ;;		_ethernetController_getMacAddress
  5547 ;;		_mac_setToBroadcast
  5548 ;; This function is called by:
  5549 ;;		_ipv4_sendFrame
  5550 ;; This function uses a non-reentrant model
  5551 ;;
  5552                           
  5553                           	psect	text10
  5554  0032DC                     __ptext10:
  5555                           	opt stack 0
  5556  0032DC                     _ARP_sendRequest:
  5557                           	opt stack 18
  5558                           
  5559                           ;arp.c: 209: ARP_message_t request;
  5560                           ;arp.c: 210: ipv4_address_t senderIP;
  5561                           ;arp.c: 211: ipv4_address_t targetIP;
  5562                           ;arp.c: 212: macaddress_t senderMAC;
  5563                           ;arp.c: 213: macaddress_t targetMAC;
  5564                           ;arp.c: 215: senderMAC = ethernetController_getMacAddress();
  5565                           
  5566                           ; BSR set to: 1
  5567                           ;incstack = 0
  5568  0032DC  EC02  F01D         	call	_ethernetController_getMacAddress	;wreg free
  5569  0032E0  EE21  F004         	lfsr	2,ARP_sendRequest@senderMAC
  5570  0032E4  0E05               	movlw	5
  5571  0032E6                     u9891:
  5572  0032E6  CFEB FFDB          	movff	plusw0,plusw2
  5573  0032EA  06E8               	decf	wreg,f,c
  5574  0032EC  E2FC               	bc	u9891
  5575                           
  5576                           ;arp.c: 216: mac_setToBroadcast(&targetMAC);
  5577  0032EE  0E0E               	movlw	low ARP_sendRequest@targetMAC
  5578  0032F0  0100               	movlb	0	; () banked
  5579  0032F2  6F60               	movwf	mac_setToBroadcast@mac& (0+255),b
  5580  0032F4  0E01               	movlw	high ARP_sendRequest@targetMAC
  5581  0032F6  6F61               	movwf	(mac_setToBroadcast@mac+1)& (0+255),b
  5582  0032F8  EC59  F022         	call	_mac_setToBroadcast	;wreg free
  5583                           
  5584                           ;arp.c: 218: targetIP = ip;
  5585  0032FC  C0F8  F10A         	movff	ARP_sendRequest@ip,ARP_sendRequest@targetIP
  5586  003300  C0F9  F10B         	movff	ARP_sendRequest@ip+1,ARP_sendRequest@targetIP+1
  5587  003304  C0FA  F10C         	movff	ARP_sendRequest@ip+2,ARP_sendRequest@targetIP+2
  5588  003308  C0FB  F10D         	movff	ARP_sendRequest@ip+3,ARP_sendRequest@targetIP+3
  5589                           
  5590                           ;arp.c: 220: request.hlen = 6;
  5591  00330C  0E06               	movlw	6
  5592  00330E  0101               	movlb	1	; () banked
  5593  003310  6F18               	movwf	(ARP_sendRequest@request+4)& (0+255),b
  5594                           
  5595                           ; BSR set to: 1
  5596                           ;arp.c: 221: request.plen = 4;
  5597  003312  0E04               	movlw	4
  5598  003314  6F19               	movwf	(ARP_sendRequest@request+5)& (0+255),b
  5599                           
  5600                           ; BSR set to: 1
  5601                           ;arp.c: 222: request.htype = ARP_HTYPE_ETHERNET;
  5602  003316  0E00               	movlw	0
  5603  003318  6F15               	movwf	(ARP_sendRequest@request+1)& (0+255),b
  5604  00331A  0E01               	movlw	1
  5605  00331C  6F14               	movwf	ARP_sendRequest@request& (0+255),b
  5606                           
  5607                           ; BSR set to: 1
  5608                           ;arp.c: 223: request.ptype = ARP_PTYPE_IPv4;
  5609  00331E  0E08               	movlw	8
  5610  003320  6F17               	movwf	(ARP_sendRequest@request+3)& (0+255),b
  5611  003322  0E00               	movlw	0
  5612  003324  6F16               	movwf	(ARP_sendRequest@request+2)& (0+255),b
  5613                           
  5614                           ; BSR set to: 1
  5615                           ;arp.c: 224: request.operation = ARP_REQUEST;
  5616  003326  0E00               	movlw	0
  5617  003328  6F1B               	movwf	(ARP_sendRequest@request+7)& (0+255),b
  5618  00332A  0E01               	movlw	1
  5619  00332C  6F1A               	movwf	(ARP_sendRequest@request+6)& (0+255),b
  5620                           
  5621                           ; BSR set to: 1
  5622                           ;arp.c: 225: request.senderIPAddress = senderIP;
  5623  00332E  C100  F122         	movff	ARP_sendRequest@senderIP,ARP_sendRequest@request+14
  5624  003332  C101  F123         	movff	ARP_sendRequest@senderIP+1,ARP_sendRequest@request+15
  5625  003336  C102  F124         	movff	ARP_sendRequest@senderIP+2,ARP_sendRequest@request+16
  5626  00333A  C103  F125         	movff	ARP_sendRequest@senderIP+3,ARP_sendRequest@request+17
  5627                           
  5628                           ; BSR set to: 1
  5629                           ;arp.c: 226: request.senderMACAddress = senderMAC;
  5630  00333E  EE21  F004         	lfsr	2,ARP_sendRequest@senderMAC
  5631  003342  EE11  F01C         	lfsr	1,ARP_sendRequest@request+8
  5632  003346  0E05               	movlw	5
  5633  003348                     u9901:
  5634  003348  CFDB FFE3          	movff	plusw2,plusw1
  5635  00334C  06E8               	decf	wreg,f,c
  5636  00334E  E2FC               	bc	u9901
  5637                           
  5638                           ; BSR set to: 1
  5639                           ;arp.c: 227: request.targetIPAddress = targetIP;
  5640  003350  C10A  F12C         	movff	ARP_sendRequest@targetIP,ARP_sendRequest@request+24
  5641  003354  C10B  F12D         	movff	ARP_sendRequest@targetIP+1,ARP_sendRequest@request+25
  5642  003358  C10C  F12E         	movff	ARP_sendRequest@targetIP+2,ARP_sendRequest@request+26
  5643  00335C  C10D  F12F         	movff	ARP_sendRequest@targetIP+3,ARP_sendRequest@request+27
  5644                           
  5645                           ; BSR set to: 1
  5646                           ;arp.c: 228: request.targetMACAddress = targetMAC;
  5647  003360  EE21  F00E         	lfsr	2,ARP_sendRequest@targetMAC
  5648  003364  EE11  F026         	lfsr	1,ARP_sendRequest@request+18
  5649  003368  0E05               	movlw	5
  5650  00336A                     u9911:
  5651  00336A  CFDB FFE3          	movff	plusw2,plusw1
  5652  00336E  06E8               	decf	wreg,f,c
  5653  003370  E2FC               	bc	u9911
  5654                           
  5655                           ; BSR set to: 1
  5656                           ;arp.c: 230: ARP_send(request);
  5657  003372  EE21  F014         	lfsr	2,ARP_sendRequest@request
  5658  003376  EE00  F0A7         	lfsr	0,ARP_send@arp
  5659  00337A  0E1F               	movlw	31
  5660  00337C                     u9921:
  5661  00337C  CFDB FFEB          	movff	plusw2,plusw0
  5662  003380  06E8               	decf	wreg,f,c
  5663  003382  E2FC               	bc	u9921
  5664  003384  ECA5  F00D         	call	_ARP_send	;wreg free
  5665  003388  0012               	return		;funcret
  5666  00338A                     __end_of_ARP_sendRequest:
  5667                           	opt stack 0
  5668                           tblptru	equ	0xFF8
  5669                           tblptrh	equ	0xFF7
  5670                           tblptrl	equ	0xFF6
  5671                           tablat	equ	0xFF5
  5672                           prodh	equ	0xFF4
  5673                           prodl	equ	0xFF3
  5674                           intcon	equ	0xFF2
  5675                           intcon3	equ	0xFF0
  5676                           postinc0	equ	0xFEE
  5677                           plusw0	equ	0xFEB
  5678                           fsr0h	equ	0xFEA
  5679                           fsr0l	equ	0xFE9
  5680                           wreg	equ	0xFE8
  5681                           indf1	equ	0xFE7
  5682                           postinc1	equ	0xFE6
  5683                           postdec1	equ	0xFE5
  5684                           plusw1	equ	0xFE3
  5685                           fsr1h	equ	0xFE2
  5686                           fsr1l	equ	0xFE1
  5687                           indf2	equ	0xFDF
  5688                           postinc2	equ	0xFDE
  5689                           postdec2	equ	0xFDD
  5690                           plusw2	equ	0xFDB
  5691                           fsr2h	equ	0xFDA
  5692                           fsr2l	equ	0xFD9
  5693                           status	equ	0xFD8
  5694                           
  5695 ;; *************** function _ARP_getEntryFromTable *****************
  5696 ;; Defined at:
  5697 ;;		line 246 in file "src/stack/protocols/arp.c"
  5698 ;; Parameters:    Size  Location     Type
  5699 ;;  index           1    wreg     unsigned char 
  5700 ;; Auto vars:     Size  Location     Type
  5701 ;;  index           1    7[BANK0 ] unsigned char 
  5702 ;; Return value:  Size  Location     Type
  5703 ;;                  6    0[BANK0 ] struct macaddress
  5704 ;; Registers used:
  5705 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5706 ;; Tracked objects:
  5707 ;;		On entry : 0/0
  5708 ;;		On exit  : 0/0
  5709 ;;		Unchanged: 0/0
  5710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5711 ;;      Params:         0       7       0       0       0       0       0       0       0
  5712 ;;      Locals:         0       1       0       0       0       0       0       0       0
  5713 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5714 ;;      Totals:         0       8       0       0       0       0       0       0       0
  5715 ;;Total ram usage:        8 bytes
  5716 ;; Hardware stack levels used:    1
  5717 ;; Hardware stack levels required when called:    4
  5718 ;; This function calls:
  5719 ;;		Nothing
  5720 ;; This function is called by:
  5721 ;;		_ipv4_sendFrame
  5722 ;; This function uses a non-reentrant model
  5723 ;;
  5724                           
  5725                           	psect	text11
  5726  004364                     __ptext11:
  5727                           	opt stack 0
  5728  004364                     _ARP_getEntryFromTable:
  5729                           	opt stack 24
  5730                           
  5731                           ;incstack = 0
  5732                           ;ARP_getEntryFromTable@index stored from wreg
  5733  004364  0100               	movlb	0	; () banked
  5734  004366  6F67               	movwf	ARP_getEntryFromTable@index& (0+255),b
  5735                           
  5736                           ;arp.c: 247: return ARP_table[index].mac;
  5737  004368  0100               	movlb	0	; () banked
  5738  00436A  5167               	movf	ARP_getEntryFromTable@index& (0+255),w,b
  5739  00436C  0D0E               	mullw	14
  5740  00436E  0E04               	movlw	4
  5741  004370  26F3               	addwf	prodl,f,c
  5742  004372  0E00               	movlw	0
  5743  004374  22F4               	addwfc	prodh,f,c
  5744  004376  0E00               	movlw	low _ARP_table
  5745  004378  24F3               	addwf	prodl,w,c
  5746  00437A  6ED9               	movwf	fsr2l,c
  5747  00437C  0E03               	movlw	high _ARP_table
  5748  00437E  20F4               	addwfc	prodh,w,c
  5749  004380  6EDA               	movwf	fsr2h,c
  5750  004382  EE00  F060         	lfsr	0,?_ARP_getEntryFromTable
  5751  004386  0E05               	movlw	5
  5752  004388                     u9971:
  5753  004388  CFDB FFEB          	movff	plusw2,plusw0
  5754  00438C  06E8               	decf	wreg,f,c
  5755  00438E  E2FC               	bc	u9971
  5756  004390  0012               	return	
  5757  004392                     __end_of_ARP_getEntryFromTable:
  5758                           	opt stack 0
  5759                           tblptru	equ	0xFF8
  5760                           tblptrh	equ	0xFF7
  5761                           tblptrl	equ	0xFF6
  5762                           tablat	equ	0xFF5
  5763                           prodh	equ	0xFF4
  5764                           prodl	equ	0xFF3
  5765                           intcon	equ	0xFF2
  5766                           intcon3	equ	0xFF0
  5767                           postinc0	equ	0xFEE
  5768                           plusw0	equ	0xFEB
  5769                           fsr0h	equ	0xFEA
  5770                           fsr0l	equ	0xFE9
  5771                           wreg	equ	0xFE8
  5772                           indf1	equ	0xFE7
  5773                           postinc1	equ	0xFE6
  5774                           postdec1	equ	0xFE5
  5775                           plusw1	equ	0xFE3
  5776                           fsr1h	equ	0xFE2
  5777                           fsr1l	equ	0xFE1
  5778                           indf2	equ	0xFDF
  5779                           postinc2	equ	0xFDE
  5780                           postdec2	equ	0xFDD
  5781                           plusw2	equ	0xFDB
  5782                           fsr2h	equ	0xFDA
  5783                           fsr2l	equ	0xFD9
  5784                           status	equ	0xFD8
  5785                           
  5786 ;; *************** function _ARP_checkForEntry *****************
  5787 ;; Defined at:
  5788 ;;		line 233 in file "src/stack/protocols/arp.c"
  5789 ;; Parameters:    Size  Location     Type
  5790 ;;  ip              4    7[BANK0 ] struct ipv4_address
  5791 ;;  index           2   11[BANK0 ] PTR unsigned char 
  5792 ;;		 -> ipv4_sendFrame@index(1), 
  5793 ;; Auto vars:     Size  Location     Type
  5794 ;;  i               1   21[BANK0 ] unsigned char 
  5795 ;; Return value:  Size  Location     Type
  5796 ;;                  1    wreg      unsigned char 
  5797 ;; Registers used:
  5798 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5799 ;; Tracked objects:
  5800 ;;		On entry : 0/0
  5801 ;;		On exit  : 0/0
  5802 ;;		Unchanged: 0/0
  5803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5804 ;;      Params:         0       6       0       0       0       0       0       0       0
  5805 ;;      Locals:         0       1       0       0       0       0       0       0       0
  5806 ;;      Temps:          0       8       0       0       0       0       0       0       0
  5807 ;;      Totals:         0      15       0       0       0       0       0       0       0
  5808 ;;Total ram usage:       15 bytes
  5809 ;; Hardware stack levels used:    1
  5810 ;; Hardware stack levels required when called:    5
  5811 ;; This function calls:
  5812 ;;		_getSeconds
  5813 ;;		_ipv4_cmp
  5814 ;; This function is called by:
  5815 ;;		_ipv4_sendFrame
  5816 ;; This function uses a non-reentrant model
  5817 ;;
  5818                           
  5819                           	psect	text12
  5820  003178                     __ptext12:
  5821                           	opt stack 0
  5822  003178                     _ARP_checkForEntry:
  5823                           	opt stack 23
  5824                           
  5825                           ;arp.c: 234: for (uint8_t i = 0; i < 8; i++) {
  5826                           
  5827                           ; BSR set to: 0
  5828                           ;incstack = 0
  5829  003178  0E00               	movlw	0
  5830  00317A  0100               	movlb	0	; () banked
  5831  00317C  6F75               	movwf	ARP_checkForEntry@i& (0+255),b
  5832  00317E                     l8066:
  5833                           
  5834                           ; BSR set to: 0
  5835  00317E  0E07               	movlw	7
  5836  003180  6575               	cpfsgt	ARP_checkForEntry@i& (0+255),b
  5837  003182  D001               	goto	l919
  5838  003184  D050               	goto	u9960
  5839  003186                     l919:
  5840                           
  5841                           ; BSR set to: 0
  5842                           ;arp.c: 235: if (ipv4_cmp(&ARP_table[i].ip, &ip)) {
  5843                           
  5844                           ; BSR set to: 0
  5845  003186  5175               	movf	ARP_checkForEntry@i& (0+255),w,b
  5846  003188  0D0E               	mullw	14
  5847  00318A  0E00               	movlw	low _ARP_table
  5848  00318C  24F3               	addwf	prodl,w,c
  5849  00318E  6F60               	movwf	ipv4_cmp@a& (0+255),b
  5850  003190  0E03               	movlw	high _ARP_table
  5851  003192  20F4               	addwfc	prodh,w,c
  5852  003194  6F61               	movwf	(ipv4_cmp@a+1)& (0+255),b
  5853  003196  0E67               	movlw	low ARP_checkForEntry@ip
  5854  003198  6F62               	movwf	ipv4_cmp@b& (0+255),b
  5855  00319A  0E00               	movlw	high ARP_checkForEntry@ip
  5856  00319C  6F63               	movwf	(ipv4_cmp@b+1)& (0+255),b
  5857  00319E  EC99  F020         	call	_ipv4_cmp	;wreg free
  5858  0031A2  0100               	movlb	0	; () banked
  5859  0031A4  A0D8               	btfss	status,0,c
  5860  0031A6  D03D               	goto	l922
  5861                           
  5862                           ; BSR set to: 0
  5863                           ;arp.c: 236: if (getSeconds() - ARP_table[i].secondsCreated < 300) {
  5864  0031A8  5175               	movf	ARP_checkForEntry@i& (0+255),w,b
  5865  0031AA  0D0E               	mullw	14
  5866  0031AC  0E0A               	movlw	10
  5867  0031AE  26F3               	addwf	prodl,f,c
  5868  0031B0  0E00               	movlw	0
  5869  0031B2  22F4               	addwfc	prodh,f,c
  5870  0031B4  0E00               	movlw	low _ARP_table
  5871  0031B6  24F3               	addwf	prodl,w,c
  5872  0031B8  6ED9               	movwf	fsr2l,c
  5873  0031BA  0E03               	movlw	high _ARP_table
  5874  0031BC  20F4               	addwfc	prodh,w,c
  5875  0031BE  6EDA               	movwf	fsr2h,c
  5876  0031C0  CFDE F06D          	movff	postinc2,??_ARP_checkForEntry
  5877  0031C4  CFDE F06E          	movff	postinc2,??_ARP_checkForEntry+1
  5878  0031C8  CFDE F06F          	movff	postinc2,??_ARP_checkForEntry+2
  5879  0031CC  CFDE F070          	movff	postinc2,??_ARP_checkForEntry+3
  5880  0031D0  1F6D               	comf	??_ARP_checkForEntry& (0+255),f,b
  5881  0031D2  1F6E               	comf	(??_ARP_checkForEntry+1)& (0+255),f,b
  5882  0031D4  1F6F               	comf	(??_ARP_checkForEntry+2)& (0+255),f,b
  5883  0031D6  1F70               	comf	(??_ARP_checkForEntry+3)& (0+255),f,b
  5884  0031D8  2B6D               	incf	??_ARP_checkForEntry& (0+255),f,b
  5885  0031DA  0E00               	movlw	0
  5886  0031DC  236E               	addwfc	(??_ARP_checkForEntry+1)& (0+255),f,b
  5887  0031DE  236F               	addwfc	(??_ARP_checkForEntry+2)& (0+255),f,b
  5888  0031E0  2370               	addwfc	(??_ARP_checkForEntry+3)& (0+255),f,b
  5889  0031E2  EC3E  F023         	call	_getSeconds	;wreg free
  5890  0031E6  0100               	movlb	0	; () banked
  5891  0031E8  516D               	movf	??_ARP_checkForEntry& (0+255),w,b
  5892  0031EA  2560               	addwf	?_getSeconds& (0+255),w,b
  5893  0031EC  6F71               	movwf	(??_ARP_checkForEntry+4)& (0+255),b
  5894  0031EE  516E               	movf	(??_ARP_checkForEntry+1)& (0+255),w,b
  5895  0031F0  2161               	addwfc	(?_getSeconds+1)& (0+255),w,b
  5896  0031F2  6F72               	movwf	(??_ARP_checkForEntry+5)& (0+255),b
  5897  0031F4  516F               	movf	(??_ARP_checkForEntry+2)& (0+255),w,b
  5898  0031F6  2162               	addwfc	(?_getSeconds+2)& (0+255),w,b
  5899  0031F8  6F73               	movwf	(??_ARP_checkForEntry+6)& (0+255),b
  5900  0031FA  5170               	movf	(??_ARP_checkForEntry+3)& (0+255),w,b
  5901  0031FC  2163               	addwfc	(?_getSeconds+3)& (0+255),w,b
  5902  0031FE  6F74               	movwf	(??_ARP_checkForEntry+7)& (0+255),b
  5903  003200  5174               	movf	(??_ARP_checkForEntry+7)& (0+255),w,b
  5904  003202  1173               	iorwf	(??_ARP_checkForEntry+6)& (0+255),w,b
  5905  003204  E10E               	bnz	l8080
  5906  003206  0E2C               	movlw	44
  5907  003208  5D71               	subwf	(??_ARP_checkForEntry+4)& (0+255),w,b
  5908  00320A  0E01               	movlw	1
  5909  00320C  5972               	subwfb	(??_ARP_checkForEntry+5)& (0+255),w,b
  5910  00320E  B0D8               	btfsc	status,0,c
  5911  003210  D008               	goto	l922
  5912                           
  5913                           ; BSR set to: 0
  5914                           ;arp.c: 238: *index = i;
  5915  003212  C06B  FFD9         	movff	ARP_checkForEntry@index,fsr2l
  5916  003216  C06C  FFDA         	movff	ARP_checkForEntry@index+1,fsr2h
  5917  00321A  C075  FFDF         	movff	ARP_checkForEntry@i,indf2
  5918                           
  5919                           ; BSR set to: 0
  5920                           ;arp.c: 239: return 1;
  5921  00321E  0E01               	movlw	1
  5922                           
  5923                           ; BSR set to: 0
  5924  003220  0012               	return	
  5925  003222                     l922:
  5926  003222                     l8080:
  5927                           
  5928                           ; BSR set to: 0
  5929  003222  2B75               	incf	ARP_checkForEntry@i& (0+255),f,b
  5930  003224  D7AC               	goto	l8066
  5931  003226                     u9960:
  5932                           
  5933                           ; BSR set to: 0
  5934                           ;arp.c: 240: }
  5935                           ;arp.c: 241: }
  5936                           ;arp.c: 242: }
  5937                           ;arp.c: 243: return 0;
  5938                           
  5939                           ; BSR set to: 0
  5940  003226  0E00               	movlw	0
  5941  003228  0012               	return	
  5942  00322A                     __end_of_ARP_checkForEntry:
  5943                           	opt stack 0
  5944                           tblptru	equ	0xFF8
  5945                           tblptrh	equ	0xFF7
  5946                           tblptrl	equ	0xFF6
  5947                           tablat	equ	0xFF5
  5948                           prodh	equ	0xFF4
  5949                           prodl	equ	0xFF3
  5950                           intcon	equ	0xFF2
  5951                           intcon3	equ	0xFF0
  5952                           postinc0	equ	0xFEE
  5953                           plusw0	equ	0xFEB
  5954                           fsr0h	equ	0xFEA
  5955                           fsr0l	equ	0xFE9
  5956                           wreg	equ	0xFE8
  5957                           indf1	equ	0xFE7
  5958                           postinc1	equ	0xFE6
  5959                           postdec1	equ	0xFE5
  5960                           plusw1	equ	0xFE3
  5961                           fsr1h	equ	0xFE2
  5962                           fsr1l	equ	0xFE1
  5963                           indf2	equ	0xFDF
  5964                           postinc2	equ	0xFDE
  5965                           postdec2	equ	0xFDD
  5966                           plusw2	equ	0xFDB
  5967                           fsr2h	equ	0xFDA
  5968                           fsr2l	equ	0xFD9
  5969                           status	equ	0xFD8
  5970                           
  5971 ;; *************** function _ethernet_rxGetNewFrame *****************
  5972 ;; Defined at:
  5973 ;;		line 53 in file "src/eth/ethernet.c"
  5974 ;; Parameters:    Size  Location     Type
  5975 ;;  frame           2  116[BANK1 ] PTR struct ethernetFrame
  5976 ;;		 -> stack.ethernet(15), stack(113), 
  5977 ;; Auto vars:     Size  Location     Type
  5978 ;;  err             3  156[BANK0 ] struct error
  5979 ;; Return value:  Size  Location     Type
  5980 ;;                  3  116[BANK1 ] struct error
  5981 ;; Registers used:
  5982 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5983 ;; Tracked objects:
  5984 ;;		On entry : 0/0
  5985 ;;		On exit  : 0/0
  5986 ;;		Unchanged: 0/0
  5987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5988 ;;      Params:         0       0       3       0       0       0       0       0       0
  5989 ;;      Locals:         0       3       0       0       0       0       0       0       0
  5990 ;;      Temps:          0       0       8       0       0       0       0       0       0
  5991 ;;      Totals:         0       3      11       0       0       0       0       0       0
  5992 ;;Total ram usage:       14 bytes
  5993 ;; Hardware stack levels used:    1
  5994 ;; Hardware stack levels required when called:   12
  5995 ;; This function calls:
  5996 ;;		_ARP_handleNewPacket
  5997 ;;		_UARTTransmitInt
  5998 ;;		_UARTTransmitText
  5999 ;;		_etherTypeToString
  6000 ;;		_ethernetController_dropPacket
  6001 ;;		_ethernetController_getEtherTypeField
  6002 ;;		_ethernetController_getNextPacketPointer
  6003 ;;		_ethernetController_getRSV
  6004 ;;		_ethernetController_updateNextPacketPointer
  6005 ;;		_intToString
  6006 ;;		_ipv4_handleNewPacket
  6007 ;;		_macToString
  6008 ;; This function is called by:
  6009 ;;		_handleStackBackgroundTasks
  6010 ;; This function uses a non-reentrant model
  6011 ;;
  6012                           
  6013                           	psect	text13
  6014  00059E                     __ptext13:
  6015                           	opt stack 0
  6016  00059E                     _ethernet_rxGetNewFrame:
  6017                           	opt stack 17
  6018                           
  6019                           ;ethernet.c: 54: uint32_t static counter = 0;
  6020                           ;ethernet.c: 55: error_t err;
  6021                           ;ethernet.c: 56: err.module = ERROR_MODULE_ETHERNET;
  6022                           
  6023                           ; BSR set to: 0
  6024                           ;incstack = 0
  6025  00059E  0E02               	movlw	2
  6026  0005A0  0100               	movlb	0	; () banked
  6027  0005A2  6FFC               	movwf	ethernet_rxGetNewFrame@err& (0+255),b
  6028                           
  6029                           ;ethernet.c: 57: err.code = (uint16_t)0;
  6030  0005A4  0E00               	movlw	0
  6031  0005A6  6FFE               	movwf	(ethernet_rxGetNewFrame@err+2)& (0+255),b
  6032  0005A8  0E00               	movlw	0
  6033  0005AA  6FFD               	movwf	(ethernet_rxGetNewFrame@err+1)& (0+255),b
  6034                           
  6035                           ; BSR set to: 0
  6036                           ;ethernet.c: 60: frame->memory.start = ethernetController_getNextPacketPointer();
  6037  0005AC  EC58  F023         	call	_ethernetController_getNextPacketPointer	;wreg free
  6038  0005B0  0101               	movlb	1	; () banked
  6039  0005B2  EE20 F010          	lfsr	2,16
  6040  0005B6  5174               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6041  0005B8  26D9               	addwf	fsr2l,f,c
  6042  0005BA  5175               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6043  0005BC  22DA               	addwfc	fsr2h,f,c
  6044  0005BE  0100               	movlb	0	; () banked
  6045  0005C0  C062  FFDE         	movff	?_ethernetController_getNextPacketPointer,postinc2
  6046  0005C4  C063  FFDD         	movff	?_ethernetController_getNextPacketPointer+1,postdec2
  6047                           
  6048                           ; BSR set to: 0
  6049                           ;ethernet.c: 62: ethernetController_updateNextPacketPointer();
  6050  0005C8  EC8B  F01C         	call	_ethernetController_updateNextPacketPointer	;wreg free
  6051                           
  6052                           ;ethernet.c: 67: frame->memory.fIsAssigned = 1;
  6053  0005CC  0101               	movlb	1	; () banked
  6054  0005CE  EE20 F016          	lfsr	2,22
  6055  0005D2  5174               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6056  0005D4  26D9               	addwf	fsr2l,f,c
  6057  0005D6  5175               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6058  0005D8  22DA               	addwfc	fsr2h,f,c
  6059  0005DA  0E01               	movlw	1
  6060  0005DC  6EDF               	movwf	indf2,c
  6061                           
  6062                           ; BSR set to: 1
  6063                           ;ethernet.c: 68: frame->receiveStatusVector = ethernetController_getRSV(frame->memory.st
      +                          art);
  6064  0005DE  EE20 F010          	lfsr	2,16
  6065  0005E2  5174               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6066  0005E4  26D9               	addwf	fsr2l,f,c
  6067  0005E6  5175               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6068  0005E8  22DA               	addwfc	fsr2h,f,c
  6069  0005EA  CFDE F071          	movff	postinc2,ethernetController_getRSV@address
  6070  0005EE  CFDD F072          	movff	postdec2,ethernetController_getRSV@address+1
  6071  0005F2  ECC8  F01C         	call	_ethernetController_getRSV	;wreg free
  6072  0005F6  0101               	movlb	1	; () banked
  6073  0005F8  EE20 F019          	lfsr	2,25
  6074  0005FC  5174               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6075  0005FE  26D9               	addwf	fsr2l,f,c
  6076  000600  5175               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6077  000602  22DA               	addwfc	fsr2h,f,c
  6078  000604  0E04               	movlw	4
  6079  000606                     u10371:
  6080  000606  CFEB FFDB          	movff	plusw0,plusw2
  6081  00060A  06E8               	decf	wreg,f,c
  6082  00060C  E2FC               	bc	u10371
  6083                           
  6084                           ; BSR set to: 1
  6085                           ;ethernet.c: 69: frame->memory.length = frame->receiveStatusVector.length;
  6086  00060E  EE20 F019          	lfsr	2,25
  6087  000612  5174               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6088  000614  26D9               	addwf	fsr2l,f,c
  6089  000616  5175               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6090  000618  22DA               	addwfc	fsr2h,f,c
  6091  00061A  EE10 F014          	lfsr	1,20
  6092  00061E  5174               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6093  000620  26E1               	addwf	fsr1l,f,c
  6094  000622  5175               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6095  000624  22E2               	addwfc	fsr1h,f,c
  6096  000626  CFDE FFE6          	movff	postinc2,postinc1
  6097  00062A  CFDD FFE5          	movff	postdec2,postdec1
  6098                           
  6099                           ; BSR set to: 1
  6100                           ;ethernet.c: 74: if (frame->memory.start + frame->memory.length > 0x5FFF) {
  6101  00062E  EE20 F014          	lfsr	2,20
  6102  000632  5174               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6103  000634  26D9               	addwf	fsr2l,f,c
  6104  000636  5175               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6105  000638  22DA               	addwfc	fsr2h,f,c
  6106  00063A  CFDE F177          	movff	postinc2,??_ethernet_rxGetNewFrame
  6107  00063E  CFDD F178          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  6108  000642  EE20 F010          	lfsr	2,16
  6109  000646  5174               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6110  000648  26D9               	addwf	fsr2l,f,c
  6111  00064A  5175               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6112  00064C  22DA               	addwfc	fsr2h,f,c
  6113  00064E  CFDE F179          	movff	postinc2,??_ethernet_rxGetNewFrame+2
  6114  000652  CFDD F17A          	movff	postdec2,??_ethernet_rxGetNewFrame+3
  6115  000656  5177               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  6116  000658  2779               	addwf	(??_ethernet_rxGetNewFrame+2)& (0+255),f,b
  6117  00065A  5178               	movf	(??_ethernet_rxGetNewFrame+1)& (0+255),w,b
  6118  00065C  237A               	addwfc	(??_ethernet_rxGetNewFrame+3)& (0+255),f,b
  6119  00065E  0E60               	movlw	96
  6120  000660  5D7A               	subwf	(??_ethernet_rxGetNewFrame+3)& (0+255),w,b
  6121  000662  A0D8               	btfss	status,0,c
  6122  000664  D03B               	goto	l351
  6123                           
  6124                           ; BSR set to: 1
  6125                           ;ethernet.c: 76: frame->memory.end = frame->memory.length - ((0x5FFF - 0x3000) - frame->
      +                          memory.start) + 0x3000;
  6126  000666  0E00               	movlw	0
  6127  000668  6F77               	movwf	??_ethernet_rxGetNewFrame& (0+255),b
  6128  00066A  0E30               	movlw	48
  6129  00066C  6F78               	movwf	(??_ethernet_rxGetNewFrame+1)& (0+255),b
  6130  00066E  EE20 F014          	lfsr	2,20
  6131  000672  5174               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6132  000674  26D9               	addwf	fsr2l,f,c
  6133  000676  5175               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6134  000678  22DA               	addwfc	fsr2h,f,c
  6135  00067A  CFDE F179          	movff	postinc2,??_ethernet_rxGetNewFrame+2
  6136  00067E  CFDD F17A          	movff	postdec2,??_ethernet_rxGetNewFrame+3
  6137  000682  0EFF               	movlw	255
  6138  000684  6F7B               	movwf	(??_ethernet_rxGetNewFrame+4)& (0+255),b
  6139  000686  0E2F               	movlw	47
  6140  000688  6F7C               	movwf	(??_ethernet_rxGetNewFrame+5)& (0+255),b
  6141  00068A  EE20 F010          	lfsr	2,16
  6142  00068E  5174               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6143  000690  26D9               	addwf	fsr2l,f,c
  6144  000692  5175               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6145  000694  22DA               	addwfc	fsr2h,f,c
  6146  000696  CFDE F17D          	movff	postinc2,??_ethernet_rxGetNewFrame+6
  6147  00069A  CFDD F17E          	movff	postdec2,??_ethernet_rxGetNewFrame+7
  6148  00069E  1F7D               	comf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  6149  0006A0  1F7E               	comf	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  6150  0006A2  4B7D               	infsnz	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  6151  0006A4  2B7E               	incf	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  6152  0006A6  517B               	movf	(??_ethernet_rxGetNewFrame+4)& (0+255),w,b
  6153  0006A8  277D               	addwf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  6154  0006AA  517C               	movf	(??_ethernet_rxGetNewFrame+5)& (0+255),w,b
  6155  0006AC  237E               	addwfc	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  6156  0006AE  1F7D               	comf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  6157  0006B0  1F7E               	comf	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  6158  0006B2  4B7D               	infsnz	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  6159  0006B4  2B7E               	incf	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  6160  0006B6  5179               	movf	(??_ethernet_rxGetNewFrame+2)& (0+255),w,b
  6161  0006B8  277D               	addwf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  6162  0006BA  517A               	movf	(??_ethernet_rxGetNewFrame+3)& (0+255),w,b
  6163  0006BC  237E               	addwfc	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  6164  0006BE  5177               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  6165  0006C0  277D               	addwf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  6166  0006C2  5178               	movf	(??_ethernet_rxGetNewFrame+1)& (0+255),w,b
  6167  0006C4  237E               	addwfc	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  6168  0006C6  EE20 F012          	lfsr	2,18
  6169  0006CA  5174               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6170  0006CC  26D9               	addwf	fsr2l,f,c
  6171  0006CE  5175               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6172  0006D0  22DA               	addwfc	fsr2h,f,c
  6173  0006D2  C17D  FFDE         	movff	??_ethernet_rxGetNewFrame+6,postinc2
  6174  0006D6  C17E  FFDD         	movff	??_ethernet_rxGetNewFrame+7,postdec2
  6175                           
  6176                           ;ethernet.c: 77: } else {
  6177  0006DA  D022               	goto	l352
  6178  0006DC                     l351:
  6179                           
  6180                           ; BSR set to: 1
  6181                           ;ethernet.c: 78: frame->memory.end = frame->memory.start + frame->memory.length;
  6182                           
  6183                           ; BSR set to: 1
  6184  0006DC  EE20 F014          	lfsr	2,20
  6185  0006E0  5174               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6186  0006E2  26D9               	addwf	fsr2l,f,c
  6187  0006E4  5175               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6188  0006E6  22DA               	addwfc	fsr2h,f,c
  6189  0006E8  CFDE F177          	movff	postinc2,??_ethernet_rxGetNewFrame
  6190  0006EC  CFDD F178          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  6191  0006F0  EE20 F010          	lfsr	2,16
  6192  0006F4  5174               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6193  0006F6  26D9               	addwf	fsr2l,f,c
  6194  0006F8  5175               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6195  0006FA  22DA               	addwfc	fsr2h,f,c
  6196  0006FC  CFDE F179          	movff	postinc2,??_ethernet_rxGetNewFrame+2
  6197  000700  CFDD F17A          	movff	postdec2,??_ethernet_rxGetNewFrame+3
  6198  000704  5177               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  6199  000706  2779               	addwf	(??_ethernet_rxGetNewFrame+2)& (0+255),f,b
  6200  000708  5178               	movf	(??_ethernet_rxGetNewFrame+1)& (0+255),w,b
  6201  00070A  237A               	addwfc	(??_ethernet_rxGetNewFrame+3)& (0+255),f,b
  6202  00070C  EE20 F012          	lfsr	2,18
  6203  000710  5174               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6204  000712  26D9               	addwf	fsr2l,f,c
  6205  000714  5175               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6206  000716  22DA               	addwfc	fsr2h,f,c
  6207  000718  C179  FFDE         	movff	??_ethernet_rxGetNewFrame+2,postinc2
  6208  00071C  C17A  FFDD         	movff	??_ethernet_rxGetNewFrame+3,postdec2
  6209  000720                     l352:
  6210                           
  6211                           ; BSR set to: 1
  6212                           ;ethernet.c: 79: }
  6213                           ;ethernet.c: 80: frame->ethertype = ethernetController_getEtherTypeField(frame->memory);
  6214                           
  6215                           ; BSR set to: 1
  6216  000720  EE20 F010          	lfsr	2,16
  6217  000724  5174               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6218  000726  26D9               	addwf	fsr2l,f,c
  6219  000728  5175               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6220  00072A  22DA               	addwfc	fsr2h,f,c
  6221  00072C  EE00  F06F         	lfsr	0,ethernetController_getEtherTypeField@field
  6222  000730  0E08               	movlw	8
  6223  000732                     u10391:
  6224  000732  CFDB FFEB          	movff	plusw2,plusw0
  6225  000736  06E8               	decf	wreg,f,c
  6226  000738  E2FC               	bc	u10391
  6227  00073A  EC75  F01D         	call	_ethernetController_getEtherTypeField	;wreg free
  6228  00073E  0101               	movlb	1	; () banked
  6229  000740  EE20 F00E          	lfsr	2,14
  6230  000744  5174               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6231  000746  26D9               	addwf	fsr2l,f,c
  6232  000748  5175               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6233  00074A  22DA               	addwfc	fsr2h,f,c
  6234  00074C  0100               	movlb	0	; () banked
  6235  00074E  C06F  FFDE         	movff	?_ethernetController_getEtherTypeField,postinc2
  6236  000752  C070  FFDD         	movff	?_ethernetController_getEtherTypeField+1,postdec2
  6237                           
  6238                           ; BSR set to: 0
  6239                           ;ethernet.c: 82: UARTTransmitText("[");
  6240  000756  0EDD               	movlw	low (STR_58+3)
  6241  000758  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6242  00075A  0E7F               	movlw	high (STR_58+3)
  6243  00075C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6244  00075E  EC18  F01F         	call	_UARTTransmitText	;wreg free
  6245                           
  6246                           ;ethernet.c: 83: UARTTransmitText(intToString(counter++));
  6247  000762  C19E  F073         	movff	ethernet_rxGetNewFrame@counter,intToString@val
  6248  000766  C19F  F074         	movff	ethernet_rxGetNewFrame@counter+1,intToString@val+1
  6249  00076A  C1A0  F075         	movff	ethernet_rxGetNewFrame@counter+2,intToString@val+2
  6250  00076E  C1A1  F076         	movff	ethernet_rxGetNewFrame@counter+3,intToString@val+3
  6251  000772  EC42  F00C         	call	_intToString	;wreg free
  6252  000776  C073  F098         	movff	?_intToString,UARTTransmitText@str
  6253  00077A  C074  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  6254  00077E  EC18  F01F         	call	_UARTTransmitText	;wreg free
  6255  000782  0E01               	movlw	1
  6256  000784  0101               	movlb	1	; () banked
  6257  000786  279E               	addwf	ethernet_rxGetNewFrame@counter& (0+255),f,b
  6258  000788  0E00               	movlw	0
  6259  00078A  239F               	addwfc	(ethernet_rxGetNewFrame@counter+1)& (0+255),f,b
  6260  00078C  23A0               	addwfc	(ethernet_rxGetNewFrame@counter+2)& (0+255),f,b
  6261  00078E  23A1               	addwfc	(ethernet_rxGetNewFrame@counter+3)& (0+255),f,b
  6262                           
  6263                           ; BSR set to: 1
  6264                           ;ethernet.c: 84: UARTTransmitText("]");
  6265  000790  0EFC               	movlw	low (STR_20+1)
  6266  000792  0100               	movlb	0	; () banked
  6267  000794  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6268  000796  0E7F               	movlw	high (STR_20+1)
  6269  000798  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6270  00079A  EC18  F01F         	call	_UARTTransmitText	;wreg free
  6271                           
  6272                           ;ethernet.c: 86: if (frame->receiveStatusVector.broadcast)
  6273  00079E  0101               	movlb	1	; () banked
  6274  0007A0  EE20 F01B          	lfsr	2,27
  6275  0007A4  5174               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6276  0007A6  26D9               	addwf	fsr2l,f,c
  6277  0007A8  5175               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6278  0007AA  22DA               	addwfc	fsr2h,f,c
  6279  0007AC  AEDF               	btfss	indf2,7,c
  6280  0007AE  D007               	goto	l353
  6281                           
  6282                           ; BSR set to: 1
  6283                           ;ethernet.c: 87: UARTTransmitText("[Broadcast]");
  6284  0007B0  0E8B               	movlw	low STR_7
  6285  0007B2  0100               	movlb	0	; () banked
  6286  0007B4  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6287  0007B6  0E7F               	movlw	high STR_7
  6288  0007B8  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6289  0007BA  EC18  F01F         	call	_UARTTransmitText	;wreg free
  6290  0007BE                     l353:
  6291                           
  6292                           ;ethernet.c: 88: if (frame->receiveStatusVector.unicast)
  6293  0007BE  0101               	movlb	1	; () banked
  6294  0007C0  EE20 F01D          	lfsr	2,29
  6295  0007C4  5174               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6296  0007C6  26D9               	addwf	fsr2l,f,c
  6297  0007C8  5175               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6298  0007CA  22DA               	addwfc	fsr2h,f,c
  6299  0007CC  A4DF               	btfss	indf2,2,c
  6300  0007CE  D007               	goto	l354
  6301                           
  6302                           ; BSR set to: 1
  6303                           ;ethernet.c: 89: UARTTransmitText("[Unicast]");
  6304  0007D0  0EA1               	movlw	low STR_8
  6305  0007D2  0100               	movlb	0	; () banked
  6306  0007D4  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6307  0007D6  0E7F               	movlw	high STR_8
  6308  0007D8  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6309  0007DA  EC18  F01F         	call	_UARTTransmitText	;wreg free
  6310  0007DE                     l354:
  6311                           
  6312                           ;ethernet.c: 90: if (!frame->receiveStatusVector.receivedOk)
  6313  0007DE  0101               	movlb	1	; () banked
  6314  0007E0  EE20 F01B          	lfsr	2,27
  6315  0007E4  5174               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6316  0007E6  26D9               	addwf	fsr2l,f,c
  6317  0007E8  5175               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6318  0007EA  22DA               	addwfc	fsr2h,f,c
  6319  0007EC  BADF               	btfsc	indf2,5,c
  6320  0007EE  D09E               	goto	l356
  6321                           
  6322                           ; BSR set to: 1
  6323                           ;ethernet.c: 91: UARTTransmitText("[Symbol Errors]");
  6324  0007F0  0E1A               	movlw	low STR_9
  6325  0007F2  0100               	movlb	0	; () banked
  6326  0007F4  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6327  0007F6  0E7F               	movlw	high STR_9
  6328  0007F8  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6329  0007FA  EC18  F01F         	call	_UARTTransmitText	;wreg free
  6330                           
  6331                           ;ethernet.c: 93: switch (frame->ethertype) {
  6332  0007FE  D096               	goto	l356
  6333  000800                     
  6334                           ;ethernet.c: 95: UARTTransmitText("[ARP]");
  6335  000800  0ED4               	movlw	low STR_10
  6336  000802  0100               	movlb	0	; () banked
  6337  000804  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6338  000806  0E7F               	movlw	high STR_10
  6339  000808  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6340  00080A  EC18  F01F         	call	_UARTTransmitText	;wreg free
  6341                           
  6342                           ;ethernet.c: 96: ARP_handleNewPacket(frame);
  6343  00080E  C174  F0F8         	movff	ethernet_rxGetNewFrame@frame,ARP_handleNewPacket@frame
  6344  000812  C175  F0F9         	movff	ethernet_rxGetNewFrame@frame+1,ARP_handleNewPacket@frame+1
  6345  000816  EC65  F011         	call	_ARP_handleNewPacket	;wreg free
  6346                           
  6347                           ;ethernet.c: 99: break;
  6348                           
  6349                           ;ethernet.c: 98: case ETHERTYPE_FLOW_CONTROL:
  6350                           
  6351                           ;ethernet.c: 97: break;
  6352  00081A  D0AA               	goto	l358
  6353  00081C                     
  6354                           ;ethernet.c: 101: UARTTransmitText("[IPv4]");
  6355  00081C  0ECD               	movlw	low STR_11
  6356  00081E  0100               	movlb	0	; () banked
  6357  000820  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6358  000822  0E7F               	movlw	high STR_11
  6359  000824  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6360  000826  EC18  F01F         	call	_UARTTransmitText	;wreg free
  6361                           
  6362                           ;ethernet.c: 102: ipv4_handleNewPacket(frame);
  6363  00082A  C174  F09A         	movff	ethernet_rxGetNewFrame@frame,ipv4_handleNewPacket@frame
  6364  00082E  C175  F09B         	movff	ethernet_rxGetNewFrame@frame+1,ipv4_handleNewPacket@frame+1
  6365  000832  ECF3  F022         	call	_ipv4_handleNewPacket	;wreg free
  6366                           
  6367                           ;ethernet.c: 105: break;
  6368                           
  6369                           ;ethernet.c: 104: case ETHERTYPE_WOL:
  6370                           
  6371                           ;ethernet.c: 103: break;
  6372  000836  D09C               	goto	l358
  6373  000838                     
  6374                           ;ethernet.c: 107: UARTTransmitText("[");
  6375  000838  0EDD               	movlw	low (STR_58+3)
  6376  00083A  0100               	movlb	0	; () banked
  6377  00083C  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6378  00083E  0E7F               	movlw	high (STR_58+3)
  6379  000840  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6380  000842  EC18  F01F         	call	_UARTTransmitText	;wreg free
  6381                           
  6382                           ;ethernet.c: 108: UARTTransmitText(macToString(frame->source));
  6383  000846  0101               	movlb	1	; () banked
  6384  000848  EE20 F002          	lfsr	2,2
  6385  00084C  5174               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6386  00084E  26D9               	addwf	fsr2l,f,c
  6387  000850  5175               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6388  000852  22DA               	addwfc	fsr2h,f,c
  6389  000854  EE00  F07A         	lfsr	0,macToString@addr
  6390  000858  0E05               	movlw	5
  6391  00085A                     u10431:
  6392  00085A  CFDB FFEB          	movff	plusw2,plusw0
  6393  00085E  06E8               	decf	wreg,f,c
  6394  000860  E2FC               	bc	u10431
  6395  000862  EC6A  F016         	call	_macToString	;wreg free
  6396  000866  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  6397  00086A  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  6398  00086E  EC18  F01F         	call	_UARTTransmitText	;wreg free
  6399                           
  6400                           ;ethernet.c: 109: UARTTransmitText("->");
  6401  000872  0EF5               	movlw	low STR_13
  6402  000874  0100               	movlb	0	; () banked
  6403  000876  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6404  000878  0E7F               	movlw	high STR_13
  6405  00087A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6406  00087C  EC18  F01F         	call	_UARTTransmitText	;wreg free
  6407                           
  6408                           ;ethernet.c: 110: UARTTransmitText(macToString(frame->destination));
  6409  000880  0101               	movlb	1	; () banked
  6410  000882  EE20 F008          	lfsr	2,8
  6411  000886  5174               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6412  000888  26D9               	addwf	fsr2l,f,c
  6413  00088A  5175               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6414  00088C  22DA               	addwfc	fsr2h,f,c
  6415  00088E  EE00  F07A         	lfsr	0,macToString@addr
  6416  000892  0E05               	movlw	5
  6417  000894                     u10441:
  6418  000894  CFDB FFEB          	movff	plusw2,plusw0
  6419  000898  06E8               	decf	wreg,f,c
  6420  00089A  E2FC               	bc	u10441
  6421  00089C  EC6A  F016         	call	_macToString	;wreg free
  6422  0008A0  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  6423  0008A4  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  6424  0008A8  EC18  F01F         	call	_UARTTransmitText	;wreg free
  6425                           
  6426                           ;ethernet.c: 111: UARTTransmitText("][");
  6427  0008AC  0EF8               	movlw	low STR_14
  6428  0008AE  0100               	movlb	0	; () banked
  6429  0008B0  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6430  0008B2  0E7F               	movlw	high STR_14
  6431  0008B4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6432  0008B6  EC18  F01F         	call	_UARTTransmitText	;wreg free
  6433                           
  6434                           ;ethernet.c: 112: UARTTransmitText(etherTypeToString(frame->ethertype));
  6435  0008BA  0101               	movlb	1	; () banked
  6436  0008BC  EE20 F00E          	lfsr	2,14
  6437  0008C0  5174               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6438  0008C2  26D9               	addwf	fsr2l,f,c
  6439  0008C4  5175               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6440  0008C6  22DA               	addwfc	fsr2h,f,c
  6441  0008C8  CFDE F060          	movff	postinc2,etherTypeToString@ethertype
  6442  0008CC  CFDD F061          	movff	postdec2,etherTypeToString@ethertype+1
  6443  0008D0  EC34  F020         	call	_etherTypeToString	;wreg free
  6444  0008D4  C060  F098         	movff	?_etherTypeToString,UARTTransmitText@str
  6445  0008D8  C061  F099         	movff	?_etherTypeToString+1,UARTTransmitText@str+1
  6446  0008DC  EC18  F01F         	call	_UARTTransmitText	;wreg free
  6447                           
  6448                           ;ethernet.c: 113: UARTTransmitText("][L=");
  6449  0008E0  0EE9               	movlw	low STR_15
  6450  0008E2  0100               	movlb	0	; () banked
  6451  0008E4  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6452  0008E6  0E7F               	movlw	high STR_15
  6453  0008E8  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6454  0008EA  EC18  F01F         	call	_UARTTransmitText	;wreg free
  6455                           
  6456                           ;ethernet.c: 114: UARTTransmitInt(frame->length);
  6457  0008EE  C174  FFD9         	movff	ethernet_rxGetNewFrame@frame,fsr2l
  6458  0008F2  C175  FFDA         	movff	ethernet_rxGetNewFrame@frame+1,fsr2h
  6459  0008F6  CFDE F177          	movff	postinc2,??_ethernet_rxGetNewFrame
  6460  0008FA  CFDD F178          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  6461  0008FE  C177  F09A         	movff	??_ethernet_rxGetNewFrame,UARTTransmitInt@val
  6462  000902  C178  F09B         	movff	??_ethernet_rxGetNewFrame+1,UARTTransmitInt@val+1
  6463  000906  0100               	movlb	0	; () banked
  6464  000908  6B9C               	clrf	(UARTTransmitInt@val+2)& (0+255),b
  6465  00090A  6B9D               	clrf	(UARTTransmitInt@val+3)& (0+255),b
  6466  00090C  ECB6  F022         	call	_UARTTransmitInt	;wreg free
  6467                           
  6468                           ;ethernet.c: 115: UARTTransmitText("]");
  6469  000910  0EFC               	movlw	low (STR_20+1)
  6470  000912  0100               	movlb	0	; () banked
  6471  000914  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6472  000916  0E7F               	movlw	high (STR_20+1)
  6473  000918  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6474  00091A  EC18  F01F         	call	_UARTTransmitText	;wreg free
  6475                           
  6476                           ;ethernet.c: 116: ethernetController_dropPacket(frame);
  6477  00091E  C174  F072         	movff	ethernet_rxGetNewFrame@frame,ethernetController_dropPacket@frame
  6478  000922  C175  F073         	movff	ethernet_rxGetNewFrame@frame+1,ethernetController_dropPacket@frame+1
  6479  000926  ECBA  F020         	call	_ethernetController_dropPacket	;wreg free
  6480                           
  6481                           ;ethernet.c: 117: break;
  6482  00092A  D022               	goto	l358
  6483  00092C                     l356:
  6484  00092C  0101               	movlb	1	; () banked
  6485  00092E  EE20 F00E          	lfsr	2,14
  6486  000932  5174               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6487  000934  26D9               	addwf	fsr2l,f,c
  6488  000936  5175               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6489  000938  22DA               	addwfc	fsr2h,f,c
  6490  00093A  CFDE F177          	movff	postinc2,??_ethernet_rxGetNewFrame
  6491  00093E  CFDD F178          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  6492                           
  6493                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  6494                           ; Switch size 1, requested type "space"
  6495                           ; Number of cases is 2, Range of values is 8 to 136
  6496                           ; switch strategies available:
  6497                           ; Name         Instructions Cycles
  6498                           ; simple_byte            7     4 (average)
  6499                           ;	Chosen strategy is simple_byte
  6500  000942  5178               	movf	(??_ethernet_rxGetNewFrame+1)& (0+255),w,b
  6501  000944  0A08               	xorlw	8	; case 8
  6502  000946  B4D8               	btfsc	status,2,c
  6503  000948  D004               	goto	l9076
  6504  00094A  0A80               	xorlw	128	; case 136
  6505  00094C  B4D8               	btfsc	status,2,c
  6506  00094E  D00C               	goto	l9078
  6507  000950  D773               	goto	l362
  6508  000952                     l9076:
  6509                           
  6510                           ; BSR set to: 1
  6511                           ; Switch size 1, requested type "space"
  6512                           ; Number of cases is 3, Range of values is 0 to 66
  6513                           ; switch strategies available:
  6514                           ; Name         Instructions Cycles
  6515                           ; simple_byte           10     6 (average)
  6516                           ;	Chosen strategy is simple_byte
  6517  000952  5177               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  6518  000954  0A00               	xorlw	0	; case 0
  6519  000956  B4D8               	btfsc	status,2,c
  6520  000958  D761               	goto	l360
  6521  00095A  0A06               	xorlw	6	; case 6
  6522  00095C  B4D8               	btfsc	status,2,c
  6523  00095E  D750               	goto	l357
  6524  000960  0A44               	xorlw	68	; case 66
  6525  000962  B4D8               	btfsc	status,2,c
  6526  000964  D005               	goto	l358
  6527  000966  D768               	goto	l362
  6528  000968                     l9078:
  6529                           
  6530                           ; BSR set to: 1
  6531                           ; Switch size 1, requested type "space"
  6532                           ; Number of cases is 1, Range of values is 8 to 8
  6533                           ; switch strategies available:
  6534                           ; Name         Instructions Cycles
  6535                           ; simple_byte            4     3 (average)
  6536                           ;	Chosen strategy is simple_byte
  6537  000968  5177               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  6538  00096A  0A08               	xorlw	8	; case 8
  6539  00096C  A4D8               	btfss	status,2,c
  6540  00096E  D764               	goto	l362
  6541  000970                     l358:
  6542                           
  6543                           ;ethernet.c: 121: UARTTransmitText("[");
  6544                           
  6545                           ; BSR set to: 1
  6546  000970  0EDD               	movlw	low (STR_58+3)
  6547  000972  0100               	movlb	0	; () banked
  6548  000974  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6549  000976  0E7F               	movlw	high (STR_58+3)
  6550  000978  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6551  00097A  EC18  F01F         	call	_UARTTransmitText	;wreg free
  6552                           
  6553                           ;ethernet.c: 122: UARTTransmitText(intToString(frame->memory.start));
  6554  00097E  0101               	movlb	1	; () banked
  6555  000980  EE20 F010          	lfsr	2,16
  6556  000984  5174               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6557  000986  26D9               	addwf	fsr2l,f,c
  6558  000988  5175               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6559  00098A  22DA               	addwfc	fsr2h,f,c
  6560  00098C  CFDE F177          	movff	postinc2,??_ethernet_rxGetNewFrame
  6561  000990  CFDD F178          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  6562  000994  C177  F073         	movff	??_ethernet_rxGetNewFrame,intToString@val
  6563  000998  C178  F074         	movff	??_ethernet_rxGetNewFrame+1,intToString@val+1
  6564  00099C  0100               	movlb	0	; () banked
  6565  00099E  6B75               	clrf	(intToString@val+2)& (0+255),b
  6566  0009A0  6B76               	clrf	(intToString@val+3)& (0+255),b
  6567  0009A2  EC42  F00C         	call	_intToString	;wreg free
  6568  0009A6  C073  F098         	movff	?_intToString,UARTTransmitText@str
  6569  0009AA  C074  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  6570  0009AE  EC18  F01F         	call	_UARTTransmitText	;wreg free
  6571                           
  6572                           ;ethernet.c: 123: UARTTransmitText(" to ");
  6573  0009B2  0E15               	movlw	low (STR_63+11)
  6574  0009B4  0100               	movlb	0	; () banked
  6575  0009B6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6576  0009B8  0E7F               	movlw	high (STR_63+11)
  6577  0009BA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6578  0009BC  EC18  F01F         	call	_UARTTransmitText	;wreg free
  6579                           
  6580                           ;ethernet.c: 124: UARTTransmitText(intToString(frame->memory.end));
  6581  0009C0  0101               	movlb	1	; () banked
  6582  0009C2  EE20 F012          	lfsr	2,18
  6583  0009C6  5174               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6584  0009C8  26D9               	addwf	fsr2l,f,c
  6585  0009CA  5175               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6586  0009CC  22DA               	addwfc	fsr2h,f,c
  6587  0009CE  CFDE F177          	movff	postinc2,??_ethernet_rxGetNewFrame
  6588  0009D2  CFDD F178          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  6589  0009D6  C177  F073         	movff	??_ethernet_rxGetNewFrame,intToString@val
  6590  0009DA  C178  F074         	movff	??_ethernet_rxGetNewFrame+1,intToString@val+1
  6591  0009DE  0100               	movlb	0	; () banked
  6592  0009E0  6B75               	clrf	(intToString@val+2)& (0+255),b
  6593  0009E2  6B76               	clrf	(intToString@val+3)& (0+255),b
  6594  0009E4  EC42  F00C         	call	_intToString	;wreg free
  6595  0009E8  C073  F098         	movff	?_intToString,UARTTransmitText@str
  6596  0009EC  C074  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  6597  0009F0  EC18  F01F         	call	_UARTTransmitText	;wreg free
  6598                           
  6599                           ;ethernet.c: 125: UARTTransmitText(" (");
  6600  0009F4  0EF2               	movlw	low STR_19
  6601  0009F6  0100               	movlb	0	; () banked
  6602  0009F8  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6603  0009FA  0E7F               	movlw	high STR_19
  6604  0009FC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6605  0009FE  EC18  F01F         	call	_UARTTransmitText	;wreg free
  6606                           
  6607                           ;ethernet.c: 126: UARTTransmitText(intToString(frame->memory.length));
  6608  000A02  0101               	movlb	1	; () banked
  6609  000A04  EE20 F014          	lfsr	2,20
  6610  000A08  5174               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6611  000A0A  26D9               	addwf	fsr2l,f,c
  6612  000A0C  5175               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6613  000A0E  22DA               	addwfc	fsr2h,f,c
  6614  000A10  CFDE F177          	movff	postinc2,??_ethernet_rxGetNewFrame
  6615  000A14  CFDD F178          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  6616  000A18  C177  F073         	movff	??_ethernet_rxGetNewFrame,intToString@val
  6617  000A1C  C178  F074         	movff	??_ethernet_rxGetNewFrame+1,intToString@val+1
  6618  000A20  0100               	movlb	0	; () banked
  6619  000A22  6B75               	clrf	(intToString@val+2)& (0+255),b
  6620  000A24  6B76               	clrf	(intToString@val+3)& (0+255),b
  6621  000A26  EC42  F00C         	call	_intToString	;wreg free
  6622  000A2A  C073  F098         	movff	?_intToString,UARTTransmitText@str
  6623  000A2E  C074  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  6624  000A32  EC18  F01F         	call	_UARTTransmitText	;wreg free
  6625                           
  6626                           ;ethernet.c: 127: UARTTransmitText(")]");
  6627  000A36  0EFB               	movlw	low STR_20
  6628  000A38  0100               	movlb	0	; () banked
  6629  000A3A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6630  000A3C  0E7F               	movlw	high STR_20
  6631  000A3E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6632  000A40  EC18  F01F         	call	_UARTTransmitText	;wreg free
  6633                           
  6634                           ;ethernet.c: 139: UARTTransmitText("\n\r");
  6635  000A44  0EF7               	movlw	low (STR_34+48)
  6636  000A46  0100               	movlb	0	; () banked
  6637  000A48  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6638  000A4A  0E7C               	movlw	high (STR_34+48)
  6639  000A4C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6640  000A4E  EC18  F01F         	call	_UARTTransmitText	;wreg free
  6641  000A52  0012               	return		;funcret
  6642  000A54                     __end_of_ethernet_rxGetNewFrame:
  6643                           	opt stack 0
  6644                           tblptru	equ	0xFF8
  6645                           tblptrh	equ	0xFF7
  6646                           tblptrl	equ	0xFF6
  6647                           tablat	equ	0xFF5
  6648                           prodh	equ	0xFF4
  6649                           prodl	equ	0xFF3
  6650                           intcon	equ	0xFF2
  6651                           intcon3	equ	0xFF0
  6652                           postinc0	equ	0xFEE
  6653                           plusw0	equ	0xFEB
  6654                           fsr0h	equ	0xFEA
  6655                           fsr0l	equ	0xFE9
  6656                           wreg	equ	0xFE8
  6657                           indf1	equ	0xFE7
  6658                           postinc1	equ	0xFE6
  6659                           postdec1	equ	0xFE5
  6660                           plusw1	equ	0xFE3
  6661                           fsr1h	equ	0xFE2
  6662                           fsr1l	equ	0xFE1
  6663                           indf2	equ	0xFDF
  6664                           postinc2	equ	0xFDE
  6665                           postdec2	equ	0xFDD
  6666                           plusw2	equ	0xFDB
  6667                           fsr2h	equ	0xFDA
  6668                           fsr2l	equ	0xFD9
  6669                           status	equ	0xFD8
  6670                           
  6671 ;; *************** function _ipv4_handleNewPacket *****************
  6672 ;; Defined at:
  6673 ;;		line 149 in file "src/stack/protocols/ipv4.c"
  6674 ;; Parameters:    Size  Location     Type
  6675 ;;  frame           2   58[BANK0 ] PTR struct ethernetFrame
  6676 ;;		 -> stack.ethernet(15), stack(113), 
  6677 ;; Auto vars:     Size  Location     Type
  6678 ;;		None
  6679 ;; Return value:  Size  Location     Type
  6680 ;;                  1    wreg      void 
  6681 ;; Registers used:
  6682 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6683 ;; Tracked objects:
  6684 ;;		On entry : 0/0
  6685 ;;		On exit  : 0/0
  6686 ;;		Unchanged: 0/0
  6687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6688 ;;      Params:         0       2       0       0       0       0       0       0       0
  6689 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6690 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6691 ;;      Totals:         0       2       0       0       0       0       0       0       0
  6692 ;;Total ram usage:        2 bytes
  6693 ;; Hardware stack levels used:    1
  6694 ;; Hardware stack levels required when called:    9
  6695 ;; This function calls:
  6696 ;;		_UARTTransmitText
  6697 ;;		_ethernetController_dropPacket
  6698 ;; This function is called by:
  6699 ;;		_ethernet_rxGetNewFrame
  6700 ;; This function uses a non-reentrant model
  6701 ;;
  6702                           
  6703                           	psect	text14
  6704  0045E6                     __ptext14:
  6705                           	opt stack 0
  6706  0045E6                     _ipv4_handleNewPacket:
  6707                           	opt stack 19
  6708                           
  6709                           ;ipv4.c: 150: UARTTransmitText("[PACKET DROPPED]");
  6710                           
  6711                           ;incstack = 0
  6712  0045E6  0ED7               	movlw	low STR_69
  6713  0045E8  0100               	movlb	0	; () banked
  6714  0045EA  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6715  0045EC  0E7E               	movlw	high STR_69
  6716  0045EE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6717  0045F0  EC18  F01F         	call	_UARTTransmitText	;wreg free
  6718                           
  6719                           ;ipv4.c: 151: ethernetController_dropPacket(frame);
  6720  0045F4  C09A  F072         	movff	ipv4_handleNewPacket@frame,ethernetController_dropPacket@frame
  6721  0045F8  C09B  F073         	movff	ipv4_handleNewPacket@frame+1,ethernetController_dropPacket@frame+1
  6722  0045FC  ECBA  F020         	call	_ethernetController_dropPacket	;wreg free
  6723  004600  0012               	return		;funcret
  6724  004602                     __end_of_ipv4_handleNewPacket:
  6725                           	opt stack 0
  6726                           tblptru	equ	0xFF8
  6727                           tblptrh	equ	0xFF7
  6728                           tblptrl	equ	0xFF6
  6729                           tablat	equ	0xFF5
  6730                           prodh	equ	0xFF4
  6731                           prodl	equ	0xFF3
  6732                           intcon	equ	0xFF2
  6733                           intcon3	equ	0xFF0
  6734                           postinc0	equ	0xFEE
  6735                           plusw0	equ	0xFEB
  6736                           fsr0h	equ	0xFEA
  6737                           fsr0l	equ	0xFE9
  6738                           wreg	equ	0xFE8
  6739                           indf1	equ	0xFE7
  6740                           postinc1	equ	0xFE6
  6741                           postdec1	equ	0xFE5
  6742                           plusw1	equ	0xFE3
  6743                           fsr1h	equ	0xFE2
  6744                           fsr1l	equ	0xFE1
  6745                           indf2	equ	0xFDF
  6746                           postinc2	equ	0xFDE
  6747                           postdec2	equ	0xFDD
  6748                           plusw2	equ	0xFDB
  6749                           fsr2h	equ	0xFDA
  6750                           fsr2l	equ	0xFD9
  6751                           status	equ	0xFD8
  6752                           
  6753 ;; *************** function _ethernetController_updateNextPacketPointer *****************
  6754 ;; Defined at:
  6755 ;;		line 327 in file "src/enc424j600/ENC424J600.c"
  6756 ;; Parameters:    Size  Location     Type
  6757 ;;		None
  6758 ;; Auto vars:     Size  Location     Type
  6759 ;;  nextPktPoint    2   21[BANK0 ] unsigned int 
  6760 ;;  newPointerH     1   25[BANK0 ] unsigned char 
  6761 ;;  newPointerL     1   24[BANK0 ] unsigned char 
  6762 ;;  opcode          1   23[BANK0 ] unsigned char 
  6763 ;; Return value:  Size  Location     Type
  6764 ;;                  1    wreg      void 
  6765 ;; Registers used:
  6766 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6767 ;; Tracked objects:
  6768 ;;		On entry : 0/0
  6769 ;;		On exit  : 0/0
  6770 ;;		Unchanged: 0/0
  6771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6772 ;;      Params:         0       0       0       0       0       0       0       0       0
  6773 ;;      Locals:         0       5       0       0       0       0       0       0       0
  6774 ;;      Temps:          0       6       0       0       0       0       0       0       0
  6775 ;;      Totals:         0      11       0       0       0       0       0       0       0
  6776 ;;Total ram usage:       11 bytes
  6777 ;; Hardware stack levels used:    1
  6778 ;; Hardware stack levels required when called:    7
  6779 ;; This function calls:
  6780 ;;		_ENC424J600_getNextPacketPointer
  6781 ;;		_ENC424J600_readSPI
  6782 ;;		_ENC424J600_setERXDATAReadPointer
  6783 ;;		_ENC424J600_setNextPacketPointer
  6784 ;;		_ENC424J600_writeSPI
  6785 ;; This function is called by:
  6786 ;;		_ethernet_rxGetNewFrame
  6787 ;; This function uses a non-reentrant model
  6788 ;;
  6789                           
  6790                           	psect	text15
  6791  003916                     __ptext15:
  6792                           	opt stack 0
  6793  003916                     _ethernetController_updateNextPacketPointer:
  6794                           	opt stack 21
  6795                           
  6796                           ;ENC424J600.c: 328: uint16_t nextPktPointer;
  6797                           ;ENC424J600.c: 329: uint8_t opcode;
  6798                           ;ENC424J600.c: 330: uint8_t newPointerL, newPointerH;
  6799                           ;ENC424J600.c: 331: nextPktPointer = ENC424J600_getNextPacketPointer();
  6800                           
  6801                           ;incstack = 0
  6802  003916  EC66  F023         	call	_ENC424J600_getNextPacketPointer	;wreg free
  6803  00391A  C060  F075         	movff	?_ENC424J600_getNextPacketPointer,ethernetController_updateNextPacketPointer@next
      +                          PktPointer
  6804  00391E  C061  F076         	movff	?_ENC424J600_getNextPacketPointer+1,ethernetController_updateNextPacketPointer@ne
      +                          xtPktPointer+1
  6805                           
  6806                           ;ENC424J600.c: 332: ENC424J600_setERXDATAReadPointer(nextPktPointer);
  6807  003922  C075  F06A         	movff	ethernetController_updateNextPacketPointer@nextPktPointer,ENC424J600_setERXDATARe
      +                          adPointer@addr
  6808  003926  C076  F06B         	movff	ethernetController_updateNextPacketPointer@nextPktPointer+1,ENC424J600_setERXDATA
      +                          ReadPointer@addr+1
  6809  00392A  ECF6  F020         	call	_ENC424J600_setERXDATAReadPointer	;wreg free
  6810                           
  6811                           ;ENC424J600.c: 333: opcode = 0x2C;
  6812  00392E  0E2C               	movlw	44
  6813  003930  0100               	movlb	0	; () banked
  6814  003932  6F77               	movwf	ethernetController_updateNextPacketPointer@opcode& (0+255),b
  6815                           
  6816                           ; BSR set to: 0
  6817                           ;ENC424J600.c: 334: PORTBbits.RB4=0;
  6818  003934  9881               	bcf	3969,4,c	;volatile
  6819                           
  6820                           ; BSR set to: 0
  6821                           ;ENC424J600.c: 335: ENC424J600_writeSPI(&opcode);
  6822  003936  0E77               	movlw	low ethernetController_updateNextPacketPointer@opcode
  6823  003938  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
  6824  00393A  0E00               	movlw	high ethernetController_updateNextPacketPointer@opcode
  6825  00393C  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
  6826  00393E  ECB5  F01E         	call	_ENC424J600_writeSPI	;wreg free
  6827                           
  6828                           ;ENC424J600.c: 336: ENC424J600_readSPI(&newPointerL);
  6829  003942  0E78               	movlw	low ethernetController_updateNextPacketPointer@newPointerL
  6830  003944  0100               	movlb	0	; () banked
  6831  003946  6F60               	movwf	ENC424J600_readSPI@data& (0+255),b
  6832  003948  0E00               	movlw	high ethernetController_updateNextPacketPointer@newPointerL
  6833  00394A  6F61               	movwf	(ENC424J600_readSPI@data+1)& (0+255),b
  6834  00394C  ECE5  F01D         	call	_ENC424J600_readSPI	;wreg free
  6835                           
  6836                           ;ENC424J600.c: 337: ENC424J600_readSPI(&newPointerH);
  6837  003950  0E79               	movlw	low ethernetController_updateNextPacketPointer@newPointerH
  6838  003952  0100               	movlb	0	; () banked
  6839  003954  6F60               	movwf	ENC424J600_readSPI@data& (0+255),b
  6840  003956  0E00               	movlw	high ethernetController_updateNextPacketPointer@newPointerH
  6841  003958  6F61               	movwf	(ENC424J600_readSPI@data+1)& (0+255),b
  6842  00395A  ECE5  F01D         	call	_ENC424J600_readSPI	;wreg free
  6843                           
  6844                           ;ENC424J600.c: 338: PORTBbits.RB4=1;
  6845  00395E  8881               	bsf	3969,4,c	;volatile
  6846                           
  6847                           ;ENC424J600.c: 340: ENC424J600_setNextPacketPointer((uint16_t) ((newPointerL & (unsigned
      +                          ) 0x00ff) | ((unsigned) (newPointerH << 8)&(unsigned) 0xff00)));
  6848  003960  0E00               	movlw	0
  6849  003962  0100               	movlb	0	; () banked
  6850  003964  6F6F               	movwf	??_ethernetController_updateNextPacketPointer& (0+255),b
  6851  003966  0EFF               	movlw	255
  6852  003968  6F70               	movwf	(??_ethernetController_updateNextPacketPointer+1)& (0+255),b
  6853  00396A  5179               	movf	ethernetController_updateNextPacketPointer@newPointerH& (0+255),w,b
  6854  00396C  6F72               	movwf	(??_ethernetController_updateNextPacketPointer+3)& (0+255),b
  6855  00396E  6B71               	clrf	(??_ethernetController_updateNextPacketPointer+2)& (0+255),b
  6856  003970  516F               	movf	??_ethernetController_updateNextPacketPointer& (0+255),w,b
  6857  003972  1771               	andwf	(??_ethernetController_updateNextPacketPointer+2)& (0+255),f,b
  6858  003974  5170               	movf	(??_ethernetController_updateNextPacketPointer+1)& (0+255),w,b
  6859  003976  1772               	andwf	(??_ethernetController_updateNextPacketPointer+3)& (0+255),f,b
  6860  003978  5178               	movf	ethernetController_updateNextPacketPointer@newPointerL& (0+255),w,b
  6861  00397A  6F73               	movwf	(??_ethernetController_updateNextPacketPointer+4)& (0+255),b
  6862  00397C  6B74               	clrf	(??_ethernetController_updateNextPacketPointer+5)& (0+255),b
  6863  00397E  5171               	movf	(??_ethernetController_updateNextPacketPointer+2)& (0+255),w,b
  6864  003980  1173               	iorwf	(??_ethernetController_updateNextPacketPointer+4)& (0+255),w,b
  6865  003982  6F60               	movwf	ENC424J600_setNextPacketPointer@ptr& (0+255),b
  6866  003984  5172               	movf	(??_ethernetController_updateNextPacketPointer+3)& (0+255),w,b
  6867  003986  1174               	iorwf	(??_ethernetController_updateNextPacketPointer+5)& (0+255),w,b
  6868  003988  6F61               	movwf	(ENC424J600_setNextPacketPointer@ptr+1)& (0+255),b
  6869  00398A  EC6B  F023         	call	_ENC424J600_setNextPacketPointer	;wreg free
  6870  00398E  0012               	return		;funcret
  6871  003990                     __end_of_ethernetController_updateNextPacketPointer:
  6872                           	opt stack 0
  6873                           tblptru	equ	0xFF8
  6874                           tblptrh	equ	0xFF7
  6875                           tblptrl	equ	0xFF6
  6876                           tablat	equ	0xFF5
  6877                           prodh	equ	0xFF4
  6878                           prodl	equ	0xFF3
  6879                           intcon	equ	0xFF2
  6880                           intcon3	equ	0xFF0
  6881                           postinc0	equ	0xFEE
  6882                           plusw0	equ	0xFEB
  6883                           fsr0h	equ	0xFEA
  6884                           fsr0l	equ	0xFE9
  6885                           wreg	equ	0xFE8
  6886                           indf1	equ	0xFE7
  6887                           postinc1	equ	0xFE6
  6888                           postdec1	equ	0xFE5
  6889                           plusw1	equ	0xFE3
  6890                           fsr1h	equ	0xFE2
  6891                           fsr1l	equ	0xFE1
  6892                           indf2	equ	0xFDF
  6893                           postinc2	equ	0xFDE
  6894                           postdec2	equ	0xFDD
  6895                           plusw2	equ	0xFDB
  6896                           fsr2h	equ	0xFDA
  6897                           fsr2l	equ	0xFD9
  6898                           status	equ	0xFD8
  6899                           
  6900 ;; *************** function _ethernetController_getRSV *****************
  6901 ;; Defined at:
  6902 ;;		line 292 in file "src/enc424j600/ENC424J600.c"
  6903 ;; Parameters:    Size  Location     Type
  6904 ;;  address         2   17[BANK0 ] unsigned int 
  6905 ;; Auto vars:     Size  Location     Type
  6906 ;;  i               1   23[BANK0 ] unsigned char 
  6907 ;;  opcode          1   22[BANK0 ] unsigned char 
  6908 ;; Return value:  Size  Location     Type
  6909 ;;                  5   17[BANK0 ] struct RSV
  6910 ;; Registers used:
  6911 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6912 ;; Tracked objects:
  6913 ;;		On entry : 0/0
  6914 ;;		On exit  : 0/0
  6915 ;;		Unchanged: 0/0
  6916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6917 ;;      Params:         0       5       0       0       0       0       0       0       0
  6918 ;;      Locals:         0       2       0       0       0       0       0       0       0
  6919 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6920 ;;      Totals:         0       7       0       0       0       0       0       0       0
  6921 ;;Total ram usage:        7 bytes
  6922 ;; Hardware stack levels used:    1
  6923 ;; Hardware stack levels required when called:    7
  6924 ;; This function calls:
  6925 ;;		_ENC424J600_readSPI
  6926 ;;		_ENC424J600_setERXDATAReadPointer
  6927 ;;		_ENC424J600_updateReceiveStatusVector
  6928 ;;		_ENC424J600_writeSPI
  6929 ;; This function is called by:
  6930 ;;		_ethernet_rxGetNewFrame
  6931 ;; This function uses a non-reentrant model
  6932 ;;
  6933                           
  6934                           	psect	text16
  6935  003990                     __ptext16:
  6936                           	opt stack 0
  6937  003990                     _ethernetController_getRSV:
  6938                           	opt stack 21
  6939                           
  6940                           ;ENC424J600.c: 293: uint8_t static temp[6];
  6941                           ;ENC424J600.c: 294: ENC424J600_setERXDATAReadPointer(address + 2);
  6942                           
  6943                           ;incstack = 0
  6944  003990  0E02               	movlw	2
  6945  003992  0100               	movlb	0	; () banked
  6946  003994  2571               	addwf	ethernetController_getRSV@address& (0+255),w,b
  6947  003996  6F6A               	movwf	ENC424J600_setERXDATAReadPointer@addr& (0+255),b
  6948  003998  0E00               	movlw	0
  6949  00399A  2172               	addwfc	(ethernetController_getRSV@address+1)& (0+255),w,b
  6950  00399C  6F6B               	movwf	(ENC424J600_setERXDATAReadPointer@addr+1)& (0+255),b
  6951  00399E  ECF6  F020         	call	_ENC424J600_setERXDATAReadPointer	;wreg free
  6952                           
  6953                           ;ENC424J600.c: 295: uint8_t opcode = 0x2C;
  6954  0039A2  0E2C               	movlw	44
  6955  0039A4  0100               	movlb	0	; () banked
  6956  0039A6  6F76               	movwf	ethernetController_getRSV@opcode& (0+255),b
  6957                           
  6958                           ; BSR set to: 0
  6959                           ;ENC424J600.c: 296: PORTBbits.RB4=0;
  6960  0039A8  9881               	bcf	3969,4,c	;volatile
  6961                           
  6962                           ; BSR set to: 0
  6963                           ;ENC424J600.c: 297: ENC424J600_writeSPI(&opcode);
  6964  0039AA  0E76               	movlw	low ethernetController_getRSV@opcode
  6965  0039AC  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
  6966  0039AE  0E00               	movlw	high ethernetController_getRSV@opcode
  6967  0039B0  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
  6968  0039B2  ECB5  F01E         	call	_ENC424J600_writeSPI	;wreg free
  6969                           
  6970                           ;ENC424J600.c: 298: for (uint8_t i = 0; i < 6; i++) {
  6971  0039B6  0E00               	movlw	0
  6972  0039B8  0100               	movlb	0	; () banked
  6973  0039BA  6F77               	movwf	ethernetController_getRSV@i& (0+255),b
  6974  0039BC                     l7870:
  6975                           
  6976                           ; BSR set to: 0
  6977  0039BC  0E05               	movlw	5
  6978  0039BE  6577               	cpfsgt	ethernetController_getRSV@i& (0+255),b
  6979  0039C0  D001               	goto	l149
  6980  0039C2  D00D               	goto	u9720
  6981  0039C4                     l149:
  6982                           
  6983                           ; BSR set to: 0
  6984                           ;ENC424J600.c: 299: ENC424J600_readSPI(&temp[i]);
  6985                           
  6986                           ; BSR set to: 0
  6987  0039C4  5177               	movf	ethernetController_getRSV@i& (0+255),w,b
  6988  0039C6  0D01               	mullw	1
  6989  0039C8  0EB7               	movlw	low ethernetController_getRSV@temp
  6990  0039CA  24F3               	addwf	prodl,w,c
  6991  0039CC  6F60               	movwf	ENC424J600_readSPI@data& (0+255),b
  6992  0039CE  0E01               	movlw	high ethernetController_getRSV@temp
  6993  0039D0  20F4               	addwfc	prodh,w,c
  6994  0039D2  6F61               	movwf	(ENC424J600_readSPI@data+1)& (0+255),b
  6995  0039D4  ECE5  F01D         	call	_ENC424J600_readSPI	;wreg free
  6996  0039D8  0100               	movlb	0	; () banked
  6997  0039DA  2B77               	incf	ethernetController_getRSV@i& (0+255),f,b
  6998  0039DC  D7EF               	goto	l7870
  6999  0039DE                     u9720:
  7000                           
  7001                           ; BSR set to: 0
  7002                           ;ENC424J600.c: 300: }
  7003                           ;ENC424J600.c: 301: PORTBbits.RB4=1;
  7004  0039DE  8881               	bsf	3969,4,c	;volatile
  7005                           
  7006                           ; BSR set to: 0
  7007                           ;ENC424J600.c: 302: return ENC424J600_updateReceiveStatusVector(&temp[0]);
  7008  0039E0  0EB7               	movlw	low ethernetController_getRSV@temp
  7009  0039E2  6F60               	movwf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),b
  7010  0039E4  0E01               	movlw	high ethernetController_getRSV@temp
  7011  0039E6  6F61               	movwf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),b
  7012  0039E8  ECB4  F00A         	call	_ENC424J600_updateReceiveStatusVector	;wreg free
  7013  0039EC  CFE9 FFD9          	movff	fsr0l,fsr2l
  7014  0039F0  CFEA FFDA          	movff	fsr0h,fsr2h
  7015  0039F4  EE00  F071         	lfsr	0,?_ethernetController_getRSV
  7016  0039F8  0E04               	movlw	4
  7017  0039FA                     u9731:
  7018  0039FA  CFDB FFEB          	movff	plusw2,plusw0
  7019  0039FE  06E8               	decf	wreg,f,c
  7020  003A00  E2FC               	bc	u9731
  7021  003A02  0012               	return	
  7022  003A04                     __end_of_ethernetController_getRSV:
  7023                           	opt stack 0
  7024                           tblptru	equ	0xFF8
  7025                           tblptrh	equ	0xFF7
  7026                           tblptrl	equ	0xFF6
  7027                           tablat	equ	0xFF5
  7028                           prodh	equ	0xFF4
  7029                           prodl	equ	0xFF3
  7030                           intcon	equ	0xFF2
  7031                           intcon3	equ	0xFF0
  7032                           postinc0	equ	0xFEE
  7033                           plusw0	equ	0xFEB
  7034                           fsr0h	equ	0xFEA
  7035                           fsr0l	equ	0xFE9
  7036                           wreg	equ	0xFE8
  7037                           indf1	equ	0xFE7
  7038                           postinc1	equ	0xFE6
  7039                           postdec1	equ	0xFE5
  7040                           plusw1	equ	0xFE3
  7041                           fsr1h	equ	0xFE2
  7042                           fsr1l	equ	0xFE1
  7043                           indf2	equ	0xFDF
  7044                           postinc2	equ	0xFDE
  7045                           postdec2	equ	0xFDD
  7046                           plusw2	equ	0xFDB
  7047                           fsr2h	equ	0xFDA
  7048                           fsr2l	equ	0xFD9
  7049                           status	equ	0xFD8
  7050                           
  7051 ;; *************** function _ENC424J600_updateReceiveStatusVector *****************
  7052 ;; Defined at:
  7053 ;;		line 713 in file "src/enc424j600/ENC424J600.c"
  7054 ;; Parameters:    Size  Location     Type
  7055 ;;  rsv             2    0[BANK0 ] PTR unsigned char 
  7056 ;;		 -> ethernetController_getRSV@temp(6), 
  7057 ;; Auto vars:     Size  Location     Type
  7058 ;;  receiveStatu    5   12[BANK0 ] struct RSV
  7059 ;; Return value:  Size  Location     Type
  7060 ;;                  5    0[BANK0 ] struct RSV
  7061 ;; Registers used:
  7062 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
  7063 ;; Tracked objects:
  7064 ;;		On entry : 0/0
  7065 ;;		On exit  : 0/0
  7066 ;;		Unchanged: 0/0
  7067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7068 ;;      Params:         0       5       0       0       0       0       0       0       0
  7069 ;;      Locals:         0       5       0       0       0       0       0       0       0
  7070 ;;      Temps:          0       7       0       0       0       0       0       0       0
  7071 ;;      Totals:         0      17       0       0       0       0       0       0       0
  7072 ;;Total ram usage:       17 bytes
  7073 ;; Hardware stack levels used:    1
  7074 ;; Hardware stack levels required when called:    4
  7075 ;; This function calls:
  7076 ;;		Nothing
  7077 ;; This function is called by:
  7078 ;;		_ethernetController_getRSV
  7079 ;; This function uses a non-reentrant model
  7080 ;;
  7081                           
  7082                           	psect	text17
  7083  001568                     __ptext17:
  7084                           	opt stack 0
  7085  001568                     _ENC424J600_updateReceiveStatusVector:
  7086                           	opt stack 23
  7087                           
  7088                           ;ENC424J600.c: 714: RSV_t receiveStatusVector;
  7089                           ;ENC424J600.c: 717: receiveStatusVector.length = (uint16_t) ((*(rsv + 0)) | (uint16_t) (
      +                          ((*(rsv + 1)) << 8)&0xff00));
  7090                           
  7091                           ;incstack = 0
  7092  001568  0E00               	movlw	0
  7093  00156A  0100               	movlb	0	; () banked
  7094  00156C  6F65               	movwf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7095  00156E  0EFF               	movlw	255
  7096  001570  6F66               	movwf	(??_ENC424J600_updateReceiveStatusVector+1)& (0+255),b
  7097  001572  EE20 F001          	lfsr	2,1
  7098  001576  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7099  001578  26D9               	addwf	fsr2l,f,c
  7100  00157A  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7101  00157C  22DA               	addwfc	fsr2h,f,c
  7102  00157E  50DF               	movf	indf2,w,c
  7103  001580  6F67               	movwf	(??_ENC424J600_updateReceiveStatusVector+2)& (0+255),b
  7104  001582  5167               	movf	(??_ENC424J600_updateReceiveStatusVector+2)& (0+255),w,b
  7105  001584  6F69               	movwf	(??_ENC424J600_updateReceiveStatusVector+4)& (0+255),b
  7106  001586  6B68               	clrf	(??_ENC424J600_updateReceiveStatusVector+3)& (0+255),b
  7107  001588  5165               	movf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7108  00158A  1768               	andwf	(??_ENC424J600_updateReceiveStatusVector+3)& (0+255),f,b
  7109  00158C  5166               	movf	(??_ENC424J600_updateReceiveStatusVector+1)& (0+255),w,b
  7110  00158E  1769               	andwf	(??_ENC424J600_updateReceiveStatusVector+4)& (0+255),f,b
  7111  001590  C060  FFD9         	movff	ENC424J600_updateReceiveStatusVector@rsv,fsr2l
  7112  001594  C061  FFDA         	movff	ENC424J600_updateReceiveStatusVector@rsv+1,fsr2h
  7113  001598  50DF               	movf	indf2,w,c
  7114  00159A  6F6A               	movwf	(??_ENC424J600_updateReceiveStatusVector+5)& (0+255),b
  7115  00159C  6B6B               	clrf	(??_ENC424J600_updateReceiveStatusVector+6)& (0+255),b
  7116  00159E  5168               	movf	(??_ENC424J600_updateReceiveStatusVector+3)& (0+255),w,b
  7117  0015A0  116A               	iorwf	(??_ENC424J600_updateReceiveStatusVector+5)& (0+255),w,b
  7118  0015A2  6F6C               	movwf	ENC424J600_updateReceiveStatusVector@receiveStatusVector& (0+255),b
  7119  0015A4  5169               	movf	(??_ENC424J600_updateReceiveStatusVector+4)& (0+255),w,b
  7120  0015A6  116B               	iorwf	(??_ENC424J600_updateReceiveStatusVector+6)& (0+255),w,b
  7121  0015A8  6F6D               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+1)& (0+255),b
  7122                           
  7123                           ;ENC424J600.c: 719: receiveStatusVector.packetPreviouslyIgnored = (uint8_t) (*(rsv + 2) 
      +                          & 0b00000001) != 0 ? 1 : 0;
  7124  0015AA  EE20 F002          	lfsr	2,2
  7125  0015AE  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7126  0015B0  26D9               	addwf	fsr2l,f,c
  7127  0015B2  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7128  0015B4  22DA               	addwfc	fsr2h,f,c
  7129  0015B6  A0DF               	btfss	indf2,0,c
  7130  0015B8  D003               	goto	u9010
  7131  0015BA  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7132  0015BC  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7133  0015BE  D002               	goto	u9028
  7134  0015C0                     u9010:
  7135  0015C0  0100               	movlb	0	; () banked
  7136  0015C2  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7137  0015C4                     u9028:
  7138  0015C4  516E               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  7139  0015C6  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7140  0015C8  0BFE               	andlw	-2
  7141  0015CA  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7142  0015CC  6F6E               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  7143                           
  7144                           ;ENC424J600.c: 720: receiveStatusVector.carrierEventPreviouslySeen = (uint8_t) (*(rsv + 
      +                          2) & 0b00000100) != 0 ? 1 : 0;
  7145  0015CE  EE20 F002          	lfsr	2,2
  7146  0015D2  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7147  0015D4  26D9               	addwf	fsr2l,f,c
  7148  0015D6  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7149  0015D8  22DA               	addwfc	fsr2h,f,c
  7150  0015DA  A4DF               	btfss	indf2,2,c
  7151  0015DC  D003               	goto	u9030
  7152  0015DE  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7153  0015E0  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7154  0015E2  D002               	goto	u9048
  7155  0015E4                     u9030:
  7156  0015E4  0100               	movlb	0	; () banked
  7157  0015E6  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7158  0015E8                     u9048:
  7159  0015E8  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7160  0015EA  516E               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  7161  0015EC  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7162  0015EE  0BFD               	andlw	-3
  7163  0015F0  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7164  0015F2  6F6E               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  7165                           
  7166                           ;ENC424J600.c: 721: receiveStatusVector.CRCError = (uint8_t) (*(rsv + 2) & 0b00010000) !
      +                          = 0 ? 1 : 0;
  7167  0015F4  EE20 F002          	lfsr	2,2
  7168  0015F8  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7169  0015FA  26D9               	addwf	fsr2l,f,c
  7170  0015FC  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7171  0015FE  22DA               	addwfc	fsr2h,f,c
  7172  001600  A8DF               	btfss	indf2,4,c
  7173  001602  D003               	goto	u9050
  7174  001604  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7175  001606  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7176  001608  D002               	goto	u9068
  7177  00160A                     u9050:
  7178  00160A  0100               	movlb	0	; () banked
  7179  00160C  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7180  00160E                     u9068:
  7181  00160E  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7182  001610  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7183  001612  516E               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  7184  001614  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7185  001616  0BFB               	andlw	-5
  7186  001618  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7187  00161A  6F6E               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  7188                           
  7189                           ;ENC424J600.c: 722: receiveStatusVector.lengthCheckError = (uint8_t) (*(rsv + 2) & 0b001
      +                          00000) != 0 ? 1 : 0;
  7190  00161C  EE20 F002          	lfsr	2,2
  7191  001620  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7192  001622  26D9               	addwf	fsr2l,f,c
  7193  001624  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7194  001626  22DA               	addwfc	fsr2h,f,c
  7195  001628  AADF               	btfss	indf2,5,c
  7196  00162A  D003               	goto	u9070
  7197  00162C  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7198  00162E  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7199  001630  D002               	goto	u9088
  7200  001632                     u9070:
  7201  001632  0100               	movlb	0	; () banked
  7202  001634  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7203  001636                     u9088:
  7204  001636  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7205  001638  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7206  00163A  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7207  00163C  516E               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  7208  00163E  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7209  001640  0BF7               	andlw	-9
  7210  001642  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7211  001644  6F6E               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  7212                           
  7213                           ;ENC424J600.c: 723: receiveStatusVector.lengthOutOfRange = (uint8_t) (*(rsv + 2) & 0b010
      +                          00000) != 0 ? 1 : 0;
  7214  001646  EE20 F002          	lfsr	2,2
  7215  00164A  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7216  00164C  26D9               	addwf	fsr2l,f,c
  7217  00164E  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7218  001650  22DA               	addwfc	fsr2h,f,c
  7219  001652  ACDF               	btfss	indf2,6,c
  7220  001654  D003               	goto	u9090
  7221  001656  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7222  001658  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7223  00165A  D002               	goto	u9108
  7224  00165C                     u9090:
  7225  00165C  0100               	movlb	0	; () banked
  7226  00165E  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7227  001660                     u9108:
  7228  001660  3B65               	swapf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7229  001662  516E               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  7230  001664  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7231  001666  0BEF               	andlw	-17
  7232  001668  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7233  00166A  6F6E               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  7234                           
  7235                           ;ENC424J600.c: 724: receiveStatusVector.receivedOk = (uint8_t) (*(rsv + 2) & 0b10000000)
      +                           != 0 ? 1 : 0;
  7236  00166C  EE20 F002          	lfsr	2,2
  7237  001670  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7238  001672  26D9               	addwf	fsr2l,f,c
  7239  001674  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7240  001676  22DA               	addwfc	fsr2h,f,c
  7241  001678  AEDF               	btfss	indf2,7,c
  7242  00167A  D003               	goto	u9110
  7243  00167C  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7244  00167E  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7245  001680  D002               	goto	u9128
  7246  001682                     u9110:
  7247  001682  0100               	movlb	0	; () banked
  7248  001684  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7249  001686                     u9128:
  7250  001686  3B65               	swapf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7251  001688  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7252  00168A  516E               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  7253  00168C  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7254  00168E  0BDF               	andlw	-33
  7255  001690  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7256  001692  6F6E               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  7257                           
  7258                           ;ENC424J600.c: 726: receiveStatusVector.multicast = (uint8_t) (*(rsv + 3) & 0b00000001) 
      +                          != 0 ? 1 : 0;
  7259  001694  EE20 F003          	lfsr	2,3
  7260  001698  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7261  00169A  26D9               	addwf	fsr2l,f,c
  7262  00169C  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7263  00169E  22DA               	addwfc	fsr2h,f,c
  7264  0016A0  A0DF               	btfss	indf2,0,c
  7265  0016A2  D003               	goto	u9130
  7266  0016A4  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7267  0016A6  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7268  0016A8  D002               	goto	u9148
  7269  0016AA                     u9130:
  7270  0016AA  0100               	movlb	0	; () banked
  7271  0016AC  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7272  0016AE                     u9148:
  7273  0016AE  3B65               	swapf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7274  0016B0  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7275  0016B2  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7276  0016B4  516E               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  7277  0016B6  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7278  0016B8  0BBF               	andlw	-65
  7279  0016BA  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7280  0016BC  6F6E               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  7281                           
  7282                           ;ENC424J600.c: 727: receiveStatusVector.broadcast = (uint8_t) (*(rsv + 3) & 0b00000010) 
      +                          != 0 ? 1 : 0;
  7283  0016BE  EE20 F003          	lfsr	2,3
  7284  0016C2  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7285  0016C4  26D9               	addwf	fsr2l,f,c
  7286  0016C6  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7287  0016C8  22DA               	addwfc	fsr2h,f,c
  7288  0016CA  A2DF               	btfss	indf2,1,c
  7289  0016CC  D003               	goto	u9150
  7290  0016CE  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7291  0016D0  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7292  0016D2  D002               	goto	u9168
  7293  0016D4                     u9150:
  7294  0016D4  0100               	movlb	0	; () banked
  7295  0016D6  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7296  0016D8                     u9168:
  7297  0016D8  3365               	rrcf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7298  0016DA  3365               	rrcf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7299  0016DC  516E               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  7300  0016DE  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7301  0016E0  0B7F               	andlw	-129
  7302  0016E2  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7303  0016E4  6F6E               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  7304                           
  7305                           ;ENC424J600.c: 728: receiveStatusVector.controlFrame = (uint8_t) (*(rsv + 3) & 0b0000100
      +                          0) != 0 ? 1 : 0;
  7306  0016E6  EE20 F003          	lfsr	2,3
  7307  0016EA  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7308  0016EC  26D9               	addwf	fsr2l,f,c
  7309  0016EE  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7310  0016F0  22DA               	addwfc	fsr2h,f,c
  7311  0016F2  A6DF               	btfss	indf2,3,c
  7312  0016F4  D003               	goto	u9170
  7313  0016F6  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7314  0016F8  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7315  0016FA  D002               	goto	u9188
  7316  0016FC                     u9170:
  7317  0016FC  0100               	movlb	0	; () banked
  7318  0016FE  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7319  001700                     u9188:
  7320  001700  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7321  001702  516F               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  7322  001704  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7323  001706  0BFD               	andlw	-3
  7324  001708  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7325  00170A  6F6F               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  7326                           
  7327                           ;ENC424J600.c: 729: receiveStatusVector.pauseFrame = (uint8_t) (*(rsv + 3) & 0b00010000)
      +                           != 0 ? 1 : 0;
  7328  00170C  EE20 F003          	lfsr	2,3
  7329  001710  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7330  001712  26D9               	addwf	fsr2l,f,c
  7331  001714  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7332  001716  22DA               	addwfc	fsr2h,f,c
  7333  001718  A8DF               	btfss	indf2,4,c
  7334  00171A  D003               	goto	u9190
  7335  00171C  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7336  00171E  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7337  001720  D002               	goto	u9208
  7338  001722                     u9190:
  7339  001722  0100               	movlb	0	; () banked
  7340  001724  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7341  001726                     u9208:
  7342  001726  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7343  001728  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7344  00172A  516F               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  7345  00172C  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7346  00172E  0BFB               	andlw	-5
  7347  001730  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7348  001732  6F6F               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  7349                           
  7350                           ;ENC424J600.c: 730: receiveStatusVector.unknownOpcode = (uint8_t) (*(rsv + 3) & 0b001000
      +                          00) != 0 ? 1 : 0;
  7351  001734  EE20 F003          	lfsr	2,3
  7352  001738  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7353  00173A  26D9               	addwf	fsr2l,f,c
  7354  00173C  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7355  00173E  22DA               	addwfc	fsr2h,f,c
  7356  001740  AADF               	btfss	indf2,5,c
  7357  001742  D003               	goto	u9210
  7358  001744  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7359  001746  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7360  001748  D002               	goto	u9228
  7361  00174A                     u9210:
  7362  00174A  0100               	movlb	0	; () banked
  7363  00174C  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7364  00174E                     u9228:
  7365  00174E  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7366  001750  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7367  001752  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7368  001754  516F               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  7369  001756  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7370  001758  0BF7               	andlw	-9
  7371  00175A  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7372  00175C  6F6F               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  7373                           
  7374                           ;ENC424J600.c: 731: receiveStatusVector.vlan = (uint8_t) (*(rsv + 3) & 0b01000000) != 0 
      +                          ? 1 : 0;
  7375  00175E  EE20 F003          	lfsr	2,3
  7376  001762  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7377  001764  26D9               	addwf	fsr2l,f,c
  7378  001766  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7379  001768  22DA               	addwfc	fsr2h,f,c
  7380  00176A  ACDF               	btfss	indf2,6,c
  7381  00176C  D003               	goto	u9230
  7382  00176E  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7383  001770  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7384  001772  D002               	goto	u9248
  7385  001774                     u9230:
  7386  001774  0100               	movlb	0	; () banked
  7387  001776  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7388  001778                     u9248:
  7389  001778  3B65               	swapf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7390  00177A  516F               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  7391  00177C  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7392  00177E  0BEF               	andlw	-17
  7393  001780  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7394  001782  6F6F               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  7395                           
  7396                           ;ENC424J600.c: 732: receiveStatusVector.runtFilter = (uint8_t) (*(rsv + 3) & 0b10000000)
      +                           != 0 ? 1 : 0;
  7397  001784  EE20 F003          	lfsr	2,3
  7398  001788  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7399  00178A  26D9               	addwf	fsr2l,f,c
  7400  00178C  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7401  00178E  22DA               	addwfc	fsr2h,f,c
  7402  001790  AEDF               	btfss	indf2,7,c
  7403  001792  D003               	goto	u9250
  7404  001794  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7405  001796  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7406  001798  D002               	goto	u9268
  7407  00179A                     u9250:
  7408  00179A  0100               	movlb	0	; () banked
  7409  00179C  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7410  00179E                     u9268:
  7411  00179E  3B65               	swapf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7412  0017A0  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7413  0017A2  516F               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  7414  0017A4  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7415  0017A6  0BDF               	andlw	-33
  7416  0017A8  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7417  0017AA  6F6F               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  7418                           
  7419                           ;ENC424J600.c: 734: receiveStatusVector.notMeFilter = (uint8_t) (*(rsv + 4) & 0b00000001
      +                          ) != 0 ? 1 : 0;
  7420  0017AC  EE20 F004          	lfsr	2,4
  7421  0017B0  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7422  0017B2  26D9               	addwf	fsr2l,f,c
  7423  0017B4  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7424  0017B6  22DA               	addwfc	fsr2h,f,c
  7425  0017B8  A0DF               	btfss	indf2,0,c
  7426  0017BA  D003               	goto	u9270
  7427  0017BC  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7428  0017BE  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7429  0017C0  D002               	goto	u9288
  7430  0017C2                     u9270:
  7431  0017C2  0100               	movlb	0	; () banked
  7432  0017C4  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7433  0017C6                     u9288:
  7434  0017C6  3B65               	swapf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7435  0017C8  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7436  0017CA  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7437  0017CC  516F               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  7438  0017CE  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7439  0017D0  0BBF               	andlw	-65
  7440  0017D2  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7441  0017D4  6F6F               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  7442                           
  7443                           ;ENC424J600.c: 735: receiveStatusVector.hashFilter = (uint8_t) (*(rsv + 4) & 0b00000010)
      +                           != 0 ? 1 : 0;
  7444  0017D6  EE20 F004          	lfsr	2,4
  7445  0017DA  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7446  0017DC  26D9               	addwf	fsr2l,f,c
  7447  0017DE  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7448  0017E0  22DA               	addwfc	fsr2h,f,c
  7449  0017E2  A2DF               	btfss	indf2,1,c
  7450  0017E4  D003               	goto	u9290
  7451  0017E6  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7452  0017E8  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7453  0017EA  D002               	goto	u9308
  7454  0017EC                     u9290:
  7455  0017EC  0100               	movlb	0	; () banked
  7456  0017EE  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7457  0017F0                     u9308:
  7458  0017F0  3365               	rrcf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7459  0017F2  3365               	rrcf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7460  0017F4  516F               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  7461  0017F6  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7462  0017F8  0B7F               	andlw	-129
  7463  0017FA  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7464  0017FC  6F6F               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  7465                           
  7466                           ;ENC424J600.c: 736: receiveStatusVector.magicFilter = (uint8_t) (*(rsv + 4) & 0b00000100
      +                          ) != 0 ? 1 : 0;
  7467  0017FE  EE20 F004          	lfsr	2,4
  7468  001802  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7469  001804  26D9               	addwf	fsr2l,f,c
  7470  001806  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7471  001808  22DA               	addwfc	fsr2h,f,c
  7472  00180A  A4DF               	btfss	indf2,2,c
  7473  00180C  D003               	goto	u9310
  7474  00180E  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7475  001810  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7476  001812  D002               	goto	u9328
  7477  001814                     u9310:
  7478  001814  0100               	movlb	0	; () banked
  7479  001816  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7480  001818                     u9328:
  7481  001818  5170               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),w,b
  7482  00181A  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7483  00181C  0BFE               	andlw	-2
  7484  00181E  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7485  001820  6F70               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),b
  7486                           
  7487                           ;ENC424J600.c: 737: receiveStatusVector.patternMatch = (uint8_t) (*(rsv + 4) & 0b0000100
      +                          0) != 0 ? 1 : 0;
  7488  001822  EE20 F004          	lfsr	2,4
  7489  001826  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7490  001828  26D9               	addwf	fsr2l,f,c
  7491  00182A  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7492  00182C  22DA               	addwfc	fsr2h,f,c
  7493  00182E  A6DF               	btfss	indf2,3,c
  7494  001830  D003               	goto	u9330
  7495  001832  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7496  001834  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7497  001836  D002               	goto	u9348
  7498  001838                     u9330:
  7499  001838  0100               	movlb	0	; () banked
  7500  00183A  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7501  00183C                     u9348:
  7502  00183C  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7503  00183E  5170               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),w,b
  7504  001840  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7505  001842  0BFD               	andlw	-3
  7506  001844  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7507  001846  6F70               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),b
  7508                           
  7509                           ;ENC424J600.c: 738: receiveStatusVector.unicast = (uint8_t) (*(rsv + 4) & 0b00010000) !=
      +                           0 ? 1 : 0;
  7510  001848  EE20 F004          	lfsr	2,4
  7511  00184C  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7512  00184E  26D9               	addwf	fsr2l,f,c
  7513  001850  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7514  001852  22DA               	addwfc	fsr2h,f,c
  7515  001854  A8DF               	btfss	indf2,4,c
  7516  001856  D003               	goto	u9350
  7517  001858  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7518  00185A  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7519  00185C  D002               	goto	u9368
  7520  00185E                     u9350:
  7521  00185E  0100               	movlb	0	; () banked
  7522  001860  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7523  001862                     u9368:
  7524  001862  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7525  001864  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7526  001866  5170               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),w,b
  7527  001868  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7528  00186A  0BFB               	andlw	-5
  7529  00186C  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7530  00186E  6F70               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),b
  7531                           
  7532                           ; BSR set to: 0
  7533                           ;ENC424J600.c: 740: return receiveStatusVector;
  7534  001870  EE20  F06C         	lfsr	2,ENC424J600_updateReceiveStatusVector@receiveStatusVector
  7535  001874  EE00  F060         	lfsr	0,?_ENC424J600_updateReceiveStatusVector
  7536  001878  0E04               	movlw	4
  7537  00187A                     u9371:
  7538  00187A  CFDB FFEB          	movff	plusw2,plusw0
  7539  00187E  06E8               	decf	wreg,f,c
  7540  001880  E2FC               	bc	u9371
  7541  001882  0012               	return	
  7542  001884                     __end_of_ENC424J600_updateReceiveStatusVector:
  7543                           	opt stack 0
  7544                           tblptru	equ	0xFF8
  7545                           tblptrh	equ	0xFF7
  7546                           tblptrl	equ	0xFF6
  7547                           tablat	equ	0xFF5
  7548                           prodh	equ	0xFF4
  7549                           prodl	equ	0xFF3
  7550                           intcon	equ	0xFF2
  7551                           intcon3	equ	0xFF0
  7552                           postinc0	equ	0xFEE
  7553                           plusw0	equ	0xFEB
  7554                           fsr0h	equ	0xFEA
  7555                           fsr0l	equ	0xFE9
  7556                           wreg	equ	0xFE8
  7557                           indf1	equ	0xFE7
  7558                           postinc1	equ	0xFE6
  7559                           postdec1	equ	0xFE5
  7560                           plusw1	equ	0xFE3
  7561                           fsr1h	equ	0xFE2
  7562                           fsr1l	equ	0xFE1
  7563                           indf2	equ	0xFDF
  7564                           postinc2	equ	0xFDE
  7565                           postdec2	equ	0xFDD
  7566                           plusw2	equ	0xFDB
  7567                           fsr2h	equ	0xFDA
  7568                           fsr2l	equ	0xFD9
  7569                           status	equ	0xFD8
  7570                           
  7571 ;; *************** function _ethernetController_getEtherTypeField *****************
  7572 ;; Defined at:
  7573 ;;		line 276 in file "src/enc424j600/ENC424J600.c"
  7574 ;; Parameters:    Size  Location     Type
  7575 ;;  field           9   15[BANK0 ] struct memoryField
  7576 ;; Auto vars:     Size  Location     Type
  7577 ;;  ethertype       2   28[BANK0 ] enum E5498
  7578 ;;  highByte        1   32[BANK0 ] unsigned char 
  7579 ;;  lowByte         1   31[BANK0 ] unsigned char 
  7580 ;;  opcode          1   30[BANK0 ] unsigned char 
  7581 ;; Return value:  Size  Location     Type
  7582 ;;                  2   15[BANK0 ] enum E5498
  7583 ;; Registers used:
  7584 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7585 ;; Tracked objects:
  7586 ;;		On entry : 0/0
  7587 ;;		On exit  : 0/0
  7588 ;;		Unchanged: 0/0
  7589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7590 ;;      Params:         0       9       0       0       0       0       0       0       0
  7591 ;;      Locals:         0       5       0       0       0       0       0       0       0
  7592 ;;      Temps:          0       4       0       0       0       0       0       0       0
  7593 ;;      Totals:         0      18       0       0       0       0       0       0       0
  7594 ;;Total ram usage:       18 bytes
  7595 ;; Hardware stack levels used:    1
  7596 ;; Hardware stack levels required when called:    7
  7597 ;; This function calls:
  7598 ;;		_ENC424J600_readSPI
  7599 ;;		_ENC424J600_setERXDATAReadPointer
  7600 ;;		_ENC424J600_writeSPI
  7601 ;; This function is called by:
  7602 ;;		_ethernet_rxGetNewFrame
  7603 ;; This function uses a non-reentrant model
  7604 ;;
  7605                           
  7606                           	psect	text18
  7607  003AEA                     __ptext18:
  7608                           	opt stack 0
  7609  003AEA                     _ethernetController_getEtherTypeField:
  7610                           	opt stack 21
  7611                           
  7612                           ;ENC424J600.c: 277: etherType_t ethertype = 0x0000;
  7613                           
  7614                           ; BSR set to: 0
  7615                           ;incstack = 0
  7616  003AEA  0E00               	movlw	0
  7617  003AEC  0100               	movlb	0	; () banked
  7618  003AEE  6F7D               	movwf	(ethernetController_getEtherTypeField@ethertype+1)& (0+255),b
  7619  003AF0  0E00               	movlw	0
  7620  003AF2  6F7C               	movwf	ethernetController_getEtherTypeField@ethertype& (0+255),b
  7621                           
  7622                           ; BSR set to: 0
  7623                           ;ENC424J600.c: 278: ENC424J600_setERXDATAReadPointer(field.start + 20);
  7624  003AF4  0E14               	movlw	20
  7625  003AF6  256F               	addwf	ethernetController_getEtherTypeField@field& (0+255),w,b
  7626  003AF8  6F6A               	movwf	ENC424J600_setERXDATAReadPointer@addr& (0+255),b
  7627  003AFA  0E00               	movlw	0
  7628  003AFC  2170               	addwfc	(ethernetController_getEtherTypeField@field+1)& (0+255),w,b
  7629  003AFE  6F6B               	movwf	(ENC424J600_setERXDATAReadPointer@addr+1)& (0+255),b
  7630  003B00  ECF6  F020         	call	_ENC424J600_setERXDATAReadPointer	;wreg free
  7631                           
  7632                           ;ENC424J600.c: 279: uint8_t opcode = 0x2C;
  7633  003B04  0E2C               	movlw	44
  7634  003B06  0100               	movlb	0	; () banked
  7635  003B08  6F7E               	movwf	ethernetController_getEtherTypeField@opcode& (0+255),b
  7636                           
  7637                           ; BSR set to: 0
  7638                           ;ENC424J600.c: 280: PORTBbits.RB4=0;
  7639  003B0A  9881               	bcf	3969,4,c	;volatile
  7640                           
  7641                           ;ENC424J600.c: 281: ENC424J600_writeSPI(&opcode);
  7642  003B0C  0E7E               	movlw	low ethernetController_getEtherTypeField@opcode
  7643  003B0E  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
  7644  003B10  0E00               	movlw	high ethernetController_getEtherTypeField@opcode
  7645  003B12  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
  7646  003B14  ECB5  F01E         	call	_ENC424J600_writeSPI	;wreg free
  7647                           
  7648                           ;ENC424J600.c: 283: uint8_t lowByte;
  7649                           ;ENC424J600.c: 284: uint8_t highByte;
  7650                           ;ENC424J600.c: 285: ENC424J600_readSPI(&highByte);
  7651  003B18  0E80               	movlw	low ethernetController_getEtherTypeField@highByte
  7652  003B1A  0100               	movlb	0	; () banked
  7653  003B1C  6F60               	movwf	ENC424J600_readSPI@data& (0+255),b
  7654  003B1E  0E00               	movlw	high ethernetController_getEtherTypeField@highByte
  7655  003B20  6F61               	movwf	(ENC424J600_readSPI@data+1)& (0+255),b
  7656  003B22  ECE5  F01D         	call	_ENC424J600_readSPI	;wreg free
  7657                           
  7658                           ;ENC424J600.c: 286: ENC424J600_readSPI(&lowByte);
  7659  003B26  0E7F               	movlw	low ethernetController_getEtherTypeField@lowByte
  7660  003B28  0100               	movlb	0	; () banked
  7661  003B2A  6F60               	movwf	ENC424J600_readSPI@data& (0+255),b
  7662  003B2C  0E00               	movlw	high ethernetController_getEtherTypeField@lowByte
  7663  003B2E  6F61               	movwf	(ENC424J600_readSPI@data+1)& (0+255),b
  7664  003B30  ECE5  F01D         	call	_ENC424J600_readSPI	;wreg free
  7665                           
  7666                           ;ENC424J600.c: 287: ethertype = (uint16_t) (lowByte | (highByte << 8));
  7667  003B34  0100               	movlb	0	; () banked
  7668  003B36  5180               	movf	ethernetController_getEtherTypeField@highByte& (0+255),w,b
  7669  003B38  6F79               	movwf	(??_ethernetController_getEtherTypeField+1)& (0+255),b
  7670  003B3A  6B78               	clrf	??_ethernetController_getEtherTypeField& (0+255),b
  7671  003B3C  517F               	movf	ethernetController_getEtherTypeField@lowByte& (0+255),w,b
  7672  003B3E  6F7A               	movwf	(??_ethernetController_getEtherTypeField+2)& (0+255),b
  7673  003B40  6B7B               	clrf	(??_ethernetController_getEtherTypeField+3)& (0+255),b
  7674  003B42  5178               	movf	??_ethernetController_getEtherTypeField& (0+255),w,b
  7675  003B44  117A               	iorwf	(??_ethernetController_getEtherTypeField+2)& (0+255),w,b
  7676  003B46  6F7C               	movwf	ethernetController_getEtherTypeField@ethertype& (0+255),b
  7677  003B48  5179               	movf	(??_ethernetController_getEtherTypeField+1)& (0+255),w,b
  7678  003B4A  117B               	iorwf	(??_ethernetController_getEtherTypeField+3)& (0+255),w,b
  7679  003B4C  6F7D               	movwf	(ethernetController_getEtherTypeField@ethertype+1)& (0+255),b
  7680                           
  7681                           ; BSR set to: 0
  7682                           ;ENC424J600.c: 288: PORTBbits.RB4=1;
  7683  003B4E  8881               	bsf	3969,4,c	;volatile
  7684                           
  7685                           ; BSR set to: 0
  7686                           ;ENC424J600.c: 289: return ethertype;
  7687  003B50  C07C  F06F         	movff	ethernetController_getEtherTypeField@ethertype,?_ethernetController_getEtherTypeF
      +                          ield
  7688  003B54  C07D  F070         	movff	ethernetController_getEtherTypeField@ethertype+1,?_ethernetController_getEtherTyp
      +                          eField+1
  7689  003B58  0012               	return	
  7690  003B5A                     __end_of_ethernetController_getEtherTypeField:
  7691                           	opt stack 0
  7692                           tblptru	equ	0xFF8
  7693                           tblptrh	equ	0xFF7
  7694                           tblptrl	equ	0xFF6
  7695                           tablat	equ	0xFF5
  7696                           prodh	equ	0xFF4
  7697                           prodl	equ	0xFF3
  7698                           intcon	equ	0xFF2
  7699                           intcon3	equ	0xFF0
  7700                           postinc0	equ	0xFEE
  7701                           plusw0	equ	0xFEB
  7702                           fsr0h	equ	0xFEA
  7703                           fsr0l	equ	0xFE9
  7704                           wreg	equ	0xFE8
  7705                           indf1	equ	0xFE7
  7706                           postinc1	equ	0xFE6
  7707                           postdec1	equ	0xFE5
  7708                           plusw1	equ	0xFE3
  7709                           fsr1h	equ	0xFE2
  7710                           fsr1l	equ	0xFE1
  7711                           indf2	equ	0xFDF
  7712                           postinc2	equ	0xFDE
  7713                           postdec2	equ	0xFDD
  7714                           plusw2	equ	0xFDB
  7715                           fsr2h	equ	0xFDA
  7716                           fsr2l	equ	0xFD9
  7717                           status	equ	0xFD8
  7718                           
  7719 ;; *************** function _etherTypeToString *****************
  7720 ;; Defined at:
  7721 ;;		line 178 in file "src/system/uart.c"
  7722 ;; Parameters:    Size  Location     Type
  7723 ;;  ethertype       2    0[BANK0 ] enum E5467
  7724 ;; Auto vars:     Size  Location     Type
  7725 ;;		None
  7726 ;; Return value:  Size  Location     Type
  7727 ;;                  2    0[BANK0 ] PTR unsigned char 
  7728 ;; Registers used:
  7729 ;;		wreg, status,2, status,0
  7730 ;; Tracked objects:
  7731 ;;		On entry : 0/0
  7732 ;;		On exit  : 0/0
  7733 ;;		Unchanged: 0/0
  7734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7735 ;;      Params:         0       2       0       0       0       0       0       0       0
  7736 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7737 ;;      Temps:          0       2       0       0       0       0       0       0       0
  7738 ;;      Totals:         0       4       0       0       0       0       0       0       0
  7739 ;;Total ram usage:        4 bytes
  7740 ;; Hardware stack levels used:    1
  7741 ;; Hardware stack levels required when called:    4
  7742 ;; This function calls:
  7743 ;;		Nothing
  7744 ;; This function is called by:
  7745 ;;		_ethernet_rxGetNewFrame
  7746 ;; This function uses a non-reentrant model
  7747 ;;
  7748                           
  7749                           	psect	text19
  7750  004068                     __ptext19:
  7751                           	opt stack 0
  7752  004068                     _etherTypeToString:
  7753                           	opt stack 24
  7754                           
  7755                           ;uart.c: 179: switch (ethertype) {
  7756                           
  7757                           ; BSR set to: 0
  7758                           ;incstack = 0
  7759  004068  D010               	goto	l782
  7760  00406A                     
  7761                           ;uart.c: 181: return "IPv4";
  7762  00406A  0EDF               	movlw	low STR_52
  7763  00406C  0100               	movlb	0	; () banked
  7764  00406E  6F60               	movwf	?_etherTypeToString& (0+255),b
  7765  004070  0E7F               	movlw	high STR_52
  7766  004072  6F61               	movwf	(?_etherTypeToString+1)& (0+255),b
  7767                           
  7768                           ; BSR set to: 0
  7769  004074  0012               	return	
  7770  004076                     
  7771                           ; BSR set to: 0
  7772                           ;uart.c: 183: return "ARP";
  7773                           
  7774                           ; BSR set to: 0
  7775  004076  0EEE               	movlw	low STR_53
  7776  004078  6F60               	movwf	?_etherTypeToString& (0+255),b
  7777  00407A  0E7F               	movlw	high STR_53
  7778  00407C  6F61               	movwf	(?_etherTypeToString+1)& (0+255),b
  7779                           
  7780                           ; BSR set to: 0
  7781  00407E  0012               	return	
  7782  004080                     
  7783                           ; BSR set to: 0
  7784                           ;uart.c: 185: return "Unknown EtherType";
  7785                           
  7786                           ; BSR set to: 0
  7787  004080  0EC5               	movlw	low STR_54
  7788  004082  6F60               	movwf	?_etherTypeToString& (0+255),b
  7789  004084  0E7E               	movlw	high STR_54
  7790  004086  6F61               	movwf	(?_etherTypeToString+1)& (0+255),b
  7791                           
  7792                           ; BSR set to: 0
  7793                           ;uart.c: 186: }
  7794                           
  7795                           ; BSR set to: 0
  7796  004088  0012               	return	
  7797  00408A                     l782:
  7798                           
  7799                           ; BSR set to: 0
  7800  00408A  C060  F062         	movff	etherTypeToString@ethertype,??_etherTypeToString
  7801  00408E  C061  F063         	movff	etherTypeToString@ethertype+1,??_etherTypeToString+1
  7802                           
  7803                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7804                           ; Switch size 1, requested type "space"
  7805                           ; Number of cases is 1, Range of values is 8 to 8
  7806                           ; switch strategies available:
  7807                           ; Name         Instructions Cycles
  7808                           ; simple_byte            4     3 (average)
  7809                           ;	Chosen strategy is simple_byte
  7810  004092  0100               	movlb	0	; () banked
  7811  004094  5163               	movf	(??_etherTypeToString+1)& (0+255),w,b
  7812  004096  0A08               	xorlw	8	; case 8
  7813  004098  A4D8               	btfss	status,2,c
  7814  00409A  D7F2               	goto	l786
  7815                           
  7816                           ; BSR set to: 0
  7817                           ; Switch size 1, requested type "space"
  7818                           ; Number of cases is 2, Range of values is 0 to 6
  7819                           ; switch strategies available:
  7820                           ; Name         Instructions Cycles
  7821                           ; simple_byte            7     4 (average)
  7822                           ;	Chosen strategy is simple_byte
  7823  00409C  5162               	movf	??_etherTypeToString& (0+255),w,b
  7824  00409E  0A00               	xorlw	0	; case 0
  7825  0040A0  B4D8               	btfsc	status,2,c
  7826  0040A2  D7E3               	goto	l783
  7827  0040A4  0A06               	xorlw	6	; case 6
  7828  0040A6  B4D8               	btfsc	status,2,c
  7829  0040A8  D7E6               	goto	l785
  7830  0040AA  D7EA               	goto	l786
  7831  0040AC                     __end_of_etherTypeToString:
  7832                           	opt stack 0
  7833                           tblptru	equ	0xFF8
  7834                           tblptrh	equ	0xFF7
  7835                           tblptrl	equ	0xFF6
  7836                           tablat	equ	0xFF5
  7837                           prodh	equ	0xFF4
  7838                           prodl	equ	0xFF3
  7839                           intcon	equ	0xFF2
  7840                           intcon3	equ	0xFF0
  7841                           postinc0	equ	0xFEE
  7842                           plusw0	equ	0xFEB
  7843                           fsr0h	equ	0xFEA
  7844                           fsr0l	equ	0xFE9
  7845                           wreg	equ	0xFE8
  7846                           indf1	equ	0xFE7
  7847                           postinc1	equ	0xFE6
  7848                           postdec1	equ	0xFE5
  7849                           plusw1	equ	0xFE3
  7850                           fsr1h	equ	0xFE2
  7851                           fsr1l	equ	0xFE1
  7852                           indf2	equ	0xFDF
  7853                           postinc2	equ	0xFDE
  7854                           postdec2	equ	0xFDD
  7855                           plusw2	equ	0xFDB
  7856                           fsr2h	equ	0xFDA
  7857                           fsr2l	equ	0xFD9
  7858                           status	equ	0xFD8
  7859                           
  7860 ;; *************** function _UARTTransmitInt *****************
  7861 ;; Defined at:
  7862 ;;		line 60 in file "src/system/uart.c"
  7863 ;; Parameters:    Size  Location     Type
  7864 ;;  val             4   58[BANK0 ] unsigned long 
  7865 ;; Auto vars:     Size  Location     Type
  7866 ;;		None
  7867 ;; Return value:  Size  Location     Type
  7868 ;;                  1    wreg      void 
  7869 ;; Registers used:
  7870 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7871 ;; Tracked objects:
  7872 ;;		On entry : 0/0
  7873 ;;		On exit  : 0/0
  7874 ;;		Unchanged: 0/0
  7875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7876 ;;      Params:         0       4       0       0       0       0       0       0       0
  7877 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7878 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7879 ;;      Totals:         0       4       0       0       0       0       0       0       0
  7880 ;;Total ram usage:        4 bytes
  7881 ;; Hardware stack levels used:    1
  7882 ;; Hardware stack levels required when called:    6
  7883 ;; This function calls:
  7884 ;;		_UARTTransmitText
  7885 ;;		_intToString
  7886 ;; This function is called by:
  7887 ;;		_ethernet_rxGetNewFrame
  7888 ;;		_main
  7889 ;; This function uses a non-reentrant model
  7890 ;;
  7891                           
  7892                           	psect	text20
  7893  00456C                     __ptext20:
  7894                           	opt stack 0
  7895  00456C                     _UARTTransmitInt:
  7896                           	opt stack 22
  7897                           
  7898                           ;uart.c: 61: UARTTransmitText(intToString(val));
  7899                           
  7900                           ; BSR set to: 0
  7901                           ;incstack = 0
  7902  00456C  C09A  F073         	movff	UARTTransmitInt@val,intToString@val
  7903  004570  C09B  F074         	movff	UARTTransmitInt@val+1,intToString@val+1
  7904  004574  C09C  F075         	movff	UARTTransmitInt@val+2,intToString@val+2
  7905  004578  C09D  F076         	movff	UARTTransmitInt@val+3,intToString@val+3
  7906  00457C  EC42  F00C         	call	_intToString	;wreg free
  7907  004580  C073  F098         	movff	?_intToString,UARTTransmitText@str
  7908  004584  C074  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  7909  004588  EC18  F01F         	call	_UARTTransmitText	;wreg free
  7910  00458C  0012               	return		;funcret
  7911  00458E                     __end_of_UARTTransmitInt:
  7912                           	opt stack 0
  7913                           tblptru	equ	0xFF8
  7914                           tblptrh	equ	0xFF7
  7915                           tblptrl	equ	0xFF6
  7916                           tablat	equ	0xFF5
  7917                           prodh	equ	0xFF4
  7918                           prodl	equ	0xFF3
  7919                           intcon	equ	0xFF2
  7920                           intcon3	equ	0xFF0
  7921                           postinc0	equ	0xFEE
  7922                           plusw0	equ	0xFEB
  7923                           fsr0h	equ	0xFEA
  7924                           fsr0l	equ	0xFE9
  7925                           wreg	equ	0xFE8
  7926                           indf1	equ	0xFE7
  7927                           postinc1	equ	0xFE6
  7928                           postdec1	equ	0xFE5
  7929                           plusw1	equ	0xFE3
  7930                           fsr1h	equ	0xFE2
  7931                           fsr1l	equ	0xFE1
  7932                           indf2	equ	0xFDF
  7933                           postinc2	equ	0xFDE
  7934                           postdec2	equ	0xFDD
  7935                           plusw2	equ	0xFDB
  7936                           fsr2h	equ	0xFDA
  7937                           fsr2l	equ	0xFD9
  7938                           status	equ	0xFD8
  7939                           
  7940 ;; *************** function _intToString *****************
  7941 ;; Defined at:
  7942 ;;		line 92 in file "src/system/uart.c"
  7943 ;; Parameters:    Size  Location     Type
  7944 ;;  val             4   19[BANK0 ] unsigned long 
  7945 ;; Auto vars:     Size  Location     Type
  7946 ;;  pointer         1   38[BANK0 ] unsigned char 
  7947 ;;  tenthousands    1   37[BANK0 ] unsigned char 
  7948 ;;  thousands       1   36[BANK0 ] unsigned char 
  7949 ;;  hundreds        1   35[BANK0 ] unsigned char 
  7950 ;;  ones            1   34[BANK0 ] unsigned char 
  7951 ;;  tens            1   33[BANK0 ] unsigned char 
  7952 ;; Return value:  Size  Location     Type
  7953 ;;                  2   19[BANK0 ] PTR unsigned char 
  7954 ;; Registers used:
  7955 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7956 ;; Tracked objects:
  7957 ;;		On entry : 0/0
  7958 ;;		On exit  : 0/0
  7959 ;;		Unchanged: 0/0
  7960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7961 ;;      Params:         0       4       0       0       0       0       0       0       0
  7962 ;;      Locals:         0       6       0       0       0       0       0       0       0
  7963 ;;      Temps:          0      10       0       0       0       0       0       0       0
  7964 ;;      Totals:         0      20       0       0       0       0       0       0       0
  7965 ;;Total ram usage:       20 bytes
  7966 ;; Hardware stack levels used:    1
  7967 ;; Hardware stack levels required when called:    5
  7968 ;; This function calls:
  7969 ;;		___lldiv
  7970 ;;		___llmod
  7971 ;;		___wmul
  7972 ;; This function is called by:
  7973 ;;		_ethernet_rxGetNewFrame
  7974 ;;		_printErrorMessage
  7975 ;;		_UARTTransmitInt
  7976 ;;		_arpEntryToString
  7977 ;; This function uses a non-reentrant model
  7978 ;;
  7979                           
  7980                           	psect	text21
  7981  001884                     __ptext21:
  7982                           	opt stack 0
  7983  001884                     _intToString:
  7984                           	opt stack 24
  7985                           
  7986                           ;uart.c: 93: char static number [10];
  7987                           ;uart.c: 94: uint8_t pointer = 0;
  7988                           
  7989                           ;incstack = 0
  7990  001884  0E00               	movlw	0
  7991  001886  0100               	movlb	0	; () banked
  7992  001888  6F86               	movwf	intToString@pointer& (0+255),b
  7993                           
  7994                           ; BSR set to: 0
  7995                           ;uart.c: 96: uint8_t tenthousands = val / 10000u;
  7996  00188A  C073  F066         	movff	intToString@val,___lldiv@dividend
  7997  00188E  C074  F067         	movff	intToString@val+1,___lldiv@dividend+1
  7998  001892  C075  F068         	movff	intToString@val+2,___lldiv@dividend+2
  7999  001896  C076  F069         	movff	intToString@val+3,___lldiv@dividend+3
  8000  00189A  0E10               	movlw	16
  8001  00189C  6F6A               	movwf	___lldiv@divisor& (0+255),b
  8002  00189E  0E27               	movlw	39
  8003  0018A0  6F6B               	movwf	(___lldiv@divisor+1)& (0+255),b
  8004  0018A2  0E00               	movlw	0
  8005  0018A4  6F6C               	movwf	(___lldiv@divisor+2)& (0+255),b
  8006  0018A6  0E00               	movlw	0
  8007  0018A8  6F6D               	movwf	(___lldiv@divisor+3)& (0+255),b
  8008  0018AA  ECCA  F01B         	call	___lldiv	;wreg free
  8009  0018AE  0100               	movlb	0	; () banked
  8010  0018B0  5166               	movf	?___lldiv& (0+255),w,b
  8011  0018B2  6F85               	movwf	intToString@tenthousands& (0+255),b
  8012                           
  8013                           ; BSR set to: 0
  8014                           ;uart.c: 97: uint8_t thousands = (val - tenthousands * 10000u) / 1000u;
  8015  0018B4  C085  F060         	movff	intToString@tenthousands,___wmul@multiplier
  8016  0018B8  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  8017  0018BA  0E27               	movlw	39
  8018  0018BC  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8019  0018BE  0E10               	movlw	16
  8020  0018C0  6F62               	movwf	___wmul@multiplicand& (0+255),b
  8021  0018C2  EC1D  F022         	call	___wmul	;wreg free
  8022  0018C6  0100               	movlb	0	; () banked
  8023  0018C8  5160               	movf	?___wmul& (0+255),w,b
  8024  0018CA  6F77               	movwf	??_intToString& (0+255),b
  8025  0018CC  5161               	movf	(?___wmul+1)& (0+255),w,b
  8026  0018CE  6F78               	movwf	(??_intToString+1)& (0+255),b
  8027  0018D0  6B79               	clrf	(??_intToString+2)& (0+255),b
  8028  0018D2  6B7A               	clrf	(??_intToString+3)& (0+255),b
  8029  0018D4  1F77               	comf	??_intToString& (0+255),f,b
  8030  0018D6  1F78               	comf	(??_intToString+1)& (0+255),f,b
  8031  0018D8  1F79               	comf	(??_intToString+2)& (0+255),f,b
  8032  0018DA  1F7A               	comf	(??_intToString+3)& (0+255),f,b
  8033  0018DC  2B77               	incf	??_intToString& (0+255),f,b
  8034  0018DE  0E00               	movlw	0
  8035  0018E0  2378               	addwfc	(??_intToString+1)& (0+255),f,b
  8036  0018E2  2379               	addwfc	(??_intToString+2)& (0+255),f,b
  8037  0018E4  237A               	addwfc	(??_intToString+3)& (0+255),f,b
  8038  0018E6  5173               	movf	intToString@val& (0+255),w,b
  8039  0018E8  2577               	addwf	??_intToString& (0+255),w,b
  8040  0018EA  6F66               	movwf	___lldiv@dividend& (0+255),b
  8041  0018EC  5174               	movf	(intToString@val+1)& (0+255),w,b
  8042  0018EE  2178               	addwfc	(??_intToString+1)& (0+255),w,b
  8043  0018F0  6F67               	movwf	(___lldiv@dividend+1)& (0+255),b
  8044  0018F2  5175               	movf	(intToString@val+2)& (0+255),w,b
  8045  0018F4  2179               	addwfc	(??_intToString+2)& (0+255),w,b
  8046  0018F6  6F68               	movwf	(___lldiv@dividend+2)& (0+255),b
  8047  0018F8  5176               	movf	(intToString@val+3)& (0+255),w,b
  8048  0018FA  217A               	addwfc	(??_intToString+3)& (0+255),w,b
  8049  0018FC  6F69               	movwf	(___lldiv@dividend+3)& (0+255),b
  8050  0018FE  0EE8               	movlw	232
  8051  001900  6F6A               	movwf	___lldiv@divisor& (0+255),b
  8052  001902  0E03               	movlw	3
  8053  001904  6F6B               	movwf	(___lldiv@divisor+1)& (0+255),b
  8054  001906  0E00               	movlw	0
  8055  001908  6F6C               	movwf	(___lldiv@divisor+2)& (0+255),b
  8056  00190A  0E00               	movlw	0
  8057  00190C  6F6D               	movwf	(___lldiv@divisor+3)& (0+255),b
  8058  00190E  ECCA  F01B         	call	___lldiv	;wreg free
  8059  001912  0100               	movlb	0	; () banked
  8060  001914  5166               	movf	?___lldiv& (0+255),w,b
  8061  001916  6F84               	movwf	intToString@thousands& (0+255),b
  8062                           
  8063                           ; BSR set to: 0
  8064                           ;uart.c: 98: uint8_t hundreds = (val - tenthousands * 10000u - thousands * 1000u) / 100u
      +                          ;
  8065  001918  C085  F060         	movff	intToString@tenthousands,___wmul@multiplier
  8066  00191C  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  8067  00191E  0E27               	movlw	39
  8068  001920  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8069  001922  0E10               	movlw	16
  8070  001924  6F62               	movwf	___wmul@multiplicand& (0+255),b
  8071  001926  EC1D  F022         	call	___wmul	;wreg free
  8072  00192A  C060  F077         	movff	?___wmul,??_intToString
  8073  00192E  C061  F078         	movff	?___wmul+1,??_intToString+1
  8074  001932  C084  F060         	movff	intToString@thousands,___wmul@multiplier
  8075  001936  0100               	movlb	0	; () banked
  8076  001938  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  8077  00193A  0E03               	movlw	3
  8078  00193C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8079  00193E  0EE8               	movlw	232
  8080  001940  6F62               	movwf	___wmul@multiplicand& (0+255),b
  8081  001942  EC1D  F022         	call	___wmul	;wreg free
  8082  001946  0100               	movlb	0	; () banked
  8083  001948  5177               	movf	??_intToString& (0+255),w,b
  8084  00194A  2560               	addwf	?___wmul& (0+255),w,b
  8085  00194C  6F79               	movwf	(??_intToString+2)& (0+255),b
  8086  00194E  5178               	movf	(??_intToString+1)& (0+255),w,b
  8087  001950  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  8088  001952  6F7A               	movwf	(??_intToString+3)& (0+255),b
  8089  001954  6B7B               	clrf	(??_intToString+4)& (0+255),b
  8090  001956  B0D8               	btfsc	status,0,c
  8091  001958  2B7B               	incf	(??_intToString+4)& (0+255),f,b
  8092  00195A  6B7C               	clrf	(??_intToString+5)& (0+255),b
  8093  00195C  1F79               	comf	(??_intToString+2)& (0+255),f,b
  8094  00195E  1F7A               	comf	(??_intToString+3)& (0+255),f,b
  8095  001960  1F7B               	comf	(??_intToString+4)& (0+255),f,b
  8096  001962  1F7C               	comf	(??_intToString+5)& (0+255),f,b
  8097  001964  2B79               	incf	(??_intToString+2)& (0+255),f,b
  8098  001966  0E00               	movlw	0
  8099  001968  237A               	addwfc	(??_intToString+3)& (0+255),f,b
  8100  00196A  237B               	addwfc	(??_intToString+4)& (0+255),f,b
  8101  00196C  237C               	addwfc	(??_intToString+5)& (0+255),f,b
  8102  00196E  5173               	movf	intToString@val& (0+255),w,b
  8103  001970  2579               	addwf	(??_intToString+2)& (0+255),w,b
  8104  001972  6F66               	movwf	___lldiv@dividend& (0+255),b
  8105  001974  5174               	movf	(intToString@val+1)& (0+255),w,b
  8106  001976  217A               	addwfc	(??_intToString+3)& (0+255),w,b
  8107  001978  6F67               	movwf	(___lldiv@dividend+1)& (0+255),b
  8108  00197A  5175               	movf	(intToString@val+2)& (0+255),w,b
  8109  00197C  217B               	addwfc	(??_intToString+4)& (0+255),w,b
  8110  00197E  6F68               	movwf	(___lldiv@dividend+2)& (0+255),b
  8111  001980  5176               	movf	(intToString@val+3)& (0+255),w,b
  8112  001982  217C               	addwfc	(??_intToString+5)& (0+255),w,b
  8113  001984  6F69               	movwf	(___lldiv@dividend+3)& (0+255),b
  8114  001986  0E64               	movlw	100
  8115  001988  6F6A               	movwf	___lldiv@divisor& (0+255),b
  8116  00198A  0E00               	movlw	0
  8117  00198C  6F6B               	movwf	(___lldiv@divisor+1)& (0+255),b
  8118  00198E  0E00               	movlw	0
  8119  001990  6F6C               	movwf	(___lldiv@divisor+2)& (0+255),b
  8120  001992  0E00               	movlw	0
  8121  001994  6F6D               	movwf	(___lldiv@divisor+3)& (0+255),b
  8122  001996  ECCA  F01B         	call	___lldiv	;wreg free
  8123  00199A  0100               	movlb	0	; () banked
  8124  00199C  5166               	movf	?___lldiv& (0+255),w,b
  8125  00199E  6F83               	movwf	intToString@hundreds& (0+255),b
  8126                           
  8127                           ; BSR set to: 0
  8128                           ;uart.c: 99: uint8_t tens = (val - tenthousands * 10000u - thousands * 1000u - hundreds 
      +                          * 100u) / 10u;
  8129  0019A0  C085  F060         	movff	intToString@tenthousands,___wmul@multiplier
  8130  0019A4  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  8131  0019A6  0E27               	movlw	39
  8132  0019A8  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8133  0019AA  0E10               	movlw	16
  8134  0019AC  6F62               	movwf	___wmul@multiplicand& (0+255),b
  8135  0019AE  EC1D  F022         	call	___wmul	;wreg free
  8136  0019B2  C060  F077         	movff	?___wmul,??_intToString
  8137  0019B6  C061  F078         	movff	?___wmul+1,??_intToString+1
  8138  0019BA  C084  F060         	movff	intToString@thousands,___wmul@multiplier
  8139  0019BE  0100               	movlb	0	; () banked
  8140  0019C0  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  8141  0019C2  0E03               	movlw	3
  8142  0019C4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8143  0019C6  0EE8               	movlw	232
  8144  0019C8  6F62               	movwf	___wmul@multiplicand& (0+255),b
  8145  0019CA  EC1D  F022         	call	___wmul	;wreg free
  8146  0019CE  0100               	movlb	0	; () banked
  8147  0019D0  5177               	movf	??_intToString& (0+255),w,b
  8148  0019D2  2560               	addwf	?___wmul& (0+255),w,b
  8149  0019D4  6F79               	movwf	(??_intToString+2)& (0+255),b
  8150  0019D6  5178               	movf	(??_intToString+1)& (0+255),w,b
  8151  0019D8  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  8152  0019DA  6F7A               	movwf	(??_intToString+3)& (0+255),b
  8153  0019DC  6B7B               	clrf	(??_intToString+4)& (0+255),b
  8154  0019DE  B0D8               	btfsc	status,0,c
  8155  0019E0  2B7B               	incf	(??_intToString+4)& (0+255),f,b
  8156  0019E2  6B7C               	clrf	(??_intToString+5)& (0+255),b
  8157  0019E4  5183               	movf	intToString@hundreds& (0+255),w,b
  8158  0019E6  0D64               	mullw	100
  8159  0019E8  50F3               	movf	prodl,w,c
  8160  0019EA  2579               	addwf	(??_intToString+2)& (0+255),w,b
  8161  0019EC  6F7D               	movwf	(??_intToString+6)& (0+255),b
  8162  0019EE  50F4               	movf	prodh,w,c
  8163  0019F0  217A               	addwfc	(??_intToString+3)& (0+255),w,b
  8164  0019F2  6F7E               	movwf	(??_intToString+7)& (0+255),b
  8165  0019F4  0E00               	movlw	0
  8166  0019F6  217B               	addwfc	(??_intToString+4)& (0+255),w,b
  8167  0019F8  6F7F               	movwf	(??_intToString+8)& (0+255),b
  8168  0019FA  0E00               	movlw	0
  8169  0019FC  217C               	addwfc	(??_intToString+5)& (0+255),w,b
  8170  0019FE  6F80               	movwf	(??_intToString+9)& (0+255),b
  8171  001A00  1F7D               	comf	(??_intToString+6)& (0+255),f,b
  8172  001A02  1F7E               	comf	(??_intToString+7)& (0+255),f,b
  8173  001A04  1F7F               	comf	(??_intToString+8)& (0+255),f,b
  8174  001A06  1F80               	comf	(??_intToString+9)& (0+255),f,b
  8175  001A08  2B7D               	incf	(??_intToString+6)& (0+255),f,b
  8176  001A0A  0E00               	movlw	0
  8177  001A0C  237E               	addwfc	(??_intToString+7)& (0+255),f,b
  8178  001A0E  237F               	addwfc	(??_intToString+8)& (0+255),f,b
  8179  001A10  2380               	addwfc	(??_intToString+9)& (0+255),f,b
  8180  001A12  5173               	movf	intToString@val& (0+255),w,b
  8181  001A14  257D               	addwf	(??_intToString+6)& (0+255),w,b
  8182  001A16  6F66               	movwf	___lldiv@dividend& (0+255),b
  8183  001A18  5174               	movf	(intToString@val+1)& (0+255),w,b
  8184  001A1A  217E               	addwfc	(??_intToString+7)& (0+255),w,b
  8185  001A1C  6F67               	movwf	(___lldiv@dividend+1)& (0+255),b
  8186  001A1E  5175               	movf	(intToString@val+2)& (0+255),w,b
  8187  001A20  217F               	addwfc	(??_intToString+8)& (0+255),w,b
  8188  001A22  6F68               	movwf	(___lldiv@dividend+2)& (0+255),b
  8189  001A24  5176               	movf	(intToString@val+3)& (0+255),w,b
  8190  001A26  2180               	addwfc	(??_intToString+9)& (0+255),w,b
  8191  001A28  6F69               	movwf	(___lldiv@dividend+3)& (0+255),b
  8192  001A2A  0E0A               	movlw	10
  8193  001A2C  6F6A               	movwf	___lldiv@divisor& (0+255),b
  8194  001A2E  0E00               	movlw	0
  8195  001A30  6F6B               	movwf	(___lldiv@divisor+1)& (0+255),b
  8196  001A32  0E00               	movlw	0
  8197  001A34  6F6C               	movwf	(___lldiv@divisor+2)& (0+255),b
  8198  001A36  0E00               	movlw	0
  8199  001A38  6F6D               	movwf	(___lldiv@divisor+3)& (0+255),b
  8200  001A3A  ECCA  F01B         	call	___lldiv	;wreg free
  8201  001A3E  0100               	movlb	0	; () banked
  8202  001A40  5166               	movf	?___lldiv& (0+255),w,b
  8203  001A42  6F81               	movwf	intToString@tens& (0+255),b
  8204                           
  8205                           ; BSR set to: 0
  8206                           ;uart.c: 100: uint8_t ones = val % 10u;
  8207  001A44  C073  F060         	movff	intToString@val,___llmod@dividend
  8208  001A48  C074  F061         	movff	intToString@val+1,___llmod@dividend+1
  8209  001A4C  C075  F062         	movff	intToString@val+2,___llmod@dividend+2
  8210  001A50  C076  F063         	movff	intToString@val+3,___llmod@dividend+3
  8211  001A54  0E0A               	movlw	10
  8212  001A56  6F64               	movwf	___llmod@divisor& (0+255),b
  8213  001A58  0E00               	movlw	0
  8214  001A5A  6F65               	movwf	(___llmod@divisor+1)& (0+255),b
  8215  001A5C  0E00               	movlw	0
  8216  001A5E  6F66               	movwf	(___llmod@divisor+2)& (0+255),b
  8217  001A60  0E00               	movlw	0
  8218  001A62  6F67               	movwf	(___llmod@divisor+3)& (0+255),b
  8219  001A64  EC1A  F01E         	call	___llmod	;wreg free
  8220  001A68  0100               	movlb	0	; () banked
  8221  001A6A  5160               	movf	?___llmod& (0+255),w,b
  8222  001A6C  6F82               	movwf	intToString@ones& (0+255),b
  8223                           
  8224                           ; BSR set to: 0
  8225                           ;uart.c: 102: if (val > 9999) {
  8226  001A6E  5176               	movf	(intToString@val+3)& (0+255),w,b
  8227  001A70  1175               	iorwf	(intToString@val+2)& (0+255),w,b
  8228  001A72  E106               	bnz	u9390
  8229  001A74  0E10               	movlw	16
  8230  001A76  5D73               	subwf	intToString@val& (0+255),w,b
  8231  001A78  0E27               	movlw	39
  8232  001A7A  5974               	subwfb	(intToString@val+1)& (0+255),w,b
  8233  001A7C  A0D8               	btfss	status,0,c
  8234  001A7E  D00C               	goto	l751
  8235  001A80                     u9390:
  8236                           
  8237                           ; BSR set to: 0
  8238                           ;uart.c: 103: number[pointer++] = tenthousands + 0x30u;
  8239  001A80  5186               	movf	intToString@pointer& (0+255),w,b
  8240  001A82  0D01               	mullw	1
  8241  001A84  0EAD               	movlw	low intToString@number
  8242  001A86  24F3               	addwf	prodl,w,c
  8243  001A88  6ED9               	movwf	fsr2l,c
  8244  001A8A  0E01               	movlw	high intToString@number
  8245  001A8C  20F4               	addwfc	prodh,w,c
  8246  001A8E  6EDA               	movwf	fsr2h,c
  8247  001A90  5185               	movf	intToString@tenthousands& (0+255),w,b
  8248  001A92  0F30               	addlw	48
  8249  001A94  6EDF               	movwf	indf2,c
  8250                           
  8251                           ; BSR set to: 0
  8252  001A96  2B86               	incf	intToString@pointer& (0+255),f,b
  8253  001A98                     l751:
  8254                           
  8255                           ; BSR set to: 0
  8256                           ;uart.c: 104: }
  8257                           ;uart.c: 106: if (val > 999) {
  8258                           
  8259                           ; BSR set to: 0
  8260  001A98  5176               	movf	(intToString@val+3)& (0+255),w,b
  8261  001A9A  1175               	iorwf	(intToString@val+2)& (0+255),w,b
  8262  001A9C  E106               	bnz	u9400
  8263  001A9E  0EE8               	movlw	232
  8264  001AA0  5D73               	subwf	intToString@val& (0+255),w,b
  8265  001AA2  0E03               	movlw	3
  8266  001AA4  5974               	subwfb	(intToString@val+1)& (0+255),w,b
  8267  001AA6  A0D8               	btfss	status,0,c
  8268  001AA8  D00C               	goto	l752
  8269  001AAA                     u9400:
  8270                           
  8271                           ; BSR set to: 0
  8272                           ;uart.c: 107: number[pointer++] = thousands + 0x30u;
  8273  001AAA  5186               	movf	intToString@pointer& (0+255),w,b
  8274  001AAC  0D01               	mullw	1
  8275  001AAE  0EAD               	movlw	low intToString@number
  8276  001AB0  24F3               	addwf	prodl,w,c
  8277  001AB2  6ED9               	movwf	fsr2l,c
  8278  001AB4  0E01               	movlw	high intToString@number
  8279  001AB6  20F4               	addwfc	prodh,w,c
  8280  001AB8  6EDA               	movwf	fsr2h,c
  8281  001ABA  5184               	movf	intToString@thousands& (0+255),w,b
  8282  001ABC  0F30               	addlw	48
  8283  001ABE  6EDF               	movwf	indf2,c
  8284                           
  8285                           ; BSR set to: 0
  8286  001AC0  2B86               	incf	intToString@pointer& (0+255),f,b
  8287  001AC2                     l752:
  8288                           
  8289                           ; BSR set to: 0
  8290                           ;uart.c: 108: }
  8291                           ;uart.c: 110: if (val > 99) {
  8292                           
  8293                           ; BSR set to: 0
  8294  001AC2  5176               	movf	(intToString@val+3)& (0+255),w,b
  8295  001AC4  1175               	iorwf	(intToString@val+2)& (0+255),w,b
  8296  001AC6  1174               	iorwf	(intToString@val+1)& (0+255),w,b
  8297  001AC8  E104               	bnz	u9410
  8298  001ACA  0E64               	movlw	100
  8299  001ACC  5D73               	subwf	intToString@val& (0+255),w,b
  8300  001ACE  A0D8               	btfss	status,0,c
  8301  001AD0  D00C               	goto	l753
  8302  001AD2                     u9410:
  8303                           
  8304                           ; BSR set to: 0
  8305                           ;uart.c: 111: number[pointer++] = hundreds + 0x30u;
  8306  001AD2  5186               	movf	intToString@pointer& (0+255),w,b
  8307  001AD4  0D01               	mullw	1
  8308  001AD6  0EAD               	movlw	low intToString@number
  8309  001AD8  24F3               	addwf	prodl,w,c
  8310  001ADA  6ED9               	movwf	fsr2l,c
  8311  001ADC  0E01               	movlw	high intToString@number
  8312  001ADE  20F4               	addwfc	prodh,w,c
  8313  001AE0  6EDA               	movwf	fsr2h,c
  8314  001AE2  5183               	movf	intToString@hundreds& (0+255),w,b
  8315  001AE4  0F30               	addlw	48
  8316  001AE6  6EDF               	movwf	indf2,c
  8317                           
  8318                           ; BSR set to: 0
  8319  001AE8  2B86               	incf	intToString@pointer& (0+255),f,b
  8320  001AEA                     l753:
  8321                           
  8322                           ; BSR set to: 0
  8323                           ;uart.c: 112: }
  8324                           ;uart.c: 114: if (val > 9) {
  8325                           
  8326                           ; BSR set to: 0
  8327  001AEA  5176               	movf	(intToString@val+3)& (0+255),w,b
  8328  001AEC  1175               	iorwf	(intToString@val+2)& (0+255),w,b
  8329  001AEE  1174               	iorwf	(intToString@val+1)& (0+255),w,b
  8330  001AF0  E104               	bnz	u9420
  8331  001AF2  0E0A               	movlw	10
  8332  001AF4  5D73               	subwf	intToString@val& (0+255),w,b
  8333  001AF6  A0D8               	btfss	status,0,c
  8334  001AF8  D00C               	goto	l754
  8335  001AFA                     u9420:
  8336                           
  8337                           ; BSR set to: 0
  8338                           ;uart.c: 115: number[pointer++] = tens + 0x30u;
  8339  001AFA  5186               	movf	intToString@pointer& (0+255),w,b
  8340  001AFC  0D01               	mullw	1
  8341  001AFE  0EAD               	movlw	low intToString@number
  8342  001B00  24F3               	addwf	prodl,w,c
  8343  001B02  6ED9               	movwf	fsr2l,c
  8344  001B04  0E01               	movlw	high intToString@number
  8345  001B06  20F4               	addwfc	prodh,w,c
  8346  001B08  6EDA               	movwf	fsr2h,c
  8347  001B0A  5181               	movf	intToString@tens& (0+255),w,b
  8348  001B0C  0F30               	addlw	48
  8349  001B0E  6EDF               	movwf	indf2,c
  8350                           
  8351                           ; BSR set to: 0
  8352  001B10  2B86               	incf	intToString@pointer& (0+255),f,b
  8353  001B12                     l754:
  8354                           
  8355                           ; BSR set to: 0
  8356                           ;uart.c: 116: }
  8357                           ;uart.c: 118: number[pointer++] = ones + 0x30u;
  8358                           
  8359                           ; BSR set to: 0
  8360  001B12  5186               	movf	intToString@pointer& (0+255),w,b
  8361  001B14  0D01               	mullw	1
  8362  001B16  0EAD               	movlw	low intToString@number
  8363  001B18  24F3               	addwf	prodl,w,c
  8364  001B1A  6ED9               	movwf	fsr2l,c
  8365  001B1C  0E01               	movlw	high intToString@number
  8366  001B1E  20F4               	addwfc	prodh,w,c
  8367  001B20  6EDA               	movwf	fsr2h,c
  8368  001B22  5182               	movf	intToString@ones& (0+255),w,b
  8369  001B24  0F30               	addlw	48
  8370  001B26  6EDF               	movwf	indf2,c
  8371  001B28  2B86               	incf	intToString@pointer& (0+255),f,b
  8372                           
  8373                           ; BSR set to: 0
  8374                           ;uart.c: 119: number[pointer++] = '\0';
  8375  001B2A  5186               	movf	intToString@pointer& (0+255),w,b
  8376  001B2C  0D01               	mullw	1
  8377  001B2E  0EAD               	movlw	low intToString@number
  8378  001B30  24F3               	addwf	prodl,w,c
  8379  001B32  6ED9               	movwf	fsr2l,c
  8380  001B34  0E01               	movlw	high intToString@number
  8381  001B36  20F4               	addwfc	prodh,w,c
  8382  001B38  6EDA               	movwf	fsr2h,c
  8383  001B3A  0E00               	movlw	0
  8384  001B3C  6EDF               	movwf	indf2,c
  8385                           
  8386                           ; BSR set to: 0
  8387  001B3E  2B86               	incf	intToString@pointer& (0+255),f,b
  8388                           
  8389                           ; BSR set to: 0
  8390                           ;uart.c: 121: return number;
  8391  001B40  0EAD               	movlw	low intToString@number
  8392  001B42  6F73               	movwf	?_intToString& (0+255),b
  8393  001B44  0E01               	movlw	high intToString@number
  8394  001B46  6F74               	movwf	(?_intToString+1)& (0+255),b
  8395  001B48  0012               	return	
  8396  001B4A                     __end_of_intToString:
  8397                           	opt stack 0
  8398                           tblptru	equ	0xFF8
  8399                           tblptrh	equ	0xFF7
  8400                           tblptrl	equ	0xFF6
  8401                           tablat	equ	0xFF5
  8402                           prodh	equ	0xFF4
  8403                           prodl	equ	0xFF3
  8404                           intcon	equ	0xFF2
  8405                           intcon3	equ	0xFF0
  8406                           postinc0	equ	0xFEE
  8407                           plusw0	equ	0xFEB
  8408                           fsr0h	equ	0xFEA
  8409                           fsr0l	equ	0xFE9
  8410                           wreg	equ	0xFE8
  8411                           indf1	equ	0xFE7
  8412                           postinc1	equ	0xFE6
  8413                           postdec1	equ	0xFE5
  8414                           plusw1	equ	0xFE3
  8415                           fsr1h	equ	0xFE2
  8416                           fsr1l	equ	0xFE1
  8417                           indf2	equ	0xFDF
  8418                           postinc2	equ	0xFDE
  8419                           postdec2	equ	0xFDD
  8420                           plusw2	equ	0xFDB
  8421                           fsr2h	equ	0xFDA
  8422                           fsr2l	equ	0xFD9
  8423                           status	equ	0xFD8
  8424                           
  8425 ;; *************** function ___llmod *****************
  8426 ;; Defined at:
  8427 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  8428 ;; Parameters:    Size  Location     Type
  8429 ;;  dividend        4    0[BANK0 ] unsigned long 
  8430 ;;  divisor         4    4[BANK0 ] unsigned long 
  8431 ;; Auto vars:     Size  Location     Type
  8432 ;;  counter         1    8[BANK0 ] unsigned char 
  8433 ;; Return value:  Size  Location     Type
  8434 ;;                  4    0[BANK0 ] unsigned long 
  8435 ;; Registers used:
  8436 ;;		wreg, status,2, status,0
  8437 ;; Tracked objects:
  8438 ;;		On entry : 0/0
  8439 ;;		On exit  : 0/0
  8440 ;;		Unchanged: 0/0
  8441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8442 ;;      Params:         0       8       0       0       0       0       0       0       0
  8443 ;;      Locals:         0       1       0       0       0       0       0       0       0
  8444 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8445 ;;      Totals:         0       9       0       0       0       0       0       0       0
  8446 ;;Total ram usage:        9 bytes
  8447 ;; Hardware stack levels used:    1
  8448 ;; Hardware stack levels required when called:    4
  8449 ;; This function calls:
  8450 ;;		Nothing
  8451 ;; This function is called by:
  8452 ;;		_intToString
  8453 ;;		_arpEntryToString
  8454 ;; This function uses a non-reentrant model
  8455 ;;
  8456                           
  8457                           	psect	text22
  8458  003C34                     __ptext22:
  8459                           	opt stack 0
  8460  003C34                     ___llmod:
  8461                           	opt stack 24
  8462                           
  8463                           ; BSR set to: 0
  8464                           ;incstack = 0
  8465  003C34  0100               	movlb	0	; () banked
  8466  003C36  5164               	movf	___llmod@divisor& (0+255),w,b
  8467  003C38  1165               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  8468  003C3A  1166               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  8469  003C3C  1167               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  8470  003C3E  B4D8               	btfsc	status,2,c
  8471  003C40  D024               	goto	l1386
  8472                           
  8473                           ; BSR set to: 0
  8474  003C42  0E01               	movlw	1
  8475  003C44  6F68               	movwf	___llmod@counter& (0+255),b
  8476  003C46  D006               	goto	l1381
  8477  003C48                     
  8478                           ; BSR set to: 0
  8479                           
  8480                           ; BSR set to: 0
  8481  003C48  90D8               	bcf	status,0,c
  8482  003C4A  3764               	rlcf	___llmod@divisor& (0+255),f,b
  8483  003C4C  3765               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  8484  003C4E  3766               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  8485  003C50  3767               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  8486  003C52  2B68               	incf	___llmod@counter& (0+255),f,b
  8487  003C54                     l1381:
  8488                           
  8489                           ; BSR set to: 0
  8490                           
  8491                           ; BSR set to: 0
  8492  003C54  AF67               	btfss	(___llmod@divisor+3)& (0+255),7,b
  8493  003C56  D7F8               	goto	l1382
  8494  003C58                     u8990:
  8495                           
  8496                           ; BSR set to: 0
  8497                           
  8498                           ; BSR set to: 0
  8499                           
  8500                           ; BSR set to: 0
  8501  003C58  5164               	movf	___llmod@divisor& (0+255),w,b
  8502  003C5A  5D60               	subwf	___llmod@dividend& (0+255),w,b
  8503  003C5C  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
  8504  003C5E  5961               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  8505  003C60  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
  8506  003C62  5962               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  8507  003C64  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
  8508  003C66  5963               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  8509  003C68  A0D8               	btfss	status,0,c
  8510  003C6A  D008               	goto	l1385
  8511                           
  8512                           ; BSR set to: 0
  8513  003C6C  5164               	movf	___llmod@divisor& (0+255),w,b
  8514  003C6E  5F60               	subwf	___llmod@dividend& (0+255),f,b
  8515  003C70  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
  8516  003C72  5B61               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  8517  003C74  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
  8518  003C76  5B62               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  8519  003C78  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
  8520  003C7A  5B63               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  8521  003C7C                     l1385:
  8522                           
  8523                           ; BSR set to: 0
  8524                           
  8525                           ; BSR set to: 0
  8526  003C7C  90D8               	bcf	status,0,c
  8527  003C7E  3367               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  8528  003C80  3366               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  8529  003C82  3365               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  8530  003C84  3364               	rrcf	___llmod@divisor& (0+255),f,b
  8531                           
  8532                           ; BSR set to: 0
  8533  003C86  2F68               	decfsz	___llmod@counter& (0+255),f,b
  8534  003C88  D7E7               	goto	u8990
  8535  003C8A                     l1386:
  8536                           
  8537                           ; BSR set to: 0
  8538                           
  8539                           ; BSR set to: 0
  8540  003C8A  C060  F060         	movff	___llmod@dividend,?___llmod
  8541  003C8E  C061  F061         	movff	___llmod@dividend+1,?___llmod+1
  8542  003C92  C062  F062         	movff	___llmod@dividend+2,?___llmod+2
  8543  003C96  C063  F063         	movff	___llmod@dividend+3,?___llmod+3
  8544                           
  8545                           ; BSR set to: 0
  8546  003C9A  0012               	return		;funcret
  8547  003C9C                     __end_of___llmod:
  8548                           	opt stack 0
  8549                           tblptru	equ	0xFF8
  8550                           tblptrh	equ	0xFF7
  8551                           tblptrl	equ	0xFF6
  8552                           tablat	equ	0xFF5
  8553                           prodh	equ	0xFF4
  8554                           prodl	equ	0xFF3
  8555                           intcon	equ	0xFF2
  8556                           intcon3	equ	0xFF0
  8557                           postinc0	equ	0xFEE
  8558                           plusw0	equ	0xFEB
  8559                           fsr0h	equ	0xFEA
  8560                           fsr0l	equ	0xFE9
  8561                           wreg	equ	0xFE8
  8562                           indf1	equ	0xFE7
  8563                           postinc1	equ	0xFE6
  8564                           postdec1	equ	0xFE5
  8565                           plusw1	equ	0xFE3
  8566                           fsr1h	equ	0xFE2
  8567                           fsr1l	equ	0xFE1
  8568                           indf2	equ	0xFDF
  8569                           postinc2	equ	0xFDE
  8570                           postdec2	equ	0xFDD
  8571                           plusw2	equ	0xFDB
  8572                           fsr2h	equ	0xFDA
  8573                           fsr2l	equ	0xFD9
  8574                           status	equ	0xFD8
  8575                           
  8576 ;; *************** function ___lldiv *****************
  8577 ;; Defined at:
  8578 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  8579 ;; Parameters:    Size  Location     Type
  8580 ;;  dividend        4    6[BANK0 ] unsigned long 
  8581 ;;  divisor         4   10[BANK0 ] unsigned long 
  8582 ;; Auto vars:     Size  Location     Type
  8583 ;;  quotient        4   14[BANK0 ] unsigned long 
  8584 ;;  counter         1   18[BANK0 ] unsigned char 
  8585 ;; Return value:  Size  Location     Type
  8586 ;;                  4    6[BANK0 ] unsigned long 
  8587 ;; Registers used:
  8588 ;;		wreg, status,2, status,0
  8589 ;; Tracked objects:
  8590 ;;		On entry : 0/0
  8591 ;;		On exit  : 0/0
  8592 ;;		Unchanged: 0/0
  8593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8594 ;;      Params:         0       8       0       0       0       0       0       0       0
  8595 ;;      Locals:         0       5       0       0       0       0       0       0       0
  8596 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8597 ;;      Totals:         0      13       0       0       0       0       0       0       0
  8598 ;;Total ram usage:       13 bytes
  8599 ;; Hardware stack levels used:    1
  8600 ;; Hardware stack levels required when called:    4
  8601 ;; This function calls:
  8602 ;;		Nothing
  8603 ;; This function is called by:
  8604 ;;		_intToString
  8605 ;; This function uses a non-reentrant model
  8606 ;;
  8607                           
  8608                           	psect	text23
  8609  003794                     __ptext23:
  8610                           	opt stack 0
  8611  003794                     ___lldiv:
  8612                           	opt stack 24
  8613                           
  8614                           ; BSR set to: 0
  8615                           ;incstack = 0
  8616  003794  0E00               	movlw	0
  8617  003796  0100               	movlb	0	; () banked
  8618  003798  6F6E               	movwf	___lldiv@quotient& (0+255),b
  8619  00379A  0E00               	movlw	0
  8620  00379C  6F6F               	movwf	(___lldiv@quotient+1)& (0+255),b
  8621  00379E  0E00               	movlw	0
  8622  0037A0  6F70               	movwf	(___lldiv@quotient+2)& (0+255),b
  8623  0037A2  0E00               	movlw	0
  8624  0037A4  6F71               	movwf	(___lldiv@quotient+3)& (0+255),b
  8625                           
  8626                           ; BSR set to: 0
  8627  0037A6  516A               	movf	___lldiv@divisor& (0+255),w,b
  8628  0037A8  116B               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  8629  0037AA  116C               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  8630  0037AC  116D               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  8631  0037AE  B4D8               	btfsc	status,2,c
  8632  0037B0  D02A               	goto	l1376
  8633                           
  8634                           ; BSR set to: 0
  8635  0037B2  0E01               	movlw	1
  8636  0037B4  6F72               	movwf	___lldiv@counter& (0+255),b
  8637  0037B6  D006               	goto	l1371
  8638  0037B8                     
  8639                           ; BSR set to: 0
  8640                           
  8641                           ; BSR set to: 0
  8642  0037B8  90D8               	bcf	status,0,c
  8643  0037BA  376A               	rlcf	___lldiv@divisor& (0+255),f,b
  8644  0037BC  376B               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  8645  0037BE  376C               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  8646  0037C0  376D               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  8647  0037C2  2B72               	incf	___lldiv@counter& (0+255),f,b
  8648  0037C4                     l1371:
  8649                           
  8650                           ; BSR set to: 0
  8651                           
  8652                           ; BSR set to: 0
  8653  0037C4  AF6D               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  8654  0037C6  D7F8               	goto	l1372
  8655  0037C8                     u8960:
  8656                           
  8657                           ; BSR set to: 0
  8658                           
  8659                           ; BSR set to: 0
  8660                           
  8661                           ; BSR set to: 0
  8662  0037C8  90D8               	bcf	status,0,c
  8663  0037CA  376E               	rlcf	___lldiv@quotient& (0+255),f,b
  8664  0037CC  376F               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  8665  0037CE  3770               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  8666  0037D0  3771               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  8667                           
  8668                           ; BSR set to: 0
  8669  0037D2  516A               	movf	___lldiv@divisor& (0+255),w,b
  8670  0037D4  5D66               	subwf	___lldiv@dividend& (0+255),w,b
  8671  0037D6  516B               	movf	(___lldiv@divisor+1)& (0+255),w,b
  8672  0037D8  5967               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  8673  0037DA  516C               	movf	(___lldiv@divisor+2)& (0+255),w,b
  8674  0037DC  5968               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  8675  0037DE  516D               	movf	(___lldiv@divisor+3)& (0+255),w,b
  8676  0037E0  5969               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  8677  0037E2  A0D8               	btfss	status,0,c
  8678  0037E4  D009               	goto	l1375
  8679                           
  8680                           ; BSR set to: 0
  8681  0037E6  516A               	movf	___lldiv@divisor& (0+255),w,b
  8682  0037E8  5F66               	subwf	___lldiv@dividend& (0+255),f,b
  8683  0037EA  516B               	movf	(___lldiv@divisor+1)& (0+255),w,b
  8684  0037EC  5B67               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  8685  0037EE  516C               	movf	(___lldiv@divisor+2)& (0+255),w,b
  8686  0037F0  5B68               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  8687  0037F2  516D               	movf	(___lldiv@divisor+3)& (0+255),w,b
  8688  0037F4  5B69               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  8689                           
  8690                           ; BSR set to: 0
  8691  0037F6  816E               	bsf	___lldiv@quotient& (0+255),0,b
  8692  0037F8                     l1375:
  8693                           
  8694                           ; BSR set to: 0
  8695                           
  8696                           ; BSR set to: 0
  8697  0037F8  90D8               	bcf	status,0,c
  8698  0037FA  336D               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  8699  0037FC  336C               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  8700  0037FE  336B               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  8701  003800  336A               	rrcf	___lldiv@divisor& (0+255),f,b
  8702                           
  8703                           ; BSR set to: 0
  8704  003802  2F72               	decfsz	___lldiv@counter& (0+255),f,b
  8705  003804  D7E1               	goto	u8960
  8706  003806                     l1376:
  8707                           
  8708                           ; BSR set to: 0
  8709                           
  8710                           ; BSR set to: 0
  8711  003806  C06E  F066         	movff	___lldiv@quotient,?___lldiv
  8712  00380A  C06F  F067         	movff	___lldiv@quotient+1,?___lldiv+1
  8713  00380E  C070  F068         	movff	___lldiv@quotient+2,?___lldiv+2
  8714  003812  C071  F069         	movff	___lldiv@quotient+3,?___lldiv+3
  8715                           
  8716                           ; BSR set to: 0
  8717  003816  0012               	return		;funcret
  8718  003818                     __end_of___lldiv:
  8719                           	opt stack 0
  8720                           tblptru	equ	0xFF8
  8721                           tblptrh	equ	0xFF7
  8722                           tblptrl	equ	0xFF6
  8723                           tablat	equ	0xFF5
  8724                           prodh	equ	0xFF4
  8725                           prodl	equ	0xFF3
  8726                           intcon	equ	0xFF2
  8727                           intcon3	equ	0xFF0
  8728                           postinc0	equ	0xFEE
  8729                           plusw0	equ	0xFEB
  8730                           fsr0h	equ	0xFEA
  8731                           fsr0l	equ	0xFE9
  8732                           wreg	equ	0xFE8
  8733                           indf1	equ	0xFE7
  8734                           postinc1	equ	0xFE6
  8735                           postdec1	equ	0xFE5
  8736                           plusw1	equ	0xFE3
  8737                           fsr1h	equ	0xFE2
  8738                           fsr1l	equ	0xFE1
  8739                           indf2	equ	0xFDF
  8740                           postinc2	equ	0xFDE
  8741                           postdec2	equ	0xFDD
  8742                           plusw2	equ	0xFDB
  8743                           fsr2h	equ	0xFDA
  8744                           fsr2l	equ	0xFD9
  8745                           status	equ	0xFD8
  8746                           
  8747 ;; *************** function _ARP_handleNewPacket *****************
  8748 ;; Defined at:
  8749 ;;		line 28 in file "src/stack/protocols/arp.c"
  8750 ;; Parameters:    Size  Location     Type
  8751 ;;  frame           2  152[BANK0 ] PTR struct ethernetFrame
  8752 ;;		 -> stack.ethernet(15), stack(113), 
  8753 ;; Auto vars:     Size  Location     Type
  8754 ;;  arp            32   84[BANK1 ] struct ARP_message
  8755 ;; Return value:  Size  Location     Type
  8756 ;;                  1    wreg      void 
  8757 ;; Registers used:
  8758 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8759 ;; Tracked objects:
  8760 ;;		On entry : 0/0
  8761 ;;		On exit  : 0/0
  8762 ;;		Unchanged: 0/0
  8763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8764 ;;      Params:         0       2       0       0       0       0       0       0       0
  8765 ;;      Locals:         0       0      32       0       0       0       0       0       0
  8766 ;;      Temps:          0       2       0       0       0       0       0       0       0
  8767 ;;      Totals:         0       4      32       0       0       0       0       0       0
  8768 ;;Total ram usage:       36 bytes
  8769 ;; Hardware stack levels used:    1
  8770 ;; Hardware stack levels required when called:   11
  8771 ;; This function calls:
  8772 ;;		_ARP_parseFromRXBuffer
  8773 ;;		_ARP_replyIfNeeded
  8774 ;;		_ARP_setNewEntry
  8775 ;;		_UARTTransmitText
  8776 ;;		_ethernetController_dropPacket
  8777 ;;		_getSeconds
  8778 ;;		_ipAdressToString
  8779 ;;		_macToString
  8780 ;; This function is called by:
  8781 ;;		_ethernet_rxGetNewFrame
  8782 ;; This function uses a non-reentrant model
  8783 ;;
  8784                           
  8785                           	psect	text24
  8786  0022CA                     __ptext24:
  8787                           	opt stack 0
  8788  0022CA                     _ARP_handleNewPacket:
  8789                           	opt stack 17
  8790                           
  8791                           ;arp.c: 29: ARP_message_t arp;
  8792                           ;arp.c: 30: if (frame->ethertype != ETHERTYPE_ARP) {
  8793                           
  8794                           ; BSR set to: 0
  8795                           ;incstack = 0
  8796  0022CA  0100               	movlb	0	; () banked
  8797  0022CC  EE20 F00E          	lfsr	2,14
  8798  0022D0  51F8               	movf	ARP_handleNewPacket@frame& (0+255),w,b
  8799  0022D2  26D9               	addwf	fsr2l,f,c
  8800  0022D4  51F9               	movf	(ARP_handleNewPacket@frame+1)& (0+255),w,b
  8801  0022D6  22DA               	addwfc	fsr2h,f,c
  8802  0022D8  0E06               	movlw	6
  8803  0022DA  18DE               	xorwf	postinc2,w,c
  8804  0022DC  E104               	bnz	u9800
  8805  0022DE  0E08               	movlw	8
  8806  0022E0  18DE               	xorwf	postinc2,w,c
  8807  0022E2  B4D8               	btfsc	status,2,c
  8808  0022E4  D007               	goto	l864
  8809  0022E6                     u9800:
  8810                           
  8811                           ; BSR set to: 0
  8812                           ;arp.c: 31: ethernetController_dropPacket(frame);
  8813  0022E6  C0F8  F072         	movff	ARP_handleNewPacket@frame,ethernetController_dropPacket@frame
  8814  0022EA  C0F9  F073         	movff	ARP_handleNewPacket@frame+1,ethernetController_dropPacket@frame+1
  8815  0022EE  ECBA  F020         	call	_ethernetController_dropPacket	;wreg free
  8816                           
  8817                           ;arp.c: 32: return;
  8818  0022F2  0012               	return	
  8819  0022F4                     l864:
  8820                           
  8821                           ;arp.c: 33: }
  8822                           ;arp.c: 35: arp = ARP_parseFromRXBuffer(frame);
  8823  0022F4  C0F8  F077         	movff	ARP_handleNewPacket@frame,ARP_parseFromRXBuffer@frame
  8824  0022F8  C0F9  F078         	movff	ARP_handleNewPacket@frame+1,ARP_parseFromRXBuffer@frame+1
  8825  0022FC  EC2A  F005         	call	_ARP_parseFromRXBuffer	;wreg free
  8826  002300  EE21  F054         	lfsr	2,ARP_handleNewPacket@arp
  8827  002304  0E1F               	movlw	31
  8828  002306                     u9811:
  8829  002306  CFEB FFDB          	movff	plusw0,plusw2
  8830  00230A  06E8               	decf	wreg,f,c
  8831  00230C  E2FC               	bc	u9811
  8832                           
  8833                           ;arp.c: 36: if (arp.err.code != (uint16_t)0) {
  8834  00230E  0101               	movlb	1	; () banked
  8835  002310  5172               	movf	(ARP_handleNewPacket@arp+30)& (0+255),w,b
  8836  002312  1173               	iorwf	(ARP_handleNewPacket@arp+31)& (0+255),w,b
  8837  002314  B4D8               	btfsc	status,2,c
  8838  002316  D008               	goto	l866
  8839                           
  8840                           ; BSR set to: 1
  8841                           ;arp.c: 37: UARTTransmitText("[Invalid ARP Message was discarded.]\r\n");
  8842  002318  0EFA               	movlw	low STR_55
  8843  00231A  0100               	movlb	0	; () banked
  8844  00231C  6F98               	movwf	UARTTransmitText@str& (0+255),b
  8845  00231E  0E7C               	movlw	high STR_55
  8846  002320  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  8847  002322  EC18  F01F         	call	_UARTTransmitText	;wreg free
  8848                           
  8849                           ;arp.c: 38: return;
  8850  002326  0012               	return	
  8851  002328                     l866:
  8852                           
  8853                           ;arp.c: 39: }
  8854                           ;arp.c: 40: UARTTransmitText("[");
  8855  002328  0EDD               	movlw	low (STR_58+3)
  8856  00232A  0100               	movlb	0	; () banked
  8857  00232C  6F98               	movwf	UARTTransmitText@str& (0+255),b
  8858  00232E  0E7F               	movlw	high (STR_58+3)
  8859  002330  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  8860  002332  EC18  F01F         	call	_UARTTransmitText	;wreg free
  8861                           
  8862                           ;arp.c: 41: UARTTransmitText(macToString(arp.senderMACAddress));
  8863  002336  EE21  F05C         	lfsr	2,ARP_handleNewPacket@arp+8
  8864  00233A  EE00  F07A         	lfsr	0,macToString@addr
  8865  00233E  0E05               	movlw	5
  8866  002340                     u9831:
  8867  002340  CFDB FFEB          	movff	plusw2,plusw0
  8868  002344  06E8               	decf	wreg,f,c
  8869  002346  E2FC               	bc	u9831
  8870  002348  EC6A  F016         	call	_macToString	;wreg free
  8871  00234C  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  8872  002350  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  8873  002354  EC18  F01F         	call	_UARTTransmitText	;wreg free
  8874                           
  8875                           ;arp.c: 42: UARTTransmitText(", ");
  8876  002358  0E89               	movlw	low (STR_38+17)
  8877  00235A  0100               	movlb	0	; () banked
  8878  00235C  6F98               	movwf	UARTTransmitText@str& (0+255),b
  8879  00235E  0E7E               	movlw	high (STR_38+17)
  8880  002360  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  8881  002362  EC18  F01F         	call	_UARTTransmitText	;wreg free
  8882                           
  8883                           ;arp.c: 43: UARTTransmitText(ipAdressToString(arp.senderIPAddress));
  8884  002366  C162  F067         	movff	ARP_handleNewPacket@arp+14,ipAdressToString@ip
  8885  00236A  C163  F068         	movff	ARP_handleNewPacket@arp+15,ipAdressToString@ip+1
  8886  00236E  C164  F069         	movff	ARP_handleNewPacket@arp+16,ipAdressToString@ip+2
  8887  002372  C165  F06A         	movff	ARP_handleNewPacket@arp+17,ipAdressToString@ip+3
  8888  002376  ECA5  F00E         	call	_ipAdressToString	;wreg free
  8889  00237A  C067  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  8890  00237E  C068  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  8891  002382  EC18  F01F         	call	_UARTTransmitText	;wreg free
  8892                           
  8893                           ;arp.c: 44: UARTTransmitText("]->[");
  8894  002386  0EDA               	movlw	low STR_58
  8895  002388  0100               	movlb	0	; () banked
  8896  00238A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  8897  00238C  0E7F               	movlw	high STR_58
  8898  00238E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  8899  002390  EC18  F01F         	call	_UARTTransmitText	;wreg free
  8900                           
  8901                           ;arp.c: 45: UARTTransmitText(macToString(arp.targetMACAddress));
  8902  002394  EE21  F066         	lfsr	2,ARP_handleNewPacket@arp+18
  8903  002398  EE00  F07A         	lfsr	0,macToString@addr
  8904  00239C  0E05               	movlw	5
  8905  00239E                     u9841:
  8906  00239E  CFDB FFEB          	movff	plusw2,plusw0
  8907  0023A2  06E8               	decf	wreg,f,c
  8908  0023A4  E2FC               	bc	u9841
  8909  0023A6  EC6A  F016         	call	_macToString	;wreg free
  8910  0023AA  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  8911  0023AE  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  8912  0023B2  EC18  F01F         	call	_UARTTransmitText	;wreg free
  8913                           
  8914                           ;arp.c: 46: UARTTransmitText(", ");
  8915  0023B6  0E89               	movlw	low (STR_38+17)
  8916  0023B8  0100               	movlb	0	; () banked
  8917  0023BA  6F98               	movwf	UARTTransmitText@str& (0+255),b
  8918  0023BC  0E7E               	movlw	high (STR_38+17)
  8919  0023BE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  8920  0023C0  EC18  F01F         	call	_UARTTransmitText	;wreg free
  8921                           
  8922                           ;arp.c: 47: UARTTransmitText(ipAdressToString(arp.targetIPAddress));
  8923  0023C4  C16C  F067         	movff	ARP_handleNewPacket@arp+24,ipAdressToString@ip
  8924  0023C8  C16D  F068         	movff	ARP_handleNewPacket@arp+25,ipAdressToString@ip+1
  8925  0023CC  C16E  F069         	movff	ARP_handleNewPacket@arp+26,ipAdressToString@ip+2
  8926  0023D0  C16F  F06A         	movff	ARP_handleNewPacket@arp+27,ipAdressToString@ip+3
  8927  0023D4  ECA5  F00E         	call	_ipAdressToString	;wreg free
  8928  0023D8  C067  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  8929  0023DC  C068  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  8930  0023E0  EC18  F01F         	call	_UARTTransmitText	;wreg free
  8931                           
  8932                           ;arp.c: 48: UARTTransmitText("]");
  8933  0023E4  0EFC               	movlw	low (STR_20+1)
  8934  0023E6  0100               	movlb	0	; () banked
  8935  0023E8  6F98               	movwf	UARTTransmitText@str& (0+255),b
  8936  0023EA  0E7F               	movlw	high (STR_20+1)
  8937  0023EC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  8938  0023EE  EC18  F01F         	call	_UARTTransmitText	;wreg free
  8939                           
  8940                           ;arp.c: 49: if (arp.fIsProbe)
  8941  0023F2  0101               	movlb	1	; () banked
  8942  0023F4  A370               	btfss	(ARP_handleNewPacket@arp+28)& (0+255),1,b
  8943  0023F6  D007               	goto	l867
  8944                           
  8945                           ; BSR set to: 1
  8946                           ;arp.c: 50: UARTTransmitText("[IsProbe]");
  8947  0023F8  0E97               	movlw	low STR_61
  8948  0023FA  0100               	movlb	0	; () banked
  8949  0023FC  6F98               	movwf	UARTTransmitText@str& (0+255),b
  8950  0023FE  0E7F               	movlw	high STR_61
  8951  002400  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  8952  002402  EC18  F01F         	call	_UARTTransmitText	;wreg free
  8953  002406                     l867:
  8954                           
  8955                           ;arp.c: 51: if (arp.fIsGratuitous)
  8956  002406  0101               	movlb	1	; () banked
  8957  002408  A170               	btfss	(ARP_handleNewPacket@arp+28)& (0+255),0,b
  8958  00240A  D007               	goto	l868
  8959                           
  8960                           ; BSR set to: 1
  8961                           ;arp.c: 52: UARTTransmitText("[IsGratuitous]");
  8962  00240C  0E3A               	movlw	low STR_62
  8963  00240E  0100               	movlb	0	; () banked
  8964  002410  6F98               	movwf	UARTTransmitText@str& (0+255),b
  8965  002412  0E7F               	movlw	high STR_62
  8966  002414  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  8967  002416  EC18  F01F         	call	_UARTTransmitText	;wreg free
  8968  00241A                     l868:
  8969                           
  8970                           ;arp.c: 54: ARP_replyIfNeeded(arp);
  8971  00241A  EE21  F054         	lfsr	2,ARP_handleNewPacket@arp
  8972  00241E  EE01  F000         	lfsr	0,ARP_replyIfNeeded@request
  8973  002422  0E1F               	movlw	31
  8974  002424                     u9871:
  8975  002424  CFDB FFEB          	movff	plusw2,plusw0
  8976  002428  06E8               	decf	wreg,f,c
  8977  00242A  E2FC               	bc	u9871
  8978  00242C  EC27  F014         	call	_ARP_replyIfNeeded	;wreg free
  8979                           
  8980                           ;arp.c: 55: ARP_setNewEntry(arp.senderMACAddress, arp.senderIPAddress, getSeconds());
  8981  002430  EE21  F05C         	lfsr	2,ARP_handleNewPacket@arp+8
  8982  002434  EE00  F064         	lfsr	0,ARP_setNewEntry@mac
  8983  002438  0E05               	movlw	5
  8984  00243A                     u9881:
  8985  00243A  CFDB FFEB          	movff	plusw2,plusw0
  8986  00243E  06E8               	decf	wreg,f,c
  8987  002440  E2FC               	bc	u9881
  8988  002442  C162  F06A         	movff	ARP_handleNewPacket@arp+14,ARP_setNewEntry@ip
  8989  002446  C163  F06B         	movff	ARP_handleNewPacket@arp+15,ARP_setNewEntry@ip+1
  8990  00244A  C164  F06C         	movff	ARP_handleNewPacket@arp+16,ARP_setNewEntry@ip+2
  8991  00244E  C165  F06D         	movff	ARP_handleNewPacket@arp+17,ARP_setNewEntry@ip+3
  8992  002452  EC3E  F023         	call	_getSeconds	;wreg free
  8993  002456  C060  F06E         	movff	?_getSeconds,ARP_setNewEntry@timestamp
  8994  00245A  C061  F06F         	movff	?_getSeconds+1,ARP_setNewEntry@timestamp+1
  8995  00245E  C062  F070         	movff	?_getSeconds+2,ARP_setNewEntry@timestamp+2
  8996  002462  C063  F071         	movff	?_getSeconds+3,ARP_setNewEntry@timestamp+3
  8997  002466  EC72  F017         	call	_ARP_setNewEntry	;wreg free
  8998  00246A  0012               	return		;funcret
  8999  00246C                     __end_of_ARP_handleNewPacket:
  9000                           	opt stack 0
  9001                           tblptru	equ	0xFF8
  9002                           tblptrh	equ	0xFF7
  9003                           tblptrl	equ	0xFF6
  9004                           tablat	equ	0xFF5
  9005                           prodh	equ	0xFF4
  9006                           prodl	equ	0xFF3
  9007                           intcon	equ	0xFF2
  9008                           intcon3	equ	0xFF0
  9009                           postinc0	equ	0xFEE
  9010                           plusw0	equ	0xFEB
  9011                           fsr0h	equ	0xFEA
  9012                           fsr0l	equ	0xFE9
  9013                           wreg	equ	0xFE8
  9014                           indf1	equ	0xFE7
  9015                           postinc1	equ	0xFE6
  9016                           postdec1	equ	0xFE5
  9017                           plusw1	equ	0xFE3
  9018                           fsr1h	equ	0xFE2
  9019                           fsr1l	equ	0xFE1
  9020                           indf2	equ	0xFDF
  9021                           postinc2	equ	0xFDE
  9022                           postdec2	equ	0xFDD
  9023                           plusw2	equ	0xFDB
  9024                           fsr2h	equ	0xFDA
  9025                           fsr2l	equ	0xFD9
  9026                           status	equ	0xFD8
  9027                           
  9028 ;; *************** function _getSeconds *****************
  9029 ;; Defined at:
  9030 ;;		line 41 in file "src/stack/stack.c"
  9031 ;; Parameters:    Size  Location     Type
  9032 ;;		None
  9033 ;; Auto vars:     Size  Location     Type
  9034 ;;		None
  9035 ;; Return value:  Size  Location     Type
  9036 ;;                  4    0[BANK0 ] unsigned long 
  9037 ;; Registers used:
  9038 ;;		None
  9039 ;; Tracked objects:
  9040 ;;		On entry : 0/0
  9041 ;;		On exit  : 0/0
  9042 ;;		Unchanged: 0/0
  9043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9044 ;;      Params:         0       4       0       0       0       0       0       0       0
  9045 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9046 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9047 ;;      Totals:         0       4       0       0       0       0       0       0       0
  9048 ;;Total ram usage:        4 bytes
  9049 ;; Hardware stack levels used:    1
  9050 ;; Hardware stack levels required when called:    4
  9051 ;; This function calls:
  9052 ;;		Nothing
  9053 ;; This function is called by:
  9054 ;;		_ARP_handleNewPacket
  9055 ;;		_ARP_checkForEntry
  9056 ;;		_ipv4_sendFrame
  9057 ;; This function uses a non-reentrant model
  9058 ;;
  9059                           
  9060                           	psect	text25
  9061  00467C                     __ptext25:
  9062                           	opt stack 0
  9063  00467C                     _getSeconds:
  9064                           	opt stack 24
  9065                           
  9066                           ;stack.c: 42: return seconds;
  9067                           
  9068                           ;incstack = 0
  9069  00467C  C038  F060         	movff	_seconds,?_getSeconds
  9070  004680  C039  F061         	movff	_seconds+1,?_getSeconds+1
  9071  004684  C03A  F062         	movff	_seconds+2,?_getSeconds+2
  9072  004688  C03B  F063         	movff	_seconds+3,?_getSeconds+3
  9073  00468C  0012               	return		;funcret
  9074  00468E                     __end_of_getSeconds:
  9075                           	opt stack 0
  9076                           tblptru	equ	0xFF8
  9077                           tblptrh	equ	0xFF7
  9078                           tblptrl	equ	0xFF6
  9079                           tablat	equ	0xFF5
  9080                           prodh	equ	0xFF4
  9081                           prodl	equ	0xFF3
  9082                           intcon	equ	0xFF2
  9083                           intcon3	equ	0xFF0
  9084                           postinc0	equ	0xFEE
  9085                           plusw0	equ	0xFEB
  9086                           fsr0h	equ	0xFEA
  9087                           fsr0l	equ	0xFE9
  9088                           wreg	equ	0xFE8
  9089                           indf1	equ	0xFE7
  9090                           postinc1	equ	0xFE6
  9091                           postdec1	equ	0xFE5
  9092                           plusw1	equ	0xFE3
  9093                           fsr1h	equ	0xFE2
  9094                           fsr1l	equ	0xFE1
  9095                           indf2	equ	0xFDF
  9096                           postinc2	equ	0xFDE
  9097                           postdec2	equ	0xFDD
  9098                           plusw2	equ	0xFDB
  9099                           fsr2h	equ	0xFDA
  9100                           fsr2l	equ	0xFD9
  9101                           status	equ	0xFD8
  9102                           
  9103 ;; *************** function _ethernetController_dropPacket *****************
  9104 ;; Defined at:
  9105 ;;		line 372 in file "src/enc424j600/ENC424J600.c"
  9106 ;; Parameters:    Size  Location     Type
  9107 ;;  frame           2   18[BANK0 ] PTR struct ethernetFrame
  9108 ;;		 -> stack.ethernet(15), stack(113), 
  9109 ;; Auto vars:     Size  Location     Type
  9110 ;;		None
  9111 ;; Return value:  Size  Location     Type
  9112 ;;                  1    wreg      void 
  9113 ;; Registers used:
  9114 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9115 ;; Tracked objects:
  9116 ;;		On entry : 0/0
  9117 ;;		On exit  : 0/0
  9118 ;;		Unchanged: 0/0
  9119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9120 ;;      Params:         0       2       0       0       0       0       0       0       0
  9121 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9122 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9123 ;;      Totals:         0       2       0       0       0       0       0       0       0
  9124 ;;Total ram usage:        2 bytes
  9125 ;; Hardware stack levels used:    1
  9126 ;; Hardware stack levels required when called:    8
  9127 ;; This function calls:
  9128 ;;		_ENC424J600_setRXTailPointer
  9129 ;;		_ENC424J600_writeSingleByte
  9130 ;;		_ethernetController_getNextPacketPointer
  9131 ;; This function is called by:
  9132 ;;		_ethernet_rxGetNewFrame
  9133 ;;		_ARP_handleNewPacket
  9134 ;;		_ipv4_handleNewPacket
  9135 ;; This function uses a non-reentrant model
  9136 ;;
  9137                           
  9138                           	psect	text26
  9139  004174                     __ptext26:
  9140                           	opt stack 0
  9141  004174                     _ethernetController_dropPacket:
  9142                           	opt stack 19
  9143                           
  9144                           ;ENC424J600.c: 387: if (ethernetController_getNextPacketPointer() == 0x3000) {
  9145                           
  9146                           ;incstack = 0
  9147  004174  EC58  F023         	call	_ethernetController_getNextPacketPointer	;wreg free
  9148  004178  0E30               	movlw	48
  9149  00417A  0100               	movlb	0	; () banked
  9150  00417C  1963               	xorwf	(?_ethernetController_getNextPacketPointer+1)& (0+255),w,b
  9151  00417E  1162               	iorwf	?_ethernetController_getNextPacketPointer& (0+255),w,b
  9152  004180  A4D8               	btfss	status,2,c
  9153  004182  D007               	goto	l173
  9154                           
  9155                           ; BSR set to: 0
  9156                           ;ENC424J600.c: 388: ENC424J600_setRXTailPointer(0x5FFF - 1);
  9157  004184  0E5F               	movlw	95
  9158  004186  6F6F               	movwf	(ENC424J600_setRXTailPointer@addr+1)& (0+255),b
  9159  004188  0EFE               	movlw	254
  9160  00418A  6F6E               	movwf	ENC424J600_setRXTailPointer@addr& (0+255),b
  9161  00418C  ECF3  F021         	call	_ENC424J600_setRXTailPointer	;wreg free
  9162                           
  9163                           ;ENC424J600.c: 389: } else {
  9164  004190  D00B               	goto	l174
  9165  004192                     l173:
  9166                           
  9167                           ;ENC424J600.c: 390: ENC424J600_setRXTailPointer(ethernetController_getNextPacketPointer(
      +                          ) - 2);
  9168  004192  EC58  F023         	call	_ethernetController_getNextPacketPointer	;wreg free
  9169  004196  0EFE               	movlw	254
  9170  004198  0100               	movlb	0	; () banked
  9171  00419A  2562               	addwf	?_ethernetController_getNextPacketPointer& (0+255),w,b
  9172  00419C  6F6E               	movwf	ENC424J600_setRXTailPointer@addr& (0+255),b
  9173  00419E  0EFF               	movlw	255
  9174  0041A0  2163               	addwfc	(?_ethernetController_getNextPacketPointer+1)& (0+255),w,b
  9175  0041A2  6F6F               	movwf	(ENC424J600_setRXTailPointer@addr+1)& (0+255),b
  9176  0041A4  ECF3  F021         	call	_ENC424J600_setRXTailPointer	;wreg free
  9177  0041A8                     l174:
  9178                           
  9179                           ;ENC424J600.c: 391: }
  9180                           ;ENC424J600.c: 393: ENC424J600_writeSingleByte(0b11001100);
  9181  0041A8  0ECC               	movlw	204
  9182  0041AA  EC29  F023         	call	_ENC424J600_writeSingleByte
  9183  0041AE  0012               	return		;funcret
  9184  0041B0                     __end_of_ethernetController_dropPacket:
  9185                           	opt stack 0
  9186                           tblptru	equ	0xFF8
  9187                           tblptrh	equ	0xFF7
  9188                           tblptrl	equ	0xFF6
  9189                           tablat	equ	0xFF5
  9190                           prodh	equ	0xFF4
  9191                           prodl	equ	0xFF3
  9192                           intcon	equ	0xFF2
  9193                           intcon3	equ	0xFF0
  9194                           postinc0	equ	0xFEE
  9195                           plusw0	equ	0xFEB
  9196                           fsr0h	equ	0xFEA
  9197                           fsr0l	equ	0xFE9
  9198                           wreg	equ	0xFE8
  9199                           indf1	equ	0xFE7
  9200                           postinc1	equ	0xFE6
  9201                           postdec1	equ	0xFE5
  9202                           plusw1	equ	0xFE3
  9203                           fsr1h	equ	0xFE2
  9204                           fsr1l	equ	0xFE1
  9205                           indf2	equ	0xFDF
  9206                           postinc2	equ	0xFDE
  9207                           postdec2	equ	0xFDD
  9208                           plusw2	equ	0xFDB
  9209                           fsr2h	equ	0xFDA
  9210                           fsr2l	equ	0xFD9
  9211                           status	equ	0xFD8
  9212                           
  9213 ;; *************** function _ARP_replyIfNeeded *****************
  9214 ;; Defined at:
  9215 ;;		line 128 in file "src/stack/protocols/arp.c"
  9216 ;; Parameters:    Size  Location     Type
  9217 ;;  request        32    0[BANK1 ] struct ARP_message
  9218 ;; Auto vars:     Size  Location     Type
  9219 ;;  reply          32   52[BANK1 ] struct ARP_message
  9220 ;;  targetMAC       6   42[BANK1 ] struct macaddress
  9221 ;;  senderMAC       6   36[BANK1 ] struct macaddress
  9222 ;;  targetIP        4   48[BANK1 ] struct ipv4_address
  9223 ;;  senderIP        4   32[BANK1 ] struct ipv4_address
  9224 ;; Return value:  Size  Location     Type
  9225 ;;                  1    wreg      void 
  9226 ;; Registers used:
  9227 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9228 ;; Tracked objects:
  9229 ;;		On entry : 0/0
  9230 ;;		On exit  : 0/0
  9231 ;;		Unchanged: 0/0
  9232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9233 ;;      Params:         0       0      32       0       0       0       0       0       0
  9234 ;;      Locals:         0       0      52       0       0       0       0       0       0
  9235 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9236 ;;      Totals:         0       0      84       0       0       0       0       0       0
  9237 ;;Total ram usage:       84 bytes
  9238 ;; Hardware stack levels used:    1
  9239 ;; Hardware stack levels required when called:   10
  9240 ;; This function calls:
  9241 ;;		_ARP_send
  9242 ;;		_UARTTransmitText
  9243 ;;		_ethernetController_getMacAddress
  9244 ;;		_ipAdressToString
  9245 ;;		_macToString
  9246 ;; This function is called by:
  9247 ;;		_ARP_handleNewPacket
  9248 ;; This function uses a non-reentrant model
  9249 ;;
  9250                           
  9251                           	psect	text27
  9252  00284E                     __ptext27:
  9253                           	opt stack 0
  9254  00284E                     _ARP_replyIfNeeded:
  9255                           	opt stack 17
  9256                           
  9257                           ;arp.c: 129: if (request.operation != ARP_REQUEST)
  9258                           
  9259                           ;incstack = 0
  9260  00284E  0101               	movlb	1	; () banked
  9261  002850  0506               	decf	(ARP_replyIfNeeded@request+6)& (0+255),w,b
  9262  002852  1107               	iorwf	(ARP_replyIfNeeded@request+7)& (0+255),w,b
  9263  002854  A4D8               	btfss	status,2,c
  9264  002856  0012               	return	
  9265                           
  9266                           ; BSR set to: 1
  9267                           ;arp.c: 135: ARP_message_t reply;
  9268                           ;arp.c: 136: ipv4_address_t senderIP;
  9269                           ;arp.c: 137: ipv4_address_t targetIP;
  9270                           ;arp.c: 138: macaddress_t senderMAC;
  9271                           ;arp.c: 139: macaddress_t targetMAC;
  9272                           ;arp.c: 141: senderMAC = ethernetController_getMacAddress();
  9273                           
  9274                           ; BSR set to: 1
  9275                           
  9276                           ; BSR set to: 1
  9277                           ;arp.c: 130: return;
  9278  002858  EC02  F01D         	call	_ethernetController_getMacAddress	;wreg free
  9279  00285C  EE21  F024         	lfsr	2,ARP_replyIfNeeded@senderMAC
  9280  002860  0E05               	movlw	5
  9281  002862                     u9611:
  9282  002862  CFEB FFDB          	movff	plusw0,plusw2
  9283  002866  06E8               	decf	wreg,f,c
  9284  002868  E2FC               	bc	u9611
  9285                           
  9286                           ;arp.c: 142: targetMAC = request.senderMACAddress;
  9287  00286A  EE21  F008         	lfsr	2,ARP_replyIfNeeded@request+8
  9288  00286E  EE11  F02A         	lfsr	1,ARP_replyIfNeeded@targetMAC
  9289  002872  0E05               	movlw	5
  9290  002874                     u9621:
  9291  002874  CFDB FFE3          	movff	plusw2,plusw1
  9292  002878  06E8               	decf	wreg,f,c
  9293  00287A  E2FC               	bc	u9621
  9294                           
  9295                           ;arp.c: 144: targetIP = request.senderIPAddress;
  9296  00287C  C10E  F130         	movff	ARP_replyIfNeeded@request+14,ARP_replyIfNeeded@targetIP
  9297  002880  C10F  F131         	movff	ARP_replyIfNeeded@request+15,ARP_replyIfNeeded@targetIP+1
  9298  002884  C110  F132         	movff	ARP_replyIfNeeded@request+16,ARP_replyIfNeeded@targetIP+2
  9299  002888  C111  F133         	movff	ARP_replyIfNeeded@request+17,ARP_replyIfNeeded@targetIP+3
  9300                           
  9301                           ;arp.c: 146: reply.hlen = 6;
  9302  00288C  0E06               	movlw	6
  9303  00288E  0101               	movlb	1	; () banked
  9304  002890  6F38               	movwf	(ARP_replyIfNeeded@reply+4)& (0+255),b
  9305                           
  9306                           ; BSR set to: 1
  9307                           ;arp.c: 147: reply.plen = 4;
  9308  002892  0E04               	movlw	4
  9309  002894  6F39               	movwf	(ARP_replyIfNeeded@reply+5)& (0+255),b
  9310                           
  9311                           ; BSR set to: 1
  9312                           ;arp.c: 148: reply.htype = ARP_HTYPE_ETHERNET;
  9313  002896  0E00               	movlw	0
  9314  002898  6F35               	movwf	(ARP_replyIfNeeded@reply+1)& (0+255),b
  9315  00289A  0E01               	movlw	1
  9316  00289C  6F34               	movwf	ARP_replyIfNeeded@reply& (0+255),b
  9317                           
  9318                           ; BSR set to: 1
  9319                           ;arp.c: 149: reply.ptype = ARP_PTYPE_IPv4;
  9320  00289E  0E08               	movlw	8
  9321  0028A0  6F37               	movwf	(ARP_replyIfNeeded@reply+3)& (0+255),b
  9322  0028A2  0E00               	movlw	0
  9323  0028A4  6F36               	movwf	(ARP_replyIfNeeded@reply+2)& (0+255),b
  9324                           
  9325                           ; BSR set to: 1
  9326                           ;arp.c: 150: reply.operation = ARP_REPLY;
  9327  0028A6  0E00               	movlw	0
  9328  0028A8  6F3B               	movwf	(ARP_replyIfNeeded@reply+7)& (0+255),b
  9329  0028AA  0E02               	movlw	2
  9330  0028AC  6F3A               	movwf	(ARP_replyIfNeeded@reply+6)& (0+255),b
  9331                           
  9332                           ; BSR set to: 1
  9333                           ;arp.c: 151: reply.senderIPAddress = senderIP;
  9334  0028AE  C120  F142         	movff	ARP_replyIfNeeded@senderIP,ARP_replyIfNeeded@reply+14
  9335  0028B2  C121  F143         	movff	ARP_replyIfNeeded@senderIP+1,ARP_replyIfNeeded@reply+15
  9336  0028B6  C122  F144         	movff	ARP_replyIfNeeded@senderIP+2,ARP_replyIfNeeded@reply+16
  9337  0028BA  C123  F145         	movff	ARP_replyIfNeeded@senderIP+3,ARP_replyIfNeeded@reply+17
  9338                           
  9339                           ; BSR set to: 1
  9340                           ;arp.c: 152: reply.senderMACAddress = senderMAC;
  9341  0028BE  EE21  F024         	lfsr	2,ARP_replyIfNeeded@senderMAC
  9342  0028C2  EE11  F03C         	lfsr	1,ARP_replyIfNeeded@reply+8
  9343  0028C6  0E05               	movlw	5
  9344  0028C8                     u9631:
  9345  0028C8  CFDB FFE3          	movff	plusw2,plusw1
  9346  0028CC  06E8               	decf	wreg,f,c
  9347  0028CE  E2FC               	bc	u9631
  9348                           
  9349                           ; BSR set to: 1
  9350                           ;arp.c: 153: reply.targetIPAddress = targetIP;
  9351  0028D0  C130  F14C         	movff	ARP_replyIfNeeded@targetIP,ARP_replyIfNeeded@reply+24
  9352  0028D4  C131  F14D         	movff	ARP_replyIfNeeded@targetIP+1,ARP_replyIfNeeded@reply+25
  9353  0028D8  C132  F14E         	movff	ARP_replyIfNeeded@targetIP+2,ARP_replyIfNeeded@reply+26
  9354  0028DC  C133  F14F         	movff	ARP_replyIfNeeded@targetIP+3,ARP_replyIfNeeded@reply+27
  9355                           
  9356                           ; BSR set to: 1
  9357                           ;arp.c: 154: reply.targetMACAddress = targetMAC;
  9358  0028E0  EE21  F02A         	lfsr	2,ARP_replyIfNeeded@targetMAC
  9359  0028E4  EE11  F046         	lfsr	1,ARP_replyIfNeeded@reply+18
  9360  0028E8  0E05               	movlw	5
  9361  0028EA                     u9641:
  9362  0028EA  CFDB FFE3          	movff	plusw2,plusw1
  9363  0028EE  06E8               	decf	wreg,f,c
  9364  0028F0  E2FC               	bc	u9641
  9365                           
  9366                           ; BSR set to: 1
  9367                           ;arp.c: 156: ARP_send(reply);
  9368  0028F2  EE21  F034         	lfsr	2,ARP_replyIfNeeded@reply
  9369  0028F6  EE00  F0A7         	lfsr	0,ARP_send@arp
  9370  0028FA  0E1F               	movlw	31
  9371  0028FC                     u9651:
  9372  0028FC  CFDB FFEB          	movff	plusw2,plusw0
  9373  002900  06E8               	decf	wreg,f,c
  9374  002902  E2FC               	bc	u9651
  9375  002904  ECA5  F00D         	call	_ARP_send	;wreg free
  9376                           
  9377                           ;arp.c: 158: UARTTransmitText("[Reply sent to ");
  9378  002908  0E0A               	movlw	low STR_63
  9379  00290A  0100               	movlb	0	; () banked
  9380  00290C  6F98               	movwf	UARTTransmitText@str& (0+255),b
  9381  00290E  0E7F               	movlw	high STR_63
  9382  002910  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9383  002912  EC18  F01F         	call	_UARTTransmitText	;wreg free
  9384                           
  9385                           ;arp.c: 159: UARTTransmitText(macToString(reply.targetMACAddress));
  9386  002916  EE21  F046         	lfsr	2,ARP_replyIfNeeded@reply+18
  9387  00291A  EE00  F07A         	lfsr	0,macToString@addr
  9388  00291E  0E05               	movlw	5
  9389  002920                     u9661:
  9390  002920  CFDB FFEB          	movff	plusw2,plusw0
  9391  002924  06E8               	decf	wreg,f,c
  9392  002926  E2FC               	bc	u9661
  9393  002928  EC6A  F016         	call	_macToString	;wreg free
  9394  00292C  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  9395  002930  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  9396  002934  EC18  F01F         	call	_UARTTransmitText	;wreg free
  9397                           
  9398                           ;arp.c: 160: UARTTransmitText(", ");
  9399  002938  0E89               	movlw	low (STR_38+17)
  9400  00293A  0100               	movlb	0	; () banked
  9401  00293C  6F98               	movwf	UARTTransmitText@str& (0+255),b
  9402  00293E  0E7E               	movlw	high (STR_38+17)
  9403  002940  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9404  002942  EC18  F01F         	call	_UARTTransmitText	;wreg free
  9405                           
  9406                           ;arp.c: 161: UARTTransmitText(ipAdressToString(reply.targetIPAddress));
  9407  002946  C14C  F067         	movff	ARP_replyIfNeeded@reply+24,ipAdressToString@ip
  9408  00294A  C14D  F068         	movff	ARP_replyIfNeeded@reply+25,ipAdressToString@ip+1
  9409  00294E  C14E  F069         	movff	ARP_replyIfNeeded@reply+26,ipAdressToString@ip+2
  9410  002952  C14F  F06A         	movff	ARP_replyIfNeeded@reply+27,ipAdressToString@ip+3
  9411  002956  ECA5  F00E         	call	_ipAdressToString	;wreg free
  9412  00295A  C067  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  9413  00295E  C068  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  9414  002962  EC18  F01F         	call	_UARTTransmitText	;wreg free
  9415                           
  9416                           ;arp.c: 162: UARTTransmitText("]");
  9417  002966  0EFC               	movlw	low (STR_20+1)
  9418  002968  0100               	movlb	0	; () banked
  9419  00296A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  9420  00296C  0E7F               	movlw	high (STR_20+1)
  9421  00296E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9422  002970  EC18  F01F         	call	_UARTTransmitText	;wreg free
  9423  002974  0012               	return		;funcret
  9424  002976                     __end_of_ARP_replyIfNeeded:
  9425                           	opt stack 0
  9426                           tblptru	equ	0xFF8
  9427                           tblptrh	equ	0xFF7
  9428                           tblptrl	equ	0xFF6
  9429                           tablat	equ	0xFF5
  9430                           prodh	equ	0xFF4
  9431                           prodl	equ	0xFF3
  9432                           intcon	equ	0xFF2
  9433                           intcon3	equ	0xFF0
  9434                           postinc0	equ	0xFEE
  9435                           plusw0	equ	0xFEB
  9436                           fsr0h	equ	0xFEA
  9437                           fsr0l	equ	0xFE9
  9438                           wreg	equ	0xFE8
  9439                           indf1	equ	0xFE7
  9440                           postinc1	equ	0xFE6
  9441                           postdec1	equ	0xFE5
  9442                           plusw1	equ	0xFE3
  9443                           fsr1h	equ	0xFE2
  9444                           fsr1l	equ	0xFE1
  9445                           indf2	equ	0xFDF
  9446                           postinc2	equ	0xFDE
  9447                           postdec2	equ	0xFDD
  9448                           plusw2	equ	0xFDB
  9449                           fsr2h	equ	0xFDA
  9450                           fsr2l	equ	0xFD9
  9451                           status	equ	0xFD8
  9452                           
  9453 ;; *************** function _macToString *****************
  9454 ;; Defined at:
  9455 ;;		line 147 in file "src/system/uart.c"
  9456 ;; Parameters:    Size  Location     Type
  9457 ;;  addr            6   26[BANK0 ] struct macaddress
  9458 ;; Auto vars:     Size  Location     Type
  9459 ;;  i               2   53[BANK0 ] int 
  9460 ;;  address        18   33[BANK0 ] unsigned char [18]
  9461 ;;  j               1   55[BANK0 ] unsigned char 
  9462 ;;  secondDigit     1   52[BANK0 ] unsigned char 
  9463 ;;  firstDigit      1   51[BANK0 ] unsigned char 
  9464 ;; Return value:  Size  Location     Type
  9465 ;;                  2   26[BANK0 ] PTR unsigned char 
  9466 ;; Registers used:
  9467 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9468 ;; Tracked objects:
  9469 ;;		On entry : 0/0
  9470 ;;		On exit  : 0/0
  9471 ;;		Unchanged: 0/0
  9472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9473 ;;      Params:         0       6       0       0       0       0       0       0       0
  9474 ;;      Locals:         0      23       0       0       0       0       0       0       0
  9475 ;;      Temps:          0       1       0       0       0       0       0       0       0
  9476 ;;      Totals:         0      30       0       0       0       0       0       0       0
  9477 ;;Total ram usage:       30 bytes
  9478 ;; Hardware stack levels used:    1
  9479 ;; Hardware stack levels required when called:    4
  9480 ;; This function calls:
  9481 ;;		Nothing
  9482 ;; This function is called by:
  9483 ;;		_ethernet_rxGetNewFrame
  9484 ;;		_main
  9485 ;;		_ARP_handleNewPacket
  9486 ;;		_ARP_replyIfNeeded
  9487 ;;		_ipv4_sendFrame
  9488 ;;		_arpEntryToString
  9489 ;; This function uses a non-reentrant model
  9490 ;;
  9491                           
  9492                           	psect	text28
  9493  002CD4                     __ptext28:
  9494                           	opt stack 0
  9495  002CD4                     _macToString:
  9496                           	opt stack 26
  9497                           
  9498                           ;uart.c: 148: char address[] = "??:??:??:??:??:??";
  9499                           
  9500                           ;incstack = 0
  9501  002CD4  EE22  F0EB         	lfsr	2,macToString@F5794
  9502  002CD8  EE10  F081         	lfsr	1,macToString@address
  9503  002CDC  0E11               	movlw	17
  9504  002CDE                     u8621:
  9505  002CDE  CFDB FFE3          	movff	plusw2,plusw1
  9506  002CE2  06E8               	decf	wreg,f,c
  9507  002CE4  E2FC               	bc	u8621
  9508                           
  9509                           ;uart.c: 149: uint8_t j = 0;
  9510  002CE6  0E00               	movlw	0
  9511  002CE8  0100               	movlb	0	; () banked
  9512  002CEA  6F97               	movwf	macToString@j& (0+255),b
  9513                           
  9514                           ; BSR set to: 0
  9515                           ;uart.c: 150: uint8_t firstDigit;
  9516                           ;uart.c: 151: uint8_t secondDigit;
  9517                           ;uart.c: 153: for (int i = 0; i < 6; i++) {
  9518  002CEC  0E00               	movlw	0
  9519  002CEE  6F96               	movwf	(macToString@i+1)& (0+255),b
  9520  002CF0  0E00               	movlw	0
  9521  002CF2  6F95               	movwf	macToString@i& (0+255),b
  9522                           
  9523                           ; BSR set to: 0
  9524  002CF4  BF96               	btfsc	(macToString@i+1)& (0+255),7,b
  9525  002CF6  D006               	goto	l772
  9526  002CF8  5196               	movf	(macToString@i+1)& (0+255),w,b
  9527  002CFA  E16B               	bnz	l773
  9528  002CFC  0E06               	movlw	6
  9529  002CFE  5D95               	subwf	macToString@i& (0+255),w,b
  9530  002D00  B0D8               	btfsc	status,0,c
  9531  002D02  D067               	goto	u8670
  9532  002D04                     l772:
  9533                           
  9534                           ; BSR set to: 0
  9535                           ;uart.c: 154: firstDigit = ((addr.address[i] & 0xF0) >> 4)&0x0F;
  9536                           
  9537                           ; BSR set to: 0
  9538  002D04  0E7A               	movlw	low macToString@addr
  9539  002D06  2595               	addwf	macToString@i& (0+255),w,b
  9540  002D08  6ED9               	movwf	fsr2l,c
  9541  002D0A  0E00               	movlw	high macToString@addr
  9542  002D0C  2196               	addwfc	(macToString@i+1)& (0+255),w,b
  9543  002D0E  6EDA               	movwf	fsr2h,c
  9544  002D10  50DF               	movf	indf2,w,c
  9545  002D12  6F80               	movwf	??_macToString& (0+255),b
  9546  002D14  3980               	swapf	??_macToString& (0+255),w,b
  9547  002D16  0B0F               	andlw	15
  9548  002D18  0B0F               	andlw	15
  9549  002D1A  6F93               	movwf	macToString@firstDigit& (0+255),b
  9550                           
  9551                           ;uart.c: 155: secondDigit = addr.address[i] & 0x0F;
  9552  002D1C  0E7A               	movlw	low macToString@addr
  9553  002D1E  2595               	addwf	macToString@i& (0+255),w,b
  9554  002D20  6ED9               	movwf	fsr2l,c
  9555  002D22  0E00               	movlw	high macToString@addr
  9556  002D24  2196               	addwfc	(macToString@i+1)& (0+255),w,b
  9557  002D26  6EDA               	movwf	fsr2h,c
  9558  002D28  50DF               	movf	indf2,w,c
  9559  002D2A  0B0F               	andlw	15
  9560  002D2C  6F94               	movwf	macToString@secondDigit& (0+255),b
  9561                           
  9562                           ; BSR set to: 0
  9563                           ;uart.c: 157: firstDigit += 0x30;
  9564  002D2E  0E30               	movlw	48
  9565  002D30  2793               	addwf	macToString@firstDigit& (0+255),f,b
  9566                           
  9567                           ; BSR set to: 0
  9568                           ;uart.c: 158: secondDigit += 0x30;
  9569  002D32  0E30               	movlw	48
  9570  002D34  2794               	addwf	macToString@secondDigit& (0+255),f,b
  9571                           
  9572                           ; BSR set to: 0
  9573                           ;uart.c: 160: if (firstDigit > '9') {
  9574  002D36  0E39               	movlw	57
  9575  002D38  6593               	cpfsgt	macToString@firstDigit& (0+255),b
  9576  002D3A  D00C               	goto	l774
  9577                           
  9578                           ; BSR set to: 0
  9579                           ;uart.c: 161: address[j++] = firstDigit + 7;
  9580  002D3C  5197               	movf	macToString@j& (0+255),w,b
  9581  002D3E  0D01               	mullw	1
  9582  002D40  0E81               	movlw	low macToString@address
  9583  002D42  24F3               	addwf	prodl,w,c
  9584  002D44  6ED9               	movwf	fsr2l,c
  9585  002D46  0E00               	movlw	high macToString@address
  9586  002D48  20F4               	addwfc	prodh,w,c
  9587  002D4A  6EDA               	movwf	fsr2h,c
  9588  002D4C  5193               	movf	macToString@firstDigit& (0+255),w,b
  9589  002D4E  0F07               	addlw	7
  9590  002D50  6EDF               	movwf	indf2,c
  9591  002D52  D00A               	goto	l7374
  9592  002D54                     l774:
  9593                           
  9594                           ; BSR set to: 0
  9595                           ;uart.c: 163: address[j++] = firstDigit;
  9596                           
  9597                           ; BSR set to: 0
  9598  002D54  5197               	movf	macToString@j& (0+255),w,b
  9599  002D56  0D01               	mullw	1
  9600  002D58  0E81               	movlw	low macToString@address
  9601  002D5A  24F3               	addwf	prodl,w,c
  9602  002D5C  6ED9               	movwf	fsr2l,c
  9603  002D5E  0E00               	movlw	high macToString@address
  9604  002D60  20F4               	addwfc	prodh,w,c
  9605  002D62  6EDA               	movwf	fsr2h,c
  9606  002D64  C093  FFDF         	movff	macToString@firstDigit,indf2
  9607  002D68                     l7374:
  9608                           
  9609                           ; BSR set to: 0
  9610  002D68  2B97               	incf	macToString@j& (0+255),f,b
  9611                           
  9612                           ; BSR set to: 0
  9613                           ;uart.c: 164: }
  9614                           ;uart.c: 165: if (secondDigit > '9') {
  9615                           
  9616                           ; BSR set to: 0
  9617  002D6A  0E39               	movlw	57
  9618  002D6C  6594               	cpfsgt	macToString@secondDigit& (0+255),b
  9619  002D6E  D00C               	goto	l776
  9620                           
  9621                           ; BSR set to: 0
  9622                           ;uart.c: 166: address[j++] = secondDigit + 7;
  9623  002D70  5197               	movf	macToString@j& (0+255),w,b
  9624  002D72  0D01               	mullw	1
  9625  002D74  0E81               	movlw	low macToString@address
  9626  002D76  24F3               	addwf	prodl,w,c
  9627  002D78  6ED9               	movwf	fsr2l,c
  9628  002D7A  0E00               	movlw	high macToString@address
  9629  002D7C  20F4               	addwfc	prodh,w,c
  9630  002D7E  6EDA               	movwf	fsr2h,c
  9631  002D80  5194               	movf	macToString@secondDigit& (0+255),w,b
  9632  002D82  0F07               	addlw	7
  9633  002D84  6EDF               	movwf	indf2,c
  9634  002D86  D00A               	goto	l7384
  9635  002D88                     l776:
  9636                           
  9637                           ; BSR set to: 0
  9638                           ;uart.c: 168: address[j++] = secondDigit;
  9639                           
  9640                           ; BSR set to: 0
  9641  002D88  5197               	movf	macToString@j& (0+255),w,b
  9642  002D8A  0D01               	mullw	1
  9643  002D8C  0E81               	movlw	low macToString@address
  9644  002D8E  24F3               	addwf	prodl,w,c
  9645  002D90  6ED9               	movwf	fsr2l,c
  9646  002D92  0E00               	movlw	high macToString@address
  9647  002D94  20F4               	addwfc	prodh,w,c
  9648  002D96  6EDA               	movwf	fsr2h,c
  9649  002D98  C094  FFDF         	movff	macToString@secondDigit,indf2
  9650  002D9C                     l7384:
  9651                           
  9652                           ; BSR set to: 0
  9653  002D9C  2B97               	incf	macToString@j& (0+255),f,b
  9654                           
  9655                           ; BSR set to: 0
  9656                           ;uart.c: 169: }
  9657                           ;uart.c: 171: if (i < 5) {
  9658                           
  9659                           ; BSR set to: 0
  9660  002D9E  BF96               	btfsc	(macToString@i+1)& (0+255),7,b
  9661  002DA0  D006               	goto	u8660
  9662  002DA2  5196               	movf	(macToString@i+1)& (0+255),w,b
  9663  002DA4  E10F               	bnz	l7392
  9664  002DA6  0E05               	movlw	5
  9665  002DA8  5D95               	subwf	macToString@i& (0+255),w,b
  9666  002DAA  B0D8               	btfsc	status,0,c
  9667  002DAC  D00B               	goto	l778
  9668  002DAE                     u8660:
  9669                           
  9670                           ; BSR set to: 0
  9671                           ;uart.c: 172: address[j++] = ':';
  9672  002DAE  5197               	movf	macToString@j& (0+255),w,b
  9673  002DB0  0D01               	mullw	1
  9674  002DB2  0E81               	movlw	low macToString@address
  9675  002DB4  24F3               	addwf	prodl,w,c
  9676  002DB6  6ED9               	movwf	fsr2l,c
  9677  002DB8  0E00               	movlw	high macToString@address
  9678  002DBA  20F4               	addwfc	prodh,w,c
  9679  002DBC  6EDA               	movwf	fsr2h,c
  9680  002DBE  0E3A               	movlw	58
  9681  002DC0  6EDF               	movwf	indf2,c
  9682                           
  9683                           ; BSR set to: 0
  9684  002DC2  2B97               	incf	macToString@j& (0+255),f,b
  9685  002DC4                     l778:
  9686  002DC4                     l7392:
  9687                           
  9688                           ; BSR set to: 0
  9689  002DC4  4B95               	infsnz	macToString@i& (0+255),f,b
  9690  002DC6  2B96               	incf	(macToString@i+1)& (0+255),f,b
  9691                           
  9692                           ; BSR set to: 0
  9693  002DC8  BF96               	btfsc	(macToString@i+1)& (0+255),7,b
  9694  002DCA  D79C               	goto	l772
  9695  002DCC  5196               	movf	(macToString@i+1)& (0+255),w,b
  9696  002DCE  E101               	bnz	l7396
  9697  002DD0  D795               	goto	L1
  9698  002DD2                     u8670:
  9699  002DD2                     l773:
  9700  002DD2                     l7396:
  9701                           
  9702                           ; BSR set to: 0
  9703                           ;uart.c: 173: }
  9704                           ;uart.c: 174: }
  9705                           ;uart.c: 175: return &address;
  9706  002DD2  0E81               	movlw	low macToString@address
  9707  002DD4  6F7A               	movwf	?_macToString& (0+255),b
  9708  002DD6  0E00               	movlw	high macToString@address
  9709  002DD8  6F7B               	movwf	(?_macToString+1)& (0+255),b
  9710  002DDA  0012               	return	
  9711  002DDC                     __end_of_macToString:
  9712                           	opt stack 0
  9713                           tblptru	equ	0xFF8
  9714                           tblptrh	equ	0xFF7
  9715                           tblptrl	equ	0xFF6
  9716                           tablat	equ	0xFF5
  9717                           prodh	equ	0xFF4
  9718                           prodl	equ	0xFF3
  9719                           intcon	equ	0xFF2
  9720                           intcon3	equ	0xFF0
  9721                           postinc0	equ	0xFEE
  9722                           plusw0	equ	0xFEB
  9723                           fsr0h	equ	0xFEA
  9724                           fsr0l	equ	0xFE9
  9725                           wreg	equ	0xFE8
  9726                           indf1	equ	0xFE7
  9727                           postinc1	equ	0xFE6
  9728                           postdec1	equ	0xFE5
  9729                           plusw1	equ	0xFE3
  9730                           fsr1h	equ	0xFE2
  9731                           fsr1l	equ	0xFE1
  9732                           indf2	equ	0xFDF
  9733                           postinc2	equ	0xFDE
  9734                           postdec2	equ	0xFDD
  9735                           plusw2	equ	0xFDB
  9736                           fsr2h	equ	0xFDA
  9737                           fsr2l	equ	0xFD9
  9738                           status	equ	0xFD8
  9739                           
  9740 ;; *************** function _ipAdressToString *****************
  9741 ;; Defined at:
  9742 ;;		line 189 in file "src/system/uart.c"
  9743 ;; Parameters:    Size  Location     Type
  9744 ;;  ip              4    7[BANK0 ] struct ipv4_address
  9745 ;; Auto vars:     Size  Location     Type
  9746 ;;  i               1   28[BANK0 ] unsigned char 
  9747 ;;  hundreds        4   23[BANK0 ] unsigned char [4]
  9748 ;;  tens            4   19[BANK0 ] unsigned char [4]
  9749 ;;  ones            4   15[BANK0 ] unsigned char [4]
  9750 ;;  pointer         1   27[BANK0 ] unsigned char 
  9751 ;; Return value:  Size  Location     Type
  9752 ;;                  2    7[BANK0 ] PTR unsigned char 
  9753 ;; Registers used:
  9754 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9755 ;; Tracked objects:
  9756 ;;		On entry : 0/0
  9757 ;;		On exit  : 0/0
  9758 ;;		Unchanged: 0/0
  9759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9760 ;;      Params:         0       4       0       0       0       0       0       0       0
  9761 ;;      Locals:         0      14       0       0       0       0       0       0       0
  9762 ;;      Temps:          0       4       0       0       0       0       0       0       0
  9763 ;;      Totals:         0      22       0       0       0       0       0       0       0
  9764 ;;Total ram usage:       22 bytes
  9765 ;; Hardware stack levels used:    1
  9766 ;; Hardware stack levels required when called:    5
  9767 ;; This function calls:
  9768 ;;		___lwdiv
  9769 ;;		___lwmod
  9770 ;; This function is called by:
  9771 ;;		_handleStackBackgroundTasks
  9772 ;;		_ARP_handleNewPacket
  9773 ;;		_ARP_replyIfNeeded
  9774 ;;		_ipv4_sendFrame
  9775 ;;		_arpEntryToString
  9776 ;; This function uses a non-reentrant model
  9777 ;;
  9778                           
  9779                           	psect	text29
  9780  001D4A                     __ptext29:
  9781                           	opt stack 0
  9782  001D4A                     _ipAdressToString:
  9783                           	opt stack 23
  9784                           
  9785                           ;uart.c: 190: char static address [] = "???.???.???.???";
  9786                           ;uart.c: 191: uint8_t hundreds[4];
  9787                           ;uart.c: 192: uint8_t tens[4];
  9788                           ;uart.c: 193: uint8_t ones[4];
  9789                           ;uart.c: 194: uint8_t pointer = 0;
  9790                           
  9791                           ; BSR set to: 0
  9792                           ;incstack = 0
  9793  001D4A  0E00               	movlw	0
  9794  001D4C  0100               	movlb	0	; () banked
  9795  001D4E  6F7B               	movwf	ipAdressToString@pointer& (0+255),b
  9796                           
  9797                           ;uart.c: 196: for (uint8_t i = 0; i < 4; i++) {
  9798  001D50  0E00               	movlw	0
  9799  001D52  6F7C               	movwf	ipAdressToString@i& (0+255),b
  9800  001D54                     l7442:
  9801                           
  9802                           ; BSR set to: 0
  9803  001D54  0E03               	movlw	3
  9804  001D56  657C               	cpfsgt	ipAdressToString@i& (0+255),b
  9805  001D58  D001               	goto	l792
  9806  001D5A  D0DF               	goto	u8790
  9807  001D5C                     l792:
  9808                           
  9809                           ; BSR set to: 0
  9810                           ;uart.c: 198: hundreds[i] = ip.address[i] / 100u;
  9811                           
  9812                           ; BSR set to: 0
  9813  001D5C  517C               	movf	ipAdressToString@i& (0+255),w,b
  9814  001D5E  0D01               	mullw	1
  9815  001D60  0E77               	movlw	low ipAdressToString@hundreds
  9816  001D62  24F3               	addwf	prodl,w,c
  9817  001D64  6ED9               	movwf	fsr2l,c
  9818  001D66  0E00               	movlw	high ipAdressToString@hundreds
  9819  001D68  20F4               	addwfc	prodh,w,c
  9820  001D6A  6EDA               	movwf	fsr2h,c
  9821  001D6C  517C               	movf	ipAdressToString@i& (0+255),w,b
  9822  001D6E  0D01               	mullw	1
  9823  001D70  0E67               	movlw	low ipAdressToString@ip
  9824  001D72  24F3               	addwf	prodl,w,c
  9825  001D74  6EE1               	movwf	fsr1l,c
  9826  001D76  0E00               	movlw	high ipAdressToString@ip
  9827  001D78  20F4               	addwfc	prodh,w,c
  9828  001D7A  6EE2               	movwf	fsr1h,c
  9829  001D7C  50E7               	movf	indf1,w,c
  9830  001D7E  6F6B               	movwf	??_ipAdressToString& (0+255),b
  9831  001D80  516B               	movf	??_ipAdressToString& (0+255),w,b
  9832  001D82  6F60               	movwf	___lwdiv@dividend& (0+255),b
  9833  001D84  6B61               	clrf	(___lwdiv@dividend+1)& (0+255),b
  9834  001D86  0E00               	movlw	0
  9835  001D88  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
  9836  001D8A  0E64               	movlw	100
  9837  001D8C  6F62               	movwf	___lwdiv@divisor& (0+255),b
  9838  001D8E  EC6D  F01F         	call	___lwdiv	;wreg free
  9839  001D92  0100               	movlb	0	; () banked
  9840  001D94  5160               	movf	?___lwdiv& (0+255),w,b
  9841  001D96  6EDF               	movwf	indf2,c
  9842                           
  9843                           ;uart.c: 199: tens[i] = (ip.address[i] - hundreds[i]*100u) / 10u;
  9844  001D98  517C               	movf	ipAdressToString@i& (0+255),w,b
  9845  001D9A  0D01               	mullw	1
  9846  001D9C  0E73               	movlw	low ipAdressToString@tens
  9847  001D9E  24F3               	addwf	prodl,w,c
  9848  001DA0  6ED9               	movwf	fsr2l,c
  9849  001DA2  0E00               	movlw	high ipAdressToString@tens
  9850  001DA4  20F4               	addwfc	prodh,w,c
  9851  001DA6  6EDA               	movwf	fsr2h,c
  9852  001DA8  517C               	movf	ipAdressToString@i& (0+255),w,b
  9853  001DAA  0D01               	mullw	1
  9854  001DAC  0E77               	movlw	low ipAdressToString@hundreds
  9855  001DAE  24F3               	addwf	prodl,w,c
  9856  001DB0  6EE1               	movwf	fsr1l,c
  9857  001DB2  0E00               	movlw	high ipAdressToString@hundreds
  9858  001DB4  20F4               	addwfc	prodh,w,c
  9859  001DB6  6EE2               	movwf	fsr1h,c
  9860  001DB8  50E7               	movf	indf1,w,c
  9861  001DBA  6F6B               	movwf	??_ipAdressToString& (0+255),b
  9862  001DBC  516B               	movf	??_ipAdressToString& (0+255),w,b
  9863  001DBE  0D64               	mullw	100
  9864  001DC0  CFF3 F06C          	movff	prodl,??_ipAdressToString+1
  9865  001DC4  CFF4 F06D          	movff	prodh,??_ipAdressToString+2
  9866  001DC8  1F6C               	comf	(??_ipAdressToString+1)& (0+255),f,b
  9867  001DCA  1F6D               	comf	(??_ipAdressToString+2)& (0+255),f,b
  9868  001DCC  4B6C               	infsnz	(??_ipAdressToString+1)& (0+255),f,b
  9869  001DCE  2B6D               	incf	(??_ipAdressToString+2)& (0+255),f,b
  9870  001DD0  517C               	movf	ipAdressToString@i& (0+255),w,b
  9871  001DD2  0D01               	mullw	1
  9872  001DD4  0E67               	movlw	low ipAdressToString@ip
  9873  001DD6  24F3               	addwf	prodl,w,c
  9874  001DD8  6EE1               	movwf	fsr1l,c
  9875  001DDA  0E00               	movlw	high ipAdressToString@ip
  9876  001DDC  20F4               	addwfc	prodh,w,c
  9877  001DDE  6EE2               	movwf	fsr1h,c
  9878  001DE0  50E7               	movf	indf1,w,c
  9879  001DE2  6F6E               	movwf	(??_ipAdressToString+3)& (0+255),b
  9880  001DE4  516E               	movf	(??_ipAdressToString+3)& (0+255),w,b
  9881  001DE6  256C               	addwf	(??_ipAdressToString+1)& (0+255),w,b
  9882  001DE8  6F60               	movwf	___lwdiv@dividend& (0+255),b
  9883  001DEA  0E00               	movlw	0
  9884  001DEC  216D               	addwfc	(??_ipAdressToString+2)& (0+255),w,b
  9885  001DEE  6F61               	movwf	(___lwdiv@dividend+1)& (0+255),b
  9886  001DF0  0E00               	movlw	0
  9887  001DF2  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
  9888  001DF4  0E0A               	movlw	10
  9889  001DF6  6F62               	movwf	___lwdiv@divisor& (0+255),b
  9890  001DF8  EC6D  F01F         	call	___lwdiv	;wreg free
  9891  001DFC  0100               	movlb	0	; () banked
  9892  001DFE  5160               	movf	?___lwdiv& (0+255),w,b
  9893  001E00  6EDF               	movwf	indf2,c
  9894                           
  9895                           ;uart.c: 200: ones[i] = ip.address[i] % 10u;
  9896  001E02  517C               	movf	ipAdressToString@i& (0+255),w,b
  9897  001E04  0D01               	mullw	1
  9898  001E06  0E6F               	movlw	low ipAdressToString@ones
  9899  001E08  24F3               	addwf	prodl,w,c
  9900  001E0A  6ED9               	movwf	fsr2l,c
  9901  001E0C  0E00               	movlw	high ipAdressToString@ones
  9902  001E0E  20F4               	addwfc	prodh,w,c
  9903  001E10  6EDA               	movwf	fsr2h,c
  9904  001E12  517C               	movf	ipAdressToString@i& (0+255),w,b
  9905  001E14  0D01               	mullw	1
  9906  001E16  0E67               	movlw	low ipAdressToString@ip
  9907  001E18  24F3               	addwf	prodl,w,c
  9908  001E1A  6EE1               	movwf	fsr1l,c
  9909  001E1C  0E00               	movlw	high ipAdressToString@ip
  9910  001E1E  20F4               	addwfc	prodh,w,c
  9911  001E20  6EE2               	movwf	fsr1h,c
  9912  001E22  50E7               	movf	indf1,w,c
  9913  001E24  6F6B               	movwf	??_ipAdressToString& (0+255),b
  9914  001E26  516B               	movf	??_ipAdressToString& (0+255),w,b
  9915  001E28  6F60               	movwf	___lwmod@dividend& (0+255),b
  9916  001E2A  6B61               	clrf	(___lwmod@dividend+1)& (0+255),b
  9917  001E2C  0E00               	movlw	0
  9918  001E2E  6F63               	movwf	(___lwmod@divisor+1)& (0+255),b
  9919  001E30  0E0A               	movlw	10
  9920  001E32  6F62               	movwf	___lwmod@divisor& (0+255),b
  9921  001E34  EC56  F020         	call	___lwmod	;wreg free
  9922  001E38  0100               	movlb	0	; () banked
  9923  001E3A  5160               	movf	?___lwmod& (0+255),w,b
  9924  001E3C  6EDF               	movwf	indf2,c
  9925                           
  9926                           ; BSR set to: 0
  9927                           ;uart.c: 202: if (hundreds[i] > 0)
  9928  001E3E  517C               	movf	ipAdressToString@i& (0+255),w,b
  9929  001E40  0D01               	mullw	1
  9930  001E42  0E77               	movlw	low ipAdressToString@hundreds
  9931  001E44  24F3               	addwf	prodl,w,c
  9932  001E46  6ED9               	movwf	fsr2l,c
  9933  001E48  0E00               	movlw	high ipAdressToString@hundreds
  9934  001E4A  20F4               	addwfc	prodh,w,c
  9935  001E4C  6EDA               	movwf	fsr2h,c
  9936  001E4E  50DF               	movf	indf2,w,c
  9937  001E50  B4D8               	btfsc	status,2,c
  9938  001E52  D014               	goto	l794
  9939                           
  9940                           ; BSR set to: 0
  9941                           ;uart.c: 203: address[pointer++] = hundreds[i] + 0x30;
  9942  001E54  517B               	movf	ipAdressToString@pointer& (0+255),w,b
  9943  001E56  0D01               	mullw	1
  9944  001E58  0ECA               	movlw	low ipAdressToString@address
  9945  001E5A  24F3               	addwf	prodl,w,c
  9946  001E5C  6ED9               	movwf	fsr2l,c
  9947  001E5E  0E01               	movlw	high ipAdressToString@address
  9948  001E60  20F4               	addwfc	prodh,w,c
  9949  001E62  6EDA               	movwf	fsr2h,c
  9950  001E64  517C               	movf	ipAdressToString@i& (0+255),w,b
  9951  001E66  0D01               	mullw	1
  9952  001E68  0E77               	movlw	low ipAdressToString@hundreds
  9953  001E6A  24F3               	addwf	prodl,w,c
  9954  001E6C  6EE1               	movwf	fsr1l,c
  9955  001E6E  0E00               	movlw	high ipAdressToString@hundreds
  9956  001E70  20F4               	addwfc	prodh,w,c
  9957  001E72  6EE2               	movwf	fsr1h,c
  9958  001E74  50E7               	movf	indf1,w,c
  9959  001E76  0F30               	addlw	48
  9960  001E78  6EDF               	movwf	indf2,c
  9961                           
  9962                           ; BSR set to: 0
  9963  001E7A  2B7B               	incf	ipAdressToString@pointer& (0+255),f,b
  9964  001E7C                     l794:
  9965                           
  9966                           ; BSR set to: 0
  9967                           ;uart.c: 204: if ((tens[i] > 0) || hundreds[i] > 0)
  9968                           
  9969                           ; BSR set to: 0
  9970  001E7C  517C               	movf	ipAdressToString@i& (0+255),w,b
  9971  001E7E  0D01               	mullw	1
  9972  001E80  0E73               	movlw	low ipAdressToString@tens
  9973  001E82  24F3               	addwf	prodl,w,c
  9974  001E84  6ED9               	movwf	fsr2l,c
  9975  001E86  0E00               	movlw	high ipAdressToString@tens
  9976  001E88  20F4               	addwfc	prodh,w,c
  9977  001E8A  6EDA               	movwf	fsr2h,c
  9978  001E8C  50DF               	movf	indf2,w,c
  9979  001E8E  A4D8               	btfss	status,2,c
  9980  001E90  D00B               	goto	u8770
  9981                           
  9982                           ; BSR set to: 0
  9983  001E92  517C               	movf	ipAdressToString@i& (0+255),w,b
  9984  001E94  0D01               	mullw	1
  9985  001E96  0E77               	movlw	low ipAdressToString@hundreds
  9986  001E98  24F3               	addwf	prodl,w,c
  9987  001E9A  6ED9               	movwf	fsr2l,c
  9988  001E9C  0E00               	movlw	high ipAdressToString@hundreds
  9989  001E9E  20F4               	addwfc	prodh,w,c
  9990  001EA0  6EDA               	movwf	fsr2h,c
  9991  001EA2  50DF               	movf	indf2,w,c
  9992  001EA4  B4D8               	btfsc	status,2,c
  9993  001EA6  D014               	goto	l795
  9994  001EA8                     u8770:
  9995                           
  9996                           ; BSR set to: 0
  9997                           ;uart.c: 205: address[pointer++] = tens[i] + 0x30;
  9998                           
  9999                           ; BSR set to: 0
 10000  001EA8  517B               	movf	ipAdressToString@pointer& (0+255),w,b
 10001  001EAA  0D01               	mullw	1
 10002  001EAC  0ECA               	movlw	low ipAdressToString@address
 10003  001EAE  24F3               	addwf	prodl,w,c
 10004  001EB0  6ED9               	movwf	fsr2l,c
 10005  001EB2  0E01               	movlw	high ipAdressToString@address
 10006  001EB4  20F4               	addwfc	prodh,w,c
 10007  001EB6  6EDA               	movwf	fsr2h,c
 10008  001EB8  517C               	movf	ipAdressToString@i& (0+255),w,b
 10009  001EBA  0D01               	mullw	1
 10010  001EBC  0E73               	movlw	low ipAdressToString@tens
 10011  001EBE  24F3               	addwf	prodl,w,c
 10012  001EC0  6EE1               	movwf	fsr1l,c
 10013  001EC2  0E00               	movlw	high ipAdressToString@tens
 10014  001EC4  20F4               	addwfc	prodh,w,c
 10015  001EC6  6EE2               	movwf	fsr1h,c
 10016  001EC8  50E7               	movf	indf1,w,c
 10017  001ECA  0F30               	addlw	48
 10018  001ECC  6EDF               	movwf	indf2,c
 10019                           
 10020                           ; BSR set to: 0
 10021  001ECE  2B7B               	incf	ipAdressToString@pointer& (0+255),f,b
 10022  001ED0                     l795:
 10023                           
 10024                           ; BSR set to: 0
 10025                           ;uart.c: 206: address[pointer++] = ones[i] + 0x30;
 10026                           
 10027                           ; BSR set to: 0
 10028  001ED0  517B               	movf	ipAdressToString@pointer& (0+255),w,b
 10029  001ED2  0D01               	mullw	1
 10030  001ED4  0ECA               	movlw	low ipAdressToString@address
 10031  001ED6  24F3               	addwf	prodl,w,c
 10032  001ED8  6ED9               	movwf	fsr2l,c
 10033  001EDA  0E01               	movlw	high ipAdressToString@address
 10034  001EDC  20F4               	addwfc	prodh,w,c
 10035  001EDE  6EDA               	movwf	fsr2h,c
 10036  001EE0  517C               	movf	ipAdressToString@i& (0+255),w,b
 10037  001EE2  0D01               	mullw	1
 10038  001EE4  0E6F               	movlw	low ipAdressToString@ones
 10039  001EE6  24F3               	addwf	prodl,w,c
 10040  001EE8  6EE1               	movwf	fsr1l,c
 10041  001EEA  0E00               	movlw	high ipAdressToString@ones
 10042  001EEC  20F4               	addwfc	prodh,w,c
 10043  001EEE  6EE2               	movwf	fsr1h,c
 10044  001EF0  50E7               	movf	indf1,w,c
 10045  001EF2  0F30               	addlw	48
 10046  001EF4  6EDF               	movwf	indf2,c
 10047  001EF6  2B7B               	incf	ipAdressToString@pointer& (0+255),f,b
 10048                           
 10049                           ; BSR set to: 0
 10050                           ;uart.c: 207: if (i != 3)
 10051  001EF8  0E03               	movlw	3
 10052  001EFA  197C               	xorwf	ipAdressToString@i& (0+255),w,b
 10053  001EFC  B4D8               	btfsc	status,2,c
 10054  001EFE  D00B               	goto	l798
 10055                           
 10056                           ; BSR set to: 0
 10057                           ;uart.c: 208: address[pointer++] = '.';
 10058  001F00  517B               	movf	ipAdressToString@pointer& (0+255),w,b
 10059  001F02  0D01               	mullw	1
 10060  001F04  0ECA               	movlw	low ipAdressToString@address
 10061  001F06  24F3               	addwf	prodl,w,c
 10062  001F08  6ED9               	movwf	fsr2l,c
 10063  001F0A  0E01               	movlw	high ipAdressToString@address
 10064  001F0C  20F4               	addwfc	prodh,w,c
 10065  001F0E  6EDA               	movwf	fsr2h,c
 10066  001F10  0E2E               	movlw	46
 10067  001F12  6EDF               	movwf	indf2,c
 10068                           
 10069                           ; BSR set to: 0
 10070  001F14  2B7B               	incf	ipAdressToString@pointer& (0+255),f,b
 10071  001F16                     l798:
 10072                           
 10073                           ; BSR set to: 0
 10074                           
 10075                           ; BSR set to: 0
 10076  001F16  2B7C               	incf	ipAdressToString@i& (0+255),f,b
 10077  001F18  D71D               	goto	l7442
 10078  001F1A                     u8790:
 10079                           
 10080                           ; BSR set to: 0
 10081                           ;uart.c: 209: }
 10082                           ;uart.c: 210: address[pointer] = '\0';
 10083                           
 10084                           ; BSR set to: 0
 10085  001F1A  517B               	movf	ipAdressToString@pointer& (0+255),w,b
 10086  001F1C  0D01               	mullw	1
 10087  001F1E  0ECA               	movlw	low ipAdressToString@address
 10088  001F20  24F3               	addwf	prodl,w,c
 10089  001F22  6ED9               	movwf	fsr2l,c
 10090  001F24  0E01               	movlw	high ipAdressToString@address
 10091  001F26  20F4               	addwfc	prodh,w,c
 10092  001F28  6EDA               	movwf	fsr2h,c
 10093  001F2A  0E00               	movlw	0
 10094  001F2C  6EDF               	movwf	indf2,c
 10095                           
 10096                           ; BSR set to: 0
 10097                           ;uart.c: 211: return address;
 10098  001F2E  0ECA               	movlw	low ipAdressToString@address
 10099  001F30  6F67               	movwf	?_ipAdressToString& (0+255),b
 10100  001F32  0E01               	movlw	high ipAdressToString@address
 10101  001F34  6F68               	movwf	(?_ipAdressToString+1)& (0+255),b
 10102  001F36  0012               	return	
 10103  001F38                     __end_of_ipAdressToString:
 10104                           	opt stack 0
 10105                           tblptru	equ	0xFF8
 10106                           tblptrh	equ	0xFF7
 10107                           tblptrl	equ	0xFF6
 10108                           tablat	equ	0xFF5
 10109                           prodh	equ	0xFF4
 10110                           prodl	equ	0xFF3
 10111                           intcon	equ	0xFF2
 10112                           intcon3	equ	0xFF0
 10113                           postinc0	equ	0xFEE
 10114                           plusw0	equ	0xFEB
 10115                           fsr0h	equ	0xFEA
 10116                           fsr0l	equ	0xFE9
 10117                           wreg	equ	0xFE8
 10118                           indf1	equ	0xFE7
 10119                           postinc1	equ	0xFE6
 10120                           postdec1	equ	0xFE5
 10121                           plusw1	equ	0xFE3
 10122                           fsr1h	equ	0xFE2
 10123                           fsr1l	equ	0xFE1
 10124                           indf2	equ	0xFDF
 10125                           postinc2	equ	0xFDE
 10126                           postdec2	equ	0xFDD
 10127                           plusw2	equ	0xFDB
 10128                           fsr2h	equ	0xFDA
 10129                           fsr2l	equ	0xFD9
 10130                           status	equ	0xFD8
 10131                           
 10132 ;; *************** function ___lwmod *****************
 10133 ;; Defined at:
 10134 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 10135 ;; Parameters:    Size  Location     Type
 10136 ;;  dividend        2    0[BANK0 ] unsigned int 
 10137 ;;  divisor         2    2[BANK0 ] unsigned int 
 10138 ;; Auto vars:     Size  Location     Type
 10139 ;;  counter         1    4[BANK0 ] unsigned char 
 10140 ;; Return value:  Size  Location     Type
 10141 ;;                  2    0[BANK0 ] unsigned int 
 10142 ;; Registers used:
 10143 ;;		wreg, status,2, status,0
 10144 ;; Tracked objects:
 10145 ;;		On entry : 0/0
 10146 ;;		On exit  : 0/0
 10147 ;;		Unchanged: 0/0
 10148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10149 ;;      Params:         0       4       0       0       0       0       0       0       0
 10150 ;;      Locals:         0       1       0       0       0       0       0       0       0
 10151 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10152 ;;      Totals:         0       5       0       0       0       0       0       0       0
 10153 ;;Total ram usage:        5 bytes
 10154 ;; Hardware stack levels used:    1
 10155 ;; Hardware stack levels required when called:    4
 10156 ;; This function calls:
 10157 ;;		Nothing
 10158 ;; This function is called by:
 10159 ;;		_ipAdressToString
 10160 ;; This function uses a non-reentrant model
 10161 ;;
 10162                           
 10163                           	psect	text30
 10164  0040AC                     __ptext30:
 10165                           	opt stack 0
 10166  0040AC                     ___lwmod:
 10167                           	opt stack 23
 10168                           
 10169                           ; BSR set to: 0
 10170                           ;incstack = 0
 10171  0040AC  0100               	movlb	0	; () banked
 10172  0040AE  5162               	movf	___lwmod@divisor& (0+255),w,b
 10173  0040B0  1163               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 10174  0040B2  B4D8               	btfsc	status,2,c
 10175  0040B4  D018               	goto	l1439
 10176                           
 10177                           ; BSR set to: 0
 10178  0040B6  0E01               	movlw	1
 10179  0040B8  6F64               	movwf	___lwmod@counter& (0+255),b
 10180  0040BA  D004               	goto	l1434
 10181  0040BC                     
 10182                           ; BSR set to: 0
 10183                           
 10184                           ; BSR set to: 0
 10185  0040BC  90D8               	bcf	status,0,c
 10186  0040BE  3762               	rlcf	___lwmod@divisor& (0+255),f,b
 10187  0040C0  3763               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 10188  0040C2  2B64               	incf	___lwmod@counter& (0+255),f,b
 10189  0040C4                     l1434:
 10190                           
 10191                           ; BSR set to: 0
 10192                           
 10193                           ; BSR set to: 0
 10194  0040C4  AF63               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 10195  0040C6  D7FA               	goto	l1435
 10196  0040C8                     u8540:
 10197                           
 10198                           ; BSR set to: 0
 10199                           
 10200                           ; BSR set to: 0
 10201                           
 10202                           ; BSR set to: 0
 10203  0040C8  5162               	movf	___lwmod@divisor& (0+255),w,b
 10204  0040CA  5D60               	subwf	___lwmod@dividend& (0+255),w,b
 10205  0040CC  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 10206  0040CE  5961               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 10207  0040D0  A0D8               	btfss	status,0,c
 10208  0040D2  D004               	goto	l1438
 10209                           
 10210                           ; BSR set to: 0
 10211  0040D4  5162               	movf	___lwmod@divisor& (0+255),w,b
 10212  0040D6  5F60               	subwf	___lwmod@dividend& (0+255),f,b
 10213  0040D8  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 10214  0040DA  5B61               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 10215  0040DC                     l1438:
 10216                           
 10217                           ; BSR set to: 0
 10218                           
 10219                           ; BSR set to: 0
 10220  0040DC  90D8               	bcf	status,0,c
 10221  0040DE  3363               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 10222  0040E0  3362               	rrcf	___lwmod@divisor& (0+255),f,b
 10223                           
 10224                           ; BSR set to: 0
 10225  0040E2  2F64               	decfsz	___lwmod@counter& (0+255),f,b
 10226  0040E4  D7F1               	goto	u8540
 10227  0040E6                     l1439:
 10228                           
 10229                           ; BSR set to: 0
 10230                           
 10231                           ; BSR set to: 0
 10232  0040E6  C060  F060         	movff	___lwmod@dividend,?___lwmod
 10233  0040EA  C061  F061         	movff	___lwmod@dividend+1,?___lwmod+1
 10234                           
 10235                           ; BSR set to: 0
 10236  0040EE  0012               	return		;funcret
 10237  0040F0                     __end_of___lwmod:
 10238                           	opt stack 0
 10239                           tblptru	equ	0xFF8
 10240                           tblptrh	equ	0xFF7
 10241                           tblptrl	equ	0xFF6
 10242                           tablat	equ	0xFF5
 10243                           prodh	equ	0xFF4
 10244                           prodl	equ	0xFF3
 10245                           intcon	equ	0xFF2
 10246                           intcon3	equ	0xFF0
 10247                           postinc0	equ	0xFEE
 10248                           plusw0	equ	0xFEB
 10249                           fsr0h	equ	0xFEA
 10250                           fsr0l	equ	0xFE9
 10251                           wreg	equ	0xFE8
 10252                           indf1	equ	0xFE7
 10253                           postinc1	equ	0xFE6
 10254                           postdec1	equ	0xFE5
 10255                           plusw1	equ	0xFE3
 10256                           fsr1h	equ	0xFE2
 10257                           fsr1l	equ	0xFE1
 10258                           indf2	equ	0xFDF
 10259                           postinc2	equ	0xFDE
 10260                           postdec2	equ	0xFDD
 10261                           plusw2	equ	0xFDB
 10262                           fsr2h	equ	0xFDA
 10263                           fsr2l	equ	0xFD9
 10264                           status	equ	0xFD8
 10265                           
 10266 ;; *************** function ___lwdiv *****************
 10267 ;; Defined at:
 10268 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 10269 ;; Parameters:    Size  Location     Type
 10270 ;;  dividend        2    0[BANK0 ] unsigned int 
 10271 ;;  divisor         2    2[BANK0 ] unsigned int 
 10272 ;; Auto vars:     Size  Location     Type
 10273 ;;  quotient        2    5[BANK0 ] unsigned int 
 10274 ;;  counter         1    4[BANK0 ] unsigned char 
 10275 ;; Return value:  Size  Location     Type
 10276 ;;                  2    0[BANK0 ] unsigned int 
 10277 ;; Registers used:
 10278 ;;		wreg, status,2, status,0
 10279 ;; Tracked objects:
 10280 ;;		On entry : 0/0
 10281 ;;		On exit  : 0/0
 10282 ;;		Unchanged: 0/0
 10283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10284 ;;      Params:         0       4       0       0       0       0       0       0       0
 10285 ;;      Locals:         0       3       0       0       0       0       0       0       0
 10286 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10287 ;;      Totals:         0       7       0       0       0       0       0       0       0
 10288 ;;Total ram usage:        7 bytes
 10289 ;; Hardware stack levels used:    1
 10290 ;; Hardware stack levels required when called:    4
 10291 ;; This function calls:
 10292 ;;		Nothing
 10293 ;; This function is called by:
 10294 ;;		_ipAdressToString
 10295 ;; This function uses a non-reentrant model
 10296 ;;
 10297                           
 10298                           	psect	text31
 10299  003EDA                     __ptext31:
 10300                           	opt stack 0
 10301  003EDA                     ___lwdiv:
 10302                           	opt stack 23
 10303                           
 10304                           ; BSR set to: 0
 10305                           ;incstack = 0
 10306  003EDA  0E00               	movlw	0
 10307  003EDC  0100               	movlb	0	; () banked
 10308  003EDE  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
 10309  003EE0  0E00               	movlw	0
 10310  003EE2  6F65               	movwf	___lwdiv@quotient& (0+255),b
 10311                           
 10312                           ; BSR set to: 0
 10313  003EE4  5162               	movf	___lwdiv@divisor& (0+255),w,b
 10314  003EE6  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 10315  003EE8  B4D8               	btfsc	status,2,c
 10316  003EEA  D01C               	goto	l1429
 10317                           
 10318                           ; BSR set to: 0
 10319  003EEC  0E01               	movlw	1
 10320  003EEE  6F64               	movwf	___lwdiv@counter& (0+255),b
 10321  003EF0  D004               	goto	l1424
 10322  003EF2                     
 10323                           ; BSR set to: 0
 10324                           
 10325                           ; BSR set to: 0
 10326  003EF2  90D8               	bcf	status,0,c
 10327  003EF4  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 10328  003EF6  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 10329  003EF8  2B64               	incf	___lwdiv@counter& (0+255),f,b
 10330  003EFA                     l1424:
 10331                           
 10332                           ; BSR set to: 0
 10333                           
 10334                           ; BSR set to: 0
 10335  003EFA  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 10336  003EFC  D7FA               	goto	l1425
 10337  003EFE                     u8510:
 10338                           
 10339                           ; BSR set to: 0
 10340                           
 10341                           ; BSR set to: 0
 10342                           
 10343                           ; BSR set to: 0
 10344  003EFE  90D8               	bcf	status,0,c
 10345  003F00  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 10346  003F02  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 10347                           
 10348                           ; BSR set to: 0
 10349  003F04  5162               	movf	___lwdiv@divisor& (0+255),w,b
 10350  003F06  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 10351  003F08  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 10352  003F0A  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 10353  003F0C  A0D8               	btfss	status,0,c
 10354  003F0E  D005               	goto	l1428
 10355                           
 10356                           ; BSR set to: 0
 10357  003F10  5162               	movf	___lwdiv@divisor& (0+255),w,b
 10358  003F12  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 10359  003F14  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 10360  003F16  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 10361                           
 10362                           ; BSR set to: 0
 10363  003F18  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 10364  003F1A                     l1428:
 10365                           
 10366                           ; BSR set to: 0
 10367                           
 10368                           ; BSR set to: 0
 10369  003F1A  90D8               	bcf	status,0,c
 10370  003F1C  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 10371  003F1E  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 10372                           
 10373                           ; BSR set to: 0
 10374  003F20  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 10375  003F22  D7ED               	goto	u8510
 10376  003F24                     l1429:
 10377                           
 10378                           ; BSR set to: 0
 10379                           
 10380                           ; BSR set to: 0
 10381  003F24  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 10382  003F28  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 10383                           
 10384                           ; BSR set to: 0
 10385  003F2C  0012               	return		;funcret
 10386  003F2E                     __end_of___lwdiv:
 10387                           	opt stack 0
 10388                           tblptru	equ	0xFF8
 10389                           tblptrh	equ	0xFF7
 10390                           tblptrl	equ	0xFF6
 10391                           tablat	equ	0xFF5
 10392                           prodh	equ	0xFF4
 10393                           prodl	equ	0xFF3
 10394                           intcon	equ	0xFF2
 10395                           intcon3	equ	0xFF0
 10396                           postinc0	equ	0xFEE
 10397                           plusw0	equ	0xFEB
 10398                           fsr0h	equ	0xFEA
 10399                           fsr0l	equ	0xFE9
 10400                           wreg	equ	0xFE8
 10401                           indf1	equ	0xFE7
 10402                           postinc1	equ	0xFE6
 10403                           postdec1	equ	0xFE5
 10404                           plusw1	equ	0xFE3
 10405                           fsr1h	equ	0xFE2
 10406                           fsr1l	equ	0xFE1
 10407                           indf2	equ	0xFDF
 10408                           postinc2	equ	0xFDE
 10409                           postdec2	equ	0xFDD
 10410                           plusw2	equ	0xFDB
 10411                           fsr2h	equ	0xFDA
 10412                           fsr2l	equ	0xFD9
 10413                           status	equ	0xFD8
 10414                           
 10415 ;; *************** function _ethernetController_getMacAddress *****************
 10416 ;; Defined at:
 10417 ;;		line 158 in file "src/enc424j600/ENC424J600.c"
 10418 ;; Parameters:    Size  Location     Type
 10419 ;;		None
 10420 ;; Auto vars:     Size  Location     Type
 10421 ;;  mac             6   20[BANK0 ] struct macaddress
 10422 ;; Return value:  Size  Location     Type
 10423 ;;                  6   14[BANK0 ] struct macaddress
 10424 ;; Registers used:
 10425 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 10426 ;; Tracked objects:
 10427 ;;		On entry : 0/0
 10428 ;;		On exit  : 0/0
 10429 ;;		Unchanged: 0/0
 10430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10431 ;;      Params:         0       6       0       0       0       0       0       0       0
 10432 ;;      Locals:         0       6       0       0       0       0       0       0       0
 10433 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10434 ;;      Totals:         0      12       0       0       0       0       0       0       0
 10435 ;;Total ram usage:       12 bytes
 10436 ;; Hardware stack levels used:    1
 10437 ;; Hardware stack levels required when called:    7
 10438 ;; This function calls:
 10439 ;;		_ENC424J600_readControlRegisterUnbanked
 10440 ;; This function is called by:
 10441 ;;		_main
 10442 ;;		_ARP_replyIfNeeded
 10443 ;;		_ARP_sendRequest
 10444 ;;		_ipv4_sendFrame
 10445 ;; This function uses a non-reentrant model
 10446 ;;
 10447                           
 10448                           	psect	text32
 10449  003A04                     __ptext32:
 10450                           	opt stack 0
 10451  003A04                     _ethernetController_getMacAddress:
 10452                           	opt stack 21
 10453                           
 10454                           ;ENC424J600.c: 159: macaddress_t mac;
 10455                           ;ENC424J600.c: 160: ENC424J600_readControlRegisterUnbanked(0x04 + 0x60, &mac.address[0])
      +                          ;
 10456                           
 10457                           ; BSR set to: 0
 10458                           ;incstack = 0
 10459  003A04  0E74               	movlw	low ethernetController_getMacAddress@mac
 10460  003A06  0100               	movlb	0	; () banked
 10461  003A08  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 10462  003A0A  0E00               	movlw	high ethernetController_getMacAddress@mac
 10463  003A0C  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 10464  003A0E  0E64               	movlw	100
 10465  003A10  EC67  F021         	call	_ENC424J600_readControlRegisterUnbanked
 10466                           
 10467                           ;ENC424J600.c: 161: ENC424J600_readControlRegisterUnbanked(0x05 + 0x60, &mac.address[1])
      +                          ;
 10468  003A14  0E75               	movlw	low (ethernetController_getMacAddress@mac+1)
 10469  003A16  0100               	movlb	0	; () banked
 10470  003A18  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 10471  003A1A  0E00               	movlw	high (ethernetController_getMacAddress@mac+1)
 10472  003A1C  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 10473  003A1E  0E65               	movlw	101
 10474  003A20  EC67  F021         	call	_ENC424J600_readControlRegisterUnbanked
 10475                           
 10476                           ;ENC424J600.c: 162: ENC424J600_readControlRegisterUnbanked(0x02 + 0x60, &mac.address[2])
      +                          ;
 10477  003A24  0E76               	movlw	low (ethernetController_getMacAddress@mac+2)
 10478  003A26  0100               	movlb	0	; () banked
 10479  003A28  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 10480  003A2A  0E00               	movlw	high (ethernetController_getMacAddress@mac+2)
 10481  003A2C  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 10482  003A2E  0E62               	movlw	98
 10483  003A30  EC67  F021         	call	_ENC424J600_readControlRegisterUnbanked
 10484                           
 10485                           ;ENC424J600.c: 163: ENC424J600_readControlRegisterUnbanked(0x03 + 0x60, &mac.address[3])
      +                          ;
 10486  003A34  0E77               	movlw	low (ethernetController_getMacAddress@mac+3)
 10487  003A36  0100               	movlb	0	; () banked
 10488  003A38  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 10489  003A3A  0E00               	movlw	high (ethernetController_getMacAddress@mac+3)
 10490  003A3C  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 10491  003A3E  0E63               	movlw	99
 10492  003A40  EC67  F021         	call	_ENC424J600_readControlRegisterUnbanked
 10493                           
 10494                           ;ENC424J600.c: 164: ENC424J600_readControlRegisterUnbanked(0x00 + 0x60, &mac.address[4])
      +                          ;
 10495  003A44  0E78               	movlw	low (ethernetController_getMacAddress@mac+4)
 10496  003A46  0100               	movlb	0	; () banked
 10497  003A48  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 10498  003A4A  0E00               	movlw	high (ethernetController_getMacAddress@mac+4)
 10499  003A4C  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 10500  003A4E  0E60               	movlw	96
 10501  003A50  EC67  F021         	call	_ENC424J600_readControlRegisterUnbanked
 10502                           
 10503                           ;ENC424J600.c: 165: ENC424J600_readControlRegisterUnbanked(0x01 + 0x60, &mac.address[5])
      +                          ;
 10504  003A54  0E79               	movlw	low (ethernetController_getMacAddress@mac+5)
 10505  003A56  0100               	movlb	0	; () banked
 10506  003A58  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 10507  003A5A  0E00               	movlw	high (ethernetController_getMacAddress@mac+5)
 10508  003A5C  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 10509  003A5E  0E61               	movlw	97
 10510  003A60  EC67  F021         	call	_ENC424J600_readControlRegisterUnbanked
 10511                           
 10512                           ;ENC424J600.c: 166: return mac;
 10513  003A64  EE20  F074         	lfsr	2,ethernetController_getMacAddress@mac
 10514  003A68  EE00  F06E         	lfsr	0,?_ethernetController_getMacAddress
 10515  003A6C  0E05               	movlw	5
 10516  003A6E                     u8601:
 10517  003A6E  CFDB FFEB          	movff	plusw2,plusw0
 10518  003A72  06E8               	decf	wreg,f,c
 10519  003A74  E2FC               	bc	u8601
 10520  003A76  0012               	return	
 10521  003A78                     __end_of_ethernetController_getMacAddress:
 10522                           	opt stack 0
 10523                           tblptru	equ	0xFF8
 10524                           tblptrh	equ	0xFF7
 10525                           tblptrl	equ	0xFF6
 10526                           tablat	equ	0xFF5
 10527                           prodh	equ	0xFF4
 10528                           prodl	equ	0xFF3
 10529                           intcon	equ	0xFF2
 10530                           intcon3	equ	0xFF0
 10531                           postinc0	equ	0xFEE
 10532                           plusw0	equ	0xFEB
 10533                           fsr0h	equ	0xFEA
 10534                           fsr0l	equ	0xFE9
 10535                           wreg	equ	0xFE8
 10536                           indf1	equ	0xFE7
 10537                           postinc1	equ	0xFE6
 10538                           postdec1	equ	0xFE5
 10539                           plusw1	equ	0xFE3
 10540                           fsr1h	equ	0xFE2
 10541                           fsr1l	equ	0xFE1
 10542                           indf2	equ	0xFDF
 10543                           postinc2	equ	0xFDE
 10544                           postdec2	equ	0xFDD
 10545                           plusw2	equ	0xFDB
 10546                           fsr2h	equ	0xFDA
 10547                           fsr2l	equ	0xFD9
 10548                           status	equ	0xFD8
 10549                           
 10550 ;; *************** function _ARP_send *****************
 10551 ;; Defined at:
 10552 ;;		line 165 in file "src/stack/protocols/arp.c"
 10553 ;; Parameters:    Size  Location     Type
 10554 ;;  arp            32   71[BANK0 ] struct ARP_message
 10555 ;; Auto vars:     Size  Location     Type
 10556 ;;  i               1  112[BANK0 ] unsigned char 
 10557 ;;  i               1  111[BANK0 ] unsigned char 
 10558 ;;  i               1  110[BANK0 ] unsigned char 
 10559 ;;  i               1  109[BANK0 ] unsigned char 
 10560 ;;  ethFrame       30  113[BANK0 ] struct ethernetFrame
 10561 ;;  field           9  143[BANK0 ] struct memoryField
 10562 ;;  destination     6  103[BANK0 ] struct macaddress
 10563 ;; Return value:  Size  Location     Type
 10564 ;;                  1    wreg      void 
 10565 ;; Registers used:
 10566 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10567 ;; Tracked objects:
 10568 ;;		On entry : 0/0
 10569 ;;		On exit  : 0/0
 10570 ;;		Unchanged: 0/0
 10571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10572 ;;      Params:         0      32       0       0       0       0       0       0       0
 10573 ;;      Locals:         0      49       0       0       0       0       0       0       0
 10574 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10575 ;;      Totals:         0      81       0       0       0       0       0       0       0
 10576 ;;Total ram usage:       81 bytes
 10577 ;; Hardware stack levels used:    1
 10578 ;; Hardware stack levels required when called:    9
 10579 ;; This function calls:
 10580 ;;		_ethernetController_getSourceMACAddress
 10581 ;;		_ethernetController_sendPacket
 10582 ;;		_ethernetController_streamToTransmitBuffer
 10583 ;;		_ethernet_txFrameRequest
 10584 ;;		_mac_setToBroadcast
 10585 ;; This function is called by:
 10586 ;;		_ARP_replyIfNeeded
 10587 ;;		_ARP_sendRequest
 10588 ;; This function uses a non-reentrant model
 10589 ;;
 10590                           
 10591                           	psect	text33
 10592  001B4A                     __ptext33:
 10593                           	opt stack 0
 10594  001B4A                     _ARP_send:
 10595                           	opt stack 18
 10596                           
 10597                           ;arp.c: 166: memoryField_t field;
 10598                           ;arp.c: 167: macaddress_t destination;
 10599                           ;arp.c: 168: ethernetFrame_t ethFrame;
 10600                           ;arp.c: 169: mac_setToBroadcast(&destination);
 10601                           
 10602                           ;incstack = 0
 10603  001B4A  0EC7               	movlw	low ARP_send@destination
 10604  001B4C  0100               	movlb	0	; () banked
 10605  001B4E  6F60               	movwf	mac_setToBroadcast@mac& (0+255),b
 10606  001B50  0E00               	movlw	high ARP_send@destination
 10607  001B52  6F61               	movwf	(mac_setToBroadcast@mac+1)& (0+255),b
 10608  001B54  EC59  F022         	call	_mac_setToBroadcast	;wreg free
 10609                           
 10610                           ;arp.c: 171: ethFrame.length = 36;
 10611  001B58  0E00               	movlw	0
 10612  001B5A  0100               	movlb	0	; () banked
 10613  001B5C  6FD2               	movwf	(ARP_send@ethFrame+1)& (0+255),b
 10614  001B5E  0E24               	movlw	36
 10615  001B60  6FD1               	movwf	ARP_send@ethFrame& (0+255),b
 10616                           
 10617                           ; BSR set to: 0
 10618                           ;arp.c: 172: ethFrame.destination = arp.targetMACAddress;
 10619  001B62  EE20  F0B9         	lfsr	2,ARP_send@arp+18
 10620  001B66  EE10  F0D9         	lfsr	1,ARP_send@ethFrame+8
 10621  001B6A  0E05               	movlw	5
 10622  001B6C                     u8861:
 10623  001B6C  CFDB FFE3          	movff	plusw2,plusw1
 10624  001B70  06E8               	decf	wreg,f,c
 10625  001B72  E2FC               	bc	u8861
 10626                           
 10627                           ; BSR set to: 0
 10628                           ;arp.c: 173: ethFrame.source = ethernetController_getSourceMACAddress(field);
 10629  001B74  EE20  F0EF         	lfsr	2,ARP_send@field
 10630  001B78  EE00  F06F         	lfsr	0,ethernetController_getSourceMACAddress@field
 10631  001B7C  0E08               	movlw	8
 10632  001B7E                     u8871:
 10633  001B7E  CFDB FFEB          	movff	plusw2,plusw0
 10634  001B82  06E8               	decf	wreg,f,c
 10635  001B84  E2FC               	bc	u8871
 10636  001B86  ECAD  F01D         	call	_ethernetController_getSourceMACAddress	;wreg free
 10637  001B8A  EE20  F0D3         	lfsr	2,ARP_send@ethFrame+2
 10638  001B8E  0E05               	movlw	5
 10639  001B90                     u8881:
 10640  001B90  CFEB FFDB          	movff	plusw0,plusw2
 10641  001B94  06E8               	decf	wreg,f,c
 10642  001B96  E2FC               	bc	u8881
 10643                           
 10644                           ;arp.c: 174: ethFrame.ethertype = ETHERTYPE_ARP;
 10645  001B98  0E08               	movlw	8
 10646  001B9A  0100               	movlb	0	; () banked
 10647  001B9C  6FE0               	movwf	(ARP_send@ethFrame+15)& (0+255),b
 10648  001B9E  0E06               	movlw	6
 10649  001BA0  6FDF               	movwf	(ARP_send@ethFrame+14)& (0+255),b
 10650                           
 10651                           ; BSR set to: 0
 10652                           ;arp.c: 176: ethernet_txFrameRequest(&ethFrame);
 10653  001BA2  0ED1               	movlw	low ARP_send@ethFrame
 10654  001BA4  6FA2               	movwf	ethernet_txFrameRequest@frame& (0+255),b
 10655  001BA6  0E00               	movlw	high ARP_send@ethFrame
 10656  001BA8  6FA3               	movwf	(ethernet_txFrameRequest@frame+1)& (0+255),b
 10657  001BAA  ECE9  F017         	call	_ethernet_txFrameRequest	;wreg free
 10658                           
 10659                           ;arp.c: 178: if (ethFrame.memory.fOutOfMemory) {
 10660  001BAE  0100               	movlb	0	; () banked
 10661  001BB0  51E8               	movf	(ARP_send@ethFrame+23)& (0+255),w,b
 10662  001BB2  A4D8               	btfss	status,2,c
 10663  001BB4  0012               	return	
 10664                           
 10665                           ; BSR set to: 0
 10666                           ;arp.c: 180: }
 10667                           ;arp.c: 182: field.start = ethFrame.memory.start + 8;
 10668                           
 10669                           ; BSR set to: 0
 10670                           
 10671                           ; BSR set to: 0
 10672                           ;arp.c: 179: return;
 10673  001BB6  0E08               	movlw	8
 10674  001BB8  25E1               	addwf	(ARP_send@ethFrame+16)& (0+255),w,b
 10675  001BBA  6FEF               	movwf	ARP_send@field& (0+255),b
 10676  001BBC  0E00               	movlw	0
 10677  001BBE  21E2               	addwfc	(ARP_send@ethFrame+17)& (0+255),w,b
 10678  001BC0  6FF0               	movwf	(ARP_send@field+1)& (0+255),b
 10679                           
 10680                           ; BSR set to: 0
 10681                           ;arp.c: 183: field.end = ethFrame.memory.end;
 10682  001BC2  C0E3  F0F1         	movff	ARP_send@ethFrame+18,ARP_send@field+2
 10683  001BC6  C0E4  F0F2         	movff	ARP_send@ethFrame+19,ARP_send@field+3
 10684                           
 10685                           ; BSR set to: 0
 10686                           ;arp.c: 184: field.length = 28;
 10687  001BCA  0E00               	movlw	0
 10688  001BCC  6FF4               	movwf	(ARP_send@field+5)& (0+255),b
 10689  001BCE  0E1C               	movlw	28
 10690  001BD0  6FF3               	movwf	(ARP_send@field+4)& (0+255),b
 10691                           
 10692                           ; BSR set to: 0
 10693                           ;arp.c: 187: ethernetController_streamToTransmitBuffer((arp.htype & 0xff00) >> 8, field.
      +                          length);
 10694  001BD2  C0F3  F06A         	movff	ARP_send@field+4,ethernetController_streamToTransmitBuffer@len
 10695  001BD6  C0F4  F06B         	movff	ARP_send@field+5,ethernetController_streamToTransmitBuffer@len+1
 10696  001BDA  51A8               	movf	(ARP_send@arp+1)& (0+255),w,b
 10697  001BDC  EC4E  F01E         	call	_ethernetController_streamToTransmitBuffer
 10698                           
 10699                           ;arp.c: 188: ethernetController_streamToTransmitBuffer(arp.htype & 0x00ff, field.length)
      +                          ;
 10700  001BE0  C0F3  F06A         	movff	ARP_send@field+4,ethernetController_streamToTransmitBuffer@len
 10701  001BE4  C0F4  F06B         	movff	ARP_send@field+5,ethernetController_streamToTransmitBuffer@len+1
 10702  001BE8  0100               	movlb	0	; () banked
 10703  001BEA  51A7               	movf	ARP_send@arp& (0+255),w,b
 10704  001BEC  EC4E  F01E         	call	_ethernetController_streamToTransmitBuffer
 10705                           
 10706                           ;arp.c: 189: ethernetController_streamToTransmitBuffer((arp.ptype & 0xff00) >> 8, field.
      +                          length);
 10707  001BF0  C0F3  F06A         	movff	ARP_send@field+4,ethernetController_streamToTransmitBuffer@len
 10708  001BF4  C0F4  F06B         	movff	ARP_send@field+5,ethernetController_streamToTransmitBuffer@len+1
 10709  001BF8  0100               	movlb	0	; () banked
 10710  001BFA  51AA               	movf	(ARP_send@arp+3)& (0+255),w,b
 10711  001BFC  EC4E  F01E         	call	_ethernetController_streamToTransmitBuffer
 10712                           
 10713                           ;arp.c: 190: ethernetController_streamToTransmitBuffer(arp.ptype & 0x00ff, field.length)
      +                          ;
 10714  001C00  C0F3  F06A         	movff	ARP_send@field+4,ethernetController_streamToTransmitBuffer@len
 10715  001C04  C0F4  F06B         	movff	ARP_send@field+5,ethernetController_streamToTransmitBuffer@len+1
 10716  001C08  0100               	movlb	0	; () banked
 10717  001C0A  51A9               	movf	(ARP_send@arp+2)& (0+255),w,b
 10718  001C0C  EC4E  F01E         	call	_ethernetController_streamToTransmitBuffer
 10719                           
 10720                           ;arp.c: 191: ethernetController_streamToTransmitBuffer(arp.hlen, field.length);
 10721  001C10  C0F3  F06A         	movff	ARP_send@field+4,ethernetController_streamToTransmitBuffer@len
 10722  001C14  C0F4  F06B         	movff	ARP_send@field+5,ethernetController_streamToTransmitBuffer@len+1
 10723  001C18  0100               	movlb	0	; () banked
 10724  001C1A  51AB               	movf	(ARP_send@arp+4)& (0+255),w,b
 10725  001C1C  EC4E  F01E         	call	_ethernetController_streamToTransmitBuffer
 10726                           
 10727                           ;arp.c: 192: ethernetController_streamToTransmitBuffer(arp.plen, field.length);
 10728  001C20  C0F3  F06A         	movff	ARP_send@field+4,ethernetController_streamToTransmitBuffer@len
 10729  001C24  C0F4  F06B         	movff	ARP_send@field+5,ethernetController_streamToTransmitBuffer@len+1
 10730  001C28  0100               	movlb	0	; () banked
 10731  001C2A  51AC               	movf	(ARP_send@arp+5)& (0+255),w,b
 10732  001C2C  EC4E  F01E         	call	_ethernetController_streamToTransmitBuffer
 10733                           
 10734                           ;arp.c: 193: ethernetController_streamToTransmitBuffer((arp.operation & 0xff00) >> 8, fi
      +                          eld.length);
 10735  001C30  C0F3  F06A         	movff	ARP_send@field+4,ethernetController_streamToTransmitBuffer@len
 10736  001C34  C0F4  F06B         	movff	ARP_send@field+5,ethernetController_streamToTransmitBuffer@len+1
 10737  001C38  0100               	movlb	0	; () banked
 10738  001C3A  51AE               	movf	(ARP_send@arp+7)& (0+255),w,b
 10739  001C3C  EC4E  F01E         	call	_ethernetController_streamToTransmitBuffer
 10740                           
 10741                           ;arp.c: 194: ethernetController_streamToTransmitBuffer(arp.operation & 0x00ff, field.len
      +                          gth);
 10742  001C40  C0F3  F06A         	movff	ARP_send@field+4,ethernetController_streamToTransmitBuffer@len
 10743  001C44  C0F4  F06B         	movff	ARP_send@field+5,ethernetController_streamToTransmitBuffer@len+1
 10744  001C48  0100               	movlb	0	; () banked
 10745  001C4A  51AD               	movf	(ARP_send@arp+6)& (0+255),w,b
 10746  001C4C  EC4E  F01E         	call	_ethernetController_streamToTransmitBuffer
 10747                           
 10748                           ;arp.c: 195: for (uint8_t i = 0; i < arp.hlen; i++)
 10749  001C50  0E00               	movlw	0
 10750  001C52  0100               	movlb	0	; () banked
 10751  001C54  6FCD               	movwf	ARP_send@i& (0+255),b
 10752  001C56  D015               	goto	l902
 10753  001C58                     
 10754                           ; BSR set to: 0
 10755                           ;arp.c: 196: ethernetController_streamToTransmitBuffer(arp.senderMACAddress.address[i], 
      +                          field.length);
 10756                           
 10757                           ; BSR set to: 0
 10758  001C58  C0F3  F06A         	movff	ARP_send@field+4,ethernetController_streamToTransmitBuffer@len
 10759  001C5C  C0F4  F06B         	movff	ARP_send@field+5,ethernetController_streamToTransmitBuffer@len+1
 10760  001C60  51CD               	movf	ARP_send@i& (0+255),w,b
 10761  001C62  0D01               	mullw	1
 10762  001C64  0E08               	movlw	8
 10763  001C66  26F3               	addwf	prodl,f,c
 10764  001C68  0E00               	movlw	0
 10765  001C6A  22F4               	addwfc	prodh,f,c
 10766  001C6C  0EA7               	movlw	low ARP_send@arp
 10767  001C6E  24F3               	addwf	prodl,w,c
 10768  001C70  6ED9               	movwf	fsr2l,c
 10769  001C72  0E00               	movlw	high ARP_send@arp
 10770  001C74  20F4               	addwfc	prodh,w,c
 10771  001C76  6EDA               	movwf	fsr2h,c
 10772  001C78  50DF               	movf	indf2,w,c
 10773  001C7A  EC4E  F01E         	call	_ethernetController_streamToTransmitBuffer
 10774  001C7E  0100               	movlb	0	; () banked
 10775  001C80  2BCD               	incf	ARP_send@i& (0+255),f,b
 10776  001C82                     l902:
 10777                           
 10778                           ; BSR set to: 0
 10779                           
 10780                           ; BSR set to: 0
 10781  001C82  51AB               	movf	(ARP_send@arp+4)& (0+255),w,b
 10782  001C84  5DCD               	subwf	ARP_send@i& (0+255),w,b
 10783  001C86  A0D8               	btfss	status,0,c
 10784  001C88  D7E7               	goto	l903
 10785                           
 10786                           ; BSR set to: 0
 10787                           ;arp.c: 197: for (uint8_t i = 0; i < arp.plen; i++)
 10788                           
 10789                           ; BSR set to: 0
 10790  001C8A  0E00               	movlw	0
 10791  001C8C  6FCE               	movwf	ARP_send@i_2680& (0+255),b
 10792  001C8E  D015               	goto	l905
 10793  001C90                     
 10794                           ; BSR set to: 0
 10795                           ;arp.c: 198: ethernetController_streamToTransmitBuffer(arp.senderIPAddress.address[i], f
      +                          ield.length);
 10796                           
 10797                           ; BSR set to: 0
 10798  001C90  C0F3  F06A         	movff	ARP_send@field+4,ethernetController_streamToTransmitBuffer@len
 10799  001C94  C0F4  F06B         	movff	ARP_send@field+5,ethernetController_streamToTransmitBuffer@len+1
 10800  001C98  51CE               	movf	ARP_send@i_2680& (0+255),w,b
 10801  001C9A  0D01               	mullw	1
 10802  001C9C  0E0E               	movlw	14
 10803  001C9E  26F3               	addwf	prodl,f,c
 10804  001CA0  0E00               	movlw	0
 10805  001CA2  22F4               	addwfc	prodh,f,c
 10806  001CA4  0EA7               	movlw	low ARP_send@arp
 10807  001CA6  24F3               	addwf	prodl,w,c
 10808  001CA8  6ED9               	movwf	fsr2l,c
 10809  001CAA  0E00               	movlw	high ARP_send@arp
 10810  001CAC  20F4               	addwfc	prodh,w,c
 10811  001CAE  6EDA               	movwf	fsr2h,c
 10812  001CB0  50DF               	movf	indf2,w,c
 10813  001CB2  EC4E  F01E         	call	_ethernetController_streamToTransmitBuffer
 10814  001CB6  0100               	movlb	0	; () banked
 10815  001CB8  2BCE               	incf	ARP_send@i_2680& (0+255),f,b
 10816  001CBA                     l905:
 10817                           
 10818                           ; BSR set to: 0
 10819                           
 10820                           ; BSR set to: 0
 10821  001CBA  51AC               	movf	(ARP_send@arp+5)& (0+255),w,b
 10822  001CBC  5DCE               	subwf	ARP_send@i_2680& (0+255),w,b
 10823  001CBE  A0D8               	btfss	status,0,c
 10824  001CC0  D7E7               	goto	l906
 10825                           
 10826                           ; BSR set to: 0
 10827                           ;arp.c: 199: for (uint8_t i = 0; i < arp.hlen; i++)
 10828                           
 10829                           ; BSR set to: 0
 10830  001CC2  0E00               	movlw	0
 10831  001CC4  6FCF               	movwf	ARP_send@i_2681& (0+255),b
 10832  001CC6  D015               	goto	l908
 10833  001CC8                     
 10834                           ; BSR set to: 0
 10835                           ;arp.c: 200: ethernetController_streamToTransmitBuffer(arp.targetMACAddress.address[i], 
      +                          field.length);
 10836                           
 10837                           ; BSR set to: 0
 10838  001CC8  C0F3  F06A         	movff	ARP_send@field+4,ethernetController_streamToTransmitBuffer@len
 10839  001CCC  C0F4  F06B         	movff	ARP_send@field+5,ethernetController_streamToTransmitBuffer@len+1
 10840  001CD0  51CF               	movf	ARP_send@i_2681& (0+255),w,b
 10841  001CD2  0D01               	mullw	1
 10842  001CD4  0E12               	movlw	18
 10843  001CD6  26F3               	addwf	prodl,f,c
 10844  001CD8  0E00               	movlw	0
 10845  001CDA  22F4               	addwfc	prodh,f,c
 10846  001CDC  0EA7               	movlw	low ARP_send@arp
 10847  001CDE  24F3               	addwf	prodl,w,c
 10848  001CE0  6ED9               	movwf	fsr2l,c
 10849  001CE2  0E00               	movlw	high ARP_send@arp
 10850  001CE4  20F4               	addwfc	prodh,w,c
 10851  001CE6  6EDA               	movwf	fsr2h,c
 10852  001CE8  50DF               	movf	indf2,w,c
 10853  001CEA  EC4E  F01E         	call	_ethernetController_streamToTransmitBuffer
 10854  001CEE  0100               	movlb	0	; () banked
 10855  001CF0  2BCF               	incf	ARP_send@i_2681& (0+255),f,b
 10856  001CF2                     l908:
 10857                           
 10858                           ; BSR set to: 0
 10859                           
 10860                           ; BSR set to: 0
 10861  001CF2  51AB               	movf	(ARP_send@arp+4)& (0+255),w,b
 10862  001CF4  5DCF               	subwf	ARP_send@i_2681& (0+255),w,b
 10863  001CF6  A0D8               	btfss	status,0,c
 10864  001CF8  D7E7               	goto	l909
 10865                           
 10866                           ; BSR set to: 0
 10867                           ;arp.c: 202: for (uint8_t i = 0; i < arp.plen; i++)
 10868                           
 10869                           ; BSR set to: 0
 10870  001CFA  0E00               	movlw	0
 10871  001CFC  6FD0               	movwf	ARP_send@i_2682& (0+255),b
 10872  001CFE  D015               	goto	l911
 10873  001D00                     
 10874                           ; BSR set to: 0
 10875                           ;arp.c: 203: ethernetController_streamToTransmitBuffer(arp.targetIPAddress.address[i], f
      +                          ield.length);
 10876                           
 10877                           ; BSR set to: 0
 10878  001D00  C0F3  F06A         	movff	ARP_send@field+4,ethernetController_streamToTransmitBuffer@len
 10879  001D04  C0F4  F06B         	movff	ARP_send@field+5,ethernetController_streamToTransmitBuffer@len+1
 10880  001D08  51D0               	movf	ARP_send@i_2682& (0+255),w,b
 10881  001D0A  0D01               	mullw	1
 10882  001D0C  0E18               	movlw	24
 10883  001D0E  26F3               	addwf	prodl,f,c
 10884  001D10  0E00               	movlw	0
 10885  001D12  22F4               	addwfc	prodh,f,c
 10886  001D14  0EA7               	movlw	low ARP_send@arp
 10887  001D16  24F3               	addwf	prodl,w,c
 10888  001D18  6ED9               	movwf	fsr2l,c
 10889  001D1A  0E00               	movlw	high ARP_send@arp
 10890  001D1C  20F4               	addwfc	prodh,w,c
 10891  001D1E  6EDA               	movwf	fsr2h,c
 10892  001D20  50DF               	movf	indf2,w,c
 10893  001D22  EC4E  F01E         	call	_ethernetController_streamToTransmitBuffer
 10894  001D26  0100               	movlb	0	; () banked
 10895  001D28  2BD0               	incf	ARP_send@i_2682& (0+255),f,b
 10896  001D2A                     l911:
 10897                           
 10898                           ; BSR set to: 0
 10899                           
 10900                           ; BSR set to: 0
 10901  001D2A  51AC               	movf	(ARP_send@arp+5)& (0+255),w,b
 10902  001D2C  5DD0               	subwf	ARP_send@i_2682& (0+255),w,b
 10903  001D2E  A0D8               	btfss	status,0,c
 10904  001D30  D7E7               	goto	l912
 10905                           
 10906                           ; BSR set to: 0
 10907                           ;arp.c: 205: ethernetController_sendPacket(ethFrame.memory);
 10908                           
 10909                           ; BSR set to: 0
 10910  001D32  EE20  F0E1         	lfsr	2,ARP_send@ethFrame+16
 10911  001D36  EE00  F072         	lfsr	0,ethernetController_sendPacket@field
 10912  001D3A  0E08               	movlw	8
 10913  001D3C                     u8941:
 10914  001D3C  CFDB FFEB          	movff	plusw2,plusw0
 10915  001D40  06E8               	decf	wreg,f,c
 10916  001D42  E2FC               	bc	u8941
 10917  001D44  EC31  F022         	call	_ethernetController_sendPacket	;wreg free
 10918  001D48  0012               	return		;funcret
 10919  001D4A                     __end_of_ARP_send:
 10920                           	opt stack 0
 10921                           tblptru	equ	0xFF8
 10922                           tblptrh	equ	0xFF7
 10923                           tblptrl	equ	0xFF6
 10924                           tablat	equ	0xFF5
 10925                           prodh	equ	0xFF4
 10926                           prodl	equ	0xFF3
 10927                           intcon	equ	0xFF2
 10928                           intcon3	equ	0xFF0
 10929                           postinc0	equ	0xFEE
 10930                           plusw0	equ	0xFEB
 10931                           fsr0h	equ	0xFEA
 10932                           fsr0l	equ	0xFE9
 10933                           wreg	equ	0xFE8
 10934                           indf1	equ	0xFE7
 10935                           postinc1	equ	0xFE6
 10936                           postdec1	equ	0xFE5
 10937                           plusw1	equ	0xFE3
 10938                           fsr1h	equ	0xFE2
 10939                           fsr1l	equ	0xFE1
 10940                           indf2	equ	0xFDF
 10941                           postinc2	equ	0xFDE
 10942                           postdec2	equ	0xFDD
 10943                           plusw2	equ	0xFDB
 10944                           fsr2h	equ	0xFDA
 10945                           fsr2l	equ	0xFD9
 10946                           status	equ	0xFD8
 10947                           
 10948 ;; *************** function _mac_setToBroadcast *****************
 10949 ;; Defined at:
 10950 ;;		line 26 in file "src/eth/mac.c"
 10951 ;; Parameters:    Size  Location     Type
 10952 ;;  mac             2    0[BANK0 ] PTR struct macaddress
 10953 ;;		 -> ARP_sendRequest@targetMAC(6), ARP_send@destination(6), 
 10954 ;; Auto vars:     Size  Location     Type
 10955 ;;  i               1    2[BANK0 ] unsigned char 
 10956 ;; Return value:  Size  Location     Type
 10957 ;;                  1    wreg      void 
 10958 ;; Registers used:
 10959 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10960 ;; Tracked objects:
 10961 ;;		On entry : 0/0
 10962 ;;		On exit  : 0/0
 10963 ;;		Unchanged: 0/0
 10964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10965 ;;      Params:         0       2       0       0       0       0       0       0       0
 10966 ;;      Locals:         0       1       0       0       0       0       0       0       0
 10967 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10968 ;;      Totals:         0       3       0       0       0       0       0       0       0
 10969 ;;Total ram usage:        3 bytes
 10970 ;; Hardware stack levels used:    1
 10971 ;; Hardware stack levels required when called:    4
 10972 ;; This function calls:
 10973 ;;		Nothing
 10974 ;; This function is called by:
 10975 ;;		_ARP_send
 10976 ;;		_ARP_sendRequest
 10977 ;; This function uses a non-reentrant model
 10978 ;;
 10979                           
 10980                           	psect	text34
 10981  0044B2                     __ptext34:
 10982                           	opt stack 0
 10983  0044B2                     _mac_setToBroadcast:
 10984                           	opt stack 23
 10985                           
 10986                           ;mac.c: 27: for (uint8_t i = 0; i < 6; i++)
 10987                           
 10988                           ;incstack = 0
 10989  0044B2  0E00               	movlw	0
 10990  0044B4  0100               	movlb	0	; () banked
 10991  0044B6  6F62               	movwf	mac_setToBroadcast@i& (0+255),b
 10992  0044B8                     l7250:
 10993                           
 10994                           ; BSR set to: 0
 10995  0044B8  0E05               	movlw	5
 10996  0044BA  6562               	cpfsgt	mac_setToBroadcast@i& (0+255),b
 10997  0044BC  D001               	goto	l366
 10998  0044BE  0012               	return	
 10999  0044C0                     l366:
 11000                           
 11001                           ; BSR set to: 0
 11002                           ;mac.c: 28: mac->address[i] = 0xff;
 11003                           
 11004                           ; BSR set to: 0
 11005  0044C0  5162               	movf	mac_setToBroadcast@i& (0+255),w,b
 11006  0044C2  0D01               	mullw	1
 11007  0044C4  50F3               	movf	prodl,w,c
 11008  0044C6  2560               	addwf	mac_setToBroadcast@mac& (0+255),w,b
 11009  0044C8  6ED9               	movwf	fsr2l,c
 11010  0044CA  50F4               	movf	prodh,w,c
 11011  0044CC  2161               	addwfc	(mac_setToBroadcast@mac+1)& (0+255),w,b
 11012  0044CE  6EDA               	movwf	fsr2h,c
 11013  0044D0  0EFF               	movlw	255
 11014  0044D2  6EDF               	movwf	indf2,c
 11015                           
 11016                           ; BSR set to: 0
 11017  0044D4  2B62               	incf	mac_setToBroadcast@i& (0+255),f,b
 11018  0044D6  D7F0               	goto	l7250
 11019  0044D8                     __end_of_mac_setToBroadcast:
 11020                           	opt stack 0
 11021                           tblptru	equ	0xFF8
 11022                           tblptrh	equ	0xFF7
 11023                           tblptrl	equ	0xFF6
 11024                           tablat	equ	0xFF5
 11025                           prodh	equ	0xFF4
 11026                           prodl	equ	0xFF3
 11027                           intcon	equ	0xFF2
 11028                           intcon3	equ	0xFF0
 11029                           postinc0	equ	0xFEE
 11030                           plusw0	equ	0xFEB
 11031                           fsr0h	equ	0xFEA
 11032                           fsr0l	equ	0xFE9
 11033                           wreg	equ	0xFE8
 11034                           indf1	equ	0xFE7
 11035                           postinc1	equ	0xFE6
 11036                           postdec1	equ	0xFE5
 11037                           plusw1	equ	0xFE3
 11038                           fsr1h	equ	0xFE2
 11039                           fsr1l	equ	0xFE1
 11040                           indf2	equ	0xFDF
 11041                           postinc2	equ	0xFDE
 11042                           postdec2	equ	0xFDD
 11043                           plusw2	equ	0xFDB
 11044                           fsr2h	equ	0xFDA
 11045                           fsr2l	equ	0xFD9
 11046                           status	equ	0xFD8
 11047                           
 11048 ;; *************** function _ethernet_txFrameRequest *****************
 11049 ;; Defined at:
 11050 ;;		line 28 in file "src/eth/ethernet.c"
 11051 ;; Parameters:    Size  Location     Type
 11052 ;;  frame           2   66[BANK0 ] PTR struct ethernetFrame
 11053 ;;		 -> ARP_send@ethFrame(30), stack(113), 
 11054 ;; Auto vars:     Size  Location     Type
 11055 ;;  err             3   68[BANK0 ] struct error
 11056 ;; Return value:  Size  Location     Type
 11057 ;;                  3   66[BANK0 ] struct error
 11058 ;; Registers used:
 11059 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11060 ;; Tracked objects:
 11061 ;;		On entry : 0/0
 11062 ;;		On exit  : 0/0
 11063 ;;		Unchanged: 0/0
 11064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11065 ;;      Params:         0       2       0       0       0       0       0       0       0
 11066 ;;      Locals:         0       3       0       0       0       0       0       0       0
 11067 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11068 ;;      Totals:         0       5       0       0       0       0       0       0       0
 11069 ;;Total ram usage:        5 bytes
 11070 ;; Hardware stack levels used:    1
 11071 ;; Hardware stack levels required when called:    8
 11072 ;; This function calls:
 11073 ;;		_ethernetController_writeDestinationMACAddress
 11074 ;;		_ethernetController_writeEtherTypeFieldToBuffer
 11075 ;;		_memory_txFrameRequest
 11076 ;; This function is called by:
 11077 ;;		_ARP_send
 11078 ;;		_ipv4_txFrameRequest
 11079 ;; This function uses a non-reentrant model
 11080 ;;
 11081                           
 11082                           	psect	text35
 11083  002FD2                     __ptext35:
 11084                           	opt stack 0
 11085  002FD2                     _ethernet_txFrameRequest:
 11086                           	opt stack 21
 11087                           
 11088                           ;ethernet.c: 30: error_t err;
 11089                           ;ethernet.c: 31: err.module = ERROR_MODULE_ETHERNET;
 11090                           
 11091                           ; BSR set to: 0
 11092                           ;incstack = 0
 11093  002FD2  0E02               	movlw	2
 11094  002FD4  0100               	movlb	0	; () banked
 11095  002FD6  6FA4               	movwf	ethernet_txFrameRequest@err& (0+255),b
 11096                           
 11097                           ;ethernet.c: 32: err.code = (uint16_t)0;
 11098  002FD8  0E00               	movlw	0
 11099  002FDA  6FA6               	movwf	(ethernet_txFrameRequest@err+2)& (0+255),b
 11100  002FDC  0E00               	movlw	0
 11101  002FDE  6FA5               	movwf	(ethernet_txFrameRequest@err+1)& (0+255),b
 11102                           
 11103                           ; BSR set to: 0
 11104                           ;ethernet.c: 33: frame->memory = memory_txFrameRequest(frame->length);
 11105  002FE0  C0A2  FFD9         	movff	ethernet_txFrameRequest@frame,fsr2l
 11106  002FE4  C0A3  FFDA         	movff	ethernet_txFrameRequest@frame+1,fsr2h
 11107  002FE8  CFDE F084          	movff	postinc2,memory_txFrameRequest@length
 11108  002FEC  CFDD F085          	movff	postdec2,memory_txFrameRequest@length+1
 11109  002FF0  EC64  F000         	call	_memory_txFrameRequest	;wreg free
 11110  002FF4  0100               	movlb	0	; () banked
 11111  002FF6  EE20 F010          	lfsr	2,16
 11112  002FFA  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 11113  002FFC  26D9               	addwf	fsr2l,f,c
 11114  002FFE  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 11115  003000  22DA               	addwfc	fsr2h,f,c
 11116  003002  0E08               	movlw	8
 11117  003004                     u8421:
 11118  003004  CFEB FFDB          	movff	plusw0,plusw2
 11119  003008  06E8               	decf	wreg,f,c
 11120  00300A  E2FC               	bc	u8421
 11121                           
 11122                           ; BSR set to: 0
 11123                           ;ethernet.c: 35: if (frame->memory.fOutOfMemory) {
 11124  00300C  EE20 F017          	lfsr	2,23
 11125  003010  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 11126  003012  26D9               	addwf	fsr2l,f,c
 11127  003014  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 11128  003016  22DA               	addwfc	fsr2h,f,c
 11129  003018  50DF               	movf	indf2,w,c
 11130  00301A  B4D8               	btfsc	status,2,c
 11131  00301C  D007               	goto	l344
 11132                           
 11133                           ; BSR set to: 0
 11134                           ;ethernet.c: 37: err.module = ERROR_MODULE_MEMORY;
 11135  00301E  0E00               	movlw	0
 11136  003020  6FA4               	movwf	ethernet_txFrameRequest@err& (0+255),b
 11137                           
 11138                           ;ethernet.c: 38: err.code = ERROR_MEMORY_OUT_OF_MEMORY;
 11139  003022  0E00               	movlw	0
 11140  003024  6FA6               	movwf	(ethernet_txFrameRequest@err+2)& (0+255),b
 11141  003026  0E65               	movlw	101
 11142  003028  6FA5               	movwf	(ethernet_txFrameRequest@err+1)& (0+255),b
 11143                           
 11144                           ; BSR set to: 0
 11145                           ;ethernet.c: 39: return err;
 11146                           ;	Return value of _ethernet_txFrameRequest is never used
 11147  00302A  0012               	return	
 11148  00302C                     l344:
 11149                           
 11150                           ; BSR set to: 0
 11151                           ;ethernet.c: 40: }
 11152                           ;ethernet.c: 41: if (!frame->memory.fIsAssigned) {
 11153                           
 11154                           ; BSR set to: 0
 11155  00302C  EE20 F016          	lfsr	2,22
 11156  003030  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 11157  003032  26D9               	addwf	fsr2l,f,c
 11158  003034  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 11159  003036  22DA               	addwfc	fsr2h,f,c
 11160  003038  50DF               	movf	indf2,w,c
 11161  00303A  A4D8               	btfss	status,2,c
 11162  00303C  D007               	goto	l346
 11163                           
 11164                           ; BSR set to: 0
 11165                           ;ethernet.c: 43: err.module = ERROR_MODULE_MEMORY;
 11166  00303E  0E00               	movlw	0
 11167  003040  6FA4               	movwf	ethernet_txFrameRequest@err& (0+255),b
 11168                           
 11169                           ;ethernet.c: 44: err.code = ERROR_MEMORY_UNKNOWN;
 11170  003042  0E00               	movlw	0
 11171  003044  6FA6               	movwf	(ethernet_txFrameRequest@err+2)& (0+255),b
 11172  003046  0EC7               	movlw	199
 11173  003048  6FA5               	movwf	(ethernet_txFrameRequest@err+1)& (0+255),b
 11174                           
 11175                           ; BSR set to: 0
 11176                           ;ethernet.c: 45: return err;
 11177                           ;	Return value of _ethernet_txFrameRequest is never used
 11178  00304A  0012               	return	
 11179  00304C                     l346:
 11180                           
 11181                           ; BSR set to: 0
 11182                           ;ethernet.c: 46: }
 11183                           ;ethernet.c: 48: ethernetController_writeDestinationMACAddress(frame->destination, frame
      +                          ->memory);
 11184                           
 11185                           ; BSR set to: 0
 11186  00304C  EE20 F008          	lfsr	2,8
 11187  003050  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 11188  003052  26D9               	addwf	fsr2l,f,c
 11189  003054  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 11190  003056  22DA               	addwfc	fsr2h,f,c
 11191  003058  EE00  F06F         	lfsr	0,ethernetController_writeDestinationMACAddress@addr
 11192  00305C  0E05               	movlw	5
 11193  00305E                     u8451:
 11194  00305E  CFDB FFEB          	movff	plusw2,plusw0
 11195  003062  06E8               	decf	wreg,f,c
 11196  003064  E2FC               	bc	u8451
 11197  003066  EE20 F010          	lfsr	2,16
 11198  00306A  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 11199  00306C  26D9               	addwf	fsr2l,f,c
 11200  00306E  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 11201  003070  22DA               	addwfc	fsr2h,f,c
 11202  003072  EE00  F075         	lfsr	0,ethernetController_writeDestinationMACAddress@field
 11203  003076  0E08               	movlw	8
 11204  003078                     u8461:
 11205  003078  CFDB FFEB          	movff	plusw2,plusw0
 11206  00307C  06E8               	decf	wreg,f,c
 11207  00307E  E2FC               	bc	u8461
 11208  003080  EC0C  F01C         	call	_ethernetController_writeDestinationMACAddress	;wreg free
 11209                           
 11210                           ;ethernet.c: 49: ethernetController_writeEtherTypeFieldToBuffer(frame->ethertype, frame-
      +                          >memory);
 11211  003084  0100               	movlb	0	; () banked
 11212  003086  EE20 F00E          	lfsr	2,14
 11213  00308A  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 11214  00308C  26D9               	addwf	fsr2l,f,c
 11215  00308E  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 11216  003090  22DA               	addwfc	fsr2h,f,c
 11217  003092  CFDE F06F          	movff	postinc2,ethernetController_writeEtherTypeFieldToBuffer@ethtype
 11218  003096  CFDD F070          	movff	postdec2,ethernetController_writeEtherTypeFieldToBuffer@ethtype+1
 11219  00309A  EE20 F010          	lfsr	2,16
 11220  00309E  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 11221  0030A0  26D9               	addwf	fsr2l,f,c
 11222  0030A2  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 11223  0030A4  22DA               	addwfc	fsr2h,f,c
 11224  0030A6  EE00  F071         	lfsr	0,ethernetController_writeEtherTypeFieldToBuffer@field
 11225  0030AA  0E08               	movlw	8
 11226  0030AC                     u8471:
 11227  0030AC  CFDB FFEB          	movff	plusw2,plusw0
 11228  0030B0  06E8               	decf	wreg,f,c
 11229  0030B2  E2FC               	bc	u8471
 11230  0030B4  ECC0  F01F         	call	_ethernetController_writeEtherTypeFieldToBuffer	;wreg free
 11231  0030B8  0012               	return	
 11232  0030BA                     __end_of_ethernet_txFrameRequest:
 11233                           	opt stack 0
 11234                           tblptru	equ	0xFF8
 11235                           tblptrh	equ	0xFF7
 11236                           tblptrl	equ	0xFF6
 11237                           tablat	equ	0xFF5
 11238                           prodh	equ	0xFF4
 11239                           prodl	equ	0xFF3
 11240                           intcon	equ	0xFF2
 11241                           intcon3	equ	0xFF0
 11242                           postinc0	equ	0xFEE
 11243                           plusw0	equ	0xFEB
 11244                           fsr0h	equ	0xFEA
 11245                           fsr0l	equ	0xFE9
 11246                           wreg	equ	0xFE8
 11247                           indf1	equ	0xFE7
 11248                           postinc1	equ	0xFE6
 11249                           postdec1	equ	0xFE5
 11250                           plusw1	equ	0xFE3
 11251                           fsr1h	equ	0xFE2
 11252                           fsr1l	equ	0xFE1
 11253                           indf2	equ	0xFDF
 11254                           postinc2	equ	0xFDE
 11255                           postdec2	equ	0xFDD
 11256                           plusw2	equ	0xFDB
 11257                           fsr2h	equ	0xFDA
 11258                           fsr2l	equ	0xFD9
 11259                           status	equ	0xFD8
 11260                           
 11261 ;; *************** function _memory_txFrameRequest *****************
 11262 ;; Defined at:
 11263 ;;		line 136 in file "src/mem/memoryController.c"
 11264 ;; Parameters:    Size  Location     Type
 11265 ;;  length          2   36[BANK0 ] unsigned int 
 11266 ;; Auto vars:     Size  Location     Type
 11267 ;;  i               1   54[BANK0 ] unsigned char 
 11268 ;;  i               1   55[BANK0 ] unsigned char 
 11269 ;;  fNoOverlapMa    1   53[BANK0 ] unsigned char 
 11270 ;;  field           9   56[BANK0 ] struct memoryField
 11271 ;;  freeIndex       1   65[BANK0 ] unsigned char 
 11272 ;; Return value:  Size  Location     Type
 11273 ;;                  9   36[BANK0 ] struct memoryField
 11274 ;; Registers used:
 11275 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11276 ;; Tracked objects:
 11277 ;;		On entry : 0/0
 11278 ;;		On exit  : 0/0
 11279 ;;		Unchanged: 0/0
 11280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11281 ;;      Params:         0       9       0       0       0       0       0       0       0
 11282 ;;      Locals:         0      15       0       0       0       0       0       0       0
 11283 ;;      Temps:          0       6       0       0       0       0       0       0       0
 11284 ;;      Totals:         0      30       0       0       0       0       0       0       0
 11285 ;;Total ram usage:       30 bytes
 11286 ;; Hardware stack levels used:    1
 11287 ;; Hardware stack levels required when called:    6
 11288 ;; This function calls:
 11289 ;;		___wmul
 11290 ;;		_checkForOverlap
 11291 ;;		_entireMemoryEmpty
 11292 ;;		_entireMemoryFull
 11293 ;; This function is called by:
 11294 ;;		_ethernet_txFrameRequest
 11295 ;; This function uses a non-reentrant model
 11296 ;;
 11297                           
 11298                           	psect	text36
 11299  0000C8                     __ptext36:
 11300                           	opt stack 0
 11301  0000C8                     _memory_txFrameRequest:
 11302                           	opt stack 22
 11303                           
 11304                           ;memoryController.c: 137: memoryField_t field;
 11305                           ;memoryController.c: 138: uint8_t freeIndex = 0;
 11306                           
 11307                           ;incstack = 0
 11308  0000C8  0E00               	movlw	0
 11309  0000CA  0100               	movlb	0	; () banked
 11310  0000CC  6FA1               	movwf	memory_txFrameRequest@freeIndex& (0+255),b
 11311                           
 11312                           ; BSR set to: 0
 11313                           ;memoryController.c: 140: if (length == 0) {
 11314  0000CE  5184               	movf	memory_txFrameRequest@length& (0+255),w,b
 11315  0000D0  1185               	iorwf	(memory_txFrameRequest@length+1)& (0+255),w,b
 11316  0000D2  A4D8               	btfss	status,2,c
 11317  0000D4  D00C               	goto	l449
 11318                           
 11319                           ; BSR set to: 0
 11320                           ;memoryController.c: 141: field.fOutOfMemory = 1;
 11321  0000D6  0E01               	movlw	1
 11322  0000D8  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 11323                           
 11324                           ; BSR set to: 0
 11325                           ;memoryController.c: 142: return field;
 11326  0000DA  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 11327  0000DE  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 11328  0000E2  0E08               	movlw	8
 11329  0000E4                     u8041:
 11330  0000E4  CFDB FFEB          	movff	plusw2,plusw0
 11331  0000E8  06E8               	decf	wreg,f,c
 11332  0000EA  E2FC               	bc	u8041
 11333                           
 11334                           ; BSR set to: 0
 11335  0000EC  0012               	return	
 11336  0000EE                     l449:
 11337                           
 11338                           ; BSR set to: 0
 11339                           ;memoryController.c: 143: }
 11340                           ;memoryController.c: 145: if (entireMemoryFull()) {
 11341                           
 11342                           ; BSR set to: 0
 11343  0000EE  EC14  F021         	call	_entireMemoryFull	;wreg free
 11344  0000F2  0900               	iorlw	0
 11345  0000F4  B4D8               	btfsc	status,2,c
 11346  0000F6  D00D               	goto	l451
 11347                           
 11348                           ;memoryController.c: 146: field.fOutOfMemory = 1;
 11349  0000F8  0E01               	movlw	1
 11350  0000FA  0100               	movlb	0	; () banked
 11351  0000FC  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 11352                           
 11353                           ; BSR set to: 0
 11354                           ;memoryController.c: 147: return field;
 11355  0000FE  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 11356  000102  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 11357  000106  0E08               	movlw	8
 11358  000108                     u8061:
 11359  000108  CFDB FFEB          	movff	plusw2,plusw0
 11360  00010C  06E8               	decf	wreg,f,c
 11361  00010E  E2FC               	bc	u8061
 11362                           
 11363                           ; BSR set to: 0
 11364  000110  0012               	return	
 11365  000112                     l451:
 11366                           
 11367                           ;memoryController.c: 148: }
 11368                           ;memoryController.c: 149: if (entireMemoryEmpty()) {
 11369                           
 11370                           ; BSR set to: 0
 11371  000112  EC30  F021         	call	_entireMemoryEmpty	;wreg free
 11372  000116  0900               	iorlw	0
 11373  000118  B4D8               	btfsc	status,2,c
 11374  00011A  D23C               	goto	l476
 11375                           
 11376                           ;memoryController.c: 151: if ((0x0000 + length) > 0x3000 - 1) {
 11377  00011C  0E30               	movlw	48
 11378  00011E  0100               	movlb	0	; () banked
 11379  000120  5D85               	subwf	(memory_txFrameRequest@length+1)& (0+255),w,b
 11380  000122  A0D8               	btfss	status,0,c
 11381  000124  D00C               	goto	l453
 11382                           
 11383                           ; BSR set to: 0
 11384                           ;memoryController.c: 152: field.fOutOfMemory = 1;
 11385  000126  0E01               	movlw	1
 11386  000128  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 11387                           
 11388                           ; BSR set to: 0
 11389                           ;memoryController.c: 153: return field;
 11390  00012A  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 11391  00012E  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 11392  000132  0E08               	movlw	8
 11393  000134                     u8091:
 11394  000134  CFDB FFEB          	movff	plusw2,plusw0
 11395  000138  06E8               	decf	wreg,f,c
 11396  00013A  E2FC               	bc	u8091
 11397                           
 11398                           ; BSR set to: 0
 11399  00013C  0012               	return	
 11400  00013E                     l453:
 11401                           
 11402                           ; BSR set to: 0
 11403                           ;memoryController.c: 155: else {
 11404                           ;memoryController.c: 156: occupiedMemory[0].start = 0x0000;
 11405                           
 11406                           ; BSR set to: 0
 11407  00013E  0E00               	movlw	0
 11408  000140  0102               	movlb	2	; () banked
 11409  000142  6F01               	movwf	(_occupiedMemory+1)& (0+255),b
 11410  000144  0E00               	movlw	0
 11411  000146  6F00               	movwf	_occupiedMemory& (0+255),b
 11412                           
 11413                           ; BSR set to: 2
 11414                           ;memoryController.c: 157: occupiedMemory[0].end = 0x0000 + length;
 11415  000148  C084  F202         	movff	memory_txFrameRequest@length,_occupiedMemory+2
 11416  00014C  C085  F203         	movff	memory_txFrameRequest@length+1,_occupiedMemory+3
 11417                           
 11418                           ; BSR set to: 2
 11419                           ;memoryController.c: 158: occupiedMemory[0].length = length;
 11420  000150  C084  F204         	movff	memory_txFrameRequest@length,_occupiedMemory+4
 11421  000154  C085  F205         	movff	memory_txFrameRequest@length+1,_occupiedMemory+5
 11422                           
 11423                           ;memoryController.c: 159: occupiedMemory[0].fIsAssigned = 1;
 11424  000158  0E01               	movlw	1
 11425  00015A  6F06               	movwf	(_occupiedMemory+6)& (0+255),b
 11426                           
 11427                           ;memoryController.c: 160: occupiedMemory[0].index=0;
 11428  00015C  0E00               	movlw	0
 11429  00015E  6F08               	movwf	(_occupiedMemory+8)& (0+255),b
 11430                           
 11431                           ; BSR set to: 2
 11432                           ;memoryController.c: 161: return occupiedMemory[0];
 11433  000160  EE22  F000         	lfsr	2,_occupiedMemory
 11434  000164  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 11435  000168  0E08               	movlw	8
 11436  00016A                     u8101:
 11437  00016A  CFDB FFEB          	movff	plusw2,plusw0
 11438  00016E  06E8               	decf	wreg,f,c
 11439  000170  E2FC               	bc	u8101
 11440                           
 11441                           ; BSR set to: 2
 11442  000172  0012               	return	
 11443  000174                     
 11444                           ;memoryController.c: 167: if (!occupiedMemory[freeIndex].fIsAssigned) {
 11445                           
 11446                           ; BSR set to: 2
 11447  000174  0100               	movlb	0	; () banked
 11448  000176  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11449  000178  0D09               	mullw	9
 11450  00017A  0E06               	movlw	6
 11451  00017C  26F3               	addwf	prodl,f,c
 11452  00017E  0E00               	movlw	0
 11453  000180  22F4               	addwfc	prodh,f,c
 11454  000182  0E00               	movlw	low _occupiedMemory
 11455  000184  24F3               	addwf	prodl,w,c
 11456  000186  6ED9               	movwf	fsr2l,c
 11457  000188  0E02               	movlw	high _occupiedMemory
 11458  00018A  20F4               	addwfc	prodh,w,c
 11459  00018C  6EDA               	movwf	fsr2h,c
 11460  00018E  50DF               	movf	indf2,w,c
 11461  000190  A4D8               	btfss	status,2,c
 11462  000192  D1EF               	goto	l475
 11463                           
 11464                           ; BSR set to: 0
 11465                           ;memoryController.c: 171: occupiedMemory[freeIndex].start = occupiedMemory[(freeIndex ==
      +                           0) ? 8 - 1 : freeIndex - 1].end + 1;
 11466  000194  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11467  000196  B4D8               	btfsc	status,2,c
 11468  000198  D007               	goto	l459
 11469                           
 11470                           ; BSR set to: 0
 11471  00019A  0EFF               	movlw	255
 11472  00019C  25A1               	addwf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11473  00019E  6F93               	movwf	_memory_txFrameRequest$1143& (0+255),b
 11474  0001A0  6B94               	clrf	(_memory_txFrameRequest$1143+1)& (0+255),b
 11475  0001A2  0EFF               	movlw	255
 11476  0001A4  2394               	addwfc	(_memory_txFrameRequest$1143+1)& (0+255),f,b
 11477  0001A6  D004               	goto	l461
 11478  0001A8                     l459:
 11479                           
 11480                           ; BSR set to: 0
 11481                           
 11482                           ; BSR set to: 0
 11483  0001A8  0E00               	movlw	0
 11484  0001AA  6F94               	movwf	(_memory_txFrameRequest$1143+1)& (0+255),b
 11485  0001AC  0E07               	movlw	7
 11486  0001AE  6F93               	movwf	_memory_txFrameRequest$1143& (0+255),b
 11487  0001B0                     l461:
 11488                           
 11489                           ; BSR set to: 0
 11490                           
 11491                           ; BSR set to: 0
 11492  0001B0  C093  F060         	movff	_memory_txFrameRequest$1143,___wmul@multiplier
 11493  0001B4  C094  F061         	movff	_memory_txFrameRequest$1143+1,___wmul@multiplier+1
 11494  0001B8  0E00               	movlw	0
 11495  0001BA  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 11496  0001BC  0E09               	movlw	9
 11497  0001BE  6F62               	movwf	___wmul@multiplicand& (0+255),b
 11498  0001C0  EC1D  F022         	call	___wmul	;wreg free
 11499  0001C4  0E02               	movlw	2
 11500  0001C6  0100               	movlb	0	; () banked
 11501  0001C8  2760               	addwf	?___wmul& (0+255),f,b
 11502  0001CA  0E00               	movlw	0
 11503  0001CC  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 11504  0001CE  0E00               	movlw	low _occupiedMemory
 11505  0001D0  2560               	addwf	?___wmul& (0+255),w,b
 11506  0001D2  6ED9               	movwf	fsr2l,c
 11507  0001D4  0E02               	movlw	high _occupiedMemory
 11508  0001D6  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 11509  0001D8  6EDA               	movwf	fsr2h,c
 11510  0001DA  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 11511  0001DE  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 11512  0001E2  0E01               	movlw	1
 11513  0001E4  278D               	addwf	??_memory_txFrameRequest& (0+255),f,b
 11514  0001E6  0E00               	movlw	0
 11515  0001E8  238E               	addwfc	(??_memory_txFrameRequest+1)& (0+255),f,b
 11516  0001EA  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11517  0001EC  0D09               	mullw	9
 11518  0001EE  0E00               	movlw	low _occupiedMemory
 11519  0001F0  24F3               	addwf	prodl,w,c
 11520  0001F2  6ED9               	movwf	fsr2l,c
 11521  0001F4  0E02               	movlw	high _occupiedMemory
 11522  0001F6  20F4               	addwfc	prodh,w,c
 11523  0001F8  6EDA               	movwf	fsr2h,c
 11524  0001FA  C08D  FFDE         	movff	??_memory_txFrameRequest,postinc2
 11525  0001FE  C08E  FFDD         	movff	??_memory_txFrameRequest+1,postdec2
 11526                           
 11527                           ; BSR set to: 0
 11528                           ;memoryController.c: 172: if (occupiedMemory[freeIndex].start + length > 0x3000) {
 11529  000202  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11530  000204  0D09               	mullw	9
 11531  000206  0E00               	movlw	low _occupiedMemory
 11532  000208  24F3               	addwf	prodl,w,c
 11533  00020A  6ED9               	movwf	fsr2l,c
 11534  00020C  0E02               	movlw	high _occupiedMemory
 11535  00020E  20F4               	addwfc	prodh,w,c
 11536  000210  6EDA               	movwf	fsr2h,c
 11537  000212  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 11538  000216  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 11539  00021A  5184               	movf	memory_txFrameRequest@length& (0+255),w,b
 11540  00021C  278D               	addwf	??_memory_txFrameRequest& (0+255),f,b
 11541  00021E  5185               	movf	(memory_txFrameRequest@length+1)& (0+255),w,b
 11542  000220  238E               	addwfc	(??_memory_txFrameRequest+1)& (0+255),f,b
 11543  000222  058D               	decf	??_memory_txFrameRequest& (0+255),w,b
 11544  000224  0E30               	movlw	48
 11545  000226  598E               	subwfb	(??_memory_txFrameRequest+1)& (0+255),w,b
 11546  000228  A0D8               	btfss	status,0,c
 11547  00022A  D0D1               	goto	l463
 11548                           
 11549                           ; BSR set to: 0
 11550                           ;memoryController.c: 173: if (freeIndex == 8 - 1 && !occupiedMemory[0].fIsAssigned) {
 11551  00022C  0E07               	movlw	7
 11552  00022E  19A1               	xorwf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11553  000230  A4D8               	btfss	status,2,c
 11554  000232  D0CD               	goto	l463
 11555                           
 11556                           ; BSR set to: 0
 11557  000234  0102               	movlb	2	; () banked
 11558  000236  5106               	movf	(_occupiedMemory+6)& (0+255),w,b
 11559  000238  A4D8               	btfss	status,2,c
 11560  00023A  D0C9               	goto	l463
 11561                           
 11562                           ; BSR set to: 2
 11563                           ;memoryController.c: 174: occupiedMemory[freeIndex].length = length;
 11564  00023C  0100               	movlb	0	; () banked
 11565  00023E  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11566  000240  0D09               	mullw	9
 11567  000242  0E04               	movlw	4
 11568  000244  26F3               	addwf	prodl,f,c
 11569  000246  0E00               	movlw	0
 11570  000248  22F4               	addwfc	prodh,f,c
 11571  00024A  0E00               	movlw	low _occupiedMemory
 11572  00024C  24F3               	addwf	prodl,w,c
 11573  00024E  6ED9               	movwf	fsr2l,c
 11574  000250  0E02               	movlw	high _occupiedMemory
 11575  000252  20F4               	addwfc	prodh,w,c
 11576  000254  6EDA               	movwf	fsr2h,c
 11577  000256  C084  FFDE         	movff	memory_txFrameRequest@length,postinc2
 11578  00025A  C085  FFDD         	movff	memory_txFrameRequest@length+1,postdec2
 11579                           
 11580                           ;memoryController.c: 175: occupiedMemory[freeIndex].end = occupiedMemory[freeIndex].leng
      +                          th - ((0x3000 - 1) - occupiedMemory[freeIndex].start);
 11581  00025E  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11582  000260  0D09               	mullw	9
 11583  000262  0E04               	movlw	4
 11584  000264  26F3               	addwf	prodl,f,c
 11585  000266  0E00               	movlw	0
 11586  000268  22F4               	addwfc	prodh,f,c
 11587  00026A  0E00               	movlw	low _occupiedMemory
 11588  00026C  24F3               	addwf	prodl,w,c
 11589  00026E  6ED9               	movwf	fsr2l,c
 11590  000270  0E02               	movlw	high _occupiedMemory
 11591  000272  20F4               	addwfc	prodh,w,c
 11592  000274  6EDA               	movwf	fsr2h,c
 11593  000276  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 11594  00027A  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 11595  00027E  0EFF               	movlw	255
 11596  000280  6F8F               	movwf	(??_memory_txFrameRequest+2)& (0+255),b
 11597  000282  0E2F               	movlw	47
 11598  000284  6F90               	movwf	(??_memory_txFrameRequest+3)& (0+255),b
 11599  000286  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11600  000288  0D09               	mullw	9
 11601  00028A  0E00               	movlw	low _occupiedMemory
 11602  00028C  24F3               	addwf	prodl,w,c
 11603  00028E  6ED9               	movwf	fsr2l,c
 11604  000290  0E02               	movlw	high _occupiedMemory
 11605  000292  20F4               	addwfc	prodh,w,c
 11606  000294  6EDA               	movwf	fsr2h,c
 11607  000296  CFDE F091          	movff	postinc2,??_memory_txFrameRequest+4
 11608  00029A  CFDD F092          	movff	postdec2,??_memory_txFrameRequest+5
 11609  00029E  1F91               	comf	(??_memory_txFrameRequest+4)& (0+255),f,b
 11610  0002A0  1F92               	comf	(??_memory_txFrameRequest+5)& (0+255),f,b
 11611  0002A2  4B91               	infsnz	(??_memory_txFrameRequest+4)& (0+255),f,b
 11612  0002A4  2B92               	incf	(??_memory_txFrameRequest+5)& (0+255),f,b
 11613  0002A6  518F               	movf	(??_memory_txFrameRequest+2)& (0+255),w,b
 11614  0002A8  2791               	addwf	(??_memory_txFrameRequest+4)& (0+255),f,b
 11615  0002AA  5190               	movf	(??_memory_txFrameRequest+3)& (0+255),w,b
 11616  0002AC  2392               	addwfc	(??_memory_txFrameRequest+5)& (0+255),f,b
 11617  0002AE  1F91               	comf	(??_memory_txFrameRequest+4)& (0+255),f,b
 11618  0002B0  1F92               	comf	(??_memory_txFrameRequest+5)& (0+255),f,b
 11619  0002B2  4B91               	infsnz	(??_memory_txFrameRequest+4)& (0+255),f,b
 11620  0002B4  2B92               	incf	(??_memory_txFrameRequest+5)& (0+255),f,b
 11621  0002B6  518D               	movf	??_memory_txFrameRequest& (0+255),w,b
 11622  0002B8  2791               	addwf	(??_memory_txFrameRequest+4)& (0+255),f,b
 11623  0002BA  518E               	movf	(??_memory_txFrameRequest+1)& (0+255),w,b
 11624  0002BC  2392               	addwfc	(??_memory_txFrameRequest+5)& (0+255),f,b
 11625  0002BE  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11626  0002C0  0D09               	mullw	9
 11627  0002C2  0E02               	movlw	2
 11628  0002C4  26F3               	addwf	prodl,f,c
 11629  0002C6  0E00               	movlw	0
 11630  0002C8  22F4               	addwfc	prodh,f,c
 11631  0002CA  0E00               	movlw	low _occupiedMemory
 11632  0002CC  24F3               	addwf	prodl,w,c
 11633  0002CE  6ED9               	movwf	fsr2l,c
 11634  0002D0  0E02               	movlw	high _occupiedMemory
 11635  0002D2  20F4               	addwfc	prodh,w,c
 11636  0002D4  6EDA               	movwf	fsr2h,c
 11637  0002D6  C091  FFDE         	movff	??_memory_txFrameRequest+4,postinc2
 11638  0002DA  C092  FFDD         	movff	??_memory_txFrameRequest+5,postdec2
 11639                           
 11640                           ; BSR set to: 0
 11641                           ;memoryController.c: 176: for (uint8_t i = 0; i < 8;i++) {
 11642  0002DE  0E00               	movlw	0
 11643  0002E0  6F96               	movwf	memory_txFrameRequest@i& (0+255),b
 11644  0002E2                     l7082:
 11645                           
 11646                           ; BSR set to: 0
 11647  0002E2  0E07               	movlw	7
 11648  0002E4  6596               	cpfsgt	memory_txFrameRequest@i& (0+255),b
 11649  0002E6  D001               	goto	l464
 11650  0002E8  D046               	goto	u8230
 11651  0002EA                     l464:
 11652                           
 11653                           ; BSR set to: 0
 11654                           ;memoryController.c: 177: if (i == freeIndex)
 11655                           
 11656                           ; BSR set to: 0
 11657  0002EA  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11658  0002EC  1996               	xorwf	memory_txFrameRequest@i& (0+255),w,b
 11659  0002EE  B4D8               	btfsc	status,2,c
 11660  0002F0  D03F               	goto	l468
 11661                           
 11662                           ; BSR set to: 0
 11663                           ;memoryController.c: 179: if (checkForOverlap(occupiedMemory[freeIndex], occupiedMemory[
      +                          i]) && occupiedMemory[i].fIsAssigned) {
 11664                           
 11665                           ; BSR set to: 0
 11666                           
 11667                           ; BSR set to: 0
 11668                           ;memoryController.c: 178: continue;
 11669  0002F2  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11670  0002F4  0D09               	mullw	9
 11671  0002F6  0E00               	movlw	low _occupiedMemory
 11672  0002F8  24F3               	addwf	prodl,w,c
 11673  0002FA  6ED9               	movwf	fsr2l,c
 11674  0002FC  0E02               	movlw	high _occupiedMemory
 11675  0002FE  20F4               	addwfc	prodh,w,c
 11676  000300  6EDA               	movwf	fsr2h,c
 11677  000302  EE00  F072         	lfsr	0,checkForOverlap@a
 11678  000306  0E08               	movlw	8
 11679  000308                     u8181:
 11680  000308  CFDB FFEB          	movff	plusw2,plusw0
 11681  00030C  06E8               	decf	wreg,f,c
 11682  00030E  E2FC               	bc	u8181
 11683  000310  5196               	movf	memory_txFrameRequest@i& (0+255),w,b
 11684  000312  0D09               	mullw	9
 11685  000314  0E00               	movlw	low _occupiedMemory
 11686  000316  24F3               	addwf	prodl,w,c
 11687  000318  6ED9               	movwf	fsr2l,c
 11688  00031A  0E02               	movlw	high _occupiedMemory
 11689  00031C  20F4               	addwfc	prodh,w,c
 11690  00031E  6EDA               	movwf	fsr2h,c
 11691  000320  EE00  F07B         	lfsr	0,checkForOverlap@b
 11692  000324  0E08               	movlw	8
 11693  000326                     u8191:
 11694  000326  CFDB FFEB          	movff	plusw2,plusw0
 11695  00032A  06E8               	decf	wreg,f,c
 11696  00032C  E2FC               	bc	u8191
 11697  00032E  ECEE  F016         	call	_checkForOverlap	;wreg free
 11698  000332  0900               	iorlw	0
 11699  000334  B4D8               	btfsc	status,2,c
 11700  000336  D01C               	goto	l468
 11701  000338  0100               	movlb	0	; () banked
 11702  00033A  5196               	movf	memory_txFrameRequest@i& (0+255),w,b
 11703  00033C  0D09               	mullw	9
 11704  00033E  0E06               	movlw	6
 11705  000340  26F3               	addwf	prodl,f,c
 11706  000342  0E00               	movlw	0
 11707  000344  22F4               	addwfc	prodh,f,c
 11708  000346  0E00               	movlw	low _occupiedMemory
 11709  000348  24F3               	addwf	prodl,w,c
 11710  00034A  6ED9               	movwf	fsr2l,c
 11711  00034C  0E02               	movlw	high _occupiedMemory
 11712  00034E  20F4               	addwfc	prodh,w,c
 11713  000350  6EDA               	movwf	fsr2h,c
 11714  000352  50DF               	movf	indf2,w,c
 11715  000354  B4D8               	btfsc	status,2,c
 11716  000356  D00C               	goto	l468
 11717                           
 11718                           ; BSR set to: 0
 11719                           ;memoryController.c: 181: field.fOutOfMemory = 1;
 11720  000358  0E01               	movlw	1
 11721  00035A  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 11722                           
 11723                           ; BSR set to: 0
 11724                           ;memoryController.c: 182: return field;
 11725  00035C  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 11726  000360  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 11727  000364  0E08               	movlw	8
 11728  000366                     u8221:
 11729  000366  CFDB FFEB          	movff	plusw2,plusw0
 11730  00036A  06E8               	decf	wreg,f,c
 11731  00036C  E2FC               	bc	u8221
 11732                           
 11733                           ; BSR set to: 0
 11734  00036E  0012               	return	
 11735  000370                     l468:
 11736                           
 11737                           ; BSR set to: 0
 11738                           
 11739                           ; BSR set to: 0
 11740  000370  0100               	movlb	0	; () banked
 11741  000372  2B96               	incf	memory_txFrameRequest@i& (0+255),f,b
 11742  000374  D7B6               	goto	l7082
 11743  000376                     u8230:
 11744                           
 11745                           ; BSR set to: 0
 11746                           ;memoryController.c: 183: }
 11747                           ;memoryController.c: 184: }
 11748                           ;memoryController.c: 185: occupiedMemory[freeIndex].fIsAssigned = 1;
 11749                           
 11750                           ; BSR set to: 0
 11751  000376  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11752  000378  0D09               	mullw	9
 11753  00037A  0E06               	movlw	6
 11754  00037C  26F3               	addwf	prodl,f,c
 11755  00037E  0E00               	movlw	0
 11756  000380  22F4               	addwfc	prodh,f,c
 11757  000382  0E00               	movlw	low _occupiedMemory
 11758  000384  24F3               	addwf	prodl,w,c
 11759  000386  6ED9               	movwf	fsr2l,c
 11760  000388  0E02               	movlw	high _occupiedMemory
 11761  00038A  20F4               	addwfc	prodh,w,c
 11762  00038C  6EDA               	movwf	fsr2h,c
 11763  00038E  0E01               	movlw	1
 11764  000390  6EDF               	movwf	indf2,c
 11765                           
 11766                           ;memoryController.c: 186: occupiedMemory[freeIndex].index=freeIndex;
 11767  000392  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11768  000394  0D09               	mullw	9
 11769  000396  0E08               	movlw	8
 11770  000398  26F3               	addwf	prodl,f,c
 11771  00039A  0E00               	movlw	0
 11772  00039C  22F4               	addwfc	prodh,f,c
 11773  00039E  0E00               	movlw	low _occupiedMemory
 11774  0003A0  24F3               	addwf	prodl,w,c
 11775  0003A2  6ED9               	movwf	fsr2l,c
 11776  0003A4  0E02               	movlw	high _occupiedMemory
 11777  0003A6  20F4               	addwfc	prodh,w,c
 11778  0003A8  6EDA               	movwf	fsr2h,c
 11779  0003AA  C0A1  FFDF         	movff	memory_txFrameRequest@freeIndex,indf2
 11780                           
 11781                           ; BSR set to: 0
 11782                           ;memoryController.c: 187: return occupiedMemory[freeIndex];
 11783  0003AE  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11784  0003B0  0D09               	mullw	9
 11785  0003B2  0E00               	movlw	low _occupiedMemory
 11786  0003B4  24F3               	addwf	prodl,w,c
 11787  0003B6  6ED9               	movwf	fsr2l,c
 11788  0003B8  0E02               	movlw	high _occupiedMemory
 11789  0003BA  20F4               	addwfc	prodh,w,c
 11790  0003BC  6EDA               	movwf	fsr2h,c
 11791  0003BE  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 11792  0003C2  0E08               	movlw	8
 11793  0003C4                     u8241:
 11794  0003C4  CFDB FFEB          	movff	plusw2,plusw0
 11795  0003C8  06E8               	decf	wreg,f,c
 11796  0003CA  E2FC               	bc	u8241
 11797                           
 11798                           ; BSR set to: 0
 11799  0003CC  0012               	return	
 11800  0003CE                     l463:
 11801                           
 11802                           ;memoryController.c: 188: }
 11803                           ;memoryController.c: 189: }
 11804                           ;memoryController.c: 191: uint8_t fNoOverlapMarker = 1;
 11805                           
 11806                           ; BSR set to: 0
 11807                           
 11808                           ; BSR set to: 0
 11809  0003CE  0E01               	movlw	1
 11810  0003D0  0100               	movlb	0	; () banked
 11811  0003D2  6F95               	movwf	memory_txFrameRequest@fNoOverlapMarker& (0+255),b
 11812                           
 11813                           ; BSR set to: 0
 11814                           ;memoryController.c: 192: uint8_t i;
 11815                           ;memoryController.c: 193: occupiedMemory[freeIndex].end = occupiedMemory[freeIndex].star
      +                          t + length;
 11816  0003D4  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11817  0003D6  0D09               	mullw	9
 11818  0003D8  0E00               	movlw	low _occupiedMemory
 11819  0003DA  24F3               	addwf	prodl,w,c
 11820  0003DC  6ED9               	movwf	fsr2l,c
 11821  0003DE  0E02               	movlw	high _occupiedMemory
 11822  0003E0  20F4               	addwfc	prodh,w,c
 11823  0003E2  6EDA               	movwf	fsr2h,c
 11824  0003E4  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 11825  0003E8  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 11826  0003EC  5184               	movf	memory_txFrameRequest@length& (0+255),w,b
 11827  0003EE  278D               	addwf	??_memory_txFrameRequest& (0+255),f,b
 11828  0003F0  5185               	movf	(memory_txFrameRequest@length+1)& (0+255),w,b
 11829  0003F2  238E               	addwfc	(??_memory_txFrameRequest+1)& (0+255),f,b
 11830  0003F4  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11831  0003F6  0D09               	mullw	9
 11832  0003F8  0E02               	movlw	2
 11833  0003FA  26F3               	addwf	prodl,f,c
 11834  0003FC  0E00               	movlw	0
 11835  0003FE  22F4               	addwfc	prodh,f,c
 11836  000400  0E00               	movlw	low _occupiedMemory
 11837  000402  24F3               	addwf	prodl,w,c
 11838  000404  6ED9               	movwf	fsr2l,c
 11839  000406  0E02               	movlw	high _occupiedMemory
 11840  000408  20F4               	addwfc	prodh,w,c
 11841  00040A  6EDA               	movwf	fsr2h,c
 11842  00040C  C08D  FFDE         	movff	??_memory_txFrameRequest,postinc2
 11843  000410  C08E  FFDD         	movff	??_memory_txFrameRequest+1,postdec2
 11844                           
 11845                           ; BSR set to: 0
 11846                           ;memoryController.c: 194: for (i = 0; i < 8; i++) {
 11847  000414  0E00               	movlw	0
 11848  000416  6F97               	movwf	memory_txFrameRequest@i_1147& (0+255),b
 11849  000418                     l7116:
 11850                           
 11851                           ; BSR set to: 0
 11852  000418  0E07               	movlw	7
 11853  00041A  6597               	cpfsgt	memory_txFrameRequest@i_1147& (0+255),b
 11854  00041C  D001               	goto	l469
 11855  00041E  D03C               	goto	u8310
 11856  000420                     l469:
 11857                           
 11858                           ; BSR set to: 0
 11859                           ;memoryController.c: 195: if (i == freeIndex)
 11860                           
 11861                           ; BSR set to: 0
 11862  000420  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11863  000422  1997               	xorwf	memory_txFrameRequest@i_1147& (0+255),w,b
 11864  000424  B4D8               	btfsc	status,2,c
 11865  000426  D035               	goto	l474
 11866                           
 11867                           ; BSR set to: 0
 11868                           ;memoryController.c: 197: if (!occupiedMemory[i].fIsAssigned) {
 11869                           
 11870                           ; BSR set to: 0
 11871                           
 11872                           ; BSR set to: 0
 11873                           ;memoryController.c: 196: continue;
 11874  000428  5197               	movf	memory_txFrameRequest@i_1147& (0+255),w,b
 11875  00042A  0D09               	mullw	9
 11876  00042C  0E06               	movlw	6
 11877  00042E  26F3               	addwf	prodl,f,c
 11878  000430  0E00               	movlw	0
 11879  000432  22F4               	addwfc	prodh,f,c
 11880  000434  0E00               	movlw	low _occupiedMemory
 11881  000436  24F3               	addwf	prodl,w,c
 11882  000438  6ED9               	movwf	fsr2l,c
 11883  00043A  0E02               	movlw	high _occupiedMemory
 11884  00043C  20F4               	addwfc	prodh,w,c
 11885  00043E  6EDA               	movwf	fsr2h,c
 11886  000440  50DF               	movf	indf2,w,c
 11887  000442  B4D8               	btfsc	status,2,c
 11888  000444  D026               	goto	l474
 11889                           
 11890                           ; BSR set to: 0
 11891                           ;memoryController.c: 200: }
 11892                           ;memoryController.c: 202: if (checkForOverlap(occupiedMemory[freeIndex], occupiedMemory[
      +                          i]))
 11893                           
 11894                           ; BSR set to: 0
 11895                           
 11896                           ; BSR set to: 0
 11897                           ;memoryController.c: 198: continue;
 11898  000446  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11899  000448  0D09               	mullw	9
 11900  00044A  0E00               	movlw	low _occupiedMemory
 11901  00044C  24F3               	addwf	prodl,w,c
 11902  00044E  6ED9               	movwf	fsr2l,c
 11903  000450  0E02               	movlw	high _occupiedMemory
 11904  000452  20F4               	addwfc	prodh,w,c
 11905  000454  6EDA               	movwf	fsr2h,c
 11906  000456  EE00  F072         	lfsr	0,checkForOverlap@a
 11907  00045A  0E08               	movlw	8
 11908  00045C                     u8281:
 11909  00045C  CFDB FFEB          	movff	plusw2,plusw0
 11910  000460  06E8               	decf	wreg,f,c
 11911  000462  E2FC               	bc	u8281
 11912  000464  5197               	movf	memory_txFrameRequest@i_1147& (0+255),w,b
 11913  000466  0D09               	mullw	9
 11914  000468  0E00               	movlw	low _occupiedMemory
 11915  00046A  24F3               	addwf	prodl,w,c
 11916  00046C  6ED9               	movwf	fsr2l,c
 11917  00046E  0E02               	movlw	high _occupiedMemory
 11918  000470  20F4               	addwfc	prodh,w,c
 11919  000472  6EDA               	movwf	fsr2h,c
 11920  000474  EE00  F07B         	lfsr	0,checkForOverlap@b
 11921  000478  0E08               	movlw	8
 11922  00047A                     u8291:
 11923  00047A  CFDB FFEB          	movff	plusw2,plusw0
 11924  00047E  06E8               	decf	wreg,f,c
 11925  000480  E2FC               	bc	u8291
 11926  000482  ECEE  F016         	call	_checkForOverlap	;wreg free
 11927  000486  0900               	iorlw	0
 11928  000488  B4D8               	btfsc	status,2,c
 11929  00048A  D003               	goto	l474
 11930                           
 11931                           ;memoryController.c: 203: fNoOverlapMarker = 0;
 11932  00048C  0E00               	movlw	0
 11933  00048E  0100               	movlb	0	; () banked
 11934  000490  6F95               	movwf	memory_txFrameRequest@fNoOverlapMarker& (0+255),b
 11935  000492                     l474:
 11936                           
 11937                           ; BSR set to: 0
 11938                           
 11939                           ; BSR set to: 0
 11940  000492  0100               	movlb	0	; () banked
 11941  000494  2B97               	incf	memory_txFrameRequest@i_1147& (0+255),f,b
 11942  000496  D7C0               	goto	l7116
 11943  000498                     u8310:
 11944                           
 11945                           ; BSR set to: 0
 11946                           ;memoryController.c: 205: }
 11947                           ;memoryController.c: 206: if (fNoOverlapMarker) {
 11948                           
 11949                           ; BSR set to: 0
 11950  000498  5195               	movf	memory_txFrameRequest@fNoOverlapMarker& (0+255),w,b
 11951  00049A  B4D8               	btfsc	status,2,c
 11952  00049C  D06A               	goto	l475
 11953                           
 11954                           ; BSR set to: 0
 11955                           ;memoryController.c: 207: occupiedMemory[freeIndex].fIsAssigned = 1;
 11956  00049E  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11957  0004A0  0D09               	mullw	9
 11958  0004A2  0E06               	movlw	6
 11959  0004A4  26F3               	addwf	prodl,f,c
 11960  0004A6  0E00               	movlw	0
 11961  0004A8  22F4               	addwfc	prodh,f,c
 11962  0004AA  0E00               	movlw	low _occupiedMemory
 11963  0004AC  24F3               	addwf	prodl,w,c
 11964  0004AE  6ED9               	movwf	fsr2l,c
 11965  0004B0  0E02               	movlw	high _occupiedMemory
 11966  0004B2  20F4               	addwfc	prodh,w,c
 11967  0004B4  6EDA               	movwf	fsr2h,c
 11968  0004B6  0E01               	movlw	1
 11969  0004B8  6EDF               	movwf	indf2,c
 11970                           
 11971                           ;memoryController.c: 208: occupiedMemory[freeIndex].end = occupiedMemory[freeIndex].star
      +                          t + length;
 11972  0004BA  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11973  0004BC  0D09               	mullw	9
 11974  0004BE  0E00               	movlw	low _occupiedMemory
 11975  0004C0  24F3               	addwf	prodl,w,c
 11976  0004C2  6ED9               	movwf	fsr2l,c
 11977  0004C4  0E02               	movlw	high _occupiedMemory
 11978  0004C6  20F4               	addwfc	prodh,w,c
 11979  0004C8  6EDA               	movwf	fsr2h,c
 11980  0004CA  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 11981  0004CE  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 11982  0004D2  5184               	movf	memory_txFrameRequest@length& (0+255),w,b
 11983  0004D4  278D               	addwf	??_memory_txFrameRequest& (0+255),f,b
 11984  0004D6  5185               	movf	(memory_txFrameRequest@length+1)& (0+255),w,b
 11985  0004D8  238E               	addwfc	(??_memory_txFrameRequest+1)& (0+255),f,b
 11986  0004DA  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11987  0004DC  0D09               	mullw	9
 11988  0004DE  0E02               	movlw	2
 11989  0004E0  26F3               	addwf	prodl,f,c
 11990  0004E2  0E00               	movlw	0
 11991  0004E4  22F4               	addwfc	prodh,f,c
 11992  0004E6  0E00               	movlw	low _occupiedMemory
 11993  0004E8  24F3               	addwf	prodl,w,c
 11994  0004EA  6ED9               	movwf	fsr2l,c
 11995  0004EC  0E02               	movlw	high _occupiedMemory
 11996  0004EE  20F4               	addwfc	prodh,w,c
 11997  0004F0  6EDA               	movwf	fsr2h,c
 11998  0004F2  C08D  FFDE         	movff	??_memory_txFrameRequest,postinc2
 11999  0004F6  C08E  FFDD         	movff	??_memory_txFrameRequest+1,postdec2
 12000                           
 12001                           ;memoryController.c: 209: occupiedMemory[freeIndex].fOutOfMemory = 0;
 12002  0004FA  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 12003  0004FC  0D09               	mullw	9
 12004  0004FE  0E07               	movlw	7
 12005  000500  26F3               	addwf	prodl,f,c
 12006  000502  0E00               	movlw	0
 12007  000504  22F4               	addwfc	prodh,f,c
 12008  000506  0E00               	movlw	low _occupiedMemory
 12009  000508  24F3               	addwf	prodl,w,c
 12010  00050A  6ED9               	movwf	fsr2l,c
 12011  00050C  0E02               	movlw	high _occupiedMemory
 12012  00050E  20F4               	addwfc	prodh,w,c
 12013  000510  6EDA               	movwf	fsr2h,c
 12014  000512  0E00               	movlw	0
 12015  000514  6EDF               	movwf	indf2,c
 12016                           
 12017                           ;memoryController.c: 210: occupiedMemory[freeIndex].length = length;
 12018  000516  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 12019  000518  0D09               	mullw	9
 12020  00051A  0E04               	movlw	4
 12021  00051C  26F3               	addwf	prodl,f,c
 12022  00051E  0E00               	movlw	0
 12023  000520  22F4               	addwfc	prodh,f,c
 12024  000522  0E00               	movlw	low _occupiedMemory
 12025  000524  24F3               	addwf	prodl,w,c
 12026  000526  6ED9               	movwf	fsr2l,c
 12027  000528  0E02               	movlw	high _occupiedMemory
 12028  00052A  20F4               	addwfc	prodh,w,c
 12029  00052C  6EDA               	movwf	fsr2h,c
 12030  00052E  C084  FFDE         	movff	memory_txFrameRequest@length,postinc2
 12031  000532  C085  FFDD         	movff	memory_txFrameRequest@length+1,postdec2
 12032                           
 12033                           ;memoryController.c: 211: occupiedMemory[freeIndex].index=freeIndex;
 12034  000536  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 12035  000538  0D09               	mullw	9
 12036  00053A  0E08               	movlw	8
 12037  00053C  26F3               	addwf	prodl,f,c
 12038  00053E  0E00               	movlw	0
 12039  000540  22F4               	addwfc	prodh,f,c
 12040  000542  0E00               	movlw	low _occupiedMemory
 12041  000544  24F3               	addwf	prodl,w,c
 12042  000546  6ED9               	movwf	fsr2l,c
 12043  000548  0E02               	movlw	high _occupiedMemory
 12044  00054A  20F4               	addwfc	prodh,w,c
 12045  00054C  6EDA               	movwf	fsr2h,c
 12046  00054E  C0A1  FFDF         	movff	memory_txFrameRequest@freeIndex,indf2
 12047                           
 12048                           ; BSR set to: 0
 12049                           ;memoryController.c: 212: return occupiedMemory[freeIndex];
 12050  000552  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 12051  000554  0D09               	mullw	9
 12052  000556  0E00               	movlw	low _occupiedMemory
 12053  000558  24F3               	addwf	prodl,w,c
 12054  00055A  6ED9               	movwf	fsr2l,c
 12055  00055C  0E02               	movlw	high _occupiedMemory
 12056  00055E  20F4               	addwfc	prodh,w,c
 12057  000560  6EDA               	movwf	fsr2h,c
 12058  000562  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 12059  000566  0E08               	movlw	8
 12060  000568                     u8331:
 12061  000568  CFDB FFEB          	movff	plusw2,plusw0
 12062  00056C  06E8               	decf	wreg,f,c
 12063  00056E  E2FC               	bc	u8331
 12064                           
 12065                           ; BSR set to: 0
 12066  000570  0012               	return	
 12067  000572                     l475:
 12068                           
 12069                           ; BSR set to: 0
 12070                           ;memoryController.c: 213: }
 12071                           ;memoryController.c: 214: }
 12072                           ;memoryController.c: 215: freeIndex++;
 12073                           
 12074                           ; BSR set to: 0
 12075                           
 12076                           ; BSR set to: 0
 12077  000572  2BA1               	incf	memory_txFrameRequest@freeIndex& (0+255),f,b
 12078                           
 12079                           ; BSR set to: 0
 12080                           ;memoryController.c: 216: if (freeIndex == 8) {
 12081  000574  0E08               	movlw	8
 12082  000576  19A1               	xorwf	memory_txFrameRequest@freeIndex& (0+255),w,b
 12083  000578  A4D8               	btfss	status,2,c
 12084  00057A  D00C               	goto	l476
 12085                           
 12086                           ; BSR set to: 0
 12087                           ;memoryController.c: 218: field.fOutOfMemory = 1;
 12088  00057C  0E01               	movlw	1
 12089  00057E  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 12090                           
 12091                           ; BSR set to: 0
 12092                           ;memoryController.c: 219: return field;
 12093  000580  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 12094  000584  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 12095  000588  0E08               	movlw	8
 12096  00058A                     u8351:
 12097  00058A  CFDB FFEB          	movff	plusw2,plusw0
 12098  00058E  06E8               	decf	wreg,f,c
 12099  000590  E2FC               	bc	u8351
 12100                           
 12101                           ; BSR set to: 0
 12102  000592  0012               	return	
 12103  000594                     l476:
 12104                           
 12105                           ; BSR set to: 0
 12106                           
 12107                           ; BSR set to: 0
 12108  000594  0E08               	movlw	8
 12109  000596  0100               	movlb	0	; () banked
 12110  000598  65A1               	cpfsgt	memory_txFrameRequest@freeIndex& (0+255),b
 12111  00059A  D5EC               	goto	l456
 12112  00059C  0012               	return	
 12113  00059E                     __end_of_memory_txFrameRequest:
 12114                           	opt stack 0
 12115                           tblptru	equ	0xFF8
 12116                           tblptrh	equ	0xFF7
 12117                           tblptrl	equ	0xFF6
 12118                           tablat	equ	0xFF5
 12119                           prodh	equ	0xFF4
 12120                           prodl	equ	0xFF3
 12121                           intcon	equ	0xFF2
 12122                           intcon3	equ	0xFF0
 12123                           postinc0	equ	0xFEE
 12124                           plusw0	equ	0xFEB
 12125                           fsr0h	equ	0xFEA
 12126                           fsr0l	equ	0xFE9
 12127                           wreg	equ	0xFE8
 12128                           indf1	equ	0xFE7
 12129                           postinc1	equ	0xFE6
 12130                           postdec1	equ	0xFE5
 12131                           plusw1	equ	0xFE3
 12132                           fsr1h	equ	0xFE2
 12133                           fsr1l	equ	0xFE1
 12134                           indf2	equ	0xFDF
 12135                           postinc2	equ	0xFDE
 12136                           postdec2	equ	0xFDD
 12137                           plusw2	equ	0xFDB
 12138                           fsr2h	equ	0xFDA
 12139                           fsr2l	equ	0xFD9
 12140                           status	equ	0xFD8
 12141                           
 12142 ;; *************** function _entireMemoryFull *****************
 12143 ;; Defined at:
 12144 ;;		line 44 in file "src/mem/memoryController.c"
 12145 ;; Parameters:    Size  Location     Type
 12146 ;;		None
 12147 ;; Auto vars:     Size  Location     Type
 12148 ;;  i               1    0[BANK0 ] unsigned char 
 12149 ;; Return value:  Size  Location     Type
 12150 ;;                  1    wreg      unsigned char 
 12151 ;; Registers used:
 12152 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 12153 ;; Tracked objects:
 12154 ;;		On entry : 0/0
 12155 ;;		On exit  : 0/0
 12156 ;;		Unchanged: 0/0
 12157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12158 ;;      Params:         0       0       0       0       0       0       0       0       0
 12159 ;;      Locals:         0       1       0       0       0       0       0       0       0
 12160 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12161 ;;      Totals:         0       1       0       0       0       0       0       0       0
 12162 ;;Total ram usage:        1 bytes
 12163 ;; Hardware stack levels used:    1
 12164 ;; Hardware stack levels required when called:    4
 12165 ;; This function calls:
 12166 ;;		Nothing
 12167 ;; This function is called by:
 12168 ;;		_memory_txFrameRequest
 12169 ;; This function uses a non-reentrant model
 12170 ;;
 12171                           
 12172                           	psect	text37
 12173  004228                     __ptext37:
 12174                           	opt stack 0
 12175  004228                     _entireMemoryFull:
 12176                           	opt stack 23
 12177                           
 12178                           ;memoryController.c: 45: for (uint8_t i = 0; i < 8;i++) {
 12179                           
 12180                           ;incstack = 0
 12181  004228  0E00               	movlw	0
 12182  00422A  0100               	movlb	0	; () banked
 12183  00422C  6F60               	movwf	entireMemoryFull@i& (0+255),b
 12184  00422E                     l6842:
 12185                           
 12186                           ; BSR set to: 0
 12187  00422E  0E07               	movlw	7
 12188  004230  6560               	cpfsgt	entireMemoryFull@i& (0+255),b
 12189  004232  D001               	goto	l405
 12190  004234  D013               	goto	u7780
 12191  004236                     l405:
 12192                           
 12193                           ; BSR set to: 0
 12194                           ;memoryController.c: 46: if (!occupiedMemory[i].fIsAssigned)
 12195                           
 12196                           ; BSR set to: 0
 12197  004236  5160               	movf	entireMemoryFull@i& (0+255),w,b
 12198  004238  0D09               	mullw	9
 12199  00423A  0E06               	movlw	6
 12200  00423C  26F3               	addwf	prodl,f,c
 12201  00423E  0E00               	movlw	0
 12202  004240  22F4               	addwfc	prodh,f,c
 12203  004242  0E00               	movlw	low _occupiedMemory
 12204  004244  24F3               	addwf	prodl,w,c
 12205  004246  6ED9               	movwf	fsr2l,c
 12206  004248  0E02               	movlw	high _occupiedMemory
 12207  00424A  20F4               	addwfc	prodh,w,c
 12208  00424C  6EDA               	movwf	fsr2h,c
 12209  00424E  50DF               	movf	indf2,w,c
 12210  004250  A4D8               	btfss	status,2,c
 12211  004252  D002               	goto	l407
 12212                           
 12213                           ; BSR set to: 0
 12214                           ;memoryController.c: 47: return 0;
 12215  004254  0E00               	movlw	0
 12216                           
 12217                           ; BSR set to: 0
 12218  004256  0012               	return	
 12219  004258                     l407:
 12220                           
 12221                           ; BSR set to: 0
 12222                           
 12223                           ; BSR set to: 0
 12224  004258  2B60               	incf	entireMemoryFull@i& (0+255),f,b
 12225  00425A  D7E9               	goto	l6842
 12226  00425C                     u7780:
 12227                           
 12228                           ; BSR set to: 0
 12229                           ;memoryController.c: 48: }
 12230                           ;memoryController.c: 49: return 1;
 12231                           
 12232                           ; BSR set to: 0
 12233  00425C  0E01               	movlw	1
 12234  00425E  0012               	return	
 12235  004260                     __end_of_entireMemoryFull:
 12236                           	opt stack 0
 12237                           tblptru	equ	0xFF8
 12238                           tblptrh	equ	0xFF7
 12239                           tblptrl	equ	0xFF6
 12240                           tablat	equ	0xFF5
 12241                           prodh	equ	0xFF4
 12242                           prodl	equ	0xFF3
 12243                           intcon	equ	0xFF2
 12244                           intcon3	equ	0xFF0
 12245                           postinc0	equ	0xFEE
 12246                           plusw0	equ	0xFEB
 12247                           fsr0h	equ	0xFEA
 12248                           fsr0l	equ	0xFE9
 12249                           wreg	equ	0xFE8
 12250                           indf1	equ	0xFE7
 12251                           postinc1	equ	0xFE6
 12252                           postdec1	equ	0xFE5
 12253                           plusw1	equ	0xFE3
 12254                           fsr1h	equ	0xFE2
 12255                           fsr1l	equ	0xFE1
 12256                           indf2	equ	0xFDF
 12257                           postinc2	equ	0xFDE
 12258                           postdec2	equ	0xFDD
 12259                           plusw2	equ	0xFDB
 12260                           fsr2h	equ	0xFDA
 12261                           fsr2l	equ	0xFD9
 12262                           status	equ	0xFD8
 12263                           
 12264 ;; *************** function _entireMemoryEmpty *****************
 12265 ;; Defined at:
 12266 ;;		line 36 in file "src/mem/memoryController.c"
 12267 ;; Parameters:    Size  Location     Type
 12268 ;;		None
 12269 ;; Auto vars:     Size  Location     Type
 12270 ;;  i               1    0[BANK0 ] unsigned char 
 12271 ;; Return value:  Size  Location     Type
 12272 ;;                  1    wreg      unsigned char 
 12273 ;; Registers used:
 12274 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 12275 ;; Tracked objects:
 12276 ;;		On entry : 0/0
 12277 ;;		On exit  : 0/0
 12278 ;;		Unchanged: 0/0
 12279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12280 ;;      Params:         0       0       0       0       0       0       0       0       0
 12281 ;;      Locals:         0       1       0       0       0       0       0       0       0
 12282 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12283 ;;      Totals:         0       1       0       0       0       0       0       0       0
 12284 ;;Total ram usage:        1 bytes
 12285 ;; Hardware stack levels used:    1
 12286 ;; Hardware stack levels required when called:    4
 12287 ;; This function calls:
 12288 ;;		Nothing
 12289 ;; This function is called by:
 12290 ;;		_memory_txFrameRequest
 12291 ;; This function uses a non-reentrant model
 12292 ;;
 12293                           
 12294                           	psect	text38
 12295  004260                     __ptext38:
 12296                           	opt stack 0
 12297  004260                     _entireMemoryEmpty:
 12298                           	opt stack 23
 12299                           
 12300                           ;memoryController.c: 37: for (uint8_t i = 0; i < 8;i++) {
 12301                           
 12302                           ; BSR set to: 0
 12303                           ;incstack = 0
 12304  004260  0E00               	movlw	0
 12305  004262  0100               	movlb	0	; () banked
 12306  004264  6F60               	movwf	entireMemoryEmpty@i& (0+255),b
 12307  004266                     l6822:
 12308                           
 12309                           ; BSR set to: 0
 12310  004266  0E07               	movlw	7
 12311  004268  6560               	cpfsgt	entireMemoryEmpty@i& (0+255),b
 12312  00426A  D001               	goto	l399
 12313  00426C  D013               	goto	u7750
 12314  00426E                     l399:
 12315                           
 12316                           ; BSR set to: 0
 12317                           ;memoryController.c: 38: if (occupiedMemory[i].fIsAssigned)
 12318                           
 12319                           ; BSR set to: 0
 12320  00426E  5160               	movf	entireMemoryEmpty@i& (0+255),w,b
 12321  004270  0D09               	mullw	9
 12322  004272  0E06               	movlw	6
 12323  004274  26F3               	addwf	prodl,f,c
 12324  004276  0E00               	movlw	0
 12325  004278  22F4               	addwfc	prodh,f,c
 12326  00427A  0E00               	movlw	low _occupiedMemory
 12327  00427C  24F3               	addwf	prodl,w,c
 12328  00427E  6ED9               	movwf	fsr2l,c
 12329  004280  0E02               	movlw	high _occupiedMemory
 12330  004282  20F4               	addwfc	prodh,w,c
 12331  004284  6EDA               	movwf	fsr2h,c
 12332  004286  50DF               	movf	indf2,w,c
 12333  004288  B4D8               	btfsc	status,2,c
 12334  00428A  D002               	goto	l401
 12335                           
 12336                           ; BSR set to: 0
 12337                           ;memoryController.c: 39: return 0;
 12338  00428C  0E00               	movlw	0
 12339                           
 12340                           ; BSR set to: 0
 12341  00428E  0012               	return	
 12342  004290                     l401:
 12343                           
 12344                           ; BSR set to: 0
 12345                           
 12346                           ; BSR set to: 0
 12347  004290  2B60               	incf	entireMemoryEmpty@i& (0+255),f,b
 12348  004292  D7E9               	goto	l6822
 12349  004294                     u7750:
 12350                           
 12351                           ; BSR set to: 0
 12352                           ;memoryController.c: 40: }
 12353                           ;memoryController.c: 41: return 1;
 12354                           
 12355                           ; BSR set to: 0
 12356  004294  0E01               	movlw	1
 12357  004296  0012               	return	
 12358  004298                     __end_of_entireMemoryEmpty:
 12359                           	opt stack 0
 12360                           tblptru	equ	0xFF8
 12361                           tblptrh	equ	0xFF7
 12362                           tblptrl	equ	0xFF6
 12363                           tablat	equ	0xFF5
 12364                           prodh	equ	0xFF4
 12365                           prodl	equ	0xFF3
 12366                           intcon	equ	0xFF2
 12367                           intcon3	equ	0xFF0
 12368                           postinc0	equ	0xFEE
 12369                           plusw0	equ	0xFEB
 12370                           fsr0h	equ	0xFEA
 12371                           fsr0l	equ	0xFE9
 12372                           wreg	equ	0xFE8
 12373                           indf1	equ	0xFE7
 12374                           postinc1	equ	0xFE6
 12375                           postdec1	equ	0xFE5
 12376                           plusw1	equ	0xFE3
 12377                           fsr1h	equ	0xFE2
 12378                           fsr1l	equ	0xFE1
 12379                           indf2	equ	0xFDF
 12380                           postinc2	equ	0xFDE
 12381                           postdec2	equ	0xFDD
 12382                           plusw2	equ	0xFDB
 12383                           fsr2h	equ	0xFDA
 12384                           fsr2l	equ	0xFD9
 12385                           status	equ	0xFD8
 12386                           
 12387 ;; *************** function _checkForOverlap *****************
 12388 ;; Defined at:
 12389 ;;		line 62 in file "src/mem/memoryController.c"
 12390 ;; Parameters:    Size  Location     Type
 12391 ;;  a               9   18[BANK0 ] struct memoryField
 12392 ;;  b               9   27[BANK0 ] struct memoryField
 12393 ;; Auto vars:     Size  Location     Type
 12394 ;;		None
 12395 ;; Return value:  Size  Location     Type
 12396 ;;                  1    wreg      unsigned char 
 12397 ;; Registers used:
 12398 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 12399 ;; Tracked objects:
 12400 ;;		On entry : 0/0
 12401 ;;		On exit  : 0/0
 12402 ;;		Unchanged: 0/0
 12403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12404 ;;      Params:         0      18       0       0       0       0       0       0       0
 12405 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12406 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12407 ;;      Totals:         0      18       0       0       0       0       0       0       0
 12408 ;;Total ram usage:       18 bytes
 12409 ;; Hardware stack levels used:    1
 12410 ;; Hardware stack levels required when called:    5
 12411 ;; This function calls:
 12412 ;;		_checkForOverlapSwitched
 12413 ;; This function is called by:
 12414 ;;		_memory_txFrameRequest
 12415 ;; This function uses a non-reentrant model
 12416 ;;
 12417                           
 12418                           	psect	text39
 12419  002DDC                     __ptext39:
 12420                           	opt stack 0
 12421  002DDC                     _checkForOverlap:
 12422                           	opt stack 22
 12423                           
 12424                           ;memoryController.c: 63: if ((a.start == b.start) ||
 12425                           ;memoryController.c: 64: (a.end == b.end) ||
 12426                           ;memoryController.c: 65: (a.start == b.end) ||
 12427                           ;memoryController.c: 66: (a.end == b.start) ||
 12428                           ;memoryController.c: 67: (a.end > 0x3000) ||
 12429                           ;memoryController.c: 68: (a.start > 0x3000) ||
 12430                           ;memoryController.c: 69: (b.end > 0x3000) ||
 12431                           ;memoryController.c: 70: (b.start > 0x3000))
 12432                           
 12433                           ; BSR set to: 0
 12434                           ;incstack = 0
 12435  002DDC  0100               	movlb	0	; () banked
 12436  002DDE  517B               	movf	checkForOverlap@b& (0+255),w,b
 12437  002DE0  1972               	xorwf	checkForOverlap@a& (0+255),w,b
 12438  002DE2  E104               	bnz	u7790
 12439  002DE4  517C               	movf	(checkForOverlap@b+1)& (0+255),w,b
 12440  002DE6  1973               	xorwf	(checkForOverlap@a+1)& (0+255),w,b
 12441  002DE8  B4D8               	btfsc	status,2,c
 12442  002DEA  D029               	goto	u7860
 12443  002DEC                     u7790:
 12444                           
 12445                           ; BSR set to: 0
 12446  002DEC  517D               	movf	(checkForOverlap@b+2)& (0+255),w,b
 12447  002DEE  1974               	xorwf	(checkForOverlap@a+2)& (0+255),w,b
 12448  002DF0  E104               	bnz	u7800
 12449  002DF2  517E               	movf	(checkForOverlap@b+3)& (0+255),w,b
 12450  002DF4  1975               	xorwf	(checkForOverlap@a+3)& (0+255),w,b
 12451  002DF6  B4D8               	btfsc	status,2,c
 12452  002DF8  D022               	goto	u7860
 12453  002DFA                     u7800:
 12454                           
 12455                           ; BSR set to: 0
 12456  002DFA  5172               	movf	checkForOverlap@a& (0+255),w,b
 12457  002DFC  197D               	xorwf	(checkForOverlap@b+2)& (0+255),w,b
 12458  002DFE  E104               	bnz	u7810
 12459  002E00  5173               	movf	(checkForOverlap@a+1)& (0+255),w,b
 12460  002E02  197E               	xorwf	(checkForOverlap@b+3)& (0+255),w,b
 12461  002E04  B4D8               	btfsc	status,2,c
 12462  002E06  D01B               	goto	u7860
 12463  002E08                     u7810:
 12464                           
 12465                           ; BSR set to: 0
 12466  002E08  517B               	movf	checkForOverlap@b& (0+255),w,b
 12467  002E0A  1974               	xorwf	(checkForOverlap@a+2)& (0+255),w,b
 12468  002E0C  E104               	bnz	u7820
 12469  002E0E  517C               	movf	(checkForOverlap@b+1)& (0+255),w,b
 12470  002E10  1975               	xorwf	(checkForOverlap@a+3)& (0+255),w,b
 12471  002E12  B4D8               	btfsc	status,2,c
 12472  002E14  D014               	goto	u7860
 12473  002E16                     u7820:
 12474                           
 12475                           ; BSR set to: 0
 12476  002E16  0574               	decf	(checkForOverlap@a+2)& (0+255),w,b
 12477  002E18  0E30               	movlw	48
 12478  002E1A  5975               	subwfb	(checkForOverlap@a+3)& (0+255),w,b
 12479  002E1C  B0D8               	btfsc	status,0,c
 12480  002E1E  D00F               	goto	u7860
 12481                           
 12482                           ; BSR set to: 0
 12483  002E20  0572               	decf	checkForOverlap@a& (0+255),w,b
 12484  002E22  0E30               	movlw	48
 12485  002E24  5973               	subwfb	(checkForOverlap@a+1)& (0+255),w,b
 12486  002E26  B0D8               	btfsc	status,0,c
 12487  002E28  D00A               	goto	u7860
 12488                           
 12489                           ; BSR set to: 0
 12490  002E2A  057D               	decf	(checkForOverlap@b+2)& (0+255),w,b
 12491  002E2C  0E30               	movlw	48
 12492  002E2E  597E               	subwfb	(checkForOverlap@b+3)& (0+255),w,b
 12493  002E30  B0D8               	btfsc	status,0,c
 12494  002E32  D005               	goto	u7860
 12495                           
 12496                           ; BSR set to: 0
 12497  002E34  057B               	decf	checkForOverlap@b& (0+255),w,b
 12498  002E36  0E30               	movlw	48
 12499  002E38  597C               	subwfb	(checkForOverlap@b+1)& (0+255),w,b
 12500  002E3A  A0D8               	btfss	status,0,c
 12501  002E3C  D002               	goto	l419
 12502  002E3E                     u7860:
 12503                           
 12504                           ; BSR set to: 0
 12505                           ;memoryController.c: 71: return 1;
 12506                           
 12507                           ; BSR set to: 0
 12508  002E3E  0E01               	movlw	1
 12509                           
 12510                           ; BSR set to: 0
 12511  002E40  0012               	return	
 12512  002E42                     l419:
 12513                           
 12514                           ; BSR set to: 0
 12515                           ;memoryController.c: 74: if (a.start < a.end) {
 12516                           
 12517                           ; BSR set to: 0
 12518  002E42  5174               	movf	(checkForOverlap@a+2)& (0+255),w,b
 12519  002E44  5D72               	subwf	checkForOverlap@a& (0+255),w,b
 12520  002E46  5175               	movf	(checkForOverlap@a+3)& (0+255),w,b
 12521  002E48  5973               	subwfb	(checkForOverlap@a+1)& (0+255),w,b
 12522  002E4A  B0D8               	btfsc	status,0,c
 12523  002E4C  D036               	goto	l423
 12524                           
 12525                           ; BSR set to: 0
 12526                           ;memoryController.c: 75: if (b.start < b.end) {
 12527  002E4E  517D               	movf	(checkForOverlap@b+2)& (0+255),w,b
 12528  002E50  5D7B               	subwf	checkForOverlap@b& (0+255),w,b
 12529  002E52  517E               	movf	(checkForOverlap@b+3)& (0+255),w,b
 12530  002E54  597C               	subwfb	(checkForOverlap@b+1)& (0+255),w,b
 12531  002E56  B0D8               	btfsc	status,0,c
 12532  002E58  D025               	goto	l424
 12533                           
 12534                           ; BSR set to: 0
 12535                           ;memoryController.c: 77: if (a.start < b.start) {
 12536  002E5A  517B               	movf	checkForOverlap@b& (0+255),w,b
 12537  002E5C  5D72               	subwf	checkForOverlap@a& (0+255),w,b
 12538  002E5E  517C               	movf	(checkForOverlap@b+1)& (0+255),w,b
 12539  002E60  5973               	subwfb	(checkForOverlap@a+1)& (0+255),w,b
 12540  002E62  B0D8               	btfsc	status,0,c
 12541  002E64  D00A               	goto	l425
 12542                           
 12543                           ; BSR set to: 0
 12544                           ;memoryController.c: 78: if (a.end > b.start) {
 12545  002E66  5174               	movf	(checkForOverlap@a+2)& (0+255),w,b
 12546  002E68  5D7B               	subwf	checkForOverlap@b& (0+255),w,b
 12547  002E6A  5175               	movf	(checkForOverlap@a+3)& (0+255),w,b
 12548  002E6C  597C               	subwfb	(checkForOverlap@b+1)& (0+255),w,b
 12549  002E6E  B0D8               	btfsc	status,0,c
 12550  002E70  D002               	goto	l426
 12551                           
 12552                           ; BSR set to: 0
 12553                           ;memoryController.c: 79: return 1;
 12554  002E72  0E01               	movlw	1
 12555                           
 12556                           ; BSR set to: 0
 12557                           ;memoryController.c: 80: }
 12558                           
 12559                           ; BSR set to: 0
 12560  002E74  0012               	return	
 12561  002E76                     l426:
 12562                           
 12563                           ; BSR set to: 0
 12564                           ;memoryController.c: 81: else {
 12565                           ;memoryController.c: 82: return 0;
 12566                           
 12567                           ; BSR set to: 0
 12568  002E76  0E00               	movlw	0
 12569                           
 12570                           ; BSR set to: 0
 12571                           ;memoryController.c: 83: }
 12572                           ;memoryController.c: 84: }
 12573                           
 12574                           ; BSR set to: 0
 12575  002E78  0012               	return	
 12576  002E7A                     l425:
 12577                           
 12578                           ; BSR set to: 0
 12579                           ;memoryController.c: 85: else {
 12580                           ;memoryController.c: 86: return checkForOverlapSwitched(b, a);
 12581                           
 12582                           ; BSR set to: 0
 12583  002E7A  EE20  F07B         	lfsr	2,checkForOverlap@b
 12584  002E7E  EE00  F060         	lfsr	0,checkForOverlapSwitched@a
 12585  002E82  0E08               	movlw	8
 12586  002E84                     u7911:
 12587  002E84  CFDB FFEB          	movff	plusw2,plusw0
 12588  002E88  06E8               	decf	wreg,f,c
 12589  002E8A  E2FC               	bc	u7911
 12590  002E8C  EE20  F072         	lfsr	2,checkForOverlap@a
 12591  002E90  EE00  F069         	lfsr	0,checkForOverlapSwitched@b
 12592  002E94  0E08               	movlw	8
 12593  002E96                     u7921:
 12594  002E96  CFDB FFEB          	movff	plusw2,plusw0
 12595  002E9A  06E8               	decf	wreg,f,c
 12596  002E9C  E2FC               	bc	u7921
 12597  002E9E  EC15  F019         	call	_checkForOverlapSwitched	;wreg free
 12598                           
 12599                           ;memoryController.c: 87: }
 12600                           ;memoryController.c: 88: }
 12601  002EA2  0012               	return	
 12602  002EA4                     l424:
 12603                           
 12604                           ;memoryController.c: 89: else {
 12605                           ;memoryController.c: 90: if (b.end < a.start)
 12606  002EA4  0100               	movlb	0	; () banked
 12607  002EA6  5172               	movf	checkForOverlap@a& (0+255),w,b
 12608  002EA8  5D7D               	subwf	(checkForOverlap@b+2)& (0+255),w,b
 12609  002EAA  5173               	movf	(checkForOverlap@a+1)& (0+255),w,b
 12610  002EAC  597E               	subwfb	(checkForOverlap@b+3)& (0+255),w,b
 12611  002EAE  B0D8               	btfsc	status,0,c
 12612  002EB0  D002               	goto	l430
 12613                           
 12614                           ; BSR set to: 0
 12615                           ;memoryController.c: 91: return 0;
 12616  002EB2  0E00               	movlw	0
 12617                           
 12618                           ; BSR set to: 0
 12619                           
 12620                           ; BSR set to: 0
 12621  002EB4  0012               	return	
 12622  002EB6                     l430:
 12623                           
 12624                           ; BSR set to: 0
 12625                           ;memoryController.c: 92: else
 12626                           ;memoryController.c: 93: return 1;
 12627                           
 12628                           ; BSR set to: 0
 12629  002EB6  0E01               	movlw	1
 12630                           
 12631                           ; BSR set to: 0
 12632                           ;memoryController.c: 94: }
 12633                           ;memoryController.c: 95: }
 12634                           
 12635                           ; BSR set to: 0
 12636                           
 12637                           ; BSR set to: 0
 12638  002EB8  0012               	return	
 12639  002EBA                     l423:
 12640                           
 12641                           ; BSR set to: 0
 12642                           ;memoryController.c: 96: else {
 12643                           ;memoryController.c: 97: return checkForOverlapSwitched(b, a);
 12644                           
 12645                           ; BSR set to: 0
 12646  002EBA  EE20  F07B         	lfsr	2,checkForOverlap@b
 12647  002EBE  EE00  F060         	lfsr	0,checkForOverlapSwitched@a
 12648  002EC2  0E08               	movlw	8
 12649  002EC4                     u7941:
 12650  002EC4  CFDB FFEB          	movff	plusw2,plusw0
 12651  002EC8  06E8               	decf	wreg,f,c
 12652  002ECA  E2FC               	bc	u7941
 12653  002ECC  EE20  F072         	lfsr	2,checkForOverlap@a
 12654  002ED0  EE00  F069         	lfsr	0,checkForOverlapSwitched@b
 12655  002ED4  0E08               	movlw	8
 12656  002ED6                     u7951:
 12657  002ED6  CFDB FFEB          	movff	plusw2,plusw0
 12658  002EDA  06E8               	decf	wreg,f,c
 12659  002EDC  E2FC               	bc	u7951
 12660  002EDE  EC15  F019         	call	_checkForOverlapSwitched	;wreg free
 12661  002EE2  0012               	return	
 12662  002EE4                     __end_of_checkForOverlap:
 12663                           	opt stack 0
 12664                           tblptru	equ	0xFF8
 12665                           tblptrh	equ	0xFF7
 12666                           tblptrl	equ	0xFF6
 12667                           tablat	equ	0xFF5
 12668                           prodh	equ	0xFF4
 12669                           prodl	equ	0xFF3
 12670                           intcon	equ	0xFF2
 12671                           intcon3	equ	0xFF0
 12672                           postinc0	equ	0xFEE
 12673                           plusw0	equ	0xFEB
 12674                           fsr0h	equ	0xFEA
 12675                           fsr0l	equ	0xFE9
 12676                           wreg	equ	0xFE8
 12677                           indf1	equ	0xFE7
 12678                           postinc1	equ	0xFE6
 12679                           postdec1	equ	0xFE5
 12680                           plusw1	equ	0xFE3
 12681                           fsr1h	equ	0xFE2
 12682                           fsr1l	equ	0xFE1
 12683                           indf2	equ	0xFDF
 12684                           postinc2	equ	0xFDE
 12685                           postdec2	equ	0xFDD
 12686                           plusw2	equ	0xFDB
 12687                           fsr2h	equ	0xFDA
 12688                           fsr2l	equ	0xFD9
 12689                           status	equ	0xFD8
 12690                           
 12691 ;; *************** function _checkForOverlapSwitched *****************
 12692 ;; Defined at:
 12693 ;;		line 101 in file "src/mem/memoryController.c"
 12694 ;; Parameters:    Size  Location     Type
 12695 ;;  a               9    0[BANK0 ] struct memoryField
 12696 ;;  b               9    9[BANK0 ] struct memoryField
 12697 ;; Auto vars:     Size  Location     Type
 12698 ;;		None
 12699 ;; Return value:  Size  Location     Type
 12700 ;;                  1    wreg      unsigned char 
 12701 ;; Registers used:
 12702 ;;		wreg, status,2, status,0
 12703 ;; Tracked objects:
 12704 ;;		On entry : 0/0
 12705 ;;		On exit  : 0/0
 12706 ;;		Unchanged: 0/0
 12707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12708 ;;      Params:         0      18       0       0       0       0       0       0       0
 12709 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12710 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12711 ;;      Totals:         0      18       0       0       0       0       0       0       0
 12712 ;;Total ram usage:       18 bytes
 12713 ;; Hardware stack levels used:    1
 12714 ;; Hardware stack levels required when called:    4
 12715 ;; This function calls:
 12716 ;;		Nothing
 12717 ;; This function is called by:
 12718 ;;		_checkForOverlap
 12719 ;; This function uses a non-reentrant model
 12720 ;;
 12721                           
 12722                           	psect	text40
 12723  00322A                     __ptext40:
 12724                           	opt stack 0
 12725  00322A                     _checkForOverlapSwitched:
 12726                           	opt stack 22
 12727                           
 12728                           ;memoryController.c: 104: if ((a.start == b.start) ||
 12729                           ;memoryController.c: 105: (a.end == b.end) ||
 12730                           ;memoryController.c: 106: (a.start == b.end) ||
 12731                           ;memoryController.c: 107: (a.end == b.start) ||
 12732                           ;memoryController.c: 108: (a.end > 0x3000) ||
 12733                           ;memoryController.c: 109: (a.start > 0x3000) ||
 12734                           ;memoryController.c: 110: (b.end > 0x3000) ||
 12735                           ;memoryController.c: 111: (b.start > 0x3000))
 12736                           
 12737                           ;incstack = 0
 12738  00322A  0100               	movlb	0	; () banked
 12739  00322C  5169               	movf	checkForOverlapSwitched@b& (0+255),w,b
 12740  00322E  1960               	xorwf	checkForOverlapSwitched@a& (0+255),w,b
 12741  003230  E104               	bnz	u7600
 12742  003232  516A               	movf	(checkForOverlapSwitched@b+1)& (0+255),w,b
 12743  003234  1961               	xorwf	(checkForOverlapSwitched@a+1)& (0+255),w,b
 12744  003236  B4D8               	btfsc	status,2,c
 12745  003238  D029               	goto	u7670
 12746  00323A                     u7600:
 12747                           
 12748                           ; BSR set to: 0
 12749  00323A  516B               	movf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 12750  00323C  1962               	xorwf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 12751  00323E  E104               	bnz	u7610
 12752  003240  516C               	movf	(checkForOverlapSwitched@b+3)& (0+255),w,b
 12753  003242  1963               	xorwf	(checkForOverlapSwitched@a+3)& (0+255),w,b
 12754  003244  B4D8               	btfsc	status,2,c
 12755  003246  D022               	goto	u7670
 12756  003248                     u7610:
 12757                           
 12758                           ; BSR set to: 0
 12759  003248  5160               	movf	checkForOverlapSwitched@a& (0+255),w,b
 12760  00324A  196B               	xorwf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 12761  00324C  E104               	bnz	u7620
 12762  00324E  5161               	movf	(checkForOverlapSwitched@a+1)& (0+255),w,b
 12763  003250  196C               	xorwf	(checkForOverlapSwitched@b+3)& (0+255),w,b
 12764  003252  B4D8               	btfsc	status,2,c
 12765  003254  D01B               	goto	u7670
 12766  003256                     u7620:
 12767                           
 12768                           ; BSR set to: 0
 12769  003256  5169               	movf	checkForOverlapSwitched@b& (0+255),w,b
 12770  003258  1962               	xorwf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 12771  00325A  E104               	bnz	u7630
 12772  00325C  516A               	movf	(checkForOverlapSwitched@b+1)& (0+255),w,b
 12773  00325E  1963               	xorwf	(checkForOverlapSwitched@a+3)& (0+255),w,b
 12774  003260  B4D8               	btfsc	status,2,c
 12775  003262  D014               	goto	u7670
 12776  003264                     u7630:
 12777                           
 12778                           ; BSR set to: 0
 12779  003264  0562               	decf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 12780  003266  0E30               	movlw	48
 12781  003268  5963               	subwfb	(checkForOverlapSwitched@a+3)& (0+255),w,b
 12782  00326A  B0D8               	btfsc	status,0,c
 12783  00326C  D00F               	goto	u7670
 12784                           
 12785                           ; BSR set to: 0
 12786  00326E  0560               	decf	checkForOverlapSwitched@a& (0+255),w,b
 12787  003270  0E30               	movlw	48
 12788  003272  5961               	subwfb	(checkForOverlapSwitched@a+1)& (0+255),w,b
 12789  003274  B0D8               	btfsc	status,0,c
 12790  003276  D00A               	goto	u7670
 12791                           
 12792                           ; BSR set to: 0
 12793  003278  056B               	decf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 12794  00327A  0E30               	movlw	48
 12795  00327C  596C               	subwfb	(checkForOverlapSwitched@b+3)& (0+255),w,b
 12796  00327E  B0D8               	btfsc	status,0,c
 12797  003280  D005               	goto	u7670
 12798                           
 12799                           ; BSR set to: 0
 12800  003282  0569               	decf	checkForOverlapSwitched@b& (0+255),w,b
 12801  003284  0E30               	movlw	48
 12802  003286  596A               	subwfb	(checkForOverlapSwitched@b+1)& (0+255),w,b
 12803  003288  A0D8               	btfss	status,0,c
 12804  00328A  D002               	goto	l435
 12805  00328C                     u7670:
 12806                           
 12807                           ; BSR set to: 0
 12808                           ;memoryController.c: 112: return 1;
 12809                           
 12810                           ; BSR set to: 0
 12811  00328C  0E01               	movlw	1
 12812                           
 12813                           ; BSR set to: 0
 12814  00328E  0012               	return	
 12815  003290                     l435:
 12816                           
 12817                           ; BSR set to: 0
 12818                           ;memoryController.c: 115: if (a.start < a.end) {
 12819                           
 12820                           ; BSR set to: 0
 12821  003290  5162               	movf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 12822  003292  5D60               	subwf	checkForOverlapSwitched@a& (0+255),w,b
 12823  003294  5163               	movf	(checkForOverlapSwitched@a+3)& (0+255),w,b
 12824  003296  5961               	subwfb	(checkForOverlapSwitched@a+1)& (0+255),w,b
 12825  003298  B0D8               	btfsc	status,0,c
 12826  00329A  0012               	return	
 12827                           
 12828                           ; BSR set to: 0
 12829                           ;memoryController.c: 116: if (b.start < b.end) {
 12830  00329C  516B               	movf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 12831  00329E  5D69               	subwf	checkForOverlapSwitched@b& (0+255),w,b
 12832  0032A0  516C               	movf	(checkForOverlapSwitched@b+3)& (0+255),w,b
 12833  0032A2  596A               	subwfb	(checkForOverlapSwitched@b+1)& (0+255),w,b
 12834  0032A4  B0D8               	btfsc	status,0,c
 12835  0032A6  D010               	goto	l440
 12836                           
 12837                           ; BSR set to: 0
 12838                           ;memoryController.c: 118: if (a.start < b.start) {
 12839  0032A8  5169               	movf	checkForOverlapSwitched@b& (0+255),w,b
 12840  0032AA  5D60               	subwf	checkForOverlapSwitched@a& (0+255),w,b
 12841  0032AC  516A               	movf	(checkForOverlapSwitched@b+1)& (0+255),w,b
 12842  0032AE  5961               	subwfb	(checkForOverlapSwitched@a+1)& (0+255),w,b
 12843  0032B0  B0D8               	btfsc	status,0,c
 12844  0032B2  0012               	return	
 12845                           
 12846                           ; BSR set to: 0
 12847                           ;memoryController.c: 119: if (a.end > b.start) {
 12848  0032B4  5162               	movf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 12849  0032B6  5D69               	subwf	checkForOverlapSwitched@b& (0+255),w,b
 12850  0032B8  5163               	movf	(checkForOverlapSwitched@a+3)& (0+255),w,b
 12851  0032BA  596A               	subwfb	(checkForOverlapSwitched@b+1)& (0+255),w,b
 12852  0032BC  B0D8               	btfsc	status,0,c
 12853  0032BE  D002               	goto	l442
 12854                           
 12855                           ; BSR set to: 0
 12856                           ;memoryController.c: 120: return 1;
 12857  0032C0  0E01               	movlw	1
 12858                           
 12859                           ; BSR set to: 0
 12860                           ;memoryController.c: 121: }
 12861                           
 12862                           ; BSR set to: 0
 12863  0032C2  0012               	return	
 12864  0032C4                     l442:
 12865                           
 12866                           ; BSR set to: 0
 12867                           ;memoryController.c: 122: else {
 12868                           ;memoryController.c: 123: return 0;
 12869                           
 12870                           ; BSR set to: 0
 12871  0032C4  0E00               	movlw	0
 12872                           
 12873                           ; BSR set to: 0
 12874                           ;memoryController.c: 124: }
 12875                           ;memoryController.c: 125: }
 12876                           ;memoryController.c: 126: }
 12877                           
 12878                           ; BSR set to: 0
 12879                           
 12880                           ; BSR set to: 0
 12881  0032C6  0012               	return	
 12882  0032C8                     l440:
 12883                           
 12884                           ; BSR set to: 0
 12885                           ;memoryController.c: 127: else {
 12886                           ;memoryController.c: 128: if (b.end < a.start)
 12887                           
 12888                           ; BSR set to: 0
 12889  0032C8  5160               	movf	checkForOverlapSwitched@a& (0+255),w,b
 12890  0032CA  5D6B               	subwf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 12891  0032CC  5161               	movf	(checkForOverlapSwitched@a+1)& (0+255),w,b
 12892  0032CE  596C               	subwfb	(checkForOverlapSwitched@b+3)& (0+255),w,b
 12893  0032D0  B0D8               	btfsc	status,0,c
 12894  0032D2  D002               	goto	l445
 12895                           
 12896                           ; BSR set to: 0
 12897                           ;memoryController.c: 129: return 0;
 12898  0032D4  0E00               	movlw	0
 12899                           
 12900                           ; BSR set to: 0
 12901                           
 12902                           ; BSR set to: 0
 12903  0032D6  0012               	return	
 12904  0032D8                     l445:
 12905                           
 12906                           ; BSR set to: 0
 12907                           ;memoryController.c: 130: else
 12908                           ;memoryController.c: 131: return 1;
 12909                           
 12910                           ; BSR set to: 0
 12911  0032D8  0E01               	movlw	1
 12912                           
 12913                           ; BSR set to: 0
 12914                           
 12915                           ; BSR set to: 0
 12916                           
 12917                           ; BSR set to: 0
 12918  0032DA  0012               	return	
 12919  0032DC                     __end_of_checkForOverlapSwitched:
 12920                           	opt stack 0
 12921                           tblptru	equ	0xFF8
 12922                           tblptrh	equ	0xFF7
 12923                           tblptrl	equ	0xFF6
 12924                           tablat	equ	0xFF5
 12925                           prodh	equ	0xFF4
 12926                           prodl	equ	0xFF3
 12927                           intcon	equ	0xFF2
 12928                           intcon3	equ	0xFF0
 12929                           postinc0	equ	0xFEE
 12930                           plusw0	equ	0xFEB
 12931                           fsr0h	equ	0xFEA
 12932                           fsr0l	equ	0xFE9
 12933                           wreg	equ	0xFE8
 12934                           indf1	equ	0xFE7
 12935                           postinc1	equ	0xFE6
 12936                           postdec1	equ	0xFE5
 12937                           plusw1	equ	0xFE3
 12938                           fsr1h	equ	0xFE2
 12939                           fsr1l	equ	0xFE1
 12940                           indf2	equ	0xFDF
 12941                           postinc2	equ	0xFDE
 12942                           postdec2	equ	0xFDD
 12943                           plusw2	equ	0xFDB
 12944                           fsr2h	equ	0xFDA
 12945                           fsr2l	equ	0xFD9
 12946                           status	equ	0xFD8
 12947                           
 12948 ;; *************** function ___wmul *****************
 12949 ;; Defined at:
 12950 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 12951 ;; Parameters:    Size  Location     Type
 12952 ;;  multiplier      2    0[BANK0 ] unsigned int 
 12953 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 12954 ;; Auto vars:     Size  Location     Type
 12955 ;;  product         2    4[BANK0 ] unsigned int 
 12956 ;; Return value:  Size  Location     Type
 12957 ;;                  2    0[BANK0 ] unsigned int 
 12958 ;; Registers used:
 12959 ;;		wreg, status,2, status,0, prodl, prodh
 12960 ;; Tracked objects:
 12961 ;;		On entry : 0/0
 12962 ;;		On exit  : 0/0
 12963 ;;		Unchanged: 0/0
 12964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12965 ;;      Params:         0       4       0       0       0       0       0       0       0
 12966 ;;      Locals:         0       2       0       0       0       0       0       0       0
 12967 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12968 ;;      Totals:         0       6       0       0       0       0       0       0       0
 12969 ;;Total ram usage:        6 bytes
 12970 ;; Hardware stack levels used:    1
 12971 ;; Hardware stack levels required when called:    4
 12972 ;; This function calls:
 12973 ;;		Nothing
 12974 ;; This function is called by:
 12975 ;;		_memory_txFrameRequest
 12976 ;;		_intToString
 12977 ;; This function uses a non-reentrant model
 12978 ;;
 12979                           
 12980                           	psect	text41
 12981  00443A                     __ptext41:
 12982                           	opt stack 0
 12983  00443A                     ___wmul:
 12984                           	opt stack 24
 12985                           
 12986                           ; BSR set to: 0
 12987                           ;incstack = 0
 12988  00443A  0100               	movlb	0	; () banked
 12989  00443C  5160               	movf	___wmul@multiplier& (0+255),w,b
 12990  00443E  0362               	mulwf	___wmul@multiplicand& (0+255),b
 12991  004440  CFF3 F064          	movff	prodl,___wmul@product
 12992  004444  CFF4 F065          	movff	prodh,___wmul@product+1
 12993  004448  5160               	movf	___wmul@multiplier& (0+255),w,b
 12994  00444A  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 12995  00444C  50F3               	movf	prodl,w,c
 12996  00444E  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 12997  004450  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 12998  004452  0362               	mulwf	___wmul@multiplicand& (0+255),b
 12999  004454  50F3               	movf	prodl,w,c
 13000  004456  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 13001                           
 13002                           ; BSR set to: 0
 13003  004458  C064  F060         	movff	___wmul@product,?___wmul
 13004  00445C  C065  F061         	movff	___wmul@product+1,?___wmul+1
 13005  004460  0012               	return	
 13006  004462                     __end_of___wmul:
 13007                           	opt stack 0
 13008                           tblptru	equ	0xFF8
 13009                           tblptrh	equ	0xFF7
 13010                           tblptrl	equ	0xFF6
 13011                           tablat	equ	0xFF5
 13012                           prodh	equ	0xFF4
 13013                           prodl	equ	0xFF3
 13014                           intcon	equ	0xFF2
 13015                           intcon3	equ	0xFF0
 13016                           postinc0	equ	0xFEE
 13017                           plusw0	equ	0xFEB
 13018                           fsr0h	equ	0xFEA
 13019                           fsr0l	equ	0xFE9
 13020                           wreg	equ	0xFE8
 13021                           indf1	equ	0xFE7
 13022                           postinc1	equ	0xFE6
 13023                           postdec1	equ	0xFE5
 13024                           plusw1	equ	0xFE3
 13025                           fsr1h	equ	0xFE2
 13026                           fsr1l	equ	0xFE1
 13027                           indf2	equ	0xFDF
 13028                           postinc2	equ	0xFDE
 13029                           postdec2	equ	0xFDD
 13030                           plusw2	equ	0xFDB
 13031                           fsr2h	equ	0xFDA
 13032                           fsr2l	equ	0xFD9
 13033                           status	equ	0xFD8
 13034                           
 13035 ;; *************** function _ethernetController_writeEtherTypeFieldToBuffer *****************
 13036 ;; Defined at:
 13037 ;;		line 234 in file "src/enc424j600/ENC424J600.c"
 13038 ;; Parameters:    Size  Location     Type
 13039 ;;  ethtype         2   15[BANK0 ] enum E5498
 13040 ;;  field           9   17[BANK0 ] struct memoryField
 13041 ;; Auto vars:     Size  Location     Type
 13042 ;;  opcode          1   28[BANK0 ] unsigned char 
 13043 ;;  highByte        1   27[BANK0 ] unsigned char 
 13044 ;;  lowByte         1   26[BANK0 ] unsigned char 
 13045 ;; Return value:  Size  Location     Type
 13046 ;;                  1    wreg      void 
 13047 ;; Registers used:
 13048 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13049 ;; Tracked objects:
 13050 ;;		On entry : 0/0
 13051 ;;		On exit  : 0/0
 13052 ;;		Unchanged: 0/0
 13053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13054 ;;      Params:         0      11       0       0       0       0       0       0       0
 13055 ;;      Locals:         0       3       0       0       0       0       0       0       0
 13056 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13057 ;;      Totals:         0      14       0       0       0       0       0       0       0
 13058 ;;Total ram usage:       14 bytes
 13059 ;; Hardware stack levels used:    1
 13060 ;; Hardware stack levels required when called:    7
 13061 ;; This function calls:
 13062 ;;		_ENC424J600_setGPDATAWritePointer
 13063 ;;		_ENC424J600_writeSPI
 13064 ;; This function is called by:
 13065 ;;		_ethernet_txFrameRequest
 13066 ;; This function uses a non-reentrant model
 13067 ;;
 13068                           
 13069                           	psect	text42
 13070  003F80                     __ptext42:
 13071                           	opt stack 0
 13072  003F80                     _ethernetController_writeEtherTypeFieldToBuffer:
 13073                           	opt stack 21
 13074                           
 13075                           ;ENC424J600.c: 235: ENC424J600_setGPDATAWritePointer(field.start + 0x0006);
 13076                           
 13077                           ; BSR set to: 0
 13078                           ;incstack = 0
 13079  003F80  0E06               	movlw	6
 13080  003F82  0100               	movlb	0	; () banked
 13081  003F84  2571               	addwf	ethernetController_writeEtherTypeFieldToBuffer@field& (0+255),w,b
 13082  003F86  6F6A               	movwf	ENC424J600_setGPDATAWritePointer@addr& (0+255),b
 13083  003F88  0E00               	movlw	0
 13084  003F8A  2172               	addwfc	(ethernetController_writeEtherTypeFieldToBuffer@field+1)& (0+255),w,b
 13085  003F8C  6F6B               	movwf	(ENC424J600_setGPDATAWritePointer@addr+1)& (0+255),b
 13086  003F8E  ECD8  F020         	call	_ENC424J600_setGPDATAWritePointer	;wreg free
 13087                           
 13088                           ;ENC424J600.c: 236: uint8_t lowByte = ethtype & 0x00ff;
 13089  003F92  C06F  F07A         	movff	ethernetController_writeEtherTypeFieldToBuffer@ethtype,ethernetController_writeEt
      +                          herTypeFieldToBuffer@lowByte
 13090                           
 13091                           ;ENC424J600.c: 237: uint8_t highByte = (ethtype & 0xff00) >> 8;
 13092  003F96  0100               	movlb	0	; () banked
 13093  003F98  5170               	movf	(ethernetController_writeEtherTypeFieldToBuffer@ethtype+1)& (0+255),w,b
 13094  003F9A  6F7B               	movwf	ethernetController_writeEtherTypeFieldToBuffer@highByte& (0+255),b
 13095                           
 13096                           ; BSR set to: 0
 13097                           ;ENC424J600.c: 238: uint8_t opcode = 0x2A;
 13098  003F9C  0E2A               	movlw	42
 13099  003F9E  6F7C               	movwf	ethernetController_writeEtherTypeFieldToBuffer@opcode& (0+255),b
 13100                           
 13101                           ; BSR set to: 0
 13102                           ;ENC424J600.c: 239: PORTBbits.RB4=0;
 13103  003FA0  9881               	bcf	3969,4,c	;volatile
 13104                           
 13105                           ;ENC424J600.c: 240: ENC424J600_writeSPI(&opcode);
 13106  003FA2  0E7C               	movlw	low ethernetController_writeEtherTypeFieldToBuffer@opcode
 13107  003FA4  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 13108  003FA6  0E00               	movlw	high ethernetController_writeEtherTypeFieldToBuffer@opcode
 13109  003FA8  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 13110  003FAA  ECB5  F01E         	call	_ENC424J600_writeSPI	;wreg free
 13111                           
 13112                           ;ENC424J600.c: 241: ENC424J600_writeSPI(&highByte);
 13113  003FAE  0E7B               	movlw	low ethernetController_writeEtherTypeFieldToBuffer@highByte
 13114  003FB0  0100               	movlb	0	; () banked
 13115  003FB2  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 13116  003FB4  0E00               	movlw	high ethernetController_writeEtherTypeFieldToBuffer@highByte
 13117  003FB6  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 13118  003FB8  ECB5  F01E         	call	_ENC424J600_writeSPI	;wreg free
 13119                           
 13120                           ;ENC424J600.c: 242: ENC424J600_writeSPI(&lowByte);
 13121  003FBC  0E7A               	movlw	low ethernetController_writeEtherTypeFieldToBuffer@lowByte
 13122  003FBE  0100               	movlb	0	; () banked
 13123  003FC0  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 13124  003FC2  0E00               	movlw	high ethernetController_writeEtherTypeFieldToBuffer@lowByte
 13125  003FC4  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 13126  003FC6  ECB5  F01E         	call	_ENC424J600_writeSPI	;wreg free
 13127                           
 13128                           ;ENC424J600.c: 243: PORTBbits.RB4=1;
 13129  003FCA  8881               	bsf	3969,4,c	;volatile
 13130  003FCC  0012               	return		;funcret
 13131  003FCE                     __end_of_ethernetController_writeEtherTypeFieldToBuffer:
 13132                           	opt stack 0
 13133                           tblptru	equ	0xFF8
 13134                           tblptrh	equ	0xFF7
 13135                           tblptrl	equ	0xFF6
 13136                           tablat	equ	0xFF5
 13137                           prodh	equ	0xFF4
 13138                           prodl	equ	0xFF3
 13139                           intcon	equ	0xFF2
 13140                           intcon3	equ	0xFF0
 13141                           postinc0	equ	0xFEE
 13142                           plusw0	equ	0xFEB
 13143                           fsr0h	equ	0xFEA
 13144                           fsr0l	equ	0xFE9
 13145                           wreg	equ	0xFE8
 13146                           indf1	equ	0xFE7
 13147                           postinc1	equ	0xFE6
 13148                           postdec1	equ	0xFE5
 13149                           plusw1	equ	0xFE3
 13150                           fsr1h	equ	0xFE2
 13151                           fsr1l	equ	0xFE1
 13152                           indf2	equ	0xFDF
 13153                           postinc2	equ	0xFDE
 13154                           postdec2	equ	0xFDD
 13155                           plusw2	equ	0xFDB
 13156                           fsr2h	equ	0xFDA
 13157                           fsr2l	equ	0xFD9
 13158                           status	equ	0xFD8
 13159                           
 13160 ;; *************** function _ethernetController_writeDestinationMACAddress *****************
 13161 ;; Defined at:
 13162 ;;		line 221 in file "src/enc424j600/ENC424J600.c"
 13163 ;; Parameters:    Size  Location     Type
 13164 ;;  addr            6   15[BANK0 ] struct macaddress
 13165 ;;  field           9   21[BANK0 ] struct memoryField
 13166 ;; Auto vars:     Size  Location     Type
 13167 ;;  i               1   37[BANK0 ] unsigned char 
 13168 ;;  i               1   38[BANK0 ] unsigned char 
 13169 ;;  data            6   30[BANK0 ] unsigned char [6]
 13170 ;;  opcode          1   36[BANK0 ] unsigned char 
 13171 ;; Return value:  Size  Location     Type
 13172 ;;                  1    wreg      void 
 13173 ;; Registers used:
 13174 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13175 ;; Tracked objects:
 13176 ;;		On entry : 0/0
 13177 ;;		On exit  : 0/0
 13178 ;;		Unchanged: 0/0
 13179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13180 ;;      Params:         0      15       0       0       0       0       0       0       0
 13181 ;;      Locals:         0       9       0       0       0       0       0       0       0
 13182 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13183 ;;      Totals:         0      24       0       0       0       0       0       0       0
 13184 ;;Total ram usage:       24 bytes
 13185 ;; Hardware stack levels used:    1
 13186 ;; Hardware stack levels required when called:    7
 13187 ;; This function calls:
 13188 ;;		_ENC424J600_setGPDATAWritePointer
 13189 ;;		_ENC424J600_writeSPI
 13190 ;; This function is called by:
 13191 ;;		_ethernet_txFrameRequest
 13192 ;;		_ipv4_sendFrame
 13193 ;; This function uses a non-reentrant model
 13194 ;;
 13195                           
 13196                           	psect	text43
 13197  003818                     __ptext43:
 13198                           	opt stack 0
 13199  003818                     _ethernetController_writeDestinationMACAddress:
 13200                           	opt stack 21
 13201                           
 13202                           ;ENC424J600.c: 222: ENC424J600_setGPDATAWritePointer(field.start);
 13203                           
 13204                           ;incstack = 0
 13205  003818  C075  F06A         	movff	ethernetController_writeDestinationMACAddress@field,ENC424J600_setGPDATAWritePoin
      +                          ter@addr
 13206  00381C  C076  F06B         	movff	ethernetController_writeDestinationMACAddress@field+1,ENC424J600_setGPDATAWritePo
      +                          inter@addr+1
 13207  003820  ECD8  F020         	call	_ENC424J600_setGPDATAWritePointer	;wreg free
 13208                           
 13209                           ;ENC424J600.c: 223: uint8_t data[6];
 13210                           ;ENC424J600.c: 224: for (uint8_t i = 0; i < 6; i++)
 13211  003824  0E00               	movlw	0
 13212  003826  0100               	movlb	0	; () banked
 13213  003828  6F86               	movwf	ethernetController_writeDestinationMACAddress@i& (0+255),b
 13214  00382A                     l6952:
 13215                           
 13216                           ; BSR set to: 0
 13217  00382A  0E05               	movlw	5
 13218  00382C  6586               	cpfsgt	ethernetController_writeDestinationMACAddress@i& (0+255),b
 13219  00382E  D001               	goto	l124
 13220  003830  D014               	goto	u7970
 13221  003832                     l124:
 13222                           
 13223                           ; BSR set to: 0
 13224                           ;ENC424J600.c: 225: data[i] = addr.address[i];
 13225                           
 13226                           ; BSR set to: 0
 13227  003832  5186               	movf	ethernetController_writeDestinationMACAddress@i& (0+255),w,b
 13228  003834  0D01               	mullw	1
 13229  003836  0E6F               	movlw	low ethernetController_writeDestinationMACAddress@addr
 13230  003838  24F3               	addwf	prodl,w,c
 13231  00383A  6ED9               	movwf	fsr2l,c
 13232  00383C  0E00               	movlw	high ethernetController_writeDestinationMACAddress@addr
 13233  00383E  20F4               	addwfc	prodh,w,c
 13234  003840  6EDA               	movwf	fsr2h,c
 13235  003842  5186               	movf	ethernetController_writeDestinationMACAddress@i& (0+255),w,b
 13236  003844  0D01               	mullw	1
 13237  003846  0E7E               	movlw	low ethernetController_writeDestinationMACAddress@data
 13238  003848  24F3               	addwf	prodl,w,c
 13239  00384A  6EE1               	movwf	fsr1l,c
 13240  00384C  0E00               	movlw	high ethernetController_writeDestinationMACAddress@data
 13241  00384E  20F4               	addwfc	prodh,w,c
 13242  003850  6EE2               	movwf	fsr1h,c
 13243  003852  CFDF FFE7          	movff	indf2,indf1
 13244                           
 13245                           ; BSR set to: 0
 13246  003856  2B86               	incf	ethernetController_writeDestinationMACAddress@i& (0+255),f,b
 13247  003858  D7E8               	goto	l6952
 13248  00385A                     u7970:
 13249                           
 13250                           ; BSR set to: 0
 13251                           ;ENC424J600.c: 226: uint8_t opcode = 0x2A;
 13252                           
 13253                           ; BSR set to: 0
 13254  00385A  0E2A               	movlw	42
 13255  00385C  6F84               	movwf	ethernetController_writeDestinationMACAddress@opcode& (0+255),b
 13256                           
 13257                           ; BSR set to: 0
 13258                           ;ENC424J600.c: 227: PORTBbits.RB4=0;
 13259  00385E  9881               	bcf	3969,4,c	;volatile
 13260                           
 13261                           ; BSR set to: 0
 13262                           ;ENC424J600.c: 228: ENC424J600_writeSPI(&opcode);
 13263  003860  0E84               	movlw	low ethernetController_writeDestinationMACAddress@opcode
 13264  003862  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 13265  003864  0E00               	movlw	high ethernetController_writeDestinationMACAddress@opcode
 13266  003866  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 13267  003868  ECB5  F01E         	call	_ENC424J600_writeSPI	;wreg free
 13268                           
 13269                           ;ENC424J600.c: 229: for (uint8_t i = 0; i < 6; i++)
 13270  00386C  0E00               	movlw	0
 13271  00386E  0100               	movlb	0	; () banked
 13272  003870  6F85               	movwf	ethernetController_writeDestinationMACAddress@i_624& (0+255),b
 13273  003872                     l6970:
 13274                           
 13275                           ; BSR set to: 0
 13276  003872  0E05               	movlw	5
 13277  003874  6585               	cpfsgt	ethernetController_writeDestinationMACAddress@i_624& (0+255),b
 13278  003876  D001               	goto	l126
 13279  003878  D00D               	goto	u7990
 13280  00387A                     l126:
 13281                           
 13282                           ; BSR set to: 0
 13283                           ;ENC424J600.c: 230: ENC424J600_writeSPI(&data[i]);
 13284                           
 13285                           ; BSR set to: 0
 13286  00387A  5185               	movf	ethernetController_writeDestinationMACAddress@i_624& (0+255),w,b
 13287  00387C  0D01               	mullw	1
 13288  00387E  0E7E               	movlw	low ethernetController_writeDestinationMACAddress@data
 13289  003880  24F3               	addwf	prodl,w,c
 13290  003882  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 13291  003884  0E00               	movlw	high ethernetController_writeDestinationMACAddress@data
 13292  003886  20F4               	addwfc	prodh,w,c
 13293  003888  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 13294  00388A  ECB5  F01E         	call	_ENC424J600_writeSPI	;wreg free
 13295  00388E  0100               	movlb	0	; () banked
 13296  003890  2B85               	incf	ethernetController_writeDestinationMACAddress@i_624& (0+255),f,b
 13297  003892  D7EF               	goto	l6970
 13298  003894                     u7990:
 13299                           
 13300                           ; BSR set to: 0
 13301                           ;ENC424J600.c: 231: PORTBbits.RB4=1;
 13302  003894  8881               	bsf	3969,4,c	;volatile
 13303                           
 13304                           ; BSR set to: 0
 13305  003896  0012               	return		;funcret
 13306  003898                     __end_of_ethernetController_writeDestinationMACAddress:
 13307                           	opt stack 0
 13308                           tblptru	equ	0xFF8
 13309                           tblptrh	equ	0xFF7
 13310                           tblptrl	equ	0xFF6
 13311                           tablat	equ	0xFF5
 13312                           prodh	equ	0xFF4
 13313                           prodl	equ	0xFF3
 13314                           intcon	equ	0xFF2
 13315                           intcon3	equ	0xFF0
 13316                           postinc0	equ	0xFEE
 13317                           plusw0	equ	0xFEB
 13318                           fsr0h	equ	0xFEA
 13319                           fsr0l	equ	0xFE9
 13320                           wreg	equ	0xFE8
 13321                           indf1	equ	0xFE7
 13322                           postinc1	equ	0xFE6
 13323                           postdec1	equ	0xFE5
 13324                           plusw1	equ	0xFE3
 13325                           fsr1h	equ	0xFE2
 13326                           fsr1l	equ	0xFE1
 13327                           indf2	equ	0xFDF
 13328                           postinc2	equ	0xFDE
 13329                           postdec2	equ	0xFDD
 13330                           plusw2	equ	0xFDB
 13331                           fsr2h	equ	0xFDA
 13332                           fsr2l	equ	0xFD9
 13333                           status	equ	0xFD8
 13334                           
 13335 ;; *************** function _ENC424J600_setGPDATAWritePointer *****************
 13336 ;; Defined at:
 13337 ;;		line 515 in file "src/enc424j600/ENC424J600.c"
 13338 ;; Parameters:    Size  Location     Type
 13339 ;;  addr            2   10[BANK0 ] unsigned int 
 13340 ;; Auto vars:     Size  Location     Type
 13341 ;;  highByte        1   14[BANK0 ] unsigned char 
 13342 ;;  lowByte         1   13[BANK0 ] unsigned char 
 13343 ;;  opcode          1   12[BANK0 ] unsigned char 
 13344 ;; Return value:  Size  Location     Type
 13345 ;;                  1    wreg      void 
 13346 ;; Registers used:
 13347 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13348 ;; Tracked objects:
 13349 ;;		On entry : 0/0
 13350 ;;		On exit  : 0/0
 13351 ;;		Unchanged: 0/0
 13352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13353 ;;      Params:         0       2       0       0       0       0       0       0       0
 13354 ;;      Locals:         0       3       0       0       0       0       0       0       0
 13355 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13356 ;;      Totals:         0       5       0       0       0       0       0       0       0
 13357 ;;Total ram usage:        5 bytes
 13358 ;; Hardware stack levels used:    1
 13359 ;; Hardware stack levels required when called:    6
 13360 ;; This function calls:
 13361 ;;		_ENC424J600_writeSPI
 13362 ;; This function is called by:
 13363 ;;		_ethernetController_writeDestinationMACAddress
 13364 ;;		_ethernetController_writeEtherTypeFieldToBuffer
 13365 ;; This function uses a non-reentrant model
 13366 ;;
 13367                           
 13368                           	psect	text44
 13369  0041B0                     __ptext44:
 13370                           	opt stack 0
 13371  0041B0                     _ENC424J600_setGPDATAWritePointer:
 13372                           	opt stack 21
 13373                           
 13374                           ;ENC424J600.c: 516: uint8_t opcode = 0x6C;
 13375                           
 13376                           ; BSR set to: 0
 13377                           ;incstack = 0
 13378  0041B0  0E6C               	movlw	108
 13379  0041B2  0100               	movlb	0	; () banked
 13380  0041B4  6F6C               	movwf	ENC424J600_setGPDATAWritePointer@opcode& (0+255),b
 13381                           
 13382                           ; BSR set to: 0
 13383                           ;ENC424J600.c: 517: uint8_t lowByte = addr & 0x00ff;
 13384  0041B6  C06A  F06D         	movff	ENC424J600_setGPDATAWritePointer@addr,ENC424J600_setGPDATAWritePointer@lowByte
 13385                           
 13386                           ;ENC424J600.c: 518: uint8_t highByte = (addr & 0xff00) >> 8;
 13387  0041BA  516B               	movf	(ENC424J600_setGPDATAWritePointer@addr+1)& (0+255),w,b
 13388  0041BC  6F6E               	movwf	ENC424J600_setGPDATAWritePointer@highByte& (0+255),b
 13389                           
 13390                           ; BSR set to: 0
 13391                           ;ENC424J600.c: 519: PORTBbits.RB4=0;
 13392  0041BE  9881               	bcf	3969,4,c	;volatile
 13393                           
 13394                           ; BSR set to: 0
 13395                           ;ENC424J600.c: 520: ENC424J600_writeSPI(&opcode);
 13396  0041C0  0E6C               	movlw	low ENC424J600_setGPDATAWritePointer@opcode
 13397  0041C2  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 13398  0041C4  0E00               	movlw	high ENC424J600_setGPDATAWritePointer@opcode
 13399  0041C6  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 13400  0041C8  ECB5  F01E         	call	_ENC424J600_writeSPI	;wreg free
 13401                           
 13402                           ;ENC424J600.c: 521: ENC424J600_writeSPI(&lowByte);
 13403  0041CC  0E6D               	movlw	low ENC424J600_setGPDATAWritePointer@lowByte
 13404  0041CE  0100               	movlb	0	; () banked
 13405  0041D0  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 13406  0041D2  0E00               	movlw	high ENC424J600_setGPDATAWritePointer@lowByte
 13407  0041D4  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 13408  0041D6  ECB5  F01E         	call	_ENC424J600_writeSPI	;wreg free
 13409                           
 13410                           ;ENC424J600.c: 522: ENC424J600_writeSPI(&highByte);
 13411  0041DA  0E6E               	movlw	low ENC424J600_setGPDATAWritePointer@highByte
 13412  0041DC  0100               	movlb	0	; () banked
 13413  0041DE  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 13414  0041E0  0E00               	movlw	high ENC424J600_setGPDATAWritePointer@highByte
 13415  0041E2  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 13416  0041E4  ECB5  F01E         	call	_ENC424J600_writeSPI	;wreg free
 13417                           
 13418                           ;ENC424J600.c: 523: PORTBbits.RB4=1;
 13419  0041E8  8881               	bsf	3969,4,c	;volatile
 13420  0041EA  0012               	return		;funcret
 13421  0041EC                     __end_of_ENC424J600_setGPDATAWritePointer:
 13422                           	opt stack 0
 13423                           tblptru	equ	0xFF8
 13424                           tblptrh	equ	0xFF7
 13425                           tblptrl	equ	0xFF6
 13426                           tablat	equ	0xFF5
 13427                           prodh	equ	0xFF4
 13428                           prodl	equ	0xFF3
 13429                           intcon	equ	0xFF2
 13430                           intcon3	equ	0xFF0
 13431                           postinc0	equ	0xFEE
 13432                           plusw0	equ	0xFEB
 13433                           fsr0h	equ	0xFEA
 13434                           fsr0l	equ	0xFE9
 13435                           wreg	equ	0xFE8
 13436                           indf1	equ	0xFE7
 13437                           postinc1	equ	0xFE6
 13438                           postdec1	equ	0xFE5
 13439                           plusw1	equ	0xFE3
 13440                           fsr1h	equ	0xFE2
 13441                           fsr1l	equ	0xFE1
 13442                           indf2	equ	0xFDF
 13443                           postinc2	equ	0xFDE
 13444                           postdec2	equ	0xFDD
 13445                           plusw2	equ	0xFDB
 13446                           fsr2h	equ	0xFDA
 13447                           fsr2l	equ	0xFD9
 13448                           status	equ	0xFD8
 13449                           
 13450 ;; *************** function _ethernetController_streamToTransmitBuffer *****************
 13451 ;; Defined at:
 13452 ;;		line 193 in file "src/enc424j600/ENC424J600.c"
 13453 ;; Parameters:    Size  Location     Type
 13454 ;;  data            1    wreg     unsigned char 
 13455 ;;  len             2   10[BANK0 ] unsigned int 
 13456 ;; Auto vars:     Size  Location     Type
 13457 ;;  data            1   16[BANK0 ] unsigned char 
 13458 ;;  opcode          1   17[BANK0 ] unsigned char 
 13459 ;; Return value:  Size  Location     Type
 13460 ;;                  1    wreg      void 
 13461 ;; Registers used:
 13462 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13463 ;; Tracked objects:
 13464 ;;		On entry : 0/0
 13465 ;;		On exit  : 0/0
 13466 ;;		Unchanged: 0/0
 13467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13468 ;;      Params:         0       2       0       0       0       0       0       0       0
 13469 ;;      Locals:         0       2       0       0       0       0       0       0       0
 13470 ;;      Temps:          0       4       0       0       0       0       0       0       0
 13471 ;;      Totals:         0       8       0       0       0       0       0       0       0
 13472 ;;Total ram usage:        8 bytes
 13473 ;; Hardware stack levels used:    1
 13474 ;; Hardware stack levels required when called:    6
 13475 ;; This function calls:
 13476 ;;		_ENC424J600_writeSPI
 13477 ;; This function is called by:
 13478 ;;		_ARP_send
 13479 ;;		_ipv4_streamToTransmissionBuffer
 13480 ;; This function uses a non-reentrant model
 13481 ;;
 13482                           
 13483                           	psect	text45
 13484  003C9C                     __ptext45:
 13485                           	opt stack 0
 13486  003C9C                     _ethernetController_streamToTransmitBuffer:
 13487                           	opt stack 23
 13488                           
 13489                           ;incstack = 0
 13490                           ;ethernetController_streamToTransmitBuffer@data stored from wreg
 13491  003C9C  0100               	movlb	0	; () banked
 13492  003C9E  6F70               	movwf	ethernetController_streamToTransmitBuffer@data& (0+255),b
 13493                           
 13494                           ;ENC424J600.c: 194: uint8_t opcode;
 13495                           ;ENC424J600.c: 195: uint16_t static pointer = 0;
 13496                           ;ENC424J600.c: 196: if (pointer == 0) {
 13497  003CA0  5043               	movf	ethernetController_streamToTransmitBuffer@pointer,w,c
 13498  003CA2  1044               	iorwf	ethernetController_streamToTransmitBuffer@pointer+1,w,c
 13499  003CA4  A4D8               	btfss	status,2,c
 13500  003CA6  D00A               	goto	l118
 13501                           
 13502                           ;ENC424J600.c: 206: opcode = 0x2A;
 13503  003CA8  0E2A               	movlw	42
 13504  003CAA  0100               	movlb	0	; () banked
 13505  003CAC  6F71               	movwf	ethernetController_streamToTransmitBuffer@opcode& (0+255),b
 13506                           
 13507                           ; BSR set to: 0
 13508                           ;ENC424J600.c: 207: PORTBbits.RB4=0;
 13509  003CAE  9881               	bcf	3969,4,c	;volatile
 13510                           
 13511                           ; BSR set to: 0
 13512                           ;ENC424J600.c: 208: ENC424J600_writeSPI(&opcode);
 13513  003CB0  0E71               	movlw	low ethernetController_streamToTransmitBuffer@opcode
 13514  003CB2  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 13515  003CB4  0E00               	movlw	high ethernetController_streamToTransmitBuffer@opcode
 13516  003CB6  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 13517  003CB8  ECB5  F01E         	call	_ENC424J600_writeSPI	;wreg free
 13518  003CBC                     l118:
 13519                           
 13520                           ;ENC424J600.c: 209: }
 13521                           ;ENC424J600.c: 211: ENC424J600_writeSPI(&data);
 13522  003CBC  0E70               	movlw	low ethernetController_streamToTransmitBuffer@data
 13523  003CBE  0100               	movlb	0	; () banked
 13524  003CC0  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 13525  003CC2  0E00               	movlw	high ethernetController_streamToTransmitBuffer@data
 13526  003CC4  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 13527  003CC6  ECB5  F01E         	call	_ENC424J600_writeSPI	;wreg free
 13528                           
 13529                           ;ENC424J600.c: 213: if (pointer == len - 1) {
 13530  003CCA  0EFF               	movlw	255
 13531  003CCC  0100               	movlb	0	; () banked
 13532  003CCE  6F6C               	movwf	??_ethernetController_streamToTransmitBuffer& (0+255),b
 13533  003CD0  0EFF               	movlw	255
 13534  003CD2  6F6D               	movwf	(??_ethernetController_streamToTransmitBuffer+1)& (0+255),b
 13535  003CD4  C06A  F06E         	movff	ethernetController_streamToTransmitBuffer@len,??_ethernetController_streamToTrans
      +                          mitBuffer+2
 13536  003CD8  C06B  F06F         	movff	ethernetController_streamToTransmitBuffer@len+1,??_ethernetController_streamToTra
      +                          nsmitBuffer+3
 13537  003CDC  516C               	movf	??_ethernetController_streamToTransmitBuffer& (0+255),w,b
 13538  003CDE  276E               	addwf	(??_ethernetController_streamToTransmitBuffer+2)& (0+255),f,b
 13539  003CE0  516D               	movf	(??_ethernetController_streamToTransmitBuffer+1)& (0+255),w,b
 13540  003CE2  236F               	addwfc	(??_ethernetController_streamToTransmitBuffer+3)& (0+255),f,b
 13541  003CE4  5043               	movf	ethernetController_streamToTransmitBuffer@pointer,w,c
 13542  003CE6  196E               	xorwf	(??_ethernetController_streamToTransmitBuffer+2)& (0+255),w,b
 13543  003CE8  E10A               	bnz	l7196
 13544  003CEA  5044               	movf	ethernetController_streamToTransmitBuffer@pointer+1,w,c
 13545  003CEC  196F               	xorwf	(??_ethernetController_streamToTransmitBuffer+3)& (0+255),w,b
 13546  003CEE  A4D8               	btfss	status,2,c
 13547  003CF0  D006               	goto	l119
 13548                           
 13549                           ; BSR set to: 0
 13550                           ;ENC424J600.c: 214: PORTBbits.RB4=1;
 13551  003CF2  8881               	bsf	3969,4,c	;volatile
 13552                           
 13553                           ; BSR set to: 0
 13554                           ;ENC424J600.c: 215: pointer = 0;
 13555  003CF4  0E00               	movlw	0
 13556  003CF6  6E44               	movwf	ethernetController_streamToTransmitBuffer@pointer+1,c
 13557  003CF8  0E00               	movlw	0
 13558  003CFA  6E43               	movwf	ethernetController_streamToTransmitBuffer@pointer,c
 13559                           
 13560                           ;ENC424J600.c: 216: } else {
 13561  003CFC  0012               	return	
 13562  003CFE                     l119:
 13563  003CFE                     l7196:
 13564                           
 13565                           ; BSR set to: 0
 13566                           ;ENC424J600.c: 217: pointer++;
 13567  003CFE  4A43               	infsnz	ethernetController_streamToTransmitBuffer@pointer,f,c
 13568  003D00  2A44               	incf	ethernetController_streamToTransmitBuffer@pointer+1,f,c
 13569  003D02  0012               	return	
 13570  003D04                     __end_of_ethernetController_streamToTransmitBuffer:
 13571                           	opt stack 0
 13572                           tblptru	equ	0xFF8
 13573                           tblptrh	equ	0xFF7
 13574                           tblptrl	equ	0xFF6
 13575                           tablat	equ	0xFF5
 13576                           prodh	equ	0xFF4
 13577                           prodl	equ	0xFF3
 13578                           intcon	equ	0xFF2
 13579                           intcon3	equ	0xFF0
 13580                           postinc0	equ	0xFEE
 13581                           plusw0	equ	0xFEB
 13582                           fsr0h	equ	0xFEA
 13583                           fsr0l	equ	0xFE9
 13584                           wreg	equ	0xFE8
 13585                           indf1	equ	0xFE7
 13586                           postinc1	equ	0xFE6
 13587                           postdec1	equ	0xFE5
 13588                           plusw1	equ	0xFE3
 13589                           fsr1h	equ	0xFE2
 13590                           fsr1l	equ	0xFE1
 13591                           indf2	equ	0xFDF
 13592                           postinc2	equ	0xFDE
 13593                           postdec2	equ	0xFDD
 13594                           plusw2	equ	0xFDB
 13595                           fsr2h	equ	0xFDA
 13596                           fsr2l	equ	0xFD9
 13597                           status	equ	0xFD8
 13598                           
 13599 ;; *************** function _ethernetController_sendPacket *****************
 13600 ;; Defined at:
 13601 ;;		line 186 in file "src/enc424j600/ENC424J600.c"
 13602 ;; Parameters:    Size  Location     Type
 13603 ;;  field           9   18[BANK0 ] struct memoryField
 13604 ;; Auto vars:     Size  Location     Type
 13605 ;;		None
 13606 ;; Return value:  Size  Location     Type
 13607 ;;                  1    wreg      void 
 13608 ;; Registers used:
 13609 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13610 ;; Tracked objects:
 13611 ;;		On entry : 0/0
 13612 ;;		On exit  : 0/0
 13613 ;;		Unchanged: 0/0
 13614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13615 ;;      Params:         0       9       0       0       0       0       0       0       0
 13616 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13617 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13618 ;;      Totals:         0       9       0       0       0       0       0       0       0
 13619 ;;Total ram usage:        9 bytes
 13620 ;; Hardware stack levels used:    1
 13621 ;; Hardware stack levels required when called:    8
 13622 ;; This function calls:
 13623 ;;		_ENC424J600_setTXLength
 13624 ;;		_ENC424J600_setTXStartAddress
 13625 ;;		_ENC424J600_writeSingleByte
 13626 ;;		_memory_txFrameClear
 13627 ;; This function is called by:
 13628 ;;		_ARP_send
 13629 ;;		_ipv4_sendFrame
 13630 ;; This function uses a non-reentrant model
 13631 ;;
 13632                           
 13633                           	psect	text46
 13634  004462                     __ptext46:
 13635                           	opt stack 0
 13636  004462                     _ethernetController_sendPacket:
 13637                           	opt stack 20
 13638                           
 13639                           ;ENC424J600.c: 187: ENC424J600_setTXStartAddress(field.start);
 13640                           
 13641                           ; BSR set to: 0
 13642                           ;incstack = 0
 13643  004462  C072  F06E         	movff	ethernetController_sendPacket@field,ENC424J600_setTXStartAddress@addr
 13644  004466  C073  F06F         	movff	ethernetController_sendPacket@field+1,ENC424J600_setTXStartAddress@addr+1
 13645  00446A  ECC9  F021         	call	_ENC424J600_setTXStartAddress	;wreg free
 13646                           
 13647                           ;ENC424J600.c: 188: ENC424J600_setTXLength(field.length);
 13648  00446E  C076  F06E         	movff	ethernetController_sendPacket@field+4,ENC424J600_setTXLength@len
 13649  004472  C077  F06F         	movff	ethernetController_sendPacket@field+5,ENC424J600_setTXLength@len+1
 13650  004476  ECDE  F021         	call	_ENC424J600_setTXLength	;wreg free
 13651                           
 13652                           ;ENC424J600.c: 189: ENC424J600_writeSingleByte(0b11010100);
 13653  00447A  0ED4               	movlw	212
 13654  00447C  EC29  F023         	call	_ENC424J600_writeSingleByte
 13655                           
 13656                           ;ENC424J600.c: 190: memory_txFrameClear(field.index);
 13657  004480  0100               	movlb	0	; () banked
 13658  004482  517A               	movf	(ethernetController_sendPacket@field+8)& (0+255),w,b
 13659  004484  EC92  F022         	call	_memory_txFrameClear
 13660  004488  0012               	return		;funcret
 13661  00448A                     __end_of_ethernetController_sendPacket:
 13662                           	opt stack 0
 13663                           tblptru	equ	0xFF8
 13664                           tblptrh	equ	0xFF7
 13665                           tblptrl	equ	0xFF6
 13666                           tablat	equ	0xFF5
 13667                           prodh	equ	0xFF4
 13668                           prodl	equ	0xFF3
 13669                           intcon	equ	0xFF2
 13670                           intcon3	equ	0xFF0
 13671                           postinc0	equ	0xFEE
 13672                           plusw0	equ	0xFEB
 13673                           fsr0h	equ	0xFEA
 13674                           fsr0l	equ	0xFE9
 13675                           wreg	equ	0xFE8
 13676                           indf1	equ	0xFE7
 13677                           postinc1	equ	0xFE6
 13678                           postdec1	equ	0xFE5
 13679                           plusw1	equ	0xFE3
 13680                           fsr1h	equ	0xFE2
 13681                           fsr1l	equ	0xFE1
 13682                           indf2	equ	0xFDF
 13683                           postinc2	equ	0xFDE
 13684                           postdec2	equ	0xFDD
 13685                           plusw2	equ	0xFDB
 13686                           fsr2h	equ	0xFDA
 13687                           fsr2l	equ	0xFD9
 13688                           status	equ	0xFD8
 13689                           
 13690 ;; *************** function _memory_txFrameClear *****************
 13691 ;; Defined at:
 13692 ;;		line 224 in file "src/mem/memoryController.c"
 13693 ;; Parameters:    Size  Location     Type
 13694 ;;  index           1    wreg     unsigned char 
 13695 ;; Auto vars:     Size  Location     Type
 13696 ;;  index           1    0[BANK0 ] unsigned char 
 13697 ;; Return value:  Size  Location     Type
 13698 ;;                  1    wreg      void 
 13699 ;; Registers used:
 13700 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13701 ;; Tracked objects:
 13702 ;;		On entry : 0/0
 13703 ;;		On exit  : 0/0
 13704 ;;		Unchanged: 0/0
 13705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13706 ;;      Params:         0       0       0       0       0       0       0       0       0
 13707 ;;      Locals:         0       1       0       0       0       0       0       0       0
 13708 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13709 ;;      Totals:         0       1       0       0       0       0       0       0       0
 13710 ;;Total ram usage:        1 bytes
 13711 ;; Hardware stack levels used:    1
 13712 ;; Hardware stack levels required when called:    4
 13713 ;; This function calls:
 13714 ;;		Nothing
 13715 ;; This function is called by:
 13716 ;;		_ethernetController_sendPacket
 13717 ;; This function uses a non-reentrant model
 13718 ;;
 13719                           
 13720                           	psect	text47
 13721  004524                     __ptext47:
 13722                           	opt stack 0
 13723  004524                     _memory_txFrameClear:
 13724                           	opt stack 23
 13725                           
 13726                           ;incstack = 0
 13727                           ;memory_txFrameClear@index stored from wreg
 13728  004524  0100               	movlb	0	; () banked
 13729  004526  6F60               	movwf	memory_txFrameClear@index& (0+255),b
 13730                           
 13731                           ;memoryController.c: 225: occupiedMemory[index].fIsAssigned = 0;
 13732  004528  0100               	movlb	0	; () banked
 13733  00452A  5160               	movf	memory_txFrameClear@index& (0+255),w,b
 13734  00452C  0D09               	mullw	9
 13735  00452E  0E06               	movlw	6
 13736  004530  26F3               	addwf	prodl,f,c
 13737  004532  0E00               	movlw	0
 13738  004534  22F4               	addwfc	prodh,f,c
 13739  004536  0E00               	movlw	low _occupiedMemory
 13740  004538  24F3               	addwf	prodl,w,c
 13741  00453A  6ED9               	movwf	fsr2l,c
 13742  00453C  0E02               	movlw	high _occupiedMemory
 13743  00453E  20F4               	addwfc	prodh,w,c
 13744  004540  6EDA               	movwf	fsr2h,c
 13745  004542  0E00               	movlw	0
 13746  004544  6EDF               	movwf	indf2,c
 13747                           
 13748                           ; BSR set to: 0
 13749  004546  0012               	return		;funcret
 13750  004548                     __end_of_memory_txFrameClear:
 13751                           	opt stack 0
 13752                           tblptru	equ	0xFF8
 13753                           tblptrh	equ	0xFF7
 13754                           tblptrl	equ	0xFF6
 13755                           tablat	equ	0xFF5
 13756                           prodh	equ	0xFF4
 13757                           prodl	equ	0xFF3
 13758                           intcon	equ	0xFF2
 13759                           intcon3	equ	0xFF0
 13760                           postinc0	equ	0xFEE
 13761                           plusw0	equ	0xFEB
 13762                           fsr0h	equ	0xFEA
 13763                           fsr0l	equ	0xFE9
 13764                           wreg	equ	0xFE8
 13765                           indf1	equ	0xFE7
 13766                           postinc1	equ	0xFE6
 13767                           postdec1	equ	0xFE5
 13768                           plusw1	equ	0xFE3
 13769                           fsr1h	equ	0xFE2
 13770                           fsr1l	equ	0xFE1
 13771                           indf2	equ	0xFDF
 13772                           postinc2	equ	0xFDE
 13773                           postdec2	equ	0xFDD
 13774                           plusw2	equ	0xFDB
 13775                           fsr2h	equ	0xFDA
 13776                           fsr2l	equ	0xFD9
 13777                           status	equ	0xFD8
 13778                           
 13779 ;; *************** function _ENC424J600_setTXStartAddress *****************
 13780 ;; Defined at:
 13781 ;;		line 508 in file "src/enc424j600/ENC424J600.c"
 13782 ;; Parameters:    Size  Location     Type
 13783 ;;  addr            2   14[BANK0 ] unsigned int 
 13784 ;; Auto vars:     Size  Location     Type
 13785 ;;  highByte        1   17[BANK0 ] unsigned char 
 13786 ;;  lowByte         1   16[BANK0 ] unsigned char 
 13787 ;; Return value:  Size  Location     Type
 13788 ;;                  1    wreg      void 
 13789 ;; Registers used:
 13790 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13791 ;; Tracked objects:
 13792 ;;		On entry : 0/0
 13793 ;;		On exit  : 0/0
 13794 ;;		Unchanged: 0/0
 13795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13796 ;;      Params:         0       2       0       0       0       0       0       0       0
 13797 ;;      Locals:         0       2       0       0       0       0       0       0       0
 13798 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13799 ;;      Totals:         0       4       0       0       0       0       0       0       0
 13800 ;;Total ram usage:        4 bytes
 13801 ;; Hardware stack levels used:    1
 13802 ;; Hardware stack levels required when called:    7
 13803 ;; This function calls:
 13804 ;;		_ENC424J600_writeControlRegisterUnbanked
 13805 ;; This function is called by:
 13806 ;;		_ethernetController_sendPacket
 13807 ;; This function uses a non-reentrant model
 13808 ;;
 13809                           
 13810                           	psect	text48
 13811  004392                     __ptext48:
 13812                           	opt stack 0
 13813  004392                     _ENC424J600_setTXStartAddress:
 13814                           	opt stack 20
 13815                           
 13816                           ;ENC424J600.c: 509: uint8_t lowByte = addr & 0xff;
 13817                           
 13818                           ; BSR set to: 0
 13819                           ;incstack = 0
 13820  004392  C06E  F070         	movff	ENC424J600_setTXStartAddress@addr,ENC424J600_setTXStartAddress@lowByte
 13821                           
 13822                           ;ENC424J600.c: 510: uint8_t highByte = (addr & 0xff00) >> 8;
 13823  004396  0100               	movlb	0	; () banked
 13824  004398  516F               	movf	(ENC424J600_setTXStartAddress@addr+1)& (0+255),w,b
 13825  00439A  6F71               	movwf	ENC424J600_setTXStartAddress@highByte& (0+255),b
 13826                           
 13827                           ; BSR set to: 0
 13828                           ;ENC424J600.c: 511: ENC424J600_writeControlRegisterUnbanked(0x00 + 0x00, &lowByte);
 13829  00439C  0E70               	movlw	low ENC424J600_setTXStartAddress@lowByte
 13830  00439E  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 13831  0043A0  0E00               	movlw	high ENC424J600_setTXStartAddress@lowByte
 13832  0043A2  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 13833  0043A4  0E00               	movlw	0
 13834  0043A6  EC4C  F021         	call	_ENC424J600_writeControlRegisterUnbanked
 13835                           
 13836                           ;ENC424J600.c: 512: ENC424J600_writeControlRegisterUnbanked(0x01 + 0x00, &highByte);
 13837  0043AA  0E71               	movlw	low ENC424J600_setTXStartAddress@highByte
 13838  0043AC  0100               	movlb	0	; () banked
 13839  0043AE  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 13840  0043B0  0E00               	movlw	high ENC424J600_setTXStartAddress@highByte
 13841  0043B2  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 13842  0043B4  0E01               	movlw	1
 13843  0043B6  EC4C  F021         	call	_ENC424J600_writeControlRegisterUnbanked
 13844  0043BA  0012               	return		;funcret
 13845  0043BC                     __end_of_ENC424J600_setTXStartAddress:
 13846                           	opt stack 0
 13847                           tblptru	equ	0xFF8
 13848                           tblptrh	equ	0xFF7
 13849                           tblptrl	equ	0xFF6
 13850                           tablat	equ	0xFF5
 13851                           prodh	equ	0xFF4
 13852                           prodl	equ	0xFF3
 13853                           intcon	equ	0xFF2
 13854                           intcon3	equ	0xFF0
 13855                           postinc0	equ	0xFEE
 13856                           plusw0	equ	0xFEB
 13857                           fsr0h	equ	0xFEA
 13858                           fsr0l	equ	0xFE9
 13859                           wreg	equ	0xFE8
 13860                           indf1	equ	0xFE7
 13861                           postinc1	equ	0xFE6
 13862                           postdec1	equ	0xFE5
 13863                           plusw1	equ	0xFE3
 13864                           fsr1h	equ	0xFE2
 13865                           fsr1l	equ	0xFE1
 13866                           indf2	equ	0xFDF
 13867                           postinc2	equ	0xFDE
 13868                           postdec2	equ	0xFDD
 13869                           plusw2	equ	0xFDB
 13870                           fsr2h	equ	0xFDA
 13871                           fsr2l	equ	0xFD9
 13872                           status	equ	0xFD8
 13873                           
 13874 ;; *************** function _ENC424J600_setTXLength *****************
 13875 ;; Defined at:
 13876 ;;		line 501 in file "src/enc424j600/ENC424J600.c"
 13877 ;; Parameters:    Size  Location     Type
 13878 ;;  len             2   14[BANK0 ] unsigned int 
 13879 ;; Auto vars:     Size  Location     Type
 13880 ;;  highByte        1   17[BANK0 ] unsigned char 
 13881 ;;  lowByte         1   16[BANK0 ] unsigned char 
 13882 ;; Return value:  Size  Location     Type
 13883 ;;                  1    wreg      void 
 13884 ;; Registers used:
 13885 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13886 ;; Tracked objects:
 13887 ;;		On entry : 0/0
 13888 ;;		On exit  : 0/0
 13889 ;;		Unchanged: 0/0
 13890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13891 ;;      Params:         0       2       0       0       0       0       0       0       0
 13892 ;;      Locals:         0       2       0       0       0       0       0       0       0
 13893 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13894 ;;      Totals:         0       4       0       0       0       0       0       0       0
 13895 ;;Total ram usage:        4 bytes
 13896 ;; Hardware stack levels used:    1
 13897 ;; Hardware stack levels required when called:    7
 13898 ;; This function calls:
 13899 ;;		_ENC424J600_writeControlRegisterUnbanked
 13900 ;; This function is called by:
 13901 ;;		_ethernetController_sendPacket
 13902 ;; This function uses a non-reentrant model
 13903 ;;
 13904                           
 13905                           	psect	text49
 13906  0043BC                     __ptext49:
 13907                           	opt stack 0
 13908  0043BC                     _ENC424J600_setTXLength:
 13909                           	opt stack 20
 13910                           
 13911                           ;ENC424J600.c: 502: uint8_t lowByte = len & 0x00ff;
 13912                           
 13913                           ;incstack = 0
 13914  0043BC  C06E  F070         	movff	ENC424J600_setTXLength@len,ENC424J600_setTXLength@lowByte
 13915                           
 13916                           ;ENC424J600.c: 503: uint8_t highByte = len >> 8;
 13917  0043C0  0100               	movlb	0	; () banked
 13918  0043C2  516F               	movf	(ENC424J600_setTXLength@len+1)& (0+255),w,b
 13919  0043C4  6F71               	movwf	ENC424J600_setTXLength@highByte& (0+255),b
 13920                           
 13921                           ; BSR set to: 0
 13922                           ;ENC424J600.c: 504: ENC424J600_writeControlRegisterUnbanked(0x02 + 0x00, &lowByte);
 13923  0043C6  0E70               	movlw	low ENC424J600_setTXLength@lowByte
 13924  0043C8  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 13925  0043CA  0E00               	movlw	high ENC424J600_setTXLength@lowByte
 13926  0043CC  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 13927  0043CE  0E02               	movlw	2
 13928  0043D0  EC4C  F021         	call	_ENC424J600_writeControlRegisterUnbanked
 13929                           
 13930                           ;ENC424J600.c: 505: ENC424J600_writeControlRegisterUnbanked(0x03 + 0x00, &highByte);
 13931  0043D4  0E71               	movlw	low ENC424J600_setTXLength@highByte
 13932  0043D6  0100               	movlb	0	; () banked
 13933  0043D8  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 13934  0043DA  0E00               	movlw	high ENC424J600_setTXLength@highByte
 13935  0043DC  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 13936  0043DE  0E03               	movlw	3
 13937  0043E0  EC4C  F021         	call	_ENC424J600_writeControlRegisterUnbanked
 13938  0043E4  0012               	return		;funcret
 13939  0043E6                     __end_of_ENC424J600_setTXLength:
 13940                           	opt stack 0
 13941                           tblptru	equ	0xFF8
 13942                           tblptrh	equ	0xFF7
 13943                           tblptrl	equ	0xFF6
 13944                           tablat	equ	0xFF5
 13945                           prodh	equ	0xFF4
 13946                           prodl	equ	0xFF3
 13947                           intcon	equ	0xFF2
 13948                           intcon3	equ	0xFF0
 13949                           postinc0	equ	0xFEE
 13950                           plusw0	equ	0xFEB
 13951                           fsr0h	equ	0xFEA
 13952                           fsr0l	equ	0xFE9
 13953                           wreg	equ	0xFE8
 13954                           indf1	equ	0xFE7
 13955                           postinc1	equ	0xFE6
 13956                           postdec1	equ	0xFE5
 13957                           plusw1	equ	0xFE3
 13958                           fsr1h	equ	0xFE2
 13959                           fsr1l	equ	0xFE1
 13960                           indf2	equ	0xFDF
 13961                           postinc2	equ	0xFDE
 13962                           postdec2	equ	0xFDD
 13963                           plusw2	equ	0xFDB
 13964                           fsr2h	equ	0xFDA
 13965                           fsr2l	equ	0xFD9
 13966                           status	equ	0xFD8
 13967                           
 13968 ;; *************** function _ethernetController_getSourceMACAddress *****************
 13969 ;; Defined at:
 13970 ;;		line 261 in file "src/enc424j600/ENC424J600.c"
 13971 ;; Parameters:    Size  Location     Type
 13972 ;;  field           9   15[BANK0 ] struct memoryField
 13973 ;; Auto vars:     Size  Location     Type
 13974 ;;  temp            1   31[BANK0 ] unsigned char 
 13975 ;;  i               1   32[BANK0 ] unsigned char 
 13976 ;;  sourceAddres    6   25[BANK0 ] struct macaddress
 13977 ;;  opcode          1   24[BANK0 ] unsigned char 
 13978 ;; Return value:  Size  Location     Type
 13979 ;;                  6   15[BANK0 ] struct macaddress
 13980 ;; Registers used:
 13981 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13982 ;; Tracked objects:
 13983 ;;		On entry : 0/0
 13984 ;;		On exit  : 0/0
 13985 ;;		Unchanged: 0/0
 13986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13987 ;;      Params:         0       9       0       0       0       0       0       0       0
 13988 ;;      Locals:         0       9       0       0       0       0       0       0       0
 13989 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13990 ;;      Totals:         0      18       0       0       0       0       0       0       0
 13991 ;;Total ram usage:       18 bytes
 13992 ;; Hardware stack levels used:    1
 13993 ;; Hardware stack levels required when called:    7
 13994 ;; This function calls:
 13995 ;;		_ENC424J600_readSPI
 13996 ;;		_ENC424J600_setERXDATAReadPointer
 13997 ;;		_ENC424J600_writeSPI
 13998 ;; This function is called by:
 13999 ;;		_ARP_send
 14000 ;; This function uses a non-reentrant model
 14001 ;;
 14002                           
 14003                           	psect	text50
 14004  003B5A                     __ptext50:
 14005                           	opt stack 0
 14006  003B5A                     _ethernetController_getSourceMACAddress:
 14007                           	opt stack 19
 14008                           
 14009                           ;ENC424J600.c: 262: macaddress_t sourceAddress;
 14010                           ;ENC424J600.c: 263: ENC424J600_setERXDATAReadPointer(field.start + 14);
 14011                           
 14012                           ;incstack = 0
 14013  003B5A  0E0E               	movlw	14
 14014  003B5C  0100               	movlb	0	; () banked
 14015  003B5E  256F               	addwf	ethernetController_getSourceMACAddress@field& (0+255),w,b
 14016  003B60  6F6A               	movwf	ENC424J600_setERXDATAReadPointer@addr& (0+255),b
 14017  003B62  0E00               	movlw	0
 14018  003B64  2170               	addwfc	(ethernetController_getSourceMACAddress@field+1)& (0+255),w,b
 14019  003B66  6F6B               	movwf	(ENC424J600_setERXDATAReadPointer@addr+1)& (0+255),b
 14020  003B68  ECF6  F020         	call	_ENC424J600_setERXDATAReadPointer	;wreg free
 14021                           
 14022                           ;ENC424J600.c: 264: uint8_t opcode = 0x2C;
 14023  003B6C  0E2C               	movlw	44
 14024  003B6E  0100               	movlb	0	; () banked
 14025  003B70  6F78               	movwf	ethernetController_getSourceMACAddress@opcode& (0+255),b
 14026                           
 14027                           ; BSR set to: 0
 14028                           ;ENC424J600.c: 265: PORTBbits.RB4=0;
 14029  003B72  9881               	bcf	3969,4,c	;volatile
 14030                           
 14031                           ; BSR set to: 0
 14032                           ;ENC424J600.c: 266: ENC424J600_writeSPI(&opcode);
 14033  003B74  0E78               	movlw	low ethernetController_getSourceMACAddress@opcode
 14034  003B76  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 14035  003B78  0E00               	movlw	high ethernetController_getSourceMACAddress@opcode
 14036  003B7A  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 14037  003B7C  ECB5  F01E         	call	_ENC424J600_writeSPI	;wreg free
 14038                           
 14039                           ;ENC424J600.c: 267: for (uint8_t i = 0; i < 6; i++) {
 14040  003B80  0E00               	movlw	0
 14041  003B82  0100               	movlb	0	; () banked
 14042  003B84  6F80               	movwf	ethernetController_getSourceMACAddress@i& (0+255),b
 14043  003B86                     l7206:
 14044                           
 14045                           ; BSR set to: 0
 14046  003B86  0E05               	movlw	5
 14047  003B88  6580               	cpfsgt	ethernetController_getSourceMACAddress@i& (0+255),b
 14048  003B8A  D001               	goto	l139
 14049  003B8C  D013               	goto	u8400
 14050  003B8E                     l139:
 14051                           
 14052                           ; BSR set to: 0
 14053                           ;ENC424J600.c: 268: uint8_t temp;
 14054                           ;ENC424J600.c: 269: ENC424J600_readSPI(&temp);
 14055                           
 14056                           ; BSR set to: 0
 14057  003B8E  0E7F               	movlw	low ethernetController_getSourceMACAddress@temp
 14058  003B90  6F60               	movwf	ENC424J600_readSPI@data& (0+255),b
 14059  003B92  0E00               	movlw	high ethernetController_getSourceMACAddress@temp
 14060  003B94  6F61               	movwf	(ENC424J600_readSPI@data+1)& (0+255),b
 14061  003B96  ECE5  F01D         	call	_ENC424J600_readSPI	;wreg free
 14062                           
 14063                           ;ENC424J600.c: 270: sourceAddress.address[i] = temp;
 14064  003B9A  0100               	movlb	0	; () banked
 14065  003B9C  5180               	movf	ethernetController_getSourceMACAddress@i& (0+255),w,b
 14066  003B9E  0D01               	mullw	1
 14067  003BA0  0E79               	movlw	low ethernetController_getSourceMACAddress@sourceAddress
 14068  003BA2  24F3               	addwf	prodl,w,c
 14069  003BA4  6ED9               	movwf	fsr2l,c
 14070  003BA6  0E00               	movlw	high ethernetController_getSourceMACAddress@sourceAddress
 14071  003BA8  20F4               	addwfc	prodh,w,c
 14072  003BAA  6EDA               	movwf	fsr2h,c
 14073  003BAC  C07F  FFDF         	movff	ethernetController_getSourceMACAddress@temp,indf2
 14074                           
 14075                           ; BSR set to: 0
 14076  003BB0  2B80               	incf	ethernetController_getSourceMACAddress@i& (0+255),f,b
 14077  003BB2  D7E9               	goto	l7206
 14078  003BB4                     u8400:
 14079                           
 14080                           ; BSR set to: 0
 14081                           ;ENC424J600.c: 271: }
 14082                           ;ENC424J600.c: 272: PORTBbits.RB4=1;
 14083  003BB4  8881               	bsf	3969,4,c	;volatile
 14084                           
 14085                           ; BSR set to: 0
 14086                           ;ENC424J600.c: 273: return sourceAddress;
 14087  003BB6  EE20  F079         	lfsr	2,ethernetController_getSourceMACAddress@sourceAddress
 14088  003BBA  EE00  F06F         	lfsr	0,?_ethernetController_getSourceMACAddress
 14089  003BBE  0E05               	movlw	5
 14090  003BC0                     u8411:
 14091  003BC0  CFDB FFEB          	movff	plusw2,plusw0
 14092  003BC4  06E8               	decf	wreg,f,c
 14093  003BC6  E2FC               	bc	u8411
 14094  003BC8  0012               	return	
 14095  003BCA                     __end_of_ethernetController_getSourceMACAddress:
 14096                           	opt stack 0
 14097                           tblptru	equ	0xFF8
 14098                           tblptrh	equ	0xFF7
 14099                           tblptrl	equ	0xFF6
 14100                           tablat	equ	0xFF5
 14101                           prodh	equ	0xFF4
 14102                           prodl	equ	0xFF3
 14103                           intcon	equ	0xFF2
 14104                           intcon3	equ	0xFF0
 14105                           postinc0	equ	0xFEE
 14106                           plusw0	equ	0xFEB
 14107                           fsr0h	equ	0xFEA
 14108                           fsr0l	equ	0xFE9
 14109                           wreg	equ	0xFE8
 14110                           indf1	equ	0xFE7
 14111                           postinc1	equ	0xFE6
 14112                           postdec1	equ	0xFE5
 14113                           plusw1	equ	0xFE3
 14114                           fsr1h	equ	0xFE2
 14115                           fsr1l	equ	0xFE1
 14116                           indf2	equ	0xFDF
 14117                           postinc2	equ	0xFDE
 14118                           postdec2	equ	0xFDD
 14119                           plusw2	equ	0xFDB
 14120                           fsr2h	equ	0xFDA
 14121                           fsr2l	equ	0xFD9
 14122                           status	equ	0xFD8
 14123                           
 14124 ;; *************** function _ARP_parseFromRXBuffer *****************
 14125 ;; Defined at:
 14126 ;;		line 58 in file "src/stack/protocols/arp.c"
 14127 ;; Parameters:    Size  Location     Type
 14128 ;;  frame           2   23[BANK0 ] PTR struct ethernetFrame
 14129 ;;		 -> stack.ethernet(15), stack(113), 
 14130 ;; Auto vars:     Size  Location     Type
 14131 ;;  i               1   61[BANK0 ] unsigned char 
 14132 ;;  i               1   60[BANK0 ] unsigned char 
 14133 ;;  i               1   59[BANK0 ] unsigned char 
 14134 ;;  i               1   58[BANK0 ] unsigned char 
 14135 ;;  arp            32   64[BANK0 ] struct ARP_message
 14136 ;;  offset          2   62[BANK0 ] const unsigned int 
 14137 ;; Return value:  Size  Location     Type
 14138 ;;                  32   23[BANK0 ] struct ARP_message
 14139 ;; Registers used:
 14140 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14141 ;; Tracked objects:
 14142 ;;		On entry : 0/0
 14143 ;;		On exit  : 0/0
 14144 ;;		Unchanged: 0/0
 14145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14146 ;;      Params:         0      32       0       0       0       0       0       0       0
 14147 ;;      Locals:         0      38       0       0       0       0       0       0       0
 14148 ;;      Temps:          0       3       0       0       0       0       0       0       0
 14149 ;;      Totals:         0      73       0       0       0       0       0       0       0
 14150 ;;Total ram usage:       73 bytes
 14151 ;; Hardware stack levels used:    1
 14152 ;; Hardware stack levels required when called:    9
 14153 ;; This function calls:
 14154 ;;		_ethernetController_streamFromRXBuffer
 14155 ;;		_ipv4_cmp
 14156 ;;		_ipv4_isAllZero
 14157 ;;		_mac_cmp
 14158 ;;		_mac_isAllZero
 14159 ;; This function is called by:
 14160 ;;		_ARP_handleNewPacket
 14161 ;; This function uses a non-reentrant model
 14162 ;;
 14163                           
 14164                           	psect	text51
 14165  000A54                     __ptext51:
 14166                           	opt stack 0
 14167  000A54                     _ARP_parseFromRXBuffer:
 14168                           	opt stack 18
 14169                           
 14170                           ;arp.c: 59: ARP_message_t arp;
 14171                           ;arp.c: 60: uint16_t const offset = 22;
 14172                           
 14173                           ; BSR set to: 0
 14174                           ;incstack = 0
 14175  000A54  0E00               	movlw	0
 14176  000A56  0100               	movlb	0	; () banked
 14177  000A58  6F9F               	movwf	(ARP_parseFromRXBuffer@offset+1)& (0+255),b
 14178  000A5A  0E16               	movlw	22
 14179  000A5C  6F9E               	movwf	ARP_parseFromRXBuffer@offset& (0+255),b
 14180                           
 14181                           ; BSR set to: 0
 14182                           ;arp.c: 62: ethernetController_streamFromRXBuffer(0, frame->memory.start + offset);
 14183  000A5E  EE20 F010          	lfsr	2,16
 14184  000A62  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 14185  000A64  26D9               	addwf	fsr2l,f,c
 14186  000A66  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 14187  000A68  22DA               	addwfc	fsr2h,f,c
 14188  000A6A  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 14189  000A6E  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 14190  000A72  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 14191  000A74  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 14192  000A76  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 14193  000A78  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 14194  000A7A  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 14195  000A7C  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 14196  000A7E  0E00               	movlw	0
 14197  000A80  EC16  F01A         	call	_ethernetController_streamFromRXBuffer
 14198                           
 14199                           ;arp.c: 65: arp.htype = (ethernetController_streamFromRXBuffer(1, frame->memory.start + 
      +                          offset) << 8);
 14200  000A84  0100               	movlb	0	; () banked
 14201  000A86  EE20 F010          	lfsr	2,16
 14202  000A8A  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 14203  000A8C  26D9               	addwf	fsr2l,f,c
 14204  000A8E  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 14205  000A90  22DA               	addwfc	fsr2h,f,c
 14206  000A92  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 14207  000A96  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 14208  000A9A  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 14209  000A9C  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 14210  000A9E  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 14211  000AA0  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 14212  000AA2  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 14213  000AA4  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 14214  000AA6  0E01               	movlw	1
 14215  000AA8  EC16  F01A         	call	_ethernetController_streamFromRXBuffer
 14216  000AAC  0100               	movlb	0	; () banked
 14217  000AAE  6FA1               	movwf	(ARP_parseFromRXBuffer@arp+1)& (0+255),b
 14218  000AB0  6BA0               	clrf	ARP_parseFromRXBuffer@arp& (0+255),b
 14219                           
 14220                           ; BSR set to: 0
 14221                           ;arp.c: 66: arp.htype |= ethernetController_streamFromRXBuffer(1, frame->memory.start + 
      +                          offset);
 14222  000AB2  EE20 F010          	lfsr	2,16
 14223  000AB6  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 14224  000AB8  26D9               	addwf	fsr2l,f,c
 14225  000ABA  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 14226  000ABC  22DA               	addwfc	fsr2h,f,c
 14227  000ABE  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 14228  000AC2  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 14229  000AC6  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 14230  000AC8  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 14231  000ACA  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 14232  000ACC  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 14233  000ACE  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 14234  000AD0  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 14235  000AD2  0E01               	movlw	1
 14236  000AD4  EC16  F01A         	call	_ethernetController_streamFromRXBuffer
 14237  000AD8  0100               	movlb	0	; () banked
 14238  000ADA  6F99               	movwf	(??_ARP_parseFromRXBuffer+2)& (0+255),b
 14239  000ADC  5199               	movf	(??_ARP_parseFromRXBuffer+2)& (0+255),w,b
 14240  000ADE  13A0               	iorwf	ARP_parseFromRXBuffer@arp& (0+255),f,b
 14241                           
 14242                           ; BSR set to: 0
 14243                           ;arp.c: 68: arp.ptype = (ethernetController_streamFromRXBuffer(1, frame->memory.start + 
      +                          offset) << 8);
 14244  000AE0  EE20 F010          	lfsr	2,16
 14245  000AE4  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 14246  000AE6  26D9               	addwf	fsr2l,f,c
 14247  000AE8  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 14248  000AEA  22DA               	addwfc	fsr2h,f,c
 14249  000AEC  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 14250  000AF0  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 14251  000AF4  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 14252  000AF6  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 14253  000AF8  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 14254  000AFA  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 14255  000AFC  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 14256  000AFE  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 14257  000B00  0E01               	movlw	1
 14258  000B02  EC16  F01A         	call	_ethernetController_streamFromRXBuffer
 14259  000B06  0100               	movlb	0	; () banked
 14260  000B08  6FA3               	movwf	(ARP_parseFromRXBuffer@arp+3)& (0+255),b
 14261  000B0A  6BA2               	clrf	(ARP_parseFromRXBuffer@arp+2)& (0+255),b
 14262                           
 14263                           ; BSR set to: 0
 14264                           ;arp.c: 69: arp.ptype |= ethernetController_streamFromRXBuffer(1, frame->memory.start + 
      +                          offset);
 14265  000B0C  EE20 F010          	lfsr	2,16
 14266  000B10  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 14267  000B12  26D9               	addwf	fsr2l,f,c
 14268  000B14  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 14269  000B16  22DA               	addwfc	fsr2h,f,c
 14270  000B18  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 14271  000B1C  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 14272  000B20  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 14273  000B22  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 14274  000B24  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 14275  000B26  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 14276  000B28  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 14277  000B2A  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 14278  000B2C  0E01               	movlw	1
 14279  000B2E  EC16  F01A         	call	_ethernetController_streamFromRXBuffer
 14280  000B32  0100               	movlb	0	; () banked
 14281  000B34  6F99               	movwf	(??_ARP_parseFromRXBuffer+2)& (0+255),b
 14282  000B36  5199               	movf	(??_ARP_parseFromRXBuffer+2)& (0+255),w,b
 14283  000B38  13A2               	iorwf	(ARP_parseFromRXBuffer@arp+2)& (0+255),f,b
 14284                           
 14285                           ; BSR set to: 0
 14286                           ;arp.c: 71: arp.hlen = ethernetController_streamFromRXBuffer(1, frame->memory.start + of
      +                          fset);
 14287  000B3A  EE20 F010          	lfsr	2,16
 14288  000B3E  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 14289  000B40  26D9               	addwf	fsr2l,f,c
 14290  000B42  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 14291  000B44  22DA               	addwfc	fsr2h,f,c
 14292  000B46  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 14293  000B4A  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 14294  000B4E  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 14295  000B50  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 14296  000B52  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 14297  000B54  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 14298  000B56  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 14299  000B58  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 14300  000B5A  0E01               	movlw	1
 14301  000B5C  EC16  F01A         	call	_ethernetController_streamFromRXBuffer
 14302  000B60  0100               	movlb	0	; () banked
 14303  000B62  6FA4               	movwf	(ARP_parseFromRXBuffer@arp+4)& (0+255),b
 14304                           
 14305                           ; BSR set to: 0
 14306                           ;arp.c: 72: arp.plen = ethernetController_streamFromRXBuffer(1, frame->memory.start + of
      +                          fset);
 14307  000B64  EE20 F010          	lfsr	2,16
 14308  000B68  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 14309  000B6A  26D9               	addwf	fsr2l,f,c
 14310  000B6C  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 14311  000B6E  22DA               	addwfc	fsr2h,f,c
 14312  000B70  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 14313  000B74  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 14314  000B78  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 14315  000B7A  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 14316  000B7C  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 14317  000B7E  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 14318  000B80  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 14319  000B82  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 14320  000B84  0E01               	movlw	1
 14321  000B86  EC16  F01A         	call	_ethernetController_streamFromRXBuffer
 14322  000B8A  0100               	movlb	0	; () banked
 14323  000B8C  6FA5               	movwf	(ARP_parseFromRXBuffer@arp+5)& (0+255),b
 14324                           
 14325                           ; BSR set to: 0
 14326                           ;arp.c: 74: arp.operation = (ethernetController_streamFromRXBuffer(1, frame->memory.star
      +                          t + offset) << 8);
 14327  000B8E  EE20 F010          	lfsr	2,16
 14328  000B92  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 14329  000B94  26D9               	addwf	fsr2l,f,c
 14330  000B96  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 14331  000B98  22DA               	addwfc	fsr2h,f,c
 14332  000B9A  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 14333  000B9E  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 14334  000BA2  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 14335  000BA4  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 14336  000BA6  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 14337  000BA8  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 14338  000BAA  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 14339  000BAC  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 14340  000BAE  0E01               	movlw	1
 14341  000BB0  EC16  F01A         	call	_ethernetController_streamFromRXBuffer
 14342  000BB4  0100               	movlb	0	; () banked
 14343  000BB6  6FA7               	movwf	(ARP_parseFromRXBuffer@arp+7)& (0+255),b
 14344  000BB8  6BA6               	clrf	(ARP_parseFromRXBuffer@arp+6)& (0+255),b
 14345                           
 14346                           ; BSR set to: 0
 14347                           ;arp.c: 75: arp.operation |= ethernetController_streamFromRXBuffer(1, frame->memory.star
      +                          t + offset);
 14348  000BBA  EE20 F010          	lfsr	2,16
 14349  000BBE  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 14350  000BC0  26D9               	addwf	fsr2l,f,c
 14351  000BC2  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 14352  000BC4  22DA               	addwfc	fsr2h,f,c
 14353  000BC6  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 14354  000BCA  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 14355  000BCE  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 14356  000BD0  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 14357  000BD2  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 14358  000BD4  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 14359  000BD6  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 14360  000BD8  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 14361  000BDA  0E01               	movlw	1
 14362  000BDC  EC16  F01A         	call	_ethernetController_streamFromRXBuffer
 14363  000BE0  0100               	movlb	0	; () banked
 14364  000BE2  6F99               	movwf	(??_ARP_parseFromRXBuffer+2)& (0+255),b
 14365  000BE4  5199               	movf	(??_ARP_parseFromRXBuffer+2)& (0+255),w,b
 14366  000BE6  13A6               	iorwf	(ARP_parseFromRXBuffer@arp+6)& (0+255),f,b
 14367                           
 14368                           ; BSR set to: 0
 14369                           ;arp.c: 78: for (uint8_t i = 0; i < arp.hlen; i++)
 14370  000BE8  0E00               	movlw	0
 14371  000BEA  6F9A               	movwf	ARP_parseFromRXBuffer@i& (0+255),b
 14372  000BEC  D024               	goto	l871
 14373  000BEE                     
 14374                           ; BSR set to: 0
 14375                           ;arp.c: 79: arp.senderMACAddress.address[i] = ethernetController_streamFromRXBuffer(1, f
      +                          rame->memory.start + offset);
 14376                           
 14377                           ; BSR set to: 0
 14378  000BEE  EE20 F010          	lfsr	2,16
 14379  000BF2  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 14380  000BF4  26D9               	addwf	fsr2l,f,c
 14381  000BF6  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 14382  000BF8  22DA               	addwfc	fsr2h,f,c
 14383  000BFA  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 14384  000BFE  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 14385  000C02  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 14386  000C04  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 14387  000C06  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 14388  000C08  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 14389  000C0A  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 14390  000C0C  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 14391  000C0E  0E01               	movlw	1
 14392  000C10  EC16  F01A         	call	_ethernetController_streamFromRXBuffer
 14393  000C14  0100               	movlb	0	; () banked
 14394  000C16  6F99               	movwf	(??_ARP_parseFromRXBuffer+2)& (0+255),b
 14395  000C18  519A               	movf	ARP_parseFromRXBuffer@i& (0+255),w,b
 14396  000C1A  0D01               	mullw	1
 14397  000C1C  0E08               	movlw	8
 14398  000C1E  26F3               	addwf	prodl,f,c
 14399  000C20  0E00               	movlw	0
 14400  000C22  22F4               	addwfc	prodh,f,c
 14401  000C24  0EA0               	movlw	low ARP_parseFromRXBuffer@arp
 14402  000C26  24F3               	addwf	prodl,w,c
 14403  000C28  6ED9               	movwf	fsr2l,c
 14404  000C2A  0E00               	movlw	high ARP_parseFromRXBuffer@arp
 14405  000C2C  20F4               	addwfc	prodh,w,c
 14406  000C2E  6EDA               	movwf	fsr2h,c
 14407  000C30  C099  FFDF         	movff	??_ARP_parseFromRXBuffer+2,indf2
 14408                           
 14409                           ; BSR set to: 0
 14410  000C34  2B9A               	incf	ARP_parseFromRXBuffer@i& (0+255),f,b
 14411  000C36                     l871:
 14412                           
 14413                           ; BSR set to: 0
 14414                           
 14415                           ; BSR set to: 0
 14416  000C36  51A4               	movf	(ARP_parseFromRXBuffer@arp+4)& (0+255),w,b
 14417  000C38  5D9A               	subwf	ARP_parseFromRXBuffer@i& (0+255),w,b
 14418  000C3A  A0D8               	btfss	status,0,c
 14419  000C3C  D7D8               	goto	l872
 14420                           
 14421                           ; BSR set to: 0
 14422                           ;arp.c: 80: for (uint8_t i = 0; i < arp.plen; i++)
 14423                           
 14424                           ; BSR set to: 0
 14425  000C3E  0E00               	movlw	0
 14426  000C40  6F9B               	movwf	ARP_parseFromRXBuffer@i_2556& (0+255),b
 14427  000C42  D024               	goto	l874
 14428  000C44                     
 14429                           ; BSR set to: 0
 14430                           ;arp.c: 81: arp.senderIPAddress.address[i] = ethernetController_streamFromRXBuffer(1, fr
      +                          ame->memory.start + offset);
 14431                           
 14432                           ; BSR set to: 0
 14433  000C44  EE20 F010          	lfsr	2,16
 14434  000C48  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 14435  000C4A  26D9               	addwf	fsr2l,f,c
 14436  000C4C  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 14437  000C4E  22DA               	addwfc	fsr2h,f,c
 14438  000C50  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 14439  000C54  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 14440  000C58  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 14441  000C5A  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 14442  000C5C  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 14443  000C5E  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 14444  000C60  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 14445  000C62  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 14446  000C64  0E01               	movlw	1
 14447  000C66  EC16  F01A         	call	_ethernetController_streamFromRXBuffer
 14448  000C6A  0100               	movlb	0	; () banked
 14449  000C6C  6F99               	movwf	(??_ARP_parseFromRXBuffer+2)& (0+255),b
 14450  000C6E  519B               	movf	ARP_parseFromRXBuffer@i_2556& (0+255),w,b
 14451  000C70  0D01               	mullw	1
 14452  000C72  0E0E               	movlw	14
 14453  000C74  26F3               	addwf	prodl,f,c
 14454  000C76  0E00               	movlw	0
 14455  000C78  22F4               	addwfc	prodh,f,c
 14456  000C7A  0EA0               	movlw	low ARP_parseFromRXBuffer@arp
 14457  000C7C  24F3               	addwf	prodl,w,c
 14458  000C7E  6ED9               	movwf	fsr2l,c
 14459  000C80  0E00               	movlw	high ARP_parseFromRXBuffer@arp
 14460  000C82  20F4               	addwfc	prodh,w,c
 14461  000C84  6EDA               	movwf	fsr2h,c
 14462  000C86  C099  FFDF         	movff	??_ARP_parseFromRXBuffer+2,indf2
 14463                           
 14464                           ; BSR set to: 0
 14465  000C8A  2B9B               	incf	ARP_parseFromRXBuffer@i_2556& (0+255),f,b
 14466  000C8C                     l874:
 14467                           
 14468                           ; BSR set to: 0
 14469                           
 14470                           ; BSR set to: 0
 14471  000C8C  51A5               	movf	(ARP_parseFromRXBuffer@arp+5)& (0+255),w,b
 14472  000C8E  5D9B               	subwf	ARP_parseFromRXBuffer@i_2556& (0+255),w,b
 14473  000C90  A0D8               	btfss	status,0,c
 14474  000C92  D7D8               	goto	l875
 14475                           
 14476                           ; BSR set to: 0
 14477                           ;arp.c: 83: for (uint8_t i = 0; i < arp.hlen; i++)
 14478                           
 14479                           ; BSR set to: 0
 14480  000C94  0E00               	movlw	0
 14481  000C96  6F9C               	movwf	ARP_parseFromRXBuffer@i_2557& (0+255),b
 14482  000C98  D024               	goto	l877
 14483  000C9A                     
 14484                           ; BSR set to: 0
 14485                           ;arp.c: 84: arp.targetMACAddress.address[i] = ethernetController_streamFromRXBuffer(1, f
      +                          rame->memory.start + offset);
 14486                           
 14487                           ; BSR set to: 0
 14488  000C9A  EE20 F010          	lfsr	2,16
 14489  000C9E  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 14490  000CA0  26D9               	addwf	fsr2l,f,c
 14491  000CA2  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 14492  000CA4  22DA               	addwfc	fsr2h,f,c
 14493  000CA6  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 14494  000CAA  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 14495  000CAE  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 14496  000CB0  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 14497  000CB2  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 14498  000CB4  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 14499  000CB6  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 14500  000CB8  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 14501  000CBA  0E01               	movlw	1
 14502  000CBC  EC16  F01A         	call	_ethernetController_streamFromRXBuffer
 14503  000CC0  0100               	movlb	0	; () banked
 14504  000CC2  6F99               	movwf	(??_ARP_parseFromRXBuffer+2)& (0+255),b
 14505  000CC4  519C               	movf	ARP_parseFromRXBuffer@i_2557& (0+255),w,b
 14506  000CC6  0D01               	mullw	1
 14507  000CC8  0E12               	movlw	18
 14508  000CCA  26F3               	addwf	prodl,f,c
 14509  000CCC  0E00               	movlw	0
 14510  000CCE  22F4               	addwfc	prodh,f,c
 14511  000CD0  0EA0               	movlw	low ARP_parseFromRXBuffer@arp
 14512  000CD2  24F3               	addwf	prodl,w,c
 14513  000CD4  6ED9               	movwf	fsr2l,c
 14514  000CD6  0E00               	movlw	high ARP_parseFromRXBuffer@arp
 14515  000CD8  20F4               	addwfc	prodh,w,c
 14516  000CDA  6EDA               	movwf	fsr2h,c
 14517  000CDC  C099  FFDF         	movff	??_ARP_parseFromRXBuffer+2,indf2
 14518                           
 14519                           ; BSR set to: 0
 14520  000CE0  2B9C               	incf	ARP_parseFromRXBuffer@i_2557& (0+255),f,b
 14521  000CE2                     l877:
 14522                           
 14523                           ; BSR set to: 0
 14524                           
 14525                           ; BSR set to: 0
 14526  000CE2  51A4               	movf	(ARP_parseFromRXBuffer@arp+4)& (0+255),w,b
 14527  000CE4  5D9C               	subwf	ARP_parseFromRXBuffer@i_2557& (0+255),w,b
 14528  000CE6  A0D8               	btfss	status,0,c
 14529  000CE8  D7D8               	goto	l878
 14530                           
 14531                           ; BSR set to: 0
 14532                           ;arp.c: 85: for (uint8_t i = 0; i < arp.plen; i++)
 14533                           
 14534                           ; BSR set to: 0
 14535  000CEA  0E00               	movlw	0
 14536  000CEC  6F9D               	movwf	ARP_parseFromRXBuffer@i_2558& (0+255),b
 14537  000CEE  D024               	goto	l880
 14538  000CF0                     
 14539                           ; BSR set to: 0
 14540                           ;arp.c: 86: arp.targetIPAddress.address[i] = ethernetController_streamFromRXBuffer(1, fr
      +                          ame->memory.start + offset);
 14541                           
 14542                           ; BSR set to: 0
 14543  000CF0  EE20 F010          	lfsr	2,16
 14544  000CF4  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 14545  000CF6  26D9               	addwf	fsr2l,f,c
 14546  000CF8  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 14547  000CFA  22DA               	addwfc	fsr2h,f,c
 14548  000CFC  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 14549  000D00  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 14550  000D04  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 14551  000D06  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 14552  000D08  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 14553  000D0A  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 14554  000D0C  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 14555  000D0E  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 14556  000D10  0E01               	movlw	1
 14557  000D12  EC16  F01A         	call	_ethernetController_streamFromRXBuffer
 14558  000D16  0100               	movlb	0	; () banked
 14559  000D18  6F99               	movwf	(??_ARP_parseFromRXBuffer+2)& (0+255),b
 14560  000D1A  519D               	movf	ARP_parseFromRXBuffer@i_2558& (0+255),w,b
 14561  000D1C  0D01               	mullw	1
 14562  000D1E  0E18               	movlw	24
 14563  000D20  26F3               	addwf	prodl,f,c
 14564  000D22  0E00               	movlw	0
 14565  000D24  22F4               	addwfc	prodh,f,c
 14566  000D26  0EA0               	movlw	low ARP_parseFromRXBuffer@arp
 14567  000D28  24F3               	addwf	prodl,w,c
 14568  000D2A  6ED9               	movwf	fsr2l,c
 14569  000D2C  0E00               	movlw	high ARP_parseFromRXBuffer@arp
 14570  000D2E  20F4               	addwfc	prodh,w,c
 14571  000D30  6EDA               	movwf	fsr2h,c
 14572  000D32  C099  FFDF         	movff	??_ARP_parseFromRXBuffer+2,indf2
 14573                           
 14574                           ; BSR set to: 0
 14575  000D36  2B9D               	incf	ARP_parseFromRXBuffer@i_2558& (0+255),f,b
 14576  000D38                     l880:
 14577                           
 14578                           ; BSR set to: 0
 14579                           
 14580                           ; BSR set to: 0
 14581  000D38  51A5               	movf	(ARP_parseFromRXBuffer@arp+5)& (0+255),w,b
 14582  000D3A  5D9D               	subwf	ARP_parseFromRXBuffer@i_2558& (0+255),w,b
 14583  000D3C  A0D8               	btfss	status,0,c
 14584  000D3E  D7D8               	goto	l881
 14585                           
 14586                           ; BSR set to: 0
 14587                           ;arp.c: 88: ethernetController_streamFromRXBuffer(2, frame->memory.start + offset);
 14588                           
 14589                           ; BSR set to: 0
 14590  000D40  EE20 F010          	lfsr	2,16
 14591  000D44  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 14592  000D46  26D9               	addwf	fsr2l,f,c
 14593  000D48  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 14594  000D4A  22DA               	addwfc	fsr2h,f,c
 14595  000D4C  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 14596  000D50  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 14597  000D54  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 14598  000D56  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 14599  000D58  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 14600  000D5A  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 14601  000D5C  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 14602  000D5E  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 14603  000D60  0E02               	movlw	2
 14604  000D62  EC16  F01A         	call	_ethernetController_streamFromRXBuffer
 14605                           
 14606                           ;arp.c: 90: if (ipv4_isAllZero(&arp.senderIPAddress)) {
 14607  000D66  0EAE               	movlw	low (ARP_parseFromRXBuffer@arp+14)
 14608  000D68  0100               	movlb	0	; () banked
 14609  000D6A  6F60               	movwf	ipv4_isAllZero@ip& (0+255),b
 14610  000D6C  0E00               	movlw	high (ARP_parseFromRXBuffer@arp+14)
 14611  000D6E  6F61               	movwf	(ipv4_isAllZero@ip+1)& (0+255),b
 14612  000D70  EC9A  F021         	call	_ipv4_isAllZero	;wreg free
 14613  000D74  0100               	movlb	0	; () banked
 14614  000D76  A0D8               	btfss	status,0,c
 14615  000D78  D002               	goto	l883
 14616                           
 14617                           ; BSR set to: 0
 14618                           ;arp.c: 91: arp.fIsProbe = 1;
 14619  000D7A  83BC               	bsf	(ARP_parseFromRXBuffer@arp+28)& (0+255),1,b
 14620  000D7C  D03C               	goto	l887
 14621  000D7E                     l883:
 14622                           
 14623                           ; BSR set to: 0
 14624                           ;arp.c: 94: arp.fIsProbe = 0;
 14625  000D7E  93BC               	bcf	(ARP_parseFromRXBuffer@arp+28)& (0+255),1,b
 14626                           
 14627                           ; BSR set to: 0
 14628                           ;arp.c: 96: if (ipv4_cmp(&arp.senderIPAddress, &arp.targetIPAddress) &&
 14629                           ;arp.c: 97: mac_isAllZero(&arp.targetMACAddress) &&
 14630                           ;arp.c: 98: arp.operation == ARP_REQUEST) {
 14631  000D80  0EAE               	movlw	low (ARP_parseFromRXBuffer@arp+14)
 14632  000D82  6F60               	movwf	ipv4_cmp@a& (0+255),b
 14633  000D84  0E00               	movlw	high (ARP_parseFromRXBuffer@arp+14)
 14634  000D86  6F61               	movwf	(ipv4_cmp@a+1)& (0+255),b
 14635  000D88  0EB8               	movlw	low (ARP_parseFromRXBuffer@arp+24)
 14636  000D8A  6F62               	movwf	ipv4_cmp@b& (0+255),b
 14637  000D8C  0E00               	movlw	high (ARP_parseFromRXBuffer@arp+24)
 14638  000D8E  6F63               	movwf	(ipv4_cmp@b+1)& (0+255),b
 14639  000D90  EC99  F020         	call	_ipv4_cmp	;wreg free
 14640  000D94  0100               	movlb	0	; () banked
 14641  000D96  A0D8               	btfss	status,0,c
 14642  000D98  D00D               	goto	l885
 14643                           
 14644                           ; BSR set to: 0
 14645  000D9A  0EB2               	movlw	low (ARP_parseFromRXBuffer@arp+18)
 14646  000D9C  6F60               	movwf	mac_isAllZero@mac& (0+255),b
 14647  000D9E  0E00               	movlw	high (ARP_parseFromRXBuffer@arp+18)
 14648  000DA0  6F61               	movwf	(mac_isAllZero@mac+1)& (0+255),b
 14649  000DA2  EC82  F021         	call	_mac_isAllZero	;wreg free
 14650  000DA6  0100               	movlb	0	; () banked
 14651  000DA8  A0D8               	btfss	status,0,c
 14652  000DAA  D004               	goto	l885
 14653                           
 14654                           ; BSR set to: 0
 14655  000DAC  05A6               	decf	(ARP_parseFromRXBuffer@arp+6)& (0+255),w,b
 14656  000DAE  11A7               	iorwf	(ARP_parseFromRXBuffer@arp+7)& (0+255),w,b
 14657  000DB0  B4D8               	btfsc	status,2,c
 14658  000DB2  D01F               	goto	u9530
 14659  000DB4                     l885:
 14660                           
 14661                           ; BSR set to: 0
 14662                           ;arp.c: 102: if (ipv4_cmp(&arp.senderIPAddress, &arp.targetIPAddress) &&
 14663                           ;arp.c: 103: mac_cmp(&arp.senderMACAddress, &arp.targetMACAddress) &&
 14664                           ;arp.c: 104: arp.operation == ARP_REPLY) {
 14665                           
 14666                           ; BSR set to: 0
 14667  000DB4  0EAE               	movlw	low (ARP_parseFromRXBuffer@arp+14)
 14668  000DB6  6F60               	movwf	ipv4_cmp@a& (0+255),b
 14669  000DB8  0E00               	movlw	high (ARP_parseFromRXBuffer@arp+14)
 14670  000DBA  6F61               	movwf	(ipv4_cmp@a+1)& (0+255),b
 14671  000DBC  0EB8               	movlw	low (ARP_parseFromRXBuffer@arp+24)
 14672  000DBE  6F62               	movwf	ipv4_cmp@b& (0+255),b
 14673  000DC0  0E00               	movlw	high (ARP_parseFromRXBuffer@arp+24)
 14674  000DC2  6F63               	movwf	(ipv4_cmp@b+1)& (0+255),b
 14675  000DC4  EC99  F020         	call	_ipv4_cmp	;wreg free
 14676  000DC8  0100               	movlb	0	; () banked
 14677  000DCA  A0D8               	btfss	status,0,c
 14678  000DCC  D014               	goto	l887
 14679                           
 14680                           ; BSR set to: 0
 14681  000DCE  0EA8               	movlw	low (ARP_parseFromRXBuffer@arp+8)
 14682  000DD0  6F60               	movwf	mac_cmp@a& (0+255),b
 14683  000DD2  0E00               	movlw	high (ARP_parseFromRXBuffer@arp+8)
 14684  000DD4  6F61               	movwf	(mac_cmp@a+1)& (0+255),b
 14685  000DD6  0EB2               	movlw	low (ARP_parseFromRXBuffer@arp+18)
 14686  000DD8  6F62               	movwf	mac_cmp@b& (0+255),b
 14687  000DDA  0E00               	movlw	high (ARP_parseFromRXBuffer@arp+18)
 14688  000DDC  6F63               	movwf	(mac_cmp@b+1)& (0+255),b
 14689  000DDE  EC78  F020         	call	_mac_cmp	;wreg free
 14690  000DE2  0100               	movlb	0	; () banked
 14691  000DE4  A0D8               	btfss	status,0,c
 14692  000DE6  D007               	goto	l887
 14693                           
 14694                           ; BSR set to: 0
 14695  000DE8  0E02               	movlw	2
 14696  000DEA  19A6               	xorwf	(ARP_parseFromRXBuffer@arp+6)& (0+255),w,b
 14697  000DEC  11A7               	iorwf	(ARP_parseFromRXBuffer@arp+7)& (0+255),w,b
 14698  000DEE  A4D8               	btfss	status,2,c
 14699  000DF0  D002               	goto	l887
 14700  000DF2                     u9530:
 14701                           
 14702                           ; BSR set to: 0
 14703                           ;arp.c: 105: arp.fIsGratuitous = 1;
 14704  000DF2  81BC               	bsf	(ARP_parseFromRXBuffer@arp+28)& (0+255),0,b
 14705                           
 14706                           ;arp.c: 106: } else {
 14707  000DF4  D001               	goto	l888
 14708  000DF6                     l887:
 14709                           
 14710                           ; BSR set to: 0
 14711                           ;arp.c: 107: arp.fIsGratuitous = 0;
 14712  000DF6  91BC               	bcf	(ARP_parseFromRXBuffer@arp+28)& (0+255),0,b
 14713  000DF8                     l888:
 14714                           
 14715                           ; BSR set to: 0
 14716                           ;arp.c: 108: }
 14717                           ;arp.c: 109: }
 14718                           ;arp.c: 110: }
 14719                           ;arp.c: 113: if ((arp.htype != ARP_HTYPE_ETHERNET) ||
 14720                           ;arp.c: 114: (arp.ptype != ARP_PTYPE_IPv4) ||
 14721                           ;arp.c: 115: (arp.operation > 2) ||
 14722                           ;arp.c: 116: (arp.hlen != 6) ||
 14723                           ;arp.c: 117: (arp.plen != 4)) {
 14724                           
 14725                           ; BSR set to: 0
 14726                           
 14727                           ; BSR set to: 0
 14728                           
 14729                           ; BSR set to: 0
 14730  000DF8  05A0               	decf	ARP_parseFromRXBuffer@arp& (0+255),w,b
 14731  000DFA  11A1               	iorwf	(ARP_parseFromRXBuffer@arp+1)& (0+255),w,b
 14732  000DFC  A4D8               	btfss	status,2,c
 14733  000DFE  D013               	goto	u9580
 14734                           
 14735                           ; BSR set to: 0
 14736  000E00  0E08               	movlw	8
 14737  000E02  19A3               	xorwf	(ARP_parseFromRXBuffer@arp+3)& (0+255),w,b
 14738  000E04  11A2               	iorwf	(ARP_parseFromRXBuffer@arp+2)& (0+255),w,b
 14739  000E06  A4D8               	btfss	status,2,c
 14740  000E08  D00E               	goto	u9580
 14741                           
 14742                           ; BSR set to: 0
 14743  000E0A  51A7               	movf	(ARP_parseFromRXBuffer@arp+7)& (0+255),w,b
 14744  000E0C  E10C               	bnz	l7776
 14745  000E0E  0E03               	movlw	3
 14746  000E10  5DA6               	subwf	(ARP_parseFromRXBuffer@arp+6)& (0+255),w,b
 14747  000E12  B0D8               	btfsc	status,0,c
 14748  000E14  D008               	goto	u9580
 14749                           
 14750                           ; BSR set to: 0
 14751  000E16  0E06               	movlw	6
 14752  000E18  19A4               	xorwf	(ARP_parseFromRXBuffer@arp+4)& (0+255),w,b
 14753  000E1A  A4D8               	btfss	status,2,c
 14754  000E1C  D004               	goto	u9580
 14755                           
 14756                           ; BSR set to: 0
 14757  000E1E  0E04               	movlw	4
 14758  000E20  19A5               	xorwf	(ARP_parseFromRXBuffer@arp+5)& (0+255),w,b
 14759  000E22  B4D8               	btfsc	status,2,c
 14760  000E24  D004               	goto	l889
 14761  000E26                     u9580:
 14762  000E26                     l7776:
 14763                           
 14764                           ; BSR set to: 0
 14765                           ;arp.c: 118: arp.err.code = ERROR_ARP_INVALID_VALUES;
 14766  000E26  0E01               	movlw	1
 14767  000E28  6FBF               	movwf	(ARP_parseFromRXBuffer@arp+31)& (0+255),b
 14768  000E2A  0E93               	movlw	147
 14769  000E2C  D003               	goto	L2
 14770  000E2E                     l889:
 14771                           
 14772                           ; BSR set to: 0
 14773                           ;arp.c: 121: arp.err.code = (uint16_t)0;
 14774                           
 14775                           ; BSR set to: 0
 14776  000E2E  0E00               	movlw	0
 14777  000E30  6FBF               	movwf	(ARP_parseFromRXBuffer@arp+31)& (0+255),b
 14778  000E32  0E00               	movlw	0
 14779  000E34                     L2:
 14780  000E34  6FBE               	movwf	(ARP_parseFromRXBuffer@arp+30)& (0+255),b
 14781                           
 14782                           ;arp.c: 122: arp.err.module = ERROR_MODULE_ARP;
 14783  000E36  0E03               	movlw	3
 14784  000E38  6FBD               	movwf	(ARP_parseFromRXBuffer@arp+29)& (0+255),b
 14785                           
 14786                           ; BSR set to: 0
 14787                           ;arp.c: 123: }
 14788                           ;arp.c: 125: return arp;
 14789                           
 14790                           ; BSR set to: 0
 14791  000E3A  EE20  F0A0         	lfsr	2,ARP_parseFromRXBuffer@arp
 14792  000E3E  EE00  F077         	lfsr	0,?_ARP_parseFromRXBuffer
 14793  000E42  0E1F               	movlw	31
 14794  000E44                     u9591:
 14795  000E44  CFDB FFEB          	movff	plusw2,plusw0
 14796  000E48  06E8               	decf	wreg,f,c
 14797  000E4A  E2FC               	bc	u9591
 14798  000E4C  0012               	return	
 14799  000E4E                     __end_of_ARP_parseFromRXBuffer:
 14800                           	opt stack 0
 14801                           tblptru	equ	0xFF8
 14802                           tblptrh	equ	0xFF7
 14803                           tblptrl	equ	0xFF6
 14804                           tablat	equ	0xFF5
 14805                           prodh	equ	0xFF4
 14806                           prodl	equ	0xFF3
 14807                           intcon	equ	0xFF2
 14808                           intcon3	equ	0xFF0
 14809                           postinc0	equ	0xFEE
 14810                           plusw0	equ	0xFEB
 14811                           fsr0h	equ	0xFEA
 14812                           fsr0l	equ	0xFE9
 14813                           wreg	equ	0xFE8
 14814                           indf1	equ	0xFE7
 14815                           postinc1	equ	0xFE6
 14816                           postdec1	equ	0xFE5
 14817                           plusw1	equ	0xFE3
 14818                           fsr1h	equ	0xFE2
 14819                           fsr1l	equ	0xFE1
 14820                           indf2	equ	0xFDF
 14821                           postinc2	equ	0xFDE
 14822                           postdec2	equ	0xFDD
 14823                           plusw2	equ	0xFDB
 14824                           fsr2h	equ	0xFDA
 14825                           fsr2l	equ	0xFD9
 14826                           status	equ	0xFD8
 14827                           
 14828 ;; *************** function _mac_isAllZero *****************
 14829 ;; Defined at:
 14830 ;;		line 31 in file "src/eth/mac.c"
 14831 ;; Parameters:    Size  Location     Type
 14832 ;;  mac             2    0[BANK0 ] PTR struct macaddress
 14833 ;;		 -> ARP_parseFromRXBuffer@arp(32), 
 14834 ;; Auto vars:     Size  Location     Type
 14835 ;;  i               1    2[BANK0 ] unsigned char 
 14836 ;; Return value:  Size  Location     Type
 14837 ;;		None               void
 14838 ;; Registers used:
 14839 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14840 ;; Tracked objects:
 14841 ;;		On entry : 0/0
 14842 ;;		On exit  : 0/0
 14843 ;;		Unchanged: 0/0
 14844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14845 ;;      Params:         0       2       0       0       0       0       0       0       0
 14846 ;;      Locals:         0       1       0       0       0       0       0       0       0
 14847 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14848 ;;      Totals:         0       3       0       0       0       0       0       0       0
 14849 ;;Total ram usage:        3 bytes
 14850 ;; Hardware stack levels used:    1
 14851 ;; Hardware stack levels required when called:    4
 14852 ;; This function calls:
 14853 ;;		Nothing
 14854 ;; This function is called by:
 14855 ;;		_ARP_parseFromRXBuffer
 14856 ;; This function uses a non-reentrant model
 14857 ;;
 14858                           
 14859                           	psect	text52
 14860  004304                     __ptext52:
 14861                           	opt stack 0
 14862  004304                     _mac_isAllZero:
 14863                           	opt stack 22
 14864                           
 14865                           ;mac.c: 32: for (uint8_t i = 0; i < 6; i++) {
 14866                           
 14867                           ; BSR set to: 0
 14868                           ;incstack = 0
 14869  004304  0E00               	movlw	0
 14870  004306  0100               	movlb	0	; () banked
 14871  004308  6F62               	movwf	mac_isAllZero@i& (0+255),b
 14872  00430A                     l7402:
 14873                           
 14874                           ; BSR set to: 0
 14875  00430A  0E05               	movlw	5
 14876  00430C  6562               	cpfsgt	mac_isAllZero@i& (0+255),b
 14877  00430E  D001               	goto	l371
 14878  004310  D00F               	goto	u8700
 14879  004312                     l371:
 14880                           
 14881                           ; BSR set to: 0
 14882                           ;mac.c: 33: if (mac->address[i] != 0x00)
 14883                           
 14884                           ; BSR set to: 0
 14885  004312  5162               	movf	mac_isAllZero@i& (0+255),w,b
 14886  004314  0D01               	mullw	1
 14887  004316  50F3               	movf	prodl,w,c
 14888  004318  2560               	addwf	mac_isAllZero@mac& (0+255),w,b
 14889  00431A  6ED9               	movwf	fsr2l,c
 14890  00431C  50F4               	movf	prodh,w,c
 14891  00431E  2161               	addwfc	(mac_isAllZero@mac+1)& (0+255),w,b
 14892  004320  6EDA               	movwf	fsr2h,c
 14893  004322  50DF               	movf	indf2,w,c
 14894  004324  B4D8               	btfsc	status,2,c
 14895  004326  D002               	goto	l373
 14896                           
 14897                           ; BSR set to: 0
 14898                           ;mac.c: 34: return 0;
 14899  004328  90D8               	bcf	status,0,c
 14900                           
 14901                           ; BSR set to: 0
 14902  00432A  0012               	return	
 14903  00432C                     l373:
 14904                           
 14905                           ; BSR set to: 0
 14906                           
 14907                           ; BSR set to: 0
 14908  00432C  2B62               	incf	mac_isAllZero@i& (0+255),f,b
 14909  00432E  D7ED               	goto	l7402
 14910  004330                     u8700:
 14911                           
 14912                           ; BSR set to: 0
 14913                           ;mac.c: 35: }
 14914                           ;mac.c: 36: return 1;
 14915                           
 14916                           ; BSR set to: 0
 14917  004330  80D8               	bsf	status,0,c
 14918  004332  0012               	return	
 14919  004334                     __end_of_mac_isAllZero:
 14920                           	opt stack 0
 14921                           tblptru	equ	0xFF8
 14922                           tblptrh	equ	0xFF7
 14923                           tblptrl	equ	0xFF6
 14924                           tablat	equ	0xFF5
 14925                           prodh	equ	0xFF4
 14926                           prodl	equ	0xFF3
 14927                           intcon	equ	0xFF2
 14928                           intcon3	equ	0xFF0
 14929                           postinc0	equ	0xFEE
 14930                           plusw0	equ	0xFEB
 14931                           fsr0h	equ	0xFEA
 14932                           fsr0l	equ	0xFE9
 14933                           wreg	equ	0xFE8
 14934                           indf1	equ	0xFE7
 14935                           postinc1	equ	0xFE6
 14936                           postdec1	equ	0xFE5
 14937                           plusw1	equ	0xFE3
 14938                           fsr1h	equ	0xFE2
 14939                           fsr1l	equ	0xFE1
 14940                           indf2	equ	0xFDF
 14941                           postinc2	equ	0xFDE
 14942                           postdec2	equ	0xFDD
 14943                           plusw2	equ	0xFDB
 14944                           fsr2h	equ	0xFDA
 14945                           fsr2l	equ	0xFD9
 14946                           status	equ	0xFD8
 14947                           
 14948 ;; *************** function _mac_cmp *****************
 14949 ;; Defined at:
 14950 ;;		line 39 in file "src/eth/mac.c"
 14951 ;; Parameters:    Size  Location     Type
 14952 ;;  a               2    0[BANK0 ] PTR struct macaddress
 14953 ;;		 -> ARP_parseFromRXBuffer@arp(32), 
 14954 ;;  b               2    2[BANK0 ] PTR struct macaddress
 14955 ;;		 -> ARP_parseFromRXBuffer@arp(32), 
 14956 ;; Auto vars:     Size  Location     Type
 14957 ;;  i               1    6[BANK0 ] unsigned char 
 14958 ;; Return value:  Size  Location     Type
 14959 ;;		None               void
 14960 ;; Registers used:
 14961 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14962 ;; Tracked objects:
 14963 ;;		On entry : 0/0
 14964 ;;		On exit  : 0/0
 14965 ;;		Unchanged: 0/0
 14966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14967 ;;      Params:         0       4       0       0       0       0       0       0       0
 14968 ;;      Locals:         0       1       0       0       0       0       0       0       0
 14969 ;;      Temps:          0       2       0       0       0       0       0       0       0
 14970 ;;      Totals:         0       7       0       0       0       0       0       0       0
 14971 ;;Total ram usage:        7 bytes
 14972 ;; Hardware stack levels used:    1
 14973 ;; Hardware stack levels required when called:    4
 14974 ;; This function calls:
 14975 ;;		Nothing
 14976 ;; This function is called by:
 14977 ;;		_ARP_parseFromRXBuffer
 14978 ;; This function uses a non-reentrant model
 14979 ;;
 14980                           
 14981                           	psect	text53
 14982  0040F0                     __ptext53:
 14983                           	opt stack 0
 14984  0040F0                     _mac_cmp:
 14985                           	opt stack 22
 14986                           
 14987                           ;mac.c: 40: for (uint8_t i = 0; i < 6; i++) {
 14988                           
 14989                           ; BSR set to: 0
 14990                           ;incstack = 0
 14991  0040F0  0E00               	movlw	0
 14992  0040F2  0100               	movlb	0	; () banked
 14993  0040F4  6F66               	movwf	mac_cmp@i& (0+255),b
 14994  0040F6                     l7422:
 14995                           
 14996                           ; BSR set to: 0
 14997  0040F6  0E05               	movlw	5
 14998  0040F8  6566               	cpfsgt	mac_cmp@i& (0+255),b
 14999  0040FA  D001               	goto	l377
 15000  0040FC  D018               	goto	u8730
 15001  0040FE                     l377:
 15002                           
 15003                           ; BSR set to: 0
 15004                           ;mac.c: 41: if (a->address[i] != b->address[i])
 15005                           
 15006                           ; BSR set to: 0
 15007  0040FE  5166               	movf	mac_cmp@i& (0+255),w,b
 15008  004100  0D01               	mullw	1
 15009  004102  50F3               	movf	prodl,w,c
 15010  004104  2562               	addwf	mac_cmp@b& (0+255),w,b
 15011  004106  6ED9               	movwf	fsr2l,c
 15012  004108  50F4               	movf	prodh,w,c
 15013  00410A  2163               	addwfc	(mac_cmp@b+1)& (0+255),w,b
 15014  00410C  6EDA               	movwf	fsr2h,c
 15015  00410E  5166               	movf	mac_cmp@i& (0+255),w,b
 15016  004110  0D01               	mullw	1
 15017  004112  50F3               	movf	prodl,w,c
 15018  004114  2560               	addwf	mac_cmp@a& (0+255),w,b
 15019  004116  6EE1               	movwf	fsr1l,c
 15020  004118  50F4               	movf	prodh,w,c
 15021  00411A  2161               	addwfc	(mac_cmp@a+1)& (0+255),w,b
 15022  00411C  6EE2               	movwf	fsr1h,c
 15023  00411E  50DE               	movf	postinc2,w,c
 15024  004120  18E6               	xorwf	postinc1,w,c
 15025  004122  B4D8               	btfsc	status,2,c
 15026  004124  D002               	goto	l379
 15027                           
 15028                           ; BSR set to: 0
 15029                           ;mac.c: 42: return 0;
 15030  004126  90D8               	bcf	status,0,c
 15031                           
 15032                           ; BSR set to: 0
 15033  004128  0012               	return	
 15034  00412A                     l379:
 15035                           
 15036                           ; BSR set to: 0
 15037                           
 15038                           ; BSR set to: 0
 15039  00412A  2B66               	incf	mac_cmp@i& (0+255),f,b
 15040  00412C  D7E4               	goto	l7422
 15041  00412E                     u8730:
 15042                           
 15043                           ; BSR set to: 0
 15044                           ;mac.c: 43: }
 15045                           ;mac.c: 44: return 1;
 15046                           
 15047                           ; BSR set to: 0
 15048  00412E  80D8               	bsf	status,0,c
 15049  004130  0012               	return	
 15050  004132                     __end_of_mac_cmp:
 15051                           	opt stack 0
 15052                           tblptru	equ	0xFF8
 15053                           tblptrh	equ	0xFF7
 15054                           tblptrl	equ	0xFF6
 15055                           tablat	equ	0xFF5
 15056                           prodh	equ	0xFF4
 15057                           prodl	equ	0xFF3
 15058                           intcon	equ	0xFF2
 15059                           intcon3	equ	0xFF0
 15060                           postinc0	equ	0xFEE
 15061                           plusw0	equ	0xFEB
 15062                           fsr0h	equ	0xFEA
 15063                           fsr0l	equ	0xFE9
 15064                           wreg	equ	0xFE8
 15065                           indf1	equ	0xFE7
 15066                           postinc1	equ	0xFE6
 15067                           postdec1	equ	0xFE5
 15068                           plusw1	equ	0xFE3
 15069                           fsr1h	equ	0xFE2
 15070                           fsr1l	equ	0xFE1
 15071                           indf2	equ	0xFDF
 15072                           postinc2	equ	0xFDE
 15073                           postdec2	equ	0xFDD
 15074                           plusw2	equ	0xFDB
 15075                           fsr2h	equ	0xFDA
 15076                           fsr2l	equ	0xFD9
 15077                           status	equ	0xFD8
 15078                           
 15079 ;; *************** function _ipv4_isAllZero *****************
 15080 ;; Defined at:
 15081 ;;		line 178 in file "src/stack/protocols/ipv4.c"
 15082 ;; Parameters:    Size  Location     Type
 15083 ;;  ip              2    0[BANK0 ] PTR struct ipv4_address
 15084 ;;		 -> ARP_parseFromRXBuffer@arp(32), 
 15085 ;; Auto vars:     Size  Location     Type
 15086 ;;  i               1    2[BANK0 ] unsigned char 
 15087 ;; Return value:  Size  Location     Type
 15088 ;;		None               void
 15089 ;; Registers used:
 15090 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15091 ;; Tracked objects:
 15092 ;;		On entry : 0/0
 15093 ;;		On exit  : 0/0
 15094 ;;		Unchanged: 0/0
 15095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15096 ;;      Params:         0       2       0       0       0       0       0       0       0
 15097 ;;      Locals:         0       1       0       0       0       0       0       0       0
 15098 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15099 ;;      Totals:         0       3       0       0       0       0       0       0       0
 15100 ;;Total ram usage:        3 bytes
 15101 ;; Hardware stack levels used:    1
 15102 ;; Hardware stack levels required when called:    4
 15103 ;; This function calls:
 15104 ;;		Nothing
 15105 ;; This function is called by:
 15106 ;;		_ARP_parseFromRXBuffer
 15107 ;; This function uses a non-reentrant model
 15108 ;;
 15109                           
 15110                           	psect	text54
 15111  004334                     __ptext54:
 15112                           	opt stack 0
 15113  004334                     _ipv4_isAllZero:
 15114                           	opt stack 22
 15115                           
 15116                           ;ipv4.c: 179: for (uint8_t i = 0; i < 4; i++) {
 15117                           
 15118                           ; BSR set to: 0
 15119                           ;incstack = 0
 15120  004334  0E00               	movlw	0
 15121  004336  0100               	movlb	0	; () banked
 15122  004338  6F62               	movwf	ipv4_isAllZero@i& (0+255),b
 15123  00433A                     l7482:
 15124                           
 15125                           ; BSR set to: 0
 15126  00433A  0E03               	movlw	3
 15127  00433C  6562               	cpfsgt	ipv4_isAllZero@i& (0+255),b
 15128  00433E  D001               	goto	l1012
 15129  004340  D00F               	goto	u8820
 15130  004342                     l1012:
 15131                           
 15132                           ; BSR set to: 0
 15133                           ;ipv4.c: 180: if (ip->address[i] != 0x00)
 15134                           
 15135                           ; BSR set to: 0
 15136  004342  5162               	movf	ipv4_isAllZero@i& (0+255),w,b
 15137  004344  0D01               	mullw	1
 15138  004346  50F3               	movf	prodl,w,c
 15139  004348  2560               	addwf	ipv4_isAllZero@ip& (0+255),w,b
 15140  00434A  6ED9               	movwf	fsr2l,c
 15141  00434C  50F4               	movf	prodh,w,c
 15142  00434E  2161               	addwfc	(ipv4_isAllZero@ip+1)& (0+255),w,b
 15143  004350  6EDA               	movwf	fsr2h,c
 15144  004352  50DF               	movf	indf2,w,c
 15145  004354  B4D8               	btfsc	status,2,c
 15146  004356  D002               	goto	l1014
 15147                           
 15148                           ; BSR set to: 0
 15149                           ;ipv4.c: 181: return 0;
 15150  004358  90D8               	bcf	status,0,c
 15151                           
 15152                           ; BSR set to: 0
 15153  00435A  0012               	return	
 15154  00435C                     l1014:
 15155                           
 15156                           ; BSR set to: 0
 15157                           
 15158                           ; BSR set to: 0
 15159  00435C  2B62               	incf	ipv4_isAllZero@i& (0+255),f,b
 15160  00435E  D7ED               	goto	l7482
 15161  004360                     u8820:
 15162                           
 15163                           ; BSR set to: 0
 15164                           ;ipv4.c: 182: }
 15165                           ;ipv4.c: 183: return 1;
 15166                           
 15167                           ; BSR set to: 0
 15168  004360  80D8               	bsf	status,0,c
 15169  004362  0012               	return	
 15170  004364                     __end_of_ipv4_isAllZero:
 15171                           	opt stack 0
 15172                           tblptru	equ	0xFF8
 15173                           tblptrh	equ	0xFF7
 15174                           tblptrl	equ	0xFF6
 15175                           tablat	equ	0xFF5
 15176                           prodh	equ	0xFF4
 15177                           prodl	equ	0xFF3
 15178                           intcon	equ	0xFF2
 15179                           intcon3	equ	0xFF0
 15180                           postinc0	equ	0xFEE
 15181                           plusw0	equ	0xFEB
 15182                           fsr0h	equ	0xFEA
 15183                           fsr0l	equ	0xFE9
 15184                           wreg	equ	0xFE8
 15185                           indf1	equ	0xFE7
 15186                           postinc1	equ	0xFE6
 15187                           postdec1	equ	0xFE5
 15188                           plusw1	equ	0xFE3
 15189                           fsr1h	equ	0xFE2
 15190                           fsr1l	equ	0xFE1
 15191                           indf2	equ	0xFDF
 15192                           postinc2	equ	0xFDE
 15193                           postdec2	equ	0xFDD
 15194                           plusw2	equ	0xFDB
 15195                           fsr2h	equ	0xFDA
 15196                           fsr2l	equ	0xFD9
 15197                           status	equ	0xFD8
 15198                           
 15199 ;; *************** function _ipv4_cmp *****************
 15200 ;; Defined at:
 15201 ;;		line 170 in file "src/stack/protocols/ipv4.c"
 15202 ;; Parameters:    Size  Location     Type
 15203 ;;  a               2    0[BANK0 ] PTR struct ipv4_address
 15204 ;;		 -> ARP_table(112), ARP_parseFromRXBuffer@arp(32), 
 15205 ;;  b               2    2[BANK0 ] PTR struct ipv4_address
 15206 ;;		 -> ARP_checkForEntry@ip(4), ARP_parseFromRXBuffer@arp(32), 
 15207 ;; Auto vars:     Size  Location     Type
 15208 ;;  i               1    6[BANK0 ] unsigned char 
 15209 ;; Return value:  Size  Location     Type
 15210 ;;		None               void
 15211 ;; Registers used:
 15212 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15213 ;; Tracked objects:
 15214 ;;		On entry : 0/0
 15215 ;;		On exit  : 0/0
 15216 ;;		Unchanged: 0/0
 15217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15218 ;;      Params:         0       4       0       0       0       0       0       0       0
 15219 ;;      Locals:         0       1       0       0       0       0       0       0       0
 15220 ;;      Temps:          0       2       0       0       0       0       0       0       0
 15221 ;;      Totals:         0       7       0       0       0       0       0       0       0
 15222 ;;Total ram usage:        7 bytes
 15223 ;; Hardware stack levels used:    1
 15224 ;; Hardware stack levels required when called:    4
 15225 ;; This function calls:
 15226 ;;		Nothing
 15227 ;; This function is called by:
 15228 ;;		_ARP_parseFromRXBuffer
 15229 ;;		_ARP_checkForEntry
 15230 ;; This function uses a non-reentrant model
 15231 ;;
 15232                           
 15233                           	psect	text55
 15234  004132                     __ptext55:
 15235                           	opt stack 0
 15236  004132                     _ipv4_cmp:
 15237                           	opt stack 23
 15238                           
 15239                           ;ipv4.c: 171: for (uint8_t i = 0; i < 4; i++) {
 15240                           
 15241                           ; BSR set to: 0
 15242                           ;incstack = 0
 15243  004132  0E00               	movlw	0
 15244  004134  0100               	movlb	0	; () banked
 15245  004136  6F66               	movwf	ipv4_cmp@i& (0+255),b
 15246  004138                     l7502:
 15247                           
 15248                           ; BSR set to: 0
 15249  004138  0E03               	movlw	3
 15250  00413A  6566               	cpfsgt	ipv4_cmp@i& (0+255),b
 15251  00413C  D001               	goto	l1006
 15252  00413E  D018               	goto	u8850
 15253  004140                     l1006:
 15254                           
 15255                           ; BSR set to: 0
 15256                           ;ipv4.c: 172: if (a->address[i] != b->address[i])
 15257                           
 15258                           ; BSR set to: 0
 15259  004140  5166               	movf	ipv4_cmp@i& (0+255),w,b
 15260  004142  0D01               	mullw	1
 15261  004144  50F3               	movf	prodl,w,c
 15262  004146  2562               	addwf	ipv4_cmp@b& (0+255),w,b
 15263  004148  6ED9               	movwf	fsr2l,c
 15264  00414A  50F4               	movf	prodh,w,c
 15265  00414C  2163               	addwfc	(ipv4_cmp@b+1)& (0+255),w,b
 15266  00414E  6EDA               	movwf	fsr2h,c
 15267  004150  5166               	movf	ipv4_cmp@i& (0+255),w,b
 15268  004152  0D01               	mullw	1
 15269  004154  50F3               	movf	prodl,w,c
 15270  004156  2560               	addwf	ipv4_cmp@a& (0+255),w,b
 15271  004158  6EE1               	movwf	fsr1l,c
 15272  00415A  50F4               	movf	prodh,w,c
 15273  00415C  2161               	addwfc	(ipv4_cmp@a+1)& (0+255),w,b
 15274  00415E  6EE2               	movwf	fsr1h,c
 15275  004160  50DE               	movf	postinc2,w,c
 15276  004162  18E6               	xorwf	postinc1,w,c
 15277  004164  B4D8               	btfsc	status,2,c
 15278  004166  D002               	goto	l1008
 15279                           
 15280                           ; BSR set to: 0
 15281                           ;ipv4.c: 173: return 0;
 15282  004168  90D8               	bcf	status,0,c
 15283                           
 15284                           ; BSR set to: 0
 15285  00416A  0012               	return	
 15286  00416C                     l1008:
 15287                           
 15288                           ; BSR set to: 0
 15289                           
 15290                           ; BSR set to: 0
 15291  00416C  2B66               	incf	ipv4_cmp@i& (0+255),f,b
 15292  00416E  D7E4               	goto	l7502
 15293  004170                     u8850:
 15294                           
 15295                           ; BSR set to: 0
 15296                           ;ipv4.c: 174: }
 15297                           ;ipv4.c: 175: return 1;
 15298                           
 15299                           ; BSR set to: 0
 15300  004170  80D8               	bsf	status,0,c
 15301  004172  0012               	return	
 15302  004174                     __end_of_ipv4_cmp:
 15303                           	opt stack 0
 15304                           tblptru	equ	0xFF8
 15305                           tblptrh	equ	0xFF7
 15306                           tblptrl	equ	0xFF6
 15307                           tablat	equ	0xFF5
 15308                           prodh	equ	0xFF4
 15309                           prodl	equ	0xFF3
 15310                           intcon	equ	0xFF2
 15311                           intcon3	equ	0xFF0
 15312                           postinc0	equ	0xFEE
 15313                           plusw0	equ	0xFEB
 15314                           fsr0h	equ	0xFEA
 15315                           fsr0l	equ	0xFE9
 15316                           wreg	equ	0xFE8
 15317                           indf1	equ	0xFE7
 15318                           postinc1	equ	0xFE6
 15319                           postdec1	equ	0xFE5
 15320                           plusw1	equ	0xFE3
 15321                           fsr1h	equ	0xFE2
 15322                           fsr1l	equ	0xFE1
 15323                           indf2	equ	0xFDF
 15324                           postinc2	equ	0xFDE
 15325                           postdec2	equ	0xFDD
 15326                           plusw2	equ	0xFDB
 15327                           fsr2h	equ	0xFDA
 15328                           fsr2l	equ	0xFD9
 15329                           status	equ	0xFD8
 15330                           
 15331 ;; *************** function _ethernetController_streamFromRXBuffer *****************
 15332 ;; Defined at:
 15333 ;;		line 343 in file "src/enc424j600/ENC424J600.c"
 15334 ;; Parameters:    Size  Location     Type
 15335 ;;  startEnd        1    wreg     unsigned char 
 15336 ;;  startAddress    2   18[BANK0 ] unsigned int 
 15337 ;; Auto vars:     Size  Location     Type
 15338 ;;  startEnd        1   20[BANK0 ] unsigned char 
 15339 ;;  temp            1   22[BANK0 ] unsigned char 
 15340 ;;  opcode          1   21[BANK0 ] unsigned char 
 15341 ;; Return value:  Size  Location     Type
 15342 ;;                  1    wreg      unsigned char 
 15343 ;; Registers used:
 15344 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15345 ;; Tracked objects:
 15346 ;;		On entry : 0/0
 15347 ;;		On exit  : 0/0
 15348 ;;		Unchanged: 0/0
 15349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15350 ;;      Params:         0       2       0       0       0       0       0       0       0
 15351 ;;      Locals:         0       3       0       0       0       0       0       0       0
 15352 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15353 ;;      Totals:         0       5       0       0       0       0       0       0       0
 15354 ;;Total ram usage:        5 bytes
 15355 ;; Hardware stack levels used:    1
 15356 ;; Hardware stack levels required when called:    8
 15357 ;; This function calls:
 15358 ;;		_ENC424J600_readSPI
 15359 ;;		_ENC424J600_setERXDATAReadPointer
 15360 ;;		_ENC424J600_setRXTailPointer
 15361 ;;		_ENC424J600_writeSPI
 15362 ;;		_ENC424J600_writeSingleByte
 15363 ;;		_ethernetController_getNextPacketPointer
 15364 ;; This function is called by:
 15365 ;;		_ARP_parseFromRXBuffer
 15366 ;; This function uses a non-reentrant model
 15367 ;;
 15368                           
 15369                           	psect	text56
 15370  00342C                     __ptext56:
 15371                           	opt stack 0
 15372  00342C                     _ethernetController_streamFromRXBuffer:
 15373                           	opt stack 18
 15374                           
 15375                           ; BSR set to: 0
 15376                           ;incstack = 0
 15377                           ;ethernetController_streamFromRXBuffer@startEnd stored from wreg
 15378  00342C  0100               	movlb	0	; () banked
 15379  00342E  6F74               	movwf	ethernetController_streamFromRXBuffer@startEnd& (0+255),b
 15380                           
 15381                           ;ENC424J600.c: 344: uint8_t temp;
 15382                           ;ENC424J600.c: 345: uint8_t opcode;
 15383                           ;ENC424J600.c: 346: switch (startEnd) {
 15384  003430  D03C               	goto	l163
 15385  003432                     
 15386                           ;ENC424J600.c: 348: ENC424J600_setERXDATAReadPointer(startAddress);
 15387  003432  C072  F06A         	movff	ethernetController_streamFromRXBuffer@startAddress,ENC424J600_setERXDATAReadPoint
      +                          er@addr
 15388  003436  C073  F06B         	movff	ethernetController_streamFromRXBuffer@startAddress+1,ENC424J600_setERXDATAReadPoi
      +                          nter@addr+1
 15389  00343A  ECF6  F020         	call	_ENC424J600_setERXDATAReadPointer	;wreg free
 15390                           
 15391                           ;ENC424J600.c: 349: opcode = 0x2C;
 15392  00343E  0E2C               	movlw	44
 15393  003440  0100               	movlb	0	; () banked
 15394  003442  6F75               	movwf	ethernetController_streamFromRXBuffer@opcode& (0+255),b
 15395                           
 15396                           ; BSR set to: 0
 15397                           ;ENC424J600.c: 350: PORTBbits.RB4=0;
 15398  003444  9881               	bcf	3969,4,c	;volatile
 15399                           
 15400                           ; BSR set to: 0
 15401                           ;ENC424J600.c: 351: ENC424J600_writeSPI(&opcode);
 15402  003446  0E75               	movlw	low ethernetController_streamFromRXBuffer@opcode
 15403  003448  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 15404  00344A  0E00               	movlw	high ethernetController_streamFromRXBuffer@opcode
 15405  00344C  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 15406  00344E  ECB5  F01E         	call	_ENC424J600_writeSPI	;wreg free
 15407                           
 15408                           ;ENC424J600.c: 352: return 0;
 15409  003452  0E00               	movlw	0
 15410  003454  0012               	return	
 15411  003456                     
 15412                           ;ENC424J600.c: 354: ENC424J600_readSPI(&temp);
 15413  003456  0E76               	movlw	low ethernetController_streamFromRXBuffer@temp
 15414  003458  0100               	movlb	0	; () banked
 15415  00345A  6F60               	movwf	ENC424J600_readSPI@data& (0+255),b
 15416  00345C  0E00               	movlw	high ethernetController_streamFromRXBuffer@temp
 15417  00345E  6F61               	movwf	(ENC424J600_readSPI@data+1)& (0+255),b
 15418  003460  ECE5  F01D         	call	_ENC424J600_readSPI	;wreg free
 15419                           
 15420                           ;ENC424J600.c: 355: return temp;
 15421  003464  0100               	movlb	0	; () banked
 15422  003466  5176               	movf	ethernetController_streamFromRXBuffer@temp& (0+255),w,b
 15423                           
 15424                           ; BSR set to: 0
 15425  003468  0012               	return	
 15426  00346A                     l167:
 15427                           
 15428                           ; BSR set to: 0
 15429                           ;ENC424J600.c: 357: PORTBbits.RB4=1;
 15430  00346A  8881               	bsf	3969,4,c	;volatile
 15431                           
 15432                           ; BSR set to: 0
 15433                           ;ENC424J600.c: 359: if (ethernetController_getNextPacketPointer() == 0x3000) {
 15434  00346C  EC58  F023         	call	_ethernetController_getNextPacketPointer	;wreg free
 15435  003470  0E30               	movlw	48
 15436  003472  0100               	movlb	0	; () banked
 15437  003474  1963               	xorwf	(?_ethernetController_getNextPacketPointer+1)& (0+255),w,b
 15438  003476  1162               	iorwf	?_ethernetController_getNextPacketPointer& (0+255),w,b
 15439  003478  A4D8               	btfss	status,2,c
 15440  00347A  D007               	goto	l168
 15441                           
 15442                           ; BSR set to: 0
 15443                           ;ENC424J600.c: 360: ENC424J600_setRXTailPointer(0x55FE);
 15444  00347C  0E55               	movlw	85
 15445  00347E  6F6F               	movwf	(ENC424J600_setRXTailPointer@addr+1)& (0+255),b
 15446  003480  0EFE               	movlw	254
 15447  003482  6F6E               	movwf	ENC424J600_setRXTailPointer@addr& (0+255),b
 15448  003484  ECF3  F021         	call	_ENC424J600_setRXTailPointer	;wreg free
 15449                           
 15450                           ;ENC424J600.c: 361: } else {
 15451  003488  D00B               	goto	l169
 15452  00348A                     l168:
 15453                           
 15454                           ;ENC424J600.c: 362: ENC424J600_setRXTailPointer(ethernetController_getNextPacketPointer(
      +                          ) - 2);
 15455  00348A  EC58  F023         	call	_ethernetController_getNextPacketPointer	;wreg free
 15456  00348E  0EFE               	movlw	254
 15457  003490  0100               	movlb	0	; () banked
 15458  003492  2562               	addwf	?_ethernetController_getNextPacketPointer& (0+255),w,b
 15459  003494  6F6E               	movwf	ENC424J600_setRXTailPointer@addr& (0+255),b
 15460  003496  0EFF               	movlw	255
 15461  003498  2163               	addwfc	(?_ethernetController_getNextPacketPointer+1)& (0+255),w,b
 15462  00349A  6F6F               	movwf	(ENC424J600_setRXTailPointer@addr+1)& (0+255),b
 15463  00349C  ECF3  F021         	call	_ENC424J600_setRXTailPointer	;wreg free
 15464  0034A0                     l169:
 15465                           
 15466                           ;ENC424J600.c: 363: }
 15467                           ;ENC424J600.c: 366: ENC424J600_writeSingleByte(0b11001100);
 15468  0034A0  0ECC               	movlw	204
 15469  0034A2  EC29  F023         	call	_ENC424J600_writeSingleByte
 15470                           
 15471                           ;ENC424J600.c: 367: return 0;
 15472  0034A6  0E00               	movlw	0
 15473  0034A8  0012               	return	
 15474  0034AA                     l163:
 15475  0034AA  0100               	movlb	0	; () banked
 15476  0034AC  5174               	movf	ethernetController_streamFromRXBuffer@startEnd& (0+255),w,b
 15477                           
 15478                           ; Switch size 1, requested type "space"
 15479                           ; Number of cases is 3, Range of values is 0 to 2
 15480                           ; switch strategies available:
 15481                           ; Name         Instructions Cycles
 15482                           ; simple_byte           10     6 (average)
 15483                           ;	Chosen strategy is simple_byte
 15484  0034AE  0A00               	xorlw	0	; case 0
 15485  0034B0  B4D8               	btfsc	status,2,c
 15486  0034B2  D7BF               	goto	l164
 15487  0034B4  0A01               	xorlw	1	; case 1
 15488  0034B6  B4D8               	btfsc	status,2,c
 15489  0034B8  D7CE               	goto	l166
 15490  0034BA  0A03               	xorlw	3	; case 2
 15491  0034BC  B4D8               	btfsc	status,2,c
 15492  0034BE  D7D5               	goto	l167
 15493                           
 15494                           ;ENC424J600.c: 369: return 0;
 15495                           
 15496                           ; BSR set to: 0
 15497  0034C0  0E00               	movlw	0
 15498  0034C2  0012               	return	
 15499  0034C4                     __end_of_ethernetController_streamFromRXBuffer:
 15500                           	opt stack 0
 15501                           tblptru	equ	0xFF8
 15502                           tblptrh	equ	0xFF7
 15503                           tblptrl	equ	0xFF6
 15504                           tablat	equ	0xFF5
 15505                           prodh	equ	0xFF4
 15506                           prodl	equ	0xFF3
 15507                           intcon	equ	0xFF2
 15508                           intcon3	equ	0xFF0
 15509                           postinc0	equ	0xFEE
 15510                           plusw0	equ	0xFEB
 15511                           fsr0h	equ	0xFEA
 15512                           fsr0l	equ	0xFE9
 15513                           wreg	equ	0xFE8
 15514                           indf1	equ	0xFE7
 15515                           postinc1	equ	0xFE6
 15516                           postdec1	equ	0xFE5
 15517                           plusw1	equ	0xFE3
 15518                           fsr1h	equ	0xFE2
 15519                           fsr1l	equ	0xFE1
 15520                           indf2	equ	0xFDF
 15521                           postinc2	equ	0xFDE
 15522                           postdec2	equ	0xFDD
 15523                           plusw2	equ	0xFDB
 15524                           fsr2h	equ	0xFDA
 15525                           fsr2l	equ	0xFD9
 15526                           status	equ	0xFD8
 15527                           
 15528 ;; *************** function _ethernetController_getNextPacketPointer *****************
 15529 ;; Defined at:
 15530 ;;		line 491 in file "src/enc424j600/ENC424J600.c"
 15531 ;; Parameters:    Size  Location     Type
 15532 ;;		None
 15533 ;; Auto vars:     Size  Location     Type
 15534 ;;		None
 15535 ;; Return value:  Size  Location     Type
 15536 ;;                  2    2[BANK0 ] unsigned int 
 15537 ;; Registers used:
 15538 ;;		cstack
 15539 ;; Tracked objects:
 15540 ;;		On entry : 0/0
 15541 ;;		On exit  : 0/0
 15542 ;;		Unchanged: 0/0
 15543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15544 ;;      Params:         0       2       0       0       0       0       0       0       0
 15545 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15546 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15547 ;;      Totals:         0       2       0       0       0       0       0       0       0
 15548 ;;Total ram usage:        2 bytes
 15549 ;; Hardware stack levels used:    1
 15550 ;; Hardware stack levels required when called:    5
 15551 ;; This function calls:
 15552 ;;		_ENC424J600_getNextPacketPointer
 15553 ;; This function is called by:
 15554 ;;		_ethernetController_streamFromRXBuffer
 15555 ;;		_ethernetController_dropPacket
 15556 ;;		_ethernet_rxGetNewFrame
 15557 ;; This function uses a non-reentrant model
 15558 ;;
 15559                           
 15560                           	psect	text57
 15561  0046B0                     __ptext57:
 15562                           	opt stack 0
 15563  0046B0                     _ethernetController_getNextPacketPointer:
 15564                           	opt stack 21
 15565                           
 15566                           ;ENC424J600.c: 492: return ENC424J600_getNextPacketPointer();
 15567                           
 15568                           ;incstack = 0
 15569  0046B0  EC66  F023         	call	_ENC424J600_getNextPacketPointer	;wreg free
 15570  0046B4  C060  F062         	movff	?_ENC424J600_getNextPacketPointer,?_ethernetController_getNextPacketPointer
 15571  0046B8  C061  F063         	movff	?_ENC424J600_getNextPacketPointer+1,?_ethernetController_getNextPacketPointer+1
 15572  0046BC  0012               	return	
 15573  0046BE                     __end_of_ethernetController_getNextPacketPointer:
 15574                           	opt stack 0
 15575                           tblptru	equ	0xFF8
 15576                           tblptrh	equ	0xFF7
 15577                           tblptrl	equ	0xFF6
 15578                           tablat	equ	0xFF5
 15579                           prodh	equ	0xFF4
 15580                           prodl	equ	0xFF3
 15581                           intcon	equ	0xFF2
 15582                           intcon3	equ	0xFF0
 15583                           postinc0	equ	0xFEE
 15584                           plusw0	equ	0xFEB
 15585                           fsr0h	equ	0xFEA
 15586                           fsr0l	equ	0xFE9
 15587                           wreg	equ	0xFE8
 15588                           indf1	equ	0xFE7
 15589                           postinc1	equ	0xFE6
 15590                           postdec1	equ	0xFE5
 15591                           plusw1	equ	0xFE3
 15592                           fsr1h	equ	0xFE2
 15593                           fsr1l	equ	0xFE1
 15594                           indf2	equ	0xFDF
 15595                           postinc2	equ	0xFDE
 15596                           postdec2	equ	0xFDD
 15597                           plusw2	equ	0xFDB
 15598                           fsr2h	equ	0xFDA
 15599                           fsr2l	equ	0xFD9
 15600                           status	equ	0xFD8
 15601                           
 15602 ;; *************** function _ENC424J600_getNextPacketPointer *****************
 15603 ;; Defined at:
 15604 ;;		line 566 in file "src/enc424j600/ENC424J600.c"
 15605 ;; Parameters:    Size  Location     Type
 15606 ;;		None
 15607 ;; Auto vars:     Size  Location     Type
 15608 ;;		None
 15609 ;; Return value:  Size  Location     Type
 15610 ;;                  2    0[BANK0 ] unsigned int 
 15611 ;; Registers used:
 15612 ;;		None
 15613 ;; Tracked objects:
 15614 ;;		On entry : 0/0
 15615 ;;		On exit  : 0/0
 15616 ;;		Unchanged: 0/0
 15617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15618 ;;      Params:         0       2       0       0       0       0       0       0       0
 15619 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15620 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15621 ;;      Totals:         0       2       0       0       0       0       0       0       0
 15622 ;;Total ram usage:        2 bytes
 15623 ;; Hardware stack levels used:    1
 15624 ;; Hardware stack levels required when called:    4
 15625 ;; This function calls:
 15626 ;;		Nothing
 15627 ;; This function is called by:
 15628 ;;		_ethernetController_updateNextPacketPointer
 15629 ;;		_ethernetController_getNextPacketPointer
 15630 ;; This function uses a non-reentrant model
 15631 ;;
 15632                           
 15633                           	psect	text58
 15634  0046CC                     __ptext58:
 15635                           	opt stack 0
 15636  0046CC                     _ENC424J600_getNextPacketPointer:
 15637                           	opt stack 21
 15638                           
 15639                           ;ENC424J600.c: 567: return nextPacketPointer;
 15640                           
 15641                           ;incstack = 0
 15642  0046CC  C047  F060         	movff	_nextPacketPointer,?_ENC424J600_getNextPacketPointer
 15643  0046D0  C048  F061         	movff	_nextPacketPointer+1,?_ENC424J600_getNextPacketPointer+1
 15644  0046D4  0012               	return		;funcret
 15645  0046D6                     __end_of_ENC424J600_getNextPacketPointer:
 15646                           	opt stack 0
 15647                           tblptru	equ	0xFF8
 15648                           tblptrh	equ	0xFF7
 15649                           tblptrl	equ	0xFF6
 15650                           tablat	equ	0xFF5
 15651                           prodh	equ	0xFF4
 15652                           prodl	equ	0xFF3
 15653                           intcon	equ	0xFF2
 15654                           intcon3	equ	0xFF0
 15655                           postinc0	equ	0xFEE
 15656                           plusw0	equ	0xFEB
 15657                           fsr0h	equ	0xFEA
 15658                           fsr0l	equ	0xFE9
 15659                           wreg	equ	0xFE8
 15660                           indf1	equ	0xFE7
 15661                           postinc1	equ	0xFE6
 15662                           postdec1	equ	0xFE5
 15663                           plusw1	equ	0xFE3
 15664                           fsr1h	equ	0xFE2
 15665                           fsr1l	equ	0xFE1
 15666                           indf2	equ	0xFDF
 15667                           postinc2	equ	0xFDE
 15668                           postdec2	equ	0xFDD
 15669                           plusw2	equ	0xFDB
 15670                           fsr2h	equ	0xFDA
 15671                           fsr2l	equ	0xFD9
 15672                           status	equ	0xFD8
 15673                           
 15674 ;; *************** function _ENC424J600_setERXDATAReadPointer *****************
 15675 ;; Defined at:
 15676 ;;		line 537 in file "src/enc424j600/ENC424J600.c"
 15677 ;; Parameters:    Size  Location     Type
 15678 ;;  addr            2   10[BANK0 ] unsigned int 
 15679 ;; Auto vars:     Size  Location     Type
 15680 ;;  highByte        1   14[BANK0 ] unsigned char 
 15681 ;;  lowByte         1   13[BANK0 ] unsigned char 
 15682 ;;  opcode          1   12[BANK0 ] unsigned char 
 15683 ;; Return value:  Size  Location     Type
 15684 ;;                  1    wreg      void 
 15685 ;; Registers used:
 15686 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15687 ;; Tracked objects:
 15688 ;;		On entry : 0/0
 15689 ;;		On exit  : 0/0
 15690 ;;		Unchanged: 0/0
 15691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15692 ;;      Params:         0       2       0       0       0       0       0       0       0
 15693 ;;      Locals:         0       3       0       0       0       0       0       0       0
 15694 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15695 ;;      Totals:         0       5       0       0       0       0       0       0       0
 15696 ;;Total ram usage:        5 bytes
 15697 ;; Hardware stack levels used:    1
 15698 ;; Hardware stack levels required when called:    6
 15699 ;; This function calls:
 15700 ;;		_ENC424J600_writeSPI
 15701 ;; This function is called by:
 15702 ;;		_ethernetController_getSourceMACAddress
 15703 ;;		_ethernetController_getEtherTypeField
 15704 ;;		_ethernetController_getRSV
 15705 ;;		_ethernetController_updateNextPacketPointer
 15706 ;;		_ethernetController_streamFromRXBuffer
 15707 ;;		_ethernetController_getDestinationMACAddress
 15708 ;; This function uses a non-reentrant model
 15709 ;;
 15710                           
 15711                           	psect	text59
 15712  0041EC                     __ptext59:
 15713                           	opt stack 0
 15714  0041EC                     _ENC424J600_setERXDATAReadPointer:
 15715                           	opt stack 19
 15716                           
 15717                           ;ENC424J600.c: 538: uint8_t opcode = 0x64;
 15718                           
 15719                           ;incstack = 0
 15720  0041EC  0E64               	movlw	100
 15721  0041EE  0100               	movlb	0	; () banked
 15722  0041F0  6F6C               	movwf	ENC424J600_setERXDATAReadPointer@opcode& (0+255),b
 15723                           
 15724                           ; BSR set to: 0
 15725                           ;ENC424J600.c: 539: uint8_t lowByte = addr & 0x00ff;
 15726  0041F2  C06A  F06D         	movff	ENC424J600_setERXDATAReadPointer@addr,ENC424J600_setERXDATAReadPointer@lowByte
 15727                           
 15728                           ;ENC424J600.c: 540: uint8_t highByte = (addr >> 8) & 0xff;
 15729  0041F6  516B               	movf	(ENC424J600_setERXDATAReadPointer@addr+1)& (0+255),w,b
 15730  0041F8  6F6E               	movwf	ENC424J600_setERXDATAReadPointer@highByte& (0+255),b
 15731                           
 15732                           ; BSR set to: 0
 15733                           ;ENC424J600.c: 541: PORTBbits.RB4=0;
 15734  0041FA  9881               	bcf	3969,4,c	;volatile
 15735                           
 15736                           ; BSR set to: 0
 15737                           ;ENC424J600.c: 542: ENC424J600_writeSPI(&opcode);
 15738  0041FC  0E6C               	movlw	low ENC424J600_setERXDATAReadPointer@opcode
 15739  0041FE  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 15740  004200  0E00               	movlw	high ENC424J600_setERXDATAReadPointer@opcode
 15741  004202  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 15742  004204  ECB5  F01E         	call	_ENC424J600_writeSPI	;wreg free
 15743                           
 15744                           ;ENC424J600.c: 543: ENC424J600_writeSPI(&lowByte);
 15745  004208  0E6D               	movlw	low ENC424J600_setERXDATAReadPointer@lowByte
 15746  00420A  0100               	movlb	0	; () banked
 15747  00420C  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 15748  00420E  0E00               	movlw	high ENC424J600_setERXDATAReadPointer@lowByte
 15749  004210  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 15750  004212  ECB5  F01E         	call	_ENC424J600_writeSPI	;wreg free
 15751                           
 15752                           ;ENC424J600.c: 544: ENC424J600_writeSPI(&highByte);
 15753  004216  0E6E               	movlw	low ENC424J600_setERXDATAReadPointer@highByte
 15754  004218  0100               	movlb	0	; () banked
 15755  00421A  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 15756  00421C  0E00               	movlw	high ENC424J600_setERXDATAReadPointer@highByte
 15757  00421E  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 15758  004220  ECB5  F01E         	call	_ENC424J600_writeSPI	;wreg free
 15759                           
 15760                           ;ENC424J600.c: 545: PORTBbits.RB4=1;
 15761  004224  8881               	bsf	3969,4,c	;volatile
 15762  004226  0012               	return		;funcret
 15763  004228                     __end_of_ENC424J600_setERXDATAReadPointer:
 15764                           	opt stack 0
 15765                           tblptru	equ	0xFF8
 15766                           tblptrh	equ	0xFF7
 15767                           tblptrl	equ	0xFF6
 15768                           tablat	equ	0xFF5
 15769                           prodh	equ	0xFF4
 15770                           prodl	equ	0xFF3
 15771                           intcon	equ	0xFF2
 15772                           intcon3	equ	0xFF0
 15773                           postinc0	equ	0xFEE
 15774                           plusw0	equ	0xFEB
 15775                           fsr0h	equ	0xFEA
 15776                           fsr0l	equ	0xFE9
 15777                           wreg	equ	0xFE8
 15778                           indf1	equ	0xFE7
 15779                           postinc1	equ	0xFE6
 15780                           postdec1	equ	0xFE5
 15781                           plusw1	equ	0xFE3
 15782                           fsr1h	equ	0xFE2
 15783                           fsr1l	equ	0xFE1
 15784                           indf2	equ	0xFDF
 15785                           postinc2	equ	0xFDE
 15786                           postdec2	equ	0xFDD
 15787                           plusw2	equ	0xFDB
 15788                           fsr2h	equ	0xFDA
 15789                           fsr2l	equ	0xFD9
 15790                           status	equ	0xFD8
 15791                           
 15792 ;; *************** function _ethernetController_updateLinkStatus *****************
 15793 ;; Defined at:
 15794 ;;		line 400 in file "src/enc424j600/ENC424J600.c"
 15795 ;; Parameters:    Size  Location     Type
 15796 ;;  state           2   32[BANK0 ] PTR struct ethernetConne
 15797 ;;		 -> stack(113), 
 15798 ;; Auto vars:     Size  Location     Type
 15799 ;;  temp16          1   35[BANK0 ] unsigned char 
 15800 ;;  temp            1   34[BANK0 ] unsigned char 
 15801 ;; Return value:  Size  Location     Type
 15802 ;;                  1    wreg      void 
 15803 ;; Registers used:
 15804 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15805 ;; Tracked objects:
 15806 ;;		On entry : 0/0
 15807 ;;		On exit  : 0/0
 15808 ;;		Unchanged: 0/0
 15809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15810 ;;      Params:         0       2       0       0       0       0       0       0       0
 15811 ;;      Locals:         0       2       0       0       0       0       0       0       0
 15812 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15813 ;;      Totals:         0       4       0       0       0       0       0       0       0
 15814 ;;Total ram usage:        4 bytes
 15815 ;; Hardware stack levels used:    1
 15816 ;; Hardware stack levels required when called:    8
 15817 ;; This function calls:
 15818 ;;		_ENC424J600_readControlRegisterUnbanked
 15819 ;;		_ENC424J600_readPHYRegister
 15820 ;; This function is called by:
 15821 ;;		_handleStackBackgroundTasks
 15822 ;; This function uses a non-reentrant model
 15823 ;;
 15824                           
 15825                           	psect	text60
 15826  003680                     __ptext60:
 15827                           	opt stack 0
 15828  003680                     _ethernetController_updateLinkStatus:
 15829                           	opt stack 21
 15830                           
 15831                           ;ENC424J600.c: 401: uint8_t temp, temp16;
 15832                           ;ENC424J600.c: 402: ENC424J600_readControlRegisterUnbanked(0x1B, &temp);
 15833                           
 15834                           ;incstack = 0
 15835  003680  0E82               	movlw	low ethernetController_updateLinkStatus@temp
 15836  003682  0100               	movlb	0	; () banked
 15837  003684  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 15838  003686  0E00               	movlw	high ethernetController_updateLinkStatus@temp
 15839  003688  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 15840  00368A  0E1B               	movlw	27
 15841  00368C  EC67  F021         	call	_ENC424J600_readControlRegisterUnbanked
 15842                           
 15843                           ;ENC424J600.c: 403: if (temp & 0x01) {
 15844  003690  0100               	movlb	0	; () banked
 15845  003692  A182               	btfss	ethernetController_updateLinkStatus@temp& (0+255),0,b
 15846  003694  D006               	goto	l181
 15847                           
 15848                           ; BSR set to: 0
 15849                           ;ENC424J600.c: 404: state->link = LINK_ESTABLISHED;
 15850  003696  C080  FFD9         	movff	ethernetController_updateLinkStatus@state,fsr2l
 15851  00369A  C081  FFDA         	movff	ethernetController_updateLinkStatus@state+1,fsr2h
 15852  00369E  0E01               	movlw	1
 15853  0036A0  D005               	goto	L3
 15854  0036A2                     l181:
 15855                           
 15856                           ; BSR set to: 0
 15857                           ;ENC424J600.c: 406: state->link = NO_LINK;
 15858                           
 15859                           ; BSR set to: 0
 15860  0036A2  C080  FFD9         	movff	ethernetController_updateLinkStatus@state,fsr2l
 15861  0036A6  C081  FFDA         	movff	ethernetController_updateLinkStatus@state+1,fsr2h
 15862  0036AA  0E00               	movlw	0
 15863  0036AC                     L3:
 15864  0036AC  6EDF               	movwf	indf2,c
 15865                           
 15866                           ; BSR set to: 0
 15867                           ;ENC424J600.c: 407: }
 15868                           ;ENC424J600.c: 409: ENC424J600_readPHYRegister(0x1F, &temp16);
 15869                           
 15870                           ; BSR set to: 0
 15871  0036AE  0E83               	movlw	low ethernetController_updateLinkStatus@temp16
 15872  0036B0  6F6E               	movwf	ENC424J600_readPHYRegister@data& (0+255),b
 15873  0036B2  0E00               	movlw	high ethernetController_updateLinkStatus@temp16
 15874  0036B4  6F6F               	movwf	(ENC424J600_readPHYRegister@data+1)& (0+255),b
 15875  0036B6  0E1F               	movlw	31
 15876  0036B8  EC4E  F015         	call	_ENC424J600_readPHYRegister
 15877                           
 15878                           ;ENC424J600.c: 411: if (temp16 & (1 << 3)) {
 15879  0036BC  0100               	movlb	0	; () banked
 15880  0036BE  A783               	btfss	ethernetController_updateLinkStatus@temp16& (0+255),3,b
 15881  0036C0  D008               	goto	l183
 15882                           
 15883                           ; BSR set to: 0
 15884                           ;ENC424J600.c: 412: state->speed = HUNDRED_MBIT;
 15885  0036C2  EE20 F001          	lfsr	2,1
 15886  0036C6  5180               	movf	ethernetController_updateLinkStatus@state& (0+255),w,b
 15887  0036C8  26D9               	addwf	fsr2l,f,c
 15888  0036CA  5181               	movf	(ethernetController_updateLinkStatus@state+1)& (0+255),w,b
 15889  0036CC  22DA               	addwfc	fsr2h,f,c
 15890  0036CE  0E01               	movlw	1
 15891  0036D0  D007               	goto	L4
 15892  0036D2                     l183:
 15893                           
 15894                           ; BSR set to: 0
 15895                           ;ENC424J600.c: 414: state->speed = TEN_MBIT;
 15896                           
 15897                           ; BSR set to: 0
 15898  0036D2  EE20 F001          	lfsr	2,1
 15899  0036D6  5180               	movf	ethernetController_updateLinkStatus@state& (0+255),w,b
 15900  0036D8  26D9               	addwf	fsr2l,f,c
 15901  0036DA  5181               	movf	(ethernetController_updateLinkStatus@state+1)& (0+255),w,b
 15902  0036DC  22DA               	addwfc	fsr2h,f,c
 15903  0036DE  0E00               	movlw	0
 15904  0036E0                     L4:
 15905  0036E0  6EDF               	movwf	indf2,c
 15906                           
 15907                           ; BSR set to: 0
 15908                           ;ENC424J600.c: 415: }
 15909                           ;ENC424J600.c: 417: if (temp16 & (1 << 4)) {
 15910                           
 15911                           ; BSR set to: 0
 15912  0036E2  A983               	btfss	ethernetController_updateLinkStatus@temp16& (0+255),4,b
 15913  0036E4  D009               	goto	l185
 15914                           
 15915                           ; BSR set to: 0
 15916                           ;ENC424J600.c: 418: state->duplex = FULL_DUPLEX;
 15917  0036E6  EE20 F002          	lfsr	2,2
 15918  0036EA  5180               	movf	ethernetController_updateLinkStatus@state& (0+255),w,b
 15919  0036EC  26D9               	addwf	fsr2l,f,c
 15920  0036EE  5181               	movf	(ethernetController_updateLinkStatus@state+1)& (0+255),w,b
 15921  0036F0  22DA               	addwfc	fsr2h,f,c
 15922  0036F2  0E01               	movlw	1
 15923  0036F4  6EDF               	movwf	indf2,c
 15924                           
 15925                           ;ENC424J600.c: 419: } else {
 15926  0036F6  0012               	return	
 15927  0036F8                     l185:
 15928                           
 15929                           ; BSR set to: 0
 15930                           ;ENC424J600.c: 420: state->duplex = HALF_DUPLEX;
 15931                           
 15932                           ; BSR set to: 0
 15933  0036F8  EE20 F002          	lfsr	2,2
 15934  0036FC  5180               	movf	ethernetController_updateLinkStatus@state& (0+255),w,b
 15935  0036FE  26D9               	addwf	fsr2l,f,c
 15936  003700  5181               	movf	(ethernetController_updateLinkStatus@state+1)& (0+255),w,b
 15937  003702  22DA               	addwfc	fsr2h,f,c
 15938  003704  0E00               	movlw	0
 15939  003706  6EDF               	movwf	indf2,c
 15940  003708  0012               	return	
 15941  00370A                     __end_of_ethernetController_updateLinkStatus:
 15942                           	opt stack 0
 15943                           tblptru	equ	0xFF8
 15944                           tblptrh	equ	0xFF7
 15945                           tblptrl	equ	0xFF6
 15946                           tablat	equ	0xFF5
 15947                           prodh	equ	0xFF4
 15948                           prodl	equ	0xFF3
 15949                           intcon	equ	0xFF2
 15950                           intcon3	equ	0xFF0
 15951                           postinc0	equ	0xFEE
 15952                           plusw0	equ	0xFEB
 15953                           fsr0h	equ	0xFEA
 15954                           fsr0l	equ	0xFE9
 15955                           wreg	equ	0xFE8
 15956                           indf1	equ	0xFE7
 15957                           postinc1	equ	0xFE6
 15958                           postdec1	equ	0xFE5
 15959                           plusw1	equ	0xFE3
 15960                           fsr1h	equ	0xFE2
 15961                           fsr1l	equ	0xFE1
 15962                           indf2	equ	0xFDF
 15963                           postinc2	equ	0xFDE
 15964                           postdec2	equ	0xFDD
 15965                           plusw2	equ	0xFDB
 15966                           fsr2h	equ	0xFDA
 15967                           fsr2l	equ	0xFD9
 15968                           status	equ	0xFD8
 15969                           
 15970 ;; *************** function _ENC424J600_readPHYRegister *****************
 15971 ;; Defined at:
 15972 ;;		line 655 in file "src/enc424j600/ENC424J600.c"
 15973 ;; Parameters:    Size  Location     Type
 15974 ;;  addr            1    wreg     unsigned char 
 15975 ;;  data            2   14[BANK0 ] PTR unsigned int 
 15976 ;;		 -> ethernetController_updateLinkStatus@temp16(1), 
 15977 ;; Auto vars:     Size  Location     Type
 15978 ;;  addr            1   22[BANK0 ] unsigned char 
 15979 ;;  timeoutCount    4   25[BANK0 ] unsigned long 
 15980 ;;  temp            1   31[BANK0 ] unsigned char 
 15981 ;;  highByte        1   30[BANK0 ] unsigned char 
 15982 ;;  lowByte         1   29[BANK0 ] unsigned char 
 15983 ;;  unusedBits      1   24[BANK0 ] unsigned char 
 15984 ;;  PHYaddress      1   23[BANK0 ] unsigned char 
 15985 ;; Return value:  Size  Location     Type
 15986 ;;                  1    wreg      void 
 15987 ;; Registers used:
 15988 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15989 ;; Tracked objects:
 15990 ;;		On entry : 0/0
 15991 ;;		On exit  : 0/0
 15992 ;;		Unchanged: 0/0
 15993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15994 ;;      Params:         0       2       0       0       0       0       0       0       0
 15995 ;;      Locals:         0      10       0       0       0       0       0       0       0
 15996 ;;      Temps:          0       6       0       0       0       0       0       0       0
 15997 ;;      Totals:         0      18       0       0       0       0       0       0       0
 15998 ;;Total ram usage:       18 bytes
 15999 ;; Hardware stack levels used:    1
 16000 ;; Hardware stack levels required when called:    7
 16001 ;; This function calls:
 16002 ;;		_ENC424J600_readControlRegisterUnbanked
 16003 ;;		_ENC424J600_writeControlRegisterUnbanked
 16004 ;; This function is called by:
 16005 ;;		_ethernetController_updateLinkStatus
 16006 ;; This function uses a non-reentrant model
 16007 ;;
 16008                           
 16009                           	psect	text61
 16010  002A9C                     __ptext61:
 16011                           	opt stack 0
 16012  002A9C                     _ENC424J600_readPHYRegister:
 16013                           	opt stack 21
 16014                           
 16015                           ; BSR set to: 0
 16016                           ;incstack = 0
 16017                           ;ENC424J600_readPHYRegister@addr stored from wreg
 16018  002A9C  0100               	movlb	0	; () banked
 16019  002A9E  6F76               	movwf	ENC424J600_readPHYRegister@addr& (0+255),b
 16020                           
 16021                           ;ENC424J600.c: 657: uint8_t PHYaddress = addr & 0x1F;
 16022  002AA0  0100               	movlb	0	; () banked
 16023  002AA2  5176               	movf	ENC424J600_readPHYRegister@addr& (0+255),w,b
 16024  002AA4  0B1F               	andlw	31
 16025  002AA6  6F77               	movwf	ENC424J600_readPHYRegister@PHYaddress& (0+255),b
 16026                           
 16027                           ; BSR set to: 0
 16028                           ;ENC424J600.c: 658: uint8_t unusedBits = 0x01;
 16029  002AA8  0E01               	movlw	1
 16030  002AAA  6F78               	movwf	ENC424J600_readPHYRegister@unusedBits& (0+255),b
 16031                           
 16032                           ; BSR set to: 0
 16033                           ;ENC424J600.c: 659: uint8_t temp;
 16034                           ;ENC424J600.c: 660: uint8_t lowByte;
 16035                           ;ENC424J600.c: 661: uint8_t highByte;
 16036                           ;ENC424J600.c: 662: uint32_t timeoutCounter = 0;
 16037  002AAC  0E00               	movlw	0
 16038  002AAE  6F79               	movwf	ENC424J600_readPHYRegister@timeoutCounter& (0+255),b
 16039  002AB0  0E00               	movlw	0
 16040  002AB2  6F7A               	movwf	(ENC424J600_readPHYRegister@timeoutCounter+1)& (0+255),b
 16041  002AB4  0E00               	movlw	0
 16042  002AB6  6F7B               	movwf	(ENC424J600_readPHYRegister@timeoutCounter+2)& (0+255),b
 16043  002AB8  0E00               	movlw	0
 16044  002ABA  6F7C               	movwf	(ENC424J600_readPHYRegister@timeoutCounter+3)& (0+255),b
 16045                           
 16046                           ; BSR set to: 0
 16047                           ;ENC424J600.c: 664: ENC424J600_writeControlRegisterUnbanked(0x14 + 0x40, &PHYaddress);
 16048  002ABC  0E77               	movlw	low ENC424J600_readPHYRegister@PHYaddress
 16049  002ABE  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 16050  002AC0  0E00               	movlw	high ENC424J600_readPHYRegister@PHYaddress
 16051  002AC2  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 16052  002AC4  0E54               	movlw	84
 16053  002AC6  EC4C  F021         	call	_ENC424J600_writeControlRegisterUnbanked
 16054                           
 16055                           ;ENC424J600.c: 665: ENC424J600_writeControlRegisterUnbanked(0x15 + 0x40, &unusedBits);
 16056  002ACA  0E78               	movlw	low ENC424J600_readPHYRegister@unusedBits
 16057  002ACC  0100               	movlb	0	; () banked
 16058  002ACE  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 16059  002AD0  0E00               	movlw	high ENC424J600_readPHYRegister@unusedBits
 16060  002AD2  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 16061  002AD4  0E55               	movlw	85
 16062  002AD6  EC4C  F021         	call	_ENC424J600_writeControlRegisterUnbanked
 16063                           
 16064                           ;ENC424J600.c: 668: ENC424J600_readControlRegisterUnbanked(0x12 + 0x40, &temp);
 16065  002ADA  0E7F               	movlw	low ENC424J600_readPHYRegister@temp
 16066  002ADC  0100               	movlb	0	; () banked
 16067  002ADE  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 16068  002AE0  0E00               	movlw	high ENC424J600_readPHYRegister@temp
 16069  002AE2  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 16070  002AE4  0E52               	movlw	82
 16071  002AE6  EC67  F021         	call	_ENC424J600_readControlRegisterUnbanked
 16072                           
 16073                           ;ENC424J600.c: 669: temp |= 0x01;
 16074  002AEA  0100               	movlb	0	; () banked
 16075  002AEC  817F               	bsf	ENC424J600_readPHYRegister@temp& (0+255),0,b
 16076                           
 16077                           ; BSR set to: 0
 16078                           ;ENC424J600.c: 670: ENC424J600_writeControlRegisterUnbanked(0x12 + 0x40, &temp);
 16079  002AEE  0E7F               	movlw	low ENC424J600_readPHYRegister@temp
 16080  002AF0  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 16081  002AF2  0E00               	movlw	high ENC424J600_readPHYRegister@temp
 16082  002AF4  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 16083  002AF6  0E52               	movlw	82
 16084  002AF8  EC4C  F021         	call	_ENC424J600_writeControlRegisterUnbanked
 16085                           
 16086                           ;ENC424J600.c: 672: _delay((unsigned long)((26)*(32000000UL/4000000.0)));
 16087  002AFC  0E45               	movlw	69
 16088  002AFE                     u11087:
 16089  002AFE  2EE8               	decfsz	wreg,f,c
 16090  002B00  D7FE               	bra	u11087
 16091  002B02  F000               	nop	
 16092  002B04                     
 16093                           ;ENC424J600.c: 675: ENC424J600_readControlRegisterUnbanked(0x0A + 0x60, &temp);
 16094  002B04  0E7F               	movlw	low ENC424J600_readPHYRegister@temp
 16095  002B06  0100               	movlb	0	; () banked
 16096  002B08  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 16097  002B0A  0E00               	movlw	high ENC424J600_readPHYRegister@temp
 16098  002B0C  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 16099  002B0E  0E6A               	movlw	106
 16100  002B10  EC67  F021         	call	_ENC424J600_readControlRegisterUnbanked
 16101                           
 16102                           ;ENC424J600.c: 676: timeoutCounter++;
 16103  002B14  0E01               	movlw	1
 16104  002B16  0100               	movlb	0	; () banked
 16105  002B18  2779               	addwf	ENC424J600_readPHYRegister@timeoutCounter& (0+255),f,b
 16106  002B1A  0E00               	movlw	0
 16107  002B1C  237A               	addwfc	(ENC424J600_readPHYRegister@timeoutCounter+1)& (0+255),f,b
 16108  002B1E  237B               	addwfc	(ENC424J600_readPHYRegister@timeoutCounter+2)& (0+255),f,b
 16109  002B20  237C               	addwfc	(ENC424J600_readPHYRegister@timeoutCounter+3)& (0+255),f,b
 16110                           
 16111                           ; BSR set to: 0
 16112                           ;ENC424J600.c: 677: } while ((temp & 0x01) && (timeoutCounter < 0xfff));
 16113  002B22  A17F               	btfss	ENC424J600_readPHYRegister@temp& (0+255),0,b
 16114  002B24  D008               	goto	u9780
 16115                           
 16116                           ; BSR set to: 0
 16117  002B26  517C               	movf	(ENC424J600_readPHYRegister@timeoutCounter+3)& (0+255),w,b
 16118  002B28  117B               	iorwf	(ENC424J600_readPHYRegister@timeoutCounter+2)& (0+255),w,b
 16119  002B2A  E105               	bnz	l7954
 16120  002B2C  2979               	incf	ENC424J600_readPHYRegister@timeoutCounter& (0+255),w,b
 16121  002B2E  0E0F               	movlw	15
 16122  002B30  597A               	subwfb	(ENC424J600_readPHYRegister@timeoutCounter+1)& (0+255),w,b
 16123  002B32  A0D8               	btfss	status,0,c
 16124  002B34  D7E7               	goto	l295
 16125  002B36                     u9780:
 16126  002B36                     l7954:
 16127                           
 16128                           ; BSR set to: 0
 16129                           ;ENC424J600.c: 678: if (timeoutCounter >= 0xfff)
 16130  002B36  517C               	movf	(ENC424J600_readPHYRegister@timeoutCounter+3)& (0+255),w,b
 16131  002B38  117B               	iorwf	(ENC424J600_readPHYRegister@timeoutCounter+2)& (0+255),w,b
 16132  002B3A  E140               	bnz	l300
 16133  002B3C  2979               	incf	ENC424J600_readPHYRegister@timeoutCounter& (0+255),w,b
 16134  002B3E  0E0F               	movlw	15
 16135  002B40  597A               	subwfb	(ENC424J600_readPHYRegister@timeoutCounter+1)& (0+255),w,b
 16136  002B42  B0D8               	btfsc	status,0,c
 16137  002B44  0012               	return	
 16138                           
 16139                           ; BSR set to: 0
 16140                           ;ENC424J600.c: 682: ENC424J600_readControlRegisterUnbanked(0x12 + 0x40, &temp);
 16141                           
 16142                           ; BSR set to: 0
 16143                           
 16144                           ; BSR set to: 0
 16145                           ;ENC424J600.c: 679: return;
 16146  002B46  0E7F               	movlw	low ENC424J600_readPHYRegister@temp
 16147  002B48  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 16148  002B4A  0E00               	movlw	high ENC424J600_readPHYRegister@temp
 16149  002B4C  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 16150  002B4E  0E52               	movlw	82
 16151  002B50  EC67  F021         	call	_ENC424J600_readControlRegisterUnbanked
 16152                           
 16153                           ;ENC424J600.c: 683: temp &= ~0x01;
 16154  002B54  0100               	movlb	0	; () banked
 16155  002B56  917F               	bcf	ENC424J600_readPHYRegister@temp& (0+255),0,b
 16156                           
 16157                           ; BSR set to: 0
 16158                           ;ENC424J600.c: 684: ENC424J600_writeControlRegisterUnbanked(0x12 + 0x40, &temp);
 16159  002B58  0E7F               	movlw	low ENC424J600_readPHYRegister@temp
 16160  002B5A  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 16161  002B5C  0E00               	movlw	high ENC424J600_readPHYRegister@temp
 16162  002B5E  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 16163  002B60  0E52               	movlw	82
 16164  002B62  EC4C  F021         	call	_ENC424J600_writeControlRegisterUnbanked
 16165                           
 16166                           ;ENC424J600.c: 687: ENC424J600_readControlRegisterUnbanked(0x08 + 0x60, &lowByte);
 16167  002B66  0E7D               	movlw	low ENC424J600_readPHYRegister@lowByte
 16168  002B68  0100               	movlb	0	; () banked
 16169  002B6A  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 16170  002B6C  0E00               	movlw	high ENC424J600_readPHYRegister@lowByte
 16171  002B6E  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 16172  002B70  0E68               	movlw	104
 16173  002B72  EC67  F021         	call	_ENC424J600_readControlRegisterUnbanked
 16174                           
 16175                           ;ENC424J600.c: 688: ENC424J600_readControlRegisterUnbanked(0x09 + 0x60, &highByte);
 16176  002B76  0E7E               	movlw	low ENC424J600_readPHYRegister@highByte
 16177  002B78  0100               	movlb	0	; () banked
 16178  002B7A  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 16179  002B7C  0E00               	movlw	high ENC424J600_readPHYRegister@highByte
 16180  002B7E  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 16181  002B80  0E69               	movlw	105
 16182  002B82  EC67  F021         	call	_ENC424J600_readControlRegisterUnbanked
 16183                           
 16184                           ;ENC424J600.c: 689: *data = (lowByte | ((highByte << 8)&0xff00));
 16185  002B86  0E00               	movlw	0
 16186  002B88  0100               	movlb	0	; () banked
 16187  002B8A  6F70               	movwf	??_ENC424J600_readPHYRegister& (0+255),b
 16188  002B8C  0EFF               	movlw	255
 16189  002B8E  6F71               	movwf	(??_ENC424J600_readPHYRegister+1)& (0+255),b
 16190  002B90  517E               	movf	ENC424J600_readPHYRegister@highByte& (0+255),w,b
 16191  002B92  6F73               	movwf	(??_ENC424J600_readPHYRegister+3)& (0+255),b
 16192  002B94  6B72               	clrf	(??_ENC424J600_readPHYRegister+2)& (0+255),b
 16193  002B96  5170               	movf	??_ENC424J600_readPHYRegister& (0+255),w,b
 16194  002B98  1772               	andwf	(??_ENC424J600_readPHYRegister+2)& (0+255),f,b
 16195  002B9A  5171               	movf	(??_ENC424J600_readPHYRegister+1)& (0+255),w,b
 16196  002B9C  1773               	andwf	(??_ENC424J600_readPHYRegister+3)& (0+255),f,b
 16197  002B9E  517D               	movf	ENC424J600_readPHYRegister@lowByte& (0+255),w,b
 16198  002BA0  6F74               	movwf	(??_ENC424J600_readPHYRegister+4)& (0+255),b
 16199  002BA2  6B75               	clrf	(??_ENC424J600_readPHYRegister+5)& (0+255),b
 16200  002BA4  5172               	movf	(??_ENC424J600_readPHYRegister+2)& (0+255),w,b
 16201  002BA6  1374               	iorwf	(??_ENC424J600_readPHYRegister+4)& (0+255),f,b
 16202  002BA8  5173               	movf	(??_ENC424J600_readPHYRegister+3)& (0+255),w,b
 16203  002BAA  1375               	iorwf	(??_ENC424J600_readPHYRegister+5)& (0+255),f,b
 16204  002BAC  C06E  FFD9         	movff	ENC424J600_readPHYRegister@data,fsr2l
 16205  002BB0  C06F  FFDA         	movff	ENC424J600_readPHYRegister@data+1,fsr2h
 16206  002BB4  C074  FFDE         	movff	??_ENC424J600_readPHYRegister+4,postinc2
 16207  002BB8  C075  FFDD         	movff	??_ENC424J600_readPHYRegister+5,postdec2
 16208  002BBC                     l300:
 16209                           
 16210                           ; BSR set to: 0
 16211  002BBC  0012               	return		;funcret
 16212  002BBE                     __end_of_ENC424J600_readPHYRegister:
 16213                           	opt stack 0
 16214                           tblptru	equ	0xFF8
 16215                           tblptrh	equ	0xFF7
 16216                           tblptrl	equ	0xFF6
 16217                           tablat	equ	0xFF5
 16218                           prodh	equ	0xFF4
 16219                           prodl	equ	0xFF3
 16220                           intcon	equ	0xFF2
 16221                           intcon3	equ	0xFF0
 16222                           postinc0	equ	0xFEE
 16223                           plusw0	equ	0xFEB
 16224                           fsr0h	equ	0xFEA
 16225                           fsr0l	equ	0xFE9
 16226                           wreg	equ	0xFE8
 16227                           indf1	equ	0xFE7
 16228                           postinc1	equ	0xFE6
 16229                           postdec1	equ	0xFE5
 16230                           plusw1	equ	0xFE3
 16231                           fsr1h	equ	0xFE2
 16232                           fsr1l	equ	0xFE1
 16233                           indf2	equ	0xFDF
 16234                           postinc2	equ	0xFDE
 16235                           postdec2	equ	0xFDD
 16236                           plusw2	equ	0xFDB
 16237                           fsr2h	equ	0xFDA
 16238                           fsr2l	equ	0xFD9
 16239                           status	equ	0xFD8
 16240                           
 16241 ;; *************** function _ethernetController_setLEDStatus *****************
 16242 ;; Defined at:
 16243 ;;		line 424 in file "src/enc424j600/ENC424J600.c"
 16244 ;; Parameters:    Size  Location     Type
 16245 ;;  LED             1    wreg     unsigned char 
 16246 ;;  status          1   14[BANK0 ] unsigned char 
 16247 ;; Auto vars:     Size  Location     Type
 16248 ;;  LED             1   15[BANK0 ] unsigned char 
 16249 ;;  data            1   16[BANK0 ] unsigned char 
 16250 ;; Return value:  Size  Location     Type
 16251 ;;                  1    wreg      void 
 16252 ;; Registers used:
 16253 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16254 ;; Tracked objects:
 16255 ;;		On entry : 0/0
 16256 ;;		On exit  : 0/0
 16257 ;;		Unchanged: 0/0
 16258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16259 ;;      Params:         0       1       0       0       0       0       0       0       0
 16260 ;;      Locals:         0       2       0       0       0       0       0       0       0
 16261 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16262 ;;      Totals:         0       3       0       0       0       0       0       0       0
 16263 ;;Total ram usage:        3 bytes
 16264 ;; Hardware stack levels used:    1
 16265 ;; Hardware stack levels required when called:    7
 16266 ;; This function calls:
 16267 ;;		_ENC424J600_readControlRegisterUnbanked
 16268 ;;		_ENC424J600_writeControlRegisterUnbanked
 16269 ;; This function is called by:
 16270 ;;		_handleStackBackgroundTasks
 16271 ;;		_main
 16272 ;; This function uses a non-reentrant model
 16273 ;;
 16274                           
 16275                           	psect	text62
 16276  003DCE                     __ptext62:
 16277                           	opt stack 0
 16278  003DCE                     _ethernetController_setLEDStatus:
 16279                           	opt stack 22
 16280                           
 16281                           ; BSR set to: 0
 16282                           ;incstack = 0
 16283                           ;ethernetController_setLEDStatus@LED stored from wreg
 16284  003DCE  0100               	movlb	0	; () banked
 16285  003DD0  6F6F               	movwf	ethernetController_setLEDStatus@LED& (0+255),b
 16286                           
 16287                           ;ENC424J600.c: 425: uint8_t data;
 16288                           ;ENC424J600.c: 426: ENC424J600_readControlRegisterUnbanked(0x15 + 0x60, &data);
 16289  003DD2  0E70               	movlw	low ethernetController_setLEDStatus@data
 16290  003DD4  0100               	movlb	0	; () banked
 16291  003DD6  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 16292  003DD8  0E00               	movlw	high ethernetController_setLEDStatus@data
 16293  003DDA  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 16294  003DDC  0E75               	movlw	117
 16295  003DDE  EC67  F021         	call	_ENC424J600_readControlRegisterUnbanked
 16296                           
 16297                           ;ENC424J600.c: 427: if (LED == LEDB) {
 16298  003DE2  0100               	movlb	0	; () banked
 16299  003DE4  056F               	decf	ethernetController_setLEDStatus@LED& (0+255),w,b
 16300  003DE6  A4D8               	btfss	status,2,c
 16301  003DE8  D00C               	goto	l190
 16302                           
 16303                           ; BSR set to: 0
 16304                           ;ENC424J600.c: 429: if (status == LED_ON) {
 16305  003DEA  516E               	movf	ethernetController_setLEDStatus@status& (0+255),w,b
 16306  003DEC  A4D8               	btfss	status,2,c
 16307  003DEE  D002               	goto	l191
 16308                           
 16309                           ; BSR set to: 0
 16310                           ;ENC424J600.c: 430: data &= ~0x0f;
 16311  003DF0  0EF0               	movlw	240
 16312  003DF2  D00E               	goto	L5
 16313  003DF4                     l191:
 16314                           
 16315                           ; BSR set to: 0
 16316                           
 16317                           ; BSR set to: 0
 16318  003DF4  056E               	decf	ethernetController_setLEDStatus@status& (0+255),w,b
 16319  003DF6  A4D8               	btfss	status,2,c
 16320  003DF8  D013               	goto	l198
 16321                           
 16322                           ; BSR set to: 0
 16323                           ;ENC424J600.c: 433: data &= ~0x0f;
 16324  003DFA  0EF0               	movlw	240
 16325  003DFC  1770               	andwf	ethernetController_setLEDStatus@data& (0+255),f,b
 16326                           
 16327                           ; BSR set to: 0
 16328                           ;ENC424J600.c: 434: data |= 0x01;
 16329  003DFE  8170               	bsf	ethernetController_setLEDStatus@data& (0+255),0,b
 16330                           
 16331                           ; BSR set to: 0
 16332                           ;ENC424J600.c: 435: }
 16333                           ;ENC424J600.c: 436: } else if (LED == LEDA) {
 16334                           
 16335                           ; BSR set to: 0
 16336  003E00  D00F               	goto	l198
 16337  003E02                     l190:
 16338                           
 16339                           ; BSR set to: 0
 16340                           
 16341                           ; BSR set to: 0
 16342  003E02  516F               	movf	ethernetController_setLEDStatus@LED& (0+255),w,b
 16343  003E04  A4D8               	btfss	status,2,c
 16344  003E06  D00C               	goto	l198
 16345                           
 16346                           ; BSR set to: 0
 16347                           ;ENC424J600.c: 438: if (status == LED_ON) {
 16348  003E08  516E               	movf	ethernetController_setLEDStatus@status& (0+255),w,b
 16349  003E0A  A4D8               	btfss	status,2,c
 16350  003E0C  D003               	goto	l196
 16351                           
 16352                           ; BSR set to: 0
 16353                           ;ENC424J600.c: 439: data &= ~(0x0f << 4);
 16354  003E0E  0E0F               	movlw	15
 16355  003E10                     L5:
 16356  003E10  1770               	andwf	ethernetController_setLEDStatus@data& (0+255),f,b
 16357                           
 16358                           ;ENC424J600.c: 440: } else if (status == LED_OFF) {
 16359  003E12  D006               	goto	l198
 16360  003E14                     l196:
 16361                           
 16362                           ; BSR set to: 0
 16363                           
 16364                           ; BSR set to: 0
 16365  003E14  056E               	decf	ethernetController_setLEDStatus@status& (0+255),w,b
 16366  003E16  A4D8               	btfss	status,2,c
 16367  003E18  D003               	goto	l198
 16368                           
 16369                           ; BSR set to: 0
 16370                           ;ENC424J600.c: 442: data &= ~(0x0f << 4);
 16371  003E1A  0E0F               	movlw	15
 16372  003E1C  1770               	andwf	ethernetController_setLEDStatus@data& (0+255),f,b
 16373                           
 16374                           ; BSR set to: 0
 16375                           ;ENC424J600.c: 443: data |= (0x01 << 4);
 16376  003E1E  8970               	bsf	ethernetController_setLEDStatus@data& (0+255),4,b
 16377  003E20                     l198:
 16378                           
 16379                           ; BSR set to: 0
 16380                           ;ENC424J600.c: 444: }
 16381                           ;ENC424J600.c: 445: }
 16382                           ;ENC424J600.c: 446: ENC424J600_writeControlRegisterUnbanked(0x15 + 0x60, &data);
 16383                           
 16384                           ; BSR set to: 0
 16385                           
 16386                           ; BSR set to: 0
 16387                           
 16388                           ; BSR set to: 0
 16389                           
 16390                           ; BSR set to: 0
 16391  003E20  0E70               	movlw	low ethernetController_setLEDStatus@data
 16392  003E22  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 16393  003E24  0E00               	movlw	high ethernetController_setLEDStatus@data
 16394  003E26  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 16395  003E28  0E75               	movlw	117
 16396  003E2A  EC4C  F021         	call	_ENC424J600_writeControlRegisterUnbanked
 16397  003E2E  0012               	return		;funcret
 16398  003E30                     __end_of_ethernetController_setLEDStatus:
 16399                           	opt stack 0
 16400                           tblptru	equ	0xFF8
 16401                           tblptrh	equ	0xFF7
 16402                           tblptrl	equ	0xFF6
 16403                           tablat	equ	0xFF5
 16404                           prodh	equ	0xFF4
 16405                           prodl	equ	0xFF3
 16406                           intcon	equ	0xFF2
 16407                           intcon3	equ	0xFF0
 16408                           postinc0	equ	0xFEE
 16409                           plusw0	equ	0xFEB
 16410                           fsr0h	equ	0xFEA
 16411                           fsr0l	equ	0xFE9
 16412                           wreg	equ	0xFE8
 16413                           indf1	equ	0xFE7
 16414                           postinc1	equ	0xFE6
 16415                           postdec1	equ	0xFE5
 16416                           plusw1	equ	0xFE3
 16417                           fsr1h	equ	0xFE2
 16418                           fsr1l	equ	0xFE1
 16419                           indf2	equ	0xFDF
 16420                           postinc2	equ	0xFDE
 16421                           postdec2	equ	0xFDD
 16422                           plusw2	equ	0xFDB
 16423                           fsr2h	equ	0xFDA
 16424                           fsr2l	equ	0xFD9
 16425                           status	equ	0xFD8
 16426                           
 16427 ;; *************** function _ethernetController_setLEDConfiguration *****************
 16428 ;; Defined at:
 16429 ;;		line 449 in file "src/enc424j600/ENC424J600.c"
 16430 ;; Parameters:    Size  Location     Type
 16431 ;;  LED             1    wreg     unsigned char 
 16432 ;;  conf            1   14[BANK0 ] unsigned char 
 16433 ;; Auto vars:     Size  Location     Type
 16434 ;;  LED             1   15[BANK0 ] unsigned char 
 16435 ;;  data            1   16[BANK0 ] unsigned char 
 16436 ;; Return value:  Size  Location     Type
 16437 ;;                  1    wreg      void 
 16438 ;; Registers used:
 16439 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16440 ;; Tracked objects:
 16441 ;;		On entry : 0/0
 16442 ;;		On exit  : 0/0
 16443 ;;		Unchanged: 0/0
 16444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16445 ;;      Params:         0       1       0       0       0       0       0       0       0
 16446 ;;      Locals:         0       2       0       0       0       0       0       0       0
 16447 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16448 ;;      Totals:         0       3       0       0       0       0       0       0       0
 16449 ;;Total ram usage:        3 bytes
 16450 ;; Hardware stack levels used:    1
 16451 ;; Hardware stack levels required when called:    7
 16452 ;; This function calls:
 16453 ;;		_ENC424J600_readControlRegisterUnbanked
 16454 ;;		_ENC424J600_writeControlRegisterUnbanked
 16455 ;; This function is called by:
 16456 ;;		_handleStackBackgroundTasks
 16457 ;; This function uses a non-reentrant model
 16458 ;;
 16459                           
 16460                           	psect	text63
 16461  0035F2                     __ptext63:
 16462                           	opt stack 0
 16463  0035F2                     _ethernetController_setLEDConfiguration:
 16464                           	opt stack 22
 16465                           
 16466                           ;incstack = 0
 16467                           ;ethernetController_setLEDConfiguration@LED stored from wreg
 16468  0035F2  0100               	movlb	0	; () banked
 16469  0035F4  6F6F               	movwf	ethernetController_setLEDConfiguration@LED& (0+255),b
 16470                           
 16471                           ;ENC424J600.c: 450: uint8_t data;
 16472                           ;ENC424J600.c: 451: ENC424J600_readControlRegisterUnbanked(0x15 + 0x60, &data);
 16473  0035F6  0E70               	movlw	low ethernetController_setLEDConfiguration@data
 16474  0035F8  0100               	movlb	0	; () banked
 16475  0035FA  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 16476  0035FC  0E00               	movlw	high ethernetController_setLEDConfiguration@data
 16477  0035FE  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 16478  003600  0E75               	movlw	117
 16479  003602  EC67  F021         	call	_ENC424J600_readControlRegisterUnbanked
 16480                           
 16481                           ;ENC424J600.c: 452: if (LED == LEDB) {
 16482  003606  0100               	movlb	0	; () banked
 16483  003608  056F               	decf	ethernetController_setLEDConfiguration@LED& (0+255),w,b
 16484  00360A  B4D8               	btfsc	status,2,c
 16485  00360C  D00B               	goto	l203
 16486  00360E  D015               	goto	l202
 16487  003610                     
 16488                           ; BSR set to: 0
 16489                           ;ENC424J600.c: 457: data &= ~0x0f;
 16490                           
 16491                           ; BSR set to: 0
 16492                           
 16493                           ;ENC424J600.c: 456: case LED_OFF:
 16494                           
 16495                           ; BSR set to: 0
 16496  003610  0EF0               	movlw	240
 16497  003612  1770               	andwf	ethernetController_setLEDConfiguration@data& (0+255),f,b
 16498                           
 16499                           ; BSR set to: 0
 16500                           ;ENC424J600.c: 458: data |= 0x01;
 16501  003614  8170               	bsf	ethernetController_setLEDConfiguration@data& (0+255),0,b
 16502                           
 16503                           ;ENC424J600.c: 459: break;
 16504  003616  D02C               	goto	l214
 16505  003618                     
 16506                           ; BSR set to: 0
 16507                           ;ENC424J600.c: 461: data &= ~0x0f;
 16508                           
 16509                           ; BSR set to: 0
 16510  003618  0EF0               	movlw	240
 16511  00361A  D018               	goto	L6
 16512  00361C                     
 16513                           ; BSR set to: 0
 16514                           ;ENC424J600.c: 464: data &= ~0x0f;
 16515                           
 16516                           ; BSR set to: 0
 16517  00361C  0EF0               	movlw	240
 16518  00361E  1770               	andwf	ethernetController_setLEDConfiguration@data& (0+255),f,b
 16519                           
 16520                           ;ENC424J600.c: 465: data |= 0x06;
 16521  003620  0E06               	movlw	6
 16522  003622  D019               	goto	L7
 16523  003624                     l203:
 16524                           
 16525                           ; BSR set to: 0
 16526                           
 16527                           ; BSR set to: 0
 16528  003624  516E               	movf	ethernetController_setLEDConfiguration@conf& (0+255),w,b
 16529                           
 16530                           ; Switch size 1, requested type "space"
 16531                           ; Number of cases is 3, Range of values is 0 to 2
 16532                           ; switch strategies available:
 16533                           ; Name         Instructions Cycles
 16534                           ; simple_byte           10     6 (average)
 16535                           ;	Chosen strategy is simple_byte
 16536  003626  0A00               	xorlw	0	; case 0
 16537  003628  B4D8               	btfsc	status,2,c
 16538  00362A  D7F6               	goto	l207
 16539  00362C  0A01               	xorlw	1	; case 1
 16540  00362E  B4D8               	btfsc	status,2,c
 16541  003630  D7EF               	goto	l204
 16542  003632  0A03               	xorlw	3	; case 2
 16543  003634  B4D8               	btfsc	status,2,c
 16544  003636  D7F2               	goto	l208
 16545  003638  D7EB               	goto	l204
 16546  00363A                     l202:
 16547                           
 16548                           ; BSR set to: 0
 16549                           
 16550                           ; BSR set to: 0
 16551  00363A  516F               	movf	ethernetController_setLEDConfiguration@LED& (0+255),w,b
 16552  00363C  B4D8               	btfsc	status,2,c
 16553  00363E  D00D               	goto	l211
 16554  003640  D017               	goto	l214
 16555  003642                     
 16556                           ; BSR set to: 0
 16557                           ;ENC424J600.c: 472: data &= ~(0x0f << 4);
 16558                           
 16559                           ; BSR set to: 0
 16560                           
 16561                           ;ENC424J600.c: 471: case LED_OFF:
 16562                           
 16563                           ; BSR set to: 0
 16564  003642  0E0F               	movlw	15
 16565  003644  1770               	andwf	ethernetController_setLEDConfiguration@data& (0+255),f,b
 16566                           
 16567                           ; BSR set to: 0
 16568                           ;ENC424J600.c: 473: data |= (0x01 << 4);
 16569  003646  8970               	bsf	ethernetController_setLEDConfiguration@data& (0+255),4,b
 16570                           
 16571                           ;ENC424J600.c: 474: break;
 16572  003648  D013               	goto	l214
 16573  00364A                     
 16574                           ; BSR set to: 0
 16575                           ;ENC424J600.c: 476: data &= ~(0x0f << 4);
 16576                           
 16577                           ; BSR set to: 0
 16578  00364A  0E0F               	movlw	15
 16579  00364C                     L6:
 16580  00364C  1770               	andwf	ethernetController_setLEDConfiguration@data& (0+255),f,b
 16581                           
 16582                           ;ENC424J600.c: 477: break;
 16583  00364E  D010               	goto	l214
 16584  003650                     
 16585                           ; BSR set to: 0
 16586                           ;ENC424J600.c: 479: data &= ~(0x0f << 4);
 16587                           
 16588                           ; BSR set to: 0
 16589  003650  0E0F               	movlw	15
 16590  003652  1770               	andwf	ethernetController_setLEDConfiguration@data& (0+255),f,b
 16591                           
 16592                           ;ENC424J600.c: 480: data |= (0x06 << 4);
 16593  003654  0E60               	movlw	96
 16594  003656                     L7:
 16595  003656  1370               	iorwf	ethernetController_setLEDConfiguration@data& (0+255),f,b
 16596                           
 16597                           ; BSR set to: 0
 16598                           ;ENC424J600.c: 482: }
 16599                           
 16600                           ;ENC424J600.c: 481: break;
 16601  003658  D00B               	goto	l214
 16602  00365A                     l211:
 16603                           
 16604                           ; BSR set to: 0
 16605                           
 16606                           ; BSR set to: 0
 16607  00365A  516E               	movf	ethernetController_setLEDConfiguration@conf& (0+255),w,b
 16608                           
 16609                           ; Switch size 1, requested type "space"
 16610                           ; Number of cases is 3, Range of values is 0 to 2
 16611                           ; switch strategies available:
 16612                           ; Name         Instructions Cycles
 16613                           ; simple_byte           10     6 (average)
 16614                           ;	Chosen strategy is simple_byte
 16615  00365C  0A00               	xorlw	0	; case 0
 16616  00365E  B4D8               	btfsc	status,2,c
 16617  003660  D7F4               	goto	l215
 16618  003662  0A01               	xorlw	1	; case 1
 16619  003664  B4D8               	btfsc	status,2,c
 16620  003666  D7ED               	goto	l212
 16621  003668  0A03               	xorlw	3	; case 2
 16622  00366A  B4D8               	btfsc	status,2,c
 16623  00366C  D7F1               	goto	l216
 16624  00366E  D7E9               	goto	l212
 16625  003670                     l214:
 16626                           
 16627                           ; BSR set to: 0
 16628                           ;ENC424J600.c: 483: }
 16629                           ;ENC424J600.c: 484: ENC424J600_writeControlRegisterUnbanked(0x15 + 0x60, &data);
 16630                           
 16631                           ; BSR set to: 0
 16632                           
 16633                           ; BSR set to: 0
 16634                           
 16635                           ; BSR set to: 0
 16636  003670  0E70               	movlw	low ethernetController_setLEDConfiguration@data
 16637  003672  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 16638  003674  0E00               	movlw	high ethernetController_setLEDConfiguration@data
 16639  003676  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 16640  003678  0E75               	movlw	117
 16641  00367A  EC4C  F021         	call	_ENC424J600_writeControlRegisterUnbanked
 16642  00367E  0012               	return		;funcret
 16643  003680                     __end_of_ethernetController_setLEDConfiguration:
 16644                           	opt stack 0
 16645                           tblptru	equ	0xFF8
 16646                           tblptrh	equ	0xFF7
 16647                           tblptrl	equ	0xFF6
 16648                           tablat	equ	0xFF5
 16649                           prodh	equ	0xFF4
 16650                           prodl	equ	0xFF3
 16651                           intcon	equ	0xFF2
 16652                           intcon3	equ	0xFF0
 16653                           postinc0	equ	0xFEE
 16654                           plusw0	equ	0xFEB
 16655                           fsr0h	equ	0xFEA
 16656                           fsr0l	equ	0xFE9
 16657                           wreg	equ	0xFE8
 16658                           indf1	equ	0xFE7
 16659                           postinc1	equ	0xFE6
 16660                           postdec1	equ	0xFE5
 16661                           plusw1	equ	0xFE3
 16662                           fsr1h	equ	0xFE2
 16663                           fsr1l	equ	0xFE1
 16664                           indf2	equ	0xFDF
 16665                           postinc2	equ	0xFDE
 16666                           postdec2	equ	0xFDD
 16667                           plusw2	equ	0xFDB
 16668                           fsr2h	equ	0xFDA
 16669                           fsr2l	equ	0xFD9
 16670                           status	equ	0xFD8
 16671                           
 16672 ;; *************** function _ethernetController_pollInterruptFlags *****************
 16673 ;; Defined at:
 16674 ;;		line 305 in file "src/enc424j600/ENC424J600.c"
 16675 ;; Parameters:    Size  Location     Type
 16676 ;;		None
 16677 ;; Auto vars:     Size  Location     Type
 16678 ;;  reg             2   29[BANK0 ] unsigned int 
 16679 ;;  flags           2   27[BANK0 ] struct interruptFlags
 16680 ;; Return value:  Size  Location     Type
 16681 ;;                  2   24[BANK0 ] struct interruptFlags
 16682 ;; Registers used:
 16683 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16684 ;; Tracked objects:
 16685 ;;		On entry : 0/0
 16686 ;;		On exit  : 0/0
 16687 ;;		Unchanged: 0/0
 16688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16689 ;;      Params:         0       2       0       0       0       0       0       0       0
 16690 ;;      Locals:         0       4       0       0       0       0       0       0       0
 16691 ;;      Temps:          0       1       0       0       0       0       0       0       0
 16692 ;;      Totals:         0       7       0       0       0       0       0       0       0
 16693 ;;Total ram usage:        7 bytes
 16694 ;; Hardware stack levels used:    1
 16695 ;; Hardware stack levels required when called:    8
 16696 ;; This function calls:
 16697 ;;		_ENC424J600_getInterruptFlags
 16698 ;; This function is called by:
 16699 ;;		_handleStackBackgroundTasks
 16700 ;; This function uses a non-reentrant model
 16701 ;;
 16702                           
 16703                           	psect	text64
 16704  002976                     __ptext64:
 16705                           	opt stack 0
 16706  002976                     _ethernetController_pollInterruptFlags:
 16707                           	opt stack 21
 16708                           
 16709                           ;ENC424J600.c: 306: interruptFlags_t flags;
 16710                           ;ENC424J600.c: 307: uint16_t reg = ENC424J600_getInterruptFlags();
 16711                           
 16712                           ;incstack = 0
 16713  002976  EC0E  F020         	call	_ENC424J600_getInterruptFlags	;wreg free
 16714  00297A  C06E  F07D         	movff	?_ENC424J600_getInterruptFlags,ethernetController_pollInterruptFlags@reg
 16715  00297E  C06F  F07E         	movff	?_ENC424J600_getInterruptFlags+1,ethernetController_pollInterruptFlags@reg+1
 16716                           
 16717                           ;ENC424J600.c: 308: flags.MODEXIF = (reg & (1 << 14)) != 0 ? 1 : 0;
 16718  002982  0100               	movlb	0	; () banked
 16719  002984  AD7E               	btfss	(ethernetController_pollInterruptFlags@reg+1)& (0+255),6,b
 16720  002986  D003               	goto	u10040
 16721  002988  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16722  00298A  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16723  00298C  D002               	goto	u10058
 16724  00298E                     u10040:
 16725  00298E  0100               	movlb	0	; () banked
 16726  002990  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16727  002992                     u10058:
 16728  002992  517B               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 16729  002994  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16730  002996  0BFE               	andlw	-2
 16731  002998  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16732  00299A  6F7B               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 16733                           
 16734                           ; BSR set to: 0
 16735                           ;ENC424J600.c: 309: flags.HASHIF = (reg & (1 << 13)) != 0 ? 1 : 0;
 16736  00299C  AB7E               	btfss	(ethernetController_pollInterruptFlags@reg+1)& (0+255),5,b
 16737  00299E  D003               	goto	u10060
 16738  0029A0  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16739  0029A2  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16740  0029A4  D002               	goto	u10078
 16741  0029A6                     u10060:
 16742  0029A6  0100               	movlb	0	; () banked
 16743  0029A8  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16744  0029AA                     u10078:
 16745  0029AA  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16746  0029AC  517B               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 16747  0029AE  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16748  0029B0  0BFD               	andlw	-3
 16749  0029B2  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16750  0029B4  6F7B               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 16751                           
 16752                           ; BSR set to: 0
 16753                           ;ENC424J600.c: 310: flags.AESIF = (reg & (1 << 12)) != 0 ? 1 : 0;
 16754  0029B6  A97E               	btfss	(ethernetController_pollInterruptFlags@reg+1)& (0+255),4,b
 16755  0029B8  D003               	goto	u10080
 16756  0029BA  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16757  0029BC  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16758  0029BE  D002               	goto	u10098
 16759  0029C0                     u10080:
 16760  0029C0  0100               	movlb	0	; () banked
 16761  0029C2  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16762  0029C4                     u10098:
 16763  0029C4  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16764  0029C6  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16765  0029C8  517B               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 16766  0029CA  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16767  0029CC  0BFB               	andlw	-5
 16768  0029CE  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16769  0029D0  6F7B               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 16770                           
 16771                           ; BSR set to: 0
 16772                           ;ENC424J600.c: 311: flags.LINKIF = (reg & (1 << 11)) != 0 ? 1 : 0;
 16773  0029D2  A77E               	btfss	(ethernetController_pollInterruptFlags@reg+1)& (0+255),3,b
 16774  0029D4  D003               	goto	u10100
 16775  0029D6  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16776  0029D8  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16777  0029DA  D002               	goto	u10118
 16778  0029DC                     u10100:
 16779  0029DC  0100               	movlb	0	; () banked
 16780  0029DE  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16781  0029E0                     u10118:
 16782  0029E0  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16783  0029E2  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16784  0029E4  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16785  0029E6  517B               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 16786  0029E8  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16787  0029EA  0BF7               	andlw	-9
 16788  0029EC  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16789  0029EE  6F7B               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 16790                           
 16791                           ; BSR set to: 0
 16792                           ;ENC424J600.c: 313: flags.PKTIF = (reg & (1 << 6)) != 0 ? 1 : 0;
 16793  0029F0  AD7D               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),6,b
 16794  0029F2  D003               	goto	u10120
 16795  0029F4  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16796  0029F6  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16797  0029F8  D002               	goto	u10138
 16798  0029FA                     u10120:
 16799  0029FA  0100               	movlb	0	; () banked
 16800  0029FC  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16801  0029FE                     u10138:
 16802  0029FE  3B7A               	swapf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16803  002A00  517B               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 16804  002A02  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16805  002A04  0BEF               	andlw	-17
 16806  002A06  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16807  002A08  6F7B               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 16808                           
 16809                           ; BSR set to: 0
 16810                           ;ENC424J600.c: 314: flags.DMAIF = (reg & (1 << 5)) != 0 ? 1 : 0;
 16811  002A0A  AB7D               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),5,b
 16812  002A0C  D003               	goto	u10140
 16813  002A0E  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16814  002A10  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16815  002A12  D002               	goto	u10158
 16816  002A14                     u10140:
 16817  002A14  0100               	movlb	0	; () banked
 16818  002A16  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16819  002A18                     u10158:
 16820  002A18  3B7A               	swapf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16821  002A1A  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16822  002A1C  517B               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 16823  002A1E  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16824  002A20  0BDF               	andlw	-33
 16825  002A22  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16826  002A24  6F7B               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 16827                           
 16828                           ; BSR set to: 0
 16829                           ;ENC424J600.c: 316: flags.TXIF = (reg & (1 << 3)) != 0 ? 1 : 0;
 16830  002A26  A77D               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),3,b
 16831  002A28  D003               	goto	u10160
 16832  002A2A  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16833  002A2C  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16834  002A2E  D002               	goto	u10178
 16835  002A30                     u10160:
 16836  002A30  0100               	movlb	0	; () banked
 16837  002A32  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16838  002A34                     u10178:
 16839  002A34  3B7A               	swapf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16840  002A36  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16841  002A38  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16842  002A3A  517B               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 16843  002A3C  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16844  002A3E  0BBF               	andlw	-65
 16845  002A40  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16846  002A42  6F7B               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 16847                           
 16848                           ; BSR set to: 0
 16849                           ;ENC424J600.c: 317: flags.TXABTIF = (reg & (1 << 2)) != 0 ? 1 : 0;
 16850  002A44  A57D               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),2,b
 16851  002A46  D003               	goto	u10180
 16852  002A48  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16853  002A4A  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16854  002A4C  D002               	goto	u10198
 16855  002A4E                     u10180:
 16856  002A4E  0100               	movlb	0	; () banked
 16857  002A50  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16858  002A52                     u10198:
 16859  002A52  337A               	rrcf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16860  002A54  337A               	rrcf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16861  002A56  517B               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 16862  002A58  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16863  002A5A  0B7F               	andlw	-129
 16864  002A5C  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16865  002A5E  6F7B               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 16866                           
 16867                           ; BSR set to: 0
 16868                           ;ENC424J600.c: 318: flags.RXABTIF = (reg & (1 << 1)) != 0 ? 1 : 0;
 16869  002A60  A37D               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),1,b
 16870  002A62  D003               	goto	u10200
 16871  002A64  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16872  002A66  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16873  002A68  D002               	goto	u10218
 16874  002A6A                     u10200:
 16875  002A6A  0100               	movlb	0	; () banked
 16876  002A6C  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16877  002A6E                     u10218:
 16878  002A6E  517C               	movf	(ethernetController_pollInterruptFlags@flags+1)& (0+255),w,b
 16879  002A70  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16880  002A72  0BFE               	andlw	-2
 16881  002A74  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16882  002A76  6F7C               	movwf	(ethernetController_pollInterruptFlags@flags+1)& (0+255),b
 16883                           
 16884                           ; BSR set to: 0
 16885                           ;ENC424J600.c: 319: flags.PCFULIF = (reg & (1 << 0)) != 0 ? 1 : 0;
 16886  002A78  A17D               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),0,b
 16887  002A7A  D003               	goto	u10220
 16888  002A7C  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16889  002A7E  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16890  002A80  D002               	goto	u10238
 16891  002A82                     u10220:
 16892  002A82  0100               	movlb	0	; () banked
 16893  002A84  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16894  002A86                     u10238:
 16895  002A86  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16896  002A88  517C               	movf	(ethernetController_pollInterruptFlags@flags+1)& (0+255),w,b
 16897  002A8A  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16898  002A8C  0BFD               	andlw	-3
 16899  002A8E  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16900  002A90  6F7C               	movwf	(ethernetController_pollInterruptFlags@flags+1)& (0+255),b
 16901                           
 16902                           ; BSR set to: 0
 16903                           ;ENC424J600.c: 320: return flags;
 16904  002A92  C07B  F078         	movff	ethernetController_pollInterruptFlags@flags,?_ethernetController_pollInterruptFla
      +                          gs
 16905  002A96  C07C  F079         	movff	ethernetController_pollInterruptFlags@flags+1,?_ethernetController_pollInterruptF
      +                          lags+1
 16906  002A9A  0012               	return	
 16907  002A9C                     __end_of_ethernetController_pollInterruptFlags:
 16908                           	opt stack 0
 16909                           tblptru	equ	0xFF8
 16910                           tblptrh	equ	0xFF7
 16911                           tblptrl	equ	0xFF6
 16912                           tablat	equ	0xFF5
 16913                           prodh	equ	0xFF4
 16914                           prodl	equ	0xFF3
 16915                           intcon	equ	0xFF2
 16916                           intcon3	equ	0xFF0
 16917                           postinc0	equ	0xFEE
 16918                           plusw0	equ	0xFEB
 16919                           fsr0h	equ	0xFEA
 16920                           fsr0l	equ	0xFE9
 16921                           wreg	equ	0xFE8
 16922                           indf1	equ	0xFE7
 16923                           postinc1	equ	0xFE6
 16924                           postdec1	equ	0xFE5
 16925                           plusw1	equ	0xFE3
 16926                           fsr1h	equ	0xFE2
 16927                           fsr1l	equ	0xFE1
 16928                           indf2	equ	0xFDF
 16929                           postinc2	equ	0xFDE
 16930                           postdec2	equ	0xFDD
 16931                           plusw2	equ	0xFDB
 16932                           fsr2h	equ	0xFDA
 16933                           fsr2l	equ	0xFD9
 16934                           status	equ	0xFD8
 16935                           
 16936 ;; *************** function _ENC424J600_getInterruptFlags *****************
 16937 ;; Defined at:
 16938 ;;		line 692 in file "src/enc424j600/ENC424J600.c"
 16939 ;; Parameters:    Size  Location     Type
 16940 ;;		None
 16941 ;; Auto vars:     Size  Location     Type
 16942 ;;  high            1   23[BANK0 ] unsigned char 
 16943 ;;  low             1   22[BANK0 ] unsigned char 
 16944 ;; Return value:  Size  Location     Type
 16945 ;;                  2   14[BANK0 ] unsigned int 
 16946 ;; Registers used:
 16947 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16948 ;; Tracked objects:
 16949 ;;		On entry : 0/0
 16950 ;;		On exit  : 0/0
 16951 ;;		Unchanged: 0/0
 16952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16953 ;;      Params:         0       2       0       0       0       0       0       0       0
 16954 ;;      Locals:         0       2       0       0       0       0       0       0       0
 16955 ;;      Temps:          0       6       0       0       0       0       0       0       0
 16956 ;;      Totals:         0      10       0       0       0       0       0       0       0
 16957 ;;Total ram usage:       10 bytes
 16958 ;; Hardware stack levels used:    1
 16959 ;; Hardware stack levels required when called:    7
 16960 ;; This function calls:
 16961 ;;		_ENC424J600_readControlRegisterUnbanked
 16962 ;; This function is called by:
 16963 ;;		_ethernetController_pollInterruptFlags
 16964 ;; This function uses a non-reentrant model
 16965 ;;
 16966                           
 16967                           	psect	text65
 16968  00401C                     __ptext65:
 16969                           	opt stack 0
 16970  00401C                     _ENC424J600_getInterruptFlags:
 16971                           	opt stack 21
 16972                           
 16973                           ;ENC424J600.c: 693: uint8_t low, high;
 16974                           ;ENC424J600.c: 694: ENC424J600_readControlRegisterUnbanked(0x1D + 0x00, &high);
 16975                           
 16976                           ; BSR set to: 0
 16977                           ;incstack = 0
 16978  00401C  0E77               	movlw	low ENC424J600_getInterruptFlags@high
 16979  00401E  0100               	movlb	0	; () banked
 16980  004020  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 16981  004022  0E00               	movlw	high ENC424J600_getInterruptFlags@high
 16982  004024  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 16983  004026  0E1D               	movlw	29
 16984  004028  EC67  F021         	call	_ENC424J600_readControlRegisterUnbanked
 16985                           
 16986                           ;ENC424J600.c: 695: ENC424J600_readControlRegisterUnbanked(0x1C + 0x00, &low);
 16987  00402C  0E76               	movlw	low ENC424J600_getInterruptFlags@low
 16988  00402E  0100               	movlb	0	; () banked
 16989  004030  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 16990  004032  0E00               	movlw	high ENC424J600_getInterruptFlags@low
 16991  004034  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 16992  004036  0E1C               	movlw	28
 16993  004038  EC67  F021         	call	_ENC424J600_readControlRegisterUnbanked
 16994                           
 16995                           ;ENC424J600.c: 696: return (((uint16_t) low & 0x00ff) | (((uint16_t) high << 8)&0xff00))
      +                          ;
 16996  00403C  0E00               	movlw	0
 16997  00403E  0100               	movlb	0	; () banked
 16998  004040  6F70               	movwf	??_ENC424J600_getInterruptFlags& (0+255),b
 16999  004042  0EFF               	movlw	255
 17000  004044  6F71               	movwf	(??_ENC424J600_getInterruptFlags+1)& (0+255),b
 17001  004046  5177               	movf	ENC424J600_getInterruptFlags@high& (0+255),w,b
 17002  004048  6F73               	movwf	(??_ENC424J600_getInterruptFlags+3)& (0+255),b
 17003  00404A  6B72               	clrf	(??_ENC424J600_getInterruptFlags+2)& (0+255),b
 17004  00404C  5170               	movf	??_ENC424J600_getInterruptFlags& (0+255),w,b
 17005  00404E  1772               	andwf	(??_ENC424J600_getInterruptFlags+2)& (0+255),f,b
 17006  004050  5171               	movf	(??_ENC424J600_getInterruptFlags+1)& (0+255),w,b
 17007  004052  1773               	andwf	(??_ENC424J600_getInterruptFlags+3)& (0+255),f,b
 17008  004054  5176               	movf	ENC424J600_getInterruptFlags@low& (0+255),w,b
 17009  004056  6F74               	movwf	(??_ENC424J600_getInterruptFlags+4)& (0+255),b
 17010  004058  6B75               	clrf	(??_ENC424J600_getInterruptFlags+5)& (0+255),b
 17011  00405A  5172               	movf	(??_ENC424J600_getInterruptFlags+2)& (0+255),w,b
 17012  00405C  1174               	iorwf	(??_ENC424J600_getInterruptFlags+4)& (0+255),w,b
 17013  00405E  6F6E               	movwf	?_ENC424J600_getInterruptFlags& (0+255),b
 17014  004060  5173               	movf	(??_ENC424J600_getInterruptFlags+3)& (0+255),w,b
 17015  004062  1175               	iorwf	(??_ENC424J600_getInterruptFlags+5)& (0+255),w,b
 17016  004064  6F6F               	movwf	(?_ENC424J600_getInterruptFlags+1)& (0+255),b
 17017  004066  0012               	return	
 17018  004068                     __end_of_ENC424J600_getInterruptFlags:
 17019                           	opt stack 0
 17020                           tblptru	equ	0xFF8
 17021                           tblptrh	equ	0xFF7
 17022                           tblptrl	equ	0xFF6
 17023                           tablat	equ	0xFF5
 17024                           prodh	equ	0xFF4
 17025                           prodl	equ	0xFF3
 17026                           intcon	equ	0xFF2
 17027                           intcon3	equ	0xFF0
 17028                           postinc0	equ	0xFEE
 17029                           plusw0	equ	0xFEB
 17030                           fsr0h	equ	0xFEA
 17031                           fsr0l	equ	0xFE9
 17032                           wreg	equ	0xFE8
 17033                           indf1	equ	0xFE7
 17034                           postinc1	equ	0xFE6
 17035                           postdec1	equ	0xFE5
 17036                           plusw1	equ	0xFE3
 17037                           fsr1h	equ	0xFE2
 17038                           fsr1l	equ	0xFE1
 17039                           indf2	equ	0xFDF
 17040                           postinc2	equ	0xFDE
 17041                           postdec2	equ	0xFDD
 17042                           plusw2	equ	0xFDB
 17043                           fsr2h	equ	0xFDA
 17044                           fsr2l	equ	0xFD9
 17045                           status	equ	0xFD8
 17046                           
 17047 ;; *************** function _ethernetController_newPacketAvailable *****************
 17048 ;; Defined at:
 17049 ;;		line 396 in file "src/enc424j600/ENC424J600.c"
 17050 ;; Parameters:    Size  Location     Type
 17051 ;;		None
 17052 ;; Auto vars:     Size  Location     Type
 17053 ;;		None
 17054 ;; Return value:  Size  Location     Type
 17055 ;;                  1    wreg      unsigned char 
 17056 ;; Registers used:
 17057 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17058 ;; Tracked objects:
 17059 ;;		On entry : 0/0
 17060 ;;		On exit  : 0/0
 17061 ;;		Unchanged: 0/0
 17062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17063 ;;      Params:         0       0       0       0       0       0       0       0       0
 17064 ;;      Locals:         0       0       0       0       0       0       0       0       0
 17065 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17066 ;;      Totals:         0       0       0       0       0       0       0       0       0
 17067 ;;Total ram usage:        0 bytes
 17068 ;; Hardware stack levels used:    1
 17069 ;; Hardware stack levels required when called:    8
 17070 ;; This function calls:
 17071 ;;		_ENC424J600_getPacketCount
 17072 ;; This function is called by:
 17073 ;;		_handleStackBackgroundTasks
 17074 ;; This function uses a non-reentrant model
 17075 ;;
 17076                           
 17077                           	psect	text66
 17078  00468E                     __ptext66:
 17079                           	opt stack 0
 17080  00468E                     _ethernetController_newPacketAvailable:
 17081                           	opt stack 21
 17082                           
 17083                           ;ENC424J600.c: 397: return (unsigned) (ENC424J600_getPacketCount() != 0);
 17084                           
 17085                           ; BSR set to: 0
 17086                           ;incstack = 0
 17087  00468E  EC1C  F023         	call	_ENC424J600_getPacketCount	;wreg free
 17088  004692  0900               	iorlw	0
 17089  004694  B4D8               	btfsc	status,2,c
 17090  004696  D002               	goto	u10240
 17091  004698  0E01               	movlw	1
 17092  00469A  0012               	return	
 17093  00469C                     u10240:
 17094  00469C  0E00               	movlw	0
 17095  00469E  0012               	return	
 17096  0046A0                     __end_of_ethernetController_newPacketAvailable:
 17097                           	opt stack 0
 17098                           tblptru	equ	0xFF8
 17099                           tblptrh	equ	0xFF7
 17100                           tblptrl	equ	0xFF6
 17101                           tablat	equ	0xFF5
 17102                           prodh	equ	0xFF4
 17103                           prodl	equ	0xFF3
 17104                           intcon	equ	0xFF2
 17105                           intcon3	equ	0xFF0
 17106                           postinc0	equ	0xFEE
 17107                           plusw0	equ	0xFEB
 17108                           fsr0h	equ	0xFEA
 17109                           fsr0l	equ	0xFE9
 17110                           wreg	equ	0xFE8
 17111                           indf1	equ	0xFE7
 17112                           postinc1	equ	0xFE6
 17113                           postdec1	equ	0xFE5
 17114                           plusw1	equ	0xFE3
 17115                           fsr1h	equ	0xFE2
 17116                           fsr1l	equ	0xFE1
 17117                           indf2	equ	0xFDF
 17118                           postinc2	equ	0xFDE
 17119                           postdec2	equ	0xFDD
 17120                           plusw2	equ	0xFDB
 17121                           fsr2h	equ	0xFDA
 17122                           fsr2l	equ	0xFD9
 17123                           status	equ	0xFD8
 17124                           
 17125 ;; *************** function _ethernetController_clearInterruptFlag *****************
 17126 ;; Defined at:
 17127 ;;		line 323 in file "src/enc424j600/ENC424J600.c"
 17128 ;; Parameters:    Size  Location     Type
 17129 ;;  flag            1    wreg     unsigned char 
 17130 ;; Auto vars:     Size  Location     Type
 17131 ;;  flag            1   18[BANK0 ] unsigned char 
 17132 ;; Return value:  Size  Location     Type
 17133 ;;                  1    wreg      void 
 17134 ;; Registers used:
 17135 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17136 ;; Tracked objects:
 17137 ;;		On entry : 0/0
 17138 ;;		On exit  : 0/0
 17139 ;;		Unchanged: 0/0
 17140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17141 ;;      Params:         0       0       0       0       0       0       0       0       0
 17142 ;;      Locals:         0       1       0       0       0       0       0       0       0
 17143 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17144 ;;      Totals:         0       1       0       0       0       0       0       0       0
 17145 ;;Total ram usage:        1 bytes
 17146 ;; Hardware stack levels used:    1
 17147 ;; Hardware stack levels required when called:    8
 17148 ;; This function calls:
 17149 ;;		_ENC424J600_clearInterruptFlag
 17150 ;; This function is called by:
 17151 ;;		_handleStackBackgroundTasks
 17152 ;; This function uses a non-reentrant model
 17153 ;;
 17154                           
 17155                           	psect	text67
 17156  0046BE                     __ptext67:
 17157                           	opt stack 0
 17158  0046BE                     _ethernetController_clearInterruptFlag:
 17159                           	opt stack 21
 17160                           
 17161                           ;incstack = 0
 17162                           ;ethernetController_clearInterruptFlag@flag stored from wreg
 17163  0046BE  0100               	movlb	0	; () banked
 17164  0046C0  6F72               	movwf	ethernetController_clearInterruptFlag@flag& (0+255),b
 17165                           
 17166                           ;ENC424J600.c: 324: ENC424J600_clearInterruptFlag(flag);
 17167  0046C2  0100               	movlb	0	; () banked
 17168  0046C4  5172               	movf	ethernetController_clearInterruptFlag@flag& (0+255),w,b
 17169  0046C6  EC85  F01B         	call	_ENC424J600_clearInterruptFlag
 17170  0046CA  0012               	return		;funcret
 17171  0046CC                     __end_of_ethernetController_clearInterruptFlag:
 17172                           	opt stack 0
 17173                           tblptru	equ	0xFF8
 17174                           tblptrh	equ	0xFF7
 17175                           tblptrl	equ	0xFF6
 17176                           tablat	equ	0xFF5
 17177                           prodh	equ	0xFF4
 17178                           prodl	equ	0xFF3
 17179                           intcon	equ	0xFF2
 17180                           intcon3	equ	0xFF0
 17181                           postinc0	equ	0xFEE
 17182                           plusw0	equ	0xFEB
 17183                           fsr0h	equ	0xFEA
 17184                           fsr0l	equ	0xFE9
 17185                           wreg	equ	0xFE8
 17186                           indf1	equ	0xFE7
 17187                           postinc1	equ	0xFE6
 17188                           postdec1	equ	0xFE5
 17189                           plusw1	equ	0xFE3
 17190                           fsr1h	equ	0xFE2
 17191                           fsr1l	equ	0xFE1
 17192                           indf2	equ	0xFDF
 17193                           postinc2	equ	0xFDE
 17194                           postdec2	equ	0xFDD
 17195                           plusw2	equ	0xFDB
 17196                           fsr2h	equ	0xFDA
 17197                           fsr2l	equ	0xFD9
 17198                           status	equ	0xFD8
 17199                           
 17200 ;; *************** function _ENC424J600_clearInterruptFlag *****************
 17201 ;; Defined at:
 17202 ;;		line 699 in file "src/enc424j600/ENC424J600.c"
 17203 ;; Parameters:    Size  Location     Type
 17204 ;;  flag            1    wreg     unsigned char 
 17205 ;; Auto vars:     Size  Location     Type
 17206 ;;  flag            1   16[BANK0 ] unsigned char 
 17207 ;;  temp            1   17[BANK0 ] unsigned char 
 17208 ;; Return value:  Size  Location     Type
 17209 ;;                  1    wreg      void 
 17210 ;; Registers used:
 17211 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17212 ;; Tracked objects:
 17213 ;;		On entry : 0/0
 17214 ;;		On exit  : 0/0
 17215 ;;		Unchanged: 0/0
 17216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17217 ;;      Params:         0       0       0       0       0       0       0       0       0
 17218 ;;      Locals:         0       2       0       0       0       0       0       0       0
 17219 ;;      Temps:          0       2       0       0       0       0       0       0       0
 17220 ;;      Totals:         0       4       0       0       0       0       0       0       0
 17221 ;;Total ram usage:        4 bytes
 17222 ;; Hardware stack levels used:    1
 17223 ;; Hardware stack levels required when called:    7
 17224 ;; This function calls:
 17225 ;;		_ENC424J600_readControlRegisterUnbanked
 17226 ;;		_ENC424J600_writeControlRegisterUnbanked
 17227 ;; This function is called by:
 17228 ;;		_ethernetController_clearInterruptFlag
 17229 ;; This function uses a non-reentrant model
 17230 ;;
 17231                           
 17232                           	psect	text68
 17233  00370A                     __ptext68:
 17234                           	opt stack 0
 17235  00370A                     _ENC424J600_clearInterruptFlag:
 17236                           	opt stack 21
 17237                           
 17238                           ;incstack = 0
 17239                           ;ENC424J600_clearInterruptFlag@flag stored from wreg
 17240  00370A  0100               	movlb	0	; () banked
 17241  00370C  6F70               	movwf	ENC424J600_clearInterruptFlag@flag& (0+255),b
 17242                           
 17243                           ;ENC424J600.c: 700: uint8_t temp;
 17244                           ;ENC424J600.c: 701: if (flag < 8) {
 17245  00370E  0E08               	movlw	8
 17246  003710  0100               	movlb	0	; () banked
 17247  003712  6170               	cpfslt	ENC424J600_clearInterruptFlag@flag& (0+255),b
 17248  003714  D01E               	goto	l306
 17249                           
 17250                           ; BSR set to: 0
 17251                           ;ENC424J600.c: 702: ENC424J600_readControlRegisterUnbanked(0x1C + 0x00, &temp);
 17252  003716  0E71               	movlw	low ENC424J600_clearInterruptFlag@temp
 17253  003718  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 17254  00371A  0E00               	movlw	high ENC424J600_clearInterruptFlag@temp
 17255  00371C  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 17256  00371E  0E1C               	movlw	28
 17257  003720  EC67  F021         	call	_ENC424J600_readControlRegisterUnbanked
 17258                           
 17259                           ;ENC424J600.c: 703: temp &= ~(1 << flag);
 17260  003724  C070  F06E         	movff	ENC424J600_clearInterruptFlag@flag,??_ENC424J600_clearInterruptFlag
 17261  003728  0E01               	movlw	1
 17262  00372A  0100               	movlb	0	; () banked
 17263  00372C  6F6F               	movwf	(??_ENC424J600_clearInterruptFlag+1)& (0+255),b
 17264  00372E  2B6E               	incf	??_ENC424J600_clearInterruptFlag& (0+255),f,b
 17265  003730  D002               	goto	u9754
 17266  003732                     u9755:
 17267  003732  90D8               	bcf	status,0,c
 17268  003734  376F               	rlcf	(??_ENC424J600_clearInterruptFlag+1)& (0+255),f,b
 17269  003736                     u9754:
 17270  003736  2F6E               	decfsz	??_ENC424J600_clearInterruptFlag& (0+255),f,b
 17271  003738  D7FC               	goto	u9755
 17272  00373A  0100               	movlb	0	; () banked
 17273  00373C  516F               	movf	(??_ENC424J600_clearInterruptFlag+1)& (0+255),w,b
 17274  00373E  0AFF               	xorlw	255
 17275  003740  1771               	andwf	ENC424J600_clearInterruptFlag@temp& (0+255),f,b
 17276                           
 17277                           ; BSR set to: 0
 17278                           ;ENC424J600.c: 704: ENC424J600_writeControlRegisterUnbanked(0x1C + 0x00, &temp);
 17279  003742  0E71               	movlw	low ENC424J600_clearInterruptFlag@temp
 17280  003744  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 17281  003746  0E00               	movlw	high ENC424J600_clearInterruptFlag@temp
 17282  003748  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 17283  00374A  0E1C               	movlw	28
 17284  00374C  EC4C  F021         	call	_ENC424J600_writeControlRegisterUnbanked
 17285                           
 17286                           ;ENC424J600.c: 705: } else {
 17287  003750  0012               	return	
 17288  003752                     l306:
 17289                           
 17290                           ;ENC424J600.c: 706: flag -= 8;
 17291  003752  0E08               	movlw	8
 17292  003754  0100               	movlb	0	; () banked
 17293  003756  5F70               	subwf	ENC424J600_clearInterruptFlag@flag& (0+255),f,b
 17294                           
 17295                           ; BSR set to: 0
 17296                           ;ENC424J600.c: 707: ENC424J600_readControlRegisterUnbanked(0x1D + 0x00, &temp);
 17297  003758  0E71               	movlw	low ENC424J600_clearInterruptFlag@temp
 17298  00375A  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 17299  00375C  0E00               	movlw	high ENC424J600_clearInterruptFlag@temp
 17300  00375E  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 17301  003760  0E1D               	movlw	29
 17302  003762  EC67  F021         	call	_ENC424J600_readControlRegisterUnbanked
 17303                           
 17304                           ;ENC424J600.c: 708: temp &= ~(1 << flag);
 17305  003766  C070  F06E         	movff	ENC424J600_clearInterruptFlag@flag,??_ENC424J600_clearInterruptFlag
 17306  00376A  0E01               	movlw	1
 17307  00376C  0100               	movlb	0	; () banked
 17308  00376E  6F6F               	movwf	(??_ENC424J600_clearInterruptFlag+1)& (0+255),b
 17309  003770  2B6E               	incf	??_ENC424J600_clearInterruptFlag& (0+255),f,b
 17310  003772  D002               	goto	u9764
 17311  003774                     u9765:
 17312  003774  90D8               	bcf	status,0,c
 17313  003776  376F               	rlcf	(??_ENC424J600_clearInterruptFlag+1)& (0+255),f,b
 17314  003778                     u9764:
 17315  003778  2F6E               	decfsz	??_ENC424J600_clearInterruptFlag& (0+255),f,b
 17316  00377A  D7FC               	goto	u9765
 17317  00377C  0100               	movlb	0	; () banked
 17318  00377E  516F               	movf	(??_ENC424J600_clearInterruptFlag+1)& (0+255),w,b
 17319  003780  0AFF               	xorlw	255
 17320  003782  1771               	andwf	ENC424J600_clearInterruptFlag@temp& (0+255),f,b
 17321                           
 17322                           ;ENC424J600.c: 709: ENC424J600_writeControlRegisterUnbanked(0x1D + 0x00, &temp);
 17323  003784  0E71               	movlw	low ENC424J600_clearInterruptFlag@temp
 17324  003786  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 17325  003788  0E00               	movlw	high ENC424J600_clearInterruptFlag@temp
 17326  00378A  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 17327  00378C  0E1D               	movlw	29
 17328  00378E  EC4C  F021         	call	_ENC424J600_writeControlRegisterUnbanked
 17329  003792  0012               	return	
 17330  003794                     __end_of_ENC424J600_clearInterruptFlag:
 17331                           	opt stack 0
 17332                           tblptru	equ	0xFF8
 17333                           tblptrh	equ	0xFF7
 17334                           tblptrl	equ	0xFF6
 17335                           tablat	equ	0xFF5
 17336                           prodh	equ	0xFF4
 17337                           prodl	equ	0xFF3
 17338                           intcon	equ	0xFF2
 17339                           intcon3	equ	0xFF0
 17340                           postinc0	equ	0xFEE
 17341                           plusw0	equ	0xFEB
 17342                           fsr0h	equ	0xFEA
 17343                           fsr0l	equ	0xFE9
 17344                           wreg	equ	0xFE8
 17345                           indf1	equ	0xFE7
 17346                           postinc1	equ	0xFE6
 17347                           postdec1	equ	0xFE5
 17348                           plusw1	equ	0xFE3
 17349                           fsr1h	equ	0xFE2
 17350                           fsr1l	equ	0xFE1
 17351                           indf2	equ	0xFDF
 17352                           postinc2	equ	0xFDE
 17353                           postdec2	equ	0xFDD
 17354                           plusw2	equ	0xFDB
 17355                           fsr2h	equ	0xFDA
 17356                           fsr2l	equ	0xFD9
 17357                           status	equ	0xFD8
 17358                           
 17359 ;; *************** function _ethernetController_init *****************
 17360 ;; Defined at:
 17361 ;;		line 30 in file "src/enc424j600/ENC424J600.c"
 17362 ;; Parameters:    Size  Location     Type
 17363 ;;		None
 17364 ;; Auto vars:     Size  Location     Type
 17365 ;;  err             3   73[BANK0 ] struct error
 17366 ;; Return value:  Size  Location     Type
 17367 ;;                  3   70[BANK0 ] struct error
 17368 ;; Registers used:
 17369 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 17370 ;; Tracked objects:
 17371 ;;		On entry : 0/0
 17372 ;;		On exit  : 0/0
 17373 ;;		Unchanged: 0/0
 17374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17375 ;;      Params:         0       3       0       0       0       0       0       0       0
 17376 ;;      Locals:         0       3       0       0       0       0       0       0       0
 17377 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17378 ;;      Totals:         0       6       0       0       0       0       0       0       0
 17379 ;;Total ram usage:        6 bytes
 17380 ;; Hardware stack levels used:    1
 17381 ;; Hardware stack levels required when called:    8
 17382 ;; This function calls:
 17383 ;;		_ENC424J600_enableAutoMACInsertion
 17384 ;;		_ENC424J600_enableReception
 17385 ;;		_ENC424J600_initSPI
 17386 ;;		_ENC424J600_setNextPacketPointer
 17387 ;;		_ENC424J600_setRXBufferStartAddress
 17388 ;;		_ENC424J600_setRXTailPointer
 17389 ;;		_ethernetController_checkDeviceId
 17390 ;;		_ethernetController_softReset
 17391 ;; This function is called by:
 17392 ;;		_main
 17393 ;; This function uses a non-reentrant model
 17394 ;;
 17395                           
 17396                           	psect	text69
 17397  003A78                     __ptext69:
 17398                           	opt stack 0
 17399  003A78                     _ethernetController_init:
 17400                           	opt stack 22
 17401                           
 17402                           ;ENC424J600.c: 31: error_t err;
 17403                           ;ENC424J600.c: 32: ENC424J600_initSPI();
 17404                           
 17405                           ;incstack = 0
 17406  003A78  EC01  F023         	call	_ENC424J600_initSPI	;wreg free
 17407                           
 17408                           ;ENC424J600.c: 33: err = ethernetController_softReset();
 17409  003A7C  ECED  F012         	call	_ethernetController_softReset	;wreg free
 17410  003A80  C09A  F0A9         	movff	?_ethernetController_softReset,ethernetController_init@err
 17411  003A84  C09B  F0AA         	movff	?_ethernetController_softReset+1,ethernetController_init@err+1
 17412  003A88  C09C  F0AB         	movff	?_ethernetController_softReset+2,ethernetController_init@err+2
 17413                           
 17414                           ;ENC424J600.c: 36: }
 17415                           ;ENC424J600.c: 37: err = ethernetController_checkDeviceId();
 17416  003A8C  ECE7  F01F         	call	_ethernetController_checkDeviceId	;wreg free
 17417  003A90  C06E  F0A9         	movff	?_ethernetController_checkDeviceId,ethernetController_init@err
 17418  003A94  C06F  F0AA         	movff	?_ethernetController_checkDeviceId+1,ethernetController_init@err+1
 17419  003A98  C070  F0AB         	movff	?_ethernetController_checkDeviceId+2,ethernetController_init@err+2
 17420                           
 17421                           ;ENC424J600.c: 40: }
 17422                           ;ENC424J600.c: 59: ENC424J600_setRXBufferStartAddress(0x3000);
 17423  003A9C  0E30               	movlw	48
 17424  003A9E  0100               	movlb	0	; () banked
 17425  003AA0  6F6F               	movwf	(ENC424J600_setRXBufferStartAddress@addr+1)& (0+255),b
 17426  003AA2  0E00               	movlw	0
 17427  003AA4  6F6E               	movwf	ENC424J600_setRXBufferStartAddress@addr& (0+255),b
 17428  003AA6  EC08  F022         	call	_ENC424J600_setRXBufferStartAddress	;wreg free
 17429                           
 17430                           ;ENC424J600.c: 60: ENC424J600_setNextPacketPointer(0x3000);
 17431  003AAA  0E30               	movlw	48
 17432  003AAC  0100               	movlb	0	; () banked
 17433  003AAE  6F61               	movwf	(ENC424J600_setNextPacketPointer@ptr+1)& (0+255),b
 17434  003AB0  0E00               	movlw	0
 17435  003AB2  6F60               	movwf	ENC424J600_setNextPacketPointer@ptr& (0+255),b
 17436  003AB4  EC6B  F023         	call	_ENC424J600_setNextPacketPointer	;wreg free
 17437                           
 17438                           ;ENC424J600.c: 61: ENC424J600_setRXTailPointer(0x5FFE);
 17439  003AB8  0E5F               	movlw	95
 17440  003ABA  0100               	movlb	0	; () banked
 17441  003ABC  6F6F               	movwf	(ENC424J600_setRXTailPointer@addr+1)& (0+255),b
 17442  003ABE  0EFE               	movlw	254
 17443  003AC0  6F6E               	movwf	ENC424J600_setRXTailPointer@addr& (0+255),b
 17444  003AC2  ECF3  F021         	call	_ENC424J600_setRXTailPointer	;wreg free
 17445                           
 17446                           ;ENC424J600.c: 63: ENC424J600_enableReception();
 17447  003AC6  EC70  F023         	call	_ENC424J600_enableReception	;wreg free
 17448                           
 17449                           ;ENC424J600.c: 65: ENC424J600_enableAutoMACInsertion();
 17450  003ACA  EC45  F022         	call	_ENC424J600_enableAutoMACInsertion	;wreg free
 17451                           
 17452                           ;ENC424J600.c: 67: err.module = ERROR_MODULE_ETHERNET_CONTROLLER;
 17453  003ACE  0E01               	movlw	1
 17454  003AD0  0100               	movlb	0	; () banked
 17455  003AD2  6FA9               	movwf	ethernetController_init@err& (0+255),b
 17456                           
 17457                           ; BSR set to: 0
 17458                           ;ENC424J600.c: 68: err.code = (uint16_t)0;
 17459  003AD4  0E00               	movlw	0
 17460  003AD6  6FAB               	movwf	(ethernetController_init@err+2)& (0+255),b
 17461  003AD8  0E00               	movlw	0
 17462  003ADA  6FAA               	movwf	(ethernetController_init@err+1)& (0+255),b
 17463                           
 17464                           ; BSR set to: 0
 17465                           ;ENC424J600.c: 69: return err;
 17466  003ADC  C0A9  F0A6         	movff	ethernetController_init@err,?_ethernetController_init
 17467  003AE0  C0AA  F0A7         	movff	ethernetController_init@err+1,?_ethernetController_init+1
 17468  003AE4  C0AB  F0A8         	movff	ethernetController_init@err+2,?_ethernetController_init+2
 17469  003AE8  0012               	return	
 17470  003AEA                     __end_of_ethernetController_init:
 17471                           	opt stack 0
 17472                           tblptru	equ	0xFF8
 17473                           tblptrh	equ	0xFF7
 17474                           tblptrl	equ	0xFF6
 17475                           tablat	equ	0xFF5
 17476                           prodh	equ	0xFF4
 17477                           prodl	equ	0xFF3
 17478                           intcon	equ	0xFF2
 17479                           intcon3	equ	0xFF0
 17480                           postinc0	equ	0xFEE
 17481                           plusw0	equ	0xFEB
 17482                           fsr0h	equ	0xFEA
 17483                           fsr0l	equ	0xFE9
 17484                           wreg	equ	0xFE8
 17485                           indf1	equ	0xFE7
 17486                           postinc1	equ	0xFE6
 17487                           postdec1	equ	0xFE5
 17488                           plusw1	equ	0xFE3
 17489                           fsr1h	equ	0xFE2
 17490                           fsr1l	equ	0xFE1
 17491                           indf2	equ	0xFDF
 17492                           postinc2	equ	0xFDE
 17493                           postdec2	equ	0xFDD
 17494                           plusw2	equ	0xFDB
 17495                           fsr2h	equ	0xFDA
 17496                           fsr2l	equ	0xFD9
 17497                           status	equ	0xFD8
 17498                           
 17499 ;; *************** function _ethernetController_softReset *****************
 17500 ;; Defined at:
 17501 ;;		line 72 in file "src/enc424j600/ENC424J600.c"
 17502 ;; Parameters:    Size  Location     Type
 17503 ;;		None
 17504 ;; Auto vars:     Size  Location     Type
 17505 ;;  err             3   67[BANK0 ] struct error
 17506 ;;  receivedData    2   65[BANK0 ] unsigned char [2]
 17507 ;;  dataToSend      2   63[BANK0 ] unsigned char [2]
 17508 ;;  comFailCount    1   62[BANK0 ] unsigned char 
 17509 ;; Return value:  Size  Location     Type
 17510 ;;                  3   58[BANK0 ] struct error
 17511 ;; Registers used:
 17512 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 17513 ;; Tracked objects:
 17514 ;;		On entry : 0/0
 17515 ;;		On exit  : 0/0
 17516 ;;		Unchanged: 0/0
 17517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17518 ;;      Params:         0       3       0       0       0       0       0       0       0
 17519 ;;      Locals:         0       8       0       0       0       0       0       0       0
 17520 ;;      Temps:          0       1       0       0       0       0       0       0       0
 17521 ;;      Totals:         0      12       0       0       0       0       0       0       0
 17522 ;;Total ram usage:       12 bytes
 17523 ;; Hardware stack levels used:    1
 17524 ;; Hardware stack levels required when called:    7
 17525 ;; This function calls:
 17526 ;;		_ENC424J600_readControlRegisterUnbanked
 17527 ;;		_ENC424J600_writeControlRegisterUnbanked
 17528 ;;		_ENC424J600_writeSingleByte
 17529 ;;		_UARTTransmitText
 17530 ;; This function is called by:
 17531 ;;		_ethernetController_init
 17532 ;; This function uses a non-reentrant model
 17533 ;;
 17534                           
 17535                           	psect	text70
 17536  0025DA                     __ptext70:
 17537                           	opt stack 0
 17538  0025DA                     _ethernetController_softReset:
 17539                           	opt stack 22
 17540                           
 17541                           ;ENC424J600.c: 90: uint8_t comFailCount = 0;
 17542                           
 17543                           ; BSR set to: 0
 17544                           ;incstack = 0
 17545  0025DA  0E00               	movlw	0
 17546  0025DC  0100               	movlb	0	; () banked
 17547  0025DE  6F9E               	movwf	ethernetController_softReset@comFailCount& (0+255),b
 17548                           
 17549                           ; BSR set to: 0
 17550                           ;ENC424J600.c: 91: uint8_t dataToSend[2] = {0x12, 0x34};
 17551  0025E0  C04D  F09F         	movff	ethernetController_softReset@F5827,ethernetController_softReset@dataToSend
 17552  0025E4  C04E  F0A0         	movff	ethernetController_softReset@F5827+1,ethernetController_softReset@dataToSend+1
 17553                           
 17554                           ; BSR set to: 0
 17555                           ;ENC424J600.c: 92: uint8_t receivedData[2] = {0, 0};
 17556  0025E8  C045  F0A1         	movff	ethernetController_softReset@F5829,ethernetController_softReset@receivedData
 17557  0025EC  C046  F0A2         	movff	ethernetController_softReset@F5829+1,ethernetController_softReset@receivedData+1
 17558                           
 17559                           ;ENC424J600.c: 93: error_t err;
 17560                           ;ENC424J600.c: 94: err.module = ERROR_MODULE_ETHERNET_CONTROLLER;
 17561  0025F0  0E01               	movlw	1
 17562  0025F2  6FA3               	movwf	ethernetController_softReset@err& (0+255),b
 17563                           
 17564                           ;ENC424J600.c: 95: err.code = (uint16_t)0;
 17565  0025F4  0E00               	movlw	0
 17566  0025F6  6FA5               	movwf	(ethernetController_softReset@err+2)& (0+255),b
 17567  0025F8  0E00               	movlw	0
 17568  0025FA  6FA4               	movwf	(ethernetController_softReset@err+1)& (0+255),b
 17569                           
 17570                           ; BSR set to: 0
 17571                           ;ENC424J600.c: 96: if (comFailCount < 5) {
 17572  0025FC  0E05               	movlw	5
 17573  0025FE  619E               	cpfslt	ethernetController_softReset@comFailCount& (0+255),b
 17574  002600  D072               	goto	l80
 17575                           
 17576                           ; BSR set to: 0
 17577                           ;ENC424J600.c: 98: ENC424J600_writeControlRegisterUnbanked(0x16 + 0x00, &dataToSend[0]);
 17578  002602  0E9F               	movlw	low ethernetController_softReset@dataToSend
 17579  002604  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 17580  002606  0E00               	movlw	high ethernetController_softReset@dataToSend
 17581  002608  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 17582  00260A  0E16               	movlw	22
 17583  00260C  EC4C  F021         	call	_ENC424J600_writeControlRegisterUnbanked
 17584                           
 17585                           ;ENC424J600.c: 99: ENC424J600_writeControlRegisterUnbanked(0x17 + 0x00, &dataToSend[1]);
 17586  002610  0EA0               	movlw	low (ethernetController_softReset@dataToSend+1)
 17587  002612  0100               	movlb	0	; () banked
 17588  002614  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 17589  002616  0E00               	movlw	high (ethernetController_softReset@dataToSend+1)
 17590  002618  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 17591  00261A  0E17               	movlw	23
 17592  00261C  EC4C  F021         	call	_ENC424J600_writeControlRegisterUnbanked
 17593                           
 17594                           ;ENC424J600.c: 101: ENC424J600_readControlRegisterUnbanked(0x16 + 0x00, &receivedData[0]
      +                          );
 17595  002620  0EA1               	movlw	low ethernetController_softReset@receivedData
 17596  002622  0100               	movlb	0	; () banked
 17597  002624  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 17598  002626  0E00               	movlw	high ethernetController_softReset@receivedData
 17599  002628  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 17600  00262A  0E16               	movlw	22
 17601  00262C  EC67  F021         	call	_ENC424J600_readControlRegisterUnbanked
 17602                           
 17603                           ;ENC424J600.c: 102: ENC424J600_readControlRegisterUnbanked(0x17 + 0x00, &receivedData[1]
      +                          );
 17604  002630  0EA2               	movlw	low (ethernetController_softReset@receivedData+1)
 17605  002632  0100               	movlb	0	; () banked
 17606  002634  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 17607  002636  0E00               	movlw	high (ethernetController_softReset@receivedData+1)
 17608  002638  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 17609  00263A  0E17               	movlw	23
 17610  00263C  EC67  F021         	call	_ENC424J600_readControlRegisterUnbanked
 17611                           
 17612                           ;ENC424J600.c: 104: if ((receivedData[0] == dataToSend[0]) && (receivedData[1] == dataTo
      +                          Send[1])) {
 17613  002640  0100               	movlb	0	; () banked
 17614  002642  519F               	movf	ethernetController_softReset@dataToSend& (0+255),w,b
 17615  002644  19A1               	xorwf	ethernetController_softReset@receivedData& (0+255),w,b
 17616  002646  A4D8               	btfss	status,2,c
 17617  002648  D04B               	goto	l84
 17618                           
 17619                           ; BSR set to: 0
 17620  00264A  51A0               	movf	(ethernetController_softReset@dataToSend+1)& (0+255),w,b
 17621  00264C  19A2               	xorwf	(ethernetController_softReset@receivedData+1)& (0+255),w,b
 17622  00264E  A4D8               	btfss	status,2,c
 17623  002650  D047               	goto	l84
 17624                           
 17625                           ; BSR set to: 0
 17626                           ;ENC424J600.c: 106: UARTTransmitText("Writing 0x1234 successful.\n\r");
 17627  002652  0EE2               	movlw	low STR_1
 17628  002654  6F98               	movwf	UARTTransmitText@str& (0+255),b
 17629  002656  0E7D               	movlw	high STR_1
 17630  002658  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 17631  00265A  EC18  F01F         	call	_UARTTransmitText	;wreg free
 17632                           
 17633                           ;ENC424J600.c: 107: ENC424J600_writeSingleByte(0b11001010);
 17634  00265E  0ECA               	movlw	202
 17635  002660  EC29  F023         	call	_ENC424J600_writeSingleByte
 17636                           
 17637                           ;ENC424J600.c: 108: _delay((unsigned long)((25)*(32000000UL/4000000.0)));
 17638  002664  0E42               	movlw	66
 17639  002666                     u11097:
 17640  002666  2EE8               	decfsz	wreg,f,c
 17641  002668  D7FE               	bra	u11097
 17642  00266A  D000               	nop2	
 17643                           
 17644                           ;ENC424J600.c: 110: ENC424J600_readControlRegisterUnbanked(0x16 + 0x00, &receivedData[0]
      +                          );
 17645  00266C  0EA1               	movlw	low ethernetController_softReset@receivedData
 17646  00266E  0100               	movlb	0	; () banked
 17647  002670  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 17648  002672  0E00               	movlw	high ethernetController_softReset@receivedData
 17649  002674  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 17650  002676  0E16               	movlw	22
 17651  002678  EC67  F021         	call	_ENC424J600_readControlRegisterUnbanked
 17652                           
 17653                           ;ENC424J600.c: 111: ENC424J600_readControlRegisterUnbanked(0x17 + 0x00, &receivedData[1]
      +                          );
 17654  00267C  0EA2               	movlw	low (ethernetController_softReset@receivedData+1)
 17655  00267E  0100               	movlb	0	; () banked
 17656  002680  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 17657  002682  0E00               	movlw	high (ethernetController_softReset@receivedData+1)
 17658  002684  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 17659  002686  0E17               	movlw	23
 17660  002688  EC67  F021         	call	_ENC424J600_readControlRegisterUnbanked
 17661                           
 17662                           ;ENC424J600.c: 113: if (!receivedData[0] && !receivedData[1]) {
 17663  00268C  0100               	movlb	0	; () banked
 17664  00268E  51A1               	movf	ethernetController_softReset@receivedData& (0+255),w,b
 17665  002690  A4D8               	btfss	status,2,c
 17666  002692  D013               	goto	l82
 17667                           
 17668                           ; BSR set to: 0
 17669  002694  51A2               	movf	(ethernetController_softReset@receivedData+1)& (0+255),w,b
 17670  002696  A4D8               	btfss	status,2,c
 17671  002698  D010               	goto	l82
 17672                           
 17673                           ; BSR set to: 0
 17674                           ;ENC424J600.c: 114: UARTTransmitText("Reset success.\n\r");
 17675  00269A  0EF9               	movlw	low STR_2
 17676  00269C  6F98               	movwf	UARTTransmitText@str& (0+255),b
 17677  00269E  0E7E               	movlw	high STR_2
 17678  0026A0  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 17679  0026A2  EC18  F01F         	call	_UARTTransmitText	;wreg free
 17680                           
 17681                           ;ENC424J600.c: 116: _delay((unsigned long)((256)*(32000000UL/4000000.0)));
 17682  0026A6  0E03               	movlw	3
 17683  0026A8  0100               	movlb	0	; () banked
 17684  0026AA  6F9D               	movwf	??_ethernetController_softReset& (0+255),b
 17685  0026AC  0EA7               	movlw	167
 17686  0026AE                     u11107:
 17687  0026AE  2EE8               	decfsz	wreg,f,c
 17688  0026B0  D7FE               	bra	u11107
 17689  0026B2  2F9D               	decfsz	??_ethernetController_softReset& (0+255),f,b
 17690  0026B4  D7FC               	bra	u11107
 17691  0026B6  D000               	nop2	
 17692  0026B8  D00C               	goto	l8134
 17693  0026BA                     l82:
 17694                           
 17695                           ;ENC424J600.c: 119: UARTTransmitText("Reset failed.\n\r");
 17696  0026BA  0E2A               	movlw	low STR_3
 17697  0026BC  0100               	movlb	0	; () banked
 17698  0026BE  6F98               	movwf	UARTTransmitText@str& (0+255),b
 17699  0026C0  0E7F               	movlw	high STR_3
 17700  0026C2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 17701  0026C4  EC18  F01F         	call	_UARTTransmitText	;wreg free
 17702                           
 17703                           ;ENC424J600.c: 120: err.code = ERROR_ETHERNET_CONTROLLER_UNRESPONSIVE;
 17704  0026C8  0E01               	movlw	1
 17705  0026CA  0100               	movlb	0	; () banked
 17706  0026CC  6FA5               	movwf	(ethernetController_softReset@err+2)& (0+255),b
 17707  0026CE  0E2E               	movlw	46
 17708  0026D0  6FA4               	movwf	(ethernetController_softReset@err+1)& (0+255),b
 17709  0026D2                     l8134:
 17710                           
 17711                           ; BSR set to: 0
 17712                           ;ENC424J600.c: 121: return err;
 17713  0026D2  C0A3  F09A         	movff	ethernetController_softReset@err,?_ethernetController_softReset
 17714  0026D6  C0A4  F09B         	movff	ethernetController_softReset@err+1,?_ethernetController_softReset+1
 17715  0026DA  C0A5  F09C         	movff	ethernetController_softReset@err+2,?_ethernetController_softReset+2
 17716                           
 17717                           ; BSR set to: 0
 17718  0026DE  0012               	return	
 17719  0026E0                     l84:
 17720                           
 17721                           ;ENC424J600.c: 122: }
 17722                           ;ENC424J600.c: 123: }
 17723                           ;ENC424J600.c: 124: comFailCount++;
 17724                           
 17725                           ; BSR set to: 0
 17726                           
 17727                           ; BSR set to: 0
 17728  0026E0  0100               	movlb	0	; () banked
 17729  0026E2  2B9E               	incf	ethernetController_softReset@comFailCount& (0+255),f,b
 17730                           
 17731                           ;ENC424J600.c: 125: } else {
 17732  0026E4  D012               	goto	l85
 17733  0026E6                     l80:
 17734                           
 17735                           ; BSR set to: 0
 17736                           ;ENC424J600.c: 126: UARTTransmitText("Writing 0x1234 failed.\n\r");
 17737                           
 17738                           ; BSR set to: 0
 17739  0026E6  0E1B               	movlw	low STR_4
 17740  0026E8  6F98               	movwf	UARTTransmitText@str& (0+255),b
 17741  0026EA  0E7E               	movlw	high STR_4
 17742  0026EC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 17743  0026EE  EC18  F01F         	call	_UARTTransmitText	;wreg free
 17744                           
 17745                           ;ENC424J600.c: 127: err.code = ERROR_ETHERNET_CONTROLLER_UNRESPONSIVE;
 17746  0026F2  0E01               	movlw	1
 17747  0026F4  0100               	movlb	0	; () banked
 17748  0026F6  6FA5               	movwf	(ethernetController_softReset@err+2)& (0+255),b
 17749  0026F8  0E2E               	movlw	46
 17750  0026FA  6FA4               	movwf	(ethernetController_softReset@err+1)& (0+255),b
 17751                           
 17752                           ; BSR set to: 0
 17753                           ;ENC424J600.c: 128: return err;
 17754  0026FC  C0A3  F09A         	movff	ethernetController_softReset@err,?_ethernetController_softReset
 17755  002700  C0A4  F09B         	movff	ethernetController_softReset@err+1,?_ethernetController_softReset+1
 17756  002704  C0A5  F09C         	movff	ethernetController_softReset@err+2,?_ethernetController_softReset+2
 17757                           
 17758                           ; BSR set to: 0
 17759  002708  0012               	return	
 17760  00270A                     l85:
 17761                           
 17762                           ; BSR set to: 0
 17763                           ;ENC424J600.c: 129: }
 17764                           ;ENC424J600.c: 130: return err;
 17765  00270A  C0A3  F09A         	movff	ethernetController_softReset@err,?_ethernetController_softReset
 17766  00270E  C0A4  F09B         	movff	ethernetController_softReset@err+1,?_ethernetController_softReset+1
 17767  002712  C0A5  F09C         	movff	ethernetController_softReset@err+2,?_ethernetController_softReset+2
 17768  002716  0012               	return		;funcret
 17769  002718                     __end_of_ethernetController_softReset:
 17770                           	opt stack 0
 17771                           tblptru	equ	0xFF8
 17772                           tblptrh	equ	0xFF7
 17773                           tblptrl	equ	0xFF6
 17774                           tablat	equ	0xFF5
 17775                           prodh	equ	0xFF4
 17776                           prodl	equ	0xFF3
 17777                           intcon	equ	0xFF2
 17778                           intcon3	equ	0xFF0
 17779                           postinc0	equ	0xFEE
 17780                           plusw0	equ	0xFEB
 17781                           fsr0h	equ	0xFEA
 17782                           fsr0l	equ	0xFE9
 17783                           wreg	equ	0xFE8
 17784                           indf1	equ	0xFE7
 17785                           postinc1	equ	0xFE6
 17786                           postdec1	equ	0xFE5
 17787                           plusw1	equ	0xFE3
 17788                           fsr1h	equ	0xFE2
 17789                           fsr1l	equ	0xFE1
 17790                           indf2	equ	0xFDF
 17791                           postinc2	equ	0xFDE
 17792                           postdec2	equ	0xFDD
 17793                           plusw2	equ	0xFDB
 17794                           fsr2h	equ	0xFDA
 17795                           fsr2l	equ	0xFD9
 17796                           status	equ	0xFD8
 17797                           
 17798 ;; *************** function _UARTTransmitText *****************
 17799 ;; Defined at:
 17800 ;;		line 53 in file "src/system/uart.c"
 17801 ;; Parameters:    Size  Location     Type
 17802 ;;  str             2   56[BANK0 ] PTR const unsigned char 
 17803 ;;		 -> STR_69(17), STR_68(4), STR_67(8), STR_66(3), 
 17804 ;;		 -> STR_65(2), STR_64(3), STR_63(16), STR_62(15), 
 17805 ;;		 -> STR_61(10), STR_60(2), STR_59(3), STR_58(5), 
 17806 ;;		 -> STR_57(3), STR_56(2), STR_55(39), arpEntryToString@string(50), 
 17807 ;;		 -> ipAdressToString@address(16), STR_54(18), STR_53(4), STR_52(5), 
 17808 ;;		 -> macToString@address(18), intToString@number(10), STR_51(5), STR_50(9), 
 17809 ;;		 -> STR_49(30), STR_48(55), STR_47(37), STR_46(15), 
 17810 ;;		 -> STR_45(14), STR_44(19), STR_43(30), STR_42(17), 
 17811 ;;		 -> STR_41(8), STR_40(29), STR_39(29), STR_38(20), 
 17812 ;;		 -> STR_37(19), STR_36(19), STR_35(13), STR_34(51), 
 17813 ;;		 -> STR_33(28), STR_32(4), STR_31(23), STR_30(4), 
 17814 ;;		 -> STR_29(21), STR_28(12), STR_27(38), STR_26(3), 
 17815 ;;		 -> STR_25(9), STR_24(2), STR_23(12), STR_22(24), 
 17816 ;;		 -> STR_21(3), STR_20(3), STR_19(3), STR_18(5), 
 17817 ;;		 -> STR_17(2), STR_16(2), STR_15(5), STR_14(3), 
 17818 ;;		 -> STR_13(3), STR_12(2), STR_11(7), STR_10(6), 
 17819 ;;		 -> STR_9(16), STR_8(10), STR_7(12), STR_6(2), 
 17820 ;;		 -> STR_5(2), ethernetController_getDeviceName@string(11), STR_4(25), STR_3(16), 
 17821 ;;		 -> STR_2(17), STR_1(29), 
 17822 ;; Auto vars:     Size  Location     Type
 17823 ;;		None
 17824 ;; Return value:  Size  Location     Type
 17825 ;;                  1    wreg      void 
 17826 ;; Registers used:
 17827 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 17828 ;; Tracked objects:
 17829 ;;		On entry : 0/0
 17830 ;;		On exit  : 0/0
 17831 ;;		Unchanged: 0/0
 17832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17833 ;;      Params:         0       2       0       0       0       0       0       0       0
 17834 ;;      Locals:         0       0       0       0       0       0       0       0       0
 17835 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17836 ;;      Totals:         0       2       0       0       0       0       0       0       0
 17837 ;;Total ram usage:        2 bytes
 17838 ;; Hardware stack levels used:    1
 17839 ;; Hardware stack levels required when called:    4
 17840 ;; This function calls:
 17841 ;;		Nothing
 17842 ;; This function is called by:
 17843 ;;		_ethernetController_softReset
 17844 ;;		_ethernet_rxGetNewFrame
 17845 ;;		_handleStackBackgroundTasks
 17846 ;;		_main
 17847 ;;		_printEthernetState
 17848 ;;		_printErrorMessage
 17849 ;;		_UARTTransmitInt
 17850 ;;		_ARP_handleNewPacket
 17851 ;;		_ARP_replyIfNeeded
 17852 ;;		_ipv4_sendFrame
 17853 ;;		_ipv4_handleNewPacket
 17854 ;;		_printArpTable
 17855 ;; This function uses a non-reentrant model
 17856 ;;
 17857                           
 17858                           	psect	text71
 17859  003E30                     __ptext71:
 17860                           	opt stack 0
 17861  003E30                     _UARTTransmitText:
 17862                           	opt stack 25
 17863                           
 17864                           ;uart.c: 54: while (*str) {
 17865                           
 17866                           ;incstack = 0
 17867  003E30  D016               	goto	u8570
 17868  003E32                     
 17869                           ;uart.c: 55: TXREG1 = *str++;
 17870  003E32  C098  FFF6         	movff	UARTTransmitText@str,tblptrl
 17871  003E36  C099  FFF7         	movff	UARTTransmitText@str+1,tblptrh
 17872  003E3A  6AF8               	clrf	tblptru,c
 17873  003E3C  0E07               	movlw	(high __ramtop+-1)
 17874  003E3E  64F7               	cpfsgt	tblptrh,c
 17875  003E40  D003               	bra	u8567
 17876  003E42  0008               	tblrd		*
 17877  003E44  50F5               	movf	tablat,w,c
 17878  003E46  D005               	bra	u8560
 17879  003E48                     u8567:
 17880  003E48  CFF6 FFE9          	movff	tblptrl,fsr0l
 17881  003E4C  CFF7 FFEA          	movff	tblptrh,fsr0h
 17882  003E50  50EF               	movf	indf0,w,c
 17883  003E52                     u8560:
 17884  003E52  6EAD               	movwf	4013,c	;volatile
 17885  003E54  0100               	movlb	0	; () banked
 17886  003E56  4B98               	infsnz	UARTTransmitText@str& (0+255),f,b
 17887  003E58  2B99               	incf	(UARTTransmitText@str+1)& (0+255),f,b
 17888  003E5A                     
 17889                           ; BSR set to: 0
 17890  003E5A  A2AC               	btfss	4012,1,c	;volatile
 17891  003E5C  D7FE               	goto	l740
 17892  003E5E                     u8570:
 17893  003E5E  C098  FFF6         	movff	UARTTransmitText@str,tblptrl
 17894  003E62  C099  FFF7         	movff	UARTTransmitText@str+1,tblptrh
 17895  003E66  6AF8               	clrf	tblptru,c
 17896  003E68  0E07               	movlw	(high __ramtop+-1)
 17897  003E6A  64F7               	cpfsgt	tblptrh,c
 17898  003E6C  D003               	bra	u8587
 17899  003E6E  0008               	tblrd		*
 17900  003E70  50F5               	movf	tablat,w,c
 17901  003E72  D005               	bra	u8580
 17902  003E74                     u8587:
 17903  003E74  CFF6 FFE9          	movff	tblptrl,fsr0l
 17904  003E78  CFF7 FFEA          	movff	tblptrh,fsr0h
 17905  003E7C  50EF               	movf	indf0,w,c
 17906  003E7E                     u8580:
 17907  003E7E  0900               	iorlw	0
 17908  003E80  B4D8               	btfsc	status,2,c
 17909  003E82  0012               	return	
 17910  003E84  D7D6               	goto	l738
 17911  003E86                     __end_of_UARTTransmitText:
 17912                           	opt stack 0
 17913                           tblptru	equ	0xFF8
 17914                           tblptrh	equ	0xFF7
 17915                           tblptrl	equ	0xFF6
 17916                           tablat	equ	0xFF5
 17917                           prodh	equ	0xFF4
 17918                           prodl	equ	0xFF3
 17919                           intcon	equ	0xFF2
 17920                           intcon3	equ	0xFF0
 17921                           indf0	equ	0xFEF
 17922                           postinc0	equ	0xFEE
 17923                           plusw0	equ	0xFEB
 17924                           fsr0h	equ	0xFEA
 17925                           fsr0l	equ	0xFE9
 17926                           wreg	equ	0xFE8
 17927                           indf1	equ	0xFE7
 17928                           postinc1	equ	0xFE6
 17929                           postdec1	equ	0xFE5
 17930                           plusw1	equ	0xFE3
 17931                           fsr1h	equ	0xFE2
 17932                           fsr1l	equ	0xFE1
 17933                           indf2	equ	0xFDF
 17934                           postinc2	equ	0xFDE
 17935                           postdec2	equ	0xFDD
 17936                           plusw2	equ	0xFDB
 17937                           fsr2h	equ	0xFDA
 17938                           fsr2l	equ	0xFD9
 17939                           status	equ	0xFD8
 17940                           
 17941 ;; *************** function _ethernetController_checkDeviceId *****************
 17942 ;; Defined at:
 17943 ;;		line 133 in file "src/enc424j600/ENC424J600.c"
 17944 ;; Parameters:    Size  Location     Type
 17945 ;;		None
 17946 ;; Auto vars:     Size  Location     Type
 17947 ;;  err             3   18[BANK0 ] struct error
 17948 ;;  data            1   17[BANK0 ] unsigned char 
 17949 ;; Return value:  Size  Location     Type
 17950 ;;                  3   14[BANK0 ] struct error
 17951 ;; Registers used:
 17952 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17953 ;; Tracked objects:
 17954 ;;		On entry : 0/0
 17955 ;;		On exit  : 0/0
 17956 ;;		Unchanged: 0/0
 17957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17958 ;;      Params:         0       3       0       0       0       0       0       0       0
 17959 ;;      Locals:         0       4       0       0       0       0       0       0       0
 17960 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17961 ;;      Totals:         0       7       0       0       0       0       0       0       0
 17962 ;;Total ram usage:        7 bytes
 17963 ;; Hardware stack levels used:    1
 17964 ;; Hardware stack levels required when called:    7
 17965 ;; This function calls:
 17966 ;;		_ENC424J600_readControlRegisterUnbanked
 17967 ;; This function is called by:
 17968 ;;		_ethernetController_init
 17969 ;;		_main
 17970 ;; This function uses a non-reentrant model
 17971 ;;
 17972                           
 17973                           	psect	text72
 17974  003FCE                     __ptext72:
 17975                           	opt stack 0
 17976  003FCE                     _ethernetController_checkDeviceId:
 17977                           	opt stack 22
 17978                           
 17979                           ;ENC424J600.c: 134: error_t err;
 17980                           ;ENC424J600.c: 135: err.module = ERROR_MODULE_ETHERNET_CONTROLLER;
 17981                           
 17982                           ;incstack = 0
 17983  003FCE  0E01               	movlw	1
 17984  003FD0  0100               	movlb	0	; () banked
 17985  003FD2  6F72               	movwf	ethernetController_checkDeviceId@err& (0+255),b
 17986                           
 17987                           ;ENC424J600.c: 136: err.code = (uint16_t)0;
 17988  003FD4  0E00               	movlw	0
 17989  003FD6  6F74               	movwf	(ethernetController_checkDeviceId@err+2)& (0+255),b
 17990  003FD8  0E00               	movlw	0
 17991  003FDA  6F73               	movwf	(ethernetController_checkDeviceId@err+1)& (0+255),b
 17992                           
 17993                           ;ENC424J600.c: 137: uint8_t data = 0;
 17994  003FDC  0E00               	movlw	0
 17995  003FDE  6F71               	movwf	ethernetController_checkDeviceId@data& (0+255),b
 17996                           
 17997                           ; BSR set to: 0
 17998                           ;ENC424J600.c: 138: ENC424J600_readControlRegisterUnbanked(0x14 + 0x60, &data);
 17999  003FE0  0E71               	movlw	low ethernetController_checkDeviceId@data
 18000  003FE2  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 18001  003FE4  0E00               	movlw	high ethernetController_checkDeviceId@data
 18002  003FE6  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 18003  003FE8  0E74               	movlw	116
 18004  003FEA  EC67  F021         	call	_ENC424J600_readControlRegisterUnbanked
 18005                           
 18006                           ;ENC424J600.c: 139: if (((data >> 5)&0x07) == 0b001)
 18007  003FEE  0100               	movlb	0	; () banked
 18008  003FF0  3971               	swapf	ethernetController_checkDeviceId@data& (0+255),w,b
 18009  003FF2  42E8               	rrncf	wreg,f,c
 18010  003FF4  0B07               	andlw	7
 18011  003FF6  0B07               	andlw	7
 18012  003FF8  06E8               	decf	wreg,f,c
 18013  003FFA  A4D8               	btfss	status,2,c
 18014  003FFC  D004               	goto	l88
 18015                           
 18016                           ; BSR set to: 0
 18017                           ;ENC424J600.c: 140: err.code = (uint16_t)0;
 18018  003FFE  0E00               	movlw	0
 18019  004000  6F74               	movwf	(ethernetController_checkDeviceId@err+2)& (0+255),b
 18020  004002  0E00               	movlw	0
 18021  004004  D003               	goto	L8
 18022  004006                     l88:
 18023                           
 18024                           ; BSR set to: 0
 18025                           ;ENC424J600.c: 141: else
 18026                           ;ENC424J600.c: 142: err.code = ERROR_ETHERNET_CONTROLLER_UNKNOWN_DEVICE_ID;
 18027                           
 18028                           ; BSR set to: 0
 18029  004006  0E01               	movlw	1
 18030  004008  6F74               	movwf	(ethernetController_checkDeviceId@err+2)& (0+255),b
 18031  00400A  0E2D               	movlw	45
 18032  00400C                     L8:
 18033  00400C  6F73               	movwf	(ethernetController_checkDeviceId@err+1)& (0+255),b
 18034                           
 18035                           ; BSR set to: 0
 18036                           ;ENC424J600.c: 143: return err;
 18037                           
 18038                           ; BSR set to: 0
 18039  00400E  C072  F06E         	movff	ethernetController_checkDeviceId@err,?_ethernetController_checkDeviceId
 18040  004012  C073  F06F         	movff	ethernetController_checkDeviceId@err+1,?_ethernetController_checkDeviceId+1
 18041  004016  C074  F070         	movff	ethernetController_checkDeviceId@err+2,?_ethernetController_checkDeviceId+2
 18042  00401A  0012               	return	
 18043  00401C                     __end_of_ethernetController_checkDeviceId:
 18044                           	opt stack 0
 18045                           tblptru	equ	0xFF8
 18046                           tblptrh	equ	0xFF7
 18047                           tblptrl	equ	0xFF6
 18048                           tablat	equ	0xFF5
 18049                           prodh	equ	0xFF4
 18050                           prodl	equ	0xFF3
 18051                           intcon	equ	0xFF2
 18052                           intcon3	equ	0xFF0
 18053                           indf0	equ	0xFEF
 18054                           postinc0	equ	0xFEE
 18055                           plusw0	equ	0xFEB
 18056                           fsr0h	equ	0xFEA
 18057                           fsr0l	equ	0xFE9
 18058                           wreg	equ	0xFE8
 18059                           indf1	equ	0xFE7
 18060                           postinc1	equ	0xFE6
 18061                           postdec1	equ	0xFE5
 18062                           plusw1	equ	0xFE3
 18063                           fsr1h	equ	0xFE2
 18064                           fsr1l	equ	0xFE1
 18065                           indf2	equ	0xFDF
 18066                           postinc2	equ	0xFDE
 18067                           postdec2	equ	0xFDD
 18068                           plusw2	equ	0xFDB
 18069                           fsr2h	equ	0xFDA
 18070                           fsr2l	equ	0xFD9
 18071                           status	equ	0xFD8
 18072                           
 18073 ;; *************** function _ENC424J600_setRXTailPointer *****************
 18074 ;; Defined at:
 18075 ;;		line 555 in file "src/enc424j600/ENC424J600.c"
 18076 ;; Parameters:    Size  Location     Type
 18077 ;;  addr            2   14[BANK0 ] unsigned int 
 18078 ;; Auto vars:     Size  Location     Type
 18079 ;;  highByte        1   17[BANK0 ] unsigned char 
 18080 ;;  lowByte         1   16[BANK0 ] unsigned char 
 18081 ;; Return value:  Size  Location     Type
 18082 ;;                  1    wreg      void 
 18083 ;; Registers used:
 18084 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18085 ;; Tracked objects:
 18086 ;;		On entry : 0/0
 18087 ;;		On exit  : 0/0
 18088 ;;		Unchanged: 0/0
 18089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18090 ;;      Params:         0       2       0       0       0       0       0       0       0
 18091 ;;      Locals:         0       2       0       0       0       0       0       0       0
 18092 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18093 ;;      Totals:         0       4       0       0       0       0       0       0       0
 18094 ;;Total ram usage:        4 bytes
 18095 ;; Hardware stack levels used:    1
 18096 ;; Hardware stack levels required when called:    7
 18097 ;; This function calls:
 18098 ;;		_ENC424J600_writeControlRegisterUnbanked
 18099 ;; This function is called by:
 18100 ;;		_ethernetController_init
 18101 ;;		_ethernetController_streamFromRXBuffer
 18102 ;;		_ethernetController_dropPacket
 18103 ;; This function uses a non-reentrant model
 18104 ;;
 18105                           
 18106                           	psect	text73
 18107  0043E6                     __ptext73:
 18108                           	opt stack 0
 18109  0043E6                     _ENC424J600_setRXTailPointer:
 18110                           	opt stack 19
 18111                           
 18112                           ;ENC424J600.c: 556: uint8_t lowByte = addr & 0x00ff;
 18113                           
 18114                           ; BSR set to: 0
 18115                           ;incstack = 0
 18116  0043E6  C06E  F070         	movff	ENC424J600_setRXTailPointer@addr,ENC424J600_setRXTailPointer@lowByte
 18117                           
 18118                           ;ENC424J600.c: 557: uint8_t highByte = (addr >> 8) & 0xff;
 18119  0043EA  0100               	movlb	0	; () banked
 18120  0043EC  516F               	movf	(ENC424J600_setRXTailPointer@addr+1)& (0+255),w,b
 18121  0043EE  6F71               	movwf	ENC424J600_setRXTailPointer@highByte& (0+255),b
 18122                           
 18123                           ; BSR set to: 0
 18124                           ;ENC424J600.c: 558: ENC424J600_writeControlRegisterUnbanked(0x06 + 0x00, &lowByte);
 18125  0043F0  0E70               	movlw	low ENC424J600_setRXTailPointer@lowByte
 18126  0043F2  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 18127  0043F4  0E00               	movlw	high ENC424J600_setRXTailPointer@lowByte
 18128  0043F6  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 18129  0043F8  0E06               	movlw	6
 18130  0043FA  EC4C  F021         	call	_ENC424J600_writeControlRegisterUnbanked
 18131                           
 18132                           ;ENC424J600.c: 559: ENC424J600_writeControlRegisterUnbanked(0x07 + 0x00, &highByte);
 18133  0043FE  0E71               	movlw	low ENC424J600_setRXTailPointer@highByte
 18134  004400  0100               	movlb	0	; () banked
 18135  004402  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 18136  004404  0E00               	movlw	high ENC424J600_setRXTailPointer@highByte
 18137  004406  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 18138  004408  0E07               	movlw	7
 18139  00440A  EC4C  F021         	call	_ENC424J600_writeControlRegisterUnbanked
 18140  00440E  0012               	return		;funcret
 18141  004410                     __end_of_ENC424J600_setRXTailPointer:
 18142                           	opt stack 0
 18143                           tblptru	equ	0xFF8
 18144                           tblptrh	equ	0xFF7
 18145                           tblptrl	equ	0xFF6
 18146                           tablat	equ	0xFF5
 18147                           prodh	equ	0xFF4
 18148                           prodl	equ	0xFF3
 18149                           intcon	equ	0xFF2
 18150                           intcon3	equ	0xFF0
 18151                           indf0	equ	0xFEF
 18152                           postinc0	equ	0xFEE
 18153                           plusw0	equ	0xFEB
 18154                           fsr0h	equ	0xFEA
 18155                           fsr0l	equ	0xFE9
 18156                           wreg	equ	0xFE8
 18157                           indf1	equ	0xFE7
 18158                           postinc1	equ	0xFE6
 18159                           postdec1	equ	0xFE5
 18160                           plusw1	equ	0xFE3
 18161                           fsr1h	equ	0xFE2
 18162                           fsr1l	equ	0xFE1
 18163                           indf2	equ	0xFDF
 18164                           postinc2	equ	0xFDE
 18165                           postdec2	equ	0xFDD
 18166                           plusw2	equ	0xFDB
 18167                           fsr2h	equ	0xFDA
 18168                           fsr2l	equ	0xFD9
 18169                           status	equ	0xFD8
 18170                           
 18171 ;; *************** function _ENC424J600_setRXBufferStartAddress *****************
 18172 ;; Defined at:
 18173 ;;		line 548 in file "src/enc424j600/ENC424J600.c"
 18174 ;; Parameters:    Size  Location     Type
 18175 ;;  addr            2   14[BANK0 ] unsigned int 
 18176 ;; Auto vars:     Size  Location     Type
 18177 ;;  highByte        1   17[BANK0 ] unsigned char 
 18178 ;;  lowByte         1   16[BANK0 ] unsigned char 
 18179 ;; Return value:  Size  Location     Type
 18180 ;;                  1    wreg      void 
 18181 ;; Registers used:
 18182 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18183 ;; Tracked objects:
 18184 ;;		On entry : 0/0
 18185 ;;		On exit  : 0/0
 18186 ;;		Unchanged: 0/0
 18187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18188 ;;      Params:         0       2       0       0       0       0       0       0       0
 18189 ;;      Locals:         0       2       0       0       0       0       0       0       0
 18190 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18191 ;;      Totals:         0       4       0       0       0       0       0       0       0
 18192 ;;Total ram usage:        4 bytes
 18193 ;; Hardware stack levels used:    1
 18194 ;; Hardware stack levels required when called:    7
 18195 ;; This function calls:
 18196 ;;		_ENC424J600_writeControlRegisterUnbanked
 18197 ;; This function is called by:
 18198 ;;		_ethernetController_init
 18199 ;; This function uses a non-reentrant model
 18200 ;;
 18201                           
 18202                           	psect	text74
 18203  004410                     __ptext74:
 18204                           	opt stack 0
 18205  004410                     _ENC424J600_setRXBufferStartAddress:
 18206                           	opt stack 22
 18207                           
 18208                           ;ENC424J600.c: 549: uint8_t lowByte = addr & 0x00ff;
 18209                           
 18210                           ;incstack = 0
 18211  004410  C06E  F070         	movff	ENC424J600_setRXBufferStartAddress@addr,ENC424J600_setRXBufferStartAddress@lowByt
      +                          e
 18212                           
 18213                           ;ENC424J600.c: 550: uint8_t highByte = (addr >> 8) & 0xff;
 18214  004414  0100               	movlb	0	; () banked
 18215  004416  516F               	movf	(ENC424J600_setRXBufferStartAddress@addr+1)& (0+255),w,b
 18216  004418  6F71               	movwf	ENC424J600_setRXBufferStartAddress@highByte& (0+255),b
 18217                           
 18218                           ; BSR set to: 0
 18219                           ;ENC424J600.c: 551: ENC424J600_writeControlRegisterUnbanked(0x04 + 0x00, &lowByte);
 18220  00441A  0E70               	movlw	low ENC424J600_setRXBufferStartAddress@lowByte
 18221  00441C  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 18222  00441E  0E00               	movlw	high ENC424J600_setRXBufferStartAddress@lowByte
 18223  004420  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 18224  004422  0E04               	movlw	4
 18225  004424  EC4C  F021         	call	_ENC424J600_writeControlRegisterUnbanked
 18226                           
 18227                           ;ENC424J600.c: 552: ENC424J600_writeControlRegisterUnbanked(0x05 + 0x00, &highByte);
 18228  004428  0E71               	movlw	low ENC424J600_setRXBufferStartAddress@highByte
 18229  00442A  0100               	movlb	0	; () banked
 18230  00442C  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 18231  00442E  0E00               	movlw	high ENC424J600_setRXBufferStartAddress@highByte
 18232  004430  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 18233  004432  0E05               	movlw	5
 18234  004434  EC4C  F021         	call	_ENC424J600_writeControlRegisterUnbanked
 18235  004438  0012               	return		;funcret
 18236  00443A                     __end_of_ENC424J600_setRXBufferStartAddress:
 18237                           	opt stack 0
 18238                           tblptru	equ	0xFF8
 18239                           tblptrh	equ	0xFF7
 18240                           tblptrl	equ	0xFF6
 18241                           tablat	equ	0xFF5
 18242                           prodh	equ	0xFF4
 18243                           prodl	equ	0xFF3
 18244                           intcon	equ	0xFF2
 18245                           intcon3	equ	0xFF0
 18246                           indf0	equ	0xFEF
 18247                           postinc0	equ	0xFEE
 18248                           plusw0	equ	0xFEB
 18249                           fsr0h	equ	0xFEA
 18250                           fsr0l	equ	0xFE9
 18251                           wreg	equ	0xFE8
 18252                           indf1	equ	0xFE7
 18253                           postinc1	equ	0xFE6
 18254                           postdec1	equ	0xFE5
 18255                           plusw1	equ	0xFE3
 18256                           fsr1h	equ	0xFE2
 18257                           fsr1l	equ	0xFE1
 18258                           indf2	equ	0xFDF
 18259                           postinc2	equ	0xFDE
 18260                           postdec2	equ	0xFDD
 18261                           plusw2	equ	0xFDB
 18262                           fsr2h	equ	0xFDA
 18263                           fsr2l	equ	0xFD9
 18264                           status	equ	0xFD8
 18265                           
 18266 ;; *************** function _ENC424J600_setNextPacketPointer *****************
 18267 ;; Defined at:
 18268 ;;		line 562 in file "src/enc424j600/ENC424J600.c"
 18269 ;; Parameters:    Size  Location     Type
 18270 ;;  ptr             2    0[BANK0 ] unsigned int 
 18271 ;; Auto vars:     Size  Location     Type
 18272 ;;		None
 18273 ;; Return value:  Size  Location     Type
 18274 ;;                  1    wreg      void 
 18275 ;; Registers used:
 18276 ;;		None
 18277 ;; Tracked objects:
 18278 ;;		On entry : 0/0
 18279 ;;		On exit  : 0/0
 18280 ;;		Unchanged: 0/0
 18281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18282 ;;      Params:         0       2       0       0       0       0       0       0       0
 18283 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18284 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18285 ;;      Totals:         0       2       0       0       0       0       0       0       0
 18286 ;;Total ram usage:        2 bytes
 18287 ;; Hardware stack levels used:    1
 18288 ;; Hardware stack levels required when called:    4
 18289 ;; This function calls:
 18290 ;;		Nothing
 18291 ;; This function is called by:
 18292 ;;		_ethernetController_init
 18293 ;;		_ethernetController_updateNextPacketPointer
 18294 ;; This function uses a non-reentrant model
 18295 ;;
 18296                           
 18297                           	psect	text75
 18298  0046D6                     __ptext75:
 18299                           	opt stack 0
 18300  0046D6                     _ENC424J600_setNextPacketPointer:
 18301                           	opt stack 23
 18302                           
 18303                           ;ENC424J600.c: 563: nextPacketPointer = ptr;
 18304                           
 18305                           ;incstack = 0
 18306  0046D6  C060  F047         	movff	ENC424J600_setNextPacketPointer@ptr,_nextPacketPointer
 18307  0046DA  C061  F048         	movff	ENC424J600_setNextPacketPointer@ptr+1,_nextPacketPointer+1
 18308  0046DE  0012               	return		;funcret
 18309  0046E0                     __end_of_ENC424J600_setNextPacketPointer:
 18310                           	opt stack 0
 18311                           tblptru	equ	0xFF8
 18312                           tblptrh	equ	0xFF7
 18313                           tblptrl	equ	0xFF6
 18314                           tablat	equ	0xFF5
 18315                           prodh	equ	0xFF4
 18316                           prodl	equ	0xFF3
 18317                           intcon	equ	0xFF2
 18318                           intcon3	equ	0xFF0
 18319                           indf0	equ	0xFEF
 18320                           postinc0	equ	0xFEE
 18321                           plusw0	equ	0xFEB
 18322                           fsr0h	equ	0xFEA
 18323                           fsr0l	equ	0xFE9
 18324                           wreg	equ	0xFE8
 18325                           indf1	equ	0xFE7
 18326                           postinc1	equ	0xFE6
 18327                           postdec1	equ	0xFE5
 18328                           plusw1	equ	0xFE3
 18329                           fsr1h	equ	0xFE2
 18330                           fsr1l	equ	0xFE1
 18331                           indf2	equ	0xFDF
 18332                           postinc2	equ	0xFDE
 18333                           postdec2	equ	0xFDD
 18334                           plusw2	equ	0xFDB
 18335                           fsr2h	equ	0xFDA
 18336                           fsr2l	equ	0xFD9
 18337                           status	equ	0xFD8
 18338                           
 18339 ;; *************** function _ENC424J600_enableReception *****************
 18340 ;; Defined at:
 18341 ;;		line 497 in file "src/enc424j600/ENC424J600.c"
 18342 ;; Parameters:    Size  Location     Type
 18343 ;;		None
 18344 ;; Auto vars:     Size  Location     Type
 18345 ;;		None
 18346 ;; Return value:  Size  Location     Type
 18347 ;;                  1    wreg      void 
 18348 ;; Registers used:
 18349 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18350 ;; Tracked objects:
 18351 ;;		On entry : 0/0
 18352 ;;		On exit  : 0/0
 18353 ;;		Unchanged: 0/0
 18354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18355 ;;      Params:         0       0       0       0       0       0       0       0       0
 18356 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18357 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18358 ;;      Totals:         0       0       0       0       0       0       0       0       0
 18359 ;;Total ram usage:        0 bytes
 18360 ;; Hardware stack levels used:    1
 18361 ;; Hardware stack levels required when called:    7
 18362 ;; This function calls:
 18363 ;;		_ENC424J600_writeSingleByte
 18364 ;; This function is called by:
 18365 ;;		_ethernetController_init
 18366 ;;		_ethernetController_enableReception
 18367 ;; This function uses a non-reentrant model
 18368 ;;
 18369                           
 18370                           	psect	text76
 18371  0046E0                     __ptext76:
 18372                           	opt stack 0
 18373  0046E0                     _ENC424J600_enableReception:
 18374                           	opt stack 22
 18375                           
 18376                           ;ENC424J600.c: 498: ENC424J600_writeSingleByte(0b11101000);
 18377                           
 18378                           ;incstack = 0
 18379  0046E0  0EE8               	movlw	232
 18380  0046E2  EC29  F023         	call	_ENC424J600_writeSingleByte
 18381  0046E6  0012               	return		;funcret
 18382  0046E8                     __end_of_ENC424J600_enableReception:
 18383                           	opt stack 0
 18384                           tblptru	equ	0xFF8
 18385                           tblptrh	equ	0xFF7
 18386                           tblptrl	equ	0xFF6
 18387                           tablat	equ	0xFF5
 18388                           prodh	equ	0xFF4
 18389                           prodl	equ	0xFF3
 18390                           intcon	equ	0xFF2
 18391                           intcon3	equ	0xFF0
 18392                           indf0	equ	0xFEF
 18393                           postinc0	equ	0xFEE
 18394                           plusw0	equ	0xFEB
 18395                           fsr0h	equ	0xFEA
 18396                           fsr0l	equ	0xFE9
 18397                           wreg	equ	0xFE8
 18398                           indf1	equ	0xFE7
 18399                           postinc1	equ	0xFE6
 18400                           postdec1	equ	0xFE5
 18401                           plusw1	equ	0xFE3
 18402                           fsr1h	equ	0xFE2
 18403                           fsr1l	equ	0xFE1
 18404                           indf2	equ	0xFDF
 18405                           postinc2	equ	0xFDE
 18406                           postdec2	equ	0xFDD
 18407                           plusw2	equ	0xFDB
 18408                           fsr2h	equ	0xFDA
 18409                           fsr2l	equ	0xFD9
 18410                           status	equ	0xFD8
 18411                           
 18412 ;; *************** function _ENC424J600_writeSingleByte *****************
 18413 ;; Defined at:
 18414 ;;		line 649 in file "src/enc424j600/ENC424J600.c"
 18415 ;; Parameters:    Size  Location     Type
 18416 ;;  opcode          1    wreg     unsigned char 
 18417 ;; Auto vars:     Size  Location     Type
 18418 ;;  opcode          1   10[BANK0 ] unsigned char 
 18419 ;; Return value:  Size  Location     Type
 18420 ;;                  1    wreg      void 
 18421 ;; Registers used:
 18422 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18423 ;; Tracked objects:
 18424 ;;		On entry : 0/0
 18425 ;;		On exit  : 0/0
 18426 ;;		Unchanged: 0/0
 18427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18428 ;;      Params:         0       0       0       0       0       0       0       0       0
 18429 ;;      Locals:         0       1       0       0       0       0       0       0       0
 18430 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18431 ;;      Totals:         0       1       0       0       0       0       0       0       0
 18432 ;;Total ram usage:        1 bytes
 18433 ;; Hardware stack levels used:    1
 18434 ;; Hardware stack levels required when called:    6
 18435 ;; This function calls:
 18436 ;;		_ENC424J600_writeSPI
 18437 ;; This function is called by:
 18438 ;;		_ethernetController_softReset
 18439 ;;		_ethernetController_sendPacket
 18440 ;;		_ethernetController_streamFromRXBuffer
 18441 ;;		_ethernetController_dropPacket
 18442 ;;		_ENC424J600_enableReception
 18443 ;; This function uses a non-reentrant model
 18444 ;;
 18445                           
 18446                           	psect	text77
 18447  004652                     __ptext77:
 18448                           	opt stack 0
 18449  004652                     _ENC424J600_writeSingleByte:
 18450                           	opt stack 21
 18451                           
 18452                           ;incstack = 0
 18453                           ;ENC424J600_writeSingleByte@opcode stored from wreg
 18454  004652  0100               	movlb	0	; () banked
 18455  004654  6F6A               	movwf	ENC424J600_writeSingleByte@opcode& (0+255),b
 18456                           
 18457                           ;ENC424J600.c: 650: PORTBbits.RB4=0;
 18458  004656  9881               	bcf	3969,4,c	;volatile
 18459                           
 18460                           ;ENC424J600.c: 651: ENC424J600_writeSPI(&opcode);
 18461  004658  0E6A               	movlw	low ENC424J600_writeSingleByte@opcode
 18462  00465A  0100               	movlb	0	; () banked
 18463  00465C  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 18464  00465E  0E00               	movlw	high ENC424J600_writeSingleByte@opcode
 18465  004660  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 18466  004662  ECB5  F01E         	call	_ENC424J600_writeSPI	;wreg free
 18467                           
 18468                           ;ENC424J600.c: 652: PORTBbits.RB4=1;
 18469  004666  8881               	bsf	3969,4,c	;volatile
 18470  004668  0012               	return		;funcret
 18471  00466A                     __end_of_ENC424J600_writeSingleByte:
 18472                           	opt stack 0
 18473                           tblptru	equ	0xFF8
 18474                           tblptrh	equ	0xFF7
 18475                           tblptrl	equ	0xFF6
 18476                           tablat	equ	0xFF5
 18477                           prodh	equ	0xFF4
 18478                           prodl	equ	0xFF3
 18479                           intcon	equ	0xFF2
 18480                           intcon3	equ	0xFF0
 18481                           indf0	equ	0xFEF
 18482                           postinc0	equ	0xFEE
 18483                           plusw0	equ	0xFEB
 18484                           fsr0h	equ	0xFEA
 18485                           fsr0l	equ	0xFE9
 18486                           wreg	equ	0xFE8
 18487                           indf1	equ	0xFE7
 18488                           postinc1	equ	0xFE6
 18489                           postdec1	equ	0xFE5
 18490                           plusw1	equ	0xFE3
 18491                           fsr1h	equ	0xFE2
 18492                           fsr1l	equ	0xFE1
 18493                           indf2	equ	0xFDF
 18494                           postinc2	equ	0xFDE
 18495                           postdec2	equ	0xFDD
 18496                           plusw2	equ	0xFDB
 18497                           fsr2h	equ	0xFDA
 18498                           fsr2l	equ	0xFD9
 18499                           status	equ	0xFD8
 18500                           
 18501 ;; *************** function _ENC424J600_enableAutoMACInsertion *****************
 18502 ;; Defined at:
 18503 ;;		line 576 in file "src/enc424j600/ENC424J600.c"
 18504 ;; Parameters:    Size  Location     Type
 18505 ;;		None
 18506 ;; Auto vars:     Size  Location     Type
 18507 ;;  temp            1   14[BANK0 ] unsigned char 
 18508 ;; Return value:  Size  Location     Type
 18509 ;;                  1    wreg      void 
 18510 ;; Registers used:
 18511 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18512 ;; Tracked objects:
 18513 ;;		On entry : 0/0
 18514 ;;		On exit  : 0/0
 18515 ;;		Unchanged: 0/0
 18516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18517 ;;      Params:         0       0       0       0       0       0       0       0       0
 18518 ;;      Locals:         0       1       0       0       0       0       0       0       0
 18519 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18520 ;;      Totals:         0       1       0       0       0       0       0       0       0
 18521 ;;Total ram usage:        1 bytes
 18522 ;; Hardware stack levels used:    1
 18523 ;; Hardware stack levels required when called:    7
 18524 ;; This function calls:
 18525 ;;		_ENC424J600_readControlRegisterUnbanked
 18526 ;;		_ENC424J600_writeControlRegisterUnbanked
 18527 ;; This function is called by:
 18528 ;;		_ethernetController_init
 18529 ;; This function uses a non-reentrant model
 18530 ;;
 18531                           
 18532                           	psect	text78
 18533  00448A                     __ptext78:
 18534                           	opt stack 0
 18535  00448A                     _ENC424J600_enableAutoMACInsertion:
 18536                           	opt stack 22
 18537                           
 18538                           ;ENC424J600.c: 577: uint8_t temp = 0;
 18539                           
 18540                           ;incstack = 0
 18541  00448A  0E00               	movlw	0
 18542  00448C  0100               	movlb	0	; () banked
 18543  00448E  6F6E               	movwf	ENC424J600_enableAutoMACInsertion@temp& (0+255),b
 18544                           
 18545                           ; BSR set to: 0
 18546                           ;ENC424J600.c: 578: ENC424J600_readControlRegisterUnbanked(0x0F + 0x60, &temp);
 18547  004490  0E6E               	movlw	low ENC424J600_enableAutoMACInsertion@temp
 18548  004492  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 18549  004494  0E00               	movlw	high ENC424J600_enableAutoMACInsertion@temp
 18550  004496  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 18551  004498  0E6F               	movlw	111
 18552  00449A  EC67  F021         	call	_ENC424J600_readControlRegisterUnbanked
 18553                           
 18554                           ;ENC424J600.c: 579: temp |= (1 << 5);
 18555  00449E  0100               	movlb	0	; () banked
 18556  0044A0  8B6E               	bsf	ENC424J600_enableAutoMACInsertion@temp& (0+255),5,b
 18557                           
 18558                           ; BSR set to: 0
 18559                           ;ENC424J600.c: 580: ENC424J600_writeControlRegisterUnbanked(0x0F + 0x60, &temp);
 18560  0044A2  0E6E               	movlw	low ENC424J600_enableAutoMACInsertion@temp
 18561  0044A4  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 18562  0044A6  0E00               	movlw	high ENC424J600_enableAutoMACInsertion@temp
 18563  0044A8  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 18564  0044AA  0E6F               	movlw	111
 18565  0044AC  EC4C  F021         	call	_ENC424J600_writeControlRegisterUnbanked
 18566  0044B0  0012               	return		;funcret
 18567  0044B2                     __end_of_ENC424J600_enableAutoMACInsertion:
 18568                           	opt stack 0
 18569                           tblptru	equ	0xFF8
 18570                           tblptrh	equ	0xFF7
 18571                           tblptrl	equ	0xFF6
 18572                           tablat	equ	0xFF5
 18573                           prodh	equ	0xFF4
 18574                           prodl	equ	0xFF3
 18575                           intcon	equ	0xFF2
 18576                           intcon3	equ	0xFF0
 18577                           indf0	equ	0xFEF
 18578                           postinc0	equ	0xFEE
 18579                           plusw0	equ	0xFEB
 18580                           fsr0h	equ	0xFEA
 18581                           fsr0l	equ	0xFE9
 18582                           wreg	equ	0xFE8
 18583                           indf1	equ	0xFE7
 18584                           postinc1	equ	0xFE6
 18585                           postdec1	equ	0xFE5
 18586                           plusw1	equ	0xFE3
 18587                           fsr1h	equ	0xFE2
 18588                           fsr1l	equ	0xFE1
 18589                           indf2	equ	0xFDF
 18590                           postinc2	equ	0xFDE
 18591                           postdec2	equ	0xFDD
 18592                           plusw2	equ	0xFDB
 18593                           fsr2h	equ	0xFDA
 18594                           fsr2l	equ	0xFD9
 18595                           status	equ	0xFD8
 18596                           
 18597 ;; *************** function _ENC424J600_writeControlRegisterUnbanked *****************
 18598 ;; Defined at:
 18599 ;;		line 590 in file "src/enc424j600/ENC424J600.c"
 18600 ;; Parameters:    Size  Location     Type
 18601 ;;  addr            1    wreg     unsigned char 
 18602 ;;  data            2   10[BANK0 ] PTR unsigned char 
 18603 ;;		 -> ENC424J600_clearInterruptFlag@temp(1), ENC424J600_readPHYRegister@temp(1), ENC424J600_readPHYRegister@unusedBits
      +(1), ENC424J600_readPHYRegister@PHYaddress(1), 
 18604 ;;		 -> ENC424J600_disableAutoMACInsertion@temp(1), ENC424J600_enableAutoMACInsertion@temp(1), ENC424J600_setRXTailPoint
      +er@highByte(1), ENC424J600_setRXTailPointer@lowByte(1), 
 18605 ;;		 -> ENC424J600_setRXBufferStartAddress@highByte(1), ENC424J600_setRXBufferStartAddress@lowByte(1), ENC424J600_setTXS
      +tartAddress@highByte(1), ENC424J600_setTXStartAddress@lowByte(1), 
 18606 ;;		 -> ENC424J600_setTXLength@highByte(1), ENC424J600_setTXLength@lowByte(1), ethernetController_setLEDConfiguration@da
      +ta(1), ethernetController_setLEDStatus@data(1), 
 18607 ;;		 -> mac.address(6), ethernetController_setMacAddress@mac(6), ethernetController_softReset@dataToSend(2), 
 18608 ;; Auto vars:     Size  Location     Type
 18609 ;;  addr            1   12[BANK0 ] unsigned char 
 18610 ;;  opcode          1   13[BANK0 ] unsigned char 
 18611 ;; Return value:  Size  Location     Type
 18612 ;;                  1    wreg      void 
 18613 ;; Registers used:
 18614 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18615 ;; Tracked objects:
 18616 ;;		On entry : 0/0
 18617 ;;		On exit  : 0/0
 18618 ;;		Unchanged: 0/0
 18619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18620 ;;      Params:         0       2       0       0       0       0       0       0       0
 18621 ;;      Locals:         0       2       0       0       0       0       0       0       0
 18622 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18623 ;;      Totals:         0       4       0       0       0       0       0       0       0
 18624 ;;Total ram usage:        4 bytes
 18625 ;; Hardware stack levels used:    1
 18626 ;; Hardware stack levels required when called:    6
 18627 ;; This function calls:
 18628 ;;		_ENC424J600_writeSPI
 18629 ;; This function is called by:
 18630 ;;		_ethernetController_softReset
 18631 ;;		_ethernetController_setLEDStatus
 18632 ;;		_ethernetController_setLEDConfiguration
 18633 ;;		_ENC424J600_setTXLength
 18634 ;;		_ENC424J600_setTXStartAddress
 18635 ;;		_ENC424J600_setRXBufferStartAddress
 18636 ;;		_ENC424J600_setRXTailPointer
 18637 ;;		_ENC424J600_enableAutoMACInsertion
 18638 ;;		_ENC424J600_readPHYRegister
 18639 ;;		_ENC424J600_clearInterruptFlag
 18640 ;;		_ethernetController_setMacAddress
 18641 ;;		_ENC424J600_disableAutoMACInsertion
 18642 ;; This function uses a non-reentrant model
 18643 ;;
 18644                           
 18645                           	psect	text79
 18646  004298                     __ptext79:
 18647                           	opt stack 0
 18648  004298                     _ENC424J600_writeControlRegisterUnbanked:
 18649                           	opt stack 20
 18650                           
 18651                           ;incstack = 0
 18652                           ;ENC424J600_writeControlRegisterUnbanked@addr stored from wreg
 18653  004298  0100               	movlb	0	; () banked
 18654  00429A  6F6C               	movwf	ENC424J600_writeControlRegisterUnbanked@addr& (0+255),b
 18655                           
 18656                           ;ENC424J600.c: 591: uint8_t opcode = 0x22;
 18657  00429C  0E22               	movlw	34
 18658  00429E  0100               	movlb	0	; () banked
 18659  0042A0  6F6D               	movwf	ENC424J600_writeControlRegisterUnbanked@opcode& (0+255),b
 18660                           
 18661                           ; BSR set to: 0
 18662                           ;ENC424J600.c: 592: PORTBbits.RB4=0;
 18663  0042A2  9881               	bcf	3969,4,c	;volatile
 18664                           
 18665                           ; BSR set to: 0
 18666                           ;ENC424J600.c: 593: ENC424J600_writeSPI(&opcode);
 18667  0042A4  0E6D               	movlw	low ENC424J600_writeControlRegisterUnbanked@opcode
 18668  0042A6  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 18669  0042A8  0E00               	movlw	high ENC424J600_writeControlRegisterUnbanked@opcode
 18670  0042AA  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 18671  0042AC  ECB5  F01E         	call	_ENC424J600_writeSPI	;wreg free
 18672                           
 18673                           ;ENC424J600.c: 594: ENC424J600_writeSPI(&addr);
 18674  0042B0  0E6C               	movlw	low ENC424J600_writeControlRegisterUnbanked@addr
 18675  0042B2  0100               	movlb	0	; () banked
 18676  0042B4  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 18677  0042B6  0E00               	movlw	high ENC424J600_writeControlRegisterUnbanked@addr
 18678  0042B8  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 18679  0042BA  ECB5  F01E         	call	_ENC424J600_writeSPI	;wreg free
 18680                           
 18681                           ;ENC424J600.c: 595: ENC424J600_writeSPI(data);
 18682  0042BE  C06A  F060         	movff	ENC424J600_writeControlRegisterUnbanked@data,ENC424J600_writeSPI@data
 18683  0042C2  C06B  F061         	movff	ENC424J600_writeControlRegisterUnbanked@data+1,ENC424J600_writeSPI@data+1
 18684  0042C6  ECB5  F01E         	call	_ENC424J600_writeSPI	;wreg free
 18685                           
 18686                           ;ENC424J600.c: 596: PORTBbits.RB4=1;
 18687  0042CA  8881               	bsf	3969,4,c	;volatile
 18688  0042CC  0012               	return		;funcret
 18689  0042CE                     __end_of_ENC424J600_writeControlRegisterUnbanked:
 18690                           	opt stack 0
 18691                           tblptru	equ	0xFF8
 18692                           tblptrh	equ	0xFF7
 18693                           tblptrl	equ	0xFF6
 18694                           tablat	equ	0xFF5
 18695                           prodh	equ	0xFF4
 18696                           prodl	equ	0xFF3
 18697                           intcon	equ	0xFF2
 18698                           intcon3	equ	0xFF0
 18699                           indf0	equ	0xFEF
 18700                           postinc0	equ	0xFEE
 18701                           plusw0	equ	0xFEB
 18702                           fsr0h	equ	0xFEA
 18703                           fsr0l	equ	0xFE9
 18704                           wreg	equ	0xFE8
 18705                           indf1	equ	0xFE7
 18706                           postinc1	equ	0xFE6
 18707                           postdec1	equ	0xFE5
 18708                           plusw1	equ	0xFE3
 18709                           fsr1h	equ	0xFE2
 18710                           fsr1l	equ	0xFE1
 18711                           indf2	equ	0xFDF
 18712                           postinc2	equ	0xFDE
 18713                           postdec2	equ	0xFDD
 18714                           plusw2	equ	0xFDB
 18715                           fsr2h	equ	0xFDA
 18716                           fsr2l	equ	0xFD9
 18717                           status	equ	0xFD8
 18718                           
 18719 ;; *************** function _ethernetController_getSiliconRevision *****************
 18720 ;; Defined at:
 18721 ;;		line 151 in file "src/enc424j600/ENC424J600.c"
 18722 ;; Parameters:    Size  Location     Type
 18723 ;;		None
 18724 ;; Auto vars:     Size  Location     Type
 18725 ;;  data            1   14[BANK0 ] unsigned char 
 18726 ;; Return value:  Size  Location     Type
 18727 ;;                  1    wreg      unsigned char 
 18728 ;; Registers used:
 18729 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18730 ;; Tracked objects:
 18731 ;;		On entry : 0/0
 18732 ;;		On exit  : 0/0
 18733 ;;		Unchanged: 0/0
 18734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18735 ;;      Params:         0       0       0       0       0       0       0       0       0
 18736 ;;      Locals:         0       1       0       0       0       0       0       0       0
 18737 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18738 ;;      Totals:         0       1       0       0       0       0       0       0       0
 18739 ;;Total ram usage:        1 bytes
 18740 ;; Hardware stack levels used:    1
 18741 ;; Hardware stack levels required when called:    7
 18742 ;; This function calls:
 18743 ;;		_ENC424J600_readControlRegisterUnbanked
 18744 ;; This function is called by:
 18745 ;;		_main
 18746 ;; This function uses a non-reentrant model
 18747 ;;
 18748                           
 18749                           	psect	text80
 18750  00458E                     __ptext80:
 18751                           	opt stack 0
 18752  00458E                     _ethernetController_getSiliconRevision:
 18753                           	opt stack 23
 18754                           
 18755                           ;ENC424J600.c: 152: uint8_t data = 0;
 18756                           
 18757                           ;incstack = 0
 18758  00458E  0E00               	movlw	0
 18759  004590  0100               	movlb	0	; () banked
 18760  004592  6F6E               	movwf	ethernetController_getSiliconRevision@data& (0+255),b
 18761                           
 18762                           ; BSR set to: 0
 18763                           ;ENC424J600.c: 153: ENC424J600_readControlRegisterUnbanked(0x14 + 0x60, &data);
 18764  004594  0E6E               	movlw	low ethernetController_getSiliconRevision@data
 18765  004596  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 18766  004598  0E00               	movlw	high ethernetController_getSiliconRevision@data
 18767  00459A  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 18768  00459C  0E74               	movlw	116
 18769  00459E  EC67  F021         	call	_ENC424J600_readControlRegisterUnbanked
 18770                           
 18771                           ;ENC424J600.c: 154: data &= 0x1F;
 18772  0045A2  0E1F               	movlw	31
 18773  0045A4  0100               	movlb	0	; () banked
 18774  0045A6  176E               	andwf	ethernetController_getSiliconRevision@data& (0+255),f,b
 18775                           
 18776                           ; BSR set to: 0
 18777                           ;ENC424J600.c: 155: return data;
 18778  0045A8  516E               	movf	ethernetController_getSiliconRevision@data& (0+255),w,b
 18779  0045AA  0012               	return	
 18780  0045AC                     __end_of_ethernetController_getSiliconRevision:
 18781                           	opt stack 0
 18782                           tblptru	equ	0xFF8
 18783                           tblptrh	equ	0xFF7
 18784                           tblptrl	equ	0xFF6
 18785                           tablat	equ	0xFF5
 18786                           prodh	equ	0xFF4
 18787                           prodl	equ	0xFF3
 18788                           intcon	equ	0xFF2
 18789                           intcon3	equ	0xFF0
 18790                           indf0	equ	0xFEF
 18791                           postinc0	equ	0xFEE
 18792                           plusw0	equ	0xFEB
 18793                           fsr0h	equ	0xFEA
 18794                           fsr0l	equ	0xFE9
 18795                           wreg	equ	0xFE8
 18796                           indf1	equ	0xFE7
 18797                           postinc1	equ	0xFE6
 18798                           postdec1	equ	0xFE5
 18799                           plusw1	equ	0xFE3
 18800                           fsr1h	equ	0xFE2
 18801                           fsr1l	equ	0xFE1
 18802                           indf2	equ	0xFDF
 18803                           postinc2	equ	0xFDE
 18804                           postdec2	equ	0xFDD
 18805                           plusw2	equ	0xFDB
 18806                           fsr2h	equ	0xFDA
 18807                           fsr2l	equ	0xFD9
 18808                           status	equ	0xFD8
 18809                           
 18810 ;; *************** function _ethernetController_getDeviceName *****************
 18811 ;; Defined at:
 18812 ;;		line 146 in file "src/enc424j600/ENC424J600.c"
 18813 ;; Parameters:    Size  Location     Type
 18814 ;;		None
 18815 ;; Auto vars:     Size  Location     Type
 18816 ;;  string         11    2[BANK0 ] const unsigned char [11]
 18817 ;; Return value:  Size  Location     Type
 18818 ;;                  2    0[BANK0 ] PTR unsigned char 
 18819 ;; Registers used:
 18820 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 18821 ;; Tracked objects:
 18822 ;;		On entry : 0/0
 18823 ;;		On exit  : 0/0
 18824 ;;		Unchanged: 0/0
 18825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18826 ;;      Params:         0       2       0       0       0       0       0       0       0
 18827 ;;      Locals:         0      11       0       0       0       0       0       0       0
 18828 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18829 ;;      Totals:         0      13       0       0       0       0       0       0       0
 18830 ;;Total ram usage:       13 bytes
 18831 ;; Hardware stack levels used:    1
 18832 ;; Hardware stack levels required when called:    4
 18833 ;; This function calls:
 18834 ;;		Nothing
 18835 ;; This function is called by:
 18836 ;;		_main
 18837 ;; This function uses a non-reentrant model
 18838 ;;
 18839                           
 18840                           	psect	text81
 18841  004548                     __ptext81:
 18842                           	opt stack 0
 18843  004548                     _ethernetController_getDeviceName:
 18844                           	opt stack 26
 18845                           
 18846                           ;ENC424J600.c: 147: const char string [] = "ENC424J600";
 18847                           
 18848                           ; BSR set to: 0
 18849                           ;incstack = 0
 18850  004548  0E85               	movlw	low ethernetController_getDeviceName@F5839
 18851  00454A  6EF6               	movwf	tblptrl,c
 18852  00454C                     	if	1	;There is more than 1 active tblptr byte
 18853  00454C  0E7C               	movlw	high ethernetController_getDeviceName@F5839
 18854  00454E  6EF7               	movwf	tblptrh,c
 18855  004550                     	endif
 18856  004550                     	if	0	;There are less than 3 active tblptr bytes
 18857  004550                     	endif
 18858  004550  EE20  F062         	lfsr	2,ethernetController_getDeviceName@string
 18859  004554  0E0A               	movlw	10
 18860  004556                     u10580:
 18861  004556  0009               	tblrd		*+
 18862  004558  CFF5 FFDE          	movff	tablat,postinc2
 18863  00455C  06E8               	decf	wreg,f,c
 18864  00455E  E2FB               	bc	u10580
 18865                           
 18866                           ;ENC424J600.c: 148: return string;
 18867  004560  0E62               	movlw	low ethernetController_getDeviceName@string
 18868  004562  0100               	movlb	0	; () banked
 18869  004564  6F60               	movwf	?_ethernetController_getDeviceName& (0+255),b
 18870  004566  0E00               	movlw	high ethernetController_getDeviceName@string
 18871  004568  6F61               	movwf	(?_ethernetController_getDeviceName+1)& (0+255),b
 18872  00456A  0012               	return	
 18873  00456C                     __end_of_ethernetController_getDeviceName:
 18874                           	opt stack 0
 18875                           tblptru	equ	0xFF8
 18876                           tblptrh	equ	0xFF7
 18877                           tblptrl	equ	0xFF6
 18878                           tablat	equ	0xFF5
 18879                           prodh	equ	0xFF4
 18880                           prodl	equ	0xFF3
 18881                           intcon	equ	0xFF2
 18882                           intcon3	equ	0xFF0
 18883                           indf0	equ	0xFEF
 18884                           postinc0	equ	0xFEE
 18885                           plusw0	equ	0xFEB
 18886                           fsr0h	equ	0xFEA
 18887                           fsr0l	equ	0xFE9
 18888                           wreg	equ	0xFE8
 18889                           indf1	equ	0xFE7
 18890                           postinc1	equ	0xFE6
 18891                           postdec1	equ	0xFE5
 18892                           plusw1	equ	0xFE3
 18893                           fsr1h	equ	0xFE2
 18894                           fsr1l	equ	0xFE1
 18895                           indf2	equ	0xFDF
 18896                           postinc2	equ	0xFDE
 18897                           postdec2	equ	0xFDD
 18898                           plusw2	equ	0xFDB
 18899                           fsr2h	equ	0xFDA
 18900                           fsr2l	equ	0xFD9
 18901                           status	equ	0xFD8
 18902                           
 18903 ;; *************** function _ethernetController_getCurrentPacketCount *****************
 18904 ;; Defined at:
 18905 ;;		line 487 in file "src/enc424j600/ENC424J600.c"
 18906 ;; Parameters:    Size  Location     Type
 18907 ;;		None
 18908 ;; Auto vars:     Size  Location     Type
 18909 ;;		None
 18910 ;; Return value:  Size  Location     Type
 18911 ;;                  1    wreg      unsigned char 
 18912 ;; Registers used:
 18913 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18914 ;; Tracked objects:
 18915 ;;		On entry : 0/0
 18916 ;;		On exit  : 0/0
 18917 ;;		Unchanged: 0/0
 18918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18919 ;;      Params:         0       0       0       0       0       0       0       0       0
 18920 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18921 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18922 ;;      Totals:         0       0       0       0       0       0       0       0       0
 18923 ;;Total ram usage:        0 bytes
 18924 ;; Hardware stack levels used:    1
 18925 ;; Hardware stack levels required when called:    8
 18926 ;; This function calls:
 18927 ;;		_ENC424J600_getPacketCount
 18928 ;; This function is called by:
 18929 ;;		_main
 18930 ;; This function uses a non-reentrant model
 18931 ;;
 18932                           
 18933                           	psect	text82
 18934  0046E8                     __ptext82:
 18935                           	opt stack 0
 18936  0046E8                     _ethernetController_getCurrentPacketCount:
 18937                           	opt stack 22
 18938                           
 18939                           ;ENC424J600.c: 488: return ENC424J600_getPacketCount();
 18940                           
 18941                           ; BSR set to: 0
 18942                           ;incstack = 0
 18943  0046E8  EC1C  F023         	call	_ENC424J600_getPacketCount	;wreg free
 18944  0046EC  0012               	return	
 18945  0046EE                     __end_of_ethernetController_getCurrentPacketCount:
 18946                           	opt stack 0
 18947                           tblptru	equ	0xFF8
 18948                           tblptrh	equ	0xFF7
 18949                           tblptrl	equ	0xFF6
 18950                           tablat	equ	0xFF5
 18951                           prodh	equ	0xFF4
 18952                           prodl	equ	0xFF3
 18953                           intcon	equ	0xFF2
 18954                           intcon3	equ	0xFF0
 18955                           indf0	equ	0xFEF
 18956                           postinc0	equ	0xFEE
 18957                           plusw0	equ	0xFEB
 18958                           fsr0h	equ	0xFEA
 18959                           fsr0l	equ	0xFE9
 18960                           wreg	equ	0xFE8
 18961                           indf1	equ	0xFE7
 18962                           postinc1	equ	0xFE6
 18963                           postdec1	equ	0xFE5
 18964                           plusw1	equ	0xFE3
 18965                           fsr1h	equ	0xFE2
 18966                           fsr1l	equ	0xFE1
 18967                           indf2	equ	0xFDF
 18968                           postinc2	equ	0xFDE
 18969                           postdec2	equ	0xFDD
 18970                           plusw2	equ	0xFDB
 18971                           fsr2h	equ	0xFDA
 18972                           fsr2l	equ	0xFD9
 18973                           status	equ	0xFD8
 18974                           
 18975 ;; *************** function _ENC424J600_getPacketCount *****************
 18976 ;; Defined at:
 18977 ;;		line 570 in file "src/enc424j600/ENC424J600.c"
 18978 ;; Parameters:    Size  Location     Type
 18979 ;;		None
 18980 ;; Auto vars:     Size  Location     Type
 18981 ;;  lowByte         1   14[BANK0 ] unsigned char 
 18982 ;; Return value:  Size  Location     Type
 18983 ;;                  1    wreg      unsigned char 
 18984 ;; Registers used:
 18985 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18986 ;; Tracked objects:
 18987 ;;		On entry : 0/0
 18988 ;;		On exit  : 0/0
 18989 ;;		Unchanged: 0/0
 18990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18991 ;;      Params:         0       0       0       0       0       0       0       0       0
 18992 ;;      Locals:         0       1       0       0       0       0       0       0       0
 18993 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18994 ;;      Totals:         0       1       0       0       0       0       0       0       0
 18995 ;;Total ram usage:        1 bytes
 18996 ;; Hardware stack levels used:    1
 18997 ;; Hardware stack levels required when called:    7
 18998 ;; This function calls:
 18999 ;;		_ENC424J600_readControlRegisterUnbanked
 19000 ;; This function is called by:
 19001 ;;		_ethernetController_newPacketAvailable
 19002 ;;		_ethernetController_getCurrentPacketCount
 19003 ;; This function uses a non-reentrant model
 19004 ;;
 19005                           
 19006                           	psect	text83
 19007  004638                     __ptext83:
 19008                           	opt stack 0
 19009  004638                     _ENC424J600_getPacketCount:
 19010                           	opt stack 21
 19011                           
 19012                           ;ENC424J600.c: 571: uint8_t lowByte = 0;
 19013                           
 19014                           ;incstack = 0
 19015  004638  0E00               	movlw	0
 19016  00463A  0100               	movlb	0	; () banked
 19017  00463C  6F6E               	movwf	ENC424J600_getPacketCount@lowByte& (0+255),b
 19018                           
 19019                           ; BSR set to: 0
 19020                           ;ENC424J600.c: 572: ENC424J600_readControlRegisterUnbanked(0x1A + 0x00, &lowByte);
 19021  00463E  0E6E               	movlw	low ENC424J600_getPacketCount@lowByte
 19022  004640  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 19023  004642  0E00               	movlw	high ENC424J600_getPacketCount@lowByte
 19024  004644  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 19025  004646  0E1A               	movlw	26
 19026  004648  EC67  F021         	call	_ENC424J600_readControlRegisterUnbanked
 19027                           
 19028                           ;ENC424J600.c: 573: return (uint32_t) lowByte;
 19029  00464C  0100               	movlb	0	; () banked
 19030  00464E  516E               	movf	ENC424J600_getPacketCount@lowByte& (0+255),w,b
 19031  004650  0012               	return	
 19032  004652                     __end_of_ENC424J600_getPacketCount:
 19033                           	opt stack 0
 19034                           tblptru	equ	0xFF8
 19035                           tblptrh	equ	0xFF7
 19036                           tblptrl	equ	0xFF6
 19037                           tablat	equ	0xFF5
 19038                           prodh	equ	0xFF4
 19039                           prodl	equ	0xFF3
 19040                           intcon	equ	0xFF2
 19041                           intcon3	equ	0xFF0
 19042                           indf0	equ	0xFEF
 19043                           postinc0	equ	0xFEE
 19044                           plusw0	equ	0xFEB
 19045                           fsr0h	equ	0xFEA
 19046                           fsr0l	equ	0xFE9
 19047                           wreg	equ	0xFE8
 19048                           indf1	equ	0xFE7
 19049                           postinc1	equ	0xFE6
 19050                           postdec1	equ	0xFE5
 19051                           plusw1	equ	0xFE3
 19052                           fsr1h	equ	0xFE2
 19053                           fsr1l	equ	0xFE1
 19054                           indf2	equ	0xFDF
 19055                           postinc2	equ	0xFDE
 19056                           postdec2	equ	0xFDD
 19057                           plusw2	equ	0xFDB
 19058                           fsr2h	equ	0xFDA
 19059                           fsr2l	equ	0xFD9
 19060                           status	equ	0xFD8
 19061                           
 19062 ;; *************** function _ENC424J600_readControlRegisterUnbanked *****************
 19063 ;; Defined at:
 19064 ;;		line 599 in file "src/enc424j600/ENC424J600.c"
 19065 ;; Parameters:    Size  Location     Type
 19066 ;;  addr            1    wreg     unsigned char 
 19067 ;;  data            2   10[BANK0 ] PTR unsigned char 
 19068 ;;		 -> ENC424J600_clearInterruptFlag@temp(1), ENC424J600_getInterruptFlags@low(1), ENC424J600_getInterruptFlags@high(1)
      +, ENC424J600_readPHYRegister@highByte(1), 
 19069 ;;		 -> ENC424J600_readPHYRegister@lowByte(1), ENC424J600_readPHYRegister@temp(1), ENC424J600_disableAutoMACInsertion@te
      +mp(1), ENC424J600_enableAutoMACInsertion@temp(1), 
 19070 ;;		 -> ENC424J600_getPacketCount@lowByte(1), ethernetController_setLEDConfiguration@data(1), ethernetController_setLEDS
      +tatus@data(1), ethernetController_updateLinkStatus@temp(1), 
 19071 ;;		 -> mac.address(6), ethernetController_getMacAddress@mac(6), ethernetController_getSiliconRevision@data(1), ethernet
      +Controller_checkDeviceId@data(1), 
 19072 ;;		 -> ethernetController_softReset@receivedData(2), 
 19073 ;; Auto vars:     Size  Location     Type
 19074 ;;  addr            1   12[BANK0 ] unsigned char 
 19075 ;;  opcode          1   13[BANK0 ] unsigned char 
 19076 ;; Return value:  Size  Location     Type
 19077 ;;                  1    wreg      void 
 19078 ;; Registers used:
 19079 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19080 ;; Tracked objects:
 19081 ;;		On entry : 0/0
 19082 ;;		On exit  : 0/0
 19083 ;;		Unchanged: 0/0
 19084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19085 ;;      Params:         0       2       0       0       0       0       0       0       0
 19086 ;;      Locals:         0       2       0       0       0       0       0       0       0
 19087 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19088 ;;      Totals:         0       4       0       0       0       0       0       0       0
 19089 ;;Total ram usage:        4 bytes
 19090 ;; Hardware stack levels used:    1
 19091 ;; Hardware stack levels required when called:    6
 19092 ;; This function calls:
 19093 ;;		_ENC424J600_readSPI
 19094 ;;		_ENC424J600_writeSPI
 19095 ;; This function is called by:
 19096 ;;		_ethernetController_softReset
 19097 ;;		_ethernetController_checkDeviceId
 19098 ;;		_ethernetController_getSiliconRevision
 19099 ;;		_ethernetController_getMacAddress
 19100 ;;		_ethernetController_updateLinkStatus
 19101 ;;		_ethernetController_setLEDStatus
 19102 ;;		_ethernetController_setLEDConfiguration
 19103 ;;		_ENC424J600_getPacketCount
 19104 ;;		_ENC424J600_enableAutoMACInsertion
 19105 ;;		_ENC424J600_readPHYRegister
 19106 ;;		_ENC424J600_getInterruptFlags
 19107 ;;		_ENC424J600_clearInterruptFlag
 19108 ;;		_ENC424J600_disableAutoMACInsertion
 19109 ;; This function uses a non-reentrant model
 19110 ;;
 19111                           
 19112                           	psect	text84
 19113  0042CE                     __ptext84:
 19114                           	opt stack 0
 19115  0042CE                     _ENC424J600_readControlRegisterUnbanked:
 19116                           	opt stack 21
 19117                           
 19118                           ; BSR set to: 0
 19119                           ;incstack = 0
 19120                           ;ENC424J600_readControlRegisterUnbanked@addr stored from wreg
 19121  0042CE  0100               	movlb	0	; () banked
 19122  0042D0  6F6C               	movwf	ENC424J600_readControlRegisterUnbanked@addr& (0+255),b
 19123                           
 19124                           ;ENC424J600.c: 600: uint8_t opcode = 0x20;
 19125  0042D2  0E20               	movlw	32
 19126  0042D4  0100               	movlb	0	; () banked
 19127  0042D6  6F6D               	movwf	ENC424J600_readControlRegisterUnbanked@opcode& (0+255),b
 19128                           
 19129                           ; BSR set to: 0
 19130                           ;ENC424J600.c: 601: PORTBbits.RB4=0;
 19131  0042D8  9881               	bcf	3969,4,c	;volatile
 19132                           
 19133                           ; BSR set to: 0
 19134                           ;ENC424J600.c: 602: ENC424J600_writeSPI(&opcode);
 19135  0042DA  0E6D               	movlw	low ENC424J600_readControlRegisterUnbanked@opcode
 19136  0042DC  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 19137  0042DE  0E00               	movlw	high ENC424J600_readControlRegisterUnbanked@opcode
 19138  0042E0  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 19139  0042E2  ECB5  F01E         	call	_ENC424J600_writeSPI	;wreg free
 19140                           
 19141                           ;ENC424J600.c: 603: ENC424J600_writeSPI(&addr);
 19142  0042E6  0E6C               	movlw	low ENC424J600_readControlRegisterUnbanked@addr
 19143  0042E8  0100               	movlb	0	; () banked
 19144  0042EA  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 19145  0042EC  0E00               	movlw	high ENC424J600_readControlRegisterUnbanked@addr
 19146  0042EE  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 19147  0042F0  ECB5  F01E         	call	_ENC424J600_writeSPI	;wreg free
 19148                           
 19149                           ;ENC424J600.c: 604: ENC424J600_readSPI(data);
 19150  0042F4  C06A  F060         	movff	ENC424J600_readControlRegisterUnbanked@data,ENC424J600_readSPI@data
 19151  0042F8  C06B  F061         	movff	ENC424J600_readControlRegisterUnbanked@data+1,ENC424J600_readSPI@data+1
 19152  0042FC  ECE5  F01D         	call	_ENC424J600_readSPI	;wreg free
 19153                           
 19154                           ;ENC424J600.c: 605: PORTBbits.RB4=1;
 19155  004300  8881               	bsf	3969,4,c	;volatile
 19156  004302  0012               	return		;funcret
 19157  004304                     __end_of_ENC424J600_readControlRegisterUnbanked:
 19158                           	opt stack 0
 19159                           tblptru	equ	0xFF8
 19160                           tblptrh	equ	0xFF7
 19161                           tblptrl	equ	0xFF6
 19162                           tablat	equ	0xFF5
 19163                           prodh	equ	0xFF4
 19164                           prodl	equ	0xFF3
 19165                           intcon	equ	0xFF2
 19166                           intcon3	equ	0xFF0
 19167                           indf0	equ	0xFEF
 19168                           postinc0	equ	0xFEE
 19169                           plusw0	equ	0xFEB
 19170                           fsr0h	equ	0xFEA
 19171                           fsr0l	equ	0xFE9
 19172                           wreg	equ	0xFE8
 19173                           indf1	equ	0xFE7
 19174                           postinc1	equ	0xFE6
 19175                           postdec1	equ	0xFE5
 19176                           plusw1	equ	0xFE3
 19177                           fsr1h	equ	0xFE2
 19178                           fsr1l	equ	0xFE1
 19179                           indf2	equ	0xFDF
 19180                           postinc2	equ	0xFDE
 19181                           postdec2	equ	0xFDD
 19182                           plusw2	equ	0xFDB
 19183                           fsr2h	equ	0xFDA
 19184                           fsr2l	equ	0xFD9
 19185                           status	equ	0xFD8
 19186                           
 19187 ;; *************** function _ENC424J600_writeSPI *****************
 19188 ;; Defined at:
 19189 ;;		line 624 in file "src/enc424j600/ENC424J600.c"
 19190 ;; Parameters:    Size  Location     Type
 19191 ;;  data            2    0[BANK0 ] PTR unsigned char 
 19192 ;;		 -> ENC424J600_clearInterruptFlag@temp(1), ENC424J600_readPHYRegister@temp(1), ENC424J600_readPHYRegister@unusedBits
      +(1), ENC424J600_readPHYRegister@PHYaddress(1), 
 19193 ;;		 -> ENC424J600_writeSingleByte@opcode(1), ENC424J600_readControlRegisterUnbanked@addr(1), ENC424J600_readControlRegi
      +sterUnbanked@opcode(1), ENC424J600_writeControlRegisterUnbanked@addr(1), 
 19194 ;;		 -> ENC424J600_writeControlRegisterUnbanked@opcode(1), ENC424J600_disableAutoMACInsertion@temp(1), ENC424J600_enable
      +AutoMACInsertion@temp(1), ENC424J600_setRXTailPointer@highByte(1), 
 19195 ;;		 -> ENC424J600_setRXTailPointer@lowByte(1), ENC424J600_setRXBufferStartAddress@highByte(1), ENC424J600_setRXBufferSt
      +artAddress@lowByte(1), ENC424J600_setERXDATAReadPointer@highByte(1), 
 19196 ;;		 -> ENC424J600_setERXDATAReadPointer@lowByte(1), ENC424J600_setERXDATAReadPointer@opcode(1), ENC424J600_setGPDATARea
      +dPointer@highByte(1), ENC424J600_setGPDATAReadPointer@lowByte(1), 
 19197 ;;		 -> ENC424J600_setGPDATAReadPointer@opcode(1), ENC424J600_setGPDATAWritePointer@highByte(1), ENC424J600_setGPDATAWri
      +tePointer@lowByte(1), ENC424J600_setGPDATAWritePointer@opcode(1), 
 19198 ;;		 -> ENC424J600_setTXStartAddress@highByte(1), ENC424J600_setTXStartAddress@lowByte(1), ENC424J600_setTXLength@highBy
      +te(1), ENC424J600_setTXLength@lowByte(1), 
 19199 ;;		 -> ethernetController_setLEDConfiguration@data(1), ethernetController_setLEDStatus@data(1), ethernetController_stre
      +amFromRXBuffer@opcode(1), ethernetController_updateNextPacketPointer@opcode(1), 
 19200 ;;		 -> ethernetController_getRSV@opcode(1), ethernetController_getEtherTypeField@opcode(1), ethernetController_getSourc
      +eMACAddress@opcode(1), ethernetController_getDestinationMACAddress@opcode(1), 
 19201 ;;		 -> ethernetController_writeEtherTypeFieldToBuffer@opcode(1), ethernetController_writeEtherTypeFieldToBuffer@highByt
      +e(1), ethernetController_writeEtherTypeFieldToBuffer@lowByte(1), ethernetController_writeDestinationMACAddress@opcode(1)
      +, 
 19202 ;;		 -> ethernetController_writeDestinationMACAddress@data(6), ethernetController_streamToTransmitBuffer@data(1), ethern
      +etController_streamToTransmitBuffer@opcode(1), mac.address(6), 
 19203 ;;		 -> ethernetController_setMacAddress@mac(6), ethernetController_softReset@dataToSend(2), 
 19204 ;; Auto vars:     Size  Location     Type
 19205 ;;  timeoutCount    4    6[BANK0 ] unsigned long 
 19206 ;; Return value:  Size  Location     Type
 19207 ;;                  1    wreg      void 
 19208 ;; Registers used:
 19209 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19210 ;; Tracked objects:
 19211 ;;		On entry : 0/0
 19212 ;;		On exit  : 0/0
 19213 ;;		Unchanged: 0/0
 19214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19215 ;;      Params:         0       2       0       0       0       0       0       0       0
 19216 ;;      Locals:         0       4       0       0       0       0       0       0       0
 19217 ;;      Temps:          0       4       0       0       0       0       0       0       0
 19218 ;;      Totals:         0      10       0       0       0       0       0       0       0
 19219 ;;Total ram usage:       10 bytes
 19220 ;; Hardware stack levels used:    1
 19221 ;; Hardware stack levels required when called:    5
 19222 ;; This function calls:
 19223 ;;		_ENC424J600_initSPI
 19224 ;; This function is called by:
 19225 ;;		_ethernetController_streamToTransmitBuffer
 19226 ;;		_ethernetController_writeDestinationMACAddress
 19227 ;;		_ethernetController_writeEtherTypeFieldToBuffer
 19228 ;;		_ethernetController_getSourceMACAddress
 19229 ;;		_ethernetController_getEtherTypeField
 19230 ;;		_ethernetController_getRSV
 19231 ;;		_ethernetController_updateNextPacketPointer
 19232 ;;		_ethernetController_streamFromRXBuffer
 19233 ;;		_ENC424J600_setGPDATAWritePointer
 19234 ;;		_ENC424J600_setERXDATAReadPointer
 19235 ;;		_ENC424J600_writeControlRegisterUnbanked
 19236 ;;		_ENC424J600_readControlRegisterUnbanked
 19237 ;;		_ENC424J600_writeSingleByte
 19238 ;;		_ethernetController_getDestinationMACAddress
 19239 ;;		_ENC424J600_setGPDATAReadPointer
 19240 ;; This function uses a non-reentrant model
 19241 ;;
 19242                           
 19243                           	psect	text85
 19244  003D6A                     __ptext85:
 19245                           	opt stack 0
 19246  003D6A                     _ENC424J600_writeSPI:
 19247                           	opt stack 22
 19248                           
 19249                           ;ENC424J600.c: 626: uint32_t timeoutCounter = 0;
 19250                           
 19251                           ;incstack = 0
 19252  003D6A  0E00               	movlw	0
 19253  003D6C  0100               	movlb	0	; () banked
 19254  003D6E  6F66               	movwf	ENC424J600_writeSPI@timeoutCounter& (0+255),b
 19255  003D70  0E00               	movlw	0
 19256  003D72  6F67               	movwf	(ENC424J600_writeSPI@timeoutCounter+1)& (0+255),b
 19257  003D74  0E00               	movlw	0
 19258  003D76  6F68               	movwf	(ENC424J600_writeSPI@timeoutCounter+2)& (0+255),b
 19259  003D78  0E00               	movlw	0
 19260  003D7A  6F69               	movwf	(ENC424J600_writeSPI@timeoutCounter+3)& (0+255),b
 19261                           
 19262                           ; BSR set to: 0
 19263                           ;ENC424J600.c: 627: SSP1BUF = *data;
 19264  003D7C  C060  FFD9         	movff	ENC424J600_writeSPI@data,fsr2l
 19265  003D80  C061  FFDA         	movff	ENC424J600_writeSPI@data+1,fsr2h
 19266  003D84  50DF               	movf	indf2,w,c
 19267  003D86  6EC9               	movwf	4041,c	;volatile
 19268  003D88                     
 19269                           ; BSR set to: 0
 19270                           
 19271                           ; BSR set to: 0
 19272  003D88  B0C7               	btfsc	4039,0,c	;volatile
 19273  003D8A  D015               	goto	u7580
 19274                           
 19275                           ; BSR set to: 0
 19276  003D8C  C066  F062         	movff	ENC424J600_writeSPI@timeoutCounter,??_ENC424J600_writeSPI
 19277  003D90  C067  F063         	movff	ENC424J600_writeSPI@timeoutCounter+1,??_ENC424J600_writeSPI+1
 19278  003D94  C068  F064         	movff	ENC424J600_writeSPI@timeoutCounter+2,??_ENC424J600_writeSPI+2
 19279  003D98  C069  F065         	movff	ENC424J600_writeSPI@timeoutCounter+3,??_ENC424J600_writeSPI+3
 19280  003D9C  2B66               	incf	ENC424J600_writeSPI@timeoutCounter& (0+255),f,b
 19281  003D9E  0E00               	movlw	0
 19282  003DA0  2367               	addwfc	(ENC424J600_writeSPI@timeoutCounter+1)& (0+255),f,b
 19283  003DA2  2368               	addwfc	(ENC424J600_writeSPI@timeoutCounter+2)& (0+255),f,b
 19284  003DA4  2369               	addwfc	(ENC424J600_writeSPI@timeoutCounter+3)& (0+255),f,b
 19285  003DA6  5165               	movf	(??_ENC424J600_writeSPI+3)& (0+255),w,b
 19286  003DA8  1164               	iorwf	(??_ENC424J600_writeSPI+2)& (0+255),w,b
 19287  003DAA  E105               	bnz	l6736
 19288  003DAC  2962               	incf	??_ENC424J600_writeSPI& (0+255),w,b
 19289  003DAE  0E0F               	movlw	15
 19290  003DB0  5963               	subwfb	(??_ENC424J600_writeSPI+1)& (0+255),w,b
 19291  003DB2  A0D8               	btfss	status,0,c
 19292  003DB4  D7E9               	goto	l275
 19293  003DB6                     u7580:
 19294  003DB6                     l6736:
 19295                           
 19296                           ; BSR set to: 0
 19297                           ;ENC424J600.c: 629: if (timeoutCounter >= 0xfff) {
 19298  003DB6  5169               	movf	(ENC424J600_writeSPI@timeoutCounter+3)& (0+255),w,b
 19299  003DB8  1168               	iorwf	(ENC424J600_writeSPI@timeoutCounter+2)& (0+255),w,b
 19300  003DBA  E105               	bnz	u7590
 19301  003DBC  2966               	incf	ENC424J600_writeSPI@timeoutCounter& (0+255),w,b
 19302  003DBE  0E0F               	movlw	15
 19303  003DC0  5967               	subwfb	(ENC424J600_writeSPI@timeoutCounter+1)& (0+255),w,b
 19304  003DC2  A0D8               	btfss	status,0,c
 19305  003DC4  0012               	return	
 19306  003DC6                     u7590:
 19307                           
 19308                           ; BSR set to: 0
 19309                           ;ENC424J600.c: 630: PORTBbits.RB4=1;
 19310  003DC6  8881               	bsf	3969,4,c	;volatile
 19311                           
 19312                           ; BSR set to: 0
 19313                           ;ENC424J600.c: 631: ENC424J600_initSPI();
 19314  003DC8  EC01  F023         	call	_ENC424J600_initSPI	;wreg free
 19315                           
 19316                           ;ENC424J600.c: 632: return;
 19317  003DCC  0012               	return	
 19318  003DCE                     __end_of_ENC424J600_writeSPI:
 19319                           	opt stack 0
 19320                           tblptru	equ	0xFF8
 19321                           tblptrh	equ	0xFF7
 19322                           tblptrl	equ	0xFF6
 19323                           tablat	equ	0xFF5
 19324                           prodh	equ	0xFF4
 19325                           prodl	equ	0xFF3
 19326                           intcon	equ	0xFF2
 19327                           intcon3	equ	0xFF0
 19328                           indf0	equ	0xFEF
 19329                           postinc0	equ	0xFEE
 19330                           plusw0	equ	0xFEB
 19331                           fsr0h	equ	0xFEA
 19332                           fsr0l	equ	0xFE9
 19333                           wreg	equ	0xFE8
 19334                           indf1	equ	0xFE7
 19335                           postinc1	equ	0xFE6
 19336                           postdec1	equ	0xFE5
 19337                           plusw1	equ	0xFE3
 19338                           fsr1h	equ	0xFE2
 19339                           fsr1l	equ	0xFE1
 19340                           indf2	equ	0xFDF
 19341                           postinc2	equ	0xFDE
 19342                           postdec2	equ	0xFDD
 19343                           plusw2	equ	0xFDB
 19344                           fsr2h	equ	0xFDA
 19345                           fsr2l	equ	0xFD9
 19346                           status	equ	0xFD8
 19347                           
 19348 ;; *************** function _ENC424J600_readSPI *****************
 19349 ;; Defined at:
 19350 ;;		line 636 in file "src/enc424j600/ENC424J600.c"
 19351 ;; Parameters:    Size  Location     Type
 19352 ;;  data            2    0[BANK0 ] PTR unsigned char 
 19353 ;;		 -> ENC424J600_clearInterruptFlag@temp(1), ENC424J600_getInterruptFlags@low(1), ENC424J600_getInterruptFlags@high(1)
      +, ENC424J600_readPHYRegister@highByte(1), 
 19354 ;;		 -> ENC424J600_readPHYRegister@lowByte(1), ENC424J600_readPHYRegister@temp(1), ENC424J600_disableAutoMACInsertion@te
      +mp(1), ENC424J600_enableAutoMACInsertion@temp(1), 
 19355 ;;		 -> ENC424J600_getPacketCount@lowByte(1), ethernetController_setLEDConfiguration@data(1), ethernetController_setLEDS
      +tatus@data(1), ethernetController_updateLinkStatus@temp(1), 
 19356 ;;		 -> ethernetController_streamFromRXBuffer@temp(1), ethernetController_updateNextPacketPointer@newPointerH(1), ethern
      +etController_updateNextPacketPointer@newPointerL(1), ethernetController_getRSV@temp(6), 
 19357 ;;		 -> ethernetController_getEtherTypeField@lowByte(1), ethernetController_getEtherTypeField@highByte(1), ethernetContr
      +oller_getSourceMACAddress@temp(1), ethernetController_getDestinationMACAddress@temp(1), 
 19358 ;;		 -> mac.address(6), ethernetController_getMacAddress@mac(6), ethernetController_getSiliconRevision@data(1), ethernet
      +Controller_checkDeviceId@data(1), 
 19359 ;;		 -> ethernetController_softReset@receivedData(2), 
 19360 ;; Auto vars:     Size  Location     Type
 19361 ;;  timeoutCount    4    6[BANK0 ] unsigned long 
 19362 ;; Return value:  Size  Location     Type
 19363 ;;                  1    wreg      void 
 19364 ;; Registers used:
 19365 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19366 ;; Tracked objects:
 19367 ;;		On entry : 0/0
 19368 ;;		On exit  : 0/0
 19369 ;;		Unchanged: 0/0
 19370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19371 ;;      Params:         0       2       0       0       0       0       0       0       0
 19372 ;;      Locals:         0       4       0       0       0       0       0       0       0
 19373 ;;      Temps:          0       4       0       0       0       0       0       0       0
 19374 ;;      Totals:         0      10       0       0       0       0       0       0       0
 19375 ;;Total ram usage:       10 bytes
 19376 ;; Hardware stack levels used:    1
 19377 ;; Hardware stack levels required when called:    5
 19378 ;; This function calls:
 19379 ;;		_ENC424J600_initSPI
 19380 ;; This function is called by:
 19381 ;;		_ethernetController_getSourceMACAddress
 19382 ;;		_ethernetController_getEtherTypeField
 19383 ;;		_ethernetController_getRSV
 19384 ;;		_ethernetController_updateNextPacketPointer
 19385 ;;		_ethernetController_streamFromRXBuffer
 19386 ;;		_ENC424J600_readControlRegisterUnbanked
 19387 ;;		_ethernetController_getDestinationMACAddress
 19388 ;; This function uses a non-reentrant model
 19389 ;;
 19390                           
 19391                           	psect	text86
 19392  003BCA                     __ptext86:
 19393                           	opt stack 0
 19394  003BCA                     _ENC424J600_readSPI:
 19395                           	opt stack 21
 19396                           
 19397                           ;ENC424J600.c: 638: uint32_t timeoutCounter = 0;
 19398                           
 19399                           ;incstack = 0
 19400  003BCA  0E00               	movlw	0
 19401  003BCC  0100               	movlb	0	; () banked
 19402  003BCE  6F66               	movwf	ENC424J600_readSPI@timeoutCounter& (0+255),b
 19403  003BD0  0E00               	movlw	0
 19404  003BD2  6F67               	movwf	(ENC424J600_readSPI@timeoutCounter+1)& (0+255),b
 19405  003BD4  0E00               	movlw	0
 19406  003BD6  6F68               	movwf	(ENC424J600_readSPI@timeoutCounter+2)& (0+255),b
 19407  003BD8  0E00               	movlw	0
 19408  003BDA  6F69               	movwf	(ENC424J600_readSPI@timeoutCounter+3)& (0+255),b
 19409                           
 19410                           ;ENC424J600.c: 639: SSP1BUF = 0x00;
 19411  003BDC  0E00               	movlw	0
 19412  003BDE  6EC9               	movwf	4041,c	;volatile
 19413  003BE0                     
 19414                           ; BSR set to: 0
 19415                           
 19416                           ; BSR set to: 0
 19417  003BE0  B0C7               	btfsc	4039,0,c	;volatile
 19418  003BE2  D015               	goto	u8010
 19419                           
 19420                           ; BSR set to: 0
 19421  003BE4  C066  F062         	movff	ENC424J600_readSPI@timeoutCounter,??_ENC424J600_readSPI
 19422  003BE8  C067  F063         	movff	ENC424J600_readSPI@timeoutCounter+1,??_ENC424J600_readSPI+1
 19423  003BEC  C068  F064         	movff	ENC424J600_readSPI@timeoutCounter+2,??_ENC424J600_readSPI+2
 19424  003BF0  C069  F065         	movff	ENC424J600_readSPI@timeoutCounter+3,??_ENC424J600_readSPI+3
 19425  003BF4  2B66               	incf	ENC424J600_readSPI@timeoutCounter& (0+255),f,b
 19426  003BF6  0E00               	movlw	0
 19427  003BF8  2367               	addwfc	(ENC424J600_readSPI@timeoutCounter+1)& (0+255),f,b
 19428  003BFA  2368               	addwfc	(ENC424J600_readSPI@timeoutCounter+2)& (0+255),f,b
 19429  003BFC  2369               	addwfc	(ENC424J600_readSPI@timeoutCounter+3)& (0+255),f,b
 19430  003BFE  5165               	movf	(??_ENC424J600_readSPI+3)& (0+255),w,b
 19431  003C00  1164               	iorwf	(??_ENC424J600_readSPI+2)& (0+255),w,b
 19432  003C02  E105               	bnz	l7010
 19433  003C04  2962               	incf	??_ENC424J600_readSPI& (0+255),w,b
 19434  003C06  0E0F               	movlw	15
 19435  003C08  5963               	subwfb	(??_ENC424J600_readSPI+1)& (0+255),w,b
 19436  003C0A  A0D8               	btfss	status,0,c
 19437  003C0C  D7E9               	goto	l284
 19438  003C0E                     u8010:
 19439  003C0E                     l7010:
 19440                           
 19441                           ; BSR set to: 0
 19442                           ;ENC424J600.c: 641: if (timeoutCounter >= 0xfff) {
 19443  003C0E  5169               	movf	(ENC424J600_readSPI@timeoutCounter+3)& (0+255),w,b
 19444  003C10  1168               	iorwf	(ENC424J600_readSPI@timeoutCounter+2)& (0+255),w,b
 19445  003C12  E105               	bnz	u8020
 19446  003C14  2966               	incf	ENC424J600_readSPI@timeoutCounter& (0+255),w,b
 19447  003C16  0E0F               	movlw	15
 19448  003C18  5967               	subwfb	(ENC424J600_readSPI@timeoutCounter+1)& (0+255),w,b
 19449  003C1A  A0D8               	btfss	status,0,c
 19450  003C1C  D004               	goto	l288
 19451  003C1E                     u8020:
 19452                           
 19453                           ; BSR set to: 0
 19454                           ;ENC424J600.c: 642: PORTBbits.RB4=1;
 19455  003C1E  8881               	bsf	3969,4,c	;volatile
 19456                           
 19457                           ; BSR set to: 0
 19458                           ;ENC424J600.c: 643: ENC424J600_initSPI();
 19459  003C20  EC01  F023         	call	_ENC424J600_initSPI	;wreg free
 19460                           
 19461                           ;ENC424J600.c: 644: return;
 19462  003C24  0012               	return	
 19463  003C26                     l288:
 19464                           
 19465                           ;ENC424J600.c: 645: }
 19466                           ;ENC424J600.c: 646: *data = SSP1BUF;
 19467  003C26  C060  FFD9         	movff	ENC424J600_readSPI@data,fsr2l
 19468  003C2A  C061  FFDA         	movff	ENC424J600_readSPI@data+1,fsr2h
 19469  003C2E  CFC9 FFDF          	movff	4041,indf2	;volatile
 19470  003C32  0012               	return		;funcret
 19471  003C34                     __end_of_ENC424J600_readSPI:
 19472                           	opt stack 0
 19473                           tblptru	equ	0xFF8
 19474                           tblptrh	equ	0xFF7
 19475                           tblptrl	equ	0xFF6
 19476                           tablat	equ	0xFF5
 19477                           prodh	equ	0xFF4
 19478                           prodl	equ	0xFF3
 19479                           intcon	equ	0xFF2
 19480                           intcon3	equ	0xFF0
 19481                           indf0	equ	0xFEF
 19482                           postinc0	equ	0xFEE
 19483                           plusw0	equ	0xFEB
 19484                           fsr0h	equ	0xFEA
 19485                           fsr0l	equ	0xFE9
 19486                           wreg	equ	0xFE8
 19487                           indf1	equ	0xFE7
 19488                           postinc1	equ	0xFE6
 19489                           postdec1	equ	0xFE5
 19490                           plusw1	equ	0xFE3
 19491                           fsr1h	equ	0xFE2
 19492                           fsr1l	equ	0xFE1
 19493                           indf2	equ	0xFDF
 19494                           postinc2	equ	0xFDE
 19495                           postdec2	equ	0xFDD
 19496                           plusw2	equ	0xFDB
 19497                           fsr2h	equ	0xFDA
 19498                           fsr2l	equ	0xFD9
 19499                           status	equ	0xFD8
 19500                           
 19501 ;; *************** function _ENC424J600_initSPI *****************
 19502 ;; Defined at:
 19503 ;;		line 608 in file "src/enc424j600/ENC424J600.c"
 19504 ;; Parameters:    Size  Location     Type
 19505 ;;		None
 19506 ;; Auto vars:     Size  Location     Type
 19507 ;;		None
 19508 ;; Return value:  Size  Location     Type
 19509 ;;                  1    wreg      void 
 19510 ;; Registers used:
 19511 ;;		None
 19512 ;; Tracked objects:
 19513 ;;		On entry : 0/0
 19514 ;;		On exit  : 0/0
 19515 ;;		Unchanged: 0/0
 19516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19517 ;;      Params:         0       0       0       0       0       0       0       0       0
 19518 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19519 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19520 ;;      Totals:         0       0       0       0       0       0       0       0       0
 19521 ;;Total ram usage:        0 bytes
 19522 ;; Hardware stack levels used:    1
 19523 ;; Hardware stack levels required when called:    4
 19524 ;; This function calls:
 19525 ;;		Nothing
 19526 ;; This function is called by:
 19527 ;;		_ethernetController_init
 19528 ;;		_ENC424J600_writeSPI
 19529 ;;		_ENC424J600_readSPI
 19530 ;; This function uses a non-reentrant model
 19531 ;;
 19532                           
 19533                           	psect	text87
 19534  004602                     __ptext87:
 19535                           	opt stack 0
 19536  004602                     _ENC424J600_initSPI:
 19537                           	opt stack 22
 19538                           
 19539                           ;ENC424J600.c: 609: SSP1CON1bits.SSPEN = 0;
 19540                           
 19541                           ;incstack = 0
 19542  004602  9AC6               	bcf	4038,5,c	;volatile
 19543                           
 19544                           ;ENC424J600.c: 610: SSP1STATbits.CKE = 1;
 19545  004604  8CC7               	bsf	4039,6,c	;volatile
 19546                           
 19547                           ;ENC424J600.c: 612: TRISBbits.TRISB0 = 1;
 19548  004606  8093               	bsf	3987,0,c	;volatile
 19549                           
 19550                           ;ENC424J600.c: 613: ANSELBbits.ANSB0 = 0;
 19551  004608  010F               	movlb	15	; () banked
 19552  00460A  915C               	bcf	92,0,b	;volatile
 19553                           
 19554                           ;ENC424J600.c: 614: TRISBbits.TRISB1 = 0;
 19555  00460C  9293               	bcf	3987,1,c	;volatile
 19556                           
 19557                           ;ENC424J600.c: 615: ANSELBbits.ANSB1 = 0;
 19558  00460E  935C               	bcf	92,1,b	;volatile
 19559                           
 19560                           ;ENC424J600.c: 616: TRISBbits.TRISB3 = 0;
 19561  004610  9693               	bcf	3987,3,c	;volatile
 19562                           
 19563                           ;ENC424J600.c: 617: ANSELBbits.ANSB3 = 0;
 19564  004612  975C               	bcf	92,3,b	;volatile
 19565                           
 19566                           ;ENC424J600.c: 618: TRISBbits.TRISB4 = 0;
 19567  004614  9893               	bcf	3987,4,c	;volatile
 19568                           
 19569                           ;ENC424J600.c: 619: ANSELBbits.ANSB4 = 0;
 19570  004616  995C               	bcf	92,4,b	;volatile
 19571                           
 19572                           ;ENC424J600.c: 620: PORTBbits.RB4=1;
 19573  004618  8881               	bsf	3969,4,c	;volatile
 19574                           
 19575                           ;ENC424J600.c: 621: SSP1CON1bits.SSPEN = 1;
 19576  00461A  8AC6               	bsf	4038,5,c	;volatile
 19577                           
 19578                           ; BSR set to: 15
 19579  00461C  0012               	return		;funcret
 19580  00461E                     __end_of_ENC424J600_initSPI:
 19581                           	opt stack 0
 19582                           tblptru	equ	0xFF8
 19583                           tblptrh	equ	0xFF7
 19584                           tblptrl	equ	0xFF6
 19585                           tablat	equ	0xFF5
 19586                           prodh	equ	0xFF4
 19587                           prodl	equ	0xFF3
 19588                           intcon	equ	0xFF2
 19589                           intcon3	equ	0xFF0
 19590                           indf0	equ	0xFEF
 19591                           postinc0	equ	0xFEE
 19592                           plusw0	equ	0xFEB
 19593                           fsr0h	equ	0xFEA
 19594                           fsr0l	equ	0xFE9
 19595                           wreg	equ	0xFE8
 19596                           indf1	equ	0xFE7
 19597                           postinc1	equ	0xFE6
 19598                           postdec1	equ	0xFE5
 19599                           plusw1	equ	0xFE3
 19600                           fsr1h	equ	0xFE2
 19601                           fsr1l	equ	0xFE1
 19602                           indf2	equ	0xFDF
 19603                           postinc2	equ	0xFDE
 19604                           postdec2	equ	0xFDD
 19605                           plusw2	equ	0xFDB
 19606                           fsr2h	equ	0xFDA
 19607                           fsr2l	equ	0xFD9
 19608                           status	equ	0xFD8
 19609                           
 19610 ;; *************** function _UARTInit *****************
 19611 ;; Defined at:
 19612 ;;		line 26 in file "src/system/uart.c"
 19613 ;; Parameters:    Size  Location     Type
 19614 ;;		None
 19615 ;; Auto vars:     Size  Location     Type
 19616 ;;		None
 19617 ;; Return value:  Size  Location     Type
 19618 ;;                  1    wreg      void 
 19619 ;; Registers used:
 19620 ;;		wreg, status,2
 19621 ;; Tracked objects:
 19622 ;;		On entry : 0/0
 19623 ;;		On exit  : 0/0
 19624 ;;		Unchanged: 0/0
 19625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19626 ;;      Params:         0       0       0       0       0       0       0       0       0
 19627 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19628 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19629 ;;      Totals:         0       0       0       0       0       0       0       0       0
 19630 ;;Total ram usage:        0 bytes
 19631 ;; Hardware stack levels used:    1
 19632 ;; Hardware stack levels required when called:    4
 19633 ;; This function calls:
 19634 ;;		Nothing
 19635 ;; This function is called by:
 19636 ;;		_main
 19637 ;; This function uses a non-reentrant model
 19638 ;;
 19639                           
 19640                           	psect	text88
 19641  0046A0                     __ptext88:
 19642                           	opt stack 0
 19643  0046A0                     _UARTInit:
 19644                           	opt stack 26
 19645                           
 19646                           ;uart.c: 27: TXSTA1bits.TXEN = 1;
 19647                           
 19648                           ; BSR set to: 15
 19649                           ;incstack = 0
 19650  0046A0  8AAC               	bsf	4012,5,c	;volatile
 19651                           
 19652                           ;uart.c: 28: TXSTA1bits.SYNC = 0;
 19653  0046A2  98AC               	bcf	4012,4,c	;volatile
 19654                           
 19655                           ;uart.c: 29: RCSTA1bits.SPEN = 1;
 19656  0046A4  8EAB               	bsf	4011,7,c	;volatile
 19657                           
 19658                           ;uart.c: 30: TXSTA1bits.TX9 = 1;
 19659  0046A6  8CAC               	bsf	4012,6,c	;volatile
 19660                           
 19661                           ;uart.c: 31: TXSTA1bits.TX9D = 1;
 19662  0046A8  80AC               	bsf	4012,0,c	;volatile
 19663                           
 19664                           ;uart.c: 32: SPBRG = 3;
 19665  0046AA  0E03               	movlw	3
 19666  0046AC  6EAF               	movwf	4015,c	;volatile
 19667  0046AE  0012               	return		;funcret
 19668  0046B0                     __end_of_UARTInit:
 19669                           	opt stack 0
 19670                           tblptru	equ	0xFF8
 19671                           tblptrh	equ	0xFF7
 19672                           tblptrl	equ	0xFF6
 19673                           tablat	equ	0xFF5
 19674                           prodh	equ	0xFF4
 19675                           prodl	equ	0xFF3
 19676                           intcon	equ	0xFF2
 19677                           intcon3	equ	0xFF0
 19678                           indf0	equ	0xFEF
 19679                           postinc0	equ	0xFEE
 19680                           plusw0	equ	0xFEB
 19681                           fsr0h	equ	0xFEA
 19682                           fsr0l	equ	0xFE9
 19683                           wreg	equ	0xFE8
 19684                           indf1	equ	0xFE7
 19685                           postinc1	equ	0xFE6
 19686                           postdec1	equ	0xFE5
 19687                           plusw1	equ	0xFE3
 19688                           fsr1h	equ	0xFE2
 19689                           fsr1l	equ	0xFE1
 19690                           indf2	equ	0xFDF
 19691                           postinc2	equ	0xFDE
 19692                           postdec2	equ	0xFDD
 19693                           plusw2	equ	0xFDB
 19694                           fsr2h	equ	0xFDA
 19695                           fsr2l	equ	0xFD9
 19696                           status	equ	0xFD8
 19697                           
 19698 ;; *************** function _ARP_initTable *****************
 19699 ;; Defined at:
 19700 ;;		line 266 in file "src/stack/protocols/arp.c"
 19701 ;; Parameters:    Size  Location     Type
 19702 ;;		None
 19703 ;; Auto vars:     Size  Location     Type
 19704 ;;  i               1   38[BANK0 ] unsigned char 
 19705 ;;  mac             6   28[BANK0 ] struct macaddress
 19706 ;;  ip              4   34[BANK0 ] struct ipv4_address
 19707 ;; Return value:  Size  Location     Type
 19708 ;;                  1    wreg      void 
 19709 ;; Registers used:
 19710 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19711 ;; Tracked objects:
 19712 ;;		On entry : 0/0
 19713 ;;		On exit  : 0/0
 19714 ;;		Unchanged: 0/0
 19715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19716 ;;      Params:         0       0       0       0       0       0       0       0       0
 19717 ;;      Locals:         0      11       0       0       0       0       0       0       0
 19718 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19719 ;;      Totals:         0      11       0       0       0       0       0       0       0
 19720 ;;Total ram usage:       11 bytes
 19721 ;; Hardware stack levels used:    1
 19722 ;; Hardware stack levels required when called:    5
 19723 ;; This function calls:
 19724 ;;		_ARP_setNewEntry
 19725 ;;		_ipv4_setToAllZero
 19726 ;;		_mac_setAllZero
 19727 ;; This function is called by:
 19728 ;;		_main
 19729 ;; This function uses a non-reentrant model
 19730 ;;
 19731                           
 19732                           	psect	text89
 19733  003D04                     __ptext89:
 19734                           	opt stack 0
 19735  003D04                     _ARP_initTable:
 19736                           	opt stack 25
 19737                           
 19738                           ;arp.c: 267: macaddress_t mac;
 19739                           ;arp.c: 268: ipv4_address_t ip;
 19740                           ;arp.c: 269: mac_setAllZero(&mac);
 19741                           
 19742                           ;incstack = 0
 19743  003D04  0E7C               	movlw	low ARP_initTable@mac
 19744  003D06  0100               	movlb	0	; () banked
 19745  003D08  6F60               	movwf	mac_setAllZero@mac& (0+255),b
 19746  003D0A  0E00               	movlw	high ARP_initTable@mac
 19747  003D0C  6F61               	movwf	(mac_setAllZero@mac+1)& (0+255),b
 19748  003D0E  EC6C  F022         	call	_mac_setAllZero	;wreg free
 19749                           
 19750                           ;arp.c: 270: ipv4_setToAllZero(&ip);
 19751  003D12  0E82               	movlw	low ARP_initTable@ip
 19752  003D14  0100               	movlb	0	; () banked
 19753  003D16  6F60               	movwf	ipv4_setToAllZero@ip& (0+255),b
 19754  003D18  0E00               	movlw	high ARP_initTable@ip
 19755  003D1A  6F61               	movwf	(ipv4_setToAllZero@ip+1)& (0+255),b
 19756  003D1C  ECD6  F022         	call	_ipv4_setToAllZero	;wreg free
 19757                           
 19758                           ;arp.c: 271: for (uint8_t i = 0; i < 8; i++)
 19759  003D20  0E00               	movlw	0
 19760  003D22  0100               	movlb	0	; () banked
 19761  003D24  6F86               	movwf	ARP_initTable@i& (0+255),b
 19762  003D26                     l8598:
 19763                           
 19764                           ; BSR set to: 0
 19765  003D26  0E07               	movlw	7
 19766  003D28  6586               	cpfsgt	ARP_initTable@i& (0+255),b
 19767  003D2A  D001               	goto	l935
 19768  003D2C  0012               	return	
 19769  003D2E                     l935:
 19770                           
 19771                           ; BSR set to: 0
 19772                           ;arp.c: 272: ARP_setNewEntry(mac, ip, 0xffffffff);
 19773                           
 19774                           ; BSR set to: 0
 19775  003D2E  EE20  F07C         	lfsr	2,ARP_initTable@mac
 19776  003D32  EE00  F064         	lfsr	0,ARP_setNewEntry@mac
 19777  003D36  0E05               	movlw	5
 19778  003D38                     u10701:
 19779  003D38  CFDB FFEB          	movff	plusw2,plusw0
 19780  003D3C  06E8               	decf	wreg,f,c
 19781  003D3E  E2FC               	bc	u10701
 19782  003D40  C082  F06A         	movff	ARP_initTable@ip,ARP_setNewEntry@ip
 19783  003D44  C083  F06B         	movff	ARP_initTable@ip+1,ARP_setNewEntry@ip+1
 19784  003D48  C084  F06C         	movff	ARP_initTable@ip+2,ARP_setNewEntry@ip+2
 19785  003D4C  C085  F06D         	movff	ARP_initTable@ip+3,ARP_setNewEntry@ip+3
 19786  003D50  0EFF               	movlw	255
 19787  003D52  6F6E               	movwf	ARP_setNewEntry@timestamp& (0+255),b
 19788  003D54  0EFF               	movlw	255
 19789  003D56  6F6F               	movwf	(ARP_setNewEntry@timestamp+1)& (0+255),b
 19790  003D58  0EFF               	movlw	255
 19791  003D5A  6F70               	movwf	(ARP_setNewEntry@timestamp+2)& (0+255),b
 19792  003D5C  0EFF               	movlw	255
 19793  003D5E  6F71               	movwf	(ARP_setNewEntry@timestamp+3)& (0+255),b
 19794  003D60  EC72  F017         	call	_ARP_setNewEntry	;wreg free
 19795  003D64  0100               	movlb	0	; () banked
 19796  003D66  2B86               	incf	ARP_initTable@i& (0+255),f,b
 19797  003D68  D7DE               	goto	l8598
 19798  003D6A                     __end_of_ARP_initTable:
 19799                           	opt stack 0
 19800                           tblptru	equ	0xFF8
 19801                           tblptrh	equ	0xFF7
 19802                           tblptrl	equ	0xFF6
 19803                           tablat	equ	0xFF5
 19804                           prodh	equ	0xFF4
 19805                           prodl	equ	0xFF3
 19806                           intcon	equ	0xFF2
 19807                           intcon3	equ	0xFF0
 19808                           indf0	equ	0xFEF
 19809                           postinc0	equ	0xFEE
 19810                           plusw0	equ	0xFEB
 19811                           fsr0h	equ	0xFEA
 19812                           fsr0l	equ	0xFE9
 19813                           wreg	equ	0xFE8
 19814                           indf1	equ	0xFE7
 19815                           postinc1	equ	0xFE6
 19816                           postdec1	equ	0xFE5
 19817                           plusw1	equ	0xFE3
 19818                           fsr1h	equ	0xFE2
 19819                           fsr1l	equ	0xFE1
 19820                           indf2	equ	0xFDF
 19821                           postinc2	equ	0xFDE
 19822                           postdec2	equ	0xFDD
 19823                           plusw2	equ	0xFDB
 19824                           fsr2h	equ	0xFDA
 19825                           fsr2l	equ	0xFD9
 19826                           status	equ	0xFD8
 19827                           
 19828 ;; *************** function _mac_setAllZero *****************
 19829 ;; Defined at:
 19830 ;;		line 47 in file "src/eth/mac.c"
 19831 ;; Parameters:    Size  Location     Type
 19832 ;;  mac             2    0[BANK0 ] PTR struct macaddress
 19833 ;;		 -> ARP_initTable@mac(6), 
 19834 ;; Auto vars:     Size  Location     Type
 19835 ;;  i               1    2[BANK0 ] unsigned char 
 19836 ;; Return value:  Size  Location     Type
 19837 ;;                  1    wreg      void 
 19838 ;; Registers used:
 19839 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 19840 ;; Tracked objects:
 19841 ;;		On entry : 0/0
 19842 ;;		On exit  : 0/0
 19843 ;;		Unchanged: 0/0
 19844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19845 ;;      Params:         0       2       0       0       0       0       0       0       0
 19846 ;;      Locals:         0       1       0       0       0       0       0       0       0
 19847 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19848 ;;      Totals:         0       3       0       0       0       0       0       0       0
 19849 ;;Total ram usage:        3 bytes
 19850 ;; Hardware stack levels used:    1
 19851 ;; Hardware stack levels required when called:    4
 19852 ;; This function calls:
 19853 ;;		Nothing
 19854 ;; This function is called by:
 19855 ;;		_ARP_initTable
 19856 ;; This function uses a non-reentrant model
 19857 ;;
 19858                           
 19859                           	psect	text90
 19860  0044D8                     __ptext90:
 19861                           	opt stack 0
 19862  0044D8                     _mac_setAllZero:
 19863                           	opt stack 25
 19864                           
 19865                           ;mac.c: 48: for (uint8_t i = 0; i < 6; i++)
 19866                           
 19867                           ; BSR set to: 0
 19868                           ;incstack = 0
 19869  0044D8  0E00               	movlw	0
 19870  0044DA  0100               	movlb	0	; () banked
 19871  0044DC  6F62               	movwf	mac_setAllZero@i& (0+255),b
 19872  0044DE                     l8390:
 19873                           
 19874                           ; BSR set to: 0
 19875  0044DE  0E05               	movlw	5
 19876  0044E0  6562               	cpfsgt	mac_setAllZero@i& (0+255),b
 19877  0044E2  D001               	goto	l383
 19878  0044E4  0012               	return	
 19879  0044E6                     l383:
 19880                           
 19881                           ; BSR set to: 0
 19882                           ;mac.c: 49: mac->address[i] = 0x00;
 19883                           
 19884                           ; BSR set to: 0
 19885  0044E6  5162               	movf	mac_setAllZero@i& (0+255),w,b
 19886  0044E8  0D01               	mullw	1
 19887  0044EA  50F3               	movf	prodl,w,c
 19888  0044EC  2560               	addwf	mac_setAllZero@mac& (0+255),w,b
 19889  0044EE  6ED9               	movwf	fsr2l,c
 19890  0044F0  50F4               	movf	prodh,w,c
 19891  0044F2  2161               	addwfc	(mac_setAllZero@mac+1)& (0+255),w,b
 19892  0044F4  6EDA               	movwf	fsr2h,c
 19893  0044F6  0E00               	movlw	0
 19894  0044F8  6EDF               	movwf	indf2,c
 19895                           
 19896                           ; BSR set to: 0
 19897  0044FA  2B62               	incf	mac_setAllZero@i& (0+255),f,b
 19898  0044FC  D7F0               	goto	l8390
 19899  0044FE                     __end_of_mac_setAllZero:
 19900                           	opt stack 0
 19901                           tblptru	equ	0xFF8
 19902                           tblptrh	equ	0xFF7
 19903                           tblptrl	equ	0xFF6
 19904                           tablat	equ	0xFF5
 19905                           prodh	equ	0xFF4
 19906                           prodl	equ	0xFF3
 19907                           intcon	equ	0xFF2
 19908                           intcon3	equ	0xFF0
 19909                           indf0	equ	0xFEF
 19910                           postinc0	equ	0xFEE
 19911                           plusw0	equ	0xFEB
 19912                           fsr0h	equ	0xFEA
 19913                           fsr0l	equ	0xFE9
 19914                           wreg	equ	0xFE8
 19915                           indf1	equ	0xFE7
 19916                           postinc1	equ	0xFE6
 19917                           postdec1	equ	0xFE5
 19918                           plusw1	equ	0xFE3
 19919                           fsr1h	equ	0xFE2
 19920                           fsr1l	equ	0xFE1
 19921                           indf2	equ	0xFDF
 19922                           postinc2	equ	0xFDE
 19923                           postdec2	equ	0xFDD
 19924                           plusw2	equ	0xFDB
 19925                           fsr2h	equ	0xFDA
 19926                           fsr2l	equ	0xFD9
 19927                           status	equ	0xFD8
 19928                           
 19929 ;; *************** function _ipv4_setToAllZero *****************
 19930 ;; Defined at:
 19931 ;;		line 186 in file "src/stack/protocols/ipv4.c"
 19932 ;; Parameters:    Size  Location     Type
 19933 ;;  ip              2    0[BANK0 ] PTR struct ipv4_address
 19934 ;;		 -> ARP_initTable@ip(4), 
 19935 ;; Auto vars:     Size  Location     Type
 19936 ;;  i               1    2[BANK0 ] unsigned char 
 19937 ;; Return value:  Size  Location     Type
 19938 ;;                  1    wreg      void 
 19939 ;; Registers used:
 19940 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 19941 ;; Tracked objects:
 19942 ;;		On entry : 0/0
 19943 ;;		On exit  : 0/0
 19944 ;;		Unchanged: 0/0
 19945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19946 ;;      Params:         0       2       0       0       0       0       0       0       0
 19947 ;;      Locals:         0       1       0       0       0       0       0       0       0
 19948 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19949 ;;      Totals:         0       3       0       0       0       0       0       0       0
 19950 ;;Total ram usage:        3 bytes
 19951 ;; Hardware stack levels used:    1
 19952 ;; Hardware stack levels required when called:    4
 19953 ;; This function calls:
 19954 ;;		Nothing
 19955 ;; This function is called by:
 19956 ;;		_ARP_initTable
 19957 ;; This function uses a non-reentrant model
 19958 ;;
 19959                           
 19960                           	psect	text91
 19961  0045AC                     __ptext91:
 19962                           	opt stack 0
 19963  0045AC                     _ipv4_setToAllZero:
 19964                           	opt stack 25
 19965                           
 19966                           ;ipv4.c: 187: for (uint8_t i = 0; i < 4; i++) {
 19967                           
 19968                           ; BSR set to: 0
 19969                           ;incstack = 0
 19970  0045AC  0E00               	movlw	0
 19971  0045AE  0100               	movlb	0	; () banked
 19972  0045B0  6F62               	movwf	ipv4_setToAllZero@i& (0+255),b
 19973  0045B2                     l8452:
 19974                           
 19975                           ; BSR set to: 0
 19976  0045B2  0E03               	movlw	3
 19977  0045B4  6562               	cpfsgt	ipv4_setToAllZero@i& (0+255),b
 19978  0045B6  D001               	goto	l1018
 19979  0045B8  0012               	return	
 19980  0045BA                     l1018:
 19981                           
 19982                           ; BSR set to: 0
 19983                           ;ipv4.c: 188: ip->address[0] = 0x00;
 19984                           
 19985                           ; BSR set to: 0
 19986  0045BA  C060  FFD9         	movff	ipv4_setToAllZero@ip,fsr2l
 19987  0045BE  C061  FFDA         	movff	ipv4_setToAllZero@ip+1,fsr2h
 19988  0045C2  0E00               	movlw	0
 19989  0045C4  6EDF               	movwf	indf2,c
 19990                           
 19991                           ; BSR set to: 0
 19992  0045C6  2B62               	incf	ipv4_setToAllZero@i& (0+255),f,b
 19993  0045C8  D7F4               	goto	l8452
 19994  0045CA                     __end_of_ipv4_setToAllZero:
 19995                           	opt stack 0
 19996                           tblptru	equ	0xFF8
 19997                           tblptrh	equ	0xFF7
 19998                           tblptrl	equ	0xFF6
 19999                           tablat	equ	0xFF5
 20000                           prodh	equ	0xFF4
 20001                           prodl	equ	0xFF3
 20002                           intcon	equ	0xFF2
 20003                           intcon3	equ	0xFF0
 20004                           indf0	equ	0xFEF
 20005                           postinc0	equ	0xFEE
 20006                           plusw0	equ	0xFEB
 20007                           fsr0h	equ	0xFEA
 20008                           fsr0l	equ	0xFE9
 20009                           wreg	equ	0xFE8
 20010                           indf1	equ	0xFE7
 20011                           postinc1	equ	0xFE6
 20012                           postdec1	equ	0xFE5
 20013                           plusw1	equ	0xFE3
 20014                           fsr1h	equ	0xFE2
 20015                           fsr1l	equ	0xFE1
 20016                           indf2	equ	0xFDF
 20017                           postinc2	equ	0xFDE
 20018                           postdec2	equ	0xFDD
 20019                           plusw2	equ	0xFDB
 20020                           fsr2h	equ	0xFDA
 20021                           fsr2l	equ	0xFD9
 20022                           status	equ	0xFD8
 20023                           
 20024 ;; *************** function _ARP_setNewEntry *****************
 20025 ;; Defined at:
 20026 ;;		line 250 in file "src/stack/protocols/arp.c"
 20027 ;; Parameters:    Size  Location     Type
 20028 ;;  mac             6    4[BANK0 ] struct macaddress
 20029 ;;  ip              4   10[BANK0 ] struct ipv4_address
 20030 ;;  timestamp       4   14[BANK0 ] unsigned long 
 20031 ;; Auto vars:     Size  Location     Type
 20032 ;;  i               1   27[BANK0 ] unsigned char 
 20033 ;;  maxSeconds      4   22[BANK0 ] unsigned long 
 20034 ;;  oldestIndex     1   26[BANK0 ] unsigned char 
 20035 ;; Return value:  Size  Location     Type
 20036 ;;                  1    wreg      void 
 20037 ;; Registers used:
 20038 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 20039 ;; Tracked objects:
 20040 ;;		On entry : 0/0
 20041 ;;		On exit  : 0/0
 20042 ;;		Unchanged: 0/0
 20043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20044 ;;      Params:         0      14       0       0       0       0       0       0       0
 20045 ;;      Locals:         0       6       0       0       0       0       0       0       0
 20046 ;;      Temps:          0       4       0       0       0       0       0       0       0
 20047 ;;      Totals:         0      24       0       0       0       0       0       0       0
 20048 ;;Total ram usage:       24 bytes
 20049 ;; Hardware stack levels used:    1
 20050 ;; Hardware stack levels required when called:    4
 20051 ;; This function calls:
 20052 ;;		Nothing
 20053 ;; This function is called by:
 20054 ;;		_ARP_handleNewPacket
 20055 ;;		_ARP_initTable
 20056 ;; This function uses a non-reentrant model
 20057 ;;
 20058                           
 20059                           	psect	text92
 20060  002EE4                     __ptext92:
 20061                           	opt stack 0
 20062  002EE4                     _ARP_setNewEntry:
 20063                           	opt stack 23
 20064                           
 20065                           ;arp.c: 251: uint32_t maxSeconds = 0;
 20066                           
 20067                           ; BSR set to: 0
 20068                           ;incstack = 0
 20069  002EE4  0E00               	movlw	0
 20070  002EE6  0100               	movlb	0	; () banked
 20071  002EE8  6F76               	movwf	ARP_setNewEntry@maxSeconds& (0+255),b
 20072  002EEA  0E00               	movlw	0
 20073  002EEC  6F77               	movwf	(ARP_setNewEntry@maxSeconds+1)& (0+255),b
 20074  002EEE  0E00               	movlw	0
 20075  002EF0  6F78               	movwf	(ARP_setNewEntry@maxSeconds+2)& (0+255),b
 20076  002EF2  0E00               	movlw	0
 20077  002EF4  6F79               	movwf	(ARP_setNewEntry@maxSeconds+3)& (0+255),b
 20078                           
 20079                           ;arp.c: 252: uint8_t oldestIndex = 0;
 20080  002EF6  0E00               	movlw	0
 20081  002EF8  6F7A               	movwf	ARP_setNewEntry@oldestIndex& (0+255),b
 20082                           
 20083                           ;arp.c: 254: for (uint8_t i = 0; i < 8; i++) {
 20084  002EFA  0E00               	movlw	0
 20085  002EFC  6F7B               	movwf	ARP_setNewEntry@i& (0+255),b
 20086  002EFE                     l7826:
 20087                           
 20088                           ; BSR set to: 0
 20089  002EFE  0E07               	movlw	7
 20090  002F00  657B               	cpfsgt	ARP_setNewEntry@i& (0+255),b
 20091  002F02  D001               	goto	l929
 20092  002F04  D02E               	goto	u9690
 20093  002F06                     l929:
 20094                           
 20095                           ; BSR set to: 0
 20096                           ;arp.c: 255: if (ARP_table[i].secondsCreated > maxSeconds) {
 20097                           
 20098                           ; BSR set to: 0
 20099  002F06  517B               	movf	ARP_setNewEntry@i& (0+255),w,b
 20100  002F08  0D0E               	mullw	14
 20101  002F0A  0E0A               	movlw	10
 20102  002F0C  26F3               	addwf	prodl,f,c
 20103  002F0E  0E00               	movlw	0
 20104  002F10  22F4               	addwfc	prodh,f,c
 20105  002F12  0E00               	movlw	low _ARP_table
 20106  002F14  24F3               	addwf	prodl,w,c
 20107  002F16  6ED9               	movwf	fsr2l,c
 20108  002F18  0E03               	movlw	high _ARP_table
 20109  002F1A  20F4               	addwfc	prodh,w,c
 20110  002F1C  6EDA               	movwf	fsr2h,c
 20111  002F1E  50DE               	movf	postinc2,w,c
 20112  002F20  5D76               	subwf	ARP_setNewEntry@maxSeconds& (0+255),w,b
 20113  002F22  50DE               	movf	postinc2,w,c
 20114  002F24  5977               	subwfb	(ARP_setNewEntry@maxSeconds+1)& (0+255),w,b
 20115  002F26  50DE               	movf	postinc2,w,c
 20116  002F28  5978               	subwfb	(ARP_setNewEntry@maxSeconds+2)& (0+255),w,b
 20117  002F2A  50DE               	movf	postinc2,w,c
 20118  002F2C  5979               	subwfb	(ARP_setNewEntry@maxSeconds+3)& (0+255),w,b
 20119  002F2E  B0D8               	btfsc	status,0,c
 20120  002F30  D016               	goto	l931
 20121                           
 20122                           ; BSR set to: 0
 20123                           ;arp.c: 256: maxSeconds = ARP_table[i].secondsCreated;
 20124  002F32  517B               	movf	ARP_setNewEntry@i& (0+255),w,b
 20125  002F34  0D0E               	mullw	14
 20126  002F36  0E0A               	movlw	10
 20127  002F38  26F3               	addwf	prodl,f,c
 20128  002F3A  0E00               	movlw	0
 20129  002F3C  22F4               	addwfc	prodh,f,c
 20130  002F3E  0E00               	movlw	low _ARP_table
 20131  002F40  24F3               	addwf	prodl,w,c
 20132  002F42  6ED9               	movwf	fsr2l,c
 20133  002F44  0E03               	movlw	high _ARP_table
 20134  002F46  20F4               	addwfc	prodh,w,c
 20135  002F48  6EDA               	movwf	fsr2h,c
 20136  002F4A  CFDE F076          	movff	postinc2,ARP_setNewEntry@maxSeconds
 20137  002F4E  CFDE F077          	movff	postinc2,ARP_setNewEntry@maxSeconds+1
 20138  002F52  CFDE F078          	movff	postinc2,ARP_setNewEntry@maxSeconds+2
 20139  002F56  CFDE F079          	movff	postinc2,ARP_setNewEntry@maxSeconds+3
 20140                           
 20141                           ; BSR set to: 0
 20142                           ;arp.c: 257: oldestIndex = i;
 20143  002F5A  C07B  F07A         	movff	ARP_setNewEntry@i,ARP_setNewEntry@oldestIndex
 20144  002F5E                     l931:
 20145                           
 20146                           ; BSR set to: 0
 20147                           
 20148                           ; BSR set to: 0
 20149  002F5E  2B7B               	incf	ARP_setNewEntry@i& (0+255),f,b
 20150  002F60  D7CE               	goto	l7826
 20151  002F62                     u9690:
 20152                           
 20153                           ; BSR set to: 0
 20154                           ;arp.c: 258: }
 20155                           ;arp.c: 259: }
 20156                           ;arp.c: 261: ARP_table[oldestIndex].ip = ip;
 20157                           
 20158                           ; BSR set to: 0
 20159  002F62  517A               	movf	ARP_setNewEntry@oldestIndex& (0+255),w,b
 20160  002F64  0D0E               	mullw	14
 20161  002F66  0E00               	movlw	low _ARP_table
 20162  002F68  24F3               	addwf	prodl,w,c
 20163  002F6A  6ED9               	movwf	fsr2l,c
 20164  002F6C  0E03               	movlw	high _ARP_table
 20165  002F6E  20F4               	addwfc	prodh,w,c
 20166  002F70  6EDA               	movwf	fsr2h,c
 20167  002F72  C06A  FFDE         	movff	ARP_setNewEntry@ip,postinc2
 20168  002F76  C06B  FFDE         	movff	ARP_setNewEntry@ip+1,postinc2
 20169  002F7A  C06C  FFDE         	movff	ARP_setNewEntry@ip+2,postinc2
 20170  002F7E  C06D  FFDE         	movff	ARP_setNewEntry@ip+3,postinc2
 20171                           
 20172                           ; BSR set to: 0
 20173                           ;arp.c: 262: ARP_table[oldestIndex].mac = mac;
 20174  002F82  EE20  F064         	lfsr	2,ARP_setNewEntry@mac
 20175  002F86  517A               	movf	ARP_setNewEntry@oldestIndex& (0+255),w,b
 20176  002F88  0D0E               	mullw	14
 20177  002F8A  0E04               	movlw	4
 20178  002F8C  26F3               	addwf	prodl,f,c
 20179  002F8E  0E00               	movlw	0
 20180  002F90  22F4               	addwfc	prodh,f,c
 20181  002F92  0E00               	movlw	low _ARP_table
 20182  002F94  24F3               	addwf	prodl,w,c
 20183  002F96  6EE1               	movwf	fsr1l,c
 20184  002F98  0E03               	movlw	high _ARP_table
 20185  002F9A  20F4               	addwfc	prodh,w,c
 20186  002F9C  6EE2               	movwf	fsr1h,c
 20187  002F9E  0E05               	movlw	5
 20188  002FA0                     u9701:
 20189  002FA0  CFDB FFE3          	movff	plusw2,plusw1
 20190  002FA4  06E8               	decf	wreg,f,c
 20191  002FA6  E2FC               	bc	u9701
 20192                           
 20193                           ; BSR set to: 0
 20194                           ;arp.c: 263: ARP_table[oldestIndex].secondsCreated = timestamp;
 20195  002FA8  517A               	movf	ARP_setNewEntry@oldestIndex& (0+255),w,b
 20196  002FAA  0D0E               	mullw	14
 20197  002FAC  0E0A               	movlw	10
 20198  002FAE  26F3               	addwf	prodl,f,c
 20199  002FB0  0E00               	movlw	0
 20200  002FB2  22F4               	addwfc	prodh,f,c
 20201  002FB4  0E00               	movlw	low _ARP_table
 20202  002FB6  24F3               	addwf	prodl,w,c
 20203  002FB8  6ED9               	movwf	fsr2l,c
 20204  002FBA  0E03               	movlw	high _ARP_table
 20205  002FBC  20F4               	addwfc	prodh,w,c
 20206  002FBE  6EDA               	movwf	fsr2h,c
 20207  002FC0  C06E  FFDE         	movff	ARP_setNewEntry@timestamp,postinc2
 20208  002FC4  C06F  FFDE         	movff	ARP_setNewEntry@timestamp+1,postinc2
 20209  002FC8  C070  FFDE         	movff	ARP_setNewEntry@timestamp+2,postinc2
 20210  002FCC  C071  FFDE         	movff	ARP_setNewEntry@timestamp+3,postinc2
 20211                           
 20212                           ; BSR set to: 0
 20213  002FD0  0012               	return		;funcret
 20214  002FD2                     __end_of_ARP_setNewEntry:
 20215                           	opt stack 0
 20216                           tblptru	equ	0xFF8
 20217                           tblptrh	equ	0xFF7
 20218                           tblptrl	equ	0xFF6
 20219                           tablat	equ	0xFF5
 20220                           prodh	equ	0xFF4
 20221                           prodl	equ	0xFF3
 20222                           intcon	equ	0xFF2
 20223                           intcon3	equ	0xFF0
 20224                           indf0	equ	0xFEF
 20225                           postinc0	equ	0xFEE
 20226                           plusw0	equ	0xFEB
 20227                           fsr0h	equ	0xFEA
 20228                           fsr0l	equ	0xFE9
 20229                           wreg	equ	0xFE8
 20230                           indf1	equ	0xFE7
 20231                           postinc1	equ	0xFE6
 20232                           postdec1	equ	0xFE5
 20233                           plusw1	equ	0xFE3
 20234                           fsr1h	equ	0xFE2
 20235                           fsr1l	equ	0xFE1
 20236                           indf2	equ	0xFDF
 20237                           postinc2	equ	0xFDE
 20238                           postdec2	equ	0xFDD
 20239                           plusw2	equ	0xFDB
 20240                           fsr2h	equ	0xFDA
 20241                           fsr2l	equ	0xFD9
 20242                           status	equ	0xFD8
 20243                           
 20244 ;; *************** function _ISR *****************
 20245 ;; Defined at:
 20246 ;;		line 266 in file "src/system/main.c"
 20247 ;; Parameters:    Size  Location     Type
 20248 ;;		None
 20249 ;; Auto vars:     Size  Location     Type
 20250 ;;		None
 20251 ;; Return value:  Size  Location     Type
 20252 ;;                  1    wreg      void 
 20253 ;; Registers used:
 20254 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20255 ;; Tracked objects:
 20256 ;;		On entry : 0/0
 20257 ;;		On exit  : 0/0
 20258 ;;		Unchanged: 0/0
 20259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20260 ;;      Params:         0       0       0       0       0       0       0       0       0
 20261 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20262 ;;      Temps:         18       0       0       0       0       0       0       0       0
 20263 ;;      Totals:        18       0       0       0       0       0       0       0       0
 20264 ;;Total ram usage:       18 bytes
 20265 ;; Hardware stack levels used:    1
 20266 ;; Hardware stack levels required when called:    3
 20267 ;; This function calls:
 20268 ;;		_buttonHandler
 20269 ;;		_sevenSegmentUpdate
 20270 ;;		_updateSeconds
 20271 ;; This function is called by:
 20272 ;;		Interrupt level 2
 20273 ;; This function uses a non-reentrant model
 20274 ;;
 20275                           
 20276                           	psect	intcode
 20277  000008                     __pintcode:
 20278                           	opt stack 0
 20279  000008                     _ISR:
 20280                           	opt stack 17
 20281                           
 20282                           ; BSR set to: 0
 20283                           ;incstack = 0
 20284  000008  824F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 20285  00000A  CFFA F016          	movff	pclath,??_ISR
 20286  00000E  CFFB F017          	movff	pclatu,??_ISR+1
 20287  000012  CFE9 F018          	movff	fsr0l,??_ISR+2
 20288  000016  CFEA F019          	movff	fsr0h,??_ISR+3
 20289  00001A  CFE1 F01A          	movff	fsr1l,??_ISR+4
 20290  00001E  CFE2 F01B          	movff	fsr1h,??_ISR+5
 20291  000022  CFD9 F01C          	movff	fsr2l,??_ISR+6
 20292  000026  CFDA F01D          	movff	fsr2h,??_ISR+7
 20293  00002A  CFF3 F01E          	movff	prodl,??_ISR+8
 20294  00002E  CFF4 F01F          	movff	prodh,??_ISR+9
 20295  000032  CFF6 F020          	movff	tblptrl,??_ISR+10
 20296  000036  CFF7 F021          	movff	tblptrh,??_ISR+11
 20297  00003A  CFF8 F022          	movff	tblptru,??_ISR+12
 20298  00003E  CFF5 F023          	movff	tablat,??_ISR+13
 20299  000042  C04F  F024         	movff	btemp,??_ISR+14
 20300  000046  C050  F025         	movff	btemp+1,??_ISR+15
 20301  00004A  C051  F026         	movff	btemp+2,??_ISR+16
 20302  00004E  C052  F027         	movff	btemp+3,??_ISR+17
 20303                           
 20304                           ;main.c: 267: if (INTCONbits.TMR0IF) {
 20305  000052  A4F2               	btfss	intcon,2,c	;volatile
 20306  000054  D00F               	goto	i2l674
 20307                           
 20308                           ;main.c: 268: INTCONbits.TMR0IF = 0;
 20309  000056  94F2               	bcf	intcon,2,c	;volatile
 20310                           
 20311                           ;main.c: 269: updateSeconds();
 20312  000058  EC7F  F022         	call	_updateSeconds	;wreg free
 20313                           
 20314                           ;main.c: 270: sevenSegmentUpdate(numberToDisplay);
 20315  00005C  C034  F00F         	movff	_numberToDisplay,sevenSegmentUpdate@numberToDisplay	;volatile
 20316  000060  C035  F010         	movff	_numberToDisplay+1,sevenSegmentUpdate@numberToDisplay+1	;volatile
 20317  000064  EC5D  F018         	call	_sevenSegmentUpdate	;wreg free
 20318                           
 20319                           ;main.c: 271: buttonHandler(&buttonState);
 20320  000068  0EBD               	movlw	low _buttonState
 20321  00006A  6E01               	movwf	buttonHandler@state,c
 20322  00006C  0E01               	movlw	high _buttonState
 20323  00006E  6E02               	movwf	buttonHandler@state+1,c
 20324  000070  EC62  F01A         	call	_buttonHandler	;wreg free
 20325  000074                     i2l674:
 20326                           
 20327                           ;main.c: 272: }
 20328                           ;main.c: 273: if (INTCON3bits.INT2IF) {
 20329  000074  B2F0               	btfsc	intcon3,1,c	;volatile
 20330                           
 20331                           ;main.c: 274: INTCON3bits.INT2IF = 0;
 20332  000076  92F0               	bcf	intcon3,1,c	;volatile
 20333                           
 20334                           ;main.c: 281: }
 20335                           ;main.c: 282: if (RCIF) {
 20336  000078  C027  F052         	movff	??_ISR+17,btemp+3
 20337  00007C  C026  F051         	movff	??_ISR+16,btemp+2
 20338  000080  C025  F050         	movff	??_ISR+15,btemp+1
 20339  000084  C024  F04F         	movff	??_ISR+14,btemp
 20340  000088  C023  FFF5         	movff	??_ISR+13,tablat
 20341  00008C  C022  FFF8         	movff	??_ISR+12,tblptru
 20342  000090  C021  FFF7         	movff	??_ISR+11,tblptrh
 20343  000094  C020  FFF6         	movff	??_ISR+10,tblptrl
 20344  000098  C01F  FFF4         	movff	??_ISR+9,prodh
 20345  00009C  C01E  FFF3         	movff	??_ISR+8,prodl
 20346  0000A0  C01D  FFDA         	movff	??_ISR+7,fsr2h
 20347  0000A4  C01C  FFD9         	movff	??_ISR+6,fsr2l
 20348  0000A8  C01B  FFE2         	movff	??_ISR+5,fsr1h
 20349  0000AC  C01A  FFE1         	movff	??_ISR+4,fsr1l
 20350  0000B0  C019  FFEA         	movff	??_ISR+3,fsr0h
 20351  0000B4  C018  FFE9         	movff	??_ISR+2,fsr0l
 20352  0000B8  C017  FFFB         	movff	??_ISR+1,pclatu
 20353  0000BC  C016  FFFA         	movff	??_ISR,pclath
 20354  0000C0  924F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 20355  0000C2  0011               	retfie		f
 20356  0000C4                     __end_of_ISR:
 20357                           	opt stack 0
 20358                           pclatu	equ	0xFFB
 20359                           pclath	equ	0xFFA
 20360                           tblptru	equ	0xFF8
 20361                           tblptrh	equ	0xFF7
 20362                           tblptrl	equ	0xFF6
 20363                           tablat	equ	0xFF5
 20364                           prodh	equ	0xFF4
 20365                           prodl	equ	0xFF3
 20366                           intcon	equ	0xFF2
 20367                           intcon3	equ	0xFF0
 20368                           indf0	equ	0xFEF
 20369                           postinc0	equ	0xFEE
 20370                           plusw0	equ	0xFEB
 20371                           fsr0h	equ	0xFEA
 20372                           fsr0l	equ	0xFE9
 20373                           wreg	equ	0xFE8
 20374                           indf1	equ	0xFE7
 20375                           postinc1	equ	0xFE6
 20376                           postdec1	equ	0xFE5
 20377                           plusw1	equ	0xFE3
 20378                           fsr1h	equ	0xFE2
 20379                           fsr1l	equ	0xFE1
 20380                           indf2	equ	0xFDF
 20381                           postinc2	equ	0xFDE
 20382                           postdec2	equ	0xFDD
 20383                           plusw2	equ	0xFDB
 20384                           fsr2h	equ	0xFDA
 20385                           fsr2l	equ	0xFD9
 20386                           status	equ	0xFD8
 20387                           
 20388 ;; *************** function _updateSeconds *****************
 20389 ;; Defined at:
 20390 ;;		line 28 in file "src/stack/stack.c"
 20391 ;; Parameters:    Size  Location     Type
 20392 ;;		None
 20393 ;; Auto vars:     Size  Location     Type
 20394 ;;		None
 20395 ;; Return value:  Size  Location     Type
 20396 ;;                  1    wreg      void 
 20397 ;; Registers used:
 20398 ;;		wreg, status,2, status,0
 20399 ;; Tracked objects:
 20400 ;;		On entry : 0/0
 20401 ;;		On exit  : 0/0
 20402 ;;		Unchanged: 0/0
 20403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20404 ;;      Params:         0       0       0       0       0       0       0       0       0
 20405 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20406 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20407 ;;      Totals:         0       0       0       0       0       0       0       0       0
 20408 ;;Total ram usage:        0 bytes
 20409 ;; Hardware stack levels used:    1
 20410 ;; This function calls:
 20411 ;;		Nothing
 20412 ;; This function is called by:
 20413 ;;		_ISR
 20414 ;; This function uses a non-reentrant model
 20415 ;;
 20416                           
 20417                           	psect	text94
 20418  0044FE                     __ptext94:
 20419                           	opt stack 0
 20420  0044FE                     _updateSeconds:
 20421                           	opt stack 19
 20422                           
 20423                           ;stack.c: 29: uint16_t static prescaler_ms = 0;
 20424                           ;stack.c: 33: if (prescaler_ms == 243) {
 20425                           
 20426                           ;incstack = 0
 20427  0044FE  0EF3               	movlw	243
 20428  004500  1841               	xorwf	updateSeconds@prescaler_ms,w,c
 20429  004502  1042               	iorwf	updateSeconds@prescaler_ms+1,w,c
 20430  004504  A4D8               	btfss	status,2,c
 20431  004506  D00B               	goto	i2l518
 20432                           
 20433                           ;stack.c: 34: prescaler_ms = 0;
 20434  004508  0E00               	movlw	0
 20435  00450A  6E42               	movwf	updateSeconds@prescaler_ms+1,c
 20436  00450C  0E00               	movlw	0
 20437  00450E  6E41               	movwf	updateSeconds@prescaler_ms,c
 20438                           
 20439                           ;stack.c: 35: seconds++;
 20440  004510  0E01               	movlw	1
 20441  004512  2638               	addwf	_seconds,f,c
 20442  004514  0E00               	movlw	0
 20443  004516  2239               	addwfc	_seconds+1,f,c
 20444  004518  223A               	addwfc	_seconds+2,f,c
 20445  00451A  223B               	addwfc	_seconds+3,f,c
 20446                           
 20447                           ;stack.c: 36: } else {
 20448  00451C  0012               	return	
 20449  00451E                     i2l518:
 20450                           
 20451                           ;stack.c: 37: prescaler_ms++;
 20452  00451E  4A41               	infsnz	updateSeconds@prescaler_ms,f,c
 20453  004520  2A42               	incf	updateSeconds@prescaler_ms+1,f,c
 20454  004522  0012               	return	
 20455  004524                     __end_of_updateSeconds:
 20456                           	opt stack 0
 20457                           pclatu	equ	0xFFB
 20458                           pclath	equ	0xFFA
 20459                           tblptru	equ	0xFF8
 20460                           tblptrh	equ	0xFF7
 20461                           tblptrl	equ	0xFF6
 20462                           tablat	equ	0xFF5
 20463                           prodh	equ	0xFF4
 20464                           prodl	equ	0xFF3
 20465                           intcon	equ	0xFF2
 20466                           intcon3	equ	0xFF0
 20467                           indf0	equ	0xFEF
 20468                           postinc0	equ	0xFEE
 20469                           plusw0	equ	0xFEB
 20470                           fsr0h	equ	0xFEA
 20471                           fsr0l	equ	0xFE9
 20472                           wreg	equ	0xFE8
 20473                           indf1	equ	0xFE7
 20474                           postinc1	equ	0xFE6
 20475                           postdec1	equ	0xFE5
 20476                           plusw1	equ	0xFE3
 20477                           fsr1h	equ	0xFE2
 20478                           fsr1l	equ	0xFE1
 20479                           indf2	equ	0xFDF
 20480                           postinc2	equ	0xFDE
 20481                           postdec2	equ	0xFDD
 20482                           plusw2	equ	0xFDB
 20483                           fsr2h	equ	0xFDA
 20484                           fsr2l	equ	0xFD9
 20485                           status	equ	0xFD8
 20486                           
 20487 ;; *************** function _sevenSegmentUpdate *****************
 20488 ;; Defined at:
 20489 ;;		line 41 in file "src/system/sevenseg.c"
 20490 ;; Parameters:    Size  Location     Type
 20491 ;;  numberToDisp    2   14[COMRAM] unsigned int 
 20492 ;; Auto vars:     Size  Location     Type
 20493 ;;  i               1   20[COMRAM] unsigned char 
 20494 ;; Return value:  Size  Location     Type
 20495 ;;                  1    wreg      void 
 20496 ;; Registers used:
 20497 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20498 ;; Tracked objects:
 20499 ;;		On entry : 0/0
 20500 ;;		On exit  : 0/0
 20501 ;;		Unchanged: 0/0
 20502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20503 ;;      Params:         2       0       0       0       0       0       0       0       0
 20504 ;;      Locals:         3       0       0       0       0       0       0       0       0
 20505 ;;      Temps:          2       0       0       0       0       0       0       0       0
 20506 ;;      Totals:         7       0       0       0       0       0       0       0       0
 20507 ;;Total ram usage:        7 bytes
 20508 ;; Hardware stack levels used:    1
 20509 ;; Hardware stack levels required when called:    2
 20510 ;; This function calls:
 20511 ;;		_parseNumber
 20512 ;; This function is called by:
 20513 ;;		_ISR
 20514 ;; This function uses a non-reentrant model
 20515 ;;
 20516                           
 20517                           	psect	text95
 20518  0030BA                     __ptext95:
 20519                           	opt stack 0
 20520  0030BA                     _sevenSegmentUpdate:
 20521                           	opt stack 17
 20522                           
 20523                           ;sevenseg.c: 43: uint8_t static digitPointer = 0;
 20524                           ;sevenseg.c: 44: uint8_t static digitsToDisplay[3] = {0, 0, 0};
 20525                           ;sevenseg.c: 45: PORTC &= ~(unsigned)(1 << digitPointer);
 20526                           
 20527                           ;incstack = 0
 20528  0030BA  C049  F011         	movff	sevenSegmentUpdate@digitPointer,??_sevenSegmentUpdate
 20529  0030BE  0E01               	movlw	1
 20530  0030C0  6E12               	movwf	(??_sevenSegmentUpdate+1)& (0+255),c
 20531  0030C2  2A11               	incf	??_sevenSegmentUpdate,f,c
 20532  0030C4  D002               	goto	i2u717_44
 20533  0030C6                     i2u717_45:
 20534  0030C6  90D8               	bcf	status,0,c
 20535  0030C8  3612               	rlcf	??_sevenSegmentUpdate+1,f,c
 20536  0030CA                     i2u717_44:
 20537  0030CA  2E11               	decfsz	??_sevenSegmentUpdate,f,c
 20538  0030CC  D7FC               	goto	i2u717_45
 20539  0030CE  5012               	movf	??_sevenSegmentUpdate+1,w,c
 20540  0030D0  0AFF               	xorlw	255
 20541  0030D2  1682               	andwf	3970,f,c	;volatile
 20542                           
 20543                           ;sevenseg.c: 46: PORTA = 0x00;
 20544  0030D4  0E00               	movlw	0
 20545  0030D6  6E80               	movwf	3968,c	;volatile
 20546                           
 20547                           ;sevenseg.c: 47: digitPointer = (unsigned)((digitPointer >= 2) ? 0 : digitPointer + 1);
 20548  0030D8  0E02               	movlw	2
 20549  0030DA  6049               	cpfslt	sevenSegmentUpdate@digitPointer,c
 20550  0030DC  D007               	goto	i2l704
 20551  0030DE  0E01               	movlw	1
 20552  0030E0  2449               	addwf	sevenSegmentUpdate@digitPointer,w,c
 20553  0030E2  6E13               	movwf	_sevenSegmentUpdate$2058,c
 20554  0030E4  6A14               	clrf	_sevenSegmentUpdate$2058+1,c
 20555  0030E6  0E00               	movlw	0
 20556  0030E8  2214               	addwfc	_sevenSegmentUpdate$2058+1,f,c
 20557  0030EA  D004               	goto	i2l706
 20558  0030EC                     i2l704:
 20559  0030EC  0E00               	movlw	0
 20560  0030EE  6E14               	movwf	_sevenSegmentUpdate$2058+1,c
 20561  0030F0  0E00               	movlw	0
 20562  0030F2  6E13               	movwf	_sevenSegmentUpdate$2058,c
 20563  0030F4                     i2l706:
 20564  0030F4  C013  F049         	movff	_sevenSegmentUpdate$2058,sevenSegmentUpdate@digitPointer
 20565                           
 20566                           ;sevenseg.c: 49: if (numberToDisplay > 999) {
 20567  0030F8  0EE8               	movlw	232
 20568  0030FA  5C0F               	subwf	sevenSegmentUpdate@numberToDisplay,w,c
 20569  0030FC  0E03               	movlw	3
 20570  0030FE  5810               	subwfb	sevenSegmentUpdate@numberToDisplay+1,w,c
 20571  003100  B0D8               	btfsc	status,0,c
 20572  003102  0012               	return	
 20573                           
 20574                           ;sevenseg.c: 51: }
 20575                           ;sevenseg.c: 52: for (uint8_t i = 0; i < 3; i++) {
 20576                           
 20577                           ;sevenseg.c: 50: return;
 20578  003104  0E00               	movlw	0
 20579  003106  6E15               	movwf	sevenSegmentUpdate@i,c
 20580  003108                     i2l6278:
 20581  003108  0E02               	movlw	2
 20582  00310A  6415               	cpfsgt	sevenSegmentUpdate@i,c
 20583  00310C  D001               	goto	i2l709
 20584  00310E  D013               	goto	i2u721_40
 20585  003110                     i2l709:
 20586                           
 20587                           ;sevenseg.c: 53: digitsToDisplay[i] = parseNumber(numberToDisplay, i);
 20588  003110  5015               	movf	sevenSegmentUpdate@i,w,c
 20589  003112  0D01               	mullw	1
 20590  003114  0E3C               	movlw	low sevenSegmentUpdate@digitsToDisplay
 20591  003116  24F3               	addwf	prodl,w,c
 20592  003118  6ED9               	movwf	fsr2l,c
 20593  00311A  0E00               	movlw	high sevenSegmentUpdate@digitsToDisplay
 20594  00311C  20F4               	addwfc	prodh,w,c
 20595  00311E  6EDA               	movwf	fsr2h,c
 20596  003120  C00F  F008         	movff	sevenSegmentUpdate@numberToDisplay,parseNumber@numberToDisplay
 20597  003124  C010  F009         	movff	sevenSegmentUpdate@numberToDisplay+1,parseNumber@numberToDisplay+1
 20598  003128  C015  F00A         	movff	sevenSegmentUpdate@i,parseNumber@digit
 20599  00312C  EC4C  F01C         	call	_parseNumber	;wreg free
 20600  003130  6EDF               	movwf	indf2,c
 20601  003132  2A15               	incf	sevenSegmentUpdate@i,f,c
 20602  003134  D7E9               	goto	i2l6278
 20603  003136                     i2u721_40:
 20604                           
 20605                           ;sevenseg.c: 54: }
 20606                           ;sevenseg.c: 55: PORTC |= (unsigned)(1 << digitPointer);
 20607  003136  C049  F011         	movff	sevenSegmentUpdate@digitPointer,??_sevenSegmentUpdate
 20608  00313A  0E01               	movlw	1
 20609  00313C  6E12               	movwf	(??_sevenSegmentUpdate+1)& (0+255),c
 20610  00313E  2A11               	incf	??_sevenSegmentUpdate,f,c
 20611  003140  D002               	goto	i2u722_44
 20612  003142                     i2u722_45:
 20613  003142  90D8               	bcf	status,0,c
 20614  003144  3612               	rlcf	??_sevenSegmentUpdate+1,f,c
 20615  003146                     i2u722_44:
 20616  003146  2E11               	decfsz	??_sevenSegmentUpdate,f,c
 20617  003148  D7FC               	goto	i2u722_45
 20618  00314A  5012               	movf	??_sevenSegmentUpdate+1,w,c
 20619  00314C  1282               	iorwf	3970,f,c	;volatile
 20620                           
 20621                           ;sevenseg.c: 56: PORTA = (sevenSegCharacters[digitsToDisplay[digitPointer]]);
 20622  00314E  5049               	movf	sevenSegmentUpdate@digitPointer,w,c
 20623  003150  0D01               	mullw	1
 20624  003152  0E3C               	movlw	low sevenSegmentUpdate@digitsToDisplay
 20625  003154  24F3               	addwf	prodl,w,c
 20626  003156  6ED9               	movwf	fsr2l,c
 20627  003158  0E00               	movlw	high sevenSegmentUpdate@digitsToDisplay
 20628  00315A  20F4               	addwfc	prodh,w,c
 20629  00315C  6EDA               	movwf	fsr2h,c
 20630  00315E  50DF               	movf	indf2,w,c
 20631  003160  6E11               	movwf	??_sevenSegmentUpdate& (0+255),c
 20632  003162  5011               	movf	??_sevenSegmentUpdate,w,c
 20633  003164  0D01               	mullw	1
 20634  003166  0EBE               	movlw	low _sevenSegCharacters
 20635  003168  24F3               	addwf	prodl,w,c
 20636  00316A  6ED9               	movwf	fsr2l,c
 20637  00316C  0E01               	movlw	high _sevenSegCharacters
 20638  00316E  20F4               	addwfc	prodh,w,c
 20639  003170  6EDA               	movwf	fsr2h,c
 20640  003172  50DF               	movf	indf2,w,c
 20641  003174  6E80               	movwf	3968,c	;volatile
 20642  003176  0012               	return		;funcret
 20643  003178                     __end_of_sevenSegmentUpdate:
 20644                           	opt stack 0
 20645                           pclatu	equ	0xFFB
 20646                           pclath	equ	0xFFA
 20647                           tblptru	equ	0xFF8
 20648                           tblptrh	equ	0xFF7
 20649                           tblptrl	equ	0xFF6
 20650                           tablat	equ	0xFF5
 20651                           prodh	equ	0xFF4
 20652                           prodl	equ	0xFF3
 20653                           intcon	equ	0xFF2
 20654                           intcon3	equ	0xFF0
 20655                           indf0	equ	0xFEF
 20656                           postinc0	equ	0xFEE
 20657                           plusw0	equ	0xFEB
 20658                           fsr0h	equ	0xFEA
 20659                           fsr0l	equ	0xFE9
 20660                           wreg	equ	0xFE8
 20661                           indf1	equ	0xFE7
 20662                           postinc1	equ	0xFE6
 20663                           postdec1	equ	0xFE5
 20664                           plusw1	equ	0xFE3
 20665                           fsr1h	equ	0xFE2
 20666                           fsr1l	equ	0xFE1
 20667                           indf2	equ	0xFDF
 20668                           postinc2	equ	0xFDE
 20669                           postdec2	equ	0xFDD
 20670                           plusw2	equ	0xFDB
 20671                           fsr2h	equ	0xFDA
 20672                           fsr2l	equ	0xFD9
 20673                           status	equ	0xFD8
 20674                           
 20675 ;; *************** function _parseNumber *****************
 20676 ;; Defined at:
 20677 ;;		line 59 in file "src/system/sevenseg.c"
 20678 ;; Parameters:    Size  Location     Type
 20679 ;;  numberToDisp    2    7[COMRAM] unsigned int 
 20680 ;;  digit           1    9[COMRAM] unsigned char 
 20681 ;; Auto vars:     Size  Location     Type
 20682 ;;  hundreds        1   13[COMRAM] unsigned char 
 20683 ;;  tens            1   12[COMRAM] unsigned char 
 20684 ;;  ones            1   11[COMRAM] unsigned char 
 20685 ;; Return value:  Size  Location     Type
 20686 ;;                  1    wreg      unsigned char 
 20687 ;; Registers used:
 20688 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 20689 ;; Tracked objects:
 20690 ;;		On entry : 0/0
 20691 ;;		On exit  : 0/0
 20692 ;;		Unchanged: 0/0
 20693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20694 ;;      Params:         3       0       0       0       0       0       0       0       0
 20695 ;;      Locals:         3       0       0       0       0       0       0       0       0
 20696 ;;      Temps:          1       0       0       0       0       0       0       0       0
 20697 ;;      Totals:         7       0       0       0       0       0       0       0       0
 20698 ;;Total ram usage:        7 bytes
 20699 ;; Hardware stack levels used:    1
 20700 ;; Hardware stack levels required when called:    1
 20701 ;; This function calls:
 20702 ;;		i2___lwdiv
 20703 ;; This function is called by:
 20704 ;;		_sevenSegmentUpdate
 20705 ;; This function uses a non-reentrant model
 20706 ;;
 20707                           
 20708                           	psect	text96
 20709  003898                     __ptext96:
 20710                           	opt stack 0
 20711  003898                     _parseNumber:
 20712                           	opt stack 17
 20713                           
 20714                           ;sevenseg.c: 61: uint8_t hundreds = numberToDisplay / 100u;
 20715                           
 20716                           ;incstack = 0
 20717  003898  C008  F001         	movff	parseNumber@numberToDisplay,i2___lwdiv@dividend
 20718  00389C  C009  F002         	movff	parseNumber@numberToDisplay+1,i2___lwdiv@dividend+1
 20719  0038A0  0E00               	movlw	0
 20720  0038A2  6E04               	movwf	i2___lwdiv@divisor+1,c
 20721  0038A4  0E64               	movlw	100
 20722  0038A6  6E03               	movwf	i2___lwdiv@divisor,c
 20723  0038A8  EC97  F01F         	call	i2___lwdiv	;wreg free
 20724  0038AC  5001               	movf	?i2___lwdiv,w,c
 20725  0038AE  6E0E               	movwf	parseNumber@hundreds,c
 20726                           
 20727                           ;sevenseg.c: 62: uint8_t tens = (numberToDisplay - hundreds * 100u) / 10u;
 20728  0038B0  500E               	movf	parseNumber@hundreds,w,c
 20729  0038B2  0D64               	mullw	100
 20730  0038B4  1EF3               	comf	prodl,f,c
 20731  0038B6  1EF4               	comf	prodh,f,c
 20732  0038B8  4AF3               	infsnz	prodl,f,c
 20733  0038BA  2AF4               	incf	prodh,f,c
 20734  0038BC  5008               	movf	parseNumber@numberToDisplay,w,c
 20735  0038BE  24F3               	addwf	prodl,w,c
 20736  0038C0  6E01               	movwf	i2___lwdiv@dividend,c
 20737  0038C2  5009               	movf	parseNumber@numberToDisplay+1,w,c
 20738  0038C4  20F4               	addwfc	prodh,w,c
 20739  0038C6  6E02               	movwf	i2___lwdiv@dividend+1,c
 20740  0038C8  0E00               	movlw	0
 20741  0038CA  6E04               	movwf	i2___lwdiv@divisor+1,c
 20742  0038CC  0E0A               	movlw	10
 20743  0038CE  6E03               	movwf	i2___lwdiv@divisor,c
 20744  0038D0  EC97  F01F         	call	i2___lwdiv	;wreg free
 20745  0038D4  5001               	movf	?i2___lwdiv,w,c
 20746  0038D6  6E0D               	movwf	parseNumber@tens,c
 20747                           
 20748                           ;sevenseg.c: 63: uint8_t ones = (numberToDisplay - hundreds * 100u - tens * 10u);
 20749  0038D8  500D               	movf	parseNumber@tens,w,c
 20750  0038DA  0D0A               	mullw	10
 20751  0038DC  CFF3 F00B          	movff	prodl,??_parseNumber
 20752  0038E0  500E               	movf	parseNumber@hundreds,w,c
 20753  0038E2  0D64               	mullw	100
 20754  0038E4  50F3               	movf	prodl,w,c
 20755  0038E6  240B               	addwf	??_parseNumber,w,c
 20756  0038E8  0800               	sublw	0
 20757  0038EA  2408               	addwf	parseNumber@numberToDisplay,w,c
 20758  0038EC  6E0C               	movwf	parseNumber@ones,c
 20759                           
 20760                           ;sevenseg.c: 64: switch (digit) {
 20761  0038EE  D008               	goto	i2l713
 20762  0038F0                     
 20763                           ;sevenseg.c: 66: return ones;
 20764  0038F0  500C               	movf	parseNumber@ones,w,c
 20765  0038F2  0012               	return	
 20766  0038F4                     
 20767                           ;sevenseg.c: 68: return tens;
 20768  0038F4  500D               	movf	parseNumber@tens,w,c
 20769  0038F6  0012               	return	
 20770  0038F8                     
 20771                           ;sevenseg.c: 70: return hundreds;
 20772  0038F8  500E               	movf	parseNumber@hundreds,w,c
 20773  0038FA  0012               	return	
 20774  0038FC  0E00               	movlw	0
 20775                           
 20776                           ;sevenseg.c: 72: }
 20777  0038FE  0012               	return	
 20778  003900                     i2l713:
 20779  003900  500A               	movf	parseNumber@digit,w,c
 20780                           
 20781                           ; Switch size 1, requested type "space"
 20782                           ; Number of cases is 3, Range of values is 0 to 2
 20783                           ; switch strategies available:
 20784                           ; Name         Instructions Cycles
 20785                           ; simple_byte           10     6 (average)
 20786                           ;	Chosen strategy is simple_byte
 20787  003902  0A00               	xorlw	0	; case 0
 20788  003904  B4D8               	btfsc	status,2,c
 20789  003906  D7F8               	goto	i2l717
 20790  003908  0A01               	xorlw	1	; case 1
 20791  00390A  B4D8               	btfsc	status,2,c
 20792  00390C  D7F3               	goto	i2l716
 20793  00390E  0A03               	xorlw	3	; case 2
 20794  003910  B4D8               	btfsc	status,2,c
 20795  003912  D7EE               	goto	i2l714
 20796  003914  D7F3               	goto	i2l718
 20797  003916                     __end_of_parseNumber:
 20798                           	opt stack 0
 20799                           pclatu	equ	0xFFB
 20800                           pclath	equ	0xFFA
 20801                           tblptru	equ	0xFF8
 20802                           tblptrh	equ	0xFF7
 20803                           tblptrl	equ	0xFF6
 20804                           tablat	equ	0xFF5
 20805                           prodh	equ	0xFF4
 20806                           prodl	equ	0xFF3
 20807                           intcon	equ	0xFF2
 20808                           intcon3	equ	0xFF0
 20809                           indf0	equ	0xFEF
 20810                           postinc0	equ	0xFEE
 20811                           plusw0	equ	0xFEB
 20812                           fsr0h	equ	0xFEA
 20813                           fsr0l	equ	0xFE9
 20814                           wreg	equ	0xFE8
 20815                           indf1	equ	0xFE7
 20816                           postinc1	equ	0xFE6
 20817                           postdec1	equ	0xFE5
 20818                           plusw1	equ	0xFE3
 20819                           fsr1h	equ	0xFE2
 20820                           fsr1l	equ	0xFE1
 20821                           indf2	equ	0xFDF
 20822                           postinc2	equ	0xFDE
 20823                           postdec2	equ	0xFDD
 20824                           plusw2	equ	0xFDB
 20825                           fsr2h	equ	0xFDA
 20826                           fsr2l	equ	0xFD9
 20827                           status	equ	0xFD8
 20828                           
 20829 ;; *************** function i2___lwdiv *****************
 20830 ;; Defined at:
 20831 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 20832 ;; Parameters:    Size  Location     Type
 20833 ;;  dividend        2    0[COMRAM] unsigned int 
 20834 ;;  divisor         2    2[COMRAM] unsigned int 
 20835 ;; Auto vars:     Size  Location     Type
 20836 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 20837 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 20838 ;; Return value:  Size  Location     Type
 20839 ;;                  2    0[COMRAM] unsigned int 
 20840 ;; Registers used:
 20841 ;;		wreg, status,2, status,0
 20842 ;; Tracked objects:
 20843 ;;		On entry : 0/0
 20844 ;;		On exit  : 0/0
 20845 ;;		Unchanged: 0/0
 20846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20847 ;;      Params:         4       0       0       0       0       0       0       0       0
 20848 ;;      Locals:         3       0       0       0       0       0       0       0       0
 20849 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20850 ;;      Totals:         7       0       0       0       0       0       0       0       0
 20851 ;;Total ram usage:        7 bytes
 20852 ;; Hardware stack levels used:    1
 20853 ;; This function calls:
 20854 ;;		Nothing
 20855 ;; This function is called by:
 20856 ;;		_parseNumber
 20857 ;; This function uses a non-reentrant model
 20858 ;;
 20859                           
 20860                           	psect	text97
 20861  003F2E                     __ptext97:
 20862                           	opt stack 0
 20863  003F2E                     i2___lwdiv:
 20864                           	opt stack 17
 20865                           
 20866                           ;incstack = 0
 20867  003F2E  0E00               	movlw	0
 20868  003F30  6E06               	movwf	i2___lwdiv@quotient+1,c
 20869  003F32  0E00               	movlw	0
 20870  003F34  6E05               	movwf	i2___lwdiv@quotient,c
 20871  003F36  5003               	movf	i2___lwdiv@divisor,w,c
 20872  003F38  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 20873  003F3A  B4D8               	btfsc	status,2,c
 20874  003F3C  D01C               	goto	i2l1429
 20875  003F3E  0E01               	movlw	1
 20876  003F40  6E07               	movwf	i2___lwdiv@counter,c
 20877  003F42  D004               	goto	i2l1424
 20878  003F44  90D8               	bcf	status,0,c
 20879  003F46  3603               	rlcf	i2___lwdiv@divisor,f,c
 20880  003F48  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 20881  003F4A  2A07               	incf	i2___lwdiv@counter,f,c
 20882  003F4C                     i2l1424:
 20883  003F4C  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 20884  003F4E  D7FA               	goto	i2l1425
 20885  003F50                     i2u621_40:
 20886  003F50  90D8               	bcf	status,0,c
 20887  003F52  3605               	rlcf	i2___lwdiv@quotient,f,c
 20888  003F54  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 20889  003F56  5003               	movf	i2___lwdiv@divisor,w,c
 20890  003F58  5C01               	subwf	i2___lwdiv@dividend,w,c
 20891  003F5A  5004               	movf	i2___lwdiv@divisor+1,w,c
 20892  003F5C  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 20893  003F5E  A0D8               	btfss	status,0,c
 20894  003F60  D005               	goto	i2l1428
 20895  003F62  5003               	movf	i2___lwdiv@divisor,w,c
 20896  003F64  5E01               	subwf	i2___lwdiv@dividend,f,c
 20897  003F66  5004               	movf	i2___lwdiv@divisor+1,w,c
 20898  003F68  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 20899  003F6A  8005               	bsf	i2___lwdiv@quotient,0,c
 20900  003F6C                     i2l1428:
 20901  003F6C  90D8               	bcf	status,0,c
 20902  003F6E  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 20903  003F70  3203               	rrcf	i2___lwdiv@divisor,f,c
 20904  003F72  2E07               	decfsz	i2___lwdiv@counter,f,c
 20905  003F74  D7ED               	goto	i2u621_40
 20906  003F76                     i2l1429:
 20907  003F76  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 20908  003F7A  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 20909  003F7E  0012               	return		;funcret
 20910  003F80                     __end_ofi2___lwdiv:
 20911                           	opt stack 0
 20912                           pclatu	equ	0xFFB
 20913                           pclath	equ	0xFFA
 20914                           tblptru	equ	0xFF8
 20915                           tblptrh	equ	0xFF7
 20916                           tblptrl	equ	0xFF6
 20917                           tablat	equ	0xFF5
 20918                           prodh	equ	0xFF4
 20919                           prodl	equ	0xFF3
 20920                           intcon	equ	0xFF2
 20921                           intcon3	equ	0xFF0
 20922                           indf0	equ	0xFEF
 20923                           postinc0	equ	0xFEE
 20924                           plusw0	equ	0xFEB
 20925                           fsr0h	equ	0xFEA
 20926                           fsr0l	equ	0xFE9
 20927                           wreg	equ	0xFE8
 20928                           indf1	equ	0xFE7
 20929                           postinc1	equ	0xFE6
 20930                           postdec1	equ	0xFE5
 20931                           plusw1	equ	0xFE3
 20932                           fsr1h	equ	0xFE2
 20933                           fsr1l	equ	0xFE1
 20934                           indf2	equ	0xFDF
 20935                           postinc2	equ	0xFDE
 20936                           postdec2	equ	0xFDD
 20937                           plusw2	equ	0xFDB
 20938                           fsr2h	equ	0xFDA
 20939                           fsr2l	equ	0xFD9
 20940                           status	equ	0xFD8
 20941                           
 20942 ;; *************** function _buttonHandler *****************
 20943 ;; Defined at:
 20944 ;;		line 245 in file "src/system/main.c"
 20945 ;; Parameters:    Size  Location     Type
 20946 ;;  state           2    0[COMRAM] PTR volatile unsigned ch
 20947 ;;		 -> buttonState(1), 
 20948 ;; Auto vars:     Size  Location     Type
 20949 ;;  debounceValu    4    2[COMRAM] const unsigned long 
 20950 ;; Return value:  Size  Location     Type
 20951 ;;                  1    wreg      void 
 20952 ;; Registers used:
 20953 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 20954 ;; Tracked objects:
 20955 ;;		On entry : 0/0
 20956 ;;		On exit  : 0/0
 20957 ;;		Unchanged: 0/0
 20958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20959 ;;      Params:         2       0       0       0       0       0       0       0       0
 20960 ;;      Locals:         4       0       0       0       0       0       0       0       0
 20961 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20962 ;;      Totals:         6       0       0       0       0       0       0       0       0
 20963 ;;Total ram usage:        6 bytes
 20964 ;; Hardware stack levels used:    1
 20965 ;; This function calls:
 20966 ;;		Nothing
 20967 ;; This function is called by:
 20968 ;;		_ISR
 20969 ;; This function uses a non-reentrant model
 20970 ;;
 20971                           
 20972                           	psect	text98
 20973  0034C4                     __ptext98:
 20974                           	opt stack 0
 20975  0034C4                     _buttonHandler:
 20976                           	opt stack 19
 20977                           
 20978                           ;main.c: 246: uint8_t static oldState = 0;
 20979                           ;main.c: 247: uint8_t static newState = 0;
 20980                           ;main.c: 248: uint32_t static debounceCounter = 0;
 20981                           ;main.c: 249: const uint32_t debounceValue = 0x1f;
 20982                           
 20983                           ;incstack = 0
 20984  0034C4  0E1F               	movlw	31
 20985  0034C6  6E03               	movwf	buttonHandler@debounceValue,c
 20986  0034C8  0E00               	movlw	0
 20987  0034CA  6E04               	movwf	buttonHandler@debounceValue+1,c
 20988  0034CC  0E00               	movlw	0
 20989  0034CE  6E05               	movwf	buttonHandler@debounceValue+2,c
 20990  0034D0  0E00               	movlw	0
 20991  0034D2  6E06               	movwf	buttonHandler@debounceValue+3,c
 20992                           
 20993                           ;main.c: 250: if ((unsigned)(!(PORTB & (1<<5)))) {
 20994  0034D4  BA81               	btfsc	3969,5,c	;volatile
 20995  0034D6  D00F               	goto	i2l664
 20996                           
 20997                           ;main.c: 251: if (debounceCounter < 0xffff)
 20998  0034D8  5033               	movf	buttonHandler@debounceCounter+3,w,c
 20999  0034DA  1032               	iorwf	buttonHandler@debounceCounter+2,w,c
 21000  0034DC  E114               	bnz	i2l6246
 21001  0034DE  2830               	incf	buttonHandler@debounceCounter,w,c
 21002  0034E0  0EFF               	movlw	255
 21003  0034E2  5831               	subwfb	buttonHandler@debounceCounter+1,w,c
 21004  0034E4  B0D8               	btfsc	status,0,c
 21005  0034E6  D00F               	goto	i2l666
 21006                           
 21007                           ;main.c: 252: debounceCounter++;
 21008  0034E8  0E01               	movlw	1
 21009  0034EA  2630               	addwf	buttonHandler@debounceCounter,f,c
 21010  0034EC  0E00               	movlw	0
 21011  0034EE  2231               	addwfc	buttonHandler@debounceCounter+1,f,c
 21012  0034F0  2232               	addwfc	buttonHandler@debounceCounter+2,f,c
 21013  0034F2  2233               	addwfc	buttonHandler@debounceCounter+3,f,c
 21014                           
 21015                           ;main.c: 253: } else {
 21016  0034F4  D008               	goto	i2l666
 21017  0034F6                     i2l664:
 21018                           
 21019                           ;main.c: 254: debounceCounter = 0;
 21020  0034F6  0E00               	movlw	0
 21021  0034F8  6E30               	movwf	buttonHandler@debounceCounter,c
 21022  0034FA  0E00               	movlw	0
 21023  0034FC  6E31               	movwf	buttonHandler@debounceCounter+1,c
 21024  0034FE  0E00               	movlw	0
 21025  003500  6E32               	movwf	buttonHandler@debounceCounter+2,c
 21026  003502  0E00               	movlw	0
 21027  003504  6E33               	movwf	buttonHandler@debounceCounter+3,c
 21028  003506                     i2l666:
 21029  003506                     i2l6246:
 21030                           
 21031                           ;main.c: 255: }
 21032                           ;main.c: 256: newState = (unsigned) ((debounceCounter >= debounceValue) ? 1 : 0);
 21033  003506  5003               	movf	buttonHandler@debounceValue,w,c
 21034  003508  5C30               	subwf	buttonHandler@debounceCounter,w,c
 21035  00350A  5004               	movf	buttonHandler@debounceValue+1,w,c
 21036  00350C  5831               	subwfb	buttonHandler@debounceCounter+1,w,c
 21037  00350E  5005               	movf	buttonHandler@debounceValue+2,w,c
 21038  003510  5832               	subwfb	buttonHandler@debounceCounter+2,w,c
 21039  003512  5006               	movf	buttonHandler@debounceValue+3,w,c
 21040  003514  5833               	subwfb	buttonHandler@debounceCounter+3,w,c
 21041  003516  A0D8               	btfss	status,0,c
 21042  003518  D002               	goto	i2u713_40
 21043  00351A  0E01               	movlw	1
 21044  00351C  D001               	goto	i2u714_40
 21045  00351E                     i2u713_40:
 21046  00351E  0E00               	movlw	0
 21047  003520                     i2u714_40:
 21048  003520  6E4A               	movwf	buttonHandler@newState,c
 21049                           
 21050                           ;main.c: 257: if (newState && !oldState) {
 21051  003522  504A               	movf	buttonHandler@newState,w,c
 21052  003524  B4D8               	btfsc	status,2,c
 21053  003526  D011               	goto	i2l667
 21054  003528  504B               	movf	buttonHandler@oldState,w,c
 21055  00352A  A4D8               	btfss	status,2,c
 21056  00352C  D00E               	goto	i2l667
 21057                           
 21058                           ;main.c: 258: debounceCounter = debounceValue;
 21059  00352E  C003  F030         	movff	buttonHandler@debounceValue,buttonHandler@debounceCounter
 21060  003532  C004  F031         	movff	buttonHandler@debounceValue+1,buttonHandler@debounceCounter+1
 21061  003536  C005  F032         	movff	buttonHandler@debounceValue+2,buttonHandler@debounceCounter+2
 21062  00353A  C006  F033         	movff	buttonHandler@debounceValue+3,buttonHandler@debounceCounter+3
 21063                           
 21064                           ;main.c: 259: *state = 1;
 21065  00353E  C001  FFD9         	movff	buttonHandler@state,fsr2l
 21066  003542  C002  FFDA         	movff	buttonHandler@state+1,fsr2h
 21067  003546  0E01               	movlw	1
 21068  003548  D005               	goto	L9
 21069  00354A                     i2l667:
 21070                           
 21071                           ;main.c: 261: *state = 0;
 21072  00354A  C001  FFD9         	movff	buttonHandler@state,fsr2l
 21073  00354E  C002  FFDA         	movff	buttonHandler@state+1,fsr2h
 21074  003552  0E00               	movlw	0
 21075  003554                     L9:
 21076  003554  6EDF               	movwf	indf2,c
 21077                           
 21078                           ;main.c: 262: }
 21079                           ;main.c: 263: oldState = newState;
 21080  003556  C04A  F04B         	movff	buttonHandler@newState,buttonHandler@oldState
 21081  00355A  0012               	return		;funcret
 21082  00355C                     __end_of_buttonHandler:
 21083                           	opt stack 0
 21084                           pclatu	equ	0xFFB
 21085                           pclath	equ	0xFFA
 21086                           tblptru	equ	0xFF8
 21087                           tblptrh	equ	0xFF7
 21088                           tblptrl	equ	0xFF6
 21089                           tablat	equ	0xFF5
 21090                           prodh	equ	0xFF4
 21091                           prodl	equ	0xFF3
 21092                           intcon	equ	0xFF2
 21093                           intcon3	equ	0xFF0
 21094                           indf0	equ	0xFEF
 21095                           postinc0	equ	0xFEE
 21096                           plusw0	equ	0xFEB
 21097                           fsr0h	equ	0xFEA
 21098                           fsr0l	equ	0xFE9
 21099                           wreg	equ	0xFE8
 21100                           indf1	equ	0xFE7
 21101                           postinc1	equ	0xFE6
 21102                           postdec1	equ	0xFE5
 21103                           plusw1	equ	0xFE3
 21104                           fsr1h	equ	0xFE2
 21105                           fsr1l	equ	0xFE1
 21106                           indf2	equ	0xFDF
 21107                           postinc2	equ	0xFDE
 21108                           postdec2	equ	0xFDD
 21109                           plusw2	equ	0xFDB
 21110                           fsr2h	equ	0xFDA
 21111                           fsr2l	equ	0xFD9
 21112                           status	equ	0xFD8
 21113                           pclatu	equ	0xFFB
 21114                           pclath	equ	0xFFA
 21115                           tblptru	equ	0xFF8
 21116                           tblptrh	equ	0xFF7
 21117                           tblptrl	equ	0xFF6
 21118                           tablat	equ	0xFF5
 21119                           prodh	equ	0xFF4
 21120                           prodl	equ	0xFF3
 21121                           intcon	equ	0xFF2
 21122                           intcon3	equ	0xFF0
 21123                           indf0	equ	0xFEF
 21124                           postinc0	equ	0xFEE
 21125                           plusw0	equ	0xFEB
 21126                           fsr0h	equ	0xFEA
 21127                           fsr0l	equ	0xFE9
 21128                           wreg	equ	0xFE8
 21129                           indf1	equ	0xFE7
 21130                           postinc1	equ	0xFE6
 21131                           postdec1	equ	0xFE5
 21132                           plusw1	equ	0xFE3
 21133                           fsr1h	equ	0xFE2
 21134                           fsr1l	equ	0xFE1
 21135                           indf2	equ	0xFDF
 21136                           postinc2	equ	0xFDE
 21137                           postdec2	equ	0xFDD
 21138                           plusw2	equ	0xFDB
 21139                           fsr2h	equ	0xFDA
 21140                           fsr2l	equ	0xFD9
 21141                           status	equ	0xFD8
 21142                           
 21143                           	psect	rparam
 21144  0000                     pclatu	equ	0xFFB
 21145                           pclath	equ	0xFFA
 21146                           tblptru	equ	0xFF8
 21147                           tblptrh	equ	0xFF7
 21148                           tblptrl	equ	0xFF6
 21149                           tablat	equ	0xFF5
 21150                           prodh	equ	0xFF4
 21151                           prodl	equ	0xFF3
 21152                           intcon	equ	0xFF2
 21153                           intcon3	equ	0xFF0
 21154                           indf0	equ	0xFEF
 21155                           postinc0	equ	0xFEE
 21156                           plusw0	equ	0xFEB
 21157                           fsr0h	equ	0xFEA
 21158                           fsr0l	equ	0xFE9
 21159                           wreg	equ	0xFE8
 21160                           indf1	equ	0xFE7
 21161                           postinc1	equ	0xFE6
 21162                           postdec1	equ	0xFE5
 21163                           plusw1	equ	0xFE3
 21164                           fsr1h	equ	0xFE2
 21165                           fsr1l	equ	0xFE1
 21166                           indf2	equ	0xFDF
 21167                           postinc2	equ	0xFDE
 21168                           postdec2	equ	0xFDD
 21169                           plusw2	equ	0xFDB
 21170                           fsr2h	equ	0xFDA
 21171                           fsr2l	equ	0xFD9
 21172                           status	equ	0xFD8
 21173                           
 21174                           	psect	temp
 21175  00004F                     btemp:
 21176                           	opt stack 0
 21177  00004F                     	ds	1
 21178  0000                     int$flags	set	btemp
 21179  0000                     wtemp6	set	btemp+1
 21180                           pclatu	equ	0xFFB
 21181                           pclath	equ	0xFFA
 21182                           tblptru	equ	0xFF8
 21183                           tblptrh	equ	0xFF7
 21184                           tblptrl	equ	0xFF6
 21185                           tablat	equ	0xFF5
 21186                           prodh	equ	0xFF4
 21187                           prodl	equ	0xFF3
 21188                           intcon	equ	0xFF2
 21189                           intcon3	equ	0xFF0
 21190                           indf0	equ	0xFEF
 21191                           postinc0	equ	0xFEE
 21192                           plusw0	equ	0xFEB
 21193                           fsr0h	equ	0xFEA
 21194                           fsr0l	equ	0xFE9
 21195                           wreg	equ	0xFE8
 21196                           indf1	equ	0xFE7
 21197                           postinc1	equ	0xFE6
 21198                           postdec1	equ	0xFE5
 21199                           plusw1	equ	0xFE3
 21200                           fsr1h	equ	0xFE2
 21201                           fsr1l	equ	0xFE1
 21202                           indf2	equ	0xFDF
 21203                           postinc2	equ	0xFDE
 21204                           postdec2	equ	0xFDD
 21205                           plusw2	equ	0xFDB
 21206                           fsr2h	equ	0xFDA
 21207                           fsr2l	equ	0xFD9
 21208                           status	equ	0xFD8


Data Sizes:
    Strings     878
    Constant    11
    Data        48
    BSS         435
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     39      78
    BANK0           160    159     159
    BANK1           256    139     218
    BANK2           256      0     253
    BANK3           256     50     162
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ethernetController_dropPacket@frame	PTR struct ethernetFrame size(2) Largest target is 113
		 -> stack.ethernet(BANK2[15]), stack(BANK2[113]), 

    ipv4_setToAllZero@ip	PTR struct ipv4_address size(2) Largest target is 4
		 -> ARP_initTable@ip(BANK0[4]), 

    ipv4_isAllZero@ip	PTR struct ipv4_address size(2) Largest target is 32
		 -> ARP_parseFromRXBuffer@arp(BANK0[32]), 

    ipv4_cmp@b	PTR struct ipv4_address size(2) Largest target is 32
		 -> ARP_checkForEntry@ip(BANK0[4]), ARP_parseFromRXBuffer@arp(BANK0[32]), 

    ipv4_cmp@a	PTR struct ipv4_address size(2) Largest target is 112
		 -> ARP_table(BANK3[112]), ARP_parseFromRXBuffer@arp(BANK0[32]), 

    ipv4_handleNewPacket@frame	PTR struct ethernetFrame size(2) Largest target is 113
		 -> stack.ethernet(BANK2[15]), stack(BANK2[113]), 

    ipv4_writeHeaderIntoBuffer@ptr	PTR unsigned char  size(2) Largest target is 32
		 -> main@headerBuf(BANK3[32]), 

    ipv4_calculateHeaderChecksum@header	PTR struct ipv4_header size(2) Largest target is 113
		 -> stack.pendingPacketToSend(BANK2[62]), stack(BANK2[113]), 

    ipv4_txFrameRequest@packet	PTR struct ipv4_packet size(2) Largest target is 113
		 -> stack(BANK2[113]), 

    ARP_checkForEntry@index	PTR unsigned char  size(2) Largest target is 1
		 -> ipv4_sendFrame@index(BANK1[1]), 

    ARP_parseFromRXBuffer@frame	PTR struct ethernetFrame size(2) Largest target is 113
		 -> stack.ethernet(BANK2[15]), stack(BANK2[113]), 

    ARP_handleNewPacket@frame	PTR struct ethernetFrame size(2) Largest target is 113
		 -> stack.ethernet(BANK2[15]), stack(BANK2[113]), 

    sp__arpEntryToString	PTR unsigned char  size(2) Largest target is 50
		 -> arpEntryToString@string(BANK2[50]), 

    sp__hexToString	PTR unsigned char  size(2) Largest target is 10
		 -> hexToString@number(BANK1[10]), 

    UARTTransmitText@str	PTR const unsigned char  size(2) Largest target is 55
		 -> STR_69(CODE[17]), STR_68(CODE[4]), STR_67(CODE[8]), STR_66(CODE[3]), 
		 -> STR_65(CODE[2]), STR_64(CODE[3]), STR_63(CODE[16]), STR_62(CODE[15]), 
		 -> STR_61(CODE[10]), STR_60(CODE[2]), STR_59(CODE[3]), STR_58(CODE[5]), 
		 -> STR_57(CODE[3]), STR_56(CODE[2]), STR_55(CODE[39]), arpEntryToString@string(BANK2[50]), 
		 -> ipAdressToString@address(BANK1[16]), STR_54(CODE[18]), STR_53(CODE[4]), STR_52(CODE[5]), 
		 -> macToString@address(BANK0[18]), intToString@number(BANK1[10]), STR_51(CODE[5]), STR_50(CODE[9]), 
		 -> STR_49(CODE[30]), STR_48(CODE[55]), STR_47(CODE[37]), STR_46(CODE[15]), 
		 -> STR_45(CODE[14]), STR_44(CODE[19]), STR_43(CODE[30]), STR_42(CODE[17]), 
		 -> STR_41(CODE[8]), STR_40(CODE[29]), STR_39(CODE[29]), STR_38(CODE[20]), 
		 -> STR_37(CODE[19]), STR_36(CODE[19]), STR_35(CODE[13]), STR_34(CODE[51]), 
		 -> STR_33(CODE[28]), STR_32(CODE[4]), STR_31(CODE[23]), STR_30(CODE[4]), 
		 -> STR_29(CODE[21]), STR_28(CODE[12]), STR_27(CODE[38]), STR_26(CODE[3]), 
		 -> STR_25(CODE[9]), STR_24(CODE[2]), STR_23(CODE[12]), STR_22(CODE[24]), 
		 -> STR_21(CODE[3]), STR_20(CODE[3]), STR_19(CODE[3]), STR_18(CODE[5]), 
		 -> STR_17(CODE[2]), STR_16(CODE[2]), STR_15(CODE[5]), STR_14(CODE[3]), 
		 -> STR_13(CODE[3]), STR_12(CODE[2]), STR_11(CODE[7]), STR_10(CODE[6]), 
		 -> STR_9(CODE[16]), STR_8(CODE[10]), STR_7(CODE[12]), STR_6(CODE[2]), 
		 -> STR_5(CODE[2]), ethernetController_getDeviceName@string(BANK0[11]), STR_4(CODE[25]), STR_3(CODE[16]), 
		 -> STR_2(CODE[17]), STR_1(CODE[29]), 

    buttonHandler@state	PTR volatile unsigned char  size(2) Largest target is 1
		 -> buttonState(BANK1[1]), 

    sp__ipAdressToString	PTR unsigned char  size(2) Largest target is 16
		 -> ipAdressToString@address(BANK1[16]), 

    handleStackBackgroundTasks@stack	PTR volatile struct stack size(2) Largest target is 113
		 -> stack(BANK2[113]), 

    mac_setAllZero@mac	PTR struct macaddress size(2) Largest target is 6
		 -> ARP_initTable@mac(BANK0[6]), 

    mac_cmp@b	PTR struct macaddress size(2) Largest target is 32
		 -> ARP_parseFromRXBuffer@arp(BANK0[32]), 

    mac_cmp@a	PTR struct macaddress size(2) Largest target is 32
		 -> ARP_parseFromRXBuffer@arp(BANK0[32]), 

    mac_isAllZero@mac	PTR struct macaddress size(2) Largest target is 32
		 -> ARP_parseFromRXBuffer@arp(BANK0[32]), 

    mac_setToBroadcast@mac	PTR struct macaddress size(2) Largest target is 6
		 -> ARP_sendRequest@targetMAC(BANK1[6]), ARP_send@destination(BANK0[6]), 

    sp__etherTypeToString	PTR unsigned char  size(2) Largest target is 18
		 -> STR_54(CODE[18]), STR_53(CODE[4]), STR_52(CODE[5]), 

    sp__macToString	PTR unsigned char  size(2) Largest target is 18
		 -> macToString@address(BANK0[18]), 

    sp__intToString	PTR unsigned char  size(2) Largest target is 10
		 -> intToString@number(BANK1[10]), 

    ethernet_rxGetNewFrame@frame	PTR struct ethernetFrame size(2) Largest target is 113
		 -> stack.ethernet(BANK2[15]), stack(BANK2[113]), 

    ethernet_txFrameRequest@frame	PTR struct ethernetFrame size(2) Largest target is 113
		 -> ARP_send@ethFrame(BANK0[30]), stack(BANK2[113]), 

    ENC424J600_updateReceiveStatusVector@rsv	PTR unsigned char  size(2) Largest target is 6
		 -> ethernetController_getRSV@temp(BANK1[6]), 

    ENC424J600_readPHYRegister@data	PTR unsigned int  size(2) Largest target is 1
		 -> ethernetController_updateLinkStatus@temp16(BANK0[1]), 

    ENC424J600_readSPI@data	PTR unsigned char  size(2) Largest target is 6
		 -> ENC424J600_clearInterruptFlag@temp(BANK0[1]), ENC424J600_getInterruptFlags@low(BANK0[1]), ENC424J600_getInterruptFlags@high(BANK0[1]), ENC424J600_readPHYRegister@highByte(BANK0[1]), 
		 -> ENC424J600_readPHYRegister@lowByte(BANK0[1]), ENC424J600_readPHYRegister@temp(BANK0[1]), ENC424J600_disableAutoMACInsertion@temp(COMRAM[1]), ENC424J600_enableAutoMACInsertion@temp(BANK0[1]), 
		 -> ENC424J600_getPacketCount@lowByte(BANK0[1]), ethernetController_setLEDConfiguration@data(BANK0[1]), ethernetController_setLEDStatus@data(BANK0[1]), ethernetController_updateLinkStatus@temp(BANK0[1]), 
		 -> ethernetController_streamFromRXBuffer@temp(BANK0[1]), ethernetController_updateNextPacketPointer@newPointerH(BANK0[1]), ethernetController_updateNextPacketPointer@newPointerL(BANK0[1]), ethernetController_getRSV@temp(BANK1[6]), 
		 -> ethernetController_getEtherTypeField@lowByte(BANK0[1]), ethernetController_getEtherTypeField@highByte(BANK0[1]), ethernetController_getSourceMACAddress@temp(BANK0[1]), ethernetController_getDestinationMACAddress@temp(COMRAM[1]), 
		 -> mac.address(COMRAM[6]), ethernetController_getMacAddress@mac(BANK0[6]), ethernetController_getSiliconRevision@data(BANK0[1]), ethernetController_checkDeviceId@data(BANK0[1]), 
		 -> ethernetController_softReset@receivedData(BANK0[2]), 

    ENC424J600_writeSPI@data	PTR unsigned char  size(2) Largest target is 6
		 -> ENC424J600_clearInterruptFlag@temp(BANK0[1]), ENC424J600_readPHYRegister@temp(BANK0[1]), ENC424J600_readPHYRegister@unusedBits(BANK0[1]), ENC424J600_readPHYRegister@PHYaddress(BANK0[1]), 
		 -> ENC424J600_writeSingleByte@opcode(BANK0[1]), ENC424J600_readControlRegisterUnbanked@addr(BANK0[1]), ENC424J600_readControlRegisterUnbanked@opcode(BANK0[1]), ENC424J600_writeControlRegisterUnbanked@addr(BANK0[1]), 
		 -> ENC424J600_writeControlRegisterUnbanked@opcode(BANK0[1]), ENC424J600_disableAutoMACInsertion@temp(COMRAM[1]), ENC424J600_enableAutoMACInsertion@temp(BANK0[1]), ENC424J600_setRXTailPointer@highByte(BANK0[1]), 
		 -> ENC424J600_setRXTailPointer@lowByte(BANK0[1]), ENC424J600_setRXBufferStartAddress@highByte(BANK0[1]), ENC424J600_setRXBufferStartAddress@lowByte(BANK0[1]), ENC424J600_setERXDATAReadPointer@highByte(BANK0[1]), 
		 -> ENC424J600_setERXDATAReadPointer@lowByte(BANK0[1]), ENC424J600_setERXDATAReadPointer@opcode(BANK0[1]), ENC424J600_setGPDATAReadPointer@highByte(COMRAM[1]), ENC424J600_setGPDATAReadPointer@lowByte(COMRAM[1]), 
		 -> ENC424J600_setGPDATAReadPointer@opcode(COMRAM[1]), ENC424J600_setGPDATAWritePointer@highByte(BANK0[1]), ENC424J600_setGPDATAWritePointer@lowByte(BANK0[1]), ENC424J600_setGPDATAWritePointer@opcode(BANK0[1]), 
		 -> ENC424J600_setTXStartAddress@highByte(BANK0[1]), ENC424J600_setTXStartAddress@lowByte(BANK0[1]), ENC424J600_setTXLength@highByte(BANK0[1]), ENC424J600_setTXLength@lowByte(BANK0[1]), 
		 -> ethernetController_setLEDConfiguration@data(BANK0[1]), ethernetController_setLEDStatus@data(BANK0[1]), ethernetController_streamFromRXBuffer@opcode(BANK0[1]), ethernetController_updateNextPacketPointer@opcode(BANK0[1]), 
		 -> ethernetController_getRSV@opcode(BANK0[1]), ethernetController_getEtherTypeField@opcode(BANK0[1]), ethernetController_getSourceMACAddress@opcode(BANK0[1]), ethernetController_getDestinationMACAddress@opcode(COMRAM[1]), 
		 -> ethernetController_writeEtherTypeFieldToBuffer@opcode(BANK0[1]), ethernetController_writeEtherTypeFieldToBuffer@highByte(BANK0[1]), ethernetController_writeEtherTypeFieldToBuffer@lowByte(BANK0[1]), ethernetController_writeDestinationMACAddress@opcode(BANK0[1]), 
		 -> ethernetController_writeDestinationMACAddress@data(BANK0[6]), ethernetController_streamToTransmitBuffer@data(BANK0[1]), ethernetController_streamToTransmitBuffer@opcode(BANK0[1]), mac.address(COMRAM[6]), 
		 -> ethernetController_setMacAddress@mac(COMRAM[6]), ethernetController_softReset@dataToSend(BANK0[2]), 

    ENC424J600_readControlRegisterUnbanked@data	PTR unsigned char  size(2) Largest target is 6
		 -> ENC424J600_clearInterruptFlag@temp(BANK0[1]), ENC424J600_getInterruptFlags@low(BANK0[1]), ENC424J600_getInterruptFlags@high(BANK0[1]), ENC424J600_readPHYRegister@highByte(BANK0[1]), 
		 -> ENC424J600_readPHYRegister@lowByte(BANK0[1]), ENC424J600_readPHYRegister@temp(BANK0[1]), ENC424J600_disableAutoMACInsertion@temp(COMRAM[1]), ENC424J600_enableAutoMACInsertion@temp(BANK0[1]), 
		 -> ENC424J600_getPacketCount@lowByte(BANK0[1]), ethernetController_setLEDConfiguration@data(BANK0[1]), ethernetController_setLEDStatus@data(BANK0[1]), ethernetController_updateLinkStatus@temp(BANK0[1]), 
		 -> mac.address(COMRAM[6]), ethernetController_getMacAddress@mac(BANK0[6]), ethernetController_getSiliconRevision@data(BANK0[1]), ethernetController_checkDeviceId@data(BANK0[1]), 
		 -> ethernetController_softReset@receivedData(BANK0[2]), 

    ENC424J600_writeControlRegisterUnbanked@data	PTR unsigned char  size(2) Largest target is 6
		 -> ENC424J600_clearInterruptFlag@temp(BANK0[1]), ENC424J600_readPHYRegister@temp(BANK0[1]), ENC424J600_readPHYRegister@unusedBits(BANK0[1]), ENC424J600_readPHYRegister@PHYaddress(BANK0[1]), 
		 -> ENC424J600_disableAutoMACInsertion@temp(COMRAM[1]), ENC424J600_enableAutoMACInsertion@temp(BANK0[1]), ENC424J600_setRXTailPointer@highByte(BANK0[1]), ENC424J600_setRXTailPointer@lowByte(BANK0[1]), 
		 -> ENC424J600_setRXBufferStartAddress@highByte(BANK0[1]), ENC424J600_setRXBufferStartAddress@lowByte(BANK0[1]), ENC424J600_setTXStartAddress@highByte(BANK0[1]), ENC424J600_setTXStartAddress@lowByte(BANK0[1]), 
		 -> ENC424J600_setTXLength@highByte(BANK0[1]), ENC424J600_setTXLength@lowByte(BANK0[1]), ethernetController_setLEDConfiguration@data(BANK0[1]), ethernetController_setLEDStatus@data(BANK0[1]), 
		 -> mac.address(COMRAM[6]), ethernetController_setMacAddress@mac(COMRAM[6]), ethernetController_softReset@dataToSend(BANK0[2]), 

    ethernetController_updateLinkStatus@state	PTR struct ethernetConnection size(2) Largest target is 113
		 -> stack(BANK2[113]), 

    sp__ethernetController_getDeviceName	PTR unsigned char  size(2) Largest target is 11
		 -> ethernetController_getDeviceName@string(BANK0[11]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->_sevenSegmentUpdate
    _sevenSegmentUpdate->_parseNumber
    _parseNumber->i2___lwdiv

Critical Paths under _main in BANK0

    _printEthernetState->_UARTTransmitText
    _printErrorMessage->_UARTTransmitText
    _ipv4_txFrameRequest->_ethernet_txFrameRequest
    _ipv4_streamToTransmissionBuffer->_ethernetController_streamToTransmitBuffer
    _handleStackBackgroundTasks->_ethernet_rxGetNewFrame
    _ipv4_sendFrame->_ARP_sendRequest
    _ARP_sendRequest->_ARP_send
    _ARP_checkForEntry->_ipv4_cmp
    _ethernet_rxGetNewFrame->_ARP_handleNewPacket
    _ipv4_handleNewPacket->_UARTTransmitText
    _ethernetController_updateNextPacketPointer->_ENC424J600_setERXDATAReadPointer
    _ethernetController_getRSV->_ENC424J600_updateReceiveStatusVector
    _ethernetController_getEtherTypeField->_ENC424J600_setERXDATAReadPointer
    _UARTTransmitInt->_UARTTransmitText
    _intToString->___lldiv
    ___lldiv->___wmul
    _ethernetController_dropPacket->_ENC424J600_setRXTailPointer
    _ARP_replyIfNeeded->_ARP_send
    _macToString->_ethernetController_getMacAddress
    _ipAdressToString->___lwdiv
    _ethernetController_getMacAddress->_ENC424J600_readControlRegisterUnbanked
    _ARP_send->_ethernet_txFrameRequest
    _ethernet_txFrameRequest->_memory_txFrameRequest
    _memory_txFrameRequest->_checkForOverlap
    _checkForOverlap->_checkForOverlapSwitched
    _ethernetController_writeEtherTypeFieldToBuffer->_ENC424J600_setGPDATAWritePointer
    _ethernetController_writeDestinationMACAddress->_ENC424J600_setGPDATAWritePointer
    _ENC424J600_setGPDATAWritePointer->_ENC424J600_writeSPI
    _ethernetController_streamToTransmitBuffer->_ENC424J600_writeSPI
    _ethernetController_sendPacket->_ENC424J600_setTXLength
    _ethernetController_sendPacket->_ENC424J600_setTXStartAddress
    _ENC424J600_setTXStartAddress->_ENC424J600_writeControlRegisterUnbanked
    _ENC424J600_setTXLength->_ENC424J600_writeControlRegisterUnbanked
    _ethernetController_getSourceMACAddress->_ENC424J600_setERXDATAReadPointer
    _ARP_parseFromRXBuffer->_ethernetController_streamFromRXBuffer
    _ethernetController_streamFromRXBuffer->_ENC424J600_setRXTailPointer
    _ethernetController_getNextPacketPointer->_ENC424J600_getNextPacketPointer
    _ENC424J600_setERXDATAReadPointer->_ENC424J600_writeSPI
    _ethernetController_updateLinkStatus->_ENC424J600_readPHYRegister
    _ENC424J600_readPHYRegister->_ENC424J600_readControlRegisterUnbanked
    _ENC424J600_readPHYRegister->_ENC424J600_writeControlRegisterUnbanked
    _ethernetController_setLEDStatus->_ENC424J600_readControlRegisterUnbanked
    _ethernetController_setLEDStatus->_ENC424J600_writeControlRegisterUnbanked
    _ethernetController_setLEDConfiguration->_ENC424J600_readControlRegisterUnbanked
    _ethernetController_setLEDConfiguration->_ENC424J600_writeControlRegisterUnbanked
    _ethernetController_pollInterruptFlags->_ENC424J600_getInterruptFlags
    _ENC424J600_getInterruptFlags->_ENC424J600_readControlRegisterUnbanked
    _ethernetController_newPacketAvailable->_ENC424J600_getPacketCount
    _ethernetController_clearInterruptFlag->_ENC424J600_clearInterruptFlag
    _ENC424J600_clearInterruptFlag->_ENC424J600_readControlRegisterUnbanked
    _ENC424J600_clearInterruptFlag->_ENC424J600_writeControlRegisterUnbanked
    _ethernetController_init->_ethernetController_softReset
    _ethernetController_softReset->_UARTTransmitText
    _UARTTransmitText->_macToString
    _ethernetController_checkDeviceId->_ENC424J600_readControlRegisterUnbanked
    _ENC424J600_setRXTailPointer->_ENC424J600_writeControlRegisterUnbanked
    _ENC424J600_setRXBufferStartAddress->_ENC424J600_writeControlRegisterUnbanked
    _ENC424J600_enableReception->_ENC424J600_writeSingleByte
    _ENC424J600_writeSingleByte->_ENC424J600_writeSPI
    _ENC424J600_enableAutoMACInsertion->_ENC424J600_readControlRegisterUnbanked
    _ENC424J600_enableAutoMACInsertion->_ENC424J600_writeControlRegisterUnbanked
    _ENC424J600_writeControlRegisterUnbanked->_ENC424J600_writeSPI
    _ethernetController_getSiliconRevision->_ENC424J600_readControlRegisterUnbanked
    _ethernetController_getCurrentPacketCount->_ENC424J600_getPacketCount
    _ENC424J600_getPacketCount->_ENC424J600_readControlRegisterUnbanked
    _ENC424J600_readControlRegisterUnbanked->_ENC424J600_readSPI
    _ENC424J600_readControlRegisterUnbanked->_ENC424J600_writeSPI
    _ARP_initTable->_ARP_setNewEntry
    _ARP_setNewEntry->_getSeconds

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_handleStackBackgroundTasks
    _handleStackBackgroundTasks->_ipv4_sendFrame
    _ipv4_sendFrame->_ARP_sendRequest
    _ethernet_rxGetNewFrame->_ARP_handleNewPacket
    _ARP_handleNewPacket->_ARP_replyIfNeeded

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                54    54      0  515464
                                            136 BANK1      3     3      0
                                              0 BANK3     50    50      0
                      _ARP_initTable
                           _UARTInit
                    _UARTTransmitInt
                   _UARTTransmitText
   _ethernetController_checkDeviceId
_ethernetController_getCurrentPacket
   _ethernetController_getDeviceName
   _ethernetController_getMacAddress
_ethernetController_getSiliconRevisi
            _ethernetController_init
    _ethernetController_setLEDStatus
         _handleStackBackgroundTasks
       _ipv4_calculateHeaderChecksum
    _ipv4_streamToTransmissionBuffer
                _ipv4_txFrameRequest
         _ipv4_writeHeaderIntoBuffer
                        _macToString
                  _printErrorMessage
                 _printEthernetState
                   _sevenSegmentInit
 ---------------------------------------------------------------------------------
 (1) _sevenSegmentInit                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _printEthernetState                                  15     0     15    8276
                                             58 BANK0     15     0     15
                   _UARTTransmitText
 ---------------------------------------------------------------------------------
 (1) _printErrorMessage                                    5     2      3   12424
                                             58 BANK0      5     2      3
                   _UARTTransmitText
                        _intToString
 ---------------------------------------------------------------------------------
 (1) _ipv4_writeHeaderIntoBuffer                          27     2     25    1579
                                              0 BANK0     27     2     25
 ---------------------------------------------------------------------------------
 (1) _ipv4_txFrameRequest                                  6     4      2   19290
                                             71 BANK0      6     4      2
            _ethernet_txFrameRequest
 ---------------------------------------------------------------------------------
 (1) _ipv4_streamToTransmissionBuffer                     71     9     62    4198
                                             18 BANK0     69     7     62
_ethernetController_streamToTransmit
 ---------------------------------------------------------------------------------
 (1) _ipv4_calculateHeaderChecksum                        18    16      2    1025
                                              0 BANK0     18    16      2
 ---------------------------------------------------------------------------------
 (1) _handleStackBackgroundTasks                           4     2      2  353934
                                            132 BANK1      4     2      2
                   _UARTTransmitText
_ethernetController_clearInterruptFl
_ethernetController_newPacketAvailab
_ethernetController_pollInterruptFla
_ethernetController_setLEDConfigurat
    _ethernetController_setLEDStatus
_ethernetController_updateLinkStatus
             _ethernet_rxGetNewFrame
                   _ipAdressToString
                     _ipv4_sendFrame
 ---------------------------------------------------------------------------------
 (2) _ipv4_sendFrame                                      80    18     62   93178
                                             52 BANK1     80    18     62
                  _ARP_checkForEntry
              _ARP_getEntryFromTable
                    _ARP_sendRequest
                   _UARTTransmitText
   _ethernetController_getMacAddress
      _ethernetController_sendPacket
_ethernetController_writeDestination
                         _getSeconds
                   _ipAdressToString
                        _macToString
 ---------------------------------------------------------------------------------
 (3) _ARP_sendRequest                                     56    52      4   52758
                                            152 BANK0      4     0      4
                                              0 BANK1     52    52      0
                           _ARP_send
   _ethernetController_getMacAddress
                 _mac_setToBroadcast
 ---------------------------------------------------------------------------------
 (3) _ARP_getEntryFromTable                                8     1      7      31
                                              0 BANK0      8     1      7
 ---------------------------------------------------------------------------------
 (3) _ARP_checkForEntry                                   15     9      6    1138
                                              7 BANK0     15     9      6
                         _getSeconds
                           _ipv4_cmp
 ---------------------------------------------------------------------------------
 (2) _ethernet_rxGetNewFrame                              14    11      3  183535
                                            156 BANK0      3     3      0
                                            116 BANK1     11     8      3
                _ARP_handleNewPacket
                    _UARTTransmitInt
                   _UARTTransmitText
                  _etherTypeToString
      _ethernetController_dropPacket
_ethernetController_getEtherTypeFiel
_ethernetController_getNextPacketPoi
          _ethernetController_getRSV
_ethernetController_updateNextPacket
                        _intToString
               _ipv4_handleNewPacket
                        _macToString
 ---------------------------------------------------------------------------------
 (3) _ipv4_handleNewPacket                                 2     0      2   16580
                                             58 BANK0      2     0      2
                   _UARTTransmitText
      _ethernetController_dropPacket
 ---------------------------------------------------------------------------------
 (3) _ethernetController_updateNextPacketPointer          11    11      0    7269
                                             15 BANK0     11    11      0
    _ENC424J600_getNextPacketPointer
                 _ENC424J600_readSPI
   _ENC424J600_setERXDATAReadPointer
    _ENC424J600_setNextPacketPointer
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (3) _ethernetController_getRSV                            7     2      5    8464
                                             17 BANK0      7     2      5
                 _ENC424J600_readSPI
   _ENC424J600_setERXDATAReadPointer
_ENC424J600_updateReceiveStatusVecto
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (4) _ENC424J600_updateReceiveStatusVector                17    12      5    1356
                                              0 BANK0     17    12      5
 ---------------------------------------------------------------------------------
 (3) _ethernetController_getEtherTypeField                18     9      9    7182
                                             15 BANK0     18     9      9
                 _ENC424J600_readSPI
   _ENC424J600_setERXDATAReadPointer
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (3) _etherTypeToString                                    4     2      2     121
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _UARTTransmitInt                                      4     0      4   12443
                                             58 BANK0      4     0      4
                   _UARTTransmitText
_ethernetController_getSiliconRevisi (ARG)
                        _intToString
 ---------------------------------------------------------------------------------
 (2) _intToString                                         20    16      4    4337
                                             19 BANK0     20    16      4
                            ___lldiv
                            ___llmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     592
                                              0 BANK0      9     1      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     961
                                              6 BANK0     13     5      8
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _ARP_handleNewPacket                                 36    34      2  108026
                                            152 BANK0      4     2      2
                                             84 BANK1     32    32      0
              _ARP_parseFromRXBuffer
                  _ARP_replyIfNeeded
                    _ARP_setNewEntry
                   _UARTTransmitText
      _ethernetController_dropPacket
                         _getSeconds
                   _ipAdressToString
                        _macToString
 ---------------------------------------------------------------------------------
 (3) _getSeconds                                           4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (4) _ethernetController_dropPacket                        2     0      2    8564
                                             18 BANK0      2     0      2
        _ENC424J600_setRXTailPointer
         _ENC424J600_writeSingleByte
_ethernetController_getNextPacketPoi
 ---------------------------------------------------------------------------------
 (4) _ARP_replyIfNeeded                                   84    52     32   64910
                                              0 BANK1     84    52     32
                           _ARP_send
                   _UARTTransmitText
   _ethernetController_getMacAddress
                   _ipAdressToString
                        _macToString
 ---------------------------------------------------------------------------------
 (1) _macToString                                         30    24      6    1563
                                             26 BANK0     30    24      6
   _ethernetController_getMacAddress (ARG)
 ---------------------------------------------------------------------------------
 (3) _ipAdressToString                                    22    18      4    2896
                                              7 BANK0     22    18      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     412
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     821
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _ethernetController_getMacAddress                    12     6      6    6277
                                             14 BANK0     12     6      6
_ENC424J600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (4) _ARP_send                                            81    49     32   45556
                                             71 BANK0     81    49     32
_ethernetController_getSourceMACAddr
      _ethernetController_sendPacket
_ethernetController_streamToTransmit
            _ethernet_txFrameRequest
                 _mac_setToBroadcast
 ---------------------------------------------------------------------------------
 (4) _mac_setToBroadcast                                   3     1      2     310
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _ethernet_txFrameRequest                              5     3      2   18704
                                             66 BANK0      5     3      2
_ethernetController_writeDestination
_ethernetController_writeEtherTypeFi
              _memory_txFrameRequest
 ---------------------------------------------------------------------------------
 (3) _memory_txFrameRequest                               30    21      9    5819
                                             36 BANK0     30    21      9
                             ___wmul
                    _checkForOverlap
                  _entireMemoryEmpty
                   _entireMemoryFull
 ---------------------------------------------------------------------------------
 (4) _entireMemoryFull                                     1     1      0      99
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _entireMemoryEmpty                                    1     1      0      99
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _checkForOverlap                                     18     0     18    2268
                                             18 BANK0     18     0     18
            _checkForOverlapSwitched
 ---------------------------------------------------------------------------------
 (5) _checkForOverlapSwitched                             18     0     18    1072
                                              0 BANK0     18     0     18
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1312
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _ethernetController_writeEtherTypeFieldToBuffer      14     3     11    5969
                                             15 BANK0     14     3     11
   _ENC424J600_setGPDATAWritePointer
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (3) _ethernetController_writeDestinationMACAddress       24     9     15    6347
                                             15 BANK0     24     9     15
   _ENC424J600_setGPDATAWritePointer
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (4) _ENC424J600_setGPDATAWritePointer                     5     3      2    2969
                                             10 BANK0      5     3      2
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (2) _ethernetController_streamToTransmitBuffer            8     6      2    3888
                                             10 BANK0      8     6      2
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (3) _ethernetController_sendPacket                        9     0      9   13528
                                             18 BANK0      9     0      9
             _ENC424J600_setTXLength
       _ENC424J600_setTXStartAddress
         _ENC424J600_writeSingleByte
                _memory_txFrameClear
 ---------------------------------------------------------------------------------
 (4) _memory_txFrameClear                                  1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _ENC424J600_setTXStartAddress                         4     2      2    5284
                                             14 BANK0      4     2      2
_ENC424J600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (4) _ENC424J600_setTXLength                               4     2      2    5284
                                             14 BANK0      4     2      2
_ENC424J600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (5) _ethernetController_getSourceMACAddress              18     9      9    7244
                                             15 BANK0     18     9      9
                 _ENC424J600_readSPI
   _ENC424J600_setERXDATAReadPointer
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (4) _ARP_parseFromRXBuffer                               73    41     32   20745
                                             23 BANK0     73    41     32
_ethernetController_streamFromRXBuff
                           _ipv4_cmp
                     _ipv4_isAllZero
                            _mac_cmp
                      _mac_isAllZero
 ---------------------------------------------------------------------------------
 (5) _mac_isAllZero                                        3     1      2     220
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (5) _mac_cmp                                              7     3      4     372
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (5) _ipv4_isAllZero                                       3     1      2     220
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _ipv4_cmp                                             7     3      4     732
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (5) _ethernetController_streamFromRXBuffer                5     3      2   16572
                                             18 BANK0      5     3      2
                 _ENC424J600_readSPI
   _ENC424J600_setERXDATAReadPointer
        _ENC424J600_setRXTailPointer
                _ENC424J600_writeSPI
         _ENC424J600_writeSingleByte
_ethernetController_getNextPacketPoi
 ---------------------------------------------------------------------------------
 (5) _ethernetController_getNextPacketPointer              2     0      2       0
                                              2 BANK0      2     0      2
    _ENC424J600_getNextPacketPointer
 ---------------------------------------------------------------------------------
 (6) _ENC424J600_getNextPacketPointer                      2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (6) _ENC424J600_setERXDATAReadPointer                     5     3      2    3329
                                             10 BANK0      5     3      2
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (2) _ethernetController_updateLinkStatus                  4     2      2   18240
                                             32 BANK0      4     2      2
_ENC424J600_readControlRegisterUnban
         _ENC424J600_readPHYRegister
 ---------------------------------------------------------------------------------
 (3) _ENC424J600_readPHYRegister                          18    16      2   11743
                                             14 BANK0     18    16      2
_ENC424J600_readControlRegisterUnban
_ENC424J600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (2) _ethernetController_setLEDStatus                      3     2      1   12017
                                             14 BANK0      3     2      1
_ENC424J600_readControlRegisterUnban
_ENC424J600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (2) _ethernetController_setLEDConfiguration               3     2      1   11427
                                             14 BANK0      3     2      1
_ENC424J600_readControlRegisterUnban
_ENC424J600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (2) _ethernetController_pollInterruptFlags                7     5      2    6626
                                             24 BANK0      7     5      2
       _ENC424J600_getInterruptFlags
 ---------------------------------------------------------------------------------
 (3) _ENC424J600_getInterruptFlags                        10     8      2    6190
                                             14 BANK0     10     8      2
_ENC424J600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (2) _ethernetController_newPacketAvailable                0     0      0    6125
          _ENC424J600_getPacketCount
 ---------------------------------------------------------------------------------
 (2) _ethernetController_clearInterruptFlag                1     1      0   11378
                                             18 BANK0      1     1      0
      _ENC424J600_clearInterruptFlag
 ---------------------------------------------------------------------------------
 (3) _ENC424J600_clearInterruptFlag                        4     4      0   11347
                                             14 BANK0      4     4      0
_ENC424J600_readControlRegisterUnban
_ENC424J600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (1) _ethernetController_init                              6     3      3   53721
                                             70 BANK0      6     3      3
  _ENC424J600_enableAutoMACInsertion
         _ENC424J600_enableReception
                 _ENC424J600_initSPI
    _ENC424J600_setNextPacketPointer
 _ENC424J600_setRXBufferStartAddress
        _ENC424J600_setRXTailPointer
   _ethernetController_checkDeviceId
       _ethernetController_softReset
 ---------------------------------------------------------------------------------
 (2) _ethernetController_softReset                        12     9      3   22328
                                             58 BANK0     12     9      3
_ENC424J600_readControlRegisterUnban
_ENC424J600_writeControlRegisterUnba
         _ENC424J600_writeSingleByte
                   _UARTTransmitText
 ---------------------------------------------------------------------------------
 (2) _UARTTransmitText                                     2     0      2    7895
                                             56 BANK0      2     0      2
                  _etherTypeToString (ARG)
   _ethernetController_getDeviceName (ARG)
   _ethernetController_getMacAddress (ARG)
                        _intToString (ARG)
                   _ipAdressToString (ARG)
                        _macToString (ARG)
 ---------------------------------------------------------------------------------
 (2) _ethernetController_checkDeviceId                     7     4      3    6270
                                             14 BANK0      7     4      3
_ENC424J600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (5) _ENC424J600_setRXTailPointer                          4     2      2    5644
                                             14 BANK0      4     2      2
_ENC424J600_writeControlRegisterUnba
_ethernetController_getNextPacketPoi (ARG)
 ---------------------------------------------------------------------------------
 (2) _ENC424J600_setRXBufferStartAddress                   4     2      2    5284
                                             14 BANK0      4     2      2
_ENC424J600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (4) _ENC424J600_setNextPacketPointer                      2     0      2     211
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ENC424J600_enableReception                           0     0      0    2650
         _ENC424J600_writeSingleByte
 ---------------------------------------------------------------------------------
 (4) _ENC424J600_writeSingleByte                           1     1      0    2650
                                             10 BANK0      1     1      0
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (2) _ENC424J600_enableAutoMACInsertion                    1     1      0   11189
                                             14 BANK0      1     1      0
_ENC424J600_readControlRegisterUnban
_ENC424J600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (5) _ENC424J600_writeControlRegisterUnbanked              4     2      2    5058
                                             10 BANK0      4     2      2
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (1) _ethernetController_getSiliconRevision                1     1      0    6128
                                             14 BANK0      1     1      0
_ENC424J600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (1) _ethernetController_getDeviceName                    13    11      2      40
                                              0 BANK0     13    11      2
 ---------------------------------------------------------------------------------
 (1) _ethernetController_getCurrentPacketCount             0     0      0    6125
          _ENC424J600_getPacketCount
 ---------------------------------------------------------------------------------
 (3) _ENC424J600_getPacketCount                            1     1      0    6125
                                             14 BANK0      1     1      0
_ENC424J600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (4) _ENC424J600_readControlRegisterUnbanked               4     2      2    6054
                                             10 BANK0      4     2      2
                 _ENC424J600_readSPI
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (4) _ENC424J600_writeSPI                                 10     8      2    2616
                                              0 BANK0     10     8      2
                 _ENC424J600_initSPI
 ---------------------------------------------------------------------------------
 (5) _ENC424J600_readSPI                                  10     8      2     906
                                              0 BANK0     10     8      2
                 _ENC424J600_initSPI
 ---------------------------------------------------------------------------------
 (5) _ENC424J600_initSPI                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UARTInit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ARP_initTable                                       11    11      0    1540
                                             28 BANK0     11    11      0
                    _ARP_setNewEntry
                  _ipv4_setToAllZero
                     _mac_setAllZero
 ---------------------------------------------------------------------------------
 (2) _mac_setAllZero                                       3     1      2     220
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _ipv4_setToAllZero                                    3     1      2     189
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _ARP_setNewEntry                                     24    10     14     930
                                              4 BANK0     24    10     14
                         _getSeconds (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                18    18      0    1040
                                             21 COMRAM    18    18      0
                      _buttonHandler
                 _sevenSegmentUpdate
                      _updateSeconds
 ---------------------------------------------------------------------------------
 (12) _updateSeconds                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _sevenSegmentUpdate                                  7     5      2     875
                                             14 COMRAM     7     5      2
                        _parseNumber
 ---------------------------------------------------------------------------------
 (13) _parseNumber                                         7     4      3     641
                                              7 COMRAM     7     4      3
                          i2___lwdiv
 ---------------------------------------------------------------------------------
 (14) i2___lwdiv                                           7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (12) _buttonHandler                                       6     4      2     165
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ARP_initTable
     _ARP_setNewEntry
       _getSeconds (ARG)
     _ipv4_setToAllZero
     _mac_setAllZero
   _UARTInit
   _UARTTransmitInt
     _UARTTransmitText
       _etherTypeToString (ARG)
       _ethernetController_getDeviceName (ARG)
       _ethernetController_getMacAddress (ARG)
         _ENC424J600_readControlRegisterUnbanked
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
       _intToString (ARG)
         ___lldiv
           ___wmul (ARG)
         ___llmod
         ___wmul
       _ipAdressToString (ARG)
         ___lwdiv
         ___lwmod
       _macToString (ARG)
         _ethernetController_getMacAddress (ARG)
           _ENC424J600_readControlRegisterUnbanked
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
     _ethernetController_getSiliconRevision (ARG)
       _ENC424J600_readControlRegisterUnbanked
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
     _intToString (ARG)
       ___lldiv
         ___wmul (ARG)
       ___llmod
       ___wmul
   _UARTTransmitText
     _etherTypeToString (ARG)
     _ethernetController_getDeviceName (ARG)
     _ethernetController_getMacAddress (ARG)
       _ENC424J600_readControlRegisterUnbanked
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
     _intToString (ARG)
       ___lldiv
         ___wmul (ARG)
       ___llmod
       ___wmul
     _ipAdressToString (ARG)
       ___lwdiv
       ___lwmod
     _macToString (ARG)
       _ethernetController_getMacAddress (ARG)
         _ENC424J600_readControlRegisterUnbanked
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
   _ethernetController_checkDeviceId
     _ENC424J600_readControlRegisterUnbanked
       _ENC424J600_readSPI
         _ENC424J600_initSPI
       _ENC424J600_writeSPI
         _ENC424J600_initSPI
   _ethernetController_getCurrentPacketCount
     _ENC424J600_getPacketCount
       _ENC424J600_readControlRegisterUnbanked
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
   _ethernetController_getDeviceName
   _ethernetController_getMacAddress
     _ENC424J600_readControlRegisterUnbanked
       _ENC424J600_readSPI
         _ENC424J600_initSPI
       _ENC424J600_writeSPI
         _ENC424J600_initSPI
   _ethernetController_getSiliconRevision
     _ENC424J600_readControlRegisterUnbanked
       _ENC424J600_readSPI
         _ENC424J600_initSPI
       _ENC424J600_writeSPI
         _ENC424J600_initSPI
   _ethernetController_init
     _ENC424J600_enableAutoMACInsertion
       _ENC424J600_readControlRegisterUnbanked
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _ENC424J600_writeControlRegisterUnbanked
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
     _ENC424J600_enableReception
       _ENC424J600_writeSingleByte
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
     _ENC424J600_initSPI
     _ENC424J600_setNextPacketPointer
     _ENC424J600_setRXBufferStartAddress
       _ENC424J600_writeControlRegisterUnbanked
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
     _ENC424J600_setRXTailPointer
       _ENC424J600_writeControlRegisterUnbanked
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _ethernetController_getNextPacketPointer (ARG)
         _ENC424J600_getNextPacketPointer
     _ethernetController_checkDeviceId
       _ENC424J600_readControlRegisterUnbanked
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
     _ethernetController_softReset
       _ENC424J600_readControlRegisterUnbanked
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _ENC424J600_writeControlRegisterUnbanked
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _ENC424J600_writeSingleByte
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _UARTTransmitText
         _etherTypeToString (ARG)
         _ethernetController_getDeviceName (ARG)
         _ethernetController_getMacAddress (ARG)
           _ENC424J600_readControlRegisterUnbanked
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
         _intToString (ARG)
           ___lldiv
             ___wmul (ARG)
           ___llmod
           ___wmul
         _ipAdressToString (ARG)
           ___lwdiv
           ___lwmod
         _macToString (ARG)
           _ethernetController_getMacAddress (ARG)
             _ENC424J600_readControlRegisterUnbanked
               _ENC424J600_readSPI
                 _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
   _ethernetController_setLEDStatus
     _ENC424J600_readControlRegisterUnbanked
       _ENC424J600_readSPI
         _ENC424J600_initSPI
       _ENC424J600_writeSPI
         _ENC424J600_initSPI
     _ENC424J600_writeControlRegisterUnbanked
       _ENC424J600_writeSPI
         _ENC424J600_initSPI
   _handleStackBackgroundTasks
     _UARTTransmitText
       _etherTypeToString (ARG)
       _ethernetController_getDeviceName (ARG)
       _ethernetController_getMacAddress (ARG)
         _ENC424J600_readControlRegisterUnbanked
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
       _intToString (ARG)
         ___lldiv
           ___wmul (ARG)
         ___llmod
         ___wmul
       _ipAdressToString (ARG)
         ___lwdiv
         ___lwmod
       _macToString (ARG)
         _ethernetController_getMacAddress (ARG)
           _ENC424J600_readControlRegisterUnbanked
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
     _ethernetController_clearInterruptFlag
       _ENC424J600_clearInterruptFlag
         _ENC424J600_readControlRegisterUnbanked
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
         _ENC424J600_writeControlRegisterUnbanked
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
     _ethernetController_newPacketAvailable
       _ENC424J600_getPacketCount
         _ENC424J600_readControlRegisterUnbanked
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
     _ethernetController_pollInterruptFlags
       _ENC424J600_getInterruptFlags
         _ENC424J600_readControlRegisterUnbanked
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
     _ethernetController_setLEDConfiguration
       _ENC424J600_readControlRegisterUnbanked
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _ENC424J600_writeControlRegisterUnbanked
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
     _ethernetController_setLEDStatus
       _ENC424J600_readControlRegisterUnbanked
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _ENC424J600_writeControlRegisterUnbanked
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
     _ethernetController_updateLinkStatus
       _ENC424J600_readControlRegisterUnbanked
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _ENC424J600_readPHYRegister
         _ENC424J600_readControlRegisterUnbanked
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
         _ENC424J600_writeControlRegisterUnbanked
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
     _ethernet_rxGetNewFrame
       _ARP_handleNewPacket
         _ARP_parseFromRXBuffer
           _ethernetController_streamFromRXBuffer
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_setERXDATAReadPointer
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _ENC424J600_setRXTailPointer
               _ENC424J600_writeControlRegisterUnbanked
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
               _ethernetController_getNextPacketPointer (ARG)
                 _ENC424J600_getNextPacketPointer
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSingleByte
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _ethernetController_getNextPacketPointer
               _ENC424J600_getNextPacketPointer
           _ipv4_cmp
           _ipv4_isAllZero
           _mac_cmp
           _mac_isAllZero
         _ARP_replyIfNeeded
           _ARP_send
             _ethernetController_getSourceMACAddress
               _ENC424J600_readSPI
                 _ENC424J600_initSPI
               _ENC424J600_setERXDATAReadPointer
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _ethernetController_sendPacket
               _ENC424J600_setTXLength
                 _ENC424J600_writeControlRegisterUnbanked
                   _ENC424J600_writeSPI
                     _ENC424J600_initSPI
               _ENC424J600_setTXStartAddress
                 _ENC424J600_writeControlRegisterUnbanked
                   _ENC424J600_writeSPI
                     _ENC424J600_initSPI
               _ENC424J600_writeSingleByte
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
               _memory_txFrameClear
             _ethernetController_streamToTransmitBuffer
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _ethernet_txFrameRequest
               _ethernetController_writeDestinationMACAddress
                 _ENC424J600_setGPDATAWritePointer
                   _ENC424J600_writeSPI
                     _ENC424J600_initSPI
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
               _ethernetController_writeEtherTypeFieldToBuffer
                 _ENC424J600_setGPDATAWritePointer
                   _ENC424J600_writeSPI
                     _ENC424J600_initSPI
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
               _memory_txFrameRequest
                 ___wmul
                 _checkForOverlap
                   _checkForOverlapSwitched
                 _entireMemoryEmpty
                 _entireMemoryFull
             _mac_setToBroadcast
           _UARTTransmitText
             _etherTypeToString (ARG)
             _ethernetController_getDeviceName (ARG)
             _ethernetController_getMacAddress (ARG)
               _ENC424J600_readControlRegisterUnbanked
                 _ENC424J600_readSPI
                   _ENC424J600_initSPI
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
             _intToString (ARG)
               ___lldiv
                 ___wmul (ARG)
               ___llmod
               ___wmul
             _ipAdressToString (ARG)
               ___lwdiv
               ___lwmod
             _macToString (ARG)
               _ethernetController_getMacAddress (ARG)
                 _ENC424J600_readControlRegisterUnbanked
                   _ENC424J600_readSPI
                     _ENC424J600_initSPI
                   _ENC424J600_writeSPI
                     _ENC424J600_initSPI
           _ethernetController_getMacAddress
             _ENC424J600_readControlRegisterUnbanked
               _ENC424J600_readSPI
                 _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
           _ipAdressToString
             ___lwdiv
             ___lwmod
           _macToString
             _ethernetController_getMacAddress (ARG)
               _ENC424J600_readControlRegisterUnbanked
                 _ENC424J600_readSPI
                   _ENC424J600_initSPI
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
         _ARP_setNewEntry
           _getSeconds (ARG)
         _UARTTransmitText
           _etherTypeToString (ARG)
           _ethernetController_getDeviceName (ARG)
           _ethernetController_getMacAddress (ARG)
             _ENC424J600_readControlRegisterUnbanked
               _ENC424J600_readSPI
                 _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
           _intToString (ARG)
             ___lldiv
               ___wmul (ARG)
             ___llmod
             ___wmul
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _ENC424J600_readControlRegisterUnbanked
                 _ENC424J600_readSPI
                   _ENC424J600_initSPI
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
         _ethernetController_dropPacket
           _ENC424J600_setRXTailPointer
             _ENC424J600_writeControlRegisterUnbanked
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _ethernetController_getNextPacketPointer (ARG)
               _ENC424J600_getNextPacketPointer
           _ENC424J600_writeSingleByte
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
           _ethernetController_getNextPacketPointer
             _ENC424J600_getNextPacketPointer
         _getSeconds
         _ipAdressToString
           ___lwdiv
           ___lwmod
         _macToString
           _ethernetController_getMacAddress (ARG)
             _ENC424J600_readControlRegisterUnbanked
               _ENC424J600_readSPI
                 _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
       _UARTTransmitInt
         _UARTTransmitText
           _etherTypeToString (ARG)
           _ethernetController_getDeviceName (ARG)
           _ethernetController_getMacAddress (ARG)
             _ENC424J600_readControlRegisterUnbanked
               _ENC424J600_readSPI
                 _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
           _intToString (ARG)
             ___lldiv
               ___wmul (ARG)
             ___llmod
             ___wmul
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _ENC424J600_readControlRegisterUnbanked
                 _ENC424J600_readSPI
                   _ENC424J600_initSPI
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
         _ethernetController_getSiliconRevision (ARG)
           _ENC424J600_readControlRegisterUnbanked
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
         _intToString (ARG)
           ___lldiv
             ___wmul (ARG)
           ___llmod
           ___wmul
       _UARTTransmitText
         _etherTypeToString (ARG)
         _ethernetController_getDeviceName (ARG)
         _ethernetController_getMacAddress (ARG)
           _ENC424J600_readControlRegisterUnbanked
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
         _intToString (ARG)
           ___lldiv
             ___wmul (ARG)
           ___llmod
           ___wmul
         _ipAdressToString (ARG)
           ___lwdiv
           ___lwmod
         _macToString (ARG)
           _ethernetController_getMacAddress (ARG)
             _ENC424J600_readControlRegisterUnbanked
               _ENC424J600_readSPI
                 _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
       _etherTypeToString
       _ethernetController_dropPacket
         _ENC424J600_setRXTailPointer
           _ENC424J600_writeControlRegisterUnbanked
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
           _ethernetController_getNextPacketPointer (ARG)
             _ENC424J600_getNextPacketPointer
         _ENC424J600_writeSingleByte
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
         _ethernetController_getNextPacketPointer
           _ENC424J600_getNextPacketPointer
       _ethernetController_getEtherTypeField
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_setERXDATAReadPointer
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _ethernetController_getNextPacketPointer
         _ENC424J600_getNextPacketPointer
       _ethernetController_getRSV
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_setERXDATAReadPointer
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
         _ENC424J600_updateReceiveStatusVector
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _ethernetController_updateNextPacketPointer
         _ENC424J600_getNextPacketPointer
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_setERXDATAReadPointer
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
         _ENC424J600_setNextPacketPointer
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _intToString
         ___lldiv
           ___wmul (ARG)
         ___llmod
         ___wmul
       _ipv4_handleNewPacket
         _UARTTransmitText
           _etherTypeToString (ARG)
           _ethernetController_getDeviceName (ARG)
           _ethernetController_getMacAddress (ARG)
             _ENC424J600_readControlRegisterUnbanked
               _ENC424J600_readSPI
                 _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
           _intToString (ARG)
             ___lldiv
               ___wmul (ARG)
             ___llmod
             ___wmul
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _ENC424J600_readControlRegisterUnbanked
                 _ENC424J600_readSPI
                   _ENC424J600_initSPI
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
         _ethernetController_dropPacket
           _ENC424J600_setRXTailPointer
             _ENC424J600_writeControlRegisterUnbanked
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _ethernetController_getNextPacketPointer (ARG)
               _ENC424J600_getNextPacketPointer
           _ENC424J600_writeSingleByte
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
           _ethernetController_getNextPacketPointer
             _ENC424J600_getNextPacketPointer
       _macToString
         _ethernetController_getMacAddress (ARG)
           _ENC424J600_readControlRegisterUnbanked
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
     _ipAdressToString
       ___lwdiv
       ___lwmod
     _ipv4_sendFrame
       _ARP_checkForEntry
         _getSeconds
         _ipv4_cmp
       _ARP_getEntryFromTable
       _ARP_sendRequest
         _ARP_send
           _ethernetController_getSourceMACAddress
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_setERXDATAReadPointer
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
           _ethernetController_sendPacket
             _ENC424J600_setTXLength
               _ENC424J600_writeControlRegisterUnbanked
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
             _ENC424J600_setTXStartAddress
               _ENC424J600_writeControlRegisterUnbanked
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
             _ENC424J600_writeSingleByte
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _memory_txFrameClear
           _ethernetController_streamToTransmitBuffer
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
           _ethernet_txFrameRequest
             _ethernetController_writeDestinationMACAddress
               _ENC424J600_setGPDATAWritePointer
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _ethernetController_writeEtherTypeFieldToBuffer
               _ENC424J600_setGPDATAWritePointer
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _memory_txFrameRequest
               ___wmul
               _checkForOverlap
                 _checkForOverlapSwitched
               _entireMemoryEmpty
               _entireMemoryFull
           _mac_setToBroadcast
         _ethernetController_getMacAddress
           _ENC424J600_readControlRegisterUnbanked
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
         _mac_setToBroadcast
       _UARTTransmitText
         _etherTypeToString (ARG)
         _ethernetController_getDeviceName (ARG)
         _ethernetController_getMacAddress (ARG)
           _ENC424J600_readControlRegisterUnbanked
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
         _intToString (ARG)
           ___lldiv
             ___wmul (ARG)
           ___llmod
           ___wmul
         _ipAdressToString (ARG)
           ___lwdiv
           ___lwmod
         _macToString (ARG)
           _ethernetController_getMacAddress (ARG)
             _ENC424J600_readControlRegisterUnbanked
               _ENC424J600_readSPI
                 _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
       _ethernetController_getMacAddress
         _ENC424J600_readControlRegisterUnbanked
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
       _ethernetController_sendPacket
         _ENC424J600_setTXLength
           _ENC424J600_writeControlRegisterUnbanked
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
         _ENC424J600_setTXStartAddress
           _ENC424J600_writeControlRegisterUnbanked
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
         _ENC424J600_writeSingleByte
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
         _memory_txFrameClear
       _ethernetController_writeDestinationMACAddress
         _ENC424J600_setGPDATAWritePointer
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _getSeconds
       _ipAdressToString
         ___lwdiv
         ___lwmod
       _macToString
         _ethernetController_getMacAddress (ARG)
           _ENC424J600_readControlRegisterUnbanked
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
   _ipv4_calculateHeaderChecksum
   _ipv4_streamToTransmissionBuffer
     _ethernetController_streamToTransmitBuffer
       _ENC424J600_writeSPI
         _ENC424J600_initSPI
   _ipv4_txFrameRequest
     _ethernet_txFrameRequest
       _ethernetController_writeDestinationMACAddress
         _ENC424J600_setGPDATAWritePointer
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _ethernetController_writeEtherTypeFieldToBuffer
         _ENC424J600_setGPDATAWritePointer
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _memory_txFrameRequest
         ___wmul
         _checkForOverlap
           _checkForOverlapSwitched
         _entireMemoryEmpty
         _entireMemoryFull
   _ipv4_writeHeaderIntoBuffer
   _macToString
     _ethernetController_getMacAddress (ARG)
       _ENC424J600_readControlRegisterUnbanked
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
   _printErrorMessage
     _UARTTransmitText
       _etherTypeToString (ARG)
       _ethernetController_getDeviceName (ARG)
       _ethernetController_getMacAddress (ARG)
         _ENC424J600_readControlRegisterUnbanked
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
       _intToString (ARG)
         ___lldiv
           ___wmul (ARG)
         ___llmod
         ___wmul
       _ipAdressToString (ARG)
         ___lwdiv
         ___lwmod
       _macToString (ARG)
         _ethernetController_getMacAddress (ARG)
           _ENC424J600_readControlRegisterUnbanked
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
     _intToString
       ___lldiv
         ___wmul (ARG)
       ___llmod
       ___wmul
   _printEthernetState
     _UARTTransmitText
       _etherTypeToString (ARG)
       _ethernetController_getDeviceName (ARG)
       _ethernetController_getMacAddress (ARG)
         _ENC424J600_readControlRegisterUnbanked
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
       _intToString (ARG)
         ___lldiv
           ___wmul (ARG)
         ___llmod
         ___wmul
       _ipAdressToString (ARG)
         ___lwdiv
         ___lwmod
       _macToString (ARG)
         _ethernetController_getMacAddress (ARG)
           _ENC424J600_readControlRegisterUnbanked
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
   _sevenSegmentInit

 _ISR (ROOT)
   _buttonHandler
   _sevenSegmentUpdate
     _parseNumber
       i2___lwdiv
   _updateSeconds

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100     32      A2      12       63.3%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0      FD      10       98.8%
BITBANK1           100      0       0       7        0.0%
BANK1              100     8B      DA       8       85.2%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     9F      9F       5       99.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     27      4E       1       83.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     366       6        0.0%
DATA                 0      0     366       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Feb 28 23:22:06 2019

                                            main@IPsource 039A  
                __end_of_ethernetController_getMacAddress 3A78  
               __size_of_ethernetController_getMacAddress 0074  
                      ??_ethernetController_getMacAddress 0074  
                       ?_ethernetController_getMacAddress 006E  
                        _ethernetController_getMacAddress 3A04  
                                                      l80 26E6  
                                                      l82 26BA  
                                                      l84 26E0  
                                                      l85 270A  
                                                      l88 4006  
                     __size_of_ipv4_writeHeaderIntoBuffer 016E  
                 ethernetController_getSourceMACAddress@i 0080  
                                     ___wmul@multiplicand 0062  
                                      i2___lwdiv@dividend 0001  
                      ipv4_calculateHeaderChecksum@header 0060  
                                            __CFG_CP0$OFF 000000  
                                            __CFG_CP1$OFF 000000  
                                            __CFG_CP2$OFF 000000  
                                            __CFG_CP3$OFF 000000  
                                             __CFG_LVP$ON 000000  
                                 ??_memory_txFrameRequest 008D  
                                                     l202 363A  
                                                     l211 365A  
                                                     l203 3624  
                                                     l212 3642  
                                                     l204 3610  
                                                     l300 2BBC  
                                                     l124 3832  
                                                     l214 3670  
                                                     l118 3CBC  
                                                     l126 387A  
                                                     l215 364A  
                                                     l207 3618  
                                                     l119 3CFE  
                                                     l216 3650  
                                                     l208 361C  
                                                     l401 4290  
                                                     l306 3752  
                                                     l163 34AA  
                                                     l139 3B8E  
                                                     l164 3432  
                                                     l181 36A2  
                                                     l405 4236  
                                                     l173 4192  
                                                     l149 39C4  
                                                     l190 3E02  
                                                     l166 3456  
                                                     l430 2EB6  
                                                     l174 41A8  
                                                     l510 22C2  
                                                     l191 3DF4  
                                                     l183 36D2  
                                                     l167 346A  
                                                     l423 2EBA  
                                                     l407 4258  
                                                     l351 06DC  
                                                     l168 348A  
                                                     l440 32C8  
                                                     l424 2EA4  
                                                     l344 302C  
                                                     l360 081C  
                                                     l352 0720  
                                                     l504 217E  
                                                     l185 36F8  
                                                     l169 34A0  
                                                     l425 2E7A  
                                                     l353 07BE  
                                                     l442 32C4  
                                                     l426 2E76  
                                                     l346 304C  
                                                     l362 0838  
                                                     l354 07DE  
                                                     l506 2230  
                                                     l610 10C4  
                                                     l275 3D88  
                                                     l371 4312  
                                                     l435 3290  
                                                     l419 2E42  
                                                     l451 0112  
                                                     l507 2266  
                                                     l284 3BE0  
                                                     l196 3E14  
                                                     l356 092C  
                                                     l612 10CE  
                                                     l373 432C  
                                                     l445 32D8  
                                                     l461 01B0  
                                                     l453 013E  
                                                     l357 0800  
                                                     l509 22AA  
                                                     l198 3E20  
                                                     l366 44C0  
                                                     l358 0970  
                                                     l630 33BE  
                                                     l606 0F10  
                                                     l383 44E6  
                                                     l295 2B04  
                                                     l463 03CE  
                                                     l615 11D2  
                                                     l607 0F48  
                                                     l288 3C26  
                                                     l464 02EA  
                                                     l456 0174  
                                                     l632 33DA  
                                                     l616 1166  
                                                     l608 1084  
                                                     l377 40FE  
                                                     l449 00EE  
                                                     l641 2C1E  
                                                     l617 11B6  
                                                     l474 0492  
                                                     l650 2C42  
                                                     l642 2BCE  
                                                     l634 33EE  
                                                     l618 11CE  
                                                     l379 412A  
                                                     l475 0572  
                                                     l459 01A8  
                                                     l651 2C98  
                                                     l635 3404  
                                                     l740 3E5A  
                                                     l476 0594  
                                                     l468 0370  
                                                     l652 2C50  
                                                     l644 2BDE  
                                                     l628 33AA  
                                                     l469 0420  
                                                     l653 2C60  
                                                     l645 2BEE  
                                                     l637 3418  
                                                     l902 1C82  
                                                     l646 2BFE  
                                                     l399 426E  
                                                     l911 1D2A  
                                                     l903 1C58  
                                                     l751 1A98  
                                                     l647 2C0E  
                                                     l912 1D00  
                                                     l752 1AC2  
                                                     l905 1CBA  
                                                     l753 1AEA  
                                                     l649 2C70  
                                                     l738 3E32  
                                                     l906 1C90  
                                                     l754 1B12  
                                                     l922 3222  
                                                     l931 2F5E  
                                                     l908 1CF2  
                                                     l772 2D04  
                                                     l909 1CC8  
                                                     l773 2DD2  
                                                     l774 2D54  
                                                     l782 408A  
                                                     l935 3D2E  
                                                     l871 0C36  
                                                     l783 406A  
                                                     l919 3186  
                                                     l880 0D38  
                                                     l872 0BEE  
                                                     l792 1D5C  
                                                     l776 2D88  
                                                     l864 22F4  
                                                     l929 2F06  
                                                     l881 0CF0  
                                                     l785 4076  
                                                     l874 0C8C  
                                                     l794 1E7C  
                                                     l778 2DC4  
                                                     l866 2328  
                                                     l786 4080  
                                                     l883 0D7E  
                                                     l875 0C44  
                                                     l795 1ED0  
                                                     l867 2406  
                                                     l868 241A  
                                                     l885 0DB4  
                                                     l877 0CE2  
                                                     l878 0C9A  
                                                     l798 1F16  
                                                     l982 2046  
                                                     l887 0DF6  
                                                     l888 0DF8  
                                                     l992 3ED4  
                                                     l889 0E2E  
                                                     l986 20EC  
                                                     l987 2108  
                                            __CFG_CPB$OFF 000000  
                             __end_of_ipv4_txFrameRequest 284E  
                                            __CFG_CPD$OFF 000000  
                                                     _ISR 0008  
           ENC424J600_writeControlRegisterUnbanked@opcode 006D  
                __end_of_ethernetController_getDeviceName 456C  
               __size_of_ethernetController_getDeviceName 0024  
                      ??_ethernetController_getDeviceName 0062  
                       ?_ethernetController_getDeviceName 0060  
                                       _ARP_replyIfNeeded 284E  
                        _ethernetController_getDeviceName 4548  
                                memory_txFrameClear@index 0060  
                    ENC424J600_readPHYRegister@unusedBits 0078  
                     ethernetController_getMacAddress@mac 0074  
                          memory_txFrameRequest@freeIndex 00A1  
                            ??_ENC424J600_enableReception 006B  
                                                     prod 000FF3  
           ethernetController_streamFromRXBuffer@startEnd 0074  
                                                     wreg 000FE8  
                                              _TXSTA1bits 000FAC  
                                      _sevenSegmentUpdate 30BA  
                                      ?_ARP_replyIfNeeded 0100  
               ethernetController_getEtherTypeField@field 006F  
                                  _numberOfOccupiedFields 004C  
                      __size_of_ethernetController_getRSV 0074  
                            ipv4_sendFrame@requestCounter 01A2  
                                                    ?_ISR 0001  
                          ?_ethernetController_sendPacket 0072  
                                                    l1012 4342  
                                                    l1006 4140  
                                                    l1014 435C  
                                                    l1008 416C  
                                                    l1018 45BA  
                                                    l1424 3EFA  
                                                    l1425 3EF2  
                                                    l1434 40C4  
                                                    l1435 40BC  
                                                    l1371 37C4  
                                                    l1428 3F1A  
                                                    l1372 37B8  
                                                    l1429 3F24  
                                                    l1381 3C54  
                                                    l1438 40DC  
                                                    l1382 3C48  
                                                    l1439 40E6  
                                                    l1375 37F8  
                                                    l1376 3806  
                                                    l1385 3C7C  
                                                    l1386 3C8A  
                                                    l7010 3C0E  
                                                    l7116 0418  
                                                    l7206 3B86  
                                                    l7402 430A  
                                                    l7082 02E2  
                                                    l7250 44B8  
                                                    l8134 26D2  
                                                    l7502 4138  
                                                    l7422 40F6  
                                                    l8080 3222  
                                                    l7442 1D54  
                                                    l8066 317E  
                                                    l7196 3CFE  
                                                    l6822 4266  
                                                    l7374 2D68  
                                                    l6736 3DB6  
                                                    l7392 2DC4  
                                                    l7384 2D9C  
                                                    l7482 433A  
                                                    l6842 422E  
                                                    l8530 2230  
                                                    l8452 45B2  
                                                    l7396 2DD2  
                                                    l9076 0952  
                                                    l8390 44DE  
                                                    l9078 0968  
                                                    l6952 382A  
                                                    l8720 3ED4  
                                                    l7826 2EFE  
                                                    l6970 3872  
         ethernetController_streamToTransmitBuffer@opcode 0071  
                                                    l7870 39BC  
                                                    l7776 0E26  
                                                    l7954 2B36  
                                                    l8598 3D26  
                                                    STR_1 7DE2  
                                                    STR_2 7EF9  
                                                    STR_3 7F2A  
                                                    STR_4 7E1B  
                                                    STR_5 7FDD  
                           ?_ethernetController_softReset 009A  
                                                    STR_6 7FFC  
                                                    STR_7 7F8B  
                                                    STR_8 7FA1  
                                                    STR_9 7F1A  
               ethernetController_clearInterruptFlag@flag 0072  
               ENC424J600_setRXBufferStartAddress@lowByte 0070  
                                                    u8010 3C0E  
                                                    _RCIE 007CED  
                                                    u8020 3C1E  
                                                    _RCIF 007CF5  
                                                    u8101 016A  
                                                    u8041 00E4  
                                                    u9010 15C0  
                                                    u8221 0366  
                                                    u8061 0108  
                                                    u8310 0498  
                                                    u8230 0376  
                                                    u9110 1682  
                                                    u9030 15E4  
                                                    _RCIP 007CFD  
                                                    u8400 3BB4  
                                                    u7600 323A  
                                                    u8241 03C4  
                                                    u7610 3248  
                                                    u9210 174A  
                                                    u9130 16AA  
                                                    u9050 160A  
                                                    u8411 3BC0  
                                                    u8331 0568  
                                                    u8091 0134  
                                                    u7620 3256  
                                                    u9108 1660  
                                                    u9028 15C4  
                                                    u8181 0308  
                                                    u8421 3004  
                                                    u7630 3264  
                                                    u8510 3EFE  
                                                    u9310 1814  
                                                    u9230 1774  
                                                    u9150 16D4  
                                                    u9070 1632  
                                                    u8351 058A  
                                                    u8191 0326  
                                                    u7800 2DFA  
                                                    u9400 1AAA  
                                                    u9208 1726  
                                                    u9128 1686  
                                                    u9048 15E8  
                                                    u8281 045C  
                                                    u8601 3A6E  
                                                    u7810 2E08  
                                                    u9410 1AD2  
                                                    u9330 1838  
                                                    u9250 179A  
                                                    u9170 16FC  
                                                    u9090 165C  
                                                    u8291 047A  
                                                    u8451 305E  
                                                    u7580 3DB6  
                                                    u8700 4330  
                                                    u7820 2E16  
                                                    u8540 40C8  
                                                    u9420 1AFA  
                                                    u9308 17F0  
                                                    u9228 174E  
                                                    u9148 16AE  
                                                    u9068 160E  
                                                    u8461 3078  
                                                    u8621 2CDE  
                                                    u7590 3DC6  
                                                    u7670 328C  
                                                    u7750 4294  
                                                    u9350 185E  
                                                    u9270 17C2  
                                                    u9190 1722  
                                                    u7911 2E84  
                                                    u8471 30AC  
                                                    u8560 3E52  
                                                    u9328 1818  
                                                    u9248 1778  
                                                    u9168 16D8  
                                                    u9088 1636  
                                                    u7921 2E96  
                                                    u8570 3E5E  
                                                    u8730 412E  
                                                    u9530 0DF2  
                                                    u9290 17EC  
                                                    u9611 2862  
                                                    u9371 187A  
                                                    u8580 3E7E  
                                                    u8820 4360  
                                                    u7860 2E3E  
                                                    u7780 425C  
                                                    u8660 2DAE  
                                                    u9348 183C  
                                                    u9268 179E  
                                                    u9188 1700  
                                                    u9701 2FA0  
                                                    u7941 2EC4  
                                                    u9621 2874  
                                                    u7790 2DEC  
                                                    u8670 2DD2  
                                                    u9390 1A80  
                                                    u8567 3E48  
                                                    u7951 2ED6  
                                                    u9631 28C8  
                                                    u9800 22E6  
                                                    u9368 1862  
                                                    u9288 17C6  
                                                    u9720 39DE  
                                                    u9641 28EA  
                                                    u8850 4170  
                                                    u7970 385A  
                                                    u8770 1EA8  
                                                    u8587 3E74  
                                                    u9651 28FC  
                                                    u9811 2306  
                                                    u9731 39FA  
                                                    u9580 0E26  
                                                    u8941 1D3C  
                                                    u8861 1B6C  
                                                    u9661 2920  
                                                    u9901 3348  
                                                    u7990 3894  
                                                    u8790 1F1A  
                                                    u9591 0E44  
                                                    u8871 1B7E  
                                                    u9831 2340  
                                                    u9911 336A  
                                                    u8960 37C8  
                                                    u8881 1B90  
                                                    u9841 239E  
                                                    u9921 337C  
                                                    u9690 2F62  
                                                    u9754 3736  
                                                    u9755 3732  
                                                    u9764 3778  
                                                    u9780 2B36  
                                                    u9765 3774  
                                                    u8990 3C58  
                                                    u9871 2424  
                                                    u9960 3226  
                                                    u9881 243A  
                                                    u9971 4388  
                                                    u9891 32E6  
                                                    _TRMT 007D61  
                                          mac_isAllZero@i 0062  
                                     ?_sevenSegmentUpdate 000F  
                                     ??_ARP_replyIfNeeded 00F8  
                            ipv4_sendFrame@requestTimeout 017F  
                                       _ipv4_setToAllZero 45AC  
                                                    _main 0E4E  
                                 printEthernetState@state 009A  
                                                    fsr0h 000FEA  
                                                    fsr1h 000FE2  
                                      i2___lwdiv@quotient 0005  
                                                    indf0 000FEF  
                                                    fsr2h 000FDA  
                                                    fsr0l 000FE9  
                                                    indf1 000FE7  
                                                    indf2 000FDF  
                                                    fsr1l 000FE1  
                                                    fsr2l 000FD9  
                                                    btemp 004F  
                                           __CFG_BORV$190 000000  
            ethernetController_streamToTransmitBuffer@len 006A  
                                      intToString@pointer 0086  
                                          ?_updateSeconds 0001  
                               __size_of_sevenSegmentInit 001A  
                                 _ethernetController_init 3A78  
                                      ?_ipv4_setToAllZero 0060  
                                                    prodh 000FF4  
                                                    prodl 000FF3  
                     __size_of_handleStackBackgroundTasks 01AA  
                                                    start 00C4  
          __end_of_ethernetController_getSourceMACAddress 3BCA  
         __size_of_ethernetController_getSourceMACAddress 0070  
                ??_ethernetController_getSourceMACAddress 0078  
                 ?_ethernetController_getSourceMACAddress 006F  
                  _ethernetController_getSourceMACAddress 3B5A  
                                           __CFG_IESO$OFF 000000  
                                 __end_of_UARTTransmitInt 458E  
                               _ENC424J600_getPacketCount 4638  
                             __end_of_ENC424J600_writeSPI 3DCE  
                                         ??_mac_isAllZero 0062  
                                           __CFG_MCLRE$ON 000000  
                              memory_txFrameRequest@field 0098  
                                            ___param_bank 000000  
                           ethernet_rxGetNewFrame@counter 019E  
                                        ARP_setNewEntry@i 007B  
                                 _checkForOverlapSwitched 322A  
              ENC424J600_setRXBufferStartAddress@highByte 0071  
            __end_of_ethernetController_getEtherTypeField 3B5A  
           __size_of_ethernetController_getEtherTypeField 0070  
                  ??_ethernetController_getEtherTypeField 0078  
                   ?_ethernetController_getEtherTypeField 006F  
                    _ethernetController_getEtherTypeField 3AEA  
                                                   ??_ISR 0016  
                                     ??_ipv4_setToAllZero 0062  
                     __size_of_ENC424J600_enableReception 0008  
                                          _ipv4_isAllZero 4334  
                                    ??_sevenSegmentUpdate 0011  
                                            ?_intToString 0073  
        __end_of_ethernetController_getCurrentPacketCount 46EE  
       __size_of_ethernetController_getCurrentPacketCount 0006  
               ?_ethernetController_getCurrentPacketCount 0001  
              ??_ethernetController_getCurrentPacketCount 006F  
                _ethernetController_getCurrentPacketCount 46E8  
                                __size_of_ARP_setNewEntry 00EE  
                                        __end_of_ARP_send 1D4A  
                               __end_of_ARP_replyIfNeeded 2976  
                                       _nextPacketPointer 0047  
                                __size_of_ARP_sendRequest 00AE  
                                                   ?_main 0001  
                                                   STR_10 7FD4  
                                                   STR_11 7FCD  
                                                   STR_12 7FDD  
                                                   STR_20 7FFB  
                                                   STR_21 7CF7  
                                                   STR_13 7FF5  
                                                   STR_30 7FE5  
                                                   STR_14 7FF8  
                                                   STR_22 7E34  
                                                   STR_15 7FE9  
                                                   STR_23 7F7F  
                                                   STR_31 7E4C  
                                                   STR_32 7FE5  
                                                   STR_24 7E8A  
                                                   STR_16 7FFC  
                                                   STR_40 7DC5  
                                                   STR_17 7FDD  
                                                   STR_41 7FC5  
                                                   STR_25 7FB4  
                                                   STR_33 7DFF  
                                                   STR_26 7CF7  
                                                   STR_18 7F15  
                                                   STR_50 7FAB  
                                                   STR_42 7EE8  
                                                   STR_34 7CC7  
                                                   STR_19 7FF2  
                                                   STR_51 7FE4  
                                                   STR_35 7F66  
                                                   STR_43 7D6C  
                                                   STR_27 7D21  
                                                   STR_60 7FFC  
                                                   STR_52 7FDF  
                                                   STR_28 7F73  
                                                   STR_44 7EB2  
                                                   STR_36 7E9F  
                                                   STR_53 7FEE  
                                                   STR_61 7F97  
                                                   STR_45 7F58  
                                                   STR_37 7E8C  
                                                   STR_29 7E63  
                                                   STR_46 7F49  
                                                   STR_62 7F3A  
                                                   STR_54 7EC5  
                                                   STR_38 7E78  
                                                   STR_63 7F0A  
                                                   STR_39 7DA8  
                                                   STR_47 7D47  
                                                   STR_55 7CFA  
                                                   STR_64 7E89  
                                                   STR_56 7FDD  
                                                   STR_48 7C90  
                                                   STR_57 7E89  
                                                   STR_65 7FFC  
                                                   STR_49 7D8A  
                                                   STR_58 7FDA  
                                                   STR_59 7E89  
                                                   STR_67 7FBD  
                                                   STR_68 7FE5  
                                                   STR_69 7ED7  
                                         __end_of___lldiv 3818  
                                                   u10100 29DC  
                                                   u10200 2A6A  
                                                   u10120 29FA  
                                                   u10040 298E  
                                                   u11001 1194  
                                                   u11011 11C0  
                                                   u10220 2A82  
                                                   u10140 2A14  
                                                   u10060 29A6  
                                                   u10118 29E0  
                                                   u10240 469C  
                                                   u10160 2A30  
                                                   u10080 29C0  
                                                   u10218 2A6E  
                                                   u10138 29FE  
                                                   u10058 2992  
                                                   u11107 26AE  
                                                   u10180 2A4E  
                                                   u10501 1FE8  
                                                   u10238 2A86  
                                                   u10158 2A18  
                                                   u10078 29AA  
                                                   u10431 085A  
                                                   u10511 1FFA  
                                                   u10441 0894  
                                                   u10521 200C  
                                                   u10178 2A34  
                                                   u10098 29C4  
                                                   u10371 0606  
                                                   u10531 2022  
                                                   u11067 0E88  
                                                   u10701 3D38  
                                                   u10621 21A2  
                                                   u11077 1006  
                                                   u10198 2A52  
                                                   u11087 2AFE  
                                                   u10391 0732  
                                                   u11097 2666  
                                         __end_of___llmod 3C9C  
                                                   u10481 1F78  
                                                   u10801 3422  
                                                   u10491 1FB8  
                                                   u10580 4556  
                                                   u10830 14DE  
                                                   u10815 12B2  
                                                   u10825 1360  
                                                   u10835 14D4  
                                                   u10931 0F9C  
                                                   u10941 109E  
                                                   u10981 113A  
                                         __end_of___lwdiv 3F2E  
                              __end_of_printEthernetState 342C  
                                         __end_of___lwmod 40F0  
                                           __CFG_WDTEN$ON 000000  
                                                   i2l518 451E  
                                                   i2l704 30EC  
                                                   i2l713 3900  
                                                   i2l714 38F0  
                                                   i2l706 30F4  
        ethernetController_streamToTransmitBuffer@pointer 0043  
                                                   i2l716 38F4  
                                                   i2l717 38F8  
                                                   i2l709 3110  
                                                   i2l718 38FC  
                                                   i2l664 34F6  
                                                   i2l666 3506  
                                                   i2l674 0074  
                                                   i2l667 354A  
                                                   _SPBRG 000FAF  
                                                   _PORTA 000F80  
                                                   _PORTB 000F81  
                                                   _PORTC 000F82  
                        __size_of_ethernet_txFrameRequest 00E8  
                                                   _TRISA 000F92  
                                                   _TRISB 000F93  
                                                   _TRISC 000F94  
                        ENC424J600_setTXStartAddress@addr 006E  
         __end_of_ENC424J600_writeControlRegisterUnbanked 42CE  
        __size_of_ENC424J600_writeControlRegisterUnbanked 0036  
               ??_ENC424J600_writeControlRegisterUnbanked 006C  
                ?_ENC424J600_writeControlRegisterUnbanked 006A  
                 _ENC424J600_writeControlRegisterUnbanked 4298  
                                ARP_parseFromRXBuffer@arp 00A0  
                                           __CFG_WRT0$OFF 000000  
                                           __CFG_WRT1$OFF 000000  
                                           __CFG_WRT2$OFF 000000  
                                           __CFG_WRT3$OFF 000000  
                                           _ARP_initTable 3D04  
                                          __CFG_EBTR0$OFF 000000  
                                          __CFG_FCMEN$OFF 000000  
                                          __CFG_EBTR1$OFF 000000  
                                          __CFG_EBTR2$OFF 000000  
                                          __CFG_EBTR3$OFF 000000  
                                         __end_of_mac_cmp 4132  
                                        __end_of_UARTInit 46B0  
                                     intToString@hundreds 0083  
                                           __CFG_WRTB$OFF 000000  
                                           __CFG_WRTC$OFF 000000  
                                           __CFG_WRTD$OFF 000000  
                                          __CFG_EBTRB$OFF 000000  
                __end_of_ENC424J600_setGPDATAWritePointer 41EC  
               __size_of_ENC424J600_setGPDATAWritePointer 003C  
                      ??_ENC424J600_setGPDATAWritePointer 006C  
                       ?_ENC424J600_setGPDATAWritePointer 006A  
                        _ENC424J600_setGPDATAWritePointer 41B0  
                               __end_of_ipv4_setToAllZero 45CA  
                                                   _stack 0248  
                                                   main@i 0396  
           ethernetController_streamToTransmitBuffer@data 0070  
                       __end_of_ethernetController_getRSV 3A04  
                                                   pclath 000FFA  
                                                   tablat 000FF5  
                            ethernet_txFrameRequest@frame 00A2  
                             ARP_parseFromRXBuffer@i_2556 009B  
                             ARP_parseFromRXBuffer@i_2557 009C  
                             ARP_parseFromRXBuffer@i_2558 009D  
                                        ?_checkForOverlap 0072  
                                                   plusw0 000FEB  
                                                   plusw1 000FE3  
                                                   plusw2 000FDB  
                                  ENC424J600_readSPI@data 0060  
                             memory_txFrameRequest@i_1147 0097  
                                                   status 000FD8  
                                          __CFG_T3CMX$RC0 000000  
                                                   wtemp6 0050  
                       ENC424J600_clearInterruptFlag@flag 0070  
                             __size_of_mac_setToBroadcast 0026  
                                          __CFG_ICPRT$OFF 000000  
                       ENC424J600_clearInterruptFlag@temp 0071  
                                __end_of_UARTTransmitText 3E86  
                                             ARP_send@arp 00A7  
                                          __CFG_PBADEN$ON 000000  
                                          _ipv4_sendFrame 1F38  
                                      __size_ofi2___lwdiv 0052  
                                            ?_parseNumber 0008  
                                         intToString@ones 0082  
                                        _ipAdressToString 1D4A  
                                         intToString@tens 0081  
                             ARP_parseFromRXBuffer@offset 009E  
                             ?_ENC424J600_readPHYRegister 006E  
                                         __initialization 355C  
                       ethernetController_softReset@F5827 004D  
                       ethernetController_softReset@F5829 0045  
                             memory_txFrameRequest@length 0084  
                                       ARP_setNewEntry@ip 006A  
                          __size_of_ARP_getEntryFromTable 002E  
                                            __end_of_main 11F4  
                                  __end_of_ipv4_isAllZero 4364  
                           __end_of_ARP_getEntryFromTable 4392  
                                  arpEntryToString@string 02B9  
                                    _ipv4_handleNewPacket 45E6  
                                          __CFG_PCLKEN$ON 000000  
                              _memory_txFrameRequest$1143 0093  
                                           main@headerBuf 0374  
                                                  ??_main 0188  
                               __size_of_entireMemoryFull 0038  
          __end_of_ethernetController_setLEDConfiguration 3680  
         __size_of_ethernetController_setLEDConfiguration 008E  
                ??_ethernetController_setLEDConfiguration 006F  
                 ?_ethernetController_setLEDConfiguration 006E  
                  _ethernetController_setLEDConfiguration 35F2  
                                           __activetblptr 000002  
                      __end_of_ipv4_writeHeaderIntoBuffer 25DA  
                              _ipv4_writeHeaderIntoBuffer 246C  
                                          ?_ARP_initTable 0001  
                                       ARP_sendRequest@ip 00F8  
                         handleStackBackgroundTasks@stack 0184  
                                          __CFG_SDOMX$RB3 000000  
                                         __CFG_CCP2MX$RC1 000000  
       ethernetController_writeDestinationMACAddress@addr 006F  
       ethernetController_writeDestinationMACAddress@data 007E  
                ethernetController_pollInterruptFlags@reg 007D  
                                        ___llmod@dividend 0060  
                                    __size_of_macToString 0108  
                                                  _ANSELA 000F5B  
                                                  _ANSELB 000F5C  
                                                  _ANSELC 000F5D  
                              ethernetController_getRSV@i 0077  
                              printEthernetState@oldState 018B  
                                                  i2l1424 3F4C  
                                                  i2l1425 3F44  
                                                  i2l1428 3F6C  
                                                  i2l1429 3F76  
                                  ARP_sendRequest@request 0114  
                                                  i2l6246 3506  
                                                  i2l6278 3108  
                               ??_ethernetController_init 00A9  
                                         ??_updateSeconds 0001  
       __end_of_ethernetController_streamToTransmitBuffer 3D04  
      __size_of_ethernetController_streamToTransmitBuffer 0068  
             ??_ethernetController_streamToTransmitBuffer 006C  
              ?_ethernetController_streamToTransmitBuffer 006A  
               _ethernetController_streamToTransmitBuffer 3C9C  
                            __size_of_ARP_handleNewPacket 01A2  
                                  __end_of_ipv4_sendFrame 2120  
                                                  _TXREG1 000FAD  
                      ethernetController_setLEDStatus@LED 006F  
                             __size_of_ENC424J600_initSPI 001C  
                             __size_of_ENC424J600_readSPI 006A  
                                        mac_isAllZero@mac 0060  
                          ??_ethernetController_softReset 009D  
                               ??_checkForOverlapSwitched 0072  
                              ethernetController_init@err 00A9  
                                  __size_of_buttonHandler 0098  
                                 ?_ethernet_rxGetNewFrame 0174  
                                        ?_UARTTransmitInt 009A  
                                          __CFG_XINST$OFF 000000  
                                        __end_of_ipv4_cmp 4174  
                                         ?_ipv4_isAllZero 0060  
                                                  ___wmul 443A  
                                   ?_ipv4_handleNewPacket 009A  
                      __end_of_handleStackBackgroundTasks 22CA  
                              _handleStackBackgroundTasks 2120  
                                          __CFG_STVREN$ON 000000  
                                   buttonHandler@oldState 004B  
                                               ??___lldiv 006E  
             ENC424J600_writeControlRegisterUnbanked@addr 006C  
                                   buttonHandler@newState 004A  
             ENC424J600_writeControlRegisterUnbanked@data 006A  
                                               ??___llmod 0068  
                                               ??___lwdiv 0064  
                                               ??___lwmod 0064  
                            buttonHandler@debounceCounter 0030  
                                                  clear_0 35BA  
                                                  clear_1 35C6  
                                                  clear_2 35D2  
                                                  clear_3 35DE  
                              parseNumber@numberToDisplay 0008  
                          __size_of_ARP_parseFromRXBuffer 03FA  
                              __size_of_ARP_replyIfNeeded 0128  
                           __end_of_ARP_parseFromRXBuffer 0E4E  
  __end_of_ethernetController_writeEtherTypeFieldToBuffer 3FCE  
 __size_of_ethernetController_writeEtherTypeFieldToBuffer 004E  
        ??_ethernetController_writeEtherTypeFieldToBuffer 007A  
         ?_ethernetController_writeEtherTypeFieldToBuffer 006F  
          _ethernetController_writeEtherTypeFieldToBuffer 3F80  
                                               ??_mac_cmp 0064  
                                        ??_mac_setAllZero 0062  
                                           main@prescaler 0370  
                      __end_of_ENC424J600_enableReception 46E8  
                              _ENC424J600_enableReception 46E0  
          __end_of_ENC424J600_readControlRegisterUnbanked 4304  
         __size_of_ENC424J600_readControlRegisterUnbanked 0036  
                ??_ENC424J600_readControlRegisterUnbanked 006C  
                 ?_ENC424J600_readControlRegisterUnbanked 006A  
                  _ENC424J600_readControlRegisterUnbanked 42CE  
                                            __pdataCOMRAM 004D  
                ethernetController_softReset@comFailCount 009E  
                                       __end_ofi2___lwdiv 3F80  
                    __end_of_ENC424J600_setTXStartAddress 43BC  
                   __size_of_ENC424J600_setTXStartAddress 002A  
                            _ENC424J600_setTXStartAddress 4392  
                                            __mediumconst 7C84  
                                                  tblptrh 000FF7  
                                                  tblptrl 000FF6  
                                                  tblptru 000FF8  
                                       ??_ARP_setNewEntry 0072  
                          ipv4_sendFrame@numberOfRequests 017E  
           __end_of_ethernetController_clearInterruptFlag 46CC  
          __size_of_ethernetController_clearInterruptFlag 000E  
                  ?_ethernetController_clearInterruptFlag 0001  
                 ??_ethernetController_clearInterruptFlag 0072  
                   _ethernetController_clearInterruptFlag 46BE  
                                       ??_ARP_sendRequest 00FC  
                                    intToString@thousands 0084  
                                     mac_setToBroadcast@i 0062  
                              __size_of_ipv4_setToAllZero 001E  
                         ethernetController_softReset@err 00A3  
                                         _numberToDisplay 0034  
                                    __CFG_LS48MHZ$SYS24X4 000000  
                                 ipAdressToString@address 01CA  
      __end_of_ethernetController_updateNextPacketPointer 3990  
     __size_of_ethernetController_updateNextPacketPointer 007A  
             ?_ethernetController_updateNextPacketPointer 0001  
            ??_ethernetController_updateNextPacketPointer 006F  
              _ethernetController_updateNextPacketPointer 3916  
                       sevenSegmentUpdate@digitsToDisplay 003C  
                                              __accesstop 0060  
                                 __end_of__initialization 35E4  
                                       _printErrorMessage 2BBE  
           ethernetController_getEtherTypeField@ethertype 007C  
                                         ?_ipv4_sendFrame 0134  
                                 ?_ENC424J600_setTXLength 006E  
                                               ?_ARP_send 00A7  
                          __end_of_ethernet_rxGetNewFrame 0A54  
                                        _sevenSegmentInit 461E  
               ethernetController_updateLinkStatus@temp16 0083  
                                           ___rparam_used 000001  
                                      ?_printErrorMessage 009A  
               ethernetController_getSiliconRevision@data 006E  
              ethernetController_pollInterruptFlags@flags 007B  
                                          __pcstackCOMRAM 0001  
                                        __CFG_nPWRTEN$OFF 000000  
                                 ipAdressToString@pointer 007B  
 ENC424J600_updateReceiveStatusVector@receiveStatusVector 006C  
                                            __pidataBANK1 45CA  
                                            __pidataBANK2 466A  
                                               ?_UARTInit 0001  
                                      ARP_setNewEntry@mac 0064  
                                     ??_printErrorMessage 009D  
                         __end_of_ethernetController_init 3AEA  
                         ??_ethernetController_dropPacket 0074  
                                               ARP_send@i 00CD  
     ethernetController_getSourceMACAddress@sourceAddress 0079  
                                         ??_ARP_initTable 007C  
                                 _ethernet_txFrameRequest 2FD2  
                    __end_of_ENC424J600_getInterruptFlags 4068  
                   __size_of_ENC424J600_getInterruptFlags 004C  
                            _ENC424J600_getInterruptFlags 401C  
                                    __size_of_intToString 02C6  
                         __end_of_checkForOverlapSwitched 32DC  
                                           _buttonHandler 34C4  
                      ethernetController_dropPacket@frame 0072  
                          __size_of_memory_txFrameRequest 04D6  
                           __end_of_memory_txFrameRequest 059E  
                           ?_ENC424J600_setTXStartAddress 006E  
                               __end_of_printErrorMessage 2CD4  
                                              __pbssBANK1 018B  
                                              __pbssBANK2 0200  
                                              __pbssBANK3 0300  
                          __end_of_ENC424J600_setTXLength 43E6  
                             __end_of_memory_txFrameClear 4548  
                                              ??_ARP_send 00C7  
                                       _etherTypeToString 4068  
                   ethernetController_setLEDStatus@status 006E  
                                      ?_etherTypeToString 0060  
                                       __CFG_PLLSEL$PLL4X 000000  
                                  ??_ipv4_handleNewPacket 009C  
           __end_of_ethernetController_getSiliconRevision 45AC  
          __size_of_ethernetController_getSiliconRevision 001E  
                  ?_ethernetController_getSiliconRevision 0001  
                 ??_ethernetController_getSiliconRevision 006E  
                   _ethernetController_getSiliconRevision 458E  
                         ??_ethernetController_sendPacket 007B  
                                                 ?___wmul 0060  
                                              ??_UARTInit 0060  
                                    __size_of_parseNumber 007E  
                                   macToString@firstDigit 0093  
                                     ??_etherTypeToString 0062  
                                              _getSeconds 467C  
          ethernetController_writeDestinationMACAddress@i 0086  
                                        _entireMemoryFull 4228  
                                 ARP_sendRequest@senderIP 0100  
                                 ARP_sendRequest@targetIP 010A  
                                          ?_buttonHandler 0001  
                              etherTypeToString@ethertype 0060  
                               updateSeconds@prescaler_ms 0041  
                 ENC424J600_updateReceiveStatusVector@rsv 0060  
                           ?_ENC424J600_getInterruptFlags 006E  
                       ENC424J600_readPHYRegister@lowByte 007D  
                                __end_of_ipAdressToString 1F38  
                ENC424J600_setERXDATAReadPointer@highByte 006E  
                                 ENC424J600_writeSPI@data 0060  
                                                 _SSP1BUF 000FC9  
                                       ipv4_sendFrame@err 0181  
  ethernetController_writeEtherTypeFieldToBuffer@highByte 007B  
                            __size_of_ipv4_txFrameRequest 0136  
                                               ?_ipv4_cmp 0060  
                                        __CFG_CFGPLLEN$ON 000000  
                                      _printEthernetState 338A  
                            ?_ENC424J600_setRXTailPointer 006E  
                               __end_of_etherTypeToString 40AC  
                  ENC424J600_setRXBufferStartAddress@addr 006E  
                     ethernetController_setLEDStatus@data 0070  
           __end_of_ethernetController_streamFromRXBuffer 34C4  
          __size_of_ethernetController_streamFromRXBuffer 0098  
                 ??_ethernetController_streamFromRXBuffer 0074  
                  ?_ethernetController_streamFromRXBuffer 0072  
                   _ethernetController_streamFromRXBuffer 342C  
                          sevenSegmentUpdate@digitPointer 0049  
                                       ?_UARTTransmitText 0098  
                                                 __Hparam 0000  
ethernetController_updateNextPacketPointer@nextPktPointer 0075  
                                                 __Lparam 0000  
                                         ipv4_isAllZero@i 0062  
                                     ?_printEthernetState 009A  
                                      ??_UARTTransmitText 009A  
                                checkForOverlapSwitched@a 0060  
                                checkForOverlapSwitched@b 0069  
                                      buttonHandler@state 0001  
                                   __end_of_mac_isAllZero 4334  
                                                 ___lldiv 3794  
                                         __size_of___wmul 0028  
                                                 ___llmod 3C34  
                                                 ___lwdiv 3EDA  
                                                 ___lwmod 40AC  
                    ENC424J600_setGPDATAWritePointer@addr 006A  
                               ??_ethernet_txFrameRequest 00A4  
                                     sevenSegmentUpdate@i 0015  
              ipv4_streamToTransmissionBuffer@dataPointer 003F  
                                                 __pcinit 355C  
                             __size_of_sevenSegmentUpdate 00BE  
                                     parseNumber@hundreds 000E  
                                                 __ramtop 0800  
                            __size_of_ENC424J600_writeSPI 0064  
                                     _ARP_handleNewPacket 22CA  
                                                 __ptext0 0E4E  
                                                 __ptext1 461E  
                                                 __ptext2 338A  
                                                 __ptext3 2BBE  
                                                 __ptext4 246C  
                                                 __ptext5 2718  
                                                 __ptext6 3E86  
                                                 __ptext7 11F4  
                                                 __ptext8 2120  
                                                 __ptext9 1F38  
                                                 _mac_cmp 40F0  
                                               _T0CONbits 000FD5  
                            ??_handleStackBackgroundTasks 0186  
                                            __size_of_ISR 00BC  
                  ENC424J600_setGPDATAWritePointer@opcode 006C  
                      ENC424J600_setRXTailPointer@lowByte 0070  
              __end_of_ENC424J600_setRXBufferStartAddress 443A  
             __size_of_ENC424J600_setRXBufferStartAddress 002A  
                    ??_ENC424J600_setRXBufferStartAddress 0070  
                     ?_ENC424J600_setRXBufferStartAddress 006E  
                      _ENC424J600_setRXBufferStartAddress 4410  
                         ENC424J600_setRXTailPointer@addr 006E  
                   __end_of_ethernetController_dropPacket 41B0  
                  __size_of_ethernetController_dropPacket 003C  
                           _ethernetController_dropPacket 4174  
                             ?_ipv4_writeHeaderIntoBuffer 0060  
                                    ??_printEthernetState 00A9  
                                                 _seconds 0038  
           __end_of_ethernetController_pollInterruptFlags 2A9C  
          __size_of_ethernetController_pollInterruptFlags 0126  
                 ??_ethernetController_pollInterruptFlags 007A  
                  ?_ethernetController_pollInterruptFlags 0078  
                   _ethernetController_pollInterruptFlags 2976  
                 ENC424J600_setGPDATAWritePointer@lowByte 006D  
                                                 main@err 0397  
                            ??_ENC424J600_writeSingleByte 006A  
                                    end_of_initialization 35E4  
                              __size_of_printErrorMessage 0116  
                                               _ARP_table 0300  
                                              ??_ipv4_cmp 0064  
                              __end_of_mac_setToBroadcast 44D8  
                                    ?_ARP_handleNewPacket 00F8  
                              ?_ethernetController_getRSV 0071  
                                           __Lmediumconst 7C84  
                                        ??_ipv4_isAllZero 0062  
                         ipv4_calculateHeaderChecksum@sum 006E  
                                         mac_setAllZero@i 0062  
             ethernetController_streamFromRXBuffer@opcode 0075  
                                         ___lldiv@divisor 006A  
                              ARP_getEntryFromTable@index 0067  
                                         ___lldiv@counter 0072  
                                      entireMemoryEmpty@i 0060  
                              ARP_setNewEntry@oldestIndex 007A  
                                __size_of_checkForOverlap 0108  
                                                 postdec1 000FE5  
                                                 postdec2 000FDD  
                                         macToString@addr 007A  
                                                 postinc0 000FEE  
                                                 postinc1 000FE6  
                                                 postinc2 000FDE  
                             ?_handleStackBackgroundTasks 0184  
                                         _ARP_setNewEntry 2EE4  
                   memory_txFrameRequest@fNoOverlapMarker 0095  
                    ENC424J600_readPHYRegister@PHYaddress 0077  
                                         _ARP_sendRequest 32DC  
                                   _ARP_getEntryFromTable 4364  
                          ENC424J600_setTXLength@highByte 0071  
                                             ?_getSeconds 0060  
                                         ??_buttonHandler 0003  
                   __end_of_ethernetController_sendPacket 448A  
                  __size_of_ethernetController_sendPacket 0028  
                           _ethernetController_sendPacket 4462  
                                               _PORTBbits 000F81  
                                     ipv4_sendFrame@index 0180  
                     __size_of_ENC424J600_writeSingleByte 0018  
                       sevenSegmentUpdate@numberToDisplay 000F  
                                __end_of_sevenSegmentInit 4638  
                 __end_of_ipv4_streamToTransmissionBuffer 3EDA  
                __size_of_ipv4_streamToTransmissionBuffer 0054  
                       ??_ipv4_streamToTransmissionBuffer 00B0  
                        ?_ipv4_streamToTransmissionBuffer 0072  
                         _ipv4_streamToTransmissionBuffer 3E86  
                             ?_ENC424J600_enableReception 0001  
                                           ??_macToString 0080  
                  ethernetController_softReset@dataToSend 009F  
                                           ARP_send@field 00EF  
                                               _TRISBbits 000F93  
         __end_of_ethernetController_getNextPacketPointer 46BE  
        __size_of_ethernetController_getNextPacketPointer 000E  
               ??_ethernetController_getNextPacketPointer 0064  
                ?_ethernetController_getNextPacketPointer 0062  
                 _ethernetController_getNextPacketPointer 46B0  
                                        ??_ipv4_sendFrame 0172  
                                       i2___lwdiv@divisor 0003  
                         __end_of_ethernet_txFrameRequest 30BA  
                        ethernetController_getRSV@address 0071  
                                               i2___lwdiv 3F2E  
                                       i2___lwdiv@counter 0007  
                                   ??_ARP_handleNewPacket 00FA  
                              __end_of_ENC424J600_initSPI 461E  
                              __end_of_ENC424J600_readSPI 3C34  
                              __size_of_etherTypeToString 0044  
                                     UARTTransmitText@str 0098  
                    __end_of_ipv4_calculateHeaderChecksum 1568  
                   __size_of_ipv4_calculateHeaderChecksum 0374  
                            _ipv4_calculateHeaderChecksum 11F4  
                    ENC424J600_setTXStartAddress@highByte 0071  
                                   __end_of_updateSeconds 4524  
                                  ARP_parseFromRXBuffer@i 009A  
                                       intToString@number 01AD  
                                ipAdressToString@hundreds 0077  
                                       __size_of_ARP_send 0200  
        ethernetController_updateNextPacketPointer@opcode 0077  
                                          __end_of___wmul 4462  
                                           __pidataCOMRAM 46EE  
                                        parseNumber@digit 000A  
                                __size_of_UARTTransmitInt 0022  
                                       __size_of_UARTInit 0010  
               ethernetController_setLEDConfiguration@LED 006F  
                    __size_of_ENC424J600_setRXTailPointer 002A  
                  ENC424J600_setERXDATAReadPointer@opcode 006C  
                                   _ARP_parseFromRXBuffer 0A54  
             __end_of_ethernetController_updateLinkStatus 370A  
            __size_of_ethernetController_updateLinkStatus 008A  
                   ??_ethernetController_updateLinkStatus 0082  
                    ?_ethernetController_updateLinkStatus 0080  
                     _ethernetController_updateLinkStatus 3680  
                                     start_initialization 355C  
                              ARP_parseFromRXBuffer@frame 0077  
                                             __end_of_ISR 00C4  
                                          intToString@val 0073  
                                ?_ethernetController_init 00A6  
                                              ?i2___lwdiv 0001  
                           ipv4_writeHeaderIntoBuffer@ptr 0077  
                                ?_checkForOverlapSwitched 0060  
                                     __end_of_macToString 2DDC  
                                         __CFG_nLPBOR$OFF 000000  
                                     __size_of_getSeconds 0012  
                                __end_of_entireMemoryFull 4260  
   __end_of_ethernetController_writeDestinationMACAddress 3898  
  __size_of_ethernetController_writeDestinationMACAddress 0080  
         ??_ethernetController_writeDestinationMACAddress 007E  
          ?_ethernetController_writeDestinationMACAddress 006F  
           _ethernetController_writeDestinationMACAddress 3818  
                                         ___llmod@divisor 0064  
                     ethernetController_checkDeviceId@err 0072  
                                         ___llmod@counter 0068  
                         ??_ENC424J600_clearInterruptFlag 006E  
                                 __end_of_ARP_setNewEntry 2FD2  
                           ?_ipv4_calculateHeaderChecksum 0060  
                           ethernetController_getRSV@temp 01B7  
                                 __end_of_ARP_sendRequest 338A  
                                ARP_setNewEntry@timestamp 006E  
                                    printErrorMessage@err 009A  
                                          _occupiedMemory 0200  
                                         _sourceIPAddress 002C  
                                                ??___wmul 0064  
                        ENC424J600_getPacketCount@lowByte 006E  
                                     _ipv4_txFrameRequest 2718  
                                  ?_ARP_getEntryFromTable 0060  
                  ethernetController_getDeviceName@string 0062  
                                    _destinationIPAddress 0028  
                                             __pdataBANK1 01BE  
                                             __pdataBANK2 02EB  
                                           ??_intToString 0077  
                                        checkForOverlap@a 0072  
                                        checkForOverlap@b 007B  
                                       ??_checkForOverlap 0084  
                                   __end_of_ARP_initTable 3D6A  
                                             __pbssCOMRAM 0028  
                ethernetController_updateLinkStatus@state 0080  
                                           __pcstackBANK0 0060  
                                           __pcstackBANK1 0100  
                                           __pcstackBANK3 0370  
                                       ?_ipAdressToString 0067  
                      __end_of_ENC424J600_writeSingleByte 466A  
                              _ENC424J600_writeSingleByte 4652  
                                   _memory_txFrameRequest 00C8  
           __end_of_ethernetController_newPacketAvailable 46A0  
          __size_of_ethernetController_newPacketAvailable 0012  
                  ?_ethernetController_newPacketAvailable 0001  
                 ??_ethernetController_newPacketAvailable 006F  
                   _ethernetController_newPacketAvailable 468E  
                                ARP_replyIfNeeded@request 0100  
                                    ?_ipv4_txFrameRequest 00A7  
                ethernetController_softReset@receivedData 00A1  
                                      ??_ipAdressToString 006B  
                                 __size_of_mac_setAllZero 0026  
                                     _ENC424J600_writeSPI 3D6A  
                                       __size_of_ipv4_cmp 0042  
                               ipv4_txFrameRequest@packet 00A7  
                              buttonHandler@debounceValue 0003  
                                           ??_parseNumber 000B  
                                               _main$1984 0394  
                                        ___lwdiv@dividend 0060  
                                      _sevenSegCharacters 01BE  
              ethernetController_getEtherTypeField@opcode 007E  
                                               __pintcode 0008  
                            ??_ENC424J600_readPHYRegister 0070  
                            __size_of_memory_txFrameClear 0024  
                                           __pmediumconst 7C84  
                                                ?___lldiv 0066  
                                                ?___llmod 0060  
                           __size_of_ipv4_handleNewPacket 001C  
                                                ?___lwdiv 0060  
                                                ?___lwmod 0060  
     ethernetController_writeEtherTypeFieldToBuffer@field 0071  
                                    ?_ENC424J600_writeSPI 0060  
                                     ipv4_setToAllZero@ip 0060  
                                                ?_mac_cmp 0060  
                               ARP_setNewEntry@maxSeconds 0076  
                                  ?_ARP_parseFromRXBuffer 0077  
                               __size_of_UARTTransmitText 0056  
              ethernetController_getSourceMACAddress@temp 007F  
                    ENC424J600_setERXDATAReadPointer@addr 006A  
                      __size_of_ENC424J600_getPacketCount 001A  
                 ENC424J600_setERXDATAReadPointer@lowByte 006D  
               __end_of_ENC424J600_enableAutoMACInsertion 44B2  
              __size_of_ENC424J600_enableAutoMACInsertion 0028  
                      ?_ENC424J600_enableAutoMACInsertion 0001  
                     ??_ENC424J600_enableAutoMACInsertion 006E  
                       _ENC424J600_enableAutoMACInsertion 448A  
                                      ipAdressToString@ip 0067  
                                     __end_of_intToString 1B4A  
                              ?_ENC424J600_getPacketCount 0001  
              ethernetController_setLEDConfiguration@data 0070  
              ethernetController_setLEDConfiguration@conf 006E  
                                             _macToString 2CD4  
                                       ??_UARTTransmitInt 009E  
                                   ??_ipv4_txFrameRequest 00A9  
                                        ___lwdiv@quotient 0065  
                                       _entireMemoryEmpty 4260  
                                ??_ethernet_rxGetNewFrame 0177  
                                             ??i2___lwdiv 0005  
                                ARP_sendRequest@senderMAC 0104  
                                ARP_sendRequest@targetMAC 010E  
                      ENC424J600_readPHYRegister@highByte 007E  
                                      ?_entireMemoryEmpty 0001  
                     __size_of_ENC424J600_readPHYRegister 0122  
                     ipv4_streamToTransmissionBuffer@data 00B4  
                             ??_ethernetController_getRSV 0076  
                                          ___wmul@product 0064  
                             ethernet_rxGetNewFrame@frame 0174  
                                                _ARP_send 1B4A  
                              ARP_replyIfNeeded@senderMAC 0124  
                       ENC424J600_writeSPI@timeoutCounter 0066  
                              ARP_replyIfNeeded@targetMAC 012A  
                                        ?_ARP_setNewEntry 0064  
                                     ??_entireMemoryEmpty 0060  
                                        ARP_initTable@mac 007C  
                                        ?_ARP_sendRequest 00F8  
                                                i2u621_40 3F50  
                                       entireMemoryFull@i 0060  
                                                i2u713_40 351E  
                                                i2u721_40 3136  
                                                i2u714_40 3520  
                                                i2u722_44 3146  
                                                i2u722_45 3142  
                                                i2u717_44 30CA  
                                                i2u717_45 30C6  
                                     ARP_checkForEntry@ip 0067  
                                        __CFG_WDTPS$32768 000000  
                                      _mac_setToBroadcast 44B2  
                              __end_of_sevenSegmentUpdate 3178  
                   __end_of_ENC424J600_clearInterruptFlag 3794  
                  __size_of_ENC424J600_clearInterruptFlag 008A  
                           _ENC424J600_clearInterruptFlag 370A  
                                                _UARTInit 46A0  
                          ??_ipv4_calculateHeaderChecksum 0062  
                                   ??_ENC424J600_writeSPI 0062  
                                      UARTTransmitInt@val 009A  
                                            ??_getSeconds 0064  
                                     __end_of_parseNumber 3916  
                           ENC424J600_setTXLength@lowByte 0070  
                                       main@IPdestination 039E  
                                       ___wmul@multiplier 0060  
                                     ?_mac_setToBroadcast 0060  
   ethernetController_updateNextPacketPointer@newPointerH 0079  
   ethernetController_updateNextPacketPointer@newPointerL 0078  
                                       ?_sevenSegmentInit 0001  
                               __end_of_entireMemoryEmpty 4298  
                                  ?_memory_txFrameRequest 0084  
                                ??_ENC424J600_setTXLength 0070  
                    ethernetController_checkDeviceId@data 0071  
                             __size_of_printEthernetState 00A2  
                       __end_of_ENC424J600_getPacketCount 4652  
                                      ??_sevenSegmentInit 0060  
                     ENC424J600_setTXStartAddress@lowByte 0070  
                                               ipv4_cmp@a 0060  
                                               ipv4_cmp@b 0062  
                                               ipv4_cmp@i 0066  
                                             _INTCON3bits 000FF0  
                                               copy_data0 3570  
                                               copy_data1 3590  
                                         parseNumber@ones 000C  
                                         parseNumber@tens 000D  
                                       hexToString@number 01A3  
                                  __size_of_mac_isAllZero 0030  
                                      macToString@address 0081  
                                    ipAdressToString@ones 006F  
                                    ipAdressToString@tens 0073  
                                    ??_mac_setToBroadcast 0062  
                                      __end_of_getSeconds 468E  
                __end_of_ethernetController_checkDeviceId 401C  
               __size_of_ethernetController_checkDeviceId 004E  
                      ??_ethernetController_checkDeviceId 0071  
                       ?_ethernetController_checkDeviceId 006E  
                        _ethernetController_checkDeviceId 3FCE  
                                                __Hrparam 0000  
                                        ipv4_isAllZero@ip 0060  
                                ?_ethernet_txFrameRequest 00A2  
                                                __Lrparam 0000  
                                      __CFG_BOREN$SBORDIS 000000  
                        ipv4_writeHeaderIntoBuffer@header 0060  
                                       _ARP_checkForEntry 3178  
                                      _ENC424J600_initSPI 4602  
                                      _ENC424J600_readSPI 3BCA  
                                  macToString@secondDigit 0094  
                                        __size_of___lldiv 0084  
                                        __size_of___llmod 0068  
                                             _intToString 1884  
                                        __size_of___lwdiv 0054  
                                      ?_ARP_checkForEntry 0067  
                                        __size_of___lwmod 0044  
                 ethernetController_updateLinkStatus@temp 0082  
                               _ethernetController_getRSV 3990  
            ethernetController_getEtherTypeField@highByte 0080  
                                              _ANSELBbits 000F5C  
                               ENC424J600_setTXLength@len 006E  
                                   __end_of_buttonHandler 355C  
                                     ?_ENC424J600_initSPI 0001  
                                     ?_ENC424J600_readSPI 0060  
                                        __size_of_mac_cmp 0042  
                                 intToString@tenthousands 0085  
       ethernetController_streamFromRXBuffer@startAddress 0072  
                 __end_of_ethernetController_setLEDStatus 3E30  
                __size_of_ethernetController_setLEDStatus 0062  
                       ??_ethernetController_setLEDStatus 006F  
                        ?_ethernetController_setLEDStatus 006E  
                         _ethernetController_setLEDStatus 3DCE  
                                             _buttonState 01BD  
                     ENC424J600_setRXTailPointer@highByte 0071  
                                     ??_ARP_checkForEntry 006D  
                                  memory_txFrameRequest@i 0096  
                             __end_of_ARP_handleNewPacket 246C  
                                         ___lwdiv@divisor 0062  
                                         ___lwdiv@counter 0064  
                                       mac_setAllZero@mac 0060  
                                                __ptext10 32DC  
                                                __ptext11 4364  
                                                __ptext20 456C  
                                                __ptext12 3178  
                                                __ptext21 1884  
                                                __ptext13 059E  
                                                __ptext30 40AC  
                                                __ptext22 3C34  
                                                __ptext14 45E6  
                                                __ptext31 3EDA  
                                                __ptext23 3794  
                                                __ptext15 3916  
                                                __ptext40 322A  
                                                __ptext32 3A04  
                                                __ptext24 22CA  
                                                __ptext16 3990  
                                                __ptext41 443A  
                                                __ptext33 1B4A  
                                                __ptext25 467C  
                                                __ptext17 1568  
                                                __ptext50 3B5A  
                                                __ptext42 3F80  
                                                __ptext34 44B2  
                                                __ptext26 4174  
                                                __ptext18 3AEA  
                                                __ptext51 0A54  
                                                __ptext43 3818  
                                                __ptext35 2FD2  
                                                __ptext27 284E  
                                                __ptext19 4068  
                                                __ptext60 3680  
                                                __ptext52 4304  
                                                __ptext44 41B0  
                                                __ptext36 00C8  
                                                __ptext28 2CD4  
                                                __ptext61 2A9C  
                                                __ptext53 40F0  
                                                __ptext45 3C9C  
                                                __ptext37 4228  
                                                __ptext29 1D4A  
                                                __ptext70 25DA  
                                                __ptext62 3DCE  
                                                __ptext54 4334  
                                                __ptext46 4462  
                                                __ptext38 4260  
                                                __ptext71 3E30  
                                                __ptext63 35F2  
                                                __ptext55 4132  
                                                __ptext47 4524  
                                                __ptext39 2DDC  
                                                __ptext80 458E  
                                                __ptext72 3FCE  
                                                __ptext64 2976  
                                                __ptext56 342C  
                                                __ptext48 4392  
                                                __ptext81 4548  
                                                __ptext73 43E6  
                                                __ptext65 401C  
                                                __ptext57 46B0  
                                                __ptext49 43BC  
                                                __ptext90 44D8  
                                                __ptext82 46E8  
                                                __ptext74 4410  
                                                __ptext66 468E  
                                                __ptext58 46CC  
                                                __ptext91 45AC  
                                                __ptext83 4638  
                                                __ptext75 46D6  
                                                __ptext67 46BE  
                                                __ptext59 41EC  
                                                __ptext92 2EE4  
                                                __ptext84 42CE  
                                                __ptext76 46E0  
                                                __ptext68 370A  
                                                __ptext85 3D6A  
                                                __ptext77 4652  
                                                __ptext69 3A78  
                                                __ptext94 44FE  
                                                __ptext86 3BCA  
                                                __ptext78 448A  
                                                __ptext95 30BA  
                                                __ptext87 4602  
                                                __ptext79 4298  
                                                __ptext96 3898  
                                                __ptext88 46A0  
                                                __ptext97 3F2E  
                                                __ptext89 3D04  
                                                __ptext98 34C4  
                                            _SSP1CON1bits 000FC6  
                   ENC424J600_enableAutoMACInsertion@temp 006E  
                                      ipv4_setToAllZero@i 0062  
                         __size_of_ethernet_rxGetNewFrame 04B6  
                                          _mac_setAllZero 44D8  
                                                _ipv4_cmp 4132  
                     __end_of_ENC424J600_setRXTailPointer 4410  
                             _ENC424J600_setRXTailPointer 43E6  
                                             _OSCCON2bits 000FD2  
                                       ipAdressToString@i 007C  
                ENC424J600_setGPDATAWritePointer@highByte 006E  
                                           __size_of_main 03A6  
                                    ??_ENC424J600_initSPI 0060  
                                    ??_ENC424J600_readSPI 0062  
                                ARP_handleNewPacket@frame 00F8  
                                       ?_entireMemoryFull 0001  
     ethernetController_writeDestinationMACAddress@opcode 0084  
                          ??_ENC424J600_setTXStartAddress 0070  
                               ARP_replyIfNeeded@senderIP 0120  
                        __size_of_ethernetController_init 0072  
                                         _checkForOverlap 2DDC  
                               ARP_replyIfNeeded@targetIP 0130  
                                 ??_ARP_getEntryFromTable 0067  
                      __end_of_ENC424J600_readPHYRegister 2BBE  
                              _ENC424J600_readPHYRegister 2A9C  
                                      ??_entireMemoryFull 0060  
                               __end_of_ARP_checkForEntry 322A  
                                             _parseNumber 3898  
                                         ARP_initTable@ip 0082  
                           ??_ENC424J600_setRXTailPointer 0070  
                                      ARP_checkForEntry@i 0075  
                                                int$flags 004F  
                                                mac_cmp@a 0060  
                        __size_of_checkForOverlapSwitched 00B2  
                                                mac_cmp@b 0062  
                                                mac_cmp@i 0066  
            ENC424J600_readControlRegisterUnbanked@opcode 006D  
                                           _mac_isAllZero 4304  
                   ipv4_streamToTransmissionBuffer@packet 0072  
                                            _SSP1STATbits 000FC7  
                              ethernet_txFrameRequest@err 00A4  
                                 __size_of_ipv4_isAllZero 0030  
                               ethernet_rxGetNewFrame@err 00FC  
                          ?_ENC424J600_clearInterruptFlag 0001  
                                        _UARTTransmitText 3E30  
                                              _INTCONbits 000FF2  
                                  __size_of_updateSeconds 0026  
                                  ARP_checkForEntry@index 006B  
                                  ipv4_sendFrame@ipPacket 0134  
                __end_of_ENC424J600_setERXDATAReadPointer 4228  
               __size_of_ENC424J600_setERXDATAReadPointer 003C  
                      ??_ENC424J600_setERXDATAReadPointer 006C  
                       ?_ENC424J600_setERXDATAReadPointer 006A  
                        _ENC424J600_setERXDATAReadPointer 41EC  
                              __size_of_entireMemoryEmpty 0038  
   ethernetController_writeEtherTypeFieldToBuffer@ethtype 006F  
   ethernetController_writeEtherTypeFieldToBuffer@lowByte 007A  
                         __size_of_ENC424J600_setTXLength 002A  
                                  __end_of_mac_setAllZero 44FE  
                             ?_ENC424J600_writeSingleByte 0001  
                                     _memory_txFrameClear 4524  
                                  ARP_replyIfNeeded@reply 0134  
                        ENC424J600_readSPI@timeoutCounter 0066  
     ipv4_streamToTransmissionBuffer@ethernetPacketLength 00B5  
                                                intlevel2 0000  
                                        ___lwmod@dividend 0060  
                          ??_ENC424J600_getInterruptFlags 0070  
                                        ___lldiv@dividend 0066  
             ethernetController_getEtherTypeField@lowByte 007F  
      ethernetController_writeDestinationMACAddress@i_624 0085  
               ethernetController_streamFromRXBuffer@temp 0076  
                        ENC424J600_writeSingleByte@opcode 006A  
                                              _RCSTA1bits 000FAB  
                                        macToString@F5794 02EB  
      ethernetController_writeDestinationMACAddress@field 0075  
                                              _OSCCONbits 000FD3  
                                 __size_of_ipv4_sendFrame 01E8  
                 __end_of_ENC424J600_getNextPacketPointer 46D6  
                __size_of_ENC424J600_getNextPacketPointer 000A  
                       ??_ENC424J600_getNextPacketPointer 0062  
                        ?_ENC424J600_getNextPacketPointer 0060  
                         _ENC424J600_getNextPacketPointer 46CC  
                               __size_of_ipAdressToString 01EE  
                                          ARP_initTable@i 0086  
                                            macToString@i 0095  
                                            macToString@j 0097  
                ENC424J600_readPHYRegister@timeoutCounter 0079  
                 __end_of_ENC424J600_setNextPacketPointer 46E0  
                __size_of_ENC424J600_setNextPacketPointer 000A  
                       ??_ENC424J600_setNextPacketPointer 0062  
                        ?_ENC424J600_setNextPacketPointer 0060  
                         _ENC424J600_setNextPacketPointer 46D6  
                                    ?_memory_txFrameClear 0001  
                                     ARP_send@destination 00C7  
                                          ?_mac_isAllZero 0060  
                                  _ethernet_rxGetNewFrame 059E  
                                    __CFG_CPUDIV$NOCLKDIV 000000  
                        ENC424J600_getInterruptFlags@high 0077  
                                 ??_ARP_parseFromRXBuffer 0097  
                                         _UARTTransmitInt 456C  
                      ethernetController_sendPacket@field 0072  
            ethernetController_getSourceMACAddress@opcode 0078  
    ethernetController_writeEtherTypeFieldToBuffer@opcode 007C  
            __end_of_ENC424J600_updateReceiveStatusVector 1884  
           __size_of_ENC424J600_updateReceiveStatusVector 031C  
                  ??_ENC424J600_updateReceiveStatusVector 0065  
                   ?_ENC424J600_updateReceiveStatusVector 0060  
                    _ENC424J600_updateReceiveStatusVector 1568  
                                   mac_setToBroadcast@mac 0060  
                               ipv4_handleNewPacket@frame 009A  
                                   ipv4_sendFrame@oldTime 019A  
                                        ___lldiv@quotient 006E  
                                         ___lwmod@divisor 0062  
                      ENC424J600_setNextPacketPointer@ptr 0060  
                                         ___lwmod@counter 0064  
                                  ARP_handleNewPacket@arp 0154  
                            ??_ipv4_writeHeaderIntoBuffer 0079  
                                            ?_macToString 007A  
                             ??_ENC424J600_getPacketCount 006E  
              ENC424J600_readControlRegisterUnbanked@addr 006C  
              ENC424J600_readControlRegisterUnbanked@data 006A  
                         ethernetController_getRSV@opcode 0076  
                    __end_of_ethernetController_softReset 2718  
                   __size_of_ethernetController_softReset 013E  
                            _ethernetController_softReset 25DA  
                                         ?_mac_setAllZero 0060  
                            __end_of_ipv4_handleNewPacket 4602  
             ethernetController_getSourceMACAddress@field 006F  
                         ENC424J600_getInterruptFlags@low 0076  
                                      __CFG_FOSC$INTOSCIO 000000  
                                 __end_of_checkForOverlap 2EE4  
           __end_ofethernetController_getDeviceName@F5839 7C90  
                   ethernetController_getDeviceName@F5839 7C85  
                                          ARP_send@i_2680 00CE  
                                          ARP_send@i_2681 00CF  
                                          ARP_send@i_2682 00D0  
                          ?_ethernetController_dropPacket 0072  
                                        ARP_send@ethFrame 00D1  
                                           _updateSeconds 44FE  
                                 _sevenSegmentUpdate$2058 0013  
                              __size_of_ARP_checkForEntry 00B2  
                          ENC424J600_readPHYRegister@addr 0076  
                          ENC424J600_readPHYRegister@data 006E  
                                  _ENC424J600_setTXLength 43BC  
                                  __size_of_ARP_initTable 0066  
                                   ??_memory_txFrameClear 0060  
                          ENC424J600_readPHYRegister@temp 007F  
