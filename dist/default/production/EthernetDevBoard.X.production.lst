

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Mar 31 22:00:44 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F25K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1,group=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1,group=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	text64,global,reloc=2,class=CODE,delta=1
    84                           	psect	text65,global,reloc=2,class=CODE,delta=1
    85                           	psect	text66,global,reloc=2,class=CODE,delta=1,group=1
    86                           	psect	text67,global,reloc=2,class=CODE,delta=1,group=1
    87                           	psect	text68,global,reloc=2,class=CODE,delta=1
    88                           	psect	text69,global,reloc=2,class=CODE,delta=1
    89                           	psect	text70,global,reloc=2,class=CODE,delta=1
    90                           	psect	text71,global,reloc=2,class=CODE,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1
    93                           	psect	text74,global,reloc=2,class=CODE,delta=1
    94                           	psect	text75,global,reloc=2,class=CODE,delta=1
    95                           	psect	text76,global,reloc=2,class=CODE,delta=1
    96                           	psect	text77,global,reloc=2,class=CODE,delta=1
    97                           	psect	text78,global,reloc=2,class=CODE,delta=1
    98                           	psect	text79,global,reloc=2,class=CODE,delta=1,group=1
    99                           	psect	text80,global,reloc=2,class=CODE,delta=1
   100                           	psect	text81,global,reloc=2,class=CODE,delta=1
   101                           	psect	text82,global,reloc=2,class=CODE,delta=1
   102                           	psect	text83,global,reloc=2,class=CODE,delta=1
   103                           	psect	text84,global,reloc=2,class=CODE,delta=1
   104                           	psect	text85,global,reloc=2,class=CODE,delta=1
   105                           	psect	text86,global,reloc=2,class=CODE,delta=1
   106                           	psect	text87,global,reloc=2,class=CODE,delta=1
   107                           	psect	text88,global,reloc=2,class=CODE,delta=1
   108                           	psect	text89,global,reloc=2,class=CODE,delta=1
   109                           	psect	text90,global,reloc=2,class=CODE,delta=1
   110                           	psect	text91,global,reloc=2,class=CODE,delta=1
   111                           	psect	text92,global,reloc=2,class=CODE,delta=1
   112                           	psect	text93,global,reloc=2,class=CODE,delta=1
   113                           	psect	text94,global,reloc=2,class=CODE,delta=1
   114                           	psect	text95,global,reloc=2,class=CODE,delta=1
   115                           	psect	text96,global,reloc=2,class=CODE,delta=1
   116                           	psect	text97,global,reloc=2,class=CODE,delta=1
   117                           	psect	text98,global,reloc=2,class=CODE,delta=1
   118                           	psect	text99,global,reloc=2,class=CODE,delta=1
   119                           	psect	text100,global,reloc=2,class=CODE,delta=1
   120                           	psect	text101,global,reloc=2,class=CODE,delta=1
   121                           	psect	text102,global,reloc=2,class=CODE,delta=1
   122                           	psect	text103,global,reloc=2,class=CODE,delta=1
   123                           	psect	text104,global,reloc=2,class=CODE,delta=1
   124                           	psect	text105,global,reloc=2,class=CODE,delta=1
   125                           	psect	text106,global,reloc=2,class=CODE,delta=1
   126                           	psect	text107,global,reloc=2,class=CODE,delta=1
   127                           	psect	text108,global,reloc=2,class=CODE,delta=1
   128                           	psect	text109,global,reloc=2,class=CODE,delta=1
   129                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   130                           	psect	text111,global,reloc=2,class=CODE,delta=1
   131                           	psect	text112,global,reloc=2,class=CODE,delta=1
   132                           	psect	text113,global,reloc=2,class=CODE,delta=1
   133                           	psect	text114,global,reloc=2,class=CODE,delta=1
   134                           	psect	text115,global,reloc=2,class=CODE,delta=1
   135                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   136                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   137                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   138  0000                     
   139                           ; Version 1.45
   140                           ; Generated 16/11/2017 GMT
   141                           ; 
   142                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   143                           ; All rights reserved.
   144                           ; 
   145                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   146                           ; 
   147                           ; Redistribution and use in source and binary forms, with or without modification, are
   148                           ; permitted provided that the following conditions are met:
   149                           ; 
   150                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   151                           ;        conditions and the following disclaimer.
   152                           ; 
   153                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   154                           ;        of conditions and the following disclaimer in the documentation and/or other
   155                           ;        materials provided with the distribution.
   156                           ; 
   157                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   158                           ;        software without specific prior written permission.
   159                           ; 
   160                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   161                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   162                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   163                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   164                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   165                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   166                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   167                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   168                           ; 
   169                           ; 
   170                           ; Code-generator required, PIC18F25K50 Definitions
   171                           ; 
   172                           ; SFR Addresses
   173  0000                     
   174                           	psect	idataCOMRAM
   175  005746                     __pidataCOMRAM:
   176                           	opt stack 0
   177                           
   178                           ;initializer for _randx
   179  005746  0001               	dw	1
   180  005748  0000               	dw	0
   181                           
   182                           ;initializer for ethernetController_softReset@F5987
   183  00574A  12                 	db	18
   184  00574B  34                 	db	52
   185                           
   186                           	psect	idataBANK2
   187  00535E                     __pidataBANK2:
   188                           	opt stack 0
   189                           
   190                           ;initializer for macToString@F5947
   191  00535E  3F                 	db	63
   192  00535F  3F                 	db	63
   193  005360  3A                 	db	58
   194  005361  3F                 	db	63
   195  005362  3F                 	db	63
   196  005363  3A                 	db	58
   197  005364  3F                 	db	63
   198  005365  3F                 	db	63
   199  005366  3A                 	db	58
   200  005367  3F                 	db	63
   201  005368  3F                 	db	63
   202  005369  3A                 	db	58
   203  00536A  3F                 	db	63
   204  00536B  3F                 	db	63
   205  00536C  3A                 	db	58
   206  00536D  3F                 	db	63
   207  00536E  3F                 	db	63
   208  00536F  00                 	db	0
   209                           
   210                           ;initializer for _sevenSegCharacters
   211  005370  3F                 	db	63
   212  005371  06                 	db	6
   213  005372  5B                 	db	91
   214  005373  4F                 	db	79
   215  005374  66                 	db	102
   216  005375  6D                 	db	109
   217  005376  7D                 	db	125
   218  005377  07                 	db	7
   219  005378  7F                 	db	127
   220  005379  6F                 	db	111
   221  00537A  00                 	db	0
   222  00537B  40                 	db	64
   223                           
   224                           ;initializer for ipAdressToString@address
   225  00537C  3F                 	db	63
   226  00537D  3F                 	db	63
   227  00537E  3F                 	db	63
   228  00537F  2E                 	db	46
   229  005380  3F                 	db	63
   230  005381  3F                 	db	63
   231  005382  3F                 	db	63
   232  005383  2E                 	db	46
   233  005384  3F                 	db	63
   234  005385  3F                 	db	63
   235  005386  3F                 	db	63
   236  005387  2E                 	db	46
   237  005388  3F                 	db	63
   238  005389  3F                 	db	63
   239  00538A  3F                 	db	63
   240  00538B  00                 	db	0
   241                           
   242                           	psect	mediumconst
   243  007A0A                     __pmediumconst:
   244                           	opt stack 0
   245  007A0A  00                 	db	0
   246  007A0B                     ethernetController_getDeviceName@F5999:
   247                           	opt stack 0
   248  007A0B  45                 	db	69
   249  007A0C  4E                 	db	78
   250  007A0D  43                 	db	67
   251  007A0E  34                 	db	52
   252  007A0F  32                 	db	50
   253  007A10  34                 	db	52
   254  007A11  4A                 	db	74
   255  007A12  36                 	db	54
   256  007A13  30                 	db	48
   257  007A14  30                 	db	48
   258  007A15  00                 	db	0
   259  007A16                     __end_ofethernetController_getDeviceName@F5999:
   260                           	opt stack 0
   261  0000                     _ANSELC	set	3933
   262  0000                     _ANSELA	set	3931
   263  0000                     _ANSELB	set	3932
   264  0000                     _ANSELBbits	set	3932
   265  0000                     _CCPR1	set	4030
   266  0000                     _TXREG1	set	4013
   267  0000                     _SPBRG	set	4015
   268  0000                     _RCSTA1bits	set	4011
   269  0000                     _TXSTA1bits	set	4012
   270  0000                     _PORTA	set	3968
   271  0000                     _TRISA	set	3986
   272  0000                     _TRISC	set	3988
   273  0000                     _PORTC	set	3970
   274  0000                     _PIR1bits	set	3998
   275  0000                     _PORTB	set	3969
   276  0000                     _TRISB	set	3987
   277  0000                     _RCONbits	set	4048
   278  0000                     _PIE1bits	set	3997
   279  0000                     _CCP1CONbits	set	4029
   280  0000                     _T1CONbits	set	4045
   281  0000                     _T0CONbits	set	4053
   282  0000                     _INTCON3bits	set	4080
   283  0000                     _INTCONbits	set	4082
   284  0000                     _OSCCON2bits	set	4050
   285  0000                     _OSCCONbits	set	4051
   286  0000                     _SSP1BUF	set	4041
   287  0000                     _TRISBbits	set	3987
   288  0000                     _SSP1STATbits	set	4039
   289  0000                     _SSP1CON1bits	set	4038
   290  0000                     _PORTBbits	set	3969
   291  0000                     _TRMT	set	32097
   292  0000                     _RCIF	set	31989
   293  0000                     _RCIE	set	31981
   294  0000                     _RCIP	set	31997
   295  0000                     _TXIF	set	31988
   296  007A16                     STR_88:
   297  007A16  5B                 	db	91	;'['
   298  007A17  41                 	db	65	;'A'
   299  007A18  52                 	db	82	;'R'
   300  007A19  50                 	db	80	;'P'
   301  007A1A  5D                 	db	93	;']'
   302  007A1B  3A                 	db	58	;':'
   303  007A1C  20                 	db	32
   304  007A1D  4F                 	db	79	;'O'
   305  007A1E  70                 	db	112	;'p'
   306  007A1F  65                 	db	101	;'e'
   307  007A20  72                 	db	114	;'r'
   308  007A21  61                 	db	97	;'a'
   309  007A22  74                 	db	116	;'t'
   310  007A23  69                 	db	105	;'i'
   311  007A24  6F                 	db	111	;'o'
   312  007A25  6E                 	db	110	;'n'
   313  007A26  20                 	db	32
   314  007A27  77                 	db	119	;'w'
   315  007A28  61                 	db	97	;'a'
   316  007A29  73                 	db	115	;'s'
   317  007A2A  20                 	db	32
   318  007A2B  69                 	db	105	;'i'
   319  007A2C  6E                 	db	110	;'n'
   320  007A2D  74                 	db	116	;'t'
   321  007A2E  65                 	db	101	;'e'
   322  007A2F  72                 	db	114	;'r'
   323  007A30  72                 	db	114	;'r'
   324  007A31  75                 	db	117	;'u'
   325  007A32  70                 	db	112	;'p'
   326  007A33  74                 	db	116	;'t'
   327  007A34  65                 	db	101	;'e'
   328  007A35  64                 	db	100	;'d'
   329  007A36  20                 	db	32
   330  007A37  62                 	db	98	;'b'
   331  007A38  65                 	db	101	;'e'
   332  007A39  63                 	db	99	;'c'
   333  007A3A  61                 	db	97	;'a'
   334  007A3B  75                 	db	117	;'u'
   335  007A3C  73                 	db	115	;'s'
   336  007A3D  65                 	db	101	;'e'
   337  007A3E  20                 	db	32
   338  007A3F  6C                 	db	108	;'l'
   339  007A40  69                 	db	105	;'i'
   340  007A41  6E                 	db	110	;'n'
   341  007A42  6B                 	db	107	;'k'
   342  007A43  20                 	db	32
   343  007A44  77                 	db	119	;'w'
   344  007A45  61                 	db	97	;'a'
   345  007A46  73                 	db	115	;'s'
   346  007A47  20                 	db	32
   347  007A48  6C                 	db	108	;'l'
   348  007A49  6F                 	db	111	;'o'
   349  007A4A  73                 	db	115	;'s'
   350  007A4B  74                 	db	116	;'t'
   351  007A4C  2E                 	db	46
   352  007A4D  0A                 	db	10
   353  007A4E  0D                 	db	13
   354  007A4F  00                 	db	0
   355  007A50                     STR_58:
   356  007A50  45                 	db	69	;'E'
   357  007A51  74                 	db	116	;'t'
   358  007A52  68                 	db	104	;'h'
   359  007A53  65                 	db	101	;'e'
   360  007A54  72                 	db	114	;'r'
   361  007A55  6E                 	db	110	;'n'
   362  007A56  65                 	db	101	;'e'
   363  007A57  74                 	db	116	;'t'
   364  007A58  20                 	db	32
   365  007A59  63                 	db	99	;'c'
   366  007A5A  6F                 	db	111	;'o'
   367  007A5B  6E                 	db	110	;'n'
   368  007A5C  74                 	db	116	;'t'
   369  007A5D  72                 	db	114	;'r'
   370  007A5E  6F                 	db	111	;'o'
   371  007A5F  6C                 	db	108	;'l'
   372  007A60  6C                 	db	108	;'l'
   373  007A61  65                 	db	101	;'e'
   374  007A62  72                 	db	114	;'r'
   375  007A63  20                 	db	32
   376  007A64  68                 	db	104	;'h'
   377  007A65  61                 	db	97	;'a'
   378  007A66  73                 	db	115	;'s'
   379  007A67  20                 	db	32
   380  007A68  72                 	db	114	;'r'
   381  007A69  65                 	db	101	;'e'
   382  007A6A  74                 	db	116	;'t'
   383  007A6B  75                 	db	117	;'u'
   384  007A6C  72                 	db	114	;'r'
   385  007A6D  6E                 	db	110	;'n'
   386  007A6E  65                 	db	101	;'e'
   387  007A6F  64                 	db	100	;'d'
   388  007A70  20                 	db	32
   389  007A71  61                 	db	97	;'a'
   390  007A72  6E                 	db	110	;'n'
   391  007A73  20                 	db	32
   392  007A74  75                 	db	117	;'u'
   393  007A75  6E                 	db	110	;'n'
   394  007A76  6B                 	db	107	;'k'
   395  007A77  6E                 	db	110	;'n'
   396  007A78  6F                 	db	111	;'o'
   397  007A79  77                 	db	119	;'w'
   398  007A7A  6E                 	db	110	;'n'
   399  007A7B  20                 	db	32
   400  007A7C  64                 	db	100	;'d'
   401  007A7D  65                 	db	101	;'e'
   402  007A7E  76                 	db	118	;'v'
   403  007A7F  69                 	db	105	;'i'
   404  007A80  63                 	db	99	;'c'
   405  007A81  65                 	db	101	;'e'
   406  007A82  20                 	db	32
   407  007A83  49                 	db	73	;'I'
   408  007A84  44                 	db	68	;'D'
   409  007A85  2E                 	db	46
   410  007A86  00                 	db	0
   411  007A87                     STR_28:
   412  007A87  2D                 	db	45
   413  007A88  2D                 	db	45
   414  007A89  2D                 	db	45
   415  007A8A  2D                 	db	45
   416  007A8B  2D                 	db	45
   417  007A8C  2D                 	db	45
   418  007A8D  2D                 	db	45
   419  007A8E  2D                 	db	45
   420  007A8F  2D                 	db	45
   421  007A90  2D                 	db	45
   422  007A91  2D                 	db	45
   423  007A92  2D                 	db	45
   424  007A93  2D                 	db	45
   425  007A94  2D                 	db	45
   426  007A95  2D                 	db	45
   427  007A96  2D                 	db	45
   428  007A97  2D                 	db	45
   429  007A98  2D                 	db	45
   430  007A99  2D                 	db	45
   431  007A9A  2D                 	db	45
   432  007A9B  2D                 	db	45
   433  007A9C  2D                 	db	45
   434  007A9D  2D                 	db	45
   435  007A9E  2D                 	db	45
   436  007A9F  2D                 	db	45
   437  007AA0  2D                 	db	45
   438  007AA1  2D                 	db	45
   439  007AA2  2D                 	db	45
   440  007AA3  2D                 	db	45
   441  007AA4  2D                 	db	45
   442  007AA5  2D                 	db	45
   443  007AA6  2D                 	db	45
   444  007AA7  2D                 	db	45
   445  007AA8  2D                 	db	45
   446  007AA9  2D                 	db	45
   447  007AAA  2D                 	db	45
   448  007AAB  2D                 	db	45
   449  007AAC  2D                 	db	45
   450  007AAD  2D                 	db	45
   451  007AAE  2D                 	db	45
   452  007AAF  2D                 	db	45
   453  007AB0  2D                 	db	45
   454  007AB1  2D                 	db	45
   455  007AB2  2D                 	db	45
   456  007AB3  2D                 	db	45
   457  007AB4  2D                 	db	45
   458  007AB5  2D                 	db	45
   459  007AB6  2D                 	db	45
   460  007AB7  0A                 	db	10
   461  007AB8  0D                 	db	13
   462  007AB9  00                 	db	0
   463  007ABA                     STR_29:
   464  007ABA  07                 	db	7
   465  007ABB  2A                 	db	42
   466  007ABC  2A                 	db	42
   467  007ABD  2A                 	db	42
   468  007ABE  20                 	db	32
   469  007ABF  43                 	db	67	;'C'
   470  007AC0  52                 	db	82	;'R'
   471  007AC1  49                 	db	73	;'I'
   472  007AC2  54                 	db	84	;'T'
   473  007AC3  49                 	db	73	;'I'
   474  007AC4  43                 	db	67	;'C'
   475  007AC5  41                 	db	65	;'A'
   476  007AC6  4C                 	db	76	;'L'
   477  007AC7  20                 	db	32
   478  007AC8  45                 	db	69	;'E'
   479  007AC9  52                 	db	82	;'R'
   480  007ACA  52                 	db	82	;'R'
   481  007ACB  4F                 	db	79	;'O'
   482  007ACC  52                 	db	82	;'R'
   483  007ACD  3A                 	db	58	;':'
   484  007ACE  20                 	db	32
   485  007ACF  57                 	db	87	;'W'
   486  007AD0  41                 	db	65	;'A'
   487  007AD1  54                 	db	84	;'T'
   488  007AD2  43                 	db	67	;'C'
   489  007AD3  48                 	db	72	;'H'
   490  007AD4  44                 	db	68	;'D'
   491  007AD5  4F                 	db	79	;'O'
   492  007AD6  47                 	db	71	;'G'
   493  007AD7  20                 	db	32
   494  007AD8  43                 	db	67	;'C'
   495  007AD9  41                 	db	65	;'A'
   496  007ADA  55                 	db	85	;'U'
   497  007ADB  53                 	db	83	;'S'
   498  007ADC  45                 	db	69	;'E'
   499  007ADD  44                 	db	68	;'D'
   500  007ADE  20                 	db	32
   501  007ADF  52                 	db	82	;'R'
   502  007AE0  45                 	db	69	;'E'
   503  007AE1  53                 	db	83	;'S'
   504  007AE2  45                 	db	69	;'E'
   505  007AE3  54                 	db	84	;'T'
   506  007AE4  20                 	db	32
   507  007AE5  2A                 	db	42
   508  007AE6  2A                 	db	42
   509  007AE7  2A                 	db	42
   510  007AE8  0A                 	db	10
   511  007AE9  0D                 	db	13
   512  007AEA  00                 	db	0
   513  007AEB                     STR_84:
   514  007AEB  5B                 	db	91	;'['
   515  007AEC  41                 	db	65	;'A'
   516  007AED  52                 	db	82	;'R'
   517  007AEE  50                 	db	80	;'P'
   518  007AEF  5D                 	db	93	;']'
   519  007AF0  3A                 	db	58	;':'
   520  007AF1  20                 	db	32
   521  007AF2  53                 	db	83	;'S'
   522  007AF3  65                 	db	101	;'e'
   523  007AF4  6E                 	db	110	;'n'
   524  007AF5  64                 	db	100	;'d'
   525  007AF6  69                 	db	105	;'i'
   526  007AF7  6E                 	db	110	;'n'
   527  007AF8  67                 	db	103	;'g'
   528  007AF9  20                 	db	32
   529  007AFA  47                 	db	71	;'G'
   530  007AFB  72                 	db	114	;'r'
   531  007AFC  61                 	db	97	;'a'
   532  007AFD  74                 	db	116	;'t'
   533  007AFE  75                 	db	117	;'u'
   534  007AFF  69                 	db	105	;'i'
   535  007B00  74                 	db	116	;'t'
   536  007B01  6F                 	db	111	;'o'
   537  007B02  75                 	db	117	;'u'
   538  007B03  73                 	db	115	;'s'
   539  007B04  20                 	db	32
   540  007B05  41                 	db	65	;'A'
   541  007B06  52                 	db	82	;'R'
   542  007B07  50                 	db	80	;'P'
   543  007B08  20                 	db	32
   544  007B09  72                 	db	114	;'r'
   545  007B0A  65                 	db	101	;'e'
   546  007B0B  71                 	db	113	;'q'
   547  007B0C  75                 	db	117	;'u'
   548  007B0D  65                 	db	101	;'e'
   549  007B0E  73                 	db	115	;'s'
   550  007B0F  74                 	db	116	;'t'
   551  007B10  20                 	db	32
   552  007B11  66                 	db	102	;'f'
   553  007B12  6F                 	db	111	;'o'
   554  007B13  72                 	db	114	;'r'
   555  007B14  20                 	db	32
   556  007B15  00                 	db	0
   557  007B16                     STR_21:
   558  007B16  5B                 	db	91	;'['
   559  007B17  49                 	db	73	;'I'
   560  007B18  50                 	db	80	;'P'
   561  007B19  76                 	db	118	;'v'
   562  007B1A  34                 	db	52	;'4'
   563  007B1B  5D                 	db	93	;']'
   564  007B1C  3A                 	db	58	;':'
   565  007B1D  20                 	db	32
   566  007B1E  50                 	db	80	;'P'
   567  007B1F  61                 	db	97	;'a'
   568  007B20  63                 	db	99	;'c'
   569  007B21  6B                 	db	107	;'k'
   570  007B22  65                 	db	101	;'e'
   571  007B23  74                 	db	116	;'t'
   572  007B24  20                 	db	32
   573  007B25  77                 	db	119	;'w'
   574  007B26  61                 	db	97	;'a'
   575  007B27  73                 	db	115	;'s'
   576  007B28  20                 	db	32
   577  007B29  73                 	db	115	;'s'
   578  007B2A  65                 	db	101	;'e'
   579  007B2B  6E                 	db	110	;'n'
   580  007B2C  74                 	db	116	;'t'
   581  007B2D  20                 	db	32
   582  007B2E  73                 	db	115	;'s'
   583  007B2F  75                 	db	117	;'u'
   584  007B30  63                 	db	99	;'c'
   585  007B31  63                 	db	99	;'c'
   586  007B32  65                 	db	101	;'e'
   587  007B33  73                 	db	115	;'s'
   588  007B34  73                 	db	115	;'s'
   589  007B35  66                 	db	102	;'f'
   590  007B36  75                 	db	117	;'u'
   591  007B37  6C                 	db	108	;'l'
   592  007B38  6C                 	db	108	;'l'
   593  007B39  79                 	db	121	;'y'
   594  007B3A  2E                 	db	46
   595  007B3B  0A                 	db	10
   596  007B3C  0D                 	db	13
   597  007B3D  00                 	db	0
   598  007B3E                     STR_70:
   599  007B3E  5B                 	db	91	;'['
   600  007B3F  49                 	db	73	;'I'
   601  007B40  6E                 	db	110	;'n'
   602  007B41  76                 	db	118	;'v'
   603  007B42  61                 	db	97	;'a'
   604  007B43  6C                 	db	108	;'l'
   605  007B44  69                 	db	105	;'i'
   606  007B45  64                 	db	100	;'d'
   607  007B46  20                 	db	32
   608  007B47  41                 	db	65	;'A'
   609  007B48  52                 	db	82	;'R'
   610  007B49  50                 	db	80	;'P'
   611  007B4A  20                 	db	32
   612  007B4B  4D                 	db	77	;'M'
   613  007B4C  65                 	db	101	;'e'
   614  007B4D  73                 	db	115	;'s'
   615  007B4E  73                 	db	115	;'s'
   616  007B4F  61                 	db	97	;'a'
   617  007B50  67                 	db	103	;'g'
   618  007B51  65                 	db	101	;'e'
   619  007B52  20                 	db	32
   620  007B53  77                 	db	119	;'w'
   621  007B54  61                 	db	97	;'a'
   622  007B55  73                 	db	115	;'s'
   623  007B56  20                 	db	32
   624  007B57  64                 	db	100	;'d'
   625  007B58  69                 	db	105	;'i'
   626  007B59  73                 	db	115	;'s'
   627  007B5A  63                 	db	99	;'c'
   628  007B5B  61                 	db	97	;'a'
   629  007B5C  72                 	db	114	;'r'
   630  007B5D  64                 	db	100	;'d'
   631  007B5E  65                 	db	101	;'e'
   632  007B5F  64                 	db	100	;'d'
   633  007B60  2E                 	db	46
   634  007B61  5D                 	db	93	;']'
   635  007B62  0D                 	db	13
   636  007B63  0A                 	db	10
   637  007B64  00                 	db	0
   638  007B65                     STR_90:
   639  007B65  5B                 	db	91	;'['
   640  007B66  41                 	db	65	;'A'
   641  007B67  52                 	db	82	;'R'
   642  007B68  50                 	db	80	;'P'
   643  007B69  5D                 	db	93	;']'
   644  007B6A  3A                 	db	58	;':'
   645  007B6B  20                 	db	32
   646  007B6C  43                 	db	67	;'C'
   647  007B6D  6F                 	db	111	;'o'
   648  007B6E  6E                 	db	110	;'n'
   649  007B6F  66                 	db	102	;'f'
   650  007B70  6C                 	db	108	;'l'
   651  007B71  69                 	db	105	;'i'
   652  007B72  63                 	db	99	;'c'
   653  007B73  74                 	db	116	;'t'
   654  007B74  20                 	db	32
   655  007B75  64                 	db	100	;'d'
   656  007B76  75                 	db	117	;'u'
   657  007B77  72                 	db	114	;'r'
   658  007B78  69                 	db	105	;'i'
   659  007B79  6E                 	db	110	;'n'
   660  007B7A  67                 	db	103	;'g'
   661  007B7B  20                 	db	32
   662  007B7C  61                 	db	97	;'a'
   663  007B7D  6E                 	db	110	;'n'
   664  007B7E  6E                 	db	110	;'n'
   665  007B7F  6F                 	db	111	;'o'
   666  007B80  75                 	db	117	;'u'
   667  007B81  6E                 	db	110	;'n'
   668  007B82  63                 	db	99	;'c'
   669  007B83  65                 	db	101	;'e'
   670  007B84  6D                 	db	109	;'m'
   671  007B85  65                 	db	101	;'e'
   672  007B86  6E                 	db	110	;'n'
   673  007B87  74                 	db	116	;'t'
   674  007B88  2E                 	db	46
   675  007B89  0A                 	db	10
   676  007B8A  0D                 	db	13
   677  007B8B  00                 	db	0
   678  007B8C                     STR_95:
   679  007B8C  5B                 	db	91	;'['
   680  007B8D  41                 	db	65	;'A'
   681  007B8E  52                 	db	82	;'R'
   682  007B8F  50                 	db	80	;'P'
   683  007B90  5D                 	db	93	;']'
   684  007B91  3A                 	db	58	;':'
   685  007B92  20                 	db	32
   686  007B93  54                 	db	84	;'T'
   687  007B94  61                 	db	97	;'a'
   688  007B95  62                 	db	98	;'b'
   689  007B96  6C                 	db	108	;'l'
   690  007B97  65                 	db	101	;'e'
   691  007B98  20                 	db	32
   692  007B99  77                 	db	119	;'w'
   693  007B9A  61                 	db	97	;'a'
   694  007B9B  73                 	db	115	;'s'
   695  007B9C  20                 	db	32
   696  007B9D  72                 	db	114	;'r'
   697  007B9E  65                 	db	101	;'e'
   698  007B9F  73                 	db	115	;'s'
   699  007BA0  65                 	db	101	;'e'
   700  007BA1  74                 	db	116	;'t'
   701  007BA2  20                 	db	32
   702  007BA3  73                 	db	115	;'s'
   703  007BA4  75                 	db	117	;'u'
   704  007BA5  63                 	db	99	;'c'
   705  007BA6  63                 	db	99	;'c'
   706  007BA7  65                 	db	101	;'e'
   707  007BA8  73                 	db	115	;'s'
   708  007BA9  73                 	db	115	;'s'
   709  007BAA  66                 	db	102	;'f'
   710  007BAB  75                 	db	117	;'u'
   711  007BAC  6C                 	db	108	;'l'
   712  007BAD  6C                 	db	108	;'l'
   713  007BAE  79                 	db	121	;'y'
   714  007BAF  2E                 	db	46
   715  007BB0  0A                 	db	10
   716  007BB1  0D                 	db	13
   717  007BB2  00                 	db	0
   718  007BB3                     STR_57:
   719  007BB3  45                 	db	69	;'E'
   720  007BB4  74                 	db	116	;'t'
   721  007BB5  68                 	db	104	;'h'
   722  007BB6  65                 	db	101	;'e'
   723  007BB7  72                 	db	114	;'r'
   724  007BB8  6E                 	db	110	;'n'
   725  007BB9  65                 	db	101	;'e'
   726  007BBA  74                 	db	116	;'t'
   727  007BBB  20                 	db	32
   728  007BBC  63                 	db	99	;'c'
   729  007BBD  6F                 	db	111	;'o'
   730  007BBE  6E                 	db	110	;'n'
   731  007BBF  74                 	db	116	;'t'
   732  007BC0  72                 	db	114	;'r'
   733  007BC1  6F                 	db	111	;'o'
   734  007BC2  6C                 	db	108	;'l'
   735  007BC3  6C                 	db	108	;'l'
   736  007BC4  65                 	db	101	;'e'
   737  007BC5  72                 	db	114	;'r'
   738  007BC6  20                 	db	32
   739  007BC7  69                 	db	105	;'i'
   740  007BC8  73                 	db	115	;'s'
   741  007BC9  20                 	db	32
   742  007BCA  75                 	db	117	;'u'
   743  007BCB  6E                 	db	110	;'n'
   744  007BCC  72                 	db	114	;'r'
   745  007BCD  65                 	db	101	;'e'
   746  007BCE  73                 	db	115	;'s'
   747  007BCF  70                 	db	112	;'p'
   748  007BD0  6F                 	db	111	;'o'
   749  007BD1  6E                 	db	110	;'n'
   750  007BD2  73                 	db	115	;'s'
   751  007BD3  69                 	db	105	;'i'
   752  007BD4  76                 	db	118	;'v'
   753  007BD5  65                 	db	101	;'e'
   754  007BD6  2E                 	db	46
   755  007BD7  00                 	db	0
   756  007BD8                     STR_24:
   757  007BD8  5B                 	db	91	;'['
   758  007BD9  49                 	db	73	;'I'
   759  007BDA  50                 	db	80	;'P'
   760  007BDB  76                 	db	118	;'v'
   761  007BDC  34                 	db	52	;'4'
   762  007BDD  5D                 	db	93	;']'
   763  007BDE  3A                 	db	58	;':'
   764  007BDF  20                 	db	32
   765  007BE0  41                 	db	65	;'A'
   766  007BE1  64                 	db	100	;'d'
   767  007BE2  64                 	db	100	;'d'
   768  007BE3  72                 	db	114	;'r'
   769  007BE4  65                 	db	101	;'e'
   770  007BE5  73                 	db	115	;'s'
   771  007BE6  73                 	db	115	;'s'
   772  007BE7  20                 	db	32
   773  007BE8  63                 	db	99	;'c'
   774  007BE9  6F                 	db	111	;'o'
   775  007BEA  6E                 	db	110	;'n'
   776  007BEB  66                 	db	102	;'f'
   777  007BEC  6C                 	db	108	;'l'
   778  007BED  69                 	db	105	;'i'
   779  007BEE  63                 	db	99	;'c'
   780  007BEF  74                 	db	116	;'t'
   781  007BF0  20                 	db	32
   782  007BF1  64                 	db	100	;'d'
   783  007BF2  65                 	db	101	;'e'
   784  007BF3  74                 	db	116	;'t'
   785  007BF4  65                 	db	101	;'e'
   786  007BF5  63                 	db	99	;'c'
   787  007BF6  74                 	db	116	;'t'
   788  007BF7  65                 	db	101	;'e'
   789  007BF8  64                 	db	100	;'d'
   790  007BF9  2E                 	db	46
   791  007BFA  0A                 	db	10
   792  007BFB  0D                 	db	13
   793  007BFC  00                 	db	0
   794  007BFD                     STR_25:
   795  007BFD  5B                 	db	91	;'['
   796  007BFE  49                 	db	73	;'I'
   797  007BFF  50                 	db	80	;'P'
   798  007C00  76                 	db	118	;'v'
   799  007C01  34                 	db	52	;'4'
   800  007C02  5D                 	db	93	;']'
   801  007C03  3A                 	db	58	;':'
   802  007C04  20                 	db	32
   803  007C05  53                 	db	83	;'S'
   804  007C06  65                 	db	101	;'e'
   805  007C07  74                 	db	116	;'t'
   806  007C08  74                 	db	116	;'t'
   807  007C09  69                 	db	105	;'i'
   808  007C0A  6E                 	db	110	;'n'
   809  007C0B  67                 	db	103	;'g'
   810  007C0C  20                 	db	32
   811  007C0D  49                 	db	73	;'I'
   812  007C0E  50                 	db	80	;'P'
   813  007C0F  76                 	db	118	;'v'
   814  007C10  34                 	db	52	;'4'
   815  007C11  20                 	db	32
   816  007C12  53                 	db	83	;'S'
   817  007C13  72                 	db	114	;'r'
   818  007C14  63                 	db	99	;'c'
   819  007C15  20                 	db	32
   820  007C16  41                 	db	65	;'A'
   821  007C17  64                 	db	100	;'d'
   822  007C18  64                 	db	100	;'d'
   823  007C19  72                 	db	114	;'r'
   824  007C1A  65                 	db	101	;'e'
   825  007C1B  73                 	db	115	;'s'
   826  007C1C  73                 	db	115	;'s'
   827  007C1D  20                 	db	32
   828  007C1E  74                 	db	116	;'t'
   829  007C1F  6F                 	db	111	;'o'
   830  007C20  20                 	db	32
   831  007C21  00                 	db	0
   832  007C22                     STR_87:
   833  007C22  5B                 	db	91	;'['
   834  007C23  41                 	db	65	;'A'
   835  007C24  52                 	db	82	;'R'
   836  007C25  50                 	db	80	;'P'
   837  007C26  5D                 	db	93	;']'
   838  007C27  3A                 	db	58	;':'
   839  007C28  20                 	db	32
   840  007C29  4E                 	db	78	;'N'
   841  007C2A  6F                 	db	111	;'o'
   842  007C2B  62                 	db	98	;'b'
   843  007C2C  6F                 	db	111	;'o'
   844  007C2D  64                 	db	100	;'d'
   845  007C2E  79                 	db	121	;'y'
   846  007C2F  20                 	db	32
   847  007C30  61                 	db	97	;'a'
   848  007C31  6E                 	db	110	;'n'
   849  007C32  73                 	db	115	;'s'
   850  007C33  77                 	db	119	;'w'
   851  007C34  65                 	db	101	;'e'
   852  007C35  72                 	db	114	;'r'
   853  007C36  65                 	db	101	;'e'
   854  007C37  64                 	db	100	;'d'
   855  007C38  20                 	db	32
   856  007C39  74                 	db	116	;'t'
   857  007C3A  6F                 	db	111	;'o'
   858  007C3B  20                 	db	32
   859  007C3C  70                 	db	112	;'p'
   860  007C3D  72                 	db	114	;'r'
   861  007C3E  6F                 	db	111	;'o'
   862  007C3F  62                 	db	98	;'b'
   863  007C40  65                 	db	101	;'e'
   864  007C41  73                 	db	115	;'s'
   865  007C42  2E                 	db	46
   866  007C43  0A                 	db	10
   867  007C44  0D                 	db	13
   868  007C45  00                 	db	0
   869  007C46                     STR_89:
   870  007C46  5B                 	db	91	;'['
   871  007C47  41                 	db	65	;'A'
   872  007C48  52                 	db	82	;'R'
   873  007C49  50                 	db	80	;'P'
   874  007C4A  5D                 	db	93	;']'
   875  007C4B  3A                 	db	58	;':'
   876  007C4C  20                 	db	32
   877  007C4D  41                 	db	65	;'A'
   878  007C4E  6E                 	db	110	;'n'
   879  007C4F  20                 	db	32
   880  007C50  75                 	db	117	;'u'
   881  007C51  6E                 	db	110	;'n'
   882  007C52  6B                 	db	107	;'k'
   883  007C53  6E                 	db	110	;'n'
   884  007C54  6F                 	db	111	;'o'
   885  007C55  77                 	db	119	;'w'
   886  007C56  6E                 	db	110	;'n'
   887  007C57  20                 	db	32
   888  007C58  65                 	db	101	;'e'
   889  007C59  72                 	db	114	;'r'
   890  007C5A  72                 	db	114	;'r'
   891  007C5B  6F                 	db	111	;'o'
   892  007C5C  72                 	db	114	;'r'
   893  007C5D  20                 	db	32
   894  007C5E  6F                 	db	111	;'o'
   895  007C5F  63                 	db	99	;'c'
   896  007C60  63                 	db	99	;'c'
   897  007C61  75                 	db	117	;'u'
   898  007C62  72                 	db	114	;'r'
   899  007C63  65                 	db	101	;'e'
   900  007C64  64                 	db	100	;'d'
   901  007C65  2E                 	db	46
   902  007C66  0A                 	db	10
   903  007C67  0D                 	db	13
   904  007C68  00                 	db	0
   905  007C69                     STR_86:
   906  007C69  5B                 	db	91	;'['
   907  007C6A  41                 	db	65	;'A'
   908  007C6B  52                 	db	82	;'R'
   909  007C6C  50                 	db	80	;'P'
   910  007C6D  5D                 	db	93	;']'
   911  007C6E  3A                 	db	58	;':'
   912  007C6F  20                 	db	32
   913  007C70  43                 	db	67	;'C'
   914  007C71  6F                 	db	111	;'o'
   915  007C72  6E                 	db	110	;'n'
   916  007C73  66                 	db	102	;'f'
   917  007C74  6C                 	db	108	;'l'
   918  007C75  69                 	db	105	;'i'
   919  007C76  63                 	db	99	;'c'
   920  007C77  74                 	db	116	;'t'
   921  007C78  20                 	db	32
   922  007C79  64                 	db	100	;'d'
   923  007C7A  75                 	db	117	;'u'
   924  007C7B  72                 	db	114	;'r'
   925  007C7C  69                 	db	105	;'i'
   926  007C7D  6E                 	db	110	;'n'
   927  007C7E  67                 	db	103	;'g'
   928  007C7F  20                 	db	32
   929  007C80  70                 	db	112	;'p'
   930  007C81  72                 	db	114	;'r'
   931  007C82  6F                 	db	111	;'o'
   932  007C83  62                 	db	98	;'b'
   933  007C84  69                 	db	105	;'i'
   934  007C85  6E                 	db	110	;'n'
   935  007C86  67                 	db	103	;'g'
   936  007C87  2E                 	db	46
   937  007C88  0A                 	db	10
   938  007C89  0D                 	db	13
   939  007C8A  00                 	db	0
   940  007C8B                     STR_59:
   941  007C8B  49                 	db	73	;'I'
   942  007C8C  50                 	db	80	;'P'
   943  007C8D  20                 	db	32
   944  007C8E  61                 	db	97	;'a'
   945  007C8F  64                 	db	100	;'d'
   946  007C90  64                 	db	100	;'d'
   947  007C91  72                 	db	114	;'r'
   948  007C92  65                 	db	101	;'e'
   949  007C93  73                 	db	115	;'s'
   950  007C94  73                 	db	115	;'s'
   951  007C95  20                 	db	32
   952  007C96  63                 	db	99	;'c'
   953  007C97  6F                 	db	111	;'o'
   954  007C98  75                 	db	117	;'u'
   955  007C99  6C                 	db	108	;'l'
   956  007C9A  64                 	db	100	;'d'
   957  007C9B  20                 	db	32
   958  007C9C  6E                 	db	110	;'n'
   959  007C9D  6F                 	db	111	;'o'
   960  007C9E  74                 	db	116	;'t'
   961  007C9F  20                 	db	32
   962  007CA0  62                 	db	98	;'b'
   963  007CA1  65                 	db	101	;'e'
   964  007CA2  20                 	db	32
   965  007CA3  72                 	db	114	;'r'
   966  007CA4  65                 	db	101	;'e'
   967  007CA5  73                 	db	115	;'s'
   968  007CA6  6F                 	db	111	;'o'
   969  007CA7  6C                 	db	108	;'l'
   970  007CA8  76                 	db	118	;'v'
   971  007CA9  65                 	db	101	;'e'
   972  007CAA  64                 	db	100	;'d'
   973  007CAB  2E                 	db	46
   974  007CAC  00                 	db	0
   975  007CAD                     STR_113:
   976  007CAD  5B                 	db	91	;'['
   977  007CAE  49                 	db	73	;'I'
   978  007CAF  50                 	db	80	;'P'
   979  007CB0  76                 	db	118	;'v'
   980  007CB1  34                 	db	52	;'4'
   981  007CB2  5D                 	db	93	;']'
   982  007CB3  3A                 	db	58	;':'
   983  007CB4  20                 	db	32
   984  007CB5  41                 	db	65	;'A'
   985  007CB6  52                 	db	82	;'R'
   986  007CB7  50                 	db	80	;'P'
   987  007CB8  20                 	db	32
   988  007CB9  70                 	db	112	;'p'
   989  007CBA  72                 	db	114	;'r'
   990  007CBB  6F                 	db	111	;'o'
   991  007CBC  63                 	db	99	;'c'
   992  007CBD  65                 	db	101	;'e'
   993  007CBE  73                 	db	115	;'s'
   994  007CBF  73                 	db	115	;'s'
   995  007CC0  20                 	db	32
   996  007CC1  63                 	db	99	;'c'
   997  007CC2  6F                 	db	111	;'o'
   998  007CC3  6D                 	db	109	;'m'
   999  007CC4  70                 	db	112	;'p'
  1000  007CC5  6C                 	db	108	;'l'
  1001  007CC6  65                 	db	101	;'e'
  1002  007CC7  74                 	db	116	;'t'
  1003  007CC8  65                 	db	101	;'e'
  1004  007CC9  64                 	db	100	;'d'
  1005  007CCA  2E                 	db	46
  1006  007CCB  0A                 	db	10
  1007  007CCC  0D                 	db	13
  1008  007CCD  00                 	db	0
  1009  007CCE                     STR_91:
  1010  007CCE  5B                 	db	91	;'['
  1011  007CCF  41                 	db	65	;'A'
  1012  007CD0  52                 	db	82	;'R'
  1013  007CD1  50                 	db	80	;'P'
  1014  007CD2  5D                 	db	93	;']'
  1015  007CD3  3A                 	db	58	;':'
  1016  007CD4  20                 	db	32
  1017  007CD5  41                 	db	65	;'A'
  1018  007CD6  6C                 	db	108	;'l'
  1019  007CD7  6C                 	db	108	;'l'
  1020  007CD8  20                 	db	32
  1021  007CD9  61                 	db	97	;'a'
  1022  007CDA  6E                 	db	110	;'n'
  1023  007CDB  6E                 	db	110	;'n'
  1024  007CDC  6F                 	db	111	;'o'
  1025  007CDD  75                 	db	117	;'u'
  1026  007CDE  6E                 	db	110	;'n'
  1027  007CDF  63                 	db	99	;'c'
  1028  007CE0  65                 	db	101	;'e'
  1029  007CE1  6D                 	db	109	;'m'
  1030  007CE2  65                 	db	101	;'e'
  1031  007CE3  6E                 	db	110	;'n'
  1032  007CE4  74                 	db	116	;'t'
  1033  007CE5  73                 	db	115	;'s'
  1034  007CE6  20                 	db	32
  1035  007CE7  73                 	db	115	;'s'
  1036  007CE8  65                 	db	101	;'e'
  1037  007CE9  6E                 	db	110	;'n'
  1038  007CEA  74                 	db	116	;'t'
  1039  007CEB  2E                 	db	46
  1040  007CEC  0A                 	db	10
  1041  007CED  0D                 	db	13
  1042  007CEE  00                 	db	0
  1043  007CEF                     STR_42:
  1044  007CEF  5B                 	db	91	;'['
  1045  007CF0  49                 	db	73	;'I'
  1046  007CF1  50                 	db	80	;'P'
  1047  007CF2  76                 	db	118	;'v'
  1048  007CF3  34                 	db	52	;'4'
  1049  007CF4  5D                 	db	93	;']'
  1050  007CF5  3A                 	db	58	;':'
  1051  007CF6  20                 	db	32
  1052  007CF7  41                 	db	65	;'A'
  1053  007CF8  20                 	db	32
  1054  007CF9  70                 	db	112	;'p'
  1055  007CFA  61                 	db	97	;'a'
  1056  007CFB  63                 	db	99	;'c'
  1057  007CFC  6B                 	db	107	;'k'
  1058  007CFD  65                 	db	101	;'e'
  1059  007CFE  74                 	db	116	;'t'
  1060  007CFF  20                 	db	32
  1061  007D00  77                 	db	119	;'w'
  1062  007D01  61                 	db	97	;'a'
  1063  007D02  73                 	db	115	;'s'
  1064  007D03  20                 	db	32
  1065  007D04  70                 	db	112	;'p'
  1066  007D05  72                 	db	114	;'r'
  1067  007D06  65                 	db	101	;'e'
  1068  007D07  70                 	db	112	;'p'
  1069  007D08  61                 	db	97	;'a'
  1070  007D09  72                 	db	114	;'r'
  1071  007D0A  65                 	db	101	;'e'
  1072  007D0B  64                 	db	100	;'d'
  1073  007D0C  20                 	db	32
  1074  007D0D  28                 	db	40
  1075  007D0E  00                 	db	0
  1076  007D0F                     STR_92:
  1077  007D0F  5B                 	db	91	;'['
  1078  007D10  41                 	db	65	;'A'
  1079  007D11  52                 	db	82	;'R'
  1080  007D12  50                 	db	80	;'P'
  1081  007D13  5D                 	db	93	;']'
  1082  007D14  3A                 	db	58	;':'
  1083  007D15  20                 	db	32
  1084  007D16  4E                 	db	78	;'N'
  1085  007D17  65                 	db	101	;'e'
  1086  007D18  77                 	db	119	;'w'
  1087  007D19  20                 	db	32
  1088  007D1A  65                 	db	101	;'e'
  1089  007D1B  6E                 	db	110	;'n'
  1090  007D1C  74                 	db	116	;'t'
  1091  007D1D  72                 	db	114	;'r'
  1092  007D1E  79                 	db	121	;'y'
  1093  007D1F  20                 	db	32
  1094  007D20  63                 	db	99	;'c'
  1095  007D21  72                 	db	114	;'r'
  1096  007D22  65                 	db	101	;'e'
  1097  007D23  61                 	db	97	;'a'
  1098  007D24  74                 	db	116	;'t'
  1099  007D25  65                 	db	101	;'e'
  1100  007D26  64                 	db	100	;'d'
  1101  007D27  20                 	db	32
  1102  007D28  66                 	db	102	;'f'
  1103  007D29  6F                 	db	111	;'o'
  1104  007D2A  72                 	db	114	;'r'
  1105  007D2B  20                 	db	32
  1106  007D2C  00                 	db	0
  1107  007D2D                     STR_53:
  1108  007D2D  20                 	db	32
  1109  007D2E  45                 	db	69	;'E'
  1110  007D2F  54                 	db	84	;'T'
  1111  007D30  48                 	db	72	;'H'
  1112  007D31  45                 	db	69	;'E'
  1113  007D32  52                 	db	82	;'R'
  1114  007D33  4E                 	db	78	;'N'
  1115  007D34  45                 	db	69	;'E'
  1116  007D35  54                 	db	84	;'T'
  1117  007D36  20                 	db	32
  1118  007D37  43                 	db	67	;'C'
  1119  007D38  4F                 	db	79	;'O'
  1120  007D39  4E                 	db	78	;'N'
  1121  007D3A  54                 	db	84	;'T'
  1122  007D3B  52                 	db	82	;'R'
  1123  007D3C  4F                 	db	79	;'O'
  1124  007D3D  4C                 	db	76	;'L'
  1125  007D3E  4C                 	db	76	;'L'
  1126  007D3F  45                 	db	69	;'E'
  1127  007D40  52                 	db	82	;'R'
  1128  007D41  20                 	db	32
  1129  007D42  4D                 	db	77	;'M'
  1130  007D43  4F                 	db	79	;'O'
  1131  007D44  44                 	db	68	;'D'
  1132  007D45  55                 	db	85	;'U'
  1133  007D46  4C                 	db	76	;'L'
  1134  007D47  45                 	db	69	;'E'
  1135  007D48  3A                 	db	58	;':'
  1136  007D49  20                 	db	32
  1137  007D4A  00                 	db	0
  1138  007D4B                     STR_60:
  1139  007D4B  41                 	db	65	;'A'
  1140  007D4C  6E                 	db	110	;'n'
  1141  007D4D  20                 	db	32
  1142  007D4E  75                 	db	117	;'u'
  1143  007D4F  6E                 	db	110	;'n'
  1144  007D50  6B                 	db	107	;'k'
  1145  007D51  6E                 	db	110	;'n'
  1146  007D52  6F                 	db	111	;'o'
  1147  007D53  77                 	db	119	;'w'
  1148  007D54  6E                 	db	110	;'n'
  1149  007D55  20                 	db	32
  1150  007D56  65                 	db	101	;'e'
  1151  007D57  72                 	db	114	;'r'
  1152  007D58  72                 	db	114	;'r'
  1153  007D59  6F                 	db	111	;'o'
  1154  007D5A  72                 	db	114	;'r'
  1155  007D5B  20                 	db	32
  1156  007D5C  68                 	db	104	;'h'
  1157  007D5D  61                 	db	97	;'a'
  1158  007D5E  73                 	db	115	;'s'
  1159  007D5F  20                 	db	32
  1160  007D60  6F                 	db	111	;'o'
  1161  007D61  63                 	db	99	;'c'
  1162  007D62  63                 	db	99	;'c'
  1163  007D63  75                 	db	117	;'u'
  1164  007D64  72                 	db	114	;'r'
  1165  007D65  65                 	db	101	;'e'
  1166  007D66  64                 	db	100	;'d'
  1167  007D67  2E                 	db	46
  1168  007D68  00                 	db	0
  1169  007D69                     STR_49:
  1170  007D69  63                 	db	99	;'c'
  1171  007D6A  6F                 	db	111	;'o'
  1172  007D6B  6E                 	db	110	;'n'
  1173  007D6C  6E                 	db	110	;'n'
  1174  007D6D  65                 	db	101	;'e'
  1175  007D6E  63                 	db	99	;'c'
  1176  007D6F  74                 	db	116	;'t'
  1177  007D70  69                 	db	105	;'i'
  1178  007D71  6F                 	db	111	;'o'
  1179  007D72  6E                 	db	110	;'n'
  1180  007D73  20                 	db	32
  1181  007D74  69                 	db	105	;'i'
  1182  007D75  73                 	db	115	;'s'
  1183  007D76  20                 	db	32
  1184  007D77  48                 	db	72	;'H'
  1185  007D78  61                 	db	97	;'a'
  1186  007D79  6C                 	db	108	;'l'
  1187  007D7A  66                 	db	102	;'f'
  1188  007D7B  20                 	db	32
  1189  007D7C  44                 	db	68	;'D'
  1190  007D7D  75                 	db	117	;'u'
  1191  007D7E  70                 	db	112	;'p'
  1192  007D7F  6C                 	db	108	;'l'
  1193  007D80  65                 	db	101	;'e'
  1194  007D81  78                 	db	120	;'x'
  1195  007D82  2E                 	db	46
  1196  007D83  0A                 	db	10
  1197  007D84  0D                 	db	13
  1198  007D85  00                 	db	0
  1199  007D86                     STR_50:
  1200  007D86  63                 	db	99	;'c'
  1201  007D87  6F                 	db	111	;'o'
  1202  007D88  6E                 	db	110	;'n'
  1203  007D89  6E                 	db	110	;'n'
  1204  007D8A  65                 	db	101	;'e'
  1205  007D8B  63                 	db	99	;'c'
  1206  007D8C  74                 	db	116	;'t'
  1207  007D8D  69                 	db	105	;'i'
  1208  007D8E  6F                 	db	111	;'o'
  1209  007D8F  6E                 	db	110	;'n'
  1210  007D90  20                 	db	32
  1211  007D91  69                 	db	105	;'i'
  1212  007D92  73                 	db	115	;'s'
  1213  007D93  20                 	db	32
  1214  007D94  46                 	db	70	;'F'
  1215  007D95  75                 	db	117	;'u'
  1216  007D96  6C                 	db	108	;'l'
  1217  007D97  6C                 	db	108	;'l'
  1218  007D98  20                 	db	32
  1219  007D99  44                 	db	68	;'D'
  1220  007D9A  75                 	db	117	;'u'
  1221  007D9B  70                 	db	112	;'p'
  1222  007D9C  6C                 	db	108	;'l'
  1223  007D9D  65                 	db	101	;'e'
  1224  007D9E  78                 	db	120	;'x'
  1225  007D9F  2E                 	db	46
  1226  007DA0  0A                 	db	10
  1227  007DA1  0D                 	db	13
  1228  007DA2  00                 	db	0
  1229  007DA3                     STR_100:
  1230  007DA3  5B                 	db	91	;'['
  1231  007DA4  49                 	db	73	;'I'
  1232  007DA5  50                 	db	80	;'P'
  1233  007DA6  76                 	db	118	;'v'
  1234  007DA7  34                 	db	52	;'4'
  1235  007DA8  5D                 	db	93	;']'
  1236  007DA9  3A                 	db	58	;':'
  1237  007DAA  20                 	db	32
  1238  007DAB  54                 	db	84	;'T'
  1239  007DAC  72                 	db	114	;'r'
  1240  007DAD  79                 	db	121	;'y'
  1241  007DAE  69                 	db	105	;'i'
  1242  007DAF  6E                 	db	110	;'n'
  1243  007DB0  67                 	db	103	;'g'
  1244  007DB1  20                 	db	32
  1245  007DB2  74                 	db	116	;'t'
  1246  007DB3  6F                 	db	111	;'o'
  1247  007DB4  20                 	db	32
  1248  007DB5  72                 	db	114	;'r'
  1249  007DB6  65                 	db	101	;'e'
  1250  007DB7  73                 	db	115	;'s'
  1251  007DB8  6F                 	db	111	;'o'
  1252  007DB9  6C                 	db	108	;'l'
  1253  007DBA  76                 	db	118	;'v'
  1254  007DBB  65                 	db	101	;'e'
  1255  007DBC  20                 	db	32
  1256  007DBD  00                 	db	0
  1257  007DBE                     STR_22:
  1258  007DBE  5B                 	db	91	;'['
  1259  007DBF  49                 	db	73	;'I'
  1260  007DC0  50                 	db	80	;'P'
  1261  007DC1  76                 	db	118	;'v'
  1262  007DC2  34                 	db	52	;'4'
  1263  007DC3  5D                 	db	93	;']'
  1264  007DC4  3A                 	db	58	;':'
  1265  007DC5  20                 	db	32
  1266  007DC6  46                 	db	70	;'F'
  1267  007DC7  61                 	db	97	;'a'
  1268  007DC8  69                 	db	105	;'i'
  1269  007DC9  6C                 	db	108	;'l'
  1270  007DCA  65                 	db	101	;'e'
  1271  007DCB  64                 	db	100	;'d'
  1272  007DCC  20                 	db	32
  1273  007DCD  74                 	db	116	;'t'
  1274  007DCE  6F                 	db	111	;'o'
  1275  007DCF  20                 	db	32
  1276  007DD0  72                 	db	114	;'r'
  1277  007DD1  65                 	db	101	;'e'
  1278  007DD2  73                 	db	115	;'s'
  1279  007DD3  6F                 	db	111	;'o'
  1280  007DD4  6C                 	db	108	;'l'
  1281  007DD5  76                 	db	118	;'v'
  1282  007DD6  65                 	db	101	;'e'
  1283  007DD7  20                 	db	32
  1284  007DD8  00                 	db	0
  1285  007DD9                     STR_81:
  1286  007DD9  5B                 	db	91	;'['
  1287  007DDA  41                 	db	65	;'A'
  1288  007DDB  52                 	db	82	;'R'
  1289  007DDC  50                 	db	80	;'P'
  1290  007DDD  5D                 	db	93	;']'
  1291  007DDE  3A                 	db	58	;':'
  1292  007DDF  20                 	db	32
  1293  007DE0  53                 	db	83	;'S'
  1294  007DE1  65                 	db	101	;'e'
  1295  007DE2  6E                 	db	110	;'n'
  1296  007DE3  64                 	db	100	;'d'
  1297  007DE4  69                 	db	105	;'i'
  1298  007DE5  6E                 	db	110	;'n'
  1299  007DE6  67                 	db	103	;'g'
  1300  007DE7  20                 	db	32
  1301  007DE8  50                 	db	80	;'P'
  1302  007DE9  72                 	db	114	;'r'
  1303  007DEA  6F                 	db	111	;'o'
  1304  007DEB  62                 	db	98	;'b'
  1305  007DEC  65                 	db	101	;'e'
  1306  007DED  20                 	db	32
  1307  007DEE  66                 	db	102	;'f'
  1308  007DEF  6F                 	db	111	;'o'
  1309  007DF0  72                 	db	114	;'r'
  1310  007DF1  20                 	db	32
  1311  007DF2  00                 	db	0
  1312  007DF3                     STR_31:
  1313  007DF3  46                 	db	70	;'F'
  1314  007DF4  49                 	db	73	;'I'
  1315  007DF5  52                 	db	82	;'R'
  1316  007DF6  4D                 	db	77	;'M'
  1317  007DF7  57                 	db	87	;'W'
  1318  007DF8  41                 	db	65	;'A'
  1319  007DF9  52                 	db	82	;'R'
  1320  007DFA  45                 	db	69	;'E'
  1321  007DFB  20                 	db	32
  1322  007DFC  42                 	db	66	;'B'
  1323  007DFD  55                 	db	85	;'U'
  1324  007DFE  49                 	db	73	;'I'
  1325  007DFF  4C                 	db	76	;'L'
  1326  007E00  44                 	db	68	;'D'
  1327  007E01  20                 	db	32
  1328  007E02  44                 	db	68	;'D'
  1329  007E03  41                 	db	65	;'A'
  1330  007E04  54                 	db	84	;'T'
  1331  007E05  45                 	db	69	;'E'
  1332  007E06  20                 	db	32
  1333  007E07  49                 	db	73	;'I'
  1334  007E08  53                 	db	83	;'S'
  1335  007E09  20                 	db	32
  1336  007E0A  00                 	db	0
  1337  007E0B                     STR_37:
  1338  007E0B  53                 	db	83	;'S'
  1339  007E0C  6F                 	db	111	;'o'
  1340  007E0D  75                 	db	117	;'u'
  1341  007E0E  72                 	db	114	;'r'
  1342  007E0F  63                 	db	99	;'c'
  1343  007E10  65                 	db	101	;'e'
  1344  007E11  20                 	db	32
  1345  007E12  4D                 	db	77	;'M'
  1346  007E13  41                 	db	65	;'A'
  1347  007E14  43                 	db	67	;'C'
  1348  007E15  20                 	db	32
  1349  007E16  61                 	db	97	;'a'
  1350  007E17  64                 	db	100	;'d'
  1351  007E18  64                 	db	100	;'d'
  1352  007E19  72                 	db	114	;'r'
  1353  007E1A  65                 	db	101	;'e'
  1354  007E1B  73                 	db	115	;'s'
  1355  007E1C  73                 	db	115	;'s'
  1356  007E1D  20                 	db	32
  1357  007E1E  69                 	db	105	;'i'
  1358  007E1F  73                 	db	115	;'s'
  1359  007E20  20                 	db	32
  1360  007E21  00                 	db	0
  1361  007E22                     STR_48:
  1362  007E22  53                 	db	83	;'S'
  1363  007E23  70                 	db	112	;'p'
  1364  007E24  65                 	db	101	;'e'
  1365  007E25  65                 	db	101	;'e'
  1366  007E26  64                 	db	100	;'d'
  1367  007E27  20                 	db	32
  1368  007E28  69                 	db	105	;'i'
  1369  007E29  73                 	db	115	;'s'
  1370  007E2A  20                 	db	32
  1371  007E2B  31                 	db	49	;'1'
  1372  007E2C  30                 	db	48	;'0'
  1373  007E2D  30                 	db	48	;'0'
  1374  007E2E  20                 	db	32
  1375  007E2F  4D                 	db	77	;'M'
  1376  007E30  62                 	db	98	;'b'
  1377  007E31  70                 	db	112	;'p'
  1378  007E32  73                 	db	115	;'s'
  1379  007E33  2C                 	db	44
  1380  007E34  20                 	db	32
  1381  007E35  00                 	db	0
  1382  007E36                     STR_10:
  1383  007E36  5B                 	db	91	;'['
  1384  007E37  55                 	db	85	;'U'
  1385  007E38  6E                 	db	110	;'n'
  1386  007E39  6B                 	db	107	;'k'
  1387  007E3A  6E                 	db	110	;'n'
  1388  007E3B  6F                 	db	111	;'o'
  1389  007E3C  77                 	db	119	;'w'
  1390  007E3D  6E                 	db	110	;'n'
  1391  007E3E  20                 	db	32
  1392  007E3F  45                 	db	69	;'E'
  1393  007E40  74                 	db	116	;'t'
  1394  007E41  68                 	db	104	;'h'
  1395  007E42  65                 	db	101	;'e'
  1396  007E43  72                 	db	114	;'r'
  1397  007E44  54                 	db	84	;'T'
  1398  007E45  79                 	db	121	;'y'
  1399  007E46  70                 	db	112	;'p'
  1400  007E47  65                 	db	101	;'e'
  1401  007E48  5D                 	db	93	;']'
  1402  007E49  00                 	db	0
  1403  007E4A                     STR_112:
  1404  007E4A  5B                 	db	91	;'['
  1405  007E4B  49                 	db	73	;'I'
  1406  007E4C  4E                 	db	78	;'N'
  1407  007E4D  56                 	db	86	;'V'
  1408  007E4E  41                 	db	65	;'A'
  1409  007E4F  4C                 	db	76	;'L'
  1410  007E50  49                 	db	73	;'I'
  1411  007E51  44                 	db	68	;'D'
  1412  007E52  20                 	db	32
  1413  007E53  43                 	db	67	;'C'
  1414  007E54  48                 	db	72	;'H'
  1415  007E55  45                 	db	69	;'E'
  1416  007E56  43                 	db	67	;'C'
  1417  007E57  4B                 	db	75	;'K'
  1418  007E58  53                 	db	83	;'S'
  1419  007E59  55                 	db	85	;'U'
  1420  007E5A  4D                 	db	77	;'M'
  1421  007E5B  5D                 	db	93	;']'
  1422  007E5C  00                 	db	0
  1423  007E5D                     STR_47:
  1424  007E5D  53                 	db	83	;'S'
  1425  007E5E  70                 	db	112	;'p'
  1426  007E5F  65                 	db	101	;'e'
  1427  007E60  65                 	db	101	;'e'
  1428  007E61  64                 	db	100	;'d'
  1429  007E62  20                 	db	32
  1430  007E63  69                 	db	105	;'i'
  1431  007E64  73                 	db	115	;'s'
  1432  007E65  20                 	db	32
  1433  007E66  31                 	db	49	;'1'
  1434  007E67  30                 	db	48	;'0'
  1435  007E68  20                 	db	32
  1436  007E69  4D                 	db	77	;'M'
  1437  007E6A  62                 	db	98	;'b'
  1438  007E6B  70                 	db	112	;'p'
  1439  007E6C  73                 	db	115	;'s'
  1440  007E6D  2C                 	db	44
  1441  007E6E  20                 	db	32
  1442  007E6F  00                 	db	0
  1443  007E70                     STR_46:
  1444  007E70  4C                 	db	76	;'L'
  1445  007E71  69                 	db	105	;'i'
  1446  007E72  6E                 	db	110	;'n'
  1447  007E73  6B                 	db	107	;'k'
  1448  007E74  20                 	db	32
  1449  007E75  65                 	db	101	;'e'
  1450  007E76  73                 	db	115	;'s'
  1451  007E77  74                 	db	116	;'t'
  1452  007E78  61                 	db	97	;'a'
  1453  007E79  62                 	db	98	;'b'
  1454  007E7A  6C                 	db	108	;'l'
  1455  007E7B  69                 	db	105	;'i'
  1456  007E7C  73                 	db	115	;'s'
  1457  007E7D  68                 	db	104	;'h'
  1458  007E7E  65                 	db	101	;'e'
  1459  007E7F  64                 	db	100	;'d'
  1460  007E80  2E                 	db	46
  1461  007E81  20                 	db	32
  1462  007E82  00                 	db	0
  1463  007E83                     STR_54:
  1464  007E83  20                 	db	32
  1465  007E84  45                 	db	69	;'E'
  1466  007E85  54                 	db	84	;'T'
  1467  007E86  48                 	db	72	;'H'
  1468  007E87  45                 	db	69	;'E'
  1469  007E88  52                 	db	82	;'R'
  1470  007E89  4E                 	db	78	;'N'
  1471  007E8A  45                 	db	69	;'E'
  1472  007E8B  54                 	db	84	;'T'
  1473  007E8C  20                 	db	32
  1474  007E8D  4D                 	db	77	;'M'
  1475  007E8E  4F                 	db	79	;'O'
  1476  007E8F  44                 	db	68	;'D'
  1477  007E90  55                 	db	85	;'U'
  1478  007E91  4C                 	db	76	;'L'
  1479  007E92  45                 	db	69	;'E'
  1480  007E93  3A                 	db	58	;':'
  1481  007E94  20                 	db	32
  1482  007E95  00                 	db	0
  1483  007E96                     STR_65:
  1484  007E96  55                 	db	85	;'U'
  1485  007E97  6E                 	db	110	;'n'
  1486  007E98  6B                 	db	107	;'k'
  1487  007E99  6E                 	db	110	;'n'
  1488  007E9A  6F                 	db	111	;'o'
  1489  007E9B  77                 	db	119	;'w'
  1490  007E9C  6E                 	db	110	;'n'
  1491  007E9D  20                 	db	32
  1492  007E9E  45                 	db	69	;'E'
  1493  007E9F  74                 	db	116	;'t'
  1494  007EA0  68                 	db	104	;'h'
  1495  007EA1  65                 	db	101	;'e'
  1496  007EA2  72                 	db	114	;'r'
  1497  007EA3  54                 	db	84	;'T'
  1498  007EA4  79                 	db	121	;'y'
  1499  007EA5  70                 	db	112	;'p'
  1500  007EA6  65                 	db	101	;'e'
  1501  007EA7  00                 	db	0
  1502  007EA8                     STR_69:
  1503  007EA8  55                 	db	85	;'U'
  1504  007EA9  6E                 	db	110	;'n'
  1505  007EAA  6B                 	db	107	;'k'
  1506  007EAB  6E                 	db	110	;'n'
  1507  007EAC  6F                 	db	111	;'o'
  1508  007EAD  77                 	db	119	;'w'
  1509  007EAE  6E                 	db	110	;'n'
  1510  007EAF  20                 	db	32
  1511  007EB0  50                 	db	80	;'P'
  1512  007EB1  72                 	db	114	;'r'
  1513  007EB2  6F                 	db	111	;'o'
  1514  007EB3  74                 	db	116	;'t'
  1515  007EB4  6F                 	db	111	;'o'
  1516  007EB5  63                 	db	99	;'c'
  1517  007EB6  6F                 	db	111	;'o'
  1518  007EB7  6C                 	db	108	;'l'
  1519  007EB8  00                 	db	0
  1520  007EB9                     STR_52:
  1521  007EB9  20                 	db	32
  1522  007EBA  4D                 	db	77	;'M'
  1523  007EBB  45                 	db	69	;'E'
  1524  007EBC  4D                 	db	77	;'M'
  1525  007EBD  4F                 	db	79	;'O'
  1526  007EBE  52                 	db	82	;'R'
  1527  007EBF  59                 	db	89	;'Y'
  1528  007EC0  20                 	db	32
  1529  007EC1  4D                 	db	77	;'M'
  1530  007EC2  4F                 	db	79	;'O'
  1531  007EC3  44                 	db	68	;'D'
  1532  007EC4  55                 	db	85	;'U'
  1533  007EC5  4C                 	db	76	;'L'
  1534  007EC6  45                 	db	69	;'E'
  1535  007EC7  3A                 	db	58	;':'
  1536  007EC8  20                 	db	32
  1537  007EC9  00                 	db	0
  1538  007ECA                     STR_78:
  1539  007ECA  5B                 	db	91	;'['
  1540  007ECB  52                 	db	82	;'R'
  1541  007ECC  65                 	db	101	;'e'
  1542  007ECD  70                 	db	112	;'p'
  1543  007ECE  6C                 	db	108	;'l'
  1544  007ECF  79                 	db	121	;'y'
  1545  007ED0  20                 	db	32
  1546  007ED1  73                 	db	115	;'s'
  1547  007ED2  65                 	db	101	;'e'
  1548  007ED3  6E                 	db	110	;'n'
  1549  007ED4  74                 	db	116	;'t'
  1550  007ED5  20                 	db	32
  1551  007ED6  74                 	db	116	;'t'
  1552  007ED7  6F                 	db	111	;'o'
  1553  007ED8  20                 	db	32
  1554  007ED9  00                 	db	0
  1555  007EDA                     STR_5:
  1556  007EDA  5B                 	db	91	;'['
  1557  007EDB  53                 	db	83	;'S'
  1558  007EDC  79                 	db	121	;'y'
  1559  007EDD  6D                 	db	109	;'m'
  1560  007EDE  62                 	db	98	;'b'
  1561  007EDF  6F                 	db	111	;'o'
  1562  007EE0  6C                 	db	108	;'l'
  1563  007EE1  20                 	db	32
  1564  007EE2  45                 	db	69	;'E'
  1565  007EE3  72                 	db	114	;'r'
  1566  007EE4  72                 	db	114	;'r'
  1567  007EE5  6F                 	db	111	;'o'
  1568  007EE6  72                 	db	114	;'r'
  1569  007EE7  73                 	db	115	;'s'
  1570  007EE8  5D                 	db	93	;']'
  1571  007EE9  00                 	db	0
  1572  007EEA                     STR_77:
  1573  007EEA  5B                 	db	91	;'['
  1574  007EEB  49                 	db	73	;'I'
  1575  007EEC  73                 	db	115	;'s'
  1576  007EED  47                 	db	71	;'G'
  1577  007EEE  72                 	db	114	;'r'
  1578  007EEF  61                 	db	97	;'a'
  1579  007EF0  74                 	db	116	;'t'
  1580  007EF1  75                 	db	117	;'u'
  1581  007EF2  69                 	db	105	;'i'
  1582  007EF3  74                 	db	116	;'t'
  1583  007EF4  6F                 	db	111	;'o'
  1584  007EF5  75                 	db	117	;'u'
  1585  007EF6  73                 	db	115	;'s'
  1586  007EF7  5D                 	db	93	;']'
  1587  007EF8  00                 	db	0
  1588  007EF9                     STR_56:
  1589  007EF9  20                 	db	32
  1590  007EFA  49                 	db	73	;'I'
  1591  007EFB  50                 	db	80	;'P'
  1592  007EFC  76                 	db	118	;'v'
  1593  007EFD  34                 	db	52	;'4'
  1594  007EFE  20                 	db	32
  1595  007EFF  4D                 	db	77	;'M'
  1596  007F00  4F                 	db	79	;'O'
  1597  007F01  44                 	db	68	;'D'
  1598  007F02  55                 	db	85	;'U'
  1599  007F03  4C                 	db	76	;'L'
  1600  007F04  45                 	db	69	;'E'
  1601  007F05  3A                 	db	58	;':'
  1602  007F06  20                 	db	32
  1603  007F07  00                 	db	0
  1604  007F08                     STR_40:
  1605  007F08  4D                 	db	77	;'M'
  1606  007F09  79                 	db	121	;'y'
  1607  007F0A  20                 	db	32
  1608  007F0B  41                 	db	65	;'A'
  1609  007F0C  64                 	db	100	;'d'
  1610  007F0D  64                 	db	100	;'d'
  1611  007F0E  72                 	db	114	;'r'
  1612  007F0F  65                 	db	101	;'e'
  1613  007F10  73                 	db	115	;'s'
  1614  007F11  73                 	db	115	;'s'
  1615  007F12  20                 	db	32
  1616  007F13  69                 	db	105	;'i'
  1617  007F14  73                 	db	115	;'s'
  1618  007F15  20                 	db	32
  1619  007F16  00                 	db	0
  1620  007F17                     STR_55:
  1621  007F17  20                 	db	32
  1622  007F18  41                 	db	65	;'A'
  1623  007F19  52                 	db	82	;'R'
  1624  007F1A  50                 	db	80	;'P'
  1625  007F1B  20                 	db	32
  1626  007F1C  4D                 	db	77	;'M'
  1627  007F1D  4F                 	db	79	;'O'
  1628  007F1E  44                 	db	68	;'D'
  1629  007F1F  55                 	db	85	;'U'
  1630  007F20  4C                 	db	76	;'L'
  1631  007F21  45                 	db	69	;'E'
  1632  007F22  3A                 	db	58	;':'
  1633  007F23  20                 	db	32
  1634  007F24  00                 	db	0
  1635  007F25                     STR_45:
  1636  007F25  4C                 	db	76	;'L'
  1637  007F26  69                 	db	105	;'i'
  1638  007F27  6E                 	db	110	;'n'
  1639  007F28  6B                 	db	107	;'k'
  1640  007F29  20                 	db	32
  1641  007F2A  6C                 	db	108	;'l'
  1642  007F2B  6F                 	db	111	;'o'
  1643  007F2C  73                 	db	115	;'s'
  1644  007F2D  74                 	db	116	;'t'
  1645  007F2E  2E                 	db	46
  1646  007F2F  0A                 	db	10
  1647  007F30  0D                 	db	13
  1648  007F31  00                 	db	0
  1649  007F32                     STR_82:
  1650  007F32  20                 	db	32
  1651  007F33  28                 	db	40
  1652  007F34  72                 	db	114	;'r'
  1653  007F35  65                 	db	101	;'e'
  1654  007F36  70                 	db	112	;'p'
  1655  007F37  6C                 	db	108	;'l'
  1656  007F38  79                 	db	121	;'y'
  1657  007F39  20                 	db	32
  1658  007F3A  74                 	db	116	;'t'
  1659  007F3B  6F                 	db	111	;'o'
  1660  007F3C  20                 	db	32
  1661  007F3D  00                 	db	0
  1662  007F3E                     STR_36:
  1663  007F3E  20                 	db	32
  1664  007F3F  64                 	db	100	;'d'
  1665  007F40  65                 	db	101	;'e'
  1666  007F41  74                 	db	116	;'t'
  1667  007F42  65                 	db	101	;'e'
  1668  007F43  63                 	db	99	;'c'
  1669  007F44  74                 	db	116	;'t'
  1670  007F45  65                 	db	101	;'e'
  1671  007F46  64                 	db	100	;'d'
  1672  007F47  2E                 	db	46
  1673  007F48  20                 	db	32
  1674  007F49  00                 	db	0
  1675  007F4A                     STR_32:
  1676  007F4A  4D                 	db	77	;'M'
  1677  007F4B  61                 	db	97	;'a'
  1678  007F4C  72                 	db	114	;'r'
  1679  007F4D  20                 	db	32
  1680  007F4E  33                 	db	51	;'3'
  1681  007F4F  31                 	db	49	;'1'
  1682  007F50  20                 	db	32
  1683  007F51  32                 	db	50	;'2'
  1684  007F52  30                 	db	48	;'0'
  1685  007F53  31                 	db	49	;'1'
  1686  007F54  39                 	db	57	;'9'
  1687  007F55  00                 	db	0
  1688  007F56                     STR_3:
  1689  007F56  5B                 	db	91	;'['
  1690  007F57  42                 	db	66	;'B'
  1691  007F58  72                 	db	114	;'r'
  1692  007F59  6F                 	db	111	;'o'
  1693  007F5A  61                 	db	97	;'a'
  1694  007F5B  64                 	db	100	;'d'
  1695  007F5C  63                 	db	99	;'c'
  1696  007F5D  61                 	db	97	;'a'
  1697  007F5E  73                 	db	115	;'s'
  1698  007F5F  74                 	db	116	;'t'
  1699  007F60  5D                 	db	93	;']'
  1700  007F61  00                 	db	0
  1701  007F62                     STR_102:
  1702  007F62  5B                 	db	91	;'['
  1703  007F63  45                 	db	69	;'E'
  1704  007F64  78                 	db	120	;'x'
  1705  007F65  70                 	db	112	;'p'
  1706  007F66  65                 	db	101	;'e'
  1707  007F67  63                 	db	99	;'c'
  1708  007F68  74                 	db	116	;'t'
  1709  007F69  65                 	db	101	;'e'
  1710  007F6A  64                 	db	100	;'d'
  1711  007F6B  20                 	db	32
  1712  007F6C  00                 	db	0
  1713  007F6D                     STR_76:
  1714  007F6D  5B                 	db	91	;'['
  1715  007F6E  49                 	db	73	;'I'
  1716  007F6F  73                 	db	115	;'s'
  1717  007F70  50                 	db	80	;'P'
  1718  007F71  72                 	db	114	;'r'
  1719  007F72  6F                 	db	111	;'o'
  1720  007F73  62                 	db	98	;'b'
  1721  007F74  65                 	db	101	;'e'
  1722  007F75  5D                 	db	93	;']'
  1723  007F76  00                 	db	0
  1724  007F77                     STR_4:
  1725  007F77  5B                 	db	91	;'['
  1726  007F78  55                 	db	85	;'U'
  1727  007F79  6E                 	db	110	;'n'
  1728  007F7A  69                 	db	105	;'i'
  1729  007F7B  63                 	db	99	;'c'
  1730  007F7C  61                 	db	97	;'a'
  1731  007F7D  73                 	db	115	;'s'
  1732  007F7E  74                 	db	116	;'t'
  1733  007F7F  5D                 	db	93	;']'
  1734  007F80  00                 	db	0
  1735  007F81                     STR_97:
  1736  007F81  5B                 	db	91	;'['
  1737  007F82  49                 	db	73	;'I'
  1738  007F83  50                 	db	80	;'P'
  1739  007F84  76                 	db	118	;'v'
  1740  007F85  34                 	db	52	;'4'
  1741  007F86  5D                 	db	93	;']'
  1742  007F87  3A                 	db	58	;':'
  1743  007F88  20                 	db	32
  1744  007F89  00                 	db	0
  1745  007F8A                     STR_61:
  1746  007F8A  20                 	db	32
  1747  007F8B  28                 	db	40
  1748  007F8C  43                 	db	67	;'C'
  1749  007F8D  6F                 	db	111	;'o'
  1750  007F8E  64                 	db	100	;'d'
  1751  007F8F  65                 	db	101	;'e'
  1752  007F90  3A                 	db	58	;':'
  1753  007F91  20                 	db	32
  1754  007F92  00                 	db	0
  1755  007F93                     STR_34:
  1756  007F93  32                 	db	50	;'2'
  1757  007F94  32                 	db	50	;'2'
  1758  007F95  3A                 	db	58	;':'
  1759  007F96  30                 	db	48	;'0'
  1760  007F97  30                 	db	48	;'0'
  1761  007F98  3A                 	db	58	;':'
  1762  007F99  33                 	db	51	;'3'
  1763  007F9A  36                 	db	54	;'6'
  1764  007F9B  00                 	db	0
  1765  007F9C                     STR_98:
  1766  007F9C  20                 	db	32
  1767  007F9D  69                 	db	105	;'i'
  1768  007F9E  73                 	db	115	;'s'
  1769  007F9F  20                 	db	32
  1770  007FA0  61                 	db	97	;'a'
  1771  007FA1  74                 	db	116	;'t'
  1772  007FA2  20                 	db	32
  1773  007FA3  00                 	db	0
  1774  007FA4                     STR_51:
  1775  007FA4  5B                 	db	91	;'['
  1776  007FA5  45                 	db	69	;'E'
  1777  007FA6  52                 	db	82	;'R'
  1778  007FA7  52                 	db	82	;'R'
  1779  007FA8  4F                 	db	79	;'O'
  1780  007FA9  52                 	db	82	;'R'
  1781  007FAA  5D                 	db	93	;']'
  1782  007FAB  00                 	db	0
  1783  007FAC                     STR_103:
  1784  007FAC  2C                 	db	44
  1785  007FAD  20                 	db	32
  1786  007FAE  67                 	db	103	;'g'
  1787  007FAF  6F                 	db	111	;'o'
  1788  007FB0  74                 	db	116	;'t'
  1789  007FB1  20                 	db	32
  1790  007FB2  00                 	db	0
  1791  007FB3                     STR_9:
  1792  007FB3  5B                 	db	91	;'['
  1793  007FB4  49                 	db	73	;'I'
  1794  007FB5  50                 	db	80	;'P'
  1795  007FB6  76                 	db	118	;'v'
  1796  007FB7  34                 	db	52	;'4'
  1797  007FB8  5D                 	db	93	;']'
  1798  007FB9  00                 	db	0
  1799  007FBA                     STR_8:
  1800  007FBA  5B                 	db	91	;'['
  1801  007FBB  41                 	db	65	;'A'
  1802  007FBC  52                 	db	82	;'R'
  1803  007FBD  50                 	db	80	;'P'
  1804  007FBE  5D                 	db	93	;']'
  1805  007FBF  00                 	db	0
  1806  007FC0                     STR_73:
  1807  007FC0  5D                 	db	93	;']'
  1808  007FC1  2D                 	db	45
  1809  007FC2  3E                 	db	62	;'>'
  1810  007FC3  5B                 	db	91	;'['
  1811  007FC4  00                 	db	0
  1812  007FC5                     STR_63:
  1813  007FC5  49                 	db	73	;'I'
  1814  007FC6  50                 	db	80	;'P'
  1815  007FC7  76                 	db	118	;'v'
  1816  007FC8  34                 	db	52	;'4'
  1817  007FC9  00                 	db	0
  1818  007FCA                     STR_66:
  1819  007FCA  49                 	db	73	;'I'
  1820  007FCB  43                 	db	67	;'C'
  1821  007FCC  4D                 	db	77	;'M'
  1822  007FCD  50                 	db	80	;'P'
  1823  007FCE  00                 	db	0
  1824  007FCF                     STR_62:
  1825  007FCF  29                 	db	41
  1826  007FD0  2E                 	db	46
  1827  007FD1  0A                 	db	10
  1828  007FD2  0D                 	db	13
  1829  007FD3  00                 	db	0
  1830  007FD4                     STR_43:
  1831  007FD4  20                 	db	32
  1832  007FD5  2D                 	db	45
  1833  007FD6  3E                 	db	62	;'>'
  1834  007FD7  20                 	db	32
  1835  007FD8  00                 	db	0
  1836  007FD9                     STR_14:
  1837  007FD9  5D                 	db	93	;']'
  1838  007FDA  5B                 	db	91	;'['
  1839  007FDB  4C                 	db	76	;'L'
  1840  007FDC  3D                 	db	61	;'='
  1841  007FDD  00                 	db	0
  1842  007FDE                     STR_67:
  1843  007FDE  54                 	db	84	;'T'
  1844  007FDF  43                 	db	67	;'C'
  1845  007FE0  50                 	db	80	;'P'
  1846  007FE1  00                 	db	0
  1847  007FE2                     STR_68:
  1848  007FE2  55                 	db	85	;'U'
  1849  007FE3  44                 	db	68	;'D'
  1850  007FE4  50                 	db	80	;'P'
  1851  007FE5  00                 	db	0
  1852  007FE6                     STR_64:
  1853  007FE6  41                 	db	65	;'A'
  1854  007FE7  52                 	db	82	;'R'
  1855  007FE8  50                 	db	80	;'P'
  1856  007FE9  00                 	db	0
  1857  007FEA                     STR_44:
  1858  007FEA  29                 	db	41
  1859  007FEB  0A                 	db	10
  1860  007FEC  0D                 	db	13
  1861  007FED  00                 	db	0
  1862  007FEE                     STR_94:
  1863  007FEE  29                 	db	41
  1864  007FEF  20                 	db	32
  1865  007FF0  00                 	db	0
  1866  007FF1                     STR_15:
  1867  007FF1  5D                 	db	93	;']'
  1868  007FF2  20                 	db	32
  1869  007FF3  00                 	db	0
  1870  007FF4                     STR_12:
  1871  007FF4  2D                 	db	45
  1872  007FF5  3E                 	db	62	;'>'
  1873  007FF6  00                 	db	0
  1874  007FF7                     STR_13:
  1875  007FF7  5D                 	db	93	;']'
  1876  007FF8  5B                 	db	91	;'['
  1877  007FF9  00                 	db	0
  1878  007FFA                     STR_19:
  1879  007FFA  29                 	db	41
  1880  007FFB  5D                 	db	93	;']'
  1881  007FFC  00                 	db	0
  1882  007FFD                     STR_27:
  1883  007FFD  12                 	db	18
  1884  007FFE  00                 	db	0
  1885  0000                     
  1886                           ; #config settings
  1887  007FFF  00                 	db	0	; dummy byte at the end
  1888  0000                     
  1889                           	psect	cinit
  1890  0046C2                     __pcinit:
  1891                           	opt stack 0
  1892  0046C2                     start_initialization:
  1893                           	opt stack 0
  1894  0046C2                     __initialization:
  1895                           	opt stack 0
  1896                           
  1897                           ; Initialize objects allocated to BANK2 (46 bytes)
  1898                           ; load TBLPTR registers with __pidataBANK2
  1899  0046C2  0E5E               	movlw	low __pidataBANK2
  1900  0046C4  6EF6               	movwf	tblptrl,c
  1901  0046C6  0E53               	movlw	high __pidataBANK2
  1902  0046C8  6EF7               	movwf	tblptrh,c
  1903  0046CA  0E00               	movlw	low (__pidataBANK2 shr (0+16))
  1904  0046CC  6EF8               	movwf	tblptru,c
  1905  0046CE  EE02  F0D2         	lfsr	0,__pdataBANK2
  1906  0046D2  EE10 F02E          	lfsr	1,46
  1907  0046D6                     copy_data0:
  1908  0046D6  0009               	tblrd		*+
  1909  0046D8  CFF5 FFEE          	movff	tablat,postinc0
  1910  0046DC  50E5               	movf	postdec1,w,c
  1911  0046DE  50E1               	movf	fsr1l,w,c
  1912  0046E0  E1FA               	bnz	copy_data0
  1913                           
  1914                           ; Initialize objects allocated to COMRAM (6 bytes)
  1915                           ; load TBLPTR registers with __pidataCOMRAM
  1916  0046E2  0E46               	movlw	low __pidataCOMRAM
  1917  0046E4  6EF6               	movwf	tblptrl,c
  1918  0046E6  0E57               	movlw	high __pidataCOMRAM
  1919  0046E8  6EF7               	movwf	tblptrh,c
  1920  0046EA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1921  0046EC  6EF8               	movwf	tblptru,c
  1922  0046EE  EE00  F048         	lfsr	0,__pdataCOMRAM
  1923  0046F2  EE10 F006          	lfsr	1,6
  1924  0046F6                     copy_data1:
  1925  0046F6  0009               	tblrd		*+
  1926  0046F8  CFF5 FFEE          	movff	tablat,postinc0
  1927  0046FC  50E5               	movf	postdec1,w,c
  1928  0046FE  50E1               	movf	fsr1l,w,c
  1929  004700  E1FA               	bnz	copy_data1
  1930                           
  1931                           ; Clear objects allocated to BANK3 (162 bytes)
  1932  004702  EE03  F000         	lfsr	0,__pbssBANK3
  1933  004706  0EA2               	movlw	162
  1934  004708                     clear_0:
  1935  004708  6AEE               	clrf	postinc0,c
  1936  00470A  06E8               	decf	wreg,f,c
  1937  00470C  E1FD               	bnz	clear_0
  1938                           
  1939                           ; Clear objects allocated to BANK2 (210 bytes)
  1940  00470E  EE02  F000         	lfsr	0,__pbssBANK2
  1941  004712  0ED2               	movlw	210
  1942  004714                     clear_1:
  1943  004714  6AEE               	clrf	postinc0,c
  1944  004716  06E8               	decf	wreg,f,c
  1945  004718  E1FD               	bnz	clear_1
  1946                           
  1947                           ; Clear objects allocated to BANK1 (56 bytes)
  1948  00471A  EE01  F0C2         	lfsr	0,__pbssBANK1
  1949  00471E  0E38               	movlw	56
  1950  004720                     clear_2:
  1951  004720  6AEE               	clrf	postinc0,c
  1952  004722  06E8               	decf	wreg,f,c
  1953  004724  E1FD               	bnz	clear_2
  1954                           
  1955                           ; Clear objects allocated to BITCOMRAM (1 bytes)
  1956  004726  6A4E               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
  1957                           
  1958                           ; Clear objects allocated to COMRAM (31 bytes)
  1959  004728  EE00  F029         	lfsr	0,__pbssCOMRAM
  1960  00472C  0E1F               	movlw	31
  1961  00472E                     clear_3:
  1962  00472E  6AEE               	clrf	postinc0,c
  1963  004730  06E8               	decf	wreg,f,c
  1964  004732  E1FD               	bnz	clear_3
  1965  004734                     end_of_initialization:
  1966                           	opt stack 0
  1967  004734                     __end_of__initialization:
  1968                           	opt stack 0
  1969  004734  904F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1970  004736  924F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1971  004738  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1972  00473A  6EF8               	movwf	tblptru,c
  1973  00473C  0100               	movlb	0
  1974  00473E  EF6D  F005         	goto	_main	;jump to C main() function
  1975                           tblptru	equ	0xFF8
  1976                           tblptrh	equ	0xFF7
  1977                           tblptrl	equ	0xFF6
  1978                           tablat	equ	0xFF5
  1979                           postinc0	equ	0xFEE
  1980                           wreg	equ	0xFE8
  1981                           postdec1	equ	0xFE5
  1982                           fsr1l	equ	0xFE1
  1983                           
  1984                           	psect	bitbssCOMRAM
  1985  000270                     __pbitbssCOMRAM:
  1986                           	opt stack 0
  1987  000270                     _fSrcAddrChanged:
  1988                           	opt stack 0
  1989  000270                     	ds	1
  1990  000271                     	ds	1
  1991                           tblptru	equ	0xFF8
  1992                           tblptrh	equ	0xFF7
  1993                           tblptrl	equ	0xFF6
  1994                           tablat	equ	0xFF5
  1995                           postinc0	equ	0xFEE
  1996                           wreg	equ	0xFE8
  1997                           postdec1	equ	0xFE5
  1998                           fsr1l	equ	0xFE1
  1999                           
  2000                           	psect	bssCOMRAM
  2001  000029                     __pbssCOMRAM:
  2002                           	opt stack 0
  2003  000029                     _time:
  2004                           	opt stack 0
  2005  000029                     	ds	4
  2006  00002D                     buttonHandler@debounceCounter:
  2007                           	opt stack 0
  2008  00002D                     	ds	4
  2009  000031                     _numberToDisplay:
  2010                           	opt stack 0
  2011  000031                     	ds	4
  2012  000035                     ethernet_rxGetNewFrame@counter:
  2013                           	opt stack 0
  2014  000035                     	ds	4
  2015  000039                     sevenSegmentUpdate@digitsToDisplay:
  2016                           	opt stack 0
  2017  000039                     	ds	3
  2018  00003C                     _arpStatus:
  2019                           	opt stack 0
  2020  00003C                     	ds	2
  2021  00003E                     ethernetController_streamToTransmitBuffer@pointer:
  2022                           	opt stack 0
  2023  00003E                     	ds	2
  2024  000040                     ethernetController_softReset@F5989:
  2025                           	opt stack 0
  2026  000040                     	ds	2
  2027  000042                     _nextPacketPointer:
  2028                           	opt stack 0
  2029  000042                     	ds	2
  2030  000044                     sevenSegmentUpdate@digitPointer:
  2031                           	opt stack 0
  2032  000044                     	ds	1
  2033  000045                     buttonHandler@newState:
  2034                           	opt stack 0
  2035  000045                     	ds	1
  2036  000046                     buttonHandler@oldState:
  2037                           	opt stack 0
  2038  000046                     	ds	1
  2039  000047                     	ds	1
  2040                           tblptru	equ	0xFF8
  2041                           tblptrh	equ	0xFF7
  2042                           tblptrl	equ	0xFF6
  2043                           tablat	equ	0xFF5
  2044                           postinc0	equ	0xFEE
  2045                           wreg	equ	0xFE8
  2046                           postdec1	equ	0xFE5
  2047                           fsr1l	equ	0xFE1
  2048                           
  2049                           	psect	dataCOMRAM
  2050  000048                     __pdataCOMRAM:
  2051                           	opt stack 0
  2052  000048                     _randx:
  2053                           	opt stack 0
  2054  000048                     	ds	4
  2055  00004C                     ethernetController_softReset@F5987:
  2056                           	opt stack 0
  2057  00004C                     	ds	2
  2058                           tblptru	equ	0xFF8
  2059                           tblptrh	equ	0xFF7
  2060                           tblptrl	equ	0xFF6
  2061                           tablat	equ	0xFF5
  2062                           postinc0	equ	0xFEE
  2063                           wreg	equ	0xFE8
  2064                           postdec1	equ	0xFE5
  2065                           fsr1l	equ	0xFE1
  2066                           
  2067                           	psect	bssBANK1
  2068  0001C2                     __pbssBANK1:
  2069                           	opt stack 0
  2070  0001C2                     ipv4_sendFrame@oldTime:
  2071                           	opt stack 0
  2072  0001C2                     	ds	4
  2073  0001C6                     _ipPreliminarySource:
  2074                           	opt stack 0
  2075  0001C6                     	ds	4
  2076  0001CA                     arp_background@ipPreliminary:
  2077                           	opt stack 0
  2078  0001CA                     	ds	4
  2079  0001CE                     arp_gratuitous@timeStart:
  2080                           	opt stack 0
  2081  0001CE                     	ds	4
  2082  0001D2                     _ipSource:
  2083                           	opt stack 0
  2084  0001D2                     	ds	4
  2085  0001D6                     ipv4_sendFrame@failedResolveCounter:
  2086                           	opt stack 0
  2087  0001D6                     	ds	1
  2088  0001D7                     arp_background@state:
  2089                           	opt stack 0
  2090  0001D7                     	ds	1
  2091  0001D8                     arp_gratuitous@state:
  2092                           	opt stack 0
  2093  0001D8                     	ds	1
  2094  0001D9                     arp_gratuitous@announceCounter:
  2095                           	opt stack 0
  2096  0001D9                     	ds	1
  2097  0001DA                     arp_probe@state:
  2098                           	opt stack 0
  2099  0001DA                     	ds	1
  2100  0001DB                     arp_probe@probeCounter:
  2101                           	opt stack 0
  2102  0001DB                     	ds	1
  2103  0001DC                     hexToString@number:
  2104                           	opt stack 0
  2105  0001DC                     	ds	10
  2106  0001E6                     intToString@number:
  2107                           	opt stack 0
  2108  0001E6                     	ds	10
  2109  0001F0                     ethernetController_getRSV@temp:
  2110                           	opt stack 0
  2111  0001F0                     	ds	6
  2112  0001F6                     arp_background@err:
  2113                           	opt stack 0
  2114  0001F6                     	ds	3
  2115  0001F9                     _buttonState:
  2116                           	opt stack 0
  2117  0001F9                     	ds	1
  2118                           tblptru	equ	0xFF8
  2119                           tblptrh	equ	0xFF7
  2120                           tblptrl	equ	0xFF6
  2121                           tablat	equ	0xFF5
  2122                           postinc0	equ	0xFEE
  2123                           wreg	equ	0xFE8
  2124                           postdec1	equ	0xFE5
  2125                           fsr1l	equ	0xFE1
  2126                           
  2127                           	psect	bssBANK2
  2128  000200                     __pbssBANK2:
  2129                           	opt stack 0
  2130  000200                     _occupiedMemory:
  2131                           	opt stack 0
  2132  000200                     	ds	72
  2133  000248                     printEthernetState@oldState:
  2134                           	opt stack 0
  2135  000248                     	ds	15
  2136  000257                     _stack:
  2137                           	opt stack 0
  2138  000257                     	ds	123
  2139                           tblptru	equ	0xFF8
  2140                           tblptrh	equ	0xFF7
  2141                           tblptrl	equ	0xFF6
  2142                           tablat	equ	0xFF5
  2143                           postinc0	equ	0xFEE
  2144                           wreg	equ	0xFE8
  2145                           postdec1	equ	0xFE5
  2146                           fsr1l	equ	0xFE1
  2147                           
  2148                           	psect	dataBANK2
  2149  0002D2                     __pdataBANK2:
  2150                           	opt stack 0
  2151  0002D2                     macToString@F5947:
  2152                           	opt stack 0
  2153  0002D2                     	ds	18
  2154  0002E4                     _sevenSegCharacters:
  2155                           	opt stack 0
  2156  0002E4                     	ds	12
  2157  0002F0                     ipAdressToString@address:
  2158                           	opt stack 0
  2159  0002F0                     	ds	16
  2160                           tblptru	equ	0xFF8
  2161                           tblptrh	equ	0xFF7
  2162                           tblptrl	equ	0xFF6
  2163                           tablat	equ	0xFF5
  2164                           postinc0	equ	0xFEE
  2165                           wreg	equ	0xFE8
  2166                           postdec1	equ	0xFE5
  2167                           fsr1l	equ	0xFE1
  2168                           
  2169                           	psect	bssBANK3
  2170  000300                     __pbssBANK3:
  2171                           	opt stack 0
  2172  000300                     _arp_table:
  2173                           	opt stack 0
  2174  000300                     	ds	112
  2175  000370                     arpEntryToString@string:
  2176                           	opt stack 0
  2177  000370                     	ds	50
  2178                           tblptru	equ	0xFF8
  2179                           tblptrh	equ	0xFF7
  2180                           tblptrl	equ	0xFF6
  2181                           tablat	equ	0xFF5
  2182                           postinc0	equ	0xFEE
  2183                           wreg	equ	0xFE8
  2184                           postdec1	equ	0xFE5
  2185                           fsr1l	equ	0xFE1
  2186                           
  2187                           	psect	cstackBANK1
  2188  000100                     __pcstackBANK1:
  2189                           	opt stack 0
  2190  000100                     arp_sendRequest@ipSender:
  2191                           	opt stack 0
  2192  000100                     arp_sendReply@request:
  2193                           	opt stack 0
  2194                           
  2195                           ; 32 bytes @ 0x0
  2196  000100                     	ds	4
  2197  000104                     arp_sendRequest@ipTarget:
  2198                           	opt stack 0
  2199                           
  2200                           ; 4 bytes @ 0x4
  2201  000104                     	ds	4
  2202  000108                     arp_sendRequest@senderMAC:
  2203                           	opt stack 0
  2204                           
  2205                           ; 6 bytes @ 0x8
  2206  000108                     	ds	6
  2207  00010E                     arp_sendRequest@targetMAC:
  2208                           	opt stack 0
  2209                           
  2210                           ; 6 bytes @ 0xE
  2211  00010E                     	ds	6
  2212  000114                     arp_sendRequest@request:
  2213                           	opt stack 0
  2214                           
  2215                           ; 32 bytes @ 0x14
  2216  000114                     	ds	12
  2217  000120                     arp_sendReply@senderMAC:
  2218                           	opt stack 0
  2219                           
  2220                           ; 6 bytes @ 0x20
  2221  000120                     	ds	6
  2222  000126                     arp_sendReply@targetMAC:
  2223                           	opt stack 0
  2224                           
  2225                           ; 6 bytes @ 0x26
  2226  000126                     	ds	6
  2227  00012C                     arp_sendReply@senderIP:
  2228                           	opt stack 0
  2229                           
  2230                           ; 4 bytes @ 0x2C
  2231  00012C                     	ds	4
  2232  000130                     arp_sendReply@targetIP:
  2233                           	opt stack 0
  2234                           
  2235                           ; 4 bytes @ 0x30
  2236  000130                     	ds	4
  2237  000134                     ?_ipv4_sendFrame:
  2238                           	opt stack 0
  2239  000134                     ?_arp_probe:
  2240                           	opt stack 0
  2241  000134                     ?_arp_gratuitous:
  2242                           	opt stack 0
  2243  000134                     arp_sendReply@myIP:
  2244                           	opt stack 0
  2245  000134                     arp_probe@ipTarget:
  2246                           	opt stack 0
  2247  000134                     arp_gratuitous@ip:
  2248                           	opt stack 0
  2249  000134                     ipv4_sendFrame@ipPacket:
  2250                           	opt stack 0
  2251                           
  2252                           ; 66 bytes @ 0x34
  2253  000134                     	ds	4
  2254  000138                     arp_probe@link:
  2255                           	opt stack 0
  2256  000138                     arp_gratuitous@link:
  2257                           	opt stack 0
  2258  000138                     arp_sendReply@reply:
  2259                           	opt stack 0
  2260                           
  2261                           ; 32 bytes @ 0x38
  2262  000138                     	ds	1
  2263  000139                     ??_arp_probe:
  2264  000139                     ??_arp_gratuitous:
  2265                           
  2266                           ; 1 bytes @ 0x39
  2267  000139                     	ds	8
  2268  000141                     arp_probe@index:
  2269                           	opt stack 0
  2270                           
  2271                           ; 1 bytes @ 0x41
  2272  000141                     	ds	1
  2273  000142                     arp_probe@timeStart:
  2274                           	opt stack 0
  2275                           
  2276                           ; 4 bytes @ 0x42
  2277  000142                     	ds	4
  2278  000146                     arp_probe@waitingTime:
  2279                           	opt stack 0
  2280                           
  2281                           ; 4 bytes @ 0x46
  2282  000146                     	ds	4
  2283  00014A                     arp_probe@ipSender:
  2284                           	opt stack 0
  2285                           
  2286                           ; 4 bytes @ 0x4A
  2287  00014A                     	ds	4
  2288  00014E                     arp_probe@err:
  2289                           	opt stack 0
  2290                           
  2291                           ; 3 bytes @ 0x4E
  2292  00014E                     	ds	3
  2293  000151                     ?_arp_background:
  2294                           	opt stack 0
  2295                           
  2296                           ; 3 bytes @ 0x51
  2297  000151                     	ds	3
  2298  000154                     ??_arp_background:
  2299                           
  2300                           ; 1 bytes @ 0x54
  2301  000154                     	ds	2
  2302  000156                     arp_background@link:
  2303                           	opt stack 0
  2304                           
  2305                           ; 1 bytes @ 0x56
  2306  000156                     	ds	1
  2307  000157                     arp_background@errAnnounce:
  2308                           	opt stack 0
  2309                           
  2310                           ; 3 bytes @ 0x57
  2311  000157                     	ds	1
  2312  000158                     arp_handleNewPacket@arp:
  2313                           	opt stack 0
  2314                           
  2315                           ; 32 bytes @ 0x58
  2316  000158                     	ds	2
  2317  00015A                     arp_background@errProbe:
  2318                           	opt stack 0
  2319                           
  2320                           ; 3 bytes @ 0x5A
  2321  00015A                     	ds	28
  2322  000176                     ??_ipv4_sendFrame:
  2323                           
  2324                           ; 1 bytes @ 0x76
  2325  000176                     	ds	2
  2326  000178                     ethernet_rxGetNewFrame@frame:
  2327                           	opt stack 0
  2328                           
  2329                           ; 2 bytes @ 0x78
  2330  000178                     	ds	2
  2331  00017A                     ??_ethernet_rxGetNewFrame:
  2332                           
  2333                           ; 1 bytes @ 0x7A
  2334  00017A                     	ds	8
  2335  000182                     ethernet_rxGetNewFrame@err:
  2336                           	opt stack 0
  2337                           
  2338                           ; 3 bytes @ 0x82
  2339  000182                     	ds	3
  2340  000185                     handleStackBackgroundTasks@stack:
  2341                           	opt stack 0
  2342                           
  2343                           ; 2 bytes @ 0x85
  2344  000185                     	ds	2
  2345  000187                     ??_handleStackBackgroundTasks:
  2346                           
  2347                           ; 1 bytes @ 0x87
  2348  000187                     	ds	2
  2349  000189                     handleStackBackgroundTasks@errArp:
  2350                           	opt stack 0
  2351                           
  2352                           ; 3 bytes @ 0x89
  2353  000189                     	ds	3
  2354  00018C                     handleStackBackgroundTasks@intf:
  2355                           	opt stack 0
  2356                           
  2357                           ; 2 bytes @ 0x8C
  2358  00018C                     	ds	2
  2359  00018E                     handleStackBackgroundTasks@errIPv4:
  2360                           	opt stack 0
  2361                           
  2362                           ; 3 bytes @ 0x8E
  2363  00018E                     	ds	3
  2364  000191                     ??_main:
  2365                           
  2366                           ; 1 bytes @ 0x91
  2367  000191                     	ds	3
  2368  000194                     main@prescaler:
  2369                           	opt stack 0
  2370                           
  2371                           ; 4 bytes @ 0x94
  2372  000194                     	ds	4
  2373  000198                     main@headerBuf:
  2374                           	opt stack 0
  2375                           
  2376                           ; 32 bytes @ 0x98
  2377  000198                     	ds	32
  2378  0001B8                     _main$2404:
  2379                           	opt stack 0
  2380                           
  2381                           ; 2 bytes @ 0xB8
  2382  0001B8                     	ds	2
  2383  0001BA                     main@i:
  2384                           	opt stack 0
  2385                           
  2386                           ; 1 bytes @ 0xBA
  2387  0001BA                     	ds	1
  2388  0001BB                     main@err:
  2389                           	opt stack 0
  2390                           
  2391                           ; 3 bytes @ 0xBB
  2392  0001BB                     	ds	3
  2393  0001BE                     main@ipDst:
  2394                           	opt stack 0
  2395                           
  2396                           ; 4 bytes @ 0xBE
  2397  0001BE                     	ds	4
  2398                           tblptru	equ	0xFF8
  2399                           tblptrh	equ	0xFF7
  2400                           tblptrl	equ	0xFF6
  2401                           tablat	equ	0xFF5
  2402                           postinc0	equ	0xFEE
  2403                           wreg	equ	0xFE8
  2404                           postdec1	equ	0xFE5
  2405                           fsr1l	equ	0xFE1
  2406                           
  2407                           	psect	cstackBANK0
  2408  000060                     __pcstackBANK0:
  2409                           	opt stack 0
  2410  000060                     ?_enc424j600_getNextPacketPointer:
  2411                           	opt stack 0
  2412  000060                     ?_ethernetController_getDeviceName:
  2413                           	opt stack 0
  2414  000060                     ?_etherTypeToString:
  2415                           	opt stack 0
  2416  000060                     ?_ipProtocolToString:
  2417                           	opt stack 0
  2418  000060                     ?___wmul:
  2419                           	opt stack 0
  2420  000060                     ?___lwdiv:
  2421                           	opt stack 0
  2422  000060                     ?_getMillis:
  2423                           	opt stack 0
  2424  000060                     ?_ipv4_getIPSourceAddress:
  2425                           	opt stack 0
  2426  000060                     ?_ipv4_getPreliminaryIPSourceAddress:
  2427                           	opt stack 0
  2428  000060                     ?___lmul:
  2429                           	opt stack 0
  2430  000060                     ?___lldiv:
  2431                           	opt stack 0
  2432  000060                     ?___llmod:
  2433                           	opt stack 0
  2434  000060                     ?_enc424j600_updateReceiveStatusVector:
  2435                           	opt stack 0
  2436  000060                     ?_arp_getEntryFromTable:
  2437                           	opt stack 0
  2438  000060                     entireMemoryEmpty@i:
  2439                           	opt stack 0
  2440  000060                     entireMemoryFull@i:
  2441                           	opt stack 0
  2442  000060                     memory_txFrameClear@index:
  2443                           	opt stack 0
  2444  000060                     hexToChar@val:
  2445                           	opt stack 0
  2446  000060                     enc424j600_writeSPI@data:
  2447                           	opt stack 0
  2448  000060                     enc424j600_readSPI@data:
  2449                           	opt stack 0
  2450  000060                     enc424j600_setNextPacketPointer@ptr:
  2451                           	opt stack 0
  2452  000060                     enc424j600_updateReceiveStatusVector@rsv:
  2453                           	opt stack 0
  2454  000060                     mac_setToBroadcast@mac:
  2455                           	opt stack 0
  2456  000060                     mac_isAllZero@mac:
  2457                           	opt stack 0
  2458  000060                     mac_cmp@a:
  2459                           	opt stack 0
  2460  000060                     mac_setAllZero@mac:
  2461                           	opt stack 0
  2462  000060                     etherTypeToString@ethertype:
  2463                           	opt stack 0
  2464  000060                     ipv4_calculateHeaderChecksum@header:
  2465                           	opt stack 0
  2466  000060                     ipv4_SrcAddrChanged@err:
  2467                           	opt stack 0
  2468  000060                     ipv4_cmp@a:
  2469                           	opt stack 0
  2470  000060                     ipv4_isAllZero@ip:
  2471                           	opt stack 0
  2472  000060                     ipv4_setToAllZero@ip:
  2473                           	opt stack 0
  2474  000060                     ___wmul@multiplier:
  2475                           	opt stack 0
  2476  000060                     ___lwdiv@dividend:
  2477                           	opt stack 0
  2478  000060                     ipv4_setIPSourceAddress@ip:
  2479                           	opt stack 0
  2480  000060                     ___lmul@multiplier:
  2481                           	opt stack 0
  2482  000060                     ___lldiv@dividend:
  2483                           	opt stack 0
  2484  000060                     ___llmod@dividend:
  2485                           	opt stack 0
  2486  000060                     checkForOverlapSwitched@a:
  2487                           	opt stack 0
  2488  000060                     ipv4_writeHeaderIntoBuffer@header:
  2489                           	opt stack 0
  2490                           
  2491                           ; 23 bytes @ 0x0
  2492  000060                     	ds	1
  2493  000061                     ?_hexToString:
  2494                           	opt stack 0
  2495  000061                     hexToString@val:
  2496                           	opt stack 0
  2497                           
  2498                           ; 4 bytes @ 0x1
  2499  000061                     	ds	1
  2500  000062                     ??_enc424j600_writeSPI:
  2501  000062                     ??_enc424j600_readSPI:
  2502  000062                     ??_etherTypeToString:
  2503  000062                     ??_ipv4_calculateHeaderChecksum:
  2504  000062                     ?_ethernetController_getNextPacketPointer:
  2505                           	opt stack 0
  2506  000062                     mac_setToBroadcast@i:
  2507                           	opt stack 0
  2508  000062                     mac_isAllZero@i:
  2509                           	opt stack 0
  2510  000062                     mac_setAllZero@i:
  2511                           	opt stack 0
  2512  000062                     ipProtocolToString@protocol:
  2513                           	opt stack 0
  2514  000062                     ipv4_isAllZero@i:
  2515                           	opt stack 0
  2516  000062                     ipv4_setToAllZero@i:
  2517                           	opt stack 0
  2518  000062                     mac_cmp@b:
  2519                           	opt stack 0
  2520  000062                     ipv4_cmp@b:
  2521                           	opt stack 0
  2522  000062                     ___wmul@multiplicand:
  2523                           	opt stack 0
  2524  000062                     ___lwdiv@divisor:
  2525                           	opt stack 0
  2526  000062                     ethernetController_getDeviceName@string:
  2527                           	opt stack 0
  2528                           
  2529                           ; 11 bytes @ 0x2
  2530  000062                     	ds	2
  2531  000064                     ___lwdiv@counter:
  2532                           	opt stack 0
  2533  000064                     ___wmul@product:
  2534                           	opt stack 0
  2535  000064                     ___lmul@multiplicand:
  2536                           	opt stack 0
  2537  000064                     ___lldiv@divisor:
  2538                           	opt stack 0
  2539  000064                     ___llmod@divisor:
  2540                           	opt stack 0
  2541                           
  2542                           ; 4 bytes @ 0x4
  2543  000064                     	ds	1
  2544  000065                     ??_enc424j600_updateReceiveStatusVector:
  2545  000065                     ??_hexToString:
  2546  000065                     ___lwdiv@quotient:
  2547                           	opt stack 0
  2548                           
  2549                           ; 2 bytes @ 0x5
  2550  000065                     	ds	1
  2551  000066                     mac_cmp@i:
  2552                           	opt stack 0
  2553  000066                     ipv4_cmp@i:
  2554                           	opt stack 0
  2555  000066                     enc424j600_writeSPI@timeoutCounter:
  2556                           	opt stack 0
  2557  000066                     enc424j600_readSPI@timeoutCounter:
  2558                           	opt stack 0
  2559                           
  2560                           ; 4 bytes @ 0x6
  2561  000066                     	ds	1
  2562  000067                     arp_getEntryFromTable@index:
  2563                           	opt stack 0
  2564  000067                     arp_checkForEntry@ip:
  2565                           	opt stack 0
  2566                           
  2567                           ; 4 bytes @ 0x7
  2568  000067                     	ds	1
  2569  000068                     ___llmod@counter:
  2570                           	opt stack 0
  2571  000068                     ___lmul@product:
  2572                           	opt stack 0
  2573  000068                     ___lldiv@quotient:
  2574                           	opt stack 0
  2575                           
  2576                           ; 4 bytes @ 0x8
  2577  000068                     	ds	1
  2578  000069                     hexToString@pointer:
  2579                           	opt stack 0
  2580  000069                     checkForOverlapSwitched@b:
  2581                           	opt stack 0
  2582                           
  2583                           ; 9 bytes @ 0x9
  2584  000069                     	ds	1
  2585  00006A                     enc424j600_writeSingleByte@opcode:
  2586                           	opt stack 0
  2587  00006A                     enc424j600_writeControlRegisterUnbanked@data:
  2588                           	opt stack 0
  2589  00006A                     enc424j600_readControlRegisterUnbanked@data:
  2590                           	opt stack 0
  2591  00006A                     enc424j600_setGPDATAWritePointer@addr:
  2592                           	opt stack 0
  2593  00006A                     enc424j600_setERXDATAReadPointer@addr:
  2594                           	opt stack 0
  2595                           
  2596                           ; 2 bytes @ 0xA
  2597  00006A                     	ds	1
  2598  00006B                     arp_checkForEntry@index:
  2599                           	opt stack 0
  2600                           
  2601                           ; 2 bytes @ 0xB
  2602  00006B                     	ds	1
  2603  00006C                     ?_rand:
  2604                           	opt stack 0
  2605  00006C                     enc424j600_writeControlRegisterUnbanked@addr:
  2606                           	opt stack 0
  2607  00006C                     enc424j600_readControlRegisterUnbanked@addr:
  2608                           	opt stack 0
  2609  00006C                     enc424j600_setGPDATAWritePointer@opcode:
  2610                           	opt stack 0
  2611  00006C                     enc424j600_setERXDATAReadPointer@opcode:
  2612                           	opt stack 0
  2613  00006C                     ___lldiv@counter:
  2614                           	opt stack 0
  2615  00006C                     enc424j600_updateReceiveStatusVector@receiveStatusVector:
  2616                           	opt stack 0
  2617                           
  2618                           ; 5 bytes @ 0xC
  2619  00006C                     	ds	1
  2620  00006D                     ??_arp_checkForEntry:
  2621  00006D                     enc424j600_writeControlRegisterUnbanked@opcode:
  2622                           	opt stack 0
  2623  00006D                     enc424j600_readControlRegisterUnbanked@opcode:
  2624                           	opt stack 0
  2625  00006D                     enc424j600_setGPDATAWritePointer@lowByte:
  2626                           	opt stack 0
  2627  00006D                     enc424j600_setERXDATAReadPointer@lowByte:
  2628                           	opt stack 0
  2629  00006D                     ultoa@buf:
  2630                           	opt stack 0
  2631                           
  2632                           ; 2 bytes @ 0xD
  2633  00006D                     	ds	1
  2634  00006E                     ??_enc424j600_clearInterruptFlag:
  2635  00006E                     ?_enc424j600_getInterruptFlags:
  2636                           	opt stack 0
  2637  00006E                     ?___lwmod:
  2638                           	opt stack 0
  2639  00006E                     ?_ethernetController_softReset:
  2640                           	opt stack 0
  2641  00006E                     ?_ethernetController_checkDeviceId:
  2642                           	opt stack 0
  2643  00006E                     ?_ethernetController_getMacAddress:
  2644                           	opt stack 0
  2645  00006E                     ethernetController_setLEDConfig@conf:
  2646                           	opt stack 0
  2647  00006E                     enc424j600_getPacketCount@lowByte:
  2648                           	opt stack 0
  2649  00006E                     enc424j600_setGPDATAWritePointer@highByte:
  2650                           	opt stack 0
  2651  00006E                     enc424j600_setERXDATAReadPointer@highByte:
  2652                           	opt stack 0
  2653  00006E                     enc424j600_enableAutoMACInsertion@temp:
  2654                           	opt stack 0
  2655  00006E                     enc424j600_readPHYRegister@data:
  2656                           	opt stack 0
  2657  00006E                     enc424j600_setTXLength@len:
  2658                           	opt stack 0
  2659  00006E                     enc424j600_setTXStartAddress@addr:
  2660                           	opt stack 0
  2661  00006E                     enc424j600_setRXBufferStartAddress@addr:
  2662                           	opt stack 0
  2663  00006E                     enc424j600_setRXTailPointer@addr:
  2664                           	opt stack 0
  2665  00006E                     ___lwmod@dividend:
  2666                           	opt stack 0
  2667  00006E                     ipv4_calculateHeaderChecksum@sum:
  2668                           	opt stack 0
  2669                           
  2670                           ; 4 bytes @ 0xE
  2671  00006E                     	ds	1
  2672  00006F                     ??_ethernetController_updateNextPacketPointer:
  2673  00006F                     ?_ethernetController_getEtherTypeField:
  2674                           	opt stack 0
  2675  00006F                     ?_ethernetController_getSourceMACAddress:
  2676                           	opt stack 0
  2677  00006F                     ethernetController_setLEDConfig@LED:
  2678                           	opt stack 0
  2679  00006F                     ethernetController_writeEtherTypeFieldToBuffer@ethtype:
  2680                           	opt stack 0
  2681  00006F                     ethernetController_streamFromRXBuffer@startAddress:
  2682                           	opt stack 0
  2683  00006F                     ultoa@val:
  2684                           	opt stack 0
  2685  00006F                     ethernetController_writeDestinationMACAddress@addr:
  2686                           	opt stack 0
  2687  00006F                     ethernetController_streamToTransmitBuffer@field:
  2688                           	opt stack 0
  2689  00006F                     ethernetController_getSourceMACAddress@field:
  2690                           	opt stack 0
  2691  00006F                     ethernetController_getEtherTypeField@field:
  2692                           	opt stack 0
  2693                           
  2694                           ; 9 bytes @ 0xF
  2695  00006F                     	ds	1
  2696  000070                     ??_enc424j600_getInterruptFlags:
  2697  000070                     ??_enc424j600_readPHYRegister:
  2698  000070                     ethernetController_setLEDConfig@data:
  2699                           	opt stack 0
  2700  000070                     enc424j600_setTXLength@lowByte:
  2701                           	opt stack 0
  2702  000070                     enc424j600_setTXStartAddress@lowByte:
  2703                           	opt stack 0
  2704  000070                     enc424j600_setRXBufferStartAddress@lowByte:
  2705                           	opt stack 0
  2706  000070                     enc424j600_setRXTailPointer@lowByte:
  2707                           	opt stack 0
  2708  000070                     enc424j600_clearInterruptFlag@flag:
  2709                           	opt stack 0
  2710  000070                     ___lwmod@divisor:
  2711                           	opt stack 0
  2712                           
  2713                           ; 2 bytes @ 0x10
  2714  000070                     	ds	1
  2715  000071                     ??_ethernetController_softReset:
  2716  000071                     ?_ethernetController_getRSV:
  2717                           	opt stack 0
  2718  000071                     ethernetController_checkDeviceId@data:
  2719                           	opt stack 0
  2720  000071                     ethernetController_streamFromRXBuffer@startEnd:
  2721                           	opt stack 0
  2722  000071                     enc424j600_setTXLength@highByte:
  2723                           	opt stack 0
  2724  000071                     enc424j600_setTXStartAddress@highByte:
  2725                           	opt stack 0
  2726  000071                     enc424j600_setRXBufferStartAddress@highByte:
  2727                           	opt stack 0
  2728  000071                     enc424j600_setRXTailPointer@highByte:
  2729                           	opt stack 0
  2730  000071                     enc424j600_clearInterruptFlag@temp:
  2731                           	opt stack 0
  2732  000071                     ethernetController_getRSV@address:
  2733                           	opt stack 0
  2734  000071                     ethernetController_writeEtherTypeFieldToBuffer@field:
  2735                           	opt stack 0
  2736                           
  2737                           ; 9 bytes @ 0x11
  2738  000071                     	ds	1
  2739  000072                     ?_ethernetController_dropPacket:
  2740                           	opt stack 0
  2741  000072                     ethernetController_softReset@comFailCount:
  2742                           	opt stack 0
  2743  000072                     ethernetController_clearInterruptFlag@flag:
  2744                           	opt stack 0
  2745  000072                     ethernetController_streamFromRXBuffer@opcode:
  2746                           	opt stack 0
  2747  000072                     ___lwmod@counter:
  2748                           	opt stack 0
  2749  000072                     ethernetController_checkDeviceId@err:
  2750                           	opt stack 0
  2751  000072                     ethernetController_sendPacket@field:
  2752                           	opt stack 0
  2753  000072                     checkForOverlap@a:
  2754                           	opt stack 0
  2755                           
  2756                           ; 9 bytes @ 0x12
  2757  000072                     	ds	1
  2758  000073                     ?_ipAdressToString:
  2759                           	opt stack 0
  2760  000073                     ethernetController_streamFromRXBuffer@temp:
  2761                           	opt stack 0
  2762  000073                     ethernetController_softReset@dataToSend:
  2763                           	opt stack 0
  2764  000073                     ultoa@base:
  2765                           	opt stack 0
  2766  000073                     ipAdressToString@ip:
  2767                           	opt stack 0
  2768                           
  2769                           ; 4 bytes @ 0x13
  2770  000073                     	ds	1
  2771  000074                     ?_ipv4_parseHeader:
  2772                           	opt stack 0
  2773  000074                     ?_arp_parseFromRXBuffer:
  2774                           	opt stack 0
  2775  000074                     arp_parseFromRXBuffer@frame:
  2776                           	opt stack 0
  2777  000074                     ipv4_parseHeader@field:
  2778                           	opt stack 0
  2779  000074                     ethernetController_getMacAddress@mac:
  2780                           	opt stack 0
  2781                           
  2782                           ; 6 bytes @ 0x14
  2783  000074                     	ds	1
  2784  000075                     arp_checkForEntry@i:
  2785                           	opt stack 0
  2786  000075                     ethernetController_softReset@receivedData:
  2787                           	opt stack 0
  2788  000075                     ethernetController_updateNextPacketPointer@nextPktPointer:
  2789                           	opt stack 0
  2790  000075                     ultoa@v:
  2791                           	opt stack 0
  2792  000075                     ethernetController_writeDestinationMACAddress@field:
  2793                           	opt stack 0
  2794                           
  2795                           ; 9 bytes @ 0x15
  2796  000075                     	ds	1
  2797  000076                     ethernetController_getRSV@opcode:
  2798                           	opt stack 0
  2799  000076                     enc424j600_readPHYRegister@addr:
  2800                           	opt stack 0
  2801  000076                     enc424j600_getInterruptFlags@low:
  2802                           	opt stack 0
  2803                           
  2804                           ; 1 bytes @ 0x16
  2805  000076                     	ds	1
  2806  000077                     ??_ipAdressToString:
  2807  000077                     ethernetController_getRSV@i:
  2808                           	opt stack 0
  2809  000077                     ethernetController_updateNextPacketPointer@opcode:
  2810                           	opt stack 0
  2811  000077                     enc424j600_readPHYRegister@PHYaddress:
  2812                           	opt stack 0
  2813  000077                     enc424j600_getInterruptFlags@high:
  2814                           	opt stack 0
  2815  000077                     ipv4_writeHeaderIntoBuffer@ptr:
  2816                           	opt stack 0
  2817  000077                     ethernetController_softReset@err:
  2818                           	opt stack 0
  2819                           
  2820                           ; 3 bytes @ 0x17
  2821  000077                     	ds	1
  2822  000078                     ??_ethernetController_streamToTransmitBuffer:
  2823  000078                     ??_ethernetController_getEtherTypeField:
  2824  000078                     ?_ethernetController_pollInterruptFlags:
  2825                           	opt stack 0
  2826  000078                     ethernetController_getSourceMACAddress@opcode:
  2827                           	opt stack 0
  2828  000078                     ethernetController_updateNextPacketPointer@newPointerL:
  2829                           	opt stack 0
  2830  000078                     enc424j600_readPHYRegister@unusedBits:
  2831                           	opt stack 0
  2832                           
  2833                           ; 1 bytes @ 0x18
  2834  000078                     	ds	1
  2835  000079                     ??_ipv4_writeHeaderIntoBuffer:
  2836  000079                     ethernetController_updateNextPacketPointer@newPointerH:
  2837                           	opt stack 0
  2838  000079                     ultoa@c:
  2839                           	opt stack 0
  2840  000079                     enc424j600_readPHYRegister@timeoutCounter:
  2841                           	opt stack 0
  2842  000079                     ethernetController_getSourceMACAddress@sourceAddress:
  2843                           	opt stack 0
  2844                           
  2845                           ; 6 bytes @ 0x19
  2846  000079                     	ds	1
  2847  00007A                     ??_ethernetController_pollInterruptFlags:
  2848  00007A                     ?_macToString:
  2849                           	opt stack 0
  2850  00007A                     ?_ethernetController_init:
  2851                           	opt stack 0
  2852  00007A                     ethernetController_writeEtherTypeFieldToBuffer@lowByte:
  2853                           	opt stack 0
  2854  00007A                     ltoa@buf:
  2855                           	opt stack 0
  2856  00007A                     srand@x:
  2857                           	opt stack 0
  2858  00007A                     macToString@addr:
  2859                           	opt stack 0
  2860                           
  2861                           ; 6 bytes @ 0x1A
  2862  00007A                     	ds	1
  2863  00007B                     ethernetController_writeEtherTypeFieldToBuffer@highByte:
  2864                           	opt stack 0
  2865  00007B                     ipAdressToString@ones:
  2866                           	opt stack 0
  2867  00007B                     checkForOverlap@b:
  2868                           	opt stack 0
  2869                           
  2870                           ; 9 bytes @ 0x1B
  2871  00007B                     	ds	1
  2872  00007C                     ethernetController_streamToTransmitBuffer@data:
  2873                           	opt stack 0
  2874  00007C                     ethernetController_writeEtherTypeFieldToBuffer@opcode:
  2875                           	opt stack 0
  2876  00007C                     ethernetController_getEtherTypeField@ethertype:
  2877                           	opt stack 0
  2878  00007C                     ltoa@val:
  2879                           	opt stack 0
  2880                           
  2881                           ; 4 bytes @ 0x1C
  2882  00007C                     	ds	1
  2883  00007D                     ethernetController_streamToTransmitBuffer@opcode:
  2884                           	opt stack 0
  2885  00007D                     enc424j600_readPHYRegister@lowByte:
  2886                           	opt stack 0
  2887  00007D                     ethernetController_init@err:
  2888                           	opt stack 0
  2889                           
  2890                           ; 3 bytes @ 0x1D
  2891  00007D                     	ds	1
  2892  00007E                     ethernetController_getEtherTypeField@opcode:
  2893                           	opt stack 0
  2894  00007E                     enc424j600_readPHYRegister@highByte:
  2895                           	opt stack 0
  2896  00007E                     ethernetController_pollInterruptFlags@flags:
  2897                           	opt stack 0
  2898  00007E                     ethernetController_writeDestinationMACAddress@data:
  2899                           	opt stack 0
  2900  00007E                     ipv4_streamToTransmissionBuffer@packet:
  2901                           	opt stack 0
  2902                           
  2903                           ; 66 bytes @ 0x1E
  2904  00007E                     	ds	1
  2905  00007F                     ethernetController_getSourceMACAddress@temp:
  2906                           	opt stack 0
  2907  00007F                     ethernetController_getEtherTypeField@lowByte:
  2908                           	opt stack 0
  2909  00007F                     enc424j600_readPHYRegister@temp:
  2910                           	opt stack 0
  2911  00007F                     ipAdressToString@tens:
  2912                           	opt stack 0
  2913                           
  2914                           ; 4 bytes @ 0x1F
  2915  00007F                     	ds	1
  2916  000080                     ??_macToString:
  2917  000080                     ethernetController_getSourceMACAddress@i:
  2918                           	opt stack 0
  2919  000080                     ethernetController_getEtherTypeField@highByte:
  2920                           	opt stack 0
  2921  000080                     ethernetController_pollInterruptFlags@reg:
  2922                           	opt stack 0
  2923  000080                     ethernetController_updateLinkStatus@state:
  2924                           	opt stack 0
  2925  000080                     ltoa@base:
  2926                           	opt stack 0
  2927                           
  2928                           ; 2 bytes @ 0x20
  2929  000080                     	ds	1
  2930  000081                     macToString@address:
  2931                           	opt stack 0
  2932                           
  2933                           ; 18 bytes @ 0x21
  2934  000081                     	ds	1
  2935  000082                     ethernetController_updateLinkStatus@temp:
  2936                           	opt stack 0
  2937  000082                     ltoa@cp:
  2938                           	opt stack 0
  2939                           
  2940                           ; 2 bytes @ 0x22
  2941  000082                     	ds	1
  2942  000083                     ethernetController_updateLinkStatus@temp16:
  2943                           	opt stack 0
  2944  000083                     ipAdressToString@hundreds:
  2945                           	opt stack 0
  2946                           
  2947                           ; 4 bytes @ 0x23
  2948  000083                     	ds	1
  2949  000084                     ?_intToString:
  2950                           	opt stack 0
  2951  000084                     ?_memory_txFrameRequest:
  2952                           	opt stack 0
  2953  000084                     ethernetController_writeDestinationMACAddress@opcode:
  2954                           	opt stack 0
  2955  000084                     memory_txFrameRequest@length:
  2956                           	opt stack 0
  2957  000084                     intToString@val:
  2958                           	opt stack 0
  2959                           
  2960                           ; 4 bytes @ 0x24
  2961  000084                     	ds	1
  2962  000085                     ethernetController_writeDestinationMACAddress@i_638:
  2963                           	opt stack 0
  2964                           
  2965                           ; 1 bytes @ 0x25
  2966  000085                     	ds	1
  2967  000086                     ethernetController_writeDestinationMACAddress@i:
  2968                           	opt stack 0
  2969                           
  2970                           ; 1 bytes @ 0x26
  2971  000086                     	ds	1
  2972  000087                     ipAdressToString@pointer:
  2973                           	opt stack 0
  2974                           
  2975                           ; 1 bytes @ 0x27
  2976  000087                     	ds	1
  2977  000088                     ipAdressToString@i:
  2978                           	opt stack 0
  2979                           
  2980                           ; 1 bytes @ 0x28
  2981  000088                     	ds	3
  2982  00008B                     ??_ipv4_parseHeader:
  2983                           
  2984                           ; 1 bytes @ 0x2B
  2985  00008B                     	ds	1
  2986  00008C                     ipv4_parseHeader@i:
  2987                           	opt stack 0
  2988                           
  2989                           ; 1 bytes @ 0x2C
  2990  00008C                     	ds	1
  2991  00008D                     ??_memory_txFrameRequest:
  2992  00008D                     ipv4_parseHeader@i_3666:
  2993                           	opt stack 0
  2994                           
  2995                           ; 1 bytes @ 0x2D
  2996  00008D                     	ds	1
  2997  00008E                     ipv4_parseHeader@temp:
  2998                           	opt stack 0
  2999                           
  3000                           ; 1 bytes @ 0x2E
  3001  00008E                     	ds	1
  3002  00008F                     ipv4_parseHeader@ip:
  3003                           	opt stack 0
  3004                           
  3005                           ; 23 bytes @ 0x2F
  3006  00008F                     	ds	4
  3007  000093                     macToString@firstDigit:
  3008                           	opt stack 0
  3009  000093                     _memory_txFrameRequest$1174:
  3010                           	opt stack 0
  3011                           
  3012                           ; 2 bytes @ 0x33
  3013  000093                     	ds	1
  3014  000094                     ??_arp_parseFromRXBuffer:
  3015  000094                     macToString@secondDigit:
  3016                           	opt stack 0
  3017                           
  3018                           ; 1 bytes @ 0x34
  3019  000094                     	ds	1
  3020  000095                     memory_txFrameRequest@fNoOverlapMarker:
  3021                           	opt stack 0
  3022  000095                     macToString@i:
  3023                           	opt stack 0
  3024                           
  3025                           ; 2 bytes @ 0x35
  3026  000095                     	ds	1
  3027  000096                     memory_txFrameRequest@i:
  3028                           	opt stack 0
  3029                           
  3030                           ; 1 bytes @ 0x36
  3031  000096                     	ds	1
  3032  000097                     memory_txFrameRequest@i_1178:
  3033                           	opt stack 0
  3034  000097                     macToString@j:
  3035                           	opt stack 0
  3036  000097                     arp_parseFromRXBuffer@i:
  3037                           	opt stack 0
  3038                           
  3039                           ; 1 bytes @ 0x37
  3040  000097                     	ds	1
  3041  000098                     arp_parseFromRXBuffer@i_3033:
  3042                           	opt stack 0
  3043  000098                     UARTTransmitText@str:
  3044                           	opt stack 0
  3045  000098                     memory_txFrameRequest@field:
  3046                           	opt stack 0
  3047                           
  3048                           ; 9 bytes @ 0x38
  3049  000098                     	ds	1
  3050  000099                     arp_parseFromRXBuffer@i_3034:
  3051                           	opt stack 0
  3052                           
  3053                           ; 1 bytes @ 0x39
  3054  000099                     	ds	1
  3055  00009A                     ?_ipv4_background:
  3056                           	opt stack 0
  3057  00009A                     arp_parseFromRXBuffer@i_3035:
  3058                           	opt stack 0
  3059  00009A                     ipv4_checkHeaderChecksum@header:
  3060                           	opt stack 0
  3061  00009A                     printErrorMessage@err:
  3062                           	opt stack 0
  3063  00009A                     UARTTransmitInt@val:
  3064                           	opt stack 0
  3065  00009A                     arp_setNewEntry@mac:
  3066                           	opt stack 0
  3067  00009A                     printEthernetState@state:
  3068                           	opt stack 0
  3069                           
  3070                           ; 15 bytes @ 0x3A
  3071  00009A                     	ds	1
  3072  00009B                     arp_parseFromRXBuffer@offset:
  3073                           	opt stack 0
  3074                           
  3075                           ; 2 bytes @ 0x3B
  3076  00009B                     	ds	1
  3077  00009C                     ??_ipv4_checkHeaderChecksum:
  3078                           
  3079                           ; 1 bytes @ 0x3C
  3080  00009C                     	ds	1
  3081  00009D                     ??_ipv4_background:
  3082  00009D                     ??_printErrorMessage:
  3083  00009D                     arp_parseFromRXBuffer@arp:
  3084                           	opt stack 0
  3085                           
  3086                           ; 32 bytes @ 0x3D
  3087  00009D                     	ds	1
  3088  00009E                     ipv4_checkHeaderChecksum@testHeader:
  3089                           	opt stack 0
  3090                           
  3091                           ; 23 bytes @ 0x3E
  3092  00009E                     	ds	1
  3093  00009F                     ipv4_background@err:
  3094                           	opt stack 0
  3095                           
  3096                           ; 3 bytes @ 0x3F
  3097  00009F                     	ds	1
  3098  0000A0                     arp_setNewEntry@ip:
  3099                           	opt stack 0
  3100                           
  3101                           ; 4 bytes @ 0x40
  3102  0000A0                     	ds	1
  3103  0000A1                     memory_txFrameRequest@freeIndex:
  3104                           	opt stack 0
  3105                           
  3106                           ; 1 bytes @ 0x41
  3107  0000A1                     	ds	1
  3108  0000A2                     ethernet_txFrameRequest@frame:
  3109                           	opt stack 0
  3110                           
  3111                           ; 2 bytes @ 0x42
  3112  0000A2                     	ds	2
  3113  0000A4                     ethernet_txFrameRequest@err:
  3114                           	opt stack 0
  3115  0000A4                     arp_setNewEntry@timestamp:
  3116                           	opt stack 0
  3117                           
  3118                           ; 4 bytes @ 0x44
  3119  0000A4                     	ds	3
  3120  0000A7                     ipv4_txFrameRequest@packet:
  3121                           	opt stack 0
  3122  0000A7                     arp_send@arp:
  3123                           	opt stack 0
  3124                           
  3125                           ; 32 bytes @ 0x47
  3126  0000A7                     	ds	1
  3127  0000A8                     
  3128                           ; 1 bytes @ 0x48
  3129  0000A8                     	ds	1
  3130  0000A9                     ??_ipv4_txFrameRequest:
  3131                           
  3132                           ; 1 bytes @ 0x49
  3133  0000A9                     	ds	3
  3134  0000AC                     arp_setNewEntry@maxSeconds:
  3135                           	opt stack 0
  3136                           
  3137                           ; 4 bytes @ 0x4C
  3138  0000AC                     	ds	4
  3139  0000B0                     arp_setNewEntry@oldestIndex:
  3140                           	opt stack 0
  3141                           
  3142                           ; 1 bytes @ 0x50
  3143  0000B0                     	ds	1
  3144  0000B1                     arp_setNewEntry@i:
  3145                           	opt stack 0
  3146                           
  3147                           ; 1 bytes @ 0x51
  3148  0000B1                     	ds	1
  3149  0000B2                     arp_init@mac:
  3150                           	opt stack 0
  3151                           
  3152                           ; 6 bytes @ 0x52
  3153  0000B2                     	ds	3
  3154  0000B5                     ipv4_handleNewPacket@frame:
  3155                           	opt stack 0
  3156                           
  3157                           ; 2 bytes @ 0x55
  3158  0000B5                     	ds	2
  3159  0000B7                     ??_ipv4_handleNewPacket:
  3160                           
  3161                           ; 1 bytes @ 0x57
  3162  0000B7                     	ds	1
  3163  0000B8                     arp_init@ip:
  3164                           	opt stack 0
  3165                           
  3166                           ; 4 bytes @ 0x58
  3167  0000B8                     	ds	1
  3168  0000B9                     ipv4_handleNewPacket@headerField:
  3169                           	opt stack 0
  3170                           
  3171                           ; 9 bytes @ 0x59
  3172  0000B9                     	ds	3
  3173  0000BC                     arp_init@i:
  3174                           	opt stack 0
  3175                           
  3176                           ; 1 bytes @ 0x5C
  3177  0000BC                     	ds	1
  3178  0000BD                     
  3179                           ; 1 bytes @ 0x5D
  3180  0000BD                     	ds	3
  3181  0000C0                     ipv4_streamToTransmissionBuffer@ethernetPacketLength:
  3182                           	opt stack 0
  3183                           
  3184                           ; 2 bytes @ 0x60
  3185  0000C0                     	ds	2
  3186  0000C2                     ipv4_streamToTransmissionBuffer@data:
  3187                           	opt stack 0
  3188  0000C2                     ipv4_handleNewPacket@ip:
  3189                           	opt stack 0
  3190                           
  3191                           ; 23 bytes @ 0x62
  3192  0000C2                     	ds	5
  3193  0000C7                     arp_send@destination:
  3194                           	opt stack 0
  3195                           
  3196                           ; 6 bytes @ 0x67
  3197  0000C7                     	ds	6
  3198  0000CD                     arp_send@i:
  3199                           	opt stack 0
  3200                           
  3201                           ; 1 bytes @ 0x6D
  3202  0000CD                     	ds	1
  3203  0000CE                     arp_send@i_3108:
  3204                           	opt stack 0
  3205                           
  3206                           ; 1 bytes @ 0x6E
  3207  0000CE                     	ds	1
  3208  0000CF                     arp_send@i_3109:
  3209                           	opt stack 0
  3210                           
  3211                           ; 1 bytes @ 0x6F
  3212  0000CF                     	ds	1
  3213  0000D0                     arp_send@i_3110:
  3214                           	opt stack 0
  3215                           
  3216                           ; 1 bytes @ 0x70
  3217  0000D0                     	ds	1
  3218  0000D1                     arp_send@ethFrame:
  3219                           	opt stack 0
  3220                           
  3221                           ; 34 bytes @ 0x71
  3222  0000D1                     	ds	34
  3223  0000F3                     arp_send@field:
  3224                           	opt stack 0
  3225                           
  3226                           ; 9 bytes @ 0x93
  3227  0000F3                     	ds	9
  3228  0000FC                     arp_gratuitous@index:
  3229                           	opt stack 0
  3230  0000FC                     ipv4_sendFrame@index:
  3231                           	opt stack 0
  3232  0000FC                     arp_handleNewPacket@frame:
  3233                           	opt stack 0
  3234                           
  3235                           ; 2 bytes @ 0x9C
  3236  0000FC                     	ds	1
  3237  0000FD                     arp_gratuitous@err:
  3238                           	opt stack 0
  3239  0000FD                     ipv4_sendFrame@err:
  3240                           	opt stack 0
  3241                           
  3242                           ; 3 bytes @ 0x9D
  3243  0000FD                     	ds	1
  3244  0000FE                     
  3245                           ; 1 bytes @ 0x9E
  3246  0000FE                     	ds	2
  3247                           tblptru	equ	0xFF8
  3248                           tblptrh	equ	0xFF7
  3249                           tblptrl	equ	0xFF6
  3250                           tablat	equ	0xFF5
  3251                           postinc0	equ	0xFEE
  3252                           wreg	equ	0xFE8
  3253                           postdec1	equ	0xFE5
  3254                           fsr1l	equ	0xFE1
  3255                           
  3256                           	psect	cstackCOMRAM
  3257  000001                     __pcstackCOMRAM:
  3258                           	opt stack 0
  3259  000001                     ?i2___lwdiv:
  3260                           	opt stack 0
  3261  000001                     buttonHandler@state:
  3262                           	opt stack 0
  3263  000001                     i2___lwdiv@dividend:
  3264                           	opt stack 0
  3265                           
  3266                           ; 2 bytes @ 0x0
  3267  000001                     	ds	2
  3268  000003                     i2___lwdiv@divisor:
  3269                           	opt stack 0
  3270  000003                     buttonHandler@resetValue:
  3271                           	opt stack 0
  3272                           
  3273                           ; 4 bytes @ 0x2
  3274  000003                     	ds	2
  3275  000005                     i2___lwdiv@quotient:
  3276                           	opt stack 0
  3277                           
  3278                           ; 2 bytes @ 0x4
  3279  000005                     	ds	2
  3280  000007                     i2___lwdiv@counter:
  3281                           	opt stack 0
  3282  000007                     buttonHandler@debounceValue:
  3283                           	opt stack 0
  3284                           
  3285                           ; 4 bytes @ 0x6
  3286  000007                     	ds	1
  3287  000008                     parseNumber@numberToDisplay:
  3288                           	opt stack 0
  3289                           
  3290                           ; 2 bytes @ 0x7
  3291  000008                     	ds	2
  3292  00000A                     parseNumber@digit:
  3293                           	opt stack 0
  3294                           
  3295                           ; 1 bytes @ 0x9
  3296  00000A                     	ds	1
  3297  00000B                     ??_parseNumber:
  3298                           
  3299                           ; 1 bytes @ 0xA
  3300  00000B                     	ds	1
  3301  00000C                     parseNumber@ones:
  3302                           	opt stack 0
  3303                           
  3304                           ; 1 bytes @ 0xB
  3305  00000C                     	ds	1
  3306  00000D                     parseNumber@tens:
  3307                           	opt stack 0
  3308                           
  3309                           ; 1 bytes @ 0xC
  3310  00000D                     	ds	1
  3311  00000E                     parseNumber@hundreds:
  3312                           	opt stack 0
  3313                           
  3314                           ; 1 bytes @ 0xD
  3315  00000E                     	ds	1
  3316  00000F                     sevenSegmentUpdate@numberToDisplay:
  3317                           	opt stack 0
  3318                           
  3319                           ; 2 bytes @ 0xE
  3320  00000F                     	ds	2
  3321  000011                     ??_sevenSegmentUpdate:
  3322                           
  3323                           ; 1 bytes @ 0x10
  3324  000011                     	ds	2
  3325  000013                     _sevenSegmentUpdate$2495:
  3326                           	opt stack 0
  3327                           
  3328                           ; 2 bytes @ 0x12
  3329  000013                     	ds	2
  3330  000015                     sevenSegmentUpdate@i:
  3331                           	opt stack 0
  3332                           
  3333                           ; 1 bytes @ 0x14
  3334  000015                     	ds	1
  3335  000016                     ??_ISR:
  3336                           
  3337                           ; 1 bytes @ 0x15
  3338  000016                     	ds	19
  3339                           tblptru	equ	0xFF8
  3340                           tblptrh	equ	0xFF7
  3341                           tblptrl	equ	0xFF6
  3342                           tablat	equ	0xFF5
  3343                           postinc0	equ	0xFEE
  3344                           wreg	equ	0xFE8
  3345                           postdec1	equ	0xFE5
  3346                           fsr1l	equ	0xFE1
  3347                           
  3348 ;;
  3349 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  3350 ;;
  3351 ;; *************** function _main *****************
  3352 ;; Defined at:
  3353 ;;		line 33 in file "src/system/main.c"
  3354 ;; Parameters:    Size  Location     Type
  3355 ;;		None
  3356 ;; Auto vars:     Size  Location     Type
  3357 ;;  i               1  186[BANK1 ] unsigned char 
  3358 ;;  headerBuf      32  152[BANK1 ] unsigned char [32]
  3359 ;;  ipDst           4  190[BANK1 ] struct ipv4_address
  3360 ;;  prescaler       4  148[BANK1 ] unsigned long 
  3361 ;;  err             3  187[BANK1 ] struct error
  3362 ;;  oldState        1    0        unsigned char 
  3363 ;; Return value:  Size  Location     Type
  3364 ;;                  1    wreg      void 
  3365 ;; Registers used:
  3366 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3367 ;; Tracked objects:
  3368 ;;		On entry : 0/0
  3369 ;;		On exit  : 0/0
  3370 ;;		Unchanged: 0/0
  3371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3372 ;;      Params:         0       0       0       0       0       0       0       0       0
  3373 ;;      Locals:         0       0      46       0       0       0       0       0       0
  3374 ;;      Temps:          0       0       3       0       0       0       0       0       0
  3375 ;;      Totals:         0       0      49       0       0       0       0       0       0
  3376 ;;Total ram usage:       49 bytes
  3377 ;; Hardware stack levels required when called:   14
  3378 ;; This function calls:
  3379 ;;		_UARTInit
  3380 ;;		_UARTTransmitText
  3381 ;;		_ethernetController_checkDeviceId
  3382 ;;		_ethernetController_getDeviceName
  3383 ;;		_ethernetController_getMacAddress
  3384 ;;		_ethernetController_init
  3385 ;;		_ethernetController_setLEDConfig
  3386 ;;		_handleStackBackgroundTasks
  3387 ;;		_ipAdressToString
  3388 ;;		_ipv4_calculateHeaderChecksum
  3389 ;;		_ipv4_getIPSourceAddress
  3390 ;;		_ipv4_streamToTransmissionBuffer
  3391 ;;		_ipv4_txFrameRequest
  3392 ;;		_ipv4_writeHeaderIntoBuffer
  3393 ;;		_macToString
  3394 ;;		_printErrorMessage
  3395 ;;		_printEthernetState
  3396 ;;		_sevenSegmentInit
  3397 ;;		_srand
  3398 ;;		_stack_init
  3399 ;; This function is called by:
  3400 ;;		Startup code after reset
  3401 ;; This function uses a non-reentrant model
  3402 ;;
  3403                           
  3404                           	psect	text0
  3405  000ADA                     __ptext0:
  3406                           	opt stack 0
  3407  000ADA                     _main:
  3408                           	opt stack 17
  3409                           
  3410                           ;main.c: 36: OSCCONbits.SCS = 0b00;
  3411                           
  3412                           ;incstack = 0
  3413  000ADA  0EFC               	movlw	-4
  3414  000ADC  16D3               	andwf	4051,f,c	;volatile
  3415                           
  3416                           ;main.c: 37: OSCCONbits.IRCF = 0b1110;
  3417  000ADE  50D3               	movf	4051,w,c	;volatile
  3418  000AE0  0B8F               	andlw	-113
  3419  000AE2  0960               	iorlw	96
  3420  000AE4  6ED3               	movwf	4051,c	;volatile
  3421                           
  3422                           ;main.c: 38: OSCCON2bits.PLLEN = 0b1;
  3423  000AE6  88D2               	bsf	4050,4,c	;volatile
  3424                           
  3425                           ;main.c: 41: INTCONbits.GIE = 0;
  3426  000AE8  9EF2               	bcf	intcon,7,c	;volatile
  3427                           
  3428                           ;main.c: 42: INTCONbits.TMR0IE = 1;
  3429  000AEA  8AF2               	bsf	intcon,5,c	;volatile
  3430                           
  3431                           ;main.c: 43: INTCON3bits.INT2IE = 1;
  3432  000AEC  88F0               	bsf	intcon3,4,c	;volatile
  3433                           
  3434                           ;main.c: 44: RCIP = 0;
  3435  000AEE  9A9F               	bcf	3999,5,c	;volatile
  3436                           
  3437                           ;main.c: 45: RCIE = 1;
  3438  000AF0  8A9D               	bsf	3997,5,c	;volatile
  3439                           
  3440                           ;main.c: 46: INTCONbits.PEIE = 1;
  3441  000AF2  8CF2               	bsf	intcon,6,c	;volatile
  3442                           
  3443                           ;main.c: 50: T0CONbits.TMR0ON = 1;
  3444  000AF4  8ED5               	bsf	4053,7,c	;volatile
  3445                           
  3446                           ;main.c: 51: T0CONbits.T08BIT = 1;
  3447  000AF6  8CD5               	bsf	4053,6,c	;volatile
  3448                           
  3449                           ;main.c: 52: T0CONbits.T0CS = 0;
  3450  000AF8  9AD5               	bcf	4053,5,c	;volatile
  3451                           
  3452                           ;main.c: 53: T0CONbits.PSA = 0;
  3453  000AFA  96D5               	bcf	4053,3,c	;volatile
  3454                           
  3455                           ;main.c: 54: T0CONbits.T0PS = 0b101;
  3456  000AFC  50D5               	movf	4053,w,c	;volatile
  3457  000AFE  0BF8               	andlw	-8
  3458  000B00  0905               	iorlw	5
  3459  000B02  6ED5               	movwf	4053,c	;volatile
  3460                           
  3461                           ;main.c: 58: T1CONbits.TMR1ON = 1;
  3462  000B04  80CD               	bsf	4045,0,c	;volatile
  3463                           
  3464                           ;main.c: 59: CCP1CONbits.CCP1M = 0b1011;
  3465  000B06  50BD               	movf	4029,w,c	;volatile
  3466  000B08  0BF0               	andlw	-16
  3467  000B0A  090B               	iorlw	11
  3468  000B0C  6EBD               	movwf	4029,c	;volatile
  3469                           
  3470                           ;main.c: 60: CCPR1 = 8000;
  3471  000B0E  0E1F               	movlw	31
  3472  000B10  6EBF               	movwf	4031,c	;volatile
  3473  000B12  0E40               	movlw	64
  3474  000B14  6EBE               	movwf	4030,c	;volatile
  3475                           
  3476                           ;main.c: 61: PIE1bits.CCP1IE = 1;
  3477  000B16  849D               	bsf	3997,2,c	;volatile
  3478                           
  3479                           ;main.c: 62: INTCONbits.PEIE = 1;
  3480  000B18  8CF2               	bsf	intcon,6,c	;volatile
  3481                           
  3482                           ;main.c: 64: TRISBbits.RB6 = 0;
  3483  000B1A  9C93               	bcf	3987,6,c	;volatile
  3484                           
  3485                           ;main.c: 67: UARTInit();
  3486  000B1C  EC6C  F02B         	call	_UARTInit	;wreg free
  3487                           
  3488                           ;main.c: 68: sevenSegmentInit();
  3489  000B20  EC0E  F02B         	call	_sevenSegmentInit	;wreg free
  3490                           
  3491                           ;main.c: 69: _delay((unsigned long)((10)*(32000000UL/4000.0)));
  3492  000B24  0E68               	movlw	104
  3493  000B26  0101               	movlb	1	; () banked
  3494  000B28  6F91               	movwf	??_main& (0+255),b
  3495  000B2A  0EE4               	movlw	228
  3496  000B2C                     u12667:
  3497  000B2C  2EE8               	decfsz	wreg,f,c
  3498  000B2E  D7FE               	bra	u12667
  3499  000B30  2F91               	decfsz	??_main& (0+255),f,b
  3500  000B32  D7FC               	bra	u12667
  3501  000B34  F000               	nop	
  3502                           
  3503                           ;main.c: 70: UARTTransmitText("\x12");
  3504  000B36  0EFD               	movlw	low STR_27
  3505  000B38  0100               	movlb	0	; () banked
  3506  000B3A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3507  000B3C  0E7F               	movlw	high STR_27
  3508  000B3E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3509  000B40  ECD8  F026         	call	_UARTTransmitText	;wreg free
  3510                           
  3511                           ;main.c: 71: if (!RCONbits.TO) {
  3512  000B44  B6D0               	btfsc	4048,3,c	;volatile
  3513  000B46  D015               	goto	l649
  3514                           
  3515                           ;main.c: 72: UARTTransmitText("------------------------------------------------\n\r");
  3516  000B48  0E87               	movlw	low STR_28
  3517  000B4A  0100               	movlb	0	; () banked
  3518  000B4C  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3519  000B4E  0E7A               	movlw	high STR_28
  3520  000B50  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3521  000B52  ECD8  F026         	call	_UARTTransmitText	;wreg free
  3522                           
  3523                           ;main.c: 73: UARTTransmitText("\a*** CRITICAL ERROR: WATCHDOG CAUSED RESET ***\n\r");
  3524  000B56  0EBA               	movlw	low STR_29
  3525  000B58  0100               	movlb	0	; () banked
  3526  000B5A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3527  000B5C  0E7A               	movlw	high STR_29
  3528  000B5E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3529  000B60  ECD8  F026         	call	_UARTTransmitText	;wreg free
  3530                           
  3531                           ;main.c: 74: UARTTransmitText("------------------------------------------------\n\r");
  3532  000B64  0E87               	movlw	low STR_28
  3533  000B66  0100               	movlb	0	; () banked
  3534  000B68  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3535  000B6A  0E7A               	movlw	high STR_28
  3536  000B6C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3537  000B6E  ECD8  F026         	call	_UARTTransmitText	;wreg free
  3538  000B72                     l649:
  3539                           
  3540                           ;main.c: 75: }
  3541                           ;main.c: 76: UARTTransmitText("FIRMWARE BUILD DATE IS ");
  3542  000B72  0EF3               	movlw	low STR_31
  3543  000B74  0100               	movlb	0	; () banked
  3544  000B76  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3545  000B78  0E7D               	movlw	high STR_31
  3546  000B7A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3547  000B7C  ECD8  F026         	call	_UARTTransmitText	;wreg free
  3548                           
  3549                           ;main.c: 77: UARTTransmitText("Mar 31 2019");
  3550  000B80  0E4A               	movlw	low STR_32
  3551  000B82  0100               	movlb	0	; () banked
  3552  000B84  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3553  000B86  0E7F               	movlw	high STR_32
  3554  000B88  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3555  000B8A  ECD8  F026         	call	_UARTTransmitText	;wreg free
  3556                           
  3557                           ;main.c: 78: UARTTransmitText(" ");
  3558  000B8E  0EEF               	movlw	low (STR_94+1)
  3559  000B90  0100               	movlb	0	; () banked
  3560  000B92  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3561  000B94  0E7F               	movlw	high (STR_94+1)
  3562  000B96  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3563  000B98  ECD8  F026         	call	_UARTTransmitText	;wreg free
  3564                           
  3565                           ;main.c: 79: UARTTransmitText("22:00:36");
  3566  000B9C  0E93               	movlw	low STR_34
  3567  000B9E  0100               	movlb	0	; () banked
  3568  000BA0  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3569  000BA2  0E7F               	movlw	high STR_34
  3570  000BA4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3571  000BA6  ECD8  F026         	call	_UARTTransmitText	;wreg free
  3572                           
  3573                           ;main.c: 80: UARTTransmitText(".\n\r");
  3574  000BAA  0ED0               	movlw	low (STR_62+1)
  3575  000BAC  0100               	movlb	0	; () banked
  3576  000BAE  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3577  000BB0  0E7F               	movlw	high (STR_62+1)
  3578  000BB2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3579  000BB4  ECD8  F026         	call	_UARTTransmitText	;wreg free
  3580                           
  3581                           ;main.c: 81: error_t err;
  3582                           ;main.c: 82: err = ethernetController_init();
  3583  000BB8  ECAF  F021         	call	_ethernetController_init	;wreg free
  3584  000BBC  C07A  F1BB         	movff	?_ethernetController_init,main@err
  3585  000BC0  C07B  F1BC         	movff	?_ethernetController_init+1,main@err+1
  3586  000BC4  C07C  F1BD         	movff	?_ethernetController_init+2,main@err+2
  3587                           
  3588                           ;main.c: 83: if (err.code != (uint16_t)0)
  3589  000BC8  0101               	movlb	1	; () banked
  3590  000BCA  51BC               	movf	(main@err+1)& (0+255),w,b
  3591  000BCC  11BD               	iorwf	(main@err+2)& (0+255),w,b
  3592  000BCE  B4D8               	btfsc	status,2,c
  3593  000BD0  D008               	goto	l650
  3594                           
  3595                           ; BSR set to: 1
  3596                           ;main.c: 84: printErrorMessage(err);
  3597  000BD2  C1BB  F09A         	movff	main@err,printErrorMessage@err
  3598  000BD6  C1BC  F09B         	movff	main@err+1,printErrorMessage@err+1
  3599  000BDA  C1BD  F09C         	movff	main@err+2,printErrorMessage@err+2
  3600  000BDE  EC69  F01B         	call	_printErrorMessage	;wreg free
  3601  000BE2                     l650:
  3602                           
  3603                           ;main.c: 85: err = ethernetController_checkDeviceId();
  3604  000BE2  ECA7  F027         	call	_ethernetController_checkDeviceId	;wreg free
  3605  000BE6  C06E  F1BB         	movff	?_ethernetController_checkDeviceId,main@err
  3606  000BEA  C06F  F1BC         	movff	?_ethernetController_checkDeviceId+1,main@err+1
  3607  000BEE  C070  F1BD         	movff	?_ethernetController_checkDeviceId+2,main@err+2
  3608                           
  3609                           ;main.c: 86: if (err.code == (uint16_t)0) {
  3610  000BF2  0101               	movlb	1	; () banked
  3611  000BF4  51BC               	movf	(main@err+1)& (0+255),w,b
  3612  000BF6  11BD               	iorwf	(main@err+2)& (0+255),w,b
  3613  000BF8  A4D8               	btfss	status,2,c
  3614  000BFA  D00F               	goto	l651
  3615                           
  3616                           ; BSR set to: 1
  3617                           ;main.c: 87: UARTTransmitText(ethernetController_getDeviceName());
  3618  000BFC  ECCC  F02A         	call	_ethernetController_getDeviceName	;wreg free
  3619  000C00  C060  F098         	movff	?_ethernetController_getDeviceName,UARTTransmitText@str
  3620  000C04  C061  F099         	movff	?_ethernetController_getDeviceName+1,UARTTransmitText@str+1
  3621  000C08  ECD8  F026         	call	_UARTTransmitText	;wreg free
  3622                           
  3623                           ;main.c: 88: UARTTransmitText(" detected. ");
  3624  000C0C  0E3E               	movlw	low STR_36
  3625  000C0E  0100               	movlb	0	; () banked
  3626  000C10  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3627  000C12  0E7F               	movlw	high STR_36
  3628  000C14  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3629  000C16  ECD8  F026         	call	_UARTTransmitText	;wreg free
  3630  000C1A                     l651:
  3631                           
  3632                           ;main.c: 89: }
  3633                           ;main.c: 90: UARTTransmitText("Source MAC address is ");
  3634  000C1A  0E0B               	movlw	low STR_37
  3635  000C1C  0100               	movlb	0	; () banked
  3636  000C1E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3637  000C20  0E7E               	movlw	high STR_37
  3638  000C22  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3639  000C24  ECD8  F026         	call	_UARTTransmitText	;wreg free
  3640                           
  3641                           ;main.c: 91: UARTTransmitText(macToString(ethernetController_getMacAddress()));
  3642  000C28  EC0D  F025         	call	_ethernetController_getMacAddress	;wreg free
  3643  000C2C  CFE9 FFD9          	movff	fsr0l,fsr2l
  3644  000C30  CFEA FFDA          	movff	fsr0h,fsr2h
  3645  000C34  EE00  F07A         	lfsr	0,macToString@addr
  3646  000C38  0E05               	movlw	5
  3647  000C3A                     u12531:
  3648  000C3A  CFDB FFEB          	movff	plusw2,plusw0
  3649  000C3E  06E8               	decf	wreg,f,c
  3650  000C40  E2FC               	bc	u12531
  3651  000C42  ECA5  F01D         	call	_macToString	;wreg free
  3652  000C46  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  3653  000C4A  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  3654  000C4E  ECD8  F026         	call	_UARTTransmitText	;wreg free
  3655                           
  3656                           ;main.c: 92: UARTTransmitText(".\n\r");
  3657  000C52  0ED0               	movlw	low (STR_62+1)
  3658  000C54  0100               	movlb	0	; () banked
  3659  000C56  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3660  000C58  0E7F               	movlw	high (STR_62+1)
  3661  000C5A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3662  000C5C  ECD8  F026         	call	_UARTTransmitText	;wreg free
  3663                           
  3664                           ;main.c: 93: UARTTransmitText("------------------------------------------------\n\r");
  3665  000C60  0E87               	movlw	low STR_28
  3666  000C62  0100               	movlb	0	; () banked
  3667  000C64  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3668  000C66  0E7A               	movlw	high STR_28
  3669  000C68  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3670  000C6A  ECD8  F026         	call	_UARTTransmitText	;wreg free
  3671                           
  3672                           ;main.c: 95: stack_init();
  3673  000C6E  EC90  F02B         	call	_stack_init	;wreg free
  3674                           
  3675                           ;main.c: 97: ethernetController_setLEDConfig(LEDA, LED_ON);
  3676  000C72  0E00               	movlw	0
  3677  000C74  0100               	movlb	0	; () banked
  3678  000C76  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  3679  000C78  0E00               	movlw	0
  3680  000C7A  EC4E  F022         	call	_ethernetController_setLEDConfig
  3681                           
  3682                           ;main.c: 98: ethernetController_setLEDConfig(LEDA, LED_ON);
  3683  000C7E  0E00               	movlw	0
  3684  000C80  0100               	movlb	0	; () banked
  3685  000C82  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  3686  000C84  0E00               	movlw	0
  3687  000C86  EC4E  F022         	call	_ethernetController_setLEDConfig
  3688                           
  3689                           ;main.c: 99: _delay((unsigned long)((500)*(32000000UL/4000.0)));
  3690  000C8A  0E15               	movlw	21
  3691  000C8C  0101               	movlb	1	; () banked
  3692  000C8E  6F92               	movwf	(??_main+1)& (0+255),b
  3693  000C90  0E4B               	movlw	75
  3694  000C92  6F91               	movwf	??_main& (0+255),b
  3695  000C94  0EBE               	movlw	190
  3696  000C96                     u12677:
  3697  000C96  2EE8               	decfsz	wreg,f,c
  3698  000C98  D7FE               	bra	u12677
  3699  000C9A  2F91               	decfsz	??_main& (0+255),f,b
  3700  000C9C  D7FC               	bra	u12677
  3701  000C9E  2F92               	decfsz	(??_main+1)& (0+255),f,b
  3702  000CA0  D7FA               	bra	u12677
  3703  000CA2  F000               	nop	
  3704                           
  3705                           ;main.c: 101: ethernetController_setLEDConfig(LEDA, LED_OFF);
  3706  000CA4  0E01               	movlw	1
  3707  000CA6  0100               	movlb	0	; () banked
  3708  000CA8  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  3709  000CAA  0E00               	movlw	0
  3710  000CAC  EC4E  F022         	call	_ethernetController_setLEDConfig
  3711                           
  3712                           ;main.c: 102: ethernetController_setLEDConfig(LEDA, LED_OFF);
  3713  000CB0  0E01               	movlw	1
  3714  000CB2  0100               	movlb	0	; () banked
  3715  000CB4  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  3716  000CB6  0E00               	movlw	0
  3717  000CB8  EC4E  F022         	call	_ethernetController_setLEDConfig
  3718                           
  3719                           ;main.c: 105: uint32_t prescaler = 0;
  3720  000CBC  0E00               	movlw	0
  3721  000CBE  0101               	movlb	1	; () banked
  3722  000CC0  6F94               	movwf	main@prescaler& (0+255),b
  3723  000CC2  0E00               	movlw	0
  3724  000CC4  6F95               	movwf	(main@prescaler+1)& (0+255),b
  3725  000CC6  0E00               	movlw	0
  3726  000CC8  6F96               	movwf	(main@prescaler+2)& (0+255),b
  3727  000CCA  0E00               	movlw	0
  3728  000CCC  6F97               	movwf	(main@prescaler+3)& (0+255),b
  3729                           
  3730                           ; BSR set to: 1
  3731                           ;main.c: 107: ANSELB &= ~(1<<5);
  3732  000CCE  010F               	movlb	15	; () banked
  3733  000CD0  9B5C               	bcf	92,5,b	;volatile
  3734                           
  3735                           ; BSR set to: 15
  3736                           ;main.c: 108: TRISB |= (1<<5);
  3737  000CD2  8A93               	bsf	3987,5,c	;volatile
  3738                           
  3739                           ; BSR set to: 15
  3740                           ;main.c: 110: uint8_t oldState;
  3741                           ;main.c: 112: stack.source.address[0] = 192;
  3742  000CD4  0EC0               	movlw	192
  3743  000CD6  0102               	movlb	2	; () banked
  3744  000CD8  6FCE               	movwf	(_stack+119)& (0+255),b
  3745                           
  3746                           ; BSR set to: 2
  3747                           ;main.c: 113: stack.source.address[1] = 168;
  3748  000CDA  0EA8               	movlw	168
  3749  000CDC  6FCF               	movwf	(_stack+120)& (0+255),b
  3750                           
  3751                           ; BSR set to: 2
  3752                           ;main.c: 114: stack.source.address[2] = 0;
  3753  000CDE  0E00               	movlw	0
  3754  000CE0  6FD0               	movwf	(_stack+121)& (0+255),b
  3755                           
  3756                           ; BSR set to: 2
  3757                           ;main.c: 115: stack.source.address[3] = 1;
  3758  000CE2  0E01               	movlw	1
  3759  000CE4  6FD1               	movwf	(_stack+122)& (0+255),b
  3760                           
  3761                           ; BSR set to: 2
  3762                           ;main.c: 117: ipv4_address_t ipDst;
  3763                           ;main.c: 118: ipDst.address[0] = 192;
  3764  000CE6  0EC0               	movlw	192
  3765  000CE8  0101               	movlb	1	; () banked
  3766  000CEA  6FBE               	movwf	main@ipDst& (0+255),b
  3767                           
  3768                           ; BSR set to: 1
  3769                           ;main.c: 119: ipDst.address[1] = 168;
  3770  000CEC  0EA8               	movlw	168
  3771  000CEE  6FBF               	movwf	(main@ipDst+1)& (0+255),b
  3772                           
  3773                           ; BSR set to: 1
  3774                           ;main.c: 120: ipDst.address[2] = 0;
  3775  000CF0  0E00               	movlw	0
  3776  000CF2  6FC0               	movwf	(main@ipDst+2)& (0+255),b
  3777                           
  3778                           ; BSR set to: 1
  3779                           ;main.c: 121: ipDst.address[3] = 10;
  3780  000CF4  0E0A               	movlw	10
  3781  000CF6  6FC1               	movwf	(main@ipDst+3)& (0+255),b
  3782                           
  3783                           ; BSR set to: 1
  3784                           ;main.c: 124: INTCONbits.GIE = 1;
  3785  000CF8  8EF2               	bsf	intcon,7,c	;volatile
  3786                           
  3787                           ; BSR set to: 1
  3788                           ;main.c: 125: INTCONbits.PEIE = 1;
  3789  000CFA  8CF2               	bsf	intcon,6,c	;volatile
  3790                           
  3791                           ; BSR set to: 1
  3792                           ;main.c: 127: srand(ethernetController_getMacAddress().address[5]);
  3793  000CFC  EC0D  F025         	call	_ethernetController_getMacAddress	;wreg free
  3794  000D00  0E05               	movlw	5
  3795  000D02  26E9               	addwf	fsr0l,f,c
  3796  000D04  0E00               	movlw	0
  3797  000D06  22EA               	addwfc	fsr0h,f,c
  3798  000D08  50EF               	movf	indf0,w,c
  3799  000D0A  0101               	movlb	1	; () banked
  3800  000D0C  6F91               	movwf	??_main& (0+255),b
  3801  000D0E  5191               	movf	??_main& (0+255),w,b
  3802  000D10  0100               	movlb	0	; () banked
  3803  000D12  6F7A               	movwf	srand@x& (0+255),b
  3804  000D14  6B7B               	clrf	(srand@x+1)& (0+255),b
  3805  000D16  EC74  F02B         	call	_srand	;wreg free
  3806  000D1A                     l652:
  3807  000D1A  0004               	clrwdt		;# 
  3808                           
  3809                           ;main.c: 132: handleStackBackgroundTasks(&stack);
  3810  000D1C  0E57               	movlw	low _stack
  3811  000D1E  0101               	movlb	1	; () banked
  3812  000D20  6F85               	movwf	handleStackBackgroundTasks@stack& (0+255),b
  3813  000D22  0E02               	movlw	high _stack
  3814  000D24  6F86               	movwf	(handleStackBackgroundTasks@stack+1)& (0+255),b
  3815  000D26  EC0D  F00E         	call	_handleStackBackgroundTasks	;wreg free
  3816                           
  3817                           ;main.c: 134: printEthernetState(stack.ethernet);
  3818  000D2A  EE22  F079         	lfsr	2,_stack+34
  3819  000D2E  EE00  F09A         	lfsr	0,printEthernetState@state
  3820  000D32  0E0E               	movlw	14
  3821  000D34                     u12541:
  3822  000D34  CFDB FFEB          	movff	plusw2,plusw0
  3823  000D38  06E8               	decf	wreg,f,c
  3824  000D3A  E2FC               	bc	u12541
  3825  000D3C  EC5E  F021         	call	_printEthernetState	;wreg free
  3826                           
  3827                           ;main.c: 136: numberToDisplay = (stack.ethernet.link == NO_LINK) ? 1000 : stack.source.a
      +                          ddress[3];
  3828  000D40  0102               	movlb	2	; () banked
  3829  000D42  5179               	movf	(_stack+34)& (0+255),w,b
  3830  000D44  B4D8               	btfsc	status,2,c
  3831  000D46  D005               	goto	l654
  3832                           
  3833                           ; BSR set to: 2
  3834  000D48  C2D1  F1B8         	movff	_stack+122,_main$2404
  3835  000D4C  0101               	movlb	1	; () banked
  3836  000D4E  6BB9               	clrf	(_main$2404+1)& (0+255),b
  3837  000D50  D005               	goto	l656
  3838  000D52                     l654:
  3839                           
  3840                           ; BSR set to: 1
  3841  000D52  0E03               	movlw	3
  3842  000D54  0101               	movlb	1	; () banked
  3843  000D56  6FB9               	movwf	(_main$2404+1)& (0+255),b
  3844  000D58  0EE8               	movlw	232
  3845  000D5A  6FB8               	movwf	_main$2404& (0+255),b
  3846  000D5C                     l656:
  3847                           
  3848                           ; BSR set to: 1
  3849                           
  3850                           ; BSR set to: 1
  3851  000D5C  C1B8  F031         	movff	_main$2404,_numberToDisplay	;volatile
  3852  000D60  C1B9  F032         	movff	_main$2404+1,_numberToDisplay+1	;volatile
  3853  000D64  0E00               	movlw	0
  3854  000D66  BE32               	btfsc	_numberToDisplay+1,7,c	;volatile
  3855  000D68  0EFF               	movlw	-1
  3856  000D6A  6E33               	movwf	_numberToDisplay+2,c	;volatile
  3857  000D6C  6E34               	movwf	_numberToDisplay+3,c	;volatile
  3858                           
  3859                           ; BSR set to: 1
  3860                           ;main.c: 138: if (buttonState) {
  3861  000D6E  51F9               	movf	_buttonState& (0+255),w,b	;volatile
  3862  000D70  B4D8               	btfsc	status,2,c
  3863  000D72  D7D3               	goto	l652
  3864                           
  3865                           ; BSR set to: 1
  3866                           ;main.c: 139: buttonState = 0;
  3867  000D74  0E00               	movlw	0
  3868  000D76  6FF9               	movwf	_buttonState& (0+255),b	;volatile
  3869                           
  3870                           ; BSR set to: 1
  3871                           ;main.c: 141: UARTTransmitText("My Address is ");
  3872  000D78  0E08               	movlw	low STR_40
  3873  000D7A  0100               	movlb	0	; () banked
  3874  000D7C  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3875  000D7E  0E7F               	movlw	high STR_40
  3876  000D80  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3877  000D82  ECD8  F026         	call	_UARTTransmitText	;wreg free
  3878                           
  3879                           ;main.c: 142: UARTTransmitText(ipAdressToString(ipv4_getIPSourceAddress()));
  3880  000D86  EC48  F02B         	call	_ipv4_getIPSourceAddress	;wreg free
  3881  000D8A  C060  F073         	movff	?_ipv4_getIPSourceAddress,ipAdressToString@ip
  3882  000D8E  C061  F074         	movff	?_ipv4_getIPSourceAddress+1,ipAdressToString@ip+1
  3883  000D92  C062  F075         	movff	?_ipv4_getIPSourceAddress+2,ipAdressToString@ip+2
  3884  000D96  C063  F076         	movff	?_ipv4_getIPSourceAddress+3,ipAdressToString@ip+3
  3885  000D9A  ECE7  F013         	call	_ipAdressToString	;wreg free
  3886  000D9E  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  3887  000DA2  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  3888  000DA6  ECD8  F026         	call	_UARTTransmitText	;wreg free
  3889                           
  3890                           ;main.c: 143: UARTTransmitText("\n\r");
  3891  000DAA  0EEB               	movlw	low (STR_44+1)
  3892  000DAC  0100               	movlb	0	; () banked
  3893  000DAE  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3894  000DB0  0E7F               	movlw	high (STR_44+1)
  3895  000DB2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3896  000DB4  ECD8  F026         	call	_UARTTransmitText	;wreg free
  3897                           
  3898                           ;main.c: 146: if (stack.ethernet.link == LINK_ESTABLISHED) {
  3899  000DB8  0102               	movlb	2	; () banked
  3900  000DBA  0579               	decf	(_stack+34)& (0+255),w,b
  3901  000DBC  A4D8               	btfss	status,2,c
  3902  000DBE  D7AD               	goto	l652
  3903                           
  3904                           ; BSR set to: 2
  3905                           ;main.c: 149: uint8_t headerBuf[32];
  3906                           ;main.c: 150: stack.pendingPacketToSend.ipv4Header.destination = ipDst;
  3907  000DC0  C1BE  F29F         	movff	main@ipDst,_stack+72
  3908  000DC4  C1BF  F2A0         	movff	main@ipDst+1,_stack+73
  3909  000DC8  C1C0  F2A1         	movff	main@ipDst+2,_stack+74
  3910  000DCC  C1C1  F2A2         	movff	main@ipDst+3,_stack+75
  3911                           
  3912                           ; BSR set to: 2
  3913                           ;main.c: 151: stack.pendingPacketToSend.ipv4Header.source = ipv4_getIPSourceAddress();
  3914  000DD0  EC48  F02B         	call	_ipv4_getIPSourceAddress	;wreg free
  3915  000DD4  C060  F29B         	movff	?_ipv4_getIPSourceAddress,_stack+68
  3916  000DD8  C061  F29C         	movff	?_ipv4_getIPSourceAddress+1,_stack+69
  3917  000DDC  C062  F29D         	movff	?_ipv4_getIPSourceAddress+2,_stack+70
  3918  000DE0  C063  F29E         	movff	?_ipv4_getIPSourceAddress+3,_stack+71
  3919                           
  3920                           ;main.c: 152: stack.pendingPacketToSend.ipv4Header.totalLength = 120;
  3921  000DE4  0E00               	movlw	0
  3922  000DE6  0102               	movlb	2	; () banked
  3923  000DE8  6F91               	movwf	(_stack+58)& (0+255),b
  3924  000DEA  0E78               	movlw	120
  3925  000DEC  6F90               	movwf	(_stack+57)& (0+255),b
  3926                           
  3927                           ; BSR set to: 2
  3928                           ;main.c: 153: stack.pendingPacketToSend.ipv4Header.timeToLive = 255;
  3929  000DEE  6997               	setf	(_stack+64)& (0+255),b
  3930                           
  3931                           ; BSR set to: 2
  3932                           ;main.c: 154: stack.pendingPacketToSend.ipv4Header.version = 4;
  3933  000DF0  0E04               	movlw	4
  3934  000DF2  6F8C               	movwf	(_stack+53)& (0+255),b
  3935                           
  3936                           ; BSR set to: 2
  3937                           ;main.c: 155: ipv4_calculateHeaderChecksum(&stack.pendingPacketToSend.ipv4Header);
  3938  000DF4  0E8C               	movlw	low (_stack+53)
  3939  000DF6  0100               	movlb	0	; () banked
  3940  000DF8  6F60               	movwf	ipv4_calculateHeaderChecksum@header& (0+255),b
  3941  000DFA  0E02               	movlw	high (_stack+53)
  3942  000DFC  6F61               	movwf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),b
  3943  000DFE  EC21  F00B         	call	_ipv4_calculateHeaderChecksum	;wreg free
  3944                           
  3945                           ;main.c: 156: ipv4_writeHeaderIntoBuffer(stack.pendingPacketToSend.ipv4Header, headerBuf
      +                          );
  3946  000E02  EE22  F08C         	lfsr	2,_stack+53
  3947  000E06  EE00  F060         	lfsr	0,ipv4_writeHeaderIntoBuffer@header
  3948  000E0A  0E16               	movlw	22
  3949  000E0C                     u12581:
  3950  000E0C  CFDB FFEB          	movff	plusw2,plusw0
  3951  000E10  06E8               	decf	wreg,f,c
  3952  000E12  E2FC               	bc	u12581
  3953  000E14  0E98               	movlw	low main@headerBuf
  3954  000E16  0100               	movlb	0	; () banked
  3955  000E18  6F77               	movwf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),b
  3956  000E1A  0E01               	movlw	high main@headerBuf
  3957  000E1C  6F78               	movwf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),b
  3958  000E1E  EC09  F018         	call	_ipv4_writeHeaderIntoBuffer	;wreg free
  3959                           
  3960                           ;main.c: 158: ipv4_txFrameRequest(&stack.pendingPacketToSend);
  3961  000E22  0E8C               	movlw	low (_stack+53)
  3962  000E24  0100               	movlb	0	; () banked
  3963  000E26  6FA7               	movwf	ipv4_txFrameRequest@packet& (0+255),b
  3964  000E28  0E02               	movlw	high (_stack+53)
  3965  000E2A  6FA8               	movwf	(ipv4_txFrameRequest@packet+1)& (0+255),b
  3966  000E2C  ECCE  F01A         	call	_ipv4_txFrameRequest	;wreg free
  3967                           
  3968                           ;main.c: 160: for (uint8_t i = 0; i < stack.pendingPacketToSend.ipv4Header.totalLength; 
      +                          i++) {
  3969  000E30  0E00               	movlw	0
  3970  000E32  0101               	movlb	1	; () banked
  3971  000E34  6FBA               	movwf	main@i& (0+255),b
  3972  000E36  D034               	goto	l659
  3973  000E38                     
  3974                           ; BSR set to: 1
  3975                           ;main.c: 161: if (i < stack.pendingPacketToSend.ipv4Header.headerLength * 4) {
  3976                           
  3977                           ; BSR set to: 1
  3978  000E38  0102               	movlb	2	; () banked
  3979  000E3A  518D               	movf	(_stack+54)& (0+255),w,b
  3980  000E3C  0D04               	mullw	4
  3981  000E3E  0101               	movlb	1	; () banked
  3982  000E40  51BA               	movf	main@i& (0+255),w,b
  3983  000E42  6F91               	movwf	??_main& (0+255),b
  3984  000E44  6B92               	clrf	(??_main+1)& (0+255),b
  3985  000E46  50F3               	movf	prodl,w,c
  3986  000E48  5D91               	subwf	??_main& (0+255),w,b
  3987  000E4A  5192               	movf	(??_main+1)& (0+255),w,b
  3988  000E4C  0A80               	xorlw	128
  3989  000E4E  6F93               	movwf	(??_main+2)& (0+255),b
  3990  000E50  50F4               	movf	prodh,w,c
  3991  000E52  0A80               	xorlw	128
  3992  000E54  5993               	subwfb	(??_main+2)& (0+255),w,b
  3993  000E56  B0D8               	btfsc	status,0,c
  3994  000E58  D015               	goto	l661
  3995                           
  3996                           ; BSR set to: 1
  3997                           ;main.c: 162: ipv4_streamToTransmissionBuffer(headerBuf[i], stack.pendingPacketToSend);
  3998  000E5A  EE22  F08C         	lfsr	2,_stack+53
  3999  000E5E  EE00  F07E         	lfsr	0,ipv4_streamToTransmissionBuffer@packet
  4000  000E62  0E41               	movlw	65
  4001  000E64                     u12601:
  4002  000E64  CFDB FFEB          	movff	plusw2,plusw0
  4003  000E68  06E8               	decf	wreg,f,c
  4004  000E6A  E2FC               	bc	u12601
  4005  000E6C  51BA               	movf	main@i& (0+255),w,b
  4006  000E6E  0D01               	mullw	1
  4007  000E70  0E98               	movlw	low main@headerBuf
  4008  000E72  24F3               	addwf	prodl,w,c
  4009  000E74  6ED9               	movwf	fsr2l,c
  4010  000E76  0E01               	movlw	high main@headerBuf
  4011  000E78  20F4               	addwfc	prodh,w,c
  4012  000E7A  6EDA               	movwf	fsr2h,c
  4013  000E7C  50DF               	movf	indf2,w,c
  4014  000E7E  EC31  F02A         	call	_ipv4_streamToTransmissionBuffer
  4015                           
  4016                           ;main.c: 163: } else
  4017  000E82  D00C               	goto	l662
  4018  000E84                     l661:
  4019                           
  4020                           ;main.c: 164: ipv4_streamToTransmissionBuffer(0, stack.pendingPacketToSend);
  4021  000E84  EE22  F08C         	lfsr	2,_stack+53
  4022  000E88  EE00  F07E         	lfsr	0,ipv4_streamToTransmissionBuffer@packet
  4023  000E8C  0E41               	movlw	65
  4024  000E8E                     u12611:
  4025  000E8E  CFDB FFEB          	movff	plusw2,plusw0
  4026  000E92  06E8               	decf	wreg,f,c
  4027  000E94  E2FC               	bc	u12611
  4028  000E96  0E00               	movlw	0
  4029  000E98  EC31  F02A         	call	_ipv4_streamToTransmissionBuffer
  4030  000E9C                     l662:
  4031  000E9C  0101               	movlb	1	; () banked
  4032  000E9E  2BBA               	incf	main@i& (0+255),f,b
  4033  000EA0                     l659:
  4034                           
  4035                           ; BSR set to: 1
  4036                           
  4037                           ; BSR set to: 1
  4038  000EA0  51BA               	movf	main@i& (0+255),w,b
  4039  000EA2  6F91               	movwf	??_main& (0+255),b
  4040  000EA4  6B92               	clrf	(??_main+1)& (0+255),b
  4041  000EA6  0102               	movlb	2	; () banked
  4042  000EA8  5190               	movf	(_stack+57)& (0+255),w,b
  4043  000EAA  0101               	movlb	1	; () banked
  4044  000EAC  5D91               	subwf	??_main& (0+255),w,b
  4045  000EAE  0102               	movlb	2	; () banked
  4046  000EB0  5191               	movf	(_stack+58)& (0+255),w,b
  4047  000EB2  0101               	movlb	1	; () banked
  4048  000EB4  5992               	subwfb	(??_main+1)& (0+255),w,b
  4049  000EB6  A0D8               	btfss	status,0,c
  4050  000EB8  D7BF               	goto	l660
  4051                           
  4052                           ; BSR set to: 1
  4053                           ;main.c: 165: }
  4054                           ;main.c: 166: UARTTransmitText("[IPv4]: A packet was prepared (");
  4055                           
  4056                           ; BSR set to: 1
  4057  000EBA  0EEF               	movlw	low STR_42
  4058  000EBC  0100               	movlb	0	; () banked
  4059  000EBE  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4060  000EC0  0E7C               	movlw	high STR_42
  4061  000EC2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4062  000EC4  ECD8  F026         	call	_UARTTransmitText	;wreg free
  4063                           
  4064                           ;main.c: 167: UARTTransmitText(ipAdressToString(stack.pendingPacketToSend.ipv4Header.sou
      +                          rce));
  4065  000EC8  C29B  F073         	movff	_stack+68,ipAdressToString@ip
  4066  000ECC  C29C  F074         	movff	_stack+69,ipAdressToString@ip+1
  4067  000ED0  C29D  F075         	movff	_stack+70,ipAdressToString@ip+2
  4068  000ED4  C29E  F076         	movff	_stack+71,ipAdressToString@ip+3
  4069  000ED8  ECE7  F013         	call	_ipAdressToString	;wreg free
  4070  000EDC  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  4071  000EE0  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  4072  000EE4  ECD8  F026         	call	_UARTTransmitText	;wreg free
  4073                           
  4074                           ;main.c: 168: UARTTransmitText(" -> ");
  4075  000EE8  0ED4               	movlw	low STR_43
  4076  000EEA  0100               	movlb	0	; () banked
  4077  000EEC  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4078  000EEE  0E7F               	movlw	high STR_43
  4079  000EF0  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4080  000EF2  ECD8  F026         	call	_UARTTransmitText	;wreg free
  4081                           
  4082                           ;main.c: 169: UARTTransmitText(ipAdressToString(stack.pendingPacketToSend.ipv4Header.des
      +                          tination));
  4083  000EF6  C29F  F073         	movff	_stack+72,ipAdressToString@ip
  4084  000EFA  C2A0  F074         	movff	_stack+73,ipAdressToString@ip+1
  4085  000EFE  C2A1  F075         	movff	_stack+74,ipAdressToString@ip+2
  4086  000F02  C2A2  F076         	movff	_stack+75,ipAdressToString@ip+3
  4087  000F06  ECE7  F013         	call	_ipAdressToString	;wreg free
  4088  000F0A  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  4089  000F0E  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  4090  000F12  ECD8  F026         	call	_UARTTransmitText	;wreg free
  4091                           
  4092                           ;main.c: 170: UARTTransmitText(")\n\r");
  4093  000F16  0EEA               	movlw	low STR_44
  4094  000F18  0100               	movlb	0	; () banked
  4095  000F1A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4096  000F1C  0E7F               	movlw	high STR_44
  4097  000F1E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4098  000F20  ECD8  F026         	call	_UARTTransmitText	;wreg free
  4099                           
  4100                           ;main.c: 172: stack.background.fPacketPending = 1;
  4101  000F24  0E01               	movlw	1
  4102  000F26  0102               	movlb	2	; () banked
  4103  000F28  6F8B               	movwf	(_stack+52)& (0+255),b
  4104                           
  4105                           ; BSR set to: 2
  4106                           
  4107                           ; BSR set to: 2
  4108                           
  4109                           ; BSR set to: 2
  4110  000F2A  D6F7               	goto	l652
  4111  000F2C                     __end_of_main:
  4112                           	opt stack 0
  4113                           tblptru	equ	0xFF8
  4114                           tblptrh	equ	0xFF7
  4115                           tblptrl	equ	0xFF6
  4116                           tablat	equ	0xFF5
  4117                           prodh	equ	0xFF4
  4118                           prodl	equ	0xFF3
  4119                           intcon	equ	0xFF2
  4120                           intcon3	equ	0xFF0
  4121                           indf0	equ	0xFEF
  4122                           postinc0	equ	0xFEE
  4123                           plusw0	equ	0xFEB
  4124                           fsr0h	equ	0xFEA
  4125                           fsr0l	equ	0xFE9
  4126                           wreg	equ	0xFE8
  4127                           postdec1	equ	0xFE5
  4128                           fsr1l	equ	0xFE1
  4129                           indf2	equ	0xFDF
  4130                           plusw2	equ	0xFDB
  4131                           fsr2h	equ	0xFDA
  4132                           fsr2l	equ	0xFD9
  4133                           status	equ	0xFD8
  4134                           
  4135 ;; *************** function _stack_init *****************
  4136 ;; Defined at:
  4137 ;;		line 27 in file "src/stack/stack.c"
  4138 ;; Parameters:    Size  Location     Type
  4139 ;;		None
  4140 ;; Auto vars:     Size  Location     Type
  4141 ;;		None
  4142 ;; Return value:  Size  Location     Type
  4143 ;;                  3  547[None  ] struct error
  4144 ;; Registers used:
  4145 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4146 ;; Tracked objects:
  4147 ;;		On entry : 0/0
  4148 ;;		On exit  : 0/0
  4149 ;;		Unchanged: 0/0
  4150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4151 ;;      Params:         0       0       0       0       0       0       0       0       0
  4152 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4153 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4154 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4155 ;;Total ram usage:        0 bytes
  4156 ;; Hardware stack levels used:    1
  4157 ;; Hardware stack levels required when called:    8
  4158 ;; This function calls:
  4159 ;;		_arp_init
  4160 ;;		_ipv4_init
  4161 ;; This function is called by:
  4162 ;;		_main
  4163 ;; This function uses a non-reentrant model
  4164 ;;
  4165                           
  4166                           	psect	text1
  4167  005720                     __ptext1:
  4168                           	opt stack 0
  4169  005720                     _stack_init:
  4170                           	opt stack 22
  4171                           
  4172                           ;stack.c: 28: arp_init();
  4173                           
  4174                           ; BSR set to: 2
  4175                           ;incstack = 0
  4176  005720  ECD3  F024         	call	_arp_init	;wreg free
  4177                           
  4178                           ;stack.c: 29: ipv4_init();
  4179  005724  ECA6  F02B         	call	_ipv4_init	;wreg free
  4180  005728  0012               	return		;funcret
  4181  00572A                     __end_of_stack_init:
  4182                           	opt stack 0
  4183                           tblptru	equ	0xFF8
  4184                           tblptrh	equ	0xFF7
  4185                           tblptrl	equ	0xFF6
  4186                           tablat	equ	0xFF5
  4187                           prodh	equ	0xFF4
  4188                           prodl	equ	0xFF3
  4189                           intcon	equ	0xFF2
  4190                           intcon3	equ	0xFF0
  4191                           indf0	equ	0xFEF
  4192                           postinc0	equ	0xFEE
  4193                           plusw0	equ	0xFEB
  4194                           fsr0h	equ	0xFEA
  4195                           fsr0l	equ	0xFE9
  4196                           wreg	equ	0xFE8
  4197                           postdec1	equ	0xFE5
  4198                           fsr1l	equ	0xFE1
  4199                           indf2	equ	0xFDF
  4200                           plusw2	equ	0xFDB
  4201                           fsr2h	equ	0xFDA
  4202                           fsr2l	equ	0xFD9
  4203                           status	equ	0xFD8
  4204                           
  4205 ;; *************** function _ipv4_init *****************
  4206 ;; Defined at:
  4207 ;;		line 326 in file "src/stack/protocols/ipv4.c"
  4208 ;; Parameters:    Size  Location     Type
  4209 ;;		None
  4210 ;; Auto vars:     Size  Location     Type
  4211 ;;		None
  4212 ;; Return value:  Size  Location     Type
  4213 ;;                  1    wreg      void 
  4214 ;; Registers used:
  4215 ;;		None
  4216 ;; Tracked objects:
  4217 ;;		On entry : 0/0
  4218 ;;		On exit  : 0/0
  4219 ;;		Unchanged: 0/0
  4220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4221 ;;      Params:         0       0       0       0       0       0       0       0       0
  4222 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4223 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4224 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4225 ;;Total ram usage:        0 bytes
  4226 ;; Hardware stack levels used:    1
  4227 ;; Hardware stack levels required when called:    4
  4228 ;; This function calls:
  4229 ;;		Nothing
  4230 ;; This function is called by:
  4231 ;;		_stack_init
  4232 ;; This function uses a non-reentrant model
  4233 ;;
  4234                           
  4235                           	psect	text2
  4236  00574C                     __ptext2:
  4237                           	opt stack 0
  4238  00574C                     _ipv4_init:
  4239                           	opt stack 25
  4240                           
  4241                           ;ipv4.c: 327: fSrcAddrChanged = 0;
  4242                           
  4243                           ;incstack = 0
  4244  00574C  904E               	bcf	_fSrcAddrChanged/(0+8),_fSrcAddrChanged& (0+7),c
  4245  00574E  0012               	return		;funcret
  4246  005750                     __end_of_ipv4_init:
  4247                           	opt stack 0
  4248                           tblptru	equ	0xFF8
  4249                           tblptrh	equ	0xFF7
  4250                           tblptrl	equ	0xFF6
  4251                           tablat	equ	0xFF5
  4252                           prodh	equ	0xFF4
  4253                           prodl	equ	0xFF3
  4254                           intcon	equ	0xFF2
  4255                           intcon3	equ	0xFF0
  4256                           indf0	equ	0xFEF
  4257                           postinc0	equ	0xFEE
  4258                           plusw0	equ	0xFEB
  4259                           fsr0h	equ	0xFEA
  4260                           fsr0l	equ	0xFE9
  4261                           wreg	equ	0xFE8
  4262                           postdec1	equ	0xFE5
  4263                           fsr1l	equ	0xFE1
  4264                           indf2	equ	0xFDF
  4265                           plusw2	equ	0xFDB
  4266                           fsr2h	equ	0xFDA
  4267                           fsr2l	equ	0xFD9
  4268                           status	equ	0xFD8
  4269                           
  4270 ;; *************** function _srand *****************
  4271 ;; Defined at:
  4272 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\rand.c"
  4273 ;; Parameters:    Size  Location     Type
  4274 ;;  x               2   26[BANK0 ] unsigned int 
  4275 ;; Auto vars:     Size  Location     Type
  4276 ;;		None
  4277 ;; Return value:  Size  Location     Type
  4278 ;;                  1    wreg      void 
  4279 ;; Registers used:
  4280 ;;		status,2
  4281 ;; Tracked objects:
  4282 ;;		On entry : 0/0
  4283 ;;		On exit  : 0/0
  4284 ;;		Unchanged: 0/0
  4285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4286 ;;      Params:         0       2       0       0       0       0       0       0       0
  4287 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4288 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4289 ;;      Totals:         0       2       0       0       0       0       0       0       0
  4290 ;;Total ram usage:        2 bytes
  4291 ;; Hardware stack levels used:    1
  4292 ;; Hardware stack levels required when called:    4
  4293 ;; This function calls:
  4294 ;;		Nothing
  4295 ;; This function is called by:
  4296 ;;		_main
  4297 ;; This function uses a non-reentrant model
  4298 ;;
  4299                           
  4300                           	psect	text3
  4301  0056E8                     __ptext3:
  4302                           	opt stack 0
  4303  0056E8                     _srand:
  4304                           	opt stack 26
  4305                           
  4306                           ;incstack = 0
  4307  0056E8  C07A  F048         	movff	srand@x,_randx
  4308  0056EC  C07B  F049         	movff	srand@x+1,_randx+1
  4309  0056F0  6A4A               	clrf	_randx+2,c
  4310  0056F2  6A4B               	clrf	_randx+3,c
  4311  0056F4  0012               	return		;funcret
  4312  0056F6                     __end_of_srand:
  4313                           	opt stack 0
  4314                           tblptru	equ	0xFF8
  4315                           tblptrh	equ	0xFF7
  4316                           tblptrl	equ	0xFF6
  4317                           tablat	equ	0xFF5
  4318                           prodh	equ	0xFF4
  4319                           prodl	equ	0xFF3
  4320                           intcon	equ	0xFF2
  4321                           intcon3	equ	0xFF0
  4322                           indf0	equ	0xFEF
  4323                           postinc0	equ	0xFEE
  4324                           plusw0	equ	0xFEB
  4325                           fsr0h	equ	0xFEA
  4326                           fsr0l	equ	0xFE9
  4327                           wreg	equ	0xFE8
  4328                           postdec1	equ	0xFE5
  4329                           fsr1l	equ	0xFE1
  4330                           indf2	equ	0xFDF
  4331                           plusw2	equ	0xFDB
  4332                           fsr2h	equ	0xFDA
  4333                           fsr2l	equ	0xFD9
  4334                           status	equ	0xFD8
  4335                           
  4336 ;; *************** function _sevenSegmentInit *****************
  4337 ;; Defined at:
  4338 ;;		line 28 in file "src/system/sevenseg.c"
  4339 ;; Parameters:    Size  Location     Type
  4340 ;;		None
  4341 ;; Auto vars:     Size  Location     Type
  4342 ;;		None
  4343 ;; Return value:  Size  Location     Type
  4344 ;;                  1    wreg      void 
  4345 ;; Registers used:
  4346 ;;		wreg, status,2, status,0
  4347 ;; Tracked objects:
  4348 ;;		On entry : 0/0
  4349 ;;		On exit  : 0/0
  4350 ;;		Unchanged: 0/0
  4351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4352 ;;      Params:         0       0       0       0       0       0       0       0       0
  4353 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4354 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4355 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4356 ;;Total ram usage:        0 bytes
  4357 ;; Hardware stack levels used:    1
  4358 ;; Hardware stack levels required when called:    4
  4359 ;; This function calls:
  4360 ;;		Nothing
  4361 ;; This function is called by:
  4362 ;;		_main
  4363 ;; This function uses a non-reentrant model
  4364 ;;
  4365                           
  4366                           	psect	text4
  4367  00561C                     __ptext4:
  4368                           	opt stack 0
  4369  00561C                     _sevenSegmentInit:
  4370                           	opt stack 26
  4371                           
  4372                           ;sevenseg.c: 30: PORTC &= ~(0x07);
  4373                           
  4374                           ;incstack = 0
  4375  00561C  0EF8               	movlw	248
  4376  00561E  1682               	andwf	3970,f,c	;volatile
  4377                           
  4378                           ;sevenseg.c: 32: TRISC&= ~0x07;;
  4379  005620  0EF8               	movlw	248
  4380  005622  1694               	andwf	3988,f,c	;volatile
  4381                           
  4382                           ;sevenseg.c: 33: TRISA &=~0xff;;
  4383  005624  0E00               	movlw	0
  4384  005626  6E92               	movwf	3986,c	;volatile
  4385                           
  4386                           ;sevenseg.c: 35: ANSELA&=~0xff;;
  4387  005628  0E00               	movlw	0
  4388  00562A  010F               	movlb	15	; () banked
  4389  00562C  6F5B               	movwf	91,b	;volatile
  4390                           
  4391                           ;sevenseg.c: 36: ANSELC&= ~0x07;;
  4392  00562E  0EF8               	movlw	248
  4393  005630  175D               	andwf	93,f,b	;volatile
  4394                           
  4395                           ; BSR set to: 15
  4396                           ;sevenseg.c: 38: PORTA = 0xff;
  4397  005632  6880               	setf	3968,c	;volatile
  4398                           
  4399                           ; BSR set to: 15
  4400  005634  0012               	return		;funcret
  4401  005636                     __end_of_sevenSegmentInit:
  4402                           	opt stack 0
  4403                           tblptru	equ	0xFF8
  4404                           tblptrh	equ	0xFF7
  4405                           tblptrl	equ	0xFF6
  4406                           tablat	equ	0xFF5
  4407                           prodh	equ	0xFF4
  4408                           prodl	equ	0xFF3
  4409                           intcon	equ	0xFF2
  4410                           intcon3	equ	0xFF0
  4411                           indf0	equ	0xFEF
  4412                           postinc0	equ	0xFEE
  4413                           plusw0	equ	0xFEB
  4414                           fsr0h	equ	0xFEA
  4415                           fsr0l	equ	0xFE9
  4416                           wreg	equ	0xFE8
  4417                           postdec1	equ	0xFE5
  4418                           fsr1l	equ	0xFE1
  4419                           indf2	equ	0xFDF
  4420                           plusw2	equ	0xFDB
  4421                           fsr2h	equ	0xFDA
  4422                           fsr2l	equ	0xFD9
  4423                           status	equ	0xFD8
  4424                           
  4425 ;; *************** function _printEthernetState *****************
  4426 ;; Defined at:
  4427 ;;		line 178 in file "src/system/main.c"
  4428 ;; Parameters:    Size  Location     Type
  4429 ;;  state          15   58[BANK0 ] struct ethernetConnectio
  4430 ;; Auto vars:     Size  Location     Type
  4431 ;;		None
  4432 ;; Return value:  Size  Location     Type
  4433 ;;                  1    wreg      void 
  4434 ;; Registers used:
  4435 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4436 ;; Tracked objects:
  4437 ;;		On entry : 0/0
  4438 ;;		On exit  : 0/0
  4439 ;;		Unchanged: 0/0
  4440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4441 ;;      Params:         0      15       0       0       0       0       0       0       0
  4442 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4443 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4444 ;;      Totals:         0      15       0       0       0       0       0       0       0
  4445 ;;Total ram usage:       15 bytes
  4446 ;; Hardware stack levels used:    1
  4447 ;; Hardware stack levels required when called:    5
  4448 ;; This function calls:
  4449 ;;		_UARTTransmitText
  4450 ;; This function is called by:
  4451 ;;		_main
  4452 ;; This function uses a non-reentrant model
  4453 ;;
  4454                           
  4455                           	psect	text5
  4456  0042BC                     __ptext5:
  4457                           	opt stack 0
  4458  0042BC                     _printEthernetState:
  4459                           	opt stack 25
  4460                           
  4461                           ;main.c: 179: static ethernetConnection_t oldState;
  4462                           ;main.c: 180: if (state.link != oldState.link) {
  4463                           
  4464                           ; BSR set to: 15
  4465                           ;incstack = 0
  4466  0042BC  0102               	movlb	2	; () banked
  4467  0042BE  5148               	movf	printEthernetState@oldState& (0+255),w,b
  4468  0042C0  0100               	movlb	0	; () banked
  4469  0042C2  199A               	xorwf	printEthernetState@state& (0+255),w,b
  4470  0042C4  B4D8               	btfsc	status,2,c
  4471  0042C6  D041               	goto	l681
  4472                           
  4473                           ; BSR set to: 0
  4474                           ;main.c: 181: if (state.link == NO_LINK) {
  4475  0042C8  519A               	movf	printEthernetState@state& (0+255),w,b
  4476  0042CA  A4D8               	btfss	status,2,c
  4477  0042CC  D007               	goto	l672
  4478                           
  4479                           ; BSR set to: 0
  4480                           ;main.c: 182: UARTTransmitText("Link lost.\n\r");
  4481  0042CE  0E25               	movlw	low STR_45
  4482  0042D0  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4483  0042D2  0E7F               	movlw	high STR_45
  4484  0042D4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4485  0042D6  ECD8  F026         	call	_UARTTransmitText	;wreg free
  4486                           
  4487                           ;main.c: 183: } else if (state.link == LINK_ESTABLISHED) {
  4488  0042DA  D00A               	goto	l674
  4489  0042DC                     l672:
  4490  0042DC  0100               	movlb	0	; () banked
  4491  0042DE  059A               	decf	printEthernetState@state& (0+255),w,b
  4492  0042E0  A4D8               	btfss	status,2,c
  4493  0042E2  D006               	goto	l674
  4494                           
  4495                           ; BSR set to: 0
  4496                           ;main.c: 184: UARTTransmitText("Link established. ");
  4497  0042E4  0E70               	movlw	low STR_46
  4498  0042E6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4499  0042E8  0E7E               	movlw	high STR_46
  4500  0042EA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4501  0042EC  ECD8  F026         	call	_UARTTransmitText	;wreg free
  4502  0042F0                     l674:
  4503                           
  4504                           ;main.c: 185: }
  4505                           ;main.c: 187: if (state.link == LINK_ESTABLISHED) {
  4506  0042F0  0100               	movlb	0	; () banked
  4507  0042F2  059A               	decf	printEthernetState@state& (0+255),w,b
  4508  0042F4  A4D8               	btfss	status,2,c
  4509  0042F6  D029               	goto	l681
  4510                           
  4511                           ; BSR set to: 0
  4512                           ;main.c: 188: if (state.speed == TEN_MBIT) {
  4513  0042F8  519B               	movf	(printEthernetState@state+1)& (0+255),w,b
  4514  0042FA  A4D8               	btfss	status,2,c
  4515  0042FC  D007               	goto	l676
  4516                           
  4517                           ; BSR set to: 0
  4518                           ;main.c: 189: UARTTransmitText("Speed is 10 Mbps, ");
  4519  0042FE  0E5D               	movlw	low STR_47
  4520  004300  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4521  004302  0E7E               	movlw	high STR_47
  4522  004304  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4523  004306  ECD8  F026         	call	_UARTTransmitText	;wreg free
  4524                           
  4525                           ;main.c: 190: } else if (state.speed == HUNDRED_MBIT) {
  4526  00430A  D00A               	goto	l678
  4527  00430C                     l676:
  4528  00430C  0100               	movlb	0	; () banked
  4529  00430E  059B               	decf	(printEthernetState@state+1)& (0+255),w,b
  4530  004310  A4D8               	btfss	status,2,c
  4531  004312  D006               	goto	l678
  4532                           
  4533                           ; BSR set to: 0
  4534                           ;main.c: 191: UARTTransmitText("Speed is 100 Mbps, ");
  4535  004314  0E22               	movlw	low STR_48
  4536  004316  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4537  004318  0E7E               	movlw	high STR_48
  4538  00431A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4539  00431C  ECD8  F026         	call	_UARTTransmitText	;wreg free
  4540  004320                     l678:
  4541                           
  4542                           ;main.c: 192: }
  4543                           ;main.c: 193: if (state.duplex == HALF_DUPLEX) {
  4544  004320  0100               	movlb	0	; () banked
  4545  004322  519C               	movf	(printEthernetState@state+2)& (0+255),w,b
  4546  004324  A4D8               	btfss	status,2,c
  4547  004326  D007               	goto	l679
  4548                           
  4549                           ; BSR set to: 0
  4550                           ;main.c: 194: UARTTransmitText("connection is Half Duplex.\n\r");
  4551  004328  0E69               	movlw	low STR_49
  4552  00432A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4553  00432C  0E7D               	movlw	high STR_49
  4554  00432E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4555  004330  ECD8  F026         	call	_UARTTransmitText	;wreg free
  4556                           
  4557                           ;main.c: 195: } else if (state.duplex == FULL_DUPLEX) {
  4558  004334  D00A               	goto	l681
  4559  004336                     l679:
  4560  004336  0100               	movlb	0	; () banked
  4561  004338  059C               	decf	(printEthernetState@state+2)& (0+255),w,b
  4562  00433A  A4D8               	btfss	status,2,c
  4563  00433C  D006               	goto	l681
  4564                           
  4565                           ; BSR set to: 0
  4566                           ;main.c: 197: UARTTransmitText("connection is Full Duplex.\n\r");
  4567  00433E  0E86               	movlw	low STR_50
  4568  004340  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4569  004342  0E7D               	movlw	high STR_50
  4570  004344  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4571  004346  ECD8  F026         	call	_UARTTransmitText	;wreg free
  4572  00434A                     l681:
  4573                           
  4574                           ;main.c: 198: }
  4575                           ;main.c: 199: }
  4576                           ;main.c: 200: }
  4577                           ;main.c: 201: oldState = state;
  4578  00434A  EE20  F09A         	lfsr	2,printEthernetState@state
  4579  00434E  EE12  F048         	lfsr	1,printEthernetState@oldState
  4580  004352  0E0E               	movlw	14
  4581  004354                     u12421:
  4582  004354  CFDB FFE3          	movff	plusw2,plusw1
  4583  004358  06E8               	decf	wreg,f,c
  4584  00435A  E2FC               	bc	u12421
  4585  00435C  0012               	return		;funcret
  4586  00435E                     __end_of_printEthernetState:
  4587                           	opt stack 0
  4588                           tblptru	equ	0xFF8
  4589                           tblptrh	equ	0xFF7
  4590                           tblptrl	equ	0xFF6
  4591                           tablat	equ	0xFF5
  4592                           prodh	equ	0xFF4
  4593                           prodl	equ	0xFF3
  4594                           intcon	equ	0xFF2
  4595                           intcon3	equ	0xFF0
  4596                           indf0	equ	0xFEF
  4597                           postinc0	equ	0xFEE
  4598                           plusw0	equ	0xFEB
  4599                           fsr0h	equ	0xFEA
  4600                           fsr0l	equ	0xFE9
  4601                           wreg	equ	0xFE8
  4602                           postdec1	equ	0xFE5
  4603                           plusw1	equ	0xFE3
  4604                           fsr1l	equ	0xFE1
  4605                           indf2	equ	0xFDF
  4606                           plusw2	equ	0xFDB
  4607                           fsr2h	equ	0xFDA
  4608                           fsr2l	equ	0xFD9
  4609                           status	equ	0xFD8
  4610                           
  4611 ;; *************** function _printErrorMessage *****************
  4612 ;; Defined at:
  4613 ;;		line 204 in file "src/system/main.c"
  4614 ;; Parameters:    Size  Location     Type
  4615 ;;  err             3   58[BANK0 ] struct error
  4616 ;; Auto vars:     Size  Location     Type
  4617 ;;		None
  4618 ;; Return value:  Size  Location     Type
  4619 ;;                  1    wreg      void 
  4620 ;; Registers used:
  4621 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4622 ;; Tracked objects:
  4623 ;;		On entry : 0/0
  4624 ;;		On exit  : 0/0
  4625 ;;		Unchanged: 0/0
  4626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4627 ;;      Params:         0       3       0       0       0       0       0       0       0
  4628 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4629 ;;      Temps:          0       2       0       0       0       0       0       0       0
  4630 ;;      Totals:         0       5       0       0       0       0       0       0       0
  4631 ;;Total ram usage:        5 bytes
  4632 ;; Hardware stack levels used:    1
  4633 ;; Hardware stack levels required when called:    8
  4634 ;; This function calls:
  4635 ;;		_UARTTransmitText
  4636 ;;		_intToString
  4637 ;; This function is called by:
  4638 ;;		_main
  4639 ;; This function uses a non-reentrant model
  4640 ;;
  4641                           
  4642                           	psect	text6
  4643  0036D2                     __ptext6:
  4644                           	opt stack 0
  4645  0036D2                     _printErrorMessage:
  4646                           	opt stack 22
  4647                           
  4648                           ;main.c: 205: UARTTransmitText("[ERROR]");
  4649                           
  4650                           ;incstack = 0
  4651  0036D2  0EA4               	movlw	low STR_51
  4652  0036D4  0100               	movlb	0	; () banked
  4653  0036D6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4654  0036D8  0E7F               	movlw	high STR_51
  4655  0036DA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4656  0036DC  ECD8  F026         	call	_UARTTransmitText	;wreg free
  4657                           
  4658                           ;main.c: 206: switch (err.module) {
  4659  0036E0  D028               	goto	l685
  4660  0036E2                     
  4661                           ;main.c: 208: UARTTransmitText(" MEMORY MODULE: ");
  4662  0036E2  0EB9               	movlw	low STR_52
  4663  0036E4  0100               	movlb	0	; () banked
  4664  0036E6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4665  0036E8  0E7E               	movlw	high STR_52
  4666  0036EA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4667  0036EC  ECD8  F026         	call	_UARTTransmitText	;wreg free
  4668                           
  4669                           ;main.c: 209: break;
  4670  0036F0  D050               	goto	l693
  4671  0036F2                     
  4672                           ;main.c: 211: UARTTransmitText(" ETHERNET CONTROLLER MODULE: ");
  4673  0036F2  0E2D               	movlw	low STR_53
  4674  0036F4  0100               	movlb	0	; () banked
  4675  0036F6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4676  0036F8  0E7D               	movlw	high STR_53
  4677  0036FA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4678  0036FC  ECD8  F026         	call	_UARTTransmitText	;wreg free
  4679                           
  4680                           ;main.c: 212: break;
  4681  003700  D048               	goto	l693
  4682  003702                     
  4683                           ;main.c: 214: UARTTransmitText(" ETHERNET MODULE: ");
  4684  003702  0E83               	movlw	low STR_54
  4685  003704  0100               	movlb	0	; () banked
  4686  003706  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4687  003708  0E7E               	movlw	high STR_54
  4688  00370A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4689  00370C  ECD8  F026         	call	_UARTTransmitText	;wreg free
  4690                           
  4691                           ;main.c: 215: break;
  4692  003710  D040               	goto	l693
  4693  003712                     
  4694                           ;main.c: 217: UARTTransmitText(" ARP MODULE: ");
  4695  003712  0E17               	movlw	low STR_55
  4696  003714  0100               	movlb	0	; () banked
  4697  003716  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4698  003718  0E7F               	movlw	high STR_55
  4699  00371A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4700  00371C  ECD8  F026         	call	_UARTTransmitText	;wreg free
  4701                           
  4702                           ;main.c: 218: break;
  4703  003720  D038               	goto	l693
  4704  003722                     
  4705                           ;main.c: 220: UARTTransmitText(" IPv4 MODULE: ");
  4706  003722  0EF9               	movlw	low STR_56
  4707  003724  0100               	movlb	0	; () banked
  4708  003726  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4709  003728  0E7E               	movlw	high STR_56
  4710  00372A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4711  00372C  ECD8  F026         	call	_UARTTransmitText	;wreg free
  4712                           
  4713                           ;main.c: 223: }
  4714                           
  4715                           ;main.c: 222: break;
  4716                           
  4717                           ;main.c: 221: default:
  4718  003730  D030               	goto	l693
  4719  003732                     l685:
  4720  003732  0100               	movlb	0	; () banked
  4721  003734  519A               	movf	printErrorMessage@err& (0+255),w,b
  4722                           
  4723                           ; Switch size 1, requested type "space"
  4724                           ; Number of cases is 5, Range of values is 0 to 4
  4725                           ; switch strategies available:
  4726                           ; Name         Instructions Cycles
  4727                           ; simple_byte           16     9 (average)
  4728                           ;	Chosen strategy is simple_byte
  4729  003736  0A00               	xorlw	0	; case 0
  4730  003738  B4D8               	btfsc	status,2,c
  4731  00373A  D7D3               	goto	l686
  4732  00373C  0A01               	xorlw	1	; case 1
  4733  00373E  B4D8               	btfsc	status,2,c
  4734  003740  D7D8               	goto	l688
  4735  003742  0A03               	xorlw	3	; case 2
  4736  003744  B4D8               	btfsc	status,2,c
  4737  003746  D7DD               	goto	l689
  4738  003748  0A01               	xorlw	1	; case 3
  4739  00374A  B4D8               	btfsc	status,2,c
  4740  00374C  D7E2               	goto	l690
  4741  00374E  0A07               	xorlw	7	; case 4
  4742  003750  B4D8               	btfsc	status,2,c
  4743  003752  D7E7               	goto	l691
  4744                           
  4745                           ; BSR set to: 0
  4746                           ;main.c: 224: switch (err.code) {
  4747  003754  D01E               	goto	l693
  4748  003756                     
  4749                           ; BSR set to: 0
  4750                           ;main.c: 226: UARTTransmitText("Ethernet controller is unresponsive.");
  4751                           
  4752                           ; BSR set to: 0
  4753  003756  0EB3               	movlw	low STR_57
  4754  003758  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4755  00375A  0E7B               	movlw	high STR_57
  4756  00375C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4757  00375E  ECD8  F026         	call	_UARTTransmitText	;wreg free
  4758                           
  4759                           ;main.c: 227: break;
  4760  003762  D030               	goto	l695
  4761  003764                     
  4762                           ;main.c: 229: UARTTransmitText("Ethernet controller has returned an unknown device ID.")
      +                          ;
  4763  003764  0E50               	movlw	low STR_58
  4764  003766  0100               	movlb	0	; () banked
  4765  003768  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4766  00376A  0E7A               	movlw	high STR_58
  4767  00376C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4768  00376E  ECD8  F026         	call	_UARTTransmitText	;wreg free
  4769                           
  4770                           ;main.c: 230: break;
  4771  003772  D028               	goto	l695
  4772  003774                     
  4773                           ;main.c: 232: UARTTransmitText("IP address could not be resolved.");
  4774  003774  0E8B               	movlw	low STR_59
  4775  003776  0100               	movlb	0	; () banked
  4776  003778  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4777  00377A  0E7C               	movlw	high STR_59
  4778  00377C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4779  00377E  ECD8  F026         	call	_UARTTransmitText	;wreg free
  4780  003782                     
  4781                           ;main.c: 235: UARTTransmitText("An unknown error has occured.");
  4782                           
  4783                           ;main.c: 234: case ERROR_ETHERNET_CONTROLLER_UNKNOWN:
  4784  003782  0E4B               	movlw	low STR_60
  4785  003784  0100               	movlb	0	; () banked
  4786  003786  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4787  003788  0E7D               	movlw	high STR_60
  4788  00378A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4789  00378C  ECD8  F026         	call	_UARTTransmitText	;wreg free
  4790                           
  4791                           ;main.c: 237: }
  4792                           
  4793                           ;main.c: 236: break;
  4794  003790  D019               	goto	l695
  4795  003792                     l693:
  4796  003792  EE20  F09B         	lfsr	2,printErrorMessage@err+1
  4797  003796  CFDE F09D          	movff	postinc2,??_printErrorMessage
  4798  00379A  CFDD F09E          	movff	postdec2,??_printErrorMessage+1
  4799                           
  4800                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4801                           ; Switch size 1, requested type "space"
  4802                           ; Number of cases is 1, Range of values is 1 to 1
  4803                           ; switch strategies available:
  4804                           ; Name         Instructions Cycles
  4805                           ; simple_byte            4     3 (average)
  4806                           ;	Chosen strategy is simple_byte
  4807  00379E  0100               	movlb	0	; () banked
  4808  0037A0  519E               	movf	(??_printErrorMessage+1)& (0+255),w,b
  4809  0037A2  0A01               	xorlw	1	; case 1
  4810  0037A4  A4D8               	btfss	status,2,c
  4811  0037A6  D7ED               	goto	l698
  4812                           
  4813                           ; BSR set to: 0
  4814                           ; Switch size 1, requested type "space"
  4815                           ; Number of cases is 4, Range of values is 45 to 147
  4816                           ; switch strategies available:
  4817                           ; Name         Instructions Cycles
  4818                           ; simple_byte           13     7 (average)
  4819                           ;	Chosen strategy is simple_byte
  4820  0037A8  519D               	movf	??_printErrorMessage& (0+255),w,b
  4821  0037AA  0A2D               	xorlw	45	; case 45
  4822  0037AC  B4D8               	btfsc	status,2,c
  4823  0037AE  D7DA               	goto	l696
  4824  0037B0  0A03               	xorlw	3	; case 46
  4825  0037B2  B4D8               	btfsc	status,2,c
  4826  0037B4  D7D0               	goto	l694
  4827  0037B6  0AA1               	xorlw	161	; case 143
  4828  0037B8  B4D8               	btfsc	status,2,c
  4829  0037BA  D7E3               	goto	l698
  4830  0037BC  0A1C               	xorlw	28	; case 147
  4831  0037BE  B4D8               	btfsc	status,2,c
  4832  0037C0  D7D9               	goto	l697
  4833  0037C2  D7DF               	goto	l698
  4834  0037C4                     l695:
  4835                           
  4836                           ;main.c: 239: UARTTransmitText(" (Code: ");
  4837                           
  4838                           ; BSR set to: 0
  4839  0037C4  0E8A               	movlw	low STR_61
  4840  0037C6  0100               	movlb	0	; () banked
  4841  0037C8  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4842  0037CA  0E7F               	movlw	high STR_61
  4843  0037CC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4844  0037CE  ECD8  F026         	call	_UARTTransmitText	;wreg free
  4845                           
  4846                           ;main.c: 240: UARTTransmitText(intToString(err.code));
  4847  0037D2  C09B  F084         	movff	printErrorMessage@err+1,intToString@val
  4848  0037D6  C09C  F085         	movff	printErrorMessage@err+2,intToString@val+1
  4849  0037DA  0100               	movlb	0	; () banked
  4850  0037DC  6B86               	clrf	(intToString@val+2)& (0+255),b
  4851  0037DE  6B87               	clrf	(intToString@val+3)& (0+255),b
  4852  0037E0  EC66  F029         	call	_intToString	;wreg free
  4853  0037E4  C084  F098         	movff	?_intToString,UARTTransmitText@str
  4854  0037E8  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  4855  0037EC  ECD8  F026         	call	_UARTTransmitText	;wreg free
  4856                           
  4857                           ;main.c: 241: UARTTransmitText(").\n\r");
  4858  0037F0  0ECF               	movlw	low STR_62
  4859  0037F2  0100               	movlb	0	; () banked
  4860  0037F4  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4861  0037F6  0E7F               	movlw	high STR_62
  4862  0037F8  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4863  0037FA  ECD8  F026         	call	_UARTTransmitText	;wreg free
  4864  0037FE  0012               	return		;funcret
  4865  003800                     __end_of_printErrorMessage:
  4866                           	opt stack 0
  4867                           tblptru	equ	0xFF8
  4868                           tblptrh	equ	0xFF7
  4869                           tblptrl	equ	0xFF6
  4870                           tablat	equ	0xFF5
  4871                           prodh	equ	0xFF4
  4872                           prodl	equ	0xFF3
  4873                           intcon	equ	0xFF2
  4874                           intcon3	equ	0xFF0
  4875                           indf0	equ	0xFEF
  4876                           postinc0	equ	0xFEE
  4877                           plusw0	equ	0xFEB
  4878                           fsr0h	equ	0xFEA
  4879                           fsr0l	equ	0xFE9
  4880                           wreg	equ	0xFE8
  4881                           postdec1	equ	0xFE5
  4882                           plusw1	equ	0xFE3
  4883                           fsr1l	equ	0xFE1
  4884                           indf2	equ	0xFDF
  4885                           postinc2	equ	0xFDE
  4886                           postdec2	equ	0xFDD
  4887                           plusw2	equ	0xFDB
  4888                           fsr2h	equ	0xFDA
  4889                           fsr2l	equ	0xFD9
  4890                           status	equ	0xFD8
  4891                           
  4892 ;; *************** function _ipv4_writeHeaderIntoBuffer *****************
  4893 ;; Defined at:
  4894 ;;		line 104 in file "src/stack/protocols/ipv4.c"
  4895 ;; Parameters:    Size  Location     Type
  4896 ;;  header         23    0[BANK0 ] struct ipv4_header
  4897 ;;  ptr             2   23[BANK0 ] PTR unsigned char 
  4898 ;;		 -> main@headerBuf(32), 
  4899 ;; Auto vars:     Size  Location     Type
  4900 ;;		None
  4901 ;; Return value:  Size  Location     Type
  4902 ;;                  1    wreg      void 
  4903 ;; Registers used:
  4904 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  4905 ;; Tracked objects:
  4906 ;;		On entry : 0/0
  4907 ;;		On exit  : 0/0
  4908 ;;		Unchanged: 0/0
  4909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4910 ;;      Params:         0      25       0       0       0       0       0       0       0
  4911 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4912 ;;      Temps:          0       2       0       0       0       0       0       0       0
  4913 ;;      Totals:         0      27       0       0       0       0       0       0       0
  4914 ;;Total ram usage:       27 bytes
  4915 ;; Hardware stack levels used:    1
  4916 ;; Hardware stack levels required when called:    4
  4917 ;; This function calls:
  4918 ;;		Nothing
  4919 ;; This function is called by:
  4920 ;;		_main
  4921 ;; This function uses a non-reentrant model
  4922 ;;
  4923                           
  4924                           	psect	text7
  4925  003012                     __ptext7:
  4926                           	opt stack 0
  4927  003012                     _ipv4_writeHeaderIntoBuffer:
  4928                           	opt stack 26
  4929                           
  4930                           ;ipv4.c: 105: *ptr = (header.version << 4) | (header.headerLength);
  4931                           
  4932                           ;incstack = 0
  4933  003012  0100               	movlb	0	; () banked
  4934  003014  3960               	swapf	ipv4_writeHeaderIntoBuffer@header& (0+255),w,b
  4935  003016  0BF0               	andlw	240
  4936  003018  1161               	iorwf	(ipv4_writeHeaderIntoBuffer@header+1)& (0+255),w,b
  4937  00301A  C077  FFD9         	movff	ipv4_writeHeaderIntoBuffer@ptr,fsr2l
  4938  00301E  C078  FFDA         	movff	ipv4_writeHeaderIntoBuffer@ptr+1,fsr2h
  4939  003022  6EDF               	movwf	indf2,c
  4940                           
  4941                           ;ipv4.c: 106: *(ptr + 1) = (header.dscp << 2) | (header.ecn & 0x03);
  4942  003024  EE20 F001          	lfsr	2,1
  4943  003028  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  4944  00302A  26D9               	addwf	fsr2l,f,c
  4945  00302C  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  4946  00302E  22DA               	addwfc	fsr2h,f,c
  4947  003030  C063  F079         	movff	ipv4_writeHeaderIntoBuffer@header+3,??_ipv4_writeHeaderIntoBuffer
  4948  003034  0E03               	movlw	3
  4949  003036  1779               	andwf	??_ipv4_writeHeaderIntoBuffer& (0+255),f,b
  4950  003038  4562               	rlncf	(ipv4_writeHeaderIntoBuffer@header+2)& (0+255),w,b
  4951  00303A  46E8               	rlncf	wreg,f,c
  4952  00303C  0BFC               	andlw	252
  4953  00303E  1179               	iorwf	??_ipv4_writeHeaderIntoBuffer& (0+255),w,b
  4954  003040  6EDF               	movwf	indf2,c
  4955                           
  4956                           ;ipv4.c: 107: *(ptr + 2) = (header.totalLength & 0xff00) >> 8;
  4957  003042  EE20 F002          	lfsr	2,2
  4958  003046  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  4959  003048  26D9               	addwf	fsr2l,f,c
  4960  00304A  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  4961  00304C  22DA               	addwfc	fsr2h,f,c
  4962  00304E  5165               	movf	(ipv4_writeHeaderIntoBuffer@header+5)& (0+255),w,b
  4963  003050  6EDF               	movwf	indf2,c
  4964                           
  4965                           ;ipv4.c: 108: *(ptr + 3) = header.totalLength & 0x00ff;
  4966  003052  EE20 F003          	lfsr	2,3
  4967  003056  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  4968  003058  26D9               	addwf	fsr2l,f,c
  4969  00305A  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  4970  00305C  22DA               	addwfc	fsr2h,f,c
  4971  00305E  C064  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+4,indf2
  4972                           
  4973                           ;ipv4.c: 109: *(ptr + 4) = (header.identification & 0xff00) >> 8;
  4974  003062  EE20 F004          	lfsr	2,4
  4975  003066  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  4976  003068  26D9               	addwf	fsr2l,f,c
  4977  00306A  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  4978  00306C  22DA               	addwfc	fsr2h,f,c
  4979  00306E  5167               	movf	(ipv4_writeHeaderIntoBuffer@header+7)& (0+255),w,b
  4980  003070  6EDF               	movwf	indf2,c
  4981                           
  4982                           ;ipv4.c: 110: *(ptr + 5) = header.identification & 0x00ff;
  4983  003072  EE20 F005          	lfsr	2,5
  4984  003076  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  4985  003078  26D9               	addwf	fsr2l,f,c
  4986  00307A  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  4987  00307C  22DA               	addwfc	fsr2h,f,c
  4988  00307E  C066  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+6,indf2
  4989                           
  4990                           ; BSR set to: 0
  4991                           ;ipv4.c: 111: *(ptr + 6) = (header.flags << 5) | ((header.fragmentOffset & 0x1f00) >> 8)
      +                          ;
  4992  003082  EE20 F006          	lfsr	2,6
  4993  003086  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  4994  003088  26D9               	addwf	fsr2l,f,c
  4995  00308A  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  4996  00308C  22DA               	addwfc	fsr2h,f,c
  4997  00308E  EE10  F069         	lfsr	1,ipv4_writeHeaderIntoBuffer@header+9
  4998  003092  CFE6 F079          	movff	postinc1,??_ipv4_writeHeaderIntoBuffer
  4999  003096  CFE5 F07A          	movff	postdec1,??_ipv4_writeHeaderIntoBuffer+1
  5000  00309A  C07A  F079         	movff	??_ipv4_writeHeaderIntoBuffer+1,??_ipv4_writeHeaderIntoBuffer
  5001  00309E  6B7A               	clrf	(??_ipv4_writeHeaderIntoBuffer+1)& (0+255),b
  5002  0030A0  0E1F               	movlw	31
  5003  0030A2  1779               	andwf	??_ipv4_writeHeaderIntoBuffer& (0+255),f,b
  5004  0030A4  3968               	swapf	(ipv4_writeHeaderIntoBuffer@header+8)& (0+255),w,b
  5005  0030A6  46E8               	rlncf	wreg,f,c
  5006  0030A8  0BE0               	andlw	224
  5007  0030AA  1179               	iorwf	??_ipv4_writeHeaderIntoBuffer& (0+255),w,b
  5008  0030AC  6EDF               	movwf	indf2,c
  5009                           
  5010                           ; BSR set to: 0
  5011                           ;ipv4.c: 112: *(ptr + 7) = (header.fragmentOffset & 0x00ff);
  5012  0030AE  EE20 F007          	lfsr	2,7
  5013  0030B2  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  5014  0030B4  26D9               	addwf	fsr2l,f,c
  5015  0030B6  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  5016  0030B8  22DA               	addwfc	fsr2h,f,c
  5017  0030BA  C069  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+9,indf2
  5018                           
  5019                           ; BSR set to: 0
  5020                           ;ipv4.c: 113: *(ptr + 8) = (header.timeToLive);
  5021  0030BE  EE20 F008          	lfsr	2,8
  5022  0030C2  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  5023  0030C4  26D9               	addwf	fsr2l,f,c
  5024  0030C6  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  5025  0030C8  22DA               	addwfc	fsr2h,f,c
  5026  0030CA  C06B  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+11,indf2
  5027                           
  5028                           ; BSR set to: 0
  5029                           ;ipv4.c: 114: *(ptr + 9) = (header.protocol);
  5030  0030CE  EE20 F009          	lfsr	2,9
  5031  0030D2  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  5032  0030D4  26D9               	addwf	fsr2l,f,c
  5033  0030D6  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  5034  0030D8  22DA               	addwfc	fsr2h,f,c
  5035  0030DA  C06C  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+12,indf2
  5036                           
  5037                           ; BSR set to: 0
  5038                           ;ipv4.c: 115: *(ptr + 10) = (header.checksum & 0xff00) >> 8;
  5039  0030DE  EE20 F00A          	lfsr	2,10
  5040  0030E2  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  5041  0030E4  26D9               	addwf	fsr2l,f,c
  5042  0030E6  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  5043  0030E8  22DA               	addwfc	fsr2h,f,c
  5044  0030EA  516E               	movf	(ipv4_writeHeaderIntoBuffer@header+14)& (0+255),w,b
  5045  0030EC  6EDF               	movwf	indf2,c
  5046                           
  5047                           ; BSR set to: 0
  5048                           ;ipv4.c: 116: *(ptr + 11) = (header.checksum & 0x00ff);
  5049  0030EE  EE20 F00B          	lfsr	2,11
  5050  0030F2  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  5051  0030F4  26D9               	addwf	fsr2l,f,c
  5052  0030F6  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  5053  0030F8  22DA               	addwfc	fsr2h,f,c
  5054  0030FA  C06D  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+13,indf2
  5055                           
  5056                           ; BSR set to: 0
  5057                           ;ipv4.c: 117: *(ptr + 12) = (header.source.address[0]);
  5058  0030FE  EE20 F00C          	lfsr	2,12
  5059  003102  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  5060  003104  26D9               	addwf	fsr2l,f,c
  5061  003106  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  5062  003108  22DA               	addwfc	fsr2h,f,c
  5063  00310A  C06F  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+15,indf2
  5064                           
  5065                           ; BSR set to: 0
  5066                           ;ipv4.c: 118: *(ptr + 13) = (header.source.address[1]);
  5067  00310E  EE20 F00D          	lfsr	2,13
  5068  003112  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  5069  003114  26D9               	addwf	fsr2l,f,c
  5070  003116  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  5071  003118  22DA               	addwfc	fsr2h,f,c
  5072  00311A  C070  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+16,indf2
  5073                           
  5074                           ; BSR set to: 0
  5075                           ;ipv4.c: 119: *(ptr + 14) = (header.source.address[2]);
  5076  00311E  EE20 F00E          	lfsr	2,14
  5077  003122  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  5078  003124  26D9               	addwf	fsr2l,f,c
  5079  003126  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  5080  003128  22DA               	addwfc	fsr2h,f,c
  5081  00312A  C071  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+17,indf2
  5082                           
  5083                           ; BSR set to: 0
  5084                           ;ipv4.c: 120: *(ptr + 15) = (header.source.address[3]);
  5085  00312E  EE20 F00F          	lfsr	2,15
  5086  003132  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  5087  003134  26D9               	addwf	fsr2l,f,c
  5088  003136  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  5089  003138  22DA               	addwfc	fsr2h,f,c
  5090  00313A  C072  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+18,indf2
  5091                           
  5092                           ; BSR set to: 0
  5093                           ;ipv4.c: 121: *(ptr + 16) = (header.destination.address[0]);
  5094  00313E  EE20 F010          	lfsr	2,16
  5095  003142  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  5096  003144  26D9               	addwf	fsr2l,f,c
  5097  003146  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  5098  003148  22DA               	addwfc	fsr2h,f,c
  5099  00314A  C073  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+19,indf2
  5100                           
  5101                           ; BSR set to: 0
  5102                           ;ipv4.c: 122: *(ptr + 17) = (header.destination.address[1]);
  5103  00314E  EE20 F011          	lfsr	2,17
  5104  003152  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  5105  003154  26D9               	addwf	fsr2l,f,c
  5106  003156  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  5107  003158  22DA               	addwfc	fsr2h,f,c
  5108  00315A  C074  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+20,indf2
  5109                           
  5110                           ; BSR set to: 0
  5111                           ;ipv4.c: 123: *(ptr + 18) = (header.destination.address[2]);
  5112  00315E  EE20 F012          	lfsr	2,18
  5113  003162  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  5114  003164  26D9               	addwf	fsr2l,f,c
  5115  003166  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  5116  003168  22DA               	addwfc	fsr2h,f,c
  5117  00316A  C075  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+21,indf2
  5118                           
  5119                           ; BSR set to: 0
  5120                           ;ipv4.c: 124: *(ptr + 19) = (header.destination.address[3]);
  5121  00316E  EE20 F013          	lfsr	2,19
  5122  003172  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  5123  003174  26D9               	addwf	fsr2l,f,c
  5124  003176  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  5125  003178  22DA               	addwfc	fsr2h,f,c
  5126  00317A  C076  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+22,indf2
  5127                           
  5128                           ; BSR set to: 0
  5129  00317E  0012               	return		;funcret
  5130  003180                     __end_of_ipv4_writeHeaderIntoBuffer:
  5131                           	opt stack 0
  5132                           tblptru	equ	0xFF8
  5133                           tblptrh	equ	0xFF7
  5134                           tblptrl	equ	0xFF6
  5135                           tablat	equ	0xFF5
  5136                           prodh	equ	0xFF4
  5137                           prodl	equ	0xFF3
  5138                           intcon	equ	0xFF2
  5139                           intcon3	equ	0xFF0
  5140                           indf0	equ	0xFEF
  5141                           postinc0	equ	0xFEE
  5142                           plusw0	equ	0xFEB
  5143                           fsr0h	equ	0xFEA
  5144                           fsr0l	equ	0xFE9
  5145                           wreg	equ	0xFE8
  5146                           postinc1	equ	0xFE6
  5147                           postdec1	equ	0xFE5
  5148                           plusw1	equ	0xFE3
  5149                           fsr1l	equ	0xFE1
  5150                           indf2	equ	0xFDF
  5151                           postinc2	equ	0xFDE
  5152                           postdec2	equ	0xFDD
  5153                           plusw2	equ	0xFDB
  5154                           fsr2h	equ	0xFDA
  5155                           fsr2l	equ	0xFD9
  5156                           status	equ	0xFD8
  5157                           
  5158 ;; *************** function _ipv4_txFrameRequest *****************
  5159 ;; Defined at:
  5160 ;;		line 37 in file "src/stack/protocols/ipv4.c"
  5161 ;; Parameters:    Size  Location     Type
  5162 ;;  packet          2   71[BANK0 ] PTR struct ipv4_packet
  5163 ;;		 -> stack(123), 
  5164 ;; Auto vars:     Size  Location     Type
  5165 ;;		None
  5166 ;; Return value:  Size  Location     Type
  5167 ;;                  1    wreg      void 
  5168 ;; Registers used:
  5169 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5170 ;; Tracked objects:
  5171 ;;		On entry : 0/0
  5172 ;;		On exit  : 0/0
  5173 ;;		Unchanged: 0/0
  5174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5175 ;;      Params:         0       2       0       0       0       0       0       0       0
  5176 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5177 ;;      Temps:          0       4       0       0       0       0       0       0       0
  5178 ;;      Totals:         0       6       0       0       0       0       0       0       0
  5179 ;;Total ram usage:        6 bytes
  5180 ;; Hardware stack levels used:    1
  5181 ;; Hardware stack levels required when called:    9
  5182 ;; This function calls:
  5183 ;;		_ethernet_txFrameRequest
  5184 ;; This function is called by:
  5185 ;;		_main
  5186 ;; This function uses a non-reentrant model
  5187 ;;
  5188                           
  5189                           	psect	text8
  5190  00359C                     __ptext8:
  5191                           	opt stack 0
  5192  00359C                     _ipv4_txFrameRequest:
  5193                           	opt stack 21
  5194                           
  5195                           ;ipv4.c: 38: packet->ethernet.length = packet->ipv4Header.totalLength + 8;
  5196                           
  5197                           ; BSR set to: 0
  5198                           ;incstack = 0
  5199  00359C  0100               	movlb	0	; () banked
  5200  00359E  EE20 F004          	lfsr	2,4
  5201  0035A2  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  5202  0035A4  26D9               	addwf	fsr2l,f,c
  5203  0035A6  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  5204  0035A8  22DA               	addwfc	fsr2h,f,c
  5205  0035AA  CFDE F0A9          	movff	postinc2,??_ipv4_txFrameRequest
  5206  0035AE  CFDD F0AA          	movff	postdec2,??_ipv4_txFrameRequest+1
  5207  0035B2  0E08               	movlw	8
  5208  0035B4  27A9               	addwf	??_ipv4_txFrameRequest& (0+255),f,b
  5209  0035B6  0E00               	movlw	0
  5210  0035B8  23AA               	addwfc	(??_ipv4_txFrameRequest+1)& (0+255),f,b
  5211  0035BA  EE20 F020          	lfsr	2,32
  5212  0035BE  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  5213  0035C0  26D9               	addwf	fsr2l,f,c
  5214  0035C2  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  5215  0035C4  22DA               	addwfc	fsr2h,f,c
  5216  0035C6  C0A9  FFDE         	movff	??_ipv4_txFrameRequest,postinc2
  5217  0035CA  C0AA  FFDD         	movff	??_ipv4_txFrameRequest+1,postdec2
  5218                           
  5219                           ;ipv4.c: 39: packet->ethernet.ethertype = ETHERTYPE_IPv4;
  5220  0035CE  EE20 F02E          	lfsr	2,46
  5221  0035D2  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  5222  0035D4  26D9               	addwf	fsr2l,f,c
  5223  0035D6  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  5224  0035D8  22DA               	addwfc	fsr2h,f,c
  5225  0035DA  0E00               	movlw	0
  5226  0035DC  6EDE               	movwf	postinc2,c
  5227  0035DE  0E08               	movlw	8
  5228  0035E0  6EDD               	movwf	postdec2,c
  5229                           
  5230                           ; BSR set to: 0
  5231                           ;ipv4.c: 40: ethernet_txFrameRequest(&packet->ethernet);
  5232  0035E2  0E20               	movlw	32
  5233  0035E4  25A7               	addwf	ipv4_txFrameRequest@packet& (0+255),w,b
  5234  0035E6  6FA2               	movwf	ethernet_txFrameRequest@frame& (0+255),b
  5235  0035E8  0E00               	movlw	0
  5236  0035EA  21A8               	addwfc	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  5237  0035EC  6FA3               	movwf	(ethernet_txFrameRequest@frame+1)& (0+255),b
  5238  0035EE  EC1F  F01F         	call	_ethernet_txFrameRequest	;wreg free
  5239                           
  5240                           ;ipv4.c: 42: packet->memory.fIsAssigned = packet->ethernet.memory.fIsAssigned;
  5241  0035F2  0100               	movlb	0	; () banked
  5242  0035F4  EE20 F036          	lfsr	2,54
  5243  0035F8  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  5244  0035FA  26D9               	addwf	fsr2l,f,c
  5245  0035FC  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  5246  0035FE  22DA               	addwfc	fsr2h,f,c
  5247  003600  EE10 F01D          	lfsr	1,29
  5248  003604  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  5249  003606  26E1               	addwf	fsr1l,f,c
  5250  003608  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  5251  00360A  22E2               	addwfc	fsr1h,f,c
  5252  00360C  CFDF FFE7          	movff	indf2,indf1
  5253                           
  5254                           ; BSR set to: 0
  5255                           ;ipv4.c: 43: packet->memory.fOutOfMemory = packet->ethernet.memory.fOutOfMemory;
  5256  003610  EE20 F037          	lfsr	2,55
  5257  003614  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  5258  003616  26D9               	addwf	fsr2l,f,c
  5259  003618  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  5260  00361A  22DA               	addwfc	fsr2h,f,c
  5261  00361C  EE10 F01E          	lfsr	1,30
  5262  003620  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  5263  003622  26E1               	addwf	fsr1l,f,c
  5264  003624  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  5265  003626  22E2               	addwfc	fsr1h,f,c
  5266  003628  CFDF FFE7          	movff	indf2,indf1
  5267                           
  5268                           ; BSR set to: 0
  5269                           ;ipv4.c: 44: packet->memory.index = packet->ethernet.memory.index;
  5270  00362C  EE20 F038          	lfsr	2,56
  5271  003630  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  5272  003632  26D9               	addwf	fsr2l,f,c
  5273  003634  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  5274  003636  22DA               	addwfc	fsr2h,f,c
  5275  003638  EE10 F01F          	lfsr	1,31
  5276  00363C  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  5277  00363E  26E1               	addwf	fsr1l,f,c
  5278  003640  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  5279  003642  22E2               	addwfc	fsr1h,f,c
  5280  003644  CFDF FFE7          	movff	indf2,indf1
  5281                           
  5282                           ; BSR set to: 0
  5283                           ;ipv4.c: 45: packet->memory.start = packet->ethernet.memory.start + 8;
  5284  003648  EE20 F030          	lfsr	2,48
  5285  00364C  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  5286  00364E  26D9               	addwf	fsr2l,f,c
  5287  003650  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  5288  003652  22DA               	addwfc	fsr2h,f,c
  5289  003654  CFDE F0A9          	movff	postinc2,??_ipv4_txFrameRequest
  5290  003658  CFDD F0AA          	movff	postdec2,??_ipv4_txFrameRequest+1
  5291  00365C  0E08               	movlw	8
  5292  00365E  27A9               	addwf	??_ipv4_txFrameRequest& (0+255),f,b
  5293  003660  0E00               	movlw	0
  5294  003662  23AA               	addwfc	(??_ipv4_txFrameRequest+1)& (0+255),f,b
  5295  003664  EE20 F017          	lfsr	2,23
  5296  003668  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  5297  00366A  26D9               	addwf	fsr2l,f,c
  5298  00366C  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  5299  00366E  22DA               	addwfc	fsr2h,f,c
  5300  003670  C0A9  FFDE         	movff	??_ipv4_txFrameRequest,postinc2
  5301  003674  C0AA  FFDD         	movff	??_ipv4_txFrameRequest+1,postdec2
  5302                           
  5303                           ; BSR set to: 0
  5304                           ;ipv4.c: 46: packet->memory.end = packet->ethernet.memory.end;
  5305  003678  EE20 F032          	lfsr	2,50
  5306  00367C  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  5307  00367E  26D9               	addwf	fsr2l,f,c
  5308  003680  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  5309  003682  22DA               	addwfc	fsr2h,f,c
  5310  003684  EE10 F019          	lfsr	1,25
  5311  003688  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  5312  00368A  26E1               	addwf	fsr1l,f,c
  5313  00368C  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  5314  00368E  22E2               	addwfc	fsr1h,f,c
  5315  003690  CFDE FFE6          	movff	postinc2,postinc1
  5316  003694  CFDD FFE5          	movff	postdec2,postdec1
  5317                           
  5318                           ; BSR set to: 0
  5319                           ;ipv4.c: 47: packet->memory.length = packet->ethernet.memory.length - 8;
  5320  003698  0EF8               	movlw	248
  5321  00369A  6FA9               	movwf	??_ipv4_txFrameRequest& (0+255),b
  5322  00369C  0EFF               	movlw	255
  5323  00369E  6FAA               	movwf	(??_ipv4_txFrameRequest+1)& (0+255),b
  5324  0036A0  EE20 F034          	lfsr	2,52
  5325  0036A4  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  5326  0036A6  26D9               	addwf	fsr2l,f,c
  5327  0036A8  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  5328  0036AA  22DA               	addwfc	fsr2h,f,c
  5329  0036AC  CFDE F0AB          	movff	postinc2,??_ipv4_txFrameRequest+2
  5330  0036B0  CFDD F0AC          	movff	postdec2,??_ipv4_txFrameRequest+3
  5331  0036B4  51A9               	movf	??_ipv4_txFrameRequest& (0+255),w,b
  5332  0036B6  27AB               	addwf	(??_ipv4_txFrameRequest+2)& (0+255),f,b
  5333  0036B8  51AA               	movf	(??_ipv4_txFrameRequest+1)& (0+255),w,b
  5334  0036BA  23AC               	addwfc	(??_ipv4_txFrameRequest+3)& (0+255),f,b
  5335  0036BC  EE20 F01B          	lfsr	2,27
  5336  0036C0  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  5337  0036C2  26D9               	addwf	fsr2l,f,c
  5338  0036C4  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  5339  0036C6  22DA               	addwfc	fsr2h,f,c
  5340  0036C8  C0AB  FFDE         	movff	??_ipv4_txFrameRequest+2,postinc2
  5341  0036CC  C0AC  FFDD         	movff	??_ipv4_txFrameRequest+3,postdec2
  5342                           
  5343                           ; BSR set to: 0
  5344  0036D0  0012               	return		;funcret
  5345  0036D2                     __end_of_ipv4_txFrameRequest:
  5346                           	opt stack 0
  5347                           tblptru	equ	0xFF8
  5348                           tblptrh	equ	0xFF7
  5349                           tblptrl	equ	0xFF6
  5350                           tablat	equ	0xFF5
  5351                           prodh	equ	0xFF4
  5352                           prodl	equ	0xFF3
  5353                           intcon	equ	0xFF2
  5354                           intcon3	equ	0xFF0
  5355                           indf0	equ	0xFEF
  5356                           postinc0	equ	0xFEE
  5357                           plusw0	equ	0xFEB
  5358                           fsr0h	equ	0xFEA
  5359                           fsr0l	equ	0xFE9
  5360                           wreg	equ	0xFE8
  5361                           indf1	equ	0xFE7
  5362                           postinc1	equ	0xFE6
  5363                           postdec1	equ	0xFE5
  5364                           plusw1	equ	0xFE3
  5365                           fsr1h	equ	0xFE2
  5366                           fsr1l	equ	0xFE1
  5367                           indf2	equ	0xFDF
  5368                           postinc2	equ	0xFDE
  5369                           postdec2	equ	0xFDD
  5370                           plusw2	equ	0xFDB
  5371                           fsr2h	equ	0xFDA
  5372                           fsr2l	equ	0xFD9
  5373                           status	equ	0xFD8
  5374                           
  5375 ;; *************** function _ipv4_streamToTransmissionBuffer *****************
  5376 ;; Defined at:
  5377 ;;		line 93 in file "src/stack/protocols/ipv4.c"
  5378 ;; Parameters:    Size  Location     Type
  5379 ;;  data            1    wreg     unsigned char 
  5380 ;;  packet         66   30[BANK0 ] struct ipv4_packet
  5381 ;; Auto vars:     Size  Location     Type
  5382 ;;  data            1   98[BANK0 ] unsigned char 
  5383 ;;  ethernetPack    2   96[BANK0 ] unsigned int 
  5384 ;;  remainingLen    2    0        unsigned int 
  5385 ;; Return value:  Size  Location     Type
  5386 ;;                  1    wreg      void 
  5387 ;; Registers used:
  5388 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  5389 ;; Tracked objects:
  5390 ;;		On entry : 0/0
  5391 ;;		On exit  : 0/0
  5392 ;;		Unchanged: 0/0
  5393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5394 ;;      Params:         0      66       0       0       0       0       0       0       0
  5395 ;;      Locals:         0       3       0       0       0       0       0       0       0
  5396 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5397 ;;      Totals:         0      69       0       0       0       0       0       0       0
  5398 ;;Total ram usage:       69 bytes
  5399 ;; Hardware stack levels used:    1
  5400 ;; Hardware stack levels required when called:    8
  5401 ;; This function calls:
  5402 ;;		_ethernetController_streamToTransmitBuffer
  5403 ;; This function is called by:
  5404 ;;		_main
  5405 ;; This function uses a non-reentrant model
  5406 ;;
  5407                           
  5408                           	psect	text9
  5409  005462                     __ptext9:
  5410                           	opt stack 0
  5411  005462                     _ipv4_streamToTransmissionBuffer:
  5412                           	opt stack 22
  5413                           
  5414                           ; BSR set to: 0
  5415                           ;incstack = 0
  5416                           ;ipv4_streamToTransmissionBuffer@data stored from wreg
  5417  005462  0100               	movlb	0	; () banked
  5418  005464  6FC2               	movwf	ipv4_streamToTransmissionBuffer@data& (0+255),b
  5419                           
  5420                           ;ipv4.c: 94: uint16_t ethernetPacketLength = packet.ipv4Header.totalLength;
  5421  005466  C082  F0C0         	movff	ipv4_streamToTransmissionBuffer@packet+4,ipv4_streamToTransmissionBuffer@ethernet
      +                          PacketLength
  5422  00546A  C083  F0C1         	movff	ipv4_streamToTransmissionBuffer@packet+5,ipv4_streamToTransmissionBuffer@ethernet
      +                          PacketLength+1
  5423                           
  5424                           ;ipv4.c: 95: uint16_t remainingLength;
  5425                           ;ipv4.c: 99: ethernetController_streamToTransmitBuffer(data, packet.memory);
  5426  00546E  EE20  F095         	lfsr	2,ipv4_streamToTransmissionBuffer@packet+23
  5427  005472  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
  5428  005476  0E08               	movlw	8
  5429  005478                     u12431:
  5430  005478  CFDB FFEB          	movff	plusw2,plusw0
  5431  00547C  06E8               	decf	wreg,f,c
  5432  00547E  E2FC               	bc	u12431
  5433  005480  0100               	movlb	0	; () banked
  5434  005482  51C2               	movf	ipv4_streamToTransmissionBuffer@data& (0+255),w,b
  5435  005484  EC5D  F024         	call	_ethernetController_streamToTransmitBuffer
  5436  005488  0012               	return		;funcret
  5437  00548A                     __end_of_ipv4_streamToTransmissionBuffer:
  5438                           	opt stack 0
  5439                           tblptru	equ	0xFF8
  5440                           tblptrh	equ	0xFF7
  5441                           tblptrl	equ	0xFF6
  5442                           tablat	equ	0xFF5
  5443                           prodh	equ	0xFF4
  5444                           prodl	equ	0xFF3
  5445                           intcon	equ	0xFF2
  5446                           intcon3	equ	0xFF0
  5447                           indf0	equ	0xFEF
  5448                           postinc0	equ	0xFEE
  5449                           plusw0	equ	0xFEB
  5450                           fsr0h	equ	0xFEA
  5451                           fsr0l	equ	0xFE9
  5452                           wreg	equ	0xFE8
  5453                           indf1	equ	0xFE7
  5454                           postinc1	equ	0xFE6
  5455                           postdec1	equ	0xFE5
  5456                           plusw1	equ	0xFE3
  5457                           fsr1h	equ	0xFE2
  5458                           fsr1l	equ	0xFE1
  5459                           indf2	equ	0xFDF
  5460                           postinc2	equ	0xFDE
  5461                           postdec2	equ	0xFDD
  5462                           plusw2	equ	0xFDB
  5463                           fsr2h	equ	0xFDA
  5464                           fsr2l	equ	0xFD9
  5465                           status	equ	0xFD8
  5466                           
  5467 ;; *************** function _handleStackBackgroundTasks *****************
  5468 ;; Defined at:
  5469 ;;		line 39 in file "src/stack/backgroundTasks.c"
  5470 ;; Parameters:    Size  Location     Type
  5471 ;;  stack           2  133[BANK1 ] PTR struct stack
  5472 ;;		 -> stack(123), 
  5473 ;; Auto vars:     Size  Location     Type
  5474 ;;  foo            10    0        unsigned char [10]
  5475 ;;  errIPv4         3  142[BANK1 ] struct error
  5476 ;;  errArp          3  137[BANK1 ] struct error
  5477 ;;  intf            2  140[BANK1 ] struct interruptFlags
  5478 ;; Return value:  Size  Location     Type
  5479 ;;                  1    wreg      void 
  5480 ;; Registers used:
  5481 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5482 ;; Tracked objects:
  5483 ;;		On entry : 0/0
  5484 ;;		On exit  : 0/0
  5485 ;;		Unchanged: 0/0
  5486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5487 ;;      Params:         0       0       2       0       0       0       0       0       0
  5488 ;;      Locals:         0       0       8       0       0       0       0       0       0
  5489 ;;      Temps:          0       0       2       0       0       0       0       0       0
  5490 ;;      Totals:         0       0      12       0       0       0       0       0       0
  5491 ;;Total ram usage:       12 bytes
  5492 ;; Hardware stack levels used:    1
  5493 ;; Hardware stack levels required when called:   13
  5494 ;; This function calls:
  5495 ;;		_UARTTransmitText
  5496 ;;		_arp_background
  5497 ;;		_arp_init
  5498 ;;		_ethernetController_clearInterruptFlag
  5499 ;;		_ethernetController_newPacketAvailable
  5500 ;;		_ethernetController_pollInterruptFlags
  5501 ;;		_ethernetController_setLEDConfig
  5502 ;;		_ethernetController_updateLinkStatus
  5503 ;;		_ethernet_rxGetNewFrame
  5504 ;;		_ipAdressToString
  5505 ;;		_ipv4_background
  5506 ;;		_ipv4_sendFrame
  5507 ;;		_ipv4_setIPSourceAddress
  5508 ;; This function is called by:
  5509 ;;		_main
  5510 ;; This function uses a non-reentrant model
  5511 ;;
  5512                           
  5513                           	psect	text10
  5514  001C1A                     __ptext10:
  5515                           	opt stack 0
  5516  001C1A                     _handleStackBackgroundTasks:
  5517                           	opt stack 17
  5518                           
  5519                           ;backgroundTasks.c: 40: unsigned char foo[10];
  5520                           ;backgroundTasks.c: 41: error_t errArp;
  5521                           ;backgroundTasks.c: 42: error_t errIPv4;
  5522                           ;backgroundTasks.c: 43: interruptFlags_t intf;
  5523                           ;backgroundTasks.c: 45: intf = ethernetController_pollInterruptFlags();
  5524                           
  5525                           ;incstack = 0
  5526  001C1A  EC22  F01A         	call	_ethernetController_pollInterruptFlags	;wreg free
  5527  001C1E  C078  F18C         	movff	?_ethernetController_pollInterruptFlags,handleStackBackgroundTasks@intf
  5528  001C22  C079  F18D         	movff	?_ethernetController_pollInterruptFlags+1,handleStackBackgroundTasks@intf+1
  5529                           
  5530                           ;backgroundTasks.c: 46: if (intf.LINKIF) {
  5531  001C26  0101               	movlb	1	; () banked
  5532  001C28  A78C               	btfss	handleStackBackgroundTasks@intf& (0+255),3,b
  5533  001C2A  D044               	goto	l524
  5534                           
  5535                           ; BSR set to: 1
  5536                           ;backgroundTasks.c: 48: ethernetController_updateLinkStatus(&(stack->ethernet));
  5537  001C2C  0E22               	movlw	34
  5538  001C2E  2585               	addwf	handleStackBackgroundTasks@stack& (0+255),w,b
  5539  001C30  0100               	movlb	0	; () banked
  5540  001C32  6F80               	movwf	ethernetController_updateLinkStatus@state& (0+255),b
  5541  001C34  0E00               	movlw	0
  5542  001C36  0101               	movlb	1	; () banked
  5543  001C38  2186               	addwfc	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5544  001C3A  0100               	movlb	0	; () banked
  5545  001C3C  6F81               	movwf	(ethernetController_updateLinkStatus@state+1)& (0+255),b
  5546  001C3E  EC95  F022         	call	_ethernetController_updateLinkStatus	;wreg free
  5547                           
  5548                           ;backgroundTasks.c: 50: if (stack->ethernet.link == LINK_ESTABLISHED) {
  5549  001C42  0101               	movlb	1	; () banked
  5550  001C44  EE20 F022          	lfsr	2,34
  5551  001C48  5185               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5552  001C4A  26D9               	addwf	fsr2l,f,c
  5553  001C4C  5186               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5554  001C4E  22DA               	addwfc	fsr2h,f,c
  5555  001C50  04DE               	decf	postinc2,w,c
  5556  001C52  A4D8               	btfss	status,2,c
  5557  001C54  D01E               	goto	l525
  5558                           
  5559                           ; BSR set to: 1
  5560                           ;backgroundTasks.c: 51: ethernetController_setLEDConfig(LEDA, LED_ON);
  5561  001C56  0E00               	movlw	0
  5562  001C58  0100               	movlb	0	; () banked
  5563  001C5A  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  5564  001C5C  0E00               	movlw	0
  5565  001C5E  EC4E  F022         	call	_ethernetController_setLEDConfig
  5566                           
  5567                           ;backgroundTasks.c: 52: ethernetController_setLEDConfig(LEDB, LED_TRANSMIT_RECEIVE_EVENT
      +                          S);
  5568  001C62  0E02               	movlw	2
  5569  001C64  0100               	movlb	0	; () banked
  5570  001C66  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  5571  001C68  0E01               	movlw	1
  5572  001C6A  EC4E  F022         	call	_ethernetController_setLEDConfig
  5573                           
  5574                           ;backgroundTasks.c: 53: ipv4_setIPSourceAddress(stack->source);
  5575  001C6E  0101               	movlb	1	; () banked
  5576  001C70  EE20 F077          	lfsr	2,119
  5577  001C74  5185               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5578  001C76  26D9               	addwf	fsr2l,f,c
  5579  001C78  5186               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5580  001C7A  22DA               	addwfc	fsr2h,f,c
  5581  001C7C  CFDE F060          	movff	postinc2,ipv4_setIPSourceAddress@ip
  5582  001C80  CFDE F061          	movff	postinc2,ipv4_setIPSourceAddress@ip+1
  5583  001C84  CFDE F062          	movff	postinc2,ipv4_setIPSourceAddress@ip+2
  5584  001C88  CFDE F063          	movff	postinc2,ipv4_setIPSourceAddress@ip+3
  5585  001C8C  EC34  F02B         	call	_ipv4_setIPSourceAddress	;wreg free
  5586                           
  5587                           ;backgroundTasks.c: 54: } else {
  5588  001C90  D00E               	goto	l526
  5589  001C92                     l525:
  5590                           
  5591                           ;backgroundTasks.c: 55: ethernetController_setLEDConfig(LEDA, LED_OFF);
  5592  001C92  0E01               	movlw	1
  5593  001C94  0100               	movlb	0	; () banked
  5594  001C96  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  5595  001C98  0E00               	movlw	0
  5596  001C9A  EC4E  F022         	call	_ethernetController_setLEDConfig
  5597                           
  5598                           ;backgroundTasks.c: 56: ethernetController_setLEDConfig(LEDB, LED_OFF);
  5599  001C9E  0E01               	movlw	1
  5600  001CA0  0100               	movlb	0	; () banked
  5601  001CA2  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  5602  001CA4  0E01               	movlw	1
  5603  001CA6  EC4E  F022         	call	_ethernetController_setLEDConfig
  5604                           
  5605                           ;backgroundTasks.c: 57: arp_init();
  5606  001CAA  ECD3  F024         	call	_arp_init	;wreg free
  5607  001CAE                     l526:
  5608                           
  5609                           ;backgroundTasks.c: 58: }
  5610                           ;backgroundTasks.c: 59: ethernetController_clearInterruptFlag(LINKIF);
  5611  001CAE  0E0B               	movlw	11
  5612  001CB0  EC82  F02B         	call	_ethernetController_clearInterruptFlag
  5613  001CB4                     l524:
  5614                           
  5615                           ;backgroundTasks.c: 60: }
  5616                           ;backgroundTasks.c: 61: if (intf.PKTIF) {
  5617  001CB4  0101               	movlb	1	; () banked
  5618  001CB6  A98C               	btfss	handleStackBackgroundTasks@intf& (0+255),4,b
  5619  001CB8  D00B               	goto	l528
  5620                           
  5621                           ; BSR set to: 1
  5622                           ;backgroundTasks.c: 63: if (ethernetController_newPacketAvailable()) {
  5623  001CBA  EC51  F02B         	call	_ethernetController_newPacketAvailable	;wreg free
  5624  001CBE  0900               	iorlw	0
  5625  001CC0  B4D8               	btfsc	status,2,c
  5626  001CC2  D006               	goto	l528
  5627                           
  5628                           ;backgroundTasks.c: 65: ethernet_rxGetNewFrame(&stack->newReceivedFrame);
  5629  001CC4  C185  F178         	movff	handleStackBackgroundTasks@stack,ethernet_rxGetNewFrame@frame
  5630  001CC8  C186  F179         	movff	handleStackBackgroundTasks@stack+1,ethernet_rxGetNewFrame@frame+1
  5631  001CCC  EC76  F000         	call	_ethernet_rxGetNewFrame	;wreg free
  5632  001CD0                     l528:
  5633                           
  5634                           ;backgroundTasks.c: 66: }
  5635                           ;backgroundTasks.c: 67: }
  5636                           ;backgroundTasks.c: 74: if (stack->background.fPacketPending == 1) {
  5637  001CD0  0101               	movlb	1	; () banked
  5638  001CD2  EE20 F034          	lfsr	2,52
  5639  001CD6  5185               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5640  001CD8  26D9               	addwf	fsr2l,f,c
  5641  001CDA  5186               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5642  001CDC  22DA               	addwfc	fsr2h,f,c
  5643  001CDE  04DE               	decf	postinc2,w,c
  5644  001CE0  A4D8               	btfss	status,2,c
  5645  001CE2  D06C               	goto	l533
  5646                           
  5647                           ; BSR set to: 1
  5648                           ;backgroundTasks.c: 76: errIPv4 = ipv4_sendFrame(stack->pendingPacketToSend);
  5649  001CE4  EE20 F035          	lfsr	2,53
  5650  001CE8  5185               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5651  001CEA  26D9               	addwf	fsr2l,f,c
  5652  001CEC  5186               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5653  001CEE  22DA               	addwfc	fsr2h,f,c
  5654  001CF0  EE01  F034         	lfsr	0,ipv4_sendFrame@ipPacket
  5655  001CF4  0E41               	movlw	65
  5656  001CF6                     u12301:
  5657  001CF6  CFDB FFEB          	movff	plusw2,plusw0
  5658  001CFA  06E8               	decf	wreg,f,c
  5659  001CFC  E2FC               	bc	u12301
  5660  001CFE  ECD2  F012         	call	_ipv4_sendFrame	;wreg free
  5661  001D02  C134  F18E         	movff	?_ipv4_sendFrame,handleStackBackgroundTasks@errIPv4
  5662  001D06  C135  F18F         	movff	?_ipv4_sendFrame+1,handleStackBackgroundTasks@errIPv4+1
  5663  001D0A  C136  F190         	movff	?_ipv4_sendFrame+2,handleStackBackgroundTasks@errIPv4+2
  5664                           
  5665                           ;backgroundTasks.c: 77: if (errIPv4.module == ERROR_MODULE_ARP) {
  5666  001D0E  0E03               	movlw	3
  5667  001D10  0101               	movlb	1	; () banked
  5668  001D12  198E               	xorwf	handleStackBackgroundTasks@errIPv4& (0+255),w,b
  5669  001D14  B4D8               	btfsc	status,2,c
  5670  001D16  D038               	goto	l531
  5671  001D18  D051               	goto	l533
  5672  001D1A                     
  5673                           ; BSR set to: 1
  5674                           ;backgroundTasks.c: 83: UARTTransmitText("[IPv4]: Packet was sent successfully.\n\r");
  5675                           
  5676                           ; BSR set to: 1
  5677  001D1A  0E16               	movlw	low STR_21
  5678  001D1C  0100               	movlb	0	; () banked
  5679  001D1E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5680  001D20  0E7B               	movlw	high STR_21
  5681  001D22  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5682  001D24  ECD8  F026         	call	_UARTTransmitText	;wreg free
  5683  001D28  D025               	goto	l10485
  5684  001D2A                     
  5685                           ; BSR set to: 1
  5686                           ;backgroundTasks.c: 89: UARTTransmitText("[IPv4]: Failed to resolve ");
  5687                           
  5688                           ; BSR set to: 1
  5689  001D2A  0EBE               	movlw	low STR_22
  5690  001D2C  0100               	movlb	0	; () banked
  5691  001D2E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5692  001D30  0E7D               	movlw	high STR_22
  5693  001D32  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5694  001D34  ECD8  F026         	call	_UARTTransmitText	;wreg free
  5695                           
  5696                           ;backgroundTasks.c: 90: UARTTransmitText(ipAdressToString(stack->pendingPacketToSend.ipv
      +                          4Header.destination));
  5697  001D38  0101               	movlb	1	; () banked
  5698  001D3A  EE20 F048          	lfsr	2,72
  5699  001D3E  5185               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5700  001D40  26D9               	addwf	fsr2l,f,c
  5701  001D42  5186               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5702  001D44  22DA               	addwfc	fsr2h,f,c
  5703  001D46  CFDE F073          	movff	postinc2,ipAdressToString@ip
  5704  001D4A  CFDE F074          	movff	postinc2,ipAdressToString@ip+1
  5705  001D4E  CFDE F075          	movff	postinc2,ipAdressToString@ip+2
  5706  001D52  CFDE F076          	movff	postinc2,ipAdressToString@ip+3
  5707  001D56  ECE7  F013         	call	_ipAdressToString	;wreg free
  5708  001D5A  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  5709  001D5E  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  5710  001D62  ECD8  F026         	call	_UARTTransmitText	;wreg free
  5711                           
  5712                           ;backgroundTasks.c: 91: UARTTransmitText("\n\r");
  5713  001D66  0EEB               	movlw	low (STR_44+1)
  5714  001D68  0100               	movlb	0	; () banked
  5715  001D6A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5716  001D6C  0E7F               	movlw	high (STR_44+1)
  5717  001D6E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5718  001D70  ECD8  F026         	call	_UARTTransmitText	;wreg free
  5719  001D74                     l10485:
  5720                           
  5721                           ;backgroundTasks.c: 93: stack->background.fPacketPending = 0;
  5722  001D74  0101               	movlb	1	; () banked
  5723  001D76  EE20 F034          	lfsr	2,52
  5724  001D7A  5185               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5725  001D7C  26D9               	addwf	fsr2l,f,c
  5726  001D7E  5186               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5727  001D80  22DA               	addwfc	fsr2h,f,c
  5728  001D82  0E00               	movlw	0
  5729  001D84  6EDF               	movwf	indf2,c
  5730                           
  5731                           ; BSR set to: 1
  5732                           ;backgroundTasks.c: 97: }
  5733                           
  5734                           ; BSR set to: 1
  5735                           ;backgroundTasks.c: 96: break;
  5736                           
  5737                           ;backgroundTasks.c: 95: default:
  5738                           
  5739                           ;backgroundTasks.c: 94: break;
  5740  001D86  D01A               	goto	l533
  5741  001D88                     l531:
  5742                           
  5743                           ; BSR set to: 1
  5744                           
  5745                           ; BSR set to: 1
  5746  001D88  EE21  F08F         	lfsr	2,handleStackBackgroundTasks@errIPv4+1
  5747  001D8C  CFDE F187          	movff	postinc2,??_handleStackBackgroundTasks
  5748  001D90  CFDD F188          	movff	postdec2,??_handleStackBackgroundTasks+1
  5749                           
  5750                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  5751                           ; Switch size 1, requested type "space"
  5752                           ; Number of cases is 2, Range of values is 0 to 1
  5753                           ; switch strategies available:
  5754                           ; Name         Instructions Cycles
  5755                           ; simple_byte            7     4 (average)
  5756                           ;	Chosen strategy is simple_byte
  5757  001D94  5188               	movf	(??_handleStackBackgroundTasks+1)& (0+255),w,b
  5758  001D96  0A00               	xorlw	0	; case 0
  5759  001D98  B4D8               	btfsc	status,2,c
  5760  001D9A  D004               	goto	l11139
  5761  001D9C  0A01               	xorlw	1	; case 1
  5762  001D9E  B4D8               	btfsc	status,2,c
  5763  001DA0  D006               	goto	l11141
  5764  001DA2  D00C               	goto	l533
  5765  001DA4                     l11139:
  5766                           
  5767                           ; BSR set to: 1
  5768                           ; Switch size 1, requested type "space"
  5769                           ; Number of cases is 1, Range of values is 0 to 0
  5770                           ; switch strategies available:
  5771                           ; Name         Instructions Cycles
  5772                           ; simple_byte            4     3 (average)
  5773                           ;	Chosen strategy is simple_byte
  5774  001DA4  5187               	movf	??_handleStackBackgroundTasks& (0+255),w,b
  5775  001DA6  0A00               	xorlw	0	; case 0
  5776  001DA8  B4D8               	btfsc	status,2,c
  5777  001DAA  D7B7               	goto	l534
  5778  001DAC  D007               	goto	l533
  5779  001DAE                     l11141:
  5780                           
  5781                           ; BSR set to: 1
  5782                           ; Switch size 1, requested type "space"
  5783                           ; Number of cases is 2, Range of values is 145 to 148
  5784                           ; switch strategies available:
  5785                           ; Name         Instructions Cycles
  5786                           ; simple_byte            7     4 (average)
  5787                           ;	Chosen strategy is simple_byte
  5788  001DAE  5187               	movf	??_handleStackBackgroundTasks& (0+255),w,b
  5789  001DB0  0A91               	xorlw	145	; case 145
  5790  001DB2  B4D8               	btfsc	status,2,c
  5791  001DB4  D003               	goto	l533
  5792  001DB6  0A05               	xorlw	5	; case 148
  5793  001DB8  B4D8               	btfsc	status,2,c
  5794  001DBA  D7B7               	goto	l535
  5795  001DBC                     l533:
  5796                           
  5797                           ; BSR set to: 1
  5798                           ;backgroundTasks.c: 100: }
  5799                           ;backgroundTasks.c: 101: }
  5800                           ;backgroundTasks.c: 104: errArp = arp_background(stack->ethernet.link);
  5801                           
  5802                           ; BSR set to: 1
  5803                           
  5804                           ; BSR set to: 1
  5805                           
  5806                           ; BSR set to: 1
  5807                           
  5808                           ; BSR set to: 1
  5809                           ;backgroundTasks.c: 98: } else {
  5810  001DBC  EE20 F022          	lfsr	2,34
  5811  001DC0  5185               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5812  001DC2  26D9               	addwf	fsr2l,f,c
  5813  001DC4  5186               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5814  001DC6  22DA               	addwfc	fsr2h,f,c
  5815  001DC8  50DF               	movf	indf2,w,c
  5816  001DCA  EC8B  F016         	call	_arp_background
  5817  001DCE  C151  F189         	movff	?_arp_background,handleStackBackgroundTasks@errArp
  5818  001DD2  C152  F18A         	movff	?_arp_background+1,handleStackBackgroundTasks@errArp+1
  5819  001DD6  C153  F18B         	movff	?_arp_background+2,handleStackBackgroundTasks@errArp+2
  5820                           
  5821                           ;backgroundTasks.c: 105: errIPv4 = ipv4_background(stack->ethernet.link);
  5822  001DDA  0101               	movlb	1	; () banked
  5823  001DDC  EE20 F022          	lfsr	2,34
  5824  001DE0  5185               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5825  001DE2  26D9               	addwf	fsr2l,f,c
  5826  001DE4  5186               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5827  001DE6  22DA               	addwfc	fsr2h,f,c
  5828  001DE8  50DF               	movf	indf2,w,c
  5829  001DEA  EC76  F019         	call	_ipv4_background
  5830  001DEE  C09A  F18E         	movff	?_ipv4_background,handleStackBackgroundTasks@errIPv4
  5831  001DF2  C09B  F18F         	movff	?_ipv4_background+1,handleStackBackgroundTasks@errIPv4+1
  5832  001DF6  C09C  F190         	movff	?_ipv4_background+2,handleStackBackgroundTasks@errIPv4+2
  5833                           
  5834                           ;backgroundTasks.c: 107: if (errIPv4.module == ERROR_MODULE_IPv4 &&
  5835                           ;backgroundTasks.c: 108: errIPv4.code == ERROR_IPv4_ADDRESS_ALREADY_IN_USE) {
  5836  001DFA  0E04               	movlw	4
  5837  001DFC  0101               	movlb	1	; () banked
  5838  001DFE  198E               	xorwf	handleStackBackgroundTasks@errIPv4& (0+255),w,b
  5839  001E00  A4D8               	btfss	status,2,c
  5840  001E02  0012               	return	
  5841                           
  5842                           ; BSR set to: 1
  5843  001E04  0EF5               	movlw	245
  5844  001E06  198F               	xorwf	(handleStackBackgroundTasks@errIPv4+1)& (0+255),w,b
  5845  001E08  E149               	bnz	l539
  5846  001E0A  0590               	decf	(handleStackBackgroundTasks@errIPv4+2)& (0+255),w,b
  5847  001E0C  A4D8               	btfss	status,2,c
  5848  001E0E  0012               	return	
  5849                           
  5850                           ; BSR set to: 1
  5851                           ;backgroundTasks.c: 110: UARTTransmitText("[IPv4]: Address conflict detected.\n\r");
  5852  001E10  0ED8               	movlw	low STR_24
  5853  001E12  0100               	movlb	0	; () banked
  5854  001E14  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5855  001E16  0E7B               	movlw	high STR_24
  5856  001E18  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5857  001E1A  ECD8  F026         	call	_UARTTransmitText	;wreg free
  5858                           
  5859                           ;backgroundTasks.c: 112: stack->source.address[3]++;
  5860  001E1E  0101               	movlb	1	; () banked
  5861  001E20  EE20 F07A          	lfsr	2,122
  5862  001E24  5185               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5863  001E26  26D9               	addwf	fsr2l,f,c
  5864  001E28  5186               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5865  001E2A  22DA               	addwfc	fsr2h,f,c
  5866  001E2C  2ADF               	incf	indf2,f,c
  5867                           
  5868                           ; BSR set to: 1
  5869                           ;backgroundTasks.c: 114: UARTTransmitText("[IPv4]: Setting IPv4 Src Address to ");
  5870  001E2E  0EFD               	movlw	low STR_25
  5871  001E30  0100               	movlb	0	; () banked
  5872  001E32  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5873  001E34  0E7B               	movlw	high STR_25
  5874  001E36  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5875  001E38  ECD8  F026         	call	_UARTTransmitText	;wreg free
  5876                           
  5877                           ;backgroundTasks.c: 115: UARTTransmitText(ipAdressToString(stack->source));
  5878  001E3C  0101               	movlb	1	; () banked
  5879  001E3E  EE20 F077          	lfsr	2,119
  5880  001E42  5185               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5881  001E44  26D9               	addwf	fsr2l,f,c
  5882  001E46  5186               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5883  001E48  22DA               	addwfc	fsr2h,f,c
  5884  001E4A  CFDE F073          	movff	postinc2,ipAdressToString@ip
  5885  001E4E  CFDE F074          	movff	postinc2,ipAdressToString@ip+1
  5886  001E52  CFDE F075          	movff	postinc2,ipAdressToString@ip+2
  5887  001E56  CFDE F076          	movff	postinc2,ipAdressToString@ip+3
  5888  001E5A  ECE7  F013         	call	_ipAdressToString	;wreg free
  5889  001E5E  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  5890  001E62  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  5891  001E66  ECD8  F026         	call	_UARTTransmitText	;wreg free
  5892                           
  5893                           ;backgroundTasks.c: 116: UARTTransmitText("\n\r");
  5894  001E6A  0EEB               	movlw	low (STR_44+1)
  5895  001E6C  0100               	movlb	0	; () banked
  5896  001E6E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5897  001E70  0E7F               	movlw	high (STR_44+1)
  5898  001E72  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5899  001E74  ECD8  F026         	call	_UARTTransmitText	;wreg free
  5900                           
  5901                           ;backgroundTasks.c: 118: ipv4_setIPSourceAddress(stack->source);
  5902  001E78  0101               	movlb	1	; () banked
  5903  001E7A  EE20 F077          	lfsr	2,119
  5904  001E7E  5185               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5905  001E80  26D9               	addwf	fsr2l,f,c
  5906  001E82  5186               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5907  001E84  22DA               	addwfc	fsr2h,f,c
  5908  001E86  CFDE F060          	movff	postinc2,ipv4_setIPSourceAddress@ip
  5909  001E8A  CFDE F061          	movff	postinc2,ipv4_setIPSourceAddress@ip+1
  5910  001E8E  CFDE F062          	movff	postinc2,ipv4_setIPSourceAddress@ip+2
  5911  001E92  CFDE F063          	movff	postinc2,ipv4_setIPSourceAddress@ip+3
  5912  001E96  EC34  F02B         	call	_ipv4_setIPSourceAddress	;wreg free
  5913  001E9A  0012               	return	
  5914  001E9C                     l539:
  5915  001E9C  0012               	return		;funcret
  5916  001E9E                     __end_of_handleStackBackgroundTasks:
  5917                           	opt stack 0
  5918                           tblptru	equ	0xFF8
  5919                           tblptrh	equ	0xFF7
  5920                           tblptrl	equ	0xFF6
  5921                           tablat	equ	0xFF5
  5922                           prodh	equ	0xFF4
  5923                           prodl	equ	0xFF3
  5924                           intcon	equ	0xFF2
  5925                           intcon3	equ	0xFF0
  5926                           indf0	equ	0xFEF
  5927                           postinc0	equ	0xFEE
  5928                           plusw0	equ	0xFEB
  5929                           fsr0h	equ	0xFEA
  5930                           fsr0l	equ	0xFE9
  5931                           wreg	equ	0xFE8
  5932                           indf1	equ	0xFE7
  5933                           postinc1	equ	0xFE6
  5934                           postdec1	equ	0xFE5
  5935                           plusw1	equ	0xFE3
  5936                           fsr1h	equ	0xFE2
  5937                           fsr1l	equ	0xFE1
  5938                           indf2	equ	0xFDF
  5939                           postinc2	equ	0xFDE
  5940                           postdec2	equ	0xFDD
  5941                           plusw2	equ	0xFDB
  5942                           fsr2h	equ	0xFDA
  5943                           fsr2l	equ	0xFD9
  5944                           status	equ	0xFD8
  5945                           
  5946 ;; *************** function _ipv4_setIPSourceAddress *****************
  5947 ;; Defined at:
  5948 ;;		line 249 in file "src/stack/protocols/ipv4.c"
  5949 ;; Parameters:    Size  Location     Type
  5950 ;;  ip              4    0[BANK0 ] struct ipv4_address
  5951 ;; Auto vars:     Size  Location     Type
  5952 ;;		None
  5953 ;; Return value:  Size  Location     Type
  5954 ;;                  1    wreg      void 
  5955 ;; Registers used:
  5956 ;;		None
  5957 ;; Tracked objects:
  5958 ;;		On entry : 0/0
  5959 ;;		On exit  : 0/0
  5960 ;;		Unchanged: 0/0
  5961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5962 ;;      Params:         0       4       0       0       0       0       0       0       0
  5963 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5964 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5965 ;;      Totals:         0       4       0       0       0       0       0       0       0
  5966 ;;Total ram usage:        4 bytes
  5967 ;; Hardware stack levels used:    1
  5968 ;; Hardware stack levels required when called:    4
  5969 ;; This function calls:
  5970 ;;		Nothing
  5971 ;; This function is called by:
  5972 ;;		_handleStackBackgroundTasks
  5973 ;; This function uses a non-reentrant model
  5974 ;;
  5975                           
  5976                           	psect	text11
  5977  005668                     __ptext11:
  5978                           	opt stack 0
  5979  005668                     _ipv4_setIPSourceAddress:
  5980                           	opt stack 25
  5981                           
  5982                           ;ipv4.c: 250: ipPreliminarySource = ip;
  5983                           
  5984                           ;incstack = 0
  5985  005668  C060  F1C6         	movff	ipv4_setIPSourceAddress@ip,_ipPreliminarySource
  5986  00566C  C061  F1C7         	movff	ipv4_setIPSourceAddress@ip+1,_ipPreliminarySource+1
  5987  005670  C062  F1C8         	movff	ipv4_setIPSourceAddress@ip+2,_ipPreliminarySource+2
  5988  005674  C063  F1C9         	movff	ipv4_setIPSourceAddress@ip+3,_ipPreliminarySource+3
  5989                           
  5990                           ;ipv4.c: 251: fSrcAddrChanged = 1;
  5991  005678  804E               	bsf	_fSrcAddrChanged/(0+8),_fSrcAddrChanged& (0+7),c
  5992  00567A  0012               	return		;funcret
  5993  00567C                     __end_of_ipv4_setIPSourceAddress:
  5994                           	opt stack 0
  5995                           tblptru	equ	0xFF8
  5996                           tblptrh	equ	0xFF7
  5997                           tblptrl	equ	0xFF6
  5998                           tablat	equ	0xFF5
  5999                           prodh	equ	0xFF4
  6000                           prodl	equ	0xFF3
  6001                           intcon	equ	0xFF2
  6002                           intcon3	equ	0xFF0
  6003                           indf0	equ	0xFEF
  6004                           postinc0	equ	0xFEE
  6005                           plusw0	equ	0xFEB
  6006                           fsr0h	equ	0xFEA
  6007                           fsr0l	equ	0xFE9
  6008                           wreg	equ	0xFE8
  6009                           indf1	equ	0xFE7
  6010                           postinc1	equ	0xFE6
  6011                           postdec1	equ	0xFE5
  6012                           plusw1	equ	0xFE3
  6013                           fsr1h	equ	0xFE2
  6014                           fsr1l	equ	0xFE1
  6015                           indf2	equ	0xFDF
  6016                           postinc2	equ	0xFDE
  6017                           postdec2	equ	0xFDD
  6018                           plusw2	equ	0xFDB
  6019                           fsr2h	equ	0xFDA
  6020                           fsr2l	equ	0xFD9
  6021                           status	equ	0xFD8
  6022                           
  6023 ;; *************** function _ipv4_sendFrame *****************
  6024 ;; Defined at:
  6025 ;;		line 50 in file "src/stack/protocols/ipv4.c"
  6026 ;; Parameters:    Size  Location     Type
  6027 ;;  ipPacket       66   52[BANK1 ] struct ipv4_packet
  6028 ;; Auto vars:     Size  Location     Type
  6029 ;;  err             3  157[BANK0 ] struct error
  6030 ;;  index           1  156[BANK0 ] unsigned char 
  6031 ;; Return value:  Size  Location     Type
  6032 ;;                  3   52[BANK1 ] struct error
  6033 ;; Registers used:
  6034 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6035 ;; Tracked objects:
  6036 ;;		On entry : 0/0
  6037 ;;		On exit  : 0/0
  6038 ;;		Unchanged: 0/0
  6039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6040 ;;      Params:         0       0      66       0       0       0       0       0       0
  6041 ;;      Locals:         0       4       0       0       0       0       0       0       0
  6042 ;;      Temps:          0       0       8       0       0       0       0       0       0
  6043 ;;      Totals:         0       4      74       0       0       0       0       0       0
  6044 ;;Total ram usage:       78 bytes
  6045 ;; Hardware stack levels used:    1
  6046 ;; Hardware stack levels required when called:   11
  6047 ;; This function calls:
  6048 ;;		_UARTTransmitText
  6049 ;;		_arp_checkForEntry
  6050 ;;		_arp_getEntryFromTable
  6051 ;;		_arp_sendRequest
  6052 ;;		_ethernetController_getMacAddress
  6053 ;;		_ethernetController_sendPacket
  6054 ;;		_ethernetController_writeDestinationMACAddress
  6055 ;;		_getMillis
  6056 ;;		_ipAdressToString
  6057 ;;		_macToString
  6058 ;; This function is called by:
  6059 ;;		_handleStackBackgroundTasks
  6060 ;; This function uses a non-reentrant model
  6061 ;;
  6062                           
  6063                           	psect	text12
  6064  0025A4                     __ptext12:
  6065                           	opt stack 0
  6066  0025A4                     _ipv4_sendFrame:
  6067                           	opt stack 18
  6068                           
  6069                           ;ipv4.c: 51: error_t err;
  6070                           ;ipv4.c: 52: err.module = ERROR_MODULE_ARP;
  6071                           
  6072                           ;incstack = 0
  6073  0025A4  0E03               	movlw	3
  6074  0025A6  0100               	movlb	0	; () banked
  6075  0025A8  6FFD               	movwf	ipv4_sendFrame@err& (0+255),b
  6076                           
  6077                           ;ipv4.c: 53: err.code = ERROR_ARP_WAITING;
  6078  0025AA  0E01               	movlw	1
  6079  0025AC  6FFF               	movwf	(ipv4_sendFrame@err+2)& (0+255),b
  6080  0025AE  0E91               	movlw	145
  6081  0025B0  6FFE               	movwf	(ipv4_sendFrame@err+1)& (0+255),b
  6082                           
  6083                           ; BSR set to: 0
  6084                           ;ipv4.c: 54: uint8_t index;
  6085                           ;ipv4.c: 55: uint8_t static failedResolveCounter = 0;
  6086                           ;ipv4.c: 56: time_t static oldTime = 0;
  6087                           ;ipv4.c: 59: if (arp_checkForEntry(ipPacket.ipv4Header.destination, &index)) {
  6088  0025B2  C147  F067         	movff	ipv4_sendFrame@ipPacket+19,arp_checkForEntry@ip
  6089  0025B6  C148  F068         	movff	ipv4_sendFrame@ipPacket+20,arp_checkForEntry@ip+1
  6090  0025BA  C149  F069         	movff	ipv4_sendFrame@ipPacket+21,arp_checkForEntry@ip+2
  6091  0025BE  C14A  F06A         	movff	ipv4_sendFrame@ipPacket+22,arp_checkForEntry@ip+3
  6092  0025C2  0EFC               	movlw	low ipv4_sendFrame@index
  6093  0025C4  6F6B               	movwf	arp_checkForEntry@index& (0+255),b
  6094  0025C6  0E00               	movlw	high ipv4_sendFrame@index
  6095  0025C8  6F6C               	movwf	(arp_checkForEntry@index+1)& (0+255),b
  6096  0025CA  ECAF  F020         	call	_arp_checkForEntry	;wreg free
  6097  0025CE  0900               	iorlw	0
  6098  0025D0  B4D8               	btfsc	status,2,c
  6099  0025D2  D078               	goto	l1134
  6100                           
  6101                           ;ipv4.c: 61: ipPacket.ethernet.destination = arp_getEntryFromTable(index);
  6102  0025D4  0100               	movlb	0	; () banked
  6103  0025D6  51FC               	movf	ipv4_sendFrame@index& (0+255),w,b
  6104  0025D8  ECC6  F029         	call	_arp_getEntryFromTable
  6105  0025DC  EE21  F05C         	lfsr	2,ipv4_sendFrame@ipPacket+40
  6106  0025E0  0E05               	movlw	5
  6107  0025E2                     u12071:
  6108  0025E2  CFEB FFDB          	movff	plusw0,plusw2
  6109  0025E6  06E8               	decf	wreg,f,c
  6110  0025E8  E2FC               	bc	u12071
  6111                           
  6112                           ;ipv4.c: 63: UARTTransmitText("[IPv4]: ");
  6113  0025EA  0E81               	movlw	low STR_97
  6114  0025EC  0100               	movlb	0	; () banked
  6115  0025EE  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6116  0025F0  0E7F               	movlw	high STR_97
  6117  0025F2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6118  0025F4  ECD8  F026         	call	_UARTTransmitText	;wreg free
  6119                           
  6120                           ;ipv4.c: 64: UARTTransmitText(ipAdressToString(ipPacket.ipv4Header.destination));
  6121  0025F8  C147  F073         	movff	ipv4_sendFrame@ipPacket+19,ipAdressToString@ip
  6122  0025FC  C148  F074         	movff	ipv4_sendFrame@ipPacket+20,ipAdressToString@ip+1
  6123  002600  C149  F075         	movff	ipv4_sendFrame@ipPacket+21,ipAdressToString@ip+2
  6124  002604  C14A  F076         	movff	ipv4_sendFrame@ipPacket+22,ipAdressToString@ip+3
  6125  002608  ECE7  F013         	call	_ipAdressToString	;wreg free
  6126  00260C  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  6127  002610  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  6128  002614  ECD8  F026         	call	_UARTTransmitText	;wreg free
  6129                           
  6130                           ;ipv4.c: 65: UARTTransmitText(" is at ");
  6131  002618  0E9C               	movlw	low STR_98
  6132  00261A  0100               	movlb	0	; () banked
  6133  00261C  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6134  00261E  0E7F               	movlw	high STR_98
  6135  002620  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6136  002622  ECD8  F026         	call	_UARTTransmitText	;wreg free
  6137                           
  6138                           ;ipv4.c: 66: UARTTransmitText(macToString(ipPacket.ethernet.destination));
  6139  002626  EE21  F05C         	lfsr	2,ipv4_sendFrame@ipPacket+40
  6140  00262A  EE00  F07A         	lfsr	0,macToString@addr
  6141  00262E  0E05               	movlw	5
  6142  002630                     u12081:
  6143  002630  CFDB FFEB          	movff	plusw2,plusw0
  6144  002634  06E8               	decf	wreg,f,c
  6145  002636  E2FC               	bc	u12081
  6146  002638  ECA5  F01D         	call	_macToString	;wreg free
  6147  00263C  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  6148  002640  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  6149  002644  ECD8  F026         	call	_UARTTransmitText	;wreg free
  6150                           
  6151                           ;ipv4.c: 67: UARTTransmitText("\n\r");
  6152  002648  0EEB               	movlw	low (STR_44+1)
  6153  00264A  0100               	movlb	0	; () banked
  6154  00264C  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6155  00264E  0E7F               	movlw	high (STR_44+1)
  6156  002650  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6157  002652  ECD8  F026         	call	_UARTTransmitText	;wreg free
  6158                           
  6159                           ;ipv4.c: 70: ipPacket.ethernet.source = ethernetController_getMacAddress();
  6160  002656  EC0D  F025         	call	_ethernetController_getMacAddress	;wreg free
  6161  00265A  EE21  F056         	lfsr	2,ipv4_sendFrame@ipPacket+34
  6162  00265E  0E05               	movlw	5
  6163  002660                     u12091:
  6164  002660  CFEB FFDB          	movff	plusw0,plusw2
  6165  002664  06E8               	decf	wreg,f,c
  6166  002666  E2FC               	bc	u12091
  6167                           
  6168                           ;ipv4.c: 72: ethernetController_writeDestinationMACAddress(ipPacket.ethernet.destination
      +                          , ipPacket.ethernet.memory);
  6169  002668  EE21  F05C         	lfsr	2,ipv4_sendFrame@ipPacket+40
  6170  00266C  EE00  F06F         	lfsr	0,ethernetController_writeDestinationMACAddress@addr
  6171  002670  0E05               	movlw	5
  6172  002672                     u12101:
  6173  002672  CFDB FFEB          	movff	plusw2,plusw0
  6174  002676  06E8               	decf	wreg,f,c
  6175  002678  E2FC               	bc	u12101
  6176  00267A  EE21  F064         	lfsr	2,ipv4_sendFrame@ipPacket+48
  6177  00267E  EE00  F075         	lfsr	0,ethernetController_writeDestinationMACAddress@field
  6178  002682  0E08               	movlw	8
  6179  002684                     u12111:
  6180  002684  CFDB FFEB          	movff	plusw2,plusw0
  6181  002688  06E8               	decf	wreg,f,c
  6182  00268A  E2FC               	bc	u12111
  6183  00268C  ECA1  F023         	call	_ethernetController_writeDestinationMACAddress	;wreg free
  6184                           
  6185                           ;ipv4.c: 73: ethernetController_sendPacket(ipPacket.ethernet.memory);
  6186  002690  EE21  F064         	lfsr	2,ipv4_sendFrame@ipPacket+48
  6187  002694  EE00  F072         	lfsr	0,ethernetController_sendPacket@field
  6188  002698  0E08               	movlw	8
  6189  00269A                     u12121:
  6190  00269A  CFDB FFEB          	movff	plusw2,plusw0
  6191  00269E  06E8               	decf	wreg,f,c
  6192  0026A0  E2FC               	bc	u12121
  6193  0026A2  EC59  F02A         	call	_ethernetController_sendPacket	;wreg free
  6194                           
  6195                           ;ipv4.c: 74: err.code = (uint16_t)0;
  6196  0026A6  0E00               	movlw	0
  6197  0026A8  0100               	movlb	0	; () banked
  6198  0026AA  6FFF               	movwf	(ipv4_sendFrame@err+2)& (0+255),b
  6199  0026AC  0E00               	movlw	0
  6200  0026AE  6FFE               	movwf	(ipv4_sendFrame@err+1)& (0+255),b
  6201                           
  6202                           ; BSR set to: 0
  6203                           ;ipv4.c: 75: oldTime = 0;
  6204  0026B0  0E00               	movlw	0
  6205  0026B2  0101               	movlb	1	; () banked
  6206  0026B4  6FC2               	movwf	ipv4_sendFrame@oldTime& (0+255),b
  6207  0026B6  0E00               	movlw	0
  6208  0026B8  6FC3               	movwf	(ipv4_sendFrame@oldTime+1)& (0+255),b
  6209  0026BA  0E00               	movlw	0
  6210  0026BC  6FC4               	movwf	(ipv4_sendFrame@oldTime+2)& (0+255),b
  6211  0026BE  0E00               	movlw	0
  6212  0026C0  6FC5               	movwf	(ipv4_sendFrame@oldTime+3)& (0+255),b
  6213                           
  6214                           ;ipv4.c: 76: } else if ((getMillis() - oldTime) > 2000u || oldTime == 0) {
  6215  0026C2  D07E               	goto	l1139
  6216  0026C4                     l1134:
  6217                           
  6218                           ; BSR set to: 1
  6219  0026C4  C1C2  F176         	movff	ipv4_sendFrame@oldTime,??_ipv4_sendFrame
  6220  0026C8  C1C3  F177         	movff	ipv4_sendFrame@oldTime+1,??_ipv4_sendFrame+1
  6221  0026CC  C1C4  F178         	movff	ipv4_sendFrame@oldTime+2,??_ipv4_sendFrame+2
  6222  0026D0  C1C5  F179         	movff	ipv4_sendFrame@oldTime+3,??_ipv4_sendFrame+3
  6223  0026D4  0101               	movlb	1	; () banked
  6224  0026D6  1F76               	comf	??_ipv4_sendFrame& (0+255),f,b
  6225  0026D8  1F77               	comf	(??_ipv4_sendFrame+1)& (0+255),f,b
  6226  0026DA  1F78               	comf	(??_ipv4_sendFrame+2)& (0+255),f,b
  6227  0026DC  1F79               	comf	(??_ipv4_sendFrame+3)& (0+255),f,b
  6228  0026DE  2B76               	incf	??_ipv4_sendFrame& (0+255),f,b
  6229  0026E0  0E00               	movlw	0
  6230  0026E2  2377               	addwfc	(??_ipv4_sendFrame+1)& (0+255),f,b
  6231  0026E4  2378               	addwfc	(??_ipv4_sendFrame+2)& (0+255),f,b
  6232  0026E6  2379               	addwfc	(??_ipv4_sendFrame+3)& (0+255),f,b
  6233  0026E8  EC63  F02B         	call	_getMillis	;wreg free
  6234  0026EC  0101               	movlb	1	; () banked
  6235  0026EE  5176               	movf	??_ipv4_sendFrame& (0+255),w,b
  6236  0026F0  0100               	movlb	0	; () banked
  6237  0026F2  2560               	addwf	?_getMillis& (0+255),w,b
  6238  0026F4  0101               	movlb	1	; () banked
  6239  0026F6  6F7A               	movwf	(??_ipv4_sendFrame+4)& (0+255),b
  6240  0026F8  5177               	movf	(??_ipv4_sendFrame+1)& (0+255),w,b
  6241  0026FA  0100               	movlb	0	; () banked
  6242  0026FC  2161               	addwfc	(?_getMillis+1)& (0+255),w,b
  6243  0026FE  0101               	movlb	1	; () banked
  6244  002700  6F7B               	movwf	(??_ipv4_sendFrame+5)& (0+255),b
  6245  002702  5178               	movf	(??_ipv4_sendFrame+2)& (0+255),w,b
  6246  002704  0100               	movlb	0	; () banked
  6247  002706  2162               	addwfc	(?_getMillis+2)& (0+255),w,b
  6248  002708  0101               	movlb	1	; () banked
  6249  00270A  6F7C               	movwf	(??_ipv4_sendFrame+6)& (0+255),b
  6250  00270C  5179               	movf	(??_ipv4_sendFrame+3)& (0+255),w,b
  6251  00270E  0100               	movlb	0	; () banked
  6252  002710  2163               	addwfc	(?_getMillis+3)& (0+255),w,b
  6253  002712  0101               	movlb	1	; () banked
  6254  002714  6F7D               	movwf	(??_ipv4_sendFrame+7)& (0+255),b
  6255  002716  517D               	movf	(??_ipv4_sendFrame+7)& (0+255),w,b
  6256  002718  117C               	iorwf	(??_ipv4_sendFrame+6)& (0+255),w,b
  6257  00271A  E10C               	bnz	l10269
  6258  00271C  0ED1               	movlw	209
  6259  00271E  5D7A               	subwf	(??_ipv4_sendFrame+4)& (0+255),w,b
  6260  002720  0E07               	movlw	7
  6261  002722  597B               	subwfb	(??_ipv4_sendFrame+5)& (0+255),w,b
  6262  002724  B0D8               	btfsc	status,0,c
  6263  002726  D006               	goto	u12140
  6264                           
  6265                           ; BSR set to: 1
  6266  002728  51C2               	movf	ipv4_sendFrame@oldTime& (0+255),w,b
  6267  00272A  11C3               	iorwf	(ipv4_sendFrame@oldTime+1)& (0+255),w,b
  6268  00272C  11C4               	iorwf	(ipv4_sendFrame@oldTime+2)& (0+255),w,b
  6269  00272E  11C5               	iorwf	(ipv4_sendFrame@oldTime+3)& (0+255),w,b
  6270  002730  A4D8               	btfss	status,2,c
  6271  002732  D046               	goto	l1139
  6272  002734                     u12140:
  6273  002734                     l10269:
  6274                           
  6275                           ; BSR set to: 1
  6276                           ;ipv4.c: 77: failedResolveCounter++;
  6277  002734  2BD6               	incf	ipv4_sendFrame@failedResolveCounter& (0+255),f,b
  6278                           
  6279                           ; BSR set to: 1
  6280                           ;ipv4.c: 79: UARTTransmitText("[IPv4]: Trying to resolve ");
  6281  002736  0EA3               	movlw	low STR_100
  6282  002738  0100               	movlb	0	; () banked
  6283  00273A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6284  00273C  0E7D               	movlw	high STR_100
  6285  00273E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6286  002740  ECD8  F026         	call	_UARTTransmitText	;wreg free
  6287                           
  6288                           ;ipv4.c: 80: UARTTransmitText(ipAdressToString(ipPacket.ipv4Header.destination));
  6289  002744  C147  F073         	movff	ipv4_sendFrame@ipPacket+19,ipAdressToString@ip
  6290  002748  C148  F074         	movff	ipv4_sendFrame@ipPacket+20,ipAdressToString@ip+1
  6291  00274C  C149  F075         	movff	ipv4_sendFrame@ipPacket+21,ipAdressToString@ip+2
  6292  002750  C14A  F076         	movff	ipv4_sendFrame@ipPacket+22,ipAdressToString@ip+3
  6293  002754  ECE7  F013         	call	_ipAdressToString	;wreg free
  6294  002758  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  6295  00275C  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  6296  002760  ECD8  F026         	call	_UARTTransmitText	;wreg free
  6297                           
  6298                           ;ipv4.c: 81: UARTTransmitText("\n\r");
  6299  002764  0EEB               	movlw	low (STR_44+1)
  6300  002766  0100               	movlb	0	; () banked
  6301  002768  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6302  00276A  0E7F               	movlw	high (STR_44+1)
  6303  00276C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6304  00276E  ECD8  F026         	call	_UARTTransmitText	;wreg free
  6305                           
  6306                           ;ipv4.c: 83: oldTime = getMillis();
  6307  002772  EC63  F02B         	call	_getMillis	;wreg free
  6308  002776  C060  F1C2         	movff	?_getMillis,ipv4_sendFrame@oldTime
  6309  00277A  C061  F1C3         	movff	?_getMillis+1,ipv4_sendFrame@oldTime+1
  6310  00277E  C062  F1C4         	movff	?_getMillis+2,ipv4_sendFrame@oldTime+2
  6311  002782  C063  F1C5         	movff	?_getMillis+3,ipv4_sendFrame@oldTime+3
  6312                           
  6313                           ;ipv4.c: 84: arp_sendRequest(ipPacket.ipv4Header.source, ipPacket.ipv4Header.destination
      +                          );
  6314  002786  C143  F100         	movff	ipv4_sendFrame@ipPacket+15,arp_sendRequest@ipSender
  6315  00278A  C144  F101         	movff	ipv4_sendFrame@ipPacket+16,arp_sendRequest@ipSender+1
  6316  00278E  C145  F102         	movff	ipv4_sendFrame@ipPacket+17,arp_sendRequest@ipSender+2
  6317  002792  C146  F103         	movff	ipv4_sendFrame@ipPacket+18,arp_sendRequest@ipSender+3
  6318  002796  C147  F104         	movff	ipv4_sendFrame@ipPacket+19,arp_sendRequest@ipTarget
  6319  00279A  C148  F105         	movff	ipv4_sendFrame@ipPacket+20,arp_sendRequest@ipTarget+1
  6320  00279E  C149  F106         	movff	ipv4_sendFrame@ipPacket+21,arp_sendRequest@ipTarget+2
  6321  0027A2  C14A  F107         	movff	ipv4_sendFrame@ipPacket+22,arp_sendRequest@ipTarget+3
  6322  0027A6  ECFF  F021         	call	_arp_sendRequest	;wreg free
  6323                           
  6324                           ;ipv4.c: 85: if (failedResolveCounter >= 3u) {
  6325  0027AA  0E02               	movlw	2
  6326  0027AC  0101               	movlb	1	; () banked
  6327  0027AE  65D6               	cpfsgt	ipv4_sendFrame@failedResolveCounter& (0+255),b
  6328  0027B0  D007               	goto	l1139
  6329                           
  6330                           ; BSR set to: 1
  6331                           ;ipv4.c: 86: failedResolveCounter = 0;
  6332  0027B2  0E00               	movlw	0
  6333  0027B4  6FD6               	movwf	ipv4_sendFrame@failedResolveCounter& (0+255),b
  6334                           
  6335                           ;ipv4.c: 87: err.code = ERROR_ARP_MAXIMUM_NUMBER_OF_REQUESTS_REACHED;
  6336  0027B6  0E01               	movlw	1
  6337  0027B8  0100               	movlb	0	; () banked
  6338  0027BA  6FFF               	movwf	(ipv4_sendFrame@err+2)& (0+255),b
  6339  0027BC  0E94               	movlw	148
  6340  0027BE  6FFE               	movwf	(ipv4_sendFrame@err+1)& (0+255),b
  6341  0027C0                     l1139:
  6342                           
  6343                           ;ipv4.c: 88: }
  6344                           ;ipv4.c: 89: }
  6345                           ;ipv4.c: 90: return err;
  6346                           
  6347                           ; BSR set to: 0
  6348                           
  6349                           ; BSR set to: 0
  6350                           
  6351                           ; BSR set to: 0
  6352  0027C0  C0FD  F134         	movff	ipv4_sendFrame@err,?_ipv4_sendFrame
  6353  0027C4  C0FE  F135         	movff	ipv4_sendFrame@err+1,?_ipv4_sendFrame+1
  6354  0027C8  C0FF  F136         	movff	ipv4_sendFrame@err+2,?_ipv4_sendFrame+2
  6355  0027CC  0012               	return	
  6356  0027CE                     __end_of_ipv4_sendFrame:
  6357                           	opt stack 0
  6358                           tblptru	equ	0xFF8
  6359                           tblptrh	equ	0xFF7
  6360                           tblptrl	equ	0xFF6
  6361                           tablat	equ	0xFF5
  6362                           prodh	equ	0xFF4
  6363                           prodl	equ	0xFF3
  6364                           intcon	equ	0xFF2
  6365                           intcon3	equ	0xFF0
  6366                           indf0	equ	0xFEF
  6367                           postinc0	equ	0xFEE
  6368                           plusw0	equ	0xFEB
  6369                           fsr0h	equ	0xFEA
  6370                           fsr0l	equ	0xFE9
  6371                           wreg	equ	0xFE8
  6372                           indf1	equ	0xFE7
  6373                           postinc1	equ	0xFE6
  6374                           postdec1	equ	0xFE5
  6375                           plusw1	equ	0xFE3
  6376                           fsr1h	equ	0xFE2
  6377                           fsr1l	equ	0xFE1
  6378                           indf2	equ	0xFDF
  6379                           postinc2	equ	0xFDE
  6380                           postdec2	equ	0xFDD
  6381                           plusw2	equ	0xFDB
  6382                           fsr2h	equ	0xFDA
  6383                           fsr2l	equ	0xFD9
  6384                           status	equ	0xFD8
  6385                           
  6386 ;; *************** function _arp_getEntryFromTable *****************
  6387 ;; Defined at:
  6388 ;;		line 466 in file "src/stack/protocols/arp.c"
  6389 ;; Parameters:    Size  Location     Type
  6390 ;;  index           1    wreg     unsigned char 
  6391 ;; Auto vars:     Size  Location     Type
  6392 ;;  index           1    7[BANK0 ] unsigned char 
  6393 ;; Return value:  Size  Location     Type
  6394 ;;                  6    0[BANK0 ] struct macaddress
  6395 ;; Registers used:
  6396 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6397 ;; Tracked objects:
  6398 ;;		On entry : 0/0
  6399 ;;		On exit  : 0/0
  6400 ;;		Unchanged: 0/0
  6401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6402 ;;      Params:         0       7       0       0       0       0       0       0       0
  6403 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6404 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6405 ;;      Totals:         0       8       0       0       0       0       0       0       0
  6406 ;;Total ram usage:        8 bytes
  6407 ;; Hardware stack levels used:    1
  6408 ;; Hardware stack levels required when called:    4
  6409 ;; This function calls:
  6410 ;;		Nothing
  6411 ;; This function is called by:
  6412 ;;		_ipv4_sendFrame
  6413 ;; This function uses a non-reentrant model
  6414 ;;
  6415                           
  6416                           	psect	text13
  6417  00538C                     __ptext13:
  6418                           	opt stack 0
  6419  00538C                     _arp_getEntryFromTable:
  6420                           	opt stack 24
  6421                           
  6422                           ;incstack = 0
  6423                           ;arp_getEntryFromTable@index stored from wreg
  6424  00538C  0100               	movlb	0	; () banked
  6425  00538E  6F67               	movwf	arp_getEntryFromTable@index& (0+255),b
  6426                           
  6427                           ;arp.c: 467: return arp_table[index].mac;
  6428  005390  0100               	movlb	0	; () banked
  6429  005392  5167               	movf	arp_getEntryFromTable@index& (0+255),w,b
  6430  005394  0D0E               	mullw	14
  6431  005396  0E04               	movlw	4
  6432  005398  26F3               	addwf	prodl,f,c
  6433  00539A  0E00               	movlw	0
  6434  00539C  22F4               	addwfc	prodh,f,c
  6435  00539E  0E00               	movlw	low _arp_table
  6436  0053A0  24F3               	addwf	prodl,w,c
  6437  0053A2  6ED9               	movwf	fsr2l,c
  6438  0053A4  0E03               	movlw	high _arp_table
  6439  0053A6  20F4               	addwfc	prodh,w,c
  6440  0053A8  6EDA               	movwf	fsr2h,c
  6441  0053AA  EE00  F060         	lfsr	0,?_arp_getEntryFromTable
  6442  0053AE  0E05               	movlw	5
  6443  0053B0                     u11581:
  6444  0053B0  CFDB FFEB          	movff	plusw2,plusw0
  6445  0053B4  06E8               	decf	wreg,f,c
  6446  0053B6  E2FC               	bc	u11581
  6447  0053B8  0012               	return	
  6448  0053BA                     __end_of_arp_getEntryFromTable:
  6449                           	opt stack 0
  6450                           tblptru	equ	0xFF8
  6451                           tblptrh	equ	0xFF7
  6452                           tblptrl	equ	0xFF6
  6453                           tablat	equ	0xFF5
  6454                           prodh	equ	0xFF4
  6455                           prodl	equ	0xFF3
  6456                           intcon	equ	0xFF2
  6457                           intcon3	equ	0xFF0
  6458                           indf0	equ	0xFEF
  6459                           postinc0	equ	0xFEE
  6460                           plusw0	equ	0xFEB
  6461                           fsr0h	equ	0xFEA
  6462                           fsr0l	equ	0xFE9
  6463                           wreg	equ	0xFE8
  6464                           indf1	equ	0xFE7
  6465                           postinc1	equ	0xFE6
  6466                           postdec1	equ	0xFE5
  6467                           plusw1	equ	0xFE3
  6468                           fsr1h	equ	0xFE2
  6469                           fsr1l	equ	0xFE1
  6470                           indf2	equ	0xFDF
  6471                           postinc2	equ	0xFDE
  6472                           postdec2	equ	0xFDD
  6473                           plusw2	equ	0xFDB
  6474                           fsr2h	equ	0xFDA
  6475                           fsr2l	equ	0xFD9
  6476                           status	equ	0xFD8
  6477                           
  6478 ;; *************** function _ipv4_background *****************
  6479 ;; Defined at:
  6480 ;;		line 256 in file "src/stack/protocols/ipv4.c"
  6481 ;; Parameters:    Size  Location     Type
  6482 ;;  link            1    wreg     enum E72
  6483 ;; Auto vars:     Size  Location     Type
  6484 ;;  link            1    0[COMRAM] enum E72
  6485 ;;  err             3   63[BANK0 ] struct error
  6486 ;; Return value:  Size  Location     Type
  6487 ;;                  3   58[BANK0 ] struct error
  6488 ;; Registers used:
  6489 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6490 ;; Tracked objects:
  6491 ;;		On entry : 0/0
  6492 ;;		On exit  : 0/0
  6493 ;;		Unchanged: 0/0
  6494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6495 ;;      Params:         0       3       0       0       0       0       0       0       0
  6496 ;;      Locals:         0       3       0       0       0       0       0       0       0
  6497 ;;      Temps:          0       2       0       0       0       0       0       0       0
  6498 ;;      Totals:         0       8       0       0       0       0       0       0       0
  6499 ;;Total ram usage:        8 bytes
  6500 ;; Hardware stack levels used:    1
  6501 ;; Hardware stack levels required when called:    5
  6502 ;; This function calls:
  6503 ;;		_UARTTransmitText
  6504 ;; This function is called by:
  6505 ;;		_handleStackBackgroundTasks
  6506 ;; This function uses a non-reentrant model
  6507 ;;
  6508                           
  6509                           	psect	text14
  6510  0032EC                     __ptext14:
  6511                           	opt stack 0
  6512  0032EC                     _ipv4_background:
  6513                           	opt stack 24
  6514                           
  6515                           ;ipv4.c: 257: error_t err;
  6516                           ;ipv4.c: 258: err.module = ERROR_MODULE_IPv4;
  6517                           
  6518                           ; BSR set to: 0
  6519                           ;incstack = 0
  6520  0032EC  0E04               	movlw	4
  6521  0032EE  0100               	movlb	0	; () banked
  6522  0032F0  6F9F               	movwf	ipv4_background@err& (0+255),b
  6523                           
  6524                           ;ipv4.c: 259: err.code = (uint16_t)0;
  6525  0032F2  0E00               	movlw	0
  6526  0032F4  6FA1               	movwf	(ipv4_background@err+2)& (0+255),b
  6527  0032F6  0E00               	movlw	0
  6528  0032F8  6FA0               	movwf	(ipv4_background@err+1)& (0+255),b
  6529                           
  6530                           ; BSR set to: 0
  6531                           ;ipv4.c: 260: if ((*arpStatus).module == ERROR_MODULE_ARP && fSrcAddrChanged) {
  6532  0032FA  C03C  FFD9         	movff	_arpStatus,fsr2l
  6533  0032FE  C03D  FFDA         	movff	_arpStatus+1,fsr2h
  6534  003302  0E03               	movlw	3
  6535  003304  18DE               	xorwf	postinc2,w,c
  6536  003306  A4D8               	btfss	status,2,c
  6537  003308  D092               	goto	l1177
  6538                           
  6539                           ; BSR set to: 0
  6540  00330A  B04E               	btfsc	_fSrcAddrChanged/(0+8),_fSrcAddrChanged& (0+7),c
  6541  00330C  D06A               	goto	l1178
  6542  00330E  D08F               	goto	l1177
  6543  003310                     
  6544                           ; BSR set to: 0
  6545                           ;ipv4.c: 263: err = (*arpStatus);
  6546                           
  6547                           ; BSR set to: 0
  6548  003310  C03C  FFD9         	movff	_arpStatus,fsr2l
  6549  003314  C03D  FFDA         	movff	_arpStatus+1,fsr2h
  6550  003318  CFDE F09F          	movff	postinc2,ipv4_background@err
  6551  00331C  CFDE F0A0          	movff	postinc2,ipv4_background@err+1
  6552  003320  CFDD F0A1          	movff	postdec2,ipv4_background@err+2
  6553                           
  6554                           ; BSR set to: 0
  6555                           ;ipv4.c: 265: UARTTransmitText("[IPv4]: ARP process completed.\n\r");
  6556  003324  0EAD               	movlw	low STR_113
  6557  003326  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6558  003328  0E7C               	movlw	high STR_113
  6559  00332A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6560  00332C  ECD8  F026         	call	_UARTTransmitText	;wreg free
  6561                           
  6562                           ;ipv4.c: 267: ipSource = ipPreliminarySource;
  6563  003330  C1C6  F1D2         	movff	_ipPreliminarySource,_ipSource
  6564  003334  C1C7  F1D3         	movff	_ipPreliminarySource+1,_ipSource+1
  6565  003338  C1C8  F1D4         	movff	_ipPreliminarySource+2,_ipSource+2
  6566  00333C  C1C9  F1D5         	movff	_ipPreliminarySource+3,_ipSource+3
  6567                           
  6568                           ;ipv4.c: 268: fSrcAddrChanged = 0;
  6569  003340  904E               	bcf	_fSrcAddrChanged/(0+8),_fSrcAddrChanged& (0+7),c
  6570                           
  6571                           ;ipv4.c: 269: return err;
  6572  003342  C09F  F09A         	movff	ipv4_background@err,?_ipv4_background
  6573  003346  C0A0  F09B         	movff	ipv4_background@err+1,?_ipv4_background+1
  6574  00334A  C0A1  F09C         	movff	ipv4_background@err+2,?_ipv4_background+2
  6575  00334E  0012               	return	
  6576  003350                     
  6577                           ;ipv4.c: 271: err = (*arpStatus);
  6578  003350  C03C  FFD9         	movff	_arpStatus,fsr2l
  6579  003354  C03D  FFDA         	movff	_arpStatus+1,fsr2h
  6580  003358  CFDE F09F          	movff	postinc2,ipv4_background@err
  6581  00335C  CFDE F0A0          	movff	postinc2,ipv4_background@err+1
  6582  003360  CFDD F0A1          	movff	postdec2,ipv4_background@err+2
  6583                           
  6584                           ;ipv4.c: 272: return err;
  6585  003364  C09F  F09A         	movff	ipv4_background@err,?_ipv4_background
  6586  003368  C0A0  F09B         	movff	ipv4_background@err+1,?_ipv4_background+1
  6587  00336C  C0A1  F09C         	movff	ipv4_background@err+2,?_ipv4_background+2
  6588  003370  0012               	return	
  6589  003372                     
  6590                           ;ipv4.c: 274: err.code = ERROR_IPv4_ADDRESS_ALREADY_IN_USE;
  6591  003372  0E01               	movlw	1
  6592  003374  0100               	movlb	0	; () banked
  6593  003376  6FA1               	movwf	(ipv4_background@err+2)& (0+255),b
  6594  003378  0EF5               	movlw	245
  6595  00337A  6FA0               	movwf	(ipv4_background@err+1)& (0+255),b
  6596                           
  6597                           ; BSR set to: 0
  6598                           ;ipv4.c: 275: fSrcAddrChanged = 0;
  6599  00337C  904E               	bcf	_fSrcAddrChanged/(0+8),_fSrcAddrChanged& (0+7),c
  6600                           
  6601                           ; BSR set to: 0
  6602                           ;ipv4.c: 276: return err;
  6603  00337E  C09F  F09A         	movff	ipv4_background@err,?_ipv4_background
  6604  003382  C0A0  F09B         	movff	ipv4_background@err+1,?_ipv4_background+1
  6605  003386  C0A1  F09C         	movff	ipv4_background@err+2,?_ipv4_background+2
  6606                           
  6607                           ; BSR set to: 0
  6608  00338A  0012               	return	
  6609  00338C                     l1183:
  6610                           
  6611                           ; BSR set to: 0
  6612                           ;ipv4.c: 280: return err;
  6613  00338C  C09F  F09A         	movff	ipv4_background@err,?_ipv4_background
  6614  003390  C0A0  F09B         	movff	ipv4_background@err+1,?_ipv4_background+1
  6615  003394  C0A1  F09C         	movff	ipv4_background@err+2,?_ipv4_background+2
  6616  003398  0012               	return	
  6617  00339A                     
  6618                           ; BSR set to: 0
  6619                           ;ipv4.c: 282: err = (*arpStatus);
  6620                           
  6621                           ; BSR set to: 0
  6622  00339A  C03C  FFD9         	movff	_arpStatus,fsr2l
  6623  00339E  C03D  FFDA         	movff	_arpStatus+1,fsr2h
  6624  0033A2  CFDE F09F          	movff	postinc2,ipv4_background@err
  6625  0033A6  CFDE F0A0          	movff	postinc2,ipv4_background@err+1
  6626  0033AA  CFDD F0A1          	movff	postdec2,ipv4_background@err+2
  6627                           
  6628                           ; BSR set to: 0
  6629                           ;ipv4.c: 283: fSrcAddrChanged = 0;
  6630  0033AE  904E               	bcf	_fSrcAddrChanged/(0+8),_fSrcAddrChanged& (0+7),c
  6631                           
  6632                           ; BSR set to: 0
  6633                           ;ipv4.c: 284: return err;
  6634  0033B0  C09F  F09A         	movff	ipv4_background@err,?_ipv4_background
  6635  0033B4  C0A0  F09B         	movff	ipv4_background@err+1,?_ipv4_background+1
  6636  0033B8  C0A1  F09C         	movff	ipv4_background@err+2,?_ipv4_background+2
  6637                           
  6638                           ; BSR set to: 0
  6639  0033BC  0012               	return	
  6640  0033BE                     
  6641                           ; BSR set to: 0
  6642                           ;ipv4.c: 287: fSrcAddrChanged = 0;
  6643                           
  6644                           ; BSR set to: 0
  6645                           ;ipv4.c: 286: case ERROR_ARP_UNKNOWN:
  6646  0033BE  904E               	bcf	_fSrcAddrChanged/(0+8),_fSrcAddrChanged& (0+7),c
  6647                           
  6648                           ; BSR set to: 0
  6649                           ;ipv4.c: 288: err = (*arpStatus);
  6650  0033C0  C03C  FFD9         	movff	_arpStatus,fsr2l
  6651  0033C4  C03D  FFDA         	movff	_arpStatus+1,fsr2h
  6652  0033C8  CFDE F09F          	movff	postinc2,ipv4_background@err
  6653  0033CC  CFDE F0A0          	movff	postinc2,ipv4_background@err+1
  6654  0033D0  CFDD F0A1          	movff	postdec2,ipv4_background@err+2
  6655                           
  6656                           ; BSR set to: 0
  6657                           ;ipv4.c: 289: return err;
  6658  0033D4  C09F  F09A         	movff	ipv4_background@err,?_ipv4_background
  6659  0033D8  C0A0  F09B         	movff	ipv4_background@err+1,?_ipv4_background+1
  6660  0033DC  C0A1  F09C         	movff	ipv4_background@err+2,?_ipv4_background+2
  6661                           
  6662                           ; BSR set to: 0
  6663  0033E0  0012               	return	
  6664  0033E2                     l1178:
  6665                           
  6666                           ; BSR set to: 0
  6667                           
  6668                           ; BSR set to: 0
  6669  0033E2  EE20 F001          	lfsr	2,1
  6670  0033E6  503C               	movf	_arpStatus,w,c
  6671  0033E8  26D9               	addwf	fsr2l,f,c
  6672  0033EA  503D               	movf	_arpStatus+1,w,c
  6673  0033EC  22DA               	addwfc	fsr2h,f,c
  6674  0033EE  CFDE F09D          	movff	postinc2,??_ipv4_background
  6675  0033F2  CFDD F09E          	movff	postdec2,??_ipv4_background+1
  6676                           
  6677                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  6678                           ; Switch size 1, requested type "space"
  6679                           ; Number of cases is 2, Range of values is 0 to 1
  6680                           ; switch strategies available:
  6681                           ; Name         Instructions Cycles
  6682                           ; simple_byte            7     4 (average)
  6683                           ;	Chosen strategy is simple_byte
  6684  0033F6  519E               	movf	(??_ipv4_background+1)& (0+255),w,b
  6685  0033F8  0A00               	xorlw	0	; case 0
  6686  0033FA  B4D8               	btfsc	status,2,c
  6687  0033FC  D004               	goto	l11143
  6688  0033FE  0A01               	xorlw	1	; case 1
  6689  003400  B4D8               	btfsc	status,2,c
  6690  003402  D006               	goto	l11145
  6691  003404  D7DC               	goto	l1185
  6692  003406                     l11143:
  6693                           
  6694                           ; BSR set to: 0
  6695                           ; Switch size 1, requested type "space"
  6696                           ; Number of cases is 1, Range of values is 0 to 0
  6697                           ; switch strategies available:
  6698                           ; Name         Instructions Cycles
  6699                           ; simple_byte            4     3 (average)
  6700                           ;	Chosen strategy is simple_byte
  6701  003406  519D               	movf	??_ipv4_background& (0+255),w,b
  6702  003408  0A00               	xorlw	0	; case 0
  6703  00340A  B4D8               	btfsc	status,2,c
  6704  00340C  D781               	goto	l1179
  6705  00340E  D7D7               	goto	l1185
  6706  003410                     l11145:
  6707                           
  6708                           ; BSR set to: 0
  6709                           ; Switch size 1, requested type "space"
  6710                           ; Number of cases is 5, Range of values is 145 to 243
  6711                           ; switch strategies available:
  6712                           ; Name         Instructions Cycles
  6713                           ; simple_byte           16     9 (average)
  6714                           ;	Chosen strategy is simple_byte
  6715  003410  519D               	movf	??_ipv4_background& (0+255),w,b
  6716  003412  0A91               	xorlw	145	; case 145
  6717  003414  B4D8               	btfsc	status,2,c
  6718  003416  D79C               	goto	l1181
  6719  003418  0A02               	xorlw	2	; case 147
  6720  00341A  B4D8               	btfsc	status,2,c
  6721  00341C  D7B7               	goto	l1183
  6722  00341E  0A05               	xorlw	5	; case 150
  6723  003420  B4D8               	btfsc	status,2,c
  6724  003422  D7A7               	goto	l1182
  6725  003424  0A01               	xorlw	1	; case 151
  6726  003426  B4D8               	btfsc	status,2,c
  6727  003428  D7B8               	goto	l1184
  6728  00342A  0A64               	xorlw	100	; case 243
  6729  00342C  D7C8               	goto	l1185
  6730  00342E                     l1177:
  6731                           
  6732                           ; BSR set to: 0
  6733                           ;ipv4.c: 292: err.code = ERROR_IPv4_UNKNOWN;
  6734                           
  6735                           ; BSR set to: 0
  6736  00342E  0E02               	movlw	2
  6737  003430  6FA1               	movwf	(ipv4_background@err+2)& (0+255),b
  6738  003432  0E57               	movlw	87
  6739  003434  6FA0               	movwf	(ipv4_background@err+1)& (0+255),b
  6740                           
  6741                           ; BSR set to: 0
  6742                           ;ipv4.c: 293: return err;
  6743                           
  6744                           ; BSR set to: 0
  6745  003436  C09F  F09A         	movff	ipv4_background@err,?_ipv4_background
  6746  00343A  C0A0  F09B         	movff	ipv4_background@err+1,?_ipv4_background+1
  6747  00343E  C0A1  F09C         	movff	ipv4_background@err+2,?_ipv4_background+2
  6748  003442  0012               	return	
  6749  003444                     __end_of_ipv4_background:
  6750                           	opt stack 0
  6751                           tblptru	equ	0xFF8
  6752                           tblptrh	equ	0xFF7
  6753                           tblptrl	equ	0xFF6
  6754                           tablat	equ	0xFF5
  6755                           prodh	equ	0xFF4
  6756                           prodl	equ	0xFF3
  6757                           intcon	equ	0xFF2
  6758                           intcon3	equ	0xFF0
  6759                           indf0	equ	0xFEF
  6760                           postinc0	equ	0xFEE
  6761                           plusw0	equ	0xFEB
  6762                           fsr0h	equ	0xFEA
  6763                           fsr0l	equ	0xFE9
  6764                           wreg	equ	0xFE8
  6765                           indf1	equ	0xFE7
  6766                           postinc1	equ	0xFE6
  6767                           postdec1	equ	0xFE5
  6768                           plusw1	equ	0xFE3
  6769                           fsr1h	equ	0xFE2
  6770                           fsr1l	equ	0xFE1
  6771                           indf2	equ	0xFDF
  6772                           postinc2	equ	0xFDE
  6773                           postdec2	equ	0xFDD
  6774                           plusw2	equ	0xFDB
  6775                           fsr2h	equ	0xFDA
  6776                           fsr2l	equ	0xFD9
  6777                           status	equ	0xFD8
  6778                           
  6779 ;; *************** function _ethernet_rxGetNewFrame *****************
  6780 ;; Defined at:
  6781 ;;		line 55 in file "src/eth/ethernet.c"
  6782 ;; Parameters:    Size  Location     Type
  6783 ;;  frame           2  120[BANK1 ] PTR struct ethernetFrame
  6784 ;;		 -> stack(123), 
  6785 ;; Auto vars:     Size  Location     Type
  6786 ;;  err             3  130[BANK1 ] struct error
  6787 ;; Return value:  Size  Location     Type
  6788 ;;                  3  120[BANK1 ] struct error
  6789 ;; Registers used:
  6790 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6791 ;; Tracked objects:
  6792 ;;		On entry : 0/0
  6793 ;;		On exit  : 0/0
  6794 ;;		Unchanged: 0/0
  6795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6796 ;;      Params:         0       0       2       0       0       0       0       0       0
  6797 ;;      Locals:         0       0       3       0       0       0       0       0       0
  6798 ;;      Temps:          0       0       8       0       0       0       0       0       0
  6799 ;;      Totals:         0       0      13       0       0       0       0       0       0
  6800 ;;Total ram usage:       13 bytes
  6801 ;; Hardware stack levels used:    1
  6802 ;; Hardware stack levels required when called:   12
  6803 ;; This function calls:
  6804 ;;		_UARTTransmitInt
  6805 ;;		_UARTTransmitText
  6806 ;;		_arp_handleNewPacket
  6807 ;;		_etherTypeToString
  6808 ;;		_ethernetController_dropPacket
  6809 ;;		_ethernetController_getEtherTypeField
  6810 ;;		_ethernetController_getNextPacketPointer
  6811 ;;		_ethernetController_getRSV
  6812 ;;		_ethernetController_updateNextPacketPointer
  6813 ;;		_getMillis
  6814 ;;		_intToString
  6815 ;;		_ipv4_handleNewPacket
  6816 ;;		_macToString
  6817 ;; This function is called by:
  6818 ;;		_handleStackBackgroundTasks
  6819 ;; This function uses a non-reentrant model
  6820 ;;
  6821                           
  6822                           	psect	text15
  6823  0000EC                     __ptext15:
  6824                           	opt stack 0
  6825  0000EC                     _ethernet_rxGetNewFrame:
  6826                           	opt stack 17
  6827                           
  6828                           ;ethernet.c: 56: uint32_t static counter = 0;
  6829                           ;ethernet.c: 57: error_t err;
  6830                           ;ethernet.c: 58: err.module = ERROR_MODULE_ETHERNET;
  6831                           
  6832                           ;incstack = 0
  6833  0000EC  0E02               	movlw	2
  6834  0000EE  0101               	movlb	1	; () banked
  6835  0000F0  6F82               	movwf	ethernet_rxGetNewFrame@err& (0+255),b
  6836                           
  6837                           ;ethernet.c: 59: err.code = (uint16_t)0;
  6838  0000F2  0E00               	movlw	0
  6839  0000F4  6F84               	movwf	(ethernet_rxGetNewFrame@err+2)& (0+255),b
  6840  0000F6  0E00               	movlw	0
  6841  0000F8  6F83               	movwf	(ethernet_rxGetNewFrame@err+1)& (0+255),b
  6842                           
  6843                           ; BSR set to: 1
  6844                           ;ethernet.c: 62: frame->tReceived = getMillis();
  6845  0000FA  EC63  F02B         	call	_getMillis	;wreg free
  6846  0000FE  0101               	movlb	1	; () banked
  6847  000100  EE20 F01E          	lfsr	2,30
  6848  000104  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6849  000106  26D9               	addwf	fsr2l,f,c
  6850  000108  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6851  00010A  22DA               	addwfc	fsr2h,f,c
  6852  00010C  0100               	movlb	0	; () banked
  6853  00010E  C060  FFDE         	movff	?_getMillis,postinc2
  6854  000112  C061  FFDE         	movff	?_getMillis+1,postinc2
  6855  000116  C062  FFDE         	movff	?_getMillis+2,postinc2
  6856  00011A  C063  FFDE         	movff	?_getMillis+3,postinc2
  6857                           
  6858                           ; BSR set to: 0
  6859                           ;ethernet.c: 63: frame->memory.start = ethernetController_getNextPacketPointer();
  6860  00011E  EC7B  F02B         	call	_ethernetController_getNextPacketPointer	;wreg free
  6861  000122  0101               	movlb	1	; () banked
  6862  000124  EE20 F010          	lfsr	2,16
  6863  000128  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6864  00012A  26D9               	addwf	fsr2l,f,c
  6865  00012C  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6866  00012E  22DA               	addwfc	fsr2h,f,c
  6867  000130  0100               	movlb	0	; () banked
  6868  000132  C062  FFDE         	movff	?_ethernetController_getNextPacketPointer,postinc2
  6869  000136  C063  FFDD         	movff	?_ethernetController_getNextPacketPointer+1,postdec2
  6870                           
  6871                           ; BSR set to: 0
  6872                           ;ethernet.c: 64: ethernetController_updateNextPacketPointer();
  6873  00013A  EC20  F024         	call	_ethernetController_updateNextPacketPointer	;wreg free
  6874                           
  6875                           ;ethernet.c: 65: frame->memory.fIsAssigned = 1;
  6876  00013E  0101               	movlb	1	; () banked
  6877  000140  EE20 F016          	lfsr	2,22
  6878  000144  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6879  000146  26D9               	addwf	fsr2l,f,c
  6880  000148  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6881  00014A  22DA               	addwfc	fsr2h,f,c
  6882  00014C  0E01               	movlw	1
  6883  00014E  6EDF               	movwf	indf2,c
  6884                           
  6885                           ; BSR set to: 1
  6886                           ;ethernet.c: 66: frame->receiveStatusVector = ethernetController_getRSV(frame->memory.st
      +                          art);
  6887  000150  EE20 F010          	lfsr	2,16
  6888  000154  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6889  000156  26D9               	addwf	fsr2l,f,c
  6890  000158  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6891  00015A  22DA               	addwfc	fsr2h,f,c
  6892  00015C  CFDE F071          	movff	postinc2,ethernetController_getRSV@address
  6893  000160  CFDD F072          	movff	postdec2,ethernetController_getRSV@address+1
  6894  000164  EC99  F024         	call	_ethernetController_getRSV	;wreg free
  6895  000168  0101               	movlb	1	; () banked
  6896  00016A  EE20 F019          	lfsr	2,25
  6897  00016E  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6898  000170  26D9               	addwf	fsr2l,f,c
  6899  000172  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6900  000174  22DA               	addwfc	fsr2h,f,c
  6901  000176  0E04               	movlw	4
  6902  000178                     u11951:
  6903  000178  CFEB FFDB          	movff	plusw0,plusw2
  6904  00017C  06E8               	decf	wreg,f,c
  6905  00017E  E2FC               	bc	u11951
  6906                           
  6907                           ; BSR set to: 1
  6908                           ;ethernet.c: 67: frame->memory.length = frame->receiveStatusVector.length;
  6909  000180  EE20 F019          	lfsr	2,25
  6910  000184  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6911  000186  26D9               	addwf	fsr2l,f,c
  6912  000188  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6913  00018A  22DA               	addwfc	fsr2h,f,c
  6914  00018C  EE10 F014          	lfsr	1,20
  6915  000190  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6916  000192  26E1               	addwf	fsr1l,f,c
  6917  000194  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6918  000196  22E2               	addwfc	fsr1h,f,c
  6919  000198  CFDE FFE6          	movff	postinc2,postinc1
  6920  00019C  CFDD FFE5          	movff	postdec2,postdec1
  6921                           
  6922                           ; BSR set to: 1
  6923                           ;ethernet.c: 71: if (frame->memory.start + frame->memory.length > 0x5FFF) {
  6924  0001A0  EE20 F014          	lfsr	2,20
  6925  0001A4  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6926  0001A6  26D9               	addwf	fsr2l,f,c
  6927  0001A8  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6928  0001AA  22DA               	addwfc	fsr2h,f,c
  6929  0001AC  CFDE F17A          	movff	postinc2,??_ethernet_rxGetNewFrame
  6930  0001B0  CFDD F17B          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  6931  0001B4  EE20 F010          	lfsr	2,16
  6932  0001B8  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6933  0001BA  26D9               	addwf	fsr2l,f,c
  6934  0001BC  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6935  0001BE  22DA               	addwfc	fsr2h,f,c
  6936  0001C0  CFDE F17C          	movff	postinc2,??_ethernet_rxGetNewFrame+2
  6937  0001C4  CFDD F17D          	movff	postdec2,??_ethernet_rxGetNewFrame+3
  6938  0001C8  517A               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  6939  0001CA  277C               	addwf	(??_ethernet_rxGetNewFrame+2)& (0+255),f,b
  6940  0001CC  517B               	movf	(??_ethernet_rxGetNewFrame+1)& (0+255),w,b
  6941  0001CE  237D               	addwfc	(??_ethernet_rxGetNewFrame+3)& (0+255),f,b
  6942  0001D0  0E60               	movlw	96
  6943  0001D2  5D7D               	subwf	(??_ethernet_rxGetNewFrame+3)& (0+255),w,b
  6944  0001D4  A0D8               	btfss	status,0,c
  6945  0001D6  D03B               	goto	l366
  6946                           
  6947                           ; BSR set to: 1
  6948                           ;ethernet.c: 73: frame->memory.end = frame->memory.length - ((0x5FFF - 0x3000) - frame->
      +                          memory.start) + 0x3000;
  6949  0001D8  0E00               	movlw	0
  6950  0001DA  6F7A               	movwf	??_ethernet_rxGetNewFrame& (0+255),b
  6951  0001DC  0E30               	movlw	48
  6952  0001DE  6F7B               	movwf	(??_ethernet_rxGetNewFrame+1)& (0+255),b
  6953  0001E0  EE20 F014          	lfsr	2,20
  6954  0001E4  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6955  0001E6  26D9               	addwf	fsr2l,f,c
  6956  0001E8  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6957  0001EA  22DA               	addwfc	fsr2h,f,c
  6958  0001EC  CFDE F17C          	movff	postinc2,??_ethernet_rxGetNewFrame+2
  6959  0001F0  CFDD F17D          	movff	postdec2,??_ethernet_rxGetNewFrame+3
  6960  0001F4  0EFF               	movlw	255
  6961  0001F6  6F7E               	movwf	(??_ethernet_rxGetNewFrame+4)& (0+255),b
  6962  0001F8  0E2F               	movlw	47
  6963  0001FA  6F7F               	movwf	(??_ethernet_rxGetNewFrame+5)& (0+255),b
  6964  0001FC  EE20 F010          	lfsr	2,16
  6965  000200  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6966  000202  26D9               	addwf	fsr2l,f,c
  6967  000204  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6968  000206  22DA               	addwfc	fsr2h,f,c
  6969  000208  CFDE F180          	movff	postinc2,??_ethernet_rxGetNewFrame+6
  6970  00020C  CFDD F181          	movff	postdec2,??_ethernet_rxGetNewFrame+7
  6971  000210  1F80               	comf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  6972  000212  1F81               	comf	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  6973  000214  4B80               	infsnz	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  6974  000216  2B81               	incf	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  6975  000218  517E               	movf	(??_ethernet_rxGetNewFrame+4)& (0+255),w,b
  6976  00021A  2780               	addwf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  6977  00021C  517F               	movf	(??_ethernet_rxGetNewFrame+5)& (0+255),w,b
  6978  00021E  2381               	addwfc	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  6979  000220  1F80               	comf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  6980  000222  1F81               	comf	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  6981  000224  4B80               	infsnz	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  6982  000226  2B81               	incf	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  6983  000228  517C               	movf	(??_ethernet_rxGetNewFrame+2)& (0+255),w,b
  6984  00022A  2780               	addwf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  6985  00022C  517D               	movf	(??_ethernet_rxGetNewFrame+3)& (0+255),w,b
  6986  00022E  2381               	addwfc	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  6987  000230  517A               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  6988  000232  2780               	addwf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  6989  000234  517B               	movf	(??_ethernet_rxGetNewFrame+1)& (0+255),w,b
  6990  000236  2381               	addwfc	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  6991  000238  EE20 F012          	lfsr	2,18
  6992  00023C  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6993  00023E  26D9               	addwf	fsr2l,f,c
  6994  000240  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6995  000242  22DA               	addwfc	fsr2h,f,c
  6996  000244  C180  FFDE         	movff	??_ethernet_rxGetNewFrame+6,postinc2
  6997  000248  C181  FFDD         	movff	??_ethernet_rxGetNewFrame+7,postdec2
  6998                           
  6999                           ;ethernet.c: 74: } else {
  7000  00024C  D022               	goto	l367
  7001  00024E                     l366:
  7002                           
  7003                           ; BSR set to: 1
  7004                           ;ethernet.c: 75: frame->memory.end = frame->memory.start + frame->memory.length;
  7005                           
  7006                           ; BSR set to: 1
  7007  00024E  EE20 F014          	lfsr	2,20
  7008  000252  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7009  000254  26D9               	addwf	fsr2l,f,c
  7010  000256  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7011  000258  22DA               	addwfc	fsr2h,f,c
  7012  00025A  CFDE F17A          	movff	postinc2,??_ethernet_rxGetNewFrame
  7013  00025E  CFDD F17B          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  7014  000262  EE20 F010          	lfsr	2,16
  7015  000266  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7016  000268  26D9               	addwf	fsr2l,f,c
  7017  00026A  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7018  00026C  22DA               	addwfc	fsr2h,f,c
  7019  00026E  CFDE F17C          	movff	postinc2,??_ethernet_rxGetNewFrame+2
  7020  000272  CFDD F17D          	movff	postdec2,??_ethernet_rxGetNewFrame+3
  7021  000276  517A               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  7022  000278  277C               	addwf	(??_ethernet_rxGetNewFrame+2)& (0+255),f,b
  7023  00027A  517B               	movf	(??_ethernet_rxGetNewFrame+1)& (0+255),w,b
  7024  00027C  237D               	addwfc	(??_ethernet_rxGetNewFrame+3)& (0+255),f,b
  7025  00027E  EE20 F012          	lfsr	2,18
  7026  000282  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7027  000284  26D9               	addwf	fsr2l,f,c
  7028  000286  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7029  000288  22DA               	addwfc	fsr2h,f,c
  7030  00028A  C17C  FFDE         	movff	??_ethernet_rxGetNewFrame+2,postinc2
  7031  00028E  C17D  FFDD         	movff	??_ethernet_rxGetNewFrame+3,postdec2
  7032  000292                     l367:
  7033                           
  7034                           ; BSR set to: 1
  7035                           ;ethernet.c: 76: }
  7036                           ;ethernet.c: 77: frame->ethertype = ethernetController_getEtherTypeField(frame->memory);
  7037                           
  7038                           ; BSR set to: 1
  7039  000292  EE20 F010          	lfsr	2,16
  7040  000296  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7041  000298  26D9               	addwf	fsr2l,f,c
  7042  00029A  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7043  00029C  22DA               	addwfc	fsr2h,f,c
  7044  00029E  EE00  F06F         	lfsr	0,ethernetController_getEtherTypeField@field
  7045  0002A2  0E08               	movlw	8
  7046  0002A4                     u11971:
  7047  0002A4  CFDB FFEB          	movff	plusw2,plusw0
  7048  0002A8  06E8               	decf	wreg,f,c
  7049  0002AA  E2FC               	bc	u11971
  7050  0002AC  EC47  F025         	call	_ethernetController_getEtherTypeField	;wreg free
  7051  0002B0  0101               	movlb	1	; () banked
  7052  0002B2  EE20 F00E          	lfsr	2,14
  7053  0002B6  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7054  0002B8  26D9               	addwf	fsr2l,f,c
  7055  0002BA  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7056  0002BC  22DA               	addwfc	fsr2h,f,c
  7057  0002BE  0100               	movlb	0	; () banked
  7058  0002C0  C06F  FFDE         	movff	?_ethernetController_getEtherTypeField,postinc2
  7059  0002C4  C070  FFDD         	movff	?_ethernetController_getEtherTypeField+1,postdec2
  7060                           
  7061                           ; BSR set to: 0
  7062                           ;ethernet.c: 79: UARTTransmitText("[");
  7063  0002C8  0EC3               	movlw	low (STR_73+3)
  7064  0002CA  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7065  0002CC  0E7F               	movlw	high (STR_73+3)
  7066  0002CE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7067  0002D0  ECD8  F026         	call	_UARTTransmitText	;wreg free
  7068                           
  7069                           ;ethernet.c: 80: UARTTransmitText(intToString(counter++));
  7070  0002D4  C035  F084         	movff	ethernet_rxGetNewFrame@counter,intToString@val
  7071  0002D8  C036  F085         	movff	ethernet_rxGetNewFrame@counter+1,intToString@val+1
  7072  0002DC  C037  F086         	movff	ethernet_rxGetNewFrame@counter+2,intToString@val+2
  7073  0002E0  C038  F087         	movff	ethernet_rxGetNewFrame@counter+3,intToString@val+3
  7074  0002E4  EC66  F029         	call	_intToString	;wreg free
  7075  0002E8  C084  F098         	movff	?_intToString,UARTTransmitText@str
  7076  0002EC  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  7077  0002F0  ECD8  F026         	call	_UARTTransmitText	;wreg free
  7078  0002F4  0E01               	movlw	1
  7079  0002F6  2635               	addwf	ethernet_rxGetNewFrame@counter,f,c
  7080  0002F8  0E00               	movlw	0
  7081  0002FA  2236               	addwfc	ethernet_rxGetNewFrame@counter+1,f,c
  7082  0002FC  2237               	addwfc	ethernet_rxGetNewFrame@counter+2,f,c
  7083  0002FE  2238               	addwfc	ethernet_rxGetNewFrame@counter+3,f,c
  7084                           
  7085                           ;ethernet.c: 81: UARTTransmitText("]");
  7086  000300  0EFB               	movlw	low (STR_19+1)
  7087  000302  0100               	movlb	0	; () banked
  7088  000304  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7089  000306  0E7F               	movlw	high (STR_19+1)
  7090  000308  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7091  00030A  ECD8  F026         	call	_UARTTransmitText	;wreg free
  7092                           
  7093                           ;ethernet.c: 84: if (frame->receiveStatusVector.broadcast)
  7094  00030E  0101               	movlb	1	; () banked
  7095  000310  EE20 F01B          	lfsr	2,27
  7096  000314  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7097  000316  26D9               	addwf	fsr2l,f,c
  7098  000318  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7099  00031A  22DA               	addwfc	fsr2h,f,c
  7100  00031C  AEDF               	btfss	indf2,7,c
  7101  00031E  D007               	goto	l368
  7102                           
  7103                           ; BSR set to: 1
  7104                           ;ethernet.c: 85: UARTTransmitText("[Broadcast]");
  7105  000320  0E56               	movlw	low STR_3
  7106  000322  0100               	movlb	0	; () banked
  7107  000324  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7108  000326  0E7F               	movlw	high STR_3
  7109  000328  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7110  00032A  ECD8  F026         	call	_UARTTransmitText	;wreg free
  7111  00032E                     l368:
  7112                           
  7113                           ;ethernet.c: 86: if (frame->receiveStatusVector.unicast)
  7114  00032E  0101               	movlb	1	; () banked
  7115  000330  EE20 F01D          	lfsr	2,29
  7116  000334  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7117  000336  26D9               	addwf	fsr2l,f,c
  7118  000338  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7119  00033A  22DA               	addwfc	fsr2h,f,c
  7120  00033C  A4DF               	btfss	indf2,2,c
  7121  00033E  D007               	goto	l369
  7122                           
  7123                           ; BSR set to: 1
  7124                           ;ethernet.c: 87: UARTTransmitText("[Unicast]");
  7125  000340  0E77               	movlw	low STR_4
  7126  000342  0100               	movlb	0	; () banked
  7127  000344  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7128  000346  0E7F               	movlw	high STR_4
  7129  000348  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7130  00034A  ECD8  F026         	call	_UARTTransmitText	;wreg free
  7131  00034E                     l369:
  7132                           
  7133                           ;ethernet.c: 88: if (!frame->receiveStatusVector.receivedOk)
  7134  00034E  0101               	movlb	1	; () banked
  7135  000350  EE20 F01B          	lfsr	2,27
  7136  000354  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7137  000356  26D9               	addwf	fsr2l,f,c
  7138  000358  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7139  00035A  22DA               	addwfc	fsr2h,f,c
  7140  00035C  BADF               	btfsc	indf2,5,c
  7141  00035E  D007               	goto	l370
  7142                           
  7143                           ; BSR set to: 1
  7144                           ;ethernet.c: 89: UARTTransmitText("[Symbol Errors]");
  7145  000360  0EDA               	movlw	low STR_5
  7146  000362  0100               	movlb	0	; () banked
  7147  000364  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7148  000366  0E7E               	movlw	high STR_5
  7149  000368  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7150  00036A  ECD8  F026         	call	_UARTTransmitText	;wreg free
  7151  00036E                     l370:
  7152                           
  7153                           ;ethernet.c: 91: UARTTransmitText("[");
  7154  00036E  0EC3               	movlw	low (STR_73+3)
  7155  000370  0100               	movlb	0	; () banked
  7156  000372  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7157  000374  0E7F               	movlw	high (STR_73+3)
  7158  000376  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7159  000378  ECD8  F026         	call	_UARTTransmitText	;wreg free
  7160                           
  7161                           ;ethernet.c: 92: UARTTransmitText(intToString(frame->tReceived));
  7162  00037C  0101               	movlb	1	; () banked
  7163  00037E  EE20 F01E          	lfsr	2,30
  7164  000382  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7165  000384  26D9               	addwf	fsr2l,f,c
  7166  000386  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7167  000388  22DA               	addwfc	fsr2h,f,c
  7168  00038A  CFDE F084          	movff	postinc2,intToString@val
  7169  00038E  CFDE F085          	movff	postinc2,intToString@val+1
  7170  000392  CFDE F086          	movff	postinc2,intToString@val+2
  7171  000396  CFDE F087          	movff	postinc2,intToString@val+3
  7172  00039A  EC66  F029         	call	_intToString	;wreg free
  7173  00039E  C084  F098         	movff	?_intToString,UARTTransmitText@str
  7174  0003A2  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  7175  0003A6  ECD8  F026         	call	_UARTTransmitText	;wreg free
  7176                           
  7177                           ;ethernet.c: 93: UARTTransmitText("]");
  7178  0003AA  0EFB               	movlw	low (STR_19+1)
  7179  0003AC  0100               	movlb	0	; () banked
  7180  0003AE  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7181  0003B0  0E7F               	movlw	high (STR_19+1)
  7182  0003B2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7183  0003B4  ECD8  F026         	call	_UARTTransmitText	;wreg free
  7184                           
  7185                           ;ethernet.c: 99: switch (frame->ethertype) {
  7186  0003B8  D097               	goto	l371
  7187  0003BA                     
  7188                           ;ethernet.c: 101: UARTTransmitText("[ARP]");
  7189  0003BA  0EBA               	movlw	low STR_8
  7190  0003BC  0100               	movlb	0	; () banked
  7191  0003BE  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7192  0003C0  0E7F               	movlw	high STR_8
  7193  0003C2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7194  0003C4  ECD8  F026         	call	_UARTTransmitText	;wreg free
  7195                           
  7196                           ;ethernet.c: 102: arp_handleNewPacket(frame);
  7197  0003C8  C178  F0FC         	movff	ethernet_rxGetNewFrame@frame,arp_handleNewPacket@frame
  7198  0003CC  C179  F0FD         	movff	ethernet_rxGetNewFrame@frame+1,arp_handleNewPacket@frame+1
  7199  0003D0  ECDE  F014         	call	_arp_handleNewPacket	;wreg free
  7200                           
  7201                           ;ethernet.c: 103: break;
  7202  0003D4  D0A0               	goto	l373
  7203  0003D6                     
  7204                           ;ethernet.c: 105: UARTTransmitText("[IPv4]");
  7205  0003D6  0EB3               	movlw	low STR_9
  7206  0003D8  0100               	movlb	0	; () banked
  7207  0003DA  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7208  0003DC  0E7F               	movlw	high STR_9
  7209  0003DE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7210  0003E0  ECD8  F026         	call	_UARTTransmitText	;wreg free
  7211                           
  7212                           ;ethernet.c: 106: ipv4_handleNewPacket(frame);
  7213  0003E4  C178  F0B5         	movff	ethernet_rxGetNewFrame@frame,ipv4_handleNewPacket@frame
  7214  0003E8  C179  F0B6         	movff	ethernet_rxGetNewFrame@frame+1,ipv4_handleNewPacket@frame+1
  7215  0003EC  ECB5  F015         	call	_ipv4_handleNewPacket	;wreg free
  7216                           
  7217                           ;ethernet.c: 107: break;
  7218  0003F0  D092               	goto	l373
  7219  0003F2                     
  7220                           ;ethernet.c: 109: UARTTransmitText("[Unknown EtherType]");
  7221  0003F2  0E36               	movlw	low STR_10
  7222  0003F4  0100               	movlb	0	; () banked
  7223  0003F6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7224  0003F8  0E7E               	movlw	high STR_10
  7225  0003FA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7226  0003FC  ECD8  F026         	call	_UARTTransmitText	;wreg free
  7227                           
  7228                           ;ethernet.c: 110: UARTTransmitText("[");
  7229  000400  0EC3               	movlw	low (STR_73+3)
  7230  000402  0100               	movlb	0	; () banked
  7231  000404  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7232  000406  0E7F               	movlw	high (STR_73+3)
  7233  000408  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7234  00040A  ECD8  F026         	call	_UARTTransmitText	;wreg free
  7235                           
  7236                           ;ethernet.c: 111: UARTTransmitText(macToString(frame->source));
  7237  00040E  0101               	movlb	1	; () banked
  7238  000410  EE20 F002          	lfsr	2,2
  7239  000414  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7240  000416  26D9               	addwf	fsr2l,f,c
  7241  000418  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7242  00041A  22DA               	addwfc	fsr2h,f,c
  7243  00041C  EE00  F07A         	lfsr	0,macToString@addr
  7244  000420  0E05               	movlw	5
  7245  000422                     u12011:
  7246  000422  CFDB FFEB          	movff	plusw2,plusw0
  7247  000426  06E8               	decf	wreg,f,c
  7248  000428  E2FC               	bc	u12011
  7249  00042A  ECA5  F01D         	call	_macToString	;wreg free
  7250  00042E  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  7251  000432  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  7252  000436  ECD8  F026         	call	_UARTTransmitText	;wreg free
  7253                           
  7254                           ;ethernet.c: 112: UARTTransmitText("->");
  7255  00043A  0EF4               	movlw	low STR_12
  7256  00043C  0100               	movlb	0	; () banked
  7257  00043E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7258  000440  0E7F               	movlw	high STR_12
  7259  000442  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7260  000444  ECD8  F026         	call	_UARTTransmitText	;wreg free
  7261                           
  7262                           ;ethernet.c: 113: UARTTransmitText(macToString(frame->destination));
  7263  000448  0101               	movlb	1	; () banked
  7264  00044A  EE20 F008          	lfsr	2,8
  7265  00044E  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7266  000450  26D9               	addwf	fsr2l,f,c
  7267  000452  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7268  000454  22DA               	addwfc	fsr2h,f,c
  7269  000456  EE00  F07A         	lfsr	0,macToString@addr
  7270  00045A  0E05               	movlw	5
  7271  00045C                     u12021:
  7272  00045C  CFDB FFEB          	movff	plusw2,plusw0
  7273  000460  06E8               	decf	wreg,f,c
  7274  000462  E2FC               	bc	u12021
  7275  000464  ECA5  F01D         	call	_macToString	;wreg free
  7276  000468  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  7277  00046C  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  7278  000470  ECD8  F026         	call	_UARTTransmitText	;wreg free
  7279                           
  7280                           ;ethernet.c: 114: UARTTransmitText("][");
  7281  000474  0EF7               	movlw	low STR_13
  7282  000476  0100               	movlb	0	; () banked
  7283  000478  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7284  00047A  0E7F               	movlw	high STR_13
  7285  00047C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7286  00047E  ECD8  F026         	call	_UARTTransmitText	;wreg free
  7287                           
  7288                           ;ethernet.c: 115: UARTTransmitText(etherTypeToString(frame->ethertype));
  7289  000482  0101               	movlb	1	; () banked
  7290  000484  EE20 F00E          	lfsr	2,14
  7291  000488  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7292  00048A  26D9               	addwf	fsr2l,f,c
  7293  00048C  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7294  00048E  22DA               	addwfc	fsr2h,f,c
  7295  000490  CFDE F060          	movff	postinc2,etherTypeToString@ethertype
  7296  000494  CFDD F061          	movff	postdec2,etherTypeToString@ethertype+1
  7297  000498  EC18  F028         	call	_etherTypeToString	;wreg free
  7298  00049C  C060  F098         	movff	?_etherTypeToString,UARTTransmitText@str
  7299  0004A0  C061  F099         	movff	?_etherTypeToString+1,UARTTransmitText@str+1
  7300  0004A4  ECD8  F026         	call	_UARTTransmitText	;wreg free
  7301                           
  7302                           ;ethernet.c: 116: UARTTransmitText("][L=");
  7303  0004A8  0ED9               	movlw	low STR_14
  7304  0004AA  0100               	movlb	0	; () banked
  7305  0004AC  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7306  0004AE  0E7F               	movlw	high STR_14
  7307  0004B0  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7308  0004B2  ECD8  F026         	call	_UARTTransmitText	;wreg free
  7309                           
  7310                           ;ethernet.c: 117: UARTTransmitInt(frame->length);
  7311  0004B6  C178  FFD9         	movff	ethernet_rxGetNewFrame@frame,fsr2l
  7312  0004BA  C179  FFDA         	movff	ethernet_rxGetNewFrame@frame+1,fsr2h
  7313  0004BE  CFDE F17A          	movff	postinc2,??_ethernet_rxGetNewFrame
  7314  0004C2  CFDD F17B          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  7315  0004C6  C17A  F09A         	movff	??_ethernet_rxGetNewFrame,UARTTransmitInt@val
  7316  0004CA  C17B  F09B         	movff	??_ethernet_rxGetNewFrame+1,UARTTransmitInt@val+1
  7317  0004CE  0100               	movlb	0	; () banked
  7318  0004D0  6B9C               	clrf	(UARTTransmitInt@val+2)& (0+255),b
  7319  0004D2  6B9D               	clrf	(UARTTransmitInt@val+3)& (0+255),b
  7320  0004D4  ECEF  F02A         	call	_UARTTransmitInt	;wreg free
  7321                           
  7322                           ;ethernet.c: 118: UARTTransmitText("] ");
  7323  0004D8  0EF1               	movlw	low STR_15
  7324  0004DA  0100               	movlb	0	; () banked
  7325  0004DC  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7326  0004DE  0E7F               	movlw	high STR_15
  7327  0004E0  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7328  0004E2  ECD8  F026         	call	_UARTTransmitText	;wreg free
  7329                           
  7330                           ;ethernet.c: 120: }
  7331                           
  7332                           ;ethernet.c: 119: break;
  7333  0004E6  D017               	goto	l373
  7334  0004E8                     l371:
  7335  0004E8  0101               	movlb	1	; () banked
  7336  0004EA  EE20 F00E          	lfsr	2,14
  7337  0004EE  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7338  0004F0  26D9               	addwf	fsr2l,f,c
  7339  0004F2  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7340  0004F4  22DA               	addwfc	fsr2h,f,c
  7341  0004F6  CFDE F17A          	movff	postinc2,??_ethernet_rxGetNewFrame
  7342  0004FA  CFDD F17B          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  7343                           
  7344                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7345                           ; Switch size 1, requested type "space"
  7346                           ; Number of cases is 1, Range of values is 8 to 8
  7347                           ; switch strategies available:
  7348                           ; Name         Instructions Cycles
  7349                           ; simple_byte            4     3 (average)
  7350                           ;	Chosen strategy is simple_byte
  7351  0004FE  517B               	movf	(??_ethernet_rxGetNewFrame+1)& (0+255),w,b
  7352  000500  0A08               	xorlw	8	; case 8
  7353  000502  A4D8               	btfss	status,2,c
  7354  000504  D776               	goto	l375
  7355                           
  7356                           ; BSR set to: 1
  7357                           ; Switch size 1, requested type "space"
  7358                           ; Number of cases is 2, Range of values is 0 to 6
  7359                           ; switch strategies available:
  7360                           ; Name         Instructions Cycles
  7361                           ; simple_byte            7     4 (average)
  7362                           ;	Chosen strategy is simple_byte
  7363  000506  517A               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  7364  000508  0A00               	xorlw	0	; case 0
  7365  00050A  B4D8               	btfsc	status,2,c
  7366  00050C  D764               	goto	l374
  7367  00050E  0A06               	xorlw	6	; case 6
  7368  000510  B4D8               	btfsc	status,2,c
  7369  000512  D753               	goto	l372
  7370  000514  D76E               	goto	l375
  7371  000516                     l373:
  7372                           
  7373                           ;ethernet.c: 123: UARTTransmitText("[");
  7374                           
  7375                           ; BSR set to: 1
  7376  000516  0EC3               	movlw	low (STR_73+3)
  7377  000518  0100               	movlb	0	; () banked
  7378  00051A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7379  00051C  0E7F               	movlw	high (STR_73+3)
  7380  00051E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7381  000520  ECD8  F026         	call	_UARTTransmitText	;wreg free
  7382                           
  7383                           ;ethernet.c: 124: UARTTransmitText(intToString(frame->memory.start));
  7384  000524  0101               	movlb	1	; () banked
  7385  000526  EE20 F010          	lfsr	2,16
  7386  00052A  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7387  00052C  26D9               	addwf	fsr2l,f,c
  7388  00052E  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7389  000530  22DA               	addwfc	fsr2h,f,c
  7390  000532  CFDE F17A          	movff	postinc2,??_ethernet_rxGetNewFrame
  7391  000536  CFDD F17B          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  7392  00053A  C17A  F084         	movff	??_ethernet_rxGetNewFrame,intToString@val
  7393  00053E  C17B  F085         	movff	??_ethernet_rxGetNewFrame+1,intToString@val+1
  7394  000542  0100               	movlb	0	; () banked
  7395  000544  6B86               	clrf	(intToString@val+2)& (0+255),b
  7396  000546  6B87               	clrf	(intToString@val+3)& (0+255),b
  7397  000548  EC66  F029         	call	_intToString	;wreg free
  7398  00054C  C084  F098         	movff	?_intToString,UARTTransmitText@str
  7399  000550  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  7400  000554  ECD8  F026         	call	_UARTTransmitText	;wreg free
  7401                           
  7402                           ;ethernet.c: 125: UARTTransmitText(" to ");
  7403  000558  0E1D               	movlw	low (STR_25+32)
  7404  00055A  0100               	movlb	0	; () banked
  7405  00055C  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7406  00055E  0E7C               	movlw	high (STR_25+32)
  7407  000560  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7408  000562  ECD8  F026         	call	_UARTTransmitText	;wreg free
  7409                           
  7410                           ;ethernet.c: 126: UARTTransmitText(intToString(frame->memory.end));
  7411  000566  0101               	movlb	1	; () banked
  7412  000568  EE20 F012          	lfsr	2,18
  7413  00056C  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7414  00056E  26D9               	addwf	fsr2l,f,c
  7415  000570  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7416  000572  22DA               	addwfc	fsr2h,f,c
  7417  000574  CFDE F17A          	movff	postinc2,??_ethernet_rxGetNewFrame
  7418  000578  CFDD F17B          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  7419  00057C  C17A  F084         	movff	??_ethernet_rxGetNewFrame,intToString@val
  7420  000580  C17B  F085         	movff	??_ethernet_rxGetNewFrame+1,intToString@val+1
  7421  000584  0100               	movlb	0	; () banked
  7422  000586  6B86               	clrf	(intToString@val+2)& (0+255),b
  7423  000588  6B87               	clrf	(intToString@val+3)& (0+255),b
  7424  00058A  EC66  F029         	call	_intToString	;wreg free
  7425  00058E  C084  F098         	movff	?_intToString,UARTTransmitText@str
  7426  000592  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  7427  000596  ECD8  F026         	call	_UARTTransmitText	;wreg free
  7428                           
  7429                           ;ethernet.c: 127: UARTTransmitText(" (");
  7430  00059A  0E0C               	movlw	low (STR_42+29)
  7431  00059C  0100               	movlb	0	; () banked
  7432  00059E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7433  0005A0  0E7D               	movlw	high (STR_42+29)
  7434  0005A2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7435  0005A4  ECD8  F026         	call	_UARTTransmitText	;wreg free
  7436                           
  7437                           ;ethernet.c: 128: UARTTransmitText(intToString(frame->memory.length));
  7438  0005A8  0101               	movlb	1	; () banked
  7439  0005AA  EE20 F014          	lfsr	2,20
  7440  0005AE  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7441  0005B0  26D9               	addwf	fsr2l,f,c
  7442  0005B2  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7443  0005B4  22DA               	addwfc	fsr2h,f,c
  7444  0005B6  CFDE F17A          	movff	postinc2,??_ethernet_rxGetNewFrame
  7445  0005BA  CFDD F17B          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  7446  0005BE  C17A  F084         	movff	??_ethernet_rxGetNewFrame,intToString@val
  7447  0005C2  C17B  F085         	movff	??_ethernet_rxGetNewFrame+1,intToString@val+1
  7448  0005C6  0100               	movlb	0	; () banked
  7449  0005C8  6B86               	clrf	(intToString@val+2)& (0+255),b
  7450  0005CA  6B87               	clrf	(intToString@val+3)& (0+255),b
  7451  0005CC  EC66  F029         	call	_intToString	;wreg free
  7452  0005D0  C084  F098         	movff	?_intToString,UARTTransmitText@str
  7453  0005D4  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  7454  0005D8  ECD8  F026         	call	_UARTTransmitText	;wreg free
  7455                           
  7456                           ;ethernet.c: 129: UARTTransmitText(")]");
  7457  0005DC  0EFA               	movlw	low STR_19
  7458  0005DE  0100               	movlb	0	; () banked
  7459  0005E0  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7460  0005E2  0E7F               	movlw	high STR_19
  7461  0005E4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7462  0005E6  ECD8  F026         	call	_UARTTransmitText	;wreg free
  7463                           
  7464                           ;ethernet.c: 131: ethernetController_dropPacket();
  7465  0005EA  EC9E  F028         	call	_ethernetController_dropPacket	;wreg free
  7466                           
  7467                           ;ethernet.c: 133: UARTTransmitText("\n\r");
  7468  0005EE  0EEB               	movlw	low (STR_44+1)
  7469  0005F0  0100               	movlb	0	; () banked
  7470  0005F2  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7471  0005F4  0E7F               	movlw	high (STR_44+1)
  7472  0005F6  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7473  0005F8  ECD8  F026         	call	_UARTTransmitText	;wreg free
  7474  0005FC  0012               	return	
  7475  0005FE                     __end_of_ethernet_rxGetNewFrame:
  7476                           	opt stack 0
  7477                           tblptru	equ	0xFF8
  7478                           tblptrh	equ	0xFF7
  7479                           tblptrl	equ	0xFF6
  7480                           tablat	equ	0xFF5
  7481                           prodh	equ	0xFF4
  7482                           prodl	equ	0xFF3
  7483                           intcon	equ	0xFF2
  7484                           intcon3	equ	0xFF0
  7485                           indf0	equ	0xFEF
  7486                           postinc0	equ	0xFEE
  7487                           plusw0	equ	0xFEB
  7488                           fsr0h	equ	0xFEA
  7489                           fsr0l	equ	0xFE9
  7490                           wreg	equ	0xFE8
  7491                           indf1	equ	0xFE7
  7492                           postinc1	equ	0xFE6
  7493                           postdec1	equ	0xFE5
  7494                           plusw1	equ	0xFE3
  7495                           fsr1h	equ	0xFE2
  7496                           fsr1l	equ	0xFE1
  7497                           indf2	equ	0xFDF
  7498                           postinc2	equ	0xFDE
  7499                           postdec2	equ	0xFDD
  7500                           plusw2	equ	0xFDB
  7501                           fsr2h	equ	0xFDA
  7502                           fsr2l	equ	0xFD9
  7503                           status	equ	0xFD8
  7504                           
  7505 ;; *************** function _ipv4_handleNewPacket *****************
  7506 ;; Defined at:
  7507 ;;		line 211 in file "src/stack/protocols/ipv4.c"
  7508 ;; Parameters:    Size  Location     Type
  7509 ;;  frame           2   85[BANK0 ] PTR struct ethernetFrame
  7510 ;;		 -> stack(123), 
  7511 ;; Auto vars:     Size  Location     Type
  7512 ;;  ip             23   98[BANK0 ] struct ipv4_header
  7513 ;;  headerField     9   89[BANK0 ] struct memoryField
  7514 ;; Return value:  Size  Location     Type
  7515 ;;                  1    wreg      void 
  7516 ;; Registers used:
  7517 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7518 ;; Tracked objects:
  7519 ;;		On entry : 0/0
  7520 ;;		On exit  : 0/0
  7521 ;;		Unchanged: 0/0
  7522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7523 ;;      Params:         0       2       0       0       0       0       0       0       0
  7524 ;;      Locals:         0      32       0       0       0       0       0       0       0
  7525 ;;      Temps:          0       2       0       0       0       0       0       0       0
  7526 ;;      Totals:         0      36       0       0       0       0       0       0       0
  7527 ;;Total ram usage:       36 bytes
  7528 ;; Hardware stack levels used:    1
  7529 ;; Hardware stack levels required when called:    9
  7530 ;; This function calls:
  7531 ;;		_UARTTransmitText
  7532 ;;		_ethernetController_dropPacket
  7533 ;;		_intToString
  7534 ;;		_ipAdressToString
  7535 ;;		_ipProtocolToString
  7536 ;;		_ipv4_checkHeaderChecksum
  7537 ;;		_ipv4_parseHeader
  7538 ;; This function is called by:
  7539 ;;		_ethernet_rxGetNewFrame
  7540 ;; This function uses a non-reentrant model
  7541 ;;
  7542                           
  7543                           	psect	text16
  7544  002B6A                     __ptext16:
  7545                           	opt stack 0
  7546  002B6A                     _ipv4_handleNewPacket:
  7547                           	opt stack 19
  7548                           
  7549                           ;ipv4.c: 212: ipv4_header_t ip;
  7550                           ;ipv4.c: 213: memoryField_t headerField;
  7551                           ;ipv4.c: 214: if (frame->ethertype != ETHERTYPE_IPv4) {
  7552                           
  7553                           ;incstack = 0
  7554  002B6A  0100               	movlb	0	; () banked
  7555  002B6C  EE20 F00E          	lfsr	2,14
  7556  002B70  51B5               	movf	ipv4_handleNewPacket@frame& (0+255),w,b
  7557  002B72  26D9               	addwf	fsr2l,f,c
  7558  002B74  51B6               	movf	(ipv4_handleNewPacket@frame+1)& (0+255),w,b
  7559  002B76  22DA               	addwfc	fsr2h,f,c
  7560  002B78  50DE               	movf	postinc2,w,c
  7561  002B7A  E104               	bnz	u11400
  7562  002B7C  0E08               	movlw	8
  7563  002B7E  18DE               	xorwf	postinc2,w,c
  7564  002B80  B4D8               	btfsc	status,2,c
  7565  002B82  D007               	goto	l1163
  7566  002B84                     u11400:
  7567                           
  7568                           ; BSR set to: 0
  7569                           ;ipv4.c: 215: ethernetController_dropPacket(frame);
  7570  002B84  C0B5  F072         	movff	ipv4_handleNewPacket@frame,?_ethernetController_dropPacket
  7571  002B88  C0B6  F073         	movff	ipv4_handleNewPacket@frame+1,?_ethernetController_dropPacket+1
  7572  002B8C  EC9E  F028         	call	_ethernetController_dropPacket	;wreg free
  7573                           
  7574                           ;ipv4.c: 216: return;
  7575  002B90  0012               	return	
  7576  002B92                     l1163:
  7577                           
  7578                           ;ipv4.c: 217: }
  7579                           ;ipv4.c: 218: headerField = frame->memory;
  7580  002B92  0100               	movlb	0	; () banked
  7581  002B94  EE20 F010          	lfsr	2,16
  7582  002B98  51B5               	movf	ipv4_handleNewPacket@frame& (0+255),w,b
  7583  002B9A  26D9               	addwf	fsr2l,f,c
  7584  002B9C  51B6               	movf	(ipv4_handleNewPacket@frame+1)& (0+255),w,b
  7585  002B9E  22DA               	addwfc	fsr2h,f,c
  7586  002BA0  EE10  F0B9         	lfsr	1,ipv4_handleNewPacket@headerField
  7587  002BA4  0E08               	movlw	8
  7588  002BA6                     u11411:
  7589  002BA6  CFDB FFE3          	movff	plusw2,plusw1
  7590  002BAA  06E8               	decf	wreg,f,c
  7591  002BAC  E2FC               	bc	u11411
  7592                           
  7593                           ; BSR set to: 0
  7594                           ;ipv4.c: 219: headerField.start = frame->memory.start + 22;
  7595  002BAE  EE20 F010          	lfsr	2,16
  7596  002BB2  51B5               	movf	ipv4_handleNewPacket@frame& (0+255),w,b
  7597  002BB4  26D9               	addwf	fsr2l,f,c
  7598  002BB6  51B6               	movf	(ipv4_handleNewPacket@frame+1)& (0+255),w,b
  7599  002BB8  22DA               	addwfc	fsr2h,f,c
  7600  002BBA  CFDE F0B7          	movff	postinc2,??_ipv4_handleNewPacket
  7601  002BBE  CFDD F0B8          	movff	postdec2,??_ipv4_handleNewPacket+1
  7602  002BC2  0E16               	movlw	22
  7603  002BC4  25B7               	addwf	??_ipv4_handleNewPacket& (0+255),w,b
  7604  002BC6  6FB9               	movwf	ipv4_handleNewPacket@headerField& (0+255),b
  7605  002BC8  0E00               	movlw	0
  7606  002BCA  21B8               	addwfc	(??_ipv4_handleNewPacket+1)& (0+255),w,b
  7607  002BCC  6FBA               	movwf	(ipv4_handleNewPacket@headerField+1)& (0+255),b
  7608                           
  7609                           ; BSR set to: 0
  7610                           ;ipv4.c: 221: ip = ipv4_parseHeader(&headerField);
  7611  002BCE  0EB9               	movlw	low ipv4_handleNewPacket@headerField
  7612  002BD0  6F74               	movwf	ipv4_parseHeader@field& (0+255),b
  7613  002BD2  0E00               	movlw	high ipv4_handleNewPacket@headerField
  7614  002BD4  6F75               	movwf	(ipv4_parseHeader@field+1)& (0+255),b
  7615  002BD6  EC8B  F010         	call	_ipv4_parseHeader	;wreg free
  7616  002BDA  EE20  F0C2         	lfsr	2,ipv4_handleNewPacket@ip
  7617  002BDE  0E16               	movlw	22
  7618  002BE0                     u11421:
  7619  002BE0  CFEB FFDB          	movff	plusw0,plusw2
  7620  002BE4  06E8               	decf	wreg,f,c
  7621  002BE6  E2FC               	bc	u11421
  7622                           
  7623                           ;ipv4.c: 223: UARTTransmitText("[");
  7624  002BE8  0EC3               	movlw	low (STR_73+3)
  7625  002BEA  0100               	movlb	0	; () banked
  7626  002BEC  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7627  002BEE  0E7F               	movlw	high (STR_73+3)
  7628  002BF0  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7629  002BF2  ECD8  F026         	call	_UARTTransmitText	;wreg free
  7630                           
  7631                           ;ipv4.c: 224: UARTTransmitText(ipAdressToString(ip.source));
  7632  002BF6  C0D1  F073         	movff	ipv4_handleNewPacket@ip+15,ipAdressToString@ip
  7633  002BFA  C0D2  F074         	movff	ipv4_handleNewPacket@ip+16,ipAdressToString@ip+1
  7634  002BFE  C0D3  F075         	movff	ipv4_handleNewPacket@ip+17,ipAdressToString@ip+2
  7635  002C02  C0D4  F076         	movff	ipv4_handleNewPacket@ip+18,ipAdressToString@ip+3
  7636  002C06  ECE7  F013         	call	_ipAdressToString	;wreg free
  7637  002C0A  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  7638  002C0E  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  7639  002C12  ECD8  F026         	call	_UARTTransmitText	;wreg free
  7640                           
  7641                           ;ipv4.c: 225: UARTTransmitText(" -> ");
  7642  002C16  0ED4               	movlw	low STR_43
  7643  002C18  0100               	movlb	0	; () banked
  7644  002C1A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7645  002C1C  0E7F               	movlw	high STR_43
  7646  002C1E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7647  002C20  ECD8  F026         	call	_UARTTransmitText	;wreg free
  7648                           
  7649                           ;ipv4.c: 226: UARTTransmitText(ipAdressToString(ip.destination));
  7650  002C24  C0D5  F073         	movff	ipv4_handleNewPacket@ip+19,ipAdressToString@ip
  7651  002C28  C0D6  F074         	movff	ipv4_handleNewPacket@ip+20,ipAdressToString@ip+1
  7652  002C2C  C0D7  F075         	movff	ipv4_handleNewPacket@ip+21,ipAdressToString@ip+2
  7653  002C30  C0D8  F076         	movff	ipv4_handleNewPacket@ip+22,ipAdressToString@ip+3
  7654  002C34  ECE7  F013         	call	_ipAdressToString	;wreg free
  7655  002C38  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  7656  002C3C  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  7657  002C40  ECD8  F026         	call	_UARTTransmitText	;wreg free
  7658                           
  7659                           ;ipv4.c: 227: UARTTransmitText("][");
  7660  002C44  0EF7               	movlw	low STR_13
  7661  002C46  0100               	movlb	0	; () banked
  7662  002C48  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7663  002C4A  0E7F               	movlw	high STR_13
  7664  002C4C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7665  002C4E  ECD8  F026         	call	_UARTTransmitText	;wreg free
  7666                           
  7667                           ;ipv4.c: 228: UARTTransmitText((ipProtocolToString(ip.protocol)));
  7668  002C52  0100               	movlb	0	; () banked
  7669  002C54  51CE               	movf	(ipv4_handleNewPacket@ip+12)& (0+255),w,b
  7670  002C56  ECF4  F027         	call	_ipProtocolToString
  7671  002C5A  C060  F098         	movff	?_ipProtocolToString,UARTTransmitText@str
  7672  002C5E  C061  F099         	movff	?_ipProtocolToString+1,UARTTransmitText@str+1
  7673  002C62  ECD8  F026         	call	_UARTTransmitText	;wreg free
  7674                           
  7675                           ;ipv4.c: 229: UARTTransmitText("][");
  7676  002C66  0EF7               	movlw	low STR_13
  7677  002C68  0100               	movlb	0	; () banked
  7678  002C6A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7679  002C6C  0E7F               	movlw	high STR_13
  7680  002C6E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7681  002C70  ECD8  F026         	call	_UARTTransmitText	;wreg free
  7682                           
  7683                           ;ipv4.c: 230: UARTTransmitText(intToString(ip.totalLength));
  7684  002C74  C0C6  F084         	movff	ipv4_handleNewPacket@ip+4,intToString@val
  7685  002C78  C0C7  F085         	movff	ipv4_handleNewPacket@ip+5,intToString@val+1
  7686  002C7C  0100               	movlb	0	; () banked
  7687  002C7E  6B86               	clrf	(intToString@val+2)& (0+255),b
  7688  002C80  6B87               	clrf	(intToString@val+3)& (0+255),b
  7689  002C82  EC66  F029         	call	_intToString	;wreg free
  7690  002C86  C084  F098         	movff	?_intToString,UARTTransmitText@str
  7691  002C8A  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  7692  002C8E  ECD8  F026         	call	_UARTTransmitText	;wreg free
  7693                           
  7694                           ;ipv4.c: 231: UARTTransmitText("][");
  7695  002C92  0EF7               	movlw	low STR_13
  7696  002C94  0100               	movlb	0	; () banked
  7697  002C96  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7698  002C98  0E7F               	movlw	high STR_13
  7699  002C9A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7700  002C9C  ECD8  F026         	call	_UARTTransmitText	;wreg free
  7701                           
  7702                           ;ipv4.c: 232: UARTTransmitText(intToString(ip.version));
  7703  002CA0  0100               	movlb	0	; () banked
  7704  002CA2  51C2               	movf	ipv4_handleNewPacket@ip& (0+255),w,b
  7705  002CA4  6F84               	movwf	intToString@val& (0+255),b
  7706  002CA6  6B85               	clrf	(intToString@val+1)& (0+255),b
  7707  002CA8  6B86               	clrf	(intToString@val+2)& (0+255),b
  7708  002CAA  6B87               	clrf	(intToString@val+3)& (0+255),b
  7709  002CAC  EC66  F029         	call	_intToString	;wreg free
  7710  002CB0  C084  F098         	movff	?_intToString,UARTTransmitText@str
  7711  002CB4  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  7712  002CB8  ECD8  F026         	call	_UARTTransmitText	;wreg free
  7713                           
  7714                           ;ipv4.c: 233: UARTTransmitText(", ");
  7715  002CBC  0E33               	movlw	low (STR_48+17)
  7716  002CBE  0100               	movlb	0	; () banked
  7717  002CC0  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7718  002CC2  0E7E               	movlw	high (STR_48+17)
  7719  002CC4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7720  002CC6  ECD8  F026         	call	_UARTTransmitText	;wreg free
  7721                           
  7722                           ;ipv4.c: 234: UARTTransmitText(intToString(ip.headerLength));
  7723  002CCA  0100               	movlb	0	; () banked
  7724  002CCC  51C3               	movf	(ipv4_handleNewPacket@ip+1)& (0+255),w,b
  7725  002CCE  6F84               	movwf	intToString@val& (0+255),b
  7726  002CD0  6B85               	clrf	(intToString@val+1)& (0+255),b
  7727  002CD2  6B86               	clrf	(intToString@val+2)& (0+255),b
  7728  002CD4  6B87               	clrf	(intToString@val+3)& (0+255),b
  7729  002CD6  EC66  F029         	call	_intToString	;wreg free
  7730  002CDA  C084  F098         	movff	?_intToString,UARTTransmitText@str
  7731  002CDE  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  7732  002CE2  ECD8  F026         	call	_UARTTransmitText	;wreg free
  7733                           
  7734                           ;ipv4.c: 235: UARTTransmitText("]");
  7735  002CE6  0EFB               	movlw	low (STR_19+1)
  7736  002CE8  0100               	movlb	0	; () banked
  7737  002CEA  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7738  002CEC  0E7F               	movlw	high (STR_19+1)
  7739  002CEE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7740  002CF0  ECD8  F026         	call	_UARTTransmitText	;wreg free
  7741                           
  7742                           ;ipv4.c: 236: if (!ipv4_checkHeaderChecksum(&ip))
  7743  002CF4  0EC2               	movlw	low ipv4_handleNewPacket@ip
  7744  002CF6  0100               	movlb	0	; () banked
  7745  002CF8  6F9A               	movwf	ipv4_checkHeaderChecksum@header& (0+255),b
  7746  002CFA  0E00               	movlw	high ipv4_handleNewPacket@ip
  7747  002CFC  6F9B               	movwf	(ipv4_checkHeaderChecksum@header+1)& (0+255),b
  7748  002CFE  EC93  F01F         	call	_ipv4_checkHeaderChecksum	;wreg free
  7749  002D02  0100               	movlb	0	; () banked
  7750  002D04  B0D8               	btfsc	status,0,c
  7751  002D06  0012               	return	
  7752                           
  7753                           ; BSR set to: 0
  7754                           ;ipv4.c: 237: UARTTransmitText("[INVALID CHECKSUM]");
  7755  002D08  0E4A               	movlw	low STR_112
  7756  002D0A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7757  002D0C  0E7E               	movlw	high STR_112
  7758  002D0E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7759  002D10  ECD8  F026         	call	_UARTTransmitText	;wreg free
  7760  002D14  0012               	return	
  7761  002D16                     __end_of_ipv4_handleNewPacket:
  7762                           	opt stack 0
  7763                           tblptru	equ	0xFF8
  7764                           tblptrh	equ	0xFF7
  7765                           tblptrl	equ	0xFF6
  7766                           tablat	equ	0xFF5
  7767                           prodh	equ	0xFF4
  7768                           prodl	equ	0xFF3
  7769                           intcon	equ	0xFF2
  7770                           intcon3	equ	0xFF0
  7771                           indf0	equ	0xFEF
  7772                           postinc0	equ	0xFEE
  7773                           plusw0	equ	0xFEB
  7774                           fsr0h	equ	0xFEA
  7775                           fsr0l	equ	0xFE9
  7776                           wreg	equ	0xFE8
  7777                           indf1	equ	0xFE7
  7778                           postinc1	equ	0xFE6
  7779                           postdec1	equ	0xFE5
  7780                           plusw1	equ	0xFE3
  7781                           fsr1h	equ	0xFE2
  7782                           fsr1l	equ	0xFE1
  7783                           indf2	equ	0xFDF
  7784                           postinc2	equ	0xFDE
  7785                           postdec2	equ	0xFDD
  7786                           plusw2	equ	0xFDB
  7787                           fsr2h	equ	0xFDA
  7788                           fsr2l	equ	0xFD9
  7789                           status	equ	0xFD8
  7790                           
  7791 ;; *************** function _ipv4_parseHeader *****************
  7792 ;; Defined at:
  7793 ;;		line 147 in file "src/stack/protocols/ipv4.c"
  7794 ;; Parameters:    Size  Location     Type
  7795 ;;  field           2   20[BANK0 ] PTR struct memoryField
  7796 ;;		 -> ipv4_handleNewPacket@headerField(9), 
  7797 ;; Auto vars:     Size  Location     Type
  7798 ;;  i               1   45[BANK0 ] unsigned char 
  7799 ;;  i               1   44[BANK0 ] unsigned char 
  7800 ;;  ip             23   47[BANK0 ] struct ipv4_header
  7801 ;;  temp            1   46[BANK0 ] unsigned char 
  7802 ;; Return value:  Size  Location     Type
  7803 ;;                  23   20[BANK0 ] struct ipv4_header
  7804 ;; Registers used:
  7805 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7806 ;; Tracked objects:
  7807 ;;		On entry : 0/0
  7808 ;;		On exit  : 0/0
  7809 ;;		Unchanged: 0/0
  7810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7811 ;;      Params:         0      23       0       0       0       0       0       0       0
  7812 ;;      Locals:         0      26       0       0       0       0       0       0       0
  7813 ;;      Temps:          0       1       0       0       0       0       0       0       0
  7814 ;;      Totals:         0      50       0       0       0       0       0       0       0
  7815 ;;Total ram usage:       50 bytes
  7816 ;; Hardware stack levels used:    1
  7817 ;; Hardware stack levels required when called:    8
  7818 ;; This function calls:
  7819 ;;		_ethernetController_streamFromRXBuffer
  7820 ;; This function is called by:
  7821 ;;		_ipv4_handleNewPacket
  7822 ;; This function uses a non-reentrant model
  7823 ;;
  7824                           
  7825                           	psect	text17
  7826  002116                     __ptext17:
  7827                           	opt stack 0
  7828  002116                     _ipv4_parseHeader:
  7829                           	opt stack 19
  7830                           
  7831                           ;ipv4.c: 148: ipv4_header_t ip;
  7832                           ;ipv4.c: 149: uint8_t temp;
  7833                           ;ipv4.c: 151: ethernetController_streamFromRXBuffer(0, field->start);
  7834                           
  7835                           ;incstack = 0
  7836  002116  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  7837  00211A  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  7838  00211E  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  7839  002122  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  7840  002126  0E00               	movlw	0
  7841  002128  EC52  F026         	call	_ethernetController_streamFromRXBuffer
  7842                           
  7843                           ;ipv4.c: 153: temp = ethernetController_streamFromRXBuffer(1, field->start);
  7844  00212C  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  7845  002130  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  7846  002134  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  7847  002138  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  7848  00213C  0E01               	movlw	1
  7849  00213E  EC52  F026         	call	_ethernetController_streamFromRXBuffer
  7850  002142  0100               	movlb	0	; () banked
  7851  002144  6F8E               	movwf	ipv4_parseHeader@temp& (0+255),b
  7852                           
  7853                           ; BSR set to: 0
  7854                           ;ipv4.c: 154: ip.version = (temp & 0xf0) >> 4;
  7855  002146  398E               	swapf	ipv4_parseHeader@temp& (0+255),w,b
  7856  002148  0B0F               	andlw	15
  7857  00214A  0B0F               	andlw	15
  7858  00214C  6F8F               	movwf	ipv4_parseHeader@ip& (0+255),b
  7859                           
  7860                           ; BSR set to: 0
  7861                           ;ipv4.c: 155: ip.headerLength = temp & 0x0f;
  7862  00214E  518E               	movf	ipv4_parseHeader@temp& (0+255),w,b
  7863  002150  0B0F               	andlw	15
  7864  002152  6F90               	movwf	(ipv4_parseHeader@ip+1)& (0+255),b
  7865                           
  7866                           ;ipv4.c: 157: temp = ethernetController_streamFromRXBuffer(1, field->start);
  7867  002154  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  7868  002158  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  7869  00215C  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  7870  002160  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  7871  002164  0E01               	movlw	1
  7872  002166  EC52  F026         	call	_ethernetController_streamFromRXBuffer
  7873  00216A  0100               	movlb	0	; () banked
  7874  00216C  6F8E               	movwf	ipv4_parseHeader@temp& (0+255),b
  7875                           
  7876                           ; BSR set to: 0
  7877                           ;ipv4.c: 158: ip.dscp = (temp & 0x1f);
  7878  00216E  518E               	movf	ipv4_parseHeader@temp& (0+255),w,b
  7879  002170  0B1F               	andlw	31
  7880  002172  6F91               	movwf	(ipv4_parseHeader@ip+2)& (0+255),b
  7881                           
  7882                           ; BSR set to: 0
  7883                           ;ipv4.c: 159: ip.ecn = (temp & 0xC0) >> 6;
  7884  002174  458E               	rlncf	ipv4_parseHeader@temp& (0+255),w,b
  7885  002176  46E8               	rlncf	wreg,f,c
  7886  002178  0B03               	andlw	3
  7887  00217A  0B03               	andlw	3
  7888  00217C  6F92               	movwf	(ipv4_parseHeader@ip+3)& (0+255),b
  7889                           
  7890                           ;ipv4.c: 161: ip.totalLength = (ethernetController_streamFromRXBuffer(1, field->start) <
      +                          < 8);
  7891  00217E  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  7892  002182  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  7893  002186  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  7894  00218A  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  7895  00218E  0E01               	movlw	1
  7896  002190  EC52  F026         	call	_ethernetController_streamFromRXBuffer
  7897  002194  0100               	movlb	0	; () banked
  7898  002196  6F94               	movwf	(ipv4_parseHeader@ip+5)& (0+255),b
  7899  002198  6B93               	clrf	(ipv4_parseHeader@ip+4)& (0+255),b
  7900                           
  7901                           ;ipv4.c: 162: ip.totalLength |= ethernetController_streamFromRXBuffer(1, field->start);
  7902  00219A  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  7903  00219E  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  7904  0021A2  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  7905  0021A6  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  7906  0021AA  0E01               	movlw	1
  7907  0021AC  EC52  F026         	call	_ethernetController_streamFromRXBuffer
  7908  0021B0  0100               	movlb	0	; () banked
  7909  0021B2  6F8B               	movwf	??_ipv4_parseHeader& (0+255),b
  7910  0021B4  518B               	movf	??_ipv4_parseHeader& (0+255),w,b
  7911  0021B6  1393               	iorwf	(ipv4_parseHeader@ip+4)& (0+255),f,b
  7912                           
  7913                           ;ipv4.c: 164: ip.identification = (ethernetController_streamFromRXBuffer(1, field->start
      +                          ) << 8);
  7914  0021B8  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  7915  0021BC  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  7916  0021C0  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  7917  0021C4  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  7918  0021C8  0E01               	movlw	1
  7919  0021CA  EC52  F026         	call	_ethernetController_streamFromRXBuffer
  7920  0021CE  0100               	movlb	0	; () banked
  7921  0021D0  6F96               	movwf	(ipv4_parseHeader@ip+7)& (0+255),b
  7922  0021D2  6B95               	clrf	(ipv4_parseHeader@ip+6)& (0+255),b
  7923                           
  7924                           ;ipv4.c: 165: ip.identification |= ethernetController_streamFromRXBuffer(1, field->start
      +                          );
  7925  0021D4  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  7926  0021D8  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  7927  0021DC  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  7928  0021E0  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  7929  0021E4  0E01               	movlw	1
  7930  0021E6  EC52  F026         	call	_ethernetController_streamFromRXBuffer
  7931  0021EA  0100               	movlb	0	; () banked
  7932  0021EC  6F8B               	movwf	??_ipv4_parseHeader& (0+255),b
  7933  0021EE  518B               	movf	??_ipv4_parseHeader& (0+255),w,b
  7934  0021F0  1395               	iorwf	(ipv4_parseHeader@ip+6)& (0+255),f,b
  7935                           
  7936                           ;ipv4.c: 167: temp = ethernetController_streamFromRXBuffer(1, field->start);
  7937  0021F2  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  7938  0021F6  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  7939  0021FA  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  7940  0021FE  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  7941  002202  0E01               	movlw	1
  7942  002204  EC52  F026         	call	_ethernetController_streamFromRXBuffer
  7943  002208  0100               	movlb	0	; () banked
  7944  00220A  6F8E               	movwf	ipv4_parseHeader@temp& (0+255),b
  7945                           
  7946                           ; BSR set to: 0
  7947                           ;ipv4.c: 168: ip.flags = ((temp & 0xC0) >> 6);
  7948  00220C  458E               	rlncf	ipv4_parseHeader@temp& (0+255),w,b
  7949  00220E  46E8               	rlncf	wreg,f,c
  7950  002210  0B03               	andlw	3
  7951  002212  0B03               	andlw	3
  7952  002214  6F97               	movwf	(ipv4_parseHeader@ip+8)& (0+255),b
  7953                           
  7954                           ; BSR set to: 0
  7955                           ;ipv4.c: 169: ip.fragmentOffset = ((temp & 0x1f) << 8);
  7956  002216  518E               	movf	ipv4_parseHeader@temp& (0+255),w,b
  7957  002218  0B1F               	andlw	31
  7958  00221A  6F99               	movwf	(ipv4_parseHeader@ip+10)& (0+255),b
  7959  00221C  6B98               	clrf	(ipv4_parseHeader@ip+9)& (0+255),b
  7960                           
  7961                           ;ipv4.c: 171: ip.fragmentOffset |= ethernetController_streamFromRXBuffer(1, field->start
      +                          );
  7962  00221E  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  7963  002222  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  7964  002226  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  7965  00222A  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  7966  00222E  0E01               	movlw	1
  7967  002230  EC52  F026         	call	_ethernetController_streamFromRXBuffer
  7968  002234  0100               	movlb	0	; () banked
  7969  002236  6F8B               	movwf	??_ipv4_parseHeader& (0+255),b
  7970  002238  518B               	movf	??_ipv4_parseHeader& (0+255),w,b
  7971  00223A  1398               	iorwf	(ipv4_parseHeader@ip+9)& (0+255),f,b
  7972                           
  7973                           ;ipv4.c: 173: ip.timeToLive = ethernetController_streamFromRXBuffer(1, field->start);
  7974  00223C  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  7975  002240  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  7976  002244  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  7977  002248  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  7978  00224C  0E01               	movlw	1
  7979  00224E  EC52  F026         	call	_ethernetController_streamFromRXBuffer
  7980  002252  0100               	movlb	0	; () banked
  7981  002254  6F9A               	movwf	(ipv4_parseHeader@ip+11)& (0+255),b
  7982                           
  7983                           ;ipv4.c: 175: ip.protocol = ethernetController_streamFromRXBuffer(1, field->start);
  7984  002256  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  7985  00225A  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  7986  00225E  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  7987  002262  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  7988  002266  0E01               	movlw	1
  7989  002268  EC52  F026         	call	_ethernetController_streamFromRXBuffer
  7990  00226C  0100               	movlb	0	; () banked
  7991  00226E  6F9B               	movwf	(ipv4_parseHeader@ip+12)& (0+255),b
  7992                           
  7993                           ;ipv4.c: 177: ip.checksum = (ethernetController_streamFromRXBuffer(1, field->start) << 8
      +                          );
  7994  002270  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  7995  002274  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  7996  002278  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  7997  00227C  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  7998  002280  0E01               	movlw	1
  7999  002282  EC52  F026         	call	_ethernetController_streamFromRXBuffer
  8000  002286  0100               	movlb	0	; () banked
  8001  002288  6F9D               	movwf	(ipv4_parseHeader@ip+14)& (0+255),b
  8002  00228A  6B9C               	clrf	(ipv4_parseHeader@ip+13)& (0+255),b
  8003                           
  8004                           ;ipv4.c: 178: ip.checksum |= ethernetController_streamFromRXBuffer(1, field->start);
  8005  00228C  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  8006  002290  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  8007  002294  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  8008  002298  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  8009  00229C  0E01               	movlw	1
  8010  00229E  EC52  F026         	call	_ethernetController_streamFromRXBuffer
  8011  0022A2  0100               	movlb	0	; () banked
  8012  0022A4  6F8B               	movwf	??_ipv4_parseHeader& (0+255),b
  8013  0022A6  518B               	movf	??_ipv4_parseHeader& (0+255),w,b
  8014  0022A8  139C               	iorwf	(ipv4_parseHeader@ip+13)& (0+255),f,b
  8015                           
  8016                           ; BSR set to: 0
  8017                           ;ipv4.c: 180: for (uint8_t i = 0; i < 4; i++)
  8018  0022AA  0E00               	movlw	0
  8019  0022AC  6F8C               	movwf	ipv4_parseHeader@i& (0+255),b
  8020  0022AE                     l9547:
  8021                           
  8022                           ; BSR set to: 0
  8023  0022AE  0E03               	movlw	3
  8024  0022B0  658C               	cpfsgt	ipv4_parseHeader@i& (0+255),b
  8025  0022B2  D001               	goto	l1152
  8026  0022B4  D01D               	goto	u11160
  8027  0022B6                     l1152:
  8028                           
  8029                           ; BSR set to: 0
  8030                           ;ipv4.c: 181: ip.source.address[i] = ethernetController_streamFromRXBuffer(1, field->sta
      +                          rt);
  8031                           
  8032                           ; BSR set to: 0
  8033  0022B6  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  8034  0022BA  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  8035  0022BE  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  8036  0022C2  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  8037  0022C6  0E01               	movlw	1
  8038  0022C8  EC52  F026         	call	_ethernetController_streamFromRXBuffer
  8039  0022CC  0100               	movlb	0	; () banked
  8040  0022CE  6F8B               	movwf	??_ipv4_parseHeader& (0+255),b
  8041  0022D0  518C               	movf	ipv4_parseHeader@i& (0+255),w,b
  8042  0022D2  0D01               	mullw	1
  8043  0022D4  0E0F               	movlw	15
  8044  0022D6  26F3               	addwf	prodl,f,c
  8045  0022D8  0E00               	movlw	0
  8046  0022DA  22F4               	addwfc	prodh,f,c
  8047  0022DC  0E8F               	movlw	low ipv4_parseHeader@ip
  8048  0022DE  24F3               	addwf	prodl,w,c
  8049  0022E0  6ED9               	movwf	fsr2l,c
  8050  0022E2  0E00               	movlw	high ipv4_parseHeader@ip
  8051  0022E4  20F4               	addwfc	prodh,w,c
  8052  0022E6  6EDA               	movwf	fsr2h,c
  8053  0022E8  C08B  FFDF         	movff	??_ipv4_parseHeader,indf2
  8054                           
  8055                           ; BSR set to: 0
  8056  0022EC  2B8C               	incf	ipv4_parseHeader@i& (0+255),f,b
  8057  0022EE  D7DF               	goto	l9547
  8058  0022F0                     u11160:
  8059                           
  8060                           ; BSR set to: 0
  8061                           ;ipv4.c: 183: for (uint8_t i = 0; i < 4; i++)
  8062                           
  8063                           ; BSR set to: 0
  8064  0022F0  0E00               	movlw	0
  8065  0022F2  6F8D               	movwf	ipv4_parseHeader@i_3666& (0+255),b
  8066  0022F4                     l9559:
  8067                           
  8068                           ; BSR set to: 0
  8069  0022F4  0E03               	movlw	3
  8070  0022F6  658D               	cpfsgt	ipv4_parseHeader@i_3666& (0+255),b
  8071  0022F8  D001               	goto	l1154
  8072  0022FA  D01D               	goto	u11180
  8073  0022FC                     l1154:
  8074                           
  8075                           ; BSR set to: 0
  8076                           ;ipv4.c: 184: ip.destination.address[i] = ethernetController_streamFromRXBuffer(1, field
      +                          ->start);
  8077                           
  8078                           ; BSR set to: 0
  8079  0022FC  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  8080  002300  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  8081  002304  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  8082  002308  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  8083  00230C  0E01               	movlw	1
  8084  00230E  EC52  F026         	call	_ethernetController_streamFromRXBuffer
  8085  002312  0100               	movlb	0	; () banked
  8086  002314  6F8B               	movwf	??_ipv4_parseHeader& (0+255),b
  8087  002316  518D               	movf	ipv4_parseHeader@i_3666& (0+255),w,b
  8088  002318  0D01               	mullw	1
  8089  00231A  0E13               	movlw	19
  8090  00231C  26F3               	addwf	prodl,f,c
  8091  00231E  0E00               	movlw	0
  8092  002320  22F4               	addwfc	prodh,f,c
  8093  002322  0E8F               	movlw	low ipv4_parseHeader@ip
  8094  002324  24F3               	addwf	prodl,w,c
  8095  002326  6ED9               	movwf	fsr2l,c
  8096  002328  0E00               	movlw	high ipv4_parseHeader@ip
  8097  00232A  20F4               	addwfc	prodh,w,c
  8098  00232C  6EDA               	movwf	fsr2h,c
  8099  00232E  C08B  FFDF         	movff	??_ipv4_parseHeader,indf2
  8100                           
  8101                           ; BSR set to: 0
  8102  002332  2B8D               	incf	ipv4_parseHeader@i_3666& (0+255),f,b
  8103  002334  D7DF               	goto	l9559
  8104  002336                     u11180:
  8105                           
  8106                           ; BSR set to: 0
  8107                           ;ipv4.c: 186: ethernetController_streamFromRXBuffer(2, field->start);
  8108                           
  8109                           ; BSR set to: 0
  8110  002336  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  8111  00233A  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  8112  00233E  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  8113  002342  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  8114  002346  0E02               	movlw	2
  8115  002348  EC52  F026         	call	_ethernetController_streamFromRXBuffer
  8116                           
  8117                           ;ipv4.c: 188: return ip;
  8118  00234C  EE20  F08F         	lfsr	2,ipv4_parseHeader@ip
  8119  002350  EE00  F074         	lfsr	0,?_ipv4_parseHeader
  8120  002354  0E16               	movlw	22
  8121  002356                     u11191:
  8122  002356  CFDB FFEB          	movff	plusw2,plusw0
  8123  00235A  06E8               	decf	wreg,f,c
  8124  00235C  E2FC               	bc	u11191
  8125  00235E  0012               	return	
  8126  002360                     __end_of_ipv4_parseHeader:
  8127                           	opt stack 0
  8128                           tblptru	equ	0xFF8
  8129                           tblptrh	equ	0xFF7
  8130                           tblptrl	equ	0xFF6
  8131                           tablat	equ	0xFF5
  8132                           prodh	equ	0xFF4
  8133                           prodl	equ	0xFF3
  8134                           intcon	equ	0xFF2
  8135                           intcon3	equ	0xFF0
  8136                           indf0	equ	0xFEF
  8137                           postinc0	equ	0xFEE
  8138                           plusw0	equ	0xFEB
  8139                           fsr0h	equ	0xFEA
  8140                           fsr0l	equ	0xFE9
  8141                           wreg	equ	0xFE8
  8142                           indf1	equ	0xFE7
  8143                           postinc1	equ	0xFE6
  8144                           postdec1	equ	0xFE5
  8145                           plusw1	equ	0xFE3
  8146                           fsr1h	equ	0xFE2
  8147                           fsr1l	equ	0xFE1
  8148                           indf2	equ	0xFDF
  8149                           postinc2	equ	0xFDE
  8150                           postdec2	equ	0xFDD
  8151                           plusw2	equ	0xFDB
  8152                           fsr2h	equ	0xFDA
  8153                           fsr2l	equ	0xFD9
  8154                           status	equ	0xFD8
  8155                           
  8156 ;; *************** function _ipv4_checkHeaderChecksum *****************
  8157 ;; Defined at:
  8158 ;;		line 191 in file "src/stack/protocols/ipv4.c"
  8159 ;; Parameters:    Size  Location     Type
  8160 ;;  header          2   58[BANK0 ] PTR struct ipv4_header
  8161 ;;		 -> ipv4_handleNewPacket@ip(23), 
  8162 ;; Auto vars:     Size  Location     Type
  8163 ;;  testHeader     23   62[BANK0 ] struct ipv4_header
  8164 ;; Return value:  Size  Location     Type
  8165 ;;		None               void
  8166 ;; Registers used:
  8167 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8168 ;; Tracked objects:
  8169 ;;		On entry : 0/0
  8170 ;;		On exit  : 0/0
  8171 ;;		Unchanged: 0/0
  8172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8173 ;;      Params:         0       2       0       0       0       0       0       0       0
  8174 ;;      Locals:         0      23       0       0       0       0       0       0       0
  8175 ;;      Temps:          0       2       0       0       0       0       0       0       0
  8176 ;;      Totals:         0      27       0       0       0       0       0       0       0
  8177 ;;Total ram usage:       27 bytes
  8178 ;; Hardware stack levels used:    1
  8179 ;; Hardware stack levels required when called:    6
  8180 ;; This function calls:
  8181 ;;		_UARTTransmitText
  8182 ;;		_hexToString
  8183 ;;		_ipv4_calculateHeaderChecksum
  8184 ;; This function is called by:
  8185 ;;		_ipv4_handleNewPacket
  8186 ;; This function uses a non-reentrant model
  8187 ;;
  8188                           
  8189                           	psect	text18
  8190  003F26                     __ptext18:
  8191                           	opt stack 0
  8192  003F26                     _ipv4_checkHeaderChecksum:
  8193                           	opt stack 21
  8194                           
  8195                           ;ipv4.c: 192: ipv4_header_t testHeader;
  8196                           ;ipv4.c: 193: testHeader = *header;
  8197                           
  8198                           ;incstack = 0
  8199  003F26  C09A  FFD9         	movff	ipv4_checkHeaderChecksum@header,fsr2l
  8200  003F2A  C09B  FFDA         	movff	ipv4_checkHeaderChecksum@header+1,fsr2h
  8201  003F2E  EE10  F09E         	lfsr	1,ipv4_checkHeaderChecksum@testHeader
  8202  003F32  0E16               	movlw	22
  8203  003F34                     u11201:
  8204  003F34  CFDB FFE3          	movff	plusw2,plusw1
  8205  003F38  06E8               	decf	wreg,f,c
  8206  003F3A  E2FC               	bc	u11201
  8207                           
  8208                           ;ipv4.c: 194: testHeader.checksum = 0x0000;
  8209  003F3C  0E00               	movlw	0
  8210  003F3E  0100               	movlb	0	; () banked
  8211  003F40  6FAC               	movwf	(ipv4_checkHeaderChecksum@testHeader+14)& (0+255),b
  8212  003F42  0E00               	movlw	0
  8213  003F44  6FAB               	movwf	(ipv4_checkHeaderChecksum@testHeader+13)& (0+255),b
  8214                           
  8215                           ; BSR set to: 0
  8216                           ;ipv4.c: 195: ipv4_calculateHeaderChecksum(&testHeader);
  8217  003F46  0E9E               	movlw	low ipv4_checkHeaderChecksum@testHeader
  8218  003F48  6F60               	movwf	ipv4_calculateHeaderChecksum@header& (0+255),b
  8219  003F4A  0E00               	movlw	high ipv4_checkHeaderChecksum@testHeader
  8220  003F4C  6F61               	movwf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),b
  8221  003F4E  EC21  F00B         	call	_ipv4_calculateHeaderChecksum	;wreg free
  8222                           
  8223                           ;ipv4.c: 196: if (testHeader.checksum == header->checksum) {
  8224  003F52  0100               	movlb	0	; () banked
  8225  003F54  EE20 F00D          	lfsr	2,13
  8226  003F58  519A               	movf	ipv4_checkHeaderChecksum@header& (0+255),w,b
  8227  003F5A  26D9               	addwf	fsr2l,f,c
  8228  003F5C  519B               	movf	(ipv4_checkHeaderChecksum@header+1)& (0+255),w,b
  8229  003F5E  22DA               	addwfc	fsr2h,f,c
  8230  003F60  50DE               	movf	postinc2,w,c
  8231  003F62  19AB               	xorwf	(ipv4_checkHeaderChecksum@testHeader+13)& (0+255),w,b
  8232  003F64  E106               	bnz	l9587
  8233  003F66  50DE               	movf	postinc2,w,c
  8234  003F68  19AC               	xorwf	(ipv4_checkHeaderChecksum@testHeader+14)& (0+255),w,b
  8235  003F6A  A4D8               	btfss	status,2,c
  8236  003F6C  D002               	goto	l1159
  8237                           
  8238                           ; BSR set to: 0
  8239                           ;ipv4.c: 197: return 1;
  8240  003F6E  80D8               	bsf	status,0,c
  8241                           
  8242                           ; BSR set to: 0
  8243  003F70  0012               	return	
  8244  003F72                     l1159:
  8245  003F72                     l9587:
  8246                           
  8247                           ; BSR set to: 0
  8248                           ;ipv4.c: 198: }
  8249                           ;ipv4.c: 200: UARTTransmitText("[Expected ");
  8250  003F72  0E62               	movlw	low STR_102
  8251  003F74  6F98               	movwf	UARTTransmitText@str& (0+255),b
  8252  003F76  0E7F               	movlw	high STR_102
  8253  003F78  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  8254  003F7A  ECD8  F026         	call	_UARTTransmitText	;wreg free
  8255                           
  8256                           ;ipv4.c: 201: UARTTransmitText(hexToString(testHeader.checksum));
  8257  003F7E  C0AB  F061         	movff	ipv4_checkHeaderChecksum@testHeader+13,hexToString@val
  8258  003F82  C0AC  F062         	movff	ipv4_checkHeaderChecksum@testHeader+14,hexToString@val+1
  8259  003F86  0100               	movlb	0	; () banked
  8260  003F88  6B63               	clrf	(hexToString@val+2)& (0+255),b
  8261  003F8A  6B64               	clrf	(hexToString@val+3)& (0+255),b
  8262  003F8C  ECA8  F01E         	call	_hexToString	;wreg free
  8263  003F90  C061  F098         	movff	?_hexToString,UARTTransmitText@str
  8264  003F94  C062  F099         	movff	?_hexToString+1,UARTTransmitText@str+1
  8265  003F98  ECD8  F026         	call	_UARTTransmitText	;wreg free
  8266                           
  8267                           ;ipv4.c: 202: UARTTransmitText(", got ");
  8268  003F9C  0EAC               	movlw	low STR_103
  8269  003F9E  0100               	movlb	0	; () banked
  8270  003FA0  6F98               	movwf	UARTTransmitText@str& (0+255),b
  8271  003FA2  0E7F               	movlw	high STR_103
  8272  003FA4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  8273  003FA6  ECD8  F026         	call	_UARTTransmitText	;wreg free
  8274                           
  8275                           ;ipv4.c: 203: UARTTransmitText(hexToString(header->checksum));
  8276  003FAA  0100               	movlb	0	; () banked
  8277  003FAC  EE20 F00D          	lfsr	2,13
  8278  003FB0  519A               	movf	ipv4_checkHeaderChecksum@header& (0+255),w,b
  8279  003FB2  26D9               	addwf	fsr2l,f,c
  8280  003FB4  519B               	movf	(ipv4_checkHeaderChecksum@header+1)& (0+255),w,b
  8281  003FB6  22DA               	addwfc	fsr2h,f,c
  8282  003FB8  CFDE F09C          	movff	postinc2,??_ipv4_checkHeaderChecksum
  8283  003FBC  CFDD F09D          	movff	postdec2,??_ipv4_checkHeaderChecksum+1
  8284  003FC0  C09C  F061         	movff	??_ipv4_checkHeaderChecksum,hexToString@val
  8285  003FC4  C09D  F062         	movff	??_ipv4_checkHeaderChecksum+1,hexToString@val+1
  8286  003FC8  6B63               	clrf	(hexToString@val+2)& (0+255),b
  8287  003FCA  6B64               	clrf	(hexToString@val+3)& (0+255),b
  8288  003FCC  ECA8  F01E         	call	_hexToString	;wreg free
  8289  003FD0  C061  F098         	movff	?_hexToString,UARTTransmitText@str
  8290  003FD4  C062  F099         	movff	?_hexToString+1,UARTTransmitText@str+1
  8291  003FD8  ECD8  F026         	call	_UARTTransmitText	;wreg free
  8292                           
  8293                           ;ipv4.c: 204: UARTTransmitText("]");
  8294  003FDC  0EFB               	movlw	low (STR_19+1)
  8295  003FDE  0100               	movlb	0	; () banked
  8296  003FE0  6F98               	movwf	UARTTransmitText@str& (0+255),b
  8297  003FE2  0E7F               	movlw	high (STR_19+1)
  8298  003FE4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  8299  003FE6  ECD8  F026         	call	_UARTTransmitText	;wreg free
  8300                           
  8301                           ;ipv4.c: 206: return 0;
  8302  003FEA  90D8               	bcf	status,0,c
  8303  003FEC  0012               	return	
  8304  003FEE                     __end_of_ipv4_checkHeaderChecksum:
  8305                           	opt stack 0
  8306                           tblptru	equ	0xFF8
  8307                           tblptrh	equ	0xFF7
  8308                           tblptrl	equ	0xFF6
  8309                           tablat	equ	0xFF5
  8310                           prodh	equ	0xFF4
  8311                           prodl	equ	0xFF3
  8312                           intcon	equ	0xFF2
  8313                           intcon3	equ	0xFF0
  8314                           indf0	equ	0xFEF
  8315                           postinc0	equ	0xFEE
  8316                           plusw0	equ	0xFEB
  8317                           fsr0h	equ	0xFEA
  8318                           fsr0l	equ	0xFE9
  8319                           wreg	equ	0xFE8
  8320                           indf1	equ	0xFE7
  8321                           postinc1	equ	0xFE6
  8322                           postdec1	equ	0xFE5
  8323                           plusw1	equ	0xFE3
  8324                           fsr1h	equ	0xFE2
  8325                           fsr1l	equ	0xFE1
  8326                           indf2	equ	0xFDF
  8327                           postinc2	equ	0xFDE
  8328                           postdec2	equ	0xFDD
  8329                           plusw2	equ	0xFDB
  8330                           fsr2h	equ	0xFDA
  8331                           fsr2l	equ	0xFD9
  8332                           status	equ	0xFD8
  8333                           
  8334 ;; *************** function _ipv4_calculateHeaderChecksum *****************
  8335 ;; Defined at:
  8336 ;;		line 127 in file "src/stack/protocols/ipv4.c"
  8337 ;; Parameters:    Size  Location     Type
  8338 ;;  header          2    0[BANK0 ] PTR struct ipv4_header
  8339 ;;		 -> ipv4_checkHeaderChecksum@testHeader(23), stack.pendingPacketToSend(66), stack(123), 
  8340 ;; Auto vars:     Size  Location     Type
  8341 ;;  sum             4   14[BANK0 ] unsigned long 
  8342 ;; Return value:  Size  Location     Type
  8343 ;;                  1    wreg      void 
  8344 ;; Registers used:
  8345 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8346 ;; Tracked objects:
  8347 ;;		On entry : 0/0
  8348 ;;		On exit  : 0/0
  8349 ;;		Unchanged: 0/0
  8350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8351 ;;      Params:         0       2       0       0       0       0       0       0       0
  8352 ;;      Locals:         0       4       0       0       0       0       0       0       0
  8353 ;;      Temps:          0      12       0       0       0       0       0       0       0
  8354 ;;      Totals:         0      18       0       0       0       0       0       0       0
  8355 ;;Total ram usage:       18 bytes
  8356 ;; Hardware stack levels used:    1
  8357 ;; Hardware stack levels required when called:    4
  8358 ;; This function calls:
  8359 ;;		Nothing
  8360 ;; This function is called by:
  8361 ;;		_main
  8362 ;;		_ipv4_checkHeaderChecksum
  8363 ;; This function uses a non-reentrant model
  8364 ;;
  8365                           
  8366                           	psect	text19
  8367  001642                     __ptext19:
  8368                           	opt stack 0
  8369  001642                     _ipv4_calculateHeaderChecksum:
  8370                           	opt stack 26
  8371                           
  8372                           ;ipv4.c: 129: uint32_t sum = 0;
  8373                           
  8374                           ;incstack = 0
  8375  001642  0E00               	movlw	0
  8376  001644  0100               	movlb	0	; () banked
  8377  001646  6F6E               	movwf	ipv4_calculateHeaderChecksum@sum& (0+255),b
  8378  001648  0E00               	movlw	0
  8379  00164A  6F6F               	movwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),b
  8380  00164C  0E00               	movlw	0
  8381  00164E  6F70               	movwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),b
  8382  001650  0E00               	movlw	0
  8383  001652  6F71               	movwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),b
  8384                           
  8385                           ; BSR set to: 0
  8386                           ;ipv4.c: 130: sum = ((header->version << 12) | (header->headerLength << 8) | (header->ds
      +                          cp << 2) | (header->ecn))&0xffff;
  8387  001654  EE20 F002          	lfsr	2,2
  8388  001658  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  8389  00165A  26D9               	addwf	fsr2l,f,c
  8390  00165C  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  8391  00165E  22DA               	addwfc	fsr2h,f,c
  8392  001660  50DF               	movf	indf2,w,c
  8393  001662  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  8394  001664  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  8395  001666  90D8               	bcf	status,0,c
  8396  001668  3762               	rlcf	??_ipv4_calculateHeaderChecksum& (0+255),f,b
  8397  00166A  3763               	rlcf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  8398  00166C  90D8               	bcf	status,0,c
  8399  00166E  3762               	rlcf	??_ipv4_calculateHeaderChecksum& (0+255),f,b
  8400  001670  3763               	rlcf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  8401  001672  EE20 F001          	lfsr	2,1
  8402  001676  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  8403  001678  26D9               	addwf	fsr2l,f,c
  8404  00167A  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  8405  00167C  22DA               	addwfc	fsr2h,f,c
  8406  00167E  50DF               	movf	indf2,w,c
  8407  001680  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  8408  001682  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  8409  001684  6F66               	movwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  8410  001686  6B65               	clrf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  8411  001688  C060  FFD9         	movff	ipv4_calculateHeaderChecksum@header,fsr2l
  8412  00168C  C061  FFDA         	movff	ipv4_calculateHeaderChecksum@header+1,fsr2h
  8413  001690  50DF               	movf	indf2,w,c
  8414  001692  6F67               	movwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),b
  8415  001694  6B68               	clrf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),b
  8416  001696  0E0C               	movlw	12
  8417  001698                     u9995:
  8418  001698  90D8               	bcf	status,0,c
  8419  00169A  3767               	rlcf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),f,b
  8420  00169C  3768               	rlcf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),f,b
  8421  00169E  2EE8               	decfsz	wreg,f,c
  8422  0016A0  D7FB               	goto	u9995
  8423  0016A2  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  8424  0016A4  1367               	iorwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),f,b
  8425  0016A6  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  8426  0016A8  1368               	iorwf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),f,b
  8427  0016AA  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  8428  0016AC  1367               	iorwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),f,b
  8429  0016AE  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  8430  0016B0  1368               	iorwf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),f,b
  8431  0016B2  EE20 F003          	lfsr	2,3
  8432  0016B6  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  8433  0016B8  26D9               	addwf	fsr2l,f,c
  8434  0016BA  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  8435  0016BC  22DA               	addwfc	fsr2h,f,c
  8436  0016BE  50DF               	movf	indf2,w,c
  8437  0016C0  6F69               	movwf	(??_ipv4_calculateHeaderChecksum+7)& (0+255),b
  8438  0016C2  5169               	movf	(??_ipv4_calculateHeaderChecksum+7)& (0+255),w,b
  8439  0016C4  1367               	iorwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),f,b
  8440  0016C6  0E00               	movlw	0
  8441  0016C8  1368               	iorwf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),f,b
  8442  0016CA  C067  F06E         	movff	??_ipv4_calculateHeaderChecksum+5,ipv4_calculateHeaderChecksum@sum
  8443  0016CE  C068  F06F         	movff	??_ipv4_calculateHeaderChecksum+6,ipv4_calculateHeaderChecksum@sum+1
  8444  0016D2  6B70               	clrf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),b
  8445  0016D4  6B71               	clrf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),b
  8446                           
  8447                           ; BSR set to: 0
  8448                           ;ipv4.c: 131: sum += header->totalLength;
  8449  0016D6  EE20 F004          	lfsr	2,4
  8450  0016DA  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  8451  0016DC  26D9               	addwf	fsr2l,f,c
  8452  0016DE  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  8453  0016E0  22DA               	addwfc	fsr2h,f,c
  8454  0016E2  CFDE F062          	movff	postinc2,??_ipv4_calculateHeaderChecksum
  8455  0016E6  CFDD F063          	movff	postdec2,??_ipv4_calculateHeaderChecksum+1
  8456  0016EA  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  8457  0016EC  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  8458  0016EE  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  8459  0016F0  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  8460  0016F2  0E00               	movlw	0
  8461  0016F4  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  8462  0016F6  0E00               	movlw	0
  8463  0016F8  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  8464                           
  8465                           ; BSR set to: 0
  8466                           ;ipv4.c: 132: sum += header->identification;
  8467  0016FA  EE20 F006          	lfsr	2,6
  8468  0016FE  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  8469  001700  26D9               	addwf	fsr2l,f,c
  8470  001702  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  8471  001704  22DA               	addwfc	fsr2h,f,c
  8472  001706  CFDE F062          	movff	postinc2,??_ipv4_calculateHeaderChecksum
  8473  00170A  CFDD F063          	movff	postdec2,??_ipv4_calculateHeaderChecksum+1
  8474  00170E  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  8475  001710  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  8476  001712  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  8477  001714  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  8478  001716  0E00               	movlw	0
  8479  001718  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  8480  00171A  0E00               	movlw	0
  8481  00171C  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  8482                           
  8483                           ; BSR set to: 0
  8484                           ;ipv4.c: 133: sum += ((header->flags << 13) | (header->fragmentOffset))&0xffff;
  8485  00171E  EE20 F009          	lfsr	2,9
  8486  001722  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  8487  001724  26D9               	addwf	fsr2l,f,c
  8488  001726  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  8489  001728  22DA               	addwfc	fsr2h,f,c
  8490  00172A  CFDE F062          	movff	postinc2,??_ipv4_calculateHeaderChecksum
  8491  00172E  CFDD F063          	movff	postdec2,??_ipv4_calculateHeaderChecksum+1
  8492  001732  EE20 F008          	lfsr	2,8
  8493  001736  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  8494  001738  26D9               	addwf	fsr2l,f,c
  8495  00173A  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  8496  00173C  22DA               	addwfc	fsr2h,f,c
  8497  00173E  50DF               	movf	indf2,w,c
  8498  001740  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  8499  001742  6B65               	clrf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  8500  001744  0E0D               	movlw	13
  8501  001746                     u10005:
  8502  001746  90D8               	bcf	status,0,c
  8503  001748  3764               	rlcf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  8504  00174A  3765               	rlcf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  8505  00174C  2EE8               	decfsz	wreg,f,c
  8506  00174E  D7FB               	goto	u10005
  8507  001750  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  8508  001752  1364               	iorwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  8509  001754  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  8510  001756  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  8511  001758  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  8512  00175A  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  8513  00175C  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  8514  00175E  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  8515  001760  0E00               	movlw	0
  8516  001762  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  8517  001764  0E00               	movlw	0
  8518  001766  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  8519                           
  8520                           ; BSR set to: 0
  8521                           ;ipv4.c: 134: sum += ((header->timeToLive << 8) | (header->protocol))&0xffff;
  8522  001768  EE20 F00B          	lfsr	2,11
  8523  00176C  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  8524  00176E  26D9               	addwf	fsr2l,f,c
  8525  001770  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  8526  001772  22DA               	addwfc	fsr2h,f,c
  8527  001774  50DF               	movf	indf2,w,c
  8528  001776  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  8529  001778  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  8530  00177A  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  8531  00177C  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  8532  00177E  EE20 F00C          	lfsr	2,12
  8533  001782  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  8534  001784  26D9               	addwf	fsr2l,f,c
  8535  001786  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  8536  001788  22DA               	addwfc	fsr2h,f,c
  8537  00178A  50DF               	movf	indf2,w,c
  8538  00178C  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  8539  00178E  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  8540  001790  1363               	iorwf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  8541  001792  0E00               	movlw	0
  8542  001794  1364               	iorwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  8543  001796  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  8544  001798  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  8545  00179A  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  8546  00179C  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  8547  00179E  0E00               	movlw	0
  8548  0017A0  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  8549  0017A2  0E00               	movlw	0
  8550  0017A4  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  8551                           
  8552                           ; BSR set to: 0
  8553                           ;ipv4.c: 136: sum += ((header->source.address[1] | (header->source.address[0] << 8)))&0x
      +                          ffff;
  8554  0017A6  EE20 F00F          	lfsr	2,15
  8555  0017AA  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  8556  0017AC  26D9               	addwf	fsr2l,f,c
  8557  0017AE  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  8558  0017B0  22DA               	addwfc	fsr2h,f,c
  8559  0017B2  50DF               	movf	indf2,w,c
  8560  0017B4  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  8561  0017B6  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  8562  0017B8  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  8563  0017BA  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  8564  0017BC  EE20 F010          	lfsr	2,16
  8565  0017C0  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  8566  0017C2  26D9               	addwf	fsr2l,f,c
  8567  0017C4  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  8568  0017C6  22DA               	addwfc	fsr2h,f,c
  8569  0017C8  50DF               	movf	indf2,w,c
  8570  0017CA  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  8571  0017CC  6B66               	clrf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  8572  0017CE  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  8573  0017D0  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  8574  0017D2  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  8575  0017D4  1366               	iorwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),f,b
  8576  0017D6  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  8577  0017D8  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  8578  0017DA  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  8579  0017DC  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  8580  0017DE  0E00               	movlw	0
  8581  0017E0  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  8582  0017E2  0E00               	movlw	0
  8583  0017E4  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  8584                           
  8585                           ; BSR set to: 0
  8586                           ;ipv4.c: 137: sum += ((header->source.address[3] | (header->source.address[2] << 8)))&0x
      +                          ffff;
  8587  0017E6  EE20 F011          	lfsr	2,17
  8588  0017EA  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  8589  0017EC  26D9               	addwf	fsr2l,f,c
  8590  0017EE  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  8591  0017F0  22DA               	addwfc	fsr2h,f,c
  8592  0017F2  50DF               	movf	indf2,w,c
  8593  0017F4  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  8594  0017F6  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  8595  0017F8  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  8596  0017FA  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  8597  0017FC  EE20 F012          	lfsr	2,18
  8598  001800  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  8599  001802  26D9               	addwf	fsr2l,f,c
  8600  001804  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  8601  001806  22DA               	addwfc	fsr2h,f,c
  8602  001808  50DF               	movf	indf2,w,c
  8603  00180A  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  8604  00180C  6B66               	clrf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  8605  00180E  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  8606  001810  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  8607  001812  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  8608  001814  1366               	iorwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),f,b
  8609  001816  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  8610  001818  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  8611  00181A  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  8612  00181C  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  8613  00181E  0E00               	movlw	0
  8614  001820  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  8615  001822  0E00               	movlw	0
  8616  001824  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  8617                           
  8618                           ; BSR set to: 0
  8619                           ;ipv4.c: 138: sum += ((header->destination.address[1] | (header->destination.address[0] 
      +                          << 8)))&0xffff;
  8620  001826  EE20 F013          	lfsr	2,19
  8621  00182A  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  8622  00182C  26D9               	addwf	fsr2l,f,c
  8623  00182E  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  8624  001830  22DA               	addwfc	fsr2h,f,c
  8625  001832  50DF               	movf	indf2,w,c
  8626  001834  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  8627  001836  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  8628  001838  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  8629  00183A  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  8630  00183C  EE20 F014          	lfsr	2,20
  8631  001840  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  8632  001842  26D9               	addwf	fsr2l,f,c
  8633  001844  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  8634  001846  22DA               	addwfc	fsr2h,f,c
  8635  001848  50DF               	movf	indf2,w,c
  8636  00184A  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  8637  00184C  6B66               	clrf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  8638  00184E  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  8639  001850  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  8640  001852  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  8641  001854  1366               	iorwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),f,b
  8642  001856  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  8643  001858  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  8644  00185A  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  8645  00185C  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  8646  00185E  0E00               	movlw	0
  8647  001860  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  8648  001862  0E00               	movlw	0
  8649  001864  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  8650                           
  8651                           ; BSR set to: 0
  8652                           ;ipv4.c: 139: sum += ((header->destination.address[3] | (header->destination.address[2] 
      +                          << 8)))&0xffff;
  8653  001866  EE20 F015          	lfsr	2,21
  8654  00186A  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  8655  00186C  26D9               	addwf	fsr2l,f,c
  8656  00186E  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  8657  001870  22DA               	addwfc	fsr2h,f,c
  8658  001872  50DF               	movf	indf2,w,c
  8659  001874  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  8660  001876  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  8661  001878  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  8662  00187A  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  8663  00187C  EE20 F016          	lfsr	2,22
  8664  001880  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  8665  001882  26D9               	addwf	fsr2l,f,c
  8666  001884  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  8667  001886  22DA               	addwfc	fsr2h,f,c
  8668  001888  50DF               	movf	indf2,w,c
  8669  00188A  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  8670  00188C  6B66               	clrf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  8671  00188E  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  8672  001890  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  8673  001892  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  8674  001894  1366               	iorwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),f,b
  8675  001896  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  8676  001898  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  8677  00189A  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  8678  00189C  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  8679  00189E  0E00               	movlw	0
  8680  0018A0  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  8681  0018A2  0E00               	movlw	0
  8682  0018A4  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  8683                           
  8684                           ; BSR set to: 0
  8685                           ;ipv4.c: 141: sum = (sum & 0x0ffff)+((sum & 0xf0000) >> 16);
  8686  0018A6  C06E  F062         	movff	ipv4_calculateHeaderChecksum@sum,??_ipv4_calculateHeaderChecksum
  8687  0018AA  C06F  F063         	movff	ipv4_calculateHeaderChecksum@sum+1,??_ipv4_calculateHeaderChecksum+1
  8688  0018AE  C070  F064         	movff	ipv4_calculateHeaderChecksum@sum+2,??_ipv4_calculateHeaderChecksum+2
  8689  0018B2  C071  F065         	movff	ipv4_calculateHeaderChecksum@sum+3,??_ipv4_calculateHeaderChecksum+3
  8690  0018B6  0E11               	movlw	17
  8691  0018B8  D005               	goto	u10010
  8692  0018BA                     u10015:
  8693  0018BA  90D8               	bcf	status,0,c
  8694  0018BC  3365               	rrcf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  8695  0018BE  3364               	rrcf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  8696  0018C0  3363               	rrcf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  8697  0018C2  3362               	rrcf	??_ipv4_calculateHeaderChecksum& (0+255),f,b
  8698  0018C4                     u10010:
  8699  0018C4  2EE8               	decfsz	wreg,f,c
  8700  0018C6  D7F9               	goto	u10015
  8701  0018C8  0E0F               	movlw	15
  8702  0018CA  1562               	andwf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  8703  0018CC  6F66               	movwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  8704  0018CE  0E00               	movlw	0
  8705  0018D0  1563               	andwf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  8706  0018D2  6F67               	movwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),b
  8707  0018D4  0E00               	movlw	0
  8708  0018D6  1564               	andwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  8709  0018D8  6F68               	movwf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),b
  8710  0018DA  0E00               	movlw	0
  8711  0018DC  1565               	andwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  8712  0018DE  6F69               	movwf	(??_ipv4_calculateHeaderChecksum+7)& (0+255),b
  8713  0018E0  0EFF               	movlw	255
  8714  0018E2  156E               	andwf	ipv4_calculateHeaderChecksum@sum& (0+255),w,b
  8715  0018E4  6F6A               	movwf	(??_ipv4_calculateHeaderChecksum+8)& (0+255),b
  8716  0018E6  0EFF               	movlw	255
  8717  0018E8  156F               	andwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),w,b
  8718  0018EA  6F6B               	movwf	(??_ipv4_calculateHeaderChecksum+9)& (0+255),b
  8719  0018EC  0E00               	movlw	0
  8720  0018EE  1570               	andwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),w,b
  8721  0018F0  6F6C               	movwf	(??_ipv4_calculateHeaderChecksum+10)& (0+255),b
  8722  0018F2  0E00               	movlw	0
  8723  0018F4  1571               	andwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),w,b
  8724  0018F6  6F6D               	movwf	(??_ipv4_calculateHeaderChecksum+11)& (0+255),b
  8725  0018F8  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  8726  0018FA  256A               	addwf	(??_ipv4_calculateHeaderChecksum+8)& (0+255),w,b
  8727  0018FC  6F6E               	movwf	ipv4_calculateHeaderChecksum@sum& (0+255),b
  8728  0018FE  5167               	movf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),w,b
  8729  001900  216B               	addwfc	(??_ipv4_calculateHeaderChecksum+9)& (0+255),w,b
  8730  001902  6F6F               	movwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),b
  8731  001904  5168               	movf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),w,b
  8732  001906  216C               	addwfc	(??_ipv4_calculateHeaderChecksum+10)& (0+255),w,b
  8733  001908  6F70               	movwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),b
  8734  00190A  5169               	movf	(??_ipv4_calculateHeaderChecksum+7)& (0+255),w,b
  8735  00190C  216D               	addwfc	(??_ipv4_calculateHeaderChecksum+11)& (0+255),w,b
  8736  00190E  6F71               	movwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),b
  8737                           
  8738                           ; BSR set to: 0
  8739                           ;ipv4.c: 142: sum = ~sum;
  8740  001910  C06E  F062         	movff	ipv4_calculateHeaderChecksum@sum,??_ipv4_calculateHeaderChecksum
  8741  001914  C06F  F063         	movff	ipv4_calculateHeaderChecksum@sum+1,??_ipv4_calculateHeaderChecksum+1
  8742  001918  C070  F064         	movff	ipv4_calculateHeaderChecksum@sum+2,??_ipv4_calculateHeaderChecksum+2
  8743  00191C  C071  F065         	movff	ipv4_calculateHeaderChecksum@sum+3,??_ipv4_calculateHeaderChecksum+3
  8744  001920  1F62               	comf	??_ipv4_calculateHeaderChecksum& (0+255),f,b
  8745  001922  1F63               	comf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  8746  001924  1F64               	comf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  8747  001926  1F65               	comf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  8748  001928  C062  F06E         	movff	??_ipv4_calculateHeaderChecksum,ipv4_calculateHeaderChecksum@sum
  8749  00192C  C063  F06F         	movff	??_ipv4_calculateHeaderChecksum+1,ipv4_calculateHeaderChecksum@sum+1
  8750  001930  C064  F070         	movff	??_ipv4_calculateHeaderChecksum+2,ipv4_calculateHeaderChecksum@sum+2
  8751  001934  C065  F071         	movff	??_ipv4_calculateHeaderChecksum+3,ipv4_calculateHeaderChecksum@sum+3
  8752                           
  8753                           ; BSR set to: 0
  8754                           ;ipv4.c: 144: header->checksum = sum;
  8755  001938  EE20 F00D          	lfsr	2,13
  8756  00193C  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  8757  00193E  26D9               	addwf	fsr2l,f,c
  8758  001940  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  8759  001942  22DA               	addwfc	fsr2h,f,c
  8760  001944  C06E  FFDE         	movff	ipv4_calculateHeaderChecksum@sum,postinc2
  8761  001948  C06F  FFDD         	movff	ipv4_calculateHeaderChecksum@sum+1,postdec2
  8762                           
  8763                           ; BSR set to: 0
  8764  00194C  0012               	return		;funcret
  8765  00194E                     __end_of_ipv4_calculateHeaderChecksum:
  8766                           	opt stack 0
  8767                           tblptru	equ	0xFF8
  8768                           tblptrh	equ	0xFF7
  8769                           tblptrl	equ	0xFF6
  8770                           tablat	equ	0xFF5
  8771                           prodh	equ	0xFF4
  8772                           prodl	equ	0xFF3
  8773                           intcon	equ	0xFF2
  8774                           intcon3	equ	0xFF0
  8775                           indf0	equ	0xFEF
  8776                           postinc0	equ	0xFEE
  8777                           plusw0	equ	0xFEB
  8778                           fsr0h	equ	0xFEA
  8779                           fsr0l	equ	0xFE9
  8780                           wreg	equ	0xFE8
  8781                           indf1	equ	0xFE7
  8782                           postinc1	equ	0xFE6
  8783                           postdec1	equ	0xFE5
  8784                           plusw1	equ	0xFE3
  8785                           fsr1h	equ	0xFE2
  8786                           fsr1l	equ	0xFE1
  8787                           indf2	equ	0xFDF
  8788                           postinc2	equ	0xFDE
  8789                           postdec2	equ	0xFDD
  8790                           plusw2	equ	0xFDB
  8791                           fsr2h	equ	0xFDA
  8792                           fsr2l	equ	0xFD9
  8793                           status	equ	0xFD8
  8794                           
  8795 ;; *************** function _hexToString *****************
  8796 ;; Defined at:
  8797 ;;		line 93 in file "src/system/uart.c"
  8798 ;; Parameters:    Size  Location     Type
  8799 ;;  val             4    1[BANK0 ] unsigned long 
  8800 ;; Auto vars:     Size  Location     Type
  8801 ;;  pointer         1    9[BANK0 ] unsigned char 
  8802 ;; Return value:  Size  Location     Type
  8803 ;;                  2    1[BANK0 ] PTR unsigned char 
  8804 ;; Registers used:
  8805 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8806 ;; Tracked objects:
  8807 ;;		On entry : 0/0
  8808 ;;		On exit  : 0/0
  8809 ;;		Unchanged: 0/0
  8810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8811 ;;      Params:         0       4       0       0       0       0       0       0       0
  8812 ;;      Locals:         0       1       0       0       0       0       0       0       0
  8813 ;;      Temps:          0       4       0       0       0       0       0       0       0
  8814 ;;      Totals:         0       9       0       0       0       0       0       0       0
  8815 ;;Total ram usage:        9 bytes
  8816 ;; Hardware stack levels used:    1
  8817 ;; Hardware stack levels required when called:    5
  8818 ;; This function calls:
  8819 ;;		_hexToChar
  8820 ;; This function is called by:
  8821 ;;		_ipv4_checkHeaderChecksum
  8822 ;; This function uses a non-reentrant model
  8823 ;;
  8824                           
  8825                           	psect	text20
  8826  003D50                     __ptext20:
  8827                           	opt stack 0
  8828  003D50                     _hexToString:
  8829                           	opt stack 21
  8830                           
  8831                           ;uart.c: 94: char static number [10];
  8832                           ;uart.c: 95: uint8_t pointer = 0;
  8833                           
  8834                           ; BSR set to: 0
  8835                           ;incstack = 0
  8836  003D50  0E00               	movlw	0
  8837  003D52  0100               	movlb	0	; () banked
  8838  003D54  6F69               	movwf	hexToString@pointer& (0+255),b
  8839                           
  8840                           ; BSR set to: 0
  8841                           ;uart.c: 96: if (val > 0xff) {
  8842  003D56  5164               	movf	(hexToString@val+3)& (0+255),w,b
  8843  003D58  1163               	iorwf	(hexToString@val+2)& (0+255),w,b
  8844  003D5A  E103               	bnz	u10030
  8845  003D5C  0562               	decf	(hexToString@val+1)& (0+255),w,b
  8846  003D5E  A0D8               	btfss	status,0,c
  8847  003D60  D02F               	goto	l814
  8848  003D62                     u10030:
  8849                           
  8850                           ; BSR set to: 0
  8851                           ;uart.c: 97: number[pointer++] = hexToChar((val >> 12) & 0xf);
  8852  003D62  5169               	movf	hexToString@pointer& (0+255),w,b
  8853  003D64  0D01               	mullw	1
  8854  003D66  0EDC               	movlw	low hexToString@number
  8855  003D68  24F3               	addwf	prodl,w,c
  8856  003D6A  6ED9               	movwf	fsr2l,c
  8857  003D6C  0E01               	movlw	high hexToString@number
  8858  003D6E  20F4               	addwfc	prodh,w,c
  8859  003D70  6EDA               	movwf	fsr2h,c
  8860  003D72  C061  F065         	movff	hexToString@val,??_hexToString
  8861  003D76  C062  F066         	movff	hexToString@val+1,??_hexToString+1
  8862  003D7A  C063  F067         	movff	hexToString@val+2,??_hexToString+2
  8863  003D7E  C064  F068         	movff	hexToString@val+3,??_hexToString+3
  8864  003D82  0E0D               	movlw	13
  8865  003D84  D005               	goto	u10040
  8866  003D86                     u10045:
  8867  003D86  90D8               	bcf	status,0,c
  8868  003D88  3368               	rrcf	(??_hexToString+3)& (0+255),f,b
  8869  003D8A  3367               	rrcf	(??_hexToString+2)& (0+255),f,b
  8870  003D8C  3366               	rrcf	(??_hexToString+1)& (0+255),f,b
  8871  003D8E  3365               	rrcf	??_hexToString& (0+255),f,b
  8872  003D90                     u10040:
  8873  003D90  2EE8               	decfsz	wreg,f,c
  8874  003D92  D7F9               	goto	u10045
  8875  003D94  5165               	movf	??_hexToString& (0+255),w,b
  8876  003D96  0B0F               	andlw	15
  8877  003D98  ECDE  F02A         	call	_hexToChar
  8878  003D9C  6EDF               	movwf	indf2,c
  8879  003D9E  0100               	movlb	0	; () banked
  8880  003DA0  2B69               	incf	hexToString@pointer& (0+255),f,b
  8881                           
  8882                           ; BSR set to: 0
  8883                           ;uart.c: 98: number[pointer++] = hexToChar((val >> 8) & 0xf);
  8884  003DA2  5169               	movf	hexToString@pointer& (0+255),w,b
  8885  003DA4  0D01               	mullw	1
  8886  003DA6  0EDC               	movlw	low hexToString@number
  8887  003DA8  24F3               	addwf	prodl,w,c
  8888  003DAA  6ED9               	movwf	fsr2l,c
  8889  003DAC  0E01               	movlw	high hexToString@number
  8890  003DAE  20F4               	addwfc	prodh,w,c
  8891  003DB0  6EDA               	movwf	fsr2h,c
  8892  003DB2  5162               	movf	(hexToString@val+1)& (0+255),w,b
  8893  003DB4  0B0F               	andlw	15
  8894  003DB6  ECDE  F02A         	call	_hexToChar
  8895  003DBA  6EDF               	movwf	indf2,c
  8896  003DBC  0100               	movlb	0	; () banked
  8897  003DBE  2B69               	incf	hexToString@pointer& (0+255),f,b
  8898  003DC0                     l814:
  8899                           
  8900                           ; BSR set to: 0
  8901                           ;uart.c: 99: }
  8902                           ;uart.c: 100: number[pointer++] = hexToChar((val >> 4) & 0xf);
  8903                           
  8904                           ; BSR set to: 0
  8905  003DC0  5169               	movf	hexToString@pointer& (0+255),w,b
  8906  003DC2  0D01               	mullw	1
  8907  003DC4  0EDC               	movlw	low hexToString@number
  8908  003DC6  24F3               	addwf	prodl,w,c
  8909  003DC8  6ED9               	movwf	fsr2l,c
  8910  003DCA  0E01               	movlw	high hexToString@number
  8911  003DCC  20F4               	addwfc	prodh,w,c
  8912  003DCE  6EDA               	movwf	fsr2h,c
  8913  003DD0  C061  F065         	movff	hexToString@val,??_hexToString
  8914  003DD4  C062  F066         	movff	hexToString@val+1,??_hexToString+1
  8915  003DD8  C063  F067         	movff	hexToString@val+2,??_hexToString+2
  8916  003DDC  C064  F068         	movff	hexToString@val+3,??_hexToString+3
  8917  003DE0  0E05               	movlw	5
  8918  003DE2  D005               	goto	u10050
  8919  003DE4                     u10055:
  8920  003DE4  90D8               	bcf	status,0,c
  8921  003DE6  3368               	rrcf	(??_hexToString+3)& (0+255),f,b
  8922  003DE8  3367               	rrcf	(??_hexToString+2)& (0+255),f,b
  8923  003DEA  3366               	rrcf	(??_hexToString+1)& (0+255),f,b
  8924  003DEC  3365               	rrcf	??_hexToString& (0+255),f,b
  8925  003DEE                     u10050:
  8926  003DEE  2EE8               	decfsz	wreg,f,c
  8927  003DF0  D7F9               	goto	u10055
  8928  003DF2  5165               	movf	??_hexToString& (0+255),w,b
  8929  003DF4  0B0F               	andlw	15
  8930  003DF6  ECDE  F02A         	call	_hexToChar
  8931  003DFA  6EDF               	movwf	indf2,c
  8932  003DFC  0100               	movlb	0	; () banked
  8933  003DFE  2B69               	incf	hexToString@pointer& (0+255),f,b
  8934                           
  8935                           ;uart.c: 101: number[pointer++] = hexToChar(val & 0xf);
  8936  003E00  5169               	movf	hexToString@pointer& (0+255),w,b
  8937  003E02  0D01               	mullw	1
  8938  003E04  0EDC               	movlw	low hexToString@number
  8939  003E06  24F3               	addwf	prodl,w,c
  8940  003E08  6ED9               	movwf	fsr2l,c
  8941  003E0A  0E01               	movlw	high hexToString@number
  8942  003E0C  20F4               	addwfc	prodh,w,c
  8943  003E0E  6EDA               	movwf	fsr2h,c
  8944  003E10  5161               	movf	hexToString@val& (0+255),w,b
  8945  003E12  0B0F               	andlw	15
  8946  003E14  ECDE  F02A         	call	_hexToChar
  8947  003E18  6EDF               	movwf	indf2,c
  8948  003E1A  0100               	movlb	0	; () banked
  8949  003E1C  2B69               	incf	hexToString@pointer& (0+255),f,b
  8950                           
  8951                           ; BSR set to: 0
  8952                           ;uart.c: 103: number[pointer++] = '\0';
  8953  003E1E  5169               	movf	hexToString@pointer& (0+255),w,b
  8954  003E20  0D01               	mullw	1
  8955  003E22  0EDC               	movlw	low hexToString@number
  8956  003E24  24F3               	addwf	prodl,w,c
  8957  003E26  6ED9               	movwf	fsr2l,c
  8958  003E28  0E01               	movlw	high hexToString@number
  8959  003E2A  20F4               	addwfc	prodh,w,c
  8960  003E2C  6EDA               	movwf	fsr2h,c
  8961  003E2E  0E00               	movlw	0
  8962  003E30  6EDF               	movwf	indf2,c
  8963                           
  8964                           ; BSR set to: 0
  8965  003E32  2B69               	incf	hexToString@pointer& (0+255),f,b
  8966                           
  8967                           ; BSR set to: 0
  8968                           ;uart.c: 104: return number;
  8969  003E34  0EDC               	movlw	low hexToString@number
  8970  003E36  6F61               	movwf	?_hexToString& (0+255),b
  8971  003E38  0E01               	movlw	high hexToString@number
  8972  003E3A  6F62               	movwf	(?_hexToString+1)& (0+255),b
  8973  003E3C  0012               	return	
  8974  003E3E                     __end_of_hexToString:
  8975                           	opt stack 0
  8976                           tblptru	equ	0xFF8
  8977                           tblptrh	equ	0xFF7
  8978                           tblptrl	equ	0xFF6
  8979                           tablat	equ	0xFF5
  8980                           prodh	equ	0xFF4
  8981                           prodl	equ	0xFF3
  8982                           intcon	equ	0xFF2
  8983                           intcon3	equ	0xFF0
  8984                           indf0	equ	0xFEF
  8985                           postinc0	equ	0xFEE
  8986                           plusw0	equ	0xFEB
  8987                           fsr0h	equ	0xFEA
  8988                           fsr0l	equ	0xFE9
  8989                           wreg	equ	0xFE8
  8990                           indf1	equ	0xFE7
  8991                           postinc1	equ	0xFE6
  8992                           postdec1	equ	0xFE5
  8993                           plusw1	equ	0xFE3
  8994                           fsr1h	equ	0xFE2
  8995                           fsr1l	equ	0xFE1
  8996                           indf2	equ	0xFDF
  8997                           postinc2	equ	0xFDE
  8998                           postdec2	equ	0xFDD
  8999                           plusw2	equ	0xFDB
  9000                           fsr2h	equ	0xFDA
  9001                           fsr2l	equ	0xFD9
  9002                           status	equ	0xFD8
  9003                           
  9004 ;; *************** function _hexToChar *****************
  9005 ;; Defined at:
  9006 ;;		line 84 in file "src/system/uart.c"
  9007 ;; Parameters:    Size  Location     Type
  9008 ;;  val             1    wreg     unsigned char 
  9009 ;; Auto vars:     Size  Location     Type
  9010 ;;  val             1    0[BANK0 ] unsigned char 
  9011 ;; Return value:  Size  Location     Type
  9012 ;;                  1    wreg      unsigned char 
  9013 ;; Registers used:
  9014 ;;		wreg, status,2, status,0
  9015 ;; Tracked objects:
  9016 ;;		On entry : 0/0
  9017 ;;		On exit  : 0/0
  9018 ;;		Unchanged: 0/0
  9019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9020 ;;      Params:         0       0       0       0       0       0       0       0       0
  9021 ;;      Locals:         0       1       0       0       0       0       0       0       0
  9022 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9023 ;;      Totals:         0       1       0       0       0       0       0       0       0
  9024 ;;Total ram usage:        1 bytes
  9025 ;; Hardware stack levels used:    1
  9026 ;; Hardware stack levels required when called:    4
  9027 ;; This function calls:
  9028 ;;		Nothing
  9029 ;; This function is called by:
  9030 ;;		_hexToString
  9031 ;; This function uses a non-reentrant model
  9032 ;;
  9033                           
  9034                           	psect	text21
  9035  0055BC                     __ptext21:
  9036                           	opt stack 0
  9037  0055BC                     _hexToChar:
  9038                           	opt stack 21
  9039                           
  9040                           ; BSR set to: 0
  9041                           ;incstack = 0
  9042                           ;hexToChar@val stored from wreg
  9043  0055BC  0100               	movlb	0	; () banked
  9044  0055BE  6F60               	movwf	hexToChar@val& (0+255),b
  9045                           
  9046                           ;uart.c: 85: if (val < 10) {
  9047  0055C0  0E0A               	movlw	10
  9048  0055C2  0100               	movlb	0	; () banked
  9049  0055C4  6160               	cpfslt	hexToChar@val& (0+255),b
  9050  0055C6  D003               	goto	l806
  9051                           
  9052                           ; BSR set to: 0
  9053                           ;uart.c: 86: return val + 0x30u;
  9054  0055C8  5160               	movf	hexToChar@val& (0+255),w,b
  9055  0055CA  0F30               	addlw	48
  9056                           
  9057                           ; BSR set to: 0
  9058  0055CC  0012               	return	
  9059  0055CE                     l806:
  9060                           
  9061                           ; BSR set to: 0
  9062                           
  9063                           ; BSR set to: 0
  9064  0055CE  0E10               	movlw	16
  9065  0055D0  6160               	cpfslt	hexToChar@val& (0+255),b
  9066  0055D2  D003               	goto	l809
  9067                           
  9068                           ; BSR set to: 0
  9069                           ;uart.c: 88: return val + 0x41u - 10;
  9070  0055D4  5160               	movf	hexToChar@val& (0+255),w,b
  9071  0055D6  0F37               	addlw	55
  9072                           
  9073                           ; BSR set to: 0
  9074  0055D8  0012               	return	
  9075  0055DA                     l809:
  9076                           
  9077                           ; BSR set to: 0
  9078                           ;uart.c: 89: }
  9079                           ;uart.c: 90: return 0;
  9080                           
  9081                           ; BSR set to: 0
  9082                           
  9083                           ; BSR set to: 0
  9084  0055DA  0E00               	movlw	0
  9085  0055DC  0012               	return	
  9086  0055DE                     __end_of_hexToChar:
  9087                           	opt stack 0
  9088                           tblptru	equ	0xFF8
  9089                           tblptrh	equ	0xFF7
  9090                           tblptrl	equ	0xFF6
  9091                           tablat	equ	0xFF5
  9092                           prodh	equ	0xFF4
  9093                           prodl	equ	0xFF3
  9094                           intcon	equ	0xFF2
  9095                           intcon3	equ	0xFF0
  9096                           indf0	equ	0xFEF
  9097                           postinc0	equ	0xFEE
  9098                           plusw0	equ	0xFEB
  9099                           fsr0h	equ	0xFEA
  9100                           fsr0l	equ	0xFE9
  9101                           wreg	equ	0xFE8
  9102                           indf1	equ	0xFE7
  9103                           postinc1	equ	0xFE6
  9104                           postdec1	equ	0xFE5
  9105                           plusw1	equ	0xFE3
  9106                           fsr1h	equ	0xFE2
  9107                           fsr1l	equ	0xFE1
  9108                           indf2	equ	0xFDF
  9109                           postinc2	equ	0xFDE
  9110                           postdec2	equ	0xFDD
  9111                           plusw2	equ	0xFDB
  9112                           fsr2h	equ	0xFDA
  9113                           fsr2l	equ	0xFD9
  9114                           status	equ	0xFD8
  9115                           
  9116 ;; *************** function _ipProtocolToString *****************
  9117 ;; Defined at:
  9118 ;;		line 149 in file "src/system/uart.c"
  9119 ;; Parameters:    Size  Location     Type
  9120 ;;  protocol        1    wreg     enum E5627
  9121 ;; Auto vars:     Size  Location     Type
  9122 ;;  protocol        1    2[BANK0 ] enum E5627
  9123 ;; Return value:  Size  Location     Type
  9124 ;;                  2    0[BANK0 ] PTR unsigned char 
  9125 ;; Registers used:
  9126 ;;		wreg, status,2, status,0
  9127 ;; Tracked objects:
  9128 ;;		On entry : 0/0
  9129 ;;		On exit  : 0/0
  9130 ;;		Unchanged: 0/0
  9131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9132 ;;      Params:         0       2       0       0       0       0       0       0       0
  9133 ;;      Locals:         0       1       0       0       0       0       0       0       0
  9134 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9135 ;;      Totals:         0       3       0       0       0       0       0       0       0
  9136 ;;Total ram usage:        3 bytes
  9137 ;; Hardware stack levels used:    1
  9138 ;; Hardware stack levels required when called:    4
  9139 ;; This function calls:
  9140 ;;		Nothing
  9141 ;; This function is called by:
  9142 ;;		_ipv4_handleNewPacket
  9143 ;; This function uses a non-reentrant model
  9144 ;;
  9145                           
  9146                           	psect	text22
  9147  004FE8                     __ptext22:
  9148                           	opt stack 0
  9149  004FE8                     _ipProtocolToString:
  9150                           	opt stack 23
  9151                           
  9152                           ; BSR set to: 0
  9153                           ;incstack = 0
  9154                           ;ipProtocolToString@protocol stored from wreg
  9155  004FE8  0100               	movlb	0	; () banked
  9156  004FEA  6F62               	movwf	ipProtocolToString@protocol& (0+255),b
  9157                           
  9158                           ;uart.c: 150: switch (protocol) {
  9159  004FEC  D015               	goto	l838
  9160  004FEE                     
  9161                           ;uart.c: 152: return "ICMP";
  9162  004FEE  0ECA               	movlw	low STR_66
  9163  004FF0  0100               	movlb	0	; () banked
  9164  004FF2  6F60               	movwf	?_ipProtocolToString& (0+255),b
  9165  004FF4  0E7F               	movlw	high STR_66
  9166  004FF6  6F61               	movwf	(?_ipProtocolToString+1)& (0+255),b
  9167                           
  9168                           ; BSR set to: 0
  9169  004FF8  0012               	return	
  9170  004FFA                     
  9171                           ; BSR set to: 0
  9172                           ;uart.c: 154: return "TCP";
  9173                           
  9174                           ; BSR set to: 0
  9175  004FFA  0EDE               	movlw	low STR_67
  9176  004FFC  6F60               	movwf	?_ipProtocolToString& (0+255),b
  9177  004FFE  0E7F               	movlw	high STR_67
  9178  005000  6F61               	movwf	(?_ipProtocolToString+1)& (0+255),b
  9179                           
  9180                           ; BSR set to: 0
  9181  005002  0012               	return	
  9182  005004                     
  9183                           ; BSR set to: 0
  9184                           ;uart.c: 156: return "UDP";
  9185                           
  9186                           ; BSR set to: 0
  9187  005004  0EE2               	movlw	low STR_68
  9188  005006  6F60               	movwf	?_ipProtocolToString& (0+255),b
  9189  005008  0E7F               	movlw	high STR_68
  9190  00500A  6F61               	movwf	(?_ipProtocolToString+1)& (0+255),b
  9191                           
  9192                           ; BSR set to: 0
  9193  00500C  0012               	return	
  9194  00500E                     
  9195                           ; BSR set to: 0
  9196                           ;uart.c: 158: return "Unknown Protocol";
  9197                           
  9198                           ; BSR set to: 0
  9199  00500E  0EA8               	movlw	low STR_69
  9200  005010  6F60               	movwf	?_ipProtocolToString& (0+255),b
  9201  005012  0E7E               	movlw	high STR_69
  9202  005014  6F61               	movwf	(?_ipProtocolToString+1)& (0+255),b
  9203                           
  9204                           ; BSR set to: 0
  9205                           ;uart.c: 159: }
  9206                           
  9207                           ; BSR set to: 0
  9208  005016  0012               	return	
  9209  005018                     l838:
  9210                           
  9211                           ; BSR set to: 0
  9212  005018  0100               	movlb	0	; () banked
  9213  00501A  5162               	movf	ipProtocolToString@protocol& (0+255),w,b
  9214                           
  9215                           ; Switch size 1, requested type "space"
  9216                           ; Number of cases is 3, Range of values is 1 to 17
  9217                           ; switch strategies available:
  9218                           ; Name         Instructions Cycles
  9219                           ; simple_byte           10     6 (average)
  9220                           ;	Chosen strategy is simple_byte
  9221  00501C  0A01               	xorlw	1	; case 1
  9222  00501E  B4D8               	btfsc	status,2,c
  9223  005020  D7E6               	goto	l839
  9224  005022  0A07               	xorlw	7	; case 6
  9225  005024  B4D8               	btfsc	status,2,c
  9226  005026  D7E9               	goto	l841
  9227  005028  0A17               	xorlw	23	; case 17
  9228  00502A  B4D8               	btfsc	status,2,c
  9229  00502C  D7EB               	goto	l842
  9230  00502E  D7EF               	goto	l843
  9231  005030                     __end_of_ipProtocolToString:
  9232                           	opt stack 0
  9233                           tblptru	equ	0xFF8
  9234                           tblptrh	equ	0xFF7
  9235                           tblptrl	equ	0xFF6
  9236                           tablat	equ	0xFF5
  9237                           prodh	equ	0xFF4
  9238                           prodl	equ	0xFF3
  9239                           intcon	equ	0xFF2
  9240                           intcon3	equ	0xFF0
  9241                           indf0	equ	0xFEF
  9242                           postinc0	equ	0xFEE
  9243                           plusw0	equ	0xFEB
  9244                           fsr0h	equ	0xFEA
  9245                           fsr0l	equ	0xFE9
  9246                           wreg	equ	0xFE8
  9247                           indf1	equ	0xFE7
  9248                           postinc1	equ	0xFE6
  9249                           postdec1	equ	0xFE5
  9250                           plusw1	equ	0xFE3
  9251                           fsr1h	equ	0xFE2
  9252                           fsr1l	equ	0xFE1
  9253                           indf2	equ	0xFDF
  9254                           postinc2	equ	0xFDE
  9255                           postdec2	equ	0xFDD
  9256                           plusw2	equ	0xFDB
  9257                           fsr2h	equ	0xFDA
  9258                           fsr2l	equ	0xFD9
  9259                           status	equ	0xFD8
  9260                           
  9261 ;; *************** function _ethernetController_updateNextPacketPointer *****************
  9262 ;; Defined at:
  9263 ;;		line 334 in file "src/enc424j600/ENC424J600.c"
  9264 ;; Parameters:    Size  Location     Type
  9265 ;;		None
  9266 ;; Auto vars:     Size  Location     Type
  9267 ;;  nextPktPoint    2   21[BANK0 ] unsigned int 
  9268 ;;  newPointerH     1   25[BANK0 ] unsigned char 
  9269 ;;  newPointerL     1   24[BANK0 ] unsigned char 
  9270 ;;  opcode          1   23[BANK0 ] unsigned char 
  9271 ;; Return value:  Size  Location     Type
  9272 ;;                  1    wreg      void 
  9273 ;; Registers used:
  9274 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9275 ;; Tracked objects:
  9276 ;;		On entry : 0/0
  9277 ;;		On exit  : 0/0
  9278 ;;		Unchanged: 0/0
  9279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9280 ;;      Params:         0       0       0       0       0       0       0       0       0
  9281 ;;      Locals:         0       5       0       0       0       0       0       0       0
  9282 ;;      Temps:          0       6       0       0       0       0       0       0       0
  9283 ;;      Totals:         0      11       0       0       0       0       0       0       0
  9284 ;;Total ram usage:       11 bytes
  9285 ;; Hardware stack levels used:    1
  9286 ;; Hardware stack levels required when called:    7
  9287 ;; This function calls:
  9288 ;;		_enc424j600_getNextPacketPointer
  9289 ;;		_enc424j600_readSPI
  9290 ;;		_enc424j600_setERXDATAReadPointer
  9291 ;;		_enc424j600_setNextPacketPointer
  9292 ;;		_enc424j600_writeSPI
  9293 ;; This function is called by:
  9294 ;;		_ethernet_rxGetNewFrame
  9295 ;; This function uses a non-reentrant model
  9296 ;;
  9297                           
  9298                           	psect	text23
  9299  004840                     __ptext23:
  9300                           	opt stack 0
  9301  004840                     _ethernetController_updateNextPacketPointer:
  9302                           	opt stack 21
  9303                           
  9304                           ;ENC424J600.c: 335: uint16_t nextPktPointer;
  9305                           ;ENC424J600.c: 336: uint8_t opcode;
  9306                           ;ENC424J600.c: 337: uint8_t newPointerL, newPointerH;
  9307                           ;ENC424J600.c: 338: nextPktPointer = enc424j600_getNextPacketPointer();
  9308                           
  9309                           ; BSR set to: 0
  9310                           ;incstack = 0
  9311  004840  EC95  F02B         	call	_enc424j600_getNextPacketPointer	;wreg free
  9312  004844  C060  F075         	movff	?_enc424j600_getNextPacketPointer,ethernetController_updateNextPacketPointer@next
      +                          PktPointer
  9313  004848  C061  F076         	movff	?_enc424j600_getNextPacketPointer+1,ethernetController_updateNextPacketPointer@ne
      +                          xtPktPointer+1
  9314                           
  9315                           ;ENC424J600.c: 339: enc424j600_setERXDATAReadPointer(nextPktPointer);
  9316  00484C  C075  F06A         	movff	ethernetController_updateNextPacketPointer@nextPktPointer,enc424j600_setERXDATARe
      +                          adPointer@addr
  9317  004850  C076  F06B         	movff	ethernetController_updateNextPacketPointer@nextPktPointer+1,enc424j600_setERXDATA
      +                          ReadPointer@addr+1
  9318  004854  ECDA  F028         	call	_enc424j600_setERXDATAReadPointer	;wreg free
  9319                           
  9320                           ;ENC424J600.c: 340: opcode = 0x2C;
  9321  004858  0E2C               	movlw	44
  9322  00485A  0100               	movlb	0	; () banked
  9323  00485C  6F77               	movwf	ethernetController_updateNextPacketPointer@opcode& (0+255),b
  9324                           
  9325                           ; BSR set to: 0
  9326                           ;ENC424J600.c: 341: PORTBbits.RB4=0;
  9327  00485E  9881               	bcf	3969,4,c	;volatile
  9328                           
  9329                           ; BSR set to: 0
  9330                           ;ENC424J600.c: 342: enc424j600_writeSPI(&opcode);
  9331  004860  0E77               	movlw	low ethernetController_updateNextPacketPointer@opcode
  9332  004862  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
  9333  004864  0E00               	movlw	high ethernetController_updateNextPacketPointer@opcode
  9334  004866  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
  9335  004868  EC20  F026         	call	_enc424j600_writeSPI	;wreg free
  9336                           
  9337                           ;ENC424J600.c: 343: enc424j600_readSPI(&newPointerL);
  9338  00486C  0E78               	movlw	low ethernetController_updateNextPacketPointer@newPointerL
  9339  00486E  0100               	movlb	0	; () banked
  9340  004870  6F60               	movwf	enc424j600_readSPI@data& (0+255),b
  9341  004872  0E00               	movlw	high ethernetController_updateNextPacketPointer@newPointerL
  9342  004874  6F61               	movwf	(enc424j600_readSPI@data+1)& (0+255),b
  9343  004876  ECB7  F025         	call	_enc424j600_readSPI	;wreg free
  9344                           
  9345                           ;ENC424J600.c: 344: enc424j600_readSPI(&newPointerH);
  9346  00487A  0E79               	movlw	low ethernetController_updateNextPacketPointer@newPointerH
  9347  00487C  0100               	movlb	0	; () banked
  9348  00487E  6F60               	movwf	enc424j600_readSPI@data& (0+255),b
  9349  004880  0E00               	movlw	high ethernetController_updateNextPacketPointer@newPointerH
  9350  004882  6F61               	movwf	(enc424j600_readSPI@data+1)& (0+255),b
  9351  004884  ECB7  F025         	call	_enc424j600_readSPI	;wreg free
  9352                           
  9353                           ;ENC424J600.c: 345: PORTBbits.RB4=1;
  9354  004888  8881               	bsf	3969,4,c	;volatile
  9355                           
  9356                           ;ENC424J600.c: 347: enc424j600_setNextPacketPointer((uint16_t) ((newPointerL & (unsigned
      +                          ) 0x00ff) | ((unsigned) (newPointerH << 8)&(unsigned) 0xff00)));
  9357  00488A  0E00               	movlw	0
  9358  00488C  0100               	movlb	0	; () banked
  9359  00488E  6F6F               	movwf	??_ethernetController_updateNextPacketPointer& (0+255),b
  9360  004890  0EFF               	movlw	255
  9361  004892  6F70               	movwf	(??_ethernetController_updateNextPacketPointer+1)& (0+255),b
  9362  004894  5179               	movf	ethernetController_updateNextPacketPointer@newPointerH& (0+255),w,b
  9363  004896  6F72               	movwf	(??_ethernetController_updateNextPacketPointer+3)& (0+255),b
  9364  004898  6B71               	clrf	(??_ethernetController_updateNextPacketPointer+2)& (0+255),b
  9365  00489A  516F               	movf	??_ethernetController_updateNextPacketPointer& (0+255),w,b
  9366  00489C  1771               	andwf	(??_ethernetController_updateNextPacketPointer+2)& (0+255),f,b
  9367  00489E  5170               	movf	(??_ethernetController_updateNextPacketPointer+1)& (0+255),w,b
  9368  0048A0  1772               	andwf	(??_ethernetController_updateNextPacketPointer+3)& (0+255),f,b
  9369  0048A2  5178               	movf	ethernetController_updateNextPacketPointer@newPointerL& (0+255),w,b
  9370  0048A4  6F73               	movwf	(??_ethernetController_updateNextPacketPointer+4)& (0+255),b
  9371  0048A6  6B74               	clrf	(??_ethernetController_updateNextPacketPointer+5)& (0+255),b
  9372  0048A8  5171               	movf	(??_ethernetController_updateNextPacketPointer+2)& (0+255),w,b
  9373  0048AA  1173               	iorwf	(??_ethernetController_updateNextPacketPointer+4)& (0+255),w,b
  9374  0048AC  6F60               	movwf	enc424j600_setNextPacketPointer@ptr& (0+255),b
  9375  0048AE  5172               	movf	(??_ethernetController_updateNextPacketPointer+3)& (0+255),w,b
  9376  0048B0  1174               	iorwf	(??_ethernetController_updateNextPacketPointer+5)& (0+255),w,b
  9377  0048B2  6F61               	movwf	(enc424j600_setNextPacketPointer@ptr+1)& (0+255),b
  9378  0048B4  EC9A  F02B         	call	_enc424j600_setNextPacketPointer	;wreg free
  9379  0048B8  0012               	return		;funcret
  9380  0048BA                     __end_of_ethernetController_updateNextPacketPointer:
  9381                           	opt stack 0
  9382                           tblptru	equ	0xFF8
  9383                           tblptrh	equ	0xFF7
  9384                           tblptrl	equ	0xFF6
  9385                           tablat	equ	0xFF5
  9386                           prodh	equ	0xFF4
  9387                           prodl	equ	0xFF3
  9388                           intcon	equ	0xFF2
  9389                           intcon3	equ	0xFF0
  9390                           indf0	equ	0xFEF
  9391                           postinc0	equ	0xFEE
  9392                           plusw0	equ	0xFEB
  9393                           fsr0h	equ	0xFEA
  9394                           fsr0l	equ	0xFE9
  9395                           wreg	equ	0xFE8
  9396                           indf1	equ	0xFE7
  9397                           postinc1	equ	0xFE6
  9398                           postdec1	equ	0xFE5
  9399                           plusw1	equ	0xFE3
  9400                           fsr1h	equ	0xFE2
  9401                           fsr1l	equ	0xFE1
  9402                           indf2	equ	0xFDF
  9403                           postinc2	equ	0xFDE
  9404                           postdec2	equ	0xFDD
  9405                           plusw2	equ	0xFDB
  9406                           fsr2h	equ	0xFDA
  9407                           fsr2l	equ	0xFD9
  9408                           status	equ	0xFD8
  9409                           
  9410 ;; *************** function _ethernetController_getRSV *****************
  9411 ;; Defined at:
  9412 ;;		line 299 in file "src/enc424j600/ENC424J600.c"
  9413 ;; Parameters:    Size  Location     Type
  9414 ;;  address         2   17[BANK0 ] unsigned int 
  9415 ;; Auto vars:     Size  Location     Type
  9416 ;;  i               1   23[BANK0 ] unsigned char 
  9417 ;;  opcode          1   22[BANK0 ] unsigned char 
  9418 ;; Return value:  Size  Location     Type
  9419 ;;                  5   17[BANK0 ] struct RSV
  9420 ;; Registers used:
  9421 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9422 ;; Tracked objects:
  9423 ;;		On entry : 0/0
  9424 ;;		On exit  : 0/0
  9425 ;;		Unchanged: 0/0
  9426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9427 ;;      Params:         0       5       0       0       0       0       0       0       0
  9428 ;;      Locals:         0       2       0       0       0       0       0       0       0
  9429 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9430 ;;      Totals:         0       7       0       0       0       0       0       0       0
  9431 ;;Total ram usage:        7 bytes
  9432 ;; Hardware stack levels used:    1
  9433 ;; Hardware stack levels required when called:    7
  9434 ;; This function calls:
  9435 ;;		_enc424j600_readSPI
  9436 ;;		_enc424j600_setERXDATAReadPointer
  9437 ;;		_enc424j600_updateReceiveStatusVector
  9438 ;;		_enc424j600_writeSPI
  9439 ;; This function is called by:
  9440 ;;		_ethernet_rxGetNewFrame
  9441 ;; This function uses a non-reentrant model
  9442 ;;
  9443                           
  9444                           	psect	text24
  9445  004932                     __ptext24:
  9446                           	opt stack 0
  9447  004932                     _ethernetController_getRSV:
  9448                           	opt stack 21
  9449                           
  9450                           ;ENC424J600.c: 300: uint8_t static temp[6];
  9451                           ;ENC424J600.c: 301: enc424j600_setERXDATAReadPointer(address + 2);
  9452                           
  9453                           ;incstack = 0
  9454  004932  0E02               	movlw	2
  9455  004934  0100               	movlb	0	; () banked
  9456  004936  2571               	addwf	ethernetController_getRSV@address& (0+255),w,b
  9457  004938  6F6A               	movwf	enc424j600_setERXDATAReadPointer@addr& (0+255),b
  9458  00493A  0E00               	movlw	0
  9459  00493C  2172               	addwfc	(ethernetController_getRSV@address+1)& (0+255),w,b
  9460  00493E  6F6B               	movwf	(enc424j600_setERXDATAReadPointer@addr+1)& (0+255),b
  9461  004940  ECDA  F028         	call	_enc424j600_setERXDATAReadPointer	;wreg free
  9462                           
  9463                           ;ENC424J600.c: 302: uint8_t opcode = 0x2C;
  9464  004944  0E2C               	movlw	44
  9465  004946  0100               	movlb	0	; () banked
  9466  004948  6F76               	movwf	ethernetController_getRSV@opcode& (0+255),b
  9467                           
  9468                           ; BSR set to: 0
  9469                           ;ENC424J600.c: 303: PORTBbits.RB4=0;
  9470  00494A  9881               	bcf	3969,4,c	;volatile
  9471                           
  9472                           ; BSR set to: 0
  9473                           ;ENC424J600.c: 304: enc424j600_writeSPI(&opcode);
  9474  00494C  0E76               	movlw	low ethernetController_getRSV@opcode
  9475  00494E  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
  9476  004950  0E00               	movlw	high ethernetController_getRSV@opcode
  9477  004952  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
  9478  004954  EC20  F026         	call	_enc424j600_writeSPI	;wreg free
  9479                           
  9480                           ;ENC424J600.c: 305: for (uint8_t i = 0; i < 6; i++) {
  9481  004958  0E00               	movlw	0
  9482  00495A  0100               	movlb	0	; () banked
  9483  00495C  6F77               	movwf	ethernetController_getRSV@i& (0+255),b
  9484  00495E                     l9623:
  9485                           
  9486                           ; BSR set to: 0
  9487  00495E  0E05               	movlw	5
  9488  004960  6577               	cpfsgt	ethernetController_getRSV@i& (0+255),b
  9489  004962  D001               	goto	l165
  9490  004964  D00D               	goto	u11230
  9491  004966                     l165:
  9492                           
  9493                           ; BSR set to: 0
  9494                           ;ENC424J600.c: 306: enc424j600_readSPI(&temp[i]);
  9495                           
  9496                           ; BSR set to: 0
  9497  004966  5177               	movf	ethernetController_getRSV@i& (0+255),w,b
  9498  004968  0D01               	mullw	1
  9499  00496A  0EF0               	movlw	low ethernetController_getRSV@temp
  9500  00496C  24F3               	addwf	prodl,w,c
  9501  00496E  6F60               	movwf	enc424j600_readSPI@data& (0+255),b
  9502  004970  0E01               	movlw	high ethernetController_getRSV@temp
  9503  004972  20F4               	addwfc	prodh,w,c
  9504  004974  6F61               	movwf	(enc424j600_readSPI@data+1)& (0+255),b
  9505  004976  ECB7  F025         	call	_enc424j600_readSPI	;wreg free
  9506  00497A  0100               	movlb	0	; () banked
  9507  00497C  2B77               	incf	ethernetController_getRSV@i& (0+255),f,b
  9508  00497E  D7EF               	goto	l9623
  9509  004980                     u11230:
  9510                           
  9511                           ; BSR set to: 0
  9512                           ;ENC424J600.c: 307: }
  9513                           ;ENC424J600.c: 308: PORTBbits.RB4=1;
  9514  004980  8881               	bsf	3969,4,c	;volatile
  9515                           
  9516                           ; BSR set to: 0
  9517                           ;ENC424J600.c: 309: return enc424j600_updateReceiveStatusVector(&temp[0]);
  9518  004982  0EF0               	movlw	low ethernetController_getRSV@temp
  9519  004984  6F60               	movwf	enc424j600_updateReceiveStatusVector@rsv& (0+255),b
  9520  004986  0E01               	movlw	high ethernetController_getRSV@temp
  9521  004988  6F61               	movwf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),b
  9522  00498A  EC93  F009         	call	_enc424j600_updateReceiveStatusVector	;wreg free
  9523  00498E  CFE9 FFD9          	movff	fsr0l,fsr2l
  9524  004992  CFEA FFDA          	movff	fsr0h,fsr2h
  9525  004996  EE00  F071         	lfsr	0,?_ethernetController_getRSV
  9526  00499A  0E04               	movlw	4
  9527  00499C                     u11241:
  9528  00499C  CFDB FFEB          	movff	plusw2,plusw0
  9529  0049A0  06E8               	decf	wreg,f,c
  9530  0049A2  E2FC               	bc	u11241
  9531  0049A4  0012               	return	
  9532  0049A6                     __end_of_ethernetController_getRSV:
  9533                           	opt stack 0
  9534                           tblptru	equ	0xFF8
  9535                           tblptrh	equ	0xFF7
  9536                           tblptrl	equ	0xFF6
  9537                           tablat	equ	0xFF5
  9538                           prodh	equ	0xFF4
  9539                           prodl	equ	0xFF3
  9540                           intcon	equ	0xFF2
  9541                           intcon3	equ	0xFF0
  9542                           indf0	equ	0xFEF
  9543                           postinc0	equ	0xFEE
  9544                           plusw0	equ	0xFEB
  9545                           fsr0h	equ	0xFEA
  9546                           fsr0l	equ	0xFE9
  9547                           wreg	equ	0xFE8
  9548                           indf1	equ	0xFE7
  9549                           postinc1	equ	0xFE6
  9550                           postdec1	equ	0xFE5
  9551                           plusw1	equ	0xFE3
  9552                           fsr1h	equ	0xFE2
  9553                           fsr1l	equ	0xFE1
  9554                           indf2	equ	0xFDF
  9555                           postinc2	equ	0xFDE
  9556                           postdec2	equ	0xFDD
  9557                           plusw2	equ	0xFDB
  9558                           fsr2h	equ	0xFDA
  9559                           fsr2l	equ	0xFD9
  9560                           status	equ	0xFD8
  9561                           
  9562 ;; *************** function _enc424j600_updateReceiveStatusVector *****************
  9563 ;; Defined at:
  9564 ;;		line 719 in file "src/enc424j600/ENC424J600.c"
  9565 ;; Parameters:    Size  Location     Type
  9566 ;;  rsv             2    0[BANK0 ] PTR unsigned char 
  9567 ;;		 -> ethernetController_getRSV@temp(6), 
  9568 ;; Auto vars:     Size  Location     Type
  9569 ;;  receiveStatu    5   12[BANK0 ] struct RSV
  9570 ;; Return value:  Size  Location     Type
  9571 ;;                  5    0[BANK0 ] struct RSV
  9572 ;; Registers used:
  9573 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
  9574 ;; Tracked objects:
  9575 ;;		On entry : 0/0
  9576 ;;		On exit  : 0/0
  9577 ;;		Unchanged: 0/0
  9578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9579 ;;      Params:         0       5       0       0       0       0       0       0       0
  9580 ;;      Locals:         0       5       0       0       0       0       0       0       0
  9581 ;;      Temps:          0       7       0       0       0       0       0       0       0
  9582 ;;      Totals:         0      17       0       0       0       0       0       0       0
  9583 ;;Total ram usage:       17 bytes
  9584 ;; Hardware stack levels used:    1
  9585 ;; Hardware stack levels required when called:    4
  9586 ;; This function calls:
  9587 ;;		Nothing
  9588 ;; This function is called by:
  9589 ;;		_ethernetController_getRSV
  9590 ;; This function uses a non-reentrant model
  9591 ;;
  9592                           
  9593                           	psect	text25
  9594  001326                     __ptext25:
  9595                           	opt stack 0
  9596  001326                     _enc424j600_updateReceiveStatusVector:
  9597                           	opt stack 23
  9598                           
  9599                           ;ENC424J600.c: 720: RSV_t receiveStatusVector;
  9600                           ;ENC424J600.c: 723: receiveStatusVector.length = (uint16_t) ((*(rsv + 0)) | (uint16_t) (
      +                          ((*(rsv + 1)) << 8)&0xff00));
  9601                           
  9602                           ;incstack = 0
  9603  001326  0E00               	movlw	0
  9604  001328  0100               	movlb	0	; () banked
  9605  00132A  6F65               	movwf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9606  00132C  0EFF               	movlw	255
  9607  00132E  6F66               	movwf	(??_enc424j600_updateReceiveStatusVector+1)& (0+255),b
  9608  001330  EE20 F001          	lfsr	2,1
  9609  001334  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  9610  001336  26D9               	addwf	fsr2l,f,c
  9611  001338  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  9612  00133A  22DA               	addwfc	fsr2h,f,c
  9613  00133C  50DF               	movf	indf2,w,c
  9614  00133E  6F67               	movwf	(??_enc424j600_updateReceiveStatusVector+2)& (0+255),b
  9615  001340  5167               	movf	(??_enc424j600_updateReceiveStatusVector+2)& (0+255),w,b
  9616  001342  6F69               	movwf	(??_enc424j600_updateReceiveStatusVector+4)& (0+255),b
  9617  001344  6B68               	clrf	(??_enc424j600_updateReceiveStatusVector+3)& (0+255),b
  9618  001346  5165               	movf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9619  001348  1768               	andwf	(??_enc424j600_updateReceiveStatusVector+3)& (0+255),f,b
  9620  00134A  5166               	movf	(??_enc424j600_updateReceiveStatusVector+1)& (0+255),w,b
  9621  00134C  1769               	andwf	(??_enc424j600_updateReceiveStatusVector+4)& (0+255),f,b
  9622  00134E  C060  FFD9         	movff	enc424j600_updateReceiveStatusVector@rsv,fsr2l
  9623  001352  C061  FFDA         	movff	enc424j600_updateReceiveStatusVector@rsv+1,fsr2h
  9624  001356  50DF               	movf	indf2,w,c
  9625  001358  6F6A               	movwf	(??_enc424j600_updateReceiveStatusVector+5)& (0+255),b
  9626  00135A  6B6B               	clrf	(??_enc424j600_updateReceiveStatusVector+6)& (0+255),b
  9627  00135C  5168               	movf	(??_enc424j600_updateReceiveStatusVector+3)& (0+255),w,b
  9628  00135E  116A               	iorwf	(??_enc424j600_updateReceiveStatusVector+5)& (0+255),w,b
  9629  001360  6F6C               	movwf	enc424j600_updateReceiveStatusVector@receiveStatusVector& (0+255),b
  9630  001362  5169               	movf	(??_enc424j600_updateReceiveStatusVector+4)& (0+255),w,b
  9631  001364  116B               	iorwf	(??_enc424j600_updateReceiveStatusVector+6)& (0+255),w,b
  9632  001366  6F6D               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+1)& (0+255),b
  9633                           
  9634                           ;ENC424J600.c: 725: receiveStatusVector.packetPreviouslyIgnored = (uint8_t) (*(rsv + 2) 
      +                          & 0b00000001) != 0 ? 1 : 0;
  9635  001368  EE20 F002          	lfsr	2,2
  9636  00136C  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  9637  00136E  26D9               	addwf	fsr2l,f,c
  9638  001370  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  9639  001372  22DA               	addwfc	fsr2h,f,c
  9640  001374  A0DF               	btfss	indf2,0,c
  9641  001376  D003               	goto	u10350
  9642  001378  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9643  00137A  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9644  00137C  D002               	goto	u10368
  9645  00137E                     u10350:
  9646  00137E  0100               	movlb	0	; () banked
  9647  001380  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9648  001382                     u10368:
  9649  001382  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  9650  001384  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9651  001386  0BFE               	andlw	-2
  9652  001388  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9653  00138A  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  9654                           
  9655                           ;ENC424J600.c: 726: receiveStatusVector.carrierEventPreviouslySeen = (uint8_t) (*(rsv + 
      +                          2) & 0b00000100) != 0 ? 1 : 0;
  9656  00138C  EE20 F002          	lfsr	2,2
  9657  001390  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  9658  001392  26D9               	addwf	fsr2l,f,c
  9659  001394  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  9660  001396  22DA               	addwfc	fsr2h,f,c
  9661  001398  A4DF               	btfss	indf2,2,c
  9662  00139A  D003               	goto	u10370
  9663  00139C  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9664  00139E  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9665  0013A0  D002               	goto	u10388
  9666  0013A2                     u10370:
  9667  0013A2  0100               	movlb	0	; () banked
  9668  0013A4  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9669  0013A6                     u10388:
  9670  0013A6  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9671  0013A8  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  9672  0013AA  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9673  0013AC  0BFD               	andlw	-3
  9674  0013AE  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9675  0013B0  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  9676                           
  9677                           ;ENC424J600.c: 727: receiveStatusVector.CRCError = (uint8_t) (*(rsv + 2) & 0b00010000) !
      +                          = 0 ? 1 : 0;
  9678  0013B2  EE20 F002          	lfsr	2,2
  9679  0013B6  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  9680  0013B8  26D9               	addwf	fsr2l,f,c
  9681  0013BA  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  9682  0013BC  22DA               	addwfc	fsr2h,f,c
  9683  0013BE  A8DF               	btfss	indf2,4,c
  9684  0013C0  D003               	goto	u10390
  9685  0013C2  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9686  0013C4  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9687  0013C6  D002               	goto	u10408
  9688  0013C8                     u10390:
  9689  0013C8  0100               	movlb	0	; () banked
  9690  0013CA  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9691  0013CC                     u10408:
  9692  0013CC  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9693  0013CE  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9694  0013D0  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  9695  0013D2  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9696  0013D4  0BFB               	andlw	-5
  9697  0013D6  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9698  0013D8  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  9699                           
  9700                           ;ENC424J600.c: 728: receiveStatusVector.lengthCheckError = (uint8_t) (*(rsv + 2) & 0b001
      +                          00000) != 0 ? 1 : 0;
  9701  0013DA  EE20 F002          	lfsr	2,2
  9702  0013DE  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  9703  0013E0  26D9               	addwf	fsr2l,f,c
  9704  0013E2  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  9705  0013E4  22DA               	addwfc	fsr2h,f,c
  9706  0013E6  AADF               	btfss	indf2,5,c
  9707  0013E8  D003               	goto	u10410
  9708  0013EA  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9709  0013EC  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9710  0013EE  D002               	goto	u10428
  9711  0013F0                     u10410:
  9712  0013F0  0100               	movlb	0	; () banked
  9713  0013F2  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9714  0013F4                     u10428:
  9715  0013F4  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9716  0013F6  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9717  0013F8  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9718  0013FA  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  9719  0013FC  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9720  0013FE  0BF7               	andlw	-9
  9721  001400  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9722  001402  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  9723                           
  9724                           ;ENC424J600.c: 729: receiveStatusVector.lengthOutOfRange = (uint8_t) (*(rsv + 2) & 0b010
      +                          00000) != 0 ? 1 : 0;
  9725  001404  EE20 F002          	lfsr	2,2
  9726  001408  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  9727  00140A  26D9               	addwf	fsr2l,f,c
  9728  00140C  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  9729  00140E  22DA               	addwfc	fsr2h,f,c
  9730  001410  ACDF               	btfss	indf2,6,c
  9731  001412  D003               	goto	u10430
  9732  001414  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9733  001416  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9734  001418  D002               	goto	u10448
  9735  00141A                     u10430:
  9736  00141A  0100               	movlb	0	; () banked
  9737  00141C  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9738  00141E                     u10448:
  9739  00141E  3B65               	swapf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9740  001420  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  9741  001422  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9742  001424  0BEF               	andlw	-17
  9743  001426  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9744  001428  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  9745                           
  9746                           ;ENC424J600.c: 730: receiveStatusVector.receivedOk = (uint8_t) (*(rsv + 2) & 0b10000000)
      +                           != 0 ? 1 : 0;
  9747  00142A  EE20 F002          	lfsr	2,2
  9748  00142E  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  9749  001430  26D9               	addwf	fsr2l,f,c
  9750  001432  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  9751  001434  22DA               	addwfc	fsr2h,f,c
  9752  001436  AEDF               	btfss	indf2,7,c
  9753  001438  D003               	goto	u10450
  9754  00143A  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9755  00143C  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9756  00143E  D002               	goto	u10468
  9757  001440                     u10450:
  9758  001440  0100               	movlb	0	; () banked
  9759  001442  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9760  001444                     u10468:
  9761  001444  3B65               	swapf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9762  001446  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9763  001448  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  9764  00144A  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9765  00144C  0BDF               	andlw	-33
  9766  00144E  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9767  001450  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  9768                           
  9769                           ;ENC424J600.c: 732: receiveStatusVector.multicast = (uint8_t) (*(rsv + 3) & 0b00000001) 
      +                          != 0 ? 1 : 0;
  9770  001452  EE20 F003          	lfsr	2,3
  9771  001456  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  9772  001458  26D9               	addwf	fsr2l,f,c
  9773  00145A  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  9774  00145C  22DA               	addwfc	fsr2h,f,c
  9775  00145E  A0DF               	btfss	indf2,0,c
  9776  001460  D003               	goto	u10470
  9777  001462  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9778  001464  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9779  001466  D002               	goto	u10488
  9780  001468                     u10470:
  9781  001468  0100               	movlb	0	; () banked
  9782  00146A  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9783  00146C                     u10488:
  9784  00146C  3B65               	swapf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9785  00146E  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9786  001470  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9787  001472  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  9788  001474  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9789  001476  0BBF               	andlw	-65
  9790  001478  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9791  00147A  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  9792                           
  9793                           ;ENC424J600.c: 733: receiveStatusVector.broadcast = (uint8_t) (*(rsv + 3) & 0b00000010) 
      +                          != 0 ? 1 : 0;
  9794  00147C  EE20 F003          	lfsr	2,3
  9795  001480  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  9796  001482  26D9               	addwf	fsr2l,f,c
  9797  001484  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  9798  001486  22DA               	addwfc	fsr2h,f,c
  9799  001488  A2DF               	btfss	indf2,1,c
  9800  00148A  D003               	goto	u10490
  9801  00148C  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9802  00148E  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9803  001490  D002               	goto	u10508
  9804  001492                     u10490:
  9805  001492  0100               	movlb	0	; () banked
  9806  001494  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9807  001496                     u10508:
  9808  001496  3365               	rrcf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9809  001498  3365               	rrcf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9810  00149A  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  9811  00149C  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9812  00149E  0B7F               	andlw	-129
  9813  0014A0  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9814  0014A2  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  9815                           
  9816                           ;ENC424J600.c: 734: receiveStatusVector.controlFrame = (uint8_t) (*(rsv + 3) & 0b0000100
      +                          0) != 0 ? 1 : 0;
  9817  0014A4  EE20 F003          	lfsr	2,3
  9818  0014A8  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  9819  0014AA  26D9               	addwf	fsr2l,f,c
  9820  0014AC  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  9821  0014AE  22DA               	addwfc	fsr2h,f,c
  9822  0014B0  A6DF               	btfss	indf2,3,c
  9823  0014B2  D003               	goto	u10510
  9824  0014B4  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9825  0014B6  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9826  0014B8  D002               	goto	u10528
  9827  0014BA                     u10510:
  9828  0014BA  0100               	movlb	0	; () banked
  9829  0014BC  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9830  0014BE                     u10528:
  9831  0014BE  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9832  0014C0  516F               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  9833  0014C2  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9834  0014C4  0BFD               	andlw	-3
  9835  0014C6  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9836  0014C8  6F6F               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  9837                           
  9838                           ;ENC424J600.c: 735: receiveStatusVector.pauseFrame = (uint8_t) (*(rsv + 3) & 0b00010000)
      +                           != 0 ? 1 : 0;
  9839  0014CA  EE20 F003          	lfsr	2,3
  9840  0014CE  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  9841  0014D0  26D9               	addwf	fsr2l,f,c
  9842  0014D2  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  9843  0014D4  22DA               	addwfc	fsr2h,f,c
  9844  0014D6  A8DF               	btfss	indf2,4,c
  9845  0014D8  D003               	goto	u10530
  9846  0014DA  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9847  0014DC  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9848  0014DE  D002               	goto	u10548
  9849  0014E0                     u10530:
  9850  0014E0  0100               	movlb	0	; () banked
  9851  0014E2  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9852  0014E4                     u10548:
  9853  0014E4  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9854  0014E6  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9855  0014E8  516F               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  9856  0014EA  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9857  0014EC  0BFB               	andlw	-5
  9858  0014EE  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9859  0014F0  6F6F               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  9860                           
  9861                           ;ENC424J600.c: 736: receiveStatusVector.unknownOpcode = (uint8_t) (*(rsv + 3) & 0b001000
      +                          00) != 0 ? 1 : 0;
  9862  0014F2  EE20 F003          	lfsr	2,3
  9863  0014F6  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  9864  0014F8  26D9               	addwf	fsr2l,f,c
  9865  0014FA  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  9866  0014FC  22DA               	addwfc	fsr2h,f,c
  9867  0014FE  AADF               	btfss	indf2,5,c
  9868  001500  D003               	goto	u10550
  9869  001502  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9870  001504  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9871  001506  D002               	goto	u10568
  9872  001508                     u10550:
  9873  001508  0100               	movlb	0	; () banked
  9874  00150A  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9875  00150C                     u10568:
  9876  00150C  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9877  00150E  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9878  001510  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9879  001512  516F               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  9880  001514  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9881  001516  0BF7               	andlw	-9
  9882  001518  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9883  00151A  6F6F               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  9884                           
  9885                           ;ENC424J600.c: 737: receiveStatusVector.vlan = (uint8_t) (*(rsv + 3) & 0b01000000) != 0 
      +                          ? 1 : 0;
  9886  00151C  EE20 F003          	lfsr	2,3
  9887  001520  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  9888  001522  26D9               	addwf	fsr2l,f,c
  9889  001524  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  9890  001526  22DA               	addwfc	fsr2h,f,c
  9891  001528  ACDF               	btfss	indf2,6,c
  9892  00152A  D003               	goto	u10570
  9893  00152C  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9894  00152E  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9895  001530  D002               	goto	u10588
  9896  001532                     u10570:
  9897  001532  0100               	movlb	0	; () banked
  9898  001534  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9899  001536                     u10588:
  9900  001536  3B65               	swapf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9901  001538  516F               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  9902  00153A  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9903  00153C  0BEF               	andlw	-17
  9904  00153E  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9905  001540  6F6F               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  9906                           
  9907                           ;ENC424J600.c: 738: receiveStatusVector.runtFilter = (uint8_t) (*(rsv + 3) & 0b10000000)
      +                           != 0 ? 1 : 0;
  9908  001542  EE20 F003          	lfsr	2,3
  9909  001546  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  9910  001548  26D9               	addwf	fsr2l,f,c
  9911  00154A  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  9912  00154C  22DA               	addwfc	fsr2h,f,c
  9913  00154E  AEDF               	btfss	indf2,7,c
  9914  001550  D003               	goto	u10590
  9915  001552  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9916  001554  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9917  001556  D002               	goto	u10608
  9918  001558                     u10590:
  9919  001558  0100               	movlb	0	; () banked
  9920  00155A  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9921  00155C                     u10608:
  9922  00155C  3B65               	swapf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9923  00155E  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9924  001560  516F               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  9925  001562  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9926  001564  0BDF               	andlw	-33
  9927  001566  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9928  001568  6F6F               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  9929                           
  9930                           ;ENC424J600.c: 740: receiveStatusVector.notMeFilter = (uint8_t) (*(rsv + 4) & 0b00000001
      +                          ) != 0 ? 1 : 0;
  9931  00156A  EE20 F004          	lfsr	2,4
  9932  00156E  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  9933  001570  26D9               	addwf	fsr2l,f,c
  9934  001572  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  9935  001574  22DA               	addwfc	fsr2h,f,c
  9936  001576  A0DF               	btfss	indf2,0,c
  9937  001578  D003               	goto	u10610
  9938  00157A  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9939  00157C  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9940  00157E  D002               	goto	u10628
  9941  001580                     u10610:
  9942  001580  0100               	movlb	0	; () banked
  9943  001582  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9944  001584                     u10628:
  9945  001584  3B65               	swapf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9946  001586  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9947  001588  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9948  00158A  516F               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  9949  00158C  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9950  00158E  0BBF               	andlw	-65
  9951  001590  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9952  001592  6F6F               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  9953                           
  9954                           ;ENC424J600.c: 741: receiveStatusVector.hashFilter = (uint8_t) (*(rsv + 4) & 0b00000010)
      +                           != 0 ? 1 : 0;
  9955  001594  EE20 F004          	lfsr	2,4
  9956  001598  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  9957  00159A  26D9               	addwf	fsr2l,f,c
  9958  00159C  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  9959  00159E  22DA               	addwfc	fsr2h,f,c
  9960  0015A0  A2DF               	btfss	indf2,1,c
  9961  0015A2  D003               	goto	u10630
  9962  0015A4  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9963  0015A6  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9964  0015A8  D002               	goto	u10648
  9965  0015AA                     u10630:
  9966  0015AA  0100               	movlb	0	; () banked
  9967  0015AC  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9968  0015AE                     u10648:
  9969  0015AE  3365               	rrcf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9970  0015B0  3365               	rrcf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9971  0015B2  516F               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  9972  0015B4  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9973  0015B6  0B7F               	andlw	-129
  9974  0015B8  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9975  0015BA  6F6F               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  9976                           
  9977                           ;ENC424J600.c: 742: receiveStatusVector.magicFilter = (uint8_t) (*(rsv + 4) & 0b00000100
      +                          ) != 0 ? 1 : 0;
  9978  0015BC  EE20 F004          	lfsr	2,4
  9979  0015C0  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  9980  0015C2  26D9               	addwf	fsr2l,f,c
  9981  0015C4  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  9982  0015C6  22DA               	addwfc	fsr2h,f,c
  9983  0015C8  A4DF               	btfss	indf2,2,c
  9984  0015CA  D003               	goto	u10650
  9985  0015CC  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9986  0015CE  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9987  0015D0  D002               	goto	u10668
  9988  0015D2                     u10650:
  9989  0015D2  0100               	movlb	0	; () banked
  9990  0015D4  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9991  0015D6                     u10668:
  9992  0015D6  5170               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),w,b
  9993  0015D8  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9994  0015DA  0BFE               	andlw	-2
  9995  0015DC  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9996  0015DE  6F70               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),b
  9997                           
  9998                           ;ENC424J600.c: 743: receiveStatusVector.patternMatch = (uint8_t) (*(rsv + 4) & 0b0000100
      +                          0) != 0 ? 1 : 0;
  9999  0015E0  EE20 F004          	lfsr	2,4
 10000  0015E4  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
 10001  0015E6  26D9               	addwf	fsr2l,f,c
 10002  0015E8  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
 10003  0015EA  22DA               	addwfc	fsr2h,f,c
 10004  0015EC  A6DF               	btfss	indf2,3,c
 10005  0015EE  D003               	goto	u10670
 10006  0015F0  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 10007  0015F2  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 10008  0015F4  D002               	goto	u10688
 10009  0015F6                     u10670:
 10010  0015F6  0100               	movlb	0	; () banked
 10011  0015F8  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 10012  0015FA                     u10688:
 10013  0015FA  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 10014  0015FC  5170               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),w,b
 10015  0015FE  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 10016  001600  0BFD               	andlw	-3
 10017  001602  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 10018  001604  6F70               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),b
 10019                           
 10020                           ;ENC424J600.c: 744: receiveStatusVector.unicast = (uint8_t) (*(rsv + 4) & 0b00010000) !=
      +                           0 ? 1 : 0;
 10021  001606  EE20 F004          	lfsr	2,4
 10022  00160A  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
 10023  00160C  26D9               	addwf	fsr2l,f,c
 10024  00160E  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
 10025  001610  22DA               	addwfc	fsr2h,f,c
 10026  001612  A8DF               	btfss	indf2,4,c
 10027  001614  D003               	goto	u10690
 10028  001616  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 10029  001618  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 10030  00161A  D002               	goto	u10708
 10031  00161C                     u10690:
 10032  00161C  0100               	movlb	0	; () banked
 10033  00161E  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 10034  001620                     u10708:
 10035  001620  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 10036  001622  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 10037  001624  5170               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),w,b
 10038  001626  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 10039  001628  0BFB               	andlw	-5
 10040  00162A  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 10041  00162C  6F70               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),b
 10042                           
 10043                           ; BSR set to: 0
 10044                           ;ENC424J600.c: 746: return receiveStatusVector;
 10045  00162E  EE20  F06C         	lfsr	2,enc424j600_updateReceiveStatusVector@receiveStatusVector
 10046  001632  EE00  F060         	lfsr	0,?_enc424j600_updateReceiveStatusVector
 10047  001636  0E04               	movlw	4
 10048  001638                     u10711:
 10049  001638  CFDB FFEB          	movff	plusw2,plusw0
 10050  00163C  06E8               	decf	wreg,f,c
 10051  00163E  E2FC               	bc	u10711
 10052  001640  0012               	return	
 10053  001642                     __end_of_enc424j600_updateReceiveStatusVector:
 10054                           	opt stack 0
 10055                           tblptru	equ	0xFF8
 10056                           tblptrh	equ	0xFF7
 10057                           tblptrl	equ	0xFF6
 10058                           tablat	equ	0xFF5
 10059                           prodh	equ	0xFF4
 10060                           prodl	equ	0xFF3
 10061                           intcon	equ	0xFF2
 10062                           intcon3	equ	0xFF0
 10063                           indf0	equ	0xFEF
 10064                           postinc0	equ	0xFEE
 10065                           plusw0	equ	0xFEB
 10066                           fsr0h	equ	0xFEA
 10067                           fsr0l	equ	0xFE9
 10068                           wreg	equ	0xFE8
 10069                           indf1	equ	0xFE7
 10070                           postinc1	equ	0xFE6
 10071                           postdec1	equ	0xFE5
 10072                           plusw1	equ	0xFE3
 10073                           fsr1h	equ	0xFE2
 10074                           fsr1l	equ	0xFE1
 10075                           indf2	equ	0xFDF
 10076                           postinc2	equ	0xFDE
 10077                           postdec2	equ	0xFDD
 10078                           plusw2	equ	0xFDB
 10079                           fsr2h	equ	0xFDA
 10080                           fsr2l	equ	0xFD9
 10081                           status	equ	0xFD8
 10082                           
 10083 ;; *************** function _ethernetController_getEtherTypeField *****************
 10084 ;; Defined at:
 10085 ;;		line 283 in file "src/enc424j600/ENC424J600.c"
 10086 ;; Parameters:    Size  Location     Type
 10087 ;;  field           9   15[BANK0 ] struct memoryField
 10088 ;; Auto vars:     Size  Location     Type
 10089 ;;  ethertype       2   28[BANK0 ] enum E5509
 10090 ;;  highByte        1   32[BANK0 ] unsigned char 
 10091 ;;  lowByte         1   31[BANK0 ] unsigned char 
 10092 ;;  opcode          1   30[BANK0 ] unsigned char 
 10093 ;; Return value:  Size  Location     Type
 10094 ;;                  2   15[BANK0 ] enum E5509
 10095 ;; Registers used:
 10096 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10097 ;; Tracked objects:
 10098 ;;		On entry : 0/0
 10099 ;;		On exit  : 0/0
 10100 ;;		Unchanged: 0/0
 10101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10102 ;;      Params:         0       9       0       0       0       0       0       0       0
 10103 ;;      Locals:         0       5       0       0       0       0       0       0       0
 10104 ;;      Temps:          0       4       0       0       0       0       0       0       0
 10105 ;;      Totals:         0      18       0       0       0       0       0       0       0
 10106 ;;Total ram usage:       18 bytes
 10107 ;; Hardware stack levels used:    1
 10108 ;; Hardware stack levels required when called:    7
 10109 ;; This function calls:
 10110 ;;		_enc424j600_readSPI
 10111 ;;		_enc424j600_setERXDATAReadPointer
 10112 ;;		_enc424j600_writeSPI
 10113 ;; This function is called by:
 10114 ;;		_ethernet_rxGetNewFrame
 10115 ;; This function uses a non-reentrant model
 10116 ;;
 10117                           
 10118                           	psect	text26
 10119  004A8E                     __ptext26:
 10120                           	opt stack 0
 10121  004A8E                     _ethernetController_getEtherTypeField:
 10122                           	opt stack 21
 10123                           
 10124                           ;ENC424J600.c: 284: etherType_t ethertype = 0x0000;
 10125                           
 10126                           ; BSR set to: 0
 10127                           ;incstack = 0
 10128  004A8E  0E00               	movlw	0
 10129  004A90  0100               	movlb	0	; () banked
 10130  004A92  6F7D               	movwf	(ethernetController_getEtherTypeField@ethertype+1)& (0+255),b
 10131  004A94  0E00               	movlw	0
 10132  004A96  6F7C               	movwf	ethernetController_getEtherTypeField@ethertype& (0+255),b
 10133                           
 10134                           ; BSR set to: 0
 10135                           ;ENC424J600.c: 285: enc424j600_setERXDATAReadPointer(field.start + 20);
 10136  004A98  0E14               	movlw	20
 10137  004A9A  256F               	addwf	ethernetController_getEtherTypeField@field& (0+255),w,b
 10138  004A9C  6F6A               	movwf	enc424j600_setERXDATAReadPointer@addr& (0+255),b
 10139  004A9E  0E00               	movlw	0
 10140  004AA0  2170               	addwfc	(ethernetController_getEtherTypeField@field+1)& (0+255),w,b
 10141  004AA2  6F6B               	movwf	(enc424j600_setERXDATAReadPointer@addr+1)& (0+255),b
 10142  004AA4  ECDA  F028         	call	_enc424j600_setERXDATAReadPointer	;wreg free
 10143                           
 10144                           ;ENC424J600.c: 286: uint8_t opcode = 0x2C;
 10145  004AA8  0E2C               	movlw	44
 10146  004AAA  0100               	movlb	0	; () banked
 10147  004AAC  6F7E               	movwf	ethernetController_getEtherTypeField@opcode& (0+255),b
 10148                           
 10149                           ; BSR set to: 0
 10150                           ;ENC424J600.c: 287: PORTBbits.RB4=0;
 10151  004AAE  9881               	bcf	3969,4,c	;volatile
 10152                           
 10153                           ;ENC424J600.c: 288: enc424j600_writeSPI(&opcode);
 10154  004AB0  0E7E               	movlw	low ethernetController_getEtherTypeField@opcode
 10155  004AB2  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 10156  004AB4  0E00               	movlw	high ethernetController_getEtherTypeField@opcode
 10157  004AB6  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 10158  004AB8  EC20  F026         	call	_enc424j600_writeSPI	;wreg free
 10159                           
 10160                           ;ENC424J600.c: 290: uint8_t lowByte;
 10161                           ;ENC424J600.c: 291: uint8_t highByte;
 10162                           ;ENC424J600.c: 292: enc424j600_readSPI(&highByte);
 10163  004ABC  0E80               	movlw	low ethernetController_getEtherTypeField@highByte
 10164  004ABE  0100               	movlb	0	; () banked
 10165  004AC0  6F60               	movwf	enc424j600_readSPI@data& (0+255),b
 10166  004AC2  0E00               	movlw	high ethernetController_getEtherTypeField@highByte
 10167  004AC4  6F61               	movwf	(enc424j600_readSPI@data+1)& (0+255),b
 10168  004AC6  ECB7  F025         	call	_enc424j600_readSPI	;wreg free
 10169                           
 10170                           ;ENC424J600.c: 293: enc424j600_readSPI(&lowByte);
 10171  004ACA  0E7F               	movlw	low ethernetController_getEtherTypeField@lowByte
 10172  004ACC  0100               	movlb	0	; () banked
 10173  004ACE  6F60               	movwf	enc424j600_readSPI@data& (0+255),b
 10174  004AD0  0E00               	movlw	high ethernetController_getEtherTypeField@lowByte
 10175  004AD2  6F61               	movwf	(enc424j600_readSPI@data+1)& (0+255),b
 10176  004AD4  ECB7  F025         	call	_enc424j600_readSPI	;wreg free
 10177                           
 10178                           ;ENC424J600.c: 294: ethertype = (uint16_t) (lowByte | (highByte << 8));
 10179  004AD8  0100               	movlb	0	; () banked
 10180  004ADA  5180               	movf	ethernetController_getEtherTypeField@highByte& (0+255),w,b
 10181  004ADC  6F79               	movwf	(??_ethernetController_getEtherTypeField+1)& (0+255),b
 10182  004ADE  6B78               	clrf	??_ethernetController_getEtherTypeField& (0+255),b
 10183  004AE0  517F               	movf	ethernetController_getEtherTypeField@lowByte& (0+255),w,b
 10184  004AE2  6F7A               	movwf	(??_ethernetController_getEtherTypeField+2)& (0+255),b
 10185  004AE4  6B7B               	clrf	(??_ethernetController_getEtherTypeField+3)& (0+255),b
 10186  004AE6  5178               	movf	??_ethernetController_getEtherTypeField& (0+255),w,b
 10187  004AE8  117A               	iorwf	(??_ethernetController_getEtherTypeField+2)& (0+255),w,b
 10188  004AEA  6F7C               	movwf	ethernetController_getEtherTypeField@ethertype& (0+255),b
 10189  004AEC  5179               	movf	(??_ethernetController_getEtherTypeField+1)& (0+255),w,b
 10190  004AEE  117B               	iorwf	(??_ethernetController_getEtherTypeField+3)& (0+255),w,b
 10191  004AF0  6F7D               	movwf	(ethernetController_getEtherTypeField@ethertype+1)& (0+255),b
 10192                           
 10193                           ; BSR set to: 0
 10194                           ;ENC424J600.c: 295: PORTBbits.RB4=1;
 10195  004AF2  8881               	bsf	3969,4,c	;volatile
 10196                           
 10197                           ; BSR set to: 0
 10198                           ;ENC424J600.c: 296: return ethertype;
 10199  004AF4  C07C  F06F         	movff	ethernetController_getEtherTypeField@ethertype,?_ethernetController_getEtherTypeF
      +                          ield
 10200  004AF8  C07D  F070         	movff	ethernetController_getEtherTypeField@ethertype+1,?_ethernetController_getEtherTyp
      +                          eField+1
 10201  004AFC  0012               	return	
 10202  004AFE                     __end_of_ethernetController_getEtherTypeField:
 10203                           	opt stack 0
 10204                           tblptru	equ	0xFF8
 10205                           tblptrh	equ	0xFF7
 10206                           tblptrl	equ	0xFF6
 10207                           tablat	equ	0xFF5
 10208                           prodh	equ	0xFF4
 10209                           prodl	equ	0xFF3
 10210                           intcon	equ	0xFF2
 10211                           intcon3	equ	0xFF0
 10212                           indf0	equ	0xFEF
 10213                           postinc0	equ	0xFEE
 10214                           plusw0	equ	0xFEB
 10215                           fsr0h	equ	0xFEA
 10216                           fsr0l	equ	0xFE9
 10217                           wreg	equ	0xFE8
 10218                           indf1	equ	0xFE7
 10219                           postinc1	equ	0xFE6
 10220                           postdec1	equ	0xFE5
 10221                           plusw1	equ	0xFE3
 10222                           fsr1h	equ	0xFE2
 10223                           fsr1l	equ	0xFE1
 10224                           indf2	equ	0xFDF
 10225                           postinc2	equ	0xFDE
 10226                           postdec2	equ	0xFDD
 10227                           plusw2	equ	0xFDB
 10228                           fsr2h	equ	0xFDA
 10229                           fsr2l	equ	0xFD9
 10230                           status	equ	0xFD8
 10231                           
 10232 ;; *************** function _etherTypeToString *****************
 10233 ;; Defined at:
 10234 ;;		line 138 in file "src/system/uart.c"
 10235 ;; Parameters:    Size  Location     Type
 10236 ;;  ethertype       2    0[BANK0 ] enum E5590
 10237 ;; Auto vars:     Size  Location     Type
 10238 ;;		None
 10239 ;; Return value:  Size  Location     Type
 10240 ;;                  2    0[BANK0 ] PTR unsigned char 
 10241 ;; Registers used:
 10242 ;;		wreg, status,2, status,0
 10243 ;; Tracked objects:
 10244 ;;		On entry : 0/0
 10245 ;;		On exit  : 0/0
 10246 ;;		Unchanged: 0/0
 10247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10248 ;;      Params:         0       2       0       0       0       0       0       0       0
 10249 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10250 ;;      Temps:          0       2       0       0       0       0       0       0       0
 10251 ;;      Totals:         0       4       0       0       0       0       0       0       0
 10252 ;;Total ram usage:        4 bytes
 10253 ;; Hardware stack levels used:    1
 10254 ;; Hardware stack levels required when called:    4
 10255 ;; This function calls:
 10256 ;;		Nothing
 10257 ;; This function is called by:
 10258 ;;		_ethernet_rxGetNewFrame
 10259 ;; This function uses a non-reentrant model
 10260 ;;
 10261                           
 10262                           	psect	text27
 10263  005030                     __ptext27:
 10264                           	opt stack 0
 10265  005030                     _etherTypeToString:
 10266                           	opt stack 24
 10267                           
 10268                           ;uart.c: 139: switch (ethertype) {
 10269                           
 10270                           ; BSR set to: 0
 10271                           ;incstack = 0
 10272  005030  D010               	goto	l830
 10273  005032                     
 10274                           ;uart.c: 141: return "IPv4";
 10275  005032  0EC5               	movlw	low STR_63
 10276  005034  0100               	movlb	0	; () banked
 10277  005036  6F60               	movwf	?_etherTypeToString& (0+255),b
 10278  005038  0E7F               	movlw	high STR_63
 10279  00503A  6F61               	movwf	(?_etherTypeToString+1)& (0+255),b
 10280                           
 10281                           ; BSR set to: 0
 10282  00503C  0012               	return	
 10283  00503E                     
 10284                           ; BSR set to: 0
 10285                           ;uart.c: 143: return "ARP";
 10286                           
 10287                           ; BSR set to: 0
 10288  00503E  0EE6               	movlw	low STR_64
 10289  005040  6F60               	movwf	?_etherTypeToString& (0+255),b
 10290  005042  0E7F               	movlw	high STR_64
 10291  005044  6F61               	movwf	(?_etherTypeToString+1)& (0+255),b
 10292                           
 10293                           ; BSR set to: 0
 10294  005046  0012               	return	
 10295  005048                     
 10296                           ; BSR set to: 0
 10297                           ;uart.c: 145: return "Unknown EtherType";
 10298                           
 10299                           ; BSR set to: 0
 10300  005048  0E96               	movlw	low STR_65
 10301  00504A  6F60               	movwf	?_etherTypeToString& (0+255),b
 10302  00504C  0E7E               	movlw	high STR_65
 10303  00504E  6F61               	movwf	(?_etherTypeToString+1)& (0+255),b
 10304                           
 10305                           ; BSR set to: 0
 10306                           ;uart.c: 146: }
 10307                           
 10308                           ; BSR set to: 0
 10309  005050  0012               	return	
 10310  005052                     l830:
 10311                           
 10312                           ; BSR set to: 0
 10313  005052  C060  F062         	movff	etherTypeToString@ethertype,??_etherTypeToString
 10314  005056  C061  F063         	movff	etherTypeToString@ethertype+1,??_etherTypeToString+1
 10315                           
 10316                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10317                           ; Switch size 1, requested type "space"
 10318                           ; Number of cases is 1, Range of values is 8 to 8
 10319                           ; switch strategies available:
 10320                           ; Name         Instructions Cycles
 10321                           ; simple_byte            4     3 (average)
 10322                           ;	Chosen strategy is simple_byte
 10323  00505A  0100               	movlb	0	; () banked
 10324  00505C  5163               	movf	(??_etherTypeToString+1)& (0+255),w,b
 10325  00505E  0A08               	xorlw	8	; case 8
 10326  005060  A4D8               	btfss	status,2,c
 10327  005062  D7F2               	goto	l834
 10328                           
 10329                           ; BSR set to: 0
 10330                           ; Switch size 1, requested type "space"
 10331                           ; Number of cases is 2, Range of values is 0 to 6
 10332                           ; switch strategies available:
 10333                           ; Name         Instructions Cycles
 10334                           ; simple_byte            7     4 (average)
 10335                           ;	Chosen strategy is simple_byte
 10336  005064  5162               	movf	??_etherTypeToString& (0+255),w,b
 10337  005066  0A00               	xorlw	0	; case 0
 10338  005068  B4D8               	btfsc	status,2,c
 10339  00506A  D7E3               	goto	l831
 10340  00506C  0A06               	xorlw	6	; case 6
 10341  00506E  B4D8               	btfsc	status,2,c
 10342  005070  D7E6               	goto	l833
 10343  005072  D7EA               	goto	l834
 10344  005074                     __end_of_etherTypeToString:
 10345                           	opt stack 0
 10346                           tblptru	equ	0xFF8
 10347                           tblptrh	equ	0xFF7
 10348                           tblptrl	equ	0xFF6
 10349                           tablat	equ	0xFF5
 10350                           prodh	equ	0xFF4
 10351                           prodl	equ	0xFF3
 10352                           intcon	equ	0xFF2
 10353                           intcon3	equ	0xFF0
 10354                           indf0	equ	0xFEF
 10355                           postinc0	equ	0xFEE
 10356                           plusw0	equ	0xFEB
 10357                           fsr0h	equ	0xFEA
 10358                           fsr0l	equ	0xFE9
 10359                           wreg	equ	0xFE8
 10360                           indf1	equ	0xFE7
 10361                           postinc1	equ	0xFE6
 10362                           postdec1	equ	0xFE5
 10363                           plusw1	equ	0xFE3
 10364                           fsr1h	equ	0xFE2
 10365                           fsr1l	equ	0xFE1
 10366                           indf2	equ	0xFDF
 10367                           postinc2	equ	0xFDE
 10368                           postdec2	equ	0xFDD
 10369                           plusw2	equ	0xFDB
 10370                           fsr2h	equ	0xFDA
 10371                           fsr2l	equ	0xFD9
 10372                           status	equ	0xFD8
 10373                           
 10374 ;; *************** function _arp_handleNewPacket *****************
 10375 ;; Defined at:
 10376 ;;		line 33 in file "src/stack/protocols/arp.c"
 10377 ;; Parameters:    Size  Location     Type
 10378 ;;  frame           2  156[BANK0 ] PTR struct ethernetFrame
 10379 ;;		 -> stack(123), 
 10380 ;; Auto vars:     Size  Location     Type
 10381 ;;  arp            32   88[BANK1 ] struct arp_message
 10382 ;; Return value:  Size  Location     Type
 10383 ;;                  1    wreg      void 
 10384 ;; Registers used:
 10385 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10386 ;; Tracked objects:
 10387 ;;		On entry : 0/0
 10388 ;;		On exit  : 0/0
 10389 ;;		Unchanged: 0/0
 10390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10391 ;;      Params:         0       2       0       0       0       0       0       0       0
 10392 ;;      Locals:         0       0      32       0       0       0       0       0       0
 10393 ;;      Temps:          0       2       0       0       0       0       0       0       0
 10394 ;;      Totals:         0       4      32       0       0       0       0       0       0
 10395 ;;Total ram usage:       36 bytes
 10396 ;; Hardware stack levels used:    1
 10397 ;; Hardware stack levels required when called:   11
 10398 ;; This function calls:
 10399 ;;		_UARTTransmitText
 10400 ;;		_arp_parseFromRXBuffer
 10401 ;;		_arp_sendReply
 10402 ;;		_arp_setNewEntry
 10403 ;;		_ethernetController_dropPacket
 10404 ;;		_getMillis
 10405 ;;		_ipAdressToString
 10406 ;;		_macToString
 10407 ;; This function is called by:
 10408 ;;		_ethernet_rxGetNewFrame
 10409 ;; This function uses a non-reentrant model
 10410 ;;
 10411                           
 10412                           	psect	text28
 10413  0029BC                     __ptext28:
 10414                           	opt stack 0
 10415  0029BC                     _arp_handleNewPacket:
 10416                           	opt stack 17
 10417                           
 10418                           ;arp.c: 34: arp_message_t arp;
 10419                           ;arp.c: 35: if (frame->ethertype != ETHERTYPE_ARP) {
 10420                           
 10421                           ; BSR set to: 0
 10422                           ;incstack = 0
 10423  0029BC  0100               	movlb	0	; () banked
 10424  0029BE  EE20 F00E          	lfsr	2,14
 10425  0029C2  51FC               	movf	arp_handleNewPacket@frame& (0+255),w,b
 10426  0029C4  26D9               	addwf	fsr2l,f,c
 10427  0029C6  51FD               	movf	(arp_handleNewPacket@frame+1)& (0+255),w,b
 10428  0029C8  22DA               	addwfc	fsr2h,f,c
 10429  0029CA  0E06               	movlw	6
 10430  0029CC  18DE               	xorwf	postinc2,w,c
 10431  0029CE  E104               	bnz	u11310
 10432  0029D0  0E08               	movlw	8
 10433  0029D2  18DE               	xorwf	postinc2,w,c
 10434  0029D4  B4D8               	btfsc	status,2,c
 10435  0029D6  D007               	goto	l931
 10436  0029D8                     u11310:
 10437                           
 10438                           ; BSR set to: 0
 10439                           ;arp.c: 36: ethernetController_dropPacket(frame);
 10440  0029D8  C0FC  F072         	movff	arp_handleNewPacket@frame,?_ethernetController_dropPacket
 10441  0029DC  C0FD  F073         	movff	arp_handleNewPacket@frame+1,?_ethernetController_dropPacket+1
 10442  0029E0  EC9E  F028         	call	_ethernetController_dropPacket	;wreg free
 10443                           
 10444                           ;arp.c: 37: return;
 10445  0029E4  0012               	return	
 10446  0029E6                     l931:
 10447                           
 10448                           ;arp.c: 38: }
 10449                           ;arp.c: 40: arp = arp_parseFromRXBuffer(frame);
 10450  0029E6  C0FC  F074         	movff	arp_handleNewPacket@frame,arp_parseFromRXBuffer@frame
 10451  0029EA  C0FD  F075         	movff	arp_handleNewPacket@frame+1,arp_parseFromRXBuffer@frame+1
 10452  0029EE  EC96  F007         	call	_arp_parseFromRXBuffer	;wreg free
 10453  0029F2  EE21  F058         	lfsr	2,arp_handleNewPacket@arp
 10454  0029F6  0E1F               	movlw	31
 10455  0029F8                     u11321:
 10456  0029F8  CFEB FFDB          	movff	plusw0,plusw2
 10457  0029FC  06E8               	decf	wreg,f,c
 10458  0029FE  E2FC               	bc	u11321
 10459                           
 10460                           ;arp.c: 41: if (arp.err.code != (uint16_t)0) {
 10461  002A00  0101               	movlb	1	; () banked
 10462  002A02  5176               	movf	(arp_handleNewPacket@arp+30)& (0+255),w,b
 10463  002A04  1177               	iorwf	(arp_handleNewPacket@arp+31)& (0+255),w,b
 10464  002A06  B4D8               	btfsc	status,2,c
 10465  002A08  D00E               	goto	l933
 10466                           
 10467                           ; BSR set to: 1
 10468                           ;arp.c: 42: ethernetController_dropPacket(frame);
 10469  002A0A  C0FC  F072         	movff	arp_handleNewPacket@frame,?_ethernetController_dropPacket
 10470  002A0E  C0FD  F073         	movff	arp_handleNewPacket@frame+1,?_ethernetController_dropPacket+1
 10471  002A12  EC9E  F028         	call	_ethernetController_dropPacket	;wreg free
 10472                           
 10473                           ;arp.c: 43: UARTTransmitText("[Invalid ARP Message was discarded.]\r\n");
 10474  002A16  0E3E               	movlw	low STR_70
 10475  002A18  0100               	movlb	0	; () banked
 10476  002A1A  6F98               	movwf	UARTTransmitText@str& (0+255),b
 10477  002A1C  0E7B               	movlw	high STR_70
 10478  002A1E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 10479  002A20  ECD8  F026         	call	_UARTTransmitText	;wreg free
 10480                           
 10481                           ;arp.c: 44: return;
 10482  002A24  0012               	return	
 10483  002A26                     l933:
 10484                           
 10485                           ;arp.c: 45: }
 10486                           ;arp.c: 46: UARTTransmitText("[");
 10487  002A26  0EC3               	movlw	low (STR_73+3)
 10488  002A28  0100               	movlb	0	; () banked
 10489  002A2A  6F98               	movwf	UARTTransmitText@str& (0+255),b
 10490  002A2C  0E7F               	movlw	high (STR_73+3)
 10491  002A2E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 10492  002A30  ECD8  F026         	call	_UARTTransmitText	;wreg free
 10493                           
 10494                           ;arp.c: 47: UARTTransmitText(macToString(arp.senderMACAddress));
 10495  002A34  EE21  F060         	lfsr	2,arp_handleNewPacket@arp+8
 10496  002A38  EE00  F07A         	lfsr	0,macToString@addr
 10497  002A3C  0E05               	movlw	5
 10498  002A3E                     u11341:
 10499  002A3E  CFDB FFEB          	movff	plusw2,plusw0
 10500  002A42  06E8               	decf	wreg,f,c
 10501  002A44  E2FC               	bc	u11341
 10502  002A46  ECA5  F01D         	call	_macToString	;wreg free
 10503  002A4A  C07A  F098         	movff	?_macToString,UARTTransmitText@str
 10504  002A4E  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
 10505  002A52  ECD8  F026         	call	_UARTTransmitText	;wreg free
 10506                           
 10507                           ;arp.c: 48: UARTTransmitText(", ");
 10508  002A56  0E33               	movlw	low (STR_48+17)
 10509  002A58  0100               	movlb	0	; () banked
 10510  002A5A  6F98               	movwf	UARTTransmitText@str& (0+255),b
 10511  002A5C  0E7E               	movlw	high (STR_48+17)
 10512  002A5E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 10513  002A60  ECD8  F026         	call	_UARTTransmitText	;wreg free
 10514                           
 10515                           ;arp.c: 49: UARTTransmitText(ipAdressToString(arp.senderIPAddress));
 10516  002A64  C166  F073         	movff	arp_handleNewPacket@arp+14,ipAdressToString@ip
 10517  002A68  C167  F074         	movff	arp_handleNewPacket@arp+15,ipAdressToString@ip+1
 10518  002A6C  C168  F075         	movff	arp_handleNewPacket@arp+16,ipAdressToString@ip+2
 10519  002A70  C169  F076         	movff	arp_handleNewPacket@arp+17,ipAdressToString@ip+3
 10520  002A74  ECE7  F013         	call	_ipAdressToString	;wreg free
 10521  002A78  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
 10522  002A7C  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
 10523  002A80  ECD8  F026         	call	_UARTTransmitText	;wreg free
 10524                           
 10525                           ;arp.c: 50: UARTTransmitText("]->[");
 10526  002A84  0EC0               	movlw	low STR_73
 10527  002A86  0100               	movlb	0	; () banked
 10528  002A88  6F98               	movwf	UARTTransmitText@str& (0+255),b
 10529  002A8A  0E7F               	movlw	high STR_73
 10530  002A8C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 10531  002A8E  ECD8  F026         	call	_UARTTransmitText	;wreg free
 10532                           
 10533                           ;arp.c: 51: UARTTransmitText(macToString(arp.targetMACAddress));
 10534  002A92  EE21  F06A         	lfsr	2,arp_handleNewPacket@arp+18
 10535  002A96  EE00  F07A         	lfsr	0,macToString@addr
 10536  002A9A  0E05               	movlw	5
 10537  002A9C                     u11351:
 10538  002A9C  CFDB FFEB          	movff	plusw2,plusw0
 10539  002AA0  06E8               	decf	wreg,f,c
 10540  002AA2  E2FC               	bc	u11351
 10541  002AA4  ECA5  F01D         	call	_macToString	;wreg free
 10542  002AA8  C07A  F098         	movff	?_macToString,UARTTransmitText@str
 10543  002AAC  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
 10544  002AB0  ECD8  F026         	call	_UARTTransmitText	;wreg free
 10545                           
 10546                           ;arp.c: 52: UARTTransmitText(", ");
 10547  002AB4  0E33               	movlw	low (STR_48+17)
 10548  002AB6  0100               	movlb	0	; () banked
 10549  002AB8  6F98               	movwf	UARTTransmitText@str& (0+255),b
 10550  002ABA  0E7E               	movlw	high (STR_48+17)
 10551  002ABC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 10552  002ABE  ECD8  F026         	call	_UARTTransmitText	;wreg free
 10553                           
 10554                           ;arp.c: 53: UARTTransmitText(ipAdressToString(arp.targetIPAddress));
 10555  002AC2  C170  F073         	movff	arp_handleNewPacket@arp+24,ipAdressToString@ip
 10556  002AC6  C171  F074         	movff	arp_handleNewPacket@arp+25,ipAdressToString@ip+1
 10557  002ACA  C172  F075         	movff	arp_handleNewPacket@arp+26,ipAdressToString@ip+2
 10558  002ACE  C173  F076         	movff	arp_handleNewPacket@arp+27,ipAdressToString@ip+3
 10559  002AD2  ECE7  F013         	call	_ipAdressToString	;wreg free
 10560  002AD6  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
 10561  002ADA  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
 10562  002ADE  ECD8  F026         	call	_UARTTransmitText	;wreg free
 10563                           
 10564                           ;arp.c: 54: UARTTransmitText("]");
 10565  002AE2  0EFB               	movlw	low (STR_19+1)
 10566  002AE4  0100               	movlb	0	; () banked
 10567  002AE6  6F98               	movwf	UARTTransmitText@str& (0+255),b
 10568  002AE8  0E7F               	movlw	high (STR_19+1)
 10569  002AEA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 10570  002AEC  ECD8  F026         	call	_UARTTransmitText	;wreg free
 10571                           
 10572                           ;arp.c: 55: if (arp.fIsProbe)
 10573  002AF0  0101               	movlb	1	; () banked
 10574  002AF2  A374               	btfss	(arp_handleNewPacket@arp+28)& (0+255),1,b
 10575  002AF4  D007               	goto	l934
 10576                           
 10577                           ; BSR set to: 1
 10578                           ;arp.c: 56: UARTTransmitText("[IsProbe]");
 10579  002AF6  0E6D               	movlw	low STR_76
 10580  002AF8  0100               	movlb	0	; () banked
 10581  002AFA  6F98               	movwf	UARTTransmitText@str& (0+255),b
 10582  002AFC  0E7F               	movlw	high STR_76
 10583  002AFE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 10584  002B00  ECD8  F026         	call	_UARTTransmitText	;wreg free
 10585  002B04                     l934:
 10586                           
 10587                           ;arp.c: 57: if (arp.fIsGratuitous)
 10588  002B04  0101               	movlb	1	; () banked
 10589  002B06  A174               	btfss	(arp_handleNewPacket@arp+28)& (0+255),0,b
 10590  002B08  D007               	goto	l935
 10591                           
 10592                           ; BSR set to: 1
 10593                           ;arp.c: 58: UARTTransmitText("[IsGratuitous]");
 10594  002B0A  0EEA               	movlw	low STR_77
 10595  002B0C  0100               	movlb	0	; () banked
 10596  002B0E  6F98               	movwf	UARTTransmitText@str& (0+255),b
 10597  002B10  0E7E               	movlw	high STR_77
 10598  002B12  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 10599  002B14  ECD8  F026         	call	_UARTTransmitText	;wreg free
 10600  002B18                     l935:
 10601                           
 10602                           ;arp.c: 60: arp_sendReply(arp);
 10603  002B18  EE21  F058         	lfsr	2,arp_handleNewPacket@arp
 10604  002B1C  EE01  F000         	lfsr	0,arp_sendReply@request
 10605  002B20  0E1F               	movlw	31
 10606  002B22                     u11381:
 10607  002B22  CFDB FFEB          	movff	plusw2,plusw0
 10608  002B26  06E8               	decf	wreg,f,c
 10609  002B28  E2FC               	bc	u11381
 10610  002B2A  ECC0  F018         	call	_arp_sendReply	;wreg free
 10611                           
 10612                           ;arp.c: 61: arp_setNewEntry(arp.senderMACAddress, arp.senderIPAddress, getMillis());
 10613  002B2E  EE21  F060         	lfsr	2,arp_handleNewPacket@arp+8
 10614  002B32  EE00  F09A         	lfsr	0,arp_setNewEntry@mac
 10615  002B36  0E05               	movlw	5
 10616  002B38                     u11391:
 10617  002B38  CFDB FFEB          	movff	plusw2,plusw0
 10618  002B3C  06E8               	decf	wreg,f,c
 10619  002B3E  E2FC               	bc	u11391
 10620  002B40  C166  F0A0         	movff	arp_handleNewPacket@arp+14,arp_setNewEntry@ip
 10621  002B44  C167  F0A1         	movff	arp_handleNewPacket@arp+15,arp_setNewEntry@ip+1
 10622  002B48  C168  F0A2         	movff	arp_handleNewPacket@arp+16,arp_setNewEntry@ip+2
 10623  002B4C  C169  F0A3         	movff	arp_handleNewPacket@arp+17,arp_setNewEntry@ip+3
 10624  002B50  EC63  F02B         	call	_getMillis	;wreg free
 10625  002B54  C060  F0A4         	movff	?_getMillis,arp_setNewEntry@timestamp
 10626  002B58  C061  F0A5         	movff	?_getMillis+1,arp_setNewEntry@timestamp+1
 10627  002B5C  C062  F0A6         	movff	?_getMillis+2,arp_setNewEntry@timestamp+2
 10628  002B60  C063  F0A7         	movff	?_getMillis+3,arp_setNewEntry@timestamp+3
 10629  002B64  EC4B  F017         	call	_arp_setNewEntry	;wreg free
 10630  002B68  0012               	return		;funcret
 10631  002B6A                     __end_of_arp_handleNewPacket:
 10632                           	opt stack 0
 10633                           tblptru	equ	0xFF8
 10634                           tblptrh	equ	0xFF7
 10635                           tblptrl	equ	0xFF6
 10636                           tablat	equ	0xFF5
 10637                           prodh	equ	0xFF4
 10638                           prodl	equ	0xFF3
 10639                           intcon	equ	0xFF2
 10640                           intcon3	equ	0xFF0
 10641                           indf0	equ	0xFEF
 10642                           postinc0	equ	0xFEE
 10643                           plusw0	equ	0xFEB
 10644                           fsr0h	equ	0xFEA
 10645                           fsr0l	equ	0xFE9
 10646                           wreg	equ	0xFE8
 10647                           indf1	equ	0xFE7
 10648                           postinc1	equ	0xFE6
 10649                           postdec1	equ	0xFE5
 10650                           plusw1	equ	0xFE3
 10651                           fsr1h	equ	0xFE2
 10652                           fsr1l	equ	0xFE1
 10653                           indf2	equ	0xFDF
 10654                           postinc2	equ	0xFDE
 10655                           postdec2	equ	0xFDD
 10656                           plusw2	equ	0xFDB
 10657                           fsr2h	equ	0xFDA
 10658                           fsr2l	equ	0xFD9
 10659                           status	equ	0xFD8
 10660                           
 10661 ;; *************** function _ethernetController_dropPacket *****************
 10662 ;; Defined at:
 10663 ;;		line 379 in file "src/enc424j600/ENC424J600.c"
 10664 ;; Parameters:    Size  Location     Type
 10665 ;;		None
 10666 ;; Auto vars:     Size  Location     Type
 10667 ;;		None
 10668 ;; Return value:  Size  Location     Type
 10669 ;;                  1    wreg      void 
 10670 ;; Registers used:
 10671 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10672 ;; Tracked objects:
 10673 ;;		On entry : 0/0
 10674 ;;		On exit  : 0/0
 10675 ;;		Unchanged: 0/0
 10676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10677 ;;      Params:         0       2       0       0       0       0       0       0       0
 10678 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10679 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10680 ;;      Totals:         0       2       0       0       0       0       0       0       0
 10681 ;;Total ram usage:        2 bytes
 10682 ;; Hardware stack levels used:    1
 10683 ;; Hardware stack levels required when called:    8
 10684 ;; This function calls:
 10685 ;;		_enc424j600_setRXTailPointer
 10686 ;;		_enc424j600_writeSingleByte
 10687 ;;		_ethernetController_getNextPacketPointer
 10688 ;; This function is called by:
 10689 ;;		_ethernet_rxGetNewFrame
 10690 ;;		_arp_handleNewPacket
 10691 ;;		_ipv4_handleNewPacket
 10692 ;; This function uses a non-reentrant model
 10693 ;;
 10694                           
 10695                           	psect	text29
 10696  00513C                     __ptext29:
 10697                           	opt stack 0
 10698  00513C                     _ethernetController_dropPacket:
 10699                           	opt stack 19
 10700                           
 10701                           ;ENC424J600.c: 381: if (ethernetController_getNextPacketPointer() == 0x3000) {
 10702                           
 10703                           ;incstack = 0
 10704  00513C  EC7B  F02B         	call	_ethernetController_getNextPacketPointer	;wreg free
 10705  005140  0E30               	movlw	48
 10706  005142  0100               	movlb	0	; () banked
 10707  005144  1963               	xorwf	(?_ethernetController_getNextPacketPointer+1)& (0+255),w,b
 10708  005146  1162               	iorwf	?_ethernetController_getNextPacketPointer& (0+255),w,b
 10709  005148  A4D8               	btfss	status,2,c
 10710  00514A  D007               	goto	l187
 10711                           
 10712                           ; BSR set to: 0
 10713                           ;ENC424J600.c: 382: enc424j600_setRXTailPointer(0x5FFF - 1);
 10714  00514C  0E5F               	movlw	95
 10715  00514E  6F6F               	movwf	(enc424j600_setRXTailPointer@addr+1)& (0+255),b
 10716  005150  0EFE               	movlw	254
 10717  005152  6F6E               	movwf	enc424j600_setRXTailPointer@addr& (0+255),b
 10718  005154  EC07  F02A         	call	_enc424j600_setRXTailPointer	;wreg free
 10719                           
 10720                           ;ENC424J600.c: 383: } else {
 10721  005158  D00B               	goto	l188
 10722  00515A                     l187:
 10723                           
 10724                           ;ENC424J600.c: 384: enc424j600_setRXTailPointer(ethernetController_getNextPacketPointer(
      +                          ) - 2);
 10725  00515A  EC7B  F02B         	call	_ethernetController_getNextPacketPointer	;wreg free
 10726  00515E  0EFE               	movlw	254
 10727  005160  0100               	movlb	0	; () banked
 10728  005162  2562               	addwf	?_ethernetController_getNextPacketPointer& (0+255),w,b
 10729  005164  6F6E               	movwf	enc424j600_setRXTailPointer@addr& (0+255),b
 10730  005166  0EFF               	movlw	255
 10731  005168  2163               	addwfc	(?_ethernetController_getNextPacketPointer+1)& (0+255),w,b
 10732  00516A  6F6F               	movwf	(enc424j600_setRXTailPointer@addr+1)& (0+255),b
 10733  00516C  EC07  F02A         	call	_enc424j600_setRXTailPointer	;wreg free
 10734  005170                     l188:
 10735                           
 10736                           ;ENC424J600.c: 385: }
 10737                           ;ENC424J600.c: 387: enc424j600_writeSingleByte(0b11001100);
 10738  005170  0ECC               	movlw	204
 10739  005172  EC28  F02B         	call	_enc424j600_writeSingleByte
 10740  005176  0012               	return		;funcret
 10741  005178                     __end_of_ethernetController_dropPacket:
 10742                           	opt stack 0
 10743                           tblptru	equ	0xFF8
 10744                           tblptrh	equ	0xFF7
 10745                           tblptrl	equ	0xFF6
 10746                           tablat	equ	0xFF5
 10747                           prodh	equ	0xFF4
 10748                           prodl	equ	0xFF3
 10749                           intcon	equ	0xFF2
 10750                           intcon3	equ	0xFF0
 10751                           indf0	equ	0xFEF
 10752                           postinc0	equ	0xFEE
 10753                           plusw0	equ	0xFEB
 10754                           fsr0h	equ	0xFEA
 10755                           fsr0l	equ	0xFE9
 10756                           wreg	equ	0xFE8
 10757                           indf1	equ	0xFE7
 10758                           postinc1	equ	0xFE6
 10759                           postdec1	equ	0xFE5
 10760                           plusw1	equ	0xFE3
 10761                           fsr1h	equ	0xFE2
 10762                           fsr1l	equ	0xFE1
 10763                           indf2	equ	0xFDF
 10764                           postinc2	equ	0xFDE
 10765                           postdec2	equ	0xFDD
 10766                           plusw2	equ	0xFDB
 10767                           fsr2h	equ	0xFDA
 10768                           fsr2l	equ	0xFD9
 10769                           status	equ	0xFD8
 10770                           
 10771 ;; *************** function _ethernetController_getNextPacketPointer *****************
 10772 ;; Defined at:
 10773 ;;		line 461 in file "src/enc424j600/ENC424J600.c"
 10774 ;; Parameters:    Size  Location     Type
 10775 ;;		None
 10776 ;; Auto vars:     Size  Location     Type
 10777 ;;		None
 10778 ;; Return value:  Size  Location     Type
 10779 ;;                  2    2[BANK0 ] unsigned int 
 10780 ;; Registers used:
 10781 ;;		cstack
 10782 ;; Tracked objects:
 10783 ;;		On entry : 0/0
 10784 ;;		On exit  : 0/0
 10785 ;;		Unchanged: 0/0
 10786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10787 ;;      Params:         0       2       0       0       0       0       0       0       0
 10788 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10789 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10790 ;;      Totals:         0       2       0       0       0       0       0       0       0
 10791 ;;Total ram usage:        2 bytes
 10792 ;; Hardware stack levels used:    1
 10793 ;; Hardware stack levels required when called:    5
 10794 ;; This function calls:
 10795 ;;		_enc424j600_getNextPacketPointer
 10796 ;; This function is called by:
 10797 ;;		_ethernetController_dropPacket
 10798 ;;		_ethernet_rxGetNewFrame
 10799 ;; This function uses a non-reentrant model
 10800 ;;
 10801                           
 10802                           	psect	text30
 10803  0056F6                     __ptext30:
 10804                           	opt stack 0
 10805  0056F6                     _ethernetController_getNextPacketPointer:
 10806                           	opt stack 21
 10807                           
 10808                           ;ENC424J600.c: 462: return enc424j600_getNextPacketPointer();
 10809                           
 10810                           ;incstack = 0
 10811  0056F6  EC95  F02B         	call	_enc424j600_getNextPacketPointer	;wreg free
 10812  0056FA  C060  F062         	movff	?_enc424j600_getNextPacketPointer,?_ethernetController_getNextPacketPointer
 10813  0056FE  C061  F063         	movff	?_enc424j600_getNextPacketPointer+1,?_ethernetController_getNextPacketPointer+1
 10814  005702  0012               	return	
 10815  005704                     __end_of_ethernetController_getNextPacketPointer:
 10816                           	opt stack 0
 10817                           tblptru	equ	0xFF8
 10818                           tblptrh	equ	0xFF7
 10819                           tblptrl	equ	0xFF6
 10820                           tablat	equ	0xFF5
 10821                           prodh	equ	0xFF4
 10822                           prodl	equ	0xFF3
 10823                           intcon	equ	0xFF2
 10824                           intcon3	equ	0xFF0
 10825                           indf0	equ	0xFEF
 10826                           postinc0	equ	0xFEE
 10827                           plusw0	equ	0xFEB
 10828                           fsr0h	equ	0xFEA
 10829                           fsr0l	equ	0xFE9
 10830                           wreg	equ	0xFE8
 10831                           indf1	equ	0xFE7
 10832                           postinc1	equ	0xFE6
 10833                           postdec1	equ	0xFE5
 10834                           plusw1	equ	0xFE3
 10835                           fsr1h	equ	0xFE2
 10836                           fsr1l	equ	0xFE1
 10837                           indf2	equ	0xFDF
 10838                           postinc2	equ	0xFDE
 10839                           postdec2	equ	0xFDD
 10840                           plusw2	equ	0xFDB
 10841                           fsr2h	equ	0xFDA
 10842                           fsr2l	equ	0xFD9
 10843                           status	equ	0xFD8
 10844                           
 10845 ;; *************** function _enc424j600_getNextPacketPointer *****************
 10846 ;; Defined at:
 10847 ;;		line 590 in file "src/enc424j600/ENC424J600.c"
 10848 ;; Parameters:    Size  Location     Type
 10849 ;;		None
 10850 ;; Auto vars:     Size  Location     Type
 10851 ;;		None
 10852 ;; Return value:  Size  Location     Type
 10853 ;;                  2    0[BANK0 ] unsigned int 
 10854 ;; Registers used:
 10855 ;;		None
 10856 ;; Tracked objects:
 10857 ;;		On entry : 0/0
 10858 ;;		On exit  : 0/0
 10859 ;;		Unchanged: 0/0
 10860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10861 ;;      Params:         0       2       0       0       0       0       0       0       0
 10862 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10863 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10864 ;;      Totals:         0       2       0       0       0       0       0       0       0
 10865 ;;Total ram usage:        2 bytes
 10866 ;; Hardware stack levels used:    1
 10867 ;; Hardware stack levels required when called:    4
 10868 ;; This function calls:
 10869 ;;		Nothing
 10870 ;; This function is called by:
 10871 ;;		_ethernetController_updateNextPacketPointer
 10872 ;;		_ethernetController_getNextPacketPointer
 10873 ;; This function uses a non-reentrant model
 10874 ;;
 10875                           
 10876                           	psect	text31
 10877  00572A                     __ptext31:
 10878                           	opt stack 0
 10879  00572A                     _enc424j600_getNextPacketPointer:
 10880                           	opt stack 21
 10881                           
 10882                           ;ENC424J600.c: 591: return nextPacketPointer;
 10883                           
 10884                           ;incstack = 0
 10885  00572A  C042  F060         	movff	_nextPacketPointer,?_enc424j600_getNextPacketPointer
 10886  00572E  C043  F061         	movff	_nextPacketPointer+1,?_enc424j600_getNextPacketPointer+1
 10887  005732  0012               	return		;funcret
 10888  005734                     __end_of_enc424j600_getNextPacketPointer:
 10889                           	opt stack 0
 10890                           tblptru	equ	0xFF8
 10891                           tblptrh	equ	0xFF7
 10892                           tblptrl	equ	0xFF6
 10893                           tablat	equ	0xFF5
 10894                           prodh	equ	0xFF4
 10895                           prodl	equ	0xFF3
 10896                           intcon	equ	0xFF2
 10897                           intcon3	equ	0xFF0
 10898                           indf0	equ	0xFEF
 10899                           postinc0	equ	0xFEE
 10900                           plusw0	equ	0xFEB
 10901                           fsr0h	equ	0xFEA
 10902                           fsr0l	equ	0xFE9
 10903                           wreg	equ	0xFE8
 10904                           indf1	equ	0xFE7
 10905                           postinc1	equ	0xFE6
 10906                           postdec1	equ	0xFE5
 10907                           plusw1	equ	0xFE3
 10908                           fsr1h	equ	0xFE2
 10909                           fsr1l	equ	0xFE1
 10910                           indf2	equ	0xFDF
 10911                           postinc2	equ	0xFDE
 10912                           postdec2	equ	0xFDD
 10913                           plusw2	equ	0xFDB
 10914                           fsr2h	equ	0xFDA
 10915                           fsr2l	equ	0xFD9
 10916                           status	equ	0xFD8
 10917                           
 10918 ;; *************** function _arp_sendReply *****************
 10919 ;; Defined at:
 10920 ;;		line 203 in file "src/stack/protocols/arp.c"
 10921 ;; Parameters:    Size  Location     Type
 10922 ;;  request        32    0[BANK1 ] struct arp_message
 10923 ;; Auto vars:     Size  Location     Type
 10924 ;;  reply          32   56[BANK1 ] struct arp_message
 10925 ;;  targetMAC       6   38[BANK1 ] struct macaddress
 10926 ;;  senderMAC       6   32[BANK1 ] struct macaddress
 10927 ;;  myIP            4   52[BANK1 ] struct ipv4_address
 10928 ;;  targetIP        4   48[BANK1 ] struct ipv4_address
 10929 ;;  senderIP        4   44[BANK1 ] struct ipv4_address
 10930 ;; Return value:  Size  Location     Type
 10931 ;;                  1    wreg      void 
 10932 ;; Registers used:
 10933 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10934 ;; Tracked objects:
 10935 ;;		On entry : 0/0
 10936 ;;		On exit  : 0/0
 10937 ;;		Unchanged: 0/0
 10938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10939 ;;      Params:         0       0      32       0       0       0       0       0       0
 10940 ;;      Locals:         0       0      56       0       0       0       0       0       0
 10941 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10942 ;;      Totals:         0       0      88       0       0       0       0       0       0
 10943 ;;Total ram usage:       88 bytes
 10944 ;; Hardware stack levels used:    1
 10945 ;; Hardware stack levels required when called:   10
 10946 ;; This function calls:
 10947 ;;		_UARTTransmitText
 10948 ;;		_arp_send
 10949 ;;		_ethernetController_getMacAddress
 10950 ;;		_ipAdressToString
 10951 ;;		_ipv4_cmp
 10952 ;;		_ipv4_getIPSourceAddress
 10953 ;;		_macToString
 10954 ;; This function is called by:
 10955 ;;		_arp_handleNewPacket
 10956 ;; This function uses a non-reentrant model
 10957 ;;
 10958                           
 10959                           	psect	text32
 10960  003180                     __ptext32:
 10961                           	opt stack 0
 10962  003180                     _arp_sendReply:
 10963                           	opt stack 17
 10964                           
 10965                           ;arp.c: 204: if (request.operation != ARP_REQUEST)
 10966                           
 10967                           ;incstack = 0
 10968  003180  0101               	movlb	1	; () banked
 10969  003182  0506               	decf	(arp_sendReply@request+6)& (0+255),w,b
 10970  003184  1107               	iorwf	(arp_sendReply@request+7)& (0+255),w,b
 10971  003186  A4D8               	btfss	status,2,c
 10972  003188  0012               	return	
 10973                           
 10974                           ; BSR set to: 1
 10975                           ;arp.c: 207: ipv4_address_t myIP = ipv4_getIPSourceAddress();
 10976                           
 10977                           ; BSR set to: 1
 10978                           
 10979                           ; BSR set to: 1
 10980                           ;arp.c: 205: return;
 10981  00318A  EC48  F02B         	call	_ipv4_getIPSourceAddress	;wreg free
 10982  00318E  C060  F134         	movff	?_ipv4_getIPSourceAddress,arp_sendReply@myIP
 10983  003192  C061  F135         	movff	?_ipv4_getIPSourceAddress+1,arp_sendReply@myIP+1
 10984  003196  C062  F136         	movff	?_ipv4_getIPSourceAddress+2,arp_sendReply@myIP+2
 10985  00319A  C063  F137         	movff	?_ipv4_getIPSourceAddress+3,arp_sendReply@myIP+3
 10986                           
 10987                           ;arp.c: 208: if (!(ipv4_cmp(&request.targetIPAddress, &myIP)))
 10988  00319E  0E18               	movlw	low (arp_sendReply@request+24)
 10989  0031A0  0100               	movlb	0	; () banked
 10990  0031A2  6F60               	movwf	ipv4_cmp@a& (0+255),b
 10991  0031A4  0E01               	movlw	high (arp_sendReply@request+24)
 10992  0031A6  6F61               	movwf	(ipv4_cmp@a+1)& (0+255),b
 10993  0031A8  0E34               	movlw	low arp_sendReply@myIP
 10994  0031AA  6F62               	movwf	ipv4_cmp@b& (0+255),b
 10995  0031AC  0E01               	movlw	high arp_sendReply@myIP
 10996  0031AE  6F63               	movwf	(ipv4_cmp@b+1)& (0+255),b
 10997  0031B0  EC7D  F028         	call	_ipv4_cmp	;wreg free
 10998  0031B4  0100               	movlb	0	; () banked
 10999  0031B6  A0D8               	btfss	status,0,c
 11000  0031B8  0012               	return	
 11001                           
 11002                           ; BSR set to: 0
 11003                           ;arp.c: 211: arp_message_t reply;
 11004                           ;arp.c: 212: ipv4_address_t senderIP;
 11005                           ;arp.c: 213: ipv4_address_t targetIP;
 11006                           ;arp.c: 214: macaddress_t senderMAC;
 11007                           ;arp.c: 215: macaddress_t targetMAC;
 11008                           ;arp.c: 217: senderMAC = ethernetController_getMacAddress();
 11009                           
 11010                           ; BSR set to: 0
 11011                           
 11012                           ; BSR set to: 0
 11013                           ;arp.c: 209: return;
 11014  0031BA  EC0D  F025         	call	_ethernetController_getMacAddress	;wreg free
 11015  0031BE  EE21  F020         	lfsr	2,arp_sendReply@senderMAC
 11016  0031C2  0E05               	movlw	5
 11017  0031C4                     u10921:
 11018  0031C4  CFEB FFDB          	movff	plusw0,plusw2
 11019  0031C8  06E8               	decf	wreg,f,c
 11020  0031CA  E2FC               	bc	u10921
 11021                           
 11022                           ;arp.c: 218: targetMAC = request.senderMACAddress;
 11023  0031CC  EE21  F008         	lfsr	2,arp_sendReply@request+8
 11024  0031D0  EE11  F026         	lfsr	1,arp_sendReply@targetMAC
 11025  0031D4  0E05               	movlw	5
 11026  0031D6                     u10931:
 11027  0031D6  CFDB FFE3          	movff	plusw2,plusw1
 11028  0031DA  06E8               	decf	wreg,f,c
 11029  0031DC  E2FC               	bc	u10931
 11030                           
 11031                           ;arp.c: 219: senderIP = ipv4_getIPSourceAddress();
 11032  0031DE  EC48  F02B         	call	_ipv4_getIPSourceAddress	;wreg free
 11033  0031E2  C060  F12C         	movff	?_ipv4_getIPSourceAddress,arp_sendReply@senderIP
 11034  0031E6  C061  F12D         	movff	?_ipv4_getIPSourceAddress+1,arp_sendReply@senderIP+1
 11035  0031EA  C062  F12E         	movff	?_ipv4_getIPSourceAddress+2,arp_sendReply@senderIP+2
 11036  0031EE  C063  F12F         	movff	?_ipv4_getIPSourceAddress+3,arp_sendReply@senderIP+3
 11037                           
 11038                           ;arp.c: 220: targetIP = request.senderIPAddress;
 11039  0031F2  C10E  F130         	movff	arp_sendReply@request+14,arp_sendReply@targetIP
 11040  0031F6  C10F  F131         	movff	arp_sendReply@request+15,arp_sendReply@targetIP+1
 11041  0031FA  C110  F132         	movff	arp_sendReply@request+16,arp_sendReply@targetIP+2
 11042  0031FE  C111  F133         	movff	arp_sendReply@request+17,arp_sendReply@targetIP+3
 11043                           
 11044                           ;arp.c: 222: reply.hlen = 6u;
 11045  003202  0E06               	movlw	6
 11046  003204  0101               	movlb	1	; () banked
 11047  003206  6F3C               	movwf	(arp_sendReply@reply+4)& (0+255),b
 11048                           
 11049                           ; BSR set to: 1
 11050                           ;arp.c: 223: reply.plen = 4u;
 11051  003208  0E04               	movlw	4
 11052  00320A  6F3D               	movwf	(arp_sendReply@reply+5)& (0+255),b
 11053                           
 11054                           ; BSR set to: 1
 11055                           ;arp.c: 224: reply.htype = ARP_HTYPE_ETHERNET;
 11056  00320C  0E00               	movlw	0
 11057  00320E  6F39               	movwf	(arp_sendReply@reply+1)& (0+255),b
 11058  003210  0E01               	movlw	1
 11059  003212  6F38               	movwf	arp_sendReply@reply& (0+255),b
 11060                           
 11061                           ; BSR set to: 1
 11062                           ;arp.c: 225: reply.ptype = ARP_PTYPE_IPv4;
 11063  003214  0E08               	movlw	8
 11064  003216  6F3B               	movwf	(arp_sendReply@reply+3)& (0+255),b
 11065  003218  0E00               	movlw	0
 11066  00321A  6F3A               	movwf	(arp_sendReply@reply+2)& (0+255),b
 11067                           
 11068                           ; BSR set to: 1
 11069                           ;arp.c: 226: reply.operation = ARP_REPLY;
 11070  00321C  0E00               	movlw	0
 11071  00321E  6F3F               	movwf	(arp_sendReply@reply+7)& (0+255),b
 11072  003220  0E02               	movlw	2
 11073  003222  6F3E               	movwf	(arp_sendReply@reply+6)& (0+255),b
 11074                           
 11075                           ; BSR set to: 1
 11076                           ;arp.c: 227: reply.senderIPAddress = senderIP;
 11077  003224  C12C  F146         	movff	arp_sendReply@senderIP,arp_sendReply@reply+14
 11078  003228  C12D  F147         	movff	arp_sendReply@senderIP+1,arp_sendReply@reply+15
 11079  00322C  C12E  F148         	movff	arp_sendReply@senderIP+2,arp_sendReply@reply+16
 11080  003230  C12F  F149         	movff	arp_sendReply@senderIP+3,arp_sendReply@reply+17
 11081                           
 11082                           ; BSR set to: 1
 11083                           ;arp.c: 228: reply.senderMACAddress = senderMAC;
 11084  003234  EE21  F020         	lfsr	2,arp_sendReply@senderMAC
 11085  003238  EE11  F040         	lfsr	1,arp_sendReply@reply+8
 11086  00323C  0E05               	movlw	5
 11087  00323E                     u10941:
 11088  00323E  CFDB FFE3          	movff	plusw2,plusw1
 11089  003242  06E8               	decf	wreg,f,c
 11090  003244  E2FC               	bc	u10941
 11091                           
 11092                           ; BSR set to: 1
 11093                           ;arp.c: 229: reply.targetIPAddress = targetIP;
 11094  003246  C130  F150         	movff	arp_sendReply@targetIP,arp_sendReply@reply+24
 11095  00324A  C131  F151         	movff	arp_sendReply@targetIP+1,arp_sendReply@reply+25
 11096  00324E  C132  F152         	movff	arp_sendReply@targetIP+2,arp_sendReply@reply+26
 11097  003252  C133  F153         	movff	arp_sendReply@targetIP+3,arp_sendReply@reply+27
 11098                           
 11099                           ; BSR set to: 1
 11100                           ;arp.c: 230: reply.targetMACAddress = targetMAC;
 11101  003256  EE21  F026         	lfsr	2,arp_sendReply@targetMAC
 11102  00325A  EE11  F04A         	lfsr	1,arp_sendReply@reply+18
 11103  00325E  0E05               	movlw	5
 11104  003260                     u10951:
 11105  003260  CFDB FFE3          	movff	plusw2,plusw1
 11106  003264  06E8               	decf	wreg,f,c
 11107  003266  E2FC               	bc	u10951
 11108                           
 11109                           ; BSR set to: 1
 11110                           ;arp.c: 232: arp_send(reply);
 11111  003268  EE21  F038         	lfsr	2,arp_sendReply@reply
 11112  00326C  EE00  F0A7         	lfsr	0,arp_send@arp
 11113  003270  0E1F               	movlw	31
 11114  003272                     u10961:
 11115  003272  CFDB FFEB          	movff	plusw2,plusw0
 11116  003276  06E8               	decf	wreg,f,c
 11117  003278  E2FC               	bc	u10961
 11118  00327A  EC4F  F00F         	call	_arp_send	;wreg free
 11119                           
 11120                           ;arp.c: 234: UARTTransmitText("[Reply sent to ");
 11121  00327E  0ECA               	movlw	low STR_78
 11122  003280  0100               	movlb	0	; () banked
 11123  003282  6F98               	movwf	UARTTransmitText@str& (0+255),b
 11124  003284  0E7E               	movlw	high STR_78
 11125  003286  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 11126  003288  ECD8  F026         	call	_UARTTransmitText	;wreg free
 11127                           
 11128                           ;arp.c: 235: UARTTransmitText(macToString(reply.targetMACAddress));
 11129  00328C  EE21  F04A         	lfsr	2,arp_sendReply@reply+18
 11130  003290  EE00  F07A         	lfsr	0,macToString@addr
 11131  003294  0E05               	movlw	5
 11132  003296                     u10971:
 11133  003296  CFDB FFEB          	movff	plusw2,plusw0
 11134  00329A  06E8               	decf	wreg,f,c
 11135  00329C  E2FC               	bc	u10971
 11136  00329E  ECA5  F01D         	call	_macToString	;wreg free
 11137  0032A2  C07A  F098         	movff	?_macToString,UARTTransmitText@str
 11138  0032A6  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
 11139  0032AA  ECD8  F026         	call	_UARTTransmitText	;wreg free
 11140                           
 11141                           ;arp.c: 236: UARTTransmitText(", ");
 11142  0032AE  0E33               	movlw	low (STR_48+17)
 11143  0032B0  0100               	movlb	0	; () banked
 11144  0032B2  6F98               	movwf	UARTTransmitText@str& (0+255),b
 11145  0032B4  0E7E               	movlw	high (STR_48+17)
 11146  0032B6  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 11147  0032B8  ECD8  F026         	call	_UARTTransmitText	;wreg free
 11148                           
 11149                           ;arp.c: 237: UARTTransmitText(ipAdressToString(reply.targetIPAddress));
 11150  0032BC  C150  F073         	movff	arp_sendReply@reply+24,ipAdressToString@ip
 11151  0032C0  C151  F074         	movff	arp_sendReply@reply+25,ipAdressToString@ip+1
 11152  0032C4  C152  F075         	movff	arp_sendReply@reply+26,ipAdressToString@ip+2
 11153  0032C8  C153  F076         	movff	arp_sendReply@reply+27,ipAdressToString@ip+3
 11154  0032CC  ECE7  F013         	call	_ipAdressToString	;wreg free
 11155  0032D0  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
 11156  0032D4  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
 11157  0032D8  ECD8  F026         	call	_UARTTransmitText	;wreg free
 11158                           
 11159                           ;arp.c: 238: UARTTransmitText("]");
 11160  0032DC  0EFB               	movlw	low (STR_19+1)
 11161  0032DE  0100               	movlb	0	; () banked
 11162  0032E0  6F98               	movwf	UARTTransmitText@str& (0+255),b
 11163  0032E2  0E7F               	movlw	high (STR_19+1)
 11164  0032E4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 11165  0032E6  ECD8  F026         	call	_UARTTransmitText	;wreg free
 11166  0032EA  0012               	return		;funcret
 11167  0032EC                     __end_of_arp_sendReply:
 11168                           	opt stack 0
 11169                           tblptru	equ	0xFF8
 11170                           tblptrh	equ	0xFF7
 11171                           tblptrl	equ	0xFF6
 11172                           tablat	equ	0xFF5
 11173                           prodh	equ	0xFF4
 11174                           prodl	equ	0xFF3
 11175                           intcon	equ	0xFF2
 11176                           intcon3	equ	0xFF0
 11177                           indf0	equ	0xFEF
 11178                           postinc0	equ	0xFEE
 11179                           plusw0	equ	0xFEB
 11180                           fsr0h	equ	0xFEA
 11181                           fsr0l	equ	0xFE9
 11182                           wreg	equ	0xFE8
 11183                           indf1	equ	0xFE7
 11184                           postinc1	equ	0xFE6
 11185                           postdec1	equ	0xFE5
 11186                           plusw1	equ	0xFE3
 11187                           fsr1h	equ	0xFE2
 11188                           fsr1l	equ	0xFE1
 11189                           indf2	equ	0xFDF
 11190                           postinc2	equ	0xFDE
 11191                           postdec2	equ	0xFDD
 11192                           plusw2	equ	0xFDB
 11193                           fsr2h	equ	0xFDA
 11194                           fsr2l	equ	0xFD9
 11195                           status	equ	0xFD8
 11196                           
 11197 ;; *************** function _ipv4_getIPSourceAddress *****************
 11198 ;; Defined at:
 11199 ;;		line 241 in file "src/stack/protocols/ipv4.c"
 11200 ;; Parameters:    Size  Location     Type
 11201 ;;		None
 11202 ;; Auto vars:     Size  Location     Type
 11203 ;;		None
 11204 ;; Return value:  Size  Location     Type
 11205 ;;                  4    0[BANK0 ] struct ipv4_address
 11206 ;; Registers used:
 11207 ;;		None
 11208 ;; Tracked objects:
 11209 ;;		On entry : 0/0
 11210 ;;		On exit  : 0/0
 11211 ;;		Unchanged: 0/0
 11212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11213 ;;      Params:         0       4       0       0       0       0       0       0       0
 11214 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11215 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11216 ;;      Totals:         0       4       0       0       0       0       0       0       0
 11217 ;;Total ram usage:        4 bytes
 11218 ;; Hardware stack levels used:    1
 11219 ;; Hardware stack levels required when called:    4
 11220 ;; This function calls:
 11221 ;;		Nothing
 11222 ;; This function is called by:
 11223 ;;		_main
 11224 ;;		_arp_sendReply
 11225 ;; This function uses a non-reentrant model
 11226 ;;
 11227                           
 11228                           	psect	text33
 11229  005690                     __ptext33:
 11230                           	opt stack 0
 11231  005690                     _ipv4_getIPSourceAddress:
 11232                           	opt stack 26
 11233                           
 11234                           ;ipv4.c: 242: return ipSource;
 11235                           
 11236                           ;incstack = 0
 11237  005690  C1D2  F060         	movff	_ipSource,?_ipv4_getIPSourceAddress
 11238  005694  C1D3  F061         	movff	_ipSource+1,?_ipv4_getIPSourceAddress+1
 11239  005698  C1D4  F062         	movff	_ipSource+2,?_ipv4_getIPSourceAddress+2
 11240  00569C  C1D5  F063         	movff	_ipSource+3,?_ipv4_getIPSourceAddress+3
 11241  0056A0  0012               	return		;funcret
 11242  0056A2                     __end_of_ipv4_getIPSourceAddress:
 11243                           	opt stack 0
 11244                           tblptru	equ	0xFF8
 11245                           tblptrh	equ	0xFF7
 11246                           tblptrl	equ	0xFF6
 11247                           tablat	equ	0xFF5
 11248                           prodh	equ	0xFF4
 11249                           prodl	equ	0xFF3
 11250                           intcon	equ	0xFF2
 11251                           intcon3	equ	0xFF0
 11252                           indf0	equ	0xFEF
 11253                           postinc0	equ	0xFEE
 11254                           plusw0	equ	0xFEB
 11255                           fsr0h	equ	0xFEA
 11256                           fsr0l	equ	0xFE9
 11257                           wreg	equ	0xFE8
 11258                           indf1	equ	0xFE7
 11259                           postinc1	equ	0xFE6
 11260                           postdec1	equ	0xFE5
 11261                           plusw1	equ	0xFE3
 11262                           fsr1h	equ	0xFE2
 11263                           fsr1l	equ	0xFE1
 11264                           indf2	equ	0xFDF
 11265                           postinc2	equ	0xFDE
 11266                           postdec2	equ	0xFDD
 11267                           plusw2	equ	0xFDB
 11268                           fsr2h	equ	0xFDA
 11269                           fsr2l	equ	0xFD9
 11270                           status	equ	0xFD8
 11271                           
 11272 ;; *************** function _arp_parseFromRXBuffer *****************
 11273 ;; Defined at:
 11274 ;;		line 64 in file "src/stack/protocols/arp.c"
 11275 ;; Parameters:    Size  Location     Type
 11276 ;;  frame           2   20[BANK0 ] PTR struct ethernetFrame
 11277 ;;		 -> stack(123), 
 11278 ;; Auto vars:     Size  Location     Type
 11279 ;;  i               1   58[BANK0 ] unsigned char 
 11280 ;;  i               1   57[BANK0 ] unsigned char 
 11281 ;;  i               1   56[BANK0 ] unsigned char 
 11282 ;;  i               1   55[BANK0 ] unsigned char 
 11283 ;;  arp            32   61[BANK0 ] struct arp_message
 11284 ;;  offset          2   59[BANK0 ] const unsigned int 
 11285 ;; Return value:  Size  Location     Type
 11286 ;;                  32   20[BANK0 ] struct arp_message
 11287 ;; Registers used:
 11288 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11289 ;; Tracked objects:
 11290 ;;		On entry : 0/0
 11291 ;;		On exit  : 0/0
 11292 ;;		Unchanged: 0/0
 11293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11294 ;;      Params:         0      32       0       0       0       0       0       0       0
 11295 ;;      Locals:         0      38       0       0       0       0       0       0       0
 11296 ;;      Temps:          0       3       0       0       0       0       0       0       0
 11297 ;;      Totals:         0      73       0       0       0       0       0       0       0
 11298 ;;Total ram usage:       73 bytes
 11299 ;; Hardware stack levels used:    1
 11300 ;; Hardware stack levels required when called:    8
 11301 ;; This function calls:
 11302 ;;		_ethernetController_streamFromRXBuffer
 11303 ;;		_ipv4_cmp
 11304 ;;		_ipv4_isAllZero
 11305 ;;		_mac_cmp
 11306 ;;		_mac_isAllZero
 11307 ;; This function is called by:
 11308 ;;		_arp_handleNewPacket
 11309 ;; This function uses a non-reentrant model
 11310 ;;
 11311                           
 11312                           	psect	text34
 11313  000F2C                     __ptext34:
 11314                           	opt stack 0
 11315  000F2C                     _arp_parseFromRXBuffer:
 11316                           	opt stack 19
 11317                           
 11318                           ;arp.c: 65: arp_message_t arp;
 11319                           ;arp.c: 66: uint16_t const offset = 22;
 11320                           
 11321                           ;incstack = 0
 11322  000F2C  0E00               	movlw	0
 11323  000F2E  0100               	movlb	0	; () banked
 11324  000F30  6F9C               	movwf	(arp_parseFromRXBuffer@offset+1)& (0+255),b
 11325  000F32  0E16               	movlw	22
 11326  000F34  6F9B               	movwf	arp_parseFromRXBuffer@offset& (0+255),b
 11327                           
 11328                           ; BSR set to: 0
 11329                           ;arp.c: 68: ethernetController_streamFromRXBuffer(0, frame->memory.start + offset);
 11330  000F36  EE20 F010          	lfsr	2,16
 11331  000F3A  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 11332  000F3C  26D9               	addwf	fsr2l,f,c
 11333  000F3E  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 11334  000F40  22DA               	addwfc	fsr2h,f,c
 11335  000F42  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 11336  000F46  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 11337  000F4A  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 11338  000F4C  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 11339  000F4E  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 11340  000F50  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 11341  000F52  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 11342  000F54  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 11343  000F56  0E00               	movlw	0
 11344  000F58  EC52  F026         	call	_ethernetController_streamFromRXBuffer
 11345                           
 11346                           ;arp.c: 71: arp.htype = (ethernetController_streamFromRXBuffer(1, frame->memory.start + 
      +                          offset) << 8);
 11347  000F5C  0100               	movlb	0	; () banked
 11348  000F5E  EE20 F010          	lfsr	2,16
 11349  000F62  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 11350  000F64  26D9               	addwf	fsr2l,f,c
 11351  000F66  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 11352  000F68  22DA               	addwfc	fsr2h,f,c
 11353  000F6A  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 11354  000F6E  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 11355  000F72  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 11356  000F74  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 11357  000F76  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 11358  000F78  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 11359  000F7A  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 11360  000F7C  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 11361  000F7E  0E01               	movlw	1
 11362  000F80  EC52  F026         	call	_ethernetController_streamFromRXBuffer
 11363  000F84  0100               	movlb	0	; () banked
 11364  000F86  6F9E               	movwf	(arp_parseFromRXBuffer@arp+1)& (0+255),b
 11365  000F88  6B9D               	clrf	arp_parseFromRXBuffer@arp& (0+255),b
 11366                           
 11367                           ; BSR set to: 0
 11368                           ;arp.c: 72: arp.htype |= ethernetController_streamFromRXBuffer(1, frame->memory.start + 
      +                          offset);
 11369  000F8A  EE20 F010          	lfsr	2,16
 11370  000F8E  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 11371  000F90  26D9               	addwf	fsr2l,f,c
 11372  000F92  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 11373  000F94  22DA               	addwfc	fsr2h,f,c
 11374  000F96  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 11375  000F9A  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 11376  000F9E  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 11377  000FA0  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 11378  000FA2  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 11379  000FA4  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 11380  000FA6  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 11381  000FA8  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 11382  000FAA  0E01               	movlw	1
 11383  000FAC  EC52  F026         	call	_ethernetController_streamFromRXBuffer
 11384  000FB0  0100               	movlb	0	; () banked
 11385  000FB2  6F96               	movwf	(??_arp_parseFromRXBuffer+2)& (0+255),b
 11386  000FB4  5196               	movf	(??_arp_parseFromRXBuffer+2)& (0+255),w,b
 11387  000FB6  139D               	iorwf	arp_parseFromRXBuffer@arp& (0+255),f,b
 11388                           
 11389                           ; BSR set to: 0
 11390                           ;arp.c: 74: arp.ptype = (ethernetController_streamFromRXBuffer(1, frame->memory.start + 
      +                          offset) << 8);
 11391  000FB8  EE20 F010          	lfsr	2,16
 11392  000FBC  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 11393  000FBE  26D9               	addwf	fsr2l,f,c
 11394  000FC0  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 11395  000FC2  22DA               	addwfc	fsr2h,f,c
 11396  000FC4  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 11397  000FC8  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 11398  000FCC  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 11399  000FCE  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 11400  000FD0  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 11401  000FD2  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 11402  000FD4  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 11403  000FD6  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 11404  000FD8  0E01               	movlw	1
 11405  000FDA  EC52  F026         	call	_ethernetController_streamFromRXBuffer
 11406  000FDE  0100               	movlb	0	; () banked
 11407  000FE0  6FA0               	movwf	(arp_parseFromRXBuffer@arp+3)& (0+255),b
 11408  000FE2  6B9F               	clrf	(arp_parseFromRXBuffer@arp+2)& (0+255),b
 11409                           
 11410                           ; BSR set to: 0
 11411                           ;arp.c: 75: arp.ptype |= ethernetController_streamFromRXBuffer(1, frame->memory.start + 
      +                          offset);
 11412  000FE4  EE20 F010          	lfsr	2,16
 11413  000FE8  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 11414  000FEA  26D9               	addwf	fsr2l,f,c
 11415  000FEC  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 11416  000FEE  22DA               	addwfc	fsr2h,f,c
 11417  000FF0  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 11418  000FF4  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 11419  000FF8  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 11420  000FFA  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 11421  000FFC  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 11422  000FFE  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 11423  001000  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 11424  001002  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 11425  001004  0E01               	movlw	1
 11426  001006  EC52  F026         	call	_ethernetController_streamFromRXBuffer
 11427  00100A  0100               	movlb	0	; () banked
 11428  00100C  6F96               	movwf	(??_arp_parseFromRXBuffer+2)& (0+255),b
 11429  00100E  5196               	movf	(??_arp_parseFromRXBuffer+2)& (0+255),w,b
 11430  001010  139F               	iorwf	(arp_parseFromRXBuffer@arp+2)& (0+255),f,b
 11431                           
 11432                           ; BSR set to: 0
 11433                           ;arp.c: 77: arp.hlen = ethernetController_streamFromRXBuffer(1, frame->memory.start + of
      +                          fset);
 11434  001012  EE20 F010          	lfsr	2,16
 11435  001016  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 11436  001018  26D9               	addwf	fsr2l,f,c
 11437  00101A  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 11438  00101C  22DA               	addwfc	fsr2h,f,c
 11439  00101E  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 11440  001022  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 11441  001026  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 11442  001028  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 11443  00102A  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 11444  00102C  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 11445  00102E  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 11446  001030  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 11447  001032  0E01               	movlw	1
 11448  001034  EC52  F026         	call	_ethernetController_streamFromRXBuffer
 11449  001038  0100               	movlb	0	; () banked
 11450  00103A  6FA1               	movwf	(arp_parseFromRXBuffer@arp+4)& (0+255),b
 11451                           
 11452                           ; BSR set to: 0
 11453                           ;arp.c: 78: arp.plen = ethernetController_streamFromRXBuffer(1, frame->memory.start + of
      +                          fset);
 11454  00103C  EE20 F010          	lfsr	2,16
 11455  001040  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 11456  001042  26D9               	addwf	fsr2l,f,c
 11457  001044  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 11458  001046  22DA               	addwfc	fsr2h,f,c
 11459  001048  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 11460  00104C  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 11461  001050  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 11462  001052  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 11463  001054  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 11464  001056  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 11465  001058  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 11466  00105A  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 11467  00105C  0E01               	movlw	1
 11468  00105E  EC52  F026         	call	_ethernetController_streamFromRXBuffer
 11469  001062  0100               	movlb	0	; () banked
 11470  001064  6FA2               	movwf	(arp_parseFromRXBuffer@arp+5)& (0+255),b
 11471                           
 11472                           ; BSR set to: 0
 11473                           ;arp.c: 80: arp.operation = (ethernetController_streamFromRXBuffer(1, frame->memory.star
      +                          t + offset) << 8);
 11474  001066  EE20 F010          	lfsr	2,16
 11475  00106A  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 11476  00106C  26D9               	addwf	fsr2l,f,c
 11477  00106E  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 11478  001070  22DA               	addwfc	fsr2h,f,c
 11479  001072  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 11480  001076  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 11481  00107A  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 11482  00107C  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 11483  00107E  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 11484  001080  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 11485  001082  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 11486  001084  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 11487  001086  0E01               	movlw	1
 11488  001088  EC52  F026         	call	_ethernetController_streamFromRXBuffer
 11489  00108C  0100               	movlb	0	; () banked
 11490  00108E  6FA4               	movwf	(arp_parseFromRXBuffer@arp+7)& (0+255),b
 11491  001090  6BA3               	clrf	(arp_parseFromRXBuffer@arp+6)& (0+255),b
 11492                           
 11493                           ; BSR set to: 0
 11494                           ;arp.c: 81: arp.operation |= ethernetController_streamFromRXBuffer(1, frame->memory.star
      +                          t + offset);
 11495  001092  EE20 F010          	lfsr	2,16
 11496  001096  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 11497  001098  26D9               	addwf	fsr2l,f,c
 11498  00109A  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 11499  00109C  22DA               	addwfc	fsr2h,f,c
 11500  00109E  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 11501  0010A2  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 11502  0010A6  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 11503  0010A8  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 11504  0010AA  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 11505  0010AC  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 11506  0010AE  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 11507  0010B0  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 11508  0010B2  0E01               	movlw	1
 11509  0010B4  EC52  F026         	call	_ethernetController_streamFromRXBuffer
 11510  0010B8  0100               	movlb	0	; () banked
 11511  0010BA  6F96               	movwf	(??_arp_parseFromRXBuffer+2)& (0+255),b
 11512  0010BC  5196               	movf	(??_arp_parseFromRXBuffer+2)& (0+255),w,b
 11513  0010BE  13A3               	iorwf	(arp_parseFromRXBuffer@arp+6)& (0+255),f,b
 11514                           
 11515                           ; BSR set to: 0
 11516                           ;arp.c: 84: for (uint8_t i = 0; i < arp.hlen; i++)
 11517  0010C0  0E00               	movlw	0
 11518  0010C2  6F97               	movwf	arp_parseFromRXBuffer@i& (0+255),b
 11519  0010C4  D024               	goto	l938
 11520  0010C6                     
 11521                           ; BSR set to: 0
 11522                           ;arp.c: 85: arp.senderMACAddress.address[i] = ethernetController_streamFromRXBuffer(1, f
      +                          rame->memory.start + offset);
 11523                           
 11524                           ; BSR set to: 0
 11525  0010C6  EE20 F010          	lfsr	2,16
 11526  0010CA  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 11527  0010CC  26D9               	addwf	fsr2l,f,c
 11528  0010CE  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 11529  0010D0  22DA               	addwfc	fsr2h,f,c
 11530  0010D2  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 11531  0010D6  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 11532  0010DA  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 11533  0010DC  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 11534  0010DE  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 11535  0010E0  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 11536  0010E2  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 11537  0010E4  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 11538  0010E6  0E01               	movlw	1
 11539  0010E8  EC52  F026         	call	_ethernetController_streamFromRXBuffer
 11540  0010EC  0100               	movlb	0	; () banked
 11541  0010EE  6F96               	movwf	(??_arp_parseFromRXBuffer+2)& (0+255),b
 11542  0010F0  5197               	movf	arp_parseFromRXBuffer@i& (0+255),w,b
 11543  0010F2  0D01               	mullw	1
 11544  0010F4  0E08               	movlw	8
 11545  0010F6  26F3               	addwf	prodl,f,c
 11546  0010F8  0E00               	movlw	0
 11547  0010FA  22F4               	addwfc	prodh,f,c
 11548  0010FC  0E9D               	movlw	low arp_parseFromRXBuffer@arp
 11549  0010FE  24F3               	addwf	prodl,w,c
 11550  001100  6ED9               	movwf	fsr2l,c
 11551  001102  0E00               	movlw	high arp_parseFromRXBuffer@arp
 11552  001104  20F4               	addwfc	prodh,w,c
 11553  001106  6EDA               	movwf	fsr2h,c
 11554  001108  C096  FFDF         	movff	??_arp_parseFromRXBuffer+2,indf2
 11555                           
 11556                           ; BSR set to: 0
 11557  00110C  2B97               	incf	arp_parseFromRXBuffer@i& (0+255),f,b
 11558  00110E                     l938:
 11559                           
 11560                           ; BSR set to: 0
 11561                           
 11562                           ; BSR set to: 0
 11563  00110E  51A1               	movf	(arp_parseFromRXBuffer@arp+4)& (0+255),w,b
 11564  001110  5D97               	subwf	arp_parseFromRXBuffer@i& (0+255),w,b
 11565  001112  A0D8               	btfss	status,0,c
 11566  001114  D7D8               	goto	l939
 11567                           
 11568                           ; BSR set to: 0
 11569                           ;arp.c: 86: for (uint8_t i = 0; i < arp.plen; i++)
 11570                           
 11571                           ; BSR set to: 0
 11572  001116  0E00               	movlw	0
 11573  001118  6F98               	movwf	arp_parseFromRXBuffer@i_3033& (0+255),b
 11574  00111A  D024               	goto	l941
 11575  00111C                     
 11576                           ; BSR set to: 0
 11577                           ;arp.c: 87: arp.senderIPAddress.address[i] = ethernetController_streamFromRXBuffer(1, fr
      +                          ame->memory.start + offset);
 11578                           
 11579                           ; BSR set to: 0
 11580  00111C  EE20 F010          	lfsr	2,16
 11581  001120  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 11582  001122  26D9               	addwf	fsr2l,f,c
 11583  001124  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 11584  001126  22DA               	addwfc	fsr2h,f,c
 11585  001128  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 11586  00112C  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 11587  001130  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 11588  001132  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 11589  001134  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 11590  001136  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 11591  001138  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 11592  00113A  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 11593  00113C  0E01               	movlw	1
 11594  00113E  EC52  F026         	call	_ethernetController_streamFromRXBuffer
 11595  001142  0100               	movlb	0	; () banked
 11596  001144  6F96               	movwf	(??_arp_parseFromRXBuffer+2)& (0+255),b
 11597  001146  5198               	movf	arp_parseFromRXBuffer@i_3033& (0+255),w,b
 11598  001148  0D01               	mullw	1
 11599  00114A  0E0E               	movlw	14
 11600  00114C  26F3               	addwf	prodl,f,c
 11601  00114E  0E00               	movlw	0
 11602  001150  22F4               	addwfc	prodh,f,c
 11603  001152  0E9D               	movlw	low arp_parseFromRXBuffer@arp
 11604  001154  24F3               	addwf	prodl,w,c
 11605  001156  6ED9               	movwf	fsr2l,c
 11606  001158  0E00               	movlw	high arp_parseFromRXBuffer@arp
 11607  00115A  20F4               	addwfc	prodh,w,c
 11608  00115C  6EDA               	movwf	fsr2h,c
 11609  00115E  C096  FFDF         	movff	??_arp_parseFromRXBuffer+2,indf2
 11610                           
 11611                           ; BSR set to: 0
 11612  001162  2B98               	incf	arp_parseFromRXBuffer@i_3033& (0+255),f,b
 11613  001164                     l941:
 11614                           
 11615                           ; BSR set to: 0
 11616                           
 11617                           ; BSR set to: 0
 11618  001164  51A2               	movf	(arp_parseFromRXBuffer@arp+5)& (0+255),w,b
 11619  001166  5D98               	subwf	arp_parseFromRXBuffer@i_3033& (0+255),w,b
 11620  001168  A0D8               	btfss	status,0,c
 11621  00116A  D7D8               	goto	l942
 11622                           
 11623                           ; BSR set to: 0
 11624                           ;arp.c: 89: for (uint8_t i = 0; i < arp.hlen; i++)
 11625                           
 11626                           ; BSR set to: 0
 11627  00116C  0E00               	movlw	0
 11628  00116E  6F99               	movwf	arp_parseFromRXBuffer@i_3034& (0+255),b
 11629  001170  D024               	goto	l944
 11630  001172                     
 11631                           ; BSR set to: 0
 11632                           ;arp.c: 90: arp.targetMACAddress.address[i] = ethernetController_streamFromRXBuffer(1, f
      +                          rame->memory.start + offset);
 11633                           
 11634                           ; BSR set to: 0
 11635  001172  EE20 F010          	lfsr	2,16
 11636  001176  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 11637  001178  26D9               	addwf	fsr2l,f,c
 11638  00117A  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 11639  00117C  22DA               	addwfc	fsr2h,f,c
 11640  00117E  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 11641  001182  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 11642  001186  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 11643  001188  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 11644  00118A  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 11645  00118C  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 11646  00118E  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 11647  001190  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 11648  001192  0E01               	movlw	1
 11649  001194  EC52  F026         	call	_ethernetController_streamFromRXBuffer
 11650  001198  0100               	movlb	0	; () banked
 11651  00119A  6F96               	movwf	(??_arp_parseFromRXBuffer+2)& (0+255),b
 11652  00119C  5199               	movf	arp_parseFromRXBuffer@i_3034& (0+255),w,b
 11653  00119E  0D01               	mullw	1
 11654  0011A0  0E12               	movlw	18
 11655  0011A2  26F3               	addwf	prodl,f,c
 11656  0011A4  0E00               	movlw	0
 11657  0011A6  22F4               	addwfc	prodh,f,c
 11658  0011A8  0E9D               	movlw	low arp_parseFromRXBuffer@arp
 11659  0011AA  24F3               	addwf	prodl,w,c
 11660  0011AC  6ED9               	movwf	fsr2l,c
 11661  0011AE  0E00               	movlw	high arp_parseFromRXBuffer@arp
 11662  0011B0  20F4               	addwfc	prodh,w,c
 11663  0011B2  6EDA               	movwf	fsr2h,c
 11664  0011B4  C096  FFDF         	movff	??_arp_parseFromRXBuffer+2,indf2
 11665                           
 11666                           ; BSR set to: 0
 11667  0011B8  2B99               	incf	arp_parseFromRXBuffer@i_3034& (0+255),f,b
 11668  0011BA                     l944:
 11669                           
 11670                           ; BSR set to: 0
 11671                           
 11672                           ; BSR set to: 0
 11673  0011BA  51A1               	movf	(arp_parseFromRXBuffer@arp+4)& (0+255),w,b
 11674  0011BC  5D99               	subwf	arp_parseFromRXBuffer@i_3034& (0+255),w,b
 11675  0011BE  A0D8               	btfss	status,0,c
 11676  0011C0  D7D8               	goto	l945
 11677                           
 11678                           ; BSR set to: 0
 11679                           ;arp.c: 91: for (uint8_t i = 0; i < arp.plen; i++)
 11680                           
 11681                           ; BSR set to: 0
 11682  0011C2  0E00               	movlw	0
 11683  0011C4  6F9A               	movwf	arp_parseFromRXBuffer@i_3035& (0+255),b
 11684  0011C6  D024               	goto	l947
 11685  0011C8                     
 11686                           ; BSR set to: 0
 11687                           ;arp.c: 92: arp.targetIPAddress.address[i] = ethernetController_streamFromRXBuffer(1, fr
      +                          ame->memory.start + offset);
 11688                           
 11689                           ; BSR set to: 0
 11690  0011C8  EE20 F010          	lfsr	2,16
 11691  0011CC  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 11692  0011CE  26D9               	addwf	fsr2l,f,c
 11693  0011D0  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 11694  0011D2  22DA               	addwfc	fsr2h,f,c
 11695  0011D4  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 11696  0011D8  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 11697  0011DC  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 11698  0011DE  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 11699  0011E0  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 11700  0011E2  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 11701  0011E4  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 11702  0011E6  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 11703  0011E8  0E01               	movlw	1
 11704  0011EA  EC52  F026         	call	_ethernetController_streamFromRXBuffer
 11705  0011EE  0100               	movlb	0	; () banked
 11706  0011F0  6F96               	movwf	(??_arp_parseFromRXBuffer+2)& (0+255),b
 11707  0011F2  519A               	movf	arp_parseFromRXBuffer@i_3035& (0+255),w,b
 11708  0011F4  0D01               	mullw	1
 11709  0011F6  0E18               	movlw	24
 11710  0011F8  26F3               	addwf	prodl,f,c
 11711  0011FA  0E00               	movlw	0
 11712  0011FC  22F4               	addwfc	prodh,f,c
 11713  0011FE  0E9D               	movlw	low arp_parseFromRXBuffer@arp
 11714  001200  24F3               	addwf	prodl,w,c
 11715  001202  6ED9               	movwf	fsr2l,c
 11716  001204  0E00               	movlw	high arp_parseFromRXBuffer@arp
 11717  001206  20F4               	addwfc	prodh,w,c
 11718  001208  6EDA               	movwf	fsr2h,c
 11719  00120A  C096  FFDF         	movff	??_arp_parseFromRXBuffer+2,indf2
 11720                           
 11721                           ; BSR set to: 0
 11722  00120E  2B9A               	incf	arp_parseFromRXBuffer@i_3035& (0+255),f,b
 11723  001210                     l947:
 11724                           
 11725                           ; BSR set to: 0
 11726                           
 11727                           ; BSR set to: 0
 11728  001210  51A2               	movf	(arp_parseFromRXBuffer@arp+5)& (0+255),w,b
 11729  001212  5D9A               	subwf	arp_parseFromRXBuffer@i_3035& (0+255),w,b
 11730  001214  A0D8               	btfss	status,0,c
 11731  001216  D7D8               	goto	l948
 11732                           
 11733                           ; BSR set to: 0
 11734                           ;arp.c: 94: ethernetController_streamFromRXBuffer(2, frame->memory.start + offset);
 11735                           
 11736                           ; BSR set to: 0
 11737  001218  EE20 F010          	lfsr	2,16
 11738  00121C  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 11739  00121E  26D9               	addwf	fsr2l,f,c
 11740  001220  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 11741  001222  22DA               	addwfc	fsr2h,f,c
 11742  001224  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 11743  001228  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 11744  00122C  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 11745  00122E  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 11746  001230  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 11747  001232  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 11748  001234  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 11749  001236  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 11750  001238  0E02               	movlw	2
 11751  00123A  EC52  F026         	call	_ethernetController_streamFromRXBuffer
 11752                           
 11753                           ;arp.c: 96: if (ipv4_isAllZero(&arp.senderIPAddress)) {
 11754  00123E  0EAB               	movlw	low (arp_parseFromRXBuffer@arp+14)
 11755  001240  0100               	movlb	0	; () banked
 11756  001242  6F60               	movwf	ipv4_isAllZero@ip& (0+255),b
 11757  001244  0E00               	movlw	high (arp_parseFromRXBuffer@arp+14)
 11758  001246  6F61               	movwf	(ipv4_isAllZero@ip+1)& (0+255),b
 11759  001248  EC97  F029         	call	_ipv4_isAllZero	;wreg free
 11760  00124C  0100               	movlb	0	; () banked
 11761  00124E  A0D8               	btfss	status,0,c
 11762  001250  D002               	goto	l950
 11763                           
 11764                           ; BSR set to: 0
 11765                           ;arp.c: 97: arp.fIsProbe = 1;
 11766  001252  83B9               	bsf	(arp_parseFromRXBuffer@arp+28)& (0+255),1,b
 11767  001254  D03C               	goto	l954
 11768  001256                     l950:
 11769                           
 11770                           ; BSR set to: 0
 11771                           ;arp.c: 100: arp.fIsProbe = 0;
 11772  001256  93B9               	bcf	(arp_parseFromRXBuffer@arp+28)& (0+255),1,b
 11773                           
 11774                           ; BSR set to: 0
 11775                           ;arp.c: 102: if (ipv4_cmp(&arp.senderIPAddress, &arp.targetIPAddress) &&
 11776                           ;arp.c: 103: mac_isAllZero(&arp.targetMACAddress) &&
 11777                           ;arp.c: 104: arp.operation == ARP_REQUEST) {
 11778  001258  0EAB               	movlw	low (arp_parseFromRXBuffer@arp+14)
 11779  00125A  6F60               	movwf	ipv4_cmp@a& (0+255),b
 11780  00125C  0E00               	movlw	high (arp_parseFromRXBuffer@arp+14)
 11781  00125E  6F61               	movwf	(ipv4_cmp@a+1)& (0+255),b
 11782  001260  0EB5               	movlw	low (arp_parseFromRXBuffer@arp+24)
 11783  001262  6F62               	movwf	ipv4_cmp@b& (0+255),b
 11784  001264  0E00               	movlw	high (arp_parseFromRXBuffer@arp+24)
 11785  001266  6F63               	movwf	(ipv4_cmp@b+1)& (0+255),b
 11786  001268  EC7D  F028         	call	_ipv4_cmp	;wreg free
 11787  00126C  0100               	movlb	0	; () banked
 11788  00126E  A0D8               	btfss	status,0,c
 11789  001270  D00D               	goto	l952
 11790                           
 11791                           ; BSR set to: 0
 11792  001272  0EAF               	movlw	low (arp_parseFromRXBuffer@arp+18)
 11793  001274  6F60               	movwf	mac_isAllZero@mac& (0+255),b
 11794  001276  0E00               	movlw	high (arp_parseFromRXBuffer@arp+18)
 11795  001278  6F61               	movwf	(mac_isAllZero@mac+1)& (0+255),b
 11796  00127A  EC7F  F029         	call	_mac_isAllZero	;wreg free
 11797  00127E  0100               	movlb	0	; () banked
 11798  001280  A0D8               	btfss	status,0,c
 11799  001282  D004               	goto	l952
 11800                           
 11801                           ; BSR set to: 0
 11802  001284  05A3               	decf	(arp_parseFromRXBuffer@arp+6)& (0+255),w,b
 11803  001286  11A4               	iorwf	(arp_parseFromRXBuffer@arp+7)& (0+255),w,b
 11804  001288  B4D8               	btfsc	status,2,c
 11805  00128A  D01F               	goto	u10830
 11806  00128C                     l952:
 11807                           
 11808                           ; BSR set to: 0
 11809                           ;arp.c: 108: if (ipv4_cmp(&arp.senderIPAddress, &arp.targetIPAddress) &&
 11810                           ;arp.c: 109: mac_cmp(&arp.senderMACAddress, &arp.targetMACAddress) &&
 11811                           ;arp.c: 110: arp.operation == ARP_REPLY) {
 11812                           
 11813                           ; BSR set to: 0
 11814  00128C  0EAB               	movlw	low (arp_parseFromRXBuffer@arp+14)
 11815  00128E  6F60               	movwf	ipv4_cmp@a& (0+255),b
 11816  001290  0E00               	movlw	high (arp_parseFromRXBuffer@arp+14)
 11817  001292  6F61               	movwf	(ipv4_cmp@a+1)& (0+255),b
 11818  001294  0EB5               	movlw	low (arp_parseFromRXBuffer@arp+24)
 11819  001296  6F62               	movwf	ipv4_cmp@b& (0+255),b
 11820  001298  0E00               	movlw	high (arp_parseFromRXBuffer@arp+24)
 11821  00129A  6F63               	movwf	(ipv4_cmp@b+1)& (0+255),b
 11822  00129C  EC7D  F028         	call	_ipv4_cmp	;wreg free
 11823  0012A0  0100               	movlb	0	; () banked
 11824  0012A2  A0D8               	btfss	status,0,c
 11825  0012A4  D014               	goto	l954
 11826                           
 11827                           ; BSR set to: 0
 11828  0012A6  0EA5               	movlw	low (arp_parseFromRXBuffer@arp+8)
 11829  0012A8  6F60               	movwf	mac_cmp@a& (0+255),b
 11830  0012AA  0E00               	movlw	high (arp_parseFromRXBuffer@arp+8)
 11831  0012AC  6F61               	movwf	(mac_cmp@a+1)& (0+255),b
 11832  0012AE  0EAF               	movlw	low (arp_parseFromRXBuffer@arp+18)
 11833  0012B0  6F62               	movwf	mac_cmp@b& (0+255),b
 11834  0012B2  0E00               	movlw	high (arp_parseFromRXBuffer@arp+18)
 11835  0012B4  6F63               	movwf	(mac_cmp@b+1)& (0+255),b
 11836  0012B6  EC5C  F028         	call	_mac_cmp	;wreg free
 11837  0012BA  0100               	movlb	0	; () banked
 11838  0012BC  A0D8               	btfss	status,0,c
 11839  0012BE  D007               	goto	l954
 11840                           
 11841                           ; BSR set to: 0
 11842  0012C0  0E02               	movlw	2
 11843  0012C2  19A3               	xorwf	(arp_parseFromRXBuffer@arp+6)& (0+255),w,b
 11844  0012C4  11A4               	iorwf	(arp_parseFromRXBuffer@arp+7)& (0+255),w,b
 11845  0012C6  A4D8               	btfss	status,2,c
 11846  0012C8  D002               	goto	l954
 11847  0012CA                     u10830:
 11848                           
 11849                           ; BSR set to: 0
 11850                           ;arp.c: 111: arp.fIsGratuitous = 1;
 11851  0012CA  81B9               	bsf	(arp_parseFromRXBuffer@arp+28)& (0+255),0,b
 11852                           
 11853                           ;arp.c: 112: } else {
 11854  0012CC  D001               	goto	l955
 11855  0012CE                     l954:
 11856                           
 11857                           ; BSR set to: 0
 11858                           ;arp.c: 113: arp.fIsGratuitous = 0;
 11859  0012CE  91B9               	bcf	(arp_parseFromRXBuffer@arp+28)& (0+255),0,b
 11860  0012D0                     l955:
 11861                           
 11862                           ; BSR set to: 0
 11863                           ;arp.c: 114: }
 11864                           ;arp.c: 115: }
 11865                           ;arp.c: 116: }
 11866                           ;arp.c: 119: if ((arp.htype != ARP_HTYPE_ETHERNET) ||
 11867                           ;arp.c: 120: (arp.ptype != ARP_PTYPE_IPv4) ||
 11868                           ;arp.c: 121: (arp.operation > 2) ||
 11869                           ;arp.c: 122: (arp.hlen != 6u) ||
 11870                           ;arp.c: 123: (arp.plen != 4u)) {
 11871                           
 11872                           ; BSR set to: 0
 11873                           
 11874                           ; BSR set to: 0
 11875                           
 11876                           ; BSR set to: 0
 11877  0012D0  059D               	decf	arp_parseFromRXBuffer@arp& (0+255),w,b
 11878  0012D2  119E               	iorwf	(arp_parseFromRXBuffer@arp+1)& (0+255),w,b
 11879  0012D4  A4D8               	btfss	status,2,c
 11880  0012D6  D013               	goto	u10880
 11881                           
 11882                           ; BSR set to: 0
 11883  0012D8  0E08               	movlw	8
 11884  0012DA  19A0               	xorwf	(arp_parseFromRXBuffer@arp+3)& (0+255),w,b
 11885  0012DC  119F               	iorwf	(arp_parseFromRXBuffer@arp+2)& (0+255),w,b
 11886  0012DE  A4D8               	btfss	status,2,c
 11887  0012E0  D00E               	goto	u10880
 11888                           
 11889                           ; BSR set to: 0
 11890  0012E2  51A4               	movf	(arp_parseFromRXBuffer@arp+7)& (0+255),w,b
 11891  0012E4  E10C               	bnz	l9373
 11892  0012E6  0E03               	movlw	3
 11893  0012E8  5DA3               	subwf	(arp_parseFromRXBuffer@arp+6)& (0+255),w,b
 11894  0012EA  B0D8               	btfsc	status,0,c
 11895  0012EC  D008               	goto	u10880
 11896                           
 11897                           ; BSR set to: 0
 11898  0012EE  0E06               	movlw	6
 11899  0012F0  19A1               	xorwf	(arp_parseFromRXBuffer@arp+4)& (0+255),w,b
 11900  0012F2  A4D8               	btfss	status,2,c
 11901  0012F4  D004               	goto	u10880
 11902                           
 11903                           ; BSR set to: 0
 11904  0012F6  0E04               	movlw	4
 11905  0012F8  19A2               	xorwf	(arp_parseFromRXBuffer@arp+5)& (0+255),w,b
 11906  0012FA  B4D8               	btfsc	status,2,c
 11907  0012FC  D004               	goto	l956
 11908  0012FE                     u10880:
 11909  0012FE                     l9373:
 11910                           
 11911                           ; BSR set to: 0
 11912                           ;arp.c: 124: arp.err.code = ERROR_ARP_INVALID_VALUES;
 11913  0012FE  0E01               	movlw	1
 11914  001300  6FBC               	movwf	(arp_parseFromRXBuffer@arp+31)& (0+255),b
 11915  001302  0E95               	movlw	149
 11916  001304  D003               	goto	L1
 11917  001306                     l956:
 11918                           
 11919                           ; BSR set to: 0
 11920                           ;arp.c: 127: arp.err.code = (uint16_t)0;
 11921                           
 11922                           ; BSR set to: 0
 11923  001306  0E00               	movlw	0
 11924  001308  6FBC               	movwf	(arp_parseFromRXBuffer@arp+31)& (0+255),b
 11925  00130A  0E00               	movlw	0
 11926  00130C                     L1:
 11927  00130C  6FBB               	movwf	(arp_parseFromRXBuffer@arp+30)& (0+255),b
 11928                           
 11929                           ;arp.c: 128: arp.err.module = ERROR_MODULE_ARP;
 11930  00130E  0E03               	movlw	3
 11931  001310  6FBA               	movwf	(arp_parseFromRXBuffer@arp+29)& (0+255),b
 11932                           
 11933                           ; BSR set to: 0
 11934                           ;arp.c: 129: }
 11935                           ;arp.c: 131: return arp;
 11936                           
 11937                           ; BSR set to: 0
 11938  001312  EE20  F09D         	lfsr	2,arp_parseFromRXBuffer@arp
 11939  001316  EE00  F074         	lfsr	0,?_arp_parseFromRXBuffer
 11940  00131A  0E1F               	movlw	31
 11941  00131C                     u10891:
 11942  00131C  CFDB FFEB          	movff	plusw2,plusw0
 11943  001320  06E8               	decf	wreg,f,c
 11944  001322  E2FC               	bc	u10891
 11945  001324  0012               	return	
 11946  001326                     __end_of_arp_parseFromRXBuffer:
 11947                           	opt stack 0
 11948                           tblptru	equ	0xFF8
 11949                           tblptrh	equ	0xFF7
 11950                           tblptrl	equ	0xFF6
 11951                           tablat	equ	0xFF5
 11952                           prodh	equ	0xFF4
 11953                           prodl	equ	0xFF3
 11954                           intcon	equ	0xFF2
 11955                           intcon3	equ	0xFF0
 11956                           indf0	equ	0xFEF
 11957                           postinc0	equ	0xFEE
 11958                           plusw0	equ	0xFEB
 11959                           fsr0h	equ	0xFEA
 11960                           fsr0l	equ	0xFE9
 11961                           wreg	equ	0xFE8
 11962                           indf1	equ	0xFE7
 11963                           postinc1	equ	0xFE6
 11964                           postdec1	equ	0xFE5
 11965                           plusw1	equ	0xFE3
 11966                           fsr1h	equ	0xFE2
 11967                           fsr1l	equ	0xFE1
 11968                           indf2	equ	0xFDF
 11969                           postinc2	equ	0xFDE
 11970                           postdec2	equ	0xFDD
 11971                           plusw2	equ	0xFDB
 11972                           fsr2h	equ	0xFDA
 11973                           fsr2l	equ	0xFD9
 11974                           status	equ	0xFD8
 11975                           
 11976 ;; *************** function _mac_cmp *****************
 11977 ;; Defined at:
 11978 ;;		line 39 in file "src/eth/mac.c"
 11979 ;; Parameters:    Size  Location     Type
 11980 ;;  a               2    0[BANK0 ] PTR struct macaddress
 11981 ;;		 -> arp_parseFromRXBuffer@arp(32), 
 11982 ;;  b               2    2[BANK0 ] PTR struct macaddress
 11983 ;;		 -> arp_parseFromRXBuffer@arp(32), 
 11984 ;; Auto vars:     Size  Location     Type
 11985 ;;  i               1    6[BANK0 ] unsigned char 
 11986 ;; Return value:  Size  Location     Type
 11987 ;;		None               void
 11988 ;; Registers used:
 11989 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11990 ;; Tracked objects:
 11991 ;;		On entry : 0/0
 11992 ;;		On exit  : 0/0
 11993 ;;		Unchanged: 0/0
 11994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11995 ;;      Params:         0       4       0       0       0       0       0       0       0
 11996 ;;      Locals:         0       1       0       0       0       0       0       0       0
 11997 ;;      Temps:          0       2       0       0       0       0       0       0       0
 11998 ;;      Totals:         0       7       0       0       0       0       0       0       0
 11999 ;;Total ram usage:        7 bytes
 12000 ;; Hardware stack levels used:    1
 12001 ;; Hardware stack levels required when called:    4
 12002 ;; This function calls:
 12003 ;;		Nothing
 12004 ;; This function is called by:
 12005 ;;		_arp_parseFromRXBuffer
 12006 ;; This function uses a non-reentrant model
 12007 ;;
 12008                           
 12009                           	psect	text35
 12010  0050B8                     __ptext35:
 12011                           	opt stack 0
 12012  0050B8                     _mac_cmp:
 12013                           	opt stack 22
 12014                           
 12015                           ;mac.c: 40: for (uint8_t i = 0; i < 6; i++) {
 12016                           
 12017                           ; BSR set to: 0
 12018                           ;incstack = 0
 12019  0050B8  0E00               	movlw	0
 12020  0050BA  0100               	movlb	0	; () banked
 12021  0050BC  6F66               	movwf	mac_cmp@i& (0+255),b
 12022  0050BE                     l8991:
 12023                           
 12024                           ; BSR set to: 0
 12025  0050BE  0E05               	movlw	5
 12026  0050C0  6566               	cpfsgt	mac_cmp@i& (0+255),b
 12027  0050C2  D001               	goto	l390
 12028  0050C4  D018               	goto	u9900
 12029  0050C6                     l390:
 12030                           
 12031                           ; BSR set to: 0
 12032                           ;mac.c: 41: if (a->address[i] != b->address[i])
 12033                           
 12034                           ; BSR set to: 0
 12035  0050C6  5166               	movf	mac_cmp@i& (0+255),w,b
 12036  0050C8  0D01               	mullw	1
 12037  0050CA  50F3               	movf	prodl,w,c
 12038  0050CC  2562               	addwf	mac_cmp@b& (0+255),w,b
 12039  0050CE  6ED9               	movwf	fsr2l,c
 12040  0050D0  50F4               	movf	prodh,w,c
 12041  0050D2  2163               	addwfc	(mac_cmp@b+1)& (0+255),w,b
 12042  0050D4  6EDA               	movwf	fsr2h,c
 12043  0050D6  5166               	movf	mac_cmp@i& (0+255),w,b
 12044  0050D8  0D01               	mullw	1
 12045  0050DA  50F3               	movf	prodl,w,c
 12046  0050DC  2560               	addwf	mac_cmp@a& (0+255),w,b
 12047  0050DE  6EE1               	movwf	fsr1l,c
 12048  0050E0  50F4               	movf	prodh,w,c
 12049  0050E2  2161               	addwfc	(mac_cmp@a+1)& (0+255),w,b
 12050  0050E4  6EE2               	movwf	fsr1h,c
 12051  0050E6  50DE               	movf	postinc2,w,c
 12052  0050E8  18E6               	xorwf	postinc1,w,c
 12053  0050EA  B4D8               	btfsc	status,2,c
 12054  0050EC  D002               	goto	l392
 12055                           
 12056                           ; BSR set to: 0
 12057                           ;mac.c: 42: return 0;
 12058  0050EE  90D8               	bcf	status,0,c
 12059                           
 12060                           ; BSR set to: 0
 12061  0050F0  0012               	return	
 12062  0050F2                     l392:
 12063                           
 12064                           ; BSR set to: 0
 12065                           
 12066                           ; BSR set to: 0
 12067  0050F2  2B66               	incf	mac_cmp@i& (0+255),f,b
 12068  0050F4  D7E4               	goto	l8991
 12069  0050F6                     u9900:
 12070                           
 12071                           ; BSR set to: 0
 12072                           ;mac.c: 43: }
 12073                           ;mac.c: 44: return 1;
 12074                           
 12075                           ; BSR set to: 0
 12076  0050F6  80D8               	bsf	status,0,c
 12077  0050F8  0012               	return	
 12078  0050FA                     __end_of_mac_cmp:
 12079                           	opt stack 0
 12080                           tblptru	equ	0xFF8
 12081                           tblptrh	equ	0xFF7
 12082                           tblptrl	equ	0xFF6
 12083                           tablat	equ	0xFF5
 12084                           prodh	equ	0xFF4
 12085                           prodl	equ	0xFF3
 12086                           intcon	equ	0xFF2
 12087                           intcon3	equ	0xFF0
 12088                           indf0	equ	0xFEF
 12089                           postinc0	equ	0xFEE
 12090                           plusw0	equ	0xFEB
 12091                           fsr0h	equ	0xFEA
 12092                           fsr0l	equ	0xFE9
 12093                           wreg	equ	0xFE8
 12094                           indf1	equ	0xFE7
 12095                           postinc1	equ	0xFE6
 12096                           postdec1	equ	0xFE5
 12097                           plusw1	equ	0xFE3
 12098                           fsr1h	equ	0xFE2
 12099                           fsr1l	equ	0xFE1
 12100                           indf2	equ	0xFDF
 12101                           postinc2	equ	0xFDE
 12102                           postdec2	equ	0xFDD
 12103                           plusw2	equ	0xFDB
 12104                           fsr2h	equ	0xFDA
 12105                           fsr2l	equ	0xFD9
 12106                           status	equ	0xFD8
 12107                           
 12108 ;; *************** function _ethernetController_streamFromRXBuffer *****************
 12109 ;; Defined at:
 12110 ;;		line 350 in file "src/enc424j600/ENC424J600.c"
 12111 ;; Parameters:    Size  Location     Type
 12112 ;;  startEnd        1    wreg     unsigned char 
 12113 ;;  startAddress    2   15[BANK0 ] unsigned int 
 12114 ;; Auto vars:     Size  Location     Type
 12115 ;;  startEnd        1   17[BANK0 ] unsigned char 
 12116 ;;  temp            1   19[BANK0 ] unsigned char 
 12117 ;;  opcode          1   18[BANK0 ] unsigned char 
 12118 ;; Return value:  Size  Location     Type
 12119 ;;                  1    wreg      unsigned char 
 12120 ;; Registers used:
 12121 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12122 ;; Tracked objects:
 12123 ;;		On entry : 0/0
 12124 ;;		On exit  : 0/0
 12125 ;;		Unchanged: 0/0
 12126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12127 ;;      Params:         0       2       0       0       0       0       0       0       0
 12128 ;;      Locals:         0       3       0       0       0       0       0       0       0
 12129 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12130 ;;      Totals:         0       5       0       0       0       0       0       0       0
 12131 ;;Total ram usage:        5 bytes
 12132 ;; Hardware stack levels used:    1
 12133 ;; Hardware stack levels required when called:    7
 12134 ;; This function calls:
 12135 ;;		_enc424j600_readSPI
 12136 ;;		_enc424j600_setERXDATAReadPointer
 12137 ;;		_enc424j600_writeSPI
 12138 ;; This function is called by:
 12139 ;;		_arp_parseFromRXBuffer
 12140 ;;		_ipv4_parseHeader
 12141 ;; This function uses a non-reentrant model
 12142 ;;
 12143                           
 12144                           	psect	text36
 12145  004CA4                     __ptext36:
 12146                           	opt stack 0
 12147  004CA4                     _ethernetController_streamFromRXBuffer:
 12148                           	opt stack 19
 12149                           
 12150                           ; BSR set to: 0
 12151                           ;incstack = 0
 12152                           ;ethernetController_streamFromRXBuffer@startEnd stored from wreg
 12153  004CA4  0100               	movlb	0	; () banked
 12154  004CA6  6F71               	movwf	ethernetController_streamFromRXBuffer@startEnd& (0+255),b
 12155                           
 12156                           ;ENC424J600.c: 351: uint8_t temp;
 12157                           ;ENC424J600.c: 352: uint8_t opcode;
 12158                           ;ENC424J600.c: 353: switch (startEnd) {
 12159  004CA8  D01F               	goto	l179
 12160  004CAA                     
 12161                           ;ENC424J600.c: 355: enc424j600_setERXDATAReadPointer(startAddress);
 12162  004CAA  C06F  F06A         	movff	ethernetController_streamFromRXBuffer@startAddress,enc424j600_setERXDATAReadPoint
      +                          er@addr
 12163  004CAE  C070  F06B         	movff	ethernetController_streamFromRXBuffer@startAddress+1,enc424j600_setERXDATAReadPoi
      +                          nter@addr+1
 12164  004CB2  ECDA  F028         	call	_enc424j600_setERXDATAReadPointer	;wreg free
 12165                           
 12166                           ;ENC424J600.c: 356: opcode = 0x2C;
 12167  004CB6  0E2C               	movlw	44
 12168  004CB8  0100               	movlb	0	; () banked
 12169  004CBA  6F72               	movwf	ethernetController_streamFromRXBuffer@opcode& (0+255),b
 12170                           
 12171                           ; BSR set to: 0
 12172                           ;ENC424J600.c: 357: PORTBbits.RB4=0;
 12173  004CBC  9881               	bcf	3969,4,c	;volatile
 12174                           
 12175                           ; BSR set to: 0
 12176                           ;ENC424J600.c: 358: enc424j600_writeSPI(&opcode);
 12177  004CBE  0E72               	movlw	low ethernetController_streamFromRXBuffer@opcode
 12178  004CC0  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 12179  004CC2  0E00               	movlw	high ethernetController_streamFromRXBuffer@opcode
 12180  004CC4  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 12181  004CC6  EC20  F026         	call	_enc424j600_writeSPI	;wreg free
 12182                           
 12183                           ;ENC424J600.c: 359: return 0;
 12184  004CCA  0E00               	movlw	0
 12185  004CCC  0012               	return	
 12186  004CCE                     
 12187                           ;ENC424J600.c: 361: enc424j600_readSPI(&temp);
 12188  004CCE  0E73               	movlw	low ethernetController_streamFromRXBuffer@temp
 12189  004CD0  0100               	movlb	0	; () banked
 12190  004CD2  6F60               	movwf	enc424j600_readSPI@data& (0+255),b
 12191  004CD4  0E00               	movlw	high ethernetController_streamFromRXBuffer@temp
 12192  004CD6  6F61               	movwf	(enc424j600_readSPI@data+1)& (0+255),b
 12193  004CD8  ECB7  F025         	call	_enc424j600_readSPI	;wreg free
 12194                           
 12195                           ;ENC424J600.c: 362: return temp;
 12196  004CDC  0100               	movlb	0	; () banked
 12197  004CDE  5173               	movf	ethernetController_streamFromRXBuffer@temp& (0+255),w,b
 12198                           
 12199                           ; BSR set to: 0
 12200  004CE0  0012               	return	
 12201  004CE2                     l183:
 12202                           
 12203                           ; BSR set to: 0
 12204                           ;ENC424J600.c: 364: PORTBbits.RB4=1;
 12205  004CE2  8881               	bsf	3969,4,c	;volatile
 12206                           
 12207                           ; BSR set to: 0
 12208                           ;ENC424J600.c: 374: return 0;
 12209  004CE4  0E00               	movlw	0
 12210                           
 12211                           ; BSR set to: 0
 12212  004CE6  0012               	return	
 12213  004CE8                     l179:
 12214                           
 12215                           ; BSR set to: 0
 12216  004CE8  0100               	movlb	0	; () banked
 12217  004CEA  5171               	movf	ethernetController_streamFromRXBuffer@startEnd& (0+255),w,b
 12218                           
 12219                           ; Switch size 1, requested type "space"
 12220                           ; Number of cases is 3, Range of values is 0 to 2
 12221                           ; switch strategies available:
 12222                           ; Name         Instructions Cycles
 12223                           ; simple_byte           10     6 (average)
 12224                           ;	Chosen strategy is simple_byte
 12225  004CEC  0A00               	xorlw	0	; case 0
 12226  004CEE  B4D8               	btfsc	status,2,c
 12227  004CF0  D7DC               	goto	l180
 12228  004CF2  0A01               	xorlw	1	; case 1
 12229  004CF4  B4D8               	btfsc	status,2,c
 12230  004CF6  D7EB               	goto	l182
 12231  004CF8  0A03               	xorlw	3	; case 2
 12232  004CFA  B4D8               	btfsc	status,2,c
 12233  004CFC  D7F2               	goto	l183
 12234                           
 12235                           ; BSR set to: 0
 12236                           ;ENC424J600.c: 376: return 0;
 12237                           
 12238                           ; BSR set to: 0
 12239  004CFE  0E00               	movlw	0
 12240  004D00  0012               	return	
 12241  004D02                     __end_of_ethernetController_streamFromRXBuffer:
 12242                           	opt stack 0
 12243                           tblptru	equ	0xFF8
 12244                           tblptrh	equ	0xFF7
 12245                           tblptrl	equ	0xFF6
 12246                           tablat	equ	0xFF5
 12247                           prodh	equ	0xFF4
 12248                           prodl	equ	0xFF3
 12249                           intcon	equ	0xFF2
 12250                           intcon3	equ	0xFF0
 12251                           indf0	equ	0xFEF
 12252                           postinc0	equ	0xFEE
 12253                           plusw0	equ	0xFEB
 12254                           fsr0h	equ	0xFEA
 12255                           fsr0l	equ	0xFE9
 12256                           wreg	equ	0xFE8
 12257                           indf1	equ	0xFE7
 12258                           postinc1	equ	0xFE6
 12259                           postdec1	equ	0xFE5
 12260                           plusw1	equ	0xFE3
 12261                           fsr1h	equ	0xFE2
 12262                           fsr1l	equ	0xFE1
 12263                           indf2	equ	0xFDF
 12264                           postinc2	equ	0xFDE
 12265                           postdec2	equ	0xFDD
 12266                           plusw2	equ	0xFDB
 12267                           fsr2h	equ	0xFDA
 12268                           fsr2l	equ	0xFD9
 12269                           status	equ	0xFD8
 12270                           
 12271 ;; *************** function _UARTTransmitInt *****************
 12272 ;; Defined at:
 12273 ;;		line 43 in file "src/system/uart.c"
 12274 ;; Parameters:    Size  Location     Type
 12275 ;;  val             4   58[BANK0 ] unsigned long 
 12276 ;; Auto vars:     Size  Location     Type
 12277 ;;		None
 12278 ;; Return value:  Size  Location     Type
 12279 ;;                  1    wreg      void 
 12280 ;; Registers used:
 12281 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12282 ;; Tracked objects:
 12283 ;;		On entry : 0/0
 12284 ;;		On exit  : 0/0
 12285 ;;		Unchanged: 0/0
 12286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12287 ;;      Params:         0       4       0       0       0       0       0       0       0
 12288 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12289 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12290 ;;      Totals:         0       4       0       0       0       0       0       0       0
 12291 ;;Total ram usage:        4 bytes
 12292 ;; Hardware stack levels used:    1
 12293 ;; Hardware stack levels required when called:    8
 12294 ;; This function calls:
 12295 ;;		_UARTTransmitText
 12296 ;;		_intToString
 12297 ;; This function is called by:
 12298 ;;		_ethernet_rxGetNewFrame
 12299 ;; This function uses a non-reentrant model
 12300 ;;
 12301                           
 12302                           	psect	text37
 12303  0055DE                     __ptext37:
 12304                           	opt stack 0
 12305  0055DE                     _UARTTransmitInt:
 12306                           	opt stack 20
 12307                           
 12308                           ;uart.c: 44: UARTTransmitText(intToString(val));
 12309                           
 12310                           ;incstack = 0
 12311  0055DE  C09A  F084         	movff	UARTTransmitInt@val,intToString@val
 12312  0055E2  C09B  F085         	movff	UARTTransmitInt@val+1,intToString@val+1
 12313  0055E6  C09C  F086         	movff	UARTTransmitInt@val+2,intToString@val+2
 12314  0055EA  C09D  F087         	movff	UARTTransmitInt@val+3,intToString@val+3
 12315  0055EE  EC66  F029         	call	_intToString	;wreg free
 12316  0055F2  C084  F098         	movff	?_intToString,UARTTransmitText@str
 12317  0055F6  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
 12318  0055FA  ECD8  F026         	call	_UARTTransmitText	;wreg free
 12319  0055FE  0012               	return		;funcret
 12320  005600                     __end_of_UARTTransmitInt:
 12321                           	opt stack 0
 12322                           tblptru	equ	0xFF8
 12323                           tblptrh	equ	0xFF7
 12324                           tblptrl	equ	0xFF6
 12325                           tablat	equ	0xFF5
 12326                           prodh	equ	0xFF4
 12327                           prodl	equ	0xFF3
 12328                           intcon	equ	0xFF2
 12329                           intcon3	equ	0xFF0
 12330                           indf0	equ	0xFEF
 12331                           postinc0	equ	0xFEE
 12332                           plusw0	equ	0xFEB
 12333                           fsr0h	equ	0xFEA
 12334                           fsr0l	equ	0xFE9
 12335                           wreg	equ	0xFE8
 12336                           indf1	equ	0xFE7
 12337                           postinc1	equ	0xFE6
 12338                           postdec1	equ	0xFE5
 12339                           plusw1	equ	0xFE3
 12340                           fsr1h	equ	0xFE2
 12341                           fsr1l	equ	0xFE1
 12342                           indf2	equ	0xFDF
 12343                           postinc2	equ	0xFDE
 12344                           postdec2	equ	0xFDD
 12345                           plusw2	equ	0xFDB
 12346                           fsr2h	equ	0xFDA
 12347                           fsr2l	equ	0xFD9
 12348                           status	equ	0xFD8
 12349                           
 12350 ;; *************** function _intToString *****************
 12351 ;; Defined at:
 12352 ;;		line 75 in file "src/system/uart.c"
 12353 ;; Parameters:    Size  Location     Type
 12354 ;;  val             4   36[BANK0 ] unsigned long 
 12355 ;; Auto vars:     Size  Location     Type
 12356 ;;		None
 12357 ;; Return value:  Size  Location     Type
 12358 ;;                  2   36[BANK0 ] PTR unsigned char 
 12359 ;; Registers used:
 12360 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12361 ;; Tracked objects:
 12362 ;;		On entry : 0/0
 12363 ;;		On exit  : 0/0
 12364 ;;		Unchanged: 0/0
 12365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12366 ;;      Params:         0       4       0       0       0       0       0       0       0
 12367 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12368 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12369 ;;      Totals:         0       4       0       0       0       0       0       0       0
 12370 ;;Total ram usage:        4 bytes
 12371 ;; Hardware stack levels used:    1
 12372 ;; Hardware stack levels required when called:    7
 12373 ;; This function calls:
 12374 ;;		_ltoa
 12375 ;; This function is called by:
 12376 ;;		_ethernet_rxGetNewFrame
 12377 ;;		_printErrorMessage
 12378 ;;		_UARTTransmitInt
 12379 ;;		_ipv4_handleNewPacket
 12380 ;;		_arpEntryToString
 12381 ;; This function uses a non-reentrant model
 12382 ;;
 12383                           
 12384                           	psect	text38
 12385  0052CC                     __ptext38:
 12386                           	opt stack 0
 12387  0052CC                     _intToString:
 12388                           	opt stack 22
 12389                           
 12390                           ;uart.c: 76: char static number [10];
 12391                           ;uart.c: 77: ltoa(&number[0], (long) val, 10);
 12392                           
 12393                           ;incstack = 0
 12394  0052CC  0EE6               	movlw	low intToString@number
 12395  0052CE  0100               	movlb	0	; () banked
 12396  0052D0  6F7A               	movwf	ltoa@buf& (0+255),b
 12397  0052D2  0E01               	movlw	high intToString@number
 12398  0052D4  6F7B               	movwf	(ltoa@buf+1)& (0+255),b
 12399  0052D6  C084  F07C         	movff	intToString@val,ltoa@val
 12400  0052DA  C085  F07D         	movff	intToString@val+1,ltoa@val+1
 12401  0052DE  C086  F07E         	movff	intToString@val+2,ltoa@val+2
 12402  0052E2  C087  F07F         	movff	intToString@val+3,ltoa@val+3
 12403  0052E6  0E00               	movlw	0
 12404  0052E8  6F81               	movwf	(ltoa@base+1)& (0+255),b
 12405  0052EA  0E0A               	movlw	10
 12406  0052EC  6F80               	movwf	ltoa@base& (0+255),b
 12407  0052EE  EC03  F027         	call	_ltoa	;wreg free
 12408                           
 12409                           ;uart.c: 81: return number;
 12410  0052F2  0EE6               	movlw	low intToString@number
 12411  0052F4  0100               	movlb	0	; () banked
 12412  0052F6  6F84               	movwf	?_intToString& (0+255),b
 12413  0052F8  0E01               	movlw	high intToString@number
 12414  0052FA  6F85               	movwf	(?_intToString+1)& (0+255),b
 12415  0052FC  0012               	return	
 12416  0052FE                     __end_of_intToString:
 12417                           	opt stack 0
 12418                           tblptru	equ	0xFF8
 12419                           tblptrh	equ	0xFF7
 12420                           tblptrl	equ	0xFF6
 12421                           tablat	equ	0xFF5
 12422                           prodh	equ	0xFF4
 12423                           prodl	equ	0xFF3
 12424                           intcon	equ	0xFF2
 12425                           intcon3	equ	0xFF0
 12426                           indf0	equ	0xFEF
 12427                           postinc0	equ	0xFEE
 12428                           plusw0	equ	0xFEB
 12429                           fsr0h	equ	0xFEA
 12430                           fsr0l	equ	0xFE9
 12431                           wreg	equ	0xFE8
 12432                           indf1	equ	0xFE7
 12433                           postinc1	equ	0xFE6
 12434                           postdec1	equ	0xFE5
 12435                           plusw1	equ	0xFE3
 12436                           fsr1h	equ	0xFE2
 12437                           fsr1l	equ	0xFE1
 12438                           indf2	equ	0xFDF
 12439                           postinc2	equ	0xFDE
 12440                           postdec2	equ	0xFDD
 12441                           plusw2	equ	0xFDB
 12442                           fsr2h	equ	0xFDA
 12443                           fsr2l	equ	0xFD9
 12444                           status	equ	0xFD8
 12445                           
 12446 ;; *************** function _ltoa *****************
 12447 ;; Defined at:
 12448 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ltoa.c"
 12449 ;; Parameters:    Size  Location     Type
 12450 ;;  buf             2   26[BANK0 ] PTR unsigned char 
 12451 ;;		 -> intToString@number(10), 
 12452 ;;  val             4   28[BANK0 ] long 
 12453 ;;  base            2   32[BANK0 ] int 
 12454 ;; Auto vars:     Size  Location     Type
 12455 ;;  cp              2   34[BANK0 ] PTR unsigned char 
 12456 ;;		 -> intToString@number(10), 
 12457 ;; Return value:  Size  Location     Type
 12458 ;;                  2   26[BANK0 ] PTR unsigned char 
 12459 ;; Registers used:
 12460 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12461 ;; Tracked objects:
 12462 ;;		On entry : 0/0
 12463 ;;		On exit  : 0/0
 12464 ;;		Unchanged: 0/0
 12465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12466 ;;      Params:         0       8       0       0       0       0       0       0       0
 12467 ;;      Locals:         0       2       0       0       0       0       0       0       0
 12468 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12469 ;;      Totals:         0      10       0       0       0       0       0       0       0
 12470 ;;Total ram usage:       10 bytes
 12471 ;; Hardware stack levels used:    1
 12472 ;; Hardware stack levels required when called:    6
 12473 ;; This function calls:
 12474 ;;		_ultoa
 12475 ;; This function is called by:
 12476 ;;		_intToString
 12477 ;; This function uses a non-reentrant model
 12478 ;;
 12479                           
 12480                           	psect	text39
 12481  004E06                     __ptext39:
 12482                           	opt stack 0
 12483  004E06                     _ltoa:
 12484                           	opt stack 22
 12485                           
 12486                           ; BSR set to: 0
 12487                           ;incstack = 0
 12488  004E06  C07A  F082         	movff	ltoa@buf,ltoa@cp
 12489  004E0A  C07B  F083         	movff	ltoa@buf+1,ltoa@cp+1
 12490  004E0E  0100               	movlb	0	; () banked
 12491  004E10  AF7F               	btfss	(ltoa@val+3)& (0+255),7,b
 12492  004E12  D010               	goto	l1619
 12493                           
 12494                           ; BSR set to: 0
 12495  004E14  C07A  FFD9         	movff	ltoa@buf,fsr2l
 12496  004E18  C07B  FFDA         	movff	ltoa@buf+1,fsr2h
 12497  004E1C  0E2D               	movlw	45
 12498  004E1E  6EDF               	movwf	indf2,c
 12499                           
 12500                           ; BSR set to: 0
 12501  004E20  4B7A               	infsnz	ltoa@buf& (0+255),f,b
 12502  004E22  2B7B               	incf	(ltoa@buf+1)& (0+255),f,b
 12503                           
 12504                           ; BSR set to: 0
 12505  004E24  1F7F               	comf	(ltoa@val+3)& (0+255),f,b
 12506  004E26  1F7E               	comf	(ltoa@val+2)& (0+255),f,b
 12507  004E28  1F7D               	comf	(ltoa@val+1)& (0+255),f,b
 12508  004E2A  6D7C               	negf	ltoa@val& (0+255),b
 12509  004E2C  0E00               	movlw	0
 12510  004E2E  237D               	addwfc	(ltoa@val+1)& (0+255),f,b
 12511  004E30  237E               	addwfc	(ltoa@val+2)& (0+255),f,b
 12512  004E32  237F               	addwfc	(ltoa@val+3)& (0+255),f,b
 12513  004E34                     l1619:
 12514                           
 12515                           ; BSR set to: 0
 12516                           
 12517                           ; BSR set to: 0
 12518  004E34  C07A  F06D         	movff	ltoa@buf,ultoa@buf
 12519  004E38  C07B  F06E         	movff	ltoa@buf+1,ultoa@buf+1
 12520  004E3C  C07C  F06F         	movff	ltoa@val,ultoa@val
 12521  004E40  C07D  F070         	movff	ltoa@val+1,ultoa@val+1
 12522  004E44  C07E  F071         	movff	ltoa@val+2,ultoa@val+2
 12523  004E48  C07F  F072         	movff	ltoa@val+3,ultoa@val+3
 12524  004E4C  C080  F073         	movff	ltoa@base,ultoa@base
 12525  004E50  C081  F074         	movff	ltoa@base+1,ultoa@base+1
 12526  004E54  EC29  F01E         	call	_ultoa	;wreg free
 12527  004E58  0012               	return	
 12528  004E5A                     __end_of_ltoa:
 12529                           	opt stack 0
 12530                           tblptru	equ	0xFF8
 12531                           tblptrh	equ	0xFF7
 12532                           tblptrl	equ	0xFF6
 12533                           tablat	equ	0xFF5
 12534                           prodh	equ	0xFF4
 12535                           prodl	equ	0xFF3
 12536                           intcon	equ	0xFF2
 12537                           intcon3	equ	0xFF0
 12538                           indf0	equ	0xFEF
 12539                           postinc0	equ	0xFEE
 12540                           plusw0	equ	0xFEB
 12541                           fsr0h	equ	0xFEA
 12542                           fsr0l	equ	0xFE9
 12543                           wreg	equ	0xFE8
 12544                           indf1	equ	0xFE7
 12545                           postinc1	equ	0xFE6
 12546                           postdec1	equ	0xFE5
 12547                           plusw1	equ	0xFE3
 12548                           fsr1h	equ	0xFE2
 12549                           fsr1l	equ	0xFE1
 12550                           indf2	equ	0xFDF
 12551                           postinc2	equ	0xFDE
 12552                           postdec2	equ	0xFDD
 12553                           plusw2	equ	0xFDB
 12554                           fsr2h	equ	0xFDA
 12555                           fsr2l	equ	0xFD9
 12556                           status	equ	0xFD8
 12557                           
 12558 ;; *************** function _ultoa *****************
 12559 ;; Defined at:
 12560 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ltoa.c"
 12561 ;; Parameters:    Size  Location     Type
 12562 ;;  buf             2   13[BANK0 ] PTR unsigned char 
 12563 ;;		 -> intToString@number(10), 
 12564 ;;  val             4   15[BANK0 ] unsigned long 
 12565 ;;  base            2   19[BANK0 ] int 
 12566 ;; Auto vars:     Size  Location     Type
 12567 ;;  v               4   21[BANK0 ] unsigned long 
 12568 ;;  c               1   25[BANK0 ] unsigned char 
 12569 ;; Return value:  Size  Location     Type
 12570 ;;                  2   13[BANK0 ] PTR unsigned char 
 12571 ;; Registers used:
 12572 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12573 ;; Tracked objects:
 12574 ;;		On entry : 0/0
 12575 ;;		On exit  : 0/0
 12576 ;;		Unchanged: 0/0
 12577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12578 ;;      Params:         0       8       0       0       0       0       0       0       0
 12579 ;;      Locals:         0       5       0       0       0       0       0       0       0
 12580 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12581 ;;      Totals:         0      13       0       0       0       0       0       0       0
 12582 ;;Total ram usage:       13 bytes
 12583 ;; Hardware stack levels used:    1
 12584 ;; Hardware stack levels required when called:    5
 12585 ;; This function calls:
 12586 ;;		___lldiv
 12587 ;;		___llmod
 12588 ;; This function is called by:
 12589 ;;		_ltoa
 12590 ;; This function uses a non-reentrant model
 12591 ;;
 12592                           
 12593                           	psect	text40
 12594  003C52                     __ptext40:
 12595                           	opt stack 0
 12596  003C52                     _ultoa:
 12597                           	opt stack 22
 12598                           
 12599                           ;incstack = 0
 12600  003C52  C06F  F075         	movff	ultoa@val,ultoa@v
 12601  003C56  C070  F076         	movff	ultoa@val+1,ultoa@v+1
 12602  003C5A  C071  F077         	movff	ultoa@val+2,ultoa@v+2
 12603  003C5E  C072  F078         	movff	ultoa@val+3,ultoa@v+3
 12604  003C62  C075  F060         	movff	ultoa@v,___lldiv@dividend
 12605  003C66  C076  F061         	movff	ultoa@v+1,___lldiv@dividend+1
 12606  003C6A  C077  F062         	movff	ultoa@v+2,___lldiv@dividend+2
 12607  003C6E  C078  F063         	movff	ultoa@v+3,___lldiv@dividend+3
 12608  003C72  C073  F064         	movff	ultoa@base,___lldiv@divisor
 12609  003C76  C074  F065         	movff	ultoa@base+1,___lldiv@divisor+1
 12610  003C7A  0100               	movlb	0	; () banked
 12611  003C7C  0E00               	movlw	0
 12612  003C7E  BF65               	btfsc	(___lldiv@divisor+1)& (0+255),7,b
 12613  003C80  0EFF               	movlw	-1
 12614  003C82  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
 12615  003C84  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
 12616  003C86  EC1F  F023         	call	___lldiv	;wreg free
 12617  003C8A  C060  F075         	movff	?___lldiv,ultoa@v
 12618  003C8E  C061  F076         	movff	?___lldiv+1,ultoa@v+1
 12619  003C92  C062  F077         	movff	?___lldiv+2,ultoa@v+2
 12620  003C96  C063  F078         	movff	?___lldiv+3,ultoa@v+3
 12621  003C9A  0100               	movlb	0	; () banked
 12622  003C9C  4B6D               	infsnz	ultoa@buf& (0+255),f,b
 12623  003C9E  2B6E               	incf	(ultoa@buf+1)& (0+255),f,b
 12624                           
 12625                           ; BSR set to: 0
 12626  003CA0  5175               	movf	ultoa@v& (0+255),w,b
 12627  003CA2  1176               	iorwf	(ultoa@v+1)& (0+255),w,b
 12628  003CA4  1177               	iorwf	(ultoa@v+2)& (0+255),w,b
 12629  003CA6  1178               	iorwf	(ultoa@v+3)& (0+255),w,b
 12630  003CA8  A4D8               	btfss	status,2,c
 12631  003CAA  D7DB               	goto	l1623
 12632                           
 12633                           ; BSR set to: 0
 12634                           
 12635                           ; BSR set to: 0
 12636  003CAC  C06D  FFD9         	movff	ultoa@buf,fsr2l
 12637  003CB0  C06E  FFDA         	movff	ultoa@buf+1,fsr2h
 12638  003CB4  0E00               	movlw	0
 12639  003CB6  6EDF               	movwf	indf2,c
 12640                           
 12641                           ; BSR set to: 0
 12642  003CB8  076D               	decf	ultoa@buf& (0+255),f,b
 12643  003CBA  A0D8               	btfss	status,0,c
 12644  003CBC  076E               	decf	(ultoa@buf+1)& (0+255),f,b
 12645  003CBE                     
 12646                           ; BSR set to: 0
 12647                           
 12648                           ; BSR set to: 0
 12649  003CBE  C06F  F060         	movff	ultoa@val,___llmod@dividend
 12650  003CC2  C070  F061         	movff	ultoa@val+1,___llmod@dividend+1
 12651  003CC6  C071  F062         	movff	ultoa@val+2,___llmod@dividend+2
 12652  003CCA  C072  F063         	movff	ultoa@val+3,___llmod@dividend+3
 12653  003CCE  C073  F064         	movff	ultoa@base,___llmod@divisor
 12654  003CD2  C074  F065         	movff	ultoa@base+1,___llmod@divisor+1
 12655  003CD6  0E00               	movlw	0
 12656  003CD8  BF65               	btfsc	(___llmod@divisor+1)& (0+255),7,b
 12657  003CDA  0EFF               	movlw	-1
 12658  003CDC  6F66               	movwf	(___llmod@divisor+2)& (0+255),b
 12659  003CDE  6F67               	movwf	(___llmod@divisor+3)& (0+255),b
 12660  003CE0  ECEC  F025         	call	___llmod	;wreg free
 12661  003CE4  0100               	movlb	0	; () banked
 12662  003CE6  5160               	movf	?___llmod& (0+255),w,b
 12663  003CE8  6F79               	movwf	ultoa@c& (0+255),b
 12664                           
 12665                           ; BSR set to: 0
 12666  003CEA  C06F  F060         	movff	ultoa@val,___lldiv@dividend
 12667  003CEE  C070  F061         	movff	ultoa@val+1,___lldiv@dividend+1
 12668  003CF2  C071  F062         	movff	ultoa@val+2,___lldiv@dividend+2
 12669  003CF6  C072  F063         	movff	ultoa@val+3,___lldiv@dividend+3
 12670  003CFA  C073  F064         	movff	ultoa@base,___lldiv@divisor
 12671  003CFE  C074  F065         	movff	ultoa@base+1,___lldiv@divisor+1
 12672  003D02  0E00               	movlw	0
 12673  003D04  BF65               	btfsc	(___lldiv@divisor+1)& (0+255),7,b
 12674  003D06  0EFF               	movlw	-1
 12675  003D08  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
 12676  003D0A  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
 12677  003D0C  EC1F  F023         	call	___lldiv	;wreg free
 12678  003D10  C060  F06F         	movff	?___lldiv,ultoa@val
 12679  003D14  C061  F070         	movff	?___lldiv+1,ultoa@val+1
 12680  003D18  C062  F071         	movff	?___lldiv+2,ultoa@val+2
 12681  003D1C  C063  F072         	movff	?___lldiv+3,ultoa@val+3
 12682  003D20  0E09               	movlw	9
 12683  003D22  0100               	movlb	0	; () banked
 12684  003D24  6579               	cpfsgt	ultoa@c& (0+255),b
 12685  003D26  D002               	goto	l1626
 12686                           
 12687                           ; BSR set to: 0
 12688  003D28  0E07               	movlw	7
 12689  003D2A  2779               	addwf	ultoa@c& (0+255),f,b
 12690  003D2C                     l1626:
 12691                           
 12692                           ; BSR set to: 0
 12693  003D2C  0E30               	movlw	48
 12694  003D2E  2779               	addwf	ultoa@c& (0+255),f,b
 12695                           
 12696                           ; BSR set to: 0
 12697  003D30  C06D  FFD9         	movff	ultoa@buf,fsr2l
 12698  003D34  C06E  FFDA         	movff	ultoa@buf+1,fsr2h
 12699  003D38  C079  FFDF         	movff	ultoa@c,indf2
 12700                           
 12701                           ; BSR set to: 0
 12702  003D3C  076D               	decf	ultoa@buf& (0+255),f,b
 12703  003D3E  A0D8               	btfss	status,0,c
 12704  003D40  076E               	decf	(ultoa@buf+1)& (0+255),f,b
 12705                           
 12706                           ; BSR set to: 0
 12707  003D42  516F               	movf	ultoa@val& (0+255),w,b
 12708  003D44  1170               	iorwf	(ultoa@val+1)& (0+255),w,b
 12709  003D46  1171               	iorwf	(ultoa@val+2)& (0+255),w,b
 12710  003D48  1172               	iorwf	(ultoa@val+3)& (0+255),w,b
 12711  003D4A  B4D8               	btfsc	status,2,c
 12712  003D4C  0012               	return	
 12713  003D4E  D7B7               	goto	l1625
 12714  003D50                     __end_of_ultoa:
 12715                           	opt stack 0
 12716                           tblptru	equ	0xFF8
 12717                           tblptrh	equ	0xFF7
 12718                           tblptrl	equ	0xFF6
 12719                           tablat	equ	0xFF5
 12720                           prodh	equ	0xFF4
 12721                           prodl	equ	0xFF3
 12722                           intcon	equ	0xFF2
 12723                           intcon3	equ	0xFF0
 12724                           indf0	equ	0xFEF
 12725                           postinc0	equ	0xFEE
 12726                           plusw0	equ	0xFEB
 12727                           fsr0h	equ	0xFEA
 12728                           fsr0l	equ	0xFE9
 12729                           wreg	equ	0xFE8
 12730                           indf1	equ	0xFE7
 12731                           postinc1	equ	0xFE6
 12732                           postdec1	equ	0xFE5
 12733                           plusw1	equ	0xFE3
 12734                           fsr1h	equ	0xFE2
 12735                           fsr1l	equ	0xFE1
 12736                           indf2	equ	0xFDF
 12737                           postinc2	equ	0xFDE
 12738                           postdec2	equ	0xFDD
 12739                           plusw2	equ	0xFDB
 12740                           fsr2h	equ	0xFDA
 12741                           fsr2l	equ	0xFD9
 12742                           status	equ	0xFD8
 12743                           
 12744 ;; *************** function ___llmod *****************
 12745 ;; Defined at:
 12746 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
 12747 ;; Parameters:    Size  Location     Type
 12748 ;;  dividend        4    0[BANK0 ] unsigned long 
 12749 ;;  divisor         4    4[BANK0 ] unsigned long 
 12750 ;; Auto vars:     Size  Location     Type
 12751 ;;  counter         1    8[BANK0 ] unsigned char 
 12752 ;; Return value:  Size  Location     Type
 12753 ;;                  4    0[BANK0 ] unsigned long 
 12754 ;; Registers used:
 12755 ;;		wreg, status,2, status,0
 12756 ;; Tracked objects:
 12757 ;;		On entry : 0/0
 12758 ;;		On exit  : 0/0
 12759 ;;		Unchanged: 0/0
 12760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12761 ;;      Params:         0       8       0       0       0       0       0       0       0
 12762 ;;      Locals:         0       1       0       0       0       0       0       0       0
 12763 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12764 ;;      Totals:         0       9       0       0       0       0       0       0       0
 12765 ;;Total ram usage:        9 bytes
 12766 ;; Hardware stack levels used:    1
 12767 ;; Hardware stack levels required when called:    4
 12768 ;; This function calls:
 12769 ;;		Nothing
 12770 ;; This function is called by:
 12771 ;;		_ultoa
 12772 ;;		_arpEntryToString
 12773 ;; This function uses a non-reentrant model
 12774 ;;
 12775                           
 12776                           	psect	text41
 12777  004BD8                     __ptext41:
 12778                           	opt stack 0
 12779  004BD8                     ___llmod:
 12780                           	opt stack 22
 12781                           
 12782                           ; BSR set to: 0
 12783                           ;incstack = 0
 12784  004BD8  0100               	movlb	0	; () banked
 12785  004BDA  5164               	movf	___llmod@divisor& (0+255),w,b
 12786  004BDC  1165               	iorwf	(___llmod@divisor+1)& (0+255),w,b
 12787  004BDE  1166               	iorwf	(___llmod@divisor+2)& (0+255),w,b
 12788  004BE0  1167               	iorwf	(___llmod@divisor+3)& (0+255),w,b
 12789  004BE2  B4D8               	btfsc	status,2,c
 12790  004BE4  D024               	goto	l1585
 12791                           
 12792                           ; BSR set to: 0
 12793  004BE6  0E01               	movlw	1
 12794  004BE8  6F68               	movwf	___llmod@counter& (0+255),b
 12795  004BEA  D006               	goto	l1580
 12796  004BEC                     
 12797                           ; BSR set to: 0
 12798                           
 12799                           ; BSR set to: 0
 12800  004BEC  90D8               	bcf	status,0,c
 12801  004BEE  3764               	rlcf	___llmod@divisor& (0+255),f,b
 12802  004BF0  3765               	rlcf	(___llmod@divisor+1)& (0+255),f,b
 12803  004BF2  3766               	rlcf	(___llmod@divisor+2)& (0+255),f,b
 12804  004BF4  3767               	rlcf	(___llmod@divisor+3)& (0+255),f,b
 12805  004BF6  2B68               	incf	___llmod@counter& (0+255),f,b
 12806  004BF8                     l1580:
 12807                           
 12808                           ; BSR set to: 0
 12809                           
 12810                           ; BSR set to: 0
 12811  004BF8  AF67               	btfss	(___llmod@divisor+3)& (0+255),7,b
 12812  004BFA  D7F8               	goto	l1581
 12813  004BFC                     u9480:
 12814                           
 12815                           ; BSR set to: 0
 12816                           
 12817                           ; BSR set to: 0
 12818                           
 12819                           ; BSR set to: 0
 12820  004BFC  5164               	movf	___llmod@divisor& (0+255),w,b
 12821  004BFE  5D60               	subwf	___llmod@dividend& (0+255),w,b
 12822  004C00  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
 12823  004C02  5961               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 12824  004C04  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
 12825  004C06  5962               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 12826  004C08  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
 12827  004C0A  5963               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 12828  004C0C  A0D8               	btfss	status,0,c
 12829  004C0E  D008               	goto	l1584
 12830                           
 12831                           ; BSR set to: 0
 12832  004C10  5164               	movf	___llmod@divisor& (0+255),w,b
 12833  004C12  5F60               	subwf	___llmod@dividend& (0+255),f,b
 12834  004C14  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
 12835  004C16  5B61               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 12836  004C18  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
 12837  004C1A  5B62               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 12838  004C1C  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
 12839  004C1E  5B63               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 12840  004C20                     l1584:
 12841                           
 12842                           ; BSR set to: 0
 12843                           
 12844                           ; BSR set to: 0
 12845  004C20  90D8               	bcf	status,0,c
 12846  004C22  3367               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 12847  004C24  3366               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 12848  004C26  3365               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 12849  004C28  3364               	rrcf	___llmod@divisor& (0+255),f,b
 12850                           
 12851                           ; BSR set to: 0
 12852  004C2A  2F68               	decfsz	___llmod@counter& (0+255),f,b
 12853  004C2C  D7E7               	goto	u9480
 12854  004C2E                     l1585:
 12855                           
 12856                           ; BSR set to: 0
 12857                           
 12858                           ; BSR set to: 0
 12859  004C2E  C060  F060         	movff	___llmod@dividend,?___llmod
 12860  004C32  C061  F061         	movff	___llmod@dividend+1,?___llmod+1
 12861  004C36  C062  F062         	movff	___llmod@dividend+2,?___llmod+2
 12862  004C3A  C063  F063         	movff	___llmod@dividend+3,?___llmod+3
 12863                           
 12864                           ; BSR set to: 0
 12865  004C3E  0012               	return		;funcret
 12866  004C40                     __end_of___llmod:
 12867                           	opt stack 0
 12868                           tblptru	equ	0xFF8
 12869                           tblptrh	equ	0xFF7
 12870                           tblptrl	equ	0xFF6
 12871                           tablat	equ	0xFF5
 12872                           prodh	equ	0xFF4
 12873                           prodl	equ	0xFF3
 12874                           intcon	equ	0xFF2
 12875                           intcon3	equ	0xFF0
 12876                           indf0	equ	0xFEF
 12877                           postinc0	equ	0xFEE
 12878                           plusw0	equ	0xFEB
 12879                           fsr0h	equ	0xFEA
 12880                           fsr0l	equ	0xFE9
 12881                           wreg	equ	0xFE8
 12882                           indf1	equ	0xFE7
 12883                           postinc1	equ	0xFE6
 12884                           postdec1	equ	0xFE5
 12885                           plusw1	equ	0xFE3
 12886                           fsr1h	equ	0xFE2
 12887                           fsr1l	equ	0xFE1
 12888                           indf2	equ	0xFDF
 12889                           postinc2	equ	0xFDE
 12890                           postdec2	equ	0xFDD
 12891                           plusw2	equ	0xFDB
 12892                           fsr2h	equ	0xFDA
 12893                           fsr2l	equ	0xFD9
 12894                           status	equ	0xFD8
 12895                           
 12896 ;; *************** function ___lldiv *****************
 12897 ;; Defined at:
 12898 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 12899 ;; Parameters:    Size  Location     Type
 12900 ;;  dividend        4    0[BANK0 ] unsigned long 
 12901 ;;  divisor         4    4[BANK0 ] unsigned long 
 12902 ;; Auto vars:     Size  Location     Type
 12903 ;;  quotient        4    8[BANK0 ] unsigned long 
 12904 ;;  counter         1   12[BANK0 ] unsigned char 
 12905 ;; Return value:  Size  Location     Type
 12906 ;;                  4    0[BANK0 ] unsigned long 
 12907 ;; Registers used:
 12908 ;;		wreg, status,2, status,0
 12909 ;; Tracked objects:
 12910 ;;		On entry : 0/0
 12911 ;;		On exit  : 0/0
 12912 ;;		Unchanged: 0/0
 12913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12914 ;;      Params:         0       8       0       0       0       0       0       0       0
 12915 ;;      Locals:         0       5       0       0       0       0       0       0       0
 12916 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12917 ;;      Totals:         0      13       0       0       0       0       0       0       0
 12918 ;;Total ram usage:       13 bytes
 12919 ;; Hardware stack levels used:    1
 12920 ;; Hardware stack levels required when called:    4
 12921 ;; This function calls:
 12922 ;;		Nothing
 12923 ;; This function is called by:
 12924 ;;		_ultoa
 12925 ;; This function uses a non-reentrant model
 12926 ;;
 12927                           
 12928                           	psect	text42
 12929  00463E                     __ptext42:
 12930                           	opt stack 0
 12931  00463E                     ___lldiv:
 12932                           	opt stack 22
 12933                           
 12934                           ; BSR set to: 0
 12935                           ;incstack = 0
 12936  00463E  0E00               	movlw	0
 12937  004640  0100               	movlb	0	; () banked
 12938  004642  6F68               	movwf	___lldiv@quotient& (0+255),b
 12939  004644  0E00               	movlw	0
 12940  004646  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
 12941  004648  0E00               	movlw	0
 12942  00464A  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
 12943  00464C  0E00               	movlw	0
 12944  00464E  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
 12945                           
 12946                           ; BSR set to: 0
 12947  004650  5164               	movf	___lldiv@divisor& (0+255),w,b
 12948  004652  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 12949  004654  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 12950  004656  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 12951  004658  B4D8               	btfsc	status,2,c
 12952  00465A  D02A               	goto	l1575
 12953                           
 12954                           ; BSR set to: 0
 12955  00465C  0E01               	movlw	1
 12956  00465E  6F6C               	movwf	___lldiv@counter& (0+255),b
 12957  004660  D006               	goto	l1570
 12958  004662                     
 12959                           ; BSR set to: 0
 12960                           
 12961                           ; BSR set to: 0
 12962  004662  90D8               	bcf	status,0,c
 12963  004664  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 12964  004666  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 12965  004668  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 12966  00466A  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 12967  00466C  2B6C               	incf	___lldiv@counter& (0+255),f,b
 12968  00466E                     l1570:
 12969                           
 12970                           ; BSR set to: 0
 12971                           
 12972                           ; BSR set to: 0
 12973  00466E  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 12974  004670  D7F8               	goto	l1571
 12975  004672                     u9450:
 12976                           
 12977                           ; BSR set to: 0
 12978                           
 12979                           ; BSR set to: 0
 12980                           
 12981                           ; BSR set to: 0
 12982  004672  90D8               	bcf	status,0,c
 12983  004674  3768               	rlcf	___lldiv@quotient& (0+255),f,b
 12984  004676  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 12985  004678  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 12986  00467A  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 12987                           
 12988                           ; BSR set to: 0
 12989  00467C  5164               	movf	___lldiv@divisor& (0+255),w,b
 12990  00467E  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 12991  004680  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 12992  004682  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 12993  004684  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 12994  004686  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 12995  004688  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 12996  00468A  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 12997  00468C  A0D8               	btfss	status,0,c
 12998  00468E  D009               	goto	l1574
 12999                           
 13000                           ; BSR set to: 0
 13001  004690  5164               	movf	___lldiv@divisor& (0+255),w,b
 13002  004692  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 13003  004694  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 13004  004696  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 13005  004698  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 13006  00469A  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 13007  00469C  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 13008  00469E  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 13009                           
 13010                           ; BSR set to: 0
 13011  0046A0  8168               	bsf	___lldiv@quotient& (0+255),0,b
 13012  0046A2                     l1574:
 13013                           
 13014                           ; BSR set to: 0
 13015                           
 13016                           ; BSR set to: 0
 13017  0046A2  90D8               	bcf	status,0,c
 13018  0046A4  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 13019  0046A6  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 13020  0046A8  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 13021  0046AA  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 13022                           
 13023                           ; BSR set to: 0
 13024  0046AC  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
 13025  0046AE  D7E1               	goto	u9450
 13026  0046B0                     l1575:
 13027                           
 13028                           ; BSR set to: 0
 13029                           
 13030                           ; BSR set to: 0
 13031  0046B0  C068  F060         	movff	___lldiv@quotient,?___lldiv
 13032  0046B4  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 13033  0046B8  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 13034  0046BC  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 13035                           
 13036                           ; BSR set to: 0
 13037  0046C0  0012               	return		;funcret
 13038  0046C2                     __end_of___lldiv:
 13039                           	opt stack 0
 13040                           tblptru	equ	0xFF8
 13041                           tblptrh	equ	0xFF7
 13042                           tblptrl	equ	0xFF6
 13043                           tablat	equ	0xFF5
 13044                           prodh	equ	0xFF4
 13045                           prodl	equ	0xFF3
 13046                           intcon	equ	0xFF2
 13047                           intcon3	equ	0xFF0
 13048                           indf0	equ	0xFEF
 13049                           postinc0	equ	0xFEE
 13050                           plusw0	equ	0xFEB
 13051                           fsr0h	equ	0xFEA
 13052                           fsr0l	equ	0xFE9
 13053                           wreg	equ	0xFE8
 13054                           indf1	equ	0xFE7
 13055                           postinc1	equ	0xFE6
 13056                           postdec1	equ	0xFE5
 13057                           plusw1	equ	0xFE3
 13058                           fsr1h	equ	0xFE2
 13059                           fsr1l	equ	0xFE1
 13060                           indf2	equ	0xFDF
 13061                           postinc2	equ	0xFDE
 13062                           postdec2	equ	0xFDD
 13063                           plusw2	equ	0xFDB
 13064                           fsr2h	equ	0xFDA
 13065                           fsr2l	equ	0xFD9
 13066                           status	equ	0xFD8
 13067                           
 13068 ;; *************** function _ethernetController_updateLinkStatus *****************
 13069 ;; Defined at:
 13070 ;;		line 394 in file "src/enc424j600/ENC424J600.c"
 13071 ;; Parameters:    Size  Location     Type
 13072 ;;  state           2   32[BANK0 ] PTR struct ethernetConne
 13073 ;;		 -> stack(123), 
 13074 ;; Auto vars:     Size  Location     Type
 13075 ;;  temp16          2   35[BANK0 ] unsigned int 
 13076 ;;  temp            1   34[BANK0 ] unsigned char 
 13077 ;; Return value:  Size  Location     Type
 13078 ;;                  1    wreg      void 
 13079 ;; Registers used:
 13080 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13081 ;; Tracked objects:
 13082 ;;		On entry : 0/0
 13083 ;;		On exit  : 0/0
 13084 ;;		Unchanged: 0/0
 13085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13086 ;;      Params:         0       2       0       0       0       0       0       0       0
 13087 ;;      Locals:         0       3       0       0       0       0       0       0       0
 13088 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13089 ;;      Totals:         0       5       0       0       0       0       0       0       0
 13090 ;;Total ram usage:        5 bytes
 13091 ;; Hardware stack levels used:    1
 13092 ;; Hardware stack levels required when called:    8
 13093 ;; This function calls:
 13094 ;;		_enc424j600_readControlRegisterUnbanked
 13095 ;;		_enc424j600_readPHYRegister
 13096 ;; This function is called by:
 13097 ;;		_handleStackBackgroundTasks
 13098 ;; This function uses a non-reentrant model
 13099 ;;
 13100                           
 13101                           	psect	text43
 13102  00452A                     __ptext43:
 13103                           	opt stack 0
 13104  00452A                     _ethernetController_updateLinkStatus:
 13105                           	opt stack 21
 13106                           
 13107                           ;ENC424J600.c: 395: uint8_t temp;
 13108                           ;ENC424J600.c: 396: uint16_t temp16;
 13109                           ;ENC424J600.c: 397: enc424j600_readControlRegisterUnbanked(0x1B, &temp);
 13110                           
 13111                           ; BSR set to: 0
 13112                           ;incstack = 0
 13113  00452A  0E82               	movlw	low ethernetController_updateLinkStatus@temp
 13114  00452C  0100               	movlb	0	; () banked
 13115  00452E  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 13116  004530  0E00               	movlw	high ethernetController_updateLinkStatus@temp
 13117  004532  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 13118  004534  0E1B               	movlw	27
 13119  004536  EC4B  F029         	call	_enc424j600_readControlRegisterUnbanked
 13120                           
 13121                           ;ENC424J600.c: 398: if (temp & 0x01) {
 13122  00453A  0100               	movlb	0	; () banked
 13123  00453C  A182               	btfss	ethernetController_updateLinkStatus@temp& (0+255),0,b
 13124  00453E  D006               	goto	l195
 13125                           
 13126                           ; BSR set to: 0
 13127                           ;ENC424J600.c: 399: state->link = LINK_ESTABLISHED;
 13128  004540  C080  FFD9         	movff	ethernetController_updateLinkStatus@state,fsr2l
 13129  004544  C081  FFDA         	movff	ethernetController_updateLinkStatus@state+1,fsr2h
 13130  004548  0E01               	movlw	1
 13131  00454A  D005               	goto	L2
 13132  00454C                     l195:
 13133                           
 13134                           ; BSR set to: 0
 13135                           ;ENC424J600.c: 401: state->link = NO_LINK;
 13136                           
 13137                           ; BSR set to: 0
 13138  00454C  C080  FFD9         	movff	ethernetController_updateLinkStatus@state,fsr2l
 13139  004550  C081  FFDA         	movff	ethernetController_updateLinkStatus@state+1,fsr2h
 13140  004554  0E00               	movlw	0
 13141  004556                     L2:
 13142  004556  6EDF               	movwf	indf2,c
 13143                           
 13144                           ; BSR set to: 0
 13145                           ;ENC424J600.c: 402: }
 13146                           ;ENC424J600.c: 404: enc424j600_readPHYRegister(0x1F, &temp16);
 13147                           
 13148                           ; BSR set to: 0
 13149  004558  0E83               	movlw	low ethernetController_updateLinkStatus@temp16
 13150  00455A  6F6E               	movwf	enc424j600_readPHYRegister@data& (0+255),b
 13151  00455C  0E00               	movlw	high ethernetController_updateLinkStatus@temp16
 13152  00455E  6F6F               	movwf	(enc424j600_readPHYRegister@data+1)& (0+255),b
 13153  004560  0E1F               	movlw	31
 13154  004562  EC00  F01C         	call	_enc424j600_readPHYRegister
 13155                           
 13156                           ;ENC424J600.c: 406: if (temp16 & (1 << 3)) {
 13157  004566  0100               	movlb	0	; () banked
 13158  004568  A783               	btfss	ethernetController_updateLinkStatus@temp16& (0+255),3,b
 13159  00456A  D008               	goto	l197
 13160                           
 13161                           ; BSR set to: 0
 13162                           ;ENC424J600.c: 407: state->speed = HUNDRED_MBIT;
 13163  00456C  EE20 F001          	lfsr	2,1
 13164  004570  5180               	movf	ethernetController_updateLinkStatus@state& (0+255),w,b
 13165  004572  26D9               	addwf	fsr2l,f,c
 13166  004574  5181               	movf	(ethernetController_updateLinkStatus@state+1)& (0+255),w,b
 13167  004576  22DA               	addwfc	fsr2h,f,c
 13168  004578  0E01               	movlw	1
 13169  00457A  D007               	goto	L3
 13170  00457C                     l197:
 13171                           
 13172                           ; BSR set to: 0
 13173                           ;ENC424J600.c: 409: state->speed = TEN_MBIT;
 13174                           
 13175                           ; BSR set to: 0
 13176  00457C  EE20 F001          	lfsr	2,1
 13177  004580  5180               	movf	ethernetController_updateLinkStatus@state& (0+255),w,b
 13178  004582  26D9               	addwf	fsr2l,f,c
 13179  004584  5181               	movf	(ethernetController_updateLinkStatus@state+1)& (0+255),w,b
 13180  004586  22DA               	addwfc	fsr2h,f,c
 13181  004588  0E00               	movlw	0
 13182  00458A                     L3:
 13183  00458A  6EDF               	movwf	indf2,c
 13184                           
 13185                           ; BSR set to: 0
 13186                           ;ENC424J600.c: 410: }
 13187                           ;ENC424J600.c: 412: if (temp16 & (1 << 4)) {
 13188                           
 13189                           ; BSR set to: 0
 13190  00458C  A983               	btfss	ethernetController_updateLinkStatus@temp16& (0+255),4,b
 13191  00458E  D009               	goto	l199
 13192                           
 13193                           ; BSR set to: 0
 13194                           ;ENC424J600.c: 413: state->duplex = FULL_DUPLEX;
 13195  004590  EE20 F002          	lfsr	2,2
 13196  004594  5180               	movf	ethernetController_updateLinkStatus@state& (0+255),w,b
 13197  004596  26D9               	addwf	fsr2l,f,c
 13198  004598  5181               	movf	(ethernetController_updateLinkStatus@state+1)& (0+255),w,b
 13199  00459A  22DA               	addwfc	fsr2h,f,c
 13200  00459C  0E01               	movlw	1
 13201  00459E  6EDF               	movwf	indf2,c
 13202                           
 13203                           ;ENC424J600.c: 414: } else {
 13204  0045A0  0012               	return	
 13205  0045A2                     l199:
 13206                           
 13207                           ; BSR set to: 0
 13208                           ;ENC424J600.c: 415: state->duplex = HALF_DUPLEX;
 13209                           
 13210                           ; BSR set to: 0
 13211  0045A2  EE20 F002          	lfsr	2,2
 13212  0045A6  5180               	movf	ethernetController_updateLinkStatus@state& (0+255),w,b
 13213  0045A8  26D9               	addwf	fsr2l,f,c
 13214  0045AA  5181               	movf	(ethernetController_updateLinkStatus@state+1)& (0+255),w,b
 13215  0045AC  22DA               	addwfc	fsr2h,f,c
 13216  0045AE  0E00               	movlw	0
 13217  0045B0  6EDF               	movwf	indf2,c
 13218  0045B2  0012               	return	
 13219  0045B4                     __end_of_ethernetController_updateLinkStatus:
 13220                           	opt stack 0
 13221                           tblptru	equ	0xFF8
 13222                           tblptrh	equ	0xFF7
 13223                           tblptrl	equ	0xFF6
 13224                           tablat	equ	0xFF5
 13225                           prodh	equ	0xFF4
 13226                           prodl	equ	0xFF3
 13227                           intcon	equ	0xFF2
 13228                           intcon3	equ	0xFF0
 13229                           indf0	equ	0xFEF
 13230                           postinc0	equ	0xFEE
 13231                           plusw0	equ	0xFEB
 13232                           fsr0h	equ	0xFEA
 13233                           fsr0l	equ	0xFE9
 13234                           wreg	equ	0xFE8
 13235                           indf1	equ	0xFE7
 13236                           postinc1	equ	0xFE6
 13237                           postdec1	equ	0xFE5
 13238                           plusw1	equ	0xFE3
 13239                           fsr1h	equ	0xFE2
 13240                           fsr1l	equ	0xFE1
 13241                           indf2	equ	0xFDF
 13242                           postinc2	equ	0xFDE
 13243                           postdec2	equ	0xFDD
 13244                           plusw2	equ	0xFDB
 13245                           fsr2h	equ	0xFDA
 13246                           fsr2l	equ	0xFD9
 13247                           status	equ	0xFD8
 13248                           
 13249 ;; *************** function _enc424j600_readPHYRegister *****************
 13250 ;; Defined at:
 13251 ;;		line 538 in file "src/enc424j600/ENC424J600.c"
 13252 ;; Parameters:    Size  Location     Type
 13253 ;;  addr            1    wreg     unsigned char 
 13254 ;;  data            2   14[BANK0 ] PTR unsigned int 
 13255 ;;		 -> ethernetController_updateLinkStatus@temp16(2), 
 13256 ;; Auto vars:     Size  Location     Type
 13257 ;;  addr            1   22[BANK0 ] unsigned char 
 13258 ;;  timeoutCount    4   25[BANK0 ] unsigned long 
 13259 ;;  temp            1   31[BANK0 ] unsigned char 
 13260 ;;  highByte        1   30[BANK0 ] unsigned char 
 13261 ;;  lowByte         1   29[BANK0 ] unsigned char 
 13262 ;;  unusedBits      1   24[BANK0 ] unsigned char 
 13263 ;;  PHYaddress      1   23[BANK0 ] unsigned char 
 13264 ;; Return value:  Size  Location     Type
 13265 ;;                  1    wreg      void 
 13266 ;; Registers used:
 13267 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13268 ;; Tracked objects:
 13269 ;;		On entry : 0/0
 13270 ;;		On exit  : 0/0
 13271 ;;		Unchanged: 0/0
 13272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13273 ;;      Params:         0       2       0       0       0       0       0       0       0
 13274 ;;      Locals:         0      10       0       0       0       0       0       0       0
 13275 ;;      Temps:          0       6       0       0       0       0       0       0       0
 13276 ;;      Totals:         0      18       0       0       0       0       0       0       0
 13277 ;;Total ram usage:       18 bytes
 13278 ;; Hardware stack levels used:    1
 13279 ;; Hardware stack levels required when called:    7
 13280 ;; This function calls:
 13281 ;;		_enc424j600_readControlRegisterUnbanked
 13282 ;;		_enc424j600_writeControlRegisterUnbanked
 13283 ;; This function is called by:
 13284 ;;		_ethernetController_updateLinkStatus
 13285 ;; This function uses a non-reentrant model
 13286 ;;
 13287                           
 13288                           	psect	text44
 13289  003800                     __ptext44:
 13290                           	opt stack 0
 13291  003800                     _enc424j600_readPHYRegister:
 13292                           	opt stack 21
 13293                           
 13294                           ; BSR set to: 0
 13295                           ;incstack = 0
 13296                           ;enc424j600_readPHYRegister@addr stored from wreg
 13297  003800  0100               	movlb	0	; () banked
 13298  003802  6F76               	movwf	enc424j600_readPHYRegister@addr& (0+255),b
 13299                           
 13300                           ;ENC424J600.c: 540: uint8_t PHYaddress = addr & 0x1F;
 13301  003804  0100               	movlb	0	; () banked
 13302  003806  5176               	movf	enc424j600_readPHYRegister@addr& (0+255),w,b
 13303  003808  0B1F               	andlw	31
 13304  00380A  6F77               	movwf	enc424j600_readPHYRegister@PHYaddress& (0+255),b
 13305                           
 13306                           ; BSR set to: 0
 13307                           ;ENC424J600.c: 541: uint8_t unusedBits = 0x01;
 13308  00380C  0E01               	movlw	1
 13309  00380E  6F78               	movwf	enc424j600_readPHYRegister@unusedBits& (0+255),b
 13310                           
 13311                           ; BSR set to: 0
 13312                           ;ENC424J600.c: 542: uint8_t temp;
 13313                           ;ENC424J600.c: 543: uint8_t lowByte;
 13314                           ;ENC424J600.c: 544: uint8_t highByte;
 13315                           ;ENC424J600.c: 545: uint32_t timeoutCounter = 0;
 13316  003810  0E00               	movlw	0
 13317  003812  6F79               	movwf	enc424j600_readPHYRegister@timeoutCounter& (0+255),b
 13318  003814  0E00               	movlw	0
 13319  003816  6F7A               	movwf	(enc424j600_readPHYRegister@timeoutCounter+1)& (0+255),b
 13320  003818  0E00               	movlw	0
 13321  00381A  6F7B               	movwf	(enc424j600_readPHYRegister@timeoutCounter+2)& (0+255),b
 13322  00381C  0E00               	movlw	0
 13323  00381E  6F7C               	movwf	(enc424j600_readPHYRegister@timeoutCounter+3)& (0+255),b
 13324                           
 13325                           ; BSR set to: 0
 13326                           ;ENC424J600.c: 547: enc424j600_writeControlRegisterUnbanked(0x14 + 0x40, &PHYaddress);
 13327  003820  0E77               	movlw	low enc424j600_readPHYRegister@PHYaddress
 13328  003822  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 13329  003824  0E00               	movlw	high enc424j600_readPHYRegister@PHYaddress
 13330  003826  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 13331  003828  0E54               	movlw	84
 13332  00382A  EC30  F029         	call	_enc424j600_writeControlRegisterUnbanked
 13333                           
 13334                           ;ENC424J600.c: 548: enc424j600_writeControlRegisterUnbanked(0x15 + 0x40, &unusedBits);
 13335  00382E  0E78               	movlw	low enc424j600_readPHYRegister@unusedBits
 13336  003830  0100               	movlb	0	; () banked
 13337  003832  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 13338  003834  0E00               	movlw	high enc424j600_readPHYRegister@unusedBits
 13339  003836  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 13340  003838  0E55               	movlw	85
 13341  00383A  EC30  F029         	call	_enc424j600_writeControlRegisterUnbanked
 13342                           
 13343                           ;ENC424J600.c: 551: enc424j600_readControlRegisterUnbanked(0x12 + 0x40, &temp);
 13344  00383E  0E7F               	movlw	low enc424j600_readPHYRegister@temp
 13345  003840  0100               	movlb	0	; () banked
 13346  003842  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 13347  003844  0E00               	movlw	high enc424j600_readPHYRegister@temp
 13348  003846  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 13349  003848  0E52               	movlw	82
 13350  00384A  EC4B  F029         	call	_enc424j600_readControlRegisterUnbanked
 13351                           
 13352                           ;ENC424J600.c: 552: temp |= 0x01;
 13353  00384E  0100               	movlb	0	; () banked
 13354  003850  817F               	bsf	enc424j600_readPHYRegister@temp& (0+255),0,b
 13355                           
 13356                           ; BSR set to: 0
 13357                           ;ENC424J600.c: 553: enc424j600_writeControlRegisterUnbanked(0x12 + 0x40, &temp);
 13358  003852  0E7F               	movlw	low enc424j600_readPHYRegister@temp
 13359  003854  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 13360  003856  0E00               	movlw	high enc424j600_readPHYRegister@temp
 13361  003858  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 13362  00385A  0E52               	movlw	82
 13363  00385C  EC30  F029         	call	_enc424j600_writeControlRegisterUnbanked
 13364                           
 13365                           ;ENC424J600.c: 555: _delay((unsigned long)((26)*(32000000UL/4000000.0)));
 13366  003860  0E45               	movlw	69
 13367  003862                     u12687:
 13368  003862  2EE8               	decfsz	wreg,f,c
 13369  003864  D7FE               	bra	u12687
 13370  003866  F000               	nop	
 13371  003868                     
 13372                           ;ENC424J600.c: 558: enc424j600_readControlRegisterUnbanked(0x0A + 0x60, &temp);
 13373  003868  0E7F               	movlw	low enc424j600_readPHYRegister@temp
 13374  00386A  0100               	movlb	0	; () banked
 13375  00386C  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 13376  00386E  0E00               	movlw	high enc424j600_readPHYRegister@temp
 13377  003870  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 13378  003872  0E6A               	movlw	106
 13379  003874  EC4B  F029         	call	_enc424j600_readControlRegisterUnbanked
 13380                           
 13381                           ;ENC424J600.c: 559: timeoutCounter++;
 13382  003878  0E01               	movlw	1
 13383  00387A  0100               	movlb	0	; () banked
 13384  00387C  2779               	addwf	enc424j600_readPHYRegister@timeoutCounter& (0+255),f,b
 13385  00387E  0E00               	movlw	0
 13386  003880  237A               	addwfc	(enc424j600_readPHYRegister@timeoutCounter+1)& (0+255),f,b
 13387  003882  237B               	addwfc	(enc424j600_readPHYRegister@timeoutCounter+2)& (0+255),f,b
 13388  003884  237C               	addwfc	(enc424j600_readPHYRegister@timeoutCounter+3)& (0+255),f,b
 13389                           
 13390                           ; BSR set to: 0
 13391                           ;ENC424J600.c: 560: } while ((temp & 0x01) && (timeoutCounter < 0xfff));
 13392  003886  A17F               	btfss	enc424j600_readPHYRegister@temp& (0+255),0,b
 13393  003888  D008               	goto	u11290
 13394                           
 13395                           ; BSR set to: 0
 13396  00388A  517C               	movf	(enc424j600_readPHYRegister@timeoutCounter+3)& (0+255),w,b
 13397  00388C  117B               	iorwf	(enc424j600_readPHYRegister@timeoutCounter+2)& (0+255),w,b
 13398  00388E  E105               	bnz	l9707
 13399  003890  2979               	incf	enc424j600_readPHYRegister@timeoutCounter& (0+255),w,b
 13400  003892  0E0F               	movlw	15
 13401  003894  597A               	subwfb	(enc424j600_readPHYRegister@timeoutCounter+1)& (0+255),w,b
 13402  003896  A0D8               	btfss	status,0,c
 13403  003898  D7E7               	goto	l258
 13404  00389A                     u11290:
 13405  00389A                     l9707:
 13406                           
 13407                           ; BSR set to: 0
 13408                           ;ENC424J600.c: 561: if (timeoutCounter >= 0xfff)
 13409  00389A  517C               	movf	(enc424j600_readPHYRegister@timeoutCounter+3)& (0+255),w,b
 13410  00389C  117B               	iorwf	(enc424j600_readPHYRegister@timeoutCounter+2)& (0+255),w,b
 13411  00389E  E140               	bnz	l263
 13412  0038A0  2979               	incf	enc424j600_readPHYRegister@timeoutCounter& (0+255),w,b
 13413  0038A2  0E0F               	movlw	15
 13414  0038A4  597A               	subwfb	(enc424j600_readPHYRegister@timeoutCounter+1)& (0+255),w,b
 13415  0038A6  B0D8               	btfsc	status,0,c
 13416  0038A8  0012               	return	
 13417                           
 13418                           ; BSR set to: 0
 13419                           ;ENC424J600.c: 565: enc424j600_readControlRegisterUnbanked(0x12 + 0x40, &temp);
 13420                           
 13421                           ; BSR set to: 0
 13422                           
 13423                           ; BSR set to: 0
 13424                           ;ENC424J600.c: 562: return;
 13425  0038AA  0E7F               	movlw	low enc424j600_readPHYRegister@temp
 13426  0038AC  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 13427  0038AE  0E00               	movlw	high enc424j600_readPHYRegister@temp
 13428  0038B0  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 13429  0038B2  0E52               	movlw	82
 13430  0038B4  EC4B  F029         	call	_enc424j600_readControlRegisterUnbanked
 13431                           
 13432                           ;ENC424J600.c: 566: temp &= ~0x01;
 13433  0038B8  0100               	movlb	0	; () banked
 13434  0038BA  917F               	bcf	enc424j600_readPHYRegister@temp& (0+255),0,b
 13435                           
 13436                           ; BSR set to: 0
 13437                           ;ENC424J600.c: 567: enc424j600_writeControlRegisterUnbanked(0x12 + 0x40, &temp);
 13438  0038BC  0E7F               	movlw	low enc424j600_readPHYRegister@temp
 13439  0038BE  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 13440  0038C0  0E00               	movlw	high enc424j600_readPHYRegister@temp
 13441  0038C2  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 13442  0038C4  0E52               	movlw	82
 13443  0038C6  EC30  F029         	call	_enc424j600_writeControlRegisterUnbanked
 13444                           
 13445                           ;ENC424J600.c: 570: enc424j600_readControlRegisterUnbanked(0x08 + 0x60, &lowByte);
 13446  0038CA  0E7D               	movlw	low enc424j600_readPHYRegister@lowByte
 13447  0038CC  0100               	movlb	0	; () banked
 13448  0038CE  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 13449  0038D0  0E00               	movlw	high enc424j600_readPHYRegister@lowByte
 13450  0038D2  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 13451  0038D4  0E68               	movlw	104
 13452  0038D6  EC4B  F029         	call	_enc424j600_readControlRegisterUnbanked
 13453                           
 13454                           ;ENC424J600.c: 571: enc424j600_readControlRegisterUnbanked(0x09 + 0x60, &highByte);
 13455  0038DA  0E7E               	movlw	low enc424j600_readPHYRegister@highByte
 13456  0038DC  0100               	movlb	0	; () banked
 13457  0038DE  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 13458  0038E0  0E00               	movlw	high enc424j600_readPHYRegister@highByte
 13459  0038E2  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 13460  0038E4  0E69               	movlw	105
 13461  0038E6  EC4B  F029         	call	_enc424j600_readControlRegisterUnbanked
 13462                           
 13463                           ;ENC424J600.c: 572: *data = (lowByte | ((highByte << 8)&0xff00));
 13464  0038EA  0E00               	movlw	0
 13465  0038EC  0100               	movlb	0	; () banked
 13466  0038EE  6F70               	movwf	??_enc424j600_readPHYRegister& (0+255),b
 13467  0038F0  0EFF               	movlw	255
 13468  0038F2  6F71               	movwf	(??_enc424j600_readPHYRegister+1)& (0+255),b
 13469  0038F4  517E               	movf	enc424j600_readPHYRegister@highByte& (0+255),w,b
 13470  0038F6  6F73               	movwf	(??_enc424j600_readPHYRegister+3)& (0+255),b
 13471  0038F8  6B72               	clrf	(??_enc424j600_readPHYRegister+2)& (0+255),b
 13472  0038FA  5170               	movf	??_enc424j600_readPHYRegister& (0+255),w,b
 13473  0038FC  1772               	andwf	(??_enc424j600_readPHYRegister+2)& (0+255),f,b
 13474  0038FE  5171               	movf	(??_enc424j600_readPHYRegister+1)& (0+255),w,b
 13475  003900  1773               	andwf	(??_enc424j600_readPHYRegister+3)& (0+255),f,b
 13476  003902  517D               	movf	enc424j600_readPHYRegister@lowByte& (0+255),w,b
 13477  003904  6F74               	movwf	(??_enc424j600_readPHYRegister+4)& (0+255),b
 13478  003906  6B75               	clrf	(??_enc424j600_readPHYRegister+5)& (0+255),b
 13479  003908  5172               	movf	(??_enc424j600_readPHYRegister+2)& (0+255),w,b
 13480  00390A  1374               	iorwf	(??_enc424j600_readPHYRegister+4)& (0+255),f,b
 13481  00390C  5173               	movf	(??_enc424j600_readPHYRegister+3)& (0+255),w,b
 13482  00390E  1375               	iorwf	(??_enc424j600_readPHYRegister+5)& (0+255),f,b
 13483  003910  C06E  FFD9         	movff	enc424j600_readPHYRegister@data,fsr2l
 13484  003914  C06F  FFDA         	movff	enc424j600_readPHYRegister@data+1,fsr2h
 13485  003918  C074  FFDE         	movff	??_enc424j600_readPHYRegister+4,postinc2
 13486  00391C  C075  FFDD         	movff	??_enc424j600_readPHYRegister+5,postdec2
 13487  003920                     l263:
 13488                           
 13489                           ; BSR set to: 0
 13490  003920  0012               	return		;funcret
 13491  003922                     __end_of_enc424j600_readPHYRegister:
 13492                           	opt stack 0
 13493                           tblptru	equ	0xFF8
 13494                           tblptrh	equ	0xFF7
 13495                           tblptrl	equ	0xFF6
 13496                           tablat	equ	0xFF5
 13497                           prodh	equ	0xFF4
 13498                           prodl	equ	0xFF3
 13499                           intcon	equ	0xFF2
 13500                           intcon3	equ	0xFF0
 13501                           indf0	equ	0xFEF
 13502                           postinc0	equ	0xFEE
 13503                           plusw0	equ	0xFEB
 13504                           fsr0h	equ	0xFEA
 13505                           fsr0l	equ	0xFE9
 13506                           wreg	equ	0xFE8
 13507                           indf1	equ	0xFE7
 13508                           postinc1	equ	0xFE6
 13509                           postdec1	equ	0xFE5
 13510                           plusw1	equ	0xFE3
 13511                           fsr1h	equ	0xFE2
 13512                           fsr1l	equ	0xFE1
 13513                           indf2	equ	0xFDF
 13514                           postinc2	equ	0xFDE
 13515                           postdec2	equ	0xFDD
 13516                           plusw2	equ	0xFDB
 13517                           fsr2h	equ	0xFDA
 13518                           fsr2l	equ	0xFD9
 13519                           status	equ	0xFD8
 13520                           
 13521 ;; *************** function _ethernetController_setLEDConfig *****************
 13522 ;; Defined at:
 13523 ;;		line 419 in file "src/enc424j600/ENC424J600.c"
 13524 ;; Parameters:    Size  Location     Type
 13525 ;;  LED             1    wreg     enum E5570
 13526 ;;  conf            1   14[BANK0 ] enum E5574
 13527 ;; Auto vars:     Size  Location     Type
 13528 ;;  LED             1   15[BANK0 ] enum E5570
 13529 ;;  data            1   16[BANK0 ] unsigned char 
 13530 ;; Return value:  Size  Location     Type
 13531 ;;                  1    wreg      void 
 13532 ;; Registers used:
 13533 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13534 ;; Tracked objects:
 13535 ;;		On entry : 0/0
 13536 ;;		On exit  : 0/0
 13537 ;;		Unchanged: 0/0
 13538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13539 ;;      Params:         0       1       0       0       0       0       0       0       0
 13540 ;;      Locals:         0       2       0       0       0       0       0       0       0
 13541 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13542 ;;      Totals:         0       3       0       0       0       0       0       0       0
 13543 ;;Total ram usage:        3 bytes
 13544 ;; Hardware stack levels used:    1
 13545 ;; Hardware stack levels required when called:    7
 13546 ;; This function calls:
 13547 ;;		_enc424j600_readControlRegisterUnbanked
 13548 ;;		_enc424j600_writeControlRegisterUnbanked
 13549 ;; This function is called by:
 13550 ;;		_handleStackBackgroundTasks
 13551 ;;		_main
 13552 ;; This function uses a non-reentrant model
 13553 ;;
 13554                           
 13555                           	psect	text45
 13556  00449C                     __ptext45:
 13557                           	opt stack 0
 13558  00449C                     _ethernetController_setLEDConfig:
 13559                           	opt stack 22
 13560                           
 13561                           ; BSR set to: 0
 13562                           ;incstack = 0
 13563                           ;ethernetController_setLEDConfig@LED stored from wreg
 13564  00449C  0100               	movlb	0	; () banked
 13565  00449E  6F6F               	movwf	ethernetController_setLEDConfig@LED& (0+255),b
 13566                           
 13567                           ;ENC424J600.c: 420: uint8_t data;
 13568                           ;ENC424J600.c: 421: enc424j600_readControlRegisterUnbanked(0x15 + 0x60, &data);
 13569  0044A0  0E70               	movlw	low ethernetController_setLEDConfig@data
 13570  0044A2  0100               	movlb	0	; () banked
 13571  0044A4  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 13572  0044A6  0E00               	movlw	high ethernetController_setLEDConfig@data
 13573  0044A8  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 13574  0044AA  0E75               	movlw	117
 13575  0044AC  EC4B  F029         	call	_enc424j600_readControlRegisterUnbanked
 13576                           
 13577                           ;ENC424J600.c: 422: if (LED == LEDB) {
 13578  0044B0  0100               	movlb	0	; () banked
 13579  0044B2  056F               	decf	ethernetController_setLEDConfig@LED& (0+255),w,b
 13580  0044B4  B4D8               	btfsc	status,2,c
 13581  0044B6  D00B               	goto	l205
 13582  0044B8  D015               	goto	l204
 13583  0044BA                     
 13584                           ; BSR set to: 0
 13585                           ;ENC424J600.c: 427: data &= ~0x0f;
 13586                           
 13587                           ; BSR set to: 0
 13588                           
 13589                           ;ENC424J600.c: 426: case LED_OFF:
 13590                           
 13591                           ; BSR set to: 0
 13592  0044BA  0EF0               	movlw	240
 13593  0044BC  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 13594                           
 13595                           ; BSR set to: 0
 13596                           ;ENC424J600.c: 428: data |= 0x01;
 13597  0044BE  8170               	bsf	ethernetController_setLEDConfig@data& (0+255),0,b
 13598                           
 13599                           ;ENC424J600.c: 429: break;
 13600  0044C0  D02C               	goto	l216
 13601  0044C2                     
 13602                           ; BSR set to: 0
 13603                           ;ENC424J600.c: 431: data &= ~0x0f;
 13604                           
 13605                           ; BSR set to: 0
 13606  0044C2  0EF0               	movlw	240
 13607  0044C4  D018               	goto	L4
 13608  0044C6                     
 13609                           ; BSR set to: 0
 13610                           ;ENC424J600.c: 434: data &= ~0x0f;
 13611                           
 13612                           ; BSR set to: 0
 13613  0044C6  0EF0               	movlw	240
 13614  0044C8  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 13615                           
 13616                           ;ENC424J600.c: 435: data |= 0x06;
 13617  0044CA  0E06               	movlw	6
 13618  0044CC  D019               	goto	L5
 13619  0044CE                     l205:
 13620                           
 13621                           ; BSR set to: 0
 13622                           
 13623                           ; BSR set to: 0
 13624  0044CE  516E               	movf	ethernetController_setLEDConfig@conf& (0+255),w,b
 13625                           
 13626                           ; Switch size 1, requested type "space"
 13627                           ; Number of cases is 3, Range of values is 0 to 2
 13628                           ; switch strategies available:
 13629                           ; Name         Instructions Cycles
 13630                           ; simple_byte           10     6 (average)
 13631                           ;	Chosen strategy is simple_byte
 13632  0044D0  0A00               	xorlw	0	; case 0
 13633  0044D2  B4D8               	btfsc	status,2,c
 13634  0044D4  D7F6               	goto	l209
 13635  0044D6  0A01               	xorlw	1	; case 1
 13636  0044D8  B4D8               	btfsc	status,2,c
 13637  0044DA  D7EF               	goto	l206
 13638  0044DC  0A03               	xorlw	3	; case 2
 13639  0044DE  B4D8               	btfsc	status,2,c
 13640  0044E0  D7F2               	goto	l210
 13641  0044E2  D7EB               	goto	l206
 13642  0044E4                     l204:
 13643                           
 13644                           ; BSR set to: 0
 13645                           
 13646                           ; BSR set to: 0
 13647  0044E4  516F               	movf	ethernetController_setLEDConfig@LED& (0+255),w,b
 13648  0044E6  B4D8               	btfsc	status,2,c
 13649  0044E8  D00D               	goto	l213
 13650  0044EA  D017               	goto	l216
 13651  0044EC                     
 13652                           ; BSR set to: 0
 13653                           ;ENC424J600.c: 442: data &= ~(0x0f << 4);
 13654                           
 13655                           ; BSR set to: 0
 13656                           
 13657                           ;ENC424J600.c: 441: case LED_OFF:
 13658                           
 13659                           ; BSR set to: 0
 13660  0044EC  0E0F               	movlw	15
 13661  0044EE  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 13662                           
 13663                           ; BSR set to: 0
 13664                           ;ENC424J600.c: 443: data |= (0x01 << 4);
 13665  0044F0  8970               	bsf	ethernetController_setLEDConfig@data& (0+255),4,b
 13666                           
 13667                           ;ENC424J600.c: 444: break;
 13668  0044F2  D013               	goto	l216
 13669  0044F4                     
 13670                           ; BSR set to: 0
 13671                           ;ENC424J600.c: 446: data &= ~(0x0f << 4);
 13672                           
 13673                           ; BSR set to: 0
 13674  0044F4  0E0F               	movlw	15
 13675  0044F6                     L4:
 13676  0044F6  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 13677                           
 13678                           ;ENC424J600.c: 447: break;
 13679  0044F8  D010               	goto	l216
 13680  0044FA                     
 13681                           ; BSR set to: 0
 13682                           ;ENC424J600.c: 449: data &= ~(0x0f << 4);
 13683                           
 13684                           ; BSR set to: 0
 13685  0044FA  0E0F               	movlw	15
 13686  0044FC  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 13687                           
 13688                           ;ENC424J600.c: 450: data |= (0x06 << 4);
 13689  0044FE  0E60               	movlw	96
 13690  004500                     L5:
 13691  004500  1370               	iorwf	ethernetController_setLEDConfig@data& (0+255),f,b
 13692                           
 13693                           ; BSR set to: 0
 13694                           ;ENC424J600.c: 452: }
 13695                           
 13696                           ;ENC424J600.c: 451: break;
 13697  004502  D00B               	goto	l216
 13698  004504                     l213:
 13699                           
 13700                           ; BSR set to: 0
 13701                           
 13702                           ; BSR set to: 0
 13703  004504  516E               	movf	ethernetController_setLEDConfig@conf& (0+255),w,b
 13704                           
 13705                           ; Switch size 1, requested type "space"
 13706                           ; Number of cases is 3, Range of values is 0 to 2
 13707                           ; switch strategies available:
 13708                           ; Name         Instructions Cycles
 13709                           ; simple_byte           10     6 (average)
 13710                           ;	Chosen strategy is simple_byte
 13711  004506  0A00               	xorlw	0	; case 0
 13712  004508  B4D8               	btfsc	status,2,c
 13713  00450A  D7F4               	goto	l217
 13714  00450C  0A01               	xorlw	1	; case 1
 13715  00450E  B4D8               	btfsc	status,2,c
 13716  004510  D7ED               	goto	l214
 13717  004512  0A03               	xorlw	3	; case 2
 13718  004514  B4D8               	btfsc	status,2,c
 13719  004516  D7F1               	goto	l218
 13720  004518  D7E9               	goto	l214
 13721  00451A                     l216:
 13722                           
 13723                           ; BSR set to: 0
 13724                           ;ENC424J600.c: 453: }
 13725                           ;ENC424J600.c: 454: enc424j600_writeControlRegisterUnbanked(0x15 + 0x60, &data);
 13726                           
 13727                           ; BSR set to: 0
 13728                           
 13729                           ; BSR set to: 0
 13730                           
 13731                           ; BSR set to: 0
 13732  00451A  0E70               	movlw	low ethernetController_setLEDConfig@data
 13733  00451C  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 13734  00451E  0E00               	movlw	high ethernetController_setLEDConfig@data
 13735  004520  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 13736  004522  0E75               	movlw	117
 13737  004524  EC30  F029         	call	_enc424j600_writeControlRegisterUnbanked
 13738  004528  0012               	return		;funcret
 13739  00452A                     __end_of_ethernetController_setLEDConfig:
 13740                           	opt stack 0
 13741                           tblptru	equ	0xFF8
 13742                           tblptrh	equ	0xFF7
 13743                           tblptrl	equ	0xFF6
 13744                           tablat	equ	0xFF5
 13745                           prodh	equ	0xFF4
 13746                           prodl	equ	0xFF3
 13747                           intcon	equ	0xFF2
 13748                           intcon3	equ	0xFF0
 13749                           indf0	equ	0xFEF
 13750                           postinc0	equ	0xFEE
 13751                           plusw0	equ	0xFEB
 13752                           fsr0h	equ	0xFEA
 13753                           fsr0l	equ	0xFE9
 13754                           wreg	equ	0xFE8
 13755                           indf1	equ	0xFE7
 13756                           postinc1	equ	0xFE6
 13757                           postdec1	equ	0xFE5
 13758                           plusw1	equ	0xFE3
 13759                           fsr1h	equ	0xFE2
 13760                           fsr1l	equ	0xFE1
 13761                           indf2	equ	0xFDF
 13762                           postinc2	equ	0xFDE
 13763                           postdec2	equ	0xFDD
 13764                           plusw2	equ	0xFDB
 13765                           fsr2h	equ	0xFDA
 13766                           fsr2l	equ	0xFD9
 13767                           status	equ	0xFD8
 13768                           
 13769 ;; *************** function _ethernetController_pollInterruptFlags *****************
 13770 ;; Defined at:
 13771 ;;		line 312 in file "src/enc424j600/ENC424J600.c"
 13772 ;; Parameters:    Size  Location     Type
 13773 ;;		None
 13774 ;; Auto vars:     Size  Location     Type
 13775 ;;  reg             2   32[BANK0 ] unsigned int 
 13776 ;;  flags           2   30[BANK0 ] struct interruptFlags
 13777 ;; Return value:  Size  Location     Type
 13778 ;;                  2   24[BANK0 ] struct interruptFlags
 13779 ;; Registers used:
 13780 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13781 ;; Tracked objects:
 13782 ;;		On entry : 0/0
 13783 ;;		On exit  : 0/0
 13784 ;;		Unchanged: 0/0
 13785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13786 ;;      Params:         0       2       0       0       0       0       0       0       0
 13787 ;;      Locals:         0       4       0       0       0       0       0       0       0
 13788 ;;      Temps:          0       4       0       0       0       0       0       0       0
 13789 ;;      Totals:         0      10       0       0       0       0       0       0       0
 13790 ;;Total ram usage:       10 bytes
 13791 ;; Hardware stack levels used:    1
 13792 ;; Hardware stack levels required when called:    8
 13793 ;; This function calls:
 13794 ;;		_enc424j600_getInterruptFlags
 13795 ;; This function is called by:
 13796 ;;		_handleStackBackgroundTasks
 13797 ;; This function uses a non-reentrant model
 13798 ;;
 13799                           
 13800                           	psect	text46
 13801  003444                     __ptext46:
 13802                           	opt stack 0
 13803  003444                     _ethernetController_pollInterruptFlags:
 13804                           	opt stack 21
 13805                           
 13806                           ;ENC424J600.c: 313: interruptFlags_t flags;
 13807                           ;ENC424J600.c: 314: uint16_t reg = enc424j600_getInterruptFlags();
 13808                           
 13809                           ;incstack = 0
 13810  003444  ECCE  F027         	call	_enc424j600_getInterruptFlags	;wreg free
 13811  003448  C06E  F080         	movff	?_enc424j600_getInterruptFlags,ethernetController_pollInterruptFlags@reg
 13812  00344C  C06F  F081         	movff	?_enc424j600_getInterruptFlags+1,ethernetController_pollInterruptFlags@reg+1
 13813                           
 13814                           ;ENC424J600.c: 315: flags.MODEXIF = (reg & (1 << MODEXIF)) != 0 ? 1 : 0;
 13815  003450  0100               	movlb	0	; () banked
 13816  003452  AD81               	btfss	(ethernetController_pollInterruptFlags@reg+1)& (0+255),6,b
 13817  003454  D003               	goto	u11650
 13818  003456  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13819  003458  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13820  00345A  D002               	goto	u11668
 13821  00345C                     u11650:
 13822  00345C  0100               	movlb	0	; () banked
 13823  00345E  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13824  003460                     u11668:
 13825  003460  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 13826  003462  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13827  003464  0BFE               	andlw	-2
 13828  003466  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13829  003468  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 13830                           
 13831                           ; BSR set to: 0
 13832                           ;ENC424J600.c: 316: flags.HASHIF = (reg & (1 << HASHIF)) != 0 ? 1 : 0;
 13833  00346A  AB81               	btfss	(ethernetController_pollInterruptFlags@reg+1)& (0+255),5,b
 13834  00346C  D003               	goto	u11670
 13835  00346E  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13836  003470  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13837  003472  D002               	goto	u11688
 13838  003474                     u11670:
 13839  003474  0100               	movlb	0	; () banked
 13840  003476  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13841  003478                     u11688:
 13842  003478  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13843  00347A  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 13844  00347C  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13845  00347E  0BFD               	andlw	-3
 13846  003480  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13847  003482  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 13848                           
 13849                           ; BSR set to: 0
 13850                           ;ENC424J600.c: 317: flags.AESIF = (reg & (1 << AESIF)) != 0 ? 1 : 0;
 13851  003484  A981               	btfss	(ethernetController_pollInterruptFlags@reg+1)& (0+255),4,b
 13852  003486  D003               	goto	u11690
 13853  003488  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13854  00348A  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13855  00348C  D002               	goto	u11708
 13856  00348E                     u11690:
 13857  00348E  0100               	movlb	0	; () banked
 13858  003490  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13859  003492                     u11708:
 13860  003492  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13861  003494  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13862  003496  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 13863  003498  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13864  00349A  0BFB               	andlw	-5
 13865  00349C  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13866  00349E  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 13867                           
 13868                           ; BSR set to: 0
 13869                           ;ENC424J600.c: 318: flags.LINKIF = (reg & (1 << LINKIF)) != 0 ? 1 : 0;
 13870  0034A0  A781               	btfss	(ethernetController_pollInterruptFlags@reg+1)& (0+255),3,b
 13871  0034A2  D003               	goto	u11710
 13872  0034A4  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13873  0034A6  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13874  0034A8  D002               	goto	u11728
 13875  0034AA                     u11710:
 13876  0034AA  0100               	movlb	0	; () banked
 13877  0034AC  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13878  0034AE                     u11728:
 13879  0034AE  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13880  0034B0  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13881  0034B2  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13882  0034B4  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 13883  0034B6  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13884  0034B8  0BF7               	andlw	-9
 13885  0034BA  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13886  0034BC  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 13887                           
 13888                           ; BSR set to: 0
 13889                           ;ENC424J600.c: 320: flags.PKTIF = (reg & (1 << PKTIF)) != 0 ? 1 : 0;
 13890  0034BE  AD80               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),6,b
 13891  0034C0  D003               	goto	u11730
 13892  0034C2  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13893  0034C4  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13894  0034C6  D002               	goto	u11748
 13895  0034C8                     u11730:
 13896  0034C8  0100               	movlb	0	; () banked
 13897  0034CA  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13898  0034CC                     u11748:
 13899  0034CC  3B7A               	swapf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13900  0034CE  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 13901  0034D0  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13902  0034D2  0BEF               	andlw	-17
 13903  0034D4  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13904  0034D6  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 13905                           
 13906                           ; BSR set to: 0
 13907                           ;ENC424J600.c: 321: flags.DMAIF = (reg & (1 << DMAIF)) != 0 ? 1 : 0;
 13908  0034D8  AB80               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),5,b
 13909  0034DA  D003               	goto	u11750
 13910  0034DC  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13911  0034DE  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13912  0034E0  D002               	goto	u11768
 13913  0034E2                     u11750:
 13914  0034E2  0100               	movlb	0	; () banked
 13915  0034E4  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13916  0034E6                     u11768:
 13917  0034E6  3B7A               	swapf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13918  0034E8  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13919  0034EA  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 13920  0034EC  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13921  0034EE  0BDF               	andlw	-33
 13922  0034F0  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13923  0034F2  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 13924                           
 13925                           ; BSR set to: 0
 13926                           ;ENC424J600.c: 323: flags.TXIF = (reg & (1 << TXIF)) != 0 ? 1 : 0;
 13927  0034F4  A89E               	btfss	3998,4,c	;volatile
 13928  0034F6  D003               	goto	u11770
 13929  0034F8  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13930  0034FA  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13931  0034FC  D002               	goto	u11788
 13932  0034FE                     u11770:
 13933  0034FE  0100               	movlb	0	; () banked
 13934  003500  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13935  003502                     u11788:
 13936  003502  0E01               	movlw	1
 13937  003504  6F7B               	movwf	(??_ethernetController_pollInterruptFlags+1)& (0+255),b
 13938  003506  0E00               	movlw	0
 13939  003508  6F7C               	movwf	(??_ethernetController_pollInterruptFlags+2)& (0+255),b
 13940  00350A  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13941  00350C  D003               	goto	u11794
 13942  00350E                     u11795:
 13943  00350E  90D8               	bcf	status,0,c
 13944  003510  377B               	rlcf	(??_ethernetController_pollInterruptFlags+1)& (0+255),f,b
 13945  003512  377C               	rlcf	(??_ethernetController_pollInterruptFlags+2)& (0+255),f,b
 13946  003514                     u11794:
 13947  003514  2F7A               	decfsz	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13948  003516  D7FB               	goto	u11795
 13949  003518  0100               	movlb	0	; () banked
 13950  00351A  5180               	movf	ethernetController_pollInterruptFlags@reg& (0+255),w,b
 13951  00351C  177B               	andwf	(??_ethernetController_pollInterruptFlags+1)& (0+255),f,b
 13952  00351E  5181               	movf	(ethernetController_pollInterruptFlags@reg+1)& (0+255),w,b
 13953  003520  177C               	andwf	(??_ethernetController_pollInterruptFlags+2)& (0+255),f,b
 13954  003522  517B               	movf	(??_ethernetController_pollInterruptFlags+1)& (0+255),w,b
 13955  003524  117C               	iorwf	(??_ethernetController_pollInterruptFlags+2)& (0+255),w,b
 13956  003526  B4D8               	btfsc	status,2,c
 13957  003528  D003               	goto	u11800
 13958  00352A  6B7D               	clrf	(??_ethernetController_pollInterruptFlags+3)& (0+255),b
 13959  00352C  2B7D               	incf	(??_ethernetController_pollInterruptFlags+3)& (0+255),f,b
 13960  00352E  D002               	goto	u11818
 13961  003530                     u11800:
 13962  003530  0100               	movlb	0	; () banked
 13963  003532  6B7D               	clrf	(??_ethernetController_pollInterruptFlags+3)& (0+255),b
 13964  003534                     u11818:
 13965  003534  3B7D               	swapf	(??_ethernetController_pollInterruptFlags+3)& (0+255),f,b
 13966  003536  477D               	rlncf	(??_ethernetController_pollInterruptFlags+3)& (0+255),f,b
 13967  003538  477D               	rlncf	(??_ethernetController_pollInterruptFlags+3)& (0+255),f,b
 13968  00353A  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 13969  00353C  197D               	xorwf	(??_ethernetController_pollInterruptFlags+3)& (0+255),w,b
 13970  00353E  0BBF               	andlw	-65
 13971  003540  197D               	xorwf	(??_ethernetController_pollInterruptFlags+3)& (0+255),w,b
 13972  003542  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 13973                           
 13974                           ; BSR set to: 0
 13975                           ;ENC424J600.c: 324: flags.TXABTIF = (reg & (1 << TXABTIF)) != 0 ? 1 : 0;
 13976  003544  A580               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),2,b
 13977  003546  D003               	goto	u11820
 13978  003548  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13979  00354A  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13980  00354C  D002               	goto	u11838
 13981  00354E                     u11820:
 13982  00354E  0100               	movlb	0	; () banked
 13983  003550  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13984  003552                     u11838:
 13985  003552  337A               	rrcf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13986  003554  337A               	rrcf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13987  003556  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 13988  003558  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13989  00355A  0B7F               	andlw	-129
 13990  00355C  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13991  00355E  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 13992                           
 13993                           ; BSR set to: 0
 13994                           ;ENC424J600.c: 325: flags.RXABTIF = (reg & (1 << RXABTIF)) != 0 ? 1 : 0;
 13995  003560  A380               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),1,b
 13996  003562  D003               	goto	u11840
 13997  003564  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13998  003566  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13999  003568  D002               	goto	u11858
 14000  00356A                     u11840:
 14001  00356A  0100               	movlb	0	; () banked
 14002  00356C  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 14003  00356E                     u11858:
 14004  00356E  517F               	movf	(ethernetController_pollInterruptFlags@flags+1)& (0+255),w,b
 14005  003570  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 14006  003572  0BFE               	andlw	-2
 14007  003574  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 14008  003576  6F7F               	movwf	(ethernetController_pollInterruptFlags@flags+1)& (0+255),b
 14009                           
 14010                           ; BSR set to: 0
 14011                           ;ENC424J600.c: 326: flags.PCFULIF = (reg & (1 << PCFULIF)) != 0 ? 1 : 0;
 14012  003578  A180               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),0,b
 14013  00357A  D003               	goto	u11860
 14014  00357C  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 14015  00357E  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 14016  003580  D002               	goto	u11878
 14017  003582                     u11860:
 14018  003582  0100               	movlb	0	; () banked
 14019  003584  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 14020  003586                     u11878:
 14021  003586  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 14022  003588  517F               	movf	(ethernetController_pollInterruptFlags@flags+1)& (0+255),w,b
 14023  00358A  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 14024  00358C  0BFD               	andlw	-3
 14025  00358E  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 14026  003590  6F7F               	movwf	(ethernetController_pollInterruptFlags@flags+1)& (0+255),b
 14027                           
 14028                           ; BSR set to: 0
 14029                           ;ENC424J600.c: 327: return flags;
 14030  003592  C07E  F078         	movff	ethernetController_pollInterruptFlags@flags,?_ethernetController_pollInterruptFla
      +                          gs
 14031  003596  C07F  F079         	movff	ethernetController_pollInterruptFlags@flags+1,?_ethernetController_pollInterruptF
      +                          lags+1
 14032  00359A  0012               	return	
 14033  00359C                     __end_of_ethernetController_pollInterruptFlags:
 14034                           	opt stack 0
 14035                           tblptru	equ	0xFF8
 14036                           tblptrh	equ	0xFF7
 14037                           tblptrl	equ	0xFF6
 14038                           tablat	equ	0xFF5
 14039                           prodh	equ	0xFF4
 14040                           prodl	equ	0xFF3
 14041                           intcon	equ	0xFF2
 14042                           intcon3	equ	0xFF0
 14043                           indf0	equ	0xFEF
 14044                           postinc0	equ	0xFEE
 14045                           plusw0	equ	0xFEB
 14046                           fsr0h	equ	0xFEA
 14047                           fsr0l	equ	0xFE9
 14048                           wreg	equ	0xFE8
 14049                           indf1	equ	0xFE7
 14050                           postinc1	equ	0xFE6
 14051                           postdec1	equ	0xFE5
 14052                           plusw1	equ	0xFE3
 14053                           fsr1h	equ	0xFE2
 14054                           fsr1l	equ	0xFE1
 14055                           indf2	equ	0xFDF
 14056                           postinc2	equ	0xFDE
 14057                           postdec2	equ	0xFDD
 14058                           plusw2	equ	0xFDB
 14059                           fsr2h	equ	0xFDA
 14060                           fsr2l	equ	0xFD9
 14061                           status	equ	0xFD8
 14062                           
 14063 ;; *************** function _enc424j600_getInterruptFlags *****************
 14064 ;; Defined at:
 14065 ;;		line 696 in file "src/enc424j600/ENC424J600.c"
 14066 ;; Parameters:    Size  Location     Type
 14067 ;;		None
 14068 ;; Auto vars:     Size  Location     Type
 14069 ;;  high            1   23[BANK0 ] unsigned char 
 14070 ;;  low             1   22[BANK0 ] unsigned char 
 14071 ;; Return value:  Size  Location     Type
 14072 ;;                  2   14[BANK0 ] unsigned int 
 14073 ;; Registers used:
 14074 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14075 ;; Tracked objects:
 14076 ;;		On entry : 0/0
 14077 ;;		On exit  : 0/0
 14078 ;;		Unchanged: 0/0
 14079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14080 ;;      Params:         0       2       0       0       0       0       0       0       0
 14081 ;;      Locals:         0       2       0       0       0       0       0       0       0
 14082 ;;      Temps:          0       6       0       0       0       0       0       0       0
 14083 ;;      Totals:         0      10       0       0       0       0       0       0       0
 14084 ;;Total ram usage:       10 bytes
 14085 ;; Hardware stack levels used:    1
 14086 ;; Hardware stack levels required when called:    7
 14087 ;; This function calls:
 14088 ;;		_enc424j600_readControlRegisterUnbanked
 14089 ;; This function is called by:
 14090 ;;		_ethernetController_pollInterruptFlags
 14091 ;; This function uses a non-reentrant model
 14092 ;;
 14093                           
 14094                           	psect	text47
 14095  004F9C                     __ptext47:
 14096                           	opt stack 0
 14097  004F9C                     _enc424j600_getInterruptFlags:
 14098                           	opt stack 21
 14099                           
 14100                           ;ENC424J600.c: 697: uint8_t low, high;
 14101                           ;ENC424J600.c: 698: enc424j600_readControlRegisterUnbanked(0x1C + 0x00, &low);
 14102                           
 14103                           ; BSR set to: 0
 14104                           ;incstack = 0
 14105  004F9C  0E76               	movlw	low enc424j600_getInterruptFlags@low
 14106  004F9E  0100               	movlb	0	; () banked
 14107  004FA0  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 14108  004FA2  0E00               	movlw	high enc424j600_getInterruptFlags@low
 14109  004FA4  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 14110  004FA6  0E1C               	movlw	28
 14111  004FA8  EC4B  F029         	call	_enc424j600_readControlRegisterUnbanked
 14112                           
 14113                           ;ENC424J600.c: 699: enc424j600_readControlRegisterUnbanked(0x1D + 0x00, &high);
 14114  004FAC  0E77               	movlw	low enc424j600_getInterruptFlags@high
 14115  004FAE  0100               	movlb	0	; () banked
 14116  004FB0  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 14117  004FB2  0E00               	movlw	high enc424j600_getInterruptFlags@high
 14118  004FB4  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 14119  004FB6  0E1D               	movlw	29
 14120  004FB8  EC4B  F029         	call	_enc424j600_readControlRegisterUnbanked
 14121                           
 14122                           ;ENC424J600.c: 700: return ( (((uint16_t) low)&0x00ff) | (((uint16_t) high << 8)&0xff00)
      +                          );
 14123  004FBC  0E00               	movlw	0
 14124  004FBE  0100               	movlb	0	; () banked
 14125  004FC0  6F70               	movwf	??_enc424j600_getInterruptFlags& (0+255),b
 14126  004FC2  0EFF               	movlw	255
 14127  004FC4  6F71               	movwf	(??_enc424j600_getInterruptFlags+1)& (0+255),b
 14128  004FC6  5177               	movf	enc424j600_getInterruptFlags@high& (0+255),w,b
 14129  004FC8  6F73               	movwf	(??_enc424j600_getInterruptFlags+3)& (0+255),b
 14130  004FCA  6B72               	clrf	(??_enc424j600_getInterruptFlags+2)& (0+255),b
 14131  004FCC  5170               	movf	??_enc424j600_getInterruptFlags& (0+255),w,b
 14132  004FCE  1772               	andwf	(??_enc424j600_getInterruptFlags+2)& (0+255),f,b
 14133  004FD0  5171               	movf	(??_enc424j600_getInterruptFlags+1)& (0+255),w,b
 14134  004FD2  1773               	andwf	(??_enc424j600_getInterruptFlags+3)& (0+255),f,b
 14135  004FD4  5176               	movf	enc424j600_getInterruptFlags@low& (0+255),w,b
 14136  004FD6  6F74               	movwf	(??_enc424j600_getInterruptFlags+4)& (0+255),b
 14137  004FD8  6B75               	clrf	(??_enc424j600_getInterruptFlags+5)& (0+255),b
 14138  004FDA  5172               	movf	(??_enc424j600_getInterruptFlags+2)& (0+255),w,b
 14139  004FDC  1174               	iorwf	(??_enc424j600_getInterruptFlags+4)& (0+255),w,b
 14140  004FDE  6F6E               	movwf	?_enc424j600_getInterruptFlags& (0+255),b
 14141  004FE0  5173               	movf	(??_enc424j600_getInterruptFlags+3)& (0+255),w,b
 14142  004FE2  1175               	iorwf	(??_enc424j600_getInterruptFlags+5)& (0+255),w,b
 14143  004FE4  6F6F               	movwf	(?_enc424j600_getInterruptFlags+1)& (0+255),b
 14144  004FE6  0012               	return	
 14145  004FE8                     __end_of_enc424j600_getInterruptFlags:
 14146                           	opt stack 0
 14147                           tblptru	equ	0xFF8
 14148                           tblptrh	equ	0xFF7
 14149                           tblptrl	equ	0xFF6
 14150                           tablat	equ	0xFF5
 14151                           prodh	equ	0xFF4
 14152                           prodl	equ	0xFF3
 14153                           intcon	equ	0xFF2
 14154                           intcon3	equ	0xFF0
 14155                           indf0	equ	0xFEF
 14156                           postinc0	equ	0xFEE
 14157                           plusw0	equ	0xFEB
 14158                           fsr0h	equ	0xFEA
 14159                           fsr0l	equ	0xFE9
 14160                           wreg	equ	0xFE8
 14161                           indf1	equ	0xFE7
 14162                           postinc1	equ	0xFE6
 14163                           postdec1	equ	0xFE5
 14164                           plusw1	equ	0xFE3
 14165                           fsr1h	equ	0xFE2
 14166                           fsr1l	equ	0xFE1
 14167                           indf2	equ	0xFDF
 14168                           postinc2	equ	0xFDE
 14169                           postdec2	equ	0xFDD
 14170                           plusw2	equ	0xFDB
 14171                           fsr2h	equ	0xFDA
 14172                           fsr2l	equ	0xFD9
 14173                           status	equ	0xFD8
 14174                           
 14175 ;; *************** function _ethernetController_newPacketAvailable *****************
 14176 ;; Defined at:
 14177 ;;		line 390 in file "src/enc424j600/ENC424J600.c"
 14178 ;; Parameters:    Size  Location     Type
 14179 ;;		None
 14180 ;; Auto vars:     Size  Location     Type
 14181 ;;		None
 14182 ;; Return value:  Size  Location     Type
 14183 ;;                  1    wreg      unsigned char 
 14184 ;; Registers used:
 14185 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14186 ;; Tracked objects:
 14187 ;;		On entry : 0/0
 14188 ;;		On exit  : 0/0
 14189 ;;		Unchanged: 0/0
 14190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14191 ;;      Params:         0       0       0       0       0       0       0       0       0
 14192 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14193 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14194 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14195 ;;Total ram usage:        0 bytes
 14196 ;; Hardware stack levels used:    1
 14197 ;; Hardware stack levels required when called:    8
 14198 ;; This function calls:
 14199 ;;		_enc424j600_getPacketCount
 14200 ;; This function is called by:
 14201 ;;		_handleStackBackgroundTasks
 14202 ;; This function uses a non-reentrant model
 14203 ;;
 14204                           
 14205                           	psect	text48
 14206  0056A2                     __ptext48:
 14207                           	opt stack 0
 14208  0056A2                     _ethernetController_newPacketAvailable:
 14209                           	opt stack 21
 14210                           
 14211                           ;ENC424J600.c: 391: return (unsigned) (enc424j600_getPacketCount() != 0);
 14212                           
 14213                           ; BSR set to: 0
 14214                           ;incstack = 0
 14215  0056A2  EC1B  F02B         	call	_enc424j600_getPacketCount	;wreg free
 14216  0056A6  0900               	iorlw	0
 14217  0056A8  B4D8               	btfsc	status,2,c
 14218  0056AA  D002               	goto	u11880
 14219  0056AC  0E01               	movlw	1
 14220  0056AE  0012               	return	
 14221  0056B0                     u11880:
 14222  0056B0  0E00               	movlw	0
 14223  0056B2  0012               	return	
 14224  0056B4                     __end_of_ethernetController_newPacketAvailable:
 14225                           	opt stack 0
 14226                           tblptru	equ	0xFF8
 14227                           tblptrh	equ	0xFF7
 14228                           tblptrl	equ	0xFF6
 14229                           tablat	equ	0xFF5
 14230                           prodh	equ	0xFF4
 14231                           prodl	equ	0xFF3
 14232                           intcon	equ	0xFF2
 14233                           intcon3	equ	0xFF0
 14234                           indf0	equ	0xFEF
 14235                           postinc0	equ	0xFEE
 14236                           plusw0	equ	0xFEB
 14237                           fsr0h	equ	0xFEA
 14238                           fsr0l	equ	0xFE9
 14239                           wreg	equ	0xFE8
 14240                           indf1	equ	0xFE7
 14241                           postinc1	equ	0xFE6
 14242                           postdec1	equ	0xFE5
 14243                           plusw1	equ	0xFE3
 14244                           fsr1h	equ	0xFE2
 14245                           fsr1l	equ	0xFE1
 14246                           indf2	equ	0xFDF
 14247                           postinc2	equ	0xFDE
 14248                           postdec2	equ	0xFDD
 14249                           plusw2	equ	0xFDB
 14250                           fsr2h	equ	0xFDA
 14251                           fsr2l	equ	0xFD9
 14252                           status	equ	0xFD8
 14253                           
 14254 ;; *************** function _enc424j600_getPacketCount *****************
 14255 ;; Defined at:
 14256 ;;		line 594 in file "src/enc424j600/ENC424J600.c"
 14257 ;; Parameters:    Size  Location     Type
 14258 ;;		None
 14259 ;; Auto vars:     Size  Location     Type
 14260 ;;  lowByte         1   14[BANK0 ] unsigned char 
 14261 ;; Return value:  Size  Location     Type
 14262 ;;                  1    wreg      unsigned char 
 14263 ;; Registers used:
 14264 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14265 ;; Tracked objects:
 14266 ;;		On entry : 0/0
 14267 ;;		On exit  : 0/0
 14268 ;;		Unchanged: 0/0
 14269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14270 ;;      Params:         0       0       0       0       0       0       0       0       0
 14271 ;;      Locals:         0       1       0       0       0       0       0       0       0
 14272 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14273 ;;      Totals:         0       1       0       0       0       0       0       0       0
 14274 ;;Total ram usage:        1 bytes
 14275 ;; Hardware stack levels used:    1
 14276 ;; Hardware stack levels required when called:    7
 14277 ;; This function calls:
 14278 ;;		_enc424j600_readControlRegisterUnbanked
 14279 ;; This function is called by:
 14280 ;;		_ethernetController_newPacketAvailable
 14281 ;;		_ethernetController_getCurrentPacketCount
 14282 ;; This function uses a non-reentrant model
 14283 ;;
 14284                           
 14285                           	psect	text49
 14286  005636                     __ptext49:
 14287                           	opt stack 0
 14288  005636                     _enc424j600_getPacketCount:
 14289                           	opt stack 21
 14290                           
 14291                           ;ENC424J600.c: 595: uint8_t lowByte = 0;
 14292                           
 14293                           ;incstack = 0
 14294  005636  0E00               	movlw	0
 14295  005638  0100               	movlb	0	; () banked
 14296  00563A  6F6E               	movwf	enc424j600_getPacketCount@lowByte& (0+255),b
 14297                           
 14298                           ; BSR set to: 0
 14299                           ;ENC424J600.c: 596: enc424j600_readControlRegisterUnbanked(0x1A + 0x00, &lowByte);
 14300  00563C  0E6E               	movlw	low enc424j600_getPacketCount@lowByte
 14301  00563E  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 14302  005640  0E00               	movlw	high enc424j600_getPacketCount@lowByte
 14303  005642  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 14304  005644  0E1A               	movlw	26
 14305  005646  EC4B  F029         	call	_enc424j600_readControlRegisterUnbanked
 14306                           
 14307                           ;ENC424J600.c: 597: return (uint32_t) lowByte;
 14308  00564A  0100               	movlb	0	; () banked
 14309  00564C  516E               	movf	enc424j600_getPacketCount@lowByte& (0+255),w,b
 14310  00564E  0012               	return	
 14311  005650                     __end_of_enc424j600_getPacketCount:
 14312                           	opt stack 0
 14313                           tblptru	equ	0xFF8
 14314                           tblptrh	equ	0xFF7
 14315                           tblptrl	equ	0xFF6
 14316                           tablat	equ	0xFF5
 14317                           prodh	equ	0xFF4
 14318                           prodl	equ	0xFF3
 14319                           intcon	equ	0xFF2
 14320                           intcon3	equ	0xFF0
 14321                           indf0	equ	0xFEF
 14322                           postinc0	equ	0xFEE
 14323                           plusw0	equ	0xFEB
 14324                           fsr0h	equ	0xFEA
 14325                           fsr0l	equ	0xFE9
 14326                           wreg	equ	0xFE8
 14327                           indf1	equ	0xFE7
 14328                           postinc1	equ	0xFE6
 14329                           postdec1	equ	0xFE5
 14330                           plusw1	equ	0xFE3
 14331                           fsr1h	equ	0xFE2
 14332                           fsr1l	equ	0xFE1
 14333                           indf2	equ	0xFDF
 14334                           postinc2	equ	0xFDE
 14335                           postdec2	equ	0xFDD
 14336                           plusw2	equ	0xFDB
 14337                           fsr2h	equ	0xFDA
 14338                           fsr2l	equ	0xFD9
 14339                           status	equ	0xFD8
 14340                           
 14341 ;; *************** function _ethernetController_clearInterruptFlag *****************
 14342 ;; Defined at:
 14343 ;;		line 330 in file "src/enc424j600/ENC424J600.c"
 14344 ;; Parameters:    Size  Location     Type
 14345 ;;  flag            1    wreg     unsigned char 
 14346 ;; Auto vars:     Size  Location     Type
 14347 ;;  flag            1   18[BANK0 ] unsigned char 
 14348 ;; Return value:  Size  Location     Type
 14349 ;;                  1    wreg      void 
 14350 ;; Registers used:
 14351 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14352 ;; Tracked objects:
 14353 ;;		On entry : 0/0
 14354 ;;		On exit  : 0/0
 14355 ;;		Unchanged: 0/0
 14356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14357 ;;      Params:         0       0       0       0       0       0       0       0       0
 14358 ;;      Locals:         0       1       0       0       0       0       0       0       0
 14359 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14360 ;;      Totals:         0       1       0       0       0       0       0       0       0
 14361 ;;Total ram usage:        1 bytes
 14362 ;; Hardware stack levels used:    1
 14363 ;; Hardware stack levels required when called:    8
 14364 ;; This function calls:
 14365 ;;		_enc424j600_clearInterruptFlag
 14366 ;; This function is called by:
 14367 ;;		_handleStackBackgroundTasks
 14368 ;; This function uses a non-reentrant model
 14369 ;;
 14370                           
 14371                           	psect	text50
 14372  005704                     __ptext50:
 14373                           	opt stack 0
 14374  005704                     _ethernetController_clearInterruptFlag:
 14375                           	opt stack 21
 14376                           
 14377                           ; BSR set to: 0
 14378                           ;incstack = 0
 14379                           ;ethernetController_clearInterruptFlag@flag stored from wreg
 14380  005704  0100               	movlb	0	; () banked
 14381  005706  6F72               	movwf	ethernetController_clearInterruptFlag@flag& (0+255),b
 14382                           
 14383                           ;ENC424J600.c: 331: enc424j600_clearInterruptFlag(flag);
 14384  005708  0100               	movlb	0	; () banked
 14385  00570A  5172               	movf	ethernetController_clearInterruptFlag@flag& (0+255),w,b
 14386  00570C  ECDA  F022         	call	_enc424j600_clearInterruptFlag
 14387  005710  0012               	return		;funcret
 14388  005712                     __end_of_ethernetController_clearInterruptFlag:
 14389                           	opt stack 0
 14390                           tblptru	equ	0xFF8
 14391                           tblptrh	equ	0xFF7
 14392                           tblptrl	equ	0xFF6
 14393                           tablat	equ	0xFF5
 14394                           prodh	equ	0xFF4
 14395                           prodl	equ	0xFF3
 14396                           intcon	equ	0xFF2
 14397                           intcon3	equ	0xFF0
 14398                           indf0	equ	0xFEF
 14399                           postinc0	equ	0xFEE
 14400                           plusw0	equ	0xFEB
 14401                           fsr0h	equ	0xFEA
 14402                           fsr0l	equ	0xFE9
 14403                           wreg	equ	0xFE8
 14404                           indf1	equ	0xFE7
 14405                           postinc1	equ	0xFE6
 14406                           postdec1	equ	0xFE5
 14407                           plusw1	equ	0xFE3
 14408                           fsr1h	equ	0xFE2
 14409                           fsr1l	equ	0xFE1
 14410                           indf2	equ	0xFDF
 14411                           postinc2	equ	0xFDE
 14412                           postdec2	equ	0xFDD
 14413                           plusw2	equ	0xFDB
 14414                           fsr2h	equ	0xFDA
 14415                           fsr2l	equ	0xFD9
 14416                           status	equ	0xFD8
 14417                           
 14418 ;; *************** function _enc424j600_clearInterruptFlag *****************
 14419 ;; Defined at:
 14420 ;;		line 703 in file "src/enc424j600/ENC424J600.c"
 14421 ;; Parameters:    Size  Location     Type
 14422 ;;  flag            1    wreg     unsigned char 
 14423 ;; Auto vars:     Size  Location     Type
 14424 ;;  flag            1   16[BANK0 ] unsigned char 
 14425 ;;  temp            1   17[BANK0 ] unsigned char 
 14426 ;; Return value:  Size  Location     Type
 14427 ;;                  1    wreg      void 
 14428 ;; Registers used:
 14429 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14430 ;; Tracked objects:
 14431 ;;		On entry : 0/0
 14432 ;;		On exit  : 0/0
 14433 ;;		Unchanged: 0/0
 14434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14435 ;;      Params:         0       0       0       0       0       0       0       0       0
 14436 ;;      Locals:         0       2       0       0       0       0       0       0       0
 14437 ;;      Temps:          0       2       0       0       0       0       0       0       0
 14438 ;;      Totals:         0       4       0       0       0       0       0       0       0
 14439 ;;Total ram usage:        4 bytes
 14440 ;; Hardware stack levels used:    1
 14441 ;; Hardware stack levels required when called:    7
 14442 ;; This function calls:
 14443 ;;		_enc424j600_readControlRegisterUnbanked
 14444 ;;		_enc424j600_writeControlRegisterUnbanked
 14445 ;; This function is called by:
 14446 ;;		_ethernetController_clearInterruptFlag
 14447 ;; This function uses a non-reentrant model
 14448 ;;
 14449                           
 14450                           	psect	text51
 14451  0045B4                     __ptext51:
 14452                           	opt stack 0
 14453  0045B4                     _enc424j600_clearInterruptFlag:
 14454                           	opt stack 21
 14455                           
 14456                           ;incstack = 0
 14457                           ;enc424j600_clearInterruptFlag@flag stored from wreg
 14458  0045B4  0100               	movlb	0	; () banked
 14459  0045B6  6F70               	movwf	enc424j600_clearInterruptFlag@flag& (0+255),b
 14460                           
 14461                           ;ENC424J600.c: 704: uint8_t temp;
 14462                           ;ENC424J600.c: 705: if (flag < 8) {
 14463  0045B8  0E08               	movlw	8
 14464  0045BA  0100               	movlb	0	; () banked
 14465  0045BC  6170               	cpfslt	enc424j600_clearInterruptFlag@flag& (0+255),b
 14466  0045BE  D01E               	goto	l317
 14467                           
 14468                           ; BSR set to: 0
 14469                           ;ENC424J600.c: 706: enc424j600_readControlRegisterUnbanked(0x1C + 0x00, &temp);
 14470  0045C0  0E71               	movlw	low enc424j600_clearInterruptFlag@temp
 14471  0045C2  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 14472  0045C4  0E00               	movlw	high enc424j600_clearInterruptFlag@temp
 14473  0045C6  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 14474  0045C8  0E1C               	movlw	28
 14475  0045CA  EC4B  F029         	call	_enc424j600_readControlRegisterUnbanked
 14476                           
 14477                           ;ENC424J600.c: 707: temp &= ~(1 << flag);
 14478  0045CE  C070  F06E         	movff	enc424j600_clearInterruptFlag@flag,??_enc424j600_clearInterruptFlag
 14479  0045D2  0E01               	movlw	1
 14480  0045D4  0100               	movlb	0	; () banked
 14481  0045D6  6F6F               	movwf	(??_enc424j600_clearInterruptFlag+1)& (0+255),b
 14482  0045D8  2B6E               	incf	??_enc424j600_clearInterruptFlag& (0+255),f,b
 14483  0045DA  D002               	goto	u11264
 14484  0045DC                     u11265:
 14485  0045DC  90D8               	bcf	status,0,c
 14486  0045DE  376F               	rlcf	(??_enc424j600_clearInterruptFlag+1)& (0+255),f,b
 14487  0045E0                     u11264:
 14488  0045E0  2F6E               	decfsz	??_enc424j600_clearInterruptFlag& (0+255),f,b
 14489  0045E2  D7FC               	goto	u11265
 14490  0045E4  0100               	movlb	0	; () banked
 14491  0045E6  516F               	movf	(??_enc424j600_clearInterruptFlag+1)& (0+255),w,b
 14492  0045E8  0AFF               	xorlw	255
 14493  0045EA  1771               	andwf	enc424j600_clearInterruptFlag@temp& (0+255),f,b
 14494                           
 14495                           ; BSR set to: 0
 14496                           ;ENC424J600.c: 708: enc424j600_writeControlRegisterUnbanked(0x1C + 0x00, &temp);
 14497  0045EC  0E71               	movlw	low enc424j600_clearInterruptFlag@temp
 14498  0045EE  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 14499  0045F0  0E00               	movlw	high enc424j600_clearInterruptFlag@temp
 14500  0045F2  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 14501  0045F4  0E1C               	movlw	28
 14502  0045F6  EC30  F029         	call	_enc424j600_writeControlRegisterUnbanked
 14503                           
 14504                           ;ENC424J600.c: 709: } else {
 14505  0045FA  0012               	return	
 14506  0045FC                     l317:
 14507                           
 14508                           ;ENC424J600.c: 710: flag -= 8;
 14509  0045FC  0E08               	movlw	8
 14510  0045FE  0100               	movlb	0	; () banked
 14511  004600  5F70               	subwf	enc424j600_clearInterruptFlag@flag& (0+255),f,b
 14512                           
 14513                           ; BSR set to: 0
 14514                           ;ENC424J600.c: 711: enc424j600_readControlRegisterUnbanked(0x1D + 0x00, &temp);
 14515  004602  0E71               	movlw	low enc424j600_clearInterruptFlag@temp
 14516  004604  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 14517  004606  0E00               	movlw	high enc424j600_clearInterruptFlag@temp
 14518  004608  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 14519  00460A  0E1D               	movlw	29
 14520  00460C  EC4B  F029         	call	_enc424j600_readControlRegisterUnbanked
 14521                           
 14522                           ;ENC424J600.c: 712: temp &= ~(1 << flag);
 14523  004610  C070  F06E         	movff	enc424j600_clearInterruptFlag@flag,??_enc424j600_clearInterruptFlag
 14524  004614  0E01               	movlw	1
 14525  004616  0100               	movlb	0	; () banked
 14526  004618  6F6F               	movwf	(??_enc424j600_clearInterruptFlag+1)& (0+255),b
 14527  00461A  2B6E               	incf	??_enc424j600_clearInterruptFlag& (0+255),f,b
 14528  00461C  D002               	goto	u11274
 14529  00461E                     u11275:
 14530  00461E  90D8               	bcf	status,0,c
 14531  004620  376F               	rlcf	(??_enc424j600_clearInterruptFlag+1)& (0+255),f,b
 14532  004622                     u11274:
 14533  004622  2F6E               	decfsz	??_enc424j600_clearInterruptFlag& (0+255),f,b
 14534  004624  D7FC               	goto	u11275
 14535  004626  0100               	movlb	0	; () banked
 14536  004628  516F               	movf	(??_enc424j600_clearInterruptFlag+1)& (0+255),w,b
 14537  00462A  0AFF               	xorlw	255
 14538  00462C  1771               	andwf	enc424j600_clearInterruptFlag@temp& (0+255),f,b
 14539                           
 14540                           ;ENC424J600.c: 713: enc424j600_writeControlRegisterUnbanked(0x1D + 0x00, &temp);
 14541  00462E  0E71               	movlw	low enc424j600_clearInterruptFlag@temp
 14542  004630  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 14543  004632  0E00               	movlw	high enc424j600_clearInterruptFlag@temp
 14544  004634  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 14545  004636  0E1D               	movlw	29
 14546  004638  EC30  F029         	call	_enc424j600_writeControlRegisterUnbanked
 14547  00463C  0012               	return	
 14548  00463E                     __end_of_enc424j600_clearInterruptFlag:
 14549                           	opt stack 0
 14550                           tblptru	equ	0xFF8
 14551                           tblptrh	equ	0xFF7
 14552                           tblptrl	equ	0xFF6
 14553                           tablat	equ	0xFF5
 14554                           prodh	equ	0xFF4
 14555                           prodl	equ	0xFF3
 14556                           intcon	equ	0xFF2
 14557                           intcon3	equ	0xFF0
 14558                           indf0	equ	0xFEF
 14559                           postinc0	equ	0xFEE
 14560                           plusw0	equ	0xFEB
 14561                           fsr0h	equ	0xFEA
 14562                           fsr0l	equ	0xFE9
 14563                           wreg	equ	0xFE8
 14564                           indf1	equ	0xFE7
 14565                           postinc1	equ	0xFE6
 14566                           postdec1	equ	0xFE5
 14567                           plusw1	equ	0xFE3
 14568                           fsr1h	equ	0xFE2
 14569                           fsr1l	equ	0xFE1
 14570                           indf2	equ	0xFDF
 14571                           postinc2	equ	0xFDE
 14572                           postdec2	equ	0xFDD
 14573                           plusw2	equ	0xFDB
 14574                           fsr2h	equ	0xFDA
 14575                           fsr2l	equ	0xFD9
 14576                           status	equ	0xFD8
 14577                           
 14578 ;; *************** function _arp_init *****************
 14579 ;; Defined at:
 14580 ;;		line 495 in file "src/stack/protocols/arp.c"
 14581 ;; Parameters:    Size  Location     Type
 14582 ;;		None
 14583 ;; Auto vars:     Size  Location     Type
 14584 ;;  i               1   92[BANK0 ] unsigned char 
 14585 ;;  mac             6   82[BANK0 ] struct macaddress
 14586 ;;  ip              4   88[BANK0 ] struct ipv4_address
 14587 ;; Return value:  Size  Location     Type
 14588 ;;                  1    wreg      void 
 14589 ;; Registers used:
 14590 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14591 ;; Tracked objects:
 14592 ;;		On entry : 0/0
 14593 ;;		On exit  : 0/0
 14594 ;;		Unchanged: 0/0
 14595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14596 ;;      Params:         0       0       0       0       0       0       0       0       0
 14597 ;;      Locals:         0      11       0       0       0       0       0       0       0
 14598 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14599 ;;      Totals:         0      11       0       0       0       0       0       0       0
 14600 ;;Total ram usage:       11 bytes
 14601 ;; Hardware stack levels used:    1
 14602 ;; Hardware stack levels required when called:    7
 14603 ;; This function calls:
 14604 ;;		_UARTTransmitText
 14605 ;;		_arp_setNewEntry
 14606 ;;		_ipv4_setToAllZero
 14607 ;;		_mac_setAllZero
 14608 ;; This function is called by:
 14609 ;;		_handleStackBackgroundTasks
 14610 ;;		_stack_init
 14611 ;; This function uses a non-reentrant model
 14612 ;;
 14613                           
 14614                           	psect	text52
 14615  0049A6                     __ptext52:
 14616                           	opt stack 0
 14617  0049A6                     _arp_init:
 14618                           	opt stack 22
 14619                           
 14620                           ;arp.c: 496: macaddress_t mac;
 14621                           ;arp.c: 497: ipv4_address_t ip;
 14622                           ;arp.c: 498: mac_setAllZero(&mac);
 14623                           
 14624                           ;incstack = 0
 14625  0049A6  0EB2               	movlw	low arp_init@mac
 14626  0049A8  0100               	movlb	0	; () banked
 14627  0049AA  6F60               	movwf	mac_setAllZero@mac& (0+255),b
 14628  0049AC  0E00               	movlw	high arp_init@mac
 14629  0049AE  6F61               	movwf	(mac_setAllZero@mac+1)& (0+255),b
 14630  0049B0  EC94  F02A         	call	_mac_setAllZero	;wreg free
 14631                           
 14632                           ;arp.c: 499: ipv4_setToAllZero(&ip);
 14633  0049B4  0EB8               	movlw	low arp_init@ip
 14634  0049B6  0100               	movlb	0	; () banked
 14635  0049B8  6F60               	movwf	ipv4_setToAllZero@ip& (0+255),b
 14636  0049BA  0E00               	movlw	high arp_init@ip
 14637  0049BC  6F61               	movwf	(ipv4_setToAllZero@ip+1)& (0+255),b
 14638  0049BE  EC81  F02A         	call	_ipv4_setToAllZero	;wreg free
 14639                           
 14640                           ;arp.c: 501: for (uint8_t i = 0; i < 8u; i++)
 14641  0049C2  0E00               	movlw	0
 14642  0049C4  0100               	movlb	0	; () banked
 14643  0049C6  6FBC               	movwf	arp_init@i& (0+255),b
 14644  0049C8                     l10227:
 14645                           
 14646                           ; BSR set to: 0
 14647  0049C8  0E07               	movlw	7
 14648  0049CA  65BC               	cpfsgt	arp_init@i& (0+255),b
 14649  0049CC  D001               	goto	l1075
 14650  0049CE  D01E               	goto	u12050
 14651  0049D0                     l1075:
 14652                           
 14653                           ; BSR set to: 0
 14654                           ;arp.c: 502: arp_setNewEntry(mac, ip, 0xffffffff);
 14655                           
 14656                           ; BSR set to: 0
 14657  0049D0  EE20  F0B2         	lfsr	2,arp_init@mac
 14658  0049D4  EE00  F09A         	lfsr	0,arp_setNewEntry@mac
 14659  0049D8  0E05               	movlw	5
 14660  0049DA                     u12041:
 14661  0049DA  CFDB FFEB          	movff	plusw2,plusw0
 14662  0049DE  06E8               	decf	wreg,f,c
 14663  0049E0  E2FC               	bc	u12041
 14664  0049E2  C0B8  F0A0         	movff	arp_init@ip,arp_setNewEntry@ip
 14665  0049E6  C0B9  F0A1         	movff	arp_init@ip+1,arp_setNewEntry@ip+1
 14666  0049EA  C0BA  F0A2         	movff	arp_init@ip+2,arp_setNewEntry@ip+2
 14667  0049EE  C0BB  F0A3         	movff	arp_init@ip+3,arp_setNewEntry@ip+3
 14668  0049F2  0EFF               	movlw	255
 14669  0049F4  6FA4               	movwf	arp_setNewEntry@timestamp& (0+255),b
 14670  0049F6  0EFF               	movlw	255
 14671  0049F8  6FA5               	movwf	(arp_setNewEntry@timestamp+1)& (0+255),b
 14672  0049FA  0EFF               	movlw	255
 14673  0049FC  6FA6               	movwf	(arp_setNewEntry@timestamp+2)& (0+255),b
 14674  0049FE  0EFF               	movlw	255
 14675  004A00  6FA7               	movwf	(arp_setNewEntry@timestamp+3)& (0+255),b
 14676  004A02  EC4B  F017         	call	_arp_setNewEntry	;wreg free
 14677  004A06  0100               	movlb	0	; () banked
 14678  004A08  2BBC               	incf	arp_init@i& (0+255),f,b
 14679  004A0A  D7DE               	goto	l10227
 14680  004A0C                     u12050:
 14681                           
 14682                           ; BSR set to: 0
 14683                           ;arp.c: 505: UARTTransmitText("[ARP]: Table was reset successfully.\n\r");
 14684                           
 14685                           ; BSR set to: 0
 14686  004A0C  0E8C               	movlw	low STR_95
 14687  004A0E  6F98               	movwf	UARTTransmitText@str& (0+255),b
 14688  004A10  0E7B               	movlw	high STR_95
 14689  004A12  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 14690  004A14  ECD8  F026         	call	_UARTTransmitText	;wreg free
 14691  004A18  0012               	return		;funcret
 14692  004A1A                     __end_of_arp_init:
 14693                           	opt stack 0
 14694                           tblptru	equ	0xFF8
 14695                           tblptrh	equ	0xFF7
 14696                           tblptrl	equ	0xFF6
 14697                           tablat	equ	0xFF5
 14698                           prodh	equ	0xFF4
 14699                           prodl	equ	0xFF3
 14700                           intcon	equ	0xFF2
 14701                           intcon3	equ	0xFF0
 14702                           indf0	equ	0xFEF
 14703                           postinc0	equ	0xFEE
 14704                           plusw0	equ	0xFEB
 14705                           fsr0h	equ	0xFEA
 14706                           fsr0l	equ	0xFE9
 14707                           wreg	equ	0xFE8
 14708                           indf1	equ	0xFE7
 14709                           postinc1	equ	0xFE6
 14710                           postdec1	equ	0xFE5
 14711                           plusw1	equ	0xFE3
 14712                           fsr1h	equ	0xFE2
 14713                           fsr1l	equ	0xFE1
 14714                           indf2	equ	0xFDF
 14715                           postinc2	equ	0xFDE
 14716                           postdec2	equ	0xFDD
 14717                           plusw2	equ	0xFDB
 14718                           fsr2h	equ	0xFDA
 14719                           fsr2l	equ	0xFD9
 14720                           status	equ	0xFD8
 14721                           
 14722 ;; *************** function _arp_setNewEntry *****************
 14723 ;; Defined at:
 14724 ;;		line 470 in file "src/stack/protocols/arp.c"
 14725 ;; Parameters:    Size  Location     Type
 14726 ;;  mac             6   58[BANK0 ] struct macaddress
 14727 ;;  ip              4   64[BANK0 ] struct ipv4_address
 14728 ;;  timestamp       4   68[BANK0 ] unsigned long 
 14729 ;; Auto vars:     Size  Location     Type
 14730 ;;  i               1   81[BANK0 ] unsigned char 
 14731 ;;  maxSeconds      4   76[BANK0 ] unsigned long 
 14732 ;;  oldestIndex     1   80[BANK0 ] unsigned char 
 14733 ;; Return value:  Size  Location     Type
 14734 ;;                  1    wreg      void 
 14735 ;; Registers used:
 14736 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14737 ;; Tracked objects:
 14738 ;;		On entry : 0/0
 14739 ;;		On exit  : 0/0
 14740 ;;		Unchanged: 0/0
 14741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14742 ;;      Params:         0      14       0       0       0       0       0       0       0
 14743 ;;      Locals:         0       6       0       0       0       0       0       0       0
 14744 ;;      Temps:          0       4       0       0       0       0       0       0       0
 14745 ;;      Totals:         0      24       0       0       0       0       0       0       0
 14746 ;;Total ram usage:       24 bytes
 14747 ;; Hardware stack levels used:    1
 14748 ;; Hardware stack levels required when called:    6
 14749 ;; This function calls:
 14750 ;;		_UARTTransmitText
 14751 ;;		_ipAdressToString
 14752 ;;		_ipv4_isAllZero
 14753 ;;		_macToString
 14754 ;;		_mac_isAllZero
 14755 ;; This function is called by:
 14756 ;;		_arp_handleNewPacket
 14757 ;;		_arp_init
 14758 ;; This function uses a non-reentrant model
 14759 ;;
 14760                           
 14761                           	psect	text53
 14762  002E96                     __ptext53:
 14763                           	opt stack 0
 14764  002E96                     _arp_setNewEntry:
 14765                           	opt stack 22
 14766                           
 14767                           ;arp.c: 471: time_t maxSeconds = 0;
 14768                           
 14769                           ;incstack = 0
 14770  002E96  0E00               	movlw	0
 14771  002E98  0100               	movlb	0	; () banked
 14772  002E9A  6FAC               	movwf	arp_setNewEntry@maxSeconds& (0+255),b
 14773  002E9C  0E00               	movlw	0
 14774  002E9E  6FAD               	movwf	(arp_setNewEntry@maxSeconds+1)& (0+255),b
 14775  002EA0  0E00               	movlw	0
 14776  002EA2  6FAE               	movwf	(arp_setNewEntry@maxSeconds+2)& (0+255),b
 14777  002EA4  0E00               	movlw	0
 14778  002EA6  6FAF               	movwf	(arp_setNewEntry@maxSeconds+3)& (0+255),b
 14779                           
 14780                           ;arp.c: 472: uint8_t oldestIndex = 0;
 14781  002EA8  0E00               	movlw	0
 14782  002EAA  6FB0               	movwf	arp_setNewEntry@oldestIndex& (0+255),b
 14783                           
 14784                           ;arp.c: 474: for (uint8_t i = 0; i < 8u; i++) {
 14785  002EAC  0E00               	movlw	0
 14786  002EAE  6FB1               	movwf	arp_setNewEntry@i& (0+255),b
 14787  002EB0                     l9431:
 14788                           
 14789                           ; BSR set to: 0
 14790  002EB0  0E07               	movlw	7
 14791  002EB2  65B1               	cpfsgt	arp_setNewEntry@i& (0+255),b
 14792  002EB4  D001               	goto	l1066
 14793  002EB6  D02E               	goto	u11000
 14794  002EB8                     l1066:
 14795                           
 14796                           ; BSR set to: 0
 14797                           ;arp.c: 475: if (arp_table[i].timeCreated > maxSeconds) {
 14798                           
 14799                           ; BSR set to: 0
 14800  002EB8  51B1               	movf	arp_setNewEntry@i& (0+255),w,b
 14801  002EBA  0D0E               	mullw	14
 14802  002EBC  0E0A               	movlw	10
 14803  002EBE  26F3               	addwf	prodl,f,c
 14804  002EC0  0E00               	movlw	0
 14805  002EC2  22F4               	addwfc	prodh,f,c
 14806  002EC4  0E00               	movlw	low _arp_table
 14807  002EC6  24F3               	addwf	prodl,w,c
 14808  002EC8  6ED9               	movwf	fsr2l,c
 14809  002ECA  0E03               	movlw	high _arp_table
 14810  002ECC  20F4               	addwfc	prodh,w,c
 14811  002ECE  6EDA               	movwf	fsr2h,c
 14812  002ED0  50DE               	movf	postinc2,w,c
 14813  002ED2  5DAC               	subwf	arp_setNewEntry@maxSeconds& (0+255),w,b
 14814  002ED4  50DE               	movf	postinc2,w,c
 14815  002ED6  59AD               	subwfb	(arp_setNewEntry@maxSeconds+1)& (0+255),w,b
 14816  002ED8  50DE               	movf	postinc2,w,c
 14817  002EDA  59AE               	subwfb	(arp_setNewEntry@maxSeconds+2)& (0+255),w,b
 14818  002EDC  50DE               	movf	postinc2,w,c
 14819  002EDE  59AF               	subwfb	(arp_setNewEntry@maxSeconds+3)& (0+255),w,b
 14820  002EE0  B0D8               	btfsc	status,0,c
 14821  002EE2  D016               	goto	l1068
 14822                           
 14823                           ; BSR set to: 0
 14824                           ;arp.c: 476: maxSeconds = arp_table[i].timeCreated;
 14825  002EE4  51B1               	movf	arp_setNewEntry@i& (0+255),w,b
 14826  002EE6  0D0E               	mullw	14
 14827  002EE8  0E0A               	movlw	10
 14828  002EEA  26F3               	addwf	prodl,f,c
 14829  002EEC  0E00               	movlw	0
 14830  002EEE  22F4               	addwfc	prodh,f,c
 14831  002EF0  0E00               	movlw	low _arp_table
 14832  002EF2  24F3               	addwf	prodl,w,c
 14833  002EF4  6ED9               	movwf	fsr2l,c
 14834  002EF6  0E03               	movlw	high _arp_table
 14835  002EF8  20F4               	addwfc	prodh,w,c
 14836  002EFA  6EDA               	movwf	fsr2h,c
 14837  002EFC  CFDE F0AC          	movff	postinc2,arp_setNewEntry@maxSeconds
 14838  002F00  CFDE F0AD          	movff	postinc2,arp_setNewEntry@maxSeconds+1
 14839  002F04  CFDE F0AE          	movff	postinc2,arp_setNewEntry@maxSeconds+2
 14840  002F08  CFDE F0AF          	movff	postinc2,arp_setNewEntry@maxSeconds+3
 14841                           
 14842                           ; BSR set to: 0
 14843                           ;arp.c: 477: oldestIndex = i;
 14844  002F0C  C0B1  F0B0         	movff	arp_setNewEntry@i,arp_setNewEntry@oldestIndex
 14845  002F10                     l1068:
 14846                           
 14847                           ; BSR set to: 0
 14848                           
 14849                           ; BSR set to: 0
 14850  002F10  2BB1               	incf	arp_setNewEntry@i& (0+255),f,b
 14851  002F12  D7CE               	goto	l9431
 14852  002F14                     u11000:
 14853                           
 14854                           ; BSR set to: 0
 14855                           ;arp.c: 478: }
 14856                           ;arp.c: 479: }
 14857                           ;arp.c: 481: arp_table[oldestIndex].ip = ip;
 14858                           
 14859                           ; BSR set to: 0
 14860  002F14  51B0               	movf	arp_setNewEntry@oldestIndex& (0+255),w,b
 14861  002F16  0D0E               	mullw	14
 14862  002F18  0E00               	movlw	low _arp_table
 14863  002F1A  24F3               	addwf	prodl,w,c
 14864  002F1C  6ED9               	movwf	fsr2l,c
 14865  002F1E  0E03               	movlw	high _arp_table
 14866  002F20  20F4               	addwfc	prodh,w,c
 14867  002F22  6EDA               	movwf	fsr2h,c
 14868  002F24  C0A0  FFDE         	movff	arp_setNewEntry@ip,postinc2
 14869  002F28  C0A1  FFDE         	movff	arp_setNewEntry@ip+1,postinc2
 14870  002F2C  C0A2  FFDE         	movff	arp_setNewEntry@ip+2,postinc2
 14871  002F30  C0A3  FFDE         	movff	arp_setNewEntry@ip+3,postinc2
 14872                           
 14873                           ; BSR set to: 0
 14874                           ;arp.c: 482: arp_table[oldestIndex].mac = mac;
 14875  002F34  EE20  F09A         	lfsr	2,arp_setNewEntry@mac
 14876  002F38  51B0               	movf	arp_setNewEntry@oldestIndex& (0+255),w,b
 14877  002F3A  0D0E               	mullw	14
 14878  002F3C  0E04               	movlw	4
 14879  002F3E  26F3               	addwf	prodl,f,c
 14880  002F40  0E00               	movlw	0
 14881  002F42  22F4               	addwfc	prodh,f,c
 14882  002F44  0E00               	movlw	low _arp_table
 14883  002F46  24F3               	addwf	prodl,w,c
 14884  002F48  6EE1               	movwf	fsr1l,c
 14885  002F4A  0E03               	movlw	high _arp_table
 14886  002F4C  20F4               	addwfc	prodh,w,c
 14887  002F4E  6EE2               	movwf	fsr1h,c
 14888  002F50  0E05               	movlw	5
 14889  002F52                     u11011:
 14890  002F52  CFDB FFE3          	movff	plusw2,plusw1
 14891  002F56  06E8               	decf	wreg,f,c
 14892  002F58  E2FC               	bc	u11011
 14893                           
 14894                           ; BSR set to: 0
 14895                           ;arp.c: 483: arp_table[oldestIndex].timeCreated = timestamp;
 14896  002F5A  51B0               	movf	arp_setNewEntry@oldestIndex& (0+255),w,b
 14897  002F5C  0D0E               	mullw	14
 14898  002F5E  0E0A               	movlw	10
 14899  002F60  26F3               	addwf	prodl,f,c
 14900  002F62  0E00               	movlw	0
 14901  002F64  22F4               	addwfc	prodh,f,c
 14902  002F66  0E00               	movlw	low _arp_table
 14903  002F68  24F3               	addwf	prodl,w,c
 14904  002F6A  6ED9               	movwf	fsr2l,c
 14905  002F6C  0E03               	movlw	high _arp_table
 14906  002F6E  20F4               	addwfc	prodh,w,c
 14907  002F70  6EDA               	movwf	fsr2h,c
 14908  002F72  C0A4  FFDE         	movff	arp_setNewEntry@timestamp,postinc2
 14909  002F76  C0A5  FFDE         	movff	arp_setNewEntry@timestamp+1,postinc2
 14910  002F7A  C0A6  FFDE         	movff	arp_setNewEntry@timestamp+2,postinc2
 14911  002F7E  C0A7  FFDE         	movff	arp_setNewEntry@timestamp+3,postinc2
 14912                           
 14913                           ; BSR set to: 0
 14914                           ;arp.c: 485: if (!((mac_isAllZero(&mac)) && ipv4_isAllZero(&ip))) {
 14915  002F82  0E9A               	movlw	low arp_setNewEntry@mac
 14916  002F84  6F60               	movwf	mac_isAllZero@mac& (0+255),b
 14917  002F86  0E00               	movlw	high arp_setNewEntry@mac
 14918  002F88  6F61               	movwf	(mac_isAllZero@mac+1)& (0+255),b
 14919  002F8A  EC7F  F029         	call	_mac_isAllZero	;wreg free
 14920  002F8E  0100               	movlb	0	; () banked
 14921  002F90  A0D8               	btfss	status,0,c
 14922  002F92  D009               	goto	u11030
 14923                           
 14924                           ; BSR set to: 0
 14925  002F94  0EA0               	movlw	low arp_setNewEntry@ip
 14926  002F96  6F60               	movwf	ipv4_isAllZero@ip& (0+255),b
 14927  002F98  0E00               	movlw	high arp_setNewEntry@ip
 14928  002F9A  6F61               	movwf	(ipv4_isAllZero@ip+1)& (0+255),b
 14929  002F9C  EC97  F029         	call	_ipv4_isAllZero	;wreg free
 14930  002FA0  0100               	movlb	0	; () banked
 14931  002FA2  B0D8               	btfsc	status,0,c
 14932  002FA4  0012               	return	
 14933  002FA6                     u11030:
 14934                           
 14935                           ; BSR set to: 0
 14936                           ;arp.c: 486: UARTTransmitText("[ARP]: New entry created for ");
 14937                           
 14938                           ; BSR set to: 0
 14939  002FA6  0E0F               	movlw	low STR_92
 14940  002FA8  6F98               	movwf	UARTTransmitText@str& (0+255),b
 14941  002FAA  0E7D               	movlw	high STR_92
 14942  002FAC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 14943  002FAE  ECD8  F026         	call	_UARTTransmitText	;wreg free
 14944                           
 14945                           ;arp.c: 487: UARTTransmitText(ipAdressToString(ip));
 14946  002FB2  C0A0  F073         	movff	arp_setNewEntry@ip,ipAdressToString@ip
 14947  002FB6  C0A1  F074         	movff	arp_setNewEntry@ip+1,ipAdressToString@ip+1
 14948  002FBA  C0A2  F075         	movff	arp_setNewEntry@ip+2,ipAdressToString@ip+2
 14949  002FBE  C0A3  F076         	movff	arp_setNewEntry@ip+3,ipAdressToString@ip+3
 14950  002FC2  ECE7  F013         	call	_ipAdressToString	;wreg free
 14951  002FC6  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
 14952  002FCA  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
 14953  002FCE  ECD8  F026         	call	_UARTTransmitText	;wreg free
 14954                           
 14955                           ;arp.c: 488: UARTTransmitText(" (");
 14956  002FD2  0E0C               	movlw	low (STR_42+29)
 14957  002FD4  0100               	movlb	0	; () banked
 14958  002FD6  6F98               	movwf	UARTTransmitText@str& (0+255),b
 14959  002FD8  0E7D               	movlw	high (STR_42+29)
 14960  002FDA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 14961  002FDC  ECD8  F026         	call	_UARTTransmitText	;wreg free
 14962                           
 14963                           ;arp.c: 489: UARTTransmitText(macToString(mac));
 14964  002FE0  EE20  F09A         	lfsr	2,arp_setNewEntry@mac
 14965  002FE4  EE00  F07A         	lfsr	0,macToString@addr
 14966  002FE8  0E05               	movlw	5
 14967  002FEA                     u11041:
 14968  002FEA  CFDB FFEB          	movff	plusw2,plusw0
 14969  002FEE  06E8               	decf	wreg,f,c
 14970  002FF0  E2FC               	bc	u11041
 14971  002FF2  ECA5  F01D         	call	_macToString	;wreg free
 14972  002FF6  C07A  F098         	movff	?_macToString,UARTTransmitText@str
 14973  002FFA  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
 14974  002FFE  ECD8  F026         	call	_UARTTransmitText	;wreg free
 14975                           
 14976                           ;arp.c: 490: UARTTransmitText(") ");
 14977  003002  0EEE               	movlw	low STR_94
 14978  003004  0100               	movlb	0	; () banked
 14979  003006  6F98               	movwf	UARTTransmitText@str& (0+255),b
 14980  003008  0E7F               	movlw	high STR_94
 14981  00300A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 14982  00300C  ECD8  F026         	call	_UARTTransmitText	;wreg free
 14983  003010  0012               	return	
 14984  003012                     __end_of_arp_setNewEntry:
 14985                           	opt stack 0
 14986                           tblptru	equ	0xFF8
 14987                           tblptrh	equ	0xFF7
 14988                           tblptrl	equ	0xFF6
 14989                           tablat	equ	0xFF5
 14990                           prodh	equ	0xFF4
 14991                           prodl	equ	0xFF3
 14992                           intcon	equ	0xFF2
 14993                           intcon3	equ	0xFF0
 14994                           indf0	equ	0xFEF
 14995                           postinc0	equ	0xFEE
 14996                           plusw0	equ	0xFEB
 14997                           fsr0h	equ	0xFEA
 14998                           fsr0l	equ	0xFE9
 14999                           wreg	equ	0xFE8
 15000                           indf1	equ	0xFE7
 15001                           postinc1	equ	0xFE6
 15002                           postdec1	equ	0xFE5
 15003                           plusw1	equ	0xFE3
 15004                           fsr1h	equ	0xFE2
 15005                           fsr1l	equ	0xFE1
 15006                           indf2	equ	0xFDF
 15007                           postinc2	equ	0xFDE
 15008                           postdec2	equ	0xFDD
 15009                           plusw2	equ	0xFDB
 15010                           fsr2h	equ	0xFDA
 15011                           fsr2l	equ	0xFD9
 15012                           status	equ	0xFD8
 15013                           
 15014 ;; *************** function _mac_isAllZero *****************
 15015 ;; Defined at:
 15016 ;;		line 31 in file "src/eth/mac.c"
 15017 ;; Parameters:    Size  Location     Type
 15018 ;;  mac             2    0[BANK0 ] PTR struct macaddress
 15019 ;;		 -> arp_setNewEntry@mac(6), arp_parseFromRXBuffer@arp(32), 
 15020 ;; Auto vars:     Size  Location     Type
 15021 ;;  i               1    2[BANK0 ] unsigned char 
 15022 ;; Return value:  Size  Location     Type
 15023 ;;		None               void
 15024 ;; Registers used:
 15025 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15026 ;; Tracked objects:
 15027 ;;		On entry : 0/0
 15028 ;;		On exit  : 0/0
 15029 ;;		Unchanged: 0/0
 15030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15031 ;;      Params:         0       2       0       0       0       0       0       0       0
 15032 ;;      Locals:         0       1       0       0       0       0       0       0       0
 15033 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15034 ;;      Totals:         0       3       0       0       0       0       0       0       0
 15035 ;;Total ram usage:        3 bytes
 15036 ;; Hardware stack levels used:    1
 15037 ;; Hardware stack levels required when called:    4
 15038 ;; This function calls:
 15039 ;;		Nothing
 15040 ;; This function is called by:
 15041 ;;		_arp_parseFromRXBuffer
 15042 ;;		_arp_setNewEntry
 15043 ;; This function uses a non-reentrant model
 15044 ;;
 15045                           
 15046                           	psect	text54
 15047  0052FE                     __ptext54:
 15048                           	opt stack 0
 15049  0052FE                     _mac_isAllZero:
 15050                           	opt stack 23
 15051                           
 15052                           ;mac.c: 32: for (uint8_t i = 0; i < 6; i++) {
 15053                           
 15054                           ;incstack = 0
 15055  0052FE  0E00               	movlw	0
 15056  005300  0100               	movlb	0	; () banked
 15057  005302  6F62               	movwf	mac_isAllZero@i& (0+255),b
 15058  005304                     l8971:
 15059                           
 15060                           ; BSR set to: 0
 15061  005304  0E05               	movlw	5
 15062  005306  6562               	cpfsgt	mac_isAllZero@i& (0+255),b
 15063  005308  D001               	goto	l384
 15064  00530A  D00F               	goto	u9870
 15065  00530C                     l384:
 15066                           
 15067                           ; BSR set to: 0
 15068                           ;mac.c: 33: if (mac->address[i] != 0x00)
 15069                           
 15070                           ; BSR set to: 0
 15071  00530C  5162               	movf	mac_isAllZero@i& (0+255),w,b
 15072  00530E  0D01               	mullw	1
 15073  005310  50F3               	movf	prodl,w,c
 15074  005312  2560               	addwf	mac_isAllZero@mac& (0+255),w,b
 15075  005314  6ED9               	movwf	fsr2l,c
 15076  005316  50F4               	movf	prodh,w,c
 15077  005318  2161               	addwfc	(mac_isAllZero@mac+1)& (0+255),w,b
 15078  00531A  6EDA               	movwf	fsr2h,c
 15079  00531C  50DF               	movf	indf2,w,c
 15080  00531E  B4D8               	btfsc	status,2,c
 15081  005320  D002               	goto	l386
 15082                           
 15083                           ; BSR set to: 0
 15084                           ;mac.c: 34: return 0;
 15085  005322  90D8               	bcf	status,0,c
 15086                           
 15087                           ; BSR set to: 0
 15088  005324  0012               	return	
 15089  005326                     l386:
 15090                           
 15091                           ; BSR set to: 0
 15092                           
 15093                           ; BSR set to: 0
 15094  005326  2B62               	incf	mac_isAllZero@i& (0+255),f,b
 15095  005328  D7ED               	goto	l8971
 15096  00532A                     u9870:
 15097                           
 15098                           ; BSR set to: 0
 15099                           ;mac.c: 35: }
 15100                           ;mac.c: 36: return 1;
 15101                           
 15102                           ; BSR set to: 0
 15103  00532A  80D8               	bsf	status,0,c
 15104  00532C  0012               	return	
 15105  00532E                     __end_of_mac_isAllZero:
 15106                           	opt stack 0
 15107                           tblptru	equ	0xFF8
 15108                           tblptrh	equ	0xFF7
 15109                           tblptrl	equ	0xFF6
 15110                           tablat	equ	0xFF5
 15111                           prodh	equ	0xFF4
 15112                           prodl	equ	0xFF3
 15113                           intcon	equ	0xFF2
 15114                           intcon3	equ	0xFF0
 15115                           indf0	equ	0xFEF
 15116                           postinc0	equ	0xFEE
 15117                           plusw0	equ	0xFEB
 15118                           fsr0h	equ	0xFEA
 15119                           fsr0l	equ	0xFE9
 15120                           wreg	equ	0xFE8
 15121                           indf1	equ	0xFE7
 15122                           postinc1	equ	0xFE6
 15123                           postdec1	equ	0xFE5
 15124                           plusw1	equ	0xFE3
 15125                           fsr1h	equ	0xFE2
 15126                           fsr1l	equ	0xFE1
 15127                           indf2	equ	0xFDF
 15128                           postinc2	equ	0xFDE
 15129                           postdec2	equ	0xFDD
 15130                           plusw2	equ	0xFDB
 15131                           fsr2h	equ	0xFDA
 15132                           fsr2l	equ	0xFD9
 15133                           status	equ	0xFD8
 15134                           
 15135 ;; *************** function _macToString *****************
 15136 ;; Defined at:
 15137 ;;		line 107 in file "src/system/uart.c"
 15138 ;; Parameters:    Size  Location     Type
 15139 ;;  addr            6   26[BANK0 ] struct macaddress
 15140 ;; Auto vars:     Size  Location     Type
 15141 ;;  i               2   53[BANK0 ] int 
 15142 ;;  address        18   33[BANK0 ] unsigned char [18]
 15143 ;;  j               1   55[BANK0 ] unsigned char 
 15144 ;;  secondDigit     1   52[BANK0 ] unsigned char 
 15145 ;;  firstDigit      1   51[BANK0 ] unsigned char 
 15146 ;; Return value:  Size  Location     Type
 15147 ;;                  2   26[BANK0 ] PTR unsigned char 
 15148 ;; Registers used:
 15149 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15150 ;; Tracked objects:
 15151 ;;		On entry : 0/0
 15152 ;;		On exit  : 0/0
 15153 ;;		Unchanged: 0/0
 15154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15155 ;;      Params:         0       6       0       0       0       0       0       0       0
 15156 ;;      Locals:         0      23       0       0       0       0       0       0       0
 15157 ;;      Temps:          0       1       0       0       0       0       0       0       0
 15158 ;;      Totals:         0      30       0       0       0       0       0       0       0
 15159 ;;Total ram usage:       30 bytes
 15160 ;; Hardware stack levels used:    1
 15161 ;; Hardware stack levels required when called:    4
 15162 ;; This function calls:
 15163 ;;		Nothing
 15164 ;; This function is called by:
 15165 ;;		_ethernet_rxGetNewFrame
 15166 ;;		_main
 15167 ;;		_arp_handleNewPacket
 15168 ;;		_arp_sendReply
 15169 ;;		_arp_setNewEntry
 15170 ;;		_ipv4_sendFrame
 15171 ;;		_arpEntryToString
 15172 ;; This function uses a non-reentrant model
 15173 ;;
 15174                           
 15175                           	psect	text55
 15176  003B4A                     __ptext55:
 15177                           	opt stack 0
 15178  003B4A                     _macToString:
 15179                           	opt stack 23
 15180                           
 15181                           ;uart.c: 108: char address[] = "??:??:??:??:??:??";
 15182                           
 15183                           ; BSR set to: 0
 15184                           ;incstack = 0
 15185  003B4A  EE22  F0D2         	lfsr	2,macToString@F5947
 15186  003B4E  EE10  F081         	lfsr	1,macToString@address
 15187  003B52  0E11               	movlw	17
 15188  003B54                     u9791:
 15189  003B54  CFDB FFE3          	movff	plusw2,plusw1
 15190  003B58  06E8               	decf	wreg,f,c
 15191  003B5A  E2FC               	bc	u9791
 15192                           
 15193                           ;uart.c: 109: uint8_t j = 0;
 15194  003B5C  0E00               	movlw	0
 15195  003B5E  0100               	movlb	0	; () banked
 15196  003B60  6F97               	movwf	macToString@j& (0+255),b
 15197                           
 15198                           ; BSR set to: 0
 15199                           ;uart.c: 110: uint8_t firstDigit;
 15200                           ;uart.c: 111: uint8_t secondDigit;
 15201                           ;uart.c: 113: for (int i = 0; i < 6; i++) {
 15202  003B62  0E00               	movlw	0
 15203  003B64  6F96               	movwf	(macToString@i+1)& (0+255),b
 15204  003B66  0E00               	movlw	0
 15205  003B68  6F95               	movwf	macToString@i& (0+255),b
 15206                           
 15207                           ; BSR set to: 0
 15208  003B6A  BF96               	btfsc	(macToString@i+1)& (0+255),7,b
 15209  003B6C  D006               	goto	l820
 15210  003B6E  5196               	movf	(macToString@i+1)& (0+255),w,b
 15211  003B70  E16B               	bnz	l821
 15212  003B72  0E06               	movlw	6
 15213  003B74  5D95               	subwf	macToString@i& (0+255),w,b
 15214  003B76  B0D8               	btfsc	status,0,c
 15215  003B78  D067               	goto	u9840
 15216  003B7A                     l820:
 15217                           
 15218                           ; BSR set to: 0
 15219                           ;uart.c: 114: firstDigit = ((addr.address[i] & 0xF0) >> 4)&0x0F;
 15220                           
 15221                           ; BSR set to: 0
 15222  003B7A  0E7A               	movlw	low macToString@addr
 15223  003B7C  2595               	addwf	macToString@i& (0+255),w,b
 15224  003B7E  6ED9               	movwf	fsr2l,c
 15225  003B80  0E00               	movlw	high macToString@addr
 15226  003B82  2196               	addwfc	(macToString@i+1)& (0+255),w,b
 15227  003B84  6EDA               	movwf	fsr2h,c
 15228  003B86  50DF               	movf	indf2,w,c
 15229  003B88  6F80               	movwf	??_macToString& (0+255),b
 15230  003B8A  3980               	swapf	??_macToString& (0+255),w,b
 15231  003B8C  0B0F               	andlw	15
 15232  003B8E  0B0F               	andlw	15
 15233  003B90  6F93               	movwf	macToString@firstDigit& (0+255),b
 15234                           
 15235                           ;uart.c: 115: secondDigit = addr.address[i] & 0x0F;
 15236  003B92  0E7A               	movlw	low macToString@addr
 15237  003B94  2595               	addwf	macToString@i& (0+255),w,b
 15238  003B96  6ED9               	movwf	fsr2l,c
 15239  003B98  0E00               	movlw	high macToString@addr
 15240  003B9A  2196               	addwfc	(macToString@i+1)& (0+255),w,b
 15241  003B9C  6EDA               	movwf	fsr2h,c
 15242  003B9E  50DF               	movf	indf2,w,c
 15243  003BA0  0B0F               	andlw	15
 15244  003BA2  6F94               	movwf	macToString@secondDigit& (0+255),b
 15245                           
 15246                           ; BSR set to: 0
 15247                           ;uart.c: 117: firstDigit += 0x30;
 15248  003BA4  0E30               	movlw	48
 15249  003BA6  2793               	addwf	macToString@firstDigit& (0+255),f,b
 15250                           
 15251                           ; BSR set to: 0
 15252                           ;uart.c: 118: secondDigit += 0x30;
 15253  003BA8  0E30               	movlw	48
 15254  003BAA  2794               	addwf	macToString@secondDigit& (0+255),f,b
 15255                           
 15256                           ; BSR set to: 0
 15257                           ;uart.c: 120: if (firstDigit > '9') {
 15258  003BAC  0E39               	movlw	57
 15259  003BAE  6593               	cpfsgt	macToString@firstDigit& (0+255),b
 15260  003BB0  D00C               	goto	l822
 15261                           
 15262                           ; BSR set to: 0
 15263                           ;uart.c: 121: address[j++] = firstDigit + 7;
 15264  003BB2  5197               	movf	macToString@j& (0+255),w,b
 15265  003BB4  0D01               	mullw	1
 15266  003BB6  0E81               	movlw	low macToString@address
 15267  003BB8  24F3               	addwf	prodl,w,c
 15268  003BBA  6ED9               	movwf	fsr2l,c
 15269  003BBC  0E00               	movlw	high macToString@address
 15270  003BBE  20F4               	addwfc	prodh,w,c
 15271  003BC0  6EDA               	movwf	fsr2h,c
 15272  003BC2  5193               	movf	macToString@firstDigit& (0+255),w,b
 15273  003BC4  0F07               	addlw	7
 15274  003BC6  6EDF               	movwf	indf2,c
 15275  003BC8  D00A               	goto	l8943
 15276  003BCA                     l822:
 15277                           
 15278                           ; BSR set to: 0
 15279                           ;uart.c: 123: address[j++] = firstDigit;
 15280                           
 15281                           ; BSR set to: 0
 15282  003BCA  5197               	movf	macToString@j& (0+255),w,b
 15283  003BCC  0D01               	mullw	1
 15284  003BCE  0E81               	movlw	low macToString@address
 15285  003BD0  24F3               	addwf	prodl,w,c
 15286  003BD2  6ED9               	movwf	fsr2l,c
 15287  003BD4  0E00               	movlw	high macToString@address
 15288  003BD6  20F4               	addwfc	prodh,w,c
 15289  003BD8  6EDA               	movwf	fsr2h,c
 15290  003BDA  C093  FFDF         	movff	macToString@firstDigit,indf2
 15291  003BDE                     l8943:
 15292                           
 15293                           ; BSR set to: 0
 15294  003BDE  2B97               	incf	macToString@j& (0+255),f,b
 15295                           
 15296                           ; BSR set to: 0
 15297                           ;uart.c: 124: }
 15298                           ;uart.c: 125: if (secondDigit > '9') {
 15299                           
 15300                           ; BSR set to: 0
 15301  003BE0  0E39               	movlw	57
 15302  003BE2  6594               	cpfsgt	macToString@secondDigit& (0+255),b
 15303  003BE4  D00C               	goto	l824
 15304                           
 15305                           ; BSR set to: 0
 15306                           ;uart.c: 126: address[j++] = secondDigit + 7;
 15307  003BE6  5197               	movf	macToString@j& (0+255),w,b
 15308  003BE8  0D01               	mullw	1
 15309  003BEA  0E81               	movlw	low macToString@address
 15310  003BEC  24F3               	addwf	prodl,w,c
 15311  003BEE  6ED9               	movwf	fsr2l,c
 15312  003BF0  0E00               	movlw	high macToString@address
 15313  003BF2  20F4               	addwfc	prodh,w,c
 15314  003BF4  6EDA               	movwf	fsr2h,c
 15315  003BF6  5194               	movf	macToString@secondDigit& (0+255),w,b
 15316  003BF8  0F07               	addlw	7
 15317  003BFA  6EDF               	movwf	indf2,c
 15318  003BFC  D00A               	goto	l8953
 15319  003BFE                     l824:
 15320                           
 15321                           ; BSR set to: 0
 15322                           ;uart.c: 128: address[j++] = secondDigit;
 15323                           
 15324                           ; BSR set to: 0
 15325  003BFE  5197               	movf	macToString@j& (0+255),w,b
 15326  003C00  0D01               	mullw	1
 15327  003C02  0E81               	movlw	low macToString@address
 15328  003C04  24F3               	addwf	prodl,w,c
 15329  003C06  6ED9               	movwf	fsr2l,c
 15330  003C08  0E00               	movlw	high macToString@address
 15331  003C0A  20F4               	addwfc	prodh,w,c
 15332  003C0C  6EDA               	movwf	fsr2h,c
 15333  003C0E  C094  FFDF         	movff	macToString@secondDigit,indf2
 15334  003C12                     l8953:
 15335                           
 15336                           ; BSR set to: 0
 15337  003C12  2B97               	incf	macToString@j& (0+255),f,b
 15338                           
 15339                           ; BSR set to: 0
 15340                           ;uart.c: 129: }
 15341                           ;uart.c: 131: if (i < 5) {
 15342                           
 15343                           ; BSR set to: 0
 15344  003C14  BF96               	btfsc	(macToString@i+1)& (0+255),7,b
 15345  003C16  D006               	goto	u9830
 15346  003C18  5196               	movf	(macToString@i+1)& (0+255),w,b
 15347  003C1A  E10F               	bnz	l8961
 15348  003C1C  0E05               	movlw	5
 15349  003C1E  5D95               	subwf	macToString@i& (0+255),w,b
 15350  003C20  B0D8               	btfsc	status,0,c
 15351  003C22  D00B               	goto	l826
 15352  003C24                     u9830:
 15353                           
 15354                           ; BSR set to: 0
 15355                           ;uart.c: 132: address[j++] = ':';
 15356  003C24  5197               	movf	macToString@j& (0+255),w,b
 15357  003C26  0D01               	mullw	1
 15358  003C28  0E81               	movlw	low macToString@address
 15359  003C2A  24F3               	addwf	prodl,w,c
 15360  003C2C  6ED9               	movwf	fsr2l,c
 15361  003C2E  0E00               	movlw	high macToString@address
 15362  003C30  20F4               	addwfc	prodh,w,c
 15363  003C32  6EDA               	movwf	fsr2h,c
 15364  003C34  0E3A               	movlw	58
 15365  003C36  6EDF               	movwf	indf2,c
 15366                           
 15367                           ; BSR set to: 0
 15368  003C38  2B97               	incf	macToString@j& (0+255),f,b
 15369  003C3A                     l826:
 15370  003C3A                     l8961:
 15371                           
 15372                           ; BSR set to: 0
 15373  003C3A  4B95               	infsnz	macToString@i& (0+255),f,b
 15374  003C3C  2B96               	incf	(macToString@i+1)& (0+255),f,b
 15375                           
 15376                           ; BSR set to: 0
 15377  003C3E  BF96               	btfsc	(macToString@i+1)& (0+255),7,b
 15378  003C40  D79C               	goto	l820
 15379  003C42  5196               	movf	(macToString@i+1)& (0+255),w,b
 15380  003C44  E101               	bnz	l8965
 15381  003C46  D795               	goto	L6
 15382  003C48                     u9840:
 15383  003C48                     l821:
 15384  003C48                     l8965:
 15385                           
 15386                           ; BSR set to: 0
 15387                           ;uart.c: 133: }
 15388                           ;uart.c: 134: }
 15389                           ;uart.c: 135: return address;
 15390  003C48  0E81               	movlw	low macToString@address
 15391  003C4A  6F7A               	movwf	?_macToString& (0+255),b
 15392  003C4C  0E00               	movlw	high macToString@address
 15393  003C4E  6F7B               	movwf	(?_macToString+1)& (0+255),b
 15394  003C50  0012               	return	
 15395  003C52                     __end_of_macToString:
 15396                           	opt stack 0
 15397                           tblptru	equ	0xFF8
 15398                           tblptrh	equ	0xFF7
 15399                           tblptrl	equ	0xFF6
 15400                           tablat	equ	0xFF5
 15401                           prodh	equ	0xFF4
 15402                           prodl	equ	0xFF3
 15403                           intcon	equ	0xFF2
 15404                           intcon3	equ	0xFF0
 15405                           indf0	equ	0xFEF
 15406                           postinc0	equ	0xFEE
 15407                           plusw0	equ	0xFEB
 15408                           fsr0h	equ	0xFEA
 15409                           fsr0l	equ	0xFE9
 15410                           wreg	equ	0xFE8
 15411                           indf1	equ	0xFE7
 15412                           postinc1	equ	0xFE6
 15413                           postdec1	equ	0xFE5
 15414                           plusw1	equ	0xFE3
 15415                           fsr1h	equ	0xFE2
 15416                           fsr1l	equ	0xFE1
 15417                           indf2	equ	0xFDF
 15418                           postinc2	equ	0xFDE
 15419                           postdec2	equ	0xFDD
 15420                           plusw2	equ	0xFDB
 15421                           fsr2h	equ	0xFDA
 15422                           fsr2l	equ	0xFD9
 15423                           status	equ	0xFD8
 15424                           
 15425 ;; *************** function _ipv4_isAllZero *****************
 15426 ;; Defined at:
 15427 ;;		line 311 in file "src/stack/protocols/ipv4.c"
 15428 ;; Parameters:    Size  Location     Type
 15429 ;;  ip              2    0[BANK0 ] PTR struct ipv4_address
 15430 ;;		 -> arp_setNewEntry@ip(4), arp_parseFromRXBuffer@arp(32), 
 15431 ;; Auto vars:     Size  Location     Type
 15432 ;;  i               1    2[BANK0 ] unsigned char 
 15433 ;; Return value:  Size  Location     Type
 15434 ;;		None               void
 15435 ;; Registers used:
 15436 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15437 ;; Tracked objects:
 15438 ;;		On entry : 0/0
 15439 ;;		On exit  : 0/0
 15440 ;;		Unchanged: 0/0
 15441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15442 ;;      Params:         0       2       0       0       0       0       0       0       0
 15443 ;;      Locals:         0       1       0       0       0       0       0       0       0
 15444 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15445 ;;      Totals:         0       3       0       0       0       0       0       0       0
 15446 ;;Total ram usage:        3 bytes
 15447 ;; Hardware stack levels used:    1
 15448 ;; Hardware stack levels required when called:    4
 15449 ;; This function calls:
 15450 ;;		Nothing
 15451 ;; This function is called by:
 15452 ;;		_arp_parseFromRXBuffer
 15453 ;;		_arp_setNewEntry
 15454 ;; This function uses a non-reentrant model
 15455 ;;
 15456                           
 15457                           	psect	text56
 15458  00532E                     __ptext56:
 15459                           	opt stack 0
 15460  00532E                     _ipv4_isAllZero:
 15461                           	opt stack 23
 15462                           
 15463                           ;ipv4.c: 312: for (uint8_t i = 0; i < 4; i++) {
 15464                           
 15465                           ; BSR set to: 0
 15466                           ;incstack = 0
 15467  00532E  0E00               	movlw	0
 15468  005330  0100               	movlb	0	; () banked
 15469  005332  6F62               	movwf	ipv4_isAllZero@i& (0+255),b
 15470  005334                     l9127:
 15471                           
 15472                           ; BSR set to: 0
 15473  005334  0E03               	movlw	3
 15474  005336  6562               	cpfsgt	ipv4_isAllZero@i& (0+255),b
 15475  005338  D001               	goto	l1200
 15476  00533A  D00F               	goto	u10080
 15477  00533C                     l1200:
 15478                           
 15479                           ; BSR set to: 0
 15480                           ;ipv4.c: 313: if (ip->address[i] != 0x00)
 15481                           
 15482                           ; BSR set to: 0
 15483  00533C  5162               	movf	ipv4_isAllZero@i& (0+255),w,b
 15484  00533E  0D01               	mullw	1
 15485  005340  50F3               	movf	prodl,w,c
 15486  005342  2560               	addwf	ipv4_isAllZero@ip& (0+255),w,b
 15487  005344  6ED9               	movwf	fsr2l,c
 15488  005346  50F4               	movf	prodh,w,c
 15489  005348  2161               	addwfc	(ipv4_isAllZero@ip+1)& (0+255),w,b
 15490  00534A  6EDA               	movwf	fsr2h,c
 15491  00534C  50DF               	movf	indf2,w,c
 15492  00534E  B4D8               	btfsc	status,2,c
 15493  005350  D002               	goto	l1202
 15494                           
 15495                           ; BSR set to: 0
 15496                           ;ipv4.c: 314: return 0;
 15497  005352  90D8               	bcf	status,0,c
 15498                           
 15499                           ; BSR set to: 0
 15500  005354  0012               	return	
 15501  005356                     l1202:
 15502                           
 15503                           ; BSR set to: 0
 15504                           
 15505                           ; BSR set to: 0
 15506  005356  2B62               	incf	ipv4_isAllZero@i& (0+255),f,b
 15507  005358  D7ED               	goto	l9127
 15508  00535A                     u10080:
 15509                           
 15510                           ; BSR set to: 0
 15511                           ;ipv4.c: 315: }
 15512                           ;ipv4.c: 316: return 1;
 15513                           
 15514                           ; BSR set to: 0
 15515  00535A  80D8               	bsf	status,0,c
 15516  00535C  0012               	return	
 15517  00535E                     __end_of_ipv4_isAllZero:
 15518                           	opt stack 0
 15519                           tblptru	equ	0xFF8
 15520                           tblptrh	equ	0xFF7
 15521                           tblptrl	equ	0xFF6
 15522                           tablat	equ	0xFF5
 15523                           prodh	equ	0xFF4
 15524                           prodl	equ	0xFF3
 15525                           intcon	equ	0xFF2
 15526                           intcon3	equ	0xFF0
 15527                           indf0	equ	0xFEF
 15528                           postinc0	equ	0xFEE
 15529                           plusw0	equ	0xFEB
 15530                           fsr0h	equ	0xFEA
 15531                           fsr0l	equ	0xFE9
 15532                           wreg	equ	0xFE8
 15533                           indf1	equ	0xFE7
 15534                           postinc1	equ	0xFE6
 15535                           postdec1	equ	0xFE5
 15536                           plusw1	equ	0xFE3
 15537                           fsr1h	equ	0xFE2
 15538                           fsr1l	equ	0xFE1
 15539                           indf2	equ	0xFDF
 15540                           postinc2	equ	0xFDE
 15541                           postdec2	equ	0xFDD
 15542                           plusw2	equ	0xFDB
 15543                           fsr2h	equ	0xFDA
 15544                           fsr2l	equ	0xFD9
 15545                           status	equ	0xFD8
 15546                           
 15547 ;; *************** function _arp_background *****************
 15548 ;; Defined at:
 15549 ;;		line 383 in file "src/stack/protocols/arp.c"
 15550 ;; Parameters:    Size  Location     Type
 15551 ;;  link            1    wreg     enum E233
 15552 ;; Auto vars:     Size  Location     Type
 15553 ;;  link            1   86[BANK1 ] enum E233
 15554 ;;  errProbe        3   90[BANK1 ] struct error
 15555 ;;  errAnnounce     3   87[BANK1 ] struct error
 15556 ;; Return value:  Size  Location     Type
 15557 ;;                  3   81[BANK1 ] struct error
 15558 ;; Registers used:
 15559 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15560 ;; Tracked objects:
 15561 ;;		On entry : 0/0
 15562 ;;		On exit  : 0/0
 15563 ;;		Unchanged: 0/0
 15564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15565 ;;      Params:         0       0       3       0       0       0       0       0       0
 15566 ;;      Locals:         0       0       7       0       0       0       0       0       0
 15567 ;;      Temps:          0       0       2       0       0       0       0       0       0
 15568 ;;      Totals:         0       0      12       0       0       0       0       0       0
 15569 ;;Total ram usage:       12 bytes
 15570 ;; Hardware stack levels used:    1
 15571 ;; Hardware stack levels required when called:   12
 15572 ;; This function calls:
 15573 ;;		_UARTTransmitText
 15574 ;;		_arp_gratuitous
 15575 ;;		_arp_probe
 15576 ;;		_ipv4_SrcAddrChanged
 15577 ;;		_ipv4_getPreliminaryIPSourceAddress
 15578 ;; This function is called by:
 15579 ;;		_handleStackBackgroundTasks
 15580 ;; This function uses a non-reentrant model
 15581 ;;
 15582                           
 15583                           	psect	text57
 15584  002D16                     __ptext57:
 15585                           	opt stack 0
 15586  002D16                     _arp_background:
 15587                           	opt stack 17
 15588                           
 15589                           ; BSR set to: 0
 15590                           ;incstack = 0
 15591                           ;arp_background@link stored from wreg
 15592  002D16  0101               	movlb	1	; () banked
 15593  002D18  6F56               	movwf	arp_background@link& (0+255),b
 15594                           
 15595                           ;arp.c: 384: error_t static err;
 15596                           ;arp.c: 385: error_t errProbe;
 15597                           ;arp.c: 386: error_t errAnnounce;
 15598                           ;arp.c: 387: bool_t static fAnnounce = 0;
 15599                           ;arp.c: 388: int8_t static state = 0;
 15600                           ;arp.c: 389: ipv4_address_t static ipPreliminary;
 15601                           ;arp.c: 390: err.code = ERROR_ARP_WAITING;
 15602  002D1A  0E01               	movlw	1
 15603  002D1C  0101               	movlb	1	; () banked
 15604  002D1E  6FF8               	movwf	(arp_background@err+2)& (0+255),b
 15605  002D20  0E91               	movlw	145
 15606  002D22  6FF7               	movwf	(arp_background@err+1)& (0+255),b
 15607                           
 15608                           ;arp.c: 391: err.module = ERROR_MODULE_ARP;
 15609  002D24  0E03               	movlw	3
 15610  002D26  6FF6               	movwf	arp_background@err& (0+255),b
 15611                           
 15612                           ;arp.c: 393: switch (state) {
 15613  002D28  D0A8               	goto	l1039
 15614  002D2A                     
 15615                           ; BSR set to: 1
 15616                           ;arp.c: 397: ipPreliminary = ipv4_getPreliminaryIPSourceAddress();
 15617                           
 15618                           ; BSR set to: 1
 15619  002D2A  EC5A  F02B         	call	_ipv4_getPreliminaryIPSourceAddress	;wreg free
 15620  002D2E  C060  F1CA         	movff	?_ipv4_getPreliminaryIPSourceAddress,arp_background@ipPreliminary
 15621  002D32  C061  F1CB         	movff	?_ipv4_getPreliminaryIPSourceAddress+1,arp_background@ipPreliminary+1
 15622  002D36  C062  F1CC         	movff	?_ipv4_getPreliminaryIPSourceAddress+2,arp_background@ipPreliminary+2
 15623  002D3A  C063  F1CD         	movff	?_ipv4_getPreliminaryIPSourceAddress+3,arp_background@ipPreliminary+3
 15624                           
 15625                           ;arp.c: 398: if (ipv4_SrcAddrChanged(&err)) {
 15626  002D3E  0EF6               	movlw	low arp_background@err
 15627  002D40  0100               	movlb	0	; () banked
 15628  002D42  6F60               	movwf	ipv4_SrcAddrChanged@err& (0+255),b
 15629  002D44  0E01               	movlw	high arp_background@err
 15630  002D46  6F61               	movwf	(ipv4_SrcAddrChanged@err+1)& (0+255),b
 15631  002D48  EC3E  F02B         	call	_ipv4_SrcAddrChanged	;wreg free
 15632  002D4C  0100               	movlb	0	; () banked
 15633  002D4E  A0D8               	btfss	status,0,c
 15634  002D50  D055               	goto	l1044
 15635                           
 15636                           ; BSR set to: 0
 15637                           ;arp.c: 399: errProbe.code = arp_probe(ipPreliminary, link).code;
 15638  002D52  C1CA  F134         	movff	arp_background@ipPreliminary,arp_probe@ipTarget
 15639  002D56  C1CB  F135         	movff	arp_background@ipPreliminary+1,arp_probe@ipTarget+1
 15640  002D5A  C1CC  F136         	movff	arp_background@ipPreliminary+2,arp_probe@ipTarget+2
 15641  002D5E  C1CD  F137         	movff	arp_background@ipPreliminary+3,arp_probe@ipTarget+3
 15642  002D62  C156  F138         	movff	arp_background@link,arp_probe@link
 15643  002D66  ECA7  F00C         	call	_arp_probe	;wreg free
 15644  002D6A  0E34               	movlw	low ?_arp_probe
 15645  002D6C  6ED9               	movwf	fsr2l,c
 15646  002D6E  0E01               	movlw	high ?_arp_probe
 15647  002D70  6EDA               	movwf	fsr2h,c
 15648  002D72  0E01               	movlw	1
 15649  002D74  26D9               	addwf	fsr2l,f,c
 15650  002D76  0E00               	movlw	0
 15651  002D78  22DA               	addwfc	fsr2h,f,c
 15652  002D7A  CFDE F15B          	movff	postinc2,arp_background@errProbe+1
 15653  002D7E  CFDD F15C          	movff	postdec2,arp_background@errProbe+2
 15654                           
 15655                           ;arp.c: 400: switch (errProbe.code) {
 15656  002D82  D023               	goto	l1042
 15657  002D84                     
 15658                           ;arp.c: 403: UARTTransmitText("[ARP]: Conflict during probing.\n\r");
 15659  002D84  0E69               	movlw	low STR_86
 15660  002D86  0100               	movlb	0	; () banked
 15661  002D88  6F98               	movwf	UARTTransmitText@str& (0+255),b
 15662  002D8A  0E7C               	movlw	high STR_86
 15663  002D8C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 15664  002D8E  ECD8  F026         	call	_UARTTransmitText	;wreg free
 15665                           
 15666                           ;arp.c: 405: break;
 15667  002D92  D034               	goto	l1044
 15668  002D94                     
 15669                           ;arp.c: 408: UARTTransmitText("[ARP]: Nobody answered to probes.\n\r");
 15670  002D94  0E22               	movlw	low STR_87
 15671  002D96  0100               	movlb	0	; () banked
 15672  002D98  6F98               	movwf	UARTTransmitText@str& (0+255),b
 15673  002D9A  0E7C               	movlw	high STR_87
 15674  002D9C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 15675  002D9E  ECD8  F026         	call	_UARTTransmitText	;wreg free
 15676                           
 15677                           ;arp.c: 410: state = 1;
 15678  002DA2  0E01               	movlw	1
 15679  002DA4  0101               	movlb	1	; () banked
 15680  002DA6  6FD7               	movwf	arp_background@state& (0+255),b
 15681                           
 15682                           ; BSR set to: 1
 15683                           ;arp.c: 413: break;
 15684                           
 15685                           ;arp.c: 412: case ERROR_ARP_WAITING:
 15686                           
 15687                           ;arp.c: 411: break;
 15688  002DA8  D029               	goto	l1044
 15689  002DAA                     
 15690                           ; BSR set to: 1
 15691                           ;arp.c: 416: UARTTransmitText("[ARP]: Operation was interrupted because link was lost.\n
      +                          \r");
 15692                           
 15693                           ; BSR set to: 1
 15694  002DAA  0E16               	movlw	low STR_88
 15695  002DAC  0100               	movlb	0	; () banked
 15696  002DAE  6F98               	movwf	UARTTransmitText@str& (0+255),b
 15697  002DB0  0E7A               	movlw	high STR_88
 15698  002DB2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 15699  002DB4  ECD8  F026         	call	_UARTTransmitText	;wreg free
 15700                           
 15701                           ;arp.c: 418: break;
 15702  002DB8  D021               	goto	l1044
 15703  002DBA                     
 15704                           ;arp.c: 421: UARTTransmitText("[ARP]: An unknown error occured.\n\r");
 15705  002DBA  0E46               	movlw	low STR_89
 15706  002DBC  0100               	movlb	0	; () banked
 15707  002DBE  6F98               	movwf	UARTTransmitText@str& (0+255),b
 15708  002DC0  0E7C               	movlw	high STR_89
 15709  002DC2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 15710  002DC4  ECD8  F026         	call	_UARTTransmitText	;wreg free
 15711                           
 15712                           ;arp.c: 423: }
 15713  002DC8  D019               	goto	l1044
 15714  002DCA                     l1042:
 15715  002DCA  EE21  F05B         	lfsr	2,arp_background@errProbe+1
 15716  002DCE  CFDE F154          	movff	postinc2,??_arp_background
 15717  002DD2  CFDD F155          	movff	postdec2,??_arp_background+1
 15718                           
 15719                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15720                           ; Switch size 1, requested type "space"
 15721                           ; Number of cases is 1, Range of values is 1 to 1
 15722                           ; switch strategies available:
 15723                           ; Name         Instructions Cycles
 15724                           ; simple_byte            4     3 (average)
 15725                           ;	Chosen strategy is simple_byte
 15726  002DD6  0101               	movlb	1	; () banked
 15727  002DD8  5155               	movf	(??_arp_background+1)& (0+255),w,b
 15728  002DDA  0A01               	xorlw	1	; case 1
 15729  002DDC  A4D8               	btfss	status,2,c
 15730  002DDE  D7ED               	goto	l1048
 15731                           
 15732                           ; BSR set to: 1
 15733                           ; Switch size 1, requested type "space"
 15734                           ; Number of cases is 4, Range of values is 145 to 151
 15735                           ; switch strategies available:
 15736                           ; Name         Instructions Cycles
 15737                           ; simple_byte           13     7 (average)
 15738                           ;	Chosen strategy is simple_byte
 15739  002DE0  5154               	movf	??_arp_background& (0+255),w,b
 15740  002DE2  0A91               	xorlw	145	; case 145
 15741  002DE4  B4D8               	btfsc	status,2,c
 15742  002DE6  D00A               	goto	l1044
 15743  002DE8  0A02               	xorlw	2	; case 147
 15744  002DEA  B4D8               	btfsc	status,2,c
 15745  002DEC  D7D3               	goto	l1045
 15746  002DEE  0A05               	xorlw	5	; case 150
 15747  002DF0  B4D8               	btfsc	status,2,c
 15748  002DF2  D7C8               	goto	l1043
 15749  002DF4  0A01               	xorlw	1	; case 151
 15750  002DF6  B4D8               	btfsc	status,2,c
 15751  002DF8  D7D8               	goto	l1047
 15752  002DFA  D7DF               	goto	l1048
 15753  002DFC                     l1044:
 15754                           
 15755                           ;arp.c: 424: }
 15756                           ;arp.c: 425: err.code = errProbe.code;
 15757                           
 15758                           ; BSR set to: 1
 15759  002DFC  C15B  F1F7         	movff	arp_background@errProbe+1,arp_background@err+1
 15760  002E00  C15C  F1F8         	movff	arp_background@errProbe+2,arp_background@err+2
 15761                           
 15762                           ;arp.c: 427: break;
 15763  002E04  D041               	goto	l1049
 15764  002E06                     
 15765                           ;arp.c: 430: errAnnounce = arp_gratuitous(ipPreliminary, link);
 15766  002E06  C1CA  F134         	movff	arp_background@ipPreliminary,arp_gratuitous@ip
 15767  002E0A  C1CB  F135         	movff	arp_background@ipPreliminary+1,arp_gratuitous@ip+1
 15768  002E0E  C1CC  F136         	movff	arp_background@ipPreliminary+2,arp_gratuitous@ip+2
 15769  002E12  C1CD  F137         	movff	arp_background@ipPreliminary+3,arp_gratuitous@ip+3
 15770  002E16  C156  F138         	movff	arp_background@link,arp_gratuitous@link
 15771  002E1A  ECB0  F011         	call	_arp_gratuitous	;wreg free
 15772  002E1E  C134  F157         	movff	?_arp_gratuitous,arp_background@errAnnounce
 15773  002E22  C135  F158         	movff	?_arp_gratuitous+1,arp_background@errAnnounce+1
 15774  002E26  C136  F159         	movff	?_arp_gratuitous+2,arp_background@errAnnounce+2
 15775                           
 15776                           ;arp.c: 431: err.code = errAnnounce.code;
 15777  002E2A  C158  F1F7         	movff	arp_background@errAnnounce+1,arp_background@err+1
 15778  002E2E  C159  F1F8         	movff	arp_background@errAnnounce+2,arp_background@err+2
 15779                           
 15780                           ;arp.c: 432: if (err.code == ERROR_ARP_IPv4_ADDRESS_CONFLICT) {
 15781  002E32  0E96               	movlw	150
 15782  002E34  0101               	movlb	1	; () banked
 15783  002E36  19F7               	xorwf	(arp_background@err+1)& (0+255),w,b
 15784  002E38  E10D               	bnz	l10319
 15785  002E3A  05F8               	decf	(arp_background@err+2)& (0+255),w,b
 15786  002E3C  A4D8               	btfss	status,2,c
 15787  002E3E  D00A               	goto	l1051
 15788                           
 15789                           ; BSR set to: 1
 15790                           ;arp.c: 434: UARTTransmitText("[ARP]: Conflict during announcement.\n\r");
 15791  002E40  0E65               	movlw	low STR_90
 15792  002E42  0100               	movlb	0	; () banked
 15793  002E44  6F98               	movwf	UARTTransmitText@str& (0+255),b
 15794  002E46  0E7B               	movlw	high STR_90
 15795  002E48  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 15796  002E4A  ECD8  F026         	call	_UARTTransmitText	;wreg free
 15797                           
 15798                           ;arp.c: 436: state = 0;
 15799  002E4E  0E00               	movlw	0
 15800  002E50  0101               	movlb	1	; () banked
 15801  002E52  6FD7               	movwf	arp_background@state& (0+255),b
 15802  002E54                     l1051:
 15803  002E54                     l10319:
 15804                           
 15805                           ; BSR set to: 1
 15806                           ;arp.c: 437: }
 15807                           ;arp.c: 438: if (errAnnounce.module == ERROR_MODULE_ARP &&
 15808                           ;arp.c: 439: errAnnounce.code == (uint16_t)0) {
 15809  002E54  0E03               	movlw	3
 15810  002E56  1957               	xorwf	arp_background@errAnnounce& (0+255),w,b
 15811  002E58  A4D8               	btfss	status,2,c
 15812  002E5A  D016               	goto	l1049
 15813                           
 15814                           ; BSR set to: 1
 15815  002E5C  5158               	movf	(arp_background@errAnnounce+1)& (0+255),w,b
 15816  002E5E  1159               	iorwf	(arp_background@errAnnounce+2)& (0+255),w,b
 15817  002E60  A4D8               	btfss	status,2,c
 15818  002E62  D012               	goto	l1049
 15819                           
 15820                           ; BSR set to: 1
 15821                           ;arp.c: 441: UARTTransmitText("[ARP]: All announcements sent.\n\r");
 15822  002E64  0ECE               	movlw	low STR_91
 15823  002E66  0100               	movlb	0	; () banked
 15824  002E68  6F98               	movwf	UARTTransmitText@str& (0+255),b
 15825  002E6A  0E7C               	movlw	high STR_91
 15826  002E6C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 15827  002E6E  ECD8  F026         	call	_UARTTransmitText	;wreg free
 15828                           
 15829                           ;arp.c: 443: state = 0;
 15830  002E72  0E00               	movlw	0
 15831  002E74  0101               	movlb	1	; () banked
 15832  002E76  6FD7               	movwf	arp_background@state& (0+255),b
 15833                           
 15834                           ; BSR set to: 1
 15835                           ;arp.c: 446: }
 15836                           
 15837                           ; BSR set to: 1
 15838                           ;arp.c: 444: }
 15839                           ;arp.c: 445: break;
 15840  002E78  D007               	goto	l1049
 15841  002E7A                     l1039:
 15842                           
 15843                           ; BSR set to: 1
 15844                           
 15845                           ; BSR set to: 1
 15846  002E7A  51D7               	movf	arp_background@state& (0+255),w,b
 15847                           
 15848                           ; Switch size 1, requested type "space"
 15849                           ; Number of cases is 2, Range of values is 0 to 1
 15850                           ; switch strategies available:
 15851                           ; Name         Instructions Cycles
 15852                           ; simple_byte            7     4 (average)
 15853                           ;	Chosen strategy is simple_byte
 15854  002E7C  0A00               	xorlw	0	; case 0
 15855  002E7E  B4D8               	btfsc	status,2,c
 15856  002E80  D754               	goto	l1040
 15857  002E82  0A01               	xorlw	1	; case 1
 15858  002E84  B4D8               	btfsc	status,2,c
 15859  002E86  D7BF               	goto	l1050
 15860  002E88                     l1049:
 15861                           
 15862                           ;arp.c: 448: return err;
 15863  002E88  C1F6  F151         	movff	arp_background@err,?_arp_background
 15864  002E8C  C1F7  F152         	movff	arp_background@err+1,?_arp_background+1
 15865  002E90  C1F8  F153         	movff	arp_background@err+2,?_arp_background+2
 15866  002E94  0012               	return		;funcret
 15867  002E96                     __end_of_arp_background:
 15868                           	opt stack 0
 15869                           tblptru	equ	0xFF8
 15870                           tblptrh	equ	0xFF7
 15871                           tblptrl	equ	0xFF6
 15872                           tablat	equ	0xFF5
 15873                           prodh	equ	0xFF4
 15874                           prodl	equ	0xFF3
 15875                           intcon	equ	0xFF2
 15876                           intcon3	equ	0xFF0
 15877                           indf0	equ	0xFEF
 15878                           postinc0	equ	0xFEE
 15879                           plusw0	equ	0xFEB
 15880                           fsr0h	equ	0xFEA
 15881                           fsr0l	equ	0xFE9
 15882                           wreg	equ	0xFE8
 15883                           indf1	equ	0xFE7
 15884                           postinc1	equ	0xFE6
 15885                           postdec1	equ	0xFE5
 15886                           plusw1	equ	0xFE3
 15887                           fsr1h	equ	0xFE2
 15888                           fsr1l	equ	0xFE1
 15889                           indf2	equ	0xFDF
 15890                           postinc2	equ	0xFDE
 15891                           postdec2	equ	0xFDD
 15892                           plusw2	equ	0xFDB
 15893                           fsr2h	equ	0xFDA
 15894                           fsr2l	equ	0xFD9
 15895                           status	equ	0xFD8
 15896                           
 15897 ;; *************** function _ipv4_getPreliminaryIPSourceAddress *****************
 15898 ;; Defined at:
 15899 ;;		line 245 in file "src/stack/protocols/ipv4.c"
 15900 ;; Parameters:    Size  Location     Type
 15901 ;;		None
 15902 ;; Auto vars:     Size  Location     Type
 15903 ;;		None
 15904 ;; Return value:  Size  Location     Type
 15905 ;;                  4    0[BANK0 ] struct ipv4_address
 15906 ;; Registers used:
 15907 ;;		None
 15908 ;; Tracked objects:
 15909 ;;		On entry : 0/0
 15910 ;;		On exit  : 0/0
 15911 ;;		Unchanged: 0/0
 15912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15913 ;;      Params:         0       4       0       0       0       0       0       0       0
 15914 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15915 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15916 ;;      Totals:         0       4       0       0       0       0       0       0       0
 15917 ;;Total ram usage:        4 bytes
 15918 ;; Hardware stack levels used:    1
 15919 ;; Hardware stack levels required when called:    4
 15920 ;; This function calls:
 15921 ;;		Nothing
 15922 ;; This function is called by:
 15923 ;;		_arp_background
 15924 ;; This function uses a non-reentrant model
 15925 ;;
 15926                           
 15927                           	psect	text58
 15928  0056B4                     __ptext58:
 15929                           	opt stack 0
 15930  0056B4                     _ipv4_getPreliminaryIPSourceAddress:
 15931                           	opt stack 24
 15932                           
 15933                           ;ipv4.c: 246: return ipPreliminarySource;
 15934                           
 15935                           ;incstack = 0
 15936  0056B4  C1C6  F060         	movff	_ipPreliminarySource,?_ipv4_getPreliminaryIPSourceAddress
 15937  0056B8  C1C7  F061         	movff	_ipPreliminarySource+1,?_ipv4_getPreliminaryIPSourceAddress+1
 15938  0056BC  C1C8  F062         	movff	_ipPreliminarySource+2,?_ipv4_getPreliminaryIPSourceAddress+2
 15939  0056C0  C1C9  F063         	movff	_ipPreliminarySource+3,?_ipv4_getPreliminaryIPSourceAddress+3
 15940  0056C4  0012               	return		;funcret
 15941  0056C6                     __end_of_ipv4_getPreliminaryIPSourceAddress:
 15942                           	opt stack 0
 15943                           tblptru	equ	0xFF8
 15944                           tblptrh	equ	0xFF7
 15945                           tblptrl	equ	0xFF6
 15946                           tablat	equ	0xFF5
 15947                           prodh	equ	0xFF4
 15948                           prodl	equ	0xFF3
 15949                           intcon	equ	0xFF2
 15950                           intcon3	equ	0xFF0
 15951                           indf0	equ	0xFEF
 15952                           postinc0	equ	0xFEE
 15953                           plusw0	equ	0xFEB
 15954                           fsr0h	equ	0xFEA
 15955                           fsr0l	equ	0xFE9
 15956                           wreg	equ	0xFE8
 15957                           indf1	equ	0xFE7
 15958                           postinc1	equ	0xFE6
 15959                           postdec1	equ	0xFE5
 15960                           plusw1	equ	0xFE3
 15961                           fsr1h	equ	0xFE2
 15962                           fsr1l	equ	0xFE1
 15963                           indf2	equ	0xFDF
 15964                           postinc2	equ	0xFDE
 15965                           postdec2	equ	0xFDD
 15966                           plusw2	equ	0xFDB
 15967                           fsr2h	equ	0xFDA
 15968                           fsr2l	equ	0xFD9
 15969                           status	equ	0xFD8
 15970                           
 15971 ;; *************** function _ipv4_SrcAddrChanged *****************
 15972 ;; Defined at:
 15973 ;;		line 296 in file "src/stack/protocols/ipv4.c"
 15974 ;; Parameters:    Size  Location     Type
 15975 ;;  err             2    0[BANK0 ] PTR struct error
 15976 ;;		 -> arp_background@err(3), 
 15977 ;; Auto vars:     Size  Location     Type
 15978 ;;		None
 15979 ;; Return value:  Size  Location     Type
 15980 ;;		None               void
 15981 ;; Registers used:
 15982 ;;		wreg, status,2, status,0
 15983 ;; Tracked objects:
 15984 ;;		On entry : 0/0
 15985 ;;		On exit  : 0/0
 15986 ;;		Unchanged: 0/0
 15987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15988 ;;      Params:         0       2       0       0       0       0       0       0       0
 15989 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15990 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15991 ;;      Totals:         0       2       0       0       0       0       0       0       0
 15992 ;;Total ram usage:        2 bytes
 15993 ;; Hardware stack levels used:    1
 15994 ;; Hardware stack levels required when called:    4
 15995 ;; This function calls:
 15996 ;;		Nothing
 15997 ;; This function is called by:
 15998 ;;		_arp_background
 15999 ;; This function uses a non-reentrant model
 16000 ;;
 16001                           
 16002                           	psect	text59
 16003  00567C                     __ptext59:
 16004                           	opt stack 0
 16005  00567C                     _ipv4_SrcAddrChanged:
 16006                           	opt stack 24
 16007                           
 16008                           ;ipv4.c: 297: arpStatus = err;
 16009                           
 16010                           ;incstack = 0
 16011  00567C  C060  F03C         	movff	ipv4_SrcAddrChanged@err,_arpStatus
 16012  005680  C061  F03D         	movff	ipv4_SrcAddrChanged@err+1,_arpStatus+1
 16013                           
 16014                           ;ipv4.c: 298: return fSrcAddrChanged;
 16015  005684  B04E               	btfsc	_fSrcAddrChanged/(0+8),_fSrcAddrChanged& (0+7),c
 16016  005686  D002               	goto	l8197
 16017  005688  90D8               	bcf	status,0,c
 16018  00568A  0012               	return	
 16019  00568C                     l8197:
 16020  00568C  80D8               	bsf	status,0,c
 16021  00568E  0012               	return	
 16022  005690                     __end_of_ipv4_SrcAddrChanged:
 16023                           	opt stack 0
 16024                           tblptru	equ	0xFF8
 16025                           tblptrh	equ	0xFF7
 16026                           tblptrl	equ	0xFF6
 16027                           tablat	equ	0xFF5
 16028                           prodh	equ	0xFF4
 16029                           prodl	equ	0xFF3
 16030                           intcon	equ	0xFF2
 16031                           intcon3	equ	0xFF0
 16032                           indf0	equ	0xFEF
 16033                           postinc0	equ	0xFEE
 16034                           plusw0	equ	0xFEB
 16035                           fsr0h	equ	0xFEA
 16036                           fsr0l	equ	0xFE9
 16037                           wreg	equ	0xFE8
 16038                           indf1	equ	0xFE7
 16039                           postinc1	equ	0xFE6
 16040                           postdec1	equ	0xFE5
 16041                           plusw1	equ	0xFE3
 16042                           fsr1h	equ	0xFE2
 16043                           fsr1l	equ	0xFE1
 16044                           indf2	equ	0xFDF
 16045                           postinc2	equ	0xFDE
 16046                           postdec2	equ	0xFDD
 16047                           plusw2	equ	0xFDB
 16048                           fsr2h	equ	0xFDA
 16049                           fsr2l	equ	0xFD9
 16050                           status	equ	0xFD8
 16051                           
 16052 ;; *************** function _arp_probe *****************
 16053 ;; Defined at:
 16054 ;;		line 242 in file "src/stack/protocols/arp.c"
 16055 ;; Parameters:    Size  Location     Type
 16056 ;;  ipTarget        4   52[BANK1 ] struct ipv4_address
 16057 ;;  link            1   56[BANK1 ] enum E233
 16058 ;; Auto vars:     Size  Location     Type
 16059 ;;  ipSender        4   74[BANK1 ] struct ipv4_address
 16060 ;;  waitingTime     4   70[BANK1 ] unsigned long 
 16061 ;;  timeStart       4   66[BANK1 ] unsigned long 
 16062 ;;  err             3   78[BANK1 ] struct error
 16063 ;;  index           1   65[BANK1 ] unsigned char 
 16064 ;; Return value:  Size  Location     Type
 16065 ;;                  3   52[BANK1 ] struct error
 16066 ;; Registers used:
 16067 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16068 ;; Tracked objects:
 16069 ;;		On entry : 0/0
 16070 ;;		On exit  : 0/0
 16071 ;;		Unchanged: 0/0
 16072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16073 ;;      Params:         0       0       5       0       0       0       0       0       0
 16074 ;;      Locals:         0       0      16       0       0       0       0       0       0
 16075 ;;      Temps:          0       0       8       0       0       0       0       0       0
 16076 ;;      Totals:         0       0      29       0       0       0       0       0       0
 16077 ;;Total ram usage:       29 bytes
 16078 ;; Hardware stack levels used:    1
 16079 ;; Hardware stack levels required when called:   11
 16080 ;; This function calls:
 16081 ;;		_UARTTransmitText
 16082 ;;		___lwmod
 16083 ;;		_arp_checkForEntry
 16084 ;;		_arp_sendRequest
 16085 ;;		_getMillis
 16086 ;;		_ipAdressToString
 16087 ;;		_ipv4_setToAllZero
 16088 ;;		_rand
 16089 ;; This function is called by:
 16090 ;;		_arp_background
 16091 ;; This function uses a non-reentrant model
 16092 ;;
 16093                           
 16094                           	psect	text60
 16095  00194E                     __ptext60:
 16096                           	opt stack 0
 16097  00194E                     _arp_probe:
 16098                           	opt stack 17
 16099                           
 16100                           ;arp.c: 243: time_t timeStart;
 16101                           ;arp.c: 244: time_t waitingTime;
 16102                           ;arp.c: 245: ipv4_address_t ipSender;
 16103                           ;arp.c: 246: uint8_t static probeCounter = 0;
 16104                           ;arp.c: 247: error_t err;
 16105                           ;arp.c: 249: enum states {
 16106                           ;arp.c: 250: PREPARING_PROBE, WAITING_TO_SEND, SENDING_PROBE, ARP_ENTRY_FOUND
 16107                           ;arp.c: 251: };
 16108                           ;arp.c: 252: uint8_t static state = PREPARING_PROBE;
 16109                           ;arp.c: 253: uint8_t index;
 16110                           ;arp.c: 254: err.module = ERROR_MODULE_ARP;
 16111                           
 16112                           ;incstack = 0
 16113  00194E  0E03               	movlw	3
 16114  001950  0101               	movlb	1	; () banked
 16115  001952  6F4E               	movwf	arp_probe@err& (0+255),b
 16116                           
 16117                           ;arp.c: 256: if (link == NO_LINK) {
 16118  001954  5138               	movf	arp_probe@link& (0+255),w,b
 16119  001956  A4D8               	btfss	status,2,c
 16120  001958  D00F               	goto	l991
 16121                           
 16122                           ; BSR set to: 1
 16123                           ;arp.c: 257: state = PREPARING_PROBE;
 16124  00195A  0E00               	movlw	0
 16125  00195C  6FDA               	movwf	arp_probe@state& (0+255),b
 16126                           
 16127                           ;arp.c: 258: probeCounter = 0;
 16128  00195E  0E00               	movlw	0
 16129  001960  6FDB               	movwf	arp_probe@probeCounter& (0+255),b
 16130                           
 16131                           ;arp.c: 259: err.code = ERROR_ARP_CONNECTION_FAILED;
 16132  001962  0E01               	movlw	1
 16133  001964  6F50               	movwf	(arp_probe@err+2)& (0+255),b
 16134  001966  0E97               	movlw	151
 16135  001968  6F4F               	movwf	(arp_probe@err+1)& (0+255),b
 16136                           
 16137                           ; BSR set to: 1
 16138                           ;arp.c: 260: return err;
 16139  00196A  C14E  F134         	movff	arp_probe@err,?_arp_probe
 16140  00196E  C14F  F135         	movff	arp_probe@err+1,?_arp_probe+1
 16141  001972  C150  F136         	movff	arp_probe@err+2,?_arp_probe+2
 16142                           
 16143                           ; BSR set to: 1
 16144  001976  0012               	return	
 16145  001978                     l991:
 16146                           
 16147                           ; BSR set to: 1
 16148                           ;arp.c: 261: }
 16149                           ;arp.c: 263: if (arp_checkForEntry(ipTarget, &index)) {
 16150                           
 16151                           ; BSR set to: 1
 16152  001978  C134  F067         	movff	arp_probe@ipTarget,arp_checkForEntry@ip
 16153  00197C  C135  F068         	movff	arp_probe@ipTarget+1,arp_checkForEntry@ip+1
 16154  001980  C136  F069         	movff	arp_probe@ipTarget+2,arp_checkForEntry@ip+2
 16155  001984  C137  F06A         	movff	arp_probe@ipTarget+3,arp_checkForEntry@ip+3
 16156  001988  0E41               	movlw	low arp_probe@index
 16157  00198A  0100               	movlb	0	; () banked
 16158  00198C  6F6B               	movwf	arp_checkForEntry@index& (0+255),b
 16159  00198E  0E01               	movlw	high arp_probe@index
 16160  001990  6F6C               	movwf	(arp_checkForEntry@index+1)& (0+255),b
 16161  001992  ECAF  F020         	call	_arp_checkForEntry	;wreg free
 16162  001996  0900               	iorlw	0
 16163  001998  B4D8               	btfsc	status,2,c
 16164  00199A  D12A               	goto	l994
 16165                           
 16166                           ;arp.c: 264: state = ARP_ENTRY_FOUND;
 16167  00199C  0E03               	movlw	3
 16168  00199E  0101               	movlb	1	; () banked
 16169  0019A0  6FDA               	movwf	arp_probe@state& (0+255),b
 16170                           
 16171                           ; BSR set to: 1
 16172                           ;arp.c: 265: }
 16173                           ;arp.c: 267: switch (state) {
 16174  0019A2  D126               	goto	l994
 16175  0019A4                     
 16176                           ; BSR set to: 1
 16177                           ;arp.c: 269: ipv4_setToAllZero(&ipSender);
 16178                           
 16179                           ; BSR set to: 1
 16180  0019A4  0E4A               	movlw	low arp_probe@ipSender
 16181  0019A6  0100               	movlb	0	; () banked
 16182  0019A8  6F60               	movwf	ipv4_setToAllZero@ip& (0+255),b
 16183  0019AA  0E01               	movlw	high arp_probe@ipSender
 16184  0019AC  6F61               	movwf	(ipv4_setToAllZero@ip+1)& (0+255),b
 16185  0019AE  EC81  F02A         	call	_ipv4_setToAllZero	;wreg free
 16186                           
 16187                           ;arp.c: 270: timeStart = getMillis();
 16188  0019B2  EC63  F02B         	call	_getMillis	;wreg free
 16189  0019B6  C060  F142         	movff	?_getMillis,arp_probe@timeStart
 16190  0019BA  C061  F143         	movff	?_getMillis+1,arp_probe@timeStart+1
 16191  0019BE  C062  F144         	movff	?_getMillis+2,arp_probe@timeStart+2
 16192  0019C2  C063  F145         	movff	?_getMillis+3,arp_probe@timeStart+3
 16193                           
 16194                           ;arp.c: 271: waitingTime = rand() % 1000u;
 16195  0019C6  ECAD  F026         	call	_rand	;wreg free
 16196  0019CA  C06C  F06E         	movff	?_rand,___lwmod@dividend
 16197  0019CE  C06D  F06F         	movff	?_rand+1,___lwmod@dividend+1
 16198  0019D2  0E03               	movlw	3
 16199  0019D4  0100               	movlb	0	; () banked
 16200  0019D6  6F71               	movwf	(___lwmod@divisor+1)& (0+255),b
 16201  0019D8  0EE8               	movlw	232
 16202  0019DA  6F70               	movwf	___lwmod@divisor& (0+255),b
 16203  0019DC  EC3A  F028         	call	___lwmod	;wreg free
 16204  0019E0  0100               	movlb	0	; () banked
 16205  0019E2  C06E  F146         	movff	?___lwmod,arp_probe@waitingTime
 16206  0019E6  C06F  F147         	movff	?___lwmod+1,arp_probe@waitingTime+1
 16207  0019EA  0101               	movlb	1	; () banked
 16208  0019EC  6B48               	clrf	(arp_probe@waitingTime+2)& (0+255),b
 16209  0019EE  6B49               	clrf	(arp_probe@waitingTime+3)& (0+255),b
 16210                           
 16211                           ; BSR set to: 1
 16212                           ;arp.c: 272: state = WAITING_TO_SEND;
 16213  0019F0  0E01               	movlw	1
 16214  0019F2  6FDA               	movwf	arp_probe@state& (0+255),b
 16215  0019F4  D054               	goto	l998
 16216  0019F6                     
 16217                           ; BSR set to: 1
 16218                           ;arp.c: 276: if (getMillis() - timeStart >= waitingTime) {
 16219                           
 16220                           ; BSR set to: 1
 16221  0019F6  C142  F139         	movff	arp_probe@timeStart,??_arp_probe
 16222  0019FA  C143  F13A         	movff	arp_probe@timeStart+1,??_arp_probe+1
 16223  0019FE  C144  F13B         	movff	arp_probe@timeStart+2,??_arp_probe+2
 16224  001A02  C145  F13C         	movff	arp_probe@timeStart+3,??_arp_probe+3
 16225  001A06  1F39               	comf	??_arp_probe& (0+255),f,b
 16226  001A08  1F3A               	comf	(??_arp_probe+1)& (0+255),f,b
 16227  001A0A  1F3B               	comf	(??_arp_probe+2)& (0+255),f,b
 16228  001A0C  1F3C               	comf	(??_arp_probe+3)& (0+255),f,b
 16229  001A0E  2B39               	incf	??_arp_probe& (0+255),f,b
 16230  001A10  0E00               	movlw	0
 16231  001A12  233A               	addwfc	(??_arp_probe+1)& (0+255),f,b
 16232  001A14  233B               	addwfc	(??_arp_probe+2)& (0+255),f,b
 16233  001A16  233C               	addwfc	(??_arp_probe+3)& (0+255),f,b
 16234  001A18  EC63  F02B         	call	_getMillis	;wreg free
 16235  001A1C  0101               	movlb	1	; () banked
 16236  001A1E  5139               	movf	??_arp_probe& (0+255),w,b
 16237  001A20  0100               	movlb	0	; () banked
 16238  001A22  2560               	addwf	?_getMillis& (0+255),w,b
 16239  001A24  0101               	movlb	1	; () banked
 16240  001A26  6F3D               	movwf	(??_arp_probe+4)& (0+255),b
 16241  001A28  513A               	movf	(??_arp_probe+1)& (0+255),w,b
 16242  001A2A  0100               	movlb	0	; () banked
 16243  001A2C  2161               	addwfc	(?_getMillis+1)& (0+255),w,b
 16244  001A2E  0101               	movlb	1	; () banked
 16245  001A30  6F3E               	movwf	(??_arp_probe+5)& (0+255),b
 16246  001A32  513B               	movf	(??_arp_probe+2)& (0+255),w,b
 16247  001A34  0100               	movlb	0	; () banked
 16248  001A36  2162               	addwfc	(?_getMillis+2)& (0+255),w,b
 16249  001A38  0101               	movlb	1	; () banked
 16250  001A3A  6F3F               	movwf	(??_arp_probe+6)& (0+255),b
 16251  001A3C  513C               	movf	(??_arp_probe+3)& (0+255),w,b
 16252  001A3E  0100               	movlb	0	; () banked
 16253  001A40  2163               	addwfc	(?_getMillis+3)& (0+255),w,b
 16254  001A42  0101               	movlb	1	; () banked
 16255  001A44  6F40               	movwf	(??_arp_probe+7)& (0+255),b
 16256  001A46  5146               	movf	arp_probe@waitingTime& (0+255),w,b
 16257  001A48  5D3D               	subwf	(??_arp_probe+4)& (0+255),w,b
 16258  001A4A  5147               	movf	(arp_probe@waitingTime+1)& (0+255),w,b
 16259  001A4C  593E               	subwfb	(??_arp_probe+5)& (0+255),w,b
 16260  001A4E  5148               	movf	(arp_probe@waitingTime+2)& (0+255),w,b
 16261  001A50  593F               	subwfb	(??_arp_probe+6)& (0+255),w,b
 16262  001A52  5149               	movf	(arp_probe@waitingTime+3)& (0+255),w,b
 16263  001A54  5940               	subwfb	(??_arp_probe+7)& (0+255),w,b
 16264  001A56  A0D8               	btfss	status,0,c
 16265  001A58  D022               	goto	l998
 16266                           
 16267                           ; BSR set to: 1
 16268                           ;arp.c: 277: state = SENDING_PROBE;
 16269  001A5A  0E02               	movlw	2
 16270  001A5C  6FDA               	movwf	arp_probe@state& (0+255),b
 16271                           
 16272                           ; BSR set to: 1
 16273                           ;arp.c: 279: waitingTime = (rand() % (2000u - 1000u)) + 1000u;
 16274  001A5E  0EE8               	movlw	232
 16275  001A60  6F39               	movwf	??_arp_probe& (0+255),b
 16276  001A62  0E03               	movlw	3
 16277  001A64  6F3A               	movwf	(??_arp_probe+1)& (0+255),b
 16278  001A66  ECAD  F026         	call	_rand	;wreg free
 16279  001A6A  C06C  F06E         	movff	?_rand,___lwmod@dividend
 16280  001A6E  C06D  F06F         	movff	?_rand+1,___lwmod@dividend+1
 16281  001A72  0E03               	movlw	3
 16282  001A74  0100               	movlb	0	; () banked
 16283  001A76  6F71               	movwf	(___lwmod@divisor+1)& (0+255),b
 16284  001A78  0EE8               	movlw	232
 16285  001A7A  6F70               	movwf	___lwmod@divisor& (0+255),b
 16286  001A7C  EC3A  F028         	call	___lwmod	;wreg free
 16287  001A80  0101               	movlb	1	; () banked
 16288  001A82  5139               	movf	??_arp_probe& (0+255),w,b
 16289  001A84  0100               	movlb	0	; () banked
 16290  001A86  276E               	addwf	?___lwmod& (0+255),f,b
 16291  001A88  0101               	movlb	1	; () banked
 16292  001A8A  513A               	movf	(??_arp_probe+1)& (0+255),w,b
 16293  001A8C  0100               	movlb	0	; () banked
 16294  001A8E  236F               	addwfc	(?___lwmod+1)& (0+255),f,b
 16295  001A90  C06E  F146         	movff	?___lwmod,arp_probe@waitingTime
 16296  001A94  C06F  F147         	movff	?___lwmod+1,arp_probe@waitingTime+1
 16297  001A98  0101               	movlb	1	; () banked
 16298  001A9A  6B48               	clrf	(arp_probe@waitingTime+2)& (0+255),b
 16299  001A9C  6B49               	clrf	(arp_probe@waitingTime+3)& (0+255),b
 16300  001A9E                     l998:
 16301                           
 16302                           ; BSR set to: 1
 16303                           ;arp.c: 280: }
 16304                           ;arp.c: 281: err.code = ERROR_ARP_WAITING;
 16305                           
 16306                           ; BSR set to: 1
 16307  001A9E  0E01               	movlw	1
 16308  001AA0  6F50               	movwf	(arp_probe@err+2)& (0+255),b
 16309  001AA2  0E91               	movlw	145
 16310  001AA4  D0A3               	goto	L8
 16311  001AA6                     
 16312                           ; BSR set to: 1
 16313                           ;arp.c: 284: if (probeCounter == 0 || (getMillis() - timeStart) > waitingTime) {
 16314                           
 16315                           ; BSR set to: 1
 16316  001AA6  51DB               	movf	arp_probe@probeCounter& (0+255),w,b
 16317  001AA8  B4D8               	btfsc	status,2,c
 16318  001AAA  D032               	goto	u11480
 16319                           
 16320                           ; BSR set to: 1
 16321  001AAC  C142  F139         	movff	arp_probe@timeStart,??_arp_probe
 16322  001AB0  C143  F13A         	movff	arp_probe@timeStart+1,??_arp_probe+1
 16323  001AB4  C144  F13B         	movff	arp_probe@timeStart+2,??_arp_probe+2
 16324  001AB8  C145  F13C         	movff	arp_probe@timeStart+3,??_arp_probe+3
 16325  001ABC  1F39               	comf	??_arp_probe& (0+255),f,b
 16326  001ABE  1F3A               	comf	(??_arp_probe+1)& (0+255),f,b
 16327  001AC0  1F3B               	comf	(??_arp_probe+2)& (0+255),f,b
 16328  001AC2  1F3C               	comf	(??_arp_probe+3)& (0+255),f,b
 16329  001AC4  2B39               	incf	??_arp_probe& (0+255),f,b
 16330  001AC6  0E00               	movlw	0
 16331  001AC8  233A               	addwfc	(??_arp_probe+1)& (0+255),f,b
 16332  001ACA  233B               	addwfc	(??_arp_probe+2)& (0+255),f,b
 16333  001ACC  233C               	addwfc	(??_arp_probe+3)& (0+255),f,b
 16334  001ACE  EC63  F02B         	call	_getMillis	;wreg free
 16335  001AD2  0101               	movlb	1	; () banked
 16336  001AD4  5139               	movf	??_arp_probe& (0+255),w,b
 16337  001AD6  0100               	movlb	0	; () banked
 16338  001AD8  2560               	addwf	?_getMillis& (0+255),w,b
 16339  001ADA  0101               	movlb	1	; () banked
 16340  001ADC  6F3D               	movwf	(??_arp_probe+4)& (0+255),b
 16341  001ADE  513A               	movf	(??_arp_probe+1)& (0+255),w,b
 16342  001AE0  0100               	movlb	0	; () banked
 16343  001AE2  2161               	addwfc	(?_getMillis+1)& (0+255),w,b
 16344  001AE4  0101               	movlb	1	; () banked
 16345  001AE6  6F3E               	movwf	(??_arp_probe+5)& (0+255),b
 16346  001AE8  513B               	movf	(??_arp_probe+2)& (0+255),w,b
 16347  001AEA  0100               	movlb	0	; () banked
 16348  001AEC  2162               	addwfc	(?_getMillis+2)& (0+255),w,b
 16349  001AEE  0101               	movlb	1	; () banked
 16350  001AF0  6F3F               	movwf	(??_arp_probe+6)& (0+255),b
 16351  001AF2  513C               	movf	(??_arp_probe+3)& (0+255),w,b
 16352  001AF4  0100               	movlb	0	; () banked
 16353  001AF6  2163               	addwfc	(?_getMillis+3)& (0+255),w,b
 16354  001AF8  0101               	movlb	1	; () banked
 16355  001AFA  6F40               	movwf	(??_arp_probe+7)& (0+255),b
 16356  001AFC  513D               	movf	(??_arp_probe+4)& (0+255),w,b
 16357  001AFE  5D46               	subwf	arp_probe@waitingTime& (0+255),w,b
 16358  001B00  513E               	movf	(??_arp_probe+5)& (0+255),w,b
 16359  001B02  5947               	subwfb	(arp_probe@waitingTime+1)& (0+255),w,b
 16360  001B04  513F               	movf	(??_arp_probe+6)& (0+255),w,b
 16361  001B06  5948               	subwfb	(arp_probe@waitingTime+2)& (0+255),w,b
 16362  001B08  5140               	movf	(??_arp_probe+7)& (0+255),w,b
 16363  001B0A  5949               	subwfb	(arp_probe@waitingTime+3)& (0+255),w,b
 16364  001B0C  B0D8               	btfsc	status,0,c
 16365  001B0E  D07E               	goto	l996
 16366  001B10                     u11480:
 16367                           
 16368                           ; BSR set to: 1
 16369                           ;arp.c: 285: timeStart = getMillis();
 16370                           
 16371                           ; BSR set to: 1
 16372  001B10  EC63  F02B         	call	_getMillis	;wreg free
 16373  001B14  C060  F142         	movff	?_getMillis,arp_probe@timeStart
 16374  001B18  C061  F143         	movff	?_getMillis+1,arp_probe@timeStart+1
 16375  001B1C  C062  F144         	movff	?_getMillis+2,arp_probe@timeStart+2
 16376  001B20  C063  F145         	movff	?_getMillis+3,arp_probe@timeStart+3
 16377                           
 16378                           ;arp.c: 287: if (probeCounter < 3u) {
 16379  001B24  0E03               	movlw	3
 16380  001B26  0101               	movlb	1	; () banked
 16381  001B28  61DB               	cpfslt	arp_probe@probeCounter& (0+255),b
 16382  001B2A  D047               	goto	l1003
 16383                           
 16384                           ; BSR set to: 1
 16385                           ;arp.c: 289: UARTTransmitText("[ARP]: Sending Probe for ");
 16386  001B2C  0ED9               	movlw	low STR_81
 16387  001B2E  0100               	movlb	0	; () banked
 16388  001B30  6F98               	movwf	UARTTransmitText@str& (0+255),b
 16389  001B32  0E7D               	movlw	high STR_81
 16390  001B34  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 16391  001B36  ECD8  F026         	call	_UARTTransmitText	;wreg free
 16392                           
 16393                           ;arp.c: 290: UARTTransmitText(ipAdressToString(ipTarget));
 16394  001B3A  C134  F073         	movff	arp_probe@ipTarget,ipAdressToString@ip
 16395  001B3E  C135  F074         	movff	arp_probe@ipTarget+1,ipAdressToString@ip+1
 16396  001B42  C136  F075         	movff	arp_probe@ipTarget+2,ipAdressToString@ip+2
 16397  001B46  C137  F076         	movff	arp_probe@ipTarget+3,ipAdressToString@ip+3
 16398  001B4A  ECE7  F013         	call	_ipAdressToString	;wreg free
 16399  001B4E  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
 16400  001B52  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
 16401  001B56  ECD8  F026         	call	_UARTTransmitText	;wreg free
 16402                           
 16403                           ;arp.c: 291: UARTTransmitText(" (reply to ");
 16404  001B5A  0E32               	movlw	low STR_82
 16405  001B5C  0100               	movlb	0	; () banked
 16406  001B5E  6F98               	movwf	UARTTransmitText@str& (0+255),b
 16407  001B60  0E7F               	movlw	high STR_82
 16408  001B62  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 16409  001B64  ECD8  F026         	call	_UARTTransmitText	;wreg free
 16410                           
 16411                           ;arp.c: 292: UARTTransmitText(ipAdressToString(ipSender));
 16412  001B68  C14A  F073         	movff	arp_probe@ipSender,ipAdressToString@ip
 16413  001B6C  C14B  F074         	movff	arp_probe@ipSender+1,ipAdressToString@ip+1
 16414  001B70  C14C  F075         	movff	arp_probe@ipSender+2,ipAdressToString@ip+2
 16415  001B74  C14D  F076         	movff	arp_probe@ipSender+3,ipAdressToString@ip+3
 16416  001B78  ECE7  F013         	call	_ipAdressToString	;wreg free
 16417  001B7C  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
 16418  001B80  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
 16419  001B84  ECD8  F026         	call	_UARTTransmitText	;wreg free
 16420                           
 16421                           ;arp.c: 293: UARTTransmitText(")\n\r");
 16422  001B88  0EEA               	movlw	low STR_44
 16423  001B8A  0100               	movlb	0	; () banked
 16424  001B8C  6F98               	movwf	UARTTransmitText@str& (0+255),b
 16425  001B8E  0E7F               	movlw	high STR_44
 16426  001B90  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 16427  001B92  ECD8  F026         	call	_UARTTransmitText	;wreg free
 16428                           
 16429                           ;arp.c: 295: arp_sendRequest(ipSender, ipTarget);
 16430  001B96  C14A  F100         	movff	arp_probe@ipSender,arp_sendRequest@ipSender
 16431  001B9A  C14B  F101         	movff	arp_probe@ipSender+1,arp_sendRequest@ipSender+1
 16432  001B9E  C14C  F102         	movff	arp_probe@ipSender+2,arp_sendRequest@ipSender+2
 16433  001BA2  C14D  F103         	movff	arp_probe@ipSender+3,arp_sendRequest@ipSender+3
 16434  001BA6  C134  F104         	movff	arp_probe@ipTarget,arp_sendRequest@ipTarget
 16435  001BAA  C135  F105         	movff	arp_probe@ipTarget+1,arp_sendRequest@ipTarget+1
 16436  001BAE  C136  F106         	movff	arp_probe@ipTarget+2,arp_sendRequest@ipTarget+2
 16437  001BB2  C137  F107         	movff	arp_probe@ipTarget+3,arp_sendRequest@ipTarget+3
 16438  001BB6  ECFF  F021         	call	_arp_sendRequest	;wreg free
 16439  001BBA                     l1003:
 16440                           
 16441                           ;arp.c: 296: }
 16442                           ;arp.c: 297: if (probeCounter >= 3u) {
 16443  001BBA  0E02               	movlw	2
 16444  001BBC  0101               	movlb	1	; () banked
 16445  001BBE  65DB               	cpfsgt	arp_probe@probeCounter& (0+255),b
 16446  001BC0  D008               	goto	l1004
 16447                           
 16448                           ; BSR set to: 1
 16449                           ;arp.c: 298: probeCounter = 0;
 16450  001BC2  0E00               	movlw	0
 16451  001BC4  6FDB               	movwf	arp_probe@probeCounter& (0+255),b
 16452                           
 16453                           ;arp.c: 299: state = PREPARING_PROBE;
 16454  001BC6  0E00               	movlw	0
 16455  001BC8  6FDA               	movwf	arp_probe@state& (0+255),b
 16456                           
 16457                           ;arp.c: 300: err.code = ERROR_ARP_MAXIMUM_NUMBER_OF_PROBES_REACHED;
 16458  001BCA  0E01               	movlw	1
 16459  001BCC  6F50               	movwf	(arp_probe@err+2)& (0+255),b
 16460  001BCE  0E93               	movlw	147
 16461  001BD0  D00D               	goto	L8
 16462  001BD2                     l1004:
 16463                           
 16464                           ; BSR set to: 1
 16465                           ;arp.c: 302: err.code = ERROR_ARP_WAITING;
 16466                           
 16467                           ; BSR set to: 1
 16468  001BD2  0E01               	movlw	1
 16469  001BD4  6F50               	movwf	(arp_probe@err+2)& (0+255),b
 16470  001BD6  0E91               	movlw	145
 16471  001BD8  6F4F               	movwf	(arp_probe@err+1)& (0+255),b
 16472                           
 16473                           ; BSR set to: 1
 16474                           ;arp.c: 303: probeCounter++;
 16475  001BDA  2BDB               	incf	arp_probe@probeCounter& (0+255),f,b
 16476                           
 16477                           ; BSR set to: 1
 16478                           ;arp.c: 304: }
 16479                           ;arp.c: 305: }
 16480                           ;arp.c: 306: break;
 16481                           
 16482                           ; BSR set to: 1
 16483  001BDC  D017               	goto	l996
 16484  001BDE                     
 16485                           ; BSR set to: 1
 16486                           ;arp.c: 308: probeCounter = 0;
 16487                           
 16488                           ; BSR set to: 1
 16489  001BDE  0E00               	movlw	0
 16490  001BE0  6FDB               	movwf	arp_probe@probeCounter& (0+255),b
 16491                           
 16492                           ;arp.c: 309: state = PREPARING_PROBE;
 16493  001BE2  0E00               	movlw	0
 16494  001BE4  6FDA               	movwf	arp_probe@state& (0+255),b
 16495                           
 16496                           ;arp.c: 310: err.code = ERROR_ARP_IPv4_ADDRESS_CONFLICT;
 16497  001BE6  0E01               	movlw	1
 16498  001BE8  6F50               	movwf	(arp_probe@err+2)& (0+255),b
 16499  001BEA  0E96               	movlw	150
 16500  001BEC                     L8:
 16501  001BEC  6F4F               	movwf	(arp_probe@err+1)& (0+255),b
 16502                           
 16503                           ;arp.c: 311: }
 16504  001BEE  D00E               	goto	l996
 16505  001BF0                     l994:
 16506                           
 16507                           ; BSR set to: 1
 16508  001BF0  0101               	movlb	1	; () banked
 16509  001BF2  51DA               	movf	arp_probe@state& (0+255),w,b
 16510                           
 16511                           ; Switch size 1, requested type "space"
 16512                           ; Number of cases is 4, Range of values is 0 to 3
 16513                           ; switch strategies available:
 16514                           ; Name         Instructions Cycles
 16515                           ; simple_byte           13     7 (average)
 16516                           ;	Chosen strategy is simple_byte
 16517  001BF4  0A00               	xorlw	0	; case 0
 16518  001BF6  B4D8               	btfsc	status,2,c
 16519  001BF8  D6D5               	goto	l995
 16520  001BFA  0A01               	xorlw	1	; case 1
 16521  001BFC  B4D8               	btfsc	status,2,c
 16522  001BFE  D6FB               	goto	l997
 16523  001C00  0A03               	xorlw	3	; case 2
 16524  001C02  B4D8               	btfsc	status,2,c
 16525  001C04  D750               	goto	l999
 16526  001C06  0A01               	xorlw	1	; case 3
 16527  001C08  B4D8               	btfsc	status,2,c
 16528  001C0A  D7E9               	goto	l1006
 16529  001C0C                     l996:
 16530                           
 16531                           ; BSR set to: 1
 16532                           ;arp.c: 312: return err;
 16533  001C0C  C14E  F134         	movff	arp_probe@err,?_arp_probe
 16534  001C10  C14F  F135         	movff	arp_probe@err+1,?_arp_probe+1
 16535  001C14  C150  F136         	movff	arp_probe@err+2,?_arp_probe+2
 16536                           
 16537                           ; BSR set to: 1
 16538  001C18  0012               	return		;funcret
 16539  001C1A                     __end_of_arp_probe:
 16540                           	opt stack 0
 16541                           tblptru	equ	0xFF8
 16542                           tblptrh	equ	0xFF7
 16543                           tblptrl	equ	0xFF6
 16544                           tablat	equ	0xFF5
 16545                           prodh	equ	0xFF4
 16546                           prodl	equ	0xFF3
 16547                           intcon	equ	0xFF2
 16548                           intcon3	equ	0xFF0
 16549                           indf0	equ	0xFEF
 16550                           postinc0	equ	0xFEE
 16551                           plusw0	equ	0xFEB
 16552                           fsr0h	equ	0xFEA
 16553                           fsr0l	equ	0xFE9
 16554                           wreg	equ	0xFE8
 16555                           indf1	equ	0xFE7
 16556                           postinc1	equ	0xFE6
 16557                           postdec1	equ	0xFE5
 16558                           plusw1	equ	0xFE3
 16559                           fsr1h	equ	0xFE2
 16560                           fsr1l	equ	0xFE1
 16561                           indf2	equ	0xFDF
 16562                           postinc2	equ	0xFDE
 16563                           postdec2	equ	0xFDD
 16564                           plusw2	equ	0xFDB
 16565                           fsr2h	equ	0xFDA
 16566                           fsr2l	equ	0xFD9
 16567                           status	equ	0xFD8
 16568                           
 16569 ;; *************** function _rand *****************
 16570 ;; Defined at:
 16571 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\rand.c"
 16572 ;; Parameters:    Size  Location     Type
 16573 ;;		None
 16574 ;; Auto vars:     Size  Location     Type
 16575 ;;		None
 16576 ;; Return value:  Size  Location     Type
 16577 ;;                  2   12[BANK0 ] int 
 16578 ;; Registers used:
 16579 ;;		wreg, status,2, status,0, cstack
 16580 ;; Tracked objects:
 16581 ;;		On entry : 0/0
 16582 ;;		On exit  : 0/0
 16583 ;;		Unchanged: 0/0
 16584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16585 ;;      Params:         0       2       0       0       0       0       0       0       0
 16586 ;;      Locals:         0       0       0       0       0       0       0       0       0
 16587 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16588 ;;      Totals:         0       2       0       0       0       0       0       0       0
 16589 ;;Total ram usage:        2 bytes
 16590 ;; Hardware stack levels used:    1
 16591 ;; Hardware stack levels required when called:    5
 16592 ;; This function calls:
 16593 ;;		___lmul
 16594 ;; This function is called by:
 16595 ;;		_arp_probe
 16596 ;; This function uses a non-reentrant model
 16597 ;;
 16598                           
 16599                           	psect	text61
 16600  004D5A                     __ptext61:
 16601                           	opt stack 0
 16602  004D5A                     _rand:
 16603                           	opt stack 22
 16604                           
 16605                           ; BSR set to: 1
 16606                           ;incstack = 0
 16607  004D5A  C048  F060         	movff	_randx,___lmul@multiplier
 16608  004D5E  C049  F061         	movff	_randx+1,___lmul@multiplier+1
 16609  004D62  C04A  F062         	movff	_randx+2,___lmul@multiplier+2
 16610  004D66  C04B  F063         	movff	_randx+3,___lmul@multiplier+3
 16611  004D6A  0E6D               	movlw	109
 16612  004D6C  0100               	movlb	0	; () banked
 16613  004D6E  6F64               	movwf	___lmul@multiplicand& (0+255),b
 16614  004D70  0E4E               	movlw	78
 16615  004D72  6F65               	movwf	(___lmul@multiplicand+1)& (0+255),b
 16616  004D74  0EC6               	movlw	198
 16617  004D76  6F66               	movwf	(___lmul@multiplicand+2)& (0+255),b
 16618  004D78  0E41               	movlw	65
 16619  004D7A  6F67               	movwf	(___lmul@multiplicand+3)& (0+255),b
 16620  004D7C  EC81  F026         	call	___lmul	;wreg free
 16621  004D80  C060  F048         	movff	?___lmul,_randx
 16622  004D84  C061  F049         	movff	?___lmul+1,_randx+1
 16623  004D88  C062  F04A         	movff	?___lmul+2,_randx+2
 16624  004D8C  C063  F04B         	movff	?___lmul+3,_randx+3
 16625  004D90  0E39               	movlw	57
 16626  004D92  2648               	addwf	_randx,f,c
 16627  004D94  0E30               	movlw	48
 16628  004D96  2249               	addwfc	_randx+1,f,c
 16629  004D98  0E00               	movlw	0
 16630  004D9A  224A               	addwfc	_randx+2,f,c
 16631  004D9C  0E00               	movlw	0
 16632  004D9E  224B               	addwfc	_randx+3,f,c
 16633  004DA0  0EFF               	movlw	255
 16634  004DA2  144A               	andwf	_randx+2,w,c
 16635  004DA4  0100               	movlb	0	; () banked
 16636  004DA6  6F6C               	movwf	?_rand& (0+255),b
 16637  004DA8  0E7F               	movlw	127
 16638  004DAA  144B               	andwf	_randx+3,w,c
 16639  004DAC  6F6D               	movwf	(?_rand+1)& (0+255),b
 16640  004DAE  0012               	return	
 16641  004DB0                     __end_of_rand:
 16642                           	opt stack 0
 16643                           tblptru	equ	0xFF8
 16644                           tblptrh	equ	0xFF7
 16645                           tblptrl	equ	0xFF6
 16646                           tablat	equ	0xFF5
 16647                           prodh	equ	0xFF4
 16648                           prodl	equ	0xFF3
 16649                           intcon	equ	0xFF2
 16650                           intcon3	equ	0xFF0
 16651                           indf0	equ	0xFEF
 16652                           postinc0	equ	0xFEE
 16653                           plusw0	equ	0xFEB
 16654                           fsr0h	equ	0xFEA
 16655                           fsr0l	equ	0xFE9
 16656                           wreg	equ	0xFE8
 16657                           indf1	equ	0xFE7
 16658                           postinc1	equ	0xFE6
 16659                           postdec1	equ	0xFE5
 16660                           plusw1	equ	0xFE3
 16661                           fsr1h	equ	0xFE2
 16662                           fsr1l	equ	0xFE1
 16663                           indf2	equ	0xFDF
 16664                           postinc2	equ	0xFDE
 16665                           postdec2	equ	0xFDD
 16666                           plusw2	equ	0xFDB
 16667                           fsr2h	equ	0xFDA
 16668                           fsr2l	equ	0xFD9
 16669                           status	equ	0xFD8
 16670                           
 16671 ;; *************** function ___lmul *****************
 16672 ;; Defined at:
 16673 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 16674 ;; Parameters:    Size  Location     Type
 16675 ;;  multiplier      4    0[BANK0 ] unsigned long 
 16676 ;;  multiplicand    4    4[BANK0 ] unsigned long 
 16677 ;; Auto vars:     Size  Location     Type
 16678 ;;  product         4    8[BANK0 ] unsigned long 
 16679 ;; Return value:  Size  Location     Type
 16680 ;;                  4    0[BANK0 ] unsigned long 
 16681 ;; Registers used:
 16682 ;;		wreg, status,2, status,0
 16683 ;; Tracked objects:
 16684 ;;		On entry : 0/0
 16685 ;;		On exit  : 0/0
 16686 ;;		Unchanged: 0/0
 16687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16688 ;;      Params:         0       8       0       0       0       0       0       0       0
 16689 ;;      Locals:         0       4       0       0       0       0       0       0       0
 16690 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16691 ;;      Totals:         0      12       0       0       0       0       0       0       0
 16692 ;;Total ram usage:       12 bytes
 16693 ;; Hardware stack levels used:    1
 16694 ;; Hardware stack levels required when called:    4
 16695 ;; This function calls:
 16696 ;;		Nothing
 16697 ;; This function is called by:
 16698 ;;		_rand
 16699 ;; This function uses a non-reentrant model
 16700 ;;
 16701                           
 16702                           	psect	text62
 16703  004D02                     __ptext62:
 16704                           	opt stack 0
 16705  004D02                     ___lmul:
 16706                           	opt stack 22
 16707                           
 16708                           ; BSR set to: 0
 16709                           ;incstack = 0
 16710  004D02  0E00               	movlw	0
 16711  004D04  0100               	movlb	0	; () banked
 16712  004D06  6F68               	movwf	___lmul@product& (0+255),b
 16713  004D08  0E00               	movlw	0
 16714  004D0A  6F69               	movwf	(___lmul@product+1)& (0+255),b
 16715  004D0C  0E00               	movlw	0
 16716  004D0E  6F6A               	movwf	(___lmul@product+2)& (0+255),b
 16717  004D10  0E00               	movlw	0
 16718  004D12  6F6B               	movwf	(___lmul@product+3)& (0+255),b
 16719  004D14                     
 16720                           ; BSR set to: 0
 16721                           
 16722                           ; BSR set to: 0
 16723  004D14  A160               	btfss	___lmul@multiplier& (0+255),0,b
 16724  004D16  D008               	goto	l1232
 16725                           
 16726                           ; BSR set to: 0
 16727  004D18  5164               	movf	___lmul@multiplicand& (0+255),w,b
 16728  004D1A  2768               	addwf	___lmul@product& (0+255),f,b
 16729  004D1C  5165               	movf	(___lmul@multiplicand+1)& (0+255),w,b
 16730  004D1E  2369               	addwfc	(___lmul@product+1)& (0+255),f,b
 16731  004D20  5166               	movf	(___lmul@multiplicand+2)& (0+255),w,b
 16732  004D22  236A               	addwfc	(___lmul@product+2)& (0+255),f,b
 16733  004D24  5167               	movf	(___lmul@multiplicand+3)& (0+255),w,b
 16734  004D26  236B               	addwfc	(___lmul@product+3)& (0+255),f,b
 16735  004D28                     l1232:
 16736                           
 16737                           ; BSR set to: 0
 16738                           
 16739                           ; BSR set to: 0
 16740  004D28  90D8               	bcf	status,0,c
 16741  004D2A  3764               	rlcf	___lmul@multiplicand& (0+255),f,b
 16742  004D2C  3765               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
 16743  004D2E  3766               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
 16744  004D30  3767               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
 16745                           
 16746                           ; BSR set to: 0
 16747  004D32  90D8               	bcf	status,0,c
 16748  004D34  3363               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
 16749  004D36  3362               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
 16750  004D38  3361               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
 16751  004D3A  3360               	rrcf	___lmul@multiplier& (0+255),f,b
 16752  004D3C  5160               	movf	___lmul@multiplier& (0+255),w,b
 16753  004D3E  1161               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
 16754  004D40  1162               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
 16755  004D42  1163               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
 16756  004D44  A4D8               	btfss	status,2,c
 16757  004D46  D7E6               	goto	l1231
 16758                           
 16759                           ; BSR set to: 0
 16760  004D48  C068  F060         	movff	___lmul@product,?___lmul
 16761  004D4C  C069  F061         	movff	___lmul@product+1,?___lmul+1
 16762  004D50  C06A  F062         	movff	___lmul@product+2,?___lmul+2
 16763  004D54  C06B  F063         	movff	___lmul@product+3,?___lmul+3
 16764                           
 16765                           ; BSR set to: 0
 16766  004D58  0012               	return		;funcret
 16767  004D5A                     __end_of___lmul:
 16768                           	opt stack 0
 16769                           tblptru	equ	0xFF8
 16770                           tblptrh	equ	0xFF7
 16771                           tblptrl	equ	0xFF6
 16772                           tablat	equ	0xFF5
 16773                           prodh	equ	0xFF4
 16774                           prodl	equ	0xFF3
 16775                           intcon	equ	0xFF2
 16776                           intcon3	equ	0xFF0
 16777                           indf0	equ	0xFEF
 16778                           postinc0	equ	0xFEE
 16779                           plusw0	equ	0xFEB
 16780                           fsr0h	equ	0xFEA
 16781                           fsr0l	equ	0xFE9
 16782                           wreg	equ	0xFE8
 16783                           indf1	equ	0xFE7
 16784                           postinc1	equ	0xFE6
 16785                           postdec1	equ	0xFE5
 16786                           plusw1	equ	0xFE3
 16787                           fsr1h	equ	0xFE2
 16788                           fsr1l	equ	0xFE1
 16789                           indf2	equ	0xFDF
 16790                           postinc2	equ	0xFDE
 16791                           postdec2	equ	0xFDD
 16792                           plusw2	equ	0xFDB
 16793                           fsr2h	equ	0xFDA
 16794                           fsr2l	equ	0xFD9
 16795                           status	equ	0xFD8
 16796                           
 16797 ;; *************** function _ipv4_setToAllZero *****************
 16798 ;; Defined at:
 16799 ;;		line 319 in file "src/stack/protocols/ipv4.c"
 16800 ;; Parameters:    Size  Location     Type
 16801 ;;  ip              2    0[BANK0 ] PTR struct ipv4_address
 16802 ;;		 -> arp_init@ip(4), arp_probe@ipSender(4), 
 16803 ;; Auto vars:     Size  Location     Type
 16804 ;;  i               1    2[BANK0 ] unsigned char 
 16805 ;; Return value:  Size  Location     Type
 16806 ;;                  1    wreg      void 
 16807 ;; Registers used:
 16808 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 16809 ;; Tracked objects:
 16810 ;;		On entry : 0/0
 16811 ;;		On exit  : 0/0
 16812 ;;		Unchanged: 0/0
 16813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16814 ;;      Params:         0       2       0       0       0       0       0       0       0
 16815 ;;      Locals:         0       1       0       0       0       0       0       0       0
 16816 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16817 ;;      Totals:         0       3       0       0       0       0       0       0       0
 16818 ;;Total ram usage:        3 bytes
 16819 ;; Hardware stack levels used:    1
 16820 ;; Hardware stack levels required when called:    4
 16821 ;; This function calls:
 16822 ;;		Nothing
 16823 ;; This function is called by:
 16824 ;;		_arp_probe
 16825 ;;		_arp_init
 16826 ;; This function uses a non-reentrant model
 16827 ;;
 16828                           
 16829                           	psect	text63
 16830  005502                     __ptext63:
 16831                           	opt stack 0
 16832  005502                     _ipv4_setToAllZero:
 16833                           	opt stack 24
 16834                           
 16835                           ;ipv4.c: 320: for (uint8_t i = 0; i < 4; i++) {
 16836                           
 16837                           ; BSR set to: 0
 16838                           ;incstack = 0
 16839  005502  0E00               	movlw	0
 16840  005504  0100               	movlb	0	; () banked
 16841  005506  6F62               	movwf	ipv4_setToAllZero@i& (0+255),b
 16842  005508                     l9513:
 16843                           
 16844                           ; BSR set to: 0
 16845  005508  0E03               	movlw	3
 16846  00550A  6562               	cpfsgt	ipv4_setToAllZero@i& (0+255),b
 16847  00550C  D001               	goto	l1206
 16848  00550E  0012               	return	
 16849  005510                     l1206:
 16850                           
 16851                           ; BSR set to: 0
 16852                           ;ipv4.c: 321: ip->address[i] = 0x00;
 16853                           
 16854                           ; BSR set to: 0
 16855  005510  5162               	movf	ipv4_setToAllZero@i& (0+255),w,b
 16856  005512  0D01               	mullw	1
 16857  005514  50F3               	movf	prodl,w,c
 16858  005516  2560               	addwf	ipv4_setToAllZero@ip& (0+255),w,b
 16859  005518  6ED9               	movwf	fsr2l,c
 16860  00551A  50F4               	movf	prodh,w,c
 16861  00551C  2161               	addwfc	(ipv4_setToAllZero@ip+1)& (0+255),w,b
 16862  00551E  6EDA               	movwf	fsr2h,c
 16863  005520  0E00               	movlw	0
 16864  005522  6EDF               	movwf	indf2,c
 16865                           
 16866                           ; BSR set to: 0
 16867  005524  2B62               	incf	ipv4_setToAllZero@i& (0+255),f,b
 16868  005526  D7F0               	goto	l9513
 16869  005528                     __end_of_ipv4_setToAllZero:
 16870                           	opt stack 0
 16871                           tblptru	equ	0xFF8
 16872                           tblptrh	equ	0xFF7
 16873                           tblptrl	equ	0xFF6
 16874                           tablat	equ	0xFF5
 16875                           prodh	equ	0xFF4
 16876                           prodl	equ	0xFF3
 16877                           intcon	equ	0xFF2
 16878                           intcon3	equ	0xFF0
 16879                           indf0	equ	0xFEF
 16880                           postinc0	equ	0xFEE
 16881                           plusw0	equ	0xFEB
 16882                           fsr0h	equ	0xFEA
 16883                           fsr0l	equ	0xFE9
 16884                           wreg	equ	0xFE8
 16885                           indf1	equ	0xFE7
 16886                           postinc1	equ	0xFE6
 16887                           postdec1	equ	0xFE5
 16888                           plusw1	equ	0xFE3
 16889                           fsr1h	equ	0xFE2
 16890                           fsr1l	equ	0xFE1
 16891                           indf2	equ	0xFDF
 16892                           postinc2	equ	0xFDE
 16893                           postdec2	equ	0xFDD
 16894                           plusw2	equ	0xFDB
 16895                           fsr2h	equ	0xFDA
 16896                           fsr2l	equ	0xFD9
 16897                           status	equ	0xFD8
 16898                           
 16899 ;; *************** function _arp_gratuitous *****************
 16900 ;; Defined at:
 16901 ;;		line 315 in file "src/stack/protocols/arp.c"
 16902 ;; Parameters:    Size  Location     Type
 16903 ;;  ip              4   52[BANK1 ] struct ipv4_address
 16904 ;;  link            1   56[BANK1 ] enum E233
 16905 ;; Auto vars:     Size  Location     Type
 16906 ;;  err             3  157[BANK0 ] struct error
 16907 ;;  index           1  156[BANK0 ] unsigned char 
 16908 ;; Return value:  Size  Location     Type
 16909 ;;                  3   52[BANK1 ] struct error
 16910 ;; Registers used:
 16911 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16912 ;; Tracked objects:
 16913 ;;		On entry : 0/0
 16914 ;;		On exit  : 0/0
 16915 ;;		Unchanged: 0/0
 16916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16917 ;;      Params:         0       0       5       0       0       0       0       0       0
 16918 ;;      Locals:         0       4       0       0       0       0       0       0       0
 16919 ;;      Temps:          0       0       8       0       0       0       0       0       0
 16920 ;;      Totals:         0       4      13       0       0       0       0       0       0
 16921 ;;Total ram usage:       17 bytes
 16922 ;; Hardware stack levels used:    1
 16923 ;; Hardware stack levels required when called:   11
 16924 ;; This function calls:
 16925 ;;		_UARTTransmitText
 16926 ;;		_arp_checkForEntry
 16927 ;;		_arp_sendRequest
 16928 ;;		_getMillis
 16929 ;;		_ipAdressToString
 16930 ;; This function is called by:
 16931 ;;		_arp_background
 16932 ;; This function uses a non-reentrant model
 16933 ;;
 16934                           
 16935                           	psect	text64
 16936  002360                     __ptext64:
 16937                           	opt stack 0
 16938  002360                     _arp_gratuitous:
 16939                           	opt stack 17
 16940                           
 16941                           ;arp.c: 316: uint8_t static announceCounter = 0;
 16942                           ;arp.c: 317: uint8_t static state = 0;
 16943                           ;arp.c: 318: time_t static timeStart = 0;
 16944                           ;arp.c: 319: uint8_t index;
 16945                           ;arp.c: 320: error_t err;
 16946                           ;arp.c: 322: enum states {
 16947                           ;arp.c: 323: INIT, WAIT_FOR_ANNOUNCE, ANNOUNCING, ENTRY_FOUND
 16948                           ;arp.c: 324: };
 16949                           ;arp.c: 325: err.module = ERROR_MODULE_ARP;
 16950                           
 16951                           ; BSR set to: 0
 16952                           ;incstack = 0
 16953  002360  0E03               	movlw	3
 16954  002362  0100               	movlb	0	; () banked
 16955  002364  6FFD               	movwf	arp_gratuitous@err& (0+255),b
 16956                           
 16957                           ;arp.c: 326: err.code = ERROR_ARP_WAITING;
 16958  002366  0E01               	movlw	1
 16959  002368  6FFF               	movwf	(arp_gratuitous@err+2)& (0+255),b
 16960  00236A  0E91               	movlw	145
 16961  00236C  6FFE               	movwf	(arp_gratuitous@err+1)& (0+255),b
 16962                           
 16963                           ;arp.c: 328: if (link == NO_LINK) {
 16964  00236E  0101               	movlb	1	; () banked
 16965  002370  5138               	movf	arp_gratuitous@link& (0+255),w,b
 16966  002372  A4D8               	btfss	status,2,c
 16967  002374  D010               	goto	l1015
 16968                           
 16969                           ; BSR set to: 1
 16970                           ;arp.c: 329: announceCounter = 0;
 16971  002376  0E00               	movlw	0
 16972  002378  6FD9               	movwf	arp_gratuitous@announceCounter& (0+255),b
 16973                           
 16974                           ;arp.c: 330: state = INIT;
 16975  00237A  0E00               	movlw	0
 16976  00237C  6FD8               	movwf	arp_gratuitous@state& (0+255),b
 16977                           
 16978                           ;arp.c: 331: err.code = ERROR_ARP_CONNECTION_FAILED;
 16979  00237E  0E01               	movlw	1
 16980  002380  0100               	movlb	0	; () banked
 16981  002382  6FFF               	movwf	(arp_gratuitous@err+2)& (0+255),b
 16982  002384  0E97               	movlw	151
 16983  002386  6FFE               	movwf	(arp_gratuitous@err+1)& (0+255),b
 16984                           
 16985                           ; BSR set to: 0
 16986                           ;arp.c: 332: return err;
 16987  002388  C0FD  F134         	movff	arp_gratuitous@err,?_arp_gratuitous
 16988  00238C  C0FE  F135         	movff	arp_gratuitous@err+1,?_arp_gratuitous+1
 16989  002390  C0FF  F136         	movff	arp_gratuitous@err+2,?_arp_gratuitous+2
 16990                           
 16991                           ; BSR set to: 0
 16992  002394  0012               	return	
 16993  002396                     l1015:
 16994                           
 16995                           ;arp.c: 333: }
 16996                           ;arp.c: 335: if (arp_checkForEntry(ip, &index)) {
 16997                           
 16998                           ; BSR set to: 0
 16999  002396  C134  F067         	movff	arp_gratuitous@ip,arp_checkForEntry@ip
 17000  00239A  C135  F068         	movff	arp_gratuitous@ip+1,arp_checkForEntry@ip+1
 17001  00239E  C136  F069         	movff	arp_gratuitous@ip+2,arp_checkForEntry@ip+2
 17002  0023A2  C137  F06A         	movff	arp_gratuitous@ip+3,arp_checkForEntry@ip+3
 17003  0023A6  0EFC               	movlw	low arp_gratuitous@index
 17004  0023A8  0100               	movlb	0	; () banked
 17005  0023AA  6F6B               	movwf	arp_checkForEntry@index& (0+255),b
 17006  0023AC  0E00               	movlw	high arp_gratuitous@index
 17007  0023AE  6F6C               	movwf	(arp_checkForEntry@index+1)& (0+255),b
 17008  0023B0  ECAF  F020         	call	_arp_checkForEntry	;wreg free
 17009  0023B4  0900               	iorlw	0
 17010  0023B6  B4D8               	btfsc	status,2,c
 17011  0023B8  D0E0               	goto	l1018
 17012                           
 17013                           ;arp.c: 336: state = ENTRY_FOUND;
 17014  0023BA  0E03               	movlw	3
 17015  0023BC  0101               	movlb	1	; () banked
 17016  0023BE  6FD8               	movwf	arp_gratuitous@state& (0+255),b
 17017                           
 17018                           ; BSR set to: 1
 17019                           ;arp.c: 337: }
 17020                           ;arp.c: 339: switch (state) {
 17021  0023C0  D0DC               	goto	l1018
 17022  0023C2                     
 17023                           ; BSR set to: 1
 17024                           ;arp.c: 341: err.code = ERROR_ARP_WAITING;
 17025                           
 17026                           ; BSR set to: 1
 17027  0023C2  0E01               	movlw	1
 17028  0023C4  0100               	movlb	0	; () banked
 17029  0023C6  6FFF               	movwf	(arp_gratuitous@err+2)& (0+255),b
 17030  0023C8  0E91               	movlw	145
 17031  0023CA  6FFE               	movwf	(arp_gratuitous@err+1)& (0+255),b
 17032                           
 17033                           ; BSR set to: 0
 17034                           ;arp.c: 342: timeStart = getMillis();
 17035  0023CC  EC63  F02B         	call	_getMillis	;wreg free
 17036  0023D0  C060  F1CE         	movff	?_getMillis,arp_gratuitous@timeStart
 17037  0023D4  C061  F1CF         	movff	?_getMillis+1,arp_gratuitous@timeStart+1
 17038  0023D8  C062  F1D0         	movff	?_getMillis+2,arp_gratuitous@timeStart+2
 17039  0023DC  C063  F1D1         	movff	?_getMillis+3,arp_gratuitous@timeStart+3
 17040                           
 17041                           ;arp.c: 343: state = WAIT_FOR_ANNOUNCE;
 17042  0023E0  0E01               	movlw	1
 17043  0023E2  0101               	movlb	1	; () banked
 17044  0023E4  6FD8               	movwf	arp_gratuitous@state& (0+255),b
 17045                           
 17046                           ;arp.c: 344: break;
 17047  0023E6  D0D7               	goto	l1020
 17048  0023E8                     
 17049                           ; BSR set to: 1
 17050                           ;arp.c: 346: err.code = ERROR_ARP_WAITING;
 17051                           
 17052                           ; BSR set to: 1
 17053  0023E8  0E01               	movlw	1
 17054  0023EA  0100               	movlb	0	; () banked
 17055  0023EC  6FFF               	movwf	(arp_gratuitous@err+2)& (0+255),b
 17056  0023EE  0E91               	movlw	145
 17057  0023F0  6FFE               	movwf	(arp_gratuitous@err+1)& (0+255),b
 17058                           
 17059                           ; BSR set to: 0
 17060                           ;arp.c: 347: if ((getMillis() - timeStart) > 2000u) {
 17061  0023F2  C1CE  F139         	movff	arp_gratuitous@timeStart,??_arp_gratuitous
 17062  0023F6  C1CF  F13A         	movff	arp_gratuitous@timeStart+1,??_arp_gratuitous+1
 17063  0023FA  C1D0  F13B         	movff	arp_gratuitous@timeStart+2,??_arp_gratuitous+2
 17064  0023FE  C1D1  F13C         	movff	arp_gratuitous@timeStart+3,??_arp_gratuitous+3
 17065  002402  0101               	movlb	1	; () banked
 17066  002404  1F39               	comf	??_arp_gratuitous& (0+255),f,b
 17067  002406  1F3A               	comf	(??_arp_gratuitous+1)& (0+255),f,b
 17068  002408  1F3B               	comf	(??_arp_gratuitous+2)& (0+255),f,b
 17069  00240A  1F3C               	comf	(??_arp_gratuitous+3)& (0+255),f,b
 17070  00240C  2B39               	incf	??_arp_gratuitous& (0+255),f,b
 17071  00240E  0E00               	movlw	0
 17072  002410  233A               	addwfc	(??_arp_gratuitous+1)& (0+255),f,b
 17073  002412  233B               	addwfc	(??_arp_gratuitous+2)& (0+255),f,b
 17074  002414  233C               	addwfc	(??_arp_gratuitous+3)& (0+255),f,b
 17075  002416  EC63  F02B         	call	_getMillis	;wreg free
 17076  00241A  0101               	movlb	1	; () banked
 17077  00241C  5139               	movf	??_arp_gratuitous& (0+255),w,b
 17078  00241E  0100               	movlb	0	; () banked
 17079  002420  2560               	addwf	?_getMillis& (0+255),w,b
 17080  002422  0101               	movlb	1	; () banked
 17081  002424  6F3D               	movwf	(??_arp_gratuitous+4)& (0+255),b
 17082  002426  513A               	movf	(??_arp_gratuitous+1)& (0+255),w,b
 17083  002428  0100               	movlb	0	; () banked
 17084  00242A  2161               	addwfc	(?_getMillis+1)& (0+255),w,b
 17085  00242C  0101               	movlb	1	; () banked
 17086  00242E  6F3E               	movwf	(??_arp_gratuitous+5)& (0+255),b
 17087  002430  513B               	movf	(??_arp_gratuitous+2)& (0+255),w,b
 17088  002432  0100               	movlb	0	; () banked
 17089  002434  2162               	addwfc	(?_getMillis+2)& (0+255),w,b
 17090  002436  0101               	movlb	1	; () banked
 17091  002438  6F3F               	movwf	(??_arp_gratuitous+6)& (0+255),b
 17092  00243A  513C               	movf	(??_arp_gratuitous+3)& (0+255),w,b
 17093  00243C  0100               	movlb	0	; () banked
 17094  00243E  2163               	addwfc	(?_getMillis+3)& (0+255),w,b
 17095  002440  0101               	movlb	1	; () banked
 17096  002442  6F40               	movwf	(??_arp_gratuitous+7)& (0+255),b
 17097  002444  5140               	movf	(??_arp_gratuitous+7)& (0+255),w,b
 17098  002446  113F               	iorwf	(??_arp_gratuitous+6)& (0+255),w,b
 17099  002448  E106               	bnz	u11530
 17100  00244A  0ED1               	movlw	209
 17101  00244C  5D3D               	subwf	(??_arp_gratuitous+4)& (0+255),w,b
 17102  00244E  0E07               	movlw	7
 17103  002450  593E               	subwfb	(??_arp_gratuitous+5)& (0+255),w,b
 17104  002452  A0D8               	btfss	status,0,c
 17105  002454  D0A0               	goto	l1020
 17106  002456                     u11530:
 17107                           
 17108                           ; BSR set to: 1
 17109                           ;arp.c: 348: state = ANNOUNCING;
 17110  002456  0E02               	movlw	2
 17111  002458  6FD8               	movwf	arp_gratuitous@state& (0+255),b
 17112                           
 17113                           ;arp.c: 349: announceCounter = 0;
 17114  00245A  0E00               	movlw	0
 17115  00245C  6FD9               	movwf	arp_gratuitous@announceCounter& (0+255),b
 17116                           
 17117                           ; BSR set to: 1
 17118                           ;arp.c: 350: }
 17119                           ;arp.c: 351: break;
 17120  00245E  D09B               	goto	l1020
 17121  002460                     
 17122                           ; BSR set to: 1
 17123                           ;arp.c: 353: err.code = ERROR_ARP_WAITING;
 17124                           
 17125                           ; BSR set to: 1
 17126  002460  0E01               	movlw	1
 17127  002462  0100               	movlb	0	; () banked
 17128  002464  6FFF               	movwf	(arp_gratuitous@err+2)& (0+255),b
 17129  002466  0E91               	movlw	145
 17130  002468  6FFE               	movwf	(arp_gratuitous@err+1)& (0+255),b
 17131                           
 17132                           ;arp.c: 354: if ((announceCounter == 0) || (getMillis() - timeStart) > 2000u) {
 17133  00246A  0101               	movlb	1	; () banked
 17134  00246C  51D9               	movf	arp_gratuitous@announceCounter& (0+255),w,b
 17135  00246E  B4D8               	btfsc	status,2,c
 17136  002470  D031               	goto	u11550
 17137                           
 17138                           ; BSR set to: 1
 17139  002472  C1CE  F139         	movff	arp_gratuitous@timeStart,??_arp_gratuitous
 17140  002476  C1CF  F13A         	movff	arp_gratuitous@timeStart+1,??_arp_gratuitous+1
 17141  00247A  C1D0  F13B         	movff	arp_gratuitous@timeStart+2,??_arp_gratuitous+2
 17142  00247E  C1D1  F13C         	movff	arp_gratuitous@timeStart+3,??_arp_gratuitous+3
 17143  002482  1F39               	comf	??_arp_gratuitous& (0+255),f,b
 17144  002484  1F3A               	comf	(??_arp_gratuitous+1)& (0+255),f,b
 17145  002486  1F3B               	comf	(??_arp_gratuitous+2)& (0+255),f,b
 17146  002488  1F3C               	comf	(??_arp_gratuitous+3)& (0+255),f,b
 17147  00248A  2B39               	incf	??_arp_gratuitous& (0+255),f,b
 17148  00248C  0E00               	movlw	0
 17149  00248E  233A               	addwfc	(??_arp_gratuitous+1)& (0+255),f,b
 17150  002490  233B               	addwfc	(??_arp_gratuitous+2)& (0+255),f,b
 17151  002492  233C               	addwfc	(??_arp_gratuitous+3)& (0+255),f,b
 17152  002494  EC63  F02B         	call	_getMillis	;wreg free
 17153  002498  0101               	movlb	1	; () banked
 17154  00249A  5139               	movf	??_arp_gratuitous& (0+255),w,b
 17155  00249C  0100               	movlb	0	; () banked
 17156  00249E  2560               	addwf	?_getMillis& (0+255),w,b
 17157  0024A0  0101               	movlb	1	; () banked
 17158  0024A2  6F3D               	movwf	(??_arp_gratuitous+4)& (0+255),b
 17159  0024A4  513A               	movf	(??_arp_gratuitous+1)& (0+255),w,b
 17160  0024A6  0100               	movlb	0	; () banked
 17161  0024A8  2161               	addwfc	(?_getMillis+1)& (0+255),w,b
 17162  0024AA  0101               	movlb	1	; () banked
 17163  0024AC  6F3E               	movwf	(??_arp_gratuitous+5)& (0+255),b
 17164  0024AE  513B               	movf	(??_arp_gratuitous+2)& (0+255),w,b
 17165  0024B0  0100               	movlb	0	; () banked
 17166  0024B2  2162               	addwfc	(?_getMillis+2)& (0+255),w,b
 17167  0024B4  0101               	movlb	1	; () banked
 17168  0024B6  6F3F               	movwf	(??_arp_gratuitous+6)& (0+255),b
 17169  0024B8  513C               	movf	(??_arp_gratuitous+3)& (0+255),w,b
 17170  0024BA  0100               	movlb	0	; () banked
 17171  0024BC  2163               	addwfc	(?_getMillis+3)& (0+255),w,b
 17172  0024BE  0101               	movlb	1	; () banked
 17173  0024C0  6F40               	movwf	(??_arp_gratuitous+7)& (0+255),b
 17174  0024C2  5140               	movf	(??_arp_gratuitous+7)& (0+255),w,b
 17175  0024C4  113F               	iorwf	(??_arp_gratuitous+6)& (0+255),w,b
 17176  0024C6  E106               	bnz	l9919
 17177  0024C8  0ED1               	movlw	209
 17178  0024CA  5D3D               	subwf	(??_arp_gratuitous+4)& (0+255),w,b
 17179  0024CC  0E07               	movlw	7
 17180  0024CE  593E               	subwfb	(??_arp_gratuitous+5)& (0+255),w,b
 17181  0024D0  A0D8               	btfss	status,0,c
 17182  0024D2  D03C               	goto	l1024
 17183  0024D4                     u11550:
 17184  0024D4                     l9919:
 17185                           
 17186                           ; BSR set to: 1
 17187                           ;arp.c: 356: UARTTransmitText("[ARP]: Sending Gratuitous ARP request for ");
 17188  0024D4  0EEB               	movlw	low STR_84
 17189  0024D6  0100               	movlb	0	; () banked
 17190  0024D8  6F98               	movwf	UARTTransmitText@str& (0+255),b
 17191  0024DA  0E7A               	movlw	high STR_84
 17192  0024DC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 17193  0024DE  ECD8  F026         	call	_UARTTransmitText	;wreg free
 17194                           
 17195                           ;arp.c: 357: UARTTransmitText(ipAdressToString(ip));
 17196  0024E2  C134  F073         	movff	arp_gratuitous@ip,ipAdressToString@ip
 17197  0024E6  C135  F074         	movff	arp_gratuitous@ip+1,ipAdressToString@ip+1
 17198  0024EA  C136  F075         	movff	arp_gratuitous@ip+2,ipAdressToString@ip+2
 17199  0024EE  C137  F076         	movff	arp_gratuitous@ip+3,ipAdressToString@ip+3
 17200  0024F2  ECE7  F013         	call	_ipAdressToString	;wreg free
 17201  0024F6  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
 17202  0024FA  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
 17203  0024FE  ECD8  F026         	call	_UARTTransmitText	;wreg free
 17204                           
 17205                           ;arp.c: 358: UARTTransmitText("\n\r");
 17206  002502  0EEB               	movlw	low (STR_44+1)
 17207  002504  0100               	movlb	0	; () banked
 17208  002506  6F98               	movwf	UARTTransmitText@str& (0+255),b
 17209  002508  0E7F               	movlw	high (STR_44+1)
 17210  00250A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 17211  00250C  ECD8  F026         	call	_UARTTransmitText	;wreg free
 17212                           
 17213                           ;arp.c: 360: timeStart = getMillis();
 17214  002510  EC63  F02B         	call	_getMillis	;wreg free
 17215  002514  C060  F1CE         	movff	?_getMillis,arp_gratuitous@timeStart
 17216  002518  C061  F1CF         	movff	?_getMillis+1,arp_gratuitous@timeStart+1
 17217  00251C  C062  F1D0         	movff	?_getMillis+2,arp_gratuitous@timeStart+2
 17218  002520  C063  F1D1         	movff	?_getMillis+3,arp_gratuitous@timeStart+3
 17219                           
 17220                           ;arp.c: 361: arp_sendRequest(ip, ip);
 17221  002524  C134  F100         	movff	arp_gratuitous@ip,arp_sendRequest@ipSender
 17222  002528  C135  F101         	movff	arp_gratuitous@ip+1,arp_sendRequest@ipSender+1
 17223  00252C  C136  F102         	movff	arp_gratuitous@ip+2,arp_sendRequest@ipSender+2
 17224  002530  C137  F103         	movff	arp_gratuitous@ip+3,arp_sendRequest@ipSender+3
 17225  002534  C134  F104         	movff	arp_gratuitous@ip,arp_sendRequest@ipTarget
 17226  002538  C135  F105         	movff	arp_gratuitous@ip+1,arp_sendRequest@ipTarget+1
 17227  00253C  C136  F106         	movff	arp_gratuitous@ip+2,arp_sendRequest@ipTarget+2
 17228  002540  C137  F107         	movff	arp_gratuitous@ip+3,arp_sendRequest@ipTarget+3
 17229  002544  ECFF  F021         	call	_arp_sendRequest	;wreg free
 17230                           
 17231                           ;arp.c: 362: announceCounter++;
 17232  002548  0101               	movlb	1	; () banked
 17233  00254A  2BD9               	incf	arp_gratuitous@announceCounter& (0+255),f,b
 17234  00254C                     l1024:
 17235                           
 17236                           ; BSR set to: 1
 17237                           ;arp.c: 363: }
 17238                           ;arp.c: 364: if (announceCounter >= 2u) {
 17239                           
 17240                           ; BSR set to: 1
 17241  00254C  0E01               	movlw	1
 17242  00254E  65D9               	cpfsgt	arp_gratuitous@announceCounter& (0+255),b
 17243  002550  D022               	goto	l1020
 17244                           
 17245                           ; BSR set to: 1
 17246                           ;arp.c: 366: announceCounter = 0;
 17247  002552  0E00               	movlw	0
 17248  002554  6FD9               	movwf	arp_gratuitous@announceCounter& (0+255),b
 17249                           
 17250                           ;arp.c: 367: state = INIT;
 17251  002556  0E00               	movlw	0
 17252  002558  6FD8               	movwf	arp_gratuitous@state& (0+255),b
 17253                           
 17254                           ;arp.c: 368: err.code = (uint16_t)0;
 17255  00255A  0E00               	movlw	0
 17256  00255C  0100               	movlb	0	; () banked
 17257  00255E  6FFF               	movwf	(arp_gratuitous@err+2)& (0+255),b
 17258  002560  0E00               	movlw	0
 17259  002562  D009               	goto	L9
 17260  002564                     
 17261                           ;arp.c: 372: announceCounter = 0;
 17262                           
 17263                           ; BSR set to: 0
 17264  002564  0E00               	movlw	0
 17265  002566  0101               	movlb	1	; () banked
 17266  002568  6FD9               	movwf	arp_gratuitous@announceCounter& (0+255),b
 17267                           
 17268                           ;arp.c: 373: state = INIT;
 17269  00256A  0E00               	movlw	0
 17270  00256C  6FD8               	movwf	arp_gratuitous@state& (0+255),b
 17271                           
 17272                           ;arp.c: 374: err.code = ERROR_ARP_IPv4_ADDRESS_CONFLICT;
 17273  00256E  0E01               	movlw	1
 17274  002570  0100               	movlb	0	; () banked
 17275  002572  6FFF               	movwf	(arp_gratuitous@err+2)& (0+255),b
 17276  002574  0E96               	movlw	150
 17277  002576                     L9:
 17278  002576  6FFE               	movwf	(arp_gratuitous@err+1)& (0+255),b
 17279                           
 17280                           ; BSR set to: 0
 17281                           ;arp.c: 377: }
 17282                           
 17283                           ;arp.c: 375: break;
 17284  002578  D00E               	goto	l1020
 17285  00257A                     l1018:
 17286                           
 17287                           ; BSR set to: 0
 17288  00257A  0101               	movlb	1	; () banked
 17289  00257C  51D8               	movf	arp_gratuitous@state& (0+255),w,b
 17290                           
 17291                           ; Switch size 1, requested type "space"
 17292                           ; Number of cases is 4, Range of values is 0 to 3
 17293                           ; switch strategies available:
 17294                           ; Name         Instructions Cycles
 17295                           ; simple_byte           13     7 (average)
 17296                           ;	Chosen strategy is simple_byte
 17297  00257E  0A00               	xorlw	0	; case 0
 17298  002580  B4D8               	btfsc	status,2,c
 17299  002582  D71F               	goto	l1019
 17300  002584  0A01               	xorlw	1	; case 1
 17301  002586  B4D8               	btfsc	status,2,c
 17302  002588  D72F               	goto	l1021
 17303  00258A  0A03               	xorlw	3	; case 2
 17304  00258C  B4D8               	btfsc	status,2,c
 17305  00258E  D768               	goto	l1023
 17306  002590  0A01               	xorlw	1	; case 3
 17307  002592  B4D8               	btfsc	status,2,c
 17308  002594  D7E7               	goto	l1028
 17309  002596                     l1020:
 17310                           
 17311                           ;arp.c: 378: return err;
 17312  002596  C0FD  F134         	movff	arp_gratuitous@err,?_arp_gratuitous
 17313  00259A  C0FE  F135         	movff	arp_gratuitous@err+1,?_arp_gratuitous+1
 17314  00259E  C0FF  F136         	movff	arp_gratuitous@err+2,?_arp_gratuitous+2
 17315  0025A2  0012               	return		;funcret
 17316  0025A4                     __end_of_arp_gratuitous:
 17317                           	opt stack 0
 17318                           tblptru	equ	0xFF8
 17319                           tblptrh	equ	0xFF7
 17320                           tblptrl	equ	0xFF6
 17321                           tablat	equ	0xFF5
 17322                           prodh	equ	0xFF4
 17323                           prodl	equ	0xFF3
 17324                           intcon	equ	0xFF2
 17325                           intcon3	equ	0xFF0
 17326                           indf0	equ	0xFEF
 17327                           postinc0	equ	0xFEE
 17328                           plusw0	equ	0xFEB
 17329                           fsr0h	equ	0xFEA
 17330                           fsr0l	equ	0xFE9
 17331                           wreg	equ	0xFE8
 17332                           indf1	equ	0xFE7
 17333                           postinc1	equ	0xFE6
 17334                           postdec1	equ	0xFE5
 17335                           plusw1	equ	0xFE3
 17336                           fsr1h	equ	0xFE2
 17337                           fsr1l	equ	0xFE1
 17338                           indf2	equ	0xFDF
 17339                           postinc2	equ	0xFDE
 17340                           postdec2	equ	0xFDD
 17341                           plusw2	equ	0xFDB
 17342                           fsr2h	equ	0xFDA
 17343                           fsr2l	equ	0xFD9
 17344                           status	equ	0xFD8
 17345                           
 17346 ;; *************** function _ipAdressToString *****************
 17347 ;; Defined at:
 17348 ;;		line 162 in file "src/system/uart.c"
 17349 ;; Parameters:    Size  Location     Type
 17350 ;;  ip              4   19[BANK0 ] struct ipv4_address
 17351 ;; Auto vars:     Size  Location     Type
 17352 ;;  i               1   40[BANK0 ] unsigned char 
 17353 ;;  hundreds        4   35[BANK0 ] unsigned char [4]
 17354 ;;  tens            4   31[BANK0 ] unsigned char [4]
 17355 ;;  ones            4   27[BANK0 ] unsigned char [4]
 17356 ;;  pointer         1   39[BANK0 ] unsigned char 
 17357 ;; Return value:  Size  Location     Type
 17358 ;;                  2   19[BANK0 ] PTR unsigned char 
 17359 ;; Registers used:
 17360 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17361 ;; Tracked objects:
 17362 ;;		On entry : 0/0
 17363 ;;		On exit  : 0/0
 17364 ;;		Unchanged: 0/0
 17365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17366 ;;      Params:         0       4       0       0       0       0       0       0       0
 17367 ;;      Locals:         0      14       0       0       0       0       0       0       0
 17368 ;;      Temps:          0       4       0       0       0       0       0       0       0
 17369 ;;      Totals:         0      22       0       0       0       0       0       0       0
 17370 ;;Total ram usage:       22 bytes
 17371 ;; Hardware stack levels used:    1
 17372 ;; Hardware stack levels required when called:    5
 17373 ;; This function calls:
 17374 ;;		___lwdiv
 17375 ;;		___lwmod
 17376 ;; This function is called by:
 17377 ;;		_handleStackBackgroundTasks
 17378 ;;		_main
 17379 ;;		_arp_handleNewPacket
 17380 ;;		_arp_sendReply
 17381 ;;		_arp_probe
 17382 ;;		_arp_gratuitous
 17383 ;;		_arp_setNewEntry
 17384 ;;		_ipv4_sendFrame
 17385 ;;		_ipv4_handleNewPacket
 17386 ;;		_arpEntryToString
 17387 ;; This function uses a non-reentrant model
 17388 ;;
 17389                           
 17390                           	psect	text65
 17391  0027CE                     __ptext65:
 17392                           	opt stack 0
 17393  0027CE                     _ipAdressToString:
 17394                           	opt stack 22
 17395                           
 17396                           ;uart.c: 163: char static address [] = "???.???.???.???";
 17397                           ;uart.c: 164: uint8_t hundreds[4];
 17398                           ;uart.c: 165: uint8_t tens[4];
 17399                           ;uart.c: 166: uint8_t ones[4];
 17400                           ;uart.c: 167: uint8_t pointer = 0;
 17401                           
 17402                           ;incstack = 0
 17403  0027CE  0E00               	movlw	0
 17404  0027D0  0100               	movlb	0	; () banked
 17405  0027D2  6F87               	movwf	ipAdressToString@pointer& (0+255),b
 17406                           
 17407                           ;uart.c: 169: for (uint8_t i = 0; i < 4; i++) {
 17408  0027D4  0E00               	movlw	0
 17409  0027D6  6F88               	movwf	ipAdressToString@i& (0+255),b
 17410  0027D8                     l9023:
 17411                           
 17412                           ; BSR set to: 0
 17413  0027D8  0E03               	movlw	3
 17414  0027DA  6588               	cpfsgt	ipAdressToString@i& (0+255),b
 17415  0027DC  D001               	goto	l849
 17416  0027DE  D0DF               	goto	u9980
 17417  0027E0                     l849:
 17418                           
 17419                           ; BSR set to: 0
 17420                           ;uart.c: 171: hundreds[i] = ip.address[i] / 100u;
 17421                           
 17422                           ; BSR set to: 0
 17423  0027E0  5188               	movf	ipAdressToString@i& (0+255),w,b
 17424  0027E2  0D01               	mullw	1
 17425  0027E4  0E83               	movlw	low ipAdressToString@hundreds
 17426  0027E6  24F3               	addwf	prodl,w,c
 17427  0027E8  6ED9               	movwf	fsr2l,c
 17428  0027EA  0E00               	movlw	high ipAdressToString@hundreds
 17429  0027EC  20F4               	addwfc	prodh,w,c
 17430  0027EE  6EDA               	movwf	fsr2h,c
 17431  0027F0  5188               	movf	ipAdressToString@i& (0+255),w,b
 17432  0027F2  0D01               	mullw	1
 17433  0027F4  0E73               	movlw	low ipAdressToString@ip
 17434  0027F6  24F3               	addwf	prodl,w,c
 17435  0027F8  6EE1               	movwf	fsr1l,c
 17436  0027FA  0E00               	movlw	high ipAdressToString@ip
 17437  0027FC  20F4               	addwfc	prodh,w,c
 17438  0027FE  6EE2               	movwf	fsr1h,c
 17439  002800  50E7               	movf	indf1,w,c
 17440  002802  6F77               	movwf	??_ipAdressToString& (0+255),b
 17441  002804  5177               	movf	??_ipAdressToString& (0+255),w,b
 17442  002806  6F60               	movwf	___lwdiv@dividend& (0+255),b
 17443  002808  6B61               	clrf	(___lwdiv@dividend+1)& (0+255),b
 17444  00280A  0E00               	movlw	0
 17445  00280C  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
 17446  00280E  0E64               	movlw	100
 17447  002810  6F62               	movwf	___lwdiv@divisor& (0+255),b
 17448  002812  EC2D  F027         	call	___lwdiv	;wreg free
 17449  002816  0100               	movlb	0	; () banked
 17450  002818  5160               	movf	?___lwdiv& (0+255),w,b
 17451  00281A  6EDF               	movwf	indf2,c
 17452                           
 17453                           ;uart.c: 172: tens[i] = (ip.address[i] - hundreds[i]*100u) / 10u;
 17454  00281C  5188               	movf	ipAdressToString@i& (0+255),w,b
 17455  00281E  0D01               	mullw	1
 17456  002820  0E7F               	movlw	low ipAdressToString@tens
 17457  002822  24F3               	addwf	prodl,w,c
 17458  002824  6ED9               	movwf	fsr2l,c
 17459  002826  0E00               	movlw	high ipAdressToString@tens
 17460  002828  20F4               	addwfc	prodh,w,c
 17461  00282A  6EDA               	movwf	fsr2h,c
 17462  00282C  5188               	movf	ipAdressToString@i& (0+255),w,b
 17463  00282E  0D01               	mullw	1
 17464  002830  0E83               	movlw	low ipAdressToString@hundreds
 17465  002832  24F3               	addwf	prodl,w,c
 17466  002834  6EE1               	movwf	fsr1l,c
 17467  002836  0E00               	movlw	high ipAdressToString@hundreds
 17468  002838  20F4               	addwfc	prodh,w,c
 17469  00283A  6EE2               	movwf	fsr1h,c
 17470  00283C  50E7               	movf	indf1,w,c
 17471  00283E  6F77               	movwf	??_ipAdressToString& (0+255),b
 17472  002840  5177               	movf	??_ipAdressToString& (0+255),w,b
 17473  002842  0D64               	mullw	100
 17474  002844  CFF3 F078          	movff	prodl,??_ipAdressToString+1
 17475  002848  CFF4 F079          	movff	prodh,??_ipAdressToString+2
 17476  00284C  1F78               	comf	(??_ipAdressToString+1)& (0+255),f,b
 17477  00284E  1F79               	comf	(??_ipAdressToString+2)& (0+255),f,b
 17478  002850  4B78               	infsnz	(??_ipAdressToString+1)& (0+255),f,b
 17479  002852  2B79               	incf	(??_ipAdressToString+2)& (0+255),f,b
 17480  002854  5188               	movf	ipAdressToString@i& (0+255),w,b
 17481  002856  0D01               	mullw	1
 17482  002858  0E73               	movlw	low ipAdressToString@ip
 17483  00285A  24F3               	addwf	prodl,w,c
 17484  00285C  6EE1               	movwf	fsr1l,c
 17485  00285E  0E00               	movlw	high ipAdressToString@ip
 17486  002860  20F4               	addwfc	prodh,w,c
 17487  002862  6EE2               	movwf	fsr1h,c
 17488  002864  50E7               	movf	indf1,w,c
 17489  002866  6F7A               	movwf	(??_ipAdressToString+3)& (0+255),b
 17490  002868  517A               	movf	(??_ipAdressToString+3)& (0+255),w,b
 17491  00286A  2578               	addwf	(??_ipAdressToString+1)& (0+255),w,b
 17492  00286C  6F60               	movwf	___lwdiv@dividend& (0+255),b
 17493  00286E  0E00               	movlw	0
 17494  002870  2179               	addwfc	(??_ipAdressToString+2)& (0+255),w,b
 17495  002872  6F61               	movwf	(___lwdiv@dividend+1)& (0+255),b
 17496  002874  0E00               	movlw	0
 17497  002876  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
 17498  002878  0E0A               	movlw	10
 17499  00287A  6F62               	movwf	___lwdiv@divisor& (0+255),b
 17500  00287C  EC2D  F027         	call	___lwdiv	;wreg free
 17501  002880  0100               	movlb	0	; () banked
 17502  002882  5160               	movf	?___lwdiv& (0+255),w,b
 17503  002884  6EDF               	movwf	indf2,c
 17504                           
 17505                           ;uart.c: 173: ones[i] = ip.address[i] % 10u;
 17506  002886  5188               	movf	ipAdressToString@i& (0+255),w,b
 17507  002888  0D01               	mullw	1
 17508  00288A  0E7B               	movlw	low ipAdressToString@ones
 17509  00288C  24F3               	addwf	prodl,w,c
 17510  00288E  6ED9               	movwf	fsr2l,c
 17511  002890  0E00               	movlw	high ipAdressToString@ones
 17512  002892  20F4               	addwfc	prodh,w,c
 17513  002894  6EDA               	movwf	fsr2h,c
 17514  002896  5188               	movf	ipAdressToString@i& (0+255),w,b
 17515  002898  0D01               	mullw	1
 17516  00289A  0E73               	movlw	low ipAdressToString@ip
 17517  00289C  24F3               	addwf	prodl,w,c
 17518  00289E  6EE1               	movwf	fsr1l,c
 17519  0028A0  0E00               	movlw	high ipAdressToString@ip
 17520  0028A2  20F4               	addwfc	prodh,w,c
 17521  0028A4  6EE2               	movwf	fsr1h,c
 17522  0028A6  50E7               	movf	indf1,w,c
 17523  0028A8  6F77               	movwf	??_ipAdressToString& (0+255),b
 17524  0028AA  5177               	movf	??_ipAdressToString& (0+255),w,b
 17525  0028AC  6F6E               	movwf	___lwmod@dividend& (0+255),b
 17526  0028AE  6B6F               	clrf	(___lwmod@dividend+1)& (0+255),b
 17527  0028B0  0E00               	movlw	0
 17528  0028B2  6F71               	movwf	(___lwmod@divisor+1)& (0+255),b
 17529  0028B4  0E0A               	movlw	10
 17530  0028B6  6F70               	movwf	___lwmod@divisor& (0+255),b
 17531  0028B8  EC3A  F028         	call	___lwmod	;wreg free
 17532  0028BC  0100               	movlb	0	; () banked
 17533  0028BE  516E               	movf	?___lwmod& (0+255),w,b
 17534  0028C0  6EDF               	movwf	indf2,c
 17535                           
 17536                           ; BSR set to: 0
 17537                           ;uart.c: 175: if (hundreds[i] > 0)
 17538  0028C2  5188               	movf	ipAdressToString@i& (0+255),w,b
 17539  0028C4  0D01               	mullw	1
 17540  0028C6  0E83               	movlw	low ipAdressToString@hundreds
 17541  0028C8  24F3               	addwf	prodl,w,c
 17542  0028CA  6ED9               	movwf	fsr2l,c
 17543  0028CC  0E00               	movlw	high ipAdressToString@hundreds
 17544  0028CE  20F4               	addwfc	prodh,w,c
 17545  0028D0  6EDA               	movwf	fsr2h,c
 17546  0028D2  50DF               	movf	indf2,w,c
 17547  0028D4  B4D8               	btfsc	status,2,c
 17548  0028D6  D014               	goto	l851
 17549                           
 17550                           ; BSR set to: 0
 17551                           ;uart.c: 176: address[pointer++] = hundreds[i] + 0x30;
 17552  0028D8  5187               	movf	ipAdressToString@pointer& (0+255),w,b
 17553  0028DA  0D01               	mullw	1
 17554  0028DC  0EF0               	movlw	low ipAdressToString@address
 17555  0028DE  24F3               	addwf	prodl,w,c
 17556  0028E0  6ED9               	movwf	fsr2l,c
 17557  0028E2  0E02               	movlw	high ipAdressToString@address
 17558  0028E4  20F4               	addwfc	prodh,w,c
 17559  0028E6  6EDA               	movwf	fsr2h,c
 17560  0028E8  5188               	movf	ipAdressToString@i& (0+255),w,b
 17561  0028EA  0D01               	mullw	1
 17562  0028EC  0E83               	movlw	low ipAdressToString@hundreds
 17563  0028EE  24F3               	addwf	prodl,w,c
 17564  0028F0  6EE1               	movwf	fsr1l,c
 17565  0028F2  0E00               	movlw	high ipAdressToString@hundreds
 17566  0028F4  20F4               	addwfc	prodh,w,c
 17567  0028F6  6EE2               	movwf	fsr1h,c
 17568  0028F8  50E7               	movf	indf1,w,c
 17569  0028FA  0F30               	addlw	48
 17570  0028FC  6EDF               	movwf	indf2,c
 17571                           
 17572                           ; BSR set to: 0
 17573  0028FE  2B87               	incf	ipAdressToString@pointer& (0+255),f,b
 17574  002900                     l851:
 17575                           
 17576                           ; BSR set to: 0
 17577                           ;uart.c: 177: if ((tens[i] > 0) || hundreds[i] > 0)
 17578                           
 17579                           ; BSR set to: 0
 17580  002900  5188               	movf	ipAdressToString@i& (0+255),w,b
 17581  002902  0D01               	mullw	1
 17582  002904  0E7F               	movlw	low ipAdressToString@tens
 17583  002906  24F3               	addwf	prodl,w,c
 17584  002908  6ED9               	movwf	fsr2l,c
 17585  00290A  0E00               	movlw	high ipAdressToString@tens
 17586  00290C  20F4               	addwfc	prodh,w,c
 17587  00290E  6EDA               	movwf	fsr2h,c
 17588  002910  50DF               	movf	indf2,w,c
 17589  002912  A4D8               	btfss	status,2,c
 17590  002914  D00B               	goto	u9960
 17591                           
 17592                           ; BSR set to: 0
 17593  002916  5188               	movf	ipAdressToString@i& (0+255),w,b
 17594  002918  0D01               	mullw	1
 17595  00291A  0E83               	movlw	low ipAdressToString@hundreds
 17596  00291C  24F3               	addwf	prodl,w,c
 17597  00291E  6ED9               	movwf	fsr2l,c
 17598  002920  0E00               	movlw	high ipAdressToString@hundreds
 17599  002922  20F4               	addwfc	prodh,w,c
 17600  002924  6EDA               	movwf	fsr2h,c
 17601  002926  50DF               	movf	indf2,w,c
 17602  002928  B4D8               	btfsc	status,2,c
 17603  00292A  D014               	goto	l852
 17604  00292C                     u9960:
 17605                           
 17606                           ; BSR set to: 0
 17607                           ;uart.c: 178: address[pointer++] = tens[i] + 0x30;
 17608                           
 17609                           ; BSR set to: 0
 17610  00292C  5187               	movf	ipAdressToString@pointer& (0+255),w,b
 17611  00292E  0D01               	mullw	1
 17612  002930  0EF0               	movlw	low ipAdressToString@address
 17613  002932  24F3               	addwf	prodl,w,c
 17614  002934  6ED9               	movwf	fsr2l,c
 17615  002936  0E02               	movlw	high ipAdressToString@address
 17616  002938  20F4               	addwfc	prodh,w,c
 17617  00293A  6EDA               	movwf	fsr2h,c
 17618  00293C  5188               	movf	ipAdressToString@i& (0+255),w,b
 17619  00293E  0D01               	mullw	1
 17620  002940  0E7F               	movlw	low ipAdressToString@tens
 17621  002942  24F3               	addwf	prodl,w,c
 17622  002944  6EE1               	movwf	fsr1l,c
 17623  002946  0E00               	movlw	high ipAdressToString@tens
 17624  002948  20F4               	addwfc	prodh,w,c
 17625  00294A  6EE2               	movwf	fsr1h,c
 17626  00294C  50E7               	movf	indf1,w,c
 17627  00294E  0F30               	addlw	48
 17628  002950  6EDF               	movwf	indf2,c
 17629                           
 17630                           ; BSR set to: 0
 17631  002952  2B87               	incf	ipAdressToString@pointer& (0+255),f,b
 17632  002954                     l852:
 17633                           
 17634                           ; BSR set to: 0
 17635                           ;uart.c: 179: address[pointer++] = ones[i] + 0x30;
 17636                           
 17637                           ; BSR set to: 0
 17638  002954  5187               	movf	ipAdressToString@pointer& (0+255),w,b
 17639  002956  0D01               	mullw	1
 17640  002958  0EF0               	movlw	low ipAdressToString@address
 17641  00295A  24F3               	addwf	prodl,w,c
 17642  00295C  6ED9               	movwf	fsr2l,c
 17643  00295E  0E02               	movlw	high ipAdressToString@address
 17644  002960  20F4               	addwfc	prodh,w,c
 17645  002962  6EDA               	movwf	fsr2h,c
 17646  002964  5188               	movf	ipAdressToString@i& (0+255),w,b
 17647  002966  0D01               	mullw	1
 17648  002968  0E7B               	movlw	low ipAdressToString@ones
 17649  00296A  24F3               	addwf	prodl,w,c
 17650  00296C  6EE1               	movwf	fsr1l,c
 17651  00296E  0E00               	movlw	high ipAdressToString@ones
 17652  002970  20F4               	addwfc	prodh,w,c
 17653  002972  6EE2               	movwf	fsr1h,c
 17654  002974  50E7               	movf	indf1,w,c
 17655  002976  0F30               	addlw	48
 17656  002978  6EDF               	movwf	indf2,c
 17657  00297A  2B87               	incf	ipAdressToString@pointer& (0+255),f,b
 17658                           
 17659                           ; BSR set to: 0
 17660                           ;uart.c: 180: if (i != 3)
 17661  00297C  0E03               	movlw	3
 17662  00297E  1988               	xorwf	ipAdressToString@i& (0+255),w,b
 17663  002980  B4D8               	btfsc	status,2,c
 17664  002982  D00B               	goto	l855
 17665                           
 17666                           ; BSR set to: 0
 17667                           ;uart.c: 181: address[pointer++] = '.';
 17668  002984  5187               	movf	ipAdressToString@pointer& (0+255),w,b
 17669  002986  0D01               	mullw	1
 17670  002988  0EF0               	movlw	low ipAdressToString@address
 17671  00298A  24F3               	addwf	prodl,w,c
 17672  00298C  6ED9               	movwf	fsr2l,c
 17673  00298E  0E02               	movlw	high ipAdressToString@address
 17674  002990  20F4               	addwfc	prodh,w,c
 17675  002992  6EDA               	movwf	fsr2h,c
 17676  002994  0E2E               	movlw	46
 17677  002996  6EDF               	movwf	indf2,c
 17678                           
 17679                           ; BSR set to: 0
 17680  002998  2B87               	incf	ipAdressToString@pointer& (0+255),f,b
 17681  00299A                     l855:
 17682                           
 17683                           ; BSR set to: 0
 17684                           
 17685                           ; BSR set to: 0
 17686  00299A  2B88               	incf	ipAdressToString@i& (0+255),f,b
 17687  00299C  D71D               	goto	l9023
 17688  00299E                     u9980:
 17689                           
 17690                           ; BSR set to: 0
 17691                           ;uart.c: 182: }
 17692                           ;uart.c: 183: address[pointer] = '\0';
 17693                           
 17694                           ; BSR set to: 0
 17695  00299E  5187               	movf	ipAdressToString@pointer& (0+255),w,b
 17696  0029A0  0D01               	mullw	1
 17697  0029A2  0EF0               	movlw	low ipAdressToString@address
 17698  0029A4  24F3               	addwf	prodl,w,c
 17699  0029A6  6ED9               	movwf	fsr2l,c
 17700  0029A8  0E02               	movlw	high ipAdressToString@address
 17701  0029AA  20F4               	addwfc	prodh,w,c
 17702  0029AC  6EDA               	movwf	fsr2h,c
 17703  0029AE  0E00               	movlw	0
 17704  0029B0  6EDF               	movwf	indf2,c
 17705                           
 17706                           ; BSR set to: 0
 17707                           ;uart.c: 184: return address;
 17708  0029B2  0EF0               	movlw	low ipAdressToString@address
 17709  0029B4  6F73               	movwf	?_ipAdressToString& (0+255),b
 17710  0029B6  0E02               	movlw	high ipAdressToString@address
 17711  0029B8  6F74               	movwf	(?_ipAdressToString+1)& (0+255),b
 17712  0029BA  0012               	return	
 17713  0029BC                     __end_of_ipAdressToString:
 17714                           	opt stack 0
 17715                           tblptru	equ	0xFF8
 17716                           tblptrh	equ	0xFF7
 17717                           tblptrl	equ	0xFF6
 17718                           tablat	equ	0xFF5
 17719                           prodh	equ	0xFF4
 17720                           prodl	equ	0xFF3
 17721                           intcon	equ	0xFF2
 17722                           intcon3	equ	0xFF0
 17723                           indf0	equ	0xFEF
 17724                           postinc0	equ	0xFEE
 17725                           plusw0	equ	0xFEB
 17726                           fsr0h	equ	0xFEA
 17727                           fsr0l	equ	0xFE9
 17728                           wreg	equ	0xFE8
 17729                           indf1	equ	0xFE7
 17730                           postinc1	equ	0xFE6
 17731                           postdec1	equ	0xFE5
 17732                           plusw1	equ	0xFE3
 17733                           fsr1h	equ	0xFE2
 17734                           fsr1l	equ	0xFE1
 17735                           indf2	equ	0xFDF
 17736                           postinc2	equ	0xFDE
 17737                           postdec2	equ	0xFDD
 17738                           plusw2	equ	0xFDB
 17739                           fsr2h	equ	0xFDA
 17740                           fsr2l	equ	0xFD9
 17741                           status	equ	0xFD8
 17742                           
 17743 ;; *************** function ___lwmod *****************
 17744 ;; Defined at:
 17745 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 17746 ;; Parameters:    Size  Location     Type
 17747 ;;  dividend        2   14[BANK0 ] unsigned int 
 17748 ;;  divisor         2   16[BANK0 ] unsigned int 
 17749 ;; Auto vars:     Size  Location     Type
 17750 ;;  counter         1   18[BANK0 ] unsigned char 
 17751 ;; Return value:  Size  Location     Type
 17752 ;;                  2   14[BANK0 ] unsigned int 
 17753 ;; Registers used:
 17754 ;;		wreg, status,2, status,0
 17755 ;; Tracked objects:
 17756 ;;		On entry : 0/0
 17757 ;;		On exit  : 0/0
 17758 ;;		Unchanged: 0/0
 17759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17760 ;;      Params:         0       4       0       0       0       0       0       0       0
 17761 ;;      Locals:         0       1       0       0       0       0       0       0       0
 17762 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17763 ;;      Totals:         0       5       0       0       0       0       0       0       0
 17764 ;;Total ram usage:        5 bytes
 17765 ;; Hardware stack levels used:    1
 17766 ;; Hardware stack levels required when called:    4
 17767 ;; This function calls:
 17768 ;;		Nothing
 17769 ;; This function is called by:
 17770 ;;		_ipAdressToString
 17771 ;;		_arp_probe
 17772 ;; This function uses a non-reentrant model
 17773 ;;
 17774                           
 17775                           	psect	text66
 17776  005074                     __ptext66:
 17777                           	opt stack 0
 17778  005074                     ___lwmod:
 17779                           	opt stack 22
 17780                           
 17781                           ; BSR set to: 0
 17782                           ;incstack = 0
 17783  005074  0100               	movlb	0	; () banked
 17784  005076  5170               	movf	___lwmod@divisor& (0+255),w,b
 17785  005078  1171               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 17786  00507A  B4D8               	btfsc	status,2,c
 17787  00507C  D018               	goto	l1652
 17788                           
 17789                           ; BSR set to: 0
 17790  00507E  0E01               	movlw	1
 17791  005080  6F72               	movwf	___lwmod@counter& (0+255),b
 17792  005082  D004               	goto	l1647
 17793  005084                     
 17794                           ; BSR set to: 0
 17795                           
 17796                           ; BSR set to: 0
 17797  005084  90D8               	bcf	status,0,c
 17798  005086  3770               	rlcf	___lwmod@divisor& (0+255),f,b
 17799  005088  3771               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 17800  00508A  2B72               	incf	___lwmod@counter& (0+255),f,b
 17801  00508C                     l1647:
 17802                           
 17803                           ; BSR set to: 0
 17804                           
 17805                           ; BSR set to: 0
 17806  00508C  AF71               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 17807  00508E  D7FA               	goto	l1648
 17808  005090                     u9720:
 17809                           
 17810                           ; BSR set to: 0
 17811                           
 17812                           ; BSR set to: 0
 17813                           
 17814                           ; BSR set to: 0
 17815  005090  5170               	movf	___lwmod@divisor& (0+255),w,b
 17816  005092  5D6E               	subwf	___lwmod@dividend& (0+255),w,b
 17817  005094  5171               	movf	(___lwmod@divisor+1)& (0+255),w,b
 17818  005096  596F               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 17819  005098  A0D8               	btfss	status,0,c
 17820  00509A  D004               	goto	l1651
 17821                           
 17822                           ; BSR set to: 0
 17823  00509C  5170               	movf	___lwmod@divisor& (0+255),w,b
 17824  00509E  5F6E               	subwf	___lwmod@dividend& (0+255),f,b
 17825  0050A0  5171               	movf	(___lwmod@divisor+1)& (0+255),w,b
 17826  0050A2  5B6F               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 17827  0050A4                     l1651:
 17828                           
 17829                           ; BSR set to: 0
 17830                           
 17831                           ; BSR set to: 0
 17832  0050A4  90D8               	bcf	status,0,c
 17833  0050A6  3371               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 17834  0050A8  3370               	rrcf	___lwmod@divisor& (0+255),f,b
 17835                           
 17836                           ; BSR set to: 0
 17837  0050AA  2F72               	decfsz	___lwmod@counter& (0+255),f,b
 17838  0050AC  D7F1               	goto	u9720
 17839  0050AE                     l1652:
 17840                           
 17841                           ; BSR set to: 0
 17842                           
 17843                           ; BSR set to: 0
 17844  0050AE  C06E  F06E         	movff	___lwmod@dividend,?___lwmod
 17845  0050B2  C06F  F06F         	movff	___lwmod@dividend+1,?___lwmod+1
 17846                           
 17847                           ; BSR set to: 0
 17848  0050B6  0012               	return		;funcret
 17849  0050B8                     __end_of___lwmod:
 17850                           	opt stack 0
 17851                           tblptru	equ	0xFF8
 17852                           tblptrh	equ	0xFF7
 17853                           tblptrl	equ	0xFF6
 17854                           tablat	equ	0xFF5
 17855                           prodh	equ	0xFF4
 17856                           prodl	equ	0xFF3
 17857                           intcon	equ	0xFF2
 17858                           intcon3	equ	0xFF0
 17859                           indf0	equ	0xFEF
 17860                           postinc0	equ	0xFEE
 17861                           plusw0	equ	0xFEB
 17862                           fsr0h	equ	0xFEA
 17863                           fsr0l	equ	0xFE9
 17864                           wreg	equ	0xFE8
 17865                           indf1	equ	0xFE7
 17866                           postinc1	equ	0xFE6
 17867                           postdec1	equ	0xFE5
 17868                           plusw1	equ	0xFE3
 17869                           fsr1h	equ	0xFE2
 17870                           fsr1l	equ	0xFE1
 17871                           indf2	equ	0xFDF
 17872                           postinc2	equ	0xFDE
 17873                           postdec2	equ	0xFDD
 17874                           plusw2	equ	0xFDB
 17875                           fsr2h	equ	0xFDA
 17876                           fsr2l	equ	0xFD9
 17877                           status	equ	0xFD8
 17878                           
 17879 ;; *************** function ___lwdiv *****************
 17880 ;; Defined at:
 17881 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 17882 ;; Parameters:    Size  Location     Type
 17883 ;;  dividend        2    0[BANK0 ] unsigned int 
 17884 ;;  divisor         2    2[BANK0 ] unsigned int 
 17885 ;; Auto vars:     Size  Location     Type
 17886 ;;  quotient        2    5[BANK0 ] unsigned int 
 17887 ;;  counter         1    4[BANK0 ] unsigned char 
 17888 ;; Return value:  Size  Location     Type
 17889 ;;                  2    0[BANK0 ] unsigned int 
 17890 ;; Registers used:
 17891 ;;		wreg, status,2, status,0
 17892 ;; Tracked objects:
 17893 ;;		On entry : 0/0
 17894 ;;		On exit  : 0/0
 17895 ;;		Unchanged: 0/0
 17896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17897 ;;      Params:         0       4       0       0       0       0       0       0       0
 17898 ;;      Locals:         0       3       0       0       0       0       0       0       0
 17899 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17900 ;;      Totals:         0       7       0       0       0       0       0       0       0
 17901 ;;Total ram usage:        7 bytes
 17902 ;; Hardware stack levels used:    1
 17903 ;; Hardware stack levels required when called:    4
 17904 ;; This function calls:
 17905 ;;		Nothing
 17906 ;; This function is called by:
 17907 ;;		_ipAdressToString
 17908 ;; This function uses a non-reentrant model
 17909 ;;
 17910                           
 17911                           	psect	text67
 17912  004E5A                     __ptext67:
 17913                           	opt stack 0
 17914  004E5A                     ___lwdiv:
 17915                           	opt stack 22
 17916                           
 17917                           ; BSR set to: 0
 17918                           ;incstack = 0
 17919  004E5A  0E00               	movlw	0
 17920  004E5C  0100               	movlb	0	; () banked
 17921  004E5E  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
 17922  004E60  0E00               	movlw	0
 17923  004E62  6F65               	movwf	___lwdiv@quotient& (0+255),b
 17924                           
 17925                           ; BSR set to: 0
 17926  004E64  5162               	movf	___lwdiv@divisor& (0+255),w,b
 17927  004E66  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 17928  004E68  B4D8               	btfsc	status,2,c
 17929  004E6A  D01C               	goto	l1642
 17930                           
 17931                           ; BSR set to: 0
 17932  004E6C  0E01               	movlw	1
 17933  004E6E  6F64               	movwf	___lwdiv@counter& (0+255),b
 17934  004E70  D004               	goto	l1637
 17935  004E72                     
 17936                           ; BSR set to: 0
 17937                           
 17938                           ; BSR set to: 0
 17939  004E72  90D8               	bcf	status,0,c
 17940  004E74  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 17941  004E76  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 17942  004E78  2B64               	incf	___lwdiv@counter& (0+255),f,b
 17943  004E7A                     l1637:
 17944                           
 17945                           ; BSR set to: 0
 17946                           
 17947                           ; BSR set to: 0
 17948  004E7A  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 17949  004E7C  D7FA               	goto	l1638
 17950  004E7E                     u9690:
 17951                           
 17952                           ; BSR set to: 0
 17953                           
 17954                           ; BSR set to: 0
 17955                           
 17956                           ; BSR set to: 0
 17957  004E7E  90D8               	bcf	status,0,c
 17958  004E80  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 17959  004E82  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 17960                           
 17961                           ; BSR set to: 0
 17962  004E84  5162               	movf	___lwdiv@divisor& (0+255),w,b
 17963  004E86  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 17964  004E88  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 17965  004E8A  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 17966  004E8C  A0D8               	btfss	status,0,c
 17967  004E8E  D005               	goto	l1641
 17968                           
 17969                           ; BSR set to: 0
 17970  004E90  5162               	movf	___lwdiv@divisor& (0+255),w,b
 17971  004E92  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 17972  004E94  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 17973  004E96  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 17974                           
 17975                           ; BSR set to: 0
 17976  004E98  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 17977  004E9A                     l1641:
 17978                           
 17979                           ; BSR set to: 0
 17980                           
 17981                           ; BSR set to: 0
 17982  004E9A  90D8               	bcf	status,0,c
 17983  004E9C  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 17984  004E9E  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 17985                           
 17986                           ; BSR set to: 0
 17987  004EA0  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 17988  004EA2  D7ED               	goto	u9690
 17989  004EA4                     l1642:
 17990                           
 17991                           ; BSR set to: 0
 17992                           
 17993                           ; BSR set to: 0
 17994  004EA4  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 17995  004EA8  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 17996                           
 17997                           ; BSR set to: 0
 17998  004EAC  0012               	return		;funcret
 17999  004EAE                     __end_of___lwdiv:
 18000                           	opt stack 0
 18001                           tblptru	equ	0xFF8
 18002                           tblptrh	equ	0xFF7
 18003                           tblptrl	equ	0xFF6
 18004                           tablat	equ	0xFF5
 18005                           prodh	equ	0xFF4
 18006                           prodl	equ	0xFF3
 18007                           intcon	equ	0xFF2
 18008                           intcon3	equ	0xFF0
 18009                           indf0	equ	0xFEF
 18010                           postinc0	equ	0xFEE
 18011                           plusw0	equ	0xFEB
 18012                           fsr0h	equ	0xFEA
 18013                           fsr0l	equ	0xFE9
 18014                           wreg	equ	0xFE8
 18015                           indf1	equ	0xFE7
 18016                           postinc1	equ	0xFE6
 18017                           postdec1	equ	0xFE5
 18018                           plusw1	equ	0xFE3
 18019                           fsr1h	equ	0xFE2
 18020                           fsr1l	equ	0xFE1
 18021                           indf2	equ	0xFDF
 18022                           postinc2	equ	0xFDE
 18023                           postdec2	equ	0xFDD
 18024                           plusw2	equ	0xFDB
 18025                           fsr2h	equ	0xFDA
 18026                           fsr2l	equ	0xFD9
 18027                           status	equ	0xFD8
 18028                           
 18029 ;; *************** function _arp_sendRequest *****************
 18030 ;; Defined at:
 18031 ;;		line 182 in file "src/stack/protocols/arp.c"
 18032 ;; Parameters:    Size  Location     Type
 18033 ;;  ipSender        4    0[BANK1 ] struct ipv4_address
 18034 ;;  ipTarget        4    4[BANK1 ] struct ipv4_address
 18035 ;; Auto vars:     Size  Location     Type
 18036 ;;  request        32   20[BANK1 ] struct arp_message
 18037 ;;  targetMAC       6   14[BANK1 ] struct macaddress
 18038 ;;  senderMAC       6    8[BANK1 ] struct macaddress
 18039 ;; Return value:  Size  Location     Type
 18040 ;;                  1    wreg      void 
 18041 ;; Registers used:
 18042 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18043 ;; Tracked objects:
 18044 ;;		On entry : 0/0
 18045 ;;		On exit  : 0/0
 18046 ;;		Unchanged: 0/0
 18047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18048 ;;      Params:         0       0       8       0       0       0       0       0       0
 18049 ;;      Locals:         0       0      44       0       0       0       0       0       0
 18050 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18051 ;;      Totals:         0       0      52       0       0       0       0       0       0
 18052 ;;Total ram usage:       52 bytes
 18053 ;; Hardware stack levels used:    1
 18054 ;; Hardware stack levels required when called:   10
 18055 ;; This function calls:
 18056 ;;		_arp_send
 18057 ;;		_ethernetController_getMacAddress
 18058 ;;		_mac_setAllZero
 18059 ;; This function is called by:
 18060 ;;		_arp_probe
 18061 ;;		_arp_gratuitous
 18062 ;;		_ipv4_sendFrame
 18063 ;; This function uses a non-reentrant model
 18064 ;;
 18065                           
 18066                           	psect	text68
 18067  0043FE                     __ptext68:
 18068                           	opt stack 0
 18069  0043FE                     _arp_sendRequest:
 18070                           	opt stack 18
 18071                           
 18072                           ;arp.c: 183: arp_message_t request;
 18073                           ;arp.c: 184: macaddress_t senderMAC;
 18074                           ;arp.c: 185: macaddress_t targetMAC;
 18075                           ;arp.c: 187: senderMAC = ethernetController_getMacAddress();
 18076                           
 18077                           ; BSR set to: 0
 18078                           ;incstack = 0
 18079  0043FE  EC0D  F025         	call	_ethernetController_getMacAddress	;wreg free
 18080  004402  EE21  F008         	lfsr	2,arp_sendRequest@senderMAC
 18081  004406  0E05               	movlw	5
 18082  004408                     u11051:
 18083  004408  CFEB FFDB          	movff	plusw0,plusw2
 18084  00440C  06E8               	decf	wreg,f,c
 18085  00440E  E2FC               	bc	u11051
 18086                           
 18087                           ;arp.c: 188: mac_setAllZero(&targetMAC);
 18088  004410  0E0E               	movlw	low arp_sendRequest@targetMAC
 18089  004412  0100               	movlb	0	; () banked
 18090  004414  6F60               	movwf	mac_setAllZero@mac& (0+255),b
 18091  004416  0E01               	movlw	high arp_sendRequest@targetMAC
 18092  004418  6F61               	movwf	(mac_setAllZero@mac+1)& (0+255),b
 18093  00441A  EC94  F02A         	call	_mac_setAllZero	;wreg free
 18094                           
 18095                           ;arp.c: 190: request.hlen = 6u;
 18096  00441E  0E06               	movlw	6
 18097  004420  0101               	movlb	1	; () banked
 18098  004422  6F18               	movwf	(arp_sendRequest@request+4)& (0+255),b
 18099                           
 18100                           ; BSR set to: 1
 18101                           ;arp.c: 191: request.plen = 4u;
 18102  004424  0E04               	movlw	4
 18103  004426  6F19               	movwf	(arp_sendRequest@request+5)& (0+255),b
 18104                           
 18105                           ; BSR set to: 1
 18106                           ;arp.c: 192: request.htype = ARP_HTYPE_ETHERNET;
 18107  004428  0E00               	movlw	0
 18108  00442A  6F15               	movwf	(arp_sendRequest@request+1)& (0+255),b
 18109  00442C  0E01               	movlw	1
 18110  00442E  6F14               	movwf	arp_sendRequest@request& (0+255),b
 18111                           
 18112                           ; BSR set to: 1
 18113                           ;arp.c: 193: request.ptype = ARP_PTYPE_IPv4;
 18114  004430  0E08               	movlw	8
 18115  004432  6F17               	movwf	(arp_sendRequest@request+3)& (0+255),b
 18116  004434  0E00               	movlw	0
 18117  004436  6F16               	movwf	(arp_sendRequest@request+2)& (0+255),b
 18118                           
 18119                           ; BSR set to: 1
 18120                           ;arp.c: 194: request.operation = ARP_REQUEST;
 18121  004438  0E00               	movlw	0
 18122  00443A  6F1B               	movwf	(arp_sendRequest@request+7)& (0+255),b
 18123  00443C  0E01               	movlw	1
 18124  00443E  6F1A               	movwf	(arp_sendRequest@request+6)& (0+255),b
 18125                           
 18126                           ; BSR set to: 1
 18127                           ;arp.c: 195: request.senderIPAddress = ipSender;
 18128  004440  C100  F122         	movff	arp_sendRequest@ipSender,arp_sendRequest@request+14
 18129  004444  C101  F123         	movff	arp_sendRequest@ipSender+1,arp_sendRequest@request+15
 18130  004448  C102  F124         	movff	arp_sendRequest@ipSender+2,arp_sendRequest@request+16
 18131  00444C  C103  F125         	movff	arp_sendRequest@ipSender+3,arp_sendRequest@request+17
 18132                           
 18133                           ; BSR set to: 1
 18134                           ;arp.c: 196: request.senderMACAddress = senderMAC;
 18135  004450  EE21  F008         	lfsr	2,arp_sendRequest@senderMAC
 18136  004454  EE11  F01C         	lfsr	1,arp_sendRequest@request+8
 18137  004458  0E05               	movlw	5
 18138  00445A                     u11061:
 18139  00445A  CFDB FFE3          	movff	plusw2,plusw1
 18140  00445E  06E8               	decf	wreg,f,c
 18141  004460  E2FC               	bc	u11061
 18142                           
 18143                           ; BSR set to: 1
 18144                           ;arp.c: 197: request.targetIPAddress = ipTarget;
 18145  004462  C104  F12C         	movff	arp_sendRequest@ipTarget,arp_sendRequest@request+24
 18146  004466  C105  F12D         	movff	arp_sendRequest@ipTarget+1,arp_sendRequest@request+25
 18147  00446A  C106  F12E         	movff	arp_sendRequest@ipTarget+2,arp_sendRequest@request+26
 18148  00446E  C107  F12F         	movff	arp_sendRequest@ipTarget+3,arp_sendRequest@request+27
 18149                           
 18150                           ; BSR set to: 1
 18151                           ;arp.c: 198: request.targetMACAddress = targetMAC;
 18152  004472  EE21  F00E         	lfsr	2,arp_sendRequest@targetMAC
 18153  004476  EE11  F026         	lfsr	1,arp_sendRequest@request+18
 18154  00447A  0E05               	movlw	5
 18155  00447C                     u11071:
 18156  00447C  CFDB FFE3          	movff	plusw2,plusw1
 18157  004480  06E8               	decf	wreg,f,c
 18158  004482  E2FC               	bc	u11071
 18159                           
 18160                           ; BSR set to: 1
 18161                           ;arp.c: 200: arp_send(request);
 18162  004484  EE21  F014         	lfsr	2,arp_sendRequest@request
 18163  004488  EE00  F0A7         	lfsr	0,arp_send@arp
 18164  00448C  0E1F               	movlw	31
 18165  00448E                     u11081:
 18166  00448E  CFDB FFEB          	movff	plusw2,plusw0
 18167  004492  06E8               	decf	wreg,f,c
 18168  004494  E2FC               	bc	u11081
 18169  004496  EC4F  F00F         	call	_arp_send	;wreg free
 18170  00449A  0012               	return		;funcret
 18171  00449C                     __end_of_arp_sendRequest:
 18172                           	opt stack 0
 18173                           tblptru	equ	0xFF8
 18174                           tblptrh	equ	0xFF7
 18175                           tblptrl	equ	0xFF6
 18176                           tablat	equ	0xFF5
 18177                           prodh	equ	0xFF4
 18178                           prodl	equ	0xFF3
 18179                           intcon	equ	0xFF2
 18180                           intcon3	equ	0xFF0
 18181                           indf0	equ	0xFEF
 18182                           postinc0	equ	0xFEE
 18183                           plusw0	equ	0xFEB
 18184                           fsr0h	equ	0xFEA
 18185                           fsr0l	equ	0xFE9
 18186                           wreg	equ	0xFE8
 18187                           indf1	equ	0xFE7
 18188                           postinc1	equ	0xFE6
 18189                           postdec1	equ	0xFE5
 18190                           plusw1	equ	0xFE3
 18191                           fsr1h	equ	0xFE2
 18192                           fsr1l	equ	0xFE1
 18193                           indf2	equ	0xFDF
 18194                           postinc2	equ	0xFDE
 18195                           postdec2	equ	0xFDD
 18196                           plusw2	equ	0xFDB
 18197                           fsr2h	equ	0xFDA
 18198                           fsr2l	equ	0xFD9
 18199                           status	equ	0xFD8
 18200                           
 18201 ;; *************** function _mac_setAllZero *****************
 18202 ;; Defined at:
 18203 ;;		line 47 in file "src/eth/mac.c"
 18204 ;; Parameters:    Size  Location     Type
 18205 ;;  mac             2    0[BANK0 ] PTR struct macaddress
 18206 ;;		 -> arp_init@mac(6), arp_sendRequest@targetMAC(6), 
 18207 ;; Auto vars:     Size  Location     Type
 18208 ;;  i               1    2[BANK0 ] unsigned char 
 18209 ;; Return value:  Size  Location     Type
 18210 ;;                  1    wreg      void 
 18211 ;; Registers used:
 18212 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 18213 ;; Tracked objects:
 18214 ;;		On entry : 0/0
 18215 ;;		On exit  : 0/0
 18216 ;;		Unchanged: 0/0
 18217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18218 ;;      Params:         0       2       0       0       0       0       0       0       0
 18219 ;;      Locals:         0       1       0       0       0       0       0       0       0
 18220 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18221 ;;      Totals:         0       3       0       0       0       0       0       0       0
 18222 ;;Total ram usage:        3 bytes
 18223 ;; Hardware stack levels used:    1
 18224 ;; Hardware stack levels required when called:    4
 18225 ;; This function calls:
 18226 ;;		Nothing
 18227 ;; This function is called by:
 18228 ;;		_arp_sendRequest
 18229 ;;		_arp_init
 18230 ;; This function uses a non-reentrant model
 18231 ;;
 18232                           
 18233                           	psect	text69
 18234  005528                     __ptext69:
 18235                           	opt stack 0
 18236  005528                     _mac_setAllZero:
 18237                           	opt stack 24
 18238                           
 18239                           ;mac.c: 48: for (uint8_t i = 0; i < 6; i++)
 18240                           
 18241                           ;incstack = 0
 18242  005528  0E00               	movlw	0
 18243  00552A  0100               	movlb	0	; () banked
 18244  00552C  6F62               	movwf	mac_setAllZero@i& (0+255),b
 18245  00552E                     l9011:
 18246                           
 18247                           ; BSR set to: 0
 18248  00552E  0E05               	movlw	5
 18249  005530  6562               	cpfsgt	mac_setAllZero@i& (0+255),b
 18250  005532  D001               	goto	l396
 18251  005534  0012               	return	
 18252  005536                     l396:
 18253                           
 18254                           ; BSR set to: 0
 18255                           ;mac.c: 49: mac->address[i] = 0x00;
 18256                           
 18257                           ; BSR set to: 0
 18258  005536  5162               	movf	mac_setAllZero@i& (0+255),w,b
 18259  005538  0D01               	mullw	1
 18260  00553A  50F3               	movf	prodl,w,c
 18261  00553C  2560               	addwf	mac_setAllZero@mac& (0+255),w,b
 18262  00553E  6ED9               	movwf	fsr2l,c
 18263  005540  50F4               	movf	prodh,w,c
 18264  005542  2161               	addwfc	(mac_setAllZero@mac+1)& (0+255),w,b
 18265  005544  6EDA               	movwf	fsr2h,c
 18266  005546  0E00               	movlw	0
 18267  005548  6EDF               	movwf	indf2,c
 18268                           
 18269                           ; BSR set to: 0
 18270  00554A  2B62               	incf	mac_setAllZero@i& (0+255),f,b
 18271  00554C  D7F0               	goto	l9011
 18272  00554E                     __end_of_mac_setAllZero:
 18273                           	opt stack 0
 18274                           tblptru	equ	0xFF8
 18275                           tblptrh	equ	0xFF7
 18276                           tblptrl	equ	0xFF6
 18277                           tablat	equ	0xFF5
 18278                           prodh	equ	0xFF4
 18279                           prodl	equ	0xFF3
 18280                           intcon	equ	0xFF2
 18281                           intcon3	equ	0xFF0
 18282                           indf0	equ	0xFEF
 18283                           postinc0	equ	0xFEE
 18284                           plusw0	equ	0xFEB
 18285                           fsr0h	equ	0xFEA
 18286                           fsr0l	equ	0xFE9
 18287                           wreg	equ	0xFE8
 18288                           indf1	equ	0xFE7
 18289                           postinc1	equ	0xFE6
 18290                           postdec1	equ	0xFE5
 18291                           plusw1	equ	0xFE3
 18292                           fsr1h	equ	0xFE2
 18293                           fsr1l	equ	0xFE1
 18294                           indf2	equ	0xFDF
 18295                           postinc2	equ	0xFDE
 18296                           postdec2	equ	0xFDD
 18297                           plusw2	equ	0xFDB
 18298                           fsr2h	equ	0xFDA
 18299                           fsr2l	equ	0xFD9
 18300                           status	equ	0xFD8
 18301                           
 18302 ;; *************** function _ethernetController_getMacAddress *****************
 18303 ;; Defined at:
 18304 ;;		line 157 in file "src/enc424j600/ENC424J600.c"
 18305 ;; Parameters:    Size  Location     Type
 18306 ;;		None
 18307 ;; Auto vars:     Size  Location     Type
 18308 ;;  mac             6   20[BANK0 ] struct macaddress
 18309 ;; Return value:  Size  Location     Type
 18310 ;;                  6   14[BANK0 ] struct macaddress
 18311 ;; Registers used:
 18312 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 18313 ;; Tracked objects:
 18314 ;;		On entry : 0/0
 18315 ;;		On exit  : 0/0
 18316 ;;		Unchanged: 0/0
 18317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18318 ;;      Params:         0       6       0       0       0       0       0       0       0
 18319 ;;      Locals:         0       6       0       0       0       0       0       0       0
 18320 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18321 ;;      Totals:         0      12       0       0       0       0       0       0       0
 18322 ;;Total ram usage:       12 bytes
 18323 ;; Hardware stack levels used:    1
 18324 ;; Hardware stack levels required when called:    7
 18325 ;; This function calls:
 18326 ;;		_enc424j600_readControlRegisterUnbanked
 18327 ;; This function is called by:
 18328 ;;		_main
 18329 ;;		_arp_sendRequest
 18330 ;;		_arp_sendReply
 18331 ;;		_ipv4_sendFrame
 18332 ;; This function uses a non-reentrant model
 18333 ;;
 18334                           
 18335                           	psect	text70
 18336  004A1A                     __ptext70:
 18337                           	opt stack 0
 18338  004A1A                     _ethernetController_getMacAddress:
 18339                           	opt stack 21
 18340                           
 18341                           ;ENC424J600.c: 158: macaddress_t mac;
 18342                           ;ENC424J600.c: 159: enc424j600_readControlRegisterUnbanked(0x04 + 0x60, &mac.address[0])
      +                          ;
 18343                           
 18344                           ; BSR set to: 0
 18345                           ;incstack = 0
 18346  004A1A  0E74               	movlw	low ethernetController_getMacAddress@mac
 18347  004A1C  0100               	movlb	0	; () banked
 18348  004A1E  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 18349  004A20  0E00               	movlw	high ethernetController_getMacAddress@mac
 18350  004A22  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 18351  004A24  0E64               	movlw	100
 18352  004A26  EC4B  F029         	call	_enc424j600_readControlRegisterUnbanked
 18353                           
 18354                           ;ENC424J600.c: 160: enc424j600_readControlRegisterUnbanked(0x05 + 0x60, &mac.address[1])
      +                          ;
 18355  004A2A  0E75               	movlw	low (ethernetController_getMacAddress@mac+1)
 18356  004A2C  0100               	movlb	0	; () banked
 18357  004A2E  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 18358  004A30  0E00               	movlw	high (ethernetController_getMacAddress@mac+1)
 18359  004A32  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 18360  004A34  0E65               	movlw	101
 18361  004A36  EC4B  F029         	call	_enc424j600_readControlRegisterUnbanked
 18362                           
 18363                           ;ENC424J600.c: 161: enc424j600_readControlRegisterUnbanked(0x02 + 0x60, &mac.address[2])
      +                          ;
 18364  004A3A  0E76               	movlw	low (ethernetController_getMacAddress@mac+2)
 18365  004A3C  0100               	movlb	0	; () banked
 18366  004A3E  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 18367  004A40  0E00               	movlw	high (ethernetController_getMacAddress@mac+2)
 18368  004A42  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 18369  004A44  0E62               	movlw	98
 18370  004A46  EC4B  F029         	call	_enc424j600_readControlRegisterUnbanked
 18371                           
 18372                           ;ENC424J600.c: 162: enc424j600_readControlRegisterUnbanked(0x03 + 0x60, &mac.address[3])
      +                          ;
 18373  004A4A  0E77               	movlw	low (ethernetController_getMacAddress@mac+3)
 18374  004A4C  0100               	movlb	0	; () banked
 18375  004A4E  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 18376  004A50  0E00               	movlw	high (ethernetController_getMacAddress@mac+3)
 18377  004A52  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 18378  004A54  0E63               	movlw	99
 18379  004A56  EC4B  F029         	call	_enc424j600_readControlRegisterUnbanked
 18380                           
 18381                           ;ENC424J600.c: 163: enc424j600_readControlRegisterUnbanked(0x00 + 0x60, &mac.address[4])
      +                          ;
 18382  004A5A  0E78               	movlw	low (ethernetController_getMacAddress@mac+4)
 18383  004A5C  0100               	movlb	0	; () banked
 18384  004A5E  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 18385  004A60  0E00               	movlw	high (ethernetController_getMacAddress@mac+4)
 18386  004A62  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 18387  004A64  0E60               	movlw	96
 18388  004A66  EC4B  F029         	call	_enc424j600_readControlRegisterUnbanked
 18389                           
 18390                           ;ENC424J600.c: 164: enc424j600_readControlRegisterUnbanked(0x01 + 0x60, &mac.address[5])
      +                          ;
 18391  004A6A  0E79               	movlw	low (ethernetController_getMacAddress@mac+5)
 18392  004A6C  0100               	movlb	0	; () banked
 18393  004A6E  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 18394  004A70  0E00               	movlw	high (ethernetController_getMacAddress@mac+5)
 18395  004A72  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 18396  004A74  0E61               	movlw	97
 18397  004A76  EC4B  F029         	call	_enc424j600_readControlRegisterUnbanked
 18398                           
 18399                           ;ENC424J600.c: 165: return mac;
 18400  004A7A  EE20  F074         	lfsr	2,ethernetController_getMacAddress@mac
 18401  004A7E  EE00  F06E         	lfsr	0,?_ethernetController_getMacAddress
 18402  004A82  0E05               	movlw	5
 18403  004A84                     u9741:
 18404  004A84  CFDB FFEB          	movff	plusw2,plusw0
 18405  004A88  06E8               	decf	wreg,f,c
 18406  004A8A  E2FC               	bc	u9741
 18407  004A8C  0012               	return	
 18408  004A8E                     __end_of_ethernetController_getMacAddress:
 18409                           	opt stack 0
 18410                           tblptru	equ	0xFF8
 18411                           tblptrh	equ	0xFF7
 18412                           tblptrl	equ	0xFF6
 18413                           tablat	equ	0xFF5
 18414                           prodh	equ	0xFF4
 18415                           prodl	equ	0xFF3
 18416                           intcon	equ	0xFF2
 18417                           intcon3	equ	0xFF0
 18418                           indf0	equ	0xFEF
 18419                           postinc0	equ	0xFEE
 18420                           plusw0	equ	0xFEB
 18421                           fsr0h	equ	0xFEA
 18422                           fsr0l	equ	0xFE9
 18423                           wreg	equ	0xFE8
 18424                           indf1	equ	0xFE7
 18425                           postinc1	equ	0xFE6
 18426                           postdec1	equ	0xFE5
 18427                           plusw1	equ	0xFE3
 18428                           fsr1h	equ	0xFE2
 18429                           fsr1l	equ	0xFE1
 18430                           indf2	equ	0xFDF
 18431                           postinc2	equ	0xFDE
 18432                           postdec2	equ	0xFDD
 18433                           plusw2	equ	0xFDB
 18434                           fsr2h	equ	0xFDA
 18435                           fsr2l	equ	0xFD9
 18436                           status	equ	0xFD8
 18437                           
 18438 ;; *************** function _arp_send *****************
 18439 ;; Defined at:
 18440 ;;		line 136 in file "src/stack/protocols/arp.c"
 18441 ;; Parameters:    Size  Location     Type
 18442 ;;  arp            32   71[BANK0 ] struct arp_message
 18443 ;; Auto vars:     Size  Location     Type
 18444 ;;  i               1  112[BANK0 ] unsigned char 
 18445 ;;  i               1  111[BANK0 ] unsigned char 
 18446 ;;  i               1  110[BANK0 ] unsigned char 
 18447 ;;  i               1  109[BANK0 ] unsigned char 
 18448 ;;  ethFrame       34  113[BANK0 ] struct ethernetFrame
 18449 ;;  field           9  147[BANK0 ] struct memoryField
 18450 ;;  destination     6  103[BANK0 ] struct macaddress
 18451 ;; Return value:  Size  Location     Type
 18452 ;;                  1    wreg      void 
 18453 ;; Registers used:
 18454 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18455 ;; Tracked objects:
 18456 ;;		On entry : 0/0
 18457 ;;		On exit  : 0/0
 18458 ;;		Unchanged: 0/0
 18459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18460 ;;      Params:         0      32       0       0       0       0       0       0       0
 18461 ;;      Locals:         0      53       0       0       0       0       0       0       0
 18462 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18463 ;;      Totals:         0      85       0       0       0       0       0       0       0
 18464 ;;Total ram usage:       85 bytes
 18465 ;; Hardware stack levels used:    1
 18466 ;; Hardware stack levels required when called:    9
 18467 ;; This function calls:
 18468 ;;		_ethernetController_getSourceMACAddress
 18469 ;;		_ethernetController_sendPacket
 18470 ;;		_ethernetController_streamToTransmitBuffer
 18471 ;;		_ethernet_txFrameRequest
 18472 ;;		_mac_setToBroadcast
 18473 ;; This function is called by:
 18474 ;;		_arp_sendRequest
 18475 ;;		_arp_sendReply
 18476 ;; This function uses a non-reentrant model
 18477 ;;
 18478                           
 18479                           	psect	text71
 18480  001E9E                     __ptext71:
 18481                           	opt stack 0
 18482  001E9E                     _arp_send:
 18483                           	opt stack 18
 18484                           
 18485                           ;arp.c: 137: memoryField_t field;
 18486                           ;arp.c: 138: ethernetFrame_t ethFrame;
 18487                           ;arp.c: 141: macaddress_t destination;
 18488                           ;arp.c: 142: mac_setToBroadcast(&destination);
 18489                           
 18490                           ;incstack = 0
 18491  001E9E  0EC7               	movlw	low arp_send@destination
 18492  001EA0  0100               	movlb	0	; () banked
 18493  001EA2  6F60               	movwf	mac_setToBroadcast@mac& (0+255),b
 18494  001EA4  0E00               	movlw	high arp_send@destination
 18495  001EA6  6F61               	movwf	(mac_setToBroadcast@mac+1)& (0+255),b
 18496  001EA8  ECA7  F02A         	call	_mac_setToBroadcast	;wreg free
 18497                           
 18498                           ;arp.c: 143: ethFrame.destination = destination;
 18499  001EAC  EE20  F0C7         	lfsr	2,arp_send@destination
 18500  001EB0  EE10  F0D9         	lfsr	1,arp_send@ethFrame+8
 18501  001EB4  0E05               	movlw	5
 18502  001EB6                     u10121:
 18503  001EB6  CFDB FFE3          	movff	plusw2,plusw1
 18504  001EBA  06E8               	decf	wreg,f,c
 18505  001EBC  E2FC               	bc	u10121
 18506                           
 18507                           ;arp.c: 147: ethFrame.length = 36;
 18508  001EBE  0E00               	movlw	0
 18509  001EC0  0100               	movlb	0	; () banked
 18510  001EC2  6FD2               	movwf	(arp_send@ethFrame+1)& (0+255),b
 18511  001EC4  0E24               	movlw	36
 18512  001EC6  6FD1               	movwf	arp_send@ethFrame& (0+255),b
 18513                           
 18514                           ; BSR set to: 0
 18515                           ;arp.c: 148: ethFrame.source = ethernetController_getSourceMACAddress(field);
 18516  001EC8  EE20  F0F3         	lfsr	2,arp_send@field
 18517  001ECC  EE00  F06F         	lfsr	0,ethernetController_getSourceMACAddress@field
 18518  001ED0  0E08               	movlw	8
 18519  001ED2                     u10131:
 18520  001ED2  CFDB FFEB          	movff	plusw2,plusw0
 18521  001ED6  06E8               	decf	wreg,f,c
 18522  001ED8  E2FC               	bc	u10131
 18523  001EDA  EC7F  F025         	call	_ethernetController_getSourceMACAddress	;wreg free
 18524  001EDE  EE20  F0D3         	lfsr	2,arp_send@ethFrame+2
 18525  001EE2  0E05               	movlw	5
 18526  001EE4                     u10141:
 18527  001EE4  CFEB FFDB          	movff	plusw0,plusw2
 18528  001EE8  06E8               	decf	wreg,f,c
 18529  001EEA  E2FC               	bc	u10141
 18530                           
 18531                           ;arp.c: 149: ethFrame.ethertype = ETHERTYPE_ARP;
 18532  001EEC  0E08               	movlw	8
 18533  001EEE  0100               	movlb	0	; () banked
 18534  001EF0  6FE0               	movwf	(arp_send@ethFrame+15)& (0+255),b
 18535  001EF2  0E06               	movlw	6
 18536  001EF4  6FDF               	movwf	(arp_send@ethFrame+14)& (0+255),b
 18537                           
 18538                           ; BSR set to: 0
 18539                           ;arp.c: 151: ethernet_txFrameRequest(&ethFrame);
 18540  001EF6  0ED1               	movlw	low arp_send@ethFrame
 18541  001EF8  6FA2               	movwf	ethernet_txFrameRequest@frame& (0+255),b
 18542  001EFA  0E00               	movlw	high arp_send@ethFrame
 18543  001EFC  6FA3               	movwf	(ethernet_txFrameRequest@frame+1)& (0+255),b
 18544  001EFE  EC1F  F01F         	call	_ethernet_txFrameRequest	;wreg free
 18545                           
 18546                           ;arp.c: 153: if (ethFrame.memory.fOutOfMemory) {
 18547  001F02  0100               	movlb	0	; () banked
 18548  001F04  51E8               	movf	(arp_send@ethFrame+23)& (0+255),w,b
 18549  001F06  A4D8               	btfss	status,2,c
 18550  001F08  0012               	return	
 18551                           
 18552                           ; BSR set to: 0
 18553                           ;arp.c: 155: }
 18554                           ;arp.c: 157: field.start = ethFrame.memory.start + 8;
 18555                           
 18556                           ; BSR set to: 0
 18557                           
 18558                           ; BSR set to: 0
 18559                           ;arp.c: 154: return;
 18560  001F0A  0E08               	movlw	8
 18561  001F0C  25E1               	addwf	(arp_send@ethFrame+16)& (0+255),w,b
 18562  001F0E  6FF3               	movwf	arp_send@field& (0+255),b
 18563  001F10  0E00               	movlw	0
 18564  001F12  21E2               	addwfc	(arp_send@ethFrame+17)& (0+255),w,b
 18565  001F14  6FF4               	movwf	(arp_send@field+1)& (0+255),b
 18566                           
 18567                           ; BSR set to: 0
 18568                           ;arp.c: 158: field.end = ethFrame.memory.end;
 18569  001F16  C0E3  F0F5         	movff	arp_send@ethFrame+18,arp_send@field+2
 18570  001F1A  C0E4  F0F6         	movff	arp_send@ethFrame+19,arp_send@field+3
 18571                           
 18572                           ; BSR set to: 0
 18573                           ;arp.c: 159: field.length = 28;
 18574  001F1E  0E00               	movlw	0
 18575  001F20  6FF8               	movwf	(arp_send@field+5)& (0+255),b
 18576  001F22  0E1C               	movlw	28
 18577  001F24  6FF7               	movwf	(arp_send@field+4)& (0+255),b
 18578                           
 18579                           ; BSR set to: 0
 18580                           ;arp.c: 161: ethernetController_streamToTransmitBuffer((arp.htype & 0xff00) >> 8, field)
      +                          ;
 18581  001F26  EE20  F0F3         	lfsr	2,arp_send@field
 18582  001F2A  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 18583  001F2E  0E08               	movlw	8
 18584  001F30                     u10161:
 18585  001F30  CFDB FFEB          	movff	plusw2,plusw0
 18586  001F34  06E8               	decf	wreg,f,c
 18587  001F36  E2FC               	bc	u10161
 18588  001F38  51A8               	movf	(arp_send@arp+1)& (0+255),w,b
 18589  001F3A  EC5D  F024         	call	_ethernetController_streamToTransmitBuffer
 18590                           
 18591                           ;arp.c: 162: ethernetController_streamToTransmitBuffer(arp.htype & 0x00ff, field);
 18592  001F3E  EE20  F0F3         	lfsr	2,arp_send@field
 18593  001F42  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 18594  001F46  0E08               	movlw	8
 18595  001F48                     u10171:
 18596  001F48  CFDB FFEB          	movff	plusw2,plusw0
 18597  001F4C  06E8               	decf	wreg,f,c
 18598  001F4E  E2FC               	bc	u10171
 18599  001F50  0100               	movlb	0	; () banked
 18600  001F52  51A7               	movf	arp_send@arp& (0+255),w,b
 18601  001F54  EC5D  F024         	call	_ethernetController_streamToTransmitBuffer
 18602                           
 18603                           ;arp.c: 163: ethernetController_streamToTransmitBuffer((arp.ptype & 0xff00) >> 8, field)
      +                          ;
 18604  001F58  EE20  F0F3         	lfsr	2,arp_send@field
 18605  001F5C  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 18606  001F60  0E08               	movlw	8
 18607  001F62                     u10181:
 18608  001F62  CFDB FFEB          	movff	plusw2,plusw0
 18609  001F66  06E8               	decf	wreg,f,c
 18610  001F68  E2FC               	bc	u10181
 18611  001F6A  0100               	movlb	0	; () banked
 18612  001F6C  51AA               	movf	(arp_send@arp+3)& (0+255),w,b
 18613  001F6E  EC5D  F024         	call	_ethernetController_streamToTransmitBuffer
 18614                           
 18615                           ;arp.c: 164: ethernetController_streamToTransmitBuffer(arp.ptype & 0x00ff, field);
 18616  001F72  EE20  F0F3         	lfsr	2,arp_send@field
 18617  001F76  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 18618  001F7A  0E08               	movlw	8
 18619  001F7C                     u10191:
 18620  001F7C  CFDB FFEB          	movff	plusw2,plusw0
 18621  001F80  06E8               	decf	wreg,f,c
 18622  001F82  E2FC               	bc	u10191
 18623  001F84  0100               	movlb	0	; () banked
 18624  001F86  51A9               	movf	(arp_send@arp+2)& (0+255),w,b
 18625  001F88  EC5D  F024         	call	_ethernetController_streamToTransmitBuffer
 18626                           
 18627                           ;arp.c: 165: ethernetController_streamToTransmitBuffer(arp.hlen, field);
 18628  001F8C  EE20  F0F3         	lfsr	2,arp_send@field
 18629  001F90  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 18630  001F94  0E08               	movlw	8
 18631  001F96                     u10201:
 18632  001F96  CFDB FFEB          	movff	plusw2,plusw0
 18633  001F9A  06E8               	decf	wreg,f,c
 18634  001F9C  E2FC               	bc	u10201
 18635  001F9E  0100               	movlb	0	; () banked
 18636  001FA0  51AB               	movf	(arp_send@arp+4)& (0+255),w,b
 18637  001FA2  EC5D  F024         	call	_ethernetController_streamToTransmitBuffer
 18638                           
 18639                           ;arp.c: 166: ethernetController_streamToTransmitBuffer(arp.plen, field);
 18640  001FA6  EE20  F0F3         	lfsr	2,arp_send@field
 18641  001FAA  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 18642  001FAE  0E08               	movlw	8
 18643  001FB0                     u10211:
 18644  001FB0  CFDB FFEB          	movff	plusw2,plusw0
 18645  001FB4  06E8               	decf	wreg,f,c
 18646  001FB6  E2FC               	bc	u10211
 18647  001FB8  0100               	movlb	0	; () banked
 18648  001FBA  51AC               	movf	(arp_send@arp+5)& (0+255),w,b
 18649  001FBC  EC5D  F024         	call	_ethernetController_streamToTransmitBuffer
 18650                           
 18651                           ;arp.c: 167: ethernetController_streamToTransmitBuffer((arp.operation & 0xff00) >> 8, fi
      +                          eld);
 18652  001FC0  EE20  F0F3         	lfsr	2,arp_send@field
 18653  001FC4  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 18654  001FC8  0E08               	movlw	8
 18655  001FCA                     u10221:
 18656  001FCA  CFDB FFEB          	movff	plusw2,plusw0
 18657  001FCE  06E8               	decf	wreg,f,c
 18658  001FD0  E2FC               	bc	u10221
 18659  001FD2  0100               	movlb	0	; () banked
 18660  001FD4  51AE               	movf	(arp_send@arp+7)& (0+255),w,b
 18661  001FD6  EC5D  F024         	call	_ethernetController_streamToTransmitBuffer
 18662                           
 18663                           ;arp.c: 168: ethernetController_streamToTransmitBuffer(arp.operation & 0x00ff, field);
 18664  001FDA  EE20  F0F3         	lfsr	2,arp_send@field
 18665  001FDE  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 18666  001FE2  0E08               	movlw	8
 18667  001FE4                     u10231:
 18668  001FE4  CFDB FFEB          	movff	plusw2,plusw0
 18669  001FE8  06E8               	decf	wreg,f,c
 18670  001FEA  E2FC               	bc	u10231
 18671  001FEC  0100               	movlb	0	; () banked
 18672  001FEE  51AD               	movf	(arp_send@arp+6)& (0+255),w,b
 18673  001FF0  EC5D  F024         	call	_ethernetController_streamToTransmitBuffer
 18674                           
 18675                           ;arp.c: 169: for (uint8_t i = 0; i < arp.hlen; i++)
 18676  001FF4  0E00               	movlw	0
 18677  001FF6  0100               	movlb	0	; () banked
 18678  001FF8  6FCD               	movwf	arp_send@i& (0+255),b
 18679  001FFA  D01A               	goto	l965
 18680  001FFC                     
 18681                           ; BSR set to: 0
 18682                           ;arp.c: 170: ethernetController_streamToTransmitBuffer(arp.senderMACAddress.address[i], 
      +                          field);
 18683                           
 18684                           ; BSR set to: 0
 18685  001FFC  EE20  F0F3         	lfsr	2,arp_send@field
 18686  002000  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 18687  002004  0E08               	movlw	8
 18688  002006                     u10241:
 18689  002006  CFDB FFEB          	movff	plusw2,plusw0
 18690  00200A  06E8               	decf	wreg,f,c
 18691  00200C  E2FC               	bc	u10241
 18692  00200E  51CD               	movf	arp_send@i& (0+255),w,b
 18693  002010  0D01               	mullw	1
 18694  002012  0E08               	movlw	8
 18695  002014  26F3               	addwf	prodl,f,c
 18696  002016  0E00               	movlw	0
 18697  002018  22F4               	addwfc	prodh,f,c
 18698  00201A  0EA7               	movlw	low arp_send@arp
 18699  00201C  24F3               	addwf	prodl,w,c
 18700  00201E  6ED9               	movwf	fsr2l,c
 18701  002020  0E00               	movlw	high arp_send@arp
 18702  002022  20F4               	addwfc	prodh,w,c
 18703  002024  6EDA               	movwf	fsr2h,c
 18704  002026  50DF               	movf	indf2,w,c
 18705  002028  EC5D  F024         	call	_ethernetController_streamToTransmitBuffer
 18706  00202C  0100               	movlb	0	; () banked
 18707  00202E  2BCD               	incf	arp_send@i& (0+255),f,b
 18708  002030                     l965:
 18709                           
 18710                           ; BSR set to: 0
 18711                           
 18712                           ; BSR set to: 0
 18713  002030  51AB               	movf	(arp_send@arp+4)& (0+255),w,b
 18714  002032  5DCD               	subwf	arp_send@i& (0+255),w,b
 18715  002034  A0D8               	btfss	status,0,c
 18716  002036  D7E2               	goto	l966
 18717                           
 18718                           ; BSR set to: 0
 18719                           ;arp.c: 171: for (uint8_t i = 0; i < arp.plen; i++)
 18720                           
 18721                           ; BSR set to: 0
 18722  002038  0E00               	movlw	0
 18723  00203A  6FCE               	movwf	arp_send@i_3108& (0+255),b
 18724  00203C  D01A               	goto	l968
 18725  00203E                     
 18726                           ; BSR set to: 0
 18727                           ;arp.c: 172: ethernetController_streamToTransmitBuffer(arp.senderIPAddress.address[i], f
      +                          ield);
 18728                           
 18729                           ; BSR set to: 0
 18730  00203E  EE20  F0F3         	lfsr	2,arp_send@field
 18731  002042  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 18732  002046  0E08               	movlw	8
 18733  002048                     u10261:
 18734  002048  CFDB FFEB          	movff	plusw2,plusw0
 18735  00204C  06E8               	decf	wreg,f,c
 18736  00204E  E2FC               	bc	u10261
 18737  002050  51CE               	movf	arp_send@i_3108& (0+255),w,b
 18738  002052  0D01               	mullw	1
 18739  002054  0E0E               	movlw	14
 18740  002056  26F3               	addwf	prodl,f,c
 18741  002058  0E00               	movlw	0
 18742  00205A  22F4               	addwfc	prodh,f,c
 18743  00205C  0EA7               	movlw	low arp_send@arp
 18744  00205E  24F3               	addwf	prodl,w,c
 18745  002060  6ED9               	movwf	fsr2l,c
 18746  002062  0E00               	movlw	high arp_send@arp
 18747  002064  20F4               	addwfc	prodh,w,c
 18748  002066  6EDA               	movwf	fsr2h,c
 18749  002068  50DF               	movf	indf2,w,c
 18750  00206A  EC5D  F024         	call	_ethernetController_streamToTransmitBuffer
 18751  00206E  0100               	movlb	0	; () banked
 18752  002070  2BCE               	incf	arp_send@i_3108& (0+255),f,b
 18753  002072                     l968:
 18754                           
 18755                           ; BSR set to: 0
 18756                           
 18757                           ; BSR set to: 0
 18758  002072  51AC               	movf	(arp_send@arp+5)& (0+255),w,b
 18759  002074  5DCE               	subwf	arp_send@i_3108& (0+255),w,b
 18760  002076  A0D8               	btfss	status,0,c
 18761  002078  D7E2               	goto	l969
 18762                           
 18763                           ; BSR set to: 0
 18764                           ;arp.c: 173: for (uint8_t i = 0; i < arp.hlen; i++)
 18765                           
 18766                           ; BSR set to: 0
 18767  00207A  0E00               	movlw	0
 18768  00207C  6FCF               	movwf	arp_send@i_3109& (0+255),b
 18769  00207E  D01A               	goto	l971
 18770  002080                     
 18771                           ; BSR set to: 0
 18772                           ;arp.c: 174: ethernetController_streamToTransmitBuffer(arp.targetMACAddress.address[i], 
      +                          field);
 18773                           
 18774                           ; BSR set to: 0
 18775  002080  EE20  F0F3         	lfsr	2,arp_send@field
 18776  002084  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 18777  002088  0E08               	movlw	8
 18778  00208A                     u10281:
 18779  00208A  CFDB FFEB          	movff	plusw2,plusw0
 18780  00208E  06E8               	decf	wreg,f,c
 18781  002090  E2FC               	bc	u10281
 18782  002092  51CF               	movf	arp_send@i_3109& (0+255),w,b
 18783  002094  0D01               	mullw	1
 18784  002096  0E12               	movlw	18
 18785  002098  26F3               	addwf	prodl,f,c
 18786  00209A  0E00               	movlw	0
 18787  00209C  22F4               	addwfc	prodh,f,c
 18788  00209E  0EA7               	movlw	low arp_send@arp
 18789  0020A0  24F3               	addwf	prodl,w,c
 18790  0020A2  6ED9               	movwf	fsr2l,c
 18791  0020A4  0E00               	movlw	high arp_send@arp
 18792  0020A6  20F4               	addwfc	prodh,w,c
 18793  0020A8  6EDA               	movwf	fsr2h,c
 18794  0020AA  50DF               	movf	indf2,w,c
 18795  0020AC  EC5D  F024         	call	_ethernetController_streamToTransmitBuffer
 18796  0020B0  0100               	movlb	0	; () banked
 18797  0020B2  2BCF               	incf	arp_send@i_3109& (0+255),f,b
 18798  0020B4                     l971:
 18799                           
 18800                           ; BSR set to: 0
 18801                           
 18802                           ; BSR set to: 0
 18803  0020B4  51AB               	movf	(arp_send@arp+4)& (0+255),w,b
 18804  0020B6  5DCF               	subwf	arp_send@i_3109& (0+255),w,b
 18805  0020B8  A0D8               	btfss	status,0,c
 18806  0020BA  D7E2               	goto	l972
 18807                           
 18808                           ; BSR set to: 0
 18809                           ;arp.c: 175: for (uint8_t i = 0; i < arp.plen; i++)
 18810                           
 18811                           ; BSR set to: 0
 18812  0020BC  0E00               	movlw	0
 18813  0020BE  6FD0               	movwf	arp_send@i_3110& (0+255),b
 18814  0020C0  D01A               	goto	l974
 18815  0020C2                     
 18816                           ; BSR set to: 0
 18817                           ;arp.c: 176: ethernetController_streamToTransmitBuffer(arp.targetIPAddress.address[i], f
      +                          ield);
 18818                           
 18819                           ; BSR set to: 0
 18820  0020C2  EE20  F0F3         	lfsr	2,arp_send@field
 18821  0020C6  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 18822  0020CA  0E08               	movlw	8
 18823  0020CC                     u10301:
 18824  0020CC  CFDB FFEB          	movff	plusw2,plusw0
 18825  0020D0  06E8               	decf	wreg,f,c
 18826  0020D2  E2FC               	bc	u10301
 18827  0020D4  51D0               	movf	arp_send@i_3110& (0+255),w,b
 18828  0020D6  0D01               	mullw	1
 18829  0020D8  0E18               	movlw	24
 18830  0020DA  26F3               	addwf	prodl,f,c
 18831  0020DC  0E00               	movlw	0
 18832  0020DE  22F4               	addwfc	prodh,f,c
 18833  0020E0  0EA7               	movlw	low arp_send@arp
 18834  0020E2  24F3               	addwf	prodl,w,c
 18835  0020E4  6ED9               	movwf	fsr2l,c
 18836  0020E6  0E00               	movlw	high arp_send@arp
 18837  0020E8  20F4               	addwfc	prodh,w,c
 18838  0020EA  6EDA               	movwf	fsr2h,c
 18839  0020EC  50DF               	movf	indf2,w,c
 18840  0020EE  EC5D  F024         	call	_ethernetController_streamToTransmitBuffer
 18841  0020F2  0100               	movlb	0	; () banked
 18842  0020F4  2BD0               	incf	arp_send@i_3110& (0+255),f,b
 18843  0020F6                     l974:
 18844                           
 18845                           ; BSR set to: 0
 18846                           
 18847                           ; BSR set to: 0
 18848  0020F6  51AC               	movf	(arp_send@arp+5)& (0+255),w,b
 18849  0020F8  5DD0               	subwf	arp_send@i_3110& (0+255),w,b
 18850  0020FA  A0D8               	btfss	status,0,c
 18851  0020FC  D7E2               	goto	l975
 18852                           
 18853                           ; BSR set to: 0
 18854                           ;arp.c: 178: ethernetController_sendPacket(ethFrame.memory);
 18855                           
 18856                           ; BSR set to: 0
 18857  0020FE  EE20  F0E1         	lfsr	2,arp_send@ethFrame+16
 18858  002102  EE00  F072         	lfsr	0,ethernetController_sendPacket@field
 18859  002106  0E08               	movlw	8
 18860  002108                     u10321:
 18861  002108  CFDB FFEB          	movff	plusw2,plusw0
 18862  00210C  06E8               	decf	wreg,f,c
 18863  00210E  E2FC               	bc	u10321
 18864  002110  EC59  F02A         	call	_ethernetController_sendPacket	;wreg free
 18865  002114  0012               	return		;funcret
 18866  002116                     __end_of_arp_send:
 18867                           	opt stack 0
 18868                           tblptru	equ	0xFF8
 18869                           tblptrh	equ	0xFF7
 18870                           tblptrl	equ	0xFF6
 18871                           tablat	equ	0xFF5
 18872                           prodh	equ	0xFF4
 18873                           prodl	equ	0xFF3
 18874                           intcon	equ	0xFF2
 18875                           intcon3	equ	0xFF0
 18876                           indf0	equ	0xFEF
 18877                           postinc0	equ	0xFEE
 18878                           plusw0	equ	0xFEB
 18879                           fsr0h	equ	0xFEA
 18880                           fsr0l	equ	0xFE9
 18881                           wreg	equ	0xFE8
 18882                           indf1	equ	0xFE7
 18883                           postinc1	equ	0xFE6
 18884                           postdec1	equ	0xFE5
 18885                           plusw1	equ	0xFE3
 18886                           fsr1h	equ	0xFE2
 18887                           fsr1l	equ	0xFE1
 18888                           indf2	equ	0xFDF
 18889                           postinc2	equ	0xFDE
 18890                           postdec2	equ	0xFDD
 18891                           plusw2	equ	0xFDB
 18892                           fsr2h	equ	0xFDA
 18893                           fsr2l	equ	0xFD9
 18894                           status	equ	0xFD8
 18895                           
 18896 ;; *************** function _mac_setToBroadcast *****************
 18897 ;; Defined at:
 18898 ;;		line 26 in file "src/eth/mac.c"
 18899 ;; Parameters:    Size  Location     Type
 18900 ;;  mac             2    0[BANK0 ] PTR struct macaddress
 18901 ;;		 -> arp_send@destination(6), 
 18902 ;; Auto vars:     Size  Location     Type
 18903 ;;  i               1    2[BANK0 ] unsigned char 
 18904 ;; Return value:  Size  Location     Type
 18905 ;;                  1    wreg      void 
 18906 ;; Registers used:
 18907 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 18908 ;; Tracked objects:
 18909 ;;		On entry : 0/0
 18910 ;;		On exit  : 0/0
 18911 ;;		Unchanged: 0/0
 18912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18913 ;;      Params:         0       2       0       0       0       0       0       0       0
 18914 ;;      Locals:         0       1       0       0       0       0       0       0       0
 18915 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18916 ;;      Totals:         0       3       0       0       0       0       0       0       0
 18917 ;;Total ram usage:        3 bytes
 18918 ;; Hardware stack levels used:    1
 18919 ;; Hardware stack levels required when called:    4
 18920 ;; This function calls:
 18921 ;;		Nothing
 18922 ;; This function is called by:
 18923 ;;		_arp_send
 18924 ;; This function uses a non-reentrant model
 18925 ;;
 18926                           
 18927                           	psect	text72
 18928  00554E                     __ptext72:
 18929                           	opt stack 0
 18930  00554E                     _mac_setToBroadcast:
 18931                           	opt stack 22
 18932                           
 18933                           ;mac.c: 27: for (uint8_t i = 0; i < 6; i++)
 18934                           
 18935                           ;incstack = 0
 18936  00554E  0E00               	movlw	0
 18937  005550  0100               	movlb	0	; () banked
 18938  005552  6F62               	movwf	mac_setToBroadcast@i& (0+255),b
 18939  005554                     l8767:
 18940                           
 18941                           ; BSR set to: 0
 18942  005554  0E05               	movlw	5
 18943  005556  6562               	cpfsgt	mac_setToBroadcast@i& (0+255),b
 18944  005558  D001               	goto	l379
 18945  00555A  0012               	return	
 18946  00555C                     l379:
 18947                           
 18948                           ; BSR set to: 0
 18949                           ;mac.c: 28: mac->address[i] = 0xff;
 18950                           
 18951                           ; BSR set to: 0
 18952  00555C  5162               	movf	mac_setToBroadcast@i& (0+255),w,b
 18953  00555E  0D01               	mullw	1
 18954  005560  50F3               	movf	prodl,w,c
 18955  005562  2560               	addwf	mac_setToBroadcast@mac& (0+255),w,b
 18956  005564  6ED9               	movwf	fsr2l,c
 18957  005566  50F4               	movf	prodh,w,c
 18958  005568  2161               	addwfc	(mac_setToBroadcast@mac+1)& (0+255),w,b
 18959  00556A  6EDA               	movwf	fsr2h,c
 18960  00556C  0EFF               	movlw	255
 18961  00556E  6EDF               	movwf	indf2,c
 18962                           
 18963                           ; BSR set to: 0
 18964  005570  2B62               	incf	mac_setToBroadcast@i& (0+255),f,b
 18965  005572  D7F0               	goto	l8767
 18966  005574                     __end_of_mac_setToBroadcast:
 18967                           	opt stack 0
 18968                           tblptru	equ	0xFF8
 18969                           tblptrh	equ	0xFF7
 18970                           tblptrl	equ	0xFF6
 18971                           tablat	equ	0xFF5
 18972                           prodh	equ	0xFF4
 18973                           prodl	equ	0xFF3
 18974                           intcon	equ	0xFF2
 18975                           intcon3	equ	0xFF0
 18976                           indf0	equ	0xFEF
 18977                           postinc0	equ	0xFEE
 18978                           plusw0	equ	0xFEB
 18979                           fsr0h	equ	0xFEA
 18980                           fsr0l	equ	0xFE9
 18981                           wreg	equ	0xFE8
 18982                           indf1	equ	0xFE7
 18983                           postinc1	equ	0xFE6
 18984                           postdec1	equ	0xFE5
 18985                           plusw1	equ	0xFE3
 18986                           fsr1h	equ	0xFE2
 18987                           fsr1l	equ	0xFE1
 18988                           indf2	equ	0xFDF
 18989                           postinc2	equ	0xFDE
 18990                           postdec2	equ	0xFDD
 18991                           plusw2	equ	0xFDB
 18992                           fsr2h	equ	0xFDA
 18993                           fsr2l	equ	0xFD9
 18994                           status	equ	0xFD8
 18995                           
 18996 ;; *************** function _ethernet_txFrameRequest *****************
 18997 ;; Defined at:
 18998 ;;		line 30 in file "src/eth/ethernet.c"
 18999 ;; Parameters:    Size  Location     Type
 19000 ;;  frame           2   66[BANK0 ] PTR struct ethernetFrame
 19001 ;;		 -> arp_send@ethFrame(34), stack(123), 
 19002 ;; Auto vars:     Size  Location     Type
 19003 ;;  err             3   68[BANK0 ] struct error
 19004 ;; Return value:  Size  Location     Type
 19005 ;;                  3   66[BANK0 ] struct error
 19006 ;; Registers used:
 19007 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19008 ;; Tracked objects:
 19009 ;;		On entry : 0/0
 19010 ;;		On exit  : 0/0
 19011 ;;		Unchanged: 0/0
 19012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19013 ;;      Params:         0       2       0       0       0       0       0       0       0
 19014 ;;      Locals:         0       3       0       0       0       0       0       0       0
 19015 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19016 ;;      Totals:         0       5       0       0       0       0       0       0       0
 19017 ;;Total ram usage:        5 bytes
 19018 ;; Hardware stack levels used:    1
 19019 ;; Hardware stack levels required when called:    8
 19020 ;; This function calls:
 19021 ;;		_ethernetController_writeDestinationMACAddress
 19022 ;;		_ethernetController_writeEtherTypeFieldToBuffer
 19023 ;;		_memory_txFrameRequest
 19024 ;; This function is called by:
 19025 ;;		_arp_send
 19026 ;;		_ipv4_txFrameRequest
 19027 ;; This function uses a non-reentrant model
 19028 ;;
 19029                           
 19030                           	psect	text73
 19031  003E3E                     __ptext73:
 19032                           	opt stack 0
 19033  003E3E                     _ethernet_txFrameRequest:
 19034                           	opt stack 21
 19035                           
 19036                           ;ethernet.c: 32: error_t err;
 19037                           ;ethernet.c: 33: err.module = ERROR_MODULE_ETHERNET;
 19038                           
 19039                           ; BSR set to: 0
 19040                           ;incstack = 0
 19041  003E3E  0E02               	movlw	2
 19042  003E40  0100               	movlb	0	; () banked
 19043  003E42  6FA4               	movwf	ethernet_txFrameRequest@err& (0+255),b
 19044                           
 19045                           ;ethernet.c: 34: err.code = (uint16_t)0;
 19046  003E44  0E00               	movlw	0
 19047  003E46  6FA6               	movwf	(ethernet_txFrameRequest@err+2)& (0+255),b
 19048  003E48  0E00               	movlw	0
 19049  003E4A  6FA5               	movwf	(ethernet_txFrameRequest@err+1)& (0+255),b
 19050                           
 19051                           ; BSR set to: 0
 19052                           ;ethernet.c: 35: frame->memory = memory_txFrameRequest(frame->length);
 19053  003E4C  C0A2  FFD9         	movff	ethernet_txFrameRequest@frame,fsr2l
 19054  003E50  C0A3  FFDA         	movff	ethernet_txFrameRequest@frame+1,fsr2h
 19055  003E54  CFDE F084          	movff	postinc2,memory_txFrameRequest@length
 19056  003E58  CFDD F085          	movff	postdec2,memory_txFrameRequest@length+1
 19057  003E5C  ECFF  F002         	call	_memory_txFrameRequest	;wreg free
 19058  003E60  0100               	movlb	0	; () banked
 19059  003E62  EE20 F010          	lfsr	2,16
 19060  003E66  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 19061  003E68  26D9               	addwf	fsr2l,f,c
 19062  003E6A  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 19063  003E6C  22DA               	addwfc	fsr2h,f,c
 19064  003E6E  0E08               	movlw	8
 19065  003E70                     u9551:
 19066  003E70  CFEB FFDB          	movff	plusw0,plusw2
 19067  003E74  06E8               	decf	wreg,f,c
 19068  003E76  E2FC               	bc	u9551
 19069                           
 19070                           ; BSR set to: 0
 19071                           ;ethernet.c: 37: if (frame->memory.fOutOfMemory) {
 19072  003E78  EE20 F017          	lfsr	2,23
 19073  003E7C  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 19074  003E7E  26D9               	addwf	fsr2l,f,c
 19075  003E80  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 19076  003E82  22DA               	addwfc	fsr2h,f,c
 19077  003E84  50DF               	movf	indf2,w,c
 19078  003E86  B4D8               	btfsc	status,2,c
 19079  003E88  D007               	goto	l359
 19080                           
 19081                           ; BSR set to: 0
 19082                           ;ethernet.c: 39: err.module = ERROR_MODULE_MEMORY;
 19083  003E8A  0E00               	movlw	0
 19084  003E8C  6FA4               	movwf	ethernet_txFrameRequest@err& (0+255),b
 19085                           
 19086                           ;ethernet.c: 40: err.code = ERROR_MEMORY_OUT_OF_MEMORY;
 19087  003E8E  0E00               	movlw	0
 19088  003E90  6FA6               	movwf	(ethernet_txFrameRequest@err+2)& (0+255),b
 19089  003E92  0E65               	movlw	101
 19090  003E94  6FA5               	movwf	(ethernet_txFrameRequest@err+1)& (0+255),b
 19091                           
 19092                           ; BSR set to: 0
 19093                           ;ethernet.c: 41: return err;
 19094                           ;	Return value of _ethernet_txFrameRequest is never used
 19095  003E96  0012               	return	
 19096  003E98                     l359:
 19097                           
 19098                           ; BSR set to: 0
 19099                           ;ethernet.c: 42: }
 19100                           ;ethernet.c: 43: if (!frame->memory.fIsAssigned) {
 19101                           
 19102                           ; BSR set to: 0
 19103  003E98  EE20 F016          	lfsr	2,22
 19104  003E9C  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 19105  003E9E  26D9               	addwf	fsr2l,f,c
 19106  003EA0  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 19107  003EA2  22DA               	addwfc	fsr2h,f,c
 19108  003EA4  50DF               	movf	indf2,w,c
 19109  003EA6  A4D8               	btfss	status,2,c
 19110  003EA8  D007               	goto	l361
 19111                           
 19112                           ; BSR set to: 0
 19113                           ;ethernet.c: 45: err.module = ERROR_MODULE_MEMORY;
 19114  003EAA  0E00               	movlw	0
 19115  003EAC  6FA4               	movwf	ethernet_txFrameRequest@err& (0+255),b
 19116                           
 19117                           ;ethernet.c: 46: err.code = ERROR_MEMORY_UNKNOWN;
 19118  003EAE  0E00               	movlw	0
 19119  003EB0  6FA6               	movwf	(ethernet_txFrameRequest@err+2)& (0+255),b
 19120  003EB2  0EC7               	movlw	199
 19121  003EB4  6FA5               	movwf	(ethernet_txFrameRequest@err+1)& (0+255),b
 19122                           
 19123                           ; BSR set to: 0
 19124                           ;ethernet.c: 47: return err;
 19125                           ;	Return value of _ethernet_txFrameRequest is never used
 19126  003EB6  0012               	return	
 19127  003EB8                     l361:
 19128                           
 19129                           ; BSR set to: 0
 19130                           ;ethernet.c: 48: }
 19131                           ;ethernet.c: 50: ethernetController_writeDestinationMACAddress(frame->destination, frame
      +                          ->memory);
 19132                           
 19133                           ; BSR set to: 0
 19134  003EB8  EE20 F008          	lfsr	2,8
 19135  003EBC  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 19136  003EBE  26D9               	addwf	fsr2l,f,c
 19137  003EC0  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 19138  003EC2  22DA               	addwfc	fsr2h,f,c
 19139  003EC4  EE00  F06F         	lfsr	0,ethernetController_writeDestinationMACAddress@addr
 19140  003EC8  0E05               	movlw	5
 19141  003ECA                     u9581:
 19142  003ECA  CFDB FFEB          	movff	plusw2,plusw0
 19143  003ECE  06E8               	decf	wreg,f,c
 19144  003ED0  E2FC               	bc	u9581
 19145  003ED2  EE20 F010          	lfsr	2,16
 19146  003ED6  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 19147  003ED8  26D9               	addwf	fsr2l,f,c
 19148  003EDA  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 19149  003EDC  22DA               	addwfc	fsr2h,f,c
 19150  003EDE  EE00  F075         	lfsr	0,ethernetController_writeDestinationMACAddress@field
 19151  003EE2  0E08               	movlw	8
 19152  003EE4                     u9591:
 19153  003EE4  CFDB FFEB          	movff	plusw2,plusw0
 19154  003EE8  06E8               	decf	wreg,f,c
 19155  003EEA  E2FC               	bc	u9591
 19156  003EEC  ECA1  F023         	call	_ethernetController_writeDestinationMACAddress	;wreg free
 19157                           
 19158                           ;ethernet.c: 51: ethernetController_writeEtherTypeFieldToBuffer(frame->ethertype, frame-
      +                          >memory);
 19159  003EF0  0100               	movlb	0	; () banked
 19160  003EF2  EE20 F00E          	lfsr	2,14
 19161  003EF6  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 19162  003EF8  26D9               	addwf	fsr2l,f,c
 19163  003EFA  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 19164  003EFC  22DA               	addwfc	fsr2h,f,c
 19165  003EFE  CFDE F06F          	movff	postinc2,ethernetController_writeEtherTypeFieldToBuffer@ethtype
 19166  003F02  CFDD F070          	movff	postdec2,ethernetController_writeEtherTypeFieldToBuffer@ethtype+1
 19167  003F06  EE20 F010          	lfsr	2,16
 19168  003F0A  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 19169  003F0C  26D9               	addwf	fsr2l,f,c
 19170  003F0E  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 19171  003F10  22DA               	addwfc	fsr2h,f,c
 19172  003F12  EE00  F071         	lfsr	0,ethernetController_writeEtherTypeFieldToBuffer@field
 19173  003F16  0E08               	movlw	8
 19174  003F18                     u9601:
 19175  003F18  CFDB FFEB          	movff	plusw2,plusw0
 19176  003F1C  06E8               	decf	wreg,f,c
 19177  003F1E  E2FC               	bc	u9601
 19178  003F20  EC80  F027         	call	_ethernetController_writeEtherTypeFieldToBuffer	;wreg free
 19179  003F24  0012               	return	
 19180  003F26                     __end_of_ethernet_txFrameRequest:
 19181                           	opt stack 0
 19182                           tblptru	equ	0xFF8
 19183                           tblptrh	equ	0xFF7
 19184                           tblptrl	equ	0xFF6
 19185                           tablat	equ	0xFF5
 19186                           prodh	equ	0xFF4
 19187                           prodl	equ	0xFF3
 19188                           intcon	equ	0xFF2
 19189                           intcon3	equ	0xFF0
 19190                           indf0	equ	0xFEF
 19191                           postinc0	equ	0xFEE
 19192                           plusw0	equ	0xFEB
 19193                           fsr0h	equ	0xFEA
 19194                           fsr0l	equ	0xFE9
 19195                           wreg	equ	0xFE8
 19196                           indf1	equ	0xFE7
 19197                           postinc1	equ	0xFE6
 19198                           postdec1	equ	0xFE5
 19199                           plusw1	equ	0xFE3
 19200                           fsr1h	equ	0xFE2
 19201                           fsr1l	equ	0xFE1
 19202                           indf2	equ	0xFDF
 19203                           postinc2	equ	0xFDE
 19204                           postdec2	equ	0xFDD
 19205                           plusw2	equ	0xFDB
 19206                           fsr2h	equ	0xFDA
 19207                           fsr2l	equ	0xFD9
 19208                           status	equ	0xFD8
 19209                           
 19210 ;; *************** function _memory_txFrameRequest *****************
 19211 ;; Defined at:
 19212 ;;		line 133 in file "src/mem/memoryController.c"
 19213 ;; Parameters:    Size  Location     Type
 19214 ;;  length          2   36[BANK0 ] unsigned int 
 19215 ;; Auto vars:     Size  Location     Type
 19216 ;;  i               1   54[BANK0 ] unsigned char 
 19217 ;;  i               1   55[BANK0 ] unsigned char 
 19218 ;;  fNoOverlapMa    1   53[BANK0 ] unsigned char 
 19219 ;;  field           9   56[BANK0 ] struct memoryField
 19220 ;;  freeIndex       1   65[BANK0 ] unsigned char 
 19221 ;; Return value:  Size  Location     Type
 19222 ;;                  9   36[BANK0 ] struct memoryField
 19223 ;; Registers used:
 19224 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19225 ;; Tracked objects:
 19226 ;;		On entry : 0/0
 19227 ;;		On exit  : 0/0
 19228 ;;		Unchanged: 0/0
 19229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19230 ;;      Params:         0       9       0       0       0       0       0       0       0
 19231 ;;      Locals:         0      15       0       0       0       0       0       0       0
 19232 ;;      Temps:          0       6       0       0       0       0       0       0       0
 19233 ;;      Totals:         0      30       0       0       0       0       0       0       0
 19234 ;;Total ram usage:       30 bytes
 19235 ;; Hardware stack levels used:    1
 19236 ;; Hardware stack levels required when called:    6
 19237 ;; This function calls:
 19238 ;;		___wmul
 19239 ;;		_checkForOverlap
 19240 ;;		_entireMemoryEmpty
 19241 ;;		_entireMemoryFull
 19242 ;; This function is called by:
 19243 ;;		_ethernet_txFrameRequest
 19244 ;; This function uses a non-reentrant model
 19245 ;;
 19246                           
 19247                           	psect	text74
 19248  0005FE                     __ptext74:
 19249                           	opt stack 0
 19250  0005FE                     _memory_txFrameRequest:
 19251                           	opt stack 22
 19252                           
 19253                           ;memoryController.c: 134: memoryField_t field;
 19254                           ;memoryController.c: 135: uint8_t freeIndex = 0;
 19255                           
 19256                           ;incstack = 0
 19257  0005FE  0E00               	movlw	0
 19258  000600  0100               	movlb	0	; () banked
 19259  000602  6FA1               	movwf	memory_txFrameRequest@freeIndex& (0+255),b
 19260                           
 19261                           ; BSR set to: 0
 19262                           ;memoryController.c: 137: if (length == 0) {
 19263  000604  5184               	movf	memory_txFrameRequest@length& (0+255),w,b
 19264  000606  1185               	iorwf	(memory_txFrameRequest@length+1)& (0+255),w,b
 19265  000608  A4D8               	btfss	status,2,c
 19266  00060A  D00C               	goto	l462
 19267                           
 19268                           ; BSR set to: 0
 19269                           ;memoryController.c: 138: field.fOutOfMemory = 1;
 19270  00060C  0E01               	movlw	1
 19271  00060E  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 19272                           
 19273                           ; BSR set to: 0
 19274                           ;memoryController.c: 139: return field;
 19275  000610  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 19276  000614  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 19277  000618  0E08               	movlw	8
 19278  00061A                     u9101:
 19279  00061A  CFDB FFEB          	movff	plusw2,plusw0
 19280  00061E  06E8               	decf	wreg,f,c
 19281  000620  E2FC               	bc	u9101
 19282                           
 19283                           ; BSR set to: 0
 19284  000622  0012               	return	
 19285  000624                     l462:
 19286                           
 19287                           ; BSR set to: 0
 19288                           ;memoryController.c: 140: }
 19289                           ;memoryController.c: 142: if (entireMemoryFull()) {
 19290                           
 19291                           ; BSR set to: 0
 19292  000624  ECF8  F028         	call	_entireMemoryFull	;wreg free
 19293  000628  A0D8               	btfss	status,0,c
 19294  00062A  D00D               	goto	l464
 19295                           
 19296                           ;memoryController.c: 143: field.fOutOfMemory = 1;
 19297  00062C  0E01               	movlw	1
 19298  00062E  0100               	movlb	0	; () banked
 19299  000630  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 19300                           
 19301                           ; BSR set to: 0
 19302                           ;memoryController.c: 144: return field;
 19303  000632  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 19304  000636  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 19305  00063A  0E08               	movlw	8
 19306  00063C                     u9121:
 19307  00063C  CFDB FFEB          	movff	plusw2,plusw0
 19308  000640  06E8               	decf	wreg,f,c
 19309  000642  E2FC               	bc	u9121
 19310                           
 19311                           ; BSR set to: 0
 19312  000644  0012               	return	
 19313  000646                     l464:
 19314                           
 19315                           ;memoryController.c: 145: }
 19316                           ;memoryController.c: 146: if (entireMemoryEmpty()) {
 19317                           
 19318                           ; BSR set to: 0
 19319  000646  EC14  F029         	call	_entireMemoryEmpty	;wreg free
 19320  00064A  A0D8               	btfss	status,0,c
 19321  00064C  D238               	goto	l489
 19322                           
 19323                           ;memoryController.c: 148: if ((0x0000 + length) > 0x3000 - 1) {
 19324  00064E  0E30               	movlw	48
 19325  000650  0100               	movlb	0	; () banked
 19326  000652  5D85               	subwf	(memory_txFrameRequest@length+1)& (0+255),w,b
 19327  000654  A0D8               	btfss	status,0,c
 19328  000656  D00C               	goto	l466
 19329                           
 19330                           ; BSR set to: 0
 19331                           ;memoryController.c: 149: field.fOutOfMemory = 1;
 19332  000658  0E01               	movlw	1
 19333  00065A  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 19334                           
 19335                           ; BSR set to: 0
 19336                           ;memoryController.c: 150: return field;
 19337  00065C  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 19338  000660  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 19339  000664  0E08               	movlw	8
 19340  000666                     u9151:
 19341  000666  CFDB FFEB          	movff	plusw2,plusw0
 19342  00066A  06E8               	decf	wreg,f,c
 19343  00066C  E2FC               	bc	u9151
 19344                           
 19345                           ; BSR set to: 0
 19346  00066E  0012               	return	
 19347  000670                     l466:
 19348                           
 19349                           ; BSR set to: 0
 19350                           ;memoryController.c: 152: occupiedMemory[0].start = 0x0000;
 19351                           
 19352                           ; BSR set to: 0
 19353  000670  0E00               	movlw	0
 19354  000672  0102               	movlb	2	; () banked
 19355  000674  6F01               	movwf	(_occupiedMemory+1)& (0+255),b
 19356  000676  0E00               	movlw	0
 19357  000678  6F00               	movwf	_occupiedMemory& (0+255),b
 19358                           
 19359                           ; BSR set to: 2
 19360                           ;memoryController.c: 153: occupiedMemory[0].end = 0x0000 + length;
 19361  00067A  C084  F202         	movff	memory_txFrameRequest@length,_occupiedMemory+2
 19362  00067E  C085  F203         	movff	memory_txFrameRequest@length+1,_occupiedMemory+3
 19363                           
 19364                           ; BSR set to: 2
 19365                           ;memoryController.c: 154: occupiedMemory[0].length = length;
 19366  000682  C084  F204         	movff	memory_txFrameRequest@length,_occupiedMemory+4
 19367  000686  C085  F205         	movff	memory_txFrameRequest@length+1,_occupiedMemory+5
 19368                           
 19369                           ;memoryController.c: 155: occupiedMemory[0].fIsAssigned = 1;
 19370  00068A  0E01               	movlw	1
 19371  00068C  6F06               	movwf	(_occupiedMemory+6)& (0+255),b
 19372                           
 19373                           ;memoryController.c: 156: occupiedMemory[0].index = 0;
 19374  00068E  0E00               	movlw	0
 19375  000690  6F08               	movwf	(_occupiedMemory+8)& (0+255),b
 19376                           
 19377                           ; BSR set to: 2
 19378                           ;memoryController.c: 157: return occupiedMemory[0];
 19379  000692  EE22  F000         	lfsr	2,_occupiedMemory
 19380  000696  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 19381  00069A  0E08               	movlw	8
 19382  00069C                     u9161:
 19383  00069C  CFDB FFEB          	movff	plusw2,plusw0
 19384  0006A0  06E8               	decf	wreg,f,c
 19385  0006A2  E2FC               	bc	u9161
 19386                           
 19387                           ; BSR set to: 2
 19388  0006A4  0012               	return	
 19389  0006A6                     
 19390                           ;memoryController.c: 163: if (!occupiedMemory[freeIndex].fIsAssigned) {
 19391                           
 19392                           ; BSR set to: 2
 19393  0006A6  0100               	movlb	0	; () banked
 19394  0006A8  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19395  0006AA  0D09               	mullw	9
 19396  0006AC  0E06               	movlw	6
 19397  0006AE  26F3               	addwf	prodl,f,c
 19398  0006B0  0E00               	movlw	0
 19399  0006B2  22F4               	addwfc	prodh,f,c
 19400  0006B4  0E00               	movlw	low _occupiedMemory
 19401  0006B6  24F3               	addwf	prodl,w,c
 19402  0006B8  6ED9               	movwf	fsr2l,c
 19403  0006BA  0E02               	movlw	high _occupiedMemory
 19404  0006BC  20F4               	addwfc	prodh,w,c
 19405  0006BE  6EDA               	movwf	fsr2h,c
 19406  0006C0  50DF               	movf	indf2,w,c
 19407  0006C2  A4D8               	btfss	status,2,c
 19408  0006C4  D1EB               	goto	l488
 19409                           
 19410                           ; BSR set to: 0
 19411                           ;memoryController.c: 167: occupiedMemory[freeIndex].start = occupiedMemory[(freeIndex ==
      +                           0) ? 8 - 1 : freeIndex - 1].end + 1;
 19412  0006C6  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19413  0006C8  B4D8               	btfsc	status,2,c
 19414  0006CA  D007               	goto	l472
 19415                           
 19416                           ; BSR set to: 0
 19417  0006CC  0EFF               	movlw	255
 19418  0006CE  25A1               	addwf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19419  0006D0  6F93               	movwf	_memory_txFrameRequest$1174& (0+255),b
 19420  0006D2  6B94               	clrf	(_memory_txFrameRequest$1174+1)& (0+255),b
 19421  0006D4  0EFF               	movlw	255
 19422  0006D6  2394               	addwfc	(_memory_txFrameRequest$1174+1)& (0+255),f,b
 19423  0006D8  D004               	goto	l474
 19424  0006DA                     l472:
 19425                           
 19426                           ; BSR set to: 0
 19427                           
 19428                           ; BSR set to: 0
 19429  0006DA  0E00               	movlw	0
 19430  0006DC  6F94               	movwf	(_memory_txFrameRequest$1174+1)& (0+255),b
 19431  0006DE  0E07               	movlw	7
 19432  0006E0  6F93               	movwf	_memory_txFrameRequest$1174& (0+255),b
 19433  0006E2                     l474:
 19434                           
 19435                           ; BSR set to: 0
 19436                           
 19437                           ; BSR set to: 0
 19438  0006E2  C093  F060         	movff	_memory_txFrameRequest$1174,___wmul@multiplier
 19439  0006E6  C094  F061         	movff	_memory_txFrameRequest$1174+1,___wmul@multiplier+1
 19440  0006EA  0E00               	movlw	0
 19441  0006EC  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19442  0006EE  0E09               	movlw	9
 19443  0006F0  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19444  0006F2  EC45  F02A         	call	___wmul	;wreg free
 19445  0006F6  0E02               	movlw	2
 19446  0006F8  0100               	movlb	0	; () banked
 19447  0006FA  2760               	addwf	?___wmul& (0+255),f,b
 19448  0006FC  0E00               	movlw	0
 19449  0006FE  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 19450  000700  0E00               	movlw	low _occupiedMemory
 19451  000702  2560               	addwf	?___wmul& (0+255),w,b
 19452  000704  6ED9               	movwf	fsr2l,c
 19453  000706  0E02               	movlw	high _occupiedMemory
 19454  000708  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 19455  00070A  6EDA               	movwf	fsr2h,c
 19456  00070C  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 19457  000710  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 19458  000714  0E01               	movlw	1
 19459  000716  278D               	addwf	??_memory_txFrameRequest& (0+255),f,b
 19460  000718  0E00               	movlw	0
 19461  00071A  238E               	addwfc	(??_memory_txFrameRequest+1)& (0+255),f,b
 19462  00071C  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19463  00071E  0D09               	mullw	9
 19464  000720  0E00               	movlw	low _occupiedMemory
 19465  000722  24F3               	addwf	prodl,w,c
 19466  000724  6ED9               	movwf	fsr2l,c
 19467  000726  0E02               	movlw	high _occupiedMemory
 19468  000728  20F4               	addwfc	prodh,w,c
 19469  00072A  6EDA               	movwf	fsr2h,c
 19470  00072C  C08D  FFDE         	movff	??_memory_txFrameRequest,postinc2
 19471  000730  C08E  FFDD         	movff	??_memory_txFrameRequest+1,postdec2
 19472                           
 19473                           ; BSR set to: 0
 19474                           ;memoryController.c: 168: if (occupiedMemory[freeIndex].start + length > 0x3000) {
 19475  000734  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19476  000736  0D09               	mullw	9
 19477  000738  0E00               	movlw	low _occupiedMemory
 19478  00073A  24F3               	addwf	prodl,w,c
 19479  00073C  6ED9               	movwf	fsr2l,c
 19480  00073E  0E02               	movlw	high _occupiedMemory
 19481  000740  20F4               	addwfc	prodh,w,c
 19482  000742  6EDA               	movwf	fsr2h,c
 19483  000744  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 19484  000748  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 19485  00074C  5184               	movf	memory_txFrameRequest@length& (0+255),w,b
 19486  00074E  278D               	addwf	??_memory_txFrameRequest& (0+255),f,b
 19487  000750  5185               	movf	(memory_txFrameRequest@length+1)& (0+255),w,b
 19488  000752  238E               	addwfc	(??_memory_txFrameRequest+1)& (0+255),f,b
 19489  000754  058D               	decf	??_memory_txFrameRequest& (0+255),w,b
 19490  000756  0E30               	movlw	48
 19491  000758  598E               	subwfb	(??_memory_txFrameRequest+1)& (0+255),w,b
 19492  00075A  A0D8               	btfss	status,0,c
 19493  00075C  D0CF               	goto	l476
 19494                           
 19495                           ; BSR set to: 0
 19496                           ;memoryController.c: 169: if (freeIndex == 8 - 1 && !occupiedMemory[0].fIsAssigned) {
 19497  00075E  0E07               	movlw	7
 19498  000760  19A1               	xorwf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19499  000762  A4D8               	btfss	status,2,c
 19500  000764  D0CB               	goto	l476
 19501                           
 19502                           ; BSR set to: 0
 19503  000766  0102               	movlb	2	; () banked
 19504  000768  5106               	movf	(_occupiedMemory+6)& (0+255),w,b
 19505  00076A  A4D8               	btfss	status,2,c
 19506  00076C  D0C7               	goto	l476
 19507                           
 19508                           ; BSR set to: 2
 19509                           ;memoryController.c: 170: occupiedMemory[freeIndex].length = length;
 19510  00076E  0100               	movlb	0	; () banked
 19511  000770  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19512  000772  0D09               	mullw	9
 19513  000774  0E04               	movlw	4
 19514  000776  26F3               	addwf	prodl,f,c
 19515  000778  0E00               	movlw	0
 19516  00077A  22F4               	addwfc	prodh,f,c
 19517  00077C  0E00               	movlw	low _occupiedMemory
 19518  00077E  24F3               	addwf	prodl,w,c
 19519  000780  6ED9               	movwf	fsr2l,c
 19520  000782  0E02               	movlw	high _occupiedMemory
 19521  000784  20F4               	addwfc	prodh,w,c
 19522  000786  6EDA               	movwf	fsr2h,c
 19523  000788  C084  FFDE         	movff	memory_txFrameRequest@length,postinc2
 19524  00078C  C085  FFDD         	movff	memory_txFrameRequest@length+1,postdec2
 19525                           
 19526                           ;memoryController.c: 171: occupiedMemory[freeIndex].end = occupiedMemory[freeIndex].leng
      +                          th - ((0x3000 - 1) - occupiedMemory[freeIndex].start);
 19527  000790  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19528  000792  0D09               	mullw	9
 19529  000794  0E04               	movlw	4
 19530  000796  26F3               	addwf	prodl,f,c
 19531  000798  0E00               	movlw	0
 19532  00079A  22F4               	addwfc	prodh,f,c
 19533  00079C  0E00               	movlw	low _occupiedMemory
 19534  00079E  24F3               	addwf	prodl,w,c
 19535  0007A0  6ED9               	movwf	fsr2l,c
 19536  0007A2  0E02               	movlw	high _occupiedMemory
 19537  0007A4  20F4               	addwfc	prodh,w,c
 19538  0007A6  6EDA               	movwf	fsr2h,c
 19539  0007A8  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 19540  0007AC  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 19541  0007B0  0EFF               	movlw	255
 19542  0007B2  6F8F               	movwf	(??_memory_txFrameRequest+2)& (0+255),b
 19543  0007B4  0E2F               	movlw	47
 19544  0007B6  6F90               	movwf	(??_memory_txFrameRequest+3)& (0+255),b
 19545  0007B8  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19546  0007BA  0D09               	mullw	9
 19547  0007BC  0E00               	movlw	low _occupiedMemory
 19548  0007BE  24F3               	addwf	prodl,w,c
 19549  0007C0  6ED9               	movwf	fsr2l,c
 19550  0007C2  0E02               	movlw	high _occupiedMemory
 19551  0007C4  20F4               	addwfc	prodh,w,c
 19552  0007C6  6EDA               	movwf	fsr2h,c
 19553  0007C8  CFDE F091          	movff	postinc2,??_memory_txFrameRequest+4
 19554  0007CC  CFDD F092          	movff	postdec2,??_memory_txFrameRequest+5
 19555  0007D0  1F91               	comf	(??_memory_txFrameRequest+4)& (0+255),f,b
 19556  0007D2  1F92               	comf	(??_memory_txFrameRequest+5)& (0+255),f,b
 19557  0007D4  4B91               	infsnz	(??_memory_txFrameRequest+4)& (0+255),f,b
 19558  0007D6  2B92               	incf	(??_memory_txFrameRequest+5)& (0+255),f,b
 19559  0007D8  518F               	movf	(??_memory_txFrameRequest+2)& (0+255),w,b
 19560  0007DA  2791               	addwf	(??_memory_txFrameRequest+4)& (0+255),f,b
 19561  0007DC  5190               	movf	(??_memory_txFrameRequest+3)& (0+255),w,b
 19562  0007DE  2392               	addwfc	(??_memory_txFrameRequest+5)& (0+255),f,b
 19563  0007E0  1F91               	comf	(??_memory_txFrameRequest+4)& (0+255),f,b
 19564  0007E2  1F92               	comf	(??_memory_txFrameRequest+5)& (0+255),f,b
 19565  0007E4  4B91               	infsnz	(??_memory_txFrameRequest+4)& (0+255),f,b
 19566  0007E6  2B92               	incf	(??_memory_txFrameRequest+5)& (0+255),f,b
 19567  0007E8  518D               	movf	??_memory_txFrameRequest& (0+255),w,b
 19568  0007EA  2791               	addwf	(??_memory_txFrameRequest+4)& (0+255),f,b
 19569  0007EC  518E               	movf	(??_memory_txFrameRequest+1)& (0+255),w,b
 19570  0007EE  2392               	addwfc	(??_memory_txFrameRequest+5)& (0+255),f,b
 19571  0007F0  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19572  0007F2  0D09               	mullw	9
 19573  0007F4  0E02               	movlw	2
 19574  0007F6  26F3               	addwf	prodl,f,c
 19575  0007F8  0E00               	movlw	0
 19576  0007FA  22F4               	addwfc	prodh,f,c
 19577  0007FC  0E00               	movlw	low _occupiedMemory
 19578  0007FE  24F3               	addwf	prodl,w,c
 19579  000800  6ED9               	movwf	fsr2l,c
 19580  000802  0E02               	movlw	high _occupiedMemory
 19581  000804  20F4               	addwfc	prodh,w,c
 19582  000806  6EDA               	movwf	fsr2h,c
 19583  000808  C091  FFDE         	movff	??_memory_txFrameRequest+4,postinc2
 19584  00080C  C092  FFDD         	movff	??_memory_txFrameRequest+5,postdec2
 19585                           
 19586                           ; BSR set to: 0
 19587                           ;memoryController.c: 172: for (uint8_t i = 0; i < 8; i++) {
 19588  000810  0E00               	movlw	0
 19589  000812  6F96               	movwf	memory_txFrameRequest@i& (0+255),b
 19590  000814                     l8565:
 19591                           
 19592                           ; BSR set to: 0
 19593  000814  0E07               	movlw	7
 19594  000816  6596               	cpfsgt	memory_txFrameRequest@i& (0+255),b
 19595  000818  D001               	goto	l477
 19596  00081A  D044               	goto	u9290
 19597  00081C                     l477:
 19598                           
 19599                           ; BSR set to: 0
 19600                           ;memoryController.c: 173: if (i == freeIndex)
 19601                           
 19602                           ; BSR set to: 0
 19603  00081C  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19604  00081E  1996               	xorwf	memory_txFrameRequest@i& (0+255),w,b
 19605  000820  B4D8               	btfsc	status,2,c
 19606  000822  D03E               	goto	l481
 19607                           
 19608                           ; BSR set to: 0
 19609                           ;memoryController.c: 175: if (checkForOverlap(occupiedMemory[freeIndex], occupiedMemory[
      +                          i]) && occupiedMemory[i].fIsAssigned) {
 19610                           
 19611                           ; BSR set to: 0
 19612                           
 19613                           ; BSR set to: 0
 19614                           ;memoryController.c: 174: continue;
 19615  000824  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19616  000826  0D09               	mullw	9
 19617  000828  0E00               	movlw	low _occupiedMemory
 19618  00082A  24F3               	addwf	prodl,w,c
 19619  00082C  6ED9               	movwf	fsr2l,c
 19620  00082E  0E02               	movlw	high _occupiedMemory
 19621  000830  20F4               	addwfc	prodh,w,c
 19622  000832  6EDA               	movwf	fsr2h,c
 19623  000834  EE00  F072         	lfsr	0,checkForOverlap@a
 19624  000838  0E08               	movlw	8
 19625  00083A                     u9241:
 19626  00083A  CFDB FFEB          	movff	plusw2,plusw0
 19627  00083E  06E8               	decf	wreg,f,c
 19628  000840  E2FC               	bc	u9241
 19629  000842  5196               	movf	memory_txFrameRequest@i& (0+255),w,b
 19630  000844  0D09               	mullw	9
 19631  000846  0E00               	movlw	low _occupiedMemory
 19632  000848  24F3               	addwf	prodl,w,c
 19633  00084A  6ED9               	movwf	fsr2l,c
 19634  00084C  0E02               	movlw	high _occupiedMemory
 19635  00084E  20F4               	addwfc	prodh,w,c
 19636  000850  6EDA               	movwf	fsr2h,c
 19637  000852  EE00  F07B         	lfsr	0,checkForOverlap@b
 19638  000856  0E08               	movlw	8
 19639  000858                     u9251:
 19640  000858  CFDB FFEB          	movff	plusw2,plusw0
 19641  00085C  06E8               	decf	wreg,f,c
 19642  00085E  E2FC               	bc	u9251
 19643  000860  EC91  F01C         	call	_checkForOverlap	;wreg free
 19644  000864  0100               	movlb	0	; () banked
 19645  000866  A0D8               	btfss	status,0,c
 19646  000868  D01B               	goto	l481
 19647                           
 19648                           ; BSR set to: 0
 19649  00086A  5196               	movf	memory_txFrameRequest@i& (0+255),w,b
 19650  00086C  0D09               	mullw	9
 19651  00086E  0E06               	movlw	6
 19652  000870  26F3               	addwf	prodl,f,c
 19653  000872  0E00               	movlw	0
 19654  000874  22F4               	addwfc	prodh,f,c
 19655  000876  0E00               	movlw	low _occupiedMemory
 19656  000878  24F3               	addwf	prodl,w,c
 19657  00087A  6ED9               	movwf	fsr2l,c
 19658  00087C  0E02               	movlw	high _occupiedMemory
 19659  00087E  20F4               	addwfc	prodh,w,c
 19660  000880  6EDA               	movwf	fsr2h,c
 19661  000882  50DF               	movf	indf2,w,c
 19662  000884  B4D8               	btfsc	status,2,c
 19663  000886  D00C               	goto	l481
 19664                           
 19665                           ; BSR set to: 0
 19666                           ;memoryController.c: 177: field.fOutOfMemory = 1;
 19667  000888  0E01               	movlw	1
 19668  00088A  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 19669                           
 19670                           ; BSR set to: 0
 19671                           ;memoryController.c: 178: return field;
 19672  00088C  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 19673  000890  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 19674  000894  0E08               	movlw	8
 19675  000896                     u9281:
 19676  000896  CFDB FFEB          	movff	plusw2,plusw0
 19677  00089A  06E8               	decf	wreg,f,c
 19678  00089C  E2FC               	bc	u9281
 19679                           
 19680                           ; BSR set to: 0
 19681  00089E  0012               	return	
 19682  0008A0                     l481:
 19683                           
 19684                           ; BSR set to: 0
 19685                           
 19686                           ; BSR set to: 0
 19687                           
 19688                           ; BSR set to: 0
 19689  0008A0  2B96               	incf	memory_txFrameRequest@i& (0+255),f,b
 19690  0008A2  D7B8               	goto	l8565
 19691  0008A4                     u9290:
 19692                           
 19693                           ; BSR set to: 0
 19694                           ;memoryController.c: 179: }
 19695                           ;memoryController.c: 180: }
 19696                           ;memoryController.c: 181: occupiedMemory[freeIndex].fIsAssigned = 1;
 19697                           
 19698                           ; BSR set to: 0
 19699  0008A4  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19700  0008A6  0D09               	mullw	9
 19701  0008A8  0E06               	movlw	6
 19702  0008AA  26F3               	addwf	prodl,f,c
 19703  0008AC  0E00               	movlw	0
 19704  0008AE  22F4               	addwfc	prodh,f,c
 19705  0008B0  0E00               	movlw	low _occupiedMemory
 19706  0008B2  24F3               	addwf	prodl,w,c
 19707  0008B4  6ED9               	movwf	fsr2l,c
 19708  0008B6  0E02               	movlw	high _occupiedMemory
 19709  0008B8  20F4               	addwfc	prodh,w,c
 19710  0008BA  6EDA               	movwf	fsr2h,c
 19711  0008BC  0E01               	movlw	1
 19712  0008BE  6EDF               	movwf	indf2,c
 19713                           
 19714                           ;memoryController.c: 182: occupiedMemory[freeIndex].index = freeIndex;
 19715  0008C0  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19716  0008C2  0D09               	mullw	9
 19717  0008C4  0E08               	movlw	8
 19718  0008C6  26F3               	addwf	prodl,f,c
 19719  0008C8  0E00               	movlw	0
 19720  0008CA  22F4               	addwfc	prodh,f,c
 19721  0008CC  0E00               	movlw	low _occupiedMemory
 19722  0008CE  24F3               	addwf	prodl,w,c
 19723  0008D0  6ED9               	movwf	fsr2l,c
 19724  0008D2  0E02               	movlw	high _occupiedMemory
 19725  0008D4  20F4               	addwfc	prodh,w,c
 19726  0008D6  6EDA               	movwf	fsr2h,c
 19727  0008D8  C0A1  FFDF         	movff	memory_txFrameRequest@freeIndex,indf2
 19728                           
 19729                           ; BSR set to: 0
 19730                           ;memoryController.c: 183: return occupiedMemory[freeIndex];
 19731  0008DC  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19732  0008DE  0D09               	mullw	9
 19733  0008E0  0E00               	movlw	low _occupiedMemory
 19734  0008E2  24F3               	addwf	prodl,w,c
 19735  0008E4  6ED9               	movwf	fsr2l,c
 19736  0008E6  0E02               	movlw	high _occupiedMemory
 19737  0008E8  20F4               	addwfc	prodh,w,c
 19738  0008EA  6EDA               	movwf	fsr2h,c
 19739  0008EC  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 19740  0008F0  0E08               	movlw	8
 19741  0008F2                     u9301:
 19742  0008F2  CFDB FFEB          	movff	plusw2,plusw0
 19743  0008F6  06E8               	decf	wreg,f,c
 19744  0008F8  E2FC               	bc	u9301
 19745                           
 19746                           ; BSR set to: 0
 19747  0008FA  0012               	return	
 19748  0008FC                     l476:
 19749                           
 19750                           ;memoryController.c: 184: }
 19751                           ;memoryController.c: 185: }
 19752                           ;memoryController.c: 187: uint8_t fNoOverlapMarker = 1;
 19753                           
 19754                           ; BSR set to: 0
 19755                           
 19756                           ; BSR set to: 0
 19757  0008FC  0E01               	movlw	1
 19758  0008FE  0100               	movlb	0	; () banked
 19759  000900  6F95               	movwf	memory_txFrameRequest@fNoOverlapMarker& (0+255),b
 19760                           
 19761                           ; BSR set to: 0
 19762                           ;memoryController.c: 188: uint8_t i;
 19763                           ;memoryController.c: 189: occupiedMemory[freeIndex].end = occupiedMemory[freeIndex].star
      +                          t + length;
 19764  000902  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19765  000904  0D09               	mullw	9
 19766  000906  0E00               	movlw	low _occupiedMemory
 19767  000908  24F3               	addwf	prodl,w,c
 19768  00090A  6ED9               	movwf	fsr2l,c
 19769  00090C  0E02               	movlw	high _occupiedMemory
 19770  00090E  20F4               	addwfc	prodh,w,c
 19771  000910  6EDA               	movwf	fsr2h,c
 19772  000912  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 19773  000916  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 19774  00091A  5184               	movf	memory_txFrameRequest@length& (0+255),w,b
 19775  00091C  278D               	addwf	??_memory_txFrameRequest& (0+255),f,b
 19776  00091E  5185               	movf	(memory_txFrameRequest@length+1)& (0+255),w,b
 19777  000920  238E               	addwfc	(??_memory_txFrameRequest+1)& (0+255),f,b
 19778  000922  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19779  000924  0D09               	mullw	9
 19780  000926  0E02               	movlw	2
 19781  000928  26F3               	addwf	prodl,f,c
 19782  00092A  0E00               	movlw	0
 19783  00092C  22F4               	addwfc	prodh,f,c
 19784  00092E  0E00               	movlw	low _occupiedMemory
 19785  000930  24F3               	addwf	prodl,w,c
 19786  000932  6ED9               	movwf	fsr2l,c
 19787  000934  0E02               	movlw	high _occupiedMemory
 19788  000936  20F4               	addwfc	prodh,w,c
 19789  000938  6EDA               	movwf	fsr2h,c
 19790  00093A  C08D  FFDE         	movff	??_memory_txFrameRequest,postinc2
 19791  00093E  C08E  FFDD         	movff	??_memory_txFrameRequest+1,postdec2
 19792                           
 19793                           ; BSR set to: 0
 19794                           ;memoryController.c: 190: for (i = 0; i < 8; i++) {
 19795  000942  0E00               	movlw	0
 19796  000944  6F97               	movwf	memory_txFrameRequest@i_1178& (0+255),b
 19797  000946                     l8599:
 19798                           
 19799                           ; BSR set to: 0
 19800  000946  0E07               	movlw	7
 19801  000948  6597               	cpfsgt	memory_txFrameRequest@i_1178& (0+255),b
 19802  00094A  D001               	goto	l482
 19803  00094C  D03A               	goto	u9370
 19804  00094E                     l482:
 19805                           
 19806                           ; BSR set to: 0
 19807                           ;memoryController.c: 191: if (i == freeIndex)
 19808                           
 19809                           ; BSR set to: 0
 19810  00094E  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19811  000950  1997               	xorwf	memory_txFrameRequest@i_1178& (0+255),w,b
 19812  000952  B4D8               	btfsc	status,2,c
 19813  000954  D034               	goto	l487
 19814                           
 19815                           ; BSR set to: 0
 19816                           ;memoryController.c: 193: if (!occupiedMemory[i].fIsAssigned) {
 19817                           
 19818                           ; BSR set to: 0
 19819                           
 19820                           ; BSR set to: 0
 19821                           ;memoryController.c: 192: continue;
 19822  000956  5197               	movf	memory_txFrameRequest@i_1178& (0+255),w,b
 19823  000958  0D09               	mullw	9
 19824  00095A  0E06               	movlw	6
 19825  00095C  26F3               	addwf	prodl,f,c
 19826  00095E  0E00               	movlw	0
 19827  000960  22F4               	addwfc	prodh,f,c
 19828  000962  0E00               	movlw	low _occupiedMemory
 19829  000964  24F3               	addwf	prodl,w,c
 19830  000966  6ED9               	movwf	fsr2l,c
 19831  000968  0E02               	movlw	high _occupiedMemory
 19832  00096A  20F4               	addwfc	prodh,w,c
 19833  00096C  6EDA               	movwf	fsr2h,c
 19834  00096E  50DF               	movf	indf2,w,c
 19835  000970  B4D8               	btfsc	status,2,c
 19836  000972  D025               	goto	l487
 19837                           
 19838                           ; BSR set to: 0
 19839                           ;memoryController.c: 196: }
 19840                           ;memoryController.c: 198: if (checkForOverlap(occupiedMemory[freeIndex], occupiedMemory[
      +                          i]))
 19841                           
 19842                           ; BSR set to: 0
 19843                           
 19844                           ; BSR set to: 0
 19845                           ;memoryController.c: 194: continue;
 19846  000974  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19847  000976  0D09               	mullw	9
 19848  000978  0E00               	movlw	low _occupiedMemory
 19849  00097A  24F3               	addwf	prodl,w,c
 19850  00097C  6ED9               	movwf	fsr2l,c
 19851  00097E  0E02               	movlw	high _occupiedMemory
 19852  000980  20F4               	addwfc	prodh,w,c
 19853  000982  6EDA               	movwf	fsr2h,c
 19854  000984  EE00  F072         	lfsr	0,checkForOverlap@a
 19855  000988  0E08               	movlw	8
 19856  00098A                     u9341:
 19857  00098A  CFDB FFEB          	movff	plusw2,plusw0
 19858  00098E  06E8               	decf	wreg,f,c
 19859  000990  E2FC               	bc	u9341
 19860  000992  5197               	movf	memory_txFrameRequest@i_1178& (0+255),w,b
 19861  000994  0D09               	mullw	9
 19862  000996  0E00               	movlw	low _occupiedMemory
 19863  000998  24F3               	addwf	prodl,w,c
 19864  00099A  6ED9               	movwf	fsr2l,c
 19865  00099C  0E02               	movlw	high _occupiedMemory
 19866  00099E  20F4               	addwfc	prodh,w,c
 19867  0009A0  6EDA               	movwf	fsr2h,c
 19868  0009A2  EE00  F07B         	lfsr	0,checkForOverlap@b
 19869  0009A6  0E08               	movlw	8
 19870  0009A8                     u9351:
 19871  0009A8  CFDB FFEB          	movff	plusw2,plusw0
 19872  0009AC  06E8               	decf	wreg,f,c
 19873  0009AE  E2FC               	bc	u9351
 19874  0009B0  EC91  F01C         	call	_checkForOverlap	;wreg free
 19875  0009B4  0100               	movlb	0	; () banked
 19876  0009B6  A0D8               	btfss	status,0,c
 19877  0009B8  D002               	goto	l487
 19878                           
 19879                           ; BSR set to: 0
 19880                           ;memoryController.c: 199: fNoOverlapMarker = 0;
 19881  0009BA  0E00               	movlw	0
 19882  0009BC  6F95               	movwf	memory_txFrameRequest@fNoOverlapMarker& (0+255),b
 19883  0009BE                     l487:
 19884                           
 19885                           ; BSR set to: 0
 19886                           
 19887                           ; BSR set to: 0
 19888                           
 19889                           ; BSR set to: 0
 19890  0009BE  2B97               	incf	memory_txFrameRequest@i_1178& (0+255),f,b
 19891  0009C0  D7C2               	goto	l8599
 19892  0009C2                     u9370:
 19893                           
 19894                           ; BSR set to: 0
 19895                           ;memoryController.c: 201: }
 19896                           ;memoryController.c: 202: if (fNoOverlapMarker) {
 19897                           
 19898                           ; BSR set to: 0
 19899  0009C2  5195               	movf	memory_txFrameRequest@fNoOverlapMarker& (0+255),w,b
 19900  0009C4  B4D8               	btfsc	status,2,c
 19901  0009C6  D06A               	goto	l488
 19902                           
 19903                           ; BSR set to: 0
 19904                           ;memoryController.c: 203: occupiedMemory[freeIndex].fIsAssigned = 1;
 19905  0009C8  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19906  0009CA  0D09               	mullw	9
 19907  0009CC  0E06               	movlw	6
 19908  0009CE  26F3               	addwf	prodl,f,c
 19909  0009D0  0E00               	movlw	0
 19910  0009D2  22F4               	addwfc	prodh,f,c
 19911  0009D4  0E00               	movlw	low _occupiedMemory
 19912  0009D6  24F3               	addwf	prodl,w,c
 19913  0009D8  6ED9               	movwf	fsr2l,c
 19914  0009DA  0E02               	movlw	high _occupiedMemory
 19915  0009DC  20F4               	addwfc	prodh,w,c
 19916  0009DE  6EDA               	movwf	fsr2h,c
 19917  0009E0  0E01               	movlw	1
 19918  0009E2  6EDF               	movwf	indf2,c
 19919                           
 19920                           ;memoryController.c: 204: occupiedMemory[freeIndex].end = occupiedMemory[freeIndex].star
      +                          t + length;
 19921  0009E4  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19922  0009E6  0D09               	mullw	9
 19923  0009E8  0E00               	movlw	low _occupiedMemory
 19924  0009EA  24F3               	addwf	prodl,w,c
 19925  0009EC  6ED9               	movwf	fsr2l,c
 19926  0009EE  0E02               	movlw	high _occupiedMemory
 19927  0009F0  20F4               	addwfc	prodh,w,c
 19928  0009F2  6EDA               	movwf	fsr2h,c
 19929  0009F4  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 19930  0009F8  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 19931  0009FC  5184               	movf	memory_txFrameRequest@length& (0+255),w,b
 19932  0009FE  278D               	addwf	??_memory_txFrameRequest& (0+255),f,b
 19933  000A00  5185               	movf	(memory_txFrameRequest@length+1)& (0+255),w,b
 19934  000A02  238E               	addwfc	(??_memory_txFrameRequest+1)& (0+255),f,b
 19935  000A04  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19936  000A06  0D09               	mullw	9
 19937  000A08  0E02               	movlw	2
 19938  000A0A  26F3               	addwf	prodl,f,c
 19939  000A0C  0E00               	movlw	0
 19940  000A0E  22F4               	addwfc	prodh,f,c
 19941  000A10  0E00               	movlw	low _occupiedMemory
 19942  000A12  24F3               	addwf	prodl,w,c
 19943  000A14  6ED9               	movwf	fsr2l,c
 19944  000A16  0E02               	movlw	high _occupiedMemory
 19945  000A18  20F4               	addwfc	prodh,w,c
 19946  000A1A  6EDA               	movwf	fsr2h,c
 19947  000A1C  C08D  FFDE         	movff	??_memory_txFrameRequest,postinc2
 19948  000A20  C08E  FFDD         	movff	??_memory_txFrameRequest+1,postdec2
 19949                           
 19950                           ;memoryController.c: 205: occupiedMemory[freeIndex].fOutOfMemory = 0;
 19951  000A24  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19952  000A26  0D09               	mullw	9
 19953  000A28  0E07               	movlw	7
 19954  000A2A  26F3               	addwf	prodl,f,c
 19955  000A2C  0E00               	movlw	0
 19956  000A2E  22F4               	addwfc	prodh,f,c
 19957  000A30  0E00               	movlw	low _occupiedMemory
 19958  000A32  24F3               	addwf	prodl,w,c
 19959  000A34  6ED9               	movwf	fsr2l,c
 19960  000A36  0E02               	movlw	high _occupiedMemory
 19961  000A38  20F4               	addwfc	prodh,w,c
 19962  000A3A  6EDA               	movwf	fsr2h,c
 19963  000A3C  0E00               	movlw	0
 19964  000A3E  6EDF               	movwf	indf2,c
 19965                           
 19966                           ;memoryController.c: 206: occupiedMemory[freeIndex].length = length;
 19967  000A40  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19968  000A42  0D09               	mullw	9
 19969  000A44  0E04               	movlw	4
 19970  000A46  26F3               	addwf	prodl,f,c
 19971  000A48  0E00               	movlw	0
 19972  000A4A  22F4               	addwfc	prodh,f,c
 19973  000A4C  0E00               	movlw	low _occupiedMemory
 19974  000A4E  24F3               	addwf	prodl,w,c
 19975  000A50  6ED9               	movwf	fsr2l,c
 19976  000A52  0E02               	movlw	high _occupiedMemory
 19977  000A54  20F4               	addwfc	prodh,w,c
 19978  000A56  6EDA               	movwf	fsr2h,c
 19979  000A58  C084  FFDE         	movff	memory_txFrameRequest@length,postinc2
 19980  000A5C  C085  FFDD         	movff	memory_txFrameRequest@length+1,postdec2
 19981                           
 19982                           ;memoryController.c: 207: occupiedMemory[freeIndex].index = freeIndex;
 19983  000A60  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19984  000A62  0D09               	mullw	9
 19985  000A64  0E08               	movlw	8
 19986  000A66  26F3               	addwf	prodl,f,c
 19987  000A68  0E00               	movlw	0
 19988  000A6A  22F4               	addwfc	prodh,f,c
 19989  000A6C  0E00               	movlw	low _occupiedMemory
 19990  000A6E  24F3               	addwf	prodl,w,c
 19991  000A70  6ED9               	movwf	fsr2l,c
 19992  000A72  0E02               	movlw	high _occupiedMemory
 19993  000A74  20F4               	addwfc	prodh,w,c
 19994  000A76  6EDA               	movwf	fsr2h,c
 19995  000A78  C0A1  FFDF         	movff	memory_txFrameRequest@freeIndex,indf2
 19996                           
 19997                           ; BSR set to: 0
 19998                           ;memoryController.c: 208: return occupiedMemory[freeIndex];
 19999  000A7C  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 20000  000A7E  0D09               	mullw	9
 20001  000A80  0E00               	movlw	low _occupiedMemory
 20002  000A82  24F3               	addwf	prodl,w,c
 20003  000A84  6ED9               	movwf	fsr2l,c
 20004  000A86  0E02               	movlw	high _occupiedMemory
 20005  000A88  20F4               	addwfc	prodh,w,c
 20006  000A8A  6EDA               	movwf	fsr2h,c
 20007  000A8C  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 20008  000A90  0E08               	movlw	8
 20009  000A92                     u9391:
 20010  000A92  CFDB FFEB          	movff	plusw2,plusw0
 20011  000A96  06E8               	decf	wreg,f,c
 20012  000A98  E2FC               	bc	u9391
 20013                           
 20014                           ; BSR set to: 0
 20015  000A9A  0012               	return	
 20016  000A9C                     l488:
 20017                           
 20018                           ; BSR set to: 0
 20019                           ;memoryController.c: 209: }
 20020                           ;memoryController.c: 210: }
 20021                           ;memoryController.c: 211: freeIndex++;
 20022                           
 20023                           ; BSR set to: 0
 20024                           
 20025                           ; BSR set to: 0
 20026  000A9C  2BA1               	incf	memory_txFrameRequest@freeIndex& (0+255),f,b
 20027                           
 20028                           ; BSR set to: 0
 20029                           ;memoryController.c: 212: if (freeIndex == 8) {
 20030  000A9E  0E08               	movlw	8
 20031  000AA0  19A1               	xorwf	memory_txFrameRequest@freeIndex& (0+255),w,b
 20032  000AA2  A4D8               	btfss	status,2,c
 20033  000AA4  D00C               	goto	l489
 20034                           
 20035                           ; BSR set to: 0
 20036                           ;memoryController.c: 214: field.fOutOfMemory = 1;
 20037  000AA6  0E01               	movlw	1
 20038  000AA8  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 20039                           
 20040                           ; BSR set to: 0
 20041                           ;memoryController.c: 215: return field;
 20042  000AAA  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 20043  000AAE  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 20044  000AB2  0E08               	movlw	8
 20045  000AB4                     u9411:
 20046  000AB4  CFDB FFEB          	movff	plusw2,plusw0
 20047  000AB8  06E8               	decf	wreg,f,c
 20048  000ABA  E2FC               	bc	u9411
 20049                           
 20050                           ; BSR set to: 0
 20051  000ABC  0012               	return	
 20052  000ABE                     l489:
 20053                           
 20054                           ; BSR set to: 0
 20055                           
 20056                           ; BSR set to: 0
 20057  000ABE  0E08               	movlw	8
 20058  000AC0  0100               	movlb	0	; () banked
 20059  000AC2  65A1               	cpfsgt	memory_txFrameRequest@freeIndex& (0+255),b
 20060  000AC4  D5F0               	goto	l469
 20061                           
 20062                           ; BSR set to: 0
 20063                           ;memoryController.c: 216: }
 20064                           ;memoryController.c: 217: }
 20065                           ;memoryController.c: 218: return field;
 20066                           
 20067                           ; BSR set to: 0
 20068  000AC6  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 20069  000ACA  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 20070  000ACE  0E08               	movlw	8
 20071  000AD0                     u9431:
 20072  000AD0  CFDB FFEB          	movff	plusw2,plusw0
 20073  000AD4  06E8               	decf	wreg,f,c
 20074  000AD6  E2FC               	bc	u9431
 20075  000AD8  0012               	return	
 20076  000ADA                     __end_of_memory_txFrameRequest:
 20077                           	opt stack 0
 20078                           tblptru	equ	0xFF8
 20079                           tblptrh	equ	0xFF7
 20080                           tblptrl	equ	0xFF6
 20081                           tablat	equ	0xFF5
 20082                           prodh	equ	0xFF4
 20083                           prodl	equ	0xFF3
 20084                           intcon	equ	0xFF2
 20085                           intcon3	equ	0xFF0
 20086                           indf0	equ	0xFEF
 20087                           postinc0	equ	0xFEE
 20088                           plusw0	equ	0xFEB
 20089                           fsr0h	equ	0xFEA
 20090                           fsr0l	equ	0xFE9
 20091                           wreg	equ	0xFE8
 20092                           indf1	equ	0xFE7
 20093                           postinc1	equ	0xFE6
 20094                           postdec1	equ	0xFE5
 20095                           plusw1	equ	0xFE3
 20096                           fsr1h	equ	0xFE2
 20097                           fsr1l	equ	0xFE1
 20098                           indf2	equ	0xFDF
 20099                           postinc2	equ	0xFDE
 20100                           postdec2	equ	0xFDD
 20101                           plusw2	equ	0xFDB
 20102                           fsr2h	equ	0xFDA
 20103                           fsr2l	equ	0xFD9
 20104                           status	equ	0xFD8
 20105                           
 20106 ;; *************** function _entireMemoryFull *****************
 20107 ;; Defined at:
 20108 ;;		line 45 in file "src/mem/memoryController.c"
 20109 ;; Parameters:    Size  Location     Type
 20110 ;;		None
 20111 ;; Auto vars:     Size  Location     Type
 20112 ;;  i               1    0[BANK0 ] unsigned char 
 20113 ;; Return value:  Size  Location     Type
 20114 ;;		None               void
 20115 ;; Registers used:
 20116 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 20117 ;; Tracked objects:
 20118 ;;		On entry : 0/0
 20119 ;;		On exit  : 0/0
 20120 ;;		Unchanged: 0/0
 20121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20122 ;;      Params:         0       0       0       0       0       0       0       0       0
 20123 ;;      Locals:         0       1       0       0       0       0       0       0       0
 20124 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20125 ;;      Totals:         0       1       0       0       0       0       0       0       0
 20126 ;;Total ram usage:        1 bytes
 20127 ;; Hardware stack levels used:    1
 20128 ;; Hardware stack levels required when called:    4
 20129 ;; This function calls:
 20130 ;;		Nothing
 20131 ;; This function is called by:
 20132 ;;		_memory_txFrameRequest
 20133 ;; This function uses a non-reentrant model
 20134 ;;
 20135                           
 20136                           	psect	text75
 20137  0051F0                     __ptext75:
 20138                           	opt stack 0
 20139  0051F0                     _entireMemoryFull:
 20140                           	opt stack 23
 20141                           
 20142                           ;memoryController.c: 46: for (uint8_t i = 0; i < 8; i++) {
 20143                           
 20144                           ;incstack = 0
 20145  0051F0  0E00               	movlw	0
 20146  0051F2  0100               	movlb	0	; () banked
 20147  0051F4  6F60               	movwf	entireMemoryFull@i& (0+255),b
 20148  0051F6                     l8319:
 20149                           
 20150                           ; BSR set to: 0
 20151  0051F6  0E07               	movlw	7
 20152  0051F8  6560               	cpfsgt	entireMemoryFull@i& (0+255),b
 20153  0051FA  D001               	goto	l418
 20154  0051FC  D013               	goto	u8820
 20155  0051FE                     l418:
 20156                           
 20157                           ; BSR set to: 0
 20158                           ;memoryController.c: 47: if (!occupiedMemory[i].fIsAssigned)
 20159                           
 20160                           ; BSR set to: 0
 20161  0051FE  5160               	movf	entireMemoryFull@i& (0+255),w,b
 20162  005200  0D09               	mullw	9
 20163  005202  0E06               	movlw	6
 20164  005204  26F3               	addwf	prodl,f,c
 20165  005206  0E00               	movlw	0
 20166  005208  22F4               	addwfc	prodh,f,c
 20167  00520A  0E00               	movlw	low _occupiedMemory
 20168  00520C  24F3               	addwf	prodl,w,c
 20169  00520E  6ED9               	movwf	fsr2l,c
 20170  005210  0E02               	movlw	high _occupiedMemory
 20171  005212  20F4               	addwfc	prodh,w,c
 20172  005214  6EDA               	movwf	fsr2h,c
 20173  005216  50DF               	movf	indf2,w,c
 20174  005218  A4D8               	btfss	status,2,c
 20175  00521A  D002               	goto	l420
 20176                           
 20177                           ; BSR set to: 0
 20178                           ;memoryController.c: 48: return 0;
 20179  00521C  90D8               	bcf	status,0,c
 20180                           
 20181                           ; BSR set to: 0
 20182  00521E  0012               	return	
 20183  005220                     l420:
 20184                           
 20185                           ; BSR set to: 0
 20186                           
 20187                           ; BSR set to: 0
 20188  005220  2B60               	incf	entireMemoryFull@i& (0+255),f,b
 20189  005222  D7E9               	goto	l8319
 20190  005224                     u8820:
 20191                           
 20192                           ; BSR set to: 0
 20193                           ;memoryController.c: 49: }
 20194                           ;memoryController.c: 50: return 1;
 20195                           
 20196                           ; BSR set to: 0
 20197  005224  80D8               	bsf	status,0,c
 20198  005226  0012               	return	
 20199  005228                     __end_of_entireMemoryFull:
 20200                           	opt stack 0
 20201                           tblptru	equ	0xFF8
 20202                           tblptrh	equ	0xFF7
 20203                           tblptrl	equ	0xFF6
 20204                           tablat	equ	0xFF5
 20205                           prodh	equ	0xFF4
 20206                           prodl	equ	0xFF3
 20207                           intcon	equ	0xFF2
 20208                           intcon3	equ	0xFF0
 20209                           indf0	equ	0xFEF
 20210                           postinc0	equ	0xFEE
 20211                           plusw0	equ	0xFEB
 20212                           fsr0h	equ	0xFEA
 20213                           fsr0l	equ	0xFE9
 20214                           wreg	equ	0xFE8
 20215                           indf1	equ	0xFE7
 20216                           postinc1	equ	0xFE6
 20217                           postdec1	equ	0xFE5
 20218                           plusw1	equ	0xFE3
 20219                           fsr1h	equ	0xFE2
 20220                           fsr1l	equ	0xFE1
 20221                           indf2	equ	0xFDF
 20222                           postinc2	equ	0xFDE
 20223                           postdec2	equ	0xFDD
 20224                           plusw2	equ	0xFDB
 20225                           fsr2h	equ	0xFDA
 20226                           fsr2l	equ	0xFD9
 20227                           status	equ	0xFD8
 20228                           
 20229 ;; *************** function _entireMemoryEmpty *****************
 20230 ;; Defined at:
 20231 ;;		line 37 in file "src/mem/memoryController.c"
 20232 ;; Parameters:    Size  Location     Type
 20233 ;;		None
 20234 ;; Auto vars:     Size  Location     Type
 20235 ;;  i               1    0[BANK0 ] unsigned char 
 20236 ;; Return value:  Size  Location     Type
 20237 ;;		None               void
 20238 ;; Registers used:
 20239 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 20240 ;; Tracked objects:
 20241 ;;		On entry : 0/0
 20242 ;;		On exit  : 0/0
 20243 ;;		Unchanged: 0/0
 20244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20245 ;;      Params:         0       0       0       0       0       0       0       0       0
 20246 ;;      Locals:         0       1       0       0       0       0       0       0       0
 20247 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20248 ;;      Totals:         0       1       0       0       0       0       0       0       0
 20249 ;;Total ram usage:        1 bytes
 20250 ;; Hardware stack levels used:    1
 20251 ;; Hardware stack levels required when called:    4
 20252 ;; This function calls:
 20253 ;;		Nothing
 20254 ;; This function is called by:
 20255 ;;		_memory_txFrameRequest
 20256 ;; This function uses a non-reentrant model
 20257 ;;
 20258                           
 20259                           	psect	text76
 20260  005228                     __ptext76:
 20261                           	opt stack 0
 20262  005228                     _entireMemoryEmpty:
 20263                           	opt stack 23
 20264                           
 20265                           ;memoryController.c: 38: for (uint8_t i = 0; i < 8; i++) {
 20266                           
 20267                           ; BSR set to: 0
 20268                           ;incstack = 0
 20269  005228  0E00               	movlw	0
 20270  00522A  0100               	movlb	0	; () banked
 20271  00522C  6F60               	movwf	entireMemoryEmpty@i& (0+255),b
 20272  00522E                     l8299:
 20273                           
 20274                           ; BSR set to: 0
 20275  00522E  0E07               	movlw	7
 20276  005230  6560               	cpfsgt	entireMemoryEmpty@i& (0+255),b
 20277  005232  D001               	goto	l412
 20278  005234  D013               	goto	u8790
 20279  005236                     l412:
 20280                           
 20281                           ; BSR set to: 0
 20282                           ;memoryController.c: 39: if (occupiedMemory[i].fIsAssigned)
 20283                           
 20284                           ; BSR set to: 0
 20285  005236  5160               	movf	entireMemoryEmpty@i& (0+255),w,b
 20286  005238  0D09               	mullw	9
 20287  00523A  0E06               	movlw	6
 20288  00523C  26F3               	addwf	prodl,f,c
 20289  00523E  0E00               	movlw	0
 20290  005240  22F4               	addwfc	prodh,f,c
 20291  005242  0E00               	movlw	low _occupiedMemory
 20292  005244  24F3               	addwf	prodl,w,c
 20293  005246  6ED9               	movwf	fsr2l,c
 20294  005248  0E02               	movlw	high _occupiedMemory
 20295  00524A  20F4               	addwfc	prodh,w,c
 20296  00524C  6EDA               	movwf	fsr2h,c
 20297  00524E  50DF               	movf	indf2,w,c
 20298  005250  B4D8               	btfsc	status,2,c
 20299  005252  D002               	goto	l414
 20300                           
 20301                           ; BSR set to: 0
 20302                           ;memoryController.c: 40: return 0;
 20303  005254  90D8               	bcf	status,0,c
 20304                           
 20305                           ; BSR set to: 0
 20306  005256  0012               	return	
 20307  005258                     l414:
 20308                           
 20309                           ; BSR set to: 0
 20310                           
 20311                           ; BSR set to: 0
 20312  005258  2B60               	incf	entireMemoryEmpty@i& (0+255),f,b
 20313  00525A  D7E9               	goto	l8299
 20314  00525C                     u8790:
 20315                           
 20316                           ; BSR set to: 0
 20317                           ;memoryController.c: 41: }
 20318                           ;memoryController.c: 42: return 1;
 20319                           
 20320                           ; BSR set to: 0
 20321  00525C  80D8               	bsf	status,0,c
 20322  00525E  0012               	return	
 20323  005260                     __end_of_entireMemoryEmpty:
 20324                           	opt stack 0
 20325                           tblptru	equ	0xFF8
 20326                           tblptrh	equ	0xFF7
 20327                           tblptrl	equ	0xFF6
 20328                           tablat	equ	0xFF5
 20329                           prodh	equ	0xFF4
 20330                           prodl	equ	0xFF3
 20331                           intcon	equ	0xFF2
 20332                           intcon3	equ	0xFF0
 20333                           indf0	equ	0xFEF
 20334                           postinc0	equ	0xFEE
 20335                           plusw0	equ	0xFEB
 20336                           fsr0h	equ	0xFEA
 20337                           fsr0l	equ	0xFE9
 20338                           wreg	equ	0xFE8
 20339                           indf1	equ	0xFE7
 20340                           postinc1	equ	0xFE6
 20341                           postdec1	equ	0xFE5
 20342                           plusw1	equ	0xFE3
 20343                           fsr1h	equ	0xFE2
 20344                           fsr1l	equ	0xFE1
 20345                           indf2	equ	0xFDF
 20346                           postinc2	equ	0xFDE
 20347                           postdec2	equ	0xFDD
 20348                           plusw2	equ	0xFDB
 20349                           fsr2h	equ	0xFDA
 20350                           fsr2l	equ	0xFD9
 20351                           status	equ	0xFD8
 20352                           
 20353 ;; *************** function _checkForOverlap *****************
 20354 ;; Defined at:
 20355 ;;		line 63 in file "src/mem/memoryController.c"
 20356 ;; Parameters:    Size  Location     Type
 20357 ;;  a               9   18[BANK0 ] struct memoryField
 20358 ;;  b               9   27[BANK0 ] struct memoryField
 20359 ;; Auto vars:     Size  Location     Type
 20360 ;;		None
 20361 ;; Return value:  Size  Location     Type
 20362 ;;		None               void
 20363 ;; Registers used:
 20364 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 20365 ;; Tracked objects:
 20366 ;;		On entry : 0/0
 20367 ;;		On exit  : 0/0
 20368 ;;		Unchanged: 0/0
 20369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20370 ;;      Params:         0      18       0       0       0       0       0       0       0
 20371 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20372 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20373 ;;      Totals:         0      18       0       0       0       0       0       0       0
 20374 ;;Total ram usage:       18 bytes
 20375 ;; Hardware stack levels used:    1
 20376 ;; Hardware stack levels required when called:    5
 20377 ;; This function calls:
 20378 ;;		_checkForOverlapSwitched
 20379 ;; This function is called by:
 20380 ;;		_memory_txFrameRequest
 20381 ;; This function uses a non-reentrant model
 20382 ;;
 20383                           
 20384                           	psect	text77
 20385  003922                     __ptext77:
 20386                           	opt stack 0
 20387  003922                     _checkForOverlap:
 20388                           	opt stack 22
 20389                           
 20390                           ;memoryController.c: 64: if ((a.start == b.start) ||
 20391                           ;memoryController.c: 65: (a.end == b.end) ||
 20392                           ;memoryController.c: 66: (a.start == b.end) ||
 20393                           ;memoryController.c: 67: (a.end == b.start) ||
 20394                           ;memoryController.c: 68: (a.end > 0x3000) ||
 20395                           ;memoryController.c: 69: (a.start > 0x3000) ||
 20396                           ;memoryController.c: 70: (b.end > 0x3000) ||
 20397                           ;memoryController.c: 71: (b.start > 0x3000))
 20398                           
 20399                           ; BSR set to: 0
 20400                           ;incstack = 0
 20401  003922  0100               	movlb	0	; () banked
 20402  003924  517B               	movf	checkForOverlap@b& (0+255),w,b
 20403  003926  1972               	xorwf	checkForOverlap@a& (0+255),w,b
 20404  003928  E104               	bnz	u8830
 20405  00392A  517C               	movf	(checkForOverlap@b+1)& (0+255),w,b
 20406  00392C  1973               	xorwf	(checkForOverlap@a+1)& (0+255),w,b
 20407  00392E  B4D8               	btfsc	status,2,c
 20408  003930  D029               	goto	u8900
 20409  003932                     u8830:
 20410                           
 20411                           ; BSR set to: 0
 20412  003932  517D               	movf	(checkForOverlap@b+2)& (0+255),w,b
 20413  003934  1974               	xorwf	(checkForOverlap@a+2)& (0+255),w,b
 20414  003936  E104               	bnz	u8840
 20415  003938  517E               	movf	(checkForOverlap@b+3)& (0+255),w,b
 20416  00393A  1975               	xorwf	(checkForOverlap@a+3)& (0+255),w,b
 20417  00393C  B4D8               	btfsc	status,2,c
 20418  00393E  D022               	goto	u8900
 20419  003940                     u8840:
 20420                           
 20421                           ; BSR set to: 0
 20422  003940  5172               	movf	checkForOverlap@a& (0+255),w,b
 20423  003942  197D               	xorwf	(checkForOverlap@b+2)& (0+255),w,b
 20424  003944  E104               	bnz	u8850
 20425  003946  5173               	movf	(checkForOverlap@a+1)& (0+255),w,b
 20426  003948  197E               	xorwf	(checkForOverlap@b+3)& (0+255),w,b
 20427  00394A  B4D8               	btfsc	status,2,c
 20428  00394C  D01B               	goto	u8900
 20429  00394E                     u8850:
 20430                           
 20431                           ; BSR set to: 0
 20432  00394E  517B               	movf	checkForOverlap@b& (0+255),w,b
 20433  003950  1974               	xorwf	(checkForOverlap@a+2)& (0+255),w,b
 20434  003952  E104               	bnz	u8860
 20435  003954  517C               	movf	(checkForOverlap@b+1)& (0+255),w,b
 20436  003956  1975               	xorwf	(checkForOverlap@a+3)& (0+255),w,b
 20437  003958  B4D8               	btfsc	status,2,c
 20438  00395A  D014               	goto	u8900
 20439  00395C                     u8860:
 20440                           
 20441                           ; BSR set to: 0
 20442  00395C  0574               	decf	(checkForOverlap@a+2)& (0+255),w,b
 20443  00395E  0E30               	movlw	48
 20444  003960  5975               	subwfb	(checkForOverlap@a+3)& (0+255),w,b
 20445  003962  B0D8               	btfsc	status,0,c
 20446  003964  D00F               	goto	u8900
 20447                           
 20448                           ; BSR set to: 0
 20449  003966  0572               	decf	checkForOverlap@a& (0+255),w,b
 20450  003968  0E30               	movlw	48
 20451  00396A  5973               	subwfb	(checkForOverlap@a+1)& (0+255),w,b
 20452  00396C  B0D8               	btfsc	status,0,c
 20453  00396E  D00A               	goto	u8900
 20454                           
 20455                           ; BSR set to: 0
 20456  003970  057D               	decf	(checkForOverlap@b+2)& (0+255),w,b
 20457  003972  0E30               	movlw	48
 20458  003974  597E               	subwfb	(checkForOverlap@b+3)& (0+255),w,b
 20459  003976  B0D8               	btfsc	status,0,c
 20460  003978  D005               	goto	u8900
 20461                           
 20462                           ; BSR set to: 0
 20463  00397A  057B               	decf	checkForOverlap@b& (0+255),w,b
 20464  00397C  0E30               	movlw	48
 20465  00397E  597C               	subwfb	(checkForOverlap@b+1)& (0+255),w,b
 20466  003980  A0D8               	btfss	status,0,c
 20467  003982  D002               	goto	l432
 20468  003984                     u8900:
 20469                           
 20470                           ; BSR set to: 0
 20471                           ;memoryController.c: 72: return 1;
 20472                           
 20473                           ; BSR set to: 0
 20474  003984  80D8               	bsf	status,0,c
 20475                           
 20476                           ; BSR set to: 0
 20477  003986  0012               	return	
 20478  003988                     l432:
 20479                           
 20480                           ; BSR set to: 0
 20481                           ;memoryController.c: 75: if (a.start < a.end) {
 20482                           
 20483                           ; BSR set to: 0
 20484  003988  5174               	movf	(checkForOverlap@a+2)& (0+255),w,b
 20485  00398A  5D72               	subwf	checkForOverlap@a& (0+255),w,b
 20486  00398C  5175               	movf	(checkForOverlap@a+3)& (0+255),w,b
 20487  00398E  5973               	subwfb	(checkForOverlap@a+1)& (0+255),w,b
 20488  003990  B0D8               	btfsc	status,0,c
 20489  003992  D03B               	goto	l436
 20490                           
 20491                           ; BSR set to: 0
 20492                           ;memoryController.c: 76: if (b.start < b.end) {
 20493  003994  517D               	movf	(checkForOverlap@b+2)& (0+255),w,b
 20494  003996  5D7B               	subwf	checkForOverlap@b& (0+255),w,b
 20495  003998  517E               	movf	(checkForOverlap@b+3)& (0+255),w,b
 20496  00399A  597C               	subwfb	(checkForOverlap@b+1)& (0+255),w,b
 20497  00399C  B0D8               	btfsc	status,0,c
 20498  00399E  D02B               	goto	l437
 20499                           
 20500                           ; BSR set to: 0
 20501                           ;memoryController.c: 78: if (a.start < b.start) {
 20502  0039A0  517B               	movf	checkForOverlap@b& (0+255),w,b
 20503  0039A2  5D72               	subwf	checkForOverlap@a& (0+255),w,b
 20504  0039A4  517C               	movf	(checkForOverlap@b+1)& (0+255),w,b
 20505  0039A6  5973               	subwfb	(checkForOverlap@a+1)& (0+255),w,b
 20506  0039A8  B0D8               	btfsc	status,0,c
 20507  0039AA  D00A               	goto	l438
 20508                           
 20509                           ; BSR set to: 0
 20510                           ;memoryController.c: 79: if (a.end > b.start) {
 20511  0039AC  5174               	movf	(checkForOverlap@a+2)& (0+255),w,b
 20512  0039AE  5D7B               	subwf	checkForOverlap@b& (0+255),w,b
 20513  0039B0  5175               	movf	(checkForOverlap@a+3)& (0+255),w,b
 20514  0039B2  597C               	subwfb	(checkForOverlap@b+1)& (0+255),w,b
 20515  0039B4  B0D8               	btfsc	status,0,c
 20516  0039B6  D002               	goto	l439
 20517                           
 20518                           ; BSR set to: 0
 20519                           ;memoryController.c: 80: return 1;
 20520  0039B8  80D8               	bsf	status,0,c
 20521                           
 20522                           ; BSR set to: 0
 20523                           ;memoryController.c: 81: } else {
 20524                           
 20525                           ; BSR set to: 0
 20526  0039BA  0012               	return	
 20527  0039BC                     l439:
 20528                           
 20529                           ; BSR set to: 0
 20530                           ;memoryController.c: 82: return 0;
 20531                           
 20532                           ; BSR set to: 0
 20533  0039BC  90D8               	bcf	status,0,c
 20534                           
 20535                           ; BSR set to: 0
 20536                           ;memoryController.c: 83: }
 20537                           ;memoryController.c: 84: } else {
 20538                           
 20539                           ; BSR set to: 0
 20540  0039BE  0012               	return	
 20541  0039C0                     l438:
 20542                           
 20543                           ; BSR set to: 0
 20544                           ;memoryController.c: 85: return checkForOverlapSwitched(b, a);
 20545                           
 20546                           ; BSR set to: 0
 20547  0039C0  EE20  F07B         	lfsr	2,checkForOverlap@b
 20548  0039C4  EE00  F060         	lfsr	0,checkForOverlapSwitched@a
 20549  0039C8  0E08               	movlw	8
 20550  0039CA                     u8951:
 20551  0039CA  CFDB FFEB          	movff	plusw2,plusw0
 20552  0039CE  06E8               	decf	wreg,f,c
 20553  0039D0  E2FC               	bc	u8951
 20554  0039D2  EE20  F072         	lfsr	2,checkForOverlap@a
 20555  0039D6  EE00  F069         	lfsr	0,checkForOverlapSwitched@b
 20556  0039DA  0E08               	movlw	8
 20557  0039DC                     u8961:
 20558  0039DC  CFDB FFEB          	movff	plusw2,plusw0
 20559  0039E0  06E8               	decf	wreg,f,c
 20560  0039E2  E2FC               	bc	u8961
 20561  0039E4  EC56  F020         	call	_checkForOverlapSwitched	;wreg free
 20562  0039E8  0100               	movlb	0	; () banked
 20563  0039EA  B0D8               	btfsc	status,0,c
 20564  0039EC  D002               	goto	l8189
 20565                           
 20566                           ; BSR set to: 0
 20567  0039EE  90D8               	bcf	status,0,c
 20568  0039F0  0012               	return	
 20569  0039F2                     l8189:
 20570                           
 20571                           ; BSR set to: 0
 20572                           
 20573                           ; BSR set to: 0
 20574  0039F2  80D8               	bsf	status,0,c
 20575                           
 20576                           ; BSR set to: 0
 20577                           ;memoryController.c: 86: }
 20578                           ;memoryController.c: 87: } else {
 20579                           
 20580                           ; BSR set to: 0
 20581                           
 20582                           ; BSR set to: 0
 20583  0039F4  0012               	return	
 20584  0039F6                     l437:
 20585                           
 20586                           ; BSR set to: 0
 20587                           ;memoryController.c: 88: if (b.end < a.start)
 20588                           
 20589                           ; BSR set to: 0
 20590  0039F6  5172               	movf	checkForOverlap@a& (0+255),w,b
 20591  0039F8  5D7D               	subwf	(checkForOverlap@b+2)& (0+255),w,b
 20592  0039FA  5173               	movf	(checkForOverlap@a+1)& (0+255),w,b
 20593  0039FC  597E               	subwfb	(checkForOverlap@b+3)& (0+255),w,b
 20594  0039FE  B0D8               	btfsc	status,0,c
 20595  003A00  D002               	goto	l443
 20596                           
 20597                           ; BSR set to: 0
 20598                           ;memoryController.c: 89: return 0;
 20599  003A02  90D8               	bcf	status,0,c
 20600                           
 20601                           ; BSR set to: 0
 20602                           
 20603                           ; BSR set to: 0
 20604  003A04  0012               	return	
 20605  003A06                     l443:
 20606                           
 20607                           ; BSR set to: 0
 20608                           ;memoryController.c: 90: else
 20609                           ;memoryController.c: 91: return 1;
 20610                           
 20611                           ; BSR set to: 0
 20612  003A06  80D8               	bsf	status,0,c
 20613                           
 20614                           ; BSR set to: 0
 20615                           ;memoryController.c: 92: }
 20616                           ;memoryController.c: 93: } else {
 20617                           
 20618                           ; BSR set to: 0
 20619                           
 20620                           ; BSR set to: 0
 20621  003A08  0012               	return	
 20622  003A0A                     l436:
 20623                           
 20624                           ; BSR set to: 0
 20625                           ;memoryController.c: 94: return checkForOverlapSwitched(b, a);
 20626                           
 20627                           ; BSR set to: 0
 20628  003A0A  EE20  F07B         	lfsr	2,checkForOverlap@b
 20629  003A0E  EE00  F060         	lfsr	0,checkForOverlapSwitched@a
 20630  003A12  0E08               	movlw	8
 20631  003A14                     u8991:
 20632  003A14  CFDB FFEB          	movff	plusw2,plusw0
 20633  003A18  06E8               	decf	wreg,f,c
 20634  003A1A  E2FC               	bc	u8991
 20635  003A1C  EE20  F072         	lfsr	2,checkForOverlap@a
 20636  003A20  EE00  F069         	lfsr	0,checkForOverlapSwitched@b
 20637  003A24  0E08               	movlw	8
 20638  003A26                     u9001:
 20639  003A26  CFDB FFEB          	movff	plusw2,plusw0
 20640  003A2A  06E8               	decf	wreg,f,c
 20641  003A2C  E2FC               	bc	u9001
 20642  003A2E  EC56  F020         	call	_checkForOverlapSwitched	;wreg free
 20643  003A32  0100               	movlb	0	; () banked
 20644  003A34  B0D8               	btfsc	status,0,c
 20645  003A36  D002               	goto	l8193
 20646                           
 20647                           ; BSR set to: 0
 20648  003A38  90D8               	bcf	status,0,c
 20649  003A3A  0012               	return	
 20650  003A3C                     l8193:
 20651                           
 20652                           ; BSR set to: 0
 20653                           
 20654                           ; BSR set to: 0
 20655  003A3C  80D8               	bsf	status,0,c
 20656                           
 20657                           ; BSR set to: 0
 20658                           
 20659                           ; BSR set to: 0
 20660  003A3E  0012               	return	
 20661  003A40                     __end_of_checkForOverlap:
 20662                           	opt stack 0
 20663                           tblptru	equ	0xFF8
 20664                           tblptrh	equ	0xFF7
 20665                           tblptrl	equ	0xFF6
 20666                           tablat	equ	0xFF5
 20667                           prodh	equ	0xFF4
 20668                           prodl	equ	0xFF3
 20669                           intcon	equ	0xFF2
 20670                           intcon3	equ	0xFF0
 20671                           indf0	equ	0xFEF
 20672                           postinc0	equ	0xFEE
 20673                           plusw0	equ	0xFEB
 20674                           fsr0h	equ	0xFEA
 20675                           fsr0l	equ	0xFE9
 20676                           wreg	equ	0xFE8
 20677                           indf1	equ	0xFE7
 20678                           postinc1	equ	0xFE6
 20679                           postdec1	equ	0xFE5
 20680                           plusw1	equ	0xFE3
 20681                           fsr1h	equ	0xFE2
 20682                           fsr1l	equ	0xFE1
 20683                           indf2	equ	0xFDF
 20684                           postinc2	equ	0xFDE
 20685                           postdec2	equ	0xFDD
 20686                           plusw2	equ	0xFDB
 20687                           fsr2h	equ	0xFDA
 20688                           fsr2l	equ	0xFD9
 20689                           status	equ	0xFD8
 20690                           
 20691 ;; *************** function _checkForOverlapSwitched *****************
 20692 ;; Defined at:
 20693 ;;		line 98 in file "src/mem/memoryController.c"
 20694 ;; Parameters:    Size  Location     Type
 20695 ;;  a               9    0[BANK0 ] struct memoryField
 20696 ;;  b               9    9[BANK0 ] struct memoryField
 20697 ;; Auto vars:     Size  Location     Type
 20698 ;;		None
 20699 ;; Return value:  Size  Location     Type
 20700 ;;		None               void
 20701 ;; Registers used:
 20702 ;;		wreg, status,2, status,0
 20703 ;; Tracked objects:
 20704 ;;		On entry : 0/0
 20705 ;;		On exit  : 0/0
 20706 ;;		Unchanged: 0/0
 20707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20708 ;;      Params:         0      18       0       0       0       0       0       0       0
 20709 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20710 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20711 ;;      Totals:         0      18       0       0       0       0       0       0       0
 20712 ;;Total ram usage:       18 bytes
 20713 ;; Hardware stack levels used:    1
 20714 ;; Hardware stack levels required when called:    4
 20715 ;; This function calls:
 20716 ;;		Nothing
 20717 ;; This function is called by:
 20718 ;;		_checkForOverlap
 20719 ;; This function uses a non-reentrant model
 20720 ;;
 20721                           
 20722                           	psect	text78
 20723  0040AC                     __ptext78:
 20724                           	opt stack 0
 20725  0040AC                     _checkForOverlapSwitched:
 20726                           	opt stack 22
 20727                           
 20728                           ;memoryController.c: 101: if ((a.start == b.start) ||
 20729                           ;memoryController.c: 102: (a.end == b.end) ||
 20730                           ;memoryController.c: 103: (a.start == b.end) ||
 20731                           ;memoryController.c: 104: (a.end == b.start) ||
 20732                           ;memoryController.c: 105: (a.end > 0x3000) ||
 20733                           ;memoryController.c: 106: (a.start > 0x3000) ||
 20734                           ;memoryController.c: 107: (b.end > 0x3000) ||
 20735                           ;memoryController.c: 108: (b.start > 0x3000))
 20736                           
 20737                           ; BSR set to: 0
 20738                           ;incstack = 0
 20739  0040AC  0100               	movlb	0	; () banked
 20740  0040AE  5169               	movf	checkForOverlapSwitched@b& (0+255),w,b
 20741  0040B0  1960               	xorwf	checkForOverlapSwitched@a& (0+255),w,b
 20742  0040B2  E104               	bnz	u8640
 20743  0040B4  516A               	movf	(checkForOverlapSwitched@b+1)& (0+255),w,b
 20744  0040B6  1961               	xorwf	(checkForOverlapSwitched@a+1)& (0+255),w,b
 20745  0040B8  B4D8               	btfsc	status,2,c
 20746  0040BA  D029               	goto	u8710
 20747  0040BC                     u8640:
 20748                           
 20749                           ; BSR set to: 0
 20750  0040BC  516B               	movf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 20751  0040BE  1962               	xorwf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 20752  0040C0  E104               	bnz	u8650
 20753  0040C2  516C               	movf	(checkForOverlapSwitched@b+3)& (0+255),w,b
 20754  0040C4  1963               	xorwf	(checkForOverlapSwitched@a+3)& (0+255),w,b
 20755  0040C6  B4D8               	btfsc	status,2,c
 20756  0040C8  D022               	goto	u8710
 20757  0040CA                     u8650:
 20758                           
 20759                           ; BSR set to: 0
 20760  0040CA  5160               	movf	checkForOverlapSwitched@a& (0+255),w,b
 20761  0040CC  196B               	xorwf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 20762  0040CE  E104               	bnz	u8660
 20763  0040D0  5161               	movf	(checkForOverlapSwitched@a+1)& (0+255),w,b
 20764  0040D2  196C               	xorwf	(checkForOverlapSwitched@b+3)& (0+255),w,b
 20765  0040D4  B4D8               	btfsc	status,2,c
 20766  0040D6  D01B               	goto	u8710
 20767  0040D8                     u8660:
 20768                           
 20769                           ; BSR set to: 0
 20770  0040D8  5169               	movf	checkForOverlapSwitched@b& (0+255),w,b
 20771  0040DA  1962               	xorwf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 20772  0040DC  E104               	bnz	u8670
 20773  0040DE  516A               	movf	(checkForOverlapSwitched@b+1)& (0+255),w,b
 20774  0040E0  1963               	xorwf	(checkForOverlapSwitched@a+3)& (0+255),w,b
 20775  0040E2  B4D8               	btfsc	status,2,c
 20776  0040E4  D014               	goto	u8710
 20777  0040E6                     u8670:
 20778                           
 20779                           ; BSR set to: 0
 20780  0040E6  0562               	decf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 20781  0040E8  0E30               	movlw	48
 20782  0040EA  5963               	subwfb	(checkForOverlapSwitched@a+3)& (0+255),w,b
 20783  0040EC  B0D8               	btfsc	status,0,c
 20784  0040EE  D00F               	goto	u8710
 20785                           
 20786                           ; BSR set to: 0
 20787  0040F0  0560               	decf	checkForOverlapSwitched@a& (0+255),w,b
 20788  0040F2  0E30               	movlw	48
 20789  0040F4  5961               	subwfb	(checkForOverlapSwitched@a+1)& (0+255),w,b
 20790  0040F6  B0D8               	btfsc	status,0,c
 20791  0040F8  D00A               	goto	u8710
 20792                           
 20793                           ; BSR set to: 0
 20794  0040FA  056B               	decf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 20795  0040FC  0E30               	movlw	48
 20796  0040FE  596C               	subwfb	(checkForOverlapSwitched@b+3)& (0+255),w,b
 20797  004100  B0D8               	btfsc	status,0,c
 20798  004102  D005               	goto	u8710
 20799                           
 20800                           ; BSR set to: 0
 20801  004104  0569               	decf	checkForOverlapSwitched@b& (0+255),w,b
 20802  004106  0E30               	movlw	48
 20803  004108  596A               	subwfb	(checkForOverlapSwitched@b+1)& (0+255),w,b
 20804  00410A  A0D8               	btfss	status,0,c
 20805  00410C  D002               	goto	l448
 20806  00410E                     u8710:
 20807                           
 20808                           ; BSR set to: 0
 20809                           ;memoryController.c: 109: return 1;
 20810                           
 20811                           ; BSR set to: 0
 20812  00410E  80D8               	bsf	status,0,c
 20813                           
 20814                           ; BSR set to: 0
 20815  004110  0012               	return	
 20816  004112                     l448:
 20817                           
 20818                           ; BSR set to: 0
 20819                           ;memoryController.c: 112: if (a.start < a.end) {
 20820                           
 20821                           ; BSR set to: 0
 20822  004112  5162               	movf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 20823  004114  5D60               	subwf	checkForOverlapSwitched@a& (0+255),w,b
 20824  004116  5163               	movf	(checkForOverlapSwitched@a+3)& (0+255),w,b
 20825  004118  5961               	subwfb	(checkForOverlapSwitched@a+1)& (0+255),w,b
 20826  00411A  B0D8               	btfsc	status,0,c
 20827  00411C  D01E               	goto	l459
 20828                           
 20829                           ; BSR set to: 0
 20830                           ;memoryController.c: 113: if (b.start < b.end) {
 20831  00411E  516B               	movf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 20832  004120  5D69               	subwf	checkForOverlapSwitched@b& (0+255),w,b
 20833  004122  516C               	movf	(checkForOverlapSwitched@b+3)& (0+255),w,b
 20834  004124  596A               	subwfb	(checkForOverlapSwitched@b+1)& (0+255),w,b
 20835  004126  B0D8               	btfsc	status,0,c
 20836  004128  D010               	goto	l453
 20837                           
 20838                           ; BSR set to: 0
 20839                           ;memoryController.c: 115: if (a.start < b.start) {
 20840  00412A  5169               	movf	checkForOverlapSwitched@b& (0+255),w,b
 20841  00412C  5D60               	subwf	checkForOverlapSwitched@a& (0+255),w,b
 20842  00412E  516A               	movf	(checkForOverlapSwitched@b+1)& (0+255),w,b
 20843  004130  5961               	subwfb	(checkForOverlapSwitched@a+1)& (0+255),w,b
 20844  004132  B0D8               	btfsc	status,0,c
 20845  004134  D012               	goto	l459
 20846                           
 20847                           ; BSR set to: 0
 20848                           ;memoryController.c: 116: if (a.end > b.start) {
 20849  004136  5162               	movf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 20850  004138  5D69               	subwf	checkForOverlapSwitched@b& (0+255),w,b
 20851  00413A  5163               	movf	(checkForOverlapSwitched@a+3)& (0+255),w,b
 20852  00413C  596A               	subwfb	(checkForOverlapSwitched@b+1)& (0+255),w,b
 20853  00413E  B0D8               	btfsc	status,0,c
 20854  004140  D002               	goto	l455
 20855                           
 20856                           ; BSR set to: 0
 20857                           ;memoryController.c: 117: return 1;
 20858  004142  80D8               	bsf	status,0,c
 20859                           
 20860                           ; BSR set to: 0
 20861  004144  0012               	return	
 20862  004146                     l455:
 20863                           
 20864                           ; BSR set to: 0
 20865                           ;memoryController.c: 119: return 0;
 20866                           
 20867                           ; BSR set to: 0
 20868  004146  90D8               	bcf	status,0,c
 20869                           
 20870                           ; BSR set to: 0
 20871  004148  0012               	return	
 20872  00414A                     l453:
 20873                           
 20874                           ; BSR set to: 0
 20875                           ;memoryController.c: 123: if (b.end < a.start)
 20876                           
 20877                           ; BSR set to: 0
 20878  00414A  5160               	movf	checkForOverlapSwitched@a& (0+255),w,b
 20879  00414C  5D6B               	subwf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 20880  00414E  5161               	movf	(checkForOverlapSwitched@a+1)& (0+255),w,b
 20881  004150  596C               	subwfb	(checkForOverlapSwitched@b+3)& (0+255),w,b
 20882  004152  A0D8               	btfss	status,0,c
 20883  004154  D7F8               	goto	l455
 20884                           
 20885                           ; BSR set to: 0
 20886                           ;memoryController.c: 125: else
 20887                           ;memoryController.c: 126: return 1;
 20888                           
 20889                           ; BSR set to: 0
 20890                           
 20891                           ; BSR set to: 0
 20892                           
 20893                           ; BSR set to: 0
 20894                           
 20895                           ; BSR set to: 0
 20896                           ;memoryController.c: 124: return 0;
 20897  004156  80D8               	bsf	status,0,c
 20898                           
 20899                           ; BSR set to: 0
 20900  004158  0012               	return	
 20901  00415A                     l459:
 20902                           
 20903                           ; BSR set to: 0
 20904                           ;memoryController.c: 127: }
 20905                           ;memoryController.c: 128: }
 20906                           ;memoryController.c: 130: return 1;
 20907                           
 20908                           ; BSR set to: 0
 20909                           
 20910                           ; BSR set to: 0
 20911                           
 20912                           ; BSR set to: 0
 20913  00415A  80D8               	bsf	status,0,c
 20914  00415C  0012               	return	
 20915  00415E                     __end_of_checkForOverlapSwitched:
 20916                           	opt stack 0
 20917                           tblptru	equ	0xFF8
 20918                           tblptrh	equ	0xFF7
 20919                           tblptrl	equ	0xFF6
 20920                           tablat	equ	0xFF5
 20921                           prodh	equ	0xFF4
 20922                           prodl	equ	0xFF3
 20923                           intcon	equ	0xFF2
 20924                           intcon3	equ	0xFF0
 20925                           indf0	equ	0xFEF
 20926                           postinc0	equ	0xFEE
 20927                           plusw0	equ	0xFEB
 20928                           fsr0h	equ	0xFEA
 20929                           fsr0l	equ	0xFE9
 20930                           wreg	equ	0xFE8
 20931                           indf1	equ	0xFE7
 20932                           postinc1	equ	0xFE6
 20933                           postdec1	equ	0xFE5
 20934                           plusw1	equ	0xFE3
 20935                           fsr1h	equ	0xFE2
 20936                           fsr1l	equ	0xFE1
 20937                           indf2	equ	0xFDF
 20938                           postinc2	equ	0xFDE
 20939                           postdec2	equ	0xFDD
 20940                           plusw2	equ	0xFDB
 20941                           fsr2h	equ	0xFDA
 20942                           fsr2l	equ	0xFD9
 20943                           status	equ	0xFD8
 20944                           
 20945 ;; *************** function ___wmul *****************
 20946 ;; Defined at:
 20947 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 20948 ;; Parameters:    Size  Location     Type
 20949 ;;  multiplier      2    0[BANK0 ] unsigned int 
 20950 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 20951 ;; Auto vars:     Size  Location     Type
 20952 ;;  product         2    4[BANK0 ] unsigned int 
 20953 ;; Return value:  Size  Location     Type
 20954 ;;                  2    0[BANK0 ] unsigned int 
 20955 ;; Registers used:
 20956 ;;		wreg, status,2, status,0, prodl, prodh
 20957 ;; Tracked objects:
 20958 ;;		On entry : 0/0
 20959 ;;		On exit  : 0/0
 20960 ;;		Unchanged: 0/0
 20961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20962 ;;      Params:         0       4       0       0       0       0       0       0       0
 20963 ;;      Locals:         0       2       0       0       0       0       0       0       0
 20964 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20965 ;;      Totals:         0       6       0       0       0       0       0       0       0
 20966 ;;Total ram usage:        6 bytes
 20967 ;; Hardware stack levels used:    1
 20968 ;; Hardware stack levels required when called:    4
 20969 ;; This function calls:
 20970 ;;		Nothing
 20971 ;; This function is called by:
 20972 ;;		_memory_txFrameRequest
 20973 ;; This function uses a non-reentrant model
 20974 ;;
 20975                           
 20976                           	psect	text79
 20977  00548A                     __ptext79:
 20978                           	opt stack 0
 20979  00548A                     ___wmul:
 20980                           	opt stack 23
 20981                           
 20982                           ; BSR set to: 0
 20983                           ;incstack = 0
 20984  00548A  0100               	movlb	0	; () banked
 20985  00548C  5160               	movf	___wmul@multiplier& (0+255),w,b
 20986  00548E  0362               	mulwf	___wmul@multiplicand& (0+255),b
 20987  005490  CFF3 F064          	movff	prodl,___wmul@product
 20988  005494  CFF4 F065          	movff	prodh,___wmul@product+1
 20989  005498  5160               	movf	___wmul@multiplier& (0+255),w,b
 20990  00549A  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 20991  00549C  50F3               	movf	prodl,w,c
 20992  00549E  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 20993  0054A0  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 20994  0054A2  0362               	mulwf	___wmul@multiplicand& (0+255),b
 20995  0054A4  50F3               	movf	prodl,w,c
 20996  0054A6  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 20997                           
 20998                           ; BSR set to: 0
 20999  0054A8  C064  F060         	movff	___wmul@product,?___wmul
 21000  0054AC  C065  F061         	movff	___wmul@product+1,?___wmul+1
 21001  0054B0  0012               	return	
 21002  0054B2                     __end_of___wmul:
 21003                           	opt stack 0
 21004                           tblptru	equ	0xFF8
 21005                           tblptrh	equ	0xFF7
 21006                           tblptrl	equ	0xFF6
 21007                           tablat	equ	0xFF5
 21008                           prodh	equ	0xFF4
 21009                           prodl	equ	0xFF3
 21010                           intcon	equ	0xFF2
 21011                           intcon3	equ	0xFF0
 21012                           indf0	equ	0xFEF
 21013                           postinc0	equ	0xFEE
 21014                           plusw0	equ	0xFEB
 21015                           fsr0h	equ	0xFEA
 21016                           fsr0l	equ	0xFE9
 21017                           wreg	equ	0xFE8
 21018                           indf1	equ	0xFE7
 21019                           postinc1	equ	0xFE6
 21020                           postdec1	equ	0xFE5
 21021                           plusw1	equ	0xFE3
 21022                           fsr1h	equ	0xFE2
 21023                           fsr1l	equ	0xFE1
 21024                           indf2	equ	0xFDF
 21025                           postinc2	equ	0xFDE
 21026                           postdec2	equ	0xFDD
 21027                           plusw2	equ	0xFDB
 21028                           fsr2h	equ	0xFDA
 21029                           fsr2l	equ	0xFD9
 21030                           status	equ	0xFD8
 21031                           
 21032 ;; *************** function _ethernetController_writeEtherTypeFieldToBuffer *****************
 21033 ;; Defined at:
 21034 ;;		line 241 in file "src/enc424j600/ENC424J600.c"
 21035 ;; Parameters:    Size  Location     Type
 21036 ;;  ethtype         2   15[BANK0 ] enum E5509
 21037 ;;  field           9   17[BANK0 ] struct memoryField
 21038 ;; Auto vars:     Size  Location     Type
 21039 ;;  opcode          1   28[BANK0 ] unsigned char 
 21040 ;;  highByte        1   27[BANK0 ] unsigned char 
 21041 ;;  lowByte         1   26[BANK0 ] unsigned char 
 21042 ;; Return value:  Size  Location     Type
 21043 ;;                  1    wreg      void 
 21044 ;; Registers used:
 21045 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21046 ;; Tracked objects:
 21047 ;;		On entry : 0/0
 21048 ;;		On exit  : 0/0
 21049 ;;		Unchanged: 0/0
 21050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21051 ;;      Params:         0      11       0       0       0       0       0       0       0
 21052 ;;      Locals:         0       3       0       0       0       0       0       0       0
 21053 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21054 ;;      Totals:         0      14       0       0       0       0       0       0       0
 21055 ;;Total ram usage:       14 bytes
 21056 ;; Hardware stack levels used:    1
 21057 ;; Hardware stack levels required when called:    7
 21058 ;; This function calls:
 21059 ;;		_enc424j600_setGPDATAWritePointer
 21060 ;;		_enc424j600_writeSPI
 21061 ;; This function is called by:
 21062 ;;		_ethernet_txFrameRequest
 21063 ;; This function uses a non-reentrant model
 21064 ;;
 21065                           
 21066                           	psect	text80
 21067  004F00                     __ptext80:
 21068                           	opt stack 0
 21069  004F00                     _ethernetController_writeEtherTypeFieldToBuffer:
 21070                           	opt stack 21
 21071                           
 21072                           ;ENC424J600.c: 242: enc424j600_setGPDATAWritePointer(field.start + 0x0006);
 21073                           
 21074                           ; BSR set to: 0
 21075                           ;incstack = 0
 21076  004F00  0E06               	movlw	6
 21077  004F02  0100               	movlb	0	; () banked
 21078  004F04  2571               	addwf	ethernetController_writeEtherTypeFieldToBuffer@field& (0+255),w,b
 21079  004F06  6F6A               	movwf	enc424j600_setGPDATAWritePointer@addr& (0+255),b
 21080  004F08  0E00               	movlw	0
 21081  004F0A  2172               	addwfc	(ethernetController_writeEtherTypeFieldToBuffer@field+1)& (0+255),w,b
 21082  004F0C  6F6B               	movwf	(enc424j600_setGPDATAWritePointer@addr+1)& (0+255),b
 21083  004F0E  ECBC  F028         	call	_enc424j600_setGPDATAWritePointer	;wreg free
 21084                           
 21085                           ;ENC424J600.c: 243: uint8_t lowByte = ethtype & 0x00ff;
 21086  004F12  C06F  F07A         	movff	ethernetController_writeEtherTypeFieldToBuffer@ethtype,ethernetController_writeEt
      +                          herTypeFieldToBuffer@lowByte
 21087                           
 21088                           ;ENC424J600.c: 244: uint8_t highByte = (ethtype & 0xff00) >> 8;
 21089  004F16  0100               	movlb	0	; () banked
 21090  004F18  5170               	movf	(ethernetController_writeEtherTypeFieldToBuffer@ethtype+1)& (0+255),w,b
 21091  004F1A  6F7B               	movwf	ethernetController_writeEtherTypeFieldToBuffer@highByte& (0+255),b
 21092                           
 21093                           ; BSR set to: 0
 21094                           ;ENC424J600.c: 245: uint8_t opcode = 0x2A;
 21095  004F1C  0E2A               	movlw	42
 21096  004F1E  6F7C               	movwf	ethernetController_writeEtherTypeFieldToBuffer@opcode& (0+255),b
 21097                           
 21098                           ; BSR set to: 0
 21099                           ;ENC424J600.c: 246: PORTBbits.RB4=0;
 21100  004F20  9881               	bcf	3969,4,c	;volatile
 21101                           
 21102                           ;ENC424J600.c: 247: enc424j600_writeSPI(&opcode);
 21103  004F22  0E7C               	movlw	low ethernetController_writeEtherTypeFieldToBuffer@opcode
 21104  004F24  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 21105  004F26  0E00               	movlw	high ethernetController_writeEtherTypeFieldToBuffer@opcode
 21106  004F28  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 21107  004F2A  EC20  F026         	call	_enc424j600_writeSPI	;wreg free
 21108                           
 21109                           ;ENC424J600.c: 248: enc424j600_writeSPI(&highByte);
 21110  004F2E  0E7B               	movlw	low ethernetController_writeEtherTypeFieldToBuffer@highByte
 21111  004F30  0100               	movlb	0	; () banked
 21112  004F32  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 21113  004F34  0E00               	movlw	high ethernetController_writeEtherTypeFieldToBuffer@highByte
 21114  004F36  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 21115  004F38  EC20  F026         	call	_enc424j600_writeSPI	;wreg free
 21116                           
 21117                           ;ENC424J600.c: 249: enc424j600_writeSPI(&lowByte);
 21118  004F3C  0E7A               	movlw	low ethernetController_writeEtherTypeFieldToBuffer@lowByte
 21119  004F3E  0100               	movlb	0	; () banked
 21120  004F40  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 21121  004F42  0E00               	movlw	high ethernetController_writeEtherTypeFieldToBuffer@lowByte
 21122  004F44  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 21123  004F46  EC20  F026         	call	_enc424j600_writeSPI	;wreg free
 21124                           
 21125                           ;ENC424J600.c: 250: PORTBbits.RB4=1;
 21126  004F4A  8881               	bsf	3969,4,c	;volatile
 21127  004F4C  0012               	return		;funcret
 21128  004F4E                     __end_of_ethernetController_writeEtherTypeFieldToBuffer:
 21129                           	opt stack 0
 21130                           tblptru	equ	0xFF8
 21131                           tblptrh	equ	0xFF7
 21132                           tblptrl	equ	0xFF6
 21133                           tablat	equ	0xFF5
 21134                           prodh	equ	0xFF4
 21135                           prodl	equ	0xFF3
 21136                           intcon	equ	0xFF2
 21137                           intcon3	equ	0xFF0
 21138                           indf0	equ	0xFEF
 21139                           postinc0	equ	0xFEE
 21140                           plusw0	equ	0xFEB
 21141                           fsr0h	equ	0xFEA
 21142                           fsr0l	equ	0xFE9
 21143                           wreg	equ	0xFE8
 21144                           indf1	equ	0xFE7
 21145                           postinc1	equ	0xFE6
 21146                           postdec1	equ	0xFE5
 21147                           plusw1	equ	0xFE3
 21148                           fsr1h	equ	0xFE2
 21149                           fsr1l	equ	0xFE1
 21150                           indf2	equ	0xFDF
 21151                           postinc2	equ	0xFDE
 21152                           postdec2	equ	0xFDD
 21153                           plusw2	equ	0xFDB
 21154                           fsr2h	equ	0xFDA
 21155                           fsr2l	equ	0xFD9
 21156                           status	equ	0xFD8
 21157                           
 21158 ;; *************** function _ethernetController_writeDestinationMACAddress *****************
 21159 ;; Defined at:
 21160 ;;		line 228 in file "src/enc424j600/ENC424J600.c"
 21161 ;; Parameters:    Size  Location     Type
 21162 ;;  addr            6   15[BANK0 ] struct macaddress
 21163 ;;  field           9   21[BANK0 ] struct memoryField
 21164 ;; Auto vars:     Size  Location     Type
 21165 ;;  i               1   37[BANK0 ] unsigned char 
 21166 ;;  i               1   38[BANK0 ] unsigned char 
 21167 ;;  data            6   30[BANK0 ] unsigned char [6]
 21168 ;;  opcode          1   36[BANK0 ] unsigned char 
 21169 ;; Return value:  Size  Location     Type
 21170 ;;                  1    wreg      void 
 21171 ;; Registers used:
 21172 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21173 ;; Tracked objects:
 21174 ;;		On entry : 0/0
 21175 ;;		On exit  : 0/0
 21176 ;;		Unchanged: 0/0
 21177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21178 ;;      Params:         0      15       0       0       0       0       0       0       0
 21179 ;;      Locals:         0       9       0       0       0       0       0       0       0
 21180 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21181 ;;      Totals:         0      24       0       0       0       0       0       0       0
 21182 ;;Total ram usage:       24 bytes
 21183 ;; Hardware stack levels used:    1
 21184 ;; Hardware stack levels required when called:    7
 21185 ;; This function calls:
 21186 ;;		_enc424j600_setGPDATAWritePointer
 21187 ;;		_enc424j600_writeSPI
 21188 ;; This function is called by:
 21189 ;;		_ethernet_txFrameRequest
 21190 ;;		_ipv4_sendFrame
 21191 ;; This function uses a non-reentrant model
 21192 ;;
 21193                           
 21194                           	psect	text81
 21195  004742                     __ptext81:
 21196                           	opt stack 0
 21197  004742                     _ethernetController_writeDestinationMACAddress:
 21198                           	opt stack 21
 21199                           
 21200                           ;ENC424J600.c: 229: enc424j600_setGPDATAWritePointer(field.start);
 21201                           
 21202                           ;incstack = 0
 21203  004742  C075  F06A         	movff	ethernetController_writeDestinationMACAddress@field,enc424j600_setGPDATAWritePoin
      +                          ter@addr
 21204  004746  C076  F06B         	movff	ethernetController_writeDestinationMACAddress@field+1,enc424j600_setGPDATAWritePo
      +                          inter@addr+1
 21205  00474A  ECBC  F028         	call	_enc424j600_setGPDATAWritePointer	;wreg free
 21206                           
 21207                           ;ENC424J600.c: 230: uint8_t data[6];
 21208                           ;ENC424J600.c: 231: for (uint8_t i = 0; i < 6; i++)
 21209  00474E  0E00               	movlw	0
 21210  004750  0100               	movlb	0	; () banked
 21211  004752  6F86               	movwf	ethernetController_writeDestinationMACAddress@i& (0+255),b
 21212  004754                     l8437:
 21213                           
 21214                           ; BSR set to: 0
 21215  004754  0E05               	movlw	5
 21216  004756  6586               	cpfsgt	ethernetController_writeDestinationMACAddress@i& (0+255),b
 21217  004758  D001               	goto	l140
 21218  00475A  D014               	goto	u9030
 21219  00475C                     l140:
 21220                           
 21221                           ; BSR set to: 0
 21222                           ;ENC424J600.c: 232: data[i] = addr.address[i];
 21223                           
 21224                           ; BSR set to: 0
 21225  00475C  5186               	movf	ethernetController_writeDestinationMACAddress@i& (0+255),w,b
 21226  00475E  0D01               	mullw	1
 21227  004760  0E6F               	movlw	low ethernetController_writeDestinationMACAddress@addr
 21228  004762  24F3               	addwf	prodl,w,c
 21229  004764  6ED9               	movwf	fsr2l,c
 21230  004766  0E00               	movlw	high ethernetController_writeDestinationMACAddress@addr
 21231  004768  20F4               	addwfc	prodh,w,c
 21232  00476A  6EDA               	movwf	fsr2h,c
 21233  00476C  5186               	movf	ethernetController_writeDestinationMACAddress@i& (0+255),w,b
 21234  00476E  0D01               	mullw	1
 21235  004770  0E7E               	movlw	low ethernetController_writeDestinationMACAddress@data
 21236  004772  24F3               	addwf	prodl,w,c
 21237  004774  6EE1               	movwf	fsr1l,c
 21238  004776  0E00               	movlw	high ethernetController_writeDestinationMACAddress@data
 21239  004778  20F4               	addwfc	prodh,w,c
 21240  00477A  6EE2               	movwf	fsr1h,c
 21241  00477C  CFDF FFE7          	movff	indf2,indf1
 21242                           
 21243                           ; BSR set to: 0
 21244  004780  2B86               	incf	ethernetController_writeDestinationMACAddress@i& (0+255),f,b
 21245  004782  D7E8               	goto	l8437
 21246  004784                     u9030:
 21247                           
 21248                           ; BSR set to: 0
 21249                           ;ENC424J600.c: 233: uint8_t opcode = 0x2A;
 21250                           
 21251                           ; BSR set to: 0
 21252  004784  0E2A               	movlw	42
 21253  004786  6F84               	movwf	ethernetController_writeDestinationMACAddress@opcode& (0+255),b
 21254                           
 21255                           ; BSR set to: 0
 21256                           ;ENC424J600.c: 234: PORTBbits.RB4=0;
 21257  004788  9881               	bcf	3969,4,c	;volatile
 21258                           
 21259                           ; BSR set to: 0
 21260                           ;ENC424J600.c: 235: enc424j600_writeSPI(&opcode);
 21261  00478A  0E84               	movlw	low ethernetController_writeDestinationMACAddress@opcode
 21262  00478C  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 21263  00478E  0E00               	movlw	high ethernetController_writeDestinationMACAddress@opcode
 21264  004790  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 21265  004792  EC20  F026         	call	_enc424j600_writeSPI	;wreg free
 21266                           
 21267                           ;ENC424J600.c: 236: for (uint8_t i = 0; i < 6; i++)
 21268  004796  0E00               	movlw	0
 21269  004798  0100               	movlb	0	; () banked
 21270  00479A  6F85               	movwf	ethernetController_writeDestinationMACAddress@i_638& (0+255),b
 21271  00479C                     l8455:
 21272                           
 21273                           ; BSR set to: 0
 21274  00479C  0E05               	movlw	5
 21275  00479E  6585               	cpfsgt	ethernetController_writeDestinationMACAddress@i_638& (0+255),b
 21276  0047A0  D001               	goto	l142
 21277  0047A2  D00D               	goto	u9050
 21278  0047A4                     l142:
 21279                           
 21280                           ; BSR set to: 0
 21281                           ;ENC424J600.c: 237: enc424j600_writeSPI(&data[i]);
 21282                           
 21283                           ; BSR set to: 0
 21284  0047A4  5185               	movf	ethernetController_writeDestinationMACAddress@i_638& (0+255),w,b
 21285  0047A6  0D01               	mullw	1
 21286  0047A8  0E7E               	movlw	low ethernetController_writeDestinationMACAddress@data
 21287  0047AA  24F3               	addwf	prodl,w,c
 21288  0047AC  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 21289  0047AE  0E00               	movlw	high ethernetController_writeDestinationMACAddress@data
 21290  0047B0  20F4               	addwfc	prodh,w,c
 21291  0047B2  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 21292  0047B4  EC20  F026         	call	_enc424j600_writeSPI	;wreg free
 21293  0047B8  0100               	movlb	0	; () banked
 21294  0047BA  2B85               	incf	ethernetController_writeDestinationMACAddress@i_638& (0+255),f,b
 21295  0047BC  D7EF               	goto	l8455
 21296  0047BE                     u9050:
 21297                           
 21298                           ; BSR set to: 0
 21299                           ;ENC424J600.c: 238: PORTBbits.RB4=1;
 21300  0047BE  8881               	bsf	3969,4,c	;volatile
 21301                           
 21302                           ; BSR set to: 0
 21303  0047C0  0012               	return		;funcret
 21304  0047C2                     __end_of_ethernetController_writeDestinationMACAddress:
 21305                           	opt stack 0
 21306                           tblptru	equ	0xFF8
 21307                           tblptrh	equ	0xFF7
 21308                           tblptrl	equ	0xFF6
 21309                           tablat	equ	0xFF5
 21310                           prodh	equ	0xFF4
 21311                           prodl	equ	0xFF3
 21312                           intcon	equ	0xFF2
 21313                           intcon3	equ	0xFF0
 21314                           indf0	equ	0xFEF
 21315                           postinc0	equ	0xFEE
 21316                           plusw0	equ	0xFEB
 21317                           fsr0h	equ	0xFEA
 21318                           fsr0l	equ	0xFE9
 21319                           wreg	equ	0xFE8
 21320                           indf1	equ	0xFE7
 21321                           postinc1	equ	0xFE6
 21322                           postdec1	equ	0xFE5
 21323                           plusw1	equ	0xFE3
 21324                           fsr1h	equ	0xFE2
 21325                           fsr1l	equ	0xFE1
 21326                           indf2	equ	0xFDF
 21327                           postinc2	equ	0xFDE
 21328                           postdec2	equ	0xFDD
 21329                           plusw2	equ	0xFDB
 21330                           fsr2h	equ	0xFDA
 21331                           fsr2l	equ	0xFD9
 21332                           status	equ	0xFD8
 21333                           
 21334 ;; *************** function _ethernetController_streamToTransmitBuffer *****************
 21335 ;; Defined at:
 21336 ;;		line 208 in file "src/enc424j600/ENC424J600.c"
 21337 ;; Parameters:    Size  Location     Type
 21338 ;;  data            1    wreg     unsigned char 
 21339 ;;  field           9   15[BANK0 ] struct memoryField
 21340 ;; Auto vars:     Size  Location     Type
 21341 ;;  data            1   28[BANK0 ] unsigned char 
 21342 ;;  opcode          1   29[BANK0 ] unsigned char 
 21343 ;; Return value:  Size  Location     Type
 21344 ;;                  1    wreg      void 
 21345 ;; Registers used:
 21346 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21347 ;; Tracked objects:
 21348 ;;		On entry : 0/0
 21349 ;;		On exit  : 0/0
 21350 ;;		Unchanged: 0/0
 21351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21352 ;;      Params:         0       9       0       0       0       0       0       0       0
 21353 ;;      Locals:         0       2       0       0       0       0       0       0       0
 21354 ;;      Temps:          0       4       0       0       0       0       0       0       0
 21355 ;;      Totals:         0      15       0       0       0       0       0       0       0
 21356 ;;Total ram usage:       15 bytes
 21357 ;; Hardware stack levels used:    1
 21358 ;; Hardware stack levels required when called:    7
 21359 ;; This function calls:
 21360 ;;		_enc424j600_setGPDATAWritePointer
 21361 ;;		_enc424j600_writeSPI
 21362 ;; This function is called by:
 21363 ;;		_arp_send
 21364 ;;		_ipv4_streamToTransmissionBuffer
 21365 ;; This function uses a non-reentrant model
 21366 ;;
 21367                           
 21368                           	psect	text82
 21369  0048BA                     __ptext82:
 21370                           	opt stack 0
 21371  0048BA                     _ethernetController_streamToTransmitBuffer:
 21372                           	opt stack 22
 21373                           
 21374                           ; BSR set to: 0
 21375                           ;incstack = 0
 21376                           ;ethernetController_streamToTransmitBuffer@data stored from wreg
 21377  0048BA  0100               	movlb	0	; () banked
 21378  0048BC  6F7C               	movwf	ethernetController_streamToTransmitBuffer@data& (0+255),b
 21379                           
 21380                           ;ENC424J600.c: 209: uint8_t opcode;
 21381                           ;ENC424J600.c: 210: uint16_t static pointer = 0;
 21382                           ;ENC424J600.c: 211: if (pointer == 0) {
 21383  0048BE  503E               	movf	ethernetController_streamToTransmitBuffer@pointer,w,c
 21384  0048C0  103F               	iorwf	ethernetController_streamToTransmitBuffer@pointer+1,w,c
 21385  0048C2  A4D8               	btfss	status,2,c
 21386  0048C4  D010               	goto	l134
 21387                           
 21388                           ;ENC424J600.c: 212: enc424j600_setGPDATAWritePointer(field.start);
 21389  0048C6  C06F  F06A         	movff	ethernetController_streamToTransmitBuffer@field,enc424j600_setGPDATAWritePointer@
      +                          addr
 21390  0048CA  C070  F06B         	movff	ethernetController_streamToTransmitBuffer@field+1,enc424j600_setGPDATAWritePointe
      +                          r@addr+1
 21391  0048CE  ECBC  F028         	call	_enc424j600_setGPDATAWritePointer	;wreg free
 21392                           
 21393                           ;ENC424J600.c: 213: opcode = 0x2A;
 21394  0048D2  0E2A               	movlw	42
 21395  0048D4  0100               	movlb	0	; () banked
 21396  0048D6  6F7D               	movwf	ethernetController_streamToTransmitBuffer@opcode& (0+255),b
 21397                           
 21398                           ; BSR set to: 0
 21399                           ;ENC424J600.c: 214: PORTBbits.RB4=0;
 21400  0048D8  9881               	bcf	3969,4,c	;volatile
 21401                           
 21402                           ; BSR set to: 0
 21403                           ;ENC424J600.c: 215: enc424j600_writeSPI(&opcode);
 21404  0048DA  0E7D               	movlw	low ethernetController_streamToTransmitBuffer@opcode
 21405  0048DC  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 21406  0048DE  0E00               	movlw	high ethernetController_streamToTransmitBuffer@opcode
 21407  0048E0  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 21408  0048E2  EC20  F026         	call	_enc424j600_writeSPI	;wreg free
 21409  0048E6                     l134:
 21410                           
 21411                           ;ENC424J600.c: 216: }
 21412                           ;ENC424J600.c: 218: enc424j600_writeSPI(&data);
 21413  0048E6  0E7C               	movlw	low ethernetController_streamToTransmitBuffer@data
 21414  0048E8  0100               	movlb	0	; () banked
 21415  0048EA  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 21416  0048EC  0E00               	movlw	high ethernetController_streamToTransmitBuffer@data
 21417  0048EE  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 21418  0048F0  EC20  F026         	call	_enc424j600_writeSPI	;wreg free
 21419                           
 21420                           ;ENC424J600.c: 220: if (pointer == field.length - 1) {
 21421  0048F4  0EFF               	movlw	255
 21422  0048F6  0100               	movlb	0	; () banked
 21423  0048F8  6F78               	movwf	??_ethernetController_streamToTransmitBuffer& (0+255),b
 21424  0048FA  0EFF               	movlw	255
 21425  0048FC  6F79               	movwf	(??_ethernetController_streamToTransmitBuffer+1)& (0+255),b
 21426  0048FE  EE20  F073         	lfsr	2,ethernetController_streamToTransmitBuffer@field+4
 21427  004902  CFDE F07A          	movff	postinc2,??_ethernetController_streamToTransmitBuffer+2
 21428  004906  CFDD F07B          	movff	postdec2,??_ethernetController_streamToTransmitBuffer+3
 21429  00490A  5178               	movf	??_ethernetController_streamToTransmitBuffer& (0+255),w,b
 21430  00490C  277A               	addwf	(??_ethernetController_streamToTransmitBuffer+2)& (0+255),f,b
 21431  00490E  5179               	movf	(??_ethernetController_streamToTransmitBuffer+1)& (0+255),w,b
 21432  004910  237B               	addwfc	(??_ethernetController_streamToTransmitBuffer+3)& (0+255),f,b
 21433  004912  503E               	movf	ethernetController_streamToTransmitBuffer@pointer,w,c
 21434  004914  197A               	xorwf	(??_ethernetController_streamToTransmitBuffer+2)& (0+255),w,b
 21435  004916  E10A               	bnz	l8715
 21436  004918  503F               	movf	ethernetController_streamToTransmitBuffer@pointer+1,w,c
 21437  00491A  197B               	xorwf	(??_ethernetController_streamToTransmitBuffer+3)& (0+255),w,b
 21438  00491C  A4D8               	btfss	status,2,c
 21439  00491E  D006               	goto	l135
 21440                           
 21441                           ; BSR set to: 0
 21442                           ;ENC424J600.c: 221: PORTBbits.RB4=1;
 21443  004920  8881               	bsf	3969,4,c	;volatile
 21444                           
 21445                           ; BSR set to: 0
 21446                           ;ENC424J600.c: 222: pointer = 0;
 21447  004922  0E00               	movlw	0
 21448  004924  6E3F               	movwf	ethernetController_streamToTransmitBuffer@pointer+1,c
 21449  004926  0E00               	movlw	0
 21450  004928  6E3E               	movwf	ethernetController_streamToTransmitBuffer@pointer,c
 21451                           
 21452                           ;ENC424J600.c: 223: } else {
 21453  00492A  0012               	return	
 21454  00492C                     l135:
 21455  00492C                     l8715:
 21456                           
 21457                           ; BSR set to: 0
 21458                           ;ENC424J600.c: 224: pointer++;
 21459  00492C  4A3E               	infsnz	ethernetController_streamToTransmitBuffer@pointer,f,c
 21460  00492E  2A3F               	incf	ethernetController_streamToTransmitBuffer@pointer+1,f,c
 21461  004930  0012               	return	
 21462  004932                     __end_of_ethernetController_streamToTransmitBuffer:
 21463                           	opt stack 0
 21464                           tblptru	equ	0xFF8
 21465                           tblptrh	equ	0xFF7
 21466                           tblptrl	equ	0xFF6
 21467                           tablat	equ	0xFF5
 21468                           prodh	equ	0xFF4
 21469                           prodl	equ	0xFF3
 21470                           intcon	equ	0xFF2
 21471                           intcon3	equ	0xFF0
 21472                           indf0	equ	0xFEF
 21473                           postinc0	equ	0xFEE
 21474                           plusw0	equ	0xFEB
 21475                           fsr0h	equ	0xFEA
 21476                           fsr0l	equ	0xFE9
 21477                           wreg	equ	0xFE8
 21478                           indf1	equ	0xFE7
 21479                           postinc1	equ	0xFE6
 21480                           postdec1	equ	0xFE5
 21481                           plusw1	equ	0xFE3
 21482                           fsr1h	equ	0xFE2
 21483                           fsr1l	equ	0xFE1
 21484                           indf2	equ	0xFDF
 21485                           postinc2	equ	0xFDE
 21486                           postdec2	equ	0xFDD
 21487                           plusw2	equ	0xFDB
 21488                           fsr2h	equ	0xFDA
 21489                           fsr2l	equ	0xFD9
 21490                           status	equ	0xFD8
 21491                           
 21492 ;; *************** function _enc424j600_setGPDATAWritePointer *****************
 21493 ;; Defined at:
 21494 ;;		line 609 in file "src/enc424j600/ENC424J600.c"
 21495 ;; Parameters:    Size  Location     Type
 21496 ;;  addr            2   10[BANK0 ] unsigned int 
 21497 ;; Auto vars:     Size  Location     Type
 21498 ;;  highByte        1   14[BANK0 ] unsigned char 
 21499 ;;  lowByte         1   13[BANK0 ] unsigned char 
 21500 ;;  opcode          1   12[BANK0 ] unsigned char 
 21501 ;; Return value:  Size  Location     Type
 21502 ;;                  1    wreg      void 
 21503 ;; Registers used:
 21504 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21505 ;; Tracked objects:
 21506 ;;		On entry : 0/0
 21507 ;;		On exit  : 0/0
 21508 ;;		Unchanged: 0/0
 21509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21510 ;;      Params:         0       2       0       0       0       0       0       0       0
 21511 ;;      Locals:         0       3       0       0       0       0       0       0       0
 21512 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21513 ;;      Totals:         0       5       0       0       0       0       0       0       0
 21514 ;;Total ram usage:        5 bytes
 21515 ;; Hardware stack levels used:    1
 21516 ;; Hardware stack levels required when called:    6
 21517 ;; This function calls:
 21518 ;;		_enc424j600_writeSPI
 21519 ;; This function is called by:
 21520 ;;		_ethernetController_streamToTransmitBuffer
 21521 ;;		_ethernetController_writeDestinationMACAddress
 21522 ;;		_ethernetController_writeEtherTypeFieldToBuffer
 21523 ;; This function uses a non-reentrant model
 21524 ;;
 21525                           
 21526                           	psect	text83
 21527  005178                     __ptext83:
 21528                           	opt stack 0
 21529  005178                     _enc424j600_setGPDATAWritePointer:
 21530                           	opt stack 21
 21531                           
 21532                           ;ENC424J600.c: 610: uint8_t opcode = 0x6C;
 21533                           
 21534                           ; BSR set to: 0
 21535                           ;incstack = 0
 21536  005178  0E6C               	movlw	108
 21537  00517A  0100               	movlb	0	; () banked
 21538  00517C  6F6C               	movwf	enc424j600_setGPDATAWritePointer@opcode& (0+255),b
 21539                           
 21540                           ; BSR set to: 0
 21541                           ;ENC424J600.c: 611: uint8_t lowByte = addr & 0x00ff;
 21542  00517E  C06A  F06D         	movff	enc424j600_setGPDATAWritePointer@addr,enc424j600_setGPDATAWritePointer@lowByte
 21543                           
 21544                           ;ENC424J600.c: 612: uint8_t highByte = (addr & 0xff00) >> 8;
 21545  005182  516B               	movf	(enc424j600_setGPDATAWritePointer@addr+1)& (0+255),w,b
 21546  005184  6F6E               	movwf	enc424j600_setGPDATAWritePointer@highByte& (0+255),b
 21547                           
 21548                           ; BSR set to: 0
 21549                           ;ENC424J600.c: 613: PORTBbits.RB4=0;
 21550  005186  9881               	bcf	3969,4,c	;volatile
 21551                           
 21552                           ; BSR set to: 0
 21553                           ;ENC424J600.c: 614: enc424j600_writeSPI(&opcode);
 21554  005188  0E6C               	movlw	low enc424j600_setGPDATAWritePointer@opcode
 21555  00518A  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 21556  00518C  0E00               	movlw	high enc424j600_setGPDATAWritePointer@opcode
 21557  00518E  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 21558  005190  EC20  F026         	call	_enc424j600_writeSPI	;wreg free
 21559                           
 21560                           ;ENC424J600.c: 615: enc424j600_writeSPI(&lowByte);
 21561  005194  0E6D               	movlw	low enc424j600_setGPDATAWritePointer@lowByte
 21562  005196  0100               	movlb	0	; () banked
 21563  005198  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 21564  00519A  0E00               	movlw	high enc424j600_setGPDATAWritePointer@lowByte
 21565  00519C  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 21566  00519E  EC20  F026         	call	_enc424j600_writeSPI	;wreg free
 21567                           
 21568                           ;ENC424J600.c: 616: enc424j600_writeSPI(&highByte);
 21569  0051A2  0E6E               	movlw	low enc424j600_setGPDATAWritePointer@highByte
 21570  0051A4  0100               	movlb	0	; () banked
 21571  0051A6  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 21572  0051A8  0E00               	movlw	high enc424j600_setGPDATAWritePointer@highByte
 21573  0051AA  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 21574  0051AC  EC20  F026         	call	_enc424j600_writeSPI	;wreg free
 21575                           
 21576                           ;ENC424J600.c: 617: PORTBbits.RB4=1;
 21577  0051B0  8881               	bsf	3969,4,c	;volatile
 21578  0051B2  0012               	return		;funcret
 21579  0051B4                     __end_of_enc424j600_setGPDATAWritePointer:
 21580                           	opt stack 0
 21581                           tblptru	equ	0xFF8
 21582                           tblptrh	equ	0xFF7
 21583                           tblptrl	equ	0xFF6
 21584                           tablat	equ	0xFF5
 21585                           prodh	equ	0xFF4
 21586                           prodl	equ	0xFF3
 21587                           intcon	equ	0xFF2
 21588                           intcon3	equ	0xFF0
 21589                           indf0	equ	0xFEF
 21590                           postinc0	equ	0xFEE
 21591                           plusw0	equ	0xFEB
 21592                           fsr0h	equ	0xFEA
 21593                           fsr0l	equ	0xFE9
 21594                           wreg	equ	0xFE8
 21595                           indf1	equ	0xFE7
 21596                           postinc1	equ	0xFE6
 21597                           postdec1	equ	0xFE5
 21598                           plusw1	equ	0xFE3
 21599                           fsr1h	equ	0xFE2
 21600                           fsr1l	equ	0xFE1
 21601                           indf2	equ	0xFDF
 21602                           postinc2	equ	0xFDE
 21603                           postdec2	equ	0xFDD
 21604                           plusw2	equ	0xFDB
 21605                           fsr2h	equ	0xFDA
 21606                           fsr2l	equ	0xFD9
 21607                           status	equ	0xFD8
 21608                           
 21609 ;; *************** function _ethernetController_sendPacket *****************
 21610 ;; Defined at:
 21611 ;;		line 201 in file "src/enc424j600/ENC424J600.c"
 21612 ;; Parameters:    Size  Location     Type
 21613 ;;  field           9   18[BANK0 ] struct memoryField
 21614 ;; Auto vars:     Size  Location     Type
 21615 ;;		None
 21616 ;; Return value:  Size  Location     Type
 21617 ;;                  1    wreg      void 
 21618 ;; Registers used:
 21619 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21620 ;; Tracked objects:
 21621 ;;		On entry : 0/0
 21622 ;;		On exit  : 0/0
 21623 ;;		Unchanged: 0/0
 21624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21625 ;;      Params:         0       9       0       0       0       0       0       0       0
 21626 ;;      Locals:         0       0       0       0       0       0       0       0       0
 21627 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21628 ;;      Totals:         0       9       0       0       0       0       0       0       0
 21629 ;;Total ram usage:        9 bytes
 21630 ;; Hardware stack levels used:    1
 21631 ;; Hardware stack levels required when called:    8
 21632 ;; This function calls:
 21633 ;;		_enc424j600_setTXLength
 21634 ;;		_enc424j600_setTXStartAddress
 21635 ;;		_enc424j600_writeSingleByte
 21636 ;;		_memory_txFrameClear
 21637 ;; This function is called by:
 21638 ;;		_arp_send
 21639 ;;		_ipv4_sendFrame
 21640 ;; This function uses a non-reentrant model
 21641 ;;
 21642                           
 21643                           	psect	text84
 21644  0054B2                     __ptext84:
 21645                           	opt stack 0
 21646  0054B2                     _ethernetController_sendPacket:
 21647                           	opt stack 20
 21648                           
 21649                           ;ENC424J600.c: 202: enc424j600_setTXStartAddress(field.start);
 21650                           
 21651                           ;incstack = 0
 21652  0054B2  C072  F06E         	movff	ethernetController_sendPacket@field,enc424j600_setTXStartAddress@addr
 21653  0054B6  C073  F06F         	movff	ethernetController_sendPacket@field+1,enc424j600_setTXStartAddress@addr+1
 21654  0054BA  ECDD  F029         	call	_enc424j600_setTXStartAddress	;wreg free
 21655                           
 21656                           ;ENC424J600.c: 203: enc424j600_setTXLength(field.length);
 21657  0054BE  C076  F06E         	movff	ethernetController_sendPacket@field+4,enc424j600_setTXLength@len
 21658  0054C2  C077  F06F         	movff	ethernetController_sendPacket@field+5,enc424j600_setTXLength@len+1
 21659  0054C6  ECF2  F029         	call	_enc424j600_setTXLength	;wreg free
 21660                           
 21661                           ;ENC424J600.c: 204: enc424j600_writeSingleByte(0b11010100);
 21662  0054CA  0ED4               	movlw	212
 21663  0054CC  EC28  F02B         	call	_enc424j600_writeSingleByte
 21664                           
 21665                           ;ENC424J600.c: 205: memory_txFrameClear(field.index);
 21666  0054D0  0100               	movlb	0	; () banked
 21667  0054D2  517A               	movf	(ethernetController_sendPacket@field+8)& (0+255),w,b
 21668  0054D4  ECBA  F02A         	call	_memory_txFrameClear
 21669  0054D8  0012               	return		;funcret
 21670  0054DA                     __end_of_ethernetController_sendPacket:
 21671                           	opt stack 0
 21672                           tblptru	equ	0xFF8
 21673                           tblptrh	equ	0xFF7
 21674                           tblptrl	equ	0xFF6
 21675                           tablat	equ	0xFF5
 21676                           prodh	equ	0xFF4
 21677                           prodl	equ	0xFF3
 21678                           intcon	equ	0xFF2
 21679                           intcon3	equ	0xFF0
 21680                           indf0	equ	0xFEF
 21681                           postinc0	equ	0xFEE
 21682                           plusw0	equ	0xFEB
 21683                           fsr0h	equ	0xFEA
 21684                           fsr0l	equ	0xFE9
 21685                           wreg	equ	0xFE8
 21686                           indf1	equ	0xFE7
 21687                           postinc1	equ	0xFE6
 21688                           postdec1	equ	0xFE5
 21689                           plusw1	equ	0xFE3
 21690                           fsr1h	equ	0xFE2
 21691                           fsr1l	equ	0xFE1
 21692                           indf2	equ	0xFDF
 21693                           postinc2	equ	0xFDE
 21694                           postdec2	equ	0xFDD
 21695                           plusw2	equ	0xFDB
 21696                           fsr2h	equ	0xFDA
 21697                           fsr2l	equ	0xFD9
 21698                           status	equ	0xFD8
 21699                           
 21700 ;; *************** function _memory_txFrameClear *****************
 21701 ;; Defined at:
 21702 ;;		line 221 in file "src/mem/memoryController.c"
 21703 ;; Parameters:    Size  Location     Type
 21704 ;;  index           1    wreg     unsigned char 
 21705 ;; Auto vars:     Size  Location     Type
 21706 ;;  index           1    0[BANK0 ] unsigned char 
 21707 ;; Return value:  Size  Location     Type
 21708 ;;                  1    wreg      void 
 21709 ;; Registers used:
 21710 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 21711 ;; Tracked objects:
 21712 ;;		On entry : 0/0
 21713 ;;		On exit  : 0/0
 21714 ;;		Unchanged: 0/0
 21715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21716 ;;      Params:         0       0       0       0       0       0       0       0       0
 21717 ;;      Locals:         0       1       0       0       0       0       0       0       0
 21718 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21719 ;;      Totals:         0       1       0       0       0       0       0       0       0
 21720 ;;Total ram usage:        1 bytes
 21721 ;; Hardware stack levels used:    1
 21722 ;; Hardware stack levels required when called:    4
 21723 ;; This function calls:
 21724 ;;		Nothing
 21725 ;; This function is called by:
 21726 ;;		_ethernetController_sendPacket
 21727 ;; This function uses a non-reentrant model
 21728 ;;
 21729                           
 21730                           	psect	text85
 21731  005574                     __ptext85:
 21732                           	opt stack 0
 21733  005574                     _memory_txFrameClear:
 21734                           	opt stack 23
 21735                           
 21736                           ;incstack = 0
 21737                           ;memory_txFrameClear@index stored from wreg
 21738  005574  0100               	movlb	0	; () banked
 21739  005576  6F60               	movwf	memory_txFrameClear@index& (0+255),b
 21740                           
 21741                           ;memoryController.c: 222: occupiedMemory[index].fIsAssigned = 0;
 21742  005578  0100               	movlb	0	; () banked
 21743  00557A  5160               	movf	memory_txFrameClear@index& (0+255),w,b
 21744  00557C  0D09               	mullw	9
 21745  00557E  0E06               	movlw	6
 21746  005580  26F3               	addwf	prodl,f,c
 21747  005582  0E00               	movlw	0
 21748  005584  22F4               	addwfc	prodh,f,c
 21749  005586  0E00               	movlw	low _occupiedMemory
 21750  005588  24F3               	addwf	prodl,w,c
 21751  00558A  6ED9               	movwf	fsr2l,c
 21752  00558C  0E02               	movlw	high _occupiedMemory
 21753  00558E  20F4               	addwfc	prodh,w,c
 21754  005590  6EDA               	movwf	fsr2h,c
 21755  005592  0E00               	movlw	0
 21756  005594  6EDF               	movwf	indf2,c
 21757                           
 21758                           ; BSR set to: 0
 21759  005596  0012               	return		;funcret
 21760  005598                     __end_of_memory_txFrameClear:
 21761                           	opt stack 0
 21762                           tblptru	equ	0xFF8
 21763                           tblptrh	equ	0xFF7
 21764                           tblptrl	equ	0xFF6
 21765                           tablat	equ	0xFF5
 21766                           prodh	equ	0xFF4
 21767                           prodl	equ	0xFF3
 21768                           intcon	equ	0xFF2
 21769                           intcon3	equ	0xFF0
 21770                           indf0	equ	0xFEF
 21771                           postinc0	equ	0xFEE
 21772                           plusw0	equ	0xFEB
 21773                           fsr0h	equ	0xFEA
 21774                           fsr0l	equ	0xFE9
 21775                           wreg	equ	0xFE8
 21776                           indf1	equ	0xFE7
 21777                           postinc1	equ	0xFE6
 21778                           postdec1	equ	0xFE5
 21779                           plusw1	equ	0xFE3
 21780                           fsr1h	equ	0xFE2
 21781                           fsr1l	equ	0xFE1
 21782                           indf2	equ	0xFDF
 21783                           postinc2	equ	0xFDE
 21784                           postdec2	equ	0xFDD
 21785                           plusw2	equ	0xFDB
 21786                           fsr2h	equ	0xFDA
 21787                           fsr2l	equ	0xFD9
 21788                           status	equ	0xFD8
 21789                           
 21790 ;; *************** function _enc424j600_setTXStartAddress *****************
 21791 ;; Defined at:
 21792 ;;		line 602 in file "src/enc424j600/ENC424J600.c"
 21793 ;; Parameters:    Size  Location     Type
 21794 ;;  addr            2   14[BANK0 ] unsigned int 
 21795 ;; Auto vars:     Size  Location     Type
 21796 ;;  highByte        1   17[BANK0 ] unsigned char 
 21797 ;;  lowByte         1   16[BANK0 ] unsigned char 
 21798 ;; Return value:  Size  Location     Type
 21799 ;;                  1    wreg      void 
 21800 ;; Registers used:
 21801 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21802 ;; Tracked objects:
 21803 ;;		On entry : 0/0
 21804 ;;		On exit  : 0/0
 21805 ;;		Unchanged: 0/0
 21806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21807 ;;      Params:         0       2       0       0       0       0       0       0       0
 21808 ;;      Locals:         0       2       0       0       0       0       0       0       0
 21809 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21810 ;;      Totals:         0       4       0       0       0       0       0       0       0
 21811 ;;Total ram usage:        4 bytes
 21812 ;; Hardware stack levels used:    1
 21813 ;; Hardware stack levels required when called:    7
 21814 ;; This function calls:
 21815 ;;		_enc424j600_writeControlRegisterUnbanked
 21816 ;; This function is called by:
 21817 ;;		_ethernetController_sendPacket
 21818 ;; This function uses a non-reentrant model
 21819 ;;
 21820                           
 21821                           	psect	text86
 21822  0053BA                     __ptext86:
 21823                           	opt stack 0
 21824  0053BA                     _enc424j600_setTXStartAddress:
 21825                           	opt stack 20
 21826                           
 21827                           ;ENC424J600.c: 603: uint8_t lowByte = addr & 0xff;
 21828                           
 21829                           ; BSR set to: 0
 21830                           ;incstack = 0
 21831  0053BA  C06E  F070         	movff	enc424j600_setTXStartAddress@addr,enc424j600_setTXStartAddress@lowByte
 21832                           
 21833                           ;ENC424J600.c: 604: uint8_t highByte = (addr & 0xff00) >> 8;
 21834  0053BE  0100               	movlb	0	; () banked
 21835  0053C0  516F               	movf	(enc424j600_setTXStartAddress@addr+1)& (0+255),w,b
 21836  0053C2  6F71               	movwf	enc424j600_setTXStartAddress@highByte& (0+255),b
 21837                           
 21838                           ; BSR set to: 0
 21839                           ;ENC424J600.c: 605: enc424j600_writeControlRegisterUnbanked(0x00 + 0x00, &lowByte);
 21840  0053C4  0E70               	movlw	low enc424j600_setTXStartAddress@lowByte
 21841  0053C6  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 21842  0053C8  0E00               	movlw	high enc424j600_setTXStartAddress@lowByte
 21843  0053CA  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 21844  0053CC  0E00               	movlw	0
 21845  0053CE  EC30  F029         	call	_enc424j600_writeControlRegisterUnbanked
 21846                           
 21847                           ;ENC424J600.c: 606: enc424j600_writeControlRegisterUnbanked(0x01 + 0x00, &highByte);
 21848  0053D2  0E71               	movlw	low enc424j600_setTXStartAddress@highByte
 21849  0053D4  0100               	movlb	0	; () banked
 21850  0053D6  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 21851  0053D8  0E00               	movlw	high enc424j600_setTXStartAddress@highByte
 21852  0053DA  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 21853  0053DC  0E01               	movlw	1
 21854  0053DE  EC30  F029         	call	_enc424j600_writeControlRegisterUnbanked
 21855  0053E2  0012               	return		;funcret
 21856  0053E4                     __end_of_enc424j600_setTXStartAddress:
 21857                           	opt stack 0
 21858                           tblptru	equ	0xFF8
 21859                           tblptrh	equ	0xFF7
 21860                           tblptrl	equ	0xFF6
 21861                           tablat	equ	0xFF5
 21862                           prodh	equ	0xFF4
 21863                           prodl	equ	0xFF3
 21864                           intcon	equ	0xFF2
 21865                           intcon3	equ	0xFF0
 21866                           indf0	equ	0xFEF
 21867                           postinc0	equ	0xFEE
 21868                           plusw0	equ	0xFEB
 21869                           fsr0h	equ	0xFEA
 21870                           fsr0l	equ	0xFE9
 21871                           wreg	equ	0xFE8
 21872                           indf1	equ	0xFE7
 21873                           postinc1	equ	0xFE6
 21874                           postdec1	equ	0xFE5
 21875                           plusw1	equ	0xFE3
 21876                           fsr1h	equ	0xFE2
 21877                           fsr1l	equ	0xFE1
 21878                           indf2	equ	0xFDF
 21879                           postinc2	equ	0xFDE
 21880                           postdec2	equ	0xFDD
 21881                           plusw2	equ	0xFDB
 21882                           fsr2h	equ	0xFDA
 21883                           fsr2l	equ	0xFD9
 21884                           status	equ	0xFD8
 21885                           
 21886 ;; *************** function _enc424j600_setTXLength *****************
 21887 ;; Defined at:
 21888 ;;		line 577 in file "src/enc424j600/ENC424J600.c"
 21889 ;; Parameters:    Size  Location     Type
 21890 ;;  len             2   14[BANK0 ] unsigned int 
 21891 ;; Auto vars:     Size  Location     Type
 21892 ;;  highByte        1   17[BANK0 ] unsigned char 
 21893 ;;  lowByte         1   16[BANK0 ] unsigned char 
 21894 ;; Return value:  Size  Location     Type
 21895 ;;                  1    wreg      void 
 21896 ;; Registers used:
 21897 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21898 ;; Tracked objects:
 21899 ;;		On entry : 0/0
 21900 ;;		On exit  : 0/0
 21901 ;;		Unchanged: 0/0
 21902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21903 ;;      Params:         0       2       0       0       0       0       0       0       0
 21904 ;;      Locals:         0       2       0       0       0       0       0       0       0
 21905 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21906 ;;      Totals:         0       4       0       0       0       0       0       0       0
 21907 ;;Total ram usage:        4 bytes
 21908 ;; Hardware stack levels used:    1
 21909 ;; Hardware stack levels required when called:    7
 21910 ;; This function calls:
 21911 ;;		_enc424j600_writeControlRegisterUnbanked
 21912 ;; This function is called by:
 21913 ;;		_ethernetController_sendPacket
 21914 ;; This function uses a non-reentrant model
 21915 ;;
 21916                           
 21917                           	psect	text87
 21918  0053E4                     __ptext87:
 21919                           	opt stack 0
 21920  0053E4                     _enc424j600_setTXLength:
 21921                           	opt stack 20
 21922                           
 21923                           ;ENC424J600.c: 578: uint8_t lowByte = len & 0x00ff;
 21924                           
 21925                           ;incstack = 0
 21926  0053E4  C06E  F070         	movff	enc424j600_setTXLength@len,enc424j600_setTXLength@lowByte
 21927                           
 21928                           ;ENC424J600.c: 579: uint8_t highByte = len >> 8;
 21929  0053E8  0100               	movlb	0	; () banked
 21930  0053EA  516F               	movf	(enc424j600_setTXLength@len+1)& (0+255),w,b
 21931  0053EC  6F71               	movwf	enc424j600_setTXLength@highByte& (0+255),b
 21932                           
 21933                           ; BSR set to: 0
 21934                           ;ENC424J600.c: 580: enc424j600_writeControlRegisterUnbanked(0x02 + 0x00, &lowByte);
 21935  0053EE  0E70               	movlw	low enc424j600_setTXLength@lowByte
 21936  0053F0  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 21937  0053F2  0E00               	movlw	high enc424j600_setTXLength@lowByte
 21938  0053F4  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 21939  0053F6  0E02               	movlw	2
 21940  0053F8  EC30  F029         	call	_enc424j600_writeControlRegisterUnbanked
 21941                           
 21942                           ;ENC424J600.c: 581: enc424j600_writeControlRegisterUnbanked(0x03 + 0x00, &highByte);
 21943  0053FC  0E71               	movlw	low enc424j600_setTXLength@highByte
 21944  0053FE  0100               	movlb	0	; () banked
 21945  005400  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 21946  005402  0E00               	movlw	high enc424j600_setTXLength@highByte
 21947  005404  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 21948  005406  0E03               	movlw	3
 21949  005408  EC30  F029         	call	_enc424j600_writeControlRegisterUnbanked
 21950  00540C  0012               	return		;funcret
 21951  00540E                     __end_of_enc424j600_setTXLength:
 21952                           	opt stack 0
 21953                           tblptru	equ	0xFF8
 21954                           tblptrh	equ	0xFF7
 21955                           tblptrl	equ	0xFF6
 21956                           tablat	equ	0xFF5
 21957                           prodh	equ	0xFF4
 21958                           prodl	equ	0xFF3
 21959                           intcon	equ	0xFF2
 21960                           intcon3	equ	0xFF0
 21961                           indf0	equ	0xFEF
 21962                           postinc0	equ	0xFEE
 21963                           plusw0	equ	0xFEB
 21964                           fsr0h	equ	0xFEA
 21965                           fsr0l	equ	0xFE9
 21966                           wreg	equ	0xFE8
 21967                           indf1	equ	0xFE7
 21968                           postinc1	equ	0xFE6
 21969                           postdec1	equ	0xFE5
 21970                           plusw1	equ	0xFE3
 21971                           fsr1h	equ	0xFE2
 21972                           fsr1l	equ	0xFE1
 21973                           indf2	equ	0xFDF
 21974                           postinc2	equ	0xFDE
 21975                           postdec2	equ	0xFDD
 21976                           plusw2	equ	0xFDB
 21977                           fsr2h	equ	0xFDA
 21978                           fsr2l	equ	0xFD9
 21979                           status	equ	0xFD8
 21980                           
 21981 ;; *************** function _ethernetController_getSourceMACAddress *****************
 21982 ;; Defined at:
 21983 ;;		line 268 in file "src/enc424j600/ENC424J600.c"
 21984 ;; Parameters:    Size  Location     Type
 21985 ;;  field           9   15[BANK0 ] struct memoryField
 21986 ;; Auto vars:     Size  Location     Type
 21987 ;;  temp            1   31[BANK0 ] unsigned char 
 21988 ;;  i               1   32[BANK0 ] unsigned char 
 21989 ;;  sourceAddres    6   25[BANK0 ] struct macaddress
 21990 ;;  opcode          1   24[BANK0 ] unsigned char 
 21991 ;; Return value:  Size  Location     Type
 21992 ;;                  6   15[BANK0 ] struct macaddress
 21993 ;; Registers used:
 21994 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21995 ;; Tracked objects:
 21996 ;;		On entry : 0/0
 21997 ;;		On exit  : 0/0
 21998 ;;		Unchanged: 0/0
 21999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22000 ;;      Params:         0       9       0       0       0       0       0       0       0
 22001 ;;      Locals:         0       9       0       0       0       0       0       0       0
 22002 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22003 ;;      Totals:         0      18       0       0       0       0       0       0       0
 22004 ;;Total ram usage:       18 bytes
 22005 ;; Hardware stack levels used:    1
 22006 ;; Hardware stack levels required when called:    7
 22007 ;; This function calls:
 22008 ;;		_enc424j600_readSPI
 22009 ;;		_enc424j600_setERXDATAReadPointer
 22010 ;;		_enc424j600_writeSPI
 22011 ;; This function is called by:
 22012 ;;		_arp_send
 22013 ;; This function uses a non-reentrant model
 22014 ;;
 22015                           
 22016                           	psect	text88
 22017  004AFE                     __ptext88:
 22018                           	opt stack 0
 22019  004AFE                     _ethernetController_getSourceMACAddress:
 22020                           	opt stack 19
 22021                           
 22022                           ;ENC424J600.c: 269: macaddress_t sourceAddress;
 22023                           ;ENC424J600.c: 270: enc424j600_setERXDATAReadPointer(field.start + 14);
 22024                           
 22025                           ;incstack = 0
 22026  004AFE  0E0E               	movlw	14
 22027  004B00  0100               	movlb	0	; () banked
 22028  004B02  256F               	addwf	ethernetController_getSourceMACAddress@field& (0+255),w,b
 22029  004B04  6F6A               	movwf	enc424j600_setERXDATAReadPointer@addr& (0+255),b
 22030  004B06  0E00               	movlw	0
 22031  004B08  2170               	addwfc	(ethernetController_getSourceMACAddress@field+1)& (0+255),w,b
 22032  004B0A  6F6B               	movwf	(enc424j600_setERXDATAReadPointer@addr+1)& (0+255),b
 22033  004B0C  ECDA  F028         	call	_enc424j600_setERXDATAReadPointer	;wreg free
 22034                           
 22035                           ;ENC424J600.c: 271: uint8_t opcode = 0x2C;
 22036  004B10  0E2C               	movlw	44
 22037  004B12  0100               	movlb	0	; () banked
 22038  004B14  6F78               	movwf	ethernetController_getSourceMACAddress@opcode& (0+255),b
 22039                           
 22040                           ; BSR set to: 0
 22041                           ;ENC424J600.c: 272: PORTBbits.RB4=0;
 22042  004B16  9881               	bcf	3969,4,c	;volatile
 22043                           
 22044                           ; BSR set to: 0
 22045                           ;ENC424J600.c: 273: enc424j600_writeSPI(&opcode);
 22046  004B18  0E78               	movlw	low ethernetController_getSourceMACAddress@opcode
 22047  004B1A  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 22048  004B1C  0E00               	movlw	high ethernetController_getSourceMACAddress@opcode
 22049  004B1E  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 22050  004B20  EC20  F026         	call	_enc424j600_writeSPI	;wreg free
 22051                           
 22052                           ;ENC424J600.c: 274: for (uint8_t i = 0; i < 6; i++) {
 22053  004B24  0E00               	movlw	0
 22054  004B26  0100               	movlb	0	; () banked
 22055  004B28  6F80               	movwf	ethernetController_getSourceMACAddress@i& (0+255),b
 22056  004B2A                     l8725:
 22057                           
 22058                           ; BSR set to: 0
 22059  004B2A  0E05               	movlw	5
 22060  004B2C  6580               	cpfsgt	ethernetController_getSourceMACAddress@i& (0+255),b
 22061  004B2E  D001               	goto	l155
 22062  004B30  D013               	goto	u9530
 22063  004B32                     l155:
 22064                           
 22065                           ; BSR set to: 0
 22066                           ;ENC424J600.c: 275: uint8_t temp;
 22067                           ;ENC424J600.c: 276: enc424j600_readSPI(&temp);
 22068                           
 22069                           ; BSR set to: 0
 22070  004B32  0E7F               	movlw	low ethernetController_getSourceMACAddress@temp
 22071  004B34  6F60               	movwf	enc424j600_readSPI@data& (0+255),b
 22072  004B36  0E00               	movlw	high ethernetController_getSourceMACAddress@temp
 22073  004B38  6F61               	movwf	(enc424j600_readSPI@data+1)& (0+255),b
 22074  004B3A  ECB7  F025         	call	_enc424j600_readSPI	;wreg free
 22075                           
 22076                           ;ENC424J600.c: 277: sourceAddress.address[i] = temp;
 22077  004B3E  0100               	movlb	0	; () banked
 22078  004B40  5180               	movf	ethernetController_getSourceMACAddress@i& (0+255),w,b
 22079  004B42  0D01               	mullw	1
 22080  004B44  0E79               	movlw	low ethernetController_getSourceMACAddress@sourceAddress
 22081  004B46  24F3               	addwf	prodl,w,c
 22082  004B48  6ED9               	movwf	fsr2l,c
 22083  004B4A  0E00               	movlw	high ethernetController_getSourceMACAddress@sourceAddress
 22084  004B4C  20F4               	addwfc	prodh,w,c
 22085  004B4E  6EDA               	movwf	fsr2h,c
 22086  004B50  C07F  FFDF         	movff	ethernetController_getSourceMACAddress@temp,indf2
 22087                           
 22088                           ; BSR set to: 0
 22089  004B54  2B80               	incf	ethernetController_getSourceMACAddress@i& (0+255),f,b
 22090  004B56  D7E9               	goto	l8725
 22091  004B58                     u9530:
 22092                           
 22093                           ; BSR set to: 0
 22094                           ;ENC424J600.c: 278: }
 22095                           ;ENC424J600.c: 279: PORTBbits.RB4=1;
 22096  004B58  8881               	bsf	3969,4,c	;volatile
 22097                           
 22098                           ; BSR set to: 0
 22099                           ;ENC424J600.c: 280: return sourceAddress;
 22100  004B5A  EE20  F079         	lfsr	2,ethernetController_getSourceMACAddress@sourceAddress
 22101  004B5E  EE00  F06F         	lfsr	0,?_ethernetController_getSourceMACAddress
 22102  004B62  0E05               	movlw	5
 22103  004B64                     u9541:
 22104  004B64  CFDB FFEB          	movff	plusw2,plusw0
 22105  004B68  06E8               	decf	wreg,f,c
 22106  004B6A  E2FC               	bc	u9541
 22107  004B6C  0012               	return	
 22108  004B6E                     __end_of_ethernetController_getSourceMACAddress:
 22109                           	opt stack 0
 22110                           tblptru	equ	0xFF8
 22111                           tblptrh	equ	0xFF7
 22112                           tblptrl	equ	0xFF6
 22113                           tablat	equ	0xFF5
 22114                           prodh	equ	0xFF4
 22115                           prodl	equ	0xFF3
 22116                           intcon	equ	0xFF2
 22117                           intcon3	equ	0xFF0
 22118                           indf0	equ	0xFEF
 22119                           postinc0	equ	0xFEE
 22120                           plusw0	equ	0xFEB
 22121                           fsr0h	equ	0xFEA
 22122                           fsr0l	equ	0xFE9
 22123                           wreg	equ	0xFE8
 22124                           indf1	equ	0xFE7
 22125                           postinc1	equ	0xFE6
 22126                           postdec1	equ	0xFE5
 22127                           plusw1	equ	0xFE3
 22128                           fsr1h	equ	0xFE2
 22129                           fsr1l	equ	0xFE1
 22130                           indf2	equ	0xFDF
 22131                           postinc2	equ	0xFDE
 22132                           postdec2	equ	0xFDD
 22133                           plusw2	equ	0xFDB
 22134                           fsr2h	equ	0xFDA
 22135                           fsr2l	equ	0xFD9
 22136                           status	equ	0xFD8
 22137                           
 22138 ;; *************** function _enc424j600_setERXDATAReadPointer *****************
 22139 ;; Defined at:
 22140 ;;		line 631 in file "src/enc424j600/ENC424J600.c"
 22141 ;; Parameters:    Size  Location     Type
 22142 ;;  addr            2   10[BANK0 ] unsigned int 
 22143 ;; Auto vars:     Size  Location     Type
 22144 ;;  highByte        1   14[BANK0 ] unsigned char 
 22145 ;;  lowByte         1   13[BANK0 ] unsigned char 
 22146 ;;  opcode          1   12[BANK0 ] unsigned char 
 22147 ;; Return value:  Size  Location     Type
 22148 ;;                  1    wreg      void 
 22149 ;; Registers used:
 22150 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 22151 ;; Tracked objects:
 22152 ;;		On entry : 0/0
 22153 ;;		On exit  : 0/0
 22154 ;;		Unchanged: 0/0
 22155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22156 ;;      Params:         0       2       0       0       0       0       0       0       0
 22157 ;;      Locals:         0       3       0       0       0       0       0       0       0
 22158 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22159 ;;      Totals:         0       5       0       0       0       0       0       0       0
 22160 ;;Total ram usage:        5 bytes
 22161 ;; Hardware stack levels used:    1
 22162 ;; Hardware stack levels required when called:    6
 22163 ;; This function calls:
 22164 ;;		_enc424j600_writeSPI
 22165 ;; This function is called by:
 22166 ;;		_ethernetController_getSourceMACAddress
 22167 ;;		_ethernetController_getEtherTypeField
 22168 ;;		_ethernetController_getRSV
 22169 ;;		_ethernetController_updateNextPacketPointer
 22170 ;;		_ethernetController_streamFromRXBuffer
 22171 ;;		_ethernetController_getDestinationMACAddress
 22172 ;; This function uses a non-reentrant model
 22173 ;;
 22174                           
 22175                           	psect	text89
 22176  0051B4                     __ptext89:
 22177                           	opt stack 0
 22178  0051B4                     _enc424j600_setERXDATAReadPointer:
 22179                           	opt stack 19
 22180                           
 22181                           ;ENC424J600.c: 632: uint8_t opcode = 0x64;
 22182                           
 22183                           ; BSR set to: 0
 22184                           ;incstack = 0
 22185  0051B4  0E64               	movlw	100
 22186  0051B6  0100               	movlb	0	; () banked
 22187  0051B8  6F6C               	movwf	enc424j600_setERXDATAReadPointer@opcode& (0+255),b
 22188                           
 22189                           ; BSR set to: 0
 22190                           ;ENC424J600.c: 633: uint8_t lowByte = addr & 0x00ff;
 22191  0051BA  C06A  F06D         	movff	enc424j600_setERXDATAReadPointer@addr,enc424j600_setERXDATAReadPointer@lowByte
 22192                           
 22193                           ;ENC424J600.c: 634: uint8_t highByte = (addr >> 8) & 0xff;
 22194  0051BE  516B               	movf	(enc424j600_setERXDATAReadPointer@addr+1)& (0+255),w,b
 22195  0051C0  6F6E               	movwf	enc424j600_setERXDATAReadPointer@highByte& (0+255),b
 22196                           
 22197                           ; BSR set to: 0
 22198                           ;ENC424J600.c: 635: PORTBbits.RB4=0;
 22199  0051C2  9881               	bcf	3969,4,c	;volatile
 22200                           
 22201                           ; BSR set to: 0
 22202                           ;ENC424J600.c: 636: enc424j600_writeSPI(&opcode);
 22203  0051C4  0E6C               	movlw	low enc424j600_setERXDATAReadPointer@opcode
 22204  0051C6  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 22205  0051C8  0E00               	movlw	high enc424j600_setERXDATAReadPointer@opcode
 22206  0051CA  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 22207  0051CC  EC20  F026         	call	_enc424j600_writeSPI	;wreg free
 22208                           
 22209                           ;ENC424J600.c: 637: enc424j600_writeSPI(&lowByte);
 22210  0051D0  0E6D               	movlw	low enc424j600_setERXDATAReadPointer@lowByte
 22211  0051D2  0100               	movlb	0	; () banked
 22212  0051D4  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 22213  0051D6  0E00               	movlw	high enc424j600_setERXDATAReadPointer@lowByte
 22214  0051D8  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 22215  0051DA  EC20  F026         	call	_enc424j600_writeSPI	;wreg free
 22216                           
 22217                           ;ENC424J600.c: 638: enc424j600_writeSPI(&highByte);
 22218  0051DE  0E6E               	movlw	low enc424j600_setERXDATAReadPointer@highByte
 22219  0051E0  0100               	movlb	0	; () banked
 22220  0051E2  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 22221  0051E4  0E00               	movlw	high enc424j600_setERXDATAReadPointer@highByte
 22222  0051E6  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 22223  0051E8  EC20  F026         	call	_enc424j600_writeSPI	;wreg free
 22224                           
 22225                           ;ENC424J600.c: 639: PORTBbits.RB4=1;
 22226  0051EC  8881               	bsf	3969,4,c	;volatile
 22227  0051EE  0012               	return		;funcret
 22228  0051F0                     __end_of_enc424j600_setERXDATAReadPointer:
 22229                           	opt stack 0
 22230                           tblptru	equ	0xFF8
 22231                           tblptrh	equ	0xFF7
 22232                           tblptrl	equ	0xFF6
 22233                           tablat	equ	0xFF5
 22234                           prodh	equ	0xFF4
 22235                           prodl	equ	0xFF3
 22236                           intcon	equ	0xFF2
 22237                           intcon3	equ	0xFF0
 22238                           indf0	equ	0xFEF
 22239                           postinc0	equ	0xFEE
 22240                           plusw0	equ	0xFEB
 22241                           fsr0h	equ	0xFEA
 22242                           fsr0l	equ	0xFE9
 22243                           wreg	equ	0xFE8
 22244                           indf1	equ	0xFE7
 22245                           postinc1	equ	0xFE6
 22246                           postdec1	equ	0xFE5
 22247                           plusw1	equ	0xFE3
 22248                           fsr1h	equ	0xFE2
 22249                           fsr1l	equ	0xFE1
 22250                           indf2	equ	0xFDF
 22251                           postinc2	equ	0xFDE
 22252                           postdec2	equ	0xFDD
 22253                           plusw2	equ	0xFDB
 22254                           fsr2h	equ	0xFDA
 22255                           fsr2l	equ	0xFD9
 22256                           status	equ	0xFD8
 22257                           
 22258 ;; *************** function _arp_checkForEntry *****************
 22259 ;; Defined at:
 22260 ;;		line 453 in file "src/stack/protocols/arp.c"
 22261 ;; Parameters:    Size  Location     Type
 22262 ;;  ip              4    7[BANK0 ] struct ipv4_address
 22263 ;;  index           2   11[BANK0 ] PTR unsigned char 
 22264 ;;		 -> ipv4_sendFrame@index(1), arp_gratuitous@index(1), arp_probe@index(1), 
 22265 ;; Auto vars:     Size  Location     Type
 22266 ;;  i               1   21[BANK0 ] unsigned char 
 22267 ;; Return value:  Size  Location     Type
 22268 ;;                  1    wreg      unsigned char 
 22269 ;; Registers used:
 22270 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22271 ;; Tracked objects:
 22272 ;;		On entry : 0/0
 22273 ;;		On exit  : 0/0
 22274 ;;		Unchanged: 0/0
 22275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22276 ;;      Params:         0       6       0       0       0       0       0       0       0
 22277 ;;      Locals:         0       1       0       0       0       0       0       0       0
 22278 ;;      Temps:          0       8       0       0       0       0       0       0       0
 22279 ;;      Totals:         0      15       0       0       0       0       0       0       0
 22280 ;;Total ram usage:       15 bytes
 22281 ;; Hardware stack levels used:    1
 22282 ;; Hardware stack levels required when called:    5
 22283 ;; This function calls:
 22284 ;;		_getMillis
 22285 ;;		_ipv4_cmp
 22286 ;; This function is called by:
 22287 ;;		_arp_probe
 22288 ;;		_arp_gratuitous
 22289 ;;		_ipv4_sendFrame
 22290 ;; This function uses a non-reentrant model
 22291 ;;
 22292                           
 22293                           	psect	text90
 22294  00415E                     __ptext90:
 22295                           	opt stack 0
 22296  00415E                     _arp_checkForEntry:
 22297                           	opt stack 23
 22298                           
 22299                           ;arp.c: 454: for (uint8_t i = 0; i < 8u; i++) {
 22300                           
 22301                           ;incstack = 0
 22302  00415E  0E00               	movlw	0
 22303  004160  0100               	movlb	0	; () banked
 22304  004162  6F75               	movwf	arp_checkForEntry@i& (0+255),b
 22305  004164                     l9489:
 22306                           
 22307                           ; BSR set to: 0
 22308  004164  0E07               	movlw	7
 22309  004166  6575               	cpfsgt	arp_checkForEntry@i& (0+255),b
 22310  004168  D001               	goto	l1056
 22311  00416A  D050               	goto	u11120
 22312  00416C                     l1056:
 22313                           
 22314                           ; BSR set to: 0
 22315                           ;arp.c: 455: if (ipv4_cmp(&arp_table[i].ip, &ip)) {
 22316                           
 22317                           ; BSR set to: 0
 22318  00416C  5175               	movf	arp_checkForEntry@i& (0+255),w,b
 22319  00416E  0D0E               	mullw	14
 22320  004170  0E00               	movlw	low _arp_table
 22321  004172  24F3               	addwf	prodl,w,c
 22322  004174  6F60               	movwf	ipv4_cmp@a& (0+255),b
 22323  004176  0E03               	movlw	high _arp_table
 22324  004178  20F4               	addwfc	prodh,w,c
 22325  00417A  6F61               	movwf	(ipv4_cmp@a+1)& (0+255),b
 22326  00417C  0E67               	movlw	low arp_checkForEntry@ip
 22327  00417E  6F62               	movwf	ipv4_cmp@b& (0+255),b
 22328  004180  0E00               	movlw	high arp_checkForEntry@ip
 22329  004182  6F63               	movwf	(ipv4_cmp@b+1)& (0+255),b
 22330  004184  EC7D  F028         	call	_ipv4_cmp	;wreg free
 22331  004188  0100               	movlb	0	; () banked
 22332  00418A  A0D8               	btfss	status,0,c
 22333  00418C  D03D               	goto	l1059
 22334                           
 22335                           ; BSR set to: 0
 22336                           ;arp.c: 456: if (getMillis() - arp_table[i].timeCreated < 30000u) {
 22337  00418E  5175               	movf	arp_checkForEntry@i& (0+255),w,b
 22338  004190  0D0E               	mullw	14
 22339  004192  0E0A               	movlw	10
 22340  004194  26F3               	addwf	prodl,f,c
 22341  004196  0E00               	movlw	0
 22342  004198  22F4               	addwfc	prodh,f,c
 22343  00419A  0E00               	movlw	low _arp_table
 22344  00419C  24F3               	addwf	prodl,w,c
 22345  00419E  6ED9               	movwf	fsr2l,c
 22346  0041A0  0E03               	movlw	high _arp_table
 22347  0041A2  20F4               	addwfc	prodh,w,c
 22348  0041A4  6EDA               	movwf	fsr2h,c
 22349  0041A6  CFDE F06D          	movff	postinc2,??_arp_checkForEntry
 22350  0041AA  CFDE F06E          	movff	postinc2,??_arp_checkForEntry+1
 22351  0041AE  CFDE F06F          	movff	postinc2,??_arp_checkForEntry+2
 22352  0041B2  CFDE F070          	movff	postinc2,??_arp_checkForEntry+3
 22353  0041B6  1F6D               	comf	??_arp_checkForEntry& (0+255),f,b
 22354  0041B8  1F6E               	comf	(??_arp_checkForEntry+1)& (0+255),f,b
 22355  0041BA  1F6F               	comf	(??_arp_checkForEntry+2)& (0+255),f,b
 22356  0041BC  1F70               	comf	(??_arp_checkForEntry+3)& (0+255),f,b
 22357  0041BE  2B6D               	incf	??_arp_checkForEntry& (0+255),f,b
 22358  0041C0  0E00               	movlw	0
 22359  0041C2  236E               	addwfc	(??_arp_checkForEntry+1)& (0+255),f,b
 22360  0041C4  236F               	addwfc	(??_arp_checkForEntry+2)& (0+255),f,b
 22361  0041C6  2370               	addwfc	(??_arp_checkForEntry+3)& (0+255),f,b
 22362  0041C8  EC63  F02B         	call	_getMillis	;wreg free
 22363  0041CC  0100               	movlb	0	; () banked
 22364  0041CE  516D               	movf	??_arp_checkForEntry& (0+255),w,b
 22365  0041D0  2560               	addwf	?_getMillis& (0+255),w,b
 22366  0041D2  6F71               	movwf	(??_arp_checkForEntry+4)& (0+255),b
 22367  0041D4  516E               	movf	(??_arp_checkForEntry+1)& (0+255),w,b
 22368  0041D6  2161               	addwfc	(?_getMillis+1)& (0+255),w,b
 22369  0041D8  6F72               	movwf	(??_arp_checkForEntry+5)& (0+255),b
 22370  0041DA  516F               	movf	(??_arp_checkForEntry+2)& (0+255),w,b
 22371  0041DC  2162               	addwfc	(?_getMillis+2)& (0+255),w,b
 22372  0041DE  6F73               	movwf	(??_arp_checkForEntry+6)& (0+255),b
 22373  0041E0  5170               	movf	(??_arp_checkForEntry+3)& (0+255),w,b
 22374  0041E2  2163               	addwfc	(?_getMillis+3)& (0+255),w,b
 22375  0041E4  6F74               	movwf	(??_arp_checkForEntry+7)& (0+255),b
 22376  0041E6  5174               	movf	(??_arp_checkForEntry+7)& (0+255),w,b
 22377  0041E8  1173               	iorwf	(??_arp_checkForEntry+6)& (0+255),w,b
 22378  0041EA  E10E               	bnz	l9503
 22379  0041EC  0E30               	movlw	48
 22380  0041EE  5D71               	subwf	(??_arp_checkForEntry+4)& (0+255),w,b
 22381  0041F0  0E75               	movlw	117
 22382  0041F2  5972               	subwfb	(??_arp_checkForEntry+5)& (0+255),w,b
 22383  0041F4  B0D8               	btfsc	status,0,c
 22384  0041F6  D008               	goto	l1059
 22385                           
 22386                           ; BSR set to: 0
 22387                           ;arp.c: 458: *index = i;
 22388  0041F8  C06B  FFD9         	movff	arp_checkForEntry@index,fsr2l
 22389  0041FC  C06C  FFDA         	movff	arp_checkForEntry@index+1,fsr2h
 22390  004200  C075  FFDF         	movff	arp_checkForEntry@i,indf2
 22391                           
 22392                           ; BSR set to: 0
 22393                           ;arp.c: 459: return 1;
 22394  004204  0E01               	movlw	1
 22395                           
 22396                           ; BSR set to: 0
 22397  004206  0012               	return	
 22398  004208                     l1059:
 22399  004208                     l9503:
 22400                           
 22401                           ; BSR set to: 0
 22402  004208  2B75               	incf	arp_checkForEntry@i& (0+255),f,b
 22403  00420A  D7AC               	goto	l9489
 22404  00420C                     u11120:
 22405                           
 22406                           ; BSR set to: 0
 22407                           ;arp.c: 460: }
 22408                           ;arp.c: 461: }
 22409                           ;arp.c: 462: }
 22410                           ;arp.c: 463: return 0;
 22411                           
 22412                           ; BSR set to: 0
 22413  00420C  0E00               	movlw	0
 22414  00420E  0012               	return	
 22415  004210                     __end_of_arp_checkForEntry:
 22416                           	opt stack 0
 22417                           tblptru	equ	0xFF8
 22418                           tblptrh	equ	0xFF7
 22419                           tblptrl	equ	0xFF6
 22420                           tablat	equ	0xFF5
 22421                           prodh	equ	0xFF4
 22422                           prodl	equ	0xFF3
 22423                           intcon	equ	0xFF2
 22424                           intcon3	equ	0xFF0
 22425                           indf0	equ	0xFEF
 22426                           postinc0	equ	0xFEE
 22427                           plusw0	equ	0xFEB
 22428                           fsr0h	equ	0xFEA
 22429                           fsr0l	equ	0xFE9
 22430                           wreg	equ	0xFE8
 22431                           indf1	equ	0xFE7
 22432                           postinc1	equ	0xFE6
 22433                           postdec1	equ	0xFE5
 22434                           plusw1	equ	0xFE3
 22435                           fsr1h	equ	0xFE2
 22436                           fsr1l	equ	0xFE1
 22437                           indf2	equ	0xFDF
 22438                           postinc2	equ	0xFDE
 22439                           postdec2	equ	0xFDD
 22440                           plusw2	equ	0xFDB
 22441                           fsr2h	equ	0xFDA
 22442                           fsr2l	equ	0xFD9
 22443                           status	equ	0xFD8
 22444                           
 22445 ;; *************** function _ipv4_cmp *****************
 22446 ;; Defined at:
 22447 ;;		line 303 in file "src/stack/protocols/ipv4.c"
 22448 ;; Parameters:    Size  Location     Type
 22449 ;;  a               2    0[BANK0 ] PTR struct ipv4_address
 22450 ;;		 -> arp_table(112), arp_sendReply@request(32), arp_parseFromRXBuffer@arp(32), 
 22451 ;;  b               2    2[BANK0 ] PTR struct ipv4_address
 22452 ;;		 -> arp_checkForEntry@ip(4), arp_sendReply@myIP(4), arp_parseFromRXBuffer@arp(32), 
 22453 ;; Auto vars:     Size  Location     Type
 22454 ;;  i               1    6[BANK0 ] unsigned char 
 22455 ;; Return value:  Size  Location     Type
 22456 ;;		None               void
 22457 ;; Registers used:
 22458 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 22459 ;; Tracked objects:
 22460 ;;		On entry : 0/0
 22461 ;;		On exit  : 0/0
 22462 ;;		Unchanged: 0/0
 22463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22464 ;;      Params:         0       4       0       0       0       0       0       0       0
 22465 ;;      Locals:         0       1       0       0       0       0       0       0       0
 22466 ;;      Temps:          0       2       0       0       0       0       0       0       0
 22467 ;;      Totals:         0       7       0       0       0       0       0       0       0
 22468 ;;Total ram usage:        7 bytes
 22469 ;; Hardware stack levels used:    1
 22470 ;; Hardware stack levels required when called:    4
 22471 ;; This function calls:
 22472 ;;		Nothing
 22473 ;; This function is called by:
 22474 ;;		_arp_parseFromRXBuffer
 22475 ;;		_arp_sendReply
 22476 ;;		_arp_checkForEntry
 22477 ;; This function uses a non-reentrant model
 22478 ;;
 22479                           
 22480                           	psect	text91
 22481  0050FA                     __ptext91:
 22482                           	opt stack 0
 22483  0050FA                     _ipv4_cmp:
 22484                           	opt stack 23
 22485                           
 22486                           ;ipv4.c: 304: for (uint8_t i = 0; i < 4; i++) {
 22487                           
 22488                           ; BSR set to: 0
 22489                           ;incstack = 0
 22490  0050FA  0E00               	movlw	0
 22491  0050FC  0100               	movlb	0	; () banked
 22492  0050FE  6F66               	movwf	ipv4_cmp@i& (0+255),b
 22493  005100                     l9147:
 22494                           
 22495                           ; BSR set to: 0
 22496  005100  0E03               	movlw	3
 22497  005102  6566               	cpfsgt	ipv4_cmp@i& (0+255),b
 22498  005104  D001               	goto	l1194
 22499  005106  D018               	goto	u10110
 22500  005108                     l1194:
 22501                           
 22502                           ; BSR set to: 0
 22503                           ;ipv4.c: 305: if (a->address[i] != b->address[i])
 22504                           
 22505                           ; BSR set to: 0
 22506  005108  5166               	movf	ipv4_cmp@i& (0+255),w,b
 22507  00510A  0D01               	mullw	1
 22508  00510C  50F3               	movf	prodl,w,c
 22509  00510E  2562               	addwf	ipv4_cmp@b& (0+255),w,b
 22510  005110  6ED9               	movwf	fsr2l,c
 22511  005112  50F4               	movf	prodh,w,c
 22512  005114  2163               	addwfc	(ipv4_cmp@b+1)& (0+255),w,b
 22513  005116  6EDA               	movwf	fsr2h,c
 22514  005118  5166               	movf	ipv4_cmp@i& (0+255),w,b
 22515  00511A  0D01               	mullw	1
 22516  00511C  50F3               	movf	prodl,w,c
 22517  00511E  2560               	addwf	ipv4_cmp@a& (0+255),w,b
 22518  005120  6EE1               	movwf	fsr1l,c
 22519  005122  50F4               	movf	prodh,w,c
 22520  005124  2161               	addwfc	(ipv4_cmp@a+1)& (0+255),w,b
 22521  005126  6EE2               	movwf	fsr1h,c
 22522  005128  50DE               	movf	postinc2,w,c
 22523  00512A  18E6               	xorwf	postinc1,w,c
 22524  00512C  B4D8               	btfsc	status,2,c
 22525  00512E  D002               	goto	l1196
 22526                           
 22527                           ; BSR set to: 0
 22528                           ;ipv4.c: 306: return 0;
 22529  005130  90D8               	bcf	status,0,c
 22530                           
 22531                           ; BSR set to: 0
 22532  005132  0012               	return	
 22533  005134                     l1196:
 22534                           
 22535                           ; BSR set to: 0
 22536                           
 22537                           ; BSR set to: 0
 22538  005134  2B66               	incf	ipv4_cmp@i& (0+255),f,b
 22539  005136  D7E4               	goto	l9147
 22540  005138                     u10110:
 22541                           
 22542                           ; BSR set to: 0
 22543                           ;ipv4.c: 307: }
 22544                           ;ipv4.c: 308: return 1;
 22545                           
 22546                           ; BSR set to: 0
 22547  005138  80D8               	bsf	status,0,c
 22548  00513A  0012               	return	
 22549  00513C                     __end_of_ipv4_cmp:
 22550                           	opt stack 0
 22551                           tblptru	equ	0xFF8
 22552                           tblptrh	equ	0xFF7
 22553                           tblptrl	equ	0xFF6
 22554                           tablat	equ	0xFF5
 22555                           prodh	equ	0xFF4
 22556                           prodl	equ	0xFF3
 22557                           intcon	equ	0xFF2
 22558                           intcon3	equ	0xFF0
 22559                           indf0	equ	0xFEF
 22560                           postinc0	equ	0xFEE
 22561                           plusw0	equ	0xFEB
 22562                           fsr0h	equ	0xFEA
 22563                           fsr0l	equ	0xFE9
 22564                           wreg	equ	0xFE8
 22565                           indf1	equ	0xFE7
 22566                           postinc1	equ	0xFE6
 22567                           postdec1	equ	0xFE5
 22568                           plusw1	equ	0xFE3
 22569                           fsr1h	equ	0xFE2
 22570                           fsr1l	equ	0xFE1
 22571                           indf2	equ	0xFDF
 22572                           postinc2	equ	0xFDE
 22573                           postdec2	equ	0xFDD
 22574                           plusw2	equ	0xFDB
 22575                           fsr2h	equ	0xFDA
 22576                           fsr2l	equ	0xFD9
 22577                           status	equ	0xFD8
 22578                           
 22579 ;; *************** function _getMillis *****************
 22580 ;; Defined at:
 22581 ;;		line 34 in file "src/stack/time.c"
 22582 ;; Parameters:    Size  Location     Type
 22583 ;;		None
 22584 ;; Auto vars:     Size  Location     Type
 22585 ;;		None
 22586 ;; Return value:  Size  Location     Type
 22587 ;;                  4    0[BANK0 ] unsigned long 
 22588 ;; Registers used:
 22589 ;;		None
 22590 ;; Tracked objects:
 22591 ;;		On entry : 0/0
 22592 ;;		On exit  : 0/0
 22593 ;;		Unchanged: 0/0
 22594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22595 ;;      Params:         0       4       0       0       0       0       0       0       0
 22596 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22597 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22598 ;;      Totals:         0       4       0       0       0       0       0       0       0
 22599 ;;Total ram usage:        4 bytes
 22600 ;; Hardware stack levels used:    1
 22601 ;; Hardware stack levels required when called:    4
 22602 ;; This function calls:
 22603 ;;		Nothing
 22604 ;; This function is called by:
 22605 ;;		_ethernet_rxGetNewFrame
 22606 ;;		_arp_handleNewPacket
 22607 ;;		_arp_probe
 22608 ;;		_arp_gratuitous
 22609 ;;		_arp_checkForEntry
 22610 ;;		_ipv4_sendFrame
 22611 ;; This function uses a non-reentrant model
 22612 ;;
 22613                           
 22614                           	psect	text92
 22615  0056C6                     __ptext92:
 22616                           	opt stack 0
 22617  0056C6                     _getMillis:
 22618                           	opt stack 24
 22619                           
 22620                           ;time.c: 35: return time;
 22621                           
 22622                           ; BSR set to: 0
 22623                           ;incstack = 0
 22624  0056C6  C029  F060         	movff	_time,?_getMillis	;volatile
 22625  0056CA  C02A  F061         	movff	_time+1,?_getMillis+1	;volatile
 22626  0056CE  C02B  F062         	movff	_time+2,?_getMillis+2	;volatile
 22627  0056D2  C02C  F063         	movff	_time+3,?_getMillis+3	;volatile
 22628  0056D6  0012               	return		;funcret
 22629  0056D8                     __end_of_getMillis:
 22630                           	opt stack 0
 22631                           tblptru	equ	0xFF8
 22632                           tblptrh	equ	0xFF7
 22633                           tblptrl	equ	0xFF6
 22634                           tablat	equ	0xFF5
 22635                           prodh	equ	0xFF4
 22636                           prodl	equ	0xFF3
 22637                           intcon	equ	0xFF2
 22638                           intcon3	equ	0xFF0
 22639                           indf0	equ	0xFEF
 22640                           postinc0	equ	0xFEE
 22641                           plusw0	equ	0xFEB
 22642                           fsr0h	equ	0xFEA
 22643                           fsr0l	equ	0xFE9
 22644                           wreg	equ	0xFE8
 22645                           indf1	equ	0xFE7
 22646                           postinc1	equ	0xFE6
 22647                           postdec1	equ	0xFE5
 22648                           plusw1	equ	0xFE3
 22649                           fsr1h	equ	0xFE2
 22650                           fsr1l	equ	0xFE1
 22651                           indf2	equ	0xFDF
 22652                           postinc2	equ	0xFDE
 22653                           postdec2	equ	0xFDD
 22654                           plusw2	equ	0xFDB
 22655                           fsr2h	equ	0xFDA
 22656                           fsr2l	equ	0xFD9
 22657                           status	equ	0xFD8
 22658                           
 22659 ;; *************** function _UARTTransmitText *****************
 22660 ;; Defined at:
 22661 ;;		line 36 in file "src/system/uart.c"
 22662 ;; Parameters:    Size  Location     Type
 22663 ;;  str             2   56[BANK0 ] PTR const unsigned char 
 22664 ;;		 -> STR_113(33), STR_112(19), STR_111(2), STR_110(3), 
 22665 ;;		 -> STR_109(3), STR_108(3), STR_107(3), STR_106(5), 
 22666 ;;		 -> STR_105(2), STR_104(2), STR_103(7), STR_102(11), 
 22667 ;;		 -> STR_101(3), STR_100(27), STR_99(3), STR_98(8), 
 22668 ;;		 -> STR_97(9), STR_96(3), STR_95(39), STR_94(3), 
 22669 ;;		 -> STR_93(3), STR_92(30), STR_91(33), STR_90(39), 
 22670 ;;		 -> STR_89(35), STR_88(58), STR_87(36), STR_86(34), 
 22671 ;;		 -> STR_85(3), STR_84(43), STR_83(4), STR_82(12), 
 22672 ;;		 -> STR_81(26), STR_80(2), STR_79(3), STR_78(16), 
 22673 ;;		 -> STR_77(15), STR_76(10), STR_75(2), STR_74(3), 
 22674 ;;		 -> STR_73(5), STR_72(3), STR_71(2), STR_70(39), 
 22675 ;;		 -> arpEntryToString@string(50), ipAdressToString@address(16), STR_69(17), STR_68(4), 
 22676 ;;		 -> STR_67(4), STR_66(5), STR_65(18), STR_64(4), 
 22677 ;;		 -> STR_63(5), macToString@address(18), hexToString@number(10), intToString@number(10), 
 22678 ;;		 -> STR_62(5), STR_61(9), STR_60(30), STR_59(34), 
 22679 ;;		 -> STR_58(55), STR_57(37), STR_56(15), STR_55(14), 
 22680 ;;		 -> STR_54(19), STR_53(30), STR_52(17), STR_51(8), 
 22681 ;;		 -> STR_50(29), STR_49(29), STR_48(20), STR_47(19), 
 22682 ;;		 -> STR_46(19), STR_45(13), STR_44(4), STR_43(5), 
 22683 ;;		 -> STR_42(32), STR_41(3), STR_40(15), STR_39(51), 
 22684 ;;		 -> STR_38(4), STR_37(23), STR_36(12), STR_35(4), 
 22685 ;;		 -> STR_34(9), STR_33(2), STR_32(12), STR_31(24), 
 22686 ;;		 -> STR_30(51), STR_29(49), STR_28(51), STR_27(2), 
 22687 ;;		 -> STR_26(3), STR_25(37), STR_24(37), STR_23(3), 
 22688 ;;		 -> STR_22(27), STR_21(40), STR_20(3), STR_19(3), 
 22689 ;;		 -> STR_18(3), STR_17(5), STR_16(2), STR_15(3), 
 22690 ;;		 -> STR_14(5), STR_13(3), STR_12(3), STR_11(2), 
 22691 ;;		 -> STR_10(20), STR_9(7), STR_8(6), STR_7(2), 
 22692 ;;		 -> STR_6(2), STR_5(16), STR_4(10), STR_3(12), 
 22693 ;;		 -> STR_2(2), STR_1(2), ethernetController_getDeviceName@string(11), 
 22694 ;; Auto vars:     Size  Location     Type
 22695 ;;		None
 22696 ;; Return value:  Size  Location     Type
 22697 ;;                  1    wreg      void 
 22698 ;; Registers used:
 22699 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 22700 ;; Tracked objects:
 22701 ;;		On entry : 0/0
 22702 ;;		On exit  : 0/0
 22703 ;;		Unchanged: 0/0
 22704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22705 ;;      Params:         0       2       0       0       0       0       0       0       0
 22706 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22707 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22708 ;;      Totals:         0       2       0       0       0       0       0       0       0
 22709 ;;Total ram usage:        2 bytes
 22710 ;; Hardware stack levels used:    1
 22711 ;; Hardware stack levels required when called:    4
 22712 ;; This function calls:
 22713 ;;		Nothing
 22714 ;; This function is called by:
 22715 ;;		_ethernet_rxGetNewFrame
 22716 ;;		_handleStackBackgroundTasks
 22717 ;;		_main
 22718 ;;		_printEthernetState
 22719 ;;		_printErrorMessage
 22720 ;;		_UARTTransmitInt
 22721 ;;		_arp_handleNewPacket
 22722 ;;		_arp_sendReply
 22723 ;;		_arp_probe
 22724 ;;		_arp_gratuitous
 22725 ;;		_arp_background
 22726 ;;		_arp_setNewEntry
 22727 ;;		_arp_init
 22728 ;;		_ipv4_sendFrame
 22729 ;;		_ipv4_checkHeaderChecksum
 22730 ;;		_ipv4_handleNewPacket
 22731 ;;		_ipv4_background
 22732 ;;		_printArpTable
 22733 ;; This function uses a non-reentrant model
 22734 ;;
 22735                           
 22736                           	psect	text93
 22737  004DB0                     __ptext93:
 22738                           	opt stack 0
 22739  004DB0                     _UARTTransmitText:
 22740                           	opt stack 23
 22741                           
 22742                           ;uart.c: 37: while (*str) {
 22743                           
 22744                           ;incstack = 0
 22745  004DB0  D016               	goto	u9760
 22746  004DB2                     
 22747                           ;uart.c: 38: TXREG1 = *str++;
 22748  004DB2  C098  FFF6         	movff	UARTTransmitText@str,tblptrl
 22749  004DB6  C099  FFF7         	movff	UARTTransmitText@str+1,tblptrh
 22750  004DBA  6AF8               	clrf	tblptru,c
 22751  004DBC  0E07               	movlw	(high __ramtop+-1)
 22752  004DBE  64F7               	cpfsgt	tblptrh,c
 22753  004DC0  D003               	bra	u9757
 22754  004DC2  0008               	tblrd		*
 22755  004DC4  50F5               	movf	tablat,w,c
 22756  004DC6  D005               	bra	u9750
 22757  004DC8                     u9757:
 22758  004DC8  CFF6 FFE9          	movff	tblptrl,fsr0l
 22759  004DCC  CFF7 FFEA          	movff	tblptrh,fsr0h
 22760  004DD0  50EF               	movf	indf0,w,c
 22761  004DD2                     u9750:
 22762  004DD2  6EAD               	movwf	4013,c	;volatile
 22763  004DD4  0100               	movlb	0	; () banked
 22764  004DD6  4B98               	infsnz	UARTTransmitText@str& (0+255),f,b
 22765  004DD8  2B99               	incf	(UARTTransmitText@str+1)& (0+255),f,b
 22766  004DDA                     
 22767                           ; BSR set to: 0
 22768  004DDA  A2AC               	btfss	4012,1,c	;volatile
 22769  004DDC  D7FE               	goto	l792
 22770  004DDE                     u9760:
 22771  004DDE  C098  FFF6         	movff	UARTTransmitText@str,tblptrl
 22772  004DE2  C099  FFF7         	movff	UARTTransmitText@str+1,tblptrh
 22773  004DE6  6AF8               	clrf	tblptru,c
 22774  004DE8  0E07               	movlw	(high __ramtop+-1)
 22775  004DEA  64F7               	cpfsgt	tblptrh,c
 22776  004DEC  D003               	bra	u9777
 22777  004DEE  0008               	tblrd		*
 22778  004DF0  50F5               	movf	tablat,w,c
 22779  004DF2  D005               	bra	u9770
 22780  004DF4                     u9777:
 22781  004DF4  CFF6 FFE9          	movff	tblptrl,fsr0l
 22782  004DF8  CFF7 FFEA          	movff	tblptrh,fsr0h
 22783  004DFC  50EF               	movf	indf0,w,c
 22784  004DFE                     u9770:
 22785  004DFE  0900               	iorlw	0
 22786  004E00  B4D8               	btfsc	status,2,c
 22787  004E02  0012               	return	
 22788  004E04  D7D6               	goto	l790
 22789  004E06                     __end_of_UARTTransmitText:
 22790                           	opt stack 0
 22791                           tblptru	equ	0xFF8
 22792                           tblptrh	equ	0xFF7
 22793                           tblptrl	equ	0xFF6
 22794                           tablat	equ	0xFF5
 22795                           prodh	equ	0xFF4
 22796                           prodl	equ	0xFF3
 22797                           intcon	equ	0xFF2
 22798                           intcon3	equ	0xFF0
 22799                           indf0	equ	0xFEF
 22800                           postinc0	equ	0xFEE
 22801                           plusw0	equ	0xFEB
 22802                           fsr0h	equ	0xFEA
 22803                           fsr0l	equ	0xFE9
 22804                           wreg	equ	0xFE8
 22805                           indf1	equ	0xFE7
 22806                           postinc1	equ	0xFE6
 22807                           postdec1	equ	0xFE5
 22808                           plusw1	equ	0xFE3
 22809                           fsr1h	equ	0xFE2
 22810                           fsr1l	equ	0xFE1
 22811                           indf2	equ	0xFDF
 22812                           postinc2	equ	0xFDE
 22813                           postdec2	equ	0xFDD
 22814                           plusw2	equ	0xFDB
 22815                           fsr2h	equ	0xFDA
 22816                           fsr2l	equ	0xFD9
 22817                           status	equ	0xFD8
 22818                           
 22819 ;; *************** function _ethernetController_init *****************
 22820 ;; Defined at:
 22821 ;;		line 34 in file "src/enc424j600/ENC424J600.c"
 22822 ;; Parameters:    Size  Location     Type
 22823 ;;		None
 22824 ;; Auto vars:     Size  Location     Type
 22825 ;;  err             3   29[BANK0 ] struct error
 22826 ;; Return value:  Size  Location     Type
 22827 ;;                  3   26[BANK0 ] struct error
 22828 ;; Registers used:
 22829 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 22830 ;; Tracked objects:
 22831 ;;		On entry : 0/0
 22832 ;;		On exit  : 0/0
 22833 ;;		Unchanged: 0/0
 22834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22835 ;;      Params:         0       3       0       0       0       0       0       0       0
 22836 ;;      Locals:         0       3       0       0       0       0       0       0       0
 22837 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22838 ;;      Totals:         0       6       0       0       0       0       0       0       0
 22839 ;;Total ram usage:        6 bytes
 22840 ;; Hardware stack levels used:    1
 22841 ;; Hardware stack levels required when called:    8
 22842 ;; This function calls:
 22843 ;;		_enc424j600_enableAutoMACInsertion
 22844 ;;		_enc424j600_enableReception
 22845 ;;		_enc424j600_initSPI
 22846 ;;		_enc424j600_setNextPacketPointer
 22847 ;;		_enc424j600_setRXBufferStartAddress
 22848 ;;		_enc424j600_setRXTailPointer
 22849 ;;		_ethernetController_checkDeviceId
 22850 ;;		_ethernetController_softReset
 22851 ;; This function is called by:
 22852 ;;		_main
 22853 ;; This function uses a non-reentrant model
 22854 ;;
 22855                           
 22856                           	psect	text94
 22857  00435E                     __ptext94:
 22858                           	opt stack 0
 22859  00435E                     _ethernetController_init:
 22860                           	opt stack 22
 22861                           
 22862                           ;ENC424J600.c: 35: error_t err;
 22863                           ;ENC424J600.c: 36: enc424j600_initSPI();
 22864                           
 22865                           ;incstack = 0
 22866  00435E  EC00  F02B         	call	_enc424j600_initSPI	;wreg free
 22867                           
 22868                           ;ENC424J600.c: 37: err = ethernetController_softReset();
 22869  004362  EC20  F01D         	call	_ethernetController_softReset	;wreg free
 22870  004366  C06E  F07D         	movff	?_ethernetController_softReset,ethernetController_init@err
 22871  00436A  C06F  F07E         	movff	?_ethernetController_softReset+1,ethernetController_init@err+1
 22872  00436E  C070  F07F         	movff	?_ethernetController_softReset+2,ethernetController_init@err+2
 22873                           
 22874                           ;ENC424J600.c: 38: if (err.code != (uint16_t)0) {
 22875  004372  0100               	movlb	0	; () banked
 22876  004374  517E               	movf	(ethernetController_init@err+1)& (0+255),w,b
 22877  004376  117F               	iorwf	(ethernetController_init@err+2)& (0+255),w,b
 22878  004378  B4D8               	btfsc	status,2,c
 22879  00437A  D007               	goto	l75
 22880                           
 22881                           ; BSR set to: 0
 22882                           ;ENC424J600.c: 39: return err;
 22883  00437C  C07D  F07A         	movff	ethernetController_init@err,?_ethernetController_init
 22884  004380  C07E  F07B         	movff	ethernetController_init@err+1,?_ethernetController_init+1
 22885  004384  C07F  F07C         	movff	ethernetController_init@err+2,?_ethernetController_init+2
 22886  004388  0012               	return	
 22887  00438A                     l75:
 22888                           
 22889                           ; BSR set to: 0
 22890                           ;ENC424J600.c: 40: }
 22891                           ;ENC424J600.c: 41: err = ethernetController_checkDeviceId();
 22892                           
 22893                           ; BSR set to: 0
 22894  00438A  ECA7  F027         	call	_ethernetController_checkDeviceId	;wreg free
 22895  00438E  C06E  F07D         	movff	?_ethernetController_checkDeviceId,ethernetController_init@err
 22896  004392  C06F  F07E         	movff	?_ethernetController_checkDeviceId+1,ethernetController_init@err+1
 22897  004396  C070  F07F         	movff	?_ethernetController_checkDeviceId+2,ethernetController_init@err+2
 22898                           
 22899                           ;ENC424J600.c: 42: if (err.code != (uint16_t)0) {
 22900  00439A  0100               	movlb	0	; () banked
 22901  00439C  517E               	movf	(ethernetController_init@err+1)& (0+255),w,b
 22902  00439E  117F               	iorwf	(ethernetController_init@err+2)& (0+255),w,b
 22903  0043A0  B4D8               	btfsc	status,2,c
 22904  0043A2  D007               	goto	l77
 22905                           
 22906                           ; BSR set to: 0
 22907                           ;ENC424J600.c: 43: return err;
 22908  0043A4  C07D  F07A         	movff	ethernetController_init@err,?_ethernetController_init
 22909  0043A8  C07E  F07B         	movff	ethernetController_init@err+1,?_ethernetController_init+1
 22910  0043AC  C07F  F07C         	movff	ethernetController_init@err+2,?_ethernetController_init+2
 22911  0043B0  0012               	return	
 22912  0043B2                     l77:
 22913                           
 22914                           ; BSR set to: 0
 22915                           ;ENC424J600.c: 44: }
 22916                           ;ENC424J600.c: 63: enc424j600_setRXBufferStartAddress(0x3000);
 22917                           
 22918                           ; BSR set to: 0
 22919  0043B2  0E30               	movlw	48
 22920  0043B4  6F6F               	movwf	(enc424j600_setRXBufferStartAddress@addr+1)& (0+255),b
 22921  0043B6  0E00               	movlw	0
 22922  0043B8  6F6E               	movwf	enc424j600_setRXBufferStartAddress@addr& (0+255),b
 22923  0043BA  EC1C  F02A         	call	_enc424j600_setRXBufferStartAddress	;wreg free
 22924                           
 22925                           ;ENC424J600.c: 64: enc424j600_setNextPacketPointer(0x3000);
 22926  0043BE  0E30               	movlw	48
 22927  0043C0  0100               	movlb	0	; () banked
 22928  0043C2  6F61               	movwf	(enc424j600_setNextPacketPointer@ptr+1)& (0+255),b
 22929  0043C4  0E00               	movlw	0
 22930  0043C6  6F60               	movwf	enc424j600_setNextPacketPointer@ptr& (0+255),b
 22931  0043C8  EC9A  F02B         	call	_enc424j600_setNextPacketPointer	;wreg free
 22932                           
 22933                           ;ENC424J600.c: 65: enc424j600_setRXTailPointer(0x5FFE);
 22934  0043CC  0E5F               	movlw	95
 22935  0043CE  0100               	movlb	0	; () banked
 22936  0043D0  6F6F               	movwf	(enc424j600_setRXTailPointer@addr+1)& (0+255),b
 22937  0043D2  0EFE               	movlw	254
 22938  0043D4  6F6E               	movwf	enc424j600_setRXTailPointer@addr& (0+255),b
 22939  0043D6  EC07  F02A         	call	_enc424j600_setRXTailPointer	;wreg free
 22940                           
 22941                           ;ENC424J600.c: 67: enc424j600_enableReception();
 22942  0043DA  EC9F  F02B         	call	_enc424j600_enableReception	;wreg free
 22943                           
 22944                           ;ENC424J600.c: 68: enc424j600_enableAutoMACInsertion();
 22945  0043DE  EC6D  F02A         	call	_enc424j600_enableAutoMACInsertion	;wreg free
 22946                           
 22947                           ;ENC424J600.c: 70: err.module = ERROR_MODULE_ETHERNET_CONTROLLER;
 22948  0043E2  0E01               	movlw	1
 22949  0043E4  0100               	movlb	0	; () banked
 22950  0043E6  6F7D               	movwf	ethernetController_init@err& (0+255),b
 22951                           
 22952                           ; BSR set to: 0
 22953                           ;ENC424J600.c: 71: err.code = (uint16_t)0;
 22954  0043E8  0E00               	movlw	0
 22955  0043EA  6F7F               	movwf	(ethernetController_init@err+2)& (0+255),b
 22956  0043EC  0E00               	movlw	0
 22957  0043EE  6F7E               	movwf	(ethernetController_init@err+1)& (0+255),b
 22958                           
 22959                           ; BSR set to: 0
 22960                           ;ENC424J600.c: 72: return err;
 22961  0043F0  C07D  F07A         	movff	ethernetController_init@err,?_ethernetController_init
 22962  0043F4  C07E  F07B         	movff	ethernetController_init@err+1,?_ethernetController_init+1
 22963  0043F8  C07F  F07C         	movff	ethernetController_init@err+2,?_ethernetController_init+2
 22964  0043FC  0012               	return	
 22965  0043FE                     __end_of_ethernetController_init:
 22966                           	opt stack 0
 22967                           tblptru	equ	0xFF8
 22968                           tblptrh	equ	0xFF7
 22969                           tblptrl	equ	0xFF6
 22970                           tablat	equ	0xFF5
 22971                           prodh	equ	0xFF4
 22972                           prodl	equ	0xFF3
 22973                           intcon	equ	0xFF2
 22974                           intcon3	equ	0xFF0
 22975                           indf0	equ	0xFEF
 22976                           postinc0	equ	0xFEE
 22977                           plusw0	equ	0xFEB
 22978                           fsr0h	equ	0xFEA
 22979                           fsr0l	equ	0xFE9
 22980                           wreg	equ	0xFE8
 22981                           indf1	equ	0xFE7
 22982                           postinc1	equ	0xFE6
 22983                           postdec1	equ	0xFE5
 22984                           plusw1	equ	0xFE3
 22985                           fsr1h	equ	0xFE2
 22986                           fsr1l	equ	0xFE1
 22987                           indf2	equ	0xFDF
 22988                           postinc2	equ	0xFDE
 22989                           postdec2	equ	0xFDD
 22990                           plusw2	equ	0xFDB
 22991                           fsr2h	equ	0xFDA
 22992                           fsr2l	equ	0xFD9
 22993                           status	equ	0xFD8
 22994                           
 22995 ;; *************** function _ethernetController_softReset *****************
 22996 ;; Defined at:
 22997 ;;		line 75 in file "src/enc424j600/ENC424J600.c"
 22998 ;; Parameters:    Size  Location     Type
 22999 ;;		None
 23000 ;; Auto vars:     Size  Location     Type
 23001 ;;  err             3   23[BANK0 ] struct error
 23002 ;;  receivedData    2   21[BANK0 ] unsigned char [2]
 23003 ;;  dataToSend      2   19[BANK0 ] unsigned char [2]
 23004 ;;  comFailCount    1   18[BANK0 ] unsigned char 
 23005 ;; Return value:  Size  Location     Type
 23006 ;;                  3   14[BANK0 ] struct error
 23007 ;; Registers used:
 23008 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23009 ;; Tracked objects:
 23010 ;;		On entry : 0/0
 23011 ;;		On exit  : 0/0
 23012 ;;		Unchanged: 0/0
 23013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23014 ;;      Params:         0       3       0       0       0       0       0       0       0
 23015 ;;      Locals:         0       8       0       0       0       0       0       0       0
 23016 ;;      Temps:          0       1       0       0       0       0       0       0       0
 23017 ;;      Totals:         0      12       0       0       0       0       0       0       0
 23018 ;;Total ram usage:       12 bytes
 23019 ;; Hardware stack levels used:    1
 23020 ;; Hardware stack levels required when called:    7
 23021 ;; This function calls:
 23022 ;;		_enc424j600_readControlRegisterUnbanked
 23023 ;;		_enc424j600_writeControlRegisterUnbanked
 23024 ;;		_enc424j600_writeSingleByte
 23025 ;; This function is called by:
 23026 ;;		_ethernetController_init
 23027 ;; This function uses a non-reentrant model
 23028 ;;
 23029                           
 23030                           	psect	text95
 23031  003A40                     __ptext95:
 23032                           	opt stack 0
 23033  003A40                     _ethernetController_softReset:
 23034                           	opt stack 22
 23035                           
 23036                           ;ENC424J600.c: 93: uint8_t comFailCount = 0;
 23037                           
 23038                           ; BSR set to: 0
 23039                           ;incstack = 0
 23040  003A40  0E00               	movlw	0
 23041  003A42  0100               	movlb	0	; () banked
 23042  003A44  6F72               	movwf	ethernetController_softReset@comFailCount& (0+255),b
 23043                           
 23044                           ; BSR set to: 0
 23045                           ;ENC424J600.c: 94: uint8_t dataToSend[2] = {0x12, 0x34};
 23046  003A46  C04C  F073         	movff	ethernetController_softReset@F5987,ethernetController_softReset@dataToSend
 23047  003A4A  C04D  F074         	movff	ethernetController_softReset@F5987+1,ethernetController_softReset@dataToSend+1
 23048                           
 23049                           ; BSR set to: 0
 23050                           ;ENC424J600.c: 95: uint8_t receivedData[2] = {0, 0};
 23051  003A4E  C040  F075         	movff	ethernetController_softReset@F5989,ethernetController_softReset@receivedData
 23052  003A52  C041  F076         	movff	ethernetController_softReset@F5989+1,ethernetController_softReset@receivedData+1
 23053                           
 23054                           ;ENC424J600.c: 96: error_t err;
 23055                           ;ENC424J600.c: 97: err.module = ERROR_MODULE_ETHERNET_CONTROLLER;
 23056  003A56  0E01               	movlw	1
 23057  003A58  6F77               	movwf	ethernetController_softReset@err& (0+255),b
 23058                           
 23059                           ;ENC424J600.c: 98: err.code = (uint16_t)0;
 23060  003A5A  0E00               	movlw	0
 23061  003A5C  6F79               	movwf	(ethernetController_softReset@err+2)& (0+255),b
 23062  003A5E  0E00               	movlw	0
 23063  003A60  6F78               	movwf	(ethernetController_softReset@err+1)& (0+255),b
 23064                           
 23065                           ; BSR set to: 0
 23066                           ;ENC424J600.c: 99: if (comFailCount < 5) {
 23067  003A62  0E05               	movlw	5
 23068  003A64  6172               	cpfslt	ethernetController_softReset@comFailCount& (0+255),b
 23069  003A66  D05F               	goto	l84
 23070                           
 23071                           ; BSR set to: 0
 23072                           ;ENC424J600.c: 101: enc424j600_writeControlRegisterUnbanked(0x16 + 0x00, &dataToSend[0])
      +                          ;
 23073  003A68  0E73               	movlw	low ethernetController_softReset@dataToSend
 23074  003A6A  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 23075  003A6C  0E00               	movlw	high ethernetController_softReset@dataToSend
 23076  003A6E  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 23077  003A70  0E16               	movlw	22
 23078  003A72  EC30  F029         	call	_enc424j600_writeControlRegisterUnbanked
 23079                           
 23080                           ;ENC424J600.c: 102: enc424j600_writeControlRegisterUnbanked(0x17 + 0x00, &dataToSend[1])
      +                          ;
 23081  003A76  0E74               	movlw	low (ethernetController_softReset@dataToSend+1)
 23082  003A78  0100               	movlb	0	; () banked
 23083  003A7A  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 23084  003A7C  0E00               	movlw	high (ethernetController_softReset@dataToSend+1)
 23085  003A7E  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 23086  003A80  0E17               	movlw	23
 23087  003A82  EC30  F029         	call	_enc424j600_writeControlRegisterUnbanked
 23088                           
 23089                           ;ENC424J600.c: 104: enc424j600_readControlRegisterUnbanked(0x16 + 0x00, &receivedData[0]
      +                          );
 23090  003A86  0E75               	movlw	low ethernetController_softReset@receivedData
 23091  003A88  0100               	movlb	0	; () banked
 23092  003A8A  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 23093  003A8C  0E00               	movlw	high ethernetController_softReset@receivedData
 23094  003A8E  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 23095  003A90  0E16               	movlw	22
 23096  003A92  EC4B  F029         	call	_enc424j600_readControlRegisterUnbanked
 23097                           
 23098                           ;ENC424J600.c: 105: enc424j600_readControlRegisterUnbanked(0x17 + 0x00, &receivedData[1]
      +                          );
 23099  003A96  0E76               	movlw	low (ethernetController_softReset@receivedData+1)
 23100  003A98  0100               	movlb	0	; () banked
 23101  003A9A  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 23102  003A9C  0E00               	movlw	high (ethernetController_softReset@receivedData+1)
 23103  003A9E  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 23104  003AA0  0E17               	movlw	23
 23105  003AA2  EC4B  F029         	call	_enc424j600_readControlRegisterUnbanked
 23106                           
 23107                           ;ENC424J600.c: 107: if ((receivedData[0] == dataToSend[0]) && (receivedData[1] == dataTo
      +                          Send[1])) {
 23108  003AA6  0100               	movlb	0	; () banked
 23109  003AA8  5173               	movf	ethernetController_softReset@dataToSend& (0+255),w,b
 23110  003AAA  1975               	xorwf	ethernetController_softReset@receivedData& (0+255),w,b
 23111  003AAC  A4D8               	btfss	status,2,c
 23112  003AAE  D038               	goto	l88
 23113                           
 23114                           ; BSR set to: 0
 23115  003AB0  5174               	movf	(ethernetController_softReset@dataToSend+1)& (0+255),w,b
 23116  003AB2  1976               	xorwf	(ethernetController_softReset@receivedData+1)& (0+255),w,b
 23117  003AB4  A4D8               	btfss	status,2,c
 23118  003AB6  D034               	goto	l88
 23119                           
 23120                           ; BSR set to: 0
 23121                           ;ENC424J600.c: 109: enc424j600_writeSingleByte(0b11001010);
 23122  003AB8  0ECA               	movlw	202
 23123  003ABA  EC28  F02B         	call	_enc424j600_writeSingleByte
 23124                           
 23125                           ;ENC424J600.c: 110: _delay((unsigned long)((25)*(32000000UL/4000000.0)));
 23126  003ABE  0E42               	movlw	66
 23127  003AC0                     u12697:
 23128  003AC0  2EE8               	decfsz	wreg,f,c
 23129  003AC2  D7FE               	bra	u12697
 23130  003AC4  D000               	nop2	
 23131                           
 23132                           ;ENC424J600.c: 112: enc424j600_readControlRegisterUnbanked(0x16 + 0x00, &receivedData[0]
      +                          );
 23133  003AC6  0E75               	movlw	low ethernetController_softReset@receivedData
 23134  003AC8  0100               	movlb	0	; () banked
 23135  003ACA  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 23136  003ACC  0E00               	movlw	high ethernetController_softReset@receivedData
 23137  003ACE  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 23138  003AD0  0E16               	movlw	22
 23139  003AD2  EC4B  F029         	call	_enc424j600_readControlRegisterUnbanked
 23140                           
 23141                           ;ENC424J600.c: 113: enc424j600_readControlRegisterUnbanked(0x17 + 0x00, &receivedData[1]
      +                          );
 23142  003AD6  0E76               	movlw	low (ethernetController_softReset@receivedData+1)
 23143  003AD8  0100               	movlb	0	; () banked
 23144  003ADA  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 23145  003ADC  0E00               	movlw	high (ethernetController_softReset@receivedData+1)
 23146  003ADE  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 23147  003AE0  0E17               	movlw	23
 23148  003AE2  EC4B  F029         	call	_enc424j600_readControlRegisterUnbanked
 23149                           
 23150                           ;ENC424J600.c: 115: if (!receivedData[0] && !receivedData[1]) {
 23151  003AE6  0100               	movlb	0	; () banked
 23152  003AE8  5175               	movf	ethernetController_softReset@receivedData& (0+255),w,b
 23153  003AEA  A4D8               	btfss	status,2,c
 23154  003AEC  D00D               	goto	l86
 23155                           
 23156                           ; BSR set to: 0
 23157  003AEE  5176               	movf	(ethernetController_softReset@receivedData+1)& (0+255),w,b
 23158  003AF0  A4D8               	btfss	status,2,c
 23159  003AF2  D00A               	goto	l86
 23160                           
 23161                           ; BSR set to: 0
 23162                           ;ENC424J600.c: 117: _delay((unsigned long)((256)*(32000000UL/4000000.0)));
 23163  003AF4  0E03               	movlw	3
 23164  003AF6  0100               	movlb	0	; () banked
 23165  003AF8  6F71               	movwf	??_ethernetController_softReset& (0+255),b
 23166  003AFA  0EA7               	movlw	167
 23167  003AFC                     u12707:
 23168  003AFC  2EE8               	decfsz	wreg,f,c
 23169  003AFE  D7FE               	bra	u12707
 23170  003B00  2F71               	decfsz	??_ethernetController_softReset& (0+255),f,b
 23171  003B02  D7FC               	bra	u12707
 23172  003B04  D000               	nop2	
 23173  003B06  D005               	goto	l9993
 23174  003B08                     l86:
 23175                           
 23176                           ;ENC424J600.c: 120: err.code = ERROR_ETHERNET_CONTROLLER_UNRESPONSIVE;
 23177  003B08  0E01               	movlw	1
 23178  003B0A  0100               	movlb	0	; () banked
 23179  003B0C  6F79               	movwf	(ethernetController_softReset@err+2)& (0+255),b
 23180  003B0E  0E2E               	movlw	46
 23181  003B10  6F78               	movwf	(ethernetController_softReset@err+1)& (0+255),b
 23182  003B12                     l9993:
 23183                           
 23184                           ; BSR set to: 0
 23185                           ;ENC424J600.c: 121: return err;
 23186  003B12  C077  F06E         	movff	ethernetController_softReset@err,?_ethernetController_softReset
 23187  003B16  C078  F06F         	movff	ethernetController_softReset@err+1,?_ethernetController_softReset+1
 23188  003B1A  C079  F070         	movff	ethernetController_softReset@err+2,?_ethernetController_softReset+2
 23189                           
 23190                           ; BSR set to: 0
 23191  003B1E  0012               	return	
 23192  003B20                     l88:
 23193                           
 23194                           ;ENC424J600.c: 122: }
 23195                           ;ENC424J600.c: 123: }
 23196                           ;ENC424J600.c: 124: comFailCount++;
 23197                           
 23198                           ; BSR set to: 0
 23199                           
 23200                           ; BSR set to: 0
 23201  003B20  0100               	movlb	0	; () banked
 23202  003B22  2B72               	incf	ethernetController_softReset@comFailCount& (0+255),f,b
 23203                           
 23204                           ;ENC424J600.c: 125: } else {
 23205  003B24  D00B               	goto	l89
 23206  003B26                     l84:
 23207                           
 23208                           ; BSR set to: 0
 23209                           ;ENC424J600.c: 126: err.code = ERROR_ETHERNET_CONTROLLER_UNRESPONSIVE;
 23210                           
 23211                           ; BSR set to: 0
 23212  003B26  0E01               	movlw	1
 23213  003B28  6F79               	movwf	(ethernetController_softReset@err+2)& (0+255),b
 23214  003B2A  0E2E               	movlw	46
 23215  003B2C  6F78               	movwf	(ethernetController_softReset@err+1)& (0+255),b
 23216                           
 23217                           ; BSR set to: 0
 23218                           ;ENC424J600.c: 127: return err;
 23219  003B2E  C077  F06E         	movff	ethernetController_softReset@err,?_ethernetController_softReset
 23220  003B32  C078  F06F         	movff	ethernetController_softReset@err+1,?_ethernetController_softReset+1
 23221  003B36  C079  F070         	movff	ethernetController_softReset@err+2,?_ethernetController_softReset+2
 23222                           
 23223                           ; BSR set to: 0
 23224  003B3A  0012               	return	
 23225  003B3C                     l89:
 23226                           
 23227                           ; BSR set to: 0
 23228                           ;ENC424J600.c: 128: }
 23229                           ;ENC424J600.c: 129: return err;
 23230  003B3C  C077  F06E         	movff	ethernetController_softReset@err,?_ethernetController_softReset
 23231  003B40  C078  F06F         	movff	ethernetController_softReset@err+1,?_ethernetController_softReset+1
 23232  003B44  C079  F070         	movff	ethernetController_softReset@err+2,?_ethernetController_softReset+2
 23233  003B48  0012               	return		;funcret
 23234  003B4A                     __end_of_ethernetController_softReset:
 23235                           	opt stack 0
 23236                           tblptru	equ	0xFF8
 23237                           tblptrh	equ	0xFF7
 23238                           tblptrl	equ	0xFF6
 23239                           tablat	equ	0xFF5
 23240                           prodh	equ	0xFF4
 23241                           prodl	equ	0xFF3
 23242                           intcon	equ	0xFF2
 23243                           intcon3	equ	0xFF0
 23244                           indf0	equ	0xFEF
 23245                           postinc0	equ	0xFEE
 23246                           plusw0	equ	0xFEB
 23247                           fsr0h	equ	0xFEA
 23248                           fsr0l	equ	0xFE9
 23249                           wreg	equ	0xFE8
 23250                           indf1	equ	0xFE7
 23251                           postinc1	equ	0xFE6
 23252                           postdec1	equ	0xFE5
 23253                           plusw1	equ	0xFE3
 23254                           fsr1h	equ	0xFE2
 23255                           fsr1l	equ	0xFE1
 23256                           indf2	equ	0xFDF
 23257                           postinc2	equ	0xFDE
 23258                           postdec2	equ	0xFDD
 23259                           plusw2	equ	0xFDB
 23260                           fsr2h	equ	0xFDA
 23261                           fsr2l	equ	0xFD9
 23262                           status	equ	0xFD8
 23263                           
 23264 ;; *************** function _ethernetController_checkDeviceId *****************
 23265 ;; Defined at:
 23266 ;;		line 132 in file "src/enc424j600/ENC424J600.c"
 23267 ;; Parameters:    Size  Location     Type
 23268 ;;		None
 23269 ;; Auto vars:     Size  Location     Type
 23270 ;;  err             3   18[BANK0 ] struct error
 23271 ;;  data            1   17[BANK0 ] unsigned char 
 23272 ;; Return value:  Size  Location     Type
 23273 ;;                  3   14[BANK0 ] struct error
 23274 ;; Registers used:
 23275 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23276 ;; Tracked objects:
 23277 ;;		On entry : 0/0
 23278 ;;		On exit  : 0/0
 23279 ;;		Unchanged: 0/0
 23280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23281 ;;      Params:         0       3       0       0       0       0       0       0       0
 23282 ;;      Locals:         0       4       0       0       0       0       0       0       0
 23283 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23284 ;;      Totals:         0       7       0       0       0       0       0       0       0
 23285 ;;Total ram usage:        7 bytes
 23286 ;; Hardware stack levels used:    1
 23287 ;; Hardware stack levels required when called:    7
 23288 ;; This function calls:
 23289 ;;		_enc424j600_readControlRegisterUnbanked
 23290 ;; This function is called by:
 23291 ;;		_ethernetController_init
 23292 ;;		_main
 23293 ;; This function uses a non-reentrant model
 23294 ;;
 23295                           
 23296                           	psect	text96
 23297  004F4E                     __ptext96:
 23298                           	opt stack 0
 23299  004F4E                     _ethernetController_checkDeviceId:
 23300                           	opt stack 22
 23301                           
 23302                           ;ENC424J600.c: 133: error_t err;
 23303                           ;ENC424J600.c: 134: err.module = ERROR_MODULE_ETHERNET_CONTROLLER;
 23304                           
 23305                           ;incstack = 0
 23306  004F4E  0E01               	movlw	1
 23307  004F50  0100               	movlb	0	; () banked
 23308  004F52  6F72               	movwf	ethernetController_checkDeviceId@err& (0+255),b
 23309                           
 23310                           ;ENC424J600.c: 135: err.code = (uint16_t)0;
 23311  004F54  0E00               	movlw	0
 23312  004F56  6F74               	movwf	(ethernetController_checkDeviceId@err+2)& (0+255),b
 23313  004F58  0E00               	movlw	0
 23314  004F5A  6F73               	movwf	(ethernetController_checkDeviceId@err+1)& (0+255),b
 23315                           
 23316                           ;ENC424J600.c: 136: uint8_t data = 0;
 23317  004F5C  0E00               	movlw	0
 23318  004F5E  6F71               	movwf	ethernetController_checkDeviceId@data& (0+255),b
 23319                           
 23320                           ; BSR set to: 0
 23321                           ;ENC424J600.c: 137: enc424j600_readControlRegisterUnbanked(0x14 + 0x60, &data);
 23322  004F60  0E71               	movlw	low ethernetController_checkDeviceId@data
 23323  004F62  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 23324  004F64  0E00               	movlw	high ethernetController_checkDeviceId@data
 23325  004F66  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 23326  004F68  0E74               	movlw	116
 23327  004F6A  EC4B  F029         	call	_enc424j600_readControlRegisterUnbanked
 23328                           
 23329                           ;ENC424J600.c: 138: if (((data >> 5)&0x07) == 0b001)
 23330  004F6E  0100               	movlb	0	; () banked
 23331  004F70  3971               	swapf	ethernetController_checkDeviceId@data& (0+255),w,b
 23332  004F72  42E8               	rrncf	wreg,f,c
 23333  004F74  0B07               	andlw	7
 23334  004F76  0B07               	andlw	7
 23335  004F78  06E8               	decf	wreg,f,c
 23336  004F7A  A4D8               	btfss	status,2,c
 23337  004F7C  D004               	goto	l92
 23338                           
 23339                           ; BSR set to: 0
 23340                           ;ENC424J600.c: 139: err.code = (uint16_t)0;
 23341  004F7E  0E00               	movlw	0
 23342  004F80  6F74               	movwf	(ethernetController_checkDeviceId@err+2)& (0+255),b
 23343  004F82  0E00               	movlw	0
 23344  004F84  D003               	goto	L10
 23345  004F86                     l92:
 23346                           
 23347                           ; BSR set to: 0
 23348                           ;ENC424J600.c: 140: else
 23349                           ;ENC424J600.c: 141: err.code = ERROR_ETHERNET_CONTROLLER_UNKNOWN_DEVICE_ID;
 23350                           
 23351                           ; BSR set to: 0
 23352  004F86  0E01               	movlw	1
 23353  004F88  6F74               	movwf	(ethernetController_checkDeviceId@err+2)& (0+255),b
 23354  004F8A  0E2D               	movlw	45
 23355  004F8C                     L10:
 23356  004F8C  6F73               	movwf	(ethernetController_checkDeviceId@err+1)& (0+255),b
 23357                           
 23358                           ; BSR set to: 0
 23359                           ;ENC424J600.c: 142: return err;
 23360                           
 23361                           ; BSR set to: 0
 23362  004F8E  C072  F06E         	movff	ethernetController_checkDeviceId@err,?_ethernetController_checkDeviceId
 23363  004F92  C073  F06F         	movff	ethernetController_checkDeviceId@err+1,?_ethernetController_checkDeviceId+1
 23364  004F96  C074  F070         	movff	ethernetController_checkDeviceId@err+2,?_ethernetController_checkDeviceId+2
 23365  004F9A  0012               	return	
 23366  004F9C                     __end_of_ethernetController_checkDeviceId:
 23367                           	opt stack 0
 23368                           tblptru	equ	0xFF8
 23369                           tblptrh	equ	0xFF7
 23370                           tblptrl	equ	0xFF6
 23371                           tablat	equ	0xFF5
 23372                           prodh	equ	0xFF4
 23373                           prodl	equ	0xFF3
 23374                           intcon	equ	0xFF2
 23375                           intcon3	equ	0xFF0
 23376                           indf0	equ	0xFEF
 23377                           postinc0	equ	0xFEE
 23378                           plusw0	equ	0xFEB
 23379                           fsr0h	equ	0xFEA
 23380                           fsr0l	equ	0xFE9
 23381                           wreg	equ	0xFE8
 23382                           indf1	equ	0xFE7
 23383                           postinc1	equ	0xFE6
 23384                           postdec1	equ	0xFE5
 23385                           plusw1	equ	0xFE3
 23386                           fsr1h	equ	0xFE2
 23387                           fsr1l	equ	0xFE1
 23388                           indf2	equ	0xFDF
 23389                           postinc2	equ	0xFDE
 23390                           postdec2	equ	0xFDD
 23391                           plusw2	equ	0xFDB
 23392                           fsr2h	equ	0xFDA
 23393                           fsr2l	equ	0xFD9
 23394                           status	equ	0xFD8
 23395                           
 23396 ;; *************** function _enc424j600_setRXTailPointer *****************
 23397 ;; Defined at:
 23398 ;;		line 649 in file "src/enc424j600/ENC424J600.c"
 23399 ;; Parameters:    Size  Location     Type
 23400 ;;  addr            2   14[BANK0 ] unsigned int 
 23401 ;; Auto vars:     Size  Location     Type
 23402 ;;  highByte        1   17[BANK0 ] unsigned char 
 23403 ;;  lowByte         1   16[BANK0 ] unsigned char 
 23404 ;; Return value:  Size  Location     Type
 23405 ;;                  1    wreg      void 
 23406 ;; Registers used:
 23407 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23408 ;; Tracked objects:
 23409 ;;		On entry : 0/0
 23410 ;;		On exit  : 0/0
 23411 ;;		Unchanged: 0/0
 23412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23413 ;;      Params:         0       2       0       0       0       0       0       0       0
 23414 ;;      Locals:         0       2       0       0       0       0       0       0       0
 23415 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23416 ;;      Totals:         0       4       0       0       0       0       0       0       0
 23417 ;;Total ram usage:        4 bytes
 23418 ;; Hardware stack levels used:    1
 23419 ;; Hardware stack levels required when called:    7
 23420 ;; This function calls:
 23421 ;;		_enc424j600_writeControlRegisterUnbanked
 23422 ;; This function is called by:
 23423 ;;		_ethernetController_init
 23424 ;;		_ethernetController_dropPacket
 23425 ;; This function uses a non-reentrant model
 23426 ;;
 23427                           
 23428                           	psect	text97
 23429  00540E                     __ptext97:
 23430                           	opt stack 0
 23431  00540E                     _enc424j600_setRXTailPointer:
 23432                           	opt stack 19
 23433                           
 23434                           ;ENC424J600.c: 650: uint8_t lowByte = addr & 0x00ff;
 23435                           
 23436                           ; BSR set to: 0
 23437                           ;incstack = 0
 23438  00540E  C06E  F070         	movff	enc424j600_setRXTailPointer@addr,enc424j600_setRXTailPointer@lowByte
 23439                           
 23440                           ;ENC424J600.c: 651: uint8_t highByte = (addr >> 8) & 0xff;
 23441  005412  0100               	movlb	0	; () banked
 23442  005414  516F               	movf	(enc424j600_setRXTailPointer@addr+1)& (0+255),w,b
 23443  005416  6F71               	movwf	enc424j600_setRXTailPointer@highByte& (0+255),b
 23444                           
 23445                           ; BSR set to: 0
 23446                           ;ENC424J600.c: 652: enc424j600_writeControlRegisterUnbanked(0x06 + 0x00, &lowByte);
 23447  005418  0E70               	movlw	low enc424j600_setRXTailPointer@lowByte
 23448  00541A  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 23449  00541C  0E00               	movlw	high enc424j600_setRXTailPointer@lowByte
 23450  00541E  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 23451  005420  0E06               	movlw	6
 23452  005422  EC30  F029         	call	_enc424j600_writeControlRegisterUnbanked
 23453                           
 23454                           ;ENC424J600.c: 653: enc424j600_writeControlRegisterUnbanked(0x07 + 0x00, &highByte);
 23455  005426  0E71               	movlw	low enc424j600_setRXTailPointer@highByte
 23456  005428  0100               	movlb	0	; () banked
 23457  00542A  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 23458  00542C  0E00               	movlw	high enc424j600_setRXTailPointer@highByte
 23459  00542E  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 23460  005430  0E07               	movlw	7
 23461  005432  EC30  F029         	call	_enc424j600_writeControlRegisterUnbanked
 23462  005436  0012               	return		;funcret
 23463  005438                     __end_of_enc424j600_setRXTailPointer:
 23464                           	opt stack 0
 23465                           tblptru	equ	0xFF8
 23466                           tblptrh	equ	0xFF7
 23467                           tblptrl	equ	0xFF6
 23468                           tablat	equ	0xFF5
 23469                           prodh	equ	0xFF4
 23470                           prodl	equ	0xFF3
 23471                           intcon	equ	0xFF2
 23472                           intcon3	equ	0xFF0
 23473                           indf0	equ	0xFEF
 23474                           postinc0	equ	0xFEE
 23475                           plusw0	equ	0xFEB
 23476                           fsr0h	equ	0xFEA
 23477                           fsr0l	equ	0xFE9
 23478                           wreg	equ	0xFE8
 23479                           indf1	equ	0xFE7
 23480                           postinc1	equ	0xFE6
 23481                           postdec1	equ	0xFE5
 23482                           plusw1	equ	0xFE3
 23483                           fsr1h	equ	0xFE2
 23484                           fsr1l	equ	0xFE1
 23485                           indf2	equ	0xFDF
 23486                           postinc2	equ	0xFDE
 23487                           postdec2	equ	0xFDD
 23488                           plusw2	equ	0xFDB
 23489                           fsr2h	equ	0xFDA
 23490                           fsr2l	equ	0xFD9
 23491                           status	equ	0xFD8
 23492                           
 23493 ;; *************** function _enc424j600_setRXBufferStartAddress *****************
 23494 ;; Defined at:
 23495 ;;		line 642 in file "src/enc424j600/ENC424J600.c"
 23496 ;; Parameters:    Size  Location     Type
 23497 ;;  addr            2   14[BANK0 ] unsigned int 
 23498 ;; Auto vars:     Size  Location     Type
 23499 ;;  highByte        1   17[BANK0 ] unsigned char 
 23500 ;;  lowByte         1   16[BANK0 ] unsigned char 
 23501 ;; Return value:  Size  Location     Type
 23502 ;;                  1    wreg      void 
 23503 ;; Registers used:
 23504 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23505 ;; Tracked objects:
 23506 ;;		On entry : 0/0
 23507 ;;		On exit  : 0/0
 23508 ;;		Unchanged: 0/0
 23509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23510 ;;      Params:         0       2       0       0       0       0       0       0       0
 23511 ;;      Locals:         0       2       0       0       0       0       0       0       0
 23512 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23513 ;;      Totals:         0       4       0       0       0       0       0       0       0
 23514 ;;Total ram usage:        4 bytes
 23515 ;; Hardware stack levels used:    1
 23516 ;; Hardware stack levels required when called:    7
 23517 ;; This function calls:
 23518 ;;		_enc424j600_writeControlRegisterUnbanked
 23519 ;; This function is called by:
 23520 ;;		_ethernetController_init
 23521 ;; This function uses a non-reentrant model
 23522 ;;
 23523                           
 23524                           	psect	text98
 23525  005438                     __ptext98:
 23526                           	opt stack 0
 23527  005438                     _enc424j600_setRXBufferStartAddress:
 23528                           	opt stack 22
 23529                           
 23530                           ;ENC424J600.c: 643: uint8_t lowByte = addr & 0x00ff;
 23531                           
 23532                           ;incstack = 0
 23533  005438  C06E  F070         	movff	enc424j600_setRXBufferStartAddress@addr,enc424j600_setRXBufferStartAddress@lowByt
      +                          e
 23534                           
 23535                           ;ENC424J600.c: 644: uint8_t highByte = (addr >> 8) & 0xff;
 23536  00543C  0100               	movlb	0	; () banked
 23537  00543E  516F               	movf	(enc424j600_setRXBufferStartAddress@addr+1)& (0+255),w,b
 23538  005440  6F71               	movwf	enc424j600_setRXBufferStartAddress@highByte& (0+255),b
 23539                           
 23540                           ; BSR set to: 0
 23541                           ;ENC424J600.c: 645: enc424j600_writeControlRegisterUnbanked(0x04 + 0x00, &lowByte);
 23542  005442  0E70               	movlw	low enc424j600_setRXBufferStartAddress@lowByte
 23543  005444  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 23544  005446  0E00               	movlw	high enc424j600_setRXBufferStartAddress@lowByte
 23545  005448  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 23546  00544A  0E04               	movlw	4
 23547  00544C  EC30  F029         	call	_enc424j600_writeControlRegisterUnbanked
 23548                           
 23549                           ;ENC424J600.c: 646: enc424j600_writeControlRegisterUnbanked(0x05 + 0x00, &highByte);
 23550  005450  0E71               	movlw	low enc424j600_setRXBufferStartAddress@highByte
 23551  005452  0100               	movlb	0	; () banked
 23552  005454  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 23553  005456  0E00               	movlw	high enc424j600_setRXBufferStartAddress@highByte
 23554  005458  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 23555  00545A  0E05               	movlw	5
 23556  00545C  EC30  F029         	call	_enc424j600_writeControlRegisterUnbanked
 23557  005460  0012               	return		;funcret
 23558  005462                     __end_of_enc424j600_setRXBufferStartAddress:
 23559                           	opt stack 0
 23560                           tblptru	equ	0xFF8
 23561                           tblptrh	equ	0xFF7
 23562                           tblptrl	equ	0xFF6
 23563                           tablat	equ	0xFF5
 23564                           prodh	equ	0xFF4
 23565                           prodl	equ	0xFF3
 23566                           intcon	equ	0xFF2
 23567                           intcon3	equ	0xFF0
 23568                           indf0	equ	0xFEF
 23569                           postinc0	equ	0xFEE
 23570                           plusw0	equ	0xFEB
 23571                           fsr0h	equ	0xFEA
 23572                           fsr0l	equ	0xFE9
 23573                           wreg	equ	0xFE8
 23574                           indf1	equ	0xFE7
 23575                           postinc1	equ	0xFE6
 23576                           postdec1	equ	0xFE5
 23577                           plusw1	equ	0xFE3
 23578                           fsr1h	equ	0xFE2
 23579                           fsr1l	equ	0xFE1
 23580                           indf2	equ	0xFDF
 23581                           postinc2	equ	0xFDE
 23582                           postdec2	equ	0xFDD
 23583                           plusw2	equ	0xFDB
 23584                           fsr2h	equ	0xFDA
 23585                           fsr2l	equ	0xFD9
 23586                           status	equ	0xFD8
 23587                           
 23588 ;; *************** function _enc424j600_setNextPacketPointer *****************
 23589 ;; Defined at:
 23590 ;;		line 586 in file "src/enc424j600/ENC424J600.c"
 23591 ;; Parameters:    Size  Location     Type
 23592 ;;  ptr             2    0[BANK0 ] unsigned int 
 23593 ;; Auto vars:     Size  Location     Type
 23594 ;;		None
 23595 ;; Return value:  Size  Location     Type
 23596 ;;                  1    wreg      void 
 23597 ;; Registers used:
 23598 ;;		None
 23599 ;; Tracked objects:
 23600 ;;		On entry : 0/0
 23601 ;;		On exit  : 0/0
 23602 ;;		Unchanged: 0/0
 23603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23604 ;;      Params:         0       2       0       0       0       0       0       0       0
 23605 ;;      Locals:         0       0       0       0       0       0       0       0       0
 23606 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23607 ;;      Totals:         0       2       0       0       0       0       0       0       0
 23608 ;;Total ram usage:        2 bytes
 23609 ;; Hardware stack levels used:    1
 23610 ;; Hardware stack levels required when called:    4
 23611 ;; This function calls:
 23612 ;;		Nothing
 23613 ;; This function is called by:
 23614 ;;		_ethernetController_init
 23615 ;;		_ethernetController_updateNextPacketPointer
 23616 ;; This function uses a non-reentrant model
 23617 ;;
 23618                           
 23619                           	psect	text99
 23620  005734                     __ptext99:
 23621                           	opt stack 0
 23622  005734                     _enc424j600_setNextPacketPointer:
 23623                           	opt stack 23
 23624                           
 23625                           ;ENC424J600.c: 587: nextPacketPointer = ptr;
 23626                           
 23627                           ;incstack = 0
 23628  005734  C060  F042         	movff	enc424j600_setNextPacketPointer@ptr,_nextPacketPointer
 23629  005738  C061  F043         	movff	enc424j600_setNextPacketPointer@ptr+1,_nextPacketPointer+1
 23630  00573C  0012               	return		;funcret
 23631  00573E                     __end_of_enc424j600_setNextPacketPointer:
 23632                           	opt stack 0
 23633                           tblptru	equ	0xFF8
 23634                           tblptrh	equ	0xFF7
 23635                           tblptrl	equ	0xFF6
 23636                           tablat	equ	0xFF5
 23637                           prodh	equ	0xFF4
 23638                           prodl	equ	0xFF3
 23639                           intcon	equ	0xFF2
 23640                           intcon3	equ	0xFF0
 23641                           indf0	equ	0xFEF
 23642                           postinc0	equ	0xFEE
 23643                           plusw0	equ	0xFEB
 23644                           fsr0h	equ	0xFEA
 23645                           fsr0l	equ	0xFE9
 23646                           wreg	equ	0xFE8
 23647                           indf1	equ	0xFE7
 23648                           postinc1	equ	0xFE6
 23649                           postdec1	equ	0xFE5
 23650                           plusw1	equ	0xFE3
 23651                           fsr1h	equ	0xFE2
 23652                           fsr1l	equ	0xFE1
 23653                           indf2	equ	0xFDF
 23654                           postinc2	equ	0xFDE
 23655                           postdec2	equ	0xFDD
 23656                           plusw2	equ	0xFDB
 23657                           fsr2h	equ	0xFDA
 23658                           fsr2l	equ	0xFD9
 23659                           status	equ	0xFD8
 23660                           
 23661 ;; *************** function _enc424j600_enableReception *****************
 23662 ;; Defined at:
 23663 ;;		line 672 in file "src/enc424j600/ENC424J600.c"
 23664 ;; Parameters:    Size  Location     Type
 23665 ;;		None
 23666 ;; Auto vars:     Size  Location     Type
 23667 ;;		None
 23668 ;; Return value:  Size  Location     Type
 23669 ;;                  1    wreg      void 
 23670 ;; Registers used:
 23671 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23672 ;; Tracked objects:
 23673 ;;		On entry : 0/0
 23674 ;;		On exit  : 0/0
 23675 ;;		Unchanged: 0/0
 23676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23677 ;;      Params:         0       0       0       0       0       0       0       0       0
 23678 ;;      Locals:         0       0       0       0       0       0       0       0       0
 23679 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23680 ;;      Totals:         0       0       0       0       0       0       0       0       0
 23681 ;;Total ram usage:        0 bytes
 23682 ;; Hardware stack levels used:    1
 23683 ;; Hardware stack levels required when called:    7
 23684 ;; This function calls:
 23685 ;;		_enc424j600_writeSingleByte
 23686 ;; This function is called by:
 23687 ;;		_ethernetController_init
 23688 ;;		_ethernetController_enableReception
 23689 ;; This function uses a non-reentrant model
 23690 ;;
 23691                           
 23692                           	psect	text100
 23693  00573E                     __ptext100:
 23694                           	opt stack 0
 23695  00573E                     _enc424j600_enableReception:
 23696                           	opt stack 22
 23697                           
 23698                           ;ENC424J600.c: 673: enc424j600_writeSingleByte(0b11101000);
 23699                           
 23700                           ;incstack = 0
 23701  00573E  0EE8               	movlw	232
 23702  005740  EC28  F02B         	call	_enc424j600_writeSingleByte
 23703  005744  0012               	return		;funcret
 23704  005746                     __end_of_enc424j600_enableReception:
 23705                           	opt stack 0
 23706                           tblptru	equ	0xFF8
 23707                           tblptrh	equ	0xFF7
 23708                           tblptrl	equ	0xFF6
 23709                           tablat	equ	0xFF5
 23710                           prodh	equ	0xFF4
 23711                           prodl	equ	0xFF3
 23712                           intcon	equ	0xFF2
 23713                           intcon3	equ	0xFF0
 23714                           indf0	equ	0xFEF
 23715                           postinc0	equ	0xFEE
 23716                           plusw0	equ	0xFEB
 23717                           fsr0h	equ	0xFEA
 23718                           fsr0l	equ	0xFE9
 23719                           wreg	equ	0xFE8
 23720                           indf1	equ	0xFE7
 23721                           postinc1	equ	0xFE6
 23722                           postdec1	equ	0xFE5
 23723                           plusw1	equ	0xFE3
 23724                           fsr1h	equ	0xFE2
 23725                           fsr1l	equ	0xFE1
 23726                           indf2	equ	0xFDF
 23727                           postinc2	equ	0xFDE
 23728                           postdec2	equ	0xFDD
 23729                           plusw2	equ	0xFDB
 23730                           fsr2h	equ	0xFDA
 23731                           fsr2l	equ	0xFD9
 23732                           status	equ	0xFD8
 23733                           
 23734 ;; *************** function _enc424j600_writeSingleByte *****************
 23735 ;; Defined at:
 23736 ;;		line 512 in file "src/enc424j600/ENC424J600.c"
 23737 ;; Parameters:    Size  Location     Type
 23738 ;;  opcode          1    wreg     unsigned char 
 23739 ;; Auto vars:     Size  Location     Type
 23740 ;;  opcode          1   10[BANK0 ] unsigned char 
 23741 ;; Return value:  Size  Location     Type
 23742 ;;                  1    wreg      void 
 23743 ;; Registers used:
 23744 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23745 ;; Tracked objects:
 23746 ;;		On entry : 0/0
 23747 ;;		On exit  : 0/0
 23748 ;;		Unchanged: 0/0
 23749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23750 ;;      Params:         0       0       0       0       0       0       0       0       0
 23751 ;;      Locals:         0       1       0       0       0       0       0       0       0
 23752 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23753 ;;      Totals:         0       1       0       0       0       0       0       0       0
 23754 ;;Total ram usage:        1 bytes
 23755 ;; Hardware stack levels used:    1
 23756 ;; Hardware stack levels required when called:    6
 23757 ;; This function calls:
 23758 ;;		_enc424j600_writeSPI
 23759 ;; This function is called by:
 23760 ;;		_ethernetController_softReset
 23761 ;;		_ethernetController_sendPacket
 23762 ;;		_ethernetController_dropPacket
 23763 ;;		_enc424j600_enableReception
 23764 ;;		_enc424j600_disableReception
 23765 ;; This function uses a non-reentrant model
 23766 ;;
 23767                           
 23768                           	psect	text101
 23769  005650                     __ptext101:
 23770                           	opt stack 0
 23771  005650                     _enc424j600_writeSingleByte:
 23772                           	opt stack 21
 23773                           
 23774                           ;incstack = 0
 23775                           ;enc424j600_writeSingleByte@opcode stored from wreg
 23776  005650  0100               	movlb	0	; () banked
 23777  005652  6F6A               	movwf	enc424j600_writeSingleByte@opcode& (0+255),b
 23778                           
 23779                           ;ENC424J600.c: 513: PORTBbits.RB4=0;
 23780  005654  9881               	bcf	3969,4,c	;volatile
 23781                           
 23782                           ;ENC424J600.c: 514: enc424j600_writeSPI(&opcode);
 23783  005656  0E6A               	movlw	low enc424j600_writeSingleByte@opcode
 23784  005658  0100               	movlb	0	; () banked
 23785  00565A  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 23786  00565C  0E00               	movlw	high enc424j600_writeSingleByte@opcode
 23787  00565E  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 23788  005660  EC20  F026         	call	_enc424j600_writeSPI	;wreg free
 23789                           
 23790                           ;ENC424J600.c: 515: PORTBbits.RB4=1;
 23791  005664  8881               	bsf	3969,4,c	;volatile
 23792  005666  0012               	return		;funcret
 23793  005668                     __end_of_enc424j600_writeSingleByte:
 23794                           	opt stack 0
 23795                           tblptru	equ	0xFF8
 23796                           tblptrh	equ	0xFF7
 23797                           tblptrl	equ	0xFF6
 23798                           tablat	equ	0xFF5
 23799                           prodh	equ	0xFF4
 23800                           prodl	equ	0xFF3
 23801                           intcon	equ	0xFF2
 23802                           intcon3	equ	0xFF0
 23803                           indf0	equ	0xFEF
 23804                           postinc0	equ	0xFEE
 23805                           plusw0	equ	0xFEB
 23806                           fsr0h	equ	0xFEA
 23807                           fsr0l	equ	0xFE9
 23808                           wreg	equ	0xFE8
 23809                           indf1	equ	0xFE7
 23810                           postinc1	equ	0xFE6
 23811                           postdec1	equ	0xFE5
 23812                           plusw1	equ	0xFE3
 23813                           fsr1h	equ	0xFE2
 23814                           fsr1l	equ	0xFE1
 23815                           indf2	equ	0xFDF
 23816                           postinc2	equ	0xFDE
 23817                           postdec2	equ	0xFDD
 23818                           plusw2	equ	0xFDB
 23819                           fsr2h	equ	0xFDA
 23820                           fsr2l	equ	0xFD9
 23821                           status	equ	0xFD8
 23822                           
 23823 ;; *************** function _enc424j600_enableAutoMACInsertion *****************
 23824 ;; Defined at:
 23825 ;;		line 658 in file "src/enc424j600/ENC424J600.c"
 23826 ;; Parameters:    Size  Location     Type
 23827 ;;		None
 23828 ;; Auto vars:     Size  Location     Type
 23829 ;;  temp            1   14[BANK0 ] unsigned char 
 23830 ;; Return value:  Size  Location     Type
 23831 ;;                  1    wreg      void 
 23832 ;; Registers used:
 23833 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23834 ;; Tracked objects:
 23835 ;;		On entry : 0/0
 23836 ;;		On exit  : 0/0
 23837 ;;		Unchanged: 0/0
 23838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23839 ;;      Params:         0       0       0       0       0       0       0       0       0
 23840 ;;      Locals:         0       1       0       0       0       0       0       0       0
 23841 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23842 ;;      Totals:         0       1       0       0       0       0       0       0       0
 23843 ;;Total ram usage:        1 bytes
 23844 ;; Hardware stack levels used:    1
 23845 ;; Hardware stack levels required when called:    7
 23846 ;; This function calls:
 23847 ;;		_enc424j600_readControlRegisterUnbanked
 23848 ;;		_enc424j600_writeControlRegisterUnbanked
 23849 ;; This function is called by:
 23850 ;;		_ethernetController_init
 23851 ;; This function uses a non-reentrant model
 23852 ;;
 23853                           
 23854                           	psect	text102
 23855  0054DA                     __ptext102:
 23856                           	opt stack 0
 23857  0054DA                     _enc424j600_enableAutoMACInsertion:
 23858                           	opt stack 22
 23859                           
 23860                           ;ENC424J600.c: 659: uint8_t temp = 0;
 23861                           
 23862                           ;incstack = 0
 23863  0054DA  0E00               	movlw	0
 23864  0054DC  0100               	movlb	0	; () banked
 23865  0054DE  6F6E               	movwf	enc424j600_enableAutoMACInsertion@temp& (0+255),b
 23866                           
 23867                           ; BSR set to: 0
 23868                           ;ENC424J600.c: 660: enc424j600_readControlRegisterUnbanked(0x0F + 0x60, &temp);
 23869  0054E0  0E6E               	movlw	low enc424j600_enableAutoMACInsertion@temp
 23870  0054E2  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 23871  0054E4  0E00               	movlw	high enc424j600_enableAutoMACInsertion@temp
 23872  0054E6  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 23873  0054E8  0E6F               	movlw	111
 23874  0054EA  EC4B  F029         	call	_enc424j600_readControlRegisterUnbanked
 23875                           
 23876                           ;ENC424J600.c: 661: temp |= (1 << 5);
 23877  0054EE  0100               	movlb	0	; () banked
 23878  0054F0  8B6E               	bsf	enc424j600_enableAutoMACInsertion@temp& (0+255),5,b
 23879                           
 23880                           ; BSR set to: 0
 23881                           ;ENC424J600.c: 662: enc424j600_writeControlRegisterUnbanked(0x0F + 0x60, &temp);
 23882  0054F2  0E6E               	movlw	low enc424j600_enableAutoMACInsertion@temp
 23883  0054F4  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 23884  0054F6  0E00               	movlw	high enc424j600_enableAutoMACInsertion@temp
 23885  0054F8  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 23886  0054FA  0E6F               	movlw	111
 23887  0054FC  EC30  F029         	call	_enc424j600_writeControlRegisterUnbanked
 23888  005500  0012               	return		;funcret
 23889  005502                     __end_of_enc424j600_enableAutoMACInsertion:
 23890                           	opt stack 0
 23891                           tblptru	equ	0xFF8
 23892                           tblptrh	equ	0xFF7
 23893                           tblptrl	equ	0xFF6
 23894                           tablat	equ	0xFF5
 23895                           prodh	equ	0xFF4
 23896                           prodl	equ	0xFF3
 23897                           intcon	equ	0xFF2
 23898                           intcon3	equ	0xFF0
 23899                           indf0	equ	0xFEF
 23900                           postinc0	equ	0xFEE
 23901                           plusw0	equ	0xFEB
 23902                           fsr0h	equ	0xFEA
 23903                           fsr0l	equ	0xFE9
 23904                           wreg	equ	0xFE8
 23905                           indf1	equ	0xFE7
 23906                           postinc1	equ	0xFE6
 23907                           postdec1	equ	0xFE5
 23908                           plusw1	equ	0xFE3
 23909                           fsr1h	equ	0xFE2
 23910                           fsr1l	equ	0xFE1
 23911                           indf2	equ	0xFDF
 23912                           postinc2	equ	0xFDE
 23913                           postdec2	equ	0xFDD
 23914                           plusw2	equ	0xFDB
 23915                           fsr2h	equ	0xFDA
 23916                           fsr2l	equ	0xFD9
 23917                           status	equ	0xFD8
 23918                           
 23919 ;; *************** function _enc424j600_writeControlRegisterUnbanked *****************
 23920 ;; Defined at:
 23921 ;;		line 518 in file "src/enc424j600/ENC424J600.c"
 23922 ;; Parameters:    Size  Location     Type
 23923 ;;  addr            1    wreg     unsigned char 
 23924 ;;  data            2   10[BANK0 ] PTR unsigned char 
 23925 ;;		 -> enc424j600_clearInterruptFlag@temp(1), enc424j600_disable@temp(1), enc424j600_enable@temp(1), enc424j600_disable
      +AutoMACInsertion@temp(1), 
 23926 ;;		 -> enc424j600_enableAutoMACInsertion@temp(1), enc424j600_setRXTailPointer@highByte(1), enc424j600_setRXTailPointer@
      +lowByte(1), enc424j600_setRXBufferStartAddress@highByte(1), 
 23927 ;;		 -> enc424j600_setRXBufferStartAddress@lowByte(1), enc424j600_setTXStartAddress@highByte(1), enc424j600_setTXStartAd
      +dress@lowByte(1), enc424j600_setTXLength@highByte(1), 
 23928 ;;		 -> enc424j600_setTXLength@lowByte(1), enc424j600_readPHYRegister@temp(1), enc424j600_readPHYRegister@unusedBits(1),
      + enc424j600_readPHYRegister@PHYaddress(1), 
 23929 ;;		 -> ethernetController_setLEDConfig@data(1), mac.address(6), ethernetController_setMacAddress@mac(6), ethernetContro
      +ller_softReset@dataToSend(2), 
 23930 ;; Auto vars:     Size  Location     Type
 23931 ;;  addr            1   12[BANK0 ] unsigned char 
 23932 ;;  opcode          1   13[BANK0 ] unsigned char 
 23933 ;; Return value:  Size  Location     Type
 23934 ;;                  1    wreg      void 
 23935 ;; Registers used:
 23936 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23937 ;; Tracked objects:
 23938 ;;		On entry : 0/0
 23939 ;;		On exit  : 0/0
 23940 ;;		Unchanged: 0/0
 23941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23942 ;;      Params:         0       2       0       0       0       0       0       0       0
 23943 ;;      Locals:         0       2       0       0       0       0       0       0       0
 23944 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23945 ;;      Totals:         0       4       0       0       0       0       0       0       0
 23946 ;;Total ram usage:        4 bytes
 23947 ;; Hardware stack levels used:    1
 23948 ;; Hardware stack levels required when called:    6
 23949 ;; This function calls:
 23950 ;;		_enc424j600_writeSPI
 23951 ;; This function is called by:
 23952 ;;		_ethernetController_softReset
 23953 ;;		_ethernetController_setLEDConfig
 23954 ;;		_enc424j600_readPHYRegister
 23955 ;;		_enc424j600_setTXLength
 23956 ;;		_enc424j600_setTXStartAddress
 23957 ;;		_enc424j600_setRXBufferStartAddress
 23958 ;;		_enc424j600_setRXTailPointer
 23959 ;;		_enc424j600_enableAutoMACInsertion
 23960 ;;		_enc424j600_clearInterruptFlag
 23961 ;;		_ethernetController_setMacAddress
 23962 ;;		_enc424j600_disableAutoMACInsertion
 23963 ;;		_enc424j600_enable
 23964 ;;		_enc424j600_disable
 23965 ;; This function uses a non-reentrant model
 23966 ;;
 23967                           
 23968                           	psect	text103
 23969  005260                     __ptext103:
 23970                           	opt stack 0
 23971  005260                     _enc424j600_writeControlRegisterUnbanked:
 23972                           	opt stack 20
 23973                           
 23974                           ;incstack = 0
 23975                           ;enc424j600_writeControlRegisterUnbanked@addr stored from wreg
 23976  005260  0100               	movlb	0	; () banked
 23977  005262  6F6C               	movwf	enc424j600_writeControlRegisterUnbanked@addr& (0+255),b
 23978                           
 23979                           ;ENC424J600.c: 519: uint8_t opcode = 0x22;
 23980  005264  0E22               	movlw	34
 23981  005266  0100               	movlb	0	; () banked
 23982  005268  6F6D               	movwf	enc424j600_writeControlRegisterUnbanked@opcode& (0+255),b
 23983                           
 23984                           ; BSR set to: 0
 23985                           ;ENC424J600.c: 520: PORTBbits.RB4=0;
 23986  00526A  9881               	bcf	3969,4,c	;volatile
 23987                           
 23988                           ; BSR set to: 0
 23989                           ;ENC424J600.c: 521: enc424j600_writeSPI(&opcode);
 23990  00526C  0E6D               	movlw	low enc424j600_writeControlRegisterUnbanked@opcode
 23991  00526E  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 23992  005270  0E00               	movlw	high enc424j600_writeControlRegisterUnbanked@opcode
 23993  005272  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 23994  005274  EC20  F026         	call	_enc424j600_writeSPI	;wreg free
 23995                           
 23996                           ;ENC424J600.c: 522: enc424j600_writeSPI(&addr);
 23997  005278  0E6C               	movlw	low enc424j600_writeControlRegisterUnbanked@addr
 23998  00527A  0100               	movlb	0	; () banked
 23999  00527C  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 24000  00527E  0E00               	movlw	high enc424j600_writeControlRegisterUnbanked@addr
 24001  005280  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 24002  005282  EC20  F026         	call	_enc424j600_writeSPI	;wreg free
 24003                           
 24004                           ;ENC424J600.c: 523: enc424j600_writeSPI(data);
 24005  005286  C06A  F060         	movff	enc424j600_writeControlRegisterUnbanked@data,enc424j600_writeSPI@data
 24006  00528A  C06B  F061         	movff	enc424j600_writeControlRegisterUnbanked@data+1,enc424j600_writeSPI@data+1
 24007  00528E  EC20  F026         	call	_enc424j600_writeSPI	;wreg free
 24008                           
 24009                           ;ENC424J600.c: 524: PORTBbits.RB4=1;
 24010  005292  8881               	bsf	3969,4,c	;volatile
 24011  005294  0012               	return		;funcret
 24012  005296                     __end_of_enc424j600_writeControlRegisterUnbanked:
 24013                           	opt stack 0
 24014                           tblptru	equ	0xFF8
 24015                           tblptrh	equ	0xFF7
 24016                           tblptrl	equ	0xFF6
 24017                           tablat	equ	0xFF5
 24018                           prodh	equ	0xFF4
 24019                           prodl	equ	0xFF3
 24020                           intcon	equ	0xFF2
 24021                           intcon3	equ	0xFF0
 24022                           indf0	equ	0xFEF
 24023                           postinc0	equ	0xFEE
 24024                           plusw0	equ	0xFEB
 24025                           fsr0h	equ	0xFEA
 24026                           fsr0l	equ	0xFE9
 24027                           wreg	equ	0xFE8
 24028                           indf1	equ	0xFE7
 24029                           postinc1	equ	0xFE6
 24030                           postdec1	equ	0xFE5
 24031                           plusw1	equ	0xFE3
 24032                           fsr1h	equ	0xFE2
 24033                           fsr1l	equ	0xFE1
 24034                           indf2	equ	0xFDF
 24035                           postinc2	equ	0xFDE
 24036                           postdec2	equ	0xFDD
 24037                           plusw2	equ	0xFDB
 24038                           fsr2h	equ	0xFDA
 24039                           fsr2l	equ	0xFD9
 24040                           status	equ	0xFD8
 24041                           
 24042 ;; *************** function _enc424j600_readControlRegisterUnbanked *****************
 24043 ;; Defined at:
 24044 ;;		line 527 in file "src/enc424j600/ENC424J600.c"
 24045 ;; Parameters:    Size  Location     Type
 24046 ;;  addr            1    wreg     unsigned char 
 24047 ;;  data            2   10[BANK0 ] PTR unsigned char 
 24048 ;;		 -> enc424j600_clearInterruptFlag@temp(1), enc424j600_getInterruptFlags@high(1), enc424j600_getInterruptFlags@low(1)
      +, enc424j600_disable@temp(1), 
 24049 ;;		 -> enc424j600_enable@temp(1), enc424j600_disableAutoMACInsertion@temp(1), enc424j600_enableAutoMACInsertion@temp(1)
      +, enc424j600_getPacketCount@lowByte(1), 
 24050 ;;		 -> enc424j600_readPHYRegister@highByte(1), enc424j600_readPHYRegister@lowByte(1), enc424j600_readPHYRegister@temp(1
      +), ethernetController_setLEDConfig@data(1), 
 24051 ;;		 -> ethernetController_updateLinkStatus@temp(1), mac.address(6), ethernetController_getMacAddress@mac(6), ethernetCo
      +ntroller_getSiliconRevision@data(1), 
 24052 ;;		 -> ethernetController_checkDeviceId@data(1), ethernetController_softReset@receivedData(2), 
 24053 ;; Auto vars:     Size  Location     Type
 24054 ;;  addr            1   12[BANK0 ] unsigned char 
 24055 ;;  opcode          1   13[BANK0 ] unsigned char 
 24056 ;; Return value:  Size  Location     Type
 24057 ;;                  1    wreg      void 
 24058 ;; Registers used:
 24059 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24060 ;; Tracked objects:
 24061 ;;		On entry : 0/0
 24062 ;;		On exit  : 0/0
 24063 ;;		Unchanged: 0/0
 24064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24065 ;;      Params:         0       2       0       0       0       0       0       0       0
 24066 ;;      Locals:         0       2       0       0       0       0       0       0       0
 24067 ;;      Temps:          0       0       0       0       0       0       0       0       0
 24068 ;;      Totals:         0       4       0       0       0       0       0       0       0
 24069 ;;Total ram usage:        4 bytes
 24070 ;; Hardware stack levels used:    1
 24071 ;; Hardware stack levels required when called:    6
 24072 ;; This function calls:
 24073 ;;		_enc424j600_readSPI
 24074 ;;		_enc424j600_writeSPI
 24075 ;; This function is called by:
 24076 ;;		_ethernetController_softReset
 24077 ;;		_ethernetController_checkDeviceId
 24078 ;;		_ethernetController_getMacAddress
 24079 ;;		_ethernetController_updateLinkStatus
 24080 ;;		_ethernetController_setLEDConfig
 24081 ;;		_enc424j600_readPHYRegister
 24082 ;;		_enc424j600_getPacketCount
 24083 ;;		_enc424j600_enableAutoMACInsertion
 24084 ;;		_enc424j600_getInterruptFlags
 24085 ;;		_enc424j600_clearInterruptFlag
 24086 ;;		_ethernetController_getSiliconRevision
 24087 ;;		_enc424j600_disableAutoMACInsertion
 24088 ;;		_enc424j600_enable
 24089 ;;		_enc424j600_disable
 24090 ;; This function uses a non-reentrant model
 24091 ;;
 24092                           
 24093                           	psect	text104
 24094  005296                     __ptext104:
 24095                           	opt stack 0
 24096  005296                     _enc424j600_readControlRegisterUnbanked:
 24097                           	opt stack 21
 24098                           
 24099                           ;incstack = 0
 24100                           ;enc424j600_readControlRegisterUnbanked@addr stored from wreg
 24101  005296  0100               	movlb	0	; () banked
 24102  005298  6F6C               	movwf	enc424j600_readControlRegisterUnbanked@addr& (0+255),b
 24103                           
 24104                           ;ENC424J600.c: 528: uint8_t opcode = 0x20;
 24105  00529A  0E20               	movlw	32
 24106  00529C  0100               	movlb	0	; () banked
 24107  00529E  6F6D               	movwf	enc424j600_readControlRegisterUnbanked@opcode& (0+255),b
 24108                           
 24109                           ; BSR set to: 0
 24110                           ;ENC424J600.c: 529: PORTBbits.RB4=0;
 24111  0052A0  9881               	bcf	3969,4,c	;volatile
 24112                           
 24113                           ; BSR set to: 0
 24114                           ;ENC424J600.c: 530: enc424j600_writeSPI(&opcode);
 24115  0052A2  0E6D               	movlw	low enc424j600_readControlRegisterUnbanked@opcode
 24116  0052A4  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 24117  0052A6  0E00               	movlw	high enc424j600_readControlRegisterUnbanked@opcode
 24118  0052A8  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 24119  0052AA  EC20  F026         	call	_enc424j600_writeSPI	;wreg free
 24120                           
 24121                           ;ENC424J600.c: 531: enc424j600_writeSPI(&addr);
 24122  0052AE  0E6C               	movlw	low enc424j600_readControlRegisterUnbanked@addr
 24123  0052B0  0100               	movlb	0	; () banked
 24124  0052B2  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 24125  0052B4  0E00               	movlw	high enc424j600_readControlRegisterUnbanked@addr
 24126  0052B6  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 24127  0052B8  EC20  F026         	call	_enc424j600_writeSPI	;wreg free
 24128                           
 24129                           ;ENC424J600.c: 532: enc424j600_readSPI(data);
 24130  0052BC  C06A  F060         	movff	enc424j600_readControlRegisterUnbanked@data,enc424j600_readSPI@data
 24131  0052C0  C06B  F061         	movff	enc424j600_readControlRegisterUnbanked@data+1,enc424j600_readSPI@data+1
 24132  0052C4  ECB7  F025         	call	_enc424j600_readSPI	;wreg free
 24133                           
 24134                           ;ENC424J600.c: 533: PORTBbits.RB4=1;
 24135  0052C8  8881               	bsf	3969,4,c	;volatile
 24136  0052CA  0012               	return		;funcret
 24137  0052CC                     __end_of_enc424j600_readControlRegisterUnbanked:
 24138                           	opt stack 0
 24139                           tblptru	equ	0xFF8
 24140                           tblptrh	equ	0xFF7
 24141                           tblptrl	equ	0xFF6
 24142                           tablat	equ	0xFF5
 24143                           prodh	equ	0xFF4
 24144                           prodl	equ	0xFF3
 24145                           intcon	equ	0xFF2
 24146                           intcon3	equ	0xFF0
 24147                           indf0	equ	0xFEF
 24148                           postinc0	equ	0xFEE
 24149                           plusw0	equ	0xFEB
 24150                           fsr0h	equ	0xFEA
 24151                           fsr0l	equ	0xFE9
 24152                           wreg	equ	0xFE8
 24153                           indf1	equ	0xFE7
 24154                           postinc1	equ	0xFE6
 24155                           postdec1	equ	0xFE5
 24156                           plusw1	equ	0xFE3
 24157                           fsr1h	equ	0xFE2
 24158                           fsr1l	equ	0xFE1
 24159                           indf2	equ	0xFDF
 24160                           postinc2	equ	0xFDE
 24161                           postdec2	equ	0xFDD
 24162                           plusw2	equ	0xFDB
 24163                           fsr2h	equ	0xFDA
 24164                           fsr2l	equ	0xFD9
 24165                           status	equ	0xFD8
 24166                           
 24167 ;; *************** function _enc424j600_writeSPI *****************
 24168 ;; Defined at:
 24169 ;;		line 487 in file "src/enc424j600/ENC424J600.c"
 24170 ;; Parameters:    Size  Location     Type
 24171 ;;  data            2    0[BANK0 ] PTR unsigned char 
 24172 ;;		 -> enc424j600_clearInterruptFlag@temp(1), enc424j600_disable@temp(1), enc424j600_enable@temp(1), enc424j600_disable
      +AutoMACInsertion@temp(1), 
 24173 ;;		 -> enc424j600_enableAutoMACInsertion@temp(1), enc424j600_setRXTailPointer@highByte(1), enc424j600_setRXTailPointer@
      +lowByte(1), enc424j600_setRXBufferStartAddress@highByte(1), 
 24174 ;;		 -> enc424j600_setRXBufferStartAddress@lowByte(1), enc424j600_setERXDATAReadPointer@highByte(1), enc424j600_setERXDA
      +TAReadPointer@lowByte(1), enc424j600_setERXDATAReadPointer@opcode(1), 
 24175 ;;		 -> enc424j600_setGPDATAReadPointer@highByte(1), enc424j600_setGPDATAReadPointer@lowByte(1), enc424j600_setGPDATARea
      +dPointer@opcode(1), enc424j600_setGPDATAWritePointer@highByte(1), 
 24176 ;;		 -> enc424j600_setGPDATAWritePointer@lowByte(1), enc424j600_setGPDATAWritePointer@opcode(1), enc424j600_setTXStartAd
      +dress@highByte(1), enc424j600_setTXStartAddress@lowByte(1), 
 24177 ;;		 -> enc424j600_setTXLength@highByte(1), enc424j600_setTXLength@lowByte(1), enc424j600_readPHYRegister@temp(1), enc42
      +4j600_readPHYRegister@unusedBits(1), 
 24178 ;;		 -> enc424j600_readPHYRegister@PHYaddress(1), enc424j600_readControlRegisterUnbanked@addr(1), enc424j600_readControl
      +RegisterUnbanked@opcode(1), enc424j600_writeControlRegisterUnbanked@addr(1), 
 24179 ;;		 -> enc424j600_writeControlRegisterUnbanked@opcode(1), enc424j600_writeSingleByte@opcode(1), ethernetController_setL
      +EDConfig@data(1), ethernetController_streamFromRXBuffer@opcode(1), 
 24180 ;;		 -> ethernetController_updateNextPacketPointer@opcode(1), ethernetController_getRSV@opcode(1), ethernetController_ge
      +tEtherTypeField@opcode(1), ethernetController_getSourceMACAddress@opcode(1), 
 24181 ;;		 -> ethernetController_getDestinationMACAddress@opcode(1), ethernetController_writeEtherTypeFieldToBuffer@opcode(1),
      + ethernetController_writeEtherTypeFieldToBuffer@highByte(1), ethernetController_writeEtherTypeFieldToBuffer@lowByte(1), 
 24182 ;;		 -> ethernetController_writeDestinationMACAddress@opcode(1), ethernetController_writeDestinationMACAddress@data(6), 
      +ethernetController_streamToTransmitBuffer@data(1), ethernetController_streamToTransmitBuffer@opcode(1), 
 24183 ;;		 -> mac.address(6), ethernetController_setMacAddress@mac(6), ethernetController_softReset@dataToSend(2), 
 24184 ;; Auto vars:     Size  Location     Type
 24185 ;;  timeoutCount    4    6[BANK0 ] unsigned long 
 24186 ;; Return value:  Size  Location     Type
 24187 ;;                  1    wreg      void 
 24188 ;; Registers used:
 24189 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24190 ;; Tracked objects:
 24191 ;;		On entry : 0/0
 24192 ;;		On exit  : 0/0
 24193 ;;		Unchanged: 0/0
 24194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24195 ;;      Params:         0       2       0       0       0       0       0       0       0
 24196 ;;      Locals:         0       4       0       0       0       0       0       0       0
 24197 ;;      Temps:          0       4       0       0       0       0       0       0       0
 24198 ;;      Totals:         0      10       0       0       0       0       0       0       0
 24199 ;;Total ram usage:       10 bytes
 24200 ;; Hardware stack levels used:    1
 24201 ;; Hardware stack levels required when called:    5
 24202 ;; This function calls:
 24203 ;;		_enc424j600_initSPI
 24204 ;; This function is called by:
 24205 ;;		_ethernetController_streamToTransmitBuffer
 24206 ;;		_ethernetController_writeDestinationMACAddress
 24207 ;;		_ethernetController_writeEtherTypeFieldToBuffer
 24208 ;;		_ethernetController_getSourceMACAddress
 24209 ;;		_ethernetController_getEtherTypeField
 24210 ;;		_ethernetController_getRSV
 24211 ;;		_ethernetController_updateNextPacketPointer
 24212 ;;		_ethernetController_streamFromRXBuffer
 24213 ;;		_enc424j600_writeSingleByte
 24214 ;;		_enc424j600_writeControlRegisterUnbanked
 24215 ;;		_enc424j600_readControlRegisterUnbanked
 24216 ;;		_enc424j600_setGPDATAWritePointer
 24217 ;;		_enc424j600_setERXDATAReadPointer
 24218 ;;		_ethernetController_getDestinationMACAddress
 24219 ;;		_enc424j600_setGPDATAReadPointer
 24220 ;; This function uses a non-reentrant model
 24221 ;;
 24222                           
 24223                           	psect	text105
 24224  004C40                     __ptext105:
 24225                           	opt stack 0
 24226  004C40                     _enc424j600_writeSPI:
 24227                           	opt stack 22
 24228                           
 24229                           ;ENC424J600.c: 489: uint32_t timeoutCounter = 0;
 24230                           
 24231                           ;incstack = 0
 24232  004C40  0E00               	movlw	0
 24233  004C42  0100               	movlb	0	; () banked
 24234  004C44  6F66               	movwf	enc424j600_writeSPI@timeoutCounter& (0+255),b
 24235  004C46  0E00               	movlw	0
 24236  004C48  6F67               	movwf	(enc424j600_writeSPI@timeoutCounter+1)& (0+255),b
 24237  004C4A  0E00               	movlw	0
 24238  004C4C  6F68               	movwf	(enc424j600_writeSPI@timeoutCounter+2)& (0+255),b
 24239  004C4E  0E00               	movlw	0
 24240  004C50  6F69               	movwf	(enc424j600_writeSPI@timeoutCounter+3)& (0+255),b
 24241                           
 24242                           ; BSR set to: 0
 24243                           ;ENC424J600.c: 490: SSP1BUF = *data;
 24244  004C52  C060  FFD9         	movff	enc424j600_writeSPI@data,fsr2l
 24245  004C56  C061  FFDA         	movff	enc424j600_writeSPI@data+1,fsr2h
 24246  004C5A  50DF               	movf	indf2,w,c
 24247  004C5C  6EC9               	movwf	4041,c	;volatile
 24248  004C5E                     
 24249                           ; BSR set to: 0
 24250                           
 24251                           ; BSR set to: 0
 24252  004C5E  B0C7               	btfsc	4039,0,c	;volatile
 24253  004C60  D015               	goto	u8620
 24254                           
 24255                           ; BSR set to: 0
 24256  004C62  C066  F062         	movff	enc424j600_writeSPI@timeoutCounter,??_enc424j600_writeSPI
 24257  004C66  C067  F063         	movff	enc424j600_writeSPI@timeoutCounter+1,??_enc424j600_writeSPI+1
 24258  004C6A  C068  F064         	movff	enc424j600_writeSPI@timeoutCounter+2,??_enc424j600_writeSPI+2
 24259  004C6E  C069  F065         	movff	enc424j600_writeSPI@timeoutCounter+3,??_enc424j600_writeSPI+3
 24260  004C72  2B66               	incf	enc424j600_writeSPI@timeoutCounter& (0+255),f,b
 24261  004C74  0E00               	movlw	0
 24262  004C76  2367               	addwfc	(enc424j600_writeSPI@timeoutCounter+1)& (0+255),f,b
 24263  004C78  2368               	addwfc	(enc424j600_writeSPI@timeoutCounter+2)& (0+255),f,b
 24264  004C7A  2369               	addwfc	(enc424j600_writeSPI@timeoutCounter+3)& (0+255),f,b
 24265  004C7C  5165               	movf	(??_enc424j600_writeSPI+3)& (0+255),w,b
 24266  004C7E  1164               	iorwf	(??_enc424j600_writeSPI+2)& (0+255),w,b
 24267  004C80  E105               	bnz	l8209
 24268  004C82  2962               	incf	??_enc424j600_writeSPI& (0+255),w,b
 24269  004C84  0E0F               	movlw	15
 24270  004C86  5963               	subwfb	(??_enc424j600_writeSPI+1)& (0+255),w,b
 24271  004C88  A0D8               	btfss	status,0,c
 24272  004C8A  D7E9               	goto	l232
 24273  004C8C                     u8620:
 24274  004C8C                     l8209:
 24275                           
 24276                           ; BSR set to: 0
 24277                           ;ENC424J600.c: 492: if (timeoutCounter >= 0xfff) {
 24278  004C8C  5169               	movf	(enc424j600_writeSPI@timeoutCounter+3)& (0+255),w,b
 24279  004C8E  1168               	iorwf	(enc424j600_writeSPI@timeoutCounter+2)& (0+255),w,b
 24280  004C90  E105               	bnz	u8630
 24281  004C92  2966               	incf	enc424j600_writeSPI@timeoutCounter& (0+255),w,b
 24282  004C94  0E0F               	movlw	15
 24283  004C96  5967               	subwfb	(enc424j600_writeSPI@timeoutCounter+1)& (0+255),w,b
 24284  004C98  A0D8               	btfss	status,0,c
 24285  004C9A  0012               	return	
 24286  004C9C                     u8630:
 24287                           
 24288                           ; BSR set to: 0
 24289                           ;ENC424J600.c: 493: PORTBbits.RB4=1;
 24290  004C9C  8881               	bsf	3969,4,c	;volatile
 24291                           
 24292                           ; BSR set to: 0
 24293                           ;ENC424J600.c: 494: enc424j600_initSPI();
 24294  004C9E  EC00  F02B         	call	_enc424j600_initSPI	;wreg free
 24295                           
 24296                           ;ENC424J600.c: 495: return;
 24297  004CA2  0012               	return	
 24298  004CA4                     __end_of_enc424j600_writeSPI:
 24299                           	opt stack 0
 24300                           tblptru	equ	0xFF8
 24301                           tblptrh	equ	0xFF7
 24302                           tblptrl	equ	0xFF6
 24303                           tablat	equ	0xFF5
 24304                           prodh	equ	0xFF4
 24305                           prodl	equ	0xFF3
 24306                           intcon	equ	0xFF2
 24307                           intcon3	equ	0xFF0
 24308                           indf0	equ	0xFEF
 24309                           postinc0	equ	0xFEE
 24310                           plusw0	equ	0xFEB
 24311                           fsr0h	equ	0xFEA
 24312                           fsr0l	equ	0xFE9
 24313                           wreg	equ	0xFE8
 24314                           indf1	equ	0xFE7
 24315                           postinc1	equ	0xFE6
 24316                           postdec1	equ	0xFE5
 24317                           plusw1	equ	0xFE3
 24318                           fsr1h	equ	0xFE2
 24319                           fsr1l	equ	0xFE1
 24320                           indf2	equ	0xFDF
 24321                           postinc2	equ	0xFDE
 24322                           postdec2	equ	0xFDD
 24323                           plusw2	equ	0xFDB
 24324                           fsr2h	equ	0xFDA
 24325                           fsr2l	equ	0xFD9
 24326                           status	equ	0xFD8
 24327                           
 24328 ;; *************** function _enc424j600_readSPI *****************
 24329 ;; Defined at:
 24330 ;;		line 499 in file "src/enc424j600/ENC424J600.c"
 24331 ;; Parameters:    Size  Location     Type
 24332 ;;  data            2    0[BANK0 ] PTR unsigned char 
 24333 ;;		 -> enc424j600_clearInterruptFlag@temp(1), enc424j600_getInterruptFlags@high(1), enc424j600_getInterruptFlags@low(1)
      +, enc424j600_disable@temp(1), 
 24334 ;;		 -> enc424j600_enable@temp(1), enc424j600_disableAutoMACInsertion@temp(1), enc424j600_enableAutoMACInsertion@temp(1)
      +, enc424j600_getPacketCount@lowByte(1), 
 24335 ;;		 -> enc424j600_readPHYRegister@highByte(1), enc424j600_readPHYRegister@lowByte(1), enc424j600_readPHYRegister@temp(1
      +), ethernetController_setLEDConfig@data(1), 
 24336 ;;		 -> ethernetController_updateLinkStatus@temp(1), ethernetController_streamFromRXBuffer@temp(1), ethernetController_u
      +pdateNextPacketPointer@newPointerH(1), ethernetController_updateNextPacketPointer@newPointerL(1), 
 24337 ;;		 -> ethernetController_getRSV@temp(6), ethernetController_getEtherTypeField@lowByte(1), ethernetController_getEtherT
      +ypeField@highByte(1), ethernetController_getSourceMACAddress@temp(1), 
 24338 ;;		 -> ethernetController_getDestinationMACAddress@temp(1), mac.address(6), ethernetController_getMacAddress@mac(6), et
      +hernetController_getSiliconRevision@data(1), 
 24339 ;;		 -> ethernetController_checkDeviceId@data(1), ethernetController_softReset@receivedData(2), 
 24340 ;; Auto vars:     Size  Location     Type
 24341 ;;  timeoutCount    4    6[BANK0 ] unsigned long 
 24342 ;; Return value:  Size  Location     Type
 24343 ;;                  1    wreg      void 
 24344 ;; Registers used:
 24345 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24346 ;; Tracked objects:
 24347 ;;		On entry : 0/0
 24348 ;;		On exit  : 0/0
 24349 ;;		Unchanged: 0/0
 24350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24351 ;;      Params:         0       2       0       0       0       0       0       0       0
 24352 ;;      Locals:         0       4       0       0       0       0       0       0       0
 24353 ;;      Temps:          0       4       0       0       0       0       0       0       0
 24354 ;;      Totals:         0      10       0       0       0       0       0       0       0
 24355 ;;Total ram usage:       10 bytes
 24356 ;; Hardware stack levels used:    1
 24357 ;; Hardware stack levels required when called:    5
 24358 ;; This function calls:
 24359 ;;		_enc424j600_initSPI
 24360 ;; This function is called by:
 24361 ;;		_ethernetController_getSourceMACAddress
 24362 ;;		_ethernetController_getEtherTypeField
 24363 ;;		_ethernetController_getRSV
 24364 ;;		_ethernetController_updateNextPacketPointer
 24365 ;;		_ethernetController_streamFromRXBuffer
 24366 ;;		_enc424j600_readControlRegisterUnbanked
 24367 ;;		_ethernetController_getDestinationMACAddress
 24368 ;; This function uses a non-reentrant model
 24369 ;;
 24370                           
 24371                           	psect	text106
 24372  004B6E                     __ptext106:
 24373                           	opt stack 0
 24374  004B6E                     _enc424j600_readSPI:
 24375                           	opt stack 21
 24376                           
 24377                           ;ENC424J600.c: 501: uint32_t timeoutCounter = 0;
 24378                           
 24379                           ;incstack = 0
 24380  004B6E  0E00               	movlw	0
 24381  004B70  0100               	movlb	0	; () banked
 24382  004B72  6F66               	movwf	enc424j600_readSPI@timeoutCounter& (0+255),b
 24383  004B74  0E00               	movlw	0
 24384  004B76  6F67               	movwf	(enc424j600_readSPI@timeoutCounter+1)& (0+255),b
 24385  004B78  0E00               	movlw	0
 24386  004B7A  6F68               	movwf	(enc424j600_readSPI@timeoutCounter+2)& (0+255),b
 24387  004B7C  0E00               	movlw	0
 24388  004B7E  6F69               	movwf	(enc424j600_readSPI@timeoutCounter+3)& (0+255),b
 24389                           
 24390                           ;ENC424J600.c: 502: SSP1BUF = 0x00;
 24391  004B80  0E00               	movlw	0
 24392  004B82  6EC9               	movwf	4041,c	;volatile
 24393  004B84                     
 24394                           ; BSR set to: 0
 24395                           
 24396                           ; BSR set to: 0
 24397  004B84  B0C7               	btfsc	4039,0,c	;volatile
 24398  004B86  D015               	goto	u9070
 24399                           
 24400                           ; BSR set to: 0
 24401  004B88  C066  F062         	movff	enc424j600_readSPI@timeoutCounter,??_enc424j600_readSPI
 24402  004B8C  C067  F063         	movff	enc424j600_readSPI@timeoutCounter+1,??_enc424j600_readSPI+1
 24403  004B90  C068  F064         	movff	enc424j600_readSPI@timeoutCounter+2,??_enc424j600_readSPI+2
 24404  004B94  C069  F065         	movff	enc424j600_readSPI@timeoutCounter+3,??_enc424j600_readSPI+3
 24405  004B98  2B66               	incf	enc424j600_readSPI@timeoutCounter& (0+255),f,b
 24406  004B9A  0E00               	movlw	0
 24407  004B9C  2367               	addwfc	(enc424j600_readSPI@timeoutCounter+1)& (0+255),f,b
 24408  004B9E  2368               	addwfc	(enc424j600_readSPI@timeoutCounter+2)& (0+255),f,b
 24409  004BA0  2369               	addwfc	(enc424j600_readSPI@timeoutCounter+3)& (0+255),f,b
 24410  004BA2  5165               	movf	(??_enc424j600_readSPI+3)& (0+255),w,b
 24411  004BA4  1164               	iorwf	(??_enc424j600_readSPI+2)& (0+255),w,b
 24412  004BA6  E105               	bnz	l8495
 24413  004BA8  2962               	incf	??_enc424j600_readSPI& (0+255),w,b
 24414  004BAA  0E0F               	movlw	15
 24415  004BAC  5963               	subwfb	(??_enc424j600_readSPI+1)& (0+255),w,b
 24416  004BAE  A0D8               	btfss	status,0,c
 24417  004BB0  D7E9               	goto	l241
 24418  004BB2                     u9070:
 24419  004BB2                     l8495:
 24420                           
 24421                           ; BSR set to: 0
 24422                           ;ENC424J600.c: 504: if (timeoutCounter >= 0xfff) {
 24423  004BB2  5169               	movf	(enc424j600_readSPI@timeoutCounter+3)& (0+255),w,b
 24424  004BB4  1168               	iorwf	(enc424j600_readSPI@timeoutCounter+2)& (0+255),w,b
 24425  004BB6  E105               	bnz	u9080
 24426  004BB8  2966               	incf	enc424j600_readSPI@timeoutCounter& (0+255),w,b
 24427  004BBA  0E0F               	movlw	15
 24428  004BBC  5967               	subwfb	(enc424j600_readSPI@timeoutCounter+1)& (0+255),w,b
 24429  004BBE  A0D8               	btfss	status,0,c
 24430  004BC0  D004               	goto	l245
 24431  004BC2                     u9080:
 24432                           
 24433                           ; BSR set to: 0
 24434                           ;ENC424J600.c: 505: PORTBbits.RB4=1;
 24435  004BC2  8881               	bsf	3969,4,c	;volatile
 24436                           
 24437                           ; BSR set to: 0
 24438                           ;ENC424J600.c: 506: enc424j600_initSPI();
 24439  004BC4  EC00  F02B         	call	_enc424j600_initSPI	;wreg free
 24440                           
 24441                           ;ENC424J600.c: 507: return;
 24442  004BC8  0012               	return	
 24443  004BCA                     l245:
 24444                           
 24445                           ;ENC424J600.c: 508: }
 24446                           ;ENC424J600.c: 509: *data = SSP1BUF;
 24447  004BCA  C060  FFD9         	movff	enc424j600_readSPI@data,fsr2l
 24448  004BCE  C061  FFDA         	movff	enc424j600_readSPI@data+1,fsr2h
 24449  004BD2  CFC9 FFDF          	movff	4041,indf2	;volatile
 24450  004BD6  0012               	return		;funcret
 24451  004BD8                     __end_of_enc424j600_readSPI:
 24452                           	opt stack 0
 24453                           tblptru	equ	0xFF8
 24454                           tblptrh	equ	0xFF7
 24455                           tblptrl	equ	0xFF6
 24456                           tablat	equ	0xFF5
 24457                           prodh	equ	0xFF4
 24458                           prodl	equ	0xFF3
 24459                           intcon	equ	0xFF2
 24460                           intcon3	equ	0xFF0
 24461                           indf0	equ	0xFEF
 24462                           postinc0	equ	0xFEE
 24463                           plusw0	equ	0xFEB
 24464                           fsr0h	equ	0xFEA
 24465                           fsr0l	equ	0xFE9
 24466                           wreg	equ	0xFE8
 24467                           indf1	equ	0xFE7
 24468                           postinc1	equ	0xFE6
 24469                           postdec1	equ	0xFE5
 24470                           plusw1	equ	0xFE3
 24471                           fsr1h	equ	0xFE2
 24472                           fsr1l	equ	0xFE1
 24473                           indf2	equ	0xFDF
 24474                           postinc2	equ	0xFDE
 24475                           postdec2	equ	0xFDD
 24476                           plusw2	equ	0xFDB
 24477                           fsr2h	equ	0xFDA
 24478                           fsr2l	equ	0xFD9
 24479                           status	equ	0xFD8
 24480                           
 24481 ;; *************** function _enc424j600_initSPI *****************
 24482 ;; Defined at:
 24483 ;;		line 469 in file "src/enc424j600/ENC424J600.c"
 24484 ;; Parameters:    Size  Location     Type
 24485 ;;		None
 24486 ;; Auto vars:     Size  Location     Type
 24487 ;;		None
 24488 ;; Return value:  Size  Location     Type
 24489 ;;                  1    wreg      void 
 24490 ;; Registers used:
 24491 ;;		None
 24492 ;; Tracked objects:
 24493 ;;		On entry : 0/0
 24494 ;;		On exit  : 0/0
 24495 ;;		Unchanged: 0/0
 24496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24497 ;;      Params:         0       0       0       0       0       0       0       0       0
 24498 ;;      Locals:         0       0       0       0       0       0       0       0       0
 24499 ;;      Temps:          0       0       0       0       0       0       0       0       0
 24500 ;;      Totals:         0       0       0       0       0       0       0       0       0
 24501 ;;Total ram usage:        0 bytes
 24502 ;; Hardware stack levels used:    1
 24503 ;; Hardware stack levels required when called:    4
 24504 ;; This function calls:
 24505 ;;		Nothing
 24506 ;; This function is called by:
 24507 ;;		_ethernetController_init
 24508 ;;		_enc424j600_writeSPI
 24509 ;;		_enc424j600_readSPI
 24510 ;; This function uses a non-reentrant model
 24511 ;;
 24512                           
 24513                           	psect	text107
 24514  005600                     __ptext107:
 24515                           	opt stack 0
 24516  005600                     _enc424j600_initSPI:
 24517                           	opt stack 22
 24518                           
 24519                           ;ENC424J600.c: 470: SSP1CON1bits.SSPEN = 0;
 24520                           
 24521                           ;incstack = 0
 24522  005600  9AC6               	bcf	4038,5,c	;volatile
 24523                           
 24524                           ;ENC424J600.c: 471: SSP1STATbits.CKE = 1;
 24525  005602  8CC7               	bsf	4039,6,c	;volatile
 24526                           
 24527                           ;ENC424J600.c: 473: TRISBbits.TRISB0 = 1;
 24528  005604  8093               	bsf	3987,0,c	;volatile
 24529                           
 24530                           ;ENC424J600.c: 474: ANSELBbits.ANSB0 = 0;
 24531  005606  010F               	movlb	15	; () banked
 24532  005608  915C               	bcf	92,0,b	;volatile
 24533                           
 24534                           ;ENC424J600.c: 475: TRISBbits.TRISB1 = 0;
 24535  00560A  9293               	bcf	3987,1,c	;volatile
 24536                           
 24537                           ;ENC424J600.c: 476: ANSELBbits.ANSB1 = 0;
 24538  00560C  935C               	bcf	92,1,b	;volatile
 24539                           
 24540                           ;ENC424J600.c: 477: TRISBbits.TRISB3 = 0;
 24541  00560E  9693               	bcf	3987,3,c	;volatile
 24542                           
 24543                           ;ENC424J600.c: 478: ANSELBbits.ANSB3 = 0;
 24544  005610  975C               	bcf	92,3,b	;volatile
 24545                           
 24546                           ;ENC424J600.c: 479: TRISBbits.TRISB4 = 0;
 24547  005612  9893               	bcf	3987,4,c	;volatile
 24548                           
 24549                           ;ENC424J600.c: 480: ANSELBbits.ANSB4 = 0;
 24550  005614  995C               	bcf	92,4,b	;volatile
 24551                           
 24552                           ;ENC424J600.c: 481: PORTBbits.RB4=1;
 24553  005616  8881               	bsf	3969,4,c	;volatile
 24554                           
 24555                           ;ENC424J600.c: 482: SSP1CON1bits.SSPEN = 1;
 24556  005618  8AC6               	bsf	4038,5,c	;volatile
 24557                           
 24558                           ; BSR set to: 15
 24559  00561A  0012               	return		;funcret
 24560  00561C                     __end_of_enc424j600_initSPI:
 24561                           	opt stack 0
 24562                           tblptru	equ	0xFF8
 24563                           tblptrh	equ	0xFF7
 24564                           tblptrl	equ	0xFF6
 24565                           tablat	equ	0xFF5
 24566                           prodh	equ	0xFF4
 24567                           prodl	equ	0xFF3
 24568                           intcon	equ	0xFF2
 24569                           intcon3	equ	0xFF0
 24570                           indf0	equ	0xFEF
 24571                           postinc0	equ	0xFEE
 24572                           plusw0	equ	0xFEB
 24573                           fsr0h	equ	0xFEA
 24574                           fsr0l	equ	0xFE9
 24575                           wreg	equ	0xFE8
 24576                           indf1	equ	0xFE7
 24577                           postinc1	equ	0xFE6
 24578                           postdec1	equ	0xFE5
 24579                           plusw1	equ	0xFE3
 24580                           fsr1h	equ	0xFE2
 24581                           fsr1l	equ	0xFE1
 24582                           indf2	equ	0xFDF
 24583                           postinc2	equ	0xFDE
 24584                           postdec2	equ	0xFDD
 24585                           plusw2	equ	0xFDB
 24586                           fsr2h	equ	0xFDA
 24587                           fsr2l	equ	0xFD9
 24588                           status	equ	0xFD8
 24589                           
 24590 ;; *************** function _ethernetController_getDeviceName *****************
 24591 ;; Defined at:
 24592 ;;		line 145 in file "src/enc424j600/ENC424J600.c"
 24593 ;; Parameters:    Size  Location     Type
 24594 ;;		None
 24595 ;; Auto vars:     Size  Location     Type
 24596 ;;  string         11    2[BANK0 ] const unsigned char [11]
 24597 ;; Return value:  Size  Location     Type
 24598 ;;                  2    0[BANK0 ] PTR unsigned char 
 24599 ;; Registers used:
 24600 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 24601 ;; Tracked objects:
 24602 ;;		On entry : 0/0
 24603 ;;		On exit  : 0/0
 24604 ;;		Unchanged: 0/0
 24605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24606 ;;      Params:         0       2       0       0       0       0       0       0       0
 24607 ;;      Locals:         0      11       0       0       0       0       0       0       0
 24608 ;;      Temps:          0       0       0       0       0       0       0       0       0
 24609 ;;      Totals:         0      13       0       0       0       0       0       0       0
 24610 ;;Total ram usage:       13 bytes
 24611 ;; Hardware stack levels used:    1
 24612 ;; Hardware stack levels required when called:    4
 24613 ;; This function calls:
 24614 ;;		Nothing
 24615 ;; This function is called by:
 24616 ;;		_main
 24617 ;; This function uses a non-reentrant model
 24618 ;;
 24619                           
 24620                           	psect	text108
 24621  005598                     __ptext108:
 24622                           	opt stack 0
 24623  005598                     _ethernetController_getDeviceName:
 24624                           	opt stack 26
 24625                           
 24626                           ;ENC424J600.c: 146: const char string [] = "ENC424J600";
 24627                           
 24628                           ; BSR set to: 15
 24629                           ;incstack = 0
 24630  005598  0E0B               	movlw	low ethernetController_getDeviceName@F5999
 24631  00559A  6EF6               	movwf	tblptrl,c
 24632  00559C                     	if	1	;There is more than 1 active tblptr byte
 24633  00559C  0E7A               	movlw	high ethernetController_getDeviceName@F5999
 24634  00559E  6EF7               	movwf	tblptrh,c
 24635  0055A0                     	endif
 24636  0055A0                     	if	0	;There are less than 3 active tblptr bytes
 24637  0055A0                     	endif
 24638  0055A0  EE20  F062         	lfsr	2,ethernetController_getDeviceName@string
 24639  0055A4  0E0A               	movlw	10
 24640  0055A6                     u12240:
 24641  0055A6  0009               	tblrd		*+
 24642  0055A8  CFF5 FFDE          	movff	tablat,postinc2
 24643  0055AC  06E8               	decf	wreg,f,c
 24644  0055AE  E2FB               	bc	u12240
 24645                           
 24646                           ;ENC424J600.c: 147: return (char*) string;
 24647  0055B0  0E62               	movlw	low ethernetController_getDeviceName@string
 24648  0055B2  0100               	movlb	0	; () banked
 24649  0055B4  6F60               	movwf	?_ethernetController_getDeviceName& (0+255),b
 24650  0055B6  0E00               	movlw	high ethernetController_getDeviceName@string
 24651  0055B8  6F61               	movwf	(?_ethernetController_getDeviceName+1)& (0+255),b
 24652  0055BA  0012               	return	
 24653  0055BC                     __end_of_ethernetController_getDeviceName:
 24654                           	opt stack 0
 24655                           tblptru	equ	0xFF8
 24656                           tblptrh	equ	0xFF7
 24657                           tblptrl	equ	0xFF6
 24658                           tablat	equ	0xFF5
 24659                           prodh	equ	0xFF4
 24660                           prodl	equ	0xFF3
 24661                           intcon	equ	0xFF2
 24662                           intcon3	equ	0xFF0
 24663                           indf0	equ	0xFEF
 24664                           postinc0	equ	0xFEE
 24665                           plusw0	equ	0xFEB
 24666                           fsr0h	equ	0xFEA
 24667                           fsr0l	equ	0xFE9
 24668                           wreg	equ	0xFE8
 24669                           indf1	equ	0xFE7
 24670                           postinc1	equ	0xFE6
 24671                           postdec1	equ	0xFE5
 24672                           plusw1	equ	0xFE3
 24673                           fsr1h	equ	0xFE2
 24674                           fsr1l	equ	0xFE1
 24675                           indf2	equ	0xFDF
 24676                           postinc2	equ	0xFDE
 24677                           postdec2	equ	0xFDD
 24678                           plusw2	equ	0xFDB
 24679                           fsr2h	equ	0xFDA
 24680                           fsr2l	equ	0xFD9
 24681                           status	equ	0xFD8
 24682                           
 24683 ;; *************** function _UARTInit *****************
 24684 ;; Defined at:
 24685 ;;		line 26 in file "src/system/uart.c"
 24686 ;; Parameters:    Size  Location     Type
 24687 ;;		None
 24688 ;; Auto vars:     Size  Location     Type
 24689 ;;		None
 24690 ;; Return value:  Size  Location     Type
 24691 ;;                  1    wreg      void 
 24692 ;; Registers used:
 24693 ;;		wreg, status,2
 24694 ;; Tracked objects:
 24695 ;;		On entry : 0/0
 24696 ;;		On exit  : 0/0
 24697 ;;		Unchanged: 0/0
 24698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24699 ;;      Params:         0       0       0       0       0       0       0       0       0
 24700 ;;      Locals:         0       0       0       0       0       0       0       0       0
 24701 ;;      Temps:          0       0       0       0       0       0       0       0       0
 24702 ;;      Totals:         0       0       0       0       0       0       0       0       0
 24703 ;;Total ram usage:        0 bytes
 24704 ;; Hardware stack levels used:    1
 24705 ;; Hardware stack levels required when called:    4
 24706 ;; This function calls:
 24707 ;;		Nothing
 24708 ;; This function is called by:
 24709 ;;		_main
 24710 ;; This function uses a non-reentrant model
 24711 ;;
 24712                           
 24713                           	psect	text109
 24714  0056D8                     __ptext109:
 24715                           	opt stack 0
 24716  0056D8                     _UARTInit:
 24717                           	opt stack 26
 24718                           
 24719                           ;uart.c: 27: TXSTA1bits.TXEN = 1;
 24720                           
 24721                           ; BSR set to: 0
 24722                           ;incstack = 0
 24723  0056D8  8AAC               	bsf	4012,5,c	;volatile
 24724                           
 24725                           ;uart.c: 28: TXSTA1bits.SYNC = 0;
 24726  0056DA  98AC               	bcf	4012,4,c	;volatile
 24727                           
 24728                           ;uart.c: 29: RCSTA1bits.SPEN = 1;
 24729  0056DC  8EAB               	bsf	4011,7,c	;volatile
 24730                           
 24731                           ;uart.c: 30: TXSTA1bits.TX9 = 1;
 24732  0056DE  8CAC               	bsf	4012,6,c	;volatile
 24733                           
 24734                           ;uart.c: 31: TXSTA1bits.TX9D = 1;
 24735  0056E0  80AC               	bsf	4012,0,c	;volatile
 24736                           
 24737                           ;uart.c: 32: SPBRG = 3;
 24738  0056E2  0E03               	movlw	3
 24739  0056E4  6EAF               	movwf	4015,c	;volatile
 24740  0056E6  0012               	return		;funcret
 24741  0056E8                     __end_of_UARTInit:
 24742                           	opt stack 0
 24743                           tblptru	equ	0xFF8
 24744                           tblptrh	equ	0xFF7
 24745                           tblptrl	equ	0xFF6
 24746                           tablat	equ	0xFF5
 24747                           prodh	equ	0xFF4
 24748                           prodl	equ	0xFF3
 24749                           intcon	equ	0xFF2
 24750                           intcon3	equ	0xFF0
 24751                           indf0	equ	0xFEF
 24752                           postinc0	equ	0xFEE
 24753                           plusw0	equ	0xFEB
 24754                           fsr0h	equ	0xFEA
 24755                           fsr0l	equ	0xFE9
 24756                           wreg	equ	0xFE8
 24757                           indf1	equ	0xFE7
 24758                           postinc1	equ	0xFE6
 24759                           postdec1	equ	0xFE5
 24760                           plusw1	equ	0xFE3
 24761                           fsr1h	equ	0xFE2
 24762                           fsr1l	equ	0xFE1
 24763                           indf2	equ	0xFDF
 24764                           postinc2	equ	0xFDE
 24765                           postdec2	equ	0xFDD
 24766                           plusw2	equ	0xFDB
 24767                           fsr2h	equ	0xFDA
 24768                           fsr2l	equ	0xFD9
 24769                           status	equ	0xFD8
 24770                           
 24771 ;; *************** function _ISR *****************
 24772 ;; Defined at:
 24773 ;;		line 268 in file "src/system/main.c"
 24774 ;; Parameters:    Size  Location     Type
 24775 ;;		None
 24776 ;; Auto vars:     Size  Location     Type
 24777 ;;		None
 24778 ;; Return value:  Size  Location     Type
 24779 ;;                  1    wreg      void 
 24780 ;; Registers used:
 24781 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 24782 ;; Tracked objects:
 24783 ;;		On entry : 0/0
 24784 ;;		On exit  : 0/0
 24785 ;;		Unchanged: 0/0
 24786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24787 ;;      Params:         0       0       0       0       0       0       0       0       0
 24788 ;;      Locals:         0       0       0       0       0       0       0       0       0
 24789 ;;      Temps:         19       0       0       0       0       0       0       0       0
 24790 ;;      Totals:        19       0       0       0       0       0       0       0       0
 24791 ;;Total ram usage:       19 bytes
 24792 ;; Hardware stack levels used:    1
 24793 ;; Hardware stack levels required when called:    3
 24794 ;; This function calls:
 24795 ;;		_buttonHandler
 24796 ;;		_sevenSegmentUpdate
 24797 ;;		_updateTime
 24798 ;; This function is called by:
 24799 ;;		Interrupt level 2
 24800 ;; This function uses a non-reentrant model
 24801 ;;
 24802                           
 24803                           	psect	intcode
 24804  000008                     __pintcode:
 24805                           	opt stack 0
 24806  000008                     _ISR:
 24807                           	opt stack 17
 24808                           
 24809                           ;incstack = 0
 24810  000008  824F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 24811  00000A  CFFA F017          	movff	pclath,??_ISR+1
 24812  00000E  CFFB F018          	movff	pclatu,??_ISR+2
 24813  000012  CFE9 F019          	movff	fsr0l,??_ISR+3
 24814  000016  CFEA F01A          	movff	fsr0h,??_ISR+4
 24815  00001A  CFE1 F01B          	movff	fsr1l,??_ISR+5
 24816  00001E  CFE2 F01C          	movff	fsr1h,??_ISR+6
 24817  000022  CFD9 F01D          	movff	fsr2l,??_ISR+7
 24818  000026  CFDA F01E          	movff	fsr2h,??_ISR+8
 24819  00002A  CFF3 F01F          	movff	prodl,??_ISR+9
 24820  00002E  CFF4 F020          	movff	prodh,??_ISR+10
 24821  000032  CFF6 F021          	movff	tblptrl,??_ISR+11
 24822  000036  CFF7 F022          	movff	tblptrh,??_ISR+12
 24823  00003A  CFF8 F023          	movff	tblptru,??_ISR+13
 24824  00003E  CFF5 F024          	movff	tablat,??_ISR+14
 24825  000042  C04F  F025         	movff	btemp,??_ISR+15
 24826  000046  C050  F026         	movff	btemp+1,??_ISR+16
 24827  00004A  C051  F027         	movff	btemp+2,??_ISR+17
 24828  00004E  C052  F028         	movff	btemp+3,??_ISR+18
 24829                           
 24830                           ;main.c: 270: if (PIR1bits.CCP1IF) {
 24831  000052  A49E               	btfss	3998,2,c	;volatile
 24832  000054  D012               	goto	i2l719
 24833                           
 24834                           ;main.c: 271: PIR1bits.CCP1IF = 0;
 24835  000056  949E               	bcf	3998,2,c	;volatile
 24836                           
 24837                           ;main.c: 272: PORTBbits.RB6 = ~PORTBbits.RB6;
 24838  000058  AC81               	btfss	3969,6,c	;volatile
 24839  00005A  D002               	goto	i2u855_40
 24840  00005C  0E01               	movlw	1
 24841  00005E  D001               	goto	i2u855_46
 24842  000060                     i2u855_40:
 24843  000060  0E00               	movlw	0
 24844  000062                     i2u855_46:
 24845  000062  0AFF               	xorlw	255
 24846  000064  6E16               	movwf	??_ISR& (0+255),c
 24847  000066  3A16               	swapf	??_ISR,f,c
 24848  000068  4616               	rlncf	??_ISR,f,c
 24849  00006A  4616               	rlncf	??_ISR,f,c
 24850  00006C  5081               	movf	3969,w,c	;volatile
 24851  00006E  1816               	xorwf	??_ISR,w,c
 24852  000070  0BBF               	andlw	-65
 24853  000072  1816               	xorwf	??_ISR,w,c
 24854  000074  6E81               	movwf	3969,c	;volatile
 24855                           
 24856                           ;main.c: 273: updateTime();
 24857  000076  EC89  F02B         	call	_updateTime	;wreg free
 24858  00007A                     i2l719:
 24859                           
 24860                           ;main.c: 274: }
 24861                           ;main.c: 276: if (INTCONbits.TMR0IF) {
 24862  00007A  A4F2               	btfss	intcon,2,c	;volatile
 24863  00007C  D00D               	goto	i2l720
 24864                           
 24865                           ;main.c: 277: INTCONbits.TMR0IF = 0;
 24866  00007E  94F2               	bcf	intcon,2,c	;volatile
 24867                           
 24868                           ;main.c: 278: sevenSegmentUpdate(numberToDisplay);
 24869  000080  C031  F00F         	movff	_numberToDisplay,sevenSegmentUpdate@numberToDisplay	;volatile
 24870  000084  C032  F010         	movff	_numberToDisplay+1,sevenSegmentUpdate@numberToDisplay+1	;volatile
 24871  000088  ECF7  F01F         	call	_sevenSegmentUpdate	;wreg free
 24872                           
 24873                           ;main.c: 279: buttonHandler(&buttonState);
 24874  00008C  0EF9               	movlw	low _buttonState
 24875  00008E  6E01               	movwf	buttonHandler@state,c
 24876  000090  0E01               	movlw	high _buttonState
 24877  000092  6E02               	movwf	buttonHandler@state+1,c
 24878  000094  EC08  F021         	call	_buttonHandler	;wreg free
 24879  000098                     i2l720:
 24880                           
 24881                           ;main.c: 282: }
 24882                           ;main.c: 284: if (INTCON3bits.INT2IF) {
 24883  000098  B2F0               	btfsc	intcon3,1,c	;volatile
 24884                           
 24885                           ;main.c: 285: INTCON3bits.INT2IF = 0;
 24886  00009A  92F0               	bcf	intcon3,1,c	;volatile
 24887                           
 24888                           ;main.c: 292: }
 24889                           ;main.c: 293: if (RCIF) {
 24890  00009C  C028  F052         	movff	??_ISR+18,btemp+3
 24891  0000A0  C027  F051         	movff	??_ISR+17,btemp+2
 24892  0000A4  C026  F050         	movff	??_ISR+16,btemp+1
 24893  0000A8  C025  F04F         	movff	??_ISR+15,btemp
 24894  0000AC  C024  FFF5         	movff	??_ISR+14,tablat
 24895  0000B0  C023  FFF8         	movff	??_ISR+13,tblptru
 24896  0000B4  C022  FFF7         	movff	??_ISR+12,tblptrh
 24897  0000B8  C021  FFF6         	movff	??_ISR+11,tblptrl
 24898  0000BC  C020  FFF4         	movff	??_ISR+10,prodh
 24899  0000C0  C01F  FFF3         	movff	??_ISR+9,prodl
 24900  0000C4  C01E  FFDA         	movff	??_ISR+8,fsr2h
 24901  0000C8  C01D  FFD9         	movff	??_ISR+7,fsr2l
 24902  0000CC  C01C  FFE2         	movff	??_ISR+6,fsr1h
 24903  0000D0  C01B  FFE1         	movff	??_ISR+5,fsr1l
 24904  0000D4  C01A  FFEA         	movff	??_ISR+4,fsr0h
 24905  0000D8  C019  FFE9         	movff	??_ISR+3,fsr0l
 24906  0000DC  C018  FFFB         	movff	??_ISR+2,pclatu
 24907  0000E0  C017  FFFA         	movff	??_ISR+1,pclath
 24908  0000E4  924F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 24909  0000E6  0011               	retfie		f
 24910  0000E8                     __end_of_ISR:
 24911                           	opt stack 0
 24912                           pclatu	equ	0xFFB
 24913                           pclath	equ	0xFFA
 24914                           tblptru	equ	0xFF8
 24915                           tblptrh	equ	0xFF7
 24916                           tblptrl	equ	0xFF6
 24917                           tablat	equ	0xFF5
 24918                           prodh	equ	0xFF4
 24919                           prodl	equ	0xFF3
 24920                           intcon	equ	0xFF2
 24921                           intcon3	equ	0xFF0
 24922                           indf0	equ	0xFEF
 24923                           postinc0	equ	0xFEE
 24924                           plusw0	equ	0xFEB
 24925                           fsr0h	equ	0xFEA
 24926                           fsr0l	equ	0xFE9
 24927                           wreg	equ	0xFE8
 24928                           indf1	equ	0xFE7
 24929                           postinc1	equ	0xFE6
 24930                           postdec1	equ	0xFE5
 24931                           plusw1	equ	0xFE3
 24932                           fsr1h	equ	0xFE2
 24933                           fsr1l	equ	0xFE1
 24934                           indf2	equ	0xFDF
 24935                           postinc2	equ	0xFDE
 24936                           postdec2	equ	0xFDD
 24937                           plusw2	equ	0xFDB
 24938                           fsr2h	equ	0xFDA
 24939                           fsr2l	equ	0xFD9
 24940                           status	equ	0xFD8
 24941                           
 24942 ;; *************** function _updateTime *****************
 24943 ;; Defined at:
 24944 ;;		line 30 in file "src/stack/time.c"
 24945 ;; Parameters:    Size  Location     Type
 24946 ;;		None
 24947 ;; Auto vars:     Size  Location     Type
 24948 ;;		None
 24949 ;; Return value:  Size  Location     Type
 24950 ;;                  1    wreg      void 
 24951 ;; Registers used:
 24952 ;;		wreg, status,2, status,0
 24953 ;; Tracked objects:
 24954 ;;		On entry : 0/0
 24955 ;;		On exit  : 0/0
 24956 ;;		Unchanged: 0/0
 24957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24958 ;;      Params:         0       0       0       0       0       0       0       0       0
 24959 ;;      Locals:         0       0       0       0       0       0       0       0       0
 24960 ;;      Temps:          0       0       0       0       0       0       0       0       0
 24961 ;;      Totals:         0       0       0       0       0       0       0       0       0
 24962 ;;Total ram usage:        0 bytes
 24963 ;; Hardware stack levels used:    1
 24964 ;; This function calls:
 24965 ;;		Nothing
 24966 ;; This function is called by:
 24967 ;;		_ISR
 24968 ;; This function uses a non-reentrant model
 24969 ;;
 24970                           
 24971                           	psect	text111
 24972  005712                     __ptext111:
 24973                           	opt stack 0
 24974  005712                     _updateTime:
 24975                           	opt stack 19
 24976                           
 24977                           ;time.c: 31: time++;
 24978                           
 24979                           ;incstack = 0
 24980  005712  0E01               	movlw	1
 24981  005714  2629               	addwf	_time,f,c	;volatile
 24982  005716  0E00               	movlw	0
 24983  005718  222A               	addwfc	_time+1,f,c	;volatile
 24984  00571A  222B               	addwfc	_time+2,f,c	;volatile
 24985  00571C  222C               	addwfc	_time+3,f,c	;volatile
 24986  00571E  0012               	return		;funcret
 24987  005720                     __end_of_updateTime:
 24988                           	opt stack 0
 24989                           pclatu	equ	0xFFB
 24990                           pclath	equ	0xFFA
 24991                           tblptru	equ	0xFF8
 24992                           tblptrh	equ	0xFF7
 24993                           tblptrl	equ	0xFF6
 24994                           tablat	equ	0xFF5
 24995                           prodh	equ	0xFF4
 24996                           prodl	equ	0xFF3
 24997                           intcon	equ	0xFF2
 24998                           intcon3	equ	0xFF0
 24999                           indf0	equ	0xFEF
 25000                           postinc0	equ	0xFEE
 25001                           plusw0	equ	0xFEB
 25002                           fsr0h	equ	0xFEA
 25003                           fsr0l	equ	0xFE9
 25004                           wreg	equ	0xFE8
 25005                           indf1	equ	0xFE7
 25006                           postinc1	equ	0xFE6
 25007                           postdec1	equ	0xFE5
 25008                           plusw1	equ	0xFE3
 25009                           fsr1h	equ	0xFE2
 25010                           fsr1l	equ	0xFE1
 25011                           indf2	equ	0xFDF
 25012                           postinc2	equ	0xFDE
 25013                           postdec2	equ	0xFDD
 25014                           plusw2	equ	0xFDB
 25015                           fsr2h	equ	0xFDA
 25016                           fsr2l	equ	0xFD9
 25017                           status	equ	0xFD8
 25018                           
 25019 ;; *************** function _sevenSegmentUpdate *****************
 25020 ;; Defined at:
 25021 ;;		line 41 in file "src/system/sevenseg.c"
 25022 ;; Parameters:    Size  Location     Type
 25023 ;;  numberToDisp    2   14[COMRAM] unsigned int 
 25024 ;; Auto vars:     Size  Location     Type
 25025 ;;  i               1   20[COMRAM] unsigned char 
 25026 ;; Return value:  Size  Location     Type
 25027 ;;                  1    wreg      void 
 25028 ;; Registers used:
 25029 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 25030 ;; Tracked objects:
 25031 ;;		On entry : 0/0
 25032 ;;		On exit  : 0/0
 25033 ;;		Unchanged: 0/0
 25034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 25035 ;;      Params:         2       0       0       0       0       0       0       0       0
 25036 ;;      Locals:         3       0       0       0       0       0       0       0       0
 25037 ;;      Temps:          2       0       0       0       0       0       0       0       0
 25038 ;;      Totals:         7       0       0       0       0       0       0       0       0
 25039 ;;Total ram usage:        7 bytes
 25040 ;; Hardware stack levels used:    1
 25041 ;; Hardware stack levels required when called:    2
 25042 ;; This function calls:
 25043 ;;		_parseNumber
 25044 ;; This function is called by:
 25045 ;;		_ISR
 25046 ;; This function uses a non-reentrant model
 25047 ;;
 25048                           
 25049                           	psect	text112
 25050  003FEE                     __ptext112:
 25051                           	opt stack 0
 25052  003FEE                     _sevenSegmentUpdate:
 25053                           	opt stack 17
 25054                           
 25055                           ;sevenseg.c: 43: uint8_t static digitPointer = 0;
 25056                           ;sevenseg.c: 44: uint8_t static digitsToDisplay[3] = {0, 0, 0};
 25057                           ;sevenseg.c: 45: PORTC &= ~(unsigned)(1 << digitPointer);
 25058                           
 25059                           ;incstack = 0
 25060  003FEE  C044  F011         	movff	sevenSegmentUpdate@digitPointer,??_sevenSegmentUpdate
 25061  003FF2  0E01               	movlw	1
 25062  003FF4  6E12               	movwf	(??_sevenSegmentUpdate+1)& (0+255),c
 25063  003FF6  2A11               	incf	??_sevenSegmentUpdate,f,c
 25064  003FF8  D002               	goto	i2u823_44
 25065  003FFA                     i2u823_45:
 25066  003FFA  90D8               	bcf	status,0,c
 25067  003FFC  3612               	rlcf	??_sevenSegmentUpdate+1,f,c
 25068  003FFE                     i2u823_44:
 25069  003FFE  2E11               	decfsz	??_sevenSegmentUpdate,f,c
 25070  004000  D7FC               	goto	i2u823_45
 25071  004002  5012               	movf	??_sevenSegmentUpdate+1,w,c
 25072  004004  0AFF               	xorlw	255
 25073  004006  1682               	andwf	3970,f,c	;volatile
 25074                           
 25075                           ;sevenseg.c: 46: PORTA = 0x00;
 25076  004008  0E00               	movlw	0
 25077  00400A  6E80               	movwf	3968,c	;volatile
 25078                           
 25079                           ;sevenseg.c: 47: digitPointer = (unsigned)((digitPointer >= 2) ? 0 : digitPointer + 1);
 25080  00400C  0E02               	movlw	2
 25081  00400E  6044               	cpfslt	sevenSegmentUpdate@digitPointer,c
 25082  004010  D007               	goto	i2l752
 25083  004012  0E01               	movlw	1
 25084  004014  2444               	addwf	sevenSegmentUpdate@digitPointer,w,c
 25085  004016  6E13               	movwf	_sevenSegmentUpdate$2495,c
 25086  004018  6A14               	clrf	_sevenSegmentUpdate$2495+1,c
 25087  00401A  0E00               	movlw	0
 25088  00401C  2214               	addwfc	_sevenSegmentUpdate$2495+1,f,c
 25089  00401E  D004               	goto	i2l754
 25090  004020                     i2l752:
 25091  004020  0E00               	movlw	0
 25092  004022  6E14               	movwf	_sevenSegmentUpdate$2495+1,c
 25093  004024  0E00               	movlw	0
 25094  004026  6E13               	movwf	_sevenSegmentUpdate$2495,c
 25095  004028                     i2l754:
 25096  004028  C013  F044         	movff	_sevenSegmentUpdate$2495,sevenSegmentUpdate@digitPointer
 25097                           
 25098                           ;sevenseg.c: 49: if (numberToDisplay > 999) {
 25099  00402C  0EE8               	movlw	232
 25100  00402E  5C0F               	subwf	sevenSegmentUpdate@numberToDisplay,w,c
 25101  004030  0E03               	movlw	3
 25102  004032  5810               	subwfb	sevenSegmentUpdate@numberToDisplay+1,w,c
 25103  004034  B0D8               	btfsc	status,0,c
 25104  004036  0012               	return	
 25105                           
 25106                           ;sevenseg.c: 51: }
 25107                           ;sevenseg.c: 52: for (uint8_t i = 0; i < 3; i++) {
 25108                           
 25109                           ;sevenseg.c: 50: return;
 25110  004038  0E00               	movlw	0
 25111  00403A  6E15               	movwf	sevenSegmentUpdate@i,c
 25112  00403C                     i2l7641:
 25113  00403C  0E02               	movlw	2
 25114  00403E  6415               	cpfsgt	sevenSegmentUpdate@i,c
 25115  004040  D001               	goto	i2l757
 25116  004042  D013               	goto	i2u827_40
 25117  004044                     i2l757:
 25118                           
 25119                           ;sevenseg.c: 53: digitsToDisplay[i] = parseNumber(numberToDisplay, i);
 25120  004044  5015               	movf	sevenSegmentUpdate@i,w,c
 25121  004046  0D01               	mullw	1
 25122  004048  0E39               	movlw	low sevenSegmentUpdate@digitsToDisplay
 25123  00404A  24F3               	addwf	prodl,w,c
 25124  00404C  6ED9               	movwf	fsr2l,c
 25125  00404E  0E00               	movlw	high sevenSegmentUpdate@digitsToDisplay
 25126  004050  20F4               	addwfc	prodh,w,c
 25127  004052  6EDA               	movwf	fsr2h,c
 25128  004054  C00F  F008         	movff	sevenSegmentUpdate@numberToDisplay,parseNumber@numberToDisplay
 25129  004058  C010  F009         	movff	sevenSegmentUpdate@numberToDisplay+1,parseNumber@numberToDisplay+1
 25130  00405C  C015  F00A         	movff	sevenSegmentUpdate@i,parseNumber@digit
 25131  004060  ECE1  F023         	call	_parseNumber	;wreg free
 25132  004064  6EDF               	movwf	indf2,c
 25133  004066  2A15               	incf	sevenSegmentUpdate@i,f,c
 25134  004068  D7E9               	goto	i2l7641
 25135  00406A                     i2u827_40:
 25136                           
 25137                           ;sevenseg.c: 54: }
 25138                           ;sevenseg.c: 55: PORTC |= (unsigned)(1 << digitPointer);
 25139  00406A  C044  F011         	movff	sevenSegmentUpdate@digitPointer,??_sevenSegmentUpdate
 25140  00406E  0E01               	movlw	1
 25141  004070  6E12               	movwf	(??_sevenSegmentUpdate+1)& (0+255),c
 25142  004072  2A11               	incf	??_sevenSegmentUpdate,f,c
 25143  004074  D002               	goto	i2u828_44
 25144  004076                     i2u828_45:
 25145  004076  90D8               	bcf	status,0,c
 25146  004078  3612               	rlcf	??_sevenSegmentUpdate+1,f,c
 25147  00407A                     i2u828_44:
 25148  00407A  2E11               	decfsz	??_sevenSegmentUpdate,f,c
 25149  00407C  D7FC               	goto	i2u828_45
 25150  00407E  5012               	movf	??_sevenSegmentUpdate+1,w,c
 25151  004080  1282               	iorwf	3970,f,c	;volatile
 25152                           
 25153                           ;sevenseg.c: 56: PORTA = (sevenSegCharacters[digitsToDisplay[digitPointer]]);
 25154  004082  5044               	movf	sevenSegmentUpdate@digitPointer,w,c
 25155  004084  0D01               	mullw	1
 25156  004086  0E39               	movlw	low sevenSegmentUpdate@digitsToDisplay
 25157  004088  24F3               	addwf	prodl,w,c
 25158  00408A  6ED9               	movwf	fsr2l,c
 25159  00408C  0E00               	movlw	high sevenSegmentUpdate@digitsToDisplay
 25160  00408E  20F4               	addwfc	prodh,w,c
 25161  004090  6EDA               	movwf	fsr2h,c
 25162  004092  50DF               	movf	indf2,w,c
 25163  004094  6E11               	movwf	??_sevenSegmentUpdate& (0+255),c
 25164  004096  5011               	movf	??_sevenSegmentUpdate,w,c
 25165  004098  0D01               	mullw	1
 25166  00409A  0EE4               	movlw	low _sevenSegCharacters
 25167  00409C  24F3               	addwf	prodl,w,c
 25168  00409E  6ED9               	movwf	fsr2l,c
 25169  0040A0  0E02               	movlw	high _sevenSegCharacters
 25170  0040A2  20F4               	addwfc	prodh,w,c
 25171  0040A4  6EDA               	movwf	fsr2h,c
 25172  0040A6  50DF               	movf	indf2,w,c
 25173  0040A8  6E80               	movwf	3968,c	;volatile
 25174  0040AA  0012               	return		;funcret
 25175  0040AC                     __end_of_sevenSegmentUpdate:
 25176                           	opt stack 0
 25177                           pclatu	equ	0xFFB
 25178                           pclath	equ	0xFFA
 25179                           tblptru	equ	0xFF8
 25180                           tblptrh	equ	0xFF7
 25181                           tblptrl	equ	0xFF6
 25182                           tablat	equ	0xFF5
 25183                           prodh	equ	0xFF4
 25184                           prodl	equ	0xFF3
 25185                           intcon	equ	0xFF2
 25186                           intcon3	equ	0xFF0
 25187                           indf0	equ	0xFEF
 25188                           postinc0	equ	0xFEE
 25189                           plusw0	equ	0xFEB
 25190                           fsr0h	equ	0xFEA
 25191                           fsr0l	equ	0xFE9
 25192                           wreg	equ	0xFE8
 25193                           indf1	equ	0xFE7
 25194                           postinc1	equ	0xFE6
 25195                           postdec1	equ	0xFE5
 25196                           plusw1	equ	0xFE3
 25197                           fsr1h	equ	0xFE2
 25198                           fsr1l	equ	0xFE1
 25199                           indf2	equ	0xFDF
 25200                           postinc2	equ	0xFDE
 25201                           postdec2	equ	0xFDD
 25202                           plusw2	equ	0xFDB
 25203                           fsr2h	equ	0xFDA
 25204                           fsr2l	equ	0xFD9
 25205                           status	equ	0xFD8
 25206                           
 25207 ;; *************** function _parseNumber *****************
 25208 ;; Defined at:
 25209 ;;		line 59 in file "src/system/sevenseg.c"
 25210 ;; Parameters:    Size  Location     Type
 25211 ;;  numberToDisp    2    7[COMRAM] unsigned int 
 25212 ;;  digit           1    9[COMRAM] unsigned char 
 25213 ;; Auto vars:     Size  Location     Type
 25214 ;;  hundreds        1   13[COMRAM] unsigned char 
 25215 ;;  tens            1   12[COMRAM] unsigned char 
 25216 ;;  ones            1   11[COMRAM] unsigned char 
 25217 ;; Return value:  Size  Location     Type
 25218 ;;                  1    wreg      unsigned char 
 25219 ;; Registers used:
 25220 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 25221 ;; Tracked objects:
 25222 ;;		On entry : 0/0
 25223 ;;		On exit  : 0/0
 25224 ;;		Unchanged: 0/0
 25225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 25226 ;;      Params:         3       0       0       0       0       0       0       0       0
 25227 ;;      Locals:         3       0       0       0       0       0       0       0       0
 25228 ;;      Temps:          1       0       0       0       0       0       0       0       0
 25229 ;;      Totals:         7       0       0       0       0       0       0       0       0
 25230 ;;Total ram usage:        7 bytes
 25231 ;; Hardware stack levels used:    1
 25232 ;; Hardware stack levels required when called:    1
 25233 ;; This function calls:
 25234 ;;		i2___lwdiv
 25235 ;; This function is called by:
 25236 ;;		_sevenSegmentUpdate
 25237 ;; This function uses a non-reentrant model
 25238 ;;
 25239                           
 25240                           	psect	text113
 25241  0047C2                     __ptext113:
 25242                           	opt stack 0
 25243  0047C2                     _parseNumber:
 25244                           	opt stack 17
 25245                           
 25246                           ;sevenseg.c: 61: uint8_t hundreds = numberToDisplay / 100u;
 25247                           
 25248                           ;incstack = 0
 25249  0047C2  C008  F001         	movff	parseNumber@numberToDisplay,i2___lwdiv@dividend
 25250  0047C6  C009  F002         	movff	parseNumber@numberToDisplay+1,i2___lwdiv@dividend+1
 25251  0047CA  0E00               	movlw	0
 25252  0047CC  6E04               	movwf	i2___lwdiv@divisor+1,c
 25253  0047CE  0E64               	movlw	100
 25254  0047D0  6E03               	movwf	i2___lwdiv@divisor,c
 25255  0047D2  EC57  F027         	call	i2___lwdiv	;wreg free
 25256  0047D6  5001               	movf	?i2___lwdiv,w,c
 25257  0047D8  6E0E               	movwf	parseNumber@hundreds,c
 25258                           
 25259                           ;sevenseg.c: 62: uint8_t tens = (numberToDisplay - hundreds * 100u) / 10u;
 25260  0047DA  500E               	movf	parseNumber@hundreds,w,c
 25261  0047DC  0D64               	mullw	100
 25262  0047DE  1EF3               	comf	prodl,f,c
 25263  0047E0  1EF4               	comf	prodh,f,c
 25264  0047E2  4AF3               	infsnz	prodl,f,c
 25265  0047E4  2AF4               	incf	prodh,f,c
 25266  0047E6  5008               	movf	parseNumber@numberToDisplay,w,c
 25267  0047E8  24F3               	addwf	prodl,w,c
 25268  0047EA  6E01               	movwf	i2___lwdiv@dividend,c
 25269  0047EC  5009               	movf	parseNumber@numberToDisplay+1,w,c
 25270  0047EE  20F4               	addwfc	prodh,w,c
 25271  0047F0  6E02               	movwf	i2___lwdiv@dividend+1,c
 25272  0047F2  0E00               	movlw	0
 25273  0047F4  6E04               	movwf	i2___lwdiv@divisor+1,c
 25274  0047F6  0E0A               	movlw	10
 25275  0047F8  6E03               	movwf	i2___lwdiv@divisor,c
 25276  0047FA  EC57  F027         	call	i2___lwdiv	;wreg free
 25277  0047FE  5001               	movf	?i2___lwdiv,w,c
 25278  004800  6E0D               	movwf	parseNumber@tens,c
 25279                           
 25280                           ;sevenseg.c: 63: uint8_t ones = (numberToDisplay - hundreds * 100u - tens * 10u);
 25281  004802  500D               	movf	parseNumber@tens,w,c
 25282  004804  0D0A               	mullw	10
 25283  004806  CFF3 F00B          	movff	prodl,??_parseNumber
 25284  00480A  500E               	movf	parseNumber@hundreds,w,c
 25285  00480C  0D64               	mullw	100
 25286  00480E  50F3               	movf	prodl,w,c
 25287  004810  240B               	addwf	??_parseNumber,w,c
 25288  004812  0800               	sublw	0
 25289  004814  2408               	addwf	parseNumber@numberToDisplay,w,c
 25290  004816  6E0C               	movwf	parseNumber@ones,c
 25291                           
 25292                           ;sevenseg.c: 64: switch (digit) {
 25293  004818  D008               	goto	i2l761
 25294  00481A                     
 25295                           ;sevenseg.c: 66: return ones;
 25296  00481A  500C               	movf	parseNumber@ones,w,c
 25297  00481C  0012               	return	
 25298  00481E                     
 25299                           ;sevenseg.c: 68: return tens;
 25300  00481E  500D               	movf	parseNumber@tens,w,c
 25301  004820  0012               	return	
 25302  004822                     
 25303                           ;sevenseg.c: 70: return hundreds;
 25304  004822  500E               	movf	parseNumber@hundreds,w,c
 25305  004824  0012               	return	
 25306  004826  0E00               	movlw	0
 25307                           
 25308                           ;sevenseg.c: 72: }
 25309  004828  0012               	return	
 25310  00482A                     i2l761:
 25311  00482A  500A               	movf	parseNumber@digit,w,c
 25312                           
 25313                           ; Switch size 1, requested type "space"
 25314                           ; Number of cases is 3, Range of values is 0 to 2
 25315                           ; switch strategies available:
 25316                           ; Name         Instructions Cycles
 25317                           ; simple_byte           10     6 (average)
 25318                           ;	Chosen strategy is simple_byte
 25319  00482C  0A00               	xorlw	0	; case 0
 25320  00482E  B4D8               	btfsc	status,2,c
 25321  004830  D7F8               	goto	i2l765
 25322  004832  0A01               	xorlw	1	; case 1
 25323  004834  B4D8               	btfsc	status,2,c
 25324  004836  D7F3               	goto	i2l764
 25325  004838  0A03               	xorlw	3	; case 2
 25326  00483A  B4D8               	btfsc	status,2,c
 25327  00483C  D7EE               	goto	i2l762
 25328  00483E  D7F3               	goto	i2l766
 25329  004840                     __end_of_parseNumber:
 25330                           	opt stack 0
 25331                           pclatu	equ	0xFFB
 25332                           pclath	equ	0xFFA
 25333                           tblptru	equ	0xFF8
 25334                           tblptrh	equ	0xFF7
 25335                           tblptrl	equ	0xFF6
 25336                           tablat	equ	0xFF5
 25337                           prodh	equ	0xFF4
 25338                           prodl	equ	0xFF3
 25339                           intcon	equ	0xFF2
 25340                           intcon3	equ	0xFF0
 25341                           indf0	equ	0xFEF
 25342                           postinc0	equ	0xFEE
 25343                           plusw0	equ	0xFEB
 25344                           fsr0h	equ	0xFEA
 25345                           fsr0l	equ	0xFE9
 25346                           wreg	equ	0xFE8
 25347                           indf1	equ	0xFE7
 25348                           postinc1	equ	0xFE6
 25349                           postdec1	equ	0xFE5
 25350                           plusw1	equ	0xFE3
 25351                           fsr1h	equ	0xFE2
 25352                           fsr1l	equ	0xFE1
 25353                           indf2	equ	0xFDF
 25354                           postinc2	equ	0xFDE
 25355                           postdec2	equ	0xFDD
 25356                           plusw2	equ	0xFDB
 25357                           fsr2h	equ	0xFDA
 25358                           fsr2l	equ	0xFD9
 25359                           status	equ	0xFD8
 25360                           
 25361 ;; *************** function i2___lwdiv *****************
 25362 ;; Defined at:
 25363 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 25364 ;; Parameters:    Size  Location     Type
 25365 ;;  dividend        2    0[COMRAM] unsigned int 
 25366 ;;  divisor         2    2[COMRAM] unsigned int 
 25367 ;; Auto vars:     Size  Location     Type
 25368 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 25369 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 25370 ;; Return value:  Size  Location     Type
 25371 ;;                  2    0[COMRAM] unsigned int 
 25372 ;; Registers used:
 25373 ;;		wreg, status,2, status,0
 25374 ;; Tracked objects:
 25375 ;;		On entry : 0/0
 25376 ;;		On exit  : 0/0
 25377 ;;		Unchanged: 0/0
 25378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 25379 ;;      Params:         4       0       0       0       0       0       0       0       0
 25380 ;;      Locals:         3       0       0       0       0       0       0       0       0
 25381 ;;      Temps:          0       0       0       0       0       0       0       0       0
 25382 ;;      Totals:         7       0       0       0       0       0       0       0       0
 25383 ;;Total ram usage:        7 bytes
 25384 ;; Hardware stack levels used:    1
 25385 ;; This function calls:
 25386 ;;		Nothing
 25387 ;; This function is called by:
 25388 ;;		_parseNumber
 25389 ;; This function uses a non-reentrant model
 25390 ;;
 25391                           
 25392                           	psect	text114
 25393  004EAE                     __ptext114:
 25394                           	opt stack 0
 25395  004EAE                     i2___lwdiv:
 25396                           	opt stack 17
 25397                           
 25398                           ;incstack = 0
 25399  004EAE  0E00               	movlw	0
 25400  004EB0  6E06               	movwf	i2___lwdiv@quotient+1,c
 25401  004EB2  0E00               	movlw	0
 25402  004EB4  6E05               	movwf	i2___lwdiv@quotient,c
 25403  004EB6  5003               	movf	i2___lwdiv@divisor,w,c
 25404  004EB8  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 25405  004EBA  B4D8               	btfsc	status,2,c
 25406  004EBC  D01C               	goto	i2l1642
 25407  004EBE  0E01               	movlw	1
 25408  004EC0  6E07               	movwf	i2___lwdiv@counter,c
 25409  004EC2  D004               	goto	i2l1637
 25410  004EC4  90D8               	bcf	status,0,c
 25411  004EC6  3603               	rlcf	i2___lwdiv@divisor,f,c
 25412  004EC8  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 25413  004ECA  2A07               	incf	i2___lwdiv@counter,f,c
 25414  004ECC                     i2l1637:
 25415  004ECC  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 25416  004ECE  D7FA               	goto	i2l1638
 25417  004ED0                     i2u730_40:
 25418  004ED0  90D8               	bcf	status,0,c
 25419  004ED2  3605               	rlcf	i2___lwdiv@quotient,f,c
 25420  004ED4  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 25421  004ED6  5003               	movf	i2___lwdiv@divisor,w,c
 25422  004ED8  5C01               	subwf	i2___lwdiv@dividend,w,c
 25423  004EDA  5004               	movf	i2___lwdiv@divisor+1,w,c
 25424  004EDC  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 25425  004EDE  A0D8               	btfss	status,0,c
 25426  004EE0  D005               	goto	i2l1641
 25427  004EE2  5003               	movf	i2___lwdiv@divisor,w,c
 25428  004EE4  5E01               	subwf	i2___lwdiv@dividend,f,c
 25429  004EE6  5004               	movf	i2___lwdiv@divisor+1,w,c
 25430  004EE8  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 25431  004EEA  8005               	bsf	i2___lwdiv@quotient,0,c
 25432  004EEC                     i2l1641:
 25433  004EEC  90D8               	bcf	status,0,c
 25434  004EEE  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 25435  004EF0  3203               	rrcf	i2___lwdiv@divisor,f,c
 25436  004EF2  2E07               	decfsz	i2___lwdiv@counter,f,c
 25437  004EF4  D7ED               	goto	i2u730_40
 25438  004EF6                     i2l1642:
 25439  004EF6  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 25440  004EFA  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 25441  004EFE  0012               	return		;funcret
 25442  004F00                     __end_ofi2___lwdiv:
 25443                           	opt stack 0
 25444                           pclatu	equ	0xFFB
 25445                           pclath	equ	0xFFA
 25446                           tblptru	equ	0xFF8
 25447                           tblptrh	equ	0xFF7
 25448                           tblptrl	equ	0xFF6
 25449                           tablat	equ	0xFF5
 25450                           prodh	equ	0xFF4
 25451                           prodl	equ	0xFF3
 25452                           intcon	equ	0xFF2
 25453                           intcon3	equ	0xFF0
 25454                           indf0	equ	0xFEF
 25455                           postinc0	equ	0xFEE
 25456                           plusw0	equ	0xFEB
 25457                           fsr0h	equ	0xFEA
 25458                           fsr0l	equ	0xFE9
 25459                           wreg	equ	0xFE8
 25460                           indf1	equ	0xFE7
 25461                           postinc1	equ	0xFE6
 25462                           postdec1	equ	0xFE5
 25463                           plusw1	equ	0xFE3
 25464                           fsr1h	equ	0xFE2
 25465                           fsr1l	equ	0xFE1
 25466                           indf2	equ	0xFDF
 25467                           postinc2	equ	0xFDE
 25468                           postdec2	equ	0xFDD
 25469                           plusw2	equ	0xFDB
 25470                           fsr2h	equ	0xFDA
 25471                           fsr2l	equ	0xFD9
 25472                           status	equ	0xFD8
 25473                           
 25474 ;; *************** function _buttonHandler *****************
 25475 ;; Defined at:
 25476 ;;		line 244 in file "src/system/main.c"
 25477 ;; Parameters:    Size  Location     Type
 25478 ;;  state           2    0[COMRAM] PTR volatile unsigned ch
 25479 ;;		 -> buttonState(1), 
 25480 ;; Auto vars:     Size  Location     Type
 25481 ;;  debounceValu    4    6[COMRAM] const unsigned long 
 25482 ;;  resetValue      4    2[COMRAM] const unsigned long 
 25483 ;; Return value:  Size  Location     Type
 25484 ;;                  1    wreg      void 
 25485 ;; Registers used:
 25486 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 25487 ;; Tracked objects:
 25488 ;;		On entry : 0/0
 25489 ;;		On exit  : 0/0
 25490 ;;		Unchanged: 0/0
 25491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 25492 ;;      Params:         2       0       0       0       0       0       0       0       0
 25493 ;;      Locals:         8       0       0       0       0       0       0       0       0
 25494 ;;      Temps:          0       0       0       0       0       0       0       0       0
 25495 ;;      Totals:        10       0       0       0       0       0       0       0       0
 25496 ;;Total ram usage:       10 bytes
 25497 ;; Hardware stack levels used:    1
 25498 ;; This function calls:
 25499 ;;		Nothing
 25500 ;; This function is called by:
 25501 ;;		_ISR
 25502 ;; This function uses a non-reentrant model
 25503 ;;
 25504                           
 25505                           	psect	text115
 25506  004210                     __ptext115:
 25507                           	opt stack 0
 25508  004210                     _buttonHandler:
 25509                           	opt stack 19
 25510                           
 25511                           ;main.c: 245: uint8_t static oldState = 0;
 25512                           ;main.c: 246: uint8_t static newState = 0;
 25513                           ;main.c: 247: uint32_t static debounceCounter = 0;
 25514                           ;main.c: 248: const uint32_t debounceValue = 0x1f;
 25515                           
 25516                           ;incstack = 0
 25517  004210  0E1F               	movlw	31
 25518  004212  6E07               	movwf	buttonHandler@debounceValue,c
 25519  004214  0E00               	movlw	0
 25520  004216  6E08               	movwf	buttonHandler@debounceValue+1,c
 25521  004218  0E00               	movlw	0
 25522  00421A  6E09               	movwf	buttonHandler@debounceValue+2,c
 25523  00421C  0E00               	movlw	0
 25524  00421E  6E0A               	movwf	buttonHandler@debounceValue+3,c
 25525                           
 25526                           ;main.c: 249: const uint32_t resetValue = 0x3ff;
 25527  004220  0EFF               	movlw	255
 25528  004222  6E03               	movwf	buttonHandler@resetValue,c
 25529  004224  0E03               	movlw	3
 25530  004226  6E04               	movwf	buttonHandler@resetValue+1,c
 25531  004228  0E00               	movlw	0
 25532  00422A  6E05               	movwf	buttonHandler@resetValue+2,c
 25533  00422C  0E00               	movlw	0
 25534  00422E  6E06               	movwf	buttonHandler@resetValue+3,c
 25535                           
 25536                           ;main.c: 250: if ((unsigned)(!(PORTB & (1<<5)))) {
 25537  004230  BA81               	btfsc	3969,5,c	;volatile
 25538  004232  D007               	goto	i2l709
 25539                           
 25540                           ;main.c: 251: debounceCounter++;
 25541  004234  0E01               	movlw	1
 25542  004236  262D               	addwf	buttonHandler@debounceCounter,f,c
 25543  004238  0E00               	movlw	0
 25544  00423A  222E               	addwfc	buttonHandler@debounceCounter+1,f,c
 25545  00423C  222F               	addwfc	buttonHandler@debounceCounter+2,f,c
 25546  00423E  2230               	addwfc	buttonHandler@debounceCounter+3,f,c
 25547                           
 25548                           ;main.c: 252: } else {
 25549  004240  D008               	goto	i2l710
 25550  004242                     i2l709:
 25551                           
 25552                           ;main.c: 253: debounceCounter = 0;
 25553  004242  0E00               	movlw	0
 25554  004244  6E2D               	movwf	buttonHandler@debounceCounter,c
 25555  004246  0E00               	movlw	0
 25556  004248  6E2E               	movwf	buttonHandler@debounceCounter+1,c
 25557  00424A  0E00               	movlw	0
 25558  00424C  6E2F               	movwf	buttonHandler@debounceCounter+2,c
 25559  00424E  0E00               	movlw	0
 25560  004250  6E30               	movwf	buttonHandler@debounceCounter+3,c
 25561  004252                     i2l710:
 25562                           
 25563                           ;main.c: 254: }
 25564                           ;main.c: 255: newState = (unsigned) ((debounceCounter >= debounceValue) ? 1 : 0);
 25565  004252  5007               	movf	buttonHandler@debounceValue,w,c
 25566  004254  5C2D               	subwf	buttonHandler@debounceCounter,w,c
 25567  004256  5008               	movf	buttonHandler@debounceValue+1,w,c
 25568  004258  582E               	subwfb	buttonHandler@debounceCounter+1,w,c
 25569  00425A  5009               	movf	buttonHandler@debounceValue+2,w,c
 25570  00425C  582F               	subwfb	buttonHandler@debounceCounter+2,w,c
 25571  00425E  500A               	movf	buttonHandler@debounceValue+3,w,c
 25572  004260  5830               	subwfb	buttonHandler@debounceCounter+3,w,c
 25573  004262  A0D8               	btfss	status,0,c
 25574  004264  D002               	goto	i2u818_40
 25575  004266  0E01               	movlw	1
 25576  004268  D001               	goto	i2u819_40
 25577  00426A                     i2u818_40:
 25578  00426A  0E00               	movlw	0
 25579  00426C                     i2u819_40:
 25580  00426C  6E45               	movwf	buttonHandler@newState,c
 25581                           
 25582                           ;main.c: 256: if (newState && !oldState) {
 25583  00426E  5045               	movf	buttonHandler@newState,w,c
 25584  004270  B4D8               	btfsc	status,2,c
 25585  004272  D011               	goto	i2l711
 25586  004274  5046               	movf	buttonHandler@oldState,w,c
 25587  004276  A4D8               	btfss	status,2,c
 25588  004278  D00E               	goto	i2l711
 25589                           
 25590                           ;main.c: 257: debounceCounter = debounceValue;
 25591  00427A  C007  F02D         	movff	buttonHandler@debounceValue,buttonHandler@debounceCounter
 25592  00427E  C008  F02E         	movff	buttonHandler@debounceValue+1,buttonHandler@debounceCounter+1
 25593  004282  C009  F02F         	movff	buttonHandler@debounceValue+2,buttonHandler@debounceCounter+2
 25594  004286  C00A  F030         	movff	buttonHandler@debounceValue+3,buttonHandler@debounceCounter+3
 25595                           
 25596                           ;main.c: 258: *state = 1;
 25597  00428A  C001  FFD9         	movff	buttonHandler@state,fsr2l
 25598  00428E  C002  FFDA         	movff	buttonHandler@state+1,fsr2h
 25599  004292  0E01               	movlw	1
 25600  004294  D005               	goto	L11
 25601  004296                     i2l711:
 25602                           
 25603                           ;main.c: 260: *state = 0;
 25604  004296  C001  FFD9         	movff	buttonHandler@state,fsr2l
 25605  00429A  C002  FFDA         	movff	buttonHandler@state+1,fsr2h
 25606  00429E  0E00               	movlw	0
 25607  0042A0                     L11:
 25608  0042A0  6EDF               	movwf	indf2,c
 25609                           
 25610                           ;main.c: 261: }
 25611                           ;main.c: 262: if (debounceCounter > resetValue)
 25612  0042A2  502D               	movf	buttonHandler@debounceCounter,w,c
 25613  0042A4  5C03               	subwf	buttonHandler@resetValue,w,c
 25614  0042A6  502E               	movf	buttonHandler@debounceCounter+1,w,c
 25615  0042A8  5804               	subwfb	buttonHandler@resetValue+1,w,c
 25616  0042AA  502F               	movf	buttonHandler@debounceCounter+2,w,c
 25617  0042AC  5805               	subwfb	buttonHandler@resetValue+2,w,c
 25618  0042AE  5030               	movf	buttonHandler@debounceCounter+3,w,c
 25619  0042B0  5806               	subwfb	buttonHandler@resetValue+3,w,c
 25620  0042B2  A0D8               	btfss	status,0,c
 25621  0042B4  00FF               	reset		;# 
 25622                           
 25623                           ;main.c: 265: oldState = newState;
 25624  0042B6  C045  F046         	movff	buttonHandler@newState,buttonHandler@oldState
 25625  0042BA  0012               	return		;funcret
 25626  0042BC                     __end_of_buttonHandler:
 25627                           	opt stack 0
 25628                           pclatu	equ	0xFFB
 25629                           pclath	equ	0xFFA
 25630                           tblptru	equ	0xFF8
 25631                           tblptrh	equ	0xFF7
 25632                           tblptrl	equ	0xFF6
 25633                           tablat	equ	0xFF5
 25634                           prodh	equ	0xFF4
 25635                           prodl	equ	0xFF3
 25636                           intcon	equ	0xFF2
 25637                           intcon3	equ	0xFF0
 25638                           indf0	equ	0xFEF
 25639                           postinc0	equ	0xFEE
 25640                           plusw0	equ	0xFEB
 25641                           fsr0h	equ	0xFEA
 25642                           fsr0l	equ	0xFE9
 25643                           wreg	equ	0xFE8
 25644                           indf1	equ	0xFE7
 25645                           postinc1	equ	0xFE6
 25646                           postdec1	equ	0xFE5
 25647                           plusw1	equ	0xFE3
 25648                           fsr1h	equ	0xFE2
 25649                           fsr1l	equ	0xFE1
 25650                           indf2	equ	0xFDF
 25651                           postinc2	equ	0xFDE
 25652                           postdec2	equ	0xFDD
 25653                           plusw2	equ	0xFDB
 25654                           fsr2h	equ	0xFDA
 25655                           fsr2l	equ	0xFD9
 25656                           status	equ	0xFD8
 25657                           pclatu	equ	0xFFB
 25658                           pclath	equ	0xFFA
 25659                           tblptru	equ	0xFF8
 25660                           tblptrh	equ	0xFF7
 25661                           tblptrl	equ	0xFF6
 25662                           tablat	equ	0xFF5
 25663                           prodh	equ	0xFF4
 25664                           prodl	equ	0xFF3
 25665                           intcon	equ	0xFF2
 25666                           intcon3	equ	0xFF0
 25667                           indf0	equ	0xFEF
 25668                           postinc0	equ	0xFEE
 25669                           plusw0	equ	0xFEB
 25670                           fsr0h	equ	0xFEA
 25671                           fsr0l	equ	0xFE9
 25672                           wreg	equ	0xFE8
 25673                           indf1	equ	0xFE7
 25674                           postinc1	equ	0xFE6
 25675                           postdec1	equ	0xFE5
 25676                           plusw1	equ	0xFE3
 25677                           fsr1h	equ	0xFE2
 25678                           fsr1l	equ	0xFE1
 25679                           indf2	equ	0xFDF
 25680                           postinc2	equ	0xFDE
 25681                           postdec2	equ	0xFDD
 25682                           plusw2	equ	0xFDB
 25683                           fsr2h	equ	0xFDA
 25684                           fsr2l	equ	0xFD9
 25685                           status	equ	0xFD8
 25686                           
 25687                           	psect	rparam
 25688  0000                     pclatu	equ	0xFFB
 25689                           pclath	equ	0xFFA
 25690                           tblptru	equ	0xFF8
 25691                           tblptrh	equ	0xFF7
 25692                           tblptrl	equ	0xFF6
 25693                           tablat	equ	0xFF5
 25694                           prodh	equ	0xFF4
 25695                           prodl	equ	0xFF3
 25696                           intcon	equ	0xFF2
 25697                           intcon3	equ	0xFF0
 25698                           indf0	equ	0xFEF
 25699                           postinc0	equ	0xFEE
 25700                           plusw0	equ	0xFEB
 25701                           fsr0h	equ	0xFEA
 25702                           fsr0l	equ	0xFE9
 25703                           wreg	equ	0xFE8
 25704                           indf1	equ	0xFE7
 25705                           postinc1	equ	0xFE6
 25706                           postdec1	equ	0xFE5
 25707                           plusw1	equ	0xFE3
 25708                           fsr1h	equ	0xFE2
 25709                           fsr1l	equ	0xFE1
 25710                           indf2	equ	0xFDF
 25711                           postinc2	equ	0xFDE
 25712                           postdec2	equ	0xFDD
 25713                           plusw2	equ	0xFDB
 25714                           fsr2h	equ	0xFDA
 25715                           fsr2l	equ	0xFD9
 25716                           status	equ	0xFD8
 25717                           
 25718                           	psect	temp
 25719  00004F                     btemp:
 25720                           	opt stack 0
 25721  00004F                     	ds	1
 25722  0000                     int$flags	set	btemp
 25723  0000                     wtemp6	set	btemp+1
 25724                           pclatu	equ	0xFFB
 25725                           pclath	equ	0xFFA
 25726                           tblptru	equ	0xFF8
 25727                           tblptrh	equ	0xFF7
 25728                           tblptrl	equ	0xFF6
 25729                           tablat	equ	0xFF5
 25730                           prodh	equ	0xFF4
 25731                           prodl	equ	0xFF3
 25732                           intcon	equ	0xFF2
 25733                           intcon3	equ	0xFF0
 25734                           indf0	equ	0xFEF
 25735                           postinc0	equ	0xFEE
 25736                           plusw0	equ	0xFEB
 25737                           fsr0h	equ	0xFEA
 25738                           fsr0l	equ	0xFE9
 25739                           wreg	equ	0xFE8
 25740                           indf1	equ	0xFE7
 25741                           postinc1	equ	0xFE6
 25742                           postdec1	equ	0xFE5
 25743                           plusw1	equ	0xFE3
 25744                           fsr1h	equ	0xFE2
 25745                           fsr1l	equ	0xFE1
 25746                           indf2	equ	0xFDF
 25747                           postinc2	equ	0xFDE
 25748                           postdec2	equ	0xFDD
 25749                           plusw2	equ	0xFDB
 25750                           fsr2h	equ	0xFDA
 25751                           fsr2l	equ	0xFD9
 25752                           status	equ	0xFD8


Data Sizes:
    Strings     1513
    Constant    11
    Data        52
    BSS         459
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      78
    BANK0           160    160     160
    BANK1           256    194     250
    BANK2           256      0     256
    BANK3           256      0     162
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ultoa@buf	PTR unsigned char  size(2) Largest target is 10
		 -> intToString@number(BANK1[10]), 

    sp__ultoa	PTR unsigned char  size(2) Largest target is 10
		 -> intToString@number(BANK1[10]), 

    ltoa@buf	PTR unsigned char  size(2) Largest target is 10
		 -> intToString@number(BANK1[10]), 

    ltoa@cp	PTR unsigned char  size(2) Largest target is 10
		 -> intToString@number(BANK1[10]), 

    ipv4_setToAllZero@ip	PTR struct ipv4_address size(2) Largest target is 4
		 -> arp_init@ip(BANK0[4]), arp_probe@ipSender(BANK1[4]), 

    ipv4_isAllZero@ip	PTR struct ipv4_address size(2) Largest target is 32
		 -> arp_setNewEntry@ip(BANK0[4]), arp_parseFromRXBuffer@arp(BANK0[32]), 

    ipv4_cmp@b	PTR struct ipv4_address size(2) Largest target is 32
		 -> arp_checkForEntry@ip(BANK0[4]), arp_sendReply@myIP(BANK1[4]), arp_parseFromRXBuffer@arp(BANK0[32]), 

    ipv4_cmp@a	PTR struct ipv4_address size(2) Largest target is 112
		 -> arp_table(BANK3[112]), arp_sendReply@request(BANK1[32]), arp_parseFromRXBuffer@arp(BANK0[32]), 

    ipv4_SrcAddrChanged@err	PTR struct error size(2) Largest target is 3
		 -> arp_background@err(BANK1[3]), 

    arpStatus	PTR struct error size(2) Largest target is 3
		 -> NULL(NULL[0]), arp_background@err(BANK1[3]), 

    ipv4_handleNewPacket@frame	PTR struct ethernetFrame size(2) Largest target is 123
		 -> stack(BANK2[123]), 

    ipv4_checkHeaderChecksum@header	PTR struct ipv4_header size(2) Largest target is 23
		 -> ipv4_handleNewPacket@ip(BANK0[23]), 

    ipv4_parseHeader@field	PTR struct memoryField size(2) Largest target is 9
		 -> ipv4_handleNewPacket@headerField(BANK0[9]), 

    ipv4_calculateHeaderChecksum@header	PTR struct ipv4_header size(2) Largest target is 123
		 -> ipv4_checkHeaderChecksum@testHeader(BANK0[23]), stack.pendingPacketToSend(BANK2[66]), stack(BANK2[123]), 

    ipv4_writeHeaderIntoBuffer@ptr	PTR unsigned char  size(2) Largest target is 32
		 -> main@headerBuf(BANK1[32]), 

    ipv4_txFrameRequest@packet	PTR struct ipv4_packet size(2) Largest target is 123
		 -> stack(BANK2[123]), 

    arp_checkForEntry@index	PTR unsigned char  size(2) Largest target is 1
		 -> ipv4_sendFrame@index(BANK0[1]), arp_gratuitous@index(BANK0[1]), arp_probe@index(BANK1[1]), 

    arp_parseFromRXBuffer@frame	PTR struct ethernetFrame size(2) Largest target is 123
		 -> stack(BANK2[123]), 

    arp_handleNewPacket@frame	PTR struct ethernetFrame size(2) Largest target is 123
		 -> stack(BANK2[123]), 

    sp__arpEntryToString	PTR unsigned char  size(2) Largest target is 50
		 -> arpEntryToString@string(BANK3[50]), 

    sp__ipProtocolToString	PTR unsigned char  size(2) Largest target is 17
		 -> STR_69(CODE[17]), STR_68(CODE[4]), STR_67(CODE[4]), STR_66(CODE[5]), 

    sp__hexToString	PTR unsigned char  size(2) Largest target is 10
		 -> hexToString@number(BANK1[10]), 

    sp__ltoa	PTR unsigned char  size(2) Largest target is 10
		 -> intToString@number(BANK1[10]), 

    UARTTransmitText@str	PTR const unsigned char  size(2) Largest target is 58
		 -> STR_113(CODE[33]), STR_112(CODE[19]), STR_111(CODE[2]), STR_110(CODE[3]), 
		 -> STR_109(CODE[3]), STR_108(CODE[3]), STR_107(CODE[3]), STR_106(CODE[5]), 
		 -> STR_105(CODE[2]), STR_104(CODE[2]), STR_103(CODE[7]), STR_102(CODE[11]), 
		 -> STR_101(CODE[3]), STR_100(CODE[27]), STR_99(CODE[3]), STR_98(CODE[8]), 
		 -> STR_97(CODE[9]), STR_96(CODE[3]), STR_95(CODE[39]), STR_94(CODE[3]), 
		 -> STR_93(CODE[3]), STR_92(CODE[30]), STR_91(CODE[33]), STR_90(CODE[39]), 
		 -> STR_89(CODE[35]), STR_88(CODE[58]), STR_87(CODE[36]), STR_86(CODE[34]), 
		 -> STR_85(CODE[3]), STR_84(CODE[43]), STR_83(CODE[4]), STR_82(CODE[12]), 
		 -> STR_81(CODE[26]), STR_80(CODE[2]), STR_79(CODE[3]), STR_78(CODE[16]), 
		 -> STR_77(CODE[15]), STR_76(CODE[10]), STR_75(CODE[2]), STR_74(CODE[3]), 
		 -> STR_73(CODE[5]), STR_72(CODE[3]), STR_71(CODE[2]), STR_70(CODE[39]), 
		 -> arpEntryToString@string(BANK3[50]), ipAdressToString@address(BANK2[16]), STR_69(CODE[17]), STR_68(CODE[4]), 
		 -> STR_67(CODE[4]), STR_66(CODE[5]), STR_65(CODE[18]), STR_64(CODE[4]), 
		 -> STR_63(CODE[5]), macToString@address(BANK0[18]), hexToString@number(BANK1[10]), intToString@number(BANK1[10]), 
		 -> STR_62(CODE[5]), STR_61(CODE[9]), STR_60(CODE[30]), STR_59(CODE[34]), 
		 -> STR_58(CODE[55]), STR_57(CODE[37]), STR_56(CODE[15]), STR_55(CODE[14]), 
		 -> STR_54(CODE[19]), STR_53(CODE[30]), STR_52(CODE[17]), STR_51(CODE[8]), 
		 -> STR_50(CODE[29]), STR_49(CODE[29]), STR_48(CODE[20]), STR_47(CODE[19]), 
		 -> STR_46(CODE[19]), STR_45(CODE[13]), STR_44(CODE[4]), STR_43(CODE[5]), 
		 -> STR_42(CODE[32]), STR_41(CODE[3]), STR_40(CODE[15]), STR_39(CODE[51]), 
		 -> STR_38(CODE[4]), STR_37(CODE[23]), STR_36(CODE[12]), STR_35(CODE[4]), 
		 -> STR_34(CODE[9]), STR_33(CODE[2]), STR_32(CODE[12]), STR_31(CODE[24]), 
		 -> STR_30(CODE[51]), STR_29(CODE[49]), STR_28(CODE[51]), STR_27(CODE[2]), 
		 -> STR_26(CODE[3]), STR_25(CODE[37]), STR_24(CODE[37]), STR_23(CODE[3]), 
		 -> STR_22(CODE[27]), STR_21(CODE[40]), STR_20(CODE[3]), STR_19(CODE[3]), 
		 -> STR_18(CODE[3]), STR_17(CODE[5]), STR_16(CODE[2]), STR_15(CODE[3]), 
		 -> STR_14(CODE[5]), STR_13(CODE[3]), STR_12(CODE[3]), STR_11(CODE[2]), 
		 -> STR_10(CODE[20]), STR_9(CODE[7]), STR_8(CODE[6]), STR_7(CODE[2]), 
		 -> STR_6(CODE[2]), STR_5(CODE[16]), STR_4(CODE[10]), STR_3(CODE[12]), 
		 -> STR_2(CODE[2]), STR_1(CODE[2]), ethernetController_getDeviceName@string(BANK0[11]), 

    buttonHandler@state	PTR volatile unsigned char  size(2) Largest target is 1
		 -> buttonState(BANK1[1]), 

    sp__ipAdressToString	PTR unsigned char  size(2) Largest target is 16
		 -> ipAdressToString@address(BANK2[16]), 

    handleStackBackgroundTasks@stack	PTR struct stack size(2) Largest target is 123
		 -> stack(BANK2[123]), 

    mac_setAllZero@mac	PTR struct macaddress size(2) Largest target is 6
		 -> arp_init@mac(BANK0[6]), arp_sendRequest@targetMAC(BANK1[6]), 

    mac_cmp@b	PTR struct macaddress size(2) Largest target is 32
		 -> arp_parseFromRXBuffer@arp(BANK0[32]), 

    mac_cmp@a	PTR struct macaddress size(2) Largest target is 32
		 -> arp_parseFromRXBuffer@arp(BANK0[32]), 

    mac_isAllZero@mac	PTR struct macaddress size(2) Largest target is 32
		 -> arp_setNewEntry@mac(BANK0[6]), arp_parseFromRXBuffer@arp(BANK0[32]), 

    mac_setToBroadcast@mac	PTR struct macaddress size(2) Largest target is 6
		 -> arp_send@destination(BANK0[6]), 

    sp__etherTypeToString	PTR unsigned char  size(2) Largest target is 18
		 -> STR_65(CODE[18]), STR_64(CODE[4]), STR_63(CODE[5]), 

    sp__macToString	PTR unsigned char  size(2) Largest target is 18
		 -> macToString@address(BANK0[18]), 

    sp__intToString	PTR unsigned char  size(2) Largest target is 10
		 -> intToString@number(BANK1[10]), 

    ethernet_rxGetNewFrame@frame	PTR struct ethernetFrame size(2) Largest target is 123
		 -> stack(BANK2[123]), 

    ethernet_txFrameRequest@frame	PTR struct ethernetFrame size(2) Largest target is 123
		 -> arp_send@ethFrame(BANK0[34]), stack(BANK2[123]), 

    enc424j600_updateReceiveStatusVector@rsv	PTR unsigned char  size(2) Largest target is 6
		 -> ethernetController_getRSV@temp(BANK1[6]), 

    enc424j600_readPHYRegister@data	PTR unsigned int  size(2) Largest target is 2
		 -> ethernetController_updateLinkStatus@temp16(BANK0[2]), 

    enc424j600_readControlRegisterUnbanked@data	PTR unsigned char  size(2) Largest target is 6
		 -> enc424j600_clearInterruptFlag@temp(BANK0[1]), enc424j600_getInterruptFlags@high(BANK0[1]), enc424j600_getInterruptFlags@low(BANK0[1]), enc424j600_disable@temp(COMRAM[1]), 
		 -> enc424j600_enable@temp(COMRAM[1]), enc424j600_disableAutoMACInsertion@temp(COMRAM[1]), enc424j600_enableAutoMACInsertion@temp(BANK0[1]), enc424j600_getPacketCount@lowByte(BANK0[1]), 
		 -> enc424j600_readPHYRegister@highByte(BANK0[1]), enc424j600_readPHYRegister@lowByte(BANK0[1]), enc424j600_readPHYRegister@temp(BANK0[1]), ethernetController_setLEDConfig@data(BANK0[1]), 
		 -> ethernetController_updateLinkStatus@temp(BANK0[1]), mac.address(COMRAM[6]), ethernetController_getMacAddress@mac(BANK0[6]), ethernetController_getSiliconRevision@data(COMRAM[1]), 
		 -> ethernetController_checkDeviceId@data(BANK0[1]), ethernetController_softReset@receivedData(BANK0[2]), 

    enc424j600_writeControlRegisterUnbanked@data	PTR unsigned char  size(2) Largest target is 6
		 -> enc424j600_clearInterruptFlag@temp(BANK0[1]), enc424j600_disable@temp(COMRAM[1]), enc424j600_enable@temp(COMRAM[1]), enc424j600_disableAutoMACInsertion@temp(COMRAM[1]), 
		 -> enc424j600_enableAutoMACInsertion@temp(BANK0[1]), enc424j600_setRXTailPointer@highByte(BANK0[1]), enc424j600_setRXTailPointer@lowByte(BANK0[1]), enc424j600_setRXBufferStartAddress@highByte(BANK0[1]), 
		 -> enc424j600_setRXBufferStartAddress@lowByte(BANK0[1]), enc424j600_setTXStartAddress@highByte(BANK0[1]), enc424j600_setTXStartAddress@lowByte(BANK0[1]), enc424j600_setTXLength@highByte(BANK0[1]), 
		 -> enc424j600_setTXLength@lowByte(BANK0[1]), enc424j600_readPHYRegister@temp(BANK0[1]), enc424j600_readPHYRegister@unusedBits(BANK0[1]), enc424j600_readPHYRegister@PHYaddress(BANK0[1]), 
		 -> ethernetController_setLEDConfig@data(BANK0[1]), mac.address(COMRAM[6]), ethernetController_setMacAddress@mac(COMRAM[6]), ethernetController_softReset@dataToSend(BANK0[2]), 

    enc424j600_readSPI@data	PTR unsigned char  size(2) Largest target is 6
		 -> enc424j600_clearInterruptFlag@temp(BANK0[1]), enc424j600_getInterruptFlags@high(BANK0[1]), enc424j600_getInterruptFlags@low(BANK0[1]), enc424j600_disable@temp(COMRAM[1]), 
		 -> enc424j600_enable@temp(COMRAM[1]), enc424j600_disableAutoMACInsertion@temp(COMRAM[1]), enc424j600_enableAutoMACInsertion@temp(BANK0[1]), enc424j600_getPacketCount@lowByte(BANK0[1]), 
		 -> enc424j600_readPHYRegister@highByte(BANK0[1]), enc424j600_readPHYRegister@lowByte(BANK0[1]), enc424j600_readPHYRegister@temp(BANK0[1]), ethernetController_setLEDConfig@data(BANK0[1]), 
		 -> ethernetController_updateLinkStatus@temp(BANK0[1]), ethernetController_streamFromRXBuffer@temp(BANK0[1]), ethernetController_updateNextPacketPointer@newPointerH(BANK0[1]), ethernetController_updateNextPacketPointer@newPointerL(BANK0[1]), 
		 -> ethernetController_getRSV@temp(BANK1[6]), ethernetController_getEtherTypeField@lowByte(BANK0[1]), ethernetController_getEtherTypeField@highByte(BANK0[1]), ethernetController_getSourceMACAddress@temp(BANK0[1]), 
		 -> ethernetController_getDestinationMACAddress@temp(COMRAM[1]), mac.address(COMRAM[6]), ethernetController_getMacAddress@mac(BANK0[6]), ethernetController_getSiliconRevision@data(COMRAM[1]), 
		 -> ethernetController_checkDeviceId@data(BANK0[1]), ethernetController_softReset@receivedData(BANK0[2]), 

    enc424j600_writeSPI@data	PTR unsigned char  size(2) Largest target is 6
		 -> enc424j600_clearInterruptFlag@temp(BANK0[1]), enc424j600_disable@temp(COMRAM[1]), enc424j600_enable@temp(COMRAM[1]), enc424j600_disableAutoMACInsertion@temp(COMRAM[1]), 
		 -> enc424j600_enableAutoMACInsertion@temp(BANK0[1]), enc424j600_setRXTailPointer@highByte(BANK0[1]), enc424j600_setRXTailPointer@lowByte(BANK0[1]), enc424j600_setRXBufferStartAddress@highByte(BANK0[1]), 
		 -> enc424j600_setRXBufferStartAddress@lowByte(BANK0[1]), enc424j600_setERXDATAReadPointer@highByte(BANK0[1]), enc424j600_setERXDATAReadPointer@lowByte(BANK0[1]), enc424j600_setERXDATAReadPointer@opcode(BANK0[1]), 
		 -> enc424j600_setGPDATAReadPointer@highByte(COMRAM[1]), enc424j600_setGPDATAReadPointer@lowByte(COMRAM[1]), enc424j600_setGPDATAReadPointer@opcode(COMRAM[1]), enc424j600_setGPDATAWritePointer@highByte(BANK0[1]), 
		 -> enc424j600_setGPDATAWritePointer@lowByte(BANK0[1]), enc424j600_setGPDATAWritePointer@opcode(BANK0[1]), enc424j600_setTXStartAddress@highByte(BANK0[1]), enc424j600_setTXStartAddress@lowByte(BANK0[1]), 
		 -> enc424j600_setTXLength@highByte(BANK0[1]), enc424j600_setTXLength@lowByte(BANK0[1]), enc424j600_readPHYRegister@temp(BANK0[1]), enc424j600_readPHYRegister@unusedBits(BANK0[1]), 
		 -> enc424j600_readPHYRegister@PHYaddress(BANK0[1]), enc424j600_readControlRegisterUnbanked@addr(BANK0[1]), enc424j600_readControlRegisterUnbanked@opcode(BANK0[1]), enc424j600_writeControlRegisterUnbanked@addr(BANK0[1]), 
		 -> enc424j600_writeControlRegisterUnbanked@opcode(BANK0[1]), enc424j600_writeSingleByte@opcode(BANK0[1]), ethernetController_setLEDConfig@data(BANK0[1]), ethernetController_streamFromRXBuffer@opcode(BANK0[1]), 
		 -> ethernetController_updateNextPacketPointer@opcode(BANK0[1]), ethernetController_getRSV@opcode(BANK0[1]), ethernetController_getEtherTypeField@opcode(BANK0[1]), ethernetController_getSourceMACAddress@opcode(BANK0[1]), 
		 -> ethernetController_getDestinationMACAddress@opcode(COMRAM[1]), ethernetController_writeEtherTypeFieldToBuffer@opcode(BANK0[1]), ethernetController_writeEtherTypeFieldToBuffer@highByte(BANK0[1]), ethernetController_writeEtherTypeFieldToBuffer@lowByte(BANK0[1]), 
		 -> ethernetController_writeDestinationMACAddress@opcode(BANK0[1]), ethernetController_writeDestinationMACAddress@data(BANK0[6]), ethernetController_streamToTransmitBuffer@data(BANK0[1]), ethernetController_streamToTransmitBuffer@opcode(BANK0[1]), 
		 -> mac.address(COMRAM[6]), ethernetController_setMacAddress@mac(COMRAM[6]), ethernetController_softReset@dataToSend(BANK0[2]), 

    ethernetController_updateLinkStatus@state	PTR struct ethernetConnection size(2) Largest target is 123
		 -> stack(BANK2[123]), 

    sp__ethernetController_getDeviceName	PTR unsigned char  size(2) Largest target is 11
		 -> ethernetController_getDeviceName@string(BANK0[11]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->_sevenSegmentUpdate
    _sevenSegmentUpdate->_parseNumber
    _parseNumber->i2___lwdiv

Critical Paths under _main in BANK0

    _stack_init->_arp_init
    _srand->_ethernetController_getMacAddress
    _printEthernetState->_UARTTransmitText
    _printErrorMessage->_UARTTransmitText
    _ipv4_txFrameRequest->_ethernet_txFrameRequest
    _ipv4_streamToTransmissionBuffer->_ethernetController_streamToTransmitBuffer
    _handleStackBackgroundTasks->_ipv4_sendFrame
    _ipv4_background->_UARTTransmitText
    _ethernet_rxGetNewFrame->_arp_handleNewPacket
    _ipv4_handleNewPacket->_ipv4_checkHeaderChecksum
    _ipv4_parseHeader->_ethernetController_streamFromRXBuffer
    _ipv4_checkHeaderChecksum->_UARTTransmitText
    _hexToString->_hexToChar
    _ethernetController_updateNextPacketPointer->_enc424j600_setERXDATAReadPointer
    _ethernetController_getRSV->_enc424j600_updateReceiveStatusVector
    _ethernetController_getEtherTypeField->_enc424j600_setERXDATAReadPointer
    _ethernetController_dropPacket->_enc424j600_setRXTailPointer
    _ethernetController_getNextPacketPointer->_enc424j600_getNextPacketPointer
    _arp_sendReply->_arp_send
    _arp_parseFromRXBuffer->_ethernetController_streamFromRXBuffer
    _ethernetController_streamFromRXBuffer->_enc424j600_setERXDATAReadPointer
    _UARTTransmitInt->_UARTTransmitText
    _intToString->_ltoa
    _ltoa->_ultoa
    _ultoa->___lldiv
    _ethernetController_updateLinkStatus->_enc424j600_readPHYRegister
    _enc424j600_readPHYRegister->_enc424j600_readControlRegisterUnbanked
    _enc424j600_readPHYRegister->_enc424j600_writeControlRegisterUnbanked
    _ethernetController_setLEDConfig->_enc424j600_readControlRegisterUnbanked
    _ethernetController_setLEDConfig->_enc424j600_writeControlRegisterUnbanked
    _ethernetController_pollInterruptFlags->_enc424j600_getInterruptFlags
    _enc424j600_getInterruptFlags->_enc424j600_readControlRegisterUnbanked
    _ethernetController_newPacketAvailable->_enc424j600_getPacketCount
    _enc424j600_getPacketCount->_enc424j600_readControlRegisterUnbanked
    _ethernetController_clearInterruptFlag->_enc424j600_clearInterruptFlag
    _enc424j600_clearInterruptFlag->_enc424j600_readControlRegisterUnbanked
    _enc424j600_clearInterruptFlag->_enc424j600_writeControlRegisterUnbanked
    _arp_init->_arp_setNewEntry
    _arp_setNewEntry->_UARTTransmitText
    _macToString->_ethernetController_getMacAddress
    _arp_background->_arp_gratuitous
    _rand->___lmul
    _ipAdressToString->___lwmod
    ___lwmod->_rand
    _arp_sendRequest->_arp_send
    _ethernetController_getMacAddress->_enc424j600_readControlRegisterUnbanked
    _arp_send->_ethernet_txFrameRequest
    _ethernet_txFrameRequest->_memory_txFrameRequest
    _memory_txFrameRequest->_checkForOverlap
    _checkForOverlap->_checkForOverlapSwitched
    _ethernetController_writeEtherTypeFieldToBuffer->_enc424j600_setGPDATAWritePointer
    _ethernetController_writeDestinationMACAddress->_enc424j600_setGPDATAWritePointer
    _ethernetController_streamToTransmitBuffer->_enc424j600_setGPDATAWritePointer
    _enc424j600_setGPDATAWritePointer->_enc424j600_writeSPI
    _ethernetController_sendPacket->_enc424j600_setTXLength
    _ethernetController_sendPacket->_enc424j600_setTXStartAddress
    _enc424j600_setTXStartAddress->_enc424j600_writeControlRegisterUnbanked
    _enc424j600_setTXLength->_enc424j600_writeControlRegisterUnbanked
    _ethernetController_getSourceMACAddress->_enc424j600_setERXDATAReadPointer
    _enc424j600_setERXDATAReadPointer->_enc424j600_writeSPI
    _arp_checkForEntry->_ipv4_cmp
    _UARTTransmitText->_macToString
    _ethernetController_init->_ethernetController_softReset
    _ethernetController_softReset->_enc424j600_readControlRegisterUnbanked
    _ethernetController_softReset->_enc424j600_writeControlRegisterUnbanked
    _ethernetController_checkDeviceId->_enc424j600_readControlRegisterUnbanked
    _enc424j600_setRXTailPointer->_enc424j600_writeControlRegisterUnbanked
    _enc424j600_setRXBufferStartAddress->_enc424j600_writeControlRegisterUnbanked
    _enc424j600_enableReception->_enc424j600_writeSingleByte
    _enc424j600_writeSingleByte->_enc424j600_writeSPI
    _enc424j600_enableAutoMACInsertion->_enc424j600_readControlRegisterUnbanked
    _enc424j600_enableAutoMACInsertion->_enc424j600_writeControlRegisterUnbanked
    _enc424j600_writeControlRegisterUnbanked->_enc424j600_writeSPI
    _enc424j600_readControlRegisterUnbanked->_enc424j600_readSPI
    _enc424j600_readControlRegisterUnbanked->_enc424j600_writeSPI

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_handleStackBackgroundTasks
    _handleStackBackgroundTasks->_ethernet_rxGetNewFrame
    _ipv4_sendFrame->_arp_sendRequest
    _ethernet_rxGetNewFrame->_arp_handleNewPacket
    _arp_handleNewPacket->_arp_sendReply
    _arp_background->_arp_probe
    _arp_probe->_arp_sendRequest
    _arp_gratuitous->_arp_sendRequest

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                50    50      0  950744
                                            145 BANK1     49    49      0
                           _UARTInit
                   _UARTTransmitText
   _ethernetController_checkDeviceId
   _ethernetController_getDeviceName
   _ethernetController_getMacAddress
            _ethernetController_init
    _ethernetController_setLEDConfig
         _handleStackBackgroundTasks
                   _ipAdressToString
       _ipv4_calculateHeaderChecksum
            _ipv4_getIPSourceAddress
    _ipv4_streamToTransmissionBuffer
                _ipv4_txFrameRequest
         _ipv4_writeHeaderIntoBuffer
                        _macToString
                  _printErrorMessage
                 _printEthernetState
                   _sevenSegmentInit
                              _srand
                         _stack_init
 ---------------------------------------------------------------------------------
 (1) _stack_init                                           0     0      0   39651
                           _arp_init
                          _ipv4_init
 ---------------------------------------------------------------------------------
 (2) _ipv4_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _srand                                                2     0      2     135
                                             26 BANK0      2     0      2
   _ethernetController_getMacAddress (ARG)
 ---------------------------------------------------------------------------------
 (1) _sevenSegmentInit                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _printEthernetState                                  15     0     15   15644
                                             58 BANK0     15     0     15
                   _UARTTransmitText
 ---------------------------------------------------------------------------------
 (1) _printErrorMessage                                    5     2      3   19229
                                             58 BANK0      5     2      3
                   _UARTTransmitText
                        _intToString
 ---------------------------------------------------------------------------------
 (1) _ipv4_writeHeaderIntoBuffer                          27     2     25    1607
                                              0 BANK0     27     2     25
 ---------------------------------------------------------------------------------
 (1) _ipv4_txFrameRequest                                  6     4      2   20533
                                             71 BANK0      6     4      2
            _ethernet_txFrameRequest
 ---------------------------------------------------------------------------------
 (1) _ipv4_streamToTransmissionBuffer                     71     5     66    8299
                                             30 BANK0     69     3     66
_ethernetController_streamToTransmit
 ---------------------------------------------------------------------------------
 (1) _handleStackBackgroundTasks                          22    20      2  740775
                                            133 BANK1     12    10      2
                   _UARTTransmitText
                     _arp_background
                           _arp_init
_ethernetController_clearInterruptFl
_ethernetController_newPacketAvailab
_ethernetController_pollInterruptFla
    _ethernetController_setLEDConfig
_ethernetController_updateLinkStatus
             _ethernet_rxGetNewFrame
                   _ipAdressToString
                    _ipv4_background
                     _ipv4_sendFrame
            _ipv4_setIPSourceAddress
 ---------------------------------------------------------------------------------
 (2) _ipv4_setIPSourceAddress                              4     0      4     239
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _ipv4_sendFrame                                      78    12     66  117307
                                            156 BANK0      4     4      0
                                             52 BANK1     74     8     66
                   _UARTTransmitText
                  _arp_checkForEntry
              _arp_getEntryFromTable
                    _arp_sendRequest
   _ethernetController_getMacAddress
      _ethernetController_sendPacket
_ethernetController_writeDestination
                          _getMillis
                   _ipAdressToString
                        _macToString
 ---------------------------------------------------------------------------------
 (3) _arp_getEntryFromTable                                8     1      7      31
                                              0 BANK0      8     1      7
 ---------------------------------------------------------------------------------
 (2) _ipv4_background                                      9     6      3   15592
                                             58 BANK0      8     5      3
                   _UARTTransmitText
 ---------------------------------------------------------------------------------
 (2) _ethernet_rxGetNewFrame                              13    11      2  296176
                                            120 BANK1     13    11      2
                    _UARTTransmitInt
                   _UARTTransmitText
                _arp_handleNewPacket
                  _etherTypeToString
      _ethernetController_dropPacket
_ethernetController_getEtherTypeFiel
_ethernetController_getNextPacketPoi
          _ethernetController_getRSV
_ethernetController_updateNextPacket
                          _getMillis
                        _intToString
               _ipv4_handleNewPacket
                        _macToString
 ---------------------------------------------------------------------------------
 (3) _ipv4_handleNewPacket                                36    34      2   63712
                                             85 BANK0     36    34      2
                   _UARTTransmitText
      _ethernetController_dropPacket
                        _intToString
                   _ipAdressToString
                 _ipProtocolToString
           _ipv4_checkHeaderChecksum
                   _ipv4_parseHeader
 ---------------------------------------------------------------------------------
 (4) _ipv4_parseHeader                                    50    27     23   12751
                                             20 BANK0     50    27     23
_ethernetController_streamFromRXBuff
 ---------------------------------------------------------------------------------
 (4) _ipv4_checkHeaderChecksum                            27    25      2   17262
                                             58 BANK0     27    25      2
                   _UARTTransmitText
                        _hexToString
       _ipv4_calculateHeaderChecksum
 ---------------------------------------------------------------------------------
 (1) _ipv4_calculateHeaderChecksum                        18    16      2     957
                                              0 BANK0     18    16      2
 ---------------------------------------------------------------------------------
 (5) _hexToString                                          9     5      4     660
                                              1 BANK0      9     5      4
                          _hexToChar
 ---------------------------------------------------------------------------------
 (6) _hexToChar                                            1     1      0     124
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _ipProtocolToString                                   3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _ethernetController_updateNextPacketPointer          11    11      0    8291
                                             15 BANK0     11    11      0
    _enc424j600_getNextPacketPointer
                 _enc424j600_readSPI
   _enc424j600_setERXDATAReadPointer
    _enc424j600_setNextPacketPointer
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (3) _ethernetController_getRSV                            7     2      5    9486
                                             17 BANK0      7     2      5
                 _enc424j600_readSPI
   _enc424j600_setERXDATAReadPointer
_enc424j600_updateReceiveStatusVecto
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (4) _enc424j600_updateReceiveStatusVector                17    12      5    1370
                                              0 BANK0     17    12      5
 ---------------------------------------------------------------------------------
 (3) _ethernetController_getEtherTypeField                18     9      9    8190
                                             15 BANK0     18     9      9
                 _enc424j600_readSPI
   _enc424j600_setERXDATAReadPointer
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (3) _etherTypeToString                                    4     2      2     135
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _arp_handleNewPacket                                 36    34      2  155882
                                            156 BANK0      4     2      2
                                             88 BANK1     32    32      0
                   _UARTTransmitText
              _arp_parseFromRXBuffer
                      _arp_sendReply
                    _arp_setNewEntry
      _ethernetController_dropPacket
                          _getMillis
                   _ipAdressToString
                        _macToString
 ---------------------------------------------------------------------------------
 (4) _ethernetController_dropPacket                        2     0      2    9408
                                             18 BANK0      2     0      2
        _enc424j600_setRXTailPointer
         _enc424j600_writeSingleByte
_ethernetController_getNextPacketPoi
 ---------------------------------------------------------------------------------
 (5) _ethernetController_getNextPacketPointer              2     0      2       0
                                              2 BANK0      2     0      2
    _enc424j600_getNextPacketPointer
 ---------------------------------------------------------------------------------
 (6) _enc424j600_getNextPacketPointer                      2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _arp_sendReply                                       88    56     32   84795
                                              0 BANK1     88    56     32
                   _UARTTransmitText
                           _arp_send
   _ethernetController_getMacAddress
                   _ipAdressToString
                           _ipv4_cmp
            _ipv4_getIPSourceAddress
                        _macToString
 ---------------------------------------------------------------------------------
 (1) _ipv4_getIPSourceAddress                              4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (4) _arp_parseFromRXBuffer                               73    41     32   15875
                                             20 BANK0     73    41     32
_ethernetController_streamFromRXBuff
                           _ipv4_cmp
                     _ipv4_isAllZero
                            _mac_cmp
                      _mac_isAllZero
 ---------------------------------------------------------------------------------
 (5) _mac_cmp                                              7     3      4     400
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (5) _ethernetController_streamFromRXBuffer                5     3      2   11132
                                             15 BANK0      5     3      2
                 _enc424j600_readSPI
   _enc424j600_setERXDATAReadPointer
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (3) _UARTTransmitInt                                      4     0      4   19158
                                             58 BANK0      4     0      4
                   _UARTTransmitText
                        _intToString
 ---------------------------------------------------------------------------------
 (2) _intToString                                          4     0      4    3774
                                             36 BANK0      4     0      4
                               _ltoa
 ---------------------------------------------------------------------------------
 (3) _ltoa                                                10     2      8    2599
                                             26 BANK0     10     2      8
                              _ultoa
 ---------------------------------------------------------------------------------
 (4) _ultoa                                               13     5      8    2054
                                             13 BANK0     13     5      8
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (5) ___llmod                                              9     1      8     648
                                              0 BANK0      9     1      8
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8     657
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _ethernetController_updateLinkStatus                  5     3      2   21128
                                             32 BANK0      5     3      2
_enc424j600_readControlRegisterUnban
         _enc424j600_readPHYRegister
 ---------------------------------------------------------------------------------
 (3) _enc424j600_readPHYRegister                          18    16      2   13617
                                             14 BANK0     18    16      2
_enc424j600_readControlRegisterUnban
_enc424j600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (2) _ethernetController_setLEDConfig                      3     2      1   14029
                                             14 BANK0      3     2      1
_enc424j600_readControlRegisterUnban
_enc424j600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (2) _ethernetController_pollInterruptFlags               10     8      2    7626
                                             24 BANK0     10     8      2
       _enc424j600_getInterruptFlags
 ---------------------------------------------------------------------------------
 (3) _enc424j600_getInterruptFlags                        10     8      2    7190
                                             14 BANK0     10     8      2
_enc424j600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (2) _ethernetController_newPacketAvailable                0     0      0    7125
          _enc424j600_getPacketCount
 ---------------------------------------------------------------------------------
 (3) _enc424j600_getPacketCount                            1     1      0    7125
                                             14 BANK0      1     1      0
_enc424j600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (2) _ethernetController_clearInterruptFlag                1     1      0   13238
                                             18 BANK0      1     1      0
      _enc424j600_clearInterruptFlag
 ---------------------------------------------------------------------------------
 (3) _enc424j600_clearInterruptFlag                        4     4      0   13207
                                             14 BANK0      4     4      0
_enc424j600_readControlRegisterUnban
_enc424j600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (2) _arp_init                                            11    11      0   39651
                                             82 BANK0     11    11      0
                   _UARTTransmitText
                    _arp_setNewEntry
                  _ipv4_setToAllZero
                     _mac_setAllZero
 ---------------------------------------------------------------------------------
 (3) _arp_setNewEntry                                     24    10     14   23528
                                             58 BANK0     24    10     14
                   _UARTTransmitText
                          _getMillis (ARG)
                   _ipAdressToString
                     _ipv4_isAllZero
                        _macToString
                      _mac_isAllZero
 ---------------------------------------------------------------------------------
 (4) _mac_isAllZero                                        3     1      2     338
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _macToString                                         30    24      6    1779
                                             26 BANK0     30    24      6
   _ethernetController_getMacAddress (ARG)
 ---------------------------------------------------------------------------------
 (4) _ipv4_isAllZero                                       3     1      2     338
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _arp_background                                      12     9      3  187990
                                             81 BANK1     12     9      3
                   _UARTTransmitText
                     _arp_gratuitous
                          _arp_probe
                _ipv4_SrcAddrChanged
 _ipv4_getPreliminaryIPSourceAddress
 ---------------------------------------------------------------------------------
 (3) _ipv4_getPreliminaryIPSourceAddress                   4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (3) _ipv4_SrcAddrChanged                                  2     0      2     135
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _arp_probe                                           29    24      5   87102
                                             52 BANK1     29    24      5
                   _UARTTransmitText
                            ___lwmod
                  _arp_checkForEntry
                    _arp_sendRequest
                          _getMillis
                   _ipAdressToString
                  _ipv4_setToAllZero
                               _rand
 ---------------------------------------------------------------------------------
 (4) _rand                                                 2     0      2     512
                                             12 BANK0      2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8     512
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) _ipv4_setToAllZero                                    3     1      2     338
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _arp_gratuitous                                      17    12      5   85232
                                            156 BANK0      4     4      0
                                             52 BANK1     13     8      5
                   _UARTTransmitText
                  _arp_checkForEntry
                    _arp_sendRequest
                          _getMillis
                   _ipAdressToString
 ---------------------------------------------------------------------------------
 (4) _ipAdressToString                                    22    18      4    4680
                                             19 BANK0     22    18      4
                            ___lwdiv
                            ___lwmod
            _ipv4_getIPSourceAddress (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     856
                                             14 BANK0      5     1      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     933
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _arp_sendRequest                                     52    44      8   62705
                                              0 BANK1     52    44      8
                           _arp_send
   _ethernetController_getMacAddress
                     _mac_setAllZero
 ---------------------------------------------------------------------------------
 (3) _mac_setAllZero                                       3     1      2     338
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _ethernetController_getMacAddress                    12     6      6    7277
                                             14 BANK0     12     6      6
_enc424j600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (4) _arp_send                                            85    53     32   53975
                                             71 BANK0     85    53     32
_ethernetController_getSourceMACAddr
      _ethernetController_sendPacket
_ethernetController_streamToTransmit
            _ethernet_txFrameRequest
                 _mac_setToBroadcast
 ---------------------------------------------------------------------------------
 (5) _mac_setToBroadcast                                   3     1      2     234
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _ethernet_txFrameRequest                              5     3      2   19933
                                             66 BANK0      5     3      2
_ethernetController_writeDestination
_ethernetController_writeEtherTypeFi
              _memory_txFrameRequest
 ---------------------------------------------------------------------------------
 (3) _memory_txFrameRequest                               30    21      9    5104
                                             36 BANK0     30    21      9
                             ___wmul
                    _checkForOverlap
                  _entireMemoryEmpty
                   _entireMemoryFull
 ---------------------------------------------------------------------------------
 (4) _entireMemoryFull                                     1     1      0      99
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _entireMemoryEmpty                                    1     1      0      99
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _checkForOverlap                                     18     0     18    2380
                                             18 BANK0     18     0     18
            _checkForOverlapSwitched
 ---------------------------------------------------------------------------------
 (5) _checkForOverlapSwitched                             18     0     18    1128
                                              0 BANK0     18     0     18
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     440
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _ethernetController_writeEtherTypeFieldToBuffer      14     3     11    6913
                                             15 BANK0     14     3     11
   _enc424j600_setGPDATAWritePointer
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (3) _ethernetController_writeDestinationMACAddress       24     9     15    7319
                                             15 BANK0     24     9     15
   _enc424j600_setGPDATAWritePointer
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (2) _ethernetController_streamToTransmitBuffer           15     6      9    7989
                                             15 BANK0     15     6      9
   _enc424j600_setGPDATAWritePointer
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (4) _enc424j600_setGPDATAWritePointer                     5     3      2    3493
                                             10 BANK0      5     3      2
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (3) _ethernetController_sendPacket                        9     0      9   15696
                                             18 BANK0      9     0      9
             _enc424j600_setTXLength
       _enc424j600_setTXStartAddress
         _enc424j600_writeSingleByte
                _memory_txFrameClear
 ---------------------------------------------------------------------------------
 (4) _memory_txFrameClear                                  1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _enc424j600_setTXStartAddress                         4     2      2    6158
                                             14 BANK0      4     2      2
_enc424j600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (4) _enc424j600_setTXLength                               4     2      2    6158
                                             14 BANK0      4     2      2
_enc424j600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (5) _ethernetController_getSourceMACAddress              18     9      9    8252
                                             15 BANK0     18     9      9
                 _enc424j600_readSPI
   _enc424j600_setERXDATAReadPointer
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (6) _enc424j600_setERXDATAReadPointer                     5     3      2    3805
                                             10 BANK0      5     3      2
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (3) _arp_checkForEntry                                   15     9      6    1874
                                              7 BANK0     15     9      6
                          _getMillis
                           _ipv4_cmp
 ---------------------------------------------------------------------------------
 (4) _ipv4_cmp                                             7     3      4    1024
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _getMillis                                            4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (4) _UARTTransmitText                                     2     0      2   15249
                                             56 BANK0      2     0      2
                  _etherTypeToString (ARG)
   _ethernetController_getDeviceName (ARG)
   _ethernetController_getMacAddress (ARG)
                        _hexToString (ARG)
                        _intToString (ARG)
                   _ipAdressToString (ARG)
                 _ipProtocolToString (ARG)
            _ipv4_getIPSourceAddress (ARG)
                        _macToString (ARG)
 ---------------------------------------------------------------------------------
 (1) _ethernetController_init                              6     3      3   53016
                                             26 BANK0      6     3      3
  _enc424j600_enableAutoMACInsertion
         _enc424j600_enableReception
                 _enc424j600_initSPI
    _enc424j600_setNextPacketPointer
 _enc424j600_setRXBufferStartAddress
        _enc424j600_setRXTailPointer
   _ethernetController_checkDeviceId
       _ethernetController_softReset
 ---------------------------------------------------------------------------------
 (2) _ethernetController_softReset                        12     9      3   16685
                                             14 BANK0     12     9      3
_enc424j600_readControlRegisterUnban
_enc424j600_writeControlRegisterUnba
         _enc424j600_writeSingleByte
 ---------------------------------------------------------------------------------
 (2) _ethernetController_checkDeviceId                     7     4      3    7270
                                             14 BANK0      7     4      3
_enc424j600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (5) _enc424j600_setRXTailPointer                          4     2      2    6366
                                             14 BANK0      4     2      2
_enc424j600_writeControlRegisterUnba
_ethernetController_getNextPacketPoi (ARG)
 ---------------------------------------------------------------------------------
 (2) _enc424j600_setRXBufferStartAddress                   4     2      2    6158
                                             14 BANK0      4     2      2
_enc424j600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (4) _enc424j600_setNextPacketPointer                      2     0      2     239
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _enc424j600_enableReception                           0     0      0    3042
         _enc424j600_writeSingleByte
 ---------------------------------------------------------------------------------
 (4) _enc424j600_writeSingleByte                           1     1      0    3042
                                             10 BANK0      1     1      0
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (2) _enc424j600_enableAutoMACInsertion                    1     1      0   13049
                                             14 BANK0      1     1      0
_enc424j600_readControlRegisterUnban
_enc424j600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (5) _enc424j600_writeControlRegisterUnbanked              4     2      2    5918
                                             10 BANK0      4     2      2
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (4) _enc424j600_readControlRegisterUnbanked               4     2      2    7054
                                             10 BANK0      4     2      2
                 _enc424j600_readSPI
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (4) _enc424j600_writeSPI                                 10     8      2    3008
                                              0 BANK0     10     8      2
                 _enc424j600_initSPI
 ---------------------------------------------------------------------------------
 (5) _enc424j600_readSPI                                  10     8      2    1032
                                              0 BANK0     10     8      2
                 _enc424j600_initSPI
 ---------------------------------------------------------------------------------
 (5) _enc424j600_initSPI                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ethernetController_getDeviceName                    13    11      2      40
                                              0 BANK0     13    11      2
 ---------------------------------------------------------------------------------
 (1) _UARTInit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                19    19      0    1115
                                             21 COMRAM    19    19      0
                      _buttonHandler
                 _sevenSegmentUpdate
                         _updateTime
 ---------------------------------------------------------------------------------
 (12) _updateTime                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _sevenSegmentUpdate                                  7     5      2     914
                                             14 COMRAM     7     5      2
                        _parseNumber
 ---------------------------------------------------------------------------------
 (13) _parseNumber                                         7     4      3     667
                                              7 COMRAM     7     4      3
                          i2___lwdiv
 ---------------------------------------------------------------------------------
 (14) i2___lwdiv                                           7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (12) _buttonHandler                                      10     8      2     201
                                              0 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UARTInit
   _UARTTransmitText
     _etherTypeToString (ARG)
     _ethernetController_getDeviceName (ARG)
     _ethernetController_getMacAddress (ARG)
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
     _hexToString (ARG)
       _hexToChar
     _intToString (ARG)
       _ltoa
         _ultoa
           ___lldiv
           ___llmod
     _ipAdressToString (ARG)
       ___lwdiv
       ___lwmod
         _rand (ARG)
           ___lmul
       _ipv4_getIPSourceAddress (ARG)
     _ipProtocolToString (ARG)
     _ipv4_getIPSourceAddress (ARG)
     _macToString (ARG)
       _ethernetController_getMacAddress (ARG)
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
   _ethernetController_checkDeviceId
     _enc424j600_readControlRegisterUnbanked
       _enc424j600_readSPI
         _enc424j600_initSPI
       _enc424j600_writeSPI
         _enc424j600_initSPI
   _ethernetController_getDeviceName
   _ethernetController_getMacAddress
     _enc424j600_readControlRegisterUnbanked
       _enc424j600_readSPI
         _enc424j600_initSPI
       _enc424j600_writeSPI
         _enc424j600_initSPI
   _ethernetController_init
     _enc424j600_enableAutoMACInsertion
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _enc424j600_writeControlRegisterUnbanked
         _enc424j600_writeSPI
           _enc424j600_initSPI
     _enc424j600_enableReception
       _enc424j600_writeSingleByte
         _enc424j600_writeSPI
           _enc424j600_initSPI
     _enc424j600_initSPI
     _enc424j600_setNextPacketPointer
     _enc424j600_setRXBufferStartAddress
       _enc424j600_writeControlRegisterUnbanked
         _enc424j600_writeSPI
           _enc424j600_initSPI
     _enc424j600_setRXTailPointer
       _enc424j600_writeControlRegisterUnbanked
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _ethernetController_getNextPacketPointer (ARG)
         _enc424j600_getNextPacketPointer
     _ethernetController_checkDeviceId
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
     _ethernetController_softReset
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _enc424j600_writeControlRegisterUnbanked
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _enc424j600_writeSingleByte
         _enc424j600_writeSPI
           _enc424j600_initSPI
   _ethernetController_setLEDConfig
     _enc424j600_readControlRegisterUnbanked
       _enc424j600_readSPI
         _enc424j600_initSPI
       _enc424j600_writeSPI
         _enc424j600_initSPI
     _enc424j600_writeControlRegisterUnbanked
       _enc424j600_writeSPI
         _enc424j600_initSPI
   _handleStackBackgroundTasks
     _UARTTransmitText
       _etherTypeToString (ARG)
       _ethernetController_getDeviceName (ARG)
       _ethernetController_getMacAddress (ARG)
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
       _hexToString (ARG)
         _hexToChar
       _intToString (ARG)
         _ltoa
           _ultoa
             ___lldiv
             ___llmod
       _ipAdressToString (ARG)
         ___lwdiv
         ___lwmod
           _rand (ARG)
             ___lmul
         _ipv4_getIPSourceAddress (ARG)
       _ipProtocolToString (ARG)
       _ipv4_getIPSourceAddress (ARG)
       _macToString (ARG)
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
     _arp_background
       _UARTTransmitText
         _etherTypeToString (ARG)
         _ethernetController_getDeviceName (ARG)
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
         _hexToString (ARG)
           _hexToChar
         _intToString (ARG)
           _ltoa
             _ultoa
               ___lldiv
               ___llmod
         _ipAdressToString (ARG)
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
           _ipv4_getIPSourceAddress (ARG)
         _ipProtocolToString (ARG)
         _ipv4_getIPSourceAddress (ARG)
         _macToString (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
       _arp_gratuitous
         _UARTTransmitText
           _etherTypeToString (ARG)
           _ethernetController_getDeviceName (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _hexToString (ARG)
             _hexToChar
           _intToString (ARG)
             _ltoa
               _ultoa
                 ___lldiv
                 ___llmod
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
               _rand (ARG)
                 ___lmul
             _ipv4_getIPSourceAddress (ARG)
           _ipProtocolToString (ARG)
           _ipv4_getIPSourceAddress (ARG)
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
         _arp_checkForEntry
           _getMillis
           _ipv4_cmp
         _arp_sendRequest
           _arp_send
             _ethernetController_getSourceMACAddress
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_setERXDATAReadPointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernetController_sendPacket
               _enc424j600_setTXLength
                 _enc424j600_writeControlRegisterUnbanked
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
               _enc424j600_setTXStartAddress
                 _enc424j600_writeControlRegisterUnbanked
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
               _enc424j600_writeSingleByte
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _memory_txFrameClear
             _ethernetController_streamToTransmitBuffer
               _enc424j600_setGPDATAWritePointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernet_txFrameRequest
               _ethernetController_writeDestinationMACAddress
                 _enc424j600_setGPDATAWritePointer
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _ethernetController_writeEtherTypeFieldToBuffer
                 _enc424j600_setGPDATAWritePointer
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _memory_txFrameRequest
                 ___wmul
                 _checkForOverlap
                   _checkForOverlapSwitched
                 _entireMemoryEmpty
                 _entireMemoryFull
             _mac_setToBroadcast
           _ethernetController_getMacAddress
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _mac_setAllZero
         _getMillis
         _ipAdressToString
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
           _ipv4_getIPSourceAddress (ARG)
       _arp_probe
         _UARTTransmitText
           _etherTypeToString (ARG)
           _ethernetController_getDeviceName (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _hexToString (ARG)
             _hexToChar
           _intToString (ARG)
             _ltoa
               _ultoa
                 ___lldiv
                 ___llmod
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
               _rand (ARG)
                 ___lmul
             _ipv4_getIPSourceAddress (ARG)
           _ipProtocolToString (ARG)
           _ipv4_getIPSourceAddress (ARG)
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
         ___lwmod
           _rand (ARG)
             ___lmul
         _arp_checkForEntry
           _getMillis
           _ipv4_cmp
         _arp_sendRequest
           _arp_send
             _ethernetController_getSourceMACAddress
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_setERXDATAReadPointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernetController_sendPacket
               _enc424j600_setTXLength
                 _enc424j600_writeControlRegisterUnbanked
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
               _enc424j600_setTXStartAddress
                 _enc424j600_writeControlRegisterUnbanked
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
               _enc424j600_writeSingleByte
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _memory_txFrameClear
             _ethernetController_streamToTransmitBuffer
               _enc424j600_setGPDATAWritePointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernet_txFrameRequest
               _ethernetController_writeDestinationMACAddress
                 _enc424j600_setGPDATAWritePointer
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _ethernetController_writeEtherTypeFieldToBuffer
                 _enc424j600_setGPDATAWritePointer
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _memory_txFrameRequest
                 ___wmul
                 _checkForOverlap
                   _checkForOverlapSwitched
                 _entireMemoryEmpty
                 _entireMemoryFull
             _mac_setToBroadcast
           _ethernetController_getMacAddress
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _mac_setAllZero
         _getMillis
         _ipAdressToString
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
           _ipv4_getIPSourceAddress (ARG)
         _ipv4_setToAllZero
         _rand
           ___lmul
       _ipv4_SrcAddrChanged
       _ipv4_getPreliminaryIPSourceAddress
     _arp_init
       _UARTTransmitText
         _etherTypeToString (ARG)
         _ethernetController_getDeviceName (ARG)
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
         _hexToString (ARG)
           _hexToChar
         _intToString (ARG)
           _ltoa
             _ultoa
               ___lldiv
               ___llmod
         _ipAdressToString (ARG)
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
           _ipv4_getIPSourceAddress (ARG)
         _ipProtocolToString (ARG)
         _ipv4_getIPSourceAddress (ARG)
         _macToString (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
       _arp_setNewEntry
         _UARTTransmitText
           _etherTypeToString (ARG)
           _ethernetController_getDeviceName (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _hexToString (ARG)
             _hexToChar
           _intToString (ARG)
             _ltoa
               _ultoa
                 ___lldiv
                 ___llmod
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
               _rand (ARG)
                 ___lmul
             _ipv4_getIPSourceAddress (ARG)
           _ipProtocolToString (ARG)
           _ipv4_getIPSourceAddress (ARG)
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
         _getMillis (ARG)
         _ipAdressToString (ARG)
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
           _ipv4_getIPSourceAddress (ARG)
         _ipv4_isAllZero (ARG)
         _macToString (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
         _mac_isAllZero (ARG)
       _ipv4_setToAllZero
       _mac_setAllZero
     _ethernetController_clearInterruptFlag
       _enc424j600_clearInterruptFlag
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_writeControlRegisterUnbanked
           _enc424j600_writeSPI
             _enc424j600_initSPI
     _ethernetController_newPacketAvailable
       _enc424j600_getPacketCount
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
     _ethernetController_pollInterruptFlags
       _enc424j600_getInterruptFlags
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
     _ethernetController_setLEDConfig
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _enc424j600_writeControlRegisterUnbanked
         _enc424j600_writeSPI
           _enc424j600_initSPI
     _ethernetController_updateLinkStatus
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _enc424j600_readPHYRegister
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_writeControlRegisterUnbanked
           _enc424j600_writeSPI
             _enc424j600_initSPI
     _ethernet_rxGetNewFrame
       _UARTTransmitInt
         _UARTTransmitText
           _etherTypeToString (ARG)
           _ethernetController_getDeviceName (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _hexToString (ARG)
             _hexToChar
           _intToString (ARG)
             _ltoa
               _ultoa
                 ___lldiv
                 ___llmod
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
               _rand (ARG)
                 ___lmul
             _ipv4_getIPSourceAddress (ARG)
           _ipProtocolToString (ARG)
           _ipv4_getIPSourceAddress (ARG)
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
         _intToString
           _ltoa
             _ultoa
               ___lldiv
               ___llmod
       _UARTTransmitText
         _etherTypeToString (ARG)
         _ethernetController_getDeviceName (ARG)
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
         _hexToString (ARG)
           _hexToChar
         _intToString (ARG)
           _ltoa
             _ultoa
               ___lldiv
               ___llmod
         _ipAdressToString (ARG)
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
           _ipv4_getIPSourceAddress (ARG)
         _ipProtocolToString (ARG)
         _ipv4_getIPSourceAddress (ARG)
         _macToString (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
       _arp_handleNewPacket
         _UARTTransmitText
           _etherTypeToString (ARG)
           _ethernetController_getDeviceName (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _hexToString (ARG)
             _hexToChar
           _intToString (ARG)
             _ltoa
               _ultoa
                 ___lldiv
                 ___llmod
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
               _rand (ARG)
                 ___lmul
             _ipv4_getIPSourceAddress (ARG)
           _ipProtocolToString (ARG)
           _ipv4_getIPSourceAddress (ARG)
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
         _arp_parseFromRXBuffer
           _ethernetController_streamFromRXBuffer
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_setERXDATAReadPointer
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
           _ipv4_cmp
           _ipv4_isAllZero
           _mac_cmp
           _mac_isAllZero
         _arp_sendReply
           _UARTTransmitText
             _etherTypeToString (ARG)
             _ethernetController_getDeviceName (ARG)
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
             _hexToString (ARG)
               _hexToChar
             _intToString (ARG)
               _ltoa
                 _ultoa
                   ___lldiv
                   ___llmod
             _ipAdressToString (ARG)
               ___lwdiv
               ___lwmod
                 _rand (ARG)
                   ___lmul
               _ipv4_getIPSourceAddress (ARG)
             _ipProtocolToString (ARG)
             _ipv4_getIPSourceAddress (ARG)
             _macToString (ARG)
               _ethernetController_getMacAddress (ARG)
                 _enc424j600_readControlRegisterUnbanked
                   _enc424j600_readSPI
                     _enc424j600_initSPI
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
           _arp_send
             _ethernetController_getSourceMACAddress
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_setERXDATAReadPointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernetController_sendPacket
               _enc424j600_setTXLength
                 _enc424j600_writeControlRegisterUnbanked
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
               _enc424j600_setTXStartAddress
                 _enc424j600_writeControlRegisterUnbanked
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
               _enc424j600_writeSingleByte
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _memory_txFrameClear
             _ethernetController_streamToTransmitBuffer
               _enc424j600_setGPDATAWritePointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernet_txFrameRequest
               _ethernetController_writeDestinationMACAddress
                 _enc424j600_setGPDATAWritePointer
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _ethernetController_writeEtherTypeFieldToBuffer
                 _enc424j600_setGPDATAWritePointer
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _memory_txFrameRequest
                 ___wmul
                 _checkForOverlap
                   _checkForOverlapSwitched
                 _entireMemoryEmpty
                 _entireMemoryFull
             _mac_setToBroadcast
           _ethernetController_getMacAddress
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _ipAdressToString
             ___lwdiv
             ___lwmod
               _rand (ARG)
                 ___lmul
             _ipv4_getIPSourceAddress (ARG)
           _ipv4_cmp
           _ipv4_getIPSourceAddress
           _macToString
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
         _arp_setNewEntry
           _UARTTransmitText
             _etherTypeToString (ARG)
             _ethernetController_getDeviceName (ARG)
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
             _hexToString (ARG)
               _hexToChar
             _intToString (ARG)
               _ltoa
                 _ultoa
                   ___lldiv
                   ___llmod
             _ipAdressToString (ARG)
               ___lwdiv
               ___lwmod
                 _rand (ARG)
                   ___lmul
               _ipv4_getIPSourceAddress (ARG)
             _ipProtocolToString (ARG)
             _ipv4_getIPSourceAddress (ARG)
             _macToString (ARG)
               _ethernetController_getMacAddress (ARG)
                 _enc424j600_readControlRegisterUnbanked
                   _enc424j600_readSPI
                     _enc424j600_initSPI
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
           _getMillis (ARG)
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
               _rand (ARG)
                 ___lmul
             _ipv4_getIPSourceAddress (ARG)
           _ipv4_isAllZero (ARG)
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
           _mac_isAllZero (ARG)
         _ethernetController_dropPacket
           _enc424j600_setRXTailPointer
             _enc424j600_writeControlRegisterUnbanked
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernetController_getNextPacketPointer (ARG)
               _enc424j600_getNextPacketPointer
           _enc424j600_writeSingleByte
             _enc424j600_writeSPI
               _enc424j600_initSPI
           _ethernetController_getNextPacketPointer
             _enc424j600_getNextPacketPointer
         _getMillis
         _ipAdressToString
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
           _ipv4_getIPSourceAddress (ARG)
         _macToString
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
       _etherTypeToString
       _ethernetController_dropPacket
         _enc424j600_setRXTailPointer
           _enc424j600_writeControlRegisterUnbanked
             _enc424j600_writeSPI
               _enc424j600_initSPI
           _ethernetController_getNextPacketPointer (ARG)
             _enc424j600_getNextPacketPointer
         _enc424j600_writeSingleByte
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _ethernetController_getNextPacketPointer
           _enc424j600_getNextPacketPointer
       _ethernetController_getEtherTypeField
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_setERXDATAReadPointer
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _ethernetController_getNextPacketPointer
         _enc424j600_getNextPacketPointer
       _ethernetController_getRSV
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_setERXDATAReadPointer
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_updateReceiveStatusVector
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _ethernetController_updateNextPacketPointer
         _enc424j600_getNextPacketPointer
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_setERXDATAReadPointer
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_setNextPacketPointer
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _getMillis
       _intToString
         _ltoa
           _ultoa
             ___lldiv
             ___llmod
       _ipv4_handleNewPacket
         _UARTTransmitText
           _etherTypeToString (ARG)
           _ethernetController_getDeviceName (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _hexToString (ARG)
             _hexToChar
           _intToString (ARG)
             _ltoa
               _ultoa
                 ___lldiv
                 ___llmod
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
               _rand (ARG)
                 ___lmul
             _ipv4_getIPSourceAddress (ARG)
           _ipProtocolToString (ARG)
           _ipv4_getIPSourceAddress (ARG)
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
         _ethernetController_dropPacket
           _enc424j600_setRXTailPointer
             _enc424j600_writeControlRegisterUnbanked
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernetController_getNextPacketPointer (ARG)
               _enc424j600_getNextPacketPointer
           _enc424j600_writeSingleByte
             _enc424j600_writeSPI
               _enc424j600_initSPI
           _ethernetController_getNextPacketPointer
             _enc424j600_getNextPacketPointer
         _intToString
           _ltoa
             _ultoa
               ___lldiv
               ___llmod
         _ipAdressToString
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
           _ipv4_getIPSourceAddress (ARG)
         _ipProtocolToString
         _ipv4_checkHeaderChecksum
           _UARTTransmitText
             _etherTypeToString (ARG)
             _ethernetController_getDeviceName (ARG)
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
             _hexToString (ARG)
               _hexToChar
             _intToString (ARG)
               _ltoa
                 _ultoa
                   ___lldiv
                   ___llmod
             _ipAdressToString (ARG)
               ___lwdiv
               ___lwmod
                 _rand (ARG)
                   ___lmul
               _ipv4_getIPSourceAddress (ARG)
             _ipProtocolToString (ARG)
             _ipv4_getIPSourceAddress (ARG)
             _macToString (ARG)
               _ethernetController_getMacAddress (ARG)
                 _enc424j600_readControlRegisterUnbanked
                   _enc424j600_readSPI
                     _enc424j600_initSPI
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
           _hexToString
             _hexToChar
           _ipv4_calculateHeaderChecksum
         _ipv4_parseHeader
           _ethernetController_streamFromRXBuffer
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_setERXDATAReadPointer
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
       _macToString
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
     _ipAdressToString
       ___lwdiv
       ___lwmod
         _rand (ARG)
           ___lmul
       _ipv4_getIPSourceAddress (ARG)
     _ipv4_background
       _UARTTransmitText
         _etherTypeToString (ARG)
         _ethernetController_getDeviceName (ARG)
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
         _hexToString (ARG)
           _hexToChar
         _intToString (ARG)
           _ltoa
             _ultoa
               ___lldiv
               ___llmod
         _ipAdressToString (ARG)
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
           _ipv4_getIPSourceAddress (ARG)
         _ipProtocolToString (ARG)
         _ipv4_getIPSourceAddress (ARG)
         _macToString (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
     _ipv4_sendFrame
       _UARTTransmitText
         _etherTypeToString (ARG)
         _ethernetController_getDeviceName (ARG)
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
         _hexToString (ARG)
           _hexToChar
         _intToString (ARG)
           _ltoa
             _ultoa
               ___lldiv
               ___llmod
         _ipAdressToString (ARG)
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
           _ipv4_getIPSourceAddress (ARG)
         _ipProtocolToString (ARG)
         _ipv4_getIPSourceAddress (ARG)
         _macToString (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
       _arp_checkForEntry
         _getMillis
         _ipv4_cmp
       _arp_getEntryFromTable
       _arp_sendRequest
         _arp_send
           _ethernetController_getSourceMACAddress
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_setERXDATAReadPointer
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
           _ethernetController_sendPacket
             _enc424j600_setTXLength
               _enc424j600_writeControlRegisterUnbanked
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
             _enc424j600_setTXStartAddress
               _enc424j600_writeControlRegisterUnbanked
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
             _enc424j600_writeSingleByte
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _memory_txFrameClear
           _ethernetController_streamToTransmitBuffer
             _enc424j600_setGPDATAWritePointer
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
           _ethernet_txFrameRequest
             _ethernetController_writeDestinationMACAddress
               _enc424j600_setGPDATAWritePointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernetController_writeEtherTypeFieldToBuffer
               _enc424j600_setGPDATAWritePointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _memory_txFrameRequest
               ___wmul
               _checkForOverlap
                 _checkForOverlapSwitched
               _entireMemoryEmpty
               _entireMemoryFull
           _mac_setToBroadcast
         _ethernetController_getMacAddress
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
         _mac_setAllZero
       _ethernetController_getMacAddress
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
       _ethernetController_sendPacket
         _enc424j600_setTXLength
           _enc424j600_writeControlRegisterUnbanked
             _enc424j600_writeSPI
               _enc424j600_initSPI
         _enc424j600_setTXStartAddress
           _enc424j600_writeControlRegisterUnbanked
             _enc424j600_writeSPI
               _enc424j600_initSPI
         _enc424j600_writeSingleByte
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _memory_txFrameClear
       _ethernetController_writeDestinationMACAddress
         _enc424j600_setGPDATAWritePointer
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _getMillis
       _ipAdressToString
         ___lwdiv
         ___lwmod
           _rand (ARG)
             ___lmul
         _ipv4_getIPSourceAddress (ARG)
       _macToString
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
     _ipv4_setIPSourceAddress
   _ipAdressToString
     ___lwdiv
     ___lwmod
       _rand (ARG)
         ___lmul
     _ipv4_getIPSourceAddress (ARG)
   _ipv4_calculateHeaderChecksum
   _ipv4_getIPSourceAddress
   _ipv4_streamToTransmissionBuffer
     _ethernetController_streamToTransmitBuffer
       _enc424j600_setGPDATAWritePointer
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _enc424j600_writeSPI
         _enc424j600_initSPI
   _ipv4_txFrameRequest
     _ethernet_txFrameRequest
       _ethernetController_writeDestinationMACAddress
         _enc424j600_setGPDATAWritePointer
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _ethernetController_writeEtherTypeFieldToBuffer
         _enc424j600_setGPDATAWritePointer
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _memory_txFrameRequest
         ___wmul
         _checkForOverlap
           _checkForOverlapSwitched
         _entireMemoryEmpty
         _entireMemoryFull
   _ipv4_writeHeaderIntoBuffer
   _macToString
     _ethernetController_getMacAddress (ARG)
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
   _printErrorMessage
     _UARTTransmitText
       _etherTypeToString (ARG)
       _ethernetController_getDeviceName (ARG)
       _ethernetController_getMacAddress (ARG)
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
       _hexToString (ARG)
         _hexToChar
       _intToString (ARG)
         _ltoa
           _ultoa
             ___lldiv
             ___llmod
       _ipAdressToString (ARG)
         ___lwdiv
         ___lwmod
           _rand (ARG)
             ___lmul
         _ipv4_getIPSourceAddress (ARG)
       _ipProtocolToString (ARG)
       _ipv4_getIPSourceAddress (ARG)
       _macToString (ARG)
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
     _intToString
       _ltoa
         _ultoa
           ___lldiv
           ___llmod
   _printEthernetState
     _UARTTransmitText
       _etherTypeToString (ARG)
       _ethernetController_getDeviceName (ARG)
       _ethernetController_getMacAddress (ARG)
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
       _hexToString (ARG)
         _hexToChar
       _intToString (ARG)
         _ltoa
           _ultoa
             ___lldiv
             ___llmod
       _ipAdressToString (ARG)
         ___lwdiv
         ___lwmod
           _rand (ARG)
             ___lmul
         _ipv4_getIPSourceAddress (ARG)
       _ipProtocolToString (ARG)
       _ipv4_getIPSourceAddress (ARG)
       _macToString (ARG)
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
   _sevenSegmentInit
   _srand
     _ethernetController_getMacAddress (ARG)
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
   _stack_init
     _arp_init
       _UARTTransmitText
         _etherTypeToString (ARG)
         _ethernetController_getDeviceName (ARG)
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
         _hexToString (ARG)
           _hexToChar
         _intToString (ARG)
           _ltoa
             _ultoa
               ___lldiv
               ___llmod
         _ipAdressToString (ARG)
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
           _ipv4_getIPSourceAddress (ARG)
         _ipProtocolToString (ARG)
         _ipv4_getIPSourceAddress (ARG)
         _macToString (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
       _arp_setNewEntry
         _UARTTransmitText
           _etherTypeToString (ARG)
           _ethernetController_getDeviceName (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _hexToString (ARG)
             _hexToChar
           _intToString (ARG)
             _ltoa
               _ultoa
                 ___lldiv
                 ___llmod
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
               _rand (ARG)
                 ___lmul
             _ipv4_getIPSourceAddress (ARG)
           _ipProtocolToString (ARG)
           _ipv4_getIPSourceAddress (ARG)
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
         _getMillis (ARG)
         _ipAdressToString (ARG)
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
           _ipv4_getIPSourceAddress (ARG)
         _ipv4_isAllZero (ARG)
         _macToString (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
         _mac_isAllZero (ARG)
       _ipv4_setToAllZero
       _mac_setAllZero
     _ipv4_init

 _ISR (ROOT)
   _buttonHandler
   _sevenSegmentUpdate
     _parseNumber
       i2___lwdiv
   _updateTime

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0      A2      12       63.3%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0     100      10      100.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100     C2      FA       8       97.7%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     A0      A0       5      100.0%
BITCOMRAM           5E      0       1       0        1.1%
COMRAM              5E     28      4E       1       83.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     38A       6        0.0%
DATA                 0      0     38A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Mar 31 22:00:44 2019

                                            ?_hexToString 0061  
                __end_of_ethernetController_getMacAddress 4A8E  
               __size_of_ethernetController_getMacAddress 0074  
                      ??_ethernetController_getMacAddress 0074  
                       ?_ethernetController_getMacAddress 006E  
                        _ethernetController_getMacAddress 4A1A  
                                             arp_init@mac 00B2  
                                                      l75 438A  
                                                      l92 4F86  
                                                      l84 3B26  
                                                      l77 43B2  
                                                      l86 3B08  
                                                      l88 3B20  
                                                      l89 3B3C  
                     __size_of_ipv4_writeHeaderIntoBuffer 016E  
                        __end_of_ipv4_checkHeaderChecksum 3FEE  
                 ethernetController_getSourceMACAddress@i 0080  
                                     ___wmul@multiplicand 0062  
                                      i2___lwdiv@dividend 0001  
                      ipv4_calculateHeaderChecksum@header 0060  
                                            __CFG_CP0$OFF 000000  
                                            __CFG_CP1$OFF 000000  
                                            __CFG_CP2$OFF 000000  
                                            __CFG_CP3$OFF 000000  
                                             __CFG_LVP$ON 000000  
                                             arp_send@arp 00A7  
                                 ??_memory_txFrameRequest 008D  
                                                     l210 44C6  
                                                     l140 475C  
                                                     l204 44E4  
                                                     l213 4504  
                                                     l205 44CE  
                                                     l134 48E6  
                                                     l142 47A4  
                                                     l214 44EC  
                                                     l206 44BA  
                                                     l135 492C  
                                                     l232 4C5E  
                                                     l216 451A  
                                                     l241 4B84  
                                                     l217 44F4  
                                                     l209 44C2  
                                                     l218 44FA  
                                                     l155 4B32  
                                                     l412 5236  
                                                     l420 5220  
                                                     l180 4CAA  
                                                     l245 4BCA  
                                                     l317 45FC  
                                                     l165 4966  
                                                     l414 5258  
                                                     l182 4CCE  
                                                     l263 3920  
                                                     l183 4CE2  
                                                     l432 3988  
                                                     l361 3EB8  
                                                     l418 51FE  
                                                     l258 3868  
                                                     l370 036E  
                                                     l443 3A06  
                                                     l195 454C  
                                                     l179 4CE8  
                                                     l187 515A  
                                                     l371 04E8  
                                                     l531 1D88  
                                                     l436 3A0A  
                                                     l188 5170  
                                                     l372 03BA  
                                                     l524 1CB4  
                                                     l453 414A  
                                                     l437 39F6  
                                                     l197 457C  
                                                     l373 0516  
                                                     l533 1DBC  
                                                     l525 1C92  
                                                     l438 39C0  
                                                     l462 0624  
                                                     l390 50C6  
                                                     l374 03D6  
                                                     l366 024E  
                                                     l534 1D1A  
                                                     l526 1CAE  
                                                     l455 4146  
                                                     l439 39BC  
                                                     l359 3E98  
                                                     l199 45A2  
                                                     l375 03F2  
                                                     l367 0292  
                                                     l535 1D2A  
                                                     l448 4112  
                                                     l472 06DA  
                                                     l464 0646  
                                                     l384 530C  
                                                     l392 50F2  
                                                     l368 032E  
                                                     l528 1CD0  
                                                     l481 08A0  
                                                     l369 034E  
                                                     l482 094E  
                                                     l474 06E2  
                                                     l466 0670  
                                                     l386 5326  
                                                     l650 0BE2  
                                                     l459 415A  
                                                     l379 555C  
                                                     l539 1E9C  
                                                     l651 0C1A  
                                                     l476 08FC  
                                                     l396 5536  
                                                     l820 3B7A  
                                                     l660 0E38  
                                                     l652 0D1A  
                                                     l477 081C  
                                                     l469 06A6  
                                                     l821 3C48  
                                                     l661 0E84  
                                                     l822 3BCA  
                                                     l830 5052  
                                                     l806 55CE  
                                                     l814 3DC0  
                                                     l662 0E9C  
                                                     l654 0D52  
                                                     l487 09BE  
                                                     l831 5032  
                                                     l488 0A9C  
                                                     l824 3BFE  
                                                     l672 42DC  
                                                     l656 0D5C  
                                                     l489 0ABE  
                                                     l833 503E  
                                                     l841 4FFA  
                                                     l809 55DA  
                                                     l681 434A  
                                                     l649 0B72  
                                                     l826 3C3A  
                                                     l834 5048  
                                                     l842 5004  
                                                     l690 3712  
                                                     l674 42F0  
                                                     l851 2900  
                                                     l931 29E6  
                                                     l843 500E  
                                                     l691 3722  
                                                     l659 0EA0  
                                                     l852 2954  
                                                     l676 430C  
                                                     l941 1164  
                                                     l933 2A26  
                                                     l693 3792  
                                                     l685 3732  
                                                     l790 4DB2  
                                                     l950 1256  
                                                     l942 111C  
                                                     l934 2B04  
                                                     l838 5018  
                                                     l694 3756  
                                                     l686 36E2  
                                                     l678 4320  
                                                     l855 299A  
                                                     l935 2B18  
                                                     l839 4FEE  
                                                     l695 37C4  
                                                     l679 4336  
                                                     l792 4DDA  
                                                     l952 128C  
                                                     l944 11BA  
                                                     l696 3764  
                                                     l688 36F2  
                                                     l849 27E0  
                                                     l945 1172  
                                                     l697 3774  
                                                     l689 3702  
                                                     l954 12CE  
                                                     l938 110E  
                                                     l698 3782  
                                                     l971 20B4  
                                                     l955 12D0  
                                                     l947 1210  
                                                     l939 10C6  
                                                     l972 2080  
                                                     l956 1306  
                                                     l948 11C8  
                                                     l965 2030  
                                                     l974 20F6  
                                                     l966 1FFC  
                                                     l975 20C2  
                                                     l991 1978  
                                                     l968 2072  
                                                     l969 203E  
                                                     l994 1BF0  
                                                     l995 19A4  
                                                     l996 1C0C  
                                                     l997 19F6  
                                                     l998 1A9E  
                                                     l999 1AA6  
                                            __CFG_CPB$OFF 000000  
                             __end_of_ipv4_txFrameRequest 36D2  
                                            __CFG_CPD$OFF 000000  
                                                     _ISR 0008  
           enc424j600_writeControlRegisterUnbanked@opcode 006D  
                            ??_enc424j600_writeSingleByte 006A  
                __end_of_ethernetController_getDeviceName 55BC  
               __size_of_ethernetController_getDeviceName 0024  
                      ??_ethernetController_getDeviceName 0062  
                       ?_ethernetController_getDeviceName 0060  
                        _ethernetController_getDeviceName 5598  
                                memory_txFrameClear@index 0060  
                    enc424j600_readPHYRegister@unusedBits 0078  
                     ethernetController_getMacAddress@mac 0074  
                          memory_txFrameRequest@freeIndex 00A1  
                                                     prod 000FF3  
                                            hexToChar@val 0060  
           ethernetController_streamFromRXBuffer@startEnd 0071  
                                                     wreg 000FE8  
                                              _TXSTA1bits 000FAC  
                                      _sevenSegmentUpdate 3FEE  
               ethernetController_getEtherTypeField@field 006F  
                                  _numberOfOccupiedFields 0047  
                      ethernetController_setLEDConfig@LED 006F  
                      __size_of_ethernetController_getRSV 0074  
                      __end_of_enc424j600_readPHYRegister 3922  
                              _enc424j600_readPHYRegister 3800  
                          __end_of_enc424j600_setTXLength 540E  
                                        ??_arp_background 0154  
                                                    ?_ISR 0001  
                          ?_ethernetController_sendPacket 0072  
                                                    l1003 1BBA  
                                                    l1020 2596  
                                                    l1004 1BD2  
                                                    l1021 23E8  
                                                    l1006 1BDE  
                                                    l1023 2460  
                                                    l1015 2396  
                                                    l1024 254C  
                                                    l1040 2D2A  
                                                    l1200 533C  
                                                    l1018 257A  
                                                    l1050 2E06  
                                                    l1042 2DCA  
                                                    l1202 5356  
                                                    l1019 23C2  
                                                    l1051 2E54  
                                                    l1043 2D84  
                                                    l1028 2564  
                                                    l1044 2DFC  
                                                    l1045 2D94  
                                                    l1206 5510  
                                                    l1134 26C4  
                                                    l1231 4D14  
                                                    l1039 2E7A  
                                                    l1047 2DAA  
                                                    l1056 416C  
                                                    l1232 4D28  
                                                    l1048 2DBA  
                                                    l1152 22B6  
                                                    l1049 2E88  
                                                    l1066 2EB8  
                                                    l1154 22FC  
                                                    l1059 4208  
                                                    l1075 49D0  
                                                    l1163 2B92  
                                                    l1139 27C0  
                                                    l1068 2F10  
                                                    l1181 3350  
                                                    l1182 3372  
                                                    l1159 3F72  
                                                    l1183 338C  
                                                    l1184 339A  
                                                    l1177 342E  
                                                    l1185 33BE  
                                                    l1194 5108  
                                                    l1178 33E2  
                                                    l1179 3310  
                                                    l1196 5134  
                                                    l1623 3C62  
                                                    l1641 4E9A  
                                                    l1625 3CBE  
                                                    l1642 4EA4  
                                                    l1570 466E  
                                                    l1626 3D2C  
                                                    l1651 50A4  
                                                    l1571 4662  
                                                    l1619 4E34  
                                                    l1652 50AE  
                                                    l1580 4BF8  
                                                    l1637 4E7A  
                                                    l1581 4BEC  
                                                    l1638 4E72  
                                                    l1574 46A2  
                                                    l1647 508C  
                                                    l1575 46B0  
                                                    l1648 5084  
                                                    l1584 4C20  
                                                    l1585 4C2E  
                                                    l9011 552E  
                                                    l9023 27D8  
                                                    l8209 4C8C  
                                                    l8319 51F6  
                                                    l9127 5334  
                                                    l8193 3A3C  
                                                    l9147 5100  
                                                    l8437 4754  
                                                    l8189 39F2  
                                                    l8197 568C  
                                                    l9503 4208  
                                                    l8455 479C  
                                                    l9431 2EB0  
                                                    l9513 5508  
                                                    l8715 492C  
                                                    l8299 522E  
         ethernetController_streamToTransmitBuffer@opcode 007D  
                                                    l8725 4B2A  
                                                    l8565 0814  
                                                    l9373 12FE  
                                                    l8495 4BB2  
                                                    l9623 495E  
                                                    l9707 389A  
                                                    l9547 22AE  
                                                    l8599 0946  
                                                    l8767 5554  
                                                    l8943 3BDE  
                                                    l9559 22F4  
                                                    l9489 4164  
                                                    l8961 3C3A  
                                                    l8953 3C12  
                                                    l8971 5304  
                                                    l9587 3F72  
                                                    l8965 3C48  
                                                    l9919 24D4  
                                                    l8991 50BE  
                                                    STR_1 7FC3  
                                                    STR_2 7FFB  
                                                    STR_3 7F56  
                                                    STR_4 7F77  
                                                    STR_5 7EDA  
                           ?_ethernetController_softReset 006E  
                                                    STR_6 7FC3  
                                                    STR_7 7FFB  
                                                    STR_8 7FBA  
                                                    STR_9 7FB3  
                                                    l9993 3B12  
               ethernetController_clearInterruptFlag@flag 0072  
               enc424j600_setRXBufferStartAddress@lowByte 0070  
                                                    _RCIE 007CED  
                                                    _RCIF 007CF5  
                                                    u9001 3A26  
                                                    u9101 061A  
                                                    u9030 4784  
                                                    _RCIP 007CFD  
                                                    u9121 063C  
                                                    u9050 47BE  
                                                    u9301 08F2  
                                                    u9070 4BB2  
                                                    u9151 0666  
                                                    u9080 4BC2  
                                                    u9241 083A  
                                                    u9161 069C  
                                                    u9411 0AB4  
                                                    u9251 0858  
                                                    u8620 4C8C  
                                                    u9341 098A  
                                                    u8630 4C9C  
                                                    u8710 410E  
                                                    u9431 0AD0  
                                                    u9351 09A8  
                                                    u8640 40BC  
                                                    u9281 0896  
                                                    u9601 3F18  
                                                    u9530 4B58  
                                                    u8650 40CA  
                                                    u9370 09C2  
                                                    u9290 08A4  
                                                    u9450 4672  
                                                    u8660 40D8  
                                                    u8900 3984  
                                                    u8820 5224  
                                                    u9541 4B64  
                                                    u8670 40E6  
                                                    u8830 3932  
                                                    u9391 0A92  
                                                    u9551 3E70  
                                                    u8840 3940  
                                                    u9720 5090  
                                                    u9480 4BFC  
                                                    u8850 394E  
                                                    u8860 395C  
                                                    u9900 50F6  
                                                    u9581 3ECA  
                                                    u9741 4A84  
                                                    u9750 4DD2  
                                                    u8790 525C  
                                                    u9830 3C24  
                                                    u8951 39CA  
                                                    u9591 3EE4  
                                                    u9760 4DDE  
                                                    u9840 3C48  
                                                    u8961 39DC  
                                                    u9770 4DFE  
                                                    u9690 4E7E  
                                                    u9757 4DC8  
                                                    u9870 532A  
                                                    u8991 3A14  
                                                    u9791 3B54  
                                                    u9960 292C  
                                                    u9777 4DF4  
                                                    u9980 299E  
                                                    u9995 1698  
                                                    _TRMT 007D61  
                                                    _TXIF 007CF4  
                                          mac_isAllZero@i 0062  
                                     ?_sevenSegmentUpdate 000F  
                                       _ipv4_setToAllZero 5502  
                                                    _main 0ADA  
                                                    _rand 4D5A  
                                 printEthernetState@state 009A  
                                                    _ltoa 4E06  
                                                    _time 0029  
                                                    fsr0h 000FEA  
                                                    fsr1h 000FE2  
                                      i2___lwdiv@quotient 0005  
                                                    indf0 000FEF  
                                                    fsr2h 000FDA  
                                                    fsr0l 000FE9  
                                                    indf1 000FE7  
                                                    indf2 000FDF  
                                                    fsr1l 000FE1  
                                                    fsr2l 000FD9  
                                                    btemp 004F  
                                           __CFG_BORV$190 000000  
                               __size_of_sevenSegmentInit 001A  
                                 _ethernetController_init 435E  
                                      ?_ipv4_setToAllZero 0060  
                                                    prodh 000FF4  
                                                    prodl 000FF3  
                     __size_of_handleStackBackgroundTasks 0284  
                                                    start 00E8  
          __end_of_ethernetController_getSourceMACAddress 4B6E  
         __size_of_ethernetController_getSourceMACAddress 0070  
                ??_ethernetController_getSourceMACAddress 0078  
                 ?_ethernetController_getSourceMACAddress 006F  
                  _ethernetController_getSourceMACAddress 4AFE  
                                            arp_probe@err 014E  
                                           __CFG_IESO$OFF 000000  
                                 __end_of_UARTTransmitInt 5600  
                                         ??_mac_isAllZero 0062  
                                           __CFG_MCLRE$ON 000000  
                              memory_txFrameRequest@field 0098  
                                            ___param_bank 000000  
                           ethernet_rxGetNewFrame@counter 0035  
                                 _checkForOverlapSwitched 40AC  
              enc424j600_setRXBufferStartAddress@highByte 0071  
            __end_of_ethernetController_getEtherTypeField 4AFE  
           __size_of_ethernetController_getEtherTypeField 0070  
                  ??_ethernetController_getEtherTypeField 0078  
                   ?_ethernetController_getEtherTypeField 006F  
                    _ethernetController_getEtherTypeField 4A8E  
                                                   ??_ISR 0016  
                                     ??_ipv4_setToAllZero 0062  
                             ?_enc424j600_enableReception 0001  
                      __size_of_enc424j600_getPacketCount 001A  
                                          _ipv4_isAllZero 532E  
                     ethernetController_setLEDConfig@data 0070  
                                    ??_sevenSegmentUpdate 0011  
                                            ?_intToString 0084  
                          handleStackBackgroundTasks@intf 018C  
                     ethernetController_setLEDConfig@conf 006E  
                                           arp_send@field 00F3  
                                                   l10227 49C8  
                                                   l11141 1DAE  
                                                   l10319 2E54  
                                                   l11143 3406  
                                                   l11145 3410  
                                                   l11139 1DA4  
                                                   l10269 2734  
                                                   l10485 1D74  
                                     arp_checkForEntry@ip 0067  
                                       _nextPacketPointer 0042  
                                                   ?_main 0001  
                                                   ?_rand 006C  
                                                   _CCPR1 000FBE  
                                                   STR_10 7E36  
                                                   ?_ltoa 007A  
                                                   STR_11 7FC3  
                                                   STR_20 7FEB  
                                                   STR_12 7FF4  
                                                   STR_13 7FF7  
                                                   STR_21 7B16  
                                                   STR_30 7A87  
                                                   STR_14 7FD9  
                                                   STR_22 7DBE  
                                                   STR_23 7FEB  
                                                   STR_15 7FF1  
                                                   STR_31 7DF3  
                                                   STR_16 7FC3  
                                                   STR_32 7F4A  
                                                   STR_40 7F08  
                                                   STR_24 7BD8  
                                                   STR_41 7FEB  
                                                   STR_33 7FEF  
                                                   STR_17 7C1D  
                                                   STR_25 7BFD  
                                                   STR_26 7FEB  
                                                   STR_18 7D0C  
                                                   STR_34 7F93  
                                                   STR_50 7D86  
                                                   STR_42 7CEF  
                                                   STR_35 7FD0  
                                                   STR_27 7FFD  
                                                   STR_19 7FFA  
                                                   STR_43 7FD4  
                                                   STR_51 7FA4  
                                                   STR_44 7FEA  
                                                   STR_36 7F3E  
                                                   STR_52 7EB9  
                                                   STR_60 7D4B  
                                                   STR_28 7A87  
                                                   STR_61 7F8A  
                                                   STR_45 7F25  
                                                   STR_37 7E0B  
                                                   STR_53 7D2D  
                                                   STR_29 7ABA  
                                                   STR_38 7FD0  
                                                   STR_62 7FCF  
                                                   STR_54 7E83  
                                                   STR_46 7E70  
                                                   STR_70 7B3E  
                                                   STR_39 7A87  
                                                   STR_71 7FC3  
                                                   STR_63 7FC5  
                                                   STR_55 7F17  
                                                   STR_47 7E5D  
                                                   STR_72 7E33  
                                                   STR_80 7FFB  
                                                   STR_64 7FE6  
                                                   STR_56 7EF9  
                                                   STR_48 7E22  
                                                   STR_73 7FC0  
                                                   STR_65 7E96  
                                                   STR_81 7DD9  
                                                   STR_49 7D69  
                                                   STR_57 7BB3  
                                                   STR_74 7E33  
                                                   STR_66 7FCA  
                                                   STR_82 7F32  
                                                   STR_90 7B65  
                                                   STR_58 7A50  
                                                   STR_83 7FEA  
                                                   STR_75 7FFB  
                                                   STR_67 7FDE  
                                                   STR_91 7CCE  
                                                   STR_59 7C8B  
                                                   STR_68 7FE2  
                                                   STR_76 7F6D  
                                                   STR_92 7D0F  
                                                   STR_84 7AEB  
                                                   STR_85 7FEB  
                                                   STR_93 7D0C  
                                                   STR_77 7EEA  
                                                   STR_69 7EA8  
                                                   STR_94 7FEE  
                                                   STR_78 7ECA  
                                                   STR_86 7C69  
                                                   STR_79 7E33  
                                                   STR_87 7C22  
                                                   STR_95 7B8C  
                                                   STR_88 7A16  
                                                   STR_97 7F81  
                                                   STR_89 7C46  
                                                   STR_98 7F9C  
                                                   STR_99 7FEB  
                                                   u10010 18C4  
                                         __end_of___lldiv 46C2  
                                                   u10005 1746  
                                                   u10110 5138  
                                                   u10030 3D62  
                                                   u10015 18BA  
                                                   u11000 2F14  
                                                   u10040 3D90  
                                                   u10201 1F96  
                                                   u10121 1EB6  
                                                   u10050 3DEE  
                                                   u10211 1FB0  
                                                   u10131 1ED2  
                                                   u11011 2F52  
                                                   u10301 20CC  
                                                   u10221 1FCA  
                                                   u10141 1EE4  
                                                   u10045 3D86  
                                                   u11030 2FA6  
                                                   u10231 1FE4  
                                                   u10055 3DE4  
                                                   u11120 420C  
                                                   u10080 535A  
                                                   u10321 2108  
                                                   u10241 2006  
                                                   u10161 1F30  
                                                   u11041 2FEA  
                                                   u11201 3F34  
                                                   u10410 13F0  
                                                   u10171 1F48  
                                                   u11051 4408  
                                                   u12011 0422  
                                                   u10261 2048  
                                                   u10181 1F62  
                                                   u11061 445A  
                                                   u12021 045C  
                                                   u12101 2672  
                                                   u11310 29D8  
                                                   u10510 14BA  
                                                   u10430 141A  
                                                   u10350 137E  
                                                   u11230 4980  
                                                   u10191 1F7C  
                                                   u11071 447C  
                                                   u12111 2684  
                                                   u10408 13CC  
                                                   u11160 22F0  
                                                   u11400 2B84  
                                                   u10281 208A  
                                                   u11081 448E  
                                                   u12041 49DA  
                                                   u11321 29F8  
                                                   u11241 499C  
                                                   u12121 269A  
                                                   u12050 4A0C  
                                                   u10610 1580  
                                                   u10530 14E0  
                                                   u10450 1440  
                                                   u10370 13A2  
                                                   u11411 2BA6  
                                                   u10508 1496  
                                                   u10428 13F4  
                                                   u11180 2336  
                                                   u12140 2734  
                                                   u11341 2A3E  
                                                   u11421 2BE0  
                                                   u12301 1CF6  
                                                   u10630 15AA  
                                                   u10550 1508  
                                                   u10470 1468  
                                                   u10390 13C8  
                                                   u11351 2A9C  
                                                   u10711 1638  
                                                   u11191 2356  
                                                   u12071 25E2  
                                                   u12240 55A6  
                                                   u11264 45E0  
                                                   u10608 155C  
                                                   u10528 14BE  
                                                   u10448 141E  
                                                   u10368 1382  
                                                   u11265 45DC  
                                         __end_of___llmod 4C40  
                                                   u12081 2630  
                                                   u11530 2456  
                                                   u11274 4622  
                                                   u11290 389A  
                                                   u10650 15D2  
                                                   u10570 1532  
                                                   u10490 1492  
                                                   u11275 461E  
                                                   u12091 2660  
                                                   u10708 1620  
                                                   u10628 1584  
                                                   u10548 14E4  
                                                   u10468 1444  
                                                   u10388 13A6  
                                                   u11381 2B22  
                                                   u12421 4354  
                                                   u11550 24D4  
                                                   u11710 34AA  
                                                   u10830 12CA  
                                                   u10670 15F6  
                                                   u10590 1558  
                                                   u11391 2B38  
                                                   u12431 5478  
                                                   u11480 1B10  
                                                   u11800 3530  
                                                   u10648 15AE  
                                                   u10568 150C  
                                                   u10488 146C  
                                                   u10921 31C4  
                                                   u12601 0E64  
                                                   u11730 34C8  
                                                   u11650 345C  
                                                   u10690 161C  
                                                   u10931 31D6  
                                                   u12611 0E8E  
                                                   u12531 0C3A  
                                                   u11820 354E  
                                                   u11708 3492  
                                                   u10668 15D6  
                                                   u10588 1536  
                                                   u10941 323E  
                                                   u11581 53B0  
                                                   u12541 0D34  
                                                   u11750 34E2  
                                                   u11670 3474  
                                                   u10951 3260  
                                                   u11840 356A  
                                                   u11728 34AE  
                                                   u10880 12FE  
                                                   u10688 15FA  
                                                   u10961 3272  
                                                   u11818 3534  
                                                   u11770 34FE  
                                                   u11690 348E  
                                                   u12707 3AFC  
                                                   u10891 131C  
                                                   u10971 3296  
                                                   u11860 3582  
                                                   u11748 34CC  
                                                   u11668 3460  
                                                   u12581 0E0C  
                                                   u11838 3552  
                                                   u11951 0178  
                                                   u11880 56B0  
                                                   u11768 34E6  
                                                   u11688 3478  
                                                   u11858 356E  
                                                   u11794 3514  
                                                   u11795 350E  
                                                   u11971 02A4  
                                                   u12667 0B2C  
                                                   u11788 3502  
                                                   u12677 0C96  
                                                   u11878 3586  
                                                   u12687 3862  
                                                   u12697 3AC0  
                                         __end_of___lwdiv 4EAE  
                              __end_of_printEthernetState 435E  
                                         __end_of___lwmod 50B8  
                                           __CFG_WDTEN$ON 000000  
                                                   i2l710 4252  
                                                   i2l711 4296  
                                                   i2l720 0098  
        ethernetController_streamToTransmitBuffer@pointer 003E  
                                                   i2l709 4242  
                                                   i2l719 007A  
                                                   i2l752 4020  
                                                   i2l761 482A  
                                                   i2l762 481A  
                                                   i2l754 4028  
                                                   i2l764 481E  
                                                   i2l765 4822  
                                                   i2l757 4044  
                                                   i2l766 4826  
                                     _arp_handleNewPacket 29BC  
                                                   _SPBRG 000FAF  
                                                   _PORTA 000F80  
                                                   _PORTB 000F81  
                                                   _PORTC 000F82  
                        __size_of_ethernet_txFrameRequest 00E8  
                                                   _TRISA 000F92  
                                                   _TRISB 000F93  
                                                   _TRISC 000F94  
         __end_of_enc424j600_writeControlRegisterUnbanked 5296  
        __size_of_enc424j600_writeControlRegisterUnbanked 0036  
               ??_enc424j600_writeControlRegisterUnbanked 006C  
                ?_enc424j600_writeControlRegisterUnbanked 006A  
                 _enc424j600_writeControlRegisterUnbanked 5260  
                                           __CFG_WRT0$OFF 000000  
                                           __CFG_WRT1$OFF 000000  
                                           __CFG_WRT2$OFF 000000  
                                     ___lmul@multiplicand 0064  
                                           __CFG_WRT3$OFF 000000  
                                          __CFG_EBTR0$OFF 000000  
                                          __CFG_FCMEN$OFF 000000  
                                          __CFG_EBTR1$OFF 000000  
                                          __CFG_EBTR2$OFF 000000  
                                          __CFG_EBTR3$OFF 000000  
                                         __end_of_mac_cmp 50FA  
                                         _ipv4_background 32EC  
                                        __end_of_UARTInit 56E8  
                                         ??_arp_sendReply 00FC  
                                           __CFG_WRTB$OFF 000000  
                                           __CFG_WRTC$OFF 000000  
                                           __CFG_WRTD$OFF 000000  
                                          __CFG_EBTRB$OFF 000000  
                                                   _randx 0048  
                               __end_of_ipv4_setToAllZero 5528  
                                                   _srand 56E8  
                                                   _stack 0257  
                               arp_background@errAnnounce 0157  
                                                   main@i 01BA  
                                                   _ultoa 3C52  
           ethernetController_streamToTransmitBuffer@data 007C  
                       __end_of_ethernetController_getRSV 49A6  
                                          __pbitbssCOMRAM 0270  
                                                   pclath 000FFA  
                                                   tablat 000FF5  
                            ethernet_txFrameRequest@frame 00A2  
                                        ?_checkForOverlap 0072  
                                                   plusw0 000FEB  
                                                   plusw1 000FE3  
                                                   plusw2 000FDB  
                             memory_txFrameRequest@i_1178 0097  
                                                   status 000FD8  
                                          __CFG_T3CMX$RC0 000000  
                                                   wtemp6 0050  
                       enc424j600_clearInterruptFlag@flag 0070  
                             __size_of_mac_setToBroadcast 0026  
                                           arp_probe@link 0138  
                                          __CFG_ICPRT$OFF 000000  
                       enc424j600_clearInterruptFlag@temp 0071  
                                    ?_arp_handleNewPacket 00FC  
                                __end_of_UARTTransmitText 4E06  
                                          __CFG_PBADEN$ON 000000  
                                          _ipv4_sendFrame 25A4  
                                      __size_ofi2___lwdiv 0052  
                                            ?_parseNumber 0008  
                                        _ipAdressToString 27CE  
                                         __initialization 46C2  
                       ethernetController_softReset@F5987 004C  
                       ethernetController_softReset@F5989 0040  
                             memory_txFrameRequest@length 0084  
                                            __end_of_main 0F2C  
                                  __end_of_ipv4_isAllZero 535E  
                                            __end_of_rand 4DB0  
                                            __end_of_ltoa 4E5A  
                                ?_ipv4_getIPSourceAddress 0060  
                                  arpEntryToString@string 0370  
                                ?_ipv4_setIPSourceAddress 0060  
                                    _ipv4_handleNewPacket 2B6A  
                                          __CFG_PCLKEN$ON 000000  
                              _memory_txFrameRequest$1174 0093  
                       __end_of_enc424j600_getPacketCount 5650  
                                           main@headerBuf 0198  
                                          arp_send@i_3110 00D0  
                                          arp_send@i_3108 00CE  
                                          arp_send@i_3109 00CF  
                                                  ??_main 0191  
                                                  ??_rand 006E  
                               __size_of_entireMemoryFull 0038  
                                                  ??_ltoa 0082  
                                           __activetblptr 000002  
                      __end_of_ipv4_writeHeaderIntoBuffer 3180  
                              _ipv4_writeHeaderIntoBuffer 3012  
                         handleStackBackgroundTasks@stack 0185  
                                        ??_arp_gratuitous 0139  
                                          __CFG_SDOMX$RB3 000000  
                                         __CFG_CCP2MX$RC1 000000  
       ethernetController_writeDestinationMACAddress@addr 006F  
       ethernetController_writeDestinationMACAddress@data 007E  
                ethernetController_pollInterruptFlags@reg 0080  
                                        ___llmod@dividend 0060  
                                                  STR_100 7DA3  
                                                  STR_101 7FEB  
                                                  STR_110 7E33  
                                                  STR_102 7F62  
                                                  STR_111 7FFB  
                                                  STR_103 7FAC  
                                                  STR_104 7FFB  
                                                  STR_112 7E4A  
                                                  STR_105 7FC3  
                                                  STR_113 7CAD  
                                                  STR_106 7FD4  
                                                  STR_107 7FF7  
                                                  STR_108 7FF7  
                                                  STR_109 7FF7  
                                    __size_of_macToString 0108  
                                                  ?_srand 007A  
                                   _arp_getEntryFromTable 538C  
                                                  _ANSELA 000F5B  
                                                  _ANSELB 000F5C  
                                                  _ANSELC 000F5D  
                              ethernetController_getRSV@i 0077  
                                                  ?_ultoa 006D  
                                    ipv4_parseHeader@temp 008E  
                       __size_of_ipv4_checkHeaderChecksum 00C8  
                              printEthernetState@oldState 0248  
                                                  i2l1641 4EEC  
                                                  i2l1642 4EF6  
                                                  i2l1637 4ECC  
                                                  i2l1638 4EC4  
                               ??_ethernetController_init 007D  
                                                  i2l7641 403C  
                               ?_ipv4_checkHeaderChecksum 009A  
                      ipv4_sendFrame@failedResolveCounter 01D6  
       __end_of_ethernetController_streamToTransmitBuffer 4932  
      __size_of_ethernetController_streamToTransmitBuffer 0078  
             ??_ethernetController_streamToTransmitBuffer 0078  
              ?_ethernetController_streamToTransmitBuffer 006F  
               _ethernetController_streamToTransmitBuffer 48BA  
                                         _fSrcAddrChanged 0270  
                                  __end_of_ipv4_sendFrame 27CE  
                                   ??_arp_handleNewPacket 00FE  
                                                  _TXREG1 000FAD  
                                        mac_isAllZero@mac 0060  
                          ??_ethernetController_softReset 0071  
                               ??_checkForOverlapSwitched 0072  
                              ethernetController_init@err 007D  
                                  __size_of_buttonHandler 00AC  
                                 ?_ethernet_rxGetNewFrame 0178  
                                        ?_UARTTransmitInt 009A  
                                          __CFG_XINST$OFF 000000  
                                        __end_of_arp_init 4A1A  
                                        __end_of_arp_send 2116  
                                                  ___lmul 4D02  
                                        __end_of_ipv4_cmp 513C  
                                         ?_ipv4_isAllZero 0060  
                                                  ___wmul 548A  
                                   ?_ipv4_handleNewPacket 00B5  
                      __end_of_handleStackBackgroundTasks 1E9E  
                              _handleStackBackgroundTasks 1C1A  
                                          __CFG_STVREN$ON 000000  
                                   buttonHandler@oldState 0046  
                                               ??___lldiv 0068  
             enc424j600_writeControlRegisterUnbanked@addr 006C  
                                   buttonHandler@newState 0045  
             enc424j600_writeControlRegisterUnbanked@data 006A  
                                               ??___llmod 0068  
                                               ??___lwdiv 0064  
                                               ??___lwmod 0072  
                                    __size_of_hexToString 00EE  
                           enc424j600_setTXLength@lowByte 0070  
                            buttonHandler@debounceCounter 002D  
                                                  clear_0 4708  
                                                  clear_1 4714  
                                                  clear_2 4720  
                                                  clear_3 472E  
                              parseNumber@numberToDisplay 0008  
                                arp_parseFromRXBuffer@arp 009D  
                                 __end_of_ipv4_background 3444  
  __end_of_ethernetController_writeEtherTypeFieldToBuffer 4F4E  
 __size_of_ethernetController_writeEtherTypeFieldToBuffer 004E  
        ??_ethernetController_writeEtherTypeFieldToBuffer 007A  
         ?_ethernetController_writeEtherTypeFieldToBuffer 006F  
          _ethernetController_writeEtherTypeFieldToBuffer 4F00  
                                               ??_mac_cmp 0064  
                                        ??_mac_setAllZero 0062  
                                           main@prescaler 0194  
          ethernetController_streamToTransmitBuffer@field 006F  
          __end_of_enc424j600_readControlRegisterUnbanked 52CC  
         __size_of_enc424j600_readControlRegisterUnbanked 0036  
                ??_enc424j600_readControlRegisterUnbanked 006C  
                 ?_enc424j600_readControlRegisterUnbanked 006A  
                  _enc424j600_readControlRegisterUnbanked 5296  
                                            __pdataCOMRAM 0048  
                                      _enc424j600_initSPI 5600  
                           ?_enc424j600_setTXStartAddress 006E  
                                      _enc424j600_readSPI 4B6E  
                ethernetController_softReset@comFailCount 0072  
                                                  ltoa@cp 0082  
                                       __end_ofi2___lwdiv 4F00  
                                            __mediumconst 7A0A  
                             __size_of_ipProtocolToString 0048  
                                                  tblptrh 000FF7  
                                                  tblptrl 000FF6  
                                                  tblptru 000FF8  
                                                  srand@x 007A  
           __end_of_ethernetController_clearInterruptFlag 5712  
          __size_of_ethernetController_clearInterruptFlag 000E  
                  ?_ethernetController_clearInterruptFlag 0001  
                 ??_ethernetController_clearInterruptFlag 0072  
                   _ethernetController_clearInterruptFlag 5704  
                                     mac_setToBroadcast@i 0062  
                                                  ultoa@c 0079  
                                                  ultoa@v 0075  
                              __size_of_ipv4_setToAllZero 0026  
                                     ?_enc424j600_initSPI 0001  
                                      ipv4_background@err 009F  
                                          arp_probe@index 0141  
                                     ?_enc424j600_readSPI 0060  
                         ethernetController_softReset@err 0077  
                                         _numberToDisplay 0031  
                                    __CFG_LS48MHZ$SYS24X4 000000  
                                          arp_probe@state 01DA  
                                 ipAdressToString@address 02F0  
      __end_of_ethernetController_updateNextPacketPointer 48BA  
     __size_of_ethernetController_updateNextPacketPointer 007A  
             ?_ethernetController_updateNextPacketPointer 0001  
            ??_ethernetController_updateNextPacketPointer 006F  
              _ethernetController_updateNextPacketPointer 4840  
                     __size_of_enc424j600_enableReception 0008  
                                __size_of_arp_setNewEntry 017C  
                       sevenSegmentUpdate@digitsToDisplay 0039  
                                              __accesstop 0060  
                                 __end_of__initialization 4734  
                                       _printErrorMessage 36D2  
                                __size_of_arp_sendRequest 009E  
                            ??_enc424j600_readPHYRegister 0070  
           ethernetController_getEtherTypeField@ethertype 007C  
                                         ?_ipv4_sendFrame 0134  
                                   _arp_parseFromRXBuffer 0F2C  
                          __end_of_ethernet_rxGetNewFrame 05FE  
                                        _sevenSegmentInit 561C  
                            __size_of_enc424j600_writeSPI 0064  
               ethernetController_updateLinkStatus@temp16 0083  
                                           ___rparam_used 000001  
                                      ?_printErrorMessage 009A  
                             arp_parseFromRXBuffer@i_3033 0098  
                             arp_parseFromRXBuffer@i_3034 0099  
                             arp_parseFromRXBuffer@i_3035 009A  
              ethernetController_pollInterruptFlags@flags 007E  
                                 enc424j600_writeSPI@data 0060  
                                          __pcstackCOMRAM 0001  
                                        __CFG_nPWRTEN$OFF 000000  
                                 ipAdressToString@pointer 0087  
 enc424j600_updateReceiveStatusVector@receiveStatusVector 006C  
                                            __pidataBANK2 535E  
                                       ipv4_parseHeader@i 008C  
                                               ?_UARTInit 0001  
                                    ??_enc424j600_initSPI 0060  
                                    ??_enc424j600_readSPI 0062  
                                     ??_printErrorMessage 009D  
                         enc424j600_setRXTailPointer@addr 006E  
                         __end_of_ethernetController_init 43FE  
                                           __end_of_srand 56F6  
                         ??_ethernetController_dropPacket 0074  
                                           __end_of_ultoa 3D50  
                             arp_parseFromRXBuffer@offset 009B  
     ethernetController_getSourceMACAddress@sourceAddress 0079  
                           ?_enc424j600_getInterruptFlags 006E  
                                     arp_send@destination 00C7  
                                 _ethernet_txFrameRequest 3E3E  
                               __size_of_ipv4_parseHeader 024A  
                              ipProtocolToString@protocol 0062  
                                    __size_of_intToString 0032  
                         __end_of_checkForOverlapSwitched 415E  
                                      __size_of_getMillis 0012  
                                           _buttonHandler 4210  
                          __size_of_memory_txFrameRequest 04DC  
                             __end_of_ipv4_SrcAddrChanged 5690  
                           __end_of_memory_txFrameRequest 0ADA  
                                      __size_of_hexToChar 0022  
                                 arp_background@fAnnounce 0271  
                                      __size_of_arp_probe 02CC  
                                  ?_arp_getEntryFromTable 0060  
                                  arp_parseFromRXBuffer@i 0097  
                    __size_of_enc424j600_setRXTailPointer 002A  
                                                 ??_srand 007C  
                                      __size_of_ipv4_init 0004  
                                                 ??_ultoa 0075  
                               __end_of_printErrorMessage 3800  
                        enc424j600_getPacketCount@lowByte 006E  
                                              __pbssBANK1 01C2  
                                              __pbssBANK2 0200  
                                              __pbssBANK3 0300  
                             __end_of_memory_txFrameClear 5598  
                          ?_enc424j600_clearInterruptFlag 0001  
                                       _etherTypeToString 5030  
                                      ?_etherTypeToString 0060  
                                       __CFG_PLLSEL$PLL4X 000000  
                                  ??_ipv4_handleNewPacket 00B7  
                         ??_ethernetController_sendPacket 007B  
                                                 ?___lmul 0060  
                                                 ?___wmul 0060  
                                              ??_UARTInit 0060  
                                    __size_of_parseNumber 007E  
                                          hexToString@val 0061  
                                          ___lmul@product 0068  
                                   macToString@firstDigit 0093  
                                     ??_etherTypeToString 0062  
          ethernetController_writeDestinationMACAddress@i 0086  
                                        ?_ipv4_background 009A  
                                        _entireMemoryFull 51F0  
                                   ipv4_parseHeader@field 0074  
                                          ?_buttonHandler 0001  
                              etherTypeToString@ethertype 0060  
                                  ipv4_SrcAddrChanged@err 0060  
                 enc424j600_updateReceiveStatusVector@rsv 0060  
                       enc424j600_readPHYRegister@lowByte 007D  
                                __end_of_ipAdressToString 29BC  
                                         __CFG_WDTPS$1024 000000  
                enc424j600_setERXDATAReadPointer@highByte 006E  
                                                 _SSP1BUF 000FC9  
                                       ipv4_sendFrame@err 00FD  
  ethernetController_writeEtherTypeFieldToBuffer@highByte 007B  
                                               ?_arp_init 0001  
                                               ?_arp_send 00A7  
                            __size_of_ipv4_txFrameRequest 0136  
                          ??_enc424j600_setTXStartAddress 0070  
                                               ?_ipv4_cmp 0060  
                                        __CFG_CFGPLLEN$ON 000000  
                                      _printEthernetState 42BC  
                               __end_of_etherTypeToString 5074  
                                  ?_arp_parseFromRXBuffer 0074  
                  enc424j600_setRXBufferStartAddress@addr 006E  
           __end_of_ethernetController_streamFromRXBuffer 4D02  
          __size_of_ethernetController_streamFromRXBuffer 005E  
                 ??_ethernetController_streamFromRXBuffer 0071  
                  ?_ethernetController_streamFromRXBuffer 006F  
                   _ethernetController_streamFromRXBuffer 4CA4  
                          sevenSegmentUpdate@digitPointer 0044  
                                       ?_UARTTransmitText 0098  
                                       __end_of_getMillis 56D8  
                                                 __Hparam 0000  
                      __end_of_enc424j600_enableReception 5746  
                              _enc424j600_enableReception 573E  
ethernetController_updateNextPacketPointer@nextPktPointer 0075  
                                                 __Lparam 0000  
                                         ipv4_isAllZero@i 0062  
                                     ?_printEthernetState 009A  
                                       ??_arp_setNewEntry 00A8  
               __end_of_enc424j600_enableAutoMACInsertion 5502  
              __size_of_enc424j600_enableAutoMACInsertion 0028  
                      ?_enc424j600_enableAutoMACInsertion 0001  
                     ??_enc424j600_enableAutoMACInsertion 006E  
                       _enc424j600_enableAutoMACInsertion 54DA  
                                       __end_of_hexToChar 55DE  
                                      ??_UARTTransmitText 009A  
                                checkForOverlapSwitched@a 0060  
                                checkForOverlapSwitched@b 0069  
                                       ??_arp_sendRequest 00FC  
                                       __end_of_arp_probe 1C1A  
                                      buttonHandler@state 0001  
                               enc424j600_setTXLength@len 006E  
                                   __end_of_mac_isAllZero 532E  
                                         __size_of___lmul 0058  
                          enc424j600_setTXLength@highByte 0071  
                                                 ___lldiv 463E  
                                         __size_of___wmul 0028  
                                                 ___llmod 4BD8  
                                                 ___lwdiv 4E5A  
                                                 ___lwmod 5074  
                    enc424j600_setGPDATAWritePointer@addr 006A  
                               ??_ethernet_txFrameRequest 00A4  
                                       __end_of_ipv4_init 5750  
                                     sevenSegmentUpdate@i 0015  
                                                 __pcinit 46C2  
                             __size_of_sevenSegmentUpdate 00BE  
                                     parseNumber@hundreds 000E  
                                                 __ramtop 0800  
                                                 __ptext0 0ADA  
                                                 __ptext1 5720  
                                                 __ptext2 574C  
                                                 __ptext3 56E8  
                                                 __ptext4 561C  
                                                 __ptext5 42BC  
                                                 __ptext6 36D2  
                                                 __ptext7 3012  
                                                 __ptext8 359C  
                                                 __ptext9 5462  
                                                 _mac_cmp 50B8  
                                  ipv4_handleNewPacket@ip 00C2  
                                               _T0CONbits 000FD5  
                            ??_handleStackBackgroundTasks 0187  
                                            __size_of_ISR 00E0  
                                               _T1CONbits 000FCD  
                  enc424j600_setGPDATAWritePointer@opcode 006C  
                      enc424j600_setRXTailPointer@lowByte 0070  
              __end_of_enc424j600_setRXBufferStartAddress 5462  
             __size_of_enc424j600_setRXBufferStartAddress 002A  
                    ??_enc424j600_setRXBufferStartAddress 0070  
                     ?_enc424j600_setRXBufferStartAddress 006E  
                      _enc424j600_setRXBufferStartAddress 5438  
                   __end_of_ethernetController_dropPacket 5178  
                  __size_of_ethernetController_dropPacket 003C  
                           _ethernetController_dropPacket 513C  
                             ?_ipv4_writeHeaderIntoBuffer 0060  
                                    ??_printEthernetState 00A9  
           __end_of_ethernetController_pollInterruptFlags 359C  
          __size_of_ethernetController_pollInterruptFlags 0158  
                 ??_ethernetController_pollInterruptFlags 007A  
                  ?_ethernetController_pollInterruptFlags 0078  
                   _ethernetController_pollInterruptFlags 3444  
                          ??_enc424j600_getInterruptFlags 0070  
                        __size_of_ipv4_getIPSourceAddress 0012  
                 enc424j600_setGPDATAWritePointer@lowByte 006D  
                        __size_of_ipv4_setIPSourceAddress 0014  
                                              ??_arp_init 00B2  
                                                 main@err 01BB  
                                              ??_arp_send 00C7  
                                   __end_of_arp_sendReply 32EC  
                                    end_of_initialization 4734  
                              __size_of_printErrorMessage 012E  
                                              ??_ipv4_cmp 0064  
                              __end_of_mac_setToBroadcast 5574  
                              ?_ethernetController_getRSV 0071  
                                        arp_gratuitous@ip 0134  
                                           __Lmediumconst 7A0A  
                                                 ltoa@buf 007A  
                                        ??_ipv4_isAllZero 0062  
                         ipv4_calculateHeaderChecksum@sum 006E  
                                                 ltoa@val 007C  
                                         mac_setAllZero@i 0062  
             ethernetController_streamFromRXBuffer@opcode 0072  
                                         ___lldiv@divisor 0064  
                                         ___lldiv@counter 006C  
                                 __size_of_arp_background 0180  
                                      entireMemoryEmpty@i 0060  
                                __size_of_checkForOverlap 011E  
                                                 postdec1 000FE5  
                                                 postdec2 000FDD  
                                         macToString@addr 007A  
                                                 postinc0 000FEE  
                                                 postinc1 000FE6  
                                                 postinc2 000FDE  
                                       arp_setNewEntry@ip 00A0  
                             ?_handleStackBackgroundTasks 0185  
                                       _arp_checkForEntry 415E  
                   memory_txFrameRequest@fNoOverlapMarker 0095  
                    enc424j600_readPHYRegister@PHYaddress 0077  
                                         ??_buttonHandler 0003  
                                      ?_arp_checkForEntry 0067  
                   __end_of_ethernetController_sendPacket 54DA  
                  __size_of_ethernetController_sendPacket 0028  
                           _ethernetController_sendPacket 54B2  
                                       arp_sendReply@myIP 0134  
                                               _PORTBbits 000F81  
                                     ipv4_background@link 0001  
                                        _ipv4_parseHeader 2116  
                             ?_enc424j600_writeSingleByte 0001  
                                     ipv4_sendFrame@index 00FC  
                              ?_enc424j600_getPacketCount 0001  
                                ??_enc424j600_setTXLength 0070  
                       sevenSegmentUpdate@numberToDisplay 000F  
                                __end_of_sevenSegmentInit 5636  
                                     _enc424j600_writeSPI 4C40  
                 __end_of_ipv4_streamToTransmissionBuffer 548A  
                __size_of_ipv4_streamToTransmissionBuffer 0028  
                       ??_ipv4_streamToTransmissionBuffer 00C0  
                        ?_ipv4_streamToTransmissionBuffer 007E  
                         _ipv4_streamToTransmissionBuffer 5462  
                                              _stack_init 5720  
                                           ??_macToString 0080  
                  ethernetController_softReset@dataToSend 0073  
                                               _TRISBbits 000F93  
                                     ??_arp_checkForEntry 006D  
                                              _updateTime 5712  
         __end_of_ethernetController_getNextPacketPointer 5704  
        __size_of_ethernetController_getNextPacketPointer 000E  
               ??_ethernetController_getNextPacketPointer 0064  
                ?_ethernetController_getNextPacketPointer 0062  
                 _ethernetController_getNextPacketPointer 56F6  
                                              arp_init@ip 00B8  
                             __end_of_arp_handleNewPacket 2B6A  
                                        ??_ipv4_sendFrame 0176  
                                       i2___lwdiv@divisor 0003  
                         __end_of_ethernet_txFrameRequest 3F26  
                        ethernetController_getRSV@address 0071  
                                               i2___lwdiv 4EAE  
                                       i2___lwdiv@counter 0007  
                              __size_of_etherTypeToString 0044  
                                     UARTTransmitText@str 0098  
                                             _CCP1CONbits 000FBD  
                    __end_of_ipv4_calculateHeaderChecksum 194E  
                   __size_of_ipv4_calculateHeaderChecksum 030C  
                            _ipv4_calculateHeaderChecksum 1642  
                    enc424j600_setTXStartAddress@highByte 0071  
                                    ?_enc424j600_writeSPI 0060  
                                       intToString@number 01E6  
                                ipAdressToString@hundreds 0083  
                                   arp_probe@probeCounter 01DB  
                               __end_of_arp_checkForEntry 4210  
                                           ??_hexToString 0065  
                              arp_getEntryFromTable@index 0067  
                              arp_setNewEntry@oldestIndex 00B0  
                                      arp_checkForEntry@i 0075  
                                      ipv4_parseHeader@ip 008F  
                                          __end_of___lmul 4D5A  
        ethernetController_updateNextPacketPointer@opcode 0077  
                                          __end_of___wmul 54B2  
                                           __pidataCOMRAM 5746  
                                        parseNumber@digit 000A  
                            ?_enc424j600_setRXTailPointer 006E  
                                __size_of_UARTTransmitInt 0022  
                                       __size_of_UARTInit 0010  
                  enc424j600_setERXDATAReadPointer@opcode 006C  
                              __end_of_ipProtocolToString 5030  
                                      hexToString@pointer 0069  
                      ipv4_checkHeaderChecksum@testHeader 009E  
                                  arp_sendReply@senderMAC 0120  
                                  arp_sendReply@targetMAC 0126  
                                 ??_arp_getEntryFromTable 0067  
             __end_of_ethernetController_updateLinkStatus 45B4  
            __size_of_ethernetController_updateLinkStatus 008A  
                   ??_ethernetController_updateLinkStatus 0082  
                    ?_ethernetController_updateLinkStatus 0080  
                     _ethernetController_updateLinkStatus 452A  
                                     start_initialization 46C2  
                                             __end_of_ISR 00E8  
                                  enc424j600_readSPI@data 0060  
                                          intToString@val 0084  
                          ipv4_checkHeaderChecksum@header 009A  
                                ?_ethernetController_init 007A  
                                _ipv4_checkHeaderChecksum 3F26  
                         ipv4_handleNewPacket@headerField 00B9  
                                              ?i2___lwdiv 0001  
                           ipv4_writeHeaderIntoBuffer@ptr 0077  
                                ?_checkForOverlapSwitched 0060  
                                     __end_of_macToString 3C52  
                                         __CFG_nLPBOR$OFF 000000  
                                   ??_enc424j600_writeSPI 0062  
                                __end_of_entireMemoryFull 5228  
   __end_of_ethernetController_writeDestinationMACAddress 47C2  
  __size_of_ethernetController_writeDestinationMACAddress 0080  
         ??_ethernetController_writeDestinationMACAddress 007E  
          ?_ethernetController_writeDestinationMACAddress 006F  
           _ethernetController_writeDestinationMACAddress 4742  
                                         ___llmod@divisor 0064  
                     ethernetController_checkDeviceId@err 0072  
                                 __size_of_arp_gratuitous 0244  
                                     arp_background@state 01D7  
                                         ___llmod@counter 0068  
                           ?_ipv4_calculateHeaderChecksum 0060  
                           ethernetController_getRSV@temp 01F0  
                     __end_of_enc424j600_setRXTailPointer 5438  
                             _enc424j600_setRXTailPointer 540E  
                                    printErrorMessage@err 009A  
                                                ??___lmul 0068  
                                          _occupiedMemory 0200  
                                                ??___wmul 0064  
                                     arp_gratuitous@index 00FC  
                                     _ipv4_txFrameRequest 359C  
                             arp_background@ipPreliminary 01CA  
                  ethernetController_getDeviceName@string 0062  
                             __size_of_enc424j600_initSPI 001C  
                                             __pdataBANK2 02D2  
                                     arp_gratuitous@state 01D8  
                             __size_of_enc424j600_readSPI 006A  
                                           ??_intToString 0088  
                            ??_enc424j600_enableReception 006B  
                                        checkForOverlap@a 0072  
                                        checkForOverlap@b 007B  
                        enc424j600_readSPI@timeoutCounter 0066  
                         ??_enc424j600_clearInterruptFlag 006E  
                                       ??_checkForOverlap 0084  
                                     __end_of_hexToString 3E3E  
                           ??_enc424j600_setRXTailPointer 0070  
                                             ?_stack_init 0001  
                         __size_of_enc424j600_setTXLength 002A  
                                             __pbssCOMRAM 0029  
                        enc424j600_writeSingleByte@opcode 006A  
                                 _ipv4_getIPSourceAddress 5690  
                                 _ipv4_setIPSourceAddress 5668  
                ethernetController_updateLinkStatus@state 0080  
                                           __pcstackBANK0 0060  
                                           __pcstackBANK1 0100  
                                             ?_updateTime 0001  
                                       ?_ipAdressToString 0073  
                                   _memory_txFrameRequest 05FE  
           __end_of_ethernetController_newPacketAvailable 56B4  
          __size_of_ethernetController_newPacketAvailable 0012  
                  ?_ethernetController_newPacketAvailable 0001  
                 ??_ethernetController_newPacketAvailable 006F  
                   _ethernetController_newPacketAvailable 56A2  
                              arp_parseFromRXBuffer@frame 0074  
                                 ??_arp_parseFromRXBuffer 0094  
                                    ?_ipv4_txFrameRequest 00A7  
                ethernetController_softReset@receivedData 0075  
                                      ??_ipAdressToString 0077  
                                         _arp_setNewEntry 2E96  
                            __size_of_ipv4_SrcAddrChanged 0014  
                        enc424j600_getInterruptFlags@high 0077  
                                         _arp_sendRequest 43FE  
                                 __size_of_mac_setAllZero 0026  
                                       __size_of_arp_init 0074  
                                       __size_of_arp_send 0278  
                                       __size_of_ipv4_cmp 0042  
                               ipv4_txFrameRequest@packet 00A7  
                              buttonHandler@debounceValue 0007  
                                        arp_send@ethFrame 00D1  
                                          _arp_background 2D16  
                     __size_of_enc424j600_writeSingleByte 0018  
                                           ??_parseNumber 000B  
                                               _main$2404 01B8  
                                        ___lwdiv@dividend 0060  
                                      _sevenSegCharacters 02E4  
              ethernetController_getEtherTypeField@opcode 007E  
                              __size_of_arp_checkForEntry 00B2  
                                               __pintcode 0008  
                            __size_of_memory_txFrameClear 0024  
                                           __pmediumconst 7A0A  
                                               _getMillis 56C6  
                                               __ptext100 573E  
                                               __ptext101 5650  
                                               __ptext102 54DA  
                                               __ptext111 5712  
                                               __ptext103 5260  
                                               __ptext112 3FEE  
                                               __ptext104 5296  
                                               __ptext113 47C2  
                                               __ptext105 4C40  
                                               __ptext114 4EAE  
                                               __ptext106 4B6E  
                                               __ptext115 4210  
                                               __ptext107 5600  
                                               __ptext108 5598  
                                               __ptext109 56D8  
                                                ?___lldiv 0060  
                                                ?___llmod 0060  
                           __size_of_ipv4_handleNewPacket 01AC  
                                  arp_checkForEntry@index 006B  
                                                ?___lwdiv 0060  
                                               _arpStatus 003C  
                                                ?___lwmod 006E  
     ethernetController_writeEtherTypeFieldToBuffer@field 0071  
                                               _hexToChar 55BC  
                                               _arp_table 0300  
                                               _arp_probe 194E  
                                     ipv4_setToAllZero@ip 0060  
                                                ?_mac_cmp 0060  
                               __size_of_UARTTransmitText 0056  
                                               _ipv4_init 574C  
              ethernetController_getSourceMACAddress@temp 007F  
                    enc424j600_setERXDATAReadPointer@addr 006A  
                                  arp_background@errProbe 015A  
                 enc424j600_setERXDATAReadPointer@lowByte 006D  
                                  ipv4_parseHeader@i_3666 008D  
                                      ipAdressToString@ip 0073  
                                     __end_of_intToString 52FE  
                                             _macToString 3B4A  
                                       ??_UARTTransmitInt 009E  
                                   ??_ipv4_txFrameRequest 00A9  
                                        ___lwdiv@quotient 0065  
                                __size_of_ipv4_background 0158  
                                       _entireMemoryEmpty 5228  
                                ??_ethernet_rxGetNewFrame 017A  
                                             ??i2___lwdiv 0005  
                                          __size_of_srand 000E  
                                          __size_of_ultoa 00FE  
                      enc424j600_readPHYRegister@highByte 007E  
                                      ?_entireMemoryEmpty 0001  
                             ?_enc424j600_readPHYRegister 006E  
                     ipv4_streamToTransmissionBuffer@data 00C2  
                                arp_setNewEntry@timestamp 00A4  
                             ??_ethernetController_getRSV 0076  
                           arp_gratuitous@announceCounter 01D9  
                                  __end_of_arp_background 2E96  
                                          ___wmul@product 0064  
                             ethernet_rxGetNewFrame@frame 0178  
                                __end_of_ipv4_parseHeader 2360  
                                  _enc424j600_setTXLength 53E4  
                                                _PIE1bits 000F9D  
                       enc424j600_writeSPI@timeoutCounter 0066  
                                     __size_of_stack_init 000A  
                                     ??_entireMemoryEmpty 0060  
                                                _PIR1bits 000F9E  
                                       entireMemoryFull@i 0060  
                                                i2u730_40 4ED0  
                                                i2u823_44 3FFE  
                                                i2u823_45 3FFA  
                                                i2u818_40 426A  
                                                i2u819_40 426C  
                                                i2u827_40 406A  
                                                i2u828_44 407A  
                                                i2u828_45 4076  
                                                i2u855_40 0060  
                                                i2u855_46 0062  
                                                _RCONbits 000FD0  
                                        arp_setNewEntry@i 00B1  
                                     __size_of_updateTime 000E  
                                             _hexToString 3D50  
                                      _mac_setToBroadcast 554E  
                              __end_of_sevenSegmentUpdate 40AC  
                                              ?_getMillis 0060  
                                                _UARTInit 56D8  
                          ??_ipv4_calculateHeaderChecksum 0062  
                    __end_of_enc424j600_setTXStartAddress 53E4  
                   __size_of_enc424j600_setTXStartAddress 002A  
                            _enc424j600_setTXStartAddress 53BA  
                                  arp_handleNewPacket@arp 0158  
                                      UARTTransmitInt@val 009A  
                                              ?_hexToChar 0001  
                                     __end_of_parseNumber 4840  
                __end_of_enc424j600_setERXDATAReadPointer 51F0  
               __size_of_enc424j600_setERXDATAReadPointer 003C  
                      ??_enc424j600_setERXDATAReadPointer 006C  
                       ?_enc424j600_setERXDATAReadPointer 006A  
                        _enc424j600_setERXDATAReadPointer 51B4  
                                              ?_arp_probe 0134  
                                               arp_init@i 00BC  
                               ??_ipv4_getIPSourceAddress 0064  
                                       ___wmul@multiplier 0060  
                               ??_ipv4_setIPSourceAddress 0064  
                                     ?_mac_setToBroadcast 0060  
                                               arp_send@i 00CD  
                             ??_enc424j600_getPacketCount 006E  
                                              ?_ipv4_init 0001  
                                 arp_gratuitous@timeStart 01CE  
   ethernetController_updateNextPacketPointer@newPointerH 0079  
   ethernetController_updateNextPacketPointer@newPointerL 0078  
                                               main@ipDst 01BE  
                                       ?_sevenSegmentInit 0001  
                                 __end_of_arp_setNewEntry 3012  
                                 __end_of_arp_sendRequest 449C  
                               __end_of_entireMemoryEmpty 5260  
                                  ?_memory_txFrameRequest 0084  
                    ethernetController_checkDeviceId@data 0071  
                             __size_of_printEthernetState 00A2  
                   __end_of_enc424j600_clearInterruptFlag 463E  
                  __size_of_enc424j600_clearInterruptFlag 008A  
                           _enc424j600_clearInterruptFlag 45B4  
                                      ??_sevenSegmentInit 0060  
                     enc424j600_setTXStartAddress@lowByte 0070  
                                               ipv4_cmp@a 0060  
                                               ipv4_cmp@b 0062  
                                               ipv4_cmp@i 0066  
                                    arp_probe@waitingTime 0146  
                                       ___lmul@multiplier 0060  
                                             _INTCON3bits 000FF0  
                                               copy_data0 46D6  
                                               copy_data1 46F6  
                                         parseNumber@ones 000C  
                                         parseNumber@tens 000D  
                                       hexToString@number 01DC  
                                  __size_of_mac_isAllZero 0030  
                                   arp_sendReply@senderIP 012C  
                                   arp_sendReply@targetIP 0130  
                                      macToString@address 0081  
                                    ipAdressToString@ones 007B  
                                    ipAdressToString@tens 007F  
                                    ??_mac_setToBroadcast 0062  
                                          _arp_gratuitous 2360  
                                         ?_arp_background 0151  
                __end_of_ethernetController_checkDeviceId 4F9C  
               __size_of_ethernetController_checkDeviceId 004E  
                      ??_ethernetController_checkDeviceId 0071  
                       ?_ethernetController_checkDeviceId 006E  
                        _ethernetController_checkDeviceId 4F4E  
                                      arp_background@link 0156  
                                                __Hrparam 0000  
                                        ipv4_isAllZero@ip 0060  
                        enc424j600_setTXStartAddress@addr 006E  
                                ?_ethernet_txFrameRequest 00A2  
                                                __Lrparam 0000  
                    __end_of_enc424j600_getInterruptFlags 4FE8  
                   __size_of_enc424j600_getInterruptFlags 004C  
                            _enc424j600_getInterruptFlags 4F9C  
                                      __CFG_BOREN$SBORDIS 000000  
                        ipv4_writeHeaderIntoBuffer@header 0060  
                                      arp_gratuitous@link 0138  
                      __end_of_enc424j600_writeSingleByte 5668  
                              _enc424j600_writeSingleByte 5650  
                                  macToString@secondDigit 0094  
                                  __size_of_arp_sendReply 016C  
                                        __size_of___lldiv 0084  
                                        __size_of___llmod 0068  
                                             _intToString 52CC  
                       handleStackBackgroundTasks@errIPv4 018E  
                                        __size_of___lwdiv 0054  
                                        __size_of___lwmod 0044  
                 ethernetController_updateLinkStatus@temp 0082  
                              ??_ipv4_checkHeaderChecksum 009C  
                               _ethernetController_getRSV 4932  
                 __end_of_ethernetController_setLEDConfig 452A  
                __size_of_ethernetController_setLEDConfig 008E  
                       ??_ethernetController_setLEDConfig 006F  
                        ?_ethernetController_setLEDConfig 006E  
                         _ethernetController_setLEDConfig 449C  
            ethernetController_getEtherTypeField@highByte 0080  
                                              _ANSELBbits 000F5C  
                                   __end_of_buttonHandler 42BC  
                         enc424j600_getInterruptFlags@low 0076  
                                        __size_of_mac_cmp 0042  
       ethernetController_streamFromRXBuffer@startAddress 006F  
                                             _buttonState 01F9  
                     enc424j600_setRXTailPointer@highByte 0071  
                                arp_sendRequest@senderMAC 0108  
                                  memory_txFrameRequest@i 0096  
                          __size_of_arp_getEntryFromTable 002E  
                                arp_sendRequest@targetMAC 010E  
                                         ___lwdiv@divisor 0062  
                           __end_of_arp_getEntryFromTable 53BA  
                                         ___lwdiv@counter 0064  
                                       mac_setAllZero@mac 0060  
                                     _ipPreliminarySource 01C6  
                                                __ptext10 1C1A  
                                                __ptext11 5668  
                                                __ptext20 3D50  
                                                __ptext12 25A4  
                                                __ptext21 55BC  
                                                __ptext13 538C  
                                                __ptext30 56F6  
                                                __ptext22 4FE8  
                                                __ptext14 32EC  
                                                __ptext31 572A  
                                                __ptext23 4840  
                                                __ptext15 00EC  
                                                __ptext40 3C52  
                                                __ptext32 3180  
                                                __ptext24 4932  
                                                __ptext16 2B6A  
                                                __ptext41 4BD8  
                                                __ptext33 5690  
                                                __ptext25 1326  
                                                __ptext17 2116  
                                                __ptext50 5704  
                                                __ptext42 463E  
                                                __ptext34 0F2C  
                                                __ptext26 4A8E  
                                                __ptext18 3F26  
                                                __ptext51 45B4  
                                                __ptext43 452A  
                                                __ptext35 50B8  
                                                __ptext27 5030  
                                                __ptext19 1642  
                                                __ptext60 194E  
                                                __ptext52 49A6  
                                                __ptext44 3800  
                                                __ptext36 4CA4  
                                                __ptext28 29BC  
                                                __ptext61 4D5A  
                                                __ptext53 2E96  
                                                __ptext45 449C  
                                                __ptext37 55DE  
                                                __ptext29 513C  
                                                __ptext70 4A1A  
                                                __ptext62 4D02  
                                                __ptext54 52FE  
                                                __ptext46 3444  
                                                __ptext38 52CC  
                                                __ptext71 1E9E  
                                                __ptext63 5502  
                                                __ptext55 3B4A  
                                                __ptext47 4F9C  
                                                __ptext39 4E06  
                                                __ptext80 4F00  
                                                __ptext72 554E  
                                                __ptext64 2360  
                                                __ptext56 532E  
                                                __ptext48 56A2  
                                                __ptext81 4742  
                                                __ptext73 3E3E  
                                                __ptext65 27CE  
                                                __ptext57 2D16  
                                                __ptext49 5636  
                                                __ptext90 415E  
                                                __ptext82 48BA  
                                                __ptext74 05FE  
                                                __ptext66 5074  
                                                __ptext58 56B4  
                                                __ptext91 50FA  
                                                __ptext83 5178  
                                                __ptext75 51F0  
                                                __ptext67 4E5A  
                                                __ptext59 567C  
                                                __ptext92 56C6  
                                                __ptext84 54B2  
                                                __ptext76 5228  
                                                __ptext68 43FE  
                                                __ptext93 4DB0  
                                                __ptext85 5574  
                                                __ptext77 3922  
                                                __ptext69 5528  
                                                __ptext94 435E  
                                                __ptext86 53BA  
                                                __ptext78 40AC  
                                                __ptext95 3A40  
                                                __ptext87 53E4  
                                                __ptext79 548A  
                                                __ptext96 4F4E  
                                                __ptext88 4AFE  
                                                __ptext97 540E  
                                                __ptext89 51B4  
                                                __ptext98 5438  
                                                __ptext99 5734  
                                            _SSP1CON1bits 000FC6  
                   enc424j600_enableAutoMACInsertion@temp 006E  
                                                _arp_init 49A6  
                                                _arp_send 1E9E  
                                      ipv4_setToAllZero@i 0062  
                         __size_of_ethernet_rxGetNewFrame 0512  
                                          _mac_setAllZero 5528  
                                  __end_of_arp_gratuitous 25A4  
                                                _ipv4_cmp 50FA  
                                                _ipSource 01D2  
                                             _OSCCON2bits 000FD2  
                                       ipAdressToString@i 0088  
                                      _ipProtocolToString 4FE8  
                         __end_of_ipv4_getIPSourceAddress 56A2  
                enc424j600_setGPDATAWritePointer@highByte 006E  
                         __end_of_ipv4_setIPSourceAddress 567C  
              __end_of_ipv4_getPreliminaryIPSourceAddress 56C6  
             __size_of_ipv4_getPreliminaryIPSourceAddress 0012  
                    ??_ipv4_getPreliminaryIPSourceAddress 0064  
                     ?_ipv4_getPreliminaryIPSourceAddress 0060  
                      _ipv4_getPreliminaryIPSourceAddress 56B4  
                                           __size_of_main 0452  
                                           __size_of_rand 0056  
                                           __size_of_ltoa 0054  
                               _enc424j600_getPacketCount 5636  
                                       ??_ipv4_background 009D  
                                       ?_entireMemoryFull 0001  
                            __size_of_arp_handleNewPacket 01AE  
                 __end_of_enc424j600_getNextPacketPointer 5734  
                __size_of_enc424j600_getNextPacketPointer 000A  
                       ??_enc424j600_getNextPacketPointer 0062  
                        ?_enc424j600_getNextPacketPointer 0060  
                         _enc424j600_getNextPacketPointer 572A  
                 __end_of_enc424j600_setNextPacketPointer 573E  
                __size_of_enc424j600_setNextPacketPointer 000A  
                       ??_enc424j600_setNextPacketPointer 0062  
                        ?_enc424j600_setNextPacketPointer 0060  
                         _enc424j600_setNextPacketPointer 5734  
     ethernetController_writeDestinationMACAddress@opcode 0084  
                        __size_of_ethernetController_init 00A0  
                                         _checkForOverlap 3922  
                                     ?_ipProtocolToString 0060  
                                      ??_entireMemoryFull 0060  
                                             _parseNumber 47C2  
                                             ??_getMillis 0064  
                                                int$flags 004F  
                                 buttonHandler@resetValue 0003  
                                                mac_cmp@a 0060  
                        __size_of_checkForOverlapSwitched 00B2  
                                                mac_cmp@b 0062  
                                                mac_cmp@i 0066  
            enc424j600_readControlRegisterUnbanked@opcode 006D  
                                           _mac_isAllZero 52FE  
                   ipv4_streamToTransmissionBuffer@packet 007E  
                                     _ipv4_SrcAddrChanged 567C  
                                            _SSP1STATbits 000FC7  
                                             ??_hexToChar 0060  
                              ethernet_txFrameRequest@err 00A4  
                                             ??_arp_probe 0139  
                                 __size_of_ipv4_isAllZero 0030  
                               ipv4_setIPSourceAddress@ip 0060  
                               ethernet_rxGetNewFrame@err 0182  
                                        _UARTTransmitText 4DB0  
                                             ??_ipv4_init 0060  
                     __size_of_enc424j600_readPHYRegister 0122  
                                            ??_stack_init 00BD  
                                    arp_sendReply@request 0100  
                                 arp_sendRequest@ipSender 0100  
                                 arp_sendRequest@ipTarget 0104  
                                              _INTCONbits 000FF2  
                                    ??_ipProtocolToString 0062  
                                        ?_arp_setNewEntry 009A  
                                  ipv4_sendFrame@ipPacket 0134  
                                       arp_background@err 01F6  
                              __size_of_entireMemoryEmpty 0038  
                                            ??_updateTime 0001  
   ethernetController_writeEtherTypeFieldToBuffer@ethtype 006F  
                                        ?_arp_sendRequest 0100  
   ethernetController_writeEtherTypeFieldToBuffer@lowByte 007A  
                                       arp_gratuitous@err 00FD  
                                  __end_of_mac_setAllZero 554E  
                                               ultoa@base 0073  
                                     _memory_txFrameClear 5574  
                             __end_of_enc424j600_writeSPI 4CA4  
                        handleStackBackgroundTasks@errArp 0189  
     ipv4_streamToTransmissionBuffer@ethernetPacketLength 00C0  
                                           _arp_sendReply 3180  
                                                intlevel2 0000  
                                    ?_ipv4_SrcAddrChanged 0060  
                          __size_of_arp_parseFromRXBuffer 03FA  
                                         ?_arp_gratuitous 0134  
                           __end_of_arp_parseFromRXBuffer 1326  
                                                ltoa@base 0080  
                                        ___lwmod@dividend 006E  
                                        ___lldiv@dividend 0060  
             ethernetController_getEtherTypeField@lowByte 007F  
      ethernetController_writeDestinationMACAddress@i_638 0085  
               ethernetController_streamFromRXBuffer@temp 0073  
                          enc424j600_readPHYRegister@addr 0076  
                                              _RCSTA1bits 000FAB  
                          enc424j600_readPHYRegister@data 006E  
                                        macToString@F5947 02D2  
                          enc424j600_readPHYRegister@temp 007F  
      ethernetController_writeDestinationMACAddress@field 0075  
                               arp_setNewEntry@maxSeconds 00AC  
                                              _OSCCONbits 000FD3  
                                 __size_of_ipv4_sendFrame 022A  
                               __size_of_ipAdressToString 01EE  
                                      __end_of_stack_init 572A  
                                            macToString@i 0095  
                                            macToString@j 0097  
                enc424j600_readPHYRegister@timeoutCounter 0079  
                              __end_of_enc424j600_initSPI 561C  
                              __end_of_enc424j600_readSPI 4BD8  
                                    ?_memory_txFrameClear 0001  
                                      arp_probe@timeStart 0142  
                                          ?_mac_isAllZero 0060  
                                  _ethernet_rxGetNewFrame 00EC  
                                      __end_of_updateTime 5720  
                                    __CFG_CPUDIV$NOCLKDIV 000000  
                                       arp_probe@ipSender 014A  
                                       arp_probe@ipTarget 0134  
                                         _UARTTransmitInt 55DE  
                                      arp_setNewEntry@mac 009A  
                      ethernetController_sendPacket@field 0072  
            ethernetController_getSourceMACAddress@opcode 0078  
    ethernetController_writeEtherTypeFieldToBuffer@opcode 007C  
            __end_of_enc424j600_updateReceiveStatusVector 1642  
           __size_of_enc424j600_updateReceiveStatusVector 031C  
                  ??_enc424j600_updateReceiveStatusVector 0065  
                   ?_enc424j600_updateReceiveStatusVector 0060  
                    _enc424j600_updateReceiveStatusVector 1326  
                                   mac_setToBroadcast@mac 0060  
                                                ultoa@buf 006D  
                                                ultoa@val 006F  
                               ipv4_handleNewPacket@frame 00B5  
                                   ipv4_sendFrame@oldTime 01C2  
                __end_of_enc424j600_setGPDATAWritePointer 51B4  
               __size_of_enc424j600_setGPDATAWritePointer 003C  
                      ??_enc424j600_setGPDATAWritePointer 006C  
                       ?_enc424j600_setGPDATAWritePointer 006A  
                        _enc424j600_setGPDATAWritePointer 5178  
                                        ___lldiv@quotient 0068  
                                         ___lwmod@divisor 0070  
                                  arp_sendRequest@request 0114  
                      enc424j600_setNextPacketPointer@ptr 0060  
                                         ___lwmod@counter 0072  
                            ??_ipv4_writeHeaderIntoBuffer 0079  
                                            ?_macToString 007A  
              enc424j600_readControlRegisterUnbanked@addr 006C  
              enc424j600_readControlRegisterUnbanked@data 006A  
                         ethernetController_getRSV@opcode 0076  
                    __end_of_ethernetController_softReset 3B4A  
                   __size_of_ethernetController_softReset 010A  
                            _ethernetController_softReset 3A40  
                                         ?_mac_setAllZero 0060  
                            __end_of_ipv4_handleNewPacket 2D16  
             ethernetController_getSourceMACAddress@field 006F  
                                      arp_sendReply@reply 0138  
                                          ?_arp_sendReply 0100  
                                   ??_ipv4_SrcAddrChanged 0062  
                                arp_handleNewPacket@frame 00FC  
                                      __CFG_FOSC$INTOSCIO 000000  
                                 ?_enc424j600_setTXLength 006E  
                                 __end_of_checkForOverlap 3A40  
           __end_ofethernetController_getDeviceName@F5999 7A16  
                   ethernetController_getDeviceName@F5999 7A0B  
                          ?_ethernetController_dropPacket 0072  
                                       ?_ipv4_parseHeader 0074  
                                 _sevenSegmentUpdate$2495 0013  
                                      ??_ipv4_parseHeader 008B  
                                   ??_memory_txFrameClear 0060  
